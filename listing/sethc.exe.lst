push esp  +
retf 998h  +
***
mov ds:2C6E250Ah eax +
retn   +
***
retf 0  +
***
retf   +
***
lea eax [ecx+0Ch] +
or edx 0FFFFFFFFh +
xadd [eax] edx +
dec edx  +
test edx edx +
jg locret_1006A2E  +
mov eax [ecx] +
mov edx [eax] +
push ecx  +
mov ecx eax +
call dword ptr [edx+4]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_1006A8B  +
dec eax  +
jz loc_1006A82  +
push 57h  +
pop eax  +
jmp loc_1006AF9  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_1006AB1  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_1006ADA  +
cmp dword ptr [esi+10h] 0 +
jz loc_1006ADA  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_1006AF7  +
test cl 2 +
jz loc_1006AE8  +
mov esi [esi+10h] +
test esi esi +
jz loc_1006AE8  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push 1  +
push 1000000h  +
push [ebp+arg_0]  +
call InitProcessPriv  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_1010000 +
push edi  +
mov edi offset dword_1010318 +
jmp loc_1006B64  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_1006A5C  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_1006B3B  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi off_1010000 +
push edi  +
mov edi offset off_1010000 +
cmp esi edi +
jz loc_1006BB0  +
jmp loc_1006BA6  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_1006BA4  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_1006B88  +
mov off_1010000 edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_1006BE9  +
cmp word ptr [edx] 0 +
jnz loc_1006BCE  +
push 0Eh  +
jmp loc_1006BEB  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1006BD4  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1006BEC  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1006BFD  +
cmp word ptr [edx] 0 +
jnz loc_1006C02  +
mov edx offset aNull +
jmp loc_1006C02  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov [esi] eax +
mov [esi+4] ecx +
mov eax off_1010000 +
cmp eax offset off_1010000 +
jz loc_1006C5D  +
test byte ptr [eax+1Ch] 40h +
jz loc_1006C5D  +
push ecx  +
push offset dword_10014E8  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006BB8  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov ebx offset off_1010000 +
mov edi offset dword_10014E8 +
test eax eax +
jz loc_1006CA7  +
mov ecx [eax] +
test ecx ecx +
jge loc_1006CA7  +
mov eax off_1010000 +
cmp eax ebx +
jz loc_1006CC7  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006CAC  +
push ecx  +
push dword ptr [esi+4]  +
push edi  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AEAF  +
mov eax off_1010000 +
cmp eax ebx +
jz loc_1006CC7  +
test byte ptr [eax+1Ch] 40h +
jz loc_1006CC7  +
push dword ptr [esi+4]  +
push edi  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006BB8  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push ebx  +
push offset aIsinteractiveu  +
lea ecx [ebp+var_1C] +
call sub_1006C25  +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [ebp+var_14] ebx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call ds:AllocateAndInitializeSid  +
test eax eax +
jnz loc_1006D29  +
mov [ebp+pSid] ebx +
cmp [ebp+pSid] ebx +
jz loc_1006D55  +
push esi  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
push [ebp+pSid]  +
mov esi eax +
call ds:FreeSid  +
cmp esi ebx +
pop esi  +
jz loc_1006D55  +
cmp [ebp+var_14] ebx +
jz loc_1006D55  +
xor ebx ebx +
inc ebx  +
lea ecx [ebp+var_1C] +
call sub_1006C69  +
mov ecx [ebp+var_4] +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1009AE9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset Name  +
push 1  +
push 0  +
call ds:CreateMutexW  +
mov hObject eax +
test eax eax +
jnz loc_1006D92  +
xor eax eax +
jmp loc_1006DC9  +
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_1006DB4  +
push hObject  +
call ds:CloseHandle  +
and hObject 0 +
jmp loc_1006D8E  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call PlaySoundServerInitialize  +
test eax eax +
jl loc_1006D9F  +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push edi  +
cmp eax ebx +
jnz loc_1006DE9  +
xor eax eax +
jmp loc_1006E82  +
mov ecx eax +
push esi  +
lea esi [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
cmp dx bx +
jnz loc_1006DEF  +
sub ecx esi +
sar ecx 1 +
mov [ebp+arg_0] ecx +
jz loc_1006E7F  +
cmp ecx 3 +
ja loc_1006E7F  +
mov edi [ebp+arg_4] +
cmp edi ebx +
jz loc_1006E7F  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jz loc_1006E7F  +
mov edx [ebp+arg_C] +
cmp edx ebx +
jz loc_1006E7F  +
mov [edi] ebx +
mov [esi] ebx +
mov [edx] ebx +
test ecx ecx +
jbe loc_1006E3E  +
movzx ecx word ptr [eax+ebx*2] +
cmp cx 30h +
jb loc_1006E7F  +
cmp cx 39h +
ja loc_1006E7F  +
mov ecx [ebp+arg_0] +
inc ebx  +
cmp ebx ecx +
jb loc_1006E26  +
cmp ecx 3 +
jnz loc_1006E5A  +
movzx ecx word ptr [eax] +
sub ecx 30h +
mov [edi] ecx +
movzx ecx word ptr [eax+2] +
sub ecx 30h +
mov [esi] ecx +
movzx eax word ptr [eax+4] +
jmp loc_1006E75  +
cmp ecx 2 +
jnz loc_1006E6D  +
movzx ecx word ptr [eax] +
sub ecx 30h +
mov [esi] ecx +
movzx eax word ptr [eax+2] +
jmp loc_1006E75  +
cmp ecx 1 +
jnz loc_1006E7A  +
movzx eax word ptr [eax] +
sub eax 30h +
mov [edx] eax +
xor eax eax +
inc eax  +
jmp loc_1006E81  +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+hwnd] esi +
jz loc_1006EE6  +
push 3  +
pop eax  +
mov word ptr [ebp+var_14] ax +
lea eax [ebp+ppvObject] +
push eax  +
push offset riid  +
push 0FFFFFFFCh  +
push [ebp+hwnd]  +
mov [ebp+ppvObject] esi +
mov [ebp+var_C] esi +
call AccessibleObjectFromWindow  +
test eax eax +
jnz loc_1006EE6  +
mov eax [ebp+ppvObject] +
cmp eax esi +
jz loc_1006EE6  +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
push 1  +
push eax  +
movs   +
call dword ptr [ecx+54h]  +
mov eax [ebp+ppvObject] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100A4AB  +
test [ebp+arg_0] 1 +
jz loc_1006F0B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+dwExceptionFlags]  +
push [ebp+dwExceptionCode]  +
call ds:RaiseException  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp dword ptr [ebp+8] 8007000Eh +
push 1  +
setz al  +
dec eax  +
and eax 6 +
add eax 0C0000017h +
push eax  +
call sub_1006F17  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_1006FAB  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_1006F99  +
dec edx  +
jnz loc_1006FAB  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
jmp loc_1006FA8  +
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [eax] +
or ecx [eax+4] +
jz loc_1006FC7  +
xor eax eax +
jmp loc_1006FD7  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventRegister  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jnz loc_1006FF8  +
xor eax eax +
jmp loc_1007007  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push eax  +
push 3  +
call ds:MultiByteToWideChar  +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 0  +
push 3  +
call ds:MultiByteToWideChar  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_100706B  +
push 80004005h  +
call loc_1006F35  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_1007093  +
push 1  +
call sub_1006EF1  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_10070BF  +
mov edx [ecx] +
cmp eax [edx-8] +
jg loc_10070BF  +
mov [edx-0Ch] eax +
mov ecx [ecx] +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
***
push 80070057h  +
call loc_1006F35  +
push 8007000Eh  +
call loc_1006F35  +
mov edi edi +
push esi  +
push offset dword_101032C  +
mov esi ecx +
call sub_1007052  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
sub ecx 10h +
xor eax eax +
push edi  +
mov edi [ecx] +
cmp [ecx+4] eax +
jz loc_100712B  +
cmp [ecx+0Ch] eax +
jge loc_100711A  +
push eax  +
mov ecx esi +
call loc_100709D  +
jmp loc_100712B  +
call sub_1006A15  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ecx] +
mov ebx [esi-0Ch] +
sub esi 10h +
mov [ebp+var_8] ecx +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
mov [ebp+var_4] ebx +
call dword ptr [eax+10h]  +
mov edx [eax] +
push 2  +
push [ebp+arg_0]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_1007168  +
call loc_10070CF  +
mov eax [ebp+arg_0] +
cmp ebx eax +
jge loc_1007171  +
mov eax ebx +
inc eax  +
push eax  +
lea ecx [esi+10h] +
push ecx  +
push eax  +
lea ebx [edi+10h] +
push ebx  +
call sub_1007918  +
mov eax [ebp+var_4] +
add esp 10h +
mov ecx esi +
mov [edi+4] eax +
call sub_1006A15  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp [eax+8] edx +
mov ecx [eax] +
jge loc_10071CC  +
test edx edx +
jle loc_10071CC  +
push edi  +
mov edi [ecx] +
push 2  +
push edx  +
push eax  +
call dword ptr [edi+8]  +
pop edi  +
test eax eax +
jnz loc_10071D1  +
call loc_10070CF  +
add eax 10h +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov edx [eax-0Ch] +
sub eax 10h +
push esi  +
mov esi [ebp+arg_0] +
cmp edx esi +
jle loc_10071F7  +
mov esi edx +
cmp dword ptr [eax+0Ch] 1 +
jle loc_1007205  +
push esi  +
call sub_1007133  +
jmp loc_1007229  +
mov eax [eax+8] +
cmp eax esi +
jge loc_1007229  +
mov edx eax +
mov eax 400h +
cmp edx eax +
jle loc_100721B  +
add edx eax +
jmp loc_100721D  +
add edx edx +
cmp edx esi +
jge loc_1007223  +
mov edx esi +
push edx  +
call sub_10071A2  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ecx ecx +
sub eax 10h +
inc ecx  +
sub ecx [eax+0Ch] +
mov eax [eax+8] +
sub eax [ebp+arg_0] +
or ecx eax +
jge loc_100725A  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10071E0  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMultiByteStr] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_1007282  +
push [ebp+lpMultiByteStr]  +
call sub_1007011  +
pop ecx  +
mov esi eax +
jmp loc_1007284  +
xor esi esi +
mov ecx edi +
test esi esi +
jle loc_10072A9  +
push esi  +
call sub_1007233  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push esi  +
push eax  +
call sub_1007030  +
add esp 10h +
push esi  +
mov ecx edi +
call loc_100709D  +
jmp loc_10072AE  +
call sub_10070F7  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_70] +
call sub_100CA2D  +
lea ecx [ebp+var_70] +
call sub_100C971  +
push offset dword_101032C  +
lea ecx [ebp+var_4] +
mov edi eax +
call sub_1007052  +
mov eax [ebp+arg_0] +
dec eax  +
jz loc_1007334  +
dec eax  +
jz loc_100732D  +
dec eax  +
jz loc_1007326  +
dec eax  +
jz loc_100731F  +
dec eax  +
jz loc_1007318  +
mov esi 80070057h +
mov ecx [ebp+var_4] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
lea ecx [ebp+var_70] +
call sub_100CA53  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
push offset aHighcontrast  +
jmp loc_1007339  +
push offset aMousekeys  +
jmp loc_1007339  +
push offset aTogglekeys  +
jmp loc_1007339  +
push offset aFilterkeys  +
jmp loc_1007339  +
push offset MultiByteStr  +
lea ecx [ebp+var_4] +
call sub_1007266  +
push [ebp+var_4]  +
call sub_100A8EC  +
mov esi eax +
mov [ebp+arg_0] esi +
test esi esi +
jnz loc_1007361  +
lea ecx [ebp+arg_0] +
call sub_1007081  +
mov esi 80004005h +
jmp loc_10072FD  +
mov ecx esi +
call sub_100A50A  +
push esi  +
mov ecx edi +
test eax eax +
jz loc_1007376  +
call sub_100C8AE  +
jmp loc_100737B  +
call sub_100C959  +
push 0  +
push 1  +
push 1  +
mov esi eax +
call sub_1006D71  +
lea ecx [ebp+arg_0] +
call sub_1007081  +
jmp loc_10072FD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
push esi  +
push esi  +
push 1  +
push esi  +
call ds:HeapSetInformation  +
mov eax [ebp+Y] +
mov [ebp+var_C] esi +
mov ecx offset aAccessibilit_0 +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10073E1  +
cmp dx si +
jz loc_10073DD  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10073E1  +
add eax 4 +
add ecx 4 +
cmp dx si +
jnz loc_10073BB  +
xor eax eax +
jmp loc_10073E6  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax esi +
jnz loc_10073FC  +
push esi  +
push esi  +
push 1  +
call sub_1006D71  +
test eax eax +
jz loc_1007441  +
call StartMessagePump  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+Y] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+Y]  +
call sub_1006DD2  +
test eax eax +
jz loc_1007441  +
cmp [ebp+var_8] 2 +
jnz loc_1007448  +
push 1  +
push 106Bh  +
push esi  +
call WinSqmIncrementDWORD  +
cmp [ebp+var_10] esi +
jnz loc_1007448  +
push [ebp+Y]  +
call sub_10072BB  +
cmp hObject esi +
jz loc_1007441  +
call StartMessagePump  +
xor eax eax +
jmp loc_10075B8  +
push esi  +
call ds:CoInitialize  +
test eax eax +
jl loc_1007441  +
push ebx  +
push edi  +
mov ebx offset dword_10102C0 +
push ebx  +
push offset unk_10102C8  +
push offset loc_1006F5D  +
push offset dword_10014A4  +
call sub_1006FB4  +
mov edi offset unk_10102F8 +
push edi  +
call sub_1006A34  +
push offset aMicrosoftEoa  +
mov dword_1010318 offset dword_10014D8 +
mov off_1010000 edi +
call sub_1006B25  +
xor edi edi +
inc edi  +
push edi  +
push 8  +
mov [ebp+var_4] esi +
call sub_1006B05  +
test eax eax +
jl loc_100756D  +
push 2  +
call InitThread  +
cmp eax esi +
jl loc_100756D  +
cmp [ebp+var_8] 2 +
jz loc_10074D2  +
xor eax eax +
cmp [ebp+Y] esi +
setz al  +
push eax  +
call sub_1009076  +
jmp loc_100756D  +
lea eax [ebp+var_4] +
push eax  +
push 4  +
push 0CA0000h  +
push esi  +
mov eax 80000000h +
push eax  +
push eax  +
push eax  +
push eax  +
push 20h  +
push [ebp+hInstance]  +
call ds:LoadIconW  +
push eax  +
push esi  +
push offset dword_10015B8  +
call ds:?Create@NativeHWNDHost@DirectUI@@SGJPBGPAUHWND__@@PAUHICON__@@HHHHHHIPAPAV12@@Z  +
cmp [ebp+var_4] esi +
jz loc_100757A  +
lea eax [ebp+Y] +
push eax  +
push esi  +
push [ebp+Y]  +
lea eax [ebp+hInstance] +
push [ebp+hInstance]  +
push eax  +
push [ebp+var_4]  +
call sub_1007832  +
test eax eax +
jl loc_100756D  +
push [ebp+Y]  +
mov ecx [ebp+hInstance] +
call ds:?EndDefer@Element@DirectUI@@QAEXK@Z  +
mov ecx [ebp+var_4] +
push edi  +
push esi  +
push esi  +
push 64h  +
push 64h  +
push 0FFFFFFFFh  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:SetWindowPos  +
mov ecx [ebp+var_4] +
push edi  +
call ds:?ShowWindow@NativeHWNDHost@DirectUI@@QAEXH@Z  +
mov ecx [ebp+var_4] +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call sub_1006E8D  +
push esi  +
push edi  +
push edi  +
mov [ebp+var_C] edi +
call sub_1006D71  +
call StartMessagePump  +
mov ecx [ebp+var_4] +
cmp ecx esi +
jz loc_100757A  +
call ds:?Destroy@NativeHWNDHost@DirectUI@@QAEXXZ  +
call UnInitThread  +
push 1000000h  +
call UnInitProcessPriv  +
call ds:CoUninitialize  +
call sub_1006B73  +
push ebx  +
call sub_1006FE0  +
pop edi  +
pop ebx  +
cmp hObject esi +
jz loc_10075B5  +
call StartMessagePump  +
push hObject  +
call ds:CloseHandle  +
mov eax [ebp+var_C] +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:??0HWNDElement@DirectUI@@QAE@XZ  +
mov dword ptr [esi] offset off_1001610 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1DUIFactory@DirectUI@@QAE@XZ  +
test [ebp+arg_0] 1 +
jz loc_1007617  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi+94h] eax +
mov eax [ebp+arg_4] +
push edi  +
mov [esi+98h] eax +
call ds:?Register@HWNDElement@DirectUI@@SGJXZ  +
push [ebp+arg_10]  +
mov ecx [esi+94h] +
push [ebp+arg_C]  +
push 0  +
push 0  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
mov ecx esi +
call ds:?Initialize@HWNDElement@DirectUI@@QAEJPAUHWND__@@_NIPAVElement@2@PAK@Z  +
mov edi eax +
test edi edi +
jl loc_1007746  +
push 1  +
mov ecx esi +
call ds:?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
mov edi eax +
test edi edi +
jl loc_1007746  +
push 1  +
mov ecx esi +
call ds:?SetAccessible@Element@DirectUI@@QAEJ_N@Z  +
mov edi eax +
test edi edi +
jl loc_1007746  +
mov ecx [esi+94h] +
push esi  +
call ds:?Host@NativeHWNDHost@DirectUI@@QAEXPAVElement@2@@Z  +
push 1  +
mov ecx esi +
call ds:?DoubleBuffered@Element@DirectUI@@QAEX_N@Z  +
lea eax [ebp+arg_0] +
push eax  +
call ds:?Create@FillLayout@DirectUI@@SGJPAPAVLayout@2@@Z  +
mov edi eax +
test edi edi +
jl loc_1007746  +
push [ebp+arg_0]  +
mov ecx esi +
call ds:?SetLayout@Element@DirectUI@@QAEJPAVLayout@2@@Z  +
mov edi eax +
test edi edi +
jge loc_10076DC  +
mov ecx [ebp+arg_0] +
call ds:?Destroy@Layout@DirectUI@@QAEXXZ  +
jmp loc_1007746  +
push 10h  +
mov edi 80004005h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_1007708  +
mov ecx [esi+94h] +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
mov ecx [ebp+arg_0] +
push eax  +
call ds:??0DUIFactory@DirectUI@@QAE@PAUHWND__@@@Z  +
jmp loc_100770A  +
xor eax eax +
mov [esi+9Ch] eax +
test eax eax +
jz loc_1007746  +
push 0  +
lea ecx [ebp+arg_0] +
push ecx  +
movzx ecx [ebp+arg_8] +
push 0  +
push esi  +
push offset aMain  +
push ecx  +
push dword ptr [esi+98h]  +
mov ecx eax +
call ds:?LoadFromResource@DUIFactory@DirectUI@@QAEJPAUHINSTANCE__@@PBG1PAVElement@2@PAKPAPAV42@1@Z  +
mov edi eax +
test edi edi +
jl loc_1007746  +
push [ebp+arg_0]  +
mov ecx esi +
call ds:?Add@Element@DirectUI@@QAEJPAV12@@Z  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:?OnEvent@HWNDElement@DirectUI@@UAEXPAUEvent@2@@Z  +
***
mov ecx [ecx+94h] +
jmp ds:?DestroyWindow@NativeHWNDHost@DirectUI@@QAEXXZ  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+9Ch] +
mov dword ptr [esi] offset off_1001610 +
test ecx ecx +
jz loc_1007791  +
push 1  +
call sub_10075FC  +
mov ecx esi +
pop esi  +
jmp ds:??1HWNDElement@DirectUI@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1007775  +
test byte ptr [ebp+8] 1 +
jz loc_10077B9  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10075C2  +
lea ecx [esi+0A4h] +
mov dword ptr [esi] offset off_10016E8 +
call sub_10070DF  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1007C65  +
test byte ptr [ebp+8] 1 +
jz loc_1007803  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 0ACh  +
call sub_10075DC  +
mov esi eax +
test esi esi +
jz loc_1007829  +
mov ecx esi +
call sub_10077C5  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
and dword ptr [ebx] 0 +
push esi  +
call sub_100780F  +
mov esi eax +
mov eax [ebp+arg_C] +
dec eax  +
jz loc_100787B  +
dec eax  +
jz loc_1007874  +
dec eax  +
jz loc_100786D  +
dec eax  +
jz loc_1007866  +
dec eax  +
jz loc_100785F  +
mov eax 80070057h +
jmp loc_10078C2  +
mov eax 0CEh +
jmp loc_1007880  +
mov eax 0CDh +
jmp loc_1007880  +
mov eax 0CFh +
jmp loc_1007880  +
mov eax 0CCh +
jmp loc_1007880  +
mov eax 0CBh +
test esi esi +
jnz loc_100788B  +
mov eax 8007000Eh +
jmp loc_10078C2  +
push edi  +
push [ebp+arg_14]  +
mov ecx esi +
push [ebp+arg_10]  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1007623  +
mov edi eax +
mov ecx esi +
test edi edi +
jge loc_10078B4  +
push 1  +
call ds:?Destroy@Element@DirectUI@@QAEJ_N@Z  +
mov eax edi +
jmp loc_10078C1  +
push [ebp+arg_C]  +
mov [ebx] esi +
mov eax [esi] +
call dword ptr [eax+0C4h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_4] +
call dword ptr [eax]  +
mov ecx eax +
mov eax [ebp+arg_0] +
mov eax [eax] +
sub eax [ecx] +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1007900  +
pop ebp  +
retn   +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1007903  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1007976  +
cmp eax 0Ch +
jz loc_100796F  +
cmp eax 16h +
jz loc_1007968  +
cmp eax 22h +
jz loc_1007968  +
cmp eax 50h +
jz loc_1007976  +
push 80004005h  +
call loc_1006F35  +
push 80070057h  +
jmp loc_1007963  +
push 8007000Eh  +
jmp loc_1007963  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1007918  +
add esp 10h +
push eax  +
call sub_100793E  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:LoadResource  +
test eax eax +
jz loc_10079FE  +
push esi  +
push eax  +
call ds:LockResource  +
mov esi eax +
test esi esi +
jz loc_10079F0  +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:SizeofResource  +
mov ecx [ebp+arg_8] +
add eax esi +
and ecx 0Fh +
jbe loc_10079EC  +
cmp esi eax +
jnb loc_10079F0  +
dec ecx  +
movzx edx word ptr [esi] +
lea esi [esi+edx*2+2] +
jnz loc_10079DE  +
cmp esi eax +
jb loc_10079F4  +
xor eax eax +
jmp loc_10079FD  +
movzx eax word ptr [esi] +
neg eax  +
sbb eax eax +
and eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
shr eax 4 +
inc eax  +
movzx eax ax +
push 6  +
push eax  +
push [ebp+hModule]  +
call ds:FindResourceW  +
test eax eax +
jz loc_1007A32  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_10079A5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [ebp+wLanguage]  +
shr eax 4 +
inc eax  +
movzx eax ax +
push eax  +
push 6  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
test eax eax +
jz loc_1007A69  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_10079A5  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi offset unk_1010348 +
push 0  +
mov ecx esi +
call sub_100962F  +
xor ebx ebx +
inc ebx  +
jmp loc_1007AA6  +
push dword ptr [ebp+wLanguage]  +
push [ebp+arg_0]  +
push edi  +
call sub_1007A3B  +
test eax eax +
jnz loc_1007AB3  +
push ebx  +
mov ecx esi +
call sub_100962F  +
inc ebx  +
mov edi eax +
test edi edi +
jnz loc_1007A8D  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov eax edi +
jmp loc_1007AAC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax 0FFFFFFFFh +
jnz loc_1007ADE  +
mov eax [ebp+arg_8] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1007ACF  +
sub eax ecx +
sar eax 1 +
inc eax  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100797F  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+8] +
mov eax [esi+8] +
mov [ebp-4] ecx +
test eax eax +
jz loc_1007B10  +
cmp eax 2 +
jnz loc_1007B61  +
mov eax [esi+0Ch] +
dec eax  +
jnz loc_1007B61  +
cmp dword ptr [esi+10h] 1 +
jnz loc_1007B61  +
movzx eax word ptr [esi+18h] +
cmp eax 0Dh +
jz loc_1007B31  +
cmp eax 1Bh +
jnz loc_1007B61  +
call sub_1007764  +
jmp loc_1007B5D  +
push ebx  +
push edi  +
call ds:?GetKeyFocusedElement@HWNDElement@DirectUI@@SGPAVElement@2@XZ  +
mov edi eax +
call ds:?GetClassInfoPtr@CCPushButton@DirectUI@@SGPAUIClassInfo@2@XZ  +
mov ebx eax +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+80h]  +
cmp eax ebx +
jnz loc_1007B5B  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+88h]  +
pop edi  +
pop ebx  +
mov byte ptr [esi+4] 1 +
cmp byte ptr [esi+4] 0 +
jnz loc_1007B71  +
mov ecx [ebp-4] +
push esi  +
call ds:?OnInput@HWNDElement@DirectUI@@UAEXPAUInputEvent@2@@Z  +
pop esi  +
leave   +
retn 4  +
***
mov eax [ecx] +
mov ecx [eax-10h] +
test ecx ecx +
jz loc_1007B8B  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
jmp loc_1007B8D  +
xor eax eax +
test eax eax +
jnz locret_1007B9E  +
mov ecx offset dword_101032C +
mov eax dword_101032C +
jmp dword ptr [eax+10h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_1007A72  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+10h]  +
lea edx [esi+0Ch] +
cmp dword ptr [edx] 0 +
jl loc_1007BE4  +
cmp eax [esi] +
jnz loc_1007BE4  +
xor eax eax +
mov edi esi +
inc eax  +
xadd [edx] eax +
jmp loc_1007C16  +
mov edx [eax] +
push 2  +
push dword ptr [esi+4]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_1007BFA  +
call loc_10070CF  +
mov eax [esi+4] +
mov [edi+4] eax +
mov eax [esi+4] +
inc eax  +
push eax  +
add esi 10h +
push esi  +
push eax  +
lea eax [edi+10h] +
push eax  +
call sub_1007918  +
add esp 10h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1007052  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
sub eax 10h +
push eax  +
mov esi ecx +
call sub_1007BBC  +
add eax 10h +
mov [esi] eax +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+0A0h] +
push dword ptr [edi]  +
mov dword ptr [esi] offset off_10016E8 +
call ds:CloseHandle  +
mov ecx [esi+0A4h] +
and dword ptr [edi] 0 +
sub ecx 10h +
call sub_1006A15  +
pop edi  +
mov ecx esi +
pop esi  +
jmp sub_1007775  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp dword ptr [eax+0Ch] 1 +
jle loc_1007CB6  +
push dword ptr [eax+4]  +
call sub_1007133  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1007C3D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_10] +
lea ebx [esi+edi] +
push ebx  +
call sub_1007233  +
push esi  +
push [ebp+arg_4]  +
mov [ebp+arg_8] eax +
push esi  +
push eax  +
call sub_1007918  +
mov eax [ebp+arg_8] +
push edi  +
push [ebp+arg_C]  +
lea eax [eax+esi*2] +
push edi  +
push eax  +
call sub_1007918  +
mov ecx [ebp+arg_0] +
add esp 20h +
push ebx  +
call loc_100709D  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov ecx esi +
call sub_1007B7B  +
mov ecx [ebp+arg_0] +
push eax  +
call sub_1007C21  +
mov esi [esi] +
push [ebp+arg_8]  +
mov edi [esi-0Ch] +
call sub_10078F2  +
push eax  +
push [ebp+arg_8]  +
push edi  +
push esi  +
push [ebp+arg_0]  +
call sub_1007CDB  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_4]  +
mov ebx ecx +
push [ebp+hModule]  +
call sub_1007A07  +
mov esi eax +
test esi esi +
jz loc_1007DB4  +
push edi  +
movzx edi word ptr [esi] +
push edi  +
mov ecx ebx +
call sub_1007233  +
movzx ecx word ptr [esi] +
push ecx  +
add esi 2 +
push esi  +
push edi  +
push eax  +
call sub_1007ABC  +
add esp 10h +
push edi  +
mov ecx ebx +
call loc_100709D  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1007BA4  +
test eax eax +
jz loc_1007DDE  +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_1007D70  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 78h +
push esi  +
push edi  +
mov esi ecx +
push 0  +
lea ecx [ebp+var_78] +
call sub_100CA2D  +
lea ecx [ebp+var_78] +
call sub_100C971  +
mov ecx [esi+94h] +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push offset dword_101032C  +
lea ecx [ebp+lpString] +
mov [ebp+hWnd] eax +
call sub_1007052  +
mov edi [ebp+arg_0] +
lea eax [edi-1] +
cmp eax 4 +
ja loc_1007F9E  +
push ds:dword_10017BC[edi*4]  +
lea ecx [ebp+lpString] +
call sub_1007DBF  +
call sub_1006CD0  +
test eax eax +
jnz loc_1007E8A  +
push offset aDisableshortcu  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jnz loc_1007E80  +
mov ecx [ebp+lpString] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
lea ecx [ebp+var_78] +
call sub_100CA53  +
mov eax 80004005h +
jmp loc_1007FB6  +
push 0FFFFFFFDh  +
mov ecx eax +
call ds:?SetLayoutPos@Element@DirectUI@@QAEJH@Z  +
and [ebp+var_C] 0 +
mov [esi+0A8h] edi +
dec edi  +
push ebx  +
mov ebx [ebp+lpString] +
jz loc_1007ED8  +
dec edi  +
jz loc_1007ED1  +
dec edi  +
jz loc_1007EB5  +
dec edi  +
jz loc_1007EAE  +
dec edi  +
jnz loc_1007EF2  +
push offset aHighcontrast  +
jmp loc_1007EDD  +
push offset aMousekeys  +
jmp loc_1007EDD  +
push ebx  +
push [ebp+hWnd]  +
call ds:SetWindowTextW  +
push offset aTogglekeys  +
lea ecx [esi+0A4h] +
call sub_1007266  +
jmp loc_1007EF2  +
push offset aFilterkeys  +
jmp loc_1007EDD  +
push offset MultiByteStr  +
lea ecx [esi+0A4h] +
call sub_1007266  +
push ebx  +
push [ebp+hWnd]  +
call ds:SetWindowTextW  +
push offset aDialogrunningm  +
lea edi [esi+0A4h] +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1007D2A  +
lea ecx [ebp+arg_0] +
call sub_1007C9E  +
push eax  +
push 1  +
push 0  +
call ds:CreateMutexW  +
mov [esi+0A0h] eax +
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_1007F5C  +
mov eax off_1010000 +
cmp eax offset off_1010000 +
jz loc_1007F53  +
test byte ptr [eax+1Ch] 8 +
jz loc_1007F53  +
push dword ptr [edi]  +
push offset loc_10017B0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006BB8  +
mov [ebp+var_C] 80004005h +
jmp loc_1007F7D  +
push offset aOk  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jz loc_1007F7D  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+54h]  +
mov ecx [ebp+arg_0] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
lea ecx [ebx-10h] +
call sub_1006A15  +
lea ecx [ebp+var_78] +
call sub_100CA53  +
mov eax [ebp+var_C] +
pop ebx  +
jmp loc_1007FB6  +
mov ecx [ebp+lpString] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
lea ecx [ebp+var_78] +
call sub_100CA53  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push offset dword_101032C  +
lea ecx [ebp+var_210] +
xor bl bl +
call sub_1007052  +
mov eax [esi+0A8h] +
push ds:dword_10017C0[eax*4]  +
lea ecx [ebp+var_210] +
call sub_1007DBF  +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
push dword ptr [esi+98h]  +
call ds:LoadStringW  +
mov edi [ebp+var_210] +
test eax eax +
jz loc_1008051  +
push [ebp+arg_4]  +
mov ecx [esi+94h] +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:MessageBoxW  +
mov ebx eax +
dec ebx  +
neg ebx  +
sbb bl bl +
inc bl  +
lea ecx [edi-10h] +
call sub_1006A15  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov al bl +
xor ecx ebp +
pop ebx  +
call sub_1009AE9  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi ecx +
call sub_1006CD0  +
test eax eax +
jz loc_10080F1  +
mov eax [edi+0A8h] +
dec eax  +
push esi  +
push 0  +
pop esi  +
jz loc_10080D1  +
dec eax  +
jz loc_10080BA  +
dec eax  +
jz loc_10080B0  +
dec eax  +
jz loc_10080A6  +
dec eax  +
jnz loc_10080DB  +
push 5  +
push esi  +
push offset a21ec20203aea10  +
jmp loc_10080C2  +
push 5  +
push esi  +
push offset a21ec20203aea_0  +
jmp loc_10080C2  +
push 5  +
push esi  +
push offset a21ec20203aea_1  +
jmp loc_10080C2  +
push 5  +
push esi  +
push offset Parameters  +
push offset File  +
push esi  +
push esi  +
call ds:ShellExecuteW  +
jmp loc_10080DE  +
push 5  +
push esi  +
push offset a21ec20203aea_3  +
jmp loc_10080C2  +
mov eax [ebp+var_4] +
cmp eax 20h +
jg loc_10080F0  +
push esi  +
push 0C8h  +
mov ecx edi +
call sub_1007FC1  +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
push ebx  +
push esi  +
mov esi [ebp+8] +
cmp dword ptr [esi+0Ch] 2 +
push edi  +
mov ebx ecx +
jnz loc_10081B0  +
mov ecx [esi] +
call ds:?GetID@Element@DirectUI@@QAEGXZ  +
movzx edi ax +
mov eax ds:?Click@Button@DirectUI@@SG?AVUID@@XZ +
mov [ebp+8] eax +
lea eax [ebp+8] +
push eax  +
lea eax [esi+4] +
push eax  +
call sub_10078CD  +
test al al +
jz loc_10081B0  +
push 0  +
lea ecx [ebp-6Ch] +
call sub_100CA2D  +
lea ecx [ebp-6Ch] +
call sub_100C971  +
push offset aOk  +
mov [ebp+8] eax +
call StrToID  +
cmp di ax +
jnz loc_1008189  +
push dword ptr [ebx+0A4h]  +
call sub_100A8EC  +
mov esi eax +
test esi esi +
jz loc_100819F  +
mov ecx esi +
call sub_100A50A  +
mov ecx [ebp+8] +
push esi  +
test eax eax +
jz loc_1008182  +
call sub_100C8AE  +
jmp loc_100819F  +
call sub_100C959  +
jmp loc_100819F  +
push offset aEoa  +
call StrToID  +
cmp di ax +
jnz loc_100819F  +
mov ecx ebx +
call sub_1008071  +
mov ecx ebx +
call sub_1007764  +
lea ecx [ebp-6Ch] +
call sub_100CA53  +
jmp loc_10081B8  +
push esi  +
mov ecx ebx +
call sub_1007753  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call ds:GetLastError  +
test eax eax +
jle loc_10081DA  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl locret_10081E1  +
mov eax 80004005h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
push offset SubKey  +
push 80000001h  +
mov bl 1 +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100821A  +
push [ebp+hKey]  +
xor bl bl +
call ds:RegCloseKey  +
mov al bl +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ds:SystemParametersInfoW +
push 0  +
lea eax [ebp+pvData] +
push eax  +
push 104h  +
push 73h  +
call esi  +
test eax eax +
jz loc_1008292  +
cmp word ptr [ebp+pvData] 0 +
jz loc_1008277  +
xor eax eax +
push eax  +
mov word ptr [ebp+pvData] ax +
lea eax [ebp+pvData] +
push eax  +
push 0  +
push 14h  +
call esi  +
lea eax [ebp+pvData] +
push eax  +
push offset pszValue  +
push offset pszSubKey  +
push 80000001h  +
call sub_100D081  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1009AE9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push 104h  +
lea eax [ebp+pvParam] +
push eax  +
push offset pszValue  +
push offset pszSubKey  +
push 80000001h  +
call sub_100D05D  +
test eax eax +
jl loc_10082F9  +
xor eax eax +
cmp word ptr [ebp+pvParam] ax +
jz loc_10082F9  +
push eax  +
lea ecx [ebp+pvParam] +
push ecx  +
push eax  +
push 14h  +
call ds:SystemParametersInfoW  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1009AE9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push 15h  +
push [ebp+hWnd]  +
call ds:SendNotifyMessageW  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jz loc_1008378  +
push 1  +
push 0FFFFFFFFh  +
push [ebp+arg_4]  +
push 0FFFFFFFFh  +
push [ebp+lpszDesktop]  +
call ds:CompareStringOrdinal  +
cmp eax 2 +
jz loc_1008378  +
push esi  +
push 41h  +
push 0  +
push 0  +
push [ebp+lpszDesktop]  +
call ds:OpenDesktopW  +
mov esi eax +
test esi esi +
jz loc_1008377  +
push 0  +
push offset fn  +
push esi  +
call ds:EnumDesktopWindows  +
push esi  +
call ds:CloseDesktop  +
pop esi  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov esi 80004005h +
call ds:GetCurrentThreadId  +
push eax  +
call ds:GetThreadDesktop  +
mov edi eax +
test edi edi +
jz loc_1008402  +
lea eax [ebp+nLengthNeeded] +
push eax  +
push 208h  +
lea eax [ebp+lParam] +
push eax  +
push 2  +
push edi  +
call ds:GetUserObjectInformationW  +
test eax eax +
jz loc_10083FB  +
lea eax [ebp+lParam] +
push eax  +
push offset EnumFunc  +
call ds:GetProcessWindowStation  +
push eax  +
call ds:EnumDesktopsW  +
test eax eax +
jz loc_10083F4  +
xor esi esi +
jmp loc_10083FB  +
call sub_10081C4  +
mov esi eax +
push edi  +
call ds:CloseDesktop  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1009AE9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
push 2D4h  +
push 0  +
push ebx  +
call memset  +
mov eax [ebp+arg_0] +
mov cx [eax] +
mov [ebx] cx +
mov dword ptr [ebx+4] 1F8h +
mov ecx [eax+8] +
mov [ebx+8] ecx +
mov ecx [eax+0Ch] +
mov [ebx+0Ch] ecx +
mov ecx [eax+10h] +
mov [ebx+10h] ecx +
mov ecx [eax+14h] +
mov [ebx+14h] ecx +
mov ecx [eax+18h] +
mov [ebx+18h] ecx +
add esp 0Ch +
push 17h  +
pop edx  +
lea esi [eax+1Ch] +
mov ecx edx +
lea edi [ebx+1Ch] +
movs   +
mov ecx [eax+78h] +
mov [ebx+78h] ecx +
mov ecx [eax+7Ch] +
mov [ebx+7Ch] ecx +
lea esi [eax+80h] +
mov ecx edx +
lea edi [ebx+80h] +
movs   +
mov ecx [eax+0DCh] +
mov [ebx+0DCh] ecx +
mov ecx [eax+0E0h] +
mov [ebx+0E0h] ecx +
lea esi [eax+0E4h] +
mov ecx edx +
lea edi [ebx+0E4h] +
movs   +
lea esi [eax+140h] +
mov ecx edx +
lea edi [ebx+140h] +
movs   +
lea esi [eax+19Ch] +
mov ecx edx +
lea edi [ebx+19Ch] +
movs   +
lea esi [eax+1F8h] +
mov ecx edx +
lea edi [ebx+1FCh] +
push 1Fh  +
movs   +
lea ecx [ebx+258h] +
add eax 254h +
pop edx  +
mov esi [eax] +
mov [ecx] esi +
add eax 4 +
add ecx 4 +
dec edx  +
jnz loc_10084EF  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+nDenominator] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ds:MulDiv +
push ebx  +
push [ebp+nNumerator]  +
push dword ptr [esi+1Ch]  +
call edi  +
push ebx  +
push [ebp+nNumerator]  +
mov [esi+1Ch] eax +
push dword ptr [esi+80h]  +
call edi  +
push ebx  +
push [ebp+nNumerator]  +
mov [esi+80h] eax +
push dword ptr [esi+0E4h]  +
call edi  +
push ebx  +
push [ebp+nNumerator]  +
mov [esi+0E4h] eax +
push dword ptr [esi+140h]  +
call edi  +
push ebx  +
push [ebp+nNumerator]  +
mov [esi+140h] eax +
push dword ptr [esi+19Ch]  +
call edi  +
push ebx  +
push [ebp+nNumerator]  +
mov [esi+19Ch] eax +
push dword ptr [esi+1FCh]  +
call edi  +
push ebx  +
push [ebp+nNumerator]  +
mov [esi+1FCh] eax +
push dword ptr [esi+8]  +
call edi  +
push ebx  +
push [ebp+nNumerator]  +
mov [esi+8] eax +
push dword ptr [esi+0Ch]  +
call edi  +
push ebx  +
push [ebp+nNumerator]  +
mov [esi+0Ch] eax +
push dword ptr [esi+10h]  +
call edi  +
push ebx  +
push [ebp+nNumerator]  +
mov [esi+10h] eax +
push dword ptr [esi+14h]  +
call edi  +
push ebx  +
push [ebp+nNumerator]  +
mov [esi+14h] eax +
push dword ptr [esi+18h]  +
call edi  +
push ebx  +
push [ebp+nNumerator]  +
mov [esi+18h] eax +
push dword ptr [esi+78h]  +
call edi  +
push ebx  +
push [ebp+nNumerator]  +
mov [esi+78h] eax +
push dword ptr [esi+7Ch]  +
call edi  +
push ebx  +
push [ebp+nNumerator]  +
mov [esi+7Ch] eax +
push dword ptr [esi+0DCh]  +
call edi  +
push ebx  +
push [ebp+nNumerator]  +
mov [esi+0DCh] eax +
push dword ptr [esi+0E0h]  +
call edi  +
mov [esi+0E0h] eax +
push ebx  +
push [ebp+nNumerator]  +
add esi 1F8h +
push dword ptr [esi]  +
call edi  +
pop edi  +
mov [esi] eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_100D1AF  +
cmp eax 60h +
jz loc_1008630  +
push eax  +
push 60h  +
push [ebp+arg_0]  +
call sub_1008508  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0F8h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+268h] +
push edi  +
mov [esi+2D0h] eax +
mov eax [esi+28Ch] +
xor ebx ebx +
push ebx  +
mov [esi+2CCh] eax +
call ds:GetDC  +
push 8  +
mov edi eax +
push 0C0DCC0h  +
push edi  +
call SetMagicColors  +
push 9  +
push 0F0CAA6h  +
push edi  +
call SetMagicColors  +
push 0F6h  +
push 0F0FBFFh  +
push edi  +
call SetMagicColors  +
push edi  +
push ebx  +
call ds:ReleaseDC  +
xor eax eax +
lea ecx [esi+258h] +
mov edx [ecx] +
and edx 0FFFFFFh +
mov [ebp+eax*4+aElements] eax +
mov [ebp+eax*4+aRgbValues] edx +
inc eax  +
add ecx 4 +
cmp eax 1Fh +
jl loc_10086A7  +
lea eax [ebp+aRgbValues] +
push eax  +
lea eax [ebp+aElements] +
push eax  +
push 1Fh  +
call ds:SetSysColors  +
test eax eax +
jnz loc_10086E6  +
call sub_10081C4  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jl loc_1008760  +
mov edi ds:SystemParametersInfoW +
push ebx  +
lea eax [esi+4] +
mov ecx 1F8h +
push eax  +
push ecx  +
push 2Ah  +
mov [eax] ecx +
call edi  +
test eax eax +
jnz loc_100870D  +
call sub_10081C4  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jl loc_1008760  +
push ebx  +
add esi 1FCh +
push esi  +
push 5Ch  +
push 22h  +
call edi  +
test eax eax +
jnz loc_100872B  +
call sub_10081C4  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jl loc_1008760  +
push ebx  +
push ebx  +
push ebx  +
push 1023h  +
call edi  +
test eax eax +
jnz loc_1008745  +
call sub_10081C4  +
cmp eax ebx +
mov [ebp+arg_0] eax +
jl loc_1008760  +
push ebx  +
push ebx  +
push ebx  +
push 1025h  +
call edi  +
test eax eax +
jz loc_1008758  +
mov [ebp+arg_0] ebx +
jmp loc_1008760  +
call sub_10081C4  +
mov [ebp+arg_0] eax +
push ebx  +
push 1388h  +
push 2  +
push ebx  +
push 2Ah  +
push 1Ah  +
push 0FFFFh  +
call ds:SendMessageTimeoutW  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7C8h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+pszPath] +
push ebx  +
push esi  +
push edi  +
push 1  +
push 0FFFFFFFFh  +
push offset a_msstyles  +
push 0FFFFFFFFh  +
push eax  +
mov [ebp+var_7B4] eax +
call ds:PathFindExtensionW  +
push eax  +
call ds:CompareStringOrdinal  +
cmp eax 2 +
jnz loc_1008831  +
mov esi 104h +
push esi  +
lea eax [ebp+var_414] +
push eax  +
push offset aPreHighContr_0  +
mov ebx offset pszSubKey +
push ebx  +
mov edi 80000001h +
push edi  +
call sub_100D05D  +
push esi  +
lea eax [ebp+ValueName] +
push eax  +
push offset aPreHighContr_1  +
push ebx  +
push edi  +
call sub_100D05D  +
push 71h  +
lea eax [ebp+ValueName] +
push eax  +
lea eax [ebp+var_414] +
push eax  +
push [ebp+var_7B4]  +
call ds:UxTheme_65  +
push 0  +
push 2Ah  +
push 1Ah  +
push 0FFFFh  +
mov edi eax +
call ds:SendNotifyMessageW  +
jmp loc_1008991  +
call ds:IsThemeActive  +
xor esi esi +
test eax eax +
jz loc_1008846  +
push esi  +
push esi  +
push esi  +
call ds:UxTheme_4  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push esi  +
push offset aSoftwareMicr_2  +
push 80000002h  +
call ds:RegOpenKeyExW  +
cmp eax esi +
jle loc_1008871  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
cmp edi esi +
jl loc_1008991  +
push 3  +
mov [ebp+dwIndex] esi +
mov esi 104h +
pop ebx  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
lea eax [ebp+cbValueName] +
push eax  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+dwIndex]  +
mov [ebp+Type] ebx +
push [ebp+hKey]  +
mov [ebp+cbData] 2D0h +
mov [ebp+cbValueName] esi +
call ds:RegEnumValueW  +
test eax eax +
jle loc_10088E4  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jl loc_100893D  +
cmp [ebp+Type] ebx +
jnz loc_100893D  +
cmp word ptr [ebp+Data] 2 +
jnz loc_100893D  +
mov eax [ebp+var_7B4] +
cmp word ptr [eax] 40h +
jz loc_100891B  +
push 0  +
push esi  +
lea eax [ebp+ValueName] +
push eax  +
push eax  +
call ds:SHLoadIndirectString  +
mov edi eax +
test edi edi +
jl loc_100893D  +
push 1  +
push 0FFFFFFFFh  +
lea eax [ebp+ValueName] +
push eax  +
push 0FFFFFFFFh  +
push [ebp+var_7B4]  +
call ds:CompareStringOrdinal  +
cmp eax 2 +
jz loc_100894D  +
inc [ebp+dwIndex]  +
test edi edi +
jge loc_1008889  +
jmp loc_100897A  +
lea eax [ebp+var_7B0] +
push eax  +
lea eax [ebp+Data] +
push eax  +
call sub_1008417  +
lea eax [ebp+var_7B0] +
push eax  +
call sub_1008616  +
lea eax [ebp+var_7B0] +
push eax  +
call sub_1008639  +
mov edi eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
test edi edi +
jl loc_1008991  +
call sub_1008384  +
mov edi eax +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1009AE9  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
push 104h  +
lea eax [ebp+pszPath] +
push eax  +
mov ebx offset aPreHighContr_2 +
push ebx  +
mov edi offset pszSubKey +
push edi  +
mov esi 80000001h +
push esi  +
call sub_100D05D  +
mov [ebp+var_210] eax +
test eax eax +
jl loc_1008A25  +
lea eax [ebp+pszPath] +
push eax  +
call sub_1008787  +
call sub_10082A4  +
push ebx  +
mov ebx ds:RegDeleteKeyValueW +
push edi  +
push esi  +
call ebx  +
push offset aPreHighContr_0  +
push edi  +
push esi  +
call ebx  +
push offset aPreHighContr_1  +
push edi  +
push esi  +
call ebx  +
push offset pszValue  +
push edi  +
push esi  +
call ebx  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_210] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1009AE9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1008A76  +
cmp ecx 7FFFFFFFh +
jbe loc_1008A7B  +
mov eax 80070057h +
test eax eax +
jl loc_1008AC6  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1008AB6  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1008AB1  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1008AB1  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1008A99  +
pop edi  +
test esi esi +
jnz loc_1008ABD  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
push [ebp+arg_14]  +
mov edi [ebp+arg_8] +
push esi  +
push [ebp+arg_C]  +
push edi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:GetCurrentThemeName  +
test eax eax +
jge loc_1008B0C  +
push offset a@themeui_dll85  +
push [ebp+arg_4]  +
xor eax eax +
push [ebp+arg_0]  +
mov [edi] ax +
mov [esi] ax +
call sub_1008A60  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 628h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_10102EC 0 +
push ebx  +
push esi  +
push edi  +
mov edi 10000h +
mov esi 80000000h +
jz loc_1008B93  +
mov al byte_10102F0 +
cmp al 4 +
jnb loc_1008B4F  +
test al al +
jnz loc_1008B93  +
mov eax dword_10102D8 +
mov ecx dword_10102DC +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1008B93  +
mov eax dword_10102E0 +
mov ebx dword_10102E4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1008B93  +
cmp edx ebx +
jnz loc_1008B93  +
push offset dword_10014B8  +
push dword_10102C4  +
push dword_10102C0  +
call sub_1008A3F  +
mov ebx 104h +
push ebx  +
lea eax [ebp+var_61C] +
push eax  +
push ebx  +
lea eax [ebp+var_414] +
push eax  +
push ebx  +
lea eax [ebp+pszPath] +
push eax  +
call sub_1008ACF  +
test eax eax +
jl loc_1008C0A  +
lea eax [ebp+pszPath] +
push eax  +
push offset aPreHighContr_2  +
push offset pszSubKey  +
push 80000001h  +
call sub_100D081  +
lea eax [ebp+var_414] +
push eax  +
push offset aPreHighContr_0  +
push offset pszSubKey  +
push 80000001h  +
call sub_100D081  +
lea eax [ebp+var_61C] +
push eax  +
push offset aPreHighContr_1  +
push offset pszSubKey  +
push 80000001h  +
call sub_100D081  +
push 0Ch  +
pop eax  +
push 0  +
lea ecx [ebp+pvParam] +
push ecx  +
push eax  +
push 42h  +
mov [ebp+pvParam] eax +
call ds:SystemParametersInfoW  +
mov eax [ebp+var_620] +
test eax eax +
jz loc_1008C38  +
cmp word ptr [eax] 0 +
jz loc_1008C38  +
push eax  +
jmp loc_1008C3D  +
push offset a@themeui_dll_0  +
push ebx  +
lea eax [ebp+pszPath] +
push eax  +
call sub_1008A60  +
mov ebx eax +
test ebx ebx +
jl loc_1008C61  +
lea eax [ebp+pszPath] +
push eax  +
call sub_1008787  +
call sub_1008224  +
cmp dword_10102EC 0 +
jz loc_1008CBB  +
mov al byte_10102F0 +
cmp al 4 +
jnb loc_1008C77  +
test al al +
jnz loc_1008CBB  +
mov eax dword_10102D8 +
mov ecx dword_10102DC +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1008CBB  +
mov eax dword_10102E0 +
mov ecx eax +
and ecx edi +
mov edi dword_10102E4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1008CBB  +
cmp edx edi +
jnz loc_1008CBB  +
push offset dword_10014C8  +
push dword_10102C4  +
push dword_10102C0  +
call sub_1008A3F  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1009AE9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 424h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp dword_10102EC edi +
jz loc_1008D4E  +
mov al byte_10102F0 +
cmp al 4 +
jnb loc_1008D00  +
test al al +
jnz loc_1008D4E  +
mov eax dword_10102D8 +
mov ecx dword_10102DC +
mov edx 10000h +
mov ebx 80000000h +
and eax edx +
and ecx ebx +
or eax ecx +
jz loc_1008D4E  +
mov eax dword_10102E0 +
mov esi dword_10102E4 +
mov ecx eax +
and ecx edx +
mov edx esi +
and edx ebx +
cmp ecx eax +
jnz loc_1008D4E  +
cmp edx esi +
jnz loc_1008D4E  +
push offset dword_10014B8  +
push dword_10102C4  +
push dword_10102C0  +
call sub_1008A3F  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001E8C  +
push 17h  +
push edi  +
push offset rclsid  +
mov [ebp+ppv] edi +
call ds:CoCreateInstance  +
mov ebx eax +
cmp ebx edi +
jl loc_1008EDD  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
cmp ebx edi +
jl loc_1008EDD  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_424] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov ebx eax +
cmp ebx edi +
jl loc_1008EDD  +
mov eax [ebp+ppv] +
lea edx [ebp+var_41C] +
push edx  +
push [ebp+var_424]  +
mov [ebp+var_41C] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
mov ebx eax +
cmp ebx edi +
jl loc_1008ECB  +
mov eax [ebp+var_41C] +
cmp eax edi +
jz loc_1008EDD  +
lea edx [ebp+pvData] +
push edx  +
push 0FFFFFFFFh  +
mov [ebp+pvData] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+70h]  +
mov ebx eax +
cmp ebx edi +
jl loc_1008EBF  +
push [ebp+pvData]  +
mov esi 80000001h +
push offset aPreHighContr_2  +
push offset pszSubKey  +
push esi  +
call sub_100D081  +
mov ebx eax +
cmp ebx edi +
jl loc_1008EBF  +
mov edi 104h +
push edi  +
lea eax [ebp+Src] +
push eax  +
push offset aLasthighcontra  +
push offset aSoftwareMicr_3  +
push esi  +
call sub_100D05D  +
mov esi ds:ExpandEnvironmentStringsW +
test eax eax +
jl loc_1008E88  +
push edi  +
lea eax [ebp+Dst] +
push eax  +
lea eax [ebp+Src] +
push eax  +
call esi  +
test eax eax +
jnz loc_1008E6B  +
call sub_10081C4  +
test eax eax +
jl loc_1008E88  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 40h  +
lea edx [ebp+Dst] +
push edx  +
push 0  +
push eax  +
call dword ptr [ecx+50h]  +
mov ebx eax +
test ebx ebx +
jge loc_1008EBF  +
push edi  +
lea eax [ebp+Dst] +
push eax  +
push offset Src  +
call esi  +
test eax eax +
jnz loc_1008EA6  +
call sub_10081C4  +
mov ebx eax +
test ebx ebx +
jl loc_1008EBF  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 40h  +
lea edx [ebp+Dst] +
push edx  +
push 0  +
push eax  +
call dword ptr [ecx+50h]  +
mov ebx eax +
push [ebp+pvData]  +
call ds:SysFreeString  +
mov eax [ebp+var_41C] +
xor edi edi +
cmp eax edi +
jz loc_1008EDD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp dword_10102EC edi +
jz loc_1008F40  +
mov al byte_10102F0 +
cmp al 4 +
jnb loc_1008EF2  +
test al al +
jnz loc_1008F40  +
mov eax dword_10102D8 +
mov ecx dword_10102DC +
mov edx 10000h +
mov edi 80000000h +
and eax edx +
and ecx edi +
or eax ecx +
jz loc_1008F40  +
mov eax dword_10102E0 +
mov esi dword_10102E4 +
mov ecx eax +
and ecx edx +
mov edx esi +
and edx edi +
cmp ecx eax +
jnz loc_1008F40  +
cmp edx esi +
jnz loc_1008F40  +
push offset dword_10014C8  +
push dword_10102C4  +
push dword_10102C0  +
call sub_1008A3F  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_1008F50  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1009AE9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001E8C  +
push 17h  +
xor edi edi +
push edi  +
push offset rclsid  +
mov [ebp+ppv] edi +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi edi +
jl loc_1009051  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1009051  +
xor eax eax +
push 206h  +
mov word ptr [ebp+var_20C] ax +
lea eax [ebp+var_20C+2] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
push offset aPreHighContr_2  +
push offset pszSubKey  +
push 80000001h  +
call sub_100D05D  +
mov esi eax +
cmp esi edi +
jl loc_1009051  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 40h  +
lea edx [ebp+var_20C] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx+50h]  +
mov esi eax +
cmp esi edi +
jge loc_1009051  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_214] +
push edx  +
push eax  +
call dword ptr [ecx+38h]  +
mov esi eax +
cmp esi edi +
jl loc_1009051  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 40h  +
push 1  +
push [ebp+var_214]  +
push edi  +
push eax  +
call dword ptr [ecx+30h]  +
mov esi eax +
mov eax [ebp+ppv] +
cmp eax edi +
jz loc_1009061  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1009AE9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10102EC 0 +
push ebx  +
push esi  +
push edi  +
mov edi 10000h +
mov esi 80000000h +
jz loc_10090E2  +
mov al byte_10102F0 +
cmp al 4 +
jnb loc_100909E  +
test al al +
jnz loc_10090E2  +
mov eax dword_10102D8 +
mov ecx dword_10102DC +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_10090E2  +
mov eax dword_10102E0 +
mov ebx dword_10102E4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_10090E2  +
cmp edx ebx +
jnz loc_10090E2  +
push offset dword_10014B8  +
push dword_10102C4  +
push dword_10102C0  +
call sub_1008A3F  +
call sub_10081E7  +
test al al +
jnz loc_10090FF  +
cmp [ebp+arg_0] 0 +
jz loc_10090F8  +
call sub_1008CD1  +
jmp loc_1009111  +
call sub_1008F66  +
jmp loc_1009111  +
cmp [ebp+arg_0] 0 +
jz loc_100910C  +
call sub_1008B17  +
jmp loc_1009111  +
call sub_10089A9  +
cmp dword_10102EC 0 +
mov ebx eax +
jz loc_100916D  +
mov al byte_10102F0 +
cmp al 4 +
jnb loc_1009129  +
test al al +
jnz loc_100916D  +
mov eax dword_10102D8 +
mov ecx dword_10102DC +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_100916D  +
mov eax dword_10102E0 +
mov ecx eax +
and ecx edi +
mov edi dword_10102E4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_100916D  +
cmp edx edi +
jnz loc_100916D  +
push offset dword_10014C8  +
push dword_10102C4  +
push dword_10102C0  +
call sub_1008A3F  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp byte ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_1001FF0 +
jz locret_10091AD  +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_10091AD  +
push ecx  +
call ds:HeapDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_10091E8  +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jnz loc_1009206  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_1009227  +
cmp [ebp+0Ch] eax +
jnz loc_1009217  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_1009227  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1009193  +
test byte ptr [ebp+8] 1 +
jz loc_1009266  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_1002004 +
xor ecx ecx +
mov dword ptr [eax+14h] 2 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] cx +
mov [eax+1Ah] cx +
mov [eax+8] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_10092BC  +
cmp eax 0FFFFFFFFh +
jbe loc_10092C3  +
mov eax 80070057h +
jmp loc_10092CA  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002004 +
jz loc_1009314  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ecx +
jnb loc_100933B  +
mov eax 80070057h +
jmp loc_1009344  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
lea ecx [edx+eax] +
lea esi [ecx-1] +
cmp esi edx +
pop esi  +
jge loc_1009369  +
mov eax [ebp+arg_8] +
jmp loc_100936F  +
dec eax  +
not eax  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_100934D  +
push dword ptr [ebp+0Ch]  +
mov edi eax +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_10092A8  +
test eax eax +
jl loc_10093D8  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push 10h  +
push eax  +
call sub_1009320  +
test eax eax +
jl loc_10093D8  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_10093D8  +
dec edi  +
and dword ptr [eax+4] 0 +
mov [eax] esi +
mov dword ptr [eax+0Ch] 1 +
mov [eax+8] edi +
jmp loc_10093DA  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_100934D  +
push dword ptr [ebp+10h]  +
mov edi eax +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_10092A8  +
test eax eax +
jl loc_100943C  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push 10h  +
push eax  +
call sub_1009320  +
test eax eax +
jl loc_100943C  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_100943C  +
dec edi  +
mov [eax+8] edi +
jmp loc_100943E  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100945E  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 18h  +
mov esi ecx +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_10094C3  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_10094EB  +
mov eax 80070057h +
jmp loc_10094FC  +
cmp dword ptr [eax] 2Ch +
jnz loc_10094E4  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_1009488  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_100951F  +
cmp eax [ecx+4] +
jge loc_100951F  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1009550  +
cmp eax [ecx+4] +
jge loc_1009550  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_100959F  +
mov eax 80070057h +
jmp loc_10095E6  +
mov eax [esi] +
cmp eax edi +
jz loc_10095E4  +
cmp eax 2Ch +
jnz loc_1009598  +
cmp [esi+24h] edi +
jle loc_10095CF  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_1009505  +
movzx eax word ptr [eax] +
push [ebp+hInstance]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_10095B3  +
pop ebx  +
lea ecx [esi+20h] +
call sub_1009449  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_100946D  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
adc eax offset DeleteCriticalSection +
lea ecx [esi+30h] +
pop esi  +
jmp sub_1009449  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+18h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [esi+34h] +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jg loc_100966F  +
test ecx ecx +
jl loc_100966F  +
cmp ecx eax +
jnz loc_1009662  +
mov esi [esi+8] +
push edi  +
call ds:LeaveCriticalSection  +
mov eax esi +
jmp loc_1009678  +
push ecx  +
lea ecx [esi+30h] +
call loc_1009536  +
mov esi [eax] +
jmp loc_1009657  +
push edi  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
or al dh +
add eax offset byte_10102BC +
add [ebx-3974FFDAh] eax +
pop esi  +
retn   +
***
push dword_101034C  +
mov esi ecx +
push esi  +
call sub_1009588  +
lea ecx [esi+20h] +
pop esi  +
jmp sub_1009449  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10097E2  +
test eax eax +
jnz loc_10097E7  +
mov ecx [esi] +
test ecx ecx +
jz loc_10097DF  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10097D3  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_101040C +
push offset dword_10103FC  +
push dword_1010408  +
mov dword_10103FC eax +
push offset unk_10103EC  +
push offset unk_10103F0  +
push offset unk_10103E8  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_10103F8 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_100988A  +
cmp eax esi +
jnz loc_100987D  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_100988D  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1009864  +
xor esi esi +
inc esi  +
mov eax dword_101074C +
cmp eax esi +
jnz loc_10098A0  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10098CF  +
mov eax dword_101074C +
test eax eax +
jnz loc_10098C9  +
mov dword_101074C esi +
push offset dword_10013F8  +
push offset dword_10013EC  +
call sub_10097C6  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10098CF  +
jmp loc_10099F3  +
mov dword_1010404 esi +
mov eax dword_101074C +
cmp eax esi +
jnz loc_10098F3  +
push offset dword_10013E8  +
push offset dword_10013D0  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_101074C 2 +
cmp [ebp+var_20] ebx +
jnz loc_1009900  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_101075C ebx +
jz loc_1009921  +
push offset dword_101075C  +
call sub_1009E19  +
pop ecx  +
test eax eax +
jz loc_1009921  +
push ebx  +
push 2  +
push ebx  +
call dword_101075C  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_10099F3  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_1009946  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_100995B  +
cmp cx 20h +
ja loc_100995B  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_1009946  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1009967  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_100996A  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_1010400 eax +
cmp dword_10103F4 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_100999C  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_1009930  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_1010400 eax +
xor ebx ebx +
cmp dword_10103F4 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_1010404 ebx +
jnz loc_10099DE  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1010400 +
jmp loc_10099FF  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1009A1C  +
xor eax eax +
jmp loc_1009A69  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1009A18  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1009A56  +
cmp ecx 20Bh +
jnz loc_1009A18  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1009A18  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1009A64  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1009A18  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_10103F4 eax +
call sub_1009F27  +
push eax  +
call ds:__set_app_type  +
or dword_1010754 0FFFFFFFFh +
or dword_1010758 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1010414 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1010410 +
mov [eax] ecx +
call sub_1009EB9  +
cmp dword_1010018 0 +
jnz loc_1009AC2  +
push offset sub_1009EB9  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1009EA1  +
xor eax eax +
retn   +
***
call sub_1009F66  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_1010004 +
jnz loc_1009AF4  +
retn 0  +
jmp loc_1009FFC  +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1009B2D  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1009AE9  +
push offset dword_1010004  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
push offset loc_1009C4A  +
push large dword ptr fs:0  +
mov eax [esp+10h] +
mov [esp+10h] ebp +
lea ebp [esp+10h] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1010004 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1009AE9  +
jmp __SEH_epilog4  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1009D5A  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1009D5A  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1009D54  +
cmp eax 19930521h +
jz loc_1009D54  +
cmp eax 19930522h +
jz loc_1009D54  +
cmp eax 1994000h +
jnz loc_1009D5A  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1009D1C+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1009DA6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1009DA2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1009E0D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1009E05  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1009E0F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1009DF5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1009D90  +
pop ecx  +
test eax eax +
jz loc_1009E76  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1009DD0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009E76  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1009E7F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1009F1A  +
cmp ecx 0FFFFFFFFh +
jz loc_1009F1A  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1009F13  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1009F13  +
cmp edx 10000000h +
jnb loc_1009F13  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1009F13  +
jmp loc_1009F0E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1009F5C  +
push eax  +
call sub_1009EC1  +
test eax eax +
jz loc_1009F5C  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1009F51  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1009F5C  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1010004 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1009F98  +
test eax ebx +
jz loc_1009F98  +
not eax  +
mov dword_1010008 eax +
jmp loc_1009FF3  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1009FDF  +
test dword_1010004 ebx +
jnz loc_1009FE4  +
mov esi 0BB40E64Fh +
mov dword_1010004 esi +
not esi  +
mov dword_1010008 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1010518 eax +
mov dword_1010514 ecx +
mov dword_1010510 edx +
mov dword_101050C ebx +
mov dword_1010508 esi +
mov dword_1010504 edi +
mov word_1010530 ss +
mov word_1010524 cs +
mov word_1010500 ds +
mov word_10104FC es +
mov word_10104F8 fs +
mov word_10104F4 gs +
pushf   +
pop dword_1010528  +
mov eax [ebp+0] +
mov dword_101051C eax +
mov eax [ebp+4] +
mov dword_1010520 eax +
lea eax [ebp+8] +
mov dword_101052C eax +
mov eax [ebp-320h] +
mov dword_1010468 10001h +
mov eax dword_1010520 +
mov dword_1010424 eax +
mov dword_1010418 0C0000409h +
mov dword_101041C 1 +
mov eax dword_1010004 +
mov [ebp-328h] eax +
mov eax dword_1010008 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_100A167  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100A1A0  +
mov ecx esi +
call sub_100A150  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+Type] +
mov eax [esi] +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+lpData] +
add eax eax +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100A215  +
cmp [ebp+Type] 1 +
jz loc_100A1ED  +
cmp [ebp+Type] 2 +
jz loc_100A1ED  +
push 0Dh  +
pop eax  +
jmp loc_100A215  +
mov eax [ebp+cbData] +
test edi edi +
jz loc_100A20F  +
test eax eax +
jz loc_100A20A  +
test al 1 +
jnz loc_100A1E8  +
mov ecx eax +
shr ecx 1 +
cmp word ptr [edi+ecx*2-2] 0 +
jz loc_100A20F  +
jmp loc_100A1E8  +
xor ecx ecx +
mov [edi] cx +
shr eax 1 +
mov [esi] eax +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100A251  +
test dx dx +
jz loc_100A24D  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100A251  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100A22B  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
sbb eax 0FFFFFFFFh +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call _wcslwr_s  +
neg eax  +
sbb eax eax +
pop ecx  +
not eax  +
and eax [ebp+arg_0] +
pop ecx  +
pop ebp  +
retn   +
***
retn   +
***
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2230h +
call __alloca_probe  +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
mov [ebp+var_22C] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_220] eax +
xor edi edi +
mov [eax] edi +
lea eax [ebp+var_210] +
push eax  +
push 2000h  +
lea eax [ebp+var_2230] +
push eax  +
call K32EnumProcesses  +
test eax eax +
jz loc_100A40A  +
shr [ebp+var_210] 2 +
mov eax 800h +
cmp [ebp+var_210] eax +
jbe loc_100A304  +
mov [ebp+var_210] eax +
push ebx  +
call ds:GetCurrentProcessId  +
mov ebx ds:ProcessIdToSessionId +
lea ecx [ebp+var_214] +
push ecx  +
push eax  +
mov [ebp+var_228] eax +
mov [ebp+var_214] edi +
call ebx  +
test eax eax +
jz loc_100A409  +
mov [ebp+var_218] edi +
cmp [ebp+var_210] edi +
jbe loc_100A403  +
push esi  +
lea eax [ebp+var_224] +
push eax  +
lea esi [ebp+edi*4+var_2230] +
push dword ptr [esi]  +
call ebx  +
test eax eax +
jz loc_100A3DE  +
mov eax [ebp+var_224] +
cmp eax [ebp+var_214] +
jnz loc_100A3DE  +
mov esi [esi] +
cmp [ebp+var_228] esi +
jz loc_100A3DE  +
push esi  +
push 0  +
push 410h  +
call ds:OpenProcess  +
mov esi eax +
test esi esi +
jz loc_100A3DE  +
lea eax [ebp+var_230] +
push eax  +
push 4  +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call K32EnumProcessModules  +
test eax eax +
jz loc_100A3D7  +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_21C]  +
push esi  +
call K32GetModuleBaseNameW  +
test eax eax +
jz loc_100A3D7  +
push [ebp+var_22C]  +
lea eax [ebp+var_20C] +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100A3ED  +
push esi  +
call ds:CloseHandle  +
inc edi  +
cmp edi [ebp+var_210] +
jb loc_100A342  +
jmp loc_100A402  +
mov eax [ebp+var_220] +
mov [eax] esi +
mov eax [ebp+edi*4+var_2230] +
mov [ebp+var_218] eax +
pop esi  +
mov eax [ebp+var_218] +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1009AE9  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_100A459  +
push 80004005h  +
call loc_1006F35  +
push [ebp+arg_0]  +
push dword ptr [ecx]  +
call sub_100A220  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_100A444  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_100A444  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
mov ecx [esi+1Ch] +
push 10h  +
pop edi  +
sub ecx edi +
call sub_1006A15  +
mov ecx [esi+18h] +
sub ecx edi +
call sub_1006A15  +
mov ecx [esi+14h] +
sub ecx edi +
call sub_1006A15  +
mov ecx [esi+10h] +
sub ecx edi +
call sub_1006A15  +
mov ecx [esi+0Ch] +
sub ecx edi +
call sub_1006A15  +
mov ecx [esi+8] +
sub ecx edi +
call sub_1006A15  +
mov ecx [esi+4] +
sub ecx edi +
call sub_1006A15  +
mov ecx [esi] +
sub ecx edi +
pop edi  +
pop esi  +
jmp sub_1006A15  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push offset aSystemsetting  +
lea eax [esi+14h] +
push eax  +
xor ebx ebx +
call sub_100A46E  +
test al al +
jz loc_100A549  +
push dword ptr [esi+0Ch]  +
call ds:_wtoi  +
pop ecx  +
mov edi eax +
call sub_100CC43  +
cmp edi eax +
jnb loc_100A571  +
push edi  +
push esi  +
call sub_100CD2B  +
mov ebx eax +
jmp loc_100A571  +
mov eax [esi+1Ch] +
cmp [eax-0Ch] ebx +
jnz loc_100A555  +
xor eax eax +
jmp loc_100A573  +
lea ecx [ebp+hObject] +
push ecx  +
push eax  +
mov ecx esi +
call sub_100A29A  +
test eax eax +
jz loc_100A571  +
push [ebp+hObject]  +
call ds:CloseHandle  +
xor ebx ebx +
inc ebx  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
mov eax [ebx] +
push edi  +
mov edi [eax-0Ch] +
sub esi eax +
mov eax [ebp+arg_4] +
add eax edi +
push eax  +
sar esi 1 +
mov [ebp+var_4] eax +
call sub_1007233  +
cmp esi edi +
lea esi [eax+esi*2] +
jbe loc_100A5AC  +
mov esi [ebp+arg_0] +
push [ebp+arg_4]  +
lea eax [eax+edi*2] +
push esi  +
push [ebp+arg_4]  +
push eax  +
call sub_1007918  +
add esp 10h +
push [ebp+var_4]  +
mov ecx ebx +
call loc_100709D  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
mov ebx ecx +
jnz loc_100A5EA  +
call sub_10070F7  +
jmp loc_100A63F  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100A5FC  +
push 80070057h  +
call loc_1006F35  +
mov eax [ebx] +
push edi  +
push [ebp+arg_4]  +
mov edi [eax-0Ch] +
sub esi eax +
sar esi 1 +
call sub_1007233  +
cmp esi edi +
pop edi  +
push [ebp+arg_4]  +
ja loc_100A625  +
lea ecx [eax+esi*2] +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call sub_100A41E  +
jmp loc_100A631  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push eax  +
call sub_1007918  +
add esp 10h +
push [ebp+arg_4]  +
mov ecx ebx +
call loc_100709D  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi] +
mov esi [eax-0Ch] +
push esi  +
call sub_1007233  +
lea ecx [esi+1] +
push ecx  +
push eax  +
call sub_100A25D  +
pop ecx  +
pop ecx  +
push esi  +
mov ecx edi +
call loc_100709D  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10078F2  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A57D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10078F2  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A5D5  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_100A6E5  +
test [ebp+arg_0] 0FFFF0000h +
jnz loc_100A6E5  +
movzx eax word ptr [ebp+arg_0] +
push eax  +
call sub_1007DBF  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100A69E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100A6EE  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10070DF  +
lea ecx [esi+4] +
call sub_10070DF  +
lea ecx [esi+8] +
call sub_10070DF  +
lea ecx [esi+0Ch] +
call sub_10070DF  +
lea ecx [esi+10h] +
call sub_10070DF  +
lea ecx [esi+14h] +
call sub_10070DF  +
lea ecx [esi+18h] +
call sub_10070DF  +
lea ecx [esi+1Ch] +
call sub_10070DF  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A70A  +
mov ecx esi +
call sub_100A649  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 810h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push offset dword_10020D4  +
mov [ebp+var_810] edi +
mov [ebp+var_80C] ecx +
call sub_1007266  +
and [ebp+Type] 0 +
lea eax [ebp+Type] +
push eax  +
push 0  +
push edi  +
mov ecx esi +
call sub_100A1AA  +
test eax eax +
jnz loc_100A89D  +
mov eax [ebp+Type] +
test eax eax +
jz loc_100A89D  +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
mov ebx eax +
xor eax eax +
pop ecx  +
test ebx ebx +
jz loc_100A8A0  +
mov [ebx] ax +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push edi  +
mov ecx esi +
call sub_100A1AA  +
mov edi 400h +
test eax eax +
jnz loc_100A84D  +
cmp [ebp+Type] eax +
jbe loc_100A84D  +
cmp [ebp+Type] edi +
jbe loc_100A841  +
mov [ebx+7FEh] ax +
mov ecx [ebp+var_80C] +
push ebx  +
call sub_100A70A  +
cmp word ptr [ebx] 40h +
jnz loc_100A896  +
mov esi [esi] +
push 0  +
push 1  +
push 0  +
push edi  +
lea eax [ebp+var_804] +
push eax  +
push [ebp+var_810]  +
push esi  +
call ds:RegLoadMUIStringW  +
mov ecx [ebp+var_80C] +
test eax eax +
jnz loc_100A88C  +
mov [ebp+var_6] ax +
lea eax [ebp+var_804] +
push eax  +
call sub_100A69E  +
jmp loc_100A896  +
push offset dword_10020D4  +
call sub_1007266  +
push ebx  +
call ??_V@YAXPAX@Z  +
pop ecx  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1009AE9  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset dword_101032C  +
mov esi ecx +
call sub_1007052  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A6C4  +
test al al +
jnz loc_100A8E0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A70A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
push offset aSoftwareMicr_1  +
lea ecx [ebp+lpSubKey] +
call sub_100A8B6  +
push [ebp+arg_0]  +
lea ecx [ebp+lpSubKey] +
call sub_100A678  +
mov edi [ebp+lpSubKey] +
and [ebp+var_10] 0 +
and [ebp+var_C] 0 +
and [ebp+var_8] 0 +
push 20019h  +
push edi  +
push 80000002h  +
lea ecx [ebp+var_10] +
call sub_100A16E  +
test eax eax +
jz loc_100A94A  +
lea ecx [ebp+var_10] +
call sub_100A150  +
lea ecx [edi-10h] +
call sub_1006A15  +
xor eax eax +
pop edi  +
leave   +
retn 4  +
push esi  +
push 20h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100A965  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_100A726  +
mov esi eax +
jmp loc_100A967  +
xor esi esi +
mov [ebp+arg_0] esi +
test esi esi +
jnz loc_100A98B  +
lea ecx [ebp+arg_0] +
call sub_1007081  +
lea ecx [ebp+var_10] +
call sub_100A150  +
lea ecx [edi-10h] +
call sub_1006A15  +
mov eax esi +
pop esi  +
jmp loc_100A945  +
lea eax [esi+4] +
push eax  +
push offset aApplicationnam  +
lea eax [ebp+var_10] +
push eax  +
call sub_100A788  +
lea eax [esi+8] +
push eax  +
push offset aDescription  +
lea eax [ebp+var_10] +
push eax  +
call sub_100A788  +
lea eax [esi+0Ch] +
push eax  +
push offset aStartexe  +
lea eax [ebp+var_10] +
push eax  +
call sub_100A788  +
lea eax [esi+10h] +
push eax  +
push offset aStartparams  +
lea eax [ebp+var_10] +
push eax  +
call sub_100A788  +
lea edi [esi+14h] +
push edi  +
push offset aSimpleprofile  +
lea eax [ebp+var_10] +
push eax  +
call sub_100A788  +
lea eax [esi+18h] +
push eax  +
push offset aProfile  +
lea eax [ebp+var_10] +
push eax  +
call sub_100A788  +
lea eax [esi+1Ch] +
push eax  +
push offset aAtexe  +
lea eax [ebp+var_10] +
push eax  +
call sub_100A788  +
push offset aSystemsetting  +
push edi  +
call sub_100A48C  +
test al al +
jz loc_100AA1F  +
mov ecx edi +
call sub_100A649  +
and [ebp+arg_0] 0 +
mov edi [ebp+lpSubKey] +
jmp loc_100A96E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_100AA6B  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_100AA7B  +
mov ecx esi +
call sub_100A150  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+lpData] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz locret_100AABB  +
mov eax [ebp+lpData] +
sub eax 4 +
neg eax  +
sbb eax eax +
and eax 0Dh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jnz loc_100AAFF  +
push 80004005h  +
call loc_1006F35  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_100AB44  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100AB4F  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
test ecx ecx +
jz locret_100AB6E  +
push esi  +
mov esi [ecx] +
push ecx  +
call ds:__imp_free  +
pop ecx  +
mov ecx esi +
test esi esi +
jnz loc_100AB5D  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_100AB8F  +
cmp [esi] ax +
jz loc_100AB8B  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_100AB81  +
test edx edx +
jnz loc_100AB94  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_100ABA5  +
test eax eax +
jl loc_100ABA2  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi eax +
xor eax eax +
test edx edx +
jz loc_100ABBE  +
cmp edx [ebp+arg_4] +
jbe loc_100ABC3  +
mov eax 80070057h +
test eax eax +
jl loc_100ABD1  +
mov eax [ebp+arg_0] +
call sub_100AB74  +
jmp loc_100ABD4  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100AC13  +
cmp [ebp+arg_4] eax +
jz loc_100AC0F  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_100AC0F  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100ABF2  +
test esi esi +
jnz loc_100AC1B  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100AC29  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1C4h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi ds:GetKeyState +
push edi  +
push 0A2h  +
call esi  +
mov edi 8000h +
xor ebx ebx +
mov ecx edi +
inc ebx  +
test ax cx +
jz loc_100AC66  +
mov [ebp+var_4] ebx +
push 0A3h  +
call esi  +
push 2  +
test ax di +
pop edi  +
jz loc_100AC78  +
or [ebp+var_4] edi +
push 0A4h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_100AC8D  +
or [ebp+var_4] 4 +
push 0A5h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_100ACA2  +
or [ebp+var_4] 8 +
push 0A0h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_100ACB7  +
or [ebp+var_4] 10h +
push 0A1h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_100ACCC  +
or [ebp+var_4] 20h +
and [ebp+pInputs.type] 0 +
push 1BCh  +
lea eax [ebp+pInputs.anonymous_0] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
test byte ptr [ebp+var_4] bl +
jz loc_100AD0A  +
mov eax 0A2h +
mov word ptr [ebp+pInputs.anonymous_0] ax +
mov [ebp+pInputs.type] ebx +
mov dword ptr [ebp+pInputs.anonymous_0+4] edi +
mov eax ebx +
test byte ptr [ebp+var_4] 2 +
push 3  +
pop esi  +
jz loc_100AD2E  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A3h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] esi +
inc eax  +
test byte ptr [ebp+var_4] 4 +
jz loc_100AD4F  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A4h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
test byte ptr [ebp+var_4] 8 +
jz loc_100AD70  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A5h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] esi +
inc eax  +
test byte ptr [ebp+var_4] 10h +
jz loc_100AD91  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A0h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
test byte ptr [ebp+var_4] 20h +
jz loc_100ADB2  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A1h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
and dword ptr [ecx+8] 0 +
mov [ecx] ebx +
push 5Bh  +
pop edx  +
mov [ecx+4] dx +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
and dword ptr [ecx+8] 0 +
mov [ecx] ebx +
push 55h  +
pop edx  +
mov [ecx+4] dx +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov [ecx+4] dx +
mov [ecx] ebx +
mov [ecx+8] edi +
inc eax  +
mov ecx eax +
imul ecx ecx +
push 5Bh  +
lea ecx [ebp+ecx+pInputs] +
pop edx  +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
push 1Ch  +
lea ecx [ebp+pInputs] +
push ecx  +
inc eax  +
push eax  +
call ds:SendInput  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100AE43  +
cmp word ptr [eax] 0 +
mov ecx eax +
jnz loc_100AE48  +
mov ecx offset aNull_1 +
mov eax [ebp+arg_0] +
mov [eax+4] ecx +
mov dword ptr [eax] 2 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_100AEE0  +
cmp word ptr [edx] 0 +
jnz loc_100AEC5  +
push 0Eh  +
jmp loc_100AEE2  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100AECB  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_100AEE3  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_100AEF4  +
cmp word ptr [edx] 0 +
jnz loc_100AEF9  +
mov edx offset aNull +
jmp loc_100AEF9  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
xor esi esi +
mov [ebp+var_14] ebx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call ds:AllocateAndInitializeSid  +
test eax eax +
jnz loc_100AF70  +
mov [ebp+pSid] ebx +
cmp [ebp+pSid] ebx +
jz loc_100AF8E  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
push [ebp+pSid]  +
mov esi eax +
call ds:FreeSid  +
mov eax off_1010000 +
cmp eax offset off_1010000 +
jz loc_100AFC3  +
test byte ptr [eax+1Ch] 10h +
jz loc_100AFC3  +
cmp esi ebx +
jz loc_100AFAE  +
cmp [ebp+var_14] ebx +
jz loc_100AFAE  +
xor ecx ecx +
inc ecx  +
jmp loc_100AFB0  +
xor ecx ecx +
push ecx  +
push offset dword_100221C  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AE83  +
cmp esi ebx +
jz loc_100AFD1  +
cmp [ebp+var_14] ebx +
jz loc_100AFD1  +
xor eax eax +
inc eax  +
jmp loc_100AFD3  +
xor eax eax +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1009AE9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsProcessInJob  +
mov edi eax +
mov eax off_1010000 +
cmp eax offset off_1010000 +
jz loc_100B03C  +
test byte ptr [eax+1Ch] 10h +
jz loc_100B03C  +
cmp [ebp+var_4] 0 +
jz loc_100B027  +
test edi edi +
jz loc_100B027  +
xor ecx ecx +
inc ecx  +
jmp loc_100B029  +
xor ecx ecx +
push ecx  +
push offset dword_100221C  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AE83  +
cmp [ebp+var_4] 0 +
jz loc_100B04B  +
test edi edi +
jz loc_100B04B  +
xor eax eax +
inc eax  +
jmp loc_100B04D  +
xor eax eax +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+Type] +
push esi  +
push edi  +
test ebx ebx +
jbe loc_100B112  +
mov edi [ebp+arg_0] +
mov ecx [ebp+arg_8] +
push 20019h  +
push offset aSoftwareMicr_0  +
xor eax eax +
push 80000001h  +
mov [edi] ax +
call sub_100A16E  +
mov esi eax +
test esi esi +
jz loc_100B0CB  +
mov eax off_1010000 +
cmp eax offset off_1010000 +
jz loc_100B0B7  +
test byte ptr [eax+1Ch] 8 +
jz loc_100B0B7  +
push esi  +
push offset dword_100221C  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AE83  +
test esi esi +
jle loc_100B0C7  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
jmp loc_100B11C  +
mov ecx [ebp+arg_8] +
lea eax [ebp+Type] +
push eax  +
push edi  +
push offset ValueName  +
mov [ebp+Type] ebx +
call sub_100A1AA  +
test eax eax +
jz loc_100B119  +
mov ecx off_1010000 +
cmp ecx offset off_1010000 +
jz loc_100B10B  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100B10B  +
push eax  +
push offset dword_100221C  +
push 1Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AE83  +
xor eax eax +
mov [edi] ax +
jmp loc_100B119  +
mov [ebp+var_4] 80070057h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1009798  +
mov [esi] eax +
test eax eax +
setnz al  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov ecx [ebp+arg_0] +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
jmp loc_100B18B  +
mov eax [esi] +
cmp eax edi +
jz loc_100B1AA  +
mov ecx [eax] +
mov [esi] ecx +
push eax  +
mov ecx esi +
call sub_100B8CB  +
cmp [esi+8] edi +
ja loc_100B179  +
mov ecx [esi+0Ch] +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
cmp ecx edi +
jz loc_100B1A7  +
call sub_100AB58  +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
retn   +
***
push 80004005h  +
call loc_1006F35  +
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
test eax eax +
jnz loc_100B1D2  +
push 80004005h  +
call loc_1006F35  +
mov edx [eax] +
mov [ecx] edx +
add eax 8 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov edx 7FFFFFFFh +
sub edx eax +
cmp edx ecx +
jge loc_100B1FF  +
mov eax 80070057h +
jmp loc_100B208  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+var_4] 0 +
push [ebp+arg_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_10092A8  +
test eax eax +
jl loc_100B259  +
push 4  +
push [ebp+var_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_1009320  +
test eax eax +
jl loc_100B259  +
push [ebp+var_4]  +
call ds:__imp_malloc  +
pop ecx  +
test eax eax +
jz loc_100B259  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov [eax] edx +
mov [ecx] eax +
jmp locret_100B25B  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push 0  +
pop eax  +
jz loc_100B27B  +
cmp edx 7FFFFFFFh +
jbe loc_100B280  +
mov eax 80070057h +
test eax eax +
jl loc_100B296  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100ABDE  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi 7FFFFFFFh +
push edi  +
shr esi 1 +
push ebx  +
lea eax [ebp+arg_4] +
mov edx esi +
call sub_100ABAB  +
test eax eax +
jl loc_100B2D9  +
mov eax [ebp+arg_4] +
push edi  +
mov edx esi +
sub edx eax +
lea ecx [ebx+eax*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_100ABDE  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_100B307  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_100B307  +
call sub_100AB74  +
jmp loc_100B30C  +
mov eax 80070057h +
test eax eax +
jge loc_100B317  +
test edi edi +
jz loc_100B317  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0Ah  +
mov esi ecx +
call sub_100B149  +
push 0Ah  +
lea ecx [esi+18h] +
call sub_100B149  +
push 0Ah  +
lea ecx [esi+30h] +
call sub_100B149  +
mov eax [ebp+arg_0] +
and dword ptr [esi+48h] 0 +
and dword ptr [esi+50h] 0 +
mov [esi+4Ch] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+30h] +
call loc_100B16F  +
lea ecx [esi+18h] +
call loc_100B16F  +
mov ecx esi +
pop esi  +
jmp loc_100B16F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
call WinSqmIsOptedIn  +
test eax eax +
jz locret_100B3CE  +
mov ecx [ebp+arg_0] +
push esi  +
call sub_100A27F  +
mov esi [eax] +
test esi esi +
jz loc_100B3CD  +
push 5Ch  +
push esi  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100B3B1  +
lea esi [eax+2] +
push esi  +
lea eax [ebp+var_8] +
push eax  +
call sub_100AE2F  +
lea eax [ebp+var_8] +
push eax  +
push 1  +
push 107Dh  +
push 0  +
call WinSqmAddToStream  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push 2  +
push [ebp+arg_0]  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_10092A8  +
test eax eax +
jge loc_100B3FA  +
xor al al +
jmp loc_100B404  +
push [ebp+var_4]  +
mov ecx esi +
call sub_100B128  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
mov ecx [ebp+arg_0] +
call sub_100A444  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_8] +
push edi  +
test ecx ecx +
jnz loc_100B449  +
push 80004005h  +
call loc_1006F35  +
cmp [ebp+arg_0] 0 +
mov edi [ebp+arg_4] +
jnz loc_100B45D  +
test edi edi +
jz loc_100B45D  +
push 80070057h  +
jmp loc_100B444  +
mov eax [ecx] +
push 2  +
push edi  +
call dword ptr [eax]  +
test eax eax +
jnz loc_100B46D  +
call loc_10070CF  +
add eax 10h +
push edi  +
mov ecx esi +
mov [esi] eax +
call loc_100709D  +
push edi  +
push [ebp+arg_0]  +
push edi  +
push dword ptr [esi]  +
call sub_1007918  +
add esp 10h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
test eax eax +
jnz loc_100B4A7  +
mov esi [ecx] +
jmp loc_100B4BE  +
mov esi [eax] +
jmp loc_100B4BE  +
push [ebp+arg_0]  +
push dword ptr [esi+8]  +
call sub_100A220  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100B4C9  +
mov esi [esi] +
test esi esi +
jnz loc_100B4AB  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov eax esi +
jmp loc_100B4C4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_100B1E2  +
test eax eax +
jge loc_100B4F0  +
push eax  +
call loc_1006F35  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B42F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
xor ebx ebx +
push offset aStartlistCreat  +
lea ecx [ebp+var_10] +
mov [ebp+var_8] ebx +
call sub_1006C25  +
mov esi [ebp+lpDst] +
cmp esi ebx +
jz loc_100B681  +
cmp [esi] bx +
jz loc_100B681  +
lea eax [ebp+nSize] +
push eax  +
push 7FFFFFFFh  +
push esi  +
mov [ebp+nSize] ebx +
call sub_100B2E5  +
test eax eax +
jl loc_100B65C  +
lea eax [ebp+nSize] +
push eax  +
push 104h  +
push [ebp+nSize]  +
call sub_100AB2A  +
test eax eax +
jl loc_100B65C  +
push [ebp+nSize]  +
lea ecx [ebp+lpDst] +
mov [ebp+lpDst] ebx +
call sub_100B3D7  +
test al al +
jnz loc_100B5AA  +
push [ebp+lpDst]  +
call sub_10097AF  +
mov esi 8007000Eh +
jmp loc_100B661  +
push [ebp+nSize]  +
mov edi [ebp+lpDst] +
push edi  +
push esi  +
call ds:ExpandEnvironmentStringsW  +
mov esi eax +
cmp esi ebx +
jnz loc_100B5DF  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100B5D2  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push edi  +
call sub_10097AF  +
jmp loc_100B661  +
cmp esi [ebp+nSize] +
jbe loc_100B5F1  +
push edi  +
call sub_10097AF  +
mov esi 8007007Ah +
jmp loc_100B661  +
push [ebp+nShowCmd]  +
push ebx  +
push [ebp+lpParameters]  +
push edi  +
push ebx  +
push ebx  +
call ds:ShellExecuteW  +
mov edi eax +
cmp edi 20h +
jg loc_100B66D  +
mov eax off_1010000 +
cmp eax offset off_1010000 +
jz loc_100B630  +
test byte ptr [eax+1Ch] 8 +
jz loc_100B630  +
push edi  +
push [ebp+lpDst]  +
push offset dword_100221C  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AEAF  +
cmp edi 2 +
jl loc_100B654  +
cmp edi 3 +
jle loc_100B63F  +
cmp edi 0Bh +
jnz loc_100B654  +
cmp esi ebx +
jle loc_100B64F  +
and esi 0FFFFh +
or esi 80070000h +
push [ebp+lpDst]  +
jmp loc_100B5D5  +
push [ebp+lpDst]  +
call sub_10097AF  +
mov esi 80004005h +
lea ecx [ebp+var_10] +
call sub_1006C69  +
mov eax esi +
jmp loc_100B68E  +
push [ebp+lpDst]  +
call sub_10097AF  +
lea ecx [ebp+var_10] +
call sub_1006C69  +
xor eax eax +
jmp loc_100B68E  +
lea ecx [ebp+var_10] +
call sub_1006C69  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
push edi  +
mov edi ecx +
mov ecx [ebp+arg_0] +
push 2001Fh  +
xor eax eax +
push offset aSoftwareMicr_4  +
mov [ecx] ax +
mov ecx [ebp+arg_8] +
push 80000001h  +
call sub_100A16E  +
test eax eax +
jnz loc_100B7A3  +
lea ecx [ebp+var_7C] +
call sub_100CA0E  +
lea ecx [ebp+var_7C] +
call sub_100CB30  +
mov [ebp+var_C] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test eax eax +
jz loc_100B79B  +
push esi  +
mov ecx [ebp+var_C] +
lea eax [ebp+var_8] +
push eax  +
call sub_100B1BA  +
mov esi [eax] +
push offset aSystemsetting  +
mov ecx esi +
call sub_100A291  +
push eax  +
call sub_100A48C  +
test al al +
jz loc_100B790  +
mov ecx esi +
call sub_100C971  +
mov eax [eax] +
lea ecx [ebp+Data] +
push ecx  +
mov ecx [ebp+arg_8] +
push eax  +
call sub_100AA85  +
test eax eax +
jnz loc_100B790  +
test [ebp+Data] 2 +
jz loc_100B750  +
and dword ptr [ebp+Data] 0FFFFFFFDh +
mov ecx esi +
mov dword ptr [edi+50h] 1 +
call sub_100C971  +
push dword ptr [ebp+Data]  +
mov ecx [ebp+arg_8] +
push dword ptr [eax]  +
call sub_100AAC4  +
test [ebp+Data] 1 +
jz loc_100B790  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B75C  +
sub eax edx +
sar eax 1 +
jz loc_100B77C  +
push offset asc_1002280  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B29F  +
mov ecx esi +
call sub_100C971  +
push dword ptr [eax]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B29F  +
cmp [ebp+var_8] 0 +
jnz loc_100B6ED  +
pop esi  +
lea ecx [ebp+var_7C] +
call sub_100CA53  +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jge loc_100B7C1  +
and [ebp+arg_4] 0 +
mov esi [ebp+arg_8] +
test esi esi +
jge loc_100B7CA  +
xor esi esi +
mov eax [ebx] +
mov edi [eax-0Ch] +
push esi  +
push [ebp+arg_4]  +
call sub_100B4D2  +
cmp eax edi +
jle loc_100B7E4  +
mov eax [ebx] +
mov esi [eax-0Ch] +
sub esi [ebp+arg_4] +
mov edi [ebx] +
mov eax [edi-0Ch] +
cmp [ebp+arg_4] eax +
jle loc_100B7F0  +
xor esi esi +
cmp [ebp+arg_4] 0 +
jnz loc_100B805  +
cmp esi eax +
jnz loc_100B805  +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_1007CBF  +
jmp loc_100B81D  +
mov ecx ebx +
call sub_1007B7B  +
mov ecx [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_4] +
push esi  +
lea eax [edi+eax*2] +
push eax  +
call sub_100B4FC  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
sub ecx 10h +
call sub_1006A15  +
test [ebp+arg_0] 1 +
jz loc_100B84C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
lea ecx [eax-10h] +
sub esi 10h +
cmp ecx esi +
jz loc_100B8A2  +
cmp dword ptr [esi+0Ch] 0 +
jl loc_100B897  +
mov edx [ecx] +
cmp edx [esi] +
jnz loc_100B897  +
push ebx  +
push ecx  +
call sub_1007BBC  +
pop ecx  +
mov ecx esi +
mov ebx eax +
call sub_1006A15  +
add ebx 10h +
mov [edi] ebx +
pop ebx  +
jmp loc_100B8A2  +
push dword ptr [eax-0Ch]  +
mov ecx edi +
push eax  +
call sub_100A5D5  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push dword ptr [eax-0Ch]  +
push eax  +
call sub_100A57D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push 0  +
mov ecx edi +
call sub_100B82C  +
mov eax [esi+10h] +
mov [edi] eax +
dec dword ptr [esi+8]  +
mov [esi+10h] edi +
jnz loc_100B8F4  +
mov ecx esi +
call loc_100B16F  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100B8AF  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100B931  +
push 80004005h  +
call loc_1006F35  +
push esi  +
cmp eax [ecx] +
jnz loc_100B93C  +
mov edx [eax] +
mov [ecx] edx +
jmp loc_100B943  +
mov edx [eax+4] +
mov esi [eax] +
mov [edx] esi +
cmp eax [ecx+4] +
jnz loc_100B950  +
mov edx [eax+4] +
mov [ecx+4] edx +
jmp loc_100B958  +
mov edx [eax] +
mov esi [eax+4] +
mov [edx+4] esi +
push eax  +
call sub_100B8CB  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100B8FF  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_1007052  +
push [ebp+lpMultiByteStr]  +
mov ecx esi +
call sub_100A6C4  +
test al al +
jnz loc_100B9AC  +
push [ebp+lpMultiByteStr]  +
mov ecx esi +
call sub_1007266  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_1007052  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A6C4  +
test al al +
jnz loc_100B9E0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A70A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push offset dword_10015B8  +
mov ecx esi +
call sub_100A69E  +
mov edi [ebp+arg_4] +
mov eax [edi] +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_100BA3B  +
mov eax [esi] +
cmp dword ptr [eax-0Ch] 0 +
jz loc_100BA22  +
push offset asc_1002280  +
mov ecx esi +
call sub_100A678  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx edi +
call sub_100B1BA  +
push eax  +
mov ecx esi +
call sub_100B968  +
cmp [ebp+arg_0] 0 +
jnz loc_100BA0E  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
mov ebx ecx +
mov ecx [esi] +
push edi  +
test ecx ecx +
jge loc_100BA64  +
push 80070057h  +
call loc_1006F35  +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_100BABD  +
cmp word ptr [edx] 0 +
jz loc_100BABD  +
mov eax [ebx] +
lea edi [eax+ecx*2] +
mov ecx [eax-0Ch] +
lea eax [eax+ecx*2] +
mov [ebp+arg_8] eax +
cmp edi eax +
jnb loc_100BADC  +
push edx  +
push edi  +
call ds:wcsspn  +
lea edi [edi+eax*2] +
pop ecx  +
pop ecx  +
mov [ebp+var_4] eax +
cmp edi [ebp+arg_8] +
jnb loc_100BADC  +
push [ebp+arg_4]  +
push edi  +
call ds:wcscspn  +
pop ecx  +
pop ecx  +
mov ecx [esi] +
add ecx [ebp+var_4] +
push eax  +
push ecx  +
push [ebp+arg_0]  +
lea edx [ecx+eax+1] +
mov ecx ebx +
mov [esi] edx +
call sub_100B7AD  +
jmp loc_100BAEF  +
mov edi [ebx] +
cmp ecx [edi-0Ch] +
jge loc_100BADC  +
mov ecx ebx +
call sub_1007B7B  +
mov ecx [ebp+arg_0] +
push eax  +
mov eax [esi] +
lea eax [edi+eax*2] +
push eax  +
call sub_100B9B8  +
jmp loc_100BAEF  +
or dword ptr [esi] 0FFFFFFFFh +
mov ecx ebx +
call sub_1007B7B  +
mov ecx [ebp+arg_0] +
push eax  +
call sub_1007C21  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_1007B7B  +
push eax  +
push [ebp+lpMultiByteStr]  +
lea ecx [ebp+lpMultiByteStr] +
call sub_100B984  +
lea eax [ebp+lpMultiByteStr] +
push eax  +
push [ebp+arg_0]  +
call sub_100B40E  +
mov ecx [ebp+lpMultiByteStr] +
add ecx 0FFFFFFF0h +
mov bl al +
call sub_1006A15  +
mov al bl +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+8] +
call sub_100A8B6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_20] 0 +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_20] +
push eax  +
call ds:GetCurrentProcessId  +
push eax  +
call ds:ProcessIdToSessionId  +
push offset aSoftwareMicr_5  +
mov ecx esi +
call sub_100A8B6  +
push 0Ah  +
push 0Ch  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+var_20]  +
call _ltow_s  +
add esp 10h +
lea eax [ebp+var_1C] +
push eax  +
mov ecx esi +
call sub_100A678  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1009AE9  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1018h +
call __alloca_probe  +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
xor eax eax +
mov esi 7FEh +
push esi  +
mov word ptr [ebp+Data] ax +
lea eax [ebp-1002h] +
push ebx  +
push eax  +
mov [ebp+lpSubKey] ecx +
mov [ebp+var_1018] ebx +
mov [ebp+var_1014] ebx +
mov [ebp+var_1010] ebx +
call memset  +
xor eax eax +
push esi  +
mov word ptr [ebp+var_804] ax +
lea eax [ebp+var_804+2] +
push ebx  +
push eax  +
call memset  +
add esp 18h +
mov esi 20019h +
push esi  +
push offset aSoftwareMicr_0  +
push 80000001h  +
lea ecx [ebp+var_1018] +
call sub_100A16E  +
mov edi offset aConfiguratio_0 +
test eax eax +
jnz loc_100BC88  +
lea eax [ebp+Type] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push edi  +
lea ecx [ebp+var_1018] +
mov [ebp+Type] 400h +
call sub_100A1AA  +
test eax eax +
jz loc_100BC88  +
xor eax eax +
mov word ptr [ebp+Data] ax +
mov ecx [ebp+lpSubKey] +
lea eax [ebp+lpSubKey] +
push eax  +
call sub_100BB5C  +
push esi  +
mov esi [ebp+lpSubKey] +
push esi  +
push 80000002h  +
lea ecx [ebp+var_1018] +
call sub_100A16E  +
test eax eax +
jnz loc_100BCE7  +
lea eax [ebp+Type] +
push eax  +
lea eax [ebp+var_804] +
push eax  +
push edi  +
lea ecx [ebp+var_1018] +
mov [ebp+Type] 400h +
call sub_100A1AA  +
test eax eax +
jz loc_100BCE7  +
xor eax eax +
mov word ptr [ebp+var_804] ax +
lea ecx [ebp+var_804] +
lea eax [ebp+Data] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100BD19  +
cmp dx bx +
jz loc_100BD15  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100BD19  +
add eax 4 +
add ecx 4 +
cmp dx bx +
jnz loc_100BCF3  +
xor eax eax +
jmp loc_100BD1E  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_100BD27  +
call sub_100AC35  +
lea ecx [esi-10h] +
call sub_1006A15  +
lea ecx [ebp+var_1018] +
call sub_100A150  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1009AE9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+Type] +
xor eax eax +
mov [esi] ax +
push edi  +
lea eax [ebp+Type] +
push eax  +
call sub_100BB5C  +
mov eax [eax] +
mov ecx [ebp+arg_8] +
push 2001Fh  +
push eax  +
push 80000002h  +
call sub_100A16E  +
mov ecx [ebp+Type] +
add ecx 0FFFFFFF0h +
mov edi eax +
call sub_1006A15  +
mov ebx offset dword_100221C +
test edi edi +
jz loc_100BDB3  +
mov eax off_1010000 +
cmp eax offset off_1010000 +
jz loc_100BDB3  +
test byte ptr [eax+1Ch] 8 +
jz loc_100BDB3  +
push edi  +
push ebx  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AE83  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [ebp+Type] eax +
lea eax [ebp+Type] +
push eax  +
push esi  +
push offset ValueName  +
call sub_100A1AA  +
test eax eax +
jz loc_100BDF7  +
mov ecx off_1010000 +
cmp ecx offset off_1010000 +
jz loc_100BDF2  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100BDF2  +
push eax  +
push ebx  +
push 1Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AE83  +
xor eax eax +
mov [esi] ax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 228h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+lpData] ecx +
mov [ebp+Type] edi +
mov eax off_1010000 +
mov esi offset off_1010000 +
cmp eax esi +
jz loc_100BE57  +
test byte ptr [eax+1Ch] 8 +
jz loc_100BE57  +
push ecx  +
mov ebx offset dword_100221C +
push ebx  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006BB8  +
jmp loc_100BE5C  +
mov ebx offset dword_100221C +
lea eax [ebp+var_214] +
push eax  +
xor eax eax +
push eax  +
push 3  +
push eax  +
push eax  +
push offset aSoftwareMicr_0  +
push 80000001h  +
mov ecx edi +
call sub_100AA30  +
mov edi eax +
test edi edi +
jz loc_100BEC2  +
mov eax off_1010000 +
cmp eax esi +
jz loc_100BE9F  +
test byte ptr [eax+1Ch] 8 +
jz loc_100BE9F  +
push edi  +
push ebx  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AE83  +
test edi edi +
jle loc_100BEAF  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1009AE9  +
leave   +
retn 0Ch  +
mov ecx [ebp+Type] +
push 1  +
push [ebp+lpData]  +
push offset aConfiguratio_0  +
call sub_100AAE7  +
mov edi eax +
xor eax eax +
cmp edi eax +
jz loc_100BEF7  +
mov eax off_1010000 +
cmp eax esi +
jz loc_100BE9F  +
test byte ptr [eax+1Ch] 8 +
jz loc_100BE9F  +
push edi  +
push ebx  +
push 20h  +
jmp loc_100BE94  +
push 20019h  +
push offset aSoftwareMicr_6  +
push 80000001h  +
lea ecx [ebp+var_228] +
mov [ebp+var_228] eax +
mov [ebp+var_224] eax +
mov [ebp+var_220] eax +
call sub_100A16E  +
mov edi eax +
test edi edi +
jz loc_100BF6B  +
mov eax off_1010000 +
cmp eax esi +
jz loc_100BF47  +
test byte ptr [eax+1Ch] 8 +
jz loc_100BF47  +
push edi  +
push ebx  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AE83  +
test edi edi +
jle loc_100BF57  +
and edi 0FFFFh +
or edi 80070000h +
mov esi edi +
lea ecx [ebp+var_228] +
call sub_100A150  +
mov eax esi +
jmp loc_100BEB1  +
xor eax eax +
push 206h  +
push eax  +
mov word ptr [ebp+Data] ax +
lea eax [ebp-20Ah] +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+Type] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push offset aStartup  +
lea ecx [ebp+var_228] +
mov [ebp+Type] 104h +
call sub_100A1AA  +
lea eax [ebp+Data] +
push eax  +
lea ecx [ebp+Type] +
call sub_100A8B6  +
lea eax [ebp+Data] +
push eax  +
lea ecx [ebp+var_214] +
call sub_100A8B6  +
lea eax [ebp+Data] +
push eax  +
lea ecx [ebp+var_21C] +
call sub_100A8B6  +
push offset aOnScreenKeyboa  +
lea ecx [ebp+Type] +
call sub_100A678  +
push offset aNarrator_lnk  +
lea ecx [ebp+var_214] +
call sub_100A678  +
push offset aMagnifier_lnk  +
lea ecx [ebp+var_21C] +
call sub_100A678  +
push [ebp+Type]  +
mov ebx ds:GetFileAttributesW +
call ebx  +
mov edi ds:DeleteFileW +
cmp eax 0FFFFFFFFh +
jz loc_100C06C  +
push offset aOsk  +
push [ebp+arg_4]  +
push [ebp+lpData]  +
call sub_100B29F  +
push [ebp+Type]  +
call edi  +
mov eax off_1010000 +
cmp eax esi +
jz loc_100C06C  +
test byte ptr [eax+1Ch] 10h +
jz loc_100C06C  +
push offset dword_100221C  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AE5D  +
push [ebp+var_214]  +
call ebx  +
cmp eax 0FFFFFFFFh +
jz loc_100C0B5  +
push offset aNarrator  +
push [ebp+arg_4]  +
push [ebp+lpData]  +
call sub_100B29F  +
push [ebp+var_214]  +
call edi  +
mov eax off_1010000 +
cmp eax esi +
jz loc_100C0B5  +
test byte ptr [eax+1Ch] 10h +
jz loc_100C0B5  +
push offset dword_100221C  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AE5D  +
push [ebp+var_21C]  +
call ebx  +
cmp eax 0FFFFFFFFh +
jz loc_100C0FE  +
push offset aMagnifierpane  +
push [ebp+arg_4]  +
push [ebp+lpData]  +
call sub_100B29F  +
push [ebp+var_21C]  +
call edi  +
mov eax off_1010000 +
cmp eax esi +
jz loc_100C0FE  +
test byte ptr [eax+1Ch] 10h +
jz loc_100C0FE  +
push offset dword_100221C  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AE5D  +
mov ecx [ebp+var_21C] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
mov ecx [ebp+var_214] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
mov ecx [ebp+Type] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
xor esi esi +
jmp loc_100BF59  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_100C9C4  +
mov esi [edi+10h] +
mov ebx [esi] +
test esi esi +
jz loc_100C156  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100BB3D  +
mov eax [ebp+arg_4] +
mov [edi+10h] ebx +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
mov [esi] eax +
inc dword ptr [edi+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
mov ebx ecx +
push offset aStartlistSaves  +
lea ecx [ebp+var_18] +
mov [ebp+lpData] edi +
call sub_1006C25  +
lea eax [ebp+var_C] +
push eax  +
mov ecx ebx +
mov [ebp+var_24] edi +
mov [ebp+var_20] edi +
mov [ebp+var_1C] edi +
call sub_100BB5C  +
mov eax [eax] +
push 20006h  +
push eax  +
mov esi 80000002h +
push esi  +
lea ecx [ebp+var_24] +
call sub_100A16E  +
mov ecx [ebp+var_C] +
add ecx 0FFFFFFF0h +
mov [ebp+var_4] eax +
call sub_1006A15  +
cmp [ebp+var_4] edi +
jz loc_100C25B  +
lea eax [ebp+var_C] +
push eax  +
mov ecx ebx +
call sub_100BB5C  +
mov eax [eax] +
lea ecx [ebp+var_10] +
push ecx  +
push edi  +
push 3  +
push 1  +
push edi  +
push eax  +
push esi  +
lea ecx [ebp+var_24] +
call sub_100AA30  +
mov ecx [ebp+var_C] +
add ecx 0FFFFFFF0h +
mov esi eax +
call sub_1006A15  +
cmp esi edi +
jz loc_100C25B  +
mov eax off_1010000 +
cmp eax offset off_1010000 +
jz loc_100C246  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C246  +
lea eax [ebp+var_C] +
push eax  +
mov ecx ebx +
mov [ebp+lpData] 1 +
call sub_100BB5C  +
push esi  +
push dword ptr [eax]  +
mov eax off_1010000 +
push offset dword_100221C  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AEAF  +
test byte ptr [ebp+lpData] 1 +
jz loc_100C2E5  +
mov ecx [ebp+var_C] +
add ecx 0FFFFFFF0h +
jmp loc_100C2E0  +
push offset dword_101032C  +
lea ecx [ebp+lpData] +
call sub_1007052  +
lea eax [ebx+18h] +
push eax  +
lea eax [ebp+lpData] +
push eax  +
mov ecx ebx +
call sub_100B9EC  +
mov esi [ebp+lpData] +
push 1  +
push esi  +
push offset aConfiguratio_0  +
lea ecx [ebp+var_24] +
call sub_100AAE7  +
cmp [ebp+var_4] edi +
jz loc_100C2B8  +
mov eax off_1010000 +
cmp eax offset off_1010000 +
jz loc_100C2DD  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C2DD  +
push [ebp+var_4]  +
push offset dword_100221C  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AE83  +
jmp loc_100C2DD  +
mov eax off_1010000 +
cmp eax offset off_1010000 +
jz loc_100C2DD  +
test byte ptr [eax+1Ch] 10h +
jz loc_100C2DD  +
push esi  +
push offset dword_100221C  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006BB8  +
lea ecx [esi-10h] +
call sub_1006A15  +
lea ecx [ebp+var_24] +
call sub_100A150  +
lea ecx [ebp+var_18] +
call sub_1006C69  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_100C134  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_100C31F  +
mov [ecx] eax +
jmp loc_100C321  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov ecx [ebp+arg_0] +
push ebx  +
push edi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_4] +
xor ebx ebx +
push eax  +
mov [ebp+var_C] ebx +
mov dword ptr [ebp+var_10] 2Ch +
call sub_100BA46  +
mov edi offset dword_10020D4 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
call sub_100BAFE  +
test al al +
jz loc_100C40A  +
push esi  +
mov esi [ebp+var_4] +
cmp [esi-0Ch] ebx +
jz loc_100C3CF  +
push offset aSoftwareMicr_1  +
lea ecx [ebp+lpSubKey] +
call sub_100A8B6  +
push dword ptr [esi-0Ch]  +
lea ecx [ebp+lpSubKey] +
push esi  +
call sub_100A57D  +
push 20019h  +
push [ebp+lpSubKey]  +
lea ecx [ebp+var_20] +
push 80000002h  +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
call sub_100A16E  +
test eax eax +
jnz loc_100C3BC  +
mov ecx [ebp+arg_4] +
push esi  +
call sub_100C2FF  +
lea ecx [ebp+var_20] +
call sub_100A150  +
mov ecx [ebp+lpSubKey] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call sub_100BA46  +
push eax  +
lea ecx [ebp+var_4] +
call sub_100B858  +
mov ecx [ebp+var_14] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
call sub_100BAFE  +
test al al +
jnz loc_100C370  +
pop esi  +
mov ecx [ebp+var_4] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1830h +
call __alloca_probe  +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
xor eax eax +
cmp [edi+48h] esi +
jnz loc_100C5EF  +
push ebx  +
mov ebx 7FEh +
push ebx  +
mov word ptr [ebp+var_804] ax +
lea eax [ebp+var_804+2] +
push esi  +
push eax  +
mov dword ptr [edi+48h] 1 +
mov [ebp+var_1818] esi +
mov [ebp+var_1814] esi +
mov [ebp+var_1810] esi +
call memset  +
xor eax eax +
push ebx  +
mov word ptr [ebp+Type] ax +
lea eax [ebp+Type+2] +
push esi  +
push eax  +
mov [ebp+var_1830] esi +
mov [ebp+var_182C] esi +
mov [ebp+var_1828] esi +
call memset  +
add esp 18h +
lea eax [ebp+var_1830] +
push eax  +
mov esi 400h +
push esi  +
lea eax [ebp+Type] +
push eax  +
mov ecx edi +
call sub_100BD4E  +
lea eax [ebp+Type] +
push eax  +
lea ecx [ebp+var_180C] +
call sub_100A8B6  +
lea eax [edi+18h] +
push eax  +
lea eax [ebp+var_180C] +
push eax  +
mov ecx edi +
call sub_100C32E  +
mov ecx edi +
call sub_100AF22  +
test eax eax +
jz loc_100C6B1  +
xor eax eax +
push ebx  +
push eax  +
mov [ebp+var_1824] eax +
mov [ebp+var_1820] eax +
mov [ebp+var_181C] eax +
lea eax [ebp+var_1804+2] +
xor ecx ecx +
push eax  +
mov word ptr [ebp+var_1804] cx +
call memset  +
add esp 0Ch +
lea eax [ebp+var_1824] +
push eax  +
push esi  +
lea eax [ebp+var_1804] +
push eax  +
mov ecx edi +
call sub_100B69A  +
lea eax [ebp+var_1804] +
push eax  +
lea ecx [ebp+var_1808] +
call sub_100A8B6  +
lea eax [edi+30h] +
push eax  +
lea eax [ebp+var_1808] +
push eax  +
mov ecx edi +
call sub_100C32E  +
lea eax [ebp+var_1818] +
push eax  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
mov ecx edi +
call sub_100B055  +
mov ebx eax +
test ebx ebx +
jge loc_100C696  +
and eax 0FFFFh +
cmp eax 2 +
jz loc_100C5FD  +
mov eax off_1010000 +
cmp eax offset off_1010000 +
jz loc_100C5AF  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C5AF  +
push ebx  +
push offset dword_100221C  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AE83  +
mov ecx [ebp+var_1808] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
lea ecx [ebp+var_1824] +
call sub_100A150  +
mov ecx [ebp+var_180C] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
lea ecx [ebp+var_1830] +
call sub_100A150  +
lea ecx [ebp+var_1818] +
call sub_100A150  +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1009AE9  +
leave   +
retn   +
lea eax [ebp+Type] +
push eax  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
call sub_100B264  +
lea eax [ebp+var_1818] +
push eax  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
mov ecx edi +
call sub_100BE03  +
mov esi eax +
test esi esi +
jge loc_100C696  +
mov eax off_1010000 +
cmp eax offset off_1010000 +
jz loc_100C652  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C652  +
push esi  +
push offset dword_100221C  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AE83  +
mov ecx [ebp+var_1808] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
lea ecx [ebp+var_1824] +
call sub_100A150  +
mov ecx [ebp+var_180C] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
lea ecx [ebp+var_1830] +
call sub_100A150  +
lea ecx [ebp+var_1818] +
call sub_100A150  +
mov eax esi +
jmp loc_100C5EE  +
mov ecx [ebp+var_1808] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
lea ecx [ebp+var_1824] +
call sub_100A150  +
jmp loc_100C6C7  +
lea eax [ebp+var_1818] +
push eax  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
mov ecx edi +
call sub_100BD4E  +
lea eax [ebp+var_804] +
push eax  +
lea ecx [ebp+var_1808] +
call sub_100A8B6  +
push edi  +
lea eax [ebp+var_1808] +
push eax  +
mov ecx edi +
call sub_100C32E  +
mov ecx [ebp+var_1808] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
xor esi esi +
jmp loc_100C66B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_100C721  +
mov eax 80070057h +
jmp loc_100C8A3  +
call sub_100C420  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_100C8A3  +
push ebx  +
push offset aSystemsetting  +
mov ecx edi +
call sub_100A291  +
push eax  +
call sub_100A46E  +
test al al +
jz loc_100C7D7  +
mov ecx edi +
call sub_100A27F  +
push dword ptr [eax]  +
call ds:_wtoi  +
pop ecx  +
mov ebx eax +
call sub_100CC43  +
cmp ebx eax +
jnb loc_100C89F  +
push dword ptr [esi+4Ch]  +
mov ecx edi +
push [ebp+arg_4]  +
push ebx  +
call sub_100C971  +
push eax  +
call sub_100CD96  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_100C89F  +
mov ecx esi +
call sub_100AF22  +
test eax eax +
jz loc_100C7C0  +
mov ecx edi +
mov [ebp+var_4] 1 +
call sub_100C971  +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1007C3D  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_100B496  +
test eax eax +
jz loc_100C7C0  +
mov bl 1 +
jmp loc_100C7C2  +
xor bl bl +
test byte ptr [ebp+var_4] 1 +
jz loc_100C7D3  +
mov ecx [ebp+arg_4] +
add ecx 0FFFFFFF0h +
call sub_1006A15  +
test bl bl +
jmp loc_100C83E  +
mov ecx esi +
call sub_100AF22  +
test eax eax +
jz loc_100C7FB  +
mov ecx esi +
call sub_100AFE6  +
test eax eax +
jnz loc_100C7FB  +
mov ecx esi +
call sub_100BBC7  +
xor eax eax +
jmp loc_100C8A2  +
mov ecx edi +
call sub_100A27F  +
mov ebx [eax] +
test ebx ebx +
jnz loc_100C812  +
mov eax 80004005h +
jmp loc_100C8A2  +
mov ecx edi +
call sub_100A288  +
mov eax [eax] +
push 5  +
push eax  +
push ebx  +
mov ecx esi +
call sub_100B51E  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_100C89F  +
push edi  +
mov ecx esi +
call sub_100B380  +
mov ecx esi +
call sub_100AFE6  +
test eax eax +
jz loc_100C89F  +
mov ecx edi +
call sub_100C971  +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1007C3D  +
push 0  +
push [ebp+arg_4]  +
lea ecx [esi+18h] +
call sub_100B496  +
mov ecx [ebp+arg_4] +
mov ebx eax +
neg ebx  +
sbb bl bl +
add ecx 0FFFFFFF0h +
inc bl  +
call sub_1006A15  +
test bl bl +
jz loc_100C898  +
mov ecx edi +
call sub_100C971  +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1007C3D  +
mov edi [ebp+arg_4] +
push edi  +
lea ecx [esi+18h] +
call sub_100C2FF  +
lea ecx [edi-10h] +
call sub_1006A15  +
mov ecx esi +
call sub_100C175  +
mov eax [ebp+arg_0] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_100C8C8  +
mov eax 80070057h +
jmp loc_100C94E  +
call sub_100C420  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_100C94E  +
push offset aSystemsetting  +
mov ecx edi +
call sub_100A291  +
push eax  +
call sub_100A46E  +
test al al +
jz loc_100C91D  +
push ebx  +
mov ecx edi +
call sub_100A27F  +
push dword ptr [eax]  +
call ds:_wtoi  +
pop ecx  +
mov ebx eax +
call sub_100CC43  +
cmp ebx eax +
jnb loc_100C91C  +
push dword ptr [esi+4Ch]  +
mov ecx edi +
push 0  +
push ebx  +
call sub_100C971  +
push eax  +
call sub_100CED8  +
mov [ebp+arg_0] eax +
pop ebx  +
cmp [ebp+arg_0] 0 +
jl loc_100C94B  +
mov ecx edi +
call sub_100C971  +
push 0  +
push dword ptr [eax]  +
lea edi [esi+18h] +
mov ecx edi +
call sub_100B496  +
test eax eax +
jz loc_100C944  +
push eax  +
mov ecx edi +
call sub_100B91B  +
mov ecx esi +
call sub_100C175  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_100C702  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
jmp loc_100C995  +
mov eax [esi] +
cmp eax edi +
jz loc_100C9B4  +
mov ecx [eax] +
mov [esi] ecx +
push eax  +
mov ecx esi +
call sub_100CADE  +
cmp [esi+8] edi +
ja loc_100C983  +
mov ecx [esi+0Ch] +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
cmp ecx edi +
jz loc_100C9B1  +
call sub_100AB58  +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
retn   +
***
push 80004005h  +
call loc_1006F35  +
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+10h] 0 +
jnz loc_100CA07  +
push 0Ch  +
push dword ptr [esi+14h]  +
lea eax [esi+0Ch] +
push eax  +
call sub_100B211  +
test eax eax +
jnz loc_100C9EB  +
push 8007000Eh  +
call loc_1006F35  +
mov ecx [esi+14h] +
mov edx ecx +
imul edx edx +
lea eax [edx+eax-8] +
jmp loc_100CA04  +
mov edx [esi+10h] +
mov [eax] edx +
mov [esi+10h] eax +
sub eax 0Ch +
dec ecx  +
jns loc_100C9F9  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 1  +
mov esi ecx +
call sub_100B321  +
push 0Ah  +
lea ecx [esi+54h] +
call sub_100B149  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100B321  +
push 0Ah  +
lea ecx [esi+54h] +
call sub_100B149  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi ecx +
cmp dword ptr [edi+5Ch] 0 +
jz loc_100CA8E  +
push esi  +
lea esi [edi+54h] +
mov eax [esi] +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100CA8D  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_100B1BA  +
mov ecx [eax] +
test ecx ecx +
jz loc_100CA87  +
push 1  +
call sub_1006EF1  +
cmp [ebp+var_4] 0 +
jnz loc_100CA6F  +
pop esi  +
lea ecx [edi+54h] +
call loc_100C979  +
mov ecx edi +
call sub_100B35E  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100C9C4  +
mov eax [esi+10h] +
mov ecx [eax] +
test eax eax +
jz loc_100CAC3  +
mov edx [ebp+arg_0] +
mov edx [edx] +
mov [eax+8] edx +
mov [esi+10h] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax] ecx +
inc dword ptr [esi+8]  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+10h] +
mov eax [ebp+arg_0] +
mov [eax] edx +
dec dword ptr [ecx+8]  +
mov [ecx+10h] eax +
jnz loc_100CAF8  +
call loc_100C979  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_100CAA5  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_100CB21  +
mov [ecx] eax +
jmp loc_100CB23  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A0h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20019h  +
xor esi esi +
push offset aSoftwareMicr_7  +
mov [ebp+var_90] ecx +
push 80000002h  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] esi +
mov [ebp+var_98] esi +
mov [ebp+var_94] esi +
call sub_100A16E  +
test eax eax +
jnz loc_100CC1D  +
push ebx  +
push edi  +
mov edi ds:RegEnumKeyExW +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push esi  +
push [ebp+hKey]  +
mov [ebp+cbName] 40h +
mov [ebp+dwIndex] esi +
call edi  +
mov ebx 103h +
jmp loc_100CC17  +
lea eax [ebp+Name] +
push eax  +
call sub_100A8EC  +
mov [ebp+var_A0] eax +
cmp eax esi +
jz loc_100CBE7  +
mov ecx [ebp+var_90] +
lea eax [ebp+var_A0] +
push eax  +
add ecx 54h +
call sub_100CB01  +
inc [ebp+dwIndex]  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push [ebp+dwIndex]  +
mov [ebp+cbName] 40h +
push [ebp+hKey]  +
call edi  +
cmp eax ebx +
jnz loc_100CBBC  +
pop edi  +
pop ebx  +
lea ecx [ebp+hKey] +
call sub_100A150  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_90] +
xor ecx ebp +
add eax 54h +
pop esi  +
call sub_1009AE9  +
leave   +
retn   +
***
pop eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
mov ebx [ebp+pvParam] +
push esi  +
mov esi ds:SystemParametersInfoW +
push edi  +
mov [ebp+uiAction] 1003h +
mov [ebp+var_18] 1005h +
mov [ebp+var_14] 1007h +
mov [ebp+var_10] 1015h +
mov [ebp+var_C] 1017h +
xor edi edi +
push 3  +
push ebx  +
push 0  +
push [ebp+edi*4+uiAction]  +
call esi  +
test eax eax +
jz loc_100CCBD  +
inc edi  +
cmp edi 5 +
jb loc_100CC85  +
push 3  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
push 49h  +
mov [ebp+var_8] 8 +
mov [ebp+var_4] ebx +
call esi  +
test eax eax +
jz loc_100CCBD  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
call ds:GetLastError  +
test eax eax +
jle loc_100CCB6  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100CCB6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov eax [ebp+arg_4] +
imul eax eax +
mov eax off_10100B8[eax] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100CD14  +
test dx dx +
jz loc_100CD10  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100CD14  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100CCEE  +
xor eax eax +
jmp loc_100CD19  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
xor ecx ecx +
test eax eax +
setz cl  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
push [ebp+arg_0]  +
call sub_100CCD8  +
test eax eax +
jnz loc_100CD52  +
xor eax eax +
jmp loc_100CD82  +
imul esi esi +
add esi offset off_10100B8 +
mov eax [esi+0Ch] +
dec eax  +
dec eax  +
jnz loc_100CD4E  +
mov eax [esi+10h] +
push 0  +
lea ecx [ebp+pvParam] +
push ecx  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+pvParam] eax +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_100CD4E  +
mov eax [ebp+var_3C] +
and eax 1 +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1009AE9  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
neg ebx  +
push esi  +
push [ebp+arg_0]  +
sbb ebx ebx +
and ebx 3 +
call sub_100CCD8  +
test eax eax +
jnz loc_100CDD2  +
mov eax 80070057h +
jmp loc_100CE86  +
imul esi esi +
add esi offset off_10100B8 +
mov eax [esi] +
mov ecx offset aAnimations +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100CE08  +
test dx dx +
jz loc_100CE04  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100CE08  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100CDE2  +
xor eax eax +
jmp loc_100CE0D  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100CE1C  +
push dword ptr [edi]  +
call sub_100CC4C  +
test eax eax +
jl loc_100CE86  +
mov eax [esi+0Ch] +
sub eax 0 +
jz loc_100CEA9  +
dec eax  +
jz loc_100CEA0  +
dec eax  +
jnz loc_100CE84  +
mov eax [esi+10h] +
test edi edi +
jnz loc_100CE97  +
push edi  +
mov edi ds:SystemParametersInfoW +
lea ecx [ebp+pvParam] +
push ecx  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+pvParam] eax +
call edi  +
test eax eax +
jz loc_100CEBD  +
test byte ptr [ebp+var_3C] 1 +
jnz loc_100CE84  +
or [ebp+var_3C] 1 +
push ebx  +
lea eax [ebp+pvParam] +
push eax  +
push dword ptr [esi+10h]  +
push dword ptr [esi+8]  +
call edi  +
test ebx ebx +
jnz loc_100CE84  +
lea eax [ebp+dwResult] +
push eax  +
push 1388h  +
push 2  +
push ebx  +
push dword ptr [esi+8]  +
push 1Ah  +
push 0FFFFh  +
call ds:SendMessageTimeoutW  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1009AE9  +
leave   +
retn 10h  +
push ebx  +
push edi  +
mov [edi] eax +
push dword ptr [esi+10h]  +
jmp loc_100CEB0  +
mov edi [edi] +
push ebx  +
push edi  +
push dword ptr [esi+10h]  +
jmp loc_100CEB0  +
mov edi [edi] +
push ebx  +
push dword ptr [esi+14h]  +
push edi  +
push dword ptr [esi+8]  +
call ds:SystemParametersInfoW  +
test eax eax +
jnz loc_100CE84  +
call ds:GetLastError  +
test eax eax +
jle loc_100CE86  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100CE86  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1010004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_C] +
neg edi  +
push esi  +
push [ebp+arg_0]  +
sbb edi edi +
and edi 3 +
call sub_100CCD8  +
test eax eax +
jnz loc_100CF14  +
mov eax 80070057h +
jmp loc_100CFAC  +
imul esi esi +
add esi offset off_10100B8 +
mov eax [esi+0Ch] +
dec eax  +
dec eax  +
jnz loc_100CFAA  +
mov eax [esi+10h] +
test ebx ebx +
jnz loc_100CF76  +
push ebx  +
mov ebx ds:SystemParametersInfoW +
lea ecx [ebp+pvParam] +
push ecx  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+pvParam] eax +
call ebx  +
test eax eax +
jnz loc_100CF5D  +
call ds:GetLastError  +
test eax eax +
jle loc_100CFAC  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100CFAC  +
test byte ptr [ebp+var_3C] 1 +
jz loc_100CFAA  +
and [ebp+var_3C] 0FFFFFFFEh +
push edi  +
lea eax [ebp+pvParam] +
push eax  +
push dword ptr [esi+10h]  +
push dword ptr [esi+8]  +
call ebx  +
jmp loc_100CF8A  +
push edi  +
push ebx  +
mov [ebx] eax +
push dword ptr [esi+10h]  +
push dword ptr [esi+8]  +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_100CF47  +
test edi edi +
jnz loc_100CFAA  +
lea eax [ebp+dwResult] +
push eax  +
push 1388h  +
push 2  +
push edi  +
push dword ptr [esi+8]  +
push 1Ah  +
push 0FFFFh  +
call ds:SendMessageTimeoutW  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1009AE9  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_14] +
push edi  +
mov edi [ebp+arg_10] +
cmp esi 7FFFFFFFh +
ja loc_100D032  +
lea eax [esi+esi] +
mov [ebp+arg_14] eax +
lea eax [ebp+arg_14] +
push eax  +
push edi  +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call SHRegGetValueW  +
jmp loc_100D037  +
mov eax 216h +
test eax eax +
jz loc_100D044  +
test esi esi +
jbe loc_100D044  +
xor ecx ecx +
mov [edi] cx +
pop edi  +
pop esi  +
test eax eax +
jle loc_100D054  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push 2  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100CFFD  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+pvData] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100D08C  +
sub eax edx +
sar eax 1 +
cmp eax 7FFFFFFFh +
jnb loc_100D0BB  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+pvData]  +
push 1  +
push [ebp+pszValue]  +
push [ebp+pszSubKey]  +
push [ebp+hkey]  +
call SHSetValueW  +
jmp loc_100D0C0  +
mov eax 216h +
test eax eax +
jle loc_100D0CE  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
xor esi esi +
inc esi  +
test byte ptr dword_1010744 1 +
jnz loc_100D0F3  +
or dword_1010744 esi +
or dword_1010740 0FFFFFFFFh +
cmp dword_1010740 0FFFFFFFFh +
jnz loc_100D11C  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_100D11C  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
mov dword_1010740 eax +
mov eax dword_1010740 +
test eax eax +
jz loc_100D129  +
call eax  +
mov esi eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_100D0D7  +
cmp dword_10102B0 0FFFFFFFFh +
jz loc_100D148  +
cmp dword_101073C eax +
jz locret_100D1A9  +
push edi  +
push 0  +
mov dword_101073C eax +
call ds:GetDC  +
mov edi eax +
test edi edi +
jz loc_100D194  +
push esi  +
mov esi ds:GetDeviceCaps +
push 58h  +
push edi  +
call esi  +
push 5Ah  +
push edi  +
mov dword_10102B0 eax +
call esi  +
mov dword_10102B4 eax +
xor eax eax +
cmp dword_10102B0 60h +
push edi  +
setnle al  +
push 0  +
mov dword_1010738 eax +
call ds:ReleaseDC  +
pop esi  +
pop edi  +
retn   +
and dword_1010738 0 +
push 60h  +
pop eax  +
mov dword_10102B0 eax +
mov dword_10102B4 eax +
pop edi  +
retn   +
***
call sub_100D132  +
mov eax dword_10102B0 +
retn   +
***
jmp ds:?IsRTLReading@Element@DirectUI@@UAE_NXZ  +
***
jmp ds:?IsContentProtected@Element@DirectUI@@UAE_NXZ  +
***
jmp ds:?GetContentStringAsDisplayed@Element@DirectUI@@UAEPBGPAPAVValue@2@@Z  +
***
jmp ds:?OnPropertyChanging@Element@DirectUI@@UAE_NPBUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ds:?OnPropertyChanging@Element@DirectUI@@UAE_NPAUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ds:?OnPropertyChanged@HWNDElement@DirectUI@@UAEXPBUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ds:?OnPropertyChanged@Element@DirectUI@@UAEXPAUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ds:?OnGroupChanged@HWNDElement@DirectUI@@UAEXH_N@Z  +
***
jmp ds:?OnInput@HWNDElement@DirectUI@@UAEXPAUInputEvent@2@@Z  +
***
jmp ds:?OnKeyFocusMoved@Element@DirectUI@@UAEXPAV12@0@Z  +
***
jmp ds:?OnMouseFocusMoved@Element@DirectUI@@UAEXPAV12@0@Z  +
***
jmp ds:?OnDestroy@HWNDElement@DirectUI@@UAEXXZ  +
***
mov ebp 2D68FFFFh +
aad  0 +
add eax ebp +
setalc   +
mov bh 0FFh +
pop ecx  +
retn   +
***
mov ebx 59FFFFC6h +
retn   +
***
jmp fword ptr [eax+4Ch]  +
***
aad  0 +
add eax ebp +
mov al ds:59FFFFC6h +
retn   +
***
mov ecx offset dword_1010320 +
jmp sub_1009193  +
***
retn   +
***
retf   +
***
retf   +
***
retf   +
***
