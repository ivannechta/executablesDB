mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_10020E9  +
cmp eax 0FFFFFFFFh +
jbe loc_10020F0  +
mov eax 80070057h +
jmp loc_10020F7  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+cb] 0 +
push [ebp+arg_0]  +
lea eax [ebp+cb] +
push eax  +
call sub_10020D5  +
test eax eax +
jge loc_1002121  +
xor eax eax +
jmp locret_100212A  +
push [ebp+cb]  +
call ds:CoTaskMemAlloc  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+cb] 0 +
push [ebp+arg_4]  +
lea eax [ebp+cb] +
push eax  +
call sub_10020D5  +
test eax eax +
jge loc_1002154  +
xor eax eax +
jmp locret_1002160  +
push [ebp+cb]  +
push [ebp+pv]  +
call ds:CoTaskMemRealloc  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpString]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ebp+8] eax +
push offset dword_10079F8  +
lea eax [ebp+8] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1002225  +
cmp eax 0Ch +
jz loc_100221E  +
cmp eax 16h +
jz loc_1002217  +
cmp eax 22h +
jz loc_1002217  +
cmp eax 50h +
jz loc_1002225  +
push 80004005h  +
call loc_10021CE  +
push 80070057h  +
jmp loc_1002212  +
push 8007000Eh  +
jmp loc_1002212  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
push eax  +
call sub_10021ED  +
pop ebp  +
retn   +
***
mov edi edi +
push edi  +
mov edx ecx +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov eax edx +
pop edi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_10022A6  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100226B  +
test eax eax +
jl loc_10022CD  +
mov byte ptr [esi+18h] 1 +
pop esi  +
retn   +
***
call ds:GetLastError  +
test eax eax +
jle locret_10022E8  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jle loc_1002304  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
push dword ptr [ecx]  +
call ds:SysFreeString  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1002369  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebx-1] +
xor eax eax +
test edi edi +
jbe loc_1002361  +
mov edx [ebp+arg_8] +
movzx ecx word ptr [edx] +
test cx cx +
jz loc_1002361  +
mov [esi+eax*2] cx +
cmp word ptr [edx] 27h +
jnz loc_100235A  +
lea ecx [ebx-2] +
cmp eax ecx +
jnb loc_100235A  +
push 27h  +
inc eax  +
pop ecx  +
mov [esi+eax*2] cx +
inc edx  +
inc edx  +
inc eax  +
cmp eax edi +
jb loc_1002339  +
xor ecx ecx +
pop edi  +
mov [esi+eax*2] cx +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_10023C5  +
cmp dword ptr [esi+8] 0 +
jnz loc_10023C5  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_10023A7  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
mov [esi+4] eax +
jmp loc_10023C5  +
push offset LibFileName  +
call ds:LoadLibraryW  +
test eax eax +
jz loc_10023C5  +
push offset aRegdeletekeyw  +
push eax  +
call ds:GetProcAddress  +
mov [esi+8] eax +
mov eax [esi+4] +
test eax eax +
jz loc_10023D9  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_10023EF  +
mov eax [esi+8] +
test eax eax +
jz loc_10023E9  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_10023EF  +
call ds:GetLastError  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_1002410  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_1002452  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_1002462  +
mov ecx esi +
call sub_10023F9  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100249E  +
mov ecx esi +
call sub_10023F9  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jnz loc_10024E3  +
push 80004005h  +
call loc_10021CE  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpData] +
push edi  +
mov ebx ecx +
test esi esi +
jnz loc_1002529  +
push 80004005h  +
call loc_10021CE  +
xor edi edi +
push esi  +
call ds:lstrlenW  +
inc eax  +
lea ecx [eax+eax] +
add esi ecx +
add edi ecx +
cmp eax 1 +
jnz loc_100252B  +
push edi  +
push [ebp+lpData]  +
push 7  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ebx]  +
call ds:RegSetValueExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
neg eax  +
sbb al al +
inc al  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_100259B  +
push eax  +
call ds:CharNextW  +
push 27h  +
pop ecx  +
cmp cx [eax] +
jz loc_100259B  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 64h +
push esi  +
mov esi ecx +
jge loc_10025B8  +
mov eax 3E8h +
and dword ptr [esi] 0 +
push 2  +
push eax  +
mov [esi+4] eax +
call sub_1002100  +
mov [esi+8] eax +
test eax eax +
jz loc_10025D2  +
xor ecx ecx +
mov [eax] cx +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
or bh bh +
adc eax offset CoTaskMemFree +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov eax [esi] +
lea ecx [eax+ebx+1] +
cmp ecx eax +
push edi  +
jle loc_1002672  +
cmp ecx ebx +
jle loc_1002672  +
mov edi [esi+4] +
cmp ecx edi +
jl loc_1002632  +
cmp edi 3FFFFFFFh +
jg loc_1002672  +
add edi edi +
cmp ecx edi +
jge loc_100260F  +
push 2  +
push edi  +
push dword ptr [esi+8]  +
call sub_1002133  +
test eax eax +
jz loc_1002672  +
mov [esi+8] eax +
mov [esi+4] edi +
mov eax [esi] +
test eax eax +
jl loc_1002672  +
mov edx [esi+4] +
cmp eax edx +
jge loc_1002672  +
mov ecx edx +
sub ecx eax +
cmp ecx edx +
jg loc_1002672  +
lea edx [ebx+ebx] +
push edx  +
push [ebp+arg_0]  +
add ecx ecx +
push ecx  +
mov ecx [esi+8] +
lea eax [ecx+eax*2] +
push eax  +
call sub_100222E  +
add [esi] ebx +
mov eax [esi] +
mov ecx [esi+8] +
xor edx edx +
mov [ecx+eax*2] dx +
xor eax eax +
add esp 10h +
inc eax  +
jmp loc_1002674  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
cmp byte ptr [ecx+18h] 0 +
jz locret_1002691  +
push ecx  +
mov byte ptr [ecx+18h] 0 +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_1009134 1 +
jnz loc_10026FA  +
or dword_1009134 1 +
push 8  +
pop eax  +
mov word_1009118 ax +
mov eax 4008h +
push 13h  +
mov word_1009120 ax +
pop eax  +
push 11h  +
mov word_1009128 ax +
pop eax  +
mov lpString2 offset aS +
mov dword_100911C offset aM +
mov dword_1009124 offset aD +
mov dword_100912C offset aB +
mov word_1009130 ax +
push esi  +
xor esi esi +
push lpString2[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_100271E  +
inc esi  +
cmp esi 4 +
jb loc_10026FD  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov ax word_1009118[esi*8] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
xor eax eax +
inc eax  +
jmp loc_1002719  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 30h +
jl loc_100276A  +
cmp eax 39h +
jle loc_1002765  +
cmp eax 40h +
jle loc_100276A  +
cmp eax 46h +
jle loc_1002760  +
lea ecx [eax-61h] +
cmp ecx 5 +
ja loc_100276A  +
add eax 0FFFFFFA9h +
jmp loc_100276C  +
add eax 0FFFFFFC9h +
jmp loc_100276C  +
add eax 0FFFFFFD0h +
jmp loc_100276C  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_10014A0[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_100279E  +
inc esi  +
cmp esi 0Eh +
jb loc_100277D  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax ds:dword_10014A4[esi*8] +
jmp loc_1002799  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
test eax eax +
jnz loc_10027CA  +
jmp loc_10027D8  +
cmp cx [ebp+arg_4] +
jz loc_10027D4  +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_10027BD  +
jmp loc_10027D6  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 9 +
jl loc_1002804  +
cmp eax 0Ah +
jle loc_10027FF  +
cmp eax 0Dh +
jz loc_10027FF  +
cmp eax 20h +
jnz loc_1002804  +
xor eax eax +
inc eax  +
jmp loc_1002806  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1002822  +
push dword ptr [esi]  +
call ds:CharNextW  +
mov [esi] eax +
mov ecx esi +
mov eax [esi] +
movzx eax word ptr [eax] +
push eax  +
call sub_10027E2  +
test eax eax +
jnz loc_1002816  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_100280F  +
mov eax [esi] +
movzx ecx word ptr [eax] +
xor edx edx +
cmp dx cx +
jnz loc_100285C  +
mov eax 80020009h +
jmp loc_100293C  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push 27h  +
pop edx  +
mov [ebp+var_4] edi +
cmp dx cx +
jnz loc_10028EA  +
mov ebx ds:CharNextW +
push eax  +
call ebx  +
mov [esi] eax +
jmp loc_10028CD  +
mov ecx esi +
call sub_100257E  +
test eax eax +
jnz loc_10028D4  +
mov eax [esi] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1002893  +
push eax  +
call ebx  +
mov [esi] eax +
mov eax [esi] +
push eax  +
mov [ebp+arg_0] eax +
call ebx  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax [ebp+arg_0] +
add edx 2000h +
sar eax 1 +
lea ecx [edi+eax*2+2] +
cmp ecx edx +
jnb loc_1002941  +
test eax eax +
jle loc_10028CB  +
mov ecx [ebp+arg_0] +
mov dx [ecx] +
mov [edi] dx +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
dec eax  +
jnz loc_10028BE  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1002879  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_1002941  +
xor eax eax +
mov [edi] ax +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
jmp loc_1002938  +
mov ebx [esi] +
movzx eax word ptr [ebx] +
push eax  +
mov ecx esi +
call sub_10027E2  +
test eax eax +
jnz loc_1002933  +
push ebx  +
call ds:CharNextW  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax ebx +
sar eax 1 +
lea ecx [edi+eax*2+2] +
add edx 2000h +
cmp ecx edx +
jnb loc_1002941  +
test eax eax +
jle loc_100292A  +
mov cx [ebx] +
mov [edi] cx +
inc edi  +
inc edi  +
inc ebx  +
inc ebx  +
dec eax  +
jnz loc_100291D  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_10028EA  +
xor eax eax +
mov [edi] ax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov eax 80020009h +
jmp loc_100293A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset off_10013DC +
push dword ptr [esi]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_100297A  +
add esi 4 +
cmp esi offset aRegdeletekeyw +
jl loc_1002958  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1002975  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+cSubKeys] +
push ecx  +
push eax  +
push eax  +
push eax  +
push [ebp+hKey]  +
mov [ebp+cSubKeys] eax +
call ds:RegQueryInfoKeyW  +
test eax eax +
jz loc_10029AD  +
xor eax eax +
jmp locret_10029B6  +
xor eax eax +
cmp eax [ebp+cSubKeys] +
sbb eax eax +
neg eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call __alloca_probe  +
mov eax dword_10090B0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 3Dh +
push edi  +
mov edi ecx +
jnz loc_1002A14  +
push esi  +
call sub_1002838  +
test eax eax +
jl loc_1002A16  +
mov ecx edi +
call sub_100280F  +
lea eax [ebp+var_2004] +
push eax  +
mov ecx edi +
call sub_1002838  +
test eax eax +
jl loc_1002A16  +
push esi  +
mov ecx edi +
call sub_1002838  +
test eax eax +
jl loc_1002A16  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10069D0  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1002A46  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_1002181  +
cmp dword ptr [esi] 0 +
jnz loc_1002A3A  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi ds:__imp_free +
test eax eax +
jz loc_1002A6B  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_1002A7A  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
and dword ptr [esi+8] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1002AA0  +
cmp eax [ecx+8] +
jge loc_1002AA0  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1002AD2  +
cmp eax [ecx+8] +
jge loc_1002AD2  +
mov ecx [ecx+4] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
lea eax [ecx+4] +
cmp byte ptr [eax+18h] 0 +
jz locret_1002AFD  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_1002B2C  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
mov eax [esi] +
push dword ptr [eax+edi*4]  +
call sub_100255E  +
test al al +
jnz loc_1002B35  +
inc edi  +
cmp edi [esi+8] +
jl loc_1002B13  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax edi +
jmp loc_1002B2F  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
test eax eax +
jnz loc_1002B5E  +
mov eax 80004003h +
jmp loc_1002B66  +
and dword ptr [eax] 0 +
mov eax 80040110h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002169  +
test eax eax +
jnz loc_1002BAF  +
push 8007000Eh  +
call loc_10021CE  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_10020D5  +
test eax eax +
jge loc_1002BD9  +
push eax  +
call loc_10021CE  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_10090B0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax ecx +
mov ecx [ebp+lpSubKey] +
push 2001Fh  +
push ecx  +
push dword ptr [eax]  +
xor esi esi +
mov [ebp+var_21C] ecx +
lea ecx [ebp+var_214] +
mov [ebp+var_218] eax +
mov [ebp+var_214] esi +
mov [ebp+var_210] esi +
mov [ebp+var_20C] esi +
call sub_100246C  +
mov edi eax +
cmp edi esi +
jz loc_1002C61  +
lea ecx [ebp+var_214] +
call sub_10023F9  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10069D0  +
leave   +
retn 4  +
mov edi ds:RegEnumKeyExW +
jmp loc_1002C7F  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_214] +
call sub_1002BEF  +
cmp eax esi +
jnz loc_1002CCA  +
lea eax [ebp+var_224] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_208] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+var_214]  +
mov [ebp+var_208] 100h +
call edi  +
test eax eax +
jz loc_1002C69  +
lea ecx [ebp+var_214] +
call sub_10023F9  +
push [ebp+var_21C]  +
mov ecx [ebp+var_218] +
call sub_1002373  +
lea ecx [ebp+var_214] +
mov esi eax +
call sub_10023F9  +
mov eax esi +
jmp loc_1002C51  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_1002D16  +
push edi  +
mov ecx esi +
call loc_1002A86  +
push dword ptr [eax]  +
call sub_100649A  +
pop ecx  +
push edi  +
mov ecx esi +
call loc_1002AB7  +
push dword ptr [eax]  +
call sub_100649A  +
inc edi  +
cmp edi [esi+8] +
pop ecx  +
jl loc_1002CF0  +
mov ecx esi +
call sub_1002A52  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
xor eax eax +
cmp [ebp+8] eax +
jz loc_1002D62  +
mov [ebp-10h] eax +
push dword ptr [ebp+8]  +
mov [ebp-4] eax +
call ds:lstrlenW  +
push eax  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_10025ED  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1002A33  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea ecx [esi+4] +
call sub_1002CE3  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_1002DCB  +
cmp dword ptr [eax+4] 0 +
jnz loc_1002DCB  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_1002DCB  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_1002DCB  +
xor eax eax +
inc eax  +
jmp loc_1002DCD  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_C] +
mov eax 80004003h +
test esi esi +
jz loc_1002E11  +
and dword ptr [esi] 0 +
cmp [ebp+arg_4] 0 +
jz loc_1002E04  +
push [ebp+arg_8]  +
call sub_1002DA1  +
test eax eax +
jnz loc_1002E04  +
mov eax 80040110h +
jmp loc_1002E11  +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call dword ptr [eax+24h]  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
mov ecx dword_1009100 +
mov eax [ecx] +
jz loc_1002E33  +
call dword ptr [eax+4]  +
jmp loc_1002E36  +
call dword ptr [eax+8]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push esi  +
mov esi ecx +
jz loc_1002E74  +
push edi  +
push offset loc_100230D  +
lea edi [esi-4] +
push dword ptr [edi]  +
push 0Ch  +
push esi  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
test [ebp+arg_0] 1 +
jz loc_1002E6F  +
push edi  +
call sub_100649A  +
pop ecx  +
mov eax edi +
pop edi  +
jmp loc_1002E8B  +
push dword ptr [esi]  +
call ds:SysFreeString  +
test [ebp+arg_0] 1 +
jz loc_1002E89  +
push esi  +
call sub_100649A  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002B03  +
cmp eax 0FFFFFFFFh +
jnz loc_1002EB8  +
xor eax eax +
jmp loc_1002EC2  +
push eax  +
mov ecx esi +
call loc_1002AB7  +
mov eax [eax] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx] +
shl edx 2 +
add eax edx +
jz loc_1002F0F  +
push esi  +
mov esi [ebp+arg_4] +
mov esi [esi] +
mov [eax] esi +
pop esi  +
mov eax [ecx+4] +
add eax edx +
jz loc_1002F1D  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 400h +
push esi  +
mov esi ecx +
jbe loc_1002F41  +
push [ebp+arg_0]  +
call sub_1002B91  +
jmp loc_1002F46  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 100h +
push esi  +
mov esi ecx +
jbe loc_1002F6D  +
push [ebp+arg_0]  +
call sub_1002B91  +
jmp loc_1002F72  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
lea ecx [eax+4] +
mov dword ptr [ecx] 0C0000001h +
mov dword ptr [eax] offset off_1001658 +
jmp loc_1002AE9  +
***
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
call sub_1002CE3  +
mov ecx [ebp-10h] +
call sub_1002A52  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100166C +
push esi  +
mov dword ptr [ebp-4] 1 +
call sub_1002D6F  +
lea eax [esi+10h] +
cmp byte ptr [eax+18h] 0 +
jz loc_1003018  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_1002FB5  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jz loc_100303E  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
inc eax  +
retn 4  +
***
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1_Locimp@locale@std@@MAE@XZ  +
test [ebp+arg_0] 1 +
jz loc_100307B  +
push esi  +
call sub_100649A  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+4] +
call sub_1002E9F  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_GS  +
mov edi [ebp+8] +
mov ebx [ebp+0Ch] +
mov esi ecx +
mov [ebp-64h] ebx +
test edi edi +
jz loc_10031ED  +
test ebx ebx +
jz loc_10031ED  +
and dword ptr [ebx] 0 +
push edi  +
call ds:lstrlenW  +
add eax eax +
push eax  +
lea ecx [ebp-60h] +
call sub_10025A3  +
xor ecx ecx +
mov [ebp-4] ecx +
cmp [ebp-58h] ecx +
jnz loc_1003113  +
push ecx  +
call ds:CoTaskMemFree  +
mov eax 8007000Eh +
jmp loc_10031F2  +
mov [esi] edi +
mov [ebp-54h] ecx +
cmp [edi] cx +
jz loc_10031BC  +
mov ebx ds:CharNextW +
mov eax [esi] +
cmp word ptr [eax] 25h +
jnz loc_1003198  +
push eax  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 25h +
jz loc_1003198  +
push 25h  +
push eax  +
call sub_10027AC  +
mov edi eax +
test edi edi +
jz loc_10031D2  +
mov ecx [esi] +
sub eax ecx +
sar eax 1 +
cmp eax 1Fh +
jg loc_10031DB  +
push eax  +
push ecx  +
lea eax [ebp-50h] +
push 20h  +
push eax  +
call sub_1005071  +
mov ecx [esi+4] +
add esp 10h +
lea eax [ebp-50h] +
push eax  +
call sub_1003087  +
test eax eax +
jz loc_10031D2  +
push eax  +
lea ecx [ebp-60h] +
call sub_1002D27  +
test eax eax +
jz loc_10031E4  +
cmp [esi] edi +
jz loc_10031A7  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp eax edi +
jnz loc_100318C  +
jmp loc_10031A7  +
push 1  +
push eax  +
lea ecx [ebp-60h] +
call sub_10025ED  +
test eax eax +
jz loc_10031E4  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 0 +
jnz loc_1003127  +
mov ebx [ebp-64h] +
xor ecx ecx +
mov eax [ebp-58h] +
mov [ebp-58h] ecx +
mov [ebx] eax +
push dword ptr [ebp-58h]  +
call ds:CoTaskMemFree  +
mov eax [ebp-54h] +
jmp loc_10031F2  +
mov dword ptr [ebp-54h] 80020009h +
jmp loc_10031C4  +
mov dword ptr [ebp-54h] 80004005h +
jmp loc_10031C4  +
mov dword ptr [ebp-54h] 8007000Eh +
jmp loc_10031C4  +
mov eax 80004003h +
call sub_1006B30  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi off_10090C0 +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_1003224  +
xor eax eax +
jmp loc_1003252  +
mov [esi] eax +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_1003220  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
mov [esi+4] eax +
push dword ptr [esi+8]  +
call sub_1002EF5  +
inc dword ptr [esi+8]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002BBB  +
push eax  +
mov ecx esi +
call sub_1002F26  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002BBB  +
push eax  +
mov ecx esi +
call sub_1002F52  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002BBB  +
push eax  +
mov ecx esi +
call sub_1002F52  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002F7E  +
test [ebp+arg_0] 1 +
jz loc_10032E3  +
push esi  +
call sub_100649A  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_1003338  +
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_1003338  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_1003338  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_1003338  +
xor eax eax +
inc eax  +
jmp loc_100333A  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_10033D8  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_10033D8  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jnz loc_100336A  +
mov eax 80004003h +
jmp loc_10033DD  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_1002DA1  +
test eax eax +
jz loc_10033CA  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_10033DD  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_10033A8  +
push [ebp+arg_8]  +
push eax  +
call sub_100330A  +
test eax eax +
jz loc_10033C7  +
cmp edi 1 +
jz loc_1003379  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_10033DD  +
cmp [ebp+arg_4] 0 +
jnz loc_10033C7  +
test eax eax +
jl loc_10033DD  +
add esi 0Ch +
mov edi [esi+8] +
test edi edi +
jnz loc_100338B  +
mov eax 80004002h +
jmp loc_10033DD  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1001698  +
push ecx  +
call sub_1003343  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_4]  +
call sub_10033E9  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1003466  +
test esi esi +
jz loc_1003466  +
push 1  +
mov ecx esi +
call sub_10032C9  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov [ebp-30h] ecx +
xor edi edi +
cmp [ebp+8] edi +
jz loc_10035A0  +
cmp [ebp+0Ch] edi +
jz loc_10035A0  +
push dword ptr [ebp+8]  +
mov [ebp-1Ch] edi +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
xor ecx ecx +
push 2  +
pop edx  +
mov [ebp-20h] eax +
mul  edx +
seto cl  +
mov [ebp-14h] edi +
mov [ebp-4] edi +
neg ecx  +
or ecx eax +
push ecx  +
call loc_100656B  +
pop ecx  +
mov [ebp-14h] eax +
jmp loc_10034D1  +
mov eax offset loc_10034CF +
retn   +
xor edi edi +
mov eax [ebp-14h] +
push 2  +
pop esi  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] esi +
mov [ebp-2Ch] eax +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
xor ecx ecx +
mov [ebp-24h] eax +
mov edx esi +
mul  edx +
seto cl  +
mov [ebp-18h] edi +
mov byte ptr [ebp-4] 3 +
neg ecx  +
or ecx eax +
push ecx  +
call loc_100656B  +
pop ecx  +
mov [ebp-18h] eax +
mov [ebp-4] esi +
jmp loc_100351F  +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_100351D +
retn   +
xor edi edi +
mov esi [ebp-18h] +
mov byte ptr [ebp-4] 5 +
mov [ebp-28h] esi +
cmp [ebp-14h] edi +
jz loc_1003569  +
cmp esi edi +
jz loc_1003569  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-14h]  +
call sub_100222E  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-24h]  +
push esi  +
call sub_100222E  +
mov ecx [ebp-30h] +
add esp 20h +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_10031FF  +
test eax eax +
jnz loc_1003572  +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_1003578  +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
push dword ptr [ebp-28h]  +
xor eax eax +
cmp [ebp-1Ch] edi +
mov byte ptr [ebp-4] 2 +
setnl al  +
mov esi eax +
call sub_100649A  +
push dword ptr [ebp-2Ch]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_100649A  +
pop ecx  +
pop ecx  +
mov eax esi +
jmp loc_10035A2  +
xor eax eax +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100360D  +
cmp dword ptr [ebp+10h] 0 +
jz loc_100360D  +
mov esi [ebp+8] +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
and dword ptr [ebp+8] 0 +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+4] +
call sub_1003473  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
lea ecx [ebp+8] +
call sub_1002A33  +
mov eax esi +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
jmp loc_1003612  +
mov eax 80070057h +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset loc_1007749  +
mov eax large fs:0 +
push eax  +
push ecx  +
mov eax 2120h +
call __alloca_probe  +
mov eax dword_10090B0 +
xor eax ebp +
mov [ebp+var_14] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_0] +
mov ebx [ebp+arg_4] +
mov [ebp+var_212C] eax +
lea eax [ebp+String] +
xor edi edi +
push eax  +
mov [ebp+var_2128] ecx +
mov [ebp+var_2124] esi +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_211C] edi +
call sub_1002838  +
cmp eax edi +
jl loc_1003951  +
lea eax [ebp+var_211C] +
push eax  +
lea eax [ebp+String] +
push eax  +
call sub_1002697  +
test eax eax +
jnz loc_10036B5  +
mov eax 80020009h +
jmp loc_1003951  +
mov ecx [ebp+var_2128] +
call sub_100280F  +
mov ecx [ebp+var_2128] +
lea eax [ebp+String] +
push eax  +
call sub_1002838  +
cmp eax edi +
jl loc_1003951  +
movzx eax word ptr [ebp+var_211C] +
sub eax 8 +
jz loc_100391B  +
sub eax 9 +
jz loc_1003813  +
dec eax  +
dec eax  +
jz loc_10037D7  +
sub eax 3FF5h +
jnz loc_100393A  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
inc eax  +
inc eax  +
mov [ebp+lpData] edi +
mov [ebp+var_4] edi +
push eax  +
lea ecx [ebp+lpData] +
mov byte ptr [ebp+var_4] 1 +
call sub_1003281  +
mov [ebp+var_4] edi +
jmp loc_100373F  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_100373D +
retn   +
xor edi edi +
mov esi [ebp+lpData] +
cmp esi edi +
jz loc_10037B2  +
cmp word ptr [ebp+String] 0 +
lea edi [ebp+String] +
jz loc_100378C  +
mov ebx ds:CharNextW +
push edi  +
call ebx  +
movzx ecx word ptr [edi] +
cmp cx 5Ch +
jnz loc_100377F  +
cmp word ptr [eax] 30h +
jnz loc_100377F  +
xor ecx ecx +
mov [esi] cx +
inc esi  +
push eax  +
inc esi  +
call ebx  +
mov edi eax +
jmp loc_1003786  +
mov [esi] cx +
inc esi  +
inc esi  +
inc edi  +
inc edi  +
cmp word ptr [edi] 0 +
jnz loc_100375F  +
mov ecx [ebp+var_2124] +
xor eax eax +
mov [esi] ax +
mov [esi+2] ax +
push [ebp+lpData]  +
push dword ptr [ebp+Data]  +
call sub_100250E  +
mov esi eax +
xor edi edi +
jmp loc_10037B5  +
push 0Eh  +
pop esi  +
lea eax [ebp+var_2114] +
cmp [ebp+lpData] eax +
jz loc_100392E  +
lea ecx [ebp+lpData] +
call sub_1002B3E  +
jmp loc_100392E  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
lea eax [ebp+String] +
push eax  +
mov [ebp+var_2124] edi +
call ds:VarUI4FromStr  +
push dword ptr [ebp+Data]  +
mov ecx esi +
push ebx  +
call sub_10024A8  +
lea ecx [ebp+var_2124] +
mov esi eax +
call sub_1002A33  +
jmp loc_100392E  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
mov [ebp+var_211C] eax +
test al 1 +
jz loc_1003834  +
mov eax 80004005h +
jmp loc_1003951  +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
mov [ebp+var_2130] ebx +
mov [ebp+lpData] edi +
mov [ebp+var_4] 3 +
push ebx  +
lea ecx [ebp+lpData] +
mov byte ptr [ebp+var_4] 4 +
call sub_10032A5  +
jmp loc_100386E  +
mov eax offset loc_1003866 +
retn   +
mov ebx [ebp-2130h] +
xor edi edi +
cmp [ebp+lpData] edi +
jnz loc_100388D  +
lea eax [ebp+var_2114] +
test eax eax +
jz loc_100382A  +
lea ecx [ebp+lpData] +
call sub_1002B3E  +
jmp loc_100382A  +
push ebx  +
push edi  +
push [ebp+lpData]  +
call memset  +
add esp 0Ch +
cmp [ebp+var_211C] edi +
jle loc_10038DF  +
mov ecx [ebp+lpData] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
movzx eax word ptr [ebp+edi*2+String] +
push eax  +
call sub_1002736  +
mov edx edi +
and edx 1 +
shl edx 2 +
push 4  +
pop ecx  +
sub ecx edx +
shl al cl +
or [esi] al +
inc edi  +
cmp edi [ebp+var_211C] +
jl loc_10038A5  +
xor edi edi +
mov eax [ebp+var_2124] +
mov eax [eax] +
push ebx  +
push [ebp+lpData]  +
push 3  +
push edi  +
push dword ptr [ebp+Data]  +
push eax  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp+var_2114] +
cmp [ebp+lpData] eax +
jz loc_100392E  +
lea ecx [ebp+lpData] +
call sub_1002B3E  +
jmp loc_100392E  +
push 1  +
lea eax [ebp+String] +
push eax  +
push ebx  +
mov ecx esi +
call sub_10024CB  +
mov esi eax +
cmp esi edi +
jz loc_100393A  +
push esi  +
call sub_10022EE  +
jmp loc_1003951  +
push [ebp+var_212C]  +
mov ecx [ebp+var_2128] +
call sub_1002838  +
cmp eax edi +
jl loc_1003951  +
xor eax eax +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_14] +
xor ecx ebp +
call sub_10069D0  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset loc_100778C  +
mov eax large fs:0 +
push eax  +
mov eax 225Ch +
call __alloca_probe  +
mov eax dword_10090B0 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_221C] ecx +
mov [ebp+var_2220] eax +
mov [ebp+var_222C] ebx +
mov [ebp+var_2228] ebx +
mov [ebp+var_2224] ebx +
mov eax [ebp+arg_C] +
push edi  +
mov [ebp+var_4] ebx +
mov [ebp+var_2264] eax +
call sub_1002838  +
mov esi eax +
cmp esi ebx +
jmp loc_1003EEF  +
mov esi ds:lstrcmpiW +
push offset String2  +
push edi  +
mov [ebp+var_2230] 1 +
call esi  +
mov ebx eax +
neg ebx  +
push offset aForceremove  +
sbb ebx ebx +
push edi  +
inc ebx  +
call esi  +
test eax eax +
jz loc_1003A1A  +
test ebx ebx +
jz loc_1003AD7  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1002838  +
mov esi eax +
test esi esi +
jl loc_1003F59  +
cmp [ebp+arg_8] 0 +
jz loc_1003AD7  +
xor esi esi +
push 5Ch  +
push edi  +
mov [ebp+var_223C] esi +
mov [ebp+var_2238] esi +
mov [ebp+var_2234] esi +
call sub_10027AC  +
test eax eax +
jnz loc_1003EFD  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100294D  +
test eax eax +
jz loc_1003A8C  +
mov eax [ebp+var_2220] +
push edi  +
lea ecx [ebp+var_223C] +
mov [ebp+var_223C] eax +
call sub_1002BEF  +
mov [ebp+var_223C] esi +
cmp ebx esi +
jz loc_1003ACC  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1002838  +
mov esi eax +
test esi esi +
jl loc_1003F0F  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_10029BF  +
lea ecx [ebp+var_223C] +
mov esi eax +
call sub_10023F9  +
test esi esi +
jl loc_1003F59  +
jmp loc_1003EAA  +
lea ecx [ebp+var_223C] +
call sub_10023F9  +
push offset aNoremove  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1003B03  +
mov ecx [ebp+var_221C] +
and [ebp+var_2230] eax +
push edi  +
call sub_1002838  +
mov esi eax +
test esi esi +
jl loc_1003F59  +
push offset aVal  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1003C28  +
mov ecx [ebp+var_221C] +
lea eax [ebp+ValueName] +
push eax  +
call sub_1002838  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
jl loc_1003F59  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1002838  +
mov esi eax +
cmp esi ebx +
jl loc_1003F59  +
cmp word ptr [edi] 3Dh +
jnz loc_1003F08  +
cmp [ebp+arg_8] ebx +
jz loc_1003BAE  +
mov [ebp+var_2250] ebx +
mov [ebp+var_224C] ebx +
mov eax [ebp+var_2220] +
mov ecx [ebp+var_221C] +
mov [ebp+var_2254] eax +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
lea eax [ebp+var_2254] +
push eax  +
mov byte ptr [ebp+var_4] 1 +
call sub_100361F  +
mov esi eax +
cmp esi ebx +
mov [ebp+var_2254] ebx +
lea ecx [ebp+var_2254] +
jl loc_1003F54  +
mov byte ptr [ebp+var_4] bl +
jmp loc_1003EA5  +
cmp [ebp+arg_C] ebx +
jnz loc_1003C17  +
cmp [ebp+var_2230] ebx +
jz loc_1003C17  +
push 20006h  +
push ebx  +
push [ebp+var_2220]  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] ebx +
mov [ebp+var_2244] ebx +
mov [ebp+var_2240] ebx +
call sub_100246C  +
cmp eax ebx +
jnz loc_1003F17  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax ebx +
jz loc_1003C0C  +
cmp eax 2 +
jnz loc_1003F17  +
lea ecx [ebp+hKey] +
call sub_10023F9  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_10029BF  +
jmp loc_10039DE  +
push 5Ch  +
push edi  +
call sub_10027AC  +
test eax eax +
jnz loc_1003F08  +
cmp [ebp+arg_8] eax +
jz loc_1003CD7  +
mov esi 2001Fh +
push esi  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_100246C  +
test eax eax +
jz loc_1003C9B  +
push 20019h  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_100246C  +
test eax eax +
jz loc_1003C9B  +
xor ebx ebx +
push ebx  +
push ebx  +
push esi  +
push ebx  +
push ebx  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1002417  +
mov esi eax +
cmp esi ebx +
jnz loc_1003F25  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1002838  +
mov esi eax +
test esi esi +
jl loc_1003F59  +
cmp word ptr [edi] 3Dh +
jnz loc_1003EAA  +
mov ecx [ebp+var_221C] +
push edi  +
push 0  +
lea eax [ebp+var_222C] +
push eax  +
call sub_100361F  +
mov esi eax +
jmp loc_1003ABF  +
cmp [ebp+arg_C] 0 +
jnz loc_1003CF8  +
push 20019h  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_100246C  +
mov ebx eax +
jmp loc_1003CFB  +
push 2  +
pop ebx  +
test ebx ebx +
jz loc_1003D06  +
mov [ebp+arg_C] 1 +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+SubKey] +
push 104h  +
push eax  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_10021ED  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1002838  +
mov esi eax +
test esi esi +
jl loc_1003F59  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_10029BF  +
mov esi eax +
test esi esi +
jl loc_1003F59  +
cmp word ptr [edi] 7Bh +
jnz loc_1003D9E  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_1003D9E  +
push [ebp+arg_C]  +
mov ecx [ebp+var_221C] +
push 0  +
push [ebp+var_222C]  +
push edi  +
call sub_1003972  +
mov esi eax +
test esi esi +
jge loc_1003D88  +
cmp [ebp+arg_C] 0 +
jz loc_1003F59  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1002838  +
mov esi eax +
test esi esi +
jl loc_1003F59  +
mov eax [ebp+var_2264] +
mov [ebp+arg_C] eax +
cmp ebx 2 +
jz loc_1003EF1  +
test ebx ebx +
jz loc_1003DC9  +
test eax eax +
jnz loc_1003EF1  +
push ebx  +
call sub_10022EE  +
mov esi eax +
jmp loc_1003F59  +
test eax eax +
jz loc_1003E20  +
push [ebp+var_222C]  +
mov ecx [ebp+var_221C] +
call sub_1002983  +
test eax eax +
jz loc_1003E20  +
mov ecx [ebp+var_221C] +
lea eax [ebp+SubKey] +
push eax  +
call sub_100294D  +
test eax eax +
jz loc_1003EF1  +
cmp [ebp+var_2230] 0 +
jz loc_1003EF1  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_222C] +
call sub_1002BEF  +
jmp loc_1003EF1  +
push [ebp+var_222C]  +
mov ecx [ebp+var_221C] +
call sub_1002983  +
lea ecx [ebp+var_222C] +
mov [ebp+var_2268] eax +
call sub_10023F9  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_1003F38  +
cmp [ebp+var_2230] eax +
jz loc_1003EF1  +
cmp [ebp+var_2268] eax +
jnz loc_1003EF1  +
mov [ebp+var_225C] eax +
mov [ebp+var_2258] eax +
mov eax [ebp+var_2220] +
mov [ebp+var_2260] eax +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2260] +
call sub_1002373  +
and [ebp+var_2260] 0 +
test eax eax +
jnz loc_1003F46  +
lea ecx [ebp+var_2260] +
call sub_10023F9  +
cmp [ebp+arg_8] 0 +
jz loc_1003EF1  +
cmp word ptr [edi] 7Bh +
jnz loc_1003EF1  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_1003EF1  +
mov ecx [ebp+var_221C] +
push 0  +
push [ebp+arg_8]  +
push [ebp+var_222C]  +
push edi  +
call sub_1003972  +
mov esi eax +
test esi esi +
jl loc_1003F59  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1002838  +
mov esi eax +
test esi esi +
jl loc_1003F59  +
cmp word ptr [edi] 7Dh +
jnz loc_10039E7  +
jmp loc_1003F59  +
lea ecx [ebp+var_223C] +
call sub_10023F9  +
mov esi 80020009h +
jmp loc_1003F59  +
lea ecx [ebp+var_223C] +
jmp loc_1003F54  +
push eax  +
call sub_10022EE  +
lea ecx [ebp+hKey] +
jmp loc_1003F52  +
lea ecx [ebp+var_222C] +
call sub_10023F9  +
push esi  +
call sub_10022EE  +
jmp loc_1003F66  +
lea ecx [ebp+var_222C] +
call sub_10023F9  +
push ebx  +
jmp loc_1003F31  +
push eax  +
call sub_10022EE  +
lea ecx [ebp+var_2260] +
mov esi eax +
call sub_10023F9  +
lea ecx [ebp+var_222C] +
call sub_10023F9  +
mov eax esi +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_10069D0  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov edx ecx +
push edi  +
mov dword ptr [edx] offset off_100166C +
and dword ptr [edx+4] 0 +
and dword ptr [edx+8] 0 +
and dword ptr [edx+0Ch] 0 +
lea esi [edx+10h] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_1003FD4  +
mov eax 80004003h +
jmp loc_1004050  +
mov edi 8007000Eh +
push 28h  +
mov [eax] esi +
mov [ebp-14h] edi +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_10064FC  +
pop ecx  +
cmp eax esi +
jz loc_1003FFC  +
push dword ptr [ebp+8]  +
mov ecx eax +
call near ptr dword_10032EC+3  +
jmp loc_1003FFE  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
jmp loc_1004016  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1004010 +
retn   +
mov edi [ebp-14h] +
mov esi [ebp-18h] +
test esi esi +
jz loc_100404E  +
mov eax [ebp+8] +
lea ecx [esi+8] +
mov [esi+24h] eax +
call sub_10022BB  +
mov edi eax +
test edi edi +
jl loc_1004045  +
xor edi edi +
test edi edi +
jnz loc_1004045  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_100404E  +
push 1  +
mov ecx esi +
call sub_10032C9  +
mov eax edi +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
mov dword ptr [esi+0Ch] 1 +
mov dword ptr [esi] offset off_10016E0 +
mov dword ptr [esi+4] offset off_10016C0 +
mov ecx dword_1009100 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_10040A1  +
xor eax eax +
jmp loc_10040C4  +
mov eax [ebp+arg_4] +
push edi  +
mov edi [esi] +
and dword ptr [esi] 0 +
test eax eax +
jz loc_10040B7  +
mov ecx [eax] +
push esi  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx]  +
test edi edi +
jz loc_10040C1  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax [esi] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_0] +
cmp eax edi +
jz loc_10040E9  +
push eax  +
call ds:SysFreeString  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
or dword ptr [eax+8] 0FFFFFFFFh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_100411A  +
mov eax 80004003h +
jmp loc_1004122  +
mov dword ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_1004142  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
mov dword ptr [esi] offset off_10016E0 +
lea edi [esi+4] +
mov dword ptr [edi] offset off_10016C0 +
mov dword ptr [esi+8] 0C0000001h +
mov ecx dword_1009100 +
mov eax [ecx] +
call dword ptr [eax+8]  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_1004183  +
push 1  +
push edi  +
call sub_100612F  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+8]  +
mov eax [eax+8] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+8]  +
push esi  +
mov esi [ecx+8] +
jnz loc_10041BE  +
test ecx ecx +
jz loc_10041BE  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+10h]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100414E  +
test byte ptr [ebp+8] 1 +
jz loc_10041E4  +
push esi  +
call sub_100649A  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset dword_1001754  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call ds:LeaveCriticalSection  +
mov byte ptr [esi+4] 0 +
pop esi  +
retn   +
***
sub dword ptr [esp+4] 4 +
jmp loc_10041A2  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100418B  +
***
call __EH_prolog3_catch  +
mov ebx ecx +
mov [ebp-18h] ebx +
mov edi [ebp+8] +
mov eax [edi] +
lea ecx [ebp-24h] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
xor ecx ecx +
cmp eax ecx +
jl loc_10043C4  +
mov eax [ebp-24h] +
movzx eax word ptr [eax+2Ch] +
mov esi eax +
mov [ebp-1Ch] ecx +
mov [ebx+18h] eax +
mov [ebx+14h] ecx +
cmp esi ecx +
jz loc_1004318  +
push 0Ch  +
pop edx  +
mul  edx +
mov [ebp-4] ecx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call loc_100656B  +
pop ecx  +
mov [ebp-20h] eax +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10042DF  +
push offset loc_100230D  +
push offset loc_10040F4  +
push esi  +
lea edi [eax+4] +
push 0Ch  +
push edi  +
mov [eax] esi +
call ??_L@YGXPAXIHP6EX0@Z1@Z  +
jmp loc_10042E1  +
xor edi edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-1Ch] edi +
jmp loc_10042F7  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10042F4 +
retn   +
mov ebx [ebp-18h] +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_1004313  +
mov eax [ebp+8] +
push dword ptr [ebp-24h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax 8007000Eh +
jmp loc_10043C6  +
mov edi [ebp+8] +
xor ecx ecx +
cmp [ebx+18h] ecx +
mov [ebp-18h] ecx +
jle loc_10043B5  +
mov esi [ebp-1Ch] +
add esi 8 +
jmp loc_100432E  +
xor ecx ecx +
mov [esi-4] ecx +
mov [esi] ecx +
mov eax [edi] +
lea ecx [ebp-20h] +
push ecx  +
push dword ptr [ebp-18h]  +
push edi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_10043A3  +
xor eax eax +
mov [ebp-14h] eax +
mov ecx [edi] +
push eax  +
push eax  +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov eax [ebp-20h] +
push dword ptr [eax]  +
mov dword ptr [ebp-4] 3 +
push edi  +
call dword ptr [ecx+30h]  +
test eax eax +
jl loc_100438D  +
mov eax [ebp-14h] +
and dword ptr [ebp-14h] 0 +
lea edi [esi-8] +
push eax  +
mov ecx edi +
call sub_10040CE  +
push dword ptr [edi]  +
call ds:SysStringLen  +
mov edi [ebp+8] +
mov [esi-4] eax +
mov eax [ebp-20h] +
mov eax [eax] +
mov [esi] eax +
push dword ptr [ebp-20h]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+50h]  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:SysFreeString  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
add esi 0Ch +
cmp eax [ebx+18h] +
jl loc_100432C  +
mov eax [ebp-1Ch] +
push dword ptr [ebp-24h]  +
mov [ebx+14h] eax +
mov eax [edi] +
push edi  +
call dword ptr [eax+4Ch]  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
test esi esi +
jz loc_1004403  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_10043ED  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [esi+14h] +
and dword ptr [esi+0Ch] 0 +
test ecx ecx +
jz loc_10043FF  +
push 3  +
call sub_1002E41  +
and dword ptr [esi+14h] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10016F4  +
push ecx  +
call sub_1003343  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_100440D  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx] +
push edi  +
test eax eax +
jnz loc_1004470  +
cmp [ebp+arg_0] eax +
jnz loc_10044C0  +
mov al 1 +
jmp loc_10044C2  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_10044C0  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
mov ecx [eax] +
push esi  +
lea edx [ebp+var_4] +
push edx  +
mov esi offset dword_1001764 +
push esi  +
push eax  +
call dword ptr [ecx]  +
mov eax [edi] +
lea ecx [ebp+var_8] +
push ecx  +
push esi  +
push edi  +
call dword ptr [eax]  +
mov eax [ebp+var_8] +
cmp [ebp+var_4] eax +
pop esi  +
setz byte ptr [ebp+arg_0+3]  +
test eax eax +
jz loc_10044AE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10044BB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al byte ptr [ebp+arg_0+3] +
jmp loc_10044C2  +
xor al al +
pop edi  +
leave   +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100442C  +
***
call __EH_prolog3_catch  +
mov edi [ebp+8] +
test edi edi +
jnz loc_10044F5  +
mov eax 80070057h +
jmp loc_100454E  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
push 0Ch  +
call loc_10064FC  +
pop ecx  +
mov esi eax +
jmp loc_1004515  +
mov eax offset loc_100450F +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jnz loc_1004522  +
mov dword ptr [ebp+8] 8007000Eh +
jmp loc_100454B  +
mov eax [ebp+0Ch] +
mov [esi] eax +
mov eax [ebp+10h] +
mov [esi+4] eax +
lea ebx [edi+0Ch] +
push ebx  +
call ds:EnterCriticalSection  +
mov eax [edi+8] +
and dword ptr [ebp+8] 0 +
mov [esi+8] eax +
push ebx  +
mov [edi+8] esi +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi]  +
mov edi ecx +
call sub_1004459  +
test al al +
jnz loc_1004582  +
mov esi [esi] +
push offset dword_1001774  +
push esi  +
push edi  +
call sub_1004090  +
jmp loc_1004584  +
mov eax [edi] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax ecx +
push [ebp+arg_0]  +
add ecx 4 +
neg eax  +
sbb eax eax +
and eax ecx +
push eax  +
call sub_10044DB  +
pop ebp  +
retn 8  +
***
call __EH_prolog3_GS  +
mov esi ecx +
xor ebx ebx +
cmp [esi+0Ch] ebx +
jz loc_10045D8  +
cmp [esi+14h] ebx +
jz loc_10045D8  +
xor eax eax +
jmp loc_10047C3  +
mov eax dword_1009100 +
add eax 10h +
mov [ebp-234h] eax +
push eax  +
mov [ebp-4] ebx +
call ds:EnterCriticalSection  +
mov byte ptr [ebp-230h] 1 +
mov dword ptr [ebp-21Ch] 80004005h +
cmp [esi+0Ch] ebx +
jnz loc_1004791  +
mov edi [esi+4] +
push edi  +
push offset unk_1009104  +
mov [ebp-22Ch] ebx +
call sub_100330A  +
test eax eax +
jz loc_100468B  +
mov eax 0FFFFh +
mov ecx eax +
cmp [esi+8] cx +
jnz loc_100468B  +
cmp [esi+0Ah] ax +
jnz loc_100468B  +
mov edi 104h +
push edi  +
lea eax [ebp-218h] +
push eax  +
push hModule  +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jz loc_1004797  +
cmp eax edi +
jz loc_1004797  +
lea eax [ebp-22Ch] +
push eax  +
lea eax [ebp-218h] +
push eax  +
mov [ebp-220h] ebx +
call ds:LoadTypeLib  +
lea ecx [ebp-220h] +
mov [ebp-21Ch] eax +
call sub_1002A33  +
jmp loc_10046AC  +
lea eax [ebp-22Ch] +
push eax  +
push dword ptr [ebp+8]  +
movzx eax word ptr [esi+0Ah] +
push eax  +
movzx eax word ptr [esi+8] +
push eax  +
push edi  +
call ds:LoadRegTypeLib  +
mov [ebp-21Ch] eax +
cmp [ebp-21Ch] ebx +
jl loc_1004797  +
mov [ebp-224h] ebx +
mov eax [ebp-22Ch] +
mov ecx [eax] +
lea edx [ebp-224h] +
push edx  +
push dword ptr [esi]  +
mov byte ptr [ebp-4] 1 +
push eax  +
call dword ptr [ecx+18h]  +
cmp eax ebx +
mov [ebp-21Ch] eax +
jl loc_1004770  +
push dword ptr [ebp-224h]  +
lea ecx [ebp-228h] +
call sub_100412B  +
mov [ebp-220h] ebx +
lea eax [ebp-220h] +
push eax  +
push dword ptr [ebp-224h]  +
mov byte ptr [ebp-4] 3 +
call sub_10041F0  +
test eax eax +
jl loc_1004728  +
lea eax [ebp-220h] +
push eax  +
lea ecx [ebp-228h] +
call sub_100455B  +
mov eax [ebp-228h] +
push esi  +
mov [esi+0Ch] eax +
mov ecx dword_1009100 +
push offset loc_10043D3  +
mov [ebp-228h] ebx +
call sub_100458F  +
mov eax [ebp-220h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_100475C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-228h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1004770  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-22Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-224h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1004797  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1004797  +
mov [ebp-21Ch] ebx +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_10047B1  +
cmp [esi+14h] ebx +
jnz loc_10047B1  +
push eax  +
mov ecx esi +
call sub_1004256  +
mov [ebp-21Ch] eax +
push dword ptr [ebp-234h]  +
call ds:LeaveCriticalSection  +
mov eax [ebp-21Ch] +
call sub_1006B30  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 200Ch +
call __alloca_probe  +
mov eax dword_10090B0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+pv] 0 +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+pv] +
push ecx  +
push eax  +
mov ecx esi +
call sub_10030BC  +
mov edi eax +
test edi edi +
jl loc_10048C7  +
mov eax [ebp+pv] +
xor ecx ecx +
mov [esi] eax +
cmp cx [eax] +
jz loc_10048B9  +
push ebx  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_1002838  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jl loc_10048B8  +
lea eax [ebp+String1] +
push eax  +
call sub_1002775  +
mov [ebp+var_200C] eax +
cmp eax ebx +
jz loc_1004901  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_1002838  +
mov edi eax +
cmp edi ebx +
jl loc_10048B8  +
push 7Bh  +
pop eax  +
cmp ax [ebp+String1] +
jnz loc_1004901  +
lea eax [ebp+String1] +
mov ecx esi +
cmp [ebp+arg_4] ebx +
jz loc_10048D7  +
mov ebx [esi] +
push 0  +
push [ebp+arg_4]  +
push [ebp+var_200C]  +
push eax  +
call sub_1003972  +
mov edi eax +
test edi edi +
jge loc_10048EB  +
push 0  +
push 0  +
push [ebp+var_200C]  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
mov [esi] ebx +
call sub_1003972  +
pop ebx  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10069D0  +
leave   +
retn 8  +
push ebx  +
push ebx  +
push [ebp+var_200C]  +
push eax  +
call sub_1003972  +
mov edi eax +
cmp edi ebx +
jl loc_10048B8  +
mov ecx esi +
call sub_100280F  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1004824  +
jmp loc_10048B8  +
mov edi 80020009h +
jmp loc_10048B8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
test edi edi +
jnz loc_1004924  +
mov eax 80004003h +
jmp loc_1004949  +
xor eax eax +
cmp [esi+0Ch] eax +
jnz loc_1004933  +
push [ebp+arg_0]  +
call sub_10045B4  +
mov ecx [esi+0Ch] +
mov [edi] ecx +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1004949  +
mov esi [esi+0Ch] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+0Ch] eax +
jz loc_1004965  +
cmp [ecx+14h] eax +
jnz loc_100496B  +
pop ebp  +
jmp sub_10045B4  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1004986  +
mov eax 8002000Bh +
jmp loc_1004991  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100490D  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push [ebp+arg_C]  +
mov ebx ecx +
call sub_1004954  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_1004A31  +
cmp dword ptr [ebx+14h] 0 +
push esi  +
push edi  +
jz loc_1004A1D  +
cmp [ebp+arg_8] 1 +
jnz loc_1004A1D  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
call ds:lstrlenW  +
mov edx [ebx+18h] +
dec edx  +
mov [ebp+var_8] eax +
js loc_1004A1D  +
mov ecx [ebx+14h] +
mov eax edx +
imul eax eax +
mov [ebp+var_C] ecx +
lea ecx [eax+ecx+4] +
mov [ebp+arg_C] eax +
mov [ebp+var_4] ecx +
mov eax [ebp+var_8] +
cmp eax [ecx] +
jnz loc_1004A0B  +
mov ecx [ebp+arg_C] +
mov eax [ebx+14h] +
mov esi [ebp+arg_4] +
mov edi [esi] +
add eax ecx +
mov ecx [eax+4] +
mov esi [eax] +
add ecx ecx +
xor eax eax +
cmps   +
jz loc_1004A36  +
mov ecx [ebp+var_4] +
sub [ebp+arg_C] 0Ch +
dec edx  +
sub ecx 0Ch +
mov [ebp+var_4] ecx +
test edx edx +
jge loc_10049EA  +
push [ebp+arg_10]  +
mov ebx [ebx+0Ch] +
push [ebp+arg_8]  +
mov eax [ebx] +
push [ebp+arg_4]  +
push ebx  +
call dword ptr [eax+28h]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
mov eax [ebp+var_C] +
imul edx edx +
mov eax [edx+eax+8] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
xor eax eax +
jmp loc_1004A2F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+14h]  +
mov esi ecx +
call sub_1004954  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1004A82  +
push dword ptr [ebp+28h]  +
mov eax [esi+0Ch] +
push dword ptr [ebp+24h]  +
mov ecx [eax] +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+2Ch]  +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx offset off_1009054 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1004974  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_1009054 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100499A  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_1009054 +
pop ebp  +
jmp loc_1004A4E  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_1004B05  +
mov eax 80004003h +
jmp loc_1004B67  +
push 10h  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_10064FC  +
pop ecx  +
cmp eax esi +
jz loc_1004B2C  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_100405D  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1004B3F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1004B3C +
retn   +
mov esi [ebp-18h] +
test esi esi +
jz loc_1004B64  +
push dword ptr [ebp+10h]  +
inc dword ptr [esi+8]  +
push dword ptr [ebp+0Ch]  +
dec dword ptr [esi+8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jz loc_1004B64  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+10h]  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3_catch_GS  +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
mov ebx [ebp+10h] +
xor esi esi +
mov [ebp-424h] esi +
mov [ebp-4] esi +
mov [ebp-42Ch] ecx +
mov [ebp-430h] esi +
mov [ebp-418h] esi +
push 2  +
push esi  +
push eax  +
mov byte ptr [ebp-4] 1 +
call ds:LoadLibraryExW  +
mov [ebp-41Ch] eax +
cmp eax esi +
jnz loc_1004BCD  +
call sub_10022D4  +
mov esi eax +
jmp loc_1004CD6  +
push ebx  +
push edi  +
push eax  +
call ds:FindResourceW  +
mov edi eax +
cmp edi esi +
jnz loc_1004BE6  +
call sub_10022D4  +
jmp loc_1004CC8  +
push edi  +
push dword ptr [ebp-41Ch]  +
call ds:LoadResource  +
mov [ebp-428h] eax +
cmp eax esi +
jz loc_1004BDC  +
push edi  +
push dword ptr [ebp-41Ch]  +
call ds:SizeofResource  +
mov edi eax +
lea eax [edi+1] +
mov [ebp-420h] edi +
cmp eax edi +
jnb loc_1004C4C  +
lea eax [ebp-414h] +
cmp [ebp-418h] eax +
jz loc_1004C32  +
lea ecx [ebp-418h] +
call sub_1002B3E  +
mov esi 8007000Eh +
lea ecx [ebp-424h] +
call sub_1002A33  +
mov eax esi +
call sub_1006B44  +
retn 10h  +
push eax  +
lea ecx [ebp-418h] +
mov byte ptr [ebp-4] 2 +
call sub_100325D  +
mov dword ptr [ebp-4] 1 +
jmp loc_1004C7A  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_1004C72 +
retn   +
mov edi [ebp-420h] +
xor esi esi +
cmp [ebp-418h] esi +
jnz loc_1004C89  +
mov esi 8007000Eh +
jmp loc_1004CCA  +
push edi  +
push dword ptr [ebp-418h]  +
push edi  +
push dword ptr [ebp-428h]  +
push esi  +
push 3  +
call ds:MultiByteToWideChar  +
cmp eax esi +
jz loc_1004BDC  +
mov edx [ebp-418h] +
push dword ptr [ebp+14h]  +
xor ecx ecx +
mov [edx+eax*2] cx +
push dword ptr [ebp-418h]  +
lea ecx [ebp-430h] +
call sub_10047D0  +
mov esi eax +
push dword ptr [ebp-41Ch]  +
call ds:FreeLibrary  +
lea eax [ebp-414h] +
cmp [ebp-418h] eax +
jz loc_1004C37  +
lea ecx [ebp-418h] +
call sub_1002B3E  +
jmp loc_1004C37  +
***
call __EH_prolog3  +
and dword ptr [ebp-10h] 0 +
movzx eax word ptr [ebp+10h] +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push 1  +
push dword ptr [ebp+14h]  +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_1004B74  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1002A33  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
call __EH_prolog3  +
xor eax eax +
mov [ebp-10h] eax +
mov ecx [ebp+8] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp-4] eax +
movzx eax word ptr [ebp+10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_1004B74  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1002A33  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A64h +
mov eax dword_10090B0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_0] +
lea ecx [ebp+var_A64] +
call sub_1003F87  +
lea ecx [ebp+var_A54] +
call sub_10022BB  +
mov ebx eax +
test ebx ebx +
jge loc_1004DD8  +
lea ecx [ebp+var_A64] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10069D0  +
leave   +
retn 10h  +
test esi esi +
jz loc_1004DF7  +
jmp loc_1004DF1  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp+var_A64] +
push eax  +
call sub_10035AF  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_1004DDE  +
mov eax [edi] +
lea ecx [ebp+var_A64] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp eax ebx +
jge loc_1004E1C  +
mov esi eax +
lea ecx [ebp+var_A64] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax esi +
jmp loc_1004DC7  +
mov edi hModule +
mov esi 104h +
push esi  +
lea eax [ebp+Filename] +
push eax  +
push edi  +
mov [ebp+var_A38] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_1004E54  +
call sub_10022D4  +
mov esi eax +
lea ecx [ebp+var_A38] +
call sub_1002A33  +
jmp loc_1004E0D  +
cmp eax esi +
jnz loc_1004E6A  +
lea ecx [ebp+var_A38] +
call sub_1002A33  +
mov esi 8007007Ah +
jmp loc_1004E0D  +
lea eax [ebp+Filename] +
push eax  +
push 208h  +
lea eax [ebp+var_A34] +
push eax  +
call sub_100231B  +
cmp edi ebx +
jz loc_1004E99  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_1004E99  +
lea eax [ebp+var_A34] +
jmp loc_1004EFE  +
push 22h  +
pop eax  +
mov [ebp+String] ax +
lea eax [ebp+var_A34] +
push eax  +
push 20Bh  +
lea eax [ebp-622h] +
push eax  +
call sub_1002199  +
test al al +
jnz loc_1004ED4  +
lea ecx [ebp+var_A38] +
call sub_1002A33  +
mov esi 80004005h +
jmp loc_1004E0D  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov [ebp+eax+String] cx +
xor ecx ecx +
mov [ebp+eax-622h] cx +
lea eax [ebp+String] +
push eax  +
push offset aModule  +
lea eax [ebp+var_A64] +
push eax  +
call sub_10035AF  +
mov esi eax +
cmp esi ebx +
jl loc_1004E47  +
lea eax [ebp+var_A34] +
push eax  +
push offset aModule_raw  +
lea eax [ebp+var_A64] +
push eax  +
call sub_10035AF  +
mov esi eax +
cmp esi ebx +
jl loc_1004E47  +
push offset aRegistry  +
push [ebp+arg_4]  +
lea eax [ebp+Filename] +
push eax  +
lea eax [ebp+var_A64] +
push eax  +
cmp [ebp+arg_8] ebx +
jz loc_1004F61  +
call sub_1004CFD  +
jmp loc_1004E45  +
call sub_1004D3F  +
jmp loc_1004E45  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
push 66h  +
push dword_1009100  +
call sub_1004D80  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_1004FAC  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 0  +
call sub_1004AE9  +
pop ebp  +
retn 0Ch  +
pop ebp  +
jmp loc_1002B4B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ds:GetMessageW +
push edi  +
xor edi edi +
jmp loc_1004FDF  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jg loc_1004FCB  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ds:WaitForSingleObject +
mov esi ecx +
xor ebx ebx +
push 0FFFFFFFFh  +
push dword ptr [esi+30h]  +
call edi  +
push dword ptr [esi+34h]  +
mov [esi+3Dh] bl +
push dword ptr [esi+30h]  +
call edi  +
test eax eax +
jz loc_100500B  +
cmp [esi+3Dh] bl +
jnz loc_1005004  +
cmp [esi+8] ebx +
jnz loc_1005004  +
call ds:CoSuspendClassObjects  +
cmp [esi+8] ebx +
jnz loc_1005004  +
push dword ptr [esi+30h]  +
call ds:CloseHandle  +
push ebx  +
push ebx  +
push 12h  +
push dword ptr [esi+2Ch]  +
call ds:PostThreadMessageW  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcscpy_s  +
add esp 0Ch +
push eax  +
call sub_10021ED  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_10021ED  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcscat_s  +
add esp 0Ch +
push eax  +
call sub_10021ED  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
test eax eax +
jz loc_10050D0  +
push eax  +
call ds:CoRevokeClassObject  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+pUnk] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
test eax eax +
jz loc_100512A  +
push edi  +
lea ecx [ebp+pUnk] +
push ecx  +
push offset dword_1001764  +
push dword ptr [esi+0Ch]  +
call eax  +
mov edi eax +
test edi edi +
jl loc_100511A  +
lea eax [esi+14h] +
push eax  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push [ebp+pUnk]  +
push dword ptr [esi]  +
call ds:CoRegisterClassObject  +
mov edi eax +
mov eax [ebp+pUnk] +
test eax eax +
jz loc_1005127  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1005149  +
push eax  +
call ds:CloseHandle  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1005192  +
push ebx  +
mov ebx [esi+8] +
cmp ebx [esi+0Ch] +
jnb loc_1005184  +
push edi  +
mov edi [ebx] +
test edi edi +
jz loc_100517B  +
mov eax [edi+10h] +
test eax eax +
jz loc_1005177  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [edi+10h] 0 +
add ebx 4 +
cmp ebx [esi+0Ch] +
jb loc_1005164  +
pop edi  +
lea eax [esi+10h] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
pop ebx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+8] +
jmp loc_10051B6  +
mov eax [esi] +
test eax eax +
jz loc_10051B3  +
push [ebp+arg_0]  +
call dword ptr [eax+20h]  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_10051A7  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1005202  +
mov esi ds:CharNextW +
cmp word ptr [edi] 0 +
jz loc_1005202  +
mov eax [ebp+lpsz] +
jmp loc_10051F5  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_10051F9  +
cmp [edi] cx +
jz loc_100520A  +
push eax  +
call esi  +
test eax eax +
jnz loc_10051E5  +
push edi  +
call esi  +
mov edi eax +
test edi edi +
jnz loc_10051DA  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
push edi  +
call esi  +
jmp loc_1005204  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
movzx eax word ptr [ebx] +
push esi  +
mov esi ds:CharUpperW +
push edi  +
push eax  +
call esi  +
movzx edi ax +
mov eax [ebp+lpsz] +
movzx eax word ptr [eax] +
push eax  +
call esi  +
movzx eax ax +
test di di +
jz loc_100528E  +
cmp di ax +
jnz loc_100527D  +
cmp di 20h +
jz loc_100527D  +
cmp di 9 +
jz loc_100527D  +
mov edi ds:CharNextW +
push ebx  +
call edi  +
push [ebp+lpsz]  +
mov ebx eax +
call edi  +
mov [ebp+lpsz] eax +
movzx eax word ptr [ebx] +
push eax  +
call esi  +
movzx edi ax +
mov eax [ebp+lpsz] +
movzx eax word ptr [eax] +
push eax  +
call esi  +
movzx eax ax +
test di di +
jnz loc_100523F  +
test di di +
jz loc_100528E  +
cmp di 20h +
jz loc_100528E  +
cmp di 9 +
jnz loc_100529F  +
test ax ax +
jz loc_10052AA  +
cmp ax 20h +
jz loc_10052AA  +
cmp ax 9 +
jz loc_10052AA  +
cmp di ax +
sbb eax eax +
and eax 0FFFFFFFEh +
inc eax  +
jmp loc_10052AC  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_10052CC  +
mov eax 80070057h +
jmp loc_10052F4  +
xor eax eax +
push esi  +
mov esi [edi+8] +
inc eax  +
jmp loc_10052EE  +
test eax eax +
jl loc_10052F3  +
mov ecx [esi] +
test ecx ecx +
jz loc_10052EB  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push ecx  +
call sub_10050D9  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_10052D5  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1005312  +
mov eax 80070057h +
jmp loc_1005333  +
push esi  +
mov esi [edi+8] +
xor eax eax +
jmp loc_100532D  +
test eax eax +
jnz loc_1005332  +
mov ecx [esi] +
test ecx ecx +
jz loc_100532A  +
push ecx  +
call sub_10050BA  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_100531A  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpArguments] +
push esi  +
test ebx ebx +
jnz loc_100535A  +
push ebx  +
push ebx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebx+8] +
test esi esi +
jz loc_1005378  +
push edi  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call sub_100649A  +
pop ecx  +
mov esi edi +
test edi edi +
jnz loc_1005362  +
pop edi  +
and dword ptr [ebx+8] 0 +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_1004FF5  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov ecx edx +
mov [esi+28h] eax +
call sub_100226B  +
test eax eax +
jge loc_10053D7  +
mov byte_10090F4 1 +
jmp loc_10053DE  +
mov dword ptr [esi+4] 24h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
cmp dword ptr [edi] 0 +
jz loc_1005420  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1005406  +
push edi  +
call sub_100533D  +
and dword ptr [esi+0Ch] 0 +
mov eax [esi+28h] +
test eax eax +
jz loc_1005413  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
add esi 10h +
push esi  +
call ds:DeleteCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 240h +
mov eax dword_10090B0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+hModule] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+lpString] ecx +
mov ecx [ebp+arg_C] +
xor edx edx +
mov [ebp+var_240] edi +
mov [ebp+pptlib] ecx +
cmp edi edx +
jz loc_10055F8  +
cmp ecx edx +
jz loc_10055F8  +
mov [edi] edx +
mov [ecx] edx +
mov esi 104h +
push esi  +
lea ecx [ebp+szFile] +
push ecx  +
push eax  +
mov [ebp+var_238] edx +
call ds:GetModuleFileNameW  +
mov ebx eax +
test ebx ebx +
jnz loc_10054AD  +
call sub_10022D4  +
mov esi eax +
lea ecx [ebp+var_238] +
call sub_1002A33  +
mov eax esi +
jmp loc_10055FD  +
cmp ebx esi +
jnz loc_10054B8  +
mov esi 8007007Ah +
jmp loc_100549B  +
xor esi esi +
lea eax [ebp+szFile] +
cmp [ebp+szFile] si +
jz loc_10054F6  +
movzx ecx [ebp+szFile] +
movzx ecx cx +
cmp ecx 2Eh +
jz loc_10054E1  +
cmp ecx 5Ch +
jnz loc_10054E3  +
xor esi esi +
jmp loc_10054E3  +
mov esi eax +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_10054D0  +
test esi esi +
jnz loc_10054FE  +
mov [ebp+var_230] eax +
jmp loc_1005504  +
mov [ebp+var_230] esi +
cmp [ebp+lpString] 0 +
jz loc_1005552  +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea ecx [eax+ebx] +
cmp ecx ebx +
jb loc_10055EE  +
cmp ecx eax +
jb loc_10055EE  +
mov eax 10Eh +
cmp ecx eax +
jnb loc_10055EE  +
push [ebp+lpString]  +
sub eax ebx +
push eax  +
lea eax [ebp+ebx*2+szFile] +
push eax  +
call sub_100504E  +
add esp 0Ch +
push [ebp+pptlib]  +
mov ebx ds:LoadTypeLib +
lea eax [ebp+szFile] +
push eax  +
call ebx  +
mov esi eax +
test esi esi +
jge loc_10055CD  +
mov eax [ebp+var_230] +
mov esi offset a_tlb +
lea edi [ebp+var_10] +
movs   +
lea ecx [ebp+szFile] +
sub eax ecx +
sar eax 1 +
movs   +
lea ecx [eax+5] +
movs   +
cmp ecx 104h +
ja loc_10055EE  +
lea ecx [ebp+var_10] +
push ecx  +
mov ecx 10Eh +
sub ecx eax +
push ecx  +
push [ebp+var_230]  +
call sub_100504E  +
add esp 0Ch +
push [ebp+pptlib]  +
lea eax [ebp+szFile] +
push eax  +
call ebx  +
mov esi eax +
test esi esi +
jl loc_100549B  +
mov edi [ebp+var_240] +
lea eax [ebp+szFile] +
push eax  +
call ds:SysAllocString  +
mov [edi] eax +
test eax eax +
jnz loc_100549B  +
mov esi 8007000Eh +
jmp loc_100549B  +
mov esi 80004005h +
jmp loc_100549B  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10069D0  +
leave   +
retn 10h  +
***
mov edi offset unk_1009104 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push offset unk_10091E0  +
mov esi ecx +
call sub_10052FE  +
cmp byte ptr [esi+3Ch] 0 +
mov edi eax +
jz loc_1005659  +
push dword ptr [esi+38h]  +
call ds:Sleep  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
mov edi ecx +
call ds:CreateEventW  +
mov [edi+30h] eax +
cmp eax esi +
jnz loc_1005684  +
xor eax eax +
jmp loc_10056AA  +
push ebx  +
lea eax [ebp+ThreadId] +
push eax  +
push esi  +
push edi  +
push offset StartAddress  +
push esi  +
push esi  +
call ds:CreateThread  +
mov ebx eax +
cmp ebx esi +
jnz loc_10056A7  +
push dword ptr [edi+30h]  +
call ds:CloseHandle  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+libID]  +
push [ebp+hModule]  +
call sub_1005428  +
mov esi eax +
test esi esi +
jl loc_1005717  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+libID] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jl loc_1005717  +
mov eax [ebp+libID] +
push dword ptr [eax+14h]  +
movzx ecx word ptr [eax+1Ah] +
push dword ptr [eax+10h]  +
push ecx  +
movzx ecx word ptr [eax+18h] +
push ecx  +
push eax  +
call ds:UnRegisterTypeLib  +
push [ebp+libID]  +
mov esi eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1005724  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+var_8]  +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_10090B0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hModule] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+ptlib] +
push ecx  +
lea ecx [ebp+szFullPath] +
push ecx  +
push edi  +
xor ebx ebx +
push eax  +
mov [ebp+szFullPath] ebx +
mov [ebp+ptlib] ebx +
call sub_1005428  +
mov esi eax +
cmp esi ebx +
jl loc_100589B  +
mov eax [ebp+ptlib] +
lea edx [ebp+var_218] +
push edx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
mov [ebp+var_218] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_100587A  +
cmp [ebp+var_218] ebx +
jz loc_100587A  +
push [ebp+szFullPath]  +
call ds:SysStringLen  +
push eax  +
push [ebp+szFullPath]  +
lea eax [ebp+sz] +
push 104h  +
push eax  +
call sub_1005071  +
xor eax eax +
add esp 10h +
mov [ebp+var_6] ax +
cmp edi ebx +
jz loc_100581F  +
mov esi ds:lstrlenW +
lea eax [ebp+sz] +
push eax  +
call esi  +
push edi  +
mov ebx eax +
call esi  +
mov ecx eax +
mov edx ebx +
sub edx ecx +
lea eax [ebp+edx*2+sz] +
mov esi eax +
xor ebx ebx +
cmps   +
jnz loc_100581D  +
cmp edx 104h +
jnb loc_100581D  +
xor ecx ecx +
mov [eax] cx +
xor ebx ebx +
lea edi [ebp+sz] +
mov esi edi +
cmp [ebp+sz] bx +
jz loc_1005855  +
push esi  +
call ds:CharNextW  +
movzx ecx word ptr [esi] +
cmp cx 5Ch +
jz loc_100584C  +
cmp cx 2Fh +
jz loc_100584C  +
cmp cx 3Ah +
jnz loc_100584E  +
mov edi eax +
mov esi eax +
cmp [eax] bx +
jnz loc_1005830  +
lea eax [ebp+sz] +
sub edi eax +
sar edi 1 +
cmp edi 104h +
jnb loc_1005871  +
xor eax eax +
mov [ebp+edi*2+sz] ax +
lea eax [ebp+sz] +
push eax  +
jmp loc_100587B  +
push ebx  +
push [ebp+szFullPath]  +
push [ebp+ptlib]  +
call ds:RegisterTypeLib  +
push [ebp+var_218]  +
mov esi eax +
call ds:SysFreeString  +
mov eax [ebp+ptlib] +
cmp eax ebx +
jz loc_10058AB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+szFullPath]  +
call ds:SysFreeString  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10069D0  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1BCh +
mov eax dword_10090B0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
mov [ebp+rguid] eax +
mov [ebp+ppv] ebx +
cmp esi ebx +
jnz loc_1005905  +
xor eax eax +
jmp loc_1005B47  +
push offset dword_1001A48  +
push eax  +
call sub_100330A  +
test eax eax +
jnz loc_10058FE  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 1  +
push ebx  +
push offset rclsid  +
call ds:CoCreateInstance  +
test eax eax +
jge loc_1005944  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_10058FE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10058FE  +
mov eax esi +
push edi  +
mov [ebp+cSubKeys] eax +
cmp [esi] ebx +
jnz loc_1005B5D  +
cmp [ebp+arg_8] ebx +
jnz loc_1005B34  +
push 40h  +
lea eax [ebp+sz] +
push eax  +
push [ebp+rguid]  +
call ds:StringFromGUID2  +
push offset aClsid  +
mov esi 80h +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
mov [ebp+var_1BC] ebx +
call wcscpy_s  +
add esp 0Ch +
push eax  +
call sub_10021ED  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call sub_1005097  +
push offset aRequiredCatego  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call wcscat_s  +
add esp 18h +
push eax  +
call sub_10021ED  +
mov edi 20019h +
push edi  +
lea ecx [ebp+SubKey] +
mov eax 80000000h +
push ecx  +
push eax  +
lea ecx [ebp+hKey] +
mov [ebp+var_1B8] eax +
mov [ebp+var_1B4] ebx +
mov [ebp+var_1B0] ebx +
mov [ebp+hKey] ebx +
mov [ebp+var_1A8] ebx +
mov [ebp+var_1A4] ebx +
mov [ebp+cSubKeys] ebx +
call sub_100246C  +
test eax eax +
jnz loc_1005A64  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cSubKeys] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
lea ecx [ebp+hKey] +
mov [ebp+rguid] eax +
call sub_10023F9  +
cmp [ebp+rguid] ebx +
jnz loc_1005A64  +
cmp [ebp+cSubKeys] ebx +
jnz loc_1005A64  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_1B8] +
call sub_1002373  +
push offset aClsid  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call wcscpy_s  +
add esp 0Ch +
push eax  +
call sub_10021ED  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call sub_1005097  +
push offset aImplementedCat  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call wcscat_s  +
add esp 18h +
push eax  +
call sub_10021ED  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+var_1B8]  +
lea ecx [ebp+hKey] +
call sub_100246C  +
test eax eax +
jnz loc_1005B13  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cSubKeys] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
lea ecx [ebp+hKey] +
mov esi eax +
call sub_10023F9  +
cmp esi ebx +
jnz loc_1005B13  +
cmp [ebp+cSubKeys] ebx +
jnz loc_1005B13  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_1B8] +
call sub_1002373  +
lea ecx [ebp+hKey] +
call sub_10023F9  +
lea ecx [ebp+var_1B8] +
call sub_10023F9  +
lea ecx [ebp+var_1BC] +
call sub_1002A33  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1005B44  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10069D0  +
leave   +
retn 0Ch  +
mov eax [ebp+cSubKeys] +
mov esi [eax+4] +
lea edi [ebp+var_194] +
movs   +
movs   +
lea edx [ebp+var_194] +
movs   +
push edx  +
push 1  +
push [ebp+rguid]  +
movs   +
cmp [ebp+arg_8] ebx +
jz loc_1005BAE  +
cmp dword ptr [eax] 1 +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
jnz loc_1005B91  +
call dword ptr [ecx+14h]  +
jmp loc_1005B94  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jge loc_1005BC4  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1005BAA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_1005B46  +
cmp dword ptr [eax] 1 +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
jnz loc_1005BC1  +
call dword ptr [ecx+18h]  +
jmp loc_1005BC4  +
call dword ptr [ecx+20h]  +
add [ebp+cSubKeys] 8 +
mov eax [ebp+cSubKeys] +
cmp [eax] ebx +
jnz loc_1005B57  +
jmp loc_1005955  +
***
and dword ptr [esi+30h] 0 +
push 0  +
push 0  +
mov [esi+2Ch] eax +
mov dword ptr [esi+34h] 1388h +
mov dword ptr [esi+38h] 3E8h +
mov byte ptr [esi+3Ch] 1 +
mov byte ptr [esi+3Eh] 0 +
call ds:CoInitializeEx  +
test eax eax +
jge loc_1005C39  +
cmp eax 80010106h +
jnz loc_1005C30  +
push offset aMscoree_dll  +
call ds:GetModuleHandleW  +
test eax eax +
jnz loc_1005C3D  +
mov byte_10090F4 1 +
jmp loc_1005C49  +
mov byte ptr [esi+3Eh] 1 +
push 1  +
mov ecx offset unk_10091E0 +
call sub_1005199  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov esi offset unk_10091E0 +
push 0  +
mov ecx esi +
call sub_1005199  +
mov ecx edi +
call sub_10053E8  +
mov ecx esi +
call sub_1005150  +
cmp byte ptr [edi+3Eh] 0 +
jz loc_1005C80  +
call ds:CoUninitialize  +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_10053E8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 5  +
push 4  +
mov ebx offset unk_10091E0 +
push ebx  +
mov esi ecx +
call sub_10052B8  +
mov edi eax +
test edi edi +
jl loc_1005D13  +
jnz loc_1005D0D  +
cmp byte ptr [esi+3Ch] 0 +
jz loc_1005CF9  +
mov ecx esi +
call sub_1005663  +
mov [ebp+hHandle] eax +
test eax eax +
jnz loc_1005CCB  +
mov edi 80004005h +
jmp loc_1005D05  +
call ds:CoResumeClassObjects  +
mov edi eax +
test edi edi +
jge loc_1005CEF  +
push dword ptr [esi+30h]  +
call ds:SetEvent  +
mov eax [esi+34h] +
add eax eax +
push eax  +
push [ebp+hHandle]  +
call ds:WaitForSingleObject  +
lea ecx [ebp+hHandle] +
call sub_1005134  +
jmp loc_1005D01  +
call ds:CoResumeClassObjects  +
mov edi eax +
test edi edi +
jge loc_1005D11  +
push ebx  +
call sub_10052FE  +
jmp loc_1005D11  +
mov byte ptr [esi+3Ch] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1005D35  +
mov eax 80070057h +
jmp loc_1005DA8  +
mov edx [esi+8] +
xor eax eax +
push ebx  +
push edi  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jnb loc_1005D96  +
mov ebx [edx] +
test ebx ebx +
jz loc_1005D84  +
cmp [ebp+arg_8] 0 +
jz loc_1005D64  +
mov edi [ebx] +
mov esi [ebp+arg_8] +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
mov esi [ebp+arg_0] +
jnz loc_1005D84  +
push 1  +
call dword ptr [ebx+4]  +
test eax eax +
jl loc_1005DA6  +
push 1  +
call dword ptr [ebx+1Ch]  +
push eax  +
push dword ptr [ebx]  +
call sub_10058CF  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_1005DA6  +
mov edx [ebp+var_4] +
add edx 4 +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jb loc_1005D47  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_1005DA6  +
cmp [ebp+arg_4] 0 +
jz loc_1005DA6  +
push 0  +
push dword ptr [esi+4]  +
call sub_1005739  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1005DC8  +
mov eax 80070057h +
jmp loc_1005E3B  +
mov edx [esi+8] +
xor eax eax +
push ebx  +
push edi  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jnb loc_1005E29  +
mov ebx [edx] +
test ebx ebx +
jz loc_1005E17  +
cmp [ebp+arg_8] 0 +
jz loc_1005DF7  +
mov edi [ebx] +
mov esi [ebp+arg_8] +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
mov esi [ebp+arg_0] +
jnz loc_1005E17  +
push 0  +
call dword ptr [ebx+1Ch]  +
push eax  +
push dword ptr [ebx]  +
call sub_10058CF  +
test eax eax +
jl loc_1005E39  +
push 0  +
call dword ptr [ebx+4]  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_1005E39  +
mov edx [ebp+var_4] +
add edx 4 +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jb loc_1005DDA  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_1005E39  +
cmp [ebp+arg_4] 0 +
jz loc_1005E39  +
push 0  +
push dword ptr [esi+4]  +
call sub_10056B3  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax] +
push offset aCf254b0019864b  +
push offset aAppid  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 4  +
***
add ecx 8 +
push ecx  +
call ds:InterlockedIncrement  +
retn   +
***
mov eax [ecx+8] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_1005E96  +
mov eax 80004003h +
jmp loc_1005EC7  +
push esi  +
lea esi [ecx+28h] +
cmp [esi] edi +
jnz loc_1005EB8  +
push esi  +
push offset dword_1001924  +
push 1  +
push edi  +
push offset dword_10013AC  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_1005EC4  +
mov eax [esi] +
mov [ebx] eax +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
xor eax eax +
cmp edi eax +
jnz loc_1005F0B  +
cmp [esi+3Ch] al +
jz loc_1005EFE  +
push dword ptr [esi+30h]  +
mov byte ptr [esi+3Dh] 1 +
call ds:SetEvent  +
jmp loc_1005F0B  +
push eax  +
push eax  +
push 12h  +
push dword ptr [esi+2Ch]  +
call ds:PostThreadMessageW  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005C52  +
test byte ptr [ebp+8] 1 +
jz loc_1005F2F  +
push esi  +
call sub_100649A  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov edi ecx +
call sub_1005C8E  +
mov esi eax +
test esi esi +
jnz loc_1005F5B  +
mov ecx edi +
call sub_1004FB7  +
test esi esi +
jl loc_1005F66  +
mov ecx edi +
call sub_1005638  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset unk_10091E0  +
call sub_1005D1F  +
test eax eax +
jl loc_1005F9E  +
mov ecx dword_10090F8 +
test ecx ecx +
jz loc_1005F9E  +
push hModule  +
call ecx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10090FC +
test eax eax +
jz loc_1005FBB  +
call eax  +
test eax eax +
jl loc_1005FCB  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset unk_10091E0  +
call sub_1005DB2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_10] offset aAppid +
push 65h  +
push dword_1009100  +
mov [ebp+var_C] offset aCf254b0019864b +
call sub_1004D80  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_10090B0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
and dword ptr [ebx] 0 +
push esi  +
push edi  +
mov [ebp+var_10] ecx +
mov esi offset asc_1001960 +
lea edi [ebp+sz] +
movs   +
lea ecx [ebp+sz] +
push ecx  +
push eax  +
movs   +
call sub_10051C6  +
xor edi edi +
jmp loc_1006074  +
push offset sz  +
push esi  +
call sub_1005214  +
test eax eax +
jz loc_100608D  +
push offset aRegserver  +
push esi  +
call sub_1005214  +
test eax eax +
jz loc_10060AA  +
lea eax [ebp+sz] +
push eax  +
push esi  +
call sub_10051C6  +
mov esi eax +
cmp esi edi +
jnz loc_100604C  +
mov al 1 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10069D0  +
leave   +
retn 8  +
mov ecx [ebp+var_10] +
push edi  +
push 1  +
call sub_1005FA7  +
cmp eax edi +
mov [ebx] eax +
jl loc_10060A6  +
push edi  +
call sub_1005FD7  +
mov [ebx] eax +
xor al al +
jmp loc_100607C  +
push 1  +
call sub_1005FD7  +
cmp eax edi +
mov [ebx] eax +
jl loc_10060A6  +
mov ecx [ebp+var_10] +
push edi  +
push 1  +
call sub_1005F73  +
jmp loc_10060A4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp byte_10090F4 0 +
push esi  +
mov esi ecx +
jz loc_10060E0  +
or eax 0FFFFFFFFh +
jmp loc_100610A  +
and [ebp+var_4] 0 +
call ds:GetCommandLineW  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
mov ecx esi +
call sub_1006012  +
cmp al 1 +
jnz loc_1006107  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1005F3B  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset dword_1009138 +
call sub_10060C9  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_0] +
xor eax eax +
mov [edx+8] ecx +
test ecx ecx +
jnz loc_1006156  +
call sub_100750C  +
test eax eax +
jle loc_1006156  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push dword ptr [ebp+0Ch]  +
push off_1009070[esi]  +
call sub_100330A  +
test eax eax +
jnz loc_1006187  +
add esi 4 +
cmp esi 4 +
jb loc_1006167  +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
xor eax eax +
jmp loc_1006182  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10061A5  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_10061C7  +
mov eax 80070057h +
jmp loc_10061D8  +
cmp dword ptr [eax] 2Ch +
jnz loc_10061C0  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_100226B  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_10061FB  +
cmp eax [ecx+4] +
jge loc_10061FB  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_100624A  +
mov eax 80070057h +
jmp loc_1006291  +
mov eax [esi] +
cmp eax edi +
jz loc_100628F  +
cmp eax 2Ch +
jnz loc_1006243  +
cmp [esi+24h] edi +
jle loc_100627A  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_10061E1  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_100625E  +
pop ebx  +
lea ecx [esi+20h] +
call sub_1006190  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_1002254  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
lea ecx [esi+30h] +
pop esi  +
jmp sub_1006190  +
***
mov byte_10090F4 1 +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_10090B0 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi ecx +
call sub_100629C  +
mov eax 1000000h +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp-98h] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call memset  +
add esp 0Ch +
lea eax [ebp-98h] +
push eax  +
mov dword ptr [ebp-98h] 94h +
call ds:GetVersionExA  +
cmp dword ptr [ebp-88h] 2 +
jnz loc_100637A  +
cmp dword ptr [ebp-94h] 5 +
jb loc_100639B  +
jmp loc_1006397  +
cmp dword ptr [ebp-88h] 1 +
jnz loc_100639B  +
cmp dword ptr [ebp-94h] 4 +
ja loc_1006397  +
jnz loc_100639B  +
cmp dword ptr [ebp-90h] 0 +
jbe loc_100639B  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_1001978 +
call sub_100226B  +
test eax eax +
jge loc_10063BC  +
mov byte_10090F4 1 +
mov ecx [ebp-4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_10069D0  +
leave   +
retn   +
***
mov dword ptr [esi+4] 1000000h +
mov dword ptr [esi+8] offset off_1008020 +
mov dword ptr [esi+0Ch] offset dword_1008024 +
call sub_100226B  +
test eax eax +
jge loc_100642B  +
mov byte_10090F4 1 +
jmp loc_1006431  +
mov dword ptr [esi] 28h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0exception@@QAE@XZ  +
cmp dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_10019EC +
jnz loc_100645F  +
cmp dword ptr [esi+8] 0 +
jnz loc_100645F  +
mov eax off_1009074 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
mov dword ptr [ecx] offset off_10019EC +
jmp ??1exception@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ??0exception@@QAE@ABV0@@Z  +
mov dword ptr [esi] offset off_10019EC +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:__imp_free  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ecx  +
lea ecx [ebp-0Ch] +
call sub_1006478  +
push offset dword_1007EC0  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10019EC +
call ??1exception@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10064F0  +
push esi  +
call sub_100649A  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:malloc +
jmp loc_100651A  +
push dword ptr [ebp+8]  +
call _callnewh  +
pop ecx  +
test eax eax +
jz loc_1006527  +
push dword ptr [ebp+8]  +
call esi  +
pop ecx  +
test eax eax +
jz loc_100650D  +
pop esi  +
leave   +
retn   +
***
test byte ptr dword_100924C 1 +
mov esi offset dword_1009240 +
jnz loc_100654E  +
or dword_100924C 1 +
mov ecx esi +
call sub_100643B  +
push offset loc_10079C9  +
call sub_1006D95  +
pop ecx  +
push esi  +
lea ecx [ebp-0Ch] +
call sub_1006478  +
push offset dword_1007EC0  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:malloc +
jmp loc_1006589  +
push dword ptr [ebp+8]  +
call _callnewh  +
pop ecx  +
test eax eax +
jz loc_1006596  +
push dword ptr [ebp+8]  +
call esi  +
pop ecx  +
test eax eax +
jz loc_100657C  +
pop esi  +
leave   +
retn   +
***
test byte ptr dword_100925C 1 +
mov esi offset dword_1009250 +
jnz loc_10065BD  +
or dword_100925C 1 +
mov ecx esi +
call sub_100643B  +
push offset loc_10079E2  +
call sub_1006D95  +
pop ecx  +
push esi  +
lea ecx [ebp-0Ch] +
call sub_1006478  +
push offset dword_1007EC0  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10065F6  +
test eax eax +
jnz loc_10065FB  +
mov ecx [esi] +
test ecx ecx +
jz loc_10065F3  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10065E7  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1009284 +
push offset dword_1009274  +
push dword_1009280  +
mov dword_1009274 eax +
push offset unk_1009264  +
push offset unk_1009268  +
push offset unk_1009260  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1009270 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_100669E  +
cmp eax esi +
jnz loc_1006691  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_10066A1  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1006678  +
xor esi esi +
inc esi  +
mov eax dword_10095C0 +
cmp eax esi +
jnz loc_10066B4  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10066E3  +
mov eax dword_10095C0 +
test eax eax +
jnz loc_10066DD  +
mov dword_10095C0 esi +
push offset dword_1001240  +
push offset dword_1001234  +
call sub_10065DA  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10066E3  +
jmp loc_1006807  +
mov dword_100927C esi +
mov eax dword_10095C0 +
cmp eax esi +
jnz loc_1006707  +
push offset dword_1001230  +
push offset dword_1001218  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10095C0 2 +
cmp [ebp+var_20] ebx +
jnz loc_1006714  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10095D0 ebx +
jz loc_1006735  +
push offset dword_10095D0  +
call sub_1006F79  +
pop ecx  +
test eax eax +
jz loc_1006735  +
push ebx  +
push 2  +
push ebx  +
call dword_10095D0  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_1006807  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_100675A  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_100676F  +
cmp cx 20h +
ja loc_100676F  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_100675A  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_100677B  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_100677E  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_1009278 eax +
cmp dword_100926C ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_10067B0  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_1006744  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_1009278 eax +
xor ebx ebx +
cmp dword_100926C ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_100927C ebx +
jnz loc_10067F2  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1009278 +
jmp loc_1006813  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1006830  +
xor eax eax +
jmp loc_100687D  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100682C  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100686A  +
cmp ecx 20Bh +
jnz loc_100682C  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100682C  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1006878  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100682C  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100926C eax +
call sub_1007087  +
push eax  +
call ds:__set_app_type  +
or dword_10095C8 0FFFFFFFFh +
or dword_10095CC 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100928C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1009288 +
mov [eax] ecx +
call sub_1007019  +
cmp dword_10090D8 0 +
jnz loc_10068D6  +
push offset sub_1007019  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1007001  +
xor eax eax +
retn   +
***
call sub_10070C6  +
jmp ___tmainCRTStartup  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1006930  +
push esi  +
call sub_100649A  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10069D0  +
push offset dword_10090B0  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
cmp ecx dword_10090B0 +
jnz loc_10069DB  +
retn 0  +
jmp loc_1007167  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
jmp ds:__CxxFrameHandler3  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10090B0 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10090B0 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10090B0 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10090B0 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_10069D0  +
jmp __EH_epilog3  +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_10069D0  +
jmp __EH_epilog3  +
***
jmp ds:_purecall  +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
dec [ebp+arg_8]  +
js loc_1006BB3  +
mov ecx [ebp+arg_0] +
sub ecx [ebp+arg_4] +
mov [ebp+arg_0] ecx +
call [ebp+arg_C]  +
jmp loc_1006B73  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_1006BAA  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
call ds:?terminate@@YAXXZ  +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 10h  +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-1Ch] 0 +
jnz $LN9  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1006B63  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp ecx esi +
jbe loc_1006C66  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax [ebp+arg_8] +
jnb loc_1006C66  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 0Ch +
call sub_1007304  +
add esp 14h +
xor eax eax +
jmp loc_1006C75  +
imul ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_0]  +
call realloc  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-20h] 0 +
jnz $LN10_0  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1006B63  +
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1006D0B  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
push offset loc_10069A6  +
push large dword ptr fs:0  +
mov eax [esp+10h] +
mov [esp+10h] ebp +
lea ebp [esp+10h] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_10090B0 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_10069D0  +
jmp __SEH_epilog4  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
jmp ds:?what@exception@@UBEPBDXZ  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1006EBA  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1006EBA  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1006EB4  +
cmp eax 19930521h +
jz loc_1006EB4  +
cmp eax 19930522h +
jz loc_1006EB4  +
cmp eax 1994000h +
jnz loc_1006EBA  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1006E7C+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1006F06  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1006F02  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1006F6D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1006F65  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1006F6F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1006F55  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1006EF0  +
pop ecx  +
test eax eax +
jz loc_1006FD6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1006F30  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006FD6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1006FDF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100707A  +
cmp ecx 0FFFFFFFFh +
jz loc_100707A  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1007073  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1007073  +
cmp edx 10000000h +
jnb loc_1007073  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1007073  +
jmp loc_100706E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10070BC  +
push eax  +
call sub_1007021  +
test eax eax +
jz loc_10070BC  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10070B1  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10070BC  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_10090B0 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_10070F8  +
test eax ebx +
jz loc_10070F8  +
not eax  +
mov dword_10090B4 eax +
jmp loc_1007153  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100713F  +
test dword_10090B0 ebx +
jnz loc_1007144  +
mov esi 0BB40E64Fh +
mov dword_10090B0 esi +
not esi  +
mov dword_10090B4 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1009390 eax +
mov dword_100938C ecx +
mov dword_1009388 edx +
mov dword_1009384 ebx +
mov dword_1009380 esi +
mov dword_100937C edi +
mov word_10093A8 ss +
mov word_100939C cs +
mov word_1009378 ds +
mov word_1009374 es +
mov word_1009370 fs +
mov word_100936C gs +
pushf   +
pop dword_10093A0  +
mov eax [ebp+0] +
mov dword_1009394 eax +
mov eax [ebp+4] +
mov dword_1009398 eax +
lea eax [ebp+8] +
mov dword_10093A4 eax +
mov eax [ebp-320h] +
mov dword_10092E0 10001h +
mov eax dword_1009398 +
mov dword_100929C eax +
mov dword_1009290 0C0000409h +
mov dword_1009294 1 +
mov eax dword_10090B0 +
mov [ebp-328h] eax +
mov eax dword_10090B4 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_10090B0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10069D0  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1007259  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
xor esi esi +
push 1  +
push esi  +
push esi  +
mov [ebp+var_4] esi +
call ds:OpenSCManagerW  +
mov [ebp+hSCObject] eax +
cmp eax esi +
jnz loc_1007370  +
call ds:GetLastError  +
mov ebx eax +
jmp loc_1007404  +
push edi  +
push 14h  +
push offset ServiceName  +
push eax  +
call ds:OpenServiceW  +
mov edi eax +
cmp edi esi +
jnz loc_100738D  +
call ds:GetLastError  +
jmp loc_10073E6  +
push esi  +
push esi  +
push edi  +
call ds:StartServiceW  +
mov esi ds:GetLastError +
test eax eax +
jnz loc_10073AC  +
call esi  +
mov ebx eax +
cmp ebx 420h +
jnz loc_10073F1  +
mov ebx 5B4h +
lea eax [ebp+ServiceStatus] +
push eax  +
push edi  +
call ds:QueryServiceStatus  +
test eax eax +
jz loc_10073E4  +
cmp [ebp+ServiceStatus.dwCurrentState] 4 +
jz loc_10073EA  +
cmp [ebp+ServiceStatus.dwCurrentState] 1 +
jz loc_10073EE  +
push 1F4h  +
call ds:Sleep  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_0] +
jbe loc_10073B1  +
jmp loc_10073F1  +
call esi  +
mov ebx eax +
jmp loc_10073F1  +
xor ebx ebx +
jmp loc_10073F1  +
mov ebx [ebp+ServiceStatus.dwWin32ExitCode] +
mov esi ds:CloseServiceHandle +
test edi edi +
jz loc_10073FE  +
push edi  +
call esi  +
push [ebp+hSCObject]  +
call esi  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
push 6  +
pop ecx  +
xor esi esi +
xor eax eax +
mov [ebp+SecurityQOS.Version] esi +
lea edi [ebp+SecurityQOS.Capabilities] +
stos   +
lea eax [ebp+String] +
push eax  +
push esi  +
push esi  +
push esi  +
push offset Protseq  +
push [ebp+ObjUuid]  +
mov [ebp+String] esi +
mov [ebp+Binding] esi +
xor edi edi +
call ds:RpcStringBindingComposeW  +
mov ebx eax +
cmp ebx esi +
jnz loc_10074E8  +
lea eax [ebp+Binding] +
push eax  +
push [ebp+String]  +
call ds:RpcBindingFromStringBindingW  +
mov ebx eax +
lea eax [ebp+String] +
push eax  +
call ds:RpcStringFreeW  +
cmp ebx esi +
jnz loc_10074E8  +
push 44h  +
pop eax  +
push eax  +
push 40h  +
mov [ebp+ObjUuid] eax +
call ds:LocalAlloc  +
mov edi eax +
cmp edi esi +
jnz loc_1007489  +
push 8  +
pop ebx  +
jmp loc_10074E8  +
lea eax [ebp+ObjUuid] +
push eax  +
push edi  +
push esi  +
push 16h  +
call ds:CreateWellKnownSid  +
test eax eax +
jnz loc_10074A5  +
call ds:GetLastError  +
mov ebx eax +
jmp loc_10074E8  +
push 3  +
pop eax  +
mov [ebp+SecurityQOS.Version] eax +
mov [ebp+SecurityQOS.ImpersonationType] eax +
lea eax [ebp+SecurityQOS] +
push eax  +
push esi  +
xor ecx ecx +
cmp [ebp+arg_4] esi +
push esi  +
push 0Ah  +
setnz cl  +
push 6  +
push esi  +
push [ebp+Binding]  +
mov [ebp+SecurityQOS.Capabilities] 1 +
mov [ebp+var_C] edi +
mov [ebp+SecurityQOS.IdentityTracking] ecx +
call ds:RpcBindingSetAuthInfoExW  +
mov ebx eax +
cmp ebx esi +
jnz loc_10074E8  +
mov eax [ebp+Binding] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov [ebp+Binding] esi +
push edi  +
call ds:LocalFree  +
cmp [ebp+Binding] esi +
jz loc_10074FE  +
lea eax [ebp+Binding] +
push eax  +
call ds:RpcBindingFree  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
call __SEH_prolog4  +
xor esi esi +
mov [ebp+var_20] esi +
mov [ebp+Binding] esi +
cmp dword_10095AC esi +
jnz loc_100755B  +
lea eax [ebp+Binding] +
push eax  +
push esi  +
push offset ObjUuid  +
call sub_1007411  +
cmp eax esi +
jnz loc_100759C  +
push esi  +
push [ebp+Binding]  +
push offset dword_10095AC  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_100755B  +
lea eax [ebp+Binding] +
push eax  +
call ds:RpcBindingFree  +
mov [ebp+Binding] esi +
mov [ebp+ms_exc.disabled] esi +
push dword_10095AC  +
call sub_10075DE  +
mov [ebp+var_28] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1007598  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-24h] eax +
push eax  +
call I_RpcExceptionFilter  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov [ebp-28h] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor esi esi +
cmp eax esi +
jz loc_10075D3  +
cmp eax 6BAh +
jz loc_10075B8  +
cmp eax 6ACh +
jz loc_10075B8  +
cmp eax 6B5h +
jz loc_10075B8  +
cmp eax 6D9h +
jnz loc_10075D3  +
cmp [ebp+var_20] 1 +
ja loc_10075CE  +
inc [ebp+var_20]  +
push 0Ah  +
call sub_1007343  +
cmp eax esi +
jnz loc_100759C  +
jmp loc_100755B  +
mov eax 425h +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
push offset pFormat  +
push offset pStubDescriptor  +
call NdrClientCall2  +
add esp 0Ch +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 40h  +
call ds:LocalAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:LocalFree  +
***
mov eax 548BFFFFh +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10069D0  +
mov eax offset dword_1007A54 +
jmp loc_1006A20  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10069D0  +
mov eax offset dword_1007A88 +
jmp loc_1006A20  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
cwde   +
xor ecx eax +
call sub_10069D0  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10069D0  +
mov eax offset dword_1007AB4 +
jmp loc_1006A20  +
***
mov bh 0FFh +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
int 3  +
xor ecx eax +
call sub_10069D0  +
mov eax offset dword_1007AF8 +
jmp loc_1006A20  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_10069D0  +
mov eax offset dword_1007B7C +
jmp loc_1006A20  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2134h] +
xor ecx eax +
call sub_10069D0  +
mov ecx [edx-8] +
xor ecx eax +
call sub_10069D0  +
mov eax offset dword_1007BC0 +
jmp loc_1006A20  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-226Ch] +
xor ecx eax +
call sub_10069D0  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10069D0  +
mov eax offset dword_1007C4C +
jmp loc_1006A20  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_10069D0  +
mov eax offset dword_1007CA4 +
jmp loc_1006A20  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_10069D0  +
mov eax offset dword_1007D0C +
jmp loc_1006A20  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_10069D0  +
mov eax offset dword_1007D6C +
jmp loc_1006A20  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-238h] +
xor ecx eax +
call sub_10069D0  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10069D0  +
mov eax offset dword_1007DB0 +
jmp loc_1006A20  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_10069D0  +
mov eax offset dword_1007E08 +
jmp loc_1006A20  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-434h] +
xor ecx eax +
call sub_10069D0  +
mov ecx [edx-8] +
xor ecx eax +
call sub_10069D0  +
mov eax offset dword_1007E70 +
jmp loc_1006A20  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10069D0  +
mov eax offset dword_1007E9C +
jmp loc_1006A20  +
***
jmp fword ptr (byte_1008BFF-1008C72h)[eax]  +
***
add [ecx] al +
mov dword_1009138 offset off_1001900 +
call sub_1006D95  +
pop ecx  +
retn   +
***
call sub_1006D95  +
pop ecx  +
retn   +
***
jmp fword ptr (byte_1008BFF-1008C54h)[eax]  +
***
push offset loc_10079BA  +
call sub_1006D95  +
pop ecx  +
retn   +
***
jmp sub_1005C52  +
***
mov ecx offset unk_10091E0 +
jmp sub_1005150  +
***
mov dword_1009240 offset off_10019EC +
mov ecx offset dword_1009240 +
jmp ??1exception@@UAE@XZ  +
***
mov dword_1009250 offset off_10019EC +
mov ecx offset dword_1009250 +
jmp ??1exception@@UAE@XZ  +
***
arpl [ebp+73h] sp +
jnb $+2  +
iret   +
***
