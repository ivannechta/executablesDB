mov ecx offset unk_43F690 +
mov ecx offset CriticalSection +
call sub_4011F2  +
test eax eax +
jns loc_401049  +
and dword_43F650 0 +
mov byte_442381 1 +
push offset loc_42EDE3  +
call sub_42BBA7  +
pop ecx  +
retn   +
***
mov ecx offset unk_447F10 +
mov dword_447F30 eax +
mov dword_447F34 eax +
mov dword_447F38 eax +
retn   +
***
mov ecx offset stru_447F40 +
mov ecx offset stru_447F58 +
call sub_414E2E  +
push offset sub_42EE4B  +
call sub_42BBA7  +
pop ecx  +
retn   +
***
and dword_43F6E4 0C0000000h +
xor eax eax +
push edi  +
push 8  +
pop ecx  +
mov edi offset unk_43F6E8 +
stos   +
push offset nullsub_4  +
call sub_42BBA7  +
pop ecx  +
pop edi  +
retn   +
***
mov eax dword_43F70C +
push edi  +
and eax 0C0000020h +
mov edi offset unk_43F710 +
or eax 20h +
mov dword_43F70C eax +
xor eax eax +
push 8  +
pop ecx  +
stos   +
push offset nullsub_5  +
call sub_42BBA7  +
pop ecx  +
pop edi  +
retn   +
***
push offset sub_42EE59  +
call sub_42BBA7  +
pop ecx  +
retn   +
***
push offset sub_42EE64  +
call sub_42BBA7  +
pop ecx  +
retn   +
***
push offset sub_42EE6F  +
call sub_42BBA7  +
pop ecx  +
retn   +
***
push offset sub_42EE79  +
call sub_42BBA7  +
pop ecx  +
retn   +
***
push offset sub_42EE83  +
call sub_42BBA7  +
pop ecx  +
retn   +
***
push offset sub_42EE8D  +
call sub_42BBA7  +
pop ecx  +
retn   +
***
push offset loc_42EEC3  +
call sub_42BBA7  +
pop ecx  +
retn   +
***
mov ecx offset unk_441F78 +
push 1  +
push esi  +
push esi  +
push ecx  +
call ds:InitializeCriticalSectionEx  +
test eax eax +
jnz loc_401216  +
call ds:GetLastError  +
movzx esi ax +
or esi 80070000h +
test eax eax +
cmovle esi eax +
mov eax esi +
pop esi  +
retn   +
***
push dword ptr [ecx]  +
call ds:SysFreeString  +
retn   +
***
mov esi ecx +
test ebx ebx +
push edi  +
test ecx ecx +
push ebx  +
call sub_42CCE5  +
push ecx  +
sub esp 20Ch +
sub esp 20Ch +
call sub_42CCE5  +
xor edi edi +
mov [ebp-14h] edi +
mov [ebp-4] edi +
mov [ebp-20h] edi +
mov [ebp-1Ch] edi +
mov [ebp-18h] edi +
mov [ebp-10h] edi +
xor eax eax +
mov byte ptr [ebp-4] 4 +
mov word_447BA8 ax +
lea eax [ebp-1Ch] +
push eax  +
mov dword_447DB0 edi +
call sub_401A3B  +
mov eax [ebp-1Ch] +
test eax eax +
jz loc_4019EA  +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+68h]  +
mov eax [ebp-10h] +
test eax eax +
jz loc_4019ED  +
mov eax [ebp-14h] +
mov ecx dword_447B9C +
cmp eax ecx +
jz loc_401971  +
mov esi eax +
test ecx ecx +
jz loc_40195F  +
mov eax [ecx] +
lea edx [ebp-14h] +
push edx  +
push offset unk_42F328  +
push ecx  +
call dword ptr [eax]  +
test eax eax +
js loc_40195F  +
mov eax [ebp-14h] +
jmp loc_401964  +
mov eax edi +
mov [ebp-14h] eax +
test esi esi +
jz loc_401971  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax [ebp-14h] +
test eax eax +
jz loc_401997  +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov eax [ebp-10h] +
test eax eax +
jz loc_4019ED  +
push 104h  +
mov edx offset word_447BA8 +
mov ecx eax +
call sub_401C41  +
lea eax [ebp-20h] +
push eax  +
call sub_401B30  +
mov eax [ebp-20h] +
test eax eax +
jz loc_4019EA  +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+54h]  +
mov eax [ebp-18h] +
test eax eax +
jz loc_4019EA  +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
mov eax [ebp-10h] +
test eax eax +
jz loc_4019ED  +
xor esi esi +
mov edx offset aText +
inc esi  +
mov ecx eax +
push esi  +
call sub_4013E2  +
mov ecx dword_447DB0 +
test eax eax +
cmovz ecx esi +
mov dword_447DB0 ecx +
mov eax [ebp-10h] +
push eax  +
call ds:SysFreeString  +
mov eax [ebp-18h] +
test eax eax +
jz loc_401A01  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
test eax eax +
jz loc_401A0E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-20h] +
test eax eax +
jz loc_401A1B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
test eax eax +
jz loc_401A28  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_42CCB9  +
retn   +
***
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
cmp [ebp+arg_0] 0 +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_8] +
push esi  +
mov eax [ebp+arg_0] +
mov ecx [ecx+10h] +
mov eax [ecx+10h] +
mov eax 80004001h +
mov eax 80004001h +
mov eax [ebp+arg_8] +
cmp [ebp+arg_14] 0 +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call mso40uiWin32Client_4571  +
push eax  +
mov ecx esi +
call mso40uiWin32Client_123  +
pop esi  +
pop ebp  +
retn 4  +
***
push ecx  +
push ecx  +
push esi  +
test [ebp+arg_0] 1 +
sub esp 0Ch +
push ecx  +
mov esi edx +
or dword_447EE8 0FFFFFFFFh +
xor eax eax +
xorps xmm0 xmm0 +
mov word_447DC1 ax +
mov byte_447DC3 al +
mov dword_447DC4 eax +
mov byte_447DD0 al +
mov dword_447DD4 eax +
mov word_447DD8 ax +
mov byte_447DDA al +
mov dword_447DDC eax +
mov dword_447E10 eax +
mov dword_447E14 eax +
mov dword_447EEC eax +
mov dword_447EF0 eax +
mov dword_447EF8 eax +
mov hhk eax +
mov dword_447EE4 eax +
mov byte_447DC0 al +
mov eax offset byte_447DC0 +
movaps oword ptr dword_447DE0 xmm0 +
movaps oword ptr dword_447DF0 xmm0 +
movaps oword ptr dword_447E00 xmm0 +
mov off_447E18 offset off_42FBE4 +
mov off_447E1C offset off_42FBD4 +
mov off_447E20 offset off_42FBAC +
retn   +
***
push ecx  +
push 0FFFFFFFFh  +
call sub_42CCE5  +
sub esp 1Ch +
sub esp 3Ch +
mov ecx dword_447EEC +
call sub_402491  +
sub esp 1Ch +
sub esp 804h +
sub esp 20h +
push ecx  +
sub esp 3F0h +
cmp [ebp+arg_0] 0 +
mov eax [ebp+arg_4] +
cmp byte ptr word_447DC1 0 +
mov edx [esi+2Ch] +
push ecx  +
push ecx  +
call sub_42CCE5  +
call sub_42CD18  +
sub esp 14h +
push ecx  +
and esp 0FFFFFFF8h +
mov eax hIcon +
sub esp 44h +
sub esp 14h +
sub esp 2Ch +
push esi  +
sub esp 0Ch +
push ecx  +
call sub_42CCE5  +
sub esp 20h +
sub esp 28h +
mov ecx [ebp+arg_0] +
call sub_42CCE5  +
and esp 0FFFFFFF8h +
mov ecx offset byte_447DC0 +
mov eax dword_447E0C +
mov ecx [ebp+arg_4] +
push esi  +
mov ecx [esi+4Ch] +
push esi  +
push ecx  +
cmp esi 1 +
mov ecx [ecx+134h] +
call sub_42CCE5  +
mov eax dword_447E0C +
test eax eax +
jz loc_403B4E  +
lea ecx [eax+50h] +
cmp dword ptr [ecx] 0 +
jz loc_403B4E  +
push esi  +
call sub_410ABE  +
push eax  +
mov ecx [eax] +
call dword ptr [ecx+38h]  +
mov esi eax +
test esi esi +
jz loc_403B4D  +
mov eax [ebp+hWnd] +
jmp loc_403B3D  +
cmp eax esi +
jz loc_403B43  +
push eax  +
call GetParent  +
test eax eax +
jnz loc_403B32  +
jmp loc_403B4D  +
mov ecx offset byte_447DC0 +
call sub_403933  +
pop esi  +
pop ebp  +
retn 8  +
***
push [ebp+arg_8]  +
push esi  +
mov ecx [ebp+arg_0] +
mov ecx dword_44237C +
push 0FFFFFFFFh  +
push offset loc_42D303  +
mov eax large fs:0 +
push eax  +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov eax dword_43F508 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov edi ecx +
mov [ebp+var_14] edi +
test edi edi +
jnz loc_403CBE  +
mov eax 80004003h +
jmp loc_403CFA  +
xor esi esi +
push 54h  +
pop ecx  +
mov [edi] esi +
mov [ebp+var_18] esi +
mov [ebp+var_4] esi +
call sub_412F45  +
test eax eax +
jz loc_403CEC  +
push ecx  +
mov ecx eax +
call sub_403D84  +
mov esi eax +
jmp loc_403CEC  +
mov eax offset loc_403CE6 +
retn   +
mov edi [ebp-14h] +
mov esi [ebp-18h] +
xor eax eax +
mov [edi] esi +
test esi esi +
mov ecx 8007000Eh +
cmovz eax ecx +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov eax [ecx] +
and dword ptr [ecx] 0 +
test eax eax +
jz locret_403D1B  +
mov ecx eax +
jmp mso40uiWin32Client_804  +
retn   +
***
sub esp 0Ch +
mov eax DefWindowProcW +
sub esp 24h +
mov eax [ecx] +
push ecx  +
push ebx  +
mov eax ecx +
mov [ebp+var_4] eax +
push esi  +
push edi  +
test eax eax +
jz loc_403FC2  +
test edx edx +
jz loc_403FC2  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jnz loc_403F3B  +
mov eax 80004003h +
jmp loc_403FC7  +
mov edi [ebp+arg_0] +
xor ecx ecx +
cmp [edi] ecx +
jnz loc_403F6C  +
cmp [edi+4] ecx +
jnz loc_403F6C  +
cmp dword ptr [edi+8] 0C0h +
jnz loc_403F6C  +
cmp dword ptr [edi+0Ch] 46000000h +
jnz loc_403F6C  +
mov esi [edx+4] +
add esi eax +
push esi  +
mov eax [esi] +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_403FC7  +
lea esi [edx+8] +
cmp [esi] ecx +
jz loc_403FB3  +
mov ecx [esi-8] +
mov [ebp+arg_4] ecx +
test ecx ecx +
jz loc_403F8B  +
mov edx edi +
call sub_403EE9  +
test eax eax +
jz loc_403FA8  +
mov eax [ebp+var_4] +
mov ecx [esi] +
cmp ecx 1 +
jz loc_403FBD  +
push dword ptr [esi-4]  +
push ebx  +
push edi  +
push eax  +
call ecx  +
test eax eax +
jz loc_403F68  +
cmp [ebp+arg_4] 0 +
jz loc_403FA8  +
test eax eax +
js loc_403FB8  +
mov eax [ebp+var_4] +
add esi 0Ch +
cmp dword ptr [esi] 0 +
jnz loc_403F73  +
mov eax 80004002h +
and dword ptr [ebx] 0 +
jmp loc_403FC7  +
mov esi [esi-4] +
jmp loc_403F5E  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_42CCE5  +
xor eax eax +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_430080 +
call sub_404257  +
test [ebp+arg_0] 1 +
jz loc_4042F3  +
push esi  +
call Mso20Win32Client_3788  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebx  +
push 0FFFFFFFFh  +
mov eax 80004005h +
push 0FFFFFFFFh  +
push esi  +
cmp dword ptr [esi] 0 +
mov edi ecx +
mov dword ptr [ecx] offset off_42FC84 +
mov edx [ebp+arg_0] +
cmp [ebp+arg_0] 0 +
push edi  +
mov edi ecx +
jnz loc_4046DA  +
xor edx edx +
jmp loc_4046F3  +
mov edx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
lea ecx [edx+2] +
mov ax [edx] +
add edx 2 +
cmp ax bx +
jnz loc_4046E3  +
sub edx ecx +
sar edx 1 +
pop ebx  +
lea eax ds:2[edx*2] +
mov ecx edi +
push eax  +
push [ebp+arg_0]  +
mov edx 416h +
call sub_4049E9  +
neg eax  +
pop ecx  +
pop ecx  +
sbb al al +
inc al  +
pop edi  +
pop ebp  +
retn 4  +
***
push esi  +
call sub_42CCE5  +
call sub_42CCE5  +
pop ecx  +
retn   +
***
push esi  +
call ds:GetLastError  +
movzx ecx ax +
or ecx 80070000h +
test eax eax +
cmovle ecx eax +
mov eax ecx +
retn   +
***
push ebx  +
call sub_42CCE5  +
push esi  +
push esi  +
call sub_42CD18  +
push edi  +
push esi  +
push esi  +
push ecx  +
mov edx [ebp+lpData] +
push ebx  +
mov ebx ecx +
test edx edx +
jnz loc_404EC2  +
push 0Dh  +
pop eax  +
jmp loc_404F06  +
push esi  +
xor eax eax +
push edi  +
mov [ebp+lpData] eax +
mov esi eax +
mov edi edx +
mov ecx edi +
lea eax [ecx+2] +
mov [ebp+var_4] eax +
mov ax [ecx] +
add ecx 2 +
cmp ax word ptr [ebp+lpData] +
jnz loc_404ED5  +
sub ecx [ebp+var_4] +
sar ecx 1 +
inc ecx  +
lea edi [edi+ecx*2] +
lea esi [esi+ecx*2] +
cmp ecx 1 +
jnz loc_404ECD  +
push esi  +
push edx  +
push 7  +
xor eax eax +
push eax  +
push [ebp+lpValueName]  +
push dword ptr [ebx]  +
call RegSetValueExW  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
movzx ecx cx +
mov eax ecx +
cmp ecx 61h +
ja loc_404F79  +
jz loc_404F95  +
cmp ecx 38h +
ja loc_404F4E  +
jz loc_404F75  +
sub eax 30h +
cmp eax 7 +
ja loc_404F92  +
movzx eax ds:byte_404F9D[eax] +
jmp ds:off_404F99[eax*4]  +
sub eax 39h +
jz loc_404F75  +
sub eax 8 +
jz loc_404F71  +
sub eax 1 +
jz loc_404F71  +
sub eax 1 +
jz loc_404F71  +
sub eax 1 +
jz loc_404F71  +
sub eax 1 +
jz loc_404F71  +
sub eax 1 +
jnz loc_404F92  +
lea eax [ecx-37h] +
retn   +
lea eax [ecx-30h] +
retn   +
sub eax 62h +
jz loc_404F95  +
sub eax 1 +
jz loc_404F95  +
sub eax 1 +
jz loc_404F95  +
sub eax 1 +
jz loc_404F95  +
sub eax 1 +
jz loc_404F95  +
xor al al +
retn   +
lea eax [ecx-57h] +
retn   +
***
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
push [ebp+arg_0]  +
test ecx ecx +
mov eax 2004h +
push esi  +
push esi  +
push 0FFFFFFFFh  +
and esp 0FFFFFFF8h +
push ecx  +
xor eax eax +
cmp [esi] eax +
jz loc_4056F5  +
push dword ptr [esi]  +
call RegCloseKey  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
push esi  +
push 0FFFFFFFFh  +
movzx eax cx +
push ecx  +
push 0FFFFFFFFh  +
mov ecx [esi] +
mov eax 200Ch +
call sub_42CD84  +
push 0FFFFFFFFh  +
test ecx ecx +
push 0FFFFFFFFh  +
sub esp 20Ch +
sub esp 20Ch +
mov eax dword_4423E8 +
push edi  +
sub esp 210h +
push ecx  +
mov edx [ebp+arg_0] +
sub esp 22Ch +
sub esp 218h +
sub esp 214h +
sub esp 830h +
add ecx 410h +
call sub_4066C8  +
test eax eax +
js loc_406D21  +
shl eax 4 +
mov eax ds:dword_430FAC[eax] +
retn   +
push 0FFFFFFFEh  +
pop eax  +
retn   +
***
lea eax [ebp+arg_C] +
push [ebp+arg_C]  +
mov edx [ebp+arg_4] +
call sub_42CD18  +
mov eax [ebp+8] +
cmp dword ptr [eax] 469h +
jz loc_406DE3  +
cmp dword ptr [eax] 465h +
jz loc_406DE3  +
cmp dword ptr [eax] 466h +
jnz loc_406EC5  +
cmp dword ptr [eax+0Ch] 0 +
jz loc_406EC5  +
push dword ptr [eax+8]  +
lea ecx [ebp-5Ch] +
push dword ptr [eax+0Ch]  +
call Mso98Win32Client_2621  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-5Ch] +
call Mso98Win32Client_1653  +
mov esi eax +
cmp dword ptr [esi+14h] 8 +
jb loc_406E17  +
mov esi [esi] +
lea ecx [ebp-28h] +
call sub_407967  +
mov edi Mso30Win32Client_1298 +
xor ebx ebx +
inc ebx  +
push ebx  +
push offset off_431120  +
push esi  +
call edi  +
push ebx  +
test eax eax +
jz loc_406E5A  +
mov edi dword_447E00 +
xor eax eax +
push ebx  +
mov ecx edi +
mov esi [edi+4] +
cmp esi 2 +
setnz al  +
inc eax  +
push eax  +
call sub_40D06D  +
cmp esi 2 +
jz loc_406E9A  +
mov ecx edi +
jmp loc_406E79  +
push offset off_431150  +
push esi  +
call edi  +
push ebx  +
test eax eax +
jz loc_406E80  +
mov esi dword_447E00 +
mov ecx esi +
push ebx  +
push 2  +
call sub_40D06D  +
mov ecx esi +
call sub_40D18F  +
jmp loc_406EB1  +
push offset off_431180  +
push esi  +
call edi  +
test eax eax +
jz loc_406EA3  +
mov ecx dword_447E00 +
push ebx  +
push ebx  +
push ebx  +
call sub_40D06D  +
push 0  +
call sub_40D383  +
jmp loc_406EB1  +
mov ecx dword_447DF0 +
push esi  +
call sub_40F69C  +
xor bl bl +
lea ecx [ebp-40h] +
call sub_407967  +
lea ecx [ebp-58h] +
call sub_407967  +
mov al bl +
jmp loc_406ED2  +
mov ecx dword_447DF0 +
call sub_40F70B  +
xor al al +
call sub_42CCCD  +
retn 4  +
***
push esi  +
call sub_42CD18  +
lea ecx [esi+34h] +
call sub_42CCE5  +
call sub_42CD18  +
call sub_42CCE5  +
call sub_42CD18  +
call sub_42CCE5  +
call sub_42CCE5  +
push ebx  +
call Mso98Win32Client_1697  +
call sub_42CCE5  +
push ebx  +
sub esp 0Ch +
push ecx  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
int 3  +
***
and dword ptr [ecx+4] 0 +
lea eax [ecx+4] +
push esi  +
push esi  +
push esi  +
sub esp 0Ch +
cmp ecx 1000h +
cmp dword ptr [ecx+4] 0 +
push esi  +
cmp edx 1000h +
mov edx [esi+14h] +
push 0FFFFFFFFh  +
push esi  +
mov eax 1060h +
push 0FFFFFFFFh  +
sub esp 420h +
mov eax 104Ch +
cmp byte ptr [esi] 0 +
jz loc_407FBD  +
push ebx  +
xor ebx ebx +
mov [esi] bl +
mov ecx [esi+26B4h] +
test ecx ecx +
jz loc_407F83  +
mov [esi+26B4h] ebx +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
mov ecx [esi+26B8h] +
test ecx ecx +
jz loc_407F99  +
mov [esi+26B8h] ebx +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
mov ecx [esi+26BCh] +
test ecx ecx +
jz loc_407FAF  +
mov [esi+26BCh] ebx +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
xor eax eax +
mov [esi+2] ax +
mov [esi+20Ah] ax +
pop ebx  +
pop esi  +
retn   +
***
call sub_42CCE5  +
mov eax 104Ch +
push ebx  +
push ecx  +
push ecx  +
sub esp 408h +
push ecx  +
call sub_42CCE5  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 20h +
push ecx  +
push ecx  +
call sub_42CCE5  +
mov eax 104Ch +
mov eax 1080h +
cmp [ebp+arg_0] 0 +
push ebx  +
mov eax 1054h +
push ecx  +
push ecx  +
push ecx  +
sub esp 14h +
push [ebp+arg_4]  +
push ecx  +
push ecx  +
sub esp 44h +
call sub_42CCE5  +
push 0FFFFFFFFh  +
push ecx  +
call sub_42CCE5  +
and esp 0FFFFFFF8h +
mov eax 1A14h +
push ecx  +
push esi  +
push ebx  +
push ebx  +
push ecx  +
push edi  +
call sub_42CD18  +
mov eax 2804h +
call sub_42CCE5  +
mov eax 106Ch +
push 0FFFFFFFFh  +
mov eax 24B0h +
mov eax 1054h +
cmp [ebp+arg_0] 0 +
push esi  +
mov eax 1058h +
mov eax 1050h +
push esi  +
mov eax 1058h +
sub esp 850h +
lea eax [ebp+arg_C] +
lea eax [ebp+arg_C] +
lea eax [ebp+arg_C] +
lea eax [ebp+arg_C] +
push esi  +
push esi  +
mov eax [esi] +
mov eax [ebp+arg_4] +
push ecx  +
push esi  +
mov eax [ebp+arg_4] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
lea eax [ecx+0C0Ch] +
push 0FFFFFFFFh  +
mov eax 104Ch +
mov eax 1254h +
lea eax [ecx+0Ch] +
lea eax [ecx+0Ch] +
lea eax [ecx+0Ch] +
mov ecx [esi+8] +
push ecx  +
mov eax offset loc_42D92A +
mov eax 1058h +
push ebx  +
push esi  +
push ecx  +
mov eax 104Ch +
push esi  +
push ebx  +
and esp 0FFFFFFF8h +
push ecx  +
mov eax 1454h +
mov eax 209Ch +
push ecx  +
push ecx  +
push ecx  +
cmp ecx 1 +
push esi  +
push ecx  +
sub esp 110h +
mov eax dword_43F508 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_10C] esi +
push edi  +
mov edi ecx +
test esi esi +
jz loc_40DA3B  +
push 1  +
push (offset aSContentError_+4)  +
push esi  +
call Mso30Win32Client_141  +
test eax eax +
jnz loc_40DA91  +
push 824h  +
lea edx [edi+20A8h] +
mov ecx esi +
call sub_401C41  +
push esi  +
call sub_40DC10  +
test al al +
jnz loc_40DA3B  +
mov esi [ebp+arg_4] +
mov eax 1C1h +
cmp esi eax +
ja loc_40D91C  +
jz loc_40DA00  +
lea eax [esi-190h] +
cmp eax 0Fh +
ja loc_40DA00  +
movzx eax ds:byte_40DAAD[eax] +
jmp ds:off_40DAA1[eax*4]  +
mov eax 800C000Ah +
cmp esi eax +
ja loc_40D9D4  +
jz loc_40DA00  +
add eax 0FFFFFFF8h +
cmp esi eax +
ja loc_40D9A4  +
jz loc_40DA35  +
mov eax 1F8h +
cmp esi eax +
ja loc_40D967  +
jz loc_40D983  +
mov eax esi +
sub eax 1F4h +
jz loc_40DA35  +
sub eax 1 +
jz loc_40DA00  +
sub eax 1 +
jz loc_40D983  +
sub eax 1 +
jmp loc_40D981  +
cmp esi 1F9h +
jz loc_40DA00  +
cmp esi 80004001h +
jz loc_40D983  +
cmp esi 80030002h +
jnz loc_40DA00  +
push 1  +
push 0  +
push 1  +
mov ecx edi +
call sub_40D06D  +
push [ebp+var_10C]  +
call sub_40D383  +
mov byte ptr [edi+0Dh] 1 +
jmp loc_40DA8D  +
cmp esi 800C0003h +
jz loc_40DA00  +
cmp esi 800C0004h +
jz loc_40D983  +
cmp esi 800C0005h +
jz loc_40D983  +
cmp esi 800C0006h +
jz loc_40DA00  +
cmp esi 800C0007h +
jz loc_40DA00  +
cmp esi 800C0008h +
jmp loc_40D9FE  +
mov eax 800C0100h +
cmp esi eax +
ja loc_40D9F8  +
jz loc_40DA00  +
lea eax [esi+7FF3FFF5h] +
cmp eax 0Dh +
ja loc_40DA00  +
movzx eax ds:byte_40DAC9[eax] +
jmp ds:off_40DABD[eax*4]  +
cmp esi 800C01F4h +
jz loc_40DA35  +
push 104h  +
lea eax [ebp+var_108] +
push 0  +
push eax  +
call j_memset  +
push esi  +
push offset aUnhandledConne  +
lea eax [ebp+var_108] +
push 0FFFFFFFFh  +
push eax  +
call sub_40EB44  +
add esp 1Ch +
push 111F05Fh  +
call Mso20Win32Client_1360  +
mov esi [ebp+var_10C] +
cmp byte ptr [edi+12h] 0 +
jz loc_40DA86  +
mov ecx 1054h +
call sub_412F45  +
mov esi eax +
mov [ebp+var_110] esi +
test esi esi +
jz loc_40DA7A  +
mov ecx [ebp+var_10C] +
lea edx [esi+0Ch] +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
push 824h  +
mov dword ptr [esi] offset off_4323A0 +
call sub_401C41  +
jmp loc_40DA7C  +
xor esi esi +
push esi  +
mov ecx edi +
call sub_40CB4E  +
jmp loc_40DA8D  +
push ecx  +
push esi  +
call sub_40E699  +
mov byte ptr [edi+12h] 0 +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_42B849  +
leave   +
retn 0Ch  +
***
sub esp 210h +
push ebx  +
mov eax 209Ch +
push esi  +
mov eax 229Ch +
mov eax [ebp+arg_0] +
sub esp 1Ch +
push ebx  +
push 1  +
push ebx  +
mov eax 1050h +
mov eax 1054h +
mov eax 125Ch +
sub esp 24h +
push esi  +
push esi  +
push esi  +
push ebx  +
cmp word_442608 0 +
mov eax 1054h +
mov eax 104Ch +
push esi  +
call sub_4039B3  +
push ecx  +
push ecx  +
push esi  +
push ecx  +
lea eax [ebp+arg_C] +
mov edx [esi+14h] +
push ecx  +
sub esp 18h +
sub esp 0Ch +
sub esp 214h +
push ecx  +
push esi  +
push ecx  +
sub esp 424h +
sub esp 41Ch +
test esi esi +
push ecx  +
cmp [ebp+arg_4] 0 +
sub esp 7DCh +
mov eax [ecx+30h] +
mov eax [ecx+30h] +
sub esp 71Ch +
cmp dword_447E00 0 +
push ecx  +
push ebx  +
push ebx  +
push edi  +
mov eax 2094h +
mov eax 20B8h +
mov ecx [ebp+arg_0] +
push esi  +
push 0FFFFFFFFh  +
mov edx [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov ecx [ebp+arg_4] +
cmp [ebp+arg_4] 0 +
sub esp 10h +
sub esp 10h +
push esi  +
mov eax [ebp+arg_0] +
sub esp 1Ch +
mov eax [ebp+arg_0] +
sub esp 14h +
push 0FFFFFFFFh  +
push esi  +
sub esp 14h +
push 0FFFFFFFFh  +
mov edx [ebp+arg_4] +
push esi  +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_4] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax dword_447E00 +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_4] +
push 0FFFFFFFFh  +
push offset loc_42D9A3  +
mov eax large fs:0 +
push eax  +
sub esp 0DCh +
mov eax dword_43F508 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov ebx [ebp+arg_4] +
xor edx edx +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_8] +
mov edi [ebp+arg_18] +
mov esi [ebp+pvarg] +
mov [ebp+var_E8] ecx +
mov ecx [ebp+arg_24] +
mov [ebx] edx +
mov [ebp+var_E0] ecx +
mov [ebp+var_DC] 1 +
cmp byte ptr word_447DD8 dl +
jnz loc_41066D  +
add eax 0FFFFFE0Ch +
test [ebp+arg_14] 2 +
mov [ebp+var_E4] eax +
jz loc_410639  +
cmp eax 8 +
ja loc_4107EE  +
movzx eax ds:byte_4107FD[eax] +
jmp ds:off_4107F5[eax*4]  +
test esi esi +
jz loc_410633  +
push esi  +
call ds:VariantInit  +
mov ecx [ebp+var_E0] +
xor edx edx +
push 0Bh  +
pop eax  +
mov [esi] ax +
mov eax [ebp+var_DC] +
mov [esi+8] ax +
mov eax [ebp+var_E4] +
test [ebp+arg_14] 1 +
jz loc_4107EE  +
cmp eax 8 +
ja loc_4107EE  +
jmp ds:off_410809[eax*4]  +
mov ecx offset byte_447DC0 +
call sub_402AC2  +
xor edi edi +
push edi  +
push edi  +
push 2B16h  +
push eax  +
call SendMessageW  +
mov al byte ptr [ebp+var_DC] +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_42B849  +
leave   +
retn 28h  +
mov ecx offset byte_447DC0 +
call sub_402AC2  +
xor edi edi +
push edi  +
push edi  +
push 2B15h  +
jmp loc_410666  +
mov ecx offset byte_447DC0 +
call sub_402AC2  +
xor edi edi +
push edi  +
push edi  +
push 2B14h  +
jmp loc_410666  +
push ecx  +
push ecx  +
lea eax [ebp+var_E0] +
mov ecx edi +
push eax  +
call sub_412EC5  +
test eax eax +
jz loc_4107E3  +
mov ecx offset byte_447DC0 +
call sub_402AC2  +
push [ebp+var_E0]  +
xor edi edi +
push edi  +
push 2B17h  +
jmp loc_410666  +
mov edx [edi] +
test edx edx +
jz loc_41066D  +
mov eax 400Bh +
cmp ax [edx] +
jnz loc_41066D  +
mov eax [ebp+var_E8] +
push dword ptr [edx+8]  +
add eax 0FFFFFFD8h +
push eax  +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
jmp loc_41066D  +
test esi esi +
jnz loc_41072C  +
mov dword ptr [ebx] 8002000Eh +
jmp loc_41066D  +
push esi  +
call ds:VariantInit  +
push 8  +
pop eax  +
xor edi edi +
mov [esi] ax +
push 0C8h  +
lea eax [ebp+var_D8] +
mov [esi+8] edi +
push edi  +
push eax  +
call j_memset  +
add esp 0Ch +
lea eax [ebp+var_D8] +
push 64h  +
push eax  +
call Mso30Win32Client_4143  +
test al al +
jz loc_41066D  +
lea ecx [ebp+var_D8] +
lea edx [ecx+2] +
mov ax [ecx] +
add ecx 2 +
cmp ax di +
jnz loc_410773  +
sub ecx edx +
lea eax [ebp+var_D8] +
sar ecx 1 +
push ecx  +
push eax  +
call ds:SysAllocStringLen  +
test eax eax +
jz loc_41066D  +
mov [esi+8] eax +
jmp loc_41066D  +
test edi edi +
jz loc_41066D  +
mov eax [ebp+var_DC] +
cmp [edi+8] eax +
jnz loc_41066D  +
mov eax [edi] +
test eax eax +
jz loc_41066D  +
push 8  +
pop esi  +
cmp [eax] si +
jnz loc_4107DD  +
cmp dword ptr [eax+8] 0 +
jz loc_4107DD  +
push dword ptr [eax+8]  +
call Mso30Win32Client_4281  +
jmp loc_41066D  +
test ecx ecx +
jz loc_4107E3  +
mov [ecx] edx +
mov dword ptr [ebx] 80020005h +
jmp loc_41066D  +
xor al al +
jmp loc_410673  +
***
push ebx  +
sub esp 14h +
mov ecx dword_447EF4 +
add ecx 50h +
push ecx  +
mov eax [ecx] +
mov eax [ecx] +
push ebx  +
push esi  +
lea eax [ebp+arg_C] +
push ebx  +
and esp 0FFFFFFF8h +
sub esp 6Ch +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
test ebx ebx +
jz loc_410DAF  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_410DAF  +
xor edi edi +
cmp [ebx+40h] di +
jnz loc_410E84  +
push offset CriticalSection  +
call ds:EnterCriticalSection  +
cmp [ebx+40h] di +
jnz loc_410E76  +
mov esi GetClassInfoExW +
cmp [ebx+30h] edi +
jz loc_410DDB  +
mov eax [ebx+28h] +
mov [esp+78h+var_68] eax +
mov eax [ebx+8] +
mov [esp+78h+var_64] eax +
lea eax [esp+78h+var_60] +
push eax  +
push dword ptr [ebx+30h]  +
mov [esp+80h+var_60.cbSize] 30h +
push edi  +
call esi  +
test eax eax +
jnz loc_410DBA  +
lea eax [esp+78h+var_60] +
push eax  +
push dword ptr [ebx+30h]  +
push hModule  +
call esi  +
test eax eax +
jnz loc_410DBA  +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
push 0Ch  +
pop ecx  +
lea esi [esp+78h+var_60] +
mov edi ebx +
movs   +
mov eax [ebx+8] +
mov ecx [esp+78h+var_64] +
mov [ebx+34h] eax +
mov eax [esp+78h+var_68] +
mov [ebx+28h] eax +
mov [ebx+8] ecx +
jmp loc_410DF8  +
mov eax dword_441F80 +
xor ecx ecx +
cmp [ebx+3Ch] edi +
push dword ptr [ebx+38h]  +
cmovnz eax ecx +
push eax  +
call LoadCursorW  +
mov [ebx+1Ch] eax +
mov eax [ebx+28h] +
mov edx hModule +
and dword ptr [ebx+4] 0FFFFBFFFh +
mov [ebx+14h] edx +
test eax eax +
jnz loc_410E29  +
push ebx  +
push offset aAtlP  +
lea esi [ebx+42h] +
push 25h  +
push esi  +
call sub_410C71  +
mov edx [ebx+14h] +
lea eax [ebx+42h] +
add esp 10h +
mov [ebx+28h] esi +
push 0Ch  +
pop ecx  +
mov esi ebx +
lea edi [esp+78h+var_30] +
movs   +
lea ecx [esp+78h+var_30] +
push ecx  +
push eax  +
push edx  +
call GetClassInfoExW  +
mov [ebx+40h] ax +
test ax ax +
jnz loc_410E74  +
push ebx  +
call RegisterClassExW  +
movzx eax ax +
mov [esp+78h+var_68] eax +
test ax ax +
jz loc_410E70  +
lea eax [esp+78h+var_68] +
mov ecx offset unk_43F670 +
push eax  +
call sub_410CA0  +
mov eax [esp+78h+var_68] +
mov [ebx+40h] ax +
xor edi edi +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
mov ecx [ebp+arg_4] +
cmp [ebx+30h] edi +
jz loc_410E8E  +
mov eax [ebx+34h] +
mov [ecx] eax +
mov ax [ebx+40h] +
jmp loc_410DB1  +
***
push ecx  +
call ds:VariantClear  +
retn   +
***
mov edi ecx +
mov eax 2014h +
cmp [ebp+arg_0] 0 +
lea ecx [esi+0Ch] +
call sub_412062  +
mov edx [esi+4] +
call sub_412260  +
push dword ptr [esi+4]  +
call ds:free  +
pop ecx  +
pop esi  +
retn   +
***
cmp byte ptr [ecx+18h] 0 +
jnz sub_407967  +
retn   +
***
mov esi ecx +
mov eax [ecx] +
mov eax [ecx] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov al [ebp+arg_0] +
mov al [ebp+arg_0] +
push esi  +
mov ecx [ecx+28h] +
push esi  +
mov ecx [ecx+24h] +
push esi  +
push 0FFFFFFFFh  +
cmp byte ptr [ecx+12h] 0 +
cmp byte ptr [ecx+12h] 0 +
cmp byte ptr [ecx+12h] 0 +
mov ecx [esi+0B4h] +
pop edx  +
mov ecx 10000h +
movzx eax dx +
or eax ecx +
xor esi esi +
mov dword_448010 eax +
xorps xmm0 xmm0 +
movzx eax dx +
or eax ecx +
mov dword_448008 esi +
mov ecx offset unk_448030 +
mov dword_44800C esi +
movups oword ptr oword_448014 xmm0 +
mov dword_448024 eax +
mov dword_448028 esi +
mov dword_44802C esi +
call sub_411FE8  +
mov ecx offset unk_448044 +
call sub_411FE8  +
mov ecx offset unk_448058 +
call sub_411FE8  +
mov ecx offset unk_44806C +
call sub_411FE8  +
mov eax offset dword_448008 +
pop esi  +
retn   +
***
mov eax large fs:2Ch +
sub esp 10h +
push 0FFFFFFFFh  +
sub esp 41Ch +
or dword ptr [ecx+8] 0FFFFFFFFh +
push esi  +
call sub_411BAD  +
call sub_42CD18  +
jz loc_411983  +
xor esi esi +
push ecx  +
push edi  +
push ecx  +
mov edi ecx +
sub esp 428h +
mov eax edx +
push edi  +
push ebx  +
push ecx  +
push ebx  +
push ecx  +
push ebx  +
mov [ecx+8] ax +
xor edx edx +
movzx eax ax +
or eax 10000h +
mov [ecx] edx +
mov [ecx+8] eax +
mov eax ecx +
mov [ecx+4] edx +
mov [ecx+0Ch] edx +
mov [ecx+10h] edx +
retn   +
***
rol byte ptr [eax] 0 +
add [ebx+0FF0FFCAh] al +
rcl dword ptr [eax] 83h +
cli   +
add [ebp+0Ah] esi +
test ecx ecx +
jz locret_412026  +
mov eax [ecx] +
push edx  +
call dword ptr [eax+8]  +
retn   +
***
cmp byte ptr [ecx+4Ch] 0 +
mov ecx [esi] +
mov edx [esi+4] +
sub edx [esi] +
mov ecx [esi] +
and edx 0FFFFFFFCh +
call sub_407941  +
xor eax eax +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
pop esi  +
retn   +
***
mov eax [ebp+arg_0] +
sub esp 20h +
mov eax [edx+4] +
push ecx  +
lea ecx [esi+20h] +
cmp byte ptr [ecx+20h] 0 +
jz loc_4122FB  +
call sub_41107B  +
lea ecx [esi+4] +
cmp byte ptr [ecx+18h] 0 +
pop esi  +
jnz sub_407967  +
retn   +
***
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_41231F  +
lea ecx [eax+0Ch] +
call sub_407967  +
mov eax [esi+4] +
pop esi  +
test eax eax +
jz locret_41232C  +
push eax  +
call ds:free  +
pop ecx  +
retn   +
***
sub esp 14h +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ecx+1Ch] +
push ecx  +
movd xmm0 eax +
cvtdq2pd xmm0 xmm0 +
shr eax 1Fh +
push ecx  +
addsd xmm0 ds:qword_436DE0[eax*8] +
cvtpd2ps xmm0 xmm0 +
divss xmm0 dword ptr [ecx] +
cvtps2pd xmm0 xmm0 +
movsd [ebp+var_8] xmm0 +
fld  [ebp+var_8] +
fstp  [esp+14h+var_14] +
call j_ceil  +
fstp  [ebp+var_8] +
movsd xmm0 [ebp+var_8] +
cvtpd2ps xmm0 xmm0 +
pop ecx  +
pop ecx  +
call loc_42D08A  +
push 8  +
pop ecx  +
cmp eax ecx +
cmova ecx eax +
cmp esi ecx +
jb loc_4124E4  +
mov eax esi +
jmp loc_4124F7  +
cmp esi 200h +
jnb loc_4124F5  +
mov eax esi +
shl eax 3 +
cmp eax ecx +
jnb loc_4124F7  +
mov eax ecx +
pop esi  +
leave   +
retn 4  +
***
call sub_42CCE5  +
mov eax [ecx+18h] +
call sub_42CCE5  +
push 24h  +
call sub_42CCE5  +
mov eax ecx +
mov [ebp-14h] eax +
mov ebx [eax] +
mov esi [ebp+0Ch] +
mov eax [ebp+8] +
mov edi [ebx] +
cmp edi ebx +
jz loc_41276D  +
cmp eax esi +
jz loc_4127AC  +
mov ecx [eax+8] +
add eax 0Ch +
mov [edi+8] ecx +
lea ecx [edi+0Ch] +
cmp ecx eax +
jz loc_41275C  +
cmp dword ptr [eax+14h] 8 +
mov edx [eax+10h] +
jb loc_412755  +
mov eax [eax] +
push edx  +
push eax  +
call sub_4077A6  +
mov eax [ebp+8] +
mov edi [edi] +
mov eax [eax] +
mov [ebp+8] eax +
cmp edi ebx +
jnz loc_412736  +
mov esi [ebp+0Ch] +
mov ebx [ebp-14h] +
and dword ptr [ebp-20h] 0 +
mov [ebp-24h] ebx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-24h] +
push esi  +
push eax  +
call sub_41289B  +
mov esi [ebp-20h] +
mov edx [ebx] +
test esi esi +
jz loc_4127A4  +
mov ecx [edx+4] +
mov eax [ebp-18h] +
mov [eax+4] ecx +
mov [ecx] eax +
mov eax [ebp-1Ch] +
mov [eax] edx +
mov [edx+4] eax +
add [ebx+4] esi +
call sub_42CCB9  +
retn 8  +
cmp edi ebx +
jz loc_4127A4  +
mov eax [edi+4] +
and dword ptr [ebp-10h] 0 +
mov [eax] ebx +
mov [ebx+4] eax +
mov esi [edi] +
lea ecx [edi+0Ch] +
call sub_407967  +
push edi  +
call ds:free  +
pop ecx  +
mov ecx [ebp-10h] +
mov edi esi +
inc ecx  +
mov [ebp-10h] ecx +
cmp esi ebx +
jnz loc_4127BC  +
mov eax [ebp-14h] +
sub [eax+4] ecx +
jmp loc_4127A4  +
***
call sub_42CCE5  +
call sub_42CCE5  +
push ebx  +
call sub_42CCE5  +
and esp 0FFFFFFF8h +
call sub_42CD4E  +
and esp 0FFFFFFF8h +
sub esp 10h +
mov ecx 2B14h +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov eax [esi+4] +
cmp eax ecx +
ja loc_412CDC  +
jz loc_412CD6  +
cmp eax 4Ah +
ja loc_412C46  +
jz loc_412BF0  +
cmp eax 5 +
jz loc_412BD8  +
cmp eax 10h +
jz loc_412BC3  +
cmp eax 15h +
jz loc_412BA5  +
cmp eax 24h +
jnz loc_412B6B  +
mov eax [esi+0Ch] +
mov ecx 12Ch +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
call Mso20Win32Client_4053  +
cmp [esi+4] eax +
jnz loc_412D43  +
cmp dword ptr [esi+8] 6Eh +
jnz loc_412D43  +
call ds:GetCurrentProcessId  +
cmp [esi+0Ch] eax +
jz loc_412D43  +
call mso40uiWin32Client_4157  +
push eax  +
call mso40uiWin32Client_684  +
jmp loc_412CF8  +
call mso40uiWin32Client_3008  +
mov ecx offset byte_447DC0 +
call sub_4030A8  +
mov ecx eax +
test ecx ecx +
jz loc_412B6B  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+3Ch]  +
jmp loc_412B6B  +
mov ecx offset byte_447DC0 +
call sub_402AC2  +
cmp [esi] eax +
jnz loc_412B6B  +
call sub_403264  +
jmp loc_412B6B  +
mov ecx offset byte_447DC0 +
call sub_402AC2  +
cmp [esi] eax +
jnz loc_412B6B  +
call sub_402FA0  +
jmp loc_412B6B  +
mov edi [esi+0Ch] +
mov esi [esi+8] +
test edi edi +
jz loc_412D43  +
mov ecx esi +
call sub_406601  +
test eax eax +
jnz loc_412C18  +
mov ecx esi +
call sub_40665A  +
test eax eax +
jz loc_412D43  +
mov eax [edi] +
mov [esp+18h+var_10] eax +
mov eax [edi+4] +
mov [esp+18h+var_8] eax +
mov eax [edi+8] +
mov [esp+18h+var_4] eax +
lea eax [esp+18h+var_10] +
push eax  +
mov [esp+1Ch+var_C] esi +
call sub_406EEE  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
jmp loc_412D45  +
sub eax 20Ch +
jz loc_412CB4  +
sub eax 2905h +
jz loc_412C85  +
sub eax 1 +
jz loc_412C76  +
sub eax 1 +
jnz loc_412B6B  +
push 1  +
push 1  +
mov ecx dword_447E00 +
call sub_40CCE1  +
jmp loc_412CF8  +
mov ecx dword_447E00 +
push 1  +
call sub_40CDB4  +
jmp loc_412CF8  +
cmp byte ptr word_447DD8 0 +
jnz loc_412CF8  +
mov ecx offset byte_447DC0 +
call sub_4030A8  +
test eax eax +
jz loc_412CF8  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_412CF8  +
push esi  +
mov ecx eax +
call sub_40FF1F  +
push esi  +
call Mso20Win32Client_3788  +
jmp loc_412CF8  +
movzx eax word ptr [esi+0Ah] +
sub eax 1 +
jz loc_412CCA  +
sub eax 1 +
jnz loc_412B6B  +
push 2  +
jmp loc_412CCC  +
push 1  +
call sub_4036BF  +
jmp loc_412B6B  +
push 3  +
push 4  +
jmp loc_412C66  +
sub eax 2B15h +
cmp eax 8 +
ja loc_412B6B  +
jmp ds:off_412D4D[eax*4]  +
push 1  +
call sub_4036BF  +
mov al 1 +
jmp loc_412D45  +
push 2  +
jmp loc_412CF3  +
push 5  +
jmp loc_412C64  +
push 4  +
jmp loc_412CD8  +
push 2  +
push 2  +
jmp loc_412C66  +
push ecx  +
call sub_40E89A  +
jmp loc_412CF8  +
mov esi dword_447E00 +
mov ecx esi +
push 1  +
push 0  +
push 1  +
call sub_40D06D  +
push 5  +
mov ecx esi +
jmp loc_412C7E  +
push ecx  +
push dword ptr [esi+8]  +
call sub_403B07  +
jmp loc_412CF8  +
xor al al +
pop edi  +
pop esi  +
mov esp ebp +
pop ebp  +
retn 14h  +
***
mov eax 0F3543F77h +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_4] +
push [ebp+arg_C]  +
push [ebp+uIDEvent]  +
push ecx  +
sub esp 10h +
call Mso20Win32Client_1193  +
push ecx  +
cmp [ebp+arg_0] 0 +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
cmp dword ptr [ecx] 0 +
cmp [ebp+arg_0] 1 +
call sub_42CCE5  +
call sub_42CCE5  +
mov esi ecx +
push 0FFFFFFFFh  +
push esi  +
mov eax [ecx+8] +
call sub_42CD4E  +
mov ecx [ebp-18h] +
push 0FFFFFFFFh  +
or dword ptr [ecx+0Ch] 0FFFFFFFFh +
push esi  +
push esi  +
push ecx  +
mov edx [ebp+arg_0] +
push 0FFFFFFFFh  +
mov eax [ebp+arg_4] +
push esi  +
mov eax [ecx+8] +
jmp loc_41394D  +
mov eax [ecx] +
sub esp 0Ch +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 0Ch +
mov edx [ebp+arg_0] +
push 0FFFFFFFFh  +
push ebx  +
push 2271754Dh  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+14h] 0 +
call sub_42CD4E  +
mov ecx [ebp-18h] +
push esi  +
sub esp 10h +
mov eax [ebp+arg_0] +
mov edx [ecx] +
mov eax [ecx] +
mov eax [edx+14h] +
push 0FFFFFFFFh  +
call sub_42CCE5  +
push ecx  +
xor edx edx +
push ecx  +
mov dword ptr [ecx] offset off_4329A8 +
mov edx [ebp+arg_0] +
mov dword ptr [ecx] offset off_432990 +
and dword ptr [ecx+4] 0 +
push esi  +
and dword ptr [ecx+8] 0 +
push esi  +
and dword ptr [ecx+8] 0 +
push esi  +
push esi  +
push esi  +
and dword ptr [ecx+8] 0 +
push esi  +
mov eax [ebp+arg_0] +
push esi  +
cmp byte ptr [esi+14h] 0 +
jnz loc_4143D9  +
mov ecx [esi+8] +
test ecx ecx +
jz loc_4143D5  +
or eax 0FFFFFFFFh +
xadd [ecx+4] eax +
jnz loc_4143D5  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
push 0FFFFFFFFh  +
call sub_42CD4E  +
mov esi ecx +
mov [ebp-14h] esi +
push dword_447F38  +
call ds:DecodePointer  +
test eax eax +
jz loc_4144DA  +
and dword ptr [ebp-4] 0 +
push dword_447F38  +
call ds:DecodePointer  +
push esi  +
call eax  +
jmp loc_4144D6  +
push 1390323h  +
call Mso20Win32Client_1360  +
mov eax offset loc_4144D3 +
retn   +
mov esi [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
call sub_42CCB9  +
retn   +
***
push esi  +
sub esp 14h +
push esi  +
mov dword ptr [ecx] offset off_432978 +
mov edx ecx +
call sub_42CCE5  +
push esi  +
sub esp 14h +
push esi  +
mov dword ptr [ecx] offset off_432948 +
mov edx ecx +
call sub_42CCE5  +
push esi  +
sub esp 14h +
push esi  +
mov dword ptr [ecx] offset off_432960 +
mov edx ecx +
call sub_42CCE5  +
push esi  +
sub esp 14h +
push esi  +
mov dword ptr [ecx] offset off_432918 +
mov ecx [ecx+4] +
call sub_42CCE5  +
push esi  +
sub esp 14h +
push esi  +
mov dword ptr [ecx] offset off_432900 +
sub esp 84h +
call sub_42CCE5  +
push esi  +
sub esp 14h +
push esi  +
mov dword ptr [ecx] offset off_432930 +
mov edx ecx +
call sub_42CCE5  +
cmp byte_43F6AC 0 +
cmp dword_4479E0 0 +
push [ebp+arg_4]  +
push eax  +
jz loc_414B04  +
mov eax edx +
push edi  +
push 0FFFFFFFFh  +
mov edx [ebp+arg_4] +
and esp 0FFFFFFF8h +
sub esp 18h +
sub esp 0Ch +
push 6  +
mov esi ecx +
xor eax eax +
pop ecx  +
push 1000000h  +
push eax  +
mov edi esi +
stos   +
push esi  +
call ds:InitializeCriticalSectionEx  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
push 0FFFFFFFFh  +
mov eax 1084h +
mov eax dword_4479F8 +
call sub_42C3E4  +
cmp dword_4479A0 0 +
call sub_42CE47  +
mov edx [ebp-238h] +
mov eax dword_4479A4 +
mov eax dword_447A04 +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
test eax eax +
jnz loc_415332  +
push offset aKernel32_dll  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_41533C  +
mov dword_447A04 eax +
push edi  +
push eax  +
call ds:GetProcAddress  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov eax off_43F6B0 +
xor edx edx +
call sub_41534F  +
push esi  +
sub esp 10h +
call sub_42CD18  +
push ecx  +
push 0FFFFFFFFh  +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov eax edx +
mov eax [ebp+arg_4] +
push ecx  +
call sub_42CCE5  +
cmp ecx edx +
mov ecx [ecx] +
call sub_42CD4E  +
mov edx [ebp+arg_4] +
push esi  +
mov ecx 2801295h +
push ecx  +
call sub_42CD4E  +
mov ecx [esi] +
push esi  +
push ebx  +
push ecx  +
push ecx  +
push ecx  +
call sub_42CD18  +
mov ecx offset a00000000000000 +
push ecx  +
mov eax [ebp+arg_0] +
push ecx  +
push ecx  +
push esi  +
push 2  +
lea eax [ebp+var_8] +
mov [ebp+var_4] 1 +
mov esi ecx +
lea ecx [ebp+var_4] +
push eax  +
call sub_415ADF  +
cmp dword ptr [eax] 7FFFFFFFh +
ja loc_416602  +
push dword ptr [eax]  +
push 0  +
push dword ptr [esi+4]  +
call j_memset  +
add esp 0Ch +
pop esi  +
leave   +
retn 4  +
call sub_415B01  +
int 3  +
xor eax eax +
inc eax  +
retn 14h  +
***
mov edx [ebp+arg_4] +
mov eax [ebp+arg_C] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub esp 1Ch +
mov ecx [ebp+arg_1C] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
call sub_42CCE5  +
xor eax eax +
mov [ebp-10h] eax +
mov esi [ebp+8] +
mov [esi] eax +
push esi  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] eax +
mov edx [ecx] +
push ecx  +
mov dword ptr [ebp-10h] 1 +
call dword ptr [edx+2Ch]  +
mov eax esi +
call sub_42CCB9  +
retn 8  +
***
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push esi  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
retn 14h  +
***
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
cmp [ebp+arg_0] 0 +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push esi  +
sub esp 18h +
push esi  +
push 0FFFFFFFFh  +
push ebx  +
push esi  +
mov ecx [ebp+arg_0] +
push esi  +
mov eax [ecx+40h] +
mov eax [ebp+arg_4] +
sub esp 14h +
call sub_42CCE5  +
push ebx  +
mov edx [ebp+arg_0] +
and esp 0FFFFFFF8h +
call sub_42CCE5  +
call sub_42CCE5  +
push esi  +
push edi  +
and esp 0FFFFFFF8h +
push esi  +
push ebx  +
sub esp 1Ch +
sub esp 14h +
and esp 0FFFFFFF8h +
push ebx  +
mov eax [ebp+arg_0] +
push esi  +
mov eax [ebp+arg_0] +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
call sub_42CCE5  +
sub esp 30h +
push ebx  +
mov eax [ebp+arg_0] +
sub esp 0Ch +
sub esp 14h +
sub esp 60h +
call sub_42CCE5  +
call sub_42CD4E  +
mov ecx [ebp-14h] +
sub esp 0Ch +
call sub_42CCE5  +
cmp [ebp+arg_4] 0 +
cmp [ebp+arg_4] 0F060h +
and esp 0FFFFFFF8h +
sub esp 0Ch +
push ecx  +
lea eax [ebp+var_4] +
add ecx 44h +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
mov eax [ecx] +
push [ebp+arg_0]  +
push ecx  +
call dword ptr [eax+3Ch]  +
push eax  +
call Mso98Win32Client_4268  +
test al al +
mov eax [ebp+arg_C] +
jz loc_418CEF  +
mov byte ptr [eax] 1 +
mov eax [ebp+var_4] +
jmp locret_418CF4  +
mov byte ptr [eax] 0 +
xor eax eax +
leave   +
retn 10h  +
***
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
push esi  +
or esi 0FFFFFFFFh +
xadd [ecx+4] esi +
dec esi  +
jnz loc_418D38  +
test ecx ecx +
jz loc_418D38  +
push ecx  +
mov dword ptr [ecx] offset off_433E44 +
call Mso20Win32Client_3788  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edx [ecx] +
mov ecx 2C72h +
jmp sub_42A2CA  +
***
mov eax [ecx] +
test eax eax +
jz locret_418D65  +
push eax  +
mov dword ptr [eax] offset off_43451C +
mov dword ptr [eax+4] offset off_4344CC +
call Mso20Win32Client_3788  +
retn   +
***
push esi  +
mov esi [ecx] +
test esi esi +
jz loc_418D7B  +
mov ecx esi +
call sub_416D61  +
push esi  +
call Mso20Win32Client_3788  +
pop esi  +
retn   +
***
push esi  +
push offset sub_418DC5  +
mov esi ecx +
call sub_413ACA  +
mov ecx esi +
pop esi  +
jmp sub_413940  +
***
push ecx  +
mov eax [ebp+arg_0] +
push ecx  +
call sub_42C3E4  +
cmp dword_4479A0 0 +
mov esi edx +
mov eax [ebp+arg_0] +
mov eax 80004001h +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
xor eax eax +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
call sub_42CCE5  +
push esi  +
push esi  +
call sub_42CCE5  +
call sub_42CCE5  +
mov eax [ebp+arg_4] +
retn 14h  +
***
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
call sub_42CCE5  +
call sub_42CCE5  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_4340D4 +
xor ebx ebx +
push 4  +
pop eax  +
mov [esi+28h] ax +
movzx eax ax +
or eax 10000h +
mov dword ptr [esi+1Ch] offset off_43405C +
mov [esi+20h] ebx +
mov [esi+24h] ebx +
mov [esi+28h] eax +
mov [esi+2Ch] ebx +
mov [esi+30h] ebx +
mov [ebp-4] ebx +
mov [esi+38h] ebx +
mov [esi+3Ch] ebx +
mov dword ptr [esi+40h] 80000000h +
mov [esi+4Ch] ebx +
mov dword ptr [esi+50h] offset off_4338C4 +
mov [esi+54h] bl +
mov [esi+58h] ebx +
mov [esi+5Ch] ebx +
mov [esi+60h] ebx +
lea ecx [esi+6Ch] +
mov edx 102h +
mov [ebp-14h] ecx +
lea eax [ecx+10h] +
mov [ecx+0Ch] edx +
mov dword ptr [ecx] offset off_43F5C0 +
mov [ecx+4] eax +
mov [ecx+8] edx +
push ecx  +
mov byte ptr [ebp-4] 7 +
call sub_416420  +
mov [esi+188h] ebx +
lea ecx [esi+198h] +
mov dword ptr [esi+18Ch] offset off_43421C +
push 3  +
call sub_413B65  +
mov [esi+1A8h] ebx +
lea ecx [esi+1E4h] +
mov dword ptr [esi+194h] offset off_43402C +
mov [esi+1ACh] ebx +
mov [esi+1DCh] ebx +
mov [esi+1E0h] bl +
call sub_414E2E  +
mov [esi+190h] bx +
mov [esi+200h] ebx +
mov [esi+204h] ebx +
mov [esi+208h] ebx +
mov byte ptr [ebp-4] 0Dh +
mov [esi+14h] ebx +
mov [esi+64h] ebx +
mov [esi+68h] ebx +
mov [esi+44h] ebx +
mov [esi+1FCh] ebx +
mov [esi+210h] ebx +
mov [esi+34h] ebx +
mov [esi+180h] ebx +
mov [esi+20Ch] bl +
mov [esi+215h] bx +
mov [esi+217h] bl +
mov [esi+18h] ebx +
mov [esi+4] ebx +
inc dword_447F98  +
call sub_421825  +
mov eax esi +
call sub_42CCB9  +
retn   +
***
cmp dword ptr [ecx+10h] 0 +
jz locret_419386  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call Mso20Win32Client_355  +
retn   +
***
lea eax [esi+58h] +
call sub_42CCE5  +
call sub_42CCE5  +
push ecx  +
call sub_42CCE5  +
push ecx  +
mov ecx 118h +
push ecx  +
mov ecx [ebp+arg_4] +
mov ecx [ebp+arg_4] +
call sub_42CCE5  +
sub esp 2Ch +
push ebx  +
push esi  +
push esi  +
push ecx  +
push ebx  +
push ebx  +
push ecx  +
push ecx  +
mov eax dword_447A0C +
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
push esi  +
or esi 0FFFFFFFFh +
xadd [ecx+4] esi +
dec esi  +
jnz loc_41A6A6  +
test ecx ecx +
jz loc_41A6A6  +
push ecx  +
mov dword ptr [ecx] offset off_434174 +
call Mso20Win32Client_3788  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edx [ecx] +
mov eax edx +
mov ecx [ecx+4] +
and eax ecx +
cmp eax 0FFFFFFFFh +
jnz loc_41A6DA  +
mov eax [ebp+arg_0] +
or dword ptr [eax] 0FFFFFFFFh +
mov dword ptr [eax+4] 7FFFFFFFh +
jmp loc_41A6F8  +
sub edx [ebp+arg_4] +
push 0  +
sbb ecx [ebp+arg_8] +
push 2710h  +
push ecx  +
push edx  +
call sub_42D018  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax ecx +
mov [ecx+4] edx +
pop ebp  +
retn 0Ch  +
***
mov ecx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push esi  +
or esi 0FFFFFFFFh +
xadd [ecx+4] esi +
dec esi  +
jnz loc_41A76D  +
test ecx ecx +
jz loc_41A76D  +
push ecx  +
mov dword ptr [ecx] offset off_434158 +
call Mso20Win32Client_3788  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
mov edx offset nullsub_2 +
push esi  +
mov eax [ebp+arg_4] +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
push ecx  +
cmp [ebp+arg_4] 6 +
cmp [ebp+arg_4] 0 +
sub esp 1Ch +
push 0FFFFFFFFh  +
sub esp 58h +
push esi  +
call sub_42CCE5  +
push ecx  +
mov eax [ebp+arg_0] +
sub esp 0Ch +
call sub_42C3E4  +
xor esi esi +
cmp dword_4479A8 0 +
call sub_42C3E4  +
cmp dword_4479A0 0 +
mov ecx [ebp+arg_0] +
call sub_42CCE5  +
push esi  +
mov edx [esi+54h] +
push [ebp+nVirtKey]  +
mov eax dword_447A0C +
and esp 0FFFFFFF8h +
mov eax [ebp+arg_0] +
mov eax dword_447A0C +
mov edx dword_447A0C +
sub esp 14h +
sub esp 108h +
mov eax [ebp+arg_0] +
mov eax [esi+4] +
mov eax [ecx+4] +
inc eax  +
mov [ecx+4] eax +
retn   +
***
xor eax eax +
mov [ecx] eax +
mov [ecx+4] eax +
mov [ecx+8] eax +
mov eax ecx +
retn   +
***
push ecx  +
call sub_42CCE5  +
push dword ptr [edx+14h]  +
mov ecx [ecx+7Ch] +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
xor ecx ecx +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_8] +
mov eax [ebp+arg_8] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push [ebp+arg_8]  +
push 0FFFFFFFFh  +
mov edx [ebp+arg_0] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_42D339  +
mov eax large fs:0 +
push eax  +
mov eax dword_43F508 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov ecx dword_447A0C +
test ecx ecx +
jz loc_41EFDD  +
mov ecx [ecx+48h] +
test ecx ecx +
jz loc_41EFDD  +
push [ebp+arg_4]  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+30h]  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
leave   +
retn 8  +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
sub [ebp+arg_4] 1 +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_42D4D4  +
mov eax large fs:0 +
push eax  +
push esi  +
push edi  +
mov eax dword_43F508 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
cmp [ebp+arg_4] 1 +
jnz loc_41F304  +
mov esi [ebp+arg_0] +
lea edi [esi+58h] +
push edi  +
call ds:EnterCriticalSection  +
mov byte ptr [esi+54h] 1 +
mov ecx [esi+50h] +
test ecx ecx +
jz loc_41F2FD  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax]  +
push edi  +
call ds:LeaveCriticalSection  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
call sub_42C3E4  +
cmp dword_4479A0 0 +
mov ecx [ebp+arg_C] +
push [ebp+arg_C]  +
push 0FFFFFFFFh  +
push [ebp+arg_8]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push [ebp+arg_10]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push 0FFFFFFFFh  +
mov dword ptr [ecx] offset off_434580 +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
push esi  +
push esi  +
call sub_42CD18  +
cmp [ebp+arg_C] 0 +
sub esp 18h +
sub esp 1Ch +
sub esp 0Ch +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
call sub_42CCE5  +
call sub_42CD18  +
call sub_42CCE5  +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor eax eax +
mov [ebp+var_4] eax +
mov ebx eax +
mov eax [edi+90h] +
push eax  +
mov edx [eax] +
call dword ptr [edx+4]  +
mov edx eax +
mov [ebp+var_8] edx +
jmp loc_4205BB  +
test ebx ebx +
jnz loc_420649  +
mov ecx [edi+90h] +
push edx  +
push ecx  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
jmp loc_4205A1  +
test ebx ebx +
jnz loc_4205A7  +
mov ecx [edi+90h] +
push esi  +
push ecx  +
mov eax [ecx] +
call dword ptr [eax+1Ch]  +
mov ecx eax +
mov eax [ebp+arg_0] +
cmp [ecx] eax +
jnz loc_420594  +
mov eax [ebp+arg_4] +
cmp [ecx+8] eax +
jnz loc_420594  +
mov ebx esi +
mov [ebp+var_4] ecx +
mov ecx [edi+90h] +
push esi  +
push ecx  +
mov eax [ecx] +
call dword ptr [eax+20h]  +
mov esi eax +
test esi esi +
jnz loc_42056D  +
mov ecx [edi+90h] +
push [ebp+var_8]  +
push ecx  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
mov edx eax +
mov [ebp+var_8] eax +
test edx edx +
jnz loc_420556  +
test ebx ebx +
jnz loc_420649  +
mov edx [edi+8Ch] +
test edx edx +
jz loc_4205EB  +
mov ecx [edx] +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
lea eax [edi+4] +
push [ebp+arg_0]  +
push dword ptr [edi+90h]  +
push eax  +
push edx  +
call dword ptr [ecx+40h]  +
mov esi [ebp+var_4] +
test esi esi +
jnz loc_420656  +
mov eax [ebp+arg_4] +
mov dl 1 +
dec eax  +
cmp eax 17h +
ja loc_420652  +
movzx eax ds:byte_4206CA[eax] +
jmp ds:off_4206A6[eax*4]  +
mov esi offset unk_433AF8 +
mov [ebp+var_4] esi +
jmp loc_420658  +
mov esi offset unk_433B68 +
jmp loc_420610  +
mov esi offset unk_433A48 +
jmp loc_420610  +
mov esi offset unk_433B40 +
jmp loc_420610  +
mov esi offset unk_4339F8 +
jmp loc_420610  +
mov esi offset unk_4338F0 +
jmp loc_420610  +
mov esi offset unk_433988 +
jmp loc_420610  +
mov esi offset unk_433B40 +
mov [ebp+var_4] esi +
jmp loc_42064E  +
mov esi [ebp+var_4] +
xor edx edx +
test esi esi +
jnz loc_420658  +
xor eax eax +
jmp loc_42069F  +
xor edx edx +
mov eax [ebp+arg_4] +
lea ecx [edi+0Ch] +
test dl dl +
jnz loc_420665  +
mov eax [esi+8] +
push dword ptr [esi+0Ch]  +
push eax  +
call sub_42135B  +
mov ecx eax +
mov [ebp+arg_4] ecx +
test ebx ebx +
jz loc_42068F  +
push [ebp+arg_8]  +
mov ecx [edi+90h] +
push dword ptr [esi+8]  +
push ebx  +
mov edx [ecx] +
push ecx  +
call dword ptr [edx+24h]  +
mov ecx [ebp+arg_4] +
jmp loc_420694  +
mov eax [ebp+arg_8] +
mov [eax] esi +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_42069D  +
mov [eax] ebx +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_C] +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_4] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_4] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_C] +
mov eax [ebp+arg_0] +
dec eax  +
cmp eax 17h +
ja loc_4213BC  +
movzx eax ds:byte_4213F6[eax] +
jmp ds:off_4213C2[eax*4]  +
lea eax [ecx+4] +
jmp loc_4213BE  +
lea eax [ecx+0Ch] +
jmp loc_4213BE  +
test [ebp+arg_4] 4 +
jz loc_42138A  +
lea eax [ecx+1Ch] +
jmp loc_4213BE  +
lea eax [ecx+14h] +
jmp loc_4213BE  +
lea eax [ecx+28h] +
jmp loc_4213BE  +
lea eax [ecx+68h] +
jmp loc_4213BE  +
lea eax [ecx+30h] +
jmp loc_4213BE  +
lea eax [ecx+38h] +
jmp loc_4213BE  +
lea eax [ecx+40h] +
jmp loc_4213BE  +
lea eax [ecx+48h] +
jmp loc_4213BE  +
lea eax [ecx+5Ch] +
jmp loc_4213BE  +
lea eax [ecx+70h] +
jmp loc_4213BE  +
lea eax [ecx+54h] +
jmp loc_4213BE  +
xor eax eax +
pop ebp  +
retn 8  +
***
add [ecx] eax +
add [ecx] eax +
add [edx] eax +
or al 3 +
add al 4 +
add al 4 +
add al 5 +
push es  +
push es  +
pop es  +
or [ebx] al +
or [edx+ecx] ecx +
or edi [ecx+1DDBh] +
jmp sub_42A2C2  +
***
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
sub [esp+arg_0] 4 +
call sub_42CCE5  +
test [ebp+arg_0] 1 +
mov eax 80004005h +
mov esi dword_447F9C +
push esi  +
mov esi ecx +
call sub_42194B  +
test [ebp+arg_0] 1 +
jz loc_42193D  +
test esi esi +
jz loc_42193D  +
push esi  +
call Mso20Win32Client_3788  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ecx  +
mov eax [ebp+arg_0] +
push ecx  +
and esp 0FFFFFFF8h +
push esi  +
and esp 0FFFFFFF8h +
call sub_42CD18  +
cmp [ebp+arg_0] 0 +
call sub_42CD18  +
mov esi ecx +
mov edi [ebp+0Ch] +
xor ebx ebx +
mov eax [ebp+8] +
mov [edi+4] ebx +
mov [edi] ebx +
mov [edi+8] ebx +
mov [edi+0Ch] ebx +
test eax eax +
jz loc_421F92  +
test eax 0FFE2h +
jnz loc_421F92  +
mov dx [ebp+0Ah] +
movzx ecx dx +
sub ecx 8 +
cmp ecx 0F6h +
ja loc_421F92  +
cmp dx 11h +
jz loc_421F92  +
cmp dx 10h +
jz loc_421F92  +
cmp dx 12h +
jz loc_421F92  +
cmp [esi+4Ch] bl +
jnz loc_421F29  +
mov eax [esi] +
mov ecx esi +
push 0FFFFFFFFh  +
call dword ptr [eax+60h]  +
mov eax [ebp+8] +
cmp [esi+8] ebx +
jle loc_421F92  +
cmp [esi+1Ch] ebx +
jz loc_421F41  +
push edi  +
push dword ptr [esi+1Ch]  +
push eax  +
mov ecx esi +
call sub_421FEE  +
jmp loc_421F94  +
mov ecx [esi+48h] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
test al al +
jnz loc_421F8B  +
mov ecx [esi+48h] +
lea edx [ebp+8] +
mov [ebp-48h] esi +
lea esi [ebp-48h] +
mov [ebp-40h] edi +
lea edi [ebp-38h] +
mov [ebp-44h] edx +
lea edx [ebp-3Ch] +
mov eax [ecx] +
mov dword ptr [ebp-3Ch] offset off_434F7C +
movs   +
mov eax [eax+0Ch] +
movs   +
movs   +
mov [ebp-18h] edx +
push edx  +
mov [ebp-4] ebx +
call eax  +
lea ecx [ebp-3Ch] +
mov bl al +
call sub_4227DC  +
mov al bl +
jmp loc_421F94  +
push edi  +
push ebx  +
push dword ptr [ebp+8]  +
jmp loc_421F38  +
xor al al +
call sub_42CCCD  +
retn 8  +
***
mov edx [ebp+arg_4] +
sub esp 20h +
push ebx  +
push ebx  +
sub esp 20h +
push ebx  +
call sub_42CD18  +
mov ecx [ebp+arg_0] +
push esi  +
mov eax [edx+8] +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov edx ecx +
mov ecx [esi+24h] +
test ecx ecx +
jz loc_4227F8  +
mov edx [ecx] +
cmp ecx esi +
setnz al  +
movzx eax al +
push eax  +
call dword ptr [edx+10h]  +
and dword ptr [esi+24h] 0 +
pop esi  +
retn   +
***
push esi  +
mov eax [ebp+arg_0] +
mov eax 80004005h +
test esi esi +
mov ecx [ecx+4] +
test [ebp+arg_0] 1 +
push ecx  +
push ecx  +
push 0  +
test [ebp+arg_0] 1 +
cmp [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
push 0FFFFFFFFh  +
push esi  +
call sub_42CCE5  +
sub esp 44h +
mov esi ecx +
push ecx  +
push ecx  +
cmp dword ptr [esi] 0 +
jz loc_422DE0  +
push dword ptr [esi]  +
call ds:CloseHandle  +
and dword ptr [esi] 0 +
mov ecx [esi+11Ch] +
lea eax [esi+128h] +
cmp ecx eax +
jz loc_422DF7  +
push ecx  +
call Mso20Win32Client_3788  +
lea eax [esi+14h] +
cmp [esi+8] eax +
jz loc_422E08  +
push dword ptr [esi+8]  +
call Mso20Win32Client_3788  +
pop esi  +
retn   +
***
test [ebp+arg_0] 1 +
call sub_42CCE5  +
cmp dword ptr [esi+10h] 0 +
push ecx  +
push ecx  +
push 0  +
push ebx  +
sub esp 24h +
mov edx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
mov ecx [esi+4] +
test ecx ecx +
jz loc_423082  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
test byte ptr [esi] 2 +
call sub_42CCE5  +
push esi  +
push 0FFFFFFFFh  +
call sub_42CCE5  +
mov esi offset unk_434B64 +
mov eax [ebp+arg_0] +
push esi  +
mov eax [ebp+arg_0] +
mov ecx dword_447A18 +
call sub_42CCE5  +
call sub_42CCE5  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_4351E0 +
xor ebx ebx +
mov edi 80000000h +
mov [esi+0Ch] ebx +
mov [esi+10h] ebx +
mov [esi+14h] edi +
push 10h  +
mov [ebp-4] ebx +
mov ecx 10000h +
pop edx  +
movzx eax dx +
or eax ecx +
mov [esi+20h] dx +
mov [esi+18h] ebx +
mov [esi+1Ch] ebx +
mov [esi+20h] eax +
mov [esi+24h] ebx +
mov [esi+28h] ebx +
mov [esi+2Ch] ebx +
mov [esi+30h] ebx +
mov [esi+34h] edi +
movzx eax dx +
or eax ecx +
mov [esi+40h] dx +
mov [esi+38h] ebx +
mov [esi+3Ch] ebx +
mov [esi+40h] eax +
mov [esi+44h] ebx +
mov [esi+48h] ebx +
lea edi [esi+4Ch] +
mov byte ptr [ebp-4] 3 +
push 24h  +
mov [ebp-14h] edi +
mov [edi] ebx +
mov [edi+4] ebx +
call ds:malloc  +
pop ecx  +
test eax eax +
jnz loc_423482  +
call ds:?_Xbad_alloc@std@@YAXXZ  +
mov [edi] eax +
mov [esi+58h] ebx +
mov dword ptr [esi+54h] offset off_4351BC +
mov [esi+60h] ebx +
mov dword ptr [esi+5Ch] offset off_435198 +
mov [esi+64h] ebx +
mov [eax] eax +
mov [eax+4] eax +
mov [eax+8] eax +
mov word ptr [eax+0Ch] 101h +
mov [esi+4] ebx +
mov [esi+8] ebx +
mov dword_447A18 esi +
call ds:GetCurrentThreadId  +
mov [esi+64h] eax +
mov eax esi +
call sub_42CCB9  +
retn   +
***
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call sub_424B19  +
mov ecx esi +
pop esi  +
jmp sub_4130CF  +
***
push 0FFFFFFFFh  +
mov eax offset loc_42E809 +
cmp dword ptr [esi+38h] 0 +
mov eax [ebp+arg_4] +
xor edx edx +
mov ecx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push esi  +
push esi  +
retn 8  +
***
retn 14h  +
***
retn 8  +
***
push [ebp+arg_4]  +
push [ebp+arg_4]  +
call sub_42CD18  +
push ecx  +
push ebx  +
call sub_42CCE5  +
call sub_42CCE5  +
push 0FFFFFFFFh  +
push [ebp+arg_4]  +
push esi  +
push [ebp+arg_4]  +
mov edx [ebp+arg_0] +
call sub_42CCE5  +
mov ecx [ebp+arg_0] +
mov eax [esi] +
mov eax edx +
call sub_42CCE5  +
call sub_42CCE5  +
mov eax ds:GetTickCount64 +
mov [ebp-18h] eax +
call eax  +
mov ecx [ebp+8] +
mov [ebp-14h] eax +
mov [ebp-10h] edx +
call sub_427C13  +
cmp byte ptr [ebp+10h] 0 +
mov edi eax +
mov [ebp+8] edi +
jz loc_424796  +
inc dword ptr [edi+0Ch]  +
lea ebx [edi+4] +
mov esi [ebx] +
mov [ebp+10h] ebx +
test esi esi +
jz loc_424791  +
mov edi [ebp-14h] +
mov ebx [ebp-10h] +
cmp dword ptr [ebp+18h] 0 +
jl loc_424752  +
jg loc_42473A  +
cmp dword ptr [ebp+14h] 0 +
jbe loc_424752  +
lea ecx [esi+28h] +
mov eax [ecx] +
and eax [ecx+4] +
cmp eax 0FFFFFFFFh +
jz loc_424752  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_424A78  +
mov eax [esi+20h] +
or eax [esi+24h] +
jnz loc_424760  +
mov [esi+28h] edi +
mov [esi+2Ch] ebx +
cmp byte ptr [esi+35h] 0 +
jz loc_424785  +
push dword ptr [esi+24h]  +
lea ecx [ebp-20h] +
mov [ebp-20h] edi +
push dword ptr [esi+20h]  +
mov [ebp-1Ch] ebx +
call sub_424A78  +
mov ecx [eax] +
mov eax [eax+4] +
mov [esi+28h] ecx +
mov [esi+2Ch] eax +
mov esi [esi] +
test esi esi +
jnz loc_42472C  +
mov edi [ebp+8] +
mov ebx [ebp+10h] +
mov [edi+8] ebx +
jmp loc_424799  +
mov ebx [edi+8] +
test ebx ebx +
jz loc_4247A3  +
mov esi [ebx] +
test esi esi +
jnz loc_4247AA  +
lea ebx [edi+4] +
mov esi [ebx] +
jmp loc_4247E8  +
cmp byte ptr [esi+34h] 0 +
jz loc_4247B9  +
mov ecx ebx +
call sub_424630  +
jmp loc_4247A6  +
mov eax [esi+28h] +
and eax [esi+2Ch] +
cmp eax 0FFFFFFFFh +
jz loc_4247E4  +
mov eax [ebp-10h] +
cmp [esi+2Ch] eax +
ja loc_4247E4  +
jb loc_4247D6  +
mov eax [ebp-14h] +
cmp [esi+28h] eax +
ja loc_4247E4  +
cmp byte ptr [esi+37h] 0 +
jz loc_4247EC  +
mov eax [esi+30h] +
cmp eax [edi+0Ch] +
jnz loc_4247EC  +
mov ebx esi +
mov esi [esi] +
test esi esi +
jnz loc_4247AA  +
test esi esi +
jz loc_424916  +
mov eax [edi+0Ch] +
mov [edi+8] esi +
mov [esi+30h] eax +
call sub_424CE9  +
test eax eax +
jz loc_42480D  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+14h]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
cmp byte ptr [esi+36h] 0 +
jz loc_42488E  +
call sub_423356  +
mov edx eax +
mov ecx [edx] +
mov eax [ecx+70h] +
mov [ebp+10h] eax +
lea eax [esi+4] +
mov ecx [eax] +
test cl 2 +
jnz loc_424837  +
xor eax eax +
jmp loc_424841  +
add eax 4 +
test cl 1 +
jnz loc_424841  +
mov eax [eax] +
push dword ptr [eax]  +
push edx  +
call dword ptr [ebp+10h]  +
test byte ptr [eax+0Ch] 1 +
jnz loc_42488B  +
and dword ptr [ebp-30h] 0FFFFFFFDh +
lea eax [esi+4] +
mov byte ptr [ebp-4] 1 +
mov ecx [eax] +
test cl 2 +
jnz loc_424863  +
xor eax eax +
jmp loc_42486D  +
add eax 4 +
test cl 1 +
jnz loc_42486D  +
mov eax [eax] +
push eax  +
lea ecx [ebp-30h] +
call sub_4230CB  +
push dword ptr [esi+14h]  +
lea ecx [ebp-30h] +
call sub_42314E  +
lea ecx [ebp-30h] +
call sub_423089  +
jmp loc_424896  +
lea ecx [esi+4] +
push dword ptr [esi+14h]  +
call sub_42314E  +
cmp byte ptr [esi+34h] 0 +
jnz loc_4248DF  +
cmp byte ptr [esi+36h] 0 +
jz loc_4248DF  +
mov eax [esi+24h] +
mov ebx [esi+20h] +
mov [ebp+10h] eax +
test eax eax +
jl loc_4248D1  +
jg loc_4248B5  +
test ebx ebx +
jz loc_4248D1  +
call dword ptr [ebp-18h]  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-20h] +
mov [ebp-20h] eax +
push ebx  +
mov [ebp-1Ch] edx +
call sub_424A78  +
mov ecx [eax] +
mov eax [eax+4] +
jmp loc_4248D7  +
or ecx 0FFFFFFFFh +
or eax 0FFFFFFFFh +
mov [esi+28h] ecx +
mov [esi+2Ch] eax +
jmp loc_4248FD  +
cmp dword ptr [edi+8] 0 +
jz loc_4248EA  +
mov [edi+8] ebx +
jmp loc_4248F6  +
lea edx [edi+4] +
mov ecx esi +
call sub_42464B  +
mov ebx eax +
mov ecx ebx +
call sub_424630  +
mov dword ptr [ebp-4] 2 +
call sub_424CE9  +
test eax eax +
jz loc_42491C  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+18h]  +
jmp loc_42491C  +
lea eax [edi+4] +
mov [edi+8] eax +
call dword ptr [ebp-18h]  +
mov ebx [ebp+0Ch] +
mov [ebp+10h] eax +
mov [ebp+8] edx +
or dword ptr [ebx] 0FFFFFFFFh +
mov dword ptr [ebx+4] 7FFFFFFFh +
mov esi [edi+4] +
jmp loc_4249B4  +
cmp byte ptr [esi+34h] 0 +
jnz loc_4249B2  +
lea ecx [esi+28h] +
mov eax [ecx] +
and eax [ecx+4] +
cmp eax 0FFFFFFFFh +
jz loc_4249B2  +
cmp byte ptr [esi+37h] 0 +
jz loc_424958  +
mov eax [esi+30h] +
cmp eax [edi+0Ch] +
jz loc_4249B2  +
push edx  +
push dword ptr [ebp+10h]  +
lea eax [ebp-28h] +
push eax  +
call sub_41A6BA  +
xorps xmm0 xmm0 +
movlpd oword ptr [ebp-20h] xmm0 +
cmp dword ptr [eax+4] 0 +
jl loc_42497E  +
jg loc_42497A  +
cmp dword ptr [eax] 0 +
jbe loc_42497E  +
mov cl 1 +
jmp loc_424980  +
xor cl cl +
test cl cl +
lea edx [ebp-20h] +
cmovnz edx eax +
mov eax [edx+4] +
cmp eax [ebx+4] +
jg loc_42499C  +
jl loc_424998  +
mov eax [edx] +
cmp eax [ebx] +
jnb loc_42499C  +
mov al 1 +
jmp loc_42499E  +
xor al al +
test al al +
mov ecx ebx +
cmovnz ecx edx +
mov edx [ebp+8] +
mov eax [ecx] +
mov ecx [ecx+4] +
mov [ebx] eax +
mov [ebx+4] ecx +
mov esi [esi] +
test esi esi +
jnz loc_424937  +
mov eax ebx +
call sub_42CCB9  +
retn 14h  +
***
push esi  +
mov esi [ecx] +
test esi esi +
jz loc_4249DB  +
mov ecx esi +
call sub_424B00  +
push esi  +
call Mso20Win32Client_3788  +
pop esi  +
retn   +
***
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
push ecx  +
push esi  +
test [ebp+arg_0] 1 +
test [ebp+arg_0] 1 +
mov edx [esi+14h] +
push esi  +
push esi  +
imul eax [ebp+arg_8] +
imul ecx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
imul eax [ebp+arg_8] +
push esi  +
push ecx  +
push 0FFFFFFFFh  +
push esi  +
and dword_447A1C 0 +
mov eax dword_447A1C +
call sub_42CCE5  +
push esi  +
mov edx [esi+18h] +
call sub_42CD18  +
call sub_42CCE5  +
retn   +
***
lea eax [ebp+arg_C] +
push esi  +
push ecx  +
sub esp 18h +
push ebx  +
mov edx [ebp+arg_0] +
mov eax dword_447F9C +
call sub_42CD18  +
sub esp 0Ch +
call sub_42CCE5  +
call sub_42CCE5  +
mov eax [ebp+arg_0] +
call sub_42CCE5  +
push esi  +
push ebx  +
push ecx  +
push ecx  +
push ebx  +
movzx edx word ptr [ecx+4] +
call sub_42CCE5  +
movzx edx word ptr [ecx+4] +
call Mso20Win32Client_2055  +
mov eax edx +
push ecx  +
mov edx [ebp+arg_4] +
push esi  +
mov eax [ebp+arg_0] +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
call sub_42CCE5  +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov ecx [ebp+arg_0] +
call sub_42CCE5  +
push esi  +
push ebx  +
mov eax [ebp+arg_4] +
call sub_42CCE5  +
call sub_42CD18  +
push ebx  +
push esi  +
sub esp 10h +
call sub_42CCE5  +
push ecx  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
mov [ebp-14h] edx +
mov [ebp-10h] ecx +
xor ebx ebx +
xorps xmm0 xmm0 +
mov edi ebx +
movlpd oword ptr [ebp-28h] xmm0 +
mov [ebp-20h] edi +
mov [ebp-4] ebx +
mov esi ebx +
movlpd oword ptr [ebp-38h] xmm0 +
mov [ebp-30h] esi +
mov ecx [ebp+8] +
mov eax [ebp+0Ch] +
mov byte ptr [ebp-4] 1 +
lea eax [ecx+eax*4] +
mov [ebp-18h] eax +
cmp ecx eax +
jnb loc_42735A  +
mov ecx [ecx] +
call sub_425820  +
mov edx [ebp-20h] +
mov esi eax +
mov eax edx +
shr eax 19h +
test al 1 +
jz loc_42725E  +
lea ecx [ebp-28h] +
call sub_425A10  +
jmp loc_427266  +
xorps xmm0 xmm0 +
movlpd oword ptr [ebp-28h] xmm0 +
mov ecx [ebp-10h] +
test ecx ecx +
jnz loc_427272  +
mov [ebp-20h] ebx +
jmp loc_42729A  +
mov eax [ecx] +
lea edx [ebp-28h] +
push edx  +
push esi  +
push ecx  +
call dword ptr [eax+18h]  +
test al al +
jz loc_427286  +
mov eax [esi+4] +
jmp loc_427288  +
mov eax ebx +
mov [ebp-20h] eax +
test eax eax +
jz loc_42729A  +
mov byte ptr [ebp+0Fh] 1 +
cmp eax 1F001Fh +
jnz loc_42729D  +
mov [ebp+0Fh] bl +
mov ecx [ebp+8] +
mov ecx [ecx] +
call sub_425820  +
mov edx [ebp-30h] +
mov esi eax +
mov eax edx +
shr eax 19h +
test al 1 +
jz loc_4272BF  +
lea ecx [ebp-38h] +
call sub_425A10  +
jmp loc_4272C7  +
xorps xmm0 xmm0 +
movlpd oword ptr [ebp-38h] xmm0 +
mov ecx [ebp-14h] +
test ecx ecx +
jnz loc_4272D5  +
mov esi ebx +
mov [ebp-30h] esi +
jmp loc_4272FC  +
mov eax [ecx] +
lea edx [ebp-38h] +
push edx  +
push esi  +
push ecx  +
call dword ptr [eax+18h]  +
test al al +
jz loc_4272E9  +
mov esi [esi+4] +
jmp loc_4272EB  +
mov esi ebx +
mov [ebp-30h] esi +
test esi esi +
jz loc_4272FC  +
mov al 1 +
cmp esi 1F001Fh +
jnz loc_4272FE  +
mov al bl +
mov edi [ebp-20h] +
cmp [ebp+0Fh] al +
jnz loc_42735C  +
cmp edi esi +
jnz loc_42735C  +
mov eax edi +
shr eax 15h +
and eax 0Fh +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
call j_memcmp  +
add esp 0Ch +
test eax eax +
jz loc_427348  +
mov eax edi +
shr eax 19h +
not al  +
test al 1 +
jnz loc_42735C  +
push edi  +
lea edx [ebp-38h] +
lea ecx [ebp-28h] +
call sub_4258EF  +
mov edi [ebp-20h] +
mov esi [ebp-30h] +
test al al +
jz loc_42735C  +
mov ecx [ebp+8] +
add ecx 4 +
mov [ebp+8] ecx +
cmp ecx [ebp-18h] +
jb loc_42723F  +
mov bl 1 +
mov eax esi +
shr eax 19h +
test al 1 +
jz loc_427372  +
mov edx esi +
lea ecx [ebp-38h] +
call sub_425A10  +
mov edi [ebp-20h] +
mov ecx edi +
shr ecx 19h +
test cl 1 +
jz loc_427386  +
mov edx edi +
lea ecx [ebp-28h] +
call sub_425A10  +
mov al bl +
call sub_42CCB9  +
retn 8  +
***
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
push ecx  +
mov ecx [ebp+arg_0] +
push ecx  +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
or edi 0FFFFFFFFh +
xadd [esi+4] edi +
dec edi  +
jnz loc_42752E  +
test esi esi +
jz loc_42752E  +
mov ecx esi +
call sub_427747  +
push esi  +
call Mso20Win32Client_3788  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
test esi esi +
cmp dword ptr [esi] 0 +
push esi  +
mov edx offset nullsub_2 +
push esi  +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ecx] +
mov [ecx] eax +
test esi esi +
jz loc_427699  +
dec dword ptr [esi+8]  +
cmp dword ptr [esi+8] 0 +
jg loc_427699  +
mov ecx esi +
call sub_425DD7  +
mov ecx esi +
call sub_42756A  +
push esi  +
call Mso20Win32Client_3788  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ebp+arg_4] +
mov edx [ecx] +
mov ecx [ecx] +
cmp dword ptr [ecx+8] 0 +
cmp dword ptr [ecx+8] 0 +
push ecx  +
call sub_42CCE5  +
mov eax [esi] +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
sub esp 14h +
push esi  +
inc dword ptr [ecx+4]  +
mov eax [ecx] +
call sub_42CCE5  +
int 3  +
***
sub dword_447A24 1 +
mov esi dword_447F9C +
call sub_42CD18  +
mov eax [ebp+arg_0] +
push ecx  +
push ecx  +
mov eax large fs:2Ch +
push ecx  +
and esp 0FFFFFFF8h +
push esi  +
push edi  +
mov esi edx +
mov eax 204h +
mov edi ecx +
push 9  +
pop edx  +
cmp esi eax +
ja loc_428031  +
jz loc_428074  +
mov eax 101h +
cmp esi eax +
ja loc_427F56  +
jz loc_427F45  +
cmp esi 46h +
ja loc_427E5A  +
jz loc_427E48  +
lea eax [esi-1] +
sub eax 1 +
jz loc_427E39  +
sub eax 5 +
jz loc_427E25  +
sub eax 1 +
jz loc_427E25  +
sub eax 7 +
jz loc_427E0D  +
sub eax 11h +
jz loc_427DFE  +
sub eax 1 +
jz loc_4280CC  +
sub eax 1Ch +
jnz loc_4281C2  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 3Dh  +
call sub_428D80  +
jmp loc_42818D  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 20h  +
push 1Fh  +
jmp loc_427E1A  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0Fh  +
push 0Eh  +
pop edx  +
call sub_428B2C  +
jmp loc_42818D  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_428A5A  +
jmp loc_42818D  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 2  +
push 1Ch  +
jmp loc_427E1A  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 46h  +
push 0Bh  +
jmp loc_427F3A  +
mov eax esi +
sub eax 47h +
jz loc_427F2D  +
sub eax 9 +
jz loc_427F1E  +
sub eax 1 +
jz loc_427F06  +
sub eax 2Ah +
jz loc_427ED4  +
sub eax 3 +
jz loc_427EC2  +
sub eax 6 +
jz loc_427EAA  +
sub eax 7Ch +
jnz loc_4281C2  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 100h  +
push 17h  +
pop edx  +
call sub_428CDA  +
jmp loc_42818D  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 84h  +
call sub_428EBB  +
jmp loc_42818D  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 7Eh  +
push 11h  +
jmp loc_427E1A  +
mov ecx [ebp+arg_4] +
mov edx 0FFFFh +
cmp cx dx +
jnz loc_427EEB  +
mov eax ecx +
shr eax 10h +
cmp ax dx +
jz loc_427EF6  +
mov edx ecx +
mov ecx edi +
call sub_427D47  +
mov ecx eax +
push [ebp+arg_8]  +
push ecx  +
push [ebp+arg_0]  +
push 7Bh  +
push 21h  +
jmp loc_42811D  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 51h  +
push 0Fh  +
pop edx  +
call sub_428BCB  +
jmp loc_42818D  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 50h  +
push 10h  +
jmp loc_427F13  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 47h  +
push 0Ah  +
pop edx  +
call sub_4289AD  +
jmp loc_42818D  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
push 18h  +
jmp loc_427E9F  +
mov eax 200h +
cmp esi eax +
ja loc_42800B  +
jz loc_428003  +
lea eax [esi-102h] +
cmp eax 13h +
ja loc_4281C2  +
movzx eax ds:byte_428221[eax] +
jmp ds:off_4281FD[eax*4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_428AC3  +
jmp loc_42818D  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
push 19h  +
jmp loc_427E9F  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
push 1Ah  +
jmp loc_427E9F  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
push 16h  +
pop edx  +
call sub_428CDA  +
jmp loc_42818D  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
push 14h  +
jmp loc_427FC8  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
push 15h  +
jmp loc_427FC8  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_428F24  +
jmp loc_42818D  +
mov eax [ebp+arg_4] +
jmp loc_428113  +
mov eax esi +
sub eax 201h +
jz loc_428074  +
sub eax 1 +
jz loc_42806F  +
sub eax 1 +
jnz loc_4281C2  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
jmp loc_428101  +
mov eax 215h +
cmp esi eax +
ja loc_428090  +
jz loc_428079  +
lea eax [esi-205h] +
cmp eax edx +
ja loc_4281C2  +
movzx eax ds:byte_428245[eax] +
jmp ds:off_428235[eax*4]  +
mov edx [ebp+arg_4] +
call sub_427D47  +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_0]  +
push esi  +
push 3  +
jmp loc_42811D  +
mov eax [ebp+arg_4] +
jmp loc_4280E8  +
mov eax [ebp+arg_4] +
jmp loc_4280F5  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
push 8  +
pop edx  +
call sub_428904  +
jmp loc_42818D  +
mov eax 288h +
cmp esi eax +
ja loc_42815B  +
jz loc_42814A  +
add eax 0FFFFFFC4h +
cmp esi eax +
ja loc_428131  +
jz loc_428120  +
mov eax esi +
sub eax 245h +
jz loc_42810B  +
sub eax 1 +
jz loc_4280ED  +
sub eax 1 +
jz loc_4280E0  +
sub eax 4 +
jnz loc_4281C2  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_428895  +
jmp loc_42818D  +
mov edx [ebp+arg_4] +
call sub_427D47  +
xor edx edx +
inc edx  +
jmp loc_4280F7  +
mov edx [ebp+arg_4] +
call sub_427D47  +
xor edx edx +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_0]  +
push esi  +
mov ecx edi +
call sub_4287EC  +
jmp loc_42818D  +
mov edx [ebp+arg_4] +
call sub_427D47  +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_0]  +
push esi  +
push 2  +
pop edx  +
jmp loc_4280FF  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
push 7  +
jmp loc_428085  +
mov eax esi +
sub eax 282h +
jz loc_42814A  +
dec eax  +
sub eax 1 +
jz loc_42814A  +
sub eax 1 +
jz loc_42814A  +
sub eax 1 +
jnz loc_4281C2  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_428E52  +
jmp loc_42818D  +
mov eax 301h +
cmp esi eax +
ja loc_4281AA  +
jz loc_42817E  +
mov eax esi +
sub eax 290h +
jz loc_42814A  +
sub eax 1 +
jz loc_42814A  +
sub eax 12h +
jz loc_428195  +
sub eax 5Dh +
jnz loc_4281C2  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_428C71  +
pop edi  +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 2A3h  +
push 6  +
jmp loc_427E1A  +
mov eax esi +
sub eax 302h +
jz loc_42817E  +
sub eax 1 +
jz loc_42817E  +
sub eax 0Fh +
jz loc_4281E8  +
sub eax 7 +
jz loc_4281D3  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
push 23h  +
jmp loc_427E1A  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 319h  +
call sub_428DE9  +
jmp loc_42818D  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 312h  +
push 20h  +
jmp loc_427E1A  +
***
push 0FFFFFFFFh  +
xor eax eax +
mov eax [ebp+arg_0] +
push edi  +
push ebx  +
mov eax [ebp+arg_0] +
sub esp 2Ch +
push 0FFFFFFFFh  +
sub esp 120h +
call sub_42C3E4  +
push 0FFFFFFFFh  +
mov eax [ebp+arg_0] +
mov edx offset nullsub_2 +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
call sub_42CCE5  +
mov esi ecx +
push 22h  +
lea ecx [ebp-30h] +
call sub_428FB6  +
mov dword ptr [ebp-30h] offset off_436490 +
mov eax [ebp+8] +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-28h] eax +
mov eax [ebp+0Ch] +
mov [ebp-24h] eax +
mov eax [ebp+10h] +
mov [ebp-20h] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
mov eax [eax+14h] +
call eax  +
test al al +
jnz loc_428F79  +
mov eax [esi] +
lea ecx [ebp-30h] +
push ecx  +
mov ecx esi +
mov eax [eax+10h] +
call eax  +
test al al +
jz loc_428F7B  +
mov bl 1 +
mov edx [ebp+14h] +
mov al bl +
mov ecx [ebp-1Ch] +
mov [edx] ecx +
call sub_42CCB9  +
retn 10h  +
***
push [ebp+arg_0]  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
sub esp 58h +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov edx 215h +
mov eax [ecx+8] +
cmp eax edx +
ja loc_4291C9  +
jz loc_429203  +
sub eax 200h +
cmp eax 0Dh +
ja loc_4291FD  +
movzx eax ds:byte_429227[eax] +
jmp ds:off_429223[eax*4]  +
mov edx 2A3h +
cmp eax edx +
ja loc_4291FD  +
jz loc_429203  +
sub eax 241h +
cmp eax 0Eh +
ja loc_4291FD  +
movzx eax ds:byte_429243[eax] +
jmp ds:off_429237[eax*4]  +
movzx eax word ptr [ecx+0Ch] +
jmp loc_4291FF  +
push 8061C6h  +
call Mso20Win32Client_1360  +
xor eax eax +
pop ebp  +
retn 4  +
call GetMessageExtraInfo  +
test eax eax +
jz loc_42921D  +
mov ecx eax +
and ecx 0FFFFFF00h +
cmp ecx 0FF515700h +
jnz loc_4291FD  +
and eax 7Fh +
inc eax  +
jmp loc_4291FF  +
***
sub esp 48h +
push 0FFFFFFFFh  +
test eax eax +
push 0FFFFFFFFh  +
push ecx  +
sub esp 14h +
sub esp 0Ch +
xor eax eax +
xor eax eax +
mov eax [edi+0B8h] +
sub esp 20Ch +
sub esp 210h +
sub esp 210h +
push ecx  +
mov esi ecx +
push 0FFFFFFFFh  +
push ecx  +
push esi  +
mov edx [ebp+arg_8] +
mov ecx [ebp+arg_4] +
mov eax [esi] +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
pop ecx  +
call sub_42A0F2  +
sub esp 214h +
push ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push offset loc_42D31E  +
mov eax large fs:0 +
push eax  +
push ecx  +
push esi  +
push edi  +
mov eax dword_43F508 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
cmp dword_447B8C 0 +
jz loc_42A623  +
xor edi edi +
or eax 0FFFFFFFFh +
mov dword_447B8C edi +
xadd dword_447B14 eax +
dec eax  +
jnz loc_42A5C7  +
mov ecx offset oword_43F618 +
call sub_42A0D2  +
xorps xmm0 xmm0 +
movlpd oword ptr oword_43F618 xmm0 +
mov esi edi +
cmp dword_447B30[esi] edi +
jz loc_42A5F2  +
mov eax dword_447B24[esi] +
cmp eax 1 +
jz loc_42A5E6  +
cmp eax 2 +
jz loc_42A5E6  +
cmp eax 3 +
jnz loc_42A5F2  +
push dword_447B84  +
call dword_447B2C[esi]  +
mov eax dword_447B20[esi] +
test eax eax +
jz loc_42A603  +
push eax  +
call ds:FreeLibrary  +
mov dword_447B20[esi] edi +
mov dword_447B28[esi] edi +
mov dword_447B2C[esi] edi +
mov dword_447B30[esi] edi +
add esi 14h +
cmp esi 28h +
jl loc_42A5C9  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax offset RegDeleteKeyW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset ADVAPI32_dll_import_table  +
call sub_42C996  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset RegCloseKey +
jmp loc_42A639  +
***
mov eax offset RegQueryInfoKeyW +
jmp loc_42A639  +
***
mov eax offset RegEnumKeyExW +
jmp loc_42A639  +
***
mov eax offset RegOpenKeyExW +
jmp loc_42A639  +
***
mov eax offset RegSetValueExW +
jmp loc_42A639  +
***
mov eax offset RegCreateKeyExW +
jmp loc_42A639  +
***
mov eax offset RegDeleteValueW +
jmp loc_42A639  +
***
mov eax offset RegQueryValueExW +
jmp loc_42A639  +
***
mov eax offset ReportEventW +
jmp loc_42A639  +
***
mov eax offset RegisterEventSourceW +
jmp loc_42A639  +
***
mov eax offset DeregisterEventSource +
jmp loc_42A639  +
***
mov eax offset OleInitialize +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset ole32_dll_import_table  +
call sub_42C996  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset OleUninitialize +
jmp loc_42A69E  +
***
mov eax offset CoTaskMemFree +
jmp loc_42A69E  +
***
mov eax offset CoTaskMemRealloc +
jmp loc_42A69E  +
***
mov eax offset CoTaskMemAlloc +
jmp loc_42A69E  +
***
mov eax offset CoRegisterClassObject +
jmp loc_42A69E  +
***
mov eax offset CoRevokeClassObject +
jmp loc_42A69E  +
***
mov eax offset CoCreateInstance +
jmp loc_42A69E  +
***
mov eax offset CoRegisterMessageFilter +
jmp loc_42A69E  +
***
mov eax offset UnregisterClassW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset USER32_dll_import_table  +
call sub_42C996  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset GetCursorPos +
jmp loc_42A6EE  +
***
mov eax offset TrackPopupMenu +
jmp loc_42A6EE  +
***
mov eax offset SendMessageW +
jmp loc_42A6EE  +
***
mov eax offset CreatePopupMenu +
jmp loc_42A6EE  +
***
mov eax offset AppendMenuW +
jmp loc_42A6EE  +
***
mov eax offset GetMenuStringW +
jmp loc_42A6EE  +
***
mov eax offset ModifyMenuW +
jmp loc_42A6EE  +
***
mov eax offset GetWindowLongW +
jmp loc_42A6EE  +
***
mov eax offset SetWindowLongW +
jmp loc_42A6EE  +
***
mov eax offset ShowWindow +
jmp loc_42A6EE  +
***
mov eax offset PostMessageW +
jmp loc_42A6EE  +
***
mov eax offset IsWindowVisible +
jmp loc_42A6EE  +
***
mov eax offset CallNextHookEx +
jmp loc_42A6EE  +
***
mov eax offset SetWindowsHookExW +
jmp loc_42A6EE  +
***
mov eax offset MessageBoxW +
jmp loc_42A6EE  +
***
mov eax offset UnhookWindowsHookEx +
jmp loc_42A6EE  +
***
mov eax offset DestroyIcon +
jmp loc_42A6EE  +
***
mov eax offset SetWindowTextW +
jmp loc_42A6EE  +
***
mov eax offset CallWindowProcW +
jmp loc_42A6EE  +
***
mov eax offset GetWindowRect +
jmp loc_42A6EE  +
***
mov eax offset GetClientRect +
jmp loc_42A6EE  +
***
mov eax offset InvalidateRect +
jmp loc_42A6EE  +
***
mov eax offset MoveWindow +
jmp loc_42A6EE  +
***
mov eax offset LoadIconW +
jmp loc_42A6EE  +
***
mov eax offset GetSystemMetrics +
jmp loc_42A6EE  +
***
mov eax offset SetWindowPos +
jmp loc_42A6EE  +
***
mov eax offset GetWindowPlacement +
jmp loc_42A6EE  +
***
mov eax offset SetWindowPlacement +
jmp loc_42A6EE  +
***
mov eax offset MonitorFromWindow +
jmp loc_42A6EE  +
***
mov eax offset GetMonitorInfoW +
jmp loc_42A6EE  +
***
mov eax offset SendMessageTimeoutW +
jmp loc_42A6EE  +
***
mov eax offset GetParent +
jmp loc_42A6EE  +
***
mov eax offset EnumWindows +
jmp loc_42A6EE  +
***
mov eax offset GetKeyState +
jmp loc_42A6EE  +
***
mov eax offset BringWindowToTop +
jmp loc_42A6EE  +
***
mov eax offset SetFocus +
jmp loc_42A6EE  +
***
mov eax offset DefWindowProcW +
jmp loc_42A6EE  +
***
mov eax offset CharNextW +
jmp loc_42A6EE  +
***
mov eax offset GetClassNameW +
jmp loc_42A6EE  +
***
mov eax offset FindWindowExW +
jmp loc_42A6EE  +
***
mov eax offset GetFocus +
jmp loc_42A6EE  +
***
mov eax offset IsChild +
jmp loc_42A6EE  +
***
mov eax offset NotifyWinEvent +
jmp loc_42A6EE  +
***
mov eax offset GetAsyncKeyState +
jmp loc_42A6EE  +
***
mov eax offset RegisterClassExW +
jmp loc_42A6EE  +
***
mov eax offset GetClassInfoExW +
jmp loc_42A6EE  +
***
mov eax offset LoadCursorW +
jmp loc_42A6EE  +
***
mov eax offset CreateWindowExW +
jmp loc_42A6EE  +
***
mov eax offset KillTimer +
jmp loc_42A6EE  +
***
mov eax offset SetTimer +
jmp loc_42A6EE  +
***
mov eax offset SetParent +
jmp loc_42A6EE  +
***
mov eax offset GetClassInfoW +
jmp loc_42A6EE  +
***
mov eax offset MonitorFromRect +
jmp loc_42A6EE  +
***
mov eax offset IsWindowEnabled +
jmp loc_42A6EE  +
***
mov eax offset RegisterWindowMessageW +
jmp loc_42A6EE  +
***
mov eax offset TranslateMessage +
jmp loc_42A6EE  +
***
mov eax offset DispatchMessageW +
jmp loc_42A6EE  +
***
mov eax offset PostQuitMessage +
jmp loc_42A6EE  +
***
mov eax offset SetActiveWindow +
jmp loc_42A6EE  +
***
mov eax offset GetWindow +
jmp loc_42A6EE  +
***
mov eax offset EnableWindow +
jmp loc_42A6EE  +
***
mov eax offset GetActiveWindow +
jmp loc_42A6EE  +
***
mov eax offset SetForegroundWindow +
jmp loc_42A6EE  +
***
mov eax offset IsWindow +
jmp loc_42A6EE  +
***
mov eax offset GetUpdateRect +
jmp loc_42A6EE  +
***
mov eax offset GetKeyboardLayout +
jmp loc_42A6EE  +
***
mov eax offset GetKeyboardState +
jmp loc_42A6EE  +
***
mov eax offset ToUnicodeEx +
jmp loc_42A6EE  +
***
mov eax offset DestroyWindow +
jmp loc_42A6EE  +
***
mov eax offset ScreenToClient +
jmp loc_42A6EE  +
***
mov eax offset TrackMouseEvent +
jmp loc_42A6EE  +
***
mov eax offset GetPointerInfo +
jmp loc_42A6EE  +
***
mov eax offset GetMessageExtraInfo +
jmp loc_42A6EE  +
***
mov eax offset Mso98Win32Client_4268 +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset Mso98Win32Client_dll_import_table  +
call sub_42C996  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset Mso98Win32Client_6353 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_6200 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_2104 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_6364 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_5966 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_6201 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_6018 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_6046 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_6040 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_6310 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_2621 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_1653 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_2229 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_1697 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_5917 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_5939 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_4453 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_4261 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_5894 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_6060 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_5886 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_6323 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_5871 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_3748 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_6001 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_6270 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_1985 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_5963 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_5964 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_2553 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_279 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_6058 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_1633 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_6345 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_235 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_5860 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_5881 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_5989 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_1812 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_64 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_816 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_2109 +
jmp loc_42A9B3  +
***
mov eax offset Mso98Win32Client_2298 +
jmp loc_42A9B3  +
***
mov eax offset mso40uiWin32Client_2434 +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset mso40uiWin32Client_dll_import_table  +
call sub_42C996  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset mso40uiWin32Client_804 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_4571 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_123 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_4625 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_1012 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_4886 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_7 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_4425 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_3134 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_941 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_1900 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_866 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_684 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_4157 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_865 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_3662 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_1214 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_2504 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_166 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_837 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_433 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_2061 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_1068 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_649 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_3008 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_3584 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_914 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_1566 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_2551 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_1136 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_1321 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_554 +
jmp loc_42AB4C  +
***
mov eax offset mso40uiWin32Client_780 +
jmp loc_42AB4C  +
***
mov eax offset Mso30Win32Client_686 +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset Mso30Win32Client_dll_import_table  +
call sub_42C996  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset Mso30Win32Client_1326 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_3931 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_2219 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_196 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_1626 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_1298 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_4203 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_4262 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_141 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_432 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_4475 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_4193 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_4339 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_3848 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_3297 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_4240 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_4476 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_4355 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_2093 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_4110 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_4466 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_3959 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_4143 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_4281 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_4238 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_3686 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_4231 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_442 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_705 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_1664 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_1158 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_1065 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_598 +
jmp loc_42AD01  +
***
mov eax offset Mso30Win32Client_659 +
jmp loc_42AD01  +
***
mov eax offset Mso20Win32Client_1349 +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset Mso20Win32Client_dll_import_table  +
call sub_42C996  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset Mso20Win32Client_1604 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_2055 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1360 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_3788 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_3953 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_3572 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1935 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_151 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1743 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_177 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_2257 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_3604 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1440 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4242 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4249 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1797 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4010 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1865 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1828 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_3968 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_3846 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_502 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4271 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4222 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4062 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_3525 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_3849 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_284 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1620 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_785 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1193 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_382 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4212 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4217 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1091 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_640 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_2237 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1102 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4165 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_355 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1128 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_2313 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_554 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4210 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4053 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_56 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_2860 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_2904 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1854 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4205 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4219 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4213 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_916 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1830 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_2323 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1884 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1826 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4182 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4186 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4184 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4050 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1055 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1273 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_3725 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_378 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4153 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4295 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_3910 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4154 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_316 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_120 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_4168 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1691 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1549 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_1676 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_364 +
jmp loc_42AE40  +
***
mov eax offset Mso20Win32Client_3990 +
jmp loc_42AE40  +
***
call sub_42B183  +
mov esi ecx +
xor edi edi +
push 18h  +
push edi  +
lea eax [esi+14h] +
push eax  +
call j_memset  +
add esp 0Ch +
mov [esi+2Ch] edi +
mov [esi+30h] edi +
mov eax esi +
mov [esi+34h] edi +
pop edi  +
pop esi  +
retn   +
***
push ecx  +
push [ebp+lpProcName]  +
mov eax [ebp+arg_4] +
mov eax dword_441FB0 +
mov eax [ebp+arg_0] +
test eax eax +
push 8  +
push esi  +
push esi  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_42B58E  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_42B58E  +
cmp dword ptr [esi] 0 +
jz loc_42B568  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_42B2AB  +
jmp loc_42B58E  +
push edi  +
push offset unk_441FB8  +
call sub_42B1D4  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_42B58D  +
push [ebp+arg_8]  +
mov ecx edi +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call ds:off_42F2B8  +
call edi  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax offset PathCreateFromUrlW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset SHLWAPI_dll_import_table  +
call sub_42C996  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset SetCurrentProcessExplicitAppUserModelID +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset SHELL32_dll_import_table  +
call sub_42C996  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset CommandLineToArgvW +
jmp loc_42B5B2  +
***
mov eax offset SHGetSpecialFolderPathW +
jmp loc_42B5B2  +
***
mov eax offset SHFileOperationW +
jmp loc_42B5B2  +
***
mov eax offset ObtainUserAgentString +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset urlmon_dll_import_table  +
call sub_42C996  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset URLDownloadToFileW +
jmp loc_42B5DF  +
***
call j__set_app_type  +
call sub_42C322  +
call sub_401ED1  +
push eax  +
call j__set_new_mode  +
pop ecx  +
retn   +
***
mov ecx [ebp-14h] +
mov esp [ebp-18h] +
call sub_42C2DF  +
test al al +
jz loc_42B836  +
cmp byte ptr [ebp-19h] 0 +
jnz loc_42B80F  +
call j__c_exit  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-20h] +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push 7  +
call sub_42C194  +
push esi  +
call j_exit  +
***
push dword ptr [ebp-20h]  +
call j__exit  +
***
call sub_42C0DB  +
cmp ecx dword_43F508 +
call sub_42C3E4  +
mov edi [ebp+10h] +
test al al +
call sub_42C3E4  +
xor esi esi +
mov [ebp-4] esi +
mov edi [ebp+8] +
mov [ebp-24h] esi +
cmp esi [ebp+10h] +
jz loc_42B935  +
sub edi [ebp+0Ch] +
mov [ebp+8] edi +
mov ecx [ebp+14h] +
call ds:off_42F2B8  +
mov ecx edi +
call dword ptr [ebp+14h]  +
inc esi  +
jmp loc_42B8EF  +
mov eax [ebp-14h] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
mov eax [eax] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_42B94E  +
mov dword ptr [ebp-28h] 0 +
mov eax [ebp-28h] +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov eax [ebp+arg_0] +
test eax eax +
cmp [ebp+arg_0] 0 +
cmp byte_441FDD 0 +
call sub_42C3E4  +
call sub_42C5FA  +
cmp byte_441FDC 0 +
cmp dword_441FE0 0FFFFFFFFh +
push [ebp+arg_0]  +
pop eax  +
retn   +
***
test [ebp+arg_0] 1 +
push 0  +
sub esp 324h +
push 8  +
sub esp 31Ch +
call sub_42BE36  +
push 0FA0h  +
push esi  +
push esi  +
push edi  +
mov edi offset stru_44231C +
push edi  +
call ds:EnterCriticalSection  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 0 +
jnz loc_42BF40  +
or dword ptr [esi] 0FFFFFFFFh +
jmp loc_42BF5C  +
push 64h  +
call sub_42BF9D  +
pop ecx  +
jmp loc_42BF2C  +
cmp dword ptr [esi] 0FFFFFFFFh +
jz loc_42BF36  +
mov eax large fs:2Ch +
mov ecx TlsIndex +
mov ecx [eax+ecx*4] +
mov eax dword_43F4FC +
mov [ecx+4] eax +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
push esi  +
push esi  +
call sub_42C3E4  +
test al al +
sub esp 14h +
mov ecx dword_43F508 +
retn   +
***
push 0  +
call sub_406D67  +
xor eax eax +
sub esp 324h +
sub esp 44h +
push 44h  +
lea eax [ebp+StartupInfo] +
push 0  +
push eax  +
call j_memset  +
add esp 0Ch +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_42C2D5  +
movzx eax [ebp+StartupInfo.wShowWindow] +
leave   +
retn   +
push 0Ah  +
pop eax  +
leave   +
retn   +
***
test eax eax +
retn   +
***
push esi  +
and dword_442350 0 +
mov esi offset unk_439E40 +
mov esi offset unk_439E48 +
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_43F508 +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
push ebp  +
mov ebp esp +
and dword_442354 0 +
sub esp 24h +
or dword_43F50C 1 +
push 0Ah  +
call ds:IsProcessorFeaturePresent  +
test eax eax +
jz loc_42C5F6  +
and dword ptr [ebp-10h] 0 +
xor eax eax +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
lea edi [ebp-24h] +
push ebx  +
cpuid   +
mov esi ebx +
pop ebx  +
mov [edi] eax +
mov [edi+4] esi +
mov [edi+8] ecx +
xor ecx ecx +
mov [edi+0Ch] edx +
mov eax [ebp-24h] +
mov edi [ebp-1Ch] +
mov [ebp-0Ch] eax +
xor edi 6C65746Eh +
mov eax [ebp-18h] +
xor eax 49656E69h +
mov [ebp-8] eax +
mov eax [ebp-20h] +
xor eax 756E6547h +
mov [ebp-4] eax +
xor eax eax +
inc eax  +
push ebx  +
cpuid   +
mov esi ebx +
pop ebx  +
lea ebx [ebp-24h] +
mov [ebx] eax +
mov eax [ebp-4] +
mov [ebx+4] esi +
or eax edi +
or eax [ebp-8] +
mov [ebx+8] ecx +
mov [ebx+0Ch] edx +
jnz loc_42C4F7  +
mov eax [ebp-24h] +
and eax 0FFF3FF0h +
cmp eax 106C0h +
jz loc_42C4E6  +
cmp eax 20660h +
jz loc_42C4E6  +
cmp eax 20670h +
jz loc_42C4E6  +
cmp eax 30650h +
jz loc_42C4E6  +
cmp eax 30660h +
jz loc_42C4E6  +
cmp eax 30670h +
jnz loc_42C4F7  +
mov edi dword_442358 +
or edi 1 +
mov dword_442358 edi +
jmp loc_42C4FD  +
mov edi dword_442358 +
mov ecx [ebp-1Ch] +
push 7  +
pop eax  +
mov [ebp-4] ecx +
cmp [ebp-0Ch] eax +
jl loc_42C53A  +
xor ecx ecx +
push ebx  +
cpuid   +
mov esi ebx +
pop ebx  +
lea ebx [ebp-24h] +
mov [ebx] eax +
mov [ebx+4] esi +
mov [ebx+8] ecx +
mov ecx [ebp-4] +
mov [ebx+0Ch] edx +
mov ebx [ebp-20h] +
test ebx 200h +
jz loc_42C53D  +
or edi 2 +
mov dword_442358 edi +
jmp loc_42C53D  +
mov ebx [ebp-10h] +
mov eax dword_43F50C +
or eax 2 +
mov dword_442354 1 +
mov dword_43F50C eax +
test ecx 100000h +
jz loc_42C5F3  +
or eax 4 +
mov dword_442354 2 +
mov dword_43F50C eax +
test ecx 8000000h +
jz loc_42C5F3  +
test ecx 10000000h +
jz loc_42C5F3  +
xor ecx ecx +
xor eax eax +
push [ebp+arg_0]  +
call sub_412F81  +
pop ecx  +
pop ebp  +
retn   +
***
call sub_406D67  +
test ds:dword_42F610 1000h +
mov eax dword_442360 +
call sub_42C72A  +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
call sub_42C72A  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
push edi  +
call sub_42C6F3  +
mov ecx [ebp+arg_0] +
mov edi offset __ImageBase +
mov [ebp+var_34] 24h +
mov [ebp+var_30] ecx +
mov eax [ecx+4] +
mov ebx [ecx+8] +
add eax edi +
mov edx [ecx+0Ch] +
add ebx edi +
mov esi [ecx+10h] +
add edx edi +
add esi edi +
mov [ebp+Arguments] ebx +
mov edi [ecx+14h] +
add edi offset __ImageBase +
mov [ebp+lpLibFileName] eax +
mov [ebp+var_10] edi +
mov edi [ecx+1Ch] +
mov [ebp+var_8] edi +
mov edi [ebp+arg_4] +
mov [ebp+var_2C] edi +
xor edi edi +
test dword ptr [ecx] 1 +
mov [ebp+var_24] edi +
mov [ebp+lpProcName] edi +
mov [ebp+var_1C] edi +
mov [ebp+var_18] edi +
mov [ebp+var_14] edi +
jnz loc_42CA27  +
lea eax [ebp+var_34] +
mov [ebp+Arguments] eax +
call sub_42C934  +
lea eax [ebp+Arguments] +
push eax  +
push 1  +
push edi  +
push 0C06D0057h  +
call ds:RaiseException  +
xor eax eax +
jmp loc_42CBFE  +
mov eax [ebp+arg_4] +
mov edi [ebx] +
sub eax edx +
sar eax 2 +
mov [ebp+var_C] eax +
mov ecx [esi+eax*4] +
mov eax ecx +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+var_24] eax +
lea eax (__ImageBase+2)[ecx] +
jnz loc_42CA4F  +
movzx eax cx +
mov ebx dword_447B94 +
xor esi esi +
mov [ebp+lpProcName] eax +
test ebx ebx +
jz loc_42CA7D  +
lea eax [ebp+var_34] +
mov ecx ebx +
push eax  +
push esi  +
call ds:off_42F2B8  +
call ebx  +
mov esi eax +
test esi esi +
jnz loc_42CBD3  +
mov ebx dword_447B94 +
test edi edi +
jnz loc_42CB18  +
test ebx ebx +
jz loc_42CA9F  +
lea eax [ebp+var_34] +
mov ecx ebx +
push eax  +
push 1  +
call ds:off_42F2B8  +
call ebx  +
mov edi eax +
test edi edi +
jnz loc_42CB00  +
xor ebx ebx +
push ebx  +
push ebx  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExA  +
mov edi eax +
test edi edi +
jnz loc_42CB00  +
call ds:GetLastError  +
mov edi off_43F610 +
mov [ebp+var_14] eax +
test edi edi +
jz loc_42CADB  +
lea eax [ebp+var_34] +
mov ecx edi +
push eax  +
push 3  +
call ds:off_42F2B8  +
call edi  +
mov edi eax +
test edi edi +
jnz loc_42CB00  +
lea eax [ebp+var_34] +
mov [ebp+Arguments] eax +
call sub_42C934  +
lea eax [ebp+Arguments] +
push eax  +
push 1  +
push ebx  +
push 0C06D007Eh  +
call ds:RaiseException  +
mov eax [ebp+var_18] +
jmp loc_42CBFE  +
mov ecx [ebp+Arguments] +
mov eax edi +
xchg eax [ecx] +
cmp eax edi +
jnz loc_42CB12  +
push edi  +
call ds:FreeLibrary  +
mov ebx dword_447B94 +
mov [ebp+var_1C] edi +
test ebx ebx +
jz loc_42CB31  +
lea eax [ebp+var_34] +
mov ecx ebx +
push eax  +
push 2  +
call ds:off_42F2B8  +
call ebx  +
mov esi eax +
test esi esi +
jnz loc_42CBCE  +
mov eax [ebp+arg_0] +
xor ebx ebx +
cmp [eax+14h] ebx +
jz loc_42CB70  +
cmp [eax+1Ch] ebx +
jz loc_42CB70  +
mov eax [edi+3Ch] +
cmp dword ptr [eax+edi] 4550h +
jnz loc_42CB70  +
mov ecx [ebp+var_8] +
cmp [eax+edi+8] ecx +
jnz loc_42CB70  +
cmp edi [eax+edi+34h] +
jnz loc_42CB70  +
mov esi [ebp+var_C] +
mov eax [ebp+var_10] +
mov esi [eax+esi*4] +
test esi esi +
jnz loc_42CBCE  +
push [ebp+lpProcName]  +
push edi  +
call ds:GetProcAddress  +
mov esi eax +
test esi esi +
jnz loc_42CBCE  +
call ds:GetLastError  +
mov esi off_43F610 +
mov [ebp+var_14] eax +
test esi esi +
jz loc_42CBA9  +
lea eax [ebp+var_34] +
mov ecx esi +
push eax  +
push 4  +
call ds:off_42F2B8  +
call esi  +
mov esi eax +
test esi esi +
jnz loc_42CBCE  +
lea eax [ebp+var_34] +
mov [ebp+var_10] eax +
call sub_42C934  +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push ebx  +
push 0C06D007Fh  +
call ds:RaiseException  +
call sub_42C6F3  +
mov esi [ebp+var_18] +
mov eax [ebp+arg_4] +
mov [eax] esi +
mov ebx dword_447B94 +
test ebx ebx +
jz loc_42CBF7  +
and [ebp+var_14] 0 +
lea eax [ebp+var_34] +
push eax  +
push 5  +
mov ecx ebx +
mov [ebp+var_1C] edi +
mov [ebp+var_18] esi +
call ds:off_42F2B8  +
call ebx  +
call sub_42C934  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov eax offset RegGetValueW +
jmp loc_42A639  +
***
mov eax offset EventUnregister +
jmp loc_42A639  +
***
mov eax offset RegOpenKeyExA +
jmp loc_42A639  +
***
mov eax offset EventRegister +
jmp loc_42A639  +
***
mov eax offset EventWriteTransfer +
jmp loc_42A639  +
***
push ecx  +
mov ecx [ebp-0Ch] +
mov ecx [ebp-10h] +
mov ecx [ebp-14h] +
lea eax [esp+4+arg_0] +
lea eax [esp+4+arg_0] +
lea eax [esp+4+arg_0] +
lea eax [esp+4+arg_0] +
xor ecx ebp +
mov [esp+4+arg_4] ebx +
mov eax [esp+8+arg_4] +
push ebx  +
push ebp  +
mov eax [esp+arg_4] +
sub ecx eax +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb loc_42D081  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp loc_42D073  +
***
cmp dword_442354 6 +
jl loc_42D09A  +
movd eax xmm0 +
shl eax 1 +
jb loc_42D0BD  +
cmp eax 9E000000h +
jnb loc_42D0AE  +
cvttss2si eax xmm0 +
retn   +
***
cmp eax 9F000000h +
jnb loc_42D0C4  +
shl eax 7 +
bts eax 1Fh +
retn   +
***
cmp eax 7F000000h +
jb loc_42D0A9  +
cvttss2si ecx ds:dword_436DF0 +
cmc   +
sbb eax eax +
retn   +
***
cmp dword_442354 6 +
jl loc_42D0EA  +
lea ecx [ebp+0Ch] +
jmp loc_401A2E  +
***
lea ecx [ebp-14h] +
lea ecx [ebp-20h] +
lea ecx [ebp-1Ch] +
lea ecx [ebp-18h] +
lea ecx [ebp-10h] +
jmp loc_40121A  +
***
lea ecx [ebp-14h] +
lea ecx [ebp-10h] +
lea ecx [ebp-18h] +
jmp loc_401A2E  +
***
lea ecx [ebp-10h] +
lea ecx [ebp-14h] +
jmp loc_401A2E  +
***
lea ecx [ebp-10h] +
jmp loc_401A2E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F44 +
jmp loc_42C614  +
***
pop ecx  +
retn   +
***
lea ecx [ebp-10h] +
jmp loc_403B52  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-24h] +
lea ecx [ebp-2Ch] +
pop ecx  +
retn   +
***
lea ecx [ebp-18h] +
jmp Mso20Win32Client_177  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43A030 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43A05C +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43A088 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
lea ecx [ebp-24h] +
lea ecx [ebp-28h] +
jmp loc_404717  +
***
lea ecx [ebp-10h] +
jmp loc_404F0B  +
***
lea ecx [ebp+8] +
jmp loc_404F0B  +
***
lea ecx [ebp-60h] +
jmp loc_404944  +
***
lea ecx [ebp-2118h] +
lea ecx [ebp-2118h] +
jmp loc_4048FF  +
***
lea ecx [ebp-2224h] +
lea ecx [ebp-225Ch] +
jmp sub_4056E1  +
***
lea ecx [ebp-430h] +
lea ecx [ebp-418h] +
jmp loc_4048FF  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-434h] +
xor ecx eax +
call sub_42B849  +
mov ecx [edx-8] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43A270 +
jmp loc_42C614  +
***
lea ecx [ebp-5Ch] +
jmp loc_406EDA  +
***
lea ecx [ebp-88h] +
lea ecx [ebp-7Ch] +
lea ecx [ebp-2Ch] +
jmp sub_407967  +
***
lea ecx [ebp-1Ch] +
jmp Mso20Win32Client_177  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 34h +
jmp sub_407967  +
***
lea ecx [ebp-1230h] +
lea ecx [ebp-1234h] +
lea ecx [ebp-1238h] +
jmp loc_40121A  +
***
lea ecx [ebp-18h] +
jmp loc_401A2E  +
***
lea ecx [ebp-10h] +
jmp loc_40121A  +
***
lea ecx [ebp-10B4h] +
jmp loc_40121A  +
***
lea ecx [ebp-1068h] +
jmp loc_40121A  +
***
lea ecx [ebp-1064h] +
jmp loc_40121A  +
***
lea ecx [ebp-1078h] +
jmp loc_40121A  +
***
lea ecx [ebp+0Ch] +
jmp loc_40121A  +
***
lea ecx [ebp-14h] +
lea ecx [ebp-10h] +
lea ecx [ebp-18h] +
jmp loc_40121A  +
***
lea ecx [ebp-1068h] +
jmp loc_40121A  +
***
lea ecx [ebp-10h] +
jmp loc_401A2E  +
***
lea ecx [ebp-324h] +
lea ecx [ebp-32Ch] +
lea ecx [ebp-338h] +
lea ecx [ebp-328h] +
lea ecx [ebp-334h] +
jmp loc_40121A  +
***
lea ecx [ebp-20h] +
lea ecx [ebp-14h] +
jmp loc_40121A  +
***
lea ecx [ebp-147Ch] +
jmp loc_410E9F  +
***
lea ecx [ebp-22ACh] +
jmp loc_406D25  +
***
lea ecx [ebp-105Ch] +
jmp loc_406D25  +
***
lea ecx [ebp-20A4h] +
jmp loc_406D25  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-44h] +
jmp Mso20Win32Client_177  +
***
lea ecx [ebp-20D4h] +
lea ecx [ebp-20C4h] +
lea ecx [ebp-20E4h] +
lea ecx [ebp-20ACh] +
jmp loc_40121A  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20E8h] +
xor ecx eax +
call sub_42B849  +
mov ecx [edx-8] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43A710 +
jmp loc_42C614  +
***
lea ecx [ebp-21Ch] +
jmp loc_406D25  +
***
lea ecx [ebp+8] +
jmp loc_4124FC  +
***
lea ecx [ebp-18h] +
lea ecx [ebp-18h] +
jmp loc_41230A  +
***
lea ecx [ebp-24h] +
jmp loc_4127E3  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 0Ch +
jmp sub_412062  +
***
lea ecx [ebp-14h] +
jmp loc_41232D  +
***
mov ecx [ebp+8] +
mov ecx [ebp-10h] +
mov ecx [ebp+8] +
jmp loc_4110A5  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43A86C +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43A8A8 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
lea ecx [ebp+0Ch] +
jmp sub_4130CF  +
***
lea ecx [ebp-10h] +
jmp sub_4130CF  +
***
lea ecx [ebp-18h] +
jmp sub_4130CF  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43A968 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43A9C8 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43AA20 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-8] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43AA54 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0Ch] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43AA54 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43AA54 +
jmp loc_42C614  +
***
lea ecx [ebp-30h] +
jmp sub_413C08  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43AAD8 +
jmp loc_42C614  +
***
mov edx [esp+arg_4] +
lea ecx [ebp-20h] +
jmp sub_41456C  +
***
lea ecx [ebp-20h] +
jmp sub_41463A  +
***
lea ecx [ebp-20h] +
jmp sub_414702  +
***
lea ecx [ebp-20h] +
jmp sub_4147CA  +
***
lea ecx [ebp-20h] +
jmp sub_41488D  +
***
lea ecx [ebp-20h] +
jmp sub_4149A1  +
***
mov eax offset unk_43AC90 +
jmp loc_42C614  +
***
lea ecx [ebp-6E4h] +
jmp loc_415341  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-6F0h] +
xor ecx eax +
call sub_42B849  +
mov ecx [edx-4] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43AD54 +
jmp loc_42C614  +
***
lea ecx [ebp-10h] +
jmp sub_415BFF  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43AD80 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43ADAC +
jmp loc_42C614  +
***
lea ecx [ebp-124h] +
lea ecx [ebp-124h] +
jmp loc_4163E6  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_42DEB8  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp loc_401A2E  +
retn   +
***
lea ecx [ebp+0Ch] +
jmp loc_401A2E  +
***
lea ecx [ebp-14h] +
jmp loc_418D66  +
***
lea ecx [ebp+10h] +
jmp loc_401A2E  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-14h] +
mov ecx [ebp-10h] +
mov ecx [ebp-14h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 2FCh +
jmp loc_418D7D  +
***
lea ecx [ebp-14h] +
jmp loc_418D4B  +
***
lea ecx [ebp-10h] +
lea ecx [ebp+0Ch] +
lea ecx [ebp-18h] +
jmp loc_416814  +
***
lea ecx [ebp+0Ch] +
lea ecx [ebp-14h] +
jmp loc_416814  +
***
lea ecx [ebp+8] +
jmp loc_401A2E  +
***
lea ecx [ebp-14h] +
jmp loc_418CF8  +
***
lea ecx [ebp-10h] +
jmp loc_401A2E  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43B0D8 +
jmp loc_42C614  +
***
lea ecx [ebp-14h] +
jmp loc_41F315  +
***
pop ecx  +
retn   +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-14h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 208h +
jmp loc_401A2E  +
***
lea ecx [ebp-10h] +
pop ecx  +
retn   +
***
lea ecx [ebp-60h] +
jmp loc_41A6FC  +
***
pop ecx  +
lea ecx [ebp+8] +
jmp loc_41A6AD  +
***
pop ecx  +
retn   +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
pop ecx  +
retn   +
***
lea ecx [ebp-1Ch] +
jmp loc_41B599  +
***
lea ecx [ebp-10h] +
lea ecx [ebp+8] +
lea ecx [ebp-18h] +
lea ecx [ebp-19h] +
jmp loc_41B673  +
***
lea ecx [ebp-10h] +
lea ecx [ebp+8] +
lea ecx [ebp-18h] +
jmp loc_416814  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_42E35B  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
lea ecx [ebp+8] +
jmp loc_401A2E  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43B464 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-44h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28Ch] +
xor ecx eax +
call sub_42B849  +
mov ecx [edx-4] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
mov ecx [edx-4] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1068h] +
xor ecx eax +
call sub_42B849  +
mov ecx [edx-4] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
lea ecx [ebp-264h] +
jmp sub_4130CF  +
***
lea ecx [ebp-44h] +
jmp loc_41B599  +
***
lea ecx [ebp-441h] +
lea ecx [ebp-420h] +
jmp loc_4163E6  +
***
mov ecx [edx-4] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43B504 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43B538 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-450h] +
xor ecx eax +
call sub_42B849  +
mov ecx [edx-4] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 20h +
jmp loc_4227FA  +
***
lea ecx [ebp-64h] +
lea ecx [ebp-40h] +
jmp loc_4227FA  +
***
lea ecx [ebp-3Ch] +
jmp sub_4227DC  +
***
lea ecx [ebp-164h] +
lea ecx [ebp-164h] +
lea ecx [ebp-278h] +
lea ecx [ebp-278h] +
jmp loc_4163E6  +
***
mov ecx [ebp-14h] +
mov ecx [ebp-10h] +
mov ecx [ebp-14h] +
mov ecx [ebp-10h] +
add ecx 118h +
jmp loc_4163E6  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 4 +
jmp loc_4227FA  +
***
lea ecx [ebp-14h] +
jmp sub_4130CF  +
***
pop ecx  +
mov ecx [ebp-10h] +
add ecx 4 +
jmp sub_41A78B  +
***
lea ecx [ebp-14h] +
pop ecx  +
lea ecx [ebp-18h] +
jmp loc_4249DD  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 38h +
jmp loc_4227FA  +
***
lea ecx [ebp-60h] +
jmp sub_4236FB  +
***
lea ecx [ebp-54h] +
jmp sub_4236FB  +
***
lea ecx [ebp-34h] +
lea ecx [ebp-2Ch] +
lea ecx [ebp-40h] +
lea ecx [ebp-40h] +
lea ecx [ebp+10h] +
lea ecx [ebp-40h] +
jmp sub_42317D  +
***
lea ecx [ebp+0Ch] +
jmp loc_401A2E  +
***
pop ecx  +
retn   +
***
lea ecx [ebp+8] +
lea ecx [ebp-0Dh] +
jmp loc_41B673  +
***
lea ecx [ebp-31h] +
lea ecx [ebp-30h] +
jmp sub_423089  +
***
mov ecx [ebp-14h] +
mov ecx [ebp-14h] +
add ecx 18h +
jmp loc_401A2E  +
***
lea ecx [ebp-0B8h] +
lea ecx [ebp-0A8h] +
jmp loc_41B599  +
***
lea ecx [ebp-10h] +
lea ecx [ebp-18h] +
jmp loc_416814  +
***
lea ecx [ebp-78h] +
jmp loc_427390  +
***
mov ecx [ebp-14h] +
jmp sub_406562  +
***
mov ecx [ebp-10h] +
jmp sub_42756A  +
***
lea ecx [ebp-34h] +
jmp loc_41B599  +
***
pop ecx  +
mov ecx [ebp+8] +
pop ecx  +
retn   +
***
lea ecx [ebp-10h] +
jmp loc_427536  +
***
pop ecx  +
retn   +
***
pop ecx  +
mov ecx [ebp+8] +
pop ecx  +
retn   +
***
lea ecx [ebp-30h] +
pop ecx  +
mov ecx [ebp-14h] +
pop ecx  +
retn   +
***
lea ecx [ebp-128h] +
lea ecx [ebp-140h] +
jmp loc_41B599  +
***
lea ecx [ebp-10h] +
lea ecx [ebp-14h] +
jmp loc_401A2E  +
***
lea ecx [ebp-34h] +
lea ecx [ebp-24h] +
jmp loc_41B599  +
***
lea ecx [ebp-1Ch] +
lea ecx [ebp-2Ch] +
jmp loc_41B599  +
***
lea ecx [ebp-28h] +
lea ecx [ebp-38h] +
jmp loc_41B599  +
***
mov ecx [ebp-10h] +
mov ecx [ebp-10h] +
add ecx 14h +
jmp loc_401A2E  +
***
mov ecx [ebp-10h] +
jmp loc_41232D  +
***
lea ecx [ebp-38h] +
jmp sub_4227DC  +
***
lea ecx [ebp-3Ch] +
jmp loc_428F8D  +
***
lea ecx [ebp-30h] +
jmp loc_428F8D  +
***
lea ecx [ebp-34h] +
jmp loc_428F8D  +
***
lea ecx [ebp-38h] +
jmp loc_428F8D  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_43BDE8 +
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-50h] +
xor ecx eax +
call sub_42B849  +
mov ecx [edx-4] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
jmp loc_42C614  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4Ch] +
xor ecx eax +
call sub_42B849  +
mov ecx [edx-4] +
xor ecx eax +
call sub_42B849  +
mov eax offset unk_439F70 +
jmp loc_42C614  +
***
mov ecx offset dword_43F680 +
jmp loc_401223  +
***
mov edx hModule +
mov ecx offset dword_43F650 +
call sub_40126D  +
mov ecx offset unk_43F670 +
jmp loc_4012EA  +
***
mov ecx offset byte_447DC0 +
jmp loc_402060  +
***
mov ecx offset dword_448008 +
mov ecx offset dwTlsIndex +
mov ecx dword_447F3C +
retn   +
***
mov off_43F870 offset off_434BAC +
mov off_43F874 offset off_434BAC +
mov ecx offset unk_448088 +
mov ecx offset unk_4480B0 +
mov ecx offset unk_4480D8 +
mov ecx dword_447F94 +
test ecx ecx +
jz locret_42EEB0  +
mov edx [ecx] +
cmp ecx offset unk_447F70 +
setnz al  +
movzx eax al +
push eax  +
call dword ptr [edx+10h]  +
and dword_447F94 0 +
retn   +
***
and dword_447A1C 0 +
mov off_43FA94 offset off_4353CC +
retn   +
***
mov ecx offset unk_447FA8 +
jmp sub_4227DC  +
***
mov ecx offset unk_447FD0 +
jmp sub_4227DC  +
***
mov ecx offset unk_441F78 +
jmp loc_42B1A6  +
***
