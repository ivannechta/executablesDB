mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004ADC  +
test [ebp+arg_0] 1 +
jz loc_1001E0F  +
push esi  +
call sub_100909F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1001E31  +
cmp ecx 7FFFFFFFh +
jbe loc_1001E36  +
mov eax 80070057h +
test eax eax +
jl loc_1001E73  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1001E63  +
cmp eax esi +
ja loc_1001E63  +
jnz loc_1001E6E  +
jmp loc_1001E68  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov ecx dword_100C614 +
test ecx ecx +
jz locret_1001E92  +
push 1  +
call sub_1001DF5  +
and dword_100C614 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 230h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
or [ebp+var_230] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
push 6  +
pop ecx  +
xor ebx ebx +
push ebx  +
push ebx  +
mov [ebp+var_224] eax +
xor eax eax +
push 1  +
mov [ebp+var_20] ax +
lea edi [ebp-1Eh] +
push ebx  +
mov [ebp+var_22C] 1Eh +
mov byte ptr [ebp+var_228] bl +
stos   +
call ds:HeapSetInformation  +
push ebx  +
push ebx  +
push 100h  +
call ds:SetThreadPreferredUILanguages  +
call ds:GetConsoleOutputCP  +
push eax  +
push offset a_D  +
lea eax [ebp+var_20] +
push 0Dh  +
push eax  +
call sub_1001E1B  +
mov esi ds:_wsetlocale +
mov edi offset a_ocp +
xor eax eax +
push edi  +
push 1  +
mov [ebp+var_8] ax +
call esi  +
push edi  +
push 3  +
call esi  +
push edi  +
push 4  +
call esi  +
push edi  +
push 5  +
call esi  +
lea eax [ebp+var_20] +
push eax  +
push 2  +
call esi  +
add esp 38h +
push ebx  +
push ebx  +
mov eax 0DEADBEEFh +
push eax  +
push eax  +
call sub_1009EC9  +
push offset off_100C368  +
push 9  +
pop esi  +
push esi  +
push [ebp+var_224]  +
push [ebp+arg_0]  +
call sub_1002897  +
mov [ebp+var_224] eax +
cmp eax ebx +
jnz loc_1002289  +
xor eax eax +
mov ecx offset unk_100C36C +
cmp [ecx] bl +
jnz loc_1001F8A  +
inc eax  +
add ecx 10h +
cmp eax esi +
jb loc_1001F79  +
jmp loc_1002137  +
mov [ebp+var_230] eax +
cmp eax 5 +
ja loc_100211B  +
jz loc_1002106  +
sub eax ebx +
jz loc_100209E  +
dec eax  +
jz loc_1002046  +
dec eax  +
jz loc_1001FDF  +
dec eax  +
jz loc_1001FCC  +
dec eax  +
jnz loc_1002289  +
cmp byte_100C338 bl +
setnz al  +
add eax 11h +
jmp loc_1002114  +
xor eax eax +
cmp byte_100C310 bl +
setnz al  +
add eax 0Fh +
jmp loc_1002114  +
cmp byte_100C284 bl +
jz loc_1001FEB  +
push 0Bh  +
jmp loc_100201B  +
cmp byte_100C298 bl +
jz loc_1001FF7  +
push 0Ch  +
jmp loc_100201B  +
cmp byte_100C2AC bl +
jz loc_1002003  +
push 0Dh  +
jmp loc_100201B  +
cmp byte_100C2E8 bl +
jz loc_100200F  +
push 0Eh  +
jmp loc_100201B  +
mov [ebp+var_224] 57h +
push 1Eh  +
mov al byte_100C2D4 +
pop esi  +
mov byte ptr [ebp+var_228] al +
cmp byte_100C2C0 bl +
jz loc_100228F  +
push 1  +
call sub_100722A  +
mov byte ptr [ebp+var_228] 1 +
jmp loc_100228F  +
cmp byte_100C0DC bl +
jz loc_1002055  +
push 7  +
jmp loc_1002286  +
cmp byte_100C118 bl +
jnz loc_1002097  +
cmp byte_100C12C bl +
jnz loc_1002097  +
cmp byte_100C168 bl +
jz loc_100207C  +
cmp byte_100C17C bl +
jz loc_100207C  +
push 8  +
jmp loc_1002286  +
cmp byte_100C190 bl +
jnz loc_100228F  +
cmp byte_100C1A4 bl +
jz loc_10020DF  +
push 0Ah  +
jmp loc_1002286  +
push 6  +
jmp loc_1002286  +
cmp byte_100C04C bl +
jz loc_10020AA  +
push 2  +
jmp loc_10020DC  +
cmp byte_100C060 bl +
jnz loc_10020EB  +
cmp byte_100C074 bl +
jnz loc_10020EB  +
cmp byte_100C088 bl +
jz loc_10020C6  +
push 4  +
jmp loc_10020DC  +
cmp byte_100C09C bl +
jz loc_10020D2  +
push 3  +
jmp loc_10020DC  +
cmp byte_100C0C4 bl +
jz loc_10020DF  +
push 5  +
pop esi  +
jmp loc_10020EE  +
mov [ebp+var_224] 57h +
jmp loc_1002137  +
xor esi esi +
inc esi  +
cmp byte_100C0B0 bl +
jz loc_100228F  +
push 1  +
call sub_100722A  +
jmp loc_100228F  +
xor eax eax +
cmp byte_100C360 bl +
setnz al  +
add eax 13h +
mov esi eax +
jmp loc_100228F  +
cmp eax 6 +
jz loc_1002260  +
cmp eax 7 +
jz loc_100213E  +
cmp eax 8 +
jz loc_1002137  +
cmp eax 0FFFFFFFFh +
jnz loc_1002289  +
push 1Eh  +
jmp loc_1002286  +
xor eax eax +
cmp byte_100C1BC bl +
jz loc_100214E  +
push 18h  +
pop esi  +
inc eax  +
jmp loc_1002154  +
mov esi [ebp+var_22C] +
cmp byte_100C1D0 bl +
jz loc_1002160  +
push 19h  +
pop esi  +
inc eax  +
cmp byte_100C1E4 bl +
jz loc_100216C  +
push 1Ah  +
pop esi  +
inc eax  +
cmp byte_100C1F8 bl +
jz loc_1002178  +
push 1Bh  +
pop esi  +
inc eax  +
mov cl byte_100C270 +
cmp cl bl +
jz loc_1002186  +
push 1Dh  +
pop esi  +
inc eax  +
cmp eax 1 +
jz loc_1002192  +
push 1Dh  +
jmp loc_1002286  +
cmp cl bl +
jnz loc_100228F  +
cmp byte_100C220 bl +
jz loc_100218B  +
mov edi ds:CompareStringW +
push 0FFFFFFFFh  +
push offset String2  +
push 0FFFFFFFFh  +
push lpString1  +
push ebx  +
push ebx  +
call edi  +
cmp eax 2 +
jz loc_10021D8  +
push 0FFFFFFFFh  +
push offset aFile  +
push 0FFFFFFFFh  +
push lpString1  +
push ebx  +
push ebx  +
call edi  +
cmp eax 2 +
jnz loc_100218B  +
mov cl byte_100C20C +
cmp byte_100C1BC bl +
jz loc_10021EE  +
cmp cl bl +
jnz loc_100228F  +
mov al byte_100C248 +
cmp byte_100C1D0 bl +
jz loc_1002213  +
cmp al bl +
jnz loc_1002213  +
cmp byte_100C234 bl +
jnz loc_1002213  +
cmp cl bl +
jz loc_1002213  +
cmp byte_100C25C bl +
jz loc_100228F  +
cmp byte_100C1E4 bl +
jz loc_1002233  +
cmp al bl +
jnz loc_1002233  +
cmp byte_100C234 bl +
jnz loc_1002233  +
cmp cl bl +
jnz loc_1002233  +
cmp byte_100C25C bl +
jz loc_100228F  +
cmp byte_100C1F8 bl +
jz loc_100218B  +
cmp al bl +
jnz loc_100218B  +
cmp byte_100C234 bl +
jnz loc_100218B  +
cmp byte_100C25C bl +
jz loc_100228F  +
jmp loc_100218B  +
cmp byte_100C010 bl +
jz loc_100226C  +
push 15h  +
jmp loc_1002286  +
cmp byte_100C024 bl +
jz loc_1002278  +
push 16h  +
jmp loc_1002286  +
cmp byte_100C038 bl +
jz loc_10020DF  +
push 17h  +
pop esi  +
jmp loc_100228F  +
mov esi [ebp+var_22C] +
push offset Name  +
call sub_1002A1E  +
lea eax [esi-1] +
cmp eax 1Dh +
ja loc_10024F3  +
jmp ds:off_10025D0[eax*4]  +
mov edi [ebp+var_224] +
push edi  +
call sub_1005B26  +
jmp loc_10024F9  +
push dword_100C078  +
push dword_100C064  +
call sub_10050BB  +
mov edi eax +
jmp loc_10024F9  +
push dword_100C078  +
push dword_100C064  +
push dword_100C050  +
call sub_1005113  +
jmp loc_10022CE  +
call sub_1005169  +
jmp loc_10022CE  +
push off_100C07C  +
call sub_100522D  +
jmp loc_10022CE  +
push 1002h  +
call sub_10055D6  +
jmp loc_10022CE  +
movzx eax byte_100C154 +
push ebx  +
push dword_100C158  +
push dword_100C144  +
push eax  +
movzx eax byte_100C140 +
push eax  +
movzx eax byte_100C104 +
push eax  +
movzx eax byte_100C0F0 +
push eax  +
push dword_100C130  +
push dword_100C11C  +
call sub_100546F  +
jmp loc_10022CE  +
movzx eax byte_100C154 +
push ebx  +
push dword_100C158  +
push dword_100C144  +
push eax  +
movzx eax byte_100C140 +
push eax  +
movzx eax byte_100C104 +
push eax  +
movzx eax byte_100C0F0 +
push eax  +
push dword_100C130  +
push dword_100C11C  +
push dword_100C0E0  +
call sub_10054D7  +
jmp loc_10022CE  +
push Data  +
push lpValueName  +
call sub_1005568  +
jmp loc_10022CE  +
push dword_100C194  +
call sub_1005542  +
jmp loc_10022CE  +
push 1003h  +
jmp loc_1002307  +
push 1004h  +
jmp loc_1002307  +
push 1007h  +
jmp loc_1002307  +
push 1008h  +
jmp loc_1002307  +
push 1006h  +
jmp loc_1002307  +
push 1005h  +
jmp loc_1002307  +
push [ebp+var_228]  +
call sub_10055EF  +
jmp loc_10022CE  +
push [ebp+var_228]  +
call sub_1005B4F  +
jmp loc_10022CE  +
push [ebp+var_228]  +
push dword_100C2B0  +
call sub_1005C32  +
jmp loc_10022CE  +
push lpFileName  +
call sub_100614B  +
jmp loc_10022CE  +
push dword_100C328  +
call sub_10058B5  +
jmp loc_10022CE  +
cmp byte_100C34C bl +
setz al  +
movzx eax al +
push eax  +
call sub_10061DA  +
jmp loc_10022CE  +
push ebx  +
push dword_100C014  +
call sub_1005F33  +
jmp loc_10022CE  +
call sub_100608A  +
jmp loc_10022CE  +
push 1009h  +
jmp loc_1002307  +
push dword_100C260  +
movzx eax byte_100C248 +
push dword_100C210  +
push eax  +
movzx eax byte_100C234 +
push eax  +
push lpString1  +
call sub_1008BD6  +
jmp loc_10022CE  +
push dword_100C210  +
push lpString1  +
call sub_1007FF9  +
jmp loc_10022CE  +
push lpString1  +
call sub_1007FC5  +
jmp loc_10022CE  +
push dword_100C210  +
push lpString1  +
call sub_10084AB  +
jmp loc_10022CE  +
mov edi [ebp+var_224] +
cmp edi ebx +
jnz loc_100254C  +
mov eax [ebp+var_230] +
cmp eax 1 +
jz loc_1002525  +
cmp eax 3 +
jz loc_1002525  +
cmp eax 4 +
jz loc_1002525  +
cmp eax 5 +
jz loc_1002525  +
cmp eax 6 +
jz loc_1002525  +
cmp eax 7 +
jnz loc_10025BA  +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
push 2019h  +
call sub_1002D3F  +
lea eax [ebp+Buffer] +
push eax  +
mov eax ds:_iob +
add eax 20h +
jmp loc_100259F  +
cmp [ebp+var_230] 7 +
jnz loc_100255D  +
push edi  +
call sub_10033D2  +
jmp loc_10025BA  +
cmp esi 1Eh +
jz loc_10025BA  +
cmp edi 2 +
jnz loc_10025A9  +
cmp esi 15h +
jz loc_100257A  +
cmp esi 13h +
jz loc_100257A  +
cmp esi 16h +
jz loc_100257A  +
cmp esi edi +
jnz loc_10025A9  +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
push 2018h  +
call sub_1002D3F  +
lea eax [ebp+Buffer] +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_10075AB  +
pop ecx  +
pop ecx  +
jmp loc_10025BA  +
push edi  +
call sub_10033D2  +
cmp edi 57h +
jnz loc_10025BA  +
push edi  +
call sub_1005B26  +
call sub_1001E7A  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10093D4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jbe loc_1002689  +
push esi  +
mov esi [ebp+arg_4] +
add esi 10h +
mov eax [esi-8] +
test eax eax +
jle loc_100267F  +
cmp eax 4 +
jle loc_1002672  +
cmp eax 6 +
jnz loc_100267F  +
mov eax [esi] +
test eax eax +
jz loc_100267F  +
push eax  +
call ds:LocalFree  +
and dword ptr [esi] 0 +
add esi 14h +
dec edi  +
jnz loc_1002661  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
movzx ecx word ptr [eax] +
cmp cx 2Fh +
jz loc_10026AF  +
cmp cx 2Dh +
jz loc_10026AF  +
push 57h  +
pop eax  +
jmp loc_10026DD  +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+arg_4] esi +
jbe loc_10026D7  +
mov edi [ebp+arg_8] +
lea ebx [eax+2] +
push dword ptr [edi]  +
push ebx  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10026E1  +
inc esi  +
add edi 10h +
cmp esi [ebp+arg_4] +
jb loc_10026BF  +
push 57h  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov eax [ebp+arg_C] +
mov [eax] esi +
mov eax [ebp+arg_8] +
shl esi 4 +
mov byte ptr [esi+eax+4] 1 +
xor eax eax +
jmp loc_10026DA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
cmp ax 2Fh +
jz loc_100271A  +
cmp ax 2Dh +
jz loc_100271A  +
push 57h  +
pop eax  +
jmp locret_1002845  +
add [ebp+arg_0] 2 +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
push ebx  +
push esi  +
push edi  +
jbe loc_100283F  +
mov esi [ebp+arg_8] +
add esi 10h +
cmp dword ptr [esi-8] 0 +
jz loc_1002813  +
mov ecx [esi-10h] +
mov eax ecx +
lea edx [eax+2] +
mov di [eax] +
inc eax  +
inc eax  +
test di di +
jnz loc_1002747  +
sub eax edx +
sar eax 1 +
mov edi eax +
push edi  +
push [ebp+arg_0]  +
push ecx  +
call ds:_wcsnicmp  +
add esp 0Ch +
mov ebx eax +
neg ebx  +
sbb bl bl +
inc bl  +
jz loc_100282D  +
mov eax [ebp+arg_0] +
lea eax [eax+edi*2] +
cmp word ptr [eax] 3Ah +
jnz loc_100283F  +
mov ecx [esi-8] +
lea edx [ecx-1] +
cmp edx 9 +
ja loc_1002829  +
jmp ds:off_100286A[edx*4]  +
push esi  +
add eax 2 +
push eax  +
call sub_10030AB  +
jmp loc_100280D  +
lea ecx [esi-10h] +
push ecx  +
add eax 2 +
push eax  +
call sub_1002CE2  +
jmp loc_100280D  +
push esi  +
add eax 2 +
push eax  +
call sub_1002AD0  +
jmp loc_100280D  +
cmp ecx 2 +
setz cl  +
movzx ecx cl +
push ecx  +
push esi  +
add eax 2 +
push eax  +
call sub_1003FFB  +
test eax eax +
jnz loc_1002842  +
cmp dword ptr [esi-8] 1 +
jnz loc_100280D  +
mov ecx [esi] +
cmp dword ptr [ecx+4] 1 +
jbe loc_100280D  +
push 57h  +
pop eax  +
jmp loc_100280D  +
push esi  +
add eax 2 +
push eax  +
call sub_1002AFB  +
jmp loc_100280D  +
push esi  +
add eax 2 +
push eax  +
call sub_1002AB8  +
jmp loc_100280D  +
push esi  +
add eax 2 +
push eax  +
call sub_1002AB8  +
test eax eax +
jnz loc_1002842  +
jmp loc_1002829  +
push dword ptr [esi-10h]  +
push [ebp+arg_0]  +
call ds:_wcsicmp  +
mov ebx eax +
neg ebx  +
pop ecx  +
sbb bl bl +
pop ecx  +
inc bl  +
test bl bl +
jnz loc_1002849  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add esi 14h +
cmp eax [ebp+arg_4] +
jb loc_1002735  +
push 57h  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
mov ecx [ebp+var_4] +
mov edx [ebp+arg_8] +
mov eax ecx +
imul eax eax +
lea eax [eax+edx+0Ch] +
cmp byte ptr [eax] 0 +
jnz loc_100283F  +
mov edx [ebp+arg_C] +
mov [edx] ecx +
mov byte ptr [eax] 1 +
xor eax eax +
jmp loc_1002842  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
cmp [ebp+arg_0] 1 +
jbe loc_100294B  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_C] +
lea eax [ebp+arg_C] +
push eax  +
push esi  +
push [ebp+arg_8]  +
push dword ptr [ebx+4]  +
call sub_1002693  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_1002949  +
mov eax [ebp+arg_C] +
shl eax 4 +
add eax esi +
mov esi [eax+8] +
mov eax [eax+0Ch] +
push edi  +
mov [ebp+arg_8] eax +
test esi esi +
jz loc_1002935  +
test eax eax +
jz loc_1002935  +
push 2  +
pop edi  +
cmp [ebp+arg_0] edi +
jbe loc_1002935  +
lea eax [ebp+arg_C] +
push eax  +
push esi  +
push [ebp+arg_8]  +
push dword ptr [ebx+edi*4]  +
call sub_10026FA  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_100293B  +
mov eax [ebp+arg_C] +
imul eax eax +
cmp [ebp+var_8] 0 +
mov eax [eax+esi+4] +
jnz loc_100291D  +
mov [ebp+var_8] eax +
jmp loc_1002926  +
test eax eax +
jz loc_1002926  +
cmp eax [ebp+var_8] +
jnz loc_100292E  +
inc edi  +
cmp edi [ebp+arg_0] +
jb loc_10028F1  +
jmp loc_1002935  +
mov [ebp+var_4] 57h +
cmp [ebp+var_4] 0 +
jz loc_1002948  +
test esi esi +
jz loc_1002948  +
push esi  +
push [ebp+arg_8]  +
call sub_100264D  +
pop edi  +
pop esi  +
pop ebx  +
mov eax [ebp+var_4] +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memmove_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call ??0exception@@QAE@ABQBD@Z  +
mov dword ptr [esi] offset off_1001464 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1001464 +
jmp ??1exception@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001464 +
call ??1exception@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10029F0  +
push esi  +
call sub_100909F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ??0exception@@QAE@ABV0@@Z  +
mov dword ptr [esi] offset off_1001464 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
xor ebx ebx +
mov [ebp+NewState.PrivilegeCount] ebx +
lea edi [ebp+NewState.Privileges] +
stos   +
stos   +
stos   +
lea eax [ebp+hObject] +
push eax  +
push 28h  +
mov [ebp+hObject] ebx +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
mov esi ds:GetLastError +
mov edi eax +
cmp edi ebx +
jz loc_1002A92  +
lea eax [ebp+NewState.Privileges] +
push eax  +
push [ebp+lpName]  +
push ebx  +
call ds:LookupPrivilegeValueW  +
mov edi eax +
cmp edi ebx +
jz loc_1002A92  +
push ebx  +
push ebx  +
push 10h  +
lea eax [ebp+NewState] +
push eax  +
push ebx  +
push [ebp+hObject]  +
mov [ebp+NewState.PrivilegeCount] 1 +
mov [ebp+NewState.Privileges.Attributes] 2 +
call ds:AdjustTokenPrivileges  +
mov edi eax +
cmp edi ebx +
jnz loc_1002A94  +
call esi  +
cmp [ebp+hObject] ebx +
jz loc_1002AA2  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp edi ebx +
jz loc_1002AAA  +
xor eax eax +
jmp loc_1002AAC  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push 1  +
push [ebp+arg_0]  +
call ConvertStringSecurityDescriptorToSecurityDescriptorW  +
test eax eax +
jz loc_1002AEC  +
xor eax eax +
jmp loc_1002AF2  +
call ds:GetLastError  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:_wcsicmp +
push offset aEnable  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1002B22  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 1 +
jmp loc_1002B38  +
push offset aDisable  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1002B3C  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
xor eax eax +
jmp loc_1002B3F  +
push 57h  +
pop eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+hMem] 0 +
lea eax [ebp+hMem] +
push eax  +
push [ebp+arg_0]  +
call ConvertSidToStringSidW  +
test eax eax +
jnz loc_1002B6B  +
call ds:GetLastError  +
jmp locret_1002B94  +
call sub_100721F  +
test eax eax +
mov eax offset aS +
jnz loc_1002B7E  +
mov eax offset a40s +
push [ebp+hMem]  +
push eax  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push [ebp+hMem]  +
call ds:LocalFree  +
xor eax eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
push edi  +
push offset unk_100C630  +
xor ecx ecx +
push 2  +
lea eax [eax+ebx+2] +
pop edx  +
xor edi edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1009431  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jnz loc_1002BD7  +
push 8  +
pop eax  +
jmp loc_1002C40  +
call sub_100721F  +
mov [ebp+arg_C] eax +
cmp [ebp+arg_8] edi +
jz loc_1002C01  +
lea edi [ebx+ebx] +
push edi  +
push [ebp+arg_8]  +
push esi  +
call memcpy  +
mov ax ds:word_100125C +
mov [edi+esi] ax +
add esp 0Ch +
lea edi [ebx+1] +
mov ebx [ebp+arg_4] +
lea eax [ebx+ebx] +
push eax  +
push [ebp+arg_0]  +
lea eax [esi+edi*2] +
push eax  +
call memcpy  +
xor eax eax +
add edi ebx +
add esp 0Ch +
cmp [ebp+arg_C] eax +
mov [esi+edi*2] ax +
mov eax offset aS +
jnz loc_1002C2E  +
mov eax offset a40s +
push esi  +
push eax  +
call sub_1007502  +
push esi  +
call sub_100909F  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+nSize] 10h +
jnb loc_1002C5C  +
push 7Ah  +
pop eax  +
jmp loc_1002C77  +
lea eax [ebp+nSize] +
push eax  +
push [ebp+lpBuffer]  +
call ds:GetComputerNameW  +
test eax eax +
jz loc_1002C71  +
xor eax eax +
jmp loc_1002C77  +
call ds:GetLastError  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_0] +
push edi  +
mov eax ecx +
xor edi edi +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1002C93  +
sub eax edx +
sar eax 1 +
cmp word ptr [ecx+eax*2-2] 7Dh +
pop esi  +
jz loc_1002CAF  +
push 57h  +
pop eax  +
jmp loc_1002CD8  +
push [ebp+arg_4]  +
add eax eax +
mov word ptr [ebp+var_8] ax +
mov word ptr [ebp+var_8+2] ax +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_4] ecx +
call ds:RtlGUIDFromString  +
test eax eax +
jz loc_1002CD6  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov edi eax +
mov eax edi +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_10] offset aCrashonauditfa +
mov [ebp+var_C] offset aFullprivilegea +
mov [ebp+var_8] offset aAuditbaseobjec +
mov [ebp+var_4] offset aAuditbasedirec +
xor esi esi +
push [ebp+esi*4+var_10]  +
push edi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002D2D  +
inc esi  +
cmp esi 4 +
jb loc_1002D0D  +
push 57h  +
pop eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1002D36  +
mov [eax] edi +
xor eax eax +
jmp loc_1002D27  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpBuffer] +
push 0  +
push [ebp+nSize]  +
push esi  +
push 400h  +
push [ebp+dwMessageId]  +
push 0  +
push 800h  +
call ds:FormatMessageW  +
cmp eax 1 +
jbe loc_1002D71  +
xor ecx ecx +
mov [esi+eax*2-4] cx +
jmp loc_1002D7C  +
cmp [ebp+nSize] 0 +
jbe loc_1002D7C  +
xor eax eax +
mov [esi] ax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1002D92  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+15h] 0 +
jz loc_1002D90  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+15h] 0 +
jnz loc_1002DC0  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1002DD4  +
mov [ecx+4] eax +
jmp loc_1002DE3  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_1002DE1  +
mov [ecx+8] eax +
jmp loc_1002DE3  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+15h] 0 +
jnz loc_1002E0E  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1002E22  +
mov [ecx+4] eax +
jmp loc_1002E30  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_1002E2D  +
mov [ecx] eax +
jmp loc_1002E30  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1002E4A  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+15h] 0 +
jz loc_1002E48  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+15h] dl +
jz loc_1002E78  +
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_10094F8  +
add esp 14h +
pop esi  +
retn   +
mov ecx [eax+8] +
cmp [ecx+15h] dl +
jnz loc_1002E91  +
push ecx  +
call sub_1002E3E  +
jmp loc_1002E99  +
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_1002E99  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+15h] dl +
jz loc_1002E88  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+18h] +
lea eax [ecx+4] +
cmp esi 10h +
jb loc_1002EB7  +
mov edx [eax] +
jmp loc_1002EB9  +
mov edx eax +
cmp [ebp+arg_0] edx +
jb loc_1002ED3  +
cmp esi 10h +
jb loc_1002EC5  +
mov eax [eax] +
mov ecx [ecx+14h] +
add ecx eax +
cmp ecx [ebp+arg_0] +
jbe loc_1002ED3  +
mov al 1 +
jmp loc_1002ED5  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_1002EFB  +
xor ecx ecx +
push ecx  +
call loc_1009030  +
pop ecx  +
leave   +
retn 8  +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 1 +
jnb loc_1002EF0  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_100299D  +
push offset dword_100A1C8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_1002F44  +
xor ecx ecx +
imul ecx ecx +
push ecx  +
call loc_1009030  +
pop ecx  +
leave   +
retn 8  +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 18h +
jnb loc_1002F36  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_100299D  +
push offset dword_100A1C8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002957  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100297A  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1002FC8  +
cmp ecx 7FFFFFFFh +
jbe loc_1002FCD  +
mov eax 80070057h +
test eax eax +
jl loc_1003018  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1003008  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1003003  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1003003  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1002FEB  +
pop edi  +
test esi esi +
jnz loc_100300F  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ecx  +
lea ecx [ebp-0Ch] +
call sub_10029FC  +
push offset dword_100A1C8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 27h +
jnb loc_1003056  +
push 7Ah  +
pop eax  +
jmp loc_10030A2  +
mov eax [ebp+arg_0] +
movzx ecx byte ptr [eax+0Fh] +
push ecx  +
movzx ecx byte ptr [eax+0Eh] +
push ecx  +
movzx ecx byte ptr [eax+0Dh] +
push ecx  +
movzx ecx byte ptr [eax+0Ch] +
push ecx  +
movzx ecx byte ptr [eax+0Bh] +
push ecx  +
movzx ecx byte ptr [eax+0Ah] +
push ecx  +
movzx ecx byte ptr [eax+9] +
push ecx  +
movzx ecx byte ptr [eax+8] +
push ecx  +
movzx ecx word ptr [eax+6] +
push ecx  +
movzx ecx word ptr [eax+4] +
push ecx  +
push dword ptr [eax]  +
push offset a08lx04x04x02x0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1001E1B  +
add esp 38h +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp word ptr [esi] 7Bh +
mov [ebp+var_21C] eax +
lea eax [ebp+var_204] +
mov [ebp+Sid] edi +
mov [ebp+hMem] eax +
mov [ebp+var_210] edi +
jnz loc_1003186  +
inc esi  +
inc esi  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_10030FA  +
sub eax edx +
sar eax 1 +
lea edi [eax+eax] +
cmp word ptr [edi+esi-2] 7Dh +
jz loc_1003122  +
mov [ebp+Sid] 57h +
jmp loc_1003297  +
inc eax  +
mov [ebp+cbSid] eax +
cmp eax 100h +
jbe loc_1003147  +
lea eax [edi+2] +
push eax  +
push 0  +
call ds:LocalAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_100314D  +
jmp loc_10031F0  +
mov ebx [ebp+hMem] +
push esi  +
push [ebp+cbSid]  +
push ebx  +
call sub_1002FB2  +
push [ebp+var_21C]  +
xor eax eax +
push ebx  +
mov [edi+ebx-2] ax +
call ConvertStringSidToSidW  +
test eax eax +
jnz loc_100326D  +
call ds:GetLastError  +
mov [ebp+Sid] eax +
jmp loc_100326D  +
mov ebx ds:LookupAccountNameW +
lea eax [ebp+peUse] +
push eax  +
lea eax [ebp+cbReferencedDomainName] +
push eax  +
push edi  +
lea eax [ebp+cbSid] +
push eax  +
push edi  +
push esi  +
push edi  +
mov [ebp+cbSid] edi +
mov [ebp+cbReferencedDomainName] edi +
call ebx  +
test eax eax +
jnz loc_1003297  +
call ds:GetLastError  +
mov [ebp+Sid] eax +
cmp eax 534h +
jz loc_10031D7  +
cmp eax 7Ah +
jnz loc_1003297  +
push [ebp+cbSid]  +
push edi  +
mov edi ds:LocalAlloc +
call edi  +
mov [ebp+Sid] eax +
test eax eax +
jnz loc_10031FF  +
mov [ebp+Sid] 8 +
jmp loc_1003297  +
mov eax [ebp+cbReferencedDomainName] +
lea eax [eax+eax+2] +
push eax  +
push 0  +
call edi  +
mov [ebp+var_210] eax +
test eax eax +
jnz loc_1003224  +
mov [ebp+Sid] 8 +
jmp loc_1003282  +
mov edi [ebp+Sid] +
lea ecx [ebp+peUse] +
push ecx  +
lea ecx [ebp+cbReferencedDomainName] +
push ecx  +
push eax  +
lea eax [ebp+cbSid] +
push eax  +
push edi  +
push esi  +
push 0  +
call ebx  +
test eax eax +
jnz loc_1003258  +
call ds:GetLastError  +
mov [ebp+Sid] eax +
jmp loc_1003282  +
mov eax [ebp+var_21C] +
and [ebp+Sid] 0 +
mov ebx [ebp+hMem] +
mov [eax] edi +
test ebx ebx +
jz loc_1003282  +
lea eax [ebp+var_204] +
cmp ebx eax +
jz loc_1003282  +
push ebx  +
call ds:LocalFree  +
cmp [ebp+var_210] 0 +
jz loc_1003297  +
push [ebp+var_210]  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+Sid] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10093D4  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 404h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
call sub_100721F  +
cmp byte_100C610 0 +
jnz loc_100330C  +
dec eax  +
neg eax  +
push 200h  +
lea ecx [ebp+Buffer] +
sbb eax eax +
push ecx  +
add eax 200Ah +
push eax  +
call sub_1002D3F  +
lea eax [ebp+Buffer] +
push eax  +
push offset aS  +
call sub_1007502  +
pop ecx  +
pop ecx  +
mov byte_100C610 1 +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
call sub_100721F  +
mov edi offset aS +
mov [ebp+var_208] eax +
mov ebx edi +
test eax eax +
jnz loc_1003350  +
mov ebx offset a40s +
mov esi 100h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 2010h  +
call sub_1002D3F  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
call sub_1007502  +
cmp [ebp+arg_0] 0 +
pop ecx  +
pop ecx  +
jz loc_10033B1  +
cmp [ebp+var_208] 0 +
jz loc_1003390  +
push offset asc_10015B4  +
call sub_1007502  +
pop ecx  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 2011h  +
call sub_1002D3F  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push offset asc_10015B0  +
call sub_1007502  +
pop ecx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10093D4  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1003469  +
and [ebp+hMem] 0 +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
push 2006h  +
call sub_1002D3F  +
push 0  +
push 0  +
lea eax [ebp+hMem] +
push eax  +
push 400h  +
push edi  +
push 0  +
push 1100h  +
call ds:FormatMessageW  +
test eax eax +
jz loc_100345B  +
push [ebp+hMem]  +
lea eax [ebp+Buffer] +
push edi  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_10075AB  +
add esp 10h +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_1003469  +
push edi  +
push offset aD  +
call ds:wprintf  +
pop ecx  +
pop ecx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_10093D4  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 10h +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
jb loc_1003493  +
mov ecx [ecx+4] +
jmp loc_1003496  +
add ecx 4 +
mov byte ptr [ecx+eax] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002F6E  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002F90  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
call sub_100721F  +
test eax eax +
jnz loc_1003558  +
push esi  +
mov esi 100h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 2012h  +
call sub_1002D3F  +
lea eax [ebp+Buffer] +
push eax  +
push offset a40s  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 2013h  +
call sub_1002D3F  +
lea eax [ebp+Buffer] +
push eax  +
push offset aS_0  +
call sub_1007502  +
pop ecx  +
pop ecx  +
pop esi  +
jmp loc_100355D  +
call sub_10032B3  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_10035A2  +
cmp dword ptr [esi+18h] 10h +
jb loc_10035A2  +
cmp [ebp+arg_4] 0 +
lea eax [esi+4] +
push edi  +
mov edi [eax] +
jbe loc_100359A  +
push [ebp+arg_4]  +
push edi  +
push 10h  +
push eax  +
call sub_10034A3  +
push edi  +
call sub_100909F  +
pop ecx  +
pop edi  +
push [ebp+arg_4]  +
mov ecx esi +
mov dword ptr [esi+18h] 0Fh +
call sub_100347D  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jnb loc_10035D3  +
call loc_10090ED  +
mov eax [esi+14h] +
sub eax edi +
cmp eax [ebp+arg_4] +
jnb loc_10035E0  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] 0 +
jbe loc_1003623  +
mov ecx [esi+18h] +
push ebx  +
lea edx [esi+4] +
cmp ecx 10h +
jb loc_10035F6  +
mov ebx [edx] +
jmp loc_10035F8  +
mov ebx edx +
cmp ecx 10h +
jb loc_10035FF  +
mov edx [edx] +
sub eax [ebp+arg_4] +
add ebx edi +
add ebx [ebp+arg_4] +
push eax  +
push ebx  +
sub ecx edi +
push ecx  +
add edx edi +
push edx  +
call sub_10034C5  +
mov eax [esi+14h] +
sub eax [ebp+arg_4] +
mov ecx esi +
push eax  +
call sub_100347D  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3_catch  +
mov edi ecx +
mov [ebp-18h] edi +
mov esi [ebp+8] +
or esi 0Fh +
cmp esi 0FFFFFFFEh +
jbe loc_1003651  +
mov esi [ebp+8] +
jmp loc_1003676  +
xor edx edx +
push 3  +
mov eax esi +
pop ebx  +
div  ebx +
mov ecx [edi+18h] +
mov [ebp-14h] ecx +
shr dword ptr [ebp-14h] 1 +
mov edx [ebp-14h] +
cmp eax edx +
jnb loc_1003676  +
push 0FFFFFFFEh  +
pop eax  +
sub eax edx +
cmp ecx eax +
ja loc_1003676  +
lea esi [edx+ecx] +
and dword ptr [ebp-4] 0 +
push 0  +
lea eax [esi+1] +
push eax  +
call loc_1002EDF  +
mov ebx eax +
jmp loc_10036B1  +
mov eax [ebp+8] +
mov [ebp-10h] esp +
mov [ebp+8] eax +
push 0  +
inc eax  +
push eax  +
mov byte ptr [ebp-4] 2 +
call loc_1002EDF  +
mov [ebp-14h] eax +
mov eax offset loc_10036A8 +
retn   +
mov edi [ebp-18h] +
mov esi [ebp+8] +
mov ebx [ebp-14h] +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_10036D3  +
cmp dword ptr [edi+18h] 10h +
jb loc_10036C2  +
mov eax [edi+4] +
jmp loc_10036C5  +
lea eax [edi+4] +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [esi+1] +
push eax  +
push ebx  +
call sub_10034A3  +
push 0  +
push 1  +
mov ecx edi +
call sub_100356E  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
mov [edi+4] ebx +
mov [edi+18h] esi +
call sub_100347D  +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call loc_1002F25  +
cmp eax ebx +
jz loc_1003723  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_100372C  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_1003735  +
mov [ecx] ebx +
mov [eax+15h] bl +
mov byte ptr [eax+14h] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+15h] 0 +
mov ebx ecx +
mov esi edi +
jnz loc_1003773  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_1003743  +
mov esi [esi] +
push edi  +
call sub_100909F  +
cmp byte ptr [esi+15h] 0 +
pop ecx  +
mov edi esi +
jz loc_1003758  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 0FFFFFFFEh +
jbe loc_10037A4  +
call loc_10090B0  +
cmp [esi+18h] edi +
jnb loc_10037B6  +
push dword ptr [esi+14h]  +
mov ecx esi +
push edi  +
call sub_1003630  +
jmp loc_10037E2  +
cmp [ebp+arg_4] 0 +
jz loc_10037D6  +
cmp edi 10h +
jnb loc_10037D6  +
mov eax [esi+14h] +
cmp edi eax +
jnb loc_10037CA  +
mov eax edi +
push eax  +
push 1  +
mov ecx esi +
call sub_100356E  +
jmp loc_10037E2  +
test edi edi +
jnz loc_10037E2  +
push edi  +
mov ecx esi +
call sub_100347D  +
xor eax eax +
cmp eax edi +
sbb eax eax +
pop edi  +
neg eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1003710  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+15h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_1003743  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10015C8 +
call sub_100356E  +
mov ecx esi +
pop esi  +
jmp ??1exception@@UAE@XZ  +
***
cmp dword ptr [ecx+24h] 10h +
jb loc_100387C  +
mov eax [ecx+10h] +
retn   +
***
lea eax [ecx+10h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100384E  +
test byte ptr [ebp+8] 1 +
jz loc_100389F  +
push esi  +
call sub_100909F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
cmp [edi+14h] eax +
jnb loc_10038C5  +
call loc_10090ED  +
mov esi [edi+14h] +
mov eax [ebp+arg_4] +
sub esi eax +
cmp [ebp+arg_8] esi +
jnb loc_10038D5  +
mov esi [ebp+arg_8] +
mov ecx ebx +
cmp ebx edi +
jnz loc_10038F3  +
push 0FFFFFFFFh  +
add esi eax +
push esi  +
call sub_10035BD  +
push [ebp+arg_4]  +
mov ecx ebx +
push 0  +
call sub_10035BD  +
jmp loc_1003933  +
push 0  +
push esi  +
call sub_100378E  +
test al al +
jz loc_1003933  +
cmp dword ptr [edi+18h] 10h +
jb loc_100390A  +
mov edi [edi+4] +
jmp loc_100390D  +
add edi 4 +
mov ecx [ebx+18h] +
cmp ecx 10h +
jb loc_100391A  +
mov eax [ebx+4] +
jmp loc_100391D  +
lea eax [ebx+4] +
mov edx [ebp+arg_4] +
push esi  +
add edi edx +
push edi  +
push ecx  +
push eax  +
call sub_10034A3  +
push esi  +
mov ecx ebx +
call sub_100347D  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1002EA2  +
test al al +
jz loc_1003975  +
cmp dword ptr [esi+18h] 10h +
jb loc_1003962  +
mov eax [esi+4] +
jmp loc_1003965  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub edi eax +
push edi  +
push esi  +
mov ecx esi +
call sub_10038AB  +
jmp loc_10039AC  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_100378E  +
test al al +
jz loc_10039AA  +
mov ecx [esi+18h] +
cmp ecx 10h +
jb loc_1003992  +
mov eax [esi+4] +
jmp loc_1003995  +
lea eax [esi+4] +
push [ebp+arg_4]  +
push edi  +
push ecx  +
push eax  +
call sub_10034A3  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_100347D  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_100347D  +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10038AB  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+1] +
push ebx  +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_10039F3  +
sub eax edx +
push eax  +
push [ebp+arg_0]  +
call sub_1003941  +
pop ebx  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0exception@@QAE@XZ  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10015C8 +
call sub_10039B7  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call ??0exception@@QAE@ABV0@@Z  +
and dword ptr [ebp-4] 0 +
add edi 0Ch +
push edi  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10015C8 +
call sub_10039B7  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov dword ptr [ecx] offset off_10015D4 +
jmp sub_100384E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10015D4 +
call sub_100384E  +
test byte ptr [ebp+8] 1 +
jz loc_1003AB8  +
push esi  +
call sub_100909F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003A49  +
mov dword ptr [esi] offset off_10015D4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_100347D  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10039E7  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1003A49  +
push offset dword_100A2D4  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1003AC4  +
push offset dword_100A30C  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
call __EH_prolog3  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+15h] 0 +
jz loc_1003BA6  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_1003AE6  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_1003A0F  +
push offset dword_100A30C  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_10015D4 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_1002E5B  +
mov edx [edi] +
cmp byte ptr [edx+15h] 0 +
jz loc_1003BBB  +
mov ebx [edi+8] +
jmp loc_1003BD4  +
mov eax [edi+8] +
cmp byte ptr [eax+15h] 0 +
jz loc_1003BC8  +
mov ebx edx +
jmp loc_1003BD4  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_1003C3D  +
cmp byte ptr [ebx+15h] 0 +
mov esi [edi+4] +
jnz loc_1003BE0  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_1003BF0  +
mov [eax+4] ebx +
jmp loc_1003BFB  +
cmp [esi] edi +
jnz loc_1003BF8  +
mov [esi] ebx +
jmp loc_1003BFB  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_1003C1A  +
cmp byte ptr [ebx+15h] 0 +
jz loc_1003C0C  +
mov eax esi +
jmp loc_1003C15  +
push ebx  +
call sub_1002E3E  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_1003C99  +
cmp byte ptr [ebx+15h] 0 +
jz loc_1003C2C  +
mov eax esi +
jmp loc_1003C35  +
push ebx  +
call sub_1002D86  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_1003C99  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_1003C4D  +
mov esi eax +
jmp loc_1003C66  +
cmp byte ptr [ebx+15h] 0 +
mov esi [eax+4] +
jnz loc_1003C59  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_1003C76  +
mov [ecx+4] eax +
jmp loc_1003C84  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_1003C81  +
mov [ecx] eax +
jmp loc_1003C84  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+14h] +
mov dl [edi+14h] +
mov [eax+14h] dl +
mov [edi+14h] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+14h] 1 +
jnz loc_1003DA3  +
jmp loc_1003D5D  +
cmp byte ptr [ebx+14h] 1 +
jnz loc_1003D9F  +
mov eax [esi] +
cmp ebx eax +
jnz loc_1003D24  +
mov eax [esi+8] +
cmp byte ptr [eax+14h] 0 +
jnz loc_1003CD5  +
mov byte ptr [eax+14h] 1 +
push esi  +
mov byte ptr [esi+14h] 0 +
call sub_1002DF2  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+15h] 0 +
jnz loc_1003D58  +
mov edx [eax] +
cmp byte ptr [edx+14h] 1 +
jnz loc_1003CEC  +
mov edx [eax+8] +
cmp byte ptr [edx+14h] 1 +
jz loc_1003D54  +
mov edx [eax+8] +
cmp byte ptr [edx+14h] 1 +
jnz loc_1003D0B  +
mov edx [eax] +
mov byte ptr [edx+14h] 1 +
push eax  +
mov byte ptr [eax+14h] 0 +
call sub_1002DA4  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+14h] +
mov [eax+14h] dl +
mov byte ptr [esi+14h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+14h] 1 +
call sub_1002DF2  +
jmp loc_1003D9F  +
cmp byte ptr [eax+14h] 0 +
jnz loc_1003D3D  +
mov byte ptr [eax+14h] 1 +
push esi  +
mov byte ptr [esi+14h] 0 +
call sub_1002DA4  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+15h] 0 +
jnz loc_1003D58  +
mov edx [eax+8] +
cmp byte ptr [edx+14h] 1 +
jnz loc_1003D6B  +
mov edx [eax] +
cmp byte ptr [edx+14h] 1 +
jnz loc_1003D6B  +
mov byte ptr [eax+14h] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jnz loc_1003CA8  +
jmp loc_1003D9F  +
mov edx [eax] +
cmp byte ptr [edx+14h] 1 +
jnz loc_1003D89  +
mov edx [eax+8] +
mov byte ptr [edx+14h] 1 +
push eax  +
mov byte ptr [eax+14h] 0 +
call sub_1002DF2  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+14h] +
mov [eax+14h] dl +
mov byte ptr [esi+14h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+14h] 1 +
call sub_1002DA4  +
mov byte ptr [ebx+14h] 1 +
push edi  +
call sub_100909F  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_1003DB8  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_1003DF3  +
cmp [ebp+arg_8] eax +
jnz loc_1003DF3  +
mov ecx esi +
call sub_1003821  +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_1003E18  +
cmp ecx [ebp+arg_8] +
jz loc_1003E18  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1002E5B  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1003B5C  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1003DF9  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1003DCD  +
push dword ptr [esi+4]  +
call sub_100909F  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10037F5  +
xor ebx ebx +
lea ecx [esi+0Ch] +
mov [ebp-4] ebx +
call sub_10037F5  +
lea ecx [esi+18h] +
mov byte ptr [ebp-4] 1 +
call sub_10037F5  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 2 +
call sub_10037F5  +
lea ecx [esi+30h] +
mov byte ptr [ebp-4] 3 +
call sub_10037F5  +
mov [esi+3Ch] bl +
mov [esi+40h] ebx +
mov [esi+44h] ebx +
mov [esi+48h] ebx +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3_catch  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+var_4] ebx +
call sub_1003EC5  +
mov [ebp+var_8] eax +
cmp eax ebx +
jnz loc_1003F35  +
push 8  +
pop eax  +
jmp loc_1003F70  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp [esi+4] ebx +
jbe loc_1003F6C  +
mov ecx [ebp+var_8] +
lea eax [ebp+var_4] +
push eax  +
mov eax [esi] +
add eax ebx +
push eax  +
call sub_1004DD9  +
test eax eax +
jnz loc_1003F6E  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1003F75  +
mov ecx [ebp+arg_4] +
mov [ecx+edi*4] eax +
inc edi  +
add ebx 10h +
cmp edi [esi+4] +
jb loc_1003F41  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
push 57h  +
pop eax  +
jmp loc_1003F6E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
call sub_1003EC5  +
test eax eax +
jnz loc_1003F94  +
push 8  +
pop eax  +
jmp locret_1003FF2  +
lea ecx [ebp+var_4] +
push ecx  +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx eax +
call sub_1004EF0  +
test eax eax +
jnz locret_1003FF2  +
mov eax [ebp+var_4] +
shl eax 4 +
add eax 8 +
push eax  +
push 0  +
call ds:LocalAlloc  +
test eax eax +
jz loc_1003F8F  +
mov ecx [ebp+var_4] +
mov [eax+4] ecx +
lea ecx [eax+8] +
xor edx edx +
mov [eax] ecx +
cmp [ebp+var_4] edx +
jbe loc_1003FEB  +
push esi  +
xor ecx ecx +
push edi  +
mov esi [ebp+var_8] +
mov edi [eax] +
add esi ecx +
add edi ecx +
movs   +
movs   +
movs   +
inc edx  +
movs   +
add ecx 10h +
cmp edx [ebp+var_4] +
jb loc_1003FD3  +
pop edi  +
pop esi  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 474h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
push ebx  +
xor ebx ebx +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_464] ecx +
mov [ebp+var_458] ebx +
mov [ebp+var_45C] eax +
mov [ebp+var_470] ebx +
mov [ebp+var_468] ebx +
cmp [ebp+arg_8] bl +
jz loc_100408A  +
cmp eax ebx +
jz loc_100408A  +
mov edx offset asc_10015FC +
mov ecx eax +
mov di [ecx] +
cmp di [edx] +
jnz loc_1004071  +
cmp di bx +
jz loc_100406D  +
mov di [ecx+2] +
cmp di [edx+2] +
jnz loc_1004071  +
add ecx 4 +
add edx 4 +
cmp di bx +
jnz loc_100404B  +
xor ecx ecx +
jmp loc_1004076  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
cmp ecx ebx +
jnz loc_100408A  +
push [ebp+var_464]  +
call sub_1003F7F  +
jmp loc_10042B1  +
mov ecx [ebp+var_464] +
mov [ecx] ebx +
cmp eax ebx +
jz loc_10040B3  +
cmp [eax] bx +
jz loc_10040AF  +
push 2Ch  +
push eax  +
inc esi  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_10040AF  +
inc eax  +
inc eax  +
jnz loc_1004096  +
cmp esi ebx +
jnz loc_10040C2  +
mov [ebp+var_458] 57h +
jmp loc_10042AB  +
call sub_1003EC5  +
mov [ebp+var_460] eax +
cmp eax ebx +
jnz loc_10040E0  +
mov [ebp+var_458] 8 +
jmp loc_10042AB  +
push 8  +
pop ebx  +
mov eax esi +
shl eax 4 +
add eax ebx +
push eax  +
push 0  +
call ds:LocalAlloc  +
mov edi eax +
mov [ebp+hMem] edi +
test edi edi +
jnz loc_100410A  +
mov [ebp+var_458] ebx +
jmp loc_10042A0  +
mov ebx [ebp+var_45C] +
lea eax [edi+8] +
xor ecx ecx +
mov [edi+4] esi +
mov [edi] eax +
mov [ebp+var_8] cx +
mov [ebp+var_45C] eax +
movzx eax word ptr [ebx] +
test ax ax +
jz loc_1004284  +
cmp ax 7Bh +
jnz loc_10041C8  +
push 7Dh  +
push ebx  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100428E  +
sub eax ebx +
sar eax 1 +
inc eax  +
inc eax  +
cmp eax 27h +
jnz loc_100428E  +
push 13h  +
pop ecx  +
push [ebp+var_45C]  +
lea eax [ebp+var_54] +
mov esi ebx +
lea edi [ebp+var_54] +
push eax  +
movs   +
call sub_1002C80  +
mov [ebp+var_458] eax +
test eax eax +
jnz loc_100429A  +
cmp [ebp+arg_8] 0 +
mov ecx [ebp+var_460] +
lea eax [ebp+var_470] +
push eax  +
push [ebp+var_45C]  +
jz loc_10041A3  +
call sub_1004E11  +
jmp loc_10041A8  +
call sub_1004E49  +
mov [ebp+var_458] eax +
test eax eax +
jnz loc_100429A  +
push 2Ch  +
push ebx  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
mov ebx eax +
jmp loc_1004269  +
push 2Ch  +
push ebx  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
mov [ebp+var_474] eax +
test eax eax +
jnz loc_10041F3  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10041E2  +
sub eax edx +
sar eax 1 +
lea eax [ebx+eax*2] +
sub eax ebx +
sar eax 1 +
lea ecx [eax+1] +
cmp ecx 200h +
jnb loc_100428E  +
lea esi [eax+eax] +
push esi  +
lea eax [ebp+var_454] +
push ebx  +
push eax  +
call memcpy  +
mov ecx [ebp+var_460] +
xor eax eax +
add esp 0Ch +
cmp [ebp+arg_8] al +
mov word ptr [ebp+esi+var_454] ax +
lea eax [ebp+var_468] +
push eax  +
lea eax [ebp+var_454] +
push eax  +
jz loc_1004244  +
call sub_1004E81  +
jmp loc_1004249  +
call sub_1004EB8  +
mov [ebp+var_458] eax +
test eax eax +
jnz loc_10042A0  +
mov esi [ebp+var_468] +
mov edi [ebp+var_45C] +
mov ebx [ebp+var_474] +
movs   +
movs   +
movs   +
movs   +
test ebx ebx +
jz loc_100426F  +
inc ebx  +
inc ebx  +
add [ebp+var_45C] 10h +
mov edi [ebp+hMem] +
test ebx ebx +
jnz loc_1004124  +
mov eax [ebp+var_464] +
mov [eax] edi +
jmp loc_10042AB  +
mov [ebp+var_458] 57h +
jmp loc_10042A0  +
mov edi [ebp+hMem] +
test edi edi +
jz loc_10042AB  +
push edi  +
call ds:LocalFree  +
mov eax [ebp+var_458] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10093D4  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
xor ecx ecx +
test eax eax +
setl cl  +
mov al cl +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 10h  +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jz loc_1004309  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
xor ecx ecx +
test eax eax +
setl cl  +
mov al cl +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+15h] dl +
jz loc_100432E  +
mov eax [eax+8] +
jmp loc_1004354  +
mov ecx [eax] +
cmp [ecx+15h] dl +
jnz loc_1004345  +
push ecx  +
call sub_1002D86  +
jmp loc_1004354  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_100434D  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+15h] dl +
jz loc_100433D  +
mov ecx [esi] +
cmp [ecx+15h] dl +
jnz loc_1004356  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov edx [ecx] +
mov [eax+0Ch] edx +
mov ecx [ecx+4] +
mov [eax+10h] ecx +
mov cl [ebp+arg_10] +
mov [eax+14h] cl +
mov byte ptr [eax+15h] 0 +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
jmp loc_10043C6  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
mov ecx edi +
push dword ptr [esi+0Ch]  +
call sub_10042C7  +
test al al +
jz loc_10043C2  +
mov esi [esi+8] +
jmp loc_10043C6  +
mov ebx esi +
mov esi [esi] +
cmp byte ptr [esi+15h] 0 +
jz loc_10043AA  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
cmp byte ptr [esi+15h] 0 +
mov ebx eax +
jnz loc_100441A  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov [ebp+arg_0] eax +
push [ebp+arg_0]  +
mov ecx edi +
push dword ptr [esi+0Ch]  +
call sub_10042EC  +
test al al +
jz loc_1004410  +
mov esi [esi+8] +
jmp loc_1004414  +
mov ebx esi +
mov esi [esi] +
cmp byte ptr [esi+15h] 0 +
jz loc_10043FA  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1004448  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100435D  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0  +
push 1  +
mov edi ecx +
call loc_1002F25  +
push [ebp+arg_10]  +
mov esi eax +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_1004428  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+10h] +
mov eax [ecx] +
mov [ebp+var_4] eax +
cmp eax ecx +
jz loc_10044B6  +
push dword ptr [eax+10h]  +
call AuditFree  +
lea ecx [ebp+var_4] +
call sub_1002E5B  +
mov eax [ebp+var_4] +
cmp eax [esi+10h] +
jnz loc_100449E  +
mov ecx [esi+28h] +
mov eax [ecx] +
mov [ebp+var_4] eax +
cmp eax ecx +
jz loc_10044DA  +
push dword ptr [eax+10h]  +
call AuditFree  +
lea ecx [ebp+var_4] +
call sub_1002E5B  +
mov eax [ebp+var_4] +
cmp eax [esi+28h] +
jnz loc_10044C2  +
mov ecx [esi+34h] +
mov eax [ecx] +
mov [ebp+var_4] eax +
cmp eax ecx +
jz loc_1004500  +
mov eax [eax+10h] +
push dword ptr [eax]  +
call AuditFree  +
lea ecx [ebp+var_4] +
call sub_1002E5B  +
mov eax [ebp+var_4] +
cmp eax [esi+34h] +
jnz loc_10044E6  +
mov eax [esi+48h] +
test eax eax +
jz loc_100450D  +
push eax  +
call AuditFree  +
mov esi [esi+44h] +
test esi esi +
jz loc_100451B  +
push esi  +
call ds:LocalFree  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003A0F  +
mov dword ptr [esi] offset off_1001600 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_100384E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001600 +
call sub_100384E  +
test byte ptr [ebp+8] 1 +
jz loc_1004575  +
push esi  +
call sub_100909F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003A49  +
mov dword ptr [esi] offset off_1001600 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1004581  +
push offset dword_100A3D4  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
call __EH_prolog3  +
mov edi ecx +
cmp dword ptr [edi+8] 1FFFFFFEh +
jb loc_100460A  +
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_1003AE6  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1004523  +
push offset dword_100A3D4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_1004451  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_1004636  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_1004654  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_1004649  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_1004657  +
mov [eax] ebx +
jmp loc_1004657  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_1004657  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
jmp loc_10046F1  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_10046A2  +
mov edx [edx+8] +
cmp byte ptr [edx+14h] 0 +
jz loc_10046AA  +
cmp esi [ecx+8] +
jnz loc_1004682  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1002DF2  +
mov eax [esi+4] +
mov byte ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1002DA4  +
jmp loc_10046EE  +
mov edx [edx] +
cmp byte ptr [edx+14h] 0 +
jnz loc_10046C2  +
mov byte ptr [ecx+14h] 1 +
mov byte ptr [edx+14h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+14h] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_10046EE  +
cmp esi [ecx] +
jnz loc_10046D0  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1002DA4  +
mov eax [esi+4] +
mov byte ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1002DF2  +
lea eax [esi+4] +
mov ecx [eax] +
cmp byte ptr [ecx+14h] 0 +
jz loc_1004661  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+14h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
jmp loc_1004753  +
push dword ptr [esi+0Ch]  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
mov ecx edi +
mov ebx esi +
call sub_10042C7  +
mov byte ptr [ebp+var_8] al +
test al al +
jz loc_1004750  +
mov esi [esi] +
jmp loc_1004753  +
mov esi [esi+8] +
cmp byte ptr [esi+15h] 0 +
jz loc_1004734  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_1004792  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_1004787  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_10045C8  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
jmp loc_10047B7  +
lea ecx [ebp+var_4] +
call sub_100431B  +
mov esi [ebp+var_4] +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
mov ecx edi +
push dword ptr [esi+0Ch]  +
call sub_10042C7  +
test al al +
jz loc_10047AE  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_100476F  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
jmp loc_10047FD  +
push dword ptr [esi+0Ch]  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
mov ecx edi +
mov ebx esi +
call sub_10042EC  +
mov byte ptr [ebp+var_8] al +
test al al +
jz loc_10047FA  +
mov esi [esi] +
jmp loc_10047FD  +
mov esi [esi+8] +
cmp byte ptr [esi+15h] 0 +
jz loc_10047DE  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_100483C  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_1004831  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_10045C8  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
jmp loc_1004861  +
lea ecx [ebp+var_4] +
call sub_100431B  +
mov esi [ebp+var_4] +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
mov ecx edi +
push dword ptr [esi+0Ch]  +
call sub_10042EC  +
test al al +
jz loc_1004858  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_1004819  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jnz loc_1004895  +
push [ebp+arg_8]  +
push dword ptr [esi+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_10045C8  +
mov eax [ebp+arg_0] +
jmp loc_10049AD  +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
push ebx  +
push edi  +
mov edi [ebp+arg_8] +
cmp ecx [eax] +
jnz loc_10048C3  +
push dword ptr [ecx+0Ch]  +
mov ecx esi +
push dword ptr [edi]  +
call sub_10042C7  +
test al al +
jz loc_1004998  +
push edi  +
push [ebp+arg_4]  +
mov ecx esi +
jmp loc_1004989  +
cmp ecx eax +
jnz loc_10048F0  +
mov eax [eax+8] +
push dword ptr [edi]  +
add eax 0Ch +
push dword ptr [eax]  +
mov ecx esi +
call sub_10042C7  +
test al al +
jz loc_1004998  +
mov eax [esi+4] +
push edi  +
push dword ptr [eax+8]  +
mov ecx esi +
push 0  +
jmp loc_100498B  +
push dword ptr [ecx+0Ch]  +
mov ecx esi +
push dword ptr [edi]  +
call sub_10042C7  +
test al al +
jz loc_1004935  +
mov eax [ebp+arg_4] +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] eax +
call sub_100431B  +
push dword ptr [edi]  +
mov ebx [ebp+arg_8] +
push dword ptr [ebx+0Ch]  +
mov ecx esi +
call sub_10042C7  +
test al al +
jz loc_1004935  +
mov eax [ebx+8] +
cmp byte ptr [eax+15h] 0 +
push edi  +
mov ecx esi +
jz loc_1004930  +
push ebx  +
jmp loc_1004984  +
push [ebp+arg_4]  +
jmp loc_1004989  +
push dword ptr [edi]  +
mov eax [ebp+arg_4] +
push dword ptr [eax+0Ch]  +
mov ecx esi +
call sub_10042C7  +
test al al +
jz loc_1004998  +
mov eax [ebp+arg_4] +
mov [ebp+arg_8] eax +
mov eax [esi+4] +
lea ecx [ebp+arg_8] +
mov [ebp+var_4] eax +
call sub_1002E5B  +
mov ebx [ebp+arg_8] +
cmp ebx [ebp+var_4] +
jz loc_1004974  +
push dword ptr [ebx+0Ch]  +
mov ecx esi +
push dword ptr [edi]  +
call sub_10042C7  +
test al al +
jz loc_1004998  +
mov eax [ebp+arg_4] +
mov ecx [eax+8] +
cmp byte ptr [ecx+15h] 0 +
push edi  +
mov ecx esi +
jz loc_1004988  +
push eax  +
push 0  +
jmp loc_100498B  +
push ebx  +
push 1  +
push [ebp+arg_0]  +
call sub_10045C8  +
mov eax [ebp+arg_0] +
jmp loc_10049AB  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1004719  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jnz loc_10049DF  +
push [ebp+arg_8]  +
push dword ptr [esi+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_10045C8  +
mov eax [ebp+arg_0] +
jmp loc_1004AD2  +
mov eax [esi+4] +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_4] eax +
cmp ebx [eax] +
jnz loc_1004A19  +
push dword ptr [ebx+0Ch]  +
push dword ptr [edi]  +
call sub_10042EC  +
test al al +
jz loc_1004ABD  +
push edi  +
mov ecx esi +
push ebx  +
push 1  +
push [ebp+arg_0]  +
call sub_10045C8  +
mov eax [ebp+arg_0] +
jmp loc_1004AD0  +
cmp ebx eax +
jnz loc_1004A3A  +
push dword ptr [edi]  +
mov ebx [eax+8] +
push dword ptr [ebx+0Ch]  +
call sub_10042EC  +
test al al +
jz loc_1004ABD  +
push edi  +
push ebx  +
push 0  +
mov ecx esi +
jmp loc_1004A09  +
mov eax [ebx+0Ch] +
mov ecx [edi] +
push eax  +
push ecx  +
mov ecx esi +
call sub_10042EC  +
test al al +
jz loc_1004A6F  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] ebx +
call sub_100431B  +
push dword ptr [edi]  +
mov eax [ebp+arg_8] +
push dword ptr [eax+0Ch]  +
mov ecx esi +
call sub_10042EC  +
test al al +
jz loc_1004A6F  +
mov eax [ebp+arg_8] +
jmp loc_1004AA5  +
push dword ptr [edi]  +
mov ecx esi +
push dword ptr [ebx+0Ch]  +
call sub_10042EC  +
test al al +
jz loc_1004ABD  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] ebx +
call sub_1002E5B  +
mov ebx [ebp+arg_8] +
cmp ebx [ebp+var_4] +
jz loc_1004AA2  +
push dword ptr [ebx+0Ch]  +
mov ecx esi +
push dword ptr [edi]  +
call sub_10042EC  +
test al al +
jz loc_1004ABD  +
mov eax [ebp+arg_4] +
mov ecx [eax+8] +
cmp byte ptr [ecx+15h] 0 +
push edi  +
mov ecx esi +
jz loc_1004A06  +
push eax  +
push 0  +
jmp loc_1004A09  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_10047C3  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 3 +
call sub_1004489  +
lea ecx [esi+30h] +
call sub_1003E27  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 2 +
call sub_1003E27  +
lea ecx [esi+18h] +
mov byte ptr [ebp-4] 1 +
call sub_1003E27  +
lea ecx [esi+0Ch] +
mov byte ptr [ebp-4] 0 +
call sub_1003E27  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1003E27  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov ebx ecx +
call sub_1004396  +
mov esi eax +
cmp esi [ebx+4] +
jz loc_1004B67  +
push dword ptr [esi+0Ch]  +
mov ecx ebx +
push dword ptr [edi]  +
call sub_10042C7  +
test al al +
jz loc_1004B82  +
mov eax [edi] +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
lea eax [ebp+var_8] +
push eax  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx ebx +
call sub_100486D  +
mov esi [eax] +
pop edi  +
lea eax [esi+10h] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov ebx ecx +
call sub_10043DA  +
mov esi eax +
cmp esi [ebx+4] +
jz loc_1004BBD  +
push dword ptr [esi+0Ch]  +
mov ecx ebx +
push dword ptr [edi]  +
call sub_10042EC  +
test al al +
jz loc_1004BD8  +
mov eax [edi] +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
lea eax [ebp+var_8] +
push eax  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx ebx +
call sub_10049B7  +
mov esi [eax] +
pop edi  +
lea eax [esi+10h] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-14h] esi +
xor edi edi +
cmp byte ptr [esi+3Ch] 0 +
mov [ebp-18h] edi +
jz loc_1004C0A  +
xor eax eax +
jmp loc_1004DB0  +
lea eax [ebp-20h] +
push eax  +
lea eax [esi+48h] +
push eax  +
call AuditEnumerateCategories  +
test al al +
jnz loc_1004C29  +
call ds:GetLastError  +
mov [esi+40h] eax +
jmp loc_1004DAD  +
mov eax [ebp-20h] +
shl eax 3 +
push eax  +
push edi  +
call ds:LocalAlloc  +
mov [esi+44h] eax +
cmp eax edi +
jnz loc_1004C4A  +
mov dword ptr [esi+40h] 8 +
jmp loc_1004DAD  +
mov ecx [ebp-20h] +
shl ecx 3 +
push ecx  +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
mov [ebp-1Ch] edi +
mov ebx [ebp-1Ch] +
cmp ebx [ebp-20h] +
jnb loc_1004DA9  +
lea eax [ebp-24h] +
push eax  +
mov eax [esi+48h] +
shl ebx 4 +
add eax ebx +
push eax  +
call AuditLookupCategoryNameW  +
test al al +
jz loc_1004C1B  +
mov eax [esi+48h] +
add eax ebx +
mov [ebp-30h] eax +
lea eax [ebp-30h] +
push eax  +
lea ecx [esi+0Ch] +
mov [ebp-4] edi +
call sub_1004B91  +
mov ecx [ebp-24h] +
mov [eax] ecx +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
call sub_1004B3B  +
mov ecx [esi+48h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx ebx +
mov [eax] ecx +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
mov eax [esi+48h] +
push edi  +
add eax ebx +
push eax  +
call AuditEnumerateSubCategories  +
test al al +
jz loc_1004C1B  +
mov eax [esi+44h] +
mov ecx [ebp-18h] +
mov edi [ebp-1Ch] +
shl edi 3 +
mov [edi+eax] ecx +
mov eax [esi+44h] +
mov ecx [ebp-28h] +
mov [edi+eax+4] ecx +
mov eax [esi+48h] +
add eax ebx +
mov [ebp-30h] eax +
lea eax [ebp-30h] +
push eax  +
lea ecx [esi+30h] +
mov dword ptr [ebp-4] 2 +
call sub_1004B91  +
mov ecx [esi+44h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx edi +
mov [eax] ecx +
xor ebx ebx +
cmp ebx [ebp-28h] +
jnb loc_1004D7A  +
lea eax [ebp-2Ch] +
push eax  +
mov eax [ebp-18h] +
mov edi ebx +
shl edi 4 +
add eax edi +
push eax  +
call AuditLookupSubCategoryNameW  +
test al al +
jz loc_1004C1B  +
mov eax [ebp-18h] +
add eax edi +
mov [ebp-30h] eax +
lea eax [ebp-30h] +
push eax  +
lea ecx [esi+24h] +
mov dword ptr [ebp-4] 4 +
call sub_1004B91  +
mov ecx [ebp-2Ch] +
mov [eax] ecx +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [esi+18h] +
call sub_1004B3B  +
mov ecx [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add edi ecx +
mov [eax] edi +
inc ebx  +
jmp loc_1004D0F  +
mov eax [ebp-14h] +
mov dword ptr [eax+40h] 8 +
mov eax offset loc_1004DA4 +
retn   +
inc dword ptr [ebp-1Ch]  +
xor edi edi +
jmp loc_1004C5E  +
mov eax [ebp-14h] +
mov dword ptr [eax+40h] 8 +
mov eax offset loc_1004DA4 +
retn   +
mov eax [ebp-14h] +
mov dword ptr [eax+40h] 8 +
mov eax offset loc_1004DA4 +
retn   +
mov esi [ebp-14h] +
jmp loc_1004DAD  +
mov byte ptr [esi+3Ch] 1 +
mov eax [esi+40h] +
call __EH_epilog3  +
retn   +
***
cmp byte ptr [ecx+3Ch] 0 +
jnz loc_1004DD1  +
mov eax [ecx+40h] +
test eax eax +
jnz locret_1004DD3  +
call sub_1004BE7  +
test eax eax +
jnz locret_1004DD3  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004DBB  +
test eax eax +
jnz loc_1004E07  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+30h] +
call sub_1004B91  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
neg eax  +
sbb eax eax +
and eax 0FFFFFFA9h +
add eax 57h +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004DBB  +
test eax eax +
jnz loc_1004E3F  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+0Ch] +
call sub_1004B91  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
neg eax  +
sbb eax eax +
and eax 0FFFFFFA9h +
add eax 57h +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004DBB  +
test eax eax +
jnz loc_1004E77  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+24h] +
call sub_1004B91  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
neg eax  +
sbb eax eax +
and eax 0FFFFFFA9h +
add eax 57h +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004DBB  +
test eax eax +
jnz loc_1004EAE  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1004B3B  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
neg eax  +
sbb eax eax +
and eax 0FFFFFFA9h +
add eax 57h +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004DBB  +
test eax eax +
jnz loc_1004EE6  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+18h] +
call sub_1004B3B  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
neg eax  +
sbb eax eax +
and eax 0FFFFFFA9h +
add eax 57h +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004DBB  +
test eax eax +
jnz loc_1004F13  +
mov eax [esi+48h] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax [esi+14h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004DBB  +
test eax eax +
jnz loc_1004F35  +
mov eax [ebp+arg_0] +
mov [eax] esi +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004DBB  +
test eax eax +
jnz loc_1004F5A  +
mov eax [esi+20h] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax+8] ecx +
mov ecx [ebp+arg_4] +
mov [eax+0Ch] ecx +
mov cl [ebp+arg_8] +
mov [eax+10h] cl +
mov cl [ebp+arg_C] +
mov [eax+11h] cl +
mov cl [ebp+arg_10] +
mov [eax+12h] cl +
mov cl [ebp+arg_14] +
mov [eax+13h] cl +
mov cl [ebp+arg_20] +
mov [eax+14h] cl +
mov ecx [ebp+arg_18] +
mov [eax+18h] ecx +
mov ecx [ebp+arg_1C] +
mov dword ptr [eax] offset off_1001678 +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001678 +
jz loc_1004FCB  +
push esi  +
call sub_100909F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_20]  +
mov esi ecx +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004F64  +
mov dword ptr [esi] offset off_1001690 +
mov eax esi +
pop esi  +
pop ebp  +
retn 24h  +
***
push 4  +
pop eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_24]  +
mov esi ecx +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004F64  +
mov eax [ebp+arg_20] +
mov [esi+20h] eax +
mov dword ptr [esi] offset off_10016A8 +
mov eax esi +
pop esi  +
pop ebp  +
retn 28h  +
***
push 10h  +
pop eax  +
retn   +
***
mov eax [ecx+20h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov ecx [ebp+arg_4] +
mov [eax+8] ecx +
mov ecx [ebp+arg_8] +
mov dword ptr [eax] offset off_10016E8 +
mov [eax+0Ch] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10016C0 +
jz loc_10050AF  +
push esi  +
call sub_100909F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset unk_100C630  +
push 0Ch  +
call ??2@YAPAXIABUnothrow_t@std@@@Z  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10050E9  +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov ecx [ebp+arg_4] +
mov [eax+8] ecx +
mov dword ptr [eax] offset off_10016D4 +
mov esi eax +
jmp loc_10050EB  +
xor esi esi +
test esi esi +
jnz loc_10050F4  +
push 8  +
pop eax  +
jmp loc_1005109  +
push edi  +
mov ecx esi +
call sub_1006D74  +
mov edi eax +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset unk_100C630  +
push 10h  +
call ??2@YAPAXIABUnothrow_t@std@@@Z  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100513F  +
push [ebp+arg_0]  +
mov ecx eax +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100506C  +
mov esi eax +
jmp loc_1005141  +
xor esi esi +
test esi esi +
jnz loc_100514A  +
push 8  +
pop eax  +
jmp loc_100515F  +
push edi  +
mov ecx esi +
call sub_1006D74  +
mov edi eax +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
lea eax [ebp+var_20C] +
push eax  +
xor esi esi +
push 0Ch  +
xor edi edi +
mov [ebp+var_20C] esi +
mov [ebp+hMem] esi +
call AuditQuerySecurity  +
test al al +
jz loc_10051BD  +
push esi  +
lea eax [ebp+hMem] +
push eax  +
push 0Ch  +
push 1  +
push [ebp+var_20C]  +
call ConvertSecurityDescriptorToStringSecurityDescriptorW  +
test eax eax +
jnz loc_10051C7  +
call ds:GetLastError  +
mov edi eax +
jmp loc_10051F1  +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
push 201Bh  +
call sub_1002D3F  +
push [ebp+hMem]  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1007502  +
pop ecx  +
pop ecx  +
cmp [ebp+var_20C] esi +
jz loc_1005204  +
push [ebp+var_20C]  +
call AuditFree  +
cmp [ebp+hMem] esi +
jz loc_1005218  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10093D4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 444h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+cbData] 4 +
mov [ebp+dwMessageId] edi +
call sub_100721F  +
mov [ebp+var_430] eax +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push edi  +
push offset SubKey  +
push 80000002h  +
call ds:RegOpenKeyExW  +
cmp eax edi +
jnz loc_100545A  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov [ebp+var_42C] eax +
cmp eax 2 +
jnz loc_10052C3  +
mov dword ptr [ebp+Data] edi +
mov [ebp+var_42C] edi +
push esi  +
cmp [ebp+var_42C] edi +
jnz loc_1005447  +
call sub_10034E7  +
mov esi ds:_wcsicmp +
push offset aFullprivilegea  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10052F3  +
and dword ptr [ebp+Data] 0FFh +
cmp dword ptr [ebp+Data] edi +
jz loc_100532A  +
cmp dword ptr [ebp+Data] 1 +
jz loc_100532A  +
cmp dword ptr [ebp+Data] 2 +
jnz loc_100531B  +
push offset aCrashonauditfa  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100532A  +
mov [ebp+var_42C] 0Dh +
jmp loc_1005447  +
cmp [ebp+var_430] 0 +
mov edi offset aS +
mov [ebp+var_438] edi +
jnz loc_1005348  +
mov [ebp+var_438] offset a40s +
cmp [ebp+var_430] 0 +
mov esi 200h +
jz loc_1005399  +
push 10h  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1002C4C  +
mov [ebp+var_42C] eax +
test eax eax +
jnz loc_1005459  +
push esi  +
lea eax [ebp+var_424] +
push eax  +
push 200Ch  +
call sub_1002D3F  +
lea eax [ebp+var_424] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push offset aSS  +
call sub_1007502  +
add esp 0Ch +
push ebx  +
push [ebp+var_438]  +
call sub_1007502  +
cmp [ebp+var_430] 0 +
pop ecx  +
pop ecx  +
mov ebx offset asc_100170C +
jz loc_10053BC  +
push ebx  +
call sub_1007502  +
pop ecx  +
mov eax dword ptr [ebp+Data] +
sub eax 0 +
jz loc_10053E5  +
dec eax  +
jz loc_10053D9  +
dec eax  +
jnz loc_10053EF  +
mov [ebp+dwMessageId] 201Ch +
jmp loc_10053EF  +
mov [ebp+dwMessageId] 2007h +
jmp loc_10053EF  +
mov [ebp+dwMessageId] 2008h +
push esi  +
lea eax [ebp+var_424] +
push eax  +
push [ebp+dwMessageId]  +
call sub_1002D3F  +
lea eax [ebp+var_424] +
push eax  +
push edi  +
call sub_1007502  +
cmp [ebp+var_430] 0 +
pop ecx  +
pop ecx  +
jz loc_100543C  +
push ebx  +
call sub_1007502  +
cmp [ebp+var_430] 2 +
pop ecx  +
jnz loc_100543C  +
push dword ptr [ebp+Data]  +
push offset aD_0  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push offset asc_10016FC  +
call sub_1007502  +
pop ecx  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax [ebp+var_42C] +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_10093D4  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset unk_100C630  +
push 20h  +
call ??2@YAPAXIABUnothrow_t@std@@@Z  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10054AD  +
push [ebp+arg_20]  +
mov ecx eax +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004FD7  +
mov esi eax +
jmp loc_10054AF  +
xor esi esi +
test esi esi +
jnz loc_10054B8  +
push 8  +
pop eax  +
jmp loc_10054CD  +
push edi  +
mov ecx esi +
call sub_10062D0  +
mov edi eax +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset unk_100C630  +
push 24h  +
call ??2@YAPAXIABUnothrow_t@std@@@Z  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005518  +
push [ebp+arg_24]  +
mov ecx eax +
push [ebp+arg_0]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100501A  +
mov esi eax +
jmp loc_100551A  +
xor esi esi +
test esi esi +
jnz loc_1005523  +
push 8  +
pop eax  +
jmp loc_1005538  +
push edi  +
mov ecx esi +
call sub_10062D0  +
mov edi eax +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 0Ch  +
call AuditSetSecurity  +
test al al +
jz loc_1005559  +
xor eax eax +
jmp loc_100555F  +
call ds:GetLastError  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 20006h  +
xor esi esi +
push esi  +
push offset SubKey  +
push 80000002h  +
call ds:RegOpenKeyExW  +
cmp eax esi +
jnz loc_10055CC  +
push offset aFullprivilegea  +
push [ebp+lpValueName]  +
call ds:_wcsicmp  +
pop ecx  +
test eax eax +
pop ecx  +
lea eax [ebp+Data] +
jnz loc_10055AD  +
push 1  +
push eax  +
push 3  +
jmp loc_10055B2  +
push 4  +
push eax  +
push 4  +
push esi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwMessageId]  +
call sub_1007534  +
pop ecx  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 434h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
xor ebx ebx +
xor eax eax +
mov [ebp+ObjectAttributes.Length] ebx +
lea edi [ebp+ObjectAttributes.RootDirectory] +
stos   +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+var_40C] +
push eax  +
mov [ebp+var_40C] ebx +
mov [ebp+var_408] ebx +
mov [ebp+ObjectHandle] ebx +
mov [ebp+Buffer] ebx +
mov [ebp+Names] ebx +
call AuditEnumeratePerUserPolicy  +
test al al +
jnz loc_100565A  +
call ds:GetLastError  +
mov [ebp+var_408] eax +
jmp loc_100584E  +
push esi  +
call sub_100721F  +
mov [ebp+var_418] eax +
mov esi 200h +
push esi  +
lea eax [ebp+var_404] +
push eax  +
push 200Dh  +
call sub_1002D3F  +
lea eax [ebp+var_404] +
push eax  +
call sub_1007502  +
mov eax [ebp+var_40C] +
pop ecx  +
cmp [eax] ebx +
jz loc_100584D  +
lea eax [ebp+ObjectHandle] +
push eax  +
push 800h  +
lea eax [ebp+ObjectAttributes] +
push eax  +
push ebx  +
call LsaOpenPolicy  +
cmp eax ebx +
jge loc_10056C6  +
push eax  +
call LsaNtStatusToWinError  +
mov [ebp+var_408] eax +
jmp loc_100584D  +
lea eax [ebp+Names] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [ebp+var_40C] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push [ebp+ObjectHandle]  +
call LsaLookupSids  +
test eax eax +
jl loc_100584D  +
push esi  +
lea eax [ebp+var_404] +
push eax  +
push 200Eh  +
call sub_1002D3F  +
cmp [ebp+var_418] 0 +
mov ebx offset aS +
mov edi offset a40s +
mov eax ebx +
jnz loc_100571B  +
mov eax edi +
lea ecx [ebp+var_404] +
push ecx  +
push eax  +
call sub_1007502  +
cmp [ebp+arg_0] 0 +
pop ecx  +
pop ecx  +
jz loc_1005772  +
cmp [ebp+var_418] 0 +
jz loc_1005744  +
push offset asc_10015B4  +
call sub_1007502  +
pop ecx  +
push esi  +
lea eax [ebp+var_404] +
push eax  +
push 200Fh  +
call sub_1002D3F  +
cmp [ebp+var_418] 0 +
mov eax ebx +
jnz loc_1005763  +
mov eax edi +
lea ecx [ebp+var_404] +
push ecx  +
push eax  +
call sub_1007502  +
pop ecx  +
pop ecx  +
mov edi offset asc_10015B0 +
push edi  +
call sub_1007502  +
mov edx [ebp+var_40C] +
xor esi esi +
pop ecx  +
cmp [edx] esi +
jbe loc_100584B  +
xor ebx ebx +
mov eax [ebp+Names] +
add eax ebx +
mov ecx [eax] +
cmp ecx 8 +
jz loc_10057E8  +
cmp ecx 6 +
jz loc_10057E8  +
cmp ecx 7 +
jz loc_10057E8  +
cmp dword ptr [eax+0Ch] 0FFFFFFFFh +
jz loc_10057CB  +
mov ecx [eax+0Ch] +
mov edx [ebp+Buffer] +
imul ecx ecx +
mov edx [edx+4] +
add ecx edx +
movzx edx word ptr [ecx] +
shr edx 1 +
push edx  +
push dword ptr [ecx+4]  +
jmp loc_10057CF  +
push 0  +
push 0  +
movzx ecx word ptr [eax+4] +
shr ecx 1 +
push ecx  +
push dword ptr [eax+8]  +
call sub_1002B9D  +
mov [ebp+var_408] eax +
test eax eax +
jmp loc_10057FB  +
mov eax [edx+4] +
push dword ptr [eax+esi*4]  +
call sub_1002B49  +
mov [ebp+var_408] eax +
test eax eax +
jnz loc_100584B  +
cmp [ebp+arg_0] 0 +
jz loc_1005832  +
cmp [ebp+var_418] 0 +
jz loc_1005817  +
push offset asc_10015B4  +
call sub_1007502  +
pop ecx  +
mov eax [ebp+var_40C] +
mov eax [eax+4] +
push dword ptr [eax+esi*4]  +
call sub_1002B49  +
mov [ebp+var_408] eax +
test eax eax +
jnz loc_100584B  +
push edi  +
call sub_1007502  +
mov edx [ebp+var_40C] +
inc esi  +
add ebx 10h +
pop ecx  +
cmp esi [edx] +
jb loc_1005790  +
xor ebx ebx +
pop esi  +
cmp [ebp+ObjectHandle] ebx +
jz loc_1005861  +
push [ebp+ObjectHandle]  +
call LsaClose  +
cmp [ebp+var_40C] ebx +
jz loc_1005874  +
push [ebp+var_40C]  +
call AuditFree  +
cmp [ebp+Buffer] ebx +
jz loc_1005887  +
push [ebp+Buffer]  +
call LsaFreeMemory  +
cmp [ebp+Names] ebx +
pop edi  +
pop ebx  +
jz loc_100589C  +
push [ebp+Names]  +
call LsaFreeMemory  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_408] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn 4  +
***
call __EH_prolog3_GS  +
mov esi [ebp+8] +
lea ecx [ebp-850h] +
call sub_10079F8  +
and dword ptr [ebp-4] 0 +
push offset word_10013B0  +
push esi  +
call ds:_wfopen  +
mov esi eax +
pop ecx  +
pop ecx  +
mov [ebp-814h] esi +
test esi esi +
jnz loc_100590C  +
push 2  +
pop esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-850h] +
call sub_1007A1F  +
mov eax esi +
call sub_100964A  +
retn 4  +
mov edi ds:fgetws +
push esi  +
mov ebx 400h +
lea eax [ebp-810h] +
push ebx  +
push eax  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_1005931  +
push 0Dh  +
pop esi  +
jmp loc_1005A17  +
push esi  +
jmp loc_10059E3  +
push dword ptr [ebp-814h]  +
lea eax [ebp-810h] +
push ebx  +
push eax  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_10059F2  +
lea eax [ebp-810h] +
push 0Ah  +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100596C  +
xor ecx ecx +
mov [eax] cx +
lea eax [ebp-824h] +
push eax  +
lea eax [ebp-828h] +
push eax  +
lea eax [ebp-82Ch] +
push eax  +
lea eax [ebp-818h] +
push eax  +
lea eax [ebp-81Ch] +
push eax  +
lea eax [ebp-820h] +
push eax  +
lea eax [ebp-810h] +
push eax  +
call sub_10076B9  +
mov esi eax +
test esi esi +
jnz loc_1005A17  +
push dword ptr [ebp-824h]  +
lea ecx [ebp-850h] +
push dword ptr [ebp-828h]  +
push dword ptr [ebp-82Ch]  +
push dword ptr [ebp-818h]  +
push dword ptr [ebp-81Ch]  +
push dword ptr [ebp-820h]  +
call sub_1007D7E  +
mov esi eax +
test esi esi +
jnz loc_1005A17  +
push dword ptr [ebp-814h]  +
call ds:feof  +
pop ecx  +
test eax eax +
jz loc_1005937  +
push dword ptr [ebp-814h]  +
call ds:ferror  +
pop ecx  +
test eax eax +
jz loc_1005A0A  +
push 1Eh  +
jmp loc_100592B  +
lea ecx [ebp-850h] +
call sub_10078EE  +
mov esi eax +
push dword ptr [ebp-814h]  +
call ds:fclose  +
pop ecx  +
jmp loc_10058F3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push 10h  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1002C4C  +
xor ebx ebx +
mov [ebp+var_2C] eax +
cmp eax ebx +
jnz loc_1005B11  +
push esi  +
mov esi ds:LocalFree +
mov [ebp+var_28] ebx +
push edi  +
lea eax [ebp+hMem] +
push eax  +
mov eax [ebp+var_28] +
push ds:off_1001668[eax]  +
mov [ebp+hMem] ebx +
call AuditQueryGlobalSaclW  +
test al al +
jnz loc_1005A94  +
call ds:GetLastError  +
mov [ebp+var_2C] eax +
cmp eax 2 +
jnz loc_1005B0F  +
mov [ebp+var_2C] ebx +
jmp loc_1005AF6  +
push 1  +
lea eax [ebp+pSecurityDescriptor] +
push eax  +
call ds:InitializeSecurityDescriptor  +
xor eax eax +
cmp [ebp+hMem] ebx +
push ebx  +
push [ebp+hMem]  +
setnz al  +
push eax  +
lea eax [ebp+pSecurityDescriptor] +
push eax  +
call ds:SetSecurityDescriptorSacl  +
push ebx  +
lea eax [ebp+var_34] +
push eax  +
push 8  +
push 1  +
lea eax [ebp+pSecurityDescriptor] +
push eax  +
call ConvertSecurityDescriptorToStringSecurityDescriptorW  +
push [ebp+hMem]  +
mov edi eax +
call esi  +
cmp edi ebx +
jz loc_1005B06  +
push [ebp+var_34]  +
mov eax [ebp+var_28] +
push ds:off_100166C[eax]  +
lea eax [ebp+Buffer] +
push eax  +
push offset aSSS  +
call sub_1007502  +
add esp 10h +
push [ebp+var_34]  +
call esi  +
add [ebp+var_28] 8 +
cmp [ebp+var_28] 10h +
jb loc_1005A64  +
jmp loc_1005B0F  +
call ds:GetLastError  +
mov [ebp+var_2C] eax +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_2C] +
xor ecx ebp +
pop ebx  +
call sub_10093D4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1005B39  +
push [ebp+arg_0]  +
call sub_10033D2  +
push 1001h  +
call sub_1007534  +
pop ecx  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_58] 0 +
call sub_1003EC5  +
test eax eax +
jnz loc_1005B76  +
push 8  +
pop eax  +
jmp loc_1005C1F  +
lea ecx [ebp+var_58] +
push ecx  +
mov ecx eax +
call sub_1004F1D  +
test eax eax +
jnz loc_1005C1F  +
push ebx  +
push edi  +
call sub_100721F  +
push [ebp+arg_0]  +
mov [ebp+var_5C] eax +
call sub_100331D  +
cmp [ebp+var_5C] 0 +
mov edi offset aS +
mov ebx edi +
jnz loc_1005BAD  +
mov ebx offset a40s +
mov eax [ebp+var_58] +
mov eax [eax+4] +
push esi  +
mov esi [eax] +
mov [ebp+var_60] esi +
cmp esi eax +
jz loc_1005C1A  +
push dword ptr [esi+0Ch]  +
push ebx  +
call sub_1007502  +
cmp byte ptr [ebp+arg_0] 0 +
pop ecx  +
pop ecx  +
jz loc_1005BFC  +
push 27h  +
lea eax [ebp+var_54] +
push eax  +
push dword ptr [esi+10h]  +
call sub_1003046  +
test eax eax +
jnz loc_1005C1C  +
cmp [ebp+var_5C] eax +
jz loc_1005BF0  +
push offset asc_10015B4  +
call sub_1007502  +
pop ecx  +
lea eax [ebp+var_54] +
push eax  +
push edi  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push offset asc_10015B0  +
call sub_1007502  +
pop ecx  +
lea ecx [ebp+var_60] +
call sub_1002E5B  +
mov esi [ebp+var_60] +
mov eax [ebp+var_58] +
cmp esi [eax+4] +
jnz loc_1005BBD  +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_60] edi +
mov [ebp+var_5C] edi +
call sub_1003EC5  +
mov [ebp+var_64] eax +
cmp eax edi +
jnz loc_1005C65  +
push 8  +
pop eax  +
jmp loc_1005DD8  +
push [ebp+arg_4]  +
call sub_100331D  +
call sub_100721F  +
mov [ebp+var_70] eax +
mov [ebp+var_68] offset aS +
cmp eax edi +
jnz loc_1005C87  +
mov [ebp+var_68] offset a40s +
push ebx  +
mov [ebp+var_6C] edi +
cmp [esi+4] edi +
jbe loc_1005DD5  +
mov [ebp+var_58] edi +
mov ecx [ebp+var_64] +
lea eax [ebp+var_60] +
push eax  +
mov eax [esi] +
add eax [ebp+var_58] +
push eax  +
call sub_1004DD9  +
cmp eax edi +
jnz loc_1005DD7  +
mov ecx [ebp+var_64] +
lea eax [ebp+var_5C] +
push eax  +
mov eax [esi] +
add eax [ebp+var_58] +
push eax  +
call sub_1004E11  +
cmp eax edi +
jnz loc_1005DD7  +
push [ebp+var_5C]  +
push [ebp+var_68]  +
call sub_1007502  +
cmp byte ptr [ebp+arg_4] 0 +
pop ecx  +
pop ecx  +
jz loc_1005D17  +
push 27h  +
lea eax [ebp+var_54] +
push eax  +
mov eax [esi] +
add eax [ebp+var_58] +
push eax  +
call sub_1003046  +
cmp eax edi +
jnz loc_1005DD7  +
cmp [ebp+var_70] edi +
jz loc_1005D07  +
push offset asc_10015B4  +
call sub_1007502  +
pop ecx  +
lea eax [ebp+var_54] +
push eax  +
push offset aS  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push offset asc_10015B0  +
call sub_1007502  +
mov eax [ebp+var_60] +
xor ebx ebx +
pop ecx  +
cmp [eax+4] edi +
jbe loc_1005DC2  +
mov eax [eax] +
lea ecx [ebp+var_5C] +
push ecx  +
mov ecx [ebp+var_64] +
add eax edi +
push eax  +
call sub_1004E49  +
test eax eax +
jnz loc_1005DD7  +
push offset asc_1001794  +
call sub_1007502  +
push [ebp+var_5C]  +
push [ebp+var_68]  +
call sub_1007502  +
add esp 0Ch +
cmp byte ptr [ebp+arg_4] 0 +
jz loc_1005DA5  +
push 27h  +
lea eax [ebp+var_54] +
push eax  +
mov eax [ebp+var_60] +
mov eax [eax] +
add eax edi +
push eax  +
call sub_1003046  +
test eax eax +
jnz loc_1005DD7  +
cmp [ebp+var_70] eax +
jz loc_1005D8A  +
push offset asc_10015B4  +
jmp loc_1005D8F  +
push offset asc_1001794  +
call sub_1007502  +
pop ecx  +
lea eax [ebp+var_54] +
push eax  +
push offset aS  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push offset asc_10015B0  +
call sub_1007502  +
mov eax [ebp+var_60] +
inc ebx  +
add edi 10h +
pop ecx  +
cmp ebx [eax+4] +
jb loc_1005D30  +
xor edi edi +
inc [ebp+var_6C]  +
mov eax [ebp+var_6C] +
add [ebp+var_58] 10h +
cmp eax [esi+4] +
jb loc_1005C97  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10093D4  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov [ebp+var_10] ebx +
mov [ebp+var_14] ebx +
call sub_1003EC5  +
cmp eax ebx +
jnz loc_1005E1B  +
push 8  +
pop eax  +
jmp loc_1005F1A  +
lea ecx [ebp+var_10] +
push ecx  +
mov ecx eax +
call sub_1004F1D  +
cmp eax ebx +
jnz loc_1005F1A  +
mov eax [ebp+var_10] +
mov esi [eax+8] +
shl esi 4 +
mov [ebp+var_C] ebx +
cmp esi ebx +
jz loc_1005E7E  +
cmp esi dword_100C998 +
ja loc_1005E7E  +
mov eax dword_100C99C +
lea eax [esi+eax+8] +
cmp eax esi +
jb loc_1005E7E  +
push eax  +
call sub_1009E78  +
test eax eax +
jz loc_1005E6A  +
lea eax [esi+8] +
call __alloca_probe_16  +
mov eax esp +
mov [ebp+var_C] eax +
cmp [ebp+var_C] ebx +
jz loc_1005E7E  +
mov eax [ebp+var_C] +
mov dword ptr [eax] 6B637453h +
add [ebp+var_C] 8 +
jnz loc_1005EA6  +
lea eax [esi+8] +
cmp eax esi +
jb loc_1005E9D  +
push eax  +
call dword_100C9A0  +
mov [ebp+var_C] eax +
cmp eax ebx +
jz loc_1005E13  +
mov dword ptr [eax] 70616548h +
add [ebp+var_C] 8 +
cmp [ebp+var_C] ebx +
jz loc_1005E13  +
mov eax [ebp+var_10] +
mov ecx [eax+4] +
mov eax [ecx] +
mov [ebp+var_18] eax +
cmp eax ecx +
jz loc_1005EDD  +
mov ecx [ebp+var_C] +
mov esi [eax+10h] +
inc [ebp+var_14]  +
lea edi [ebx+ecx] +
movs   +
movs   +
movs   +
lea ecx [ebp+var_18] +
movs   +
add ebx 10h +
call sub_1002E5B  +
mov eax [ebp+var_18] +
mov ecx [ebp+var_10] +
cmp eax [ecx+4] +
jnz loc_1005EB5  +
xor ebx ebx +
cmp [ebp+arg_4] 0 +
mov eax [ebp+var_14] +
mov [ebp+var_8] eax +
push ebx  +
lea eax [ebp+var_C] +
push eax  +
jnz loc_1005EF8  +
push [ebp+arg_0]  +
call sub_1005113  +
jmp loc_1005EFD  +
call sub_10050BB  +
mov esi eax +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_1005F18  +
add eax 0FFFFFFF8h +
cmp dword ptr [eax] 70616548h +
jnz loc_1005F18  +
push eax  +
call dword_100C9A4  +
mov eax esi +
lea esp [ebp-24h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov [ebp+var_10] ebx +
mov [ebp+var_14] ebx +
call sub_1003EC5  +
cmp eax ebx +
jnz loc_1005F61  +
push 8  +
pop eax  +
jmp loc_1006071  +
lea ecx [ebp+var_10] +
push ecx  +
mov ecx eax +
call sub_1004F1D  +
cmp eax ebx +
jnz loc_1006071  +
mov eax [ebp+var_10] +
mov esi [eax+8] +
shl esi 4 +
mov [ebp+var_C] ebx +
cmp esi ebx +
jz loc_1005FC4  +
cmp esi dword_100C998 +
ja loc_1005FC4  +
mov eax dword_100C99C +
lea eax [esi+eax+8] +
cmp eax esi +
jb loc_1005FC4  +
push eax  +
call sub_1009E78  +
test eax eax +
jz loc_1005FB0  +
lea eax [esi+8] +
call __alloca_probe_16  +
mov eax esp +
mov [ebp+var_C] eax +
cmp [ebp+var_C] ebx +
jz loc_1005FC4  +
mov eax [ebp+var_C] +
mov dword ptr [eax] 6B637453h +
add [ebp+var_C] 8 +
jnz loc_1005FEC  +
lea eax [esi+8] +
cmp eax esi +
jb loc_1005FE3  +
push eax  +
call dword_100C9A0  +
mov [ebp+var_C] eax +
cmp eax ebx +
jz loc_1005F59  +
mov dword ptr [eax] 70616548h +
add [ebp+var_C] 8 +
cmp [ebp+var_C] ebx +
jz loc_1005F59  +
mov eax [ebp+var_10] +
mov ecx [eax+4] +
mov eax [ecx] +
mov [ebp+var_18] eax +
cmp eax ecx +
jz loc_1006023  +
mov ecx [ebp+var_C] +
mov esi [eax+10h] +
inc [ebp+var_14]  +
lea edi [ebx+ecx] +
movs   +
movs   +
movs   +
lea ecx [ebp+var_18] +
movs   +
add ebx 10h +
call sub_1002E5B  +
mov eax [ebp+var_18] +
mov ecx [ebp+var_10] +
cmp eax [ecx+4] +
jnz loc_1005FFB  +
xor ebx ebx +
mov eax [ebp+var_14] +
mov [ebp+var_8] eax +
xor eax eax +
inc eax  +
cmp [ebp+arg_4] 0 +
push eax  +
push ebx  +
push ebx  +
push eax  +
push eax  +
jnz loc_1006048  +
push eax  +
push eax  +
push ebx  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
call sub_10054D7  +
jmp loc_1006054  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+var_C] +
push eax  +
call sub_100546F  +
mov esi eax +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_100606F  +
add eax 0FFFFFFF8h +
cmp dword ptr [eax] 70616548h +
jnz loc_100606F  +
push eax  +
call dword_100C9A4  +
mov eax esi +
lea esp [ebp-24h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
xor ebx ebx +
call AuditEnumeratePerUserPolicy  +
test al al +
jnz loc_10060AC  +
call ds:GetLastError  +
jmp loc_10060DD  +
mov eax [ebp+var_4] +
push esi  +
xor esi esi +
cmp [eax] ebx +
jbe loc_10060D0  +
test ebx ebx +
jnz loc_10060D0  +
mov eax [eax+4] +
push ebx  +
push dword ptr [eax+esi*4]  +
call sub_1005F33  +
mov ebx eax +
mov eax [ebp+var_4] +
inc esi  +
cmp esi [eax] +
jb loc_10060B6  +
pop esi  +
test eax eax +
jz loc_10060DB  +
push eax  +
call AuditFree  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
xor edi edi +
call AuditEnumeratePerUserPolicy  +
test al al +
jnz loc_1006107  +
call ds:GetLastError  +
jmp loc_1006143  +
mov eax [ebp+var_4] +
push esi  +
xor esi esi +
cmp [eax] esi +
jbe loc_100613A  +
mov eax [eax+4] +
push 0  +
push dword ptr [eax+esi*4]  +
call sub_1005DED  +
mov edi eax +
cmp edi 515h +
jz loc_1006130  +
cmp edi 534h +
jnz loc_1006132  +
xor edi edi +
mov eax [ebp+var_4] +
inc esi  +
cmp esi [eax] +
jb loc_1006111  +
push eax  +
call AuditFree  +
mov eax edi +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+lpFileName]  +
mov [ebp+var_10] offset aCrashonauditfa +
mov [ebp+var_C] offset aFullprivilegea +
mov [ebp+var_8] offset aAuditbaseobjec +
mov [ebp+var_4] offset aAuditbasedirec +
call sub_10071B0  +
test eax eax +
jnz locret_10061D1  +
push esi  +
push edi  +
push 2  +
call sub_100722A  +
mov esi eax +
test esi esi +
jnz loc_10061C5  +
push 1  +
push eax  +
call sub_1005DED  +
mov esi eax +
test esi esi +
jnz loc_10061C5  +
call sub_10060E5  +
mov esi eax +
test esi esi +
jnz loc_10061C5  +
xor edi edi +
push [ebp+edi*4+var_10]  +
call sub_100522D  +
mov esi eax +
test esi esi +
jnz loc_10061C5  +
inc edi  +
cmp edi 4 +
jb loc_10061A5  +
call sub_1005A2E  +
mov esi eax +
test esi esi +
jz loc_10061CD  +
push [ebp+lpFileName]  +
call sub_10071F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 418h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp [ebp+arg_0] 0 +
mov [ebp+lpValueName] offset aCrashonauditfa +
mov [ebp+var_414] offset aFullprivilegea +
mov [ebp+var_410] offset aAuditbaseobjec +
mov [ebp+var_40C] offset aAuditbasedirec +
jz loc_1006267  +
push 200h  +
lea eax [ebp+Buffer] +
push eax  +
push 2000h  +
call sub_1002D3F  +
lea eax [ebp+Buffer] +
push eax  +
push offset aS  +
call sub_1007502  +
lea eax [ebp+var_408] +
push eax  +
push offset aC  +
call ds:wscanf  +
add esp 10h +
cmp word ptr [ebp+var_408] 6Eh +
jnz loc_1006267  +
xor eax eax +
jmp loc_10062B5  +
call sub_100608A  +
test eax eax +
jnz loc_10062B5  +
push esi  +
xor esi esi +
push 0  +
push [ebp+esi*4+lpValueName]  +
call sub_1005568  +
test eax eax +
jnz loc_10062B4  +
inc esi  +
cmp esi 4 +
jb loc_1006273  +
push 1  +
push eax  +
call sub_1005F33  +
test eax eax +
jnz loc_10062B4  +
xor esi esi +
push 0  +
push ds:off_1001668[esi]  +
call AuditSetGlobalSaclW  +
test al al +
jz loc_10062C3  +
add esi 8 +
cmp esi 10h +
jb loc_1006299  +
xor eax eax +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn 4  +
call ds:GetLastError  +
jmp loc_10062B4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
mov [ebp+var_14] esi +
lea edi [ebp+var_10] +
stos   +
stos   +
mov ebx ecx +
stos   +
mov eax [ebx] +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
mov [ebp+var_24] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_25] 0 +
call dword ptr [eax+4]  +
mov edi eax +
test edi edi +
jnz loc_10066E9  +
mov eax [ebx+8] +
test eax eax +
jz loc_1006400  +
mov edx [eax+4] +
test edx edx +
jz loc_1006400  +
and [ebp+var_20] esi +
mov eax edx +
shl eax 2 +
test eax eax +
jz loc_1006388  +
cmp eax dword_100C998 +
ja loc_1006388  +
mov eax [ebx+8] +
mov ecx [eax+4] +
mov eax dword_100C99C +
lea edi [eax+ecx*4+8] +
shl ecx 2 +
cmp edi ecx +
jb loc_1006388  +
lea eax [eax+edx*4+8] +
push eax  +
call sub_1009E78  +
test eax eax +
jz loc_1006388  +
mov eax [ebx+8] +
mov eax [eax+4] +
lea eax ds:8[eax*4] +
call __alloca_probe_16  +
mov [ebp+var_20] esp +
cmp esp esi +
jz loc_1006388  +
add [ebp+var_20] 8 +
mov eax esp +
mov dword ptr [eax] 6B637453h +
jnz loc_10063D0  +
mov eax [ebx+8] +
mov eax [eax+4] +
lea ecx ds:8[eax*4] +
shl eax 2 +
cmp ecx eax +
jb loc_10063C7  +
mov eax [ebx+8] +
mov eax [eax+4] +
lea eax ds:8[eax*4] +
push eax  +
call dword_100C9A0  +
mov [ebp+var_20] eax +
test eax eax +
jz loc_10065ED  +
mov dword ptr [eax] 70616548h +
add eax 8 +
mov [ebp+var_20] eax +
cmp [ebp+var_20] esi +
jz loc_10065ED  +
push [ebp+var_20]  +
push dword ptr [ebx+8]  +
call sub_1003F17  +
mov edi eax +
test edi edi +
jnz loc_10066E9  +
mov ecx [ebx+8] +
mov ecx [ecx+4] +
test ecx ecx +
jbe loc_1006400  +
mov edx [ebp+var_20] +
mov edx [edx+eax*4] +
add esi [edx+4] +
inc eax  +
cmp eax ecx +
jb loc_10063EF  +
mov [ebp+var_24] esi +
mov eax [ebx+0Ch] +
xor ecx ecx +
cmp eax ecx +
jz loc_100640F  +
add esi [eax+4] +
mov [ebp+var_24] esi +
cmp byte ptr [ebx+12h] 0 +
jz loc_100641A  +
cmp [ebx+18h] ecx +
jz loc_100642D  +
cmp byte ptr [ebx+13h] 0 +
jz loc_100657B  +
cmp [ebx+1Ch] ecx +
jnz loc_100657B  +
cmp byte ptr [ebx+14h] 0 +
mov [ebp+var_25] 1 +
jnz loc_100657B  +
mov edi esi +
shl edi 4 +
mov [ebp+var_1C] ecx +
cmp edi ecx +
jz loc_1006483  +
cmp edi dword_100C998 +
ja loc_1006483  +
mov eax dword_100C99C +
lea eax [edi+eax+8] +
cmp eax edi +
jb loc_1006483  +
push eax  +
call sub_1009E78  +
test eax eax +
jz loc_1006483  +
lea eax [edi+8] +
call __alloca_probe_16  +
mov [ebp+var_1C] esp +
test esp esp +
jz loc_1006483  +
add [ebp+var_1C] 8 +
mov eax esp +
mov dword ptr [eax] 6B637453h +
jnz loc_10064B2  +
lea eax [edi+8] +
cmp eax edi +
jb loc_10064A8  +
push eax  +
call dword_100C9A0  +
mov [ebp+var_1C] eax +
test eax eax +
jz loc_10065ED  +
mov dword ptr [eax] 70616548h +
add eax 8 +
mov [ebp+var_1C] eax +
cmp [ebp+var_1C] 0 +
jz loc_10065ED  +
mov eax [ebx+8] +
mov esi [ebp+var_1C] +
test eax eax +
jz loc_10064F5  +
xor edi edi +
cmp [eax+4] edi +
jbe loc_10064F5  +
mov eax [ebp+var_20] +
mov eax [eax+edi*4] +
mov ecx [eax+4] +
shl ecx 4 +
push ecx  +
push dword ptr [eax]  +
push [ebp+var_1C]  +
call memcpy  +
mov eax [ebp+var_20] +
mov eax [eax+edi*4] +
mov eax [eax+4] +
shl eax 4 +
add [ebp+var_1C] eax +
mov eax [ebx+8] +
add esp 0Ch +
inc edi  +
cmp edi [eax+4] +
jb loc_10064C3  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_1006512  +
mov eax [ebx+0Ch] +
mov ecx [eax+4] +
shl ecx 4 +
push ecx  +
push dword ptr [eax]  +
push [ebp+var_1C]  +
call memcpy  +
add esp 0Ch +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+14h]  +
mov [ebp+var_1C] esi +
test eax eax +
jz loc_1006530  +
lea ecx [ebp+var_18] +
push ecx  +
push [ebp+var_24]  +
push esi  +
push eax  +
call AuditQueryPerUserPolicy  +
jmp loc_100653D  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+var_24]  +
push esi  +
call AuditQuerySystemPolicy  +
test al al +
jnz loc_100654C  +
call ds:GetLastError  +
jmp loc_10066E7  +
cmp [ebp+var_24] 0 +
jbe loc_10066DA  +
mov esi [ebp+var_24] +
xor edi edi +
mov ecx [ebp+var_18] +
push dword ptr [edi+ecx+10h]  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+0Ch]  +
mov ecx [ebp+var_18] +
mov [edi+ecx+10h] eax +
add edi 24h +
dec esi  +
jnz loc_100655B  +
jmp loc_10066DA  +
mov edi esi +
imul edi edi +
mov [ebp+var_18] ecx +
cmp edi ecx +
jz loc_10065C8  +
cmp edi dword_100C998 +
ja loc_10065C8  +
mov eax dword_100C99C +
lea eax [edi+eax+8] +
cmp eax edi +
jb loc_10065C8  +
push eax  +
call sub_1009E78  +
test eax eax +
jz loc_10065B3  +
lea eax [edi+8] +
call __alloca_probe_16  +
mov eax esp +
mov [ebp+var_18] eax +
cmp [ebp+var_18] 0 +
jz loc_10065C8  +
mov eax [ebp+var_18] +
mov dword ptr [eax] 6B637453h +
add [ebp+var_18] 8 +
jnz loc_10065F5  +
lea eax [edi+8] +
cmp eax edi +
jb loc_10065E7  +
push eax  +
call dword_100C9A0  +
mov [ebp+var_18] eax +
test eax eax +
jz loc_10065ED  +
mov dword ptr [eax] 70616548h +
add [ebp+var_18] 8 +
cmp [ebp+var_18] 0 +
jnz loc_10065F5  +
push 8  +
pop edi  +
jmp loc_10066E9  +
cmp byte ptr [ebx+14h] 0 +
mov eax [ebx] +
mov ecx ebx +
jz loc_1006604  +
call dword ptr [eax+8]  +
jmp loc_1006609  +
push 0  +
call dword ptr [eax+0Ch]  +
and [ebp+var_24] 0 +
mov [ebp+var_30] eax +
mov eax [ebx+8] +
test eax eax +
jz loc_1006689  +
and [ebp+var_2C] 0 +
cmp dword ptr [eax+4] 0 +
jbe loc_1006689  +
mov eax [ebp+var_20] +
mov edx [eax] +
and [ebp+var_38] 0 +
cmp dword ptr [edx+4] 0 +
jbe loc_1006678  +
mov ecx [ebp+var_24] +
imul ecx ecx +
and [ebp+var_34] 0 +
mov esi [edx] +
add esi [ebp+var_34] +
mov edx [ebp+var_18] +
lea edi [ecx+edx] +
movs   +
movs   +
movs   +
movs   +
mov edx [ebp+var_18] +
mov esi [ebp+var_30] +
inc [ebp+var_24]  +
add [ebp+var_34] 10h +
mov [ecx+edx+10h] esi +
mov edx [ebp+var_18] +
lea edi [ecx+edx+14h] +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
add ecx 24h +
inc [ebp+var_38]  +
movs   +
mov edx [eax] +
mov esi [ebp+var_38] +
cmp esi [edx+4] +
jb loc_100663A  +
inc [ebp+var_2C]  +
mov ecx [ebx+8] +
mov edx [ebp+var_2C] +
add eax 4 +
cmp edx [ecx+4] +
jb loc_1006624  +
mov edx [ebx+0Ch] +
test edx edx +
jz loc_10066DA  +
xor eax eax +
cmp [edx+4] eax +
jbe loc_10066DA  +
mov ecx [ebp+var_24] +
imul ecx ecx +
and [ebp+var_2C] eax +
mov esi [edx] +
add esi [ebp+var_2C] +
mov edx [ebp+var_18] +
lea edi [ecx+edx] +
movs   +
movs   +
movs   +
movs   +
mov edx [ebp+var_18] +
mov esi [ebp+var_30] +
inc [ebp+var_24]  +
add [ebp+var_2C] 10h +
mov [ecx+edx+10h] esi +
mov edx [ebp+var_18] +
lea edi [ecx+edx+14h] +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov edx [ebx+0Ch] +
add ecx 24h +
inc eax  +
cmp eax [edx+4] +
jb loc_10066A0  +
push [ebp+var_24]  +
mov eax [ebx] +
push [ebp+var_18]  +
mov ecx ebx +
call dword ptr [eax+10h]  +
mov edi eax +
mov eax [ebp+var_18] +
test eax eax +
jz loc_1006716  +
cmp [ebp+var_25] 0 +
jz loc_1006704  +
cmp byte ptr [ebx+14h] 0 +
jnz loc_1006704  +
push eax  +
call AuditFree  +
jmp loc_1006716  +
add eax 0FFFFFFF8h +
cmp dword ptr [eax] 70616548h +
jnz loc_1006716  +
push eax  +
call dword_100C9A4  +
mov eax [ebp+var_20] +
test eax eax +
jz loc_100672F  +
add eax 0FFFFFFF8h +
cmp dword ptr [eax] 70616548h +
jnz loc_100672F  +
push eax  +
call dword_100C9A4  +
mov eax [ebp+var_1C] +
test eax eax +
jz loc_1006748  +
add eax 0FFFFFFF8h +
cmp dword ptr [eax] 70616548h +
jnz loc_1006748  +
push eax  +
call dword_100C9A4  +
mov eax edi +
lea esp [ebp-44h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn   +
***
xor eax eax +
cmp [ecx+0Ch] eax +
jnz loc_100676D  +
cmp [ecx+8] eax +
jz loc_100677A  +
cmp [ecx+10h] al +
jnz loc_100677A  +
cmp [ecx+11h] al +
jnz loc_100677A  +
xor eax eax +
retn   +
***
push 57h  +
pop eax  +
retn   +
***
xor eax eax +
cmp [ecx+0Ch] eax +
jnz loc_100678F  +
cmp [ecx+8] eax +
jz loc_1006794  +
cmp [ecx+20h] eax +
jnz loc_1006798  +
push 57h  +
pop eax  +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jz loc_10067AF  +
or eax 4 +
mov dl [ecx+12h] +
test dl dl +
jnz loc_10067C4  +
cmp [ecx+13h] dl +
jnz loc_10067C0  +
or eax 1 +
jmp loc_10067E6  +
test dl dl +
jz loc_10067D2  +
cmp dword ptr [ecx+18h] 0 +
jz loc_10067CF  +
or eax 1 +
jmp loc_10067D2  +
and eax 0FFFFFFFEh +
cmp byte ptr [ecx+13h] 0 +
jz loc_10067E6  +
cmp dword ptr [ecx+1Ch] 0 +
jz loc_10067E3  +
or eax 2 +
jmp loc_10067E6  +
and eax 0FFFFFFFDh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
xor edx edx +
cmp eax edx +
jz loc_1006800  +
or eax 10h +
cmp [ecx+10h] dl +
jnz loc_100680E  +
cmp [ecx+11h] dl +
jnz loc_100680E  +
mov byte ptr [ecx+10h] 1 +
cmp [ecx+12h] dl +
jnz loc_1006821  +
cmp [ecx+13h] dl +
jnz loc_100681C  +
mov byte ptr [ecx+12h] 1 +
cmp [ecx+12h] dl +
jz loc_1006845  +
cmp [ecx+10h] dl +
jz loc_1006833  +
cmp [ecx+18h] edx +
jz loc_1006830  +
or eax 1 +
jmp loc_1006833  +
and eax 0FFFFFFFEh +
cmp [ecx+11h] dl +
jz loc_1006845  +
cmp [ecx+18h] edx +
jz loc_1006842  +
or eax 2 +
jmp loc_1006845  +
and eax 0FFFFFFFDh +
cmp [ecx+13h] dl +
jz loc_100686E  +
cmp [ecx+10h] dl +
jz loc_100685C  +
cmp [ecx+1Ch] edx +
jz loc_1006859  +
or eax 4 +
jmp loc_100685C  +
and eax 0FFFFFFFBh +
cmp [ecx+11h] dl +
jz loc_100686E  +
cmp [ecx+1Ch] edx +
jz loc_100686B  +
or eax 8 +
jmp loc_100686E  +
and eax 0FFFFFFF7h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+0Ch]  +
xor esi esi +
push dword ptr [ebp+8]  +
call AuditSetSystemPolicy  +
test al al +
jnz loc_1006896  +
call ds:GetLastError  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+0Ch]  +
xor esi esi +
push dword ptr [ebp+8]  +
push dword ptr [ecx+20h]  +
call AuditSetPerUserPolicy  +
test al al +
jnz loc_10068C4  +
call ds:GetLastError  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
mov ecx [ebp+arg_4] +
sub eax [ecx+14h] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp-4] eax +
call sub_100721F  +
test eax eax +
jz loc_100690D  +
call sub_10032B3  +
jmp loc_1006983  +
push esi  +
mov esi 100h +
push esi  +
lea eax [ebp-204h] +
push eax  +
push 2016h  +
call sub_1002D3F  +
lea eax [ebp-204h] +
push eax  +
push offset aS  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push esi  +
lea eax [ebp-204h] +
push eax  +
push 2010h  +
call sub_1002D3F  +
lea eax [ebp-204h] +
push eax  +
push offset a42s  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push esi  +
lea eax [ebp-204h] +
push eax  +
push 201Ah  +
call sub_1002D3F  +
lea eax [ebp-204h] +
push eax  +
push offset aS_0  +
call sub_1007502  +
pop ecx  +
pop ecx  +
pop esi  +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
call sub_100721F  +
mov esi eax +
mov eax [ebp+8] +
sub eax 0 +
jz loc_10069DC  +
dec eax  +
jz loc_10069D5  +
dec eax  +
jz loc_10069CE  +
dec eax  +
jz loc_10069C7  +
push 57h  +
pop eax  +
jmp loc_1006A36  +
mov eax 2003h +
jmp loc_10069E1  +
mov eax 2002h +
jmp loc_10069E1  +
mov eax 2001h +
jmp loc_10069E1  +
mov eax 2004h +
push 100h  +
lea ecx [ebp-204h] +
push ecx  +
push eax  +
call sub_1002D3F  +
lea eax [ebp-204h] +
push eax  +
push offset aS  +
call sub_1007502  +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_1006A29  +
push offset asc_10015B4  +
call sub_1007502  +
pop ecx  +
cmp esi 2 +
jnz loc_1006A29  +
push dword ptr [ebp+8]  +
push offset aD_1  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push offset asc_10016FC  +
call sub_1007502  +
pop ecx  +
xor eax eax +
mov ecx [ebp-4] +
xor ecx ebp +
pop esi  +
call sub_10093D4  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp-4] eax +
push edi  +
mov edi ecx +
call sub_100721F  +
test eax eax +
jz loc_1006A75  +
call sub_10032B3  +
jmp loc_1006B32  +
and dword ptr [ebp-208h] 0 +
push esi  +
mov esi 100h +
push esi  +
lea eax [ebp-204h] +
push eax  +
push 2017h  +
call sub_1002D3F  +
mov eax [edi] +
lea ecx [ebp-208h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+0Ch]  +
push dword ptr [ebp-208h]  +
lea eax [ebp-204h] +
push eax  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push dword ptr [ebp-208h]  +
call ds:LocalFree  +
push esi  +
lea eax [ebp-204h] +
push eax  +
push 2010h  +
call sub_1002D3F  +
lea eax [ebp-204h] +
push eax  +
push offset a42s  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push esi  +
lea eax [ebp-204h] +
push eax  +
push 2014h  +
call sub_1002D3F  +
lea eax [ebp-204h] +
push eax  +
push offset a20s  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push esi  +
lea eax [ebp-204h] +
push eax  +
push 2015h  +
call sub_1002D3F  +
lea eax [ebp-204h] +
push eax  +
push offset aS_0  +
call sub_1007502  +
pop ecx  +
pop ecx  +
pop esi  +
mov ecx [ebp-4] +
xor ecx ebp +
pop edi  +
call sub_10093D4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov eax 2005h +
push edi  +
mov ebx eax +
mov [ebp-208h] eax +
call sub_100721F  +
mov [ebp-20Ch] eax +
mov eax [ebp+8] +
and eax 5 +
lea esi [ebx-2] +
lea edx [ebx-3] +
lea ecx [ebx-4] +
jz loc_1006B9A  +
dec eax  +
jz loc_1006B98  +
sub eax 3 +
jz loc_1006B94  +
dec eax  +
jnz loc_1006B9A  +
mov ebx esi +
jmp loc_1006B9A  +
mov ebx edx +
jmp loc_1006B9A  +
mov ebx ecx +
mov eax [ebp+8] +
and eax 0Ah +
jz loc_1006BC5  +
dec eax  +
dec eax  +
jz loc_1006BBF  +
sub eax 6 +
jz loc_1006BB7  +
dec eax  +
dec eax  +
jnz loc_1006BC5  +
mov [ebp-208h] esi +
jmp loc_1006BC5  +
mov [ebp-208h] edx +
jmp loc_1006BC5  +
mov [ebp-208h] ecx +
cmp dword ptr [ebp-20Ch] 0 +
mov edi offset aS +
jnz loc_1006BD8  +
mov edi offset a20s_0 +
mov esi 100h +
push esi  +
lea eax [ebp-204h] +
push eax  +
push ebx  +
call sub_1002D3F  +
lea eax [ebp-204h] +
push eax  +
push edi  +
call sub_1007502  +
cmp dword ptr [ebp-20Ch] 0 +
pop ecx  +
pop ecx  +
jz loc_1006C0E  +
push offset asc_10015B4  +
call sub_1007502  +
pop ecx  +
push esi  +
lea eax [ebp-204h] +
push eax  +
push dword ptr [ebp-208h]  +
call sub_1002D3F  +
lea eax [ebp-204h] +
push eax  +
push edi  +
call sub_1007502  +
cmp dword ptr [ebp-20Ch] 2 +
pop ecx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
jnz loc_1006C4B  +
push dword ptr [ebp+8]  +
push offset aD_1  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push offset asc_10016FC  +
call sub_1007502  +
pop ecx  +
mov ecx [ebp-4] +
xor ecx ebp +
xor eax eax +
call sub_10093D4  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
xor esi esi +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call AuditQuerySystemPolicy  +
test al al +
jnz loc_1006C8D  +
call ds:GetLastError  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
xor esi esi +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push dword ptr [ecx+0Ch]  +
call AuditQueryPerUserPolicy  +
test al al +
jnz loc_1006CBE  +
call ds:GetLastError  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push dword ptr [ecx+0Ch]  +
call ConvertSidToStringSidW  +
test eax eax +
jnz loc_1006CE6  +
call ds:GetLastError  +
jmp loc_1006CE8  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
push edi  +
mov edi [ebp+8] +
push 40h  +
lea eax [ebp-84h] +
push eax  +
push 200Bh  +
call sub_1002D3F  +
lea eax [ebp-84h] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1006D27  +
sub eax edx +
sar eax 1 +
lea esi [eax+1] +
lea eax [esi+esi] +
push eax  +
push 0  +
call ds:LocalAlloc  +
mov [edi] eax +
test eax eax +
jnz loc_1006D4F  +
push 8  +
pop eax  +
jmp loc_1006D5F  +
lea ecx [ebp-84h] +
push ecx  +
push esi  +
push eax  +
call sub_1002FB2  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10093D4  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A4h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov ebx ecx +
mov [ebp+var_78] edi +
mov [ebp+var_84] edi +
mov [ebp+var_80] esi +
mov [ebp+var_90] edi +
mov [ebp+var_A0] edi +
mov [ebp+var_98] edi +
mov [ebp+hMem] edi +
mov [ebp+var_9C] edi +
call sub_100721F  +
mov [ebp+var_8C] eax +
mov eax [ebx+4] +
cmp eax edi +
jz loc_1006EB4  +
mov eax [eax+4] +
mov ecx eax +
shl ecx 2 +
mov [ebp+var_78] edi +
cmp ecx edi +
jz loc_1006E39  +
cmp ecx dword_100C998 +
ja loc_1006E39  +
mov ecx [ebx+4] +
mov edx [ecx+4] +
mov ecx dword_100C99C +
lea edi [ecx+edx*4+8] +
shl edx 2 +
cmp edi edx +
jb loc_1006E39  +
lea eax [ecx+eax*4+8] +
push eax  +
call sub_1009E78  +
test eax eax +
jz loc_1006E39  +
mov eax [ebx+4] +
mov eax [eax+4] +
lea eax ds:8[eax*4] +
call __alloca_probe_16  +
xor edi edi +
mov [ebp+var_78] esp +
cmp esp edi +
jz loc_1006E3B  +
add [ebp+var_78] 8 +
mov eax esp +
mov dword ptr [eax] 6B637453h +
jnz loc_1006E81  +
jmp loc_1006E3B  +
xor edi edi +
mov eax [ebx+4] +
mov eax [eax+4] +
lea ecx ds:8[eax*4] +
shl eax 2 +
cmp ecx eax +
jb loc_1006E78  +
mov eax [ebx+4] +
mov eax [eax+4] +
lea eax ds:8[eax*4] +
push eax  +
call dword_100C9A0  +
mov [ebp+var_78] eax +
cmp eax edi +
jz loc_1006FDC  +
add [ebp+var_78] 8 +
mov dword ptr [eax] 70616548h +
cmp [ebp+var_78] edi +
jz loc_1006FDC  +
push [ebp+var_78]  +
push dword ptr [ebx+4]  +
call sub_1003F17  +
mov [ebp+var_7C] eax +
cmp eax edi +
jnz loc_1007135  +
mov ecx [ebx+4] +
mov ecx [ecx+4] +
xor eax eax +
cmp ecx edi +
jbe loc_1006EB4  +
mov edx [ebp+var_78] +
mov edx [edx+eax*4] +
add esi [edx+4] +
inc eax  +
cmp eax ecx +
jb loc_1006EA3  +
mov [ebp+var_80] esi +
mov eax [ebx+8] +
cmp eax edi +
jz loc_1006EC1  +
add esi [eax+4] +
mov [ebp+var_80] esi +
shl esi 4 +
test esi esi +
jz loc_1006F00  +
cmp esi dword_100C998 +
ja loc_1006F00  +
mov eax dword_100C99C +
lea eax [esi+eax+8] +
cmp eax esi +
jb loc_1006F00  +
push eax  +
call sub_1009E78  +
test eax eax +
jz loc_1006F00  +
lea eax [esi+8] +
call __alloca_probe_16  +
mov edi esp +
test edi edi +
jz loc_1006F00  +
mov dword ptr [edi] 6B637453h +
add edi 8 +
jnz loc_1006F29  +
lea eax [esi+8] +
cmp eax esi +
jb loc_1006F21  +
push eax  +
call dword_100C9A0  +
mov edi eax +
test edi edi +
jz loc_1006FDC  +
mov dword ptr [edi] 70616548h +
add edi 8 +
test edi edi +
jz loc_1006FDC  +
mov eax [ebx+4] +
mov [ebp+var_90] edi +
test eax eax +
jz loc_1006F75  +
and [ebp+var_7C] 0 +
cmp dword ptr [eax+4] 0 +
jbe loc_1006F75  +
mov eax [ebp+var_78] +
mov ecx [ebp+var_7C] +
lea esi [eax+ecx*4] +
mov eax [esi] +
mov ecx [eax+4] +
shl ecx 4 +
push ecx  +
push dword ptr [eax]  +
push edi  +
call memcpy  +
mov eax [esi] +
mov eax [eax+4] +
shl eax 4 +
add edi eax +
mov eax [ebx+4] +
add esp 0Ch +
inc [ebp+var_7C]  +
mov ecx [ebp+var_7C] +
cmp ecx [eax+4] +
jb loc_1006F40  +
cmp dword ptr [ebx+8] 0 +
jz loc_1006F90  +
mov eax [ebx+8] +
mov ecx [eax+4] +
shl ecx 4 +
push ecx  +
push dword ptr [eax]  +
push edi  +
call memcpy  +
add esp 0Ch +
mov eax [ebx] +
lea ecx [ebp+var_84] +
push ecx  +
push [ebp+var_80]  +
mov ecx ebx +
push [ebp+var_90]  +
call dword ptr [eax+4]  +
xor esi esi +
mov [ebp+var_7C] eax +
cmp eax esi +
jnz loc_1007135  +
push offset sub_10068D0  +
push 24h  +
push [ebp+var_80]  +
push [ebp+var_84]  +
call ds:qsort  +
add esp 10h +
call sub_1003EC5  +
mov [ebp+var_A4] eax +
cmp eax esi +
jnz loc_1006FE8  +
mov [ebp+var_7C] 8 +
jmp loc_1007135  +
cmp [ebp+var_8C] esi +
jz loc_1007006  +
push 10h  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1002C4C  +
mov [ebp+var_7C] eax +
cmp eax esi +
jnz loc_1007135  +
mov eax [ebx] +
lea ecx [ebp+hMem] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+0Ch]  +
mov [ebp+var_7C] eax +
cmp eax esi +
jnz loc_1007135  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+10h]  +
cmp [ebp+var_80] esi +
jbe loc_1007135  +
mov eax [ebp+var_80] +
mov [ebp+var_94] esi +
mov [ebp+var_80] eax +
cmp [ebp+var_8C] 0 +
jz loc_100705D  +
push [ebp+hMem]  +
lea eax [ebp+Buffer] +
push eax  +
push offset aSS_0  +
call sub_1007502  +
add esp 0Ch +
jmp loc_10070B4  +
cmp [ebp+var_9C] 0 +
mov eax [ebp+var_84] +
jz loc_1007085  +
lea edi [esi+eax+14h] +
mov esi [ebp+var_9C] +
push 4  +
pop ecx  +
xor edx edx +
cmps   +
mov esi [ebp+var_94] +
jz loc_10070B4  +
lea ecx [ebp+var_A0] +
lea eax [esi+eax+14h] +
push ecx  +
mov ecx [ebp+var_A4] +
push eax  +
mov [ebp+var_9C] eax +
call sub_1004E11  +
push [ebp+var_A0]  +
push offset aS_0  +
call sub_1007502  +
pop ecx  +
pop ecx  +
mov ecx [ebp+var_A4] +
lea eax [ebp+var_98] +
push eax  +
mov eax [ebp+var_84] +
add eax esi +
push eax  +
call sub_1004E49  +
cmp [ebp+var_8C] 0 +
push [ebp+var_98]  +
jnz loc_10070E5  +
push offset a40s_0  +
jmp loc_100710B  +
mov edi offset aS_1 +
push edi  +
call sub_1007502  +
pop ecx  +
pop ecx  +
push 27h  +
lea eax [ebp+var_74] +
push eax  +
mov eax [ebp+var_84] +
add eax esi +
push eax  +
call sub_1003046  +
lea eax [ebp+var_74] +
push eax  +
push edi  +
call sub_1007502  +
mov eax [ebx] +
pop ecx  +
pop ecx  +
mov ecx [ebp+var_84] +
push dword ptr [esi+ecx+10h]  +
mov ecx ebx +
call dword ptr [eax+8]  +
add esi 24h +
dec [ebp+var_80]  +
mov [ebp+var_94] esi +
jnz loc_100703B  +
cmp [ebp+hMem] 0 +
jz loc_100714A  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax [ebp+var_78] +
test eax eax +
jz loc_1007163  +
add eax 0FFFFFFF8h +
cmp dword ptr [eax] 70616548h +
jnz loc_1007163  +
push eax  +
call dword_100C9A4  +
mov eax [ebp+var_90] +
test eax eax +
jz loc_100717F  +
add eax 0FFFFFFF8h +
cmp dword ptr [eax] 70616548h +
jnz loc_100717F  +
push eax  +
call dword_100C9A4  +
cmp [ebp+var_84] 0 +
jz loc_1007193  +
push [ebp+var_84]  +
call AuditFree  +
mov eax [ebp+var_7C] +
lea esp [ebp-0B0h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push 1  +
push eax  +
push eax  +
push 2  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jnz loc_10071E1  +
push offset aFailedToOpenFi  +
call ds:wprintf  +
pop ecx  +
call ds:GetLastError  +
jmp loc_10071E8  +
mov hObject eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax hObject +
test eax eax +
jz loc_100720B  +
cmp eax 0FFFFFFFFh +
jz loc_100720B  +
push eax  +
call ds:CloseHandle  +
push [ebp+lpFileName]  +
call ds:DeleteFileW  +
xor eax eax +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1007245  +
cmp eax 1 +
jz loc_1007245  +
cmp eax 2 +
jz loc_100724A  +
push 57h  +
pop eax  +
jmp loc_100725A  +
cmp eax 2 +
jnz loc_1007253  +
cmp hObject 0 +
jz loc_1007240  +
mov dword_100C61C eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1020h +
call __alloca_probe  +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax ds:_iob +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
xor ebx ebx +
lea edx [eax+40h] +
mov [ebp+var_1020] ecx +
mov [ebp+var_101C] esi +
mov [ebp+var_1018] edi +
mov [ebp+lpBuffer] ebx +
cmp ecx edx +
jnz loc_100730F  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
push edi  +
push esi  +
push 7FFh  +
mov [ebp+hFile] eax +
lea eax [ebp+var_1004] +
push 800h  +
push eax  +
call _vsnwprintf_s  +
add esp 14h +
test eax eax +
jge loc_100734E  +
push offset unk_100C630  +
xor ecx ecx +
push 2  +
mov esi 1000h +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1009431  +
pop ecx  +
pop ecx  +
mov [ebp+lpWideCharStr] eax +
cmp eax ebx +
jnz loc_100732B  +
push 8  +
pop esi  +
jmp loc_1007487  +
add eax 20h +
cmp ecx eax +
jnz loc_100731A  +
push 0FFFFFFF5h  +
jmp loc_10072B0  +
mov eax hObject +
cmp eax ebx +
jnz loc_10072B6  +
push 57h  +
pop eax  +
jmp loc_10074E8  +
push edi  +
push [ebp+var_101C]  +
push 0FFFh  +
push esi  +
push eax  +
call _vsnwprintf_s  +
add esp 14h +
cmp eax ebx +
jge loc_100735A  +
cmp eax 0FFFFFFFFh +
jz loc_100735A  +
push 7Ah  +
jmp loc_1007309  +
lea eax [ebp+var_1004] +
mov [ebp+lpWideCharStr] eax +
mov eax [ebp+lpWideCharStr] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1007363  +
mov ecx [ebp+hFile] +
sub eax edx +
sar eax 1 +
mov [ebp+NumberOfBytesWritten] eax +
push ebx  +
cmp ecx hObject +
jz loc_10073A0  +
lea edx [ebp+NumberOfBytesWritten] +
push edx  +
push eax  +
push [ebp+lpWideCharStr]  +
push ecx  +
call ds:WriteConsoleW  +
jmp loc_1007473  +
mov edi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call edi  +
mov esi eax +
cmp esi ebx +
jz loc_1007477  +
mov [ebp+lpBuffer] ebx +
cmp esi dword_100C998 +
ja loc_1007406  +
mov eax dword_100C99C +
lea eax [eax+esi+8] +
cmp eax esi +
jb loc_1007406  +
push eax  +
call sub_1009E78  +
test eax eax +
jz loc_1007406  +
lea eax [esi+8] +
call __alloca_probe_16  +
mov [ebp+lpBuffer] esp +
cmp esp ebx +
jz loc_1007406  +
add [ebp+lpBuffer] 8 +
mov eax esp +
mov dword ptr [eax] 6B637453h +
jnz loc_100743B  +
lea eax [esi+8] +
cmp eax esi +
jb loc_100742F  +
push eax  +
call dword_100C9A0  +
mov [ebp+lpBuffer] eax +
cmp eax ebx +
jz loc_1007307  +
add [ebp+lpBuffer] 8 +
mov dword ptr [eax] 70616548h +
cmp [ebp+lpBuffer] ebx +
jz loc_1007307  +
push ebx  +
push ebx  +
push esi  +
push [ebp+lpBuffer]  +
push [ebp+NumberOfBytesWritten]  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call edi  +
cmp eax ebx +
jz loc_1007477  +
push ebx  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
push eax  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:WriteFile  +
test eax eax +
jnz loc_1007481  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1007483  +
xor esi esi +
cmp esi ebx +
jz loc_10074A8  +
push [ebp+var_1018]  +
push [ebp+var_101C]  +
push [ebp+var_1020]  +
call ds:vfwprintf  +
add esp 0Ch +
test eax eax +
jle loc_10074A8  +
xor esi esi +
mov eax [ebp+lpBuffer] +
cmp eax ebx +
jz loc_10074C4  +
add eax 0FFFFFFF8h +
cmp dword ptr [eax] 70616548h +
jnz loc_10074C4  +
push eax  +
call dword_100C9A4  +
cmp [ebp+lpWideCharStr] ebx +
jz loc_10074E6  +
lea eax [ebp+var_1004] +
cmp [ebp+lpWideCharStr] eax +
jz loc_10074E6  +
push [ebp+lpWideCharStr]  +
call sub_100909F  +
pop ecx  +
mov eax esi +
lea esp [ebp-102Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_100C61C +
mov ecx ds:_iob +
dec eax  +
dec eax  +
add ecx 20h +
neg eax  +
sbb eax eax +
and eax ecx +
lea ecx [ebp+arg_4] +
push ecx  +
push [ebp+arg_0]  +
push eax  +
call sub_1007263  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
lea eax [ebp+hMem] +
push eax  +
push 400h  +
push [ebp+dwMessageId]  +
or edi 0FFFFFFFFh +
push esi  +
push 900h  +
mov [ebp+hMem] esi +
call ds:FormatMessageW  +
test eax eax +
jz loc_100758C  +
cmp [ebp+hMem] esi +
jz loc_100758C  +
lea eax [ebp+arg_4] +
push eax  +
mov eax ds:_iob +
push [ebp+hMem]  +
add eax 20h +
push eax  +
call sub_1007263  +
add esp 0Ch +
push [ebp+hMem]  +
mov edi eax +
call ds:LocalFree  +
jmp loc_10075A0  +
call ds:GetLastError  +
push eax  +
push offset aErrorD  +
call ds:wprintf  +
pop ecx  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1007263  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 3Ah  +
push [ebp+arg_0]  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10075E4  +
push 0Dh  +
pop eax  +
jmp loc_1007628  +
push esi  +
xor ecx ecx +
lea esi [eax+2] +
push ecx  +
push esi  +
mov [eax] cx +
call sub_1002CE2  +
test eax eax +
jnz loc_1007627  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1007620  +
cmp eax 1 +
jz loc_1007620  +
cmp eax 2 +
jnz loc_100761B  +
push offset aCrashonauditfa  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007627  +
push 0Dh  +
pop eax  +
jmp loc_1007627  +
push eax  +
push esi  +
call sub_1005568  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
push esi  +
mov eax ds:off_1001840[edi*8] +
mov edx [ebp+arg_0] +
mov si [edx] +
cmp si [eax] +
jnz loc_100766A  +
test si si +
jz loc_1007666  +
mov si [edx+2] +
cmp si [eax+2] +
jnz loc_100766A  +
add edx 4 +
add eax 4 +
test si si +
jnz loc_1007644  +
xor eax eax +
jmp loc_100766F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1007679  +
inc edi  +
cmp edi 2 +
jb loc_100763A  +
pop esi  +
cmp edi 2 +
jnz loc_1007686  +
mov eax 490h +
jmp loc_10076AF  +
lea eax [ecx+edi*4+1Ch] +
cmp dword ptr [eax] 0 +
jz loc_1007694  +
push 0Dh  +
pop eax  +
jmp loc_10076AF  +
push 0  +
push eax  +
push 1  +
push [ebp+arg_4]  +
call ConvertStringSecurityDescriptorToSecurityDescriptorW  +
test eax eax +
jnz loc_10076AD  +
call ds:GetLastError  +
jmp loc_10076AF  +
xor eax eax +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:wcschr +
push edi  +
push 2Ch  +
pop edi  +
push edi  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
test eax eax +
jnz loc_10076E2  +
push 0Dh  +
pop eax  +
jmp loc_100777D  +
add eax 2 +
push edi  +
push eax  +
mov [ecx] eax +
call esi  +
pop ecx  +
pop ecx  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
test eax eax +
jz loc_10076DA  +
add eax 2 +
push edi  +
push eax  +
mov [ecx] eax +
call esi  +
pop ecx  +
pop ecx  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
test eax eax +
jz loc_10076DA  +
push ebx  +
add eax 2 +
push edi  +
push eax  +
mov [ecx] eax +
call esi  +
mov ebx [ebp+arg_10] +
pop ecx  +
pop ecx  +
mov [ebx] eax +
test eax eax +
jz loc_1007748  +
add eax 2 +
push edi  +
push eax  +
mov [ebx] eax +
call esi  +
mov edi [ebp+arg_14] +
pop ecx  +
pop ecx  +
mov [edi] eax +
test eax eax +
jz loc_1007748  +
add eax 2 +
push 2Ch  +
push eax  +
mov [edi] eax +
call esi  +
pop ecx  +
pop ecx  +
mov ecx [ebp+arg_18] +
mov [ecx] eax +
test eax eax +
jnz loc_100774D  +
push 0Dh  +
pop eax  +
jmp loc_100777C  +
add eax 2 +
mov [ecx] eax +
mov eax [ebp+arg_8] +
mov eax [eax] +
xor edx edx +
mov [eax-2] dx +
mov eax [ebp+arg_C] +
mov eax [eax] +
mov [eax-2] dx +
mov eax [ebx] +
mov [eax-2] dx +
mov eax [edi] +
mov [eax-2] dx +
mov eax [ecx] +
xor ecx ecx +
mov [eax-2] cx +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_10077A7  +
xor ecx ecx +
imul ecx ecx +
push ecx  +
call loc_1009030  +
pop ecx  +
leave   +
retn 8  +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 0Ch +
jnb loc_1007799  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_100299D  +
push offset dword_100A1C8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10077E4  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 8  +
***
call loc_1007788  +
test eax eax +
jz loc_10077FC  +
mov [eax] eax +
lea ecx [eax+4] +
test ecx ecx +
jz locret_1007805  +
mov [ecx] eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+4] eax +
and dword ptr [esi+8] 0 +
cmp ecx [esi+4] +
jz loc_1007838  +
push edi  +
mov edi [ecx] +
push ecx  +
call sub_100909F  +
pop ecx  +
mov ecx edi +
cmp edi [esi+4] +
jnz loc_1007827  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 1  +
call loc_1007788  +
mov esi eax +
test esi esi +
jz loc_1007859  +
mov eax [ebp+arg_0] +
mov [esi] eax +
lea eax [esi+4] +
test eax eax +
jz loc_1007865  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
push [ebp+arg_8]  +
lea eax [esi+8] +
push eax  +
call sub_10077D1  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+0Ch] +
test eax eax +
jz loc_1007896  +
push eax  +
call sub_100909F  +
and dword ptr [edi+0Ch] 0 +
pop ecx  +
mov eax [edi+14h] +
mov esi [eax] +
mov ebx ds:LocalFree +
cmp esi eax +
jz loc_10078CD  +
mov eax [esi+8] +
push dword ptr [eax]  +
call ebx  +
mov eax [esi+8] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_10078BD  +
push eax  +
call sub_100909F  +
pop ecx  +
push dword ptr [esi+8]  +
call sub_100909F  +
mov esi [esi] +
pop ecx  +
cmp esi [edi+14h] +
jnz loc_10078A5  +
push 2  +
lea esi [edi+1Ch] +
pop edi  +
mov eax [esi] +
test eax eax +
jz loc_10078DF  +
push eax  +
call ebx  +
and dword ptr [esi] 0 +
add esi 4 +
dec edi  +
jnz loc_10078D3  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push edi  +
mov edi ecx +
mov eax [edi+8] +
xor ebx ebx +
mov [ebp+var_8] ebx +
cmp eax ebx +
jz loc_100791E  +
push eax  +
push dword ptr [edi+0Ch]  +
call AuditSetSystemPolicy  +
test al al +
jnz loc_100791E  +
call ds:GetLastError  +
jmp loc_10079B7  +
push esi  +
lea esi [edi+1Ch] +
mov eax [esi] +
and [ebp+pSacl] 0 +
test eax eax +
jz loc_100794D  +
lea ecx [ebp+bSaclDefaulted] +
push ecx  +
lea ecx [ebp+pSacl] +
push ecx  +
lea ecx [ebp+bSaclPresent] +
push ecx  +
push eax  +
call ds:GetSecurityDescriptorSacl  +
test eax eax +
jz loc_10079AC  +
cmp [ebp+bSaclPresent] 0 +
jnz loc_100794D  +
and [ebp+pSacl] 0 +
push [ebp+pSacl]  +
push ds:off_100183C[ebx]  +
call AuditSetGlobalSaclW  +
test al al +
jz loc_10079AC  +
add ebx 8 +
add esi 4 +
cmp ebx 10h +
jb loc_1007922  +
mov eax [edi+14h] +
mov esi [eax] +
cmp esi eax +
jz loc_10079B4  +
mov ebx 534h +
mov eax [esi+8] +
push dword ptr [eax+8]  +
push dword ptr [eax+0Ch]  +
push dword ptr [eax]  +
call AuditSetPerUserPolicy  +
test al al +
jnz loc_1007999  +
call ds:GetLastError  +
cmp eax ebx +
jnz loc_10079B6  +
mov [ebp+var_8] ebx +
mov esi [esi] +
cmp esi [edi+14h] +
jnz loc_1007978  +
cmp [ebp+var_8] ebx +
jnz loc_10079B4  +
mov eax 515h +
jmp loc_10079B6  +
call ds:GetLastError  +
jmp loc_10079B6  +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100780B  +
push dword ptr [esi+4]  +
call sub_100909F  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10077ED  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+10h] +
call sub_10079DE  +
xor eax eax +
mov edi esi +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [esi+1Ch] +
stos   +
stos   +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100787D  +
lea ecx [esi+10h] +
pop esi  +
jmp loc_10079C0  +
***
call __EH_prolog3  +
mov eax [ecx+8] +
mov edx [ebp+8] +
mov esi 3FFFFFFFh +
sub esi eax +
cmp esi edx +
jnb loc_1007A7F  +
push offset aListTTooLong  +
lea ecx [ebp-28h] +
call sub_1003AE6  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1004523  +
push offset dword_100A3D4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
add eax edx +
mov [ecx+8] eax +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea edi [eax+4] +
push dword ptr [edi]  +
mov ebx ecx +
push eax  +
call sub_100783F  +
push 1  +
mov ecx ebx +
mov esi eax +
call sub_1007A37  +
mov [edi] esi +
mov eax [esi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1007A91  +
mov eax [ebp+arg_4] +
mov ecx [eax+4] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
call sub_1003EC5  +
mov esi eax +
test esi esi +
jnz loc_1007B0C  +
push 8  +
pop eax  +
jmp loc_1007C02  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+Source2]  +
mov ecx esi +
call sub_1004E49  +
mov ecx eax +
test ecx ecx +
jz loc_1007B2E  +
sub eax 57h +
neg eax  +
sbb eax eax +
and eax ecx +
jmp loc_1007C02  +
push ebx  +
mov ebx [ebp+arg_8] +
push edi  +
lea edi [ebx+4] +
cmp dword ptr [edi] 0 +
jnz loc_1007B77  +
push edi  +
mov ecx esi +
call sub_1004F3F  +
test eax eax +
jnz loc_1007C00  +
mov eax [edi] +
push offset unk_100C630  +
xor ecx ecx +
push 24h  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1009431  +
pop ecx  +
pop ecx  +
mov [ebx+0Ch] eax +
test eax eax +
jnz loc_1007B77  +
push 8  +
pop eax  +
jmp loc_1007C00  +
mov eax [ebx+8] +
mov edi [edi] +
cmp eax edi +
jnb loc_1007BA4  +
mov esi [ebp+Source2] +
mov edi eax +
imul edi edi +
add edi [ebx+0Ch] +
mov edx [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebx+8] +
mov ecx [ebx+0Ch] +
imul eax eax +
mov [eax+ecx+10h] edx +
inc dword ptr [ebx+8]  +
jmp loc_1007BF7  +
jnz loc_1007BFB  +
xor edi edi +
mov [ebp+arg_8] edi +
cmp eax edi +
jbe loc_1007BEF  +
mov eax [ebx+0Ch] +
mov esi [ebp+Source2] +
push 10h  +
push esi  +
add eax edi +
push eax  +
call ds:RtlCompareMemory  +
cmp eax 10h +
jz loc_1007BD6  +
inc [ebp+arg_8]  +
mov eax [ebp+arg_8] +
add edi 24h +
cmp eax [ebx+8] +
jb loc_1007BAF  +
jmp loc_1007BEF  +
mov eax [ebp+arg_8] +
mov edi [ebx+0Ch] +
imul eax eax +
mov edx [ebp+arg_4] +
add edi eax +
movs   +
movs   +
movs   +
movs   +
mov ecx [ebx+0Ch] +
mov [ecx+eax+10h] edx +
mov eax [ebp+arg_8] +
cmp eax [ebx+8] +
jz loc_1007BFB  +
xor eax eax +
jmp loc_1007C00  +
mov eax 54Fh +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
call __EH_prolog3_catch_GS  +
mov eax [ebp+8] +
mov esi [ebp+0Ch] +
and dword ptr [ebp-28h] 0 +
mov ebx ecx +
lea ecx [ebp-28h] +
push ecx  +
push eax  +
call ConvertStringSidToSidW  +
test eax eax +
jnz loc_1007C3D  +
call ds:GetLastError  +
jmp loc_1007D18  +
lea eax [ebp-24h] +
push eax  +
push esi  +
call sub_1002C80  +
test eax eax +
jz loc_1007C5D  +
mov esi eax +
push dword ptr [ebp-28h]  +
call ds:LocalFree  +
mov eax esi +
jmp loc_1007D18  +
mov eax [ebx+14h] +
mov esi [eax] +
cmp esi eax +
jz loc_1007C7F  +
mov eax [esi+8] +
push dword ptr [eax]  +
push dword ptr [ebp-28h]  +
call ds:EqualSid  +
test eax eax +
jnz loc_1007C7F  +
mov esi [esi] +
cmp esi [ebx+14h] +
jnz loc_1007C66  +
cmp esi [ebx+14h] +
jnz loc_1007CEA  +
push offset unk_100C630  +
push 10h  +
call ??2@YAPAXIABUnothrow_t@std@@@Z  +
mov esi eax +
pop ecx  +
pop ecx  +
mov [ebp-2Ch] esi +
test esi esi +
jnz loc_1007CA0  +
push 8  +
pop esi  +
jmp loc_1007C4D  +
xor eax eax +
and dword ptr [ebp-4] 0 +
mov edi esi +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp-28h] +
mov [esi] eax +
mov eax [ebx+14h] +
mov eax [eax] +
lea ecx [ebp-2Ch] +
push ecx  +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebx+10h] +
call sub_1007ACA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1007CFA  +
push dword ptr [ebp-28h]  +
call ds:LocalFree  +
push dword ptr [ebp-2Ch]  +
call sub_100909F  +
pop ecx  +
mov eax offset loc_1007CE5 +
retn   +
push 8  +
pop eax  +
jmp loc_1007D18  +
push dword ptr [ebp-28h]  +
mov esi [esi+8] +
call ds:LocalFree  +
and dword ptr [ebp-28h] 0 +
mov eax [ebp+10h] +
test eax 0FFFFFFF0h +
jz loc_1007D08  +
push 0Dh  +
jmp loc_1007CE7  +
push esi  +
or eax 10h +
push eax  +
lea eax [ebp-24h] +
push eax  +
mov ecx ebx +
call sub_1007AEE  +
call sub_100965E  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
lea ecx [ebp+Source2] +
push ecx  +
push eax  +
call sub_1002C80  +
test eax eax +
jnz loc_1007D6A  +
mov eax [ebp+arg_4] +
test eax 0FFFFFFFCh +
jz loc_1007D5A  +
push 0Dh  +
pop eax  +
jmp loc_1007D6A  +
push esi  +
or eax 4 +
push eax  +
lea eax [ebp+Source2] +
push eax  +
mov ecx esi +
call sub_1007AEE  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10093D4  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
cmp word ptr [ebx] 0 +
push edi  +
mov edi ecx +
jnz loc_1007D95  +
push 0Dh  +
pop eax  +
jmp loc_1007E12  +
push esi  +
mov esi [ebp+arg_14] +
push esi  +
push ebx  +
call sub_1007631  +
cmp eax 490h +
jz loc_1007DC3  +
mov edx [ebp+arg_8] +
xor ecx ecx +
cmp [edx] cx +
jnz loc_1007DDD  +
mov edx [ebp+arg_C] +
cmp [edx] cx +
jnz loc_1007DDD  +
mov edx [ebp+arg_10] +
cmp [edx] cx +
jz loc_1007E11  +
jmp loc_1007DDD  +
push esi  +
call ds:_wtoi  +
xor edx edx +
pop ecx  +
cmp eax edx +
jnz loc_1007DE2  +
cmp word ptr [esi] 30h +
jz loc_1007DE2  +
cmp [esi+2] dx +
jz loc_1007DE2  +
push 0Dh  +
pop eax  +
jmp loc_1007E11  +
mov ecx [ebp+arg_0] +
push eax  +
cmp [ecx] dx +
jnz loc_1007DF5  +
push ebx  +
mov ecx edi +
call sub_10075C9  +
jmp loc_1007E11  +
mov esi [ebp+arg_10] +
push [ebp+arg_8]  +
cmp [esi] dx +
jnz loc_1007E09  +
mov ecx edi +
call sub_1007D25  +
jmp loc_1007E11  +
push ecx  +
mov ecx edi +
call sub_1007C0C  +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1007E38  +
cmp [esi] ax +
jz loc_1007E34  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1007E2A  +
test edx edx +
jnz loc_1007E3D  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1007E4E  +
test eax eax +
jl loc_1007E4B  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi eax +
xor eax eax +
test edx edx +
jz loc_1007E67  +
cmp edx [ebp+arg_4] +
jbe loc_1007E6C  +
mov eax 80070057h +
test eax eax +
jl loc_1007E7A  +
mov eax [ebp+arg_0] +
call sub_1007E1D  +
jmp loc_1007E7D  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1007EBC  +
cmp [ebp+arg_4] eax +
jz loc_1007EB8  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1007EB8  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1007E9B  +
test esi esi +
jnz loc_1007EC4  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1007ED2  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1007EDE  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov edi [ebp+pAce] +
xor esi esi +
cmp edi esi +
jz loc_1007FBA  +
cmp [ebp+pSid1] esi +
jz loc_1007FBA  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push edi  +
call ds:GetAclInformation  +
test eax eax +
jz loc_1007FBA  +
push ebx  +
mov ebx [ebp+pAclInformation] +
cmp ebx esi +
jbe loc_1007FB9  +
lea eax [ebp+pAce] +
push eax  +
push esi  +
push edi  +
call ds:GetAce  +
mov ecx [ebp+pAce] +
movzx eax byte ptr [ecx] +
dec eax  +
dec eax  +
jnz loc_1007FB4  +
lea eax [ecx+8] +
push eax  +
push [ebp+pSid1]  +
call ds:EqualSid  +
test eax eax +
jz loc_1007FB4  +
push esi  +
push edi  +
call ds:DeleteAce  +
dec ebx  +
dec esi  +
inc esi  +
cmp esi ebx +
jb loc_1007F83  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
push edi  +
push [ebp+arg_0]  +
call AuditSetGlobalSaclW  +
test al al +
jnz loc_1007FED  +
push esi  +
mov esi ds:GetLastError +
call esi  +
cmp eax 2 +
jz loc_1007FEC  +
call esi  +
mov edi eax +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 41Ch +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
push edi  +
mov [ebp+pAclInformation] eax +
mov [ebp+var_40C] eax +
mov [ebp+pAce] eax +
lea edi [ebp+var_418] +
stos   +
mov [ebp+var_410] esi +
stos   +
call sub_100721F  +
test ebx ebx +
jnz loc_1008051  +
mov [ebp+var_40C] 57h +
jmp loc_100814B  +
lea eax [ebp+pAce] +
push eax  +
push esi  +
call AuditQueryGlobalSaclW  +
mov edi ds:GetLastError +
test al al +
jnz loc_1008073  +
call edi  +
cmp eax 2 +
jnz loc_1008143  +
cmp [ebp+pAce] 0 +
jz loc_10080BE  +
mov esi ds:GetAclInformation +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push [ebp+pAce]  +
call esi  +
test eax eax +
jz loc_1008106  +
cmp [ebp+pAclInformation] 0 +
jnz loc_10080B5  +
push [ebp+pAce]  +
call ds:LocalFree  +
and [ebp+pAce] 0 +
cmp [ebp+pAce] 0 +
jnz loc_10080E3  +
push 200h  +
lea eax [ebp+Buffer] +
push eax  +
push 201Dh  +
call sub_1002D3F  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1007502  +
pop ecx  +
jmp loc_100814B  +
push ebx  +
push [ebp+pAce]  +
call sub_1007F50  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push [ebp+pAce]  +
call esi  +
test eax eax +
jnz loc_1008112  +
mov [ebp+var_40C] 538h +
jmp loc_100814B  +
cmp [ebp+pAclInformation] 0 +
jnz loc_100812E  +
push [ebp+pAce]  +
call ds:LocalFree  +
and [ebp+pAce] 0 +
push [ebp+pAce]  +
push [ebp+var_410]  +
call AuditSetGlobalSaclW  +
test al al +
jnz loc_100814B  +
call edi  +
mov [ebp+var_40C] eax +
cmp [ebp+pAce] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1008163  +
push [ebp+pAce]  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_40C] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push offset String2  +
push [ebp+arg_0]  +
mov esi offset unk_100C528 +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10081A5  +
mov esi offset unk_100C4B0 +
mov ecx [ebp+arg_8] +
and dword ptr [ecx] 0 +
mov eax [esi] +
test eax eax +
jz loc_10081E1  +
mov edx [ebp+arg_4] +
push edi  +
mov edi [edx] +
push ebx  +
mov ebx edi +
and ebx eax +
cmp ebx eax +
jz loc_10081CB  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_10081B8  +
jmp loc_10081DF  +
mov eax [esi] +
not eax  +
and eax edi +
mov [edx] eax +
mov eax [esi+4] +
mov [ecx] eax +
mov [ebp+var_4] 1 +
pop ebx  +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
test ecx ecx +
ja loc_100820D  +
xor ecx ecx +
lea eax [ecx+ecx] +
push eax  +
call loc_1009030  +
pop ecx  +
leave   +
retn 8  +
***
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 2 +
jnb loc_10081FF  +
push 0  +
lea ecx [ebp-0Ch] +
call sub_100299D  +
push offset dword_100A1C8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1007F04  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1007F2D  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi 7FFFFFFFh +
push esi  +
push edi  +
lea eax [ebp+arg_0] +
call sub_1007E54  +
test eax eax +
jl loc_10082B1  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
push esi  +
sub edx eax +
lea ecx [edi+eax*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_1007E87  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 291Ch +
call __alloca_probe  +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_290C] eax +
lea eax [ebp+peUse] +
push eax  +
lea eax [ebp+cbReferencedDomainName] +
push eax  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
lea ebx [edi+8] +
push ebx  +
mov esi 800h +
push 0  +
mov [ebp+cbName] 400h +
mov [ebp+cbReferencedDomainName] esi +
call ds:LookupAccountSidW  +
test eax eax +
jz loc_100835E  +
cmp [ebp+ReferencedDomainName] 0 +
jz loc_1008348  +
push offset word_100125C  +
push esi  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
call sub_100827B  +
lea eax [ebp+Name] +
push eax  +
push esi  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
call sub_100827B  +
jmp loc_10083A3  +
and [ebp+hMem] 0 +
lea eax [ebp+hMem] +
push eax  +
push ebx  +
call ConvertSidToStringSidW  +
test eax eax +
lea eax [ebp+ReferencedDomainName] +
jz loc_1008397  +
push [ebp+hMem]  +
push esi  +
push eax  +
call sub_1002FB2  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_10083A3  +
push esi  +
push eax  +
push 201Fh  +
call sub_1002D3F  +
mov al [edi+1] +
and al 0C0h +
jnz loc_10083B1  +
mov eax 2020h +
jmp loc_10083CB  +
cmp al 40h +
jnz loc_10083BC  +
mov eax 2021h +
jmp loc_10083CB  +
xor ecx ecx +
cmp al 80h +
setnz cl  +
add ecx 2022h +
mov eax ecx +
push 80h  +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
call sub_1002D3F  +
push esi  +
lea eax [ebp+var_2104] +
push eax  +
push 201Eh  +
call sub_1002D3F  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
push [ebp+var_290C]  +
mov eax [ebp+arg_0] +
inc eax  +
push eax  +
lea eax [ebp+var_2104] +
push eax  +
call sub_1007502  +
mov esi offset asc_10015B0 +
push esi  +
call sub_1007502  +
mov eax [edi+4] +
add esp 18h +
mov [ebp+hMem] eax +
xor edi edi +
lea eax [ebp+var_2910] +
push eax  +
lea eax [ebp+hMem] +
push eax  +
push [ebp+var_290C]  +
call sub_100817C  +
test eax eax +
jz loc_1008461  +
push [ebp+var_2910]  +
push offset aS_2  +
call sub_1007502  +
pop ecx  +
xor edi edi +
pop ecx  +
inc edi  +
jmp loc_100842D  +
cmp [ebp+hMem] 0 +
jz loc_100847F  +
push [ebp+hMem]  +
push offset a08lxh  +
call sub_1007502  +
pop ecx  +
xor edi edi +
pop ecx  +
inc edi  +
test edi edi +
jnz loc_100848E  +
push offset asc_1001BF8  +
call sub_1007502  +
pop ecx  +
push esi  +
call sub_1007502  +
pop ecx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10093D4  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 41Ch +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+pSid1] eax +
xor eax eax +
mov [ebp+pAclInformation] eax +
mov [ebp+var_40C] eax +
mov [ebp+hMem] eax +
lea edi [ebp+var_418] +
stos   +
stos   +
call sub_100721F  +
lea eax [ebp+hMem] +
push eax  +
push ebx  +
call AuditQueryGlobalSaclW  +
test al al +
jnz loc_100851B  +
mov esi ds:GetLastError +
call esi  +
cmp eax 2 +
jz loc_100851B  +
call esi  +
mov [ebp+var_40C] eax +
jmp loc_10085DF  +
xor esi esi +
cmp [ebp+hMem] esi +
jz loc_1008573  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push [ebp+hMem]  +
call ds:GetAclInformation  +
test eax eax +
jnz loc_100854F  +
mov [ebp+var_40C] 538h +
jmp loc_10085DF  +
cmp [ebp+pAclInformation] esi +
jnz loc_1008569  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov [ebp+hMem] esi +
mov esi [ebp+hMem] +
test esi esi +
jnz loc_1008598  +
push 200h  +
lea eax [ebp+Buffer] +
push eax  +
push 201Dh  +
call sub_1002D3F  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1007502  +
pop ecx  +
jmp loc_10085DF  +
xor edi edi +
add esi 8 +
cmp [ebp+pAclInformation] edi +
jbe loc_10085DF  +
movzx eax byte ptr [esi] +
dec eax  +
dec eax  +
jnz loc_10085D0  +
cmp [ebp+pSid1] eax +
jz loc_10085C8  +
lea eax [esi+8] +
push eax  +
push [ebp+pSid1]  +
call ds:EqualSid  +
test eax eax +
jz loc_10085D0  +
push esi  +
push ebx  +
push edi  +
call sub_10082BC  +
movzx eax word ptr [esi+2] +
add esi eax +
inc edi  +
cmp edi [ebp+pAclInformation] +
jb loc_10085A5  +
cmp [ebp+hMem] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_10085F7  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_40C] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 8 +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
jb loc_1008626  +
mov ecx [ecx+4] +
jmp loc_1008629  +
add ecx 4 +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+18h] +
lea eax [ecx+4] +
cmp esi 8 +
jb loc_100864D  +
mov edx [eax] +
jmp loc_100864F  +
mov edx eax +
cmp [ebp+arg_0] edx +
jb loc_100866A  +
cmp esi 8 +
jb loc_100865B  +
mov eax [eax] +
mov ecx [ecx+14h] +
lea eax [eax+ecx*2] +
cmp eax [ebp+arg_0] +
jbe loc_100866A  +
mov al 1 +
jmp loc_100866C  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1008237  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1008259  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_10086EE  +
cmp dword ptr [esi+18h] 8 +
jb loc_10086EE  +
cmp [ebp+arg_4] 0 +
lea eax [esi+4] +
push edi  +
mov edi [eax] +
jbe loc_10086E6  +
push [ebp+arg_4]  +
push edi  +
push 8  +
push eax  +
call sub_1008676  +
push edi  +
call sub_100909F  +
pop ecx  +
pop edi  +
push [ebp+arg_4]  +
mov ecx esi +
mov dword ptr [esi+18h] 7 +
call sub_1008610  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jnb loc_1008720  +
call loc_10090ED  +
mov eax [esi+14h] +
sub eax edi +
cmp eax [ebp+arg_4] +
jnb loc_100872D  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] 0 +
jbe loc_1008780  +
mov ecx [esi+18h] +
push ebx  +
lea edx [esi+4] +
cmp ecx 8 +
jb loc_1008746  +
mov ebx [edx] +
mov [ebp+arg_0] ebx +
jmp loc_1008749  +
mov [ebp+arg_0] edx +
cmp ecx 8 +
jb loc_1008750  +
mov edx [edx] +
mov ebx [ebp+arg_4] +
sub eax ebx +
push eax  +
mov [ebp+var_4] edx +
mov edx [ebp+arg_0] +
lea eax [edi+ebx] +
lea eax [edx+eax*2] +
push eax  +
mov eax [ebp+var_4] +
sub ecx edi +
push ecx  +
lea eax [eax+edi*2] +
push eax  +
call sub_1008698  +
mov eax [esi+14h] +
sub eax ebx +
push eax  +
mov ecx esi +
call sub_1008610  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
call __EH_prolog3_catch  +
mov edi ecx +
mov [ebp-18h] edi +
mov esi [ebp+8] +
or esi 7 +
cmp esi 7FFFFFFEh +
jbe loc_10087B1  +
mov esi [ebp+8] +
jmp loc_10087D8  +
xor edx edx +
push 3  +
mov eax esi +
pop ebx  +
div  ebx +
mov ecx [edi+18h] +
mov [ebp-14h] ecx +
shr dword ptr [ebp-14h] 1 +
mov edx [ebp-14h] +
cmp eax edx +
jnb loc_10087D8  +
mov eax 7FFFFFFEh +
sub eax edx +
cmp ecx eax +
ja loc_10087D8  +
lea esi [edx+ecx] +
and dword ptr [ebp-4] 0 +
push 0  +
lea eax [esi+1] +
push eax  +
call loc_10081EE  +
mov ebx eax +
jmp loc_1008813  +
mov eax [ebp+8] +
mov [ebp-10h] esp +
mov [ebp+8] eax +
push 0  +
inc eax  +
push eax  +
mov byte ptr [ebp-4] 2 +
call loc_10081EE  +
mov [ebp-14h] eax +
mov eax offset loc_100880A +
retn   +
mov edi [ebp-18h] +
mov esi [ebp+8] +
mov ebx [ebp-14h] +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_1008835  +
cmp dword ptr [edi+18h] 8 +
jb loc_1008824  +
mov eax [edi+4] +
jmp loc_1008827  +
lea eax [edi+4] +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [esi+1] +
push eax  +
push ebx  +
call sub_1008676  +
push 0  +
push 1  +
mov ecx edi +
call sub_10086BA  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
mov [edi+4] ebx +
mov [edi+18h] esi +
call sub_1008610  +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_1008610  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 7FFFFFFEh +
jbe loc_10088B6  +
call loc_10090B0  +
cmp [esi+18h] edi +
jnb loc_10088C8  +
push dword ptr [esi+14h]  +
mov ecx esi +
push edi  +
call sub_100878D  +
jmp loc_10088F4  +
cmp [ebp+arg_4] 0 +
jz loc_10088E8  +
cmp edi 8 +
jnb loc_10088E8  +
mov eax [esi+14h] +
cmp edi eax +
jnb loc_10088DC  +
mov eax edi +
push eax  +
push 1  +
mov ecx esi +
call sub_10086BA  +
jmp loc_10088F4  +
test edi edi +
jnz loc_10088F4  +
push edi  +
mov ecx esi +
call sub_1008610  +
xor eax eax +
cmp eax edi +
sbb eax eax +
pop edi  +
neg eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [edi+14h] ebx +
jnb loc_1008921  +
call loc_10090ED  +
mov eax [edi+14h] +
sub eax ebx +
cmp eax [ebp+arg_8] +
jnb loc_100892E  +
mov [ebp+arg_8] eax +
or eax 0FFFFFFFFh +
sub eax [esi+14h] +
cmp eax [ebp+arg_8] +
ja loc_100893E  +
call loc_10090B0  +
cmp [ebp+arg_8] 0 +
jbe loc_1008999  +
mov eax [esi+14h] +
add eax [ebp+arg_8] +
push 0  +
push eax  +
mov ecx esi +
mov [ebp+arg_0] eax +
call sub_100889D  +
test al al +
jz loc_1008999  +
cmp dword ptr [edi+18h] 8 +
jb loc_1008966  +
mov edi [edi+4] +
jmp loc_1008969  +
add edi 4 +
mov eax [esi+18h] +
cmp eax 8 +
jb loc_1008976  +
mov edx [esi+4] +
jmp loc_1008979  +
lea edx [esi+4] +
push [ebp+arg_8]  +
mov ecx [esi+14h] +
lea edi [edi+ebx*2] +
push edi  +
sub eax ecx +
push eax  +
lea eax [edx+ecx*2] +
push eax  +
call sub_1008676  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1008610  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push ebx  +
mov esi ecx +
call sub_1008638  +
test al al +
jz loc_10089DD  +
cmp dword ptr [esi+18h] 8 +
jb loc_10089C8  +
mov eax [esi+4] +
jmp loc_10089CB  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub ebx eax +
sar ebx 1 +
push ebx  +
push esi  +
mov ecx esi +
call sub_1008907  +
jmp loc_1008A36  +
or eax 0FFFFFFFFh +
sub eax [esi+14h] +
cmp eax [ebp+arg_4] +
ja loc_10089ED  +
call loc_10090B0  +
cmp [ebp+arg_4] 0 +
jbe loc_1008A34  +
push edi  +
mov edi [esi+14h] +
add edi [ebp+arg_4] +
push 0  +
push edi  +
mov ecx esi +
call sub_100889D  +
test al al +
jz loc_1008A33  +
mov eax [esi+18h] +
cmp eax 8 +
jb loc_1008A15  +
mov edx [esi+4] +
jmp loc_1008A18  +
lea edx [esi+4] +
push [ebp+arg_4]  +
mov ecx [esi+14h] +
push ebx  +
sub eax ecx +
push eax  +
lea eax [edx+ecx*2] +
push eax  +
call sub_1008676  +
push edi  +
mov ecx esi +
call sub_1008610  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
cmp [edi+14h] eax +
jnb loc_1008A5B  +
call loc_10090ED  +
mov esi [edi+14h] +
mov eax [ebp+arg_4] +
sub esi eax +
cmp [ebp+arg_8] esi +
jnb loc_1008A6B  +
mov esi [ebp+arg_8] +
mov ecx ebx +
cmp ebx edi +
jnz loc_1008A89  +
push 0FFFFFFFFh  +
add esi eax +
push esi  +
call sub_1008709  +
push [ebp+arg_4]  +
mov ecx ebx +
push 0  +
call sub_1008709  +
jmp loc_1008ACA  +
push 0  +
push esi  +
call sub_100889D  +
test al al +
jz loc_1008ACA  +
cmp dword ptr [edi+18h] 8 +
jb loc_1008AA0  +
mov edi [edi+4] +
jmp loc_1008AA3  +
add edi 4 +
mov ecx [ebx+18h] +
cmp ecx 8 +
jb loc_1008AB0  +
mov eax [ebx+4] +
jmp loc_1008AB3  +
lea eax [ebx+4] +
mov edx [ebp+arg_4] +
push esi  +
lea edx [edi+edx*2] +
push edx  +
push ecx  +
push eax  +
call sub_1008676  +
push esi  +
mov ecx ebx +
call sub_1008610  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1008AE4  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_0]  +
call sub_10089A7  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1008638  +
test al al +
jz loc_1008B3B  +
cmp dword ptr [esi+18h] 8 +
jb loc_1008B26  +
mov eax [esi+4] +
jmp loc_1008B29  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub edi eax +
sar edi 1 +
push edi  +
push esi  +
mov ecx esi +
call sub_1008A41  +
jmp loc_1008B72  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_100889D  +
test al al +
jz loc_1008B70  +
mov ecx [esi+18h] +
cmp ecx 8 +
jb loc_1008B58  +
mov eax [esi+4] +
jmp loc_1008B5B  +
lea eax [esi+4] +
push [ebp+arg_4]  +
push edi  +
push ecx  +
push eax  +
call sub_1008676  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1008610  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1008B89  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_0]  +
call sub_1008B05  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_1008610  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1008B7D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_GS  +
mov eax [ebp+8] +
mov esi [ebp+14h] +
mov [ebp-44h] eax +
mov eax [ebp+18h] +
xor ebx ebx +
mov [ebp-40h] eax +
mov [ebp-74h] ebx +
xor eax eax +
lea edi [ebp-70h] +
stos   +
lea ecx [ebp-2Ch] +
mov [ebp-38h] ebx +
mov [ebp-30h] ebx +
stos   +
mov [ebp-34h] ebx +
mov [ebp-48h] ebx +
mov [ebp-3Ch] ebx +
call sub_1008872  +
mov [ebp-4] ebx +
call sub_100721F  +
cmp esi ebx +
jz loc_1008EA1  +
cmp [ebp+0Ch] bl +
jnz loc_1008C35  +
cmp [ebp+10h] bl +
jz loc_1008EA1  +
mov eax [ebp-40h] +
mov edi offset aFa +
cmp eax ebx +
jz loc_1008C46  +
cmp [eax] bx +
jnz loc_1008C49  +
mov [ebp-40h] edi +
lea eax [ebp-30h] +
push eax  +
push dword ptr [ebp-44h]  +
call AuditQueryGlobalSaclW  +
test al al +
jnz loc_1008C72  +
call ds:GetLastError  +
cmp eax 2 +
jz loc_1008C72  +
call ds:GetLastError  +
mov [ebp-38h] eax +
jmp loc_1008EA8  +
cmp [ebp-30h] ebx +
jz loc_1008CA9  +
push 2  +
push 0Ch  +
lea eax [ebp-74h] +
push eax  +
push dword ptr [ebp-30h]  +
call ds:GetAclInformation  +
test eax eax +
jnz loc_1008C98  +
mov dword ptr [ebp-38h] 538h +
jmp loc_1008EA8  +
cmp [ebp-74h] ebx +
jnz loc_1008CA9  +
push dword ptr [ebp-30h]  +
call ds:LocalFree  +
mov [ebp-30h] ebx +
push esi  +
push dword ptr [ebp-30h]  +
call sub_1007F50  +
push 1  +
lea eax [ebp-8Ch] +
push eax  +
call ds:InitializeSecurityDescriptor  +
xor eax eax +
cmp [ebp-30h] ebx +
push ebx  +
push dword ptr [ebp-30h]  +
setnz al  +
push eax  +
lea eax [ebp-8Ch] +
push eax  +
call ds:SetSecurityDescriptorSacl  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
push 8  +
push 1  +
lea eax [ebp-8Ch] +
push eax  +
call ConvertSecurityDescriptorToStringSecurityDescriptorW  +
cmp [ebp-30h] ebx +
jz loc_1008D04  +
push dword ptr [ebp-30h]  +
call ds:LocalFree  +
mov [ebp-30h] ebx +
push dword ptr [ebp-34h]  +
lea ecx [ebp-2Ch] +
call sub_1008B7D  +
cmp [ebp-18h] ebx +
jnz loc_1008D21  +
push offset aS_3  +
lea ecx [ebp-2Ch] +
call sub_1008B7D  +
cmp [ebp-34h] ebx +
jz loc_1008D32  +
push dword ptr [ebp-34h]  +
call ds:LocalFree  +
mov [ebp-34h] ebx +
lea eax [ebp-34h] +
push eax  +
push esi  +
call ConvertSidToStringSidW  +
cmp al bl +
jz loc_1008C64  +
push offset aAu  +
lea ecx [ebp-2Ch] +
call sub_1008AD8  +
cmp [ebp+0Ch] bl +
jz loc_1008D63  +
push offset aSa  +
lea ecx [ebp-2Ch] +
call sub_1008AD8  +
cmp [ebp+10h] bl +
jz loc_1008D71  +
push edi  +
lea ecx [ebp-2Ch] +
call sub_1008AD8  +
push offset asc_1001C44  +
lea ecx [ebp-68h] +
call sub_1008BAA  +
or edi 0FFFFFFFFh +
push edi  +
push ebx  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1008907  +
xor esi esi +
push ebx  +
inc esi  +
push esi  +
lea ecx [ebp-68h] +
mov [ebp-4] bl +
call sub_10086BA  +
push dword ptr [ebp-40h]  +
lea ecx [ebp-68h] +
call sub_1008BAA  +
push edi  +
push ebx  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1008907  +
push ebx  +
push esi  +
lea ecx [ebp-68h] +
mov [ebp-4] bl +
call sub_10086BA  +
push offset asc_1001C3C  +
lea ecx [ebp-68h] +
call sub_1008BAA  +
push edi  +
push ebx  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1008907  +
push ebx  +
push esi  +
lea ecx [ebp-68h] +
mov [ebp-4] bl +
call sub_10086BA  +
push dword ptr [ebp-34h]  +
lea ecx [ebp-68h] +
call sub_1008BAA  +
push edi  +
push ebx  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call sub_1008907  +
push ebx  +
push esi  +
lea ecx [ebp-68h] +
mov [ebp-4] bl +
call sub_10086BA  +
push offset asc_1001C38  +
lea ecx [ebp-68h] +
call sub_1008BAA  +
push edi  +
push ebx  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call sub_1008907  +
push ebx  +
push esi  +
lea ecx [ebp-68h] +
call sub_10086BA  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1008E49  +
lea eax [ebp-28h] +
lea ecx [ebp-48h] +
push ecx  +
lea ecx [ebp-3Ch] +
push ecx  +
push esi  +
push eax  +
call ConvertStringSecurityDescriptorToSecurityDescriptorW  +
test al al +
jz loc_1008C64  +
cmp [ebp-3Ch] ebx +
jz loc_1008E8A  +
lea eax [ebp-78h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push dword ptr [ebp-3Ch]  +
call ds:GetSecurityDescriptorSacl  +
test al al +
jz loc_1008C64  +
cmp [ebp-4Ch] ebx +
jnz loc_1008E8A  +
mov [ebp-30h] ebx +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-44h]  +
call AuditSetGlobalSaclW  +
mov [ebp-30h] ebx +
cmp al bl +
jnz loc_1008EB6  +
jmp loc_1008C64  +
mov dword ptr [ebp-38h] 57h +
cmp [ebp-30h] ebx +
jz loc_1008EB6  +
push dword ptr [ebp-30h]  +
call ds:LocalFree  +
cmp [ebp-34h] ebx +
jz loc_1008EC4  +
push dword ptr [ebp-34h]  +
call ds:LocalFree  +
cmp [ebp-3Ch] ebx +
jz loc_1008ED5  +
push dword ptr [ebp-3Ch]  +
call ds:LocalFree  +
mov [ebp-3Ch] ebx +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_10086BA  +
mov eax [ebp-38h] +
call sub_100964A  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0exception@@QAE@XZ  +
cmp dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1001464 +
jnz loc_1009027  +
cmp dword ptr [esi+8] 0 +
jnz loc_1009027  +
mov eax off_100C5E0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:malloc +
jmp loc_100904E  +
push dword ptr [ebp+8]  +
call _callnewh  +
pop ecx  +
test eax eax +
jz loc_100905B  +
push dword ptr [ebp+8]  +
call esi  +
pop ecx  +
test eax eax +
jz loc_1009041  +
pop esi  +
leave   +
retn   +
***
test byte ptr dword_100C62C 1 +
mov esi offset dword_100C620 +
jnz loc_1009082  +
or dword_100C62C 1 +
mov ecx esi +
call sub_1009003  +
push offset loc_100A1B0  +
call sub_10097CA  +
pop ecx  +
push esi  +
lea ecx [ebp-0Ch] +
call sub_10029FC  +
push offset dword_100A1C8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:free  +
***
push 44h  +
mov eax offset dword_100A170 +
call __EH_prolog3  +
push offset aStringTooLong  +
lea ecx [ebp-28h] +
call sub_1003AE6  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1004523  +
push offset dword_100A3D4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
push 44h  +
mov eax offset dword_100A170 +
call __EH_prolog3  +
push offset aInvalidStringP  +
lea ecx [ebp-28h] +
call sub_1003AE6  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1003A0F  +
push offset dword_100A30C  +
lea eax [ebp-50h] +
push eax  +
mov dword ptr [ebp-50h] offset off_10015D4 +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100914D  +
test eax eax +
jnz loc_1009152  +
mov ecx [esi] +
test ecx ecx +
jz loc_100914A  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_100913E  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100C658 +
push offset dword_100C648  +
push dword_100C654  +
mov dword_100C648 eax +
push offset dword_100C638  +
push offset dword_100C63C  +
push offset dword_100C634  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_100C644 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_10091DA  +
cmp eax esi +
jnz loc_10091CD  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_10091DD  +
push 3E8h  +
call ds:Sleep  +
jmp loc_10091B4  +
xor esi esi +
inc esi  +
mov eax dword_100C984 +
cmp eax esi +
jnz loc_10091F0  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100922B  +
mov eax dword_100C984 +
test eax eax +
jnz loc_1009225  +
mov dword_100C984 esi +
push offset dword_100123C  +
push offset dword_1001230  +
call sub_1009131  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100922B  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_10092F5  +
mov dword_100C650 esi +
mov eax dword_100C984 +
cmp eax esi +
jnz loc_100924F  +
push offset dword_100122C  +
push offset dword_1001224  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100C984 2 +
cmp [ebp+var_1C] ebx +
jnz loc_100925C  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100C994 ebx +
jz loc_100927D  +
push offset dword_100C994  +
call sub_10098E9  +
pop ecx  +
test eax eax +
jz loc_100927D  +
push ebx  +
push 2  +
push ebx  +
call dword_100C994  +
push dword_100C638  +
push dword_100C63C  +
push dword_100C634  +
call sub_1001E98  +
add esp 0Ch +
mov dword_100C64C eax +
cmp dword_100C640 ebx +
jnz loc_10092DB  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_100C64C eax +
xor ebx ebx +
cmp dword_100C640 ebx +
jnz loc_10092DB  +
push eax  +
call ds:_exit  +
cmp dword_100C650 ebx +
jnz loc_10092E9  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100C64C +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1009312  +
xor eax eax +
jmp loc_100935F  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100930E  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100934C  +
cmp ecx 20Bh +
jnz loc_100930E  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100930E  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100935A  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100930E  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_100C640 eax +
call sub_1009A82  +
push eax  +
call ds:__set_app_type  +
or dword_100C98C 0FFFFFFFFh +
or dword_100C990 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100C660 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100C65C +
mov [eax] ecx +
call sub_1009A14  +
cmp dword_100C608 0 +
jnz loc_10093B8  +
push offset sub_1009A14  +
call ds:__setusermatherr  +
pop ecx  +
call sub_10099FC  +
xor eax eax +
retn   +
***
call sub_1009AC1  +
jmp sub_1009192  +
***
cmp ecx dword_100C5F0 +
jnz loc_10093DF  +
retn 0  +
jmp loc_1009B57  +
***
jmp ds:?what@exception@@UBEPBDXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ??2@YAPAXIABUnothrow_t@std@@@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_100944D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_100952E  +
push esi  +
call sub_100909F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_100C5F0 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_100C5F0 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_100C5F0 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_100C5F0 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_10093D4  +
jmp __EH_epilog3  +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_10093D4  +
jmp __EH_epilog3  +
***
jmp ds:_purecall  +
***
call __EH_prolog3_catch  +
and dword ptr [ebp-14h] 0 +
mov eax offset $LN7 +
retn   +
***
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1009740  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100982E  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100982E  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1009828  +
cmp eax 19930521h +
jz loc_1009828  +
cmp eax 19930522h +
jz loc_1009828  +
cmp eax 1994000h +
jnz loc_100982E  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_10097F0+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1009876  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1009872  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_10098DD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_10098D5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_10098DF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10098C5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1009860  +
pop ecx  +
test eax eax +
jz loc_1009946  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_10098A0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009946  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100994F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10093D4  +
push offset dword_100C5F0  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1009A75  +
cmp ecx 0FFFFFFFFh +
jz loc_1009A75  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1009A6E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1009A6E  +
cmp edx 10000000h +
jnb loc_1009A6E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1009A6E  +
jmp loc_1009A69  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1009AB7  +
push eax  +
call sub_1009A1C  +
test eax eax +
jz loc_1009AB7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1009AAC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1009AB7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100C5F0 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1009AF3  +
test eax ebx +
jz loc_1009AF3  +
not eax  +
mov dword_100C5F4 eax +
jmp loc_1009B4E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1009B3A  +
test dword_100C5F0 ebx +
jnz loc_1009B3F  +
mov esi 0BB40E64Fh +
mov dword_100C5F0 esi +
not esi  +
mov dword_100C5F4 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100C768 eax +
mov dword_100C764 ecx +
mov dword_100C760 edx +
mov dword_100C75C ebx +
mov dword_100C758 esi +
mov dword_100C754 edi +
mov word_100C780 ss +
mov word_100C774 cs +
mov word_100C750 ds +
mov word_100C74C es +
mov word_100C748 fs +
mov word_100C744 gs +
pushf   +
pop dword_100C778  +
mov eax [ebp+0] +
mov dword_100C76C eax +
mov eax [ebp+4] +
mov dword_100C770 eax +
lea eax [ebp+8] +
mov dword_100C77C eax +
mov eax [ebp-320h] +
mov dword_100C6B8 10001h +
mov eax dword_100C770 +
mov dword_100C674 eax +
mov dword_100C668 0C0000409h +
mov dword_100C66C 1 +
mov eax dword_100C5F0 +
mov [ebp-328h] eax +
mov eax dword_100C5F4 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1009C87  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1009C92  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 5Ch +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
call ds:GetVersion  +
mov ebx eax +
and ebx 8000h +
neg ebx  +
sbb ebx ebx +
push 4  +
inc ebx  +
pop eax  +
inc ebx  +
call __alloca_probe  +
mov [ebp-10h] esp +
push 1Ch  +
lea eax [ebp-38h] +
push eax  +
push dword ptr [ebp-10h]  +
call ds:VirtualQuery  +
test eax eax +
jz loc_1009DE7  +
mov eax [ebp-34h] +
mov [ebp-18h] eax +
lea eax [ebp-5Ch] +
push eax  +
call ds:GetSystemInfo  +
and dword ptr [ebp-8] 0 +
mov edi [ebp-58h] +
mov esi ebx +
dec esi  +
neg esi  +
sbb esi esi +
and esi 103h +
inc esi  +
mov [ebp-14h] edi +
cmp ebx 2 +
jnz loc_1009D5E  +
and dword ptr [ebp-0Ch] 0 +
push offset aKernelbase_dll  +
call ds:GetModuleHandleW  +
test eax eax +
jnz loc_1009D35  +
push offset aKernel32_dll  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_1009D5E  +
push offset aSetthreadstack  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1009D5E  +
and dword ptr [ebp-0Ch] 0 +
lea ecx [ebp-0Ch] +
push ecx  +
call eax  +
cmp eax 1 +
jnz loc_1009D5E  +
mov eax [ebp-0Ch] +
test eax eax +
jbe loc_1009D5E  +
mov [ebp-8] eax +
lea ecx [ebp-8] +
lea eax [edi-1] +
push ecx  +
push eax  +
push dword ptr [ebp-8]  +
mov [ebp-0Ch] eax +
call sub_1009C6D  +
test eax eax +
jl loc_1009DE7  +
mov eax [ebp-0Ch] +
not eax  +
and [ebp-8] eax +
jz loc_1009D90  +
lea eax [ebp-8] +
push eax  +
push edi  +
push dword ptr [ebp-8]  +
call sub_1009C6D  +
test eax eax +
jl loc_1009DE7  +
lea eax [edi+edi] +
cmp [ebp-8] eax +
jnb loc_1009D9B  +
mov [ebp-8] eax +
dec edi  +
not edi  +
and edi [ebp-10h] +
sub edi [ebp-8] +
cmp ebx 1 +
jnz loc_1009DAE  +
push 11h  +
pop eax  +
jmp loc_1009DB1  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
add eax ecx +
cmp edi eax +
jb loc_1009DE7  +
push 4  +
push 1000h  +
push dword ptr [ebp-8]  +
push edi  +
call ds:VirtualAlloc  +
test eax eax +
jz loc_1009DE7  +
lea eax [ebp-1Ch] +
push eax  +
push esi  +
push dword ptr [ebp-8]  +
push edi  +
call ds:VirtualProtect  +
test eax eax +
jz loc_1009DE7  +
xor eax eax +
inc eax  +
jmp loc_1009DE9  +
xor eax eax +
lea esp [ebp-68h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_100C5F0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
call __alloca_probe_16  +
lea esp [ebp-4] +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10093D4  +
leave   +
retn 4  +
***
call __SEH_prolog4  +
xor esi esi +
inc esi  +
and [ebp+ms_exc.disabled] 0 +
push [ebp+arg_0]  +
call sub_1009E4A  +
jmp loc_1009EB3  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C00000FDh +
setz cl  +
mov eax ecx +
retn   +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax esi +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax large fs:18h +
mov eax [eax+30h] +
push dword ptr [eax+8]  +
call ds:RtlImageNtHeader  +
mov ecx large fs:18h +
mov edx [ecx+30h] +
cmp byte ptr [edx+2] 0 +
mov ecx 0DEADBEEFh +
jnz loc_1009F07  +
test eax eax +
jz loc_1009F10  +
mov edx [eax+60h] +
sub edx [eax+64h] +
cmp edx 2000h +
jnb loc_1009F10  +
and dword_100C998 0 +
jmp loc_1009F24  +
mov edx [ebp+arg_0] +
cmp edx ecx +
jnz loc_1009F1E  +
test eax eax +
jz loc_1009F07  +
mov edx [eax+64h] +
mov dword_100C998 edx +
cmp [ebp+arg_4] ecx +
jnz loc_1009F37  +
test eax eax +
jnz loc_1009F32  +
or eax 0FFFFFFFFh +
jmp loc_1009F3A  +
mov eax [eax+64h] +
jmp loc_1009F3A  +
mov eax [ebp+arg_4] +
mov dword_100C99C eax +
add eax 8 +
cmp eax 8 +
jnb loc_1009F51  +
mov dword_100C99C 0FFFFFFF7h +
mov eax [ebp+arg_8] +
mov dword_100C9A0 offset loc_1009E25 +
test eax eax +
jz loc_1009F67  +
mov dword_100C9A0 eax +
mov eax [ebp+arg_C] +
mov dword_100C9A4 offset loc_1009E00 +
test eax eax +
jz loc_1009F7D  +
mov dword_100C9A4 eax +
pop ebp  +
retn 10h  +
***
mov dword_100C620 offset off_1001464 +
mov ecx offset dword_100C620 +
jmp ??1exception@@UAE@XZ  +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756EFB4Dh  +
***
arpl [eax+eax+0] si +
jmp near ptr 736A0967h  +
***
