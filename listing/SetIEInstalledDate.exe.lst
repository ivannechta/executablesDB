mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+Arguments] +
push eax  +
push dword ptr [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1005318  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push offset aWindirPanther  +
mov [ebp+var_4] esi +
call sub_100C8A5  +
mov edi ds:GetLastError +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 12h  +
push esi  +
mov ebx offset aD +
push ebx  +
push esi  +
push offset aSetieinstalled  +
push 4000000h  +
call sub_1003E85  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005595  +
call sub_100CF96  +
push offset loc_100CED6  +
call sub_100D2C5  +
call sub_100CAAB  +
test eax eax +
jnz loc_1003F47  +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 30h  +
push esi  +
push ebx  +
push esi  +
push offset aSetieinstall_0  +
push 4000000h  +
call sub_1003E85  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005595  +
call sub_100D144  +
jmp loc_10040FE  +
call sub_100CA5D  +
test eax eax +
jz loc_1003F90  +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 35h  +
push esi  +
push ebx  +
push esi  +
push offset aSetieinstall_1  +
push 4000000h  +
call sub_1003E85  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005595  +
call sub_100D144  +
call sub_100D2B0  +
jmp loc_10040FE  +
call sub_100CA83  +
test eax eax +
jz loc_1003FD4  +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 3Bh  +
push esi  +
push ebx  +
push esi  +
push offset aSetieinstall_2  +
push 4000000h  +
call sub_1003E85  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005595  +
call sub_100D1AE  +
jmp loc_10040FE  +
call sub_100CA35  +
push esi  +
push esi  +
test eax eax +
jz loc_10040CB  +
call edi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 40h  +
push esi  +
push ebx  +
push esi  +
push offset aSetieinstall_3  +
push 4000000h  +
call sub_1003E85  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005595  +
call sub_100CEB6  +
test eax eax +
jz loc_100403F  +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 43h  +
push esi  +
push ebx  +
push esi  +
push offset aSetieinstall_4  +
jmp loc_1003F2B  +
call sub_100CEC6  +
push esi  +
push esi  +
test eax eax +
jz loc_100409A  +
call edi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 48h  +
push esi  +
push ebx  +
push esi  +
push offset aSetieinstall_5  +
push 4000000h  +
call sub_1003E85  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005595  +
push esi  +
push esi  +
call edi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 49h  +
push esi  +
push ebx  +
push esi  +
push offset aSetieinstall_6  +
jmp loc_10040B7  +
call edi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 4Fh  +
push esi  +
push ebx  +
push esi  +
push offset aSetieinstall_7  +
push 4000000h  +
call sub_1003E85  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005595  +
jmp loc_10040FE  +
call edi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aWinmain  +
push offset aDW7rtmInetcore  +
push 54h  +
push esi  +
push ebx  +
push esi  +
push offset aSetieinstall_8  +
push 2000000h  +
call sub_1003E85  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005595  +
or [ebp+var_4] 0FFFFFFFFh +
push esi  +
call sub_100D2C5  +
call sub_100C917  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1004134  +
test eax eax +
jnz loc_1004139  +
mov ecx [esi] +
test ecx ecx +
jz loc_1004131  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1004125  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_10129E4 +
push offset dword_10129D4  +
push dword_10129E0  +
mov dword_10129D4 eax +
push offset unk_10129C4  +
push offset unk_10129C8  +
push offset unk_10129C0  +
call ds:__getmainargs  +
add esp 14h +
mov dword_10129D0 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_10041D9  +
cmp eax esi +
jnz loc_10041CC  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_10041DC  +
push 3E8h  +
call ds:Sleep  +
jmp loc_10041B3  +
xor esi esi +
inc esi  +
mov eax dword_1012E88 +
cmp eax esi +
jnz loc_10041EF  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100421E  +
mov eax dword_1012E88 +
test eax eax +
jnz loc_1004218  +
mov dword_1012E88 esi +
push offset dword_10012B0  +
push offset dword_10012A4  +
call sub_1004118  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100421E  +
jmp loc_1004346  +
mov dword_10129DC esi +
mov eax dword_1012E88 +
cmp eax esi +
jnz loc_1004242  +
push offset dword_10012A0  +
push offset dword_100127C  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1012E88 2 +
test ebx ebx +
jnz loc_100424E  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1012E90 0 +
jz loc_1004272  +
push offset dword_1012E90  +
call sub_1004529  +
pop ecx  +
test eax eax +
jz loc_1004272  +
push 0  +
push 2  +
push 0  +
call dword_1012E90  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_100428C  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_100429C  +
cmp al 20h +
ja loc_100429C  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_100428C  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_10042A8  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_10042AB  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_10129D8 eax +
cmp dword_10129CC 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_10042DD  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_10042F0  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_1004279  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_10129D8 eax +
cmp dword_10129CC 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_10129DC 0 +
jnz loc_1004331  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10129D8 +
jmp loc_1004352  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100436F  +
xor eax eax +
jmp loc_10043BC  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100436B  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_10043A9  +
cmp ecx 20Bh +
jnz loc_100436B  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100436B  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_10043B7  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100436B  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_10129CC eax +
call sub_1004760  +
push eax  +
call ds:__set_app_type  +
or dword_1012E80 0FFFFFFFFh +
or dword_1012E84 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10129EC +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_10129E8 +
mov [eax] ecx +
call sub_100BB40  +
cmp dword_1010008 0 +
jnz loc_1004415  +
push offset sub_100BB40  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100463C  +
xor eax eax +
retn   +
***
call sub_100479F  +
jmp ___tmainCRTStartup  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100446E  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100446E  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1004468  +
cmp eax 19930521h +
jz loc_1004468  +
cmp eax 19930522h +
jz loc_1004468  +
cmp eax 1994000h +
jnz loc_100446E  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1004430+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10044B6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10044B2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100451D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1004515  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100451F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1004505  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_10044A0  +
pop ecx  +
test eax eax +
jz loc_1004586  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_10044E0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004586  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100458F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1004835  +
push offset dword_101000C  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1004654  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1004753  +
cmp ecx 0FFFFFFFFh +
jz loc_1004753  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100474C  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100474C  +
cmp edx 10000000h +
jnb loc_100474C  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100474C  +
jmp loc_1004747  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1004795  +
push eax  +
call sub_10046FA  +
test eax eax +
jz loc_1004795  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100478A  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1004795  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101000C +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_10047D1  +
test eax ebx +
jz loc_10047D1  +
not eax  +
mov dword_1010010 eax +
jmp loc_100482C  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1004818  +
test dword_101000C ebx +
jnz loc_100481D  +
mov esi 0BB40E64Fh +
mov dword_101000C esi +
not esi  +
mov dword_1010010 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
cmp ecx dword_101000C +
jnz loc_1004840  +
retn 0  +
jmp loc_1004879  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1012AF0 eax +
mov dword_1012AEC ecx +
mov dword_1012AE8 edx +
mov dword_1012AE4 ebx +
mov dword_1012AE0 esi +
mov dword_1012ADC edi +
mov word_1012B08 ss +
mov word_1012AFC cs +
mov word_1012AD8 ds +
mov word_1012AD4 es +
mov word_1012AD0 fs +
mov word_1012ACC gs +
pushf   +
pop dword_1012B00  +
mov eax [ebp+0] +
mov dword_1012AF4 eax +
mov eax [ebp+4] +
mov dword_1012AF8 eax +
lea eax [ebp+8] +
mov dword_1012B04 eax +
mov eax [ebp-320h] +
mov dword_1012A40 10001h +
mov eax dword_1012AF8 +
mov dword_10129FC eax +
mov dword_10129F0 0C0000409h +
mov dword_10129F4 1 +
mov eax dword_101000C +
mov [ebp-328h] eax +
mov eax dword_1010010 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100498C  +
cmp eax esi +
ja loc_100498C  +
jnz loc_1004996  +
mov [esi+edi] bl +
jmp loc_1004994  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100499F  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_10049D5  +
cmp eax esi +
ja loc_10049D5  +
jz loc_10049DA  +
jmp loc_10049E2  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10049EB  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebx  +
mov ebx ecx +
mov eax [ebx] +
push esi  +
mov esi ds:HeapFree +
push edi  +
mov edi ds:GetProcessHeap +
test eax eax +
jz loc_1004A19  +
push eax  +
push 0  +
call edi  +
push eax  +
call esi  +
mov ebx [ebx+4] +
test ebx ebx +
jz loc_1004A28  +
push ebx  +
push 0  +
call edi  +
push eax  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10049F8  +
test [ebp+arg_0] 1 +
jz loc_1004A4B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
xor esi esi +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
call sub_1006648  +
test eax eax +
jz loc_1004A93  +
xor eax eax +
inc eax  +
jmp loc_1004AD3  +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 13h  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1004AD1  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
mov [ebp+var_14] ebx +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jz loc_1004AC8  +
mov esi [ebp+var_14] +
push [ebp+pSid]  +
call ds:FreeSid  +
mov eax esi +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004835  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
cmp [ebp+lpAddress] 0 +
jnz loc_1004AF8  +
xor eax eax +
jmp locret_1004B0E  +
push 1Ch  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+lpAddress]  +
call ds:VirtualQuery  +
neg eax  +
sbb eax eax +
and eax [ebp+Buffer.AllocationBase] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+4] +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+0B8h] +
pop ebp  +
retn 4  +
***
mov ecx 0C000008Dh +
cmp eax ecx +
ja loc_1004BED  +
jz loc_1004BE7  +
mov ecx 0C0000006h +
cmp eax ecx +
ja loc_1004BA6  +
jz loc_1004BA0  +
cmp eax 80000001h +
jz loc_1004B9A  +
cmp eax 80000002h +
jz loc_1004B94  +
cmp eax 80000003h +
jz loc_1004B8E  +
cmp eax 80000004h +
jz loc_1004B88  +
cmp eax 0C0000005h +
jnz loc_1004C45  +
mov eax offset aAccess_violati +
retn   +
mov eax offset aSingle_step +
retn   +
mov eax offset aBreakpoint +
retn   +
mov eax offset aDatatype_misal +
retn   +
mov eax offset aGuard_page +
retn   +
mov eax offset aIn_page_error +
retn   +
cmp eax 0C0000008h +
jz loc_1004BE1  +
cmp eax 0C000001Dh +
jz loc_1004BDB  +
cmp eax 0C0000025h +
jz loc_1004BD5  +
cmp eax 0C0000026h +
jz loc_1004BCF  +
cmp eax 0C000008Ch +
jnz loc_1004C45  +
mov eax offset aArray_bounds_e +
retn   +
mov eax offset aInvalid_dispos +
retn   +
mov eax offset aNoncontinuable +
retn   +
mov eax offset aIllegal_instru +
retn   +
mov eax offset aInvalid_handle +
retn   +
mov eax offset aFlt_denormal_o +
retn   +
mov ecx 0C00000FDh +
cmp eax ecx +
ja loc_1004C45  +
jz loc_1004C3F  +
add eax 3FFFFF72h +
cmp eax 8 +
ja loc_1004C45  +
jmp ds:off_1004C4D[eax*4]  +
mov eax offset aFlt_divide_by_ +
retn   +
mov eax offset aFlt_inexact_re +
retn   +
mov eax offset aFlt_invalid_op +
retn   +
mov eax offset aFlt_overflow +
retn   +
mov eax offset aFlt_stack_chec +
retn   +
mov eax offset aFlt_underflow +
retn   +
mov eax offset aInt_divide_by_ +
retn   +
mov eax offset aInt_overflow +
retn   +
mov eax offset aPriv_instructi +
retn   +
mov eax offset aStack_overflow +
retn   +
mov eax offset aUnknown +
retn   +
***
call __SEH_prolog4  +
cmp [ebp-20h] edi +
jnz locret_1004D9E  +
cmp dword ptr [ebp-1Ch] 0FFFFFFFFh +
jz loc_1004D84  +
push dword ptr [ebp-1Ch]  +
call dword_1012D5C  +
cmp ebx 0FFFFFFFFh +
jz locret_1004D9E  +
push ebx  +
call dword_1012D5C  +
cmp ebx 0FFFFFFFFh +
jz locret_1004D9E  +
push dword ptr [ebp+0Ch]  +
call dword_1012D94  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpBaseAddress] 0 +
jz loc_1004DB8  +
push [ebp+lpBaseAddress]  +
call ds:UnmapViewOfFile  +
cmp [ebp+arg_8] 0 +
jz loc_1004DC7  +
push [ebp+arg_8]  +
call dword_1012D5C  +
cmp [ebp+arg_0] 0FFFFFFFFh +
jz loc_1004DD6  +
push [ebp+arg_0]  +
call dword_1012D5C  +
cmp [ebp+arg_C] 0 +
jz loc_1004DE5  +
push [ebp+arg_C]  +
call dword_1012D94  +
pop ebp  +
retn 10h  +
***
call __SEH_prolog4  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and eax 0C0000h +
or dword_1012D14 eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
fldz   +
lea eax [ebp+SystemTime] +
push eax  +
fstp  [ebp+pvtime] +
call ds:GetLocalTime  +
lea eax [ebp+pvtime] +
push eax  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:SystemTimeToVariantTime  +
test eax eax +
jnz loc_1004E9E  +
fldz   +
leave   +
retn   +
fld  [ebp+pvtime] +
leave   +
retn   +
***
call __SEH_prolog4  +
push edi  +
push dwTlsIndex  +
call ds:TlsSetValue  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor esi esi +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
mov eax esi +
call __SEH_epilog4  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz locret_1005000  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi ecx +
cmp [edi+8] ebx +
jb loc_100501F  +
xor eax eax +
mov [edi+4] ebx +
inc eax  +
jmp loc_1005068  +
mov eax [edi] +
push esi  +
mov esi [edi+0Ch] +
add esi ebx +
test eax eax +
jz loc_1005043  +
mov ecx esi +
shl ecx 2 +
push ecx  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapReAlloc  +
jmp loc_1005058  +
mov eax esi +
shl eax 2 +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_1005067  +
mov [edi] eax +
xor eax eax +
mov [edi+8] esi +
mov [edi+4] ebx +
inc eax  +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1005089  +
cmp ecx 7FFFFFFFh +
jbe loc_100508E  +
mov eax 80070057h +
test eax eax +
jl loc_10050D2  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_10050C5  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_10050C0  +
mov cl [edx+eax] +
test cl cl +
jz loc_10050C0  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_10050AC  +
pop edi  +
test esi esi +
jnz loc_10050CB  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10050F1  +
cmp ecx 7FFFFFFFh +
jbe loc_10050F6  +
mov eax 80070057h +
test eax eax +
jl loc_1005141  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1005131  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100512C  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_100512C  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1005114  +
pop edi  +
test esi esi +
jnz loc_1005138  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100515F  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1005164  +
mov eax 80070057h +
test eax eax +
jl loc_100517D  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_1004960  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100519B  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_10051A0  +
mov eax 80070057h +
test eax eax +
jl loc_10051B9  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_10049AC  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_10051D7  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_10051DC  +
mov eax 80070057h +
test eax eax +
jl loc_10051F6  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_1004960  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1005212  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1005217  +
mov eax 80070057h +
test eax eax +
jl loc_1005231  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_10049AC  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 414h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor eax eax +
mov esi 206h +
push esi  +
push eax  +
mov [ebp+PathName] ax +
lea eax [ebp-20Ah] +
push eax  +
call memset  +
xor eax eax +
push esi  +
push eax  +
mov [ebp+TempFileName] ax +
lea eax [ebp-412h] +
push eax  +
call memset  +
add esp 18h +
lea eax [ebp+PathName] +
push eax  +
mov esi 104h +
push esi  +
call ds:GetTempPathW  +
test eax eax +
jz loc_10052B5  +
cmp eax esi +
ja loc_10052B5  +
lea eax [ebp+PathName] +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_10052CB  +
push esi  +
lea eax [ebp+PathName] +
push eax  +
call ds:GetWindowsDirectoryW  +
test eax eax +
jnz loc_10052CB  +
xor eax eax +
jmp loc_1005303  +
lea eax [ebp+TempFileName] +
push eax  +
push 0  +
push offset PrefixString  +
lea eax [ebp+PathName] +
push eax  +
call ds:GetTempFileNameW  +
test eax eax +
jz loc_10052C7  +
lea eax [ebp+TempFileName] +
push eax  +
push [ebp+arg_0]  +
push edi  +
call sub_10050DB  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1004835  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
mov [ebp+lpMem] esi +
cmp dword_1012D0C esi +
jnz loc_1005335  +
xor eax eax +
jmp loc_1005452  +
push ebx  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
call sub_1004EA8  +
mov ebx eax +
cmp ebx esi +
jz loc_1005446  +
mov eax [ebp+arg_0] +
mov ecx eax +
and ecx 0FF000000h +
mov [ebx] ecx +
mov [ebx+4] eax +
cmp dword ptr [ebp+arg_4] esi +
jz loc_100543D  +
test dword ptr [ebp+arg_4] 0FFFF0000h +
mov [ebp+hMem] esi +
jnz loc_10053AB  +
lea eax [ebp+Arguments] +
push eax  +
push esi  +
lea eax [ebp+hMem] +
push eax  +
movzx eax word ptr [ebp+arg_4] +
push 400h  +
push eax  +
push lpSource  +
push 900h  +
call ds:FormatMessageW  +
test eax eax +
jnz loc_10053A4  +
mov dword ptr [ebp+arg_4] offset aLogFailedToGet +
jmp loc_10053AB  +
mov eax [ebp+hMem] +
cmp eax esi +
jnz loc_1005405  +
mov eax dword ptr [ebp+arg_4] +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10053B1  +
sub eax esi +
push edi  +
lea esi [eax+1] +
lea edi [esi+esi] +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_10053FD  +
push dword ptr [ebp+arg_4]  +
push offset aS  +
push esi  +
push eax  +
call sub_10051FD  +
add esp 10h +
test eax eax +
jge loc_10053F8  +
mov ecx [ebp+lpMem] +
xor eax eax +
mov [edi+ecx-2] ax +
mov eax [ebp+lpMem] +
jmp loc_1005402  +
mov eax offset aConstructparti +
xor esi esi +
pop edi  +
push [ebp+Arguments]  +
push eax  +
mov eax [ebx+0Ch] +
shr eax 1 +
push eax  +
push dword ptr [ebx+8]  +
call sub_1005186  +
cmp [ebp+lpMem] esi +
jz loc_100542D  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+hMem] esi +
jz loc_1005446  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_1005446  +
mov eax [ebx+8] +
push 30h  +
pop ecx  +
mov [eax] cx +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax ebx +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004FEA  +
test [ebp+arg_0] 1 +
jz loc_1005480  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
test eax eax +
jz loc_10054B3  +
mov ecx [eax+4] +
test ecx ecx +
jz loc_10054B3  +
mov eax [eax] +
mov eax [eax+ecx*4-4] +
test eax eax +
jz loc_10054B3  +
mov eax [eax] +
test eax eax +
jnz locret_10054B8  +
mov eax offset aDef +
retn   +
***
test eax eax +
jz loc_10054F7  +
mov ecx [eax+4] +
test ecx ecx +
jz loc_10054F7  +
mov eax [eax] +
mov eax [eax+ecx*4-4] +
test eax eax +
jz loc_10054F7  +
mov ecx [eax+0Ch] +
test ecx ecx +
jz loc_10054F7  +
mov eax [eax+8] +
mov eax [eax+ecx*4-4] +
test eax eax +
jz loc_10054F7  +
mov eax [eax] +
test eax eax +
jnz locret_10054FC  +
mov eax offset aDef +
retn   +
***
mov eax [ecx+4] +
test eax eax +
jnz loc_100550A  +
retn   +
mov edx [ecx] +
push esi  +
mov esi [edx+eax*4-4] +
test eax eax +
jz loc_100551C  +
dec eax  +
push eax  +
call sub_1005006  +
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov edi ecx +
mov [ebp-10h] edi +
mov dword ptr [ebp-4] 1 +
lea esi [edi+8] +
jmp loc_100554B  +
push 1  +
mov ecx eax +
call sub_1004A31  +
mov ecx esi +
call sub_1005502  +
test eax eax +
jnz loc_1005542  +
mov ecx esi +
call sub_1004FEA  +
mov ecx edi +
call sub_10049F8  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005525  +
test [ebp+arg_0] 1 +
jz loc_1005589  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
and [ebp+lpMem] 0 +
and [ebp+var_218] 0 +
mov [ebp+var_230] eax +
mov eax [ebp+arg_C] +
mov dword ptr [ebp+var_224] eax +
mov eax [ebp+arg_18] +
push ebx  +
mov ebx [ebp+arg_0] +
mov [ebp+var_228] eax +
mov eax [ebp+arg_1C] +
push esi  +
mov [ebp+lpAddress] eax +
mov eax [ebp+arg_24] +
push edi  +
mov [ebp+var_234] eax +
call ds:GetLastError  +
push 5  +
pop ecx  +
mov esi offset aUnknown +
lea edi [ebp+var_20C] +
movs   +
push 1F4h  +
mov [ebp+dwErrCode] eax +
xor edi edi +
lea eax [ebp+var_1F8] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
mov [ebp+var_214] edi +
mov [ebp+var_21C] edi +
cmp dword_1012D0C edi +
jz loc_1005813  +
cmp ebx edi +
jz loc_1005813  +
mov eax [ebp+arg_4] +
or [ebx+4] eax +
mov eax dword ptr [ebp+var_224] +
cmp eax edi +
jz loc_10056F5  +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1005655  +
sub eax esi +
lea esi [eax+1] +
lea edi [esi+esi] +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_10056B0  +
push dword ptr [ebp+var_224]  +
push offset aS  +
push esi  +
push eax  +
call sub_10051FD  +
add esp 10h +
test eax eax +
jge loc_10056A4  +
mov ecx [ebp+lpMem] +
xor eax eax +
mov [edi+ecx-2] ax +
mov eax [ebp+lpMem] +
mov [ebp+var_218] eax +
xor edi edi +
cmp [ebp+lpAddress] edi +
jz loc_1005709  +
push [ebp+lpAddress]  +
call sub_1004AE6  +
cmp eax edi +
jz loc_10056FD  +
push 104h  +
lea ecx [ebp+var_20C] +
push ecx  +
push eax  +
call dword_1012D80  +
lea eax [ebp+var_20C] +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
cmp eax edi +
jz loc_10056FD  +
inc eax  +
inc eax  +
jmp loc_1005703  +
mov [ebp+var_218] edi +
jmp loc_10056B2  +
lea eax [ebp+var_20C] +
mov [ebp+var_214] eax +
mov esi [ebx] +
mov eax 65000000h +
cmp esi eax +
jz loc_1005718  +
cmp esi edi +
jnz loc_1005750  +
test dword_1012D14 80000h +
jz loc_100573A  +
xor ecx ecx +
cmp esi eax +
setnz cl  +
dec ecx  +
and ecx 69000000h +
add ecx 2000000h +
mov [ebx] ecx +
test dword_1012D14 40000h +
jz loc_1005750  +
mov [ebp+var_21C] 1 +
mov eax dword_1012D0C +
mov esi [eax] +
call sub_1004E71  +
push ecx  +
push ecx  +
fstp  [esp+248h+var_248] +
push [ebp+arg_28]  +
push [ebp+var_234]  +
push [ebp+arg_20]  +
push [ebp+var_214]  +
push offset aUnknown_0  +
push [ebp+var_218]  +
call ds:GetCurrentThreadId  +
push eax  +
push dword_1012D1C  +
push dword ptr [ebx+8]  +
push dword ptr [ebx+4]  +
push [ebp+var_228]  +
push edi  +
push [ebp+arg_10]  +
call sub_10054BE  +
push eax  +
call sub_100548C  +
push eax  +
push dword ptr [ebx]  +
push [ebp+var_230]  +
push 11h  +
push dword_1012D0C  +
call dword ptr [esi+14h]  +
add esp 54h +
mov esi eax +
cmp [ebp+lpMem] edi +
jz loc_10057DB  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp esi 4 +
jnz loc_10057EC  +
call sub_1005CE4  +
push edi  +
call ds:ExitProcess  +
cmp [ebp+var_21C] edi +
jz loc_1005803  +
push edi  +
push edi  +
push 1  +
push 0C0000025h  +
call ds:RaiseException  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax esi +
jmp loc_1005815  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004835  +
leave   +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 434h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
or [ebp+var_42C] 0FFFFFFFFh +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor eax eax +
push 5  +
pop ecx  +
push 1F4h  +
push eax  +
mov [ebp+var_434] eax +
mov [ebp+var_428] eax +
mov [ebp+lpBaseAddress] eax +
mov dword ptr [ebp+Arguments] eax +
mov [ebp+lpAddress] eax +
mov dword ptr [ebp+var_418] eax +
lea eax [ebp+var_400] +
mov esi offset aUnknown +
lea edi [ebp+var_414] +
push eax  +
movs   +
call memset  +
xor eax eax +
push 206h  +
push eax  +
mov word ptr [ebp+var_20C] ax +
lea eax [ebp+var_20C+2] +
push eax  +
call memset  +
add esp 18h +
cmp dword_1012D20 0 +
mov edi 104h +
jz loc_10058FA  +
lea eax [ebp+var_20C] +
push eax  +
push edi  +
call sub_1005238  +
test eax eax +
jz loc_10058FA  +
lea eax [ebp+var_428] +
push eax  +
lea eax [ebp+var_434] +
push eax  +
lea eax [ebp+var_42C] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
push ebx  +
call sub_1004C76  +
mov [ebp+lpBaseAddress] eax +
test ebx ebx +
jz loc_100593F  +
mov eax [ebx] +
test eax eax +
jz loc_1005915  +
mov ecx [eax] +
mov eax [eax+0Ch] +
mov dword ptr [ebp+Arguments] ecx +
mov [ebp+lpAddress] eax +
push [ebp+lpAddress]  +
call sub_1004AE6  +
mov esi eax +
test esi esi +
jz loc_100593F  +
push edi  +
lea eax [ebp+var_414] +
push eax  +
push esi  +
call dword_1012D80  +
mov edi [ebp+lpAddress] +
sub edi esi +
jmp loc_1005945  +
mov edi dword ptr [ebp+var_418] +
cmp [ebp+lpBaseAddress] 0 +
mov dword ptr [ebp+var_418] offset aExceptionCode0 +
jnz loc_1005962  +
mov dword ptr [ebp+var_418] offset aExceptionCod_0 +
push [ebp+var_434]  +
mov eax [ebx+4] +
push [ebp+lpBaseAddress]  +
mov esi [eax+0B8h] +
call ds:GetLastError  +
push eax  +
push esi  +
push offset aWdslogstructur  +
push offset aUnknown  +
push 0  +
push offset word_1001AF2  +
push offset aD  +
push 90000h  +
push [ebp+var_434]  +
lea eax [ebp+var_414] +
push edi  +
push eax  +
push [ebp+lpAddress]  +
mov eax dword ptr [ebp+Arguments] +
call sub_1004B3D  +
push eax  +
push dword ptr [ebp+Arguments]  +
push dword ptr [ebp+var_418]  +
push 1000001h  +
call sub_1003E85  +
add esp 20h +
push eax  +
call sub_1005595  +
cmp [ebp+lpBaseAddress] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1005A03  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_428]  +
push [ebp+lpBaseAddress]  +
push [ebp+var_42C]  +
call sub_1004DA4  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1004835  +
leave   +
retn 4  +
***
call __SEH_prolog4  +
mov eax lpTopLevelExceptionFilter +
mov [ebp+var_1C] eax +
and [ebp+ms_exc.disabled] 0 +
push [ebp+arg_0]  +
call sub_100582B  +
jmp loc_1005A3F  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call sub_1005CE4  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
cmp [ebp+var_1C] 0 +
jz loc_1005A59  +
push [ebp+arg_0]  +
call [ebp+var_1C]  +
jmp loc_1005A5B  +
xor eax eax +
call __SEH_epilog4  +
retn 4  +
***
push offset aUnknown  +
push edi  +
push offset word_1001AF2  +
push offset aD  +
push 90000h  +
lea eax [ebp-224h] +
push eax  +
push dword ptr [ebp-228h]  +
mov eax esi +
call sub_1004B3D  +
push eax  +
push esi  +
push offset aExceptionCod_1  +
push 3000002h  +
call sub_1003E85  +
add esp 18h +
push eax  +
call sub_1005595  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1005B8F  +
xor eax eax +
inc eax  +
retn   +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor edi edi +
mov dword_1012D4C edi +
xor eax eax +
call __SEH_epilog4_GS  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
cmp dword_1012D10 ebx +
jbe loc_1005CD7  +
dec dword_1012D10  +
jnz loc_1005CD7  +
mov eax dword_1012D0C +
push esi  +
mov esi ds:SetUnhandledExceptionFilter +
push edi  +
mov edi offset TopLevelExceptionFilter +
push edi  +
mov [ebp+var_8] eax +
mov dword_1012D0C ebx +
call esi  +
cmp eax edi +
jnz loc_1005BED  +
mov eax lpTopLevelExceptionFilter +
push eax  +
call esi  +
push dwTlsIndex  +
mov esi ds:TlsFree +
mov lpTopLevelExceptionFilter ebx +
call esi  +
push dword_101042C  +
or dwTlsIndex 0FFFFFFFFh +
call ds:TlsGetValue  +
mov edi eax +
cmp edi ebx +
jz loc_1005C3A  +
jmp loc_1005C26  +
mov ecx eax +
call sub_100556F  +
mov ecx edi +
call sub_1005502  +
push 1  +
cmp eax ebx +
jnz loc_1005C1F  +
mov ecx edi +
call sub_1005466  +
push dword_101042C  +
call esi  +
or dword_101042C 0FFFFFFFFh +
push offset CriticalSection  +
call ds:EnterCriticalSection  +
mov eax lpMem +
cmp eax ebx +
jz loc_1005CB2  +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
xor ecx ecx +
mov [ebp+var_4] ecx +
cmp dword_1012D2C ebx +
jbe loc_1005C99  +
lea ecx [eax+ecx*4] +
cmp [ecx] ebx +
jz loc_1005C8A  +
push dword ptr [ecx]  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov eax lpMem +
mov ecx [ebp+var_4] +
inc ecx  +
mov [ebp+var_4] ecx +
cmp ecx dword_1012D2C +
jb loc_1005C76  +
push eax  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov lpMem ebx +
mov dword_1012D2C ebx +
mov dword_1012D30 ebx +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
cmp [ebp+var_8] ebx +
jz loc_1005CCC  +
push [ebp+var_8]  +
call sub_10093B3  +
mov dword_1012D14 ebx +
call sub_10079A7  +
mov eax dword_1012D10 +
pop ebx  +
leave   +
retn   +
***
call __SEH_prolog4  +
push dword ptr [ebp-1Ch]  +
call dword_1012D5C  +
retn   +
***
mov edi edi +
xor edi edi +
cmp [ebp-0F74h] edi +
jnz loc_100662A  +
mov dword_1012D0C ebx +
cmp [ebp-0F64h] edi +
jnz loc_100662A  +
call sub_1005CE4  +
push dword ptr [ebp-0F5Ch]  +
call dword_1012D54  +
push dword ptr [ebp-0F5Ch]  +
call dword_1012D5C  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
xor edi edi +
xor esi esi +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_10066C7  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
mov [ebp+var_14] ebx +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jz loc_10066B4  +
mov edi [ebp+var_14] +
jmp loc_10066BC  +
call ds:GetLastError  +
mov esi eax +
push [ebp+pSid]  +
call ds:FreeSid  +
jmp loc_10066CF  +
call ds:GetLastError  +
mov esi eax +
push esi  +
call ds:SetLastError  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004835  +
leave   +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
retn   +
***
call __SEH_prolog4_GS  +
cmp [ebp-3Ch] ebx +
jz loc_1006969  +
push dword ptr [ebp-3Ch]  +
call ds:FreeSid  +
mov [ebp-3Ch] ebx +
cmp [ebp-34h] ebx +
jz loc_100697A  +
push dword ptr [ebp-34h]  +
call ds:FreeSid  +
mov [ebp-34h] ebx +
cmp [ebp-30h] ebx +
jz loc_100698B  +
push dword ptr [ebp-30h]  +
call ds:FreeSid  +
mov [ebp-30h] ebx +
cmp [ebp-2Ch] ebx +
jz loc_100699C  +
push dword ptr [ebp-2Ch]  +
call ds:CloseHandle  +
mov [ebp-2Ch] ebx +
cmp [ebp-38h] ebx +
jz locret_10069B5  +
push dword ptr [ebp-38h]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp-38h] ebx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jz loc_10069D8  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:ReleaseMutex  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:WaitForSingleObject  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CloseHandle  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push eax  +
push 0F001Fh  +
push dword ptr [ebp+8]  +
call ds:MapViewOfFile  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:UnmapViewOfFile  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+10h] +
mov eax [ebp+0Ch] +
push esi  +
push dword ptr [ebp+14h]  +
mov [ebp-4] ecx +
lea ecx [ebp-4] +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
xor esi esi +
inc esi  +
mov [ebp-8] eax +
call ds:SetFilePointer  +
mov [ebp-8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1006A82  +
call ds:GetLastError  +
test eax eax +
jz loc_1006A82  +
xor esi esi +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:WriteFile  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_100DD02  +
***
xor eax eax +
retn 1Ch  +
***
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
lea eax [ebp-20h] +
push eax  +
xor esi esi +
call sub_10066FE  +
mov edi eax +
test edi edi +
jz loc_1006B02  +
and [ebp-4] esi +
lea eax [ebp-20h] +
mov dword ptr [ebp-0Ch] 0Ch +
mov [ebp-8] eax +
lea esi [ebp-0Ch] +
push dword ptr [ebp+8]  +
push dword ptr [ebp+0Ch]  +
push esi  +
call ds:CreateMutexW  +
push edi  +
mov esi eax +
call sub_10069BB  +
test esi esi +
jnz loc_1006B1F  +
xor eax eax +
jmp loc_1006B3D  +
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_1006B3B  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1006B3B  +
push 0FFFFFFFFh  +
push esi  +
call ds:WaitForSingleObject  +
mov eax esi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
lea eax [ebp-20h] +
push eax  +
xor esi esi +
call sub_10066FE  +
mov edi eax +
test edi edi +
jz loc_1006B76  +
and [ebp-4] esi +
lea eax [ebp-20h] +
mov dword ptr [ebp-0Ch] 0Ch +
mov [ebp-8] eax +
lea esi [ebp-0Ch] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 0  +
push 8000004h  +
push esi  +
push 0FFFFFFFFh  +
call ds:CreateFileMappingW  +
push edi  +
mov esi eax +
call sub_10069BB  +
test esi esi +
jnz loc_1006B9C  +
xor eax eax +
jmp loc_1006BB7  +
mov edi [ebp+10h] +
test edi edi +
jz loc_1006BB5  +
call ds:GetLastError  +
sub eax 0B7h +
neg eax  +
sbb eax eax +
inc eax  +
mov [edi] eax +
mov eax esi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
xor esi esi +
xor edi edi +
cmp [ebp+18h] esi +
jnz loc_1006BF7  +
lea eax [ebp-20h] +
push eax  +
call sub_10066FE  +
mov edi eax +
test edi edi +
jz loc_1006BF7  +
and [ebp-4] esi +
lea eax [ebp-20h] +
mov dword ptr [ebp-0Ch] 0Ch +
mov [ebp-8] eax +
lea esi [ebp-0Ch] +
push 0  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push esi  +
push dword ptr [ebp+0Ch]  +
push 0C0000000h  +
push dword ptr [ebp+8]  +
call ds:CreateFileW  +
push edi  +
mov esi eax +
call sub_10069BB  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetModuleFileNameA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetModuleFileNameW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CreateFileW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CreateFileMappingW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:DeleteFileW  +
***
cmp dword_10128C8 0 +
jz loc_1006CA0  +
and dword_10128C8 0 +
call ds:GetVersion  +
cmp eax 80000000h +
sbb eax eax +
neg eax  +
mov dword_1012D9C eax +
retn   +
mov eax dword_1012D9C +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
lea eax [ebp-24h] +
push eax  +
call ds:GetSystemInfo  +
mov eax [ebp-10h] +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
xor eax eax +
test ecx ecx +
jz loc_1006CDD  +
cmp ecx 7FFFFFFFh +
jbe loc_1006CE2  +
mov eax 80070057h +
test eax eax +
jl loc_1006D1F  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+10h]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1006D12  +
cmp eax esi +
ja loc_1006D12  +
jnz loc_1006D1A  +
mov [esi+edi] bl +
jmp loc_1006D1A  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
push 30h  +
mov eax offset dword_100DD7C +
call __EH_prolog3  +
xor esi esi +
mov [ebp-10h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov eax [ebp+8] +
mov [ebp-4] esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1006D49  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-1Ch] +
call sub_100949C  +
mov edi eax +
cmp edi esi +
jnz loc_1006D7B  +
lea ecx [ebp-1Ch] +
call sub_1004FEA  +
xor eax eax +
call __EH_epilog3  +
retn 8  +
***
push dword ptr [ebp+8]  +
push offset aS_2  +
push dword ptr [ebp-14h]  +
push edi  +
call near ptr dword_1006CC4+3  +
add esp 10h +
test eax eax +
jl loc_1006D69  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10066FE  +
mov ebx eax +
cmp ebx esi +
jz loc_1006DB7  +
lea eax [ebp-3Ch] +
mov [ebp-24h] eax +
mov dword ptr [ebp-28h] 0Ch +
mov [ebp-20h] esi +
lea eax [ebp-28h] +
jmp loc_1006DBA  +
mov eax [ebp-10h] +
push edi  +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:CreateMutexA  +
push ebx  +
mov edi eax +
call sub_10069BB  +
cmp edi esi +
jnz loc_1006DDD  +
lea ecx [ebp-1Ch] +
call sub_1004FEA  +
mov eax esi +
jmp loc_1006D73  +
***
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_1006DF8  +
cmp [ebp+0Ch] esi +
jz loc_1006DF8  +
push 0FFFFFFFFh  +
push edi  +
call ds:WaitForSingleObject  +
mov esi edi +
jmp loc_1006DD1  +
***
push 30h  +
mov eax offset dword_100DD7C +
call __EH_prolog3  +
xor esi esi +
mov [ebp-10h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov eax [ebp+0Ch] +
mov [ebp-4] esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1006E24  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-1Ch] +
call sub_100949C  +
mov edi eax +
cmp edi esi +
jnz loc_1006E56  +
lea ecx [ebp-1Ch] +
call sub_1004FEA  +
xor eax eax +
call __EH_epilog3  +
retn 0Ch  +
***
push dword ptr [ebp+0Ch]  +
push offset aS_2  +
push dword ptr [ebp-14h]  +
push edi  +
call near ptr dword_1006CC4+3  +
add esp 10h +
test eax eax +
jl loc_1006E44  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10066FE  +
mov ebx eax +
cmp ebx esi +
jz loc_1006E92  +
lea eax [ebp-3Ch] +
mov [ebp-24h] eax +
mov dword ptr [ebp-28h] 0Ch +
mov [ebp-20h] esi +
lea eax [ebp-28h] +
jmp loc_1006E95  +
mov eax [ebp-10h] +
push edi  +
push dword ptr [ebp+8]  +
push esi  +
push 8000004h  +
push eax  +
push 0FFFFFFFFh  +
call ds:CreateFileMappingA  +
push ebx  +
mov edi eax +
call sub_10069BB  +
cmp edi esi +
jnz loc_1006EC0  +
lea ecx [ebp-1Ch] +
call sub_1004FEA  +
mov eax esi +
jmp loc_1006E4E  +
***
mov ebx [ebp+10h] +
cmp ebx esi +
jz loc_1006ED9  +
call ds:GetLastError  +
sub eax 0B7h +
neg eax  +
sbb eax eax +
inc eax  +
mov [ebx] eax +
mov esi edi +
jmp loc_1006EB4  +
***
push 30h  +
mov eax offset dword_100DD7C +
call __EH_prolog3  +
xor esi esi +
xor ebx ebx +
mov [ebp-10h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov eax [ebp+8] +
mov [ebp-4] esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1006F07  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-1Ch] +
call sub_100949C  +
mov edi eax +
cmp edi esi +
jnz loc_1006F3A  +
lea ecx [ebp-1Ch] +
call sub_1004FEA  +
or eax 0FFFFFFFFh +
call __EH_epilog3  +
retn 14h  +
***
push dword ptr [ebp+8]  +
push offset aS_2  +
push dword ptr [ebp-14h]  +
push edi  +
call near ptr dword_1006CC4+3  +
add esp 10h +
test eax eax +
jge loc_1006F61  +
or esi 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_1004FEA  +
mov eax esi +
jmp loc_1006F32  +
***
cmp [ebp+18h] esi +
jnz loc_1006F89  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10066FE  +
mov [ebp-10h] eax +
cmp eax esi +
jz loc_1006F89  +
lea eax [ebp-3Ch] +
mov dword ptr [ebp-28h] 0Ch +
mov [ebp-24h] eax +
mov [ebp-20h] esi +
lea ebx [ebp-28h] +
push esi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push 0C0000000h  +
push edi  +
call ds:CreateFileA  +
push dword ptr [ebp-10h]  +
mov esi eax +
call sub_10069BB  +
jmp loc_1006F55  +
***
push 0Ch  +
mov eax offset dword_100DDA4 +
call __EH_prolog3  +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
mov esi [ebp+10h] +
lea eax [esi+1] +
push eax  +
lea ecx [ebp-18h] +
mov [ebp-4] ebx +
call sub_100949C  +
mov edi eax +
cmp edi ebx +
jnz loc_1006FF2  +
lea ecx [ebp-18h] +
call sub_1004FEA  +
mov eax ebx +
call __EH_epilog3  +
retn 0Ch  +
***
push esi  +
push edi  +
push dword ptr [ebp+8]  +
call ds:GetModuleFileNameA  +
mov ebx eax +
test ebx ebx +
jz loc_1006FE0  +
push edi  +
push offset aS  +
push esi  +
push dword ptr [ebp+0Ch]  +
call sub_10051FD  +
add esp 10h +
test eax eax +
jge loc_1006FE0  +
xor ebx ebx +
jmp loc_1006FE0  +
***
push 0Ch  +
mov eax offset dword_100DDA4 +
call __EH_prolog3  +
xor esi esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov [ebp-10h] esi +
mov eax [ebp+8] +
mov [ebp-4] esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1007042  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-18h] +
call sub_100949C  +
mov edi eax +
cmp edi esi +
jnz loc_1007075  +
lea ecx [ebp-18h] +
call sub_1004FEA  +
or eax 0FFFFFFFFh +
call __EH_epilog3  +
retn 1Ch  +
***
push dword ptr [ebp+8]  +
push offset aS_2  +
push dword ptr [ebp-10h]  +
push edi  +
call near ptr dword_1006CC4+3  +
add esp 10h +
test eax eax +
jge loc_100709C  +
or esi 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_1004FEA  +
mov eax esi +
jmp loc_100706D  +
***
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call ds:CreateFileA  +
mov esi eax +
jmp loc_1007090  +
***
push 0Ch  +
mov eax offset dword_100DDA4 +
call __EH_prolog3  +
xor edi edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
xor esi esi +
mov [ebp-4] edi +
cmp [ebp+1Ch] edi +
jz loc_100713B  +
mov eax [ebp+1Ch] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_10070E5  +
sub eax edx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-18h] +
call sub_100949C  +
mov esi eax +
cmp esi edi +
jnz loc_1007117  +
lea ecx [ebp-18h] +
call sub_1004FEA  +
xor eax eax +
call __EH_epilog3  +
retn 18h  +
***
push dword ptr [ebp+1Ch]  +
push offset aS_2  +
push dword ptr [ebp-10h]  +
push esi  +
call near ptr dword_1006CC4+3  +
add esp 10h +
test eax eax +
jge loc_100713B  +
lea ecx [ebp-18h] +
call sub_1004FEA  +
mov eax edi +
jmp loc_100710F  +
***
push esi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:CreateFileMappingA  +
mov edi eax +
jmp loc_100712F  +
***
push 0Ch  +
mov eax offset dword_100DDA4 +
call __EH_prolog3  +
xor edi edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
mov eax [ebp+8] +
mov [ebp-4] edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_100717A  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-18h] +
call sub_100949C  +
mov esi eax +
cmp esi edi +
jnz loc_10071AC  +
lea ecx [ebp-18h] +
call sub_1004FEA  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
push dword ptr [ebp+8]  +
push offset aS_2  +
push dword ptr [ebp-10h]  +
push esi  +
call near ptr dword_1006CC4+3  +
add esp 10h +
test eax eax +
jge loc_10071D0  +
lea ecx [ebp-18h] +
call sub_1004FEA  +
mov eax edi +
jmp loc_10071A4  +
***
push esi  +
call ds:DeleteFileA  +
mov edi eax +
jmp loc_10071C4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_1012DA0 0 +
jnz loc_1007396  +
mov eax [ebp+arg_0] +
mov dword_1012DA0 1 +
mov dword_1012D98 eax +
call sub_1006C7B  +
test eax eax +
jz loc_100728F  +
push offset ProcName  +
push offset ModuleName  +
mov dword_1012D50 offset loc_1006AD4 +
mov dword_1012D60 offset loc_1006B48 +
mov dword_1012D6C offset loc_1006BC2 +
mov dword_1012D7C offset loc_1006C26 +
mov dword_1012D80 offset loc_1006C37 +
mov dword_1012D84 offset loc_1006C48 +
mov dword_1012D90 offset loc_1006C59 +
mov dword_1012D94 offset loc_1006C6A +
call ds:GetModuleHandleW  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_10072DF  +
mov dword_1012D8C eax +
jmp loc_10072E9  +
mov dword_1012D50 offset loc_1006D26 +
mov dword_1012D60 offset loc_1006E01 +
mov dword_1012D6C offset loc_1006EE2 +
mov dword_1012D7C offset loc_1006C26 +
mov dword_1012D80 offset loc_1006FB1 +
mov dword_1012D84 offset loc_1007022 +
mov dword_1012D90 offset loc_10070BE +
mov dword_1012D94 offset loc_100715A +
mov dword_1012D8C offset loc_1006ACA +
push 103h  +
lea eax [ebp-107h] +
push 0  +
push eax  +
mov dword_1012D54 offset loc_10069E1 +
mov dword_1012D58 offset loc_10069F2 +
mov dword_1012D5C offset loc_1006A03 +
mov dword_1012D64 offset loc_1006A14 +
mov dword_1012D68 offset loc_1006A35 +
mov dword_1012D70 offset loc_1006A46 +
mov dword_1012D74 offset loc_1006A8E +
mov dword_1012D78 offset loc_1006CAB +
mov [ebp+LibFileName] 0 +
call memset  +
add esp 0Ch +
push 104h  +
lea eax [ebp+LibFileName] +
push eax  +
push offset Src  +
call ds:ExpandEnvironmentStringsA  +
test eax eax +
jz loc_100738C  +
lea eax [ebp+LibFileName] +
push eax  +
call ds:LoadLibraryA  +
mov dword_1012D88 offset loc_1006AB0 +
test eax eax +
jnz loc_1007396  +
mov dword_1012D88 offset loc_1006AC0 +
mov ecx [ebp+var_4] +
xor eax eax +
xor ecx ebp +
inc eax  +
call sub_1004835  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
cmp dword ptr [esi+4] 20000h +
jbe loc_10073D6  +
push dword ptr [esi]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 20h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_100740E  +
call sub_1009DF2  +
call __EH_epilog3  +
retn   +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 14h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1007440  +
call sub_100A8D0  +
call __EH_epilog3  +
retn   +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 18h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1007472  +
call sub_100AA36  +
call __EH_epilog3  +
retn   +
***
push 2  +
pop eax  +
retn   +
***
retn   +
***
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10074AA  +
and dword ptr [eax+4] 0 +
and dword ptr [eax+8] 0 +
mov dword ptr [eax] offset off_10020F4 +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B0A6  +
test [ebp+arg_0] 1 +
jz loc_10074CC  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 1Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10074FF  +
call sub_100ACB4  +
call __EH_epilog3  +
retn   +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 120h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1007534  +
call sub_100BAF1  +
call __EH_epilog3  +
retn   +
***
mov eax offset aXmllogformatte +
retn   +
***
push 4  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100755D  +
mov dword ptr [eax] offset off_1002114 +
retn   +
***
xor eax eax +
retn   +
***
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002114 +
jz loc_1007580  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx+4] +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100ABB8  +
test byte ptr [ebp+8] 1 +
jz loc_10075AF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_10075D3  +
push esi  +
mov esi offset dword_10020A4 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100760D  +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1002154 +
or dword ptr [eax+8] 0FFFFFFFFh +
and dword ptr [eax+0Ch] 0 +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_100762D  +
push esi  +
mov esi offset dword_10020B4 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
test ecx ecx +
jz locret_1007642  +
push 1  +
call sub_10074B2  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_1007660  +
push esi  +
mov esi offset dword_10020E4 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1009BB7  +
test [ebp+arg_0] 1 +
jz loc_1007695  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_1007763  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1007763  +
mov edi dword_1012DA4 +
test edi edi +
jnz loc_10076EE  +
push 18h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10076E0  +
push 64h  +
mov ecx eax +
call sub_1009D31  +
jmp loc_10076E2  +
xor eax eax +
mov edi eax +
mov dword_1012DA4 edi +
test eax eax +
jz loc_1007763  +
and dword ptr [edi+8] 0 +
jmp loc_1007713  +
mov ecx [eax+4] +
cmp ecx [esi] +
jnz loc_1007713  +
mov ecx [eax+8] +
cmp ecx [esi+4] +
jnz loc_1007713  +
mov ecx [eax+0Ch] +
cmp ecx [esi+8] +
jnz loc_1007713  +
mov ecx [eax+10h] +
cmp ecx [esi+0Ch] +
jz loc_100776C  +
mov ecx edi +
call sub_100822E  +
test eax eax +
jnz loc_10076F4  +
push 18h  +
push eax  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_1007763  +
and dword ptr [ebx] 0 +
mov eax [ebp+arg_4] +
mov ecx dword_1012DA4 +
lea edi [ebx+4] +
movs   +
movs   +
movs   +
movs   +
push ebx  +
mov [ebx+14h] eax +
call sub_1009D7D  +
test eax eax +
jnz loc_1007778  +
push ebx  +
push eax  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
xor ecx ecx +
cmp [eax+14h] ebx +
setz cl  +
mov eax ecx +
jmp loc_1007765  +
xor eax eax +
inc eax  +
jmp loc_1007765  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi dword_1012DA4 +
test esi esi +
jnz loc_100779A  +
xor eax eax +
inc eax  +
jmp loc_1007825  +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_10077A6  +
xor eax eax +
jmp loc_1007824  +
and dword ptr [esi+8] 0 +
push edi  +
jmp loc_10077CC  +
mov eax [edi+4] +
cmp eax [ebx] +
jnz loc_10077CC  +
mov eax [edi+8] +
cmp eax [ebx+4] +
jnz loc_10077CC  +
mov eax [edi+0Ch] +
cmp eax [ebx+8] +
jnz loc_10077CC  +
mov eax [edi+10h] +
cmp eax [ebx+0Ch] +
jz loc_10077DB  +
mov ecx esi +
call sub_100822E  +
mov edi eax +
test edi edi +
jnz loc_10077AD  +
jmp loc_1007820  +
cmp dword ptr [edi] 0 +
jz loc_10077E4  +
xor eax eax +
jmp loc_1007823  +
push edi  +
mov ecx esi +
call sub_10081F1  +
push edi  +
xor edi edi +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov esi dword_1012DA4 +
mov ecx esi +
mov [esi+8] edi +
call sub_100822E  +
test eax eax +
jnz loc_1007820  +
push 1  +
mov ecx esi +
call sub_100767B  +
mov dword_1012DA4 edi +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push edi  +
mov edi dword_1012DA4 +
test edi edi +
jnz loc_1007843  +
xor eax eax +
jmp loc_1007884  +
push ebx  +
mov ebx [ebp+8] +
test ebx ebx +
jnz loc_100784F  +
xor eax eax +
jmp loc_1007883  +
and dword ptr [edi+8] 0 +
push esi  +
jmp loc_1007875  +
mov eax [esi+4] +
cmp eax [ebx] +
jnz loc_1007875  +
mov eax [esi+8] +
cmp eax [ebx+4] +
jnz loc_1007875  +
mov eax [esi+0Ch] +
cmp eax [ebx+8] +
jnz loc_1007875  +
mov eax [esi+10h] +
cmp eax [ebx+0Ch] +
jz loc_1007889  +
mov ecx edi +
call sub_100822E  +
mov esi eax +
test esi esi +
jnz loc_1007856  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 4  +
***
call dword ptr [esi+14h]  +
test eax eax +
jz loc_1007882  +
inc dword ptr [esi]  +
jmp loc_1007882  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_1012DA4 0 +
push edi  +
mov edi [ebp+arg_0] +
jnz loc_10078BC  +
xor eax eax +
jmp loc_1007904  +
test edi edi +
jz loc_10078B8  +
mov eax [edi] +
push esi  +
lea ecx [ebp+var_14] +
push ecx  +
mov ecx edi +
call dword ptr [eax+4]  +
mov esi dword_1012DA4 +
and dword ptr [esi+8] 0 +
jmp loc_10078F8  +
mov ecx [eax+4] +
cmp ecx [ebp+var_14] +
jnz loc_10078F8  +
mov ecx [eax+8] +
cmp ecx [ebp+var_10] +
jnz loc_10078F8  +
mov ecx [eax+0Ch] +
cmp ecx [ebp+var_C] +
jnz loc_10078F8  +
mov ecx [eax+10h] +
cmp ecx [ebp+var_8] +
jz loc_1007913  +
mov ecx esi +
call sub_100822E  +
test eax eax +
jnz loc_10078D8  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1004835  +
leave   +
retn 4  +
dec dword ptr [eax]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+1Ch]  +
xor eax eax +
inc eax  +
jmp loc_1007903  +
***
call sub_10076A1  +
push offset loc_100744B  +
push offset dword_1002094  +
call sub_10076A1  +
push offset loc_10075EE  +
push offset dword_10020A4  +
call sub_10076A1  +
push offset loc_100748F  +
push offset dword_10020B4  +
call sub_10076A1  +
push offset loc_10074D8  +
push offset dword_10020C4  +
call sub_10076A1  +
push offset loc_100750A  +
push offset dword_10020D4  +
call sub_10076A1  +
push offset loc_100754A  +
push offset dword_10020E4  +
call sub_10076A1  +
push offset loc_10073E7  +
push offset dword_1002074  +
call sub_10076A1  +
xor eax eax +
inc eax  +
retn   +
***
push offset dword_10020C4  +
call sub_1007782  +
push offset dword_10020D4  +
call sub_1007782  +
push offset dword_10020A4  +
call sub_1007782  +
push offset dword_10020B4  +
call sub_1007782  +
push offset dword_1002094  +
call sub_1007782  +
push offset dword_1002084  +
call sub_1007782  +
push offset dword_1002074  +
call sub_1007782  +
xor eax eax +
inc eax  +
retn   +
***
cmp dword_1012DA4 0 +
jz locret_1007A26  +
call sub_10079A7  +
mov ecx dword_1012DA4 +
test ecx ecx +
jz locret_1007A26  +
push 1  +
call sub_100767B  +
and dword_1012DA4 0 +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1007A47  +
cmp [esi] ax +
jz loc_1007A43  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1007A39  +
test edx edx +
jnz loc_1007A4C  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1007A5D  +
test eax eax +
jl loc_1007A5A  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1007A98  +
cmp [ebp+arg_4] eax +
jz loc_1007A94  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1007A94  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1007A77  +
test esi esi +
jnz loc_1007AA0  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1007AAE  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
push 8  +
push 0  +
jnz loc_1007B30  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [esi] eax +
jmp loc_1007B47  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ecx [esi+4] +
mov [ecx] eax +
mov eax [esi+4] +
mov eax [eax] +
mov [esi+4] eax +
test eax eax +
jz loc_1007B5F  +
and dword ptr [eax] 0 +
mov eax [esi+4] +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
xor eax eax +
inc eax  +
jmp loc_1007B61  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+4] +
mov edx [ebp+arg_4] +
push esi  +
mov esi [eax+8] +
sub esi ecx +
cmp edx esi +
pop esi  +
jbe loc_1007BAF  +
xor eax eax +
jmp loc_1007BBA  +
add ecx edx +
mov [eax+4] ecx +
mov eax [eax] +
sub eax edx +
add eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+4] +
cmp [ebp+arg_4] eax +
ja loc_1007BD9  +
sub eax [ebp+arg_4] +
mov [ecx+4] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push edi  +
mov edi ecx +
jz loc_1007C14  +
push esi  +
push offset sub_1004FEA  +
lea esi [edi-4] +
push dword ptr [esi]  +
push 0Ch  +
push edi  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
test [ebp+arg_0] 1 +
jz loc_1007C0F  +
push esi  +
call sub_1007ADA  +
mov eax esi +
pop esi  +
jmp loc_1007C28  +
call sub_1004FEA  +
test [ebp+arg_0] 1 +
jz loc_1007C26  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+28h] +
test ecx ecx +
jz loc_1007C4D  +
push 3  +
call sub_1007BE2  +
and dword ptr [esi+28h] 0 +
and dword ptr [esi+2Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
push 0  +
push dword ptr [edi+8]  +
call memset  +
add esp 0Ch +
cmp esi 1010h +
jnb loc_1007C7A  +
xor eax eax +
jmp loc_1007CB2  +
mov ecx [edi+8] +
and dword ptr [ecx+4] 0 +
lea eax [esi-1000h] +
shr eax 1 +
add eax 7 +
and eax 0FFFFFFF8h +
mov [ecx+8] eax +
mov dword ptr [ecx] 1000h +
lea ecx [eax+1000h] +
mov eax [edi+8] +
and dword ptr [eax+10h] 0 +
add eax 0Ch +
sub esi ecx +
mov [eax] ecx +
mov [eax+8] esi +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+0Ch] +
call sub_100946E  +
xor edi edi +
lea ecx [esi+14h] +
mov [esi+8] edi +
call sub_100942A  +
mov eax [esi+1Ch] +
cmp eax edi +
jz loc_1007CF7  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+8] ebx +
jz loc_1007DFD  +
cmp [esi+1Ch] ebx +
jz loc_1007DFD  +
mov eax [esi+8] +
push edi  +
mov edi [eax] +
add edi eax +
mov eax [eax+4] +
xor edx edx +
mov ecx 20Ch +
div  ecx +
mov ecx [esi+20h] +
dec ecx  +
mov [ebp+var_14] edi +
mov [ebp+var_10] ecx +
js loc_1007DF7  +
dec eax  +
imul ecx ecx +
mov [ebp+var_18] eax +
mov [ebp+var_C] ecx +
mov ecx [esi+1Ch] +
mov eax [ebp+var_18] +
add ecx [ebp+var_C] +
cmp eax ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] eax +
jl loc_1007DE4  +
imul eax eax +
add eax edi +
mov edi ecx +
lea edx [eax+0Ch] +
mov bx [edx] +
cmp bx [edi] +
jnz loc_1007D99  +
test bx bx +
jz loc_1007D95  +
mov bx [edx+2] +
cmp bx [edi+2] +
jnz loc_1007D99  +
add edx 4 +
add edi 4 +
test bx bx +
jnz loc_1007D73  +
xor edx edx +
jmp loc_1007D9E  +
sbb edx edx +
sbb edx 0FFFFFFFFh +
xor ebx ebx +
cmp edx ebx +
jnz loc_1007DA8  +
dec dword ptr [eax]  +
jz loc_1007DBC  +
mov edx 20Ch +
add [ebp+var_4] edx +
dec [ebp+var_8]  +
sub eax edx +
cmp [ebp+var_8] ebx +
jge loc_1007D6E  +
jmp loc_1007DE1  +
cmp [ebp+var_4] ebx +
jz loc_1007DD4  +
push [ebp+var_4]  +
lea ecx [eax+20Ch] +
push ecx  +
push eax  +
call memcpy  +
add esp 0Ch +
push 20Ch  +
push dword ptr [esi+8]  +
call sub_1007BC3  +
mov edi [ebp+var_14] +
dec [ebp+var_10]  +
sub [ebp+var_C] 220h +
cmp [ebp+var_10] ebx +
jge loc_1007D53  +
xor eax eax +
inc eax  +
pop edi  +
jmp loc_1007DFF  +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push 8  +
push offset dword_100E300  +
call __SEH_prolog4  +
mov esi [ebp+8] +
lea ecx [esi+14h] +
call sub_1009446  +
and dword ptr [ebp-4] 0 +
mov ecx [esi+38h] +
test ecx ecx +
jz loc_1007F26  +
mov eax [ecx] +
push 1  +
lea edx [esi+4] +
push edx  +
call dword ptr [eax+14h]  +
push dword ptr [esi+38h]  +
call sub_1007899  +
and dword ptr [esi+38h] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1007F40  +
xor eax eax +
inc eax  +
call __SEH_epilog4  +
retn 8  +
***
lea ecx [esi+14h] +
call sub_100945B  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
push ebx  +
push esi  +
push edi  +
mov edi [eax+0Ch] +
xor ebx ebx +
add edi eax +
mov [ebp+var_4] ecx +
cmp [eax+10h] ebx +
jbe loc_1007F8C  +
push [ebp+arg_4]  +
lea esi [ebx+edi] +
lea eax [esi+18h] +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007F9C  +
mov eax [ebp+var_4] +
add ebx [esi] +
mov eax [eax+8] +
cmp ebx [eax+10h] +
jb loc_1007F69  +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
mov ecx [esi+8] +
mov eax [ebp+arg_0] +
cmp ecx [eax] +
jnz loc_1007FC5  +
mov ecx [esi+0Ch] +
cmp ecx [eax+4] +
jnz loc_1007FC5  +
mov ecx [esi+10h] +
cmp ecx [eax+8] +
jnz loc_1007FC5  +
mov ecx [esi+14h] +
cmp ecx [eax+0Ch] +
jnz loc_1007FC5  +
mov eax [ebp+arg_8] +
mov [eax] esi +
jmp loc_1007F92  +
xor eax eax +
jmp loc_1007F95  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1007F4E  +
test eax eax +
jz loc_1008037  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1008033  +
dec dword ptr [edi+4]  +
jnz loc_1008033  +
mov ecx [esi+8] +
mov eax [edi] +
mov edx [ecx+0Ch] +
mov [ebp+arg_4] eax +
sub eax edx +
sub eax ecx +
add eax edi +
cmp eax [ecx+10h] +
jnb loc_1008024  +
push ebx  +
mov ebx ecx +
mov ebx [ebx+10h] +
sub ebx eax +
add edx ecx +
push ebx  +
add edx eax +
push edx  +
push edi  +
call memcpy  +
add esp 0Ch +
pop ebx  +
mov eax [esi+8] +
push [ebp+arg_4]  +
add eax 0Ch +
push eax  +
call sub_1007BC3  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
mov eax [esi+20h] +
imul eax eax +
push edi  +
push eax  +
xor edi edi +
push edi  +
mov [ebp-8] esi +
mov dword ptr [ebp-10h] 1 +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-14h] eax +
cmp eax edi +
jz loc_100818F  +
push ebx  +
mov [ebp-0Ch] edi +
cmp [esi+20h] edi +
jbe loc_1008137  +
mov [ebp-4] edi +
lea ebx [eax+10h] +
mov ecx [esi+1Ch] +
mov eax [ebp-4] +
lea esi [ecx+eax+208h] +
push 6  +
lea edi [ebx-10h] +
pop ecx  +
movs   +
mov esi [ebp-8] +
mov ecx [esi+1Ch] +
mov eax [ecx+eax+208h] +
cmp eax 2 +
jnz loc_10080D4  +
mov ecx [ebx] +
test ecx ecx +
jbe loc_10080D4  +
push ecx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebx-8] eax +
test eax eax +
jz loc_1008114  +
push dword ptr [ebx]  +
jmp loc_10080FC  +
test eax eax +
jnz loc_1008118  +
mov eax [ebx] +
test eax eax +
jbe loc_1008118  +
add eax eax +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebx-8] eax +
test eax eax +
jz loc_1008114  +
mov ecx [ebx] +
add ecx ecx +
push ecx  +
mov edx [ebp-4] +
mov ecx [esi+1Ch] +
push dword ptr [ecx+edx+210h]  +
push eax  +
call memcpy  +
add esp 0Ch +
jmp loc_1008118  +
and dword ptr [ebp-10h] 0 +
inc dword ptr [ebp-0Ch]  +
mov eax [ebp-0Ch] +
add dword ptr [ebp-4] 220h +
add ebx 18h +
cmp eax [esi+20h] +
jb loc_100808C  +
cmp dword ptr [ebp-10h] 0 +
jz loc_1008146  +
push dword ptr [ebp-14h]  +
lea ecx [esi+48h] +
call sub_1007B0E  +
test eax eax +
jnz loc_100818E  +
and dword ptr [ebp-10h] 0 +
cmp dword ptr [esi+20h] 0 +
mov ebx ds:HeapFree +
jbe loc_1008180  +
mov edi [ebp-14h] +
mov eax [edi] +
cmp eax 2 +
jz loc_1008164  +
test eax eax +
jnz loc_1008172  +
push dword ptr [edi+8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
inc dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
add edi 18h +
cmp eax [esi+20h] +
jb loc_1008159  +
push dword ptr [ebp-14h]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
cmp [ebp+8] ebx +
jnz loc_10081AC  +
xor eax eax +
jmp loc_10081D8  +
push edi  +
xor edi edi +
cmp [esi+1Ch] ebx +
jbe loc_10081D5  +
mov eax [esi+18h] +
push dword ptr [ebp+8]  +
add eax ebx +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10081DE  +
inc edi  +
add ebx 220h +
cmp edi [esi+1Ch] +
jb loc_10081B4  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax [ebp+0Ch] +
test eax eax +
jz loc_10081E7  +
mov [eax] edi +
xor eax eax +
inc eax  +
jmp loc_10081D7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
test edi edi +
jz loc_100821B  +
mov edx [ecx+4] +
push esi  +
test edx edx +
jbe loc_1008218  +
mov ecx [ecx] +
mov esi ecx +
cmp [esi] edi +
jz loc_1008220  +
inc eax  +
add esi 4 +
cmp eax edx +
jb loc_100820C  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
and dword ptr [ecx+eax*4] 0 +
xor eax eax +
inc eax  +
jmp loc_100821A  +
***
mov eax [ecx+8] +
cmp eax [ecx+4] +
jnb loc_100824A  +
mov eax [ecx] +
mov edx [ecx+8] +
cmp dword ptr [eax+edx*4] 0 +
jnz loc_100824D  +
inc edx  +
mov [ecx+8] edx +
cmp edx [ecx+4] +
jb loc_1008238  +
xor eax eax +
retn   +
mov eax [eax+edx*4] +
inc edx  +
mov [ecx+8] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push 0  +
pop eax  +
jz loc_1008271  +
cmp edx 7FFFFFFFh +
jbe loc_1008276  +
mov eax 80070057h +
test eax eax +
jl loc_100828C  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1007A63  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
shr esi 1 +
push 0  +
pop eax  +
mov ebx 7FFFFFFFh +
jz loc_10082AF  +
cmp esi ebx +
jbe loc_10082B4  +
mov eax 80070057h +
test eax eax +
jl loc_10082CC  +
mov eax [ebp+arg_0] +
push edi  +
lea edi [ebp+arg_4] +
mov edx esi +
call sub_1007A2C  +
mov ecx [ebp+arg_4] +
pop edi  +
jmp loc_10082CE  +
xor ecx ecx +
test eax eax +
jl loc_10082E7  +
mov eax [ebp+arg_0] +
mov edx esi +
push ebx  +
sub edx ecx +
lea ecx [eax+ecx*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_1007A63  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3  +
mov ebx ecx +
mov esi [ebp+8] +
test esi esi +
jnz loc_100830B  +
xor eax eax +
jmp loc_1008388  +
cmp dword ptr [ebx+28h] 0 +
jz loc_1008316  +
call sub_1007C32  +
xor ecx ecx +
push 0Ch  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call sub_1007ABA  +
mov [ebp+8] eax +
xor edi edi +
mov [ebp-4] edi +
cmp eax edi +
jz loc_100835C  +
push offset sub_1004FEA  +
push offset loc_10066EC  +
push esi  +
lea edi [eax+4] +
push 0Ch  +
push edi  +
mov [eax] esi +
call ??_L@YGXPAXIHP6EX0@Z1@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebx+28h] edi +
test edi edi +
jz loc_1008307  +
mov [ebx+2Ch] esi +
test esi esi +
jbe loc_1008385  +
xor edi edi +
mov ecx [ebx+28h] +
push 400h  +
add ecx edi +
call sub_1009521  +
add edi 0Ch +
dec esi  +
jnz loc_1008370  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov eax [ebp+8] +
mov [ebp-4] edi +
mov [ebp-10h] edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_10083BA  +
sub eax ecx +
sar eax 1 +
lea eax [eax+eax+10h] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_100949C  +
mov ebx eax +
cmp ebx edi +
jnz loc_10083ED  +
lea ecx [ebp-1Ch] +
call sub_1004FEA  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-14h]  +
push ebx  +
call sub_100825A  +
push offset aSection  +
push dword ptr [ebp-14h]  +
push ebx  +
call sub_1008295  +
lea eax [ebp-10h] +
push eax  +
push 8000h  +
push ebx  +
lea ecx [esi+0Ch] +
call sub_1009794  +
test eax eax +
jnz loc_1008429  +
lea ecx [ebp-1Ch] +
call sub_1004FEA  +
mov eax edi +
jmp loc_10083E5  +
mov eax [esi+10h] +
mov [esi+8] eax +
cmp [ebp-10h] edi +
jnz loc_1008440  +
push 8000h  +
mov ecx esi +
call sub_1007C54  +
xor edi edi +
inc edi  +
jmp loc_100841D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ecx+8] +
push ebx  +
mov ebx [eax] +
add ebx eax +
mov eax [eax+4] +
mov [ebp+var_10] ecx +
xor edx edx +
mov ecx 20Ch +
div  ecx +
and [ebp+var_8] 0 +
push esi  +
push edi  +
mov [ebp+var_C] eax +
test eax eax +
jbe loc_1008503  +
mov esi ebx +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
jbe loc_10084E0  +
mov edi [ebp+arg_0] +
lea eax [edi+8] +
lea ecx [esi+0Ch] +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_10084B5  +
test dx dx +
jz loc_10084B1  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_10084B5  +
add ecx 4 +
add eax 4 +
test dx dx +
jnz loc_100848F  +
xor eax eax +
jmp loc_10084BA  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_10084D1  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add edi 208h +
cmp eax [ebp+arg_4] +
jb loc_1008489  +
jmp loc_10084E0  +
mov eax [esi+4] +
cmp eax [edi] +
jnz loc_100854C  +
mov eax [esi+8] +
cmp eax [edi+4] +
jnz loc_100854C  +
mov eax [ebp+arg_4] +
cmp [ebp+var_4] eax +
jnz loc_10084EE  +
cmp dword ptr [esi+8] 0 +
jnz loc_100854C  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add esi 20Ch +
cmp eax [ebp+var_C] +
jb loc_100847C  +
and [ebp+var_8] 0 +
cmp [ebp+arg_4] 0 +
jbe loc_10085BE  +
mov edi [ebp+arg_0] +
and [ebp+arg_0] 0 +
cmp [ebp+var_C] 0 +
jbe loc_100856A  +
mov esi ebx +
lea ecx [edi+8] +
lea eax [esi+0Ch] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1008550  +
test dx dx +
jz loc_1008548  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1008550  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1008526  +
xor eax eax +
jmp loc_1008555  +
xor eax eax +
jmp loc_10085C1  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_10085C8  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
add esi 20Ch +
cmp eax [ebp+var_C] +
jb loc_1008520  +
mov eax [ebp+var_10] +
push 20Ch  +
push dword ptr [eax+8]  +
call sub_1007B92  +
test eax eax +
jz loc_100854C  +
mov ecx [ebp+var_10] +
mov esi [ecx+8] +
add esi eax +
lea eax [edi+8] +
push eax  +
push 200h  +
lea eax [esi+0Ch] +
push eax  +
mov dword ptr [esi] 1 +
call sub_100825A  +
mov eax [edi] +
mov [esi+4] eax +
mov eax [edi+4] +
mov [esi+8] eax +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add edi 208h +
cmp eax [ebp+arg_4] +
jb loc_1008514  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
inc dword ptr [esi]  +
jmp loc_10085A9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_18] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+8] 0 +
mov ebx ecx +
jz loc_1008633  +
mov ecx [esi+4] +
mov eax [ecx] +
lea edx [ebp+var_14] +
push edx  +
call dword ptr [eax+4]  +
mov ecx [esi+8] +
lea eax [ebp+var_1C] +
push eax  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
mov ecx ebx +
call sub_1007F4E  +
test eax eax +
jz loc_1008633  +
mov eax [ebp+var_1C] +
test eax eax +
jz loc_10086B9  +
xor ecx ecx +
cmp dword ptr [eax+4] 1 +
setz cl  +
mov [ebp+var_18] ecx +
push edi  +
lea edi [ebx+4] +
mov eax [edi] +
push 0  +
push 0  +
mov ecx edi +
call dword ptr [eax+4]  +
mov ecx [esi] +
test ecx ecx +
jz loc_1008658  +
push [ebp+var_18]  +
mov eax [ecx] +
push edi  +
call dword ptr [eax+14h]  +
push dword ptr [esi]  +
call sub_1007899  +
push [ebp+var_18]  +
mov ecx [esi+4] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+14h]  +
push dword ptr [esi+4]  +
call sub_1007899  +
cmp dword ptr [esi+8] 0 +
jz loc_100869E  +
push [ebp+var_18]  +
mov ecx [esi+8] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+14h]  +
mov ecx [esi+8] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
mov ecx ebx +
call sub_1007FCE  +
test eax eax +
jz loc_10086B8  +
push dword ptr [esi+8]  +
call sub_1007899  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+10h]  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor eax eax +
inc eax  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004835  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1007F4E  +
test eax eax +
jnz loc_10086EE  +
xor eax eax +
jmp loc_1008765  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_100875F  +
cmp [ebp+arg_8] eax +
jnz loc_10086EA  +
mov eax [ebp+arg_4] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1008700  +
sub eax ecx +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_8] eax +
add eax 1Fh +
and eax 0FFFFFFF8h +
push eax  +
mov [ebp+var_4] eax +
mov eax [esi+8] +
add eax 0Ch +
push eax  +
call sub_1007B92  +
test eax eax +
jz loc_10086EA  +
push ebx  +
mov ebx [esi+8] +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
add ebx eax +
push [ebp+arg_8]  +
mov dword ptr [ebx+4] 1 +
lea edi [ebx+8] +
movs   +
movs   +
movs   +
lea eax [ebx+18h] +
push eax  +
movs   +
call sub_100825A  +
mov eax [ebp+var_4] +
pop edi  +
mov [ebx] eax +
pop ebx  +
jmp loc_1008762  +
inc dword ptr [eax+4]  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 0Ch  +
***
push 8  +
push offset dword_100E378  +
call __SEH_prolog4  +
mov esi [ebp+8] +
lea ecx [esi+14h] +
call sub_1009446  +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+50h] 1 +
mov ecx [esi+34h] +
call sub_1009BD1  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10087B3  +
xor eax eax +
inc eax  +
call __SEH_epilog4  +
retn 4  +
***
lea ecx [esi+14h] +
call sub_100945B  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi+4] offset off_1002174 +
xor edi edi +
mov dword ptr [esi] offset off_10021C4 +
mov dword ptr [esi+4] offset off_10021A4 +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [ebp-4] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+3Ch] edi +
mov [esi+40h] edi +
mov [esi+44h] edi +
push 18h  +
mov byte ptr [ebp-4] 2 +
mov [esi+4Ch] edi +
mov [esi+48h] edi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-14h] ecx +
mov byte ptr [ebp-4] 3 +
cmp ecx edi +
jz loc_1008828  +
push 64h  +
call sub_1009D31  +
jmp loc_100882A  +
xor eax eax +
push 18h  +
mov byte ptr [ebp-4] 2 +
mov [esi+30h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-14h] ecx +
mov byte ptr [ebp-4] 4 +
cmp ecx edi +
jz loc_100884F  +
push 64h  +
call sub_1009D31  +
jmp loc_1008851  +
xor eax eax +
mov ecx [esi+30h] +
mov byte ptr [ebp-4] 2 +
mov [esi+34h] eax +
cmp ecx edi +
jz loc_100886E  +
cmp eax edi +
jnz loc_100888B  +
cmp ecx edi +
jz loc_100886E  +
push 1  +
call sub_100767B  +
mov ecx [esi+34h] +
cmp ecx edi +
jz loc_100887C  +
push 1  +
call sub_100767B  +
push edi  +
push edi  +
push 1  +
push 0C0000025h  +
call ds:RaiseException  +
mov [esi+8] edi +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov [esi+2Ch] edi +
mov [esi+38h] edi +
mov [esi+50h] edi +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
add ecx 38h +
call sub_1009521  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
add ecx 38h +
call sub_100949C  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
add ecx 38h +
call sub_100954F  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jz loc_100890C  +
mov edx [ecx+40h] +
mov [eax] edx +
mov eax [ecx+38h] +
pop ebp  +
retn 8  +
***
add ecx 38h +
jmp sub_10073AC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
imul eax eax +
add eax [ecx+18h] +
pop ebp  +
retn 4  +
***
mov eax [ecx+1Ch] +
retn   +
***
call __SEH_prolog4  +
lea ecx [esi+14h] +
call sub_100945B  +
retn   +
***
push 24h  +
push offset dword_100E400  +
call __SEH_prolog4  +
xor edi edi +
mov [ebp-2Ch] edi +
xor ebx ebx +
mov [ebp-30h] ebx +
mov [ebp-1Ch] edi +
mov [ebp-20h] edi +
mov [ebp-28h] edi +
mov [ebp-24h] edi +
mov [ebp-34h] edi +
cmp [ebp+14h] edi +
jnz loc_1008A18  +
xor eax eax +
jmp loc_1008BDB  +
mov ecx [ebp+8] +
add ecx 14h +
call sub_1009446  +
mov [ebp-4] edi +
xor esi esi +
inc esi  +
mov [ebp-4] esi +
cmp dword ptr [ebp+1Ch] 0 +
jz loc_1008A82  +
push dword ptr [ebp+1Ch]  +
call near ptr dword_100782C+3  +
mov edi eax +
mov [ebp-2Ch] edi +
test edi edi +
jz loc_1008BC3  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax]  +
cmp eax 2 +
jnz loc_1008BC3  +
mov edx [edi] +
mov eax [ebp+8] +
mov ecx eax +
add eax 4 +
neg ecx  +
sbb ecx ecx +
and ecx eax +
push ecx  +
push dword ptr [ebp+20h]  +
mov ecx edi +
call dword ptr [edx+8]  +
test eax eax +
jz loc_1008BC3  +
xor ecx ecx +
cmp eax 5 +
setz cl  +
mov [ebp-24h] ecx +
push dword ptr [ebp+14h]  +
call near ptr dword_100782C+3  +
mov ebx eax +
mov [ebp-30h] ebx +
test ebx ebx +
jz loc_1008BC3  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax]  +
cmp eax esi +
jnz loc_1008BC3  +
mov esi [ebp+8] +
lea eax [esi+4] +
neg esi  +
sbb esi esi +
and esi eax +
mov eax [ebx] +
push esi  +
push dword ptr [ebp+18h]  +
mov ecx ebx +
call dword ptr [eax+8]  +
test eax eax +
jz loc_1008BC3  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1008AFF  +
push dword ptr [ebp+0Ch]  +
call near ptr dword_100782C+3  +
mov [ebp-1Ch] eax +
test eax eax +
jz loc_1008BC3  +
mov ecx eax +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jnz loc_1008BC3  +
mov ecx [ebp-1Ch] +
mov eax [ecx] +
push esi  +
push dword ptr [ebp+10h]  +
call dword ptr [eax+8]  +
test eax eax +
jz loc_1008BC3  +
push 0Ch  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-20h] eax +
test eax eax +
jz loc_1008BC3  +
mov [eax+8] edi +
mov ecx [ebp-1Ch] +
mov [eax] ecx +
mov [eax+4] ebx +
test edi edi +
jz loc_1008B4B  +
push dword ptr [ebp-24h]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+18h]  +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx [ebp+8] +
call sub_10086CE  +
test eax eax +
jz loc_1008BC3  +
mov dword ptr [ebp-34h] 1 +
mov ecx [ebp+8] +
add ecx 4 +
mov eax [ecx] +
push 0  +
push 0  +
call dword ptr [eax+4]  +
mov eax [ebp-1Ch] +
test eax eax +
jz loc_1008B73  +
mov eax [eax] +
xor ecx ecx +
cmp [ebp-24h] ecx +
setz cl  +
push ecx  +
push esi  +
mov ecx [ebp-1Ch] +
call dword ptr [eax+0Ch]  +
xor eax eax +
cmp [ebp-24h] eax +
setz al  +
mov [ebp+1Ch] eax +
mov eax [ebx] +
push dword ptr [ebp+1Ch]  +
push esi  +
mov ecx ebx +
call dword ptr [eax+0Ch]  +
test edi edi +
jz loc_1008B98  +
mov eax [edi] +
push dword ptr [ebp+1Ch]  +
push esi  +
mov ecx edi +
call dword ptr [eax+0Ch]  +
mov ecx [ebp+8] +
add ecx 4 +
mov eax [ecx] +
call dword ptr [eax+10h]  +
push dword ptr [ebp-20h]  +
mov esi [ebp+8] +
mov ecx [esi+30h] +
call sub_1009D7D  +
push dword ptr [ebp-20h]  +
mov ecx [esi+34h] +
call sub_1009D7D  +
mov dword ptr [ebp-28h] 1 +
and dword ptr [ebp-4] 0 +
call sub_1008BE9  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1008C55  +
mov eax [ebp-28h] +
call __SEH_epilog4  +
retn 20h  +
***
xor eax eax +
mov ecx [ebp+8] +
add ecx 14h +
call sub_100945B  +
retn   +
***
push 8  +
push offset dword_100E428  +
call __SEH_prolog4  +
mov esi [ebp+8] +
lea ecx [esi+14h] +
call sub_1009446  +
and dword ptr [ebp-4] 0 +
mov ecx [esi+30h] +
and dword ptr [ecx+8] 0 +
call sub_100822E  +
mov edi eax +
test edi edi +
jz loc_1008CB6  +
cmp edi [ebp+0Ch] +
jnz loc_1008CCD  +
push edi  +
mov ecx esi +
call sub_10085D1  +
test eax eax +
jz loc_1008CCD  +
push edi  +
mov ecx [esi+30h] +
call sub_10081F1  +
push edi  +
mov ecx [esi+34h] +
call sub_10081F1  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1008CD5  +
xor eax eax +
inc eax  +
call __SEH_epilog4  +
retn 8  +
***
mov ecx [esi+30h] +
jmp loc_1008C88  +
***
lea ecx [esi+14h] +
call sub_100945B  +
retn   +
***
push 1Ch  +
push offset dword_100E468  +
call __SEH_prolog4  +
mov edi [ebp+8] +
mov eax [edi+20h] +
cmp [ebp+0Ch] eax +
jbe loc_1008DEA  +
mov [ebp+0Ch] eax +
lea ecx [edi+14h] +
call sub_1009446  +
xor edx edx +
mov [ebp-28h] edx +
wait   +
mov [ebp-4] edx +
lea ecx [ebp+10h] +
mov [ebp-20h] ecx +
mov [ebp-1Ch] edx +
mov [ebp-24h] edx +
mov eax [ebp-1Ch] +
cmp eax [ebp+0Ch] +
jnb loc_1008F1D  +
imul eax eax +
mov esi [edi+1Ch] +
lea esi [eax+esi+208h] +
mov eax [esi] +
sub eax edx +
jz loc_1008E89  +
dec eax  +
jz loc_1008E73  +
dec eax  +
jz loc_1008E4A  +
dec eax  +
jz loc_1008E3A  +
mov [ebp-28h] edx +
jmp loc_1008F4F  +
push 8  +
pop eax  +
add ecx eax +
mov [ebp-20h] ecx +
fld  qword ptr [ecx-8] +
fstp  qword ptr [esi+8] +
jmp loc_1008E81  +
add ecx 4 +
mov [ebp-20h] ecx +
mov eax [ecx-4] +
mov [esi+8] eax +
add ecx 4 +
mov [ebp-20h] ecx +
mov eax [ecx-4] +
mov [esi+10h] eax +
cmp [esi+8] edx +
jnz loc_1008F12  +
mov [esi+10h] edx +
jmp loc_1008F12  +
push 4  +
pop eax  +
add ecx eax +
mov [ebp-20h] ecx +
mov ecx [ecx-4] +
mov [esi+8] ecx +
mov [esi+10h] eax +
jmp loc_1008F12  +
add ecx 4 +
mov [ebp-20h] ecx +
mov eax [ecx-4] +
mov [ebp-2Ch] eax +
cmp eax edx +
jz loc_1008F09  +
lea ebx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1008E9C  +
sub eax ebx +
mov ebx eax +
mov eax [edi+28h] +
cmp eax edx +
jz loc_1008F00  +
mov edi [ebp-24h] +
imul edi edi +
lea ecx [ebx+ebx+2] +
push ecx  +
lea ecx [edi+eax] +
call sub_100954F  +
test eax eax +
jz loc_1008EFB  +
mov eax [ebp+8] +
mov eax [eax+28h] +
mov eax [edi+eax] +
mov [esi+8] eax +
xor ecx ecx +
mov edx [ebp-24h] +
mov [eax+edx*2] cx +
push dword ptr [ebp-2Ch]  +
push offset aS  +
lea eax [ebx+1] +
push eax  +
push dword ptr [esi+8]  +
call sub_10051FD  +
add esp 10h +
mov [esi+10h] ebx +
xor edx edx +
mov edi [ebp+8] +
jmp loc_1008F0F  +
xor edx edx +
mov edi [ebp+8] +
mov dword ptr [esi+8] offset aLogCannotConve +
jmp loc_1008F12  +
mov [esi+8] edx +
mov [esi+10h] edx +
inc dword ptr [ebp-24h]  +
inc dword ptr [ebp-1Ch]  +
mov ecx [ebp-20h] +
jmp loc_1008E07  +
***
mov eax [ebp-1Ch] +
cmp eax [edi+20h] +
jnb loc_1008F42  +
imul eax eax +
mov ecx [edi+1Ch] +
lea eax [eax+ecx+208h] +
fldz   +
fstp  qword ptr [eax+8] +
mov [eax+10h] edx +
inc dword ptr [ebp-1Ch]  +
jmp loc_1008F1D  +
***
mov [ebp-20h] edx +
mov ecx edi +
call near ptr dword_1008CE0+3  +
mov [ebp-28h] eax +
wait   +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1008F68  +
mov eax [ebp-28h] +
call __SEH_epilog4  +
retn   +
***
lea ecx [edi+14h] +
call sub_100945B  +
retn   +
***
push 14h  +
push offset dword_100E488  +
call __SEH_prolog4  +
mov ebx [ebp+8] +
mov eax [ebx+20h] +
cmp [ebp+0Ch] eax +
jbe loc_1008F90  +
mov [ebp+0Ch] eax +
lea ecx [ebx+14h] +
call sub_1009446  +
xor esi esi +
mov [ebp-24h] esi +
wait   +
mov [ebp-4] esi +
lea ecx [ebp+10h] +
mov [ebp-20h] ecx +
mov [ebp-1Ch] esi +
mov eax [ebp-1Ch] +
cmp eax [ebp+0Ch] +
jnb loc_1009052  +
imul eax eax +
mov edx [ebx+1Ch] +
lea eax [eax+edx+208h] +
mov edx [eax] +
sub edx esi +
jz loc_100901F  +
dec edx  +
jz loc_100900F  +
dec edx  +
jz loc_1008FED  +
dec edx  +
jz loc_1008FDD  +
mov [ebp-24h] esi +
jmp loc_1009084  +
push 8  +
pop edx  +
add ecx edx +
mov [ebp-20h] ecx +
fld  qword ptr [ecx-8] +
fstp  qword ptr [eax+8] +
jmp loc_1009047  +
add ecx 4 +
mov [ebp-20h] ecx +
mov edx [ecx-4] +
mov [eax+8] edx +
add ecx 4 +
mov [ebp-20h] ecx +
mov edx [ecx-4] +
mov [eax+10h] edx +
cmp [eax+8] esi +
jnz loc_100904A  +
mov [eax+10h] esi +
jmp loc_100904A  +
push 4  +
pop edx  +
add ecx edx +
mov [ebp-20h] ecx +
mov edi [ecx-4] +
mov [eax+8] edi +
jmp loc_1009047  +
add ecx 4 +
mov [ebp-20h] ecx +
mov edx [ecx-4] +
mov [eax+8] edx +
cmp edx esi +
jz loc_1009045  +
lea edi [edx+2] +
mov si [edx] +
inc edx  +
inc edx  +
test si si +
jnz loc_1009032  +
sub edx edi +
sar edx 1 +
inc edx  +
xor esi esi +
jmp loc_1009047  +
xor edx edx +
mov [eax+10h] edx +
inc dword ptr [ebp-1Ch]  +
jmp loc_1008FAA  +
***
mov eax [ebp-1Ch] +
cmp eax [ebx+20h] +
jnb loc_1009077  +
imul eax eax +
mov ecx [ebx+1Ch] +
lea eax [eax+ecx+208h] +
fldz   +
fstp  qword ptr [eax+8] +
mov [eax+10h] esi +
inc dword ptr [ebp-1Ch]  +
jmp loc_1009052  +
***
mov [ebp-20h] esi +
mov ecx ebx +
call near ptr dword_1008CE0+3  +
mov [ebp-24h] eax +
wait   +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100909D  +
mov eax [ebp-24h] +
call __SEH_epilog4  +
retn   +
***
lea ecx [ebx+14h] +
call sub_100945B  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10021C4 +
mov dword ptr [esi+4] offset off_10021A4 +
mov dword ptr [ebp-4] 2 +
call sub_1008948  +
mov ecx [esi+34h] +
test ecx ecx +
jz loc_10090E3  +
push 1  +
call sub_100767B  +
mov ecx [esi+30h] +
and dword ptr [esi+34h] 0 +
test ecx ecx +
jz loc_10090F5  +
push 1  +
call sub_100767B  +
and dword ptr [esi+30h] 0 +
lea ecx [esi+3Ch] +
call sub_1004FEA  +
lea ecx [esi+14h] +
mov byte ptr [ebp-4] 0 +
call sub_100942A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+0Ch] +
call sub_100946E  +
call __EH_epilog3  +
retn   +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-24h] 0 +
jnz loc_100927D  +
mov ecx esi +
call sub_1007D02  +
lea ecx [esi+14h] +
call sub_100945B  +
cmp dword ptr [ebp-24h] 0 +
jnz locret_1009292  +
mov ecx esi +
call sub_1008948  +
retn   +
***
xor eax eax +
call __SEH_epilog4  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10090AB  +
test [ebp+arg_0] 1 +
jz loc_10093A7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10093C6  +
push 1  +
call sub_100938D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call sub_10071E0  +
test eax eax +
jz loc_1009421  +
push esi  +
push 54h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10093F7  +
mov ecx eax +
call sub_10087C1  +
mov esi eax +
jmp loc_10093F9  +
xor esi esi +
test esi esi +
jz loc_100941A  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1009124  +
test eax eax +
jnz loc_100941E  +
push 1  +
mov ecx esi +
call sub_100938D  +
xor eax eax +
jmp loc_1009420  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100943F  +
push eax  +
call dword_1012D5C  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz locret_1009455  +
push 0FFFFFFFFh  +
push eax  +
call dword_1012D58  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz locret_1009468  +
push eax  +
call dword_1012D54  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1009495  +
mov eax [esi+4] +
test eax eax +
jz loc_100948A  +
push eax  +
call dword_1012D68  +
and dword ptr [esi+4] 0 +
push dword ptr [esi]  +
call dword_1012D5C  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
test eax eax +
jnz loc_10094D9  +
mov edi [ebp+dwBytes] +
mov ebx edi +
test edi edi +
jnz loc_10094BA  +
mov ebx 1000h +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [esi] eax +
test eax eax +
jnz loc_10094D4  +
xor eax eax +
jmp loc_1009515  +
mov [esi+4] edi +
jmp loc_1009510  +
mov ebx [ebp+dwBytes] +
cmp [esi+4] ebx +
jnb loc_1009510  +
mov edi ds:GetProcessHeap +
push eax  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
push ebx  +
push 0  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov [esi] eax +
test eax eax +
jnz loc_100950D  +
and [esi+4] eax +
and [esi+8] eax +
jmp loc_10094D0  +
mov [esi+4] ebx +
mov eax [esi] +
mov [esi+8] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+dwBytes]  +
mov esi ecx +
call sub_100949C  +
test eax eax +
jz loc_1009543  +
push 0  +
mov ecx esi +
call sub_100949C  +
xor eax eax +
inc eax  +
jmp loc_1009545  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_1009567  +
push [ebp+dwBytes]  +
call sub_100949C  +
jmp loc_1009590  +
push edi  +
mov edi [ebp+dwBytes] +
cmp [esi+4] edi +
jnb loc_100958A  +
push edi  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapReAlloc  +
test eax eax +
jz loc_100958F  +
mov [esi] eax +
mov [esi+4] edi +
mov eax [esi] +
mov [esi+8] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push dword_1012D98  +
mov esi 80h +
push esi  +
push 3  +
push 0  +
push [ebp+arg_0]  +
mov edi ecx +
call dword_1012D6C  +
mov [edi] eax +
cmp eax 0FFFFFFFFh +
jz loc_10095CE  +
push eax  +
call dword_1012D5C  +
xor eax eax +
jmp loc_10095DC  +
call ds:GetLastError  +
sub eax 20h +
neg eax  +
sbb eax eax +
inc eax  +
mov ecx [ebp+arg_10] +
test ecx ecx +
jz loc_10095E5  +
mov [ecx] eax +
cmp [ebp+arg_8] 0 +
jz loc_10095F3  +
test eax eax +
jnz loc_10095F3  +
push 2  +
jmp loc_10095F5  +
push 4  +
mov ecx [ebp+arg_C] +
neg ecx  +
pop eax  +
push dword_1012D98  +
sbb ecx ecx +
and ecx 80000000h +
or ecx esi +
push ecx  +
push eax  +
mov eax [ebp+arg_4] +
neg eax  +
sbb eax eax +
and eax 3 +
push eax  +
push [ebp+arg_0]  +
call dword_1012D6C  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
mov [edi] eax +
pop edi  +
pop esi  +
mov eax ecx +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_100964E  +
push eax  +
call dword_1012D5C  +
or dword ptr [esi] 0FFFFFFFFh +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx]  +
call dword_1012D70  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push 2  +
push 0  +
mov esi ecx +
push 0  +
push dword ptr [esi]  +
call dword_1012D70  +
test eax eax +
jz loc_10096A1  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call dword_1012D74  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx] +
test eax eax +
jz loc_10096D2  +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
call ds:GetFileSizeEx  +
test eax eax +
jz loc_10096D2  +
mov eax [ebp+var_8] +
or eax [ebp+var_4] +
jnz loc_10096D2  +
inc eax  +
leave   +
retn   +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
xor ecx ecx +
mov [eax+10h] edx +
mov edx [ebp+arg_8] +
mov dword ptr [eax+4] 1 +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+14h] edx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+10h] +
push edi  +
mov edi [esi+4] +
test eax eax +
jz loc_100972F  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1009724  +
sub eax edx +
add edi eax +
mov eax [esi+14h] +
test eax eax +
jz loc_1009744  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1009739  +
sub eax edx +
add edi eax +
mov ecx [esi] +
mov eax [ecx] +
push 0  +
push edi  +
call dword ptr [eax+8]  +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
test eax eax +
jz loc_100975E  +
xor eax eax +
mov [esi+8] edi +
inc eax  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100942A  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword_1012D50  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [esi] eax +
pop esi  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100946E  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call dword_1012D60  +
mov [esi] eax +
test eax eax +
jnz loc_10097BA  +
xor eax eax +
jmp loc_10097D4  +
push eax  +
call dword_1012D64  +
mov [esi+4] eax +
test eax eax +
jnz loc_10097D1  +
mov ecx esi +
call sub_100946E  +
jmp loc_10097B6  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1009824  +
call sub_1009711  +
test eax eax +
jz loc_1009824  +
mov eax [esi+18h] +
mov byte ptr [eax] 0 +
mov eax [esi+10h] +
test eax eax +
jz loc_100981F  +
push eax  +
push dword ptr [esi+8]  +
push dword ptr [esi+18h]  +
call sub_1005073  +
mov eax [esi+10h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1009810  +
sub eax ecx +
add [esi+18h] eax +
mov [esi+0Ch] eax +
xor eax eax +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1009883  +
mov ecx [esi+18h] +
test ecx ecx +
jz loc_1009883  +
mov eax [esi+14h] +
test eax eax +
jz loc_1009864  +
push eax  +
push dword ptr [esi+8]  +
push ecx  +
call sub_1005073  +
mov eax [esi+14h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1009855  +
sub eax ecx +
add [esi+0Ch] eax +
add [esi+18h] eax +
mov ecx [esi] +
mov eax [ecx] +
push 0  +
push dword ptr [esi+0Ch]  +
call dword ptr [eax+8]  +
mov ecx [esi+0Ch] +
mov [esi+1Ch] eax +
mov [esi+8] ecx +
add ecx eax +
xor eax eax +
mov [esi+18h] ecx +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 0 +
jz loc_10098DD  +
mov eax [esi+18h] +
test eax eax +
jz loc_10098DD  +
lea ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_4]  +
push dword ptr [esi+8]  +
push eax  +
call sub_100514A  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
test eax eax +
jz loc_10098DF  +
mov edx [esi+18h] +
push ebx  +
mov ecx edx +
push edi  +
lea edi [ecx+1] +
mov bl [ecx] +
inc ecx  +
test bl bl +
jnz loc_10098C8  +
sub ecx edi +
add [esi+0Ch] ecx +
add edx ecx +
pop edi  +
mov [esi+18h] edx +
pop ebx  +
jmp loc_10098DF  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edx eax +
pop ecx  +
test edx edx +
jz loc_1009900  +
push edi  +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
pop edi  +
mov eax edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+8] 0 +
jnz loc_1009924  +
mov eax [esi+10h] +
test eax eax +
jz loc_1009924  +
push eax  +
call sub_100C20F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:_wcsicmp +
push offset aLog  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1009955  +
xor ecx ecx +
jmp loc_1009968  +
push offset aSuppress  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1009976  +
xor ecx ecx +
inc ecx  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1009971  +
mov [eax] ecx +
xor eax eax +
inc eax  +
jmp loc_1009978  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_100226C[esi*8]  +
push [ebp+arg_0]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10099AD  +
inc esi  +
cmp esi 7 +
jb loc_100998A  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_10099BD  +
mov ecx ds:dword_1002270[esi*8] +
mov [eax] ecx +
xor eax eax +
inc eax  +
jmp loc_10099A8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 0 +
jz loc_10099E0  +
dec eax  +
jz loc_10099DB  +
dec eax  +
dec eax  +
jnz loc_10099EE  +
xor eax eax +
inc eax  +
jmp loc_10099F0  +
xor eax eax +
inc eax  +
cmp [ebp+arg_0] 0 +
jz loc_10099F0  +
cmp [ebp+arg_0] eax +
jz loc_10099F0  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 0 +
jz loc_1009A4D  +
dec eax  +
jz loc_1009A40  +
dec eax  +
jz loc_1009A34  +
dec eax  +
jz loc_1009A29  +
dec eax  +
jz loc_1009A21  +
dec eax  +
jz loc_1009A19  +
xor eax eax +
jmp loc_1009A58  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_8] +
jmp loc_1009A2F  +
mov eax [ebp+arg_8] +
cmp eax [ebp+arg_0] +
jmp loc_1009A3A  +
mov eax [ebp+arg_8] +
cmp eax [ebp+arg_0] +
sbb eax eax +
inc eax  +
jmp loc_1009A58  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_8] +
sbb eax eax +
neg eax  +
jmp loc_1009A58  +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp ecx [ebp+arg_8] +
setnz al  +
jmp loc_1009A58  +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp ecx [ebp+arg_8] +
setz al  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
sub eax 0 +
jz loc_1009AC6  +
dec eax  +
jz loc_1009AB7  +
dec eax  +
jz loc_1009AAA  +
dec eax  +
jz loc_1009A97  +
dec eax  +
jz loc_1009A8A  +
dec eax  +
jnz loc_1009AA4  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 41h +
jmp loc_1009AD1  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 5 +
jmp loc_1009AD1  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 1 +
jz loc_1009AD3  +
xor eax eax +
pop ebp  +
retn 14h  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 41h +
jmp loc_1009AA2  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 44h +
jnp loc_1009AA4  +
jmp loc_1009AD3  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 44h +
jp loc_1009AA4  +
xor eax eax +
inc eax  +
jmp loc_1009AA6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
call sub_100C1ED  +
mov ecx [ebp+arg_4] +
sub ecx 0 +
jz loc_1009B05  +
dec ecx  +
jz loc_1009AFC  +
xor eax eax +
jmp loc_1009B05  +
xor ecx ecx +
test eax eax +
setz cl  +
mov eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
cmp [ebp+arg_0] 0 +
jnz loc_1009B23  +
xor eax eax +
jmp locret_1009BAE  +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push offset aUUU  +
push [ebp+arg_0]  +
xor esi esi +
inc esi  +
call swscanf_s  +
add esp 14h +
cmp eax 3 +
jz loc_1009B6D  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push offset aUUU_0  +
push [ebp+arg_0]  +
call swscanf_s  +
add esp 14h +
cmp eax 3 +
jz loc_1009B6D  +
xor eax eax +
jmp loc_1009BAD  +
push edi  +
xor eax eax +
cmp [ebp+pvtime] 0 +
lea edi [ebp+SystemTime] +
stos   +
stos   +
stos   +
stos   +
mov ax word ptr [ebp+var_4] +
mov [ebp+SystemTime.wYear] ax +
mov ax word ptr [ebp+var_8] +
mov [ebp+SystemTime.wMonth] ax +
mov ax word ptr [ebp+var_C] +
mov [ebp+SystemTime.wDay] ax +
pop edi  +
jz loc_1009BAB  +
push [ebp+pvtime]  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:SystemTimeToVariantTime  +
mov esi eax +
neg esi  +
sbb esi esi +
neg esi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
lea esi [ecx+0Ch] +
mov ecx esi +
call sub_10073AC  +
mov ecx esi +
pop esi  +
jmp sub_1004FEA  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1009BF2  +
mov ecx [esi+4] +
shl ecx 2 +
push ecx  +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
mov esi ecx +
shl eax 2 +
push eax  +
lea ecx [esi+0Ch] +
call sub_100954F  +
mov ebx eax +
test ebx ebx +
jz loc_1009C3F  +
mov eax [esi+4] +
cmp eax edi +
jnb loc_1009C37  +
mov ecx edi +
sub ecx eax +
shl ecx 2 +
push ecx  +
lea eax [ebx+eax*4] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
mov [esi+4] edi +
mov [esi] ebx +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi+8] +
sub eax 0 +
jz loc_1009C92  +
dec eax  +
jz loc_1009C83  +
dec eax  +
dec eax  +
jnz loc_1009CA1  +
lea eax [ebp+pvtime] +
push eax  +
push [ebp+arg_0]  +
call sub_1009B0E  +
test eax eax +
jz loc_1009CA1  +
fld  [ebp+pvtime] +
fstp  qword ptr [esi+10h] +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_0]  +
call ds:_wtoi  +
pop ecx  +
mov [esi+10h] eax +
jmp loc_1009C7B  +
push [ebp+arg_0]  +
call sub_100C267  +
mov [esi+10h] eax +
test eax eax +
jnz loc_1009C7B  +
xor eax eax +
jmp loc_1009C7E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push dword ptr [esi]  +
mov edi ecx +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
test eax eax +
jnz loc_1009CC8  +
xor eax eax +
jmp loc_1009D26  +
mov ecx [eax+208h] +
cmp ecx [esi+8] +
jnz loc_1009CC4  +
sub ecx 0 +
jz loc_1009D13  +
dec ecx  +
jz loc_1009CFE  +
dec ecx  +
dec ecx  +
jnz loc_1009CC4  +
fld  qword ptr [esi+10h] +
push ecx  +
push ecx  +
fstp  [esp+10h+var_14+4] +
push dword ptr [esi+4]  +
fld  qword ptr [eax+210h] +
push ecx  +
push ecx  +
mov ecx edi +
fstp  [esp+1Ch+var_20+4] +
call sub_1009A61  +
jmp loc_1009D26  +
push dword ptr [esi+10h]  +
mov ecx edi +
push dword ptr [esi+4]  +
push dword ptr [eax+210h]  +
call sub_10099F9  +
jmp loc_1009D26  +
push dword ptr [esi+10h]  +
mov ecx edi +
push dword ptr [esi+4]  +
push dword ptr [eax+210h]  +
call sub_1009ADD  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
xor eax eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov [esi+14h] eax +
mov [ebp-4] eax +
cmp [ebp+8] eax +
jnz loc_1009D5C  +
mov dword ptr [ebp+8] 64h +
push dword ptr [ebp+8]  +
mov ecx esi +
mov [esi+8] eax +
mov [esi+4] eax +
mov [esi] eax +
call sub_1009BF9  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
test ebx ebx +
jnz loc_1009D91  +
xor eax eax +
jmp loc_1009DE7  +
mov eax [esi+4] +
xor edx edx +
test eax eax +
jbe loc_1009DA8  +
mov ecx [esi] +
cmp [ecx] ebx +
jz loc_1009DC0  +
inc edx  +
add ecx 4 +
cmp edx eax +
jb loc_1009D9C  +
push edi  +
xor edi edi +
test eax eax +
jbe loc_1009DC8  +
mov ecx [esi] +
cmp dword ptr [ecx] 0 +
jz loc_1009DC5  +
inc edi  +
add ecx 4 +
cmp edi eax +
jb loc_1009DB1  +
jmp loc_1009DC8  +
xor eax eax +
inc eax  +
jmp loc_1009DE7  +
mov [ebp+arg_0] edi +
cmp edi eax +
jnz loc_1009DDB  +
inc eax  +
push eax  +
mov ecx esi +
call sub_1009BF9  +
test eax eax +
jnz loc_1009DDE  +
jmp loc_1009DE6  +
mov edi [ebp+arg_0] +
mov eax [esi] +
mov [eax+edi*4] ebx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 64h  +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_10022E8 +
call sub_1009D31  +
and dword ptr [esi+1Ch] 0 +
mov eax esi +
pop esi  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_1009E37  +
push esi  +
mov esi offset dword_100225C +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 64h  +
lea ecx [esi+4] +
call sub_1009D31  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_1009BB7  +
test [ebp+arg_0] 1 +
jz loc_1009E76  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-20h] 0 +
jnz locret_1009F54  +
test edi edi +
jz locret_1009F54  +
push edi  +
mov ecx [ebp-1Ch] +
call sub_1009908  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea esi [edi+4] +
and dword ptr [esi+8] 0 +
mov ebx ecx +
jmp loc_1009F7F  +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_1009CAA  +
test eax eax +
jz loc_1009F9F  +
mov ecx esi +
call sub_100822E  +
test eax eax +
jnz loc_1009F70  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1009F95  +
mov ecx [edi] +
mov [eax] ecx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_1009F98  +
***
call __EH_prolog3  +
push 1Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1009FD0  +
call sub_1009E41  +
jmp loc_1009FD2  +
xor eax eax +
test eax eax +
jz loc_1009FD9  +
and dword ptr [eax] 0 +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea esi [edi+4] +
and dword ptr [esi+8] 0 +
mov ebx ecx +
jmp loc_100A002  +
push eax  +
mov ecx ebx +
call sub_1009908  +
mov ecx esi +
call sub_100822E  +
test eax eax +
jnz loc_1009FFA  +
mov ecx esi +
call sub_1009BD1  +
test edi edi +
jz loc_100A021  +
push 1  +
mov ecx edi +
call sub_1009E59  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
and dword ptr [esi+8] 0 +
jmp loc_100A044  +
push eax  +
mov ecx edi +
call sub_1009FE4  +
mov ecx esi +
call sub_100822E  +
test eax eax +
jnz loc_100A03C  +
mov ecx esi +
call sub_1009BD1  +
and dword ptr [edi+1Ch] 0 +
pop edi  +
pop esi  +
retn   +
***
call __SEH_prolog4  +
xor esi esi +
cmp [ebp-2Ch] esi +
jnz loc_100A21F  +
cmp [ebp-24h] esi +
jz loc_100A21F  +
push dword ptr [ebp-24h]  +
mov ecx [ebp-28h] +
call sub_1009FE4  +
cmp ebx esi +
jz loc_100A232  +
push ebx  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp-1Ch] esi +
jz loc_100A248  +
push dword ptr [ebp-1Ch]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp-20h] esi +
jz locret_100A25E  +
push dword ptr [ebp-20h]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
call __SEH_prolog4  +
mov esi ds:GetProcessHeap +
cmp [ebp-28h] ebx +
jz loc_100A474  +
push dword ptr [ebp-28h]  +
call ds:fclose  +
pop ecx  +
cmp [ebp-34h] ebx +
jnz loc_100A481  +
mov ecx [ebp-38h] +
call sub_100A02D  +
cmp [ebp-1Ch] ebx +
jz loc_100A493  +
push dword ptr [ebp-1Ch]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp [ebp-24h] ebx +
jz loc_100A4A5  +
push dword ptr [ebp-24h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp [ebp-20h] ebx +
jz locret_100A4B7  +
push dword ptr [ebp-20h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
push edi  +
lea edi [esi+4] +
and dword ptr [edi+8] 0 +
mov [ebp+var_4] eax +
jmp loc_100A4E9  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1009F5A  +
test eax eax +
jnz loc_100A4F4  +
mov ecx edi +
call sub_100822E  +
test eax eax +
jnz loc_100A4D6  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10022E8 +
and dword ptr [ebp-4] 0 +
call sub_100A02D  +
lea ecx [esi+4] +
call sub_1009BB7  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100A02D  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_100A264  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_100A4BD  +
xor ecx ecx +
test eax eax +
setnz cl  +
inc ecx  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100A502  +
test [ebp+arg_0] 1 +
jz loc_100A593  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jz loc_100A5BE  +
push dword ptr [ebp+0Ch]  +
push dword ptr [eax]  +
call sub_100A535  +
test eax eax +
jz loc_100A5BE  +
xor eax eax +
inc eax  +
jmp loc_100A5C0  +
xor eax eax +
pop ebp  +
retn 8  +
***
test ecx ecx +
jz locret_100A5D4  +
push 1  +
call sub_100A579  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_100A5F8  +
mov eax [ebp+arg_0] +
jb loc_100A5EF  +
cmp eax 0FFFFFFFFh +
ja loc_100A5F8  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100A603  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_100A626  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100A631  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_8] 0 +
push ebx  +
push esi  +
push edi  +
jbe loc_100A69A  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
add esi 8 +
mov eax [esi-8] +
mov ebx [esi+4] +
test eax eax +
jz loc_100A688  +
push dword ptr [esi]  +
mov edx [edi] +
push eax  +
mov ecx edi +
call dword ptr [edx+14h]  +
test eax eax +
jz loc_100A688  +
mov ecx [esi] +
push dword ptr [ecx]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+18h]  +
test eax eax +
jz loc_100A6A4  +
mov ecx [esi-4] +
cmp ecx [eax+208h] +
jmp loc_100A68A  +
test ebx ebx +
jnz loc_100A6A4  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add esi 10h +
cmp eax [ebp+arg_8] +
jb loc_100A656  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
xor eax eax +
jmp loc_100A69D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
xor ecx ecx +
mov edx [ebp+arg_0] +
cmp edx dword_10128D0[ecx*8] +
jz loc_100A6CA  +
inc ecx  +
cmp ecx 17h +
jb loc_100A6B6  +
jmp loc_100A6EC  +
mov eax off_10128D4[ecx*8] +
mov ecx eax +
push esi  +
lea esi [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jnz loc_100A6D7  +
mov edx [ebp+arg_4] +
sub ecx esi +
sar ecx 1 +
inc ecx  +
mov [edx] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx 9000000h +
cmp eax ecx +
ja loc_100A75C  +
jz loc_100A7C4  +
test eax eax +
jz loc_100A7D4  +
cmp eax 1000000h +
jz loc_100A749  +
cmp eax 2000000h +
jz loc_100A79D  +
cmp eax 3000000h +
jz loc_100A7AD  +
cmp eax 4000000h +
jz loc_100A7C4  +
cmp eax 5000000h +
jnz loc_100A786  +
mov eax offset aStatus +
jmp loc_100A7D9  +
mov ecx [ebp+arg_4] +
mov eax offset aFatalerror +
mov dword ptr [ecx] 0Bh +
jmp loc_100A7E2  +
cmp eax 65000000h +
jz loc_100A7D4  +
cmp eax 67000000h +
jz loc_100A7C4  +
cmp eax 68000000h +
jz loc_100A7BD  +
cmp eax 6A000000h +
jz loc_100A7AD  +
cmp eax 6B000000h +
jz loc_100A79D  +
cmp eax 70000000h +
jz loc_100A796  +
mov ecx [ebp+arg_4] +
mov eax offset aUndefined +
mov dword ptr [ecx] 0Ah +
jmp loc_100A7E2  +
mov eax offset aTrace +
jmp loc_100A7A2  +
mov eax offset aError +
mov ecx [ebp+arg_4] +
mov dword ptr [ecx] 6 +
jmp loc_100A7E2  +
mov eax offset aWarning +
mov ecx [ebp+arg_4] +
mov dword ptr [ecx] 8 +
jmp loc_100A7E2  +
mov eax offset aVerbose +
jmp loc_100A7B2  +
mov ecx [ebp+arg_4] +
mov eax offset aInfo +
mov dword ptr [ecx] 5 +
jmp loc_100A7E2  +
mov eax offset aAssert +
mov ecx [ebp+arg_4] +
mov dword ptr [ecx] 7 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 9000000h +
cmp ecx eax +
ja loc_100A82E  +
jz loc_100A82A  +
test ecx ecx +
jz loc_100A82A  +
cmp ecx 1000000h +
jz loc_100A82A  +
cmp ecx 2000000h +
jz loc_100A82A  +
cmp ecx 3000000h +
jz loc_100A82A  +
cmp ecx 4000000h +
jz loc_100A82A  +
cmp ecx 5000000h +
jnz loc_100A85E  +
xor ecx ecx +
jmp loc_100A865  +
cmp ecx 65000000h +
jz loc_100A862  +
cmp ecx 67000000h +
jz loc_100A862  +
cmp ecx 68000000h +
jz loc_100A862  +
cmp ecx 6A000000h +
jz loc_100A862  +
cmp ecx 6B000000h +
jz loc_100A862  +
cmp ecx 70000000h +
jz loc_100A862  +
xor eax eax +
jmp loc_100A871  +
xor ecx ecx +
inc ecx  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100A86E  +
mov [eax] ecx +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
xor ecx ecx +
xor eax eax +
test edx edx +
jz loc_100A8B9  +
cmp edx 1000000h +
jz loc_100A8B9  +
cmp edx 2000000h +
jz loc_100A8B9  +
cmp edx 9000000h +
jz loc_100A8B9  +
cmp edx 65000000h +
jz loc_100A8B2  +
cmp edx 6B000000h +
jnz loc_100A8BE  +
xor ecx ecx +
inc ecx  +
mov eax ecx +
jmp loc_100A8BE  +
xor eax eax +
xor ecx ecx +
inc eax  +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_100A8C7  +
mov [edx] ecx +
pop ebp  +
retn 8  +
***
mov eax ecx +
or dword ptr [eax+4] 0FFFFFFFFh +
and dword ptr [eax+0Ch] 0 +
mov dword ptr [eax] offset off_1002574 +
mov dword ptr [eax+8] 4000000h +
mov dword ptr [eax+10h] 1 +
retn   +
***
retn   +
***
mov edi edi +
push ecx  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp-4] eax +
cmp word_1012988 3Fh +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+0Ch] +
mov ebx ecx +
jnz loc_100A962  +
push 104h  +
lea eax [ebp-20Ch] +
push eax  +
call ds:GetWindowsDirectoryW  +
test eax eax +
jz loc_100A9C4  +
cmp eax 104h +
jnb loc_100A9C4  +
mov ax [ebp-20Ch] +
mov word_1012988 ax +
test esi esi +
jnz loc_100A96B  +
xor eax eax +
inc eax  +
jmp loc_100A9C6  +
mov eax [esi] +
test eax eax +
jz loc_100A9C4  +
mov edx [edi] +
lea ecx [ebp-210h] +
push ecx  +
push eax  +
mov ecx edi +
call dword ptr [edx+14h]  +
test eax eax +
jz loc_100A9C4  +
mov eax [ebp-210h] +
mov [ebx+4] eax +
mov edx [edi] +
push eax  +
mov ecx edi +
call dword ptr [edx+18h]  +
test eax eax +
jz loc_100A9C4  +
cmp dword ptr [eax+208h] 1 +
jnz loc_100A9C4  +
push 0  +
push dword ptr [esi+4]  +
call sub_100A7EB  +
test eax eax +
jz loc_100A9C4  +
mov eax [esi+4] +
mov [ebx+8] eax +
mov eax [esi+0Ch] +
mov [ebx+0Ch] eax +
mov eax [esi+8] +
mov [ebx+10h] eax +
jmp loc_100A966  +
***
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004835  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
cmp eax 0FFFFFFFFh +
jz loc_100AA29  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+18h]  +
mov edx [eax+210h] +
lea eax [ebp+arg_0] +
push eax  +
push edx  +
call sub_100A7EB  +
test eax eax +
jz loc_100AA2C  +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_100AA1A  +
cmp [esi+10h] eax +
jz loc_100AA29  +
push 2  +
pop eax  +
jmp loc_100AA2C  +
cmp [esi+0Ch] eax +
jz loc_100AA24  +
cmp edx [esi+8] +
jmp loc_100AA13  +
cmp edx [esi+8] +
jg loc_100AA15  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
or ecx 0FFFFFFFFh +
mov dword ptr [eax] offset off_10025C4 +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 50h +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_100AA7A  +
xor eax eax +
jmp loc_100AB01  +
mov edx [eax] +
push edi  +
lea edi [ecx+0Ch] +
mov [ebp-38h] edi +
mov edi [eax+4] +
mov [ebp-50h] edx +
mov [ebp-30h] edi +
lea edx [ecx+14h] +
lea edi [ecx+4] +
mov [ebp-48h] edx +
mov edx [eax+0Ch] +
mov [ebp-28h] edi +
mov edi [eax+10h] +
mov eax [eax+8] +
mov [ebp-20h] edi +
lea edi [ecx+10h] +
mov [ebp-40h] edx +
mov [ebp-10h] eax +
push 5  +
lea eax [ebp-50h] +
xor edx edx +
inc edx  +
mov [ebp-18h] edi +
mov edi [ebp+0Ch] +
push eax  +
add ecx 8 +
push edi  +
mov dword ptr [ebp-4Ch] 3 +
mov [ebp-44h] esi +
mov [ebp-3Ch] edx +
mov [ebp-34h] esi +
mov [ebp-2Ch] edx +
mov [ebp-24h] esi +
mov [ebp-1Ch] edx +
mov [ebp-14h] esi +
mov [ebp-0Ch] esi +
mov [ebp-8] ecx +
mov [ebp-4] edx +
call sub_100A63A  +
test eax eax +
jz loc_100AB00  +
mov eax [edi] +
push esi  +
push 4000h  +
mov ecx edi +
call dword ptr [eax]  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+lpWideCharStr] +
test eax eax +
jz locret_100ABAF  +
movzx edx word ptr [eax] +
push esi  +
mov ecx eax +
test dx dx +
jz loc_100AB3E  +
movzx edx dx +
mov esi 100h +
cmp dx si +
jnb loc_100AB3E  +
inc ecx  +
inc ecx  +
movzx edx word ptr [ecx] +
test dx dx +
jnz loc_100AB2A  +
cmp word ptr [ecx] 0 +
jnz loc_100AB48  +
xor eax eax +
jmp loc_100ABAE  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100AB4B  +
sub eax edx +
sar eax 1 +
lea esi [eax+1] +
mov [ebp+cchWideChar] esi +
imul esi esi +
push ebx  +
push edi  +
mov edi ds:GetProcessHeap +
push esi  +
push 0  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jz loc_100ABAA  +
push eax  +
push eax  +
push esi  +
push ebx  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push eax  +
push 0FDE9h  +
call ds:WideCharToMultiByte  +
test eax eax +
jg loc_100ABA5  +
push ebx  +
xor ebx ebx +
push ebx  +
call edi  +
push eax  +
call ds:HeapFree  +
mov byte ptr [esi+ebx-1] 0 +
pop edi  +
mov eax ebx +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1002154 +
and dword ptr [ebp-4] 0 +
lea edi [esi+8] +
mov ecx edi +
call sub_1009638  +
mov esi [esi+4] +
test esi esi +
jz loc_100ABF4  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx edi +
call sub_1009638  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov ecx [ebp+8] +
mov eax [ecx] +
push edi  +
lea edx [ebp-4] +
push edx  +
mov [ebp-4] edi +
call dword ptr [eax+0Ch]  +
mov ebx eax +
cmp ebx edi +
jz loc_100AC6C  +
cmp [ebp-4] edi +
jz loc_100AC6C  +
cmp [esi+0Ch] edi +
jz loc_100AC58  +
push 3  +
lea eax [ebp+8] +
push eax  +
lea ecx [esi+8] +
mov byte ptr [ebp+8] 0EFh +
mov byte ptr [ebp+9] 0BBh +
mov byte ptr [ebp+0Ah] 0BFh +
call sub_1009674  +
test eax eax +
jz loc_100AC6F  +
mov [esi+0Ch] edi +
push dword ptr [ebp-4]  +
lea ecx [esi+8] +
push ebx  +
call sub_1009674  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_100AC6F  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+10h]  +
push dword ptr [esi+8]  +
call ds:FlushFileBuffers  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax ecx +
or ecx 0FFFFFFFFh +
mov dword ptr [eax] offset off_1002618 +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
retn   +
***
xor eax eax +
inc eax  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 60h +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_100AD04  +
xor eax eax +
jmp loc_100AD99  +
mov edx [eax] +
push edi  +
lea edi [ecx+4] +
mov [ebp-58h] edi +
mov edi [eax+4] +
mov [ebp-50h] edi +
mov [ebp-60h] edx +
xor edx edx +
inc edx  +
lea edi [ecx+8] +
mov [ebp-48h] edi +
mov edi [eax+8] +
mov [ebp-5Ch] edx +
mov [ebp-44h] edx +
mov [ebp-40h] edi +
mov [ebp-2Ch] edx +
lea edi [ecx+0Ch] +
lea edx [ecx+10h] +
mov [ebp-38h] edi +
mov edi [eax+0Ch] +
mov [ebp-28h] edx +
mov edx [eax+10h] +
mov eax [eax+14h] +
mov [ebp-10h] eax +
push 6  +
lea eax [ebp-60h] +
mov [ebp-30h] edi +
mov edi [ebp+0Ch] +
mov [ebp-20h] edx +
lea edx [ecx+14h] +
push eax  +
add ecx 18h +
push edi  +
mov [ebp-54h] esi +
mov [ebp-4Ch] esi +
mov [ebp-3Ch] esi +
mov [ebp-34h] esi +
mov [ebp-24h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] edx +
mov [ebp-14h] esi +
mov [ebp-0Ch] esi +
mov [ebp-8] ecx +
mov [ebp-4] esi +
call sub_100A63A  +
test eax eax +
jz loc_100AD98  +
mov eax [edi] +
push esi  +
push 4000h  +
mov ecx edi +
call dword ptr [eax]  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 60h +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_100ADBC  +
xor eax eax +
jmp loc_100AE52  +
mov edx [eax] +
push edi  +
lea edi [ecx+4] +
mov [ebp-58h] edi +
mov edi [eax+4] +
mov [ebp-50h] edi +
mov [ebp-60h] edx +
xor edx edx +
inc edx  +
lea edi [ecx+8] +
mov [ebp-48h] edi +
mov edi [eax+8] +
mov [ebp-5Ch] edx +
mov [ebp-54h] edx +
mov [ebp-44h] edx +
mov [ebp-40h] edi +
mov [ebp-2Ch] edx +
lea edi [ecx+0Ch] +
lea edx [ecx+10h] +
mov [ebp-38h] edi +
mov edi [eax+0Ch] +
mov [ebp-28h] edx +
mov edx [eax+10h] +
mov eax [eax+14h] +
mov [ebp-10h] eax +
push 6  +
lea eax [ebp-60h] +
mov [ebp-30h] edi +
mov edi [ebp+0Ch] +
mov [ebp-20h] edx +
lea edx [ecx+14h] +
push eax  +
add ecx 18h +
push edi  +
mov [ebp-4Ch] esi +
mov [ebp-3Ch] esi +
mov [ebp-34h] esi +
mov [ebp-24h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] edx +
mov [ebp-14h] esi +
mov [ebp-0Ch] esi +
mov [ebp-8] ecx +
mov [ebp-4] esi +
call sub_100A63A  +
test eax eax +
jz loc_100AE51  +
mov eax [edi] +
push esi  +
push 4000h  +
mov ecx edi +
call dword ptr [eax+4]  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi ecx +
push dword ptr [edi+8]  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov ebx 208h +
add eax ebx +
cmp dword ptr [eax+8] 0 +
jnz loc_100AE84  +
xor eax eax +
jmp loc_100AED3  +
mov eax [eax+10h] +
mov [ebp+arg_0] eax +
mov eax [edi+4] +
cmp eax 0FFFFFFFFh +
jz loc_100AE80  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
mov eax [eax+210h] +
test eax eax +
jz loc_100AEAB  +
cmp eax 65000000h +
jnz loc_100AED0  +
push dword ptr [edi+0Ch]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
add eax ebx +
cmp dword ptr [eax+8] 0 +
jz loc_100AED0  +
lea ecx [ebp+arg_0] +
push ecx  +
push dword ptr [eax+10h]  +
push [ebp+arg_0]  +
call sub_100A60C  +
test eax eax +
jl loc_100AE80  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_100AEF0  +
xor eax eax +
jmp loc_100AF62  +
and [ebp+arg_0] 0 +
push esi  +
movzx esi word ptr [ebx] +
push edi  +
mov edi ebx +
jmp loc_100AF44  +
push 103h  +
push esi  +
call ds:iswctype  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100AF3C  +
push 5Fh  +
pop eax  +
cmp ax si +
jz loc_100AF3C  +
cmp [ebp+arg_0] 0 +
jbe loc_100AF67  +
push 4  +
push esi  +
call ds:iswctype  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100AF3C  +
push 2Dh  +
pop eax  +
cmp ax si +
jz loc_100AF3C  +
push 2Eh  +
pop eax  +
cmp ax si +
jnz loc_100AF67  +
inc edi  +
inc edi  +
inc [ebp+arg_0]  +
movzx esi word ptr [edi] +
test si si +
jnz loc_100AEFD  +
push 3  +
push offset aXml  +
push ebx  +
call ds:_wcsnicmp  +
add esp 0Ch +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_100AF60  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 0 +
jz loc_100AFA2  +
dec eax  +
jz loc_100AF9B  +
dec eax  +
jz loc_100AF94  +
dec eax  +
jz loc_100AF8D  +
mov eax offset word_1001AF2 +
jmp loc_100AFA7  +
mov eax offset aDatetime +
jmp loc_100AFA7  +
mov eax offset aHexbinary +
jmp loc_100AFA7  +
mov eax offset aInt +
jmp loc_100AFA7  +
mov eax offset aString +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push ebx  +
xor eax eax +
xor ebx ebx +
push esi  +
inc eax  +
push edi  +
mov [ebp+arg_4] ecx +
cmp ecx ebx +
jz loc_100B081  +
cmp [ecx] bx +
jz loc_100B081  +
mov edi [ebp+arg_0] +
mov esi offset aS_4 +
mov ecx [ebp+arg_4] +
movzx edx word ptr [ecx] +
mov ecx edx +
sub ecx 22h +
jz loc_100B056  +
sub ecx 4 +
jz loc_100B03E  +
dec ecx  +
jz loc_100B033  +
sub ecx 15h +
jz loc_100B01B  +
dec ecx  +
dec ecx  +
jz loc_100B010  +
test edi edi +
jz loc_100B00D  +
push edx  +
push offset aC_0  +
push edi  +
call sub_100988C  +
add esp 0Ch +
inc ebx  +
jmp loc_100B06C  +
test edi edi +
jz loc_100B02E  +
push offset aGt  +
jmp loc_100B024  +
test edi edi +
jz loc_100B02E  +
push offset aLt  +
push esi  +
push edi  +
call sub_100988C  +
add esp 0Ch +
add ebx 4 +
jmp loc_100B06C  +
test edi edi +
jz loc_100B069  +
push offset aApos  +
jmp loc_100B05F  +
test edi edi +
jz loc_100B051  +
push offset aAmp  +
push esi  +
push edi  +
call sub_100988C  +
add esp 0Ch +
add ebx 5 +
jmp loc_100B06C  +
test edi edi +
jz loc_100B069  +
push offset aQuot  +
push esi  +
push edi  +
call sub_100988C  +
add esp 0Ch +
add ebx 6 +
test eax eax +
jz loc_100B094  +
add [ebp+arg_4] 2 +
mov ecx [ebp+arg_4] +
cmp word ptr [ecx] 0 +
jnz loc_100AFDC  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100B08A  +
mov [eax] ebx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100B09D  +
mov [eax] ebx +
xor eax eax +
jmp loc_100B08D  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov dword ptr [esi] offset off_10020F4 +
test ecx ecx +
jz loc_100B0C3  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+8]  +
and dword ptr [esi+4] 0 +
mov eax [esi+8] +
test eax eax +
jz loc_100B0DE  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov ecx [ebp+lpMem] +
mov eax [ecx] +
xor edi edi +
push edi  +
lea edx [ebp+var_4] +
push edx  +
mov [ebp+var_10] esi +
mov [ebp+var_4] edi +
call dword ptr [eax+0Ch]  +
mov [ebp+lpMultiByteStr] eax +
cmp eax edi +
jz loc_100B225  +
cmp [ebp+var_4] edi +
jz loc_100B225  +
cmp [esi+4] edi +
jz loc_100B225  +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push eax  +
push edi  +
push edi  +
call ds:MultiByteToWideChar  +
mov [ebp+cchWideChar] eax +
cmp eax edi +
jnz loc_100B13F  +
xor eax eax +
jmp loc_100B228  +
mov ebx ds:GetProcessHeap +
add eax eax +
push eax  +
push edi  +
mov [ebp+var_C] eax +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
mov [ebp+lpMem] esi +
cmp esi edi +
jz loc_100B138  +
push [ebp+cchWideChar]  +
push esi  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push edi  +
push edi  +
call ds:MultiByteToWideChar  +
test eax eax +
jnz loc_100B180  +
push esi  +
push edi  +
call ebx  +
push eax  +
call ds:HeapFree  +
jmp loc_100B138  +
mov eax [ebp+var_C] +
lea eax [eax+esi-2] +
mov [ebp+var_1C] eax +
cmp esi eax +
jnb loc_100B21A  +
mov eax 0FFFFFF62h +
add esi 9Eh +
sub eax [ebp+lpMem] +
mov [ebp+var_18] eax +
jmp loc_100B1A8  +
mov eax [ebp+var_18] +
mov ecx [ebp+cchWideChar] +
add eax esi +
sar eax 1 +
sub ecx eax +
dec ecx  +
mov [ebp+var_C] edi +
mov [ebp+lpMultiByteStr] edi +
cmp ecx 4Fh +
jbe loc_100B1CF  +
movzx eax word ptr [esi] +
mov [ebp+lpMultiByteStr] eax +
xor eax eax +
mov [ebp+var_C] 1 +
mov [esi] ax +
lea eax [esi-9Eh] +
push eax  +
mov eax [ebp+var_10] +
mov ecx [eax+4] +
call sub_100C2DF  +
test eax eax +
jz loc_100B22F  +
cmp [ebp+var_C] 1 +
jnz loc_100B217  +
mov eax [ebp+var_10] +
mov ecx [eax+4] +
push offset asc_10026C4  +
call sub_100C2DF  +
test eax eax +
jz loc_100B22F  +
mov ax word ptr [ebp+lpMultiByteStr] +
mov [esi] ax +
add esi 9Eh +
lea eax [esi-9Eh] +
cmp eax [ebp+var_1C] +
jb loc_100B1A5  +
mov esi [ebp+lpMem] +
push esi  +
push edi  +
call ebx  +
push eax  +
call ds:HeapFree  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
push [ebp+lpMem]  +
jmp loc_100B174  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
push 0  +
push 0  +
call dword ptr [eax+4]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_100B276  +
push esi  +
mov esi offset dword_1002474 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_100B298  +
push esi  +
mov esi offset dword_1002484 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_100B2BA  +
push esi  +
mov esi offset dword_10024B4 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 244h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi ecx +
push dword ptr [edi+8]  +
xor ebx ebx +
mov ecx esi +
mov [ebp+var_228] edi +
mov [ebp+var_230] esi +
mov [ebp+var_234] ebx +
call dword ptr [eax+18h]  +
mov ecx [eax+210h] +
add eax 208h +
mov [ebp+var_224] ecx +
cmp ecx ebx +
jz loc_100B7B5  +
mov eax [eax+10h] +
push ecx  +
mov [ebp+var_218] eax +
call sub_100AB0B  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jz loc_100B343  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100B334  +
sub eax edx +
mov [ebp+var_218] eax +
mov eax [edi+14h] +
mov [ebp+var_22C] ebx +
cmp eax 0FFFFFFFFh +
jz loc_100B3F0  +
mov edx [esi] +
lea ecx [ebp+var_244] +
push ecx  +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
fld  qword ptr [eax+210h] +
push ecx  +
push ecx  +
fstp  [esp+264h+var_264] +
call ds:VariantTimeToSystemTime  +
movzx eax [ebp+var_238] +
push eax  +
movzx eax [ebp+var_23A] +
push eax  +
movzx eax [ebp+var_23C] +
push eax  +
movzx eax [ebp+var_23E] +
push eax  +
movzx eax word ptr [ebp+var_244+2] +
push eax  +
movzx eax word ptr [ebp+var_244] +
push eax  +
push offset aD02d02d02d02d0  +
lea eax [ebp+var_20C] +
push 104h  +
push eax  +
call sub_10051FD  +
lea eax [ebp+var_20C] +
add esp 24h +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100B3C7  +
sub eax ecx +
lea ecx [ebp+var_218] +
push ecx  +
sar eax 1 +
push eax  +
push [ebp+var_218]  +
call sub_100A60C  +
test eax eax +
jl loc_100B797  +
mov eax [edi+4] +
mov dword ptr [ebp+var_21C] offset aNoseverity +
cmp eax 0FFFFFFFFh +
jz loc_100B450  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
mov edx [eax+210h] +
lea eax [ebp+var_220] +
push eax  +
push edx  +
call sub_100A6F5  +
push ebx  +
push edx  +
mov dword ptr [ebp+var_21C] eax +
call sub_100A87A  +
mov [ebp+var_22C] eax +
lea eax [ebp+var_218] +
push eax  +
push [ebp+var_220]  +
push [ebp+var_218]  +
call sub_100A60C  +
test eax eax +
jl loc_100B797  +
mov eax [ebp+var_228] +
mov eax [eax+10h] +
mov edi offset dword_1002460 +
mov [ebp+var_210] ebx +
mov ebx edi +
cmp eax 0FFFFFFFFh +
jz loc_100B505  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
mov eax [eax+210h] +
mov [ebp+var_210] eax +
test eax 800000h +
jz loc_100B494  +
mov [ebp+var_22C] 1 +
and [ebp+var_220] 0 +
and eax 0FC000h +
jz loc_100B4FB  +
lea ecx [ebp+var_220] +
push ecx  +
push eax  +
call sub_100A6AD  +
mov ebx eax +
test ebx ebx +
jnz loc_100B4DB  +
lea eax [ebp+var_220] +
push eax  +
mov eax [ebp+var_210] +
and eax 0F0000h +
push eax  +
call sub_100A6AD  +
mov ebx eax +
test ebx ebx +
jnz loc_100B4DB  +
and [ebp+var_220] eax +
mov ebx edi +
lea eax [ebp+var_218] +
push eax  +
push [ebp+var_220]  +
push [ebp+var_218]  +
call sub_100A60C  +
test eax eax +
jl loc_100B797  +
and [ebp+var_210] 0FFFFFh +
lea eax [ebp+var_218] +
push eax  +
push 80h  +
push [ebp+var_218]  +
call sub_100A60C  +
test eax eax +
jl loc_100B797  +
mov eax [ebp+var_218] +
lea edx [ebp+var_218] +
push edx  +
xor ecx ecx +
push ecx  +
push eax  +
call sub_100A5DA  +
test eax eax +
jl loc_100B797  +
mov edi [ebp+var_218] +
mov eax [esi] +
push 0  +
push edi  +
mov ecx esi +
call dword ptr [eax+4]  +
mov esi eax +
test esi esi +
jz loc_100B797  +
test dword_1012D14 20000000h +
jz loc_100B5B1  +
cmp [ebp+lpMem] 0 +
lea eax [ebp+var_20C] +
jz loc_100B594  +
push [ebp+lpMem]  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s21s0x06xS  +
jmp loc_100B6DA  +
push [ebp+var_224]  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s21s0x06xS_0  +
jmp loc_100B6DA  +
mov eax [ebp+var_228] +
cmp dword ptr [eax+14h] 0FFFFFFFFh +
jz loc_100B658  +
test [ebp+var_210] 3FFFh +
lea eax [ebp+var_20C] +
jnz loc_100B60C  +
cmp [ebp+lpMem] 0 +
jz loc_100B5F4  +
push [ebp+lpMem]  +
push ebx  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s21s6sS  +
jmp loc_100B6DA  +
push [ebp+var_224]  +
push ebx  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s21s6sS_0  +
jmp loc_100B6DA  +
cmp [ebp+lpMem] 0 +
jz loc_100B630  +
push [ebp+lpMem]  +
push ebx  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s10s0x06x6sS  +
jmp loc_100B649  +
push [ebp+var_224]  +
push ebx  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s10s0x06x6_0  +
push edi  +
push esi  +
call sub_10051C2  +
add esp 20h +
jmp loc_100B6E4  +
test [ebp+var_210] 3FFFh +
jnz loc_100B69F  +
cmp [ebp+lpMem] 0 +
jz loc_100B681  +
push [ebp+lpMem]  +
push ebx  +
push dword ptr [ebp+var_21C]  +
push offset a21s6sS_0  +
jmp loc_100B693  +
push [ebp+var_224]  +
push ebx  +
push dword ptr [ebp+var_21C]  +
push offset a21s6sS  +
push edi  +
push esi  +
call sub_10051C2  +
add esp 18h +
jmp loc_100B6E4  +
cmp [ebp+lpMem] 0 +
jz loc_100B6C2  +
push [ebp+lpMem]  +
push ebx  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push offset a10s0x06x6sS  +
jmp loc_100B6DA  +
push [ebp+var_224]  +
push ebx  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push offset a10s0x06x6sS_0  +
push edi  +
push esi  +
call sub_10051C2  +
add esp 1Ch +
test eax eax +
jl loc_100B797  +
cmp [ebp+var_22C] 0 +
jz loc_100B74D  +
mov eax [ebp+var_228] +
mov eax [eax+0Ch] +
cmp eax 0FFFFFFFFh +
jz loc_100B74D  +
mov ecx [ebp+var_230] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+18h]  +
mov eax [eax+210h] +
test eax eax +
jnz loc_100B725  +
test [ebp+var_210] 800000h +
jz loc_100B74D  +
mov ecx esi +
lea ebx [ecx+1] +
mov dl [ecx] +
inc ecx  +
test dl dl +
jnz loc_100B72A  +
push eax  +
sub ecx ebx +
mov eax edi +
sub eax ecx +
push offset aGle0x_8x  +
push eax  +
add ecx esi +
push ecx  +
call sub_10051C2  +
add esp 10h +
test eax eax +
jl loc_100B797  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100B752  +
sub eax edx +
push offset asc_10026CC  +
sub edi eax +
push edi  +
add eax esi +
push eax  +
call sub_1005073  +
test eax eax +
jl loc_100B797  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_100B772  +
sub esi ecx +
mov ecx [ebp+var_230] +
mov eax [ecx] +
push 0  +
push esi  +
call dword ptr [eax+8]  +
test eax eax +
jz loc_100B797  +
mov [ebp+var_234] 1 +
cmp [ebp+lpMem] 0 +
jz loc_100B7B5  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_234] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004835  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
test edi edi +
jnz loc_100B7E9  +
xor eax eax +
jmp loc_100B8AA  +
mov eax [edi] +
test eax eax +
jz loc_100B7E2  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B7F2  +
sub eax edx +
sar eax 1 +
mov [ebp+8] eax +
jz loc_100B7E2  +
mov eax [esi+4] +
push ebx  +
mov ebx ds:GetProcessHeap +
test eax eax +
jz loc_100B81F  +
push eax  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+8] +
lea eax [eax+eax+2] +
push eax  +
push 0  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov [esi+4] eax +
test eax eax +
jnz loc_100B843  +
lea ecx [esi+8] +
call sub_1009638  +
jmp loc_100B88C  +
push dword ptr [edi]  +
mov ecx [ebp+8] +
inc ecx  +
push ecx  +
push eax  +
call sub_10050DB  +
test eax eax +
jl loc_100B88C  +
mov eax [edi+4] +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-4] +
push ecx  +
mov ecx eax +
and ecx 1 +
push ecx  +
and eax 2 +
push eax  +
push 1  +
push dword ptr [edi]  +
lea ebx [esi+8] +
mov ecx ebx +
call sub_100959A  +
test eax eax +
jz loc_100B88C  +
push 2  +
xor edi edi +
push edi  +
push edi  +
mov ecx ebx +
call sub_1009655  +
test eax eax +
jnz loc_100B890  +
xor eax eax +
jmp loc_100B8A9  +
mov ecx ebx +
call sub_10096AB  +
mov [esi+0Ch] eax +
xor eax eax +
cmp [ebp-4] edi +
setnz al  +
lea eax ds:1[eax*4] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+var_10] 0 +
cmp dword_10129A4 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jz loc_100BAA0  +
call ds:IsDebuggerPresent  +
test eax eax +
jz loc_100BAA0  +
mov esi [ebp+arg_0] +
push dword ptr [ebx+8]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
mov edi 208h +
add eax edi +
mov ecx [eax+8] +
mov [ebp+var_14] ecx +
test ecx ecx +
jnz loc_100B906  +
xor eax eax +
jmp loc_100BAA3  +
mov eax [eax+10h] +
mov [ebp+arg_0] eax +
mov eax [ebx+4] +
cmp eax 0FFFFFFFFh +
jz loc_100B979  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
mov edx [eax+210h] +
lea eax [ebp+var_C] +
push eax  +
push edx  +
call sub_100A6F5  +
mov [ebp+var_4] eax +
test edx edx +
jz loc_100B93B  +
cmp edx 65000000h +
jnz loc_100B964  +
push dword ptr [ebx+0Ch]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
add eax edi +
mov ecx [eax+8] +
mov [ebp+var_10] ecx +
test ecx ecx +
jz loc_100B964  +
lea ecx [ebp+arg_0] +
push ecx  +
push dword ptr [eax+10h]  +
push [ebp+arg_0]  +
call sub_100A60C  +
test eax eax +
jl loc_100B8FF  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [ebp+var_C]  +
push [ebp+arg_0]  +
call sub_100A60C  +
test eax eax +
jge loc_100B97D  +
jmp loc_100B8FF  +
and [ebp+var_4] 0 +
push dword ptr [ebx+18h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
push dword ptr [ebx+14h]  +
add eax edi +
mov [ebp+var_18] eax +
mov eax [eax+8] +
mov [ebp+var_8] eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
add eax edi +
mov ecx [eax+8] +
mov dword ptr [ebp+var_C] ecx +
test ecx ecx +
jz loc_100B9DF  +
lea ecx [ebp+arg_0] +
push ecx  +
push dword ptr [eax+10h]  +
push [ebp+arg_0]  +
call sub_100A60C  +
test eax eax +
jl loc_100B8FF  +
cmp [ebp+var_8] 0 +
jz loc_100B9DF  +
lea eax [ebp+arg_0] +
push eax  +
mov eax [ebp+var_18] +
push dword ptr [eax+10h]  +
push [ebp+arg_0]  +
call sub_100A60C  +
test eax eax +
jl loc_100B8FF  +
lea eax [ebp+arg_0] +
push eax  +
push 2000h  +
push [ebp+arg_0]  +
call sub_100A60C  +
test eax eax +
jl loc_100B8FF  +
mov eax [ebp+arg_0] +
lea edx [ebp+arg_0] +
push edx  +
xor ecx ecx +
push ecx  +
push eax  +
call sub_100A5DA  +
test eax eax +
jl loc_100B8FF  +
mov eax [esi] +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call dword ptr [eax+4]  +
mov edi eax +
test edi edi +
jz loc_100B8FF  +
mov byte ptr [edi] 0 +
push dword ptr [ebx+10h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
mov eax [eax+210h] +
xor ebx ebx +
cmp dword ptr [ebp+var_C] ebx +
jz loc_100BA65  +
cmp [ebp+var_8] ebx +
jz loc_100BAAA  +
push [ebp+var_8]  +
push eax  +
push dword ptr [ebp+var_C]  +
push offset aSDS  +
push [ebp+arg_0]  +
push edi  +
call sub_10051C2  +
add esp 18h +
test eax eax +
jl loc_100B8FF  +
push [ebp+var_14]  +
cmp [ebp+var_4] ebx +
jz loc_100BAD8  +
cmp [ebp+var_10] ebx +
jz loc_100BAC1  +
push [ebp+var_10]  +
push [ebp+var_4]  +
push edi  +
push offset aSSSS  +
push [ebp+arg_0]  +
push edi  +
call sub_10051C2  +
add esp 1Ch +
test eax eax +
jl loc_100B8FF  +
push edi  +
call ds:OutputDebugStringA  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
push 2  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
push eax  +
push dword ptr [ebp+var_C]  +
push offset aSD  +
push [ebp+arg_0]  +
push edi  +
call sub_10051C2  +
add esp 14h +
jmp loc_100BA5D  +
push [ebp+var_4]  +
push edi  +
push offset aS20sS  +
push [ebp+arg_0]  +
push edi  +
call sub_10051C2  +
add esp 18h +
jmp loc_100BA8A  +
push edi  +
push offset aSS_1  +
push [ebp+arg_0]  +
push edi  +
call sub_10051C2  +
add esp 14h +
jmp loc_100BA8A  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
or eax 0FFFFFFFFh +
mov edi 104h +
push edi  +
lea ebx [esi+1Ch] +
push ebx  +
push 0  +
mov dword ptr [esi] offset off_1002874 +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov [esi+14h] eax +
mov [esi+18h] eax +
call ds:GetModuleFileNameA  +
test eax eax +
jnz loc_100BB35  +
push offset aProgramNameUnk  +
push edi  +
push ebx  +
call sub_1005073  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_100BB6B  +
push esi  +
mov esi offset dword_10024C4 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+0Ch] +
mov eax [esi] +
push edi  +
mov ecx esi +
xor edi edi +
call dword ptr [eax+1Ch]  +
mov ebx eax +
test ebx ebx +
jbe loc_100BBA6  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+18h]  +
push eax  +
call sub_100AEDF  +
test eax eax +
jz loc_100BBB0  +
inc edi  +
cmp edi ebx +
jb loc_100BB8F  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
xor eax eax +
jmp loc_100BBA9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push offset aSElementtypeSS  +
push offset aXmlXmlnsSUuidB  +
push esi  +
lea ecx [ebp+var_20] +
call sub_10096DB  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+1Ch]  +
mov edi eax +
mov eax [esi] +
imul edi edi +
mov ecx esi +
xor ebx ebx +
call dword ptr [eax+1Ch]  +
mov [ebp+arg_4] eax +
test eax eax +
jbe loc_100BC17  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+18h]  +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100BC01  +
sub eax ecx +
sar eax 1 +
add edi eax +
inc ebx  +
cmp ebx [ebp+arg_4] +
jb loc_100BBF6  +
mov eax [ebp+var_1C] +
lea eax [eax+edi+1] +
lea ecx [ebp+var_20] +
mov [ebp+var_1C] eax +
call sub_10097DE  +
test eax eax +
jnz loc_100BC31  +
xor eax eax +
jmp loc_100BC80  +
mov eax [esi] +
mov ecx esi +
xor edi edi +
call dword ptr [eax+1Ch]  +
mov ebx eax +
test ebx ebx +
jbe loc_100BC72  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov ecx eax +
push dword ptr [ecx+208h]  +
call sub_100AF70  +
push eax  +
push edi  +
push ecx  +
lea eax [ebp+var_20] +
push offset aSAttributetype  +
push eax  +
call sub_100988C  +
add esp 14h +
test eax eax +
jz loc_100BC2D  +
inc edi  +
cmp edi ebx +
jb loc_100BC40  +
lea ecx [ebp+var_20] +
call sub_100982D  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+208h] +
sub eax 0 +
jz loc_100BCBF  +
dec eax  +
jz loc_100BCBB  +
dec eax  +
jz loc_100BCB1  +
dec eax  +
jz loc_100BCAC  +
xor eax eax +
jmp loc_100BCD3  +
push 13h  +
pop eax  +
jmp loc_100BCD3  +
mov eax [ecx+218h] +
add eax eax +
jmp loc_100BCD3  +
push 0Bh  +
jmp loc_100BCAE  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [ecx+210h]  +
push 0  +
call sub_100AFB0  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi+208h] +
push edi  +
xor edi edi +
sub eax edi +
jz loc_100BD9C  +
dec eax  +
jz loc_100BD84  +
dec eax  +
jz loc_100BD4B  +
dec eax  +
jnz loc_100BD80  +
fld  qword ptr [esi+210h] +
lea eax [ebp+SystemTime] +
push eax  +
push ecx  +
push ecx  +
fstp  [esp+24h+var_24] +
call ds:VariantTimeToSystemTime  +
movzx eax [ebp+SystemTime.wSecond] +
push eax  +
movzx eax [ebp+SystemTime.wMinute] +
push eax  +
movzx eax [ebp+SystemTime.wHour] +
push eax  +
movzx eax [ebp+SystemTime.wDay] +
push eax  +
movzx eax [ebp+SystemTime.wMonth] +
push eax  +
movzx eax [ebp+SystemTime.wYear] +
push eax  +
push offset aD02d02dt02d02d  +
push [ebp+vtime]  +
call sub_100988C  +
add esp 20h +
jmp loc_100BDAB  +
cmp [esi+218h] edi +
jbe loc_100BD7B  +
mov eax [esi+210h] +
movzx eax byte ptr [eax+edi] +
push eax  +
push offset a_2x  +
push [ebp+vtime]  +
call sub_100988C  +
add esp 0Ch +
test eax eax +
jz loc_100BD80  +
inc edi  +
cmp edi [esi+218h] +
jb loc_100BD53  +
xor eax eax +
inc eax  +
jmp loc_100BDAB  +
xor eax eax +
jmp loc_100BDAB  +
push dword ptr [esi+210h]  +
push offset aD_0  +
push [ebp+vtime]  +
call sub_100988C  +
add esp 0Ch +
jmp loc_100BDAB  +
push edi  +
push dword ptr [esi+210h]  +
push [ebp+vtime]  +
call sub_100AFB0  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push offset asc_1002A8C  +
push offset aZRow  +
push esi  +
lea ecx [ebp-28h] +
call sub_10096DB  +
mov eax [esi] +
mov ecx esi +
xor edi edi +
xor ebx ebx +
call dword ptr [eax+1Ch]  +
mov [ebp-8] eax +
test eax eax +
jbe loc_100BE1F  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov ecx eax +
mov [ebp+8] ecx +
lea edx [ecx+2] +
mov ax [ecx] +
inc ecx  +
inc ecx  +
test ax ax +
jnz loc_100BDF9  +
push dword ptr [ebp+8]  +
sub ecx edx +
sar ecx 1 +
mov [ebp-4] ecx +
call sub_100BC8C  +
add eax [ebp-4] +
inc ebx  +
lea edi [edi+eax+4] +
cmp ebx [ebp-8] +
jb loc_100BDE9  +
mov eax [ebp-24h] +
lea eax [eax+edi+1] +
lea ecx [ebp-28h] +
mov [ebp-24h] eax +
call sub_10097DE  +
test eax eax +
jnz loc_100BE39  +
xor eax eax +
jmp loc_100BE9F  +
mov eax [esi] +
mov ecx esi +
xor edi edi +
call dword ptr [eax+1Ch]  +
mov [ebp+8] eax +
test eax eax +
jbe loc_100BE91  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov ebx eax +
push ebx  +
lea eax [ebp-28h] +
push offset aS_3  +
push eax  +
call sub_100988C  +
add esp 0Ch +
test eax eax +
jz loc_100BE35  +
push ebx  +
lea eax [ebp-28h] +
push eax  +
call sub_100BCDC  +
test eax eax +
jz loc_100BE35  +
lea eax [ebp-28h] +
push offset asc_1002A78  +
push eax  +
call sub_100988C  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100BE35  +
inc edi  +
cmp edi [ebp+8] +
jb loc_100BE49  +
lea ecx [ebp-28h] +
call sub_100982D  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100BEC0  +
push dword ptr [ebp+8]  +
push 0  +
call sub_100BBB9  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
push ebx  +
cmp [ebp+0Ch] ebx +
jz loc_100BF11  +
mov esi [ebp+8] +
mov eax [esi] +
push 13h  +
mov ecx esi +
call dword ptr [eax+4]  +
push offset aRsDataXml  +
mov edi eax +
push 13h  +
push edi  +
call sub_1005073  +
test eax eax +
jl loc_100BF1A  +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_100BEFD  +
sub eax edx +
mov edx [esi] +
push ebx  +
push eax  +
mov ecx esi +
call dword ptr [edx+8]  +
jmp loc_100BF1A  +
mov ecx [ebp+8] +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+4]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2B0h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov ebx ecx +
test esi esi +
jz loc_100C02E  +
mov edi [esi] +
test edi edi +
jz loc_100C02E  +
cmp dword ptr [esi+4] 0 +
jz loc_100C02E  +
push 2ACh  +
lea eax [ebp-2B0h] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
cmp dword ptr [ebx+4] 0 +
jnz loc_100C02E  +
cmp dword ptr [ebx+8] 0 +
jnz loc_100C02E  +
mov eax edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100BF8E  +
sub eax ecx +
sar eax 1 +
lea edi [eax+eax+2] +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebx+8] eax +
test eax eax +
jz loc_100C02E  +
push dword ptr [esi]  +
push edi  +
push eax  +
call sub_100825A  +
mov edi 8007007Ah +
test eax eax +
jge loc_100BFCD  +
cmp eax edi +
jnz loc_100C02E  +
push dword ptr [esi]  +
lea eax [ebp-2ACh] +
push 41h  +
push eax  +
call sub_10050DB  +
test eax eax +
jge loc_100BFE5  +
cmp eax edi +
jnz loc_100C02E  +
push dword ptr [esi+4]  +
lea eax [ebp-22Ah] +
push 101h  +
push eax  +
call sub_10050DB  +
test eax eax +
jge loc_100C001  +
cmp eax edi +
jnz loc_100C02E  +
and dword ptr [ebp-2B0h] 0 +
and dword ptr [ebp-28h] 0 +
sub esp 2ACh +
mov edi esp +
mov ecx 0ABh +
lea esi [ebp-2B0h] +
movs   +
call sub_100C283  +
mov [ebx+4] eax +
xor eax eax +
inc eax  +
jmp loc_100C030  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004835  +
leave   +
retn 8  +
***
push esi  +
xor eax eax +
push eax  +
mov esi ecx +
push 2000h  +
push eax  +
mov dword ptr [esi] offset off_1002B18 +
mov [esi+4] eax +
call ds:HeapCreate  +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
mov dword ptr [ecx] offset off_1002B18 +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_100C083  +
push ecx  +
call ds:HeapDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100C06F  +
test byte ptr [ebp+8] 1 +
jz loc_100C0A3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 8  +
push hHeap  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jnz loc_100C0DE  +
xor eax eax +
inc eax  +
jmp loc_100C0EF  +
push [ebp+lpMem]  +
push 0  +
push hHeap  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100C119  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C107  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 2Ah +
jnz loc_100C140  +
cmp word ptr [esi+2] 0 +
jnz loc_100C140  +
xor eax eax +
inc eax  +
jmp loc_100C1E3  +
mov eax [ebp+arg_4] +
movzx eax word ptr [eax] +
push ebx  +
push edi  +
test ax ax +
jz loc_100C189  +
mov edi ds:towlower +
push eax  +
call edi  +
movzx ebx ax +
movzx eax word ptr [esi] +
push eax  +
mov [ebp+arg_0] ebx +
call edi  +
movzx eax ax +
pop ecx  +
pop ecx  +
cmp ax 2Ah +
jz loc_100C1A4  +
cmp ax 3Fh +
jz loc_100C178  +
cmp bx ax +
jnz loc_100C19E  +
inc esi  +
inc esi  +
add [ebp+arg_4] 2 +
mov eax [ebp+arg_4] +
movzx eax word ptr [eax] +
test ax ax +
jnz loc_100C153  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_100C1DE  +
cmp ax 2Ah +
jnz loc_100C19E  +
cmp word ptr [esi+2] 0 +
jz loc_100C1DE  +
xor eax eax +
jmp loc_100C1E1  +
mov esi eax +
lea eax [esi+2] +
cmp word ptr [eax] 2Ah +
jz loc_100C1A2  +
lea ebx [esi+2] +
movzx eax word ptr [ebx] +
push eax  +
call edi  +
movzx eax ax +
pop ecx  +
test ax ax +
jz loc_100C1DE  +
cmp ax word ptr [ebp+arg_0] +
jz loc_100C1CB  +
cmp ax 3Fh +
jnz loc_100C17A  +
push [ebp+arg_4]  +
mov esi ebx +
push esi  +
call sub_100C122  +
test eax eax +
jnz loc_100C1DE  +
dec esi  +
dec esi  +
jmp loc_100C17A  +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100C204  +
cmp [ebp+arg_4] 0 +
jz loc_100C204  +
pop ebp  +
jmp sub_100C122  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jz loc_100C220  +
pop ebp  +
jmp loc_100C0CE  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_100C238  +
xor eax eax +
jmp loc_100C25E  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_100C0F8  +
mov edi eax +
push edi  +
call sub_100C0AF  +
mov esi eax +
test esi esi +
jz loc_100C25A  +
push [ebp+arg_0]  +
push edi  +
push esi  +
call sub_100825A  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_100C278  +
xor eax eax +
pop ebp  +
retn 4  +
pop ebp  +
jmp loc_100C229  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2B0h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax 0ABh +
mov ecx eax +
lea esi [ebp+arg_0] +
lea edi [ebp+var_2B0] +
movs   +
and [ebp+var_2B0] 0 +
sub esp 2ACh +
mov ecx eax +
mov edi esp +
lea esi [ebp+var_2B0] +
movs   +
call sub_100C306  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1004835  +
leave   +
retn 2ACh  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
lea esi [ecx+8] +
sub esp 14h +
push 5  +
pop ecx  +
mov edi esp +
movs   +
call sub_100C835  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2B0h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov ecx 0ABh +
lea esi [ebp+arg_0] +
lea edi [ebp+var_2B0] +
push 1Ch  +
movs   +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100C348  +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1002B1C +
mov ebx eax +
jmp loc_100C34A  +
xor ebx ebx +
test ebx ebx +
jz loc_100C37B  +
mov eax [ebx] +
sub esp 2ACh +
mov edi esp +
mov ecx 0ABh +
lea esi [ebp+var_2B0] +
movs   +
mov ecx ebx +
call dword ptr [eax]  +
mov [ebx+4] eax +
test eax eax +
jnz loc_100C37B  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax+8]  +
xor ebx ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1004835  +
leave   +
retn 2ACh  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2B0h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
push edi  +
mov eax ecx +
mov ecx 0ABh +
lea esi [ebp+8] +
lea edi [ebp-2B0h] +
movs   +
lea ecx [ebp-2B0h] +
push ecx  +
add eax 8 +
push eax  +
call sub_100C4EE  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1004835  +
leave   +
retn 2ACh  +
***
add ecx 8 +
push ecx  +
call sub_100C6BD  +
retn   +
***
cmp dword ptr [ecx+4] 0 +
mov dword ptr [ecx] offset off_1002B1C +
jz locret_100C405  +
add ecx 8 +
push ecx  +
call sub_100C6BD  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100C3F0  +
test byte ptr [ebp+8] 1 +
jz loc_100C425  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
mov [ebp+var_1C] 1 +
xor esi esi +
mov [ebp+ms_exc.disabled] esi +
mov edi [ebp+arg_0] +
cmp edi esi +
jz loc_100C46D  +
push esi  +
push esi  +
push 3  +
push esi  +
push esi  +
push 0C0000000h  +
push offset FileName  +
call ds:CreateFileW  +
mov [edi] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100C47D  +
mov [ebp+var_1C] esi +
jmp loc_100C47D  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-1Ch] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn 4  +
***
call __SEH_prolog4  +
xor ecx ecx +
mov [ebp+ms_exc.disabled] ecx +
mov esi [ebp+arg_0] +
cmp esi ecx +
jnz loc_100C4B1  +
mov [ebp+var_1C] ecx +
jmp loc_100C4D7  +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_100C4AC  +
push eax  +
call ds:CloseHandle  +
mov [ebp+var_1C] eax +
cmp eax 1 +
jnz loc_100C4D7  +
or dword ptr [esi] 0FFFFFFFFh +
jmp loc_100C4D7  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-1Ch] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn 4  +
***
call __SEH_prolog4_GS  +
cmp [ebp-3Ch] esi +
jz loc_100C699  +
push dword ptr [ebp-3Ch]  +
call ds:LocalFree  +
cmp [ebp-34h] esi +
jnz locret_100C6B7  +
cmp dword ptr [ebp-38h] 0FFFFFFFFh +
jz locret_100C6B7  +
lea eax [ebp-38h] +
push eax  +
call sub_100C494  +
xor eax eax +
mov edi [ebp-40h] +
stos   +
stos   +
stos   +
stos   +
stos   +
retn   +
***
call __SEH_prolog4_GS  +
mov ebx [ebp+arg_0] +
xor edx edx +
mov [ebp+ms_exc.disabled] edx +
cmp ebx edx +
jz loc_100C728  +
cmp ebx 0FFFFFFFFh +
jz loc_100C728  +
mov ecx [ebx+10h] +
cmp ecx 0FFFFFFFFh +
jz loc_100C728  +
cmp ecx edx +
jz loc_100C728  +
xor eax eax +
lea edi [ebp+InBuffer] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov esi ebx +
lea edi [ebp+InBuffer] +
movs   +
movs   +
movs   +
movs   +
push edx  +
lea eax [ebp+BytesReturned] +
push eax  +
push edx  +
push edx  +
push 14h  +
lea eax [ebp+InBuffer] +
push eax  +
push 228008h  +
push ecx  +
call ds:DeviceIoControl  +
mov [ebp+var_34] eax +
lea eax [ebx+10h] +
push eax  +
call sub_100C494  +
xor eax eax +
mov edi ebx +
stos   +
stos   +
stos   +
stos   +
jmp loc_100C738  +
mov [ebp+var_34] edx +
jmp loc_100C738  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-34h] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_34] +
call __SEH_epilog4_GS  +
retn 4  +
***
call __SEH_prolog4_GS  +
test ebx ebx +
jz locret_100C82F  +
push ebx  +
call ds:LocalFree  +
retn   +
***
call __SEH_prolog4_GS  +
push 5  +
pop ecx  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_30] +
movs   +
mov esi [ebp+arg_14] +
and [ebp+ms_exc.disabled] 0 +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C858  +
sub eax edx +
sar eax 1 +
add eax eax +
jz loc_100C88A  +
push eax  +
push esi  +
sub esp 14h +
push 5  +
pop ecx  +
lea esi [ebp+var_30] +
mov edi esp +
movs   +
call sub_100C74F  +
mov [ebp+var_34] eax +
jmp loc_100C88E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and [ebp+var_34] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_34] +
call __SEH_epilog4_GS  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpSrc] +
push 104h  +
lea ecx [ebp+Dst] +
push ecx  +
push eax  +
call ds:off_1003C5C  +
lea eax [ebp+Dst] +
push eax  +
push 0  +
call ds:SHELL32_165  +
cmp eax 50h +
jz loc_100C8EB  +
cmp eax 0B7h +
jnz loc_100C8ED  +
xor eax eax +
test eax eax +
jnz loc_100C904  +
lea eax [ebp+Dst] +
push eax  +
push 300F000h  +
push 0  +
call sub_1005D7D  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1004835  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+lpName] +
push edi  +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
call ds:GetEnvironmentVariableW  +
test eax eax +
jz loc_100C997  +
xor edi edi +
push edi  +
push edi  +
call ds:GetLastError  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aIsenvironmentv  +
push offset aDW7rtmInetco_0  +
push 37h  +
push edi  +
push offset aD  +
push edi  +
push ebx  +
push offset aIeGcCommonIsen  +
push 4000000h  +
call sub_1003E85  +
add esp 0Ch +
push eax  +
call sub_1005595  +
xor eax eax +
inc eax  +
jmp loc_100CA20  +
push esi  +
mov esi ds:GetLastError +
call esi  +
xor edi edi +
push edi  +
mov [ebp+var_210] eax +
push edi  +
cmp eax 0CBh +
jnz loc_100C9E2  +
call esi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aIsenvironmentv  +
push offset aDW7rtmInetco_0  +
push 3Fh  +
push edi  +
push offset aD  +
push edi  +
push ebx  +
push offset aIeGcCommonIs_0  +
push 4000000h  +
call sub_1003E85  +
add esp 0Ch +
jmp loc_100CA17  +
call esi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aIsenvironmentv  +
push offset aDW7rtmInetco_0  +
push 43h  +
push edi  +
push offset aD  +
push edi  +
push [ebp+var_210]  +
push ebx  +
push offset aIeGcCommonIs_1  +
push 2000000h  +
call sub_1003E85  +
add esp 10h +
push eax  +
call sub_1005595  +
xor eax eax +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1004835  +
leave   +
retn 4  +
***
test eax eax +
jz loc_100CA55  +
push offset aInstaller_shad  +
call sub_100C921  +
test eax eax +
jz loc_100CA55  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
test eax eax +
jz loc_100CA7B  +
push offset aInstaller_shad  +
call sub_100C921  +
test eax eax +
jnz loc_100CA7B  +
inc eax  +
retn   +
xor eax eax +
retn   +
***
test eax eax +
jnz loc_100CAA3  +
push offset aInstaller_shad  +
call sub_100C921  +
test eax eax +
jz loc_100CAA3  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
test eax eax +
jnz loc_100CAC8  +
push offset aInstaller_shad  +
call sub_100C921  +
test eax eax +
jnz loc_100CAC8  +
retn   +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+lpName] +
push esi  +
push edi  +
mov edi ds:GetEnvironmentVariableW +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
call edi  +
xor esi esi +
mov [ebp+var_210] eax +
cmp eax esi +
jnz loc_100CB9C  +
mov edi ds:GetLastError +
call edi  +
push esi  +
mov [ebp+var_210] eax +
push esi  +
cmp eax 0CBh +
jnz loc_100CB5F  +
call edi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aDumpenvironmen  +
push offset aDW7rtmInetco_0  +
push 0BFh  +
push esi  +
push offset aD  +
push esi  +
push ebx  +
push offset aIeGcCommonDump  +
push 4000000h  +
call sub_1003E85  +
add esp 0Ch +
jmp loc_100CC95  +
call edi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aDumpenvironmen  +
push offset aDW7rtmInetco_0  +
push 0C2h  +
push esi  +
push offset aD  +
push esi  +
push [ebp+var_210]  +
push ebx  +
push offset aIeGcCommonDu_0  +
push 2000000h  +
call sub_1003E85  +
add esp 10h +
jmp loc_100CC95  +
cmp eax 104h +
jbe loc_100CC50  +
add eax eax +
push eax  +
call ds:malloc  +
pop ecx  +
mov [ebp+var_214] eax +
cmp eax esi +
jnz loc_100CBF0  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aDumpenvironmen  +
push offset aDW7rtmInetco_0  +
push 0CBh  +
push esi  +
push offset aD  +
push esi  +
push ebx  +
push offset aIeGcCommonDu_1  +
push 2000000h  +
jmp loc_100CB52  +
push [ebp+var_210]  +
push eax  +
push ebx  +
call edi  +
push esi  +
push esi  +
mov edi eax +
call ds:GetLastError  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aDumpenvironmen  +
push offset aDW7rtmInetco_0  +
push 0CFh  +
push esi  +
push offset aD  +
push esi  +
push edi  +
push [ebp+var_214]  +
push ebx  +
push offset aIeGcCommonDu_2  +
push 4000000h  +
call sub_1003E85  +
add esp 14h +
push eax  +
call sub_1005595  +
push [ebp+var_214]  +
call ds:__imp_free  +
pop ecx  +
jmp loc_100CC9B  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aDumpenvironmen  +
push offset aDW7rtmInetco_0  +
push 0D5h  +
push esi  +
push offset aD  +
push esi  +
push [ebp+var_210]  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
push offset aIeGcCommonDu_2  +
push 4000000h  +
call sub_1003E85  +
add esp 14h +
push eax  +
call sub_1005595  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004835  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:GetLastError +
push edi  +
xor edi edi +
push edi  +
push edi  +
call esi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aChecksinglearg  +
mov ebx offset aDW7rtmInetco_0 +
push ebx  +
push 0DDh  +
push edi  +
mov edi offset aD +
push edi  +
push 0  +
push dword ptr [ebp+Arguments]  +
push offset aIeGcCommonChec  +
push 4000000h  +
call sub_1003E85  +
add esp 0Ch +
push eax  +
call sub_1005595  +
xor eax eax +
push eax  +
push eax  +
mov [ebp+var_C] eax +
call esi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aChecksinglearg  +
push ebx  +
push 0E2h  +
push 0  +
push edi  +
push 0  +
call ds:GetCommandLineW  +
push eax  +
push offset aIeGcCommonCh_0  +
push 4000000h  +
call sub_1003E85  +
add esp 0Ch +
push eax  +
call sub_1005595  +
lea eax [ebp+pNumArgs] +
push eax  +
call ds:GetCommandLineW  +
push eax  +
call ds:CommandLineToArgvW  +
mov [ebp+hMem] eax +
xor eax eax +
push eax  +
push eax  +
cmp [ebp+hMem] eax +
jnz loc_100CD96  +
call esi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aChecksinglearg  +
push ebx  +
push 0E6h  +
push 0  +
push edi  +
push 0  +
push offset aIeGcCommonCh_1  +
push 2000000h  +
call sub_1003E85  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005595  +
xor eax eax +
jmp loc_100CEAA  +
cmp [ebp+pNumArgs] 1 +
jnz loc_100CDCB  +
call esi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aChecksinglearg  +
push ebx  +
push 0EDh  +
push 0  +
push edi  +
push 0  +
push offset aIeGcCommonCh_2  +
push 4000000h  +
call sub_1003E85  +
pop ecx  +
pop ecx  +
jmp loc_100CE60  +
cmp [ebp+pNumArgs] 2 +
jnz loc_100CE30  +
call esi  +
push eax  +
call sub_1004B17  +
push eax  +
mov eax [ebp+hMem] +
push offset aChecksinglearg  +
push ebx  +
push 0F1h  +
push 0  +
push edi  +
push 0  +
push dword ptr [eax+4]  +
push offset aIeGcCommonCh_3  +
push 4000000h  +
call sub_1003E85  +
add esp 0Ch +
push eax  +
call sub_1005595  +
mov eax [ebp+hMem] +
push 0FFFFFFFFh  +
push dword ptr [ebp+Arguments]  +
push 0FFFFFFFFh  +
push dword ptr [eax+4]  +
push 1  +
push 400h  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_100CE66  +
mov [ebp+var_C] 1 +
jmp loc_100CE66  +
call esi  +
push eax  +
call sub_1004B17  +
push eax  +
mov eax [ebp+pNumArgs] +
push offset aChecksinglearg  +
push ebx  +
push 0F9h  +
push 0  +
push edi  +
push 0  +
dec eax  +
push eax  +
push offset aIeGcCommonCh_4  +
push 2000000h  +
call sub_1003E85  +
add esp 0Ch +
push eax  +
call sub_1005595  +
push [ebp+hMem]  +
call ds:LocalFree  +
push 0  +
push 0  +
call esi  +
push eax  +
call sub_1004B17  +
push eax  +
push offset aChecksinglearg  +
push ebx  +
push 0FEh  +
push 0  +
push edi  +
push 0  +
push [ebp+var_C]  +
push offset aIeGcCommonCh_5  +
push 4000000h  +
call sub_1003E85  +
add esp 0Ch +
push eax  +
call sub_1005595  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 310h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
push edi  +
push eax  +
push offset aS_1  +
mov edi 104h +
lea eax [ebp-310h] +
xor ecx ecx +
push edi  +
push eax  +
mov [ebp-310h] cx +
call sub_10051FD  +
add esp 10h +
test eax eax +
jl loc_100CF82  +
push esi  +
xor esi esi +
push esi  +
push esi  +
push edi  +
lea eax [ebp-108h] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp-310h] +
push eax  +
push esi  +
push esi  +
call ds:WideCharToMultiByte  +
test eax eax +
jz loc_100CF81  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_1004B17  +
mov ecx [ebp+8] +
push eax  +
push offset aWdslog  +
push offset aDW7rtmInetco_0  +
push 11h  +
push esi  +
dec ecx  +
push offset aD  +
neg ecx  +
push esi  +
lea eax [ebp-108h] +
push eax  +
sbb ecx ecx +
mov eax 2000000h +
and ecx eax +
add ecx eax +
push ecx  +
call sub_1003E85  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005595  +
pop esi  +
mov ecx [ebp-4] +
xor ecx ebp +
pop edi  +
call sub_1004835  +
leave   +
retn 8  +
***
push offset aInstaller_shad  +
call sub_100CAD1  +
push offset aInstaller_wi_0  +
call sub_100CAD1  +
push offset aInstaller_sh_0  +
call sub_100CAD1  +
push offset aInstaller_wi_1  +
call sub_100CAD1  +
push offset aInstaller_sh_1  +
call sub_100CAD1  +
push offset aInstaller_wi_2  +
call sub_100CAD1  +
push offset aInstaller_sh_2  +
call sub_100CAD1  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
push offset aSerestoreprivi  +
lea ecx [ebp+var_1C] +
call sub_100D38F  +
xor ebx ebx +
push ebx  +
lea eax [ebp+hKey] +
push eax  +
mov eax [ebp+arg_8] +
push ebx  +
or eax 0F003Fh +
push eax  +
push 4  +
push ebx  +
push ebx  +
mov esi offset SubKey +
push esi  +
push 80000002h  +
call ds:RegCreateKeyExW  +
mov edi eax +
cmp edi ebx +
jz loc_100D043  +
push edi  +
push esi  +
push offset aSetieinstall_9  +
push 1  +
call sub_100D317  +
add esp 10h +
jmp loc_100D0AF  +
cmp [ebp+lpData] ebx +
jz loc_100D069  +
cmp [ebp+cbData] ebx +
jz loc_100D069  +
push [ebp+cbData]  +
mov esi offset ValueName +
push [ebp+lpData]  +
push 3  +
push ebx  +
push esi  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
mov edi eax +
jmp loc_100D091  +
mov esi offset ValueName +
push esi  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
mov edi eax +
cmp edi 2 +
jnz loc_100D091  +
push eax  +
push esi  +
push offset aSetieinstal_10  +
push ebx  +
call sub_100D317  +
add esp 10h +
xor edi edi +
cmp edi ebx +
jz loc_100D0A6  +
push edi  +
push esi  +
push offset aSetieinstal_11  +
push 1  +
call sub_100D317  +
add esp 10h +
push [ebp+hKey]  +
call ds:RegCloseKey  +
lea ecx [ebp+var_1C] +
call sub_100D434  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+cbData]  +
push [ebp+lpData]  +
call sub_100CFEC  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 100h  +
push [ebp+cbData]  +
push [ebp+lpData]  +
call sub_100CFEC  +
push 200h  +
push [ebp+cbData]  +
mov esi eax +
push [ebp+lpData]  +
call sub_100CFEC  +
test esi esi +
jz loc_100D10E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsWow64Process  +
test eax eax +
jnz loc_100D13A  +
and [ebp+var_4] eax +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push offset aSetieinstal_12  +
push 0  +
call sub_100D317  +
pop ecx  +
pop ecx  +
lea eax [ebp+Data] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
call sub_100D118  +
push offset ValueName  +
test eax eax +
jz loc_100D18D  +
push offset aSetieinstal_13  +
push 0  +
call sub_100D317  +
add esp 0Ch +
push 8  +
lea eax [ebp+Data] +
push eax  +
call sub_100D0E0  +
leave   +
retn   +
push offset aSetieinstal_14  +
push 0  +
call sub_100D317  +
add esp 0Ch +
push 8  +
lea eax [ebp+Data] +
push eax  +
call sub_100D0C5  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push offset aSetieinstal_15  +
xor esi esi +
push esi  +
call sub_100D317  +
pop ecx  +
pop ecx  +
call sub_100D118  +
push offset ValueName  +
test eax eax +
jz loc_100D1E5  +
push offset aSetieinstal_16  +
push esi  +
call sub_100D317  +
add esp 0Ch +
push esi  +
push esi  +
call sub_100D0E0  +
pop esi  +
retn   +
push offset aSetieinstal_17  +
push esi  +
call sub_100D317  +
add esp 0Ch +
push esi  +
push esi  +
call sub_100D0C5  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hKey] +
push ebx  +
mov ebx [ebp+lpSubKey] +
lea ecx [ebp+phkResult] +
push ecx  +
push ebx  +
push eax  +
call ds:RegOpenKeyW  +
test eax eax +
jnz loc_100D29C  +
push esi  +
push edi  +
push 5  +
pop ecx  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
mov esi offset aApartment +
lea edi [ebp+var_18] +
movs   +
lea eax [ebp+Type] +
push eax  +
xor edi edi +
push edi  +
mov esi offset aThreadingmodel +
push esi  +
push [ebp+phkResult]  +
mov [ebp+cbData] 3Ch +
mov [ebp+Type] edi +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100D291  +
lea eax [ebp+var_18] +
push eax  +
push esi  +
push ebx  +
push offset aIeappcompatLib  +
push edi  +
call sub_100D317  +
add esp 14h +
push 14h  +
pop eax  +
push eax  +
mov [ebp+cbData] eax +
lea eax [ebp+var_18] +
push eax  +
push 1  +
push edi  +
push esi  +
push [ebp+phkResult]  +
call ds:RegSetValueExW  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1004835  +
leave   +
retn 8  +
***
call sub_100D201  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100D2E0  +
push [ebp+arg_0]  +
call ds:EncodePointer  +
mov dword_1012DB4 eax +
jmp loc_100D2E7  +
and dword_1012DB4 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_100D308  +
cmp word ptr [eax] 25h +
jnz loc_100D306  +
push 24h  +
pop ecx  +
mov [eax] cx +
inc eax  +
inc eax  +
cmp word ptr [eax] 0 +
jnz loc_100D2FA  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101000C +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_1012DB4 0 +
jz loc_100D37E  +
xor eax eax +
mov word ptr [ebp+var_20C] ax +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_20C] +
push 104h  +
push eax  +
call sub_1005186  +
test eax eax +
jl loc_100D37E  +
lea eax [ebp+var_20C] +
push eax  +
call sub_100D2F0  +
push dword_1012DB4  +
call ds:DecodePointer  +
lea ecx [ebp+var_20C] +
push ecx  +
push [ebp+arg_0]  +
call eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1004835  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
push dword ptr [ebp+ReturnLength]  +
mov esi ecx +
xor ebx ebx +
push offset aIesetupLibCall  +
lea edi [esi+4] +
push ebx  +
mov [esi] bl +
mov [edi] ebx +
call sub_100D317  +
add esp 0Ch +
push edi  +
push 28h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_100D418  +
lea eax [ebp+NewState.Privileges] +
push eax  +
push dword ptr [ebp+ReturnLength]  +
push ebx  +
call ds:LookupPrivilegeValueW  +
test eax eax +
jz loc_100D411  +
lea eax [ebp+ReturnLength] +
push eax  +
lea eax [esi+8] +
push eax  +
push 10h  +
lea eax [ebp+NewState] +
push eax  +
push ebx  +
push dword ptr [edi]  +
mov [ebp+NewState.PrivilegeCount] 1 +
mov [ebp+NewState.Privileges.Attributes] 2 +
call ds:AdjustTokenPrivileges  +
test eax eax +
jz loc_100D40A  +
mov byte ptr [esi] 1 +
jmp loc_100D426  +
push offset aIesetupLibCadj  +
jmp loc_100D41D  +
push offset aIesetupLibCa_0  +
jmp loc_100D41D  +
push offset aIesetupLibCa_1  +
push 1  +
call sub_100D317  +
pop ecx  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi] bl +
jz loc_100D451  +
push ebx  +
push ebx  +
push ebx  +
lea eax [esi+8] +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
call ds:AdjustTokenPrivileges  +
mov eax [esi+4] +
cmp eax ebx +
jz loc_100D462  +
push eax  +
call ds:CloseHandle  +
mov [esi+4] ebx +
pop esi  +
pop ebx  +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101000C +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1004835  +
jmp __SEH_epilog4  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
jmp ds:_purecall  +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
dec [ebp+arg_8]  +
js loc_100D5DB  +
mov ecx [ebp+arg_0] +
sub ecx [ebp+arg_4] +
mov [ebp+arg_0] ecx +
call [ebp+arg_C]  +
jmp loc_100D59B  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_100D5D2  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
call ds:?terminate@@YAXXZ  +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 10h  +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-1Ch] 0 +
jnz $LN9  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100D58B  +
retn   +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-20h] 0 +
jnz $LN10_0  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100D58B  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_100D6F4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpDst] +
push esi  +
mov esi [ebp+nSize] +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jnz loc_100D744  +
push esi  +
push ebx  +
push [ebp+lpSrc]  +
call ds:ExpandEnvironmentStringsW  +
mov edi eax +
cmp edi esi +
jbe loc_100D740  +
test esi esi +
jz loc_100D73C  +
xor eax eax +
mov [ebx+esi*2-2] ax +
xor edi edi +
jmp loc_100D74E  +
test edi edi +
jnz loc_100D74E  +
push [ebp+lpSrc]  +
push esi  +
push ebx  +
call sub_10050DB  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+nSize]  +
push [ebp+lpDst]  +
push [ebp+lpSrc]  +
push 0  +
call sub_100D70B  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100D78F  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 18h  +
mov esi ecx +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_100D7F4  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_100D81C  +
mov eax 80070057h +
jmp loc_100D82D  +
cmp dword ptr [eax] 2Ch +
jnz loc_100D815  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_100D7B9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_100D850  +
cmp eax [ecx+4] +
jge loc_100D850  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_100D89F  +
mov eax 80070057h +
jmp loc_100D8E6  +
mov eax [esi] +
cmp eax edi +
jz loc_100D8E4  +
cmp eax 2Ch +
jnz loc_100D898  +
cmp [esi+24h] edi +
jle loc_100D8CF  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_100D836  +
movzx eax word ptr [eax] +
push [ebp+hInstance]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_100D8B3  +
pop ebx  +
lea ecx [esi+20h] +
call sub_100D77A  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_100D79E  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
adc eax offset DeleteCriticalSection +
lea ecx [esi+30h] +
pop esi  +
jmp sub_100D77A  +
***
or al dh +
add eax offset byte_1012DA9 +
add [ebx-3974FFDAh] eax +
pop esi  +
retn   +
***
push dword_1012DBC  +
mov esi ecx +
push esi  +
call sub_100D888  +
lea ecx [esi+20h] +
pop esi  +
jmp sub_100D77A  +
***
cmp byte ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_1003D08 +
jz locret_100DA5E  +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_100DA5E  +
push ecx  +
call ds:HeapDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_100DA99  +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jnz loc_100DAB7  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_100DAD8  +
cmp [ebp+0Ch] eax +
jnz loc_100DAC8  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_100DAD8  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100DA44  +
test byte ptr [ebp+8] 1 +
jz loc_100DB17  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_1003D1C +
xor ecx ecx +
mov dword ptr [eax+14h] 2 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] cx +
mov [eax+1Ah] cx +
mov [eax+8] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_100DB6D  +
cmp eax 0FFFFFFFFh +
jbe loc_100DB74  +
mov eax 80070057h +
jmp loc_100DB7B  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4]  +
***
ror byte ptr [ebp-0FBDEBBFh] cl +
xadd [eax] edx +
lea eax [ecx+8] +
retn   +
***
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1003D1C +
jz loc_100DBCD  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ecx +
jnb loc_100DBF4  +
mov eax 80070057h +
jmp loc_100DBFD  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
lea ecx [edx+eax] +
lea esi [ecx-1] +
cmp esi edx +
pop esi  +
jge loc_100DC22  +
mov eax [ebp+arg_8] +
jmp loc_100DC28  +
dec eax  +
not eax  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_100DC06  +
push dword ptr [ebp+0Ch]  +
mov edi eax +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_100DB59  +
test eax eax +
jl loc_100DC91  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push 10h  +
push eax  +
call sub_100DBD9  +
test eax eax +
jl loc_100DC91  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_100DC91  +
dec edi  +
and dword ptr [eax+4] 0 +
mov [eax] esi +
mov dword ptr [eax+0Ch] 1 +
mov [eax+8] edi +
jmp loc_100DC93  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_100DC06  +
push dword ptr [ebp+10h]  +
mov edi eax +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_100DB59  +
test eax eax +
jl loc_100DCF5  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push 10h  +
push eax  +
call sub_100DBD9  +
test eax eax +
jl loc_100DCF5  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_100DCF5  +
dec edi  +
mov [eax+8] edi +
jmp loc_100DCF7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
jmp ds:MiniDumpWriteDump  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push dword ptr [ebp-10h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
lea ecx [ebp-1Ch] +
jmp sub_1004FEA  +
***
jmp fword ptr [eax+41h]  +
***
push offset CriticalSection  +
call ds:DeleteCriticalSection  +
retn   +
***
mov ecx offset unk_1012DA8 +
jmp loc_1007A00  +
***
mov dword_1012DAC offset off_1002B18 +
test eax eax +
jz locret_100E05B  +
push eax  +
call ds:HeapDestroy  +
retn   +
***
mov ecx offset dword_1012E20 +
jmp sub_100DA44  +
***
mov dword_1012E2C offset off_1003D1C +
retn   +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756F3667h  +
***
inc ecx  +
ins  dx +
ins  dx +
outs   +
arpl [eax] ax +
retf   +
***
