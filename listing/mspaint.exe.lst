mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1002050  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
cmp ecx dword_108A1E0 +
jnz loc_106CCDF  +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_108A1E0 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_108A1E0 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_100207A  +
jmp sub_1002061  +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_100207A  +
jmp sub_1002061  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_108A1E0 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
test eax eax +
jz loc_10022A4  +
mov eax [eax+4] +
push eax  +
call ds:CreateCompatibleDC  +
push eax  +
mov ecx esi +
call ?Attach@CDC@@QAEHPAUHDC__@@@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10022CC  +
mov eax [eax+4] +
push eax  +
push dword ptr [ecx+4]  +
call ?SelectGdiObject@CDC@@KGPAVCGdiObject@@PAUHDC__@@PAX@Z  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push edi  +
xor eax eax +
lea edi [ebp+pvParam] +
stos   +
stos   +
push 0Ch  +
stos   +
pop eax  +
xor ebx ebx +
push ebx  +
lea ecx [ebp+pvParam] +
push ecx  +
push eax  +
push 42h  +
mov [ebp+pvParam] eax +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_100231B  +
test [ebp+var_8] 1 +
jnz loc_100233B  +
push esi  +
mov esi ds:GetSysColor +
push 5  +
call esi  +
push 2  +
mov edi eax +
call esi  +
pop esi  +
cmp edi ebx +
jz loc_100233B  +
cmp eax ebx +
jz loc_100233B  +
pop edi  +
mov al bl +
pop ebx  +
leave   +
retn   +
mov bl 1 +
jmp loc_1002335  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_108A1E0 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1002458 +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-20h] +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov dword ptr [ebp-4] 1 +
mov byte ptr [ebp-4] 0 +
call ?AfxTryCleanup@@YGXXZ  +
mov dword ptr [esi] offset off_10023C4 +
call sub_1002061  +
retn   +
***
retn   +
***
pop esp  +
retn   +
***
pop esp  +
retn   +
***
pop ebx  +
retn   +
***
pop ebx  +
retn   +
***
jmp near ptr dword_1003E94  +
mov eax ds:?messageMap@CFrameWnd@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+48h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+2Ch] eax +
pop ebp  +
retn 4  +
***
retf   +
***
retn   +
***
xor eax eax +
jmp loc_10087C6  +
xor eax eax +
jmp loc_10087B9  +
movs   +
movs   +
movs   +
movs   +
jmp loc_100880C  +
***
jmp ds:?OnActivateFrame@CView@@MAEXIPAVCFrameWnd@@@Z  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ?OnActivateView@CView@@MAEXHPAV1@0@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
cmp dword ptr [ecx+9Ch] 0 +
jz loc_1041087  +
xor eax eax +
inc eax  +
leave   +
retn 4  +
***
call ?AfxGetThread@@YGPAVCWinThread@@XZ  +
test eax eax +
jz loc_103DF4A  +
mov edx [eax] +
mov ecx eax +
jmp dword ptr [edx+7Ch]  +
***
xor eax eax +
cmp dword_108A230 eax +
jnz loc_10353DB  +
retn   +
***
xchg eax ebx +
retn   +
***
xchg eax ebx +
retn   +
***
push edx  +
retn   +
***
push edx  +
retn   +
***
push esi  +
retn   +
***
push esi  +
retn   +
***
push ebx  +
retn   +
***
push ebx  +
retn   +
***
pop edi  +
retn   +
***
pop edi  +
retn   +
***
xchg eax esp +
retn   +
***
xchg eax esp +
retn   +
***
xchg eax ebp +
retn   +
***
xchg eax ebp +
retn   +
***
xchg eax esi +
retn   +
***
xchg eax esi +
retn   +
***
xchg eax edi +
retn   +
***
xchg eax edi +
retn   +
***
cwde   +
retn   +
***
cwde   +
retn   +
***
cdq   +
retn   +
***
cdq   +
retn   +
***
wait   +
retn   +
***
wait   +
retn   +
***
pushf   +
retn   +
***
pushf   +
retn   +
***
pop edx  +
retn   +
***
pop edx  +
retn   +
***
pop ebp  +
retn   +
***
pop ebp  +
retn   +
***
pusha   +
retn   +
***
pusha   +
retn   +
***
lahf   +
retn   +
***
lahf   +
retn   +
***
pop esi  +
retn   +
***
pop esi  +
retn   +
***
xchg eax edx +
retn   +
***
xchg eax edx +
retn   +
***
movs   +
retn   +
***
movs   +
retn   +
***
retn   +
***
mov eax ds:?messageMap@CView@@1UAFX_MSGMAP@@B +
retn   +
***
mov eax ds:?messageMap@CWnd@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
mov eax ds:?messageMap@CWinApp@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
retn   +
***
lea eax [ecx-0C0h] +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+8] +
push eax  +
mov esi ecx +
lea eax [ebp-4] +
push eax  +
lea ecx [esi+24h] +
xor edi edi +
call sub_1005AF7  +
mov eax [ebp-4] +
cmp eax [esi+28h] +
jz loc_1005AE9  +
movzx edi word ptr [eax+10h] +
mov ax di +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_1005B38  +
mov esi [esi+4] +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_1006860  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_1006860  +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+15h] 0 +
jnz loc_1005B5C  +
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp [ecx+0Ch] edx +
jnb loc_1005B60  +
mov ecx [ecx+8] +
cmp byte ptr [ecx+15h] 0 +
jz loc_1005B4E  +
pop ebp  +
retn 4  +
mov eax ecx +
mov ecx [ecx] +
jmp loc_1005B56  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+24h] +
xor edi edi +
call sub_1005AF7  +
mov eax [ebp+var_4] +
cmp eax [esi+28h] +
jz loc_1005B92  +
mov edi [eax+10h] +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_1047E2B  +
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+8]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+80h] +
xor edi edi +
call sub_1005C53  +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jnb loc_1005C46  +
mov eax [esi+94h] +
mov edi [eax+ecx*4] +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edx [ecx+4] +
test edx edx +
jz loc_10180CB  +
mov eax [ecx+8] +
sub eax edx +
sar eax 5 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_108A204 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp eax [esi+2Ch] +
jnz loc_102E5ED  +
mov eax dword_108A200 +
cmp eax [esi+30h] +
jnz loc_102E5ED  +
cmp dword_108A1FC esi +
jnz loc_102E59D  +
xor eax eax +
mov dword_108A1FC esi +
inc eax  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1005D00  +
cmp ecx 7FFFFFFFh +
ja loc_1005D00  +
test eax eax +
jl loc_1005CFE  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1005D07  +
cmp eax esi +
ja loc_1005D07  +
jz loc_103D7BC  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
mov eax 80070057h +
jmp loc_1005CCA  +
mov ebx 8007007Ah +
jmp loc_103D7BC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
mov esi [ebp+lpRect] +
push edi  +
push dword ptr [esi+30h]  +
xor edi edi +
push dword ptr [esi+2Ch]  +
lea eax [ebp+rcSrc1] +
push edi  +
push edi  +
push eax  +
call ds:SetRect  +
cmp [ebp+lprcSrc2] edi +
jz loc_1005D4B  +
push [ebp+lprcSrc2]  +
lea eax [ebp+rcSrc1] +
push eax  +
push eax  +
call ds:IntersectRect  +
mov ebx [esi] +
cmp ebx edi +
jz loc_1005DAC  +
mov esi [ebp+lprcSrc2] +
neg esi  +
sbb esi esi +
lea eax [ebp+var_14] +
and esi eax +
mov [ebp+lpRect] esi +
mov eax [ebx+48h] +
mov [ebp+var_4] eax +
cmp [ebp+lprcSrc2] edi +
jz loc_1005D98  +
lea esi [ebp+rcSrc1] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
lea eax [ebp+var_14] +
push eax  +
mov ecx ebx +
movs   +
call sub_1008309  +
dec [ebp+var_14]  +
dec [ebp+var_10]  +
mov ecx ebx +
call sub_1005DB8  +
mov esi [ebp+lpRect] +
test eax eax +
jnz loc_103EF51  +
xor edi edi +
push edi  +
push esi  +
push dword ptr [ebx+20h]  +
call ds:InvalidateRect  +
mov ebx [ebp+var_4] +
cmp ebx edi +
jnz loc_1005D60  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
lea eax [ebp+rc] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetWindowRect  +
mov eax [ebp+rc.top] +
neg eax  +
push eax  +
mov eax [ebp+rc.left] +
neg eax  +
push eax  +
lea eax [ebp+rc] +
push eax  +
call ds:OffsetRect  +
push 1  +
lea eax [ebp+rc] +
push eax  +
mov ecx esi +
call ?CalcInsideRect@CStatusBar@@QBEXAAVCRect@@H@Z  +
mov eax [esi] +
lea ecx [ebp+var_24] +
push ecx  +
xor ebx ebx +
push ebx  +
push 407h  +
mov ecx esi +
call dword ptr [eax+0A8h]  +
mov edi [ebp+rc.right] +
sub edi [ebp+rc.left] +
mov [ebp+var_C] ebx +
add edi [ebp+var_1C] +
cmp [esi+5Ch] ebx +
jle loc_1005EE9  +
push ebx  +
mov ecx esi +
call ?GetPaneStyle@CStatusBar@@QBEIH@Z  +
test eax 8000000h +
jnz loc_1017136  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
mov ecx esi +
call ?GetPaneInfo@CStatusBar@@QBEXHAAI0AAH@Z  +
push 0FFFFFFFAh  +
pop eax  +
sub eax [ebp+var_10] +
sub eax [ebp+var_1C] +
add edi eax +
inc ebx  +
cmp ebx [esi+5Ch] +
jl loc_1005EB1  +
mov eax [esi+5Ch] +
xor ecx ecx +
push 4  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10067E4  +
mov ebx [esi+5Ch] +
mov [ebp+var_8] eax +
mov eax [ebp+rc.right] +
pop ecx  +
mov [ebp+var_4] eax +
dec ebx  +
js loc_101714F  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
mov ecx esi +
call ?GetPaneInfo@CStatusBar@@QBEXHAAI0AAH@Z  +
mov eax [esi+5Ch] +
dec eax  +
cmp ebx eax +
jnz loc_10178D6  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_8] +
mov [ecx+ebx*4] eax +
mov eax [ebp+var_4] +
sub eax [ebp+var_10] +
cmp eax [ebp+rc.left] +
mov eax [esi+94h] +
jl loc_101713E  +
mov dword ptr [eax+ebx*4] 1 +
push [ebp+var_4]  +
mov ecx esi +
push ebx  +
call sub_10171A0  +
push ebx  +
mov ecx esi +
call ?GetPaneStyle@CStatusBar@@QBEIH@Z  +
test eax 8000000h +
ja loc_1017147  +
push 0FFFFFFFAh  +
pop eax  +
sub eax [ebp+var_10] +
sub eax [ebp+var_1C] +
add [ebp+var_4] eax +
jmp loc_1005F0D  +
***
retn   +
***
retn   +
***
mov eax ds:?messageMap@CStatusBar@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
retn   +
***
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 25Bh +
push esi  +
jz loc_103FA5A  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
call ?IsIdleMessage@CWinThread@@UAEHPAUtagMSG@@@Z  +
cmp byte ptr [edi+1B4h] 0 +
jnz loc_10062CE  +
test eax eax +
jz loc_10062CE  +
mov edx [esi+4] +
cmp edx 100h +
jz loc_10062DF  +
cmp edx 101h +
jz loc_10062DF  +
cmp edx 113h +
jz loc_10062DF  +
mov ecx 0A0h +
cmp edx 200h +
jb loc_10062BE  +
cmp edx 209h +
jbe loc_1008433  +
cmp edx ecx +
jb loc_10062CE  +
cmp edx 0A9h +
jbe loc_1011B5A  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov byte ptr [edi+1B4h] 1 +
jmp loc_10062CE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+4] +
push edi  +
mov edi ecx +
cmp eax 101h +
jz loc_102D7E0  +
cmp eax 100h +
jz loc_102EB2F  +
push esi  +
mov ecx edi +
call ?PreTranslateMessage@CFrameWnd@@UAEHPAUtagMSG@@@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?OnIdleUpdateCmdUI@CFrameWnd@@IAEXXZ  +
cmp byte_108B114 0 +
jnz loc_1007474  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 3F8h +
pop ebp  +
jmp loc_100636C  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
xor edi edi +
call sub_100639D  +
mov eax [ebp+var_4] +
cmp eax [esi+4] +
jz loc_1006390  +
mov edi [eax+10h] +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_10063DE  +
mov esi [esi+4] +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_102DF14  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jl loc_102DF14  +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+1Dh] 0 +
jnz loc_1006402  +
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp [ecx+0Ch] edx +
jge loc_1006406  +
mov ecx [ecx+8] +
cmp byte ptr [ecx+1Dh] 0 +
jz loc_10063F4  +
pop ebp  +
retn 4  +
mov eax ecx +
mov ecx [ecx] +
jmp loc_10063FC  +
***
pop eax  +
retn   +
***
pop eax  +
retn   +
***
leave   +
retn   +
***
leave   +
retn   +
***
retf 0C3h  +
***
retf 0C3h  +
***
retf   +
***
retn   +
***
retf   +
***
retn   +
***
jmp ds:?OnCmdMsg@COleDocument@@MAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
cmp [ebp+0Ch] ebx +
jz loc_100661B  +
cmp dword ptr [ebp+0Ch] 0FFFFFFFFh +
jnz loc_1006564  +
cmp [ebp+10h] ebx +
jz loc_1006564  +
push edi  +
call sub_1006581  +
test eax eax +
jnz loc_100705A  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call ?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_108A234 +
nop   +
nop   +
nop   +
nop   +
nop   +
test eax eax +
jz loc_10065A1  +
mov ecx [eax+40h] +
cmp ecx [ebp+arg_0] +
jz loc_10065A1  +
mov eax [eax+44h] +
jmp loc_1006590  +
pop ebp  +
retn 4  +
***
retn   +
***
mov eax ds:?messageMap@COleServerDoc@@1UAFX_MSGMAP@@B +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
mov esi ecx +
test edi edi +
jz loc_10065DD  +
cmp edi 0FFFFFFFFh +
jnz loc_10065F9  +
cmp dword ptr [esi+48h] 0 +
jz loc_10065F9  +
push dword ptr [ebp+14h]  +
mov ecx [esi+48h] +
push dword ptr [ebp+10h]  +
mov eax [ecx] +
push edi  +
push dword ptr [ebp+8]  +
call dword ptr [eax+14h]  +
test eax eax +
jnz loc_1006662  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push edi  +
push dword ptr [ebp+8]  +
call ?OnCmdMsg@CView@@MAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov eax edi +
sub eax 1F40h +
jz loc_10070A0  +
dec eax  +
jz loc_1007092  +
dec eax  +
jz loc_1007084  +
dec eax  +
jz loc_1007076  +
push edi  +
call sub_1006581  +
cmp eax ebx +
jz loc_1006564  +
cmp [ebp+14h] ebx +
jnz loc_100665A  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+0A0h]  +
xor eax eax +
inc eax  +
jmp loc_1006575  +
***
xor eax eax +
inc eax  +
jmp loc_100660A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_108A244 +
sub esp 40h +
push ebx  +
mov ebx ds:IntersectRect +
push esi  +
mov esi ds:GetCursorPos +
push edi  +
mov edi ds:GetClientRect +
test ecx ecx +
jz loc_1006723  +
mov eax [ecx+40h] +
mov edx [eax+30h] +
mov eax [eax+2Ch] +
and [ebp+xLeft] 0 +
and dword ptr [ebp-1Ch] 0 +
mov [ebp-18h] eax +
lea eax [ebp+xLeft] +
push eax  +
mov [ebp-14h] edx +
call sub_1008309  +
lea eax [ebp+rc] +
push eax  +
mov eax dword_108A244 +
push dword ptr [eax+20h]  +
call edi  +
lea eax [ebp+xLeft] +
push eax  +
lea eax [ebp+rc] +
push eax  +
push eax  +
call ebx  +
lea eax [ebp+Point] +
push eax  +
call esi  +
mov eax [ebp+Point.x] +
mov [ebp+pt.x] eax +
mov eax [ebp+Point.y] +
mov [ebp+pt.y] eax +
lea eax [ebp+pt] +
push eax  +
mov eax dword_108A244 +
push dword ptr [eax+20h]  +
call ds:ScreenToClient  +
push [ebp+Point.y]  +
push [ebp+Point.x]  +
call sub_10084B4  +
cmp eax dword_108A244 +
jnz loc_100A195  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_100A195  +
cmp dword_108A21C 0 +
jnz loc_10356F1  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+238h] edi +
jnz loc_10417E8  +
cmp [ebp+arg_0] edi +
jz loc_100678E  +
call sub_100666C  +
push [ebp+arg_0]  +
mov ecx esi +
call ?OnIdle@CWinApp@@UAEHJ@Z  +
test eax eax +
jnz loc_1006785  +
cmp [ebp+arg_0] 4 +
jg loc_1006788  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
cmp [esi+218h] di +
jnz loc_10417F5  +
cmp [esi+434h] edi +
jz loc_100676C  +
jmp loc_1041806  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
cmp dword ptr [ebx+4] 100h +
push edi  +
mov edi ecx +
jz loc_102EB49  +
push ebx  +
mov ecx edi +
call ?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:malloc +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
test eax eax +
jz loc_1045908  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:free  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ecx+28h] eax +
pop ebp  +
retn 4  +
***
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
jmp loc_1005B26  +
***
xor edx edx +
cmps   +
jnz loc_1006D93  +
lea ecx [ebp-274h] +
call sub_10069B9  +
movzx esi word ptr [ebp-27Ch] +
mov eax [ebx] +
push 0  +
lea ecx [ebp-274h] +
push ecx  +
push 0FFFFFFFFh  +
push esi  +
mov ecx ebx +
mov dword ptr [ebp-4] 4 +
mov [ebp-270h] esi +
call dword ptr [eax+14h]  +
test eax eax +
jz loc_1006993  +
push dword ptr [ebp-284h]  +
push dword ptr [ebp-24Ch]  +
push offset dword_1006838  +
call sub_1006AC9  +
mov [ebp-278h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-240h] +
call ??1CString@@QAE@XZ  +
mov esi [ebp+10h] +
cmp dword ptr [esi+10h] 13h +
jz loc_101B614  +
cmp dword ptr [ebp-278h] 0 +
jl loc_1006BBC  +
mov eax [ebp-278h] +
call sub_100212D  +
retn 14h  +
***
mov eax [ebx] +
lea ecx [ebp-2A4h] +
push ecx  +
lea ecx [ebp-274h] +
push ecx  +
push 0  +
push esi  +
mov ecx ebx +
call dword ptr [eax+14h]  +
push dword ptr [ebp-284h]  +
push eax  +
jmp loc_100694C  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call ??0CCmdUI@@QAE@XZ  +
lea ecx [ebx+34h] +
mov dword ptr [ebx] offset off_1006A04 +
call ??0CString@@QAE@XZ  +
xor eax eax +
push 5  +
pop ecx  +
mov [ebx+2Ch] eax +
mov [ebx+30h] eax +
mov [ebx+38h] eax +
lea edi [ebx+3Ch] +
mov dword ptr [ebx+28h] 1 +
mov esi offset dword_100213C +
movs   +
pop edi  +
mov [ebx+50h] eax +
mov [ebx+54h] eax +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax [ecx+4] +
mov ecx [eax] +
push offset stru_1006AB4  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1006AE2  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push 0Bh  +
pop ecx  +
mov [eax] cx +
mov ecx [ebp+arg_0] +
neg ecx  +
sbb ecx ecx +
mov [eax+8] cx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx] +
xor edx edx +
cmp dword_108B190 edx +
setz dl  +
push edx  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+8] +
xor ebx ebx +
cmp [ecx+0A0h] ebx +
mov [ebp-4] ecx +
push edi  +
mov ecx esi +
jnz loc_10410F7  +
mov eax off_108A1D4 +
mov edi [eax+40h] +
mov eax [esi] +
push 1  +
call dword ptr [eax]  +
cmp edi 259h +
jz loc_1035C43  +
cmp edi 25Ah +
jz loc_1035C43  +
push ebx  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
cmp [esi+38h] ebx +
jnz loc_102E43A  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp dword ptr [ebp+8] 1 +
setz al  +
mov [ecx+2Ch] eax +
pop ebp  +
retn 4  +
***
mov esi [ebp+10h] +
cmp dword ptr [esi+10h] 200Dh +
jnz loc_1006985  +
jmp loc_1048AC8  +
***
mov esi [ebp+10h] +
push 4  +
pop ecx  +
mov edi offset dword_1006B2C +
xor edx edx +
cmps   +
jnz loc_1006CA2  +
mov ebx [ebx+24h] +
mov eax [ebx] +
lea ecx [ebp-0DCh] +
push ecx  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
call dword ptr [eax+4]  +
mov [ebp-0C8h] eax +
test eax eax +
jl loc_1006D22  +
mov eax [ebp-0D4h] +
and dword ptr [ebp-0C8h] 0 +
push 13h  +
pop ecx  +
mov [eax] cx +
mov ecx [ebp-0DCh] +
mov [eax+8] ecx +
jmp loc_1006D22  +
call sub_1002155  +
mov ecx [ebp+14h] +
mov eax [ebp+8] +
mov [ebp-0D0h] ecx +
mov ecx [ebp+18h] +
add eax 0FFFFFFE0h +
mov [ebp-0D4h] ecx +
mov ecx [eax+30h] +
mov [ebp-0E4h] eax +
mov eax [ecx] +
mov dword ptr [ebp-0C8h] 80004005h +
call dword ptr [eax+10h]  +
mov [ebp-0D8h] eax +
test eax eax +
jz loc_1006D22  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-0E4h] +
call sub_1005B6B  +
mov ebx eax +
test ebx ebx +
jz loc_1006D22  +
mov eax [ebp+10h] +
mov eax [eax+10h] +
cmp eax 13h +
jz loc_1006BD1  +
cmp eax 0Dh +
jz loc_100FE1B  +
cmp eax 0Bh +
jnz loc_100FEE0  +
mov esi [ebp+10h] +
push 4  +
pop ecx  +
mov edi offset dword_1006838 +
xor edx edx +
cmps   +
jnz loc_1006D30  +
cmp [ebx+28h] edx +
jz loc_1006D22  +
lea ecx [ebp-6Ch] +
call sub_10069B9  +
mov eax [ebx+28h] +
mov esi [ebp-0D8h] +
mov edx [esi] +
push 0  +
lea ecx [ebp-6Ch] +
push ecx  +
push 0FFFFFFFFh  +
push eax  +
mov ecx esi +
mov dword ptr [ebp-4] 6 +
mov [ebp-68h] eax +
call dword ptr [edx+14h]  +
test eax eax +
jz loc_1019D84  +
push dword ptr [ebp-0D4h]  +
push dword ptr [ebp-44h]  +
push offset dword_1006838  +
call sub_1006AC9  +
mov [ebp-0C8h] eax +
lea ecx [ebp-38h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ??1CString@@QAE@XZ  +
mov eax [ebp-0C8h] +
call sub_100212D  +
retn 14h  +
***
cmp eax 0Bh +
jnz loc_100FEE0  +
mov esi [ebp+10h] +
push 4  +
pop ecx  +
mov edi offset dword_1006E04 +
xor edx edx +
cmps   +
jnz loc_100FEE0  +
cmp [ebx+28h] edx +
jz loc_1006D22  +
lea ecx [ebp-6Ch] +
call sub_10069B9  +
mov ebx [ebx+28h] +
mov ecx [ebp-0D8h] +
mov eax [ecx] +
push 0  +
lea edx [ebp-6Ch] +
push edx  +
push 0FFFFFFFFh  +
push ebx  +
mov dword ptr [ebp-4] 7 +
mov [ebp-68h] ebx +
call dword ptr [eax+14h]  +
test eax eax +
jz loc_1006D16  +
push dword ptr [ebp-0D4h]  +
push dword ptr [ebp-40h]  +
push offset dword_1006E04  +
jmp loc_1006D0B  +
***
cmp eax 0Bh +
jnz loc_102E31D  +
mov esi [ebp+10h] +
push 4  +
pop ecx  +
mov edi offset dword_1006E04 +
xor edx edx +
cmps   +
jnz loc_102E31D  +
lea ecx [ebp-274h] +
call sub_10069B9  +
movzx eax word ptr [ebp-27Ch] +
mov edx [ebx] +
push 0  +
lea ecx [ebp-274h] +
push ecx  +
push 0FFFFFFFFh  +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-4] 5 +
mov [ebp-270h] eax +
call dword ptr [edx+14h]  +
test eax eax +
jz loc_100695C  +
push dword ptr [ebp-284h]  +
push dword ptr [ebp-248h]  +
push offset dword_1006E04  +
jmp loc_1006951  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
or dword ptr [esi] 0FFFFFFFFh +
cmp dword ptr [ebp+8] 5399h +
push edi  +
mov edi 80004005h +
jz loc_1007340  +
cmp dword ptr [ebp+8] 53FDh +
jnz loc_1006E69  +
mov ecx [ecx+4] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
test eax eax +
jz loc_1006E69  +
mov ecx eax +
call sub_1006E76  +
lea ecx [eax-2BDh] +
xor edi edi +
cmp ecx 63h +
jbe loc_1039803  +
***
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax off_108A1D4 +
mov eax [eax+40h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push offset off_108CF38  +
mov esi offset off_108CEAC +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov edi ecx +
mov [ebp-1] bl +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_100CC20  +
mov ecx [edi+8] +
mov [eax+8] ecx +
mov byte ptr [ebp-1] 1 +
mov al [ebp-1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov esi off_108A1D4 +
mov ecx [ebp+10h] +
mov eax [ecx] +
xor edx edx +
cmp edi [esi+40h] +
setz dl  +
push edx  +
call dword ptr [eax+4]  +
jmp loc_100665A  +
***
cmp [ebp+14h] ebx +
jz loc_103FBDC  +
jmp loc_100665A  +
***
cmp [ebp+14h] ebx +
jz loc_103FBE6  +
jmp loc_100665A  +
***
cmp [ebp+14h] ebx +
jz loc_103FBFC  +
jmp loc_100665A  +
***
cmp [ebp+14h] ebx +
jz loc_103FC01  +
jmp loc_100665A  +
***
mov eax offset off_1006FF0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push offset off_108CF94  +
mov esi offset off_108CEAC +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov edi ecx +
mov [ebp-1] bl +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_104177C  +
mov ecx [edi+8] +
mov [eax+8] ecx +
mov byte ptr [ebp-1] 1 +
mov al [ebp-1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+48h] +
xor eax eax +
test ecx ecx +
jz loc_1007136  +
mov edx off_108A1D4 +
mov edx [edx+40h] +
cmp edx 259h +
jz loc_1035C4A  +
cmp edx 25Ah +
jz loc_1035C4A  +
mov ecx [ebp+8] +
mov edx [ecx] +
push eax  +
call dword ptr [edx]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx] +
xor edx edx +
cmp dword_108A1F0 edx +
setnz dl  +
push edx  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+48h] +
xor eax eax +
test ecx ecx +
jz loc_1007180  +
call sub_1007636  +
neg eax  +
sbb eax eax +
inc eax  +
mov ecx [ebp+8] +
mov edx [ecx] +
push eax  +
call dword ptr [edx]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx] +
xor edx edx +
cmp dword_108AF10 edx +
setz dl  +
push edx  +
call dword ptr [eax+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx off_108A1D4 +
mov eax [ecx] +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi [edi] +
push 0Eh  +
call dword ptr [eax+68h]  +
movzx eax al +
push eax  +
mov ecx edi +
call dword ptr [esi]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx off_108A1D4 +
mov eax [ecx] +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi [edi] +
push 0Ch  +
call dword ptr [eax+68h]  +
movzx eax al +
push eax  +
mov ecx edi +
call dword ptr [esi]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi off_108A1D4 +
mov eax [esi] +
push 0Ch  +
mov ecx esi +
call dword ptr [eax+68h]  +
test al al +
jnz loc_10397EA  +
***
xor eax eax +
mov ecx [ebp+8] +
mov edx [ecx] +
push eax  +
call dword ptr [edx]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1007590  +
test eax eax +
jnz loc_10428E3  +
mov ecx dword_108BB94 +
xor eax eax +
cmp ecx dword_108BB84 +
setl al  +
test eax eax +
jz loc_100B126  +
mov ecx [ebp+8] +
mov edx [ecx] +
push eax  +
call dword ptr [edx]  +
pop esi  +
pop ebp  +
retn 4  +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
mov edi [ebp+8] +
mov esi [edi] +
add esi 4 +
call sub_10049D9  +
mov ecx eax +
add ecx 500h +
call sub_10077D5  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
mov ecx edi +
call dword ptr [esi]  +
mov eax [edi+38h] +
test eax eax +
jnz loc_1016A1C  +
call sub_1002061  +
retn 4  +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-14h] 2 +
mov dword ptr [ebp-18h] offset off_1006F8C +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 2Bh  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
mov ecx eax +
call sub_1005BE0  +
mov ecx [ebp+8] +
push dword ptr [ebp-10h]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
call sub_1002061  +
retn 4  +
***
mov ecx [ecx+4] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
test eax eax +
jz loc_1006E69  +
mov ecx eax +
call sub_1006E76  +
lea ecx [eax-28Bh] +
xor edi edi +
cmp ecx 31h +
ja loc_1006E69  +
add eax 0FFFFFD75h +
***
mov [esi] eax +
jmp loc_1006E69  +
***
jmp ds:?OnUpdateFileSendMail@CDocument@@IAEXPAVCCmdUI@@@Z  +
***
cmp dword ptr [ebp+8] 53FFh +
jnz loc_100742A  +
push 34h  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
and dword ptr [ebp-1Ch] 0 +
mov dword ptr [ebp-20h] 3 +
mov dword ptr [ebp-24h] offset off_1006E84 +
lea ecx [ebp-24h] +
push ecx  +
mov ecx eax +
mov dword ptr [ebp-4] 1 +
call sub_1005BE0  +
push 0  +
push dword ptr [ebp-1Ch]  +
jmp loc_100741F  +
push 18h  +
mov eax offset loc_107F215 +
call sub_100208C  +
mov ebx ecx +
mov esi [ebp+0Ch] +
or dword ptr [esi] 0FFFFFFFFh +
cmp dword ptr [ebp+8] 53FEh +
mov eax 80004005h +
jnz loc_100737F  +
push 33h  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov dword ptr [ebp-10h] 1 +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-18h] +
push ecx  +
mov ecx eax +
call sub_1005BE0  +
push 1  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_1007441  +
mov [esi] eax +
xor eax eax +
call sub_1002061  +
retn 8  +
***
mov eax 0C47Dh +
lea ecx [eax+32h] +
jmp loc_100745D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 0 +
jz loc_1007432  +
dec eax  +
jnz loc_1044751  +
mov eax 0C47Eh +
lea ecx [eax+32h] +
cmp [ebp+arg_4] 0 +
jz loc_100746C  +
add eax 0FFFF3B83h +
pop ebp  +
retn 8  +
lea eax [ecx-0C4AFh] +
jmp loc_1007468  +
***
mov ecx esi +
call sub_100748C  +
mov byte_108B114 0 +
jmp loc_1006347  +
***
call sub_100208C  +
xor ebx ebx +
mov [ebp-10h] ebx +
lea eax [ebp-10h] +
push eax  +
mov ecx offset unk_108B024 +
mov [ebp-4] ebx +
call sub_1006A9A  +
cmp [ebp-10h] ebx +
jz loc_1007546  +
call ds:GetFocus  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push ebx  +
push 1  +
mov [ebp-14h] eax +
mov eax [ebp-10h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [ebp-10h] +
mov ecx [eax] +
push offset dword_1006E04  +
push 4  +
pop edi  +
push edi  +
push ebx  +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [ebp-10h] +
mov ecx [eax] +
mov esi offset dword_1006B2C +
push esi  +
push edi  +
push 5399h  +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [ebp-10h] +
mov ecx [eax] +
push esi  +
push edi  +
push 53FDh  +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [ebp-10h] +
mov ecx [eax] +
push esi  +
push edi  +
push 53FFh  +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [ebp-10h] +
mov ecx [eax] +
push esi  +
push edi  +
push 53FEh  +
push eax  +
call dword ptr [ecx+24h]  +
cmp [ebp-14h] ebx +
jz loc_100753D  +
call sub_1006239  +
cmp eax ebx +
jnz loc_10410AD  +
mov eax [ebp-10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+28h]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1007557  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1007590  +
test eax eax +
jnz loc_1042694  +
mov ecx [ebp+8] +
mov eax [ecx] +
xor edx edx +
cmp dword_108BB94 edx +
setnle dl  +
push edx  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
call sub_1006239  +
neg eax  +
sbb eax eax +
neg eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+48h] +
xor eax eax +
test ecx ecx +
jz loc_10075B4  +
call sub_10075C5  +
mov ecx [ebp+8] +
mov edx [ecx] +
push eax  +
call dword ptr [edx]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 25Bh +
push esi  +
jz loc_103E661  +
mov eax [eax+40h] +
cmp eax 259h +
jz loc_1035C21  +
cmp eax 25Ah +
jz loc_1035C21  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+48h] +
xor eax eax +
test ecx ecx +
jz loc_1007624  +
call sub_10075C5  +
test eax eax +
jnz loc_1007624  +
mov ecx [esi+48h] +
call sub_1007636  +
mov ecx [ebp+8] +
mov edx [ecx] +
push eax  +
call dword ptr [edx]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx off_108A1D4 +
mov eax [ecx] +
push 6  +
call dword ptr [eax+68h]  +
movzx eax al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+48h] +
xor eax eax +
test ecx ecx +
jz loc_100765F  +
call sub_1007670  +
mov ecx [ebp+8] +
mov edx [ecx] +
push eax  +
call dword ptr [edx]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ds:IsClipboardFormatAvailable +
push edi  +
push 2  +
call esi  +
push 8  +
mov edi eax +
call esi  +
push 1  +
mov [ebp+var_4] eax +
call esi  +
push 3  +
mov ebx eax +
call esi  +
mov ecx off_108A1D4 +
mov edx eax +
xor eax eax +
cmp dword ptr [ecx+40h] 25Bh +
jz loc_103E649  +
cmp edi eax +
jz loc_100B105  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp-4] ecx +
call sub_10049D9  +
push eax  +
push offset off_1006FF0  +
call ?AfxDynamicDownCast@@YAPAVCObject@@PAUCRuntimeClass@@PAV1@@Z  +
pop ecx  +
mov esi eax +
pop ecx  +
mov ecx esi +
call sub_1006E76  +
mov ebx [ebp+8] +
add eax 0FFFFFD75h +
xor edi edi +
cmp eax 31h +
mov eax [ebx] +
mov ecx ebx +
jbe loc_100BBE9  +
push edi  +
call dword ptr [eax+4]  +
cmp [ebx+38h] edi +
jnz loc_1010048  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi [edi] +
call sub_1007745  +
push eax  +
mov ecx edi +
call dword ptr [esi]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push edi  +
mov edi ecx +
xor eax eax +
cmp [edi+48h] eax +
jz loc_1007786  +
cmp dword_108B190 eax +
jnz loc_1007786  +
push esi  +
mov esi [edi+40h] +
mov eax [esi+24h] +
cmp dword ptr [eax-8] 0 +
jnz loc_1007775  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+60h]  +
test eax eax +
jz loc_1012EC8  +
xor eax eax +
inc eax  +
cmp dword ptr [esi+0ECh] 0 +
jz loc_1012ED8  +
pop esi  +
pop edi  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
mov edi [ebp+8] +
mov esi [edi] +
add esi 4 +
call sub_10049D9  +
mov ecx eax +
add ecx 500h +
call sub_10077D5  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
mov ecx edi +
call dword ptr [esi]  +
mov eax [edi+38h] +
test eax eax +
jnz loc_10169CD  +
call sub_1002061  +
retn 4  +
***
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax 80000000h +
push 1  +
mov [esi+394h] eax +
mov [esi+390h] eax +
call sub_1005C20  +
push eax  +
push offset word_100219C  +
push 1  +
mov ecx esi +
call ?SetPaneText@CStatusBar@@QAEHHPBGH@Z  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
call sub_1008331  +
add esi 8 +
push esi  +
mov ecx edi +
call sub_1008331  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld1   +
push esi  +
mov esi ecx +
fcom  qword ptr [esi+50h] +
push edi  +
mov edi [ebp+arg_0] +
fnstsw  ax +
test ah 1 +
mov eax [esi+58h] +
jnz loc_1034BFD  +
add eax [edi] +
fstp  st +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fmul  qword ptr [esi+50h] +
fld  ds:dbl_1008390 +
fadd st(1) st +
fxch  st(1) +
call _ftol2_sse  +
mov [edi] eax +
mov eax [esi+5Ch] +
add eax [edi+4] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fmul  qword ptr [esi+50h] +
faddp st(1) st +
call _ftol2_sse  +
mov [edi+4] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld1   +
push esi  +
mov esi ecx +
fcom  qword ptr [esi+50h] +
push edi  +
mov edi [ebp+arg_0] +
fnstsw  ax +
test ah 41h +
mov eax [edi] +
jz loc_103FAC3  +
sub eax 5 +
fstp  st +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fdiv  qword ptr [esi+50h] +
fisub  dword ptr [esi+58h] +
call _ftol2_sse  +
mov [edi] eax +
mov eax [edi+4] +
sub eax 5 +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fdiv  qword ptr [esi+50h] +
fisub  dword ptr [esi+5Ch] +
call _ftol2_sse  +
mov [edi+4] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+lprc] +
mov esi ecx +
mov eax [esi+40h] +
push dword ptr [eax+30h]  +
push dword ptr [eax+2Ch]  +
push 0  +
push 0  +
push edi  +
call ds:SetRect  +
push edi  +
mov ecx esi +
call sub_1008309  +
cmp dword_108B18C 0 +
jnz loc_103FD86  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
cmp edx ecx +
jnz loc_10062DF  +
jmp loc_10062BE  +
***
mov ecx off_108A1D4 +
mov eax [ecx] +
push esi  +
call dword ptr [eax+88h]  +
mov esi eax +
xor eax eax +
test esi esi +
jz loc_1008477  +
cmp esi 7F00h +
jnb loc_1008480  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+0Ch] +
movzx ecx si +
push ecx  +
push eax  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
pop esi  +
retn   +
xor eax eax +
jmp loc_100846C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+78h] ebx +
jnz loc_100A2CA  +
cmp [ebp+arg_0] bl +
jnz loc_100BD63  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+Point.y]  +
push [ebp+Point.x]  +
call ds:WindowFromPoint  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
mov ebx off_108A1D4 +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
mov [ebp+var_4] edi +
mov [ebp+var_C] esi +
cmp [ebp+arg_0] esi +
jz loc_1009C40  +
cmp dword_108A24C edi +
jnz loc_1008556  +
cmp dword_108AF08 esi +
jnz loc_1008556  +
cmp dword_108AF0C esi +
jnz loc_1008556  +
cmp dword_108AF04 esi +
jnz loc_1008556  +
lea eax [ebp+rc] +
push eax  +
mov ecx edi +
call sub_10083F8  +
push 5  +
push 5  +
lea eax [ebp+rc] +
push eax  +
call ds:InflateRect  +
mov eax [edi+40h] +
mov [ebp+var_8] 0Ch +
cmp eax dword_108AF30 +
jz loc_1035BEA  +
push [ebp+var_8]  +
lea eax [ebp+rc] +
push eax  +
push [ebp+arg_0]  +
call sub_100857A  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+74h]  +
test eax eax +
jnz loc_103A02F  +
cmp [ebp+var_C] esi +
jnz loc_1009C66  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_100208C  +
xor edi edi +
cmp dword_108A27C edi +
jz loc_1016CFB  +
mov ecx [ebp+0Ch] +
mov eax [ecx+8] +
mov ebx [ecx] +
mov esi [ecx+0Ch] +
mov ecx [ecx+4] +
lea edx [eax-5] +
sub eax ebx +
inc eax  +
mov [ebp-18h] edx +
lea edx [esi-5] +
mov [ebp-1Ch] edx +
cdq   +
sub eax edx +
sar eax 1 +
lea eax [eax+ebx-2] +
mov [ebp-2Ch] eax +
mov eax esi +
sub eax ecx +
inc eax  +
cdq   +
sub eax edx +
sar eax 1 +
lea eax [eax+ecx-2] +
mov [ebp-34h] eax +
mov eax [ebp+10h] +
mov [ebp-10h] eax +
and dword ptr [ebp-10h] 2 +
jnz loc_10352F3  +
test al 10h +
jnz loc_10352FB  +
xor ebx ebx +
mov [ebp-20h] edi +
inc ebx  +
cmp [ebp-10h] edi +
jnz loc_1035306  +
mov [ebp-24h] edi +
test al 20h +
jnz loc_103530E  +
mov [ebp-14h] eax +
and dword ptr [ebp-14h] 8 +
jz loc_1008611  +
test al 1 +
jnz loc_1035316  +
mov [ebp-30h] edi +
test al 40h +
jnz loc_1035316  +
cmp [ebp-14h] edi +
jz loc_1016D05  +
test al 4 +
jz loc_1016D05  +
mov [ebp-28h] ebx +
lea ecx [ebp-44h] +
call ??0CDC@@QAE@XZ  +
mov esi [ebp+8] +
push esi  +
lea ecx [ebp-44h] +
mov [ebp-4] edi +
call sub_1002292  +
test eax eax +
jz sub_1043385  +
mov eax [esi] +
push 555555h  +
mov ecx esi +
call dword ptr [eax+38h]  +
mov ebx [esi] +
push 5  +
call ds:GetSysColor  +
push eax  +
mov ecx esi +
call dword ptr [ebx+34h]  +
push offset off_108A2F0  +
lea ecx [ebp-44h] +
call sub_10022BD  +
cmp [ebp-20h] edi +
mov edi ds:BitBlt +
mov [ebp+8] eax +
mov ebx 0CC0020h +
jnz loc_103531E  +
xor eax eax +
cmp [ebp-10h] eax +
jnz loc_103533E  +
cmp [ebp-24h] eax +
jnz loc_103535E  +
test byte ptr [ebp+10h] 4 +
jz loc_10086C0  +
push ebx  +
push eax  +
push eax  +
push dword ptr [ebp-40h]  +
push 5  +
push 5  +
push dword ptr [ebp-34h]  +
push dword ptr [ebp-18h]  +
push dword ptr [esi+4]  +
call edi  +
xor eax eax +
cmp [ebp-28h] eax +
jz loc_10086DC  +
push ebx  +
push eax  +
push eax  +
push dword ptr [ebp-40h]  +
push 5  +
push 5  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-18h]  +
push dword ptr [esi+4]  +
call edi  +
xor eax eax +
cmp [ebp-14h] eax +
jz loc_10086F8  +
push ebx  +
push eax  +
push eax  +
push dword ptr [ebp-40h]  +
push 5  +
push 5  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [esi+4]  +
call edi  +
xor eax eax +
cmp [ebp-30h] eax +
jnz loc_103537E  +
test byte ptr [ebp+10h] 1 +
jnz loc_103539D  +
push dword ptr [ebp+8]  +
lea ecx [ebp-44h] +
call sub_10022BD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-44h] +
call ??1CDC@@UAE@XZ  +
call sub_1002061  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
call sub_100839D  +
add esi 8 +
push esi  +
mov ecx edi +
call sub_100839D  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ebx +
movs   +
movs   +
movs   +
movs   +
fld  qword ptr [ecx+50h] +
fld1   +
fadd st(1) st +
mov [ebp+var_4] ecx +
fxch  st(1) +
call _ftol2_sse  +
sub [ebx] eax +
mov esi [ebp+var_4] +
fld  qword ptr [esi+50h] +
fadd st st(1) +
call _ftol2_sse  +
sub [ebx+4] eax +
fld  qword ptr [esi+50h] +
fadd st st(1) +
call _ftol2_sse  +
add [ebx+8] eax +
fadd  qword ptr [esi+50h] +
call _ftol2_sse  +
add [ebx+0Ch] eax +
push ebx  +
mov ecx esi +
call sub_100872F  +
mov eax [ebx] +
test eax eax +
jl loc_1004683  +
mov [ebx] eax +
mov eax [ebx+4] +
test eax eax +
jl loc_100467C  +
mov ecx [ebx+8] +
mov [ebx+4] eax +
mov eax [esi+40h] +
mov eax [eax+2Ch] +
cmp eax ecx +
jl loc_10087D8  +
mov eax ecx +
mov ecx [ebx+0Ch] +
mov [ebx+8] eax +
mov eax [esi+40h] +
mov eax [eax+30h] +
cmp eax ecx +
jl loc_10087EA  +
mov eax ecx +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_C] +
mov [ebx+0Ch] eax +
test esi esi +
jnz loc_100468A  +
push [ebp+arg_C]  +
mov ecx [ebp+var_4] +
mov esi ebx +
movs   +
movs   +
movs   +
movs   +
call sub_1008309  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push dword ptr [eax+4]  +
call ds:CreateCompatibleBitmap  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
retn   +
***
call sub_10020DC  +
mov eax [ebp+14h] +
mov [ebp-0E8h] eax +
xor eax eax +
push 76h  +
xor ebx ebx +
mov [ebp-0D8h] ax +
lea eax [ebp-0D6h] +
push ebx  +
push eax  +
mov [ebp-0DCh] ecx +
call memset  +
add esp 0Ch +
xor eax eax +
push 9  +
mov [ebp-38h] ax +
pop ecx  +
lea edi [ebp-36h] +
stos   +
stos   +
xor eax eax +
push 9  +
mov [ebp-60h] ax +
pop ecx  +
lea edi [ebp-5Eh] +
stos   +
stos   +
mov eax dword_108B1D0 +
cmp eax ebx +
jnz loc_103D89A  +
push dword ptr [ebp+0Ch]  +
mov esi offset aD +
push esi  +
lea eax [ebp-38h] +
push 14h  +
push eax  +
call sub_1005CB4  +
add esp 10h +
cmp eax ebx +
jl loc_1008B1B  +
push dword ptr [ebp+10h]  +
lea eax [ebp-60h] +
push esi  +
push 14h  +
push eax  +
call sub_1005CB4  +
add esp 10h +
cmp eax ebx +
jl loc_1008B1B  +
mov eax [ebp-0DCh] +
mov esi [eax+0B4h] +
lea ecx [ebp-0E0h] +
call ??0CString@@QAE@XZ  +
lea eax [ebp-38h] +
mov [ebp-0FCh] eax +
mov eax [ebp-0E8h] +
mov [ebp-0F8h] eax +
lea eax [ebp-60h] +
push 0C3D2h  +
lea ecx [ebp-0E0h] +
mov [ebp-4] ebx +
mov [ebp-0F4h] eax +
mov dword ptr [ebp-0F0h] offset dword_1008B2C +
mov [ebp-0ECh] esi +
call ?LoadStringW@CString@@QAEHI@Z  +
lea eax [ebp-0FCh] +
push eax  +
push 3Ch  +
lea eax [ebp-0D8h] +
push eax  +
push ebx  +
push ebx  +
push dword ptr [ebp-0E0h]  +
push 2400h  +
call ds:FormatMessageW  +
test eax eax +
jbe loc_1008B0C  +
push dword ptr [ebp+8]  +
mov ecx [ebp-0DCh] +
call sub_1005C20  +
mov ecx [ebp-0DCh] +
push eax  +
lea eax [ebp-0D8h] +
push eax  +
push dword ptr [ebp+8]  +
call ?SetPaneText@CStatusBar@@QAEHHPBGH@Z  +
test eax eax +
jz loc_1008B25  +
xor eax eax +
xor ecx ecx +
cmp eax ebx +
setnl cl  +
mov ebx ecx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0E0h] +
call ??1CString@@QAE@XZ  +
mov eax ebx +
call sub_1002119  +
retn 10h  +
mov eax 80004005h +
jmp loc_1008B03  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
fldz   +
and [ebp+var_8] 0 +
push ebx  +
fstp  [ebp+var_18] +
push edi  +
mov edi ecx +
push dword ptr [edi+6DCh]  +
lea ebx [edi+6C0h] +
mov ecx ebx +
mov [ebp+var_1] 0 +
call ?FindIndex@CObList@@QBEPAU__POSITION@@H@Z  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_1008BCF  +
push esi  +
inc [ebp+var_8]  +
mov [ebp+var_10] eax +
lea eax [ebp+var_C] +
push eax  +
mov ecx ebx +
call sub_1009B19  +
cmp [ebp+var_1] 0 +
mov esi [eax] +
jnz loc_1043427  +
mov ecx esi +
call sub_100D428  +
fadd  [ebp+var_18] +
fstp  [ebp+var_18] +
fld  ds:dbl_1008BD8 +
fcomp  [ebp+var_18] +
fnstsw  ax +
test ah 41h +
jnp loc_1043419  +
mov eax [ebp+var_8] +
cmp eax [edi+6BCh] +
jg loc_1043423  +
mov eax [ebp+var_C] +
test eax eax +
jnz loc_1008B7A  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_108B1D4 +
push edi  +
xor edi edi +
cmp eax edi +
jnz loc_103FCCC  +
mov eax edi +
pop edi  +
pop ebp  +
retn 8  +
***
push 68h  +
mov eax offset loc_1079F58 +
call sub_10020DC  +
mov esi ecx +
push esi  +
lea ecx [ebp-64h] +
call ??0CPaintDC@@QAE@PAVCWnd@@@Z  +
xor edi edi +
mov [ebp-4] edi +
cmp [ebp-60h] edi +
jz loc_10407EB  +
cmp [esi+40h] edi +
jz loc_100941B  +
cmp dword_108A244 esi +
jnz loc_10093BE  +
push esi  +
call sub_100A826  +
push edi  +
lea eax [ebp-64h] +
push eax  +
mov ecx esi +
call sub_1009365  +
push 1  +
mov ebx eax +
push edi  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-64h] +
push eax  +
mov ecx esi +
call sub_1009432  +
call sub_10022E9  +
test al al +
jnz loc_10407FC  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-64h] +
push eax  +
mov ecx esi +
call sub_10084D4  +
cmp dword_108A244 esi +
jnz loc_1009408  +
push esi  +
call sub_100A853  +
mov ecx [esi+70h] +
cmp ecx edi +
jnz loc_1040819  +
cmp ebx edi +
jnz loc_1040823  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-64h] +
call ??1CPaintDC@@UAE@XZ  +
call sub_1002119  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-0B0h] esi +
mov eax [esi+40h] +
xor edi edi +
inc edi  +
cmp [eax+38h] edi +
jz loc_1009464  +
mov eax [ebp+8] +
push 0Ch  +
push dword ptr [eax+8]  +
call ds:GetDeviceCaps  +
mov edi eax +
mov ecx [esi+44h] +
xor ebx ebx +
cmp ecx ebx +
jz loc_102E718  +
mov eax [esi+40h] +
mov edx [esi+88h] +
cmp edx [eax+30h] +
jnz loc_10354AD  +
mov edx [esi+84h] +
cmp edx [eax+2Ch] +
jnz loc_10354AD  +
cmp [esi+80h] edi +
jnz loc_10354AD  +
mov edi offset off_1002208 +
lea eax [ebp-88h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
call sub_1008757  +
mov eax [ebp-14h] +
sub eax [ebp-1Ch] +
test eax eax +
jle loc_1009876  +
mov eax [ebp-10h] +
sub eax [ebp-18h] +
test eax eax +
jle loc_1009876  +
lea ecx [ebp-2Ch] +
call ??0CDC@@QAE@XZ  +
mov dword ptr [ebp-4] 1 +
mov [ebp-38h] ebx +
mov [ebp-3Ch] edi +
push dword ptr [ebp+8]  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1002292  +
test eax eax +
jz sub_104059A  +
mov eax [ebp-7Ch] +
sub eax [ebp-84h] +
mov ecx [ebp-80h] +
sub ecx [ebp-88h] +
mov [ebp-34h] eax +
inc eax  +
mov [ebp-30h] ecx +
inc ecx  +
cmp dword ptr [esi+80h] 1 +
jz sub_10402FE  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
lea ecx [ebp-3Ch] +
call sub_1008818  +
neg eax  +
sbb eax eax +
inc eax  +
cmp eax ebx +
jnz sub_104059A  +
lea eax [ebp-3Ch] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_10022BD  +
cmp dword ptr [esi+80h] 1 +
mov [ebp-0B4h] eax +
mov [ebp-60h] ebx +
mov [ebp-58h] ebx +
jz loc_1040312  +
fld  ds:dbl_1009880 +
fcomp  qword ptr [esi+50h] +
fnstsw  ax +
test ah 41h +
jnz loc_1034DC0  +
push 4  +
lea ecx [ebp-2Ch] +
mov dword ptr [ebp-5Ch] 1 +
call ?SetStretchBltMode@CDC@@QAEHH@Z  +
push dword ptr [ebp-18h]  +
lea eax [ebp-78h] +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-2Ch] +
push eax  +
call sub_1009A3F  +
mov eax [esi+40h] +
mov ecx [eax+38h] +
imul ecx [eax+34h] +
cmp ecx 1 +
jz loc_1040346  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1009942  +
lea ecx [ebp-0A4h] +
call ??0CDC@@QAE@XZ  +
push dword ptr [ebp+8]  +
lea ecx [ebp-0A4h] +
mov byte ptr [ebp-4] 3 +
call sub_1002292  +
push dword ptr [esi+44h]  +
lea ecx [ebp-0A4h] +
call sub_10022BD  +
mov [ebp-0ACh] eax +
mov [ebp+0Fh] bl +
mov [ebp-8Ch] ebx +
mov [ebp-90h] edi +
lea ecx [ebp-0C4h] +
mov byte ptr [ebp-4] 4 +
call ??0CDC@@QAE@XZ  +
mov ecx offset unk_108B074 +
mov byte ptr [ebp-4] 5 +
mov [ebp-94h] ebx +
call sub_1009923  +
test eax eax +
jz loc_100976F  +
lea eax [ebp-54h] +
push eax  +
call ds:GetCursorPos  +
lea eax [ebp-54h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:ScreenToClient  +
lea eax [ebp-54h] +
push eax  +
mov ecx esi +
call sub_100839D  +
mov ecx [ebp-54h] +
cmp ecx ebx +
jl loc_100976F  +
mov eax [esi+40h] +
cmp ecx [eax+2Ch] +
jge loc_100976F  +
mov ecx [ebp-50h] +
cmp ecx ebx +
jl loc_100976F  +
cmp ecx [eax+30h] +
jge loc_100976F  +
mov ecx dword_108B088 +
mov byte ptr [ebp+0Fh] 1 +
cmp ecx ebx +
jz loc_1034DD9  +
mov eax [ecx] +
call dword ptr [eax+44h]  +
inc eax  +
cdq   +
sub eax edx +
mov edi eax +
mov eax [esi+40h] +
push dword ptr [eax+2Ch]  +
mov eax [ebp-54h] +
sar edi 1 +
push ebx  +
sub eax edi +
push eax  +
call sub_103053A  +
mov [ebp-4Ch] eax +
mov eax [esi+40h] +
push dword ptr [eax+30h]  +
mov eax [ebp-50h] +
push ebx  +
sub eax edi +
push eax  +
call sub_103053A  +
mov [ebp-48h] eax +
mov eax [esi+40h] +
push dword ptr [eax+2Ch]  +
mov eax [ebp-54h] +
push ebx  +
add eax edi +
push eax  +
call sub_103053A  +
mov [ebp-44h] eax +
mov eax [esi+40h] +
push dword ptr [eax+30h]  +
mov eax [ebp-50h] +
push ebx  +
add edi eax +
push edi  +
call sub_103053A  +
mov [ebp-40h] eax +
sub eax [ebp-48h] +
lea ecx [ebp-90h] +
push eax  +
mov eax [ebp-44h] +
sub eax [ebp-4Ch] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1008818  +
push dword ptr [ebp+8]  +
lea ecx [ebp-0C4h] +
call sub_1002292  +
lea eax [ebp-90h] +
push eax  +
lea ecx [ebp-0C4h] +
call sub_10022BD  +
push 0CC0020h  +
push dword ptr [ebp-48h]  +
mov [ebp-94h] eax +
push dword ptr [ebp-4Ch]  +
lea eax [ebp-0A4h] +
push eax  +
mov eax [ebp-40h] +
sub eax [ebp-48h] +
lea ecx [ebp-0C4h] +
push eax  +
mov eax [ebp-44h] +
sub eax [ebp-4Ch] +
push eax  +
push ebx  +
push ebx  +
call sub_100988D  +
lea eax [ebp-54h] +
push eax  +
lea eax [ebp-0A4h] +
push eax  +
mov ecx esi +
call sub_103074E  +
mov edi offset off_1002208 +
cmp dword ptr [esi+80h] 1 +
jz loc_1040361  +
mov eax [ebp-10h] +
sub eax [ebp-18h] +
push eax  +
mov eax [ebp-14h] +
sub eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-0A0h]  +
push dword ptr [ebp-34h]  +
push dword ptr [ebp-30h]  +
push ebx  +
push ebx  +
push dword ptr [ebp-28h]  +
call sub_10098C4  +
cmp dword_108B18C ebx +
jnz loc_104050A  +
mov ecx [ebp+8] +
push 0CC0020h  +
push ebx  +
push ebx  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp-34h]  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-84h]  +
push dword ptr [ebp-88h]  +
call sub_100988D  +
cmp [ebp+0Fh] bl +
jnz loc_1030578  +
cmp [ebp-58h] ebx +
jnz sub_1040566  +
cmp dword ptr [esi+80h] 1 +
jz sub_1040577  +
push dword ptr [ebp-0B4h]  +
lea ecx [ebp-2Ch] +
call sub_10022BD  +
lea ecx [ebp-2Ch] +
call ?DeleteDC@CDC@@QAEHXZ  +
push dword ptr [ebp-0ACh]  +
lea ecx [ebp-0A4h] +
call sub_10022BD  +
lea ecx [ebp-0A4h] +
call ?DeleteDC@CDC@@QAEHXZ  +
lea ecx [ebp-0C4h] +
mov byte ptr [ebp-4] 4 +
call ??1CDC@@UAE@XZ  +
lea ecx [ebp-90h] +
mov byte ptr [ebp-4] 3 +
mov [ebp-90h] edi +
call sub_1002407  +
lea ecx [ebp-0A4h] +
mov byte ptr [ebp-4] 2 +
call ??1CDC@@UAE@XZ  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
mov [ebp-3Ch] edi +
call sub_1002407  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ??1CDC@@UAE@XZ  +
call sub_1002061  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_100989C  +
mov eax [eax+4] +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:BitBlt  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_20] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_10] +
cmp esi ebx +
jnz loc_1034D8B  +
cmp edi [ebp+arg_24] +
jnz loc_1034D8B  +
mov eax dword_108A24C +
mov eax [eax+40h] +
cmp dword ptr [eax+38h] 1 +
jz loc_1034D8B  +
push 0CC0020h  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push edi  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:BitBlt  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 28h  +
***
xor eax eax +
cmp [ecx+14h] eax +
jz locret_1009933  +
cmp [ecx+78h] eax +
jnz loc_1030558  +
retn   +
***
retn   +
***
call sub_100208C  +
mov ebx ecx +
lea ecx [ebp-3Ch] +
call ??0CDC@@QAE@XZ  +
push dword ptr [ebp+8]  +
xor edi edi +
lea ecx [ebp-3Ch] +
mov [ebp-4] edi +
call sub_1002292  +
push dword ptr [ebx+44h]  +
lea ecx [ebp-3Ch] +
call sub_10022BD  +
mov [ebp+8] eax +
lea eax [ebp-2Ch] +
cmp [ebp+0Ch] edi +
jz loc_100E2AF  +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:CopyRect  +
call sub_10049D9  +
mov ecx eax +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
cmp [eax+54h] edi +
jnz loc_103FC06  +
mov eax [ebx+70h] +
cmp eax edi +
jnz loc_103FC22  +
mov esi offset unk_108B074 +
mov ecx esi +
call sub_1009939  +
mov ecx esi +
mov [ebp+0Ch] eax +
call sub_1009A29  +
test eax eax +
jnz loc_10099F4  +
mov eax [ebx+40h] +
push 0CC0020h  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [eax+0Ch]  +
mov eax [ebp-20h] +
sub eax [ebp-28h] +
push eax  +
mov eax [ebp-24h] +
sub eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp-38h]  +
call ds:BitBlt  +
cmp [ebp+0Ch] edi +
jnz loc_100E284  +
push dword ptr [ebp+8]  +
lea ecx [ebp-3Ch] +
call sub_10022BD  +
lea ecx [ebp-3Ch] +
call ?DeleteDC@CDC@@QAEHXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
call ??1CDC@@UAE@XZ  +
call sub_1002061  +
retn 8  +
***
xor eax eax +
cmp [ecx+14h] eax +
jz locret_1009A39  +
cmp [ecx+24h] eax +
jnz loc_100E272  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ecx+4]  +
call ds:SetBrushOrgEx  +
mov ecx [ebp+var_8.x] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+var_8.y] +
mov [eax+4] ecx +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi] +
push 1  +
push 0Ch  +
push esi  +
call ?AfxIsValidAddress@@YGHPBXIH@Z  +
test eax eax +
jz loc_103DBA3  +
mov eax [esi] +
mov [edi] eax +
pop edi  +
lea eax [esi+8] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
test ebx ebx +
jle loc_1009B80  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [esi+20h] +
lea ecx [eax+1] +
mov [esi+20h] ecx +
push eax  +
mov ecx esi +
call sub_1009B8B  +
mov [edi] al +
inc edi  +
dec ebx  +
jnz loc_1009B68  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_1009BA6  +
cmp eax [ecx+8] +
jge loc_1009BA6  +
mov ecx [ecx+4] +
mov al [eax+ecx] +
pop ebp  +
retn 4  +
call MFC42u_6928  +
jmp near ptr byte_1043395  +
***
call ?Default@CWnd@@IAEJXZ  +
retn 4  +
***
mov eax offset off_1009BE0 +
retn   +
***
cmp dword_108AF30 0 +
push esi  +
mov esi ecx +
jnz loc_1009C21  +
call sub_10049FD  +
call ds:GetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp eax esi +
jz loc_103FD91  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
retn 4  +
***
push dword ptr [edi+20h]  +
call ds:GetDC  +
push eax  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov [ebp+arg_0] eax +
cmp eax esi +
jz loc_1040203  +
mov [ebp+var_C] 1 +
jmp loc_10084F8  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1009C7A  +
jmp loc_100856E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
push dword ptr [ecx+20h]  +
call ds:ReleaseDC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call ?Default@CWnd@@IAEJXZ  +
mov ecx dword_108A24C +
test ecx ecx +
jz loc_1042A94  +
pop ebp  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push esi  +
mov esi ecx +
call sub_1006239  +
lea ecx [eax+40h] +
test eax eax +
jnz loc_1009CC8  +
mov ecx esi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+40h] 0 +
jz loc_1009D18  +
push dword ptr [esi+20h]  +
call ds:BringWindowToTop  +
mov ecx dword_108A24C +
cmp ecx esi +
jnz loc_10405CC  +
mov dword_108A24C esi +
push dword ptr [esi+40h]  +
call sub_1009D21  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
push 0  +
push 0  +
mov ecx esi +
call sub_10084D4  +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax dword_108A220 +
jnz loc_1017822  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call ?OnSetFocus@CFrameWnd@@IAEXPAVCWnd@@@Z  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
mov ecx esi +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
mov esi eax +
test esi esi +
jz loc_1009D90  +
push offset off_1009BE0  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_1009D90  +
mov eax [esi+48h] +
test eax eax +
jz loc_1009D90  +
push dword ptr [eax+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_1009D90  +
mov ecx [esi+48h] +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+2Ch] +
mov ecx [ebp+arg_4] +
mov [ecx] edx +
mov eax [eax+30h] +
mov [ecx+4] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp esi off_108A1D4 +
jnz loc_1009DFE  +
cmp [esi+14h] edi +
jnz loc_103F705  +
cmp dword_108A218 edi +
jnz loc_103F715  +
call sub_10049FD  +
mov ecx off_108A1D4 +
cmp [ecx+10h] edi +
jz loc_1009E22  +
cmp ecx esi +
jnz loc_1009F0F  +
mov eax [ecx] +
push edi  +
call dword ptr [eax+44h]  +
mov off_108A1D4 esi +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+44h]  +
cmp off_108A1D4 esi +
jnz loc_103F726  +
push edi  +
call sub_1009E55  +
pop edi  +
pop esi  +
jmp sub_1008445  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword_108A210 eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ecx+0C8h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+24h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push 1  +
mov ecx offset unk_108B074 +
call sub_1009EFA  +
mov edi eax +
test edi edi +
jz loc_1009F1E  +
cmp edi [esi+10h] +
jz loc_1009ED5  +
mov ecx [esi+0Ch] +
mov [esi+10h] edi +
test ecx ecx +
jnz loc_10447B2  +
push edi  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_1009ED5  +
mov edx [eax] +
add esi 4 +
push esi  +
mov ecx eax +
call dword ptr [edx]  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_1005BFC  +
push 4  +
push 5461h  +
mov ecx eax +
call sub_1009E6B  +
pop edi  +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+14h] eax +
jz loc_1009F1A  +
mov ecx [ecx+14h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+7Ch]  +
mov off_108A1D8 ecx +
jmp loc_1009E22  +
pop ebp  +
retn 4  +
***
mov ecx [esi+0Ch] +
test ecx ecx +
jz loc_1009ED5  +
mov eax [ecx] +
lea edx [esi+4] +
push edx  +
call dword ptr [eax+4]  +
and dword ptr [esi+0Ch] 0 +
jmp loc_1009ED5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
xor edi edi +
cmp dword_108AF04 edi +
jnz loc_1009FB7  +
mov eax dword_108AF0C +
cmp eax edi +
jnz loc_1035DDF  +
cmp dword_108AF30 edi +
jnz loc_1035DC7  +
pop edi  +
leave   +
retn 4  +
***
mov ecx dword_108A1EC +
jmp sub_10077DE  +
***
mov eax 4E21h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:CreateSolidBrush  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_100A103  +
mov ecx [ebp+arg_4] +
mov eax [ecx+eax*4] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
push 0  +
or edi 0FFFFFFFFh +
call ds:GetDC  +
mov esi eax +
push 58h  +
push esi  +
call ds:GetDeviceCaps  +
push esi  +
push 0  +
mov ebx eax +
call ds:ReleaseDC  +
xor ecx ecx +
cmp [ebp+arg_4] ecx +
jbe loc_100A153  +
mov edx [ebp+arg_0] +
cmp edi ebx +
jbe loc_100A15D  +
mov eax [edx+ecx*4] +
cmp eax edi +
jnb loc_10487F4  +
mov edi eax +
mov [ebp+var_4] ecx +
cmp edi ebx +
jnz loc_100A16B  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
jb loc_10487FB  +
jmp loc_100A14F  +
cmp eax ebx +
jbe loc_100A14A  +
jmp loc_100A14F  +
inc ecx  +
cmp ecx [ebp+arg_4] +
jnb loc_100A153  +
jmp loc_100A13B  +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_1005C20  +
push eax  +
push offset word_100219C  +
push 0  +
mov ecx esi +
call ?SetPaneText@CStatusBar@@QAEHHPBGH@Z  +
pop esi  +
retn   +
***
mov ecx off_108A1D4 +
mov eax [ecx] +
push offset dword_108A348  +
push dword_108A244  +
call dword ptr [eax+28h]  +
and dword_108A244 0 +
cmp dword_108A238 0 +
jnz loc_1006723  +
mov eax dword_108AF80 +
push dword ptr [eax+100h]  +
call ds:IsWindow  +
test eax eax +
jz loc_1006723  +
mov ecx dword_108AF80 +
add ecx 0E0h +
call sub_100A178  +
jmp loc_1006723  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100A20B  +
mov eax [ecx] +
push 1  +
push dword_108A24C  +
call dword ptr [eax+48h]  +
pop ebp  +
retn 4  +
***
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+40h]  +
call sub_100D11D  +
test eax eax +
jz loc_100A24D  +
mov eax [esi+40h] +
push [ebp+arg_0]  +
mov ecx [eax+4] +
call sub_100D5D9  +
pop esi  +
pop ebp  +
retn 4  +
push 0  +
call ds:MessageBeep  +
jmp loc_100A248  +
***
mov edi edi +
push ebp  +
mov ebp esp +
dec [ebp+arg_8]  +
js loc_100A278  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call [ebp+arg_C]  +
add esi [ebp+arg_4] +
dec [ebp+arg_8]  +
jns loc_100A26A  +
pop esi  +
pop ebp  +
retn 10h  +
***
push 2  +
pop edx  +
jmp loc_100DCF0  +
xor edx edx +
inc edx  +
jmp loc_100DCF0  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push esi  +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFE0h +
xor esi esi +
call sub_1005B6B  +
test eax eax +
jz loc_100A2C3  +
push dword ptr [ebp+1Ch]  +
mov ecx [eax+24h] +
push dword ptr [ebp+18h]  +
mov eax [ecx] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call dword ptr [eax]  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
cmp [esi+14h] ebx +
jz loc_10084A0  +
mov ecx [esi+14h] +
mov eax [ecx] +
call dword ptr [eax+40h]  +
test eax eax +
jz loc_10084A0  +
jmp loc_100BD63  +
***
xor eax eax +
cmp [ecx+20h] eax +
jz loc_1030A66  +
xor eax eax +
inc eax  +
retn   +
***
cmp dword ptr [esi+78h] 0 +
jnz loc_100A5CF  +
mov ecx dword_108A24C +
call sub_1030AE2  +
mov dword ptr [esi+78h] 1 +
add esi 7Ch +
push esi  +
call ds:SetRectEmpty  +
jmp loc_100A5CF  +
***
cmp dword_108B0EC 0 +
jz loc_100A348  +
and dword_108B0EC 0 +
push 1  +
mov ecx offset unk_108B074 +
call sub_1008489  +
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0Fh +
jz loc_1033374  +
pop ebp  +
jmp sub_100BBC4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+10h] 0 +
jz loc_1030E9C  +
cmp dword ptr [esi+14h] 0 +
jz loc_1030E43  +
pop esi  +
pop ebp  +
retn 4  +
***
pop ecx  +
jmp loc_1010208  +
***
push 1Fh  +
jmp loc_10337D5  +
***
push 4  +
jmp loc_100A38E  +
***
retn   +
***
push 6  +
jmp loc_100A38E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax off_108A1D4 +
sub esp 24h +
cmp dword ptr [eax+40h] 28Eh +
push esi  +
mov esi ecx +
jz loc_10408D5  +
push edi  +
push dword ptr [ebp+10h]  +
mov ecx offset unk_108B074 +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100A57C  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
mov eax dword_108A244 +
xor edi edi +
cmp eax esi +
jnz loc_100AAFA  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_100839D  +
mov eax [ebp+0Ch] +
mov ecx [ebp+10h] +
mov [esi+60h] eax +
mov [esi+64h] ecx +
cmp dword_108A244 edi +
jz loc_100AB14  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_100A437  +
mov ecx esi +
call sub_100A4A4  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push esi  +
mov esi ecx +
cmp dword_108A240 eax +
jnz loc_103D232  +
mov eax off_108A1D4 +
mov eax [eax+40h] +
cmp eax 259h +
jz loc_100A46B  +
cmp eax 25Ah +
jz loc_100A46B  +
push dword ptr [esi+40h]  +
call sub_1005C6C  +
call ?GetCurrentMessage@CWnd@@KGPBUtagMSG@@XZ  +
mov ecx [ebp+arg_0] +
and ecx 8 +
mov dword_108A368 ecx +
mov ecx [eax+0Ch] +
movsx edx cx +
shr ecx 10h +
movsx ecx cx +
push ecx  +
push edx  +
push dword ptr [eax+8]  +
mov ecx esi +
push dword ptr [eax+4]  +
call sub_100A640  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+74h] +
test ecx ecx +
jz loc_100A4B5  +
call sub_100A4C7  +
mov ecx [esi+78h] +
pop esi  +
test ecx ecx +
jnz sub_100A4C7  +
jmp nullsub_2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov edi [eax+48h] +
lea eax [ebp+Point] +
push eax  +
call ds:GetCursorPos  +
lea eax [ebp+Point] +
push eax  +
push dword ptr [edi+20h]  +
call ds:ScreenToClient  +
lea eax [ebp+Point] +
push eax  +
mov ecx edi +
call sub_100839D  +
mov ebx [ebp+Point.y] +
push ebx  +
push [ebp+Point.x]  +
lea edi [esi+98h] +
mov ecx edi +
call sub_100A52D  +
test eax eax +
jnz loc_100A7B8  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
cmp eax [ebp+arg_0] +
jnz loc_100A7B0  +
mov eax [ecx+4] +
cmp eax [ebp+arg_4] +
jnz loc_100A7B0  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
inc eax  +
cmp [ebp+0Ch] eax +
jnz loc_100A570  +
mov edx [ebp+8] +
mov edx [edx+20h] +
cmp edx [ecx+20h] +
jnz loc_100A570  +
pop ebp  +
retn 0Ch  +
***
call ?Default@CWnd@@IAEJXZ  +
jmp loc_100A56C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
mov ecx [esi+28h] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
mov ecx esi +
call sub_100A5AF  +
push 0  +
mov ecx esi +
call sub_1008489  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
cmp dword_108A24C 0 +
push esi  +
mov esi ecx +
jz loc_100A5CF  +
mov ecx [esi+14h] +
test ecx ecx +
jz loc_100A5CF  +
mov eax [ecx] +
call dword ptr [eax+40h]  +
test eax eax +
jnz loc_100A2FC  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld1   +
push esi  +
mov esi ecx +
fcom  qword ptr [esi+50h] +
push edi  +
mov edi [ebp+arg_0] +
fnstsw  ax +
test ah 1 +
mov eax [edi] +
jnz loc_1034C31  +
fstp  st +
sub eax 5 +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fild  dword ptr [esi+58h] +
fmul  qword ptr [esi+50h] +
fsubp st(1) st +
call _ftol2_sse  +
mov [edi] eax +
mov eax [edi+4] +
sub eax 5 +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fild  dword ptr [esi+5Ch] +
fmul  qword ptr [esi+50h] +
fsubp st(1) st +
call _ftol2_sse  +
mov [edi+4] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov ebx ecx +
mov eax [ebp+10h] +
mov ecx [ebp+14h] +
mov [ebp-1Ch] eax +
mov [ebp-24h] eax +
lea eax [ebp-24h] +
mov [ebp-18h] ecx +
mov [ebp-20h] ecx +
push eax  +
mov ecx ebx +
call sub_100839D  +
xor esi esi +
mov ecx ebx +
cmp dword_108CF00 esi +
jnz loc_10405DE  +
lea eax [ebp+10h] +
push eax  +
call sub_100A5D6  +
lea eax [ebp-4Ch] +
push eax  +
mov ecx ebx +
call sub_10083F8  +
fild  dword_108B294 +
fdiv  ds:dbl_10021B0 +
fmul  ds:dbl_100A7A8 +
call _ftol2_sse  +
mov [ebp-10h] eax +
call ds:GetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp eax ebx +
jz loc_100A6CF  +
cmp dword_108A24C ebx +
jnz loc_100A6CF  +
mov eax dword_108AF30 +
cmp eax [ebx+40h] +
jz loc_10360D3  +
push dword ptr [ebp-18h]  +
lea eax [ebp-4Ch] +
push dword ptr [ebp-1Ch]  +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_103D1A8  +
lea eax [ebp+10h] +
push eax  +
mov ecx ebx +
call sub_100A894  +
cmp dword_108A238 esi +
jnz loc_100A703  +
lea eax [ebx+60h] +
push eax  +
call sub_100A8D8  +
cmp dword_108AF08 esi +
jnz loc_10407D6  +
cmp dword_108AF0C esi +
jnz loc_10407D6  +
lea eax [ebp+10h] +
push eax  +
call sub_100A879  +
mov eax [ebp+8] +
mov esi off_108A1D4 +
mov edi 203h +
cmp eax edi +
ja loc_10301DC  +
jz loc_100A9BD  +
sub eax 113h +
jz loc_1040776  +
sub eax 0EDh +
jnz loc_100A932  +
cmp dword_108A360 0 +
mov eax dword_108A358 +
mov dword_108A350 eax +
mov eax dword_108A35C +
mov dword_108A354 eax +
mov eax [ebp+10h] +
mov dword_108A358 eax +
mov eax [ebp+14h] +
mov dword_108A35C eax +
jnz loc_100A7DB  +
cmp dword_108A364 0 +
jnz loc_100A7DB  +
mov eax [esi] +
push offset dword_108A348  +
push ebx  +
mov ecx esi +
call dword ptr [eax+38h]  +
call sub_1008445  +
call sub_1002061  +
retn 10h  +
xor eax eax +
inc eax  +
jmp loc_100A54B  +
mov eax [ebp-8] +
push 0  +
push 0  +
push dword ptr [esi+20h]  +
mov [edi] eax +
mov [edi+4] ebx +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
jmp loc_100A523  +
mov eax [esi] +
push offset dword_108A348  +
push ebx  +
mov ecx esi +
call dword ptr [eax+34h]  +
jmp loc_100A799  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:GetFocus  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp eax esi +
jnz loc_104083E  +
mov eax [ebp+arg_0] +
and eax 3 +
cmp al 3 +
jz loc_1040859  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_108A23C 0 +
jnz loc_100A844  +
mov ecx off_108A1D4 +
mov eax [ecx] +
push 0  +
push [ebp+arg_0]  +
call dword ptr [eax+48h]  +
inc dword_108A23C  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
dec dword_108A23C  +
jnz loc_100A870  +
mov ecx off_108A1D4 +
mov eax [ecx] +
push 1  +
push [ebp+arg_0]  +
call dword ptr [eax+48h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_108B27C 0 +
jnz loc_103EEDF  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld1   +
push esi  +
mov esi ecx +
fcom  qword ptr [esi+50h] +
push edi  +
mov edi [ebp+arg_0] +
fnstsw  ax +
test ah 41h +
jz loc_103FAF4  +
fstp  st +
fild  dword ptr [edi] +
fdiv  qword ptr [esi+50h] +
call _ftol2_sse  +
mov [edi] eax +
add edi 4 +
fild  dword ptr [edi] +
fdiv  qword ptr [esi+50h] +
call _ftol2_sse  +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_108A1EC +
push dword ptr [eax+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_103D9DF  +
mov ecx dword_108A1EC +
pop ebp  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx dword_108A24C +
test ecx ecx +
jz loc_100A916  +
call sub_100A4A4  +
push dword ptr [esi+0A8h]  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
mov ecx esi +
push dword ptr [eax]  +
push 0  +
call sub_10089B9  +
pop esi  +
pop ebp  +
retn 4  +
***
dec eax  +
jz loc_100A9BD  +
dec eax  +
jnz loc_100A799  +
mov eax dword_108A358 +
mov dword_108A350 eax +
mov eax dword_108A35C +
mov dword_108A354 eax +
mov eax [ebp+10h] +
mov dword_108A358 eax +
mov eax [ebp+14h] +
mov dword_108A35C eax +
call ds:GetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp eax ebx +
jnz loc_100A799  +
call ds:ReleaseCapture  +
mov eax [esi] +
mov edi offset dword_108A348 +
push edi  +
mov ecx esi +
call dword ptr [eax+58h]  +
mov eax [esi] +
push edi  +
push ebx  +
mov ecx esi +
call dword ptr [eax+30h]  +
cmp dword ptr [ebp+8] 202h +
jnz loc_100A9A4  +
and dword_108A360 0 +
cmp dword ptr [ebp+8] 205h +
jnz loc_100A799  +
and dword_108A364 0 +
jmp loc_100A799  +
mov eax [ebx+40h] +
cmp dword_108A1FC eax +
jnz loc_10407CB  +
mov eax [ebp+8] +
cmp eax 201h +
jnz loc_1030205  +
mov dword_108A360 1 +
cmp eax 204h +
jz loc_1030219  +
cmp eax 206h +
jz loc_1030219  +
and dword_108A364 0 +
mov eax [ebp+10h] +
mov ecx [ebp+14h] +
mov dword_108A350 eax +
mov dword_108A354 ecx +
mov dword_108A348 eax +
mov dword_108A34C ecx +
mov dword_108A358 eax +
mov dword_108A35C ecx +
push dword ptr [ebx+20h]  +
call ds:SetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 25Ah +
jz loc_100AA4A  +
call sub_10049FD  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+84h]  +
test eax eax +
jnz loc_10304D3  +
mov eax [esi] +
push offset dword_108A348  +
push ebx  +
mov ecx esi +
call dword ptr [eax+2Ch]  +
jmp loc_100A799  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 28Eh +
push esi  +
mov esi ecx +
jz loc_10408C2  +
push dword ptr [ebp+10h]  +
mov ecx offset unk_108B074 +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100AAC8  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_100A437  +
mov byte ptr [esi+8Ch] 0 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
test al al +
jz loc_100AA8D  +
jmp loc_100AAB1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
mov ecx [esi+28h] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
and dword ptr [esi+74h] 0 +
mov ecx esi +
call sub_100A5AF  +
push 0  +
mov ecx esi +
call sub_1008489  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
cmp eax edi +
jz loc_100A3F8  +
jmp loc_10408E8  +
***
test al al +
jz loc_100A3CE  +
jmp loc_100A42D  +
***
mov [ebp-10h] ecx +
mov [ebp-20h] ecx +
mov [ebp-18h] ecx +
mov ecx off_108A1D4 +
lea edx [ebp-24h] +
push edx  +
mov [ebp-14h] eax +
mov [ebp-24h] eax +
mov [ebp-1Ch] eax +
mov [ebp-0Ch] edi +
mov [ebp-8] edi +
mov [ebp-4] edi +
mov eax [ecx] +
push edi  +
call dword ptr [eax+24h]  +
mov dword_108A244 esi +
jmp loc_100A41B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 28Eh +
push esi  +
mov esi ecx +
jz loc_10408AF  +
push [ebp+arg_8]  +
mov ecx offset unk_108B074 +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100ABB2  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A7EF  +
test eax eax +
jz loc_100AB9B  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A437  +
mov byte ptr [esi+8Ch] 1 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
test al al +
jz loc_100AB69  +
jmp loc_100AB9B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
mov ecx [esi+28h] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax]  +
and dword ptr [esi+74h] 0 +
mov ecx esi +
call sub_100A5AF  +
push 0  +
mov ecx esi +
call sub_1008489  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ecx  +
push edx  +
push eax  +
push offset gdiplus_dll_import_table  +
call sub_100ABF9  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
mov eax offset __ImageBase +
push esi  +
mov esi [ebp+arg_0] +
mov edx [esi+8] +
mov ecx [esi+4] +
mov ebx [esi+0Ch] +
add edx eax +
push edi  +
mov edi [esi+14h] +
add edi eax +
add ecx eax +
mov [ebp+Target] edx +
mov edx [esi+10h] +
add ebx eax +
add edx eax +
mov eax [esi+1Ch] +
mov [ebp+var_4] eax +
mov eax [ebp+Arguments] +
mov [ebp+lpLibFileName] ecx +
xor ecx ecx +
mov [ebp+var_C] edi +
mov [ebp+var_3C] eax +
xor eax eax +
test dword ptr [esi] 1 +
lea edi [ebp+lpProcName] +
mov [ebp+var_44] 24h +
mov [ebp+var_40] esi +
mov [ebp+var_34] ecx +
stos   +
mov [ebp+var_2C] ecx +
mov [ebp+var_28] ecx +
mov [ebp+var_24] ecx +
jz loc_1049B3B  +
mov eax [ebp+Target] +
mov edi [eax] +
mov eax [ebp+Arguments] +
sub eax ebx +
sar eax 2 +
shl eax 2 +
add edx eax +
mov edx [edx] +
mov [ebp+arg_0] eax +
mov eax edx +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+var_34] eax +
lea eax (__ImageBase.unused+2)[edx] +
jz loc_1049B5A  +
mov [ebp+lpProcName] eax +
mov eax ds:dword_100ACFC +
xor ebx ebx +
cmp eax ecx +
jnz loc_1049B62  +
test edi edi +
jz loc_1024DAD  +
mov eax ds:dword_100ACFC +
mov [ebp+var_2C] edi +
test eax eax +
jnz loc_1049BF1  +
test ebx ebx +
jnz loc_100ACDF  +
cmp [esi+14h] ebx +
jnz loc_1049C00  +
push [ebp+lpProcName]  +
push edi  +
call ds:GetProcAddress  +
mov ebx eax +
test ebx ebx +
jz loc_1049C45  +
mov eax [ebp+Arguments] +
mov [eax] ebx +
mov eax ds:dword_100ACFC +
test eax eax +
jnz loc_1049C89  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_4] +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
push esi  +
push 0  +
push ecx  +
fstp  [esp+10h+var_10] +
push dword ptr [eax+4]  +
call GdipCreatePen2  +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipSetPenStartCap  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipSetPenEndCap  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipSetPenLineJoin  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
mov eax off_108A1D4 +
push esi  +
mov esi eax +
jnz loc_1038D83  +
test esi esi +
jz loc_100AF7D  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0A0h]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov ecx [eax+4] +
call ?BeginWaitCursor@CCmdTarget@@QAEXXZ  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
cmp edx 28h +
jb loc_100AFC6  +
cmp dword ptr [eax+10h] 3 +
jz loc_1036B9D  +
push 1  +
push eax  +
call sub_100AFE2  +
cmp edx 28h +
sbb ecx ecx +
add ecx 4 +
imul eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 28h +
jb loc_100AFFC  +
cmp [ebp+arg_4] 0 +
jz loc_100AFFC  +
mov eax [ecx+20h] +
test eax eax +
jnz loc_100B020  +
push ecx  +
call sub_100B029  +
movzx eax ax +
dec eax  +
jz loc_103EE5F  +
sub eax 3 +
jz loc_103EE5B  +
sub eax 4 +
jz loc_1012F20  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 28h +
jb loc_100B03E  +
movzx eax word ptr [eax+0Eh] +
pop ebp  +
retn 4  +
movzx eax word ptr [eax+0Ah] +
jmp loc_100B03A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_100AFAD  +
movzx eax ax +
add eax [esi] +
cmp [ebp+arg_4] eax +
ja loc_103EE6E  +
add eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
push dword ptr [esi+30h]  +
push eax  +
push dword ptr [esi+0Ch]  +
call ds:CreateCompatibleBitmap  +
mov edi eax +
test edi edi +
jz loc_100D168  +
mov eax dword_108A228 +
test eax eax +
jnz loc_10354D4  +
mov dword_108A228 edi +
mov eax [esi+2Ch] +
mov dword_108A1F8 eax +
mov eax [esi+30h] +
mov dword_108A1F4 eax +
mov al [esi+34h] +
mov byte_108A1C3 al +
mov al [esi+38h] +
mov byte_108A1C0 al +
jmp loc_100D165  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
neg eax  +
sbb eax eax +
and eax 3 +
pop ebp  +
retn 4  +
***
cmp [ebp+var_4] eax +
jnz loc_10076B5  +
cmp edx eax +
jz loc_10076B8  +
jmp loc_10076B5  +
***
mov eax ds:?messageMap@CControlBar@@1UAFX_MSGMAP@@B +
retn   +
***
mov ecx [esi+48h] +
test ecx ecx +
jz loc_1007299  +
call sub_1007636  +
test eax eax +
jnz loc_100B14A  +
mov ecx [esi+48h] +
call sub_10075C5  +
test eax eax +
jz loc_1007299  +
xor eax eax +
inc eax  +
jmp loc_1007299  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+10h] 0 +
jnz loc_1048063  +
pop ebp  +
retn 0Ch  +
***
push [ebp+arg_0]  +
mov ecx esi +
call ?AddTail@CObList@@QAEPAU__POSITION@@PAVCObject@@@Z  +
jmp loc_100D83E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_103E39D  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
xor eax eax +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push [ebp+arg_8]  +
mov dword ptr [esi] offset off_100B22C +
push eax  +
push [ebp+arg_4]  +
mov [ebp+var_4] eax +
push [ebp+arg_0]  +
call GdipCreateBitmapFromScan0  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1045F6F  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lprcSrc]  +
mov esi ecx +
push esi  +
call ds:CopyRect  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push offset off_108D3C0  +
mov esi offset off_108CEAC +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov edi ecx +
mov [ebp-1] bl +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jnz loc_1041769  +
push ebx  +
push offset off_108D398  +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_100B684  +
mov ecx [edi+8] +
mov ecx [ecx] +
mov [eax+8] ecx +
mov byte ptr [ebp-1] 1 +
mov al [ebp-1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_104943A  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 20h +
jb loc_1049441  +
shl ecx 5 +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
mov ecx offset unk_108AF60 +
pop ebp  +
jmp sub_1006359  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_100B6FC +
call sub_100BD0F  +
mov eax esi +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
add ecx 0FFFFFFD4h +
call ?InternalRelease@CCmdTarget@@QAEKXZ  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFD4h +
call ?InternalQueryInterface@CCmdTarget@@QAEKPBXPAPAX@Z  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 0FFFFFFD8h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
lea ecx [ebp+var_4] +
mov dword ptr [esi+8] 6 +
mov dword ptr [esi] offset off_100B800 +
mov eax [eax] +
push ecx  +
push eax  +
call GdipCreateSolidFill  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
movzx ecx [ebp+arg_4] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+arg_8] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+arg_C] +
shl eax 8 +
or eax ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
fld  [ebp+arg_4] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
mov eax [eax] +
push esi  +
push 0  +
push ecx  +
fstp  [esp+10h+var_10] +
push eax  +
call GdipCreatePen1  +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
test eax eax +
jz loc_100B8E7  +
lea ecx [ebp+var_4] +
push ecx  +
push dword ptr [eax+4]  +
call GdipGetImageGraphicsContext  +
mov [esi+4] eax +
mov eax [ebp+var_4] +
mov [esi] eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax+4]  +
push dword ptr [esi]  +
call GdipFillRectangleI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edx [ecx+4] +
test edx edx +
jz loc_1011B67  +
mov eax [ecx+8] +
sub eax edx +
sar eax 2 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_100BA7A  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp [ecx+8] eax +
jz loc_100BA7A  +
mov ecx [ecx] +
mov [ebp+arg_4] ecx +
cmp ecx [ebp+arg_8] +
jnz loc_100BA6B  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov [ebp+arg_4] ecx +
cmp eax [esi+4] +
jz loc_100BAB6  +
mov ecx [eax+4] +
mov edx [eax] +
mov [ecx] edx +
mov ecx [eax] +
mov edx [eax+4] +
push eax  +
mov [ecx+4] edx +
call ??3@YAXPAX@Z  +
dec dword ptr [esi+8]  +
pop ecx  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100BAE6  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+4] eax +
and dword ptr [esi+8] 0 +
cmp ecx [esi+4] +
jnz loc_100BB03  +
pop esi  +
retn   +
push edi  +
mov edi [ecx] +
push ecx  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx edi +
cmp edi [esi+4] +
jnz loc_100BB04  +
pop edi  +
jmp loc_100BB01  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+10h] 0 +
jnz loc_1038E61  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov ecx offset unk_108B074 +
jmp sub_100BB42  +
***
mov edi edi +
push esi  +
xor esi esi +
cmp [ecx+14h] esi +
jz loc_100BB5E  +
mov ecx [ecx+14h] +
mov eax [ecx] +
push 7  +
call dword ptr [eax+38h]  +
test al al +
jnz loc_103A07A  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset unk_108B074 +
pop ebp  +
jmp sub_100BB79  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+14h] eax +
jz loc_1043CCB  +
mov ecx [ecx+14h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+38h]  +
***
retn   +
***
mov ecx offset unk_108B074 +
jmp loc_100BBAC  +
xor eax eax +
cmp [ecx+14h] eax +
jz locret_1043CCF  +
mov ecx [ecx+14h] +
mov eax [ecx] +
jmp dword ptr [eax+3Ch]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 0Eh +
jz loc_100BBDA  +
dec eax  +
jz loc_100BBDA  +
pop ebp  +
jmp sub_100BB1C  +
mov al 1 +
pop ebp  +
retn 4  +
***
retn   +
***
push 1  +
jmp loc_1007701  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_10447CE  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 0Ch +
jb loc_10447D5  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 1  +
call sub_100BBF5  +
mov esi eax +
test esi esi +
jz loc_100BC45  +
mov eax [ebp+arg_0] +
mov [esi] eax +
lea eax [esi+4] +
test eax eax +
jz loc_100BC51  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
push [ebp+arg_8]  +
lea eax [esi+8] +
push eax  +
call sub_100BC69  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100BC7C  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea edi [eax+4] +
push dword ptr [edi]  +
mov ebx ecx +
push eax  +
call sub_100BC2B  +
push 1  +
mov ecx ebx +
mov esi eax +
call sub_100BCBE  +
mov [edi] esi +
mov eax [esi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov eax [ecx+8] +
mov edx [ebp+8] +
mov esi 3FFFFFFFh +
sub esi eax +
cmp esi edx +
jb loc_1047E5F  +
add eax edx +
mov [ecx+8] eax +
call sub_1002061  +
retn 4  +
***
call sub_100BBF5  +
test eax eax +
jz loc_100BD00  +
mov [eax] eax +
lea ecx [eax+4] +
test ecx ecx +
jz locret_100BD09  +
mov [ecx] eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100BCF1  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
push ecx  +
lea eax [ebp-4] +
push eax  +
call sub_100BA59  +
mov eax [ebp-4] +
cmp eax [esi+8] +
jnz loc_100BD5E  +
lea ecx [esi+4] +
mov eax [ecx+4] +
lea edx [ebp+8] +
push edx  +
push eax  +
call sub_100BC85  +
pop esi  +
leave   +
retn 4  +
***
cmp dword_108A24C ebx +
jz loc_10084A9  +
cmp dword_108CF00 ebx +
jnz loc_10084A9  +
push edi  +
cmp [esi+14h] ebx +
jz loc_100BE98  +
mov ecx [esi+14h] +
mov eax [ecx] +
call dword ptr [eax+44h]  +
mov edi eax +
lea eax [ebp+Point] +
push eax  +
call ds:GetCursorPos  +
lea eax [ebp+Point] +
push eax  +
mov eax dword_108A24C +
push dword ptr [eax+20h]  +
call ds:ScreenToClient  +
mov ecx dword_108A24C +
lea eax [ebp+Point] +
push eax  +
call sub_100839D  +
mov eax [ebp+Point.x] +
mov ecx eax +
sub ecx edi +
add eax edi +
mov [ebp+rcSrc2.left] ecx +
mov ecx [ebp+Point.y] +
mov [ebp+rcSrc2.right] eax +
add esi 7Ch +
push esi  +
lea eax [ebp+rcSrc2] +
mov edx ecx +
push eax  +
sub edx edi +
add ecx edi +
push eax  +
mov [ebp+rcSrc2.top] edx +
mov [ebp+rcSrc2.bottom] ecx +
call ds:UnionRect  +
lea eax [ebp+rcSrc2] +
push eax  +
mov eax dword_108A24C +
push dword ptr [eax+40h]  +
call sub_1005D16  +
pop edi  +
jmp loc_10084A9  +
***
mov edx [ecx+14h] +
test edx edx +
jnz loc_100C093  +
lea eax [ecx+2Ch] +
mov [ecx+28h] eax +
mov ecx [ecx+18h] +
mov [eax+8] ecx +
mov [eax+4] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
push dword ptr [esi+40h]  +
mov ecx offset unk_108B074 +
jnz loc_100C0A5  +
call sub_100BE63  +
call sub_10049D9  +
test eax eax +
jz loc_100BE59  +
push dword ptr [esi+40h]  +
lea ecx [eax+51Ch] +
call sub_1009E8E  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+14h] +
push edi  +
xor edi edi +
test ecx ecx +
jz loc_100BE91  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov edi eax +
test edi edi +
jz loc_100BE88  +
and dword ptr [esi+14h] 0 +
mov ecx esi +
call sub_100BE03  +
push 1  +
mov ecx esi +
call sub_1008489  +
mov eax edi +
pop edi  +
pop esi  +
retn 4  +
***
xor edi edi +
jmp loc_100BD8F  +
***
xor eax eax +
inc eax  +
cmp dword ptr [ecx+10h] 0 +
jnz loc_103A3F0  +
retn   +
***
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
push ecx  +
lea eax [ebp-4] +
push eax  +
call sub_100BA59  +
mov eax [ebp-4] +
cmp eax [esi+8] +
jz loc_100BEEE  +
lea eax [ebp+8] +
push eax  +
lea ecx [esi+4] +
call sub_100BEF8  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+4] +
mov eax [esi] +
cmp eax esi +
jz loc_100BEB2  +
mov ecx [eax+8] +
mov edx [ebp+arg_0] +
cmp ecx [edx] +
jz loc_100BF19  +
mov eax [eax] +
jmp loc_100BF07  +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
call sub_100BA88  +
jmp loc_100BF15  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+14h] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx esi +
pop esi  +
jmp loc_100BEA4  +
***
jmp loc_100BF52  +
push 4  +
mov eax offset loc_1080AB0 +
call sub_100208C  +
mov esi ecx +
xor ebx ebx +
cmp [esi+3F4h] bl +
jnz loc_1041656  +
call sub_1002061  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
lea eax [ebp+0Ch] +
mov esi ecx +
mov ecx dword_108A24C +
push eax  +
call sub_100839D  +
fldz   +
push dword ptr [ebp+8]  +
fstp  dword ptr [ebp-4] +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-8] 0 +
lea eax [esi+0Ch] +
mov ecx esi +
mov [ebp-10h] eax +
call sub_100BFCD  +
mov ecx [esi+4] +
lea edx [ebp-14h] +
push edx  +
lea edx [ebp+0Ch] +
mov [ebp-0Ch] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+50h]  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax ecx +
and al 2 +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 9 +
and ecx 1 +
or eax ecx +
pop ebp  +
retn 4  +
***
mov eax ecx +
and dword ptr [eax+4] 0 +
and dword ptr [eax] 0 +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
fld  qword ptr [ecx] +
fstp  qword ptr [eax] +
fld  qword ptr [ecx+8] +
fstp  qword ptr [eax+8] +
fld  qword ptr [ecx+10h] +
fstp  qword ptr [eax+10h] +
fld  qword ptr [ecx+18h] +
fstp  qword ptr [eax+18h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push dword ptr [esi+4]  +
call sub_100C060  +
test eax eax +
jnz loc_100F0CA  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ecx+40h] +
mov esi [edi] +
xor ebx ebx +
cmp esi edi +
jz loc_100C08A  +
push [ebp+arg_0]  +
lea eax [esi+8] +
push eax  +
call sub_100ECDB  +
test al al +
jz loc_1048009  +
lea ebx [esi+8] +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp byte ptr [ecx+10h] 0 +
jnz loc_1043CD8  +
lea eax [ecx+38h] +
jmp loc_100BE11  +
***
call sub_100C0B4  +
jmp loc_100BE42  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_108BC04 0 +
push esi  +
push edi  +
mov edi ecx +
mov esi 40000000h +
jnz loc_1043D00  +
cmp dword ptr [edi+14h] 0 +
jnz loc_1043D61  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_100C11B  +
cmp dword ptr [edi+14h] 0 +
mov [ebp+arg_0] eax +
jz loc_100C100  +
mov ecx [edi+14h] +
mov eax [ecx] +
call dword ptr [eax+8]  +
push 1  +
mov ecx edi +
mov [ebp+arg_0] eax +
call sub_1008489  +
cmp dword_108BC04 0 +
jnz loc_1043D6E  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
mov ecx offset unk_108AF60 +
xor edi edi +
call sub_100C14F  +
test eax eax +
jz loc_100C13B  +
inc edi  +
mov [esi+14h] eax +
mov ecx esi +
call sub_100BE03  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 404h +
pop ebp  +
jmp loc_100C162  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
xor edi edi +
call sub_100C193  +
mov eax [ebp+var_4] +
cmp eax [esi+4] +
jz loc_100C186  +
mov edi [eax+10h] +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_100C1D4  +
mov esi [esi+4] +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_100C1C7  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jl loc_100C1C7  +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
jmp loc_100C1BA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+15h] 0 +
jnz loc_100C1F8  +
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp [ecx+0Ch] edx +
jge loc_100C1FC  +
mov ecx [ecx+8] +
cmp byte ptr [ecx+15h] 0 +
jz loc_100C1EA  +
pop ebp  +
retn 4  +
mov eax ecx +
mov ecx [ecx] +
jmp loc_100C1F2  +
***
xor eax eax +
inc eax  +
cmp dword ptr [ecx+10h] 0 +
jnz loc_1039F00  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_108B3CC +
mov ecx [eax] +
mov [ebp+var_4] ecx +
cmp ecx eax +
jnz loc_1031560  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz locret_100C292  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100C2C1  +
test byte ptr [ebp+8] 1 +
jz loc_100C2B5  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
mov dword ptr [esi] offset off_100C21C +
test eax eax +
jz loc_100C2DA  +
push eax  +
call ds:CloseHandle  +
push dword ptr [esi+8]  +
mov dword ptr [esi+4] offset off_100B2A4 +
call GdipDisposeImage  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+15h] dl +
jnz loc_1048DC0  +
mov ecx [eax+8] +
cmp [ecx+15h] dl +
jz loc_1021209  +
mov eax [eax+4] +
cmp [eax+15h] dl +
jnz loc_100C321  +
mov ecx [esi] +
cmp ecx [eax+8] +
jz loc_1048DCF  +
mov [esi] eax +
pop esi  +
retn   +
***
cmp byte ptr [ebx+15h] 0 +
jz sub_1048E69  +
mov eax esi +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_100C3BF  +
mov [eax+4] ebx +
jmp loc_100C39B  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+15h] 0 +
jnz loc_1048E15  +
lea ecx [ebp+0Ch] +
call sub_100C2F0  +
mov edx [edi] +
cmp byte ptr [edx+15h] 0 +
jz loc_1048E47  +
mov ebx [edi+8] +
cmp byte ptr [ebx+15h] 0 +
mov esi [edi+4] +
jz loc_101E6EB  +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jz loc_100C33C  +
cmp [esi] edi +
jnz loc_101E735  +
mov [esi] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_100C3B3  +
cmp byte ptr [ebx+15h] 0 +
jz loc_101E6F3  +
mov eax esi +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jz loc_100C325  +
cmp byte ptr [edi+14h] 1 +
jnz loc_100C434  +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_100C430  +
cmp byte ptr [ebx+14h] 1 +
jnz loc_100C430  +
mov eax [esi] +
cmp ebx eax +
jnz loc_1048ED8  +
mov eax [esi+8] +
cmp byte ptr [eax+14h] 0 +
jz loc_101E701  +
cmp byte ptr [eax+15h] 0 +
jnz loc_100C405  +
mov edx [eax] +
cmp byte ptr [edx+14h] 1 +
jnz loc_100C40C  +
mov edx [eax+8] +
cmp byte ptr [edx+14h] 1 +
jnz loc_100C40C  +
mov byte ptr [eax+14h] 0 +
mov ebx esi +
mov esi [esi+4] +
jmp loc_100C3C5  +
mov edx [eax+8] +
cmp byte ptr [edx+14h] 1 +
jz loc_101E71A  +
mov dl [esi+14h] +
mov [eax+14h] dl +
mov byte ptr [esi+14h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+14h] 1 +
call sub_1014074  +
mov byte ptr [ebx+14h] 1 +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_100C449  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1045CC9  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 18h +
jb loc_1045CD0  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_100C4F0  +
***
call sub_100208C  +
mov edi ecx +
cmp dword ptr [edi+8] 1FFFFFFEh +
jnb loc_104112F  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_100C560  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jz loc_100C48F  +
cmp byte ptr [ebp+0Ch] 0 +
jnz loc_10143F4  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_100C4F3  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
mov ecx [eax] +
cmp byte ptr [ecx+14h] 0 +
jnz loc_100C544  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jz loc_1014456  +
mov edx [edx] +
cmp byte ptr [edx+14h] 0 +
jz loc_1014491  +
cmp esi [ecx] +
jz loc_1014408  +
mov eax [esi+4] +
mov byte ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1014074  +
lea eax [esi+4] +
jmp loc_100C4F8  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+14h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1002061  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0  +
push 1  +
mov edi ecx +
call sub_100C45E  +
push [ebp+arg_10]  +
mov esi eax +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_100C598  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100C5B8  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100C5C1  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov edx [ecx] +
mov [eax+0Ch] edx +
mov ecx [ecx+4] +
mov [eax+10h] ecx +
mov cl [ebp+arg_10] +
mov [eax+14h] cl +
mov byte ptr [eax+15h] 0 +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+4] +
cmp byte ptr [eax+15h] 0 +
push edi  +
mov edi ecx +
mov byte ptr [ebp+var_4] 1 +
jnz loc_100C638  +
mov ecx [ebx] +
cmp ecx [eax+0Ch] +
mov edi eax +
setb byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jnz loc_1019EE0  +
mov eax [eax+8] +
cmp byte ptr [eax+15h] 0 +
jz loc_100C61C  +
cmp byte ptr [ebp+var_4] 0 +
mov ecx edi +
mov [ebp+arg_4] ecx +
jnz loc_100C670  +
mov eax [ecx+0Ch] +
cmp eax [ebx] +
jnb loc_1019EE7  +
push ebx  +
push edi  +
push [ebp+var_4]  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_100C4A1  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
mov eax [esi+4] +
cmp edi [eax] +
jz loc_100C684  +
lea ecx [ebp+arg_4] +
call sub_101441C  +
mov ecx [ebp+arg_4] +
jmp loc_100C643  +
push ebx  +
push edi  +
push 1  +
jmp loc_100C653  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+0Ch] ecx +
mov [eax+8] ecx +
mov [eax+4] ecx +
mov [eax] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov [eax] edx +
mov edx [ecx+4] +
mov [eax+4] edx +
mov edx [ecx+8] +
mov [eax+8] edx +
mov ecx [ecx+0Ch] +
mov [eax+0Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov [eax+0Ch] ecx +
pop ebp  +
retn 10h  +
***
call sub_100208C  +
push 30h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_100C742  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100C74F  +
call sub_1002061  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 26200Ah  +
mov esi ecx +
push 1  +
push 1  +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_100C21C +
call sub_100B2C5  +
mov eax [ebp+arg_0] +
mov [esi+14h] eax +
mov eax [ebp+arg_4] +
mov [esi+18h] eax +
mov eax [ebp+arg_8] +
mov [esi+1Ch] eax +
mov eax [ebp+arg_C] +
mov [esi+20h] eax +
xor eax eax +
push eax  +
push eax  +
push eax  +
mov dword ptr [esi+24h] 6 +
mov [esi+28h] eax +
mov [esi+2Ch] eax +
call ds:CreateMutexW  +
mov [esi+28h] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_108A24C +
xor eax eax +
cmp ecx eax +
jz loc_100C7F2  +
cmp [ecx+40h] eax +
jz loc_100C7F2  +
mov eax [ecx+40h] +
mov eax [eax+0Ch] +
mov edx [ebp+8] +
mov [edx] eax +
mov eax [ecx+40h] +
mov eax [eax+2Ch] +
mov edx [ebp+0Ch] +
mov [edx] eax +
mov eax [ecx+40h] +
mov eax [eax+30h] +
mov edx [ebp+10h] +
mov [edx] eax +
mov eax [ecx+40h] +
mov eax [eax+38h] +
mov ecx [ebp+14h] +
mov [ecx] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100C812  +
push eax  +
call sub_100C26D  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call dword ptr [esi+4]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
push [ebp+var_C]  +
push [ebp+var_10]  +
call sub_100C70F  +
mov [esi] eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
lea ecx [esi+10h] +
xor bl bl +
call sub_100B9A1  +
test eax eax +
jbe loc_100C866  +
mov eax [esi+14h] +
push [ebp+arg_0]  +
mov ecx [eax] +
call sub_100C873  +
inc bl  +
pop esi  +
mov al bl +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100C7FB  +
mov ecx [esi] +
test ecx ecx +
jz loc_100C89C  +
push edi  +
call sub_100BB97  +
mov edi [ebp+arg_0] +
mov [edi] eax +
mov ecx [esi] +
call sub_100C000  +
mov [edi+4] eax +
pop edi  +
xor eax eax +
cmp [esi] eax +
pop esi  +
setnz al  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
lea eax [ebp+0Ch] +
mov esi ecx +
mov ecx dword_108A24C +
push eax  +
call sub_100839D  +
fldz   +
push dword ptr [ebp+8]  +
fstp  dword ptr [ebp-4] +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-8] 0 +
lea eax [esi+0Ch] +
mov ecx esi +
mov [ebp-10h] eax +
call sub_100BFCD  +
mov ecx [esi+4] +
lea edx [ebp-14h] +
push edx  +
lea edx [ebp+0Ch] +
mov [ebp-0Ch] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+54h]  +
pop esi  +
leave   +
retn 0Ch  +
***
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push dword ptr [esi+4]  +
mov edi ecx +
call sub_100C060  +
test eax eax +
jz loc_100C985  +
mov ecx [eax+0Ch] +
mov eax [ecx] +
push esi  +
push [ebp+arg_0]  +
call dword ptr [eax+3Ch]  +
cmp dword ptr [edi+44h] 0 +
jnz loc_100C992  +
mov dword ptr [edi+20h] 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
lea eax [ebp+0Ch] +
mov esi ecx +
mov ecx dword_108A24C +
push eax  +
call sub_100839D  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_100CA00  +
test al al +
jz loc_100C9F6  +
fldz   +
push dword ptr [ebp+8]  +
and dword ptr [ebp-14h] 0 +
fstp  dword ptr [ebp-4] +
and dword ptr [ebp-8] 0 +
lea eax [esi+0Ch] +
mov ecx esi +
mov [ebp-10h] eax +
call sub_100BFCD  +
mov ecx [esi+4] +
lea edx [ebp-14h] +
push edx  +
lea edx [ebp+0Ch] +
mov [ebp-0Ch] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+58h]  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
lea ecx [ebp+var_8] +
xor bl bl +
call sub_100BFF1  +
mov ecx [esi+8] +
lea eax [ebp+var_8] +
push eax  +
call sub_100C840  +
test al al +
jz loc_100CA56  +
push [ebp+var_4]  +
xor ecx ecx +
push [ebp+var_8]  +
xor eax eax +
push ecx  +
push eax  +
lea ecx [ebp+rc] +
call sub_100CA63  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
lea eax [ebp+rc] +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_103D25E  +
inc bl  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
mov eax ecx +
mov ecx [ebp+arg_0] +
add edx ecx +
mov [eax+8] edx +
mov edx [ebp+arg_C] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
add edx ecx +
mov [eax+4] ecx +
mov [eax+0Ch] edx +
pop ebp  +
retn 10h  +
***
mov edx [ecx+4] +
test edx edx +
jz loc_100CB59  +
mov eax [ecx+8] +
sub eax edx +
sar eax 3 +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_100CAC8  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jz loc_100CB5C  +
mov eax [ecx+0Ch] +
sub eax edx +
sar eax 3 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_103D79C  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 8 +
jb loc_103D7A3  +
mov eax ecx +
shl eax 3 +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1047FE9  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 40h +
jb loc_1047FF0  +
shl ecx 6 +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
xor eax eax +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_103DAE0  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_104115A  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebx  +
push offset off_108D3E8  +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_1007050  +
mov eax [eax+8] +
mov ecx [edi+8] +
mov [eax] ecx +
jmp loc_100704C  +
***
call sub_100208C  +
lea eax [ecx+50h] +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_100CBBC +
mov [ebp-10h] eax +
mov ecx [ecx+48h] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
call sub_1005BE0  +
call sub_1002061  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call sub_100C207  +
mov edi eax +
test edi edi +
jz loc_100CCA8  +
mov ecx [esi+14h] +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
call sub_100CC4D  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
jmp loc_100CCBE  +
push 4  +
mov eax offset loc_1080AB0 +
call sub_100208C  +
mov esi ecx +
xor ebx ebx +
cmp [esi+3F4h] bl +
jnz loc_10415E4  +
call sub_1002061  +
retn   +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
call sub_100BCF1  +
and dword ptr [esi+8] 0 +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [esi+4] eax +
mov ecx [ecx+4] +
mov edx [ecx] +
mov eax [eax] +
push ecx  +
push edx  +
push eax  +
mov ecx esi +
call sub_100CD29  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100CD48  +
pop ebp  +
retn 0Ch  +
***
call sub_1002370  +
mov [ebp-14h] ecx +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov [ebp-18h] eax +
cmp eax [ebp+10h] +
jnz loc_100CD6E  +
call sub_1002061  +
retn 10h  +
mov ecx [ebp-14h] +
add eax 8 +
push eax  +
push dword ptr [ebp+8]  +
call sub_100BC85  +
mov eax [ebp+0Ch] +
mov eax [eax] +
mov [ebp+0Ch] eax +
jmp loc_100CD61  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipGetImagePixelFormat  +
push eax  +
mov ecx esi +
call sub_100B289  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_100B2A4 +
call GdipDisposeImage  +
test byte ptr [ebp+8] 1 +
jz loc_100CDE1  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
mov dword ptr [esi] offset off_100B22C +
call GdipCreateBitmapFromHBITMAP  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov eax offset __imp_GdipCreateBitmapFromHBITMAP +
jmp loc_100ABE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_0] +
fld  [ebp+arg_4] +
fcompp st(1) st +
fnstsw  ax +
test ah 41h +
jz loc_1036DA8  +
fld  [ebp+arg_0] +
fld  [ebp+arg_8] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jnp loc_1045CC1  +
fld  [ebp+arg_0] +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld1   +
push esi  +
sub esp 0Ch +
fstp  [esp+10h+var_8] +
fldz   +
mov esi ecx +
fstp  [esp+10h+var_C] +
fld  [ebp+arg_0] +
fstp  [esp+10h+var_10] +
call sub_100CE39  +
fstp  qword ptr [esi] +
fld1   +
sub esp 0Ch +
fstp  [esp+10h+var_8] +
fldz   +
fstp  [esp+10h+var_C] +
fld  [ebp+arg_4] +
fstp  [esp+10h+var_10] +
call sub_100CE39  +
fstp  qword ptr [esi+8] +
fld1   +
sub esp 0Ch +
fstp  [esp+10h+var_8] +
fldz   +
fstp  [esp+10h+var_C] +
fld  [ebp+arg_8] +
fstp  [esp+10h+var_10] +
call sub_100CE39  +
fstp  qword ptr [esi+10h] +
fld1   +
sub esp 0Ch +
fstp  [esp+10h+var_8] +
fldz   +
fstp  [esp+10h+var_C] +
fld  [ebp+arg_C] +
fstp  [esp+10h+var_10] +
call sub_100CE39  +
fstp  qword ptr [esi+18h] +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1043CE0  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 10h +
jb loc_1043CE7  +
shl ecx 4 +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_100C009  +
mov al [edi+20h] +
mov [esi+20h] al +
fld  dword ptr [edi+24h] +
fstp  dword ptr [esi+24h] +
mov eax esi +
fld  dword ptr [edi+28h] +
fstp  dword ptr [esi+28h] +
fld  dword ptr [edi+2Ch] +
fstp  dword ptr [esi+2Ch] +
fld  dword ptr [edi+30h] +
fstp  dword ptr [esi+30h] +
fld  dword ptr [edi+34h] +
fstp  dword ptr [esi+34h] +
fld  dword ptr [edi+38h] +
pop edi  +
fstp  dword ptr [esi+38h] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov [eax] edx +
mov edx [ecx+4] +
mov [eax+4] edx +
mov edx [ecx+8] +
mov [eax+8] edx +
mov edx [ecx+0Ch] +
mov [eax+0Ch] edx +
mov edx [ecx+10h] +
mov [eax+10h] edx +
mov cl [ecx+14h] +
mov [eax+14h] cl +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipGetImageWidth  +
push eax  +
mov ecx esi +
call sub_100B289  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipGetImageHeight  +
push eax  +
mov ecx esi +
call sub_100B289  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
push esi  +
mov esi ecx +
test eax eax +
jnz loc_10401C5  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100D077  +
mov ecx [ecx+4] +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push eax  +
push [ebp+arg_18]  +
mov eax [ebp+arg_4] +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push ecx  +
push dword ptr [esi]  +
call GdipDrawImageRectRectI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 28h  +
xor ecx ecx +
jmp loc_100D03E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
xor esi esi +
call sub_100D11D  +
test eax eax +
jz loc_100D110  +
push ebx  +
push dword ptr [edi+30h]  +
lea eax [ebp+rc] +
push dword ptr [edi+2Ch]  +
push esi  +
push esi  +
push eax  +
call ds:SetRect  +
push dword ptr [edi+0Ch]  +
call ds:CreateCompatibleDC  +
mov ebx eax +
cmp ebx esi +
jz loc_100D10F  +
push dword_108A228  +
mov esi ds:SelectObject +
push ebx  +
call esi  +
push 0CC0020h  +
push dword ptr [ebp-0Ch]  +
mov [ebp+arg_0] eax +
push [ebp+rc]  +
mov eax [ebp-4] +
push dword ptr [edi+0Ch]  +
sub eax [ebp-0Ch] +
push eax  +
mov eax [ebp-8] +
sub eax [ebp+rc] +
push eax  +
push 0  +
push 0  +
push ebx  +
call ds:BitBlt  +
push [ebp+arg_0]  +
push ebx  +
call esi  +
push ebx  +
call ds:DeleteDC  +
xor esi esi +
inc esi  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+2Ch] +
push edi  +
cmp dword_108A1F8 eax +
jnz loc_100B06D  +
mov ecx dword_108A1F4 +
cmp ecx [esi+30h] +
jnz loc_100B06D  +
movzx ecx byte_108A1C3 +
cmp ecx [esi+34h] +
jnz loc_100B06D  +
movzx ecx byte_108A1C0 +
cmp ecx [esi+38h] +
jnz loc_100B06D  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
cmp dword_108A20C ebx +
jz loc_100D1E1  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
cmp esi ebx +
jz loc_1034E8F  +
mov eax dword_108B1D4 +
mov [ebp+arg_4] ebx +
cmp eax ebx +
mov ebx ds:SelectPalette +
jnz loc_103EF5C  +
mov eax [esi+4] +
mov ecx [esi] +
mov edx [esi+0Ch] +
push 0CC0020h  +
push eax  +
push ecx  +
push dword ptr [edi+0Ch]  +
sub edx eax +
push edx  +
mov edx [esi+8] +
sub edx ecx +
push edx  +
push eax  +
push ecx  +
push dword_108A20C  +
call ds:BitBlt  +
cmp [ebp+arg_4] 0 +
pop edi  +
pop esi  +
jnz loc_103EF86  +
pop ebx  +
leave   +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
lea eax [esi+6A8h] +
inc dword ptr [eax]  +
mov eax [eax] +
cmp eax 1 +
jnz loc_100D259  +
xor edi edi +
cmp [ebp+0Ch] edi +
jz loc_100D225  +
cmp [esi+6DCh] edi +
jg loc_1043397  +
push 28h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+0Ch] ecx +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_100D261  +
call sub_100D275  +
push dword ptr [ebp+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [eax+24h] +
mov [esi+6E0h] eax +
call ??4CString@@QAEABV0@PBG@Z  +
mov dword_108A320 edi +
call sub_1002061  +
retn 8  +
xor eax eax +
jmp loc_100D23E  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CByteArray@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+24h] +
mov dword ptr [esi] offset off_1009A70 +
call ??0CString@@QAE@XZ  +
push 64h  +
push 0  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call ?SetSize@CByteArray@@QAEXHH@Z  +
fld  ds:dbl_100D1E8 +
and dword ptr [esi+20h] 0 +
fstp  qword ptr [esi+18h] +
mov eax esi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
call sub_10049D9  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+0C4h]  +
xor edi edi +
mov esi eax +
inc edi  +
test esi esi +
jz loc_100D305  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+64h]  +
cmp dword_108B190 0 +
jnz loc_103EF42  +
mov eax [ebp+arg_0] +
mov ecx [eax+4] +
push edi  +
mov [eax+8] edi +
call sub_100409B  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp-10h]  +
call sub_100D1F5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
and dword ptr [esi+20h] 0 +
cmp dword ptr [esi+8] 0 +
jle loc_100D3DF  +
push dword ptr [esi+20h]  +
mov ecx esi +
call sub_1009B8B  +
cmp al 2 +
jnz loc_100D3DF  +
push 1  +
lea eax [ebp-1] +
push eax  +
mov ecx esi +
call sub_1009B54  +
push 4  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call sub_1009B54  +
push 4  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1009B54  +
push 4  +
lea eax [ebp+var_C] +
push eax  +
mov ecx esi +
call sub_1009B54  +
cmp [ebp+var_8] 3EAh +
jz loc_10433CC  +
cmp [ebp+var_8] 3E9h +
jz loc_10433CC  +
add dword ptr [esi+20h] 0FFFFFFF3h +
mov eax [esi+20h] +
cmp eax [esi+8] +
jz loc_10433E3  +
push 1  +
lea eax [ebp-1] +
push eax  +
mov ecx esi +
call sub_1009B54  +
cmp [ebp+var_1] 7 +
jz loc_10433EA  +
cmp [ebp+var_1] 9 +
jz loc_10433EA  +
and dword ptr [esi+20h] 0 +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 8  +
***
call sub_10020DC  +
fld  ds:dbl_100D1E8 +
mov esi ecx +
fcomp  qword ptr [esi+18h] +
fnstsw  ax +
test ah 44h +
jnp loc_100D452  +
fld  qword ptr [esi+18h] +
call sub_1002119  +
retn   +
fldz   +
xor edi edi +
cmp [esi+8] edi +
fstp  qword ptr [esi+18h] +
mov [esi+20h] edi +
jle loc_100D54C  +
push 1  +
lea eax [ebp-439h] +
push eax  +
mov ecx esi +
call sub_1009B54  +
push 4  +
pop ebx  +
push ebx  +
lea eax [ebp-458h] +
push eax  +
mov ecx esi +
call sub_1009B54  +
push ebx  +
lea eax [ebp-444h] +
push eax  +
mov ecx esi +
call sub_1009B54  +
movzx eax byte ptr [ebp-439h] +
add eax 0FFFFFFFEh +
cmp eax 8 +
ja loc_100D4AC  +
jmp ds:off_100D5B0[eax*4]  +
push ebx  +
lea eax [ebp-444h] +
push eax  +
mov ecx esi +
call sub_1009B54  +
push 10h  +
lea eax [ebp-468h] +
push eax  +
mov ecx esi +
call sub_1009B54  +
push ebx  +
lea eax [ebp-454h] +
push eax  +
mov ecx esi +
call sub_1009B54  +
push 428h  +
lea eax [ebp-438h] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
push edi  +
mov dword ptr [ebp-438h] 28h +
call ds:CreateCompatibleDC  +
push edi  +
mov ebx eax +
lea eax [ebp-438h] +
push eax  +
push edi  +
push edi  +
push edi  +
push dword ptr [ebp-454h]  +
push ebx  +
call ds:GetDIBits  +
push ebx  +
call ds:DeleteDC  +
mov eax [ebp-424h] +
shr eax 0Ah +
mov [ebp-444h] eax +
fild  dword ptr [ebp-444h] +
test eax eax +
jl loc_100D5A8  +
fadd  qword ptr [esi+18h] +
fstp  qword ptr [esi+18h] +
mov eax [esi+20h] +
cmp eax [esi+8] +
jl loc_100D465  +
mov [esi+20h] edi +
jmp loc_100D449  +
push 8  +
lea eax [ebp-448h] +
jmp loc_1035B3C  +
lea ecx [ebp-440h] +
call ??0CString@@QAE@XZ  +
lea eax [ebp-440h] +
push eax  +
mov ecx esi +
mov [ebp-4] edi +
call sub_106357E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-440h] +
call ??1CString@@QAE@XZ  +
jmp loc_100D540  +
push 10h  +
lea eax [ebp-450h] +
jmp loc_1035B3C  +
push 8  +
lea eax [ebp-448h] +
jmp loc_1035B3C  +
fadd  ds:dbl_104A350 +
jmp loc_100D53A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ebx ecx +
test esi esi +
jz loc_103DC26  +
lea edi [ebp+rc] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+rc.right] +
xor esi esi +
cmp [ebp+rc.left] eax +
mov [ebp+arg_0] esi +
mov [ebp+var_C] esi +
mov [ebp+var_10] esi +
mov [ebp+var_8] esi +
jge loc_100D76E  +
mov ecx [ebp+rc.bottom] +
cmp [ebp+rc.top] ecx +
jge loc_100D76E  +
sub ecx [ebp+rc.top] +
sub eax [ebp+rc.left] +
push ecx  +
push eax  +
mov eax [ebx+4] +
push dword ptr [eax+0Ch]  +
call ds:CreateCompatibleBitmap  +
mov [ebp+var_8] eax +
cmp eax esi +
jz loc_103DC67  +
mov eax [ebx+4] +
push dword ptr [eax+0Ch]  +
mov edi ds:CreateCompatibleDC +
call edi  +
mov esi eax +
mov [ebp+var_4] esi +
test esi esi +
jz loc_103DC40  +
mov eax [ebx+4] +
push dword ptr [eax+0Ch]  +
call edi  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_103DC40  +
mov eax [ebx+4] +
mov eax [eax+24h] +
mov edi ds:SelectPalette +
test eax eax +
jnz loc_103DC7B  +
push [ebp+var_8]  +
push esi  +
mov esi ds:SelectObject +
call esi  +
push dword_108A228  +
mov [ebp+var_14] eax +
push [ebp+arg_0]  +
call esi  +
push 0CC0020h  +
push [ebp+rc.top]  +
mov [ebp+var_18] eax +
push [ebp+rc.left]  +
mov eax [ebp+rc.bottom] +
push [ebp+arg_0]  +
sub eax [ebp+rc.top] +
push eax  +
mov eax [ebp+rc.right] +
sub eax [ebp+rc.left] +
push eax  +
push 0  +
push 0  +
push [ebp+var_4]  +
call ds:BitBlt  +
push [ebp+var_14]  +
push [ebp+var_4]  +
call esi  +
push [ebp+var_18]  +
push [ebp+arg_0]  +
call esi  +
xor esi esi +
cmp [ebp+var_C] esi +
jnz loc_103DCAF  +
cmp [ebp+var_10] esi +
jnz loc_103DCBD  +
push [ebp+var_4]  +
mov esi ds:DeleteDC +
call esi  +
push [ebp+arg_0]  +
call esi  +
push 1  +
mov esi offset unk_108B4B8 +
push 0C376h  +
mov ecx esi +
call sub_100D31F  +
push 4  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_100D77D  +
push 10h  +
lea eax [ebp+rc] +
push eax  +
mov ecx esi +
call sub_100D77D  +
push 4  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
mov [ebp+arg_0] 14h +
call sub_100D77D  +
push 4  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
mov [ebp+arg_0] 3E8h +
call sub_100D77D  +
push ebx  +
mov ecx esi +
call sub_100D7F2  +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
mov byte ptr [ebp+arg_0] 2 +
call sub_100D77D  +
mov ecx esi +
call sub_100D848  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
push ebx  +
xor esi esi +
mov edi ecx +
mov ecx [edi+6E0h] +
push esi  +
push esi  +
call ?InsertAt@CByteArray@@QAEXHEH@Z  +
cmp ebx esi +
jle loc_100D7B7  +
mov eax [ebp+arg_0] +
movzx eax byte ptr [esi+eax] +
mov ecx [edi+6E0h] +
push eax  +
push esi  +
call sub_100D7C5  +
inc esi  +
cmp esi ebx +
jl loc_100D79E  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_100D7E3  +
cmp eax [ecx+8] +
jge loc_100D7E3  +
mov ecx [ecx+4] +
mov dl [ebp+arg_4] +
mov [ecx+eax] dl +
pop ebp  +
retn 8  +
call MFC42u_6928  +
jmp near ptr byte_1043396  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100D807  +
push esi  +
call sub_100D81E  +
push 4  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_100D77D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push [ebp+arg_0]  +
lea esi [ecx+688h] +
mov ecx esi +
call ?Find@CObList@@QBEPAU__POSITION@@PAVCObject@@PAU2@@Z  +
test eax eax +
jz loc_100B178  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
dec dword ptr [esi+6A8h]  +
jnz loc_100D8B0  +
mov ecx [esi+6E0h] +
lea eax [esi+6B8h] +
push eax  +
lea eax [esi+6B4h] +
push eax  +
call sub_100D36A  +
test eax eax +
jz loc_1043447  +
mov eax [esi+6DCh] +
test eax eax +
jg loc_1043464  +
push dword ptr [esi+6E0h]  +
lea ecx [esi+6C0h] +
call ?AddHead@CObList@@QAEPAU__POSITION@@PAVCObject@@@Z  +
and dword ptr [esi+6E0h] 0 +
mov ecx esi +
call sub_1008B46  +
cmp dword_108A320 0 +
jnz loc_1043488  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
mov esi offset unk_108B3C8 +
push eax  +
mov ecx esi +
call sub_1005AF7  +
mov edi [ebp+var_4] +
cmp edi dword_108B3CC +
jnz loc_100DD4D  +
mov ecx [ebp+arg_0] +
pop edi  +
pop esi  +
test ecx ecx +
jz locret_100D8FD  +
push 1  +
call sub_100D906  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100D92C  +
test [ebp+arg_0] 1 +
jz loc_100D920  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+14h]  +
call GdipDeleteGraphics  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+10h] ebx +
jnz loc_100D96B  +
push edi  +
mov edi [esi+8] +
mov eax [esi+4] +
cmp edi ebx +
ja loc_100D978  +
pop edi  +
cmp eax ebx +
jnz loc_1045D2B  +
mov [esi+8] ebx +
mov [esi+4] ebx +
pop esi  +
pop ebx  +
retn   +
mov eax [esi+10h] +
cmp eax ebx +
jnz loc_1045D0A  +
jmp loc_100D949  +
dec edi  +
lea eax [eax+edi*4] +
cmp [eax] ebx +
jnz loc_1045D1E  +
jmp loc_100D952  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
xor edi edi +
push ebx  +
lea ecx [esi+14h] +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
call sub_100DA72  +
mov [esi+1Ch] edi +
pop edi  +
mov [esi+20h] ebx +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call GdipCreateFromHDC  +
mov [esi+4] eax +
mov eax [ebp+var_4] +
mov [esi] eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipSetSmoothingMode  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100DAEC  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+10h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100DB1B  +
test byte ptr [ebp+8] 1 +
jz loc_100DB0F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100D98C +
push dword ptr [esi+3Ch]  +
mov dword ptr [esi+38h] offset off_100B384 +
call GdipDeleteBrush  +
push dword ptr [esi+30h]  +
call GdipDeletePen  +
mov dword ptr [esi] offset off_100DB4C +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov edx [ebp+8] +
mov eax [ecx+8] +
mov ecx [eax] +
push esi  +
mov esi [ebp+0Ch] +
push esi  +
push edx  +
push eax  +
push ecx  +
lea eax [ebp-8] +
push eax  +
call sub_100DBBB  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_8] +
jz loc_100DBDD  +
push dword ptr [eax+8]  +
lea ecx [ebp+arg_C] +
call sub_100DD02  +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov [ebp+arg_4] eax +
jmp loc_100DBC3  +
mov ecx [ebp+arg_C] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_10] +
mov [eax+4] ecx +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx offset unk_108B074 +
call sub_100BB42  +
test eax eax +
jnz loc_103A009  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+8] +
mov eax [edx] +
cmp eax 14h +
jb loc_100DC36  +
cmp eax 15h +
ja loc_100E57C  +
push edx  +
call sub_100DE4B  +
pop ebp  +
retn 4  +
***
mov eax [ecx+8] +
mov ecx [ecx] +
cmp eax ecx +
jl loc_1045CB7  +
sub eax ecx +
retn   +
***
mov eax [ecx+0Ch] +
mov ecx [ecx+4] +
cmp eax ecx +
jl loc_1045CBC  +
sub eax ecx +
retn   +
***
call sub_100208C  +
mov esi [ebp+8] +
cmp dword ptr [esi+14h] 0 +
push 24h  +
jz loc_10313C5  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+8] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_10313E8  +
mov ecx esi +
call sub_100DD38  +
mov ecx [ebp+8] +
push eax  +
call sub_100DA3A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov edi eax +
mov [ebp-14h] eax +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx offset unk_108B3C8 +
mov [ebp-10h] esi +
call sub_100C5FA  +
mov eax edi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
dec eax  +
push 3  +
pop edx  +
jz loc_100A284  +
dec eax  +
jz loc_100A27C  +
push edx  +
add ecx 14h +
call sub_100DAAA  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
cmp ecx [eax+4] +
jz loc_100DD17  +
push dword ptr [eax]  +
mov edx [ecx] +
call dword ptr [edx]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
push 0  +
push [ebp+arg_0]  +
call dword ptr [eax+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push dword ptr [esi+28h]  +
call ds:WaitForSingleObject  +
mov eax [esi+14h] +
pop esi  +
retn   +
***
mov ecx [edi+10h] +
call sub_100DD6B  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_100C346  +
jmp loc_100D8ED  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jz loc_1045DE4  +
mov ecx esi +
call sub_100DC54  +
mov ecx esi +
mov ebx eax +
call sub_100DC3F  +
mov ecx [esi] +
mov [ebp+var_10] ecx +
mov ecx [esi+4] +
mov [ebp+var_8] eax +
push 0  +
lea eax [ebp+var_10] +
mov [ebp+var_C] ecx +
push eax  +
lea ecx [edi+14h] +
mov [ebp+var_4] ebx +
call sub_100DE0E  +
mov ebx eax +
neg ebx  +
sbb bl bl +
inc bl  +
pop edi  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push dword ptr [esi]  +
call GdipSetClipRectI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push offset off_108D014  +
push offset off_108CFD4  +
push ebx  +
push dword ptr [eax+4]  +
mov esi ecx +
mov [ebp+var_4] esi +
call __RTDynamicCast  +
add esp 14h +
mov edi eax +
cmp [esi+24h] ebx +
jz loc_100DEF7  +
mov ecx [esi+20h] +
mov eax [ecx] +
cmp eax ecx +
jz loc_100DEF7  +
cmp [eax+8] edi +
jnz loc_1043E24  +
mov esi dword_108A24C +
add eax 10h +
lea ebx [edi+14h] +
push ebx  +
push eax  +
mov [ebp+var_8] eax +
lea eax [ebp+rcSrc2] +
push eax  +
call ds:UnionRect  +
lea eax [ebp+rcSrc2] +
push eax  +
mov ecx esi +
call sub_100DBF4  +
lea eax [ebp+rcSrc2] +
push eax  +
push dword ptr [esi+40h]  +
call sub_1005D16  +
mov ecx [ebp+var_4] +
call sub_100BB42  +
test eax eax +
jnz sub_103A4EB  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 15h +
jz loc_100DEEC  +
mov ecx [ebp+var_4] +
push 0Dh  +
call sub_100BB79  +
test al al +
jnz loc_1039B68  +
mov ecx dword_108A1EC +
call sub_10077DE  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
fld  qword ptr [esi+10h] +
fld  ds:dbl_100DFB0 +
fmul st(1) st +
fxch  st(1) +
call _ftol2  +
fld  qword ptr [esi+8] +
movzx eax al +
fmul st st(1) +
push eax  +
call _ftol2  +
movzx eax al +
fld  qword ptr [esi] +
fmul st st(1) +
push eax  +
call _ftol2  +
movzx eax al +
fmul  qword ptr [esi+18h] +
push eax  +
call _ftol2  +
movzx eax al +
push eax  +
call sub_100B85D  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax ecx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
movzx edx cl +
mov [ebp+arg_0] edx +
mov edx ecx +
shr edx 8 +
fild  [ebp+arg_0] +
movzx edx dl +
fld  ds:dbl_100DFB0 +
fdiv st(1) st +
mov [ebp+arg_0] edx +
shr ecx 10h +
movzx ecx cl +
fxch  st(1) +
fstp  qword ptr [eax] +
fild  [ebp+arg_0] +
mov [ebp+arg_0] ecx +
fdiv st st(1) +
fstp  qword ptr [eax+8] +
fild  [ebp+arg_0] +
fdivrp st(1) st +
fstp  qword ptr [eax+10h] +
fld1   +
fstp  qword ptr [eax+18h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
push dword ptr [esi+4]  +
call GdipSetSolidFillColor  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_0] +
push esi  +
push ecx  +
mov esi ecx +
fstp  [esp+8+var_8] +
push dword ptr [esi]  +
call GdipSetPenWidth  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax+4]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipSetPenBrushFill  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002370  +
push 0  +
push 1  +
call sub_100B693  +
and dword ptr [ebp-4] 0 +
mov esi eax +
mov [ebp-14h] esi +
test esi esi +
jz loc_100E0D0  +
mov eax [ebp+8] +
mov [esi] eax +
lea eax [esi+4] +
test eax eax +
jz loc_100E0DC  +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
push dword ptr [ebp+10h]  +
lea eax [esi+8] +
push eax  +
call sub_100E0F7  +
mov eax esi +
call sub_1002061  +
retn 0Ch  +
***
call sub_100208C  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_100E11C  +
push dword ptr [ebp+0Ch]  +
call sub_100E129  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov [esi] ecx +
mov ecx [eax+4] +
add eax 8 +
mov [esi+4] ecx +
push eax  +
lea ecx [esi+8] +
call sub_100C6A4  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea edi [eax+4] +
push dword ptr [edi]  +
mov ebx ecx +
push eax  +
call sub_100E0A9  +
push 1  +
mov ecx ebx +
mov esi eax +
call sub_100E18F  +
mov [edi] esi +
mov eax [esi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov eax [ecx+8] +
mov edx [ebp+8] +
mov esi 0AAAAAAAh +
sub esi eax +
cmp esi edx +
jb loc_1043E40  +
add eax edx +
mov [ecx+8] eax +
call sub_1002061  +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
mov esi ecx +
lea ecx [ebp-10h] +
call sub_100C68F  +
mov ecx [ebp+8] +
mov eax [ecx] +
mov [ebp-18h] ecx +
call dword ptr [eax+64h]  +
mov ecx [ebp-18h] +
lea edx [esi-4] +
mov [ebp-14h] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax]  +
lea ecx [esi+18h] +
mov eax [ecx+4] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call sub_100E156  +
push dword ptr [esi+20h]  +
push 1437h  +
push offset aQ@gglDgf  +
call WinSqmSetIfMaxDWORD  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100E23E  +
mov dword ptr [esi] offset off_1008BF4 +
mov eax esi +
pop esi  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100B6DE  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+14h] +
mov dword ptr [esi] offset off_100B9BC +
call sub_100C68F  +
mov byte ptr [esi+10h] 0 +
mov eax esi +
call sub_1002061  +
retn   +
***
mov ecx [ecx+14h] +
mov eax [ecx] +
push 0Fh  +
call dword ptr [eax+38h]  +
movzx eax al +
jmp locret_1009A39  +
***
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_100C6A4  +
mov ebx [ebx+40h] +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebx+38h]  +
mov ecx esi +
push dword ptr [ebx+30h]  +
push dword ptr [ebx+2Ch]  +
push dword ptr [ebp-38h]  +
call sub_100E2C0  +
jmp loc_10099FD  +
push eax  +
call ds:SetRectEmpty  +
jmp loc_100998C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
cmp dword ptr [esi+24h] 0 +
jle loc_100E328  +
push ebx  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100C70F  +
mov [ebp+arg_C] eax +
mov eax [esi+20h] +
mov ebx [eax] +
mov [ebp+arg_8] eax +
cmp ebx eax +
jz loc_100E31F  +
push edi  +
push [ebp+arg_10]  +
mov esi [ebx+8] +
mov eax [esi] +
push 0  +
push [ebp+arg_C]  +
mov ecx esi +
call dword ptr [eax+5Ch]  +
add esi 14h +
lea edi [ebx+10h] +
mov ebx [ebx] +
movs   +
movs   +
movs   +
movzx eax al +
mov [ebp+var_4] eax +
movs   +
cmp ebx [ebp+arg_8] +
jnz loc_100E2F5  +
pop edi  +
push [ebp+arg_C]  +
call sub_100C26D  +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 14h  +
***
push ebp  +
mov ebp esp +
mov eax dword_108A24C +
mov eax [eax+40h] +
sub esp 10h +
push esi  +
mov esi [eax+4] +
push eax  +
call sub_100D08B  +
mov eax [ebp+8] +
add eax 4 +
push eax  +
lea ecx [ebp-10h] +
call sub_100B3A5  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_100D5D9  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 0  +
call sub_100E38B  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
lea ecx [esi+10h] +
xor bl bl +
call sub_100B9A1  +
mov ecx [ebp+arg_0] +
cmp eax ecx +
jbe loc_100E3B2  +
mov eax [esi+14h] +
mov eax [eax+ecx*4] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
inc bl  +
pop esi  +
mov al bl +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
xor edx edx +
push edi  +
mov edi ecx +
mov esi 40000000h +
cmp dword_108BC04 edx +
jnz loc_104808E  +
mov eax [edi+4] +
mov ecx [eax+14h] +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+10h]  +
mov ebx eax +
mov eax [edi+4] +
mov ecx [eax+14h] +
lea eax [ebp+var_4] +
push eax  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
mov ecx eax +
call sub_100E373  +
test al al +
jz loc_100E432  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_8] +
push eax  +
call sub_100E461  +
test al al +
jz loc_100E432  +
mov eax [ebp+arg_0] +
add eax 14h +
push eax  +
push [ebp+var_8]  +
lea ecx [ebp+var_1C] +
call sub_100E491  +
mov eax [ebx] +
lea ecx [ebp+var_1C] +
push ecx  +
mov ecx ebx +
call dword ptr [eax]  +
mov eax [edi+4] +
mov ecx [eax+14h] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
mov ecx eax +
call sub_100E644  +
xor edx edx +
pop ebx  +
cmp dword_108BC04 edx +
jnz loc_10480F0  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100C7FB  +
mov eax [esi] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
cmp [esi] eax +
pop esi  +
setnz al  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
lea ecx [esi+4] +
call sub_100C6A4  +
mov eax [ebp+arg_0] +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+1Ch] +
mov esi [eax] +
cmp esi eax +
jz loc_100E548  +
mov ecx [esi+8] +
cmp ecx [ebp+8] +
jnz loc_1043E1D  +
push dword ptr [esi+0Ch]  +
mov eax [ecx] +
call dword ptr [eax+68h]  +
mov ecx [esi+8] +
mov eax [ecx] +
lea edx [edi-4] +
push edx  +
call dword ptr [eax+4]  +
push esi  +
lea eax [ebp+8] +
push eax  +
lea ecx [edi+18h] +
call sub_100BA88  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
lea ecx [ebp+var_10] +
call sub_100C68F  +
mov eax [esi] +
lea ecx [ebp+var_10] +
push ecx  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call dword ptr [eax+5Ch]  +
pop esi  +
leave   +
retn 8  +
***
cmp eax 1Eh +
jnz loc_100DC36  +
push edx  +
call sub_100E595  +
jmp loc_100DC36  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
cmp dword ptr [ecx+24h] 0 +
mov eax [ebp+arg_0] +
mov eax [eax+0Ch] +
mov [ebp+var_4] ecx +
mov [ebp+arg_0] eax +
jz locret_100E63B  +
mov eax [ecx+20h] +
push ebx  +
mov ebx [eax] +
cmp ebx eax +
jz loc_100E63A  +
push esi  +
push edi  +
mov eax [ebx+8] +
cmp eax [ebp+arg_0] +
jnz loc_100E631  +
add eax 14h +
push eax  +
lea ecx [ebx+10h] +
push ecx  +
lea eax [ebp+rcDst] +
push eax  +
call ds:UnionRect  +
lea esi [ebp+rcDst] +
lea edi [ebp+rcSrc2] +
movs   +
movs   +
movs   +
movs   +
mov esi dword_108A24C +
lea eax [ebp+rcSrc2] +
push eax  +
mov ecx esi +
call sub_100DBF4  +
lea eax [ebp+rcSrc2] +
push eax  +
push dword ptr [esi+40h]  +
call sub_1005D16  +
mov ecx [ebp+var_4] +
call sub_100BB42  +
test eax eax +
jnz loc_103A3E0  +
lea eax [ebp+rcDst] +
push eax  +
push dword ptr [esi+40h]  +
call sub_100D173  +
push dword ptr [esi+40h]  +
call sub_100D2D1  +
lea eax [ebx+10h] +
push eax  +
call ds:SetRectEmpty  +
mov ecx [ebp+var_4] +
mov ebx [ebx] +
cmp ebx [ecx+20h] +
jnz loc_100E5BF  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov edi ecx +
xor ebx ebx +
call sub_100E373  +
test al al +
jz loc_100E68F  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_8] +
push eax  +
call sub_100E461  +
test al al +
jz loc_100E68F  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push ebx  +
push [ebp+var_8]  +
mov ecx esi +
call dword ptr [eax+60h]  +
test al al +
jz loc_100E68E  +
push esi  +
push [ebp+var_4]  +
mov ecx edi +
call sub_100E69C  +
mov bl 1 +
pop esi  +
pop edi  +
mov al bl +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
mov [ebp+var_8] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_10] +
push eax  +
mov [ebp+var_10] 1Eh +
call sub_100DD20  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
add ecx 38h +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ecx-30h]  +
push dword ptr [ecx-34h]  +
push ecx  +
push [ebp+arg_0]  +
call sub_100E6F7  +
mov al 1 +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
add edi 14h +
cmp [ebp+arg_C] esi +
jnz loc_1046013  +
cmp [ebp+arg_18] 1 +
jnz loc_102D368  +
mov ebx [ebp+arg_8] +
mov eax ebx +
cdq   +
push 26200Ah  +
sub eax edx +
push ebx  +
mov esi eax +
push ebx  +
lea ecx [ebp+var_10] +
sar esi 1 +
call sub_100B2C5  +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+var_18] +
call sub_100B8C4  +
mov ecx edi +
call sub_1030979  +
push eax  +
lea ecx [ebp+var_18] +
call sub_100DAAA  +
push 1  +
push ebx  +
push 0  +
push 0  +
push [ebp+arg_4]  +
lea eax [ebp+var_18] +
push eax  +
call sub_10309AF  +
mov eax [ebp+arg_10] +
mov ecx [eax+4] +
mov eax [eax] +
sub ecx esi +
push ecx  +
sub eax esi +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov ecx edi +
call sub_1030A2A  +
push [ebp+var_18]  +
call GdipDeleteGraphics  +
push [ebp+var_C]  +
call GdipDisposeImage  +
pop edi  +
pop esi  +
mov al 1 +
pop ebx  +
leave   +
retn 20h  +
***
call sub_100208C  +
push 48h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_100E7CE  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100E7DB  +
call sub_1002061  +
retn 0Ch  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [ebp+8] +
mov [esi+4] eax +
mov eax [ebp+10h] +
mov [esi+8] eax +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+10h] +
mov dword ptr [esi] offset off_100D98C +
call sub_100C009  +
fld1   +
push ecx  +
fstp  [esp+8+var_8] +
lea eax [ebp+8] +
lea edi [esi+30h] +
mov ebx 0FF000000h +
push eax  +
mov ecx edi +
mov [ebp+8] ebx +
call sub_100B88A  +
mov [ebp+8] ebx +
lea eax [ebp+8] +
lea ebx [esi+38h] +
push eax  +
mov ecx ebx +
call sub_100B7C0  +
lea eax [ebp+8] +
push eax  +
lea ecx [esi+10h] +
mov byte ptr [ebp-4] 2 +
call sub_100DF03  +
lea eax [ebp+8] +
push eax  +
mov ecx ebx +
call sub_100DFBD  +
fild  dword ptr [esi+4] +
push ecx  +
mov ecx edi +
fstp  [esp+8+var_8] +
call sub_100DFEF  +
push ebx  +
mov ecx edi +
call sub_100E022  +
mov eax esi +
call sub_1002061  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push [ebp+arg_0]  +
call sub_100C060  +
mov ebx eax +
test ebx ebx +
jz loc_100E8B5  +
push esi  +
mov esi [ebx+0Ch] +
mov eax [esi] +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_4] +
push edi  +
mov ecx esi +
call dword ptr [eax+58h]  +
test edi edi +
jz loc_100E8B3  +
push [ebp+arg_8]  +
mov [ebx+0Ch] edi +
mov eax [edi] +
push esi  +
mov ecx edi +
call dword ptr [eax+54h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
cmp byte ptr [esi+10h] 0 +
mov bl 1 +
jnz loc_100E995  +
push edi  +
push [ebp+arg_0]  +
call sub_100DC6A  +
mov ecx [ebp+arg_8] +
mov edi eax +
call sub_100DC54  +
test eax eax +
jz loc_100E981  +
mov ecx [ebp+arg_8] +
call sub_100DC3F  +
test eax eax +
jz loc_100E981  +
push [ebp+arg_8]  +
mov ecx edi +
call sub_100DDB1  +
mov bl al +
test bl bl +
jz loc_100E98E  +
push [ebp+arg_4]  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+58h]  +
mov bl al +
push edi  +
call sub_100D8C2  +
pop edi  +
pop esi  +
mov al bl +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100CA8E  +
mov ecx [ebp+arg_0] +
cmp eax ecx +
jbe loc_1049D9D  +
mov eax [esi+4] +
lea eax [eax+ecx*8] +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx [esi+24h] +
mov eax [ecx] +
mov esi ecx +
call dword ptr [eax+8]  +
push eax  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+8]  +
push eax  +
lea eax [ebp+rc] +
push eax  +
call ds:InflateRect  +
lea esi [ebp+rc] +
mov bl 1 +
mov edi [ebp+arg_0] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 8  +
mov [ebp+rc.top] ecx +
jmp loc_100EA64  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+38h] +
mov ecx edi +
xor bl bl +
call sub_100CA8E  +
mov [ebp+var_4] eax +
lea ecx [ebp+rc] +
test eax eax +
jle loc_1049DA3  +
call sub_100C68F  +
mov eax 80000000h +
push eax  +
push eax  +
dec eax  +
push eax  +
push eax  +
lea eax [ebp+rc] +
push eax  +
call ds:SetRect  +
mov ebx [ebp+arg_4] +
cmp ebx [ebp+var_4] +
jge loc_100E9C5  +
push ebx  +
mov ecx edi +
call sub_100E9A2  +
mov ecx [eax] +
cmp ecx [ebp+rc.left] +
jl loc_100EA7C  +
mov ecx [eax+4] +
cmp ecx [ebp+rc.top] +
jl loc_100E9F7  +
mov ecx [eax] +
cmp ecx [ebp+rc.right] +
jle loc_100EA6E  +
mov [ebp+rc.right] ecx +
mov eax [eax+4] +
cmp eax [ebp+rc.bottom] +
jle loc_100EA79  +
mov [ebp+rc.bottom] eax +
inc ebx  +
jmp loc_100EA44  +
mov [ebp+rc.left] ecx +
jmp loc_100EA5C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
push ebx  +
mov ebx ecx +
cmp byte ptr [ebx+10h] 0 +
push esi  +
push edi  +
mov [ebp+var_1] 0 +
jnz loc_1036E2F  +
cmp byte ptr [ebx+58h] 0 +
mov ecx [ebp+arg_0] +
jnz loc_1036E18  +
xor edi edi +
push edi  +
call sub_100DCD7  +
lea ecx [ebp+rcSrc1] +
call sub_100C68F  +
lea ecx [ebp+rcDst] +
call sub_100C68F  +
mov ecx [ebp+arg_0] +
lea eax [ebp+rcSrc1] +
push eax  +
call sub_100EBEF  +
test al al +
jz loc_1049DAF  +
push 1  +
push 1  +
lea eax [ebp+rcSrc1] +
push eax  +
call ds:InflateRect  +
lea eax [ebx+14h] +
push eax  +
lea eax [ebp+rcSrc1] +
push eax  +
lea eax [ebp+rcDst] +
push eax  +
call ds:IntersectRect  +
lea ecx [ebp+rcDst] +
call sub_100DC54  +
test eax eax +
jle loc_1036E26  +
lea ecx [ebp+rcDst] +
call sub_100DC54  +
mov [ebp+var_2] 1 +
test eax eax +
jle loc_1036E26  +
lea ecx [ebx+38h] +
call sub_100CA8E  +
cmp [ebx+60h] eax +
jnb loc_1049DC0  +
lea ecx [ebp+var_28] +
call sub_100C68F  +
mov eax [ebx+60h] +
cmp eax edi +
ja loc_1049DCF  +
push eax  +
lea eax [ebp+var_28] +
push eax  +
mov ecx ebx +
call sub_100EA01  +
lea ecx [ebp+var_28] +
call sub_100DC3F  +
test eax eax +
jle loc_100EBCC  +
lea ecx [ebp+var_28] +
call sub_100DC54  +
test eax eax +
jle loc_100EBCC  +
test byte ptr [ebx+5Ch] 1 +
mov [ebp+var_8] edi +
jnz loc_1049DD5  +
cmp [ebx+34h] edi +
jnz loc_103328D  +
lea ecx [ebp+var_48] +
call sub_100C68F  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_48] +
push eax  +
call sub_100EBEF  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_28] +
push eax  +
call sub_100DDB1  +
movzx eax byte ptr [ebx+59h] +
mov esi [ebx+3Ch] +
push eax  +
push edi  +
lea ecx [ebx+38h] +
call sub_100CA8E  +
mov ecx [ebp+arg_0] +
push eax  +
push [ebp+var_8]  +
push esi  +
push dword ptr [ebx+24h]  +
call sub_100EC71  +
mov ecx [ebp+arg_0] +
mov [ebp+var_1] al +
lea eax [ebp+var_48] +
push eax  +
call sub_100DDB1  +
lea ecx [ebx+38h] +
call sub_100CA8E  +
mov [ebx+60h] eax +
cmp [ebx+34h] edi +
jnz loc_1031A0A  +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
xor eax eax +
push esi  +
mov [ebp+var_4] eax +
mov [ebp+var_8] eax +
mov [ebp+var_C] eax +
mov [ebp+var_10] eax +
push edi  +
lea eax [ebp+var_10] +
push eax  +
add ecx 14h +
call sub_100EC42  +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_10] +
mov edi [ebp+var_8] +
mov esi [ebp+var_C] +
neg eax  +
sbb al al +
add edi edx +
mov [ecx] edx +
mov edx [ebp+var_4] +
mov [ecx+4] esi +
inc al  +
add esi edx +
mov [ecx+8] edi +
pop edi  +
mov [ecx+0Ch] esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipGetClipBoundsI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100EC9F  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_C] 0 +
mov al 1 +
jle loc_100ECC9  +
push [ebp+arg_18]  +
mov eax [ebp+arg_0] +
push [ebp+arg_14]  +
mov edx [eax] +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
mov ecx eax +
call dword ptr [edx+1Ch]  +
pop ebp  +
retn 1Ch  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_100ECFB  +
mov eax [eax+4] +
cmp eax [ecx+4] +
jnz loc_100ECFB  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_100ECF7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+40h] +
mov ecx [edx] +
xor eax eax +
cmp ecx edx +
jz loc_100ED21  +
push esi  +
mov esi [ecx+18h] +
cmp esi [ebp+arg_0] +
jnz loc_100ED25  +
lea eax [ecx+8] +
pop esi  +
pop ebp  +
retn 4  +
mov ecx [ecx] +
cmp ecx edx +
jz loc_100ED20  +
jmp loc_100ED15  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100ED4B  +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
mov [eax] edx +
mov ecx [ecx+4] +
mov [eax+4] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea edi [ebx+38h] +
mov ecx edi +
call sub_100CA8E  +
dec eax  +
mov esi [ebp+arg_0] +
js loc_100ED81  +
mov ecx [ebx+3Ch] +
lea eax [ecx+eax*8] +
mov ecx [eax] +
cmp ecx [esi] +
jz loc_100F2F6  +
push dword ptr [esi+4]  +
lea ecx [ebp+var_10] +
push dword ptr [esi]  +
call sub_100C6CD  +
lea eax [ebp+var_10] +
push eax  +
mov ecx edi +
call sub_100EDE4  +
test byte ptr [ebx+5Ch] 1 +
jnz loc_1049DF0  +
mov ecx [ebx+24h] +
add esi 10h +
lea edi [ebx+14h] +
movs   +
movs   +
movs   +
movs   +
mov eax [ecx] +
call dword ptr [eax+8]  +
push eax  +
push eax  +
lea eax [ebx+14h] +
push eax  +
call ds:InflateRect  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
mov [ebp+var_8] 14h +
mov [ebp+var_4] ebx +
call sub_100DD20  +
pop edi  +
pop esi  +
mov al 1 +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_100CA8E  +
mov ecx esi +
mov edi eax +
call sub_100CADB  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jb loc_1049DE0  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_100EE20  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_100CA8E  +
test eax eax +
jz loc_100F4C2  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 3 +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_100EE64  +
mov eax [edi+4] +
lea ecx [eax+esi*8] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_1002370  +
mov esi ecx +
mov eax [ebp+10h] +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-18h] ecx +
mov ecx esi +
mov [ebp-14h] eax +
call sub_100CADB  +
mov edi [ebp+0Ch] +
mov [ebp+10h] eax +
test edi edi +
jz loc_100EF46  +
mov ecx esi +
call sub_100CA8E  +
mov ecx 1FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_1049CDB  +
add eax edi +
cmp [ebp+10h] eax +
jnb loc_1049CFB  +
mov edx [ebp+10h] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp+10h] +
jb loc_1049CE0  +
add [ebp+10h] edx +
cmp [ebp+10h] eax +
jnb loc_100EED3  +
mov [ebp+10h] eax +
push 0  +
push dword ptr [ebp+10h]  +
call sub_100CAF0  +
and dword ptr [ebp-4] 0 +
mov ebx eax +
mov eax [esi+4] +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp+0Ch] ebx +
push eax  +
call sub_100F082  +
lea ecx [ebp-18h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_100EF53  +
mov ecx [esi+8] +
push esi  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
call sub_100F082  +
mov ecx esi +
call sub_100CA8E  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_100EF34  +
mov ecx [esi+8] +
cmp eax ecx +
jz loc_100EF2B  +
add eax 8 +
jmp loc_100EF22  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+10h] +
lea eax [ebx+eax*8] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*8] +
mov [esi+8] eax +
mov [esi+4] ebx +
call sub_1002061  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_100EF79  +
lea eax [edi+esi*8] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100EFA7  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_100EFC6  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_100ED32  +
dec [ebp+arg_4]  +
add [ebp+arg_0] 8 +
jmp loc_100EFAC  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+8] +
sub esp 20h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
call sub_100ED04  +
mov esi [ebp+arg_4] +
mov ecx [esi] +
lea edx [eax+28h] +
cmp [edx] ecx +
jg loc_10340F7  +
mov ecx [esi] +
cmp [eax+30h] ecx +
jl loc_100F15F  +
mov ecx [esi+4] +
cmp [eax+2Ch] ecx +
jg loc_1048010  +
mov ecx [esi+4] +
cmp [eax+34h] ecx +
jl loc_100F157  +
sub esp 10h +
mov ecx esp +
push edx  +
call sub_100C6A4  +
push [ebp+arg_8]  +
lea ecx [ebp+var_20] +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call sub_100F049  +
mov eax [edi] +
lea ecx [ebp+var_20] +
push ecx  +
mov ecx edi +
call dword ptr [eax+34h]  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_100C6CD  +
mov eax [ebp+arg_8] +
mov ecx [eax] +
mov [esi+8] ecx +
mov eax [eax+4] +
mov [esi+0Ch] eax +
lea eax [ebp+arg_C] +
push eax  +
lea ecx [esi+10h] +
call sub_100C6A4  +
mov eax esi +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100F0B0  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jnz loc_100F142  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn 18h  +
***
mov ecx [eax+0Ch] +
mov eax [ecx] +
push esi  +
push [ebp+arg_0]  +
call dword ptr [eax+38h]  +
jmp loc_100C056  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [esi+4] +
mov ebx ecx +
mov ecx [ebx+8] +
push edi  +
call sub_100C060  +
mov ecx [eax+20h] +
xor ecx [esi+8] +
test cl 8 +
jnz loc_104802B  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov edi [ecx+4] +
mov [eax+14h] edx +
mov [eax+18h] edi +
fld  dword ptr [esi+10h] +
fstp  dword ptr [eax+1Ch] +
mov edx [ecx] +
mov ecx [ecx+4] +
mov [ebp+var_4] ecx +
add esi 0Ch +
push esi  +
lea ecx [ebp+var_8] +
push ecx  +
push dword ptr [eax+10h]  +
mov ecx ebx +
mov [ebp+var_8] edx +
call sub_100EFCF  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push esi  +
push [ebp+arg_8]  +
call sub_100ED32  +
add [ebp+arg_8] 8 +
add esi 8 +
jmp loc_100F0B9  +
***
mov [eax+34h] ecx +
jmp loc_100F018  +
mov [eax+30h] ecx +
jmp loc_100F000  +
***
call sub_100208C  +
mov eax [ebp+0Ch] +
mov esi [eax+8] +
mov edi [ecx+8] +
push esi  +
mov ecx edi +
call sub_100ED04  +
xor ecx ecx +
mov [ebp-14h] ecx +
mov [ebp-10h] esi +
mov dword ptr [ebp-18h] offset off_100E4B4 +
lea edx [ebp-18h] +
push edx  +
push ecx  +
mov [ebp-4] ecx +
push eax  +
mov ecx edi +
call sub_100E87A  +
call sub_1002061  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov ebx [ebp+0Ch] +
push dword ptr [ebx+4]  +
mov ecx [esi+8] +
call sub_100C060  +
mov edi eax +
mov eax [ebp+8] +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-10h] eax +
lea eax [ebx+0Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [edi+10h]  +
mov [ebp-14h] ecx +
mov ecx esi +
call sub_100EFCF  +
sub esp 10h +
lea eax [edi+28h] +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
call sub_100C6A4  +
push dword ptr [edi+10h]  +
lea ecx [ebp-30h] +
call sub_100F27A  +
mov ecx [esi+8] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-30h] +
push eax  +
mov eax [esi+4] +
push dword ptr [eax+0Ch]  +
push dword ptr [ebx+4]  +
call sub_100E87A  +
call sub_1002061  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi ecx +
mov ecx [esi+8] +
mov eax [ecx] +
lea edx [ebp+0Fh] +
push edx  +
call dword ptr [eax+1Ch]  +
mov ecx [esi+8] +
mov eax [ecx] +
lea edx [ebp-1] +
push edx  +
call dword ptr [eax+18h]  +
push dword ptr [esi+8]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+60h]  +
push dword ptr [esi+8]  +
mov ecx [edi+8] +
call sub_100F30C  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [ebp+8] +
mov dword ptr [esi+4] 2 +
mov [esi+8] eax +
and dword ptr [ebp-4] 0 +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_100C90C +
call sub_100C6A4  +
mov eax esi +
call sub_1002061  +
retn 14h  +
***
and dword ptr [ecx+60h] 0 +
mov al 1 +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor eax eax +
cmp [ebp+arg_0] eax +
jz locret_100F2F2  +
lea eax [ebp+var_8] +
push eax  +
mov byte ptr [ecx+59h] 1 +
mov [ebp+var_8] 14h +
mov [ebp+var_4] ecx +
call sub_100DD20  +
mov al 1 +
leave   +
retn 4  +
***
mov eax [eax+4] +
cmp eax [esi+4] +
jz loc_100EDD6  +
jmp loc_100ED81  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+40h] +
mov esi [eax] +
cmp esi eax +
jz loc_100F34B  +
push ebx  +
mov ebx [ebp+arg_0] +
cmp [esi+18h] ebx +
jnz loc_100F351  +
mov ecx [edi+14h] +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+4]  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [edi+3Ch] +
call sub_100BA88  +
test ebx ebx +
jz loc_100F34A  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax+0Ch]  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov esi [esi] +
cmp esi eax +
jz loc_100F34A  +
jmp loc_100F322  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100F372  +
push [ebp+arg_0]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100F3A1  +
test byte ptr [ebp+8] 1 +
jz loc_100F395  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1009284 +
push dword ptr [esi+24h]  +
mov dword ptr [ebp-4] 2 +
call sub_100DAD9  +
cmp dword ptr [esi+34h] 0 +
jnz loc_1033416  +
lea ecx [esi+48h] +
call sub_100CAB5  +
lea ecx [esi+38h] +
call sub_100CAB5  +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_100B9BC +
call sub_100BAC8  +
call sub_1002061  +
retn   +
***
fldz   +
push esi  +
mov eax 80000001h +
push eax  +
push eax  +
mov esi ecx +
and dword ptr [esi+20h] 0 +
fstp  dword ptr [esi+1Ch] +
and dword ptr [esi+24h] 0 +
add eax 0FFFFFFFEh +
push eax  +
push eax  +
lea ecx [esi+28h] +
call sub_100C6E8  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 0  +
push offset off_108D4CC  +
push offset off_108D4AC  +
push 0  +
push [ebp+arg_4]  +
mov ebx ecx +
call __RTDynamicCast  +
mov ecx [ebx+8] +
mov edi eax +
add esp 14h +
lea eax [edi+20h] +
push eax  +
call sub_100C060  +
mov esi eax +
mov eax [edi+14h] +
push dword ptr [esi+10h]  +
mov [esi+20h] eax +
lea eax [edi+18h] +
mov [ebp+arg_4] eax +
mov eax [eax] +
mov [esi+24h] eax +
mov eax [edi+0Ch] +
mov [esi+30h] eax +
mov [esi+28h] eax +
mov eax [edi+10h] +
mov [esi+34h] eax +
mov [esi+2Ch] eax +
mov eax [ebx+8] +
mov ecx [eax+14h] +
mov eax [ecx] +
call dword ptr [eax]  +
mov eax [edi+0Ch] +
push [ebp+arg_4]  +
mov [ebp+var_8] eax +
mov eax [edi+10h] +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+10h]  +
mov ecx ebx +
call sub_100EFCF  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
xor esi esi +
jmp loc_100EE3F  +
***
pop ecx  +
test eax eax +
jz loc_1049D9A  +
and dword ptr [eax] 0 +
retn   +
***
call sub_100208C  +
mov esi ecx +
lea ecx [ebp-14h] +
call sub_100BFF1  +
mov ecx [esi+14h] +
lea eax [ebp-14h] +
push eax  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
mov ecx eax +
call sub_100C840  +
push dword ptr [ebp+8]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+90h]  +
push 64h  +
mov edi eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+8] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_100F566  +
mov ecx [esi+14h] +
push dword ptr [esi+28h]  +
mov eax [ecx] +
call dword ptr [eax+28h]  +
mov ecx [ebp+8] +
push eax  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call sub_100F56F  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push edi  +
call sub_100DAD9  +
mov eax esi +
call sub_1002061  +
retn 8  +
xor esi esi +
jmp loc_100F552  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100E225  +
mov eax [ebp+1Ch] +
xor ebx ebx +
lea ecx [esi+38h] +
push ebx  +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_1009284 +
mov [esi+34h] eax +
call sub_100CB64  +
lea ecx [esi+48h] +
push ebx  +
mov byte ptr [ebp-4] 1 +
call sub_100CB90  +
mov eax [ebp+0Ch] +
mov ecx [ebp+18h] +
mov byte ptr [ebp-4] 2 +
mov [esi+58h] bl +
mov [esi+59h] bl +
mov [esi+5Ch] eax +
mov [esi+60h] ebx +
mov [esi+30h] ecx +
cmp [esi+34h] ebx +
jnz loc_1033505  +
mov [esi+28h] ebx +
mov [esi+2Ch] ebx +
mov ecx [ebp+8] +
mov eax [ecx] +
call dword ptr [eax]  +
mov [esi+24h] eax +
mov eax esi +
call sub_1002061  +
retn 18h  +
***
call sub_1002370  +
push 0  +
push 1  +
call sub_100CB28  +
and dword ptr [ebp-4] 0 +
mov esi eax +
mov [ebp-14h] esi +
test esi esi +
jz loc_100F614  +
mov eax [ebp+8] +
mov [esi] eax +
lea eax [esi+4] +
test eax eax +
jz loc_100F620  +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
push dword ptr [ebp+10h]  +
lea eax [esi+8] +
push eax  +
call sub_100F63B  +
mov eax esi +
call sub_1002061  +
retn 0Ch  +
***
call sub_100208C  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_100F660  +
push dword ptr [ebp+0Ch]  +
call sub_100F66D  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx ecx +
push esi  +
push edi  +
mov esi eax +
mov edi ebx +
movs   +
movs   +
movs   +
mov ecx [eax+0Ch] +
mov [ebx+0Ch] ecx +
mov ecx [eax+10h] +
mov [ebx+10h] ecx +
mov ecx [eax+14h] +
mov [ebx+14h] ecx +
mov ecx [eax+18h] +
mov [ebx+18h] ecx +
add eax 28h +
fld  dword ptr [eax-0Ch] +
push eax  +
fstp  dword ptr [ebx+1Ch] +
mov ecx [eax-8] +
mov [ebx+20h] ecx +
mov ecx [eax-4] +
mov [ebx+24h] ecx +
lea ecx [ebx+28h] +
call sub_100C6A4  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov edi ecx +
mov esi [ebp+0Ch] +
push dword ptr [esi+4]  +
lea eax [esi+0Ch] +
push eax  +
mov eax [ebp+8] +
mov ecx [eax] +
mov edx [eax+4] +
push ecx  +
push ecx  +
mov eax esp +
mov [eax] ecx +
mov [ebp+0Ch] esp +
mov [eax+4] edx +
push dword ptr [esi+8]  +
lea ecx [ebp-38h] +
call sub_100F722  +
mov ecx [edi+8] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-38h] +
push eax  +
mov eax [edi+4] +
push dword ptr [eax+8]  +
push dword ptr [esi+4]  +
call sub_100E87A  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_4] +
and dword ptr [eax+8] 0 +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_8] +
mov [eax+10h] ecx +
mov ecx [ebp+arg_0] +
mov [eax+14h] ecx +
mov ecx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_10] +
mov dword ptr [eax+4] 1 +
mov dword ptr [eax] offset off_100E054 +
mov edx [ecx] +
push edi  +
mov [eax+18h] edx +
mov ecx [ecx+4] +
mov [eax+1Ch] ecx +
lea edi [eax+20h] +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
call sub_100208C  +
mov ebx ecx +
and dword ptr [ebx+20h] 0 +
mov esi [ebp+0Ch] +
push dword ptr [esi+4]  +
call sub_100C060  +
test eax eax +
jnz loc_100F82A  +
cmp dword ptr [ebx+44h] 0Ah +
jnb loc_100F838  +
lea ecx [ebp-54h] +
call sub_100F40C  +
mov esi [esi+4] +
mov eax [ebp+0Ch] +
push dword ptr [eax+0Ch]  +
lea edi [ebp-54h] +
push dword ptr [eax+8]  +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_100F4E7  +
mov ecx [ebx+4Ch] +
mov [ebp-44h] eax +
mov eax [ebx+4] +
xor esi esi +
mov [ebp-48h] eax +
cmp ecx esi +
jz loc_100F814  +
mov dword ptr [ebp-18h] 2 +
mov dword ptr [ebp-1Ch] offset off_1006F8C +
mov [ebp-14h] esi +
lea eax [ebp-1Ch] +
push eax  +
mov [ebp-4] esi +
call sub_1005BE0  +
xor al al +
cmp [ebp-14h] esi +
jnz loc_1036DD5  +
mov ecx [ebp-44h] +
lea edx [ebp-0Dh] +
mov [ebp-0Dh] al +
mov eax [ecx] +
push edx  +
call dword ptr [eax+20h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword ptr [ebp-1Ch] offset off_100B0C0 +
lea ecx [ebx+3Ch] +
mov eax [ecx+4] +
lea edx [ebp-54h] +
push edx  +
push eax  +
call sub_100F845  +
mov esi [ebp+0Ch] +
lea eax [ebp-54h] +
mov eax [eax+0Ch] +
mov edx [eax] +
push esi  +
push dword ptr [ebp+8]  +
mov ecx eax +
call dword ptr [edx+40h]  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea edi [eax+4] +
push dword ptr [edi]  +
mov ebx ecx +
push eax  +
call sub_100F5ED  +
push 1  +
mov ecx ebx +
mov esi eax +
call sub_100F87E  +
mov [edi] esi +
mov eax [esi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov eax [ecx+8] +
mov edx [ebp+8] +
mov esi 4924924h +
sub esi eax +
cmp esi edx +
jb loc_1048038  +
add eax edx +
mov [ecx+8] eax +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_100F8D5  +
lea eax [ebp+Rect] +
lea ecx [ebp+var_4C] +
push ecx  +
lea ecx [ebp+var_3C] +
push ecx  +
push 0  +
push eax  +
mov ecx esi +
call sub_1008757  +
lea eax [ebp+rc] +
push eax  +
mov ecx esi +
call sub_10083F8  +
mov esi [ebp+arg_0] +
push dword ptr [esi+4]  +
call ds:SaveDC  +
mov edi ds:CreateRectRgnIndirect +
mov [ebp+var_8] eax +
lea eax [ebp+var_4C] +
push eax  +
call edi  +
mov ebx ds:ExtSelectClipRgn +
push 4  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+arg_4] eax +
call ebx  +
push [ebp+arg_4]  +
call ds:DeleteObject  +
call sub_10022E9  +
test al al +
jnz loc_10401CC  +
mov ecx [ebp+rc.right] +
cmp ecx [ebp+Rect.right] +
mov eax [ebp+rc.bottom] +
jl loc_103CC8F  +
mov byte ptr [ebp+arg_4+3] 0 +
cmp eax [ebp+Rect.bottom] +
jl loc_103CC0C  +
mov byte ptr [ebp+arg_0+3] 0 +
cmp ecx [ebp+Rect.right] +
jl loc_103CCA6  +
mov [ebp+var_1] 0 +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_103CC23  +
cmp [ebp+var_1] 0 +
jnz loc_103CE65  +
cmp byte ptr [ebp+arg_4+3] 0 +
jnz loc_103CCB8  +
lea eax [ebp+Rect] +
push eax  +
push esi  +
call sub_100F9BF  +
push [ebp+var_8]  +
push dword ptr [esi+4]  +
call ds:RestoreDC  +
cmp byte ptr [ebp+arg_4+3] 0 +
jnz loc_103CCE9  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_103CC5D  +
cmp [ebp+var_1] 0 +
jnz loc_103CE9C  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
call sub_10022E9  +
test al al +
jnz loc_10449E1  +
mov eax 0C500h +
mov [ebp+var_20] ax +
mov eax 0CF00h +
mov [ebp+var_1E] ax +
mov eax 0DF00h +
mov [ebp+var_1C] ax +
mov ecx 0FF00h +
mov eax ecx +
mov [ebp+var_1A] ax +
mov eax [ebp+lprc] +
push esi  +
mov esi [eax+8] +
sub esi [eax] +
xor edx edx +
mov [ebp+var_18] esi +
mov esi [eax+0Ch] +
sub esi [eax+4] +
mov eax 0DD00h +
mov [ebp+var_10] ax +
mov eax 0E600h +
mov [ebp+var_E] ax +
mov eax 0F300h +
mov [ebp+var_C] ax +
xor eax eax +
mov [ebp+var_A] cx +
mov ecx [ebp+arg_0] +
inc eax  +
mov [ebp+var_14] esi +
mov [ebp+var_28] edx +
mov [ebp+var_24] edx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
pop esi  +
cmp ecx edx +
jz loc_1044A15  +
mov ecx [ecx+4] +
push eax  +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push 2  +
lea eax [ebp+var_28] +
push eax  +
push ecx  +
call ds:GdiGradientFill  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
call sub_100F8B1  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+10h] 0Dh +
jnz loc_100FAEE  +
mov eax [ebp+arg_8] +
push 0Dh  +
pop ecx  +
mov [eax] cx +
mov ecx [ebp+arg_4] +
mov [eax+8] ecx +
test ecx ecx +
jz loc_100FAE8  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
xor eax eax +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_100FAEA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword ptr [ecx+50h] 1 +
mov [ecx+54h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_100FB35  +
mov ecx [ebp+arg_4] +
mov ax [ecx+eax*2] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0Bh  +
xor esi esi +
call ds:GetSystemMetrics  +
mov ecx [ebp+arg_4] +
dec ecx  +
js loc_100FB55  +
mov edx [ebp+arg_0] +
cmp eax [edx+ecx*4] +
jb loc_100FB48  +
mov esi ecx +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 0Bh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
cmp dword_108A254 0 +
push esi  +
mov esi ecx +
jnz loc_100FDCC  +
push ebx  +
push edi  +
mov edi ds:GetSystemMetrics +
push 2  +
mov dword_108A254 1 +
call edi  +
push 3  +
mov [ebp+var_10] eax +
call edi  +
mov [ebp+var_14] eax +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
mov eax [ebp+Rect.right] +
mov ebx [ebp+Rect.bottom] +
sub eax [ebp+Rect.left] +
sub ebx [ebp+Rect.top] +
mov ecx esi +
mov [ebp+var_8] eax +
mov [ebp+var_C] ebx +
call ?GetStyle@CWnd@@QBEKXZ  +
mov edi eax +
shr edi 14h +
mov ecx esi +
and edi 1 +
call ?GetStyle@CWnd@@QBEKXZ  +
shr eax 15h +
and eax 1 +
test edi edi +
jz loc_100FC44  +
add ebx [ebp+var_14] +
mov [ebp+var_C] ebx +
test eax eax +
jz loc_100FC4E  +
mov eax [ebp+var_10] +
add [ebp+var_8] eax +
lea eax [ebp+var_1C] +
push eax  +
push dword ptr [esi+40h]  +
call sub_1009DC6  +
fld  qword ptr [esi+50h] +
fadd  ds:dbl_100FB70 +
fdiv  qword ptr [esi+50h] +
call _ftol2_sse  +
add [ebp+var_1C] eax +
add [ebp+var_18] eax +
xor edi edi +
xor edx edx +
xor ecx ecx +
test edx edx +
jnz loc_100FC91  +
fild  [ebp+var_18] +
fmul  qword ptr [esi+50h] +
fild  [ebp+var_C] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jnp loc_100FE0D  +
test edi edi +
jnz loc_100FCB0  +
fild  [ebp+var_1C] +
fmul  qword ptr [esi+50h] +
fild  [ebp+var_8] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jp loc_100FCB0  +
inc edi  +
sub ebx [ebp+var_14] +
mov ecx edi +
mov [ebp+var_C] ebx +
test ecx ecx +
jnz loc_100FC75  +
push ecx  +
mov ecx esi +
call sub_100FB7D  +
fld1   +
fcom  qword ptr [esi+50h] +
and [ebp+var_40] 0 +
mov [ebp+var_48] 1Ch +
mov [ebp+var_44] 7 +
fnstsw  ax +
test ah 41h +
jz loc_103FCF5  +
fstp  st +
fild  [ebp+var_8] +
fdiv  qword ptr [esi+50h] +
call _ftol2_sse  +
fild  [ebp+var_C] +
fdiv  qword ptr [esi+50h] +
mov ebx eax +
call _ftol2_sse  +
mov edi eax +
mov eax [ebp+var_1C] +
dec eax  +
mov [ebp+var_3C] eax +
mov eax [esi+58h] +
neg eax  +
mov [ebp+var_38] ebx +
xor ebx ebx +
mov [ebp+var_34] eax +
push ebx  +
lea eax [ebp+var_48] +
push eax  +
push ebx  +
mov ecx esi +
call ?SetScrollInfo@CWnd@@QAEHHPAUtagSCROLLINFO@@H@Z  +
mov eax [ebp+var_18] +
dec eax  +
mov [ebp+var_3C] eax +
mov eax [esi+5Ch] +
neg eax  +
mov [ebp+var_38] edi +
mov [ebp+var_34] eax +
push ebx  +
lea eax [ebp+var_48] +
xor edi edi +
push eax  +
inc edi  +
push edi  +
mov ecx esi +
call ?SetScrollInfo@CWnd@@QAEHHPAUtagSCROLLINFO@@H@Z  +
push 17h  +
lea eax [ebp+var_48] +
push eax  +
push ebx  +
mov ecx esi +
mov [ebp+var_44] 4 +
call ?GetScrollInfo@CWnd@@QAEHHPAUtagSCROLLINFO@@I@Z  +
mov ecx [esi+58h] +
mov eax [ebp+var_34] +
neg ecx  +
mov [ebp+var_1] bl +
cmp ecx eax +
jnz loc_10357F8  +
push 17h  +
lea eax [ebp+var_48] +
push eax  +
push edi  +
mov ecx esi +
call ?GetScrollInfo@CWnd@@QAEHHPAUtagSCROLLINFO@@I@Z  +
mov ecx [esi+5Ch] +
mov eax [ebp+var_34] +
neg ecx  +
cmp ecx eax +
jnz loc_103B576  +
cmp [ebp+var_1] 0 +
jnz loc_1035806  +
push edi  +
mov ecx esi +
call sub_100FB7D  +
push edi  +
push ebx  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
mov ecx [esi+74h] +
cmp ecx ebx +
jz loc_100FDB2  +
push dword ptr [esi+5Ch]  +
push dword ptr [esi+58h]  +
call sub_100FDD4  +
mov ecx [esi+78h] +
cmp ecx ebx +
jz loc_100FDC4  +
push dword ptr [esi+5Ch]  +
push dword ptr [esi+58h]  +
call sub_100FDD4  +
pop edi  +
mov dword_108A254 ebx +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
lea eax [esi+88h] +
xor dl dl +
cmp [eax] ecx +
jnz loc_10304F4  +
mov ecx [ebp+arg_4] +
lea eax [esi+8Ch] +
cmp [eax] ecx +
jnz loc_1030522  +
test dl dl +
jnz loc_1030507  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax [ebp+var_10] +
inc edx  +
sub [ebp+var_8] eax +
mov ecx edx +
jmp loc_100FC91  +
***
mov esi [ebp+10h] +
push 4  +
pop ecx  +
mov edi offset dword_100FECC +
xor edx edx +
cmps   +
jnz loc_1006CAB  +
and [ebp-0E0h] edx +
and [ebp-4] edx +
mov eax [ebp-0D0h] +
mov eax [eax+8] +
mov ecx [eax] +
lea edx [ebp-0E0h] +
push edx  +
push offset dword_1010AC4  +
push eax  +
call dword ptr [ecx]  +
mov [ebp-0C8h] eax +
test eax eax +
jl loc_100FEAC  +
lea ecx [ebx+4] +
mov [ebp-0E4h] ecx +
call sub_100CA8E  +
mov [ebp-0DCh] eax +
xor eax eax +
mov ebx ds:PropVariantClear +
lea edi [ebp-0F4h] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
and dword ptr [ebp-0D0h] 0 +
lea edi [ebp-138h] +
stos   +
stos   +
stos   +
stos   +
mov byte ptr [ebp-4] 1 +
mov eax [ebp-0D0h] +
cmp eax [ebp-0DCh] +
jb loc_1048F6E  +
mov eax [ebp-0E0h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1006D22  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1006D22  +
***
cmp eax 0Dh +
jnz loc_1006D22  +
mov esi [ebp+10h] +
push 4  +
pop ecx  +
mov edi offset dword_1005BFC +
xor edx edx +
cmps   +
jz loc_1010E87  +
cmp eax 0Dh +
jnz loc_1006D22  +
mov esi [ebp+10h] +
push 4  +
pop ecx  +
mov edi offset dword_100213C +
xor edx edx +
cmps   +
jz loc_100FF4E  +
cmp eax eax +
jnz loc_1006D22  +
mov esi [ebp+10h] +
push 4  +
pop ecx  +
mov edi offset dword_100FA80 +
xor edx edx +
cmps   +
jz loc_100FF4E  +
cmp eax eax +
jnz loc_1006D22  +
mov esi [ebp+10h] +
push 4  +
pop ecx  +
mov edi offset dword_100FA94 +
xor edx edx +
cmps   +
jnz loc_10493AA  +
cmp dword ptr [ebx+28h] 0 +
jz loc_1006D22  +
lea ecx [ebp-0C4h] +
call sub_10069B9  +
mov ebx [ebx+28h] +
mov esi [ebp+10h] +
push 5  +
pop ecx  +
push 0  +
lea edx [ebp-0C4h] +
push edx  +
mov [ebp-0C0h] ebx +
mov dword ptr [ebp-8Ch] 1 +
lea edi [ebp-88h] +
movs   +
mov ecx [ebp-0D8h] +
mov eax [ecx] +
push 0FFFFFFFFh  +
push ebx  +
mov dword ptr [ebp-4] 15h +
call dword ptr [eax+14h]  +
test eax eax +
jz loc_1010008  +
xor esi esi +
cmp [ebp-74h] esi +
jz loc_1010008  +
cmp [ebp-70h] esi +
jz loc_1010008  +
mov [ebp-0D8h] esi +
mov eax [ebp-0E4h] +
mov eax [eax+34h] +
mov ecx [eax] +
lea edx [ebp-0D8h] +
push edx  +
push esi  +
push dword ptr [ebp-70h]  +
mov byte ptr [ebp-4] 16h +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax esi +
mov [ebp-0C8h] eax +
jl loc_100FFF4  +
push dword ptr [ebp-0D4h]  +
push dword ptr [ebp-0D8h]  +
push dword ptr [ebp+10h]  +
call sub_100FAC1  +
mov eax [ebp-0D8h] +
mov byte ptr [ebp-4] 15h +
cmp eax esi +
jz loc_1010008  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-90h] +
jmp loc_1006D19  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call GdipCreateHBITMAPFromBitmap  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 8  +
***
lea ecx [esi+530h] +
call sub_10046AE  +
mov [ebp+8] eax +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov ecx [ebp-4] +
mov esi [eax+0Ch] +
push 2000h  +
push edi  +
push edi  +
push edi  +
push dword ptr [ebp+8]  +
call sub_10100E2  +
movzx eax ax +
push eax  +
push esi  +
call ds:LoadImageW  +
cmp eax edi +
jz loc_100770D  +
mov edx [ebx] +
push eax  +
mov ecx ebx +
call dword ptr [edx+10h]  +
jmp loc_100770D  +
***
xor ecx ecx +
inc ecx  +
jmp loc_1010208  +
push 2  +
jmp loc_100A38E  +
push 3  +
jmp loc_100A38E  +
push 7  +
jmp loc_100A38E  +
push 8  +
jmp loc_100A38E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax 9D70h +
mov word ptr [ebp+var_4C] ax +
inc eax  +
mov word ptr [ebp+var_4C+2] ax +
mov eax 9D72h +
mov [ebp+var_48] ax +
inc eax  +
mov [ebp+var_46] ax +
mov eax 9D7Ah +
mov [ebp+var_44] ax +
inc eax  +
mov [ebp+var_42] ax +
mov eax 9D7Ch +
mov [ebp+var_40] ax +
inc eax  +
mov [ebp+var_3E] ax +
mov eax 9D84h +
mov [ebp+var_3C] ax +
inc eax  +
mov [ebp+var_3A] ax +
mov eax 9D86h +
mov [ebp+var_38] ax +
inc eax  +
mov [ebp+var_36] ax +
mov eax 9D8Eh +
mov [ebp+var_34] ax +
inc eax  +
mov [ebp+var_32] ax +
mov eax 9D90h +
mov [ebp+var_30] ax +
inc eax  +
mov [ebp+var_2E] ax +
mov eax 9DA2h +
mov [ebp+var_2C] ax +
inc eax  +
mov [ebp+var_2A] ax +
mov eax 9DA4h +
mov [ebp+var_28] ax +
inc eax  +
mov [ebp+var_26] ax +
mov eax 9DACh +
mov [ebp+var_24] ax +
inc eax  +
mov [ebp+var_22] ax +
mov eax 9DAEh +
mov [ebp+var_20] ax +
inc eax  +
mov [ebp+var_1E] ax +
mov eax 9DB6h +
mov [ebp+var_1C] ax +
inc eax  +
mov [ebp+var_1A] ax +
mov eax 9DB8h +
mov [ebp+var_18] ax +
inc eax  +
mov [ebp+var_16] ax +
mov eax 9DC0h +
mov [ebp+var_14] ax +
inc eax  +
mov [ebp+var_12] ax +
mov eax 9DC2h +
mov [ebp+var_10] ax +
inc eax  +
mov [ebp+var_E] ax +
mov eax 9D98h +
mov [ebp+var_C] ax +
inc eax  +
mov [ebp+var_A] ax +
mov eax 9D9Ah +
mov [ebp+var_8] ax +
inc eax  +
mov [ebp+var_6] ax +
mov eax [ebp+arg_0] +
add eax 0FFFFFD76h +
xor ecx ecx +
cmp eax 9 +
ja loc_1010208  +
jmp ds:off_10100B5[eax*4]  +
xor ecx ecx +
push ds:dword_100FAB8  +
lea eax [ebp+ecx*8+var_4C] +
push eax  +
push offset dword_100FAA8  +
call sub_100FB15  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100207A  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 1  +
push 405h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld1   +
push esi  +
fcomp  [ebp+arg_0] +
mov esi ecx +
lea ecx [esi+284h] +
fnstsw  ax +
test ah 41h +
jz loc_1049552  +
call sub_100CA8E  +
fld  [ebp+arg_0] +
fld1   +
fsub st(1) st +
fsubr  qword ptr [esi+2A0h] +
fdivp st(1) st +
fmul  ds:dbl_1009F68 +
test eax eax +
jnz loc_101030B  +
fadd  ds:dbl_1006830 +
call _ftol2_sse  +
mov dword ptr [ebp+arg_0+4] eax +
fild  dword ptr [ebp+arg_0+4] +
call _ftol2_sse  +
add eax 32h +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1010331  +
mov eax [eax+40h] +
test eax eax +
jg loc_101036B  +
mov eax dword_108B290 +
imul eax eax +
jmp loc_101036B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
and [ebp+var_4] 0 +
sub eax 0 +
jz loc_1010323  +
dec eax  +
jnz loc_101036E  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1010785  +
mov eax [eax+3Ch] +
test eax eax +
jle loc_1010785  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
dec eax  +
jz loc_10411BB  +
dec eax  +
jz loc_10411AD  +
fld1   +
leave   +
retn 0Ch  +
***
push 0C4ECh  +
jmp loc_101040F  +
push 0C4EDh  +
jmp loc_101040F  +
push 0C4EEh  +
jmp loc_101040F  +
push 0C4EFh  +
jmp loc_101040F  +
***
call sub_100208C  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov esi [ebp+8] +
push offset word_100219C  +
mov ecx esi +
call ??0CString@@QAE@PBG@Z  +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-10h] 1 +
cmp eax 8 +
ja loc_1010416  +
jmp ds:off_10103A4[eax*4]  +
push 0C3C7h  +
mov ecx esi +
call ?LoadStringW@CString@@QAEHI@Z  +
mov eax esi +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
fld  qword ptr [esi+50h] +
xor ebx ebx +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 44h +
jp loc_1034C66  +
mov ecx [esi+74h] +
cmp ecx ebx +
jz loc_1010455  +
fld  [ebp+arg_0] +
push ecx  +
push ecx  +
fstp  [esp+10h+var_10] +
call sub_101048C  +
mov ecx [esi+78h] +
cmp ecx ebx +
jz loc_1010469  +
fld  [ebp+arg_0] +
push ecx  +
push ecx  +
fstp  [esp+10h+var_10] +
call sub_101048C  +
cmp [ebp+arg_8] bl +
pop esi  +
pop ebx  +
jz loc_1010483  +
fld  [ebp+arg_0] +
push ecx  +
push ecx  +
mov ecx dword_108A1EC +
fstp  [esp+8+var_8] +
call sub_10105A5  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea edx [ecx+90h] +
fld  qword ptr [edx] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 44h +
jnp loc_10104AD  +
fld  [ebp+arg_0] +
fstp  qword ptr [edx] +
call sub_10104B6  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov eax [eax+48h] +
mov edi [eax+40h] +
push edi  +
xor ebx ebx +
inc ebx  +
push ebx  +
push dword_108B1D0  +
call sub_1010340  +
fstp  qword ptr [esi+70h] +
push edi  +
xor edi edi +
push edi  +
push dword_108B1D0  +
call sub_1010340  +
fstp  qword ptr [esi+78h] +
mov eax dword_108B1D0 +
fld  ds:dbl_1010590 +
dec eax  +
fcomp  qword ptr [esi+90h] +
jz loc_1043C3B  +
dec eax  +
fnstsw  ax +
jz loc_1043C08  +
test ah bl +
jz loc_1043BB9  +
fld  ds:dbl_1010290 +
fcomp  qword ptr [esi+90h] +
fnstsw  ax +
test ah 1 +
jz loc_1043BC8  +
fld  ds:dbl_1010598 +
fcomp  qword ptr [esi+90h] +
fnstsw  ax +
test ah 1 +
jz loc_1043BD7  +
fld  ds:dbl_1010588 +
fcomp  qword ptr [esi+90h] +
fnstsw  ax +
test ah 1 +
jnz loc_1034DE0  +
mov dword ptr [esi+80h] 64h +
push edi  +
push edi  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_0] +
push ecx  +
push ecx  +
add ecx 0B8h +
fstp  [esp+8+var_8] +
call sub_10105C6  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+270h] +
fstp  qword ptr [edi] +
call sub_101062D  +
fld  qword ptr [edi] +
push ecx  +
push ecx  +
mov ecx esi +
fstp  [esp+14h+var_14] +
lea ebx [esi+22Ch] +
call sub_10102BE  +
push eax  +
mov ecx ebx +
call sub_101029D  +
mov ecx ebx +
call sub_1010615  +
pop edi  +
mov [esi+278h] eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push 400h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
call sub_10020DC  +
mov esi ecx +
cmp dword ptr [esi+0FCh] 0 +
jz loc_1010703  +
lea ecx [esi+284h] +
call sub_100CA8E  +
fld  qword ptr [esi+270h] +
fmul  ds:dbl_1010288 +
test eax eax +
jnz loc_1010674  +
fadd  ds:dbl_1006830 +
call _ftol2_sse  +
mov [ebp-3Ch] eax +
fild  dword ptr [ebp-3Ch] +
fld  st +
call _ftol2_sse  +
mov [ebp-3Ch] eax +
fild  dword ptr [ebp-3Ch] +
fucomp  st(1) +
fnstsw  ax +
test ah 44h +
jp loc_104958D  +
xor eax eax +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_C] +
push eax  +
push offset a0_F  +
lea eax [ebp-38h] +
push 14h  +
push eax  +
call swprintf_s  +
add esp 18h +
lea ecx [ebp-3Ch] +
call ??0CString@@QAE@XZ  +
mov ecx [esi+27Ch] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
push 2  +
lea edx [ebp-40h] +
push edx  +
call dword ptr [eax+8]  +
mov eax [eax] +
lea ecx [ebp-38h] +
push ecx  +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
mov byte ptr [ebp-4] 1 +
call ?Format@CString@@QAAXPBGZZ  +
add esp 0Ch +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
push dword ptr [ebp-3Ch]  +
lea ecx [esi+0DCh] +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
call ??1CString@@QAE@XZ  +
call sub_1002119  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi ecx +
test edx edx +
jg loc_10401E7  +
mov eax [esi+40h] +
mov eax [eax+2Ch] +
neg eax  +
cmp edx eax +
jl loc_10401EE  +
mov eax [ebp+arg_4] +
test eax eax +
jg loc_10401F5  +
mov ecx [esi+40h] +
mov ecx [ecx+30h] +
neg ecx  +
cmp eax ecx +
jl loc_10401FC  +
push 1  +
push 0  +
push dword ptr [esi+20h]  +
mov [esi+58h] edx +
mov [esi+5Ch] eax +
call ds:InvalidateRect  +
mov ecx esi +
call sub_100FBC7  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax dword_108B28C +
jmp loc_1010336  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_10107A9  +
push esi  +
mov esi [ebp+arg_4] +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10107D9  +
mov eax [ebp+arg_4] +
imul eax eax +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1010807  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_1010826  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1010794  +
dec [ebp+arg_4]  +
add [ebp+arg_0] 0Ch +
jmp loc_101080C  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101085D  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jz loc_101087D  +
push esi  +
push [ebp+arg_8]  +
call sub_1010794  +
add [ebp+arg_8] 0Ch +
add esi 0Ch +
jmp loc_1010866  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi eax +
jmp loc_10108ED  +
***
call sub_1002370  +
mov ebx ecx +
mov esi [ebp+10h] +
lea edi [ebp-1Ch] +
movs   +
movs   +
movs   +
call sub_101098A  +
mov esi [ebp+0Ch] +
mov edi eax +
test esi esi +
jz loc_1010962  +
mov ecx ebx +
call sub_101096F  +
mov ecx 15555555h +
mov edx ecx +
sub edx eax +
cmp edx esi +
jb loc_10478F3  +
add eax esi +
cmp edi eax +
jnb loc_1047911  +
mov edx edi +
shr edx 1 +
sub ecx edx +
cmp ecx edi +
jb loc_10478F8  +
add edi edx +
cmp edi eax +
jb loc_1010885  +
push 0  +
push edi  +
call sub_100BBF5  +
and dword ptr [ebp-4] 0 +
push ebx  +
mov [ebp+10h] eax +
push dword ptr [ebp+10h]  +
mov eax [ebx+4] +
push dword ptr [ebp+8]  +
push eax  +
call sub_101082F  +
lea ecx [ebp-1Ch] +
push ecx  +
push esi  +
push eax  +
mov ecx ebx +
call sub_10107B3  +
mov ecx [ebx+8] +
push ebx  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
call sub_101082F  +
mov ecx ebx +
call sub_101096F  +
add esi eax +
mov eax [ebx+4] +
test eax eax +
jz loc_101094C  +
mov ecx [ebx+8] +
cmp eax ecx +
jz loc_1010943  +
add eax 0Ch +
jmp loc_101093A  +
push dword ptr [ebx+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+10h] +
imul edi edi +
imul esi esi +
add edi eax +
add esi eax +
mov [ebx+0Ch] edi +
mov [ebx+8] esi +
mov [ebx+4] eax +
call sub_1002061  +
retn 0Ch  +
***
mov edx [ecx+4] +
test edx edx +
jz loc_1010982  +
mov eax [ecx+8] +
sub eax edx +
push 0Ch  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
xor eax eax +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jz loc_101099D  +
mov eax [ecx+0Ch] +
sub eax edx +
push 0Ch  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
xor eax eax +
retn   +
***
mov eax offset __imp_GdipGetImagePixelFormat +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetImageWidth +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetImageHeight +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDrawImageRectRectI +
jmp loc_100ABE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
neg eax  +
sbb eax eax +
and eax 2 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10109FE  +
jmp ds:?DoPaint@CControlBar@@UAEXPAVCDC@@@Z  +
***
jmp ds:?PreTranslateMessage@CControlBar@@UAEHPAUtagMSG@@@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 28h +
jb loc_1010A43  +
mov eax [eax+4] +
cdq   +
xor eax edx +
sub eax edx +
pop ebp  +
retn 4  +
movzx eax word ptr [eax+4] +
jmp loc_1010A3A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 28h +
jb loc_1010A67  +
mov eax [eax+8] +
cdq   +
xor eax edx +
sub eax edx +
pop ebp  +
retn 4  +
movzx eax word ptr [eax+6] +
jmp loc_1010A5E  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi-100h]  +
add esi 0FFFFFEE4h +
lea ecx [ebp-8] +
call MFC42u_6466  +
mov ecx esi +
call ?ExternalAddRef@CCmdTarget@@QAEKXZ  +
mov ecx [ebp-4] +
mov edx [ebp-8] +
mov [ecx+4] edx +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
push edi  +
mov eax ecx +
push 5  +
pop ecx  +
mov esi edx +
mov edi eax +
movs   +
lea esi [edx+18h] +
lea edi [eax+18h] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
push 5  +
pop ecx  +
push 5  +
lea esi [ebp+arg_4] +
lea edi [ebp+var_18] +
movs   +
pop ecx  +
lea esi [ebp+var_18] +
mov edi eax +
movs   +
mov ecx [ebp+var_4] +
lea edi [eax+18h] +
lea esi [ebp+arg_18] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100207A  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101096F  +
mov ecx [ebp+arg_0] +
cmp eax ecx +
jbe loc_1048E0F  +
imul ecx ecx +
add ecx [esi+4] +
pop esi  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov esi [esi+8] +
jmp loc_1010B8C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push esi  +
mov esi [eax+4] +
push edi  +
mov edi eax +
cmp byte ptr [esi+39h] 0 +
jnz loc_1010BA8  +
push [ebp+arg_0]  +
lea eax [esi+10h] +
push eax  +
call sub_1010DCF  +
test al al +
jnz loc_1010B73  +
mov edi esi +
mov esi [esi] +
jmp loc_1010B8C  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_1010B7D  +
mov esi [esi+4] +
mov [ebp+var_4] eax +
cmp eax esi +
jz loc_1010BEF  +
add eax 10h +
push eax  +
push [ebp+arg_4]  +
call sub_1010DCF  +
test al al +
jnz loc_1010BEF  +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
mov [ebp+arg_4] esi +
lea eax [ebp+arg_4] +
jmp loc_1010BE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+10h] +
push dword ptr [ebp+0Ch]  +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+8] +
push eax  +
lea ecx [esi-0Ch] +
call sub_1010BB5  +
mov eax [ebp+8] +
cmp eax [esi-8] +
jz loc_1010C46  +
lea esi [eax+28h] +
lea edi [ebp-10h] +
movs   +
movs   +
lea eax [ebp-10h] +
movs   +
push eax  +
push dword ptr [ebp+10h]  +
movs   +
call ds:PropVariantCopy  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov eax 80004005h +
jmp loc_1010C40  +
***
call sub_100208C  +
mov edi ecx +
cmp dword ptr [edi+8] 6666665h +
jnb loc_10488CC  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_101102A  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_1010CC2  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
mov ecx [eax] +
cmp byte ptr [ecx+38h] 0 +
jz loc_10488F7  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+38h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1002061  +
retn 10h  +
cmp byte ptr [ebp+0Ch] 0 +
jnz loc_101175C  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jz loc_1010C97  +
jmp loc_1010C9A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
push ebx  +
push esi  +
push edi  +
push [ebp+pvarSrc]  +
xor eax eax +
lea edi [ebp+pvarDest] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+pvarDest] +
push eax  +
mov ebx ecx +
call ds:PropVariantCopy  +
mov [ebp+pvarSrc] eax +
test eax eax +
jl loc_1010D43  +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarDest] +
movs   +
movs   +
movs   +
sub esp 14h +
push 5  +
pop ecx  +
movs   +
mov esi [ebp+arg_0] +
mov edi esp +
lea eax [ebp+var_68] +
push eax  +
movs   +
call sub_1010B03  +
push eax  +
lea ecx [ebp+var_40] +
call sub_1010AD9  +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebx+20h] +
call sub_1010D52  +
mov eax [ebp+pvarSrc] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
cmp byte ptr [esi+39h] 0 +
jz loc_1010DAC  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_1016317  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_104898C  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_1010C52  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
lea eax [esi+10h] +
push eax  +
push [ebp+arg_4]  +
mov ebx esi +
call sub_1010DCF  +
mov byte ptr [ebp+var_8] al +
test al al +
jnz loc_1011770  +
mov esi [esi+8] +
jmp loc_1010D6B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 10h  +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jz loc_1010DEC  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
xor ecx ecx +
test eax eax +
setl cl  +
mov al cl +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_101096F  +
mov ecx esi +
mov edi eax +
call sub_101098A  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jnb loc_1010E32  +
push 1  +
push eax  +
call sub_10107B3  +
mov [esi+8] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1010E43  +
jmp loc_1010E2C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_101096F  +
test eax eax +
jz loc_1010E83  +
mov eax [ebp+arg_4] +
sub eax [edi+4] +
push 0Ch  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi eax +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_101088E  +
imul esi esi +
add esi [edi+4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
xor esi esi +
jmp loc_1010E63  +
***
and [ebp-0D4h] edx +
mov eax [ebp-0D0h] +
mov eax [eax+8] +
mov ecx [eax] +
lea edx [ebp-0D4h] +
push edx  +
push offset dword_1010AC4  +
push eax  +
mov dword ptr [ebp-4] 8 +
call dword ptr [ecx]  +
mov [ebp-0C8h] eax +
test eax eax +
jl loc_1010F41  +
xor esi esi +
mov [ebp-134h] esi +
mov [ebp-130h] esi +
mov [ebp-12Ch] esi +
mov ecx [ebx+24h] +
mov eax [ecx] +
lea edx [ebp-138h] +
push edx  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 0Ah +
call dword ptr [eax+8]  +
cmp eax esi +
jl loc_10117A9  +
mov eax [ebp-0D4h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
lea ecx [ebp-138h] +
mov ebx [ebx] +
sub ebx esi +
mov [ebp-0E0h] ecx +
jz loc_1011790  +
dec ebx  +
jz loc_104913C  +
dec ebx  +
jnz loc_1010F36  +
call sub_101096F  +
mov ebx ds:PropVariantClear +
mov [ebp-0DCh] eax +
mov [ebp-0D0h] esi +
jmp loc_101653D  +
***
lea ecx [ebp-138h] +
call sub_100CAB5  +
mov eax [ebp-0D4h] +
jmp loc_100FEB2  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CCmdTarget@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+20h] +
mov dword ptr [esi] offset off_10055E4 +
call sub_10110C5  +
mov dword ptr [esi+2Ch] offset off_1010F90 +
and dword ptr [esi+4] 0 +
mov eax esi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0  +
push 1  +
mov edi ecx +
call sub_100CB28  +
push [ebp+arg_10]  +
mov esi eax +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_1011062  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1011082  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101108B  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_C] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
push edi  +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
push 0Ah  +
mov [eax+8] ecx +
pop ecx  +
lea edi [eax+10h] +
movs   +
mov cl [ebp+arg_10] +
pop edi  +
mov [eax+38h] cl +
mov byte ptr [eax+39h] 0 +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10110F1  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+39h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_100CB28  +
cmp eax ebx +
jz loc_1011104  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_101110D  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_1011116  +
mov [ecx] ebx +
mov [eax+39h] bl +
mov byte ptr [eax+38h] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 19Ch +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
cmp dword ptr [ebp+8] 5399h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
mov dword ptr [ebp-190h] 80004005h +
jz loc_10373E0  +
cmp dword ptr [ebp+8] 53FDh +
jnz loc_1011745  +
and dword ptr [ebp-190h] 0 +
mov eax 2BDh +
mov [ebp-18Ch] ax +
mov eax 9EFDh +
mov [ebp-18Ah] ax +
inc eax  +
mov [ebp-188h] ax +
mov eax 9EFFh +
mov [ebp-186h] ax +
inc eax  +
mov [ebp-184h] ax +
xor eax eax +
mov [ebp-182h] ax +
mov eax 2BEh +
mov [ebp-180h] ax +
mov eax 9F07h +
mov [ebp-17Eh] ax +
inc eax  +
mov [ebp-17Ch] ax +
mov eax 9F09h +
mov [ebp-17Ah] ax +
inc eax  +
mov [ebp-178h] ax +
xor eax eax +
mov [ebp-176h] ax +
mov eax 2BFh +
mov [ebp-174h] ax +
mov eax 9F2Fh +
mov [ebp-172h] ax +
inc eax  +
mov [ebp-170h] ax +
mov eax 9F31h +
mov [ebp-16Eh] ax +
inc eax  +
mov [ebp-16Ch] ax +
xor eax eax +
mov [ebp-16Ah] ax +
mov eax 2C0h +
mov [ebp-168h] ax +
mov eax 9F25h +
mov [ebp-166h] ax +
inc eax  +
mov [ebp-164h] ax +
mov eax 9F27h +
mov [ebp-162h] ax +
inc eax  +
mov [ebp-160h] ax +
xor eax eax +
mov [ebp-15Eh] ax +
mov eax 2C1h +
mov [ebp-15Ch] ax +
mov eax 9F1Bh +
mov [ebp-15Ah] ax +
inc eax  +
mov [ebp-158h] ax +
mov eax 9F1Dh +
mov [ebp-156h] ax +
inc eax  +
mov [ebp-154h] ax +
xor eax eax +
mov [ebp-152h] ax +
mov eax 2C2h +
mov [ebp-150h] ax +
mov eax 9F11h +
mov [ebp-14Eh] ax +
inc eax  +
mov [ebp-14Ch] ax +
mov eax 9F13h +
mov [ebp-14Ah] ax +
inc eax  +
mov [ebp-148h] ax +
xor eax eax +
mov [ebp-146h] ax +
mov eax 2C3h +
mov [ebp-144h] ax +
mov eax 9F39h +
mov [ebp-142h] ax +
inc eax  +
mov [ebp-140h] ax +
mov eax 9F3Bh +
mov [ebp-13Eh] ax +
inc eax  +
mov [ebp-13Ch] ax +
xor eax eax +
mov [ebp-13Ah] ax +
mov eax 2C4h +
mov [ebp-138h] ax +
mov eax 9F43h +
mov [ebp-136h] ax +
inc eax  +
mov [ebp-134h] ax +
mov eax 9F45h +
mov [ebp-132h] ax +
inc eax  +
mov [ebp-130h] ax +
xor eax eax +
mov [ebp-12Eh] ax +
mov eax 2C5h +
mov [ebp-12Ch] ax +
mov eax 9F4Dh +
mov [ebp-12Ah] ax +
inc eax  +
mov [ebp-128h] ax +
mov eax 9F4Fh +
mov [ebp-126h] ax +
inc eax  +
mov [ebp-124h] ax +
xor eax eax +
mov [ebp-122h] ax +
mov eax 2C6h +
mov [ebp-120h] ax +
mov eax 9F57h +
mov [ebp-11Eh] ax +
inc eax  +
mov [ebp-11Ch] ax +
mov eax 9F59h +
mov [ebp-11Ah] ax +
inc eax  +
mov [ebp-118h] ax +
xor eax eax +
mov [ebp-116h] ax +
mov eax 2C7h +
mov [ebp-114h] ax +
mov eax 9F61h +
mov [ebp-112h] ax +
inc eax  +
mov [ebp-110h] ax +
mov eax 9F63h +
mov [ebp-10Eh] ax +
inc eax  +
mov [ebp-10Ch] ax +
xor eax eax +
mov [ebp-10Ah] ax +
mov eax 2C8h +
mov [ebp-108h] ax +
mov eax 9FC5h +
mov [ebp-106h] ax +
inc eax  +
mov [ebp-104h] ax +
mov eax 9FC7h +
mov [ebp-102h] ax +
inc eax  +
mov [ebp-100h] ax +
xor eax eax +
mov [ebp-0FEh] ax +
mov eax 2C9h +
mov [ebp-0FCh] ax +
mov eax 9FBBh +
mov [ebp-0FAh] ax +
inc eax  +
mov [ebp-0F8h] ax +
mov eax 9FBDh +
mov [ebp-0F6h] ax +
inc eax  +
mov [ebp-0F4h] ax +
xor eax eax +
mov [ebp-0F2h] ax +
mov eax 2CAh +
mov [ebp-0F0h] ax +
mov eax 9FCFh +
mov [ebp-0EEh] ax +
inc eax  +
mov [ebp-0ECh] ax +
mov eax 9FD1h +
mov [ebp-0EAh] ax +
inc eax  +
mov [ebp-0E8h] ax +
xor eax eax +
mov [ebp-0E6h] ax +
mov eax 2CBh +
mov [ebp-0E4h] ax +
mov eax 9FD9h +
mov [ebp-0E2h] ax +
inc eax  +
mov [ebp-0E0h] ax +
mov eax 9FDBh +
mov [ebp-0DEh] ax +
inc eax  +
mov [ebp-0DCh] ax +
xor eax eax +
mov [ebp-0DAh] ax +
mov eax 2CCh +
mov [ebp-0D8h] ax +
mov eax 9F89h +
mov [ebp-0D6h] ax +
inc eax  +
mov [ebp-0D4h] ax +
mov eax 9F8Bh +
mov [ebp-0D2h] ax +
inc eax  +
mov [ebp-0D0h] ax +
xor eax eax +
mov [ebp-0CEh] ax +
mov eax 2CDh +
mov [ebp-0CCh] ax +
mov eax 9F93h +
mov [ebp-0CAh] ax +
inc eax  +
mov [ebp-0C8h] ax +
mov eax 9F95h +
mov [ebp-0C6h] ax +
inc eax  +
mov [ebp-0C4h] ax +
xor eax eax +
mov [ebp-0C2h] ax +
mov eax 2CEh +
mov [ebp-0C0h] ax +
mov eax 9F9Dh +
mov [ebp-0BEh] ax +
inc eax  +
mov [ebp-0BCh] ax +
mov eax 9F9Fh +
mov [ebp-0BAh] ax +
inc eax  +
mov [ebp-0B8h] ax +
xor eax eax +
mov [ebp-0B6h] ax +
mov eax 2CFh +
mov [ebp-0B4h] ax +
mov eax 9F7Fh +
mov [ebp-0B2h] ax +
inc eax  +
mov [ebp-0B0h] ax +
mov eax 9F81h +
mov [ebp-0AEh] ax +
inc eax  +
mov [ebp-0ACh] ax +
xor eax eax +
mov [ebp-0AAh] ax +
mov eax 2D0h +
mov [ebp-0A8h] ax +
mov eax 9F6Bh +
mov [ebp-0A6h] ax +
inc eax  +
mov [ebp-0A4h] ax +
mov eax 9F6Dh +
mov [ebp-0A2h] ax +
inc eax  +
mov [ebp-0A0h] ax +
xor eax eax +
mov [ebp-9Eh] ax +
mov eax 2D1h +
mov [ebp-9Ch] ax +
mov eax 9F75h +
mov [ebp-9Ah] ax +
inc eax  +
mov [ebp-98h] ax +
mov eax 9F77h +
mov [ebp-96h] ax +
inc eax  +
mov [ebp-94h] ax +
xor eax eax +
mov [ebp-92h] ax +
mov eax 2D2h +
mov [ebp-90h] ax +
mov eax 9FA7h +
mov [ebp-8Eh] ax +
inc eax  +
mov [ebp-8Ch] ax +
mov eax 9FA9h +
mov [ebp-8Ah] ax +
inc eax  +
mov [ebp-88h] ax +
xor eax eax +
mov [ebp-86h] ax +
mov eax 2D3h +
mov [ebp-84h] ax +
mov eax 9FB1h +
mov [ebp-82h] ax +
inc eax  +
mov [ebp-80h] ax +
mov eax 9FB3h +
mov [ebp-7Eh] ax +
inc eax  +
mov [ebp-7Ch] ax +
xor eax eax +
push 17h  +
mov [ebp-7Ah] ax +
lea esi [ebp-188h] +
pop ebx  +
mov ax [esi-2] +
push ds:dword_100FAB8  +
mov [ebp-0Ch] ax +
mov ax [esi] +
mov [ebp-0Ah] ax +
mov ax [esi+2] +
mov [ebp-8] ax +
mov ax [esi+4] +
mov [ebp-6] ax +
mov ax [esi-4] +
mov [ebp-19Ch] ax +
lea eax [ebp-0Ch] +
push eax  +
push offset dword_100FAA8  +
call sub_100FB15  +
mov [ebp-19Ah] ax +
movzx eax word ptr [esi+6] +
mov [ebp-198h] eax +
lea eax [ebp-19Ch] +
push eax  +
mov ecx edi +
call sub_1010DFE  +
add esi 0Ch +
dec ebx  +
jnz loc_10116E2  +
mov ecx [ebp-4] +
mov eax [ebp-190h] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 8  +
***
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_1010C9A  +
mov [eax] ebx +
jmp loc_1010C9A  +
***
mov esi [esi] +
jmp loc_1010D6B  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
jmp loc_1010DA5  +
***
call sub_101096F  +
mov ebx ds:PropVariantClear +
mov [ebp-124h] eax +
mov [ebp-0D8h] esi +
jmp loc_10117BF  +
lea ecx [ebx+14h] +
jmp loc_1010F00  +
***
xor esi esi +
jmp loc_10165AD  +
***
xor esi esi +
jmp loc_10118B2  +
mov eax [ebp-0D8h] +
cmp eax [ebp-124h] +
jnb loc_1010F36  +
mov ecx [ebp-0E0h] +
push eax  +
call sub_1010B4E  +
mov esi eax +
lea edi [ebp-100h] +
movs   +
movs   +
movs   +
xor eax eax +
lea edi [ebp-110h] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [ebp-0F4h] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [ebp-120h] +
stos   +
stos   +
stos   +
stos   +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
movzx ecx word ptr [ebp-0FEh] +
mov eax [eax+0Ch] +
push 2000h  +
xor edi edi +
push edi  +
push edi  +
push edi  +
push ecx  +
push eax  +
call ds:LoadImageW  +
cmp eax edi +
jz loc_1049369  +
mov [ebp-0C8h] edi +
mov ecx [ebp-0E4h] +
mov ecx [ecx+34h] +
mov edx [ecx] +
lea esi [ebp-0C8h] +
push esi  +
push edi  +
push eax  +
push ecx  +
mov byte ptr [ebp-4] 0Bh +
call dword ptr [edx+0Ch]  +
cmp eax edi +
jl loc_10492BF  +
push 0Dh  +
pop eax  +
mov [ebp-0F4h] ax +
mov eax [ebp-0C8h] +
mov [ebp-0ECh] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [ebp-0C8h] +
mov byte ptr [ebp-4] 0Ah +
cmp eax edi +
jz loc_101188F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push 30h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-0C8h] ecx +
mov byte ptr [ebp-4] 0Ch +
cmp ecx edi +
jz loc_10117B8  +
call sub_1010F51  +
mov esi eax +
lea eax [ebp-0F4h] +
push eax  +
push offset dword_1011A08  +
mov ecx esi +
mov byte ptr [ebp-4] 0Ah +
call sub_1010CDE  +
mov eax [ebp-0FCh] +
cmp eax edi +
ja loc_10492D5  +
cmp [ebp-100h] di +
jbe loc_101198D  +
lea ecx [ebp-0CCh] +
call ??0CString@@QAE@XZ  +
movzx eax word ptr [ebp-100h] +
push eax  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 0Dh +
call ?LoadStringW@CString@@QAEHI@Z  +
cmp eax edi +
jz loc_101197E  +
push 0Ah  +
lea ecx [ebp-0CCh] +
call ?ReverseFind@CString@@QBEHG@Z  +
cmp eax edi +
jl loc_1049339  +
mov ecx [ebp-0CCh] +
mov ecx [ecx-8] +
sub ecx eax +
dec ecx  +
push ecx  +
lea eax [ebp-0DCh] +
push eax  +
lea ecx [ebp-0CCh] +
call ?Right@CString@@QBE?AV1@H@Z  +
lea eax [ebp-110h] +
push eax  +
push dword ptr [ebp-0DCh]  +
mov byte ptr [ebp-4] 0Eh +
call sub_1011A21  +
cmp eax edi +
jl loc_10492FD  +
lea ecx [ebp-0DCh] +
mov byte ptr [ebp-4] 0Dh +
call ??1CString@@QAE@XZ  +
lea eax [ebp-110h] +
push eax  +
push offset unk_10046EC  +
mov ecx esi +
call sub_1010CDE  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 0Ah +
call ??1CString@@QAE@XZ  +
mov [ebp-0D0h] edi +
lea edx [ebp-0D0h] +
push edx  +
lea eax [esi+2Ch] +
mov ecx [eax] +
push offset dword_1010AB4  +
push eax  +
mov byte ptr [ebp-4] 0Fh +
call dword ptr [ecx]  +
cmp eax edi +
mov [ebp-0C8h] eax +
jl loc_1049313  +
mov eax [ebp-0D4h] +
push dword ptr [ebp-0D0h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
lea eax [ebp-0F4h] +
push eax  +
call ebx  +
lea eax [ebp-120h] +
push eax  +
call ebx  +
lea eax [ebp-110h] +
push eax  +
call ebx  +
mov eax [ebp-0D0h] +
mov byte ptr [ebp-4] 0Ah +
cmp eax edi +
jz loc_10119FA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-0D8h]  +
jmp loc_10117BF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
push 1Fh  +
pop eax  +
mov [edi] ax +
lea eax [edi+8] +
push eax  +
push [ebp+arg_0]  +
call ds:SHStrDupW  +
mov ecx eax +
test ecx ecx +
jl loc_1044989  +
mov eax ecx +
pop edi  +
pop ebp  +
retn 8  +
***
retn   +
***
mov eax ds:?interfaceMap@COleServerDoc@@1UAFX_INTERFACEMAP@@B +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi-100h]  +
add esi 0FFFFFEE4h +
lea ecx [ebp-8] +
call MFC42u_6466  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
call ?ExternalQueryInterface@CCmdTarget@@QAEKPBXPAPAX@Z  +
mov ecx [ebp-4] +
mov edx [ebp-8] +
mov [ecx+4] edx +
pop esi  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi-100h]  +
add esi 0FFFFFEE4h +
lea ecx [ebp-8] +
call MFC42u_6466  +
mov ecx esi +
call ?ExternalRelease@CCmdTarget@@QAEKXZ  +
mov ecx [ebp-4] +
mov edx [ebp-8] +
mov [ecx+4] edx +
pop esi  +
leave   +
retn 4  +
***
cmp edx ecx +
jz loc_10062CE  +
jmp loc_10062DF  +
***
xor eax eax +
retn   +
***
jmp ds:?RegisterIfServerAttached@COleLinkingDoc@@MAEHPBGH@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov dword_108B19C eax +
call ?Default@CWnd@@IAEJXZ  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
xor ebx ebx +
cmp esi ebx +
jz loc_1011C70  +
cmp [esi+20h] ebx +
jz loc_1011C70  +
push offset unk_108B32C  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@ABV0@@Z  +
push ebx  +
push ebx  +
push 3  +
pop edi  +
push edi  +
push ebx  +
push edi  +
push 80000000h  +
push dword ptr [ebp-14h]  +
mov [ebp-4] ebx +
call ds:CreateFileW  +
mov [ebp-18h] eax +
cmp eax 0FFFFFFFFh +
jz loc_103707F  +
lea ecx [ebp-20h] +
push ecx  +
push eax  +
call ds:GetFileSizeEx  +
push dword ptr [ebp-18h]  +
test eax eax +
setnz byte ptr [ebp-0Dh]  +
call ds:CloseHandle  +
cmp [ebp-0Dh] bl +
jz loc_103707F  +
cmp [ebp-1Ch] ebx +
jnz loc_103707F  +
push edi  +
mov ecx esi +
call sub_1005C20  +
test eax eax +
jz loc_1011C39  +
push dword ptr [esi+37Ch]  +
mov ecx esi +
push edi  +
call sub_1011C86  +
push 1  +
push dword ptr [ebp-20h]  +
lea eax [ebp-18h] +
push 0C3CFh  +
push eax  +
call sub_101217F  +
push dword ptr [eax]  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_1011CA8  +
lea ecx [ebp-18h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 40Fh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 3  +
mov esi ecx +
call sub_1005C20  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
push 3  +
call ?SetPaneText@CStatusBar@@QAEHHPBGH@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+6C0h] +
push eax  +
call sub_1011CFE  +
and dword ptr [esi+6B0h] 0 +
and dword ptr [esi+6DCh] 0 +
mov dword_108A320 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1011D27  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1011D27  +
mov ecx esi +
call ?RemoveHead@CObList@@QAEPAVCObject@@XZ  +
test eax eax +
jz loc_1011D0B  +
mov edx [eax] +
push 1  +
mov ecx eax +
call dword ptr [edx+4]  +
jmp loc_1011D0B  +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ebp+14h]  +
mov esi eax +
call ds:RegCloseKey  +
jmp loc_10130BA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push 0  +
mov esi ecx +
call sub_100AF58  +
mov ecx esi +
call sub_102E919  +
push edi  +
lea eax [ebp+var_20C] +
push eax  +
call ?AfxFullPath@@YGHPAGPBG@Z  +
mov ecx [esi+84h] +
mov eax [ecx] +
lea edx [ebp+var_20C] +
push edx  +
call dword ptr [eax+24h]  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100207A  +
leave   +
retn 4  +
***
mov eax offset __imp_GdipSaveImageToStream +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipCreateBitmapFromFile +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetImageRawFormat +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetPropertySize +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetAllPropertyItems +
jmp loc_100ABE3  +
***
push 0C3E4h  +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp+14h]  +
mov [ebp-94h] edi +
fild  dword ptr [ebp-94h] +
test edi edi +
jl loc_1044563  +
fmul  ds:dbl_1011E18 +
push ecx  +
push ecx  +
lea eax [ebp-94h] +
fstp  [esp+0Ch+var_C] +
push eax  +
call sub_10122ED  +
mov byte ptr [ebp-4] 6 +
jmp loc_1012238  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+0F0h]  +
push dword ptr [esi+0ECh]  +
push dword ptr [ebp+8]  +
call sub_1011E5B  +
mov [esi+0FCh] eax +
test eax eax +
jz loc_1040D7C  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10020DC  +
mov eax [ebp+10h] +
mov ebx [ebp+8] +
mov esi [ebp+0Ch] +
mov [ebp-34h] eax +
mov eax [ebx+14h] +
mov edi ecx +
xor ecx ecx +
not eax  +
mov [ebp-30h] edi +
mov [ebp-28h] ecx +
test al 1 +
jz loc_102C800  +
mov eax [ebp+14h] +
mov edx [edi+0ECh] +
neg eax  +
sbb eax eax +
and eax 3 +
cmp dword ptr [edx+10h] 3 +
jle loc_103CFE9  +
cmp [ebp+14h] ecx +
jnz loc_103CFE9  +
mov ecx [ebx+20h] +
mov eax [ecx] +
lea edx [ebp-24h] +
push edx  +
call dword ptr [eax+20h]  +
mov ecx [ebx+20h] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
call dword ptr [eax+54h]  +
cmp dword ptr [esi+10h] 4 +
lea eax [esi+14h] +
jnz loc_1040D18  +
mov edi [edi+24h] +
push 64h  +
lea ecx [esi+48h] +
push ecx  +
lea ecx [esi+44h] +
push ecx  +
lea ecx [esi+40h] +
push ecx  +
lea ecx [esi+3Ch] +
push ecx  +
push esi  +
push eax  +
push edi  +
push dword ptr [ebp-24h]  +
call sub_102F10F  +
xor esi esi +
mov [ebp-28h] eax +
cmp eax esi +
jz loc_1040D22  +
push esi  +
push 0FFFFFFFFh  +
push esi  +
lea ecx [ebp-4Ch] +
call sub_102F32D  +
mov ecx [ebx+20h] +
mov eax [ecx] +
lea edx [ebp-4Ch] +
push edx  +
push 10h  +
push dword ptr [ebp-24h]  +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+28h]  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 0 +
call sub_102F2DF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ??1CString@@QAE@XZ  +
cmp [ebp-28h] esi +
jz loc_1011F70  +
mov ebx [ebx+20h] +
mov eax [ebx] +
lea ecx [ebp-2Ch] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+20h]  +
push dword ptr [eax]  +
mov ecx offset unk_108AF60 +
push esi  +
push 83Eh  +
mov dword ptr [ebp-4] 2 +
call sub_101209D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ??1CString@@QAE@XZ  +
mov eax [ebp-28h] +
call sub_1002119  +
retn 10h  +
***
call sub_10020DC  +
test dword ptr [ebp+0Ch] 1000h +
mov eax [ebp+10h] +
mov ebx [ebp+8] +
mov esi ecx +
mov [ebp-264h] eax +
mov edi 2000h +
jz loc_102C9BC  +
test [ebp+0Ch] edi +
jnz loc_102C9BC  +
xor eax eax +
inc eax  +
mov [esi+104h] eax +
test eax eax +
jz loc_1012015  +
or [ebp+0Ch] edi +
test byte ptr [ebp+0Ch] 3 +
jz loc_102C9C3  +
lea eax [ebp-260h] +
push eax  +
push ebx  +
call ds:FindFirstFileW  +
cmp eax 0FFFFFFFFh +
jz loc_103C5E9  +
push eax  +
mov [esi+10Ch] edi +
call ds:FindClose  +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-268h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_103C5F8  +
mov ecx eax +
call ??0CFile@@QAE@XZ  +
mov esi eax +
push dword ptr [ebp-264h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push ebx  +
mov ecx esi +
call dword ptr [eax+28h]  +
test eax eax +
jz loc_1040A25  +
mov eax esi +
call sub_1002119  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
mov eax [ebp+arg_4] +
mov [ecx+434h] eax +
mov eax [ebp+arg_0] +
mov [ecx+44Ch] eax +
jz loc_10120C8  +
push [ebp+arg_8]  +
add ecx 448h +
call ??4CString@@QAEABV0@PBG@Z  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+1B0h] +
test eax eax +
jz loc_10120F5  +
cmp dword ptr [eax+20h] 0 +
jnz loc_10415E0  +
pop ebp  +
nop   +
nop   +
nop   +
nop   +
nop   +
jmp ds:?AddToRecentFileList@CWinApp@@UAEXPBG@Z  +
***
call sub_100208C  +
mov esi ecx +
cmp dword ptr [esi+104h] 0 +
mov edi [ebp+8] +
jz loc_1012129  +
push dword ptr [edi+4]  +
call ds:SetEndOfFile  +
mov eax [edi] +
lea ecx [ebp+8] +
push ecx  +
mov ecx edi +
call dword ptr [eax+20h]  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
push edi  +
mov ecx esi +
call ?ReleaseFile@CDocument@@UAEXPAVCFile@@H@Z  +
mov esi [esi+10Ch] +
test esi esi +
jz loc_101215B  +
push 0  +
push dword ptr [ebp+8]  +
push 5  +
push esi  +
call ds:SHChangeNotify  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call ??1CString@@QAE@XZ  +
call sub_1002061  +
retn 8  +
***
call sub_10020DC  +
mov esi [ebp+8] +
and dword ptr [ebp-0A4h] 0 +
lea ecx [ebp-0A0h] +
mov [ebp-0B0h] esi +
call ??0CString@@QAE@XZ  +
xor ebx ebx +
inc ebx  +
lea ecx [ebp-9Ch] +
mov [ebp-4] ebx +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-98h] +
mov byte ptr [ebp-4] 2 +
call ??0CString@@QAE@XZ  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-0A0h] +
mov byte ptr [ebp-4] 3 +
call ?LoadStringW@CString@@QAEHI@Z  +
mov edi [ebp+10h] +
lea ecx [ebp-98h] +
cmp edi 40000000h +
ja loc_1044515  +
cmp edi 100000h +
jbe loc_1011DD7  +
push 0C3E5h  +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp+14h]  +
mov [ebp-94h] edi +
fild  dword ptr [ebp-94h] +
test edi edi +
jl loc_1044558  +
fmul  ds:dbl_10122E0 +
push ecx  +
push ecx  +
lea eax [ebp-94h] +
fstp  [esp+10h+var_14+4] +
push eax  +
call sub_10122ED  +
mov byte ptr [ebp-4] 5 +
push eax  +
lea ecx [ebp-9Ch] +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-94h] +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
mov eax [ebp-9Ch] +
mov [ebp-0ACh] eax +
mov eax [ebp-98h] +
mov [ebp-0A8h] eax +
lea eax [ebp-0ACh] +
push eax  +
push 40h  +
lea eax [ebp-90h] +
push eax  +
push 0  +
push 0  +
push dword ptr [ebp-0A0h]  +
push 2400h  +
call ds:FormatMessageW  +
lea eax [ebp-90h] +
push eax  +
mov ecx esi +
call ??0CString@@QAE@PBG@Z  +
lea ecx [ebp-98h] +
mov [ebp-0A4h] ebx +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-9Ch] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-0A0h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
mov eax esi +
call sub_1002119  +
retn 10h  +
***
call sub_100208C  +
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
fld  qword ptr [ebp+0Ch] +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_C] +
push dword ptr [ebp+14h]  +
xor esi esi +
lea eax [ebp-10h] +
push offset a_F  +
inc esi  +
push eax  +
mov [ebp-4] esi +
call ?Format@CString@@QAAXPBGZZ  +
mov ecx [ebp+8] +
add esp 14h +
lea eax [ebp-10h] +
push eax  +
call ??0CString@@QAE@ABV0@@Z  +
lea ecx [ebp-10h] +
mov [ebp-14h] esi +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1002061  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax off_108A1D4 +
push esi  +
push edi  +
mov edi eax +
mov esi ecx +
test edi edi +
jz loc_1012381  +
cmp dword ptr [eax+40h] 25Bh +
jz loc_1040DB6  +
push 0  +
call sub_1009F8B  +
mov ecx [esi+0ECh] +
test ecx ecx +
jz loc_10371B7  +
xor edi edi +
inc edi  +
push edi  +
call sub_10123BE  +
test eax eax +
jz loc_10123B5  +
mov eax [esi+0ECh] +
cmp dword ptr [eax+2Ch] 0 +
jnz loc_102F0AA  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_10123F7  +
cmp [ebp+arg_0] edi +
jz loc_102F01A  +
cmp [esi+30h] edi +
jz loc_102EFF0  +
cmp [eax+8] edi +
jnz loc_102EFF0  +
cmp [esi+2Ch] edi +
jnz loc_102EFF0  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+30h] +
test eax eax +
jz loc_1012420  +
push eax  +
call ds:GlobalFree  +
and dword ptr [esi+30h] 0 +
and dword ptr [esi+38h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101235F  +
test eax eax +
jz loc_103C61E  +
push [ebp+arg_0]  +
mov ecx esi +
call ?OnSaveDocument@COleServerDoc@@UAEHPBG@Z  +
test eax eax +
jz loc_103C61E  +
lea eax [esi+0ECh] +
mov ecx [eax] +
xor edx edx +
cmp [ecx+28h] edx +
jnz loc_103C60D  +
mov ecx [eax] +
push edx  +
call sub_100409B  +
push [ebp+arg_0]  +
mov ecx offset unk_108B32C +
call ??4CString@@QAEABV0@PBG@Z  +
mov ecx dword_108A1EC +
call sub_1011BA0  +
mov ecx esi +
call sub_1012561  +
or dword_108B03C eax +
xor eax eax +
inc eax  +
mov byte_108B038 al +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002370  +
mov esi ecx +
xor edi edi +
push edi  +
call sub_100AF58  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push edi  +
push offset off_108C824  +
push offset off_108C80C  +
push edi  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
mov ecx eax +
call sub_102E919  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0CCh]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+60h]  +
test eax eax +
jnz loc_1040A35  +
inc eax  +
call sub_1002061  +
retn   +
***
jmp loc_1012511  +
jmp ds:?OnClose@CFrameWnd@@IAEXXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101235F  +
test eax eax +
jz loc_101254D  +
push [ebp+arg_0]  +
mov ecx esi +
call ?CanCloseFrame@COleServerDoc@@UAEHPAVCFrameWnd@@@Z  +
test eax eax +
jz loc_101254D  +
mov ecx offset unk_108B4B8 +
call sub_1011CCE  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1012548  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ecx+0ECh] +
mov edx [ecx+10h] +
push ebx  +
xor eax eax +
sub edx eax +
push esi  +
push edi  +
jz loc_102D187  +
dec edx  +
jz loc_102D180  +
dec edx  +
jz loc_102D179  +
dec edx  +
jz loc_103CFE2  +
dec edx  +
jnz loc_10125F6  +
push 4  +
pop edx  +
lea esi [ecx+14h] +
cmp [ecx+10h] edx +
jnz loc_10409D8  +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov ecx edx +
mov edi offset dword_1011F88 +
lea esi [ebp+var_14] +
xor ebx ebx +
cmps   +
jz loc_102D172  +
mov ecx edx +
mov edi offset dword_1011FA8 +
lea esi [ebp+var_14] +
xor ebx ebx +
cmps   +
jz loc_1012F2A  +
mov ecx edx +
mov edi offset loc_1011FB8 +
lea esi [ebp+var_14] +
xor ebx ebx +
cmps   +
jnz loc_103C5CB  +
push 40h  +
pop eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn   +
***
push 8  +
lea eax [ebp-28h] +
jmp loc_103C629  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_106357E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
jmp loc_10126F5  +
push 10h  +
lea eax [ebp-30h] +
jmp loc_103C629  +
push 8  +
lea eax [ebp-28h] +
jmp loc_103C629  +
***
call sub_100208C  +
mov esi ecx +
and dword ptr [esi+20h] 0 +
cmp dword ptr [esi+8] 0 +
jle loc_10126FD  +
push 4  +
pop ebx  +
push 1  +
lea eax [ebp-0Dh] +
push eax  +
mov ecx esi +
call sub_1009B54  +
push ebx  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call sub_1009B54  +
push ebx  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
call sub_1009B54  +
movzx eax byte ptr [ebp-0Dh] +
add eax 0FFFFFFFEh +
cmp eax 8 +
ja loc_10126D2  +
jmp ds:off_1012656[eax*4]  +
push ebx  +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
call sub_1009B54  +
push dword ptr [ebp-18h]  +
mov ecx [ebp-1Ch] +
mov edi [esi+20h] +
push esi  +
call sub_1012708  +
mov eax [ebp-20h] +
add edi eax +
mov [esi+20h] edi +
mov eax [esi+20h] +
cmp eax [esi+8] +
jl loc_101269A  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
cmp [ebp+arg_4] 3E8h +
jnz locret_1012744  +
mov ecx [ebp+arg_0] +
push 10h  +
lea eax [ebp+var_10] +
push eax  +
call sub_1009B54  +
mov ecx [ebp+arg_0] +
push 4  +
lea eax [ebp+arg_4] +
push eax  +
call sub_1009B54  +
cmp [ebp+arg_4] 0 +
jz locret_1012744  +
push [ebp+arg_4]  +
call ds:DeleteObject  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1012773  +
test byte ptr [ebp+8] 1 +
jz loc_1012767  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1009A70 +
mov dword ptr [ebp-4] 1 +
call sub_101267F  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CByteArray@@UAE@XZ  +
call sub_1002061  +
retn   +
***
add [eax-6F6F6F70h] dl +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
call sub_102E8A8  +
mov esi [ebp+24h] +
xor edi edi +
mov [esi] edi +
mov ebx [ebp+18h] +
mov eax [ebx] +
cmp eax edi +
jnz loc_104351A  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+20h]  +
call ds:FreePropVariantArray  +
mov [ebp-1Ch] edi +
cmp dword_108B34C edi +
jnz loc_1012DAC  +
mov [ebp-4] edi +
push esi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1015B11  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_1012DDB  +
push 4  +
pop ecx  +
mov edi offset dword_1011F88 +
mov esi [ebp+0Ch] +
xor eax eax +
cmps   +
jz sub_102D000  +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_1012DDB  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+8]  +
call sub_101508C  +
mov eax [ebp-1Ch] +
call sub_102E894  +
retn 20h  +
***
push 26200Ah  +
call sub_100CFE8  +
push eax  +
lea ecx [ebp-3Ch] +
call sub_100CFB1  +
push eax  +
lea ecx [ebp-58h] +
call sub_100B2C5  +
lea eax [ebp-58h] +
push eax  +
lea ecx [ebp-44h] +
call sub_100B8C4  +
or dword ptr [ebp-2Ch] 0FFFFFFFFh +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-74h] +
call sub_100B7C0  +
lea ecx [ebp-3Ch] +
call sub_100CFE8  +
lea ecx [ebp-3Ch] +
mov edi eax +
call sub_100CFB1  +
push edi  +
push eax  +
push esi  +
mov [ebp-60h] eax +
push esi  +
lea eax [ebp-74h] +
push eax  +
lea ecx [ebp-44h] +
mov [ebp-68h] esi +
mov [ebp-64h] esi +
mov [ebp-5Ch] edi +
call sub_100B903  +
push esi  +
push esi  +
push esi  +
push 2  +
lea ecx [ebp-58h] +
call sub_100CFE8  +
push eax  +
lea ecx [ebp-58h] +
call sub_100CFB1  +
push eax  +
push esi  +
push esi  +
lea eax [ebp-68h] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
lea ecx [ebp-44h] +
call sub_100D01F  +
push dword ptr [ebp-70h]  +
call GdipDeleteBrush  +
push dword ptr [ebp-44h]  +
call GdipDeleteGraphics  +
push esi  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-24h]  +
lea ecx [ebp-58h] +
call sub_1015C5A  +
push dword ptr [ebp-54h]  +
mov ebx eax +
neg ebx  +
sbb bl bl +
inc bl  +
call GdipDisposeImage  +
jmp loc_1015C1E  +
***
mov ecx [edi+48h] +
call sub_1007636  +
test eax eax +
jnz loc_1007775  +
xor eax eax +
jmp loc_1007785  +
***
cmp eax edi +
jz loc_102BFE3  +
mov ecx 1388h +
cmp [ebp-220h] ecx +
jg loc_102BFE3  +
cmp eax ecx +
jle loc_102BFEB  +
jmp loc_102BFE3  +
***
mov ecx ebx +
mov edi offset loc_1011FB8 +
lea esi [ebp+var_14] +
xor edx edx +
cmps   +
jnz loc_1040993  +
push 8  +
jmp loc_102CC66  +
***
mov eax 100h +
jmp loc_100B020  +
***
push 20h  +
jmp loc_10125F5  +
***
mov [ebp-2Ch] ebx +
mov edi [ebp-48h] +
mov eax [edi] +
lea ecx [ebp-2Ch] +
push ecx  +
push edi  +
mov byte ptr [ebp-4] 3 +
call dword ptr [eax+24h]  +
test eax eax +
jl loc_104379A  +
mov eax [ebp-28h] +
push dword ptr [ebp-2Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jl loc_10437AF  +
mov eax [ebp-24h] +
push dword ptr [ebp-2Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jl loc_10437C6  +
mov eax [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_102FC5C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_102FC5C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_1012FC0  +
cmp dword ptr [esi+18h] 8 +
jb loc_1012FC0  +
cmp [ebp+arg_4] 0 +
lea eax [esi+4] +
push edi  +
mov edi [eax] +
ja loc_1041BAE  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
push [ebp+arg_4]  +
mov ecx esi +
mov dword ptr [esi+18h] 7 +
call sub_1012FDB  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 8 +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
jnb loc_10141B0  +
add ecx 4 +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 0FFFFFFE4h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
add ecx 0FFFFFFE0h +
call ?InternalRelease@CCmdTarget@@QAEKXZ  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_10133F2  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
push esi  +
push edi  +
mov edi [ebp+8] +
and dword ptr [ebp+8] 0 +
sub eax 0 +
mov esi 80004001h +
jz loc_101A5BF  +
dec eax  +
jz loc_1020EDA  +
dec eax  +
jnz loc_10130C7  +
and [ebp+18h] eax +
mov eax [ebp+14h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push offset dword_10130D0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_10130BA  +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp+18h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
test esi esi +
jl loc_10130BA  +
mov ecx [edi+14h] +
push dword ptr [ebp+18h]  +
mov eax [ecx] +
call dword ptr [eax]  +
mov eax [ebp+8] +
test eax eax +
jz loc_10130C7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jnb loc_101310C  +
sub eax 1000h +
test [eax] eax +
jmp loc_10130FF  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
***
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_101315E  +
mov [esi] eax +
jmp loc_1013156  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+39h] dl +
jnz loc_103FBA2  +
mov ecx [eax+8] +
cmp [ecx+39h] dl +
jz loc_1013162  +
mov eax [eax+4] +
cmp [eax+39h] dl +
jz loc_101312C  +
mov [esi] eax +
pop esi  +
retn   +
push ecx  +
call sub_101316F  +
jmp loc_101315E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
cmp byte ptr [ecx+39h] 0 +
jz loc_1013183  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_1013177  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10131B2  +
test byte ptr [ebp+8] 1 +
jz loc_10131A6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_10055E4 +
mov ecx [esi+24h] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
mov [ebp-10h] eax +
cmp eax ecx +
jz loc_10131F3  +
add eax 28h +
push eax  +
call ds:PropVariantClear  +
lea ecx [ebp-10h] +
call sub_101313C  +
mov ecx [esi+24h] +
mov eax [ebp-10h] +
jmp loc_10131D5  +
lea ecx [esi+20h] +
call sub_101321C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CCmdTarget@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1013250  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_101327E  +
cmp [ebp+arg_8] eax +
jnz loc_101327E  +
mov ecx esi +
call sub_101328D  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_1013274  +
jmp loc_1040936  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_10132BA  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+39h] 0 +
mov ebx ecx +
mov esi edi +
jnz loc_10132EA  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_10132BA  +
mov esi [esi] +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+39h] 0 +
pop ecx  +
mov edi esi +
jz loc_10132CF  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov eax dword_108A20C +
push esi  +
xor esi esi +
cmp eax esi +
jz loc_1013322  +
push eax  +
call ds:DeleteDC  +
mov dword_108A20C esi +
mov eax dword_108A208 +
cmp eax esi +
jz loc_1013338  +
push eax  +
call ds:DeleteObject  +
mov dword_108A208 esi +
mov dword_108A1FC esi +
mov dword_108A204 esi +
mov dword_108A200 esi +
pop esi  +
retn   +
***
mov eax dword_108A228 +
push ebx  +
xor ebx ebx +
cmp eax ebx +
jnz loc_1021730  +
mov dword_108A228 ebx +
mov dword_108A1F8 ebx +
mov dword_108A1F4 ebx +
mov byte_108A1C3 bl +
mov byte_108A1C0 bl +
pop ebx  +
retn   +
***
mov eax offset loc_107AFA8 +
call sub_1002370  +
mov esi ecx +
xor ebx ebx +
cmp [esi+3F4h] bl +
jnz loc_1041A5E  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call sub_10133D9  +
lea edi [esi+10h] +
mov ecx edi +
call sub_10133D9  +
mov ecx edi +
call sub_100CAB5  +
pop edi  +
mov ecx esi +
pop esi  +
jmp sub_100CAB5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_1013036  +
leave   +
retn   +
***
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_1013417  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
jmp loc_101304B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1013449  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_8] +
jnz loc_1047E2F  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_1013487  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_10134BF  +
push edi  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_1021366  +
mov edi [eax] +
add esp 10h +
push esi  +
push dword ptr [esi+8]  +
push edi  +
call sub_101EFF6  +
mov ecx [ebp+arg_4] +
mov [esi+8] edi +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp-10h] +
mov esi ecx +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetWindowRect  +
mov eax [ebp-10h] +
mov [esi+0C4h] eax +
mov eax [ebp-0Ch] +
mov ecx esi +
mov [esi+0C8h] eax +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+0D4h] +
mov eax [ebp+8] +
mov [eax+18h] edx +
mov edx [ecx+0D8h] +
mov [eax+1Ch] edx +
call ?Default@CWnd@@IAEJXZ  +
pop ebp  +
retn 4  +
***
call sub_1013554  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
xor ebx ebx +
cmp [esi+48h] ebx +
jnz loc_10179D6  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:CreatePen  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_10020DC  +
push offset dword_108B3C0  +
push (offset aQ@gglDgf+10h)  +
push offset loc_1056347  +
xor edi edi +
push offset dword_1013A40  +
mov ebx ecx +
mov [ebp-29Ch] edi +
call sub_1023315  +
mov esi 20000000h +
cmp dword_108BC04 edi +
jnz loc_10422E6  +
push edi  +
push edi  +
push 1  +
push edi  +
call ds:HeapSetInformation  +
mov ecx ebx +
call sub_10231D1  +
push offset aMicrosoftWin_0  +
mov ecx ebx +
call ?SetRegistryKey@CWinApp@@IAEXPBG@Z  +
mov eax [ebx+94h] +
cmp eax edi +
jz loc_1013649  +
push eax  +
call ds:free  +
pop ecx  +
push offset aPaint  +
call ds:_wcsdup  +
mov [ebx+94h] eax +
mov dword ptr [esp+0] offset aMsftedit_dll +
call ds:LoadLibraryW  +
mov [ebx+1B8h] eax +
cmp eax edi +
jz loc_10423A0  +
call sub_102A5F1  +
push edi  +
call ds:GetDC  +
mov esi eax +
push esi  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
push eax  +
mov ecx ebx +
call sub_1023341  +
push esi  +
push edi  +
call ds:ReleaseDC  +
push 8C0h  +
lea ecx [ebx+440h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push 8C1h  +
lea ecx [ebx+444h] +
call ?LoadStringW@CString@@QAEHI@Z  +
call ?AfxOleInit@@YGHXZ  +
test eax eax +
jz loc_104240A  +
call ?AfxGetThread@@YGPAVCWinThread@@XZ  +
mov eax [eax+5Ch] +
cmp eax edi +
jz loc_10136D8  +
mov [eax+2Ch] edi +
mov [eax+28h] edi +
mov ecx ebx +
call sub_102187D  +
mov ecx ebx +
call sub_102BF54  +
call sub_102BDC1  +
mov ecx ebx +
call sub_101452D  +
test eax eax +
jl loc_1037213  +
cmp dword_108A1F0 edi +
jnz loc_1013734  +
push 14h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-2A0h] eax +
mov [ebp-4] edi +
cmp eax edi +
jz loc_103721A  +
mov ecx eax +
call sub_101B931  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword_108A1F0 eax +
cmp [eax+0Ch] edi +
jz loc_1042419  +
push 6Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-2A0h] eax +
mov dword ptr [ebp-4] 1 +
cmp eax edi +
jz loc_1037221  +
push offset off_1009BE0  +
push offset off_1006FF0  +
push offset off_101CC38  +
push 2  +
mov ecx eax +
call ??0CSingleDocTemplate@@QAE@IPAUCRuntimeClass@@00@Z  +
mov [ebp-2A4h] eax +
mov ecx [ebp-2A4h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push edi  +
push edi  +
push edi  +
push 5  +
pop esi  +
push esi  +
call ?SetServerInfo@CDocTemplate@@QAEXIIPAUCRuntimeClass@@0@Z  +
push dword ptr [ebp-2A4h]  +
mov ecx ebx +
call ?AddDocTemplate@CWinApp@@QAEXPAVCDocTemplate@@@Z  +
push 1  +
push dword ptr [ebp-2A4h]  +
lea ecx [ebx+1BCh] +
push offset dword_1013AA8  +
call ?ConnectTemplate@COleTemplateServer@@QAEXABU_GUID@@PAVCDocTemplate@@H@Z  +
mov ecx ebx +
call ?RunEmbedded@CWinApp@@QAEHXZ  +
mov [ebx+230h] eax +
cmp eax edi +
jnz loc_1037253  +
mov ecx ebx +
call ?RunAutomated@CWinApp@@QAEHXZ  +
test eax eax +
jnz loc_1037253  +
push 34h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-2A0h] eax +
mov dword ptr [ebp-4] 2 +
cmp eax edi +
jz loc_103722C  +
push offset aRestart  +
lea ecx [ebp-2Ch] +
call sub_10142C5  +
mov ecx [ebp-2A0h] +
xor eax eax +
inc eax  +
push eax  +
mov [ebp-29Ch] eax +
lea eax [ebp-2Ch] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_101DE0D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test byte ptr [ebp-29Ch] 1 +
mov [ebx+1A8h] eax +
jz loc_101383A  +
and dword ptr [ebp-29Ch] 0FFFFFFFEh +
push edi  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
push 38h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-2A0h] eax +
mov [ebp-4] esi +
cmp eax edi +
jz loc_1037233  +
push offset aPaint  +
lea ecx [ebp-2Ch] +
call sub_10142C5  +
mov ecx [ebp-2A0h] +
or dword ptr [ebp-29Ch] 2 +
push 12Ch  +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebx+1A8h]  +
mov byte ptr [ebp-4] 6 +
call sub_101C953  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test byte ptr [ebp-29Ch] 2 +
mov [ebx+1ACh] eax +
jz loc_10138A4  +
push edi  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
mov ecx [ebx+1ACh] +
call sub_101BDC7  +
mov ecx [ebx+1ACh] +
lea eax [ebp-48h] +
push eax  +
call sub_101DD0D  +
mov ecx [ebx+1A8h] +
push edi  +
lea eax [ebp-48h] +
push eax  +
mov dword ptr [ebp-4] 8 +
call sub_101CA40  +
mov ecx [ebx+1A8h] +
call sub_101BE85  +
push 30h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-2A0h] eax +
mov byte ptr [ebp-4] 9 +
cmp eax edi +
jz loc_103723A  +
mov ecx eax +
call sub_101BBD0  +
mov ecx [ebx+1ACh] +
push eax  +
mov byte ptr [ebp-4] 8 +
mov [ebx+1B0h] eax +
call sub_101BDAD  +
push dword ptr [ebx+74h]  +
lea ecx [ebp-2Ch] +
call sub_10142C5  +
mov ecx [ebx+1A8h] +
lea eax [ebp-2Ch] +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call sub_101DE74  +
push edi  +
push 1  +
lea ecx [ebp-2Ch] +
mov esi eax +
mov byte ptr [ebp-4] 8 +
call sub_1012F94  +
cmp esi edi +
jnz loc_104242D  +
mov ecx ebx +
call sub_101B9A7  +
cmp [ebx+260h] edi +
jnz loc_104243D  +
lea esi [ebx+250h] +
mov eax [esi] +
cmp dword ptr [eax-8] 0 +
jz loc_1037207  +
mov edi ds:FindFirstFileW +
lea ecx [ebp-298h] +
push ecx  +
push eax  +
call edi  +
mov [ebp-2A0h] eax +
cmp eax 0FFFFFFFFh +
jz loc_104248A  +
push dword ptr [ebp-2A0h]  +
call ds:FindClose  +
push 5Ch  +
mov ecx esi +
call ?ReverseFind@CString@@QBEHG@Z  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_1042500  +
inc edi  +
push edi  +
mov ecx esi +
call ?GetBuffer@CString@@QAEPAGH@Z  +
push edi  +
mov ecx esi +
call ?ReleaseBuffer@CString@@QAEXH@Z  +
lea eax [ebp-26Ch] +
push eax  +
mov ecx esi +
call ??YCString@@QAEABV0@PBG@Z  +
push dword ptr [esi]  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+84h]  +
mov ecx [ebx+20h] +
xor esi esi +
cmp ecx esi +
jz loc_1013A0C  +
push 1  +
call ?DragAcceptFiles@CWnd@@QAEXH@Z  +
mov ecx [ebx+20h] +
push 260h  +
add ecx 51Ch +
call sub_1009E8E  +
cmp [ebx+260h] esi +
jnz loc_1042510  +
cmp [ebx+218h] si +
jnz loc_1042540  +
call sub_1016A73  +
cmp dword_108BC04 esi +
jnz loc_1042554  +
push esi  +
push 1  +
lea ecx [ebp-48h] +
call sub_1012F94  +
xor eax eax +
inc eax  +
call sub_1002119  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
test eax eax +
jz loc_1013AF7  +
mov eax [eax+4] +
push eax  +
call ds:CreatePatternBrush  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:CreateFontIndirectW  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_1013F04  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
lea ecx [esi+10h] +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_102DABC +
call sub_102E9B9  +
push 0Ah  +
lea ecx [esi+688h] +
call ??0CObList@@QAE@H@Z  +
push 640h  +
lea eax [esi+48h] +
push edi  +
push eax  +
mov [esi+2Ch] edi +
mov [esi+28h] edi +
mov [esi+30h] edi +
mov [esi+38h] edi +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] edi +
mov [esi+24h] edi +
mov [esi+34h] edi +
mov [esi+3Ch] edi +
mov [esi+40h] edi +
mov [esi+44h] edi +
call memset  +
add esp 0Ch +
mov eax esi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_10417BA  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 4 +
jb loc_10417C1  +
mov eax ecx +
shl eax 2 +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
mov eax [eax] +
push esi  +
push edi  +
mov esi ecx +
mov [ebp+var_4] eax +
call sub_1013D61  +
mov edi [ebp+arg_4] +
mov [ebp+arg_8] eax +
test edi edi +
jz loc_1013CE3  +
mov ecx esi +
call sub_100B9A1  +
mov ecx 3FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_103F9BA  +
add eax edi +
push ebx  +
cmp [ebp+arg_8] eax +
jnb loc_103F9C8  +
mov edx [ebp+arg_8] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp+arg_8] +
jb loc_103F9BF  +
add [ebp+arg_8] edx +
cmp [ebp+arg_8] eax +
jnb loc_1013C85  +
mov [ebp+arg_8] eax +
push 0  +
push [ebp+arg_8]  +
call sub_1013BE9  +
push esi  +
mov ebx eax +
mov eax [esi+4] +
push ebx  +
push [ebp+arg_0]  +
push eax  +
call sub_1013CEE  +
lea ecx [ebp+var_4] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_1013DF9  +
push esi  +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_1013CEE  +
mov ecx esi +
call sub_100B9A1  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_1013CD0  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+arg_8] +
lea eax [ebx+eax*4] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*4] +
mov [esi+8] eax +
mov [esi+4] ebx +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1013D1C  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
sar eax 2 +
mov ecx eax +
shl ecx 2 +
push esi  +
lea esi [ecx+edx] +
test eax eax +
ja loc_1013D41  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push edx  +
call memmove_s  +
add esp 10h +
jmp loc_1013D3A  +
***
mov edx [ecx+4] +
test edx edx +
jz loc_1013D71  +
mov eax [ecx+0Ch] +
sub eax edx +
sar eax 2 +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_100B9A1  +
mov ecx esi +
mov edi eax +
call sub_1013D61  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jb loc_1018148  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1013DB5  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_100B9A1  +
test eax eax +
jz loc_1013DF0  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 2 +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_1013C21  +
mov eax [edi+4] +
lea ecx [eax+esi*4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
xor esi esi +
jmp loc_1013DD0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_1013E1F  +
lea eax [edi+esi*4] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1013E3E  +
add esp 0Ch +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1013E67  +
add esp 10h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_1013E88  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
dec [ebp+arg_4]  +
mov [eax] ecx +
add eax 4 +
cmp [ebp+arg_4] 0 +
ja loc_1013E75  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1013EB9  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call sub_102E8A8  +
mov eax dword_108A2C4 +
mov [ebp-1Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1045C1F  +
push dword ptr [ebp+8]  +
call ds:_onexit  +
pop ecx  +
call sub_102E894  +
retn   +
***
cmp edi 3FFFFFFFh +
ja loc_10420C5  +
push eax  +
push edi  +
call sub_1013BE9  +
mov [esi+4] eax +
mov [esi+8] eax +
lea eax [eax+edi*4] +
mov [esi+0Ch] eax +
mov al 1 +
jmp loc_1013B54  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1013F5D  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_1013F7F  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
call sub_100BC69  +
add [ebp+arg_8] 4 +
add [ebp+arg_0] 4 +
jmp loc_1013F62  +
mov eax [ebp+arg_8] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
xor eax eax +
lea edx [ecx-3] +
inc eax  +
cmp edx eax +
ja loc_1017D08  +
mov edx offset unk_108C4F8 +
shl eax cl +
cmp dword_108B1A8 0 +
push esi  +
push edi  +
jnz loc_1013FC4  +
mov ecx [ebx+0Ch] +
cmp eax ecx +
jz loc_103E338  +
xor ecx ecx +
mov [ebx+0Ch] eax +
test eax eax +
jle loc_1013FF6  +
movzx eax byte ptr [edx+ecx*4+2] +
movzx esi byte ptr [edx+ecx*4+1] +
or eax 200h +
shl eax 8 +
or eax esi +
movzx esi byte ptr [edx+ecx*4] +
shl eax 8 +
or eax esi +
mov esi [ebx+4] +
mov [esi+ecx*4] eax +
inc ecx  +
cmp ecx [ebx+0Ch] +
jl loc_1013FCD  +
cmp [ebp+arg_0] 2 +
mov edi [ebx+8] +
push 1Ch  +
pop ecx  +
mov esi offset unk_108DA60 +
movs   +
pop edi  +
pop esi  +
jle loc_103E34F  +
cmp [ebp+arg_4] 0 +
jz loc_1014032  +
push 0  +
call sub_101B8F9  +
xor eax eax +
cmp dword ptr [ebx+0Ch] 10h +
setnz al  +
dec eax  +
and eax 0FFFFFFFAh +
add eax 0Eh +
push eax  +
call sub_101B915  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1040F51  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_101405B  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jnz loc_101E199  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+15h] 0 +
jnz loc_1014090  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jz loc_10140B5  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_10143EC  +
mov [ecx] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
mov [ecx+4] eax +
jmp loc_10140AC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+15h] 0 +
jz loc_1014104  +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jz loc_10411FB  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_1021747  +
mov [ecx+8] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
mov [esi+4] edx +
jmp loc_10140D8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jnz loc_10145D5  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 0FFFFFF3Ch +
call ?GetAppRegistryKey@CWinApp@@QAEPAUHKEY__@@XZ  +
mov ecx [ebp+8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+18h] +
lea eax [ecx+4] +
cmp esi 8 +
jnb loc_101E1FC  +
mov edx eax +
cmp [ebp+arg_0] edx +
jnb loc_1014AF8  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx [ecx+4] +
jmp loc_1012FF3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 7FFFFFFEh +
ja loc_1041C65  +
cmp [esi+18h] edi +
jb loc_10141FA  +
cmp [ebp+arg_4] 0 +
jnz loc_1041C6F  +
test edi edi +
jz loc_101BAB3  +
xor eax eax +
cmp eax edi +
sbb eax eax +
pop edi  +
neg eax  +
pop esi  +
pop ebp  +
retn 8  +
push dword ptr [esi+14h]  +
mov ecx esi +
push edi  +
call sub_101420C  +
jmp loc_10141EC  +
***
call sub_1002370  +
mov edi ecx +
mov [ebp-18h] edi +
mov esi [ebp+8] +
or esi 7 +
cmp esi 7FFFFFFEh +
ja loc_1041C1B  +
xor edx edx +
push 3  +
mov eax esi +
pop ebx  +
div  ebx +
mov ecx [edi+18h] +
mov [ebp-14h] ecx +
shr dword ptr [ebp-14h] 1 +
mov edx [ebp-14h] +
cmp eax edx +
jb loc_10148A8  +
and dword ptr [ebp-4] 0 +
push 0  +
lea eax [esi+1] +
push eax  +
call sub_101428F  +
mov ebx eax +
cmp dword ptr [ebp+0Ch] 0 +
ja loc_1014B15  +
push 0  +
push 1  +
mov ecx edi +
call sub_1012F94  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
mov [edi+4] ebx +
mov [edi+18h] esi +
call sub_1012FDB  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1041220  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 2 +
jb loc_1041227  +
lea eax [ecx+ecx] +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_1012FDB  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10142F1  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_10142FD  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_0]  +
call sub_101431E  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1014189  +
test al al +
jnz loc_1041E38  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_10141BD  +
test al al +
jz loc_101436C  +
mov ecx [esi+18h] +
cmp ecx 8 +
jb loc_101450B  +
mov eax [esi+4] +
push [ebp+arg_4]  +
push edi  +
push ecx  +
push eax  +
call sub_1014379  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1012FDB  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101439B  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10143BD  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov [ecx+8] eax +
jmp loc_10140AC  +
***
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_100C4F3  +
mov [eax] ebx +
jmp loc_100C4F3  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_10140BF  +
jmp loc_100C521  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+15h] dl +
jnz loc_1041119  +
mov ecx [eax] +
cmp [ecx+15h] dl +
jz loc_1022975  +
mov eax [eax+4] +
cmp [eax+15h] dl +
jnz loc_1014447  +
mov ecx [esi] +
cmp ecx [eax] +
jz loc_1014452  +
mov ecx [esi] +
cmp [ecx+15h] dl +
jnz loc_1014450  +
mov [esi] eax +
pop esi  +
retn   +
mov [esi] eax +
jmp loc_1014439  +
***
mov edx [edx+8] +
cmp byte ptr [edx+14h] 0 +
jz loc_1014491  +
cmp esi [ecx+8] +
jnz loc_101446E  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1014074  +
mov eax [esi+4] +
mov byte ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_10140BF  +
jmp loc_100C53F  +
mov byte ptr [ecx+14h] 1 +
mov byte ptr [edx+14h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+14h] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_100C53F  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10144DD  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+15h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_100C45E  +
cmp eax ebx +
jz loc_10144F0  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_10144F9  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_1014502  +
mov [ecx] ebx +
mov [eax+15h] bl +
mov byte ptr [eax+14h] 1 +
pop ebx  +
retn   +
***
lea eax [esi+4] +
jmp loc_1014357  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpCriticalSection]  +
call ds:InitializeCriticalSection  +
pop ebp  +
retn   +
***
add ecx 0C8h +
push ecx  +
push offset stru_1006AB4  +
push 1  +
push 0  +
push offset stru_101454C  +
call ds:CoCreateInstance  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0Dh  +
mov esi ecx +
pop eax  +
mov [esi] ax +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
test eax eax +
jz loc_10145B3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax 0FFFh +
cmp [ecx] ax +
jz loc_104880B  +
push ecx  +
call ds:VariantClear  +
retn   +
***
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
jmp loc_1014157  +
***
call sub_10020DC  +
mov eax [ebp+18h] +
lea esi [ebp+8] +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
xor ebx ebx +
movs   +
mov [ebp-28h] eax +
mov [ebp-24h] ebx +
lea eax [ebp-24h] +
push eax  +
push offset riid  +
push 1  +
push ebx  +
lea eax [ebp-20h] +
push eax  +
mov [ebp-4] ebx +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi ebx +
jl loc_10146C2  +
mov eax [ebp-24h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+0FCh]  +
mov esi eax +
cmp esi ebx +
jl loc_10146C2  +
mov eax [ebp-24h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+118h]  +
mov esi eax +
cmp esi ebx +
jl loc_10146C2  +
mov eax [ebp-24h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+110h]  +
mov esi eax +
cmp esi ebx +
jl loc_10146C2  +
mov eax [ebp-24h] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+120h]  +
mov esi eax +
cmp esi ebx +
jl loc_10146C2  +
push 0Bh  +
pop eax  +
mov [ebp-38h] ax +
sub esp 10h +
mov edi esp +
or eax 0FFFFFFFFh +
mov [ebp-30h] ax +
lea esi [ebp-38h] +
movs   +
movs   +
movs   +
push offset aProhibitdtd  +
push dword ptr [ebp-24h]  +
movs   +
call sub_10146FD  +
mov esi eax +
cmp esi ebx +
jl loc_10146C2  +
mov eax [ebp-24h] +
mov ecx [ebp-28h] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_10146D3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_1002119  +
retn 14h  +
***
call sub_100208C  +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
xor esi esi +
call sub_1014782  +
mov [ebp-4] esi +
cmp [ebp+8] esi +
jz loc_101475B  +
push dword ptr [ebp+0Ch]  +
call ds:SysAllocString  +
mov ebx eax +
cmp ebx esi +
jz loc_1014776  +
mov eax [ebp+8] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+10h] +
movs   +
movs   +
movs   +
push ebx  +
push eax  +
movs   +
call dword ptr [ecx+140h]  +
mov esi eax +
cmp esi 80004005h +
jz loc_104882F  +
push ebx  +
call ds:SysFreeString  +
mov eax [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_101476C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_1002061  +
retn 18h  +
mov esi 8007000Eh +
jmp loc_101475B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_101479F  +
mov ecx [eax] +
push esi  +
push offset loc_10147A8  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
xchg eax ebp +
mov edi 7B362933h +
rcl byte ptr [ecx] cl +
mov dl 0Eh +
add al al +
dec edi  +
cwde   +
pusha   +
***
test byte ptr [ebp-40h] 1 +
jnz loc_1045B54  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push offset __ImageBase  +
call sub_1027410  +
mov dword_108A2A4 eax +
cmp dword_108A298 ebx +
jnz loc_1045B9D  +
push eax  +
call ds:exit  +
***
mov [ecx] eax +
jmp loc_1014828  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+1Dh] 0 +
jnz loc_101480F  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jz loc_1014831  +
mov ecx [edx+4] +
cmp edx [ecx] +
jz loc_10147EA  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
mov [ecx+4] eax +
jmp loc_1014828  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?OnDestroy@CFrameWnd@@IAEXXZ  +
push offset dword_108B220  +
mov ecx esi +
mov dword_108B220 2Ch +
call ?GetWindowPlacement@CWnd@@QBEHPAUtagWINDOWPLACEMENT@@@Z  +
mov ecx offset unk_108AF60 +
pop esi  +
jmp loc_101F8CB  +
***
mov eax 7FFFFFFEh +
sub eax edx +
cmp ecx eax +
ja loc_101424C  +
lea esi [ecx+edx] +
jmp loc_101424C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10148E3  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jz loc_10148FC  +
push esi  +
call sub_1014906  +
add esi 1Ch +
jmp loc_10148EC  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_101491E  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 1  +
mov esi ecx +
call sub_1012F94  +
test [ebp+arg_0] 1 +
jnz loc_1049718  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push [ebp+samDesired]  +
xor esi esi +
push esi  +
push offset SubKey  +
push 80000001h  +
mov ebx ecx +
mov [ebp+var_C] esi +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10149C7  +
push edi  +
mov edi ds:RegCreateKeyExW +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push esi  +
push [ebp+samDesired]  +
mov [ebp+phkResult] esi +
push esi  +
push esi  +
push esi  +
push dword ptr [ebx+80h]  +
push [ebp+hKey]  +
call edi  +
test eax eax +
jnz loc_10149BD  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push esi  +
push [ebp+samDesired]  +
push esi  +
push esi  +
push esi  +
push dword ptr [ebx+94h]  +
push [ebp+phkResult]  +
call edi  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop edi  +
mov eax [ebp+var_C] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push dword_108AFF4  +
push offset aMicrosoftWindo  +
push offset aSoftwareSSS  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
call sub_1005CB4  +
add esp 18h +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov [esi] eax +
jmp loc_1014A97  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+1Dh] dl +
jnz loc_1041203  +
mov ecx [eax+8] +
cmp [ecx+1Dh] dl +
jz loc_1014AAA  +
mov eax [eax+4] +
cmp [eax+1Dh] dl +
jnz loc_1014AA6  +
mov ecx [esi] +
cmp ecx [eax+8] +
jz loc_1014A74  +
mov [esi] eax +
pop esi  +
retn   +
push ecx  +
call sub_1014AB7  +
jmp loc_1014AA6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
cmp byte ptr [ecx+1Dh] 0 +
jz loc_1014ACB  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_1014ABF  +
***
cmp esi 8 +
jnb loc_10417AC  +
mov ecx [ecx+14h] +
lea eax [eax+ecx*2] +
cmp eax [ebp+arg_0] +
jbe loc_10141A9  +
jmp loc_10417B3  +
***
cmp dword ptr [edi+18h] 8 +
jb loc_101BAAB  +
mov eax [edi+4] +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [esi+1] +
push eax  +
push ebx  +
call sub_1014379  +
jmp loc_1014267  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpCriticalSection]  +
call ds:DeleteCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_1014B6E  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10148C4  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_1014D19  +
cmp dword ptr [esi+18h] 10h +
jnb loc_101B8D7  +
push [ebp+arg_4]  +
mov ecx esi +
mov dword ptr [esi+18h] 0Fh +
call sub_1014D34  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 10h +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
jnb loc_101B8CF  +
add ecx 4 +
mov byte ptr [ecx+eax] 0 +
pop ebp  +
retn 4  +
***
mov ecx [ecx] +
test ecx ecx +
jz locret_1014D6C  +
call sub_1014D72  +
test eax eax +
jnz loc_104172D  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
push 0  +
lea ecx [ebp+var_4] +
call sub_1014DE0  +
mov eax [edi+4] +
test eax eax +
jbe loc_1014D96  +
cmp eax 0FFFFFFFFh +
jnb loc_1014D96  +
dec eax  +
mov [edi+4] eax +
mov esi [edi+4] +
neg esi  +
sbb esi esi +
not esi  +
lea ecx [ebp+var_4] +
and esi edi +
call sub_1014DB4  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov eax [ecx] +
imul eax eax +
add eax offset stru_108C578 +
push eax  +
call sub_1014DCB  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and eax 3 +
push esi  +
mov esi ecx +
mov [esi] eax +
imul eax eax +
add eax offset stru_108C578 +
push eax  +
call sub_1014E0B  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpCriticalSection]  +
call ds:EnterCriticalSection  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
call sub_1014E3A  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [edi+14h] ebx +
jb loc_1041E89  +
mov eax [edi+14h] +
sub eax ebx +
cmp eax [ebp+arg_8] +
jnb loc_1014E60  +
mov [ebp+arg_8] eax +
or eax 0FFFFFFFFh +
sub eax [esi+14h] +
cmp eax [ebp+arg_8] +
jbe loc_1041E93  +
cmp [ebp+arg_8] 0 +
jbe loc_1014EC8  +
mov eax [esi+14h] +
add eax [ebp+arg_8] +
push 0  +
push eax  +
mov ecx esi +
mov [ebp+arg_0] eax +
call sub_10141BD  +
test al al +
jz loc_1014EC8  +
cmp dword ptr [edi+18h] 8 +
jb loc_101E275  +
mov edi [edi+4] +
mov eax [esi+18h] +
cmp eax 8 +
jb loc_101E27D  +
mov edx [esi+4] +
push [ebp+arg_8]  +
mov ecx [esi+14h] +
lea edi [edi+ebx*2] +
push edi  +
sub eax ecx +
push eax  +
lea eax [edx+ecx*2] +
push eax  +
call sub_1014379  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1012FDB  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
call sub_100208C  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-2Ch] +
call sub_10142C5  +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
mov ecx eax +
call sub_1014E20  +
mov ecx [ebp+8] +
push eax  +
call sub_1014F22  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
mov eax [ebp+8] +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_1012FDB  +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1014F52  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
cmp [edi+14h] eax +
jb loc_1041DF0  +
mov esi [edi+14h] +
mov eax [ebp+arg_4] +
sub esi eax +
cmp [ebp+arg_8] esi +
jb loc_1041DFA  +
mov ecx ebx +
cmp ebx edi +
jz loc_1041E02  +
push 0  +
push esi  +
call sub_10141BD  +
test al al +
jz loc_1014FC5  +
cmp dword ptr [edi+18h] 8 +
jb loc_101BAC0  +
mov edi [edi+4] +
mov ecx [ebx+18h] +
cmp ecx 8 +
jb loc_101BAC8  +
mov eax [ebx+4] +
mov edx [ebp+arg_4] +
push esi  +
lea edx [edi+edx*2] +
push edx  +
push ecx  +
push eax  +
call sub_1014379  +
push esi  +
mov ecx ebx +
call sub_1012FDB  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1014FDF  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_0]  +
push dword ptr [ecx+14h]  +
push 0  +
call sub_1015005  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jb loc_10496F8  +
mov eax [esi+14h] +
mov ebx [ebp+arg_4] +
sub eax edi +
cmp eax ebx +
jb loc_1049702  +
mov eax [ebp+arg_C] +
cmp ebx eax +
jb loc_1049709  +
cmp dword ptr [esi+18h] 8 +
jb loc_101BE46  +
mov esi [esi+4] +
push eax  +
push [ebp+arg_8]  +
lea eax [esi+edi*2] +
push eax  +
call sub_1015074  +
add esp 0Ch +
test eax eax +
jnz loc_1015068  +
cmp ebx [ebp+arg_C] +
jb loc_1049710  +
xor eax eax +
cmp ebx [ebp+arg_C] +
setnz al  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
ja loc_102CD2F  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
push 0  +
push [ebp+arg_0]  +
call sub_1015FDD  +
test eax eax +
jl loc_10150D0  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor esi esi +
cmp esi [ebp+arg_8] +
jnb loc_10150CE  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push edi  +
push ds:off_10150E8[esi*4]  +
push eax  +
call dword ptr [ecx+14h]  +
inc esi  +
add edi 10h +
cmp esi 64h +
jb loc_10150AF  +
pop edi  +
pop esi  +
mov eax [ebp+var_4] +
test eax eax +
jz locret_10150DD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
leave   +
retn 0Ch  +
***
mov bh 1Eh +
lods   +
sub eax 40D3816Dh +
sahf   +
retn   +
***
xchg eax ebx +
inc ebx  +
mov eax 752A0F9Ah +
dec ebx  +
mov ebx 78797222h +
imul esi [edi-35h] +
wait   +
leave   +
retn 719Bh  +
***
xchg eax ebp +
inc ebp  +
mov dl 10h +
mov ds:934E2041h al +
retn 6157h  +
***
cmp eax 13ACC9CEh +
retn 4942h  +
***
add eax 0AA10DABEh +
xor ch [ecx] +
dec esp  +
mov edi 0D2E2631Ah +
and [eax+7Fh] bl +
add fs:[eax] al +
add [esi-6DE64AE1h] ah +
pop ds  +
pop esp  +
dec edx  +
stos   +
dec eax  +
jge loc_10156AC  +
stos   +
setalc   +
jz loc_1015704  +
add fs:[eax] al +
adc al 0B3h +
mov al ds:0D6FB8C45h +
push esp  +
mov ecx 64E9C917h +
and al 0B9h +
retf   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push [ebp+hMem]  +
mov ebx ecx +
call ds:GlobalLock  +
mov esi eax +
test esi esi +
jz loc_103DC0B  +
mov edx [esi] +
cmp edx 28h +
jnz loc_103DBE5  +
mov eax [esi+20h] +
push edi  +
lea edi [edx+eax*4] +
test eax eax +
jnz loc_1015A92  +
movzx ecx word ptr [esi+0Eh] +
cmp cx 8 +
jbe loc_103DBF3  +
cmp edi edx +
jb loc_1015AEF  +
mov eax [esi+14h] +
test eax eax +
jnz loc_103DBFE  +
movzx ecx word ptr [esi+0Eh] +
imul ecx [esi+4] +
mov eax [esi+8] +
cdq   +
xor eax edx +
sub eax edx +
add ecx 1Fh +
and ecx 0FFFFFFE0h +
imul eax ecx +
cdq   +
and edx 7 +
add eax edx +
sar eax 3 +
lea esi [eax+edi] +
test esi esi +
jle loc_1015AEF  +
cmp esi edi +
jbe loc_1015AEF  +
cmp esi eax +
jbe loc_1015AEF  +
cmp dword ptr [ebx+30h] 0 +
jnz loc_102F30E  +
mov eax [ebp+hMem] +
mov [ebx+30h] eax +
mov [ebx+34h] edi +
mov [ebx+38h] esi +
mov [ebp+var_4] 1 +
pop edi  +
push [ebp+hMem]  +
call ds:GlobalUnlock  +
cmp [ebp+var_4] 0 +
jz loc_103DC0B  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_10020DC  +
mov eax [ebp+8] +
mov ebx [ebp+10h] +
mov edi [ebp+14h] +
mov [ebp-24h] eax +
mov eax [ebp+0Ch] +
mov [ebp-40h] eax +
mov eax [ebp+18h] +
xor esi esi +
mov [ebp-2Ch] eax +
mov [eax] esi +
lea eax [ebp-20h] +
push eax  +
push offset loc_102E904  +
mov [ebp-48h] esi +
call sub_102EA18  +
test eax eax +
jz loc_1015C4A  +
push esi  +
push dword ptr [ebp-24h]  +
lea ecx [ebp-3Ch] +
call sub_10160AA  +
mov eax [ebp-34h] +
mov [ebp-4] esi +
mov [ebp-34h] esi +
cmp eax esi +
jnz loc_1015C42  +
mov eax [ebx] +
cmp eax esi +
jnz loc_102FF00  +
push edi  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-3Ch] +
mov [edi] esi +
mov [ebp-28h] esi +
call sub_1016123  +
cmp [ebp-28h] esi +
jbe loc_1015BB5  +
push dword ptr [ebp-28h]  +
push esi  +
call ds:GlobalAlloc  +
mov [ebx] eax +
cmp eax esi +
jz loc_1043513  +
push eax  +
push dword ptr [edi]  +
lea ecx [ebp-3Ch] +
push dword ptr [ebp-28h]  +
call sub_10161DC  +
cmp [ebp-28h] esi +
jz loc_1015BCE  +
cmp [ebp-28h] esi +
jbe loc_1015C42  +
cmp [edi] esi +
jbe loc_1015C42  +
mov eax [ebp-34h] +
mov [ebp-34h] esi +
cmp eax esi +
jnz loc_1015C42  +
push dword ptr [ebp-40h]  +
lea ecx [ebp-3Ch] +
call sub_10160F3  +
mov [ebp-24h] esi +
lea eax [ebp-24h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1016156  +
test eax eax +
jnz loc_1015C31  +
lea ecx [ebp-3Ch] +
call sub_100CD8C  +
mov ecx [ebp-2Ch] +
shr eax 12h +
and eax 1 +
mov [ecx] eax +
lea ecx [ebp-3Ch] +
jnz loc_1012E04  +
push esi  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-24h]  +
call sub_1015C5A  +
mov ebx eax +
neg ebx  +
sbb bl bl +
inc bl  +
mov ecx [ebp-24h] +
test bl bl +
jz loc_102FF0E  +
call sub_10046AE  +
mov [ebp-48h] eax +
mov eax [ebp-24h] +
mov byte ptr [ebp-4] 0 +
cmp eax esi +
jz loc_1015C42  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-38h]  +
call GdipDisposeImage  +
mov eax [ebp-48h] +
call sub_1002119  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
call GdipSaveImageToStream  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
sub eax 0 +
jnz loc_1015E3B  +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
add eax 10h +
mov [eax] ecx +
mov ecx [ebp+18h] +
test ecx ecx +
jz loc_1015CB0  +
mov eax [eax] +
and dword ptr [ecx+4] 0 +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_1016068  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
test eax eax +
jz loc_1015CF5  +
and dword ptr [eax] 0 +
push ebx  +
mov ebx [ebp+10h] +
push edi  +
test ebx ebx +
jz loc_1043A82  +
push esi  +
mov esi [ebp+8] +
mov ecx [esi+10h] +
lea eax [ecx+ebx] +
cmp eax ecx +
jb loc_1015E7E  +
cmp eax ebx +
jb loc_1015E7E  +
mov ecx [esi+0Ch] +
push 0Eh  +
pop edi  +
add ecx edi +
cmp ecx eax +
jb loc_1015E66  +
mov eax [esi+10h] +
cmp eax edi +
jb loc_1015DE0  +
test ebx ebx +
jbe loc_1015D75  +
push dword ptr [esi+8]  +
call ds:GlobalLock  +
test eax eax +
jz loc_1043A90  +
mov ecx [esi+10h] +
push ebx  +
push dword ptr [ebp+0Ch]  +
lea eax [ecx+eax-0Eh] +
push eax  +
call memcpy  +
add esp 0Ch +
push dword ptr [esi+8]  +
call ds:GlobalUnlock  +
mov eax [ebp+14h] +
add [esi+10h] ebx +
test eax eax +
jz loc_1015D75  +
add [eax] ebx +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+10h] +
test ebx ebx +
jz loc_1043A66  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1012B68 +
xor eax eax +
cmps   +
jz loc_1043A70  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_1015DD0 +
xor eax eax +
cmps   +
jz loc_1043A70  +
and [ebx] eax +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
sub edi eax +
cmp ebx edi +
jb loc_1043A89  +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [eax+esi+14h] +
push eax  +
call memcpy  +
add [ebp+0Ch] edi +
add [esi+10h] edi +
add esp 0Ch +
sub ebx edi +
cmp dword ptr [ebp+14h] 0 +
jz loc_1015D37  +
mov eax [ebp+14h] +
add [eax] edi +
jmp loc_1015D37  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_1015E8D  +
pop ebp  +
retn 0Ch  +
***
dec eax  +
jnz loc_1015E4E  +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
add eax 10h +
add [eax] ecx +
jmp loc_1015CA1  +
***
dec eax  +
jnz loc_1043A52  +
mov ecx [ebp+8] +
lea eax [ecx+10h] +
mov ecx [ecx+0Ch] +
sub ecx [ebp+0Ch] +
jmp loc_1015C9F  +
***
add eax 0FFFFFFF2h +
push eax  +
mov ecx esi +
call sub_1015E8D  +
test eax eax +
jz loc_1015D2C  +
jmp loc_1015D77  +
***
mov eax 80004005h +
jmp loc_1015D77  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
test eax eax +
jz loc_1015EC0  +
push 0  +
push [ebp+dwBytes]  +
push eax  +
call ds:GlobalReAlloc  +
test eax eax +
jz loc_1043A5C  +
mov [esi+8] eax +
mov eax [ebp+dwBytes] +
mov [esi+0Ch] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
push [ebp+dwBytes]  +
push 2  +
call ds:GlobalAlloc  +
jmp loc_1015EA8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push [ebp+arg_4]  +
push eax  +
push [ebp+arg_0]  +
call ds:SHParseDisplayName  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_1015F0E  +
mov ecx [eax] +
push esi  +
push offset loc_1015F18  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
and dword ptr [esi] 0 +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1015ED2  +
mov edi eax +
test edi edi +
jl loc_1015F60  +
push esi  +
push [ebp+arg_4]  +
call sub_1015F6D  +
push [ebp+arg_4]  +
mov edi eax +
call ds:SHELL32_155  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
and dword ptr [esi] 0 +
and [ebp+arg_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
push offset dword_1015FC8  +
push [ebp+arg_0]  +
call ds:SHBindToParent  +
mov ebx eax +
test ebx ebx +
jl loc_1015FB0  +
push esi  +
push [ebp+var_4]  +
push [ebp+arg_4]  +
push 0  +
call ds:SHCreateShellItem  +
mov ebx eax +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1015FBD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
and dword ptr [esi] 0 +
and [ebp+arg_8] 0 +
push edi  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_0]  +
call sub_1015F2D  +
mov edi eax +
test edi edi +
jl loc_1016039  +
push [ebp+arg_8]  +
lea ecx [ebp+arg_0] +
call sub_1015EF1  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101604E  +
movzx edx [ebp+arg_4] +
mov ecx [eax] +
neg edx  +
push esi  +
sbb edx edx +
push offset dword_1016058  +
and edx 2 +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1016039  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1016046  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
mov edi 80004002h +
jmp loc_101602F  +
***
test esi esi +
jz loc_1015CD9  +
push 1  +
mov ecx esi +
call sub_1016083  +
jmp loc_1015CD9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1012A68 +
jz loc_101609E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push [ebp+arg_0]  +
mov dword ptr [esi] offset off_100B22C +
jnz loc_10426AC  +
call GdipCreateBitmapFromFile  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi+4]  +
call GdipGetImageRawFormat  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
call GdipGetPropertySize  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1002370  +
mov esi [ebp+8] +
test esi esi +
jz loc_1043A9A  +
lea ecx [ebp-1Ch] +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
push 24h  +
mov byte ptr [ebp-4] 1 +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10161B3  +
mov ecx eax +
call sub_10161BC  +
mov [esi] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
mov eax [esi] +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
call sub_1002061  +
retn 4  +
xor eax eax +
jmp loc_1016190  +
***
mov eax ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_1012A68 +
mov dword ptr [eax+4] 1 +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
mov esi ecx +
jz loc_10434E1  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
call GdipGetAllPropertyItems  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax [ecx+480h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push dword ptr [ebp+10h]  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ?OnSize@CFrameWnd@@IAEXIHH@Z  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetWindowRect  +
mov eax [ebp-8] +
sub eax [ebp-10h] +
mov ecx [ebp-4] +
sub ecx [ebp-0Ch] +
mov [esi+0CCh] eax +
mov [esi+0D0h] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_0] +
push [ebp+arg_4]  +
mov esi ecx +
push edi  +
call ?CalcFixedLayout@CControlBar@@UAE?AVCSize@@HH@Z  +
mov ecx [esi+7Ch] +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov [edi+4] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebx  +
xor bl bl +
call sub_10049D9  +
test eax eax +
jz loc_1016313  +
push 0FFFFFFECh  +
call sub_10049D9  +
push dword ptr [eax+20h]  +
call ds:GetWindowLongW  +
mov ebx eax +
shr ebx 16h +
and bl 1 +
mov al bl +
pop ebx  +
retn   +
***
push [ebp+arg_4]  +
lea eax [esi+10h] +
push eax  +
call sub_1010DCF  +
test al al +
jz loc_1011777  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_1010D8F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 104h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push 2  +
pop esi  +
mov ebx ecx +
mov [ebp-104h] edi +
mov [ebp-100h] esi +
mov [ebp-0FCh] edi +
mov dword ptr [ebp-0F8h] 7F7F7Fh +
mov [ebp-0F4h] esi +
mov [ebp-0F0h] edi +
mov dword ptr [ebp-0ECh] 150088h +
mov [ebp-0E8h] esi +
mov [ebp-0E4h] edi +
mov dword ptr [ebp-0E0h] 241CEDh +
mov [ebp-0DCh] esi +
mov [ebp-0D8h] edi +
mov dword ptr [ebp-0D4h] 277FFFh +
mov [ebp-0D0h] esi +
mov [ebp-0CCh] edi +
mov dword ptr [ebp-0C8h] 0F2FFh +
mov [ebp-0C4h] esi +
mov [ebp-0C0h] edi +
mov dword ptr [ebp-0BCh] 4CB122h +
mov [ebp-0B8h] esi +
mov [ebp-0B4h] edi +
mov dword ptr [ebp-0B0h] 0E8A200h +
mov [ebp-0ACh] esi +
mov [ebp-0A8h] edi +
mov dword ptr [ebp-0A4h] 0CC483Fh +
mov [ebp-0A0h] esi +
mov [ebp-9Ch] edi +
mov dword ptr [ebp-98h] 0A449A3h +
mov [ebp-94h] esi +
mov [ebp-90h] edi +
mov dword ptr [ebp-8Ch] 0FFFFFFh +
mov [ebp-88h] esi +
mov [ebp-84h] edi +
mov dword ptr [ebp-80h] 0C3C3C3h +
mov [ebp-7Ch] esi +
mov [ebp-78h] edi +
mov dword ptr [ebp-74h] 577AB9h +
mov [ebp-70h] esi +
mov [ebp-6Ch] edi +
mov dword ptr [ebp-68h] 0C9AEFFh +
mov [ebp-64h] esi +
mov [ebp-60h] edi +
mov dword ptr [ebp-5Ch] 0EC9FFh +
mov [ebp-58h] esi +
mov [ebp-54h] edi +
mov dword ptr [ebp-50h] 0B0E4EFh +
mov [ebp-4Ch] esi +
mov [ebp-48h] edi +
mov dword ptr [ebp-44h] 1DE6B5h +
mov [ebp-40h] esi +
mov [ebp-3Ch] edi +
mov dword ptr [ebp-38h] 0EAD999h +
mov [ebp-34h] esi +
mov [ebp-30h] edi +
mov dword ptr [ebp-2Ch] 0BE9270h +
mov [ebp-28h] esi +
mov [ebp-24h] edi +
mov dword ptr [ebp-20h] 0E7BFC8h +
mov [ebp-1Ch] esi +
mov [ebp-18h] edi +
call sub_10162ED  +
test al al +
jnz loc_1044896  +
lea eax [ebp-100h] +
mov [ebp-4] eax +
mov dword ptr [ebp-14h] 14h +
mov ecx [eax-4] +
mov [ebp-10h] ecx +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov [ebp-0Ch] ecx +
mov ecx [ebp+0Ch] +
push eax  +
call sub_1010DFE  +
add dword ptr [ebp-4] 0Ch +
dec dword ptr [ebp-14h]  +
jz loc_10164FC  +
mov eax [ebp-4] +
jmp loc_10164D1  +
***
mov eax [ebx+8] +
mov ecx [eax] +
mov [ebp-4] ecx +
cmp ecx eax +
jnz loc_1044959  +
push 0Ah  +
pop eax  +
sub eax [ebx+0Ch] +
jz loc_1016534  +
mov [ebp-10h] edi +
mov [ebp-0Ch] edi +
mov [ebp-8] edi +
mov ecx [ebp+0Ch] +
lea eax [ebp-10h] +
push eax  +
call sub_1010DFE  +
push 0Ah  +
pop eax  +
sub eax [ebx+0Ch] +
inc edi  +
cmp edi eax +
jb loc_101651D  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
***
mov eax [ebp-0D0h] +
cmp eax [ebp-0DCh] +
jnb loc_1010F36  +
mov ecx [ebp-0E0h] +
push eax  +
call sub_1010B4E  +
mov esi eax +
lea edi [ebp-100h] +
movs   +
movs   +
movs   +
xor eax eax +
lea edi [ebp-110h] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [ebp-120h] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [ebp-0F4h] +
stos   +
stos   +
stos   +
push 30h  +
stos   +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-124h] ecx +
mov byte ptr [ebp-4] 12h +
test ecx ecx +
jz loc_10117B1  +
call sub_1010F51  +
mov esi eax +
mov eax [ebp-0F8h] +
mov byte ptr [ebp-4] 0Ah +
test eax eax +
ja loc_10490FE  +
push 13h  +
pop eax  +
mov [ebp-110h] ax +
mov eax [ebp-100h] +
mov [ebp-108h] eax +
lea eax [ebp-110h] +
push eax  +
push offset dword_10166A0  +
mov ecx esi +
call sub_1010CDE  +
push 13h  +
pop eax  +
mov [ebp-120h] ax +
mov eax [ebp-0FCh] +
mov [ebp-118h] eax +
lea eax [ebp-120h] +
push eax  +
push offset dword_101668C  +
mov ecx esi +
call sub_1010CDE  +
and dword ptr [ebp-0CCh] 0 +
lea edx [ebp-0CCh] +
push edx  +
lea eax [esi+2Ch] +
mov ecx [eax] +
push offset dword_1010AB4  +
push eax  +
mov byte ptr [ebp-4] 13h +
call dword ptr [ecx]  +
mov [ebp-0C8h] eax +
test eax eax +
jl loc_1049126  +
mov eax [ebp-0D4h] +
push dword ptr [ebp-0CCh]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
lea eax [ebp-110h] +
push eax  +
call ebx  +
lea eax [ebp-120h] +
push eax  +
call ebx  +
lea eax [ebp-0F4h] +
push eax  +
call ebx  +
mov eax [ebp-0CCh] +
mov byte ptr [ebp-4] 0Ah +
test eax eax +
jz loc_101667F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-0D0h]  +
jmp loc_101653D  +
***
mov eax offset __imp_GdipCreateBitmapFromScan0 +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetImageGraphicsContext +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipFillRectangleI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipCreateSolidFill +
jmp loc_100ABE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_108B1AC 0 +
push esi  +
push edi  +
mov edi ecx +
jnz loc_1041128  +
push dword ptr [edi+20h]  +
call ds:IsWindowVisible  +
mov esi [ebp+8] +
test eax eax +
jnz loc_1016747  +
mov eax esi +
dec eax  +
jz loc_1016716  +
sub eax 4 +
jz loc_1016716  +
sub eax 5 +
jnz loc_101672B  +
mov eax dword_108B228 +
test eax eax +
jz loc_101672B  +
cmp eax 2 +
jz loc_101672B  +
cmp eax 5 +
ja loc_1016767  +
mov esi eax +
push offset dword_108B220  +
mov ecx edi +
mov dword_108B228 esi +
mov dword_108B220 2Ch +
call ?SetWindowPlacement@CWnd@@QAEHPBUtagWINDOWPLACEMENT@@@Z  +
lea eax [edi+0E0h] +
push esi  +
mov ecx edi +
mov dword_108A1EC eax +
call ?ActivateFrame@CFrameWnd@@UAEXH@Z  +
mov ecx edi +
call sub_1006330  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
cmp eax 7 +
ja loc_1016729  +
jmp loc_101672B  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+40h] +
call sub_1017A38  +
xor ebx ebx +
test eax eax +
jz loc_1042E04  +
cmp dword_108B1AC ebx +
jnz loc_1042DD1  +
push 32h  +
mov ecx offset unk_108B4B8 +
call sub_1018083  +
mov ecx edi +
call sub_101775E  +
mov ecx dword_108B110 +
cmp ecx ebx +
jz loc_10167C5  +
call sub_1017883  +
mov esi offset unk_108AF60 +
push 1Fh  +
mov ecx esi +
call sub_1006359  +
mov edx [eax] +
add edi 44h +
push edi  +
mov ecx eax +
call dword ptr [edx]  +
push 20h  +
mov ecx esi +
call sub_1006359  +
mov edx [eax] +
push edi  +
mov ecx eax +
call dword ptr [edx]  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
mov edi offset dword_100213C +
push edi  +
push 4  +
pop ebx  +
push ebx  +
push 54C6h  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push edi  +
push ebx  +
push 54C7h  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push edi  +
push ebx  +
mov esi 5399h +
push esi  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_100FA80  +
push ebx  +
push esi  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_100FA94  +
push ebx  +
push esi  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_100FB5C  +
push ebx  +
push esi  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push edi  +
push ebx  +
mov esi 52D2h +
push esi  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_100FA80  +
push ebx  +
push esi  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_100FA94  +
push ebx  +
push esi  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_100FB5C  +
push ebx  +
push esi  +
mov ecx eax +
call sub_1009E6B  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_100B384 +
call GdipDeleteBrush  +
test byte ptr [ebp+8] 1 +
jz loc_10168FE  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
add [edi] cl +
test [edx-5Bh] bh +
add al [eax] +
lea eax [ecx+0E0h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset ProcName  +
push hModule  +
call ds:GetProcAddress  +
mov off_108A1DC eax +
test eax eax +
jz loc_1041183  +
pop ebp  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+48h] +
xor ebx ebx +
cmp ecx ebx +
jz loc_10169C7  +
push edi  +
mov edi [ebp+8] +
push ebx  +
push edi  +
call sub_1009365  +
push ds:?classCPaintDC@CPaintDC@@2UCRuntimeClass@@B  +
mov ecx edi +
mov [ebp+8] eax +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_10426D1  +
lea eax [edi+1Ch] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call ds:CopyRect  +
cmp dword_108B190 ebx +
jnz loc_10426BD  +
mov ecx [esi+48h] +
push 1  +
push ebx  +
lea eax [ebp-10h] +
push eax  +
push edi  +
call sub_1009432  +
cmp [ebp+8] ebx +
jnz loc_10426E2  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-14h] 7 +
mov dword ptr [ebp-18h] offset off_100B560 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 1Fh  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
mov ecx eax +
call sub_1005BE0  +
mov eax dword_108A1F0 +
mov eax [eax+10h] +
mov esi [edi] +
push eax  +
push dword ptr [ebp-10h]  +
add esi 10h +
push 0  +
call sub_1016BFF  +
push eax  +
mov ecx edi +
call dword ptr [esi]  +
jmp loc_10077C8  +
***
mov dword ptr [ebp-14h] 7 +
mov dword ptr [ebp-18h] offset off_100B560 +
mov dword ptr [ebp-10h] 0FFFFFFh +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 20h  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
mov ecx eax +
call sub_1005BE0  +
mov eax dword_108A1F0 +
mov eax [eax+10h] +
mov esi [edi] +
push eax  +
push dword ptr [ebp-10h]  +
add esi 10h +
push 1  +
call sub_1016BFF  +
push eax  +
mov ecx edi +
call dword ptr [esi]  +
jmp loc_10072E7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1320h +
call sub_10130EB  +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
push offset aSecuritySppGen  +
lea eax [ebp+var_1304] +
push eax  +
call ds:RtlInitUnicodeString  +
lea eax [ebp+var_12A4] +
push eax  +
push 4  +
lea eax [ebp+var_1298] +
push eax  +
lea eax [ebp+var_1294] +
push eax  +
lea eax [ebp+var_1304] +
push eax  +
call ds:NtQueryLicenseValue  +
test eax eax +
jl loc_1016AE3  +
push edi  +
xor edi edi +
cmp [ebp+var_1294] 4 +
jnz sub_1044A1C  +
cmp [ebp+var_1298] edi +
jz sub_1044A1C  +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100207A  +
leave   +
retn   +
***
xor eax eax +
inc eax  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1016B86  +
mov eax [eax+4] +
push [ebp+fStyle]  +
push [ebp+y]  +
push [ebp+x]  +
push eax  +
push [ebp+i]  +
push dword ptr [ecx+4]  +
call ds:ImageList_Draw  +
pop ebp  +
retn 14h  +
***
mov eax offset __imp_GdipCreatePen1 +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDeletePen +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDrawRectangleI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGraphicsClear +
jmp loc_100ABE3  +
***
cmp dword ptr [ebp+8] 1 +
jnz loc_1016CA8  +
push 17h  +
push 17h  +
push 4  +
push 4  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-1Ch]  +
call GdipDrawRectangleI  +
cmp eax esi +
jnz loc_10445D3  +
push 14h  +
push 14h  +
push 6  +
push 6  +
jmp loc_1016C9F  +
***
call sub_100208C  +
push 26200Ah  +
push 20h  +
xor esi esi +
push 20h  +
lea ecx [ebp-34h] +
mov [ebp-14h] esi +
call sub_100B2C5  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-1Ch] +
mov [ebp-4] esi +
call sub_100B8C4  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-1Ch] +
mov dword ptr [ebp-10h] 0FFFFFFh +
call sub_1016F76  +
fld1   +
push ecx  +
fstp  dword ptr [esp+0] +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-10h] 0FF808080h +
call sub_100B88A  +
push dword ptr [ebp+10h]  +
lea eax [ebp-10h] +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 2 +
push eax  +
mov [ebp-10h] esi +
call sub_1016FA7  +
mov ebx [ebp-10h] +
cmp [ebp+8] esi +
jnz loc_1016BC8  +
push 1Fh  +
push 1Fh  +
push esi  +
push esi  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-1Ch]  +
call GdipDrawRectangleI  +
cmp eax esi +
jnz loc_10445CB  +
push 1Ch  +
push 1Ch  +
push 2  +
push 2  +
push ebx  +
lea ecx [ebp-1Ch] +
call sub_100B903  +
cmp ebx esi +
jz loc_1016CB4  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax]  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-34h] +
mov dword ptr [ebp+8] 0FFFFFFh +
call sub_1010018  +
push dword ptr [ebp-24h]  +
mov esi [ebp-14h] +
call GdipDeletePen  +
push dword ptr [ebp-1Ch]  +
call GdipDeleteGraphics  +
push dword ptr [ebp-30h]  +
call GdipDisposeImage  +
mov eax esi +
call sub_1002061  +
retn 0Ch  +
***
call sub_1016D1A  +
jmp loc_1008594  +
mov [ebp-28h] edi +
test al al +
js loc_100862D  +
jmp loc_1008630  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
push esi  +
mov esi ds:CreateBitmap +
push edi  +
push offset unk_108C1C0  +
xor edi edi +
inc edi  +
push edi  +
push edi  +
push 8  +
push 8  +
call esi  +
mov ebx offset off_108A308 +
push eax  +
mov ecx ebx +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
test eax eax +
jz loc_1043338  +
push offset aUkukukukbmpwid  +
push edi  +
push edi  +
push 8  +
push 8  +
call esi  +
mov esi offset off_108A310 +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
test eax eax +
jz loc_1043338  +
push ebx  +
mov ecx offset off_108A2F8 +
call sub_1013AE5  +
test eax eax +
jz loc_1043338  +
push esi  +
mov ecx offset off_108A300 +
call sub_1013AE5  +
test eax eax +
jz loc_1043338  +
push 1F55h  +
mov ecx offset off_108A2E8 +
call sub_1016EF6  +
test eax eax +
jz loc_1043338  +
push 1F56h  +
mov ecx offset off_108A2F0 +
call sub_1016EF6  +
test eax eax +
jz loc_1043338  +
push 7F00h  +
push 0  +
call ds:LoadCursorW  +
push 2  +
pop ebx  +
mov dword_108A264 eax +
push ebx  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_8] 60h +
mov [ebp+var_4] 90h +
mov [ebp+var_10] 242Fh +
mov [ebp+var_C] 2430h +
call sub_100A0E4  +
mov esi offset unk_108AF60 +
push eax  +
mov ecx esi +
call sub_102E831  +
mov dword_108A268 eax +
push ebx  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_18] 243Fh +
mov [ebp+var_14] 2440h +
call sub_100A0E4  +
push eax  +
mov ecx esi +
call sub_102E831  +
mov dword_108A26C eax +
push ebx  +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_20] 2443h +
mov [ebp+var_1C] 2444h +
call sub_100A0E4  +
push eax  +
mov ecx esi +
call sub_102E831  +
mov dword_108A270 eax +
push ebx  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_28] 243Dh +
mov [ebp+var_24] 243Eh +
call sub_100A0E4  +
push eax  +
mov ecx esi +
call sub_102E831  +
mov dword_108A274 eax +
push ebx  +
lea eax [ebp+var_30] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_30] 2441h +
mov [ebp+var_2C] 2442h +
call sub_100A0E4  +
push eax  +
mov ecx esi +
call sub_102E831  +
mov dword_108A278 eax +
push ebx  +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_38] 2447h +
mov [ebp+var_34] 2448h +
call sub_100A0E4  +
push eax  +
mov ecx esi +
call sub_102E831  +
mov dword_108A260 eax +
mov dword_108A27C edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push esi  +
push eax  +
push 2  +
push eax  +
mov esi ecx +
call ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBG0@Z  +
push eax  +
call ds:LoadBitmapW  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
mov ebx ecx +
test edi edi +
jz loc_10426F2  +
mov eax [edi+4] +
push eax  +
call off_108A1DC  +
test al 1 +
jnz loc_10426F9  +
mov esi [ebp+0Ch] +
push esi  +
push edi  +
mov ecx ebx +
call ?OnPrepareDC@CView@@UAEXPAVCDC@@PAUCPrintInfo@@@Z  +
test esi esi +
jnz loc_1042712  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipGraphicsClear  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp [ebp+arg_8] 0 +
push esi  +
jnz loc_1044578  +
push [ebp+arg_4]  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] 0FF000000h +
call sub_1016FF4  +
push 0Ch  +
call GdipAlloc  +
test eax eax +
jz loc_1016FEB  +
lea ecx [ebp+arg_8] +
push ecx  +
mov ecx eax +
call sub_100B7C0  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
pop esi  +
leave   +
retn 0Ch  +
xor eax eax +
jmp loc_1016FE1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
shr eax 10h +
push eax  +
mov eax [ebp+arg_0] +
shr eax 8 +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
push 0FFh  +
call sub_100B85D  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov edi [ebp+8] +
mov eax [edi+10h] +
test al 1 +
setnbe byte ptr [ebp-0Eh]  +
test al 4 +
setnbe byte ptr [ebp+0Bh]  +
test eax 80h +
setnbe byte ptr [ebp-0Dh]  +
test al 10h +
lea eax [edi+1Ch] +
push eax  +
lea ecx [ebp-38h] +
setnbe byte ptr [ebp-0Fh]  +
call sub_100B3A5  +
mov edi [edi+18h] +
lea ecx [ebp-28h] +
call ??0CDC@@QAE@XZ  +
xor ebx ebx +
push edi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ?Attach@CDC@@QAEHPAUHDC__@@@Z  +
lea ecx [ebp-28h] +
call ?SaveDC@CDC@@UAEHXZ  +
lea eax [esi+70h] +
push eax  +
lea ecx [ebp-28h] +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
lea eax [esi+68h] +
push eax  +
lea ecx [ebp-28h] +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov eax [esi+58h] +
sub eax [esi+50h] +
mov ecx [esi+54h] +
sub ecx [esi+4Ch] +
push eax  +
push ecx  +
push ebx  +
push ebx  +
push dword ptr [ebp-24h]  +
call ds:Rectangle  +
mov eax [esi+7Ch] +
push dword ptr [esi+44h]  +
mov edi [esi+80h] +
mov [ebp-18h] eax +
call ds:ImageList_GetImageCount  +
cmp [ebp+0Bh] bl +
jnz loc_101711D  +
cmp [ebp-0Dh] bl +
jnz loc_101711D  +
cmp [ebp-0Eh] bl +
jnz loc_104969C  +
cmp [esi+84h] bl +
jnz loc_10496A8  +
cmp [ebp-0Fh] bl +
jnz loc_10496B1  +
push ebx  +
push edi  +
push dword ptr [ebp-18h]  +
push ebx  +
lea eax [ebp-28h] +
push eax  +
lea ecx [esi+40h] +
call sub_1016B77  +
push 0FFFFFFFFh  +
lea ecx [ebp-28h] +
call ?RestoreDC@CDC@@UAEHH@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ??1CDC@@UAE@XZ  +
call sub_1002061  +
retn 4  +
cmp eax 4 +
jg loc_10496BA  +
jmp loc_10496BF  +
***
inc [ebp+var_C]  +
jmp loc_1005EC4  +
and dword ptr [eax+ebx*4] 0 +
jmp loc_1005F59  +
test edi edi +
jg loc_10178E4  +
mov [ebp+arg_4] ebx +
mov ebx [ebp+rc.left] +
xor edi edi +
cmp [ebp+arg_4] edi +
jg loc_1017962  +
push [ebp+var_8]  +
mov eax [esi] +
push dword ptr [esi+5Ch]  +
mov ecx esi +
push 404h  +
call dword ptr [eax+0A8h]  +
push [ebp+var_8]  +
call sub_1006809  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
mov ecx [ebx+84h] +
shl edi 5 +
add ecx edi +
mov [ebp+var_4] edi +
call sub_100B9A1  +
mov esi eax +
dec esi  +
jns loc_10171CF  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
lea eax [esi+1] +
mov [ebp+arg_0] eax +
mov eax [ebx+84h] +
add edi eax +
lea ecx [edi+10h] +
call sub_100B9A1  +
cmp eax [ebp+arg_0] +
jg loc_1049408  +
lea eax [ebp+Point] +
push eax  +
mov eax [edi+4] +
mov eax [eax+esi*4] +
push dword ptr [eax+20h]  +
call ds:GetWindowRect  +
lea eax [ebp+Point] +
push eax  +
mov ecx ebx +
call sub_1017263  +
mov eax [ebp-8] +
sub eax [ebp+Point.y] +
mov ecx [ebp-0Ch] +
push 1  +
push eax  +
mov eax [ebp+Point.x] +
sub ecx eax +
sub eax [ebp-0Ch] +
push ecx  +
mov ecx [ebp+arg_4] +
push [ebp+Point.y]  +
lea eax [eax+ecx-1] +
mov ecx [ebp+var_4] +
push eax  +
mov eax [ebx+84h] +
mov eax [ecx+eax+4] +
mov ecx [eax+esi*4] +
call ?MoveWindow@CWnd@@QAEXHHHHH@Z  +
mov eax [ebp+Point.x] +
sub eax [ebp-0Ch] +
add [ebp+arg_4] eax +
dec esi  +
dec [ebp+arg_0]  +
test esi esi +
jl loc_10171C8  +
mov edi [ebp+var_4] +
jmp loc_10171D5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpPoint] +
push edi  +
mov ebx ecx +
push esi  +
push dword ptr [ebx+20h]  +
call ds:ScreenToClient  +
lea edi [esi+8] +
push edi  +
push dword ptr [ebx+20h]  +
call ds:ScreenToClient  +
mov ecx ebx +
call ?GetExStyle@CWnd@@QBEKXZ  +
test eax 400000h +
jnz loc_103D731  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+11Ch] +
push eax  +
call sub_1017308  +
lea eax [esi+1A4h] +
push eax  +
mov ecx esi +
call sub_1017308  +
lea eax [esi+0DCh] +
push eax  +
mov ecx esi +
call sub_1017308  +
lea eax [esi+22Ch] +
push eax  +
mov ecx esi +
call sub_1017308  +
push 1  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
mov edi [ebp+arg_0] +
lea eax [ebp+Point] +
push eax  +
push dword ptr [edi+20h]  +
call ds:GetWindowRect  +
lea eax [ebp+Point] +
push eax  +
mov ecx esi +
call sub_1017263  +
mov eax [ebp+Rect.top] +
mov [ebp+Point.y] eax +
mov eax [ebp+Rect.bottom] +
mov [ebp+var_4] eax +
push 1  +
lea eax [ebp+Point] +
push eax  +
mov ecx edi +
call sub_1017723  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call sub_10020DC  +
mov eax [ebp+8] +
push eax  +
mov esi ecx +
call sub_10193B2  +
mov eax [esi] +
push 6  +
push offset asc_108C2C0  +
mov ecx esi +
call dword ptr [eax+0F0h]  +
mov ecx esi +
call sub_1017F25  +
push esi  +
lea ecx [ebp-64h] +
mov [ebp-8Ch] eax +
call ??0CPaintDC@@QAE@PAVCWnd@@@Z  +
mov edi ds:GetDeviceCaps +
push 58h  +
push dword ptr [ebp-5Ch]  +
xor ebx ebx +
mov [ebp-4] ebx +
call edi  +
mov [ebp-68h] eax +
fild  dword ptr [ebp-68h] +
push 5Ah  +
push dword ptr [ebp-5Ch]  +
fdiv  ds:dbl_10021B0 +
fstp  qword ptr [ebp-74h] +
call edi  +
mov [ebp-68h] eax +
fild  dword ptr [ebp-68h] +
fdiv  ds:dbl_10021B0 +
fld  qword ptr [ebp-74h] +
fld  ds:dbl_1017EE8 +
fmul st(1) st +
fxch  st(1) +
call _ftol2_sse  +
fmulp st(1) st +
mov [ebp-70h] eax +
call _ftol2_sse  +
push ebx  +
mov [ebp-6Ch] eax +
call ds:GetModuleHandleW  +
mov edi ds:COMCTL32_381 +
mov [ebp-68h] eax +
lea eax [esi+370h] +
push eax  +
push dword ptr [ebp-6Ch]  +
push dword ptr [ebp-70h]  +
push 0C3D6h  +
push dword ptr [ebp-68h]  +
call edi  +
lea eax [esi+374h] +
push eax  +
push dword ptr [ebp-6Ch]  +
push dword ptr [ebp-70h]  +
push 0C3D7h  +
push dword ptr [ebp-68h]  +
call edi  +
lea eax [esi+378h] +
push eax  +
push dword ptr [ebp-6Ch]  +
push dword ptr [ebp-70h]  +
push 0C3D8h  +
push dword ptr [ebp-68h]  +
call edi  +
lea eax [esi+37Ch] +
push eax  +
push dword ptr [ebp-6Ch]  +
push dword ptr [ebp-70h]  +
push 0C3D9h  +
push dword ptr [ebp-68h]  +
call edi  +
xor edi edi +
lea eax [ebp-88h] +
push eax  +
lea eax [ebp-80h] +
push eax  +
lea eax [ebp-84h] +
push eax  +
push edi  +
mov ecx esi +
call ?GetPaneInfo@CStatusBar@@QBEXHAAI0AAH@Z  +
fild  dword ptr [ebp-88h] +
fmul  ds:dbl_1017678 +
call _ftol2_sse  +
push 10h  +
pop ecx  +
sub ecx eax +
push ecx  +
push dword ptr [ebp-80h]  +
mov ecx esi +
push dword ptr [ebp-84h]  +
push edi  +
call ?SetPaneInfo@CStatusBar@@QAEXHIIH@Z  +
push 1  +
push offset word_100219C  +
push edi  +
mov ecx esi +
call ?SetPaneText@CStatusBar@@QAEHHPBGH@Z  +
inc edi  +
cmp edi 6 +
jb loc_1017462  +
lea eax [ebp-88h] +
push eax  +
lea eax [ebp-80h] +
push eax  +
lea eax [ebp-84h] +
push eax  +
push 4  +
mov ecx esi +
call ?GetPaneInfo@CStatusBar@@QBEXHAAI0AAH@Z  +
mov eax [ebp-80h] +
push ebx  +
or eax 8000000h +
push eax  +
push dword ptr [ebp-84h]  +
mov ecx esi +
push 4  +
call ?SetPaneInfo@CStatusBar@@QAEXHIIH@Z  +
push dword ptr [esi+370h]  +
mov ecx esi +
push ebx  +
call sub_1011C86  +
push dword ptr [esi+374h]  +
mov ecx esi +
push 1  +
call sub_1011C86  +
push dword ptr [esi+378h]  +
mov ecx esi +
push 2  +
call sub_1011C86  +
push 0D001h  +
push 0Fh  +
push 50010000h  +
lea eax [ebp-7Ch] +
push eax  +
push esi  +
lea eax [esi+0A0h] +
lea edi [esi+0B8h] +
push eax  +
mov ecx edi +
mov [ebp-7Ch] ebx +
mov [ebp-78h] ebx +
mov dword ptr [ebp-74h] 0C8h +
mov dword ptr [ebp-70h] 19h +
call sub_1018A6E  +
mov ecx esi +
call sub_1018940  +
mov eax ds:dword_1017680 +
fld  qword ptr ds:locret_1010228[eax*8] +
sub esp 10h +
fstp  qword ptr [esp+8] +
mov ecx edi +
fld  ds:dbl_1010230 +
fstp  qword ptr [esp+0] +
call sub_1018190  +
mov [ebp-98h] ebx +
mov [ebp-94h] ebx +
mov [ebp-90h] ebx +
lea eax [ebp-9Ch] +
push eax  +
mov eax ds:dword_1017680 +
lea eax dbl_1010230[eax*8] +
push eax  +
lea eax [ebp-68h] +
push offset dbl_1010230  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101886E  +
add esp 10h +
lea eax [ebp-9Ch] +
push eax  +
mov ecx edi +
call sub_101824D  +
mov [ebp-78h] ebx +
mov [ebp-74h] ebx +
mov [ebp-70h] ebx +
lea eax [ebp-68h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-68h] edi +
push eax  +
lea ecx [ebp-7Ch] +
call sub_1013D79  +
mov [ebp-0A8h] ebx +
mov [ebp-0A4h] ebx +
mov [ebp-0A0h] ebx +
lea eax [ebp-0ACh] +
push eax  +
lea eax [ebp-7Ch] +
push eax  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 3 +
call sub_1018745  +
push eax  +
push 5  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_10195A1  +
lea ecx [ebp-0CCh] +
call sub_10133AF  +
lea ecx [ebp-0ACh] +
mov byte ptr [ebp-4] 2 +
call sub_100CAB5  +
mov eax [esi] +
push 5  +
mov ecx esi +
call dword ptr [eax+0ECh]  +
mov ecx esi +
call sub_1011BA0  +
lea ecx [ebp-7Ch] +
call sub_100CAB5  +
lea ecx [ebp-9Ch] +
call sub_100CAB5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-64h] +
call ??1CPaintDC@@UAE@XZ  +
mov eax [ebp-8Ch] +
call sub_1002119  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
push dword ptr [ebp+10h]  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1005E48  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [esi+0D8h]  +
call ds:GetWindowRect  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_1017263  +
mov edi ds:GetSystemMetrics +
push 2Eh  +
call edi  +
push 6  +
mov ebx eax +
call edi  +
add ebx [ebp-20h] +
push 6  +
add eax ebx +
mov [ebp-10h] eax +
call edi  +
mov ecx [ebp-18h] +
sub ecx eax +
push 1  +
lea eax [ebp-14h] +
mov [ebp-8] ecx +
push eax  +
lea ecx [esi+0B8h] +
call sub_1017723  +
xor edi edi +
cmp [ebp+0Ch] edi +
jg loc_1017915  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+4] +
push esi  +
mov esi [eax] +
push edi  +
push [ebp+arg_4]  +
mov edi [eax+0Ch] +
mov eax [eax+8] +
sub edi edx +
push edi  +
sub eax esi +
push eax  +
push edx  +
push esi  +
call ?MoveWindow@CWnd@@QAEXHHHHH@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
mov ecx dword_108A1EC +
cmp dword ptr [ecx+20h] 0 +
mov esi eax +
jnz loc_10177B4  +
push esi  +
call sub_1017360  +
test eax eax +
jz loc_104288A  +
cmp dword_108B1DC 0 +
jz loc_101779D  +
mov ecx dword_108A1EC +
push 0  +
push offset unk_108B1D8  +
call sub_10177DC  +
mov ecx dword_108A1EC +
push esi  +
call sub_1017864  +
push dword_108B17C  +
call sub_1017803  +
push 5000h  +
mov ecx esi +
call ?EnableDocking@CFrameWnd@@QAEXK@Z  +
push 0A000h  +
mov ecx esi +
call ?EnableDocking@CFrameWnd@@QAEXK@Z  +
or dword ptr [esi+0BCh] 0Ch +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10177EB  +
mov eax [eax+4] +
push [ebp+lParam]  +
push eax  +
push 30h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx dword_108A1EC +
neg eax  +
sbb eax eax +
and eax 4 +
push eax  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
pop ebp  +
retn 4  +
***
push eax  +
mov dword_108A220 eax +
call sub_1005C6C  +
jmp loc_1009D35  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+8] +
lea eax [ecx+480h] +
cmp [eax] edx +
jz loc_101785B  +
add ecx 0FFFFFF40h +
mov [eax] edx +
mov eax [ecx] +
push 1  +
call dword ptr [eax+0D0h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101787A  +
mov eax [eax+20h] +
mov [ecx+24h] eax +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1017873  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10049D9  +
mov edx dword_108A24C +
mov ecx [edx+40h] +
add ecx 14h +
mov [esi+8] ecx +
lea ecx [eax+20h] +
mov [esi+0Ch] ecx +
mov ecx [edx+40h] +
add ecx 0Ch +
mov [esi+10h] ecx +
mov ecx [edx+40h] +
add ecx 8 +
cmp dword ptr [esi+20h] 0 +
mov [esi+1Ch] ecx +
jnz loc_1044994  +
pop esi  +
retn   +
***
mov eax [ebp+var_8] +
mov ecx [ebp+var_4] +
mov [eax+ebx*4] ecx +
jmp loc_1005F3D  +
mov eax edi +
cdq   +
idiv  [ebp+var_C] +
sub [ebp+var_4] eax +
jmp loc_101714F  +
mov eax [esi+94h] +
and dword ptr [eax+edi*4] 0 +
jmp loc_10179AD  +
***
mov eax offset __imp_GdipDeleteBrush +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDeleteGraphics +
jmp loc_100ABE3  +
***
mov byte ptr [ebp+0Fh] 0 +
mov ebx 4000000h +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-4] +
push eax  +
push edi  +
mov ecx esi +
call ?GetPaneInfo@CStatusBar@@QBEXHAAI0AAH@Z  +
push edi  +
mov ecx esi +
call sub_1005C20  +
test eax eax +
mov eax [ebp+10h] +
jz loc_103D7C7  +
test eax ebx +
jnz loc_103D7FA  +
inc edi  +
cmp edi 6 +
jl loc_101791E  +
cmp byte ptr [ebp+0Fh] 0 +
jz loc_1017717  +
jmp loc_103D864  +
***
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
mov ecx esi +
call ?GetPaneInfo@CStatusBar@@QBEXHAAI0AAH@Z  +
mov eax [ebp+var_1C] +
mov ecx [ebp+var_10] +
add ecx eax +
lea ebx [ebx+ecx+6] +
cmp ebx [ebp+var_4] +
jge loc_10178F2  +
mov eax [ebp+var_8] +
push ebx  +
push edi  +
mov ecx esi +
mov [eax+edi*4] ebx +
call sub_10171A0  +
mov eax [esi+94h] +
mov dword ptr [eax+edi*4] 1 +
inc edi  +
cmp edi [ebp+arg_4] +
jl loc_1017962  +
cmp edi [ebp+arg_4] +
jge loc_1017160  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_4] +
push 0  +
mov [eax+edi*4] ecx +
push edi  +
mov ecx esi +
call sub_10171A0  +
mov eax [esi+94h] +
and dword ptr [eax+edi*4] 0 +
inc edi  +
jmp loc_10179AD  +
***
mov ecx [esi+58h] +
cmp dword_108B1CC ebx +
jnz loc_1042747  +
cmp ecx ebx +
jz loc_10179EF  +
push ebx  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov ecx [esi+5Ch] +
cmp ecx ebx +
jz loc_10179FC  +
push ebx  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov ecx [esi+60h] +
cmp ecx ebx +
jz loc_1017A09  +
push ebx  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
push 1  +
push eax  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
push eax  +
push ebx  +
push ebx  +
mov ecx [esi+48h] +
call ?MoveWindow@CWnd@@QAEXHHHHH@Z  +
jmp loc_1013578  +
***
call sub_10020DC  +
mov eax ecx +
mov esi [eax+40h] +
mov [ebp-220h] eax +
xor eax eax +
cmp esi eax +
jz loc_10371ED  +
mov edi [esi+0F0h] +
cmp edi eax +
jz loc_10371ED  +
cmp [esi+0FCh] eax +
jz loc_10371DF  +
xor ebx ebx +
inc ebx  +
cmp [edi+4] eax +
jnz loc_1017A8D  +
mov ecx edi +
call sub_1017AFB  +
test eax eax +
jz loc_10371ED  +
mov eax [edi+4] +
cmp [eax+2Ch] ebx +
jl loc_1042D39  +
cmp [eax+30h] ebx +
jl loc_1042D39  +
call sub_1013351  +
call sub_1013309  +
mov ecx [ebp-220h] +
push edi  +
call sub_10192AF  +
test eax eax +
jz loc_10371ED  +
lea ebx [esi+0ECh] +
mov ecx [ebx] +
test ecx ecx +
jnz loc_1042C13  +
and dword ptr [esi+0F0h] 0 +
mov [ebx] edi +
mov ecx dword_108B110 +
test ecx ecx +
jz loc_1017AED  +
cmp dword ptr [ecx+20h] 0 +
jnz loc_1042C22  +
xor eax eax +
inc eax  +
call sub_1002119  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+30h] +
push edi  +
xor edi edi +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
cmp eax edi +
jz loc_10370C7  +
push eax  +
call ds:GlobalLock  +
mov ebx eax +
cmp ebx edi +
jz loc_1017B56  +
cmp dword ptr [ebx] 28h +
jb loc_1017B44  +
xor eax eax +
cmp [ebx+10h] edi +
setnz al  +
mov [esi+24h] eax +
mov eax [ebx+18h] +
mov [ebp+var_8] eax +
mov eax [ebx+1Ch] +
mov [ebp+var_4] eax +
push ebx  +
call sub_1010A2A  +
push ebx  +
mov [esi+8] eax +
call sub_1010A4E  +
mov [esi+0Ch] eax +
xor edx edx +
cmp [esi+10h] edi +
setz dl  +
cmp ebx edi +
jz loc_10370CE  +
xor ecx ecx +
cmp ebx edi +
jz loc_10370D6  +
xor eax eax +
push dword_108B1A8  +
push [ebp+var_4]  +
push [ebp+var_8]  +
push edx  +
push edx  +
push ecx  +
push eax  +
call sub_1017D1A  +
mov [esi+4] eax +
cmp eax edi +
jz loc_1017B9F  +
cmp [eax+0Ch] edi +
jz loc_103DE8D  +
cmp ebx edi +
jz loc_10370DE  +
cmp [esi+4] edi +
jz loc_103DE9C  +
mov edx dword_108A1F0 +
cmp edx edi +
jz loc_1017BC2  +
push edi  +
mov ecx esi +
call sub_1017CF3  +
push eax  +
mov ecx edx +
call sub_1013F8E  +
mov eax [esi+4] +
mov ecx [esi+8] +
mov [eax+2Ch] ecx +
mov eax [esi+4] +
mov ecx [esi+0Ch] +
mov [eax+30h] ecx +
mov eax [esi+4] +
mov [eax+4] esi +
mov eax [esi+4] +
mov ecx [esi+2Ch] +
mov [eax+8] ecx +
cmp ebx edi +
jz loc_1017C17  +
mov eax [esi+4] +
push dword ptr [eax+0Ch]  +
push dword ptr [esi+34h]  +
push ebx  +
call sub_102C9DF  +
cmp eax edi +
jz loc_103DEBC  +
mov ecx [esi+4] +
mov [ecx+14h] eax +
push eax  +
mov eax [esi+4] +
push dword ptr [eax+0Ch]  +
call ds:SelectObject  +
mov ecx [esi+4] +
mov [ecx+18h] eax +
cmp dword_108B1A8 edi +
jnz loc_103DECA  +
mov dword_108B1D4 edi +
mov eax [esi+4] +
mov ecx [eax+24h] +
cmp ecx edi +
jnz loc_103DEE0  +
mov edx dword_108A1F0 +
cmp edx edi +
jz loc_1017C56  +
mov ecx esi +
call sub_1017CF3  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
mov ecx edx +
call sub_1017FB4  +
cmp ebx edi +
jz loc_1017C63  +
push dword ptr [esi+30h]  +
call ds:GlobalUnlock  +
mov ecx esi +
call sub_1017CF3  +
xor ebx ebx +
inc ebx  +
cmp eax ebx +
jz loc_103DF37  +
mov ecx esi +
call sub_1017CF3  +
mov ecx eax +
dec ecx  +
neg ecx  +
sbb ecx ecx +
xor eax eax +
lea edi [ebp+var_18] +
stos   +
stos   +
stos   +
stos   +
push 13h  +
inc ecx  +
pop eax  +
mov word ptr [ebp+var_18] ax +
mov [ebp+var_10] ecx +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
lea ecx [ebp+var_18] +
push ecx  +
push offset dword_1017ED4  +
push 54C5h  +
mov ecx eax +
call sub_1018060  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
mov esi offset dword_100213C +
push esi  +
push 4  +
push 54C6h  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push esi  +
push 4  +
push 54C7h  +
mov ecx eax +
call sub_1009E6B  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
cmp dword ptr [ecx+4] 0 +
jz loc_103DB71  +
mov ecx [ecx+4] +
mov eax [ecx+38h] +
imul eax [ecx+34h] +
retn   +
***
push 1Ch  +
mov edx offset unk_108C5D8 +
pop eax  +
jmp loc_1013FAE  +
***
call sub_1002370  +
xor ebx ebx +
mov [ebp-18h] ebx +
mov dword ptr [ebp-1Ch] offset off_102DC54 +
push ebx  +
lea ecx [ebp-4Ch] +
mov [ebp-4] ebx +
mov [ebp-20h] ebx +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
mov byte ptr [ebp-4] 1 +
cmp [ebp+10h] ebx +
jnz loc_1017D5B  +
push 0Eh  +
push dword ptr [ebp-44h]  +
call ds:GetDeviceCaps  +
mov [ebp+10h] eax +
cmp [ebp+14h] ebx +
jnz loc_1017D6E  +
push 0Ch  +
push dword ptr [ebp-44h]  +
call ds:GetDeviceCaps  +
mov [ebp+14h] eax +
lea ecx [ebp-38h] +
call ??0CDC@@QAE@XZ  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call sub_1002292  +
cmp [ebp-34h] ebx +
jz loc_103F595  +
mov edi [ebp+10h] +
imul edi [ebp+14h] +
cmp edi 1 +
jle loc_1017DA5  +
push 4  +
lea ecx [ebp-38h] +
call ?SetStretchBltMode@CDC@@QAEHH@Z  +
cmp [ebp+8] ebx +
jnz loc_10370EC  +
lea ecx [ebp-28h] +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
push 5Ch  +
mov byte ptr [ebp-4] 4 +
call ??2@YAPAXI@Z  +
pop ecx  +
mov esi eax +
mov dword ptr [ebp-4] 2 +
call ?AfxTryCleanup@@YGXXZ  +
mov eax [ebp+8] +
mov [esi+2Ch] eax +
mov eax [ebp+0Ch] +
mov [esi+30h] eax +
mov eax [ebp+10h] +
mov [esi+34h] eax +
mov eax [ebp+14h] +
mov [esi+38h] eax +
mov eax [ebp+18h] +
mov [esi+3Ch] eax +
mov eax [ebp+1Ch] +
lea ecx [ebp-38h] +
mov [esi+40h] eax +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
lea ecx [ebp-1Ch] +
mov [esi+0Ch] eax +
call ?Detach@CGdiObject@@QAEPAXXZ  +
mov [esi+14h] eax +
mov [esi+18h] ebx +
mov [esi] ebx +
mov [esi+8] ebx +
mov [esi+28h] ebx +
mov [esi+24h] ebx +
mov eax dword_108DAD8 +
mov [esi+4Ch] eax +
mov eax dword_108DAD0 +
mov [esi+50h] eax +
mov eax dword_108DAD4 +
mov [esi+54h] eax +
mov eax [ebp-20h] +
mov [esi+58h] eax +
mov eax dword_108A1C8 +
mov cl byte ptr dword_108A1C8+2 +
movzx edx ah +
movzx ecx cl +
movzx eax al +
cmp dword_108B1A8 ebx +
jnz loc_103F607  +
shl ecx 8 +
or ecx edx +
shl ecx 8 +
or ecx eax +
mov dword_108A1C8 ecx +
mov eax [esi+14h] +
cmp eax ebx +
jnz loc_1037336  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ??1CDC@@UAE@XZ  +
lea ecx [ebp-4Ch] +
mov [ebp-4] bl +
call ??1CClientDC@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_102DCC1  +
mov eax esi +
call sub_1002061  +
retn 1Ch  +
***
mov eax ds:?classCView@CView@@2UCRuntimeClass@@B +
retn   +
***
mov eax offset __imp_GdipFree +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipAlloc +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDisposeImage +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipCreateHBITMAPFromBitmap +
jmp loc_100ABE3  +
***
push 0C3C4h  +
jmp loc_101040F  +
push 0C3C5h  +
jmp loc_101040F  +
push 0C3C6h  +
jmp loc_101040F  +
push 0C3E3h  +
jmp loc_101040F  +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-18h] esi +
lea ecx [ebp-24h] +
mov dword ptr [ebp-14h] 1 +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
push 0C37Bh  +
lea ecx [esi+0A4h] +
mov byte ptr [ebp-4] 1 +
call ?LoadStringW@CString@@QAEHI@Z  +
push 0C37Ch  +
lea ecx [esi+0A8h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push 0C37Dh  +
lea ecx [esi+0ACh] +
call ?LoadStringW@CString@@QAEHI@Z  +
push 0C37Eh  +
lea ecx [esi+0B0h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push 0C37Fh  +
lea ecx [esi+0B4h] +
call ?LoadStringW@CString@@QAEHI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
mov eax [ebp-14h] +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+10h] +
mov edx [ebp+arg_0] +
test eax eax +
jnz loc_103E2EC  +
test edx edx +
jnz loc_103E2FC  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov ebx ecx +
xor edi edi +
test byte ptr dword_108A250 1 +
mov esi offset dword_108BBA4 +
jnz loc_1018016  +
or dword_108A250 1 +
mov ecx esi +
mov [ebp-4] edi +
call ??0CString@@QAE@XZ  +
push offset loc_101E86A  +
call sub_1013E9D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov eax dword_108BBA4 +
cmp [eax-8] edi +
jnz loc_1018032  +
push edi  +
push edi  +
push edi  +
push 8  +
call ?AfxRegisterWndClass@@YGPBGIPAUHICON__@@PAUHBRUSH__@@0@Z  +
push eax  +
mov ecx esi +
call ??4CString@@QAEABV0@PBG@Z  +
mov eax [ebp+8] +
push edi  +
push dword ptr [ebp+14h]  +
or eax 4000000h +
push dword ptr [ebp+10h]  +
mov ecx ebx +
push dword ptr [ebp+0Ch]  +
push eax  +
push edi  +
push dword_108BBA4  +
call ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z  +
call sub_1002061  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ecx+0C8h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 1 +
jl loc_101809B  +
mov [ecx+6BCh] eax +
call sub_1008B46  +
pop ebp  +
retn 4  +
***
xor eax eax +
retn   +
***
call sub_1002370  +
mov esi ecx +
cmp dword ptr [ebp+8] 3FFFFFFFh +
ja loc_1049466  +
call sub_1013D61  +
cmp eax [ebp+8] +
jnb loc_1018140  +
push 0  +
push dword ptr [ebp+8]  +
call sub_1013BE9  +
mov ecx [esi+4] +
and dword ptr [ebp-4] 0 +
mov edi eax +
mov eax [esi+8] +
push esi  +
push edi  +
push eax  +
push ecx  +
mov [ebp-14h] edi +
call sub_1013F2F  +
mov ecx esi +
call sub_100B9A1  +
mov ebx eax +
mov eax [esi+4] +
test eax eax +
jnz loc_104946B  +
mov eax [ebp+8] +
lea eax [edi+eax*4] +
mov [esi+0Ch] eax +
lea eax [edi+ebx*4] +
mov [esi+8] eax +
mov [esi+4] edi +
call sub_1002061  +
retn 4  +
***
push 1  +
push eax  +
call sub_1013DF9  +
mov [esi+8] eax +
jmp loc_1013DAA  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push 0  +
call sub_1013B33  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [esi+10h] +
call sub_1013B33  +
mov eax esi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_0] +
fstp  qword ptr [ecx+298h] +
fld  [ebp+arg_8] +
fstp  qword ptr [ecx+2A0h] +
pop ebp  +
retn 10h  +
***
push 31h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
push eax  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10181DE  +
mov ecx [ebp+arg_4] +
fld  qword ptr [ecx] +
fstp  qword ptr [eax] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_10495A9  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
mov eax [eax+4] +
push edx  +
push eax  +
add ecx 284h +
call sub_1018271  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101828D  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [esi+4] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10181E7  +
push [ebp+arg_4]  +
mov eax [esi+4] +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_10182C4  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10182E3  +
pop ebp  +
retn 0Ch  +
***
call sub_1002370  +
mov esi ecx +
mov edi [ebp+10h] +
sub edi [ebp+0Ch] +
sar edi 3 +
call sub_100CADB  +
mov [ebp-14h] eax +
test edi edi +
jz loc_10183A9  +
mov ecx esi +
call sub_100CA8E  +
mov ecx 1FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_10495C9  +
add eax edi +
cmp [ebp-14h] eax +
jnb loc_10495F5  +
mov edx [ebp-14h] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp-14h] +
jb loc_10495CE  +
add [ebp-14h] edx +
cmp [ebp-14h] eax +
jnb loc_1018348  +
mov [ebp-14h] eax +
push 0  +
push dword ptr [ebp-14h]  +
call sub_100CAF0  +
and dword ptr [ebp-4] 0 +
mov ebx eax +
mov eax [esi+4] +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp-18h] ebx +
push eax  +
call sub_10183B6  +
push esi  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10188E4  +
push esi  +
push eax  +
push dword ptr [esi+8]  +
push dword ptr [ebp+8]  +
call sub_10183B6  +
mov ecx esi +
call sub_100CA8E  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jnz loc_10495D7  +
mov eax [ebp-14h] +
lea eax [ebx+eax*8] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*8] +
mov [esi+8] eax +
mov [esi+4] ebx +
call sub_1002061  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10183E4  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
sar eax 3 +
mov ecx eax +
shl ecx 3 +
push esi  +
lea esi [ecx+edx] +
test eax eax +
ja loc_1018409  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push edx  +
call memmove_s  +
add esp 10h +
jmp loc_1018402  +
***
call sub_100208C  +
mov esi ecx +
mov ebx [ebp+0Ch] +
push ebx  +
push dword ptr [ebp+8]  +
call ?SetIndicators@CStatusBar@@QAEHPBIH@Z  +
lea edi [esi+80h] +
mov ecx edi +
mov [ebp+8] eax +
call sub_1013469  +
push ebx  +
mov ecx edi +
call sub_10195F0  +
add esi 90h +
mov ecx esi +
call sub_10133D9  +
push ebx  +
mov ecx esi +
call sub_10180D3  +
test ebx ebx +
jle loc_101849E  +
mov dword ptr [ebp+0Ch] 1 +
lea ecx [ebp-2Ch] +
call sub_101815D  +
and dword ptr [ebp-4] 0 +
push eax  +
mov ecx edi +
call sub_10184AE  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call sub_10133AF  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_1013D79  +
dec ebx  +
jnz loc_1018470  +
mov eax [ebp+8] +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_1005C53  +
mov ecx esi +
mov edi eax +
call sub_10188CC  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jnb loc_1049543  +
push 1  +
push eax  +
call sub_10184EB  +
mov [esi+8] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1018511  +
mov eax [ebp+arg_4] +
shl eax 5 +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101853F  +
pop edi  +
leave   +
retn 10h  +
***
call sub_1002370  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_101856F  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_101951F  +
dec dword ptr [ebp+0Ch]  +
add dword ptr [ebp+8] 20h +
jmp loc_1018555  +
call sub_1002061  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov ecx [esi] +
call sub_101859A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_100CA8E  +
mov ecx esi +
mov edi eax +
call sub_100CADB  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jb loc_10185CD  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_101882A  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
push 1  +
push eax  +
call sub_10185DF  +
mov [esi+8] eax +
jmp loc_10185C7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_1018605  +
lea eax [edi+esi*8] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1018624  +
add esp 0Ch +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101864D  +
add esp 10h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_101866E  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
fld  qword ptr [ecx] +
dec [ebp+arg_4]  +
fstp  qword ptr [eax] +
add eax 8 +
cmp [ebp+arg_4] 0 +
ja loc_101865B  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
fld  qword ptr [eax] +
push esi  +
push edi  +
fstp  [ebp+var_8] +
mov esi ecx +
call sub_100CADB  +
mov edi [ebp+arg_4] +
mov [ebp+arg_8] eax +
test edi edi +
jz loc_1018735  +
mov ecx esi +
call sub_100CA8E  +
mov ecx 1FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_103DA40  +
add eax edi +
push ebx  +
cmp [ebp+arg_8] eax +
jnb loc_103DA4E  +
mov edx [ebp+arg_8] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp+arg_8] +
jb loc_103DA45  +
add [ebp+arg_8] edx +
cmp [ebp+arg_8] eax +
jb loc_101873B  +
push 0  +
push [ebp+arg_8]  +
call sub_100CAF0  +
push esi  +
mov ebx eax +
mov eax [esi+4] +
push ebx  +
push [ebp+arg_0]  +
push eax  +
call sub_10183B6  +
lea ecx [ebp+var_8] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_10185DF  +
push esi  +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_10183B6  +
mov ecx esi +
call sub_100CA8E  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_1018722  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+arg_8] +
lea eax [ebx+eax*8] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*8] +
mov [esi+8] eax +
mov [esi+4] ebx +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
mov [ebp+arg_8] eax +
jmp loc_10186D7  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push 0  +
call sub_1013B33  +
and dword ptr [ebp-4] 0 +
lea edi [esi+10h] +
push 0  +
mov ecx edi +
call sub_1013B33  +
push dword ptr [ebp+8]  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_1018794  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1018794  +
mov eax esi +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp esi edi +
jz loc_10187B6  +
mov ecx edi +
call sub_100B9A1  +
test eax eax +
jnz loc_10187BE  +
mov ecx esi +
call sub_10133D9  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
push ebx  +
mov ecx edi +
call sub_100B9A1  +
mov ecx esi +
mov ebx eax +
call sub_100B9A1  +
cmp ebx eax +
jbe loc_103DB07  +
mov ecx edi +
call sub_100B9A1  +
mov ecx esi +
mov ebx eax +
call sub_1013D61  +
cmp ebx eax +
jbe loc_103DB2A  +
mov eax [esi+4] +
test eax eax +
jnz loc_103DB58  +
mov ecx edi +
call sub_100B9A1  +
push eax  +
mov ecx esi +
call sub_1013B33  +
test al al +
jz loc_1018822  +
mov eax [esi+4] +
mov ecx [edi+8] +
mov edi [edi+4] +
push esi  +
push eax  +
push ecx  +
push edi  +
call sub_1013CEE  +
mov [esi+8] eax +
pop ebx  +
jmp loc_10187B6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_100CA8E  +
test eax eax +
jz loc_1018865  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 3 +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_1018675  +
mov eax [edi+4] +
lea ecx [eax+esi*8] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
xor esi esi +
jmp loc_1018845  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10188A0  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp esi [ebp+arg_8] +
jz loc_10188BC  +
push esi  +
lea ecx [ebp+arg_C] +
call sub_101857C  +
add esi 8 +
jmp loc_10188A9  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jz loc_10188DC  +
mov eax [ecx+0Ch] +
sub eax edx +
sar eax 5 +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1018912  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_1018934  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
call sub_10181CB  +
add [ebp+arg_8] 8 +
add [ebp+arg_0] 8 +
jmp loc_1018917  +
mov eax [ebp+arg_8] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10022E9  +
test al al +
jnz loc_103D6EF  +
mov eax 1901h +
push eax  +
lea ecx [esi+0B8h] +
call sub_101896A  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+20h] 0 +
jz loc_101899C  +
push edi  +
mov edi [ebp+arg_0] +
push 5  +
push edi  +
lea ecx [esi+1A4h] +
call sub_10189A6  +
push 5  +
add edi 5 +
push edi  +
lea ecx [esi+11Ch] +
call sub_10189A6  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+20h] ebx +
jz loc_1018A47  +
mov eax [ebp+hicon] +
push edi  +
push dword ptr [esi+44h]  +
mov edi ds:ImageList_GetImageCount +
mov [esi+64h] eax +
call edi  +
test eax eax +
jg sub_1049683  +
xor edi edi +
push edi  +
push 5  +
push 21h  +
push dword ptr [esi+60h]  +
lea ebx [esi+40h] +
push dword ptr [esi+5Ch]  +
mov ecx ebx +
call ?Create@CImageList@@QAEHHHIHH@Z  +
push esi  +
lea ecx [ebp+var_14] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
mov eax [ebp+arg_0] +
push edi  +
mov [esi+48h] eax +
call ds:GetModuleHandleW  +
cmp [esi+64h] edi +
mov [ebp+arg_0] eax +
jle loc_1018A3E  +
and [ebp+hicon] 0 +
lea eax [ebp+hicon] +
push eax  +
mov ax [esi+48h] +
push dword ptr [esi+60h]  +
add ax di +
push dword ptr [esi+5Ch]  +
movzx eax ax +
push eax  +
push [ebp+arg_0]  +
call ds:COMCTL32_381  +
push [ebp+hicon]  +
mov ecx ebx +
call sub_1018A52  +
inc edi  +
cmp edi [esi+64h] +
jl loc_1018A0C  +
lea ecx [ebp+var_14] +
call ??1CClientDC@@UAE@XZ  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hicon]  +
push 0FFFFFFFFh  +
push dword ptr [ecx+4]  +
call ds:ImageList_ReplaceIcon  +
pop ebp  +
retn 4  +
***
call sub_10020DC  +
mov eax [ebp+0Ch] +
mov edi [ebp+10h] +
xor esi esi +
push esi  +
push esi  +
mov [ebp-0A4h] eax +
mov eax [ebp+8] +
push esi  +
mov ebx ecx +
push esi  +
mov [ebx+27Ch] eax +
call ?AfxRegisterWndClass@@YGPBGIPAUHICON__@@PAUHBRUSH__@@0@Z  +
push eax  +
lea ecx [ebp-7Ch] +
call ??0CString@@QAE@PBG@Z  +
push esi  +
push dword ptr [ebp+1Ch]  +
mov ecx ebx +
push dword ptr [ebp-0A4h]  +
mov [ebp-4] esi +
push edi  +
push dword ptr [ebp+14h]  +
push esi  +
push dword ptr [ebp-7Ch]  +
call ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-7Ch] +
mov [ebp-70h] eax +
call ??1CString@@QAE@XZ  +
push ebx  +
lea ecx [ebp-0C4h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
mov esi ds:GetDeviceCaps +
push 58h  +
push dword ptr [ebp-0BCh]  +
mov dword ptr [ebp-4] 1 +
call esi  +
mov [ebp-78h] eax +
fild  dword ptr [ebp-78h] +
push 5Ah  +
push dword ptr [ebp-0BCh]  +
fdiv  ds:dbl_10021B0 +
fstp  qword ptr [ebp-0A0h] +
call esi  +
mov [ebp-78h] eax +
fild  dword ptr [ebp-78h] +
fdiv  ds:dbl_10021B0 +
fld  qword ptr [ebp-0A0h] +
fld  st +
fadd st st(1) +
call _ftol2_sse  +
fld  st(1) +
mov esi eax +
mov [ebp-0A8h] esi +
call _ftol2_sse  +
fld  st(1) +
fld  ds:dbl_1013E90 +
mov edi eax +
fmul st(1) st +
mov [ebp-9Ch] edi +
fxch  st(1) +
call _ftol2_sse  +
fld  st(1) +
fmul  ds:dbl_1018F78 +
mov [ebp-0B0h] eax +
call _ftol2_sse  +
fxch  st(2) +
fmul  ds:dbl_1018F70 +
mov [ebp-74h] eax +
call _ftol2_sse  +
fld  ds:dbl_1017EF0 +
fmul st st(1) +
mov [ebp-80h] eax +
call _ftol2_sse  +
fld  st +
fmulp st(2) st +
mov [ebp-7Ch] eax +
fxch  st(1) +
call _ftol2_sse  +
fld  ds:dbl_1018F68 +
mov [ebp-94h] eax +
fmul st st(1) +
call _ftol2_sse  +
fmul  ds:dbl_1010288 +
mov [ebp-78h] eax +
call _ftol2_sse  +
cmp dword ptr [ebp-70h] 0 +
mov [ebp-98h] eax +
jz loc_1018F1B  +
mov ecx [ebx+27Ch] +
mov eax [ecx] +
push 3  +
lea edx [ebp-0ACh] +
push edx  +
call dword ptr [eax+8]  +
mov eax [eax] +
push 0D002h  +
push ebx  +
lea ecx [ebp-90h] +
push ecx  +
push 40000000h  +
push eax  +
lea ecx [ebx+9Ch] +
mov byte ptr [ebp-4] 2 +
call ?Create@CStatic@@QAEHPBGKABUtagRECT@@PAVCWnd@@I@Z  +
lea ecx [ebp-0ACh] +
mov [ebp-70h] eax +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
cmp dword ptr [ebp-70h] 0 +
jz loc_1018F1B  +
test byte ptr [ebp+18h] 1 +
jz loc_1018CCB  +
mov eax [ebp-0B0h] +
mov [ebp-8Ch] eax +
mov eax [ebp-74h] +
add eax esi +
mov [ebp-88h] eax +
mov eax [ebp-80h] +
push 0D003h  +
push ebx  +
mov [ebp-84h] eax +
lea eax [ebp-90h] +
push eax  +
push 50000202h  +
lea ecx [ebx+0DCh] +
push offset word_100219C  +
mov [ebp-90h] esi +
call ?Create@CStatic@@QAEHPBGKABUtagRECT@@PAVCWnd@@I@Z  +
mov ecx [ebp-74h] +
mov [ebp-70h] eax +
mov eax [ebp-94h] +
add eax ecx +
mov ecx [ebp-0A4h] +
add eax esi +
mov [ebp-74h] eax +
test ecx ecx +
jz loc_1018CC1  +
call sub_10181B0  +
test eax eax +
jz loc_1018CC1  +
lea ecx [ebp-6Ch] +
push ecx  +
push 5Ch  +
push dword ptr [eax+4]  +
call ds:GetObjectW  +
lea eax [ebp-6Ch] +
lea esi [ebx+2B0h] +
push eax  +
mov ecx esi +
call sub_1013B10  +
push 1  +
push esi  +
lea ecx [ebx+0DCh] +
call sub_10177DC  +
mov ecx ebx +
call sub_101062D  +
mov esi [ebp-74h] +
cmp dword ptr [ebp-70h] 0 +
jz loc_1018F1B  +
test byte ptr [ebp+18h] 2 +
jz loc_1018D73  +
mov ecx [ebx+27Ch] +
mov eax [ecx] +
push 1  +
lea edx [ebp-94h] +
push edx  +
call dword ptr [eax+8]  +
lea ecx [edi+edi] +
mov [ebp-8Ch] ecx +
mov ecx [ebp-78h] +
mov [ebp-90h] esi +
add esi ecx +
mov ecx [ebp-80h] +
push 0D004h  +
sub ecx edi +
push ebx  +
mov [ebp-84h] ecx +
lea edx [ebp-90h] +
mov [ebp-88h] esi +
mov eax [eax] +
push edx  +
lea ecx [ebx+11Ch] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_1018F85  +
lea ecx [ebp-94h] +
mov [ebp-70h] eax +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
mov eax [ebp-7Ch] +
add esi eax +
lea eax [ebx+2A8h] +
cmp dword ptr [eax] 0 +
mov [ebp-74h] esi +
jnz loc_1018D64  +
lea ecx [ebx+11Ch] +
mov [eax] ecx +
mov esi [ebp-74h] +
lea eax [ebx+11Ch] +
mov [ebx+2ACh] eax +
cmp dword ptr [ebp-70h] 0 +
jz loc_1018F1B  +
test byte ptr [ebp+18h] 8 +
jz loc_1018E7B  +
mov eax [ebp-98h] +
mov [ebp-90h] esi +
add esi eax +
mov eax [ebp-80h] +
push 0D006h  +
mov [ebp-84h] eax +
push ebx  +
lea eax [ebp-90h] +
push eax  +
lea ecx [ebx+22Ch] +
push 50010410h  +
mov [ebp-8Ch] edi +
mov [ebp-88h] esi +
call ?Create@CSliderCtrl@@QAEHKABUtagRECT@@PAVCWnd@@I@Z  +
mov [ebp-70h] eax +
mov eax [ebp-7Ch] +
add esi eax +
mov [ebp-74h] esi +
lea esi [ebx+22Ch] +
push 32h  +
mov ecx esi +
call sub_101029D  +
mov ecx esi +
call sub_1010615  +
lea esi [ebx+280h] +
push esi  +
push offset stru_1018F58  +
push 1  +
push 0  +
push offset rclsid  +
mov [ebx+278h] eax +
call ds:CoCreateInstance  +
test eax eax +
jl loc_1018E5D  +
mov ecx [ebx+27Ch] +
mov eax [ecx] +
push 4  +
lea edx [ebp-98h] +
push edx  +
call dword ptr [eax+8]  +
mov ecx [eax] +
mov eax [esi] +
mov edx [eax] +
push ecx  +
sub esp 10h +
mov edi esp +
mov esi offset dword_10132F4 +
movs   +
movs   +
push 0  +
push 0FFFFFFFCh  +
push dword ptr [ebx+24Ch]  +
movs   +
push eax  +
mov byte ptr [ebp-4] 4 +
movs   +
call dword ptr [edx+1Ch]  +
lea ecx [ebp-98h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
mov edi [ebp-9Ch] +
lea eax [ebx+2A8h] +
cmp dword ptr [eax] 0 +
jz loc_1049595  +
mov esi [ebp-74h] +
lea eax [ebx+22Ch] +
mov [ebx+2ACh] eax +
cmp dword ptr [ebp-70h] 0 +
jz loc_1018F1B  +
test byte ptr [ebp+18h] 4 +
jz loc_1018F1B  +
mov ecx [ebx+27Ch] +
mov eax [ecx] +
push 0  +
lea edx [ebp-9Ch] +
push edx  +
call dword ptr [eax+8]  +
lea ecx [edi+edi] +
mov [ebp-8Ch] ecx +
mov ecx [ebp-78h] +
mov [ebp-90h] esi +
add esi ecx +
mov ecx [ebp-80h] +
sub ecx edi +
push 0D005h  +
mov [ebp-84h] ecx +
push ebx  +
lea ecx [ebp-90h] +
mov [ebp-88h] esi +
mov eax [eax] +
push ecx  +
lea edi [ebx+1A4h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 5 +
call sub_1018F85  +
lea ecx [ebp-9Ch] +
mov [ebp-70h] eax +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
mov eax [ebp-7Ch] +
add esi eax +
lea eax [ebx+2A8h] +
cmp dword ptr [eax] 0 +
mov [ebp-74h] esi +
jz loc_10495A2  +
mov esi [ebp-74h] +
mov [ebx+2ACh] edi +
push 2  +
push dword ptr [ebp-80h]  +
xor eax eax +
push esi  +
push eax  +
push eax  +
push eax  +
mov ecx ebx +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0C4h] +
call ??1CClientDC@@UAE@XZ  +
mov eax [ebp-70h] +
call sub_1002119  +
retn 18h  +
***
call sub_100208C  +
mov esi ecx +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 50010000h  +
push dword ptr [ebp+8]  +
call ?Create@CButton@@QAEHPBGKABUtagRECT@@PAVCWnd@@I@Z  +
push dword ptr [ebp+0Ch]  +
mov ebx eax +
lea eax [esi+4Ch] +
push eax  +
call ds:CopyRect  +
push esi  +
lea ecx [ebp-28h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
mov edi ds:GetDeviceCaps +
and dword ptr [ebp-4] 0 +
push 58h  +
push dword ptr [ebp-20h]  +
call edi  +
mov [ebp+0Ch] eax +
fild  dword ptr [ebp+0Ch] +
push 5Ah  +
push dword ptr [ebp-20h]  +
fdiv  ds:dbl_10021B0 +
fstp  qword ptr [ebp-14h] +
call edi  +
mov [ebp+0Ch] eax +
fild  dword ptr [ebp+0Ch] +
fdiv  ds:dbl_10021B0 +
fld  qword ptr [ebp-14h] +
fld  ds:dbl_1017EE8 +
fmul st(1) st +
fxch  st(1) +
call _ftol2_sse  +
fld  st(1) +
fmulp st(1) st +
mov [esi+5Ch] eax +
call _ftol2_sse  +
fld  qword ptr [ebp-14h] +
fld  ds:dbl_100CAA8 +
mov [esi+60h] eax +
fmul st(1) st +
fxch  st(1) +
call _ftol2_sse  +
fmulp st(1) st +
mov [esi+7Ch] eax +
call _ftol2_sse  +
push 0Fh  +
mov [esi+80h] eax +
call ds:GetSysColor  +
push eax  +
mov ecx esi +
call sub_1019062  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ??1CClientDC@@UAE@XZ  +
mov eax ebx +
call sub_1002061  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+70h] +
mov ecx edi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
add esi 68h +
mov ecx esi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A0C1  +
push [ebp+arg_0]  +
mov ecx edi +
push 1  +
push 0  +
call sub_1013581  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+40h] +
test eax eax +
jz loc_10190B6  +
push esi  +
push eax  +
call sub_1019149  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
cmp dword ptr [esi+20h] 0 +
mov ebx eax +
jz loc_10190F7  +
test ebx ebx +
jnz loc_10190F7  +
push edi  +
push offset aMicrosofttable  +
call ds:GlobalAddAtomW  +
movzx edi ax +
test di di +
jz loc_10190F6  +
movzx eax di +
push 10000h  +
push eax  +
push dword ptr [esi+20h]  +
call ds:SetPropW  +
push edi  +
call ds:GlobalDeleteAtom  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
mov [ecx+48h] edx +
mov [eax] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1019190  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+39h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_10191C3  +
cmp eax ebx +
jz loc_10191A3  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_10191AC  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_10191B5  +
mov [ecx] ebx +
mov [eax+39h] bl +
mov byte ptr [eax+38h] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_10401A5  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 3Ch +
jb loc_10401AC  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CWnd@@QAE@XZ  +
xor edi edi +
lea ecx [esi+90h] +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_1002A2C +
call sub_1019164  +
push edi  +
lea ecx [esi+9Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1019283  +
fld1   +
or dword ptr [esi+60h] 0FFFFFFFFh +
fstp  qword ptr [esi+50h] +
or dword ptr [esi+64h] 0FFFFFFFFh +
xor eax eax +
mov [esi+44h] edi +
mov [esi+48h] edi +
mov [esi+58h] edi +
mov [esi+5Ch] edi +
mov dword_108A24C esi +
mov [esi+68h] ax +
mov [esi+7Ch] ax +
mov eax [ebp+8] +
mov [esi+40h] eax +
mov [esi+70h] edi +
mov [esi+6Ch] edi +
or dword ptr [eax+48h] 0FFFFFFFFh +
mov [esi+74h] edi +
mov [esi+78h] edi +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_104095B  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov eax [ebp+8] +
mov edi [eax+4] +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
push 0B0h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
xor ebx ebx +
mov [ebp-4] ebx +
cmp ecx ebx +
jz loc_10192F1  +
push edi  +
call sub_10191F9  +
mov ebx eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test ebx ebx +
jz loc_1042801  +
cmp dword_108B1CC 0 +
jnz loc_1042812  +
push 0  +
push esi  +
lea eax [ebp-1Ch] +
push eax  +
push 50000000h  +
mov ecx ebx +
call sub_1017FD8  +
test eax eax +
jz loc_101938F  +
mov eax [esi+48h] +
xor edi edi +
cmp eax edi +
jnz loc_104284F  +
mov eax [esi+4Ch] +
mov [esi+48h] ebx +
cmp eax edi +
jnz loc_104287A  +
mov ecx [esi+58h] +
cmp ecx edi +
jz loc_1019354  +
mov eax [esi+5Ch] +
cmp eax edi +
jz loc_1019354  +
push eax  +
push ecx  +
mov ecx [esi+48h] +
call sub_1019398  +
fld1   +
push 1  +
push ecx  +
push ecx  +
mov ecx [esi+48h] +
fstp  [esp+10h+var_10] +
call sub_1010425  +
mov ecx [esi+48h] +
push edi  +
push edi  +
call sub_1010728  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov ecx [esi+48h] +
mov eax [eax+4] +
push dword ptr [ecx+20h]  +
mov ecx eax +
call near ptr dword_1013384+2  +
xor eax eax +
inc eax  +
call sub_1002061  +
retn 4  +
xor eax eax +
jmp loc_1019387  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+74h] eax +
mov eax [ebp+arg_4] +
mov [ecx+78h] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
push 0E801h  +
push 50008200h  +
push [ebp+arg_0]  +
mov esi ecx +
call ?Create@CStatusBar@@QAEHPAVCWnd@@KI@Z  +
push esi  +
lea ecx [ebp+var_14] +
mov edi eax +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
push 5Ah  +
push [ebp+var_C]  +
call ds:GetDeviceCaps  +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fdiv  ds:dbl_10021B0 +
fmul  ds:dbl_1019418 +
call _ftol2_sse  +
push eax  +
mov ecx esi +
call sub_1019425  +
lea ecx [ebp+var_14] +
call ??1CClientDC@@UAE@XZ  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 408h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
mov eax [ebx+84h] +
shl edi 5 +
lea esi [eax+edi] +
mov ecx esi +
call sub_100B9A1  +
test eax eax +
jbe loc_10194BC  +
lea ecx [esi+10h] +
call sub_100B9A1  +
mov ecx [ebp+var_8] +
cmp eax ecx +
ja loc_1049417  +
lea eax [ebp+Rect] +
push eax  +
mov eax [esi+4] +
mov eax [eax+ecx*4] +
push dword ptr [eax+20h]  +
call ds:GetWindowRect  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
add [ebp+var_4] eax +
mov eax [ebx+84h] +
inc [ebp+var_8]  +
lea esi [eax+edi] +
mov ecx esi +
call sub_100B9A1  +
cmp [ebp+var_8] eax +
jb loc_1019475  +
mov eax [ebx+84h] +
lea esi [eax+edi] +
lea ecx [esi+10h] +
call sub_100B9A1  +
mov ecx esi +
mov edi eax +
call sub_100B9A1  +
cmp edi eax +
ja loc_1049425  +
mov esi [ebp+var_4] +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call ?GetPaneInfo@CStatusBar@@QBEXHAAI0AAH@Z  +
push esi  +
push [ebp+var_C]  +
mov ecx ebx +
push [ebp+var_10]  +
push [ebp+arg_0]  +
call ?SetPaneInfo@CStatusBar@@QAEXHIIH@Z  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_100208C  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1019544  +
push dword ptr [ebp+0Ch]  +
call sub_1019551  +
call sub_1002061  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
xor ebx ebx +
push ebx  +
call sub_1013B33  +
lea edi [esi+10h] +
push ebx  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1013B33  +
mov ebx [ebp+8] +
push ebx  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_1018794  +
add ebx 10h +
push ebx  +
mov ecx edi +
call sub_1018794  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax ecx +
mov ecx [ebp+arg_0] +
shl ecx 5 +
add ecx [eax+84h] +
call sub_10195C5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1018794  +
add edi 10h +
push edi  +
lea ecx [esi+10h] +
call sub_1018794  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002370  +
mov esi ecx +
mov ebx [ebp+8] +
cmp ebx 7FFFFFFh +
ja loc_1049513  +
call sub_10188CC  +
cmp eax ebx +
jnb loc_1019660  +
push 0  +
push ebx  +
call sub_100B693  +
mov ecx [esi+4] +
and dword ptr [ebp-4] 0 +
push esi  +
mov [ebp+8] eax +
push dword ptr [ebp+8]  +
mov eax [esi+8] +
push eax  +
push ecx  +
call sub_101966D  +
mov ecx esi +
call sub_1005C53  +
mov edi eax +
mov eax [esi+4] +
test eax eax +
jnz loc_1049518  +
mov eax [ebp+8] +
shl ebx 5 +
add ebx eax +
shl edi 5 +
add edi eax +
mov [esi+0Ch] ebx +
mov [esi+8] edi +
mov [esi+4] eax +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101969B  +
pop edi  +
leave   +
retn 10h  +
***
call sub_1002370  +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
mov eax [ebp+8] +
cmp eax [ebp+0Ch] +
jnz loc_10494C5  +
mov eax [ebp+10h] +
call sub_1002061  +
retn 18h  +
***
mov edi edi +
push esi  +
push 0  +
push 0Bh  +
push 0  +
mov esi ecx +
call ?ModifyStyle@CWnd@@QAEHKKI@Z  +
mov ecx esi +
pop esi  +
jmp ?PreSubclassWindow@CWnd@@UAEXXZ  +
***
push 4  +
mov eax offset loc_107A178 +
call sub_100208C  +
push 558h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_101973B  +
call sub_1019746  +
call sub_1002061  +
retn   +
***
call sub_10020DC  +
mov esi ecx +
mov [ebp-210h] esi +
call ??0CFrameWnd@@QAE@XZ  +
lea edi [esi+0C0h] +
mov dword ptr [edi] offset off_10198B8 +
xor ebx ebx +
lea ecx [esi+0E0h] +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_1002B44 +
mov dword ptr [edi] offset off_100574C +
call sub_101C719  +
push edi  +
lea ecx [esi+478h] +
mov byte ptr [ebp-4] 1 +
call sub_101DA6F  +
push edi  +
lea ecx [esi+500h] +
mov byte ptr [ebp-4] 2 +
call sub_101D80D  +
push edi  +
lea ecx [esi+51Ch] +
mov byte ptr [ebp-4] 3 +
call sub_101BB9E  +
push edi  +
lea ecx [esi+530h] +
mov byte ptr [ebp-4] 4 +
call sub_101D715  +
mov [esi+53Ch] ebx +
push edi  +
lea ecx [esi+548h] +
mov byte ptr [ebp-4] 5 +
mov [esi+540h] ebx +
call sub_101D795  +
mov [esi+550h] ebx +
mov ebx 1F8h +
push ebx  +
lea eax [ebp-208h] +
push 0  +
push eax  +
mov byte ptr [ebp-4] 6 +
call memset  +
add esp 0Ch +
push 0  +
lea eax [ebp-208h] +
push eax  +
push ebx  +
push 29h  +
mov [ebp-208h] ebx +
call ds:SystemParametersInfoW  +
mov eax [ebp-204h] +
lea ecx [eax+eax+0Ch] +
mov [esi+0D4h] ecx +
mov ecx [ebp-1F4h] +
lea eax [ecx+eax*2+6] +
push 18h  +
mov [esi+0D8h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-20Ch] eax +
mov byte ptr [ebp-4] 7 +
test eax eax +
jz loc_10198A9  +
mov ecx eax +
call sub_10198D5  +
and dword ptr [esi+4FCh] 0 +
push 28h  +
mov byte ptr [ebp-4] 6 +
mov [esi+4F8h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10198AD  +
push 0  +
mov ecx eax +
call sub_101ACB8  +
push eax  +
lea ebx [esi+550h] +
push ebx  +
call sub_101403C  +
mov ecx [ebx] +
push edi  +
call sub_101A579  +
mov dword ptr [esi+544h] 259h +
mov eax esi +
call sub_1002119  +
retn   +
xor eax eax +
jmp loc_101985C  +
xor eax eax +
jmp loc_1019882  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
xor ebx ebx +
lea edi [esi+4] +
mov dword ptr [esi] offset off_1006EEC +
mov [ebp-4] ebx +
mov [edi] ebx +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov [esi+10h] ebx +
push 0Ch  +
mov byte ptr [ebp-4] 4 +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax ebx +
jz loc_1019948  +
mov dword ptr [eax] offset off_101293C +
mov [eax+4] ebx +
mov [eax+8] ebx +
push eax  +
push edi  +
call sub_101403C  +
mov ecx [edi] +
cmp ecx ebx +
jz loc_101993D  +
lea eax [esi+0Ch] +
push eax  +
lea eax [esi+8] +
push eax  +
call sub_1019951  +
test eax eax +
jnz loc_1043B7B  +
mov [esi+14h] ebx +
mov eax esi +
call sub_1002061  +
retn   +
xor eax eax +
jmp loc_101991B  +
***
call sub_100208C  +
mov edi ecx +
xor esi esi +
mov [ebp-10h] esi +
lea eax [ebp-10h] +
push eax  +
push offset stru_101B828  +
push 4017h  +
push esi  +
push offset stru_101B848  +
mov [ebp-4] esi +
call ds:CoCreateInstance  +
mov ebx eax +
cmp ebx esi +
jl loc_1043B55  +
lea eax [edi+8] +
push eax  +
push dword ptr [ebp-10h]  +
call sub_101B1E7  +
mov ebx eax +
cmp ebx esi +
mov eax [ebp-10h] +
jl loc_10199F0  +
push dword ptr [ebp+8]  +
mov ecx [eax] +
push edi  +
push offset loc_1019ED0  +
push esi  +
push esi  +
push eax  +
call dword ptr [ecx+24h]  +
mov ebx eax +
cmp ebx esi +
mov eax [ebp-10h] +
jl loc_10199F0  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push edi  +
push offset loc_1019A04  +
push esi  +
push esi  +
push eax  +
call dword ptr [ecx+24h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov edi eax +
cmp edi esi +
mov eax [ebp-10h] +
jl loc_1043B6A  +
cmp eax esi +
jz loc_10199E6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
call sub_1002061  +
retn 8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax esi +
jz loc_1043B63  +
jmp loc_1043B5D  +
***
or dword ptr [esi+3Eh] 14h +
xchg eax edi +
rcl byte ptr fs:[ecx] cl +
mov ds:4FC00031h al +
mov ds:0A2D0918h eax +
scas   +
jnz near ptr loc_1019A19+3  +
fcomp  qword ptr [edi+683884Ch] +
xchg eax esi +
pusha   +
sar byte ptr [esi-6F6F6F4Ah] 1 +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 5A3Dh +
mov eax 80004005h +
jz loc_10410DF  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFE0h +
call ?InternalQueryInterface@CCmdTarget@@QAEKPBXPAPAX@Z  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+10h] +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+14h] +
and dword ptr [edi] 0 +
mov eax [esi+0Ch] +
mov ecx [esi+14h] +
mov edx [ecx] +
push eax  +
push edi  +
push ebx  +
push dword ptr [ebp+0Ch]  +
call dword ptr [edx+14h]  +
test eax eax +
jge loc_1019AAE  +
cmp ebx 5 +
jz loc_1019AB5  +
cmp ebx 6 +
jz loc_1019AB5  +
cmp ebx 0Ch +
jz loc_1019AB5  +
mov esi [esi+4] +
mov eax [esi] +
push edi  +
push (offset loc_1019A11+3)  +
push esi  +
call dword ptr [eax]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov esi [esi+8] +
jmp loc_1019AA3  +
***
cmp ecx 2 +
jz loc_10416C6  +
cmp ecx 3 +
jnz loc_1019AD1  +
and dword ptr [eax+0D0h] 0FFFFFFEFh +
jmp loc_1019B0A  +
cmp ecx 4 +
jz loc_10416D4  +
jmp loc_1019B0A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor edx edx +
mov eax ecx +
mov ecx [ebp+arg_0] +
inc edx  +
shl edx cl +
or [eax+0D0h] edx +
mov edx [eax+0D0h] +
cmp ecx 1 +
jnz loc_1019ABA  +
and edx 0FFFFFFFBh +
mov [eax+0D0h] edx +
mov ecx [eax+0C8h] +
push dword ptr [eax+0D0h]  +
mov edx [ecx] +
push ecx  +
call dword ptr [edx+2Ch]  +
pop ebp  +
retn 4  +
***
retn   +
***
sub eax 375AE0Ah +
fcomp  qword ptr [edi+683884Ch] +
xchg eax esi +
pusha   +
sar byte ptr [esi-6F6F6F4Ah] 1 +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call ?OnCreate@CFrameWnd@@IAEHPAUtagCREATESTRUCTW@@@Z  +
cmp eax 0FFFFFFFFh +
jz loc_1041121  +
mov ecx esi +
call sub_101AA9A  +
lea eax [esi+0E0h] +
mov ecx esi +
mov dword_108A1EC eax +
call sub_1019B9F  +
xor ecx ecx +
test eax eax +
setnl cl  +
dec ecx  +
mov eax ecx +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
push 38h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_1019CB2  +
mov ecx eax +
call sub_101A9C4  +
mov [ebp-10h] eax +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test ecx ecx +
jz loc_1019CC5  +
mov eax esi +
neg eax  +
lea edx [esi+0C0h] +
sbb eax eax +
and eax edx +
push eax  +
mov ebx offset unk_108B024 +
push ebx  +
call sub_101B465  +
mov edi eax +
test edi edi +
jl loc_1019CBB  +
mov eax [ebp-10h] +
add eax 20h +
push eax  +
lea edi [esi+53Ch] +
push edi  +
call sub_101403C  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-4] 1 +
call sub_1006A9A  +
mov edi [edi] +
mov eax [ebp-10h] +
mov ecx [eax] +
push edi  +
push dword ptr [esi+20h]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jl loc_1019C99  +
mov eax [ebp-10h] +
mov ecx [eax] +
push offset aMspaint_ribbon  +
push dword_108AFCC  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jl loc_1019C99  +
mov esi offset unk_108AF60 +
push 1  +
mov ecx esi +
call sub_1019AE1  +
xor eax eax +
cmp dword_108B190 eax +
mov ecx esi +
setnz al  +
add eax 3 +
push eax  +
call sub_1019AE1  +
mov eax [ebp-10h] +
push offset dword_1005BFC  +
push 4  +
push 54C5h  +
mov byte_108B114 1 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1019CAA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_1002061  +
retn   +
and dword ptr [ebp-10h] 0 +
jmp loc_1019BCE  +
mov ecx [ebp-10h] +
call ?ExternalRelease@CCmdTarget@@QAEKXZ  +
jmp loc_1019CAA  +
mov edi 8007000Eh +
jmp loc_1019CAA  +
***
retn   +
***
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_101B2A7  +
mov esi [ebp-10h] +
mov ebx eax +
test ebx ebx +
jl loc_1019D5F  +
test esi esi +
jz loc_1019D5F  +
mov edx [esi] +
xor ecx ecx +
lea ebx [ebp-18h] +
push ebx  +
push ecx  +
push ecx  +
xor eax eax +
push eax  +
push esi  +
call dword ptr [edx+14h]  +
mov eax [ebp+8] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+10h]  +
mov ebx eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1019D6D  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax ebx +
call sub_1002061  +
retn 8  +
***
mov eax 80004001h +
retn 8  +
***
mov eax [esi] +
lea ecx [ebp-128h] +
push ecx  +
lea ecx [ebp-6Ch] +
push ecx  +
push 0  +
push dword ptr [ebx+28h]  +
mov ecx esi +
call dword ptr [eax+14h]  +
push dword ptr [ebp-0D4h]  +
push eax  +
jmp loc_1006D06  +
***
call sub_100208C  +
mov edi ecx +
push 6A8h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1019E1F  +
call sub_1013B6A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1040D9B  +
mov ecx esi +
call sub_1019E28  +
call sub_10049D9  +
test eax eax +
jnz loc_1040DA2  +
mov eax [edi+0F8h] +
mov [edi+0F0h] esi +
and dword ptr [esi+2Ch] 0 +
mov ecx offset unk_108B4B8 +
mov [esi+28h] eax +
call sub_1011CCE  +
xor eax eax +
inc eax  +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_1019DD9  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+0Ch] +
push edi  +
lea ebx [esi+8] +
push ebx  +
call sub_1019E6D  +
mov eax dword_108B24C +
test eax eax +
jnz loc_10370AC  +
cmp dword_108B190 0 +
jnz loc_103DB86  +
lea ecx [esi+10h] +
call sub_102E9B9  +
xor eax eax +
inc eax  +
pop edi  +
mov [esi+2Ch] eax +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ds:GetSystemMetrics +
push edi  +
push 0  +
call esi  +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
fmul  ds:dbl_1019EC8 +
call _ftol2_sse  +
mov edi [ebp+arg_0] +
push 1  +
mov [edi] eax +
call esi  +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fmul  ds:dbl_1019EC8 +
call _ftol2_sse  +
mov ebx [ebp+arg_4] +
push 49h  +
mov [ebx] eax +
call esi  +
test al 2 +
jnz loc_103DB75  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
fidivr  word ptr [edx+64B6A28Bh] +
rcl byte ptr [ecx] cl +
mov ds:4FC00031h al +
mov eax [eax] +
jmp loc_100C632  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
jmp loc_100C667  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 280h +
mov eax 0E103h +
mov [ebp-264h] eax +
mov [ebp-25Ch] eax +
mov eax 0C3C9h +
mov [ebp-24Ch] eax +
mov [ebp-244h] eax +
add eax 0FFFFFFC7h +
push ebx  +
push esi  +
mov [ebp-1F4h] eax +
mov [ebp-1ECh] eax +
mov eax 4E3Ch +
push edi  +
mov edi 52DEh +
mov [ebp-1C8h] eax +
mov [ebp-1C4h] eax +
add eax 4 +
lea esi [edi+1] +
mov dword ptr [ebp-278h] 4E22h +
mov dword ptr [ebp-274h] 0E100h +
mov dword ptr [ebp-270h] 4E23h +
mov dword ptr [ebp-26Ch] 0E101h +
mov dword ptr [ebp-268h] 4E24h +
mov dword ptr [ebp-260h] 4E3Dh +
mov dword ptr [ebp-258h] 4E26h +
mov dword ptr [ebp-254h] 0E104h +
mov dword ptr [ebp-250h] 4E3Fh +
mov dword ptr [ebp-248h] 4E28h +
mov dword ptr [ebp-240h] 4E29h +
mov dword ptr [ebp-23Ch] 0C3CAh +
mov dword ptr [ebp-238h] 4E2Ah +
mov dword ptr [ebp-234h] 0C3CBh +
mov dword ptr [ebp-230h] 4E2Bh +
mov dword ptr [ebp-22Ch] 0C3CCh +
mov dword ptr [ebp-228h] 4E2Ch +
mov dword ptr [ebp-224h] 0C3CDh +
mov dword ptr [ebp-220h] 4E2Eh +
mov dword ptr [ebp-21Ch] 0E107h +
mov dword ptr [ebp-218h] 4E30h +
mov dword ptr [ebp-214h] 0E105h +
mov dword ptr [ebp-210h] 4E31h +
mov dword ptr [ebp-20Ch] 0E109h +
mov dword ptr [ebp-208h] 4E32h +
mov dword ptr [ebp-204h] 0C35Ch +
mov dword ptr [ebp-200h] 4E33h +
mov dword ptr [ebp-1FCh] 0C358h +
mov dword ptr [ebp-1F8h] 4E35h +
mov dword ptr [ebp-1F0h] 4E39h +
mov dword ptr [ebp-1E8h] 4E37h +
mov dword ptr [ebp-1E4h] 0C381h +
mov dword ptr [ebp-1E0h] 4E38h +
mov dword ptr [ebp-1DCh] 0C380h +
mov dword ptr [ebp-1D8h] 4E3Ah +
mov dword ptr [ebp-1D4h] 0C364h +
mov dword ptr [ebp-1D0h] 4E3Bh +
mov dword ptr [ebp-1CCh] 0E140h +
mov [ebp-1C0h] eax +
mov [ebp-1BCh] eax +
mov dword ptr [ebp-1B8h] 5271h +
mov dword ptr [ebp-1B4h] 0E122h +
mov dword ptr [ebp-1B0h] 5270h +
mov dword ptr [ebp-1ACh] 0E123h +
mov dword ptr [ebp-1A8h] 526Eh +
mov dword ptr [ebp-1A4h] 0E125h +
mov dword ptr [ebp-1A0h] 526Fh +
mov dword ptr [ebp-19Ch] 0C35Ah +
mov dword ptr [ebp-198h] 52D5h +
mov dword ptr [ebp-194h] 0E12Ah +
mov dword ptr [ebp-190h] 52D7h +
mov dword ptr [ebp-18Ch] 0E120h +
mov dword ptr [ebp-188h] 52DBh +
mov dword ptr [ebp-184h] 0C392h +
mov dword ptr [ebp-180h] 52D6h +
mov dword ptr [ebp-17Ch] 0C393h +
mov dword ptr [ebp-178h] 52DCh +
mov dword ptr [ebp-174h] 0C362h +
mov dword ptr [ebp-170h] 52D8h +
mov dword ptr [ebp-16Ch] 242Ah +
mov [ebp-168h] edi +
mov dword ptr [ebp-164h] 2425h +
mov [ebp-160h] esi +
lea ebx [edi-0Ch] +
mov [ebp-140h] ebx +
mov [ebp-13Ch] ebx +
mov ebx 5E8Bh +
mov [ebp-90h] ebx +
mov [ebp-8Ch] ebx +
inc ebx  +
lea edx [edi+2] +
mov [ebp-88h] ebx +
mov [ebp-84h] ebx +
mov ebx 5F51h +
lea ecx [edi+3] +
lea eax [edi+4] +
mov dword ptr [ebp-15Ch] 2426h +
mov [ebp-158h] edx +
mov dword ptr [ebp-154h] 2427h +
mov [ebp-150h] ecx +
mov dword ptr [ebp-14Ch] 2428h +
mov [ebp-148h] eax +
mov dword ptr [ebp-144h] 2429h +
mov dword ptr [ebp-138h] 52D3h +
mov dword ptr [ebp-134h] 259h +
mov dword ptr [ebp-130h] 52D4h +
mov dword ptr [ebp-12Ch] 25Ah +
mov dword ptr [ebp-128h] 5335h +
mov dword ptr [ebp-124h] 260h +
mov dword ptr [ebp-120h] 5336h +
mov dword ptr [ebp-11Ch] 25Ch +
mov dword ptr [ebp-118h] 5337h +
mov dword ptr [ebp-114h] 25Bh +
mov dword ptr [ebp-110h] 5338h +
mov dword ptr [ebp-10Ch] 25Fh +
mov dword ptr [ebp-108h] 5339h +
mov dword ptr [ebp-104h] 25Eh +
mov dword ptr [ebp-100h] 533Ah +
mov dword ptr [ebp-0FCh] 25Dh +
mov dword ptr [ebp-0F8h] 54C6h +
mov dword ptr [ebp-0F4h] 242Dh +
mov dword ptr [ebp-0F0h] 54C7h +
mov dword ptr [ebp-0ECh] 242Eh +
mov dword ptr [ebp-0E8h] 54C8h +
mov dword ptr [ebp-0E4h] 1AD5h +
mov dword ptr [ebp-0E0h] 5720h +
mov dword ptr [ebp-0DCh] 0C35Dh +
mov dword ptr [ebp-0D8h] 571Fh +
mov dword ptr [ebp-0D4h] 0C35Eh +
mov dword ptr [ebp-0D0h] 56B9h +
mov dword ptr [ebp-0CCh] 0C39Fh +
mov dword ptr [ebp-0C8h] 56BAh +
mov dword ptr [ebp-0C4h] 0C35Fh +
mov dword ptr [ebp-0C0h] 56BBh +
mov dword ptr [ebp-0BCh] 0E801h +
mov dword ptr [ebp-0B8h] 5655h +
mov dword ptr [ebp-0B4h] 0C39Ch +
mov dword ptr [ebp-0B0h] 5656h +
mov dword ptr [ebp-0ACh] 0C39Bh +
mov dword ptr [ebp-0A8h] 5657h +
mov dword ptr [ebp-0A4h] 0C397h +
mov dword ptr [ebp-0A0h] 5AA1h +
mov dword ptr [ebp-9Ch] 242Bh +
mov dword ptr [ebp-98h] 5AA2h +
mov dword ptr [ebp-94h] 242Ch +
mov dword ptr [ebp-80h] 5EEDh +
mov dword ptr [ebp-7Ch] 0E302h +
mov dword ptr [ebp-78h] 5EEEh +
mov dword ptr [ebp-74h] 0E303h +
mov [ebp-70h] ebx +
mov [ebp-6Ch] ebx +
mov dword ptr [ebp-68h] 5E89h +
mov dword ptr [ebp-64h] 0E305h +
mov dword ptr [ebp-60h] 5E8Ah +
mov dword ptr [ebp-5Ch] 0E306h +
mov dword ptr [ebp-58h] 7919h +
mov dword ptr [ebp-54h] 0E12Bh +
mov dword ptr [ebp-50h] 791Ah +
mov dword ptr [ebp-4Ch] 0E12Ch +
mov [ebp-48h] esi +
mov [ebp-44h] esi +
mov [ebp-40h] edi +
mov [ebp-3Ch] edi +
mov [ebp-38h] edx +
mov [ebp-34h] edx +
mov [ebp-30h] eax +
mov [ebp-2Ch] eax +
mov [ebp-28h] ecx +
mov [ebp-24h] ecx +
mov dword ptr [ebp-20h] 7D0Ch +
mov dword ptr [ebp-1Ch] 0C363h +
mov dword ptr [ebp-18h] 7D16h +
mov dword ptr [ebp-14h] 0E120h +
mov dword ptr [ebp-10h] 80E8h +
mov dword ptr [ebp-0Ch] 0E146h +
xor esi esi +
mov eax [ebp+esi*8-278h] +
mov cx [ebp+esi*8-274h] +
mov [ebp-8] eax +
lea eax [ebp-8] +
push eax  +
lea eax [ebp-280h] +
mov [ebp-4] cx +
mov ecx [ebp+8] +
push eax  +
call sub_100C5FA  +
inc esi  +
cmp esi 4Eh +
jl loc_101A476  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+8] +
lea eax [esi+8] +
cmp [eax] ecx +
jz loc_101A4CC  +
push ecx  +
push eax  +
call sub_101403C  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_101A4F7  +
add esi 0FFFFFF3Ch +
push 1  +
mov ecx esi +
call sub_1019AE1  +
xor eax eax +
cmp dword_108B190 eax +
mov ecx esi +
setnz al  +
add eax 3 +
push eax  +
call sub_1019AE1  +
pop esi  +
pop ebp  +
retn 4  +
***
cmp dword_108B1AC 0 +
jnz locret_101A50F  +
call ?Default@CWnd@@IAEJXZ  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+10h] +
test ebx ebx +
jz loc_1043ABE  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1012B68 +
xor eax eax +
cmps   +
jz loc_1043AC8  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_101A564 +
xor eax eax +
cmps   +
jz loc_1043AC8  +
and [ebx] eax +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+24h] eax +
pop ebp  +
retn 4  +
***
mov eax [ebp+14h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push offset dword_10130D0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_10130BA  +
mov ecx [edi+10h] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov ecx [edi+10h] +
mov eax [ecx] +
lea edx [ebp+14h] +
push edx  +
call dword ptr [eax+8]  +
mov esi eax +
test esi esi +
jl loc_10130BA  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+8]  +
call sub_1019D15  +
jmp loc_1011D37  +
***
push 10h  +
mov eax offset loc_107AA75 +
call sub_100208C  +
mov edi ecx +
push 2Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
xor esi esi +
mov [ebp-4] esi +
cmp eax esi +
jz loc_101A7FB  +
mov ecx eax +
call sub_101A827  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx 53FDh +
mov [eax+28h] ecx +
mov [eax] esi +
lea ebx [edi+470h] +
mov [eax+24h] ebx +
mov [ebp-10h] eax +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
mov [ebp-14h] ecx +
mov ecx [ebp+8] +
push eax  +
call sub_100C5FA  +
push 2Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 1 +
cmp eax esi +
jz loc_101A802  +
mov ecx eax +
call sub_101A827  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [eax] esi +
mov ecx 53FEh +
mov [eax+28h] ecx +
lea esi [edi+488h] +
mov [eax+24h] esi +
mov [ebp-10h] eax +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
mov [ebp-14h] ecx +
mov ecx [ebp+8] +
push eax  +
call sub_100C5FA  +
push 2Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 2 +
test eax eax +
jz loc_101A809  +
mov ecx eax +
call sub_101A827  +
and dword ptr [eax] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx 53FFh +
mov [eax+28h] ecx +
mov [eax+24h] esi +
mov esi [ebp+8] +
mov [ebp-10h] eax +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
mov [ebp-14h] ecx +
push eax  +
mov ecx esi +
call sub_100C5FA  +
push 2Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 3 +
test eax eax +
jz loc_101A810  +
mov ecx eax +
call sub_101A827  +
and dword ptr [eax] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx 5399h +
mov [eax+28h] ecx +
mov [eax+24h] ebx +
mov [ebp-10h] eax +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
mov [ebp-14h] ecx +
push eax  +
mov ecx esi +
call sub_100C5FA  +
push 2Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 4 +
test eax eax +
jz loc_101A817  +
mov ecx eax +
call sub_101A827  +
and dword ptr [eax] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [edi+45Ch] +
mov [eax+24h] ecx +
mov ecx 5461h +
mov [eax+28h] ecx +
mov [ebp-10h] eax +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
mov [ebp-14h] ecx +
push eax  +
mov ecx esi +
call sub_100C5FA  +
push 2Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 5 +
test eax eax +
jz loc_101A81E  +
mov ecx eax +
call sub_101A827  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx 54C5h +
mov [eax+28h] ecx +
mov dword ptr [eax] 2 +
add edi 440h +
mov [eax+24h] edi +
mov [ebp-10h] eax +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
mov [ebp-14h] ecx +
push eax  +
mov ecx esi +
call sub_100C5FA  +
xor eax eax +
call sub_1002061  +
retn 4  +
***
xor eax eax +
jmp loc_101A648  +
***
xor eax eax +
jmp loc_101A696  +
***
xor eax eax +
jmp loc_101A6E4  +
***
xor eax eax +
jmp loc_101A72F  +
***
xor eax eax +
jmp loc_101A777  +
***
xor eax eax +
jmp loc_101A7C1  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+4] +
push 0  +
call sub_100CB64  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [esi+14h] +
call sub_100CB90  +
mov eax esi +
call sub_1002061  +
retn   +
***
mov edi ds:GetClientRect +
lea eax [ebp-20h] +
push eax  +
push dword ptr [esi+20h]  +
call edi  +
mov eax [ebp-1Ch] +
add eax 13h +
mov ebx 0A0h +
push ebx  +
mov [ebp-14h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_101A987  +
push 0  +
mov ecx eax +
call sub_101AFAC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0C39Dh  +
push esi  +
lea ecx [ebp-20h] +
push ecx  +
mov ecx eax +
mov [esi+58h] eax +
call sub_101A99E  +
test eax eax +
jz loc_101A97D  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [esi+20h]  +
call edi  +
mov eax [ebp-20h] +
add eax 13h +
push ebx  +
mov [ebp-18h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
xor edi edi +
inc edi  +
mov [ebp-4] edi +
test eax eax +
jz loc_101A98E  +
push edi  +
mov ecx eax +
call sub_101AFAC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0C39Eh  +
push esi  +
lea ecx [ebp-20h] +
push ecx  +
mov ecx eax +
mov [esi+5Ch] eax +
call sub_101A99E  +
test eax eax +
jz loc_101A97D  +
and dword ptr [ebp-30h] 0 +
and dword ptr [ebp-2Ch] 0 +
push 13h  +
pop eax  +
push 40h  +
mov [ebp-28h] eax +
mov [ebp-24h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 2 +
test eax eax +
jz loc_101A995  +
mov ecx eax +
call sub_101AD67  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push edi  +
push esi  +
lea ecx [ebp-30h] +
push ecx  +
mov ecx eax +
mov [esi+60h] eax +
call sub_101A99E  +
test eax eax +
jz loc_101A97D  +
mov eax [ebp+8] +
mov eax [eax+2Ch] +
test eax 400000h +
jnz loc_1042730  +
xor eax eax +
call sub_1002061  +
retn 4  +
***
xor eax eax +
jmp loc_101A8B8  +
***
xor eax eax +
jmp loc_101A90A  +
***
xor eax eax +
jmp loc_101A954  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 50000000h  +
push eax  +
push eax  +
call ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CCmdTarget@@QAE@XZ  +
mov dword ptr [esi] offset off_1005484 +
xor eax eax +
mov dword ptr [esi+20h] offset off_101A9F4 +
mov [esi+24h] eax +
mov [esi+28h] eax +
mov [esi+2Ch] eax +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
push ecx  +
add ecx 478h +
call sub_101AAB6  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea eax [ebp+rc] +
mov esi ecx +
or edi 4000000h +
push eax  +
mov [ebp+var_4] 1 +
mov [esi+68h] edi +
call ds:SetRectEmpty  +
xor ebx ebx +
push ebx  +
push 10h  +
push 7F00h  +
push ebx  +
call ds:LoadCursorW  +
push eax  +
push ebx  +
call ?AfxRegisterWndClass@@YGPBGIPAUHICON__@@PAUHBRUSH__@@0@Z  +
push ebx  +
push [ebp+arg_8]  +
lea ecx [ebp+rc] +
push [ebp+arg_0]  +
push ecx  +
push edi  +
push ebx  +
push eax  +
mov ecx esi +
call ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z  +
test eax eax +
jz loc_1048849  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
mov ecx offset unk_108AF60 +
call sub_101AB46  +
mov ecx [ebp+8] +
mov edx [ecx] +
push eax  +
call dword ptr [edx]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0D4h] +
and eax [ebp+arg_0] +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
or dword ptr [esi+2Ch] 100h +
mov ebx ecx +
test eax eax +
jz loc_101AB8B  +
push eax  +
call ds:DestroyMenu  +
and dword ptr [esi+8] 0 +
push esi  +
mov ecx ebx +
call ?PreCreateWindow@CFrameWnd@@MAEHAAUtagCREATESTRUCTW@@@Z  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_101AC9F  +
push edi  +
push 2  +
push offset stru_108B23C  +
call ds:MonitorFromRect  +
push 9  +
mov edx eax +
pop ecx  +
xor eax eax +
lea edi [ebp+mi.rcMonitor] +
stos   +
lea eax [ebp+mi] +
push eax  +
push edx  +
mov [ebp+mi.cbSize] 28h +
call ds:GetMonitorInfoW  +
test eax eax +
jz loc_1040F5A  +
mov ecx stru_108B23C.bottom +
mov edi [ebp+mi.rcWork.right] +
mov edx [ebp+mi.rcWork.bottom] +
sub edi [ebp+mi.rcWork.left] +
sub edx [ebp+mi.rcWork.top] +
mov eax ecx +
sub eax stru_108B23C.top +
mov [ebp+hInstance] eax +
mov eax stru_108B23C.right +
mov ebx eax +
sub ebx stru_108B23C.left +
cmp ebx edi +
jg loc_1040FF5  +
cmp [ebp+hInstance] edx +
jg loc_104100A  +
mov edx [ebp+mi.rcWork.left] +
cmp stru_108B23C.left edx +
jl loc_1041021  +
mov edx [ebp+mi.rcWork.top] +
cmp stru_108B23C.top edx +
jl loc_104103B  +
mov edx [ebp+mi.rcWork.right] +
cmp eax edx +
jg loc_1041056  +
mov eax [ebp+mi.rcWork.bottom] +
cmp ecx eax +
jg loc_104106B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
mov ebx ds:GetClassInfoW +
lea ecx [ebp+WndClass] +
push ecx  +
mov edi offset ClassName +
push edi  +
push eax  +
mov [ebp+hInstance] eax +
call ebx  +
test eax eax +
jnz loc_101AC95  +
lea eax [ebp+WndClass] +
push eax  +
push dword ptr [esi+28h]  +
push [ebp+hInstance]  +
call ebx  +
and [ebp+WndClass.style] 0FFFFFFFCh +
push 2  +
push [ebp+hInstance]  +
mov [ebp+WndClass.lpszClassName] edi +
call ds:LoadIconW  +
mov [ebp+WndClass.hIcon] eax +
lea eax [ebp+WndClass] +
push eax  +
call ?AfxRegisterClass@@YGHPAUtagWNDCLASSW@@@Z  +
test eax eax +
jz loc_104107F  +
cmp [ebp+arg_0] 0 +
jz loc_101AC9E  +
mov [esi+28h] edi +
pop edi  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101ACDE  +
push offset Addend  +
mov dword ptr [esi] offset off_10127E0 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101AD11  +
mov dword ptr [esi] offset off_101ACF8 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_101AD45  +
mov dword ptr [esi] offset off_101AD2C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edx ecx +
and dword ptr [edx] 0 +
lea esi [edx+4] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_101AD84 +
mov eax esi +
pop esi  +
retn   +
***
push 4  +
mov eax offset loc_107A178 +
call sub_100208C  +
push 6Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_101AEC4  +
call sub_101AECF  +
call sub_1002061  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CView@@IAE@XZ  +
mov dword ptr [esi+44h] offset off_10196F4 +
xor eax eax +
mov [esi+48h] eax +
mov [esi+50h] eax +
mov [esi+4Ch] eax +
mov [esi+54h] eax +
mov [esi+58h] eax +
mov [esi+5Ch] eax +
mov [esi+60h] eax +
mov dword ptr [esi] offset off_1002CE4 +
mov dword ptr [esi+44h] offset off_1014110 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+20h] +
and eax 0FF7FFFFFh +
or eax 2000000h +
mov [esi+20h] eax +
mov eax [esi+2Ch] +
and eax 0FFFFFDFFh +
push edi  +
or eax 100000h +
push esi  +
mov [esi+2Ch] eax +
call ?PreCreateWindow@CView@@MAEHAAUtagCREATESTRUCTW@@@Z  +
mov edi eax +
test edi edi +
jz loc_101AF94  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
lea ecx [ebp+WndClass] +
push ecx  +
push dword ptr [esi+28h]  +
push eax  +
call ds:GetClassInfoW  +
and [ebp+WndClass.style] 0FFFFFFFCh +
push 5  +
mov [ebp+WndClass.lpszClassName] offset aMspaintview +
call ds:GetStockObject  +
mov [ebp+WndClass.hbrBackground] eax +
lea eax [ebp+WndClass] +
push eax  +
call ?AfxRegisterClass@@YGHPAUtagWNDCLASSW@@@Z  +
test eax eax +
jz loc_10426B6  +
mov eax [ebp+WndClass.lpszClassName] +
mov [esi+28h] eax +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CWnd@@QAE@XZ  +
xor ecx ecx +
mov dword ptr [esi] offset off_10033E4 +
mov eax offset off_102DB20 +
mov [ebp-4] ecx +
mov [esi+48h] ecx +
mov [esi+44h] eax +
mov [esi+50h] ecx +
mov [esi+4Ch] eax +
mov eax offset off_102DB88 +
mov [esi+58h] ecx +
mov [esi+54h] eax +
mov [esi+60h] ecx +
mov [esi+5Ch] eax +
mov [esi+68h] ecx +
mov dword ptr [esi+64h] offset off_100A058 +
fld1   +
lea eax [esi+70h] +
fst  qword ptr [eax] +
fstp  qword ptr [eax+8] +
mov dword ptr [eax+10h] 64h +
mov eax [ebp+8] +
fldz   +
mov [esi+88h] ecx +
fstp  qword ptr [esi+90h] +
mov [esi+8Ch] ecx +
mov ecx esi +
mov byte ptr [ebp-4] 5 +
mov [esi+40h] eax +
call sub_101B03E  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
call sub_10020DC  +
mov esi ecx +
lea ecx [esi+44h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+4Ch] +
mov [ebp-90h] ecx +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+54h] +
mov [ebp-84h] ecx +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+5Ch] +
mov [ebp-8Ch] ecx +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+64h] +
mov [ebp-88h] ecx +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
call sub_10022E9  +
xor ebx ebx +
mov dword ptr [ebp-80h] 0AF9C8Eh +
mov dword ptr [ebp-7Ch] 0FFh +
mov dword ptr [ebp-78h] 0F8F3F1h +
mov dword ptr [esi+6Ch] 6A4B33h +
cmp al bl +
jnz loc_1043B92  +
lea ecx [ebp-70h] +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-74h] +
mov [ebp-4] ebx +
call ??0CString@@QAE@XZ  +
push 0C4F0h  +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 1 +
call ?LoadStringW@CString@@QAEHI@Z  +
push 0C4F1h  +
lea ecx [ebp-74h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp-70h]  +
call ds:_wtoi  +
pop ecx  +
push dword ptr [ebp-74h]  +
neg eax  +
push 20h  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 190h  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
lea ecx [esi+44h] +
call sub_101B18D  +
lea eax [ebp-6Ch] +
push eax  +
push 5Ch  +
push dword ptr [esi+48h]  +
call ds:GetObjectW  +
mov ecx [ebp-90h] +
mov eax 384h +
mov [ebp-64h] eax +
mov [ebp-60h] eax +
lea eax [ebp-6Ch] +
push eax  +
call sub_1013B10  +
push dword ptr [ebp-80h]  +
mov ecx [ebp-84h] +
push ebx  +
push ebx  +
call sub_1013581  +
push dword ptr [ebp-7Ch]  +
mov ecx [ebp-8Ch] +
push ebx  +
push ebx  +
call sub_1013581  +
push dword ptr [ebp-78h]  +
mov ecx [ebp-88h] +
call sub_100A0C1  +
lea ecx [ebp-74h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-70h] +
call ??1CString@@QAE@XZ  +
call sub_1002119  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_30] +
push esi  +
push [ebp+arg_34]  +
mov esi ecx +
push eax  +
movzx eax [ebp+arg_2C] +
push eax  +
movzx eax [ebp+arg_28] +
push eax  +
movzx eax [ebp+arg_24] +
push eax  +
movzx eax [ebp+arg_20] +
push eax  +
movzx eax [ebp+arg_1C] +
push eax  +
movzx eax [ebp+arg_18] +
push eax  +
movzx eax [ebp+arg_14] +
push eax  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:CreateFontW  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 38h  +
***
call sub_100208C  +
mov esi [ebp+0Ch] +
xor ebx ebx +
cmp esi ebx +
jz loc_1043AFB  +
push dword ptr [ebp+8]  +
lea ecx [ebp+0Ch] +
mov [esi] ebx +
call sub_101B284  +
mov [ebp-4] ebx +
cmp [ebp+0Ch] ebx +
jz loc_1043B05  +
mov [ebp+8] ebx +
mov eax [ebp+0Ch] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push ebx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi ebx +
mov eax [ebp+8] +
jl loc_1043B41  +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi eax +
cmp edi ebx +
mov [ebp-4] bl +
jl loc_1043B50  +
mov eax [ebp-10h] +
mov [esi] eax +
mov eax [ebp+8] +
cmp eax ebx +
jz loc_101B264  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+0Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_101B275  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_101B29B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
xor ebx ebx +
mov esi 80004005h +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
push ebx  +
push 20019h  +
push offset aRibbon  +
push dword ptr [ebp+8]  +
lea ecx [ebp-18h] +
mov [ebp-4] ebx +
call sub_101B354  +
test eax eax +
jnz loc_101B33D  +
lea eax [ebp+8] +
push eax  +
push ebx  +
mov esi offset aQatitems +
push esi  +
lea ecx [ebp-18h] +
call sub_101B6A9  +
test eax eax +
jnz loc_101B333  +
mov eax [ebp+8] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10067E4  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_101B333  +
lea eax [ebp+8] +
push eax  +
push edi  +
push esi  +
lea ecx [ebp-18h] +
call sub_101B6A9  +
push dword ptr [ebp+0Ch]  +
push edi  +
call sub_101B71D  +
push edi  +
call sub_1006809  +
pop ecx  +
lea ecx [ebp-18h] +
call sub_1014146  +
xor esi esi +
lea ecx [ebp-18h] +
call sub_1014146  +
mov eax esi +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push [ebp+ulOptions]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_101B387  +
mov ecx esi +
call sub_1014146  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 10h  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CCmdTarget@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea edi [esi+24h] +
mov dword ptr [esi] offset off_1005534 +
mov ecx edi +
mov dword ptr [esi+20h] offset off_101B3FC +
call sub_10144B1  +
push dword ptr [ebp+10h]  +
lea ecx [esi+38h] +
mov byte ptr [ebp-4] 1 +
call sub_101B284  +
mov ecx [ebp+0Ch] +
mov eax [ebp+8] +
and dword ptr [esi+4] 0 +
mov [esi+30h] eax +
mov [esi+34h] ecx +
mov eax [ecx] +
push edi  +
mov byte ptr [ebp-4] 2 +
call dword ptr [eax+8]  +
mov eax esi +
call sub_1002061  +
retn 0Ch  +
***
call sub_1002370  +
mov dh 34h +
jz loc_101B53B  +
mov dh 59h +
push eax  +
inc edx  +
cdq   +
sahf   +
shr dword ptr [eax-2Ah] 1 +
scas   +
inc edx  +
xchg eax ebx +
cmps   +
stos   +
sbb [esp+ecx*2+4+var_4] bl +
mov ds:0F56CBF4Bh al +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CCmdTarget@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea edi [esi+24h] +
mov dword ptr [esi] offset off_1005694 +
mov ecx edi +
mov dword ptr [esi+20h] offset off_101B5B0 +
call sub_10144B1  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+34h] +
mov byte ptr [ebp-4] 1 +
call sub_101B284  +
mov ecx [ebp+8] +
and dword ptr [esi+4] 0 +
mov [esi+30h] ecx +
mov eax [ecx] +
push edi  +
mov byte ptr [ebp-4] 2 +
call dword ptr [eax+0Ch]  +
mov eax esi +
call sub_1002061  +
retn 8  +
***
push 4  +
pop ecx  +
mov edi offset dword_101B690 +
xor eax eax +
cmps   +
jnz loc_1006978  +
lea ecx [ebp-274h] +
call sub_10069B9  +
mov eax [ebp+0Ch] +
mov edx [ebx] +
xor esi esi +
push esi  +
lea ecx [ebp-274h] +
push ecx  +
push 0FFFFFFFFh  +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-4] 8 +
mov [ebp-270h] eax +
call dword ptr [edx+14h]  +
cmp eax esi +
jz loc_101B67C  +
xor eax eax +
cmp [ebp-24Ch] esi +
jnz loc_1048AC0  +
mov ecx [ebp-284h] +
push 13h  +
pop edx  +
mov [ecx] dx +
mov [ecx+8] eax +
mov [ebp-278h] esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-240h] +
call ??1CString@@QAE@XZ  +
jmp loc_1006978  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+Type] +
mov eax [esi] +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+lpData] +
add eax eax +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_101B706  +
cmp [ebp+Type] 1 +
jnz loc_1048820  +
mov eax [ebp+cbData] +
test edi edi +
jz loc_101B700  +
test eax eax +
jz loc_101B711  +
test al 1 +
jnz loc_101B70C  +
mov ecx eax +
shr ecx 1 +
cmp word ptr [edi+ecx*2-2] 0 +
jnz loc_101B70C  +
shr eax 1 +
mov [esi] eax +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
push 0Dh  +
pop eax  +
jmp loc_101B706  +
xor ecx ecx +
mov [edi] cx +
jmp loc_101B700  +
***
call sub_100208C  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-14h] +
push eax  +
sub esp 10h +
mov edi esp +
mov esi offset loc_1014580 +
movs   +
movs   +
movs   +
movs   +
call sub_10145F6  +
mov ebx [ebp-14h] +
mov esi eax +
test esi esi +
jl loc_101B7F0  +
push dword ptr [ebp+8]  +
lea ecx [ebp-18h] +
call sub_101B80D  +
mov eax [ebx] +
lea ecx [ebp+8] +
push ecx  +
push dword ptr [ebp-18h]  +
mov byte ptr [ebp-4] 1 +
push ebx  +
call dword ptr [eax+104h]  +
mov esi eax +
test esi esi +
jl loc_101B7E7  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
push 1  +
push 0  +
mov byte ptr [ebp-4] 2 +
call ds:CreateStreamOnHGlobal  +
mov esi eax +
test esi esi +
jl loc_101B7D6  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-28h] +
call sub_1014595  +
mov eax [ebx] +
sub esp 10h +
mov edi esp +
lea esi [ebp-28h] +
movs   +
movs   +
movs   +
push ebx  +
mov byte ptr [ebp-4] 3 +
movs   +
call dword ptr [eax+108h]  +
mov esi eax +
test esi esi +
jl loc_101B7CE  +
mov eax [ebp-10h] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
lea ecx [ebp-28h] +
call sub_10145BF  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_101B7E7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test ebx ebx +
jz loc_101B7FE  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax esi +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:SysAllocString  +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+18h] +
lea eax [ecx+4] +
cmp esi 10h +
jnb loc_103D73E  +
mov edx eax +
cmp [ebp+arg_0] edx +
jb loc_101B8C8  +
cmp esi 10h +
jnb loc_103D745  +
mov ecx [ecx+14h] +
add ecx eax +
cmp ecx [ebp+arg_0] +
ja loc_103D74C  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx [ecx+4] +
jmp loc_1014D4C  +
***
cmp [ebp+arg_4] 0 +
lea eax [esi+4] +
push edi  +
mov edi [eax] +
ja loc_103D94E  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
jmp loc_1014D19  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_108A1F0 +
test ecx ecx +
jnz loc_103E304  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_108A1F0 +
test ecx ecx +
jnz loc_103E31E  +
pop ebp  +
retn 4  +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
xor ebx ebx +
mov dword ptr [esi] offset off_102DBF0 +
mov [esi+0Ch] ebx +
mov eax dword_108B1A4 +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
mov [esi+10h] eax +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
mov edi 400h +
push edi  +
mov byte ptr [ebp-4] 2 +
call sub_10067E4  +
pop ecx  +
push edi  +
mov [esi+4] eax +
call sub_10067E4  +
pop ecx  +
mov [esi+8] eax +
mov [ebp-4] ebx +
call ?AfxTryCleanup@@YGXXZ  +
cmp [esi+4] ebx +
jz loc_101B99A  +
cmp [esi+8] ebx +
jz loc_101B99A  +
push 1  +
push 4  +
mov ecx esi +
call sub_1013F8E  +
mov eax esi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor eax eax +
push esi  +
mov esi ecx +
mov ecx ds:__argc +
inc eax  +
xor ebx ebx +
cmp [ecx] eax +
mov [ebp+var_8] ebx +
mov [ebp+var_4] eax +
jle loc_101BA68  +
push edi  +
***
mov eax ds:__wargv +
mov edi [ebp+var_4] +
mov eax [eax] +
push offset String2  +
shl edi 2 +
push dword ptr [eax+edi]  +
call sub_102CC71  +
test eax eax +
jnz loc_1041240  +
mov eax ds:__wargv +
mov eax [eax] +
push offset aP  +
push dword ptr [eax+edi]  +
call sub_102CC71  +
test eax eax +
jnz loc_1041251  +
mov eax ds:__wargv +
mov eax [eax] +
push offset aWia  +
push dword ptr [eax+edi]  +
call sub_102CC71  +
test eax eax +
jnz loc_1041260  +
mov eax [esi+260h] +
cmp eax ebx +
jnz loc_104126F  +
lea ecx [esi+250h] +
mov eax [ecx] +
cmp [eax-8] ebx +
jnz loc_104129E  +
mov eax ds:__wargv +
mov eax [eax] +
push dword ptr [eax+edi]  +
call ??4CString@@QAEABV0@PBG@Z  +
inc [ebp+var_4]  +
mov eax ds:__argc +
mov ecx [ebp+var_4] +
cmp ecx [eax] +
jl loc_101B9CC  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx] +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ecx+0Ch] +
jb loc_104173A  +
xor eax eax +
test eax eax +
jnz loc_101BAA6  +
cmp [ecx+14h] al +
jnz loc_1041745  +
pop esi  +
pop ebp  +
retn 4  +
***
lea eax [edi+4] +
jmp loc_1014B22  +
***
push edi  +
mov ecx esi +
call sub_1012FDB  +
jmp loc_10141EC  +
***
add edi 4 +
jmp loc_1014F9F  +
lea eax [ebx+4] +
jmp loc_1014FAE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov cl [ebp+arg_0] +
xor eax eax +
test cl 1 +
jz loc_1044214  +
test cl 2 +
jz loc_104421C  +
test cl 8 +
jnz loc_1044224  +
test cl 4 +
jnz loc_104422C  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
test byte ptr [esi+40h] 1 +
jz loc_101BB22  +
mov eax [esi+10h] +
push dword ptr [eax]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [esi+10h] +
xor eax eax +
mov [ecx] eax +
mov ecx [esi+20h] +
mov [ecx] eax +
mov ecx [esi+30h] +
mov [ecx] eax +
mov ecx [esi+14h] +
mov [ecx] eax +
mov ecx [esi+24h] +
mov [ecx] eax +
mov ecx [esi+34h] +
mov [ecx] eax +
and dword ptr [esi+40h] 0FFFFFFFEh +
mov [esi+3Ch] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+20h] +
mov edx [eax] +
test edx edx +
jz loc_101BB92  +
push edi  +
mov edi [esi+30h] +
mov edi [edi] +
mov ecx edx +
lea edi [ecx+edi*2] +
cmp ecx edi +
pop edi  +
jb loc_1044234  +
test byte ptr [esi+40h] 4 +
jnz loc_101BB92  +
mov ecx [esi+24h] +
mov ecx [ecx] +
test ecx ecx +
jz loc_101BB92  +
cmp ecx edx +
ja loc_1044239  +
cmp [esi+3Ch] edx +
ja loc_1044239  +
mov eax 0FFFFh +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax+4] offset off_10196F4 +
and dword ptr [eax+0Ch] 0 +
and dword ptr [eax+10h] 0 +
mov dword ptr [eax] offset off_1014AD4 +
mov dword ptr [eax+4] offset off_1014C40 +
mov [eax+8] ecx +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+20h] 0 +
lea ecx [esi+2Ch] +
mov dword ptr [esi] offset off_100AD6C +
call ??0CString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
lea ecx [eax+250h] +
add eax 3CCh +
mov [esi+18h] eax +
mov [esi+14h] ecx +
mov eax esi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte_108A1C1 0 +
jnz loc_101BC99  +
push offset loc_1020AA7  +
mov byte_108A1C1 1 +
call sub_101C623  +
pop ecx  +
mov eax [ebp+arg_0] +
mov dword_108A284 eax +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
push 18h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
push eax  +
mov [esi] eax +
call sub_1014518  +
pop ecx  +
pop ecx  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_101BCE4 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+8] eax +
mov ecx [ecx+4] +
mov [eax+4] ecx +
pop ebp  +
retn 4  +
***
mov eax [ecx+28h] +
imul eax eax +
push esi  +
xor esi esi +
push esi  +
push eax  +
push ecx  +
push offset loc_1073750  +
call ds:RegisterApplicationRecoveryCallback  +
test eax eax +
jnz loc_101BDE6  +
inc esi  +
mov eax esi +
pop esi  +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_102CD5A  +
xor eax eax +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_10496CC  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_10496D8  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 1Ch +
jb loc_10496DF  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
add esi 4 +
jmp loc_1015043  +
***
call sub_100208C  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_101BE78  +
push dword ptr [ebp+0Ch]  +
call sub_1014F22  +
call sub_1002061  +
retn 8  +
***
call sub_10020DC  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1014F22  +
mov edi [esi+4] +
mov eax [esi+8] +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-30h] ebx +
cmp edi eax +
jz loc_101BEE9  +
push edi  +
lea eax [ebp-4Ch] +
push offset dword_101BF20  +
push eax  +
call sub_1014ED6  +
add esp 0Ch +
push 0FFFFFFFFh  +
push ebx  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1014E3A  +
push ebx  +
push 1  +
lea ecx [ebp-4Ch] +
mov [ebp-4] bl +
call sub_1012F94  +
add edi 1Ch +
cmp edi [esi+8] +
jnz loc_101BEB1  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jb loc_1049755  +
push dword ptr [esi+2Ch]  +
push eax  +
call ds:RegisterApplicationRestart  +
test eax eax +
jnz loc_101BF0B  +
mov dword ptr [ebp-30h] 1 +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
mov eax [ebp-30h] +
call sub_1002119  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_104975D  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002370  +
mov esi [ebp+8] +
xor ebx ebx +
push ebx  +
push esi  +
lea ecx [ebp-2Ch] +
mov [ebp-18h] ebx +
mov [ebp-11h] bl +
call sub_101C08E  +
mov [ebp-4] ebx +
cmp [ebp-28h] bl +
jnz loc_102CE6F  +
mov eax [esi] +
mov eax [eax+4] +
add eax esi +
mov [eax+18h] ebx +
cmp [ebp-11h] bl +
jnz loc_101BFAB  +
or dword ptr [ebp-18h] 2 +
mov eax [esi] +
mov ecx [eax+4] +
push ebx  +
push dword ptr [ebp-18h]  +
add ecx esi +
call sub_101D395  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call sub_101BFD4  +
mov eax esi +
call sub_1002061  +
retn   +
***
mov eax [ecx] +
mov ecx [eax] +
mov ecx [ecx+4] +
mov eax [ecx+eax+28h] +
test eax eax +
jz nullsub_3  +
lea ecx [eax+4] +
nop   +
nop   +
nop   +
nop   +
nop   +
push dword ptr [ecx]  +
call sub_1014DCB  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101C023  +
mov eax [ebp+arg_4] +
imul eax eax +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101C051  +
pop edi  +
leave   +
retn 10h  +
***
call sub_1002370  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_101C081  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_101BE53  +
dec dword ptr [ebp+0Ch]  +
add dword ptr [ebp+8] 1Ch +
jmp loc_101C067  +
call sub_1002061  +
retn 18h  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_101D22B  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi] +
and dword ptr [ebp-4] 0 +
call sub_101C0C7  +
mov [esi+4] al +
mov eax esi +
call sub_1002061  +
retn 8  +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
mov eax [esi] +
mov eax [eax+4] +
lea ecx [eax+esi] +
mov eax [ecx+8] +
xor ebx ebx +
cmp eax ebx +
jnz loc_101C183  +
mov ecx [ecx+2Ch] +
cmp ecx ebx +
jnz loc_1042102  +
cmp [ebp+8] bl +
jnz loc_101C16C  +
mov eax [esi] +
mov ecx [eax+4] +
mov ecx [ecx+esi+10h] +
test cl 1 +
jz loc_101C16C  +
lea ecx [ebp+8] +
push ecx  +
mov ecx [eax+4] +
add ecx esi +
call sub_101D1BB  +
push eax  +
mov [ebp-4] ebx +
call sub_101C559  +
pop ecx  +
lea ecx [ebp+8] +
mov edi eax +
call sub_1014D59  +
mov eax [esi] +
mov eax [eax+4] +
mov ecx [eax+esi+28h] +
mov dword ptr [ebp-4] 1 +
call sub_101C3AF  +
movzx eax ax +
movzx eax ax +
mov ecx 0FFFFh +
cmp cx ax +
jz loc_10371C6  +
mov edx [edi] +
push eax  +
push 48h  +
mov ecx edi +
call dword ptr [edx+8]  +
cmp al bl +
jnz loc_104210C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [esi] +
mov eax [eax+4] +
lea ecx [eax+esi] +
cmp [ecx+8] ebx +
jnz loc_101C183  +
mov al 1 +
call sub_1002061  +
retn 4  +
mov eax [ecx+8] +
push ebx  +
or eax 2 +
push eax  +
call sub_101D3B8  +
xor al al +
jmp loc_101C17B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 0FFFFFFFEh +
ja loc_103D9E7  +
cmp [esi+18h] edi +
jb loc_101C1D3  +
cmp [ebp+arg_4] 0 +
jnz loc_103D9F1  +
test edi edi +
jz loc_103DA12  +
xor eax eax +
cmp eax edi +
sbb eax eax +
pop edi  +
neg eax  +
pop esi  +
pop ebp  +
retn 8  +
push dword ptr [esi+14h]  +
mov ecx esi +
push edi  +
call sub_101C1E5  +
jmp loc_101C1C5  +
***
call sub_1002370  +
mov edi ecx +
mov [ebp-18h] edi +
mov esi [ebp+8] +
or esi 0Fh +
cmp esi 0FFFFFFFEh +
ja loc_103D95F  +
xor edx edx +
push 3  +
mov eax esi +
pop ebx  +
div  ebx +
mov ecx [edi+18h] +
mov [ebp-14h] ecx +
shr dword ptr [ebp-14h] 1 +
mov edx [ebp-14h] +
cmp eax edx +
jb loc_103D967  +
and dword ptr [ebp-4] 0 +
push 0  +
lea eax [esi+1] +
push eax  +
call sub_101C265  +
mov ebx eax +
cmp dword ptr [ebp+0Ch] 0 +
ja loc_103D9A9  +
push 0  +
push 1  +
mov ecx edi +
call sub_1014D01  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
mov [edi+4] ebx +
mov [edi+18h] esi +
call sub_1014D34  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_103D753  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 1 +
jb loc_103D75A  +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:setlocale +
push edi  +
push 0  +
push 0  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1045996  +
mov edi [ebp+arg_0] +
push eax  +
lea ecx [edi+3Ch] +
call sub_101C2ED  +
cmp [ebp+arg_4] 0 +
jz loc_101C2E1  +
push [ebp+arg_4]  +
push 0  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101C2E1  +
push eax  +
lea ecx [edi+58h] +
call sub_101C2ED  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
mov eax offset dword_101B840 +
jmp loc_101C2D4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+1] +
push ebx  +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_101C2F9  +
sub eax edx +
push eax  +
push [ebp+arg_0]  +
call sub_101C315  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_101B895  +
test al al +
jnz loc_103DA1F  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_101C199  +
test al al +
jz loc_101C35F  +
mov ecx [esi+18h] +
cmp ecx 10h +
jnb loc_101C367  +
lea eax [esi+4] +
push [ebp+arg_4]  +
push edi  +
push ecx  +
push eax  +
call sub_101CFD9  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1014D34  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax [esi+4] +
jmp loc_101C34A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_101C384  +
mov eax [esi] +
pop esi  +
leave   +
retn   +
push 0  +
lea ecx [ebp+var_4] +
call sub_1014DE0  +
cmp dword ptr [esi] 0 +
jnz loc_101C3A0  +
inc dword_108A28C  +
mov eax dword_108A28C +
mov [esi] eax +
lea ecx [ebp+var_4] +
call sub_1014DB4  +
jmp loc_101C37F  +
***
mov eax [ecx+20h] +
cmp dword ptr [eax] 0 +
jz loc_10371BF  +
mov edx [ecx+30h] +
mov edx [edx] +
test edx edx +
jle loc_101C3CA  +
mov eax [eax] +
movzx eax word ptr [eax] +
retn   +
mov eax [ecx] +
call dword ptr [eax+10h]  +
movzx eax ax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_101C3E5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and dword ptr [ebp+MultiByteStr] 0 +
add ecx 18h +
push ecx  +
lea eax [ebp+MultiByteStr] +
push eax  +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_101C420  +
add esp 14h +
test eax eax +
mov eax 0FFFFh +
jl locret_101C417  +
movzx eax [ebp+WideCharStr] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_101C42D  +
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_101C479  +
cmp [ebp+arg_8] 0 +
jz loc_101C479  +
cmp byte ptr [edi] 0 +
jz loc_10459A1  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_10459B6  +
mov esi [eax] +
mov ebx [eax+4] +
test esi esi +
jnz loc_10459CC  +
mov eax [ebp+lpWideCharStr] +
test eax eax +
jz loc_101C471  +
movzx cx byte ptr [edi] +
mov [eax] cx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
xor eax eax +
jmp loc_101C474  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-14h] esi +
xor eax eax +
mov [ebp-10h] eax +
cmp [ebp+10h] eax +
jnz loc_1044330  +
mov eax [esi] +
mov eax [eax+4] +
push dword ptr [ebp+0Ch]  +
mov dword ptr [esi+eax] offset off_101CDEC +
mov eax [esi] +
mov ecx [eax+4] +
push dword ptr [ebp+8]  +
add ecx esi +
call sub_101C4CE  +
mov eax esi +
call sub_1002061  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
call sub_101D40C  +
mov eax [ebp+arg_0] +
xor ebx ebx +
push 20h  +
mov ecx esi +
mov [esi+28h] eax +
mov [esi+2Ch] ebx +
call sub_101C514  +
mov [esi+30h] ax +
cmp [esi+28h] ebx +
jz loc_1044310  +
cmp [ebp+arg_4] bl +
jnz loc_1044324  +
mov [esi+4] ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
lea eax [ebp-10h] +
push eax  +
call sub_101D1BB  +
and dword ptr [ebp-4] 0 +
push eax  +
call sub_101C559  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1014D59  +
push dword ptr [ebp+8]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+28h]  +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
push 0  +
lea ecx [ebp-14h] +
call sub_1014DE0  +
mov esi dword_108A25C +
and dword ptr [ebp-4] 0 +
mov ecx offset unk_108BBAC +
mov [ebp-10h] esi +
call sub_101C371  +
mov ecx [ebp+8] +
push eax  +
call sub_101BA83  +
mov edi eax +
test edi edi +
jnz loc_101C59B  +
test esi esi +
jz loc_101C5AF  +
mov edi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1014DB4  +
mov eax edi +
call sub_1002061  +
retn   +
lea eax [ebp-10h] +
push eax  +
call sub_101D267  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1041E1D  +
mov edi [ebp-10h] +
mov ecx edi +
mov dword_108A25C edi +
call sub_101D1FC  +
push edi  +
call sub_101C5E0  +
pop ecx  +
jmp loc_101C59B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_108A280 0 +
jnz loc_101C5F9  +
push offset loc_101F346  +
call sub_101C623  +
pop ecx  +
push 8  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_101C61A  +
mov ecx dword_108A280 +
mov [eax] ecx +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov dword_108A280 eax +
pop ebp  +
retn   +
xor eax eax +
jmp loc_101C613  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_108A294 +
cmp eax 0Ah +
jz loc_1045AFF  +
mov ecx [ebp+arg_0] +
mov dword_108C46C[eax*4] ecx +
inc eax  +
mov dword_108A294 eax +
pop ebp  +
retn   +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+38h] +
mov dword ptr [esi] offset off_1008844 +
test ecx ecx +
jz loc_101C67E  +
push 1  +
call sub_101DA49  +
lea ecx [esi+4] +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call sub_1014B3A  +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop ecx  +
pop esi  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push 0  +
call sub_1014DE0  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
call sub_101C6FD  +
lea ecx [esi+20h] +
call sub_101C6FD  +
lea ecx [esi+3Ch] +
call sub_101C6FD  +
lea ecx [esi+58h] +
call sub_101C6FD  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 4 +
push esi  +
call sub_101C298  +
pop ecx  +
pop ecx  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_1014D34  +
mov eax esi +
pop esi  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_101D040  +
lea eax [esi+0A0h] +
mov dword ptr [eax] offset off_101C7F8 +
xor edi edi +
lea ecx [esi+0A4h] +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_100286C +
mov dword ptr [eax] offset off_1009F38 +
call ??0CString@@QAE@XZ  +
lea ecx [esi+0A8h] +
mov byte ptr [ebp-4] 1 +
call ??0CString@@QAE@XZ  +
lea ecx [esi+0ACh] +
mov byte ptr [ebp-4] 2 +
call ??0CString@@QAE@XZ  +
lea ecx [esi+0B0h] +
mov byte ptr [ebp-4] 3 +
call ??0CString@@QAE@XZ  +
lea ecx [esi+0B4h] +
mov byte ptr [ebp-4] 4 +
call ??0CString@@QAE@XZ  +
lea ecx [esi+0B8h] +
mov byte ptr [ebp-4] 5 +
call sub_101C809  +
mov eax 80000000h +
mov [esi+394h] eax +
mov [esi+390h] eax +
mov [esi+370h] edi +
mov [esi+374h] edi +
mov [esi+378h] edi +
mov [esi+37Ch] edi +
mov [esi+384h] edi +
mov [esi+388h] edi +
mov dword_108A1E8 edi +
mov [esi+38Ch] edi +
mov byte ptr [esi+380h] 1 +
mov eax esi +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CWnd@@QAE@XZ  +
xor edi edi +
lea ecx [esi+40h] +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_100396C +
call ??0CToolTipCtrl@@QAE@XZ  +
lea ecx [esi+9Ch] +
mov byte ptr [ebp-4] 1 +
call sub_101DA9F  +
lea ecx [esi+0DCh] +
mov byte ptr [ebp-4] 2 +
call sub_101DA9F  +
lea ecx [esi+11Ch] +
mov byte ptr [ebp-4] 3 +
call sub_101C8F5  +
lea ecx [esi+1A4h] +
mov byte ptr [ebp-4] 4 +
call sub_101C8F5  +
lea ecx [esi+22Ch] +
mov byte ptr [ebp-4] 5 +
call sub_101DBD5  +
fld1   +
push edi  +
fstp  qword ptr [esi+270h] +
lea ecx [esi+284h] +
mov byte ptr [ebp-4] 6 +
mov [esi+27Ch] edi +
mov [esi+280h] edi +
call sub_100CB64  +
fld  ds:dbl_101C8E0 +
fstp  qword ptr [esi+298h] +
lea eax [esi+2B0h] +
fld  ds:dbl_101C8E8 +
mov [esi+2A8h] edi +
fstp  qword ptr [esi+2A0h] +
mov [esi+2ACh] edi +
mov [eax+4] edi +
mov dword ptr [eax] offset off_102DB20 +
mov eax esi +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_101BCC7  +
xor ebx ebx +
lea ecx [esi+40h] +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_1003A84 +
call ??0CImageList@@QAE@XZ  +
mov [esi+6Ch] ebx +
mov dword ptr [esi+68h] offset off_100A058 +
mov [esi+74h] ebx +
mov dword ptr [esi+70h] offset off_102DB88 +
mov [esi+84h] bl +
mov [esi+78h] ebx +
mov eax esi +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+0Ch] +
call sub_101CA24  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+30h] 0 +
mov [esi] eax +
mov eax [ebp+10h] +
mov [esi+28h] eax +
mov eax [ebp+14h] +
push 60h  +
mov [esi+2Ch] eax +
mov dword ptr [esi+34h] 1 +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_101C9B6  +
push dword ptr [ebp+0Ch]  +
call sub_101C9BF  +
mov [esi+4] eax +
mov eax esi +
call sub_1002061  +
retn 10h  +
xor eax eax +
jmp loc_101C9A9  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_101CA24  +
and dword ptr [ebp-4] 0 +
lea edi [esi+1Ch] +
mov ecx edi +
call sub_101CA24  +
lea ecx [esi+48h] +
mov byte ptr [ebp-4] 1 +
call sub_101DF0F  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 2 +
call sub_101DFA4  +
push dword ptr [ebp+8]  +
mov ecx edi +
mov byte ptr [ebp-4] 3 +
call sub_101DE5A  +
push offset word_100219C  +
mov ecx esi +
call sub_10142F1  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_1012FDB  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101BDEF  +
mov ecx [ebp+arg_4] +
cmp eax ecx +
push [ebp+arg_0]  +
jg loc_1049934  +
mov ecx esi +
call sub_101CA6C  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_101BDEF  +
mov ecx esi +
mov edi eax +
call sub_101BE02  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jb loc_1049924  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_101CAA8  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_101BDEF  +
test eax eax +
jnz loc_10498A7  +
xor esi esi +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_101CAE5  +
imul esi esi +
add esi [edi+4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_1002155  +
mov eax [ebp+10h] +
mov esi ecx +
push eax  +
lea ecx [ebp-30h] +
mov [ebp-3Ch] esi +
call sub_1014F22  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_101BE02  +
mov edi [ebp+0Ch] +
mov ebx eax +
test edi edi +
jz loc_101CBBF  +
mov ecx esi +
call sub_101BDEF  +
mov ecx 9249249h +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_10497A2  +
add eax edi +
cmp ebx eax +
jnb loc_10497E6  +
mov edx ebx +
shr edx 1 +
sub ecx edx +
cmp ecx ebx +
jb loc_10497A7  +
add ebx edx +
cmp ebx eax +
jnb loc_101CB52  +
mov ebx eax +
push 0  +
push ebx  +
call sub_101BE15  +
mov ecx [esi+4] +
push esi  +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-34h] eax +
push ecx  +
mov [ebp-38h] eax +
mov byte ptr [ebp-4] 1 +
call sub_101CBD8  +
lea ecx [ebp-30h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
mov [ebp-38h] eax +
call sub_101BFFD  +
push esi  +
mov [ebp-38h] eax +
push dword ptr [ebp-38h]  +
mov eax [esi+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_101CBD8  +
mov ecx esi +
call sub_101BDEF  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jnz loc_10497AE  +
mov eax [ebp-34h] +
imul ebx ebx +
imul edi edi +
add ebx eax +
add edi eax +
mov [esi+0Ch] ebx +
mov [esi+8] edi +
mov [esi+4] eax +
push 0  +
push 1  +
lea ecx [ebp-30h] +
call sub_1012F94  +
call sub_100212D  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101CC06  +
pop edi  +
leave   +
retn 10h  +
***
call sub_1002370  +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov esi [ebp+8] +
mov [ebp-14h] eax +
cmp esi [ebp+0Ch] +
jnz loc_1049724  +
mov eax [ebp+10h] +
call sub_1002061  +
retn 18h  +
***
push 4  +
mov eax offset loc_107A178 +
call sub_100208C  +
push 120h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_101CC86  +
call sub_101CC91  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0COleServerDoc@@QAE@XZ  +
xor ebx ebx +
lea ecx [esi+0F4h] +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_100471C +
call ??0CString@@QAE@XZ  +
mov dword ptr [esi+11Ch] offset off_101CD18 +
mov [esi+0FCh] ebx +
mov [esi+0ECh] ebx +
mov [esi+0F0h] ebx +
mov dword ptr [esi+0F8h] 1 +
mov [esi+100h] ebx +
mov [esi+104h] ebx +
mov [esi+108h] ebx +
mov [esi+114h] bl +
mov dword ptr [esi+110h] 8 +
mov [esi+118h] ebx +
mov eax esi +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov eax [ecx-54h] +
mov eax [eax+4] +
mov dword ptr [eax+ecx-54h] offset off_101B844 +
and dword ptr [ebp-4] 0 +
lea esi [ecx-48h] +
mov ecx esi +
call sub_101C64D  +
mov ecx esi +
call sub_101CE86  +
call sub_1002061  +
retn   +
***
mov eax [ecx-0Ch] +
mov eax [eax+4] +
mov dword ptr [eax+ecx-0Ch] offset off_101DE04 +
mov eax [ecx-4] +
mov eax [eax+4] +
mov dword ptr [eax+ecx-4] offset off_101CDEC +
mov eax [ecx-0Ch] +
mov eax [eax+4] +
mov dword ptr [eax+ecx-0Ch] offset off_101CEB8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101CFFB  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101D01D  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CStatusBar@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+80h] +
push 0  +
mov dword ptr [esi] offset off_1003854 +
call sub_101D08B  +
push 0  +
lea ecx [esi+90h] +
mov byte ptr [ebp-4] 1 +
call sub_1013B33  +
mov eax esi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_104948A  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+var_10] +
push edi  +
push eax  +
call sub_101D0E1  +
mov esi eax +
mov eax [ebp+arg_0] +
mov edi eax +
movs   +
movs   +
movs   +
pop ecx  +
movs   +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
call ds:___lc_handle_func  +
mov eax [eax+4] +
mov ebx [ebp+arg_0] +
mov [ebx] eax +
call ds:___lc_codepage_func  +
push 200h  +
mov [ebx+4] eax +
call ds:malloc  +
pop ecx  +
mov [ebx+8] eax +
test eax eax +
jz loc_1045958  +
push esi  +
push edi  +
call ds:__pctype_func  +
mov edi [ebx+8] +
mov ecx 80h +
mov esi eax +
movs   +
pop edi  +
mov dword ptr [ebx+0Ch] 1 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_10] +
mov ebx ecx +
mov ecx [ebp+arg_0] +
push eax  +
call sub_101D0B7  +
mov ecx [ebp+arg_0] +
mov esi eax +
lea edi [ebx+8] +
movs   +
movs   +
movs   +
lea eax [ebp+var_8] +
push eax  +
movs   +
call sub_101D181  +
mov ecx [eax] +
mov [ebx+18h] ecx +
mov eax [eax+4] +
pop edi  +
pop esi  +
mov [ebx+1Ch] eax +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_101D19E  +
mov ecx eax +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov [eax+4] edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
call ds:___lc_handle_func  +
mov esi [eax+8] +
call ds:___lc_codepage_func  +
mov edx eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push dword ptr [ecx+24h]  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
call sub_101D1DC  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov [esi] ecx +
call sub_101D1FC  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push 0  +
lea ecx [ebp+var_4] +
call sub_1014DE0  +
mov eax [esi+4] +
cmp eax 0FFFFFFFFh +
jnb loc_101D21B  +
inc eax  +
mov [esi+4] eax +
lea ecx [ebp+var_4] +
call sub_1014DB4  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
mov ecx [eax] +
mov ecx [ecx+4] +
mov eax [ecx+eax+28h] +
test eax eax +
jz loc_101D24D  +
lea ecx [eax+4] +
call sub_101D259  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
pop ecx  +
retn   +
***
call sub_100208C  +
mov esi [ebp+8] +
test esi esi +
jz loc_101D29D  +
cmp dword ptr [esi] 0 +
jnz loc_101D29D  +
push 20h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_101D2A6  +
push 0  +
call sub_101D2AF  +
mov [esi] eax +
push 2  +
pop eax  +
call sub_1002061  +
retn   +
xor eax eax +
jmp loc_101D29B  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [ebp+8] +
mov [esi+4] eax +
and dword ptr [ebp-4] 0 +
push offset loc_101D524  +
lea ecx [ebp-84h] +
mov dword ptr [esi] offset off_1014B80 +
call sub_101C6A3  +
push eax  +
mov ecx esi +
call sub_101D13C  +
lea ecx [ebp-84h] +
call sub_101D302  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push esi  +
mov dword ptr [ebp-4] 4 +
call sub_101D367  +
pop ecx  +
push 0  +
push 1  +
lea ecx [esi+58h] +
call sub_1014D01  +
push 0  +
push 1  +
lea ecx [esi+3Ch] +
call sub_1014D01  +
push 0  +
push 1  +
lea ecx [esi+20h] +
call sub_1014D01  +
push 0  +
push 1  +
lea ecx [esi+4] +
call sub_1014D01  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1014DB4  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+50h] 0 +
jbe loc_101D389  +
cmp dword ptr [eax+54h] 10h +
jb loc_101D38B  +
mov eax [eax+40h] +
push eax  +
push 0  +
call ds:setlocale  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
add eax 40h +
jmp loc_101D37E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_101D3AF  +
mov eax [ecx+8] +
push [ebp+arg_4]  +
or eax [ebp+arg_0] +
push eax  +
call sub_101D3B8  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+28h] 0 +
mov eax [ebp+arg_0] +
jz loc_10420BD  +
push [ebp+arg_4]  +
push eax  +
call sub_101D3DC  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov eax [ebp+8] +
and eax 17h +
mov [ecx+8] eax +
mov ecx [ecx+0Ch] +
and ecx eax +
jnz loc_1041FF4  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
xor edi edi +
push edi  +
push edi  +
mov [esi+24h] edi +
mov [esi+0Ch] edi +
mov dword ptr [esi+10h] 201h +
mov dword ptr [esi+14h] 6 +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+4] edi +
call sub_101D3DC  +
push 4  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_101D454  +
mov ecx eax +
call sub_101D45D  +
pop edi  +
mov [esi+24h] eax +
pop esi  +
retn   +
xor eax eax +
jmp loc_101D44E  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101D489  +
mov [esi] eax +
call sub_101D47E  +
mov ecx eax +
call sub_101D1FC  +
mov eax esi +
pop esi  +
retn   +
***
retn   +
***
call sub_100208C  +
mov eax dword_108A284 +
mov esi eax +
test eax eax +
jnz loc_101D517  +
push eax  +
lea ecx [ebp-10h] +
call sub_1014DE0  +
mov eax dword_108A284 +
and [ebp-4] esi +
mov esi eax +
test eax eax +
jnz loc_101D50B  +
push 34h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-14h] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_101D51F  +
push esi  +
call sub_101D899  +
mov esi eax +
push esi  +
mov byte ptr [ebp-4] 0 +
call sub_101BC79  +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 3Fh +
mov [esp+8+var_8] offset loc_101D524 +
call sub_101C2ED  +
mov ecx esi +
mov dword_108A288 esi +
call sub_101D1FC  +
mov eax dword_108A288 +
mov dword_108A290 eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call sub_1014DB4  +
mov eax esi +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_101D4D4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1008844 +
call sub_101BCA8  +
and dword ptr [ebp-4] 0 +
push 4  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_101D573  +
mov ecx eax +
call sub_101D45D  +
mov ecx esi +
mov [esi+38h] eax +
call sub_101D57C  +
mov eax esi +
call sub_1002061  +
retn   +
xor eax eax +
jmp loc_101D561  +
***
lea edx [ecx+18h] +
mov [ecx+20h] edx +
lea edx [ecx+1Ch] +
mov [ecx+24h] edx +
lea edx [ecx+28h] +
mov [ecx+30h] edx +
lea eax [ecx+8] +
mov [ecx+10h] eax +
lea edx [ecx+2Ch] +
mov [ecx+34h] edx +
xor edx edx +
lea eax [ecx+0Ch] +
mov [ecx+14h] eax +
mov [eax] edx +
mov eax [ecx+24h] +
mov [eax] edx +
mov eax [ecx+34h] +
mov [eax] edx +
mov eax [ecx+10h] +
mov [eax] edx +
mov eax [ecx+20h] +
mov [eax] edx +
mov eax [ecx+30h] +
mov [eax] edx +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-14h] esi +
xor edi edi +
xor eax eax +
inc edi  +
mov [ebp-10h] eax +
cmp [ebp+10h] eax +
jz loc_101D5FB  +
mov dword ptr [esi] offset dword_101D630 +
mov dword ptr [esi+8] offset dword_101B838 +
mov dword ptr [esi+54h] offset off_101CF14 +
mov [ebp-4] eax +
mov [ebp-10h] edi +
push eax  +
lea ebx [esi+0Ch] +
push ebx  +
mov ecx esi +
call sub_101DDAC  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
mov eax [eax+4] +
push dword ptr [ebp+8]  +
mov ecx ebx +
mov [ebp-4] edi +
mov dword ptr [esi+eax] offset off_101B844 +
call sub_101D63D  +
mov eax esi +
call sub_1002061  +
retn 0Ch  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_101D52B  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_10088C4 +
cmp dword ptr [eax+18h] 8 +
mov ebx [eax+14h] +
jb loc_10371F4  +
mov edi [eax+4] +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_101BAD5  +
push eax  +
push ebx  +
push edi  +
mov ecx esi +
call sub_101D693  +
mov eax esi +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
and dword ptr [esi+3Ch] 0 +
mov [esi+40h] eax +
test ebx ebx +
jz loc_101D70A  +
and eax 6 +
cmp al 6 +
jz loc_101D70A  +
push edi  +
push 0  +
push ebx  +
call sub_101428F  +
push ebx  +
push [ebp+arg_0]  +
mov edi eax +
push ebx  +
push edi  +
call sub_1014379  +
test byte ptr [esi+40h] 4 +
lea ebx [edi+ebx*2] +
mov [esi+3Ch] ebx +
jnz loc_101D6E0  +
push ebx  +
push edi  +
push edi  +
mov ecx esi +
call sub_102CCD5  +
mov eax [esi+40h] +
test al 2 +
jnz loc_101D705  +
test al 10h +
mov eax ebx +
jnz loc_101D6EF  +
mov eax edi +
push ebx  +
push eax  +
push edi  +
mov ecx esi +
call sub_102CCFF  +
mov eax [esi+20h] +
cmp dword ptr [eax] 0 +
jz loc_104425C  +
or dword ptr [esi+40h] 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_101D738 +
mov [eax+4] ecx +
mov dword ptr [eax+8] 28Ah +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_101D7B0 +
mov [eax+4] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_101D83C +
call sub_100BD0F  +
mov eax [ebp+arg_0] +
and dword ptr [esi+14h] 0 +
and dword ptr [esi+18h] 0 +
mov [esi+10h] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi+4] 1 +
xor eax eax +
mov [ebp-4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov al [ebp+8] +
push offset dword_101B840  +
lea ecx [esi+18h] +
mov dword ptr [esi] offset off_1014AF4 +
mov [esi+14h] al +
call sub_101D8E7  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_1014D34  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_101C2ED  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 0  +
mov ecx esi +
call sub_101D94D  +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_1045AB7  +
mov eax [esi+20h] +
and dword ptr [esi+1Ch] 0 +
test eax eax +
jnz loc_1045ACC  +
and dword ptr [esi+20h] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+20h] +
test esi esi +
jnz loc_1045AA3  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10020DC  +
mov eax [ebp+8] +
mov esi [ebp+0Ch] +
push 1  +
push 3  +
push eax  +
lea ecx [ebp-0B4h] +
call sub_101D5C3  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-2Ch] +
call sub_101CA24  +
mov byte ptr [ebp-4] 1 +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-0B4h] +
push eax  +
call sub_101BF6B  +
pop ecx  +
pop ecx  +
mov ecx [eax] +
mov ecx [ecx+4] +
add ecx eax +
mov eax [ecx+8] +
and al 6 +
movsx eax al +
neg eax  +
sbb eax eax +
not eax  +
test eax ecx +
jnz loc_102CD66  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0B4h] +
call sub_101D9F8  +
call sub_1002119  +
retn 8  +
***
mov edi edi +
push esi  +
lea esi [ecx+54h] +
mov ecx esi +
call sub_101CE49  +
push esi  +
mov dword ptr [esi] offset off_101CD98 +
call sub_101DA19  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+4] 0 +
ja loc_1045AE1  +
push esi  +
call sub_101D913  +
pop ecx  +
mov ecx [esi+24h] +
test ecx ecx +
jz loc_101DA41  +
push 1  +
call sub_101DA49  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1014D59  +
test [ebp+arg_0] 1 +
jz loc_101DA63  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??0CControlBar@@IAE@XZ  +
mov eax [ebp+arg_0] +
mov [esi+7Ch] eax +
mov dword ptr [esi] offset off_100370C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_101DABC +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_101DBF4 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
mov ecx [ecx+4] +
and [ebp+var_4] 0 +
call sub_101DD2E  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+String] 0 +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push offset word_100219C  +
mov edi ecx +
call sub_1014FD3  +
test eax eax +
jnz loc_101DD8D  +
lea eax [ebp+Uuid] +
push eax  +
call ds:UuidCreate  +
test eax eax +
jnz loc_101DD8D  +
lea eax [ebp+String] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
call ds:UuidToStringW  +
test eax eax +
jnz loc_101DD8D  +
push [ebp+String]  +
mov ecx edi +
call sub_10142F1  +
lea eax [ebp+String] +
push eax  +
call ds:RpcStringFreeW  +
push edi  +
mov ecx esi +
call sub_1014F22  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100207A  +
leave   +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-14h] esi +
xor eax eax +
mov [ebp-10h] eax +
cmp [ebp+0Ch] eax +
jnz loc_10498BA  +
mov ecx [esi] +
mov ecx [ecx+4] +
mov dword ptr [esi+ecx] offset off_101CEB8 +
mov [esi+4] eax +
push eax  +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [esi+8] +
mov dword ptr [ebp-4] 2 +
call sub_101C482  +
mov eax [esi] +
mov eax [eax+4] +
mov dword ptr [esi+eax] offset off_101DE04 +
mov eax esi +
call sub_1002061  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push 0  +
call sub_101BF29  +
and dword ptr [ebp-4] 0 +
lea edi [esi+10h] +
mov ecx edi +
call sub_101CA24  +
push dword ptr [ebp+8]  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_101DE5A  +
mov eax [ebp+0Ch] +
and dword ptr [esi+2Ch] 0 +
mov [esi+30h] eax +
mov eax esi +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
call sub_1014F52  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
xor ebx ebx +
mov [ebp-14h] ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-4] ebx +
call sub_101D96C  +
lea ecx [ebp-24h] +
call sub_101BDEF  +
mov edi eax +
cmp edi ebx +
jbe loc_101DEE5  +
push offset aRestart  +
lea ecx [ebp-40h] +
call sub_10142C5  +
mov esi [ebp-20h] +
push eax  +
push esi  +
mov byte ptr [ebp-4] 1 +
call sub_102CFA5  +
pop ecx  +
pop ecx  +
push ebx  +
push 1  +
lea ecx [ebp-40h] +
mov [ebp+0Bh] al +
mov [ebp-4] bl +
call sub_1012F94  +
cmp [ebp+0Bh] bl +
jnz loc_1049944  +
lea ecx [ebp-24h] +
call sub_1014B4F  +
mov eax [ebp-14h] +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101DF3B  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+45h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_101DF6E  +
cmp eax ebx +
jz loc_101DF4E  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_101DF57  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_101DF60  +
mov [ecx] ebx +
mov [eax+45h] bl +
mov byte ptr [eax+44h] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1049989  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 48h +
jb loc_1049990  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101DFD0  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+2Dh] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_101E003  +
cmp eax ebx +
jz loc_101DFE3  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_101DFEC  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_101DFF5  +
mov [ecx] ebx +
mov [eax+2Dh] bl +
mov byte ptr [eax+2Ch] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_10499A9  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 30h +
jb loc_10499B0  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+370h] +
push edi  +
mov edi ds:DestroyIcon +
test eax eax +
jz loc_101E0F4  +
push eax  +
call edi  +
mov eax [esi+374h] +
test eax eax +
jz loc_101E101  +
push eax  +
call edi  +
mov eax [esi+378h] +
test eax eax +
jz loc_101E10E  +
push eax  +
call edi  +
mov esi [esi+37Ch] +
test esi esi +
jz loc_101E11B  +
push esi  +
call edi  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
lea esi dword_108B2B8[edi] +
mov ecx [esi] +
test ecx ecx +
jnz loc_103E38E  +
add edi 4 +
cmp edi 74h +
jb loc_101E129  +
pop edi  +
pop esi  +
retn   +
***
cmp dword_108A2CC 0 +
jz loc_101E15C  +
mov ecx offset off_108A2C8 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
cmp dword_108A2DC 0 +
jz loc_101E16F  +
mov ecx offset off_108A2D8 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
cmp dword_108A2D4 0 +
jz loc_101E182  +
mov ecx offset off_108A2D0 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
cmp dword_108A2E4 0 +
jz nullsub_4  +
mov ecx offset off_108A2E0 +
jmp ?DeleteObject@CGdiObject@@QAEHXZ  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1014065  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100B0C0 +
jz loc_101E1C4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jz loc_1041219  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edx [eax] +
jmp loc_10141A0  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+0C8h] +
mov eax [esi] +
test eax eax +
jz loc_101E228  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
push 0  +
push esi  +
call sub_101403C  +
lea eax [edi+0CCh] +
cmp dword ptr [eax] 0 +
pop edi  +
pop esi  +
jz locret_101E23D  +
push 0  +
push eax  +
call sub_101403C  +
retn   +
***
mov edi edi +
push ebx  +
push edi  +
mov edi ecx +
xor ebx ebx +
cmp [edi+3F4h] bl +
jnz loc_10419F8  +
pop edi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+68h] +
call sub_100BAC8  +
lea ecx [esi+1Ch] +
pop esi  +
jmp sub_100BAC8  +
***
add edi 4 +
jmp loc_1014E99  +
lea edx [esi+4] +
jmp loc_1014EA8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+10h] +
call sub_100CAB5  +
lea ecx [esi+4] +
pop esi  +
jmp sub_100BAC8  +
***
mov [eax+4] ebx +
jmp loc_101EBBE  +
mov [esi+8] ebx +
jmp loc_101EBBE  +
cmp byte ptr [ebx+1Dh] 0 +
jz sub_1041EED  +
mov eax esi +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_101EBDE  +
mov byte ptr [eax+1Ch] 1 +
push esi  +
mov byte ptr [esi+1Ch] 0 +
call sub_10147F3  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
jmp loc_101EC09  +
***
mov [ebx+4] esi +
jmp loc_101ED97  +
mov [eax+4] ebx +
jmp loc_101EDB0  +
mov [esi+8] ebx +
jmp loc_101EDB0  +
cmp byte ptr [ebx+1Dh] 0 +
jz sub_104219F  +
mov eax esi +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_101EDD0  +
mov byte ptr [eax+1Ch] 1 +
push esi  +
mov byte ptr [esi+1Ch] 0 +
call sub_10147F3  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
jmp loc_101EDFB  +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
mov ecx dword_108B180 +
xor edi edi +
mov [ebp-18h] ecx +
mov dword_108B180 edi +
mov ecx [esi+50h] +
xor eax eax +
cmp ecx edi +
jnz loc_104288F  +
mov ecx [ebp-18h] +
mov dword_108B180 ecx +
mov [esi+4Ch] edi +
mov esi [esi+48h] +
cmp esi edi +
jz loc_101E372  +
mov [esi+70h] edi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CWnd@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_101E397  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx offset off_108A2F8 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx offset off_108A300 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx offset off_108A308 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx offset off_108A310 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx offset off_108A2E8 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx offset off_108A2F0 +
jmp ?DeleteObject@CGdiObject@@QAEHXZ  +
***
cmp dword ptr [ecx+8] 0 +
jnz locret_101E3F2  +
push dword ptr [ecx+0Ch]  +
call GdiplusShutdown  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_101293C +
jz loc_101E413  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+6Ch] +
mov esi [eax] +
cmp esi eax +
jnz loc_1043E03  +
lea ecx [edi+68h] +
pop edi  +
pop esi  +
jmp sub_100BAE6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax] +
cmp esi eax +
jz loc_101E475  +
mov ecx [esi+10h] +
test ecx ecx +
jz loc_101E462  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
call sub_100C346  +
mov esi [eax] +
cmp esi [edi+4] +
jnz loc_101E454  +
pop edi  +
pop esi  +
leave   +
retn   +
***
call sub_10020DC  +
mov eax ecx +
mov ecx [ebp+8] +
mov [ebp-38h] eax +
mov eax [eax+4] +
mov [ebp-3Ch] ecx +
mov ecx [eax] +
mov [ebp-30h] ecx +
cmp ecx eax +
jz loc_101E4CD  +
xor ebx ebx +
lea esi [ecx+10h] +
lea edi [ebp-48h] +
movs   +
movs   +
movs   +
mov esi [ebp-44h] +
cmp esi ebx +
jnz loc_1044448  +
lea ecx [ebp-30h] +
call sub_1014A7D  +
mov ecx [ebp-30h] +
mov eax [ebp-38h] +
cmp ecx [eax+4] +
jnz loc_101E4A6  +
call sub_1002119  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax] +
cmp esi eax +
jz loc_101E511  +
push ebx  +
mov ebx [esi+10h] +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
call sub_100C346  +
mov esi [eax] +
test ebx ebx +
jz loc_101E50B  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax]  +
cmp esi [edi+4] +
jnz loc_101E4EE  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
call sub_100208C  +
mov edi ecx +
mov [ebp-10h] edi +
mov eax [edi+4] +
mov ebx [eax] +
cmp ebx eax +
jz loc_101E5A3  +
lea eax [ebx+10h] +
push eax  +
lea ecx [ebp-24h] +
call sub_100CCE5  +
mov eax [ebp-20h] +
mov esi [eax] +
and dword ptr [ebp-4] 0 +
cmp esi eax +
jz loc_101E584  +
mov edi [esi+8] +
mov eax [edi+14h] +
test eax eax +
jnz loc_103C72A  +
mov eax [edi+10h] +
test eax eax +
jnz loc_103C736  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
push esi  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-24h] +
call sub_100BA88  +
mov esi [eax] +
cmp esi [ebp-20h] +
jnz loc_101E54D  +
mov edi [ebp-10h] +
push ebx  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_101ED57  +
mov ebx [eax] +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call sub_100BAC8  +
cmp ebx [edi+4] +
jnz loc_101E534  +
call sub_1002061  +
retn   +
***
lea eax [ecx+4] +
mov dword ptr [ecx] offset off_1014AD4 +
mov ecx [ecx+0Ch] +
mov dword ptr [eax] offset off_1014C40 +
test ecx ecx +
jnz loc_10447A7  +
retn   +
***
jmp ds:?PostNcDestroy@CView@@MAEXXZ  +
***
mov edi edi +
push esi  +
mov esi offset unk_108C538 +
mov ecx [esi] +
test ecx ecx +
jnz loc_103C742  +
add esi 4 +
cmp esi offset stru_108C578 +
jl loc_101E62E  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102DF24  +
test byte ptr [ebp+8] 1 +
jz loc_101E664  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1007C14 +
call sub_101ECA3  +
test byte ptr [ebp+8] 1 +
jz loc_101E690  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jnz loc_1048816  +
test eax eax +
jnz loc_101E6E6  +
mov ecx esi +
call sub_1014146  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov [ebx+4] esi +
jmp loc_100C386  +
push ebx  +
call sub_1021219  +
mov ecx [ebp-10h] +
jmp loc_100C3AE  +
mov byte ptr [eax+14h] 1 +
push esi  +
mov byte ptr [esi+14h] 0 +
call sub_1014074  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
jmp loc_100C3EA  +
mov edx [eax] +
mov byte ptr [edx+14h] 1 +
push eax  +
mov byte ptr [eax+14h] 0 +
call sub_10140BF  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
jmp loc_100C419  +
mov [esi+8] ebx +
jmp loc_100C39B  +
***
mov eax offset __imp_GdiplusShutdown +
jmp loc_100ABE3  +
***
mov ecx offset off_108A2C8 +
jmp sub_1002407  +
***
mov off_108A2D0 offset off_100A058 +
mov ecx offset off_108A2D0 +
jmp sub_1002407  +
***
mov ecx offset off_108A2D8 +
jmp sub_1002407  +
***
mov ecx offset off_108A2E0 +
jmp sub_1002407  +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
call sub_100CAB5  +
mov dword_108ADE8 offset off_10023C4 +
retn   +
***
call sub_100CAB5  +
mov dword_108AE40 offset off_10023C4 +
retn   +
***
jmp sub_101F38C  +
***
mov ecx offset dword_108BBA4 +
jmp ??1CString@@QAE@XZ  +
***
jmp ??1CString@@QAE@XZ  +
***
mov off_108A2E8 offset off_1002208 +
mov ecx offset off_108A2E8 +
jmp sub_1002407  +
***
mov ecx offset off_108A2F0 +
jmp sub_1002407  +
***
mov ecx offset off_108A2F8 +
jmp sub_1002407  +
***
mov ecx offset off_108A300 +
jmp sub_1002407  +
***
mov off_108A308 offset off_1002208 +
mov ecx offset off_108A308 +
jmp sub_1002407  +
***
mov ecx offset off_108A310 +
jmp sub_1002407  +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
jmp sub_1014D59  +
***
jmp loc_101F7A0  +
***
mov ecx [ebp-10h] +
jmp loc_101EBCD  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+1Dh] 0 +
jnz loc_1041E99  +
lea ecx [ebp+0Ch] +
call sub_1014A7D  +
mov edx [edi] +
cmp byte ptr [edx+1Dh] 0 +
jz loc_1041ECB  +
mov ebx [edi+8] +
cmp byte ptr [ebx+1Dh] 0 +
mov esi [edi+4] +
jnz loc_101EBA5  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jz loc_101E2A0  +
cmp [esi] edi +
jnz loc_101E2A8  +
mov [esi] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_101EBD2  +
cmp byte ptr [ebx+1Dh] 0 +
jz sub_101EB56  +
mov eax esi +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jz loc_101E2B0  +
cmp byte ptr [edi+1Ch] 1 +
jnz loc_101EC53  +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_101EC4F  +
cmp byte ptr [ebx+1Ch] 1 +
jnz loc_101EC4F  +
mov eax [esi] +
cmp ebx eax +
jnz loc_1041F77  +
mov eax [esi+8] +
cmp byte ptr [eax+1Ch] 0 +
jz loc_101E2C7  +
cmp byte ptr [eax+1Dh] 0 +
jnz loc_101EC24  +
mov edx [eax] +
cmp byte ptr [edx+1Ch] 1 +
jnz loc_101EC2B  +
mov edx [eax+8] +
cmp byte ptr [edx+1Ch] 1 +
jnz loc_101EC2B  +
mov byte ptr [eax+1Ch] 0 +
mov ebx esi +
mov esi [esi+4] +
jmp loc_101EBE4  +
mov edx [eax+8] +
cmp byte ptr [edx+1Ch] 1 +
jz loc_1041F5C  +
mov dl [esi+1Ch] +
mov [eax+1Ch] dl +
mov byte ptr [esi+1Ch] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+1Ch] 1 +
call sub_10147F3  +
mov byte ptr [ebx+1Ch] 1 +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_101EC68  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101ECA3  +
test byte ptr [ebp+8] 1 +
jz loc_101EC97  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+80h] +
mov dword ptr [esi] offset off_100796C +
call sub_100CAB5  +
mov eax offset off_100B0C0 +
mov [esi+74h] eax +
mov [esi+68h] eax +
mov dword ptr [esi] offset off_1007814 +
pop esi  +
retn   +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_101ED2B  +
mov esi [esi] +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+1Dh] 0 +
pop ecx  +
mov edi esi +
jnz loc_101ED40  +
jmp loc_101ED09  +
***
mov edi edi +
mov ecx [ebp-10h] +
jmp loc_101EDBF  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+1Dh] 0 +
jnz loc_104214B  +
lea ecx [ebp+0Ch] +
call sub_1014A7D  +
mov edx [edi] +
cmp byte ptr [edx+1Dh] 0 +
jz loc_104217D  +
mov ebx [edi+8] +
cmp byte ptr [ebx+1Dh] 0 +
mov esi [edi+4] +
jz loc_101E2E0  +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jz loc_101E2E8  +
cmp [esi] edi +
jnz loc_101E2F0  +
mov [esi] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_101EDC4  +
cmp byte ptr [ebx+1Dh] 0 +
jz sub_101ED47  +
mov eax esi +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jz loc_101E2F8  +
cmp byte ptr [edi+1Ch] 1 +
jnz loc_101EE45  +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_101EE41  +
cmp byte ptr [ebx+1Ch] 1 +
jnz loc_101EE41  +
mov eax [esi] +
cmp ebx eax +
jnz loc_1042229  +
mov eax [esi+8] +
cmp byte ptr [eax+1Ch] 0 +
jz loc_101E30F  +
cmp byte ptr [eax+1Dh] 0 +
jnz loc_101EE16  +
mov edx [eax] +
cmp byte ptr [edx+1Ch] 1 +
jnz loc_101EE1D  +
mov edx [eax+8] +
cmp byte ptr [edx+1Ch] 1 +
jnz loc_101EE1D  +
mov byte ptr [eax+1Ch] 0 +
mov ebx esi +
mov esi [esi+4] +
jmp loc_101EDD6  +
mov edx [eax+8] +
cmp byte ptr [edx+1Ch] 1 +
jz loc_104220E  +
mov dl [esi+1Ch] +
mov [eax+1Ch] dl +
mov byte ptr [esi+1Ch] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+1Ch] 1 +
call sub_10147F3  +
mov byte ptr [ebx+1Ch] 1 +
push edi  +
call sub_101EE75  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_101EE60  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_101EE8D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+10h] +
call sub_100BAC8  +
test [ebp+arg_0] 1 +
jnz loc_1041FE8  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101EED9  +
test byte ptr [ebp+8] 1 +
jz loc_101EECD  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+3Ch] +
mov dword ptr [esi] offset off_10078BC +
call sub_100BAC8  +
lea ecx [esi+2Ch] +
call sub_100CAB5  +
mov dword ptr [esi] offset off_1007814 +
pop esi  +
retn   +
***
push 3  +
push 10h  +
push offset dword_108C494  +
call sub_101EF48  +
retn   +
***
call sub_102E8A8  +
and dword ptr [ebp-1Ch] 0 +
mov esi [ebp+0Ch] +
mov eax esi +
imul eax [ebp+10h] +
add [ebp+8] eax +
and dword ptr [ebp-4] 0 +
dec dword ptr [ebp+10h]  +
js loc_101EF94  +
sub [ebp+8] esi +
mov ecx [ebp+8] +
call dword ptr [ebp+14h]  +
jmp loc_101EF68  +
mov dword ptr [ebp-1Ch] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_101EFB4  +
call sub_102E894  +
retn 10h  +
***
cmp dword ptr [ebp-1Ch] 0 +
jz loc_1045C09  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_101EFE3  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_101EFF6  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101F015  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jz loc_101F02E  +
push esi  +
call sub_102132B  +
add esi 20h +
jmp loc_101F01E  +
pop esi  +
pop ebp  +
retn 10h  +
***
test esi esi +
jz loc_101F061  +
push 1  +
mov ecx esi +
call sub_101E3F8  +
jmp loc_101F061  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_101F033  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_101F095  +
test esi esi +
jz loc_101F095  +
push 1  +
mov ecx esi +
call sub_101F0A2  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101F0C8  +
test [ebp+arg_0] 1 +
jz loc_101F0BC  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
lea eax [ecx+4] +
cmp byte ptr [eax+18h] 0 +
jnz loc_1041109  +
retn   +
***
mov dword ptr [ecx] offset off_100370C +
jmp ??1CControlBar@@UAE@XZ  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+34h] 0 +
jz loc_101F12B  +
mov ecx [esi+4] +
call sub_10214A1  +
mov ecx [esi+4] +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
push 40h  +
mov eax (offset loc_10826EC+1) +
call sub_10020DC  +
mov esi ecx +
lea eax [esi+1Ch] +
push eax  +
lea eax [ebp-4Ch] +
push offset aSoftwareMicros  +
push eax  +
xor ebx ebx +
call sub_1014ED6  +
and [ebp-4] ebx +
push offset aRecovery  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_101F1BF  +
add esp 18h +
push ebx  +
push 1  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1012F94  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jb loc_1049B18  +
lea ecx [ebp-30h] +
push ecx  +
push 0F003Fh  +
push 0  +
push eax  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_1049B20  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
mov eax ebx +
call sub_1002119  +
retn   +
***
call sub_100208C  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-2Ch] +
call sub_1014F22  +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
mov ecx eax +
call sub_101F20B  +
mov ecx [ebp+8] +
push eax  +
call sub_1014F22  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
mov eax [ebp+8] +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_101F217  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_0]  +
call sub_101F238  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push ebx  +
mov esi ecx +
call sub_1014189  +
test al al +
jnz loc_10499C9  +
or eax 0FFFFFFFFh +
sub eax [esi+14h] +
cmp eax [ebp+arg_4] +
jbe loc_10499EC  +
cmp [ebp+arg_4] 0 +
jbe loc_101F2A3  +
push edi  +
mov edi [esi+14h] +
add edi [ebp+arg_4] +
push 0  +
push edi  +
mov ecx esi +
call sub_10141BD  +
test al al +
jz loc_101F2A2  +
mov eax [esi+18h] +
cmp eax 8 +
jb loc_101F2AB  +
mov edx [esi+4] +
push [ebp+arg_4]  +
mov ecx [esi+14h] +
push ebx  +
sub eax ecx +
push eax  +
lea eax [edx+ecx*2] +
push eax  +
call sub_1014379  +
push edi  +
mov ecx esi +
call sub_1012FDB  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
lea edx [esi+4] +
jmp loc_101F287  +
***
and eax offset ?OnDestroy@CView@@IAEXXZ +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push 0  +
lea ecx [ebp-4] +
call sub_1014DE0  +
mov eax dword_108A280 +
test eax eax +
jz loc_101F371  +
mov ecx eax +
mov eax [eax] +
push 1  +
mov dword_108A280 eax +
call sub_1020A67  +
jmp loc_101F356  +
***
lea ecx [ebp-4] +
call sub_1014DB4  +
leave   +
retn   +
***
mov ecx offset unk_108AEA0 +
jmp sub_101F38C  +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_102DDB4 +
xor edi edi +
mov [ebp-4] edi +
lea ecx [esi+0Ch] +
mov byte ptr [ebp-4] 7 +
cmp ecx edi +
jz loc_101F3BC  +
cmp [ecx+4] edi +
jnz loc_103C6E3  +
lea ecx [esi+4] +
cmp ecx edi +
jz loc_101F3CC  +
cmp [ecx+4] edi +
jnz loc_103C6ED  +
mov eax [esi+4Ch] +
cmp eax edi +
jnz loc_103C6F7  +
mov eax [esi+50h] +
cmp eax edi +
jnz loc_103C70B  +
lea ecx [esi+14h] +
call ?DeleteDC@CDC@@QAEHXZ  +
lea ecx [esi+24h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+34h] +
call ?DeleteDC@CDC@@QAEHXZ  +
lea ecx [esi+44h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov eax [esi+0B0h] +
cmp eax edi +
jnz loc_103E3F5  +
mov ecx [esi+0ACh] +
cmp ecx edi +
jnz loc_103E401  +
mov dword ptr [ebp-4] 6 +
lea ecx [esi+44h] +
mov edi offset off_1002208 +
mov byte ptr [ebp-4] 5 +
mov [ecx] edi +
call sub_1002407  +
lea ecx [esi+34h] +
mov byte ptr [ebp-4] 4 +
call ??1CDC@@UAE@XZ  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 3 +
mov [ecx] edi +
call sub_1002407  +
lea ecx [esi+14h] +
mov byte ptr [ebp-4] 2 +
call ??1CDC@@UAE@XZ  +
lea ecx [esi+0Ch] +
mov edi offset off_102DD4C +
mov byte ptr [ebp-4] 1 +
mov [ecx] edi +
call sub_1002407  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 0 +
mov [ecx] edi +
call sub_1002407  +
mov dword ptr [esi] offset off_10023C4 +
call sub_1002061  +
retn   +
***
mov ecx offset unk_108AF60 +
jmp sub_101F49C  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10024E4 +
mov dword ptr [esi+0C4h] offset off_100577C +
lea ecx [esi+448h] +
mov dword ptr [ebp-4] 18h +
call ??1CString@@QAE@XZ  +
lea ecx [esi+444h] +
mov byte ptr [ebp-4] 17h +
call ??1CString@@QAE@XZ  +
lea ecx [esi+440h] +
mov byte ptr [ebp-4] 16h +
call ??1CString@@QAE@XZ  +
lea ecx [esi+428h] +
mov byte ptr [ebp-4] 15h +
call sub_1020739  +
lea ecx [esi+41Ch] +
mov byte ptr [ebp-4] 14h +
call sub_101F657  +
lea ecx [esi+410h] +
mov byte ptr [ebp-4] 13h +
call sub_101F808  +
lea ecx [esi+404h] +
mov byte ptr [ebp-4] 12h +
call sub_101F808  +
lea ecx [esi+3F8h] +
mov byte ptr [ebp-4] 11h +
call sub_101F657  +
lea ecx [esi+3E4h] +
mov byte ptr [ebp-4] 10h +
call sub_101E3E4  +
lea ecx [esi+3CCh] +
mov byte ptr [ebp-4] 0Fh +
call ??1CString@@QAE@XZ  +
lea ecx [esi+314h] +
mov byte ptr [ebp-4] 0Eh +
call ??1CString@@QAE@XZ  +
lea ecx [esi+278h] +
mov byte ptr [ebp-4] 0Dh +
mov dword ptr [ecx] offset off_102DB20 +
call sub_1002407  +
lea ecx [esi+268h] +
mov byte ptr [ebp-4] 0Ch +
call ??1CString@@QAE@XZ  +
lea ecx [esi+264h] +
mov byte ptr [ebp-4] 0Bh +
call ??1CString@@QAE@XZ  +
lea ecx [esi+25Ch] +
mov byte ptr [ebp-4] 0Ah +
call ??1CString@@QAE@XZ  +
lea ecx [esi+258h] +
mov byte ptr [ebp-4] 9 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+254h] +
mov byte ptr [ebp-4] 8 +
call ??1CString@@QAE@XZ  +
mov byte ptr [ebp-4] 7 +
lea ecx [esi+250h] +
call ??1CString@@QAE@XZ  +
lea ecx [esi+1BCh] +
mov byte ptr [ebp-4] 6 +
call ??1COleObjectFactory@@UAE@XZ  +
mov eax [esi+1A4h] +
mov byte ptr [ebp-4] 5 +
test eax eax +
jnz loc_1042668  +
mov eax [esi+1A0h] +
mov byte ptr [ebp-4] 4 +
test eax eax +
jnz loc_1042673  +
lea ecx [esi+114h] +
call sub_101E25F  +
lea ecx [esi+0F0h] +
call sub_101E28A  +
mov eax [esi+0CCh] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jnz loc_104267E  +
mov eax [esi+0C8h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jnz loc_1042689  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CWinApp@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101F68B  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_101F6B9  +
cmp [ebp+arg_8] eax +
jnz loc_101F6B9  +
mov ecx esi +
call sub_101F6C8  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_101F6AF  +
jmp loc_10420CB  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_101ED2B  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
jmp sub_101F701  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10044D4 +
and dword ptr [ebp-4] 0 +
lea ecx [esi+50h] +
call ??1CObArray@@UAE@XZ  +
mov dword ptr [esi] offset off_10023C4 +
call sub_1002061  +
retn   +
***
mov ecx offset unk_108B4B8 +
jmp sub_101F74C  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_102DE18 +
mov dword ptr [ebp-4] 1 +
call sub_1011CCE  +
lea ecx [esi+6C0h] +
mov byte ptr [ebp-4] 0 +
call ??1CObList@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101FD71  +
call sub_1002061  +
retn   +
***
mov ecx offset unk_108BBA0 +
jmp loc_101F7A0  +
push offset dword_108B3B8  +
call ds:InterlockedDecrement  +
test eax eax +
jge locret_101F7C8  +
push esi  +
mov esi offset stru_108C578 +
push esi  +
call sub_1014B3A  +
add esi 18h +
cmp esi offset unk_108C5D8 +
pop ecx  +
jl loc_101F7B5  +
pop esi  +
retn   +
***
jmp loc_101F7ED  +
dec dword_108A294  +
mov eax dword_108A294 +
mov eax dword_108C46C[eax*4] +
test eax eax +
jz loc_101F7ED  +
call eax  +
cmp dword_108A294 0 +
jnz loc_101F7D5  +
retn   +
***
mov ecx offset unk_108B3C8 +
jmp sub_101F808  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101F83C  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_101F86A  +
cmp [ebp+arg_8] eax +
jnz loc_101F86A  +
mov ecx esi +
call sub_101F879  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_101F860  +
jmp loc_1048F49  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_101F8A6  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+15h] 0 +
mov ebx ecx +
mov esi edi +
jz loc_1045CE9  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
lea eax [ebp-20Ch] +
push eax  +
push 104h  +
mov edi offset aView +
push edi  +
mov esi ecx +
call sub_10149ED  +
test al al +
jz loc_101F952  +
xor ebx ebx +
push ebx  +
lea eax [ebp-210h] +
push eax  +
push ebx  +
push 2001Fh  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp-20Ch] +
push eax  +
push 80000001h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_101F952  +
push 2Ch  +
lea eax [esi+2C0h] +
push eax  +
push 3  +
push ebx  +
push offset ValueName  +
push dword ptr [ebp-210h]  +
call ds:RegSetValueExW  +
push dword ptr [ebp-210h]  +
call ds:RegCloseKey  +
push dword ptr [esi+220h]  +
mov ecx esi +
push offset aShowthumbnail  +
push edi  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
mov ecx [esi+2ECh] +
mov eax 1388h +
cmp ecx eax +
jg loc_101F99B  +
lea ebx [esi+2F0h] +
cmp [ebx] eax +
jg loc_101F99B  +
push ecx  +
push (offset aUkukukukbmpwid+10h)  +
push edi  +
mov ecx esi +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [ebx]  +
mov ecx esi +
push offset aBmpheight  +
push edi  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+284h]  +
mov ecx esi +
push offset aThumbxpos  +
push edi  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+288h]  +
mov ecx esi +
push offset aThumbypos  +
push edi  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
mov eax [esi+28Ch] +
sub eax [esi+284h] +
mov ecx esi +
push eax  +
push offset aThumbwidth  +
push edi  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
mov eax [esi+290h] +
sub eax [esi+288h] +
mov ecx esi +
push eax  +
push offset aThumbheight  +
push edi  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+270h]  +
mov ecx esi +
push offset aUnitsetting  +
push edi  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+26Ch]  +
mov ecx esi +
push offset aShowrulers  +
push edi  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+22Ch]  +
mov ecx esi +
push offset aShowgrid  +
push edi  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+21Ch]  +
mov ecx esi +
push offset aShowstatusbar  +
push edi  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
xor eax eax +
cmp dword_108A1D0 eax +
mov ecx esi +
setz al  +
push eax  +
push offset aNostretching  +
push edi  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+224h]  +
mov ebx offset aText +
push offset aShowtexttool  +
push ebx  +
mov ecx esi +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+2F4h]  +
mov ecx esi +
push offset aPointsize  +
push ebx  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+2F8h]  +
mov ecx esi +
push offset aPositionx  +
push ebx  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+2FCh]  +
mov ecx esi +
push offset aPositiony  +
push ebx  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+300h]  +
mov ecx esi +
push offset aBold  +
push ebx  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+304h]  +
push offset aUnderline  +
push ebx  +
mov ecx esi +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+308h]  +
mov ecx esi +
push offset aItalic  +
push ebx  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+30Ch]  +
mov ecx esi +
push offset aStrikeout  +
push ebx  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+310h]  +
mov ecx esi +
push offset aTextpen  +
push ebx  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+314h]  +
mov ecx esi +
push offset aTypefacename  +
push ebx  +
call ?WriteProfileStringW@CWinApp@@QAEHPBG00@Z  +
push dword ptr [esi+318h]  +
mov ecx esi +
push offset aCharset  +
push ebx  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+31Ch]  +
mov ecx esi +
push offset aSnaptogrid  +
push edi  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push dword ptr [esi+320h]  +
mov ecx esi +
push offset aGridextent  +
push edi  +
call ?WriteProfileInt@CWinApp@@QAEHPBG0H@Z  +
push 20006h  +
mov ecx esi +
call sub_1014945  +
mov edi eax +
test edi edi +
jz loc_101FB7B  +
push edi  +
lea ecx [esi+3F8h] +
call sub_101E47E  +
push edi  +
call ds:RegCloseKey  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100396C +
lea ecx [esi+2B0h] +
mov dword ptr [ebp-4] 7 +
mov dword ptr [ecx] offset off_102DB20 +
call sub_1002407  +
lea ecx [esi+284h] +
call sub_100CAB5  +
lea ecx [esi+22Ch] +
mov byte ptr [ebp-4] 5 +
call ??1CSliderCtrl@@UAE@XZ  +
lea ecx [esi+1A4h] +
mov byte ptr [ebp-4] 4 +
call sub_1021436  +
lea ecx [esi+11Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1021436  +
lea ecx [esi+0DCh] +
mov byte ptr [ebp-4] 2 +
call ??1CStatic@@UAE@XZ  +
lea ecx [esi+9Ch] +
mov byte ptr [ebp-4] 1 +
call ??1CStatic@@UAE@XZ  +
lea ecx [esi+40h] +
mov byte ptr [ebp-4] 0 +
call ??1CToolTipCtrl@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CWnd@@UAE@XZ  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100286C +
mov dword ptr [esi+0A0h] offset off_1009F38 +
and dword ptr [esi+70h] 0 +
lea ecx [esi+0B8h] +
mov dword ptr [ebp-4] 5 +
call sub_101FB9A  +
lea ecx [esi+0B4h] +
mov byte ptr [ebp-4] 4 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+0B0h] +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+0ACh] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+0A8h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+0A4h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101FCE4  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1003854 +
lea edi [esi+80h] +
mov ecx edi +
mov dword ptr [ebp-4] 2 +
call sub_1013469  +
lea ebx [esi+90h] +
mov ecx ebx +
call sub_10133D9  +
mov ecx ebx +
call sub_100CAB5  +
mov ecx edi +
call sub_101EFC4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CStatusBar@@UAE@XZ  +
call sub_1002061  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101FD71  +
test byte ptr [ebp+8] 1 +
jz loc_101FD65  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_102DABC +
xor ebx ebx +
push ebx  +
mov dword ptr [ebp-4] 1 +
call sub_102E6BF  +
cmp [esi+30h] ebx +
jz loc_101FDA3  +
mov ecx esi +
call sub_1012405  +
mov eax [esi+4] +
cmp eax ebx +
jz loc_101FDB0  +
push eax  +
call sub_101FE7E  +
mov eax [esi+3Ch] +
mov edi ds:GlobalFree +
cmp eax ebx +
jnz loc_102173C  +
mov eax [esi+44h] +
cmp eax ebx +
jnz loc_103DD47  +
lea eax [esi+48h] +
push eax  +
push 64h  +
call ds:FreePropVariantArray  +
lea ecx [esi+688h] +
mov [ebp-4] bl +
call ??1CObList@@UAE@XZ  +
mov dword ptr [esi] offset off_10023C4 +
call sub_1002061  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101FE28  +
test byte ptr [ebp+8] 1 +
jz loc_101FE1C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov dword ptr [esi] offset off_102DBF0 +
test eax eax +
jz loc_101FE41  +
push eax  +
call sub_1006809  +
pop ecx  +
mov eax [esi+8] +
test eax eax +
jz loc_101FE4F  +
push eax  +
call sub_1006809  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
mov dword ptr [esi] offset off_10023C4 +
pop esi  +
retn   +
***
call sub_1013351  +
jmp sub_1013309  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_101FF1F  +
cmp esi dword_108AF30 +
jz loc_103EE1B  +
mov ecx [esi+0Ch] +
cmp ecx edi +
jz loc_101FEC8  +
mov eax [esi+18h] +
cmp eax edi +
jz loc_101FEB4  +
push eax  +
push ecx  +
call ds:SelectObject  +
mov eax [esi+28h] +
cmp eax edi +
jnz loc_103EE26  +
push dword ptr [esi+0Ch]  +
call ds:DeleteDC  +
mov eax [esi+14h] +
cmp eax edi +
jz loc_101FED6  +
push eax  +
call ds:DeleteObject  +
mov eax dword_108B1D4 +
cmp eax [esi+24h] +
jnz loc_101FEE6  +
mov dword_108B1D4 edi +
mov ecx [esi+24h] +
cmp ecx edi +
jnz loc_103EE36  +
mov eax [esi+4] +
cmp [eax+4] esi +
jnz loc_101FEFC  +
mov [eax+4] edi +
cmp dword_108A220 esi +
jnz loc_101FF0A  +
mov dword_108A220 edi +
cmp dword_108A1FC esi +
jnz loc_101FF18  +
mov dword_108A1FC edi +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101FF50  +
test byte ptr [ebp+8] 1 +
jz loc_101FF44  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1002A2C +
xor ebx ebx +
mov dword ptr [ebp-4] 2 +
cmp dword_108A24C esi +
jnz loc_101FF7E  +
mov dword_108A24C ebx +
cmp dword_108A244 esi +
jnz loc_101FF8C  +
mov dword_108A244 ebx +
mov ecx [esi+44h] +
cmp ecx ebx +
jz loc_101FF9A  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
call sub_10049FD  +
mov dword_108A21C ebx +
mov dword_108A230 ebx +
cmp dword_108A248 esi +
jz loc_103C71F  +
mov eax [esi+6Ch] +
cmp eax ebx +
jnz loc_1040984  +
lea ecx [esi+9Ch] +
call sub_100CAB5  +
lea ecx [esi+90h] +
mov [ebp-4] bl +
call sub_101321C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CWnd@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1020022  +
test byte ptr [ebp+8] 1 +
jz loc_1020016  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100471C +
mov ecx [esi+0ECh] +
xor eax eax +
inc eax  +
mov [ebp-4] eax +
test ecx ecx +
jz loc_102004F  +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
lea ecx [esi+0F4h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1COleServerDoc@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10200A5  +
test byte ptr [ebp+8] 1 +
jz loc_1020099  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1002B44 +
mov dword ptr [esi+0C0h] offset off_100574C +
mov ecx [esi+4F8h] +
mov dword ptr [ebp-4] 6 +
test ecx ecx +
jz loc_10200DD  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov eax [esi+550h] +
mov byte ptr [ebp-4] 5 +
test eax eax +
jz loc_10200F1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+53Ch] +
mov byte ptr [ebp-4] 4 +
test eax eax +
jz loc_1020105  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+51Ch] +
mov byte ptr [ebp-4] 3 +
call sub_101E5AE  +
lea ecx [esi+504h] +
call sub_100BAC8  +
lea ecx [esi+478h] +
mov byte ptr [ebp-4] 1 +
call sub_101F100  +
lea ecx [esi+0E0h] +
mov byte ptr [ebp-4] 0 +
call sub_101FC4C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CFrameWnd@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1020184  +
test [ebp+arg_0] 1 +
jz loc_1020178  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov ecx [esi+4] +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10201A7  +
push 1  +
call sub_10201BE  +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
call sub_1012F94  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10201E4  +
test [ebp+arg_0] 1 +
jz loc_10201D8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+54h] +
mov dword ptr [ebp-4] 2 +
call sub_1021606  +
lea ecx [esi+48h] +
mov byte ptr [ebp-4] 1 +
call sub_1020232  +
push 0  +
push 1  +
lea ecx [esi+1Ch] +
call sub_1012F94  +
push 0  +
push 1  +
mov ecx esi +
call sub_1012F94  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1020266  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_1020294  +
cmp [ebp+arg_8] eax +
jnz loc_1020294  +
mov ecx esi +
call sub_10202A3  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_102028A  +
jmp loc_1049A81  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_10202D0  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+45h] 0 +
mov ebx ecx +
mov esi edi +
jz loc_1049A33  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102031B  +
test [ebp+arg_0] 1 +
jz loc_102030F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100AD6C +
and dword ptr [ebp-4] 0 +
lea ecx [esi+2Ch] +
call ??1CString@@QAE@XZ  +
mov dword ptr [esi] offset off_100AE14 +
call sub_1002061  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+0D8h] 0 +
push edi  +
mov edi offset unk_108BBC0 +
jz loc_102038C  +
mov ecx [esi+0DCh] +
lea eax [esi+0E8h] +
mov [eax+4] ecx +
mov dword ptr [eax] 1 +
lea eax [esi+0E0h] +
push eax  +
push 2  +
push 1436h  +
push edi  +
call WinSqmAddToStream  +
push edi  +
call WinSqmEndSession  +
mov ecx esi +
call sub_101E243  +
lea ecx [esi+428h] +
call sub_101E51A  +
lea ecx [esi+3F8h] +
call sub_10204FE  +
lea ecx [esi+404h] +
call sub_101E441  +
lea ecx [esi+410h] +
call sub_101E4DA  +
lea ecx [esi+0F0h] +
call sub_102047A  +
lea ecx [esi+114h] +
call sub_101E41F  +
mov ecx [esi+1ACh] +
test ecx ecx +
jz loc_1020402  +
call sub_101F118  +
mov ecx [esi+1ACh] +
test ecx ecx +
jz loc_10203FB  +
push 1  +
call sub_102015E  +
and dword ptr [esi+1ACh] 0 +
lea edi [esi+1B0h] +
mov ecx [edi] +
test ecx ecx +
jz loc_1020418  +
push 1  +
call sub_10202F5  +
and dword ptr [edi] 0 +
add esi 1A8h +
mov ecx [esi] +
test ecx ecx +
jz loc_102042E  +
push 1  +
call sub_1020436  +
and dword ptr [esi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102045C  +
test [ebp+arg_0] 1 +
jz loc_1020450  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+10h] +
call sub_1012F94  +
mov ecx esi +
pop esi  +
jmp sub_1014B4F  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
lea ebx [esi+10h] +
push edi  +
mov ecx ebx +
xor edi edi +
call sub_100B9A1  +
test eax eax +
jbe loc_10204AE  +
mov eax [esi+14h] +
mov ecx [eax+edi*4] +
test ecx ecx +
jz loc_10204A2  +
push 1  +
call sub_10204BD  +
mov ecx ebx +
inc edi  +
call sub_100B9A1  +
cmp edi eax +
jb loc_1020491  +
pop edi  +
pop esi  +
mov ecx ebx +
pop ebx  +
jmp sub_10133D9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10204E3  +
test [ebp+arg_0] 1 +
jz loc_10204D7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10204F7  +
push eax  +
call sub_100C26D  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ecx+4] +
push ebx  +
mov ebx [eax] +
mov [ebp+var_4] ecx +
cmp ebx eax +
jz loc_102055F  +
push esi  +
push edi  +
lea esi [ebx+10h] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
mov ecx [ebp+var_14] +
test ecx ecx +
jz loc_102052C  +
push 1  +
call sub_1020567  +
mov ecx [ebp+var_10] +
test ecx ecx +
jnz loc_1044273  +
cmp [ebp+var_C] 0 +
jz loc_1020546  +
push [ebp+var_C]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp+var_4] +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
call sub_101EB66  +
mov ebx [eax] +
mov eax [ebp+var_4] +
cmp ebx [eax+4] +
jnz loc_1020515  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102058D  +
test [ebp+arg_0] 1 +
jz loc_1020581  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100B940 +
mov ecx [esi+10h] +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10205B5  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
lea ecx [esi+4] +
call sub_100BAC8  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword_108BC04 0 +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov [ebp+var_4] esi +
mov edi 40000000h +
jnz loc_1041C90  +
call sub_101E149  +
call sub_101FE64  +
add esi 450h +
mov ecx [esi] +
xor ebx ebx +
cmp ecx ebx +
jnz loc_1041D4D  +
mov ecx dword_108A1F0 +
cmp ecx ebx +
jz loc_102061B  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov dword_108A1F0 ebx +
mov esi [ebp+var_4] +
cmp [esi+27Ch] ebx +
jz loc_1020631  +
lea ecx [esi+278h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
call sub_101E123  +
call sub_101E3A3  +
mov ecx esi +
call sub_102034F  +
push dword ptr [esi+1B8h]  +
call ds:FreeLibrary  +
call sub_102068C  +
cmp dword_108BC04 ebx +
jnz loc_1041D5B  +
push offset dword_108B3C0  +
call sub_101E1D0  +
mov ecx esi +
call sub_101E208  +
mov ecx esi +
call ?ExitInstance@CWinApp@@UAEHXZ  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
cmp byte_108A2A8 0 +
jz loc_10206B0  +
call sub_1020BA8  +
call sub_101E626  +
push offset unk_108BBBC  +
call GdiplusShutdown  +
mov byte_108A2A8 0 +
xor eax eax +
cmp byte_108A2A8 al +
setz al  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10206F2  +
test byte ptr [ebp+8] 1 +
jz loc_10206E6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+14h] 0 +
mov dword ptr [esi] offset off_1014B80 +
jz loc_102070D  +
push dword ptr [esi+10h]  +
call ds:free  +
pop ecx  +
mov dword ptr [esi] offset off_102071C +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_102076D  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_102079B  +
cmp [ebp+arg_8] eax +
jnz loc_102079B  +
mov ecx esi +
call sub_10207AA  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_1020791  +
jmp loc_10422C1  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_10207D7  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+1Dh] 0 +
mov ebx ecx +
mov esi edi +
jz loc_104229A  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1020822  +
test byte ptr [ebp+8] 1 +
jz loc_1020816  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1002CE4 +
mov dword ptr [esi+44h] offset off_1014110 +
xor edi edi +
mov [ebp-4] edi +
call sub_101E32D  +
mov ecx [esi+48h] +
cmp ecx edi +
jnz loc_1042A98  +
mov ecx [esi+58h] +
cmp ecx edi +
jnz loc_1042AA7  +
mov ecx [esi+5Ch] +
cmp ecx edi +
jnz loc_1042AB6  +
mov ecx [esi+60h] +
cmp ecx edi +
jnz loc_1042AC5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CView@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10208BD  +
test byte ptr [ebp+8] 1 +
jz loc_10208B1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1006EEC +
mov eax [esi+4] +
mov dword ptr [ebp-4] 4 +
test eax eax +
jz loc_10208EC  +
and dword ptr [esi+4] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+8] +
test eax eax +
jz loc_10208FD  +
and dword ptr [esi+8] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_102090E  +
and dword ptr [esi+0Ch] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [esi+10h]  +
call ds:SysFreeString  +
mov eax [esi+0Ch] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jnz loc_1043ADA  +
mov eax [esi+8] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jnz loc_1043AE5  +
mov eax [esi+4] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jnz loc_1043AF0  +
mov dword ptr [esi] offset off_1020954 +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10209AF  +
test byte ptr [ebp+8] 1 +
jz loc_10209A3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10033E4 +
lea edi [esi+44h] +
mov ecx edi +
mov dword ptr [ebp-4] 5 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ebx [esi+4Ch] +
mov ecx ebx +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+54h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+5Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+64h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+64h] +
mov byte ptr [ebp-4] 4 +
mov dword ptr [ecx] offset off_100A058 +
call sub_1002407  +
lea ecx [esi+5Ch] +
mov byte ptr [ebp-4] 3 +
mov dword ptr [ecx] offset off_102DB88 +
call sub_1002407  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 2 +
mov dword ptr [ecx] offset off_102DB88 +
call sub_1002407  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ebx] offset off_102DB20 +
call sub_1002407  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
mov dword ptr [edi] offset off_102DB20 +
call sub_1002407  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CWnd@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1020A8D  +
test [ebp+arg_0] 1 +
jz loc_1020A81  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx [ecx+4] +
call sub_1014D72  +
test eax eax +
jz locret_1020AA1  +
mov edx [eax] +
push 1  +
mov ecx eax +
call dword ptr [edx]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push 0  +
lea ecx [ebp-4] +
call sub_1014DE0  +
push offset dword_108A284  +
call sub_1020AD1  +
pop ecx  +
lea ecx [ebp-4] +
call sub_1014DB4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
test ecx ecx +
jz loc_1020AF0  +
call sub_1014D72  +
test eax eax +
jz loc_1020AF0  +
mov edx [eax] +
push 1  +
mov ecx eax +
call dword ptr [edx]  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1020B1D  +
test byte ptr [ebp+8] 1 +
jz loc_1020B11  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1014AF4 +
push esi  +
mov dword ptr [ebp-4] 1 +
call sub_1020B5F  +
pop ecx  +
push 0  +
push 1  +
lea ecx [esi+18h] +
call sub_1014D01  +
mov dword ptr [esi] offset off_102071C +
call sub_1002061  +
retn   +
***
call sub_100208C  +
push 0  +
lea ecx [ebp-10h] +
call sub_1014DE0  +
mov edi [ebp+8] +
and dword ptr [ebp-4] 0 +
mov esi [edi+0Ch] +
test esi esi +
ja loc_104596A  +
push dword ptr [edi+8]  +
call ds:free  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
lea ecx [ebp-10h] +
call sub_1014DB4  +
call sub_1002061  +
retn   +
***
mov edi edi +
push esi  +
xor esi esi +
lea ecx dword_108C494[esi] +
call sub_1020C87  +
lea ecx dword_108C4C4[esi] +
call sub_1020C45  +
add esi 10h +
cmp esi 30h +
jl loc_1020BAD  +
mov ecx offset unk_108B3F8 +
call sub_1020C03  +
mov ecx dword_108DB84 +
pop esi  +
test ecx ecx +
jnz loc_104771D  +
mov ecx dword_108DB80 +
test ecx ecx +
jnz loc_1047730  +
push offset CriticalSection  +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_1020C21  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_103C750  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_1020C63  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_103C7C2  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_1020CA5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_103C834  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1020CEF  +
test byte ptr [ebp+8] 1 +
jz loc_1020CE3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_1007D3C +
call ??3@YAXPAX@Z  +
push dword ptr [esi+8]  +
call ??3@YAXPAX@Z  +
push dword ptr [esi+0Ch]  +
call ??3@YAXPAX@Z  +
add esp 0Ch +
mov ecx esi +
pop esi  +
jmp sub_101ECE0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1020D48  +
test byte ptr [ebp+8] 1 +
jz loc_1020D3C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_1007E6C +
call ??3@YAXPAX@Z  +
push dword ptr [esi+8]  +
call ??3@YAXPAX@Z  +
push dword ptr [esi+0Ch]  +
call ??3@YAXPAX@Z  +
add esp 0Ch +
mov ecx esi +
pop esi  +
jmp sub_101ECE0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1020DA1  +
test byte ptr [ebp+8] 1 +
jz loc_1020D95  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_1007F54 +
call ??3@YAXPAX@Z  +
push dword ptr [esi+8]  +
call ??3@YAXPAX@Z  +
push dword ptr [esi+0Ch]  +
call ??3@YAXPAX@Z  +
add esp 0Ch +
mov ecx esi +
pop esi  +
jmp sub_101ECE0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1020DFA  +
test byte ptr [ebp+8] 1 +
jz loc_1020DEE  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_100803C +
call ??3@YAXPAX@Z  +
push dword ptr [esi+8]  +
call ??3@YAXPAX@Z  +
push dword ptr [esi+0Ch]  +
call ??3@YAXPAX@Z  +
add esp 0Ch +
mov ecx esi +
pop esi  +
jmp sub_101EF07  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1020E53  +
test byte ptr [ebp+8] 1 +
jz loc_1020E47  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_100812C +
call ??3@YAXPAX@Z  +
push dword ptr [esi+8]  +
call ??3@YAXPAX@Z  +
push dword ptr [esi+0Ch]  +
call ??3@YAXPAX@Z  +
add esp 0Ch +
mov ecx esi +
pop esi  +
jmp sub_101EF07  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1020EAC  +
test byte ptr [ebp+8] 1 +
jz loc_1020EA0  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_100821C +
call ??3@YAXPAX@Z  +
push dword ptr [esi+8]  +
call ??3@YAXPAX@Z  +
push dword ptr [esi+0Ch]  +
call ??3@YAXPAX@Z  +
add esp 0Ch +
mov ecx esi +
pop esi  +
jmp sub_101EF07  +
***
mov eax [ebp+14h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push offset dword_10130D0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_10130BA  +
mov ecx [edi+10h] +
mov eax [ecx] +
lea edx [ebp+14h] +
push edx  +
call dword ptr [eax+8]  +
mov esi eax +
test esi esi +
jl loc_10130BA  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+8]  +
call sub_1020F20  +
jmp loc_1011D37  +
***
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
push 1  +
push 0  +
call ds:CreateStreamOnHGlobal  +
mov edi eax +
test edi edi +
jl loc_1020F69  +
mov eax [ebp+8] +
push dword ptr [ebp-10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_1048839  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1020F89  +
mov edi eax +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1020F7A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_1002061  +
retn 8  +
***
call sub_100208C  +
xor ebx ebx +
xor esi esi +
mov [ebp-14h] ebx +
push offset word_100219C  +
mov [ebp-4] esi +
call ds:SysAllocString  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ebp-18h] 80004005h +
cmp [ebp+0Ch] esi +
jz loc_1021045  +
lea eax [ebp-14h] +
push eax  +
sub esp 10h +
mov edi esp +
mov esi offset loc_1014580 +
movs   +
movs   +
movs   +
movs   +
call sub_10145F6  +
test eax eax +
jl loc_10210B2  +
mov esi [ebp+0Ch] +
mov edx [esi] +
xor ecx ecx +
lea edi [ebp-20h] +
push edi  +
push ecx  +
push ecx  +
xor eax eax +
push eax  +
push esi  +
call dword ptr [edx+14h]  +
push esi  +
lea ecx [ebp-3Ch] +
call sub_1014595  +
mov ebx [ebp-14h] +
mov eax [ebx] +
lea ecx [ebp+0Ch] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp-3Ch] +
movs   +
movs   +
movs   +
push ebx  +
mov byte ptr [ebp-4] 2 +
movs   +
call dword ptr [eax+0E8h]  +
test eax eax +
jnz loc_102103B  +
push dword ptr [ebp-10h]  +
call ds:SysFreeString  +
and dword ptr [ebp-10h] 0 +
mov eax [ebx] +
lea ecx [ebp-10h] +
push ecx  +
push ebx  +
call dword ptr [eax+88h]  +
lea ecx [ebp-3Ch] +
call sub_10145BF  +
xor esi esi +
push esi  +
push esi  +
push 0F003Fh  +
push esi  +
push esi  +
push offset aRibbon  +
push dword ptr [ebp+8]  +
lea ecx [ebp-2Ch] +
mov [ebp-2Ch] esi +
mov [ebp-28h] esi +
mov [ebp-24h] esi +
call sub_101E69C  +
test eax eax +
jnz loc_1021088  +
push 1  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-2Ch] +
push offset aQatitems  +
call sub_10210BC  +
lea ecx [ebp-2Ch] +
call sub_1014146  +
mov [ebp-18h] esi +
lea ecx [ebp-2Ch] +
call sub_1014146  +
push dword ptr [ebp-10h]  +
call ds:SysFreeString  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp ebx esi +
jz loc_10210A7  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax [ebp-18h] +
call sub_1002061  +
retn 8  +
mov ebx [ebp-14h] +
jmp loc_1021043  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpData]  +
mov esi ecx +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1021115  +
test byte ptr [ebp+8] 1 +
jz loc_1021109  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1005484 +
mov eax [esi+2Ch] +
mov dword ptr [ebp-4] 2 +
test eax eax +
jz loc_1021140  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+28h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1021151  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+24h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1021162  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CCmdTarget@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102119E  +
test byte ptr [ebp+8] 1 +
jz loc_1021192  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1005534 +
mov ecx [esi+28h] +
mov eax [ecx] +
mov dword ptr [ebp-4] 2 +
cmp eax ecx +
jz loc_10211DB  +
lea edi [esi+24h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_100C346  +
mov eax [eax] +
cmp eax [esi+28h] +
jnz loc_10211C8  +
mov eax [esi+38h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10211EC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 0 +
call sub_101F808  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CCmdTarget@@UAE@XZ  +
call sub_1002061  +
retn   +
***
push ecx  +
call sub_1021219  +
jmp loc_100C321  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
cmp byte ptr [ecx+15h] 0 +
jz loc_102122D  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_1021221  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102125C  +
test byte ptr [ebp+8] 1 +
jz loc_1021250  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1005694 +
mov eax [esi+28h] +
mov edi [eax] +
mov dword ptr [ebp-4] 2 +
cmp edi eax +
jz loc_10212B7  +
mov ebx [edi+10h] +
lea ecx [ebx+4] +
call sub_1020C87  +
lea ecx [ebx+14h] +
call sub_1020C45  +
test ebx ebx +
jz loc_10212A3  +
push 1  +
mov ecx ebx +
call sub_10212EA  +
push edi  +
lea eax [ebp-14h] +
push eax  +
lea ecx [esi+24h] +
call sub_100C346  +
mov edi [eax] +
cmp edi [esi+28h] +
jnz loc_1021283  +
mov eax [esi+34h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10212C8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 0 +
call sub_101F808  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CCmdTarget@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1021310  +
test [ebp+arg_0] 1 +
jz loc_1021304  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+14h] +
call sub_100CAB5  +
lea ecx [esi+4] +
pop esi  +
jmp sub_100CAB5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1021343  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10133AF  +
test [ebp+arg_0] 1 +
jnz loc_104945A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1021398  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
mov ecx [ebp+arg_C] +
cmp esi [ebp+arg_8] +
jnz loc_10494B3  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx ecx +
mov eax [ebx+280h] +
test eax eax +
jz loc_1021412  +
push esi  +
push edi  +
mov esi offset dword_10132F4 +
lea edi [ebp-14h] +
movs   +
push 1  +
movs   +
lea edx [ebp-14h] +
push edx  +
push 0  +
movs   +
push 0FFFFFFFCh  +
push dword ptr [ebx+24Ch]  +
movs   +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [ebx+280h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebx+280h] 0 +
pop edi  +
pop esi  +
mov ecx ebx +
call ?OnDestroy@CWnd@@IAEXXZ  +
mov ecx [ebp-4] +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1003A84 +
lea ecx [esi+70h] +
mov dword ptr [ebp-4] 2 +
mov dword ptr [ecx] offset off_102DB88 +
call sub_1002407  +
lea ecx [esi+68h] +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ecx] offset off_100A058 +
call sub_1002407  +
lea ecx [esi+40h] +
mov byte ptr [ebp-4] 0 +
call ??1CImageList@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CButton@@UAE@XZ  +
call sub_1002061  +
retn   +
***
call sub_10020DC  +
mov esi ecx +
lea eax [esi+1Ch] +
push eax  +
lea eax [ebp-6Ch] +
push offset aSoftwareMicros  +
push eax  +
call sub_1014ED6  +
push offset aRecovery  +
push eax  +
lea eax [ebp-2Ch] +
xor edi edi +
push eax  +
mov [ebp-4] edi +
call sub_101F1BF  +
add esp 18h +
push edi  +
push 1  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1012F94  +
push offset word_100219C  +
mov ecx esi +
call sub_1014FD3  +
test eax eax +
jz loc_1049ACB  +
push 0FFFFFFFFh  +
push edi  +
push esi  +
lea ecx [ebp-2Ch] +
call sub_1014E3A  +
mov edi offset aRecoveryfilepa +
push edi  +
lea ecx [ebp-50h] +
call sub_10142C5  +
lea eax [ebp-50h] +
push eax  +
lea eax [ebp-34h] +
lea ebx [esi+48h] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 3 +
call sub_10215A9  +
mov eax [eax] +
push 0  +
push 1  +
lea ecx [ebp-50h] +
mov [ebp-30h] eax +
mov byte ptr [ebp-4] 2 +
call sub_1012F94  +
mov eax [esi+4Ch] +
cmp [ebp-30h] eax +
jnz loc_1049AD2  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jb loc_1049B10  +
push eax  +
push 80000001h  +
mov ecx esi +
call sub_1021581  +
mov esi eax +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
mov eax esi +
call sub_1002119  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpSubKey]  +
xor esi esi +
push [ebp+hKey]  +
call ds:RegDeleteKeyW  +
test eax eax +
jz loc_1049983  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_10215E0  +
mov [ebp+var_4] eax +
cmp eax [esi+4] +
jnz loc_1049A15  +
mov eax [esi+4] +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push esi  +
mov esi [eax+4] +
push edi  +
mov edi eax +
cmp byte ptr [esi+45h] 0 +
jz loc_10499F2  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_102163A  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_1021668  +
cmp [ebp+arg_8] eax +
jnz loc_1021668  +
mov ecx esi +
call sub_1021677  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_102165E  +
jmp loc_1049AA6  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_10216A4  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+2Dh] 0 +
mov ebx ecx +
mov esi edi +
jz loc_1049A5A  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push 3  +
push 10h  +
push offset dword_108C4C4  +
call sub_101EF48  +
retn   +
***
jmp sub_100CAB5  +
***
push offset loc_1021705  +
push 5  +
push 1Ch  +
push offset unk_108C648  +
call sub_101EF48  +
retn   +
***
push 0  +
push 1  +
call sub_1012F94  +
retn   +
***
push esi  +
push 0  +
push [ebp+arg_0]  +
lea esi [ecx+688h] +
mov ecx esi +
call ?Find@CObList@@QBEPAU__POSITION@@PAVCObject@@PAU2@@Z  +
test eax eax +
jnz loc_103DB64  +
pop esi  +
jmp loc_102E714  +
***
push eax  +
call ds:DeleteObject  +
jmp loc_1013361  +
***
push eax  +
call edi  +
mov [esi+3Ch] ebx +
jmp loc_101FDC1  +
***
mov [ecx] eax +
jmp loc_10140FA  +
***
add bh bh +
adc eax offset GetDC +
mov esi eax +
push esi  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
push 58h  +
push dword ptr [eax+8]  +
call ds:GetDeviceCaps  +
push esi  +
push 0  +
mov edi eax +
call ds:ReleaseDC  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_100617C +
mov [eax+4] ecx +
pop ebp  +
retn 4  +
***
mov ecx [esi] +
cmp ecx [eax+0Ch] +
jl loc_10217C5  +
jmp loc_10217E0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
call sub_100C1D4  +
cmp eax [edi+4] +
jnz loc_102179E  +
mov ecx [esi] +
and [ebp+var_4] 0 +
mov [ebp+var_8] ecx +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx edi +
call sub_10217EE  +
mov eax [eax] +
pop edi  +
add eax 10h +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+8] 0 +
jz loc_102363E  +
mov eax [ebx+4] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_4] eax +
cmp edi [eax] +
jz loc_1023656  +
cmp edi eax +
jnz loc_1021842  +
mov eax [eax+8] +
mov ecx [eax+0Ch] +
cmp ecx [esi] +
jge loc_10441FC  +
push esi  +
push eax  +
push 0  +
mov ecx ebx +
push [ebp+arg_0]  +
call sub_100C4A1  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
mov eax [esi] +
cmp eax [edi+0Ch] +
jge loc_102366A  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] edi +
call sub_101441C  +
mov ecx [ebp+arg_8] +
mov eax [esi] +
cmp [ecx+0Ch] eax +
jge loc_102366A  +
mov eax [ecx+8] +
cmp byte ptr [eax+15h] 0 +
push esi  +
jnz loc_1021875  +
push edi  +
push 1  +
jmp loc_102182E  +
push ecx  +
jmp loc_102182C  +
***
mov edi edi +
push esi  +
push edi  +
push 56h  +
mov esi ecx +
call ds:GetSystemMetrics  +
test eax eax +
setnz al  +
mov ecx esi +
mov [esi+3F4h] al +
call sub_10264F4  +
lea edi [esi+0F0h] +
mov ecx edi +
call sub_102A652  +
push edi  +
lea ecx [esi+114h] +
mov dword ptr [eax+4] offset loc_100C7AD +
call sub_10235B5  +
lea ecx [esi+410h] +
call sub_1027053  +
lea ecx [esi+41Ch] +
call sub_1027D67  +
lea ecx [esi+428h] +
call sub_102561C  +
mov ecx esi +
call sub_1021902  +
mov ecx esi +
call sub_102BE38  +
push 0  +
push 2  +
push offset unk_108BBC0  +
call WinSqmStartSession  +
pop edi  +
pop esi  +
retn   +
***
call sub_100208C  +
mov edi ecx +
push 5Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
and dword ptr [ebp-4] 0 +
mov esi 260h +
test eax eax +
jz loc_102236B  +
push esi  +
mov ecx eax +
call sub_102BBD9  +
push eax  +
or ebx 0FFFFFFFFh +
push esi  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push 58h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 1 +
test eax eax +
jz loc_1022372  +
push 28Bh  +
mov ecx eax +
call sub_102B821  +
push eax  +
push 28Bh  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push 58h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
push 2  +
pop eax  +
mov [ebp-4] eax +
mov esi 28Ch +
test ecx ecx +
jz loc_1022379  +
push eax  +
push esi  +
call sub_102B469  +
push eax  +
push esi  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push 58h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
push 3  +
pop eax  +
mov [ebp-4] eax +
mov esi 28Dh +
test ecx ecx +
jz loc_1022380  +
push eax  +
push esi  +
call sub_102B469  +
push eax  +
push esi  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
mov esi 90h +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 4 +
test eax eax +
jz loc_1022387  +
push 2BDh  +
mov ecx eax +
call sub_102B101  +
push eax  +
push 2BDh  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 5 +
test eax eax +
jz loc_102238E  +
push 2BEh  +
mov ecx eax +
call sub_102AD99  +
push eax  +
push 2BEh  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 6 +
mov esi 2C2h +
test eax eax +
jz loc_1022395  +
push esi  +
mov ecx eax +
call sub_102AA31  +
push eax  +
push esi  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
mov esi 98h +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 7 +
test eax eax +
jz loc_102239C  +
push 2C0h  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2C0h  +
call sub_102A6AC  +
push eax  +
push 2C0h  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 8 +
test eax eax +
jz loc_10223A3  +
push 2C1h  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2C1h  +
call sub_10227A6  +
push eax  +
push 2C1h  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 9 +
test eax eax +
jz loc_10223AA  +
push 2BFh  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2BFh  +
call sub_10227A6  +
push eax  +
push 2BFh  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 0Ah +
test eax eax +
jz loc_10223B1  +
push 2C3h  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2C3h  +
call sub_10227A6  +
push eax  +
push 2C3h  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 0Bh +
test eax eax +
jz loc_10223B8  +
push 2C4h  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2C4h  +
call sub_10227A6  +
push eax  +
push 2C4h  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 0Ch +
test eax eax +
jz loc_10223BF  +
push 2C5h  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2C5h  +
call sub_10227A6  +
push eax  +
push 2C5h  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 0Dh +
test eax eax +
jz loc_10223C6  +
push 2C6h  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2C6h  +
call sub_10227A6  +
push eax  +
push 2C6h  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 0Eh +
test eax eax +
jz loc_10223CD  +
push 2C7h  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2C7h  +
call sub_10227A6  +
push eax  +
push 2C7h  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 0Fh +
test eax eax +
jz loc_10223D4  +
push 2D0h  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2D0h  +
call sub_10227A6  +
push eax  +
push 2D0h  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 10h +
test eax eax +
jz loc_10223DB  +
push 2D1h  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2D1h  +
call sub_10227A6  +
push eax  +
push 2D1h  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 11h +
test eax eax +
jz loc_10223E2  +
push 2CFh  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2CFh  +
call sub_10227A6  +
push eax  +
push 2CFh  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 12h +
test eax eax +
jz loc_10223E9  +
push 2C9h  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2C9h  +
call sub_10227A6  +
push eax  +
push 2C9h  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 13h +
test eax eax +
jz loc_10223F0  +
push 2C8h  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2C8h  +
call sub_10227A6  +
push eax  +
push 2C8h  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 14h +
test eax eax +
jz loc_10223F7  +
push 2CAh  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2CAh  +
call sub_10227A6  +
push eax  +
push 2CAh  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 15h +
test eax eax +
jz loc_10223FE  +
push 2CBh  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2CBh  +
call sub_10227A6  +
push eax  +
push 2CBh  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 16h +
test eax eax +
jz loc_1022405  +
push 2CCh  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2CCh  +
call sub_10227A6  +
push eax  +
push 2CCh  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 17h +
test eax eax +
jz loc_102240C  +
push 2CDh  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2CDh  +
call sub_10227A6  +
push eax  +
push 2CDh  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 18h +
test eax eax +
jz loc_1022413  +
push 2CEh  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2CEh  +
call sub_10227A6  +
push eax  +
push 2CEh  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 19h +
test eax eax +
jz loc_102241A  +
push 2D2h  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push 2D2h  +
call sub_10227A6  +
push eax  +
push 2D2h  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov dword ptr [ebp-4] 1Ah +
mov esi 2D3h +
test eax eax +
jz loc_1022421  +
push esi  +
lea ecx [edi+410h] +
call loc_100C162  +
mov ecx [ebp-10h] +
push eax  +
push esi  +
call sub_10227A6  +
push eax  +
push esi  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1022450  +
xor ebx ebx +
mov [ebp-60h] ebx +
mov [ebp-5Ch] ebx +
mov [ebp-58h] ebx +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-64h] +
mov dword ptr [ebp-4] 1Bh +
mov dword ptr [ebp-10h] 4 +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-64h] +
mov dword ptr [ebp-10h] 6 +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-64h] +
mov dword ptr [ebp-10h] 8 +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-64h] +
mov dword ptr [ebp-10h] 0Ah +
call sub_1013D79  +
push 5Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 1Ch +
mov esi 292h +
cmp eax ebx +
jz loc_1022428  +
push 1  +
sub esp 10h +
lea eax [ebp-64h] +
mov ecx esp +
mov [ebp-14h] esp +
push eax  +
call sub_102BE5F  +
mov ecx [ebp-10h] +
push 7  +
push 7  +
push esi  +
call sub_102C5E9  +
push eax  +
push esi  +
mov ecx edi +
mov byte ptr [ebp-4] 1Bh +
call sub_1022450  +
mov [ebp-50h] ebx +
mov [ebp-4Ch] ebx +
mov [ebp-48h] ebx +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 1Dh +
mov dword ptr [ebp-10h] 8 +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-54h] +
mov dword ptr [ebp-10h] 10h +
call sub_1013D79  +
push 1Eh  +
pop ebx  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-54h] +
mov [ebp-10h] ebx +
call sub_1013D79  +
push 28h  +
pop esi  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-54h] +
mov [ebp-10h] esi +
call sub_1013D79  +
push 5Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov [ebp-4] bl +
test eax eax +
jz loc_102242F  +
push 1  +
sub esp 10h +
lea eax [ebp-54h] +
mov ecx esp +
mov [ebp-14h] esp +
push eax  +
call sub_102BE5F  +
mov ecx [ebp-10h] +
push 5  +
push 2  +
push 28Fh  +
call sub_102C5E9  +
push eax  +
push 28Fh  +
mov ecx edi +
mov byte ptr [ebp-4] 1Dh +
call sub_1022450  +
xor eax eax +
mov [ebp-40h] eax +
mov [ebp-3Ch] eax +
mov [ebp-38h] eax +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1Fh +
mov dword ptr [ebp-10h] 8 +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-44h] +
mov dword ptr [ebp-10h] 10h +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-44h] +
mov [ebp-10h] ebx +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-44h] +
mov [ebp-10h] esi +
call sub_1013D79  +
push 5Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 20h +
test eax eax +
jz loc_1022436  +
push 1  +
sub esp 10h +
lea eax [ebp-44h] +
mov ecx esp +
mov [ebp-14h] esp +
push eax  +
call sub_102BE5F  +
mov ecx [ebp-10h] +
push 6  +
push 6  +
push 290h  +
call sub_102C5E9  +
push eax  +
push 290h  +
mov ecx edi +
mov byte ptr [ebp-4] 1Fh +
call sub_1022450  +
xor eax eax +
mov [ebp-30h] eax +
mov [ebp-2Ch] eax +
mov [ebp-28h] eax +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 21h +
mov dword ptr [ebp-10h] 8 +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-34h] +
mov dword ptr [ebp-10h] 10h +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-34h] +
mov [ebp-10h] ebx +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-34h] +
mov [ebp-10h] esi +
call sub_1013D79  +
push 5Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 22h +
test eax eax +
jz loc_102243D  +
push 1  +
sub esp 10h +
lea eax [ebp-34h] +
mov ecx esp +
mov [ebp-14h] esp +
push eax  +
call sub_102BE5F  +
mov ecx [ebp-10h] +
push 9  +
push 8  +
push 291h  +
call sub_102C5E9  +
push eax  +
push 291h  +
mov ecx edi +
mov byte ptr [ebp-4] 21h +
call sub_1022450  +
xor eax eax +
mov [ebp-20h] eax +
mov [ebp-1Ch] eax +
mov [ebp-18h] eax +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 23h +
mov dword ptr [ebp-10h] 8 +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-10h] 10h +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-24h] +
mov [ebp-10h] esi +
call sub_1013D79  +
push 5Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 24h +
mov esi 293h +
test eax eax +
jz loc_1022444  +
push 1  +
sub esp 10h +
lea eax [ebp-24h] +
mov ecx esp +
mov [ebp-14h] esp +
push eax  +
call sub_102BE5F  +
mov ecx [ebp-10h] +
push 8  +
push 4  +
push esi  +
call sub_102C5E9  +
push eax  +
push esi  +
mov ecx edi +
mov byte ptr [ebp-4] 23h +
call sub_1022450  +
push 28Bh  +
lea ecx [edi+114h] +
call sub_100C0B4  +
lea ecx [ebp-24h] +
call sub_100CAB5  +
lea ecx [ebp-34h] +
call sub_100CAB5  +
lea ecx [ebp-44h] +
call sub_100CAB5  +
lea ecx [ebp-54h] +
call sub_100CAB5  +
lea ecx [ebp-64h] +
call sub_100CAB5  +
call sub_1002061  +
retn   +
xor eax eax +
jmp loc_1021934  +
xor eax eax +
jmp loc_1021969  +
xor eax eax +
jmp loc_10219A0  +
xor eax eax +
jmp loc_10219D3  +
xor eax eax +
jmp loc_1021A09  +
xor eax eax +
jmp loc_1021A3E  +
xor eax eax +
jmp loc_1021A74  +
xor eax eax +
jmp loc_1021ABC  +
xor eax eax +
jmp loc_1021B03  +
xor eax eax +
jmp loc_1021B4A  +
xor eax eax +
jmp loc_1021B91  +
xor eax eax +
jmp loc_1021BD8  +
xor eax eax +
jmp loc_1021C1F  +
xor eax eax +
jmp loc_1021C66  +
xor eax eax +
jmp loc_1021CAD  +
xor eax eax +
jmp loc_1021CF4  +
xor eax eax +
jmp loc_1021D3B  +
xor eax eax +
jmp loc_1021D82  +
xor eax eax +
jmp loc_1021DC9  +
xor eax eax +
jmp loc_1021E10  +
xor eax eax +
jmp loc_1021E57  +
xor eax eax +
jmp loc_1021E9E  +
xor eax eax +
jmp loc_1021EE5  +
xor eax eax +
jmp loc_1021F2C  +
xor eax eax +
jmp loc_1021F73  +
xor eax eax +
jmp loc_1021FBA  +
xor eax eax +
jmp loc_1021FFE  +
xor eax eax +
jmp loc_10220A4  +
xor eax eax +
jmp loc_1022142  +
xor eax eax +
jmp loc_10221E1  +
xor eax eax +
jmp loc_1022280  +
xor eax eax +
jmp loc_1022320  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+404h] +
call sub_1022490  +
mov eax [edi] +
lea ecx [esi+114h] +
add esi 118h +
neg ecx  +
sbb ecx ecx +
and ecx esi +
push ecx  +
mov ecx edi +
call dword ptr [eax+6Ch]  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_0] +
push eax  +
call sub_10217AC  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_10229A3  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102258C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022A49  +
mov [esi+18h] edi +
pop edi  +
mov dword ptr [esi] offset off_10226AC +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1022BA1  +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
push 10h  +
mov dword ptr [esi] offset off_1007B2C +
mov [esi+90h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_1022844  +
push esi  +
call sub_102255E  +
push 1Ch  +
mov byte ptr [ebp-4] 0 +
mov [esi+4] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_1022848  +
push esi  +
call sub_1022682  +
push 24h  +
mov byte ptr [ebp-4] 0 +
mov [esi+8] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 3 +
test ecx ecx +
jz loc_102284C  +
push esi  +
call sub_1022855  +
mov [esi+0Ch] eax +
mov eax [esi+4] +
mov [esi+10h] eax +
mov eax esi +
call sub_1002061  +
retn 8  +
xor eax eax +
jmp loc_10227ED  +
xor eax eax +
jmp loc_102280F  +
xor eax eax +
jmp loc_1022831  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022AF1  +
mov [esi+20h] edi +
pop edi  +
mov dword ptr [esi] offset off_102287C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ecx  +
call sub_1022985  +
jmp loc_101444E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
cmp byte ptr [ecx+15h] 0 +
jz loc_102BE2C  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1021787  +
mov [esi+8] edi +
pop edi  +
mov dword ptr [esi] offset off_10229CC +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1021787  +
mov [esi+14h] edi +
pop edi  +
mov dword ptr [esi] offset off_1022A74 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1021787  +
mov [esi+1Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_1022B1C +
mov byte ptr [esi+18h] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1022C52  +
xor edx edx +
push 7  +
mov dword ptr [esi] offset off_100796C +
mov [esi+20h] edx +
mov [esi+24h] edx +
pop ecx  +
mov eax offset off_100B560 +
mov [ebp-4] edx +
mov [esi+6Ch] ecx +
mov [esi+68h] eax +
mov [esi+70h] edx +
mov [esi+78h] ecx +
mov [esi+74h] eax +
mov [esi+7Ch] edx +
lea edi [esi+80h] +
push edx  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_1013B33  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 3 +
mov dword ptr [ebp+8] 1 +
call sub_1013D79  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+8] 3 +
call sub_1013D79  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+8] 5 +
call sub_1013D79  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+8] 8 +
call sub_1013D79  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_1007814 +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1021787  +
mov [esi+8] edi +
pop edi  +
mov dword ptr [esi] offset off_1022CAC +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1021787  +
mov [esi+8] edi +
pop edi  +
mov dword ptr [esi] offset off_1022D54 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1021787  +
mov [esi+8] edi +
pop edi  +
mov dword ptr [esi] offset off_1022DFC +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1022C52  +
xor edi edi +
lea ecx [esi+2Ch] +
push edi  +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_10078BC +
mov dword ptr [esi+20h] 1 +
mov [esi+24h] edi +
mov [esi+28h] edi +
call sub_1013B33  +
lea ecx [esi+3Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1022ED1  +
mov [esi+4Ch] edi +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1022EEB  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_100CB28  +
test eax eax +
jz loc_1022EFA  +
mov [eax] eax +
lea ecx [eax+4] +
test ecx ecx +
jz locret_1022F03  +
mov [ecx] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1023035  +
mov ecx [esi+14h] +
mov eax [ecx] +
call dword ptr [eax+30h]  +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
push 1  +
mov ecx edi +
fdiv  ds:dbl_10021B0 +
fstp  qword ptr [esi+60h] +
mov eax [edi] +
call dword ptr [eax+18h]  +
mov [esi+28h] eax +
mov edx [eax] +
push esi  +
mov ecx eax +
call dword ptr [edx]  +
mov eax [edi] +
push 1Fh  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+2Ch] eax +
mov edx [eax] +
push esi  +
mov ecx eax +
call dword ptr [edx]  +
mov ecx [esi+2Ch] +
lea eax [esi+68h] +
push eax  +
call sub_1005BE0  +
mov eax [edi] +
push 20h  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+30h] eax +
mov edx [eax] +
push esi  +
mov ecx eax +
call dword ptr [edx]  +
mov ecx [esi+30h] +
lea eax [esi+74h] +
push eax  +
call sub_1005BE0  +
mov eax [edi] +
push 21h  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+34h] eax +
mov edx [eax] +
push esi  +
mov ecx eax +
call dword ptr [edx]  +
mov eax [edi] +
push 22h  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+38h] eax +
mov edx [eax] +
push esi  +
mov ecx eax +
call dword ptr [edx]  +
mov eax [edi] +
push 33h  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+3Ch] eax +
mov edx [eax] +
push esi  +
mov ecx eax +
call dword ptr [edx]  +
mov eax [edi] +
push 34h  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+40h] eax +
mov edx [eax] +
push esi  +
mov ecx eax +
call dword ptr [edx]  +
mov eax [edi] +
push 2Bh  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+44h] eax +
mov edx [eax] +
push esi  +
mov ecx eax +
call dword ptr [edx]  +
mov eax [edi] +
push 65h  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+48h] eax +
mov eax [edi] +
push 66h  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+4Ch] eax +
mov eax [edi] +
push 67h  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+50h] eax +
mov eax [edi] +
push 68h  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+54h] eax +
mov eax [edi] +
push 69h  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+58h] eax +
mov eax [edi] +
push 6Ah  +
mov ecx edi +
call dword ptr [eax+18h]  +
pop edi  +
mov [esi+5Ch] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push 1  +
push 0  +
push dword ptr [esi+1Ch]  +
mov [esi+14h] ecx +
mov eax [ecx] +
call dword ptr [eax+1Ch]  +
mov [esi+18h] eax +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10020DC  +
mov esi 0ACh +
push esi  +
xor edi edi +
lea eax [ebp-168h] +
push edi  +
push eax  +
call memset  +
push esi  +
lea eax [ebp-214h] +
push edi  +
push eax  +
call memset  +
push esi  +
lea eax [ebp-0BCh] +
push edi  +
push eax  +
call memset  +
mov esi ds:GetLocaleInfoW +
add esp 24h +
push 56h  +
lea eax [ebp-168h] +
push eax  +
push 1001h  +
mov edi 400h +
push edi  +
call esi  +
test eax eax +
jz loc_10232EE  +
push 56h  +
lea eax [ebp-214h] +
push eax  +
push 1002h  +
push edi  +
call esi  +
test eax eax +
jz loc_10232EE  +
push 56h  +
lea eax [ebp-0BCh] +
push eax  +
push 1004h  +
push edi  +
call esi  +
test eax eax +
jz loc_10411E8  +
lea ecx [ebp-218h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-168h] +
push eax  +
lea ecx [ebp-218h] +
call ??4CString@@QAEABV0@PBG@Z  +
push offset dword_1023304  +
lea ecx [ebp-218h] +
call ??YCString@@QAEABV0@PBG@Z  +
lea eax [ebp-214h] +
push eax  +
lea ecx [ebp-218h] +
call ??YCString@@QAEABV0@PBG@Z  +
push offset dword_1023300  +
lea ecx [ebp-218h] +
call ??YCString@@QAEABV0@PBG@Z  +
lea eax [ebp-0BCh] +
push eax  +
lea ecx [ebp-218h] +
call ??YCString@@QAEABV0@PBG@Z  +
push dword ptr [ebp-218h]  +
push 0  +
call ds:_wsetlocale  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
pop ecx  +
lea ecx [ebp-218h] +
call ??1CString@@QAE@XZ  +
call sub_1002119  +
retn   +
***
test eax eax +
jz loc_10232EE  +
jmp loc_102326A  +
***
mov [esi+4] edx +
jmp loc_102616B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [eax] +
or ecx [eax+4] +
jnz loc_1041212  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventRegister  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 200h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push 0  +
mov esi ecx +
lea ecx [ebp+pvParam] +
mov eax 1F8h +
push ecx  +
push eax  +
push 29h  +
mov [ebp+var_200] ebx +
mov [ebp+pvParam] eax +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_10233A4  +
cmp dword ptr [esi+27Ch] 0 +
jnz loc_10412DF  +
lea eax [ebp+var_11C] +
push eax  +
lea ecx [esi+278h] +
call sub_1013B10  +
mov edi ds:GetDeviceCaps +
push 8  +
push dword ptr [ebx+8]  +
call edi  +
push 0Ah  +
mov [esi+324h] eax +
push dword ptr [ebx+8]  +
call edi  +
push 58h  +
mov [esi+328h] eax +
push dword ptr [ebx+8]  +
call edi  +
push 5Ah  +
mov [esi+334h] eax +
push dword ptr [ebx+8]  +
call edi  +
push 0FEh  +
push 3E8h  +
push dword ptr [esi+334h]  +
mov [esi+338h] eax +
call ds:MulDiv  +
push 0FEh  +
push 3E8h  +
push dword ptr [esi+338h]  +
mov [esi+32Ch] eax +
call ds:MulDiv  +
push 0Ch  +
mov [esi+330h] eax +
push dword ptr [ebx+8]  +
call edi  +
push 0Eh  +
mov [esi+33Ch] eax +
push dword ptr [ebx+8]  +
call edi  +
mov ebx ds:GetSystemMetrics +
push 20h  +
mov [esi+340h] eax +
call ebx  +
push 21h  +
mov [esi+344h] eax +
call ebx  +
push 5  +
mov [esi+348h] eax +
call ebx  +
push 6  +
mov [esi+34Ch] eax +
call ebx  +
push 33h  +
mov [esi+350h] eax +
call ebx  +
push 29h  +
mov [esi+354h] eax +
call ebx  +
neg eax  +
sbb eax eax +
neg eax  +
mov [esi+240h] eax +
mov eax [ebp+var_200] +
push 26h  +
push dword ptr [eax+8]  +
call edi  +
and eax 100h +
mov [esi+248h] eax +
mov eax [esi+33Ch] +
imul eax [esi+340h] +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push 8000h  +
mov [esi+244h] eax +
call ds:SetErrorMode  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push 0Ch  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1041761  +
mov ecx [esi+8] +
mov dword ptr [eax+4] 7 +
mov dword ptr [eax] offset off_100B560 +
mov [eax+8] ecx +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 0Ch  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1041765  +
mov ecx [esi+8] +
mov dword ptr [eax+4] 3 +
mov dword ptr [eax] offset off_1006E84 +
mov [eax+8] ecx +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 0Ch  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1041778  +
mov ecx [esi+8] +
mov dword ptr [eax+4] 7 +
mov dword ptr [eax] offset off_100B5C8 +
mov [eax+8] ecx +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 0Ch  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10417A4  +
mov ecx [esi+8] +
mov dword ptr [eax+4] 2 +
mov dword ptr [eax] offset off_1006F8C +
mov [eax+8] ecx +
pop esi  +
retn   +
***
push esi  +
push 10h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10417A8  +
fld  qword ptr [esi+8] +
mov dword ptr [eax+4] 5 +
fstp  qword ptr [eax+8] +
mov dword ptr [eax] offset off_102DEB0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi+14h] 0 +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
push esi  +
mov ecx edi +
call dword ptr [eax]  +
mov [esi+18h] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_102556D  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_1025570  +
mov [eax] ebx +
jmp loc_1025570  +
***
push [ebp+arg_8]  +
push dword ptr [ebx+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_102551A  +
mov eax [ebp+arg_0] +
jmp loc_1026047  +
push edi  +
lea ecx [esi+0Ch] +
call sub_102E11A  +
jmp loc_1043F35  +
mov esi [eax+8] +
push edi  +
lea ecx [esi+0Ch] +
call sub_102E11A  +
test al al +
jz loc_1043F63  +
push edi  +
push esi  +
push 0  +
mov ecx ebx +
jmp loc_102603A  +
***
push [ebp+arg_8]  +
push dword ptr [ebx+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_100C4A1  +
mov eax [ebp+arg_0] +
jmp loc_102183D  +
mov eax [esi] +
cmp eax [edi+0Ch] +
jge loc_10441FC  +
push esi  +
push edi  +
push 1  +
jmp loc_1021830  +
mov eax [esi] +
cmp [edi+0Ch] eax +
jl loc_10441CB  +
jmp loc_10441FC  +
***
call sub_100208C  +
mov edi ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor esi esi +
mov [ebp-4] esi +
cmp ecx esi +
jz loc_10236F0  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 32h  +
push 32h  +
push 0FFFFFFCEh  +
push 0FFFFFFCEh  +
lea ecx [ebp-20h] +
call sub_100C6E8  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-34h] +
call sub_1029EF0  +
lea eax [ebp-34h] +
push eax  +
mov ecx esi +
mov dword ptr [ebp-4] 1 +
call sub_102DE81  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 2BFh +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov edi ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor esi esi +
mov [ebp-4] esi +
cmp ecx esi +
jz loc_102376C  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 32h  +
push 32h  +
push 0FFFFFFCEh  +
push 0FFFFFFCEh  +
lea ecx [ebp-20h] +
call sub_100C6E8  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-34h] +
call sub_102E1DD  +
lea eax [ebp-34h] +
push eax  +
mov ecx esi +
mov dword ptr [ebp-4] 1 +
call sub_102DE81  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 2C1h +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov edi ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1023889  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0FFFFFFCEh  +
push 0  +
lea ecx [ebp-20h] +
call sub_100C6CD  +
push 32h  +
push 32h  +
lea ecx [ebp-18h] +
call sub_100C6CD  +
push 32h  +
push 0FFFFFFCEh  +
lea ecx [ebp-28h] +
call sub_100C6CD  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-3Ch] +
call sub_102DFFB  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-50h] +
mov dword ptr [ebp-4] 1 +
call sub_102DFFB  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-64h] +
call sub_102DFFB  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_102DE81  +
lea eax [ebp-50h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-64h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 2C3h +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_10237EB  +
***
call sub_100208C  +
mov edi ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor esi esi +
mov [ebp-4] esi +
cmp ecx esi +
jz loc_10238C0  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0FFFFFFCEh  +
push 0FFFFFFCEh  +
lea ecx [ebp-20h] +
call sub_100C6CD  +
push 32h  +
push 32h  +
lea ecx [ebp-18h] +
call sub_100C6CD  +
push 32h  +
push 0FFFFFFCEh  +
lea ecx [ebp-28h] +
call sub_100C6CD  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-3Ch] +
call sub_102DFFB  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-50h] +
mov dword ptr [ebp-4] 1 +
call sub_102DFFB  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-64h] +
call sub_102DFFB  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_102DE81  +
lea eax [ebp-50h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-64h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 2C4h +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov ebx ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_1023A53  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0FFFFFFCEh  +
push edi  +
lea ecx [ebp-28h] +
call sub_100C6CD  +
push edi  +
push 32h  +
lea ecx [ebp-18h] +
call sub_100C6CD  +
push 32h  +
push edi  +
lea ecx [ebp-20h] +
call sub_100C6CD  +
push edi  +
push 0FFFFFFCEh  +
lea ecx [ebp-30h] +
call sub_100C6CD  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-44h] +
call sub_102DFFB  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-58h] +
mov dword ptr [ebp-4] 1 +
call sub_102DFFB  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-6Ch] +
call sub_102DFFB  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-80h] +
call sub_102DFFB  +
lea eax [ebp-44h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_102DE81  +
lea eax [ebp-58h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-6Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-80h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-10h] 2C5h +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_1023992  +
***
call sub_100208C  +
mov edi ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1023B88  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0FFFFFFCEh  +
push 0  +
lea ecx [ebp-28h] +
call sub_100C6CD  +
push 0FFFFFFF4h  +
push 0FFFFFFCEh  +
lea ecx [ebp-38h] +
call sub_100C6CD  +
push 32h  +
push 0FFFFFFE1h  +
lea ecx [ebp-30h] +
call sub_100C6CD  +
push 32h  +
push 1Fh  +
lea ecx [ebp-20h] +
call sub_100C6CD  +
push 0FFFFFFF4h  +
push 32h  +
lea ecx [ebp-18h] +
call sub_100C6CD  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-4Ch] +
call sub_102DFFB  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-88h] +
mov dword ptr [ebp-4] 1 +
call sub_102DFFB  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-60h] +
call sub_102DFFB  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-74h] +
call sub_102DFFB  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-9Ch] +
call sub_102DFFB  +
lea eax [ebp-4Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 5 +
call sub_102DE81  +
lea eax [ebp-88h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-60h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-74h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-9Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-10h] +
mov dword ptr [ebp-10h] 2C6h +
push eax  +
mov ecx edi +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_1023A90  +
***
call sub_100208C  +
mov ebx ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1023CEA  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0FFFFFFCEh  +
push 0  +
lea ecx [ebp-30h] +
call sub_100C6CD  +
push 0FFFFFFE7h  +
push 0FFFFFFCEh  +
lea ecx [ebp-40h] +
call sub_100C6CD  +
push 19h  +
push 0FFFFFFCEh  +
lea ecx [ebp-28h] +
call sub_100C6CD  +
push 32h  +
push 0  +
lea ecx [ebp-38h] +
call sub_100C6CD  +
push 19h  +
push 32h  +
lea ecx [ebp-20h] +
call sub_100C6CD  +
push 0FFFFFFE7h  +
push 32h  +
lea ecx [ebp-18h] +
call sub_100C6CD  +
lea eax [ebp-40h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-54h] +
call sub_102DFFB  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-7Ch] +
mov dword ptr [ebp-4] 1 +
call sub_102DFFB  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-0A4h] +
call sub_102DFFB  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-68h] +
call sub_102DFFB  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-90h] +
call sub_102DFFB  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-0B8h] +
call sub_102DFFB  +
lea eax [ebp-54h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 6 +
call sub_102DE81  +
lea eax [ebp-7Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0A4h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-68h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-90h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0B8h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-10h] 2C7h +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_1023BC5  +
***
call sub_100208C  +
mov ebx ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_1023E7B  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0FFFFFFCEh  +
push edi  +
lea ecx [ebp-38h] +
call sub_100C6CD  +
push edi  +
push 0FFFFFFCEh  +
lea ecx [ebp-48h] +
call sub_100C6CD  +
push edi  +
push 0FFFFFFE7h  +
lea ecx [ebp-40h] +
call sub_100C6CD  +
push 32h  +
push 0FFFFFFE7h  +
lea ecx [ebp-30h] +
call sub_100C6CD  +
push 32h  +
push 19h  +
lea ecx [ebp-20h] +
call sub_100C6CD  +
push edi  +
push 19h  +
lea ecx [ebp-28h] +
call sub_100C6CD  +
push edi  +
push 32h  +
lea ecx [ebp-18h] +
call sub_100C6CD  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-5Ch] +
call sub_102DFFB  +
lea eax [ebp-40h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-0C0h] +
mov dword ptr [ebp-4] 1 +
call sub_102DFFB  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-98h] +
call sub_102DFFB  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-70h] +
call sub_102DFFB  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-84h] +
call sub_102DFFB  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-0ACh] +
call sub_102DFFB  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-0D4h] +
call sub_102DFFB  +
mov byte ptr [ebp-4] 7 +
lea eax [ebp-5Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0C0h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-98h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-70h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-84h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0ACh] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0D4h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-10h] 2CAh +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_1023D28  +
***
call sub_100208C  +
mov ebx ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_102400C  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0FFFFFFCEh  +
push edi  +
lea ecx [ebp-38h] +
call sub_100C6CD  +
push 0FFFFFFE7h  +
push edi  +
lea ecx [ebp-48h] +
call sub_100C6CD  +
push 0FFFFFFE7h  +
push 0FFFFFFCEh  +
lea ecx [ebp-40h] +
call sub_100C6CD  +
push 19h  +
push 0FFFFFFCEh  +
lea ecx [ebp-30h] +
call sub_100C6CD  +
push 19h  +
push edi  +
lea ecx [ebp-20h] +
call sub_100C6CD  +
push 32h  +
push edi  +
lea ecx [ebp-28h] +
call sub_100C6CD  +
push edi  +
push 32h  +
lea ecx [ebp-18h] +
call sub_100C6CD  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-5Ch] +
call sub_102DFFB  +
lea eax [ebp-40h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-0C0h] +
mov dword ptr [ebp-4] 1 +
call sub_102DFFB  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-98h] +
call sub_102DFFB  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-70h] +
call sub_102DFFB  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-84h] +
call sub_102DFFB  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-0ACh] +
call sub_102DFFB  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-0D4h] +
call sub_102DFFB  +
mov byte ptr [ebp-4] 7 +
lea eax [ebp-5Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0C0h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-98h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-70h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-84h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0ACh] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0D4h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-10h] 2C8h +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_1023EB9  +
***
call sub_100208C  +
mov ebx ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_102419D  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push edi  +
push 0FFFFFFCEh  +
lea ecx [ebp-38h] +
call sub_100C6CD  +
push 32h  +
push edi  +
lea ecx [ebp-48h] +
call sub_100C6CD  +
push edi  +
push 32h  +
lea ecx [ebp-40h] +
call sub_100C6CD  +
push edi  +
push 19h  +
lea ecx [ebp-30h] +
call sub_100C6CD  +
push 0FFFFFFCEh  +
push 19h  +
lea ecx [ebp-20h] +
call sub_100C6CD  +
push 0FFFFFFCEh  +
push 0FFFFFFE7h  +
lea ecx [ebp-28h] +
call sub_100C6CD  +
push edi  +
push 0FFFFFFE7h  +
lea ecx [ebp-18h] +
call sub_100C6CD  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-5Ch] +
call sub_102DFFB  +
lea eax [ebp-40h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-0C0h] +
mov dword ptr [ebp-4] 1 +
call sub_102DFFB  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-98h] +
call sub_102DFFB  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-70h] +
call sub_102DFFB  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-84h] +
call sub_102DFFB  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-0ACh] +
call sub_102DFFB  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-0D4h] +
call sub_102DFFB  +
mov byte ptr [ebp-4] 7 +
lea eax [ebp-5Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0C0h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-98h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-70h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-84h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0ACh] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0D4h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-10h] 2CBh +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_102404A  +
***
call sub_100208C  +
mov ebx ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_102432E  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push edi  +
push 0FFFFFFCEh  +
lea ecx [ebp-38h] +
call sub_100C6CD  +
push 32h  +
push edi  +
lea ecx [ebp-48h] +
call sub_100C6CD  +
push 19h  +
push edi  +
lea ecx [ebp-40h] +
call sub_100C6CD  +
push 19h  +
push 32h  +
lea ecx [ebp-30h] +
call sub_100C6CD  +
push 0FFFFFFE7h  +
push 32h  +
lea ecx [ebp-20h] +
call sub_100C6CD  +
push 0FFFFFFE7h  +
push edi  +
lea ecx [ebp-28h] +
call sub_100C6CD  +
push 0FFFFFFCEh  +
push edi  +
lea ecx [ebp-18h] +
call sub_100C6CD  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-5Ch] +
call sub_102DFFB  +
lea eax [ebp-40h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-0C0h] +
mov dword ptr [ebp-4] 1 +
call sub_102DFFB  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-98h] +
call sub_102DFFB  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-70h] +
call sub_102DFFB  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-84h] +
call sub_102DFFB  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-0ACh] +
call sub_102DFFB  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-0D4h] +
call sub_102DFFB  +
mov byte ptr [ebp-4] 7 +
lea eax [ebp-5Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0C0h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-98h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-70h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-84h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0ACh] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0D4h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-10h] 2C9h +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_10241DB  +
***
call sub_100208C  +
mov edi ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor esi esi +
mov [ebp-4] esi +
cmp ecx esi +
jz loc_1024365  +
call sub_102A08A  +
mov esi eax +
fld  ds:flt_10243FC +
or dword ptr [ebp-4] 0FFFFFFFFh +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-54h] +
fld  ds:flt_10243F8 +
fstp  [esp+0Ch+var_C] +
push 26h  +
push 32h  +
push 0FFFFFFCEh  +
push 0FFFFFFCEh  +
call sub_1027D1D  +
push 32h  +
push 0FFFFFFE4h  +
push 25h  +
push 0FFFFFFF6h  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call sub_1028266  +
push 1Dh  +
push 0FFFFFFE2h  +
push 32h  +
push 0FFFFFFE4h  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call sub_1028266  +
lea eax [ebp-54h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_102DE81  +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-38h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 2D0h +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov [ebp-14h] ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_10245BA  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push edi  +
push 0FFFFFFCEh  +
lea ecx [ebp-1Ch] +
call sub_100C6CD  +
push 0FFFFFFF4h  +
push 0FFFFFFF4h  +
lea ecx [ebp-44h] +
call sub_100C6CD  +
push 0FFFFFFCEh  +
push edi  +
lea ecx [ebp-2Ch] +
call sub_100C6CD  +
push 0FFFFFFF4h  +
push 0Ch  +
lea ecx [ebp-4Ch] +
call sub_100C6CD  +
push edi  +
push 32h  +
lea ecx [ebp-3Ch] +
call sub_100C6CD  +
push 0Ch  +
push 0Ch  +
lea ecx [ebp-24h] +
call sub_100C6CD  +
push 32h  +
push edi  +
lea ecx [ebp-34h] +
call sub_100C6CD  +
push 0Ch  +
push 0FFFFFFF4h  +
lea ecx [ebp-54h] +
call sub_100C6CD  +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-68h] +
call sub_102DFFB  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-44h] +
push eax  +
lea ecx [ebp-90h] +
mov dword ptr [ebp-4] 1 +
call sub_102DFFB  +
lea eax [ebp-4Ch] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-0E0h] +
call sub_102DFFB  +
lea eax [ebp-3Ch] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-0B8h] +
call sub_102DFFB  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
lea ecx [ebp-7Ch] +
call sub_102DFFB  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-0A4h] +
call sub_102DFFB  +
lea eax [ebp-54h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-0CCh] +
call sub_102DFFB  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-54h] +
push eax  +
lea ecx [ebp-0F4h] +
call sub_102DFFB  +
lea eax [ebp-68h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 8 +
call sub_102DE81  +
lea eax [ebp-90h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0E0h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0B8h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-7Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0A4h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0CCh] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0F4h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
mov ecx [ebp-14h] +
lea eax [ebp-10h] +
push eax  +
mov dword ptr [ebp-10h] 2CCh +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_1024438  +
***
call sub_100208C  +
mov ebx ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10247DC  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0FFFFFFCEh  +
push 0  +
lea ecx [ebp-50h] +
call sub_100C6CD  +
push 0FFFFFFF4h  +
push 0FFFFFFF4h  +
lea ecx [ebp-60h] +
call sub_100C6CD  +
push 0FFFFFFF5h  +
push 0FFFFFFCEh  +
lea ecx [ebp-28h] +
call sub_100C6CD  +
push 0Ch  +
push 0FFFFFFECh  +
lea ecx [ebp-48h] +
call sub_100C6CD  +
push 32h  +
push 0FFFFFFE1h  +
lea ecx [ebp-38h] +
call sub_100C6CD  +
push 1Ch  +
push 0  +
lea ecx [ebp-58h] +
call sub_100C6CD  +
push 32h  +
push 1Fh  +
lea ecx [ebp-20h] +
call sub_100C6CD  +
push 0Ch  +
push 14h  +
lea ecx [ebp-30h] +
call sub_100C6CD  +
push 0FFFFFFF5h  +
push 32h  +
lea ecx [ebp-40h] +
call sub_100C6CD  +
push 0FFFFFFF4h  +
push 0Ch  +
lea ecx [ebp-18h] +
call sub_100C6CD  +
lea eax [ebp-60h] +
push eax  +
lea eax [ebp-50h] +
push eax  +
lea ecx [ebp-74h] +
call sub_102DFFB  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-60h] +
push eax  +
lea ecx [ebp-9Ch] +
mov dword ptr [ebp-4] 1 +
call sub_102DFFB  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-0ECh] +
call sub_102DFFB  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-0C4h] +
call sub_102DFFB  +
lea eax [ebp-58h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-114h] +
call sub_102DFFB  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-58h] +
push eax  +
lea ecx [ebp-88h] +
call sub_102DFFB  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-0B0h] +
call sub_102DFFB  +
lea eax [ebp-40h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-0D8h] +
call sub_102DFFB  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-100h] +
call sub_102DFFB  +
lea eax [ebp-50h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-128h] +
call sub_102DFFB  +
lea eax [ebp-74h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Ah +
call sub_102DE81  +
lea eax [ebp-9Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0ECh] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0C4h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-114h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-88h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0B0h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0D8h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-100h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-128h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-10h] 2CDh +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_10245F7  +
***
call sub_100208C  +
mov [ebp-14h] ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_1024A5D  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0FFFFFFCEh  +
push edi  +
lea ecx [ebp-1Ch] +
call sub_100C6CD  +
push 0FFFFFFE7h  +
push 12h  +
lea ecx [ebp-64h] +
call sub_100C6CD  +
push 0FFFFFFE7h  +
push 32h  +
lea ecx [ebp-2Ch] +
call sub_100C6CD  +
push edi  +
push 22h  +
lea ecx [ebp-6Ch] +
call sub_100C6CD  +
push 19h  +
push 32h  +
lea ecx [ebp-3Ch] +
call sub_100C6CD  +
push 19h  +
push 12h  +
lea ecx [ebp-5Ch] +
call sub_100C6CD  +
push 32h  +
push edi  +
lea ecx [ebp-4Ch] +
call sub_100C6CD  +
push 19h  +
push 0FFFFFFEEh  +
lea ecx [ebp-24h] +
call sub_100C6CD  +
push 19h  +
push 0FFFFFFCEh  +
lea ecx [ebp-34h] +
call sub_100C6CD  +
push edi  +
push 0FFFFFFDEh  +
lea ecx [ebp-44h] +
call sub_100C6CD  +
push 0FFFFFFE7h  +
push 0FFFFFFCEh  +
lea ecx [ebp-54h] +
call sub_100C6CD  +
push 0FFFFFFE7h  +
push 0FFFFFFEEh  +
lea ecx [ebp-74h] +
call sub_100C6CD  +
lea eax [ebp-64h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-88h] +
call sub_102DFFB  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-64h] +
push eax  +
lea ecx [ebp-0B0h] +
mov dword ptr [ebp-4] 1 +
call sub_102DFFB  +
lea eax [ebp-6Ch] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-150h] +
call sub_102DFFB  +
lea eax [ebp-3Ch] +
push eax  +
lea eax [ebp-6Ch] +
push eax  +
lea ecx [ebp-0D8h] +
call sub_102DFFB  +
lea eax [ebp-5Ch] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
lea ecx [ebp-128h] +
call sub_102DFFB  +
lea eax [ebp-4Ch] +
push eax  +
lea eax [ebp-5Ch] +
push eax  +
lea ecx [ebp-100h] +
call sub_102DFFB  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-9Ch] +
call sub_102DFFB  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-0C4h] +
call sub_102DFFB  +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-0ECh] +
call sub_102DFFB  +
lea eax [ebp-54h] +
push eax  +
lea eax [ebp-44h] +
push eax  +
lea ecx [ebp-114h] +
call sub_102DFFB  +
lea eax [ebp-74h] +
push eax  +
lea eax [ebp-54h] +
push eax  +
lea ecx [ebp-13Ch] +
call sub_102DFFB  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-74h] +
push eax  +
lea ecx [ebp-164h] +
call sub_102DFFB  +
lea eax [ebp-88h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Ch +
call sub_102DE81  +
lea eax [ebp-0B0h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-150h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0D8h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-128h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-100h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-9Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0C4h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0ECh] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-114h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-13Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-164h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
mov ecx [ebp-14h] +
lea eax [ebp-10h] +
push eax  +
mov dword ptr [ebp-10h] 2CEh +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_102481B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+10h] 0 +
and dword ptr [esi+14h] 0 +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
mov [esi+8] eax +
mov eax [ebp+arg_C] +
mov [esi+0Ch] eax +
lea eax [ebp+arg_10] +
push eax  +
lea ecx [esi+18h] +
call sub_100CF7C  +
lea eax [ebp+arg_28] +
push eax  +
lea ecx [esi+30h] +
call sub_100CF33  +
mov eax esi +
pop esi  +
pop ebp  +
retn 68h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
lea ecx [esi+4] +
mov [esi] eax +
call sub_100CCE5  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
push offset dword_108A2A0  +
push dword_108E5D4  +
mov dword_108A2A0 eax +
push offset unk_108BBB4  +
push offset unk_108BBB8  +
push offset unk_108BBB0  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_108A29C eax +
retn   +
***
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_108A1E0 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_1045CA3  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1024BEA  +
test dword_108A1E0 ebx +
jz loc_1024BEA  +
mov dword_108A1E0 esi +
not esi  +
mov dword_108A1E4 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
mov esi 0BB40E64Fh +
jmp loc_1024BD7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call sub_100C009  +
fld  [ebp+arg_24] +
mov al [ebp+arg_20] +
fstp  dword ptr [esi+24h] +
fld  [ebp+arg_28] +
mov [esi+20h] al +
fstp  dword ptr [esi+28h] +
mov eax esi +
fld  [ebp+arg_2C] +
fstp  dword ptr [esi+2Ch] +
fld  [ebp+arg_30] +
fstp  dword ptr [esi+30h] +
fld  [ebp+arg_34] +
fstp  dword ptr [esi+34h] +
fld  [ebp+arg_38] +
fstp  dword ptr [esi+38h] +
pop esi  +
pop ebp  +
retn 3Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_10] +
mov [eax+10h] ecx +
mov cl [ebp+arg_14] +
mov [eax+14h] cl +
pop ebp  +
retn 18h  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100B6DE  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_100B940 +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov [esi+10h] eax +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1022BA1  +
and dword ptr [esi+90h] 0 +
mov dword ptr [esi] offset off_1007B2C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1023035  +
mov eax [edi] +
push 4  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+48h] eax +
mov edx [eax] +
push esi  +
mov ecx eax +
call dword ptr [edx]  +
mov eax [edi] +
push 29h  +
mov ecx edi +
call dword ptr [eax+18h]  +
pop edi  +
mov [esi+4Ch] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
call sub_1023035  +
mov eax [esi] +
push 2  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov [edi+48h] eax +
mov edx [eax] +
push edi  +
mov ecx eax +
call dword ptr [edx]  +
mov eax [esi] +
push 15h  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov [edi+54h] eax +
mov eax [esi] +
push 29h  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov [edi+4Ch] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1023035  +
mov eax [edi] +
push 3  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+48h] eax +
mov edx [eax] +
push esi  +
mov ecx eax +
call dword ptr [edx]  +
mov eax [edi] +
push 2Ah  +
mov ecx edi +
call dword ptr [eax+18h]  +
pop edi  +
mov [esi+4Ch] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset __imp_GdiplusStartup +
jmp loc_100ABE3  +
***
mov eax ds:dword_100ACFC +
test eax eax +
jnz loc_1049B78  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryA  +
mov edi eax +
test edi edi +
jz loc_1049B85  +
push edi  +
push [ebp+Target]  +
call ds:InterlockedExchange  +
cmp eax edi +
jz loc_1024DF2  +
cmp dword ptr [esi+18h] 0 +
jz loc_100ACAE  +
jmp loc_1049BCA  +
mov edi eax +
test edi edi +
jz loc_1024DBA  +
jmp loc_1024DCD  +
push edi  +
call ds:FreeLibrary  +
jmp loc_100ACAE  +
***
mov ecx dword_108E05C +
mov dword_108C6D8 eax +
mov dword_108C6DC ecx +
mov dword_108C6E0 eax +
mov dword_108C6E4 ecx +
mov dword_108C6E8 eax +
mov dword_108C6EC ecx +
mov dword_108C6F0 eax +
mov dword_108C6F4 ecx +
mov dword_108C6F8 ecx +
mov dword_108C6FC eax +
mov dword_108C700 ecx +
mov dword_108C704 eax +
mov dword_108C708 ecx +
mov dword_108C70C eax +
mov dword_108C710 ecx +
mov dword_108C714 eax +
mov dword_108C718 eax +
mov dword_108C71C ecx +
mov dword_108C720 eax +
mov dword_108C724 ecx +
mov dword_108C728 eax +
mov dword_108C72C ecx +
mov dword_108C730 eax +
mov dword_108C734 ecx +
mov dword_108C738 ecx +
mov dword_108C73C eax +
mov dword_108C740 ecx +
mov dword_108C744 eax +
mov dword_108C748 ecx +
mov dword_108C74C eax +
mov dword_108C750 ecx +
mov dword_108C754 eax +
mov dword_108C758 eax +
mov dword_108C75C ecx +
mov dword_108C760 eax +
mov dword_108C764 ecx +
mov dword_108C768 eax +
mov dword_108C76C ecx +
mov dword_108C770 eax +
mov dword_108C774 ecx +
mov dword_108C778 ecx +
mov dword_108C77C eax +
mov dword_108C780 ecx +
mov dword_108C784 eax +
mov dword_108C788 ecx +
mov dword_108C78C eax +
mov dword_108C790 ecx +
mov dword_108C794 eax +
mov dword_108C798 eax +
mov dword_108C79C ecx +
mov dword_108C7A0 eax +
mov dword_108C7A4 ecx +
mov dword_108C7A8 eax +
mov dword_108C7AC ecx +
mov dword_108C7B0 eax +
mov dword_108C7B4 ecx +
mov dword_108C7B8 ecx +
mov dword_108C7BC eax +
mov dword_108C7C0 ecx +
mov dword_108C7C4 eax +
mov dword_108C7C8 ecx +
mov dword_108C7CC eax +
mov dword_108C7D0 ecx +
mov dword_108C7D4 eax +
retn   +
***
push (offset dword_101E780+3)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1013E9D  +
pop ecx  +
retn   +
***
mov ecx offset unk_108BCB8 +
call sub_102A360  +
push (offset dword_101E858+3)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call ??0CString@@QAE@XZ  +
push (offset byte_101E878+1)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1013E9D  +
pop ecx  +
retn   +
***
push (offset dword_101E8B8+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1013E9D  +
pop ecx  +
retn   +
***
add byte_108A490[ecx] bh +
call sub_1029C01  +
push (offset dword_101E92C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
add byte_108A4D8[ecx] bh +
call sub_1029C01  +
push (offset dword_101E93C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
add byte_108A520[ecx] bh +
call sub_1029C01  +
push (offset dword_101E94C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
mov ecx offset dword_108A568 +
call sub_1029C31  +
and dword_108A570 0 +
push (offset dword_101E95C+2)  +
mov dword_108A568 offset off_10043DC +
mov dword_108A5A8 260h +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101E96C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101E97C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101E98C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101E99C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101E9AC+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101E9BC+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101E9CC+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101E9DC+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101E9EC+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101E9FC+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EA0C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EA1C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EA2C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EA3C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EA4C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EA5C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EA6C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EA7C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EA8C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EA9C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EAAC+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EABC+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EACC+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EADC+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EAEC+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EAFC+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1029C01  +
push (offset dword_101EB0C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_102A2D3  +
push (offset byte_101EB3C+1)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_10144B1  +
push offset loc_101F7FC  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_1013E9D  +
pop ecx  +
retn   +
***
jmp sub_100C68F  +
***
mov esi ecx +
push esi  +
mov ecx edi +
call sub_10147F3  +
jmp loc_10254D7  +
mov edx [edx+8] +
cmp byte ptr [edx+1Ch] 0 +
jz loc_10254FA  +
cmp esi [ecx+8] +
jz loc_10254BD  +
mov eax [esi+4] +
mov byte ptr [eax+1Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+1Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_102614E  +
jmp loc_10255BC  +
mov byte ptr [ecx+1Ch] 1 +
mov byte ptr [edx+1Ch] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+1Ch] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_10255BC  +
***
call sub_100208C  +
mov edi ecx +
cmp dword ptr [edi+8] 0FFFFFFEh +
jnb loc_1043EFB  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_1029D96  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jz loc_10235D5  +
cmp byte ptr [ebp+0Ch] 0 +
jnz loc_10235E5  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_1025570  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
mov ecx [eax] +
cmp byte ptr [ecx+1Ch] 0 +
jnz loc_10255C1  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jz loc_10254C9  +
mov edx [edx] +
cmp byte ptr [edx+1Ch] 0 +
jz loc_10254FA  +
cmp esi [ecx] +
jz loc_1043F26  +
mov eax [esi+4] +
mov byte ptr [eax+1Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+1Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_10147F3  +
lea eax [esi+4] +
jmp loc_1025575  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+1Ch] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1002061  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+1Dh] dl +
jnz loc_1043EF3  +
mov ecx [eax] +
cmp [ecx+1Dh] dl +
jz loc_1029D68  +
mov eax [eax+4] +
cmp [eax+1Dh] dl +
jnz loc_102560C  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_102560C  +
mov [esi] eax +
jmp loc_10255FA  +
mov ecx [esi] +
cmp [ecx+1Dh] dl +
jnz loc_1025615  +
mov [esi] eax +
pop esi  +
retn   +
***
call sub_100208C  +
mov [ebp-10h] ecx +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
fldz   +
xor esi esi +
mov [ebp-4] esi +
mov edi 4B0h +
cmp eax esi +
jz loc_1025ED4  +
sub esp 40h +
mov [ebp-18h] esp +
mov ebx esp +
sub esp 18h +
fst  [esp+5Ch+var_48] +
fst  [esp+5Ch+var_4C] +
fst  [esp+5Ch+var_50] +
fst  [esp+5Ch+var_54] +
fld  ds:flt_1025F38 +
fstp  [esp+5Ch+var_58] +
fld  ds:flt_1025F34 +
fstp  [esp+5Ch+var_5C] +
push 1  +
sub esp 20h +
mov ecx esp +
mov [ebp-18h] esp +
sub esp 10h +
fst  [esp+90h+var_84] +
fst  [esp+90h+var_88] +
fst  [esp+90h+var_8C] +
fstp  [esp+90h+var_90] +
call sub_100CE76  +
mov ecx ebx +
call sub_1024BF6  +
sub esp 18h +
mov ecx esp +
mov [ebp-18h] esp +
push esi  +
push esi  +
push esi  +
push esi  +
push edi  +
push esi  +
call sub_1024C3D  +
mov ecx [ebp-14h] +
push 0C3B2h  +
push 0C3B6h  +
push 0Fh  +
push 1  +
call sub_1024A69  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
push 2  +
call sub_1025F41  +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 1 +
cmp eax esi +
jz loc_1025EDD  +
fldz   +
sub esp 40h +
mov [ebp-18h] esp +
mov ebx esp +
sub esp 18h +
fst  [esp+5Ch+var_48] +
fst  [esp+5Ch+var_4C] +
fst  [esp+5Ch+var_50] +
fst  [esp+5Ch+var_54] +
fld  ds:flt_1025F38 +
fstp  [esp+5Ch+var_58] +
fld  ds:flt_1025F34 +
fstp  [esp+5Ch+var_5C] +
push 1  +
sub esp 20h +
mov ecx esp +
mov [ebp-18h] esp +
sub esp 10h +
fst  [esp+90h+var_84] +
fst  [esp+90h+var_88] +
fst  [esp+90h+var_8C] +
fstp  [esp+90h+var_90] +
call sub_100CE76  +
mov ecx ebx +
call sub_1024BF6  +
sub esp 18h +
mov ecx esp +
mov [ebp-18h] esp +
push esi  +
push esi  +
push esi  +
push esi  +
push edi  +
push esi  +
call sub_1024C3D  +
mov ecx [ebp-14h] +
push 0C3B2h  +
push 0C3E7h  +
push 0Fh  +
push 1  +
call sub_1024A69  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
push 3  +
call sub_1025F41  +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 2 +
cmp eax esi +
jz loc_1025EE4  +
fldz   +
sub esp 40h +
mov [ebp-18h] esp +
mov ebx esp +
sub esp 18h +
fst  [esp+5Ch+var_48] +
fst  [esp+5Ch+var_4C] +
fst  [esp+5Ch+var_50] +
fst  [esp+5Ch+var_54] +
fld  ds:flt_1025F38 +
fstp  [esp+5Ch+var_58] +
fld  ds:flt_1025F34 +
fstp  [esp+5Ch+var_5C] +
push 1  +
sub esp 20h +
mov ecx esp +
mov [ebp-18h] esp +
sub esp 10h +
fst  [esp+90h+var_84] +
fst  [esp+90h+var_88] +
fst  [esp+90h+var_8C] +
fstp  [esp+90h+var_90] +
call sub_100CE76  +
mov ecx ebx +
call sub_1024BF6  +
sub esp 18h +
mov ecx esp +
mov [ebp-18h] esp +
push esi  +
push esi  +
push esi  +
push esi  +
push edi  +
push esi  +
call sub_1024C3D  +
mov ecx [ebp-14h] +
push 0C3E2h  +
push 0C3E0h  +
push 0Fh  +
push 1  +
call sub_1024A69  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
push 4  +
call sub_1025F41  +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 3 +
cmp eax esi +
jz loc_1025EEB  +
fldz   +
sub esp 40h +
mov [ebp-18h] esp +
mov ebx esp +
sub esp 18h +
fst  [esp+5Ch+var_48] +
fst  [esp+5Ch+var_4C] +
fst  [esp+5Ch+var_50] +
fst  [esp+5Ch+var_54] +
fld  ds:flt_1025F38 +
fstp  [esp+5Ch+var_58] +
fld  ds:flt_1025F34 +
fstp  [esp+5Ch+var_5C] +
push 1  +
sub esp 20h +
mov ecx esp +
mov [ebp-18h] esp +
sub esp 10h +
fst  [esp+90h+var_84] +
fst  [esp+90h+var_88] +
fst  [esp+90h+var_8C] +
fstp  [esp+90h+var_90] +
call sub_100CE76  +
mov ecx ebx +
call sub_1024BF6  +
sub esp 18h +
mov ecx esp +
mov [ebp-18h] esp +
push esi  +
push esi  +
push esi  +
push esi  +
push edi  +
push esi  +
call sub_1024C3D  +
mov ecx [ebp-14h] +
push 0C3E2h  +
push 0C3E8h  +
push 0Fh  +
push 1  +
call sub_1024A69  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
push 5  +
call sub_1025F41  +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 4 +
cmp eax esi +
jz loc_1025EF2  +
fldz   +
sub esp 40h +
mov [ebp-18h] esp +
mov ebx esp +
sub esp 18h +
fst  [esp+5Ch+var_48] +
fst  [esp+5Ch+var_4C] +
fst  [esp+5Ch+var_50] +
fst  [esp+5Ch+var_54] +
fld  ds:flt_1025F30 +
fstp  [esp+5Ch+var_58] +
fld  ds:flt_1025F34 +
fstp  [esp+5Ch+var_5C] +
push 1  +
sub esp 20h +
mov ecx esp +
mov [ebp-18h] esp +
sub esp 10h +
fst  [esp+90h+var_84] +
fst  [esp+90h+var_88] +
fst  [esp+90h+var_8C] +
fstp  [esp+90h+var_90] +
call sub_100CE76  +
mov ecx ebx +
call sub_1024BF6  +
sub esp 18h +
mov ecx esp +
mov [ebp-18h] esp +
push 1  +
push esi  +
push 1DEh  +
push esi  +
push esi  +
push esi  +
call sub_1024C3D  +
mov ecx [ebp-14h] +
push 0C3B3h  +
push 0C3B7h  +
push 0Fh  +
push 1  +
call sub_1024A69  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
push 6  +
call sub_1025F41  +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 5 +
cmp eax esi +
jz loc_1025EF9  +
fldz   +
sub esp 40h +
mov [ebp-18h] esp +
mov ebx esp +
sub esp 18h +
fst  [esp+5Ch+var_48] +
fst  [esp+5Ch+var_4C] +
fst  [esp+5Ch+var_50] +
fst  [esp+5Ch+var_54] +
fst  [esp+5Ch+var_58] +
fld  ds:flt_1025F34 +
fstp  [esp+5Ch+var_5C] +
push esi  +
sub esp 20h +
mov ecx esp +
mov [ebp-18h] esp +
sub esp 10h +
fst  [esp+90h+var_84] +
fst  [esp+90h+var_88] +
fst  [esp+90h+var_8C] +
fstp  [esp+90h+var_90] +
call sub_100CE76  +
mov ecx ebx +
call sub_1024BF6  +
sub esp 18h +
mov ecx esp +
mov [ebp-18h] esp +
push 1  +
push esi  +
push 32h  +
push esi  +
push esi  +
push esi  +
call sub_1024C3D  +
mov ecx [ebp-14h] +
push 0C3B4h  +
push 0C3B8h  +
push 0Fh  +
push 1  +
call sub_1024A69  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
push 7  +
call sub_1025F41  +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 6 +
cmp eax esi +
jz loc_1025F00  +
fldz   +
sub esp 40h +
mov [ebp-18h] esp +
mov ebx esp +
sub esp 18h +
fst  [esp+5Ch+var_48] +
fst  [esp+5Ch+var_4C] +
fst  [esp+5Ch+var_50] +
fst  [esp+5Ch+var_54] +
fld  ds:flt_1025F38 +
fstp  [esp+5Ch+var_58] +
fld  ds:flt_1025F34 +
fstp  [esp+5Ch+var_5C] +
push 1  +
sub esp 20h +
mov ecx esp +
mov [ebp-18h] esp +
sub esp 10h +
fst  [esp+90h+var_84] +
fst  [esp+90h+var_88] +
fst  [esp+90h+var_8C] +
fstp  [esp+90h+var_90] +
call sub_100CE76  +
mov ecx ebx +
call sub_1024BF6  +
sub esp 18h +
mov ecx esp +
mov [ebp-18h] esp +
push esi  +
push esi  +
push esi  +
push esi  +
push edi  +
push esi  +
call sub_1024C3D  +
mov ecx [ebp-14h] +
push 0C3B2h  +
push 0C3AFh  +
push 32h  +
push 10h  +
call sub_1024A69  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
push 2  +
call sub_1025F41  +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 7 +
cmp eax esi +
jz loc_1025F07  +
fldz   +
sub esp 40h +
mov [ebp-18h] esp +
mov ebx esp +
sub esp 18h +
fst  [esp+5Ch+var_48] +
fst  [esp+5Ch+var_4C] +
fst  [esp+5Ch+var_50] +
fst  [esp+5Ch+var_54] +
fld  ds:flt_1025F38 +
fstp  [esp+5Ch+var_58] +
fld  ds:flt_1025F34 +
fstp  [esp+5Ch+var_5C] +
push 1  +
sub esp 20h +
mov ecx esp +
mov [ebp-18h] esp +
sub esp 10h +
fst  [esp+90h+var_84] +
fst  [esp+90h+var_88] +
fst  [esp+90h+var_8C] +
fstp  [esp+90h+var_90] +
call sub_100CE76  +
mov ecx ebx +
call sub_1024BF6  +
sub esp 18h +
mov ecx esp +
mov [ebp-18h] esp +
push esi  +
push esi  +
push esi  +
push esi  +
push edi  +
push esi  +
call sub_1024C3D  +
mov ecx [ebp-14h] +
push 0C3B2h  +
push 0C3AFh  +
push 32h  +
push 10h  +
call sub_1024A69  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
push 3  +
call sub_1025F41  +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 8 +
cmp eax esi +
jz loc_1025F0E  +
fldz   +
sub esp 40h +
mov [ebp-18h] esp +
mov ebx esp +
sub esp 18h +
fst  [esp+5Ch+var_48] +
fst  [esp+5Ch+var_4C] +
fst  [esp+5Ch+var_50] +
fst  [esp+5Ch+var_54] +
fld  ds:flt_1025F38 +
fstp  [esp+5Ch+var_58] +
fld  ds:flt_1025F34 +
fstp  [esp+5Ch+var_5C] +
push 1  +
sub esp 20h +
mov ecx esp +
mov [ebp-18h] esp +
sub esp 10h +
fst  [esp+90h+var_84] +
fst  [esp+90h+var_88] +
fst  [esp+90h+var_8C] +
fstp  [esp+90h+var_90] +
call sub_100CE76  +
mov ecx ebx +
call sub_1024BF6  +
sub esp 18h +
mov ecx esp +
mov [ebp-18h] esp +
push esi  +
push esi  +
push esi  +
push esi  +
push edi  +
push esi  +
call sub_1024C3D  +
mov ecx [ebp-14h] +
push 0C3E2h  +
push 0C3E1h  +
push 32h  +
push 10h  +
call sub_1024A69  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
push 4  +
call sub_1025F41  +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 9 +
cmp eax esi +
jz loc_1025F15  +
fldz   +
sub esp 40h +
mov [ebp-18h] esp +
mov ebx esp +
sub esp 18h +
fst  [esp+5Ch+var_48] +
fst  [esp+5Ch+var_4C] +
fst  [esp+5Ch+var_50] +
fst  [esp+5Ch+var_54] +
fld  ds:flt_1025F38 +
fstp  [esp+5Ch+var_58] +
fld  ds:flt_1025F34 +
fstp  [esp+5Ch+var_5C] +
push 1  +
sub esp 20h +
mov ecx esp +
mov [ebp-18h] esp +
sub esp 10h +
fst  [esp+90h+var_84] +
fst  [esp+90h+var_88] +
fst  [esp+90h+var_8C] +
fstp  [esp+90h+var_90] +
call sub_100CE76  +
mov ecx ebx +
call sub_1024BF6  +
sub esp 18h +
mov ecx esp +
mov [ebp-18h] esp +
push esi  +
push esi  +
push esi  +
push esi  +
push edi  +
push esi  +
call sub_1024C3D  +
mov ecx [ebp-14h] +
push 0C3E2h  +
push 0C3E1h  +
push 32h  +
push 10h  +
call sub_1024A69  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
push 5  +
call sub_1025F41  +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 0Ah +
cmp eax esi +
jz loc_1025F1C  +
fldz   +
sub esp 40h +
mov [ebp-18h] esp +
mov edi esp +
sub esp 18h +
fst  [esp+5Ch+var_48] +
fst  [esp+5Ch+var_4C] +
fst  [esp+5Ch+var_50] +
fst  [esp+5Ch+var_54] +
fld  ds:flt_1025F30 +
fstp  [esp+5Ch+var_58] +
fld  ds:flt_1025F34 +
fstp  [esp+5Ch+var_5C] +
push 1  +
sub esp 20h +
mov ecx esp +
mov [ebp-18h] esp +
sub esp 10h +
fst  [esp+90h+var_84] +
fst  [esp+90h+var_88] +
fst  [esp+90h+var_8C] +
fstp  [esp+90h+var_90] +
call sub_100CE76  +
mov ecx edi +
call sub_1024BF6  +
sub esp 18h +
mov ecx esp +
mov [ebp-18h] esp +
push 1  +
push esi  +
push 241h  +
push esi  +
push esi  +
push esi  +
call sub_1024C3D  +
mov ecx [ebp-14h] +
push 0C3B3h  +
push 0C3B0h  +
push 32h  +
push 10h  +
call sub_1024A69  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
push 6  +
call sub_1025F41  +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 0Bh +
mov edi 0C9h +
cmp eax esi +
jz loc_1025F23  +
fldz   +
sub esp 40h +
mov [ebp-18h] esp +
mov ebx esp +
sub esp 18h +
fst  [esp+5Ch+var_48] +
fst  [esp+5Ch+var_4C] +
fst  [esp+5Ch+var_50] +
fst  [esp+5Ch+var_54] +
fst  [esp+5Ch+var_58] +
fld  ds:flt_1025F34 +
fstp  [esp+5Ch+var_5C] +
push esi  +
sub esp 20h +
mov ecx esp +
mov [ebp-18h] esp +
sub esp 10h +
fst  [esp+90h+var_84] +
fst  [esp+90h+var_88] +
fst  [esp+90h+var_8C] +
fstp  [esp+90h+var_90] +
call sub_100CE76  +
mov ecx ebx +
call sub_1024BF6  +
sub esp 18h +
mov ecx esp +
mov [ebp-18h] esp +
push 1  +
push esi  +
push edi  +
push esi  +
push esi  +
push esi  +
call sub_1024C3D  +
mov ecx [ebp-14h] +
push 0C3B4h  +
push 0C3B1h  +
push 32h  +
push 10h  +
call sub_1024A69  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
push 7  +
call sub_1025F41  +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 0Ch +
cmp eax esi +
jz loc_1025F2A  +
fldz   +
sub esp 40h +
mov [ebp-18h] esp +
mov ebx esp +
sub esp 18h +
fst  [esp+5Ch+var_48] +
fst  [esp+5Ch+var_4C] +
fst  [esp+5Ch+var_50] +
fst  [esp+5Ch+var_54] +
fst  [esp+5Ch+var_58] +
fld  ds:flt_1025F34 +
fstp  [esp+5Ch+var_5C] +
push esi  +
sub esp 20h +
mov ecx esp +
mov [ebp-18h] esp +
sub esp 10h +
fst  [esp+90h+var_84] +
fst  [esp+90h+var_88] +
fst  [esp+90h+var_8C] +
fstp  [esp+90h+var_90] +
call sub_100CE76  +
mov ecx ebx +
call sub_1024BF6  +
sub esp 18h +
mov ecx esp +
mov [ebp-18h] esp +
push 1  +
push esi  +
push edi  +
push esi  +
push esi  +
push esi  +
call sub_1024C3D  +
mov ecx [ebp-14h] +
push 0C3B9h  +
push 0C3BAh  +
push 32h  +
push 1  +
call sub_1024A69  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
push 8  +
call sub_1025F41  +
call sub_1002061  +
retn   +
fstp  st +
xor eax eax +
jmp loc_10256C9  +
xor eax eax +
jmp loc_1025773  +
xor eax eax +
jmp loc_102581D  +
xor eax eax +
jmp loc_10258C7  +
xor eax eax +
jmp loc_1025976  +
xor eax eax +
jmp loc_1025A1B  +
xor eax eax +
jmp loc_1025AC5  +
xor eax eax +
jmp loc_1025B6F  +
xor eax eax +
jmp loc_1025C19  +
xor eax eax +
jmp loc_1025CC3  +
xor eax eax +
jmp loc_1025D72  +
xor eax eax +
jmp loc_1025E1B  +
xor eax eax +
jmp loc_1025EBF  +
***
call sub_100208C  +
mov esi ecx +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_100639D  +
mov eax [esi+4] +
mov ecx [ebp-10h] +
cmp ecx eax +
jnz loc_1025FAC  +
lea ecx [ebp-1Ch] +
call sub_100BCF1  +
and dword ptr [ebp-14h] 0 +
mov [ebp-18h] eax +
and dword ptr [ebp-4] 0 +
lea ecx [ebp+0Ch] +
push ecx  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_100BC85  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
call sub_1027328  +
mov ecx eax +
call sub_102A0A6  +
lea ecx [ebp-1Ch] +
call sub_100BAC8  +
call sub_1002061  +
retn 8  +
mov eax [ecx+14h] +
add ecx 10h +
lea edx [ebp+0Ch] +
push edx  +
push eax  +
call sub_100BC85  +
jmp loc_1025FA4  +
***
push eax  +
push 0  +
jmp loc_102603A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+8] 0 +
jz loc_10235F9  +
mov eax [ebx+4] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_4] eax +
cmp esi [eax] +
jz loc_102604C  +
cmp esi eax +
jz loc_102361F  +
lea eax [esi+0Ch] +
push eax  +
mov ecx edi +
call sub_102E11A  +
test al al +
jz loc_1023611  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] esi +
call sub_10255DD  +
mov ecx [ebp+arg_8] +
push edi  +
add ecx 0Ch +
call sub_102E11A  +
test al al +
jz loc_1023611  +
mov eax [ebp+arg_8] +
mov ecx [eax+8] +
cmp byte ptr [ecx+1Dh] 0 +
push edi  +
mov ecx ebx +
jnz loc_1025FBE  +
push esi  +
push 1  +
push [ebp+arg_0]  +
call sub_102551A  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
lea eax [esi+0Ch] +
push eax  +
mov ecx edi +
call sub_102E11A  +
test al al +
jz loc_1043F63  +
push edi  +
mov ecx ebx +
jmp loc_1026037  +
***
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_10260C5  +
***
call sub_100208C  +
mov edi ecx +
cmp dword ptr [edi+8] 0FFFFFFEh +
jnb loc_1044627  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_102A115  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jz loc_1026064  +
cmp byte ptr [ebp+0Ch] 0 +
jnz loc_1044652  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_10260C8  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
mov ecx [eax] +
cmp byte ptr [ecx+1Ch] 0 +
jz loc_10260EC  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+1Ch] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1002061  +
retn 10h  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jz loc_1044666  +
mov edx [edx] +
cmp byte ptr [edx+1Ch] 0 +
jz loc_102612C  +
cmp esi [ecx] +
jz loc_10446A5  +
mov eax [esi+4] +
mov byte ptr [eax+1Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+1Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_10147F3  +
lea eax [esi+4] +
jmp loc_10260CD  +
mov byte ptr [ecx+1Ch] 1 +
mov byte ptr [edx+1Ch] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+1Ch] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_1026127  +
***
mov [ecx+4] eax +
jmp loc_1026184  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+1Dh] 0 +
jz loc_1023308  +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jz loc_1026144  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jz loc_102618E  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
mov [ecx+8] eax +
jmp loc_1026184  +
***
push 3  +
push 10h  +
push offset dword_108C494  +
call sub_10261C1  +
push (offset dword_101EF2C+3)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_102E8A8  +
xor eax eax +
mov [ebp-20h] eax +
mov [ebp-4] eax +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
cmp eax [ebp+10h] +
jge loc_1026214  +
mov esi [ebp+8] +
mov ecx esi +
call dword ptr [ebp+14h]  +
add esi [ebp+0Ch] +
mov [ebp+8] esi +
inc dword ptr [ebp-1Ch]  +
jmp loc_10261D8  +
mov dword ptr [ebp-20h] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1026234  +
call sub_102E894  +
retn 14h  +
***
cmp dword ptr [ebp-20h] 0 +
jz loc_1049CA0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi [ebp+arg_4] +
jnb loc_1026265  +
test eax eax +
jnz loc_1026265  +
mov ecx [esi] +
test ecx ecx +
jz loc_1026260  +
call ecx  +
add esi 4 +
jmp loc_102624F  +
pop esi  +
pop ebp  +
retn   +
***
call sub_1024B67  +
push 5Ch  +
push offset dword_1026490  +
call sub_102E8A8  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
lea eax [ebp-6Ch] +
push eax  +
call ds:GetStartupInfoW  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp-4] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp-20h] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jnz loc_1045B06  +
xor esi esi +
inc esi  +
mov eax dword_108A2BC +
cmp eax esi +
jz loc_1045B25  +
mov eax dword_108A2BC +
test eax eax +
jnz loc_10264C7  +
mov dword_108A2BC esi +
push offset dword_102648C  +
push offset dword_1026480  +
call sub_1026244  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1045BC0  +
mov eax dword_108A2BC +
cmp eax esi +
jnz loc_1026320  +
push offset dword_102647C  +
push offset dword_1026368  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_108A2BC 2 +
cmp [ebp-20h] ebx +
jnz loc_102632D  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_108E5E4 ebx +
jnz loc_1045B32  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_1045BC0  +
mov eax [eax] +
mov [ebp-24h] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
jbe loc_10264B8  +
cmp cx 22h +
jz loc_1045B5D  +
inc eax  +
inc eax  +
jmp loc_1026348  +
cmp cx bx +
jz loc_10264D2  +
cmp [ebp-1Ch] ebx +
jz loc_10264D2  +
jmp loc_1026358  +
mov dword_108EF28 esi +
jmp loc_10262FC  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_10147B8  +
cmp cx 20h +
ja loc_10147B8  +
inc eax  +
inc eax  +
mov [ebp-24h] eax +
jmp loc_10264D2  +
***
call sub_100208C  +
mov edi ecx +
push 3  +
pop ebx  +
mov esi offset off_1006E84 +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-14h] 5 +
and dword ptr [ebp-4] 0 +
push 14h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1026E69  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1009F68 +
sub esp 10h +
fstp  [esp+14h+var_C] +
add edi 3F8h +
fld1   +
mov ecx edi +
fstp  [esp+14h+var_14] +
mov byte ptr [ebp-4] 0 +
push eax  +
push 1  +
call sub_1026F35  +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
mov [ebp-14h] ebx +
push 14h  +
mov dword ptr [ebp-4] 2 +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov [ebp-4] bl +
test eax eax +
jz loc_1026E70  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1009F68 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fld1   +
mov byte ptr [ebp-4] 2 +
fstp  [esp+14h+var_14] +
push eax  +
push 2  +
call sub_1026F35  +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-14h] 1 +
push 14h  +
mov dword ptr [ebp-4] 4 +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 5 +
test eax eax +
jz loc_1026E77  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1009F68 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fld1   +
mov byte ptr [ebp-4] 4 +
fstp  [esp+14h+var_14] +
push eax  +
push ebx  +
call sub_1026F35  +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-14h] 5 +
push 14h  +
mov dword ptr [ebp-4] 6 +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 7 +
test eax eax +
jz loc_1026E7E  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1009F68 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fld1   +
mov byte ptr [ebp-4] 6 +
fstp  [esp+14h+var_14] +
push eax  +
push 4  +
call sub_1026F35  +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-14h] 1Eh +
push 14h  +
mov dword ptr [ebp-4] 8 +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 9 +
test eax eax +
jz loc_1026E85  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1009F68 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fld  ds:dbl_1013E90 +
mov byte ptr [ebp-4] 8 +
fstp  [esp+14h+var_14] +
push eax  +
push 5  +
call sub_1026F35  +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-14h] 1Eh +
push 14h  +
mov dword ptr [ebp-4] 0Ah +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 0Bh +
test eax eax +
jz loc_1026E8C  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1009F68 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fld  ds:dbl_1013E90 +
mov byte ptr [ebp-4] 0Ah +
fstp  [esp+14h+var_14] +
push eax  +
push 6  +
call sub_1026F35  +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-14h] 4 +
push 14h  +
mov dword ptr [ebp-4] 0Ch +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 0Dh +
test eax eax +
jz loc_1026E93  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1009F68 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fld  ds:dbl_1013E90 +
mov byte ptr [ebp-4] 0Ch +
fstp  [esp+14h+var_14] +
push eax  +
push 7  +
call sub_1026F35  +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-14h] 1Eh +
push 14h  +
mov dword ptr [ebp-4] 0Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 0Fh +
test eax eax +
jz loc_1026E9A  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1009F68 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fld  ds:dbl_1013E90 +
mov byte ptr [ebp-4] 0Eh +
fstp  [esp+14h+var_14] +
push eax  +
push 8  +
call sub_1026F35  +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-14h] 1Eh +
push 14h  +
mov dword ptr [ebp-4] 10h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 11h +
test eax eax +
jz loc_1026EA1  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1009F68 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fld  ds:dbl_1013E90 +
mov byte ptr [ebp-4] 10h +
fstp  [esp+14h+var_14] +
push eax  +
push 9  +
call sub_1026F35  +
and dword ptr [ebp-14h] 0 +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
push 14h  +
mov dword ptr [ebp-4] 12h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 13h +
test eax eax +
jz loc_1026EA8  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_100CAA8 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fldz   +
mov byte ptr [ebp-4] 12h +
fstp  [esp+14h+var_14] +
push eax  +
push 15h  +
call sub_1026F35  +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-14h] 2 +
push 14h  +
pop eax  +
push eax  +
mov [ebp-4] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 15h +
test eax eax +
jz loc_1026EAF  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_100CAA8 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fldz   +
mov byte ptr [ebp-4] 14h +
fstp  [esp+14h+var_14] +
push eax  +
push 16h  +
call sub_1026F35  +
mov dword ptr [ebp-18h] 7 +
mov dword ptr [ebp-1Ch] offset off_100B5C8 +
mov dword ptr [ebp-14h] offset dword_108A224 +
push 14h  +
mov dword ptr [ebp-4] 16h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 17h +
test eax eax +
jz loc_1026EB6  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1026F28 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fldz   +
mov byte ptr [ebp-4] 16h +
fstp  [esp+14h+var_14] +
push eax  +
push 1Fh  +
call sub_1026F35  +
mov dword ptr [ebp-18h] 7 +
mov dword ptr [ebp-1Ch] offset off_100B5C8 +
mov dword ptr [ebp-14h] offset dword_108A1C8 +
push 14h  +
mov dword ptr [ebp-4] 18h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 19h +
test eax eax +
jz loc_1026EBD  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1026F28 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fldz   +
mov byte ptr [ebp-4] 18h +
fstp  [esp+14h+var_14] +
push eax  +
push 20h  +
call sub_1026F35  +
mov eax dword_108A224 +
mov dword ptr [ebp-18h] 7 +
mov dword ptr [ebp-1Ch] offset off_100B560 +
mov [ebp-14h] eax +
push 14h  +
mov dword ptr [ebp-4] 1Ah +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 1Bh +
test eax eax +
jz loc_1026EC4  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1026F28 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fldz   +
mov byte ptr [ebp-4] 1Ah +
fstp  [esp+14h+var_14] +
push eax  +
push 21h  +
call sub_1026F35  +
mov eax dword_108A1C8 +
mov dword ptr [ebp-18h] 7 +
mov dword ptr [ebp-1Ch] offset off_100B560 +
mov [ebp-14h] eax +
push 14h  +
mov dword ptr [ebp-4] 1Ch +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 1Dh +
test eax eax +
jz loc_1026ECB  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1026F28 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fldz   +
mov byte ptr [ebp-4] 1Ch +
fstp  [esp+14h+var_14] +
push eax  +
push 22h  +
call sub_1026F35  +
mov dword ptr [ebp-18h] 2 +
mov dword ptr [ebp-1Ch] offset off_1006F8C +
mov dword ptr [ebp-14h] 1 +
push 14h  +
mov dword ptr [ebp-4] 1Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 1Fh +
test eax eax +
jz loc_1026ED2  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld1   +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fldz   +
mov byte ptr [ebp-4] 1Eh +
fstp  [esp+14h+var_14] +
push eax  +
push 29h  +
call sub_1026F35  +
and dword ptr [ebp-14h] 0 +
mov dword ptr [ebp-18h] 2 +
mov dword ptr [ebp-1Ch] offset off_1006F8C +
push 14h  +
mov dword ptr [ebp-4] 20h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 21h +
test eax eax +
jz loc_1026ED9  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld1   +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fldz   +
mov byte ptr [ebp-4] 20h +
fstp  [esp+14h+var_14] +
push eax  +
push 2Ah  +
call sub_1026F35  +
and dword ptr [ebp-14h] 0 +
mov dword ptr [ebp-18h] 2 +
mov dword ptr [ebp-1Ch] offset off_1006F8C +
push 14h  +
mov dword ptr [ebp-4] 22h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 23h +
test eax eax +
jz loc_1026EE0  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld1   +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fldz   +
mov byte ptr [ebp-4] 22h +
fstp  [esp+14h+var_14] +
push eax  +
push 2Bh  +
call sub_1026F35  +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-14h] 1 +
push 14h  +
mov dword ptr [ebp-4] 24h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 25h +
test eax eax +
jz loc_1026EE7  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1023058 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fld1   +
mov byte ptr [ebp-4] 24h +
fstp  [esp+14h+var_14] +
push eax  +
push 33h  +
call sub_1026F35  +
and dword ptr [ebp-14h] 0 +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
push 14h  +
mov dword ptr [ebp-4] 26h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 27h +
test eax eax +
jz loc_1026EEE  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1023058 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fld1   +
mov byte ptr [ebp-4] 26h +
fstp  [esp+14h+var_14] +
push eax  +
push 34h  +
call sub_1026F35  +
fld  ds:dbl_100B170 +
fstp  qword ptr [ebp-18h] +
mov dword ptr [ebp-1Ch] 5 +
mov dword ptr [ebp-20h] offset off_102DEB0 +
push 14h  +
mov dword ptr [ebp-4] 28h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 29h +
test eax eax +
jz loc_1026EF5  +
lea ecx [ebp-20h] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld1   +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fldz   +
mov byte ptr [ebp-4] 28h +
fstp  [esp+14h+var_14] +
push eax  +
push 47h  +
call sub_1026F35  +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-14h] 5 +
push 14h  +
mov dword ptr [ebp-4] 2Ah +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 2Bh +
test eax eax +
jz loc_1026EFC  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1009F68 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fld1   +
mov byte ptr [ebp-4] 2Ah +
fstp  [esp+14h+var_14] +
push eax  +
push 65h  +
call sub_1026F35  +
mov eax dword_108A224 +
mov dword ptr [ebp-18h] 7 +
mov dword ptr [ebp-1Ch] offset off_100B560 +
mov [ebp-14h] eax +
push 14h  +
mov dword ptr [ebp-4] 2Ch +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 2Dh +
test eax eax +
jz loc_1026F03  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1026F28 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fldz   +
mov byte ptr [ebp-4] 2Ch +
fstp  [esp+14h+var_14] +
push eax  +
push 66h  +
call sub_1026F35  +
mov eax dword_108A1C8 +
mov dword ptr [ebp-18h] 7 +
mov dword ptr [ebp-1Ch] offset off_100B560 +
mov [ebp-14h] eax +
push 14h  +
mov dword ptr [ebp-4] 2Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 2Fh +
test eax eax +
jz loc_1026F0A  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1026F28 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fldz   +
mov byte ptr [ebp-4] 2Eh +
fstp  [esp+14h+var_14] +
push eax  +
push 67h  +
call sub_1026F35  +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-14h] 1 +
push 14h  +
mov dword ptr [ebp-4] 30h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 31h +
test eax eax +
jz loc_1026F11  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1023058 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fld1   +
mov byte ptr [ebp-4] 30h +
fstp  [esp+14h+var_14] +
push eax  +
push 68h  +
call sub_1026F35  +
and dword ptr [ebp-14h] 0 +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
push 14h  +
mov dword ptr [ebp-4] 32h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 33h +
test eax eax +
jz loc_1026F18  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld  ds:dbl_1023058 +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fld1   +
mov byte ptr [ebp-4] 32h +
fstp  [esp+14h+var_14] +
push eax  +
push 69h  +
call sub_1026F35  +
and dword ptr [ebp-14h] 0 +
mov dword ptr [ebp-18h] 2 +
mov dword ptr [ebp-1Ch] offset off_1006F8C +
push 14h  +
mov dword ptr [ebp-4] 34h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 35h +
test eax eax +
jz loc_1026F1F  +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1024C85  +
fld1   +
sub esp 10h +
fstp  [esp+14h+var_C] +
mov ecx edi +
fldz   +
mov byte ptr [ebp-4] 34h +
fstp  [esp+14h+var_14] +
push eax  +
push 6Ah  +
call sub_1026F35  +
call sub_1002061  +
retn   +
xor eax eax +
jmp loc_102653D  +
xor eax eax +
jmp loc_1026594  +
xor eax eax +
jmp loc_10265EA  +
xor eax eax +
jmp loc_102663F  +
xor eax eax +
jmp loc_1026695  +
xor eax eax +
jmp loc_10266EF  +
xor eax eax +
jmp loc_1026749  +
xor eax eax +
jmp loc_10267A3  +
xor eax eax +
jmp loc_10267FD  +
xor eax eax +
jmp loc_1026854  +
xor eax eax +
jmp loc_10268A8  +
xor eax eax +
jmp loc_1026906  +
xor eax eax +
jmp loc_1026964  +
xor eax eax +
jmp loc_10269C3  +
xor eax eax +
jmp loc_1026A22  +
xor eax eax +
jmp loc_1026A80  +
xor eax eax +
jmp loc_1026AD7  +
xor eax eax +
jmp loc_1026B2E  +
xor eax eax +
jmp loc_1026B80  +
xor eax eax +
jmp loc_1026BD3  +
xor eax eax +
jmp loc_1026C33  +
xor eax eax +
jmp loc_1026C85  +
xor eax eax +
jmp loc_1026CE4  +
xor eax eax +
jmp loc_1026D43  +
xor eax eax +
jmp loc_1026D99  +
xor eax eax +
jmp loc_1026DEC  +
xor eax eax +
jmp loc_1026E47  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
push 10h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1026F7E  +
fld  [ebp+arg_8] +
fstp  qword ptr [eax] +
fld  [ebp+arg_10] +
fstp  qword ptr [eax+8] +
mov ecx [ebp+arg_4] +
and [ebp+var_8] 0 +
mov [ebp+var_4] eax +
lea eax [ebp+arg_0] +
mov [ebp+var_C] ecx +
push eax  +
mov ecx esi +
call sub_1026F87  +
lea esi [ebp+var_C] +
mov edi eax +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
leave   +
retn 18h  +
xor eax eax +
jmp loc_1026F58  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
mov ebx ecx +
call sub_10063DE  +
cmp eax [ebx+4] +
jnz loc_1026FD7  +
xor ecx ecx +
push edi  +
mov [ebp+var_C] ecx +
mov [ebp+var_8] ecx +
mov [ebp+var_4] ecx +
mov ecx [esi] +
mov [ebp+var_1C] ecx +
lea esi [ebp+var_C] +
lea edi [ebp+var_18] +
movs   +
lea ecx [ebp+var_1C] +
push ecx  +
movs   +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx ebx +
movs   +
call sub_1026FE5  +
mov eax [eax] +
pop edi  +
pop esi  +
add eax 10h +
pop ebx  +
leave   +
retn 4  +
mov ecx [esi] +
cmp ecx [eax+0Ch] +
jl loc_1026FA1  +
jmp loc_1026FCE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+8] 0 +
jz loc_1027039  +
mov eax [ebx+4] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_4] eax +
cmp edi [eax] +
jz loc_104427F  +
cmp edi eax +
jnz loc_104428F  +
mov eax [eax+8] +
mov ecx [eax+0Ch] +
cmp ecx [esi] +
jge loc_10442F8  +
push esi  +
push eax  +
push 0  +
mov ecx ebx +
push [ebp+arg_0]  +
call sub_102551A  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
push [ebp+arg_8]  +
push dword ptr [ebx+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_102551A  +
mov eax [ebp+arg_0] +
jmp loc_1027034  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1029F8D  +
mov ecx esi +
call sub_10236C5  +
mov ecx esi +
call sub_1023741  +
mov ecx esi +
call sub_10237BD  +
mov ecx esi +
call sub_1023895  +
mov ecx esi +
call sub_1023963  +
mov ecx esi +
call sub_1023A5F  +
mov ecx esi +
call sub_1023B94  +
mov ecx esi +
call sub_1023CF6  +
mov ecx esi +
call sub_1023E87  +
mov ecx esi +
call sub_1024018  +
mov ecx esi +
call sub_10241A9  +
mov ecx esi +
call sub_102433A  +
mov ecx esi +
call sub_1027428  +
mov ecx esi +
call sub_102807A  +
mov ecx esi +
call sub_1024405  +
mov ecx esi +
call sub_10245C6  +
mov ecx esi +
call sub_10247E8  +
mov ecx esi +
call sub_10282AC  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
push 138h  +
mov eax offset loc_107ECA5 +
call sub_100208C  +
mov edi ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor esi esi +
mov [ebp-4] esi +
cmp ecx esi +
jz loc_1027111  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0FFFFFFCEh  +
push 0FFFFFFF5h  +
lea ecx [ebp-58h] +
call sub_100C6CD  +
push 0FFFFFFEAh  +
push 9  +
lea ecx [ebp-68h] +
call sub_100C6CD  +
push 0FFFFFFEEh  +
push 2  +
lea ecx [ebp-60h] +
call sub_100C6CD  +
push 5  +
push 1Ah  +
lea ecx [ebp-30h] +
call sub_100C6CD  +
push 9  +
push 12h  +
lea ecx [ebp-50h] +
call sub_100C6CD  +
push 32h  +
push 32h  +
lea ecx [ebp-40h] +
call sub_100C6CD  +
push 13h  +
push 0FFFFFFFDh  +
lea ecx [ebp-20h] +
call sub_100C6CD  +
push 0Eh  +
push 6  +
lea ecx [ebp-28h] +
call sub_100C6CD  +
push 0FFFFFFFBh  +
push 0FFFFFFE6h  +
lea ecx [ebp-38h] +
call sub_100C6CD  +
push 0FFFFFFF5h  +
push 0FFFFFFF1h  +
lea ecx [ebp-48h] +
call sub_100C6CD  +
push 0FFFFFFE1h  +
push 0FFFFFFCEh  +
lea ecx [ebp-18h] +
call sub_100C6CD  +
lea eax [ebp-68h] +
push eax  +
lea eax [ebp-58h] +
push eax  +
lea ecx [ebp-7Ch] +
call sub_102DFFB  +
lea eax [ebp-60h] +
push eax  +
lea eax [ebp-68h] +
push eax  +
lea ecx [ebp-130h] +
mov dword ptr [ebp-4] 1 +
call sub_102DFFB  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-60h] +
push eax  +
lea ecx [ebp-0B8h] +
call sub_102DFFB  +
lea eax [ebp-50h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-108h] +
call sub_102DFFB  +
lea eax [ebp-40h] +
push eax  +
lea eax [ebp-50h] +
push eax  +
lea ecx [ebp-0E0h] +
call sub_102DFFB  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-90h] +
call sub_102DFFB  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-0A4h] +
call sub_102DFFB  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-0CCh] +
call sub_102DFFB  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-0F4h] +
call sub_102DFFB  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-11Ch] +
call sub_102DFFB  +
lea eax [ebp-58h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-144h] +
call sub_102DFFB  +
lea eax [ebp-7Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Bh +
call sub_102DE81  +
lea eax [ebp-130h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0B8h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-108h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0E0h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-90h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0A4h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0CCh] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0F4h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-11Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-144h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 2D3h +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov edi ecx +
mov ebx [ebp+8] +
push ebx  +
call sub_10063DE  +
mov esi eax +
cmp esi [edi+4] +
jnz loc_1027394  +
lea ecx [ebp-18h] +
call sub_100BCF1  +
and dword ptr [ebp-10h] 0 +
mov [ebp-14h] eax +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push ebx  +
lea ecx [ebp-28h] +
call sub_1024AB4  +
push eax  +
push esi  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_10273A2  +
mov esi [eax] +
lea ecx [ebp-24h] +
call sub_100BAC8  +
lea ecx [ebp-18h] +
call sub_100BAC8  +
lea eax [esi+10h] +
call sub_1002061  +
retn 4  +
mov eax [ebx] +
cmp eax [esi+0Ch] +
jl loc_1027346  +
jmp loc_1027389  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+8] 0 +
jz loc_10273F6  +
mov eax [ebx+4] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_4] eax +
cmp edi [eax] +
jz loc_10446B4  +
cmp edi eax +
jnz loc_10446C4  +
mov eax [eax+8] +
mov ecx [eax+0Ch] +
cmp ecx [esi] +
jge loc_104472D  +
push esi  +
push eax  +
push 0  +
mov ecx ebx +
push [ebp+arg_0]  +
call sub_1026076  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
push [ebp+arg_8]  +
push dword ptr [ebx+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_1026076  +
mov eax [ebp+arg_0] +
jmp loc_10273F1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_102741D  +
jmp ds:?AfxWinMain@@YGHPAUHINSTANCE__@@0PAGH@Z  +
***
call sub_100208C  +
mov [ebp-14h] ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_1027C44  +
mov ecx eax +
call sub_102A08A  +
mov esi eax +
fld  ds:flt_1027D14 +
or dword ptr [ebp-4] 0FFFFFFFFh +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-20Ch] +
fld  ds:flt_1027D10 +
fstp  [esp+0Ch+var_C] +
push 1Fh  +
push 0FFFFFFF9h  +
push 0  +
push 0FFFFFFD9h  +
pop ebx  +
push ebx  +
call sub_1027D1D  +
lea eax [ebp-20Ch] +
push eax  +
mov ecx esi +
mov dword ptr [ebp-4] 1 +
call sub_102DE81  +
fld  ds:flt_1027D0C +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-3CCh] +
fld  ds:flt_1027D08 +
fstp  [esp+0Ch+var_C] +
push 15h  +
push 0FFFFFFE5h  +
push 0FFFFFFFDh  +
push 0FFFFFFD1h  +
call sub_1027D1D  +
lea eax [ebp-3CCh] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_102DE81  +
fld  ds:flt_1027D04 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-84h] +
fld  ds:flt_1027D00 +
fstp  [esp+0Ch+var_C] +
push 15h  +
push 0FFFFFFE5h  +
push 0FFFFFFFDh  +
push 0FFFFFFD1h  +
call sub_1027D1D  +
lea eax [ebp-84h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_102DE81  +
fld  ds:flt_1027D04 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-244h] +
fld  ds:flt_1027CFC +
fstp  [esp+0Ch+var_C] +
push 15h  +
push 0FFFFFFE5h  +
push 0FFFFFFFDh  +
push 0FFFFFFD1h  +
call sub_1027D1D  +
lea eax [ebp-244h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_102DE81  +
fld  ds:flt_1027CF8 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
fld  ds:flt_1027CF4 +
fstp  [esp+0Ch+var_C] +
push 2  +
push 0FFFFFFE2h  +
push 0FFFFFFEBh  +
push 0FFFFFFCEh  +
pop edi  +
push edi  +
lea ecx [ebp-0BCh] +
call sub_1027D1D  +
lea eax [ebp-0BCh] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 5 +
call sub_102DE81  +
fld  ds:flt_102E198 +
push ecx  +
push ecx  +
fst  [esp+0Ch+var_8] +
lea ecx [ebp-324h] +
fstp  [esp+0Ch+var_C] +
push 2  +
push 0FFFFFFE2h  +
push 0FFFFFFEBh  +
push edi  +
call sub_1027D1D  +
lea eax [ebp-324h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 6 +
call sub_102DE81  +
fld  ds:flt_1027CF0 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-0F4h] +
fld  ds:flt_102E194 +
fstp  [esp+0Ch+var_C] +
push 2  +
push 0FFFFFFE2h  +
push 0FFFFFFEBh  +
push edi  +
call sub_1027D1D  +
lea eax [ebp-0F4h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 7 +
call sub_102DE81  +
fld  ds:flt_1027CEC +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-27Ch] +
fld  ds:flt_1027CE8 +
fstp  [esp+0Ch+var_C] +
push 0FFFFFFFBh  +
push 0FFFFFFF6h  +
push 0FFFFFFD6h  +
push 0FFFFFFD8h  +
call sub_1027D1D  +
lea eax [ebp-27Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 8 +
call sub_102DE81  +
fld  ds:flt_1027CE4 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-12Ch] +
fld  ds:flt_1027CE0 +
fstp  [esp+0Ch+var_C] +
push 0FFFFFFFBh  +
push 0FFFFFFF6h  +
push 0FFFFFFD6h  +
push 0FFFFFFD8h  +
call sub_1027D1D  +
mov byte ptr [ebp-4] 9 +
lea eax [ebp-12Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
fld  ds:flt_1027CDC +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-394h] +
fld  ds:flt_1027CD8 +
fstp  [esp+0Ch+var_C] +
push 0FFFFFFF2h  +
push 6  +
push 0FFFFFFD1h  +
push 0FFFFFFEDh  +
call sub_1027D1D  +
lea eax [ebp-394h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Ah +
call sub_102DE81  +
fld  ds:flt_1027CD4 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-164h] +
fld  ds:flt_1027CD0 +
fstp  [esp+0Ch+var_C] +
push 0FFFFFFEFh  +
push 16h  +
push edi  +
push 0FFFFFFFFh  +
call sub_1027D1D  +
lea eax [ebp-164h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Bh +
call sub_102DE81  +
fld  ds:flt_1027CCC +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-2B4h] +
fld  ds:flt_1027CC8 +
fstp  [esp+0Ch+var_C] +
push 0FFFFFFEFh  +
push 16h  +
push edi  +
push 0FFFFFFFFh  +
call sub_1027D1D  +
lea eax [ebp-2B4h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Ch +
call sub_102DE81  +
fld  ds:flt_1027CC4 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-19Ch] +
fld  ds:flt_1027CC0 +
fstp  [esp+0Ch+var_C] +
push 0FFFFFFEFh  +
push 27h  +
push edi  +
push 0Fh  +
call sub_1027D1D  +
lea eax [ebp-19Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Dh +
call sub_102DE81  +
fld  ds:flt_1027CBC +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
fld  ds:flt_1027CB8 +
fstp  [esp+0Ch+var_C] +
push 0FFFFFFEFh  +
push 27h  +
push edi  +
push 0Fh  +
lea ecx [ebp-35Ch] +
call sub_1027D1D  +
lea eax [ebp-35Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Eh +
call sub_102DE81  +
fld  ds:flt_1027CB4 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-1D4h] +
fld  ds:flt_1027CB0 +
fstp  [esp+0Ch+var_C] +
push 0FFFFFFF6h  +
push 2Fh  +
pop edi  +
push edi  +
push 0FFFFFFD8h  +
push 13h  +
call sub_1027D1D  +
lea eax [ebp-1D4h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Fh +
call sub_102DE81  +
fld  ds:flt_1027CAC +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-2ECh] +
fld  ds:flt_1027CA8 +
fstp  [esp+0Ch+var_C] +
push 0FFFFFFF6h  +
push edi  +
push 0FFFFFFD8h  +
push 13h  +
call sub_1027D1D  +
lea eax [ebp-2ECh] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 10h +
call sub_102DE81  +
fld  ds:flt_1027CA4 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-30h] +
fld  ds:flt_1027CA0 +
fstp  [esp+0Ch+var_C] +
push 9  +
push 31h  +
push 0FFFFFFE7h  +
push 16h  +
call sub_1027D1D  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 11h +
call sub_102DE81  +
fld  ds:flt_1027C9C +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-4Ch] +
fld  ds:flt_1027C98 +
fstp  [esp+0Ch+var_C] +
push 19h  +
push 24h  +
push 0FFFFFFFAh  +
push 0Ah  +
call sub_1027D1D  +
lea eax [ebp-4Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 12h +
call sub_102DE81  +
fld  ds:flt_1027C94 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-68h] +
fld  ds:flt_1027C90 +
fstp  [esp+0Ch+var_C] +
push 19h  +
push 24h  +
push 0FFFFFFFAh  +
push 0Ah  +
call sub_1027D1D  +
lea eax [ebp-68h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 13h +
call sub_102DE81  +
fld  ds:flt_1027C8C +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-0A0h] +
fld  ds:flt_1027C88 +
fstp  [esp+0Ch+var_C] +
push 19h  +
push 24h  +
push 0FFFFFFFAh  +
push 0Ah  +
call sub_1027D1D  +
lea eax [ebp-0A0h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 14h +
call sub_102DE81  +
fld  ds:flt_1027C84 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-0D8h] +
fldz   +
fstp  [esp+0Ch+var_C] +
push 24h  +
push 11h  +
push 2  +
push 0FFFFFFF2h  +
call sub_1027D1D  +
lea eax [ebp-0D8h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 15h +
call sub_102DE81  +
fld  ds:flt_1027C80 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-110h] +
fld  ds:flt_1027C84 +
fstp  [esp+0Ch+var_C] +
push 24h  +
push 11h  +
push 2  +
push 0FFFFFFF2h  +
call sub_1027D1D  +
lea eax [ebp-110h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 16h +
call sub_102DE81  +
fld  ds:flt_1027C7C +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-148h] +
fld  ds:flt_1027C78 +
fstp  [esp+0Ch+var_C] +
push 1Fh  +
push 0FFFFFFF9h  +
push 0  +
push ebx  +
call sub_1027D1D  +
lea eax [ebp-148h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 17h +
call sub_102DE81  +
fld  ds:flt_1027C94 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-180h] +
fld  ds:flt_1027C74 +
fstp  [esp+0Ch+var_C] +
push 2Ah  +
push 0FFFFFFE9h  +
push 1Eh  +
push 0FFFFFFDCh  +
call sub_1027D1D  +
lea eax [ebp-180h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 18h +
call sub_102DE81  +
fld  ds:flt_1027C94 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-1B8h] +
fld  ds:flt_1027C70 +
fstp  [esp+0Ch+var_C] +
push 2Ah  +
push 0FFFFFFE9h  +
push 1Eh  +
push 0FFFFFFDCh  +
call sub_1027D1D  +
lea eax [ebp-1B8h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 19h +
call sub_102DE81  +
fld  ds:flt_1027CDC +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-1F0h] +
fld  ds:flt_1027CA0 +
fstp  [esp+0Ch+var_C] +
push edi  +
push 0FFFFFFE0h  +
push 28h  +
push ebx  +
call sub_1027D1D  +
lea eax [ebp-1F0h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1Ah +
call sub_102DE81  +
fld  ds:flt_1027CDC +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-228h] +
fld  ds:flt_1027C6C +
fstp  [esp+0Ch+var_C] +
push edi  +
push 0FFFFFFE0h  +
push 28h  +
push ebx  +
call sub_1027D1D  +
lea eax [ebp-228h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1Bh +
call sub_102DE81  +
fld  ds:flt_1027CDC +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-260h] +
fld  ds:flt_1027C68 +
fstp  [esp+0Ch+var_C] +
push 32h  +
push 0FFFFFFDBh  +
push 2Dh  +
push 0FFFFFFD5h  +
call sub_1027D1D  +
lea eax [ebp-260h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1Ch +
call sub_102DE81  +
fld  ds:flt_1027CDC +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-298h] +
fld  ds:flt_1027C64 +
fstp  [esp+0Ch+var_C] +
push 32h  +
push 0FFFFFFDBh  +
push 2Dh  +
push 0FFFFFFD5h  +
call sub_1027D1D  +
lea eax [ebp-298h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1Dh +
call sub_102DE81  +
fld  ds:flt_1027C8C +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-2D0h] +
fld  ds:flt_1027C60 +
fstp  [esp+0Ch+var_C] +
push 32h  +
push 0FFFFFFDBh  +
push 2Dh  +
push 0FFFFFFD5h  +
call sub_1027D1D  +
lea eax [ebp-2D0h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1Eh +
call sub_102DE81  +
fld  ds:flt_1027C8C +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-308h] +
fld  ds:flt_1027CC8 +
fstp  [esp+0Ch+var_C] +
push 32h  +
push 0FFFFFFDBh  +
push 2Dh  +
push 0FFFFFFD5h  +
call sub_1027D1D  +
lea eax [ebp-308h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1Fh +
call sub_102DE81  +
fld  ds:flt_1027C8C +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-340h] +
fld  ds:flt_1027C5C +
fstp  [esp+0Ch+var_C] +
push edi  +
push 0FFFFFFE0h  +
push 28h  +
push ebx  +
call sub_1027D1D  +
lea eax [ebp-340h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 20h +
call sub_102DE81  +
fld  ds:flt_1027C8C +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-378h] +
fld  ds:flt_1027C58 +
fstp  [esp+0Ch+var_C] +
push edi  +
push 0FFFFFFE0h  +
push 28h  +
push ebx  +
call sub_1027D1D  +
lea eax [ebp-378h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 21h +
call sub_102DE81  +
fld  ds:flt_1027C54 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-3B0h] +
fld  ds:flt_1027C50 +
fstp  [esp+0Ch+var_C] +
push 2Ah  +
push 0FFFFFFE9h  +
push 1Eh  +
push 0FFFFFFDCh  +
call sub_1027D1D  +
lea eax [ebp-3B0h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 22h +
call sub_102DE81  +
fld  ds:flt_1027C54 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-3E8h] +
fld  ds:flt_1027C4C +
fstp  [esp+0Ch+var_C] +
push 2Ah  +
push 0FFFFFFE9h  +
push 1Eh  +
push 0FFFFFFDCh  +
call sub_1027D1D  +
lea eax [ebp-3E8h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 23h +
call sub_102DE81  +
mov ecx [ebp-14h] +
lea eax [ebp-10h] +
push eax  +
mov dword ptr [ebp-10h] 2D1h +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_102745A  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+14h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+10h]  +
lea ecx [esi+4] +
push dword ptr [ebp+0Ch]  +
mov dword ptr [esi] offset off_100AD04 +
push dword ptr [ebp+8]  +
call sub_100C6E8  +
fld  dword ptr [ebp+18h] +
fstp  dword ptr [esi+14h] +
mov eax esi +
fld  dword ptr [ebp+1Ch] +
fstp  dword ptr [esi+18h] +
call sub_1002061  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
push 2  +
lea eax [ebp+var_8] +
mov esi 90h +
push eax  +
mov edi ecx +
mov [ebp+var_8] 60h +
mov [ebp+var_4] esi +
call sub_100A103  +
and [ebp+var_10] 0 +
cmp [ebp+eax*4+var_8] esi +
lea eax [ebp+var_14] +
mov [ebp+var_14] 28Bh +
mov ecx edi +
push eax  +
jnb loc_1043F7B  +
xor esi esi +
inc esi  +
mov [ebp+var_C] esi +
call sub_102801C  +
and [ebp+var_10] 0 +
mov ebx 2431h +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 28Ch +
call sub_102801C  +
and [ebp+var_10] 0 +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 28Dh +
call sub_102801C  +
and [ebp+var_10] 0 +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 260h +
call sub_102801C  +
and [ebp+var_10] 0 +
mov dword ptr [eax] 2439h +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
and [ebp+var_10] 0 +
mov dword ptr [eax] 2433h +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 2BDh +
call sub_102801C  +
and [ebp+var_10] 0 +
mov dword ptr [eax] 2433h +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 292h +
call sub_102801C  +
and [ebp+var_10] 0 +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 28Fh +
call sub_102801C  +
and [ebp+var_10] 0 +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 291h +
call sub_102801C  +
and [ebp+var_10] 0 +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 290h +
call sub_102801C  +
and [ebp+var_10] 0 +
mov [eax] ebx +
mov [ebp+var_C] esi +
mov [ebp+var_14] 293h +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
call sub_102801C  +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov dword ptr [eax] 242Fh +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 3 +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
add ebx 12h +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 4 +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov dword ptr [eax] 2441h +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 5 +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov dword ptr [eax] 2441h +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 6 +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 7 +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov dword ptr [eax] 243Dh +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 8 +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov dword ptr [eax] 243Fh +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 9 +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov dword ptr [eax] 243Fh +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 0Ah +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov dword ptr [eax] 243Dh +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 2BDh +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
call sub_102801C  +
mov dword ptr [eax] 242Fh +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 2 +
mov [ebp+var_C] esi +
mov [ebp+var_14] 2BDh +
call sub_102801C  +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov [ebp+var_4] esi +
call sub_102E035  +
mov ebx eax +
cmp ebx [esi+4] +
jz loc_102804A  +
mov ecx [ebp+arg_0] +
lea eax [ebx+0Ch] +
push eax  +
call sub_102E11A  +
test al al +
jz loc_102806C  +
mov esi [ebp+arg_0] +
mov ecx [ebp+var_4] +
push edi  +
lea edi [ebp+var_14] +
movs   +
movs   +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
lea eax [ebp+arg_0] +
movs   +
and [ebp+var_8] 0 +
push eax  +
call sub_1025FC8  +
mov ebx [eax] +
pop edi  +
pop esi  +
lea eax [ebx+18h] +
pop ebx  +
leave   +
retn 4  +
***
call sub_100208C  +
mov [ebp-14h] ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor esi esi +
mov [ebp-4] esi +
cmp ecx esi +
jz loc_10280A9  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0FFFFFFCEh  +
pop edi  +
push edi  +
push 22h  +
push edi  +
push 0FFFFFFDEh  +
lea ecx [ebp-78h] +
call sub_1028266  +
fld  ds:flt_102E198 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-0A8h] +
fld  ds:flt_102E19C +
mov dword ptr [ebp-4] 1 +
fstp  [esp+0Ch+var_C] +
push 0FFFFFFEEh  +
push 32h  +
push edi  +
push 12h  +
call sub_1027D1D  +
push 16h  +
push 32h  +
push 0FFFFFFDEh  +
push 32h  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 2 +
call sub_1028266  +
fld  ds:flt_102E198 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-0E0h] +
fldz   +
mov byte ptr [ebp-4] 3 +
fstp  [esp+0Ch+var_C] +
push 26h  +
pop ebx  +
push ebx  +
push 32h  +
push 4  +
push 12h  +
call sub_1027D1D  +
push ebx  +
push 0FFFFFFF6h  +
push ebx  +
push 22h  +
lea ecx [ebp-8Ch] +
mov byte ptr [ebp-4] 4 +
call sub_1028266  +
push 32h  +
push 0FFFFFFEAh  +
push ebx  +
push 0FFFFFFF6h  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call sub_1028266  +
push ebx  +
push 0FFFFFFDEh  +
push 32h  +
push 0FFFFFFEAh  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 6 +
call sub_1028266  +
fld  ds:flt_102E198 +
push ecx  +
push ecx  +
fst  [esp+0Ch+var_8] +
mov byte ptr [ebp-4] 7 +
fstp  [esp+0Ch+var_C] +
push ebx  +
push 0FFFFFFEEh  +
push 4  +
push edi  +
lea ecx [ebp-0C4h] +
call sub_1027D1D  +
push 0FFFFFFDEh  +
push edi  +
push 16h  +
push edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 8 +
call sub_1028266  +
fld  ds:flt_102E198 +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
lea ecx [ebp-0FCh] +
fld  ds:flt_102E194 +
mov byte ptr [ebp-4] 9 +
fstp  [esp+0Ch+var_C] +
push 0FFFFFFEEh  +
push 0FFFFFFEEh  +
push edi  +
push edi  +
call sub_1027D1D  +
lea eax [ebp-78h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Ah +
call sub_102DE81  +
lea eax [ebp-0A8h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-50h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0E0h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-8Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-64h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0C4h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0FCh] +
push eax  +
mov ecx esi +
call sub_102DE81  +
mov ecx [ebp-14h] +
lea eax [ebp-10h] +
push eax  +
mov dword ptr [ebp-10h] 2CFh +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+8]  +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1008948 +
call sub_100C6CD  +
push dword ptr [ebp+14h]  +
lea ecx [esi+0Ch] +
push dword ptr [ebp+10h]  +
call sub_100C6CD  +
mov eax esi +
call sub_1002061  +
retn 10h  +
***
call sub_100208C  +
mov [ebp-14h] ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_1028455  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 32h  +
push edi  +
lea ecx [ebp-84h] +
call sub_100C6CD  +
push 32h  +
push edi  +
lea ecx [ebp-3Ch] +
call sub_100C6CD  +
push 23h  +
push 0FFFFFFE0h  +
lea ecx [ebp-5Ch] +
call sub_100C6CD  +
push 2  +
push 0FFFFFFD3h  +
lea ecx [ebp-1Ch] +
call sub_100C6CD  +
push 0FFFFFFD0h  +
push 0FFFFFFBFh  +
lea ecx [ebp-2Ch] +
call sub_100C6CD  +
push 0FFFFFFB9h  +
push 0FFFFFFEFh  +
lea ecx [ebp-7Ch] +
call sub_100C6CD  +
push 0FFFFFFE8h  +
push edi  +
lea ecx [ebp-4Ch] +
call sub_100C6CD  +
push 32h  +
push edi  +
lea ecx [ebp-74h] +
call sub_100C6CD  +
push 32h  +
push edi  +
lea ecx [ebp-6Ch] +
call sub_100C6CD  +
push 23h  +
push 20h  +
lea ecx [ebp-34h] +
call sub_100C6CD  +
push 2  +
push 2Dh  +
lea ecx [ebp-24h] +
call sub_100C6CD  +
push 0FFFFFFD0h  +
push 41h  +
lea ecx [ebp-44h] +
call sub_100C6CD  +
push 0FFFFFFB9h  +
push 11h  +
lea ecx [ebp-54h] +
call sub_100C6CD  +
push 0FFFFFFE8h  +
push edi  +
lea ecx [ebp-64h] +
call sub_100C6CD  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-5Ch] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
lea eax [ebp-84h] +
push eax  +
lea ecx [ebp-114h] +
call sub_1028461  +
lea eax [ebp-4Ch] +
push eax  +
lea eax [ebp-7Ch] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-0A8h] +
mov dword ptr [ebp-4] 1 +
call sub_1028461  +
lea eax [ebp-74h] +
push eax  +
lea eax [ebp-6Ch] +
push eax  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-0CCh] +
call sub_1028461  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-54h] +
push eax  +
lea eax [ebp-64h] +
push eax  +
lea ecx [ebp-0F0h] +
call sub_1028461  +
lea eax [ebp-0A8h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_102DE81  +
lea eax [ebp-0F0h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-0CCh] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-114h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
mov ecx [ebp-14h] +
lea eax [ebp-10h] +
push eax  +
mov dword ptr [ebp-10h] 2D2h +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
xor esi esi +
jmp loc_10282DF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_10284B0 +
mov edx [ecx] +
mov [eax+4] edx +
mov ecx [ecx+4] +
mov [eax+8] ecx +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
mov [eax+0Ch] edx +
mov ecx [ecx+4] +
mov [eax+10h] ecx +
mov ecx [ebp+arg_8] +
mov edx [ecx] +
mov [eax+14h] edx +
mov ecx [ecx+4] +
mov [eax+18h] ecx +
mov ecx [ebp+arg_C] +
mov edx [ecx] +
mov [eax+1Ch] edx +
mov ecx [ecx+4] +
mov [eax+20h] ecx +
pop ebp  +
retn 10h  +
***
mov ecx offset unk_108AF60 +
call sub_1028534  +
push offset sub_101F490  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_100208C  +
mov ebx ecx +
mov [ebp-10h] ebx +
xor esi esi +
push esi  +
call ??0CWinApp@@QAE@PBG@Z  +
lea eax [ebx+0C4h] +
mov dword ptr [eax] offset off_1028868 +
mov dword ptr [ebx] offset off_10024E4 +
mov dword ptr [eax] offset off_100577C +
mov [ebp-4] esi +
mov [ebx+0C8h] esi +
mov [ebx+0CCh] esi +
lea ecx [ebx+0F0h] +
mov byte ptr [ebp-4] 2 +
mov [ebx+0D0h] esi +
call sub_10297F9  +
lea ecx [ebx+114h] +
mov byte ptr [ebp-4] 3 +
mov dword ptr [ebx+110h] offset off_1028884 +
call sub_1028D19  +
mov [ebx+1A0h] esi +
mov [ebx+1A4h] esi +
lea ecx [ebx+1BCh] +
mov byte ptr [ebp-4] 6 +
call near ptr dword_1024AF8+3  +
lea ecx [ebx+250h] +
mov byte ptr [ebp-4] 7 +
call ??0CString@@QAE@XZ  +
lea ecx [ebx+254h] +
mov byte ptr [ebp-4] 8 +
call ??0CString@@QAE@XZ  +
lea ecx [ebx+258h] +
mov byte ptr [ebp-4] 9 +
call ??0CString@@QAE@XZ  +
lea ecx [ebx+25Ch] +
mov byte ptr [ebp-4] 0Ah +
call ??0CString@@QAE@XZ  +
lea ecx [ebx+264h] +
mov byte ptr [ebp-4] 0Bh +
call ??0CString@@QAE@XZ  +
lea ecx [ebx+268h] +
mov byte ptr [ebp-4] 0Ch +
call ??0CString@@QAE@XZ  +
lea eax [ebx+278h] +
mov [eax+4] esi +
mov dword ptr [eax] offset off_102DB20 +
lea ecx [ebx+314h] +
mov byte ptr [ebp-4] 0Eh +
call ??0CString@@QAE@XZ  +
lea ecx [ebx+3CCh] +
mov byte ptr [ebp-4] 0Fh +
call ??0CString@@QAE@XZ  +
lea ecx [ebx+3D0h] +
mov byte ptr [ebp-4] 10h +
call sub_102E9B9  +
push esi  +
push esi  +
push esi  +
lea ecx [ebx+3E4h] +
call sub_1029891  +
lea ecx [ebx+3F8h] +
mov byte ptr [ebp-4] 11h +
call sub_10288A1  +
mov byte ptr [ebp-4] 12h +
lea ecx [ebx+404h] +
call sub_10144B1  +
lea ecx [ebx+410h] +
mov byte ptr [ebp-4] 13h +
call near ptr dword_102367C+36h  +
lea ecx [ebx+41Ch] +
mov byte ptr [ebp-4] 14h +
call sub_10288A1  +
lea ecx [ebx+428h] +
mov byte ptr [ebp-4] 15h +
call sub_10288A1  +
lea ecx [ebx+440h] +
mov byte ptr [ebp-4] 16h +
call ??0CString@@QAE@XZ  +
lea ecx [ebx+444h] +
mov byte ptr [ebp-4] 17h +
call ??0CString@@QAE@XZ  +
lea ecx [ebx+448h] +
mov byte ptr [ebp-4] 18h +
call ??0CString@@QAE@XZ  +
push 0Ah  +
pop eax  +
mov [ebx+210h] eax +
mov [ebx+214h] eax +
xor eax eax +
mov [ebx+218h] ax +
xor edi edi +
inc edi  +
lea eax [ebx+284h] +
push eax  +
mov byte ptr [ebp-4] 19h +
mov [ebx+1B8h] esi +
mov dword ptr [ebx+20Ch] 226000h +
mov [ebx+434h] esi +
mov [ebx+43Ch] esi +
mov [ebx+270h] esi +
mov [ebx+26Ch] esi +
mov [ebx+22Ch] esi +
mov [ebx+21Ch] edi +
mov [ebx+220h] esi +
mov [ebx+224h] edi +
mov [ebx+228h] edi +
mov [ebx+230h] esi +
mov [ebx+234h] esi +
mov [ebx+238h] esi +
mov [ebx+23Ch] esi +
mov [ebx+240h] esi +
mov [ebx+248h] esi +
mov [ebx+274h] esi +
mov [ebx+24Ch] esi +
mov [ebx+450h] esi +
call ds:SetRectEmpty  +
mov eax 4F6h +
push eax  +
push eax  +
push eax  +
push eax  +
lea eax [ebx+294h] +
push eax  +
call ds:SetRect  +
push 2  +
pop eax  +
mov [ebx+2BCh] ax +
push esi  +
lea eax [ebx+1A0h] +
push eax  +
mov [ebx+2A4h] esi +
mov [ebx+2A8h] esi +
mov [ebx+2ACh] edi +
mov dword ptr [ebx+2B0h] 64h +
mov [ebx+2B4h] edi +
mov [ebx+2B8h] edi +
mov byte ptr [ebx+454h] 1 +
call sub_101403C  +
push esi  +
lea eax [ebx+1A4h] +
push eax  +
call sub_101403C  +
push 1Dh  +
pop ecx  +
xor eax eax +
mov byte ptr [ebx+3F4h] 0 +
mov byte ptr [ebx+3F5h] 0 +
mov byte ptr [ebx+3F6h] 0 +
lea edi [ebx+358h] +
stos   +
sub esp 10h +
mov edi esp +
mov esi offset dword_1023060 +
movs   +
movs   +
movs   +
lea ecx [ebx+3D0h] +
movs   +
call sub_102E962  +
xor eax eax +
push offset ModuleName  +
mov [ebx+1B0h] eax +
mov [ebx+1A8h] eax +
mov [ebx+1ACh] eax +
mov [ebx+0D8h] al +
mov [ebx+0DCh] eax +
call ds:GetModuleHandleW  +
mov hModule eax +
mov byte ptr [ebx+1B4h] 1 +
mov eax ebx +
call sub_1002061  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10288CD  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+1Dh] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_100B693  +
cmp eax ebx +
jz loc_10288E0  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_10288E9  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_10288F2  +
mov [ecx] ebx +
mov [eax+1Dh] bl +
mov byte ptr [eax+1Ch] 1 +
pop ebx  +
retn   +
***
mov dword ptr [esi+8] 1 +
mov eax esi +
pop esi  +
retn   +
***
mov ecx offset unk_108A370 +
call sub_1028A38  +
push (offset dword_101E814+3)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1029C31  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+10h] 0 +
mov dword ptr [esi] offset off_1028A64 +
mov dword ptr [esi+40h] 259h +
mov eax esi +
pop esi  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi+4] offset off_1028DB8 +
mov dword ptr [esi+8] offset off_1028DF4 +
mov dword ptr [esi+0Ch] offset off_1028E14 +
xor ebx ebx +
lea ecx [esi+1Ch] +
mov dword ptr [esi] offset off_1028F50 +
mov dword ptr [esi+4] offset off_1028F14 +
mov dword ptr [esi+8] offset off_1028EF4 +
mov dword ptr [esi+0Ch] offset off_1028EE4 +
mov [esi+10h] bl +
mov [esi+14h] ebx +
call sub_1029B71  +
mov dword ptr [esi+2Ch] offset off_1028E24 +
or eax 0FFFFFFFFh +
mov dword ptr [esi+38h] offset off_1028EA4 +
mov [esi+44h] eax +
mov [esi+48h] eax +
mov [esi+4Ch] ebx +
lea ecx [esi+68h] +
mov [ebp-4] ebx +
mov dword ptr [esi+50h] offset off_1028E64 +
mov [esi+5Ch] eax +
mov [esi+60h] eax +
mov [esi+64h] ebx +
call sub_1029BA9  +
mov ecx esi +
mov [esi+74h] ebx +
mov [esi+78h] ebx +
call sub_100BE03  +
mov eax esi +
call sub_1002061  +
retn   +
***
mov ecx offset unk_108AD98 +
call sub_1028FE8  +
push (offset dword_101E7F4+3)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1029C31  +
xor eax eax +
push 0Fh  +
mov [ebp-4] eax +
mov dword ptr [esi] offset off_1029064 +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov dword ptr [esi+14h] 1 +
call ds:GetSysColor  +
mov [esi+48h] eax +
push 2  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov dword ptr [ebp-20h] 60h +
mov dword ptr [ebp-1Ch] 90h +
mov dword ptr [ebp-18h] 2435h +
mov dword ptr [ebp-14h] 2436h +
call sub_100A0E4  +
mov [esi+3Ch] eax +
mov dword ptr [esi+40h] 25Eh +
mov eax esi +
call sub_1002061  +
retn   +
***
mov ecx offset unk_108A3B8 +
call sub_1029178  +
push (offset dword_101E7E4+3)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1029C31  +
and dword ptr [ebp-4] 0 +
push 2  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov dword ptr [esi] offset off_10291E4 +
mov dword ptr [ebp-20h] 60h +
mov dword ptr [ebp-1Ch] 90h +
mov dword ptr [ebp-18h] 2437h +
mov dword ptr [ebp-14h] 2438h +
call sub_100A0E4  +
mov [esi+3Ch] eax +
mov dword ptr [esi+40h] 25Ch +
mov dword ptr [esi+18h] 1 +
mov eax esi +
call sub_1002061  +
retn   +
***
mov ecx offset unk_108A400 +
call sub_10292F8  +
push (offset dword_101E804+3)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1029C31  +
xor eax eax +
mov [ebp-4] eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
push 2  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov dword ptr [esi] offset off_102936C +
mov dword ptr [esi+14h] 1 +
mov dword ptr [ebp-20h] 60h +
mov dword ptr [ebp-1Ch] 90h +
mov dword ptr [ebp-18h] 243Bh +
mov dword ptr [ebp-14h] 243Ch +
call sub_100A0E4  +
mov [esi+3Ch] eax +
mov dword ptr [esi+40h] 25Dh +
mov eax esi +
call sub_1002061  +
retn   +
***
mov ecx offset dword_108ADE8 +
call sub_1029480  +
push (offset dword_101E824+3)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-14h] esi +
call near ptr dword_10288FC+4  +
and dword ptr [ebp-4] 0 +
lea edi [esi+48h] +
push 0  +
mov ecx edi +
mov dword ptr [esi] offset off_102951C +
call sub_1013B33  +
and dword ptr [esi+3Ch] 0 +
push 8  +
pop ebx  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi+40h] 25Fh +
mov [esi+34h] ebx +
mov dword ptr [esi+38h] 1 +
mov dword ptr [ebp-10h] 4 +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 6 +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov [ebp-10h] ebx +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 0Ah +
call sub_1013D79  +
mov eax esi +
call sub_1002061  +
retn   +
***
mov ecx offset dword_108AE40 +
call sub_1029634  +
push (offset byte_101E840+1)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-14h] esi +
call near ptr dword_10288FC+4  +
and dword ptr [ebp-4] 0 +
lea edi [esi+48h] +
push 0  +
mov ecx edi +
mov dword ptr [esi] offset off_10296FC +
call sub_1013B33  +
push 8  +
pop ebx  +
push 2  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-24h] +
push eax  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi+40h] 28Eh +
mov [esi+34h] ebx +
mov dword ptr [ebp-24h] 60h +
mov dword ptr [ebp-20h] 90h +
mov dword ptr [ebp-1Ch] 2445h +
mov dword ptr [ebp-18h] 2446h +
call sub_100A0E4  +
and dword ptr [esi+8] 0 +
mov [esi+3Ch] eax +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [esi+18h] 1 +
mov dword ptr [ebp-10h] 4 +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov [ebp-10h] ebx +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 10h +
call sub_1013D79  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 18h +
call sub_1013D79  +
mov eax esi +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100B6DE  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [esi+10h] +
mov dword ptr [esi] offset off_1029830 +
call sub_1013B33  +
mov eax esi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_4] +
push esi  +
mov [ebp+var_8] eax +
mov eax [ebp+arg_8] +
mov esi ecx +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+var_10] +
push eax  +
lea eax [esi+0Ch] +
push eax  +
mov [ebp+var_10] 1 +
call sub_10298D2  +
mov [esi+8] eax +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
call sub_102E8A8  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call GdiplusStartup  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_102E894  +
retn 0Ch  +
***
mov ecx offset unk_108BC10 +
call sub_1029947  +
push (offset byte_101F6F4+1)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1029C31  +
xor edi edi +
lea ecx [esi+50h] +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_10044D4 +
call ??0CObArray@@QAE@XZ  +
push 2  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov byte ptr [ebp-4] 1 +
mov [esi+0Ch] edi +
mov dword ptr [esi+40h] 25Ah +
mov dword ptr [ebp-20h] 60h +
mov dword ptr [ebp-1Ch] 90h +
mov dword ptr [ebp-18h] 2449h +
mov dword ptr [ebp-14h] 244Ah +
call sub_100A0E4  +
movzx eax ax +
mov [esi+3Ch] eax +
mov [esi+10h] edi +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov dword ptr [esi+34h] 1 +
mov dword ptr [esi+48h] offset unk_108AEAC +
mov dword ptr [esi+4Ch] offset unk_108AEA4 +
mov eax esi +
call sub_1002061  +
retn   +
***
mov ecx offset unk_108AD48 +
call sub_1029A00  +
push (offset dword_101E91C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1028A38  +
and dword ptr [ebp-4] 0 +
push 2  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov dword ptr [esi] offset off_1029A74 +
mov dword ptr [esi+40h] 25Bh +
mov dword ptr [ebp-20h] 60h +
mov dword ptr [ebp-1Ch] 90h +
mov dword ptr [ebp-18h] 244Dh +
mov dword ptr [ebp-14h] 244Eh +
call sub_100A0E4  +
and dword ptr [esi+48h] 0 +
and dword ptr [esi+10h] 0 +
mov [esi+3Ch] eax +
mov dword ptr [esi+0Ch] 1 +
mov eax esi +
call sub_1002061  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1029B8B  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_100B693  +
test eax eax +
jz loc_1029B9A  +
mov [eax] eax +
lea ecx [eax+4] +
test ecx ecx +
jz locret_1029BA3  +
mov [ecx] eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1029BC3  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_100CEFD  +
test eax eax +
jz loc_1029BD2  +
mov [eax] eax +
lea ecx [eax+4] +
test ecx ecx +
jz locret_1029BDB  +
mov [ecx] eax +
retn   +
***
push 28Bh  +
mov ecx offset unk_108A448 +
call sub_1029C01  +
push (offset dword_101EB1C+2)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1029C31  +
mov eax [ebp+arg_0] +
mov dword ptr [esi] offset off_10043DC +
mov [esi+40h] eax +
cmp eax 260h +
jz loc_1043EEA  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
xor eax eax +
inc eax  +
xor edi edi +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov [esi+1Ch] eax +
push 2  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_1029CC4 +
mov [esi+8] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+20h] edi +
mov [esi+4] edi +
mov [esi+34h] edi +
mov [esi+38h] edi +
mov dword ptr [ebp-20h] 60h +
mov dword ptr [ebp-1Ch] 90h +
mov dword ptr [ebp-18h] 2433h +
mov dword ptr [ebp-14h] 2434h +
call sub_100A0E4  +
movzx eax ax +
mov [esi+3Ch] eax +
mov [esi+40h] edi +
mov [esi+28h] edi +
mov eax dword_108A234 +
mov [esi+44h] eax +
mov dword_108A234 esi +
mov eax esi +
call sub_1002061  +
retn   +
***
push ecx  +
call sub_1029D78  +
jmp loc_1025613  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
cmp byte ptr [ecx+1Dh] 0 +
jz loc_1029D8D  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_1029D80  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0  +
push 1  +
mov edi ecx +
call sub_100B693  +
push [ebp+arg_10]  +
mov esi eax +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_1029DCE  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1029DEE  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1029DF7  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov cl [ebp+arg_10] +
lea edi [eax+0Ch] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
mov [eax+1Ch] cl +
mov byte ptr [eax+1Dh] 0 +
pop esi  +
pop ebp  +
retn 14h  +
***
push 4  +
mov eax offset loc_107F5D4 +
call sub_100208C  +
mov esi ecx +
push 1Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1029E6C  +
fld  dword ptr [esi+18h] +
push ecx  +
push ecx  +
fstp  dword ptr [esp+4] +
add esi 4 +
fld  dword ptr [esi+10h] +
fstp  dword ptr [esp] +
push esi  +
call sub_1029E77  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_100AD04 +
call sub_100C6A4  +
fld  dword ptr [ebp+0Ch] +
fstp  dword ptr [esi+14h] +
mov eax esi +
fld  dword ptr [ebp+10h] +
fstp  dword ptr [esi+18h] +
call sub_1002061  +
retn 0Ch  +
***
call sub_100208C  +
mov esi ecx +
push 14h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1029EE5  +
add esi 4 +
push esi  +
call sub_1029EF0  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1029F24 +
call sub_100C6A4  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov [ebp-14h] ecx +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor esi esi +
mov [ebp-4] esi +
cmp ecx esi +
jz loc_1029FB9  +
call sub_102A08A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0FFFFFFCEh  +
push 0FFFFFFCEh  +
lea ecx [ebp-2Ch] +
call sub_100C6CD  +
push 0FFFFFFCEh  +
push 32h  +
lea ecx [ebp-1Ch] +
call sub_100C6CD  +
push 32h  +
push 32h  +
lea ecx [ebp-24h] +
call sub_100C6CD  +
push 32h  +
push 0FFFFFFCEh  +
lea ecx [ebp-34h] +
call sub_100C6CD  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-48h] +
call sub_102DFFB  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-5Ch] +
mov dword ptr [ebp-4] 1 +
call sub_102DFFB  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-70h] +
call sub_102DFFB  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-84h] +
call sub_102DFFB  +
lea eax [ebp-48h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_102DE81  +
lea eax [ebp-5Ch] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-70h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
lea eax [ebp-84h] +
push eax  +
mov ecx esi +
call sub_102DE81  +
mov ecx [ebp-14h] +
lea eax [ebp-10h] +
push eax  +
mov dword ptr [ebp-10h] 2C0h +
call sub_10217AC  +
mov [eax] esi +
call sub_1002061  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_102DCFC +
call sub_100BD0F  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp esi eax +
jz loc_102A0C3  +
mov eax [eax+4] +
mov ecx [eax] +
push eax  +
push ecx  +
mov ecx esi +
call sub_102A0CF  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102A0EB  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100BAE6  +
push [ebp+arg_4]  +
mov eax [esi+4] +
push [ebp+arg_0]  +
mov eax [eax] +
push eax  +
mov ecx esi +
call sub_100CD29  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_1002370  +
mov esi ecx +
push 0  +
push 1  +
call sub_100B693  +
push dword ptr [ebp+18h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
mov [ebp-14h] eax +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_102A15A  +
mov eax [ebp-14h] +
call sub_1002061  +
retn 14h  +
***
call sub_100208C  +
mov ecx [ebp+8] +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_102A188  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_102A195  +
call sub_1002061  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+0Ch] +
mov [esi+8] eax +
call sub_102A1CF  +
mov al [ebp+arg_10] +
mov [esi+1Ch] al +
mov byte ptr [esi+1Dh] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
add eax 4 +
mov [esi] ecx +
push eax  +
lea ecx [esi+4] +
call sub_100CCE5  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax 5A4Dh +
cmp word ptr ds:__ImageBase.unused ax +
jnz loc_102A297  +
mov eax ds:dword_100003C +
lea eax __ImageBase.unused[eax] +
cmp dword ptr [eax] 4550h +
jnz loc_102A297  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jnz loc_1045BD2  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_102A297  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_108A298 eax +
call sub_102A541  +
push eax  +
call ds:__set_app_type  +
or dword_108A2C0 0FFFFFFFFh +
or dword_108A2C4 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_108E5E0 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_108E5DC +
mov [eax] ecx +
call sub_10089B1  +
cmp dword_108E2B4 0 +
jz loc_1045BF8  +
call sub_102A2A0  +
xor eax eax +
retn   +
***
xor eax eax +
jmp loc_102A23E  +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
mov ecx offset unk_108BBA0 +
call sub_102A2D3  +
push offset loc_101F794  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
mov edi edi +
push edi  +
push offset dword_108B3B8  +
mov edi ecx +
call ds:InterlockedIncrement  +
test eax eax +
jnz loc_102A300  +
push esi  +
mov esi offset stru_108C578 +
push esi  +
call sub_1014518  +
add esi 18h +
cmp esi offset unk_108C5D8 +
pop ecx  +
jl loc_102A2ED  +
pop esi  +
mov eax edi +
pop edi  +
retn   +
***
push 600h  +
push 0  +
call sub_102A320  +
mov byte_108A1C2 al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov cl [ebp+arg_0] +
mov [eax+14h] cl +
mov ecx [ebp+arg_4] +
mov [eax+2040h] ecx +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov ecx offset unk_108AEA0 +
call sub_102A360  +
push offset loc_101F380  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
mov dword ptr [esi] offset off_102DDB4 +
mov eax offset off_102DD4C +
mov [ebp-4] edi +
mov [esi+8] edi +
mov [esi+4] eax +
mov [esi+10h] edi +
mov [esi+0Ch] eax +
lea ecx [esi+14h] +
mov byte ptr [ebp-4] 2 +
call ??0CDC@@QAE@XZ  +
mov ebx offset off_1002208 +
mov [esi+28h] edi +
mov [esi+24h] ebx +
lea ecx [esi+34h] +
mov byte ptr [ebp-4] 4 +
call ??0CDC@@QAE@XZ  +
mov [esi+48h] edi +
mov [esi+44h] ebx +
mov [esi+60h] edi +
mov dword ptr [esi+70h] 1 +
mov [esi+74h] edi +
mov [esi+0ACh] edi +
mov [esi+0B0h] edi +
mov [esi+0BCh] edi +
mov eax esi +
call sub_1002061  +
retn   +
***
mov ecx offset unk_108B4B8 +
call sub_102A3FD  +
push offset sub_101F740  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1013B6A  +
xor edi edi +
push 0Ah  +
lea ecx [esi+6C0h] +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_102DE18 +
call ??0CObList@@QAE@H@Z  +
mov [esi+6A8h] edi +
mov [esi+6B0h] edi +
mov dword ptr [esi+6BCh] 2 +
mov [esi+6B4h] edi +
mov [esi+6B8h] edi +
mov [esi+6ACh] edi +
mov [esi+6DCh] edi +
mov eax esi +
call sub_1002061  +
retn   +
***
push 3  +
push 10h  +
push offset dword_108C4C4  +
call sub_10261C1  +
push (offset byte_10216C8+1)  +
call sub_1013E9D  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_100CB90  +
mov eax esi +
pop esi  +
retn   +
***
push 0  +
mov eax offset loc_1082765 +
call sub_100208C  +
push offset aUntitled  +
mov ecx offset unk_108C648 +
call sub_10142C5  +
and dword ptr [ebp-4] 0 +
push offset aUnsaved  +
mov ecx offset unk_108C664 +
call sub_10142C5  +
push offset aValid  +
mov ecx offset unk_108C680 +
mov byte ptr [ebp-4] 1 +
call sub_10142C5  +
push offset aSavesystimelow  +
mov ecx offset unk_108C69C +
mov byte ptr [ebp-4] 2 +
call sub_10142C5  +
push offset aSavesystimehig  +
mov ecx offset unk_108C6B8 +
mov byte ptr [ebp-4] 3 +
call sub_10142C5  +
push offset loc_10216EC  +
call sub_1013E9D  +
pop ecx  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_102A56F  +
push eax  +
call sub_102A579  +
test eax eax +
jz loc_102A56F  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1045C94  +
push 2  +
pop eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
call sub_102E8A8  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_102A5C8  +
cmp ecx 0FFFFFFFFh +
jz loc_102A5C8  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_102A5C1  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_102A5C1  +
cmp edx 10000000h +
jnb loc_102A5C1  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jnz loc_1045C8A  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_102E894  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
sub esp 18h +
cmp byte_108A2A8 al +
jnz loc_102A630  +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
push offset unk_108BBBC  +
mov [ebp+var_18] 1 +
call GdiplusStartup  +
test eax eax +
jnz loc_102A630  +
mov byte_108A2A8 1 +
call sub_102A641  +
mov al byte_108A2A8 +
leave   +
retn   +
***
retn   +
***
call sub_100208C  +
mov edi ecx +
push 8  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor esi esi +
mov [ebp-4] esi +
cmp ecx esi +
jz loc_102A67D  +
call sub_102A69D  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-10h] +
push eax  +
lea ecx [edi+10h] +
mov [ebp-10h] esi +
call sub_1013D79  +
mov eax esi +
call sub_1002061  +
retn   +
***
mov eax ecx +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1024CBF  +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
push 10h  +
mov dword ptr [esi] offset off_1007C14 +
mov [esi+90h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_102A74A  +
push esi  +
call sub_102255E  +
push 20h  +
mov byte ptr [ebp-4] 0 +
mov [esi+4] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_102A74E  +
push esi  +
call sub_102A75B  +
push 24h  +
mov byte ptr [ebp-4] 0 +
mov [esi+8] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 3 +
test ecx ecx +
jz loc_102A752  +
push esi  +
call sub_1022855  +
mov [esi+0Ch] eax +
mov eax [esi+4] +
mov [esi+10h] eax +
mov eax esi +
call sub_1002061  +
retn 8  +
xor eax eax +
jmp loc_102A6F3  +
xor eax eax +
jmp loc_102A715  +
xor eax eax +
jmp loc_102A737  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022682  +
mov [esi+1Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102A784 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_10229A3  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102A874 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call sub_1022A49  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+18h] +
mov dword ptr [esi] offset off_102A974 +
call sub_102A69D  +
mov [esi+24h] edi +
mov eax esi +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1022BA1  +
and dword ptr [ebp-4] 0 +
push 10h  +
mov dword ptr [esi] offset off_1007D3C +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_102AAC6  +
push esi  +
call sub_102A849  +
push 28h  +
mov byte ptr [ebp-4] 0 +
mov [esi+4] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_102AACA  +
push esi  +
call sub_102A931  +
push 24h  +
mov byte ptr [ebp-4] 0 +
mov [esi+8] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 3 +
test ecx ecx +
jz loc_102AACE  +
push esi  +
call sub_102AAD7  +
mov [esi+0Ch] eax +
mov eax [esi+4] +
mov [esi+10h] eax +
mov eax esi +
call sub_1002061  +
retn 4  +
xor eax eax +
jmp loc_102AA6F  +
xor eax eax +
jmp loc_102AA91  +
xor eax eax +
jmp loc_102AAB3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022AF1  +
mov [esi+20h] edi +
pop edi  +
mov dword ptr [esi] offset off_102AB04 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_10229A3  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102ABF4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022A49  +
mov [esi+20h] edi +
pop edi  +
mov dword ptr [esi] offset off_102ACDC +
mov byte ptr [esi+1Ch] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1022BA1  +
and dword ptr [ebp-4] 0 +
push 10h  +
mov dword ptr [esi] offset off_1007E6C +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_102AE2E  +
push esi  +
call sub_102ABC9  +
push 24h  +
mov byte ptr [ebp-4] 0 +
mov [esi+4] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_102AE32  +
push esi  +
call sub_102ACB1  +
push 24h  +
mov byte ptr [ebp-4] 0 +
mov [esi+8] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 3 +
test ecx ecx +
jz loc_102AE36  +
push esi  +
call sub_102AE3F  +
mov [esi+0Ch] eax +
mov eax [esi+4] +
mov [esi+10h] eax +
mov eax esi +
call sub_1002061  +
retn 4  +
xor eax eax +
jmp loc_102ADD7  +
xor eax eax +
jmp loc_102ADF9  +
xor eax eax +
jmp loc_102AE1B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022AF1  +
mov [esi+20h] edi +
pop edi  +
mov dword ptr [esi] offset off_102AE6C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_10229A3  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102AF5C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022A49  +
mov [esi+18h] edi +
pop edi  +
mov dword ptr [esi] offset off_102B044 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1022BA1  +
and dword ptr [ebp-4] 0 +
push 10h  +
mov dword ptr [esi] offset off_1007F54 +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_102B196  +
push esi  +
call sub_102AF31  +
push 1Ch  +
mov byte ptr [ebp-4] 0 +
mov [esi+4] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_102B19A  +
push esi  +
call sub_102B019  +
push 28h  +
mov byte ptr [ebp-4] 0 +
mov [esi+8] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 3 +
test ecx ecx +
jz loc_102B19E  +
push esi  +
call sub_102B1A7  +
mov [esi+0Ch] eax +
mov eax [esi+4] +
mov [esi+10h] eax +
mov eax esi +
call sub_1002061  +
retn 4  +
xor eax eax +
jmp loc_102B13F  +
xor eax eax +
jmp loc_102B161  +
xor eax eax +
jmp loc_102B183  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022AF1  +
mov [esi+20h] edi +
pop edi  +
mov dword ptr [esi] offset off_102B1D4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022D29  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102B2C4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022C7F  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102B3AC +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1022E79  +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
push 10h  +
mov dword ptr [esi] offset off_100803C +
mov [esi+54h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_102B555  +
push esi  +
call sub_102B381  +
push 10h  +
mov byte ptr [ebp-4] 0 +
mov [esi+4] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_102B55C  +
push esi  +
call sub_102B299  +
push 10h  +
mov byte ptr [ebp-4] 0 +
mov [esi+8] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 3 +
test ecx ecx +
jz loc_102B563  +
push esi  +
call sub_102B56C  +
mov [esi+0Ch] eax +
lea eax [ebp+8] +
lea edi [esi+2Ch] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
mov dword ptr [ebp+8] 3 +
call sub_1013D79  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+8] 5 +
call sub_1013D79  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+8] 8 +
call sub_1013D79  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+8] 0Ah +
call sub_1013D79  +
mov eax esi +
call sub_1002061  +
retn 8  +
xor eax eax +
jmp loc_102B4B1  +
xor eax eax +
jmp loc_102B4D7  +
xor eax eax +
jmp loc_102B4F9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022DD1  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102B594 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022D29  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102B67C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022C7F  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102B764 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1022E79  +
and dword ptr [ebp-4] 0 +
push 10h  +
mov dword ptr [esi] offset off_100812C +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_102B907  +
push esi  +
call sub_102B739  +
push 10h  +
mov byte ptr [ebp-4] 0 +
mov [esi+4] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_102B90E  +
push esi  +
call sub_102B651  +
push 10h  +
mov byte ptr [ebp-4] 0 +
mov [esi+8] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 3 +
test ecx ecx +
jz loc_102B915  +
push esi  +
call sub_102B91E  +
mov [esi+0Ch] eax +
lea eax [ebp+8] +
lea edi [esi+2Ch] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
mov dword ptr [ebp+8] 1 +
call sub_1013D79  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+8] 3 +
call sub_1013D79  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+8] 5 +
call sub_1013D79  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+8] 8 +
call sub_1013D79  +
mov eax esi +
call sub_1002061  +
retn 4  +
xor eax eax +
jmp loc_102B863  +
xor eax eax +
jmp loc_102B889  +
xor eax eax +
jmp loc_102B8AB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022DD1  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102B94C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022D29  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102BA34 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022C7F  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102BB1C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1022E79  +
and dword ptr [ebp-4] 0 +
push 10h  +
mov dword ptr [esi] offset off_100821C +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_102BCBF  +
push esi  +
call sub_102BAF1  +
push 18h  +
mov byte ptr [ebp-4] 0 +
mov [esi+4] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_102BCC6  +
push esi  +
call sub_102BA09  +
push 10h  +
mov byte ptr [ebp-4] 0 +
mov [esi+8] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 3 +
test ecx ecx +
jz loc_102BCCD  +
push esi  +
call sub_102BCD6  +
mov [esi+0Ch] eax +
lea eax [ebp+8] +
lea edi [esi+2Ch] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
mov dword ptr [ebp+8] 1 +
call sub_1013D79  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+8] 2 +
call sub_1013D79  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+8] 3 +
call sub_1013D79  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+8] 4 +
call sub_1013D79  +
mov eax esi +
call sub_1002061  +
retn 4  +
xor eax eax +
jmp loc_102BC1B  +
xor eax eax +
jmp loc_102BC41  +
xor eax eax +
jmp loc_102BC63  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022DD1  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102BD04 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ds:CreateBitmap +
push edi  +
push offset unk_108C170  +
push 1  +
push 1  +
push 8  +
push 8  +
call esi  +
mov edi offset off_108A2D8 +
push eax  +
mov ecx edi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
test eax eax +
jz loc_102BDF6  +
push edi  +
mov ecx offset off_108A2C8 +
call sub_1013AE5  +
push offset unk_108C180  +
push 1  +
push 1  +
push 8  +
push 8  +
call esi  +
mov esi offset off_108A2E0 +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
test eax eax +
jz loc_102BE21  +
push esi  +
mov ecx offset off_108A2D0 +
call sub_1013AE5  +
push 1  +
call ds:SetErrorMode  +
pop edi  +
pop esi  +
retn   +
***
mov eax ecx +
jmp loc_102298D  +
***
call sub_1002370  +
mov [ebp-14h] ecx +
cmp byte ptr [ecx+3F4h] 0 +
jnz loc_1041829  +
call sub_1002061  +
retn   +
***
call sub_1002370  +
mov edi ecx +
mov [ebp-14h] edi +
mov esi [ebp+8] +
mov ecx esi +
call sub_100B9A1  +
push eax  +
mov ecx edi +
call sub_1013B33  +
test al al +
jz loc_102BE9F  +
mov eax [edi+4] +
mov ecx [esi+8] +
mov esi [esi+4] +
and dword ptr [ebp-4] 0 +
push edi  +
push eax  +
push ecx  +
push esi  +
call sub_1013F2F  +
mov [edi+8] eax +
mov eax edi +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov [ebp-20h] ecx +
mov eax [ecx+4] +
mov ecx [eax] +
mov [ebp-18h] ecx +
cmp ecx eax +
jz loc_102BEF5  +
xor ebx ebx +
lea esi [ecx+10h] +
lea edi [ebp-2Ch] +
movs   +
movs   +
movs   +
mov esi [ebp-28h] +
cmp esi ebx +
jnz loc_104434C  +
lea ecx [ebp-18h] +
call sub_1014A7D  +
mov ecx [ebp-18h] +
mov eax [ebp-20h] +
cmp ecx [eax+4] +
jnz loc_102BECE  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1023035  +
push dword ptr [esi+58h]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+18h]  +
mov [esi+48h] eax +
mov edx [eax] +
push esi  +
mov ecx eax +
call dword ptr [edx]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10020DC  +
push 9  +
mov ebx ecx +
call ?LoadStdProfileSettings@CWinApp@@IAEXI@Z  +
xor edi edi +
push edi  +
push offset aNostretching  +
mov esi offset aView +
push esi  +
mov ecx ebx +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
xor ecx ecx +
cmp eax edi +
setz cl  +
push edi  +
push offset aShowthumbnail  +
push esi  +
mov dword_108A1D0 ecx +
mov ecx ebx +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push edi  +
push offset aShowallfiles  +
push esi  +
mov ecx ebx +
mov [ebx+220h] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push edi  +
push (offset aUkukukukbmpwid+10h)  +
push esi  +
mov ecx ebx +
mov dword_108A258 eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push edi  +
push offset aBmpheight  +
push esi  +
mov ecx ebx +
mov [ebp-220h] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
cmp [ebp-220h] edi +
jnz loc_1012EDF  +
mov [ebp-220h] edi +
xor eax eax +
mov ecx [ebp-220h] +
mov [ebx+2F0h] eax +
lea eax [ebp-218h] +
push eax  +
push 104h  +
push esi  +
mov [ebx+2ECh] ecx +
call sub_10149ED  +
test al al +
jz loc_102C10E  +
lea eax [ebp-228h] +
push eax  +
push 20019h  +
push edi  +
lea eax [ebp-218h] +
push eax  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_102C10E  +
mov edi ds:GetSystemMetrics +
push 1Ch  +
mov dword ptr [ebp-220h] 3 +
mov dword ptr [ebp-22Ch] 2Ch +
call edi  +
push 1Dh  +
mov [ebp-224h] eax +
call edi  +
mov [ebp-21Ch] eax +
lea ecx [ebp-22Ch] +
push ecx  +
lea eax [ebx+2C0h] +
push eax  +
lea eax [ebp-220h] +
push eax  +
push 0  +
push offset ValueName  +
push dword ptr [ebp-228h]  +
call ds:RegQueryValueExW  +
xor ecx ecx +
cmp eax ecx +
jnz loc_103D5EF  +
cmp dword ptr [ebp-220h] 3 +
jnz loc_103D5EF  +
cmp dword ptr [ebp-22Ch] 2Ch +
jnz loc_103D5EF  +
mov eax [ebx+2E4h] +
sub eax [ebx+2DCh] +
cmp eax [ebp-224h] +
jl loc_103D5EF  +
mov eax [ebx+2E8h] +
sub eax [ebx+2E0h] +
cmp eax [ebp-21Ch] +
jl loc_103D5EF  +
cmp [ebp-224h] ecx +
jz loc_103D5EF  +
cmp [ebp-21Ch] ecx +
jz loc_103D5EF  +
push dword ptr [ebp-228h]  +
call ds:RegCloseKey  +
xor edi edi +
push edi  +
push offset aThumbxpos  +
push esi  +
mov ecx ebx +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push edi  +
push offset aThumbypos  +
push esi  +
mov ecx ebx +
mov [ebp-220h] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push edi  +
push offset aThumbwidth  +
push esi  +
mov ecx ebx +
mov [ebp-21Ch] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push edi  +
push offset aThumbheight  +
push esi  +
mov ecx ebx +
mov [ebp-238h] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
cmp [ebp-220h] edi +
jnz loc_10431EE  +
push edi  +
push offset aUnitsetting  +
push esi  +
mov ecx ebx +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push edi  +
push offset aShowrulers  +
push esi  +
mov ecx ebx +
mov [ebx+270h] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push edi  +
push offset aShowgrid  +
push esi  +
mov ecx ebx +
mov [ebx+26Ch] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push 1  +
push offset aShowstatusbar  +
push esi  +
mov ecx ebx +
mov [ebx+22Ch] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push 1  +
push offset aShowtexttool  +
mov edi offset aText +
push edi  +
mov ecx ebx +
mov [ebx+21Ch] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push 0Bh  +
push offset aPointsize  +
push edi  +
mov ecx ebx +
mov [ebx+224h] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push 0  +
push offset aBold  +
push edi  +
mov ecx ebx +
mov [ebx+2F4h] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push 0  +
push offset aUnderline  +
push edi  +
mov ecx ebx +
mov [ebx+300h] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push 0  +
push offset aItalic  +
push edi  +
mov ecx ebx +
mov [ebx+304h] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push 0  +
push offset aStrikeout  +
push edi  +
mov ecx ebx +
mov [ebx+308h] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push 0  +
push offset aPositionx  +
push edi  +
mov ecx ebx +
mov [ebx+30Ch] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push 0  +
push offset aPositiony  +
push edi  +
mov ecx ebx +
mov [ebx+2F8h] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push offset word_100219C  +
push offset aTypefacename  +
mov [ebx+2FCh] eax +
push edi  +
lea eax [ebp-238h] +
push eax  +
mov ecx ebx +
call ?GetProfileStringW@CWinApp@@QAE?AVCString@@PBG00@Z  +
and dword ptr [ebp-4] 0 +
push eax  +
lea ecx [ebx+314h] +
call ??4CString@@QAEABV0@ABV0@@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-238h] +
call ??1CString@@QAE@XZ  +
push 0FFFFFFFFh  +
push offset aCharset  +
push edi  +
mov ecx ebx +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
mov [ebx+318h] eax +
cmp eax 0FFFFFFFFh +
jz loc_103D6C0  +
push 0  +
push offset aTextpen  +
push edi  +
mov ecx ebx +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push 0  +
push offset aSnaptogrid  +
push esi  +
mov ecx ebx +
mov [ebx+310h] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push 1  +
push offset aGridextent  +
push esi  +
mov ecx ebx +
mov [ebx+31Ch] eax +
call ?GetProfileIntW@CWinApp@@QAEIPBG0H@Z  +
push 20019h  +
mov ecx ebx +
mov [ebx+320h] eax +
call sub_1014945  +
mov esi eax +
test esi esi +
jz loc_102C31C  +
push esi  +
lea ecx [ebx+3F8h] +
call sub_102BEAE  +
push esi  +
call ds:RegCloseKey  +
call sub_1002119  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022D29  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102C35C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022C7F  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102C444 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1022DD1  +
mov [esi+0Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_102C52C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
call sub_1022E79  +
mov eax [ebp+0Ch] +
mov [esi+54h] eax +
mov eax [ebp+10h] +
push 10h  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_1007A14 +
mov [esi+58h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_102C6AF  +
push esi  +
call sub_102C419  +
push 10h  +
mov byte ptr [ebp-4] 1 +
mov [esi+4] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 3 +
test ecx ecx +
jz loc_102C6B3  +
push esi  +
call sub_102C332  +
push 10h  +
mov byte ptr [ebp-4] 1 +
mov [esi+8] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 4 +
test ecx ecx +
jz loc_102C6B7  +
push esi  +
call sub_102C501  +
push dword ptr [ebp+1Ch]  +
lea ecx [esi+2Ch] +
push dword ptr [ebp+18h]  +
mov byte ptr [ebp-4] 1 +
mov [esi+0Ch] eax +
call sub_102C6C0  +
mov eax [ebp+24h] +
lea ecx [ebp+14h] +
mov [esi+24h] eax +
mov dword ptr [esi+28h] 1 +
call sub_100CAB5  +
mov eax esi +
call sub_1002061  +
retn 20h  +
xor eax eax +
jmp loc_102C637  +
xor eax eax +
jmp loc_102C659  +
xor eax eax +
jmp loc_102C67B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102C6DC  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [esi+4] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1013036  +
push [ebp+arg_4]  +
mov eax [esi+4] +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_102C713  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102C732  +
pop ebp  +
retn 0Ch  +
***
call sub_1002370  +
mov esi ecx +
mov edi [ebp+10h] +
sub edi [ebp+0Ch] +
sar edi 2 +
call sub_1013D61  +
mov [ebp-14h] eax +
test edi edi +
jz loc_102C7F8  +
mov ecx esi +
call sub_100B9A1  +
mov ecx 3FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_1047E8A  +
add eax edi +
cmp [ebp-14h] eax +
jnb loc_1047EB6  +
mov edx [ebp-14h] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp-14h] +
jb loc_1047E8F  +
add [ebp-14h] edx +
cmp [ebp-14h] eax +
jnb loc_102C797  +
mov [ebp-14h] eax +
push 0  +
push dword ptr [ebp-14h]  +
call sub_1013BE9  +
and dword ptr [ebp-4] 0 +
mov ebx eax +
mov eax [esi+4] +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp-18h] ebx +
push eax  +
call sub_1013CEE  +
push esi  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1013F2F  +
push esi  +
push eax  +
push dword ptr [esi+8]  +
push dword ptr [ebp+8]  +
call sub_1013CEE  +
mov ecx esi +
call sub_100B9A1  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jnz loc_1047E98  +
mov eax [ebp-14h] +
lea eax [ebx+eax*4] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*4] +
mov [esi+8] eax +
mov [esi+4] ebx +
call sub_1002061  +
retn 10h  +
***
cmp [ebp+14h] ecx +
jnz loc_1040D3C  +
mov [ebp-2Ch] ecx +
mov ecx [ebx+20h] +
mov esi offset dword_1011F98 +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
lea edx [ebp-38h] +
movs   +
mov eax [ecx] +
push edx  +
call dword ptr [eax+20h]  +
mov ecx [ebp-30h] +
mov esi [ebp-34h] +
mov eax [eax] +
add ecx 118h +
push ecx  +
push 64h  +
lea ecx [esi+48h] +
push ecx  +
lea ecx [esi+44h] +
push ecx  +
lea ecx [esi+40h] +
push ecx  +
lea ecx [esi+3Ch] +
push ecx  +
lea ecx [ebp-20h] +
push ecx  +
push eax  +
call sub_1012D56  +
lea ecx [ebp-38h] +
mov [ebp-24h] eax +
call ??1CString@@QAE@XZ  +
xor edi edi +
cmp [ebp-24h] edi +
jz loc_1040D51  +
push dword ptr [ebp-24h]  +
mov ecx esi +
call sub_1015A4D  +
mov [ebp-28h] eax +
cmp eax edi +
jz loc_1040D6C  +
mov ebx [ebp-34h] +
mov ecx [ebp-30h] +
sub esp 10h +
mov edi esp +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
push ebx  +
push dword ptr [ebp-24h]  +
movs   +
call sub_102CBA9  +
test al al +
jnz loc_102C8AD  +
sub esp 10h +
mov edi esp +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
lea ecx [ebx+10h] +
movs   +
call sub_102E962  +
xor edi edi +
cmp [ebp-28h] edi +
jz loc_1040D6C  +
push edi  +
push edi  +
push edi  +
mov ecx offset unk_108AF60 +
call sub_101209D  +
jmp loc_1011F70  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
xor esi esi +
mov [ebx+0FCh] esi +
push edi  +
mov ecx offset unk_108B32C +
mov dword_108A214 esi +
mov dword_108A1CC 87654321h +
call ??4CString@@QAEABV0@PBG@Z  +
mov [ebx+118h] esi +
cmp edi esi +
jz loc_1040E4C  +
cmp dword_108B190 esi +
jnz loc_1040E3D  +
push edi  +
lea ecx [ebx+0F4h] +
mov [ebx+0F8h] esi +
call ??4CString@@QAEABV0@PBG@Z  +
push edi  +
push esi  +
push 803h  +
mov ecx offset unk_108AF60 +
call sub_101209D  +
mov ecx ebx +
call sub_1019DAC  +
test eax eax +
jz loc_102C9B5  +
mov eax [ebx+0F0h] +
push [ebp+arg_0]  +
add eax 10h +
mov dword ptr [eax] 3 +
lea edi [eax+4] +
mov esi offset loc_102E904 +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call ?OnOpenDocument@COleLinkingDoc@@UAEHPBG@Z  +
mov edi eax +
test edi edi +
jz loc_102C97D  +
mov ecx dword_108A1EC +
call sub_1011BA0  +
xor esi esi +
inc esi  +
cmp byte_108B038 0 +
jnz loc_1040E66  +
mov ecx ebx +
call sub_102CB2C  +
and dword_108B04C 0 +
mov dword_108B044 eax +
mov dword_108B040 esi +
mov dword_108B048 esi +
mov byte_108B038 1 +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
xor eax eax +
jmp loc_1012008  +
and dword ptr [esi+10Ch] 0 +
jmp loc_1012043  +
***
call sub_100208C  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jz loc_102CAF5  +
cmp [ebp+10h] edi +
jz loc_102CAF5  +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_100B049  +
push edi  +
lea ecx [ebp-2Ch] +
mov [ebp+8] eax +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
push esi  +
push dword ptr [ebp-28h]  +
call sub_102CAFE  +
test eax eax +
jnz loc_103F20A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ??1CClientDC@@UAE@XZ  +
cmp dword ptr [esi] 28h +
mov eax [esi+10h] +
mov [ebp-10h] eax +
jb loc_102CA41  +
mov [esi+10h] edi +
push dword ptr [ebp+8]  +
mov dword ptr [ebp-14h] 0FF000000h +
push esi  +
call sub_102CC0D  +
mov ebx eax +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx ebx +
call sub_1010018  +
mov [ebp-14h] eax +
cmp ebx edi +
jz loc_102CA71  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax]  +
cmp dword ptr [esi] 28h +
jb loc_102CA7C  +
mov eax [ebp-10h] +
mov [esi+10h] eax +
cmp [ebp-14h] edi +
jnz loc_102CAF5  +
push dword ptr [ebp+0Ch]  +
mov ebx ds:SelectObject +
push dword ptr [ebp+10h]  +
call ebx  +
mov [ebp-18h] eax +
cmp eax edi +
jz loc_103F230  +
push esi  +
call sub_1010A2A  +
push esi  +
mov [ebp-14h] eax +
call sub_1010A4E  +
push 0FF0062h  +
push eax  +
push dword ptr [ebp-14h]  +
mov [ebp-10h] eax +
push edi  +
push edi  +
push dword ptr [ebp+10h]  +
call ds:PatBlt  +
mov eax [ebp-10h] +
push edi  +
push esi  +
push dword ptr [ebp+8]  +
cdq   +
xor eax edx +
sub eax edx +
push eax  +
push edi  +
push edi  +
push edi  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
push edi  +
push edi  +
push dword ptr [ebp+10h]  +
call ds:SetDIBitsToDevice  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp+10h]  +
call ebx  +
mov eax [ebp+0Ch] +
call sub_1002061  +
retn 0Ch  +
xor eax eax +
jmp loc_102CAED  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp dword ptr [esi] 28h +
jb loc_102CB20  +
movzx eax word ptr [esi+0Eh] +
movzx ecx word ptr [esi+0Ch] +
imul eax ecx +
cmp eax 4 +
jz sub_103EE76  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ecx+0F0h] +
mov edx [ecx+10h] +
push ebx  +
push esi  +
push edi  +
push 40h  +
pop eax  +
test edx edx +
jl loc_102CB95  +
cmp edx 3 +
jle loc_103D15D  +
push 4  +
pop ebx  +
cmp edx ebx +
jnz loc_102CB95  +
lea esi [ecx+14h] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov ecx ebx +
mov edi offset dword_1011F88 +
lea esi [ebp+var_14] +
xor edx edx +
cmps   +
jz loc_102D107  +
mov ecx ebx +
mov edi offset dword_1011FA8 +
lea esi [ebp+var_14] +
xor edx edx +
cmps   +
jnz loc_1012F05  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
mov ebx [ebp+arg_4] +
push edi  +
lea esi [ebp+arg_8] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
push 4  +
pop ecx  +
mov edi offset loc_102E904 +
lea esi [ebp+var_14] +
xor eax eax +
cmps   +
mov [ebp+hMem] edx +
mov [ebp+var_15] 0 +
jz loc_103D165  +
mov ecx [ebp+var_4] +
mov al [ebp+var_15] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 18h  +
***
mov eax offset __imp_GdipCreateBitmapFromGdiDib +
jmp loc_100ABE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_103EF3C  +
mov ecx eax +
pop ebp  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
mov dword ptr [esi] offset off_100B22C +
call GdipCreateBitmapFromGdiDib  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
pop eax  +
jmp loc_102CB95  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
movzx eax word ptr [ecx] +
cmp ax 2Dh +
jz loc_1041192  +
cmp ax 2Fh +
jz loc_1041192  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jb loc_1041BBF  +
mov eax [esi+14h] +
sub eax edi +
cmp eax [ebp+arg_4] +
jnb loc_102CCBE  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] 0 +
ja loc_1041BC9  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+10h] +
mov edx [ebp+arg_0] +
mov [eax] edx +
mov edx [ecx+20h] +
mov eax [ebp+arg_4] +
mov [edx] eax +
mov edx [ebp+arg_8] +
sub edx eax +
mov eax [ecx+30h] +
sar edx 1 +
mov [eax] edx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+14h] +
mov edx [ebp+arg_0] +
mov [eax] edx +
mov edx [ecx+24h] +
mov eax [ebp+arg_4] +
mov [edx] eax +
mov edx [ebp+arg_8] +
sub edx eax +
mov eax [ecx+34h] +
sar edx 1 +
mov [eax] edx +
pop ebp  +
retn 0Ch  +
***
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov dx [eax] +
cmp dx [ecx] +
jz loc_102CD4B  +
movzx eax word ptr [eax] +
cmp ax [ecx] +
sbb eax eax +
and eax 0FFFFFFFEh +
inc eax  +
pop ebp  +
retn   +
inc eax  +
inc eax  +
inc ecx  +
inc ecx  +
dec [ebp+arg_8]  +
jz loc_1015083  +
jmp loc_102CD35  +
***
mov eax [ecx+8] +
sub eax edx +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call sub_101CA6C  +
jmp loc_101D9A1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 8 +
push ecx  +
push dword ptr [ebp+0Ch]  +
call sub_102CDA1  +
test [ebp+8] ax +
pop ecx  +
pop ecx  +
push 0  +
pop eax  +
setnz al  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_102CDAE  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
push dword ptr [eax+4]  +
lea eax [ebp+arg_4] +
push eax  +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
push 1  +
push 0  +
call __crtGetStringTypeW  +
movsx ecx word ptr [ebp+arg_4] +
add esp 1Ch +
neg eax  +
sbb eax eax +
and eax ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
or eax 0FFFFFFFFh +
mov edi ecx +
sub eax [edi+14h] +
cmp eax ebx +
jbe loc_1041E83  +
test ebx ebx +
jbe loc_102CE36  +
push esi  +
mov esi [edi+14h] +
push 0  +
add esi ebx +
push esi  +
mov ecx edi +
call sub_10141BD  +
test al al +
jz loc_102CE35  +
push [ebp+arg_4]  +
mov ecx edi +
push ebx  +
push dword ptr [edi+14h]  +
call sub_102CE43  +
push esi  +
mov ecx edi +
call sub_1012FDB  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 1 +
jnz loc_1041E5B  +
cmp dword ptr [ecx+18h] 8 +
jb loc_102CE6A  +
mov ecx [ecx+4] +
mov eax [ebp+arg_0] +
mov dx [ebp+arg_8] +
mov [ecx+eax*2] dx +
pop ebp  +
retn 0Ch  +
add ecx 4 +
jmp loc_102CE5B  +
***
lea eax [ebp-20h] +
push eax  +
mov eax [esi] +
mov ecx [eax+4] +
add ecx esi +
call sub_101D1BB  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101C559  +
pop ecx  +
lea ecx [ebp-20h] +
mov [ebp-24h] eax +
mov [ebp-4] bl +
call sub_1014D59  +
mov ecx [ebp+0Ch] +
push 0FFFFFFFFh  +
push ebx  +
call sub_102CC9B  +
mov eax [esi] +
mov eax [eax+4] +
add eax esi +
mov ecx [eax+18h] +
cmp ecx ebx +
mov byte ptr [ebp-4] 2 +
jg loc_10498E4  +
mov dword ptr [ebp-1Ch] 7FFFFFFEh +
mov ecx [eax+28h] +
call sub_101C3AF  +
movzx eax ax +
movzx edi ax +
cmp [ebp-1Ch] ebx +
jbe loc_102CF12  +
mov eax 0FFFFh +
cmp ax di +
jz loc_102CF0E  +
mov ecx [ebp-24h] +
mov eax [ecx] +
push edi  +
push 48h  +
call dword ptr [eax+8]  +
cmp al bl +
jnz loc_102CF12  +
mov ecx [ebp+0Ch] +
push edi  +
push 1  +
call sub_102CDED  +
mov eax [esi] +
mov eax [eax+4] +
mov ecx [eax+esi+28h] +
dec dword ptr [ebp-1Ch]  +
mov byte ptr [ebp-11h] 1 +
call sub_102CF1F  +
jmp loc_102CEC8  +
or dword ptr [ebp-18h] 1 +
mov [ebp-4] ebx +
jmp loc_101BF98  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+20h] +
xor eax eax +
cmp [ecx] eax +
jz loc_102CF32  +
mov eax [esi+30h] +
mov eax [eax] +
cmp eax 1 +
jle loc_102CF4C  +
mov eax [esi+30h] +
dec dword ptr [eax]  +
mov eax [esi+20h] +
add dword ptr [eax] 2 +
mov eax [esi+20h] +
mov eax [eax] +
movzx eax word ptr [eax] +
pop esi  +
retn   +
mov ecx esi +
call sub_102CF74  +
mov ecx 0FFFFh +
mov edx ecx +
cmp dx ax +
jz loc_10417E3  +
mov ecx esi +
call sub_101C3AF  +
movzx eax ax +
pop esi  +
retn   +
***
mov eax [ecx+20h] +
cmp dword ptr [eax] 0 +
jz loc_102CF9C  +
mov eax [ecx+30h] +
mov eax [eax] +
test eax eax +
jle loc_10417DA  +
mov eax [ecx+30h] +
dec dword ptr [eax]  +
mov ecx [ecx+20h] +
mov eax [ecx] +
lea edx [eax+2] +
mov [ecx] edx +
movzx eax word ptr [eax] +
retn   +
xor eax eax +
jmp loc_102CF81  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_102CFC1  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+18h] 8 +
mov edx [eax+14h] +
jb loc_102CFE5  +
mov eax [eax+4] +
push edx  +
push eax  +
push dword ptr [ecx+14h]  +
push 0  +
call sub_1015005  +
pop ebp  +
retn 4  +
add eax 4 +
jmp loc_102CFD5  +
***
call sub_102D013  +
jmp loc_1012DC7  +
***
call sub_100208C  +
xor esi esi +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call ??0CFile@@QAE@XZ  +
push esi  +
push 20h  +
push dword ptr [ebp+8]  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ?Open@CFile@@UAEHPBGIPAVCFileException@@@Z  +
test eax eax +
jz loc_102D0CF  +
lea ecx [ebp-20h] +
call ?GetLength@CFile@@UBEKXZ  +
mov ebx eax +
cmp ebx 4 +
jbe loc_102D0C7  +
push ebx  +
push esi  +
call ds:LocalAlloc  +
mov edi eax +
cmp edi esi +
jz loc_102D0C7  +
push ebx  +
push edi  +
lea ecx [ebp-20h] +
call ?Read@CFile@@UAEIPAXI@Z  +
cmp eax ebx +
jnz loc_102D0C0  +
mov cx [edi] +
mov eax offset dword_102D0F0 +
cmp cx [eax] +
jnz loc_102D0C0  +
push 2  +
pop esi  +
lea eax [ebx-4] +
cmp eax esi +
jbe loc_102D0C0  +
mov cx [esi+edi] +
mov eax offset dword_102D0F4 +
cmp cx [eax] +
jz loc_102D0C0  +
movzx eax byte ptr [esi+edi+2] +
movzx ecx byte ptr [esi+edi+3] +
mov dx [esi+edi] +
shl eax 8 +
lea eax [eax+ecx+2] +
mov ecx offset dword_102D0F8 +
mov [ebp+8] eax +
cmp dx [ecx] +
jz loc_102D0E6  +
add esi eax +
lea eax [ebx-4] +
cmp esi eax +
jb loc_102D087  +
push edi  +
call ds:LocalFree  +
lea ecx [ebp-20h] +
call ?Close@CFile@@UAEXXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ??1CFile@@UAE@XZ  +
mov eax [ebp-10h] +
call sub_1002061  +
retn 8  +
cmp ebx eax +
jb loc_102D0C0  +
jmp loc_10434A6  +
***
push 2  +
jmp loc_102CC66  +
***
push 4  +
call ??2@YAPAXI@Z  +
push 20h  +
mov [ebp+var_18] eax +
mov dword ptr [eax] 5Fh +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_102D16E  +
push 8  +
pop ecx  +
xor eax eax +
mov edi ebx +
stos   +
xor eax eax +
inc eax  +
mov [ebx] eax +
lea edi [ebx+4] +
mov esi offset dword_102D110 +
movs   +
movs   +
movs   +
movs   +
mov [ebx+14h] eax +
mov eax [ebp+var_18] +
mov dword ptr [ebx+18h] 4 +
mov [ebx+1Ch] eax +
jmp loc_102F758  +
xor ebx ebx +
jmp loc_102D148  +
***
push 10h  +
jmp loc_10125F5  +
push 4  +
jmp loc_10125F5  +
push 2  +
jmp loc_10125F5  +
xor eax eax +
inc eax  +
jmp loc_10125F6  +
***
push 4  +
pop ecx  +
mov edi offset dword_102D110 +
lea esi [ebx+4] +
xor eax eax +
cmps   +
jnz loc_102D1A9  +
push dword ptr [ebx+1Ch]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_102F6C6  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_102FCB8  +
push dword ptr [ebp-24h]  +
mov esi [ebp-54h] +
push dword ptr [ebp-3Ch]  +
call sub_102D1D8  +
jmp loc_102FC83  +
***
call sub_100208C  +
mov eax [esi+4] +
mov ecx [eax+2Ch] +
mov eax [eax+30h] +
mov [ebp-18h] ecx +
fild  dword ptr [ebp-18h] +
test ecx ecx +
jl loc_104357A  +
mov [ebp-18h] eax +
fild  dword ptr [ebp-18h] +
test eax eax +
jl loc_1043585  +
fld  st(1) +
mov bl 1 +
fdiv st st(1) +
fld  st(2) +
fdiv  ds:dbl_102D360 +
fld  st(2) +
fdiv  ds:dbl_102D358 +
fld1   +
fcom  st(2) +
fnstsw  ax +
test ah 41h +
jz loc_1043590  +
fld  ds:dbl_102D350 +
fcomp  st(4) +
fnstsw  ax +
test ah 5 +
jp loc_102D334  +
fld  ds:dbl_102D348 +
fcomp  st(4) +
fnstsw  ax +
fstp  st(3) +
test ah 41h +
jz loc_10435B0  +
fcom  st(1) +
fnstsw  ax +
test ah 41h +
jp loc_102D33B  +
fstp  st +
fdivp st(1) st +
fmul st(2) st +
fxch  st(2) +
call _ftol2  +
fmulp st(1) st +
mov [ebp-18h] eax +
call _ftol2  +
mov [ebp-14h] eax +
and dword ptr [ebp-10h] 0 +
mov eax [esi+4] +
mov ecx [edi] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-10h] +
push edx  +
push 2  +
push dword ptr [eax+24h]  +
push dword ptr [eax+14h]  +
push edi  +
call dword ptr [ecx+54h]  +
test eax eax +
jl loc_102D31B  +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
lea edx [ebp-28h] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
fld  qword ptr [ebp-20h] +
mov eax [ebp-10h] +
mov ecx [eax] +
sub esp 10h +
fstp  [esp+34h+var_2C] +
fld  qword ptr [ebp-28h] +
fstp  [esp+34h+var_34] +
push eax  +
call dword ptr [ecx+28h]  +
test bl bl +
jz loc_10435CD  +
and dword ptr [ebp+8] 0 +
mov eax [edi] +
lea ecx [ebp+8] +
push ecx  +
push edi  +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+2Ch]  +
test eax eax +
jl loc_102D30A  +
mov eax [ebp+8] +
mov ecx [eax] +
push 1  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-10h]  +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jl loc_102D30A  +
mov eax [ebp+0Ch] +
push dword ptr [ebp+8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_102D31B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_102D32C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1002061  +
retn 8  +
fstp  st(3) +
jmp loc_102D256  +
fstp  st(1) +
jmp loc_102D265  +
***
fild  [ebp+arg_8] +
push ecx  +
lea ecx [ebp+var_18] +
fstp  [esp+38h+var_38] +
push [ebp+arg_4]  +
call sub_100AE5A  +
push 2  +
lea ecx [ebp+var_18] +
call sub_100AE94  +
push 2  +
lea ecx [ebp+var_18] +
call sub_100AEC3  +
push 2  +
lea ecx [ebp+var_18] +
call sub_100AEF2  +
cmp [ebp+arg_1C] 0 +
push [ebp+arg_18]  +
lea eax [ebp+var_18] +
push [ebp+arg_10]  +
mov ecx edi +
push eax  +
jnz loc_1046009  +
call sub_102D3C5  +
push [ebp+var_18]  +
call GdipDeletePen  +
jmp loc_100E790  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push dword ptr [eax]  +
push dword ptr [esi]  +
call GdipDrawLinesI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 10h  +
mov esi ecx +
call ds:GetKeyState  +
mov ecx 8000h +
test ax cx +
jnz loc_1047F94  +
mov byte ptr [esi+54h] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
push esi  +
push edi  +
mov edi ecx +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-8] ecx +
mov ecx [edi+0Ch] +
lea edx [ebp-8] +
push edx  +
mov [ebp-4] eax +
mov eax [ecx] +
lea esi [edi+10h] +
push esi  +
call dword ptr [eax+4Ch]  +
mov eax [ebp-8] +
push dword ptr [ebp+0Ch]  +
mov [esi] eax +
mov eax [ebp-4] +
mov [esi+4] eax +
lea eax [ebp-8] +
push eax  +
mov ecx edi +
call sub_100F0E0  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
push esi  +
push edi  +
mov edi ecx +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-8] ecx +
mov ecx [edi+0Ch] +
lea edx [ebp-8] +
push edx  +
mov [ebp-4] eax +
mov eax [ecx] +
lea esi [edi+10h] +
push esi  +
call dword ptr [eax+4Ch]  +
mov eax [ebp-8] +
push dword ptr [ebp+0Ch]  +
mov [esi] eax +
mov eax [ebp-4] +
mov [esi+4] eax +
lea eax [ebp-8] +
push eax  +
mov ecx edi +
call sub_100F1B5  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
call sub_100CC4D  +
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-14h] 7 +
mov dword ptr [ebp-18h] offset off_100B560 +
and dword ptr [ebp-4] 0 +
test byte ptr [ebp+8] 8 +
mov ecx [esi+14h] +
lea eax [ebp-18h] +
push eax  +
mov eax [ecx] +
jnz loc_10303C6  +
push 1Fh  +
call dword ptr [eax+18h]  +
mov ecx eax +
call sub_1005BE0  +
mov eax [esi] +
mov edi [ebp-10h] +
mov ecx esi +
call dword ptr [eax+8Ch]  +
push eax  +
push edi  +
lea ecx [ebp-38h] +
call sub_100DF5E  +
push eax  +
push dword ptr [esi+50h]  +
call sub_100E79E  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
mov al [eax] +
mov [ecx+58h] al +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_8] 14h +
mov [ebp+var_4] ecx +
call sub_100DD20  +
mov al 1 +
leave   +
retn 4  +
***
push 4  +
mov eax offset loc_107F5D4 +
call sub_100208C  +
mov esi ecx +
push 48h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_102D58E  +
push esi  +
call sub_102D599  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [ebp+8] +
mov ecx [eax+8] +
mov edx [eax+4] +
mov [esi+4] edx +
mov [esi+8] ecx +
and dword ptr [ebp-4] 0 +
lea ebx [eax+10h] +
lea ecx [esi+10h] +
push ebx  +
mov dword ptr [esi] offset off_100D98C +
call sub_100C009  +
fld1   +
push ecx  +
fstp  [esp+8+var_8] +
lea eax [ebp+8] +
lea edi [esi+30h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+8] 0FF000000h +
call sub_100B88A  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_102D646  +
mov [ebp+8] eax +
lea eax [ebp+8] +
lea ebx [esi+38h] +
push eax  +
mov ecx ebx +
call sub_100B7C0  +
lea eax [ebp+8] +
push eax  +
lea ecx [esi+10h] +
mov byte ptr [ebp-4] 2 +
call sub_100DF03  +
lea eax [ebp+8] +
push eax  +
mov ecx ebx +
call sub_100DFBD  +
fild  dword ptr [esi+4] +
push ecx  +
mov ecx edi +
fstp  [esp+8+var_8] +
call sub_100DFEF  +
push ebx  +
mov ecx edi +
call sub_100E022  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
fld  qword ptr [esi+10h] +
push edi  +
fld  ds:dbl_100DFB0 +
fmul st(1) st +
fxch  st(1) +
call _ftol2  +
fld  qword ptr [esi+8] +
movzx edi al +
fmul st st(1) +
shl edi 8 +
call _ftol2  +
movzx eax al +
fmul  qword ptr [esi] +
or edi eax +
shl edi 8 +
call _ftol2  +
movzx eax al +
or eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push offset off_108D4CC  +
push offset off_108D4AC  +
push 0  +
push [ebp+arg_4]  +
mov esi ecx +
call __RTDynamicCast  +
mov ecx [eax+0Ch] +
mov [esi+10h] ecx +
mov eax [eax+10h] +
mov [esi+14h] eax +
mov eax [esi+0Ch] +
add esp 14h +
push [ebp+arg_4]  +
mov byte ptr [eax+54h] 0 +
mov eax [esi+0Ch] +
push [ebp+arg_0]  +
and dword ptr [eax+58h] 0 +
mov ecx esi +
call sub_100F439  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax offset __imp_GdipCreatePen2 +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetPenStartCap +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetPenEndCap +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetPenLineJoin +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDrawLinesI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipCreateFromHDC +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetSmoothingMode +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetClipRectI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetClipBoundsI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetSolidFillColor +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetPenWidth +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetPenBrushFill +
jmp loc_100ABE3  +
***
cmp dword ptr [esi+8] 10h +
jnz loc_1006307  +
jmp loc_1040F41  +
***
push edx  +
retn   +
***
push edx  +
retn   +
***
push esi  +
retn   +
***
push esi  +
retn   +
***
push ebx  +
retn   +
***
push ebx  +
retn   +
***
call ?Default@CWnd@@IAEJXZ  +
retn 0Ch  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_102DC54 +
and dword ptr [ebp-4] 0 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
mov dword ptr [esi] offset off_1002208 +
call sub_1002407  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
call dword ptr [eax+4]  +
lea ecx [esi+4] +
lea edx [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov eax [ecx+4] +
push edx  +
push eax  +
call sub_100BC85  +
pop esi  +
pop ebp  +
retn 4  +
***
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
jmp loc_10063CC  +
***
call sub_100208C  +
mov edi ecx +
mov [ebp-10h] edi +
mov dword ptr [edi] offset off_102DCFC +
mov eax [edi+8] +
mov esi [eax] +
and dword ptr [ebp-4] 0 +
cmp esi eax +
jz loc_102DF5C  +
mov ecx [esi+8] +
test ecx ecx +
jz loc_102DF55  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov esi [esi] +
cmp esi [edi+8] +
jnz loc_102DF48  +
lea esi [edi+4] +
mov ecx esi +
call sub_100BAE6  +
mov ecx esi +
call sub_100BAC8  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_102DF78 +
jz loc_102DFC4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 14h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1044501  +
lea ecx [esi+0Ch] +
push ecx  +
add esi 4 +
push esi  +
mov ecx eax +
call sub_102DFFB  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_1008948 +
mov edx [ecx] +
mov [eax+4] edx +
mov ecx [ecx+4] +
mov [eax+8] ecx +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
mov [eax+0Ch] edx +
mov ecx [ecx+4] +
mov [eax+10h] ecx +
pop ebp  +
retn 8  +
***
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push esi  +
mov esi [eax+4] +
push edi  +
mov edi eax +
cmp byte ptr [esi+1Dh] 0 +
jnz loc_102E028  +
push [ebp+arg_0]  +
lea ecx [esi+0Ch] +
call sub_102E11A  +
test al al +
jz loc_102E05E  +
mov esi [esi+8] +
jmp loc_102E044  +
mov edi esi +
mov esi [esi] +
jmp loc_102E044  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset unk_108AF60 +
pop ebp  +
jmp loc_102E07B  +
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 41Ch +
pop ebp  +
jmp loc_102E08E  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
push dword ptr [ebp+10h]  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-0Ch] +
push dword ptr [ebp+8]  +
xor edi edi +
call sub_102E151  +
mov eax ecx +
push eax  +
lea eax [ebp+10h] +
push eax  +
mov ecx esi +
call sub_102E0D3  +
mov eax [ebp+10h] +
cmp eax [esi+4] +
jz loc_102E0C6  +
mov edi [eax+18h] +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_102E035  +
mov esi [esi+4] +
mov [ebp+var_4] eax +
cmp eax esi +
jz loc_102E10D  +
mov ecx [ebp+arg_4] +
add eax 0Ch +
push eax  +
call sub_102E11A  +
test al al +
jnz loc_102E10D  +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
mov [ebp+arg_4] esi +
lea eax [ebp+arg_4] +
jmp loc_102E101  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi [edx] +
push edi  +
mov edi [ecx] +
cmp esi edi +
setl al  +
cmp esi edi +
jnz loc_102E13E  +
mov eax [edx+4] +
mov esi [ecx+4] +
cmp eax esi +
jz loc_102E144  +
setl al  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax [edx+8] +
cmp eax [ecx+8] +
jmp loc_102E13B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push [ebp+arg_0]  +
mov [ecx+4] eax +
mov eax [ebp+arg_8] +
mov [ecx+8] eax +
call sub_102E177  +
mov [ecx] eax +
mov eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 2BEh +
jl loc_102E190  +
cmp eax 2D3h +
jg loc_102E190  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
push 14h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_102E1D2  +
add esi 4 +
push esi  +
call sub_102E1DD  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_102E214 +
call sub_100C6A4  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
cmp eax 0Dh +
jnz loc_100696B  +
mov esi [ebp+10h] +
push 4  +
pop ecx  +
mov edi offset dword_100213C +
xor edx edx +
cmps   +
jz loc_102E36D  +
cmp eax eax +
jnz loc_100696B  +
mov esi [ebp+10h] +
push 4  +
pop ecx  +
mov edi offset dword_100FA80 +
xor edx edx +
cmps   +
jz loc_102E36D  +
cmp eax eax +
jnz loc_100696B  +
mov esi [ebp+10h] +
push 4  +
pop ecx  +
mov edi offset dword_100FA94 +
xor edx edx +
cmps   +
jnz loc_1048A9E  +
lea ecx [ebp-274h] +
call sub_10069B9  +
movzx eax word ptr [ebp-27Ch] +
mov esi [ebp+10h] +
mov edx [ebx] +
push 5  +
pop ecx  +
mov [ebp-270h] eax +
mov dword ptr [ebp-23Ch] 1 +
lea edi [ebp-238h] +
movs   +
xor esi esi +
push esi  +
lea ecx [ebp-274h] +
push ecx  +
push 0FFFFFFFFh  +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-4] 6 +
call dword ptr [edx+14h]  +
cmp eax esi +
jz loc_100695C  +
cmp [ebp-224h] esi +
jz loc_100695C  +
cmp [ebp-220h] esi +
jz loc_100695C  +
mov [ebp-27Ch] esi +
mov eax [ebp-280h] +
mov eax [eax+38h] +
mov ecx [eax] +
lea edx [ebp-27Ch] +
push edx  +
push esi  +
push dword ptr [ebp-220h]  +
mov byte ptr [ebp-4] 7 +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax esi +
mov [ebp-278h] eax +
jl loc_102E41D  +
push dword ptr [ebp-284h]  +
push dword ptr [ebp-27Ch]  +
push dword ptr [ebp+10h]  +
call sub_100FAC1  +
mov eax [ebp-27Ch] +
mov byte ptr [ebp-4] 6 +
cmp eax esi +
jz loc_100695C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100695C  +
***
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov edi [eax+0Ch] +
mov ecx [ebp-4] +
push 2000h  +
push ebx  +
push ebx  +
push ebx  +
lea eax [esi+3Ch] +
push eax  +
push dword ptr [ecx+544h]  +
call sub_102E481  +
movzx eax ax +
push eax  +
push edi  +
call ds:LoadImageW  +
cmp eax ebx +
jz loc_1006B9B  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+10h]  +
jmp loc_1006B9B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov eax 0EBC1h +
mov word ptr [ebp+var_24] ax +
inc eax  +
mov word ptr [ebp+var_24+2] ax +
mov eax 0EBC3h +
mov [ebp+var_20] ax +
inc eax  +
mov [ebp+var_1E] ax +
mov eax 0EBBDh +
mov [ebp+var_1C] ax +
inc eax  +
mov [ebp+var_1A] ax +
mov eax 0EBBFh +
mov [ebp+var_18] ax +
inc eax  +
mov [ebp+var_16] ax +
mov eax 0EBC9h +
mov [ebp+var_14] ax +
inc eax  +
mov [ebp+var_12] ax +
mov eax 0EBCBh +
mov [ebp+var_10] ax +
inc eax  +
mov [ebp+var_E] ax +
mov eax 0EBC5h +
mov [ebp+var_C] ax +
inc eax  +
mov [ebp+var_A] ax +
mov eax 0EBC7h +
mov [ebp+var_8] ax +
inc eax  +
mov [ebp+var_6] ax +
mov eax [ebp+arg_0] +
or ecx 0FFFFFFFFh +
sub eax 259h +
mov [ebp+var_28] ecx +
jnz loc_1040E94  +
mov edx [ebp+arg_4] +
mov eax [edx+10h] +
cmp eax 0Dh +
jnz loc_102E598  +
push 4  +
pop ecx  +
mov edi offset dword_100213C +
mov esi edx +
xor ebx ebx +
cmps   +
jz loc_102E594  +
cmp eax eax +
jnz loc_102E598  +
push 4  +
pop ecx  +
mov edi offset dword_100FA80 +
mov esi edx +
xor ebx ebx +
cmps   +
jz loc_102E594  +
cmp eax 0Dh +
jnz loc_102E598  +
push 4  +
pop ecx  +
mov edi offset dword_100FA94 +
mov esi edx +
xor ebx ebx +
cmps   +
jnz loc_1040F13  +
xor ecx ecx +
inc ecx  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
test ecx ecx +
jl loc_102E586  +
push ds:dword_100FAB8  +
lea eax [ebp+ecx*8+var_24] +
push eax  +
push offset dword_100FAA8  +
call sub_100FB15  +
movzx eax ax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100207A  +
leave   +
retn 8  +
xor ecx ecx +
jmp loc_102E565  +
mov ecx [ebp+var_28] +
jmp loc_102E565  +
***
push edi  +
call sub_10049FD  +
mov eax dword_108B1D4 +
mov edi ds:SelectPalette +
mov [ebp+arg_0] ebx +
cmp eax ebx +
jnz loc_103EFAC  +
push 0CC0020h  +
push ebx  +
push ebx  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push ebx  +
push ebx  +
push dword_108A20C  +
call ds:BitBlt  +
cmp [ebp+arg_0] ebx +
jnz loc_103EFD5  +
pop edi  +
jmp loc_1005CA0  +
xor eax eax +
jmp loc_1005CA9  +
call sub_10049FD  +
cmp dword_108A20C ebx +
jnz loc_102E60C  +
push dword ptr [esi+0Ch]  +
call ds:CreateCompatibleDC  +
mov dword_108A20C eax +
cmp eax ebx +
jz loc_102E5E6  +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+0Ch]  +
call ds:CreateCompatibleBitmap  +
cmp eax ebx +
jz loc_102E5E6  +
push eax  +
push dword_108A20C  +
mov dword_108A208 eax +
call ds:SelectObject  +
cmp eax ebx +
jz loc_102E63C  +
push eax  +
call ds:DeleteObject  +
mov eax [esi+2Ch] +
mov dword_108A204 eax +
mov eax [esi+30h] +
mov dword_108A200 eax +
jmp loc_1005C94  +
***
call sub_1002370  +
lea ecx [ebp-1Ch] +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
mov byte ptr [ebp-4] 1 +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov ecx [eax+4] +
call ?EndWaitCursor@CCmdTarget@@QAEXXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002208 +
call sub_1002407  +
test byte ptr [ebp+8] 1 +
jz loc_102E6B3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+68Ch] +
mov [ebp+var_4] eax +
test eax eax +
jz loc_102E6FB  +
push edi  +
lea edi [esi+688h] +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
call sub_1009B19  +
push [ebp+arg_0]  +
mov eax [eax] +
push esi  +
mov ecx eax +
call sub_102E705  +
cmp [ebp+var_4] 0 +
jnz loc_102E6DC  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jz loc_102170F  +
pop ebp  +
retn 8  +
***
mov ecx [esi+44h] +
cmp ecx ebx +
jnz loc_10354C8  +
mov eax [esi+40h] +
mov ecx [eax+30h] +
mov [esi+88h] ecx +
mov eax [eax+2Ch] +
push 8  +
mov [esi+84h] eax +
mov [esi+80h] edi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov edi offset off_1002208 +
cmp eax ebx +
jz loc_1034DD2  +
mov [eax+4] ebx +
mov [eax] edi +
push dword ptr [esi+88h]  +
mov ecx eax +
push dword ptr [esi+84h]  +
mov [esi+44h] eax +
push dword ptr [ebp+8]  +
call sub_1008818  +
test eax eax +
jz loc_104024C  +
lea ecx [ebp-70h] +
call ??0CDC@@QAE@XZ  +
push dword ptr [ebp+8]  +
lea ecx [ebp-70h] +
mov [ebp-4] ebx +
call sub_1002292  +
push dword ptr [esi+44h]  +
lea ecx [ebp-70h] +
call sub_10022BD  +
push 0CC0020h  +
push ebx  +
push ebx  +
mov [ebp-60h] eax +
mov eax [esi+40h] +
push dword ptr [eax+0Ch]  +
push dword ptr [esi+88h]  +
push dword ptr [esi+84h]  +
push ebx  +
push ebx  +
push dword ptr [ebp-6Ch]  +
call ds:BitBlt  +
push dword ptr [ebp-60h]  +
lea ecx [ebp-70h] +
call sub_10022BD  +
lea ecx [ebp-70h] +
call ?DeleteDC@CDC@@QAEHXZ  +
mov ecx dword_108A1EC +
push ebx  +
call sub_102E7F6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-70h] +
call ??1CDC@@UAE@XZ  +
jmp loc_10094A3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_108A24C +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_102E825  +
mov eax [eax+40h] +
mov edx [eax+2Ch] +
mov eax [eax+30h] +
push dword ptr [ecx+0A4h]  +
push eax  +
push edx  +
push 2  +
call sub_10089B9  +
pop esi  +
pop ebp  +
retn 4  +
mov edx [esi] +
mov eax [esi+4] +
jmp loc_102E811  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push eax  +
push 0Ch  +
push eax  +
call ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBG0@Z  +
push eax  +
call ds:LoadCursorW  +
pop ebp  +
retn 4  +
***
mov ecx [ebp-10h] +
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_108A1E0 +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push esi  +
push 0  +
push offset off_108C984  +
push offset off_108C904  +
push 0  +
push dword ptr [ecx+20h]  +
call __RTDynamicCast  +
mov esi eax +
add esp 14h +
test esi esi +
jz loc_102E94A  +
mov ecx esi +
call sub_102E951  +
test eax eax +
jnz loc_10411E0  +
pop esi  +
retn   +
***
xor eax eax +
cmp [ecx+0A0h] eax +
setnz al  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov eax ecx +
mov ecx [ebp+var_4] +
lea edi [eax+4] +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor ecx ebp +
mov dword ptr [eax] 4 +
pop esi  +
call sub_100207A  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
push edi  +
sub esp 10h +
mov edi esp +
mov esi offset loc_102E9A4 +
movs   +
movs   +
movs   +
movs   +
call sub_102E962  +
pop edi  +
pop esi  +
retn   +
***
mov eax offset __imp_GdipGetImageEncodersSize +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetImageEncoders +
jmp loc_100ABE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+hMem] +
push eax  +
lea eax [ebp+var_8] +
xor esi esi +
push eax  +
mov [ebp+hMem] esi +
mov [ebp+var_8] esi +
call sub_102EA8E  +
xor edx edx +
cmp [ebp+var_8] esi +
jbe loc_102EA85  +
mov eax [ebp+hMem] +
add eax 10h +
mov edi [ebp+arg_0] +
push 4  +
pop ecx  +
mov esi eax +
xor ebx ebx +
cmps   +
jz loc_102EA5D  +
inc edx  +
add eax 4Ch +
cmp edx [ebp+var_8] +
jb loc_102EA44  +
jmp loc_102EA85  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_102EA70  +
mov esi edx +
imul esi esi +
add esi [ebp+hMem] +
movs   +
movs   +
movs   +
movs   +
xor esi esi +
inc esi  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
xor esi esi +
jmp loc_102EA73  +
***
call sub_102E8A8  +
xor ebx ebx +
mov edi [ebp+0Ch] +
mov [edi] ebx +
mov esi [ebp+8] +
mov [esi] ebx +
cmp dword_108B34C ebx +
jnz loc_102EAFF  +
mov [ebp-4] ebx +
lea eax [ebp-1Ch] +
push eax  +
push esi  +
call GdipGetImageEncodersSize  +
test eax eax +
jnz loc_102EAF3  +
cmp [esi] ebx +
jbe loc_102EAF3  +
push dword ptr [ebp-1Ch]  +
push ebx  +
call ds:LocalAlloc  +
mov [edi] eax +
cmp eax ebx +
jz loc_102EAF3  +
mov ecx [esi] +
push eax  +
push dword ptr [ebp-1Ch]  +
push ecx  +
call GdipGetImageEncoders  +
test eax eax +
jnz loc_102EAF3  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
inc eax  +
call sub_102E894  +
retn 8  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1043502  +
xor eax eax +
jmp loc_102EAEB  +
***
cmp dword ptr [esi+8] 10h +
jnz loc_1006312  +
jmp loc_1040F34  +
***
push esi  +
mov esi edi +
test edi edi +
jz loc_102EB85  +
push dword ptr [esi+20h]  +
call ds:GetMenu  +
push eax  +
call ?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z  +
test eax eax +
jz loc_102EB70  +
push dword ptr [eax+4]  +
call ds:IsMenu  +
test eax eax +
jnz loc_102EB85  +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov esi eax +
test esi esi +
jnz loc_102EB50  +
pop esi  +
jmp loc_10067C6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
mov ecx offset unk_108B074 +
push dword ptr [ebp+8]  +
call sub_102EBF9  +
mov eax off_108A1D4 +
mov eax [eax+40h] +
xor ecx ecx +
cmp eax 259h +
jz loc_103C051  +
cmp eax 25Ah +
jz loc_103C051  +
xor al al +
cmp [esi+8Ch] cl +
jnz loc_102EBE8  +
cmp al cl +
jnz loc_103C058  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+14h] 0 +
jz loc_103C0D3  +
mov ecx [ecx+14h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+10h]  +
***
call sub_1002155  +
mov eax [ebp+8] +
xor esi esi +
push esi  +
mov ebx ecx +
mov [ebp-50h] eax +
call sub_100AF58  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push esi  +
push offset off_108C824  +
push offset off_108C80C  +
push esi  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
mov ecx eax +
call sub_102E919  +
mov eax [ebx+0ECh] +
cmp dword ptr [eax+10h] 4 +
jnz loc_102EC77  +
add eax 14h +
push esi  +
push eax  +
call sub_102EA18  +
mov dword ptr [ebp-48h] 1 +
test eax eax +
jz loc_102EC7A  +
mov [ebp-48h] esi +
mov esi [ebx+0ECh] +
push 5  +
pop ecx  +
push dword ptr [ebp-50h]  +
add esi 10h +
lea edi [ebp-28h] +
movs   +
lea ecx [ebp-40h] +
call ??0CString@@QAE@PBG@Z  +
xor edi edi +
mov [ebp-4] edi +
cmp [ebp-48h] edi +
jnz loc_103BA83  +
mov eax [ebp-40h] +
cmp [eax-8] edi +
jz loc_103BA83  +
cmp dword_108BC04 edi +
jnz loc_1040B43  +
mov esi 40000000h +
lea ecx [ebp-41h] +
call sub_100AF92  +
mov edi [ebx+0ECh] +
lea eax [ebp-28h] +
push eax  +
lea ecx [edi+10h] +
mov byte ptr [ebp-4] 3 +
call sub_102ED61  +
xor ecx ecx +
test al al +
setz cl  +
mov [ebp-48h] ecx +
test ecx ecx +
jnz loc_1040BA6  +
push dword ptr [ebp-40h]  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+80h]  +
test eax eax +
jz loc_1040BB2  +
xor edi edi +
cmp [ebp-48h] edi +
jnz loc_1040C4F  +
cmp [ebp+0Ch] edi +
jz loc_102ED22  +
mov eax [ebx] +
push 1  +
push dword ptr [ebp-40h]  +
mov ecx ebx +
call dword ptr [eax+5Ch]  +
cmp [ebp-50h] edi +
jz loc_103C5FF  +
cmp dword_108BC04 edi +
jnz loc_1040C92  +
xor esi esi +
inc esi  +
lea ecx [ebp-41h] +
mov byte ptr [ebp-4] 0 +
call sub_102E656  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call ??1CString@@QAE@XZ  +
mov eax esi +
call sub_100212D  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax ecx +
mov ecx [eax] +
cmp ecx [edx] +
jnz loc_103C069  +
push esi  +
push edi  +
push 4  +
pop ecx  +
lea esi [eax+4] +
lea edi [edx+4] +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jnz loc_103C069  +
inc eax  +
pop ebp  +
retn 4  +
***
cmp dword_108B190 0 +
push esi  +
mov esi ecx +
jnz loc_1040A16  +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
jmp ds:?OnFileSave@CDocument@@IAEXXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
sub esp 50h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp eax ebx +
jnz loc_102EFE5  +
mov [ebp+var_8] ebx +
cmp dword_108B1A8 ebx +
jnz loc_103EFE6  +
lea eax [ebp+var_28] +
push eax  +
push 18h  +
push [ebp+arg_0]  +
call ds:GetObjectW  +
mov eax [ebp+arg_8] +
cmp ax bx +
jz loc_103EFFF  +
xor esi esi +
inc esi  +
cmp ax si +
jbe loc_103F00E  +
push 4  +
pop ecx  +
cmp ax cx +
jbe loc_103F016  +
mov cx 8 +
cmp cx ax +
sbb eax eax +
and eax 10h +
add eax 8 +
mov [ebp+arg_8] eax +
mov eax [ebp+var_24] +
mov [ebp+var_4C] eax +
mov eax [ebp+var_20] +
mov [ebp+var_48] eax +
mov eax esi +
mov [ebp+var_44] ax +
mov ax word ptr [ebp+arg_8] +
mov [ebp+var_42] ax +
mov eax [ebp+arg_4] +
mov [ebp+var_40] eax +
mov eax [ebp+arg_18] +
mov [ebp+var_38] eax +
mov eax [ebp+arg_1C] +
mov [ebp+var_34] eax +
lea eax [ebp+var_50] +
push eax  +
mov [ebp+var_50] 28h +
mov [ebp+var_3C] ebx +
mov [ebp+var_30] ebx +
mov [ebp+var_2C] ebx +
call sub_100AFAD  +
mov ecx [ebp+arg_14] +
movzx eax ax +
add eax 28h +
push eax  +
push 40h  +
mov [ebp+var_10] eax +
mov [ecx] eax +
call ds:GlobalAlloc  +
mov edi eax +
mov [ebp+hMem] edi +
cmp edi ebx +
jz loc_103F01E  +
push 0Ah  +
pop ecx  +
lea esi [ebp+var_50] +
movs   +
movzx eax word ptr [ebp+var_18+2] +
push ebx  +
push eax  +
movzx eax word ptr [ebp+var_18] +
push eax  +
push 2  +
push 2  +
call ds:CreateBitmap  +
mov edi eax +
push ebx  +
mov [ebp+var_C] edi +
call ds:CreateCompatibleDC  +
mov esi eax +
mov [ebp+arg_18] esi +
cmp edi ebx +
jz loc_103F1B8  +
push edi  +
cmp esi ebx +
jz loc_103F1B2  +
push esi  +
mov [ebp+arg_C] ebx +
call ds:SelectObject  +
mov [ebp+arg_1C] eax +
cmp [ebp+var_8] ebx +
jnz loc_103F02E  +
movzx eax word ptr [ebp+var_48] +
push ebx  +
push [ebp+hMem]  +
push ebx  +
push eax  +
push ebx  +
push [ebp+arg_0]  +
push esi  +
call ds:GetDIBits  +
mov esi [ebp+hMem] +
push 0Ah  +
pop ecx  +
lea edi [ebp+var_50] +
movs   +
mov esi [ebp+var_3C] +
push 1Fh  +
pop edi  +
cmp esi ebx +
jz loc_103F048  +
lea eax [ebp+var_50] +
push eax  +
call sub_100AFAD  +
mov ecx [ebp+var_50] +
movzx eax ax +
add eax esi +
mov esi [ebp+arg_14] +
add ecx eax +
mov [esi] ecx +
cmp [ebp+arg_10] ebx +
jnz loc_103F075  +
push dword ptr [esi]  +
push 40h  +
call ds:GlobalAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_103F091  +
push [ebp+var_10]  +
push [ebp+hMem]  +
push esi  +
call memcpy  +
add esp 0Ch +
push [ebp+hMem]  +
call ds:GlobalFree  +
push esi  +
call sub_100AFAD  +
movzx ebx ax +
mov eax [esi+14h] +
add ebx esi +
add ebx [esi] +
xor ecx ecx +
mov [ebp+arg_4] eax +
cmp [ebp+arg_10] ecx +
jnz loc_103F0E0  +
movzx eax word ptr [ebp+var_48] +
mov edi [ebp+arg_18] +
push ecx  +
push esi  +
push ebx  +
push eax  +
push ecx  +
push [ebp+arg_0]  +
push edi  +
call ds:GetDIBits  +
test eax eax +
jz loc_103F163  +
mov eax [ebp+arg_4] +
xor ebx ebx +
mov [esi+14h] eax +
cmp [ebp+arg_10] ebx +
jnz loc_103F19A  +
cmp [ebp+arg_1C] ebx +
jz loc_102EFC3  +
push [ebp+arg_1C]  +
push edi  +
call ds:SelectObject  +
cmp [ebp+arg_C] ebx +
jnz loc_103F1A2  +
push [ebp+var_C]  +
call ds:DeleteObject  +
push edi  +
call ds:DeleteDC  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
mov eax [eax+4] +
mov [ebp+var_8] eax +
jmp loc_102EDDD  +
***
mov ecx [eax+8] +
or [esi+2Ch] ecx +
mov ecx dword_108AF30 +
cmp eax ecx +
jz loc_103DCFD  +
mov eax [esi+4] +
cmp eax dword_108A1FC +
jnz loc_102F015  +
mov dword_108A1FC edi +
call sub_10049FD  +
mov [ebp+var_4] edi +
cmp [esi+24h] edi +
jnz loc_103DD0F  +
push ebx  +
lea ecx [esi+10h] +
call sub_102F0C9  +
mov edi ds:SelectObject +
mov [ebp+var_8] eax +
mov eax [esi+4] +
push dword ptr [eax+18h]  +
mov ebx [eax+14h] +
push dword ptr [eax+0Ch]  +
call edi  +
mov eax [esi+4] +
push dword ptr [eax+40h]  +
push dword ptr [eax+3Ch]  +
lea eax [ebp+var_C] +
push eax  +
push 0  +
push dword_108B1D4  +
push [ebp+var_8]  +
push [ebp+var_4]  +
push ebx  +
call sub_102EDC2  +
mov ebx eax +
mov eax [esi+4] +
push dword ptr [eax+14h]  +
push dword ptr [eax+0Ch]  +
call edi  +
xor edi edi +
cmp ebx edi +
jz loc_103DD34  +
cmp [esi+30h] edi +
jz loc_102F08A  +
mov ecx esi +
call sub_1012405  +
mov eax [ebp+var_C] +
mov [esi+34h] edi +
mov [esi+30h] ebx +
mov [esi+38h] eax +
cmp [ebp+arg_0] edi +
jz loc_102F0A1  +
mov eax [esi+4] +
mov [eax+8] edi +
xor eax eax +
inc eax  +
pop ebx  +
jmp loc_10123FA  +
***
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+64h]  +
cmp dword_108B190 0 +
jz loc_10123B3  +
jmp loc_1040DE0  +
***
mov edx ecx +
mov eax [edx] +
sub eax 0 +
jz loc_103DBE1  +
dec eax  +
jz loc_103D159  +
dec eax  +
jz loc_103D155  +
dec eax  +
dec eax  +
jnz loc_103D151  +
push esi  +
push edi  +
push 4  +
xor eax eax +
pop ecx  +
mov edi offset dword_1011FA8 +
lea esi [edx+4] +
cmps   +
setnz al  +
pop edi  +
pop esi  +
dec eax  +
and eax 0FFFFFFF0h +
add eax 18h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 238h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
mov eax [ebp+arg_0] +
mov [ebp+var_230] ecx +
mov ecx [ebp+arg_10] +
mov [ebp+var_224] ecx +
mov ecx [ebp+arg_14] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_4] +
mov [ebp+var_238] ecx +
mov ecx [ebp+arg_18] +
push edi  +
mov [ebp+var_22C] ecx +
mov ecx [ebp+arg_1C] +
push eax  +
lea edi [ebp+FileName] +
mov [ebp+var_228] eax +
mov [ebp+var_234] ecx +
call sub_102F46E  +
xor edi edi +
mov [ebp+var_220] eax +
cmp dword_108B34C edi +
jnz loc_102F1A5  +
push [ebp+var_238]  +
mov edx [ebp+var_224] +
push [ebp+var_230]  +
lea eax [ebp+FileName] +
push eax  +
mov ecx ebx +
call sub_102F587  +
mov [ebp+var_220] eax +
cmp [ebp+var_220] edi +
jz loc_102F28E  +
cmp esi edi +
jz loc_102F1C9  +
cmp [esi] di +
jz loc_102F1C9  +
push esi  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_102F1C9  +
xor edi edi +
inc edi  +
push ebx  +
push [ebp+arg_20]  +
lea eax [ebp+FileName] +
push [ebp+var_234]  +
push [ebp+var_22C]  +
push edi  +
push [ebp+var_230]  +
push eax  +
push esi  +
call sub_102F2AA  +
mov [ebp+var_220] eax +
test eax eax +
jz loc_1043A40  +
push edi  +
push esi  +
push [ebp+var_228]  +
lea ecx [ebp+FileName] +
call sub_102F39B  +
mov [ebp+var_220] eax +
test eax eax +
jz loc_1043A40  +
lea eax [ebp+var_224] +
push eax  +
push [ebp+arg_20]  +
mov esi offset dword_1011F98 +
push [ebp+var_234]  +
lea edi [ebp+var_21C] +
push [ebp+var_22C]  +
movs   +
push [ebp+var_238]  +
movs   +
push [ebp+var_224]  +
lea eax [ebp+var_21C] +
movs   +
push eax  +
push [ebp+var_228]  +
movs   +
call sub_1012D56  +
push eax  +
mov ecx ebx +
call sub_1015A4D  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_21C] +
movs   +
movs   +
movs   +
lea ecx [ebx+10h] +
movs   +
call sub_102E962  +
push [ebp+var_228]  +
mov ecx offset unk_108B32C +
call ??4CString@@QAEABV0@PBG@Z  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_220] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
inc esi  +
cmp [ebp+arg_C] 0 +
jz loc_103C670  +
push [ebp+arg_1C]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102F805  +
test eax eax +
jz loc_103C670  +
mov eax esi +
pop esi  +
pop ebp  +
retn 20h  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_102E27C +
and dword ptr [ebp-4] 0 +
lea ecx [esi+10h] +
call ??1CString@@QAE@XZ  +
mov dword ptr [esi] offset off_10023C4 +
call sub_1002061  +
retn   +
***
mov ecx ebx +
call sub_1012405  +
jmp loc_1015ADC  +
cmp edx 7Ch +
jz loc_1015A79  +
jmp loc_1015AF0  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CException@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea edi [esi+10h] +
mov ecx edi +
mov dword ptr [esi] offset off_102E27C +
call ??0CString@@QAE@XZ  +
mov eax [ebp+8] +
push dword ptr [ebp+10h]  +
mov [esi+8] eax +
mov eax [ebp+0Ch] +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
mov [esi+0Ch] eax +
call ??4CString@@QAEABV0@PBG@Z  +
mov eax esi +
call sub_1002061  +
retn 0Ch  +
***
mov eax ecx +
and dword ptr [eax+8] 0 +
mov byte ptr [eax+0Ch] 0 +
retn   +
***
call sub_1002370  +
mov ebx ecx +
xor edi edi +
mov [ebp-4] edi +
cmp [ebp+10h] edi +
jz loc_103C636  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_103C636  +
xor esi esi +
inc esi  +
lea ecx [ebp-2Ch] +
call sub_102F38B  +
mov [ebp-1Ch] edi +
mov [ebp-18h] edi +
mov byte ptr [ebp-4] 1 +
cmp esi edi +
jz loc_102F3FC  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-2Ch] +
call sub_102FCF7  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-1Ch] +
call sub_102FF44  +
cmp [ebp+10h] edi +
jz loc_102F40A  +
push ebx  +
push dword ptr [ebp+0Ch]  +
call sub_102FE20  +
cmp esi edi +
jz loc_103C63D  +
push 3  +
push dword ptr [ebp+8]  +
push ebx  +
call ds:MoveFileExW  +
mov esi eax +
cmp esi edi +
jz loc_102F43A  +
push dword ptr [ebp+8]  +
lea ecx [ebp-2Ch] +
call sub_102FD5A  +
push dword ptr [ebp+8]  +
lea ecx [ebp-1Ch] +
call sub_102FF1D  +
lea ecx [ebp-1Ch] +
call sub_102F451  +
mov eax esi +
call sub_1002061  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_102F463  +
push eax  +
call ds:LocalFree  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 414h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
mov esi 104h +
push esi  +
call ds:GetTempPathW  +
test eax eax +
jz loc_102F4DC  +
push [ebp+arg_0]  +
lea eax [ebp+pszPath] +
push esi  +
push eax  +
call sub_102F4F0  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
test eax eax +
jz loc_102F4DC  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathStripPathW  +
lea eax [ebp+pszPath] +
push eax  +
push 0  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
call ds:SHELL32_75  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100207A  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_102F520  +
cmp edx 7FFFFFFFh +
ja loc_102F520  +
test eax eax +
jl loc_102F51C  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_102F52C  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_102F506  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_102F578  +
cmp [ebp+arg_4] eax +
jz loc_102F55D  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_102F55D  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_102F540  +
test esi esi +
jz loc_102F578  +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_104327C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
jmp loc_102F561  +
***
call sub_102E8A8  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_102F5D9  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_102E894  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea ecx [ebp+var_14] +
mov [ebp+var_20] eax +
mov eax [ebp+arg_4] +
push ecx  +
xor ebx ebx +
push eax  +
mov edi edx +
mov [ebp+var_1C] ebx +
call sub_102EA18  +
test eax eax +
jz loc_102F6CE  +
mov eax [esi+4] +
push dword ptr [eax+24h]  +
lea ecx [ebp+var_30] +
push dword ptr [eax+14h]  +
call sub_100CDED  +
mov eax [ebp+var_28] +
mov [ebp+var_28] ebx +
cmp eax ebx +
jnz loc_1043556  +
mov eax [esi+4] +
cmp [eax+3Ch] ebx +
jle loc_102F66D  +
cmp [eax+40h] ebx +
jle loc_102F66D  +
mov esi eax +
fild  dword ptr [esi+40h] +
push ecx  +
fld  ds:dbl_102F6E8 +
push ecx  +
lea ecx [ebp+var_30] +
fmul st(1) st +
fxch  st(1) +
fstp  [ebp+var_18] +
fld  [ebp+var_18] +
fstp  [esp+44h+var_40] +
fimul  dword ptr [esi+3Ch] +
fstp  [ebp+var_18] +
fld  [ebp+var_18] +
fstp  [esp+44h+var_44] +
call sub_102F7C9  +
cmp [edi] ebx +
jz loc_102F698  +
mov eax [ebp+arg_8] +
mov eax [eax] +
cmp eax ebx +
jz loc_102F698  +
xor esi esi +
cmp eax ebx +
jbe loc_102F698  +
mov eax [edi] +
add eax ebx +
push eax  +
lea ecx [ebp+var_30] +
call sub_102F799  +
mov eax [ebp+arg_8] +
inc esi  +
add ebx 10h +
cmp esi [eax] +
jb loc_102F680  +
lea eax [ebp+var_14] +
push eax  +
call sub_102F720  +
mov ebx eax +
push ebx  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_20]  +
lea ecx [ebp+var_30] +
call sub_102F6F5  +
test eax eax +
jnz loc_102F6BE  +
mov [ebp+var_1C] 1 +
test ebx ebx +
jnz loc_102D18F  +
push [ebp+var_2C]  +
call GdipDisposeImage  +
mov eax [ebp+var_1C] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
call GdipSaveImageToFile  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_14] +
push eax  +
push offset dword_1011F88  +
xor ebx ebx +
call sub_102EA18  +
mov esi [ebp+arg_0] +
push 4  +
pop ecx  +
lea edi [ebp+var_14] +
xor eax eax +
cmps   +
jz loc_102D120  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 4  +
***
mov eax offset __imp_GdipSaveImageToFile +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetPropertyItem +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipBitmapSetResolution +
jmp loc_100ABE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi+4]  +
call GdipSetPropertyItem  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_4] +
push esi  +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
mov esi ecx +
fld  [ebp+arg_0] +
fstp  [esp+0Ch+var_C] +
push dword ptr [esi+4]  +
call GdipBitmapSetResolution  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1002155  +
mov eax [ebp+8] +
mov [ebp-25Ch] eax +
mov eax [ebp+0Ch] +
mov [ebp-258h] eax +
mov eax [ebp+10h] +
mov [ebp-270h] eax +
xor eax eax +
xor ebx ebx +
push 206h  +
mov [ebp-21Ch] ax +
lea eax [ebp-21Ah] +
push ebx  +
push eax  +
mov [ebp-268h] ebx +
call memset  +
add esp 0Ch +
mov [ebp-26Ch] ebx +
mov [ebp-4] ebx +
mov [ebp-240h] ebx +
mov esi ds:CoCreateInstance +
lea eax [ebp-240h] +
push eax  +
push offset stru_103001C  +
push 1  +
push ebx  +
mov edi offset stru_102FAD8 +
push edi  +
mov byte ptr [ebp-4] 1 +
call esi  +
test eax eax +
jl loc_1043818  +
mov [ebp-244h] ebx +
mov [ebp-250h] ebx +
mov eax [ebp-240h] +
mov ecx [eax] +
lea edx [ebp-244h] +
push edx  +
push ebx  +
mov esi 80000000h +
push esi  +
push ebx  +
push dword ptr [ebp-25Ch]  +
mov byte ptr [ebp-4] 3 +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax ebx +
jl loc_1043835  +
mov eax [ebp-240h] +
mov ecx [eax] +
lea edx [ebp-250h] +
push edx  +
push ebx  +
push esi  +
push ebx  +
push dword ptr [ebp-258h]  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax ebx +
jl loc_104385C  +
mov eax offset dword_1011F98 +
mov esi eax +
lea edi [ebp-23Ch] +
movs   +
movs   +
movs   +
movs   +
mov esi eax +
mov eax [ebp-244h] +
lea edi [ebp-22Ch] +
movs   +
movs   +
movs   +
lea edx [ebp-23Ch] +
push edx  +
movs   +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
cmp eax ebx +
jl loc_1043883  +
mov eax [ebp-250h] +
mov ecx [eax] +
lea edx [ebp-22Ch] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
cmp eax ebx +
jl loc_10438A1  +
push 4  +
pop ecx  +
lea edi [ebp-22Ch] +
lea esi [ebp-23Ch] +
xor eax eax +
cmps   +
jnz loc_10438BF  +
push dword ptr [ebp-258h]  +
lea edi [ebp-21Ch] +
call sub_102F46E  +
test eax eax +
jz loc_10438CE  +
mov [ebp-24Ch] ebx +
mov eax [ebp-240h] +
mov ecx [eax] +
lea edx [ebp-24Ch] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 4 +
call dword ptr [ecx+38h]  +
cmp eax ebx +
jl loc_10438DD  +
mov eax [ebp-24Ch] +
mov ecx [eax] +
mov edi 40000000h +
push edi  +
lea edx [ebp-21Ch] +
xor esi esi +
push edx  +
inc esi  +
push eax  +
mov [ebp-26Ch] esi +
call dword ptr [ecx+3Ch]  +
cmp eax ebx +
jl loc_10438FB  +
push ebx  +
xor eax eax +
push ebx  +
mov [ebp-260h] ebx +
lea edi [ebp-25Ch] +
stos   +
push dword ptr [ebp-25Ch]  +
mov eax [ebp-24Ch] +
push dword ptr [ebp-260h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
cmp eax ebx +
jl loc_104391A  +
mov [ebp-248h] ebx +
mov eax [ebp-240h] +
mov ecx [eax] +
lea edx [ebp-248h] +
push edx  +
mov edi offset nullsub_1 +
push edi  +
lea edx [ebp-22Ch] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 5 +
call dword ptr [ecx+20h]  +
cmp eax ebx +
jl loc_104393F  +
mov eax [ebp-248h] +
mov ecx [eax] +
push 2  +
push dword ptr [ebp-24Ch]  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax ebx +
jl loc_1043965  +
push dword ptr [ebp-248h]  +
push dword ptr [ebp-244h]  +
call sub_1030115  +
mov eax [ebp-244h] +
lea edx [ebp-264h] +
push edx  +
mov [ebp-264h] ebx +
mov [ebp-254h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
cmp eax ebx +
jl loc_1043984  +
mov eax [ebp-250h] +
mov ecx [eax] +
lea edx [ebp-254h] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
cmp eax ebx +
jl loc_10439A2  +
mov eax [ebp-264h] +
cmp eax [ebp-254h] +
jnz loc_10439C0  +
xor edi edi +
cmp edi [ebp-254h] +
jnb loc_102FF73  +
push dword ptr [ebp-270h]  +
mov edx [ebp-250h] +
mov ecx [ebp-244h] +
push edi  +
push dword ptr [ebp-240h]  +
push dword ptr [ebp-248h]  +
call sub_102FAFD  +
inc edi  +
jmp loc_102FAA4  +
***
call sub_10020DC  +
mov eax [ebp+8] +
mov [ebp-2Ch] eax +
mov eax [ebp+0Ch] +
mov [ebp-48h] eax +
mov eax [ebp+14h] +
xor ebx ebx +
mov esi ecx +
mov edi edx +
mov [ebp-54h] eax +
mov [ebp-30h] ebx +
mov [ebp-4] ebx +
mov [ebp-28h] ebx +
mov eax [esi] +
lea ecx [ebp-30h] +
push ecx  +
push dword ptr [ebp+10h]  +
mov byte ptr [ebp-4] 1 +
push esi  +
call dword ptr [eax+34h]  +
test eax eax +
jl loc_1043667  +
mov eax [edi] +
lea ecx [ebp-28h] +
push ecx  +
push dword ptr [ebp+10h]  +
push edi  +
call dword ptr [eax+34h]  +
test eax eax +
jl loc_104367F  +
mov [ebp-24h] ebx +
mov esi [ebp-2Ch] +
mov eax [esi] +
push ebx  +
lea ecx [ebp-24h] +
push ecx  +
push esi  +
mov byte ptr [ebp-4] 2 +
call dword ptr [eax+28h]  +
test eax eax +
jl loc_1043697  +
mov eax [ebp-24h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_10436AD  +
fldz   +
mov eax [ebp-28h] +
lea edx [ebp-44h] +
fst  qword ptr [ebp-50h] +
push edx  +
fstp  qword ptr [ebp-44h] +
mov ecx [eax] +
lea edx [ebp-50h] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_10436C2  +
fldz   +
fcom  qword ptr [ebp-50h] +
fnstsw  ax +
test ah 44h +
jnp loc_10436ED  +
fcomp  qword ptr [ebp-44h] +
fnstsw  ax +
test ah 44h +
jnp loc_10436EF  +
fld  qword ptr [ebp-44h] +
mov eax [ebp-24h] +
mov ecx [eax] +
sub esp 10h +
fstp  [esp+30h+var_28] +
fld  qword ptr [ebp-50h] +
fstp  [esp+30h+var_30] +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_10436DE  +
mov eax [ebp-28h] +
lea edx [ebp-38h] +
push edx  +
lea edx [ebp-34h] +
push edx  +
mov [ebp-34h] ebx +
mov [ebp-38h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_1043734  +
push dword ptr [ebp-38h]  +
mov eax [ebp-24h] +
push dword ptr [ebp-34h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_1043750  +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_104376A  +
mov eax [ebp-24h] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jl loc_1043782  +
lea eax [ebp-20h] +
push eax  +
call sub_103006D  +
cmp eax 0FFFFFFFFh +
jnz loc_1012F31  +
mov edi [ebp-48h] +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-30h]  +
call sub_1030115  +
mov [ebp-3Ch] ebx +
mov eax [ebp-30h] +
mov ecx [eax] +
lea edx [ebp-3Ch] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 4 +
call dword ptr [ecx+28h]  +
cmp eax ebx +
jge loc_102D1C0  +
mov eax [ebp-24h] +
mov ecx [eax] +
push ebx  +
push dword ptr [ebp-28h]  +
push eax  +
call dword ptr [ecx+2Ch]  +
test eax eax +
jl loc_10437DD  +
mov eax [ebp-24h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
test eax eax +
jl loc_10437F5  +
mov eax [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jnz loc_102D1B5  +
mov eax [ebp-24h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_102FCC9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-28h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_102FCD9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-30h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_102FCEA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1002119  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push [ebp+lpFileName]  +
mov esi ecx +
mov byte ptr [esi+0Ch] 0 +
call ds:GetFileAttributesW  +
mov [esi+8] eax +
cmp eax 0FFFFFFFFh +
jz loc_102FD50  +
lea ecx [ebp+var_10] +
call ??0CFile@@QAE@XZ  +
push 0  +
push 20h  +
push [ebp+lpFileName]  +
lea ecx [ebp+var_10] +
call ?Open@CFile@@UAEHPBGIPAVCFileException@@@Z  +
test eax eax +
jz loc_102FD48  +
push 0  +
push 0  +
push esi  +
push [ebp+hFile]  +
call ds:GetFileTime  +
test eax eax +
jz loc_102FD48  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [ebp+var_10] +
call ??1CFile@@UAE@XZ  +
pop esi  +
leave   +
retn 4  +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-1Ch] esi +
xor edi edi +
cmp byte ptr [esi+0Ch] 0 +
mov [ebp-4] edi +
jz loc_102FE13  +
push dword ptr [ebp+8]  +
call ds:GetFileAttributesW  +
mov [ebp-18h] eax +
cmp eax 0FFFFFFFFh +
jz loc_102FE13  +
mov ebx [esi+8] +
mov [ebp-14h] edi +
test bl 10h +
jnz loc_103DF4D  +
push ebx  +
push dword ptr [ebp+8]  +
call ds:SetFileAttributesW  +
test eax eax +
jz loc_103DF6A  +
mov esi ebx +
xor esi [ebp-18h] +
mov eax 4000h +
test esi eax +
jnz loc_103DF89  +
lea ecx [ebp-30h] +
call ??0CFile@@QAE@XZ  +
push edi  +
push 12h  +
push dword ptr [ebp+8]  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ?Open@CFile@@UAEHPBGIPAVCFileException@@@Z  +
cmp eax edi +
jz loc_102FE07  +
cmp [ebp-14h] edi +
jnz loc_102FDFB  +
push edi  +
push edi  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-2Ch]  +
call ds:SetFileTime  +
test eax eax +
jz loc_103DFAA  +
test esi 800h +
jnz loc_103DFC9  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ??1CFile@@UAE@XZ  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push (offset loc_1078F48+1)  +
mov eax large fs:0 +
push eax  +
push ecx  +
mov eax 1290h +
call sub_10130EB  +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_14] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov eax [ebp+arg_4] +
mov esi [ebp+arg_0] +
xor ebx ebx +
push 254h  +
mov [ebp+var_1294] eax +
lea eax [ebp+var_1268] +
push ebx  +
push eax  +
mov [ebp+var_1298] esi +
mov [ebp+var_126C] ebx +
call memset  +
or [ebp+hObject] 0FFFFFFFFh +
or [ebp+var_1270] 0FFFFFFFFh +
add esp 0Ch +
push ebx  +
lea eax [ebp+var_126C] +
push eax  +
push ebx  +
push esi  +
mov [ebp+var_4] ebx +
call ds:FindFirstStreamW  +
mov [ebp+hFindFile] eax +
cmp eax 0FFFFFFFFh +
jz loc_102FEE4  +
mov edi 0FFFFh +
mov esi 80070000h +
lea eax [ebp+var_126C] +
push eax  +
push [ebp+hFindFile]  +
call ds:FindNextStreamW  +
test eax eax +
jnz loc_103E03C  +
push [ebp+hFindFile]  +
call ds:FindClose  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_14] +
xor ecx ebp +
call sub_100207A  +
leave   +
retn 8  +
***
push eax  +
call ds:GlobalFree  +
mov [ebx] esi +
jmp loc_1015B79  +
call sub_10639CB  +
jmp loc_1015C31  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx] eax +
jz loc_102FF3B  +
push eax  +
push dword ptr [ecx+4]  +
push eax  +
push eax  +
push 4  +
push 1  +
push [ebp+pObjectName]  +
call ds:SetNamedSecurityInfoW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push esi  +
xor eax eax +
push eax  +
lea ecx [esi+4] +
push ecx  +
push eax  +
push eax  +
push 4  +
push 1  +
push [ebp+pObjectName]  +
call ds:GetNamedSecurityInfoW  +
test eax eax +
jnz loc_104354A  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ebp-248h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2Ch]  +
cmp eax ebx +
jl loc_10439CF  +
mov eax [ebp-248h] +
mov [ebp-268h] esi +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_102FFA1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-24Ch] +
mov byte ptr [ebp-4] 3 +
cmp eax ebx +
jz loc_102FFB5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-250h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_102FFC9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-244h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_102FFDD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-240h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_102FFF0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push 3  +
push dword ptr [ebp-258h]  +
lea eax [ebp-21Ch] +
push eax  +
call ds:MoveFileExW  +
mov esi eax +
cmp esi ebx +
jz loc_1043A07  +
mov eax esi +
call sub_100212D  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_103004E  +
mov ecx [eax] +
push esi  +
push offset dword_1030058  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push 4  +
pop eax  +
mov ecx eax +
mov edi offset dword_10300D0 +
mov esi edx +
xor ebx ebx +
cmps   +
jz loc_104353E  +
mov ecx eax +
mov edi offset dword_10300E0 +
mov esi edx +
xor ebx ebx +
cmps   +
jz loc_10300C7  +
mov ecx eax +
mov edi offset dword_10300F0 +
mov esi edx +
xor ebx ebx +
cmps   +
jz loc_1043546  +
mov ecx eax +
xor eax eax +
mov edi offset dword_1030100 +
mov esi edx +
cmps   +
setnz al  +
dec eax  +
and eax 101h +
dec eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
xor ebx ebx +
mov esi 80004003h +
cmp [ebp+8] ebx +
jz loc_103E000  +
cmp [ebp+0Ch] ebx +
jz loc_103E00B  +
push dword ptr [ebp+8]  +
lea ecx [ebp-10h] +
call sub_1030031  +
mov [ebp-4] ebx +
cmp [ebp-10h] ebx +
jz loc_1030189  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp+8] +
call sub_10301A7  +
mov byte ptr [ebp-4] 1 +
cmp [ebp+8] ebx +
jz loc_103E016  +
mov eax [ebp+8] +
push dword ptr [ebp-10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
test eax eax +
jl loc_103E025  +
mov eax [ebp+8] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1030189  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_103019A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_10301C4  +
mov ecx [eax] +
push esi  +
push offset dword_10301CC  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub eax 204h +
jz loc_10301EF  +
dec eax  +
jz loc_100A940  +
jmp loc_1040788  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+68h]  +
test al al +
jnz loc_10407BB  +
jmp loc_100A9BD  +
cmp eax edi +
jz loc_100A9DA  +
and dword_108A360 0 +
jmp loc_100A9E4  +
mov dword_108A364 1 +
jmp loc_100AA01  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
mov ecx offset unk_108B074 +
push [ebp+arg_0]  +
call sub_1030278  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A7EF  +
test eax eax +
jz loc_1030267  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A437  +
mov byte ptr [esi+8Ch] 1 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
mov ecx [esi+28h] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx esi +
mov dword ptr [esi+74h] 1 +
call sub_100A5AF  +
push 0  +
mov ecx esi +
call sub_1008489  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp dword ptr [ebp+0Ch] 0FFFFFFFFh +
push ebx  +
mov ebx ecx +
jz loc_1040117  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
mov ecx offset unk_108B074 +
push dword ptr [ebp+8]  +
call sub_103030D  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_100A437  +
mov byte ptr [esi+8Ch] 0 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
mov ecx [esi+28h] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
and dword ptr [esi+74h] 0 +
mov ecx esi +
call sub_100A5AF  +
push 0  +
mov ecx esi +
call sub_1008489  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
lea eax [ebp+0Ch] +
mov esi ecx +
mov ecx dword_108A24C +
push eax  +
call sub_100839D  +
fldz   +
push dword ptr [ebp+8]  +
fstp  dword ptr [ebp-4] +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-8] 0 +
lea eax [esi+0Ch] +
mov ecx esi +
mov [ebp-10h] eax +
call sub_100BFCD  +
mov ecx [esi+4] +
lea edx [ebp-14h] +
push edx  +
lea edx [ebp+0Ch] +
mov [ebp-0Ch] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+58h]  +
pop esi  +
leave   +
retn 0Ch  +
***
mov eax [eax] +
cmp eax edx +
jnz loc_1030D18  +
jmp loc_1030D34  +
***
fstp  st +
jmp loc_1033215  +
***
push 5  +
jmp loc_100A38E  +
***
mov [ebp-10h] ecx +
jmp loc_1033944  +
xor eax eax +
jmp loc_1033A08  +
xor eax eax +
jmp loc_10348BA  +
***
push 20h  +
jmp loc_102D500  +
***
mov eax offset __imp_GdipCreateBitmapFromStream +
jmp loc_100ABE3  +
***
call sub_100208C  +
mov ebx ecx +
xor esi esi +
cmp [ebx+40h] esi +
jz loc_103044A  +
push ebx  +
lea ecx [ebp-50h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
mov [ebp-4] esi +
cmp [ebp-4Ch] esi +
jz loc_1040231  +
mov eax [ebx+40h] +
cmp eax dword_108AF30 +
lea eax [ebp-1Ch] +
mov ecx ebx +
push eax  +
jz loc_103B584  +
call sub_10083F8  +
push 5  +
pop edi  +
push edi  +
push edi  +
lea eax [ebp-1Ch] +
push eax  +
call ds:InflateRect  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-50h] +
push eax  +
mov ecx ebx +
call sub_100F8B1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-50h] +
call ??1CClientDC@@UAE@XZ  +
call sub_1002061  +
retn   +
***
cmp dword ptr [ecx+20h] 0 +
jnz loc_103F729  +
mov eax [ecx+0Ch] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
and dword_108A238 0 +
cmp dword ptr [ecx+0Ch] 0 +
jz loc_1030485  +
mov eax [ebp+arg_0] +
push dword ptr [eax+40h]  +
call sub_100D2D1  +
pop ebp  +
retn 8  +
***
xor eax eax +
cmp [ecx+20h] eax +
setz al  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+8] 0 +
push esi  +
mov esi [ebp+arg_4] +
jz loc_10304C5  +
mov ecx [ebp+arg_0] +
mov dword_108A21C 1 +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_10354F7  +
add esi 10h +
push esi  +
call sub_100A8D8  +
pop esi  +
pop ebp  +
retn 8  +
***
push dword ptr [ebx+40h]  +
call sub_100D08B  +
jmp loc_100AA5C  +
push dword ptr [ebp-10h]  +
call sub_106217C  +
jmp loc_104061F  +
xor esi esi +
jmp loc_100A6CF  +
***
cmp dword ptr [esi+40h] 0 +
mov [eax] ecx +
jnz loc_100FDEF  +
inc dl  +
jmp loc_100FDEF  +
push 0  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
jmp loc_100FE08  +
cmp dword ptr [esi+40h] 1 +
mov [eax] ecx +
jnz loc_100FE00  +
mov dl 1 +
jmp loc_100FE00  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jl loc_103FBB1  +
cmp eax [ebp+arg_8] +
jg loc_103FBB9  +
pop ebp  +
retn 0Ch  +
***
cmp dword_108A24C eax +
jz locret_1009933  +
cmp dword_108CF00 eax +
jnz locret_1009933  +
mov ecx [ecx+14h] +
mov eax [ecx] +
jmp dword ptr [eax+40h]  +
***
push 0CC0020h  +
push ebx  +
push ebx  +
lea eax [ebp-0C4h] +
push eax  +
mov eax [ebp-40h] +
sub eax [ebp-48h] +
lea ecx [ebp-0A4h] +
push eax  +
mov eax [ebp-44h] +
sub eax [ebp-4Ch] +
push eax  +
push dword ptr [ebp-48h]  +
push dword ptr [ebp-4Ch]  +
call sub_100988D  +
push dword ptr [ebp-94h]  +
lea ecx [ebp-0C4h] +
call sub_10022BD  +
lea ecx [ebp-90h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
fld1   +
fcom  qword ptr [esi+50h] +
fnstsw  ax +
test ah 41h +
jz loc_104052E  +
jmp loc_1040548  +
***
call sub_100208C  +
push 24h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1030605  +
push dword ptr [ebp+8]  +
call sub_100DA3A  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi [ebp+arg_C] +
mov eax esi +
and eax 80000001h +
js loc_1045FC9  +
fild  [ebp+arg_C] +
fld  ds:dbl_1006830 +
jnz loc_1036DB0  +
fmul st(1) st +
lea eax [esi-1] +
fxch  st(1) +
mov [ebp+arg_C] eax +
fstp  [ebp+var_C] +
fimul  [ebp+arg_C] +
fstp  [ebp+arg_C] +
fld  [ebp+arg_C] +
fstp  [ebp+var_8] +
fld  [ebp+arg_C] +
push [ebp+arg_8]  +
fstp  [ebp+var_4] +
lea ecx [ebp+var_18] +
call sub_100B8C4  +
push 1  +
lea ecx [ebp+var_18] +
call sub_103094A  +
push esi  +
push esi  +
push 0  +
push 0  +
push [ebp+arg_4]  +
lea ecx [ebp+var_18] +
call sub_100B903  +
and [ebp+arg_4] 0 +
test esi esi +
jle loc_10306E9  +
fild  [ebp+arg_4] +
and [ebp+arg_C] 0 +
fsub  [ebp+var_4] +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
fld  st +
fmulp st(1) st +
fstp  [ebp+var_20] +
fild  [ebp+arg_C] +
fsub  [ebp+var_8] +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
fld  st +
fmulp st(1) st +
fadd  [ebp+var_20] +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
call _CIsqrt  +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
fld  [ebp+var_C] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jnp loc_10306F6  +
inc [ebp+arg_C]  +
cmp [ebp+arg_C] esi +
jl loc_10306A9  +
inc [ebp+arg_4]  +
cmp [ebp+arg_4] esi +
jl loc_1030692  +
push [ebp+var_18]  +
call GdipDeleteGraphics  +
pop esi  +
leave   +
retn 10h  +
mov ecx [ebp+arg_8] +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_4]  +
mov [ebp+var_10] 0FFFFFFh +
push [ebp+arg_C]  +
call sub_1030716  +
jmp loc_10306D9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
call GdipBitmapSetPixel  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_108B088 +
sub esp 24h +
test ecx ecx +
jz loc_10307EC  +
mov eax [ecx] +
call dword ptr [eax+44h]  +
mov [ebp+var_4] eax +
mov eax off_108A1D4 +
mov eax [eax+40h] +
push ebx  +
push esi  +
xor ebx ebx +
sub eax 28Ch +
push edi  +
jz loc_103FCC4  +
dec eax  +
jz loc_103FCC0  +
cmp dword_108B0E8 0 +
mov edi dword_108A1C8 +
jnz loc_10307A0  +
mov edi dword_108A224 +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10307AA  +
mov eax [eax+4] +
push eax  +
call sub_10305DB  +
push edi  +
lea ecx [ebp+var_24] +
mov esi eax +
call sub_100DF5E  +
push ebx  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+var_4]  +
call sub_100E79E  +
push 1  +
push 0  +
push [ebp+arg_4]  +
mov edi eax +
push edi  +
mov ecx esi +
call sub_10307FA  +
push edi  +
call sub_100DAD9  +
push esi  +
call sub_100D8C2  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
and [ebp+var_4] 0 +
jmp loc_103076C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103081D  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103084B  +
leave   +
retn 18h  +
***
call sub_100208C  +
mov [ebp-14h] ecx +
mov edi [ebp+14h] +
mov bl 1 +
test edi edi +
jle loc_10308F4  +
xor ecx ecx +
push 8  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10067E4  +
mov esi eax +
pop ecx  +
mov [ebp+14h] esi +
xor ebx ebx +
mov [ebp-4] ebx +
cmp esi ebx +
jz loc_10308FE  +
push offset sub_100BFF1  +
push edi  +
push 8  +
push esi  +
call sub_100A25C  +
mov [ebp+14h] esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
xor esi esi +
cmp [ebp+10h] ebx +
jnz loc_1045D96  +
mov ecx [ebp-14h] +
lea eax [ebp-10h] +
push eax  +
push esi  +
push dword ptr [ebp+14h]  +
mov [ebp-10h] ebx +
push edi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1030908  +
push dword ptr [ebp+20h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+1Ch]  +
mov eax [ecx] +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-10h]  +
push esi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-14h]  +
call dword ptr [eax+1Ch]  +
push dword ptr [ebp+14h]  +
mov bl al +
call sub_1006809  +
pop ecx  +
test esi esi +
jnz loc_1045DD8  +
mov al bl +
call sub_1002061  +
retn 1Ch  +
mov [ebp+14h] ebx +
jmp loc_103089D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov edx [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_4] +
mov [edx] ecx +
mov ecx [eax+4] +
push esi  +
push edi  +
mov [edx+4] ecx +
test ebx ebx +
jnz loc_1045D37  +
mov esi [ebp+arg_8] +
mov ecx [ebp+arg_14] +
xor edi edi +
inc edi  +
cmp esi edi +
mov [ecx] edi +
jg loc_1045D44  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipSetCompositingMode  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
or [ebp+var_4] 0FFFFFFFFh +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push dword ptr [esi]  +
call GdipGetSmoothingMode  +
push eax  +
mov ecx esi +
call sub_100B30D  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
cmp [ebp+arg_14] 0 +
jz loc_1045FD3  +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov ecx ebx +
call sub_1030979  +
mov edi [ebp+arg_10] +
mov [ebp+arg_0] eax +
lea eax [edi-1] +
cmp eax 0Fh +
jbe loc_1036E38  +
push 26200Ah  +
push edi  +
push edi  +
lea ecx [ebp+var_10] +
call sub_100B2C5  +
cmp [ebp+arg_0] 3 +
push edi  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_4]  +
push ebx  +
jnz loc_1036E92  +
call sub_103061D  +
push [ebp+arg_C]  +
lea eax [ebp+var_10] +
push [ebp+arg_8]  +
mov ecx ebx +
push eax  +
call sub_1030A2A  +
push [ebp+var_C]  +
call GdipDisposeImage  +
pop edi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
test eax eax +
jz loc_1030A57  +
mov eax [eax+4] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
push dword ptr [esi]  +
call GdipDrawImageI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_1030A3C  +
***
cmp [ecx+24h] eax +
jnz loc_100A2F8  +
jmp locret_100A2FB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
call GdipBitmapLockBits  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi+4]  +
call GdipBitmapUnlockBits  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ecx+20h] +
and [ebp+EventTrack.dwHoverTime] 0 +
mov [ebp+EventTrack.hwndTrack] eax +
lea eax [ebp+EventTrack] +
push eax  +
mov [ebp+EventTrack.cbSize] 10h +
mov [ebp+EventTrack.dwFlags] 2 +
call ds:TrackMouseEvent  +
leave   +
retn   +
***
call sub_100208C  +
push 8  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1030B3A  +
call sub_1030B45  +
call sub_1002061  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1030B58  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call GdipCreateMatrix  +
mov [esi+4] eax +
mov eax [ebp+var_4] +
mov [esi] eax +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1030B9E  +
push 1  +
call sub_1030BA7  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call GdipDeleteMatrix  +
test [ebp+arg_0] 1 +
jz loc_1030BC3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
push 48h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1030C07  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1030C14  +
call sub_1002061  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [ebp+8] +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+10h] +
mov dword ptr [esi] offset off_100D98C +
call sub_100C009  +
fld1   +
push ecx  +
fstp  [esp+8+var_8] +
lea eax [ebp+8] +
lea edi [esi+30h] +
mov ebx 0FF000000h +
push eax  +
mov ecx edi +
mov [ebp+8] ebx +
call sub_100B88A  +
mov [ebp+8] ebx +
lea eax [ebp+8] +
lea ebx [esi+38h] +
push eax  +
mov ecx ebx +
call sub_100B7C0  +
lea eax [ebp+8] +
push eax  +
lea ecx [esi+10h] +
mov byte ptr [ebp-4] 2 +
call sub_100DF03  +
lea eax [ebp+8] +
push eax  +
mov ecx ebx +
call sub_100DFBD  +
fild  dword ptr [esi+4] +
push ecx  +
mov ecx edi +
fstp  [esp+8+var_8] +
call sub_100DFEF  +
push ebx  +
mov ecx edi +
call sub_100E022  +
mov eax esi +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset unk_108AF60 +
pop ebp  +
jmp loc_1030CC3  +
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 428h +
pop ebp  +
jmp loc_1030CD6  +
push 10h  +
mov eax offset loc_107EFB0 +
call sub_100208C  +
mov esi ecx +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
xor edi edi +
call sub_100639D  +
mov esi [esi+4] +
mov eax [ebp-10h] +
cmp eax esi +
jz loc_1030D3C  +
add eax 10h +
push eax  +
lea ecx [ebp-1Ch] +
call sub_100CCE5  +
mov edx [ebp-18h] +
mov eax [edx] +
mov [ebp-4] edi +
cmp eax edx +
jz loc_1030D34  +
mov ecx [ebp+0Ch] +
mov esi [eax+8] +
cmp ecx [esi] +
jl loc_1030393  +
cmp ecx [esi+4] +
jg loc_1030393  +
push esi  +
call sub_100A36C  +
mov edi esi +
lea ecx [ebp-1Ch] +
call sub_100BAC8  +
mov eax edi +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push edi  +
mov edi ecx +
cmp [ebp+0Ch] ebx +
jnz loc_1030E3B  +
push esi  +
mov esi 5399h +
cmp [ebp+8] esi +
jnz loc_1039E9A  +
mov ecx [edi+4] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
push eax  +
push offset off_1006FF0  +
call ?AfxDynamicDownCast@@YAPAVCObject@@PAUCRuntimeClass@@PAV1@@Z  +
pop ecx  +
pop ecx  +
mov ecx eax +
mov [ebp+0Ch] ecx +
cmp ecx ebx +
jz loc_1030E3A  +
call sub_1006E76  +
cmp [edi+8] eax +
setnz byte ptr [ebp+0Bh]  +
cmp [ebp+14h] ebx +
jz loc_1030E19  +
push ebx  +
push dword ptr [ebp+14h]  +
call ds:PropVariantToUInt32WithDefault  +
add eax 28Bh +
cmp [edi+8] eax +
jz loc_1030E19  +
mov [edi+8] eax +
mov byte ptr [ebp+0Bh] 1 +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_100213C  +
push 4  +
pop ebx  +
push ebx  +
push esi  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_100FA80  +
push ebx  +
push esi  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_100FA94  +
push ebx  +
push esi  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_100FB5C  +
push ebx  +
push esi  +
mov ecx eax +
call sub_1009E6B  +
xor ebx ebx +
cmp byte ptr [ebp+0Bh] 0 +
jz loc_1030E3A  +
cmp dword ptr [edi+8] 28Ah +
jz loc_1044745  +
mov ecx [ebp+0Ch] +
mov eax [ecx] +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [edi+8]  +
call dword ptr [eax+14h]  +
pop esi  +
pop edi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 14h  +
***
push dword ptr [esi+0Ch]  +
call sub_1030EB1  +
mov [esi+14h] eax +
jmp loc_100A389  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call sub_100CC88  +
mov edi eax +
test edi edi +
jz loc_1030E74  +
mov ecx [esi+14h] +
push dword ptr [esi+54h]  +
mov eax [ecx] +
call dword ptr [eax+24h]  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] al +
jz loc_1030E8D  +
mov eax [ecx+58h] +
pop ebp  +
retn 4  +
***
push dword ptr [esi+8]  +
call sub_1030EB1  +
mov [esi+10h] eax +
jmp loc_100A37F  +
***
call sub_100208C  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
movzx eax word ptr [ebp+8] +
push offset aImage  +
push eax  +
push dword_108B434  +
call SHLWAPI_628  +
test eax eax +
jl loc_1030F14  +
push 0  +
push dword ptr [ebp-10h]  +
call sub_1030F45  +
mov esi eax +
test esi esi +
jz loc_1030F14  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
mov dword ptr [ebp+8] 0FFFFFFh +
call sub_1010018  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi [ebp-14h] +
test eax eax +
jz loc_1030F28  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_104450F  +
mov ecx eax +
pop ebp  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push [ebp+arg_0]  +
mov dword ptr [esi] offset off_100B22C +
jnz loc_1044505  +
call GdipCreateBitmapFromStream  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset unk_108AF60 +
pop ebp  +
jmp loc_1030FBC  +
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 428h +
pop ebp  +
jmp loc_1030FCF  +
push 10h  +
mov eax offset loc_107EFB0 +
call sub_100208C  +
mov esi ecx +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_100639D  +
mov esi [esi+4] +
mov eax [ebp-10h] +
cmp eax esi +
jz loc_1031021  +
add eax 10h +
push eax  +
lea ecx [ebp-1Ch] +
call sub_100CCE5  +
mov edi [ebp-18h] +
and dword ptr [ebp-4] 0 +
mov esi [edi] +
cmp esi edi +
jz loc_1031019  +
push dword ptr [esi+8]  +
call sub_100A36C  +
mov esi [esi] +
jmp loc_1031009  +
***
lea ecx [ebp-1Ch] +
call sub_100BAC8  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
sub ecx 21005h +
jz loc_10334F2  +
dec ecx  +
jz loc_10334EB  +
sub ecx 802h +
jz loc_10334E4  +
sub ecx 801h +
jz loc_10334DD  +
sub ecx 240001h +
jnz loc_103106E  +
push 4  +
pop eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp ecx 1 +
jz loc_10310B0  +
cmp ecx 2 +
jz loc_10310A9  +
cmp ecx 3 +
jz loc_10310A2  +
cmp ecx 4 +
jnz loc_1045F56  +
mov eax 26200Ah +
pop ebp  +
retn 4  +
mov eax 21808h +
jmp loc_103109E  +
mov eax 21006h +
jmp loc_103109E  +
mov eax 21005h +
jmp loc_103109E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp byte ptr [ecx+40h] 0 +
mov eax [ecx+4] +
mov [ebp-8] eax +
jz locret_1031132  +
fild  dword ptr [ebp-8] +
fstp  dword ptr [ebp-4] +
fld  dword ptr [ecx+44h] +
fldz   +
fsubrp st(1) st +
fmul  dword ptr [ecx+48h] +
fadd  dword ptr [ebp-4] +
fstp  dword ptr [ebp-8] +
fld  dword ptr [ebp-8] +
fabs   +
fstp  dword ptr [ebp-8] +
fld  dword ptr [ebp-8] +
fstp  dword ptr [ebp-8] +
fld  dword ptr [ecx+44h] +
fld1   +
fsubrp st(1) st +
fmul  dword ptr [ecx+48h] +
fadd  dword ptr [ebp-4] +
fstp  dword ptr [ebp-4] +
fld  dword ptr [ebp-4] +
fabs   +
fstp  dword ptr [ebp-4] +
fld  dword ptr [ebp-4] +
fstp  dword ptr [ebp-4] +
fld  dword ptr [ebp-8] +
fld  dword ptr [ebp-4] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jnp loc_1045F81  +
fld  dword ptr [ebp-4] +
fstp  dword ptr [ebp-8] +
fld  dword ptr [ebp-8] +
call _ftol2_sse  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1031164 +
call sub_100C2C1  +
test byte ptr [ebp+8] 1 +
jz loc_1031159  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103125F  +
test [ebp+arg_0] 1 +
jz loc_1031253  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10311B8 +
mov ecx [esi+0A8h] +
xor eax eax +
inc eax  +
mov [ebp-4] eax +
test ecx ecx +
jz loc_103128B  +
mov edx [ecx] +
push eax  +
call dword ptr [edx]  +
lea ecx [esi+60h] +
mov byte ptr [ebp-4] 0 +
mov dword ptr [ecx] offset off_1031164 +
call sub_100C2C1  +
mov ecx esi +
call sub_10312AF  +
call sub_1002061  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100E8C0 +
push dword ptr [esi+18h]  +
mov dword ptr [esi+14h] offset off_100B384 +
call GdipDeleteBrush  +
push dword ptr [esi+0Ch]  +
call GdipDeletePen  +
mov dword ptr [esi] offset off_100DB4C +
pop esi  +
retn   +
***
call sub_100208C  +
push dword ptr [ebp+10h]  +
call sub_1031077  +
mov esi eax +
xor eax eax +
test esi esi +
jz loc_103131B  +
push 30h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1031323  +
push esi  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_103132C  +
call sub_1002061  +
retn 0Ch  +
xor eax eax +
jmp loc_103131B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_4] +
mov esi ecx +
push edi  +
push ebx  +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_100C21C +
call sub_100B2C5  +
push [ebp+arg_8]  +
xor eax eax +
mov [esi+14h] eax +
mov [esi+18h] ebx +
mov [esi+1Ch] edi +
mov [esi+28h] eax +
mov [esi+2Ch] eax +
call sub_103102E  +
push [ebp+arg_8]  +
mov [esi+24h] eax +
call sub_1031384  +
mov [esi+20h] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp ecx 21005h +
jl loc_10313B9  +
cmp ecx 21006h +
jle loc_10313C1  +
cmp ecx 21808h +
jz loc_10313BD  +
cmp ecx 22009h +
jz loc_10313B6  +
cmp ecx 26200Ah +
jnz loc_10313B9  +
push 20h  +
pop eax  +
pop ebp  +
retn 4  +
push 18h  +
jmp loc_10313B8  +
push 10h  +
jmp loc_10313B8  +
***
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov dword ptr [ebp-4] 1 +
test ecx ecx +
jz loc_10313EF  +
push esi  +
call sub_10313F8  +
mov edi eax +
jmp loc_100DCC8  +
xor eax eax +
jmp loc_100DCAA  +
xor eax eax +
jmp loc_10313E1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
xor ebx ebx +
lea eax [edi+4] +
push eax  +
lea ecx [esi+14h] +
mov [esi+4] ebx +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov [esi+10h] ebx +
call sub_100B8C4  +
mov [esi+1Ch] edi +
pop edi  +
mov [esi+20h] ebx +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call GdipCreateRegionRectI  +
mov [esi+4] eax +
mov eax [ebp+var_4] +
mov [esi] eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
call sub_100208C  +
mov ebx ecx +
mov esi [ebp+0Ch] +
mov ecx esi +
call sub_100DC54  +
mov ecx esi +
mov edi eax +
call sub_100DC3F  +
mov ecx [esi+4] +
mov edx [esi] +
mov [ebp-1Ch] eax +
lea eax [ebp-24h] +
mov [ebp-20h] ecx +
push eax  +
lea ecx [ebp-14h] +
mov [ebp-24h] edx +
mov [ebp-18h] edi +
call sub_1031433  +
mov ecx [ebp+8] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-14h] +
push edx  +
push ebx  +
call dword ptr [eax+24h]  +
push dword ptr [ebp-14h]  +
mov bl al +
call GdipDeleteRegion  +
mov al bl +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
add ecx 38h +
push ecx  +
push [ebp+arg_0]  +
call sub_10314FD  +
mov al 1 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_4]  +
add ecx 14h +
call sub_103151E  +
mov al 1 +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push dword ptr [eax]  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipFillRegion  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 8  +
***
lea ecx [ebp+var_4] +
call sub_100C2F0  +
mov eax [ebp+var_4] +
cmp eax dword_108B3CC +
jz loc_100C285  +
jmp loc_1031560  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
fld  dword ptr [edx] +
mov ecx [ebp+arg_0] +
fsub  dword ptr [ecx] +
fstp  [ebp+arg_4] +
fldz   +
fcom  [ebp+arg_4] +
fnstsw  ax +
test ah 44h +
mov eax [ebp+arg_C] +
jnp loc_104625C  +
cmp [ebp+arg_14] 0 +
fstp  st +
fld  [ebp+arg_4] +
push esi  +
fadd  ds:dbl_1032EE8 +
mov esi [ebp+arg_8] +
fld1   +
fdivrp st(1) st +
fstp  [ebp+arg_4] +
fild  [ebp+arg_10] +
fsub  dword ptr [ecx] +
fstp  [ebp+arg_0] +
fld  dword ptr [edx+8] +
fsub  dword ptr [ecx+8] +
fmul  [ebp+arg_4] +
fstp  dword ptr [eax+8] +
fld  dword ptr [edx+0Ch] +
fsub  dword ptr [ecx+0Ch] +
fmul  [ebp+arg_4] +
fstp  dword ptr [eax+0Ch] +
fld  dword ptr [eax+8] +
fmul  [ebp+arg_0] +
fadd  dword ptr [ecx+8] +
fstp  dword ptr [esi+8] +
fld  dword ptr [eax+0Ch] +
fmul  [ebp+arg_0] +
fadd  dword ptr [ecx+0Ch] +
fstp  dword ptr [esi+0Ch] +
jz loc_1031615  +
fld  dword ptr [edx+10h] +
fsub  dword ptr [ecx+10h] +
fmul  [ebp+arg_4] +
fstp  dword ptr [ebp+arg_14] +
fld  dword ptr [ebp+arg_14] +
fstp  dword ptr [eax+10h] +
fld  dword ptr [ebp+arg_14] +
fmul  [ebp+arg_0] +
fadd  dword ptr [ecx+10h] +
fstp  dword ptr [esi+10h] +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
fld  [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
fst  [ebp+arg_0] +
mov edx [esi+1Ch] +
cmp edx 1 +
jg loc_104628C  +
fstp  st +
fld  [ebp+arg_0] +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
mov eax [esi+10h] +
mov [ebp+arg_C] eax +
mov eax [ebp+arg_4] +
fld  dword ptr [eax] +
push edi  +
call _ftol2  +
mov ebx eax +
mov eax [ebp+arg_8] +
fld  dword ptr [eax] +
call _ftol2  +
mov ecx [ebp+arg_4] +
fld  dword ptr [ecx] +
mov ecx ebx +
mov edi eax +
lea eax [edi+1] +
mov [ebp+arg_4] ecx +
fild  [ebp+arg_4] +
lea edx [ebx+1] +
mov [ebp+var_C] eax +
test ecx ecx +
jl loc_104630C  +
mov ecx [ebp+arg_8] +
fsubp st(1) st +
fstp  [ebp+var_4] +
fld  dword ptr [ecx] +
mov ecx edi +
mov [ebp+arg_4] ecx +
fild  [ebp+arg_4] +
test ecx ecx +
jl loc_1046317  +
fsubp st(1) st +
fstp  [ebp+arg_4] +
fld  [ebp+var_4] +
fld1   +
fld  st +
fsubrp st(2) st +
fxch  st(1) +
fstp  [ebp+var_8] +
fsub  [ebp+arg_4] +
fstp  [ebp+arg_8] +
cmp edx [esi] +
jnb loc_1046322  +
cmp eax [esi+4] +
jnb loc_1046328  +
fld  [ebp+arg_8] +
mov eax [esi+8] +
fmul  [ebp+var_8] +
mov ecx eax +
imul eax [ebp+var_C] +
fstp  [ebp+var_14] +
fld  [ebp+arg_8] +
fmul  [ebp+var_4] +
fstp  [ebp+var_10] +
fld  [ebp+var_8] +
imul ecx edi +
fmul  [ebp+arg_4] +
fstp  [ebp+var_8] +
fld  [ebp+arg_4] +
fmul  [ebp+var_4] +
fstp  [ebp+var_4] +
shl edx 2 +
lea edi [edx+ecx] +
add edi [ebp+arg_C] +
shl ebx 2 +
lea esi [ebx+ecx] +
movzx ecx byte ptr [edi] +
add esi [ebp+arg_C] +
mov [ebp+arg_8] ecx +
movzx ecx byte ptr [esi] +
fild  [ebp+arg_8] +
fld  [ebp+var_10] +
add ebx eax +
add ebx [ebp+arg_C] +
fld  st +
fmulp st(2) st +
mov [ebp+arg_8] ecx +
movzx ecx byte ptr [ebx] +
fild  [ebp+arg_8] +
fld  [ebp+var_14] +
add eax edx +
add eax [ebp+arg_C] +
fld  st +
fmulp st(2) st +
mov [ebp+arg_8] ecx +
fxch  st(3) +
mov [ebp+arg_4] eax +
movzx eax byte ptr [eax] +
faddp st(1) st +
fild  [ebp+arg_8] +
fld  [ebp+var_8] +
mov [ebp+arg_8] eax +
fld  st +
fmulp st(2) st +
fxch  st(2) +
faddp st(1) st +
fild  [ebp+arg_8] +
fld  [ebp+var_4] +
fld  st +
fmulp st(2) st +
fxch  st(2) +
faddp st(1) st +
call _ftol2  +
mov ecx [ebp+arg_0] +
mov [ecx] al +
movzx eax byte ptr [edi+1] +
mov [ebp+arg_8] eax +
movzx eax byte ptr [esi+1] +
fild  [ebp+arg_8] +
mov [ebp+arg_8] eax +
fld  st(3) +
movzx eax byte ptr [ebx+1] +
fmulp st(1) st +
fild  [ebp+arg_8] +
fld  st(5) +
mov [ebp+arg_8] eax +
mov eax [ebp+arg_4] +
movzx eax byte ptr [eax+1] +
fmulp st(1) st +
faddp st(1) st +
fild  [ebp+arg_8] +
mov [ebp+arg_8] eax +
fld  st(3) +
fmulp st(1) st +
faddp st(1) st +
fild  [ebp+arg_8] +
fld  st(2) +
fmulp st(1) st +
faddp st(1) st +
call _ftol2  +
mov ecx [ebp+arg_0] +
mov [ecx+1] al +
movzx eax byte ptr [edi+2] +
mov [ebp+arg_8] eax +
movzx eax byte ptr [esi+2] +
fild  [ebp+arg_8] +
mov [ebp+arg_8] eax +
fld  st(3) +
movzx eax byte ptr [ebx+2] +
fmulp st(1) st +
fild  [ebp+arg_8] +
fld  st(5) +
mov [ebp+arg_8] eax +
mov eax [ebp+arg_4] +
movzx eax byte ptr [eax+2] +
fmulp st(1) st +
faddp st(1) st +
fild  [ebp+arg_8] +
mov [ebp+arg_8] eax +
fld  st(3) +
fmulp st(1) st +
faddp st(1) st +
fild  [ebp+arg_8] +
fld  st(2) +
fmulp st(1) st +
faddp st(1) st +
call _ftol2  +
mov ecx [ebp+arg_0] +
mov [ecx+2] al +
movzx eax byte ptr [edi+3] +
mov [ebp+arg_8] eax +
movzx eax byte ptr [esi+3] +
fild  [ebp+arg_8] +
mov [ebp+arg_8] eax +
movzx eax byte ptr [ebx+3] +
fmulp st(3) st +
fild  [ebp+arg_8] +
mov [ebp+arg_8] eax +
mov eax [ebp+arg_4] +
movzx eax byte ptr [eax+3] +
fmulp st(4) st +
fxch  st(2) +
faddp st(3) st +
mov [ebp+arg_4] eax +
fild  [ebp+arg_8] +
fmulp st(1) st +
faddp st(2) st +
fild  [ebp+arg_4] +
fmulp st(1) st +
faddp st(1) st +
call _ftol2  +
mov ecx [ebp+arg_0] +
pop edi  +
pop esi  +
mov [ecx+3] al +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
fld  dword ptr [eax] +
fsub  dword ptr [ecx] +
fstp  [ebp+arg_0] +
fld  dword ptr [eax+4] +
fsub  dword ptr [ecx+4] +
fstp  [ebp+arg_4] +
fld  [ebp+arg_4] +
fld  [ebp+arg_0] +
fld  st +
fmulp st(1) st +
fld  st(1) +
fmulp st(2) st +
faddp st(1) st +
fstp  [ebp+arg_4] +
fld  [ebp+arg_4] +
call _CIsqrt  +
fstp  [ebp+arg_4] +
fld  [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov edx [eax] +
mov ecx [ebp+arg_0] +
sub edx [ecx] +
mov eax [eax+4] +
sub eax [ecx+4] +
mov [ebp+arg_4] edx +
fild  [ebp+arg_4] +
mov [ebp+arg_4] eax +
fstp  [ebp+arg_0] +
fild  [ebp+arg_4] +
fstp  [ebp+arg_4] +
fld  [ebp+arg_4] +
fld  [ebp+arg_0] +
fld  st +
fmulp st(1) st +
fld  st(1) +
fmulp st(2) st +
faddp st(1) st +
fstp  [ebp+arg_4] +
fld  [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_4] +
fld  dword ptr [eax] +
mov ecx [ebp+arg_C] +
fmul  [ebp+arg_8] +
fstp  [ebp+var_8] +
fld  dword ptr [eax+4] +
mov eax [ebp+arg_0] +
fmul  [ebp+arg_8] +
fstp  [ebp+var_4] +
fld  dword ptr [eax] +
fadd  [ebp+var_8] +
fstp  [ebp+var_10] +
mov edx [ebp+var_10] +
fld  [ebp+var_4] +
fadd  dword ptr [eax+4] +
mov [ecx] edx +
fstp  [ebp+var_C] +
mov edx [ebp+var_C] +
mov [ecx+4] edx +
fld  dword ptr [eax] +
fsub  [ebp+var_8] +
fstp  [ebp+var_10] +
mov ecx [ebp+var_10] +
fld  dword ptr [eax+4] +
mov eax [ebp+arg_10] +
fsub  [ebp+var_4] +
mov [eax] ecx +
fstp  [ebp+var_C] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov al 1 +
leave   +
retn 14h  +
***
mov ecx [ebx] +
dec ecx  +
mov [ebp+arg_10] ecx +
jmp loc_1031E0A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
cmp [edi+0A8h] ebx +
jz loc_10472B1  +
mov eax [edi+94h] +
cmp eax ebx +
jg loc_103199D  +
jnz loc_10472B1  +
cmp [edi+0A4h] bl +
jz loc_10472B1  +
cmp [ebp+arg_8] bl +
jnz loc_10472B1  +
mov eax [edi+0A8h] +
mov esi [ebp+arg_4] +
add eax 4 +
mov [esi+20h] eax +
mov ecx [edi+0A8h] +
call sub_100BB97  +
mov [esi] eax +
mov ecx [edi+0A8h] +
call sub_100C000  +
mov [esi+4] eax +
mov eax [edi+0A8h] +
cmp [eax+44h] bl +
jz loc_1031A03  +
mov eax [eax+38h] +
mov [esi+10h] eax +
mov eax [edi+0A8h] +
mov eax [eax+3Ch] +
mov [esi+14h] eax +
mov eax [edi+0A8h] +
mov eax [eax+40h] +
mov [esi+18h] eax +
mov eax [esi+0Ch] +
cdq   +
idiv  dword ptr [esi] +
inc eax  +
mov [esi+1Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
cmp [ebp+var_2] 0 +
jz loc_100EBE0  +
push 4  +
lea ecx [ebp+rcDst] +
call sub_100DC54  +
push eax  +
lea ecx [ebp+rcDst] +
call sub_100DC3F  +
push eax  +
call sub_10312DE  +
mov esi eax +
push esi  +
call sub_100DC6A  +
push edi  +
push edi  +
lea ecx [ebp+rcDst] +
mov [ebp+var_8] eax +
call sub_100DC54  +
push eax  +
lea ecx [ebp+rcDst] +
call sub_100DC3F  +
mov ecx [ebp+var_8] +
push eax  +
push [ebp+rcDst.top]  +
push [ebp+rcDst.left]  +
push dword ptr [ebx+28h]  +
call sub_1031ADF  +
push [ebp+rcDst.top]  +
lea ecx [ebp+rcDst] +
push [ebp+rcDst.left]  +
call sub_100DC54  +
push eax  +
lea ecx [ebp+rcDst] +
call sub_100DC3F  +
mov ecx [ebp+arg_0] +
push eax  +
push edi  +
push edi  +
push esi  +
call sub_1031ADF  +
push esi  +
call sub_100C26D  +
push [ebp+var_8]  +
call sub_100D8C2  +
jmp loc_100EBE0  +
***
mov eax [ebp+arg_0] +
push 2  +
push [ebp+arg_10]  +
add eax 4 +
push [ebp+arg_C]  +
lea ecx [ebx+14h] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push eax  +
call sub_1032921  +
jmp loc_1031C7B  +
cmp ebx esi +
mov [ebp+arg_10] esi +
jg loc_1045F06  +
jmp loc_1031C57  +
cmp [ebp+arg_8] 0 +
jz loc_1031C57  +
jmp loc_1031C63  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
push ebx  +
mov ebx ecx +
mov ecx [ebx+1Ch] +
xor eax eax +
push esi  +
push edi  +
mov [ebp+var_C] ebx +
cmp ecx eax +
jz loc_1031A93  +
mov edx [ebp+arg_0] +
cmp [edx+14h] eax +
jnz loc_1031A93  +
mov esi [ebp+arg_4] +
cmp esi eax +
jl loc_1045E0F  +
mov edx [ebp+arg_8] +
cmp edx eax +
mov edi [ebp+arg_18] +
jl loc_1045E1C  +
cmp [ebp+arg_14] eax +
jl loc_1045E29  +
cmp edi eax +
jl loc_1045E39  +
call sub_100BB97  +
mov ecx [ebx+1Ch] +
mov [ebp+arg_18] eax +
call sub_100C000  +
mov ecx [ebp+arg_0] +
mov [ebp+arg_4] eax +
call sub_100BB97  +
mov ecx [ebp+arg_0] +
mov ebx eax +
call sub_100C000  +
mov ecx [ebp+arg_C] +
lea edx [esi+ecx] +
cmp edx ebx +
jg loc_1045E46  +
mov ebx [ebp+arg_10] +
mov edx [ebp+arg_8] +
add edx ebx +
cmp edx eax +
jg loc_1045E52  +
mov eax [ebp+arg_14] +
lea edx [eax+ecx] +
mov eax [ebp+arg_18] +
cmp edx eax +
jg loc_1045E5F  +
mov eax [ebp+arg_4] +
lea edx [ebx+edi] +
cmp edx eax +
jg loc_1045E6C  +
mov eax [ebp+arg_14] +
mov [ebp+var_20] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_2C] eax +
lea eax [ebp+var_60] +
push eax  +
mov [ebp+var_30] esi +
mov [ebp+var_1C] edi +
mov edi [ebp+var_C] +
mov esi 26200Ah +
push esi  +
mov [ebp+var_18] ecx +
mov [ebp+var_28] ecx +
mov ecx [edi+1Ch] +
push 2  +
lea eax [ebp+var_20] +
push eax  +
add ecx 4 +
mov [ebp+var_14] ebx +
mov [ebp+var_24] ebx +
call sub_1030A79  +
mov ecx [ebp+arg_0] +
mov [ebp+var_8] eax +
lea eax [ebp+var_48] +
push eax  +
push esi  +
push 1  +
lea eax [ebp+var_30] +
add ecx 4 +
push eax  +
mov [ebp+var_10] ecx +
call sub_1030A79  +
xor esi esi +
mov [ebp+arg_8] eax +
cmp [ebp+var_8] esi +
jnz loc_1031ACB  +
cmp eax esi +
jnz loc_1031C6C  +
lea ecx [edi+14h] +
call sub_10328A0  +
mov edx [ebp+var_50] +
mov edi [ebp+var_38] +
neg eax  +
sbb al al +
inc al  +
mov [ebp+arg_18] edx +
jz loc_1031ABB  +
cmp ebx esi +
mov [ebp+arg_8] esi +
jle loc_1031C57  +
mov esi [ebp+var_40] +
mov ecx [ebp+var_58] +
imul esi [ebp+arg_8] +
mov eax [ebp+arg_C] +
imul ecx [ebp+arg_8] +
test eax eax +
jle loc_1031C4F  +
mov [ebp+var_4] eax +
mov al [esi+edi+3] +
mov bl [edx+ecx+3] +
mov byte ptr [ebp+arg_14+3] al +
test al al +
ja loc_1031C82  +
add ecx 4 +
add esi 4 +
dec [ebp+var_4]  +
jnz loc_1031C32  +
mov ebx [ebp+arg_10] +
inc [ebp+arg_8]  +
cmp [ebp+arg_8] ebx +
jl loc_1031C1A  +
mov ecx [ebp+var_10] +
lea eax [ebp+var_48] +
push eax  +
call sub_1030AB2  +
cmp [ebp+var_8] 0 +
jnz loc_1031C7B  +
mov edi [ebp+var_C] +
mov ecx [edi+1Ch] +
lea eax [ebp+var_60] +
push eax  +
add ecx 4 +
call sub_1030AB2  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
cmp al 0FFh +
jz loc_1031C8E  +
test bl bl +
jnz loc_1045E78  +
mov bl [esi+edi] +
mov [edx+ecx] bl +
mov bl [esi+edi+1] +
mov [ecx+edx+1] bl +
mov bl [esi+edi+2] +
mov [ecx+edx+2] bl +
mov [edx+ecx+3] al +
jmp loc_1031C41  +
***
fld  dword ptr [esi] +
mov edx edi +
fstp  [ebp+var_4] +
jmp loc_1031D04  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0BCh +
fld  ds:flt_1031FA4 +
push ebx  +
mov ebx [ebp+arg_8] +
fstp  [ebp+var_4] +
push esi  +
push edi  +
push 5  +
lea eax [ebx+0Ch] +
pop ecx  +
mov esi eax +
lea edi [ebp+var_64] +
movs   +
push 5  +
pop ecx  +
mov esi eax +
lea edi [ebp+var_50] +
movs   +
mov ecx [ebx] +
xor edx edx +
xor edi edi +
test ecx ecx +
jle loc_1031D0C  +
lea esi [ebx+10h] +
fld  dword ptr [esi] +
fld  [ebp+var_4] +
fcompp st(1) st +
fnstsw  ax +
test ah 41h +
jz loc_1031CAA  +
inc edi  +
add esi 14h +
cmp edi ecx +
jl loc_1031CF6  +
fld  [ebp+var_4] +
mov [ebp+var_18] edx +
mov [ebp+var_10] edx +
mov [ebp+var_8] ecx +
call _ftol2_sse  +
fld  [ebp+var_4] +
mov [ebp+arg_8] eax +
fisub  [ebp+arg_8] +
fstp  [ebp+var_14] +
fld  [ebp+var_14] +
fcomp  ds:flt_1031FA0 +
fnstsw  ax +
test ah 41h +
jnz loc_1031D3C  +
inc [ebp+arg_8]  +
mov eax [ebp+arg_8] +
mov edi [ebp+arg_10] +
mov ecx [edi+20h] +
dec eax  +
mov [ebp+var_4] eax +
mov [ebp+var_C] eax +
call sub_100CFE8  +
mov ecx [edi+20h] +
mov esi eax +
call sub_100CFB1  +
mov ecx [edi+20h] +
and [ebp+var_2C] 0 +
and [ebp+var_28] 0 +
mov [ebp+var_24] eax +
lea eax [ebp+var_94] +
push eax  +
mov [ebp+var_20] esi +
mov esi 26200Ah +
push esi  +
push 1  +
lea eax [ebp+var_2C] +
push eax  +
call sub_1030A79  +
mov ecx dword_108A2B8 +
and [ebp+var_3C] 0 +
and [ebp+var_38] 0 +
mov [ebp+arg_10] eax +
mov eax dword_108A2B0 +
mov [ebp+var_34] eax +
mov eax dword_108A2AC +
mov [ebp+var_30] eax +
lea eax [ebp+var_7C] +
push eax  +
push esi  +
push 2  +
lea eax [ebp+var_3C] +
push eax  +
call sub_1030A79  +
mov ecx [ebp+arg_0] +
mov [ebp+var_14] eax +
call sub_10328A0  +
mov [ebp+var_1C] eax +
xor eax eax +
cmp [ebp+arg_10] eax +
jnz loc_1031FC1  +
cmp [ebp+var_14] eax +
jnz loc_1031FB2  +
cmp [ebp+var_8] eax +
jle loc_1031FB2  +
mov eax [ebp+var_C] +
cmp eax [ebp+arg_8] +
jge loc_1031E87  +
cmp [ebp+var_8] 0 +
jle loc_1031E87  +
mov eax [ebp+var_10] +
dec [ebp+var_8]  +
lea ecx [eax-1] +
mov [ebp+arg_10] ecx +
test ecx ecx +
jl loc_1031955  +
cmp eax 4 +
jge loc_1031E87  +
cmp [ebp+arg_10] 4 +
jge loc_1031E87  +
mov ecx [ebp+arg_10] +
imul eax eax +
push [ebp+arg_C]  +
imul ecx ecx +
push [ebp+arg_8]  +
lea esi [ebx+ecx] +
lea ecx [ebp+var_A8] +
push ecx  +
lea ecx [ebp+var_64] +
push ecx  +
lea ecx [esi+0Ch] +
push ecx  +
lea eax [eax+ebx+0Ch] +
push eax  +
call sub_1032E25  +
add esi 10h +
fld  dword ptr [esi] +
call _ftol2_sse  +
fld  dword ptr [esi] +
mov ecx eax +
mov [ebp+var_C] ecx +
fisub  [ebp+var_C] +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
fldz   +
fucom  st(1) +
fnstsw  ax +
fstp  st(1) +
test ah 44h +
jnp loc_104727C  +
fcomp  dword ptr [esi] +
fnstsw  ax +
test ah 41h +
jz loc_104727E  +
cmp ecx [ebp+arg_8] +
mov eax [ebp+arg_10] +
mov [ebp+var_10] eax +
jl loc_1031DEC  +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_8] +
jge loc_1031F2A  +
cmp [ebp+var_8] 0 +
jle loc_1031F2A  +
mov eax [ebp+var_18] +
dec [ebp+var_8]  +
lea ecx [eax+1] +
cmp ecx [ebx] +
mov [ebp+arg_10] ecx +
jge loc_10340D7  +
cmp eax 4 +
jge loc_1031F2A  +
cmp ecx 4 +
jge loc_1031F2A  +
push [ebp+arg_C]  +
imul ecx ecx +
imul eax eax +
push [ebp+arg_8]  +
lea esi [ebx+ecx] +
lea ecx [ebp+var_BC] +
push ecx  +
lea ecx [ebp+var_50] +
push ecx  +
lea ecx [esi+0Ch] +
push ecx  +
lea eax [eax+ebx+0Ch] +
push eax  +
call sub_1032E25  +
add esi 10h +
fld  dword ptr [esi] +
call _ftol2_sse  +
fld  dword ptr [esi] +
mov ecx eax +
mov [ebp+var_4] ecx +
fisub  [ebp+var_4] +
fstp  [ebp+var_18] +
fld  [ebp+var_18] +
fldz   +
fucom  st(1) +
fnstsw  ax +
fstp  st(1) +
test ah 44h +
jnp loc_1047287  +
fcomp  dword ptr [esi] +
fnstsw  ax +
test ah 41h +
jz loc_1047289  +
cmp ecx [ebp+arg_8] +
mov eax [ebp+arg_10] +
mov [ebp+var_18] eax +
jl loc_1031E93  +
mov esi [ebp+var_C] +
cmp [ebp+arg_8] esi +
jg loc_1031FA8  +
mov ecx [ebp+arg_8] +
cmp ecx [ebp+var_4] +
jg loc_1031FA8  +
fld  [ebp+var_64] +
push [ebp+var_1C]  +
fld  [ebp+var_50] +
fcompp st(1) st +
fnstsw  ax +
test ah 1 +
lea eax [ebp+var_7C] +
push eax  +
lea eax [ebp+var_94] +
push eax  +
push edi  +
push [ebp+arg_C]  +
jnz loc_10340E3  +
lea eax [ebp+var_50] +
push eax  +
lea eax [ebp+var_64] +
push eax  +
push ecx  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103300B  +
push [ebp+arg_C]  +
inc [ebp+arg_8]  +
lea eax [ebp+var_A8] +
push eax  +
lea eax [ebp+var_64] +
push eax  +
call sub_1033221  +
push [ebp+arg_C]  +
lea eax [ebp+var_BC] +
push eax  +
lea eax [ebp+var_50] +
push eax  +
call sub_1033221  +
jmp loc_1031F2D  +
cmp [ebp+var_8] 0 +
jg loc_1031DE0  +
mov ecx [edi+20h] +
lea eax [ebp+var_94] +
push eax  +
call sub_1030AB2  +
cmp [ebp+var_14] 0 +
pop edi  +
pop esi  +
pop ebx  +
jnz loc_1031FD9  +
mov ecx dword_108A2B8 +
lea eax [ebp+var_7C] +
push eax  +
call sub_1030AB2  +
mov al 1 +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
cmp byte ptr [ebp+arg_28] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+4] +
mov [ebp+var_1] 1 +
mov [ebp+var_8] eax +
jnz loc_1046C02  +
fild  [ebp+var_8] +
mov eax [ebp+arg_20] +
mov esi [ebp+arg_1C] +
fstp  [ebp+var_14] +
fld  [ebp+var_14] +
fmul  ds:dbl_1031558 +
fadd  ds:dbl_1031550 +
fstp  [ebp+var_10] +
fldz   +
fstp  dword ptr [eax] +
xor eax eax +
mov [esi] eax +
mov ecx dword_108C4A8 +
mov [ebp+arg_1C] eax +
mov [ebp+var_C] ecx +
mov [ebp+arg_28] eax +
cmp [ebp+arg_8] eax +
jnz loc_1046C0B  +
fld  [ebp+var_10] +
lea eax [ebp+arg_1C] +
push eax  +
lea eax [ebp+arg_28] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_10]  +
push ecx  +
push ecx  +
fstp  [esp+90h+var_8C] +
fild  dword ptr [edi+4] +
fstp  [esp+90h+var_90] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1032652  +
mov ecx [ebp+arg_1C] +
cmp ecx 1 +
jle loc_10323CC  +
xor edx edx +
push ebx  +
mov ebx dword_108C4B8 +
mov [ebp+var_2C] ebx +
mov [ebp+var_8] edx +
cmp [ebp+arg_28] edx +
jnz loc_1046C18  +
mov eax [edi+94h] +
cmp eax edx +
mov [ebp+arg_C] ecx +
jg loc_103443A  +
mov byte ptr [ebp+arg_8] dl +
fldz   +
lea edx [ebp+arg_1C] +
push edx  +
fstp  [ebp+arg_1C] +
push [ebp+arg_8]  +
fld  [ebp+var_10] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+var_8]  +
push ebx  +
push ecx  +
fstp  [esp+98h+var_98] +
push ecx  +
push [ebp+arg_28]  +
push [ebp+var_C]  +
call sub_1032EF5  +
cmp byte ptr [ebp+arg_10] 0 +
mov eax [ebp+arg_C] +
jnz loc_10320D9  +
dec eax  +
cmp [ebp+arg_14] 0 +
mov [ebp+arg_8] eax +
mov byte ptr [ebp+arg_28+3] 0 +
jz loc_10320F9  +
cmp [ebp+arg_C] 2 +
jl loc_10320F9  +
cmp dword ptr [edi+94h] 0 +
jnz loc_10346D4  +
mov eax dword_108B3FC +
mov edi [ebp+arg_18] +
mov [edi] eax +
test eax eax +
jz loc_10346F6  +
fld  [ebp+var_14] +
mov ecx [ebp+var_8] +
fld  ds:dbl_1006830 +
fmul st(1) st +
fxch  st(1) +
fstp  [ebp+arg_24] +
fldz   +
fst  [ebp+var_5C] +
fst  [ebp+var_60] +
fst  [ebp+var_24] +
fst  [ebp+var_28] +
fst  [ebp+var_44] +
fst  [ebp+var_48] +
fst  [ebp+var_4C] +
fst  [ebp+var_50] +
fst  [ebp+var_34] +
fst  [ebp+var_38] +
fst  [ebp+var_3C] +
fst  [ebp+var_40] +
fst  [ebp+var_54] +
fst  [ebp+var_58] +
test ecx ecx +
jnz loc_1046C25  +
fstp  st(1) +
fld  [ebp+arg_24] +
fstp  [ebp+arg_4] +
fld1   +
cmp byte ptr [ebp+arg_10] 0 +
fstp  [ebp+arg_1C] +
jnz loc_1046C59  +
lea ecx [ebp+var_28] +
fstp  st +
push ecx  +
lea eax [ebx+8] +
push eax  +
push ebx  +
call sub_1032872  +
fld  [ebp+arg_4] +
lea eax [ebp+var_48] +
push eax  +
lea eax [ebp+var_50] +
push eax  +
push ecx  +
fstp  [esp+88h+var_88] +
lea eax [ebp+var_28] +
push eax  +
push ebx  +
call sub_10318F2  +
lea eax [ebp+var_50] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
call sub_1031867  +
fstp  [ebp+var_10] +
cmp [ebp+arg_8] 0 +
jl loc_10323BB  +
mov ecx [ebp+arg_C] +
cmp ecx 1 +
jle loc_10323B1  +
mov eax [ebp+var_8] +
add ebx 8 +
add eax 0Ch +
dec ecx  +
mov [ebp+arg_18] ebx +
mov [ebp+var_C] eax +
mov [ebp+var_24] ecx +
cmp [ebp+var_8] 0 +
jnz loc_1046CAF  +
fld  [ebp+arg_24] +
fstp  [ebp+arg_4] +
fld1   +
mov eax [ebp+arg_18] +
fstp  [ebp+arg_8] +
lea ecx [ebp+var_60] +
push ecx  +
lea ebx [eax-8] +
push eax  +
push ebx  +
call sub_1032872  +
fld  [ebp+arg_4] +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
push ecx  +
fstp  [esp+88h+var_88] +
lea eax [ebp+var_60] +
push eax  +
push [ebp+arg_18]  +
call sub_10318F2  +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_38] +
push eax  +
call sub_1031867  +
fstp  [ebp+var_1C] +
push ebx  +
push [ebp+arg_18]  +
call sub_1031867  +
fstp  [ebp+var_14] +
mov eax [ebp+arg_20] +
fld  dword ptr [eax] +
fadd  [ebp+var_14] +
fstp  dword ptr [eax] +
mov eax [esi] +
mov ecx [edi] +
imul eax eax +
fld  [ebp+var_10] +
mov dword ptr [eax+ecx] 4 +
mov eax [esi] +
mov ecx [edi] +
imul eax eax +
fstp  dword ptr [eax+ecx+5Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+60h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_14] +
imul eax eax +
fstp  dword ptr [eax+ecx+8] +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_58] +
push eax  +
lea eax [ebp+var_50] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
call sub_1032509  +
test al al +
jnz loc_1046CE3  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_58] +
push eax  +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
lea eax [ebp+var_50] +
push eax  +
call sub_1032509  +
test al al +
jnz loc_1034300  +
mov eax [esi] +
fld  [ebp+var_48] +
mov ecx [edi] +
imul eax eax +
fstp  dword ptr [eax+ecx+0Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_44] +
imul eax eax +
fstp  dword ptr [eax+ecx+10h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+1Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_38] +
imul eax eax +
fstp  dword ptr [eax+ecx+20h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_34] +
imul eax eax +
fstp  dword ptr [eax+ecx+24h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+30h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_40] +
imul eax eax +
fstp  dword ptr [eax+ecx+34h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_3C] +
imul eax eax +
fstp  dword ptr [eax+ecx+38h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+44h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_50] +
imul eax eax +
fstp  dword ptr [eax+ecx+48h] +
fld  [ebp+var_4C] +
mov eax [esi] +
mov ecx [edi] +
imul eax eax +
fstp  dword ptr [eax+ecx+4Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+58h] +
mov eax [esi] +
mov ecx [edi] +
imul eax eax +
and dword ptr [eax+ecx+4] 0 +
mov eax [ebp+var_38] +
fld  [ebp+var_1C] +
inc dword ptr [esi]  +
fstp  [ebp+var_10] +
fld  [ebp+arg_8] +
add [ebp+var_C] 0Ch +
add [ebp+arg_18] 8 +
fstp  [ebp+arg_1C] +
dec [ebp+var_24]  +
mov [ebp+var_48] eax +
mov eax [ebp+var_34] +
mov [ebp+var_44] eax +
mov eax [ebp+var_40] +
mov [ebp+var_50] eax +
mov eax [ebp+var_3C] +
mov [ebp+var_4C] eax +
jz loc_10323AB  +
mov eax [ebp+var_C] +
jmp loc_10321CB  +
mov ebx [ebp+var_2C] +
mov ecx [ebp+arg_C] +
cmp byte ptr [ebp+arg_10] 0 +
jnz loc_1046E2F  +
cmp [ebp+arg_14] 0 +
jz loc_10323CB  +
cmp byte ptr [ebp+arg_28+3] 0 +
jnz loc_1034543  +
pop ebx  +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
leave   +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 14h +
pop ebp  +
jmp loc_10323EA  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipSetWorldTransform  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+arg_10] +
mov ecx [eax+4] +
dec ecx  +
mov [ebp+arg_10] ecx +
fild  [ebp+arg_10] +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+90h] 0 +
mov edx [eax] +
fstp  [ebp+arg_10] +
fldz   +
fst  [ebp+var_8] +
fld  [ebp+arg_C] +
fld1   +
fld  st +
fdivrp st(2) st +
fxch  st(1) +
fstp  [ebp+var_C] +
fxch  st(1) +
fst  [ebp+var_4] +
jnz loc_1046399  +
cmp byte ptr [ecx+0A4h] 0 +
jz loc_1034422  +
mov ecx [eax+1Ch] +
imul ecx [eax+14h] +
add ecx [eax+18h] +
add ecx [eax+10h] +
mov [ebp+arg_C] ecx +
fild  [ebp+arg_C] +
fsub st st(2) +
fstp  [ebp+arg_C] +
fld  [ebp+arg_C] +
fadd st st(2) +
fdivp st(2) st +
fxch  st(1) +
fstp  [ebp+var_C] +
push ebx  +
mov ebx [ebp+arg_8] +
test ebx ebx +
jle loc_1034433  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
add esi 14h +
fld  dword ptr [esi-0Ch] +
mov edi [esi-10h] +
fadd  [ebp+var_4] +
fstp  [ebp+var_4] +
fld  [ebp+arg_C] +
fmul  [ebp+var_4] +
fmul  [ebp+var_C] +
fstp  [ebp+arg_0] +
fld  [ebp+var_8] +
fstp  dword ptr [esi] +
fst  dword ptr [esi+4] +
fld  [ebp+arg_0] +
fstp  dword ptr [esi+14h] +
fstp  dword ptr [esi+18h] +
fld  [ebp+arg_0] +
fstp  dword ptr [esi+28h] +
fld  [ebp+arg_10] +
fstp  dword ptr [esi+2Ch] +
fld  [ebp+var_8] +
fstp  dword ptr [esi+3Ch] +
fld  [ebp+arg_10] +
fstp  dword ptr [esi+40h] +
test edi edi +
jnz loc_1033F4C  +
fld  [ebp+arg_0] +
add esi 64h +
dec ebx  +
fstp  [ebp+var_8] +
jz loc_10324FB  +
fldz   +
jmp loc_10324A2  +
pop edi  +
pop esi  +
mov al 1 +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax [ebp+arg_4] +
fld  dword ptr [eax] +
mov ecx [ebp+arg_C] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
fsub  dword ptr [esi] +
mov bl 1 +
fstp  [ebp+var_8] +
fld  dword ptr [eax+4] +
mov eax [ebp+arg_8] +
fsub  dword ptr [esi+4] +
fstp  [ebp+var_4] +
fld  dword ptr [ecx] +
fsub  dword ptr [eax] +
fstp  [ebp+var_10] +
fld  dword ptr [ecx+4] +
fsub  dword ptr [eax+4] +
fstp  [ebp+var_C] +
fld  dword ptr [eax] +
fsub  dword ptr [esi] +
fstp  [ebp+arg_0] +
fld  dword ptr [eax+4] +
lea eax [ebp+var_20] +
fsub  dword ptr [esi+4] +
push eax  +
fstp  [ebp+arg_4] +
fld  [ebp+var_8] +
fstp  [ebp+var_20] +
fld  [ebp+var_4] +
fstp  [ebp+var_1C] +
fld  [ebp+var_10] +
fstp  [ebp+var_18] +
fld  [ebp+var_C] +
fstp  [ebp+var_14] +
call sub_103260C  +
lea eax [ebp+var_18] +
push eax  +
call sub_103260C  +
fld  [ebp+var_14] +
fmul  [ebp+var_1C] +
fld  [ebp+var_18] +
fmul  [ebp+var_20] +
faddp st(1) st +
fstp  [ebp+arg_C] +
fld  [ebp+arg_C] +
fsub  ds:dbl_1031550 +
fstp  [ebp+arg_C] +
fld  [ebp+arg_C] +
fabs   +
fstp  [ebp+arg_C] +
fld  [ebp+arg_C] +
fcomp  ds:dbl_1032EE8 +
fnstsw  ax +
test ah 5 +
jnp loc_10325FD  +
fld  [ebp+var_C] +
fld  st +
fmul  [ebp+arg_0] +
fld  [ebp+var_10] +
fmul  [ebp+arg_4] +
fsubp st(1) st +
fld  [ebp+var_8] +
fld  st(2) +
fmulp st(1) st +
fld  [ebp+var_4] +
fmul  [ebp+var_10] +
fsubp st(1) st +
fdivp st(1) st +
fstp  [ebp+arg_C] +
fldz   +
fld  [ebp+arg_C] +
fcom  st(1) +
fnstsw  ax +
test ah 41h +
jnz loc_103336B  +
fld1   +
fcom  st(1) +
fnstsw  ax +
test ah 41h +
jz loc_1033EDB  +
fstp  st(2) +
fstp  st +
fstp  st(1) +
fstp  st +
xor bl bl +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
fld  dword ptr [esi+4] +
fld  dword ptr [esi] +
fld  st +
fmulp st(1) st +
fld  st(1) +
fmulp st(2) st +
faddp st(1) st +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
call _CIsqrt  +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
fstp  [ebp+arg_0] +
fld  dword ptr [esi] +
fdiv  [ebp+arg_0] +
fstp  dword ptr [esi] +
fld  dword ptr [esi+4] +
fdiv  [ebp+arg_0] +
fstp  dword ptr [esi+4] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
sub esp 4Ch +
push ebx  +
push esi  +
push edi  +
cmp eax 1 +
jbe loc_104674F  +
mov ecx [ebp+arg_4] +
mov edi dword_108C4B8 +
and [ebp+var_4] 0 +
mov [ebp+var_8] edi +
test ecx ecx +
jnz loc_1046573  +
and [ebp+var_C] 0 +
test eax eax +
jbe loc_10326F9  +
mov ebx [ebp+arg_0] +
mov edx [ebx] +
mov [edi] edx +
mov edx [ebx+4] +
mov [edi+4] edx +
cmp eax 1 +
jbe loc_10326F9  +
mov edx [ebp+var_4] +
add ecx 0Ch +
add ebx 8 +
dec eax  +
mov dword ptr [ebp+var_1C+4] edi +
mov [ebp+arg_0] edx +
mov [ebp+var_14] ecx +
mov [ebp+var_20] eax +
push ebx  +
push dword ptr [ebp+var_1C+4]  +
call sub_1032FD1  +
fld  [ebp+arg_10] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jp loc_10326EA  +
inc [ebp+var_C]  +
mov eax [ebp+var_C] +
mov ecx [ebx] +
add [ebp+arg_0] 0Ch +
cmp [ebp+arg_4] 0 +
lea eax [edi+eax*8] +
mov [eax] ecx +
mov ecx [ebx+4] +
mov dword ptr [ebp+var_1C+4] eax +
mov [eax+4] ecx +
jnz loc_1046581  +
add [ebp+var_14] 0Ch +
add ebx 8 +
dec [ebp+var_20]  +
jnz loc_10326B1  +
mov eax [ebp+arg_8] +
mov esi [ebp+var_C] +
mov ebx [ebp+arg_20] +
and dword ptr [ebx] 0 +
inc esi  +
cmp byte ptr [ebp+arg_14] 0 +
mov [ebp+arg_10] esi +
jnz loc_103415F  +
cmp esi 1 +
jle loc_103415F  +
cmp esi eax +
ja loc_1032864  +
fldz   +
lea ecx [ebp+var_34] +
fst  [ebp+var_38] +
push ecx  +
fst  [ebp+var_3C] +
lea eax [edi+8] +
fst  [ebp+var_30] +
push eax  +
fst  [ebp+var_34] +
push edi  +
fst  [ebp+var_28] +
mov byte ptr [ebp+arg_8+3] 0 +
fst  [ebp+var_2C] +
mov byte ptr [ebp+arg_20+3] 0 +
fst  [ebp+var_C] +
fst  [ebp+var_10] +
fld  [ebp+arg_C] +
fmul  ds:dbl_1006830 +
fstp  [ebp+arg_C] +
fld  dword ptr [edi] +
fstp  [ebp+var_24] +
fld  dword ptr [edi+4] +
fstp  [ebp+var_20] +
fst  [ebp+var_40] +
fstp  [ebp+var_44] +
call sub_1032872  +
cmp byte ptr [ebp+arg_14] 0 +
jnz loc_1046592  +
cmp [ebp+arg_4] 0 +
mov eax [ebp+arg_18] +
mov eax [eax] +
mov ecx [ebp+var_24] +
mov [eax] ecx +
mov ecx [ebp+var_20] +
mov [eax+4] ecx +
jnz loc_104662E  +
lea eax [esi-1] +
cmp eax 1 +
mov [ebp+var_14] eax +
jle loc_1032836  +
mov ecx [ebp+var_4] +
fld  ds:dbl_1033380 +
add ecx 0Ch +
fstp  [ebp+var_4C] +
mov [ebp+arg_0] ecx +
lea ecx [edi+8] +
dec eax  +
mov [ebp+arg_14] ecx +
mov dword ptr [ebp+var_1C+4] eax +
mov ecx [ebp+arg_14] +
lea edx [ebp+var_3C] +
lea eax [ecx+8] +
push edx  +
push eax  +
push ecx  +
mov [ebp+var_20] eax +
call sub_1032872  +
lea eax [ebp+var_4C] +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
call sub_10333F0  +
test al al +
jnz loc_10340FE  +
inc dword ptr [ebx]  +
mov ecx [ebp+arg_18] +
mov edx [ebp+arg_14] +
mov edx [edx] +
mov eax [ebx] +
mov ecx [ecx] +
mov [ecx+eax*8] edx +
mov edx [ebp+arg_14] +
mov edx [edx+4] +
cmp [ebp+arg_4] 0 +
mov [ecx+eax*8+4] edx +
jnz loc_1046664  +
mov eax [ebp+var_2C] +
add [ebp+arg_0] 0Ch +
dec dword ptr [ebp+var_1C+4]  +
mov [ebp+var_10] eax +
mov eax [ebp+var_28] +
mov [ebp+var_C] eax +
mov eax [ebp+var_3C] +
mov [ebp+var_34] eax +
mov eax [ebp+var_38] +
mov [ebp+var_30] eax +
mov eax [ebp+var_20] +
mov [ebp+arg_14] eax +
jnz loc_10327BD  +
cmp byte ptr [ebp+arg_8+3] 0 +
jnz loc_104667F  +
inc dword ptr [ebx]  +
cmp [ebp+arg_4] 0 +
mov ecx [ebp+arg_18] +
mov edx [edi+esi*8-8] +
mov eax [ebx] +
mov ecx [ecx] +
mov [ecx+eax*8] edx +
mov edx [edi+esi*8-4] +
mov [ecx+eax*8+4] edx +
jnz loc_1046733  +
inc dword ptr [ebx]  +
pop edi  +
pop esi  +
mov al 1 +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
fld  dword ptr [ecx+4] +
mov edx [ebp+arg_4] +
fsub  dword ptr [edx+4] +
mov eax [ebp+arg_8] +
push eax  +
fstp  dword ptr [eax] +
fld  dword ptr [edx] +
fsub  dword ptr [ecx] +
fstp  dword ptr [eax+4] +
call sub_103260C  +
mov al 1 +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push dword ptr [esi]  +
call GdipGetCompositingMode  +
push eax  +
mov ecx esi +
call sub_100B30D  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 14h +
call sub_10328F0  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipGetWorldTransform  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
test eax eax +
jz loc_103295D  +
mov eax [eax+4] +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
push dword ptr [esi]  +
call GdipDrawImagePointRectI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 20h  +
xor eax eax +
jmp loc_1032933  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
push [ebp+arg_0]  +
call sub_103299A  +
pop ebp  +
retn 1Ch  +
***
call sub_100208C  +
push offset CriticalSection  +
call ds:EnterCriticalSection  +
mov ecx [ebp+8] +
add ecx 14h +
mov [ebp-58h] ecx +
call sub_1030979  +
mov ebx [ebp+18h] +
cmp eax 3 +
setnz byte ptr [ebp-4Ch]  +
mov esi ebx +
imul esi esi +
cmp byte ptr [ebp+20h] 0 +
jz loc_10329EC  +
cmp ebx 2 +
jb loc_10329EC  +
mov eax [ebp+0Ch] +
cmp dword ptr [eax+94h] 0 +
jnz loc_1034531  +
mov ecx dword_108C498 +
test ecx ecx +
jz loc_1037689  +
mov eax dword_108C49C +
sub eax ecx +
sar eax 3 +
cmp eax esi +
jb loc_103781B  +
mov ecx [ebp+14h] +
mov eax dword_108B3FC +
and dword ptr [ebp-68h] 0 +
mov esi dword_108C498 +
and dword ptr [ebp-5Ch] 0 +
mov [ebp-48h] eax +
mov [ebp-28h] esi +
test ecx ecx +
jnz loc_1047A02  +
mov edi [ebp+10h] +
fldz   +
mov eax [edi] +
fst  dword ptr [ebp-64h] +
mov [ebp+18h] eax +
fstp  dword ptr [ebp-60h] +
mov [ebp-40h] eax +
mov [ebp-38h] eax +
mov eax [edi+4] +
mov [ebp-54h] eax +
mov [ebp-3Ch] eax +
mov [ebp-34h] eax +
test ecx ecx +
jnz loc_1047A0F  +
cmp byte ptr [ebp+1Ch] 0 +
jnz loc_1047A1F  +
cmp byte ptr [ebp-4Ch] 0 +
mov eax [ebp+0Ch] +
mov eax [eax+4] +
mov [ebp-20h] eax +
fild  dword ptr [ebp-20h] +
mov [ebp-6Ch] ebx +
fstp  dword ptr [ebp-18h] +
jnz loc_1047A75  +
fld  dword ptr [ebp-18h] +
fld  st +
fmulp st(1) st +
fstp  dword ptr [ebp-20h] +
fld  dword ptr [ebp-18h] +
fld  ds:dbl_100CAA8 +
fdiv st(1) st +
fcom  st(1) +
fnstsw  ax +
test ah 5 +
jp loc_1037690  +
fstp  st +
fstp  dword ptr [ebp-50h] +
xor eax eax +
fild  dword ptr [ebp+18h] +
inc eax  +
mov [ebp+18h] eax +
mov [ebp-2Ch] eax +
fstp  dword ptr [esi] +
fild  dword ptr [edi+4] +
fstp  dword ptr [esi+4] +
xor esi esi +
cmp [ebp-6Ch] eax +
jbe loc_1032B86  +
mov ecx [ebp+14h] +
add ecx 0Ch +
mov [ebp-44h] ecx +
mov ecx [ebp-5Ch] +
xor eax eax +
add ecx 0Ch +
mov dword ptr [ebp-70h] 0Ch +
mov [ebp-54h] eax +
lea ebx [edi+8] +
mov [ebp-30h] ecx +
lea esi [eax+edi] +
push ebx  +
push esi  +
call sub_10318AC  +
fstp  dword ptr [ebp-1Ch] +
fld  dword ptr [ebp-1Ch] +
fld  dword ptr [ebp-20h] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jnp loc_1033432  +
fild  dword ptr [ebx] +
mov ecx [ebp+18h] +
mov eax [ebp-28h] +
shl ecx 3 +
cmp dword ptr [ebp+14h] 0 +
fstp  dword ptr [eax+ecx] +
fild  dword ptr [ebx+4] +
fstp  dword ptr [ecx+eax+4] +
jnz loc_1047A9D  +
mov eax [ebx] +
inc dword ptr [ebp+18h]  +
add dword ptr [ebp-30h] 0Ch +
cmp [ebp-38h] eax +
jg loc_10340EF  +
cmp [ebp-40h] eax +
jge loc_1032B40  +
mov [ebp-40h] eax +
mov eax [ebx+4] +
cmp [ebp-34h] eax +
jg loc_1047AAE  +
cmp [ebp-3Ch] eax +
jge loc_1032B54  +
mov [ebp-3Ch] eax +
cmp dword ptr [ebp+14h] 0 +
jnz loc_1047AB6  +
mov ecx [ebp-2Ch] +
mov edx [ebp-70h] +
add dword ptr [ebp-70h] 0Ch +
add dword ptr [ebp-44h] 0Ch +
mov eax ecx +
shl eax 3 +
mov esi ecx +
inc ecx  +
add ebx 8 +
mov [ebp-54h] edx +
mov [ebp-2Ch] ecx +
cmp ecx [ebp-6Ch] +
jb loc_1032AE7  +
cmp byte ptr [ebp+1Ch] 0 +
jnz loc_1047AD3  +
lea ecx [ebp-14h] +
call sub_1030B58  +
mov ecx [ebp-58h] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-14h] +
push eax  +
call sub_10328F0  +
lea ecx [ebp-14h] +
call sub_103325C  +
test eax eax +
jz loc_1047B5F  +
fld  dword ptr [ebp-18h] +
call _ftol2_sse  +
mov esi [ebp+0Ch] +
inc eax  +
cdq   +
sub eax edx +
sar eax 1 +
cmp dword ptr [ebp+14h] 0 +
jnz loc_1047B8E  +
sub [ebp-38h] eax +
sub [ebp-34h] eax +
add [ebp-40h] eax +
add [ebp-3Ch] eax +
lea ecx [ebp-0D0h] +
call sub_100C68F  +
lea ecx [ebp-80h] +
call sub_100C68F  +
push dword ptr [ebp-3Ch]  +
lea ecx [ebp-0C0h] +
push dword ptr [ebp-40h]  +
push dword ptr [ebp-34h]  +
push dword ptr [ebp-38h]  +
call sub_100C6E8  +
mov edi [ebp+8] +
lea eax [ebp-0D0h] +
push eax  +
mov ecx edi +
call sub_100EBEF  +
test al al +
jz loc_1047C04  +
lea eax [ebp-0C0h] +
push eax  +
lea eax [ebp-0D0h] +
push eax  +
lea eax [ebp-80h] +
push eax  +
call ds:IntersectRect  +
mov ebx [ebp-78h] +
mov eax [ebp-74h] +
sub ebx [ebp-80h] +
sub eax [ebp-7Ch] +
cmp dword ptr [edi+20h] 0 +
mov [ebp-20h] ebx +
mov [ebp+14h] eax +
jnz loc_1047C1C  +
mov edi [edi+1Ch] +
test edi edi +
jz loc_1032C67  +
cmp dword ptr [edi+14h] 0 +
jnz loc_1047C1C  +
mov byte_108A2B4 0 +
mov edi eax +
push dword ptr [ebp-4Ch]  +
lea eax [ebp-0C0h] +
push eax  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-68h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-5Ch]  +
push dword ptr [ebp-28h]  +
push esi  +
call sub_1031FE4  +
cmp byte_108A2B4 0 +
jnz loc_1047C9C  +
mov eax [ebp+8] +
mov ecx [eax+1Ch] +
mov eax [ebp-58h] +
add ecx 4 +
mov dword_108A2B8 ecx +
mov [ebp+8] eax +
call sub_100CFB1  +
mov ecx dword_108A2B8 +
mov dword_108A2B0 eax +
call sub_100CFE8  +
lea esi [ebp-80h] +
mov edi offset dword_108B408 +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+0Ch] +
mov dword_108A2AC eax +
fldz   +
fcomp  dword ptr [ebp+10h] +
fnstsw  ax +
test ah 5 +
jp loc_1032DEF  +
lea edi [esi+64h] +
mov ecx edi +
call sub_100CFB1  +
mov ecx edi +
mov ebx eax +
call sub_100CFE8  +
mov edi eax +
mov eax [esi+4] +
mov [ebp-0A8h] eax +
mov eax [esi+94h] +
test eax eax +
jnz loc_103444F  +
fld  dword ptr [ebp+10h] +
call _ftol2_sse  +
push dword ptr [ebp-4Ch]  +
mov [ebp-0A4h] eax +
mov eax [esi+98h] +
mov [ebp-0A0h] eax +
mov eax [esi+9Ch] +
mov [ebp-9Ch] eax +
mov eax [esi+0A0h] +
mov [ebp-98h] eax +
lea eax [ebp-0B0h] +
push eax  +
push esi  +
mov [ebp-0ACh] edi +
mov [ebp-0B0h] ebx +
mov dword ptr [ebp-94h] 1 +
call sub_1031965  +
cmp byte ptr [ebp-4Ch] 0 +
jnz loc_1047D64  +
mov eax [esi+94h] +
mov ebx [ebp-68h] +
mov [ebp+0Ch] eax +
test eax eax +
lea eax [ebp-0B0h] +
push eax  +
push ecx  +
jnz loc_1034461  +
fld  dword ptr [ebp+10h] +
fstp  [esp+0Ch+var_C] +
push ebx  +
push dword ptr [ebp-48h]  +
push esi  +
call sub_103241B  +
cmp byte_108A2B4 0 +
jnz loc_1047D70  +
test ebx ebx +
jle loc_1032DDD  +
mov edi [ebp-48h] +
lea eax [ebp-0B0h] +
push eax  +
push 1  +
push edi  +
push esi  +
push dword ptr [ebp+8]  +
call sub_1031CB8  +
add edi 64h +
dec ebx  +
jnz loc_1032DC4  +
cmp byte_108A2B4 0 +
jnz loc_1047DB6  +
call sub_1032E11  +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
push dword ptr [ebp-14h]  +
call GdipDeleteMatrix  +
mov al 1 +
call sub_1002061  +
retn 20h  +
***
mov ecx dword_108D770 +
test ecx ecx +
jnz loc_1046371  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
fld  dword ptr [edx+4] +
fsub  dword ptr [ecx+4] +
fstp  [ebp+arg_0] +
fldz   +
fcom  [ebp+arg_0] +
fnstsw  ax +
test ah 44h +
mov eax [ebp+arg_C] +
jnp loc_1033E94  +
cmp [ebp+arg_14] 0 +
fstp  st +
fld  [ebp+arg_0] +
push esi  +
fadd  ds:dbl_1032EE8 +
mov esi [ebp+arg_8] +
fld1   +
fdivrp st(1) st +
fstp  [ebp+arg_0] +
fild  [ebp+arg_10] +
fsub  dword ptr [ecx+4] +
fstp  [ebp+arg_4] +
fld  dword ptr [edx] +
fsub  dword ptr [ecx] +
fld  [ebp+arg_0] +
fld  st +
fmulp st(2) st +
fxch  st(1) +
fstp  dword ptr [eax] +
fld  dword ptr [edx+8] +
fsub  dword ptr [ecx+8] +
fld  st(1) +
fmulp st(1) st +
fstp  dword ptr [eax+8] +
fld  dword ptr [edx+0Ch] +
fsub  dword ptr [ecx+0Ch] +
fld  st(1) +
fmulp st(1) st +
fstp  dword ptr [eax+0Ch] +
fld  dword ptr [eax] +
fld  [ebp+arg_4] +
fld  st +
fmulp st(2) st +
fld  dword ptr [ecx] +
faddp st(2) st +
fxch  st(1) +
fstp  dword ptr [esi] +
fld  st +
fmul  dword ptr [eax+8] +
fadd  dword ptr [ecx+8] +
fstp  dword ptr [esi+8] +
fld  dword ptr [eax+0Ch] +
fld  st(1) +
fmulp st(1) st +
fadd  dword ptr [ecx+0Ch] +
fstp  dword ptr [esi+0Ch] +
jz loc_1033EC3  +
fld  dword ptr [edx+10h] +
fsub  dword ptr [ecx+10h] +
fmulp st(2) st +
fxch  st(1) +
fstp  dword ptr [ebp+arg_14] +
fld  dword ptr [ebp+arg_14] +
fstp  dword ptr [eax+10h] +
fmul  dword ptr [ebp+arg_14] +
fadd  dword ptr [ecx+10h] +
fstp  dword ptr [esi+10h] +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
fldz   +
mov eax [ebp+arg_24] +
fst  dword ptr [eax] +
push edi  +
mov eax [ebp+arg_8] +
xor edi edi +
mov [ebp+var_4] edi +
cmp eax edi +
jbe loc_10344A3  +
cmp byte ptr [ebp+arg_20] 0 +
push ebx  +
mov ebx [ebp+arg_10] +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
mov [ebx] ecx +
mov ecx [esi+4] +
mov [ebx+4] ecx +
jnz loc_1034469  +
fstp  [ebp+arg_8] +
cmp eax 1 +
jbe loc_1032FAA  +
mov ecx [ebp+arg_14] +
mov [ebp+arg_20] ecx +
mov ecx [ebp+arg_4] +
add ecx 0Ch +
add esi 8 +
dec eax  +
mov [ebp+arg_1C] ebx +
mov [ebp+arg_14] ecx +
mov [ebp+arg_10] esi +
mov [ebp+var_18] eax +
push esi  +
push [ebp+arg_1C]  +
call sub_1032FD1  +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
fld  [ebp+arg_C] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jp loc_1032F9B  +
mov ecx [esi] +
add [ebp+arg_20] 0Ch +
inc edi  +
cmp [ebp+arg_4] 0 +
lea eax [ebx+edi*8] +
mov [eax] ecx +
mov ecx [esi+4] +
mov [ebp+var_4] edi +
mov [ebp+arg_1C] eax +
mov [eax+4] ecx +
jnz loc_104655F  +
fld  [ebp+arg_0] +
fadd  [ebp+arg_8] +
fstp  [ebp+arg_8] +
add [ebp+arg_14] 0Ch +
add esi 8 +
dec [ebp+var_18]  +
mov [ebp+arg_10] esi +
jnz loc_1032F55  +
fld  [ebp+arg_8] +
call _CIsqrt  +
fstp  [ebp+arg_20] +
fld  [ebp+arg_20] +
mov eax [ebp+arg_24] +
pop esi  +
fstp  dword ptr [eax] +
pop ebx  +
mov eax [ebp+arg_18] +
inc edi  +
mov [eax] edi +
mov al 1 +
pop edi  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
fld  dword ptr [eax] +
fsub  dword ptr [ecx] +
fstp  [ebp+arg_0] +
fld  dword ptr [eax+4] +
fsub  dword ptr [ecx+4] +
fstp  [ebp+arg_4] +
fld  [ebp+arg_4] +
fld  [ebp+arg_0] +
fld  st +
fmulp st(1) st +
fld  st(1) +
fmulp st(2) st +
faddp st(1) st +
fstp  [ebp+arg_4] +
fld  [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
cmp [ebp+arg_8] 0 +
jl locret_1033218  +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
fld  dword ptr [esi] +
push edi  +
call _ftol2_sse  +
mov edi [ebp+arg_10] +
fld  dword ptr [edi] +
mov [ebp+var_4] eax +
call _ftol2_sse  +
fld  dword ptr [edi] +
mov ebx eax +
mov [ebp+arg_C] ebx +
fisub  [ebp+arg_C] +
fstp  [ebp+var_C] +
fld  dword ptr [esi] +
fisub  [ebp+var_4] +
fstp  [ebp+var_8] +
fld  [ebp+var_8] +
fldz   +
fcom  st(1) +
fnstsw  ax +
fstp  st(1) +
test ah 5 +
jp loc_103305F  +
inc [ebp+var_4]  +
fcom  [ebp+var_C] +
fnstsw  ax +
test ah 44h +
jnp loc_1033496  +
mov eax [ebp+arg_8] +
cmp eax dword_108B40C +
jl loc_10303A2  +
cmp eax dword_108B414 +
jge loc_10303A2  +
cmp eax dword_108A2AC +
jge loc_10303A2  +
cmp [ebp+var_4] 0 +
jl loc_10467F5  +
mov eax dword_108B408 +
cmp [ebp+var_4] eax +
jl loc_103485F  +
mov eax dword_108A2B0 +
cmp ebx eax +
jge loc_10467FE  +
mov eax dword_108B410 +
cmp ebx eax +
jge loc_1034867  +
cmp [ebp+var_4] ebx +
jg loc_10303A2  +
fild  [ebp+var_4] +
fstp  [ebp+var_8] +
fld  [ebp+var_8] +
fld  dword ptr [esi] +
fcompp st(1) st +
fnstsw  ax +
test ah 41h +
jp loc_10303A2  +
fld  [ebp+var_8] +
fld  dword ptr [edi] +
fcompp st(1) st +
fnstsw  ax +
test ah 1 +
jnz loc_10303A2  +
fild  [ebp+arg_C] +
fstp  [ebp+arg_C] +
fld  [ebp+arg_C] +
fld  dword ptr [esi] +
fcompp st(1) st +
fnstsw  ax +
test ah 41h +
jp loc_10303A2  +
fld  [ebp+arg_C] +
fld  dword ptr [edi] +
fcompp st(1) st +
fnstsw  ax +
test ah 1 +
jnz loc_10303A2  +
push [ebp+arg_14]  +
fst  [ebp+var_20] +
xor eax eax +
fstp  [ebp+var_34] +
push [ebp+var_4]  +
lea edi [ebp+var_1C] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [ebp+var_30] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+arg_10]  +
push esi  +
call sub_103157E  +
mov edi [ebp+arg_4] +
lea eax [ebp+arg_4] +
push eax  +
lea ecx [edi+20h] +
call sub_100DF03  +
mov eax [ebp+arg_4] +
mov edx [ebp+var_4] +
shr eax 10h +
mov byte ptr [ebp+arg_10+3] al +
mov eax [ebp+arg_4] +
shr eax 8 +
mov byte ptr [ebp+arg_C+3] al +
mov eax [ebp+arg_20] +
mov ecx [eax+8] +
imul ecx [ebp+arg_8] +
mov eax [eax+10h] +
sub ebx edx +
lea ecx [ecx+edx*4] +
inc ebx  +
cmp [ebp+arg_24] 1 +
lea esi [ecx+eax-4] +
jnz loc_1046949  +
cmp dword ptr [edi+90h] 0 +
mov edi ebx +
jnz loc_1046809  +
push [ebp+arg_18]  +
fld  [ebp+var_18] +
push ecx  +
fstp  [esp+48h+var_48] +
call sub_103161F  +
push [ebp+arg_1C]  +
fstp  [ebp+arg_20] +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+arg_20] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
call sub_103164A  +
fld  [ebp+var_10] +
mov al [esi+7] +
add esi 4 +
test al al +
jnz loc_1034007  +
movzx eax byte ptr [ebp+arg_8+1] +
mov [ebp+arg_20] eax +
fild  [ebp+arg_20] +
fmulp st(1) st +
call _ftol2  +
mov [esi+3] al +
mov al byte ptr [ebp+arg_10+3] +
mov [esi+2] al +
mov al byte ptr [ebp+arg_C+3] +
mov [esi+1] al +
mov al byte ptr [ebp+arg_4] +
mov [esi] al +
push [ebp+arg_14]  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
call sub_1033221  +
dec edi  +
jnz loc_10331A6  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
fld  dword ptr [eax] +
fadd  dword ptr [ecx] +
fstp  dword ptr [eax] +
fld  dword ptr [ecx+8] +
fadd  dword ptr [eax+8] +
fstp  dword ptr [eax+8] +
fld  dword ptr [ecx+0Ch] +
fadd  dword ptr [eax+0Ch] +
fstp  dword ptr [eax+0Ch] +
jz loc_1033253  +
fld  dword ptr [ecx+10h] +
fadd  dword ptr [eax+10h] +
fstp  dword ptr [eax+10h] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push dword ptr [esi]  +
call GdipIsMatrixIdentity  +
push eax  +
mov ecx esi +
call sub_100B30D  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
call sub_1030B13  +
mov ecx [ebp+arg_0] +
mov esi eax +
push esi  +
call sub_10328D2  +
mov ecx [ebx+2Ch] +
push esi  +
call sub_10323DA  +
push esi  +
call sub_1030B8B  +
fldz   +
sub esp 10h +
fstp  [esp+8Ch+var_80] +
fld1   +
lea ecx [ebp+var_68] +
fst  [esp+8Ch+var_84] +
fst  [esp+8Ch+var_88] +
fstp  [esp+8Ch+var_8C] +
call sub_100CE76  +
push eax  +
push 1  +
call sub_1030BDA  +
mov ecx [ebx+2Ch] +
mov esi eax +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_103146B  +
push esi  +
call sub_100DAD9  +
mov ecx [ebp+arg_0] +
call sub_1033346  +
mov ecx [ebx+2Ch] +
push eax  +
call sub_100DCD7  +
lea ecx [ebp+var_48] +
call sub_100C68F  +
mov ecx [ebx+2Ch] +
lea eax [ebp+var_48] +
push eax  +
call sub_100EBEF  +
mov ecx [ebx+2Ch] +
lea eax [ebp+var_28] +
push eax  +
call sub_100DDB1  +
movzx eax byte ptr [ebx+59h] +
mov esi [ebx+3Ch] +
push eax  +
push edi  +
lea ecx [ebx+38h] +
call sub_100CA8E  +
mov ecx [ebx+2Ch] +
push eax  +
push [ebp+var_8]  +
push esi  +
push dword ptr [ebx+24h]  +
call sub_100EC71  +
mov ecx [ebx+2Ch] +
jmp loc_100EBC0  +
***
mov edi edi +
push esi  +
add ecx 14h +
xor esi esi +
call sub_1030979  +
dec eax  +
jz loc_1033366  +
dec eax  +
jz loc_1033361  +
dec eax  +
dec eax  +
jz loc_1033361  +
mov eax esi +
pop esi  +
retn   +
push 2  +
pop esi  +
jmp loc_103335D  +
xor esi esi +
inc esi  +
jmp loc_103335D  +
***
fstp  st(1) +
fstp  st +
jmp loc_10325FB  +
***
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
push 1  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call dword ptr [eax+4]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+60h] +
push esi  +
mov esi [eax] +
cmp esi eax +
jz loc_10333DE  +
push edi  +
mov edi [ebp+8] +
cmp [esi+0Ch] edi +
jnz loc_10333E3  +
cmp byte ptr [ebp+10h] 0 +
jz loc_1043E2B  +
push esi  +
lea eax [ebp+10h] +
push eax  +
add ecx 5Ch +
call sub_100BA88  +
push edi  +
call sub_100C26D  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov esi [esi] +
cmp esi eax +
jz loc_10333DD  +
jmp loc_10333BB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1032FD1  +
mov eax [ebp+arg_8] +
fcomp  qword ptr [eax] +
fnstsw  ax +
test ah 41h +
jz loc_1033ED3  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
push dword ptr [esi+2Ch]  +
call sub_100D8C2  +
mov ecx [esi+30h] +
mov eax [ecx] +
lea edx [esi+14h] +
push edx  +
push dword ptr [esi+28h]  +
call dword ptr [eax+8]  +
jmp loc_100F3D1  +
***
fld  dword ptr [ebp-1Ch] +
call _CIsqrt  +
fstp  dword ptr [ebp-1Ch] +
mov eax [ebx+4] +
fld  dword ptr [ebp-1Ch] +
sub eax [esi+4] +
fstp  dword ptr [ebp-1Ch] +
mov ecx [ebp-28h] +
mov [ebp-10h] eax +
mov eax [ebx] +
sub eax [esi] +
mov [ebp-88h] eax +
fild  dword ptr [ebp-88h] +
mov eax [ebp+18h] +
shl eax 3 +
cmp dword ptr [ebp+14h] 0 +
fmul  dword ptr [ebp-50h] +
fdiv  dword ptr [ebp-1Ch] +
fiadd  dword ptr [esi] +
fstp  dword ptr [eax+ecx] +
fild  dword ptr [ebp-10h] +
fmul  dword ptr [ebp-50h] +
fdiv  dword ptr [ebp-1Ch] +
fiadd  dword ptr [esi+4] +
fstp  dword ptr [ecx+eax+4] +
jnz loc_1047A86  +
inc dword ptr [ebp+18h]  +
add dword ptr [ebp-30h] 0Ch +
jmp loc_1032B07  +
***
dec ebx  +
mov [ebp+arg_C] ebx +
jmp loc_103306D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 1  +
call sub_100CEFD  +
mov esi eax +
test esi esi +
jz loc_10334BE  +
mov eax [ebp+arg_0] +
mov [esi] eax +
lea eax [esi+4] +
test eax eax +
jz loc_10334CA  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
push [ebp+arg_8]  +
lea eax [esi+8] +
push eax  +
call sub_100ED32  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push 5  +
jmp loc_103106D  +
push 3  +
jmp loc_103106D  +
push 2  +
jmp loc_103106D  +
xor eax eax +
inc eax  +
jmp loc_103106E  +
***
mov eax [ecx] +
push 4  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
call dword ptr [eax]  +
push eax  +
mov [esi+28h] eax +
call sub_100DC6A  +
push 2  +
mov ecx eax +
mov [esi+2Ch] eax +
call sub_100DCD7  +
mov ecx [esi+2Ch] +
push ebx  +
call sub_103370C  +
jmp loc_100F5D4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
fild  [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
push edi  +
push ecx  +
mov [esi+4] eax +
fstp  [esp+14h+var_14] +
lea eax [ebp+var_4] +
lea edi [esi+0Ch] +
push eax  +
mov ecx edi +
mov dword ptr [esi] offset off_100E8C0 +
mov [ebp+var_4] 0FF000000h +
call sub_100B88A  +
mov eax [ebp+arg_4] +
push 0  +
add eax 4 +
lea ebx [esi+14h] +
push eax  +
mov ecx ebx +
call sub_1033599  +
push ebx  +
mov ecx edi +
call sub_100E022  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov esi ecx +
mov dword ptr [esi+8] 6 +
mov dword ptr [esi] offset off_10335DC +
push dword ptr [eax+4]  +
call GdipCreateTexture  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+60h] +
mov esi [eax] +
cmp esi eax +
jnz loc_1043E96  +
***
push dword ptr [ebp+10h]  +
mov byte ptr [ebp-8] 1 +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10312DE  +
mov esi eax +
lea ecx [edi+5Ch] +
mov eax [ecx+4] +
lea edx [ebp-8] +
push edx  +
push eax  +
mov [ebp-4] esi +
call sub_103372B  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-18h] +
push dword ptr [ebp+8]  +
push 0  +
push 0  +
call sub_100C6E8  +
lea eax [ebp-18h] +
push eax  +
push esi  +
lea ecx [edi-0Ch] +
call sub_10336A5  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fldz   +
sub esp 20h +
push esi  +
push edi  +
sub esp 10h +
fstp  [esp+38h+var_2C] +
lea ecx [ebp+var_20] +
fld1   +
fst  [esp+38h+var_30] +
fst  [esp+38h+var_34] +
fstp  [esp+38h+var_38] +
call sub_100CE76  +
push eax  +
push 1  +
call sub_1030BDA  +
push [ebp+arg_0]  +
mov edi eax +
call sub_100DC6A  +
mov esi eax +
push 0  +
mov ecx esi +
call sub_103370C  +
push [ebp+arg_4]  +
mov ecx esi +
push edi  +
call sub_103146B  +
push esi  +
call sub_100D8C2  +
push edi  +
call sub_100DAD9  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jnz loc_1033719  +
inc eax  +
push eax  +
add ecx 14h +
call sub_103094A  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea edi [eax+4] +
push dword ptr [edi]  +
mov ebx ecx +
push eax  +
call sub_10334A4  +
push 1  +
mov ecx ebx +
mov esi eax +
call sub_1033764  +
mov [edi] esi +
mov eax [esi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov eax [ecx+8] +
mov edx [ebp+8] +
mov esi 1FFFFFFFh +
sub esi eax +
cmp esi edx +
jb loc_1043E6B  +
add eax edx +
mov [ecx+8] eax +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
call sub_100CC4D  +
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-14h] 7 +
mov dword ptr [ebp-18h] offset off_100B560 +
and dword ptr [ebp-4] 0 +
test byte ptr [ebp+8] 8 +
mov ecx [esi+14h] +
lea eax [ebp-18h] +
push eax  +
mov eax [ecx] +
jz loc_100A394  +
push 20h  +
call dword ptr [eax+18h]  +
mov ecx eax +
call sub_1005BE0  +
push dword ptr [esi+50h]  +
mov ecx [esi+14h] +
push dword ptr [esi+54h]  +
mov eax [ecx] +
call dword ptr [eax+20h]  +
mov edi eax +
lea eax [edi+18h] +
push eax  +
push dword ptr [edi+10h]  +
call sub_1033B88  +
push dword ptr [edi+14h]  +
mov ebx eax +
call sub_1033AEB  +
add edi 30h +
push edi  +
lea ecx [ebp-78h] +
mov [ebp+8] eax +
call sub_100CF33  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-38h] +
call sub_100DF5E  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-78h] +
call sub_100C009  +
lea eax [ebp-78h] +
push eax  +
push dword ptr [ebp+8]  +
push ebx  +
push dword ptr [esi+50h]  +
call sub_103385A  +
push ebx  +
mov esi eax +
call sub_100C26D  +
push dword ptr [ebp+8]  +
call sub_100C26D  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
push 0B0h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1033890  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_103389D  +
call sub_1002061  +
retn 10h  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_1033539  +
push dword ptr [ebp+14h]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+20h] +
mov dword ptr [esi] offset off_10311B8 +
call sub_100CF33  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+60h] +
call sub_1033D1B  +
and dword ptr [esi+0A8h] 0 +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_10338FA  +
mov eax esi +
call sub_1002061  +
retn 10h  +
***
call sub_100208C  +
mov esi ecx +
xor ebx ebx +
cmp [esi+90h] ebx +
jnz loc_1033AAD  +
lea edi [esi+60h] +
mov ecx edi +
call sub_100BB97  +
mov ecx edi +
mov [ebp-34h] eax +
call sub_100C000  +
mov ecx [esi+94h] +
mov [ebp-18h] ecx +
mov ecx [esi+4] +
cmp eax ecx +
mov [ebp-14h] eax +
mov [ebp-10h] eax +
jg loc_10303B0  +
lea edx [esi+9Ch] +
lea edi [esi+98h] +
mov eax [edi] +
add eax [edx] +
lea ecx [esi+0A0h] +
add eax [ecx] +
mov [ebp-20h] ecx +
mov [ebp-24h] eax +
lea eax [esi+90h] +
push eax  +
lea ecx [ebp-60h] +
mov [ebp-1Ch] edx +
call sub_100CF7C  +
cmp [esi+0A4h] bl +
jz loc_1034872  +
cmp [ebp-24h] ebx +
jle loc_1034872  +
fild  dword ptr [esi+4] +
mov byte ptr [ebp-4Ch] 1 +
fidiv  dword ptr [ebp-14h] +
fstp  dword ptr [ebp-18h] +
fild  dword ptr [edi] +
fmul  dword ptr [ebp-18h] +
fld  ds:dbl_1006830 +
fadd st(1) st +
fxch  st(1) +
call _ftol2_sse  +
mov [ebp-58h] eax +
mov eax [ebp-1Ch] +
fild  dword ptr [eax] +
fmul  dword ptr [ebp-18h] +
fadd st st(1) +
call _ftol2_sse  +
mov [ebp-54h] eax +
mov eax [ebp-20h] +
fild  dword ptr [eax] +
fmul  dword ptr [ebp-18h] +
faddp st(1) st +
call _ftol2_sse  +
mov ecx [ebp-54h] +
mov [ebp-50h] eax +
add eax ecx +
add eax [ebp-58h] +
push 48h  +
mov [ebp-18h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-34h] eax +
mov [ebp-4] ebx +
cmp eax ebx +
jz loc_10303B8  +
lea ecx [ebp-60h] +
push ecx  +
push 26200Ah  +
push dword ptr [ebp-10h]  +
mov ecx eax +
push dword ptr [ebp-18h]  +
call sub_1033AB8  +
mov [esi+0A8h] eax +
add eax 4 +
push eax  +
lea ecx [ebp-38h] +
call sub_100B8C4  +
mov eax [ebp-58h] +
push ebx  +
push ebx  +
push ebx  +
push 2  +
push dword ptr [ebp-14h]  +
mov [ebp-28h] eax +
push dword ptr [edi]  +
mov eax [ebp-10h] +
push ebx  +
mov [ebp-24h] eax +
push ebx  +
lea eax [ebp-30h] +
push eax  +
add esi 64h +
push esi  +
lea ecx [ebp-38h] +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
call sub_100D01F  +
mov eax [ebp-58h] +
push ebx  +
push ebx  +
push ebx  +
push 2  +
push dword ptr [ebp-14h]  +
mov [ebp-30h] eax +
mov eax [ebp-54h] +
mov [ebp-28h] eax +
mov eax [ebp-1Ch] +
push dword ptr [eax]  +
lea eax [ebp-30h] +
push ebx  +
push dword ptr [edi]  +
lea ecx [ebp-38h] +
push eax  +
push esi  +
call sub_100D01F  +
mov eax [ebp-58h] +
mov ecx [ebp-54h] +
push ebx  +
push ebx  +
add ecx eax +
mov eax [ebp-50h] +
push ebx  +
push 2  +
push dword ptr [ebp-14h]  +
mov [ebp-28h] eax +
mov eax [ebp-20h] +
push dword ptr [eax]  +
mov eax [edi] +
mov [ebp-30h] ecx +
mov ecx [ebp-1Ch] +
add eax [ecx] +
push ebx  +
push eax  +
lea eax [ebp-30h] +
push eax  +
push esi  +
lea ecx [ebp-38h] +
call sub_100D01F  +
push dword ptr [ebp-38h]  +
call GdipDeleteGraphics  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103132C  +
push [ebp+arg_C]  +
lea ecx [esi+30h] +
mov dword ptr [esi] offset off_1031164 +
call sub_100CF7C  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
call sub_100208C  +
push 30h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1033B15  +
push dword ptr [ebp+8]  +
call sub_1033B22  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
push 0  +
push [ebp+arg_0]  +
lea edi [esi+4] +
mov ecx edi +
mov dword ptr [esi] offset off_100C21C +
call sub_100CDED  +
and dword ptr [esi+14h] 0 +
and dword ptr [esi+28h] 0 +
and dword ptr [esi+2Ch] 0 +
mov ecx edi +
call sub_100CFB1  +
mov ecx edi +
mov [esi+18h] eax +
call sub_100CFE8  +
mov ecx edi +
mov [esi+1Ch] eax +
call sub_100CD8C  +
mov edx eax +
push edx  +
call sub_103102E  +
push edx  +
mov [esi+24h] eax +
call sub_1031384  +
mov [esi+20h] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
push 48h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1033BB5  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1033BC2  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1033B22  +
push [ebp+arg_4]  +
lea ecx [esi+30h] +
mov dword ptr [esi] offset off_1031164 +
call sub_100CF7C  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp-4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipGetTextureImage  +
push eax  +
mov ecx esi +
call sub_100B289  +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_1033C38  +
mov ecx [esi+8] +
mov edx [ebp-4] +
mov dword ptr [eax] offset off_100B2A4 +
mov [eax+4] edx +
mov [eax+8] ecx +
mov esi eax +
test esi esi +
jz loc_1045F89  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
xor esi esi +
jmp loc_1033C2B  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+14h]  +
push 0  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_1033D8D  +
push dword ptr [ebp+18h]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+20h] +
mov dword ptr [esi] offset off_10311B8 +
call sub_100CF33  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+60h] +
call sub_1033D1B  +
and dword ptr [esi+0A8h] 0 +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_10338FA  +
mov eax esi +
call sub_1002061  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov esi ecx +
lea edi [ebx+4] +
mov ecx edi +
call sub_100CD8C  +
push eax  +
mov ecx edi +
call sub_100CFE8  +
push eax  +
mov ecx edi +
call sub_100CFB1  +
push eax  +
mov ecx esi +
call sub_103132C  +
add ebx 30h +
push ebx  +
lea ecx [esi+30h] +
mov dword ptr [esi] offset off_1031164 +
call sub_100CF7C  +
lea eax [esi+4] +
push eax  +
lea ecx [ebp+var_8] +
call sub_100B8C4  +
push 0  +
push 0  +
push edi  +
lea ecx [ebp+var_8] +
call sub_1030A2A  +
push [ebp+var_8]  +
call GdipDeleteGraphics  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
fild  [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
push ecx  +
mov [esi+8] eax +
fstp  [esp+10h+var_10] +
lea eax [ebp+arg_8] +
lea edi [esi+0Ch] +
push eax  +
mov ecx edi +
mov dword ptr [esi] offset off_100E8C0 +
mov [ebp+arg_8] 0FF000000h +
call sub_100B88A  +
push 0  +
push [ebp+arg_4]  +
lea ebx [esi+14h] +
mov ecx ebx +
call sub_1033599  +
push ebx  +
mov ecx edi +
call sub_100E022  +
push [ebp+arg_C]  +
mov ecx esi +
call sub_1033DF4  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor edx edx +
sub eax edx +
jnz loc_1047E03  +
push edx  +
add ecx 14h +
call sub_1033E18  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi+4]  +
call GdipSetTextureWrapMode  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp-4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipGetTextureWrapMode  +
push eax  +
mov ecx esi +
call sub_100B289  +
mov eax [ebp-4] +
pop esi  +
leave   +
retn   +
***
cmp [ebp+arg_14] 0 +
fst  dword ptr [eax] +
mov edx [ebp+arg_8] +
fst  dword ptr [eax+8] +
fst  dword ptr [eax+0Ch] +
fld  dword ptr [ecx] +
fstp  dword ptr [edx] +
fld  dword ptr [ecx+8] +
fstp  dword ptr [edx+8] +
fld  dword ptr [ecx+0Ch] +
fstp  dword ptr [edx+0Ch] +
jz loc_1033ECC  +
fstp  dword ptr [eax+10h] +
fld  dword ptr [ecx+10h] +
fstp  dword ptr [edx+10h] +
jmp loc_1032EE4  +
fstp  st(1) +
fstp  st +
jmp loc_1032EE3  +
fstp  st +
jmp loc_1032EE4  +
***
xor eax eax +
inc eax  +
jmp loc_1033412  +
***
fld  st(2) +
fucomp  st(4) +
fnstsw  ax +
test ah 44h +
jnp loc_1046383  +
fld  [ebp+arg_4] +
fld  [ebp+var_4] +
fld  st(3) +
fmulp st(1) st +
fsubp st(1) st +
fdivrp st(4) st +
fxch  st(3) +
fchs   +
fstp  [ebp+arg_4] +
fxch  st(1) +
fcomp  [ebp+arg_4] +
fnstsw  ax +
test ah 5 +
jp loc_103336D  +
fxch  st(1) +
fcomp  [ebp+arg_4] +
fnstsw  ax +
test ah 41h +
jnz loc_10325FB  +
fld  [ebp+var_8] +
mov eax [ebp+arg_10] +
fld  st(1) +
fmulp st(1) st +
fadd  dword ptr [esi] +
fstp  dword ptr [eax] +
fld  [ebp+var_4] +
fld  st(1) +
fmulp st(1) st +
fadd  dword ptr [esi+4] +
fstp  dword ptr [eax+4] +
mov eax [ebp+arg_14] +
fstp  dword ptr [eax] +
mov eax [ebp+arg_18] +
fld  [ebp+arg_4] +
fstp  dword ptr [eax] +
jmp loc_10325FF  +
***
fld  dword ptr [esi-8] +
lea eax [ebp+var_14] +
fstp  [ebp+var_1C] +
push eax  +
fld  dword ptr [esi-4] +
lea eax [ebp+var_1C] +
fstp  [ebp+var_18] +
push eax  +
fld  dword ptr [esi+0Ch] +
fstp  [ebp+var_2C] +
fld  dword ptr [esi+10h] +
fstp  [ebp+var_28] +
fld  dword ptr [esi+20h] +
fstp  [ebp+var_24] +
fld  dword ptr [esi+24h] +
fstp  [ebp+var_20] +
fld  dword ptr [esi+34h] +
fstp  [ebp+var_14] +
fld  dword ptr [esi+38h] +
fstp  [ebp+var_10] +
call sub_1031867  +
lea eax [ebp+var_24] +
fstp  [ebp+arg_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_1031867  +
fstp  [ebp+arg_8] +
cmp edi 1 +
jz loc_10463B5  +
cmp edi 2 +
jnz loc_10324EB  +
fld  [ebp+arg_10] +
sub esp 0Ch +
fstp  [esp+44h+var_3C] +
fldz   +
fstp  [esp+44h+var_40] +
fld  [ebp+arg_8] +
fmul  [ebp+arg_10] +
fdiv  dword ptr [esi+4Ch] +
fstp  [ebp+arg_8] +
fld  [ebp+arg_8] +
fstp  [esp+44h+var_44] +
call sub_100CE39  +
fstp  dword ptr [esi+2Ch] +
fld  [ebp+arg_10] +
sub esp 0Ch +
fstp  [esp+44h+var_3C] +
fldz   +
fstp  [esp+44h+var_40] +
fld  [ebp+arg_4] +
fmul  [ebp+arg_10] +
fdiv  dword ptr [esi+48h] +
fstp  [ebp+arg_8] +
fld  [ebp+arg_8] +
fstp  [esp+44h+var_44] +
call sub_100CE39  +
fstp  dword ptr [esi+40h] +
jmp loc_10324EB  +
***
movzx ecx byte ptr [ebp+arg_8+1] +
mov [ebp+arg_20] ecx +
movzx eax al +
fild  [ebp+arg_20] +
fmulp st(1) st +
fld  ds:dbl_100DFB0 +
fdivr st st(1) +
fstp  [ebp+arg_20] +
fld  [ebp+arg_20] +
fld  st +
fld1   +
mov [ebp+arg_20] eax +
fsubrp st(1) st +
fstp  [ebp+arg_24] +
fild  [ebp+arg_20] +
fld  [ebp+arg_24] +
fld  st +
fmulp st(2) st +
fxch  st(1) +
call _ftol2  +
fxch  st(2) +
mov bl al +
call _ftol2  +
add bl al +
movzx eax byte ptr [esi+2] +
mov [ebp+arg_20] eax +
mov [esi+3] bl +
fild  [ebp+arg_20] +
fld  st(2) +
fmulp st(1) st +
call _ftol2  +
fld  st +
mov bl al +
movzx eax byte ptr [ebp+arg_10+3] +
mov [ebp+arg_20] eax +
fild  [ebp+arg_20] +
fmulp st(1) st +
call _ftol2  +
fld  st +
add bl al +
movzx eax byte ptr [ebp+arg_C+3] +
mov [ebp+arg_20] eax +
mov [esi+2] bl +
fild  [ebp+arg_20] +
fmulp st(1) st +
call _ftol2  +
fld  st(1) +
mov bl al +
movzx eax byte ptr [esi+1] +
mov [ebp+arg_20] eax +
fild  [ebp+arg_20] +
fmulp st(1) st +
call _ftol2  +
add bl al +
movzx eax byte ptr [esi] +
mov [ebp+arg_20] eax +
mov [esi+1] bl +
fild  [ebp+arg_20] +
fmulp st(2) st +
fxch  st(1) +
call _ftol2  +
mov bl al +
movzx eax byte ptr [ebp+arg_4] +
mov [ebp+arg_20] eax +
fild  [ebp+arg_20] +
fmulp st(1) st +
call _ftol2  +
add bl al +
mov [esi] bl +
jmp loc_1033202  +
***
and [ebp+arg_10] 0 +
mov ecx [ebp+arg_10] +
jmp loc_1031EB1  +
lea eax [ebp+var_64] +
push eax  +
lea eax [ebp+var_50] +
jmp loc_1031F66  +
***
mov [ebp-38h] eax +
jmp loc_1032B40  +
***
mov [edx] ecx +
jmp loc_100EFF5  +
***
fld  [ebp+arg_C] +
lea eax [ebp+var_3C] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
push ecx  +
fstp  [esp+64h+var_64] +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebp+var_20] +
push eax  +
push [ebp+arg_14]  +
add eax 0FFFFFFF0h +
push [ebp+arg_14]  +
push eax  +
call sub_1034172  +
inc dword ptr [ebx]  +
cmp [ebp+arg_4] 0 +
mov ecx [ebp+arg_18] +
mov eax [ebx] +
mov ecx [ecx] +
mov edx [ebp+var_10] +
mov [ecx+eax*8] edx +
mov edx [ebp+var_C] +
mov [ecx+eax*8+4] edx +
jnz loc_1046649  +
inc dword ptr [ebx]  +
mov ecx [ebp+arg_18] +
mov edx [ebp+var_2C] +
mov eax [ebx] +
mov ecx [ecx] +
mov [ecx+eax*8] edx +
mov edx [ebp+var_28] +
jmp loc_1032801  +
cmp esi 2 +
jg loc_1032719  +
jmp loc_1032864  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push esi  +
push edi  +
call sub_1031867  +
fstp  [ebp+var_4] +
mov ebx [ebp+arg_C] +
push ebx  +
push [ebp+arg_8]  +
call sub_1031867  +
fstp  [ebp+arg_C] +
fld  [ebp+var_4] +
fld  ds:dbl_1006830 +
fmul st(1) st +
fmul  [ebp+arg_C] +
fcom  st(1) +
fnstsw  ax +
test ah 41h +
jz loc_1046416  +
fstp  st(1) +
mov eax [ebp+arg_1C] +
fstp  [ebp+arg_0] +
fld  [ebp+arg_18] +
fstp  [ebp+arg_4] +
fld  dword ptr [eax+4] +
fstp  [ebp+var_18] +
fld  dword ptr [eax] +
mov eax [ebp+arg_20] +
fchs   +
fstp  [ebp+var_14] +
fld  dword ptr [eax+4] +
fstp  [ebp+var_10] +
fld  dword ptr [eax] +
fchs   +
fstp  [ebp+var_C] +
fld  [ebp+var_14] +
fmul  [ebp+var_C] +
fld  [ebp+var_10] +
fmul  [ebp+var_18] +
faddp st(1) st +
fstp  [ebp+var_C] +
fld  [ebp+var_C] +
fcomp  ds:dbl_10342F8 +
fnstsw  ax +
test ah 5 +
jnp loc_104641D  +
fld  [ebp+arg_0] +
fld  [ebp+arg_4] +
fcompp st(1) st +
fnstsw  ax +
test ah 41h +
jnz loc_10342EC  +
fld  [ebp+arg_0] +
fstp  [ebp+arg_18] +
fld  [ebp+arg_18] +
fdiv  [ebp+var_4] +
fstp  [ebp+arg_4] +
fld  [ebp+arg_4] +
fld1   +
fld  st +
fsubrp st(2) st +
fxch  st(1) +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
fmul  dword ptr [esi] +
fstp  [ebp+var_10] +
fld  dword ptr [esi+4] +
mov esi [ebp+arg_10] +
fmul  [ebp+arg_0] +
fstp  [ebp+var_C] +
fld  dword ptr [edi] +
fmul  [ebp+arg_4] +
fstp  [ebp+var_18] +
fld  dword ptr [edi+4] +
mov edi [ebp+arg_14] +
fmul  [ebp+arg_4] +
push edi  +
push esi  +
fstp  [ebp+var_14] +
fld  [ebp+var_18] +
fadd  [ebp+var_10] +
fstp  [ebp+var_8] +
mov eax [ebp+var_8] +
fld  [ebp+var_14] +
mov [esi] eax +
fadd  [ebp+var_C] +
fstp  [ebp+var_4] +
mov eax [ebp+var_4] +
fld  [ebp+arg_18] +
mov [esi+4] eax +
fdiv  [ebp+arg_C] +
mov eax [ebp+arg_8] +
fstp  [ebp+arg_4] +
fld  dword ptr [ebx] +
fmul  [ebp+arg_4] +
fstp  [ebp+var_10] +
fld  dword ptr [ebx+4] +
fmul  [ebp+arg_4] +
fstp  [ebp+var_C] +
fsub  [ebp+arg_4] +
fstp  [ebp+arg_4] +
fld  dword ptr [eax] +
fmul  [ebp+arg_4] +
fstp  [ebp+var_18] +
fld  dword ptr [eax+4] +
fmul  [ebp+arg_4] +
fstp  [ebp+var_14] +
fld  [ebp+var_18] +
fadd  [ebp+var_10] +
fstp  [ebp+var_8] +
mov eax [ebp+var_8] +
fld  [ebp+var_14] +
mov [edi] eax +
fadd  [ebp+var_C] +
fstp  [ebp+var_4] +
mov eax [ebp+var_4] +
mov [edi+4] eax +
call sub_1032FD1  +
fcomp  ds:flt_10342F4 +
fnstsw  ax +
test ah 5 +
jnp loc_104642E  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
fld  [ebp+arg_4] +
jmp loc_103421D  +
***
fld  [ebp+var_38] +
lea eax [ebp+var_68] +
fsub  [ebp+var_40] +
push eax  +
lea eax [ebp+var_70] +
push eax  +
fstp  [ebp+var_68] +
fld  [ebp+var_34] +
fsub  [ebp+var_3C] +
fstp  [ebp+var_64] +
fld  [ebp+var_48] +
fsub  [ebp+var_50] +
fstp  [ebp+var_70] +
fld  [ebp+var_44] +
fsub  [ebp+var_4C] +
fstp  [ebp+var_6C] +
call sub_10343FA  +
mov ecx [edi] +
test al al +
mov eax [esi] +
jnz loc_1046D77  +
imul eax eax +
fld  [ebp+var_48] +
fstp  dword ptr [eax+ecx+0Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_44] +
imul eax eax +
fstp  dword ptr [eax+ecx+10h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+1Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_38] +
imul eax eax +
fstp  dword ptr [eax+ecx+20h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_34] +
imul eax eax +
fstp  dword ptr [eax+ecx+24h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+30h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_58] +
imul eax eax +
fstp  dword ptr [eax+ecx+34h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_54] +
imul eax eax +
fstp  dword ptr [eax+ecx+38h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+44h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_58] +
imul eax eax +
fstp  dword ptr [eax+ecx+48h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_54] +
imul eax eax +
fstp  dword ptr [eax+ecx+4Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+58h] +
mov eax [esi] +
mov ecx [edi] +
imul eax eax +
mov dword ptr [eax+ecx+4] 2 +
jmp loc_1032370  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
fld  dword ptr [eax+4] +
mov ecx [ebp+arg_0] +
fmul  dword ptr [ecx] +
fld  dword ptr [ecx+4] +
fmul  dword ptr [eax] +
fcompp st(1) st +
fnstsw  ax +
test ah 41h +
jz loc_1046369  +
xor eax eax +
pop ebp  +
retn 8  +
***
dec edx  +
fstp  st(1) +
mov [ebp+arg_C] edx +
fild  [ebp+arg_C] +
fstp  [ebp+arg_C] +
jmp loc_103248E  +
fstp  st +
jmp loc_10324FD  +
***
mov byte ptr [ebp+arg_8] 1 +
cmp [edi+90h] edx +
jz loc_10320A7  +
jmp loc_10320A4  +
***
cmp dword ptr [esi+90h] 0 +
jz loc_1032D2A  +
jmp loc_1032D22  +
fild  dword ptr [ebp+0Ch] +
jmp loc_1032DA3  +
***
cmp [ebp+arg_1C] edi +
jle loc_1032F31  +
fstp  [ebp+arg_10] +
xor ecx ecx +
fild  [ebp+arg_1C] +
inc ecx  +
mov [ebp+var_8] ecx +
fstp  [ebp+var_14] +
cmp eax ecx +
jbe loc_1034529  +
mov eax [ebp+arg_14] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_4] +
add eax 0Ch +
add esi 8 +
mov [ebp+arg_1C] ebx +
mov [ebp+var_10] eax +
mov [ebp+var_18] esi +
jmp loc_10344AA  +
fstp  st +
jmp loc_1032FBF  +
push esi  +
push [ebp+arg_1C]  +
call sub_1032FD1  +
fstp  [ebp+arg_20] +
fld  [ebp+arg_20] +
fld  [ebp+arg_C] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jp loc_1034514  +
fld  [ebp+arg_20] +
call _CIsqrt  +
fstp  [ebp+arg_20] +
fld  [ebp+arg_20] +
fstp  [ebp+arg_20] +
fld  [ebp+arg_20] +
fadd  [ebp+arg_10] +
fstp  [ebp+arg_10] +
fld  [ebp+arg_10] +
fld  [ebp+var_14] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jnp loc_10464C4  +
mov ecx [esi] +
add [ebp+var_C] 0Ch +
inc edi  +
cmp [ebp+arg_4] 0 +
lea eax [ebx+edi*8] +
mov [eax] ecx +
mov ecx [esi+4] +
mov [ebp+var_4] edi +
mov [ebp+arg_1C] eax +
mov [eax+4] ecx +
jnz loc_10464B0  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add [ebp+var_10] 0Ch +
add esi 8 +
mov [ebp+var_18] esi +
cmp eax [ebp+arg_8] +
jb loc_10344AA  +
fld  [ebp+arg_10] +
jmp loc_1032FB8  +
***
inc esi  +
inc esi  +
jmp loc_10329EC  +
***
mov esi [esi] +
cmp esi 2 +
jle loc_10323CB  +
push 2  +
push esi  +
push dword ptr [edi]  +
push [ebp+arg_0]  +
call sub_1034565  +
jmp loc_10323CB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
fild  dword ptr [eax+4] +
push edi  +
mov edi [ebp+arg_C] +
mov eax edi +
mov [ebp+arg_C] eax +
fstp  [ebp+arg_0] +
fild  [ebp+arg_C] +
test eax eax +
jl loc_10467D4  +
fstp  [ebp+arg_C] +
mov eax [ebp+arg_8] +
fld  [ebp+arg_0] +
sub eax edi +
fmul  ds:dbl_1006830 +
fadd  ds:dbl_1031550 +
fdiv  [ebp+arg_C] +
fstp  [ebp+var_8] +
fld  [ebp+arg_0] +
fstp  [ebp+var_C] +
cmp edi 1 +
jb loc_10346C0  +
mov ecx eax +
sub ecx [ebp+arg_8] +
imul eax eax +
push ebx  +
lea ebx [ecx+edi+1] +
mov ecx [ebp+arg_4] +
push esi  +
lea esi [eax+ecx+34h] +
mov eax ebx +
mov [ebp+arg_8] eax +
fild  [ebp+arg_8] +
test eax eax +
jl loc_10467DF  +
fstp  [ebp+arg_8] +
fld  [ebp+arg_8] +
fmul  ds:dbl_10346C8 +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
call _CItan  +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
mov eax edi +
fmul  [ebp+arg_8] +
sub eax ebx +
mov [ebp+var_10] eax +
fmul  [ebp+var_8] +
fstp  [ebp+arg_8] +
fld  [ebp+var_C] +
fld  st +
fld  [ebp+arg_8] +
fld  st +
fsubp st(2) st +
fld  st +
fmul  dword ptr [esi] +
fld  dword ptr [esi-14h] +
fmul st st(3) +
faddp st(1) st +
fld  st(3) +
fdivp st(1) st +
fstp  [ebp+arg_8] +
fld  st +
fmul  dword ptr [esi-14h] +
fld  dword ptr [esi] +
fmul st st(3) +
faddp st(1) st +
fld  st(3) +
fdivp st(1) st +
fstp  [ebp+arg_0] +
fld  dword ptr [esi+4] +
fld  st(1) +
fmulp st(1) st +
fld  dword ptr [esi-10h] +
fmul st st(3) +
faddp st(1) st +
fld  st(3) +
fdivp st(1) st +
fstp  [ebp+arg_4] +
fmul  dword ptr [esi-10h] +
fld  dword ptr [esi+4] +
fmulp st(2) st +
faddp st(1) st +
fdivrp st(1) st +
fstp  [ebp+var_4] +
fld  [ebp+arg_8] +
fstp  dword ptr [esi-14h] +
fld  [ebp+arg_0] +
fstp  dword ptr [esi] +
fld  [ebp+arg_4] +
fstp  dword ptr [esi-10h] +
fld  [ebp+var_4] +
fstp  dword ptr [esi+4] +
fild  [ebp+var_10] +
test eax eax +
jl loc_10467EA  +
fdiv  [ebp+arg_C] +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
fst  dword ptr [esi-4] +
fst  dword ptr [esi+10h] +
cmp ebx edi +
jz loc_10346D0  +
fld  [ebp+arg_8] +
fstp  dword ptr [esi+3Ch] +
fld  [ebp+arg_0] +
fstp  dword ptr [esi+78h] +
fld  [ebp+arg_4] +
fstp  dword ptr [esi+40h] +
fld  [ebp+var_4] +
fstp  dword ptr [esi+7Ch] +
fst  dword ptr [esi+4Ch] +
fstp  dword ptr [esi+88h] +
add esi 64h +
inc ebx  +
cmp ebx edi +
jbe loc_10345CB  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 10h  +
fstp  st +
jmp loc_10346B2  +
***
fld  [ebp+arg_1C] +
push ecx  +
fstp  [esp+80h+var_80] +
push [ebp+arg_C]  +
lea eax [ebp+arg_C] +
push 2  +
push [ebp+arg_24]  +
push eax  +
push ebx  +
push edi  +
call sub_1034704  +
mov byte ptr [ebp+arg_28+3] al +
jmp loc_10320F9  +
mov [ebp+var_1] 0 +
jmp loc_10323CB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
fild  [ebp+arg_10] +
sub esp 24h +
test eax eax +
jl loc_1046782  +
mov eax [ebp+arg_0] +
fstp  [ebp+var_8] +
fild  dword ptr [eax+4] +
mov eax [eax+94h] +
mov [ebp+arg_0] eax +
fmul  ds:dbl_1006830 +
fadd  ds:dbl_1031550 +
fdiv  [ebp+var_8] +
fstp  [ebp+var_4] +
test eax eax +
jz loc_103475B  +
fld  [ebp+var_8] +
fmul  [ebp+var_4] +
fadd  [ebp+arg_18] +
fild  [ebp+arg_0] +
fcompp st(1) st +
fnstsw  ax +
test ah 41h +
jnz loc_104678D  +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_14] +
push ebx  +
push esi  +
lea esi [ecx+edx*8] +
fld  dword ptr [esi-8] +
lea eax [ecx+edx*8-10h] +
fsub  dword ptr [eax] +
xor ebx ebx +
inc ebx  +
mov byte ptr [ebp+arg_0+3] bl +
fstp  [ebp+var_14] +
fld  dword ptr [esi-4] +
fsub  dword ptr [eax+4] +
lea eax [ebp+var_14] +
push eax  +
fstp  [ebp+var_10] +
call sub_103260C  +
mov [ebp+arg_18] ebx +
cmp [ebp+arg_10] ebx +
jb loc_103484E  +
push edi  +
mov edi [ebp+arg_C] +
mov ebx esi +
mov eax [ebp+arg_18] +
fild  [ebp+arg_18] +
test eax eax +
jl loc_1046796  +
fstp  [ebp+arg_4] +
fld  [ebp+var_14] +
fmul  [ebp+arg_4] +
fstp  [ebp+var_1C] +
fld  [ebp+var_10] +
fmul  [ebp+arg_4] +
fstp  [ebp+var_18] +
fld  [ebp+var_1C] +
fmul  [ebp+var_4] +
fstp  [ebp+var_24] +
fld  [ebp+var_18] +
fmul  [ebp+var_4] +
fstp  [ebp+var_20] +
fld  dword ptr [esi-8] +
fadd  [ebp+var_24] +
fstp  [ebp+var_C] +
mov eax [ebp+var_C] +
fld  dword ptr [esi-4] +
mov [ebx] eax +
fadd  [ebp+var_20] +
fstp  [ebp+var_8] +
mov eax [ebp+var_8] +
mov [ebx+4] eax +
fild  dword ptr [edi] +
fld  [ebp+var_C] +
fcom  st(1) +
fnstsw  ax +
fstp  st(1) +
test ah 5 +
jnp loc_10467A1  +
fild  dword ptr [edi+8] +
fcomp  st(1) +
fnstsw  ax +
test ah 5 +
jnp loc_10467AD  +
fstp  st +
fild  dword ptr [edi+4] +
fld  [ebp+var_8] +
fcom  st(1) +
fnstsw  ax +
fstp  st(1) +
test ah 5 +
jnp loc_10467BA  +
fild  dword ptr [edi+0Ch] +
fcomp  st(1) +
fnstsw  ax +
test ah 5 +
jnp loc_10467C7  +
fstp  st +
inc [ebp+arg_18]  +
mov eax [ebp+arg_18] +
add ebx 8 +
cmp eax [ebp+arg_10] +
jbe loc_103479C  +
pop edi  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_10] +
add [eax] ecx +
pop esi  +
pop ebx  +
mov al byte ptr [ebp+arg_0+3] +
leave   +
retn 1Ch  +
***
mov [ebp+var_4] eax +
jmp loc_10330AC  +
lea ebx [eax-1] +
mov [ebp+arg_C] ebx +
jmp loc_10330C6  +
***
cmp [esi+94h] ebx +
jz loc_1033AAD  +
push 48h  +
mov [ebp-4Ch] bl +
mov [ebp-58h] ebx +
mov [ebp-54h] ebx +
mov [ebp-50h] ebx +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-24h] ecx +
mov dword ptr [ebp-4] 1 +
cmp ecx ebx +
jz loc_10303BF  +
lea eax [ebp-60h] +
push eax  +
push 26200Ah  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-18h]  +
call sub_1033AB8  +
mov [esi+0A8h] eax +
add eax 4 +
push eax  +
lea ecx [ebp-28h] +
call sub_100B8C4  +
mov eax [ebp-18h] +
push ebx  +
push ebx  +
push ebx  +
push 2  +
push dword ptr [ebp-14h]  +
mov [ebp-40h] eax +
push dword ptr [ebp-34h]  +
mov eax [ebp-10h] +
push ebx  +
mov [ebp-3Ch] eax +
push ebx  +
lea eax [ebp-48h] +
push eax  +
add esi 64h +
push esi  +
lea ecx [ebp-28h] +
mov [ebp-48h] ebx +
mov [ebp-44h] ebx +
call sub_100D01F  +
push dword ptr [ebp-28h]  +
jmp loc_1033AA8  +
***
call sub_100208C  +
mov esi offset rc +
push esi  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_1034983  +
push dword_108A22C  +
lea ecx [ebp-30h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
push 5  +
lea ecx [ebp-30h] +
call ?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z  +
push 6  +
lea ecx [ebp-30h] +
mov ebx eax +
call ?SetROP2@CDC@@QAEHH@Z  +
mov ecx dword_108A22C +
lea edi [ebp-1Ch] +
movs   +
movs   +
movs   +
lea eax [ebp-1Ch] +
push eax  +
movs   +
call sub_1008309  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-30h] +
call sub_1034A1B  +
push ebx  +
lea ecx [ebp-30h] +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
call ??1CClientDC@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
cmp [ebp+arg_0] esi +
jnz loc_10349B2  +
call sub_1034908  +
push esi  +
push esi  +
push esi  +
push esi  +
push offset rc  +
call ds:SetRect  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_100A1F3  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword_108A22C eax +
jnz loc_10349FE  +
call sub_1034908  +
pop ebp  +
retn 8  +
***
call sub_1034908  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push offset rc  +
call ds:SetRect  +
retn 8  +
***
mov dword_108A22C eax +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push offset rc  +
call ds:SetRect  +
jmp loc_10349DC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push dword ptr [ecx+4]  +
call ds:Rectangle  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+20h]  +
mov [ebp+var_4] ecx +
call ds:GetClientRect  +
fld  qword ptr [ebx+50h] +
mov eax [ebp+Rect.right] +
fadd st st +
sub eax [ebp+Rect.left] +
mov esi [ebx+40h] +
fild  dword ptr [esi+2Ch] +
mov [ebp+var_C] eax +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
fmul st st(1) +
fild  [ebp+var_C] +
mov [ebp+var_8] eax +
fcomp  st(1) +
fnstsw  ax +
test ah 41h +
jz loc_103F943  +
fstp  st +
fild  dword ptr [esi+30h] +
fmul st st(1) +
fild  [ebp+var_8] +
fcomp  st(1) +
fnstsw  ax +
test ah 41h +
jz loc_103F950  +
fstp  st +
fild  [ebp+var_C] +
mov eax [ebp+arg_4] +
mov esi [eax+10h] +
mov edi [eax+14h] +
fdiv st st(1) +
mov [ebp+rc1.left] esi +
mov [ebp+rc1.top] edi +
fiadd  [ebp+rc1.left] +
call _ftol2_sse  +
fidivr  [ebp+var_8] +
mov [ebp+rc1.right] eax +
fiadd  [ebp+rc1.top] +
call _ftol2_sse  +
mov [ebp+rc1.bottom] eax +
sub eax edi +
cdq   +
sub eax edx +
sar eax 1 +
neg eax  +
push eax  +
mov eax [ebp+rc1.right] +
sub eax esi +
mov esi ds:OffsetRect +
cdq   +
sub eax edx +
sar eax 1 +
neg eax  +
push eax  +
lea eax [ebp+rc1] +
push eax  +
call esi  +
mov ecx [ebp+rc1.left] +
test ecx ecx +
jl loc_103F95D  +
mov eax [ebx+40h] +
mov ecx [eax+2Ch] +
sub ecx [ebp+rc1.right] +
test ecx ecx +
jle loc_1034B10  +
xor ecx ecx +
mov eax [ebp+rc1.top] +
test eax eax +
jl loc_103F964  +
mov eax [ebx+40h] +
mov eax [eax+30h] +
sub eax [ebp+rc1.bottom] +
test eax eax +
jle loc_1034B2A  +
xor eax eax +
push eax  +
push ecx  +
lea eax [ebp+rc1] +
push eax  +
call esi  +
mov edi offset rc +
push edi  +
lea eax [ebp+rc1] +
push eax  +
call ds:EqualRect  +
test eax eax +
jnz loc_1034B63  +
mov ecx [ebp+var_4] +
call sub_1034908  +
mov ecx [ebp+var_4] +
lea esi [ebp+rc1] +
movs   +
movs   +
movs   +
mov dword_108A22C ebx +
movs   +
call sub_1034908  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1030468  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov dword_108A238 1 +
mov dword_108A22C esi +
call sub_1034908  +
mov eax [ebp+arg_4] +
xor edi edi +
mov ecx esi +
cmp [eax+18h] edi +
jz loc_1034CFC  +
call sub_1034E15  +
test al al +
jz loc_1034BE8  +
or eax 0FFFFFFFFh +
sub eax rc.top +
mov ecx esi +
push eax  +
or eax 0FFFFFFFFh +
sub eax rc.left +
push eax  +
call sub_1010728  +
push edi  +
push edi  +
push edi  +
push edi  +
push offset rc  +
call ds:SetRect  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
add eax [edi] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fmul  qword ptr [esi+50h] +
fld  ds:dbl_1008390 +
fadd st(1) st +
fxch  st(1) +
fadd st st(2) +
call _ftol2_sse  +
mov [edi] eax +
mov eax [esi+5Ch] +
add eax [edi+4] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fmul  qword ptr [esi+50h] +
faddp st(1) st +
jmp loc_100837D  +
***
sub eax 5 +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fild  dword ptr [esi+58h] +
fmul  qword ptr [esi+50h] +
fsubp st(1) st +
fadd st st(1) +
call _ftol2_sse  +
mov [edi] eax +
mov eax [edi+4] +
sub eax 5 +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fild  dword ptr [esi+5Ch] +
fmul  qword ptr [esi+50h] +
fsubp st(1) st +
faddp st(1) st +
jmp loc_100A622  +
***
push edi  +
push 1  +
call sub_1009F8B  +
call sub_10049FD  +
push dword ptr [esi+40h]  +
call sub_1005C6C  +
mov ecx esi +
call sub_10303DC  +
push ebx  +
push ebx  +
mov ecx esi +
mov dword_108AF30 ebx +
call sub_10084D4  +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov edi eax +
cmp edi ebx +
jz loc_1034CCD  +
push offset off_1009BE0  +
mov ecx edi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_1034CCD  +
fld1   +
mov ecx edi +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 1 +
jnz loc_1034E69  +
call sub_1034D64  +
push 1  +
push ebx  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
call sub_1006239  +
fld  [ebp+arg_0] +
fdiv  qword ptr [esi+50h] +
mov edi eax +
fld  [ebp+arg_0] +
fstp  qword ptr [esi+50h] +
cmp edi ebx +
jnz loc_10405AA  +
fstp  st +
pop edi  +
jmp loc_1010441  +
***
call sub_1034D0B  +
jmp loc_1034BE8  +
***
fld  ds:dbl_1010280 +
push esi  +
push 0Ah  +
mov esi ecx +
pop ecx  +
fcomp  qword ptr [esi+50h] +
fnstsw  ax +
test ah 1 +
jnz loc_1034D2F  +
test ecx ecx +
jle loc_1034D2F  +
fld  qword ptr ds:locret_1010228[ecx*8] +
dec ecx  +
jmp loc_1034D17  +
fld  ds:dbl_1010230[ecx*8] +
fld  qword ptr [esi+50h] +
fucomp  st(1) +
fnstsw  ax +
test ah 44h +
jnp loc_1040832  +
push 1  +
push ecx  +
push ecx  +
mov ecx esi +
fstp  [esp+10h+var_10] +
call sub_1010425  +
mov ecx esi +
call sub_100FBC7  +
mov al 1 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1034D7D  +
test eax eax +
jnz loc_1042D4F  +
pop esi  +
retn   +
***
mov ecx [ecx+50h] +
xor eax eax +
test ecx ecx +
jnz loc_10428D5  +
retn   +
***
cmp dword_108A1D0 0 +
jz loc_103F556  +
push 0CC0020h  +
push [ebp+arg_24]  +
push ebx  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push edi  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:StretchBlt  +
jmp loc_1009917  +
***
push 3  +
lea ecx [ebp-2Ch] +
mov [ebp-5Ch] ebx +
call ?SetStretchBltMode@CDC@@QAEHH@Z  +
jmp loc_10095A0  +
xor eax eax +
jmp loc_102E758  +
xor eax eax +
jmp loc_1009690  +
***
fld  ds:dbl_1034E08 +
fcomp  qword ptr [esi+90h] +
fnstsw  ax +
test ah 1 +
jnz loc_1043BE6  +
mov dword ptr [esi+80h] 32h +
jmp loc_101056F  +
***
fld  ds:dbl_1010230 +
push esi  +
mov esi ecx +
xor ecx ecx +
fcomp  qword ptr [esi+50h] +
fnstsw  ax +
test ah 41h +
jp loc_1034E39  +
cmp ecx 0Ah +
jge loc_1034E39  +
fld  ds:dbl_1010238[ecx*8] +
inc ecx  +
jmp loc_1034E20  +
fld  ds:dbl_1010230[ecx*8] +
fld  qword ptr [esi+50h] +
fucomp  st(1) +
fnstsw  ax +
test ah 44h +
jnp loc_1040838  +
push 1  +
push ecx  +
push ecx  +
mov ecx esi +
fstp  [esp+10h+var_10] +
call sub_1010425  +
mov ecx esi +
call sub_100FBC7  +
mov al 1 +
pop esi  +
retn   +
***
call sub_1034E78  +
jmp loc_1034CCD  +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp dword_108B180 edi +
jnz loc_1042D69  +
pop edi  +
pop esi  +
retn   +
***
push dword ptr [edi+30h]  +
lea eax [ebp+rc] +
push dword ptr [edi+2Ch]  +
push ebx  +
push ebx  +
push eax  +
call ds:SetRect  +
lea esi [ebp+rc] +
jmp loc_100D196  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:GetPixel  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+40h] +
push edi  +
mov edi ecx +
mov ecx [eax+30h] +
mov eax [eax+2Ch] +
and [ebp+var_10.unused] 0 +
and [ebp+var_C] 0 +
mov [ebp+var_8] eax +
lea eax [ebp+var_10] +
mov [ebp+var_4] ecx +
push eax  +
mov ecx esi +
call sub_100A226  +
push [ebp+arg_4]  +
mov ecx edi +
push esi  +
call sub_1030468  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
call sub_100208C  +
xor ebx ebx +
cmp dword_108BC04 ebx +
jnz loc_103F756  +
mov esi 40000000h +
mov eax [ebp+8] +
mov dword_108A238 1 +
mov eax [eax+40h] +
push dword ptr [eax+0Ch]  +
mov [ebp-10h] ebx +
mov [ebp-14h] eax +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov edi eax +
cmp edi ebx +
jz loc_1035034  +
mov [ebp-18h] ebx +
mov dword ptr [ebp-1Ch] offset off_100A058 +
mov esi [ebp+0Ch] +
mov [ebp-4] ebx +
cmp [esi+20h] ebx +
jnz loc_103F7BA  +
mov eax dword_108A224 +
cmp [esi+18h] ebx +
jz loc_103F7CF  +
mov [ebp+8] eax +
mov eax dword_108B1D4 +
cmp eax ebx +
jnz loc_103F7D9  +
push dword ptr [ebp+8]  +
lea ecx [ebp-1Ch] +
call sub_100A0C1  +
test eax eax +
jz loc_103F7FE  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push dword ptr [esi+14h]  +
mov ecx edi +
push dword ptr [esi+10h]  +
mov [ebp+8] eax +
call sub_1034EAE  +
mov edx eax +
mov ecx eax +
shr edx 8 +
shr ecx 10h +
movzx ecx cl +
movzx edx dl +
movzx eax al +
cmp dword_108B1A8 ebx +
jnz loc_103F7F3  +
shl ecx 8 +
or ecx edx +
shl ecx 8 +
push 1  +
or ecx eax +
push ecx  +
push dword ptr [esi+14h]  +
mov ecx edi +
push dword ptr [esi+10h]  +
call sub_103504D  +
push dword ptr [ebp+8]  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push ebx  +
push dword ptr [ebp-14h]  +
call sub_1005D16  +
push ebx  +
push dword ptr [ebp-14h]  +
call sub_100D173  +
cmp [ebp-10h] ebx +
jnz loc_103F80F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov dword ptr [ebp-1Ch] offset off_100A058 +
call sub_1002407  +
mov esi 40000000h +
cmp dword_108BC04 ebx +
jnz loc_103F81F  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:ExtFloodFill  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebp+Rect] +
movs   +
movs   +
movs   +
lea eax [ebp+Rect] +
push eax  +
mov ebx ecx +
movs   +
call sub_1008309  +
push 5  +
push 5  +
lea eax [ebp+Rect] +
push eax  +
call ds:InflateRect  +
lea eax [ebp+Rect] +
push eax  +
mov ecx ebx +
call sub_10350B5  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax [esi+40h] +
push dword ptr [eax+30h]  +
push dword ptr [eax+2Ch]  +
lea eax [ebp+rc2] +
push 0  +
push 0  +
push eax  +
call ds:SetRect  +
lea eax [ebp+rc2] +
push eax  +
mov ecx esi +
call sub_1008309  +
push [ebp+lpRect]  +
lea eax [ebp+rc2] +
push eax  +
lea eax [ebp+rc1] +
push eax  +
call ds:UnionRect  +
lea eax [ebp+rc2] +
push eax  +
lea eax [ebp+rc1] +
push eax  +
call ds:EqualRect  +
test eax eax +
jz loc_1035F1C  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:PatBlt  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
fild  dword ptr [edi] +
mov esi ecx +
fmul  qword ptr [esi+50h] +
call _ftol2_sse  +
fild  dword ptr [edi+4] +
mov [edi] eax +
fmul  qword ptr [esi+50h] +
call _ftol2_sse  +
lea ebx [edi+8] +
fild  dword ptr [ebx] +
mov [edi+4] eax +
fmul  qword ptr [esi+50h] +
call _ftol2_sse  +
mov [ebx] eax +
lea eax [edi+0Ch] +
fild  dword ptr [eax] +
mov [ebp+arg_0] eax +
fmul  qword ptr [esi+50h] +
call _ftol2_sse  +
mov ecx [ebp+arg_0] +
push 2  +
push 2  +
push edi  +
mov [ecx] eax +
call ds:InflateRect  +
inc dword ptr [ebx]  +
mov eax [ebp+arg_0] +
inc dword ptr [eax]  +
fild  dword ptr [esi+5Ch] +
fmul  qword ptr [esi+50h] +
fld  ds:dbl_1008390 +
fadd st(1) st +
fxch  st(1) +
call _ftol2_sse  +
fild  dword ptr [esi+58h] +
push eax  +
fmul  qword ptr [esi+50h] +
faddp st(1) st +
call _ftol2_sse  +
push eax  +
push edi  +
call ds:OffsetRect  +
cmp dword_108B18C 0 +
jnz loc_104010B  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp dword_108A27C 0 +
jz loc_104334B  +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov edx [esi] +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
sub eax edx +
push edi  +
mov edi [esi+4] +
lea ebx [eax-0Ah] +
sub ecx edi +
lea eax [edx+eax-5] +
mov [ebp+var_14] eax +
lea eax [edi+ecx-5] +
mov edi ds:GetSysColor +
mov [ebp+var_4] ebx +
lea ebx [ecx-0Ah] +
push 5  +
mov [ebp+var_8] ebx +
mov [ebp+var_10] eax +
mov [ebp+arg_4] 2 +
call edi  +
push 0Dh  +
mov ebx eax +
call edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_C] eax +
mov eax [edi] +
push ebx  +
mov ecx edi +
call dword ptr [eax+38h]  +
push [ebp+var_C]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+34h]  +
push offset off_108A2F8  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
test [ebp+arg_8] 2 +
mov [ebp+arg_0] eax +
jz loc_1043355  +
mov eax [esi+4] +
add eax [ebp+arg_4] +
mov ebx 0F00021h +
push ebx  +
push 1  +
push [ebp+var_4]  +
mov ecx edi +
push eax  +
mov eax [esi] +
add eax 5 +
push eax  +
call sub_1035113  +
mov ecx [ebp+var_10] +
mov eax [ebp+arg_4] +
push ebx  +
push 1  +
push [ebp+var_4]  +
add eax ecx +
push eax  +
mov eax [esi] +
add eax 5 +
push eax  +
mov ecx edi +
call sub_1035113  +
test [ebp+arg_8] 1 +
jz loc_104336D  +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
push ebx  +
push [ebp+var_8]  +
add eax 5 +
push 1  +
push eax  +
mov eax [ebp+var_14] +
add ecx eax +
push ecx  +
mov ecx edi +
call sub_1035113  +
mov eax [esi+4] +
push ebx  +
push [ebp+var_8]  +
add eax 5 +
push 1  +
push eax  +
mov eax [esi] +
add eax [ebp+arg_4] +
mov ecx edi +
push eax  +
call sub_1035113  +
push [ebp+arg_0]  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
test al 1 +
jz loc_10085DE  +
xor ebx ebx +
inc ebx  +
mov [ebp-20h] ebx +
jmp loc_10085EC  +
test al 4 +
jz loc_10085F5  +
mov [ebp-24h] ebx +
jmp loc_1008600  +
mov [ebp-30h] ebx +
jmp loc_100861C  +
mov eax [ebp+0Ch] +
mov ecx [eax+4] +
mov eax [eax] +
push ebx  +
push 0  +
push 0  +
push dword ptr [ebp-40h]  +
push 5  +
push 5  +
push ecx  +
push eax  +
push dword ptr [esi+4]  +
call edi  +
jmp loc_100868F  +
mov ecx [ebp+0Ch] +
mov ecx [ecx+4] +
push ebx  +
push eax  +
push eax  +
push dword ptr [ebp-40h]  +
push 5  +
push 5  +
push ecx  +
push dword ptr [ebp-2Ch]  +
push dword ptr [esi+4]  +
call edi  +
xor eax eax +
jmp loc_100869A  +
mov ecx [ebp+0Ch] +
mov ecx [ecx+4] +
push ebx  +
push eax  +
push eax  +
push dword ptr [ebp-40h]  +
push 5  +
push 5  +
push ecx  +
push dword ptr [ebp-18h]  +
push dword ptr [esi+4]  +
call edi  +
xor eax eax +
jmp loc_10086A3  +
mov ecx [ebp+0Ch] +
mov ecx [ecx] +
push ebx  +
push eax  +
push eax  +
push dword ptr [ebp-40h]  +
push 5  +
push 5  +
push dword ptr [ebp-1Ch]  +
push ecx  +
push dword ptr [esi+4]  +
call edi  +
xor eax eax +
jmp loc_1008701  +
mov ecx [ebp+0Ch] +
mov ecx [ecx] +
push ebx  +
push eax  +
push eax  +
push dword ptr [ebp-40h]  +
push 5  +
push 5  +
push dword ptr [ebp-34h]  +
push ecx  +
push dword ptr [esi+4]  +
call edi  +
jmp loc_100870B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_108B1D4 +
push esi  +
xor esi esi +
test eax eax +
jnz loc_103FA9B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
push edi  +
mov edi dword_108A248 +
mov dword_108A230 eax +
cmp edi eax +
jz loc_1035457  +
push esi  +
mov esi [edi+40h] +
cmp esi eax +
jz loc_1035456  +
push ebx  +
push eax  +
push dword_108A20C  +
mov ecx edi +
call sub_10353BF  +
mov ecx stru_108A338.left +
mov edx stru_108A338.bottom +
push 0CC0020h  +
mov ebx eax +
mov eax stru_108A338.top +
push eax  +
push ecx  +
push dword_108A20C  +
sub edx eax +
push edx  +
mov edx stru_108A338.right +
sub edx ecx +
push edx  +
push eax  +
push ecx  +
push dword ptr [esi+0Ch]  +
call ds:BitBlt  +
test ebx ebx +
jnz loc_103EF98  +
mov ebx offset stru_108A338 +
push ebx  +
push esi  +
call sub_1005D16  +
push ebx  +
mov ecx edi +
call sub_1035070  +
pop ebx  +
pop esi  +
pop edi  +
jmp locret_1004A0B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_108B1D4 +
push edi  +
xor edi edi +
cmp eax edi +
jnz loc_103E421  +
mov eax edi +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:CreateBitmap  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 14h  +
***
cmp ecx ebx +
jz loc_102E718  +
cmp [ecx+4] ebx +
jz loc_102E718  +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
jmp loc_102E718  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
jmp loc_102E723  +
***
push eax  +
call ds:DeleteObject  +
jmp loc_100B091  +
***
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+40h] +
push edi  +
mov [ebp+var_C] esi +
mov [ebp+var_4] eax +
call sub_10049FD  +
mov eax dword_108A224 +
mov ecx off_108A1D4 +
mov [ebp+var_10] eax +
mov eax dword_108A1C8 +
mov [ebp+var_14] eax +
mov eax [ecx] +
call dword ptr [eax+90h]  +
mov ecx off_108A1D4 +
mov ebx eax +
mov eax [ecx] +
call dword ptr [eax+94h]  +
mov ecx off_108A1D4 +
mov edi 25Fh +
cmp [ecx+40h] edi +
jnz loc_103555C  +
mov ecx dword_108A1C8 +
mov dword_108A224 ecx +
xor ecx ecx +
mov dword_108A248 esi +
cmp dword_108A218 ecx +
jnz loc_1036CD5  +
push ecx  +
push eax  +
push ebx  +
push dword_108A224  +
push [ebp+yTop]  +
push [ebp+xLeft]  +
push [ebp+yTop]  +
push [ebp+xLeft]  +
push dword ptr [esi+40h]  +
call sub_1037E3E  +
mov ecx [ebp+xLeft] +
mov eax ebx +
cdq   +
sub eax edx +
mov edx [ebp+yTop] +
sar eax 1 +
sub ecx eax +
sub edx eax +
mov eax off_108A1D4 +
mov stru_108A338.left ecx +
mov stru_108A338.top edx +
cmp [eax+40h] edi +
jnz loc_103FB8B  +
fld1   +
add ecx ebx +
add edx ebx +
mov stru_108A338.right ecx +
mov stru_108A338.bottom edx +
fcom  qword ptr [esi+50h] +
fnstsw  ax +
test ah 41h +
jz loc_103FB71  +
fstp  st +
mov eax off_108A1D4 +
cmp [eax+40h] edi +
pop edi  +
pop esi  +
pop ebx  +
jnz loc_10355F7  +
mov eax [ebp+var_10] +
mov dword_108A224 eax +
mov eax [ebp+var_14] +
mov dword_108A1C8 eax +
mov dword_108A230 1 +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
push dword ptr [ecx+0A4h]  +
mov [ecx+390h] edx +
mov edx [eax+4] +
mov [ecx+394h] edx +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push 1  +
call sub_10089B9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push offset off_108D398  +
mov esi offset off_108CEAC +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov edi ecx +
mov [ebp-1] bl +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_10416E0  +
mov eax [eax+8] +
mov byte ptr [ebp-1] 1 +
mov [edi+8] eax +
mov al [ebp-1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_103569F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov ecx [esi+10h] +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov bl al +
test bl bl +
jz loc_10356C3  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_10356D0  +
pop esi  +
mov al bl +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_0]  +
mov eax [ecx] +
lea edx [ebp+var_8] +
push edx  +
mov [ebp+var_8] 0Ah +
mov [ebp+var_4] ecx +
call dword ptr [eax+8]  +
leave   +
retn 4  +
***
lea eax [ebp+pt] +
push eax  +
call esi  +
mov esi dword_108A248 +
test esi esi +
jz loc_1006730  +
mov eax [esi+40h] +
mov ecx [eax+30h] +
mov eax [eax+2Ch] +
and [ebp+rc.left] 0 +
and [ebp+rc.top] 0 +
mov [ebp+rc.right] eax +
lea eax [ebp+rc] +
mov [ebp+rc.bottom] ecx +
push eax  +
mov ecx esi +
call sub_1008309  +
lea eax [ebp+var_40] +
push eax  +
push dword ptr [esi+20h]  +
call edi  +
lea eax [ebp+rc] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
push eax  +
call ebx  +
mov eax [ebp+pt.x] +
mov [ebp+Point.x] eax +
mov eax [ebp+pt.y] +
mov [ebp+Point.y] eax +
lea eax [ebp+Point] +
push eax  +
push dword ptr [esi+20h]  +
call ds:ScreenToClient  +
push [ebp+pt.y]  +
push [ebp+pt.x]  +
call sub_10084B4  +
cmp eax esi +
jnz loc_10357AF  +
push [ebp+Point.y]  +
lea eax [ebp+var_40] +
push [ebp+Point.x]  +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_10357AF  +
call ds:GetCapture  +
test eax eax +
jnz loc_1006730  +
mov eax [ebp+Point.x] +
mov [ebp-18h] eax +
mov eax [ebp+Point.y] +
mov [ebp-14h] eax +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
call sub_100839D  +
xor eax eax +
cmp dword_108A230 eax +
jnz loc_1006730  +
jmp loc_103F67C  +
cmp dword_108A21C 0 +
jz loc_10357C6  +
cmp dword_108AF30 0 +
jnz loc_10357C6  +
call sub_10049FD  +
or ecx 0FFFFFFFFh +
mov eax ecx +
mov [esi+60h] eax +
mov [esi+64h] ecx +
jmp loc_1006730  +
***
neg eax  +
mov [ebp+var_1] 1 +
mov [esi+58h] eax +
jmp loc_100FD65  +
call sub_1006239  +
cmp eax ebx +
jz loc_100FD8D  +
jmp loc_103FD0F  +
***
mov [ebp+var_28] ebx +
jmp loc_103C8D6  +
mov [ebp+var_24] ebx +
jmp loc_103C8EF  +
mov al byte ptr [ebp+var_1C] +
jmp loc_103CADC  +
mov [ebp+var_24] edx +
jmp loc_103C8EF  +
***
push dword ptr [ecx+544h]  +
call sub_1035D20  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov eax off_108A1D4 +
mov eax [eax+40h] +
xor ebx ebx +
cmp eax 259h +
jz loc_103B553  +
cmp eax 25Ah +
jz loc_103B553  +
mov edi [ebp+0Ch] +
mov eax [esi+4] +
mov ecx [edi] +
cmp ecx [eax+2Ch] +
jz loc_103B565  +
cmp ecx 1 +
jl loc_103DCE5  +
cmp dword ptr [edi+4] 1 +
jl loc_103DCE5  +
lea ecx [ebp+0Fh] +
call sub_100AF92  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [esi+4]  +
mov [ebp-4] ebx +
call sub_1009DC6  +
push dword ptr [esi+4]  +
call sub_100D08B  +
push dword ptr [edi+4]  +
mov eax [esi+4] +
push dword ptr [edi]  +
mov ecx [eax+30h] +
mov edx [eax+2Ch] +
push eax  +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] edx +
mov [ebp-18h] ecx +
call sub_1035998  +
test eax eax +
jz loc_103DCCB  +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
call sub_100D5D9  +
push dword ptr [esi+4]  +
call sub_100D2D1  +
mov dword_108A1FC ebx +
push dword ptr [esi+4]  +
call sub_1005C6C  +
cmp dword_108BB60 ebx +
jz loc_103593D  +
cmp dword_108BB64 ebx +
jnz loc_103593D  +
push dword ptr [esi+8]  +
mov ebx offset unk_108B4B8 +
push 15Ah  +
push esi  +
mov ecx ebx +
call sub_1035AFA  +
push dword ptr [esi+0Ch]  +
mov ecx ebx +
push 15Bh  +
push esi  +
call sub_1035AFA  +
mov ecx [edi] +
mov eax [esi+8] +
mov ebx [esi+0Ch] +
mov [esi+8] ecx +
mov ecx [edi+4] +
mov [esi+0Ch] ecx +
cmp [esi+8] eax +
jz loc_103595F  +
push 15Ah  +
mov ecx esi +
call sub_102E6BF  +
cmp [esi+0Ch] ebx +
jz loc_1035970  +
push 15Bh  +
mov ecx esi +
call sub_102E6BF  +
push 159h  +
mov ecx esi +
call sub_102E6BF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Fh] +
call sub_102E656  +
xor eax eax +
inc eax  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
cmp eax [esi+2Ch] +
jz loc_1035AEA  +
push ecx  +
push eax  +
push dword ptr [esi+0Ch]  +
call ds:CreateCompatibleBitmap  +
mov edi eax +
mov [ebp+var_4] edi +
test edi edi +
jz loc_103F512  +
push dword ptr [esi+0Ch]  +
call ds:CreateCompatibleDC  +
mov ebx eax +
push edi  +
test ebx ebx +
jz loc_103F519  +
mov edi ds:SelectObject +
push ebx  +
call edi  +
and [ebp+arg_0] 0 +
mov [ebp+var_10] eax +
mov eax dword_108B1D4 +
test eax eax +
jnz loc_103F521  +
push dword_108A1C8  +
call ds:CreateSolidBrush  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_1035A3D  +
push eax  +
push ebx  +
call edi  +
push 0F00021h  +
push [ebp+arg_8]  +
mov [ebp+var_8] eax +
push [ebp+arg_4]  +
push 0  +
push 0  +
push ebx  +
call ds:PatBlt  +
push [ebp+var_8]  +
push ebx  +
call edi  +
push [ebp+var_C]  +
call ds:DeleteObject  +
push 0CC0020h  +
xor eax eax +
push eax  +
push eax  +
push dword ptr [esi+0Ch]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
push eax  +
push ebx  +
call ds:BitBlt  +
cmp [ebp+arg_0] 0 +
jnz loc_103F545  +
push [ebp+var_10]  +
push ebx  +
call edi  +
push [ebp+var_4]  +
push dword ptr [esi+0Ch]  +
call edi  +
push dword ptr [esi+14h]  +
call ds:DeleteObject  +
push ebx  +
call ds:DeleteDC  +
mov eax [ebp+var_4] +
mov [esi+14h] eax +
mov eax [ebp+arg_4] +
mov [esi+2Ch] eax +
mov eax [ebp+arg_8] +
mov [esi+30h] eax +
xor edi edi +
push esi  +
mov dword_108A1FC edi +
call sub_1005C6C  +
push edi  +
push esi  +
call sub_1005D16  +
mov esi [esi] +
cmp esi edi +
jz loc_1035AE0  +
push edi  +
push edi  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
mov ecx esi +
call sub_100FBC7  +
mov esi [esi+48h] +
jmp loc_1035AA9  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
cmp ecx [esi+30h] +
jnz loc_10359B5  +
jmp loc_1035AE0  +
***
mov edi edi +
push eax  +
mov ecx esi +
call sub_1009B54  +
jmp loc_100D540  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
jz loc_1035BBE  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
cmp [ebp+arg_0] esi +
jz loc_1035BD7  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_100A1F3  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi offset stru_108B3D8 +
push esi  +
call ds:IsRectEmpty  +
test eax eax +
jz loc_103B1DD  +
call sub_1002061  +
retn 4  +
***
push 4  +
call ?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z  +
jmp loc_103B21D  +
***
push [ebp+arg_0]  +
call sub_1035B8A  +
push esi  +
push esi  +
push esi  +
push esi  +
push offset stru_108B3D8  +
call ds:SetRect  +
jmp loc_1035B5B  +
***
cmp dword_108AF30 esi +
jnz loc_1035F2F  +
call sub_1009FC1  +
jmp loc_1035B75  +
***
mov ecx [ebp+var_4] +
mov esi offset stru_108AF34 +
lea edi [ebp+rc] +
movs   +
movs   +
movs   +
lea eax [ebp+rc] +
push eax  +
mov [ebp+var_8] 0Fh +
movs   +
call sub_1035139  +
push 0Fh  +
lea eax [ebp+rc] +
push eax  +
push [ebp+arg_0]  +
call sub_10351DA  +
mov edi [ebp+var_4] +
xor esi esi +
jmp loc_1008547  +
***
cmp dword_108AF30 0 +
jz loc_10075F8  +
cmp dword_108A218 0 +
jnz loc_10075F8  +
xor eax eax +
inc eax  +
jmp loc_10075FA  +
***
push 1  +
jmp loc_1006B8B  +
***
call sub_10075C5  +
jmp loc_1007136  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
push edi  +
lea eax [ebp+Point] +
push eax  +
mov edi ecx +
call ds:GetCursorPos  +
push [ebp+Point.y]  +
push [ebp+Point.x]  +
call sub_10084B4  +
mov esi eax +
test esi esi +
jz loc_1035CA8  +
push offset off_1035CB0  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_1035CA8  +
mov eax [esi+40h] +
cmp eax dword_108A220 +
jnz loc_1035CA8  +
cmp dword_108AF30 0 +
jnz loc_103B4F2  +
mov eax [edi+3Ch] +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax offset off_1035CB0 +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
call sub_10049D9  +
push eax  +
push offset off_1006FF0  +
call ?AfxDynamicDownCast@@YAPAVCObject@@PAUCRuntimeClass@@PAV1@@Z  +
pop ecx  +
mov esi eax +
pop ecx  +
mov ecx esi +
call sub_1006E76  +
mov ecx 259h +
cmp eax ecx +
jz loc_1035D12  +
push ecx  +
mov ecx esi +
call sub_1035D44  +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_1009DE5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1006581  +
test eax eax +
jz loc_1035D3B  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+0A0h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 259h +
jb loc_1035DC3  +
cmp eax 25Ah +
ja loc_1035DC3  +
push esi  +
mov [ecx+544h] eax +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_100213C  +
push 4  +
mov esi 52D2h +
push esi  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_100FA80  +
push 4  +
push esi  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_100FA94  +
push 4  +
push esi  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_100FB5C  +
push 4  +
push esi  +
mov ecx eax +
call sub_1009E6B  +
pop esi  +
pop ebp  +
retn 4  +
***
cmp dword_108AEF4 edi +
jnz loc_1009FB7  +
cmp dword_108AEF8 edi +
jnz loc_1009FB7  +
cmp dword_108AEFC edi +
jnz loc_103F4D9  +
push ebx  +
push esi  +
mov ebx offset stru_108AF34 +
cmp [ebp+arg_0] edi +
jz loc_1035E2E  +
call sub_10049FD  +
cmp dword_108AEFC 0 +
mov esi ebx +
lea edi [ebp+rcSrc1] +
movs   +
movs   +
movs   +
movs   +
jnz loc_103F4EA  +
push dword_108AF30  +
call sub_100D08B  +
mov ecx dword_108A24C +
lea eax [ebp+rcSrc1] +
push eax  +
call sub_100A226  +
xor edi edi +
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 25Bh +
jz loc_1035E6E  +
push stru_108AF34.top  +
mov esi offset unk_108AEA0 +
push stru_108AF34.left  +
mov ecx esi +
push dword_108AF30  +
cmp dword_108AF10 edi +
jz loc_1035EA5  +
call sub_1035EB1  +
cmp dword_108AF50 edi +
jnz loc_103F506  +
push ebx  +
push dword_108AF30  +
call sub_1005D16  +
push ebx  +
push dword_108AF30  +
call sub_100D173  +
push dword_108AF30  +
call sub_100D2D1  +
pop esi  +
pop ebx  +
jmp loc_1009FB7  +
cmp eax edi +
jz loc_1035DEB  +
jmp loc_1009FB7  +
call sub_104F35F  +
jmp loc_1035E62  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 25Ah +
push esi  +
mov esi ecx +
jz loc_103E502  +
push ebx  +
xor ebx ebx +
push edi  +
cmp [esi+0B0h] ebx +
jnz loc_103E515  +
push ebx  +
lea edi [esi+14h] +
push edi  +
call sub_1035462  +
push 0CC0020h  +
push ebx  +
push ebx  +
push dword ptr [esi+18h]  +
mov [ebp+var_4] eax +
push dword ptr [esi+30h]  +
mov eax dword ptr [ebp+arg_0.rgbBlue] +
push dword ptr [esi+2Ch]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax+0Ch]  +
call ds:BitBlt  +
cmp [ebp+var_4] ebx +
jnz loc_103E5D3  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
push 1  +
push [ebp+lpRect]  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
jmp loc_1035109  +
***
cmp dword_108AEF4 esi +
jnz loc_1035F3E  +
push 1  +
call sub_1009F8B  +
push esi  +
push dword_108AF30  +
call sub_1005D16  +
mov dword_108AF30 esi +
cmp dword_108AF50 esi +
jz loc_1035BE3  +
jmp loc_103F883  +
***
mov ecx dword_108A1EC +
jmp sub_100A178  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
mov esi offset stru_108AF34 +
lea edi [ebp+rc] +
movs   +
movs   +
movs   +
lea eax [ebp+rc] +
push eax  +
movs   +
call sub_1035FD3  +
fild  dword_108B294 +
fdiv  ds:dbl_10021B0 +
fmul  ds:dbl_100A7A8 +
call _ftol2_sse  +
push eax  +
push eax  +
lea eax [ebp+rc] +
push eax  +
call ds:InflateRect  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call ds:PtInRect  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
call sub_1035FFB  +
add esi 8 +
push esi  +
mov ecx edi +
call sub_1035FFB  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld1   +
push esi  +
mov esi ecx +
fcom  qword ptr [esi+50h] +
push edi  +
mov edi [ebp+arg_0] +
fnstsw  ax +
test ah 1 +
jnz loc_103FB11  +
fstp  st +
fild  dword ptr [edi] +
fmul  qword ptr [esi+50h] +
call _ftol2_sse  +
mov [edi] eax +
add edi 4 +
fild  dword ptr [edi] +
fmul  qword ptr [esi+50h] +
call _ftol2_sse  +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
lea eax [esi+14h] +
xor ebx ebx +
cmp eax ebx +
jz loc_103609C  +
cmp [eax+4] ebx +
jz loc_103609C  +
mov eax [esi+38h] +
cmp eax ebx +
jz loc_103609C  +
push edi  +
push 42h  +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push ebx  +
push ebx  +
push eax  +
call ds:PatBlt  +
lea edi [esi+0Ch] +
cmp edi ebx +
jz loc_1036092  +
cmp [edi+4] ebx +
jz loc_1036092  +
push ebx  +
call ds:GetStockObject  +
push eax  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
push eax  +
push edi  +
lea ecx [esi+34h] +
call sub_10360A7  +
pop edi  +
cmp [esi+70h] ebx +
jz loc_103E623  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_103E3EE  +
mov edx [eax+4] +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10360C4  +
mov eax [eax+4] +
push edx  +
push eax  +
push dword ptr [ecx+4]  +
call ds:FillRgn  +
pop ebp  +
retn 8  +
***
mov esi offset stru_108AF34 +
lea edi [ebp-3Ch] +
movs   +
movs   +
movs   +
lea eax [ebp-3Ch] +
push eax  +
mov ecx ebx +
movs   +
call sub_1035FD3  +
mov esi ds:InflateRect +
push 5  +
push 5  +
lea eax [ebp-3Ch] +
push eax  +
call esi  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
call sub_1035F76  +
test eax eax +
jz loc_10304ED  +
mov eax [ebx+40h] +
cmp dword_108A1FC eax +
jnz loc_10405F1  +
call sub_1035F66  +
push 0FFFFFFFBh  +
push 0FFFFFFFBh  +
lea eax [ebp-3Ch] +
push eax  +
call esi  +
push 0  +
push dword ptr [ebp+14h]  +
lea eax [ebp-3Ch] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10361D9  +
push dword ptr [ebp+14h]  +
mov [ebp-10h] eax +
push dword ptr [ebp+10h]  +
lea eax [ebp-3Ch] +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_10304E0  +
cmp dword ptr [ebp-10h] 0 +
jnz loc_10304E0  +
push 2  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov dword ptr [ebp-14h] 60h +
mov dword ptr [ebp-10h] 90h +
mov dword ptr [ebp-1Ch] 242Fh +
mov dword ptr [ebp-18h] 2430h +
call sub_100A0E4  +
push eax  +
mov ecx offset unk_108AF60 +
call sub_102E831  +
push eax  +
call ds:SetCursor  +
mov eax [ebp+8] +
cmp eax 201h +
jz loc_104060C  +
cmp eax 203h +
jz loc_104060C  +
cmp eax 204h +
jz loc_10405FC  +
cmp eax 206h +
jnz loc_100A79E  +
jmp loc_10405FC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
fild  dword_108B294 +
push ebx  +
push esi  +
push edi  +
fdiv  ds:dbl_10021B0 +
fmul  ds:dbl_100A7A8 +
call _ftol2_sse  +
mov ecx [ebp+arg_0] +
mov edi [ecx+8] +
mov esi [ecx] +
mov ebx eax +
cdq   +
sub eax edx +
mov [ebp+arg_0] eax +
sar [ebp+arg_0] 1 +
lea eax [esi+edi] +
cdq   +
sub eax edx +
mov [ebp+var_8] edi +
mov edi eax +
mov eax [ecx+0Ch] +
mov ecx [ecx+4] +
mov [ebp+var_4] eax +
add eax ecx +
cdq   +
sub eax edx +
mov edx [ebp+arg_4] +
sar edi 1 +
sub edi [ebp+arg_0] +
sar eax 1 +
sub eax [ebp+arg_0] +
cmp edx esi +
jl loc_1043283  +
mov esi [ebp+var_8] +
cmp edx esi +
jge loc_10432C9  +
cmp edx edi +
jl loc_1036254  +
add edi ebx +
cmp edx edi +
jl loc_104330B  +
mov eax [ebp+arg_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1036272  +
mov eax [eax+4] +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:StretchBlt  +
pop ebp  +
retn 28h  +
***
call sub_1002370  +
mov [ebp-18h] ecx +
mov eax off_108A1D4 +
mov eax [eax+40h] +
mov [ebp-1Ch] eax +
lea eax [ebp+0Ch] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_103658C  +
mov eax [ebp+18h] +
sub eax [ebp+10h] +
mov ecx [ebp+14h] +
sub ecx [ebp+0Ch] +
mov [ebp-14h] eax +
mov dword_108AED0 eax +
mov eax dword_108AEEC +
mov [ebp-34h] ecx +
mov dword_108AECC ecx +
test eax eax +
jz loc_10362FF  +
push eax  +
push dword_108AEB8  +
call ds:SelectObject  +
mov eax dword_108AEF0 +
test eax eax +
jz loc_1036315  +
push eax  +
push dword_108AEB8  +
call ds:SelectObject  +
and dword_108AEEC 0 +
and dword_108AEF0 0 +
mov esi offset unk_108AEB4 +
mov ecx esi +
call ?DeleteDC@CDC@@QAEHXZ  +
mov edi offset unk_108AEC4 +
mov ecx edi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx offset unk_108AED4 +
call ?DeleteDC@CDC@@QAEHXZ  +
mov ebx offset unk_108AEE4 +
mov ecx ebx +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push dword ptr [ebp+8]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov [ebp-24h] eax +
mov eax [ebp-18h] +
mov eax [eax+40h] +
push dword ptr [eax+0Ch]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
push dword ptr [ebp-14h]  +
mov ecx edi +
push dword ptr [ebp-34h]  +
mov [ebp+8] eax +
push eax  +
call sub_1008818  +
test eax eax +
jz loc_103FE79  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1002292  +
test eax eax +
jz loc_103FE79  +
push 0  +
push 1  +
push 1  +
push dword ptr [ebp-14h]  +
mov ecx ebx +
push dword ptr [ebp-34h]  +
call sub_1035483  +
test eax eax +
jz loc_103FE79  +
push dword ptr [ebp+8]  +
mov ecx offset unk_108AED4 +
call sub_1002292  +
test eax eax +
jz loc_103FE79  +
mov eax [ebp-18h] +
mov eax [eax+40h] +
push edi  +
mov ecx esi +
mov dword_108AF30 eax +
call sub_10022BD  +
xor edi edi +
cmp eax edi +
jz loc_103FD9D  +
mov eax [eax+4] +
mov dword_108AEEC eax +
push ebx  +
mov ecx offset unk_108AED4 +
call sub_10022BD  +
cmp eax edi +
jz loc_103FDA8  +
mov eax [eax+4] +
mov dword_108AEF0 eax +
mov ecx [ebp-18h] +
push edi  +
push esi  +
call sub_1009365  +
cmp dword ptr [ebp-1Ch] 259h +
mov [ebp-28h] eax +
mov dword ptr [ebp+8] 1 +
jnz loc_10364EB  +
cmp [ebp+1Ch] edi +
jz loc_10364F8  +
cmp dword_108AEB0 0 +
mov edi [ebp+0Ch] +
mov ebx [ebp+10h] +
mov [ebp-3Ch] edi +
mov [ebp-38h] ebx +
jz loc_103644E  +
mov ecx offset unk_108AEAC +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx offset unk_108AEAC +
call sub_1036595  +
mov [ebp+8] eax +
test eax eax +
jz loc_1036579  +
neg ebx  +
push ebx  +
neg edi  +
push edi  +
push dword_108AEB0  +
mov edi ds:OffsetRgn +
call edi  +
xor ebx ebx +
cmp eax ebx +
jz loc_1036584  +
cmp dword_108AEA8 ebx +
jz loc_1036497  +
mov ecx offset unk_108AEA4 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx offset unk_108AEA4 +
call sub_1036595  +
mov [ebp+8] eax +
cmp eax ebx +
jz loc_1036579  +
mov eax dword_108A24C +
fld  qword ptr [eax+50h] +
fild  dword ptr [ebp-38h] +
fmul st st(1) +
fchs   +
call _ftol2_sse  +
fimul  dword ptr [ebp-3Ch] +
push eax  +
fchs   +
call _ftol2_sse  +
push eax  +
push dword_108AEA8  +
call edi  +
cmp eax ebx +
jz loc_1036584  +
cmp [ebp+8] ebx +
jz loc_1036579  +
xor edi edi +
cmp dword ptr [ebp-1Ch] 25Ah +
jz loc_103FDB3  +
push 0CC0020h  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-34h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-34h]  +
mov ecx esi +
push edi  +
push edi  +
call sub_1036263  +
push dword_108A1C8  +
mov ecx offset unk_108AEA0 +
call sub_103603F  +
cmp [ebp-28h] edi +
jnz loc_103FE69  +
mov ebx [ebp-18h] +
lea esi [ebp+0Ch] +
mov edi offset stru_108AF34 +
movs   +
movs   +
movs   +
movs   +
inc dword ptr [ebp+14h]  +
inc dword ptr [ebp+18h]  +
push 0  +
push dword ptr [ebx+40h]  +
call sub_1005D16  +
lea esi [ebp+0Ch] +
mov edi offset stru_108A338 +
movs   +
movs   +
movs   +
xor eax eax +
inc eax  +
and dword_108AEFC 0 +
movs   +
mov dword_108A230 eax +
mov dword_108A248 ebx +
mov dword_108AEF4 eax +
mov eax [ebp+8] +
call sub_1002061  +
retn 18h  +
mov [ebp+8] ebx +
jmp loc_10364E0  +
xor eax eax +
jmp loc_103657C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:CreateRectRgnIndirect  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov edi ecx +
mov [ebp-44h] edi +
lea ecx [ebp-29h] +
call sub_100AF92  +
xor esi esi +
mov [ebp-4] esi +
cmp [edi+68h] si +
jnz loc_10365EE  +
push offset szFormat  +
call ds:RegisterClipboardFormatW  +
mov [edi+68h] ax +
xor eax eax +
lea edi [ebp-0B0h] +
stos   +
stos   +
mov [ebp-3Ch] esi +
xor ebx ebx +
mov [ebp-0A0h] esi +
mov [ebp-48h] esi +
mov [ebp-30h] esi +
mov [ebp-38h] esi +
mov [ebp-0A4h] esi +
mov [ebp-14h] esi +
mov [ebp-34h] esi +
mov [ebp-10h] esi +
mov [ebp-28h] esi +
stos   +
lea eax [ebp-0B0h] +
push eax  +
push 10h  +
push 9  +
mov byte ptr [ebp-4] 1 +
call sub_1036A33  +
cmp eax esi +
jnz loc_103E7FF  +
lea eax [ebp-0B0h] +
push eax  +
xor edi edi +
inc edi  +
push edi  +
push 8  +
call sub_1036A33  +
mov [ebp-5Ch] eax +
cmp eax esi +
jz loc_103E81B  +
push eax  +
call ds:GlobalLock  +
mov [ebp-10h] eax +
cmp eax esi +
jz loc_103E81B  +
push eax  +
call sub_1010A2A  +
push dword ptr [ebp-10h]  +
mov [ebp-84h] eax +
call sub_1010A4E  +
mov [ebp-80h] eax +
cmp [ebp-84h] esi +
jz loc_103E81B  +
cmp eax esi +
jz loc_103E81B  +
mov eax [ebp-10h] +
cmp dword ptr [eax] 28h +
mov [ebp-0A0h] edi +
jb loc_10366AF  +
mov ecx [eax+18h] +
mov eax [eax+1Ch] +
mov [ebp-30h] ecx +
mov [ebp-38h] eax +
mov eax [ebp-44h] +
push dword ptr [eax+40h]  +
push dword ptr [ebp-80h]  +
push dword ptr [ebp-84h]  +
call sub_1036999  +
sub eax 6 +
jz loc_10368EA  +
dec eax  +
jnz loc_103E90E  +
lea ecx [ebp-58h] +
call ??0CDC@@QAE@XZ  +
mov byte ptr [ebp-4] 3 +
mov [ebp-9Ch] esi +
mov [ebp-24h] esi +
mov [ebp-18h] esi +
mov ebx offset off_1002208 +
cmp [ebp-3Ch] esi +
jnz loc_103E915  +
cmp [ebp-48h] esi +
jnz loc_103EB50  +
mov edi [ebp-44h] +
cmp [ebp-10h] esi +
jz loc_10368AE  +
push dword ptr [ebp-10h]  +
call sub_1036BB3  +
push eax  +
push dword ptr [ebp-10h]  +
mov ecx edi +
call sub_1036C0A  +
mov [ebp-48h] eax +
mov eax [edi+40h] +
push dword ptr [eax+0Ch]  +
push dword_108B1D4  +
push dword ptr [ebp-10h]  +
call sub_1036AAD  +
mov [ebp-28h] eax +
cmp [ebp-0A0h] esi +
jz loc_10368F5  +
push dword ptr [ebp-5Ch]  +
call ds:GlobalUnlock  +
cmp [ebp-28h] esi +
jz loc_10368A3  +
mov eax [edi+40h] +
push dword ptr [eax+0Ch]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
push eax  +
lea ecx [ebp-58h] +
call sub_1002292  +
test eax eax +
jz loc_103689A  +
mov eax [ebp-84h] +
mov [ebp-68h] eax +
mov eax [ebp-80h] +
mov [ebp-70h] esi +
mov [ebp-6Ch] esi +
mov [ebp-64h] eax +
mov [ebp-5Ch] esi +
mov [ebp-60h] ebx +
push dword ptr [ebp-28h]  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 8 +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
lea eax [ebp-60h] +
push eax  +
lea ecx [ebp-58h] +
call sub_10022BD  +
mov [ebp-24h] eax +
mov eax [edi+40h] +
mov eax [eax+24h] +
cmp eax esi +
jnz loc_103EC3F  +
mov eax off_108A1D4 +
mov ecx [eax+40h] +
mov eax 259h +
cmp ecx eax +
jz loc_10367D3  +
push eax  +
call sub_1035D20  +
push 1  +
sub esp 10h +
mov edi esp +
push dword ptr [ebp-54h]  +
lea esi [ebp-70h] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp-44h] +
mov ecx esi +
call sub_10362A0  +
xor edi edi +
cmp eax edi +
jz loc_103686A  +
mov eax stru_108AF34.bottom +
mov ecx stru_108AF34.right +
sub eax stru_108AF34.top +
sub ecx stru_108AF34.left +
mov [ebp-98h] edi +
mov [ebp-94h] edi +
mov [ebp-90h] ecx +
mov [ebp-8Ch] eax +
cmp [ebp-0A4h] edi +
jnz loc_1036844  +
mov eax [esi+5Ch] +
mov ecx [esi+58h] +
neg eax  +
push eax  +
neg ecx  +
push ecx  +
lea eax [ebp-98h] +
push eax  +
call ds:OffsetRect  +
lea eax [ebp-98h] +
push eax  +
mov ecx esi +
call sub_1036C4C  +
push dword ptr [esi+40h]  +
call sub_100D2D1  +
mov dword_108AEF4 edi +
mov dword ptr [ebp-9Ch] 1 +
cmp [ebp-18h] edi +
jnz loc_103EC5A  +
push dword ptr [ebp-24h]  +
lea ecx [ebp-58h] +
call sub_10022BD  +
lea ecx [ebp-60h] +
mov [ebp-24h] edi +
call ?Detach@CGdiObject@@QAEPAXXZ  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 3 +
mov [ebp-60h] ebx +
call sub_1002407  +
xor esi esi +
push dword ptr [ebp-28h]  +
call ds:DeleteObject  +
mov ecx [ebp-48h] +
cmp ecx esi +
jnz loc_103EC6E  +
cmp [ebp-18h] esi +
jnz loc_103EC8E  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 1 +
call ??1CDC@@UAE@XZ  +
mov esi [ebp-9Ch] +
lea eax [ebp-0B0h] +
push eax  +
call ds:ReleaseStgMedium  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-29h] +
call sub_102E656  +
mov eax esi +
call sub_1002061  +
retn   +
mov [ebp-0A4h] edi +
jmp loc_10366D3  +
push dword ptr [ebp-10h]  +
call sub_1038D5D  +
jmp loc_1036750  +
***
call sub_100208C  +
mov esi ecx +
push 0E125h  +
call sub_1036A09  +
test eax eax +
jnz loc_103698E  +
xor ebx ebx +
push ebx  +
call sub_100AF58  +
push 1  +
call sub_1009F8B  +
call sub_10049FD  +
push dword ptr [esi+40h]  +
call sub_1005C6C  +
mov ecx esi +
call sub_10303DC  +
push ebx  +
push ebx  +
mov ecx esi +
mov dword_108AF30 ebx +
call sub_10084D4  +
push dword ptr [esi+40h]  +
call sub_100D08B  +
mov ecx esi +
call sub_10365B8  +
test eax eax +
jz loc_103ED8E  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov edx [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
mov eax [edi+2Ch] +
cmp [ebp+arg_0] eax +
jle loc_10369FD  +
mov ecx [edi+30h] +
cmp edx ecx +
jg loc_103E7F8  +
cmp [ebp+arg_0] eax +
jle loc_10369C2  +
mov eax [ebp+arg_0] +
push esi  +
push 1  +
mov [ebp+var_4] ecx +
mov esi offset unk_108B4B8 +
push offset aResizeBitmap  +
mov ecx esi +
mov [ebp+var_8] eax +
call sub_100D1F5  +
mov ecx [edi+4] +
lea eax [ebp+var_8] +
push eax  +
push 15Eh  +
call sub_103584E  +
mov ecx esi +
call sub_100D848  +
pop esi  +
push 7  +
pop eax  +
pop edi  +
leave   +
retn 0Ch  +
cmp edx [edi+30h] +
jg loc_10369AF  +
jmp loc_10369F5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1006239  +
test eax eax +
jnz loc_103FBC1  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
lea eax [ebp+ppDataObj] +
xor ebx ebx +
push eax  +
mov [ebp+ppDataObj] ebx +
call ds:OleGetClipboard  +
test eax eax +
jl loc_1036A98  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
xor eax eax +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
stos   +
mov ax [ebp+arg_0] +
or [ebp+var_C] 0FFFFFFFFh +
mov word ptr [ebp+var_18] ax +
mov eax [ebp+arg_4] +
push esi  +
mov [ebp+var_8] eax +
mov [esi] eax +
mov eax [ebp+ppDataObj] +
lea edx [ebp+var_18] +
push edx  +
mov [ebp+var_10] 1 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_1036A9F  +
mov ebx [esi+4] +
mov eax [ebp+ppDataObj] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
push esi  +
call ds:ReleaseStgMedium  +
jmp loc_1036A8D  +
***
call sub_100208C  +
xor ebx ebx +
cmp [ebp+8] ebx +
jz loc_1036B99  +
cmp [ebp+10h] ebx +
jz loc_1036B99  +
push ebx  +
push dword ptr [ebp+8]  +
call sub_100B049  +
mov esi offset off_1002208 +
mov [ebp-14h] eax +
xor edi edi +
mov [ebp-10h] ebx +
mov [ebp-18h] ebx +
mov [ebp-1Ch] esi +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ??0CDC@@QAE@XZ  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call ?Attach@CDC@@QAEHPAUHDC__@@@Z  +
push 2  +
push 2  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1008818  +
test eax eax +
jz loc_1036B26  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_10022BD  +
mov [ebp-10h] eax +
cmp [ebp+0Ch] ebx +
jnz sub_103F1DF  +
push ebx  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-14h]  +
push 4  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-28h]  +
call ds:CreateDIBitmap  +
mov [ebp+8] eax +
cmp edi ebx +
jnz sub_103F1FB  +
cmp [ebp-10h] ebx +
jz loc_1036B5F  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-2Ch] +
call sub_10022BD  +
cmp [ebp-18h] ebx +
jz loc_1036B6C  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-2Ch] +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ??1CDC@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov [ebp-1Ch] esi +
call sub_1002407  +
mov eax [ebp+8] +
call sub_1002061  +
retn 0Ch  +
xor eax eax +
jmp loc_1036B91  +
***
cmp edx 6Ch +
jnb loc_103EE67  +
push 0Ch  +
pop eax  +
jmp loc_100AFD9  +
***
call sub_1002370  +
mov esi [ebp+8] +
xor ebx ebx +
mov [ebp-28h] ebx +
mov [ebp-18h] ebx +
cmp esi ebx +
jz loc_1036BFB  +
xor edx edx +
inc edx  +
push edx  +
push esi  +
call sub_100AFE2  +
cmp dword ptr [esi] 28h +
movzx edi ax +
mov [ebp-14h] edi +
sbb eax eax +
inc eax  +
mov [ebp-20h] eax +
cmp edi ebx +
jnz loc_103F24B  +
cmp dword_108B1A8 ebx +
jnz loc_103F23E  +
xor eax eax +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 418h +
push esi  +
push edi  +
push dword ptr [ecx+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov eax [eax+40h] +
test eax eax +
jz loc_1036C3E  +
cmp [ebp+arg_0] 0 +
jz loc_1036C3E  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_103FE8A  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+var_4] ecx +
cmp dword_108AF30 ebx +
jz loc_1036CD0  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi offset stru_108AF34 +
movs   +
movs   +
movs   +
push ebx  +
movs   +
push dword_108AF30  +
call sub_1005D16  +
mov esi dword_108A218 +
mov edi dword_108A210 +
xor eax eax +
cmp dword_108AF10 ebx +
mov dword_108AF48 ebx +
setnz al  +
mov dword_108AF44 ebx +
mov dword_108A218 1 +
inc eax  +
push eax  +
call sub_1009E55  +
push stru_108AF34.top  +
mov ecx [ebp+var_4] +
push stru_108AF34.left  +
call sub_10354F7  +
push edi  +
mov dword_108A218 esi +
call sub_1009E55  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edx dword_108AECC +
xor eax eax +
cmp dword_108AF10 ecx +
mov ecx dword_108AED0 +
setnz al  +
mov ebx offset stru_108A338 +
inc eax  +
mov [ebp+var_8] eax +
mov eax [ebp+yTop] +
add ecx eax +
push ecx  +
mov ecx [ebp+xLeft] +
add edx ecx +
push edx  +
push eax  +
push ecx  +
push ebx  +
call ds:SetRect  +
push dword_108AF48  +
mov ecx ebx +
push dword_108AF44  +
call sub_1036D8C  +
mov eax off_108A1D4 +
mov esi ebx +
mov edi offset stru_108AF34 +
movs   +
movs   +
movs   +
movs   +
inc stru_108A338.right  +
inc stru_108A338.bottom  +
cmp dword ptr [eax+40h] 25Bh +
jz loc_1036D71  +
mov eax [ebp+var_8] +
sub eax 0 +
jz loc_103FB4D  +
dec eax  +
jz loc_103FB2F  +
dec eax  +
jnz loc_1036D71  +
push stru_108A338.top  +
mov ecx offset unk_108AEA0 +
push stru_108A338.left  +
push [ebp+var_4]  +
call sub_1035EB1  +
mov eax [ebp+var_C] +
push ebx  +
push dword ptr [eax+40h]  +
call sub_1005D16  +
mov edi 25Fh +
jmp loc_10355DA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
neg eax  +
push eax  +
mov eax [ebp+arg_0] +
neg eax  +
push eax  +
push ecx  +
call ds:OffsetRect  +
pop ebp  +
retn 8  +
***
fld  [ebp+arg_4] +
jmp loc_100CE67  +
***
fsub st(1) st +
mov eax esi +
cdq   +
sub eax edx +
fmulp st(1) st +
sar eax 1 +
mov [ebp+arg_C] eax +
fstp  [ebp+var_C] +
fild  [ebp+arg_C] +
fstp  [ebp+arg_C] +
fld  [ebp+arg_C] +
fstp  [ebp+var_8] +
fld  [ebp+arg_C] +
jmp loc_1030661  +
***
inc al  +
jmp loc_100F7FA  +
***
mov eax offset __imp_GdipSetCompositingMode +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipBitmapLockBits +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipBitmapUnlockBits +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetSmoothingMode +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipBitmapSetPixel +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDrawImageI +
jmp loc_100ABE3  +
***
push 2  +
call sub_100DCD7  +
xor edi edi +
jmp loc_100EAB6  +
mov [ebp+var_2] 0 +
jmp loc_100EB1E  +
mov [ebp+var_1] 1 +
jmp loc_100EBE0  +
***
push esi  +
lea esi unk_108C534[edi*4] +
cmp dword ptr [esi] 0 +
jnz loc_1036E60  +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_1036E8E  +
push 26200Ah  +
push edi  +
push edi  +
mov ecx eax +
call sub_100B2C5  +
mov [esi] eax +
cmp [ebp+arg_0] 3 +
push edi  +
push dword ptr [esi]  +
push [ebp+arg_4]  +
push ebx  +
jnz loc_1036E87  +
call sub_103061D  +
push [ebp+arg_C]  +
mov ecx ebx +
push [ebp+arg_8]  +
push dword ptr [esi]  +
call sub_1030A2A  +
pop esi  +
jmp loc_1030A1F  +
call sub_1036EA1  +
jmp loc_1036E72  +
xor eax eax +
jmp loc_1036E5E  +
call sub_1036EA1  +
jmp loc_1030A06  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
mov eax esi +
and eax 80000001h +
js loc_1045F96  +
fild  [ebp+arg_C] +
fld  ds:dbl_1006830 +
jz loc_1045FA0  +
fsub st(1) st +
mov eax esi +
cdq   +
sub eax edx +
fmul st(1) st +
sar eax 1 +
mov [ebp+arg_C] eax +
fsubp st(1) st +
fstp  [ebp+var_4] +
fild  [ebp+arg_C] +
fadd  ds:dbl_100B170 +
fstp  [ebp+arg_C] +
fld  [ebp+arg_C] +
fstp  [ebp+var_C] +
fld  [ebp+arg_C] +
push [ebp+arg_8]  +
fstp  [ebp+var_8] +
lea ecx [ebp+var_18] +
call sub_100B8C4  +
push 1  +
lea ecx [ebp+var_18] +
call sub_103094A  +
push esi  +
push esi  +
xor ebx ebx +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
lea ecx [ebp+var_18] +
call sub_100B903  +
mov ecx [ebp+arg_8] +
lea eax [ebp+var_48] +
push eax  +
push 26200Ah  +
push 2  +
lea eax [ebp+var_30] +
push eax  +
mov [ebp+var_30] ebx +
mov [ebp+var_2C] ebx +
mov [ebp+var_28] esi +
mov [ebp+var_24] esi +
call sub_1030A79  +
test eax eax +
jnz loc_1037010  +
cmp esi ebx +
push edi  +
mov edi [ebp+var_38] +
mov [ebp+arg_4] ebx +
jle loc_1037003  +
fild  [ebp+arg_4] +
mov [ebp+arg_C] ebx +
fsub  [ebp+var_8] +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
fld  st +
fmulp st(1) st +
fstp  [ebp+var_20] +
fild  [ebp+arg_C] +
fsub  [ebp+var_C] +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
fld  st +
fmulp st(1) st +
fadd  [ebp+var_20] +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
call _CIsqrt  +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
fld  [ebp+var_4] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jp loc_1036FE8  +
fld1   +
sub esp 0Ch +
fstp  [esp+60h+var_58] +
fldz   +
fstp  [esp+60h+var_5C] +
fld  [ebp+var_10] +
fsub  [ebp+var_4] +
fld1   +
fsubrp st(1) st +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
fstp  [esp+60h+var_60] +
call sub_100CE39  +
fmul  ds:dbl_1006830 +
movzx eax byte ptr [edi+3] +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
mov [ebp+var_10] eax +
fild  [ebp+var_10] +
fmulp st(1) st +
call _ftol2  +
mov [edi+3] al +
add edi 4 +
inc [ebp+arg_C]  +
cmp [ebp+arg_C] esi +
jl loc_1036F6B  +
inc [ebp+arg_4]  +
cmp [ebp+arg_4] esi +
jl loc_1036F55  +
mov ecx [ebp+arg_8] +
lea eax [ebp+var_48] +
push eax  +
call sub_1030AB2  +
pop edi  +
push [ebp+var_18]  +
call GdipDeleteGraphics  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
call sub_100208C  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov ecx [esi+54h] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
call sub_1005BE0  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_1037068  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 0 +
jnz loc_1047FC2  +
xor eax eax +
pop ebp  +
retn 4  +
***
push edi  +
mov ecx esi +
call sub_1005C20  +
mov ecx esi +
test eax eax +
jz sub_103D78B  +
push 1  +
push offset word_100219C  +
push edi  +
call ?SetPaneText@CStatusBar@@QAEHHPBGH@Z  +
push ebx  +
push edi  +
mov ecx esi +
call sub_1011C86  +
jmp loc_1011C64  +
***
cmp dword_108B250 0 +
jz loc_1019E49  +
mov [ebx] eax +
mov eax dword_108B250 +
mov [edi] eax +
jmp loc_1019E49  +
***
xor ebx ebx +
jmp loc_1017B24  +
mov ecx [esi+0Ch] +
jmp loc_1017B68  +
mov eax [esi+8] +
jmp loc_1017B72  +
cmp [eax+14h] edi +
jnz loc_1017B9F  +
jmp loc_103DE8D  +
***
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jz loc_1017DAE  +
xor edx edx +
inc edx  +
xor esi esi +
cmp edi edx +
mov [ebp-14h] ebx +
jle loc_103F5A9  +
push 4  +
pop eax  +
cmp edi eax +
jle loc_103F612  +
push 8  +
pop eax  +
cmp edi eax +
jle loc_103F627  +
mov dword ptr [ebp+14h] 18h +
mov eax [ebp+8] +
mov edi [ebp+14h] +
push 404h  +
mov [ebp-474h] eax +
lea eax [ebp-454h] +
push ebx  +
push eax  +
mov dword ptr [ebp-478h] 28h +
mov [ebp-470h] ecx +
mov [ebp-46Ch] dx +
mov [ebp-46Ah] di +
mov [ebp-468h] ebx +
mov [ebp-464h] ebx +
mov [ebp-460h] ebx +
mov [ebp-45Ch] esi +
mov [ebp-458h] esi +
call memset  +
add esp 0Ch +
cmp edi 8 +
jle loc_103F5BB  +
push ebx  +
push ebx  +
lea eax [ebp-20h] +
push eax  +
push ebx  +
lea eax [ebp-478h] +
push eax  +
push dword ptr [ebp-34h]  +
call ds:CreateDIBSection  +
cmp eax ebx +
jz loc_103F595  +
push eax  +
lea ecx [ebp-1Ch] +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
jmp loc_1017DAE  +
***
xor eax eax +
inc eax  +
jmp loc_10123B5  +
***
xor edx edx +
jmp loc_101C3C0  +
***
mov eax [esi] +
mov ecx [eax+4] +
add ecx esi +
mov eax [ecx+8] +
push ebx  +
or eax 1 +
push eax  +
call sub_101D3B8  +
jmp loc_101C168  +
***
cmp [edi+28h] eax +
jnz loc_1017A76  +
jmp loc_1042AD4  +
xor eax eax +
jmp loc_1017AF0  +
***
lea edi [eax+4] +
jmp loc_101D670  +
***
mov ecx ebx +
call sub_1037262  +
jmp loc_10139DD  +
xor eax eax +
jmp loc_1013A38  +
xor eax eax +
jmp loc_1013722  +
mov [ebp-2A4h] edi +
jmp loc_101376F  +
xor eax eax +
jmp loc_1013815  +
xor eax eax +
jmp loc_1013886  +
xor eax eax +
jmp loc_1013901  +
cmp dword ptr [ebp-2A0h] 0FFFFFFFFh +
jnz loc_1013992  +
jmp loc_10139D1  +
call ?RegisterAll@COleObjectFactory@@SGHXZ  +
jmp loc_10425B7  +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_100AF58  +
mov ecx esi +
call sub_102E919  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
jmp ds:?OnFileNew@CWinApp@@IAEXXZ  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101235F  +
test eax eax +
jz loc_1040DEF  +
push ebx  +
push edi  +
xor edi edi +
xor ebx ebx +
inc edi  +
lea ecx [esi+0F4h] +
mov [esi+0FCh] ebx +
mov [esi+0F8h] edi +
call ?Empty@CString@@QAEXXZ  +
mov ecx offset unk_108B32C +
mov dword_108A214 ebx +
mov dword_108A1CC 87654321h +
call ?Empty@CString@@QAEXXZ  +
mov ecx esi +
mov [esi+118h] ebx +
call sub_1019DAC  +
test eax eax +
jz loc_1040E22  +
mov ecx esi +
call ?OnNewDocument@COleLinkingDoc@@UAEHXZ  +
test eax eax +
jz loc_1040E22  +
mov ecx dword_108A1EC +
call sub_1011BA0  +
cmp byte_108B038 bl +
jnz loc_1040DF1  +
mov dword_108B044 ebx +
mov dword_108B040 edi +
mov dword_108B04C ebx +
mov dword_108B048 edi +
mov eax edi +
pop edi  +
pop ebx  +
pop esi  +
retn   +
***
push eax  +
push dword ptr [esi+0Ch]  +
call ds:SelectObject  +
push esi  +
mov [esi+18h] eax +
call sub_1037353  +
jmp loc_1017E71  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
or dword ptr [esi+48h] 0FFFFFFFFh +
push dword_108A1C8  +
call ds:CreateSolidBrush  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_10373DB  +
mov eax [esi+24h] +
push ebx  +
mov ebx ds:SelectPalette +
test eax eax +
jnz loc_103EDF1  +
push edi  +
push [ebp+var_8]  +
mov edi ds:SelectObject +
push dword ptr [esi+0Ch]  +
call edi  +
push 0F00021h  +
push dword ptr [esi+30h]  +
mov [ebp+arg_0] eax +
push dword ptr [esi+2Ch]  +
push 0  +
push 0  +
push dword ptr [esi+0Ch]  +
call ds:PatBlt  +
cmp [ebp+arg_0] 0 +
jz loc_10373C3  +
push [ebp+arg_0]  +
push dword ptr [esi+0Ch]  +
call edi  +
push [ebp+var_8]  +
call ds:DeleteObject  +
cmp [ebp+var_4] 0 +
pop edi  +
jnz loc_103EE0C  +
xor eax eax +
inc eax  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
and dword ptr [ebp-190h] 0 +
mov eax 28Bh +
mov [ebp-78h] ax +
mov eax 9D70h +
mov [ebp-76h] ax +
inc eax  +
mov [ebp-74h] ax +
mov eax 9D72h +
mov [ebp-72h] ax +
inc eax  +
mov [ebp-70h] ax +
xor eax eax +
mov [ebp-6Eh] ax +
mov eax 28Ch +
mov [ebp-6Ch] ax +
mov eax 9D7Ah +
mov [ebp-6Ah] ax +
inc eax  +
mov [ebp-68h] ax +
mov eax 9D7Ch +
mov [ebp-66h] ax +
inc eax  +
mov [ebp-64h] ax +
xor eax eax +
mov [ebp-62h] ax +
mov eax 28Dh +
mov [ebp-60h] ax +
mov eax 9D84h +
mov [ebp-5Eh] ax +
inc eax  +
mov [ebp-5Ch] ax +
mov eax 9D86h +
mov [ebp-5Ah] ax +
inc eax  +
mov [ebp-58h] ax +
xor eax eax +
mov [ebp-56h] ax +
mov eax 28Eh +
mov [ebp-54h] ax +
mov eax 9D8Eh +
mov [ebp-52h] ax +
inc eax  +
mov [ebp-50h] ax +
mov eax 9D90h +
mov [ebp-4Eh] ax +
inc eax  +
mov [ebp-4Ch] ax +
xor eax eax +
mov [ebp-4Ah] ax +
mov eax 28Fh +
mov [ebp-48h] ax +
mov eax 9DA2h +
mov [ebp-46h] ax +
inc eax  +
mov [ebp-44h] ax +
mov eax 9DA4h +
mov [ebp-42h] ax +
inc eax  +
mov [ebp-40h] ax +
xor eax eax +
mov [ebp-3Eh] ax +
mov eax 290h +
mov [ebp-3Ch] ax +
mov eax 9DACh +
mov [ebp-3Ah] ax +
inc eax  +
mov [ebp-38h] ax +
mov eax 9DAEh +
mov [ebp-36h] ax +
inc eax  +
mov [ebp-34h] ax +
xor eax eax +
mov [ebp-32h] ax +
mov eax 291h +
mov [ebp-30h] ax +
mov eax 9DB6h +
mov [ebp-2Eh] ax +
inc eax  +
mov [ebp-2Ch] ax +
mov eax 9DB8h +
mov [ebp-2Ah] ax +
inc eax  +
mov [ebp-28h] ax +
xor eax eax +
mov [ebp-26h] ax +
mov eax 292h +
mov [ebp-24h] ax +
mov eax 9DC0h +
mov [ebp-22h] ax +
inc eax  +
mov [ebp-20h] ax +
mov eax 9DC2h +
mov [ebp-1Eh] ax +
inc eax  +
mov [ebp-1Ch] ax +
xor eax eax +
mov [ebp-1Ah] ax +
mov eax 293h +
mov [ebp-18h] ax +
mov eax 9D98h +
mov [ebp-16h] ax +
inc eax  +
mov [ebp-14h] ax +
mov eax 9D9Ah +
mov [ebp-12h] ax +
inc eax  +
mov [ebp-10h] ax +
xor eax eax +
push 9  +
mov [ebp-0Eh] ax +
lea esi [ebp-74h] +
pop ebx  +
mov ax [esi-2] +
push ds:dword_100FAB8  +
mov [ebp-0Ch] ax +
mov ax [esi] +
mov [ebp-0Ah] ax +
mov ax [esi+2] +
mov [ebp-8] ax +
mov ax [esi+4] +
mov [ebp-6] ax +
mov ax [esi-4] +
mov [ebp-19Ch] ax +
lea eax [ebp-0Ch] +
push eax  +
push offset dword_100FAA8  +
call sub_100FB15  +
mov [ebp-19Ah] ax +
movzx eax word ptr [esi+6] +
mov [ebp-198h] eax +
lea eax [ebp-19Ch] +
push eax  +
mov ecx edi +
call sub_1010DFE  +
add esi 0Ch +
dec ebx  +
jnz loc_1037570  +
jmp loc_1011745  +
***
fldz   +
mov eax ecx +
fst  dword ptr [eax] +
fst  dword ptr [eax+4] +
fstp  dword ptr [eax+8] +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_1046331  +
xor eax eax +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_104633D  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1046349  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 64h +
jb loc_1046350  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1037662  +
push esi  +
mov esi [ebp+arg_4] +
push 19h  +
pop ecx  +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1037685  +
mov ecx [ebp+arg_4] +
fld  dword ptr [ecx] +
fstp  dword ptr [eax] +
fld  dword ptr [ecx+4] +
fstp  dword ptr [eax+4] +
pop ebp  +
retn 8  +
***
xor eax eax +
jmp loc_1032A04  +
fstp  st(1) +
jmp loc_1032AA4  +
***
mov eax offset __imp_GdipCreateTexture +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDeleteMatrix +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipCreateMatrix +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDeleteRegion +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetCompositingMode +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetWorldTransform +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetWorldTransform +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDrawImagePointRectI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipCreateRegionRectI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetTextureImage +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipFillRegion +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipIsMatrixIdentity +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetTextureWrapMode +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetTextureWrapMode +
jmp loc_100ABE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_103774E  +
lea eax [edi+esi*8] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103777C  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_103779B  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_103766C  +
dec [ebp+arg_4]  +
add [ebp+arg_0] 8 +
jmp loc_1037781  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10377CA  +
mov eax [ebp+arg_4] +
imul eax eax +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10377F8  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_1037817  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_103764B  +
dec [ebp+arg_4]  +
add [ebp+arg_0] 64h +
jmp loc_10377FD  +
pop ebp  +
retn 18h  +
***
add esi 64h +
push esi  +
mov ecx offset dword_108C494 +
call sub_1037A7C  +
push esi  +
mov ecx offset unk_108C4A4 +
call sub_1037A7C  +
push esi  +
mov ecx offset unk_108C4B4 +
call sub_1037A7C  +
push esi  +
mov ecx offset dword_108C4C4 +
call sub_1037875  +
push esi  +
mov ecx offset unk_108C4D4 +
call sub_1037875  +
push esi  +
mov ecx offset unk_108C4E4 +
call sub_1037875  +
push esi  +
mov ecx offset unk_108B3F8 +
call sub_10378E3  +
jmp loc_1032A0C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebp+var_C] +
call sub_10375DD  +
sub esp 0Ch +
mov edi esp +
push [ebp+arg_0]  +
mov esi eax +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_10378AA  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101096F  +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jbe loc_10378D7  +
mov edx [esi+8] +
push edi  +
lea edi [ebp+arg_4] +
push edi  +
sub ecx eax +
push ecx  +
push edx  +
mov ecx esi +
call sub_101088E  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
jnb loc_10378D2  +
jmp loc_10479E7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
push ebx  +
push esi  +
push edi  +
push 64h  +
lea eax [ebp+var_64] +
push 0  +
push eax  +
mov ebx ecx +
call memset  +
sub esp 58h +
push 19h  +
pop ecx  +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+var_64] +
movs   +
mov ecx ebx +
call sub_1037920  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10375EF  +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jbe loc_103794D  +
mov edx [esi+8] +
push edi  +
lea edi [ebp+arg_4] +
push edi  +
sub ecx eax +
push ecx  +
push edx  +
mov ecx esi +
call sub_1037959  +
pop edi  +
pop esi  +
pop ebp  +
retn 68h  +
jnb loc_1037948  +
jmp loc_10479B1  +
***
call sub_1002370  +
mov ebx ecx +
mov esi [ebp+10h] +
push 19h  +
pop ecx  +
lea edi [ebp-74h] +
movs   +
mov ecx ebx +
call sub_1037602  +
mov esi [ebp+0Ch] +
mov edi eax +
test esi esi +
jz loc_1037A22  +
mov ecx ebx +
call sub_10375EF  +
mov ecx 28F5C28h +
mov edx ecx +
sub edx eax +
cmp edx esi +
jb loc_1047742  +
add eax esi +
cmp edi eax +
jnb loc_104777A  +
mov edx edi +
shr edx 1 +
sub ecx edx +
cmp ecx edi +
jb loc_1047747  +
add edi edx +
cmp edi eax +
jnb loc_10379BE  +
mov edi eax +
push 0  +
push edi  +
call sub_1037615  +
and dword ptr [ebp-4] 0 +
push ebx  +
mov [ebp+10h] eax +
push dword ptr [ebp+10h]  +
mov eax [ebx+4] +
push dword ptr [ebp+8]  +
push eax  +
call sub_1037A2F  +
lea ecx [ebp-74h] +
push ecx  +
push esi  +
push eax  +
mov ecx ebx +
call sub_10377A4  +
mov ecx [ebx+8] +
push ebx  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
call sub_1037A2F  +
mov ecx ebx +
call sub_10375EF  +
add esi eax +
mov eax [ebx+4] +
test eax eax +
jnz loc_104774E  +
mov eax [ebp+10h] +
imul edi edi +
imul esi esi +
add edi eax +
add esi eax +
mov [ebx+0Ch] edi +
mov [ebx+8] esi +
mov [ebx+4] eax +
call sub_1002061  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1037A5D  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jnz loc_1046BD8  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fldz   +
push ecx  +
push ecx  +
mov eax esp +
push [ebp+arg_0]  +
fst  dword ptr [eax+4] +
fstp  dword ptr [eax] +
call sub_1037A9D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100CA8E  +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jbe loc_1037ACA  +
mov edx [esi+8] +
push edi  +
lea edi [ebp+arg_4] +
push edi  +
sub ecx eax +
push ecx  +
push edx  +
mov ecx esi +
call sub_1037AD6  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
jnb loc_1037AC5  +
jmp loc_10479CC  +
***
call sub_1002370  +
mov esi ecx +
mov eax [ebp+10h] +
fld  dword ptr [eax] +
fstp  dword ptr [ebp-18h] +
fld  dword ptr [eax+4] +
fstp  dword ptr [ebp-14h] +
call sub_100CADB  +
mov edi [ebp+0Ch] +
mov [ebp+10h] eax +
test edi edi +
jz loc_1037BA5  +
mov ecx esi +
call sub_100CA8E  +
mov ecx 1FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_104781A  +
add eax edi +
cmp [ebp+10h] eax +
jnb loc_1047854  +
mov edx [ebp+10h] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp+10h] +
jb loc_104781F  +
add [ebp+10h] edx +
cmp [ebp+10h] eax +
jnb loc_1037B43  +
mov [ebp+10h] eax +
push 0  +
push dword ptr [ebp+10h]  +
call sub_100CAF0  +
and dword ptr [ebp-4] 0 +
mov ebx eax +
mov eax [esi+4] +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp+0Ch] ebx +
push eax  +
call sub_1037BB2  +
lea ecx [ebp-18h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_1037728  +
mov ecx [esi+8] +
push esi  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
call sub_1037BB2  +
mov ecx esi +
call sub_100CA8E  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jnz loc_1047828  +
mov eax [ebp+10h] +
lea eax [ebx+eax*8] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*8] +
mov [esi+8] eax +
mov [esi+4] ebx +
call sub_1002061  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1037BE0  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jnz loc_1046BED  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn 18h  +
***
call sub_100208C  +
xor esi esi +
cmp [ebp+0Ch] esi +
jz loc_1037CEB  +
cmp dword_108A230 esi +
jz loc_1037CEB  +
push dword ptr [ebp+8]  +
lea ecx [ebp-40h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
mov [ebp-4] esi +
call sub_10083F8  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-40h] +
call ?IntersectClipRect@CDC@@QAEHPBUtagRECT@@@Z  +
mov ecx [ebp+8] +
call sub_1005DB8  +
mov ecx [ebp+8] +
mov esi offset stru_108A338 +
lea edi [ebp-1Ch] +
movs   +
movs   +
movs   +
mov ebx eax +
lea eax [ebp-1Ch] +
push eax  +
movs   +
call sub_1008309  +
mov eax [ebp-14h] +
sub eax [ebp-1Ch] +
mov esi ds:PatBlt +
push 42h  +
xor edi edi +
inc edi  +
push edi  +
add eax ebx +
push eax  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-3Ch]  +
call esi  +
mov eax [ebp-18h] +
mov ecx [ebp-10h] +
push 42h  +
sub ecx eax +
lea ecx [ecx+ebx-2] +
push ecx  +
push edi  +
inc eax  +
push eax  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-3Ch]  +
call esi  +
mov eax [ebp-18h] +
mov ecx [ebp-10h] +
mov edx [ebp-14h] +
push 42h  +
sub ecx eax +
lea ecx [ecx+ebx-2] +
push ecx  +
push edi  +
inc eax  +
push eax  +
lea edx [edx+ebx-1] +
push edx  +
push dword ptr [ebp-3Ch]  +
call esi  +
mov eax [ebp-14h] +
sub eax [ebp-1Ch] +
mov ecx [ebp-10h] +
push 42h  +
push edi  +
add eax ebx +
push eax  +
lea ebx [ecx+ebx-1] +
push ebx  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-3Ch]  +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call ??1CClientDC@@UAE@XZ  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
lea eax [ebp+pt] +
push eax  +
mov edi ecx +
call ds:GetCursorPos  +
call sub_10049D9  +
mov ecx eax +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
mov esi [eax+48h] +
lea eax [ebp+pt] +
push eax  +
push dword ptr [esi+20h]  +
call ds:ScreenToClient  +
lea eax [ebp+rc] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_1037DBC  +
lea eax [ebp+pt] +
push eax  +
mov ecx esi +
call sub_100839D  +
mov esi [esi+40h] +
mov eax [ebp+pt.x] +
cmp eax [esi+2Ch] +
jg loc_103F72C  +
mov eax [ebp+pt.y] +
cmp eax [esi+30h] +
jg loc_103F72C  +
mov eax [edi+3Ch] +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0Eh +
setz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100A1F3  +
push dword ptr [esi+40h]  +
call sub_10049D9  +
mov ecx eax +
add ecx 51Ch +
call sub_1009E8E  +
pop esi  +
pop ebp  +
retn 4  +
***
lea eax [ebp+var_10] +
push 2  +
push eax  +
mov [ebp+var_18] 60h +
mov [ebp+var_14] 90h +
mov [ebp+var_10] 2433h +
mov [ebp+var_C] 2434h +
lea eax [ebp+var_18] +
push eax  +
call sub_100A0E4  +
movzx eax ax +
jmp loc_1037D74  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_108A1C8 +
and dword_108A218 0 +
push esi  +
mov esi dword_108A224 +
push edi  +
push [ebp+arg_4]  +
mov edi eax +
push [ebp+arg_0]  +
mov dword_108A224 eax +
call sub_103049E  +
mov dword_108A1C8 edi +
pop edi  +
mov dword_108A224 esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+rcSrc2] +
push eax  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [esi+0Ch]  +
call sub_1037E89  +
lea eax [ebp+rcSrc2] +
push eax  +
push esi  +
call sub_1005D16  +
cmp [ebp+arg_20] 0 +
jnz loc_10380EB  +
pop esi  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_18] +
mov ecx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
cdq   +
sub eax edx +
mov edx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi eax +
mov eax [ebp+arg_10] +
sar edi 1 +
mov [ebp+var_10] ecx +
mov [ebp+var_C] esi +
mov [ebp+var_4] edx +
mov [ebp+var_8] eax +
test ebx ebx +
jz loc_1037F25  +
push [ebp+arg_14]  +
call ds:CreateSolidBrush  +
mov esi ds:SelectObject +
push eax  +
push ebx  +
mov [ebp+var_18] eax +
call esi  +
cmp [ebp+arg_18] 1 +
mov [ebp+var_14] eax +
jz loc_103F6A9  +
push [ebp+arg_1C]  +
mov ecx [ebp+var_8] +
push [ebp+arg_18]  +
mov eax [ebp+var_4] +
mov ebx [ebp+var_C] +
mov edx [ebp+var_10] +
sub ecx edi +
push ecx  +
sub eax edi +
push eax  +
sub ebx edi +
push ebx  +
mov ebx [ebp+arg_0] +
sub edx edi +
push edx  +
push ebx  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
push eax  +
call sub_1037F64  +
push [ebp+var_14]  +
push ebx  +
call esi  +
push [ebp+var_18]  +
call ds:DeleteObject  +
mov edx [ebp+var_4] +
mov esi [ebp+var_C] +
mov ecx [ebp+var_10] +
cmp ecx edx +
mov eax [ebp+arg_20] +
jl loc_10381C7  +
inc ecx  +
mov [eax] edx +
mov [eax+8] ecx +
mov ecx [ebp+var_8] +
cmp esi ecx +
jl loc_10381D2  +
inc esi  +
mov [eax+4] ecx +
mov [eax+0Ch] esi +
mov ecx [ebp+arg_18] +
add ecx ecx +
sub [eax] ecx +
sub [eax+4] ecx +
add [eax+8] ecx +
add [eax+0Ch] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
push 8  +
mov ecx esi +
call dword ptr [eax+2Ch]  +
cmp [ebp+arg_18] 1 +
mov edi eax +
jnz loc_1037F97  +
push [ebp+arg_14]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_1037FAA  +
push edi  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_14] +
sub esp 30h +
cmp eax ecx +
push esi  +
jg loc_1038196  +
lea esi [ecx+edx] +
add edx eax +
mov [ebp+var_28] esi +
mov [ebp+var_30.x] esi +
mov [ebp+var_20] edx +
mov [ebp+var_8] ecx +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_18] +
mov [ebp+var_18] eax +
mov [ebp+var_10] eax +
mov eax [ebp+arg_10] +
cmp eax ecx +
jg loc_10381AB  +
lea esi [ecx+edx] +
add edx eax +
mov [ebp+var_4] esi +
mov [ebp+var_30.y] esi +
mov [ebp+var_24] ecx +
mov [ebp+var_14] eax +
mov [ebp+var_1C] eax +
mov [ebp+var_C] edx +
mov eax [ebp+arg_0] +
pop esi  +
test eax eax +
jz locret_103801A  +
push 6  +
lea ecx [ebp+var_30] +
push ecx  +
push dword ptr [eax+4]  +
call ds:Polygon  +
leave   +
retn 1Ch  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov ebx [ebp+0Ch] +
xor edx edx +
cmp [ebx+18h] edx +
mov dword_108A218 edx +
mov dword_108A21C edx +
jz loc_10383DF  +
mov eax dword_108A1C8 +
mov esi dword_108A224 +
push 1  +
push 1  +
mov dword_108A224 eax +
push dword ptr [ecx+34h]  +
lea edi [ebx+10h] +
push eax  +
push dword ptr [edi+4]  +
mov [ebp+0Ch] eax +
push dword ptr [edi]  +
mov eax [ebp+8] +
push dword ptr [ebx+0Ch]  +
push dword ptr [ebx+8]  +
push dword ptr [eax+40h]  +
call sub_1037E3E  +
mov eax [ebp+0Ch] +
mov dword_108A224 esi +
mov dword_108A1C8 eax +
mov eax [edi] +
cmp eax rcDst.left +
jl loc_103F97C  +
cmp eax rcDst.right +
jle loc_10380A9  +
mov rcDst.right eax +
mov ebx [ebx+14h] +
cmp ebx rcDst.top +
jl loc_103F986  +
cmp ebx rcDst.bottom +
jle loc_10380C6  +
mov rcDst.bottom ebx +
push edi  +
call sub_100A8D8  +
mov ecx [ebp+8] +
mov dword_108A21C 1 +
push dword ptr [edi+4]  +
push dword ptr [edi]  +
call sub_10354F7  +
call sub_1002061  +
retn 8  +
***
lea eax [ebp+rcSrc2] +
push eax  +
push esi  +
call sub_100D173  +
jmp loc_1037E7F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
mov dword_108A238 1 +
mov eax [esi+10h] +
mov rcDst.right eax +
mov edx [esi+14h] +
push esi  +
push [ebp+arg_0]  +
mov rcDst.bottom edx +
mov rcDst.left eax +
mov rcDst.top edx +
mov eax [ecx] +
call dword ptr [eax+34h]  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+34h] +
mov ecx [ebp+arg_0] +
shr eax 1 +
sub rcDst.left eax +
mov eax [esi+34h] +
shr eax 1 +
sub rcDst.top eax +
mov eax [esi+34h] +
inc eax  +
shr eax 1 +
add rcDst.right eax +
mov eax [esi+34h] +
inc eax  +
shr eax 1 +
add rcDst.bottom eax +
push offset rcDst  +
call sub_100A226  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_1030468  +
pop esi  +
pop ebp  +
retn 8  +
***
mov [ebp+var_20] eax +
add eax edx +
add edx ecx +
mov [ebp+var_28] ecx +
mov [ebp+var_30.x] ecx +
mov [ebp+var_8] edx +
jmp loc_1037FD5  +
mov [ebp+var_4] ecx +
mov [ebp+var_30.y] ecx +
add ecx edx +
mov [ebp+var_24] ecx +
lea ecx [edx+eax] +
mov [ebp+var_14] ecx +
mov [ebp+var_1C] ecx +
mov [ebp+var_C] eax +
jmp loc_1038003  +
***
inc edx  +
mov [eax] ecx +
mov [eax+8] edx +
jmp loc_1037F36  +
inc ecx  +
mov [eax+4] esi +
mov [eax+0Ch] ecx +
jmp loc_1037F48  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 80Ch +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_14] +
lea eax [ebp+var_80C] +
push eax  +
push 100h  +
xor ebx ebx +
push ebx  +
push dword ptr [edi+4]  +
call ds:GetDIBColorTable  +
mov esi eax +
mov [ebp+var_C] esi +
cmp esi ebx +
jnz loc_103E452  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 28h  +
***
call sub_100208C  +
mov [ebp-14h] ecx +
push dword ptr [ebp+2Ch]  +
mov esi [ebp+18h] +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push esi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10381E3  +
test eax eax +
jnz loc_10383C4  +
lea ecx [ebp-30h] +
call ??0CDC@@QAE@XZ  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-1Ch] ebx +
mov dword ptr [ebp-20h] offset off_102DC54 +
mov eax 0FFFFh +
cdq   +
idiv  dword ptr [ebp+14h] +
mov byte ptr [ebp-4] 1 +
mov [ebp-18h] ebx +
mov edi eax +
cmp esi edi +
jge loc_103829C  +
mov eax esi +
cmp eax 1 +
jl loc_103E5E3  +
cmp esi edi +
jge loc_10382AB  +
mov edi esi +
push ebx  +
call ds:GetDC  +
push ebx  +
lea ecx [ebp-30h] +
mov [ebp-10h] eax +
call sub_1002292  +
test eax eax +
jz loc_10383CC  +
push edi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-10h]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
push eax  +
lea ecx [ebp-20h] +
call sub_1008818  +
test eax eax +
jz loc_10383CC  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-30h] +
call sub_10022BD  +
mov [ebp-18h] eax +
cmp eax ebx +
jz loc_10383CC  +
xor esi esi +
push dword ptr [ebp-10h]  +
push ebx  +
call ds:ReleaseDC  +
push ebx  +
cmp esi ebx +
jnz loc_103E5EB  +
push dword ptr [ebp+1Ch]  +
mov ecx [ebp-14h] +
call sub_1035462  +
mov ecx [ebp-14h] +
mov [ebp-10h] eax +
push ebx  +
lea eax [ebp-30h] +
push eax  +
call sub_1035462  +
push dword ptr [ebp+2Ch]  +
lea ecx [ebp-30h] +
mov [ebp-14h] eax +
call ?SetBkColor@CDC@@UAEKK@Z  +
xor esi esi +
cmp [ebp+18h] ebx +
jle loc_1038390  +
mov eax [ebp+18h] +
sub eax esi +
cmp edi eax +
jg loc_103E5FA  +
mov eax [ebp+24h] +
push 0CC0020h  +
add eax esi +
push eax  +
push dword ptr [ebp+20h]  +
lea ecx [ebp-30h] +
push dword ptr [ebp+1Ch]  +
push edi  +
push dword ptr [ebp+14h]  +
push ebx  +
push ebx  +
call sub_100988D  +
push dword ptr [ebp+28h]  +
mov ecx [ebp+8] +
push ebx  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
mov eax [ebp+10h] +
push edi  +
push dword ptr [ebp+14h]  +
add eax esi +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_100988D  +
add esi edi +
cmp esi [ebp+18h] +
jl loc_103833F  +
cmp [ebp-10h] ebx +
jnz loc_103E601  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-30h] +
call sub_10022BD  +
cmp [ebp-14h] ebx +
jnz loc_103E612  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call sub_102DCC1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
call ??1CDC@@UAE@XZ  +
call sub_1002061  +
retn 28h  +
xor esi esi +
inc esi  +
jmp loc_10382FC  +
***
call sub_10049FD  +
mov eax [ebp+8] +
mov eax [eax+40h] +
push dword ptr [eax+0Ch]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov esi eax +
lea eax [ebp-4Ch] +
push eax  +
mov eax [ebp-10h] +
push 1  +
push dword ptr [eax+34h]  +
lea edi [ebx+10h] +
push 0FFFFFFh  +
push dword ptr [edi+4]  +
push dword ptr [edi]  +
push dword ptr [ebx+0Ch]  +
push dword ptr [ebx+8]  +
push 0  +
call sub_1037E89  +
and dword ptr [ebp-38h] 0 +
mov dword ptr [ebp-3Ch] offset off_102DC54 +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-5Ch] +
call ??0CDC@@QAE@XZ  +
push 0  +
lea ecx [ebp-5Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1002292  +
test eax eax +
jz loc_103F991  +
mov eax [ebp-40h] +
sub eax [ebp-48h] +
mov ecx [ebp-44h] +
sub ecx [ebp-4Ch] +
push 0  +
push 1  +
push 1  +
push eax  +
push ecx  +
lea ecx [ebp-3Ch] +
call sub_1035483  +
test eax eax +
jz loc_103F991  +
lea eax [ebp-3Ch] +
push eax  +
lea ecx [ebp-5Ch] +
call sub_10022BD  +
push dword ptr [ebp-48h]  +
mov [ebp-24h] eax +
push dword ptr [ebp-4Ch]  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-5Ch] +
call ?SetWindowOrg@CDC@@QAE?AVCPoint@@HH@Z  +
mov eax [ebp-40h] +
sub eax [ebp-48h] +
mov ecx [ebp-44h] +
sub ecx [ebp-4Ch] +
push 42h  +
push eax  +
push ecx  +
push dword ptr [ebp-48h]  +
push dword ptr [ebp-4Ch]  +
push dword ptr [ebp-58h]  +
call ds:PatBlt  +
lea eax [ebp-4Ch] +
push eax  +
mov eax [ebp-10h] +
push 1  +
push dword ptr [eax+34h]  +
push 0FFFFFFh  +
push dword ptr [edi+4]  +
push dword ptr [edi]  +
push dword ptr [ebx+0Ch]  +
push dword ptr [ebx+8]  +
push dword ptr [ebp-58h]  +
call sub_1037E89  +
push 0  +
push esi  +
mov ecx offset unk_108AEA0 +
call sub_1035462  +
push 0  +
mov [ebp+0Ch] eax +
push 0  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call sub_1009A3F  +
and dword ptr [ebp-30h] 0 +
mov dword ptr [ebp-34h] offset off_100A058 +
push dword_108A1C8  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call sub_100A0C1  +
push dword_108A224  +
mov eax [ebp-40h] +
sub eax [ebp-48h] +
mov ecx [ebp-44h] +
sub ecx [ebp-4Ch] +
push 8800C6h  +
push dword ptr [ebp-48h]  +
push dword ptr [ebp-4Ch]  +
push esi  +
push eax  +
push ecx  +
push dword ptr [ebp-48h]  +
lea eax [ebp-5Ch] +
push dword ptr [ebp-4Ch]  +
push eax  +
call sub_10381E3  +
test eax eax +
jnz loc_1038602  +
and [ebp-28h] eax +
mov dword ptr [ebp-2Ch] offset off_100A058 +
push dword_108A224  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call sub_100A0C1  +
push dword ptr [ebp-28h]  +
call ds:UnrealizeObject  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov [ebp-10h] eax +
mov eax [ebp-40h] +
sub eax [ebp-48h] +
push 5A0049h  +
push eax  +
mov eax [ebp-44h] +
sub eax [ebp-4Ch] +
mov ecx esi +
push eax  +
push dword ptr [ebp-48h]  +
push dword ptr [ebp-4Ch]  +
call sub_1035113  +
mov eax [ebp-40h] +
sub eax [ebp-48h] +
push 0  +
push 8800C6h  +
push dword ptr [ebp-48h]  +
mov ecx offset unk_108AEA0 +
push dword ptr [ebp-4Ch]  +
push esi  +
push eax  +
mov eax [ebp-44h] +
sub eax [ebp-4Ch] +
push eax  +
push dword ptr [ebp-48h]  +
lea eax [ebp-5Ch] +
push dword ptr [ebp-4Ch]  +
push eax  +
call sub_1038232  +
mov eax [ebp-40h] +
sub eax [ebp-48h] +
push 5A0049h  +
push eax  +
mov eax [ebp-44h] +
sub eax [ebp-4Ch] +
mov ecx esi +
push eax  +
push dword ptr [ebp-48h]  +
push dword ptr [ebp-4Ch]  +
call sub_1035113  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
mov dword ptr [ebp-2Ch] offset off_100A058 +
call sub_1002407  +
lea eax [ebp-34h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov [ebp-20h] eax +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push 0  +
push dword ptr [esi+4]  +
call sub_10386E9  +
push dword ptr [ebp-14h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+34h]  +
push dword ptr [ebp-18h]  +
mov [ebp-10h] eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+38h]  +
push 0E20746h  +
push dword ptr [ebp-48h]  +
mov [ebp-1Ch] eax +
push dword ptr [ebp-4Ch]  +
lea eax [ebp-5Ch] +
push eax  +
mov eax [ebp-40h] +
sub eax [ebp-48h] +
mov ecx esi +
push eax  +
mov eax [ebp-44h] +
sub eax [ebp-4Ch] +
push eax  +
push dword ptr [ebp-48h]  +
push dword ptr [ebp-4Ch]  +
call sub_100988D  +
push dword ptr [ebp-10h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+34h]  +
push dword ptr [ebp-1Ch]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+38h]  +
push dword ptr [ebp-20h]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push dword ptr [ebp-24h]  +
lea ecx [ebp-5Ch] +
call sub_10022BD  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_103F96B  +
mov esi [ebp+8] +
lea eax [ebp-4Ch] +
push eax  +
push dword ptr [esi+40h]  +
call sub_1005D16  +
lea eax [ebp-4Ch] +
push eax  +
push dword ptr [esi+40h]  +
call sub_100D173  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ebp-34h] offset off_100A058 +
call sub_1002407  +
lea ecx [ebp-5Ch] +
mov byte ptr [ebp-4] 0 +
call ??1CDC@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
call sub_102DCC1  +
jmp loc_103808E  +
***
mov edi edi +
push dword ptr [ebp-0A8h]  +
push dword ptr [ebp-20h]  +
push ebx  +
push dword ptr [ebp-44h]  +
push dword ptr [ebp-24h]  +
call ds:SetDIBits  +
test eax eax +
jz loc_1038787  +
push dword ptr [ebp-44h]  +
push dword ptr [ebp-14h]  +
call esi  +
push 0CC0020h  +
push ebx  +
push ebx  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-20h]  +
push 1  +
push ebx  +
push dword ptr [ebp-38h]  +
push dword ptr [ebp-6Ch]  +
call ds:BitBlt  +
push dword ptr [ebp-0B0h]  +
push dword ptr [ebp-14h]  +
call esi  +
mov eax [ebp-88h] +
inc dword ptr [ebp-48h]  +
add [ebp-38h] eax +
mov eax [ebp-48h] +
cmp eax [ebp-1Ch] +
jl loc_1038CB3  +
***
mov ecx [ebp-1Ch] +
xor eax eax +
cmp [ebp-48h] ecx +
setz al  +
mov [ebp-38h] eax +
cmp eax ebx +
jz loc_1042E99  +
cmp [ebp-40h] ebx +
jz loc_10387AA  +
push dword ptr [ebp-40h]  +
call sub_1038D5D  +
cmp [ebp-5Ch] ebx +
jz loc_10387B7  +
push dword ptr [ebp-5Ch]  +
call sub_1038D5D  +
mov esi ds:SelectPalette +
cmp [ebp-0BCh] ebx +
jnz sub_1042EBB  +
cmp [ebp-0B8h] ebx +
jnz sub_1042ECC  +
mov esi [ebp-20h] +
cmp [ebp-10h] ebx +
jz loc_10387E6  +
push dword ptr [ebp-10h]  +
call ds:DeleteDC  +
cmp [ebp-14h] ebx +
jz loc_10387F4  +
push dword ptr [ebp-14h]  +
call ds:DeleteDC  +
cmp [ebp-30h] ebx +
jz loc_1038802  +
push dword ptr [ebp-30h]  +
call ds:DeleteObject  +
cmp [ebp-44h] ebx +
jz loc_1038810  +
push dword ptr [ebp-44h]  +
call ds:DeleteObject  +
mov ecx edi +
call ?EndWaitCursor@CCmdTarget@@QAEXXZ  +
cmp [ebp-38h] ebx +
jz loc_1042EDD  +
cmp [ebp-18h] ebx +
jnz sub_1042F35  +
cmp dword_108AF30 ebx +
jnz loc_1038975  +
cmp dword_108A218 ebx +
jnz loc_1038975  +
push 1  +
push offset aResizeBitmap  +
mov ecx offset unk_108B4B8 +
call sub_100D1F5  +
mov eax [ebp-1Ch] +
mov [ebp-58h] eax +
lea eax [ebp-58h] +
push eax  +
mov eax [edi+40h] +
mov [ebp-54h] esi +
mov ecx [eax+4] +
push 15Eh  +
call sub_103584E  +
mov eax [edi+40h] +
mov ecx [ebp-1Ch] +
mov [eax+2Ch] ecx +
mov eax [edi+40h] +
mov [eax+30h] esi +
push dword ptr [edi+40h]  +
call sub_100D08B  +
mov eax [edi+40h] +
mov ecx [eax+30h] +
mov eax [eax+2Ch] +
push 0CC0020h  +
push ebx  +
push ebx  +
push dword ptr [ebp-6Ch]  +
push ecx  +
push eax  +
mov eax [ebp-34h] +
push ebx  +
push ebx  +
push dword ptr [eax+4]  +
call ds:BitBlt  +
push dword ptr [ebp-84h]  +
lea ecx [ebp-70h] +
call sub_10022BD  +
cmp [ebp-3Ch] ebx +
jnz sub_1042F48  +
lea ecx [ebp-2Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov edx [ebp-7Ch] +
mov esi [ebp-80h] +
mov eax edx +
sub eax esi +
add eax [ebp-78h] +
mov ecx esi +
mov [ebp-8Ch] eax +
lea eax [ebp-98h] +
sub ecx edx +
add ecx [ebp-74h] +
push eax  +
push dword ptr [edi+40h]  +
mov [ebp-98h] esi +
mov [ebp-94h] edx +
mov [ebp-90h] ecx +
call sub_1005D16  +
lea eax [ebp-98h] +
push eax  +
push dword ptr [edi+40h]  +
call sub_100D173  +
lea eax [ebp-98h] +
push eax  +
mov ecx edi +
call sub_100A226  +
mov ecx offset unk_108B4B8 +
call sub_100D848  +
push dword ptr [edi+40h]  +
call sub_100D2D1  +
push 1  +
push ebx  +
push dword ptr [edi+20h]  +
call ds:InvalidateRect  +
push dword ptr [edi+20h]  +
call ds:UpdateWindow  +
lea ecx [ebp-70h] +
call ?DeleteDC@CDC@@QAEHXZ  +
lea ecx [ebp-70h] +
mov [ebp-4] bl +
call ??1CDC@@UAE@XZ  +
mov dword ptr [ebp-2Ch] offset off_1002208 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call sub_1002407  +
call sub_1002061  +
retn 4  +
cmp [ebp-3Ch] ebx +
jnz sub_1042F59  +
jmp loc_1042F65  +
cmp [ebp-18h] ebx +
jnz sub_10431BC  +
jmp loc_10431CA  +
cmp [ebp-18h] ebx +
jnz sub_10431DB  +
jmp loc_103896D  +
***
cmp dword_108BC04 0 +
push esi  +
push edi  +
mov edi ecx +
mov esi 40000000h +
jnz loc_10429D8  +
push 1  +
call sub_100AF58  +
mov ecx [edi+48h] +
push 5Ah  +
call sub_10389DD  +
cmp dword_108BC04 0 +
jnz loc_1042A36  +
pop edi  +
pop esi  +
retn   +
***
call sub_100208C  +
mov edi ecx +
mov [ebp-34h] edi +
mov esi off_108A1D4 +
mov eax [esi] +
xor ebx ebx +
push 4  +
mov ecx esi +
mov [ebp-18h] ebx +
call dword ptr [eax+68h]  +
test al al +
jnz loc_1042E22  +
call sub_10049FD  +
cmp dword_108AF30 ebx +
jnz loc_1042E48  +
cmp dword_108A218 ebx +
jnz loc_1042E48  +
mov eax [edi+40h] +
mov ecx [eax+30h] +
mov eax [eax+2Ch] +
push ecx  +
push eax  +
push ebx  +
push ebx  +
lea eax [ebp-80h] +
push eax  +
call ds:SetRect  +
mov eax [edi+40h] +
mov eax [eax+0Ch] +
mov [ebp-24h] eax +
lea eax [ebp-80h] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_1038991  +
cmp [ebp-24h] ebx +
jz loc_1038991  +
mov eax [ebp-74h] +
sub eax [ebp-7Ch] +
mov esi [ebp-78h] +
sub esi [ebp-80h] +
mov [ebp-1Ch] eax +
mov [ebp-0C4h] eax +
cdq   +
sub eax edx +
mov ecx eax +
mov eax esi +
cdq   +
sub eax edx +
sar ecx 1 +
sar eax 1 +
mov edx ecx +
sub edx eax +
add edx [ebp-7Ch] +
sub eax ecx +
add eax [ebp-80h] +
push edx  +
push eax  +
lea eax [ebp-0CCh] +
push eax  +
mov [ebp-20h] esi +
mov [ebp-0CCh] ebx +
mov [ebp-0C8h] ebx +
mov [ebp-0C0h] esi +
call ds:OffsetRect  +
mov [ebp-28h] ebx +
mov dword ptr [ebp-2Ch] offset off_1002208 +
lea ecx [ebp-70h] +
mov [ebp-4] ebx +
call ??0CDC@@QAE@XZ  +
mov eax [edi+40h] +
push dword ptr [eax+0Ch]  +
mov byte ptr [ebp-4] 1 +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov [ebp-34h] eax +
cmp eax ebx +
jz loc_103894F  +
push esi  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-2Ch] +
push eax  +
call sub_1008818  +
test eax eax +
jz loc_1038983  +
push dword ptr [ebp-34h]  +
lea ecx [ebp-70h] +
call sub_1002292  +
test eax eax +
jz loc_1038983  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-70h] +
call sub_10022BD  +
mov [ebp-84h] eax +
push ebx  +
lea eax [ebp-70h] +
push eax  +
mov ecx edi +
call sub_1009365  +
mov ecx edi +
mov [ebp-3Ch] eax +
call ?BeginWaitCursor@CCmdTarget@@QAEXXZ  +
push dword ptr [ebp-24h]  +
mov [ebp-38h] ebx +
call ds:CreateCompatibleDC  +
push dword ptr [ebp-24h]  +
mov [ebp-10h] eax +
call ds:CreateCompatibleDC  +
push 1  +
push esi  +
push dword ptr [ebp-24h]  +
mov [ebp-14h] eax +
call ds:CreateCompatibleBitmap  +
push esi  +
push 1  +
push dword ptr [ebp-24h]  +
mov [ebp-30h] eax +
call ds:CreateCompatibleBitmap  +
mov [ebp-44h] eax +
cmp [ebp-10h] ebx +
jz loc_1042F24  +
cmp [ebp-14h] ebx +
jz loc_1042F24  +
cmp [ebp-30h] ebx +
jz loc_1042F24  +
cmp eax ebx +
jz loc_1042F24  +
mov esi ds:SelectObject +
push eax  +
push dword ptr [ebp-14h]  +
call esi  +
push dword ptr [ebp-30h]  +
mov [ebp-0B0h] eax +
push dword ptr [ebp-10h]  +
call esi  +
push 42h  +
push 1  +
push dword ptr [ebp-20h]  +
mov [ebp-0ACh] eax +
push ebx  +
push ebx  +
push dword ptr [ebp-10h]  +
call ds:PatBlt  +
push 42h  +
push dword ptr [ebp-20h]  +
push 1  +
push ebx  +
push ebx  +
push dword ptr [ebp-14h]  +
call ds:PatBlt  +
push ebx  +
push dword ptr [ebp-10h]  +
mov ecx edi +
call sub_10353BF  +
push ebx  +
push dword ptr [ebp-14h]  +
mov ecx edi +
mov [ebp-0BCh] eax +
call sub_10353BF  +
push dword ptr [ebp-0B0h]  +
mov [ebp-0B8h] eax +
push dword ptr [ebp-14h]  +
call esi  +
push dword ptr [ebp-0ACh]  +
push dword ptr [ebp-10h]  +
call esi  +
mov eax [edi+40h] +
push dword ptr [eax+40h]  +
push dword ptr [eax+3Ch]  +
lea eax [ebp-54h] +
push eax  +
push ebx  +
push dword_108B1D4  +
push 18h  +
push ebx  +
push dword ptr [ebp-30h]  +
call sub_102EDC2  +
mov [ebp-40h] eax +
mov eax [edi+40h] +
push dword ptr [eax+40h]  +
push dword ptr [eax+3Ch]  +
lea eax [ebp-54h] +
push eax  +
push ebx  +
push dword_108B1D4  +
push 18h  +
push ebx  +
push dword ptr [ebp-44h]  +
call sub_102EDC2  +
mov [ebp-5Ch] eax +
cmp [ebp-40h] ebx +
jz loc_1042EAA  +
cmp eax ebx +
jz loc_1042EAA  +
push ebx  +
push dword ptr [ebp-40h]  +
call sub_1038D78  +
push ebx  +
push dword ptr [ebp-5Ch]  +
mov [ebp-0A4h] eax +
call sub_1038D78  +
cmp dword ptr [ebp+8] 10Eh +
mov [ebp-0A8h] eax +
jz loc_1042E82  +
or dword ptr [ebp-88h] 0FFFFFFFFh +
mov eax [ebp-1Ch] +
mov ecx [ebp-20h] +
dec eax  +
dec ecx  +
mov [ebp-0B4h] ecx +
cmp [ebp-1Ch] ebx +
mov [ebp-48h] ebx +
mov [ebp-38h] eax +
jle loc_1038787  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-10h]  +
call esi  +
push 0CC0020h  +
push dword ptr [ebp-48h]  +
push ebx  +
push dword ptr [ebp-24h]  +
push 1  +
push dword ptr [ebp-20h]  +
push ebx  +
push ebx  +
push dword ptr [ebp-10h]  +
call ds:BitBlt  +
push dword ptr [ebp-0ACh]  +
push dword ptr [ebp-10h]  +
call esi  +
push ebx  +
push dword ptr [ebp-40h]  +
push dword ptr [ebp-0A4h]  +
push 1  +
push ebx  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-24h]  +
call ds:GetDIBits  +
test eax eax +
jz loc_1038787  +
mov ecx [ebp-0B4h] +
cmp ecx ebx +
mov eax [ebp-0A4h] +
mov [ebp-5Dh] bl +
jl sub_1038722  +
mov edx [ebp-20h] +
dec edx  +
cmp ecx edx +
jg sub_1038722  +
mov dl [eax] +
inc eax  +
mov [ebp-60h] dl +
mov dl [eax] +
inc eax  +
mov [ebp-5Fh] dl +
mov dl [eax] +
inc eax  +
mov [ebp-5Eh] dl +
mov edx [ebp-0A8h] +
mov [ebp-4Ch] eax +
mov eax [ebp-60h] +
mov [edx+ecx*4] eax +
add ecx [ebp-88h] +
js sub_1038722  +
mov eax [ebp-4Ch] +
jmp loc_1038D1A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_103EE57  +
pop ebp  +
jmp ds:GlobalFree  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_100B049  +
***
mov eax [eax+40h] +
cmp eax 259h +
jz loc_100AF7D  +
cmp eax 25Ah +
jz loc_100AF7D  +
mov eax [esi] +
push 0  +
mov ecx esi +
call dword ptr [eax+68h]  +
test al al +
jz loc_100AF6F  +
jmp loc_100AF7D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call GdipDeleteMatrix  +
test [ebp+arg_0] 1 +
jz loc_1038DDC  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+8] +
mov esi [eax] +
cmp esi eax +
jz loc_1038E0C  +
mov ecx [esi+8] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov esi [esi] +
cmp esi [edi+8] +
jnz loc_1038DFA  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov edi ecx +
mov [ebp-10h] edi +
lea ecx [edi+4] +
mov dword ptr [edi] offset off_102DCFC +
call sub_100BD0F  +
mov ebx [ebp+8] +
mov eax [ebx+8] +
mov esi [eax] +
and dword ptr [ebp-4] 0 +
cmp esi eax +
jz loc_1038E57  +
push dword ptr [esi+8]  +
mov ecx edi +
call sub_102DE81  +
mov esi [esi] +
cmp esi [ebx+8] +
jnz loc_1038E46  +
mov eax edi +
call sub_1002061  +
retn 4  +
***
mov ecx [ecx+10h] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+20h]  +
test al al +
jz loc_100BB2B  +
xor eax eax +
inc eax  +
jmp loc_100BB2D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+10h] 0 +
jz loc_104806C  +
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+38h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi [ebp+arg_0] +
mov ebx ecx +
mov esi [ebx+10h] +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+58h]  +
push [ebp+arg_4]  +
mov [ebx+10h] edi +
mov eax [edi] +
push esi  +
mov ecx edi +
call dword ptr [eax+54h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1039816  +
cmp eax 8 +
jz loc_1039816  +
cmp eax 0Bh +
jg loc_103980D  +
***
push eax  +
call sub_100BB1C  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 3Ch +
push ecx  +
mov ecx [ebp+8] +
call sub_100C6A4  +
mov eax [ebp+8] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
cmp byte ptr [esi+10h] 0 +
mov bl 1 +
jnz loc_1038F8E  +
fldz   +
fcom  dword ptr [esi+0A8h] +
fnstsw  ax +
test ah 44h +
jnp loc_1049E26  +
fstp  st +
push edi  +
push [ebp+arg_0]  +
call sub_100DC6A  +
mov ecx [ebp+arg_8] +
mov edi eax +
call sub_100DC54  +
test eax eax +
jz loc_1038F7A  +
mov ecx [ebp+arg_8] +
call sub_100DC3F  +
test eax eax +
jz loc_1038F7A  +
push [ebp+arg_8]  +
mov ecx edi +
call sub_100DDB1  +
mov bl al +
test bl bl +
jz loc_1038F87  +
push [ebp+arg_4]  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+58h]  +
mov bl al +
push edi  +
call sub_100D8C2  +
pop edi  +
pop esi  +
mov al bl +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_1030B13  +
fld  dword ptr [esi+0ACh] +
mov ecx eax +
push ecx  +
push ecx  +
fstp  [esp+24h+var_20] +
mov [ebp+var_C] ecx +
fld  dword ptr [esi+0A8h] +
fstp  [esp+24h+var_24] +
call sub_10396B3  +
call sub_1030B13  +
fld  dword ptr [esi+0A4h] +
mov ecx eax +
push ecx  +
fstp  [esp+20h+var_20] +
mov [ebp+var_10] ecx +
call sub_1039720  +
call sub_1030B13  +
fld1   +
cmp byte ptr [esi+4Dh] 0 +
fld  ds:flt_1038DB4 +
mov ebx eax +
jnz loc_1049E17  +
fxch  st(1) +
fst  [ebp+var_8] +
fxch  st(1) +
cmp byte ptr [esi+4Eh] 0 +
jnz loc_1049E1F  +
fstp  st +
fstp  [ebp+var_4] +
push ecx  +
fld  [ebp+var_4] +
push ecx  +
fstp  [esp+24h+var_20] +
mov ecx ebx +
fld  [ebp+var_8] +
fstp  [esp+24h+var_24] +
call sub_10396B3  +
call sub_1030B13  +
fld  dword ptr [esi+0B4h] +
push ecx  +
push ecx  +
fstp  [esp+24h+var_20] +
mov edi eax +
fld  dword ptr [esi+0B0h] +
mov ecx edi +
fstp  [esp+24h+var_24] +
call sub_10395E3  +
push [ebp+var_10]  +
mov ecx [ebp+var_C] +
call sub_10390A7  +
mov esi eax +
push ebx  +
mov ecx esi +
call sub_10390A7  +
mov ecx eax +
push edi  +
mov [ebp+var_8] ecx +
call sub_10390A7  +
push [ebp+var_C]  +
mov [ebp+var_4] eax +
call sub_1030B8B  +
push [ebp+var_10]  +
call sub_1030B8B  +
push ebx  +
call sub_1030B8B  +
push esi  +
call sub_1030B8B  +
push [ebp+var_8]  +
call sub_1030B8B  +
push edi  +
call sub_1030B8B  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
call sub_103977D  +
push 1  +
push [ebp+arg_0]  +
mov esi eax +
mov ecx esi +
call sub_103967F  +
lea eax [ebp+var_18] +
push eax  +
mov ecx esi +
call sub_1039650  +
test esi esi +
jz loc_10390DB  +
push 1  +
mov ecx esi +
call sub_1038DC1  +
push 8  +
call ??2@YAPAXI@Z  +
pop ecx  +
pop esi  +
test eax eax +
jz loc_103911F  +
fld  [ebp+var_4] +
sub esp 18h +
fstp  [esp+30h+var_1C] +
mov ecx eax +
fld  [ebp+var_8] +
fstp  [esp+30h+var_20] +
fld  [ebp+var_C] +
fstp  [esp+30h+var_24] +
fld  [ebp+var_10] +
fstp  [esp+30h+var_28] +
fld  [ebp+var_14] +
fstp  [esp+30h+var_2C] +
fld  [ebp+var_18] +
fstp  [esp+30h+var_30] +
call sub_1039128  +
leave   +
retn 4  +
xor eax eax +
jmp locret_103911B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_14] +
push esi  +
sub esp 18h +
fstp  [esp+1Ch+var_8] +
mov esi ecx +
fld  [ebp+arg_10] +
fstp  [esp+1Ch+var_C] +
fld  [ebp+arg_C] +
fstp  [esp+1Ch+var_10] +
fld  [ebp+arg_8] +
fstp  [esp+1Ch+var_14] +
fld  [ebp+arg_4] +
fstp  [esp+1Ch+var_18] +
fld  [ebp+arg_0] +
fstp  [esp+1Ch+var_1C] +
call sub_103916D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
fld  [ebp+arg_14] +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
sub esp 18h +
fstp  [esp+24h+var_10] +
mov esi ecx +
fld  [ebp+arg_10] +
fstp  [esp+24h+var_14] +
fld  [ebp+arg_C] +
fstp  [esp+24h+var_18] +
fld  [ebp+arg_8] +
fstp  [esp+24h+var_1C] +
fld  [ebp+arg_4] +
fstp  [esp+24h+var_20] +
fld  [ebp+arg_0] +
fstp  [esp+24h+var_24] +
call GdipCreateMatrix2  +
mov [esi+4] eax +
mov eax [ebp+var_4] +
mov [esi] eax +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push esi  +
push 8  +
call ??2@YAPAXI@Z  +
mov esi eax +
xor eax eax +
pop ecx  +
cmp esi eax +
jz loc_10391EB  +
push eax  +
mov ecx esi +
call sub_10391F2  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
push esi  +
push [ebp+arg_0]  +
call GdipCreatePath  +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
call sub_10391CE  +
mov edx [esi] +
push eax  +
mov ecx esi +
mov [ebp+var_4] eax +
call dword ptr [edx+7Ch]  +
mov ecx [ebp+arg_0] +
xor ebx ebx +
cmp [esi+4Ch] bl +
jz loc_1039286  +
push 2  +
call sub_100DCD7  +
cmp [esi+38h] ebx +
jnz loc_1049F56  +
mov eax [esi+34h] +
cmp eax ebx +
jz loc_1039276  +
cmp [esi+24h] ebx +
jz loc_1039276  +
movzx ecx byte ptr [esi+0B8h] +
push ecx  +
push [ebp+var_4]  +
mov ecx [ebp+arg_0] +
push eax  +
call sub_10392DD  +
push [ebp+var_4]  +
call sub_103928E  +
pop esi  +
mov al 1 +
pop ebx  +
leave   +
retn 8  +
push ebx  +
jmp loc_1039248  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10392A1  +
push 1  +
call sub_10392AA  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call GdipDeletePath  +
test [ebp+arg_0] 1 +
jz loc_10392C6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10392FD  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov eax [ebp+arg_0] +
mov edx [eax] +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
mov ecx eax +
call dword ptr [edx+20h]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_4] +
mov edx [eax] +
mov eax [eax+4] +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_8] edx +
mov edx [eax] +
mov eax [eax+4] +
mov [ebp+var_C] eax +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov [ebp+var_10] edx +
call sub_1039360  +
neg eax  +
sbb eax eax +
inc eax  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_1039383  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call GdipAddPathLineI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 10h  +
***
call sub_100208C  +
mov esi ecx +
push dword ptr [esi+0C0h]  +
lea ecx [ebp-1Ch] +
call sub_1038E17  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1038F9B  +
fld  ds:flt_1039430 +
fcom  dword ptr [esi+0A8h] +
mov edi eax +
fnstsw  ax +
test ah 41h +
jnz loc_1039F07  +
fstp  st +
push dword ptr [ebp+8]  +
lea ecx [ebp-1Ch] +
call sub_1038DE8  +
mov ecx [ebp+8] +
push 0  +
push edi  +
call sub_1039439  +
push edi  +
call sub_1030B8B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_102DF24  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
fld  ds:flt_1038DB8 +
xor edx edx +
fstp  [ebp+var_4] +
cmp [ebp+arg_0] edx +
jz loc_1039452  +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_1045F77  +
fld  [ebp+var_4] +
push ecx  +
fstp  [esp+8+var_8] +
push edx  +
call sub_1039478  +
neg eax  +
sbb eax eax +
inc eax  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_103948B  +
mov eax [ecx] +
fld  [ebp+arg_4] +
push ecx  +
fstp  [esp+8+var_8] +
push eax  +
push dword ptr [esi]  +
call GdipFlattenPath  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
add ecx 38h +
push [ebp+arg_4]  +
push dword ptr [ecx-30h]  +
push dword ptr [ecx-34h]  +
push ecx  +
push [ebp+arg_0]  +
call sub_10394DD  +
pop ebp  +
retn 14h  +
***
call sub_100208C  +
xor esi esi +
xor bl bl +
cmp [ebp+14h] esi +
jnz loc_1046181  +
fild  dword ptr [ebp+10h] +
push ecx  +
lea ecx [ebp-14h] +
fstp  [esp+8+var_8] +
push dword ptr [ebp+0Ch]  +
call sub_100AE5A  +
push 2  +
lea ecx [ebp-14h] +
call sub_100AE94  +
push 2  +
lea ecx [ebp-14h] +
call sub_100AEC3  +
push 2  +
lea ecx [ebp-14h] +
call sub_100AEF2  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
add ecx 14h +
call sub_1039557  +
push dword ptr [ebp-14h]  +
mov ebx eax +
neg ebx  +
sbb bl bl +
inc bl  +
call GdipDeletePen  +
mov al bl +
call sub_1002061  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
test eax eax +
jz loc_1039587  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_103958B  +
mov eax [eax] +
push ecx  +
push eax  +
push dword ptr [esi]  +
call GdipDrawPath  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 8  +
xor ecx ecx +
jmp loc_1039568  +
xor eax eax +
jmp loc_1039571  +
***
fldz   +
push esi  +
sub esp 18h +
fst  [esp+1Ch+var_8] +
fst  [esp+1Ch+var_C] +
mov esi ecx +
fld1   +
fst  [esp+1Ch+var_10] +
fxch  st(1) +
fst  [esp+1Ch+var_14] +
fstp  [esp+1Ch+var_18] +
fstp  [esp+1Ch+var_1C] +
push dword ptr [esi]  +
call GdipSetMatrixElements  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103959F  +
fld  [ebp+arg_4] +
push 0  +
push ecx  +
push ecx  +
fstp  [esp+10h+var_C] +
mov ecx esi +
fld  [ebp+arg_0] +
fstp  [esp+10h+var_10] +
call sub_1039612  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_4] +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push ecx  +
push ecx  +
fstp  [esp+10h+var_C] +
fld  [ebp+arg_0] +
fstp  [esp+10h+var_10] +
push dword ptr [esi]  +
call GdipTranslateMatrix  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipGetMatrixElements  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push dword ptr [eax]  +
push dword ptr [esi]  +
call GdipMultiplyMatrix  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103959F  +
fld  [ebp+arg_4] +
push 0  +
push ecx  +
push ecx  +
fstp  [esp+10h+var_C] +
mov ecx esi +
fld  [ebp+arg_0] +
fstp  [esp+10h+var_10] +
call sub_10396E2  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_4] +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push ecx  +
push ecx  +
fstp  [esp+10h+var_C] +
fld  [ebp+arg_0] +
fstp  [esp+10h+var_10] +
push dword ptr [esi]  +
call GdipScaleMatrix  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103959F  +
fld  [ebp+arg_0] +
push 0  +
push ecx  +
mov ecx esi +
fstp  [esp+0Ch+var_C] +
call sub_1039747  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_0] +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push ecx  +
fstp  [esp+0Ch+var_C] +
push dword ptr [esi]  +
call GdipRotateMatrix  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push dword ptr [esi]  +
call GdipCloneMatrix  +
push eax  +
mov ecx esi +
call sub_100B30D  +
cmp dword ptr [esi+4] 0 +
pop esi  +
jnz loc_10397BA  +
push 8  +
call GdipAlloc  +
test eax eax +
jz loc_10397BA  +
mov ecx [ebp+var_4] +
and dword ptr [eax+4] 0 +
mov [eax] ecx +
leave   +
retn   +
xor eax eax +
leave   +
retn   +
***
mov eax [ecx] +
mov edx [ecx+8] +
cmp eax edx +
jg loc_10399C4  +
mov eax [ecx+4] +
mov edx [ecx+0Ch] +
cmp eax edx +
jg loc_10399CE  +
retn   +
mov eax [esi] +
push 8  +
mov ecx esi +
call dword ptr [eax+68h]  +
test al al +
jz loc_1007228  +
xor eax eax +
inc eax  +
jmp loc_100722A  +
add eax 0FFFFFD43h +
jmp loc_100736D  +
cmp eax 0Eh +
jg loc_1038EF5  +
mov al 1 +
jmp loc_1038EFB  +
retn 4  +
mov [ecx+8] eax +
mov [ecx] edx +
jmp loc_10397DB  +
mov [ecx+0Ch] eax +
mov [ecx+4] edx +
jmp locret_10397E9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10h  +
call ds:GetKeyState  +
mov ecx 8000h +
test ax cx +
jnz loc_1047F44  +
pop ebp  +
retn 8  +
***
mov [esi+4] ecx +
jmp loc_1039A4C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_100C68F  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
mov [esi] ecx +
mov ecx [eax+4] +
mov [esi+4] ecx +
mov ecx [eax] +
mov [esi+8] ecx +
mov ecx [eax+4] +
xor ebx ebx +
cmp [ebp+arg_8] ebx +
mov [esi+0Ch] ecx +
jle loc_1039A69  +
push edi  +
lea edx [eax+ebx*8] +
mov ecx [edx] +
cmp [esi] ecx +
jl loc_1039A78  +
lea edi [eax+ebx*8+4] +
mov ecx [edi] +
cmp [esi+4] ecx +
jl loc_10399FD  +
mov edx [edx] +
cmp [esi+8] edx +
jg loc_1039F1D  +
mov edi [edi] +
cmp [esi+0Ch] edi +
jg loc_1039F25  +
inc ebx  +
cmp ebx [ebp+arg_8] +
jl loc_1039A38  +
pop edi  +
mov ecx esi +
call sub_10397CE  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov [esi] ecx +
jmp loc_1039A41  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ecx+0C0h] +
push [ebp+arg_0]  +
call sub_1039AA3  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov ecx edi +
mov [ebp+var_4] esi +
call sub_100C68F  +
mov eax [esi+8] +
mov ebx [eax] +
cmp ebx eax +
jz loc_1039AE3  +
push [ebp+arg_4]  +
mov ecx [ebx+8] +
mov eax [ecx] +
lea edx [ebp+var_14] +
push edx  +
call dword ptr [eax+14h]  +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+arg_0] +
mov esi [ebp+var_4] +
mov ebx [ebx] +
cmp ebx [esi+8] +
jz loc_1039B2F  +
push [ebp+arg_4]  +
mov ecx [ebx+8] +
mov eax [ecx] +
lea edx [ebp+var_14] +
push edx  +
call dword ptr [eax+14h]  +
lea ecx [ebp+var_14] +
call sub_10397CE  +
mov eax [ebp+var_14] +
cmp [edi] eax +
jg loc_1047E50  +
mov eax [ebp+var_C] +
cmp [edi+8] eax +
jl loc_1039F75  +
mov eax [ebp+var_10] +
cmp [edi+4] eax +
jg loc_1047E57  +
mov eax [ebp+var_8] +
cmp [edi+0Ch] eax +
jge loc_1039AE1  +
mov [edi+0Ch] eax +
jmp loc_1039AE1  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
cmp ecx 0Bh +
jz loc_1039B46  +
jle loc_1039B64  +
cmp ecx 0Eh +
jg loc_1039B64  +
jmp loc_1039B62  +
mov al 1 +
jmp loc_1039B64  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor al al +
test ecx ecx +
jl loc_1039B64  +
cmp ecx 0Ah +
jg loc_1039B38  +
xor al al +
pop ebp  +
retn 4  +
***
mov eax [edi] +
lea ecx [ebp+var_14] +
push ecx  +
mov ecx edi +
call dword ptr [eax+70h]  +
push eax  +
lea ecx [ebp+rcDst] +
call sub_100B3A5  +
push 1  +
push 1  +
push 0  +
push 0  +
lea ecx [ebp+rcDst] +
call ?InflateRect@CRect@@QAEXHHHH@Z  +
mov eax [ebp+rcDst.right] +
sub eax [ebp+rcDst.left] +
mov ecx dword_108A1EC +
mov [ebp+var_C] eax +
mov eax [ebp+rcDst.bottom] +
sub eax [ebp+rcDst.top] +
mov [ebp+var_8] eax +
lea eax [ebp+var_C] +
push eax  +
call sub_103560A  +
jmp loc_100DEF7  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov ebx [ebp+0Ch] +
xor ecx ecx +
push 8  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10067E4  +
mov esi eax +
pop ecx  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
test esi esi +
jz loc_1039C65  +
push offset sub_100BFF1  +
push ebx  +
push 8  +
push esi  +
call sub_100A25C  +
mov edi [ebp+8] +
xor ecx ecx +
test ebx ebx +
jle loc_1039C2C  +
mov edx edi +
lea eax [esi+4] +
sub edx esi +
mov ebx [edi+ecx*8] +
mov [eax-4] ebx +
mov ebx [edx+eax] +
mov [eax] ebx +
mov ebx [ebp+0Ch] +
inc ecx  +
add eax 8 +
cmp ecx ebx +
jl loc_1039C16  +
mov ecx [ebp-10h] +
push ebx  +
push esi  +
call sub_1039C6E  +
xor ecx ecx +
test ebx ebx +
jle loc_1039C56  +
mov edx esi +
lea eax [edi+4] +
sub edx edi +
mov edi [esi+ecx*8] +
mov [eax-4] edi +
mov edi [edx+eax] +
mov [eax] edi +
inc ecx  +
add eax 8 +
cmp ecx ebx +
jl loc_1039C43  +
push esi  +
call sub_1006809  +
pop ecx  +
call sub_1002061  +
retn 8  +
xor esi esi +
jmp loc_1039C06  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call GdipTransformMatrixPointsI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov eax [eax+4] +
lea edx [ebp-8] +
mov [ebp-8] ecx +
mov ecx [esi+4] +
push edx  +
lea edx [esi+8] +
mov [ebp-4] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+4Ch]  +
lea eax [ebp-8] +
push eax  +
mov ecx esi +
call sub_1039CDD  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
lea ecx [ebp+var_10] +
call sub_100C68F  +
mov eax [esi+8] +
mov [ebp+var_10] eax +
mov eax [esi+0Ch] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp+var_8] ecx +
lea ecx [ebp+var_10] +
mov [ebp+var_4] eax +
call sub_10397CE  +
sub esp 10h +
lea eax [ebp+var_10] +
mov ecx esp +
push eax  +
call sub_100C6A4  +
lea ecx [ebp+var_20] +
call sub_1039D41  +
mov eax [esi+14h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp+var_20] +
push edx  +
call dword ptr [eax+44h]  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call sub_100C6A4  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
mov ebx ecx +
push esi  +
lea esi [ebx+90h] +
push edi  +
mov ecx esi +
call sub_100DC3F  +
mov ecx esi +
mov [ebp+var_4] eax +
call sub_100DC54  +
mov esi [ebp+arg_0] +
mov ecx esi +
mov [ebp+var_8] eax +
call sub_100DC3F  +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
mov ecx esi +
fidiv  [ebp+var_4] +
fstp  dword ptr [ebx+0A8h] +
call sub_100DC54  +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
mov ecx esi +
fidiv  [ebp+var_8] +
fstp  dword ptr [ebx+0ACh] +
call sub_100DC3F  +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
mov ecx esi +
fmul  ds:dbl_1006830 +
fiadd  dword ptr [esi] +
fstp  dword ptr [ebx+0B0h] +
call sub_100DC54  +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
mov ecx ebx +
fmul  ds:dbl_1006830 +
fiadd  dword ptr [esi+4] +
fstp  dword ptr [ebx+0B4h] +
call sub_1038F9B  +
mov edx [ebx] +
push eax  +
mov [ebp+arg_0] eax +
lea eax [ebp+var_20] +
push eax  +
mov ecx ebx +
call dword ptr [edx+80h]  +
push [ebp+arg_0]  +
mov esi eax +
lea edi [ebx+3Ch] +
movs   +
movs   +
movs   +
movs   +
call sub_1030B8B  +
mov ecx ebx +
call sub_1039E3F  +
lea eax [ebp+var_10] +
push eax  +
mov ecx ebx +
mov [ebp+var_10] 14h +
mov [ebp+var_C] ebx +
call sub_100DD20  +
pop edi  +
pop esi  +
mov al 1 +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
lea ecx [ebx+3Ch] +
lea edi [ebx+14h] +
mov [ebp+lprc] edi +
mov esi ecx +
movs   +
movs   +
movs   +
movs   +
call sub_100DC54  +
test eax eax +
jz loc_103AA24  +
mov ebx [ebx+0A0h] +
push ebx  +
push ebx  +
push [ebp+lprc]  +
call ds:InflateRect  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+0Ch] +
add ecx 4 +
push eax  +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_1039321  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ebp+8] 53FDh +
jnz loc_1030E3A  +
cmp [ebp+14h] ebx +
jz loc_1030E3A  +
mov edi [edi+4] +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+10h]  +
mov esi eax +
cmp esi ebx +
jz loc_1030E3A  +
push ebx  +
push dword ptr [ebp+14h]  +
call ds:PropVariantToUInt32WithDefault  +
mov edx [esi] +
push ebx  +
push ebx  +
push ebx  +
add eax 2BDh +
push eax  +
mov ecx esi +
call dword ptr [edx+14h]  +
jmp loc_1030E3A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] al +
setz al  +
dec eax  +
and eax 0FFFFFF9Ch +
add eax 65h +
pop ebp  +
retn 4  +
***
mov ecx [ecx+10h] +
mov eax [ecx] +
jmp dword ptr [eax]  +
***
fcomp  dword ptr [esi+0ACh] +
fnstsw  ax +
test ah 41h +
jz loc_10393FD  +
jmp loc_1049CB6  +
***
mov [esi+8] edx +
jmp loc_1039A57  +
mov [esi+0Ch] edi +
jmp loc_1039A62  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ecx+4] +
mov [ebp+var_10] eax +
mov eax [ecx+8] +
mov [ebp+var_C] eax +
mov eax [ecx+0Ch] +
mov [ebp+var_8] eax +
mov eax [ecx+10h] +
mov ecx [ebp+arg_4] +
mov [ebp+var_4] eax +
push 2  +
lea eax [ebp+var_10] +
push eax  +
call sub_1039BC2  +
push 2  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
call sub_1039A07  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
mov [edi+8] eax +
jmp loc_1039B16  +
***
mov eax offset __imp_GdipCreatePath +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDeletePath +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipAddPathLineI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipFlattenPath +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDrawPath +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetMatrixElements +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipTranslateMatrix +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipTransformMatrixPointsI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipCreateMatrix2 +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetMatrixElements +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipMultiplyMatrix +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipScaleMatrix +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipRotateMatrix +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipCloneMatrix +
jmp loc_100ABE3  +
***
push [ebp+lprc]  +
mov ecx esi +
call sub_1008309  +
push 5  +
push 5  +
push [ebp+lprc]  +
call ds:InflateRect  +
push [ebp+lprc]  +
mov ecx esi +
call sub_100872F  +
jmp loc_100DC0E  +
***
mov eax [ebx] +
lea ecx [ebp+rc] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+78h]  +
lea eax [ebp+rc] +
push eax  +
mov ecx edi +
call sub_1035139  +
mov eax [ebx] +
push 9  +
mov ecx ebx +
call dword ptr [eax+68h]  +
test al al +
jz loc_1040213  +
push 0Fh  +
pop esi  +
push esi  +
lea eax [ebp+rc] +
push eax  +
push [ebp+arg_0]  +
call sub_10351DA  +
push esi  +
lea eax [ebp+rc] +
push eax  +
push [ebp+arg_0]  +
call sub_100857A  +
xor esi esi +
jmp loc_1008565  +
***
inc esi  +
jmp loc_100BB5E  +
***
mov eax dword_108A24C +
fld  qword ptr [eax+50h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push edi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push edi  +
call sub_100C6E8  +
cmp [esi+10h] edi +
jz loc_103A0C7  +
mov ecx [esi+10h] +
mov eax [ecx] +
lea edx [ebp+var_10] +
push edx  +
call dword ptr [eax+24h]  +
mov edi [ebp+arg_0] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push 1  +
mov esi ecx +
mov ecx [esi+14h] +
mov eax [ecx] +
push 0  +
push dword ptr [esi+1Ch]  +
call dword ptr [eax+1Ch]  +
mov [esi+18h] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+1Ch] +
mov ecx [eax+20h] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+70h]  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 4  +
***
cmp eax 9 +
jz loc_103A135  +
cmp eax 0Bh +
jz loc_103A135  +
push eax  +
call sub_1039B4F  +
jmp loc_103A137  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jle loc_103A117  +
cmp eax 7 +
jg loc_103A10D  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset unk_108B074 +
pop ebp  +
jmp loc_103A152  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
cmp dword ptr [ecx+14h] 0 +
jz locret_103A176  +
mov ecx [ecx+14h] +
mov eax [ecx] +
lea edx [ebp-10h] +
push edx  +
call dword ptr [eax+30h]  +
push eax  +
push dword ptr [ebp+8]  +
call ds:CopyRect  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+8] 0 +
push esi  +
push edi  +
mov esi ecx +
jnz loc_103A1B1  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov edx [eax+4] +
push ecx  +
push ecx  +
mov eax esp +
mov [eax] ecx +
mov ecx esi +
mov [eax+4] edx +
call sub_103A1C1  +
pop edi  +
pop esi  +
leave   +
retn 8  +
cmp byte ptr [esi+10h] 0 +
jnz loc_103A1AB  +
jmp loc_1048154  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax [esi+1Ch] +
mov eax [eax+14h] +
mov ebx [eax] +
mov eax [esi] +
mov edi [esi+1Ch] +
push 1  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+64h]  +
mov ecx [edi+14h] +
push eax  +
push dword ptr [edi+1Ch]  +
call dword ptr [ebx+1Ch]  +
mov ecx [esi+1Ch] +
pop edi  +
pop esi  +
mov [ecx+18h] eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
mov ecx [eax+14h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+2Ch]  +
fstp  [ebp+var_18] +
mov esi [esi+1Ch] +
lea ebx [esi+60h] +
fld  qword ptr [ebx] +
mov [ebp+dy] esi +
fadd st st +
call _ftol2_sse  +
fld  qword ptr [ebx] +
mov esi eax +
call _ftol2_sse  +
fld  qword ptr [ebx] +
fmul  ds:dbl_103A3D8 +
mov edi eax +
call _ftol2_sse  +
mov ebx eax +
mov eax [ebp+dy] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp+var_38] +
push edx  +
call dword ptr [eax+70h]  +
mov eax [ebp+var_34] +
imul eax eax +
mov [ebp+var_34] eax +
mov eax [ebp+var_38] +
imul eax eax +
mov [ebp+var_38] eax +
mov eax [ebp+var_2C] +
imul eax eax +
mov [ebp+var_2C] eax +
mov eax [ebp+var_30] +
imul eax eax +
lea ecx [ebp+var_38] +
mov [ebp+var_30] eax +
call sub_100DC54  +
cdq   +
sub eax edx +
sar eax 1 +
lea ecx [ebp+var_38] +
mov [ebp+dy] eax +
call sub_100DC3F  +
imul esi esi +
mov [ebp+var_10] esi +
cdq   +
fild  [ebp+var_10] +
sub eax edx +
sar eax 1 +
mov [ebp+var_8] eax +
fdiv  [ebp+var_18] +
mov eax [ebp+pt.x] +
imul eax eax +
mov [ebp+pt.x] eax +
mov eax [ebp+pt.y] +
imul eax eax +
mov [ebp+pt.y] eax +
call _ftol2_sse  +
imul edi edi +
mov [ebp+var_10] edi +
mov esi eax +
fild  [ebp+var_10] +
fdiv  [ebp+var_18] +
call _ftol2_sse  +
imul ebx ebx +
mov [ebp+var_10] ebx +
mov edi eax +
fild  [ebp+var_10] +
fdiv  [ebp+var_18] +
call _ftol2_sse  +
mov ecx [ebp+var_34] +
lea edx [eax+ecx] +
add edx edi +
add edx esi +
push edx  +
mov edx [ebp+var_38] +
lea ebx [edx+eax] +
add ebx edi +
sub ecx eax +
add ebx esi +
push ebx  +
sub edx eax +
sub ecx esi +
push ecx  +
sub edx esi +
push edx  +
lea eax [ebp+rc] +
push eax  +
call ds:SetRect  +
push [ebp+pt.y]  +
mov esi ds:PtInRect +
push [ebp+pt.x]  +
lea eax [ebp+rc] +
push eax  +
call esi  +
test eax eax +
jnz loc_104817D  +
mov edi ds:OffsetRect +
xor ebx ebx +
push ebx  +
push [ebp+var_8]  +
lea eax [ebp+rc] +
push eax  +
call edi  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call esi  +
test eax eax +
jnz loc_1048189  +
push ebx  +
push [ebp+var_8]  +
lea eax [ebp+rc] +
push eax  +
call edi  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call esi  +
test eax eax +
jnz loc_1048195  +
push [ebp+dy]  +
lea eax [ebp+rc] +
push ebx  +
push eax  +
call edi  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call esi  +
test eax eax +
jnz loc_10481A1  +
push [ebp+dy]  +
lea eax [ebp+rc] +
push ebx  +
push eax  +
call edi  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call esi  +
test eax eax +
jz loc_10481AD  +
mov [ebp+var_4] 0Ah +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
lea eax [ebp+rcDst] +
push eax  +
mov ecx esi +
call sub_1035070  +
jmp loc_100E610  +
***
mov ecx [ecx+10h] +
mov eax [ecx] +
jmp dword ptr [eax+4]  +
***
mov ecx [ecx+8] +
call sub_103A0D5  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov ecx [esi+1Ch] +
push dword ptr [ecx+20h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+60h]  +
mov eax [esi+1Ch] +
mov ecx [eax+14h] +
push dword ptr [eax+20h]  +
mov edx [ecx] +
call dword ptr [edx+4]  +
mov eax [esi+1Ch] +
mov ecx [eax+20h] +
test ecx ecx +
jz loc_103A447  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+0Ch]  +
mov eax [esi+1Ch] +
and dword ptr [eax+20h] 0 +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-18h] offset off_100E4B4 +
mov ecx [esi+4] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-18h] +
push edx  +
push dword ptr [ecx+4]  +
call dword ptr [eax+70h]  +
xor eax eax +
inc eax  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_103A4A4  +
test byte ptr [ebp+8] 1 +
jz loc_103A498  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
call sub_100B3A5  +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
call sub_1035070  +
push dword ptr [ebp-8]  +
lea ecx [ebp-24h] +
call sub_100B3A5  +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
call sub_1035070  +
jmp loc_100DED2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+10h] 0 +
jz loc_1048070  +
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+3Ch]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+1Ch] +
xor ebx ebx +
mov [esi+0Ch] ebx +
mov [esi+8] ebx +
mov [esi+14h] ebx +
mov [esi+10h] bl +
call sub_103A0D5  +
mov eax [ebp+arg_4] +
mov ecx [eax+4] +
cmp ecx 2 +
jnz loc_104833D  +
push ebx  +
push offset off_108D538  +
push offset off_108D4AC  +
push ebx  +
push eax  +
call __RTDynamicCast  +
add esp 4 +
add eax 0Ch +
mov ecx esp +
push eax  +
call sub_100C6A4  +
lea ecx [ebp+var_10] +
call sub_1039D41  +
mov eax [esi+1Ch] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp+var_10] +
push edx  +
call dword ptr [eax+44h]  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov eax [eax+4] +
lea edx [ebp-8] +
mov [ebp-8] ecx +
mov ecx [esi+4] +
push edx  +
lea edx [esi+8] +
mov [ebp-4] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+4Ch]  +
lea eax [ebp-8] +
push eax  +
mov ecx esi +
call sub_1039CDD  +
mov ecx esi +
call sub_103A5F3  +
pop esi  +
leave   +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov eax [esi+14h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-20h] +
push edx  +
call dword ptr [eax+70h]  +
lea eax [ebp-20h] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_1048302  +
sub esp 10h +
lea eax [ebp-20h] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100C6A4  +
lea ecx [ebp-3Ch] +
call sub_103A659  +
mov ecx [esi+4] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-3Ch] +
push edx  +
push dword ptr [ecx+0Ch]  +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+8] 0 +
mov dword ptr [esi+4] 2 +
and dword ptr [ebp-4] 0 +
lea eax [ebp+8] +
push eax  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_100C90C +
call sub_100C6A4  +
mov eax esi +
call sub_1002061  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
add ecx 4 +
push edi  +
push ecx  +
lea ecx [ebp-28h] +
call sub_100C6A4  +
lea ecx [ebp-28h] +
call sub_10397CE  +
push 10h  +
pop edi  +
lea ecx [ebp-28h] +
call sub_100DC54  +
cdq   +
sub eax edx +
mov esi eax +
lea ecx [ebp-28h] +
sar esi 1 +
call sub_100DC3F  +
cdq   +
sub eax edx +
sar eax 1 +
cmp esi edi +
jl loc_1047E42  +
cmp eax edi +
jl loc_1047E49  +
fld  ds:flt_102E198 +
mov eax [ebp-24h] +
push ecx  +
push ecx  +
fstp  dword ptr [esp+4] +
lea esi [edi+edi] +
fld  ds:flt_102E194 +
lea ecx [eax+esi] +
fstp  dword ptr [esp] +
push ecx  +
mov ecx [ebp-28h] +
lea edx [esi+ecx] +
push edx  +
push eax  +
push ecx  +
lea ecx [ebp-18h] +
call sub_100C6E8  +
mov ebx [ebp+8] +
push eax  +
mov ecx ebx +
call sub_103A801  +
fld  ds:flt_102E198 +
push ecx  +
push ecx  +
mov ecx [ebp-24h] +
fstp  dword ptr [esp+4] +
fld  ds:flt_102E19C +
lea eax [esi+ecx] +
fstp  dword ptr [esp] +
push eax  +
mov eax [ebp-20h] +
lea edx [eax-1] +
sub eax esi +
push edx  +
dec eax  +
push ecx  +
dec eax  +
push eax  +
lea ecx [ebp-18h] +
call sub_100C6E8  +
push eax  +
mov ecx ebx +
call sub_103A801  +
fld  ds:flt_102E198 +
mov eax [ebp-1Ch] +
push ecx  +
push ecx  +
fstp  dword ptr [esp+4] +
lea ecx [eax-1] +
fldz   +
sub eax esi +
fstp  dword ptr [esp] +
dec eax  +
push ecx  +
mov ecx [ebp-20h] +
lea edx [ecx-1] +
sub ecx esi +
push edx  +
dec ecx  +
dec ecx  +
push eax  +
push ecx  +
lea ecx [ebp-18h] +
call sub_100C6E8  +
push eax  +
mov ecx ebx +
call sub_103A801  +
fld  ds:flt_102E198 +
mov eax [ebp-1Ch] +
push ecx  +
push ecx  +
fst  dword ptr [esp+4] +
lea ecx [eax-1] +
fstp  dword ptr [esp] +
push ecx  +
mov ecx [ebp-28h] +
lea edx [esi+ecx] +
sub eax esi +
push edx  +
dec eax  +
push eax  +
push ecx  +
lea ecx [ebp-18h] +
call sub_100C6E8  +
push eax  +
mov ecx ebx +
call sub_103A801  +
mov eax [ebp-24h] +
lea eax [eax+edi+1] +
push eax  +
push dword ptr [ebp-28h]  +
lea ecx [ebp-8] +
call sub_100C6CD  +
push eax  +
mov eax [ebp-24h] +
lea eax [eax+edi-1] +
push eax  +
push dword ptr [ebp-28h]  +
lea ecx [ebp-10h] +
call sub_100C6CD  +
push eax  +
mov ecx ebx +
call sub_1039321  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
push edi  +
mov ecx esi +
call sub_100DC54  +
mov ecx esi +
mov edi eax +
call sub_100DC3F  +
fld  [ebp+arg_8] +
mov ecx [esi] +
mov [ebp+var_10] ecx +
mov ecx [esi+4] +
push ecx  +
push ecx  +
fstp  [esp+24h+var_20] +
mov [ebp+var_8] eax +
fld  [ebp+arg_4] +
lea eax [ebp+var_10] +
fstp  [esp+24h+var_24] +
mov [ebp+var_C] ecx +
push eax  +
mov ecx ebx +
mov [ebp+var_4] edi +
call sub_103A85D  +
neg eax  +
pop edi  +
sbb eax eax +
pop esi  +
inc eax  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_8] +
mov eax [ebp+arg_0] +
push ecx  +
push ecx  +
fstp  [esp+8+var_4] +
fld  [ebp+arg_4] +
fstp  [esp+8+var_8] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_103A88D  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_14] +
push esi  +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
mov esi ecx +
fld  [ebp+arg_10] +
fstp  [esp+0Ch+var_C] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call GdipAddPathArcI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
push dword ptr [esi+8]  +
lea ecx [ebp+var_20] +
push dword ptr [esi+4]  +
call sub_100C6CD  +
push dword ptr [esi+8]  +
lea ecx [ebp+var_18] +
push dword ptr [esi+0Ch]  +
call sub_100C6CD  +
push dword ptr [esi+10h]  +
lea ecx [ebp+var_10] +
push dword ptr [esi+0Ch]  +
call sub_100C6CD  +
push dword ptr [esi+10h]  +
lea ecx [ebp+var_8] +
push dword ptr [esi+4]  +
call sub_100C6CD  +
mov ecx [ebp+arg_4] +
push 4  +
lea eax [ebp+var_20] +
push eax  +
call sub_1039BC2  +
push 4  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+arg_0]  +
call sub_1039A07  +
mov eax [ebp+arg_0] +
pop esi  +
leave   +
retn 8  +
***
mov eax offset __imp_GdipAddPathArcI +
jmp loc_100ABE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push offset off_108D398  +
mov esi offset off_108CEAC +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov edi ecx +
mov [ebp-1] bl +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_1041705  +
mov ecx [edi+8] +
mov [eax+8] ecx +
mov byte ptr [ebp-1] 1 +
mov al [ebp-1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0Bh +
jz loc_1047FE3  +
pop ebp  +
jmp sub_1039B4F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+10h] 0 +
jz loc_1048074  +
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+40h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+10h] 0 +
jz loc_1048078  +
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+2Ch]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor al al +
cmp [ebp+arg_0] al +
jnz loc_1049E0F  +
mov ecx [ecx+28h] +
cmp ecx 3 +
jz loc_103AA0B  +
add ecx 0FFFFFFFBh +
cmp ecx 2 +
jbe loc_103AA0B  +
pop ebp  +
retn 4  +
mov al 1 +
jmp loc_103AA07  +
***
lea eax [ecx+70h] +
push eax  +
push dword ptr [ecx+0A0h]  +
call sub_1030BDA  +
retn   +
***
lea ecx [ebx+3Ch] +
call sub_100DC3F  +
test eax eax +
jz loc_1039E77  +
jmp loc_1039E66  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
mov al [eax] +
mov [ecx+4Ch] al +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_8] 14h +
mov [ebp+var_4] ecx +
call sub_100DD20  +
mov al 1 +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push dword ptr [edi]  +
mov esi ecx +
lea ecx [esi+50h] +
call sub_100C009  +
push dword ptr [edi+4]  +
lea ecx [esi+70h] +
call sub_100C009  +
mov ecx esi +
call sub_103AB5C  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
mov [ebp+var_8] 14h +
mov [ebp+var_4] esi +
call sub_100DD20  +
pop edi  +
mov al 1 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
mov esi ecx +
mov [esi+0A0h] eax +
call sub_103AB5C  +
mov ecx esi +
call sub_1039E3F  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
mov [ebp+var_8] 14h +
mov [ebp+var_4] esi +
call sub_100DD20  +
mov al 1 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov [esi+24h] ecx +
mov ecx [eax+8] +
mov [esi+2Ch] ecx +
mov ecx [eax+4] +
mov [esi+28h] ecx +
mov eax [eax+0Ch] +
mov ecx esi +
mov [esi+30h] eax +
call sub_103AB5C  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
mov [ebp+var_8] 14h +
mov [ebp+var_4] esi +
call sub_100DD20  +
mov al 1 +
pop esi  +
leave   +
retn 4  +
***
cmp eax 8 +
jz loc_103ABAF  +
push 0  +
mov ecx esi +
call sub_103A9E7  +
test al al +
jz loc_103ABC1  +
jmp loc_1049EE0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+34h] +
push edi  +
test eax eax +
jz loc_103AB7A  +
push eax  +
call sub_100DAD9  +
and dword ptr [esi+34h] 0 +
mov ecx esi +
call sub_103ABCB  +
mov ecx esi +
test al al +
jz loc_1049E60  +
mov eax [esi] +
call dword ptr [eax+84h]  +
mov [esi+34h] eax +
mov eax [esi+38h] +
test eax eax +
jz loc_103ABA7  +
push eax  +
call sub_100DAD9  +
and dword ptr [esi+38h] 0 +
mov eax [esi+28h] +
cmp eax 1 +
jnz loc_103AB40  +
lea eax [esi+50h] +
push eax  +
push dword ptr [esi+0A0h]  +
call sub_1030BDA  +
mov [esi+38h] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edx ecx +
mov eax [edx+24h] +
cmp eax 1 +
jnz loc_1049E3C  +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+64h]  +
mov ecx [esi+18h] +
mov [ecx+20h] eax +
mov eax [esi+18h] +
mov ecx [eax+14h] +
push dword ptr [eax+20h]  +
mov edx [ecx] +
call dword ptr [edx]  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_103AC47  +
mov eax [esi+0Ch] +
mov edx [esi+8] +
sub esp 10h +
mov ecx esp +
push eax  +
push edx  +
push eax  +
push edx  +
call sub_100C6E8  +
lea ecx [ebp+var_10] +
call sub_1039D41  +
mov eax [esi+18h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp+var_10] +
push edx  +
call dword ptr [eax+44h]  +
pop esi  +
leave   +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
xor ebx ebx +
push ebx  +
push offset off_108D4CC  +
push offset off_108D4AC  +
push ebx  +
push dword ptr [ebp+0Ch]  +
call __RTDynamicCast  +
add esp 14h +
push 3  +
pop edx  +
mov ecx offset off_1006E84 +
mov [ebp-34h] edx +
mov [ebp-38h] ecx +
mov dword ptr [ebp-30h] 5 +
mov edi offset off_100B560 +
mov [ebp-4] ebx +
mov dword ptr [ebp-1Ch] 7 +
mov [ebp-20h] edi +
mov [ebp-18h] ebx +
mov dword ptr [ebp-28h] 7 +
mov [ebp-2Ch] edi +
mov [ebp-24h] ebx +
mov dword ptr [ebp-58h] 2 +
mov dword ptr [ebp-5Ch] offset off_1006F8C +
mov [ebp-54h] ebx +
mov [ebp-40h] edx +
mov [ebp-44h] ecx +
mov dword ptr [ebp-3Ch] 1 +
mov [ebp-4Ch] edx +
mov [ebp-50h] ecx +
mov [ebp-48h] ebx +
mov ecx [eax+14h] +
mov [esi+10h] ecx +
mov ecx [eax+0Ch] +
mov [esi+8] ecx +
mov eax [eax+10h] +
mov [esi+0Ch] eax +
lea eax [ebp-38h] +
push eax  +
mov eax [esi+14h] +
mov ecx [eax+28h] +
mov byte ptr [ebp-4] 5 +
call sub_1005BE0  +
lea eax [ebp-44h] +
push eax  +
mov eax [esi+14h] +
mov ecx [eax+3Ch] +
call sub_1005BE0  +
lea eax [ebp-50h] +
push eax  +
mov eax [esi+14h] +
mov ecx [eax+40h] +
call sub_1005BE0  +
lea eax [ebp-5Ch] +
push eax  +
mov eax [esi+14h] +
mov ecx [eax+44h] +
call sub_1005BE0  +
mov [ebp+0Fh] bl +
cmp [ebp-54h] ebx +
jz loc_103AD2A  +
mov byte ptr [ebp+0Fh] 1 +
mov eax [esi+14h] +
mov ecx [eax+14h] +
lea eax [ebp-20h] +
push eax  +
mov eax [ecx] +
push 1Fh  +
call dword ptr [eax+18h]  +
mov ecx eax +
call sub_1005BE0  +
mov eax [esi+14h] +
mov ecx [eax+14h] +
lea eax [ebp-2Ch] +
push eax  +
mov eax [ecx] +
push 20h  +
call dword ptr [eax+18h]  +
mov ecx eax +
call sub_1005BE0  +
test byte ptr [esi+10h] 8 +
jnz loc_104830E  +
lea eax [ebp-20h] +
push eax  +
mov eax [esi+14h] +
mov ecx [eax+34h] +
call sub_1035687  +
lea eax [ebp-2Ch] +
push eax  +
mov eax [esi+14h] +
mov ecx [eax+38h] +
call sub_1035687  +
mov eax [esi+14h] +
mov ecx [ebp-1Ch] +
mov [eax+6Ch] ecx +
mov ecx [ebp-18h] +
mov [eax+70h] ecx +
mov ecx [ebp-28h] +
add eax 68h +
mov eax [esi+14h] +
mov [eax+78h] ecx +
mov ecx [ebp-24h] +
add eax 74h +
mov [eax+8] ecx +
mov eax [ebp-30h] +
mov ecx [esi+14h] +
mov [ebp-14h] eax +
mov ecx [ecx+14h] +
mov edx [ecx] +
push eax  +
push dword ptr [ebp-3Ch]  +
call dword ptr [edx+20h]  +
push dword ptr [ebp-30h]  +
mov edi eax +
mov eax [esi+14h] +
mov ecx [eax+14h] +
push dword ptr [ebp-48h]  +
mov eax [ecx] +
call dword ptr [eax+20h]  +
push dword ptr [ebp-3Ch]  +
mov ecx [esi+14h] +
mov edx eax +
call sub_103AE43  +
push dword ptr [ebp-48h]  +
mov [ebp-6Ch] eax +
call sub_103AE43  +
mov [ebp-68h] eax +
mov al [ebp+0Fh] +
mov [ebp-60h] edx +
mov [ebp-64h] edi +
mov [ebp-0Dh] al +
mov ecx [ecx+20h] +
mov eax [ecx] +
lea edx [ebp-14h] +
push edx  +
call dword ptr [eax+2Ch]  +
mov eax [esi+14h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-6Ch] +
push edx  +
call dword ptr [eax+24h]  +
mov eax [esi+14h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-0Dh] +
push edx  +
call dword ptr [eax+20h]  +
mov ecx [esi+14h] +
push ebx  +
call sub_103B0AD  +
mov eax [esi+14h] +
mov ecx [eax+24h] +
cmp ecx ebx +
jnz loc_104832B  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 8 +
ja loc_104814C  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
push 0C8h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_103AE92  +
mov eax [esi+18h] +
push dword ptr [eax+90h]  +
call sub_103AE9D  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_103AEEC  +
mov eax [ebp+arg_0] +
push 32h  +
push 32h  +
push 0FFFFFFCEh  +
push 0FFFFFFCEh  +
lea esi [ebx+3Ch] +
push esi  +
mov dword ptr [ebx] offset off_1008D34 +
mov [ebx+0C0h] eax +
call ds:SetRect  +
lea edi [ebx+90h] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov byte ptr [ebx+0B8h] 1 +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100E225  +
xor eax eax +
xor ebx ebx +
inc ebx  +
lea ecx [esi+3Ch] +
mov [ebp-4] eax +
mov dword ptr [esi] offset off_1008C94 +
mov [esi+24h] ebx +
mov [esi+28h] ebx +
mov [esi+2Ch] eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
call sub_100C68F  +
lea ecx [esi+50h] +
mov [esi+4Ch] bl +
mov byte ptr [esi+4Dh] 0 +
mov byte ptr [esi+4Eh] 0 +
call sub_103AF93  +
lea ecx [esi+70h] +
call sub_103AF93  +
lea ecx [esi+90h] +
call sub_100C68F  +
fldz   +
fst  dword ptr [esi+0A4h] +
mov ecx esi +
fld1   +
mov [esi+0A0h] ebx +
fst  dword ptr [esi+0A8h] +
mov byte ptr [esi+0B8h] 0 +
fstp  dword ptr [esi+0ACh] +
fst  dword ptr [esi+0B0h] +
fstp  dword ptr [esi+0B4h] +
call sub_103AB5C  +
mov eax esi +
call sub_1002061  +
retn   +
***
fldz   +
mov eax ecx +
fst  qword ptr [eax] +
fst  qword ptr [eax+8] +
fstp  qword ptr [eax+10h] +
fld1   +
fstp  qword ptr [eax+18h] +
retn   +
***
call sub_100208C  +
mov edi ecx +
mov ecx [ebp+0Ch] +
lea eax [ecx+0Ch] +
push eax  +
mov eax [ebp+8] +
mov edx [eax] +
mov esi [eax+4] +
push ecx  +
push ecx  +
mov eax esp +
mov [ebp+0Ch] esp +
mov [eax] edx +
mov [eax+4] esi +
push dword ptr [ecx+8]  +
lea ecx [ebp-38h] +
call sub_103AFFE  +
mov ecx [edi+4] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-38h] +
push edx  +
push dword ptr [ecx+8]  +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_4] +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_8] +
mov [eax+10h] ecx +
mov ecx [ebp+arg_0] +
xor edx edx +
mov [eax+14h] ecx +
mov ecx [ebp+arg_C] +
push esi  +
mov dword ptr [eax+4] 1 +
mov [eax+8] edx +
mov dword ptr [eax] offset off_100E054 +
mov esi [ecx] +
mov [eax+18h] esi +
mov ecx [ecx+4] +
mov [eax+1Ch] ecx +
mov [eax+20h] edx +
mov [eax+24h] edx +
mov [eax+28h] edx +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0Ah +
jnz loc_103B061  +
mov ecx [ecx+14h] +
push eax  +
call sub_103B06A  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov eax [ebp+8] +
mov eax [eax+4] +
mov ecx [esi+28h] +
cmp eax ecx +
jz loc_10483BB  +
cmp eax [esi+34h] +
jz loc_103B097  +
cmp eax [esi+38h] +
jnz loc_104848E  +
push 0  +
mov ecx esi +
call sub_103B0AD  +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
push 7  +
pop ecx  +
mov eax offset off_100B560 +
xor edi edi +
mov [ebp-3Ch] ecx +
mov [ebp-40h] eax +
mov [ebp-38h] edi +
mov [ebp-4] edi +
mov [ebp-48h] ecx +
mov [ebp-4Ch] eax +
mov [ebp-44h] edi +
cmp dword ptr [ebp+8] 2 +
mov byte ptr [ebp-4] 1 +
lea eax [ebp-40h] +
jz loc_1048248  +
mov ecx [esi+34h] +
push 3  +
pop ebx  +
push eax  +
call sub_1005BE0  +
lea eax [ebp-4Ch] +
push eax  +
cmp [ebp+8] ebx +
jz loc_1048265  +
mov ecx [esi+38h] +
call sub_1005BE0  +
push dword ptr [ebp-38h]  +
lea ecx [ebp-94h] +
call sub_100DF5E  +
push dword ptr [ebp-44h]  +
lea ecx [ebp-74h] +
call sub_100DF5E  +
mov eax offset off_1006E84 +
mov [ebp-24h] ebx +
mov [ebp-28h] eax +
mov dword ptr [ebp-20h] 1 +
mov [ebp-30h] ebx +
mov [ebp-34h] eax +
mov [ebp-2Ch] edi +
cmp dword ptr [ebp+8] 4 +
push 5  +
mov byte ptr [ebp-4] 3 +
pop ebx  +
jz loc_104826D  +
mov ecx [esi+3Ch] +
cmp [ebp+8] ebx +
jz loc_10482F1  +
lea eax [ebp-28h] +
push eax  +
call sub_1005BE0  +
mov ecx [esi+40h] +
lea eax [ebp-34h] +
push eax  +
call sub_1005BE0  +
cmp dword ptr [ebp-20h] 8 +
mov edi offset off_102DEB0 +
jz loc_1048275  +
cmp dword ptr [ebp-2Ch] 8 +
jz loc_10482B5  +
mov ecx [esi+20h] +
lea eax [ebp-74h] +
mov [ebp-54h] eax +
lea eax [ebp-94h] +
lea edx [ebp-54h] +
mov [ebp-50h] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+4Ch]  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov edx [eax+8] +
cmp ecx edx +
jg loc_103EE42  +
mov ecx [eax+4] +
mov edx [eax+0Ch] +
cmp ecx edx +
jg loc_103EE4C  +
pop ebp  +
retn 4  +
***
mov ebx [ebp+8] +
push ebx  +
lea ecx [ebp-38h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
fld  qword ptr [ebx+50h] +
and dword ptr [ebp-4] 0 +
call _ftol2_sse  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
mov [ebp+8] eax +
jl loc_103F87B  +
cmp dword_108A2CC 0 +
lea ecx [ebp-38h] +
jz loc_1035BB2  +
push offset off_108A2C8  +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea edi [ebp-24h] +
movs   +
movs   +
movs   +
mov [ebp-10h] eax +
lea eax [ebp-24h] +
push eax  +
mov ecx ebx +
movs   +
call sub_1008309  +
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
mov ebx [ebp-18h] +
sub eax [ebp+8] +
mov esi ds:PatBlt +
sub ebx [ebp-20h] +
mov edi 5A0049h +
push edi  +
push dword ptr [ebp+8]  +
mov [ebp-14h] eax +
push eax  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-34h]  +
call esi  +
mov eax [ebp-20h] +
sub eax [ebp+8] +
push edi  +
push dword ptr [ebp+8]  +
add eax ebx +
push dword ptr [ebp-14h]  +
push eax  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-34h]  +
call esi  +
cmp dword_108A2D4 0 +
jz loc_103B28D  +
push offset off_108A2D0  +
lea ecx [ebp-38h] +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov eax [ebp+8] +
mov ecx [ebp-20h] +
lea ecx [ecx+eax*2] +
mov [ebp-14h] ecx +
mov ecx eax +
imul ecx ecx +
push edi  +
mov edx ebx +
sub edx ecx +
push edx  +
push eax  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-34h]  +
call esi  +
mov eax [ebp-1Ch] +
sub eax [ebp+8] +
push edi  +
push ebx  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-20h]  +
push eax  +
push dword ptr [ebp-34h]  +
call esi  +
cmp dword ptr [ebp-10h] 0 +
jz loc_103B2D5  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-38h] +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-38h] +
call ??1CClientDC@@UAE@XZ  +
jmp loc_1035BAA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx [ebp+arg_4] +
mov eax [ebx] +
mov [ebp+rc1.left] eax +
mov eax [ebx+4] +
mov [ebp+rc1.top] eax +
mov eax [ebx+10h] +
mov [ebp+rc1.right] eax +
mov eax [ebx+14h] +
push esi  +
mov [ebp+rc1.bottom] eax +
push edi  +
lea eax [ebp+rc1] +
push eax  +
mov [ebp+var_4] ecx +
call sub_103B1B6  +
inc [ebp+rc1.right]  +
inc [ebp+rc1.bottom]  +
xor eax eax +
cmp [ebp+rc1.left] eax +
jl loc_103F892  +
cmp [ebp+rc1.top] eax +
jl loc_103F89A  +
mov esi [ebp+arg_0] +
mov eax [esi+40h] +
mov ecx [eax+2Ch] +
cmp [ebp+rc1.right] ecx +
jg loc_103F8A2  +
mov eax [eax+30h] +
cmp [ebp+rc1.bottom] eax +
jg loc_103F8AA  +
mov edi offset stru_108B3D8 +
push edi  +
lea eax [ebp+rc1] +
push eax  +
call ds:EqualRect  +
test eax eax +
jnz loc_103B383  +
mov ecx [ebp+var_4] +
push esi  +
call sub_1035B8A  +
push [ebp+arg_0]  +
mov ecx [ebp+var_4] +
lea esi [ebp+rc1] +
movs   +
movs   +
movs   +
movs   +
call sub_1035B8A  +
push ebx  +
call sub_100A8D8  +
mov eax stru_108B3D8.right +
sub eax stru_108B3D8.left +
mov [ebp+var_8] eax +
mov eax stru_108B3D8.bottom +
sub eax stru_108B3D8.top +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
call sub_103B3BA  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_108A1EC +
push dword ptr [eax+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_103D9E3  +
mov ecx dword_108A1EC +
pop ebp  +
jmp sub_103560A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
inc esi  +
push esi  +
mov dword_108A238 esi +
call sub_1009F8B  +
call sub_1009FC1  +
mov ecx [ebp+arg_0] +
call sub_10303DC  +
mov dword_108AF04 esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov [ebp+var_4] ecx +
call sub_1035B8A  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
push offset stru_108B3D8  +
call ds:SetRect  +
mov ebx [ebp+arg_4] +
mov dword_108AF04 esi +
mov eax [ebx] +
mov ecx [ebx+10h] +
cmp eax ecx +
jg loc_103F8B2  +
mov [ebp+var_18] eax +
mov edi ecx +
mov eax [ebx+4] +
mov edx [ebx+14h] +
cmp eax edx +
jg loc_103F8BC  +
mov [ebp+var_14] eax +
mov ecx edx +
cmp [ebp+var_18] esi +
jl loc_103F8C6  +
cmp [ebp+var_14] esi +
jl loc_103F8CE  +
mov eax [ebp+arg_0] +
mov eax [eax+40h] +
mov edx [eax+2Ch] +
dec edx  +
cmp edi edx +
jg loc_103F8D6  +
mov edx [eax+30h] +
dec edx  +
cmp ecx edx +
jg loc_103F8DD  +
mov edx edi +
sub edx [ebp+var_18] +
jz loc_103F8E4  +
mov edx ecx +
sub edx [ebp+var_14] +
jz loc_103F8E4  +
inc edi  +
push 1  +
mov [ebp+var_10] edi +
sub esp 10h +
inc ecx  +
mov [ebp+var_C] ecx +
mov ecx [ebp+arg_0] +
mov edi esp +
push dword ptr [eax+0Ch]  +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
call sub_10362A0  +
xor esi esi +
mov ecx [ebp+var_4] +
push ebx  +
push [ebp+arg_0]  +
call sub_1030468  +
cmp [ebx+1Ch] esi +
jnz loc_103F91D  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
lea eax [ebp+Point] +
push eax  +
push dword ptr [esi+20h]  +
call ds:ScreenToClient  +
lea eax [ebp+Point] +
push eax  +
mov ecx esi +
call sub_100839D  +
push [ebp+Point.y]  +
push [ebp+Point.x]  +
push offset stru_108AF34  +
call ds:PtInRect  +
test eax eax +
jz loc_1035CA8  +
push 2  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
mov [ebp+var_18] 60h +
mov [ebp+var_14] 90h +
mov [ebp+var_10] 242Fh +
mov [ebp+var_C] 2430h +
call sub_100A0E4  +
jmp loc_1035CAB  +
***
push 1  +
call sub_1009F8B  +
mov dword_108AF30 ebx +
jmp loc_103587C  +
mov edx [edi+4] +
cmp edx [eax+30h] +
jz loc_1035988  +
jmp loc_103588D  +
***
neg eax  +
mov [ebp+var_1] 1 +
mov [esi+5Ch] eax +
jmp loc_100FD83  +
***
mov edi eax +
mov esi offset stru_108AF34 +
movs   +
movs   +
movs   +
movs   +
call sub_1008309  +
mov esi ds:InflateRect +
push 5  +
pop edi  +
push edi  +
push edi  +
lea eax [ebp-1Ch] +
push eax  +
call esi  +
cmp dword_108B18C 0 +
jnz loc_1040241  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx ebx +
call sub_10083F8  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
call ds:UnionRect  +
push edi  +
push edi  +
lea eax [ebp-3Ch] +
push eax  +
call esi  +
push edi  +
push edi  +
lea eax [ebp-2Ch] +
push eax  +
call esi  +
lea eax [ebp-3Ch] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call ds:EqualRect  +
test eax eax +
jz loc_103B605  +
push 0  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:InvalidateRect  +
jmp loc_103043E  +
push 1  +
push 0  +
jmp loc_103B5F7  +
***
cmp dword_108BC04 0 +
push esi  +
push edi  +
mov edi ecx +
mov esi 40000000h +
jnz loc_10428F9  +
mov ecx [edi+48h] +
call sub_103B643  +
cmp dword_108BC04 0 +
jnz loc_1042957  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push 5Ch  +
mov [ebp+var_4] ecx +
call ??2@YAPAXI@Z  +
mov esi eax +
xor ebx ebx +
pop ecx  +
cmp esi ebx +
jz loc_103B7B4  +
push esi  +
push dword_108A24C  +
call sub_103B96D  +
test eax eax +
jz loc_103B7AD  +
mov eax [esi+0Ch] +
mov ecx [ebp+var_4] +
push edi  +
mov [ebp+var_8] eax +
lea eax [esi+24h] +
lea edi [esi+14h] +
push eax  +
push edi  +
mov [esi] ebx +
mov [esi+0Ch] ebx +
mov [esi+10h] ebx +
mov [esi+1Ch] ebx +
mov [esi+20h] ebx +
mov [edi] ebx +
mov [eax] ebx +
call sub_103B7D3  +
cmp [edi] ebx +
jz loc_103B7AC  +
push [ebp+var_8]  +
call ds:CreateCompatibleDC  +
mov [esi+0Ch] eax +
cmp eax ebx +
jz loc_103B7AC  +
push dword ptr [edi]  +
push eax  +
call ds:SelectObject  +
mov [esi+18h] eax +
mov eax [esi+24h] +
cmp eax ebx +
jnz sub_103ED7C  +
xor eax eax +
mov [esi+28h] eax +
call sub_10049D9  +
mov ecx eax +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
cmp eax ebx +
jz loc_103B7A3  +
mov eax [eax+40h] +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_103B7A3  +
push 1  +
call sub_1009F8B  +
call sub_10049FD  +
mov edi [ebp+var_4] +
mov ecx edi +
call sub_10303DC  +
push 1  +
push offset aImageCrop  +
mov ecx offset unk_108B4B8 +
call sub_100D1F5  +
mov eax [esi+2Ch] +
mov [ebp+var_10] eax +
mov eax [esi+30h] +
mov [ebp+var_C] eax +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebp+var_8] +
mov ecx [eax+0ECh] +
push 15Eh  +
call sub_103584E  +
test eax eax +
jz loc_103B799  +
mov eax [edi+40h] +
push 0CC0020h  +
push ebx  +
push ebx  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push ebx  +
push ebx  +
push dword ptr [eax+0Ch]  +
call ds:BitBlt  +
mov eax [esi+2Ch] +
mov [ebp+rcSrc2.right] eax +
mov eax [esi+30h] +
mov [ebp+rcSrc2.bottom] eax +
lea eax [ebp+rcSrc2] +
push eax  +
push dword ptr [edi+40h]  +
mov [ebp+rcSrc2.left] ebx +
mov [ebp+rcSrc2.top] ebx +
call sub_1005D16  +
lea eax [ebp+rcSrc2] +
push eax  +
push dword ptr [edi+40h]  +
call sub_100D173  +
push dword ptr [edi+40h]  +
call sub_100D2D1  +
mov ecx offset unk_108B4B8 +
call sub_100D848  +
push dword ptr [esi+0Ch]  +
call ds:DeleteDC  +
pop edi  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov edi ecx +
mov esi [edi+40h] +
cmp dword_108AF30 ebx +
jz loc_103EC9F  +
mov esi offset stru_108A338 +
lea edi [ebp+rc] +
movs   +
movs   +
movs   +
movs   +
dec [ebp+rc.right]  +
dec [ebp+rc.bottom]  +
mov edi ecx +
push ebx  +
cmp dword_108AF30 ebx +
jz loc_103ECD3  +
mov esi offset unk_108AEB4 +
push esi  +
mov ecx edi +
call sub_1009365  +
mov [ebp+var_4] eax +
mov eax dword_108AECC +
mov [ebp+var_1C] eax +
mov eax dword_108AED0 +
mov [ebp+var_18] eax +
mov [ebp+var_24] ebx +
mov [ebp+var_20] ebx +
lea eax [ebp+var_24] +
mov ecx edi +
cmp dword_108AF50 ebx +
jnz loc_103ECBB  +
push ebx  +
push eax  +
push esi  +
call sub_103B87A  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
cmp [ebp+var_4] ebx +
jnz loc_103ECC2  +
cmp dword_108B1D4 ebx +
jnz loc_103ECF4  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
lea ecx [ebp-30h] +
call ??0CDC@@QAE@XZ  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-1Ch] ebx +
mov dword ptr [ebp-20h] offset off_1002208 +
mov esi [ebp+0Ch] +
mov eax [esi+0Ch] +
sub eax [esi+4] +
mov edi [esi+8] +
push dword ptr [ebp+8]  +
sub edi [esi] +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
mov [ebp+0Ch] eax +
call sub_1002292  +
test eax eax +
jz loc_103E7C7  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-20h] +
push edi  +
push dword ptr [ebp+8]  +
call sub_1008818  +
test eax eax +
jz loc_103E7C7  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-30h] +
call sub_10022BD  +
mov ecx [ebp-10h] +
mov [ebp-18h] eax +
push ebx  +
lea eax [ebp-30h] +
push eax  +
call sub_1009365  +
mov [ebp-10h] eax +
cmp [ebp+10h] ebx +
jnz loc_103E6D4  +
push 0CC0020h  +
push dword ptr [esi+4]  +
lea ecx [ebp-30h] +
push dword ptr [esi]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+0Ch]  +
push edi  +
push ebx  +
push ebx  +
call sub_100988D  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-30h] +
call sub_10022BD  +
cmp [ebp-10h] ebx +
jnz loc_103E7B6  +
lea ecx [ebp-20h] +
call ?Detach@CGdiObject@@QAEPAXXZ  +
lea ecx [ebp-20h] +
mov esi eax +
mov [ebp-4] bl +
mov dword ptr [ebp-20h] offset off_1002208 +
call sub_1002407  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
call ??1CDC@@UAE@XZ  +
mov eax esi +
call sub_1002061  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+40h] +
test eax eax +
jz loc_103B9E8  +
mov eax [eax+4] +
test eax eax +
jz loc_103B9E8  +
cmp dword ptr [eax+4] 0 +
jz loc_103B9E8  +
cmp dword_108AEF4 0 +
jz loc_103B997  +
call sub_103B9F1  +
mov edx [ebp+arg_4] +
push esi  +
mov esi dword_108AF30 +
push edi  +
push 17h  +
pop ecx  +
mov edi edx +
movs   +
mov eax dword_108AEB8 +
mov [edx+0Ch] eax +
mov eax dword_108AEC8 +
mov [edx+14h] eax +
mov eax dword_108AEEC +
mov [edx+18h] eax +
xor eax eax +
inc eax  +
mov [edx+8] eax +
mov ecx dword_108B1D4 +
mov [edx+24h] ecx +
mov ecx dword_108AECC +
mov [edx+2Ch] ecx +
mov ecx dword_108AED0 +
pop edi  +
mov [edx+30h] ecx +
pop esi  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_103B9E4  +
***
call sub_1002370  +
xor edi edi +
cmp dword_108AF30 edi +
jz loc_103BA7D  +
push edi  +
mov esi offset unk_108AEB4 +
mov ebx offset unk_108AEA0 +
push esi  +
mov ecx ebx +
call sub_1035462  +
mov [ebp-14h] eax +
mov eax dword_108AF30 +
push dword ptr [eax+0Ch]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov ecx off_108A1D4 +
cmp dword ptr [ecx+40h] 25Ah +
mov [ebp-18h] eax +
jz loc_103F3E8  +
push 0CC0020h  +
push stru_108AF34.top  +
mov ecx esi +
push stru_108AF34.left  +
push eax  +
push dword_108AED0  +
push dword_108AECC  +
push edi  +
push edi  +
call sub_100988D  +
cmp [ebp-14h] edi +
jnz loc_103F4C9  +
push dword_108A1C8  +
mov ecx ebx +
call sub_103603F  +
call sub_1002061  +
retn   +
***
mov esi [ebx+28h] +
lea eax [ebx+24h] +
push eax  +
lea ecx [ebp-40h] +
call ??4CString@@QAEABV0@ABV0@@Z  +
cmp [ebp+0Ch] edi +
jz loc_103BAFE  +
mov eax [ebp-40h] +
cmp [eax-8] edi +
jnz loc_103BAFE  +
lea eax [ebx+20h] +
push eax  +
lea ecx [ebp-40h] +
call ??4CString@@QAEABV0@ABV0@@Z  +
push offset asc_103BBCC  +
lea ecx [ebp-40h] +
call ?FindOneOf@CString@@QBEHPBG@Z  +
cmp eax 0FFFFFFFFh +
jnz loc_1040AEF  +
lea ecx [ebp-48h] +
call ??0CString@@QAE@XZ  +
mov eax [esi] +
push 4  +
lea ecx [ebp-48h] +
push ecx  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+6Ch]  +
test eax eax +
jz loc_103BAF2  +
mov eax [ebp-48h] +
cmp [eax-8] edi +
jz loc_103BAF2  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-40h] +
call ??YCString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
push dword ptr [ebp-40h]  +
lea eax [ebp-48h] +
push eax  +
call sub_103C557  +
push offset word_100219C  +
mov ecx eax +
call sub_103C01F  +
test eax eax +
lea ecx [ebp-48h] +
setnz byte ptr [ebp-41h]  +
call ??1CString@@QAE@XZ  +
cmp byte ptr [ebp-41h] 0 +
jz loc_103BB4F  +
push dword ptr [ebp-40h]  +
lea eax [ebp-48h] +
push eax  +
call sub_103C410  +
push eax  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
push 5  +
pop ecx  +
lea eax [ebp-3Ch] +
push eax  +
mov eax [ebp+0Ch] +
lea esi [ebp-28h] +
lea edi [ebp-3Ch] +
movs   +
xor edi edi +
neg eax  +
sbb eax eax +
push edi  +
and eax 0FFFFFFFDh +
push 804h  +
add eax 0F004h +
push eax  +
lea eax [ebp-40h] +
push eax  +
mov ecx offset unk_108AF60 +
call sub_103C144  +
test eax eax +
jz loc_1040AFD  +
lea esi [ebx+118h] +
cmp [esi] edi +
jnz loc_1040B10  +
lea ecx [ebp-3Ch] +
call sub_102F0C9  +
lea ecx [ebp-28h] +
mov esi eax +
call sub_102F0C9  +
cmp esi eax +
jb loc_1040B2A  +
mov edi [ebx+0ECh] +
push 5  +
add edi 10h +
pop ecx  +
lea esi [ebp-3Ch] +
movs   +
xor edi edi +
jmp loc_102ECB0  +
***
mov eax [ebp-22Ch] +
mov ecx [eax+14h] +
mov [eax+18h] ecx +
xor ebx ebx +
mov [ebp-220h] ebx +
cmp [ebp-248h] ebx +
jbe loc_103BD4A  +
mov eax [ebp-240h] +
add eax ebx +
push 4  +
lea esi [eax+10h] +
pop ecx  +
mov edi offset loc_102E904 +
xor edx edx +
cmps   +
jz loc_103BD2D  +
push 4  +
pop ecx  +
mov edi offset loc_103BFD4 +
lea esi [eax+10h] +
xor edx edx +
cmps   +
jz loc_103BD2D  +
push 4  +
pop ecx  +
mov edi (offset loc_103BFE2+2) +
lea esi [eax+10h] +
xor edx edx +
cmps   +
jz loc_103BD2D  +
push dword ptr [eax+2Ch]  +
lea ecx [ebp-224h] +
call ??0CString@@QAE@PBG@Z  +
lea ecx [ebp-224h] +
mov byte ptr [ebp-4] 0Eh +
call ?MakeLower@CString@@QAEXXZ  +
mov eax [ebp-240h] +
push dword ptr [ebx+eax+28h]  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@PBG@Z  +
push offset asc_103BFBC  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@PBG@Z  +
lea eax [ebp-224h] +
push eax  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@ABV0@@Z  +
push 29h  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@G@Z  +
push 0  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@G@Z  +
lea eax [ebp-224h] +
push eax  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@ABV0@@Z  +
push 0  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@G@Z  +
push 3Bh  +
lea ecx [ebp-244h] +
call ??YCString@@QAEABV0@G@Z  +
mov eax [ebp-240h] +
push dword ptr [ebx+eax+2Ch]  +
lea ecx [ebp-244h] +
call ??YCString@@QAEABV0@PBG@Z  +
mov edx [ebp-22Ch] +
mov eax [edx+14h] +
mov ecx eax +
imul ecx ecx +
add ecx [ebp-23Ch] +
inc eax  +
mov [edx+14h] eax +
mov eax [ebp-240h] +
sub esp 10h +
lea esi [ebx+eax+10h] +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_102E962  +
lea ecx [ebp-224h] +
mov byte ptr [ebp-4] 5 +
call ??1CString@@QAE@XZ  +
inc dword ptr [ebp-220h]  +
mov eax [ebp-220h] +
add ebx 4Ch +
cmp eax [ebp-248h] +
jb loc_103BBF8  +
xor ebx ebx +
push dword ptr [ebp-240h]  +
call ds:LocalFree  +
cmp [ebp+14h] ebx +
jnz loc_1041484  +
mov eax [ebp-22Ch] +
mov esi [eax+14h] +
xor edi edi +
cmp esi ebx +
jbe loc_103BD9F  +
mov eax [ebp-23Ch] +
mov [ebp-220h] eax +
push dword ptr [ebp-254h]  +
mov ecx [ebp-220h] +
call sub_102ED61  +
inc edi  +
test al al +
jnz loc_103C119  +
add dword ptr [ebp-220h] 14h +
cmp edi esi +
jb loc_103BD7A  +
call sub_10049D9  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+0C4h]  +
cmp eax ebx +
jz loc_103BDC1  +
lea ecx [eax+114h] +
cmp byte ptr [ecx] 0 +
jnz loc_104157F  +
mov eax [ebp-22Ch] +
mov ecx [ebp-21Ch] +
mov [eax+0Ch] ecx +
call sub_10049D9  +
cmp eax ebx +
jz loc_1041596  +
mov eax [eax+20h] +
mov ecx [ebp-22Ch] +
mov [ecx+4] eax +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+0Ch] +
mov ecx [ebp-22Ch] +
mov [ecx+8] eax +
mov ecx [ebp-250h] +
mov eax [ebp-22Ch] +
mov [eax+30h] ecx +
mov ecx [ebp-258h] +
mov esi 104h +
push esi  +
call ?GetBuffer@CString@@QAEPAGH@Z  +
mov ecx [ebp-22Ch] +
mov [ecx+1Ch] eax +
mov eax [ebp-22Ch] +
mov [eax+20h] esi +
xor eax eax +
push 206h  +
mov [ebp-218h] ax +
lea eax [ebp-216h] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp-220h] +
mov edi offset unk_108AF60 +
push eax  +
mov ecx edi +
call sub_103C075  +
mov byte ptr [ebp-4] 0Fh +
mov dword ptr [ebp-224h] 1 +
cmp [eax] ebx +
jz loc_103BE95  +
lea eax [ebp-24Ch] +
push eax  +
mov ecx edi +
call sub_103C075  +
mov eax [eax] +
mov dword ptr [ebp-224h] 3 +
mov byte ptr [ebp-231h] 0 +
cmp [eax] bx +
jnz loc_103BE9C  +
mov byte ptr [ebp-231h] 1 +
test byte ptr [ebp-224h] 2 +
jz loc_103BEB7  +
and dword ptr [ebp-224h] 0FFFFFFFDh +
lea ecx [ebp-24Ch] +
call ??1CString@@QAE@XZ  +
test byte ptr [ebp-224h] 1 +
push 5  +
pop edi  +
mov [ebp-4] edi +
jz loc_103BED1  +
lea ecx [ebp-220h] +
call ??1CString@@QAE@XZ  +
cmp byte ptr [ebp-231h] 0 +
jz loc_103BF05  +
push esi  +
lea eax [ebp-218h] +
push eax  +
push ebx  +
push ebx  +
push offset dword_103BFC4  +
call SHGetFolderPathEx  +
cmp eax ebx +
jnz loc_104159D  +
mov ecx [ebp-22Ch] +
lea eax [ebp-218h] +
mov [ecx+2Ch] eax +
lea ecx [ebp-230h] +
call sub_103BFF9  +
mov ecx [ebp-258h] +
mov ebx eax +
dec ebx  +
neg ebx  +
sbb ebx ebx +
push 0FFFFFFFFh  +
inc ebx  +
call ?ReleaseBuffer@CString@@QAEXH@Z  +
mov eax [ebp-22Ch] +
mov esi [eax+18h] +
dec esi  +
js loc_103BF49  +
cmp esi [eax+14h] +
jnb loc_103BF49  +
imul esi esi +
add esi [ebp-23Ch] +
mov ecx edi +
mov edi [ebp-254h] +
movs   +
push dword ptr [ebp-23Ch]  +
call sub_1006809  +
pop ecx  +
lea ecx [ebp-244h] +
mov byte ptr [ebp-4] 4 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-238h] +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-228h] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-21Ch] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-250h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-230h] +
call sub_103C65B  +
mov eax ebx +
call sub_1002119  +
retn 14h  +
***
cmp dword ptr [ecx] 0 +
push dword ptr [ecx+4]  +
jnz loc_1043CB8  +
call ds:GetSaveFileNameW  +
test eax eax +
jz loc_1043CC3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx] +
mov cx [eax] +
cmp cx [edx] +
jz loc_103D708  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_102E9B9  +
mov eax esi +
pop esi  +
retn   +
***
mov al 1 +
jmp loc_102EBD8  +
***
cmp dword_108AF30 ecx +
jz loc_102EBE8  +
jmp loc_1040904  +
***
xor eax eax +
jmp loc_102ED8D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
add ecx 448h +
push ecx  +
mov ecx [ebp+arg_0] +
call ??0CString@@QAE@ABV0@@Z  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
push 58h  +
mov [esi] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_103C0CC  +
push 58h  +
push 0  +
push eax  +
call memset  +
mov eax [esi+4] +
add esp 0Ch +
mov dword ptr [eax] 58h +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
pop ebp  +
retn 0Ch  +
***
jmp ds:?BeginModalState@CFrameWnd@@UAEXXZ  +
***
mov eax [ebp-22Ch] +
mov [eax+18h] edi +
jmp loc_103BD9F  +
mov [ebp-23Ch] edi +
jmp loc_103C2C8  +
cmp eax ebx +
jz loc_103BEF6  +
jmp loc_103BF05  +
***
call sub_10020DC  +
mov eax [ebp+8] +
push dword ptr [ebp+14h]  +
mov [ebp-258h] eax +
mov eax [ebp+18h] +
mov esi ecx +
xor edi edi +
lea ecx [ebp-230h] +
mov [ebp-254h] eax +
mov [ebp-224h] edi +
call sub_103C09A  +
mov [ebp-4] edi +
cmp [ebp-22Ch] edi +
jz loc_10412EF  +
lea ecx [ebp-250h] +
call ??0CString@@QAE@XZ  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-250h] +
mov byte ptr [ebp-4] 1 +
call ?LoadStringW@CString@@QAEHI@Z  +
mov ecx [ebp+10h] +
or ecx 80000h +
cmp [ebp+14h] edi +
jnz loc_103C1BA  +
or ecx 2 +
mov eax [ebp-22Ch] +
or [eax+34h] ecx +
mov eax [ebp-22Ch] +
and dword ptr [eax+34h] 0FFFFFFEFh +
lea ecx [ebp-21Ch] +
call ??0CString@@QAE@XZ  +
add esi 84h +
mov ecx [esi] +
mov eax [ecx] +
mov byte ptr [ebp-4] 2 +
xor ebx ebx +
call dword ptr [eax+18h]  +
mov [ebp-25Ch] eax +
cmp eax edi +
jz loc_103C205  +
mov ecx [esi] +
mov eax [ecx] +
lea edx [ebp-25Ch] +
push edx  +
call dword ptr [eax+1Ch]  +
mov ebx eax +
lea ecx [ebp-228h] +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-238h] +
mov byte ptr [ebp-4] 3 +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-244h] +
mov byte ptr [ebp-4] 4 +
call ??0CString@@QAE@XZ  +
mov eax [ebx] +
push 4  +
lea ecx [ebp-228h] +
push ecx  +
mov ecx ebx +
mov byte ptr [ebp-4] 5 +
call dword ptr [eax+6Ch]  +
mov eax [ebx] +
push 3  +
lea ecx [ebp-238h] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+6Ch]  +
mov esi [ebp+14h] +
lea eax [ebp-240h] +
push eax  +
lea eax [ebp-248h] +
mov [ebp-240h] edi +
mov [ebp-248h] edi +
push eax  +
cmp esi edi +
jnz loc_10412F6  +
call sub_102EA8E  +
neg esi  +
sbb esi esi +
add esi 4 +
add esi [ebp-248h] +
xor ecx ecx +
push 14h  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10067E4  +
mov ebx eax +
pop ecx  +
mov [ebp-24Ch] ebx +
mov byte ptr [ebp-4] 6 +
cmp ebx edi +
jz loc_103C127  +
push offset loc_103C043  +
push esi  +
push 14h  +
push ebx  +
call sub_100A25C  +
mov [ebp-23Ch] ebx +
mov eax [ebp-228h] +
mov ecx [ebp-22Ch] +
add eax 2 +
mov byte ptr [ebp-4] 5 +
mov [ecx+3Ch] eax +
cmp [ebp+14h] edi +
jnz loc_1041300  +
mov dword ptr [ebp-224h] 0Dh +
mov ebx offset asc_103C014 +
mov esi [ebp-224h] +
push esi  +
lea ecx [ebp-238h] +
call ?LoadStringW@CString@@QAEHI@Z  +
lea eax [ebp-238h] +
push eax  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@ABV0@@Z  +
push edi  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@G@Z  +
push 6  +
lea ecx [ebp-228h] +
call ?LoadStringW@CString@@QAEHI@Z  +
lea eax [ebp-228h] +
push eax  +
push offset dword_103C3FC  +
lea eax [ebp-220h] +
push eax  +
call ??H@YG?AVCString@@PBGABV0@@Z  +
push eax  +
lea ecx [ebp-21Ch] +
mov byte ptr [ebp-4] 0Ch +
call ??YCString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-220h] +
mov byte ptr [ebp-4] 5 +
call ??1CString@@QAE@XZ  +
push 1Ch  +
lea ecx [ebp-228h] +
call ?LoadStringW@CString@@QAEHI@Z  +
lea eax [ebp-228h] +
push eax  +
push ebx  +
lea eax [ebp-24Ch] +
push eax  +
call ??H@YG?AVCString@@PBGABV0@@Z  +
push eax  +
lea ecx [ebp-21Ch] +
mov byte ptr [ebp-4] 0Dh +
call ??YCString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-24Ch] +
mov byte ptr [ebp-4] 5 +
call ??1CString@@QAE@XZ  +
push edi  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@G@Z  +
mov edx [ebp-22Ch] +
mov ecx [edx+14h] +
mov eax ecx +
imul eax eax +
add eax [ebp-23Ch] +
add esi 0FFFFFFF3h +
inc ecx  +
inc dword ptr [ebp-224h]  +
cmp dword ptr [ebp-224h] 10h +
mov [edx+14h] ecx +
mov [eax] esi +
lea edi [eax+4] +
mov esi offset loc_102E904 +
movs   +
movs   +
movs   +
movs   +
jg loc_103BBD8  +
xor edi edi +
jmp loc_103C2F6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 810h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
push eax  +
push eax  +
mov [ebp+var_810] eax +
mov eax 100h +
push eax  +
lea edx [ebp+var_404] +
push edx  +
push eax  +
lea eax [ebp+var_204] +
push eax  +
mov esi 203h +
push esi  +
lea eax [ebp+var_80C] +
push eax  +
push ecx  +
call _wsplitpath_s  +
add esp 24h +
lea eax [ebp+var_204] +
push eax  +
push esi  +
lea eax [ebp+var_80C] +
push eax  +
call sub_103C4AF  +
lea eax [ebp+var_404] +
push eax  +
push esi  +
lea eax [ebp+var_80C] +
push eax  +
call sub_103C4AF  +
lea eax [ebp+var_80C] +
push eax  +
mov ecx edi +
call ??0CString@@QAE@PBG@Z  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100207A  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ecx ecx +
xor eax eax +
push edi  +
cmp esi ecx +
jz loc_103C534  +
cmp esi 7FFFFFFFh +
ja loc_103C534  +
cmp eax ecx +
mov edi [ebp+arg_0] +
jl loc_103C4EA  +
xor ebx ebx +
mov edx esi +
mov eax edi +
cmp esi ecx +
jz loc_103C542  +
cmp [eax] cx +
jnz loc_103C53B  +
cmp edx ecx +
jz loc_103C542  +
mov ecx esi +
sub ecx edx +
mov eax ebx +
test eax eax +
jl loc_103C52D  +
mov edx esi +
sub edx ecx +
push 0  +
lea eax [edi+ecx*2] +
pop ebx  +
jz loc_103C549  +
mov edi edx +
sub edi esi +
mov esi [ebp+arg_8] +
lea edi [edi+ecx+7FFFFFFFh] +
sub esi eax +
test edi edi +
jz loc_103C522  +
movzx ecx word ptr [esi+eax] +
test cx cx +
jz loc_103C522  +
mov [eax] cx +
inc eax  +
inc eax  +
dec edx  +
dec edi  +
test edx edx +
jnz loc_103C50A  +
test edx edx +
jz loc_103C549  +
xor ecx ecx +
mov [eax] cx +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_103C4CA  +
inc eax  +
inc eax  +
dec edx  +
jz loc_103C4E0  +
jmp loc_103C4DB  +
mov ebx 80070057h +
jmp loc_103C4E8  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
jmp loc_103C526  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
push eax  +
push eax  +
push 100h  +
lea edx [ebp+var_204] +
push edx  +
push eax  +
push eax  +
push eax  +
push eax  +
push ecx  +
mov [ebp+var_208] eax +
call _wsplitpath_s  +
add esp 24h +
lea eax [ebp+var_204] +
push eax  +
mov ecx esi +
call ??0CString@@QAE@PBG@Z  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100207A  +
leave   +
retn 8  +
***
mov eax ds:?classCFrameWnd@CFrameWnd@@2UCRuntimeClass@@B +
retn   +
***
mov ecx edx +
mov edi offset loc_102E9A4 +
lea esi [ebp+var_14] +
xor edx edx +
cmps   +
jnz loc_10125F6  +
mov eax 80h +
jmp loc_10125F6  +
***
mov dword ptr [esi+10Ch] 2 +
jmp loc_1012043  +
xor esi esi +
jmp loc_1012066  +
***
cmp [ebp+0Ch] edi +
jnz loc_102ED2B  +
jmp loc_1040C84  +
***
push eax  +
mov ecx esi +
call sub_1009B54  +
jmp loc_10126F5  +
***
xor esi esi +
jmp loc_102F3D0  +
push edi  +
push dword ptr [ebp+8]  +
push ebx  +
call ds:CopyFileW  +
push ebx  +
mov esi eax +
call ds:DeleteFileW  +
jmp loc_102F43A  +
***
pop ecx  +
retn   +
***
jmp ds:?EndModalState@CFrameWnd@@UAEXXZ  +
***
mov esi [ebp+arg_8] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1011F88 +
xor eax eax +
cmps   +
pop edi  +
jz loc_1043A25  +
push [ebp+arg_18]  +
mov eax [ebp+arg_14] +
push [ebp+arg_4]  +
call sub_103C6AC  +
mov esi eax +
jmp loc_102F2D3  +
mov esi eax +
test esi esi +
jnz loc_103C687  +
jmp loc_102F2D3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
xor edx edx +
push edi  +
mov edi eax +
inc edx  +
xor esi esi +
mov [ebp+var_8] edx +
xor eax eax +
mov ecx edi +
cmp eax [ebp+arg_4] +
jnb loc_103C6DA  +
cmp [ecx] si +
jnz loc_10435DE  +
inc eax  +
add ecx 10h +
cmp eax 64h +
jb loc_103C6C3  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
call ?DeleteObject@CGdiObject@@QAEHXZ  +
jmp loc_101F3BC  +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
jmp loc_101F3CC  +
push eax  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
push eax  +
lea ecx [esi+14h] +
call sub_10022BD  +
jmp loc_101F3D7  +
push eax  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
push eax  +
lea ecx [esi+14h] +
call sub_10022BD  +
jmp loc_101F3E2  +
***
mov dword_108A248 ebx +
jmp loc_101FFB7  +
***
push eax  +
call ds:DeleteObject  +
jmp loc_101E55B  +
push eax  +
call ds:DeleteObject  +
jmp loc_101E566  +
***
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
and dword ptr [esi] 0 +
jmp loc_101E638  +
***
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_103C775  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
jmp loc_1020C36  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103C7A7  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_8] +
jnz loc_1047292  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_103C7E7  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
jmp loc_1020C78  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103C819  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_8] +
jnz loc_1048DF2  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_103C859  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
jmp loc_1020CBA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103C88B  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_8] +
jnz loc_1048DD6  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov edx [ebp+arg_4] +
mov ecx [edx+4] +
sub esp 8Ch +
push ebx  +
mov ebx [eax+4] +
cmp ecx ebx +
jl loc_1035818  +
mov [ebp+var_28] ecx +
mov ebx ecx +
mov ecx [edx+0Ch] +
cmp ebx ecx +
jge loc_1035820  +
mov edx [eax+0Ch] +
cmp ecx edx +
jg loc_1035830  +
mov [ebp+var_24] ecx +
cmp ebx [ebp+var_24] +
jge loc_103CBF9  +
mov edx [eax+4] +
mov ecx [eax+0Ch] +
mov eax [ebp+var_24] +
sub eax edx +
mov [ebp+arg_8] eax +
movzx eax ds:word_103CC02 +
movzx eax al +
sub ebx edx +
sub ecx edx +
mov edx ds:dword_103CC04 +
shr edx 8 +
push esi  +
movzx esi byte ptr ds:dword_103CC04+2 +
sub esi eax +
mov eax dword ptr ds:byte_103CC00 +
shr eax 8 +
mov [ebp+var_8] eax +
movzx eax al +
push edi  +
movzx edi dl +
sub edi eax +
mov eax esi +
imul eax ebx +
cdq   +
idiv  ecx +
movzx edx ds:word_103CC02 +
mov byte ptr [ebp+var_14] 0 +
mov byte ptr [ebp+var_14+1] 0 +
mov byte ptr [ebp+var_14+2] 0 +
mov byte ptr [ebp+var_10] 0 +
mov byte ptr [ebp+var_10+1] 0 +
mov byte ptr [ebp+var_10+2] 0 +
mov byte ptr [ebp+var_C] 0 +
mov byte ptr [ebp+var_C+1] 0 +
mov byte ptr [ebp+var_C+2] 0 +
mov byte ptr [ebp+var_1C] 0 +
mov byte ptr [ebp+var_1C+1] 0 +
add al dl +
mov [ebp+var_2] al +
mov eax edi +
imul eax ebx +
cdq   +
idiv  ecx +
add al byte ptr [ebp+var_8] +
mov [ebp+var_3] al +
mov eax ebx +
imul eax eax +
cdq   +
idiv  ecx +
sub al 21h +
mov [ebp+var_4] al +
mov eax esi +
imul eax [ebp+arg_8] +
cdq   +
idiv  ecx +
movzx edx ds:word_103CC02 +
add al dl +
mov byte ptr [ebp+var_18+2] al +
mov eax edi +
imul eax [ebp+arg_8] +
cdq   +
idiv  ecx +
add al byte ptr [ebp+var_8] +
mov byte ptr [ebp+var_18+1] al +
mov eax [ebp+arg_8] +
imul eax eax +
cdq   +
idiv  ecx +
mov dx ds:word_103C8AA +
mov ecx 0FFh +
movzx ebx dh +
sub al 21h +
mov byte ptr [ebp+var_18] al +
mov al cl +
sub al bl +
mov byte ptr [ebp+arg_8+3] al +
movzx eax ds:byte_103CC0B +
mov bl cl +
sub bl al +
mov [ebp+var_8] eax +
mov [ebp+var_1D] bl +
mov eax [ebp+arg_C] +
sub eax 0 +
mov byte ptr [ebp+var_1C+2] 0 +
jz loc_103CD1B  +
dec eax  +
jnz loc_103CECB  +
movzx edi byte ptr [ebp+arg_8+3] +
movzx eax dh +
movzx esi al +
movzx eax dl +
movzx edx [ebp+var_2] +
imul eax esi +
imul edx edi +
add eax edx +
cdq   +
mov edi ecx +
idiv  edi +
movzx edx byte ptr [ebp+arg_8+3] +
movzx edi [ebp+var_3] +
imul edi edx +
mov [ebp+arg_C] eax +
mov byte ptr [ebp+var_14+2] al +
mov eax dword ptr ds:byte_103C8A8 +
shr eax 8 +
movzx eax al +
imul eax esi +
imul esi esi +
add eax edi +
cdq   +
mov edi ecx +
idiv  edi +
movzx edx byte ptr [ebp+arg_8+3] +
movzx edi bl +
mov ebx ecx +
mov [ebp+var_2C] eax +
mov byte ptr [ebp+var_14+1] al +
movzx eax [ebp+var_4] +
imul eax edx +
add eax esi +
cdq   +
mov esi ecx +
idiv  esi +
mov dl byte ptr [ebp+arg_C] +
movzx esi byte ptr [ebp+var_8] +
mov byte ptr [ebp+var_10+2] dl +
mov dl byte ptr [ebp+var_2C] +
mov byte ptr [ebp+var_10+1] dl +
movzx edx byte ptr [ebp+var_18+2] +
imul edx edi +
mov byte ptr [ebp+var_14] al +
mov byte ptr [ebp+var_10] al +
movzx eax ds:byte_103CC0A +
imul eax esi +
add eax edx +
cdq   +
idiv  ebx +
movzx edx byte ptr [ebp+var_18+1] +
imul edx edi +
mov [ebp+arg_8] eax +
mov byte ptr [ebp+var_C+2] al +
mov eax dword ptr ds:byte_103CC08 +
shr eax 8 +
movzx eax al +
imul eax esi +
imul esi esi +
add eax edx +
cdq   +
idiv  ebx +
mov ebx eax +
movzx eax byte ptr [ebp+var_18] +
imul eax edi +
add eax esi +
cdq   +
idiv  ecx +
mov cl byte ptr [ebp+arg_8] +
mov byte ptr [ebp+var_C+1] bl +
mov byte ptr [ebp+var_1C+2] cl +
mov byte ptr [ebp+var_1C+1] bl +
mov byte ptr [ebp+var_C] al +
mov edi [ebp+var_28] +
movzx cx byte ptr [ebp+var_14+2] +
mov [ebp+var_70] edi +
mov [ebp+var_60] edi +
movzx di byte ptr [ebp+var_10+2] +
shl di 8 +
mov esi [ebp+arg_4] +
mov edx [esi] +
mov [ebp+var_5C] di +
movzx di byte ptr [ebp+var_10+1] +
shl cx 8 +
mov [ebp+var_6C] cx +
movzx cx byte ptr [ebp+var_14+1] +
shl di 8 +
mov [ebp+var_5A] di +
movzx di byte ptr [ebp+var_10] +
shl cx 8 +
mov [ebp+var_6A] cx +
movzx cx byte ptr [ebp+var_14] +
shl di 8 +
mov esi [esi+8] +
mov [ebp+var_58] di +
shl cx 8 +
and [ebp+var_8C] 0 +
and [ebp+var_80] 0 +
movzx ax al +
mov [ebp+var_68] cx +
mov ecx 0FF00h +
push 3  +
mov edi ecx +
mov [ebp+var_56] di +
movzx di byte ptr [ebp+var_C+2] +
shl ax 8 +
shl di 8 +
mov word ptr [ebp+var_38] ax +
pop eax  +
push 2  +
mov [ebp+var_74] edx +
mov [ebp+var_54] edx +
mov edx [ebp+var_24] +
mov [ebp+var_4C] di +
movzx di byte ptr [ebp+var_C+1] +
mov [ebp+var_84] eax +
mov [ebp+var_7C] eax +
pop eax  +
push eax  +
mov [ebp+var_50] edx +
mov [ebp+var_40] edx +
movzx dx byte ptr [ebp+var_1C+2] +
push eax  +
shl di 8 +
mov [ebp+var_4A] di +
movzx di byte ptr [ebp+var_C] +
mov [ebp+var_78] eax +
shl dx 8 +
lea eax [ebp+var_8C] +
push eax  +
mov word ptr [ebp+var_3C] dx +
movzx dx byte ptr [ebp+var_1C+1] +
push 4  +
shl di 8 +
lea eax [ebp+var_74] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_48] di +
mov ebx ecx +
mov edi ecx +
shl dx 8 +
mov [ebp+var_66] bx +
mov [ebp+var_64] esi +
mov [ebp+var_46] di +
mov [ebp+var_44] esi +
mov word ptr [ebp+var_3C+2] dx +
mov word ptr [ebp+var_38+2] cx +
mov [ebp+var_88] 1 +
call ds:GdiGradientFill  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
mov edx [ebp+var_1C] +
add edx 9 +
cmp edx ecx +
mov byte ptr [ebp+arg_0+3] 1 +
jl loc_100F954  +
jmp loc_100F950  +
mov edx [ebp+var_1C] +
mov [ebp+var_38] eax +
add eax 8 +
mov [ebp+var_30] eax +
lea eax [ebp+var_3C] +
add edx 9 +
push eax  +
mov [ebp+var_3C] edx +
mov [ebp+var_34] ecx +
call edi  +
push 4  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+var_C] eax +
call ebx  +
push [ebp+var_C]  +
call ds:DeleteObject  +
mov eax [ebp+var_10] +
mov ecx [ebp+var_14] +
jmp loc_100F96B  +
mov eax [ebp+var_1C] +
mov ecx [ebp+var_14] +
add eax 9 +
mov [ebp+var_3C] eax +
mov eax [ebp+var_10] +
mov [ebp+var_38] eax +
add eax 8 +
mov [ebp+var_30] eax +
push 1  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+var_34] ecx +
call sub_103C8B1  +
jmp loc_100F9A9  +
mov edx [ebp+var_18] +
add edx 9 +
cmp edx eax +
mov byte ptr [ebp+arg_4+3] 1 +
jl loc_100F947  +
jmp loc_100F943  +
cmp eax [ebp-20h] +
mov [ebp+var_1] 1 +
jl loc_100F961  +
jmp loc_100F95D  +
mov edx [ebp+var_18] +
mov [ebp+var_30] eax +
mov [ebp+var_3C] ecx +
lea eax [ebp+var_3C] +
add edx 9 +
add ecx 8 +
push eax  +
mov [ebp+var_38] edx +
mov [ebp+var_34] ecx +
call edi  +
push 4  +
mov edi eax +
push edi  +
push dword ptr [esi+4]  +
call ebx  +
push edi  +
call ds:DeleteObject  +
jmp loc_100F97F  +
mov eax [ebp+var_14] +
mov ecx [ebp+var_18] +
mov [ebp+var_3C] eax +
add eax 8 +
mov [ebp+var_34] eax +
mov eax [ebp+var_10] +
mov [ebp+var_30] eax +
push 0  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
push dword ptr [esi+4]  +
add ecx 9 +
mov [ebp+var_38] ecx +
call sub_103C8B1  +
jmp loc_100F99F  +
movzx eax dh +
movzx ebx al +
movzx eax [ebp+var_2] +
movzx esi dl +
movzx edx byte ptr [ebp+arg_8+3] +
imul esi ebx +
imul eax edx +
add eax esi +
cdq   +
mov edi ecx +
idiv  edi +
movzx edx byte ptr [ebp+arg_8+3] +
mov [ebp+arg_C] ebx +
mov byte ptr [ebp+var_14+2] al +
mov eax dword ptr ds:byte_103C8A8 +
shr eax 8 +
movzx edi al +
movzx eax [ebp+var_3] +
imul edi ebx +
imul eax edx +
add eax edi +
cdq   +
mov ebx ecx +
idiv  ebx +
movzx ebx byte ptr [ebp+arg_8+3] +
mov edx [ebp+arg_C] +
imul edx edx +
mov [ebp+var_2C] edx +
mov byte ptr [ebp+var_14+1] al +
movzx eax [ebp+var_4] +
imul eax ebx +
add eax edx +
cdq   +
mov ebx ecx +
idiv  ebx +
movzx edx ds:byte_103CC0A +
movzx ebx [ebp+var_2] +
mov byte ptr [ebp+var_14] al +
movzx eax byte ptr [ebp+var_8] +
imul edx eax +
movzx eax [ebp+var_1D] +
mov [ebp+arg_C] eax +
imul eax ebx +
add eax edx +
mov [ebp+var_30] edx +
cdq   +
mov ebx ecx +
idiv  ebx +
movzx ebx [ebp+var_3] +
mov byte ptr [ebp+var_10+2] al +
mov eax dword ptr ds:byte_103CC08 +
shr eax 8 +
movzx edx al +
movzx eax byte ptr [ebp+var_8] +
imul edx eax +
mov eax [ebp+arg_C] +
imul eax ebx +
add eax edx +
mov [ebp+var_34] edx +
cdq   +
mov ebx ecx +
idiv  ebx +
movzx edx byte ptr [ebp+var_8] +
movzx ebx [ebp+var_4] +
imul edx edx +
mov [ebp+var_8] edx +
mov byte ptr [ebp+var_10+1] al +
mov eax [ebp+arg_C] +
imul eax ebx +
add eax edx +
cdq   +
mov ebx ecx +
idiv  ebx +
movzx ebx byte ptr [ebp+arg_8+3] +
mov byte ptr [ebp+var_10] al +
movzx eax byte ptr [ebp+var_18+2] +
imul eax ebx +
add eax esi +
cdq   +
mov esi ecx +
idiv  esi +
movzx esi byte ptr [ebp+var_18+1] +
mov byte ptr [ebp+var_C+2] al +
mov eax esi +
imul eax ebx +
add eax edi +
cdq   +
mov edi ecx +
idiv  edi +
movzx edi byte ptr [ebp+var_18] +
mov byte ptr [ebp+var_C+1] al +
mov eax edi +
imul eax ebx +
add eax [ebp+var_2C] +
mov ebx ecx +
cdq   +
idiv  ebx +
mov byte ptr [ebp+var_C] al +
movzx eax byte ptr [ebp+var_18+2] +
imul eax [ebp+arg_C] +
add eax [ebp+var_30] +
cdq   +
idiv  ebx +
mov byte ptr [ebp+var_1C+2] al +
mov eax esi +
imul eax [ebp+arg_C] +
add eax [ebp+var_34] +
mov esi ecx +
cdq   +
idiv  esi +
mov byte ptr [ebp+var_1C+1] al +
mov eax edi +
imul eax [ebp+arg_C] +
add eax [ebp+var_8] +
cdq   +
idiv  ecx +
jmp loc_103CADC  +
mov [ebp+var_38] eax +
add eax 8 +
mov [ebp+var_30] eax +
mov [ebp+var_3C] ecx +
lea eax [ebp+var_3C] +
add ecx 8 +
push eax  +
mov [ebp+var_34] ecx +
call edi  +
push 4  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+var_C] eax +
call ebx  +
push [ebp+var_C]  +
call ds:DeleteObject  +
mov eax [ebp+var_10] +
mov ecx [ebp+var_14] +
jmp loc_100F975  +
mov eax [ebp+var_14] +
mov ecx [ebp+var_10] +
mov [ebp+var_3C] eax +
add eax 8 +
mov [ebp+var_34] eax +
push 2  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+var_38] ecx +
add ecx 8 +
mov [ebp+var_30] ecx +
call sub_103C8B1  +
jmp loc_100F9B3  +
dec eax  +
jnz loc_1035828  +
movzx edi byte ptr [ebp+arg_8+3] +
movzx eax dh +
movzx esi al +
movzx eax dl +
imul eax esi +
movzx edx [ebp+var_2] +
imul edx edi +
add eax edx +
cdq   +
mov edi ecx +
idiv  edi +
movzx edx byte ptr [ebp+arg_8+3] +
movzx edi [ebp+var_3] +
imul edi edx +
movzx ebx bl +
mov [ebp+arg_C] ebx +
mov byte ptr [ebp+var_14+2] al +
mov eax dword ptr ds:byte_103C8A8 +
shr eax 8 +
movzx eax al +
imul eax esi +
imul esi esi +
add eax edi +
cdq   +
mov edi ecx +
idiv  edi +
movzx edx byte ptr [ebp+arg_8+3] +
mov byte ptr [ebp+var_14+1] al +
movzx eax [ebp+var_4] +
imul eax edx +
add eax esi +
cdq   +
mov esi ecx +
idiv  esi +
movzx esi ds:byte_103CC0A +
movzx edx [ebp+var_2] +
mov byte ptr [ebp+var_14] al +
movzx eax byte ptr [ebp+var_8] +
imul esi eax +
mov eax ebx +
imul eax edx +
add eax esi +
cdq   +
idiv  edi +
movzx edx [ebp+var_3] +
mov byte ptr [ebp+var_10+2] al +
mov eax dword ptr ds:byte_103CC08 +
shr eax 8 +
movzx edi al +
movzx eax byte ptr [ebp+var_8] +
imul edi eax +
mov eax ebx +
imul eax edx +
add eax edi +
cdq   +
mov ebx ecx +
idiv  ebx +
movzx edx byte ptr [ebp+var_8] +
movzx ebx [ebp+var_4] +
imul edx edx +
mov [ebp+var_8] edx +
mov byte ptr [ebp+var_10+1] al +
mov eax [ebp+arg_C] +
imul eax ebx +
add eax edx +
cdq   +
mov ebx ecx +
idiv  ebx +
mov byte ptr [ebp+var_10] al +
movzx eax byte ptr [ebp+var_18+2] +
imul eax [ebp+arg_C] +
add eax esi +
cdq   +
mov esi ecx +
idiv  esi +
mov ebx eax +
movzx eax byte ptr [ebp+var_18+1] +
imul eax [ebp+arg_C] +
add eax edi +
mov byte ptr [ebp+var_C+2] bl +
cdq   +
idiv  esi +
mov byte ptr [ebp+var_1C+2] bl +
mov [ebp+arg_8] eax +
mov byte ptr [ebp+var_C+1] al +
movzx eax byte ptr [ebp+var_18] +
imul eax [ebp+arg_C] +
add eax [ebp+var_8] +
cdq   +
idiv  ecx +
mov cl byte ptr [ebp+arg_8] +
mov byte ptr [ebp+var_1C+1] cl +
mov byte ptr [ebp+var_C] al +
jmp loc_103CADC  +
***
push 8  +
jmp loc_10125F5  +
***
mov ecx [ebx+20h] +
push eax  +
push ecx  +
mov ecx esi +
call sub_103D004  +
mov [ebp-28h] eax +
xor esi esi +
jmp loc_1011F38  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 474h +
xor eax eax +
cmp [ebp+arg_4] 3 +
push ebx  +
setz al  +
push esi  +
push edi  +
xor ebx ebx +
mov edi ecx +
mov [ebp+var_18] edi +
mov esi eax +
cmp [ebp+arg_4] ebx +
jnz loc_103DD52  +
mov [ebp+var_14] 1 +
cmp [edi+4] ebx +
jz loc_103D042  +
cmp [edi+30h] ebx +
jz loc_103DD68  +
mov eax [edi+30h] +
cmp eax ebx +
jz loc_103DD61  +
push eax  +
call ds:GlobalLock  +
mov edi [edi+38h] +
and [ebp+var_C] 0 +
mov ebx eax +
push ebx  +
mov [ebp+var_10] ebx +
mov [ebp+var_1C] edi +
mov [ebp+arg_4] edi +
mov [ebp+var_4] ebx +
call sub_100AFAD  +
movzx ecx ax +
mov eax [ebx] +
movzx ebx cx +
add ebx eax +
test esi esi +
mov esi [ebp+arg_0] +
mov [ebp+var_8] ebx +
jnz loc_103DD73  +
cmp [ebp+var_14] 0 +
jz loc_103D0CA  +
push [ebp+var_4]  +
mov eax 4D42h +
mov word ptr [ebp+var_2C] ax +
lea eax [edi+0Eh] +
mov [ebp+var_2C+2] eax +
xor eax eax +
mov [ebp+var_26] ax +
mov [ebp+var_24] ax +
call sub_100AFAD  +
mov ecx [ebp+var_4] +
mov ecx [ecx] +
movzx eax ax +
lea eax [eax+ecx+0Eh] +
push 0Eh  +
lea ecx [ebp+var_2C] +
mov [ebp+var_22] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+40h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+14h]  +
mov edx [esi] +
mov [ebp+arg_0] eax +
sub eax [ebp+var_C] +
mov ecx esi +
add eax [ebp+arg_4] +
push eax  +
call dword ptr [edx+34h]  +
mov eax [esi] +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call dword ptr [eax+30h]  +
push [ebp+var_8]  +
mov eax [esi] +
push [ebp+var_4]  +
mov ecx esi +
call dword ptr [eax+40h]  +
mov eax [esi] +
mov ecx edi +
sub ecx [ebp+var_8] +
push ecx  +
mov ecx [ebp+var_10] +
add ebx ecx +
push ebx  +
mov ecx esi +
call dword ptr [eax+40h]  +
mov eax [ebp+arg_4] +
sub eax [ebp+var_C] +
xor ebx ebx +
mov [ebp+arg_4] eax +
cmp eax edi +
ja loc_103DE62  +
mov edi [ebp+var_18] +
mov [edi+2Ch] ebx +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+50h]  +
push dword ptr [edi+30h]  +
call ds:GlobalUnlock  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov [ebp+var_14] ebx +
cmp esi ebx +
jnz loc_103D02D  +
jmp loc_103D034  +
***
push 18h  +
pop eax  +
retn   +
push 8  +
jmp loc_103D153  +
push 4  +
jmp loc_103D153  +
***
xor eax eax +
inc eax  +
jmp loc_102CB95  +
***
push edx  +
call ds:GlobalLock  +
test eax eax +
jz loc_10409FE  +
movzx eax word ptr [eax+0Eh] +
lea ecx [eax-1] +
cmp ecx 7 +
jbe loc_10409E2  +
push 3  +
pop eax  +
push [ebp+hMem]  +
mov [ebx+10h] eax +
lea edi [ebx+14h] +
mov esi offset loc_102E904 +
movs   +
movs   +
movs   +
movs   +
call ds:GlobalUnlock  +
mov [ebp+var_15] 1 +
jmp loc_102CBEA  +
***
cmp dword ptr [ebp+8] 400h +
jz loc_100A6E7  +
call ds:GetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
test eax eax +
jnz loc_100A6E7  +
cmp dword_108A248 ebx +
jz loc_10406A2  +
push dword ptr [ebp-10h]  +
lea esi [ebp-4Ch] +
push dword ptr [ebp-10h]  +
lea edi [ebp-5Ch] +
movs   +
movs   +
movs   +
lea eax [ebp-5Ch] +
push eax  +
movs   +
call ds:InflateRect  +
xor edi edi +
cmp dword_108AF30 edi +
jnz loc_103D211  +
push dword ptr [ebp-18h]  +
lea eax [ebp-5Ch] +
push dword ptr [ebp-1Ch]  +
push eax  +
call ds:PtInRect  +
test eax eax +
jnz loc_10406B8  +
cmp dword ptr [ebp+8] 201h +
jz loc_103D26F  +
push 7F00h  +
push edi  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
jmp loc_100A79E  +
***
test byte ptr [ebp+arg_0] 3 +
jz loc_103D252  +
push 7F00h  +
push eax  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
xor eax eax +
jmp loc_100A49A  +
mov dword_108A240 eax +
call sub_1008445  +
jmp loc_103D24B  +
***
mov ecx [esi+4] +
mov eax [ecx] +
push 0Bh  +
call dword ptr [eax+38h]  +
mov bl al +
jmp loc_100CA56  +
***
mov ecx off_108A1D4 +
mov eax [ecx] +
push 5  +
call dword ptr [eax+68h]  +
test al al +
jnz loc_100A79E  +
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 25Bh +
jz loc_100A79E  +
mov ecx ebx +
call sub_103D2A7  +
jmp loc_100A79E  +
***
mov edi edi +
push ebx  +
push edi  +
mov ebx ecx +
call sub_1009FC1  +
xor edi edi +
mov dword_108A364 edi +
mov dword_108A360 edi +
cmp dword_108CF00 edi +
jnz loc_103FD1B  +
push esi  +
mov esi off_108A1D4 +
call ds:GetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp eax ebx +
jz loc_103FD2F  +
cmp [esi+20h] edi +
jnz loc_103FD2F  +
cmp [esi+14h] edi +
jnz loc_103D342  +
mov eax off_108A1D4 +
mov eax [eax+40h] +
cmp eax 259h +
jz loc_103D342  +
cmp eax 25Ah +
jz loc_103D342  +
cmp eax 25Bh +
jz loc_103D342  +
mov eax [esi] +
push 5  +
mov ecx esi +
call dword ptr [eax+68h]  +
test al al +
jnz loc_103D342  +
mov esi ds:GetKeyState +
xor edi edi +
inc edi  +
push edi  +
call esi  +
test ax ax +
jge loc_103FD7D  +
mov dword_108A240 edi +
pop esi  +
pop edi  +
pop ebx  +
jmp sub_1008445  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+40h]  +
jmp loc_103D31F  +
***
test ax ax +
jl loc_103D334  +
jmp loc_103D33A  +
***
push 2Ch  +
mov eax offset loc_107F314 +
call sub_100208C  +
mov esi ecx +
mov eax [ebp+0Ch] +
sub eax 0 +
jz loc_10447EE  +
dec eax  +
jz loc_103D4C1  +
dec eax  +
jnz loc_103D38A  +
cmp dword ptr [ebp+8] 54C5h +
jnz loc_103D38A  +
call sub_103D399  +
***
xor eax eax +
call sub_1002061  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
test eax eax +
jz loc_103D3BB  +
push eax  +
mov ecx offset unk_108B074 +
call sub_103D3C2  +
mov ecx esi +
call sub_103D3E2  +
and dword ptr [esi+18h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+14h] 0 +
jz loc_1043CD4  +
mov ecx [ecx+14h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+88h]  +
***
call sub_100208C  +
mov ebx ecx +
mov edi off_108A1D4 +
test edi edi +
jz loc_103D446  +
and dword ptr [ebp-10h] 0 +
mov esi offset off_100B560 +
mov dword ptr [ebp-14h] 7 +
mov [ebp-18h] esi +
and dword ptr [ebp-4] 0 +
push 20h  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
lea ecx [ebp-18h] +
push ecx  +
mov ecx eax +
call sub_1005BE0  +
mov eax [ebp-14h] +
mov [ebp-20h] eax +
mov eax [ebp-10h] +
mov [ebp-24h] esi +
mov [ebp-1Ch] eax +
mov edx [edi] +
push eax  +
push dword ptr [ebx+18h]  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call dword ptr [edx+20h]  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+10h] 0 +
jnz loc_1048085  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+14h] 0 +
jz loc_1043CD0  +
mov ecx [ecx+14h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+84h]  +
***
mov edi edi +
push esi  +
mov esi [ecx+14h] +
push 10h  +
call ds:GetKeyState  +
mov ecx 8000h +
test ax cx +
jnz loc_10447C0  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+10h] 0 +
jnz loc_104807C  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ebp+8] 54C5h +
jnz loc_103D38A  +
mov ebx [ebp+18h] +
test ebx ebx +
jz loc_103D38A  +
mov ecx [esi+10h] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
test eax eax +
jz loc_103D38A  +
xor eax eax +
lea edi [ebp-28h] +
stos   +
stos   +
stos   +
lea ecx [ebp-28h] +
push ecx  +
push offset dword_10166A0  +
stos   +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+0Ch]  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-28h] +
push eax  +
call ds:PropVariantToUInt32  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_103D523  +
jmp loc_103D38A  +
***
call sub_100208C  +
mov edi ecx +
call sub_103D489  +
test eax eax +
jnz loc_103D5A3  +
push 2  +
pop esi  +
push 66h  +
pop ebx  +
cmp [edi+18h] esi +
jz loc_103D55A  +
mov ecx edi +
call sub_103D399  +
push esi  +
mov ecx offset unk_108B074 +
mov [edi+18h] esi +
call sub_103D469  +
push ebx  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
mov esi [ebp+8] +
mov dword ptr [ebp-14h] 7 +
mov dword ptr [ebp-18h] offset off_100B560 +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-18h] +
push ecx  +
mov ecx eax +
call sub_1035687  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push esi  +
mov ecx edi +
mov dword ptr [ebp-18h] offset off_100B0C0 +
call sub_103D5AF  +
call sub_1002061  +
retn 4  +
push 3  +
pop esi  +
push 67h  +
jmp loc_103D53F  +
***
call sub_100208C  +
mov eax off_108A1D4 +
test eax eax +
jz loc_103D5E7  +
mov edx [ebp+8] +
mov dword ptr [ebp-14h] 7 +
mov dword ptr [ebp-18h] offset off_100B560 +
mov [ebp-10h] edx +
mov esi [eax] +
and dword ptr [ebp-4] 0 +
push edx  +
push dword ptr [ecx+18h]  +
mov ecx eax +
call dword ptr [esi+1Ch]  +
call sub_1002061  +
retn 4  +
***
push 2Ch  +
push ecx  +
lea eax [ebx+2C0h] +
push eax  +
call memset  +
add esp 0Ch +
push 0  +
call edi  +
mov [ebp-21Ch] eax +
fild  dword ptr [ebp-21Ch] +
fmul  ds:dbl_103D6B8 +
call _ftol2_sse  +
push 1  +
mov [ebp-224h] eax +
call edi  +
mov [ebp-21Ch] eax +
fild  dword ptr [ebp-21Ch] +
fmul  ds:dbl_103D6B8 +
call _ftol2_sse  +
push 0  +
mov [ebp-238h] eax +
call edi  +
mov [ebp-21Ch] eax +
fild  dword ptr [ebp-21Ch] +
fmul  ds:dbl_103D6B0 +
call _ftol2_sse  +
push 1  +
mov [ebx+2DCh] eax +
call edi  +
mov [ebp-21Ch] eax +
fild  dword ptr [ebp-21Ch] +
fmul  ds:dbl_103D6B0 +
call _ftol2_sse  +
mov ecx [ebx+2DCh] +
add ecx [ebp-224h] +
mov [ebx+2E0h] eax +
mov [ebx+2E4h] ecx +
mov ecx [ebp-238h] +
add eax ecx +
mov [ebx+2E8h] eax +
jmp loc_102C100  +
***
push 2  +
lea eax [ebp-264h] +
push eax  +
call ds:GetACP  +
push eax  +
call ds:TranslateCharsetInfo  +
test eax eax +
jz loc_1043271  +
mov eax [ebp-264h] +
mov [ebx+318h] eax +
jmp loc_102C2B8  +
***
push 5  +
call ds:GetSysColor  +
neg eax  +
sbb eax eax +
and eax 0FFFFFFE2h +
add eax 1947h +
jmp loc_1018957  +
***
test cx cx +
jz loc_103D72A  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_103C035  +
add eax 4 +
add edx 4 +
test cx cx +
jnz loc_103C029  +
xor eax eax +
jmp loc_103C03A  +
***
mov eax [esi] +
mov ecx [edi] +
mov [esi] ecx +
mov [edi] eax +
jmp loc_1017299  +
***
mov edx [eax] +
jmp loc_101B8AC  +
mov eax [eax] +
jmp loc_101B8BA  +
mov al 1 +
jmp loc_101B8CA  +
***
push edi  +
call ?SetPaneText@CStatusBar@@QAEHHPBGH@Z  +
jmp loc_1011C64  +
***
xor ecx ecx +
jmp loc_100CB13  +
push 0  +
lea ecx [ebp+var_C] +
call sub_104BD15  +
push offset dword_1082CC0  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
xor eax eax +
mov [edi+esi*2] ax +
jmp loc_1005CF9  +
***
test eax ebx +
jnz loc_101794D  +
push dword ptr [ebp+8]  +
or eax ebx +
push eax  +
push dword ptr [ebp-4]  +
mov ecx esi +
push edi  +
call ?SetPaneInfo@CStatusBar@@QAEXHIIH@Z  +
mov ecx esi +
cmp edi 5 +
jnz loc_103D7F1  +
call sub_104BBC7  +
jmp loc_101794D  +
***
push 0  +
mov byte ptr [ebp+0Fh] 1 +
push edi  +
jmp loc_103D85A  +
push dword ptr [ebp+8]  +
and eax 0FBFFFFFFh +
push eax  +
push dword ptr [ebp-4]  +
mov ecx esi +
push edi  +
call ?SetPaneInfo@CStatusBar@@QAEXHIIH@Z  +
mov eax edi +
sub eax 0 +
jz loc_103D850  +
dec eax  +
jz loc_103D846  +
dec eax  +
jz loc_103D83C  +
dec eax  +
jz loc_103D832  +
dec eax  +
dec eax  +
jnz loc_101794D  +
mov ecx esi +
call sub_104BE85  +
jmp loc_101794D  +
***
push dword ptr [esi+37Ch]  +
push 3  +
jmp loc_103D858  +
push dword ptr [esi+378h]  +
push 2  +
jmp loc_103D858  +
push dword ptr [esi+374h]  +
push 1  +
jmp loc_103D858  +
push dword ptr [esi+370h]  +
push 0  +
mov ecx esi +
call sub_1011C86  +
jmp loc_101794D  +
***
mov eax dword_108A1EC +
push 1  +
push 0  +
push dword ptr [eax+20h]  +
call ds:InvalidateRect  +
push 5  +
mov ecx esi +
call sub_1005C20  +
test eax eax +
jz loc_1017717  +
mov ecx esi +
call sub_104BBC7  +
mov ecx esi +
call sub_104BE85  +
jmp loc_1017717  +
***
mov esi dword_108A24C +
cmp esi ebx +
jz loc_1008B1B  +
push dword ptr [esi+40h]  +
push dword ptr [ebp+0Ch]  +
push 1  +
push eax  +
call sub_1056186  +
fstp  qword ptr [ebp-104h] +
push dword ptr [esi+40h]  +
push dword ptr [ebp+10h]  +
push ebx  +
push dword_108B1D0  +
call sub_1056186  +
fstp  qword ptr [ebp-0E4h] +
fld  qword ptr [ebp-104h] +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_C] +
mov esi offset a_2f +
push esi  +
lea eax [ebp-38h] +
push 14h  +
push eax  +
call sub_1005CB4  +
add esp 14h +
cmp eax ebx +
jl loc_1008B1B  +
fld  qword ptr [ebp-0E4h] +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_C] +
push esi  +
lea eax [ebp-60h] +
push 14h  +
push eax  +
call sub_1005CB4  +
add esp 14h +
cmp eax ebx +
jl loc_1008B1B  +
cmp dword_108B1D0 1 +
mov eax [ebp-0DCh] +
jnz loc_103D937  +
mov esi [eax+0ACh] +
jmp loc_1008A66  +
mov esi [eax+0B0h] +
jmp loc_1008A66  +
***
push [ebp+arg_4]  +
push edi  +
push 10h  +
push eax  +
call sub_101CFD9  +
jmp loc_101B8E7  +
***
mov eax [ebp+8] +
mov [ebp-10h] esp +
mov [ebp+8] eax +
push 0  +
inc eax  +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_101C265  +
mov [ebp-14h] eax +
mov eax offset loc_103D99B +
retn   +
mov edi [ebp-18h] +
mov esi [ebp+8] +
mov ebx [ebp-14h] +
jmp loc_101C233  +
***
mov ecx [ebp-18h] +
xor esi esi +
push esi  +
push 1  +
call sub_1014D01  +
push esi  +
push esi  +
call _CxxThrowException  +
int 3  +
***
pop ebp  +
retn 4  +
***
pop ebp  +
retn 4  +
***
call loc_106AE9B  +
jmp loc_101C1AE  +
cmp edi 10h +
jnb loc_101C1BD  +
mov eax [esi+14h] +
cmp edi eax +
jnb loc_103DA03  +
mov eax edi +
push eax  +
push 1  +
mov ecx esi +
call sub_1014D01  +
jmp loc_101C1C5  +
push edi  +
mov ecx esi +
call sub_1014D34  +
jmp loc_101C1C5  +
***
cmp dword ptr [esi+18h] 10h +
jb loc_103DA2A  +
mov eax [esi+4] +
jmp loc_103DA2D  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub edi eax +
push edi  +
push esi  +
mov ecx esi +
call sub_104C130  +
jmp loc_101C361  +
***
call loc_1058901  +
and [ebp+arg_8] 0 +
jmp loc_10186D2  +
mov eax [esi+8] +
mov ecx [ebp+arg_0] +
mov edx eax +
sub edx ecx +
sar edx 3 +
mov [ebp+arg_8] eax +
push esi  +
cmp edx edi +
jnb loc_103DAAA  +
mov ebx edi +
shl ebx 3 +
lea edx [ebx+ecx] +
push edx  +
push eax  +
push ecx  +
call sub_10183B6  +
mov eax [esi+8] +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx eax +
sub ecx [ebp+arg_0] +
sar ecx 3 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_10185DF  +
add [esi+8] ebx +
mov esi [esi+8] +
lea eax [ebp+var_8] +
push eax  +
sub esi ebx +
push esi  +
push [ebp+arg_0]  +
call sub_104BC30  +
add esp 0Ch +
jmp loc_1018734  +
push eax  +
mov ebx eax +
shl edi 3 +
push eax  +
sub ebx edi +
push ebx  +
call sub_10183B6  +
push [ebp+arg_8]  +
mov [esi+8] eax +
push ebx  +
push [ebp+arg_0]  +
call sub_104BF11  +
lea eax [ebp+var_8] +
push eax  +
mov eax [ebp+arg_0] +
add edi eax +
push edi  +
push eax  +
call sub_104BC30  +
add esp 18h +
jmp loc_1018734  +
***
cmp edi 1FFFFFFFh +
jbe loc_103DAED  +
call loc_1058901  +
push eax  +
push edi  +
call sub_100CAF0  +
mov [esi+4] eax +
mov [esi+8] eax +
lea eax [eax+edi*8] +
mov [esi+0Ch] eax +
mov al 1 +
jmp loc_100CB85  +
***
push dword ptr [esi+4]  +
push dword ptr [edi+8]  +
push dword ptr [edi+4]  +
call sub_104BF62  +
add esp 0Ch +
mov ecx edi +
call sub_100B9A1  +
mov ecx [esi+4] +
lea eax [ecx+eax*4] +
jmp loc_101881F  +
mov ebx [edi+4] +
mov ecx esi +
call sub_100B9A1  +
push dword ptr [esi+4]  +
lea eax [ebx+eax*4] +
push eax  +
push ebx  +
mov [ebp+arg_0] eax +
call sub_104BF62  +
mov eax [esi+8] +
mov edi [edi+8] +
add esp 0Ch +
push esi  +
push eax  +
push edi  +
push [ebp+arg_0]  +
jmp loc_101881A  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_10187FA  +
***
push eax  +
mov ecx esi +
call ?RemoveAt@CObList@@QAEXPAU__POSITION@@@Z  +
jmp loc_102172A  +
***
push 18h  +
pop eax  +
retn   +
***
mov dword ptr [edi] 140h +
mov dword ptr [ebx] 0F0h +
jmp loc_1019EBC  +
***
mov eax dword_108B28C +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebx] eax +
mov eax dword_108B290 +
cdq   +
sub eax edx +
sar eax 1 +
mov [edi] eax +
jmp loc_1019E56  +
***
mov esi [ebp-14h] +
mov ecx [ebp-14h] +
mov [ebp-18h] ecx +
test ecx ecx +
jz loc_103DBDB  +
call ?Delete@CException@@QAEXXZ  +
mov eax offset loc_102E67F +
retn   +
***
xor eax eax +
inc eax  +
retn   +
***
cmp edx 6Ch +
jnz loc_102F31A  +
jmp loc_1015A79  +
inc eax  +
shl eax cl +
lea edi [edi+eax*4] +
jmp loc_1015A92  +
cdq   +
xor eax edx +
sub eax edx +
mov [esi+14h] eax +
jmp loc_1015AC3  +
push 0  +
push 3F4h  +
push 804h  +
mov ecx offset unk_108AF60 +
call sub_101209D  +
jmp loc_1015B03  +
***
mov eax [ebx+4] +
push dword ptr [eax+30h]  +
push dword ptr [eax+2Ch]  +
lea eax [ebp+rc] +
push esi  +
push esi  +
push eax  +
call ds:SetRect  +
jmp loc_100D5F8  +
cmp [ebp+var_8] 0 +
jz loc_103DC4F  +
push [ebp+var_8]  +
call ds:DeleteObject  +
mov edi ds:DeleteDC +
test esi esi +
jz loc_103DC5C  +
push esi  +
call edi  +
cmp [ebp+arg_0] 0 +
jz loc_103DC67  +
push [ebp+arg_0]  +
call edi  +
call sub_1013351  +
push 0  +
call ds:MessageBeep  +
xor eax eax +
jmp loc_100D771  +
push 0  +
push dword ptr [eax+4]  +
push esi  +
call edi  +
push esi  +
mov esi ds:RealizePalette +
mov [ebp+var_C] eax +
call esi  +
mov eax [ebx+4] +
mov eax [eax+24h] +
push 0  +
push dword ptr [eax+4]  +
push [ebp+arg_0]  +
call edi  +
push [ebp+arg_0]  +
mov [ebp+var_10] eax +
call esi  +
mov esi [ebp+var_4] +
jmp loc_100D67F  +
push esi  +
push [ebp+var_C]  +
push [ebp+var_4]  +
call edi  +
jmp loc_100D6E0  +
push esi  +
push [ebp+var_10]  +
push [ebp+arg_0]  +
call edi  +
jmp loc_100D6E9  +
***
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Fh] +
call sub_102E656  +
jmp loc_103DCF6  +
push 30h  +
push 0E000h  +
push 8FBh  +
call sub_104CFEB  +
xor eax eax +
jmp loc_103598B  +
***
push edi  +
push ecx  +
call sub_1005D16  +
mov dword_108AF30 edi +
jmp loc_102F004  +
mov eax [esi+10h] +
dec eax  +
jz loc_103DD28  +
dec eax  +
jnz loc_102F026  +
mov [ebp+var_4] 1 +
jmp loc_102F026  +
mov [ebp+var_4] 2 +
jmp loc_102F026  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
xor eax eax +
jmp loc_102F0A4  +
***
push eax  +
call edi  +
mov [esi+44h] ebx +
jmp loc_101FDCC  +
***
cmp [ebp+arg_4] 2 +
jnz loc_103D141  +
jmp loc_103D02D  +
xor eax eax +
jmp loc_103D13A  +
push ebx  +
call sub_10123BE  +
jmp loc_103D042  +
push 28h  +
pop edx  +
cmp eax edx +
jnb loc_103DE2D  +
push 0Ah  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_474] +
stos   +
mov eax [ebp+var_10] +
mov [ebp+var_474] edx +
movzx ecx word ptr [eax+4] +
mov [ebp+var_470] ecx +
movzx ecx word ptr [eax+6] +
mov [ebp+var_46C] ecx +
mov cx [eax+8] +
mov [ebp+var_468] cx +
mov cx [eax+0Ah] +
and [ebp+var_464] 0 +
push eax  +
mov [ebp+var_466] cx +
call sub_104C3C5  +
movzx edi ax +
dec edi  +
js loc_103DE0F  +
mov ecx [ebp+var_10] +
mov eax edi +
imul eax eax +
lea ecx [eax+ecx+0Dh] +
mov dl [ecx-1] +
mov eax edi +
shl eax 2 +
mov [ebp+eax+var_44C] dl +
mov dl [ecx] +
mov [ebp+eax+var_44B] dl +
mov dl [ecx+1] +
dec edi  +
sub ecx 3 +
mov [ebp+eax+var_44A] dl +
mov [ebp+eax+var_449] 0 +
test edi edi +
jge loc_103DDDD  +
lea eax [ebp+var_474] +
push eax  +
mov [ebp+var_4] eax +
call sub_100AFAD  +
mov edi [ebp+var_1C] +
movzx eax ax +
add eax [ebp+var_474] +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
sub eax ebx +
add [ebp+arg_4] eax +
add edi eax +
cmp [ebp+var_14] 0 +
jz loc_103DE50  +
mov eax [ebp+arg_4] +
add eax 2Dh +
and eax 0FFFFFFE0h +
mov [ebp+var_C] 0Eh +
mov [ebp+arg_4] eax +
mov eax [esi] +
push 4  +
lea ecx [ebp+arg_4] +
push ecx  +
mov ecx esi +
call dword ptr [eax+40h]  +
jmp loc_103D087  +
mov edx [esi] +
sub eax edi +
push eax  +
lea eax [ebp+var_4C] +
push eax  +
mov ecx esi +
mov [ebp+var_4C] ebx +
mov [ebp+var_48] ebx +
mov [ebp+var_44] ebx +
mov [ebp+var_40] ebx +
mov [ebp+var_3C] ebx +
mov [ebp+var_38] ebx +
mov [ebp+var_34] ebx +
mov [ebp+var_30] ebx +
call dword ptr [edx+40h]  +
jmp loc_103D121  +
***
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi+4] edi +
jmp loc_1017B9F  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
cmp ebx edi +
jz loc_103DEB5  +
push dword ptr [esi+30h]  +
call ds:GlobalUnlock  +
xor eax eax +
jmp loc_1017CE9  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
jmp loc_103DEAC  +
mov eax [esi+4] +
push dword ptr [eax+0Ch]  +
call sub_10501CE  +
mov ecx [esi+4] +
mov [ecx+24h] eax +
jmp loc_1017C23  +
cmp dword_108B1A8 edi +
jz loc_103DF17  +
push edi  +
push dword ptr [ecx+4]  +
push dword ptr [eax+0Ch]  +
call ds:SelectPalette  +
mov ecx [esi+4] +
mov [ecx+28h] eax +
mov eax [esi+4] +
push dword ptr [eax+0Ch]  +
call ds:RealizePalette  +
mov eax [esi+4] +
mov eax [eax+24h] +
mov dword_108B1D4 eax +
jmp loc_1017C37  +
cmp ecx edi +
jz loc_1017C37  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov eax [esi+4] +
mov [eax+24h] edi +
mov eax [esi+4] +
mov [eax+28h] edi +
jmp loc_1017C37  +
push ebx  +
push ebx  +
push 15Ch  +
mov ecx esi +
call sub_104CB3C  +
jmp loc_1017C75  +
***
xor eax eax +
retn   +
***
mov ecx [ebp-20h] +
call ?Delete@CException@@QAEXXZ  +
mov eax offset loc_102FE13 +
retn   +
***
push esi  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_1030131  +
push esi  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_103013A  +
push 80004002h  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_1030165  +
mov eax [ebp+8] +
push dword ptr [ebp-10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_1030179  +
***
lea eax [ebp+var_1264] +
push eax  +
lea ecx [ebp+var_1278] +
call ??0CString@@QAE@PBG@Z  +
push 3Ah  +
lea ecx [ebp+var_1278] +
mov byte ptr [ebp+var_4] 1 +
call ?ReverseFind@CString@@QBEHG@Z  +
cmp eax 2 +
jl loc_103E260  +
push eax  +
push ebx  +
lea eax [ebp+var_129C] +
push eax  +
lea ecx [ebp+var_1278] +
call ?Mid@CString@@QBE?AV1@HH@Z  +
push eax  +
lea ecx [ebp+var_1278] +
mov byte ptr [ebp+var_4] 2 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp+var_129C] +
mov byte ptr [ebp+var_4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp+lpFileName] +
call ??0CString@@QAE@XZ  +
push [ebp+var_1278]  +
lea eax [ebp+lpFileName] +
push [ebp+var_1298]  +
mov byte ptr [ebp+var_4] 3 +
push offset aSS  +
push eax  +
call ?Format@CString@@QAAXPBGZZ  +
add esp 10h +
lea ecx [ebp+var_1284] +
call ??0CString@@QAE@XZ  +
push [ebp+var_1278]  +
lea eax [ebp+var_1284] +
push [ebp+var_1294]  +
mov byte ptr [ebp+var_4] 4 +
push offset aSS  +
push eax  +
call ?Format@CString@@QAAXPBGZZ  +
add esp 10h +
push ebx  +
push 8000000h  +
push 3  +
push ebx  +
push 1  +
push 80000000h  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_103E134  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_103E12E  +
and eax edi +
or eax esi +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
push ebx  +
push 8000080h  +
push 2  +
push ebx  +
push 1  +
push 40000000h  +
push [ebp+var_1284]  +
call ds:CreateFileW  +
mov [ebp+var_1270] eax +
cmp eax 0FFFFFFFFh +
jnz loc_103E16F  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_103E169  +
and eax edi +
or eax esi +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
mov [ebp+nNumberOfBytesToWrite] ebx +
push ebx  +
lea eax [ebp+nNumberOfBytesToWrite] +
push eax  +
push 1000h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hObject]  +
call ds:ReadFile  +
test eax eax +
jnz loc_103E1AD  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_103E1A7  +
and eax edi +
or eax esi +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
cmp [ebp+nNumberOfBytesToWrite] ebx +
jbe loc_103E20C  +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+nNumberOfBytesToWrite]  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+var_1270]  +
mov [ebp+NumberOfBytesWritten] ebx +
call ds:WriteFile  +
test eax eax +
jnz loc_103E1F4  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_103E1EE  +
and eax edi +
or eax esi +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
mov eax [ebp+NumberOfBytesWritten] +
cmp eax [ebp+nNumberOfBytesToWrite] +
jz loc_103E20C  +
push 8000FFFFh  +
call ?AfxThrowOleException@@YGXJ@Z  +
cmp [ebp+nNumberOfBytesToWrite] 1000h +
jz loc_103E175  +
push [ebp+hObject]  +
call ds:CloseHandle  +
push [ebp+var_1270]  +
or [ebp+hObject] 0FFFFFFFFh +
call ds:CloseHandle  +
or [ebp+var_1270] 0FFFFFFFFh +
lea ecx [ebp+var_1284] +
mov byte ptr [ebp+var_4] 3 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp+lpFileName] +
mov byte ptr [ebp+var_4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp+var_1278] +
mov byte ptr [ebp+var_4] bl +
call ??1CString@@QAE@XZ  +
jmp loc_102FEBD  +
***
test edx edx +
jnz loc_1017FCF  +
test eax eax +
jz loc_1017FC7  +
mov [ecx+10h] edx +
jmp loc_1017FCF  +
***
mov edx [ebp+arg_0] +
push edx  +
call sub_104D0D5  +
push eax  +
mov dword_108EE98 edx +
call sub_104D217  +
jmp loc_101B90C  +
***
mov edx [ebp+arg_0] +
push edx  +
call sub_104D0D5  +
push eax  +
mov dword_108EE94 edx +
call sub_104D315  +
jmp loc_101B928  +
***
mov eax [ebp-18h] +
mov esi [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [esi+4] +
xor ebx ebx +
cmp eax ebx +
jz loc_103E381  +
push eax  +
call sub_1006809  +
pop ecx  +
mov [esi+4] ebx +
call ?AfxThrowLastCleanup@@YGXXZ  +
push ebx  +
push ebx  +
call _CxxThrowException  +
int 3  +
***
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
and dword ptr [esi] 0 +
jmp loc_101E139  +
***
mov [ecx+8] eax +
jmp loc_100B29B  +
***
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_103E3B7  +
push 7  +
push [ebp+arg_0]  +
call ds:GetCurrentObject  +
push ebx  +
lea ecx [ebp+var_18] +
push ecx  +
push 18h  +
push eax  +
mov ebx 0FFh +
call ds:GetObjectW  +
test eax eax +
jz loc_103E3DA  +
mov cl [ebp+var_6] +
xor eax eax +
inc eax  +
shl eax cl +
dec eax  +
movzx ebx ax +
movzx ecx bx +
mov eax 10FF0000h +
or ecx eax +
mov [esi] ecx +
mov [edi] eax +
pop ebx  +
jmp loc_103871C  +
***
xor edx edx +
jmp loc_10360BA  +
***
mov dword ptr [ebp-4] 6 +
mov eax offset loc_103E419 +
retn   +
mov esi [ebp-14h] +
jmp loc_101F425  +
***
cmp [eax+4] edi +
jz loc_1035477  +
cmp eax edi +
jz loc_1035477  +
push esi  +
push [ebp+arg_4]  +
mov esi [ebp+arg_0] +
push eax  +
mov ecx esi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword ptr [esi+4]  +
mov edi eax +
call ds:RealizePalette  +
pop esi  +
jmp loc_1035477  +
***
mov eax [ebp+arg_24] +
mov ecx eax +
shr ecx 18h +
sub ecx ebx +
mov [ebp+var_2] 0FFh +
mov byte ptr [ebp-3] 0FFh +
mov [ebp+var_4] 0FFh +
mov [ebp+var_1] bl +
mov [ebp+var_6] bl +
mov [ebp-7] bl +
mov [ebp+var_8] bl +
mov [ebp+var_5] bl +
jz loc_103E481  +
dec ecx  +
dec ecx  +
jnz loc_1038219  +
mov ecx eax +
mov byte ptr [ebp+arg_14+2] al +
shr eax 10h +
mov byte ptr [ebp+arg_14] al +
shr ecx 8 +
lea eax [esi-1] +
cmp eax ebx +
mov byte ptr [ebp+arg_14+1] cl +
mov byte ptr [ebp+arg_14+3] bl +
jl loc_103E4B8  +
mov ecx dword ptr [ebp+eax*4+var_80C.rgbBlue] +
cmp ecx [ebp+arg_14] +
mov ecx dword ptr [ebp+var_4] +
jz loc_103E4AE  +
mov ecx dword ptr [ebp+var_8] +
dec eax  +
mov [ebp+eax*4+var_408] ecx +
jns loc_103E49C  +
lea eax [ebp+var_40C] +
push eax  +
push esi  +
mov esi ds:SetDIBColorTable +
push ebx  +
push dword ptr [edi+4]  +
call esi  +
push [ebp+arg_20]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push edi  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100988D  +
lea eax [ebp+var_80C] +
push eax  +
push [ebp+var_C]  +
push ebx  +
push dword ptr [edi+4]  +
call esi  +
xor eax eax +
inc eax  +
jmp loc_103821B  +
***
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ebp+arg_0.rgbBlue]  +
call sub_104F35F  +
jmp loc_1035F17  +
mov ebx dword ptr [ebp+arg_0.rgbBlue] +
push 8  +
call ds:GetStockObject  +
mov edi ds:SelectObject +
push eax  +
push dword ptr [ebx+0Ch]  +
call edi  +
push dword ptr [esi+0BCh]  +
mov [ebp+var_8] eax +
call ds:CreateSolidBrush  +
push eax  +
push dword ptr [ebx+0Ch]  +
mov [ebp+var_4] eax +
call edi  +
mov dword ptr [ebp+arg_0.rgbBlue] eax +
mov eax [esi+30h] +
add eax [ebp+arg_8] +
push eax  +
mov eax [esi+2Ch] +
add eax [ebp+arg_4] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ebx+0Ch]  +
call ds:Rectangle  +
push dword ptr [ebp+arg_0.rgbBlue]  +
push dword ptr [ebx+0Ch]  +
call edi  +
push [ebp+var_4]  +
call ds:DeleteObject  +
push [ebp+var_8]  +
push dword ptr [ebx+0Ch]  +
call edi  +
push dword ptr [esi+0B0h]  +
mov [ebp+arg_0.rgbBlue] 0 +
push dword ptr [esi+18h]  +
mov [ebp+arg_0.rgbGreen] 0 +
mov [ebp+arg_0.rgbRed] 0FFh +
mov [ebp+arg_0.rgbReserved] 1 +
call edi  +
push dword ptr [ebp+arg_0.rgbBlue]  +
mov [ebp+var_8] eax +
push dword ptr [esi+0B8h]  +
push dword ptr [esi+0B4h]  +
push 0  +
push 0  +
push dword ptr [esi+18h]  +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ebx+0Ch]  +
call ds:GdiAlphaBlend  +
push [ebp+var_8]  +
push dword ptr [esi+18h]  +
call edi  +
jmp loc_1035F15  +
push ebx  +
push [ebp+var_4]  +
mov ecx edi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
jmp loc_1035F15  +
***
xor edi edi +
inc edi  +
jmp loc_10382AB  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
jmp loc_10383AD  +
mov edi eax +
jmp loc_103834C  +
mov ecx [ebp+1Ch] +
push ebx  +
push dword ptr [ebp-10h]  +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
jmp loc_1038399  +
push ebx  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-30h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
jmp loc_10383AD  +
***
push [ebp+arg_0]  +
lea eax [esi+14h] +
push 220326h  +
push ebx  +
push ebx  +
push eax  +
push dword ptr [esi+30h]  +
lea eax [esi+34h] +
push dword ptr [esi+2Ch]  +
mov ecx esi +
push ebx  +
push ebx  +
push eax  +
call sub_1038232  +
jmp loc_103609C  +
***
cmp ecx eax +
jz loc_10076AD  +
cmp [ecx+48h] eax +
jz loc_10076AD  +
mov eax ebx +
jmp loc_10076B8  +
***
mov esi eax +
test esi esi +
jz loc_10075DF  +
push offset off_104A85C  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_103E6CA  +
mov esi [esi+48h] +
test esi esi +
jz loc_103E6CA  +
push offset off_104A610  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_103E6CA  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
add esi 40h +
push eax  +
mov ecx esi +
call sub_104F702  +
mov edi [ebp+var_4] +
xor eax eax +
cmp edi [ebp+var_8] +
setnz al  +
test eax eax +
jnz loc_103E6C4  +
mov ecx esi +
call ?GetWindowTextLengthW@CWnd@@QBEHXZ  +
xor ecx ecx +
cmp eax edi +
setnz cl  +
mov eax ecx +
pop edi  +
jmp loc_10075FA  +
mov eax off_108A1D4 +
jmp loc_10075DF  +
***
mov esi ds:SelectObject +
cmp dword_108AF10 ebx +
jz loc_103E73B  +
push dword_108AF5C  +
call ds:CreateSolidBrush  +
push eax  +
push dword ptr [ebp-2Ch]  +
mov [ebp-14h] eax +
call esi  +
mov [ebp+10h] eax +
mov eax [ebp-2Ch] +
push 8  +
mov [ebp+8] eax +
call ds:GetStockObject  +
push eax  +
push dword ptr [ebp+8]  +
call esi  +
push dword ptr [ebp+0Ch]  +
mov [ebp+8] eax +
push edi  +
push ebx  +
push ebx  +
push dword ptr [ebp-2Ch]  +
call ds:Rectangle  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-2Ch]  +
call esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-2Ch]  +
call esi  +
push dword ptr [ebp-14h]  +
call ds:DeleteObject  +
jmp loc_103E761  +
push 0CC0020h  +
push stru_108AF34.top  +
push stru_108AF34.left  +
push dword_108A20C  +
push dword ptr [ebp+0Ch]  +
push edi  +
push ebx  +
push ebx  +
push dword ptr [ebp-2Ch]  +
call ds:BitBlt  +
push dword_108AF50  +
mov [ebp+8] bl +
push dword_108AEB8  +
mov [ebp+9] bl +
mov byte ptr [ebp+0Ah] 0FFh +
mov byte ptr [ebp+0Bh] 1 +
call esi  +
push dword ptr [ebp+8]  +
mov [ebp+10h] eax +
push dword_108AF58  +
push dword_108AF54  +
push ebx  +
push ebx  +
push dword_108AEB8  +
push dword ptr [ebp+0Ch]  +
push edi  +
push ebx  +
push ebx  +
push dword ptr [ebp-2Ch]  +
call ds:GdiAlphaBlend  +
push dword ptr [ebp+10h]  +
push dword_108AEB8  +
call esi  +
jmp loc_103B922  +
push ebx  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-30h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
jmp loc_103B936  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
mov dword ptr [ebp-20h] offset off_1002208 +
call sub_1002407  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
call ??1CDC@@UAE@XZ  +
xor eax eax +
jmp loc_103B960  +
***
mov ecx edx +
jmp loc_10369BA  +
***
push eax  +
inc ebx  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
mov [ebp-14h] eax +
lea eax [ebp-0B0h] +
push eax  +
call ds:ReleaseStgMedium  +
jmp loc_103663B  +
lea eax [ebp-0B0h] +
push eax  +
push 10h  +
push 2  +
call sub_1036A33  +
cmp eax esi +
jz loc_103E88E  +
push eax  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
mov edi ds:GetObjectW +
lea ecx [ebp-88h] +
push ecx  +
push 18h  +
push dword ptr [eax+4]  +
mov [ebp-34h] eax +
call edi  +
test eax eax +
jz loc_103E88E  +
lea eax [ebp-108h] +
push eax  +
mov eax [ebp-34h] +
push 54h  +
push dword ptr [eax+4]  +
mov dword ptr [ebp-3Ch] 1 +
call edi  +
test eax eax +
jz loc_103E87E  +
mov eax [ebp-0D8h] +
mov [ebp-30h] eax +
mov eax [ebp-0D4h] +
mov [ebp-38h] eax +
cmp ebx esi +
jz loc_103E906  +
cmp [ebp-14h] esi +
jnz loc_103E906  +
mov [ebp-3Ch] esi +
lea eax [ebp-0B0h] +
push eax  +
push 20h  +
push 3  +
call sub_1036A33  +
mov [ebp-28h] eax +
cmp eax esi +
jz loc_10368C9  +
lea ecx [ebp-70h] +
call ??0CDC@@QAE@XZ  +
push esi  +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 2 +
call sub_1002292  +
test eax eax +
jz loc_103E8F1  +
mov eax [ebp-44h] +
push dword ptr [eax+40h]  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-80h] +
push eax  +
lea eax [ebp-84h] +
push eax  +
push dword ptr [ebp-6Ch]  +
push dword ptr [ebp-28h]  +
call sub_104F76A  +
test eax eax +
jz loc_103E8F1  +
mov dword ptr [ebp-48h] 1 +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 1 +
call ??1CDC@@UAE@XZ  +
cmp [ebp-48h] esi +
jz loc_10368C9  +
xor edi edi +
inc edi  +
jmp loc_10366AF  +
mov esi edi +
jmp loc_10368C9  +
mov [ebp-1Ch] esi +
mov [ebp-20h] ebx +
push esi  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 4 +
mov [ebp-3Ch] esi +
call sub_1002292  +
test eax eax +
jnz loc_103E94F  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
mov [ebp-20h] ebx +
call sub_1002407  +
jmp loc_10368B7  +
push dword ptr [ebp-34h]  +
lea ecx [ebp-58h] +
call sub_10022BD  +
mov [ebp-24h] eax +
cmp eax esi +
jnz loc_103E981  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
mov [ebp-20h] ebx +
call sub_1002407  +
jmp loc_103EC75  +
cmp [ebp-14h] esi +
jz loc_103E99E  +
push esi  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-58h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword ptr [ebp-54h]  +
mov [ebp-18h] eax +
call ds:RealizePalette  +
movzx eax word ptr [ebp-76h] +
push esi  +
push eax  +
movzx eax word ptr [ebp-78h] +
push eax  +
push dword ptr [ebp-80h]  +
lea ecx [ebp-20h] +
push dword ptr [ebp-84h]  +
call sub_1035483  +
test eax eax +
jnz loc_103E9CC  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
jmp loc_103E96D  +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-34h] eax +
mov byte ptr [ebp-4] 5 +
cmp eax esi +
jz loc_103E9E8  +
mov ecx eax +
call ??0CDC@@QAE@XZ  +
mov esi eax +
xor edi edi +
mov byte ptr [ebp-4] 4 +
cmp esi edi +
jnz loc_103EA14  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
mov [ebp-20h] ebx +
call sub_1002407  +
xor esi esi +
jmp loc_103EC75  +
push edi  +
mov ecx esi +
call sub_1002292  +
mov ecx esi +
test eax eax +
jnz loc_103EA37  +
mov eax [esi] +
push 1  +
call dword ptr [eax+4]  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
jmp loc_103E9FE  +
lea eax [ebp-20h] +
push eax  +
call sub_10022BD  +
mov [ebp-34h] eax +
cmp [ebp-14h] edi +
jz loc_103EA5F  +
push edi  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword ptr [esi+4]  +
mov [ebp-3Ch] eax +
call ds:RealizePalette  +
push 0CC0020h  +
push edi  +
push edi  +
push dword ptr [ebp-54h]  +
push dword ptr [ebp-80h]  +
push dword ptr [ebp-84h]  +
push edi  +
push edi  +
push dword ptr [esi+4]  +
call ds:BitBlt  +
cmp [ebp-3Ch] edi +
jz loc_103EA8D  +
push edi  +
push dword ptr [ebp-3Ch]  +
mov ecx esi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword ptr [ebp-34h]  +
mov ecx esi +
call sub_10022BD  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-58h] +
call sub_10022BD  +
push dword ptr [ebp-24h]  +
lea ecx [ebp-58h] +
call sub_10022BD  +
mov [ebp-24h] edi +
cmp [ebp-18h] edi +
jz loc_103EACE  +
push edi  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-58h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
mov [ebp-18h] edi +
cmp [ebp-30h] edi +
jnz loc_103EB14  +
cmp [ebp-38h] edi +
jnz loc_103EB14  +
mov esi ds:GetDeviceCaps +
push 0FEh  +
push 2710h  +
push 58h  +
push dword ptr [ebp-54h]  +
call esi  +
push eax  +
call ds:MulDiv  +
push 0FEh  +
push 2710h  +
push 5Ah  +
push dword ptr [ebp-54h]  +
mov [ebp-30h] eax +
call esi  +
push eax  +
call ds:MulDiv  +
mov [ebp-38h] eax +
lea ecx [ebp-58h] +
call ?DeleteDC@CDC@@QAEHXZ  +
push dword ptr [ebp-38h]  +
lea eax [ebp-0B4h] +
push dword ptr [ebp-30h]  +
push eax  +
push edi  +
push dword ptr [ebp-14h]  +
push edi  +
push edi  +
push dword ptr [ebp-1Ch]  +
call sub_102EDC2  +
lea ecx [ebp-20h] +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 3 +
mov [ebp-20h] ebx +
call sub_1002407  +
xor esi esi +
jmp loc_10366F9  +
lea ecx [ebp-98h] +
call ??0CDC@@QAE@XZ  +
mov edi [ebp-44h] +
mov eax [edi+40h] +
push dword ptr [eax+0Ch]  +
mov byte ptr [ebp-4] 6 +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
push eax  +
lea ecx [ebp-98h] +
call sub_1002292  +
test eax eax +
jz loc_103EC2B  +
mov [ebp-3Ch] esi +
mov [ebp-40h] ebx +
push dword ptr [ebp-80h]  +
mov eax [edi+40h] +
push dword ptr [ebp-84h]  +
mov byte ptr [ebp-4] 7 +
push dword ptr [eax+0Ch]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
push eax  +
lea ecx [ebp-40h] +
call sub_1008818  +
test eax eax +
jz loc_103EC1C  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-98h] +
call sub_10022BD  +
cmp [ebp-14h] esi +
jz loc_103EBCF  +
push esi  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-98h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
mov eax [ebp-84h] +
push dword ptr [ebp-94h]  +
mov [ebp-68h] eax +
mov eax [ebp-80h] +
mov [ebp-64h] eax +
lea eax [ebp-70h] +
push eax  +
push dword ptr [ebp-28h]  +
mov [ebp-70h] esi +
mov [ebp-6Ch] esi +
call sub_104F91F  +
lea ecx [ebp-98h] +
call ?DeleteDC@CDC@@QAEHXZ  +
push dword ptr [ebp-38h]  +
lea eax [ebp-34h] +
push dword ptr [ebp-30h]  +
push eax  +
push esi  +
push dword ptr [ebp-14h]  +
push esi  +
push esi  +
push dword ptr [ebp-3Ch]  +
call sub_102EDC2  +
mov [ebp-10h] eax +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 6 +
mov [ebp-40h] ebx +
call sub_1002407  +
lea ecx [ebp-98h] +
mov byte ptr [ebp-4] 3 +
call ??1CDC@@UAE@XZ  +
jmp loc_1036705  +
push esi  +
push eax  +
lea ecx [ebp-58h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword ptr [ebp-54h]  +
mov [ebp-18h] eax +
call ds:RealizePalette  +
jmp loc_10367BC  +
push edi  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-58h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
mov [ebp-18h] edi +
jmp loc_1036873  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
cmp [ebp-24h] esi +
jz loc_10368AE  +
push dword ptr [ebp-24h]  +
lea ecx [ebp-58h] +
call sub_10022BD  +
jmp loc_10368AE  +
push esi  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-58h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
jmp loc_10368B7  +
***
push dword ptr [esi+0Ch]  +
call ds:SelectPalette  +
jmp loc_103B6D6  +
***
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-10h] +
mov [ebp-4] ebx +
call ??0CString@@QAE@XZ  +
push 0E000h  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
call ?LoadStringW@CString@@QAEHI@Z  +
test eax eax +
jz loc_103EDD5  +
push 98Dh  +
lea ecx [ebp-10h] +
call ?LoadStringW@CString@@QAEHI@Z  +
test eax eax +
jz loc_103EDD5  +
push ebx  +
push dword ptr [ebp-14h]  +
mov ecx esi +
push dword ptr [ebp-10h]  +
call ?MessageBoxW@CWnd@@QAEHPBG0I@Z  +
lea ecx [ebp-10h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
jmp loc_103698E  +
***
push 0  +
push dword ptr [eax+4]  +
push dword ptr [esi+0Ch]  +
call ebx  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_4] eax +
call ds:RealizePalette  +
jmp loc_103738B  +
push 0  +
push [ebp+var_4]  +
push dword ptr [esi+0Ch]  +
call ebx  +
jmp loc_10373D7  +
***
mov dword_108AF30 edi +
jmp loc_101FE9E  +
push edi  +
push eax  +
push dword ptr [esi+0Ch]  +
call ds:SelectPalette  +
jmp loc_101FEBF  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
jmp loc_101FEF1  +
***
mov [eax] edx +
mov [eax+8] ecx +
jmp loc_103B1CB  +
mov [eax+4] edx +
mov [eax+0Ch] ecx +
jmp loc_103B1D9  +
***
pop ebp  +
retn 4  +
***
push 10h  +
jmp loc_103EE61  +
push 2  +
pop eax  +
jmp loc_100B020  +
***
xor eax eax +
jmp loc_100AFD9  +
***
mov edi ds:GetDeviceCaps +
push 0Eh  +
push dword ptr [ebp+8]  +
call edi  +
push 0Ch  +
push dword ptr [ebp+8]  +
mov ebx eax +
call edi  +
imul ebx eax +
cmp ebx 4 +
ja loc_103EEDB  +
push 1  +
push esi  +
lea edi [esi+28h] +
call sub_100AFE2  +
movzx ebx ax +
jmp loc_103EECD  +
movzx esi byte ptr [edi] +
movzx eax byte ptr [edi+1] +
shl esi 8 +
or esi eax +
movzx eax byte ptr [edi+2] +
shl esi 8 +
or esi eax +
push esi  +
push dword ptr [ebp+8]  +
call ds:GetNearestColor  +
cmp eax esi +
jnz loc_103EEDB  +
dec ebx  +
add edi 4 +
test ebx ebx +
jg loc_103EEA6  +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
jmp loc_102CB22  +
xor eax eax +
jmp loc_103EED4  +
***
xor eax eax +
pop ebp  +
retn 8  +
***
push edi  +
push 0  +
mov ecx esi +
call ?NotifyAllItems@COleServerDoc@@IAEXW4OLE_NOTIFICATION@@K@Z  +
jmp loc_100D305  +
***
inc [ebp+var_C]  +
inc [ebp+var_8]  +
jmp loc_1005D98  +
***
mov eax [eax+4] +
test eax eax +
jz loc_100D1AC  +
push 0  +
push eax  +
push dword_108A20C  +
call ebx  +
push dword_108A20C  +
mov [ebp+arg_4] eax +
call ds:RealizePalette  +
jmp loc_100D1AC  +
push 0  +
push [ebp+arg_4]  +
push dword_108A20C  +
call ebx  +
jmp loc_100D1E1  +
***
push 0  +
push ebx  +
push dword_108A20C  +
call ds:SelectPalette  +
jmp loc_1035441  +
***
mov eax [eax+4] +
cmp eax ebx +
jz loc_102E5B9  +
push ebx  +
push eax  +
push dword_108A20C  +
call edi  +
push dword_108A20C  +
mov [ebp+arg_0] eax +
call ds:RealizePalette  +
jmp loc_102E5B9  +
push ebx  +
push [ebp+arg_0]  +
push dword_108A20C  +
call edi  +
jmp loc_102E5E0  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-2Ch] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
jmp loc_1036B4F  +
***
push edi  +
push esi  +
push dword ptr [ebp+8]  +
push 4  +
push esi  +
push dword ptr [ebp-28h]  +
call ds:CreateDIBitmap  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
mov esi eax +
call ??1CClientDC@@UAE@XZ  +
mov eax esi +
jmp loc_102CAED  +
push dword ptr [ebp+0Ch]  +
call ds:DeleteObject  +
jmp loc_102CAF5  +
***
mov eax [ebp-2Ch] +
mov [ebp-20h] eax +
mov eax offset loc_103F3B1 +
retn   +
mov esi [ebp-28h] +
mov ebx [ebp-1Ch] +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
test esi esi +
jz loc_103F3D8  +
push ebx  +
push esi  +
call sub_105006C  +
test eax eax +
jnz loc_103F3DA  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
xor esi esi +
push ebx  +
call sub_1006809  +
pop ecx  +
mov eax esi +
jmp loc_1036BFD  +
***
mov eax [ebp-1Ch] +
push 1  +
mov ecx offset unk_108AF60 +
mov [ebp-28h] eax +
call sub_105615F  +
mov eax offset loc_103F4BB +
retn   +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
jmp loc_103BA7D  +
***
push edi  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
jmp loc_103BA70  +
***
cmp dword_108AF08 edi +
jz loc_1035E98  +
jmp loc_1009FB7  +
and dword_108AEFC 0 +
push offset rcSrc2  +
lea eax [ebp+rcSrc1] +
push eax  +
push eax  +
call ds:UnionRect  +
jmp loc_1035E1D  +
mov ecx esi +
call sub_104EF05  +
jmp loc_1035E6E  +
***
xor eax eax +
jmp loc_1035AE3  +
call ds:DeleteObject  +
jmp loc_103F512  +
mov eax [eax+4] +
test eax eax +
jz loc_10359FE  +
push 0  +
push eax  +
push ebx  +
call ds:SelectPalette  +
push ebx  +
mov [ebp+arg_0] eax +
call ds:RealizePalette  +
jmp loc_10359FE  +
push 0  +
push [ebp+arg_0]  +
push ebx  +
call ds:SelectPalette  +
jmp loc_1035A62  +
***
test esi esi +
jl loc_1034D98  +
test edi edi +
jl loc_1034D98  +
test ebx ebx +
jl loc_1034D98  +
cmp [ebp+arg_24] 0 +
jl loc_1034D98  +
push 42h  +
push edi  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:PatBlt  +
push 0EE0086h  +
jmp loc_1034D9D  +
***
mov eax [ebp-50h] +
mov [ebp-24h] eax +
mov dword ptr [ebp-4] 3 +
mov eax offset loc_103F648 +
retn   +
mov byte ptr [ebp-4] 2 +
call ?AfxTryCleanup@@YGXXZ  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ??1CDC@@UAE@XZ  +
mov byte ptr [ebp-4] 0 +
***
lea ecx [ebp-4Ch] +
call ??1CClientDC@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_102DCC1  +
xor eax eax +
jmp loc_1017E96  +
***
cmp dword_108A21C eax +
jz loc_1006730  +
mov ecx off_108A1D4 +
cmp [ecx+8] eax +
jz loc_1006730  +
push dword ptr [ebp-14h]  +
mov ecx esi +
push dword ptr [ebp-18h]  +
call sub_10354F7  +
jmp loc_1006730  +
***
push [ebp+arg_14]  +
push 1  +
push 0  +
call ds:CreatePen  +
mov edi eax +
test edi edi +
jz loc_1037F0D  +
push edi  +
push ebx  +
call esi  +
push 0  +
push [ebp+var_C]  +
mov [ebp+arg_0] eax +
push [ebp+var_10]  +
push ebx  +
call ds:MoveToEx  +
push [ebp+var_8]  +
push [ebp+var_4]  +
push ebx  +
call ds:LineTo  +
push [ebp+arg_14]  +
push [ebp+var_8]  +
push [ebp+var_4]  +
push ebx  +
call ds:SetPixel  +
push [ebp+arg_0]  +
push ebx  +
call esi  +
push edi  +
call ds:DeleteObject  +
jmp loc_1037F0D  +
***
mov ecx off_108A1D8 +
mov eax [ecx] +
pop edi  +
pop esi  +
jmp dword ptr [eax+0A0h]  +
push edi  +
mov dword_108A218 edi +
call sub_1009E55  +
jmp loc_1009E0A  +
pop edi  +
pop esi  +
retn   +
***
xor eax eax +
retn   +
***
lea eax [ebp+var_18] +
push 2  +
push eax  +
mov [ebp+var_10] 60h +
mov [ebp+var_C] 90h +
mov [ebp+var_18] 2433h +
mov [ebp+var_14] 2434h +
lea eax [ebp+var_10] +
jmp loc_1037DE1  +
***
mov al byte_108BC08 +
cmp al 4 +
jnb loc_103F767  +
cmp al bl +
jnz loc_1034F2C  +
mov edx dword_108BBF4 +
mov esi 40000000h +
and edx esi +
xor eax eax +
or eax edx +
jz loc_1034F31  +
mov edx dword_108BBFC +
mov eax edx +
and eax esi +
cmp ebx dword_108BBF8 +
jnz loc_1034F31  +
cmp eax edx +
jnz loc_1034F31  +
push dword ptr [ecx+40h]  +
push offset dword_104A0A0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D97  +
jmp loc_1034F31  +
mov eax dword_108A1CC +
cmp eax 87654321h +
jz loc_1034F72  +
jmp loc_1034F80  +
mov eax dword_108A1C8 +
jmp loc_1034F80  +
push ebx  +
push eax  +
mov ecx edi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword ptr [edi+4]  +
mov [ebp-10h] eax +
call ds:RealizePalette  +
jmp loc_1034F90  +
or ecx 200h +
jmp loc_1034FDD  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
jmp loc_1035013  +
push ebx  +
push dword ptr [ebp-10h]  +
mov ecx edi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
jmp loc_103501C  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_103F830  +
cmp al bl +
jnz loc_1035040  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_1035040  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax esi +
cmp ebx dword_108BBF8 +
jnz loc_1035040  +
cmp eax ecx +
jnz loc_1035040  +
push offset dword_104A0B0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
jmp loc_1035040  +
***
mov [ebp+8] ecx +
jmp loc_103B203  +
***
mov ecx offset unk_108AEA0 +
call sub_104EF05  +
jmp loc_1035BE3  +
***
mov [ebp+rc1.left] eax +
jmp loc_103B32D  +
mov [ebp+rc1.top] eax +
jmp loc_103B336  +
mov [ebp+rc1.right] ecx +
jmp loc_103B348  +
mov [ebp+rc1.bottom] eax +
jmp loc_103B354  +
***
mov [ebp+var_18] ecx +
mov edi eax +
jmp loc_103B45A  +
mov [ebp+var_14] edx +
mov ecx eax +
jmp loc_103B46D  +
mov [ebp+var_18] esi +
jmp loc_103B476  +
mov [ebp+var_14] esi +
jmp loc_103B47F  +
mov edi edx +
jmp loc_103B491  +
mov ecx edx +
jmp loc_103B49D  +
mov ecx offset unk_108AEA0 +
call sub_104EE2F  +
push esi  +
mov dword_108AF0C esi +
mov dword_108AF08 esi +
mov dword_108A218 esi +
call sub_1009E55  +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax+40h]  +
call sub_1005D16  +
mov dword_108AF30 esi +
jmp loc_103B4D6  +
cmp [ebx+18h] esi +
jnz loc_103B4EB  +
mov eax [ebx+10h] +
mov ecx [ebp+arg_0] +
mov [ebp+var_8] eax +
mov eax [ebx+14h] +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
call sub_1051DB8  +
jmp loc_103B4EB  +
***
call _ftol2_sse  +
mov [ebp+var_C] eax +
jmp loc_1034A8F  +
call _ftol2_sse  +
mov [ebp+var_8] eax +
jmp loc_1034AA6  +
neg ecx  +
jmp loc_1034B10  +
neg eax  +
jmp loc_1034B2A  +
***
push 0  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
jmp loc_1038699  +
mov rcDst.left eax +
jmp loc_10380A9  +
mov rcDst.top ebx +
jmp loc_10380C6  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
lea ecx [ebp-5Ch] +
mov byte ptr [ebp-4] 0 +
call ??1CDC@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
call sub_102DCC1  +
jmp loc_10380E3  +
***
call loc_1058901  +
and [ebp+arg_8] 0 +
jmp loc_1013C7D  +
mov eax [esi+8] +
mov ecx [ebp+arg_0] +
mov edx eax +
sub edx ecx +
sar edx 2 +
mov [ebp+arg_8] eax +
push esi  +
cmp edx edi +
jnb loc_103FA24  +
mov ebx edi +
shl ebx 2 +
lea edx [ebx+ecx] +
push edx  +
push eax  +
push ecx  +
call sub_1013CEE  +
mov eax [esi+8] +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx eax +
sub ecx [ebp+arg_0] +
sar ecx 2 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_1013DF9  +
add [esi+8] ebx +
mov esi [esi+8] +
lea eax [ebp+var_4] +
push eax  +
sub esi ebx +
push esi  +
push [ebp+arg_0]  +
call sub_107271A  +
add esp 0Ch +
jmp loc_1013CE2  +
push eax  +
mov ebx eax +
shl edi 2 +
push eax  +
sub ebx edi +
push ebx  +
call sub_1013CEE  +
push [ebp+arg_8]  +
mov [esi+8] eax +
push ebx  +
push [ebp+arg_0]  +
call sub_104BEE5  +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_0] +
add edi eax +
push edi  +
push eax  +
call sub_107271A  +
add esp 18h +
jmp loc_1013CE2  +
***
mov esi eax +
test esi esi +
jz loc_100624C  +
push offset off_104A85C  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_100624C  +
mov esi [esi+48h] +
test esi esi +
jz loc_100624C  +
push offset off_104A610  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_100624C  +
mov eax esi +
pop esi  +
retn   +
***
mov eax [eax+4] +
test eax eax +
jz loc_10353D4  +
push [ebp+arg_4]  +
push eax  +
push [ebp+arg_0]  +
call ds:SelectPalette  +
push [ebp+arg_0]  +
mov esi eax +
call ds:RealizePalette  +
jmp loc_10353D4  +
***
sub eax 5 +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fdiv  qword ptr [esi+50h] +
fisub  dword ptr [esi+58h] +
fadd st st(1) +
call _ftol2_sse  +
mov [edi] eax +
mov eax [edi+4] +
sub eax 5 +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fdiv  qword ptr [esi+50h] +
fisub  dword ptr [esi+5Ch] +
faddp st(1) st +
jmp loc_10083E5  +
***
fild  dword ptr [edi] +
fdiv  qword ptr [esi+50h] +
fadd st st(1) +
call _ftol2_sse  +
mov [edi] eax +
add edi 4 +
fild  dword ptr [edi] +
fdiv  qword ptr [esi+50h] +
faddp st(1) st +
jmp loc_100A8C6  +
***
push stru_108A338.top  +
mov ecx offset unk_108AEA0 +
push stru_108A338.left  +
push [ebp+var_4]  +
call sub_104F35F  +
jmp loc_1036D71  +
push dword_108A224  +
mov ecx offset unk_108AEA0 +
push stru_108A338.top  +
push stru_108A338.left  +
push [ebp+var_4]  +
call sub_104EE43  +
jmp loc_1036D71  +
fdiv  qword ptr [esi+50h] +
call _ftol2_sse  +
push eax  +
push eax  +
push offset stru_108A338  +
call ds:InflateRect  +
jmp loc_10355DA  +
lea eax [ecx+ebx+0Ah] +
mov stru_108A338.right eax +
lea eax [edx+ebx+0Ah] +
mov stru_108A338.bottom eax +
jmp loc_10355DA  +
***
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_106CAD2  +
add esp 14h +
pop esi  +
retn   +
***
mov eax [ebp+arg_4] +
jmp loc_1030554  +
mov eax [ebp+arg_8] +
jmp loc_1030554  +
***
push 0  +
push [ebp+wParam]  +
push 111h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
xor eax eax +
inc eax  +
jmp loc_1036A1D  +
***
push ebx  +
push 2  +
push 114h  +
jmp loc_103FBEE  +
push ebx  +
push 2  +
push 115h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
jmp loc_100665A  +
***
push ebx  +
push 3  +
jmp loc_103FBDF  +
***
push ebx  +
push 3  +
jmp loc_103FBE9  +
***
mov eax [ebx+40h] +
mov ecx [eax+30h] +
mov eax [eax+2Ch] +
push ecx  +
push eax  +
push edi  +
push edi  +
lea eax [ebp-2Ch] +
push eax  +
call ds:SetRect  +
jmp loc_10099AC  +
cmp dword_108B180 edi +
jz loc_10099AC  +
lea ecx [ebp-1Ch] +
push ecx  +
push dword ptr [eax+20h]  +
call ds:GetClientRect  +
mov eax [ebx+58h] +
mov edi [ebx+5Ch] +
cdq   +
mov esi eax +
xor esi edx +
mov eax edi +
sub esi edx +
push 5  +
pop ecx  +
cdq   +
mov edi eax +
push ecx  +
xor edi edx +
push ecx  +
lea eax [ebp-1Ch] +
sub edi edx +
push eax  +
sub esi ecx +
sub edi ecx +
call ds:InflateRect  +
mov edx [ebp-14h] +
sub edx [ebp-1Ch] +
mov eax [ebx+40h] +
mov ecx [eax+2Ch] +
add edx esi +
cmp edx ecx +
jle loc_103FC7E  +
sub ecx [ebp-14h] +
add ecx [ebp-1Ch] +
mov esi ecx +
mov ecx [ebp-10h] +
sub ecx [ebp-18h] +
mov eax [eax+30h] +
add ecx edi +
cmp ecx eax +
jle loc_103FC95  +
sub eax [ebp-10h] +
add eax [ebp-18h] +
mov edi eax +
sub edi [ebp-18h] +
sub esi [ebp-1Ch] +
push edi  +
push esi  +
lea eax [ebp-1Ch] +
push eax  +
call ds:OffsetRect  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call ds:UnionRect  +
xor edi edi +
jmp loc_10099AC  +
***
push 3  +
jmp loc_103FCC6  +
push 2  +
pop ebx  +
jmp loc_103078B  +
***
cmp [eax+4] edi +
jz loc_100937A  +
push esi  +
push [ebp+arg_4]  +
mov esi [ebp+arg_0] +
push eax  +
mov ecx esi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword ptr [esi+4]  +
mov edi eax +
call ds:RealizePalette  +
pop esi  +
jmp loc_100937A  +
***
fild  [ebp+var_8] +
fdiv  qword ptr [esi+50h] +
fadd st st(1) +
call _ftol2_sse  +
fild  [ebp+var_C] +
fdiv  qword ptr [esi+50h] +
faddp st(1) st +
jmp loc_100FCF1  +
mov ecx eax +
call sub_1060523  +
jmp loc_100FD8D  +
***
mov ecx ebx +
call sub_105150A  +
pop edi  +
mov dword_108A240 1 +
pop ebx  +
retn   +
xor ecx ecx +
push ecx  +
xor eax eax +
push eax  +
push edi  +
push 400h  +
mov ecx ebx +
call sub_100A640  +
push 7F16h  +
push edi  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
mov ecx off_108A1D4 +
mov eax [ecx] +
call dword ptr [eax+84h]  +
test eax eax +
jz loc_103FD6E  +
mov ecx ebx +
call sub_1051535  +
mov dword_108A240 1 +
jmp loc_103D31F  +
push 2  +
call esi  +
jmp loc_103D34C  +
***
inc dword ptr [edi+8]  +
inc dword ptr [edi+0Ch]  +
jmp loc_100842D  +
***
mov ecx esi +
call sub_103D2A7  +
jmp loc_1009C35  +
***
mov eax [ebp-2Ch] +
push 1  +
mov ecx offset unk_108AF60 +
mov [ebp-1Ch] eax +
call sub_105615F  +
mov eax offset loc_103FE5B +
retn   +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
jmp loc_103658C  +
***
push edi  +
push dword ptr [ebp-28h]  +
mov ecx esi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
jmp loc_1036534  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
jmp loc_103658C  +
***
mov eax [eax+0ECh] +
mov esi [eax+4] +
test esi esi +
jz loc_1036C3E  +
mov eax [esi+38h] +
imul eax [esi+34h] +
mov [ebp+var_10] 1 +
cmp eax 8 +
jz loc_103FEB5  +
mov eax edi +
jmp loc_1036C41  +
and [ebp+var_C] 0 +
push ebx  +
mov ebx dword_108B1D4 +
test ebx ebx +
jz loc_104003C  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
push ebx  +
call sub_10503D3  +
mov edi eax +
xor eax eax +
cmp edi eax +
jz loc_103FEF7  +
xor ecx ecx +
inc ecx  +
mov [ebp+var_C] ecx +
cmp [ebp+var_14] eax +
jnz loc_103FEFC  +
mov [ebp+var_10] eax +
mov eax [edi] +
push ecx  +
mov ecx edi +
call dword ptr [eax+4]  +
and [ebp+var_C] 0 +
jmp loc_103FEFA  +
mov [ebp+var_10] eax +
mov edi ebx +
mov ebx [ebp+arg_0] +
push 1  +
push ebx  +
call sub_100AFE2  +
cmp dword ptr [ebx] 28h +
movzx eax ax +
mov [ebp+var_4] eax +
mov eax 300h +
mov [ebp+var_418] ax +
lea eax [ebp+var_414] +
push eax  +
push 100h  +
push 0  +
push dword ptr [edi+4]  +
sbb ebx ebx +
inc ebx  +
call ds:GetPaletteEntries  +
mov [ebp+var_416] ax +
lea ecx [ebp+var_414] +
push ecx  +
movzx eax ax +
push eax  +
push 0  +
push dword ptr [edi+4]  +
call ds:GetPaletteEntries  +
mov eax [ebp+var_4] +
test eax eax +
jle loc_104001E  +
mov ecx [ebp+arg_0] +
lea edx [ecx+0Dh] +
add ecx 29h +
mov [ebp+var_8] edx +
mov [ebp+arg_0] ecx +
mov [ebp+var_4] eax +
jmp loc_103FF78  +
mov edx [ebp+var_8] +
mov ecx [ebp+arg_0] +
test ebx ebx +
jz loc_103FF93  +
movzx eax byte ptr [ecx-1] +
movzx edx byte ptr [ecx] +
movzx ecx byte ptr [ecx+1] +
or eax 200h +
shl eax 8 +
or eax edx +
jmp loc_103FFA8  +
movzx eax byte ptr [edx-1] +
movzx ecx byte ptr [edx] +
or eax 200h +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [edx+1] +
shl eax 8 +
or eax ecx +
push eax  +
mov ecx edi +
call sub_104D1A8  +
test ebx ebx +
jz loc_103FFE3  +
mov ecx eax +
mov eax [ebp+arg_0] +
shl ecx 2 +
mov dl [ebp+ecx+var_414.rgbBlue] +
mov [eax+1] dl +
mov dl [ebp+ecx+var_414.rgbGreen] +
mov cl [ebp+ecx+var_414.rgbRed] +
mov [eax-1] cl +
mov ecx [ebp+var_8] +
mov [eax] dl +
jmp loc_1040009  +
mov ecx [ebp+var_8] +
shl eax 2 +
mov dl [ebp+eax+var_414.rgbBlue] +
mov [ecx+1] dl +
mov dl [ebp+eax+var_414.rgbGreen] +
mov al [ebp+eax+var_414.rgbRed] +
mov [ecx-1] al +
mov eax [ebp+arg_0] +
mov [ecx] dl +
add eax 4 +
add ecx 3 +
dec [ebp+var_4]  +
mov [ebp+arg_0] eax +
mov [ebp+var_8] ecx +
jnz loc_103FF72  +
cmp [ebp+var_10] 0 +
jnz loc_104003C  +
cmp [ebp+var_C] 0 +
jz loc_10400F9  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax+4]  +
jmp loc_10400F9  +
mov eax [esi+28h] +
mov ebx ds:SelectPalette +
test eax eax +
jz loc_1040055  +
push 0  +
push eax  +
push dword ptr [esi+0Ch]  +
call ebx  +
and dword ptr [esi+28h] 0 +
mov ecx [esi+24h] +
test ecx ecx +
jz loc_1040063  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov [esi+24h] edi +
test edi edi +
jz loc_104006D  +
mov edi [edi+4] +
push 0  +
push edi  +
push dword ptr [esi+0Ch]  +
call ebx  +
push dword ptr [esi+0Ch]  +
mov [esi+28h] eax +
call ds:RealizePalette  +
push 0  +
push esi  +
call sub_1005D16  +
mov eax [esi+24h] +
lea ecx [ebp+var_414] +
push ecx  +
mov edi 100h +
push edi  +
push 0  +
mov dword_108B1D4 eax +
push dword ptr [eax+4]  +
call ds:GetPaletteEntries  +
xor edx edx +
mov [ebp+arg_0] eax +
test eax eax +
jle loc_10400E0  +
cmp edx edi +
jge loc_10400E0  +
lea ecx [ebp+edx*4+var_414] +
movzx eax byte ptr [ecx] +
movzx ebx byte ptr [ecx+1] +
shl eax 8 +
or eax ebx +
movzx ebx [ebp+edx*4+var_414.rgbRed] +
shl eax 8 +
or eax ebx +
mov [ecx] eax +
mov eax [ebp+arg_0] +
inc edx  +
cmp edx eax +
jl loc_10400B2  +
cmp eax edi +
jnb loc_10400E6  +
mov edi eax +
lea eax [ebp+var_414] +
push eax  +
push edi  +
push 0  +
push dword ptr [esi+0Ch]  +
call ds:SetDIBColorTable  +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
xor eax eax +
pop ebx  +
jmp loc_1036C41  +
***
mov eax [ebp+arg_0] +
inc dword ptr [ebx]  +
inc dword ptr [eax]  +
jmp loc_10351CE  +
***
cmp dword ptr [ebp+10h] 0FFFFFFFFh +
jnz loc_10302C6  +
push esi  +
mov esi off_108A1D4 +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_104019E  +
mov eax [esi] +
push 1  +
mov ecx esi +
mov [ebp-8] edi +
mov [ebp-4] edi +
call dword ptr [eax+68h]  +
test al al +
jnz loc_1040174  +
call ds:GetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp eax ebx +
jz loc_1040164  +
cmp dword_108A24C ebx +
jnz loc_1040164  +
mov eax dword_108AF30 +
cmp eax [ebx+40h] +
jz loc_1040174  +
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 259h +
jz loc_1040193  +
jmp loc_104019E  +
mov eax [esi] +
lea ecx [ebp-8] +
push ecx  +
mov ecx esi +
call dword ptr [eax+64h]  +
test al al +
jz loc_104019E  +
cmp [ebp-8] edi +
jge loc_104018B  +
mov [ebp-8] edi +
cmp [ebp-4] edi +
jge loc_1040193  +
mov [ebp-4] edi +
lea eax [ebp-8] +
push eax  +
mov ecx ebx +
call sub_1051DB8  +
pop edi  +
pop esi  +
jmp loc_10302C6  +
***
xor ecx ecx +
jmp loc_10191E6  +
push 0  +
lea ecx [ebp+var_C] +
call sub_104BD15  +
push offset dword_1082CC0  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
mov eax [eax] +
jmp loc_100D034  +
***
lea eax [ebp+Rect] +
push eax  +
push esi  +
call sub_100F9BF  +
push [ebp+var_8]  +
push dword ptr [esi+4]  +
call ds:RestoreDC  +
jmp loc_100F9B3  +
***
xor edx edx +
jmp loc_101074B  +
mov edx eax +
jmp loc_101074B  +
xor eax eax +
jmp loc_1010766  +
mov eax ecx +
jmp loc_1010766  +
***
push esi  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
jmp loc_100856E  +
mov eax [ebx] +
push 0Ah  +
mov ecx ebx +
call dword ptr [eax+68h]  +
movzx esi al +
neg esi  +
sbb esi esi +
and esi 0FFFFFFD0h +
add esi 90h +
jmp loc_103A066  +
***
push esi  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
jmp loc_103043E  +
inc dword ptr [ebp-14h]  +
inc dword ptr [ebp-10h]  +
jmp loc_103B5B2  +
***
push 1  +
push eax  +
push ecx  +
lea ecx [ebp-3Ch] +
call sub_1035483  +
jmp loc_1009537  +
***
lea ecx [ebp-2Ch] +
lea ecx [ebp-2Ch] +
call sub_105615F  +
jmp loc_100985B  +
***
push ecx  +
push ecx  +
fstp  qword ptr [esp] +
push 40h  +
fld  [ebp+arg_0] +
fmul  ds:dbl_104A418 +
call _ftol2_sse  +
push eax  +
mov ecx edi +
call sub_1060EAC  +
jmp loc_1034CF6  +
***
test ecx ecx +
jz loc_1009CF8  +
call sub_10303DC  +
jmp loc_1009CF8  +
***
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp+8]  +
call sub_10524D4  +
jmp loc_100A79E  +
push eax  +
call sub_1005C6C  +
jmp loc_103611E  +
lea eax [ebp-24h] +
push eax  +
mov ecx ebx +
call sub_1051DB8  +
jmp loc_100A79E  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10536BA  +
jmp loc_100A79E  +
push eax  +
call ds:SetCursor  +
cmp dword ptr [ebp+8] 201h +
jz loc_104063C  +
cmp dword ptr [ebp+8] 203h +
jnz loc_100A79E  +
push dword ptr [ebx+20h]  +
call ds:SetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 1  +
push 1  +
mov ecx ebx +
call sub_10522B4  +
mov esi offset stru_108AF34 +
lea edi [ebp-2Ch] +
movs   +
movs   +
movs   +
lea eax [ebp-2Ch] +
push eax  +
mov ecx ebx +
movs   +
call sub_1008309  +
push 1Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+8] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_104068E  +
lea ecx [ebp-2Ch] +
push ecx  +
push ebx  +
mov ecx eax +
call sub_105E34B  +
jmp loc_1040690  +
xor eax eax +
mov dword_108CF00 eax +
mov eax [ebp-10h] +
mov dword_108EEB4 eax +
jmp loc_100A79E  +
cmp dword_108AF30 esi +
jnz loc_103D1D5  +
call sub_10049FD  +
jmp loc_103D1D5  +
xor esi esi +
cmp dword_108A24C ebx +
jnz loc_10406EA  +
push edi  +
push dword ptr [ebp-18h]  +
lea eax [ebp-4Ch] +
push dword ptr [ebp-1Ch]  +
push eax  +
call sub_10361D9  +
mov esi eax +
cmp esi 3 +
jl loc_10406EA  +
cmp esi 4 +
jle loc_10406E8  +
cmp esi 6 +
jle loc_10406EA  +
cmp esi 9 +
jg loc_10406EA  +
xor esi esi +
push esi  +
call sub_106217C  +
push eax  +
call ds:SetCursor  +
cmp esi edi +
jz loc_100A79E  +
cmp dword ptr [ebp+8] 201h +
jz loc_1040715  +
cmp dword ptr [ebp+8] 203h +
jnz loc_100A79E  +
push dword ptr [ebx+20h]  +
call ds:SetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 1Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+8] eax +
xor edi edi +
inc edi  +
mov [ebp-4] edi +
test eax eax +
jz loc_1040747  +
lea ecx [ebp-4Ch] +
push ecx  +
push ebx  +
mov ecx eax +
call sub_105E34B  +
jmp loc_1040749  +
xor eax eax +
mov ecx off_108A1D4 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword_108CF00 eax +
mov eax [ecx] +
push 0  +
call dword ptr [eax+44h]  +
mov ecx off_108A1D4 +
mov dword_108EEB4 esi +
mov eax [ecx] +
push edi  +
call dword ptr [eax+44h]  +
jmp loc_100A79E  +
mov eax [esi] +
push offset dword_108A348  +
push ebx  +
mov ecx esi +
call dword ptr [eax+3Ch]  +
jmp loc_100A799  +
dec eax  +
jz loc_10301EF  +
sub eax 1FAh +
jnz loc_100A799  +
call ds:ReleaseCapture  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+40h]  +
and dword_108A364 0 +
and dword_108A360 0 +
jmp loc_100A799  +
lea eax [ebp+10h] +
push eax  +
mov ecx ebx +
call sub_1051DB8  +
jmp loc_100A799  +
push eax  +
call sub_1005C6C  +
jmp loc_100A9CC  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_105380D  +
jmp loc_100A79E  +
***
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
jmp loc_100941B  +
***
lea eax [ebp-74h] +
push eax  +
mov ecx esi +
call sub_10083F8  +
lea eax [ebp-74h] +
push eax  +
lea eax [ebp-64h] +
push eax  +
call sub_106851E  +
jmp loc_10093EB  +
***
call sub_1062091  +
jmp loc_1009413  +
***
push edi  +
push ebx  +
lea ecx [ebp-64h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
jmp loc_100941B  +
***
fstp  st +
xor al al +
pop esi  +
retn   +
***
fstp  st +
xor al al +
pop esi  +
retn   +
***
mov ecx esi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
push dword ptr [esi+20h]  +
call ds:SetActiveWindow  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
jmp loc_100A80B  +
call sub_1009FC1  +
xor ecx ecx +
push ecx  +
xor eax eax +
push eax  +
push ecx  +
push 400h  +
mov ecx esi +
call sub_100A640  +
push 7F16h  +
push 0  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
mov ecx off_108A1D4 +
mov eax [ecx] +
call dword ptr [eax+84h]  +
test eax eax +
jz loc_104089E  +
mov ecx esi +
call sub_1051535  +
mov dword_108A240 1 +
xor eax eax +
jmp loc_100A81C  +
***
call ds:GetMessageExtraInfo  +
push eax  +
mov ecx esi +
call sub_10514EB  +
jmp loc_100ABA7  +
***
call ds:GetMessageExtraInfo  +
push eax  +
mov ecx esi +
call sub_10514EB  +
jmp loc_100AABD  +
***
call ds:GetMessageExtraInfo  +
push eax  +
mov ecx esi +
call sub_10514EB  +
jmp loc_100AB07  +
***
mov ecx off_108A1D4 +
mov edx [ecx] +
push offset dword_108A348  +
push eax  +
call dword ptr [edx+28h]  +
mov dword_108A244 edi +
jmp loc_100A3F8  +
***
mov eax [ebp+8] +
sub eax 25h +
jz loc_1040927  +
dec eax  +
jz loc_1040923  +
dec eax  +
jz loc_104091E  +
dec eax  +
jnz loc_102EBE8  +
push 1  +
push ecx  +
jmp loc_104092A  +
push ecx  +
push 1  +
jmp loc_104092A  +
push 0FFFFFFFFh  +
jmp loc_104091B  +
***
push ecx  +
push 0FFFFFFFFh  +
mov ecx esi +
call sub_10538AD  +
jmp loc_102EBE8  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_101313C  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1053D28  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1040937  +
pop edi  +
jmp loc_1013274  +
***
cmp edi 6666666h +
jbe loc_1040968  +
call loc_1058901  +
push eax  +
push edi  +
call sub_10521E6  +
imul edi edi +
add edi eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov al 1 +
jmp loc_10192A4  +
***
push eax  +
call ds:GlobalFree  +
mov [esi+6Ch] ebx +
jmp loc_101FFC2  +
***
mov ecx ebx +
mov edi offset loc_102E9A4 +
lea esi [ebp+var_14] +
xor edx edx +
cmps   +
jnz loc_10409AA  +
push 10h  +
jmp loc_102CC66  +
mov ecx ebx +
mov edi offset dword_10409C8 +
lea esi [ebp+var_14] +
xor edx edx +
cmps   +
jnz loc_102CB95  +
push 20h  +
jmp loc_102CC66  +
***
mov esi offset dword_104AC54 +
jmp loc_10125B0  +
***
cmp eax 2 +
jg loc_10409EE  +
xor eax eax +
jmp loc_103D187  +
xor ecx ecx +
cmp eax 4 +
setnle cl  +
inc ecx  +
mov eax ecx +
jmp loc_103D187  +
mov dword ptr [ebx+10h] 3 +
lea edi [ebx+14h] +
mov esi offset loc_102E904 +
movs   +
movs   +
movs   +
movs   +
jmp loc_103D19F  +
***
push 0  +
call sub_100AF58  +
mov ecx esi +
pop esi  +
jmp loc_106A7B9  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
xor esi esi +
jmp loc_1012083  +
***
mov eax [ebp-18h] +
push 0FFFFFFFFh  +
push 0  +
push 0F188h  +
mov [ebp-1Ch] eax +
call ?AfxMessageBox@@YGHIII@Z  +
mov eax offset loc_1040A6F +
retn   +
xor esi esi +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
mov eax esi +
jmp loc_10124F4  +
lea eax [esi+24h] +
push eax  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@ABV0@@Z  +
mov eax [ebp-14h] +
mov dword ptr [ebp-4] 3 +
cmp [eax-8] edi +
jnz loc_1040AA9  +
push 0F003h  +
lea ecx [ebp-14h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp-14h]  +
call sub_1054C2E  +
dec eax  +
dec eax  +
jz loc_1040ADC  +
sub eax 4 +
jz loc_1040AC2  +
dec eax  +
jnz loc_1040ADC  +
xor esi esi +
inc esi  +
jmp loc_1040ACE  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0A4h]  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
jmp loc_1040A7A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
xor eax eax +
jmp loc_10124F4  +
***
mov eax [ebp-54h] +
mov [ebp-48h] eax +
mov dword ptr [ebp-4] 4 +
mov eax offset loc_1040BE7 +
retn   +
mov esi 40000000h +
***
mov byte ptr [ebp-4] 3 +
call ?AfxTryCleanup@@YGXXZ  +
cmp dword_108BC04 0 +
jz loc_1040C48  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_1040C0B  +
test al al +
jnz loc_1040C48  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_1040C48  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_1040C48  +
cmp eax ecx +
jnz loc_1040C48  +
push edx  +
push offset dword_1040D08  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D97  +
xor esi esi +
jmp loc_102ED3A  +
cmp [ebx+84h] edi +
jz loc_102ED11  +
mov ecx [ebx+0ECh] +
push ebx  +
call sub_104CF75  +
mov ecx [ebx+0ECh] +
push edi  +
call sub_1017CF3  +
mov ecx dword_108A1F0 +
push eax  +
call sub_1013F8E  +
jmp loc_102ED11  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax+64h]  +
jmp loc_102ED2B  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_1040CA3  +
test al al +
jnz loc_102ED37  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_102ED37  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_102ED37  +
cmp eax ecx +
jnz loc_102ED37  +
push 1  +
push offset dword_1040D08  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D97  +
jmp loc_102ED37  +
***
mov eax offset dword_104AC54 +
jmp loc_1011ED2  +
push esi  +
push 405h  +
push 83Eh  +
mov ecx offset unk_108AF60 +
call sub_101209D  +
jmp loc_1011EFF  +
mov edi [edi+100h] +
neg edi  +
sbb edi edi +
add edi 3 +
mov [ebp-2Ch] edi +
jmp loc_102C80C  +
cmp [ebp+14h] edi +
jz loc_1040D6C  +
push dword ptr [ebp-2Ch]  +
mov ebx [ebx+20h] +
push ebx  +
mov ecx esi +
call sub_104C43F  +
mov [ebp-28h] eax +
jmp loc_102C8AF  +
push edi  +
push 3F4h  +
push 804h  +
jmp loc_102C8BB  +
***
mov ecx offset unk_108AF60 +
call sub_105600C  +
push 0  +
push 0FFFFFFFFh  +
push 6  +
mov dword ptr [esi+108h] 1 +
call ?AfxThrowFileException@@YGXHJPBG@Z  +
***
xor eax eax +
jmp loc_1019E19  +
mov ecx dword_108A1F0 +
push 1  +
push 8  +
call sub_1013F8E  +
jmp loc_1019DF9  +
***
mov eax [esi] +
call dword ptr [eax+68h]  +
lea ecx [ebp+var_4] +
mov [ebp+var_4] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+6Ch]  +
test eax eax +
jz loc_1012381  +
push dword ptr [eax+48h]  +
mov ecx edi +
call sub_10634CD  +
jmp loc_1012381  +
push edi  +
push 0  +
mov ecx esi +
call ?NotifyAllItems@COleServerDoc@@IAEXW4OLE_NOTIFICATION@@K@Z  +
jmp loc_10123B3  +
***
pop esi  +
retn   +
mov eax dword_108B03C +
push offset dword_108B040  +
push 2  +
push 1436h  +
push offset unk_108E748  +
mov dword_108B04C eax +
mov dword_108B048 edi +
call WinSqmAddToStream  +
mov byte_108B038 bl +
jmp loc_103730D  +
add esi 0F0h +
mov ecx [esi] +
cmp ecx ebx +
jz loc_1040E36  +
mov eax [ecx] +
push edi  +
call dword ptr [eax+4]  +
mov [esi] ebx +
xor eax eax +
jmp loc_1037327  +
***
mov dword_108B194 1 +
jmp loc_102C919  +
lea ecx [ebx+0F4h] +
mov dword ptr [ebx+0F8h] 1 +
call ?Empty@CString@@QAEXXZ  +
jmp loc_102C93C  +
mov eax dword_108B03C +
push offset dword_108B040  +
push 2  +
push 1436h  +
push offset unk_108E748  +
mov dword_108B04C eax +
mov dword_108B048 esi +
call WinSqmAddToStream  +
jmp loc_102C98D  +
***
xor eax eax +
retn   +
***
dec eax  +
jnz loc_102E565  +
mov edx [ebp+arg_4] +
mov eax [edx+10h] +
cmp eax 0Dh +
jnz loc_102E598  +
push 4  +
pop ecx  +
mov edi offset dword_100213C +
mov esi edx +
xor ebx ebx +
cmps   +
jz loc_1040ED2  +
cmp eax eax +
jnz loc_102E598  +
push 4  +
pop ecx  +
mov edi offset dword_100FA80 +
mov esi edx +
xor ebx ebx +
cmps   +
jnz loc_1040ED6  +
push 2  +
jmp loc_1040F0D  +
cmp eax 0Dh +
jnz loc_102E598  +
push 4  +
pop ecx  +
mov edi offset dword_100FA94 +
mov esi edx +
xor ebx ebx +
cmps   +
jz loc_1040F0B  +
cmp eax eax +
jnz loc_102E598  +
push 4  +
pop ecx  +
mov edi offset dword_100FB5C +
mov esi edx +
xor eax eax +
cmps   +
jnz loc_102E598  +
push 3  +
pop ecx  +
jmp loc_102E565  +
cmp eax eax +
jnz loc_102E598  +
push 4  +
pop ecx  +
mov edi offset dword_100FB5C +
mov esi edx +
xor eax eax +
cmps   +
jz loc_102E562  +
jmp loc_102E598  +
***
test dword ptr [esi+0Ch] 40000000h +
jnz loc_1006312  +
lea ecx [edi+500h] +
call sub_106961E  +
jmp loc_1006312  +
***
xor eax eax +
jmp loc_101406A  +
***
mov eax stru_108B23C.left +
mov edx stru_108B23C.right +
mov ecx stru_108B23C.top +
sub edx eax +
mov [ebp+var_8] edx +
mov edx stru_108B23C.bottom +
sub edx ecx +
mov [ebp+hInstance] edx +
lea edx [ebp+var_8] +
push edx  +
push ecx  +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov ecx offset unk_108AF60 +
call sub_1055F1C  +
mov eax [ebp+var_10] +
mov ecx [ebp+var_C] +
test eax eax +
jnz loc_1040F9D  +
test ecx ecx +
jz loc_1040FA3  +
mov [esi+1Ch] eax +
mov [esi+18h] ecx +
mov eax [ebx+0D4h] +
mov edx [ebp+var_8] +
cmp edx eax +
jg loc_1040FB2  +
mov edx eax +
mov ecx [ebx+0D8h] +
mov eax [ebp+hInstance] +
cmp eax ecx +
jg loc_1040FC1  +
mov eax ecx +
test edx edx +
jz loc_1040FCF  +
test eax eax +
jz loc_1040FCF  +
mov [esi+14h] edx +
mov [esi+10h] eax +
mov eax [esi+1Ch] +
mov stru_108B23C.left eax +
mov ecx [esi+18h] +
mov stru_108B23C.top ecx +
mov edx [esi+14h] +
add edx eax +
mov stru_108B23C.right edx +
mov eax [esi+10h] +
add eax ecx +
jmp loc_1041075  +
mov eax [ebp+mi.rcWork.left] +
mov stru_108B23C.left eax +
mov eax [ebp+mi.rcWork.right] +
mov stru_108B23C.right eax +
jmp loc_101AC04  +
mov ecx [ebp+mi.rcWork.top] +
mov stru_108B23C.top ecx +
mov ecx [ebp+mi.rcWork.bottom] +
mov stru_108B23C.bottom ecx +
jmp loc_101AC0D  +
mov edi edx +
sub edi stru_108B23C.left +
mov stru_108B23C.left edx +
add eax edi +
mov stru_108B23C.right eax +
jmp loc_101AC1C  +
mov edi edx +
sub edi stru_108B23C.top +
mov stru_108B23C.top edx +
add ecx edi +
mov stru_108B23C.bottom ecx +
jmp loc_101AC2B  +
mov edi edx +
sub edi eax +
add stru_108B23C.left edi +
mov stru_108B23C.right edx +
jmp loc_101AC36  +
mov edx eax +
sub edx ecx +
add stru_108B23C.top edx +
mov stru_108B23C.bottom eax +
jmp loc_101AC41  +
and [ebp+arg_0] eax +
jmp loc_101AC95  +
***
lea eax [ebp-10h] +
push eax  +
push dword ptr [ecx+20h]  +
call ds:GetClientRect  +
push 0Fh  +
call sub_104D884  +
mov ecx [ebp+8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_104FFCC  +
jmp loc_10046E4  +
***
lea ecx [eax+40h] +
cmp ecx ebx +
jz loc_100753D  +
cmp eax [ebp-14h] +
jz loc_10410C6  +
cmp ecx [ebp-14h] +
jnz loc_100753D  +
mov eax [ebp-10h] +
mov ecx [eax] +
push offset dword_104A000  +
push edi  +
push 5A3Dh  +
push eax  +
call dword ptr [ecx+24h]  +
jmp loc_100753D  +
***
push dword ptr [ebp+10h]  +
mov eax [ecx+490h] +
mov ecx [eax] +
push (offset loc_1019A11+3)  +
push eax  +
call dword ptr [ecx]  +
jmp loc_1019A40  +
***
mov eax [esi] +
push ebx  +
call dword ptr [eax+4]  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_1006B92  +
***
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
jmp locret_101F0FA  +
***
mov eax [eax+8] +
jmp loc_101444E  +
***
or eax eax +
jmp loc_1019B95  +
***
xor esi esi +
jmp loc_1016747  +
***
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
cmp edi 15555555h +
jbe loc_1041167  +
call loc_1058901  +
push eax  +
push edi  +
call sub_100BBF5  +
imul edi edi +
add edi eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov al 1 +
jmp loc_100CBB1  +
***
mov eax offset sub_100C901 +
mov off_108A1DC eax +
jmp loc_1016946  +
***
push [ebp+lpString2]  +
add ecx 2 +
push ecx  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_102CC90  +
inc eax  +
jmp loc_102CC92  +
***
fild  [ebp+var_4] +
fdiv  ds:dbl_1010288 +
jmp locret_1010381  +
fild  [ebp+var_4] +
fmul  ds:dbl_10411D8 +
fdiv  ds:dbl_10411D0 +
jmp locret_1010381  +
***
mov ecx esi +
pop esi  +
jmp loc_105550C  +
***
push 56h  +
lea eax [ebp-0BCh] +
push eax  +
push 0Bh  +
push edi  +
call esi  +
jmp loc_10232F4  +
***
mov [ecx+4] eax +
jmp loc_10140FA  +
***
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_106CAD2  +
add esp 14h +
pop esi  +
retn   +
***
xor eax eax +
jmp loc_1023338  +
***
xor eax eax +
jmp loc_101E1F7  +
***
xor ecx ecx +
jmp loc_10142B2  +
push 0  +
lea ecx [ebp+var_C] +
call sub_104BD15  +
push offset dword_1082CC0  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
xor eax eax +
inc eax  +
mov [esi+24Ch] eax +
mov [ebp+var_8] eax +
jmp loc_101BA54  +
mov dword ptr [esi+24Ch] 1 +
jmp loc_101BA54  +
mov dword ptr [esi+260h] 1 +
jmp loc_101BA54  +
lea ecx [esi+264h] +
mov edx [ecx] +
cmp [edx-8] ebx +
jz loc_101BA45  +
cmp eax ebx +
jz loc_101BA34  +
lea ecx [esi+268h] +
mov eax [ecx] +
cmp [eax-8] ebx +
jnz loc_101BA34  +
jmp loc_101BA45  +
cmp [ebp+var_8] ebx +
jz loc_101BA54  +
lea ecx [esi+254h] +
mov eax [ecx] +
cmp [eax-8] ebx +
jz loc_101BA45  +
lea ecx [esi+258h] +
mov eax [ecx] +
cmp [eax-8] ebx +
jz loc_101BA45  +
lea ecx [esi+25Ch] +
mov eax [ecx] +
cmp [eax-8] ebx +
jz loc_101BA45  +
jmp loc_101BA54  +
***
lea ecx [esi+278h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
jmp loc_1023392  +
***
xor ebx ebx +
jmp loc_103BFA0  +
call sub_10637A7  +
jmp loc_103C27C  +
lea eax [ebp-238h] +
push eax  +
lea ecx [ebp-21Ch] +
call ??4CString@@QAEABV0@ABV0@@Z  +
push edi  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@G@Z  +
push 1Ch  +
lea ecx [ebp-228h] +
call ?LoadStringW@CString@@QAEHI@Z  +
lea eax [ebp-228h] +
push eax  +
mov ebx offset asc_103C014 +
push ebx  +
lea eax [ebp-220h] +
push eax  +
call ??H@YG?AVCString@@PBGABV0@@Z  +
push eax  +
lea ecx [ebp-21Ch] +
mov byte ptr [ebp-4] 7 +
call ??YCString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-220h] +
mov byte ptr [ebp-4] 5 +
call ??1CString@@QAE@XZ  +
lea eax [ebp-228h] +
push eax  +
push ebx  +
lea eax [ebp-220h] +
push eax  +
call ??H@YG?AVCString@@PBGABV0@@Z  +
push eax  +
lea ecx [ebp-244h] +
mov byte ptr [ebp-4] 8 +
call ??YCString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-220h] +
mov byte ptr [ebp-4] 5 +
call ??1CString@@QAE@XZ  +
push 6  +
lea ecx [ebp-228h] +
call ?LoadStringW@CString@@QAEHI@Z  +
lea eax [ebp-228h] +
push eax  +
push ebx  +
lea eax [ebp-220h] +
push eax  +
call ??H@YG?AVCString@@PBGABV0@@Z  +
push eax  +
lea ecx [ebp-21Ch] +
mov byte ptr [ebp-4] 9 +
call ??YCString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-220h] +
mov byte ptr [ebp-4] 5 +
call ??1CString@@QAE@XZ  +
lea eax [ebp-228h] +
push eax  +
push ebx  +
lea eax [ebp-220h] +
push eax  +
call ??H@YG?AVCString@@PBGABV0@@Z  +
push eax  +
lea ecx [ebp-244h] +
mov byte ptr [ebp-4] 0Ah +
call ??YCString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-220h] +
mov byte ptr [ebp-4] 5 +
call ??1CString@@QAE@XZ  +
push 1Dh  +
lea ecx [ebp-228h] +
call ?LoadStringW@CString@@QAEHI@Z  +
lea eax [ebp-228h] +
push eax  +
push ebx  +
lea eax [ebp-220h] +
push eax  +
call ??H@YG?AVCString@@PBGABV0@@Z  +
mov byte ptr [ebp-4] 0Bh +
push eax  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-220h] +
mov byte ptr [ebp-4] 5 +
call ??1CString@@QAE@XZ  +
push edi  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@G@Z  +
mov edx [ebp-22Ch] +
mov ecx [edx+14h] +
mov eax ecx +
imul eax eax +
add eax [ebp-23Ch] +
inc ecx  +
mov [edx+14h] ecx +
mov dword ptr [eax] 3 +
lea edi [eax+4] +
mov esi offset loc_102E904 +
movs   +
movs   +
movs   +
movs   +
jmp loc_103BBE4  +
push 21h  +
lea ecx [ebp-238h] +
call ?LoadStringW@CString@@QAEHI@Z  +
lea eax [ebp-238h] +
push eax  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@ABV0@@Z  +
push ebx  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@G@Z  +
lea eax [ebp-244h] +
push eax  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@ABV0@@Z  +
push ebx  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@G@Z  +
mov edx [ebp-22Ch] +
mov eax [edx+14h] +
sub esp 10h +
mov ecx eax +
mov edi esp +
imul ecx ecx +
add ecx [ebp-23Ch] +
mov esi offset dword_1023060 +
movs   +
movs   +
movs   +
inc eax  +
mov [edx+14h] eax +
movs   +
call sub_102E962  +
mov eax [ebp-22Ch] +
mov ecx [eax+14h] +
mov [eax+18h] ecx +
push 13h  +
lea ecx [ebp-238h] +
call ?LoadStringW@CString@@QAEHI@Z  +
lea eax [ebp-238h] +
push eax  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@ABV0@@Z  +
push 0  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@G@Z  +
push offset a_  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@PBG@Z  +
push 0  +
lea ecx [ebp-21Ch] +
call ??YCString@@QAEABV0@G@Z  +
mov edx [ebp-22Ch] +
mov eax [edx+14h] +
sub esp 10h +
mov ecx eax +
mov edi esp +
imul ecx ecx +
add ecx [ebp-23Ch] +
mov esi offset dword_10415B8 +
movs   +
movs   +
movs   +
inc eax  +
mov [edx+14h] eax +
movs   +
call sub_102E962  +
xor ebx ebx +
jmp loc_103BD5F  +
mov edx [ebp-22Ch] +
mov eax [eax+110h] +
mov [edx+18h] eax +
mov byte ptr [ecx] 0 +
jmp loc_103BDC1  +
xor eax eax +
jmp loc_103BDE0  +
push esi  +
lea eax [ebp-218h] +
push eax  +
push ebx  +
push ebx  +
push offset dword_10415D0  +
call SHGetFolderPathEx  +
jmp loc_103C132  +
***
pop ebp  +
retn 4  +
***
cmp [esi+3F5h] bl +
jnz loc_100CCDA  +
mov eax [esi+1A0h] +
cmp eax ebx +
jz loc_100CCDA  +
push eax  +
lea ecx [ebp-10h] +
call sub_10561F1  +
mov [ebp-4] ebx +
cmp [ebp-10h] ebx +
jz loc_104163C  +
mov eax [esi+1A0h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+10h]  +
mov eax [ebp-10h] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+10h]  +
mov eax [esi+1A0h] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+10h]  +
mov byte ptr [esi+3F5h] 1 +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_100CCDA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100CCDA  +
***
cmp [esi+3F5h] bl +
jz loc_100BF6E  +
mov eax [esi+1A0h] +
cmp eax ebx +
jz loc_100BF6E  +
push eax  +
lea ecx [ebp-10h] +
call sub_10561F1  +
mov [ebp-4] ebx +
cmp [ebp-10h] ebx +
jz loc_10416AC  +
mov eax [esi+1A0h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+10h]  +
mov eax [ebp-10h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+10h]  +
mov eax [esi+1A0h] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+10h]  +
mov [esi+3F5h] bl +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_100BF6E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100BF6E  +
***
and edx 0FFFFFFFDh +
mov [eax+0D0h] edx +
jmp loc_1019AC3  +
and dword ptr [eax+0D0h] 0FFFFFFF7h +
jmp loc_1019B0A  +
***
push ebx  +
push offset off_108D3C0  +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_1035678  +
mov eax [eax+8] +
mov eax [eax] +
jmp loc_1035671  +
***
push ebx  +
push offset off_108D3C0  +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_103A984  +
mov eax [eax+8] +
mov ecx [edi+8] +
mov [eax] ecx +
jmp loc_103A980  +
***
mov edx [eax] +
push 1  +
mov ecx eax +
call dword ptr [edx]  +
jmp locret_1014D6C  +
***
mov eax [ecx+8] +
mov eax [eax+esi*4] +
jmp loc_101BA99  +
call sub_101D47E  +
cmp esi [eax+0Ch] +
jnb loc_104175A  +
mov eax [eax+8] +
mov eax [eax+esi*4] +
jmp loc_101BAA6  +
xor eax eax +
jmp loc_101BAA6  +
***
xor eax eax +
pop esi  +
retn   +
***
xor eax eax +
pop esi  +
retn   +
***
mov ecx [edi+8] +
mov eax [eax+8] +
mov ecx [ecx] +
mov [eax] ecx +
jmp loc_100B680  +
***
xor eax eax +
pop esi  +
retn   +
***
push ebx  +
push offset off_108E878  +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_10070F8  +
mov eax [eax+8] +
mov ecx [edi+8] +
mov [eax] ecx +
jmp loc_10070F4  +
***
xor eax eax +
pop esi  +
retn   +
***
xor eax eax +
pop esi  +
retn   +
***
mov eax [eax] +
jmp loc_1014B01  +
mov al 1 +
jmp loc_10141AB  +
***
xor ecx ecx +
jmp loc_1013C0C  +
push 0  +
lea ecx [ebp+var_C] +
call sub_104BD15  +
push offset dword_1082CC0  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
movzx eax ax +
retn   +
***
push [ebp+arg_0]  +
call ?OnIdle@CWinApp@@UAEHJ@Z  +
jmp loc_1006788  +
call sub_105657E  +
mov ecx esi +
call sub_10564CD  +
jmp loc_100679B  +
cmp [esi+20h] edi +
jz loc_100676C  +
call sub_10049D9  +
push edi  +
push edi  +
push 7E9h  +
push dword ptr [eax+20h]  +
call ds:PostMessageW  +
jmp loc_100676C  +
***
mov eax [ebp-14h] +
mov byte ptr [eax+3F4h] 0 +
cmp dword_108BC04 0 +
jz loc_104197D  +
mov al byte_108BC08 +
cmp al 2 +
jnb loc_1041939  +
test al al +
jnz loc_104197D  +
mov ecx dword_108BBF4 +
mov edx 20000000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_104197D  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax edx +
xor edx edx +
cmp edx dword_108BBF8 +
jnz loc_104197D  +
cmp eax ecx +
jnz loc_104197D  +
push dword ptr [ebp-20h]  +
push offset dword_104A0C0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D97  +
mov eax offset loc_102BE54 +
retn   +
***
push esi  +
push ebx  +
lea ecx [edi+114h] +
call sub_10670C3  +
lea esi [edi+1A0h] +
mov eax [esi] +
cmp eax ebx +
jz loc_1041A20  +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+10h]  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+40h]  +
add edi 1A4h +
cmp [edi] ebx +
jz loc_1041A3F  +
mov eax [edi] +
cmp eax ebx +
jz loc_1041A38  +
mov [edi] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push ebx  +
push edi  +
call sub_101403C  +
cmp [esi] ebx +
jz loc_1041A58  +
mov eax [esi] +
cmp eax ebx +
jz loc_1041A51  +
mov [esi] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push ebx  +
push esi  +
call sub_101403C  +
pop esi  +
jmp loc_101E257  +
***
mov [ebp-4] ebx +
cmp [esi+1A0h] ebx +
jz loc_10133A2  +
lea ecx [esi+114h] +
push ebx  +
mov [ebp-28h] ecx +
call sub_10670C3  +
mov eax [esi+1A0h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+40h]  +
mov eax [esi+1A0h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
jge loc_1041AAA  +
mov [ebp-18h] eax +
push offset dword_10838F8  +
lea eax [ebp-18h] +
push eax  +
call _CxxThrowException  +
cmp [ebp+8] ebx +
jz loc_10133A2  +
mov [ebp-14h] ebx +
push dword ptr [esi+1A4h]  +
lea eax [ebp-14h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101403C  +
mov eax [esi+1A0h] +
push dword ptr [ebp+8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
cmp eax ebx +
jge loc_1041AE9  +
mov [ebp-1Ch] eax +
push offset dword_10838F8  +
lea eax [ebp-1Ch] +
jmp loc_1041AA4  +
***
mov edi [ebp-14h] +
mov eax [esi+1A0h] +
mov ecx [eax] +
push edi  +
push ebx  +
push eax  +
call dword ptr [ecx+38h]  +
cmp eax ebx +
jge loc_1041B0B  +
mov [ebp-20h] eax +
push offset dword_10838F8  +
lea eax [ebp-20h] +
jmp loc_1041AA4  +
***
mov esi [esi+1A0h] +
mov eax [esi] +
push 1  +
push esi  +
call dword ptr [eax+10h]  +
cmp eax ebx +
jge loc_1041B2D  +
mov [ebp-24h] eax +
push offset dword_10838F8  +
lea eax [ebp-24h] +
jmp loc_1041AA4  +
***
mov ecx [ebp-28h] +
push 1  +
call sub_10670C3  +
mov [ebp-4] bl +
cmp edi ebx +
jz loc_10133A2  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
jmp loc_10133A2  +
***
xor ebx ebx +
cmp dword_108BC04 ebx +
jz loc_1041BA8  +
mov al byte_108BC08 +
cmp al 2 +
jnb loc_1041B64  +
cmp al bl +
jnz loc_1041BA8  +
mov ecx dword_108BBF4 +
mov edx 20000000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_1041BA8  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax edx +
xor edx edx +
cmp edx dword_108BBF8 +
jnz loc_1041BA8  +
cmp eax ecx +
jnz loc_1041BA8  +
push dword ptr [ebp-2Ch]  +
push offset dword_104A0C0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D97  +
mov eax offset loc_10133A2 +
retn   +
***
push [ebp+arg_4]  +
push edi  +
push 8  +
push eax  +
call sub_1014379  +
jmp loc_1012FB8  +
***
call loc_106AEE9  +
jmp loc_102CCB1  +
mov ecx [esi+18h] +
push ebx  +
lea edx [esi+4] +
cmp ecx 8 +
jb loc_1041BDC  +
mov ebx [edx] +
mov [ebp+arg_0] ebx +
jmp loc_1041BDF  +
mov [ebp+arg_0] edx +
cmp ecx 8 +
jb loc_1041BE6  +
mov edx [edx] +
mov ebx [ebp+arg_4] +
sub eax ebx +
push eax  +
mov [ebp+var_4] edx +
mov edx [ebp+arg_0] +
lea eax [edi+ebx] +
lea eax [edx+eax*2] +
push eax  +
mov eax [ebp+var_4] +
sub ecx edi +
push ecx  +
lea eax [eax+edi*2] +
push eax  +
call sub_1056F2F  +
mov eax [esi+14h] +
sub eax ebx +
push eax  +
mov ecx esi +
call sub_1012FDB  +
pop ebx  +
jmp loc_102CCC8  +
***
mov eax [ebp+8] +
mov ecx [ebp-18h] +
xor esi esi +
push esi  +
push 1  +
call sub_1012F94  +
push esi  +
push esi  +
call _CxxThrowException  +
int 3  +
***
call loc_106AE9B  +
jmp loc_10141D5  +
cmp edi 8 +
jnb loc_10141E4  +
mov eax [esi+14h] +
cmp edi eax +
jnb loc_1041C81  +
mov eax edi +
push eax  +
push 1  +
mov ecx esi +
call sub_1012F94  +
jmp loc_10141EC  +
***
mov bl byte_108BC08 +
cmp bl 4 +
jnb loc_1041C9F  +
test bl bl +
jnz loc_1041CE7  +
mov edx dword_108BBF4 +
mov ecx 20000000h +
and edx ecx +
xor eax eax +
or eax edx +
jz loc_1041CE7  +
mov eax dword_108BBFC +
and eax ecx +
xor ecx ecx +
cmp ecx dword_108BBF8 +
jnz loc_1041CE7  +
cmp eax dword_108BBFC +
jnz loc_1041CE7  +
push offset dword_1041DC0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
mov bl byte_108BC08 +
xor eax eax +
cmp dword_108BC04 eax +
jz loc_10205E8  +
cmp bl 4 +
jnb loc_1041D02  +
test bl bl +
jnz loc_10205E8  +
mov ecx dword_108BBF4 +
and ecx edi +
or eax ecx +
jz loc_10205E8  +
mov edx dword_108BBFC +
mov eax edx +
xor ecx ecx +
and eax edi +
cmp ecx dword_108BBF8 +
jnz loc_10205E8  +
cmp eax edx +
jnz loc_10205E8  +
push offset dword_1041DD0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
jmp loc_10205E8  +
push 1  +
call sub_10563FA  +
mov [esi] ebx +
jmp loc_1020604  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_1041D6C  +
test al al +
jnz loc_102065F  +
mov ecx dword_108BBF4 +
and ecx edi +
xor eax eax +
or eax ecx +
jz loc_102065F  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax edi +
cmp edx dword_108BBF8 +
jnz loc_102065F  +
cmp eax ecx +
jnz loc_102065F  +
push offset dword_1041DE0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
jmp loc_102065F  +
***
call loc_106AEE9  +
jmp loc_1014F6B  +
mov esi [ebp+arg_8] +
jmp loc_1014F7C  +
push 0FFFFFFFFh  +
add esi eax +
push esi  +
call sub_102CC9B  +
push [ebp+arg_4]  +
mov ecx ebx +
push 0  +
call sub_102CC9B  +
jmp loc_1014FC5  +
***
push offset dword_104A544  +
lea ecx [ebp-20h] +
call sub_10568F1  +
push offset dword_108372C  +
lea eax [ebp-20h] +
push eax  +
call _CxxThrowException  +
***
cmp dword ptr [esi+18h] 8 +
jb loc_1041E43  +
mov eax [esi+4] +
jmp loc_1041E46  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub edi eax +
sar edi 1 +
push edi  +
push esi  +
mov ecx esi +
call sub_1014F52  +
jmp loc_101436E  +
***
cmp dword ptr [ecx+18h] 8 +
jb loc_1041E66  +
mov ecx [ecx+4] +
jmp loc_1041E69  +
add ecx 4 +
push dword ptr [ebp+arg_8]  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
lea eax [ecx+eax*2] +
push eax  +
call sub_10582D2  +
add esp 0Ch +
jmp loc_102CE66  +
***
call loc_106AE9B  +
int 3  +
***
mov ecx [ebp-10h] +
jmp loc_101E2BC  +
***
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_1041F0B  +
mov esi eax +
jmp loc_1041F24  +
cmp byte ptr [ebx+1Dh] 0 +
mov esi [eax+4] +
jnz loc_1041F17  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp+var_10] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_1041F34  +
mov [ecx+4] eax +
jmp loc_1041F42  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_1041F3F  +
mov [ecx] eax +
jmp loc_1041F42  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+1Ch] +
mov dl [edi+1Ch] +
mov [eax+1Ch] dl +
mov [edi+1Ch] cl +
mov ecx [ebp+var_10] +
jmp loc_101EBDE  +
***
mov edx [eax] +
mov byte ptr [edx+1Ch] 1 +
push eax  +
mov byte ptr [eax+1Ch] 0 +
call sub_102614E  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
jmp loc_101EC38  +
cmp byte ptr [eax+1Ch] 0 +
jnz loc_1041F90  +
mov byte ptr [eax+1Ch] 1 +
push esi  +
mov byte ptr [esi+1Ch] 0 +
call sub_102614E  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+1Dh] 0 +
jnz loc_101EC24  +
mov edx [eax+8] +
cmp byte ptr [edx+1Ch] 1 +
jnz loc_1041FAF  +
mov edx [eax] +
cmp byte ptr [edx+1Ch] 1 +
jz loc_101EC20  +
mov edx [eax] +
cmp byte ptr [edx+1Ch] 1 +
jnz loc_1041FCD  +
mov edx [eax+8] +
mov byte ptr [edx+1Ch] 1 +
push eax  +
mov byte ptr [eax+1Ch] 0 +
call sub_10147F3  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+1Ch] +
mov [eax+1Ch] dl +
mov byte ptr [esi+1Ch] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+1Ch] 1 +
call sub_102614E  +
jmp loc_101EC4F  +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_101EEA7  +
***
xor ebx ebx +
cmp [ebp+0Ch] bl +
jz loc_1042002  +
push ebx  +
push ebx  +
call _CxxThrowException  +
test cl 4 +
jz loc_104202E  +
push offset aIos_baseBadbit  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
mov [ebp-4] ebx +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1058864  +
push offset dword_1083AD8  +
lea eax [ebp-50h] +
push eax  +
jmp loc_1041FFD  +
push 2  +
pop ebx  +
test cl bl +
jz loc_104204B  +
push offset aIos_baseFailbi  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
mov dword ptr [ebp-4] 1 +
jmp loc_1042017  +
push offset aIos_baseEofbit  +
lea ecx [ebp-6Ch] +
call sub_101D8E7  +
lea eax [ebp-6Ch] +
push eax  +
lea ecx [ebp-94h] +
mov [ebp-4] ebx +
call sub_1058864  +
push offset dword_1083AD8  +
lea eax [ebp-94h] +
jmp loc_104202B  +
***
or eax 4 +
jmp loc_101D3CA  +
***
mov ecx [ebp-14h] +
call sub_100CAB5  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx+4] +
add ecx eax +
mov eax [ecx+8] +
push 1  +
or eax 4 +
push eax  +
call sub_101D3B8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1042141 +
retn   +
mov esi [ebp-14h] +
xor ebx ebx +
jmp loc_101C16C  +
***
mov ecx [ebp-10h] +
jmp loc_101E304  +
***
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_10421BD  +
mov esi eax +
jmp loc_10421D6  +
cmp byte ptr [ebx+1Dh] 0 +
mov esi [eax+4] +
jnz loc_10421C9  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_10421E6  +
mov [ecx+4] eax +
jmp loc_10421F4  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_10421F1  +
mov [ecx] eax +
jmp loc_10421F4  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+1Ch] +
mov dl [edi+1Ch] +
mov [eax+1Ch] dl +
mov [edi+1Ch] cl +
mov ecx [ebp-10h] +
jmp loc_101EDD0  +
mov edx [eax] +
mov byte ptr [edx+1Ch] 1 +
push eax  +
mov byte ptr [eax+1Ch] 0 +
call sub_102614E  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
jmp loc_101EE2A  +
cmp byte ptr [eax+1Ch] 0 +
jnz loc_1042242  +
mov byte ptr [eax+1Ch] 1 +
push esi  +
mov byte ptr [esi+1Ch] 0 +
call sub_102614E  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+1Dh] 0 +
jnz loc_101EE16  +
mov edx [eax+8] +
cmp byte ptr [edx+1Ch] 1 +
jnz loc_1042261  +
mov edx [eax] +
cmp byte ptr [edx+1Ch] 1 +
jz loc_101EE12  +
mov edx [eax] +
cmp byte ptr [edx+1Ch] 1 +
jnz loc_104227F  +
mov edx [eax+8] +
mov byte ptr [edx+1Ch] 1 +
push eax  +
mov byte ptr [eax+1Ch] 0 +
call sub_10147F3  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+1Ch] +
mov [eax+1Ch] dl +
mov byte ptr [esi+1Ch] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+1Ch] 1 +
call sub_102614E  +
jmp loc_101EE41  +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_10207D7  +
mov esi [esi] +
push edi  +
call sub_101EE75  +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+1Dh] 0 +
pop ecx  +
mov edi esi +
jnz loc_10207F0  +
jmp loc_104229A  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1014A7D  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101ED57  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_10422C2  +
pop edi  +
jmp loc_1020791  +
***
mov dl byte_108BC08 +
cmp dl 4 +
jnb loc_10422F5  +
test dl dl +
jnz loc_1042336  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_1042336  +
mov eax dword_108BBFC +
and eax esi +
cmp edi dword_108BBF8 +
jnz loc_1042336  +
cmp eax dword_108BBFC +
jnz loc_1042336  +
push offset dword_1042628  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
mov dl byte_108BC08 +
cmp dword_108BC04 edi +
jz loc_1013619  +
cmp dl 4 +
jnb loc_104234F  +
test dl dl +
jnz loc_1013619  +
mov edx dword_108BBF4 +
mov ecx 40000000h +
and edx ecx +
xor eax eax +
or eax edx +
jz loc_1013619  +
mov eax dword_108BBFC +
and eax ecx +
cmp edi dword_108BBF8 +
jnz loc_1013619  +
cmp eax dword_108BBFC +
jnz loc_1013619  +
push offset dword_1042638  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
jmp loc_1013619  +
cmp dword_108BC04 edi +
jz loc_1037213  +
mov al byte_108BC08 +
cmp al 2 +
jnb loc_10423BD  +
test al al +
jnz loc_1037213  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_1037213  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_1037213  +
cmp eax ecx +
jnz loc_1037213  +
push offset dword_1042658  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
jmp loc_1037213  +
push 0FFFFFFFFh  +
push edi  +
push 1Eh  +
call ?AfxMessageBox@@YGHIII@Z  +
jmp loc_1037213  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
or eax 0FFFFFFFFh +
jmp loc_1013A38  +
mov ecx [ebx+1ACh] +
call sub_10733B1  +
jmp loc_1013955  +
mov eax [ebx+268h] +
cmp dword ptr [eax-8] 0 +
jz loc_1042479  +
mov ecx [ebx+264h] +
cmp dword ptr [ecx-8] 0 +
jz loc_1042479  +
lea ecx [ebp-20h] +
push ecx  +
push eax  +
call ds:CLSIDFromString  +
test eax eax +
jnz loc_1042479  +
push 4  +
pop ecx  +
mov edi offset loc_1019ED0 +
lea esi [ebp-20h] +
xor eax eax +
cmps   +
jz loc_1013961  +
push 0  +
push 1  +
lea ecx [ebp-48h] +
call sub_1012F94  +
jmp loc_1037213  +
push dword ptr [esi]  +
lea eax [ebp-29Ch] +
push eax  +
call sub_104D7BD  +
mov eax [ebp-29Ch] +
cmp dword ptr [eax-8] 0 +
mov byte ptr [ebp-4] 0Bh +
jnz loc_10424DA  +
mov ecx [ebp-2A4h] +
mov eax [ecx] +
push 4  +
lea edx [ebp-29Ch] +
push edx  +
call dword ptr [eax+6Ch]  +
test eax eax +
jz loc_10424DA  +
mov eax [ebp-29Ch] +
cmp dword ptr [eax-8] 0 +
jz loc_10424DA  +
lea eax [ebp-29Ch] +
push eax  +
mov ecx esi +
call ??YCString@@QAEABV0@ABV0@@Z  +
mov eax [esi] +
lea ecx [ebp-298h] +
push ecx  +
push eax  +
call edi  +
lea ecx [ebp-29Ch] +
mov [ebp-2A0h] eax +
mov byte ptr [ebp-4] 8 +
call ??1CString@@QAE@XZ  +
jmp loc_1037241  +
push 3Ah  +
mov ecx esi +
call ?ReverseFind@CString@@QBEHG@Z  +
mov edi eax +
jmp loc_10139B2  +
mov eax [ebx+20h] +
mov ecx [eax+4F8h] +
push dword ptr [ebx+264h]  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov eax [ebx+20h] +
push esi  +
push 0C35Ch  +
push 111h  +
push dword ptr [eax+20h]  +
call ds:PostMessageW  +
jmp loc_1013A0C  +
mov ecx ebx +
call sub_105657E  +
mov ecx ebx +
call sub_10564CD  +
push esi  +
jmp loc_104247B  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_1042565  +
test al al +
jnz loc_1013A2A  +
mov ecx dword_108BBF4 +
mov edx 40000000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_1013A2A  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax edx +
xor edx edx +
cmp edx dword_108BBF8 +
jnz loc_1013A2A  +
cmp eax ecx +
jnz loc_1013A2A  +
push offset dword_1042648  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
jmp loc_1013A2A  +
cmp dword_108BC04 edi +
jz loc_1013A35  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_10425D4  +
test al al +
jnz loc_1013A35  +
mov ecx dword_108BBF4 +
mov edx 40000000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_1013A35  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax edx +
xor edx edx +
cmp edx dword_108BBF8 +
jnz loc_1013A35  +
cmp eax ecx +
jnz loc_1013A35  +
push offset dword_1042648  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
jmp loc_1013A35  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101F5F5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101F607  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101F62F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101F641  +
***
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi [edi] +
call sub_1051485  +
push eax  +
mov ecx edi +
call dword ptr [esi]  +
pop edi  +
pop esi  +
jmp loc_1007587  +
***
call GdipCreateBitmapFromFileICM  +
jmp loc_10160D3  +
***
xor edi edi +
jmp loc_101AF94  +
***
mov eax [esi+48h] +
push 1  +
push ebx  +
push dword ptr [eax+20h]  +
call ds:InvalidateRect  +
jmp loc_10169AD  +
***
mov ecx [esi+48h] +
lea eax [ebp-10h] +
push eax  +
call sub_10083F8  +
jmp loc_10169AD  +
***
push ebx  +
push dword ptr [ebp+8]  +
mov ecx edi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
jmp loc_10169C6  +
***
xor eax eax +
jmp loc_1016F3C  +
***
test edi edi +
jnz loc_1042701  +
xor eax eax +
jmp loc_1042704  +
mov eax [edi+4] +
push 0  +
push eax  +
call off_108E758  +
jmp loc_1016F4B  +
***
mov ecx [esi+20h] +
test ecx ecx +
jz loc_1016F5F  +
push esi  +
push edi  +
call sub_105D691  +
jmp loc_1016F5F  +
***
or eax eax +
jmp loc_101A97F  +
***
mov esi [esi+20h] +
and eax 0FFBFFFFFh +
push eax  +
push 0FFFFFFECh  +
push esi  +
call ds:SetWindowLongW  +
jmp loc_101A97D  +
***
push edi  +
mov edi ds:GetWindowRect +
cmp ecx ebx +
jz loc_1042780  +
push 5  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
lea eax [ebp+var_20] +
push eax  +
mov eax [esi+58h] +
push dword ptr [eax+20h]  +
call edi  +
mov eax [ebp+var_14] +
sub eax [ebp+var_1C] +
mov ecx [esi+58h] +
push 1  +
push eax  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
push eax  +
push ebx  +
push 13h  +
call ?MoveWindow@CWnd@@QAEXHHHHH@Z  +
mov ecx [esi+5Ch] +
cmp ecx ebx +
jz loc_10427B5  +
push 5  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
lea eax [ebp+var_30] +
push eax  +
mov eax [esi+5Ch] +
push dword ptr [eax+20h]  +
call edi  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
mov ecx [esi+5Ch] +
push 1  +
push eax  +
mov eax [ebp+var_28] +
sub eax [ebp+var_30] +
push eax  +
push 13h  +
push ebx  +
call ?MoveWindow@CWnd@@QAEXHHHHH@Z  +
mov ecx [esi+60h] +
pop edi  +
cmp ecx ebx +
jz loc_10427D4  +
push 5  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov ecx [esi+60h] +
push 1  +
push 13h  +
push 13h  +
push ebx  +
push ebx  +
call ?MoveWindow@CWnd@@QAEXHHHHH@Z  +
mov ecx [ebp+Rect.bottom] +
sub ecx [ebp+Rect.top] +
mov eax [ebp+var_14] +
mov edx [ebp+Rect.right] +
sub ecx eax +
add ecx [ebp+var_1C] +
sub eax [ebp+var_1C] +
push 1  +
push ecx  +
mov ecx [ebp+var_28] +
sub edx ecx +
sub edx [ebp+Rect.left] +
add edx [ebp+var_30] +
sub ecx [ebp+var_30] +
push edx  +
push eax  +
push ecx  +
jmp loc_1017A1B  +
***
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
jmp loc_101938F  +
mov eax [esi+58h] +
mov edi ds:GetWindowRect +
test eax eax +
jz loc_1042828  +
lea ecx [ebp-2Ch] +
push ecx  +
push dword ptr [eax+20h]  +
call edi  +
mov eax [esi+5Ch] +
test eax eax +
jz loc_1042838  +
lea ecx [ebp-3Ch] +
push ecx  +
push dword ptr [eax+20h]  +
call edi  +
mov eax [ebp-20h] +
sub eax [ebp-28h] +
add [ebp-18h] eax +
mov eax [ebp-34h] +
sub eax [ebp-3Ch] +
add [ebp-1Ch] eax +
jmp loc_101930A  +
push dword ptr [eax+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_1042864  +
mov ecx [esi+48h] +
mov eax [ecx] +
call dword ptr [eax+60h]  +
mov ecx [esi+48h] +
cmp ecx edi +
jz loc_1042872  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov [esi+48h] edi +
jmp loc_101932E  +
mov [ebx+70h] eax +
mov ecx [esi+4Ch] +
call sub_1061855  +
jmp loc_101933C  +
***
or eax 0FFFFFFFFh +
pop esi  +
retn   +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10428CE +
retn   +
mov esi [ebp-14h] +
xor edi edi +
jmp loc_10428AB  +
***
push dword ptr [ecx+20h]  +
call ds:IsWindowVisible  +
jmp locret_1034D8A  +
***
push edi  +
mov edi [ebp+8] +
mov esi [edi] +
call sub_105146F  +
push eax  +
mov ecx edi +
call dword ptr [esi]  +
pop edi  +
jmp loc_10072A1  +
***
mov al byte_108BC08 +
cmp al 4 +
jnb loc_104290A  +
test al al +
jnz loc_103B626  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_103B626  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_103B626  +
cmp eax ecx +
jnz loc_103B626  +
push offset dword_10429B8  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
jmp loc_103B626  +
***
mov al byte_108BC08 +
cmp al 4 +
jnb loc_1042968  +
test al al +
jnz loc_103B63B  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_103B63B  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_103B63B  +
cmp eax ecx +
jnz loc_103B63B  +
push offset dword_10429C8  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
jmp loc_103B63B  +
***
mov al byte_108BC08 +
cmp al 4 +
jnb loc_10429E9  +
test al al +
jnz loc_10389B7  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_10389B7  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_10389B7  +
cmp eax ecx +
jnz loc_10389B7  +
push offset dword_104A100  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
jmp loc_10389B7  +
***
mov al byte_108BC08 +
cmp al 4 +
jnb loc_1042A47  +
test al al +
jnz loc_10389D5  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_10389D5  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_10389D5  +
cmp eax ecx +
jnz loc_10389D5  +
push offset dword_104A110  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
jmp loc_10389D5  +
***
pop ebp  +
retn 4  +
***
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov [esi+48h] edi +
jmp loc_1020855  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov [esi+58h] edi +
jmp loc_1020860  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov [esi+5Ch] edi +
jmp loc_102086B  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov [esi+60h] edi +
jmp loc_1020876  +
***
cmp [edi+30h] eax +
jz loc_1017A76  +
cmp [edi+38h] eax +
jz loc_1017A76  +
mov eax [edi] +
xor ebx ebx +
inc ebx  +
push ebx  +
mov ecx edi +
call dword ptr [eax+4]  +
lea ecx [ebp-21Ch] +
call ??0CString@@QAE@XZ  +
xor edi edi +
lea ecx [ebp-224h] +
mov [ebp-4] edi +
call ??0CString@@QAE@XZ  +
mov ecx [esi+28h] +
mov eax [ecx] +
push ebx  +
lea edx [ebp-21Ch] +
push edx  +
mov [ebp-4] bl +
call dword ptr [eax+6Ch]  +
test eax eax +
jz loc_1042B2E  +
mov eax [ebp-21Ch] +
cmp [eax-8] edi +
jnz loc_1042B3E  +
push 0F003h  +
lea ecx [ebp-21Ch] +
call ?LoadStringW@CString@@QAEHI@Z  +
mov ecx [esi+28h] +
mov eax [ecx] +
push 4  +
lea edx [ebp-224h] +
push edx  +
call dword ptr [eax+6Ch]  +
test eax eax +
jz loc_1042B98  +
mov eax [ebp-224h] +
cmp [eax-8] edi +
jz loc_1042B98  +
lea eax [ebp-224h] +
push eax  +
lea eax [ebp-21Ch] +
push eax  +
lea eax [ebp-228h] +
push eax  +
call ??H@YG?AVCString@@ABV0@0@Z  +
mov eax [eax] +
mov edx [esi] +
push ebx  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call dword ptr [edx+5Ch]  +
lea ecx [ebp-228h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
jmp loc_1042BA6  +
mov eax [esi] +
push ebx  +
push dword ptr [ebp-21Ch]  +
mov ecx esi +
call dword ptr [eax+5Ch]  +
push dword ptr [ebp-21Ch]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+58h]  +
lea ecx [esi+0F4h] +
call ?Empty@CString@@QAEXXZ  +
mov ecx esi +
mov [esi+0F8h] ebx +
call sub_1019DAC  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-224h] +
test eax eax +
jnz loc_1042BF2  +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-21Ch] +
call ??1CString@@QAE@XZ  +
jmp loc_10371ED  +
mov edi [esi+0F0h] +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-21Ch] +
call ??1CString@@QAE@XZ  +
xor eax eax +
jmp loc_1017A79  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
and dword ptr [ebx] 0 +
jmp loc_1017AD0  +
lea eax [ebp-228h] +
push eax  +
call sub_105BB22  +
lea ecx [ebp-220h] +
mov dword ptr [ebp-4] 3 +
call ??0CString@@QAE@XZ  +
mov eax [ebp-228h] +
cmp dword ptr [eax-8] 0 +
mov byte ptr [ebp-4] 4 +
jz loc_1042C77  +
push 104h  +
lea ecx [ebp-218h] +
push ecx  +
push eax  +
call ds:GetFileTitleW  +
lea eax [ebp-218h] +
push eax  +
lea ecx [ebp-220h] +
call ??4CString@@QAEABV0@PBG@Z  +
jmp loc_1042C87  +
push 0F003h  +
lea ecx [ebp-220h] +
call ?LoadStringW@CString@@QAEHI@Z  +
lea ecx [ebp-22Ch] +
call ??0CString@@QAE@XZ  +
push 0C3DDh  +
lea ecx [ebp-22Ch] +
mov byte ptr [ebp-4] 5 +
call ?LoadStringW@CString@@QAEHI@Z  +
mov eax [ebp-22Ch] +
mov eax [eax-8] +
lea edi [eax+105h] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10067E4  +
pop ecx  +
mov ebx eax +
mov eax [ebp-220h] +
mov [ebp-230h] eax +
lea eax [ebp-230h] +
push eax  +
push edi  +
push ebx  +
push 0  +
push 0  +
push dword ptr [ebp-22Ch]  +
push 2400h  +
call ds:FormatMessageW  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+58h]  +
push ebx  +
call sub_1006809  +
pop ecx  +
lea ecx [ebp-22Ch] +
mov byte ptr [ebp-4] 4 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-220h] +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-228h] +
call ??1CString@@QAE@XZ  +
jmp loc_1017AED  +
push 30h  +
push 0E000h  +
push 8FBh  +
call sub_104CFEB  +
jmp loc_10371ED  +
***
mov ecx [esi+50h] +
test ecx ecx +
jz loc_1042D5D  +
push 0  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
and dword_108B180 0 +
jmp loc_1034D76  +
***
call sub_1034D7D  +
test eax eax +
jnz loc_1034E8C  +
cmp [esi+4Ch] edi +
jz loc_1042D8B  +
mov ecx [esi+50h] +
cmp ecx edi +
jz loc_1042D92  +
push 4  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
jmp loc_1042D92  +
mov ecx esi +
call sub_105BD00  +
push ebx  +
push dword ptr [esi+20h]  +
call ds:GetDC  +
push eax  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov ecx dword_108A24C +
mov ebx eax +
push edi  +
push ebx  +
call sub_1009942  +
mov eax [esi+4Ch] +
cmp eax edi +
jz loc_1042DC3  +
push edi  +
push edi  +
push dword ptr [eax+20h]  +
call ds:InvalidateRect  +
push ebx  +
mov ecx esi +
call sub_1009C7A  +
pop ebx  +
jmp loc_1034E8C  +
***
cmp [esi+0FCh] ebx +
jz loc_1042DF9  +
mov ecx edi +
call sub_105B9E1  +
mov ecx edi +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
push ebx  +
push ebx  +
push 10h  +
push dword ptr [eax+20h]  +
call ds:PostMessageW  +
jmp loc_10168D3  +
***
mov dword_108B1AC ebx +
jmp loc_10167A3  +
***
add esi 0F0h +
mov ecx [esi] +
cmp ecx ebx +
jz loc_10168D3  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov [esi] ebx +
jmp loc_10168D3  +
***
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
call esi  +
jmp loc_10387D5  +
***
mov ecx offset unk_108AEB4 +
lea ecx [ebp-70h] +
lea ecx [ebp-70h] +
mov ecx offset unk_108AEB4 +
mov ecx offset unk_108AEB4 +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
jmp loc_103896D  +
***
cmp [ebp-21Ch] edi +
jz loc_102C164  +
mov ecx [ebp-238h] +
cmp ecx edi +
jz loc_102C164  +
cmp eax edi +
jz loc_102C164  +
mov [ebp-230h] eax +
lea eax [ebp-234h] +
push eax  +
push dword ptr [ebp-21Ch]  +
lea eax [ebp-23Ch] +
push dword ptr [ebp-220h]  +
mov [ebp-234h] ecx +
push eax  +
mov ecx ebx +
call sub_1055F1C  +
push dword ptr [ebp-230h]  +
lea ecx [ebp-244h] +
push dword ptr [ebp-234h]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_100CA63  +
lea edi [ebx+284h] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
mov esi offset aView +
xor edi edi +
jmp loc_102C164  +
and [ebp-264h] eax +
jmp loc_103D6DE  +
***
mov [ecx] edi +
jmp loc_102F571  +
***
sub esi ebx +
cmp edx esi +
jle loc_103623B  +
mov edx [ebp+arg_8] +
cmp edx ecx +
jge loc_10432A2  +
sub ecx ebx +
cmp edx ecx +
jle loc_10432A2  +
push 7  +
pop eax  +
jmp loc_1036257  +
mov ecx [ebp+var_4] +
cmp edx ecx +
jl loc_10432B3  +
add ecx ebx +
cmp edx ecx +
jge loc_10432B3  +
push 9  +
jmp loc_104329C  +
cmp edx eax +
jl loc_1036254  +
add eax ebx +
cmp edx eax +
jge loc_1036254  +
push 4  +
jmp loc_104329C  +
add esi ebx +
cmp edx esi +
jge loc_1036246  +
mov edx [ebp+arg_8] +
cmp edx ecx +
jge loc_10432E4  +
sub ecx ebx +
cmp edx ecx +
jle loc_10432E4  +
push 8  +
jmp loc_104329C  +
mov ecx [ebp+var_4] +
cmp edx ecx +
jl loc_10432F5  +
add ecx ebx +
cmp edx ecx +
jge loc_10432F5  +
push 0Ah  +
jmp loc_104329C  +
cmp edx eax +
jl loc_1036254  +
add eax ebx +
cmp edx eax +
jge loc_1036254  +
push 5  +
jmp loc_104329C  +
mov edx [ebp+arg_8] +
cmp edx ecx +
jge loc_104331C  +
sub ecx ebx +
cmp edx ecx +
jle loc_104331C  +
push 3  +
jmp loc_104329C  +
mov eax [ebp+var_4] +
cmp edx eax +
jl loc_1036254  +
add eax ebx +
cmp edx eax +
jge loc_1036254  +
push 6  +
jmp loc_104329C  +
***
push 0  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
xor eax eax +
jmp loc_1016EEC  +
***
call sub_105615F  +
jmp loc_1008716  +
***
lea ebx [esi+6C0h] +
mov eax [esi+6C4h] +
mov ecx [eax+8] +
cmp ecx edi +
jz loc_10433B1  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov ecx ebx +
call ?RemoveHead@CObList@@QAEPAVCObject@@XZ  +
dec dword ptr [esi+6DCh]  +
cmp [esi+6DCh] edi +
jle loc_100D225  +
jmp loc_104339D  +
***
mov eax [ebp+var_C] +
add [esi+20h] eax +
mov eax [esi+20h] +
cmp eax [esi+8] +
jge loc_100D3DF  +
jmp loc_100D37F  +
xor eax eax +
jmp loc_100D413  +
push 4  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1009B54  +
push 4  +
lea eax [ebp+var_C] +
push eax  +
mov ecx esi +
call sub_1009B54  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_C] +
mov [eax] ecx +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
jmp loc_100D40C  +
***
cmp [ebp+var_8] 5 +
jle loc_1008BB8  +
mov [ebp+var_1] 1 +
push [ebp+var_10]  +
mov ecx ebx +
call ?RemoveAt@CObList@@QAEXPAU__POSITION@@@Z  +
test esi esi +
jz loc_1008BC7  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
jmp loc_1008BC7  +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
push 12h  +
pop eax  +
jmp loc_10298F7  +
***
sub ebx eax +
cmp esi ebx +
jnb loc_102D0C0  +
push eax  +
push 0  +
call ds:GlobalAlloc  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
test eax eax +
jz loc_102D0C0  +
push dword ptr [ebp+8]  +
add esi edi +
push esi  +
push eax  +
call memcpy  +
add esp 0Ch +
mov dword ptr [ebp-10h] 1 +
jmp loc_102D0C0  +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor ebx ebx +
mov edi [ebp+0Ch] +
mov esi [ebp+8] +
***
push dword ptr [edi]  +
call ds:LocalFree  +
mov [edi] ebx +
mov [esi] ebx +
jmp loc_102EAFF  +
***
mov [edi] esi +
jmp loc_1015BB2  +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov ebx [ebp+18h] +
jmp loc_1012DAC  +
***
push 2  +
pop eax  +
jmp loc_10300C7  +
push 10h  +
jmp loc_1043540  +
***
mov ecx esi +
call sub_102F451  +
jmp loc_102FF6B  +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
jmp loc_102F5AC  +
***
fadd  ds:dbl_104A350 +
jmp loc_102D1FB  +
fadd  ds:dbl_104A350 +
jmp loc_102D209  +
fcom  st(1) +
fnstsw  ax +
test ah 41h +
jnz loc_102D22E  +
fstp  st +
xor bl bl +
fstp  st(1) +
fstp  st +
fstp  st(2) +
fstp  st +
fstp  st +
jmp loc_102D27D  +
fstp  st(2) +
mov dword ptr [ebp-18h] 0A0h +
fstp  st +
mov dword ptr [ebp-14h] 78h +
fstp  st +
fstp  st(1) +
fstp  st +
jmp loc_102D27D  +
mov eax [ebp+0Ch] +
push dword ptr [ebp-10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
jmp loc_102D31B  +
***
mov ecx [ebp-14h] +
call ?Delete@CException@@QAEXXZ  +
and dword ptr [ebp+8] 0 +
mov eax offset loc_104365F +
retn   +
mov esi [ebp+8] +
jmp loc_102F442  +
***
mov eax [esi] +
lea ecx [ebp-30h] +
push ecx  +
push dword ptr [ebp+10h]  +
push esi  +
call dword ptr [eax+34h]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_102FB43  +
mov eax [edi] +
lea ecx [ebp-28h] +
push ecx  +
push dword ptr [ebp+10h]  +
push edi  +
call dword ptr [eax+34h]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_102FB58  +
mov eax [esi] +
push ebx  +
lea ecx [ebp-24h] +
push ecx  +
push esi  +
call dword ptr [eax+28h]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_102FB75  +
mov eax [ebp-24h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+0Ch]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_102FB87  +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-44h] +
push edx  +
lea edx [ebp-50h] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_102FBA8  +
fld  qword ptr [ebp-44h] +
sub esp 10h +
fstp  [esp+30h+var_28] +
fld  qword ptr [ebp-50h] +
jmp loc_104371D  +
fstp  st +
fld  ds:dbl_1043810 +
mov eax [ebp-24h] +
mov ecx [eax] +
sub esp 10h +
fst  [esp+30h+var_28] +
fstp  [esp+30h+var_30] +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jge loc_102FBE7  +
fld  ds:dbl_1043810 +
sub esp 10h +
fst  [esp+44h+var_3C] +
mov eax [ebp-24h] +
fstp  [esp+44h+var_44] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_102FBE7  +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-38h] +
push edx  +
lea edx [ebp-34h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_102FC06  +
push dword ptr [ebp-38h]  +
mov eax [ebp-24h] +
push dword ptr [ebp-34h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_102FC1D  +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_102FC32  +
mov eax [ebp-24h] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_102FC47  +
mov eax [edi] +
lea ecx [ebp-2Ch] +
push ecx  +
push edi  +
call dword ptr [eax+24h]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_1012F4D  +
mov eax [ebp-28h] +
push dword ptr [ebp-2Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_1012F61  +
mov eax [ebp-24h] +
push dword ptr [ebp-2Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_1012F75  +
mov eax [ebp-24h] +
mov ecx [eax] +
push ebx  +
push dword ptr [ebp-28h]  +
push eax  +
call dword ptr [ecx+2Ch]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_102FC98  +
mov eax [ebp-24h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
jmp loc_102FCA9  +
***
mov ecx [ebp-274h] +
call ?Delete@CException@@QAEXXZ  +
mov eax offset loc_10439F7 +
retn   +
mov esi [ebp-268h] +
xor ebx ebx +
cmp esi ebx +
jnz loc_102FFF0  +
***
cmp [ebp-26Ch] ebx +
jz loc_103000F  +
lea eax [ebp-21Ch] +
push eax  +
call ds:DeleteFileW  +
jmp loc_103000F  +
***
mov eax [ebp+arg_10] +
mov eax [eax] +
test eax eax +
jz loc_103C687  +
push eax  +
push [ebp+arg_4]  +
call sub_1063861  +
jmp loc_103C69C  +
***
lea eax [ebp+FileName] +
push eax  +
call ds:DeleteFileW  +
jmp loc_102F28E  +
***
mov eax 80070057h +
jmp loc_1015CB2  +
***
call sub_1063A18  +
jmp loc_1015EBB  +
***
mov eax 80004003h +
jmp loc_1015DC9  +
***
mov esi [ebp+8] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_1015DC7  +
***
xor eax eax +
jmp loc_1015D78  +
***
mov edi ebx +
jmp loc_1015DEA  +
***
call sub_1063A18  +
jmp loc_1015D77  +
***
mov eax [ebp-14h] +
mov [ebp-18h] eax +
mov eax [ebp+8] +
and dword ptr [eax] 0 +
mov eax offset loc_1043AB6 +
retn   +
mov esi [ebp+8] +
jmp loc_1016192  +
***
mov eax 80004003h +
jmp loc_101A55D  +
***
mov esi [ebp+8] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_101A55B  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1020926  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1020935  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1020944  +
***
mov eax 80004003h +
jmp loc_101B277  +
lea eax [ebp+0Ch] +
push eax  +
push offset stru_101B828  +
push 4017h  +
push ebx  +
push offset stru_101B848  +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi ebx +
jge loc_101B219  +
mov eax [ebp+0Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1043B3A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
jmp loc_101B277  +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1043B29  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1043B29  +
mov eax [ebp+8] +
jmp loc_1043B44  +
***
mov eax [ebp-10h] +
jmp loc_10199F0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
jmp loc_10199E8  +
cmp eax esi +
jz loc_1043B74  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
jmp loc_10199E8  +
***
mov eax [edi] +
cmp eax ebx +
jz loc_101993D  +
mov [edi] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101993D  +
***
mov edi ds:GetSysColor +
push 8  +
call edi  +
push 0Dh  +
mov [ebp-80h] eax +
call edi  +
push 5  +
mov [ebp-7Ch] eax +
call edi  +
push 8  +
mov [ebp-78h] eax +
call edi  +
mov [esi+6Ch] eax +
jmp loc_101B0BA  +
***
mov dword ptr [esi+80h] 3E8h +
jmp loc_101056F  +
mov dword ptr [esi+80h] 1F4h +
jmp loc_101056F  +
mov dword ptr [esi+80h] 0C8h +
jmp loc_101056F  +
fld  ds:dbl_1043CB0 +
fcomp  qword ptr [esi+90h] +
fnstsw  ax +
test ah 1 +
jnz loc_1043C42  +
mov dword ptr [esi+80h] 14h +
jmp loc_101056F  +
test ah 1 +
jz loc_1043BF9  +
fld  ds:dbl_1010290 +
fcomp  qword ptr [esi+90h] +
fnstsw  ax +
test ah 1 +
jz loc_1043C42  +
fld  ds:dbl_1043CA8 +
fcomp  qword ptr [esi+90h] +
fnstsw  ax +
test ah 1 +
jz loc_1043C64  +
fld  ds:dbl_1043CA0 +
jmp loc_1043C79  +
fnstsw  ax +
test ah 1 +
jnz loc_1043C51  +
mov dword ptr [esi+80h] 0Ah +
jmp loc_101056F  +
fld  ds:dbl_1010290 +
fcomp  qword ptr [esi+90h] +
fnstsw  ax +
test ah 1 +
jnz loc_1043C73  +
mov dword ptr [esi+80h] 5 +
jmp loc_101056F  +
fld  ds:dbl_1010598 +
fcomp  qword ptr [esi+90h] +
fnstsw  ax +
test ah 1 +
jnz loc_1043C95  +
mov dword ptr [esi+80h] 2 +
jmp loc_101056F  +
mov [esi+80h] ebx +
jmp loc_101056F  +
***
call ds:GetOpenFileNameW  +
jmp loc_103C00B  +
push 2  +
pop eax  +
jmp locret_103C013  +
***
pop ebp  +
retn 4  +
***
retn   +
***
pop ebp  +
retn 4  +
***
pop ebp  +
retn 4  +
***
lea eax [ecx+50h] +
jmp loc_100BE11  +
***
xor ecx ecx +
jmp loc_100CF20  +
push 0  +
lea ecx [ebp+var_C] +
call sub_104BD15  +
push offset dword_1082CC0  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
mov al byte_108BC08 +
cmp al 4 +
jnb loc_1043D11  +
test al al +
jnz loc_100C0CF  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_100C0CF  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_100C0CF  +
cmp eax ecx +
jnz loc_100C0CF  +
push [ebp+arg_0]  +
push offset dword_1043DD0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D97  +
jmp loc_100C0CF  +
mov ecx [edi+14h] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
jmp loc_100C0D9  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_1043D7F  +
test al al +
jnz loc_100C10D  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_100C10D  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_100C10D  +
cmp eax ecx +
jnz loc_100C10D  +
push offset dword_1043DE0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
jmp loc_100C10D  +
***
add al [eax] +
int 3  +
***
mov eax [esi+0Ch] +
test eax eax +
jz loc_1043E10  +
push eax  +
call sub_100C26D  +
mov esi [esi] +
cmp esi [edi+6Ch] +
jz loc_101E432  +
jmp loc_1043E03  +
***
mov esi [esi] +
jmp loc_100E517  +
***
mov eax [eax] +
jmp loc_100DE83  +
***
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFF4h +
push edi  +
call sub_10336A5  +
mov byte ptr [esi+8] 0 +
jmp loc_10333DD  +
***
push offset aListTTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
push offset aListTTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
cmp byte ptr [esi+8] 0 +
jnz loc_1043EC9  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1043EC9  +
mov ecx [esi+0Ch] +
call sub_100BB97  +
cmp eax [ebp+8] +
jnz loc_1043EC9  +
mov ecx [esi+0Ch] +
call sub_100C000  +
cmp eax [ebp+0Ch] +
jnz loc_1043EC9  +
mov ecx [esi+0Ch] +
call sub_1009939  +
cmp eax [ebp+10h] +
jz loc_1043ED6  +
mov esi [esi] +
cmp esi [edi+60h] +
jz loc_1033652  +
jmp loc_1043E96  +
mov byte ptr [esi+8] 1 +
mov esi [esi+0Ch] +
test esi esi +
jz loc_1033652  +
jmp loc_1033698  +
***
and dword ptr [esi+8] 0 +
jmp loc_1029C25  +
***
mov eax [eax+8] +
jmp loc_1025613  +
***
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_102614E  +
jmp loc_102559E  +
***
test al al +
jz loc_1043F63  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] esi +
call sub_1014A7D  +
mov esi [ebp+arg_8] +
cmp esi [ebp+var_4] +
jz loc_1043F5B  +
lea eax [esi+0Ch] +
push eax  +
mov ecx edi +
call sub_102E11A  +
test al al +
jz loc_1043F63  +
mov eax [ebp+arg_4] +
jmp loc_102602B  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
call sub_1067585  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_1026045  +
***
xor esi esi +
inc esi  +
mov [ebp+var_C] esi +
call sub_102801C  +
and [ebp+var_10] 0 +
mov ebx 2432h +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 28Ch +
call sub_102801C  +
and [ebp+var_10] 0 +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 28Dh +
call sub_102801C  +
and [ebp+var_10] 0 +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 260h +
call sub_102801C  +
and [ebp+var_10] 0 +
mov dword ptr [eax] 243Ah +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
and [ebp+var_10] 0 +
mov dword ptr [eax] 2434h +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 2BDh +
call sub_102801C  +
and [ebp+var_10] 0 +
mov dword ptr [eax] 2434h +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 292h +
call sub_102801C  +
and [ebp+var_10] 0 +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 28Fh +
call sub_102801C  +
and [ebp+var_10] 0 +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 291h +
call sub_102801C  +
and [ebp+var_10] 0 +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 290h +
call sub_102801C  +
and [ebp+var_10] 0 +
mov [eax] ebx +
mov [ebp+var_C] esi +
mov [ebp+var_14] 293h +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
call sub_102801C  +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov dword ptr [eax] 2430h +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 3 +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
add ebx 12h +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 4 +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov dword ptr [eax] 2442h +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 5 +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov dword ptr [eax] 2442h +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 6 +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov [eax] ebx +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 7 +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov dword ptr [eax] 243Eh +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 8 +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov dword ptr [eax] 2440h +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 9 +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov dword ptr [eax] 2440h +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
mov [ebp+var_10] 0Ah +
mov [ebp+var_C] esi +
mov [ebp+var_14] esi +
call sub_102801C  +
mov dword ptr [eax] 243Eh +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
mov [ebp+var_14] 2BDh +
lea eax [ebp+var_14] +
push eax  +
mov ecx edi +
call sub_102801C  +
mov dword ptr [eax] 2430h +
jmp loc_1027FF4  +
***
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] edi +
call sub_100C2F0  +
mov ecx [ebp+arg_8] +
cmp ecx [ebp+var_4] +
jz loc_10441E5  +
mov eax [esi] +
cmp eax [ecx+0Ch] +
jge loc_10441FC  +
mov eax [ebp+arg_4] +
mov edx [eax+8] +
cmp byte ptr [edx+15h] 0 +
push esi  +
jnz loc_102182B  +
push ecx  +
jmp loc_1021871  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
call sub_1067628  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_102183B  +
***
push 4  +
pop eax  +
jmp loc_101BAE8  +
or eax 2 +
jmp loc_101BAF1  +
or eax 8 +
jmp loc_101BAFA  +
or eax 10h +
jmp loc_101BB03  +
***
mov ax [edx] +
pop esi  +
retn   +
cmp [esi+3Ch] ecx +
jnb loc_1044241  +
mov [esi+3Ch] ecx +
push dword ptr [esi+3Ch]  +
mov ecx esi +
push dword ptr [eax]  +
mov eax [esi+10h] +
push dword ptr [eax]  +
call sub_102CCD5  +
mov eax [esi+20h] +
mov eax [eax] +
mov ax [eax] +
pop esi  +
retn   +
***
mov eax [esi+10h] +
mov [eax] edi +
mov eax [esi+20h] +
and dword ptr [eax] 0 +
mov eax [esi+30h] +
sar edi 1 +
mov [eax] edi +
jmp loc_101D705  +
***
push 1  +
call sub_1067FF0  +
jmp loc_1020537  +
***
mov eax [esi] +
cmp eax [edi+0Ch] +
jge loc_10442F8  +
push esi  +
push edi  +
push 1  +
jmp loc_1027027  +
mov eax [esi] +
cmp eax [edi+0Ch] +
jge loc_10442BE  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] edi +
call sub_10255DD  +
mov ecx [ebp+arg_8] +
mov eax [esi] +
cmp [ecx+0Ch] eax +
jge loc_10442BE  +
mov eax [ecx+8] +
cmp byte ptr [eax+1Dh] 0 +
push esi  +
jz loc_10442BB  +
push ecx  +
jmp loc_1027023  +
push edi  +
jmp loc_10442F1  +
mov eax [esi] +
cmp [edi+0Ch] eax +
jge loc_10442F8  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] edi +
call sub_1014A7D  +
mov ecx [ebp+arg_8] +
cmp ecx [ebp+var_4] +
jz loc_10442DF  +
mov eax [esi] +
cmp eax [ecx+0Ch] +
jge loc_10442F8  +
mov eax [ebp+arg_4] +
mov edx [eax+8] +
cmp byte ptr [edx+1Dh] 0 +
push esi  +
jnz loc_1027022  +
push ecx  +
push 1  +
jmp loc_1027025  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
call sub_1068122  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_1027032  +
***
mov eax [esi+8] +
push ebx  +
or eax 4 +
push eax  +
mov ecx esi +
call sub_101D3B8  +
jmp loc_101C4FD  +
push esi  +
call sub_106B707  +
pop ecx  +
jmp loc_101C509  +
***
mov dword ptr [esi] offset dword_104A950 +
mov dword ptr [esi+4] offset off_101CF14 +
mov [ebp-4] eax +
mov dword ptr [ebp-10h] 1 +
jmp loc_101C4A1  +
***
cmp dword ptr [esi+18h] 8 +
jb loc_1044357  +
mov eax [esi+4] +
jmp loc_104435A  +
lea eax [esi+4] +
lea ecx [ebp-14h] +
push ecx  +
lea ecx [ebp-10h] +
push ecx  +
push ebx  +
push 20019h  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push dword ptr [ebp+8]  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_104443A  +
cmp dword ptr [esi+34h] 8 +
jb loc_1044388  +
mov eax [esi+20h] +
jmp loc_104438B  +
lea eax [esi+20h] +
lea ecx [ebp-14h] +
push ecx  +
push ebx  +
lea ecx [ebp-1Ch] +
push ecx  +
push ebx  +
push eax  +
push dword ptr [ebp-10h]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_104443A  +
mov eax [ebp-14h] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10067E4  +
cmp dword ptr [esi+34h] 8 +
pop ecx  +
mov edi eax +
jb loc_10443CC  +
mov esi [esi+20h] +
jmp loc_10443CF  +
add esi 20h +
lea eax [ebp-14h] +
push eax  +
push edi  +
lea eax [ebp-1Ch] +
push eax  +
push ebx  +
push esi  +
push dword ptr [ebp-10h]  +
call ds:RegQueryValueExW  +
cmp eax ebx +
jnz loc_1044433  +
push edi  +
lea ecx [ebp-48h] +
call sub_10142C5  +
push 1  +
push 1  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-0CCh] +
mov [ebp-4] ebx +
call sub_1068229  +
push ebx  +
push 1  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call sub_1012F94  +
mov ecx [ebp-2Ch] +
lea eax [ebp-0CCh] +
push eax  +
call sub_106F598  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0CCh] +
call sub_1067FA6  +
push edi  +
call sub_1006809  +
pop ecx  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
jmp loc_102BEE2  +
***
push 1  +
push 2  +
lea ecx [ebp-0CCh] +
call sub_10682A1  +
mov ecx [ebp-48h] +
lea eax [ebp-0CCh] +
push eax  +
mov [ebp-4] ebx +
call sub_106F585  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-0CCh] +
call sub_1068101  +
cmp dword ptr [esi+18h] 8 +
jb loc_1044483  +
mov eax [esi+4] +
jmp loc_1044486  +
lea eax [esi+4] +
lea ecx [ebp-4Ch] +
push ecx  +
lea ecx [ebp-34h] +
push ecx  +
push ebx  +
push 20006h  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push dword ptr [ebp-3Ch]  +
call ds:RegCreateKeyExW  +
cmp eax ebx +
jnz loc_10444DE  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_10444B1  +
lea eax [ebp-28h] +
cmp dword ptr [esi+34h] 8 +
jb loc_10444BC  +
mov esi [esi+20h] +
jmp loc_10444BF  +
add esi 20h +
mov ecx [ebp-18h] +
lea ecx [ecx+ecx+2] +
push ecx  +
push eax  +
push 1  +
push ebx  +
push esi  +
push dword ptr [ebp-34h]  +
call ds:RegSetValueExW  +
push dword ptr [ebp-34h]  +
call ds:RegCloseKey  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0CCh] +
call sub_1067E79  +
jmp loc_101E4BA  +
***
xor eax eax +
pop esi  +
retn   +
***
xor eax eax +
pop esi  +
retn   +
***
call GdipCreateBitmapFromStreamICM  +
jmp loc_1030F8A  +
xor eax eax +
pop ebp  +
retn 8  +
***
push 0C3E6h  +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp+14h]  +
mov [ebp-94h] edi +
fild  dword ptr [ebp-94h] +
test edi edi +
jge loc_1044538  +
fadd  ds:dbl_104A350 +
fmul  ds:dbl_1044570 +
push ecx  +
push ecx  +
lea eax [ebp-94h] +
fstp  [esp+14h+var_14] +
push eax  +
call sub_10122ED  +
mov byte ptr [ebp-4] 4 +
jmp loc_1012238  +
fadd  ds:dbl_104A350 +
jmp loc_101221D  +
fadd  ds:dbl_104A350 +
jmp loc_1011DF8  +
***
and [ebp+arg_8] 0 +
push 20h  +
pop eax  +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+arg_8] +
push eax  +
call sub_106840C  +
push 0Ch  +
call GdipAlloc  +
mov esi [ebp+arg_8] +
test eax eax +
jz loc_10445AF  +
push 0  +
push esi  +
mov ecx eax +
call sub_1033599  +
jmp loc_10445B1  +
xor eax eax +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
test esi esi +
jz loc_1016FE6  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_1016FE6  +
***
mov esi [ebp-18h] +
jmp loc_10445F4  +
mov eax [ebp+8] +
push dword ptr [eax+4]  +
mov ecx [ebp-14h] +
lea eax [ebp-18h] +
push eax  +
call sub_100BA88  +
mov esi [esi] +
cmp esi [ebp+0Ch] +
jnz loc_10445E0  +
push 0  +
push 0  +
call _CxxThrowException  +
mov ecx [ebp-14h] +
call sub_100BAC8  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
push dword ptr [ebp-14h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_10260C8  +
mov [eax] ebx +
jmp loc_10260C8  +
mov edx [edx+8] +
cmp byte ptr [edx+1Ch] 0 +
jz loc_102612C  +
cmp esi [ecx+8] +
jnz loc_1044682  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_10147F3  +
mov eax [esi+4] +
mov byte ptr [eax+1Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+1Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_102614E  +
jmp loc_1026127  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_102614E  +
jmp loc_1026109  +
***
mov eax [esi] +
cmp eax [edi+0Ch] +
jge loc_104472D  +
push esi  +
push edi  +
push 1  +
jmp loc_10273E4  +
mov eax [esi] +
cmp eax [edi+0Ch] +
jge loc_10446F3  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] edi +
call sub_10255DD  +
mov ecx [ebp+arg_8] +
mov eax [esi] +
cmp [ecx+0Ch] eax +
jge loc_10446F3  +
mov eax [ecx+8] +
cmp byte ptr [eax+1Dh] 0 +
push esi  +
jz loc_10446F0  +
push ecx  +
jmp loc_10273E0  +
push edi  +
jmp loc_1044726  +
mov eax [esi] +
cmp [edi+0Ch] eax +
jge loc_104472D  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] edi +
call sub_1014A7D  +
mov ecx [ebp+arg_8] +
cmp ecx [ebp+var_4] +
jz loc_1044714  +
mov eax [esi] +
cmp eax [ecx+0Ch] +
jge loc_104472D  +
mov eax [ebp+arg_4] +
mov edx [eax+8] +
cmp byte ptr [edx+1Dh] 0 +
push esi  +
jnz loc_10273DF  +
push ecx  +
push 1  +
jmp loc_10273E2  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
call sub_10685AF  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_10273EF  +
***
mov dword ptr [edi+8] 28Bh +
jmp loc_1030E2C  +
***
dec eax  +
dec eax  +
jz loc_104479A  +
dec eax  +
dec eax  +
jz loc_104478D  +
dec eax  +
jz loc_1044780  +
dec eax  +
jz loc_1044773  +
dec eax  +
jnz loc_1007455  +
mov eax 0C480h +
lea ecx [eax+32h] +
jmp loc_100745D  +
mov eax 0C482h +
lea ecx [eax+32h] +
jmp loc_100745D  +
mov eax 0C47Fh +
lea ecx [eax+32h] +
jmp loc_100745D  +
mov eax 0C483h +
lea ecx [eax+32h] +
jmp loc_100745D  +
mov eax 0C481h +
lea ecx [eax+32h] +
jmp loc_100745D  +
***
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
jmp locret_101E5C8  +
***
mov eax [ecx] +
lea edx [esi+4] +
push edx  +
call dword ptr [eax+4]  +
jmp loc_1009EB9  +
***
xor eax eax +
test esi esi +
setz al  +
mov esi eax +
jmp loc_103D4A5  +
***
xor ecx ecx +
jmp loc_100BC18  +
push 0  +
lea ecx [ebp+var_C] +
call sub_104BD15  +
push offset dword_1082CC0  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
cmp [ebp+arg_0] 54C5h +
jnz loc_103D38A  +
mov ebx [ebp+arg_10] +
test ebx ebx +
jz loc_103D38A  +
call sub_103D399  +
mov ecx [esi+10h] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
test eax eax +
jz loc_103D38A  +
xor eax eax +
lea edi [ebp+var_38] +
stos   +
stos   +
stos   +
lea ecx [ebp+var_38] +
push ecx  +
push offset dword_10166A0  +
stos   +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+0Ch]  +
lea eax [ebp+arg_10] +
push eax  +
lea eax [ebp+var_38] +
push eax  +
call ds:PropVariantToUInt32  +
mov ecx esi +
call sub_103D489  +
mov ecx offset unk_108AF60 +
test eax eax +
jnz loc_1044855  +
push 1Fh  +
jmp loc_1044857  +
push 20h  +
call sub_1006359  +
mov ecx [ebp+arg_10] +
mov [ebp+var_14] 7 +
mov [ebp+var_18] offset off_100B560 +
mov [ebp+var_10] ecx +
and [ebp+var_4] 0 +
lea ecx [ebp+var_18] +
push ecx  +
mov ecx eax +
call sub_1035687  +
or [ebp+var_4] 0FFFFFFFFh +
mov ecx esi +
mov [ebp+var_18] offset off_100B0C0 +
call sub_10695EE  +
jmp loc_103D38A  +
***
mov dword ptr [ebp-4] 9 +
lea edi [ebp-94h] +
mov eax [edi-4] +
mov ecx [ebp+0Ch] +
mov [ebp-10h] eax +
mov eax [edi] +
mov [ebp-0Ch] eax +
mov eax [edi+4] +
mov [ebp-8] eax +
lea eax [ebp-10h] +
push eax  +
call sub_1010DFE  +
dec dword ptr [ebp-4]  +
sub edi 0Ch +
cmp dword ptr [ebp-4] 0 +
jge loc_10448A3  +
lea edi [ebp-1Ch] +
mov dword ptr [ebp-4] 0Ah +
mov eax [edi-4] +
mov ecx [ebp+0Ch] +
mov [ebp-10h] eax +
mov eax [edi] +
mov [ebp-0Ch] eax +
mov eax [edi+4] +
mov [ebp-8] eax +
lea eax [ebp-10h] +
push eax  +
call sub_1010DFE  +
sub edi 0Ch +
dec dword ptr [ebp-4]  +
jnz loc_10448D6  +
push 0Ah  +
pop eax  +
xor edi edi +
sub eax [ebx+0Ch] +
jz loc_1044925  +
mov [ebp-10h] edi +
mov [ebp-0Ch] edi +
mov [ebp-8] edi +
mov ecx [ebp+0Ch] +
lea eax [ebp-10h] +
push eax  +
call sub_1010DFE  +
push 0Ah  +
pop eax  +
sub eax [ebx+0Ch] +
inc edi  +
cmp edi eax +
jb loc_104490E  +
mov edi [ebx+8] +
cmp edi [edi] +
jz loc_1016534  +
and dword ptr [ebp-8] 0 +
mov [ebp-0Ch] esi +
mov edi [edi+4] +
mov eax [edi+8] +
mov ecx [ebp+0Ch] +
mov [ebp-10h] eax +
lea eax [ebp-10h] +
push eax  +
call sub_1010DFE  +
mov eax [ebx+8] +
cmp edi [eax] +
jz loc_1016534  +
jmp loc_1044937  +
***
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
jmp loc_1044964  +
mov ecx [ebp-4] +
mov eax [ecx+8] +
mov ecx [ebp+0Ch] +
mov [ebp-10h] eax +
lea eax [ebp-10h] +
push eax  +
call sub_1010DFE  +
mov eax [ebp-4] +
mov eax [eax] +
mov [ebp-4] eax +
cmp eax [ebx+8] +
jz loc_101650C  +
jmp loc_1044961  +
***
xor eax eax +
stos   +
stos   +
stos   +
stos   +
jmp loc_1011A47  +
***
mov edx [eax] +
push ebx  +
push edi  +
mov ecx eax +
call dword ptr [edx+0C4h]  +
mov edi eax +
lea ebx [esi+2Ch] +
push ebx  +
lea ecx [edi+24h] +
call ??4CString@@QAEABV0@ABV0@@Z  +
cmp dword ptr [esi+28h] 0 +
jz loc_10449C4  +
mov ecx [esi+1Ch] +
xor eax eax +
inc eax  +
mov [ecx] eax +
mov edx [edi] +
push eax  +
mov ecx edi +
call dword ptr [edx+64h]  +
mov ecx [esi+18h] +
push ebx  +
call ??4CString@@QAEABV0@ABV0@@Z  +
mov ecx [esi+14h] +
push ebx  +
call ??4CString@@QAEABV0@ABV0@@Z  +
and dword ptr [esi+20h] 0 +
pop edi  +
pop ebx  +
jmp loc_10178BE  +
***
lea eax [ebp-12B8h] +
push eax  +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsWow64Process  +
mov ebx 104h +
test eax eax +
jz loc_1045739  +
cmp [ebp-12B8h] edi +
jz loc_10450CA  +
lea eax [ebp-12E8h] +
push eax  +
call ds:Wow64DisableWow64FsRedirection  +
test eax eax +
jz loc_1045739  +
push 1  +
push edi  +
push edi  +
mov [ebp-12A0h] edi +
call ds:OpenSCManagerW  +
mov [ebp-128Ch] eax +
cmp eax edi +
jz loc_10450B7  +
mov ebx ds:OpenServiceW +
push 1  +
push offset ServiceName  +
push eax  +
call ebx  +
mov esi ds:GetProcessHeap +
mov [ebp-129Ch] eax +
cmp eax edi +
jz loc_1044B41  +
lea eax [ebp-12A8h] +
push eax  +
push edi  +
push edi  +
push dword ptr [ebp-129Ch]  +
call ds:QueryServiceConfigW  +
test eax eax +
jnz loc_1044B35  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_1044B35  +
push dword ptr [ebp-12A8h]  +
push edi  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-1288h] eax +
cmp eax edi +
jnz loc_1044AEC  +
mov dword ptr [ebp-12A0h] 1 +
jmp loc_1044B35  +
lea eax [ebp-12A8h] +
push eax  +
push dword ptr [ebp-12A8h]  +
push dword ptr [ebp-1288h]  +
push dword ptr [ebp-129Ch]  +
call ds:QueryServiceConfigW  +
test eax eax +
jz loc_1044B25  +
mov eax [ebp-1288h] +
cmp dword ptr [eax+4] 4 +
jz loc_1044B25  +
mov dword ptr [ebp-12A0h] 1 +
push dword ptr [ebp-1288h]  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
push dword ptr [ebp-129Ch]  +
call ds:CloseServiceHandle  +
push dword ptr [ebp-128Ch]  +
call ds:CloseServiceHandle  +
cmp [ebp-12A0h] edi +
jz loc_10450B7  +
push 1  +
push edi  +
push edi  +
mov [ebp-129Ch] edi +
call ds:OpenSCManagerW  +
mov [ebp-1288h] eax +
cmp eax edi +
jz loc_10450B7  +
push 1  +
push offset aSppsvc  +
push eax  +
call ebx  +
mov [ebp-1290h] eax +
cmp eax edi +
jz loc_1044C22  +
mov ebx ds:QueryServiceConfigW +
lea ecx [ebp-12A0h] +
push ecx  +
push edi  +
push edi  +
push eax  +
call ebx  +
test eax eax +
jnz loc_1044C16  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_1044C16  +
push dword ptr [ebp-12A0h]  +
push edi  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-128Ch] eax +
cmp eax edi +
jnz loc_1044BD6  +
mov dword ptr [ebp-129Ch] 1 +
jmp loc_1044C16  +
lea ecx [ebp-12A0h] +
push ecx  +
push dword ptr [ebp-12A0h]  +
push eax  +
push dword ptr [ebp-1290h]  +
call ebx  +
test eax eax +
jz loc_1044C06  +
mov eax [ebp-128Ch] +
cmp dword ptr [eax+4] 4 +
jz loc_1044C06  +
mov dword ptr [ebp-129Ch] 1 +
push dword ptr [ebp-128Ch]  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
push dword ptr [ebp-1290h]  +
call ds:CloseServiceHandle  +
push dword ptr [ebp-1288h]  +
call ds:CloseServiceHandle  +
cmp [ebp-129Ch] edi +
jz loc_10450B7  +
lea eax [ebp-1284h] +
push eax  +
push edi  +
push edi  +
push 25h  +
push edi  +
call ds:SHGetFolderPathW  +
test eax eax +
jl loc_10450B7  +
lea eax [ebp-1284h] +
push eax  +
mov ebx 104h +
push ebx  +
lea eax [ebp-0A64h] +
push eax  +
call sub_102F4F0  +
test eax eax +
jl loc_10450B7  +
push offset aSppuinotify_dl  +
push ebx  +
lea eax [ebp-0A64h] +
push eax  +
call sub_103C4AF  +
test eax eax +
jl loc_10450B7  +
lea eax [ebp-0A64h] +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_10450B7  +
lea eax [ebp-12B0h] +
push eax  +
lea eax [ebp-0A64h] +
push eax  +
push edi  +
mov [ebp-1290h] edi +
call GetFileVersionInfoSizeExW  +
mov [ebp-128Ch] eax +
cmp eax edi +
jbe loc_10450B7  +
push eax  +
push edi  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
cmp ebx edi +
jz loc_1044DC4  +
push ebx  +
push dword ptr [ebp-128Ch]  +
lea eax [ebp-0A64h] +
push dword ptr [ebp-12B0h]  +
push eax  +
push edi  +
call GetFileVersionInfoExW  +
test eax eax +
jz loc_1044DAD  +
lea eax [ebp-12B4h] +
push eax  +
lea eax [ebp-12BCh] +
push eax  +
push offset SubBlock  +
push ebx  +
call VerQueryValueW  +
test eax eax +
jz loc_1044DAD  +
cmp dword ptr [ebp-12B4h] 4 +
jb loc_1044DAD  +
mov eax [ebp-12BCh] +
movzx ecx word ptr [eax+2] +
movzx eax word ptr [eax] +
push ecx  +
push eax  +
push offset aStringfileinfo  +
lea eax [ebp-1E4h] +
push 30h  +
push eax  +
call sub_1005CB4  +
add esp 14h +
test eax eax +
jl loc_1044DAD  +
lea eax [ebp-12C4h] +
push eax  +
lea eax [ebp-12CCh] +
push eax  +
lea eax [ebp-1E4h] +
push eax  +
push ebx  +
call VerQueryValueW  +
test eax eax +
jz loc_1044DAD  +
push dword ptr [ebp-12C4h]  +
lea eax [ebp-0A64h] +
push dword ptr [ebp-12CCh]  +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
inc eax  +
pop ecx  +
inc eax  +
push eax  +
call ds:wcsncmp  +
add esp 0Ch +
test eax eax +
jnz loc_1044DAD  +
mov dword ptr [ebp-1290h] 1 +
push ebx  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp [ebp-1290h] edi +
jz loc_10450B7  +
lea eax [ebp-1284h] +
push eax  +
mov ebx 104h +
push ebx  +
lea eax [ebp-654h] +
push eax  +
call sub_102F4F0  +
test eax eax +
jl loc_10450B7  +
push offset aSlui_exe  +
push ebx  +
lea eax [ebp-654h] +
push eax  +
call sub_103C4AF  +
test eax eax +
jl loc_10450B7  +
lea eax [ebp-654h] +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_10450B7  +
lea eax [ebp-12D4h] +
push eax  +
lea eax [ebp-654h] +
push eax  +
push edi  +
mov [ebp-128Ch] edi +
call GetFileVersionInfoSizeExW  +
mov ebx eax +
cmp ebx edi +
jbe loc_10450B7  +
push ebx  +
push edi  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-1288h] eax +
cmp eax edi +
jz loc_1044F38  +
push eax  +
push ebx  +
push dword ptr [ebp-12D4h]  +
lea eax [ebp-654h] +
push eax  +
push edi  +
call GetFileVersionInfoExW  +
test eax eax +
jz loc_1044F1C  +
lea eax [ebp-12DCh] +
push eax  +
lea eax [ebp-12E4h] +
push eax  +
push offset SubBlock  +
push dword ptr [ebp-1288h]  +
call VerQueryValueW  +
test eax eax +
jz loc_1044F1C  +
cmp dword ptr [ebp-12DCh] 4 +
jb loc_1044F1C  +
mov eax [ebp-12E4h] +
movzx ecx word ptr [eax+2] +
movzx eax word ptr [eax] +
push ecx  +
push eax  +
push offset aStringfileinfo  +
lea eax [ebp-64h] +
push 30h  +
push eax  +
call sub_1005CB4  +
add esp 14h +
test eax eax +
jl loc_1044F1C  +
lea eax [ebp-12ECh] +
push eax  +
lea eax [ebp-12F4h] +
push eax  +
lea eax [ebp-64h] +
push eax  +
push dword ptr [ebp-1288h]  +
call VerQueryValueW  +
test eax eax +
jz loc_1044F1C  +
push dword ptr [ebp-12ECh]  +
lea eax [ebp-654h] +
push dword ptr [ebp-12F4h]  +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
inc eax  +
pop ecx  +
inc eax  +
push eax  +
call ds:wcsncmp  +
add esp 0Ch +
test eax eax +
jnz loc_1044F1C  +
mov dword ptr [ebp-128Ch] 1 +
push dword ptr [ebp-1288h]  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp [ebp-128Ch] edi +
jz loc_10450B7  +
lea eax [ebp-1284h] +
push eax  +
mov ebx 104h +
push ebx  +
lea eax [ebp-85Ch] +
push eax  +
call sub_102F4F0  +
test eax eax +
jl loc_10450B7  +
push offset aSppsvc_exe  +
push ebx  +
lea eax [ebp-85Ch] +
push eax  +
call sub_103C4AF  +
test eax eax +
jl loc_10450B7  +
lea eax [ebp-85Ch] +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_10450B7  +
lea eax [ebp-12FCh] +
push eax  +
lea eax [ebp-85Ch] +
push eax  +
push edi  +
mov [ebp-128Ch] edi +
call GetFileVersionInfoSizeExW  +
mov ebx eax +
cmp ebx edi +
jbe loc_10450B7  +
push ebx  +
push edi  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-1288h] eax +
cmp eax edi +
jz loc_10450B2  +
push eax  +
push ebx  +
push dword ptr [ebp-12FCh]  +
lea eax [ebp-85Ch] +
push eax  +
push edi  +
call GetFileVersionInfoExW  +
test eax eax +
jz loc_104509A  +
lea eax [ebp-1308h] +
push eax  +
lea eax [ebp-1310h] +
push eax  +
push offset SubBlock  +
push dword ptr [ebp-1288h]  +
call VerQueryValueW  +
test eax eax +
jz loc_104509A  +
cmp dword ptr [ebp-1308h] 4 +
jb loc_104509A  +
mov eax [ebp-1310h] +
movzx ecx word ptr [eax+2] +
movzx eax word ptr [eax] +
push ecx  +
push eax  +
push offset aStringfileinfo  +
lea eax [ebp-0C4h] +
push 30h  +
push eax  +
call sub_1005CB4  +
add esp 14h +
test eax eax +
jl loc_104509A  +
lea eax [ebp-1318h] +
push eax  +
lea eax [ebp-1320h] +
push eax  +
lea eax [ebp-0C4h] +
push eax  +
push dword ptr [ebp-1288h]  +
call VerQueryValueW  +
test eax eax +
jz loc_104509A  +
push dword ptr [ebp-1318h]  +
lea eax [ebp-85Ch] +
push dword ptr [ebp-1320h]  +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
inc eax  +
pop ecx  +
inc eax  +
push eax  +
call ds:wcsncmp  +
add esp 0Ch +
test eax eax +
jnz loc_104509A  +
mov dword ptr [ebp-128Ch] 1 +
push dword ptr [ebp-1288h]  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp [ebp-128Ch] edi +
jz loc_10450B7  +
xor esi esi +
inc esi  +
jmp loc_10450B9  +
xor esi esi +
push dword ptr [ebp-12E8h]  +
call ds:Wow64RevertWow64FsRedirection  +
jmp loc_104572C  +
push 1  +
push edi  +
push edi  +
mov [ebp-128Ch] edi +
call ds:OpenSCManagerW  +
mov [ebp-1298h] eax +
cmp eax edi +
jz loc_104572A  +
mov ebx ds:OpenServiceW +
push 1  +
push offset ServiceName  +
push eax  +
call ebx  +
mov esi ds:GetProcessHeap +
mov [ebp-1290h] eax +
cmp eax edi +
jz loc_10451AB  +
lea eax [ebp-129Ch] +
push eax  +
push edi  +
push edi  +
push dword ptr [ebp-1290h]  +
call ds:QueryServiceConfigW  +
test eax eax +
jnz loc_104519F  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_104519F  +
push dword ptr [ebp-129Ch]  +
push edi  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-1288h] eax +
cmp eax edi +
jnz loc_1045156  +
mov dword ptr [ebp-128Ch] 1 +
jmp loc_104519F  +
lea eax [ebp-129Ch] +
push eax  +
push dword ptr [ebp-129Ch]  +
push dword ptr [ebp-1288h]  +
push dword ptr [ebp-1290h]  +
call ds:QueryServiceConfigW  +
test eax eax +
jz loc_104518F  +
mov eax [ebp-1288h] +
cmp dword ptr [eax+4] 4 +
jz loc_104518F  +
mov dword ptr [ebp-128Ch] 1 +
push dword ptr [ebp-1288h]  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
push dword ptr [ebp-1290h]  +
call ds:CloseServiceHandle  +
push dword ptr [ebp-1298h]  +
call ds:CloseServiceHandle  +
cmp [ebp-128Ch] edi +
jz loc_104572A  +
push 1  +
push edi  +
push edi  +
mov [ebp-1290h] edi +
call ds:OpenSCManagerW  +
mov [ebp-1294h] eax +
cmp eax edi +
jz loc_104572A  +
push 1  +
push offset aSppsvc  +
push eax  +
call ebx  +
mov [ebp-1288h] eax +
cmp eax edi +
jz loc_104528C  +
mov ebx ds:QueryServiceConfigW +
lea ecx [ebp-128Ch] +
push ecx  +
push edi  +
push edi  +
push eax  +
call ebx  +
test eax eax +
jnz loc_1045280  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_1045280  +
push dword ptr [ebp-128Ch]  +
push edi  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-1298h] eax +
cmp eax edi +
jnz loc_1045240  +
mov dword ptr [ebp-1290h] 1 +
jmp loc_1045280  +
lea ecx [ebp-128Ch] +
push ecx  +
push dword ptr [ebp-128Ch]  +
push eax  +
push dword ptr [ebp-1288h]  +
call ebx  +
test eax eax +
jz loc_1045270  +
mov eax [ebp-1298h] +
cmp dword ptr [eax+4] 4 +
jz loc_1045270  +
mov dword ptr [ebp-1290h] 1 +
push dword ptr [ebp-1298h]  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
push dword ptr [ebp-1288h]  +
call ds:CloseServiceHandle  +
push dword ptr [ebp-1294h]  +
call ds:CloseServiceHandle  +
cmp [ebp-1290h] edi +
jz loc_104572A  +
lea eax [ebp-44Ch] +
push eax  +
push edi  +
push edi  +
push 25h  +
push edi  +
call ds:SHGetFolderPathW  +
test eax eax +
jl loc_104572A  +
lea eax [ebp-44Ch] +
push eax  +
mov ebx 104h +
push ebx  +
lea eax [ebp-0E74h] +
push eax  +
call sub_102F4F0  +
test eax eax +
jl loc_104572A  +
push offset aSppuinotify_dl  +
push ebx  +
lea eax [ebp-0E74h] +
push eax  +
call sub_103C4AF  +
test eax eax +
jl loc_104572A  +
lea eax [ebp-0E74h] +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_104572A  +
lea eax [ebp-1290h] +
push eax  +
lea eax [ebp-0E74h] +
push eax  +
push edi  +
mov [ebp-1298h] edi +
call GetFileVersionInfoSizeExW  +
mov [ebp-1294h] eax +
cmp eax edi +
jbe loc_104572A  +
push eax  +
push edi  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
cmp ebx edi +
jz loc_104542E  +
push ebx  +
push dword ptr [ebp-1294h]  +
lea eax [ebp-0E74h] +
push dword ptr [ebp-1290h]  +
push eax  +
push edi  +
call GetFileVersionInfoExW  +
test eax eax +
jz loc_1045417  +
lea eax [ebp-12ACh] +
push eax  +
lea eax [ebp-1314h] +
push eax  +
push offset SubBlock  +
push ebx  +
call VerQueryValueW  +
test eax eax +
jz loc_1045417  +
cmp dword ptr [ebp-12ACh] 4 +
jb loc_1045417  +
mov eax [ebp-1314h] +
movzx ecx word ptr [eax+2] +
movzx eax word ptr [eax] +
push ecx  +
push eax  +
push offset aStringfileinfo  +
lea eax [ebp-184h] +
push 30h  +
push eax  +
call sub_1005CB4  +
add esp 14h +
test eax eax +
jl loc_1045417  +
lea eax [ebp-12C0h] +
push eax  +
lea eax [ebp-12F0h] +
push eax  +
lea eax [ebp-184h] +
push eax  +
push ebx  +
call VerQueryValueW  +
test eax eax +
jz loc_1045417  +
push dword ptr [ebp-12C0h]  +
lea eax [ebp-0E74h] +
push dword ptr [ebp-12F0h]  +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
inc eax  +
pop ecx  +
inc eax  +
push eax  +
call ds:wcsncmp  +
add esp 0Ch +
test eax eax +
jnz loc_1045417  +
mov dword ptr [ebp-1298h] 1 +
push ebx  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp [ebp-1298h] edi +
jz loc_104572A  +
lea eax [ebp-44Ch] +
push eax  +
mov ebx 104h +
push ebx  +
lea eax [ebp-107Ch] +
push eax  +
call sub_102F4F0  +
test eax eax +
jl loc_104572A  +
push offset aSlui_exe  +
push ebx  +
lea eax [ebp-107Ch] +
push eax  +
call sub_103C4AF  +
test eax eax +
jl loc_104572A  +
lea eax [ebp-107Ch] +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_104572A  +
lea eax [ebp-1298h] +
push eax  +
lea eax [ebp-107Ch] +
push eax  +
push edi  +
mov [ebp-1294h] edi +
call GetFileVersionInfoSizeExW  +
mov ebx eax +
cmp ebx edi +
jbe loc_104572A  +
push ebx  +
push edi  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-1288h] eax +
cmp eax edi +
jz loc_10455AC  +
push eax  +
push ebx  +
push dword ptr [ebp-1298h]  +
lea eax [ebp-107Ch] +
push eax  +
push edi  +
call GetFileVersionInfoExW  +
test eax eax +
jz loc_1045590  +
lea eax [ebp-12C8h] +
push eax  +
lea eax [ebp-130Ch] +
push eax  +
push offset SubBlock  +
push dword ptr [ebp-1288h]  +
call VerQueryValueW  +
test eax eax +
jz loc_1045590  +
cmp dword ptr [ebp-12C8h] 4 +
jb loc_1045590  +
mov eax [ebp-130Ch] +
movzx ecx word ptr [eax+2] +
movzx eax word ptr [eax] +
push ecx  +
push eax  +
push offset aStringfileinfo  +
lea eax [ebp-244h] +
push 30h  +
push eax  +
call sub_1005CB4  +
add esp 14h +
test eax eax +
jl loc_1045590  +
lea eax [ebp-12D0h] +
push eax  +
lea eax [ebp-12F8h] +
push eax  +
lea eax [ebp-244h] +
push eax  +
push dword ptr [ebp-1288h]  +
call VerQueryValueW  +
test eax eax +
jz loc_1045590  +
push dword ptr [ebp-12D0h]  +
lea eax [ebp-107Ch] +
push dword ptr [ebp-12F8h]  +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
inc eax  +
pop ecx  +
inc eax  +
push eax  +
call ds:wcsncmp  +
add esp 0Ch +
test eax eax +
jnz loc_1045590  +
mov dword ptr [ebp-1294h] 1 +
push dword ptr [ebp-1288h]  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp [ebp-1294h] edi +
jz loc_104572A  +
lea eax [ebp-44Ch] +
push eax  +
mov ebx 104h +
push ebx  +
lea eax [ebp-0C6Ch] +
push eax  +
call sub_102F4F0  +
test eax eax +
jl loc_104572A  +
push offset aSppsvc_exe  +
push ebx  +
lea eax [ebp-0C6Ch] +
push eax  +
call sub_103C4AF  +
test eax eax +
jl loc_104572A  +
lea eax [ebp-0C6Ch] +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_104572A  +
lea eax [ebp-12D8h] +
push eax  +
lea eax [ebp-0C6Ch] +
push eax  +
push edi  +
mov [ebp-1294h] edi +
call GetFileVersionInfoSizeExW  +
mov ebx eax +
cmp ebx edi +
jbe loc_104572A  +
push ebx  +
push edi  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-1288h] eax +
cmp eax edi +
jz loc_10457FA  +
push eax  +
push ebx  +
push dword ptr [ebp-12D8h]  +
lea eax [ebp-0C6Ch] +
push eax  +
push edi  +
call GetFileVersionInfoExW  +
test eax eax +
jz loc_104570E  +
lea eax [ebp-131Ch] +
push eax  +
lea eax [ebp-12E0h] +
push eax  +
push offset SubBlock  +
push dword ptr [ebp-1288h]  +
call VerQueryValueW  +
test eax eax +
jz loc_104570E  +
cmp dword ptr [ebp-131Ch] 4 +
jb loc_104570E  +
mov eax [ebp-12E0h] +
movzx ecx word ptr [eax+2] +
movzx eax word ptr [eax] +
push ecx  +
push eax  +
push offset aStringfileinfo  +
lea eax [ebp-124h] +
push 30h  +
push eax  +
call sub_1005CB4  +
add esp 14h +
test eax eax +
jl loc_104570E  +
lea eax [ebp-1300h] +
push eax  +
lea eax [ebp-12A4h] +
push eax  +
lea eax [ebp-124h] +
push eax  +
push dword ptr [ebp-1288h]  +
call VerQueryValueW  +
test eax eax +
jz loc_104570E  +
push dword ptr [ebp-1300h]  +
lea eax [ebp-0C6Ch] +
push dword ptr [ebp-12A4h]  +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
inc eax  +
pop ecx  +
inc eax  +
push eax  +
call ds:wcsncmp  +
add esp 0Ch +
test eax eax +
jnz loc_104570E  +
mov dword ptr [ebp-1294h] 1 +
push dword ptr [ebp-1288h]  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp [ebp-1294h] edi +
jnz loc_10457FA  +
xor esi esi +
cmp esi edi +
jnz loc_10457FA  +
mov ebx 104h +
push 43h  +
call ds:GetSystemMetrics  +
test eax eax +
jnz loc_10457FA  +
push 1  +
push 1ACBh  +
push edi  +
call WinSqmIncrementDWORD  +
mov esi ds:InterlockedExchange +
push 1  +
push offset Target  +
call esi  +
test eax eax +
push ebx  +
lea eax [ebp-44Ch] +
push eax  +
jz loc_10457A0  +
push 0C804h  +
push offset __ImageBase  +
call ds:LoadStringW  +
test eax eax +
jz loc_10457FA  +
lea eax [ebp-44Ch] +
push eax  +
push edi  +
call ds:FindWindowW  +
cmp eax edi +
jz loc_10457FA  +
push eax  +
call ds:SetForegroundWindow  +
jmp loc_10457FA  +
push offset __ImageBase  +
call ds:GetModuleFileNameW  +
cmp eax edi +
jz loc_10457FA  +
cmp eax ebx +
jnz loc_10457BE  +
call ds:GetLastError  +
cmp eax 7Ah +
jz loc_10457FA  +
lea eax [ebp-44Ch] +
push eax  +
call ds:LoadLibraryW  +
test eax eax +
jz loc_10457FA  +
lea eax [ebp-12A4h] +
push eax  +
push edi  +
push edi  +
push offset sub_106A179  +
push edi  +
push edi  +
call ds:CreateThread  +
cmp eax edi +
jz loc_10457F2  +
push eax  +
call ds:CloseHandle  +
jmp loc_10457FA  +
push edi  +
push offset Target  +
call esi  +
pop esi  +
pop ebx  +
jmp loc_1016AE2  +
***
push [ebp+arg_0]  +
call _callnewh  +
pop ecx  +
test eax eax +
jnz loc_10067F3  +
test byte ptr dword_108EEF0 1 +
mov esi offset dword_108EEE4 +
jnz loc_1045940  +
or dword_108EEF0 1 +
mov ecx esi +
call sub_106AE6E  +
push offset loc_1082CAC  +
call sub_1013E9D  +
pop ecx  +
push esi  +
lea ecx [ebp+var_C] +
call sub_104BD74  +
push offset dword_1082CC0  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
call ds:__pctype_func  +
and dword ptr [ebx+0Ch] 0 +
mov [ebx+8] eax +
jmp loc_101D132  +
***
mov eax [edi+8] +
dec esi  +
lea eax [eax+esi*4] +
cmp dword ptr [eax] 0 +
jz loc_1020B7F  +
mov ecx [eax] +
call sub_1014D72  +
test eax eax +
jz loc_1020B7F  +
mov edx [eax] +
push 1  +
mov ecx eax +
call dword ptr [edx]  +
jmp loc_1020B7F  +
***
mov eax offset byte_10459A0 +
jmp loc_101C2B5  +
***
mov eax [ebp+lpWideCharStr] +
test eax eax +
jz loc_101C479  +
xor ecx ecx +
mov [eax] cx +
jmp loc_101C479  +
call ds:___lc_handle_func  +
mov esi [eax+8] +
call ds:___lc_codepage_func  +
mov ebx eax +
jmp loc_101C45B  +
mov esi [ebp+lpMultiByteStr] +
cmp dword ptr [esi] 0 +
mov al [edi] +
jz loc_1045A25  +
mov [esi+1] al +
mov eax ds:__mb_cur_max +
cmp dword ptr [eax] 1 +
jle loc_1045A0E  +
xor eax eax +
cmp [ebp+lpWideCharStr] eax +
setnz al  +
push eax  +
push [ebp+lpWideCharStr]  +
push 2  +
push esi  +
push 9  +
push ebx  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_1045A0E  +
and dword ptr [esi] 0 +
mov eax ds:__mb_cur_max +
mov eax [eax] +
jmp loc_101C474  +
and dword ptr [esi] 0 +
call ds:_errno  +
mov dword ptr [eax] 2Ah +
or eax 0FFFFFFFFh +
jmp loc_101C474  +
mov byte ptr [ebp+arg_4+3] al +
call ds:__pctype_func  +
movzx ecx byte ptr [ebp+arg_4+3] +
mov edx 8000h +
test [eax+ecx*2] dx +
jz loc_1045A7E  +
mov eax ds:__mb_cur_max +
mov eax [eax] +
cmp [ebp+arg_8] eax +
jnb loc_1045A56  +
mov al byte ptr [ebp+arg_4+3] +
push 0FFFFFFFEh  +
mov [esi] al +
pop eax  +
jmp loc_101C474  +
cmp eax 1 +
jle loc_1045A76  +
xor ecx ecx +
cmp [ebp+lpWideCharStr] ecx +
setnz cl  +
push ecx  +
push [ebp+lpWideCharStr]  +
push eax  +
push edi  +
push 9  +
push ebx  +
call ds:MultiByteToWideChar  +
test eax eax +
jnz loc_1045A02  +
cmp byte ptr [edi+1] 0 +
jz loc_1045A0E  +
jmp loc_1045A02  +
xor eax eax +
cmp [ebp+lpWideCharStr] eax +
setnz al  +
push eax  +
push [ebp+lpWideCharStr]  +
push 1  +
push edi  +
push 9  +
push ebx  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_1045A11  +
jmp loc_101C471  +
***
push dword ptr [esi+4]  +
push edi  +
push [ebp+arg_0]  +
call dword ptr [esi+8]  +
mov esi [esi] +
add esp 0Ch +
jmp loc_101D959  +
***
mov edi [eax] +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
test edi edi +
jz loc_101D931  +
jmp loc_1045AB7  +
mov edi [eax] +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
test edi edi +
jz loc_101D940  +
jmp loc_1045ACC  +
***
mov eax [esi+4] +
dec byte_108EF1C[eax]  +
mov eax [esi+4] +
cmp byte_108EF1C[eax] 0 +
jle loc_101DA2C  +
jmp loc_101DA41  +
***
pop ebp  +
jmp ds:abort  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_108A2A4 eax +
xor ebx ebx +
cmp dword_108A298 ebx +
jnz loc_1045B9D  +
push eax  +
call ds:_exit  +
***
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax 0FFh +
call sub_102E894  +
retn   +
***
cmp ecx 20Bh +
jnz loc_102A297  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_102A297  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_102A239  +
***
push offset sub_10089B1  +
call ds:__setusermatherr  +
pop ecx  +
jmp loc_102A28F  +
***
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_106C91B  +
jmp locret_101EFBE  +
***
push 8  +
call _lock  +
pop ecx  +
and dword ptr [ebp-4] 0 +
mov eax dword_108A2C4 +
mov [ebp-1Ch] eax +
mov eax dword_108A2C0 +
mov [ebp-20h] eax +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
call __dllonexit  +
add esp 0Ch +
mov [ebp-24h] eax +
mov eax [ebp-1Ch] +
mov dword_108A2C4 eax +
mov eax [ebp-20h] +
mov dword_108A2C0 eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1045C7A  +
mov eax [ebp-24h] +
jmp loc_1013EE0  +
***
pop ecx  +
xor eax eax +
mov [ebp-1Ch] eax +
jmp loc_102A5C1  +
***
cmp ax 3 +
jnz loc_102A56F  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
test eax ebx +
jz loc_1024B90  +
not eax  +
mov dword_108A1E4 eax +
jmp loc_1024BE6  +
***
sub ecx eax +
mov eax ecx +
retn   +
***
sub ecx eax +
mov eax ecx +
retn   +
***
fld  [ebp+arg_8] +
jmp loc_100CE67  +
***
xor ecx ecx +
jmp loc_100C481  +
push 0  +
lea ecx [ebp+var_C] +
call sub_104BD15  +
push offset dword_1082CC0  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_101F8A6  +
mov esi [esi] +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+15h] 0 +
pop ecx  +
mov edi esi +
jnz loc_101F8BF  +
jmp loc_1045CE9  +
***
dec eax  +
mov [esi+10h] eax +
cmp eax ebx +
jnz loc_100D949  +
mov [esi+0Ch] ebx +
jmp loc_100D949  +
push dword ptr [eax]  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_100D952  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_100D962  +
***
mov edi [ebp+arg_10] +
mov esi ebx +
movs   +
movs   +
movs   +
jmp loc_103092B  +
add eax 0Ch +
lea edi [ebx+0Ch] +
dec esi  +
mov [ebp+arg_0] edi +
mov [ebp+arg_C] esi +
mov esi [eax-4] +
cmp esi [eax-0Ch] +
jnz loc_1045D60  +
mov esi [eax] +
cmp esi [eax-8] +
jz loc_1045D84  +
mov esi [ecx] +
mov edi [eax-4] +
mov [edx+esi*8] edi +
mov esi [ecx] +
mov edi [eax] +
mov [edx+esi*8+4] edi +
test ebx ebx +
jz loc_1045D82  +
mov edi [ecx] +
mov esi [ebp+arg_0] +
imul edi edi +
add edi [ebp+arg_10] +
movs   +
movs   +
movs   +
inc dword ptr [ecx]  +
add [ebp+arg_0] 0Ch +
add eax 8 +
dec [ebp+arg_C]  +
jz loc_103093E  +
jmp loc_1045D51  +
***
xor ecx ecx +
push 0Ch  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10067E4  +
mov esi eax +
pop ecx  +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 1 +
cmp esi ebx +
jz loc_1045DCD  +
push offset sub_10375DD  +
push edi  +
push 0Ch  +
push esi  +
call sub_100A25C  +
jmp loc_1045DCF  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_10308AC  +
push esi  +
call sub_1006809  +
pop ecx  +
jmp loc_10308F4  +
***
lea ecx [ebp+var_8] +
call sub_106CFB7  +
push 0  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [edi+14h] +
call sub_106CF8E  +
push [ebp+var_8]  +
mov ebx eax +
neg ebx  +
sbb bl bl +
inc bl  +
call GdipDeleteRegion  +
jmp loc_100DE00  +
***
add [ebp+arg_C] esi +
sub [ebp+arg_14] esi +
xor esi esi +
jmp loc_1031B0B  +
add [ebp+arg_10] edx +
sub edi edx +
mov [ebp+arg_8] eax +
jmp loc_1031B19  +
mov edx [ebp+arg_14] +
add [ebp+arg_C] edx +
sub esi edx +
mov [ebp+arg_14] eax +
jmp loc_1031B22  +
add [ebp+arg_10] edi +
sub [ebp+arg_8] edi +
xor edi edi +
jmp loc_1031B2A  +
sub ebx esi +
mov [ebp+arg_C] ebx +
mov ecx ebx +
jmp loc_1031B5D  +
sub eax [ebp+arg_8] +
mov [ebp+arg_10] eax +
mov ebx eax +
jmp loc_1031B6D  +
sub eax [ebp+arg_14] +
mov [ebp+arg_C] eax +
mov ecx eax +
jmp loc_1031B7E  +
sub eax edi +
mov [ebp+arg_10] eax +
mov ebx eax +
jmp loc_1031B8C  +
movzx edx byte ptr [edx+ecx] +
movzx ebx byte ptr [ebp+arg_14+3] +
or al 0FFh +
sub al byte ptr [ebp+arg_14+3] +
mov [ebp+arg_4] ebx +
movzx eax al +
mov [ebp+arg_0] eax +
imul edx [ebp+arg_0] +
movzx eax byte ptr [esi+edi] +
imul eax ebx +
add eax edx +
cdq   +
mov ebx 0FFh +
idiv  ebx +
mov edx [ebp+arg_18] +
mov [ecx+edx] al +
movzx edx byte ptr [ecx+edx+1] +
imul edx [ebp+arg_0] +
movzx eax byte ptr [esi+edi+1] +
imul eax [ebp+arg_4] +
add eax edx +
cdq   +
idiv  ebx +
mov edx [ebp+arg_18] +
mov [ecx+edx+1] al +
movzx edx byte ptr [ecx+edx+2] +
movzx eax byte ptr [esi+edi+2] +
imul edx [ebp+arg_0] +
imul eax [ebp+arg_4] +
add eax edx +
cdq   +
idiv  ebx +
mov edx [ebp+arg_18] +
mov [ecx+edx+2] al +
mov al [edx+ecx+3] +
cmp al bl +
jnb loc_1031C41  +
movzx eax al +
imul eax [ebp+arg_0] +
cdq   +
idiv  ebx +
mov edx [ebp+arg_18] +
add al byte ptr [ebp+arg_14+3] +
jmp loc_1031CA4  +
mov eax [ebp+arg_10] +
mov ecx eax +
imul eax [ebp+var_58] +
imul ecx [ebp+var_40] +
cmp [ebp+arg_C] 0 +
jle loc_1045F48  +
lea esi [ecx+edi+1] +
mov ecx [ebp+arg_C] +
lea eax [eax+edx+1] +
mov [ebp+arg_14] ecx +
mov cl [esi-1] +
mov [eax-1] cl +
mov cl [esi] +
mov [eax] cl +
mov cl [esi+1] +
mov [eax+1] cl +
mov cl [esi+2] +
mov [eax+2] cl +
add eax 4 +
add esi 4 +
dec [ebp+arg_14]  +
jnz loc_1045F27  +
inc [ebp+arg_10]  +
cmp [ebp+arg_10] ebx +
jge loc_1031ACB  +
jmp loc_1045F06  +
***
jle loc_103109E  +
cmp ecx 6 +
jg loc_103109E  +
mov eax 22009h +
jmp loc_103109E  +
***
mov [ecx+4] eax +
jmp loc_100B31F  +
***
fld  dword ptr [eax] +
fstp  [ebp+var_4] +
jmp loc_103945D  +
***
fld  dword ptr [ebp-8] +
jmp loc_1031127  +
***
push dword ptr [ebp-4]  +
call GdipDisposeImage  +
jmp loc_1033C33  +
***
dec eax  +
or eax 0FFFFFFFEh +
inc eax  +
jmp loc_1036EBB  +
fmul st(1) st +
lea eax [esi-1] +
mov [ebp+arg_C] eax +
fsub st(1) st +
fxch  st(1) +
fstp  [ebp+var_4] +
fimul  [ebp+arg_C] +
fadd  ds:dbl_100B170 +
fstp  [ebp+arg_C] +
fld  [ebp+arg_C] +
fstp  [ebp+var_C] +
fld  [ebp+arg_C] +
jmp loc_1036EF2  +
***
dec eax  +
or eax 0FFFFFFFEh +
inc eax  +
jmp loc_1030636  +
***
fld1   +
push ecx  +
fstp  [esp+14h+var_14] +
lea ecx [ebp+var_8] +
push [ebp+arg_4]  +
call sub_100AE5A  +
push [ebp+arg_10]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_10]  +
lea eax [ebp+var_8] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
call sub_106D691  +
push [ebp+var_8]  +
call GdipDeletePen  +
jmp locret_1030A21  +
***
call sub_106D6C3  +
jmp loc_102D3B3  +
mov eax [ebp+arg_8] +
xor ebx ebx +
inc ebx  +
cmp eax ebx +
jnz loc_10460CB  +
fld1   +
push ecx  +
fstp  [esp+38h+var_38] +
lea ecx [ebp+var_18] +
push [ebp+arg_4]  +
call sub_100AE5A  +
push 26200Ah  +
push ebx  +
push ebx  +
lea ecx [ebp+var_28] +
call sub_100B2C5  +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_8] +
call sub_100B8C4  +
push ebx  +
push ebx  +
push esi  +
push esi  +
push [ebp+var_18]  +
push [ebp+var_8]  +
call GdipDrawRectangleI  +
mov esi [ebp+arg_10] +
push dword ptr [esi+4]  +
lea eax [ebp+var_28] +
push dword ptr [esi]  +
mov ecx edi +
push eax  +
call sub_1030A2A  +
mov eax [ebp+arg_18] +
cmp eax ebx +
jle loc_104609B  +
dec eax  +
lea ebx [esi+8] +
mov [ebp+arg_10] eax +
push ebx  +
lea eax [ebx-8] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
mov ecx edi +
call sub_106D66B  +
add ebx 8 +
dec [ebp+arg_10]  +
jnz loc_104607D  +
mov eax [ebp+arg_18] +
xor ebx ebx +
inc ebx  +
cmp [ebp+arg_1C] 0 +
jz loc_10460B6  +
cmp eax ebx +
jle loc_10460B6  +
push esi  +
lea eax [esi+eax*8-8] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
mov ecx edi +
call sub_106D66B  +
push [ebp+var_8]  +
call GdipDeleteGraphics  +
push [ebp+var_24]  +
call GdipDisposeImage  +
jmp loc_102D3B3  +
cdq   +
sub eax edx +
mov ebx eax +
mov ecx edi +
sar ebx 1 +
call sub_1030979  +
mov ecx edi +
mov esi eax +
call sub_10328A0  +
mov [ebp+var_14] eax +
cmp esi 3 +
jz loc_1046112  +
cmp eax 1 +
jnz loc_1046112  +
push 0  +
mov ecx edi +
mov byte ptr [ebp+arg_0+3] al +
call sub_103094A  +
mov eax [ebp+arg_18] +
cmp eax 1 +
jnz loc_1046118  +
push [ebp+arg_C]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_10]  +
push [ebp+arg_10]  +
jmp loc_104615F  +
mov byte ptr [ebp+arg_0+3] 0 +
jmp loc_10460FB  +
jle loc_1046144  +
mov esi [ebp+arg_10] +
add esi 8 +
dec eax  +
mov [ebp+var_4] eax +
push [ebp+arg_C]  +
lea eax [esi-8] +
push ebx  +
push [ebp+arg_8]  +
push esi  +
push eax  +
push [ebp+arg_4]  +
push edi  +
call sub_106DA0F  +
add esi 8 +
dec [ebp+var_4]  +
jnz loc_1046124  +
mov eax [ebp+arg_18] +
cmp [ebp+arg_1C] 0 +
jz loc_1046168  +
cmp eax 1 +
jle loc_1046168  +
push [ebp+arg_C]  +
mov ecx [ebp+arg_10] +
push ebx  +
push [ebp+arg_8]  +
lea eax [ecx+eax*8-8] +
push ecx  +
push eax  +
push [ebp+arg_4]  +
push edi  +
call sub_106DA0F  +
cmp byte ptr [ebp+arg_0+3] 0 +
jz loc_100E790  +
push [ebp+var_14]  +
mov ecx edi +
call sub_103094A  +
jmp loc_100E790  +
***
cmp dword ptr [ebp+14h] 1 +
jnz loc_10461B3  +
fild  dword ptr [ebp+10h] +
push ecx  +
lea ecx [ebp-14h] +
fstp  [esp+8+var_8] +
push dword ptr [ebp+0Ch]  +
call sub_100AE5A  +
push 1  +
lea ecx [ebp-14h] +
call sub_100AE94  +
push 1  +
lea ecx [ebp-14h] +
call sub_100AEC3  +
push esi  +
jmp loc_103951E  +
mov ecx [ebp+18h] +
call sub_106D303  +
fld  ds:flt_1046258 +
mov ecx eax +
push ecx  +
fstp  [esp+8+var_8] +
push esi  +
mov [ebp+18h] ecx +
call sub_1039478  +
test eax eax +
jnz loc_1046240  +
mov ecx [ebp+18h] +
call sub_106D21A  +
xor ecx ecx +
push 8  +
pop edx  +
mov esi eax +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10067E4  +
mov edi eax +
pop ecx  +
mov [ebp-10h] edi +
and dword ptr [ebp-4] 0 +
test edi edi +
jz loc_1046210  +
push offset sub_100BFF1  +
push esi  +
push 8  +
push edi  +
call sub_100A25C  +
jmp loc_1046212  +
xor edi edi +
mov ecx [ebp+18h] +
push esi  +
push edi  +
call sub_106D245  +
test eax eax +
jnz loc_1046239  +
push dword ptr [ebp+1Ch]  +
push esi  +
push eax  +
push edi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100E6F7  +
mov bl al +
push edi  +
call sub_1006809  +
pop ecx  +
mov ecx [ebp+18h] +
test ecx ecx +
jz loc_1039548  +
push 1  +
call sub_106D612  +
jmp loc_1039548  +
***
cmp [ebp+arg_14] 0 +
fst  dword ptr [eax+8] +
mov edx [ebp+arg_8] +
fst  dword ptr [eax+0Ch] +
fld  dword ptr [ecx+8] +
fstp  dword ptr [edx+8] +
fld  dword ptr [ecx+0Ch] +
fstp  dword ptr [edx+0Ch] +
jz loc_1046285  +
fstp  dword ptr [eax+10h] +
fld  dword ptr [ecx+10h] +
fstp  dword ptr [edx+10h] +
jmp loc_1031616  +
fstp  st +
jmp loc_1031616  +
***
mov ecx [esi+10h] +
mov [ebp+arg_4] ecx +
fild  [ebp+arg_4] +
fstp  [ebp+arg_4] +
fld  [ebp+arg_4] +
fcomp  st(1) +
fnstsw  ax +
test ah 41h +
jp loc_103163B  +
push edi  +
mov edi [esi+14h] +
mov eax edi +
imul eax edx +
add eax ecx +
mov [ebp+arg_0] eax +
mov [ebp+var_4] edi +
fild  [ebp+arg_0] +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
fcomp  st(1) +
fnstsw  ax +
test ah 41h +
jp loc_10462DC  +
fsub  [ebp+arg_0] +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
fadd  [ebp+arg_4] +
fiadd  [ebp+var_4] +
jmp loc_1046303  +
fld  st +
call _ftol2_sse  +
mov esi [esi+10h] +
mov [ebp+arg_4] eax +
sub eax esi +
cdq   +
idiv  edi +
add edx esi +
mov [ebp+arg_0] edx +
fild  [ebp+arg_0] +
fild  [ebp+arg_4] +
fsubp st(2) st +
fxch  st(1) +
fstp  [ebp+arg_0] +
fadd  [ebp+arg_0] +
fstp  [ebp+arg_0] +
pop edi  +
jmp loc_103163D  +
***
fadd  ds:flt_104AAD8 +
jmp loc_1031694  +
fadd  ds:flt_104AAD8 +
jmp loc_10316AE  +
dec edx  +
jmp loc_10316CF  +
dec eax  +
mov [ebp+var_C] eax +
jmp loc_10316D8  +
***
mov eax [ecx+8] +
sub eax edx +
push 64h  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov eax [ecx+0Ch] +
sub eax edx +
push 64h  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
xor ecx ecx +
jmp loc_1037638  +
push 0  +
lea ecx [ebp+var_C] +
call sub_104BD15  +
push offset dword_1082CC0  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
xor eax eax +
inc eax  +
jmp loc_103441E  +
***
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
and dword_108D770 0 +
jmp locret_1032E1F  +
***
fstp  st(3) +
fld  [ebp+arg_0] +
fld  [ebp+var_8] +
fld  st(2) +
fmulp st(1) st +
fsubp st(1) st +
fdiv  [ebp+var_10] +
jmp loc_1033EFA  +
***
mov ecx [eax+1Ch] +
imul ecx [eax+14h] +
add ecx [eax+18h] +
add ecx [eax+10h] +
mov [ebp+arg_C] ecx +
fild  [ebp+arg_C] +
fsubrp st(2) st +
fxch  st(1) +
jmp loc_103442B  +
fld  [ebp+arg_10] +
sub esp 0Ch +
fld  [ebp+arg_10] +
fstp  [esp+44h+var_3C] +
fldz   +
fstp  [esp+44h+var_40] +
fld  [ebp+arg_4] +
fmul st st(1) +
fdiv  dword ptr [esi+48h] +
fsubp st(1) st +
fstp  [ebp+arg_4] +
fld  [ebp+arg_4] +
fstp  [esp+44h+var_44] +
call sub_100CE39  +
fstp  dword ptr [esi+4] +
sub esp 0Ch +
fld  [ebp+arg_10] +
fld  [ebp+arg_10] +
fstp  [esp+44h+var_3C] +
fldz   +
fstp  [esp+44h+var_40] +
fld  [ebp+arg_8] +
fmul st st(1) +
fdiv  dword ptr [esi+4Ch] +
fsubp st(1) st +
fstp  [ebp+arg_8] +
fld  [ebp+arg_8] +
fstp  [esp+44h+var_44] +
call sub_100CE39  +
fstp  dword ptr [esi+18h] +
jmp loc_10324EB  +
***
fstp  st +
jmp loc_10341B9  +
fld  [ebp+arg_18] +
fmul  ds:dbl_10464A8 +
fstp  [ebp+arg_4] +
jmp loc_1034207  +
fld  [ebp+arg_18] +
mov eax [ebp+arg_1C] +
fmul  ds:dbl_104A3E8 +
fstp  [ebp+arg_18] +
fld  dword ptr [eax] +
fld  [ebp+arg_18] +
fld  st +
fmulp st(2) st +
fxch  st(1) +
fstp  [ebp+var_18] +
fld  st +
fmul  dword ptr [eax+4] +
fstp  [ebp+var_14] +
fld  dword ptr [esi] +
fadd  [ebp+var_18] +
fstp  [ebp+var_10] +
mov eax [ebp+var_10] +
fld  dword ptr [esi+4] +
mov [esi] eax +
fadd  [ebp+var_14] +
fstp  [ebp+var_C] +
mov eax [ebp+var_C] +
mov [esi+4] eax +
mov eax [ebp+arg_20] +
fld  dword ptr [eax] +
fld  st(1) +
fmulp st(1) st +
fstp  [ebp+var_18] +
fmul  dword ptr [eax+4] +
fstp  [ebp+var_14] +
fld  dword ptr [edi] +
fadd  [ebp+var_18] +
fstp  [ebp+var_10] +
mov eax [ebp+var_10] +
fld  dword ptr [edi+4] +
mov [edi] eax +
fadd  [ebp+var_14] +
fstp  [ebp+var_C] +
mov eax [ebp+var_C] +
mov [edi+4] eax +
jmp loc_10342E5  +
***
mov esi [ebp+var_10] +
mov edi [ebp+var_C] +
movs   +
movs   +
movs   +
mov edi [ebp+var_4] +
mov esi [ebp+var_18] +
jmp loc_1034514  +
fld  [ebp+arg_10] +
mov eax [ebp+arg_0] +
fsub  [ebp+var_14] +
mov esi [ebp+var_8] +
lea eax [eax+esi*8] +
lea ecx [ebx+edi*8] +
fstp  [ebp+arg_1C] +
fld  [ebp+arg_20] +
fsub  [ebp+arg_1C] +
fdiv  [ebp+arg_20] +
fstp  [ebp+arg_20] +
fld  dword ptr [eax] +
fsub  dword ptr [ecx] +
fstp  [ebp+arg_8] +
fld  dword ptr [eax+4] +
fsub  dword ptr [ecx+4] +
fstp  [ebp+arg_0] +
fld  [ebp+arg_1C] +
fld  [ebp+arg_C] +
fcompp st(1) st +
fnstsw  ax +
fld  [ebp+arg_8] +
fmul  [ebp+arg_20] +
fadd  dword ptr [ecx] +
test ah 5 +
jp loc_104652E  +
fstp  [ebp+var_1C] +
mov eax [ebp+var_1C] +
fld  [ebp+arg_0] +
inc edi  +
fmul  [ebp+arg_20] +
mov [ebp+var_4] edi +
fadd  dword ptr [ecx+4] +
mov [ebx+edi*8] eax +
fstp  [ebp+var_18] +
mov eax [ebp+var_18] +
mov [ebx+edi*8+4] eax +
jmp loc_104653C  +
fstp  dword ptr [ecx] +
fld  [ebp+arg_0] +
fmul  [ebp+arg_20] +
fadd  dword ptr [ecx+4] +
fstp  dword ptr [ecx+4] +
cmp [ebp+arg_4] 0 +
jz loc_1046554  +
imul esi esi +
imul edi edi +
add esi [ebp+arg_4] +
add edi [ebp+arg_14] +
movs   +
movs   +
movs   +
mov edi [ebp+var_4] +
fld  [ebp+var_14] +
fstp  [ebp+arg_10] +
jmp loc_1034529  +
mov esi [ebp+arg_14] +
mov edi [ebp+arg_20] +
movs   +
movs   +
movs   +
mov edi [ebp+var_4] +
mov esi [ebp+arg_10] +
jmp loc_1032F92  +
***
mov edx dword_108C4E8 +
mov [ebp+var_4] edx +
jmp loc_1032681  +
mov esi [ebp+var_14] +
mov edi [ebp+arg_0] +
movs   +
movs   +
movs   +
mov edi [ebp+var_8] +
jmp loc_10326EA  +
lea ecx [ebp+var_34] +
push ecx  +
lea eax [edi+esi*8-8] +
push edi  +
push eax  +
call sub_1032872  +
lea eax [ebp+var_3C] +
push eax  +
lea eax [edi+8] +
push eax  +
push edi  +
call sub_1032872  +
fld  ds:dbl_1033380 +
lea eax [ebp+var_1C] +
fstp  [ebp+var_1C] +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
call sub_10333F0  +
test al al +
jz loc_1032778  +
fld  [ebp+arg_C] +
lea eax [ebp+var_3C] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
push ecx  +
fstp  [esp+64h+var_64] +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [edi+8] +
push eax  +
push edi  +
push edi  +
lea eax [edi+esi*8-8] +
push eax  +
mov byte ptr [ebp+arg_8+3] 1 +
call sub_1034172  +
mov eax [ebp+var_2C] +
mov [ebp+var_24] eax +
mov eax [ebp+var_28] +
mov [ebp+var_20] eax +
mov eax [ebp+var_10] +
mov [ebp+var_44] eax +
mov eax [ebp+var_C] +
mov [ebp+var_40] eax +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov byte ptr [ebp+arg_20+3] 1 +
call sub_1032872  +
jmp loc_1032778  +
mov edi [ebx] +
mov eax [ebp+arg_1C] +
imul edi edi +
add edi [eax] +
mov esi [ebp+var_4] +
movs   +
movs   +
movs   +
mov edi [ebp+var_8] +
mov esi [ebp+arg_10] +
jmp loc_1032792  +
mov edi [ebx] +
mov eax [ebp+arg_1C] +
imul edi edi +
add edi [eax] +
mov esi [ebp+arg_0] +
movs   +
movs   +
movs   +
mov edi [ebp+var_8] +
mov esi [ebp+arg_10] +
jmp loc_1034148  +
mov edi [ebx] +
mov eax [ebp+arg_1C] +
imul edi edi +
add edi [eax] +
mov esi [ebp+arg_0] +
movs   +
movs   +
movs   +
mov esi [ebp+arg_10] +
mov edi [ebp+var_8] +
jmp loc_103280F  +
fld  [ebp+arg_C] +
lea ecx [ebp+var_3C] +
push ecx  +
lea ecx [ebp+var_34] +
push ecx  +
push ecx  +
fstp  [esp+64h+var_64] +
lea ecx [ebp+var_2C] +
push ecx  +
lea ecx [ebp+var_10] +
push ecx  +
lea eax [edi+esi*8-8] +
push edi  +
push eax  +
push eax  +
add esi 0FFFFFFFEh +
lea eax [edi+esi*8] +
push eax  +
call sub_1034172  +
inc dword ptr [ebx]  +
cmp [ebp+arg_4] 0 +
mov edx [ebp+arg_18] +
mov eax [ebx] +
mov ecx [edx] +
mov edi [ebp+var_10] +
mov [ecx+eax*8] edi +
mov edi [ebp+var_C] +
mov [ecx+eax*8+4] edi +
jz loc_10466D8  +
mov edi [ebx] +
imul esi esi +
add esi [ebp+var_4] +
imul edi edi +
mov eax [ebp+arg_1C] +
add edi [eax] +
movs   +
movs   +
movs   +
inc dword ptr [ebx]  +
cmp [ebp+arg_4] 0 +
mov eax [ebx] +
mov ecx [edx] +
mov esi [ebp+var_2C] +
mov [ecx+eax*8] esi +
mov esi [ebp+var_28] +
mov [ecx+eax*8+4] esi +
jz loc_1046707  +
mov edi [ebx] +
mov esi [ebp+var_14] +
imul edi edi +
mov eax [ebp+arg_1C] +
imul esi esi +
add esi [ebp+var_4] +
add edi [eax] +
movs   +
movs   +
movs   +
cmp byte ptr [ebp+arg_20+3] 0 +
jz loc_1032862  +
inc dword ptr [ebx]  +
cmp [ebp+arg_4] 0 +
mov ecx [edx] +
mov eax [ebx] +
mov edx [ebp+var_44] +
mov [ecx+eax*8] edx +
mov edx [ebp+var_40] +
mov [ecx+eax*8+4] edx +
jz loc_1032862  +
mov esi [ebp+var_4] +
jmp loc_104673D  +
mov eax [ebp+var_4] +
imul esi esi +
lea esi [esi+eax-0Ch] +
mov edi [ebx] +
mov eax [ebp+arg_1C] +
imul edi edi +
add edi [eax] +
movs   +
movs   +
movs   +
jmp loc_1032862  +
mov ecx [ebp+arg_20] +
mov esi [ebp+arg_4] +
mov [ecx] eax +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_18] +
mov eax [eax] +
mov edx [ecx] +
mov [eax] edx +
mov ecx [ecx+4] +
mov [eax+4] ecx +
mov eax [ebp+arg_1C] +
test esi esi +
jz loc_104677A  +
mov edi [eax] +
movs   +
movs   +
movs   +
jmp loc_1032864  +
and dword ptr [eax] 0 +
jmp loc_1032864  +
***
fadd  ds:flt_104AAD8 +
jmp loc_103471A  +
mov byte ptr [ebp+arg_0+3] 0 +
jmp loc_1034858  +
fadd  ds:flt_104AAD8 +
jmp loc_10347AA  +
call _ftol2_sse  +
mov [edi] eax +
jmp loc_1034814  +
call _ftol2_sse  +
mov [edi+8] eax +
jmp loc_1034814  +
call _ftol2_sse  +
mov [edi+4] eax +
jmp loc_103483B  +
call _ftol2_sse  +
mov [edi+0Ch] eax +
jmp loc_103483B  +
***
fadd  ds:flt_104AAD8 +
jmp loc_103458A  +
fadd  ds:flt_104AAD8 +
jmp loc_10345DB  +
fadd  ds:flt_104AAD8 +
jmp loc_103467E  +
***
and [ebp+var_4] 0 +
jmp loc_103309E  +
lea ebx [eax-1] +
mov [ebp+arg_C] ebx +
jmp loc_10330B9  +
push [ebp+arg_18]  +
fld  [ebp+var_18] +
push ecx  +
fstp  [esp+48h+var_48] +
call sub_103161F  +
push [ebp+arg_1C]  +
fstp  [ebp+arg_10] +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
call sub_103164A  +
mov al [esi+7] +
add esi 4 +
test al al +
jnz loc_1046861  +
movzx eax byte ptr [ebp+arg_8+3] +
mov [ebp+arg_10] eax +
fild  [ebp+arg_10] +
fmul  [ebp+var_10] +
call _ftol2  +
mov [esi+3] al +
mov al byte ptr [ebp+arg_8+2] +
mov [esi+2] al +
mov eax [ebp+arg_8] +
mov [esi+1] ah +
mov [esi] al +
jmp loc_104692D  +
movzx ecx byte ptr [ebp+arg_8+3] +
mov [ebp+arg_10] ecx +
movzx eax al +
fild  [ebp+arg_10] +
fmul  [ebp+var_10] +
fld  ds:dbl_100DFB0 +
fdivr st st(1) +
fstp  [ebp+arg_10] +
fld  [ebp+arg_10] +
fld  st +
fld1   +
mov [ebp+arg_10] eax +
fsubrp st(1) st +
fstp  [ebp+arg_C] +
fild  [ebp+arg_10] +
fld  [ebp+arg_C] +
fld  st +
fmulp st(2) st +
fxch  st(1) +
call _ftol2  +
fxch  st(2) +
mov bl al +
call _ftol2  +
add bl al +
movzx eax byte ptr [esi+2] +
mov [ebp+arg_10] eax +
mov [esi+3] bl +
fild  [ebp+arg_10] +
fld  st(2) +
fmulp st(1) st +
call _ftol2  +
fld  st +
mov bl al +
movzx eax byte ptr [ebp+arg_8+2] +
mov [ebp+arg_10] eax +
fild  [ebp+arg_10] +
fmulp st(1) st +
call _ftol2  +
fld  st +
add bl al +
movzx eax byte ptr [ebp+arg_8+1] +
mov [ebp+arg_10] eax +
mov [esi+2] bl +
fild  [ebp+arg_10] +
fmulp st(1) st +
call _ftol2  +
fld  st(1) +
mov bl al +
movzx eax byte ptr [esi+1] +
mov [ebp+arg_10] eax +
fild  [ebp+arg_10] +
fmulp st(1) st +
call _ftol2  +
add bl al +
movzx eax byte ptr [esi] +
mov [ebp+arg_10] eax +
mov [esi+1] bl +
fild  [ebp+arg_10] +
fmulp st(2) st +
fxch  st(1) +
call _ftol2  +
mov bl al +
movzx eax byte ptr [ebp+arg_8] +
mov [ebp+arg_10] eax +
fild  [ebp+arg_10] +
fmulp st(1) st +
call _ftol2  +
add bl al +
mov [esi] bl +
push [ebp+arg_14]  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
call sub_1033221  +
dec edi  +
jz loc_1033215  +
jmp loc_1046809  +
cmp dword ptr [edi+90h] 0 +
mov edi ebx +
jnz loc_1046A9A  +
push [ebp+arg_18]  +
fld  [ebp+var_18] +
push ecx  +
fstp  [esp+48h+var_48] +
call sub_103161F  +
push [ebp+arg_1C]  +
fstp  [ebp+arg_20] +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+arg_20] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
call sub_103164A  +
fld  [ebp+var_10] +
mov al [esi+7] +
add esi 4 +
test al al +
jnz loc_10469B5  +
movzx eax byte ptr [ebp+arg_8+1] +
mov [ebp+arg_20] eax +
fild  [ebp+arg_20] +
fmulp st(1) st +
call _ftol2  +
mov [esi+3] al +
mov al byte ptr [ebp+arg_10+3] +
mov [esi+2] al +
mov al byte ptr [ebp+arg_C+3] +
mov [esi+1] al +
mov al byte ptr [ebp+arg_4] +
mov [esi] al +
jmp loc_1046A7E  +
movzx ecx byte ptr [ebp+arg_8+1] +
mov [ebp+arg_20] ecx +
movzx eax al +
fild  [ebp+arg_20] +
fmulp st(1) st +
fld  ds:dbl_100DFB0 +
fdivr st st(1) +
fstp  [ebp+arg_20] +
fld  [ebp+arg_20] +
fld  st +
fld1   +
fsubrp st(1) st +
fstp  [ebp+arg_20] +
fld  [ebp+arg_20] +
mov [ebp+arg_20] eax +
fld  st +
fild  [ebp+arg_20] +
fmulp st(1) st +
call _ftol2  +
fxch  st(2) +
mov bl al +
call _ftol2  +
add bl al +
movzx eax byte ptr [esi+2] +
mov [ebp+arg_20] eax +
mov [esi+3] bl +
fild  [ebp+arg_20] +
fld  st(2) +
fmulp st(1) st +
call _ftol2  +
fld  st +
mov bl al +
movzx eax byte ptr [ebp+arg_10+3] +
mov [ebp+arg_20] eax +
fild  [ebp+arg_20] +
fmulp st(1) st +
call _ftol2  +
fld  st +
add bl al +
movzx eax byte ptr [ebp+arg_C+3] +
mov [ebp+arg_20] eax +
mov [esi+2] bl +
fild  [ebp+arg_20] +
fmulp st(1) st +
call _ftol2  +
fld  st(1) +
mov bl al +
movzx eax byte ptr [esi+1] +
mov [ebp+arg_20] eax +
fild  [ebp+arg_20] +
fmulp st(1) st +
call _ftol2  +
add bl al +
movzx eax byte ptr [esi] +
mov [ebp+arg_20] eax +
mov [esi+1] bl +
fild  [ebp+arg_20] +
fmulp st(2) st +
fxch  st(1) +
call _ftol2  +
mov bl al +
movzx eax byte ptr [ebp+arg_4] +
mov [ebp+arg_20] eax +
fild  [ebp+arg_20] +
fmulp st(1) st +
call _ftol2  +
add bl al +
mov [esi] bl +
push [ebp+arg_14]  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
call sub_1033221  +
dec edi  +
jz loc_1033215  +
jmp loc_1046958  +
push [ebp+arg_18]  +
fld  [ebp+var_18] +
push ecx  +
fstp  [esp+48h+var_48] +
call sub_103161F  +
push [ebp+arg_1C]  +
fstp  [ebp+arg_10] +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
call sub_103164A  +
mov al [esi+7] +
add esi 4 +
test al al +
jnz loc_1046AF2  +
movzx eax byte ptr [ebp+arg_8+3] +
mov [ebp+arg_10] eax +
fild  [ebp+arg_10] +
fmul  [ebp+var_10] +
call _ftol2  +
mov [esi+3] al +
mov al byte ptr [ebp+arg_8+2] +
mov [esi+2] al +
mov eax [ebp+arg_8] +
mov [esi+1] ah +
mov [esi] al +
jmp loc_1046BBC  +
movzx ecx byte ptr [ebp+arg_8+3] +
mov [ebp+arg_10] ecx +
movzx eax al +
fild  [ebp+arg_10] +
fmul  [ebp+var_10] +
fld  ds:dbl_100DFB0 +
fdivr st st(1) +
fstp  [ebp+arg_10] +
fld  [ebp+arg_10] +
fld  st +
fld1   +
fsubrp st(1) st +
fstp  [ebp+arg_10] +
fld  [ebp+arg_10] +
mov [ebp+arg_10] eax +
fld  st +
fild  [ebp+arg_10] +
fmulp st(1) st +
call _ftol2  +
fxch  st(2) +
mov bl al +
call _ftol2  +
add bl al +
movzx eax byte ptr [esi+2] +
mov [ebp+arg_10] eax +
mov [esi+3] bl +
fild  [ebp+arg_10] +
fld  st(2) +
fmulp st(1) st +
call _ftol2  +
fld  st +
mov bl al +
movzx eax byte ptr [ebp+arg_8+2] +
mov [ebp+arg_10] eax +
fild  [ebp+arg_10] +
fmulp st(1) st +
call _ftol2  +
fld  st +
add bl al +
movzx eax byte ptr [ebp+arg_8+1] +
mov [ebp+arg_10] eax +
mov [esi+2] bl +
fild  [ebp+arg_10] +
fmulp st(1) st +
call _ftol2  +
fld  st(1) +
mov bl al +
movzx eax byte ptr [esi+1] +
mov [ebp+arg_10] eax +
fild  [ebp+arg_10] +
fmulp st(1) st +
call _ftol2  +
add bl al +
movzx eax byte ptr [esi] +
mov [ebp+arg_10] eax +
mov [esi+1] bl +
fild  [ebp+arg_10] +
fmulp st(2) st +
fxch  st(1) +
call _ftol2  +
mov bl al +
movzx eax byte ptr [ebp+arg_8] +
mov [ebp+arg_10] eax +
fild  [ebp+arg_10] +
fmulp st(1) st +
call _ftol2  +
add bl al +
mov [esi] bl +
push [ebp+arg_14]  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
call sub_1033221  +
dec edi  +
jz loc_1033215  +
jmp loc_1046A9A  +
***
push esi  +
push [ebp+arg_8]  +
call sub_103764B  +
add [ebp+arg_8] 64h +
add esi 64h +
jmp loc_1037A66  +
***
push esi  +
push [ebp+arg_8]  +
call sub_103766C  +
add [ebp+arg_8] 8 +
add esi 8 +
jmp loc_1037BE9  +
***
add [ebp+var_8] 2 +
jmp loc_1032005  +
mov eax dword_108C4D8 +
mov [ebp+arg_28] eax +
jmp loc_1032043  +
mov eax dword_108C4E8 +
mov [ebp+var_8] eax +
jmp loc_1032093  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+40h] 0 +
jz loc_1032152  +
fld  dword ptr [ecx] +
fsub  dword ptr [eax+44h] +
fmul  dword ptr [eax+48h] +
fmulp st(2) st +
fld  [ebp+arg_24] +
faddp st(2) st +
fxch  st(1) +
fstp  [ebp+arg_4] +
fld  dword ptr [ecx] +
fsub  dword ptr [eax+4Ch] +
fmul  dword ptr [eax+50h] +
fadd  ds:dbl_1031550 +
jmp loc_103215C  +
lea eax [ebp+var_18] +
fst  [ebp+var_14] +
push eax  +
fst  [ebp+var_18] +
mov eax [ebp+arg_C] +
fst  [ebp+var_1C] +
push ebx  +
fstp  [ebp+var_20] +
lea eax [ebx+eax*8-8] +
push eax  +
call sub_1032872  +
lea ecx [ebp+var_20] +
push ecx  +
lea eax [ebx+8] +
push eax  +
push ebx  +
call sub_1032872  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
call sub_106E009  +
test al al +
jnz loc_1032179  +
mov eax [ebp+var_20] +
mov [ebp+var_28] eax +
mov eax [ebp+var_1C] +
mov [ebp+var_24] eax +
jmp loc_1032179  +
mov ecx [ebp+arg_0] +
cmp byte ptr [ecx+40h] 0 +
jz loc_10321D5  +
fld  dword ptr [eax] +
fsub  dword ptr [ecx+44h] +
fmul  dword ptr [ecx+48h] +
fmul  ds:dbl_1006830 +
fadd  [ebp+arg_24] +
fstp  [ebp+arg_4] +
fld  dword ptr [eax] +
fsub  dword ptr [ecx+4Ch] +
fmul  dword ptr [ecx+50h] +
fadd  ds:dbl_1031550 +
jmp loc_10321DD  +
mov eax [esi] +
fld  [ebp+var_50] +
mov ecx [edi] +
imul eax eax +
fstp  dword ptr [eax+ecx+0Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_4C] +
imul eax eax +
fstp  dword ptr [eax+ecx+10h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+1Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_38] +
imul eax eax +
fstp  dword ptr [eax+ecx+20h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_34] +
imul eax eax +
fstp  dword ptr [eax+ecx+24h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+30h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_40] +
imul eax eax +
fstp  dword ptr [eax+ecx+34h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_3C] +
imul eax eax +
fstp  dword ptr [eax+ecx+38h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+44h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_48] +
imul eax eax +
fstp  dword ptr [eax+ecx+48h] +
fld  [ebp+var_44] +
jmp loc_103234B  +
imul eax eax +
fld  [ebp+var_58] +
fstp  dword ptr [eax+ecx+0Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_54] +
imul eax eax +
fstp  dword ptr [eax+ecx+10h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+1Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_58] +
imul eax eax +
fstp  dword ptr [eax+ecx+20h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_54] +
imul eax eax +
fstp  dword ptr [eax+ecx+24h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+30h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_40] +
imul eax eax +
fstp  dword ptr [eax+ecx+34h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_3C] +
imul eax eax +
fstp  dword ptr [eax+ecx+38h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+44h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_50] +
imul eax eax +
fstp  dword ptr [eax+ecx+48h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_4C] +
imul eax eax +
fstp  dword ptr [eax+ecx+4Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+58h] +
mov eax [esi] +
mov ecx [edi] +
imul eax eax +
mov dword ptr [eax+ecx+4] 1 +
jmp loc_1032370  +
mov edx [ebp+var_8] +
test edx edx +
jz loc_1046E63  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+40h] 0 +
jz loc_1046E63  +
fld  dword ptr [edx] +
fsub  dword ptr [eax+44h] +
fmul  dword ptr [eax+48h] +
fmul  ds:dbl_1006830 +
fadd  [ebp+arg_24] +
fstp  [ebp+arg_4] +
fld  dword ptr [edx] +
fsub  dword ptr [eax+4Ch] +
fmul  dword ptr [eax+50h] +
fadd  ds:dbl_1031550 +
jmp loc_1046E6B  +
fld  [ebp+arg_24] +
fstp  [ebp+arg_4] +
fld1   +
lea eax [ebx+ecx*8-8] +
fstp  [ebp+arg_8] +
fldz   +
lea ecx [ebp+var_28] +
push ecx  +
fst  [ebp+var_24] +
fst  [ebp+var_28] +
push ebx  +
fst  [ebp+var_2C] +
push eax  +
fstp  [ebp+var_30] +
mov [ebp+arg_10] eax +
call sub_1032872  +
lea eax [ebp+var_30] +
push eax  +
lea eax [ebx+8] +
push eax  +
push ebx  +
call sub_1032872  +
lea eax [ebp+var_60] +
push eax  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
call sub_106E009  +
test al al +
jnz loc_1046EBD  +
mov eax [ebp+var_30] +
mov [ebp+var_60] eax +
mov eax [ebp+var_2C] +
mov [ebp+var_5C] eax +
fld  [ebp+arg_4] +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
push ecx  +
fstp  [esp+88h+var_88] +
lea eax [ebp+var_60] +
push eax  +
push ebx  +
call sub_10318F2  +
push ebx  +
push [ebp+arg_10]  +
call sub_1031867  +
fstp  [ebp+arg_10] +
mov eax [esi] +
fld  [ebp+var_10] +
mov ecx [edi] +
imul eax eax +
mov dword ptr [eax+ecx] 4 +
mov eax [esi] +
mov ecx [edi] +
imul eax eax +
fstp  dword ptr [eax+ecx+5Ch] +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_38] +
push eax  +
call sub_1031867  +
mov eax [esi] +
mov ecx [edi] +
imul eax eax +
fstp  dword ptr [eax+ecx+60h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_10] +
imul eax eax +
fstp  dword ptr [eax+ecx+8] +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_58] +
push eax  +
lea eax [ebp+var_50] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
call sub_1032509  +
test al al +
jz loc_1046FE1  +
mov eax [esi] +
fld  [ebp+var_50] +
mov ecx [edi] +
imul eax eax +
fstp  dword ptr [eax+ecx+0Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_4C] +
imul eax eax +
fstp  dword ptr [eax+ecx+10h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+1Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_38] +
imul eax eax +
fstp  dword ptr [eax+ecx+20h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_34] +
imul eax eax +
fstp  dword ptr [eax+ecx+24h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+30h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_40] +
imul eax eax +
fstp  dword ptr [eax+ecx+34h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_3C] +
imul eax eax +
fstp  dword ptr [eax+ecx+38h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+44h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_48] +
imul eax eax +
fstp  dword ptr [eax+ecx+48h] +
fld  [ebp+var_44] +
jmp loc_1047246  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_58] +
push eax  +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
lea eax [ebp+var_50] +
push eax  +
call sub_1032509  +
test al al +
jz loc_10471B7  +
fld  [ebp+var_38] +
lea eax [ebp+var_70] +
fsub  [ebp+var_40] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
fstp  [ebp+var_70] +
fld  [ebp+var_34] +
fsub  [ebp+var_3C] +
fstp  [ebp+var_6C] +
fld  [ebp+var_48] +
fsub  [ebp+var_50] +
fstp  [ebp+var_68] +
fld  [ebp+var_44] +
fsub  [ebp+var_4C] +
fstp  [ebp+var_64] +
call sub_10343FA  +
mov ecx [edi] +
test al al +
mov eax [esi] +
jz loc_10470FF  +
imul eax eax +
fld  [ebp+var_58] +
fstp  dword ptr [eax+ecx+0Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_54] +
imul eax eax +
fstp  dword ptr [eax+ecx+10h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+1Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_58] +
imul eax eax +
fstp  dword ptr [eax+ecx+20h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_54] +
imul eax eax +
fstp  dword ptr [eax+ecx+24h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+30h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_40] +
imul eax eax +
fstp  dword ptr [eax+ecx+34h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_3C] +
imul eax eax +
fstp  dword ptr [eax+ecx+38h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+44h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_50] +
imul eax eax +
fstp  dword ptr [eax+ecx+48h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_4C] +
imul eax eax +
fstp  dword ptr [eax+ecx+4Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+58h] +
mov eax [esi] +
mov ecx [edi] +
imul eax eax +
mov dword ptr [eax+ecx+4] 1 +
jmp loc_104726B  +
imul eax eax +
fld  [ebp+var_48] +
fstp  dword ptr [eax+ecx+0Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_44] +
imul eax eax +
fstp  dword ptr [eax+ecx+10h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+1Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_38] +
imul eax eax +
fstp  dword ptr [eax+ecx+20h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_34] +
imul eax eax +
fstp  dword ptr [eax+ecx+24h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+30h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_58] +
imul eax eax +
fstp  dword ptr [eax+ecx+34h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_54] +
imul eax eax +
fstp  dword ptr [eax+ecx+38h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+44h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_58] +
imul eax eax +
fstp  dword ptr [eax+ecx+48h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_54] +
imul eax eax +
fstp  dword ptr [eax+ecx+4Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+58h] +
mov eax [esi] +
mov ecx [edi] +
imul eax eax +
mov dword ptr [eax+ecx+4] 2 +
jmp loc_104726B  +
mov eax [esi] +
fld  [ebp+var_48] +
mov ecx [edi] +
imul eax eax +
fstp  dword ptr [eax+ecx+0Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_44] +
imul eax eax +
fstp  dword ptr [eax+ecx+10h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+1Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_38] +
imul eax eax +
fstp  dword ptr [eax+ecx+20h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_34] +
imul eax eax +
fstp  dword ptr [eax+ecx+24h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+30h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_40] +
imul eax eax +
fstp  dword ptr [eax+ecx+34h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_3C] +
imul eax eax +
fstp  dword ptr [eax+ecx+38h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_8] +
imul eax eax +
fstp  dword ptr [eax+ecx+44h] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+var_50] +
imul eax eax +
fstp  dword ptr [eax+ecx+48h] +
fld  [ebp+var_4C] +
mov eax [esi] +
mov ecx [edi] +
imul eax eax +
fstp  dword ptr [eax+ecx+4Ch] +
mov eax [esi] +
mov ecx [edi] +
fld  [ebp+arg_1C] +
imul eax eax +
fstp  dword ptr [eax+ecx+58h] +
mov eax [esi] +
mov ecx [edi] +
imul eax eax +
and dword ptr [eax+ecx+4] 0 +
mov eax [ebp+arg_20] +
fld  dword ptr [eax] +
fadd  [ebp+arg_10] +
fstp  dword ptr [eax] +
inc dword ptr [esi]  +
jmp loc_10323BB  +
***
fstp  st +
dec ecx  +
mov [ebp+var_C] ecx +
jmp loc_1031E78  +
fstp  st +
dec ecx  +
mov [ebp+var_4] ecx +
jmp loc_1031F1B  +
***
push esi  +
push edi  +
mov edi [ebp+arg_C] +
push 19h  +
mov esi eax +
pop ecx  +
movs   +
add [ebp+arg_C] 64h +
add eax 64h +
cmp eax [ebp+arg_8] +
jnz loc_1047294  +
pop edi  +
pop esi  +
jmp loc_103C7B8  +
***
lea esi [edi+64h] +
mov ecx esi +
mov [ebp+var_4] esi +
call sub_100CFB1  +
mov ecx esi +
mov [ebp+var_24] eax +
call sub_100CFE8  +
mov esi [ebp+arg_4] +
mov [ebp+arg_0] eax +
movzx eax [ebp+arg_8] +
neg eax  +
sbb eax eax +
and eax 2 +
mov [ebp+var_8] eax +
xor eax eax +
cmp [ebp+arg_8] bl +
setnz al  +
mov [ebp+var_18] eax +
mov eax [esi+8] +
cmp [ebp+arg_0] eax +
mov [ebp+var_10] eax +
jg loc_10472FB  +
cmp [ebp+arg_8] bl +
jnz loc_10472FB  +
xor al al +
jmp loc_10472FD  +
mov al 1 +
cmp [edi+90h] ebx +
jnz loc_1047518  +
cmp al bl +
jz loc_10474FB  +
cmp [edi+0A4h] bl +
jz loc_1047476  +
fild  [ebp+var_10] +
lea eax [edi+98h] +
mov dword ptr [ebp+arg_8] eax +
fidiv  [ebp+arg_0] +
fstp  [ebp+var_14] +
fild  dword ptr [eax] +
fmul  [ebp+var_14] +
fld  ds:dbl_1006830 +
fadd st(1) st +
fxch  st(1) +
call _ftol2_sse  +
mov [ebp+var_24] eax +
lea eax [edi+9Ch] +
fild  dword ptr [eax] +
mov [ebp+var_C] eax +
fmul  [ebp+var_14] +
fadd st st(1) +
call _ftol2_sse  +
add edi 0A0h +
fild  dword ptr [edi] +
mov [ebp+arg_4] eax +
mov [ebp+var_1C] edi +
fmul  [ebp+var_14] +
faddp st(1) st +
call _ftol2_sse  +
mov edi eax +
push 10h  +
mov [ebp+var_14] edi +
call GdipAlloc  +
cmp eax ebx +
jz loc_10473A5  +
mov edx [ebp+var_8] +
mov ecx [ebp+var_10] +
add ecx edx +
push 26200Ah  +
push ecx  +
mov ecx [ebp+arg_4] +
add ecx edi +
mov edi [ebp+var_24] +
add ecx edi +
push ecx  +
mov ecx eax +
call sub_100B2C5  +
jmp loc_10473AA  +
mov edi [ebp+var_24] +
xor eax eax +
push eax  +
lea ecx [ebp+var_28] +
mov dword_108D770 eax +
call sub_100B8C4  +
mov eax [ebp+var_18] +
push ebx  +
push ebx  +
push ebx  +
push 2  +
push [ebp+arg_0]  +
mov [ebp+var_3C] eax +
mov eax [ebp+var_10] +
mov [ebp+var_34] eax +
mov eax dword ptr [ebp+arg_8] +
push dword ptr [eax]  +
lea eax [ebp+var_40] +
push ebx  +
push ebx  +
push eax  +
push [ebp+var_4]  +
lea ecx [ebp+var_28] +
mov [ebp+var_40] ebx +
mov [ebp+var_38] edi +
call sub_100D01F  +
mov eax [ebp+arg_4] +
push ebx  +
push ebx  +
push ebx  +
push 2  +
push [ebp+arg_0]  +
mov [ebp+var_38] eax +
mov eax [ebp+var_C] +
push dword ptr [eax]  +
mov eax dword ptr [ebp+arg_8] +
push ebx  +
push dword ptr [eax]  +
lea eax [ebp+var_40] +
push eax  +
push [ebp+var_4]  +
lea ecx [ebp+var_28] +
mov [ebp+var_40] edi +
call sub_100D01F  +
mov eax [ebp+arg_4] +
mov ecx dword ptr [ebp+arg_8] +
push ebx  +
push ebx  +
add eax edi +
push ebx  +
mov [ebp+var_40] eax +
mov eax [ebp+var_14] +
push 2  +
push [ebp+arg_0]  +
mov [ebp+var_38] eax +
mov eax [ebp+var_1C] +
push dword ptr [eax]  +
mov eax [ebp+var_C] +
mov eax [eax] +
add eax [ecx] +
push ebx  +
push eax  +
lea eax [ebp+var_40] +
push eax  +
push [ebp+var_4]  +
lea ecx [ebp+var_28] +
call sub_100D01F  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_14] +
mov [esi+14h] eax +
mov [esi+18h] ecx +
add ecx eax +
mov eax [esi+8] +
add eax [ebp+var_8] +
mov [esi+10h] edi +
mov [esi+4] eax +
mov eax [esi+0Ch] +
add edi ecx +
cdq   +
idiv  edi +
mov [esi] edi +
inc eax  +
mov [esi+1Ch] eax +
push [ebp+var_28]  +
jmp loc_10474F1  +
push 10h  +
call GdipAlloc  +
mov edi eax +
cmp edi ebx +
jz loc_104749F  +
mov ecx [ebp+var_4] +
call sub_100CD8C  +
push eax  +
mov eax [esi+8] +
add eax [ebp+var_8] +
mov ecx edi +
push eax  +
push dword ptr [esi+0Ch]  +
call sub_100B2C5  +
jmp loc_10474A1  +
xor eax eax +
push eax  +
lea ecx [ebp+var_20] +
mov dword_108D770 eax +
call sub_100B8C4  +
mov eax [ebp+var_18] +
push ebx  +
push ebx  +
push ebx  +
push 2  +
push [ebp+arg_0]  +
mov [ebp+var_3C] eax +
push [ebp+var_24]  +
mov eax [esi+0Ch] +
mov [ebp+var_38] eax +
mov eax [esi+8] +
push ebx  +
mov [ebp+var_34] eax +
push ebx  +
lea eax [ebp+var_40] +
push eax  +
push [ebp+var_4]  +
lea ecx [ebp+var_20] +
mov [ebp+var_40] ebx +
call sub_100D01F  +
mov eax [esi+0Ch] +
push [ebp+var_20]  +
mov [esi] eax +
mov eax [esi+8] +
add eax [ebp+var_8] +
mov [esi+4] eax +
call GdipDeleteGraphics  +
jmp loc_1047710  +
mov ecx [ebp+var_4] +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov dword_108D770 eax +
mov eax [ebp+arg_0] +
mov [esi+4] eax +
mov eax [ebp+var_24] +
mov [esi] eax +
jmp loc_1047710  +
fld1   +
fstp  [ebp+arg_4] +
cmp al bl +
jz loc_104752A  +
fild  [ebp+var_10] +
fidiv  [ebp+arg_0] +
fstp  [ebp+arg_4] +
fild  [ebp+arg_0] +
fld  [ebp+arg_4] +
fld  st +
fmulp st(2) st +
fld  ds:dbl_1006830 +
fadd st(2) st +
fxch  st(2) +
call _ftol2_sse  +
mov [esi+4] eax +
lea eax [edi+98h] +
fild  dword ptr [eax] +
mov dword ptr [ebp+arg_8] eax +
fld  st(1) +
fmulp st(1) st +
fadd st st(2) +
call _ftol2_sse  +
mov [esi+10h] eax +
lea eax [edi+9Ch] +
fild  dword ptr [eax] +
mov [ebp+var_C] eax +
fld  st(1) +
fmulp st(1) st +
fadd st st(2) +
call _ftol2_sse  +
add edi 0A0h +
mov [esi+14h] eax +
fimul  dword ptr [edi] +
mov [ebp+var_1C] edi +
fadd st st(1) +
call _ftol2_sse  +
mov ecx [esi+14h] +
mov edx [esi+10h] +
mov [ebp+var_24] edx +
add edx ecx +
mov [ebp+var_14] ecx +
mov ecx [esi+0Ch] +
add edx eax +
cmp edx ecx +
lea edi [esi+18h] +
mov [edi] eax +
mov [ebp+var_10] edx +
mov [ebp+arg_4] ecx +
jle loc_10475EC  +
fild  [ebp+arg_4] +
fidiv  [ebp+var_10] +
fstp  [ebp+arg_4] +
fild  [ebp+var_24] +
fmul  [ebp+arg_4] +
fadd st st(1) +
call _ftol2_sse  +
fild  [ebp+var_14] +
mov [esi+10h] eax +
fmul  [ebp+arg_4] +
fadd st st(1) +
call _ftol2_sse  +
fild  dword ptr [edi] +
mov [esi+14h] eax +
fmul  [ebp+arg_4] +
faddp st(1) st +
call _ftol2_sse  +
mov [edi] eax +
mov dword ptr [esi+1Ch] 1 +
jmp loc_1047624  +
sub ecx [ebp+var_24] +
sub ecx eax +
mov [ebp+arg_4] ecx +
fild  [ebp+arg_4] +
fstp  [ebp+arg_4] +
fld  [ebp+arg_4] +
fidiv  [ebp+var_14] +
fstp  [ebp+var_24] +
fld  [ebp+var_24] +
call _ftol2_sse  +
fld  [ebp+arg_4] +
mov [ebp+var_24] eax +
fidiv  [ebp+var_24] +
faddp st(1) st +
call _ftol2_sse  +
mov [esi+14h] eax +
mov eax [ebp+var_24] +
mov [esi+1Ch] eax +
mov eax [edi] +
add eax [esi+14h] +
push 10h  +
add eax [esi+10h] +
mov [esi] eax +
call GdipAlloc  +
mov [ebp+arg_4] eax +
cmp eax ebx +
jz loc_1047658  +
mov ecx [ebp+var_4] +
call sub_100CD8C  +
mov ecx [ebp+arg_4] +
push eax  +
mov eax [esi+4] +
add eax [ebp+var_8] +
push eax  +
push dword ptr [esi]  +
call sub_100B2C5  +
jmp loc_104765A  +
xor eax eax +
push eax  +
mov dword_108D770 eax +
call sub_106E0B4  +
push ebx  +
mov ecx eax +
mov eax [ebp+var_18] +
push ebx  +
push ebx  +
mov [ebp+var_2C] eax +
mov eax [esi+10h] +
push 2  +
push [ebp+arg_0]  +
mov [ebp+var_28] eax +
mov eax [esi+4] +
mov [ebp+var_24] eax +
mov eax dword ptr [ebp+arg_8] +
push dword ptr [eax]  +
lea eax [ebp+var_30] +
push ebx  +
push ebx  +
push eax  +
push [ebp+var_4]  +
mov [ebp+arg_4] ecx +
mov [ebp+var_30] ebx +
call sub_100D01F  +
mov eax [esi+10h] +
mov ecx [ebp+arg_4] +
push ebx  +
push ebx  +
push ebx  +
push 2  +
push [ebp+arg_0]  +
mov [ebp+var_30] eax +
mov eax [esi+14h] +
mov [ebp+var_28] eax +
mov eax [ebp+var_C] +
push dword ptr [eax]  +
mov eax dword ptr [ebp+arg_8] +
push ebx  +
push dword ptr [eax]  +
lea eax [ebp+var_30] +
push eax  +
push [ebp+var_4]  +
call sub_100D01F  +
mov eax [esi+14h] +
add [ebp+var_30] eax +
mov eax [edi] +
mov ecx dword ptr [ebp+arg_8] +
push ebx  +
push ebx  +
push ebx  +
push 2  +
push [ebp+arg_0]  +
mov [ebp+var_28] eax +
mov eax [ebp+var_1C] +
push dword ptr [eax]  +
mov eax [ebp+var_C] +
mov eax [eax] +
add eax [ecx] +
mov ecx [ebp+arg_4] +
push ebx  +
push eax  +
lea eax [ebp+var_30] +
push eax  +
push [ebp+var_4]  +
call sub_100D01F  +
cmp [ebp+arg_4] ebx +
jz loc_104770A  +
mov ecx [ebp+arg_4] +
push 1  +
call sub_106D00E  +
mov eax [ebp+var_8] +
add [esi+4] eax +
mov eax dword_108D770 +
mov [esi+20h] eax +
jmp loc_1031A03  +
***
push 1  +
call sub_106D00E  +
and dword_108DB84 0 +
jmp loc_1020BE4  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
and dword_108DB80 0 +
jmp loc_1020BF2  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
***
mov ecx [ebx+8] +
mov eax ecx +
sub eax [ebp+8] +
push 64h  +
cdq   +
pop edi  +
idiv  edi +
mov [ebp+10h] ecx +
push ebx  +
cmp eax esi +
jnb loc_10477E4  +
mov eax [ebp+8] +
mov edi esi +
imul edi edi +
lea edx [edi+eax] +
push edx  +
push ecx  +
push eax  +
call sub_1037A2F  +
mov eax [ebx+8] +
sub eax [ebp+8] +
lea ecx [ebp-74h] +
push ecx  +
push 64h  +
pop ecx  +
cdq   +
idiv  ecx +
mov ecx ebx +
mov dword ptr [ebp-4] 2 +
sub esi eax +
push esi  +
push dword ptr [ebx+8]  +
call sub_10377A4  +
add [ebx+8] edi +
mov ebx [ebx+8] +
lea eax [ebp-74h] +
push eax  +
sub ebx edi +
push ebx  +
push dword ptr [ebp+8]  +
call sub_106DF04  +
add esp 0Ch +
jmp loc_1037A22  +
imul esi esi +
push ecx  +
mov edi ecx +
push ecx  +
sub edi esi +
push edi  +
call sub_1037A2F  +
push dword ptr [ebp+10h]  +
mov [ebx+8] eax +
push edi  +
push dword ptr [ebp+8]  +
call sub_106E088  +
lea eax [ebp-74h] +
push eax  +
mov eax [ebp+8] +
add esi eax +
push esi  +
push eax  +
call sub_106DF04  +
add esp 18h +
jmp loc_1037A22  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
***
mov ebx [esi+8] +
mov ecx [ebp+8] +
mov eax ebx +
sub eax ecx +
sar eax 3 +
push esi  +
cmp eax edi +
jnb loc_10478B9  +
mov eax edi +
shl eax 3 +
mov [ebp+10h] eax +
add eax ecx +
push eax  +
push ebx  +
push ecx  +
call sub_1037BB2  +
mov eax [esi+8] +
lea ecx [ebp-18h] +
push ecx  +
mov ecx eax +
sub ecx [ebp+8] +
mov dword ptr [ebp-4] 2 +
sar ecx 3 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_1037728  +
mov eax [ebp+10h] +
add [esi+8] eax +
mov esi [esi+8] +
lea ecx [ebp-18h] +
push ecx  +
sub esi eax +
push esi  +
push dword ptr [ebp+8]  +
call sub_106DF2E  +
add esp 0Ch +
jmp loc_1037BA5  +
push ebx  +
shl edi 3 +
mov [ebp+10h] ebx +
sub [ebp+10h] edi +
push ebx  +
push dword ptr [ebp+10h]  +
call sub_1037BB2  +
push ebx  +
push dword ptr [ebp+10h]  +
mov [esi+8] eax +
push dword ptr [ebp+8]  +
call sub_10780FD  +
lea eax [ebp-18h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_106DF2E  +
add esp 18h +
jmp loc_1037BA5  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
***
mov ecx [ebx+8] +
mov eax ecx +
sub eax [ebp+8] +
push 0Ch  +
cdq   +
pop edi  +
idiv  edi +
mov [ebp+10h] ecx +
push ebx  +
cmp eax esi +
jnb loc_104797B  +
mov eax [ebp+8] +
mov edi esi +
imul edi edi +
lea edx [edi+eax] +
push edx  +
push ecx  +
push eax  +
call sub_101082F  +
mov eax [ebx+8] +
sub eax [ebp+8] +
lea ecx [ebp-1Ch] +
push ecx  +
push 0Ch  +
pop ecx  +
cdq   +
idiv  ecx +
mov ecx ebx +
mov dword ptr [ebp-4] 2 +
sub esi eax +
push esi  +
push dword ptr [ebx+8]  +
call sub_10107B3  +
add [ebx+8] edi +
mov ebx [ebx+8] +
lea eax [ebp-1Ch] +
push eax  +
sub ebx edi +
push ebx  +
push dword ptr [ebp+8]  +
call sub_1068A68  +
add esp 0Ch +
jmp loc_1010962  +
imul esi esi +
push ecx  +
mov edi ecx +
push ecx  +
sub edi esi +
push edi  +
call sub_101082F  +
push dword ptr [ebp+10h]  +
mov [ebx+8] eax +
push edi  +
push dword ptr [ebp+8]  +
call sub_1068A90  +
lea eax [ebp-1Ch] +
push eax  +
mov eax [ebp+8] +
add esi eax +
push esi  +
push eax  +
call sub_1068A68  +
add esp 18h +
jmp loc_1010962  +
***
mov eax [esi+8] +
imul ecx ecx +
add ecx [esi+4] +
push eax  +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1020C21  +
jmp loc_1037948  +
***
mov eax [esi+8] +
mov edx [esi+4] +
push eax  +
lea ecx [edx+ecx*8] +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1020CA5  +
jmp loc_1037AC5  +
***
mov eax [esi+8] +
imul ecx ecx +
add ecx [esi+4] +
push eax  +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1020C63  +
jmp loc_10378D2  +
***
mov eax dword_108C4C8 +
mov [ebp-5Ch] eax +
jmp loc_1032A30  +
fld  dword ptr [ecx] +
fstp  dword ptr [ebp-60h] +
fld  dword ptr [ebp-60h] +
fstp  dword ptr [ebp-64h] +
jmp loc_1032A5A  +
fild  dword ptr [edi+ebx*8-8] +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-24h] +
fstp  dword ptr [ebp-20h] +
push eax  +
fild  dword ptr [edi+ebx*8-4] +
fstp  dword ptr [ebp-2Ch] +
fld  dword ptr [ebp-20h] +
fstp  dword ptr [ebp-14h] +
fld  dword ptr [ebp-2Ch] +
fstp  dword ptr [ebp-10h] +
fild  dword ptr [ebp+18h] +
fstp  dword ptr [ebp-20h] +
fild  dword ptr [ebp-54h] +
fstp  dword ptr [ebp-2Ch] +
fld  dword ptr [ebp-20h] +
fstp  dword ptr [ebp-24h] +
fld  dword ptr [ebp-2Ch] +
fstp  dword ptr [ebp-20h] +
call sub_1031867  +
fcomp  ds:dbl_1032EE8 +
fnstsw  ax +
test ah 5 +
jp loc_1032A64  +
dec ebx  +
jmp loc_1032A64  +
fld  dword ptr [ebp-18h] +
fadd  ds:dbl_1009880 +
fstp  dword ptr [ebp-18h] +
jmp loc_1032A80  +
mov eax [ebp+14h] +
mov ecx [ebp-54h] +
mov edi [ebp-30h] +
lea esi [ecx+eax] +
movs   +
movs   +
movs   +
mov edi [ebp+10h] +
jmp loc_103348A  +
mov esi [ebp-44h] +
mov edi [ebp-30h] +
movs   +
movs   +
movs   +
mov edi [ebp+10h] +
jmp loc_1032B26  +
mov [ebp-34h] eax +
jmp loc_1032B54  +
push dword ptr [ebp-44h]  +
lea eax [ebp-60h] +
push eax  +
call sub_106DEBA  +
push dword ptr [ebp-44h]  +
lea eax [ebp-64h] +
push eax  +
call sub_106DEDF  +
jmp loc_1032B5E  +
push edi  +
lea ebx [edi+esi*8] +
push ebx  +
call sub_10318AC  +
fstp  dword ptr [ebp+10h] +
fld  dword ptr [ebp+10h] +
fld  dword ptr [ebp-20h] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jp loc_1032B90  +
fld  dword ptr [ebp+10h] +
call _CIsqrt  +
fstp  dword ptr [ebp+10h] +
mov eax [edi+4] +
fld  dword ptr [ebp+10h] +
sub eax [ebx+4] +
fstp  dword ptr [ebp+10h] +
mov ecx [ebp-28h] +
mov [ebp-10h] eax +
mov eax [edi] +
sub eax [ebx] +
cmp dword ptr [ebp+14h] 0 +
mov [ebp-88h] eax +
fild  dword ptr [ebp-88h] +
mov eax [ebp+18h] +
lea eax [ecx+eax*8] +
fmul  dword ptr [ebp-50h] +
fdiv  dword ptr [ebp+10h] +
fiadd  dword ptr [ebx] +
fstp  dword ptr [eax] +
fild  dword ptr [ebp-10h] +
fmul  dword ptr [ebp-50h] +
fdiv  dword ptr [ebp+10h] +
fiadd  dword ptr [ebx+4] +
fstp  dword ptr [eax+4] +
jz loc_1047B57  +
mov edi [ebp+18h] +
imul esi esi +
add esi [ebp+14h] +
imul edi edi +
add edi [ebp-5Ch] +
movs   +
movs   +
movs   +
inc dword ptr [ebp+18h]  +
jmp loc_1032B90  +
push dword ptr [ebp+18h]  +
lea ecx [ebp-14h] +
push dword ptr [ebp-28h]  +
call sub_106E061  +
push 1  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-14h] +
call sub_1039C6E  +
push 1  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-14h] +
call sub_1039C6E  +
jmp loc_1032BB8  +
cmp byte ptr [esi+40h] 0 +
jz loc_1032BD3  +
fld  dword ptr [ebp-60h] +
fsub  dword ptr [esi+44h] +
fmul  dword ptr [esi+48h] +
fadd  dword ptr [ebp-18h] +
fstp  dword ptr [ebp+14h] +
fld  dword ptr [ebp+14h] +
fabs   +
fstp  dword ptr [ebp+14h] +
fld  dword ptr [ebp+14h] +
fstp  dword ptr [ebp+14h] +
fld  dword ptr [ebp-64h] +
fsub  dword ptr [esi+44h] +
fmul  dword ptr [esi+48h] +
fadd  dword ptr [ebp-18h] +
fstp  dword ptr [ebp+10h] +
fld  dword ptr [ebp+10h] +
fabs   +
fstp  dword ptr [ebp+10h] +
fld  dword ptr [ebp+10h] +
fstp  dword ptr [ebp+10h] +
fld  dword ptr [ebp+14h] +
fld  dword ptr [ebp+10h] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jp loc_1047BE6  +
fld  dword ptr [ebp+14h] +
jmp loc_1047BE9  +
fld  dword ptr [ebp+10h] +
fstp  dword ptr [ebp+14h] +
fld  dword ptr [ebp+14h] +
fadd  ds:dbl_1031550 +
call _ftol2_sse  +
cdq   +
sub eax edx +
sar eax 1 +
jmp loc_1032BD3  +
lea esi [ebp-0C0h] +
lea edi [ebp-80h] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+0Ch] +
mov edi [ebp+8] +
jmp loc_1032C3A  +
lea ecx [ebp-14h] +
mov byte_108A2B4 1 +
call sub_103959F  +
mov eax [ebp-7Ch] +
neg eax  +
mov [ebp+10h] eax +
fild  dword ptr [ebp+10h] +
mov eax [ebp-80h] +
push 0  +
push ecx  +
push ecx  +
neg eax  +
fstp  [esp+10h+var_C] +
mov [ebp+10h] eax +
fild  dword ptr [ebp+10h] +
lea ecx [ebp-14h] +
fstp  [esp+10h+var_10] +
call sub_1039612  +
lea ecx [ebp-14h] +
call sub_103325C  +
test eax eax +
jnz loc_1047C6E  +
push dword ptr [ebp+18h]  +
lea ecx [ebp-14h] +
push dword ptr [ebp-28h]  +
call sub_106E061  +
mov edi [ebp+14h] +
and dword_108B40C 0 +
and dword_108B408 0 +
mov dword_108A2B0 ebx +
mov dword_108A2AC edi +
mov dword_108B410 ebx +
mov dword_108B414 edi +
jmp loc_1032C70  +
mov ecx dword_108DB80 +
test ecx ecx +
jz loc_1047CED  +
call sub_100CFB1  +
cmp eax ebx +
jb loc_1047CC2  +
mov ecx dword_108DB80 +
call sub_100CFE8  +
cmp eax edi +
jnb loc_1047D4D  +
mov eax dword_108DB80 +
test eax eax +
jz loc_1047CED  +
mov ecx dword_108DB84 +
test ecx ecx +
jz loc_1047CE1  +
push 1  +
call sub_106D00E  +
mov eax dword_108DB80 +
test eax eax +
jz loc_1047CED  +
mov edx [eax] +
push 1  +
mov ecx eax +
call dword ptr [edx]  +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_1047D08  +
push 26200Ah  +
push edi  +
push ebx  +
mov ecx eax +
call sub_100B2C5  +
jmp loc_1047D0A  +
xor eax eax +
push 8  +
mov dword_108DB80 eax +
call GdipAlloc  +
test eax eax +
jz loc_1047D29  +
push dword_108DB80  +
mov ecx eax +
call sub_100B8C4  +
jmp loc_1047D2B  +
xor eax eax +
push 1  +
mov ecx eax +
mov dword_108DB84 eax +
call sub_103094A  +
mov ecx [ebp-58h] +
call sub_1030979  +
mov ecx dword_108DB84 +
push eax  +
call sub_100DAAA  +
mov eax dword_108DB80 +
mov dword_108A2B8 eax +
mov eax dword_108DB84 +
mov [ebp+8] eax +
jmp loc_1032CE6  +
add dword ptr [ebp-0A8h] 2 +
jmp loc_1032D84  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-8Ch] +
mov dword ptr [ebp+0Ch] 0FFFFFFh +
call sub_100B7C0  +
mov eax [ebp+14h] +
mov ecx dword_108DB84 +
inc eax  +
push eax  +
mov eax [ebp-20h] +
inc eax  +
push eax  +
push 0  +
push 0  +
lea eax [ebp-8Ch] +
push eax  +
call sub_100B903  +
push dword ptr [ebp-88h]  +
call GdipDeleteBrush  +
jmp loc_1032DBD  +
mov ecx [ebp-58h] +
push 2  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-20h]  +
push 0  +
push 0  +
push dword ptr [ebp-7Ch]  +
push dword ptr [ebp-80h]  +
push dword_108DB80  +
call sub_1032921  +
jmp loc_1032DEA  +
***
sar dh 0FFh +
***
dec eax  +
jz loc_1047E23  +
dec eax  +
jz loc_1047E1B  +
dec eax  +
jz loc_1047E17  +
dec eax  +
jnz loc_1033E06  +
push 4  +
jmp loc_1047E1D  +
push 3  +
jmp loc_1047E1D  +
push 2  +
pop edx  +
jmp loc_1033E06  +
xor edx edx +
inc edx  +
jmp loc_1033E06  +
***
pop ebp  +
retn 4  +
***
mov ecx [eax] +
mov edx [ebp+arg_C] +
mov [edx] ecx +
add [ebp+arg_C] 4 +
add eax 4 +
jmp loc_1013451  +
***
mov edi esi +
jmp loc_103A6E0  +
***
mov edi eax +
jmp loc_103A6E8  +
***
mov [edi] eax +
jmp loc_1039B0A  +
mov [edi+4] eax +
jmp loc_1039B22  +
***
push offset aListTTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
call loc_1058901  +
and dword ptr [ebp-14h] 0 +
jmp loc_102C78F  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
***
mov ebx [esi+8] +
mov eax [ebp+8] +
mov ecx ebx +
sub ecx eax +
sar ecx 2 +
push esi  +
cmp ecx edi +
jnb loc_1047F10  +
shl edi 2 +
lea ecx [edi+eax] +
push ecx  +
push ebx  +
push eax  +
call sub_1013CEE  +
mov eax [esi+8] +
mov edx [ebp+0Ch] +
mov ecx eax +
sub ecx [ebp+8] +
push esi  +
push eax  +
push dword ptr [ebp+10h]  +
sar ecx 2 +
lea ebx [edx+ecx*4] +
push ebx  +
mov dword ptr [ebp-4] 2 +
call sub_1013F2F  +
push dword ptr [ebp+8]  +
add [esi+8] edi +
push ebx  +
push dword ptr [ebp+0Ch]  +
call sub_106FB44  +
add esp 0Ch +
jmp loc_102C7F8  +
mov eax edi +
push ebx  +
shl eax 2 +
mov edi ebx +
sub edi eax +
push ebx  +
push edi  +
call sub_1013CEE  +
push ebx  +
push edi  +
push dword ptr [ebp+8]  +
mov [esi+8] eax +
call sub_104BEE5  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_106FB44  +
add esp 18h +
jmp loc_102C7F8  +
***
mov ecx [ebp+arg_4] +
mov edx [ecx+4] +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx+4] +
sub eax edx +
cdq   +
push esi  +
mov esi eax +
xor esi edx +
sub esi edx +
mov edx [ecx] +
push edi  +
mov edi [ebx] +
mov eax edi +
sub eax edx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax esi +
jl loc_1047F6F  +
mov eax esi +
cmp [ecx] edi +
jge loc_1047F77  +
sub edi eax +
jmp loc_1047F79  +
add edi eax +
mov [ecx] edi +
mov edx [ebx+4] +
cmp [ecx+4] edx +
pop edi  +
pop esi  +
pop ebx  +
jge loc_1047F8A  +
sub edx eax +
jmp loc_1047F8C  +
add edx eax +
mov [ecx+4] edx +
jmp loc_10399F9  +
***
cmp byte ptr [esi+54h] 0 +
push edi  +
mov edi [ebp+arg_4] +
jnz loc_1047FAD  +
push dword ptr [edi+4]  +
mov ecx esi +
push dword ptr [edi]  +
push [ebp+arg_0]  +
call sub_1070EB1  +
push edi  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1070F1D  +
mov byte ptr [esi+54h] 1 +
pop edi  +
jmp loc_102D41E  +
***
dec eax  +
jz loc_1047FDB  +
dec eax  +
jz loc_1047FD3  +
dec eax  +
jnz loc_1037079  +
push 3  +
jmp loc_1047FD5  +
push 2  +
pop eax  +
jmp loc_103707B  +
xor eax eax +
inc eax  +
jmp loc_103707B  +
***
xor al al +
pop ebp  +
retn 4  +
***
xor ecx ecx +
jmp loc_100CB4B  +
push 0  +
lea ecx [ebp+var_C] +
call sub_104BD15  +
push offset dword_1082CC0  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
mov esi [esi] +
jmp loc_100C06F  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
push edi  +
mov ecx ebx +
call sub_1071262  +
jmp loc_100F13B  +
***
push offset aListTTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+8]  +
***
pop ebp  +
retn 8  +
***
pop ebp  +
retn 8  +
***
pop ebp  +
retn 8  +
***
pop ebp  +
retn 4  +
***
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+30h]  +
***
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+34h]  +
***
mov al byte_108BC08 +
cmp al 4 +
jnb loc_104809F  +
test al al +
jnz loc_100E3DE  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_100E3DE  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_100E3DE  +
cmp eax ecx +
jnz loc_100E3DE  +
mov eax [edi+4] +
push dword ptr [eax+1Ch]  +
push offset dword_104A0A0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D97  +
jmp loc_100E3DE  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_1048101  +
test al al +
jnz loc_100E456  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_100E456  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_100E456  +
cmp eax ecx +
jnz loc_100E456  +
push offset dword_104A0B0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
jmp loc_100E456  +
***
xor eax eax +
inc eax  +
jmp loc_103AE54  +
***
mov edi [ebp+arg_0] +
mov eax [edi] +
mov [ebp+var_8] eax +
mov eax [edi+4] +
lea ecx [ebp+var_8] +
mov [ebp+var_4] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+68h]  +
mov eax [edi] +
mov edi [edi+4] +
mov [esi+8] eax +
mov [esi+0Ch] edi +
jmp loc_103A1AB  +
***
mov [ebp+var_4] 7 +
jmp loc_103A3CC  +
mov [ebp+var_4] 3 +
jmp loc_103A3CC  +
mov [ebp+var_4] 8 +
jmp loc_103A3CC  +
mov [ebp+var_4] 5 +
jmp loc_103A3CC  +
mov eax [ebp+var_8] +
neg eax  +
push ebx  +
push eax  +
mov [ebp+var_10] eax +
lea eax [ebp+rc] +
push eax  +
call edi  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call esi  +
test eax eax +
jz loc_10481D9  +
mov [ebp+var_4] 6 +
jmp loc_103A3CC  +
push ebx  +
push [ebp+var_10]  +
lea eax [ebp+rc] +
push eax  +
call edi  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call esi  +
test eax eax +
jz loc_10481FF  +
mov [ebp+var_4] 9 +
jmp loc_103A3CC  +
mov eax [ebp+dy] +
neg eax  +
push eax  +
push ebx  +
lea eax [ebp+rc] +
push eax  +
call edi  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call esi  +
test eax eax +
jz loc_1048228  +
mov [ebp+var_4] 4 +
jmp loc_103A3CC  +
push [ebp+pt.y]  +
lea eax [ebp+var_38] +
push [ebp+pt.x]  +
push eax  +
call esi  +
test eax eax +
jz loc_103A3CC  +
mov [ebp+var_4] 1 +
jmp loc_103A3CC  +
***
mov ecx [esi+4Ch] +
push eax  +
call sub_1005BE0  +
mov ecx [esi+38h] +
lea eax [ebp-4Ch] +
push eax  +
call sub_1005BE0  +
push 3  +
pop ebx  +
jmp loc_103B10F  +
mov ecx [esi+50h] +
jmp loc_103B10A  +
mov ecx [esi+54h] +
jmp loc_103B160  +
fldz   +
mov [ebp-18h] ebx +
fstp  qword ptr [ebp-14h] +
mov [ebp-1Ch] edi +
mov ecx [esi+14h] +
lea eax [ebp-1Ch] +
push eax  +
mov eax [ecx] +
push 47h  +
mov byte ptr [ebp-4] 4 +
call dword ptr [eax+18h]  +
mov ecx eax +
call sub_1005BE0  +
fld  qword ptr [ebp-14h] +
push ecx  +
push ecx  +
lea ecx [ebp-94h] +
fstp  [esp+24h+var_24] +
call sub_106CEFF  +
mov byte ptr [ebp-4] 3 +
jmp loc_103B184  +
fldz   +
mov [ebp-18h] ebx +
fstp  qword ptr [ebp-14h] +
mov [ebp-1Ch] edi +
mov ecx [esi+14h] +
lea eax [ebp-1Ch] +
push eax  +
mov eax [ecx] +
push 47h  +
mov [ebp-4] bl +
call dword ptr [eax+18h]  +
mov ecx eax +
call sub_1005BE0  +
fld  qword ptr [ebp-14h] +
push ecx  +
push ecx  +
lea ecx [ebp-74h] +
fstp  [esp+24h+var_24] +
call sub_106CEFF  +
mov byte ptr [ebp-4] 3 +
jmp loc_103B18E  +
lea eax [ebp-28h] +
push eax  +
call sub_1005BE0  +
mov ecx [esi+58h] +
jmp loc_103B16C  +
***
mov ecx esi +
call sub_1071891  +
jmp loc_103A64E  +
***
mov edx [ebp-28h] +
mov eax [ebp-1Ch] +
mov ecx [ebp-18h] +
mov [ebp-1Ch] edx +
mov edx [ebp-24h] +
mov [ebp-18h] edx +
mov [ebp-28h] eax +
mov [ebp-24h] ecx +
jmp loc_103AD64  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+0Ch]  +
mov eax [esi+14h] +
mov [eax+24h] ebx +
jmp loc_103AE36  +
***
cmp ecx 3 +
jnz loc_1048371  +
push ebx  +
push offset off_108EDF0  +
push offset off_108D4AC  +
push ebx  +
push eax  +
call __RTDynamicCast  +
mov al [eax+0Ch] +
mov byte ptr [ebp+arg_4+3] al +
mov eax [esi+1Ch] +
mov ecx [eax+20h] +
mov eax [ecx] +
add esp 14h +
lea edx [ebp+arg_4+3] +
push edx  +
call dword ptr [eax+40h]  +
jmp loc_103A5A4  +
cmp ecx 4 +
jnz loc_10483A5  +
push ebx  +
push offset off_108EE14  +
push offset off_108D4AC  +
push ebx  +
push eax  +
call __RTDynamicCast  +
mov eax [eax+0Ch] +
mov [ebp+arg_4] eax +
mov eax [esi+1Ch] +
mov ecx [eax+20h] +
mov eax [ecx] +
add esp 14h +
lea edx [ebp+arg_4] +
push edx  +
call dword ptr [eax+3Ch]  +
jmp loc_103A5A4  +
cmp ecx 5 +
jnz loc_103A5A4  +
mov ecx [esi+1Ch] +
call sub_1071D0C  +
jmp loc_103A5A4  +
***
push 3  +
pop ebx  +
mov edi offset off_1006E84 +
mov [ebp-18h] ebx +
mov [ebp-1Ch] edi +
mov dword ptr [ebp-14h] 5 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-1Ch] +
push eax  +
call sub_1005BE0  +
mov eax [ebp-14h] +
mov ecx [esi+20h] +
lea edx [ebp+8] +
mov [ebp+8] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+2Ch]  +
mov [ebp-24h] ebx +
mov [ebp-28h] edi +
mov dword ptr [ebp-20h] 1 +
mov ecx [esi+3Ch] +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1005BE0  +
push dword ptr [ebp-20h]  +
mov ecx esi +
call sub_103AE43  +
push eax  +
call sub_1071865  +
test al al +
jz loc_103B0A0  +
push dword ptr [ebp-14h]  +
mov ecx [esi+14h] +
push dword ptr [ebp-20h]  +
mov eax [ecx] +
call dword ptr [eax+20h]  +
mov ecx [esi+20h] +
mov [ebp-10h] eax +
cmp [ecx+2Ch] eax +
jz loc_103B0A0  +
and dword ptr [ebp-2Ch] 0 +
mov [ebp-30h] ebx +
mov [ebp-34h] edi +
mov ecx [esi+40h] +
lea eax [ebp-34h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_1005BE0  +
push dword ptr [ebp-14h]  +
mov ecx [esi+14h] +
push dword ptr [ebp-2Ch]  +
mov eax [ecx] +
call dword ptr [eax+20h]  +
push dword ptr [ebp-20h]  +
mov ecx esi +
mov edx eax +
call sub_103AE43  +
push dword ptr [ebp-2Ch]  +
mov [ebp-44h] eax +
call sub_103AE43  +
mov [ebp-40h] eax +
mov eax [ebp-10h] +
mov [ebp-3Ch] eax +
jmp loc_10487E0  +
mov ecx [esi+2Ch] +
cmp eax ecx +
jnz loc_10484E0  +
and dword ptr [ebp-14h] 0 +
mov dword ptr [ebp-18h] 7 +
mov dword ptr [ebp-1Ch] offset off_100B560 +
lea eax [ebp-1Ch] +
push eax  +
mov dword ptr [ebp-4] 3 +
call sub_1005BE0  +
mov eax [ebp-14h] +
cmp eax [esi+70h] +
jz loc_103B0A0  +
mov ecx [esi+34h] +
lea eax [ebp-1Ch] +
push eax  +
call sub_1035687  +
mov eax [ebp-18h] +
mov [esi+6Ch] eax +
mov eax [ebp-14h] +
mov [esi+70h] eax +
jmp loc_103B0A0  +
mov ecx [esi+30h] +
cmp eax ecx +
jnz loc_1048532  +
and dword ptr [ebp-14h] 0 +
mov dword ptr [ebp-18h] 7 +
mov dword ptr [ebp-1Ch] offset off_100B560 +
lea eax [ebp-1Ch] +
push eax  +
mov dword ptr [ebp-4] 4 +
call sub_1005BE0  +
mov eax [ebp-14h] +
cmp eax [esi+7Ch] +
jz loc_103B0A0  +
mov ecx [esi+38h] +
lea eax [ebp-1Ch] +
push eax  +
call sub_1035687  +
mov eax [ebp-18h] +
mov [esi+78h] eax +
mov eax [ebp-14h] +
mov [esi+7Ch] eax +
jmp loc_103B0A0  +
mov ecx [esi+3Ch] +
cmp eax ecx +
jz loc_1048752  +
cmp eax [esi+40h] +
jz loc_1048752  +
mov edx [esi+44h] +
cmp eax edx +
jnz loc_104858F  +
and dword ptr [ebp-2Ch] 0 +
mov dword ptr [ebp-30h] 2 +
mov dword ptr [ebp-34h] offset off_1006F8C +
lea eax [ebp-34h] +
push eax  +
mov ecx edx +
mov dword ptr [ebp-4] 8 +
call sub_1005BE0  +
xor al al +
cmp dword ptr [ebp-2Ch] 0 +
jz loc_104857B  +
inc al  +
mov ecx [esi+20h] +
lea edx [ebp+0Bh] +
mov [ebp+0Bh] al +
mov eax [ecx] +
push edx  +
call dword ptr [eax+20h]  +
jmp loc_103B0A0  +
mov edx [esi+48h] +
cmp eax edx +
jnz loc_10485D4  +
mov dword ptr [ebp-30h] 3 +
mov dword ptr [ebp-34h] offset off_1006E84 +
mov dword ptr [ebp-2Ch] 5 +
lea eax [ebp-34h] +
push eax  +
mov ecx edx +
mov dword ptr [ebp-4] 9 +
call sub_1005BE0  +
mov eax [ebp-2Ch] +
mov ecx [esi+20h] +
lea edx [ebp+8] +
mov [ebp+8] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+2Ch]  +
jmp loc_103B0A0  +
cmp eax [esi+4Ch] +
jnz loc_10485E0  +
push 2  +
jmp loc_103B099  +
cmp eax [esi+50h] +
jnz loc_10485EC  +
push 3  +
jmp loc_103B099  +
mov edx [esi+54h] +
cmp eax edx +
jnz loc_10486A2  +
push 3  +
pop ebx  +
mov edi offset off_1006E84 +
mov [ebp-24h] ebx +
mov [ebp-28h] edi +
mov dword ptr [ebp-20h] 1 +
and dword ptr [ebp-14h] 0 +
mov dword ptr [ebp-4] 0Ah +
mov [ebp-18h] ebx +
mov [ebp-1Ch] edi +
mov [ebp-30h] ebx +
mov [ebp-34h] edi +
mov dword ptr [ebp-2Ch] 5 +
lea eax [ebp-28h] +
push eax  +
mov ecx edx +
mov byte ptr [ebp-4] 0Ch +
call sub_1005BE0  +
mov ecx [esi+40h] +
lea eax [ebp-1Ch] +
push eax  +
call sub_1005BE0  +
mov ecx [esi+28h] +
lea eax [ebp-34h] +
push eax  +
call sub_1005BE0  +
push dword ptr [ebp-2Ch]  +
mov ecx [esi+14h] +
push dword ptr [ebp-20h]  +
mov eax [ecx] +
call dword ptr [eax+20h]  +
push dword ptr [ebp-2Ch]  +
mov ecx [esi+14h] +
push dword ptr [ebp-14h]  +
mov edi eax +
mov eax [ecx] +
call dword ptr [eax+20h]  +
push dword ptr [ebp-20h]  +
mov ecx esi +
mov edx eax +
call sub_103AE43  +
push dword ptr [ebp-14h]  +
mov [ebp-44h] eax +
call sub_103AE43  +
mov ecx [esi+20h] +
mov [ebp-38h] edx +
lea edx [ebp-44h] +
mov [ebp-40h] eax +
mov [ebp-3Ch] edi +
mov eax [ecx] +
push edx  +
call dword ptr [eax+24h]  +
push 4  +
jmp loc_103B099  +
cmp eax [esi+58h] +
jnz loc_103B0A0  +
push 3  +
pop ebx  +
mov edi offset off_1006E84 +
mov [ebp-24h] ebx +
mov [ebp-28h] edi +
mov dword ptr [ebp-20h] 1 +
and dword ptr [ebp-14h] 0 +
mov dword ptr [ebp-4] 0Dh +
mov [ebp-18h] ebx +
mov [ebp-1Ch] edi +
push 5  +
mov [ebp-30h] ebx +
pop ebx  +
mov [ebp-34h] edi +
mov [ebp-2Ch] ebx +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 0Fh +
call sub_1005BE0  +
mov ecx [esi+58h] +
lea eax [ebp-1Ch] +
push eax  +
call sub_1005BE0  +
mov ecx [esi+28h] +
lea eax [ebp-34h] +
push eax  +
call sub_1005BE0  +
push dword ptr [ebp-2Ch]  +
mov ecx [esi+14h] +
push dword ptr [ebp-20h]  +
mov eax [ecx] +
call dword ptr [eax+20h]  +
push dword ptr [ebp-2Ch]  +
mov ecx [esi+14h] +
push dword ptr [ebp-14h]  +
mov edi eax +
mov eax [ecx] +
call dword ptr [eax+20h]  +
push dword ptr [ebp-20h]  +
mov ecx esi +
mov edx eax +
call sub_103AE43  +
push dword ptr [ebp-14h]  +
mov [ebp-44h] eax +
call sub_103AE43  +
mov ecx [esi+20h] +
mov [ebp-38h] edx +
lea edx [ebp-44h] +
mov [ebp-40h] eax +
mov [ebp-3Ch] edi +
mov eax [ecx] +
push edx  +
call dword ptr [eax+24h]  +
push ebx  +
jmp loc_103B099  +
push 3  +
pop ebx  +
mov edi offset off_1006E84 +
mov [ebp-24h] ebx +
mov [ebp-28h] edi +
mov dword ptr [ebp-20h] 1 +
and dword ptr [ebp-14h] 0 +
push 5  +
pop eax  +
mov [ebp-4] eax +
mov [ebp-18h] ebx +
mov [ebp-1Ch] edi +
mov [ebp-30h] ebx +
mov [ebp-34h] edi +
mov [ebp-2Ch] eax +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 7 +
call sub_1005BE0  +
mov ecx [esi+40h] +
lea eax [ebp-1Ch] +
push eax  +
call sub_1005BE0  +
mov ecx [esi+28h] +
lea eax [ebp-34h] +
push eax  +
call sub_1005BE0  +
push dword ptr [ebp-2Ch]  +
mov ecx [esi+14h] +
push dword ptr [ebp-20h]  +
mov eax [ecx] +
call dword ptr [eax+20h]  +
push dword ptr [ebp-2Ch]  +
mov ecx [esi+14h] +
push dword ptr [ebp-14h]  +
mov edi eax +
mov eax [ecx] +
call dword ptr [eax+20h]  +
push dword ptr [ebp-20h]  +
mov ecx esi +
mov edx eax +
call sub_103AE43  +
push dword ptr [ebp-14h]  +
mov [ebp-44h] eax +
call sub_103AE43  +
mov [ebp-40h] eax +
mov [ebp-3Ch] edi +
mov ecx [esi+20h] +
mov [ebp-38h] edx +
mov eax [ecx] +
lea edx [ebp-44h] +
push edx  +
call dword ptr [eax+24h]  +
jmp loc_103B097  +
***
cmp edi ebx +
jmp loc_100A15D  +
mov eax [edx+ecx*4] +
cmp eax edi +
ja loc_100A165  +
jmp loc_100A14F  +
***
push 8  +
pop eax  +
mov [ecx] ax +
jmp loc_10145CD  +
***
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
jmp loc_101E6D6  +
***
cmp [ebp+Type] 2 +
jnz loc_101B70C  +
jmp loc_101B6E5  +
***
mov esi 0C0040200h +
jmp loc_1014754  +
***
push 0  +
lea eax [ebp-10h] +
push eax  +
call sub_101403C  +
jmp loc_1020F5C  +
***
mov [ebp+var_4] ebx +
jmp loc_101AB15  +
***
cld   +
jmp fword ptr [eax+2Ch]  +
***
xor eax offset ?classCMemoryException@CMemoryException@@2UCRuntimeClass@@B +
mov ecx esi +
mov [ebp-18h] esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
mov ecx esi +
test eax eax +
jz loc_10488A9  +
push 0F109h  +
push 1030h  +
jmp loc_10488C1  +
push ds:?classCUserException@CUserException@@2UCRuntimeClass@@B  +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jnz loc_10488C6  +
push 0F109h  +
push 10h  +
mov ecx esi +
mov eax [esi] +
call dword ptr [eax+18h]  +
mov eax (offset dword_1009FD8+5Ch) +
retn   +
***
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_1048938  +
mov edx [edx+8] +
cmp byte ptr [edx+38h] 0 +
jz loc_1048940  +
cmp esi [ecx+8] +
jnz loc_1048918  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1052108  +
mov eax [esi+4] +
mov byte ptr [eax+38h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+38h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1072636  +
jmp loc_1048984  +
mov edx [edx] +
cmp byte ptr [edx+38h] 0 +
jnz loc_1048958  +
mov byte ptr [ecx+38h] 1 +
mov byte ptr [edx+38h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+38h] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_1048984  +
cmp esi [ecx] +
jnz loc_1048966  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1072636  +
mov eax [esi+4] +
mov byte ptr [eax+38h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+38h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1052108  +
lea eax [esi+4] +
jmp loc_1010C9F  +
***
lea ecx [ebp+var_4] +
call sub_1051919  +
mov esi [ebp+var_4] +
jmp loc_1016317  +
***
mov eax [ebp-20h] +
mov [ebp+8] eax +
mov eax offset loc_101B515 +
retn   +
***
lea ecx [ebp-274h] +
call sub_10069B9  +
movzx eax word ptr [ebp-27Ch] +
mov edx [ebx] +
xor esi esi +
push esi  +
lea ecx [ebp-274h] +
push ecx  +
push 0FFFFFFFFh  +
push eax  +
mov ecx ebx +
mov [ebp-4] esi +
mov [ebp-270h] eax +
call dword ptr [edx+14h]  +
cmp eax esi +
jz loc_100695C  +
cmp [ebp-244h] esi +
jz loc_100695C  +
lea eax [ebp-288h] +
push eax  +
lea ecx [ebp-274h] +
mov byte ptr [ebp-4] 1 +
call sub_10725E8  +
mov eax [ebp-288h] +
cmp [eax-8] esi +
mov byte ptr [ebp-4] 2 +
jle loc_1048A79  +
lea eax [ebp-28Ch] +
push eax  +
lea ecx [ebp-274h] +
call sub_10725E8  +
push dword ptr [ebp-284h]  +
mov eax [eax] +
push eax  +
push offset unk_10046EC  +
call sub_1069919  +
lea ecx [ebp-28Ch] +
mov [ebp-278h] eax +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-288h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
jmp loc_100695C  +
***
mov eax offset loc_1048A93 +
retn   +
***
mov ebx [ebp-2A0h] +
jmp loc_100695C  +
***
cmp eax eax +
jnz loc_100696B  +
mov esi [ebp+10h] +
push 4  +
pop ecx  +
mov edi offset dword_100FB5C +
xor eax eax +
cmps   +
jz loc_102E36D  +
jmp loc_100696B  +
***
push 2  +
pop eax  +
jmp loc_101B667  +
***
push 4  +
pop ecx  +
mov edi offset dword_1048D88 +
xor eax eax +
cmps   +
jnz loc_1006985  +
xor esi esi +
mov [ebp-298h] esi +
mov [ebp-294h] esi +
mov [ebp-290h] esi +
mov eax [ebp-280h] +
mov ecx [eax+30h] +
mov eax [ecx] +
lea edx [ebp-29Ch] +
push edx  +
mov dword ptr [ebp-4] 9 +
call dword ptr [eax+0Ch]  +
cmp eax esi +
mov [ebp-278h] eax +
jl loc_1048D50  +
cmp [ebp-298h] esi +
jnz loc_1048B24  +
xor eax eax +
jmp loc_1048B33  +
mov eax [ebp-294h] +
sub eax [ebp-298h] +
sar eax 2 +
push eax  +
push esi  +
push 0Dh  +
call ds:SafeArrayCreateVector  +
mov [ebp-288h] eax +
cmp eax esi +
jz loc_1048D46  +
mov [ebp-28Ch] esi +
mov [ebp-280h] esi +
mov esi ds:PropVariantClear +
xor ebx ebx +
cmp [ebp-298h] ebx +
jz loc_1048D13  +
mov eax [ebp-294h] +
sub eax [ebp-298h] +
sar eax 2 +
cmp [ebp-280h] eax +
jnb loc_1048D13  +
push 30h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-2A0h] eax +
mov byte ptr [ebp-4] 0Ah +
cmp eax ebx +
jz loc_1048BA5  +
mov ecx eax +
call sub_1010F51  +
mov ebx eax +
mov ecx [ebp-280h] +
xor eax eax +
lea edi [ebp-2D4h] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp-298h] +
mov eax [eax+ecx*4] +
push 104h  +
lea ecx [ebp-21Ch] +
push ecx  +
push eax  +
mov byte ptr [ebp-4] 9 +
call ds:GetFileTitleW  +
lea eax [ebp-2D4h] +
push eax  +
lea eax [ebp-21Ch] +
push eax  +
call sub_1011A21  +
lea eax [ebp-2D4h] +
push eax  +
push offset unk_10046EC  +
mov ecx ebx +
call sub_1010CDE  +
lea eax [ebp-2D4h] +
push eax  +
call esi  +
mov ecx [ebp-280h] +
xor eax eax +
lea edi [ebp-2C4h] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp-298h] +
mov eax [eax+ecx*4] +
lea ecx [ebp-2C4h] +
push ecx  +
push eax  +
call sub_1011A21  +
lea eax [ebp-2C4h] +
push eax  +
push offset dword_1048D74  +
mov ecx ebx +
call sub_1010CDE  +
lea eax [ebp-2C4h] +
push eax  +
call esi  +
xor eax eax +
lea edi [ebp-2B4h] +
stos   +
stos   +
stos   +
stos   +
push 0Bh  +
pop eax  +
mov [ebp-2B4h] ax +
xor eax eax +
mov [ebp-2ACh] ax +
lea eax [ebp-2B4h] +
push eax  +
push offset dword_1048D9C  +
mov ecx ebx +
call sub_1010CDE  +
lea eax [ebp-2B4h] +
push eax  +
call esi  +
and dword ptr [ebp-27Ch] 0 +
lea edx [ebp-27Ch] +
push edx  +
lea eax [ebx+2Ch] +
mov ecx [eax] +
push offset dword_1048DB0  +
push eax  +
mov byte ptr [ebp-4] 0Bh +
call dword ptr [ecx]  +
mov [ebp-278h] eax +
test eax eax +
jl loc_1048CF6  +
push dword ptr [ebp-27Ch]  +
lea eax [ebp-28Ch] +
push eax  +
push dword ptr [ebp-288h]  +
call ds:SafeArrayPutElement  +
mov [ebp-278h] eax +
test eax eax +
jl loc_1048CF6  +
mov eax [ebp-27Ch] +
mov byte ptr [ebp-4] 9 +
test eax eax +
jz loc_1048CE5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-280h]  +
inc dword ptr [ebp-28Ch]  +
jmp loc_1048B5D  +
***
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax+4]  +
mov eax [ebp-27Ch] +
mov byte ptr [ebp-4] 9 +
test eax eax +
jz loc_1048D13  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp dword ptr [ebp-278h] 0 +
jl loc_1048D38  +
push dword ptr [ebp-284h]  +
push dword ptr [ebp-288h]  +
push offset dword_1048D88  +
call sub_1072684  +
mov [ebp-278h] eax +
push dword ptr [ebp-288h]  +
call ds:SafeArrayDestroy  +
jmp loc_1048D50  +
mov dword ptr [ebp-278h] 80004005h +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-29Ch] +
call sub_10726DD  +
jmp loc_1006985  +
***
mov dword ptr [ebp-278h] 80004005h +
jmp loc_1006985  +
***
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_106CAD2  +
add esp 14h +
pop esi  +
retn   +
mov [esi] eax +
jmp loc_100C30E  +
***
mov ecx [eax] +
mov edx [ebp+arg_C] +
mov [edx] ecx +
mov ecx [eax+4] +
mov edx [ebp+arg_C] +
mov [edx+4] ecx +
add [ebp+arg_C] 8 +
add eax 8 +
jmp loc_103C893  +
***
push esi  +
push edi  +
mov edi [ebp+arg_C] +
mov esi eax +
movs   +
movs   +
movs   +
add [ebp+arg_C] 0Ch +
add eax 0Ch +
cmp eax [ebp+arg_8] +
jnz loc_1048DF4  +
pop edi  +
pop esi  +
jmp loc_103C82A  +
***
call loc_1051331  +
int 3  +
***
mov ecx [ebp-10h] +
jmp loc_100C331  +
***
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_1048E87  +
mov esi eax +
jmp loc_1048EA0  +
cmp byte ptr [ebx+15h] 0 +
mov esi [eax+4] +
jnz loc_1048E93  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_1048EB0  +
mov [ecx+4] eax +
jmp loc_1048EBE  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_1048EBB  +
mov [ecx] eax +
jmp loc_1048EBE  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+14h] +
mov dl [edi+14h] +
mov [eax+14h] dl +
mov [edi+14h] cl +
mov ecx [ebp-10h] +
jmp loc_100C3BF  +
cmp byte ptr [eax+14h] 0 +
jnz loc_1048EF1  +
mov byte ptr [eax+14h] 1 +
push esi  +
mov byte ptr [esi+14h] 0 +
call sub_10140BF  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+15h] 0 +
jnz loc_100C405  +
mov edx [eax+8] +
cmp byte ptr [edx+14h] 1 +
jnz loc_1048F10  +
mov edx [eax] +
cmp byte ptr [edx+14h] 1 +
jz loc_100C401  +
mov edx [eax] +
cmp byte ptr [edx+14h] 1 +
jnz loc_1048F2E  +
mov edx [eax+8] +
mov byte ptr [edx+14h] 1 +
push eax  +
mov byte ptr [eax+14h] 0 +
call sub_1014074  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+14h] +
mov [eax+14h] dl +
mov byte ptr [esi+14h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+14h] 1 +
call sub_10140BF  +
jmp loc_100C430  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_100C2F0  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_100C346  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1048F4A  +
pop edi  +
jmp loc_101F860  +
***
mov ecx [ebp-0E4h] +
push eax  +
call sub_100E9A2  +
mov esi [eax] +
mov edi [eax+4] +
lea ecx [ebp-0CCh] +
call ??0CString@@QAE@XZ  +
movzx eax di +
push eax  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 2 +
call ?LoadStringW@CString@@QAEHI@Z  +
test eax eax +
jz loc_1048FCE  +
lea eax [ebp-0F4h] +
push eax  +
push dword ptr [ebp-0CCh]  +
call sub_1011A21  +
test eax eax +
jge loc_1048FCE  +
mov [ebp-144h] eax +
push offset dword_10838F8  +
lea eax [ebp-144h] +
push eax  +
call _CxxThrowException  +
push 13h  +
pop eax  +
push 30h  +
mov [ebp-138h] ax +
mov [ebp-130h] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-124h] ecx +
mov byte ptr [ebp-4] 3 +
test ecx ecx +
jz loc_1048FFF  +
call sub_1010F51  +
mov esi eax +
jmp loc_1049001  +
xor esi esi +
lea eax [ebp-0F4h] +
push eax  +
push offset unk_10046EC  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_1010CDE  +
lea eax [ebp-138h] +
push eax  +
push offset dword_10493E0  +
mov ecx esi +
call sub_1010CDE  +
and dword ptr [ebp-0D4h] 0 +
lea edx [ebp-0D4h] +
push edx  +
lea eax [esi+2Ch] +
mov ecx [eax] +
push offset dword_1010AB4  +
push eax  +
mov byte ptr [ebp-4] 4 +
call dword ptr [ecx]  +
mov [ebp-0C8h] eax +
test eax eax +
jge loc_1049085  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
mov eax [ebp-0D4h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_1049071  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
jmp loc_100FEAC  +
***
mov eax [ebp-0E0h] +
push dword ptr [ebp-0D4h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
lea eax [ebp-0F4h] +
push eax  +
call ebx  +
lea eax [ebp-138h] +
push eax  +
call ebx  +
mov eax [ebp-0D4h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_10490BD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
inc dword ptr [ebp-0D0h]  +
jmp loc_100FE9A  +
***
mov eax [ebp-150h] +
mov [ebp-0C8h] eax +
mov eax offset loc_10490E9 +
retn   +
***
jmp loc_100FEAC  +
***
mov dword ptr [ebp-0C8h] 80004005h +
mov eax offset loc_100FEAC +
retn   +
***
push 13h  +
pop ecx  +
mov [ebp-0ECh] eax +
lea eax [ebp-0F4h] +
push eax  +
mov [ebp-0F4h] cx +
push offset dword_10493E0  +
mov ecx esi +
call sub_1010CDE  +
jmp loc_10165BF  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
mov eax [ebp-0CCh] +
test eax eax +
jmp loc_1049324  +
call sub_101096F  +
mov ebx ds:PropVariantClear +
mov [ebp-0DCh] eax +
mov [ebp-0D0h] esi +
mov eax [ebp-0D0h] +
cmp eax [ebp-0DCh] +
jnb loc_1010F36  +
mov ecx [ebp-0E0h] +
push eax  +
call sub_1010B4E  +
mov esi eax +
xor eax eax +
lea edi [ebp-100h] +
movs   +
movs   +
movs   +
lea edi [ebp-0F4h] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [ebp-120h] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [ebp-110h] +
stos   +
stos   +
stos   +
stos   +
push 13h  +
pop eax  +
mov [ebp-0F4h] ax +
mov eax [ebp-100h] +
mov [ebp-0ECh] eax +
push 13h  +
pop eax  +
mov [ebp-120h] ax +
mov eax [ebp-0FCh] +
push 30h  +
mov [ebp-118h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-124h] ecx +
mov byte ptr [ebp-4] 10h +
test ecx ecx +
jz loc_10491ED  +
call sub_1010F51  +
mov esi eax +
jmp loc_10491EF  +
xor esi esi +
lea eax [ebp-0F4h] +
push eax  +
push offset dword_10493CC  +
mov ecx esi +
mov byte ptr [ebp-4] 0Ah +
call sub_1010CDE  +
lea eax [ebp-120h] +
push eax  +
push offset dword_10493F4  +
mov ecx esi +
call sub_1010CDE  +
mov eax [ebp-0F8h] +
test eax eax +
jbe loc_1049246  +
push 13h  +
pop ecx  +
mov [ebp-108h] eax +
lea eax [ebp-110h] +
push eax  +
mov [ebp-110h] cx +
push offset dword_10493E0  +
mov ecx esi +
call sub_1010CDE  +
and dword ptr [ebp-0CCh] 0 +
lea edx [ebp-0CCh] +
push edx  +
lea eax [esi+2Ch] +
mov ecx [eax] +
push offset dword_1010AB4  +
push eax  +
mov byte ptr [ebp-4] 11h +
call dword ptr [ecx]  +
mov [ebp-0C8h] eax +
test eax eax +
jl loc_1049126  +
mov eax [ebp-0D4h] +
push dword ptr [ebp-0CCh]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
lea eax [ebp-0F4h] +
push eax  +
call ebx  +
lea eax [ebp-120h] +
push eax  +
call ebx  +
lea eax [ebp-110h] +
push eax  +
call ebx  +
mov eax [ebp-0CCh] +
mov byte ptr [ebp-4] 0Ah +
test eax eax +
jz loc_10492B4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-0D0h]  +
jmp loc_1049153  +
***
mov [ebp-148h] eax +
push offset dword_10838F8  +
lea eax [ebp-148h] +
jmp loc_1048FC8  +
***
push 13h  +
pop ecx  +
mov [ebp-118h] eax +
lea eax [ebp-120h] +
push eax  +
mov [ebp-120h] cx +
push offset dword_10493E0  +
mov ecx esi +
call sub_1010CDE  +
jmp loc_10118D7  +
***
mov [ebp-13Ch] eax +
push offset dword_10838F8  +
lea eax [ebp-13Ch] +
jmp loc_1048FC8  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
mov eax [ebp-0D0h] +
cmp eax edi +
mov byte ptr [ebp-4] 0Ah +
jz loc_1010F36  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1010F36  +
***
lea eax [ebp-110h] +
push eax  +
push dword ptr [ebp-0CCh]  +
call sub_1011A21  +
cmp eax edi +
jge loc_101196B  +
mov [ebp-14Ch] eax +
push offset dword_10838F8  +
lea eax [ebp-14Ch] +
jmp loc_1048FC8  +
***
mov dword ptr [ebp-140h] 80004005h +
push offset dword_10838F8  +
lea eax [ebp-140h] +
jmp loc_1048FC8  +
***
mov eax [ebp-154h] +
mov [ebp-0C8h] eax +
mov eax offset loc_1049395 +
retn   +
***
jmp loc_1010F41  +
***
mov dword ptr [ebp-0C8h] 80004005h +
mov eax offset loc_1010F41 +
retn   +
***
cmp eax eax +
jnz loc_1006D22  +
mov esi [ebp+10h] +
push 4  +
pop ecx  +
mov edi offset dword_100FB5C +
xor eax eax +
cmps   +
jnz loc_1006D22  +
jmp loc_100FF4E  +
***
mov eax [edi+14h] +
mov eax [eax+esi*4+4] +
sub [ebp+arg_4] eax +
jmp loc_10171EE  +
***
mov eax [esi+14h] +
mov eax [eax+ecx*4] +
add [ebp+var_4] eax +
jmp loc_1019488  +
mov ecx esi +
call sub_100B9A1  +
mov ecx [esi+14h] +
mov esi [ebp+var_4] +
add esi [ecx+eax*4] +
jmp loc_10194E1  +
***
xor ecx ecx +
jmp loc_100B6B6  +
push 0  +
lea ecx [ebp+var_C] +
call sub_104BD15  +
push offset dword_1082CC0  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_102135A  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
cmp edi 7FFFFFFh +
jbe loc_1049497  +
call loc_1058901  +
push eax  +
push edi  +
call sub_100B693  +
shl edi 5 +
add edi eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov al 1 +
jmp loc_101D0AC  +
***
push esi  +
call sub_10195C5  +
add [ebp+arg_C] 20h +
add esi 20h +
jmp loc_10213A1  +
***
mov esi [ebp-14h] +
jmp loc_10494E9  +
push esi  +
call sub_102132B  +
add esi 20h +
cmp esi [ebp+10h] +
jnz loc_10494E0  +
push 0  +
push 0  +
call _CxxThrowException  +
mov esi [ebp-14h] +
jmp loc_1049505  +
push esi  +
call sub_102132B  +
add esi 20h +
cmp esi [ebp+8] +
jnz loc_10494FC  +
push 0  +
push 0  +
call _CxxThrowException  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1072A44  +
jmp loc_10184E0  +
***
call sub_100CA8E  +
fld  [ebp+arg_0] +
test eax eax +
lea eax [esi+298h] +
fsub  qword ptr [eax] +
fld1   +
fsub  qword ptr [eax] +
fdivp st(1) st +
fmul  ds:dbl_1009F68 +
jnz loc_1049583  +
fadd  ds:dbl_1006830 +
call _ftol2_sse  +
mov dword ptr [ebp+arg_0+4] eax +
fild  dword ptr [ebp+arg_0+4] +
call _ftol2_sse  +
jmp loc_1010313  +
***
xor eax eax +
inc eax  +
jmp loc_1010690  +
***
lea ecx [ebx+22Ch] +
mov [eax] ecx +
jmp loc_1018E6C  +
mov [eax] edi +
jmp loc_1018F12  +
***
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_1072DFE  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
jmp loc_10181FC  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
***
call sub_10732B3  +
push dword ptr [esi+44h]  +
inc ebx  +
call edi  +
cmp ebx eax +
jge loc_10189D7  +
jmp sub_1049683  +
***
xor ecx ecx +
cmp eax 1 +
setnle cl  +
mov eax ecx +
jmp loc_10496C1  +
cmp eax 2 +
jle loc_10496BF  +
push 2  +
jmp loc_10496BC  +
cmp eax 3 +
jle loc_10496BF  +
push 3  +
jmp loc_10496BC  +
push 4  +
pop eax  +
jmp loc_10496C1  +
xor eax eax +
push ebx  +
push edi  +
push dword ptr [ebp-18h]  +
push eax  +
jmp loc_10170F3  +
***
mov eax [ecx+0Ch] +
sub eax edx +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
xor ecx ecx +
jmp loc_101BE38  +
push 0  +
lea ecx [ebp+var_C] +
call sub_104BD15  +
push offset dword_1082CC0  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
call loc_106AEE9  +
jmp loc_101501B  +
mov ebx eax +
jmp loc_101502B  +
mov eax ebx +
jmp loc_1015036  +
or eax 0FFFFFFFFh +
jmp loc_1015068  +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1014939  +
***
mov esi [ebp-14h] +
jmp loc_1049747  +
push esi  +
call sub_1014906  +
add esi 1Ch +
cmp esi [ebp+10h] +
jnz loc_104973E  +
push 0  +
push 0  +
call _CxxThrowException  +
***
lea eax [ebp-28h] +
jmp loc_101BEF6  +
***
mov esi [ebp-14h] +
jmp loc_1049794  +
push esi  +
call sub_1014906  +
add esi 1Ch +
cmp esi [ebp+8] +
jnz loc_104978B  +
push 0  +
push 0  +
call _CxxThrowException  +
***
push dword ptr [ebp-34h]  +
call sub_10148C4  +
push dword ptr [ebp-34h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
***
push 0  +
push 0  +
call _CxxThrowException  +
***
mov eax [ebp+0Ch] +
mov ecx [ebp-3Ch] +
imul eax eax +
push ecx  +
mov ecx [ecx+8] +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
add eax ecx +
push eax  +
call sub_10148C4  +
jmp loc_10497DD  +
***
imul edi edi +
push ecx  +
mov ebx ecx +
push ecx  +
sub ebx edi +
push ebx  +
call sub_101CBD8  +
push dword ptr [ebp-34h]  +
mov [esi+8] eax +
push ebx  +
push dword ptr [ebp+8]  +
call sub_10738EB  +
lea eax [ebp-30h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_10737DB  +
add esp 18h +
jmp loc_101CBBF  +
***
mov eax [ebp+arg_4] +
sub eax [edi+4] +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi eax +
jmp loc_101CAC0  +
***
mov dword ptr [esi] offset dword_10498DC +
mov dword ptr [esi+8] offset dword_104A950 +
mov dword ptr [esi+0Ch] offset off_101CF14 +
mov dword ptr [ebp-10h] 1 +
jmp loc_101DDCB  +
***
mov eax [ebp+8] +
mov ecx [eax] +
mov ecx [ecx+4] +
add ecx eax +
mov eax [ecx+8] +
push 1  +
or eax 4 +
push eax  +
call sub_101D3B8  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_104991A +
retn   +
mov esi [ebp+8] +
xor ebx ebx +
jmp loc_101BF98  +
***
push 1  +
push eax  +
call sub_101BFFD  +
mov [esi+8] eax +
jmp loc_101CA9D  +
***
imul ecx ecx +
add ecx [esi+4] +
call sub_101DE5A  +
jmp loc_101CA62  +
***
mov ecx [ebp-10h] +
call sub_107395E  +
cmp edi 1 +
jbe loc_1049964  +
add esi 1Ch +
dec edi  +
mov ecx [ebp-10h] +
push esi  +
call sub_101CA6C  +
add esi 1Ch +
dec edi  +
jnz loc_1049955  +
mov esi [ebp-10h] +
mov ecx esi +
call sub_101BDEF  +
cmp eax [esi+30h] +
jnz loc_101DEE5  +
mov dword ptr [ebp-14h] 1 +
jmp loc_101DEE5  +
***
inc esi  +
jmp loc_102159D  +
***
xor ecx ecx +
jmp loc_101DF91  +
push 0  +
lea ecx [ebp+var_C] +
call sub_104BD15  +
push offset dword_1082CC0  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
xor ecx ecx +
jmp loc_101E026  +
***
push 0  +
lea ecx [ebp+var_C] +
call sub_104BD15  +
push offset dword_1082CC0  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
cmp dword ptr [esi+18h] 8 +
jb loc_10499D4  +
mov eax [esi+4] +
jmp loc_10499D7  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub ebx eax +
sar ebx 1 +
push ebx  +
push esi  +
mov ecx esi +
call sub_1014E3A  +
jmp loc_101F2A5  +
***
call loc_106AE9B  +
int 3  +
push [ebp+arg_0]  +
lea eax [esi+0Ch] +
push eax  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_1049A0C  +
mov esi [esi+8] +
jmp loc_10215EF  +
mov edi esi +
mov esi [esi] +
jmp loc_10215EF  +
***
add eax 0Ch +
push eax  +
push [ebp+arg_4]  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_10215C6  +
lea eax [ebp+var_4] +
jmp loc_10215CF  +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_10202D0  +
mov esi [esi] +
push edi  +
call sub_1073F76  +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+45h] 0 +
pop ecx  +
mov edi esi +
jnz loc_10202E9  +
jmp loc_1049A33  +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_10216A4  +
mov esi [esi] +
push edi  +
call sub_1073F8E  +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+2Dh] 0 +
pop ecx  +
mov edi esi +
jnz loc_10216BD  +
jmp loc_1049A5A  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1073C8A  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10741E5  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1049A82  +
pop edi  +
jmp loc_102028A  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1073B78  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_107445B  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1049AA7  +
pop edi  +
jmp loc_102165E  +
***
xor esi esi +
jmp loc_1021568  +
push edi  +
lea ecx [ebp-50h] +
call sub_10142C5  +
lea eax [ebp-50h] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 4 +
call sub_1075550  +
cmp dword ptr [eax+18h] 8 +
jb loc_1049AF5  +
mov eax [eax+4] +
jmp loc_1049AF8  +
add eax 4 +
push eax  +
call ds:DeleteFileW  +
push 0  +
push 1  +
lea ecx [ebp-50h] +
call sub_1012F94  +
jmp loc_102154C  +
lea eax [ebp-28h] +
jmp loc_1021559  +
***
lea eax [ebp-28h] +
jmp loc_101F187  +
push dword ptr [ebp-30h]  +
mov ecx esi +
call sub_107603B  +
push dword ptr [ebp-30h]  +
call ds:RegCloseKey  +
xor ebx ebx +
inc ebx  +
jmp loc_101F1A6  +
***
lea eax [ebp+var_44] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 1  +
push ecx  +
push 0C06D0057h  +
call ds:RaiseException  +
xor eax eax +
jmp loc_100ACF3  +
movzx eax dx +
jmp loc_100AC94  +
lea edx [ebp+var_44] +
push edx  +
push ecx  +
call eax  +
mov ebx eax +
test ebx ebx +
jz loc_100ACA6  +
jmp loc_100ACE4  +
lea ecx [ebp+var_44] +
push ecx  +
push 1  +
call eax  +
jmp loc_1024DEA  +
call ds:GetLastError  +
mov [ebp+var_24] eax +
mov eax ds:dword_100ACFC +
test eax eax +
jz loc_1049BA9  +
lea ecx [ebp+var_44] +
push ecx  +
push 3  +
call eax  +
mov edi eax +
test edi edi +
jnz loc_1024DCD  +
lea eax [ebp+var_44] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 1  +
push 0  +
push 0C06D007Eh  +
call ds:RaiseException  +
mov eax [ebp+var_28] +
jmp loc_100ACF3  +
push 8  +
push 40h  +
call ds:LocalAlloc  +
test eax eax +
jz loc_100ACAE  +
mov [eax+4] esi +
mov ecx dword_108EF2C +
mov [eax] ecx +
mov dword_108EF2C eax +
jmp loc_100ACAE  +
lea ecx [ebp+var_44] +
push ecx  +
push 2  +
call eax  +
mov ebx eax +
jmp loc_100ACBE  +
cmp [esi+1Ch] ebx +
jz loc_100ACCB  +
mov eax [edi+3Ch] +
add eax edi +
cmp dword ptr [eax] 4550h +
jnz loc_100ACCB  +
mov ecx [ebp+var_4] +
cmp [eax+8] ecx +
jnz loc_100ACCB  +
cmp edi [eax+34h] +
jnz loc_100ACCB  +
mov eax [ebp+var_C] +
mov ecx [ebp+arg_0] +
mov ebx [ecx+eax] +
test ebx ebx +
jz loc_100ACCB  +
jmp loc_100ACDF  +
call ds:GetLastError  +
mov [ebp+var_24] eax +
mov eax ds:dword_100ACFC +
test eax eax +
jz loc_1049C61  +
lea ecx [ebp+var_44] +
push ecx  +
push 4  +
call eax  +
mov ebx eax +
test ebx ebx +
jnz loc_100ACDF  +
lea eax [ebp+var_44] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
push 1  +
push ebx  +
push 0C06D007Fh  +
call ds:RaiseException  +
mov ebx [ebp+var_28] +
jmp loc_100ACDF  +
and [ebp+var_24] 0 +
lea ecx [ebp+var_44] +
push ecx  +
push 5  +
mov [ebp+var_2C] edi +
mov [ebp+var_28] ebx +
call eax  +
jmp loc_100ACF1  +
***
push dword ptr [ebp+18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_106C91B  +
jmp locret_102623E  +
***
fld  dword ptr [esi+0A4h] +
call _ftol2_sse  +
push eax  +
push edi  +
lea ecx [ebp-1Ch] +
call sub_106FACD  +
push dword ptr [ebp+8]  +
lea ecx [ebp-1Ch] +
call sub_1038DE8  +
jmp loc_1039413  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
***
mov ebx [esi+8] +
mov ecx [ebp+8] +
mov eax ebx +
sub eax ecx +
sar eax 3 +
push esi  +
cmp eax edi +
jnb loc_1049D60  +
mov eax edi +
shl eax 3 +
mov [ebp+10h] eax +
add eax ecx +
push eax  +
push ebx  +
push ecx  +
call sub_100F082  +
mov eax [esi+8] +
lea ecx [ebp-18h] +
push ecx  +
mov ecx eax +
sub ecx [ebp+8] +
mov dword ptr [ebp-4] 2 +
sar ecx 3 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_100EF53  +
mov eax [ebp+10h] +
add [esi+8] eax +
mov esi [esi+8] +
lea ecx [ebp-18h] +
push ecx  +
sub esi eax +
push esi  +
push dword ptr [ebp+8]  +
call sub_106DF2E  +
add esp 0Ch +
jmp loc_100EF46  +
push ebx  +
shl edi 3 +
mov [ebp+10h] ebx +
sub [ebp+10h] edi +
push ebx  +
push dword ptr [ebp+10h]  +
call sub_100F082  +
push ebx  +
push dword ptr [ebp+10h]  +
mov [esi+8] eax +
push dword ptr [ebp+8]  +
call sub_10780FD  +
lea eax [ebp-18h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_106DF2E  +
add esp 18h +
jmp loc_100EF46  +
***
xor eax eax +
retn   +
***
call loc_1051331  +
int 3  +
call sub_100C68F  +
mov esi eax +
jmp loc_100E9E7  +
***
lea esi [ebx+14h] +
lea edi [ebp+rcDst] +
movs   +
movs   +
movs   +
movs   +
xor edi edi +
jmp loc_100EAFA  +
cmp byte ptr [ebx+59h] 0 +
jnz loc_100EB2F  +
jmp loc_100EBD7  +
dec eax  +
jmp loc_100EB42  +
mov eax [ebx+4Ch] +
mov [ebp+var_8] eax +
jmp loc_100EB73  +
***
push 1  +
push eax  +
call sub_100EF53  +
mov [esi+8] eax +
jmp loc_100EE15  +
***
fld  dword ptr [esi+0Ch] +
lea eax [ebp+var_1C] +
fstp  [ebp+var_1C] +
push eax  +
fldz   +
lea ecx [ebx+48h] +
fst  [ebp+var_18] +
fstp  [ebp+var_14] +
call sub_1010DFE  +
jmp loc_100EDA3  +
***
mov ecx [ecx+24h] +
jmp loc_103A9FA  +
***
fst  [ebp+var_8] +
jmp loc_1039005  +
fstp  st(1) +
jmp loc_1039011  +
***
fcomp  dword ptr [esi+0ACh] +
fnstsw  ax +
test ah 44h +
jp loc_1038F47  +
jmp loc_1038F8E  +
***
cmp eax 8 +
jz loc_103ABD9  +
push 1  +
call sub_103A9E7  +
test al al +
jz loc_1049E5D  +
cmp dword ptr [edx+0A0h] 4 +
jb loc_103ABD9  +
xor eax eax +
retn   +
***
push 1  +
call sub_103A9E7  +
test al al +
jz loc_103AB96  +
mov eax [esi+2Ch] +
add eax 18h +
push eax  +
lea ecx [ebp+var_20] +
call sub_100CF7C  +
and [ebp+var_1C] 0 +
lea eax [ebp+var_20] +
push eax  +
mov eax [esi+2Ch] +
push dword ptr [eax+10h]  +
call sub_1033B88  +
mov edi eax +
mov eax [esi+2Ch] +
push dword ptr [eax+14h]  +
call sub_1033AEB  +
mov ebx eax +
mov eax [esi+2Ch] +
add eax 30h +
push eax  +
lea ecx [ebp+var_60] +
call sub_100CF33  +
lea eax [esi+70h] +
push eax  +
lea ecx [ebp+var_60] +
call sub_100C009  +
lea eax [ebp+var_60] +
push eax  +
push ebx  +
push edi  +
push dword ptr [esi+0A0h]  +
call sub_103385A  +
push edi  +
mov [esi+34h] eax +
call sub_100C26D  +
push ebx  +
call sub_100C26D  +
jmp loc_103AB96  +
mov eax [esi+30h] +
lea ecx [eax+18h] +
push ecx  +
push dword ptr [eax+10h]  +
call sub_1033B88  +
mov ebx eax +
mov eax [esi+30h] +
push dword ptr [eax+14h]  +
call sub_1033AEB  +
mov ecx eax +
lea edi [esi+50h] +
push edi  +
mov [ebp+var_8] ecx +
call sub_106D035  +
push [ebp+var_8]  +
mov [ebp+var_4] eax +
call sub_100C26D  +
mov eax [esi+30h] +
add eax 30h +
push eax  +
lea ecx [ebp+var_60] +
call sub_100CF33  +
push edi  +
lea ecx [ebp+var_60] +
call sub_100C009  +
lea eax [ebp+var_60] +
push eax  +
push [ebp+var_4]  +
push ebx  +
push dword ptr [esi+0A0h]  +
call sub_103385A  +
push ebx  +
mov [esi+38h] eax +
call sub_100C26D  +
push [ebp+var_4]  +
call sub_100C26D  +
jmp loc_103ABC1  +
***
cmp [esi+28h] ebx +
jz loc_1039256  +
push edi  +
push [ebp+var_4]  +
call sub_106CE86  +
push ebx  +
push offset off_108D4F0  +
push offset off_108D470  +
push ebx  +
push dword ptr [esi+38h]  +
mov edi eax +
call __RTDynamicCast  +
add esp 14h +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_1049FAC  +
lea ecx [ebp+var_18] +
call sub_100C68F  +
push [ebp+arg_0]  +
lea eax [ebp+var_18] +
push eax  +
mov ecx edi +
call sub_106E3D8  +
push [ebp+var_14]  +
mov ecx [ebp+var_8] +
push [ebp+var_18]  +
call sub_106E314  +
mov ecx [ebp+arg_0] +
push edi  +
push dword ptr [esi+38h]  +
call sub_106CF72  +
push edi  +
call sub_106CF56  +
pop edi  +
cmp [esi+4Ch] bl +
jz loc_1039256  +
cmp [esi+24h] ebx +
jnz loc_1039256  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_1078372  +
jmp loc_1039256  +
***
push eax  +
call sub_100DAD9  +
jmp loc_103A4D7  +
***
adc eax offset SysFreeString +
retn   +
***
mov eax offset off_104BB40 +
retn   +
***
mov eax offset off_104BB68 +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+0A4h] +
call ?Empty@CString@@QAEXXZ  +
lea ecx [esi+0A8h] +
call ?Empty@CString@@QAEXXZ  +
lea ecx [esi+0ACh] +
call ?Empty@CString@@QAEXXZ  +
lea ecx [esi+0B0h] +
call ?Empty@CString@@QAEXXZ  +
lea ecx [esi+0B4h] +
pop esi  +
jmp ?Empty@CString@@QAEXXZ  +
***
cmp dword ptr [ecx+0D8h] 0 +
jz locret_104BBDD  +
push 0  +
add ecx 0B8h +
call ?ShowWindow@CWnd@@QAEHH@Z  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
sar eax 2 +
mov ecx eax +
shl ecx 2 +
sub esi ecx +
test eax eax +
jle loc_104BC26  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push esi  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_104BC44  +
mov ecx [ebp+arg_8] +
fld  qword ptr [ecx] +
fstp  qword ptr [eax] +
add eax 8 +
cmp eax [ebp+arg_4] +
jnz loc_104BC3A  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
sar eax 3 +
mov ecx eax +
shl ecx 3 +
sub esi ecx +
test eax eax +
jle loc_104BC7B  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push esi  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpRect]  +
push dword ptr [ecx+20h]  +
call ds:GetWindowRect  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpRect]  +
push dword ptr [ecx+20h]  +
call ds:GetClientRect  +
pop ebp  +
retn 4  +
***
call ds:EnableWindow  +
retn   +
***
call ds:EnableWindow  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memmove_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call ??0exception@@QAE@ABQBD@Z  +
mov dword ptr [esi] offset off_104A130 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_104A130 +
jmp ??1exception@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_104A130 +
call ??1exception@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_104BD68  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ??0exception@@QAE@ABV0@@Z  +
mov dword ptr [esi] offset off_104A130 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
sar eax 2 +
mov ecx eax +
shl ecx 2 +
push esi  +
lea esi [ecx+edx] +
test eax eax +
jle loc_104BDE1  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push edx  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_104BCF2  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101FC4C  +
test byte ptr [ebp+8] 1 +
jz loc_104BE27  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?OnSysColorChange@CWnd@@IAEXXZ  +
push 0  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
mov ecx esi +
pop esi  +
jmp sub_1018940  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  qword ptr [ebp+8] +
push 0  +
push ecx  +
push ecx  +
mov ecx dword_108A24C +
fstp  qword ptr [esp] +
call sub_1010425  +
mov ecx dword_108A24C +
call sub_100FBC7  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0D8h] 0 +
jz loc_104BED0  +
cmp byte ptr [esi+380h] 0 +
jz loc_104BED0  +
push 5  +
call sub_1005C20  +
test eax eax +
jz loc_104BED0  +
push 5  +
lea ecx [esi+0B8h] +
call ?ShowWindow@CWnd@@QAEHH@Z  +
push 1  +
push 0  +
push dword ptr [esi+0D8h]  +
call ds:InvalidateRect  +
push dword ptr [esi+0D8h]  +
call ds:UpdateWindow  +
pop esi  +
retn   +
***
mov byte ptr [ecx+380h] 1 +
jmp sub_104BE85  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_104BBFB  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_104BC50  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_104BDB5  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_104BDEB  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jnb loc_104BFC6  +
call loc_106AEE9  +
mov eax [esi+14h] +
sub eax edi +
cmp eax [ebp+arg_4] +
jnb loc_104BFD3  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] 0 +
jbe loc_104C016  +
mov ecx [esi+18h] +
push ebx  +
lea edx [esi+4] +
cmp ecx 10h +
jb loc_104BFE9  +
mov ebx [edx] +
jmp loc_104BFEB  +
mov ebx edx +
cmp ecx 10h +
jb loc_104BFF2  +
mov edx [edx] +
sub eax [ebp+arg_4] +
add ebx edi +
add ebx [ebp+arg_4] +
push eax  +
push ebx  +
sub ecx edi +
push ecx  +
add edx edi +
push edx  +
call sub_104BF8E  +
mov eax [esi+14h] +
sub eax [ebp+arg_4] +
mov ecx esi +
push eax  +
call sub_1014D34  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
adc eax offset InvalidateRect +
push 0  +
mov ecx esi +
call sub_102E7F6  +
mov ecx esi +
call sub_1011BA0  +
cmp dword ptr [esi+0D8h] 0 +
jz loc_104C059  +
lea ecx [esi+0B8h] +
call sub_101062D  +
lea ecx [esi+390h] +
mov eax 80000000h +
cmp [ecx] eax +
jnz loc_104C078  +
cmp [esi+394h] eax +
jnz loc_104C078  +
mov ecx esi +
pop esi  +
jmp sub_10077DE  +
***
push ecx  +
mov ecx esi +
call sub_103560A  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_104A160 +
call sub_1014D01  +
mov ecx esi +
pop esi  +
jmp ??1exception@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104C0E6  +
test byte ptr [ebp+8] 1 +
jz loc_104C124  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
cmp [edi+14h] eax +
jnb loc_104C14A  +
call loc_106AEE9  +
mov esi [edi+14h] +
mov eax [ebp+arg_4] +
sub esi eax +
cmp [ebp+arg_8] esi +
jnb loc_104C15A  +
mov esi [ebp+arg_8] +
mov ecx ebx +
cmp ebx edi +
jnz loc_104C178  +
push 0FFFFFFFFh  +
add esi eax +
push esi  +
call sub_104BFB0  +
push [ebp+arg_4]  +
mov ecx ebx +
push 0  +
call sub_104BFB0  +
jmp loc_104C1B8  +
push 0  +
push esi  +
call sub_101C199  +
test al al +
jz loc_104C1B8  +
cmp dword ptr [edi+18h] 10h +
jb loc_104C18F  +
mov edi [edi+4] +
jmp loc_104C192  +
add edi 4 +
mov ecx [ebx+18h] +
cmp ecx 10h +
jb loc_104C19F  +
mov eax [ebx+4] +
jmp loc_104C1A2  +
lea eax [ebx+4] +
mov edx [ebp+arg_4] +
push esi  +
add edi edx +
push edi  +
push ecx  +
push eax  +
call sub_101CFD9  +
push esi  +
mov ecx ebx +
call sub_1014D34  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_1014D34  +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_104C130  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0exception@@QAE@XZ  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_104A160 +
call sub_104C1C6  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call ??0exception@@QAE@ABV0@@Z  +
and dword ptr [ebp-4] 0 +
add edi 0Ch +
push edi  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_104A160 +
call sub_104C1C6  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_104C1F6  +
mov dword ptr [esi] offset off_104A184 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_104C0E6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_104A184 +
call sub_104C0E6  +
test byte ptr [ebp+8] 1 +
jz loc_104C2C1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_104C230  +
mov dword ptr [esi] offset off_104A184 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_104C230  +
push offset dword_104C330  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_104C2CD  +
push offset dword_1082DC4  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov eax offset off_104C370 +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+38h] +
test eax eax +
jnz loc_104C39D  +
xor eax eax +
pop esi  +
retn   +
push eax  +
push 40h  +
call ds:GlobalAlloc  +
mov [esi+30h] eax +
test eax eax +
jnz loc_104C3BB  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
jmp loc_104C399  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+arg_0]  +
call sub_100AFE2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jl loc_104C3F7  +
cmp edx [ecx+8] +
jge loc_104C3F7  +
mov eax [ecx+4] +
add eax edx +
pop ebp  +
retn 4  +
call MFC42u_6928  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov dword ptr [ecx] offset off_10023C4 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+yBottom]  +
push [ebp+xRight]  +
push [ebp+yTop]  +
push [ebp+xLeft]  +
push ecx  +
call ds:SetRect  +
pop ebp  +
retn 10h  +
***
jmp sub_1002407  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
xor eax eax +
cmp [ebp+arg_4] 3 +
push ebx  +
setz al  +
push esi  +
push edi  +
mov ebx ecx +
mov [ebp+var_4] eax +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_104C46D  +
cmp [ebp+arg_4] 2 +
jz loc_104C46D  +
mov [ebp+arg_4] eax +
cmp [ebp+var_4] eax +
jz loc_104C474  +
mov [ebp+arg_4] 1 +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+38h]  +
mov edi eax +
test edi edi +
jnz loc_104C49D  +
cmp [ebx+30h] eax +
jz loc_104C490  +
mov ecx ebx +
call sub_1012405  +
xor eax eax +
inc eax  +
mov [ebx+2Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
cmp [ebp+var_4] 0 +
jz loc_104C4BC  +
mov eax [esi] +
push 4  +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx esi +
call dword ptr [eax+3Ch]  +
cmp eax 4 +
jnz loc_104C502  +
cmp [ebp+var_4] edi +
ja loc_104C502  +
sub edi eax +
and dword ptr [ebx+34h] 0 +
cmp [ebp+arg_4] 0 +
jz loc_104C523  +
mov eax [esi] +
push 0Eh  +
lea ecx [ebp+var_14] +
push ecx  +
mov ecx esi +
call dword ptr [eax+3Ch]  +
cmp eax 0Eh +
jnz loc_104C502  +
mov eax 4D42h +
cmp word ptr [ebp+var_14] ax +
jnz loc_104C502  +
mov eax [ebp+var_A] +
cmp eax 0Eh +
jnb loc_104C4EF  +
test eax eax +
jnz loc_104C502  +
cmp eax edi +
jnb loc_104C502  +
sub edi 0Eh +
test eax eax +
jz loc_104C51F  +
add eax 0FFFFFFF2h +
mov [ebx+34h] eax +
jmp loc_104C523  +
push 0  +
push 3F4h  +
push 804h  +
mov ecx offset unk_108AF60 +
call sub_101209D  +
xor eax eax +
jmp loc_104C496  +
and dword ptr [ebx+34h] 0 +
cmp dword ptr [ebx+30h] 0 +
jz loc_104C530  +
mov ecx ebx +
call sub_1012405  +
mov ecx ebx +
mov [ebx+38h] edi +
call sub_104C38D  +
test eax eax +
jz loc_104C518  +
push dword ptr [ebx+30h]  +
call ds:GlobalLock  +
mov [ebp+var_4] eax +
mov [ebp+arg_4] eax +
jmp loc_104C56F  +
mov esi 4000h +
cmp edi esi +
jnb loc_104C55A  +
mov esi edi +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
push esi  +
push [ebp+arg_4]  +
call dword ptr [eax+3Ch]  +
cmp eax esi +
jnz loc_104C5AC  +
sub edi esi +
add [ebp+arg_4] esi +
test edi edi +
ja loc_104C54F  +
xor esi esi +
cmp [ebx+34h] esi +
jnz loc_104C589  +
push esi  +
push [ebp+var_4]  +
call sub_1038D78  +
sub eax [ebp+var_4] +
mov [ebx+34h] eax +
push esi  +
push [ebp+var_4]  +
call sub_100AFE2  +
movzx eax ax +
lea ecx [eax-1] +
cmp ecx 0FFh +
ja loc_104C5EE  +
push 2  +
pop ecx  +
cmp eax ecx +
jg loc_104C5D3  +
mov [ebx+10h] esi +
jmp loc_104C5F5  +
xor esi esi +
push esi  +
push 3E9h  +
push 804h  +
mov ecx offset unk_108AF60 +
call sub_101209D  +
push dword ptr [ebx+30h]  +
call ds:GlobalUnlock  +
mov eax esi +
jmp loc_104C496  +
cmp eax 10h +
lea edi [ebx+14h] +
mov esi offset loc_102E904 +
jg loc_104C5E9  +
mov dword ptr [ebx+10h] 1 +
jmp loc_104C5FD  +
mov [ebx+10h] ecx +
jmp loc_104C5FD  +
mov dword ptr [ebx+10h] 3 +
lea edi [ebx+14h] +
mov esi offset loc_102E904 +
movs   +
movs   +
movs   +
movs   +
xor esi esi +
inc esi  +
jmp loc_104C5C3  +
***
call sub_100208C  +
lea ecx [ebp-34h] +
call ??0CDC@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-24h] +
call ??0CDC@@QAE@XZ  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ??0CDC@@QAE@XZ  +
push dword ptr [ebp+8]  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ?Attach@CDC@@QAEHPAUHDC__@@@Z  +
push dword ptr [ebp+1Ch]  +
lea ecx [ebp-44h] +
call ?Attach@CDC@@QAEHPAUHDC__@@@Z  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-34h] +
call sub_1002292  +
mov ecx eax +
mov eax 10000h +
cdq   +
idiv  dword ptr [ebp+14h] +
xor edi edi +
inc edi  +
mov edx eax +
cmp edx edi +
mov [ebp+8] edx +
jge loc_104C676  +
mov eax edi +
mov ebx [ebp+18h] +
cmp ebx eax +
jge loc_104C682  +
mov [ebp+8] ebx +
jmp loc_104C689  +
cmp edx edi +
jge loc_104C689  +
mov [ebp+8] edi +
and dword ptr [ebp-10h] 0 +
mov esi offset off_1002208 +
mov [ebp-14h] esi +
mov byte ptr [ebp-4] 3 +
test ecx ecx +
jz loc_104C6C3  +
push dword ptr [ebp+8]  +
lea eax [ebp-24h] +
push dword ptr [ebp+14h]  +
lea ecx [ebp-14h] +
push eax  +
call sub_1008818  +
test eax eax +
jz loc_104C6C3  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-34h] +
call sub_10022BD  +
test eax eax +
jnz loc_104C6D8  +
lea ecx [ebp-24h] +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
lea ecx [ebp-44h] +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
jmp loc_104C795  +
cmp dword ptr [ebp+28h] 0 +
jz loc_104C6F3  +
push edi  +
push dword ptr [ebp+28h]  +
lea ecx [ebp-34h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword ptr [ebp-30h]  +
call ds:RealizePalette  +
xor edi edi +
test ebx ebx +
jle loc_104C77D  +
mov esi 0CC0020h +
mov eax [ebp+18h] +
sub eax edi +
cmp [ebp+8] eax +
jl loc_104C70F  +
mov [ebp+8] eax +
mov eax [ebp+10h] +
push esi  +
lea ebx [edi+eax] +
push ebx  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-34h] +
push dword ptr [ebp+14h]  +
push 0  +
push 0  +
call sub_100988D  +
mov eax [ebp+24h] +
push esi  +
add eax edi +
push eax  +
push dword ptr [ebp+20h]  +
mov [ebp+28h] eax +
lea eax [ebp-44h] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-24h] +
push dword ptr [ebp+14h]  +
push ebx  +
push dword ptr [ebp+0Ch]  +
call sub_100988D  +
push esi  +
push 0  +
push 0  +
lea eax [ebp-34h] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-44h] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+20h]  +
call sub_100988D  +
add edi [ebp+8] +
cmp edi [ebp+18h] +
jl loc_104C702  +
mov esi offset off_1002208 +
lea ecx [ebp-24h] +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
lea ecx [ebp-44h] +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
lea ecx [ebp-34h] +
call ?DeleteDC@CDC@@QAEHXZ  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-14h] esi +
call sub_1002407  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ??1CDC@@UAE@XZ  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ??1CDC@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-34h] +
call ??1CDC@@UAE@XZ  +
call sub_1002061  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
cmp [ebp+arg_4] 3E8h +
push ebx  +
mov ebx ecx +
jnz loc_104C990  +
mov eax off_108A1D4 +
mov eax [eax+40h] +
push esi  +
cmp eax 259h +
jz loc_104C804  +
cmp eax 25Ah +
jnz loc_104C825  +
xor esi esi +
cmp dword_108AF30 esi +
jz loc_104C825  +
call sub_10049FD  +
push esi  +
push dword_108AF30  +
call sub_1005D16  +
mov dword_108AF30 esi +
push edi  +
mov edi [ebp+arg_0] +
push 4  +
lea eax [ebp+var_8] +
push eax  +
mov ecx edi +
call sub_1009B54  +
push 10h  +
lea eax [ebp+rcSrc2] +
push eax  +
mov ecx edi +
call sub_1009B54  +
mov esi [edi+20h] +
push 4  +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
call sub_1009B54  +
push esi  +
mov ecx edi +
call sub_104C3DD  +
mov edi eax +
xor eax eax +
stos   +
push dword ptr [ebx+4]  +
call sub_1005C6C  +
push dword ptr [ebx+4]  +
call sub_100D08B  +
call sub_10049FD  +
mov eax [ebx+4] +
push dword ptr [eax+0Ch]  +
call ds:CreateCompatibleDC  +
mov edi eax +
test edi edi +
jnz loc_104C898  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
jmp loc_104C98E  +
push [ebp+var_4]  +
mov esi ds:SelectObject +
and [ebp+arg_4] 0 +
push edi  +
call esi  +
mov [ebp+arg_0] eax +
mov eax [ebx+4] +
mov eax [eax+24h] +
test eax eax +
jz loc_104C8CB  +
push 0  +
push dword ptr [eax+4]  +
push edi  +
call ds:SelectPalette  +
push edi  +
mov [ebp+arg_4] eax +
call ds:RealizePalette  +
mov eax [ebx+4] +
push dword ptr [eax+24h]  +
mov ecx [ebp+rcSrc2.bottom] +
sub ecx [ebp+rcSrc2.top] +
push 0  +
push 0  +
push edi  +
push ecx  +
mov ecx [ebp+rcSrc2.right] +
sub ecx [ebp+rcSrc2.left] +
push ecx  +
push [ebp+rcSrc2.top]  +
push [ebp+rcSrc2.left]  +
push dword ptr [eax+0Ch]  +
call sub_104C60B  +
cmp [ebp+arg_4] 0 +
jz loc_104C904  +
push 0  +
push [ebp+arg_4]  +
push edi  +
call ds:SelectPalette  +
push [ebp+arg_0]  +
push edi  +
call esi  +
push edi  +
call ds:DeleteDC  +
lea eax [ebp+rcSrc2] +
push eax  +
push dword ptr [ebx+4]  +
call sub_1005D16  +
lea eax [ebp+rcSrc2] +
push eax  +
push dword ptr [ebx+4]  +
call sub_100D173  +
push 4  +
lea eax [ebp+var_4] +
mov esi offset unk_108B4B8 +
push eax  +
mov ecx esi +
call sub_100D77D  +
push 10h  +
lea eax [ebp+rcSrc2] +
push eax  +
mov ecx esi +
call sub_100D77D  +
push 4  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
mov [ebp+arg_4] 14h +
call sub_100D77D  +
push 4  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
mov [ebp+arg_4] 3E8h +
call sub_100D77D  +
mov eax [ebx+4] +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_100D7F2  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
mov byte ptr [ebp+arg_4] 2 +
call sub_100D77D  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102F2DF  +
test byte ptr [ebp+8] 1 +
jz loc_104C9B4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002407  +
test byte ptr [ebp+8] 1 +
jz loc_104C9DA  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 4  +
mov eax offset loc_107A178 +
call sub_100208C  +
push 6A8h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_104CA10  +
call sub_1013B6A  +
call sub_1002061  +
retn   +
***
call sub_10020DC  +
mov eax [ebp+0Ch] +
mov esi [ebp+8] +
mov ebx ecx +
lea ecx [ebp-50h] +
mov [ebp-28h] esi +
mov [ebp-2Ch] eax +
call ??0CFile@@QAE@XZ  +
xor edi edi +
push edi  +
push 0FFFFFFFFh  +
push edi  +
lea ecx [ebp-40h] +
mov [ebp-4] edi +
call sub_102F32D  +
push esi  +
push edi  +
mov edi 804h +
mov esi offset unk_108AF60 +
push edi  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_101209D  +
lea eax [ebp-40h] +
push eax  +
push 8020h  +
push dword ptr [ebp-28h]  +
lea ecx [ebp-50h] +
call ?Open@CFile@@UAEHPBGIPAVCFileException@@@Z  +
test eax eax +
jnz loc_104CAAE  +
push eax  +
push dword ptr [ebp-38h]  +
mov ecx esi +
push edi  +
call sub_101209D  +
xor esi esi +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 0 +
call sub_102F2DF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-50h] +
call ??1CFile@@UAE@XZ  +
mov eax esi +
call sub_1002119  +
retn 8  +
***
push dword ptr [ebp-2Ch]  +
lea eax [ebx+48h] +
push 64h  +
push eax  +
mov esi offset dword_1011F98 +
lea edi [ebp-20h] +
movs   +
lea eax [ebx+44h] +
push eax  +
lea eax [ebx+40h] +
push eax  +
movs   +
lea eax [ebx+3Ch] +
push eax  +
lea eax [ebp-20h] +
movs   +
push eax  +
push dword ptr [ebp-28h]  +
mov dword ptr [ebp-24h] 1 +
movs   +
call sub_1012D56  +
xor esi esi +
cmp eax esi +
jz loc_104CB1A  +
push eax  +
mov ecx ebx +
call sub_1015A4D  +
mov [ebp-24h] eax +
push esi  +
mov ecx offset unk_108AF60 +
cmp eax esi +
jz loc_104CB20  +
push esi  +
push esi  +
call sub_101209D  +
sub esp 10h +
mov edi esp +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
lea ecx [ebx+10h] +
movs   +
call sub_102E962  +
jmp loc_104CB2F  +
push esi  +
mov ecx offset unk_108AF60 +
push 3F4h  +
push 804h  +
call sub_101209D  +
mov esi [ebp-24h] +
jmp loc_104CA8C  +
***
call sub_100208C  +
mov esi ecx +
lea ecx [ebp+13h] +
call sub_100AF92  +
mov eax [ebp+8] +
xor ebx ebx +
sub eax 15Ah +
mov [ebp-4] ebx +
jz loc_104CF3C  +
dec eax  +
jz loc_104CF0E  +
dec eax  +
jnz loc_104CEAF  +
mov eax off_108A1D4 +
mov eax [eax+40h] +
cmp eax 259h +
jz loc_104CB89  +
cmp eax 25Ah +
jnz loc_104CB96  +
push 1  +
call sub_1009F8B  +
mov dword_108AF30 ebx +
push dword ptr [esi+4]  +
call sub_100D08B  +
push ebx  +
mov ecx esi +
call sub_100D5D9  +
mov eax [esi+4] +
push dword ptr [eax+18h]  +
mov edi ds:SelectObject +
push dword ptr [eax+0Ch]  +
call edi  +
mov eax [esi+4] +
push dword ptr [eax+40h]  +
lea ecx [ebp-28h] +
push dword ptr [eax+3Ch]  +
push ecx  +
mov cx [eax+38h] +
imul cx [eax+34h] +
push ebx  +
push dword ptr [eax+24h]  +
movzx ecx cx +
push ecx  +
push ebx  +
push dword ptr [eax+14h]  +
call sub_102EDC2  +
mov [ebp-14h] eax +
mov eax [esi+4] +
push dword ptr [eax+14h]  +
push dword ptr [eax+0Ch]  +
call edi  +
cmp [ebp-14h] ebx +
jnz loc_104CC02  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
jmp loc_104CF2C  +
mov [ebp+8] ebx +
cmp [ebp+0Ch] ebx +
jz loc_104CC13  +
mov dword ptr [ebp-10h] 1 +
jmp loc_104CC24  +
mov eax [esi+4] +
push 0Eh  +
push dword ptr [eax+0Ch]  +
call ds:GetDeviceCaps  +
mov [ebp-10h] eax +
cmp [ebp+0Ch] ebx +
jz loc_104CC32  +
mov dword ptr [ebp+0Ch] 1 +
jmp loc_104CC43  +
mov eax [esi+4] +
push 0Ch  +
push dword ptr [eax+0Ch]  +
call ds:GetDeviceCaps  +
mov [ebp+0Ch] eax +
mov eax [ebp+0Ch] +
imul eax [ebp-10h] +
cmp dword_108B1A8 ebx +
jz loc_104CC75  +
dec eax  +
jz loc_104CC6D  +
sub eax 3 +
jz loc_104CC66  +
sub eax 4 +
jnz loc_104CC75  +
call sub_10501BC  +
jmp loc_104CC72  +
call sub_1050198  +
jmp loc_104CC72  +
call sub_10501AA  +
mov [ebp+8] eax +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov ebx ds:CreateBitmap +
push dword ptr [ebp-10h]  +
push 1  +
push 1  +
call ebx  +
push 0  +
push dword ptr [ebp+0Ch]  +
mov [ebp-20h] eax +
push dword ptr [ebp-10h]  +
mov eax [esi+4] +
push dword ptr [eax+30h]  +
push dword ptr [eax+2Ch]  +
call ebx  +
mov ebx [ebp-20h] +
mov [ebp-18h] eax +
test ebx ebx +
jz loc_104CED0  +
test eax eax +
jz loc_104CED0  +
mov eax [esi+4] +
and dword ptr [ebp-1Ch] 0 +
push ebx  +
push dword ptr [eax+0Ch]  +
call edi  +
mov eax [ebp+8] +
test eax eax +
jz loc_104CCE8  +
push 0  +
push dword ptr [eax+4]  +
mov eax [esi+4] +
push dword ptr [eax+0Ch]  +
call ds:SelectPalette  +
mov [ebp-1Ch] eax +
mov eax [esi+4] +
push dword ptr [eax+0Ch]  +
call ds:RealizePalette  +
mov ebx [esi+4] +
push 0  +
push dword ptr [ebp-14h]  +
push 0  +
push dword ptr [ebp-14h]  +
call sub_1038D78  +
push eax  +
push dword ptr [ebx+30h]  +
push 0  +
push dword ptr [ebp-18h]  +
push dword ptr [ebx+0Ch]  +
call ds:SetDIBits  +
push dword ptr [ebp-14h]  +
mov ebx eax +
call sub_1038D5D  +
mov eax [esi+4] +
cmp ebx [eax+30h] +
jz loc_104CD6C  +
push dword ptr [eax+14h]  +
push dword ptr [eax+0Ch]  +
call edi  +
xor ebx ebx +
cmp [ebp-1Ch] ebx +
jz loc_104CD57  +
mov eax [esi+4] +
push ebx  +
push dword ptr [ebp-1Ch]  +
push dword ptr [eax+0Ch]  +
call ds:SelectPalette  +
mov eax [esi+4] +
push dword ptr [eax+0Ch]  +
call ds:RealizePalette  +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_104CD57  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
push dword ptr [ebp-20h]  +
mov esi ds:DeleteObject +
call esi  +
push dword ptr [ebp-18h]  +
call esi  +
jmp loc_104CBF1  +
mov ecx [ebp-10h] +
mov ebx [ebp-18h] +
mov [eax+34h] ecx +
mov eax [esi+4] +
mov ecx [ebp+0Ch] +
mov [eax+38h] ecx +
mov eax [esi+4] +
push ebx  +
push dword ptr [eax+0Ch]  +
call edi  +
mov eax [esi+4] +
push dword ptr [eax+14h]  +
mov edi ds:DeleteObject +
call edi  +
mov eax [esi+4] +
mov [eax+14h] ebx +
mov eax [esi+4] +
cmp dword ptr [eax+24h] 0 +
mov ebx [ebp+8] +
jz loc_104CDCF  +
test ebx ebx +
jnz loc_104CDBE  +
push ebx  +
push dword ptr [eax+28h]  +
push dword ptr [eax+0Ch]  +
call ds:SelectPalette  +
mov eax [esi+4] +
and [eax+28h] ebx +
mov eax [esi+4] +
mov ecx [eax+24h] +
test ecx ecx +
jz loc_104CDCF  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov eax [esi+4] +
push dword ptr [ebp-20h]  +
mov [eax+24h] ebx +
mov dword_108B1D4 ebx +
call edi  +
cmp byte ptr [ebp+10h] 0 +
jnz loc_104CDEE  +
push dword ptr [esi+4]  +
call sub_100D2D1  +
push 0  +
push dword ptr [esi+4]  +
call sub_1005D16  +
mov eax [esi+4] +
cmp eax dword_108A1FC +
jnz loc_104CE12  +
and dword_108A1FC 0 +
push dword ptr [esi+4]  +
call sub_1005C6C  +
mov edx dword_108A1F0 +
test edx edx +
jz loc_104CE31  +
mov ecx esi +
call sub_1017CF3  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
mov ecx edx +
call sub_1017FB4  +
push 159h  +
mov ecx esi +
call sub_102E6BF  +
mov ecx esi +
call sub_1017CF3  +
mov ecx eax +
dec ecx  +
neg ecx  +
sbb ecx ecx +
xor eax eax +
lea edi [ebp-38h] +
stos   +
stos   +
stos   +
stos   +
push 13h  +
inc ecx  +
pop eax  +
mov [ebp-38h] ax +
mov [ebp-30h] ecx +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
lea ecx [ebp-38h] +
push ecx  +
push offset dword_1017ED4  +
push 54C5h  +
mov ecx eax +
call sub_1018060  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
mov edi offset dword_100213C +
push edi  +
push 4  +
push 54C6h  +
mov ecx eax +
call sub_1009E6B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push edi  +
push 4  +
push 54C7h  +
mov ecx eax +
call sub_1009E6B  +
cmp byte ptr [ebp+10h] 0 +
jnz loc_104CEBC  +
mov dword ptr [esi+2Ch] 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+13h] +
call sub_102E656  +
xor eax eax +
inc eax  +
jmp loc_104CF68  +
push dword ptr [ebp-14h]  +
call sub_1038D5D  +
mov esi ds:DeleteObject +
test ebx ebx +
jz loc_104CEE5  +
push ebx  +
call esi  +
cmp dword ptr [ebp-18h] 0 +
jz loc_104CEF0  +
push dword ptr [ebp-18h]  +
call esi  +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_104CEFE  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
xor ebx ebx +
jmp loc_104CF2C  +
mov eax [esi+8] +
mov [ebp-24h] eax +
mov eax [ebp+0Ch] +
mov [ebp-20h] eax +
lea eax [ebp-24h] +
push eax  +
push 15Eh  +
mov ecx esi +
call sub_103584E  +
mov ebx eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+13h] +
call sub_102E656  +
mov eax ebx +
jmp loc_104CF68  +
mov eax [esi+0Ch] +
mov ecx [ebp+0Ch] +
mov [ebp-20h] eax +
lea eax [ebp-24h] +
push eax  +
mov [ebp-24h] ecx +
push 15Eh  +
mov ecx esi +
call sub_103584E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+13h] +
mov esi eax +
call sub_102E656  +
mov eax esi +
call sub_1002061  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
call sub_101FE7E  +
call sub_1013351  +
call sub_1013309  +
and dword ptr [esi+4] 0 +
mov ecx esi +
call sub_1017AFB  +
test eax eax +
jz loc_104CFE1  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+68h]  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov eax [edi] +
push ecx  +
mov ecx edi +
call dword ptr [eax+6Ch]  +
mov ebx eax +
test ebx ebx +
jz loc_104CFDF  +
push dword ptr [esi+4]  +
mov ecx [ebx+48h] +
call sub_105149B  +
push 0  +
push 0  +
push ebx  +
mov ecx edi +
call ?UpdateAllViews@CDocument@@QAEXPAVCView@@JPAVCObject@@@Z  +
push 0  +
push dword ptr [esi+4]  +
call sub_1005D16  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
mov esi 0FFFFh +
mov eax esi +
mov byte ptr [ebp-4] 1 +
cmp [ebp+0Ch] ax +
jnz loc_104D020  +
xor edi edi +
jmp loc_104D030  +
movzx eax word ptr [ebp+0Ch] +
push eax  +
lea ecx [ebp-10h] +
call ?LoadStringW@CString@@QAEHI@Z  +
mov edi [ebp-10h] +
cmp [ebp+8] si +
jnz loc_104D03D  +
mov esi offset word_100219C +
jmp loc_104D04D  +
movzx eax word ptr [ebp+8] +
push eax  +
lea ecx [ebp-14h] +
call ?LoadStringW@CString@@QAEHI@Z  +
mov esi [ebp-14h] +
call sub_10049D9  +
test eax eax +
jz loc_104D08D  +
mov ecx [ebp+10h] +
or ecx 2000h +
push ecx  +
push edi  +
push esi  +
mov ecx eax +
call ?MessageBoxW@CWnd@@QAEHPBG0I@Z  +
lea ecx [ebp-10h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
mov eax esi +
call sub_1002061  +
retn 0Ch  +
mov eax [ebp+10h] +
or eax 2000h +
push eax  +
push edi  +
push esi  +
push 0  +
call ds:MessageBoxW  +
jmp loc_104D069  +
***
mov eax ds:?classCObject@CObject@@2UCRuntimeClass@@B +
retn   +
***
mov eax offset off_104D0B8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+10h] 0 +
jz loc_104D0E5  +
mov ecx [ecx+8] +
jmp loc_104D0E8  +
mov ecx [ecx+4] +
mov eax [ebp+arg_0] +
mov eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov edx [ebp+0Ch] +
push ebx  +
mov eax edx +
push esi  +
movzx ebx dl +
mov esi ecx +
shr eax 8 +
shr edx 10h +
cmp dword ptr [esi+10h] 0 +
movzx eax al +
movzx edx dl +
jz loc_104D147  +
imul eax eax +
imul edx edx +
imul ebx ebx +
add eax edx +
add eax ebx +
cdq   +
push 64h  +
pop ecx  +
idiv  ecx +
mov edx [ebp+8] +
movzx eax al +
mov ecx eax +
shl ecx 8 +
or ecx eax +
shl ecx 8 +
or ecx eax +
mov eax [esi+8] +
mov [eax+edx*4] ecx +
jmp loc_104D172  +
cmp dword_108B1A8 0 +
movzx edx dl +
movzx eax al +
jz loc_104D15C  +
or edx 200h +
mov ecx [ebp+8] +
shl edx 8 +
or edx eax +
movzx eax bl +
shl edx 8 +
or edx eax +
mov eax [esi+4] +
mov [eax+ecx*4] edx +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_104D18E  +
xor eax eax +
pop ebp  +
retn 10h  +
***
cmp dword ptr [ebp+0Ch] 30h +
jz loc_104D19D  +
cmp dword ptr [ebp+0Ch] 110h +
jnz loc_104D188  +
pop ebp  +
jmp ?AfxDlgProc@@YGHPAUHWND__@@IIJ@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:GetNearestPaletteIndex  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:ResizePalette  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+arg_C] +
mov [ebp+var_10] eax +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push [ebp+arg_8]  +
mov [ebp+var_8] 8 +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
cmp dword_108BC04 ebx +
jz loc_104D27B  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_104D238  +
cmp al bl +
jnz loc_104D27B  +
mov ecx dword_108BBF4 +
mov edx 40000000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_104D27B  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax edx +
xor edx edx +
cmp edx dword_108BBF8 +
jnz loc_104D27B  +
cmp eax ecx +
jnz loc_104D27B  +
push ebx  +
push esi  +
push offset dword_104D300  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_104D1DC  +
mov dword_108A224 esi +
cmp dword_108AF30 ebx +
jz loc_104D2B7  +
cmp dword_108AEF4 ebx +
jz loc_104D29F  +
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 25Bh +
jnz loc_104D2B7  +
cmp dword_108A218 ebx +
jnz loc_104D2B7  +
mov ecx dword_108A24C +
push offset stru_108AF34  +
call sub_1036C4C  +
mov esi off_108A1D4 +
cmp esi ebx +
jz loc_104D2F7  +
call sub_10049D9  +
push eax  +
push ds:?classCFrameWnd@CFrameWnd@@2UCRuntimeClass@@B  +
call ?AfxDynamicDownCast@@YAPAVCObject@@PAUCRuntimeClass@@PAV1@@Z  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_104D2F7  +
mov ecx eax +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
push eax  +
push offset off_1009BE0  +
call ?AfxDynamicDownCast@@YAPAVCObject@@PAUCRuntimeClass@@PAV1@@Z  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_104D2F7  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+50h]  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
cmp dword_108BC04 ebx +
jz loc_104D379  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_104D336  +
cmp al bl +
jnz loc_104D379  +
mov ecx dword_108BBF4 +
mov edx 40000000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_104D379  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax edx +
xor edx edx +
cmp edx dword_108BBF8 +
jnz loc_104D379  +
cmp eax ecx +
jnz loc_104D379  +
push ebx  +
push esi  +
push offset dword_104D408  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_104D1DC  +
mov dword_108A1C8 esi +
cmp dword_108AF30 ebx +
jz loc_104D3C0  +
cmp dword_108AEF4 ebx +
jz loc_104D39D  +
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 25Bh +
jnz loc_104D3C0  +
cmp dword_108A218 ebx +
jnz loc_104D3C0  +
push esi  +
mov ecx offset unk_108AEA0 +
call sub_103603F  +
mov ecx dword_108A24C +
push offset stru_108AF34  +
call sub_1036C4C  +
mov esi off_108A1D4 +
cmp esi ebx +
jz loc_104D400  +
call sub_10049D9  +
push eax  +
push ds:?classCFrameWnd@CFrameWnd@@2UCRuntimeClass@@B  +
call ?AfxDynamicDownCast@@YAPAVCObject@@PAUCRuntimeClass@@PAV1@@Z  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_104D400  +
mov ecx eax +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
push eax  +
push offset off_1009BE0  +
call ?AfxDynamicDownCast@@YAPAVCObject@@PAUCRuntimeClass@@PAV1@@Z  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_104D400  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+54h]  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push esi  +
mov esi [ebp+8] +
cmp dword ptr [esi+24h] 0 +
jnz loc_104D439  +
or eax 0FFFFFFFFh +
jmp loc_104D55E  +
push edi  +
push 404h  +
call ??2@YAPAXI@Z  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_104D45F  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
or eax 0FFFFFFFFh +
jmp loc_104D55D  +
push ebx  +
mov ebx ds:GetPaletteEntries +
lea ecx [edi+4] +
push ecx  +
mov eax 300h +
push 100h  +
mov [edi] ax +
mov eax [esi+24h] +
push 0  +
push dword ptr [eax+4]  +
call ebx  +
mov [edi+2] ax +
movzx eax ax +
lea ecx [edi+4] +
push ecx  +
push eax  +
mov eax [esi+24h] +
push 0  +
push dword ptr [eax+4]  +
call ebx  +
mov eax [ebp+0Ch] +
mov ecx eax +
shr ecx 8 +
mov [ebp+9] cl +
mov ecx eax +
shr ecx 10h +
mov [ebp+0Ah] cl +
mov ecx [esi+24h] +
push eax  +
mov [ebp+8] al +
mov byte ptr [ebp+0Bh] 0 +
call sub_104D1A8  +
lea eax [edi+eax*4] +
mov cl [eax+4] +
cmp cl [ebp+8] +
jnz loc_104D4D5  +
mov cl [eax+5] +
cmp cl [ebp+9] +
jnz loc_104D4D5  +
mov al [eax+6] +
cmp al [ebp+0Ah] +
jz loc_104D552  +
movzx ebx word ptr [edi+2] +
push 0  +
push dword ptr [esi+28h]  +
push dword ptr [esi+0Ch]  +
call ds:SelectPalette  +
cmp ebx 100h +
jl loc_104D509  +
mov eax [esi+48h] +
lea ebx [eax+100h] +
dec eax  +
cmp eax 0FFFFFF00h +
mov [esi+48h] eax +
jg loc_104D519  +
or dword ptr [esi+48h] 0FFFFFFFFh +
jmp loc_104D519  +
mov ecx [esi+24h] +
lea eax [ebx+1] +
push eax  +
call sub_104D1C2  +
test eax eax +
jz loc_104D533  +
mov eax [esi+24h] +
lea ecx [ebp+8] +
push ecx  +
push 1  +
push ebx  +
push dword ptr [eax+4]  +
call ds:SetPaletteEntries  +
test eax eax +
jz loc_104D533  +
mov [ebp-4] ebx +
mov eax [esi+24h] +
test eax eax +
jz loc_104D53D  +
mov eax [eax+4] +
push 0  +
push eax  +
push dword ptr [esi+0Ch]  +
call ds:SelectPalette  +
push dword ptr [esi+0Ch]  +
call ds:RealizePalette  +
push edi  +
call ??3@YAXPAX@Z  +
mov eax [ebp-4] +
pop ecx  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
add ds:byte_1078FB0[eax] bh +
call sub_100208C  +
mov [ebp-14h] ecx +
xor ebx ebx +
cmp [ebp+0Ch] ebx +
jz loc_104D5EC  +
mov esi offset dword_108A1CC +
jmp loc_104D5FB  +
mov esi offset dword_108A224 +
cmp [ebp+8] ebx +
jnz loc_104D5FB  +
mov esi offset dword_108A1C8 +
mov eax [esi] +
push ebx  +
push ebx  +
and eax 0FFFFFFh +
push eax  +
lea ecx [ebp-98h] +
call ??0CColorDialog@@QAE@KKPAVCWnd@@@Z  +
mov eax [ebp-24h] +
and eax 0FFFFFFF7h +
or eax 2 +
lea ecx [ebp-98h] +
mov [ebp-4] ebx +
mov [ebp-24h] eax +
mov dword ptr [ebp-1Ch] offset byte_104D568 +
call ?DoModal@CColorDialog@@UAEHXZ  +
cmp eax 1 +
jnz loc_104D71C  +
mov edx [ebp-2Ch] +
mov eax edx +
mov ecx edx +
shr eax 8 +
shr ecx 10h +
mov [ebp-10h] edx +
movzx ecx cl +
movzx eax al +
cmp dword_108B1A8 ebx +
jz loc_104D65E  +
or ecx 200h +
shl ecx 8 +
or ecx eax +
movzx eax dl +
shl ecx 8 +
or ecx eax +
mov [esi] ecx +
cmp [ebp+0Ch] ebx +
jz loc_104D67A  +
mov edi dword_108EE90 +
jmp loc_104D68B  +
mov edi dword_108EE98 +
cmp [ebp+8] ebx +
jnz loc_104D68B  +
mov edi dword_108EE94 +
push dword ptr [esi]  +
call sub_10049D9  +
mov ecx eax +
add ecx 500h +
call sub_106969C  +
cmp edi 0FFFFFFFFh +
jz loc_104D6D9  +
call sub_10049D9  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+0C4h]  +
cmp eax ebx +
jz loc_104D6CD  +
mov eax [eax+0ECh] +
mov eax [eax+4] +
cmp eax ebx +
jz loc_104D6CD  +
push dword ptr [ebp-10h]  +
push eax  +
call near ptr byte_104D41C+1  +
push dword ptr [ebp-10h]  +
mov ecx [ebp-14h] +
push edi  +
call near ptr dword_104D0F4+3  +
mov esi off_108A1D4 +
cmp esi ebx +
jz loc_104D71C  +
call sub_10049D9  +
push eax  +
push ds:?classCFrameWnd@CFrameWnd@@2UCRuntimeClass@@B  +
call ?AfxDynamicDownCast@@YAPAVCObject@@PAUCRuntimeClass@@PAV1@@Z  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_104D71C  +
mov ecx eax +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
push eax  +
push offset off_1009BE0  +
call ?AfxDynamicDownCast@@YAPAVCObject@@PAUCRuntimeClass@@PAV1@@Z  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_104D71C  +
push dword ptr [eax+48h]  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx+4Ch]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-98h] +
call ??1CDialog@@UAE@XZ  +
call sub_1002061  +
retn 8  +
***
push 4  +
mov eax offset loc_107A178 +
call sub_100208C  +
push 14h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_104D78C  +
call sub_101B931  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+nIndex] +
cmp eax 19h +
jnb loc_104D7AD  +
push eax  +
call ds:GetSysColor  +
jmp loc_104D7B4  +
mov eax dword_108E5F8[eax*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push 100h  +
xor eax eax +
lea edx [ebp+var_204] +
push edx  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push ecx  +
mov [ebp+var_208] eax +
call _wsplitpath_s  +
add esp 24h +
lea eax [ebp+var_204] +
push eax  +
mov ecx esi +
call ??0CString@@QAE@PBG@Z  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100207A  +
leave   +
retn 8  +
***
mov dword ptr [ecx] offset off_100A058 +
jmp sub_1002407  +
***
push dword ptr [ecx+4]  +
mov dword ptr [ecx] offset off_100B2A4 +
call GdipDisposeImage  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_C]  +
mov dword ptr [esi] offset off_100B22C +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call GdipCreateBitmapFromScan0  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+nIndex] +
push esi  +
lea esi dword_108B2B8[eax*4] +
cmp dword ptr [esi] 0 +
jnz loc_104D8F9  +
push ebx  +
push eax  +
call sub_104D797  +
push 8  +
mov ebx eax +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_104D8BA  +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_100A058 +
jmp loc_104D8BC  +
xor eax eax +
mov [esi] eax +
test eax eax +
jz loc_104D8EC  +
push ebx  +
mov ecx eax +
call sub_100A0C1  +
test eax eax +
jnz loc_104D8F8  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
mov ecx [esi] +
test ecx ecx +
jz loc_104D8E7  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
and dword ptr [esi] 0 +
jmp loc_104D8F8  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
pop ebx  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100A058 +
call sub_1002407  +
test byte ptr [ebp+8] 1 +
jz loc_104D925  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
xor ebx ebx +
test byte ptr dword_108EE6C 1 +
jnz loc_104D96A  +
or dword_108EE6C 1 +
push offset loc_1082C5D  +
mov dword_108EE68 ebx +
mov dword_108EE64 offset off_100A058 +
call sub_1013E9D  +
pop ecx  +
mov byte ptr [ebp-0Dh] 1 +
mov edi offset dword_108EE64 +
cmp dword_108EE68 ebx +
jnz loc_104D9D7  +
mov esi offset off_1002208 +
mov [ebp-14h] ebx +
mov [ebp-18h] esi +
push offset unk_108E66C  +
push 1  +
push 1  +
push 8  +
push 8  +
mov [ebp-4] ebx +
mov [ebp-0Dh] bl +
call ds:CreateBitmap  +
push eax  +
lea ecx [ebp-18h] +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
test eax eax +
jz loc_104D9C8  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_1013AE5  +
test eax eax +
jz loc_104D9BF  +
mov byte ptr [ebp-0Dh] 1 +
push dword ptr [ebp-14h]  +
call ds:DeleteObject  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
mov [ebp-18h] esi +
call sub_1002407  +
movzx eax byte ptr [ebp-0Dh] +
neg eax  +
sbb eax eax +
and eax edi +
call sub_1002061  +
retn   +
***
test byte ptr dword_108EE8C 1 +
push esi  +
push edi  +
mov esi offset dword_108EE7C +
jnz loc_104DA25  +
or dword_108EE8C 1 +
push offset dword_108C6D8  +
push 26200Ah  +
push 20h  +
push 8  +
push 8  +
mov ecx esi +
call sub_104D844  +
push offset loc_1082C91  +
call sub_1013E9D  +
pop ecx  +
test byte ptr dword_108EE8C 2 +
mov edi offset dword_108EE70 +
jnz loc_104DA4F  +
or dword_108EE8C 2 +
push 0  +
push esi  +
mov ecx edi +
call sub_1033599  +
push offset loc_1082C76  +
call sub_1013E9D  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipCloneBrush  +
push eax  +
mov ecx esi +
call sub_100B289  +
push 0Ch  +
call GdipAlloc  +
test eax eax +
jz loc_104DA9B  +
mov ecx [esi+8] +
mov edx [ebp-4] +
mov dword ptr [eax] offset off_100B384 +
mov [eax+8] ecx +
mov [eax+4] edx +
mov esi eax +
jmp loc_104DA9D  +
xor esi esi +
test esi esi +
jnz loc_104DAA9  +
push dword ptr [ebp-4]  +
call GdipDeleteBrush  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipCloneImage  +
push eax  +
mov ecx esi +
call sub_100B289  +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_104DAF3  +
mov ecx [esi+8] +
mov edx [ebp-4] +
mov dword ptr [eax] offset off_100B2A4 +
mov [eax+4] edx +
mov [eax+8] ecx +
jmp loc_104DAF5  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
push 69h  +
call ??0CDialog@@QAE@IPAVCWnd@@@Z  +
xor edi edi +
lea ecx [esi+60h] +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_104DB8C +
call ??0CString@@QAE@XZ  +
lea ecx [esi+64h] +
mov byte ptr [ebp-4] 1 +
call ??0CString@@QAE@XZ  +
mov ebx offset word_100219C +
push ebx  +
lea ecx [esi+60h] +
mov byte ptr [ebp-4] 2 +
call ??4CString@@QAEABV0@PBG@Z  +
push ebx  +
lea ecx [esi+64h] +
call ??4CString@@QAEABV0@PBG@Z  +
mov eax dword_108B1D0 +
mov [esi+6Ch] eax +
mov [esi+70h] edi +
mov [esi+68h] edi +
mov [esi+74h] edi +
mov [esi+78h] edi +
mov [esi+7Ch] edi +
mov [esi+80h] edi +
mov [esi+84h] edi +
mov [esi+88h] edi +
mov eax esi +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+64h] +
mov dword ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+60h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CDialog@@UAE@XZ  +
call sub_1002061  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+70h] 0 +
jz loc_104DD6D  +
cmp [ebp+arg_0] 0 +
jnz loc_104DCEC  +
push 1  +
call ?UpdateData@CWnd@@QAEHH@Z  +
mov eax [esi+6Ch] +
dec eax  +
push edi  +
jz loc_104DD2C  +
dec eax  +
jz loc_104DD04  +
mov eax [esi+80h] +
mov [esi+78h] eax +
mov eax [esi+7Ch] +
jmp loc_104DD65  +
mov edi ds:MulDiv +
push 64h  +
push dword ptr [esi+84h]  +
push dword ptr [esi+80h]  +
call edi  +
push 64h  +
push dword ptr [esi+88h]  +
mov [esi+78h] eax +
push dword ptr [esi+7Ch]  +
call edi  +
jmp loc_104DD65  +
mov eax [esi+84h] +
mov edi ds:MulDiv +
imul eax eax +
push ebx  +
mov ebx 2710h +
push ebx  +
push eax  +
push dword ptr [esi+80h]  +
call edi  +
mov [esi+78h] eax +
mov eax [esi+88h] +
imul eax eax +
push ebx  +
push eax  +
push dword ptr [esi+7Ch]  +
call edi  +
pop ebx  +
and dword ptr [esi+70h] 0 +
mov [esi+74h] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+6Ch] +
dec eax  +
push edi  +
jz loc_104DDD7  +
dec eax  +
jz loc_104DDAF  +
mov eax [esi+78h] +
xor edx edx +
mov ecx 3E8h +
mov edi ecx +
div  edi +
xor edx edx +
imul eax eax +
mov [esi+80h] eax +
mov eax [esi+74h] +
div  ecx +
imul eax eax +
jmp loc_104DE10  +
push dword ptr [esi+84h]  +
mov edi ds:MulDiv +
push 64h  +
push dword ptr [esi+78h]  +
call edi  +
push dword ptr [esi+88h]  +
mov [esi+80h] eax +
push 64h  +
push dword ptr [esi+74h]  +
call edi  +
jmp loc_104DE10  +
mov eax [esi+84h] +
mov edi ds:MulDiv +
imul eax eax +
push ebx  +
push eax  +
mov ebx 2710h +
push ebx  +
push dword ptr [esi+78h]  +
call edi  +
mov [esi+80h] eax +
mov eax [esi+88h] +
imul eax eax +
push eax  +
push ebx  +
push dword ptr [esi+74h]  +
call edi  +
pop ebx  +
pop edi  +
mov [esi+7Ch] eax +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
cmp edi [esi+6Ch] +
jz loc_104DE46  +
push 0  +
call sub_104DCCD  +
mov ecx esi +
mov [esi+6Ch] edi +
call sub_104DD77  +
push 0  +
mov ecx esi +
call ?UpdateData@CWnd@@QAEHH@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx+70h] 1 +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
push 71h  +
call ??0CDialog@@QAE@IPAVCWnd@@@Z  +
and dword ptr [esi+60h] 0 +
and dword ptr [esi+64h] 0 +
push 64h  +
pop eax  +
mov [esi+68h] eax +
mov [esi+6Ch] eax +
mov eax [ebp+0Ch] +
mov [esi+74h] eax +
mov eax [ebp+10h] +
mov [esi+78h] eax +
mov dword ptr [esi] offset off_104DEB4 +
mov byte ptr [esi+71h] 1 +
mov byte ptr [esi+70h] 1 +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax ds:?messageMap@CDialog@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
push 44Ch  +
mov byte ptr [esi+71h] 1 +
call ?IsDlgButtonChecked@CWnd@@QBEIH@Z  +
cmp eax 1 +
jnz loc_104E05F  +
push 0  +
lea eax [ebp-4] +
push eax  +
push 3FBh  +
mov ecx esi +
call ?GetDlgItemInt@CWnd@@QBEIHPAHH@Z  +
cmp dword ptr [ebp-4] 0 +
mov ecx eax +
mov [esi+6Ch] ecx +
jz loc_104E05F  +
cmp byte ptr [esi+70h] 0 +
jz loc_104E006  +
mov [esi+68h] ecx +
jmp loc_104E056  +
mov eax [esi+74h] +
test eax eax +
jz loc_104E056  +
mov [ebp-8] eax +
fild  dword ptr [ebp-8] +
jge loc_104E01B  +
fadd  ds:dbl_104A350 +
mov eax [esi+78h] +
fild  dword ptr [esi+78h] +
test eax eax +
jge loc_104E02B  +
fadd  ds:dbl_104A350 +
fdivp st(1) st +
fldz   +
fucomp  st(1) +
fnstsw  ax +
test ah 44h +
jnp loc_104E054  +
mov [ebp-8] ecx +
fild  dword ptr [ebp-8] +
test ecx ecx +
jge loc_104E048  +
fadd  ds:dbl_104A350 +
fdivrp st(1) st +
call _ftol2  +
mov [esi+68h] eax +
jmp loc_104E056  +
fstp  st +
push 0  +
mov ecx esi +
call ?UpdateData@CWnd@@QAEHH@Z  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push 44Ch  +
mov [esi+71h] bl +
call ?IsDlgButtonChecked@CWnd@@QBEIH@Z  +
cmp eax 1 +
jnz loc_104E105  +
push ebx  +
lea eax [ebp-4] +
push eax  +
push 3FCh  +
mov ecx esi +
call ?GetDlgItemInt@CWnd@@QBEIHPAHH@Z  +
mov ecx eax +
mov [esi+68h] ecx +
cmp [ebp-4] ebx +
jz loc_104E105  +
cmp [esi+70h] bl +
jz loc_104E0AB  +
mov [esi+6Ch] ecx +
jmp loc_104E0FD  +
mov eax [esi+74h] +
cmp eax ebx +
jz loc_104E0FD  +
mov [ebp-8] eax +
fild  dword ptr [ebp-8] +
test eax eax +
jge loc_104E0C2  +
fadd  ds:dbl_104A350 +
mov eax [esi+78h] +
fild  dword ptr [esi+78h] +
test eax eax +
jge loc_104E0D2  +
fadd  ds:dbl_104A350 +
fdivp st(1) st +
fldz   +
fucomp  st(1) +
fnstsw  ax +
test ah 44h +
jnp loc_104E0FB  +
mov [ebp-8] ecx +
fild  dword ptr [ebp-8] +
test ecx ecx +
jge loc_104E0EF  +
fadd  ds:dbl_104A350 +
fmulp st(1) st +
call _ftol2  +
mov [esi+6Ch] eax +
jmp loc_104E0FD  +
fstp  st +
push ebx  +
mov ecx esi +
call ?UpdateData@CWnd@@QAEHH@Z  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push 44Ch  +
mov esi ecx +
call ?IsDlgButtonChecked@CWnd@@QBEIH@Z  +
cmp eax 1 +
jnz loc_104E1F5  +
push ebx  +
xor ebx ebx +
cmp [esi+70h] bl +
jz loc_104E14A  +
cmp [esi+71h] bl +
jz loc_104E13F  +
mov eax [esi+6Ch] +
jmp loc_104E1C9  +
mov eax [esi+68h] +
mov [esi+6Ch] eax +
jmp loc_104E1EC  +
mov eax [esi+6Ch] +
cmp eax [esi+74h] +
jnz loc_104E15E  +
mov eax [esi+68h] +
cmp eax [esi+78h] +
jz loc_104E1F4  +
push ebx  +
lea eax [ebp-4] +
push eax  +
push 3FCh  +
mov ecx esi +
call ?GetDlgItemInt@CWnd@@QBEIHPAHH@Z  +
mov ecx eax +
mov [esi+68h] ecx +
cmp [ebp-4] ebx +
jz loc_104E1EC  +
mov eax [esi+74h] +
cmp eax ebx +
jz loc_104E1EC  +
mov [ebp-4] eax +
fild  dword ptr [ebp-4] +
test eax eax +
jge loc_104E190  +
fadd  ds:dbl_104A350 +
mov eax [esi+78h] +
fild  dword ptr [esi+78h] +
test eax eax +
jge loc_104E1A0  +
fadd  ds:dbl_104A350 +
fdivp st(1) st +
fldz   +
fucomp  st(1) +
fnstsw  ax +
test ah 44h +
jnp loc_104E1EA  +
cmp [esi+71h] bl +
jz loc_104E1CE  +
mov eax [esi+6Ch] +
fild  dword ptr [esi+6Ch] +
test eax eax +
jge loc_104E1C2  +
fadd  ds:dbl_104A350 +
fdivrp st(1) st +
call _ftol2  +
mov [esi+68h] eax +
jmp loc_104E1EC  +
mov [ebp-4] ecx +
fild  dword ptr [ebp-4] +
test ecx ecx +
jge loc_104E1DE  +
fadd  ds:dbl_104A350 +
fmulp st(1) st +
call _ftol2  +
jmp loc_104E142  +
***
fstp  st +
push ebx  +
mov ecx esi +
call ?UpdateData@CWnd@@QAEHH@Z  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
retn 8  +
***
mov [ecx+6Ch] eax +
mov [ecx+68h] eax +
mov byte ptr [ecx+70h] 1 +
call ?UpdateData@CWnd@@QAEHH@Z  +
retn   +
***
mov [ecx+68h] eax +
mov byte ptr [ecx+70h] 0 +
call ?UpdateData@CWnd@@QAEHH@Z  +
retn   +
***
mov edi edi +
push esi  +
mov eax 44Dh +
push eax  +
push 44Eh  +
push eax  +
mov esi ecx +
call ?CheckRadioButton@CWnd@@QAEXHHH@Z  +
mov ecx esi +
call ?OnInitDialog@CDialog@@UAEHXZ  +
mov eax 448h +
push eax  +
push 449h  +
push eax  +
mov ecx esi +
call ?CheckRadioButton@CWnd@@QAEXHHH@Z  +
mov eax 44Ah +
push eax  +
push 44Bh  +
push eax  +
mov ecx esi +
call ?CheckRadioButton@CWnd@@QAEXHHH@Z  +
push 1  +
push 44Ch  +
mov ecx esi +
call ?CheckDlgButton@CWnd@@QAEXHI@Z  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push 449h  +
mov edi 448h +
push edi  +
mov esi ecx +
call ?GetCheckedRadioButton@CWnd@@QAEHHH@Z  +
cmp eax edi +
jnz loc_104E2B9  +
and dword ptr [esi+68h] 0 +
jmp loc_104E2BD  +
and dword ptr [esi+6Ch] 0 +
push 44Bh  +
mov edi 44Ah +
push edi  +
mov ecx esi +
call ?GetCheckedRadioButton@CWnd@@QAEHHH@Z  +
cmp eax edi +
jnz loc_104E2D9  +
and dword ptr [esi+64h] 0 +
jmp loc_104E2DD  +
and dword ptr [esi+60h] 0 +
push 44Eh  +
mov edi 44Dh +
push edi  +
mov ecx esi +
call ?GetCheckedRadioButton@CWnd@@QAEHHH@Z  +
cmp eax edi +
setz al  +
pop edi  +
mov [esi+70h] al +
mov ecx esi +
pop esi  +
jmp ?OnOK@CDialog@@MAEXXZ  +
***
mov eax [ecx] +
jmp dword ptr [eax+0D8h]  +
***
mov eax [ecx] +
jmp dword ptr [eax+0DCh]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104DC71  +
test byte ptr [ebp+8] 1 +
jz loc_104E339  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push 2  +
lea eax [ebp+LCData] +
push eax  +
push 0Eh  +
xor esi esi +
push 400h  +
mov [ebp+var_8] esi +
mov dword ptr [ebp+LCData] 2Eh +
call ds:GetLocaleInfoW  +
mov ebx [ebp+lpString] +
mov eax [ebx] +
cmp [eax-8] esi +
jz loc_104E3E3  +
push edi  +
push dword ptr [ebp+LCData]  +
mov ecx ebx +
call ?Find@CString@@QBEHG@Z  +
push 1  +
mov ecx ebx +
mov edi eax +
call ?GetBuffer@CString@@QAEPAGH@Z  +
mov ebx ds:_wtoi +
push eax  +
mov [ebp+lpString] eax +
call ebx  +
imul eax eax +
pop ecx  +
mov [ebp+var_8] eax +
test edi edi +
jl loc_104E3E2  +
mov eax [ebp+lpString] +
lea esi [eax+edi*2+2] +
mov edi ds:lstrlenW +
push esi  +
mov [ebp+lpString] esi +
call edi  +
cmp eax 2 +
jle loc_104E3C5  +
xor eax eax +
mov [esi+4] ax +
push esi  +
call ebx  +
pop ecx  +
push [ebp+lpString]  +
mov esi eax +
imul esi esi +
call edi  +
push 2  +
pop ecx  +
cmp eax ecx +
jge loc_104E3E2  +
sub ecx eax +
imul esi esi +
dec ecx  +
jnz loc_104E3DC  +
pop edi  +
mov eax [ebp+var_8] +
add eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
call ?OnOK@CDialog@@MAEXXZ  +
push 1  +
mov ecx edi +
call sub_104DCCD  +
push 438h  +
mov esi 437h +
push esi  +
mov ecx edi +
call ?GetCheckedRadioButton@CWnd@@QAEHHH@Z  +
sub eax esi +
neg eax  +
sbb eax eax +
inc eax  +
mov [edi+68h] eax +
pop edi  +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ecx+78h] +
push ebx  +
push esi  +
push edi  +
mov esi 1F4h +
add eax esi +
mov ebx 3E8h +
xor edx edx +
mov edi ebx +
div  edi +
mov edi [ebp+8] +
xor edx edx +
mov [edi] eax +
mov eax [ecx+74h] +
add eax esi +
div  ebx +
mov [edi+4] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CDialog@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_104E4A8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
xor al al +
push edi  +
mov edi [ebp+arg_0] +
cmp [esi+70h] al +
jz loc_104E51A  +
cmp [esi+71h] al +
jz loc_104E504  +
lea eax [esi+6Ch] +
push eax  +
push 3FBh  +
push edi  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAK@Z  +
mov ebx 1F4h +
push ebx  +
push 1  +
push dword ptr [esi+6Ch]  +
push edi  +
call ?DDV_MinMaxInt@@YGXPAVCDataExchange@@HHH@Z  +
lea eax [esi+68h] +
push eax  +
push 3FCh  +
push edi  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAK@Z  +
push ebx  +
push 1  +
push dword ptr [esi+68h]  +
jmp loc_104E56A  +
lea eax [esi+68h] +
push eax  +
push 3FCh  +
push edi  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAK@Z  +
mov ebx 1F4h +
jmp loc_104E549  +
cmp [esi+71h] al +
jz loc_104E535  +
lea eax [esi+6Ch] +
push eax  +
push 3FBh  +
push edi  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAK@Z  +
mov ebx 1869Fh +
jmp loc_104E4E1  +
lea eax [esi+68h] +
push eax  +
push 3FCh  +
push edi  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAK@Z  +
mov ebx 1869Fh +
push ebx  +
push 1  +
push dword ptr [esi+68h]  +
push edi  +
call ?DDV_MinMaxInt@@YGXPAVCDataExchange@@HHH@Z  +
lea eax [esi+6Ch] +
push eax  +
push 3FBh  +
push edi  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAK@Z  +
push ebx  +
push 1  +
push dword ptr [esi+6Ch]  +
push edi  +
call ?DDV_MinMaxInt@@YGXPAVCDataExchange@@HHH@Z  +
lea ebx [esi+60h] +
push ebx  +
push 3FDh  +
push edi  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAH@Z  +
push 59h  +
push 0FFFFFFA7h  +
push dword ptr [ebx]  +
push edi  +
call ?DDV_MinMaxInt@@YGXPAVCDataExchange@@HHH@Z  +
add esi 64h +
push esi  +
push 3FEh  +
push edi  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAH@Z  +
push 59h  +
push 0FFFFFFA7h  +
push dword ptr [esi]  +
push edi  +
call ?DDV_MinMaxInt@@YGXPAVCDataExchange@@HHH@Z  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword ptr [ebp+LCData] +
add eax 5 +
xor edx edx +
mov ecx 3E8h +
div  ecx +
push esi  +
push edi  +
push 0Ah  +
pop ecx  +
push 2  +
mov dword ptr [ebp+LCData] 2Eh +
mov edi eax +
mov eax edx +
xor edx edx +
div  ecx +
mov esi eax +
lea eax [ebp+LCData] +
push eax  +
push 0Eh  +
push 400h  +
call ds:GetLocaleInfoW  +
mov ecx [ebp+arg_0] +
push 18h  +
call ?GetBufferSetLength@CString@@QAEPAGH@Z  +
test esi esi +
jz loc_104E615  +
push esi  +
lea ecx [ebp+LCData] +
push ecx  +
push edi  +
push offset aUS02u  +
push 18h  +
push eax  +
call sub_1005CB4  +
add esp 18h +
jmp loc_104E626  +
push edi  +
push offset aU  +
push 18h  +
push eax  +
call sub_1005CB4  +
add esp 10h +
mov ecx [ebp+arg_0] +
push 0FFFFFFFFh  +
call ?ReleaseBuffer@CString@@QAEXH@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_10020DC  +
push 431h  +
mov esi ecx +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
xor edi edi +
mov ebx eax +
cmp [esi+84h] edi +
jz loc_104E749  +
cmp [esi+88h] edi +
jz loc_104E749  +
xor eax eax +
push 62h  +
mov [ebp-0D8h] ax +
lea eax [ebp-0D6h] +
push edi  +
push eax  +
call memset  +
xor eax eax +
push 62h  +
mov [ebp-74h] ax +
lea eax [ebp-72h] +
push edi  +
push eax  +
call memset  +
add esp 18h +
lea ecx [ebp-0E0h] +
call ??0CString@@QAE@XZ  +
push 2710h  +
push 0FEh  +
push dword ptr [esi+84h]  +
lea eax [ebp-74h] +
mov dword ptr [ebp-4] 1 +
mov [ebp-0E4h] eax +
call ds:MulDiv  +
push eax  +
push offset aD  +
lea eax [ebp-74h] +
push 32h  +
push eax  +
call sub_1005CB4  +
add esp 10h +
push 0C372h  +
lea ecx [ebp-0E0h] +
call ?LoadStringW@CString@@QAEHI@Z  +
lea eax [ebp-0E4h] +
push eax  +
push 32h  +
lea eax [ebp-0D8h] +
push eax  +
push edi  +
push edi  +
push dword ptr [ebp-0E0h]  +
push 2400h  +
call ds:FormatMessageW  +
lea eax [ebp-0D8h] +
push eax  +
mov ecx ebx +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
lea ecx [ebp-0E0h] +
jmp loc_104E77A  +
lea ecx [ebp-0DCh] +
call ??0CString@@QAE@XZ  +
push 0C36Fh  +
lea ecx [ebp-0DCh] +
mov [ebp-4] edi +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp-0DCh]  +
mov ecx ebx +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
lea ecx [ebp-0DCh] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ??1CString@@QAE@XZ  +
call sub_1002119  +
retn   +
***
call sub_10020DC  +
mov esi ecx +
mov [ebp-0F4h] esi +
call ?OnInitDialog@CDialog@@UAEHXZ  +
push 42Fh  +
mov ecx esi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
push 430h  +
mov ecx esi +
mov [ebp-0ECh] eax +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
xor ebx ebx +
mov [ebp-0E4h] eax +
mov [ebp-0D2h] bl +
mov [ebp-0D1h] bl +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
mov eax [eax+3CCh] +
cmp [eax-8] ebx +
jz loc_104EA2B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
add eax 3CCh +
push eax  +
lea ecx [ebp-0E8h] +
call ??0CString@@QAE@ABV0@@Z  +
push ebx  +
push ebx  +
push 3  +
push ebx  +
push 3  +
push 80000000h  +
push dword ptr [ebp-0E8h]  +
mov [ebp-4] ebx +
call ds:CreateFileW  +
mov edi eax +
mov [ebp-0F0h] edi +
cmp edi 0FFFFFFFFh +
jz loc_104EA0C  +
lea ecx [ebp-0D8h] +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-0DCh] +
mov byte ptr [ebp-4] 1 +
call ??0CString@@QAE@XZ  +
push ebx  +
push edi  +
mov byte ptr [ebp-4] 2 +
call ds:GetFileSize  +
cmp eax 0FFFFFFFFh +
setnz byte ptr [ebp-0D1h]  +
cmp [ebp-0D1h] bl +
jz loc_104E8A4  +
push 1  +
push eax  +
push 0C371h  +
lea eax [ebp-0F8h] +
push eax  +
call sub_101217F  +
push dword ptr [eax]  +
mov ecx [ebp-0E4h] +
mov byte ptr [ebp-4] 3 +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
lea ecx [ebp-0F8h] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
lea eax [ebp-120h] +
push eax  +
push ebx  +
push ebx  +
push edi  +
mov byte ptr [ebp-0D2h] 1 +
call ds:GetFileTime  +
lea eax [ebp-118h] +
push eax  +
lea eax [ebp-120h] +
push eax  +
call ds:FileTimeToLocalFileTime  +
lea eax [ebp-110h] +
push eax  +
lea eax [ebp-118h] +
push eax  +
call ds:FileTimeToSystemTime  +
mov edi ds:GetDateFormatW +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp-110h] +
push eax  +
push 41h  +
mov esi 400h +
push esi  +
call edi  +
push eax  +
push eax  +
lea ecx [ebp-0D8h] +
call ?GetBuffer@CString@@QAEPAGH@Z  +
push eax  +
push ebx  +
lea eax [ebp-110h] +
push eax  +
push 41h  +
push esi  +
call edi  +
mov edi ds:GetTimeFormatW +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp-110h] +
push eax  +
push 2  +
push esi  +
call edi  +
push eax  +
push eax  +
lea ecx [ebp-0DCh] +
call ?GetBuffer@CString@@QAEPAGH@Z  +
push eax  +
push ebx  +
lea eax [ebp-110h] +
push eax  +
push 2  +
push esi  +
call edi  +
push 0FFFFFFFFh  +
lea ecx [ebp-0D8h] +
call ?ReleaseBuffer@CString@@QAEXH@Z  +
push 0FFFFFFFFh  +
lea ecx [ebp-0DCh] +
call ?ReleaseBuffer@CString@@QAEXH@Z  +
lea ecx [ebp-0E0h] +
call ??0CString@@QAE@XZ  +
push 0C370h  +
lea ecx [ebp-0E0h] +
mov byte ptr [ebp-4] 4 +
call ?LoadStringW@CString@@QAEHI@Z  +
mov eax [ebp-0D8h] +
mov [ebp-100h] eax +
mov eax [ebp-0DCh] +
mov [ebp-0FCh] eax +
lea eax [ebp-100h] +
push eax  +
push 60h  +
lea eax [ebp-0D0h] +
push eax  +
push ebx  +
push ebx  +
push dword ptr [ebp-0E0h]  +
push 2400h  +
call ds:FormatMessageW  +
mov ecx [ebp-0ECh] +
lea eax [ebp-0D0h] +
push eax  +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
push dword ptr [ebp-0F0h]  +
call ds:CloseHandle  +
lea ecx [ebp-0E0h] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-0DCh] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-0D8h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
mov esi [ebp-0F4h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0E8h] +
call ??1CString@@QAE@XZ  +
cmp [ebp-0D2h] bl +
jz loc_104EA2B  +
cmp [ebp-0D1h] bl +
jnz loc_104EA8E  +
lea ecx [ebp-0D8h] +
call ??0CString@@QAE@XZ  +
push 0C36Fh  +
lea ecx [ebp-0D8h] +
mov dword ptr [ebp-4] 5 +
call ?LoadStringW@CString@@QAEHI@Z  +
cmp [ebp-0D2h] bl +
jnz loc_104EA66  +
push dword ptr [ebp-0D8h]  +
mov ecx [ebp-0ECh] +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
cmp [ebp-0D1h] bl +
jnz loc_104EA7F  +
push dword ptr [ebp-0D8h]  +
mov ecx [ebp-0E4h] +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0D8h] +
call ??1CString@@QAE@XZ  +
mov ecx esi +
call sub_104E657  +
mov edi [esi+6Ch] +
mov ecx 406h +
mov edx ecx +
lea eax [ecx-2] +
cmp edi ebx +
jz loc_104EAB0  +
xor edx edx +
cmp edi 1 +
setnz dl  +
add edx eax +
push edx  +
push ecx  +
push eax  +
mov ecx esi +
call ?CheckRadioButton@CWnd@@QAEXHHH@Z  +
mov ecx [esi+68h] +
neg ecx  +
sbb ecx ecx +
mov eax 438h +
add ecx eax +
push ecx  +
push eax  +
push 437h  +
mov ecx esi +
call ?CheckRadioButton@CWnd@@QAEXHHH@Z  +
mov eax dword_108A1CC +
mov [esi+8Ch] eax +
xor eax eax +
inc eax  +
call sub_1002119  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
imul eax eax +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_C] +
mov [esi+78h] eax +
mov eax [ebp+arg_4] +
imul eax eax +
mov [esi+74h] eax +
mov eax [ebp+arg_8] +
mov [esi+84h] eax +
mov [esi+88h] ecx +
test eax eax +
jnz loc_104EB33  +
mov eax dword_108B28C +
imul eax eax +
mov [esi+84h] eax +
test ecx ecx +
jnz loc_104EB45  +
mov eax dword_108B290 +
imul eax eax +
mov [esi+88h] eax +
mov ecx esi +
call sub_104DD77  +
mov eax [esi+20h] +
test eax eax +
jz loc_104EB6E  +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_104EB6E  +
push 0  +
mov ecx esi +
call ?UpdateData@CWnd@@QAEHH@Z  +
mov ecx esi +
call sub_104E657  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
xor ecx ecx +
push edi  +
cmp [ebx] ecx +
jnz loc_104EBB2  +
push dword ptr [esi+80h]  +
lea eax [esi+60h] +
push eax  +
mov ecx esi +
call sub_104E5B2  +
push dword ptr [esi+7Ch]  +
lea eax [esi+64h] +
push eax  +
mov ecx esi +
call sub_104E5B2  +
jmp loc_104ED7D  +
fldz   +
mov eax [esi+6Ch] +
sub eax ecx +
fstp  [ebp+var_C] +
mov [ebp+arg_0] ecx +
jz loc_104ED42  +
dec eax  +
jz loc_104EC6E  +
dec eax  +
jnz loc_104ED7D  +
lea eax [ebp+var_C] +
push eax  +
push 108h  +
push ebx  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAN@Z  +
push dword ptr [esi+84h]  +
push 64h  +
push 1  +
call ds:MulDiv  +
push dword ptr [esi+84h]  +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
push 64h  +
mov edi 1869Fh +
push edi  +
fstp  [ebp+var_14] +
call ds:MulDiv  +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
sub esp 10h +
lea eax [ebp+var_C] +
fstp  [esp+30h+var_28] +
fld  [ebp+var_14] +
fstp  [esp+30h+var_30] +
push eax  +
push ebx  +
call ?DDV_MinMaxDouble@@YGXPAVCDataExchange@@ABNNN@Z  +
lea eax [ebp+var_C] +
push eax  +
push 10Ah  +
push ebx  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAN@Z  +
push dword ptr [esi+88h]  +
push 64h  +
push 1  +
call ds:MulDiv  +
push dword ptr [esi+88h]  +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
push 64h  +
push edi  +
fstp  [ebp+var_14] +
call ds:MulDiv  +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
jmp loc_104ED29  +
lea eax [ebp+var_C] +
push eax  +
push 108h  +
push ebx  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAN@Z  +
mov eax [esi+84h] +
imul eax eax +
push eax  +
mov edi 2710h +
push edi  +
push 1  +
call ds:MulDiv  +
mov [ebp+var_4] eax +
mov eax [esi+84h] +
fild  [ebp+var_4] +
imul eax eax +
fstp  [ebp+var_14] +
push eax  +
push edi  +
mov edi 1869Fh +
push edi  +
call ds:MulDiv  +
mov [ebp+var_4] eax +
sub esp 10h +
fild  [ebp+var_4] +
lea eax [ebp+var_C] +
fstp  [esp+30h+var_28] +
fld  [ebp+var_14] +
fstp  [esp+30h+var_30] +
push eax  +
push ebx  +
call ?DDV_MinMaxDouble@@YGXPAVCDataExchange@@ABNNN@Z  +
lea eax [ebp+var_C] +
push eax  +
push 10Ah  +
push ebx  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAN@Z  +
mov eax [esi+88h] +
imul eax eax +
push eax  +
push 2710h  +
push 1  +
call ds:MulDiv  +
mov [ebp+var_4] eax +
mov eax [esi+88h] +
fild  [ebp+var_4] +
imul eax eax +
fstp  [ebp+var_14] +
push eax  +
push 2710h  +
push edi  +
call ds:MulDiv  +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
sub esp 10h +
fstp  [esp+30h+var_28] +
lea eax [ebp+var_C] +
fld  [ebp+var_14] +
fstp  [esp+30h+var_30] +
push eax  +
push ebx  +
call ?DDV_MinMaxDouble@@YGXPAVCDataExchange@@ABNNN@Z  +
jmp loc_104ED7D  +
lea eax [ebp+arg_0] +
push eax  +
push 108h  +
push ebx  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAK@Z  +
mov edi 1869Fh +
push edi  +
push 1  +
push [ebp+arg_0]  +
push ebx  +
call ?DDV_MinMaxLong@@YGXPAVCDataExchange@@JJJ@Z  +
lea eax [ebp+arg_0] +
push eax  +
push 10Ah  +
push ebx  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAK@Z  +
push edi  +
push 1  +
push [ebp+arg_0]  +
push ebx  +
call ?DDV_MinMaxLong@@YGXPAVCDataExchange@@JJJ@Z  +
lea edi [esi+60h] +
push edi  +
push 108h  +
push ebx  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAVCString@@@Z  +
push 5  +
push edi  +
push ebx  +
call ?DDV_MaxChars@@YGXPAVCDataExchange@@ABVCString@@H@Z  +
lea eax [esi+64h] +
push eax  +
push 10Ah  +
push ebx  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAVCString@@@Z  +
push 5  +
lea eax [esi+64h] +
push eax  +
push ebx  +
call ?DDV_MaxChars@@YGXPAVCDataExchange@@ABVCString@@H@Z  +
cmp dword ptr [ebx] 0 +
jz loc_104EDD1  +
push edi  +
mov ecx esi +
call sub_104E345  +
mov [esi+80h] eax +
lea eax [esi+64h] +
push eax  +
mov ecx esi +
call sub_104E345  +
mov [esi+7Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp-4] +
push eax  +
lea eax [ebp-8] +
push eax  +
mov esi ecx +
call sub_1019E6D  +
push 0  +
push 0  +
push dword ptr [ebp-4]  +
mov ecx esi +
push dword ptr [ebp-8]  +
call sub_104EAEF  +
pop esi  +
leave   +
retn   +
***
mov eax [ecx+2Ch] +
cdq   +
sub eax edx +
sar eax 1 +
mov [ecx+0A4h] eax +
mov eax [ecx+30h] +
cdq   +
sub eax edx +
sar eax 1 +
mov [ecx+0A8h] eax +
retn   +
***
and dword ptr [ecx+0A4h] 0 +
and dword ptr [ecx+0A8h] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx ds:SetBkColor +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push dword ptr [edi+0Ch]  +
mov esi ecx +
call ebx  +
push 0  +
push dword ptr [edi+0Ch]  +
mov [ebp+var_4] eax +
call ds:SetTextColor  +
push 660046h  +
push 0  +
push 0  +
push dword ptr [esi+38h]  +
mov [ebp+arg_0] eax +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [edi+0Ch]  +
call ds:BitBlt  +
push 0FFFFFFh  +
push dword ptr [edi+0Ch]  +
call ebx  +
push 220326h  +
push 0  +
push 0  +
push dword ptr [esi+38h]  +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [edi+0Ch]  +
call ds:BitBlt  +
push [ebp+arg_C]  +
push dword ptr [edi+0Ch]  +
call ebx  +
push 660046h  +
push 0  +
push 0  +
push dword ptr [esi+38h]  +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [edi+0Ch]  +
call ds:BitBlt  +
push [ebp+arg_0]  +
push dword ptr [edi+0Ch]  +
call ds:SetTextColor  +
push [ebp+var_4]  +
push dword ptr [edi+0Ch]  +
call ebx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov ecx dword_108AF4C +
and dword_108AF50 0 +
test ecx ecx +
jz loc_104EF28  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
and dword_108AF4C 0 +
retn   +
***
jmp sub_1002407  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102DCC1  +
test byte ptr [ebp+8] 1 +
jz loc_104EF5F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov eax [ebp+8] +
cmp eax [esi+2Ch] +
jnz loc_104EF8D  +
mov eax [ebp+0Ch] +
cmp eax [esi+30h] +
jz loc_104F310  +
xor ecx ecx +
xor eax eax +
cmp [ebp+8] eax +
setl cl  +
xor ebx ebx +
cmp [ebp+0Ch] eax +
setl bl  +
mov edi ecx +
cmp edi eax +
jz loc_104EFA8  +
neg dword ptr [ebp+8]  +
cmp ebx eax +
jz loc_104EFAF  +
neg dword ptr [ebp+0Ch]  +
cmp [ebp+8] eax +
jnz loc_104EFBB  +
mov dword ptr [ebp+8] 1 +
cmp [ebp+0Ch] eax +
jnz loc_104EFC7  +
mov dword ptr [ebp+0Ch] 1 +
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 25Bh +
jz loc_104F304  +
lea ecx [ebp-3Ch] +
call ??0CDC@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-28h] 0 +
mov dword ptr [ebp-2Ch] offset off_1002208 +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 1 +
call ??0CDC@@QAE@XZ  +
and dword ptr [ebp-20h] 0 +
mov dword ptr [ebp-24h] offset off_1002208 +
lea eax [esi+14h] +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1002292  +
test eax eax +
jz loc_104F31B  +
push dword ptr [ebp+0Ch]  +
lea eax [esi+14h] +
push dword ptr [ebp+8]  +
lea ecx [ebp-2Ch] +
push eax  +
call sub_1008818  +
test eax eax +
jz loc_104F31B  +
lea eax [esi+14h] +
push eax  +
lea ecx [ebp-4Ch] +
call sub_1002292  +
test eax eax +
jz loc_104F31B  +
push 0  +
push 1  +
push 1  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-24h] +
push dword ptr [ebp+8]  +
call sub_1035483  +
test eax eax +
jz loc_104F31B  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-3Ch] +
call sub_10022BD  +
mov [ebp-18h] eax +
push 0  +
lea eax [esi+14h] +
push eax  +
mov ecx esi +
call sub_1035462  +
mov [ebp-10h] eax +
push 0  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx esi +
call sub_1035462  +
push 3  +
lea ecx [ebp-3Ch] +
mov [ebp-14h] eax +
call ?SetStretchBltMode@CDC@@QAEHH@Z  +
xor edx edx +
cmp [ebp+10h] edx +
jz loc_104F0CA  +
mov ecx [ebp+0Ch] +
cmp ebx edx +
jz loc_104F0B2  +
neg ecx  +
mov eax [ebp+8] +
cmp edi edx +
jz loc_104F0BB  +
neg eax  +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push edx  +
push edx  +
push dword ptr [esi+18h]  +
push ecx  +
push eax  +
jmp loc_104F0D9  +
mov eax [esi+30h] +
mov ecx [esi+2Ch] +
push eax  +
push ecx  +
push edx  +
push edx  +
push dword ptr [esi+18h]  +
push eax  +
push ecx  +
neg ebx  +
sbb ebx ebx +
and ebx [ebp+0Ch] +
neg edi  +
sbb edi edi +
and edi [ebp+8] +
push ebx  +
push edi  +
push dword ptr [ebp-38h]  +
call sub_10098C4  +
push dword_108A1C8  +
lea ecx [ebp-3Ch] +
call ?SetBkColor@CDC@@UAEKK@Z  +
mov [ebp+10h] eax +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-4Ch] +
call sub_10022BD  +
mov ecx off_108A1D4 +
cmp dword ptr [ecx+40h] 25Ah +
mov [ebp-1Ch] eax +
jnz loc_104F16D  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_106288A  +
xor edi edi +
test eax eax +
jz loc_104F1B7  +
push 42h  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push edi  +
push edi  +
push dword ptr [ebp-48h]  +
call ds:PatBlt  +
lea ebx [esi+0Ch] +
cmp ebx edi +
jz loc_104F1B7  +
cmp [ebx+4] edi +
jz loc_104F1B7  +
push edi  +
call ds:GetStockObject  +
push eax  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
push eax  +
push ebx  +
lea ecx [ebp-4Ch] +
call sub_10360A7  +
jmp loc_104F1B7  +
mov eax [ebp+8] +
xor ebx ebx +
mov [ebp-54h] eax +
mov eax [ebp+0Ch] +
lea edi [esi+0Ch] +
mov [ebp-5Ch] ebx +
mov [ebp-58h] ebx +
mov [ebp-50h] eax +
cmp edi ebx +
jz loc_104F194  +
cmp [edi+4] ebx +
jz loc_104F194  +
mov ecx edi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea eax [ebp-5Ch] +
push eax  +
mov ecx edi +
call sub_1036595  +
push 0FF0062h  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push ebx  +
push ebx  +
push dword ptr [ebp-48h]  +
call ds:PatBlt  +
xor edi edi +
push 220326h  +
push edi  +
push edi  +
push dword ptr [ebp-38h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push edi  +
push edi  +
push dword ptr [ebp-48h]  +
call ds:BitBlt  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-3Ch] +
call ?SetBkColor@CDC@@UAEKK@Z  +
cmp [ebp-10h] edi +
jz loc_104F1EE  +
push edi  +
push dword ptr [ebp-10h]  +
lea ecx [esi+14h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
cmp [ebp-14h] edi +
jz loc_104F1FF  +
push edi  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-3Ch] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
mov eax [esi+4Ch] +
cmp eax edi +
jz loc_104F215  +
push eax  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
push eax  +
lea ecx [esi+14h] +
call sub_10022BD  +
mov eax [esi+50h] +
cmp eax edi +
jz loc_104F22B  +
push eax  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
push eax  +
lea ecx [esi+34h] +
call sub_10022BD  +
lea ecx [esi+14h] +
call ?DeleteDC@CDC@@QAEHXZ  +
lea edi [esi+34h] +
mov ecx edi +
call ?DeleteDC@CDC@@QAEHXZ  +
lea ebx [esi+24h] +
mov ecx ebx +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+44h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-3Ch] +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
push eax  +
lea ecx [esi+14h] +
call ?Attach@CDC@@QAEHPAUHDC__@@@Z  +
lea ecx [ebp-2Ch] +
call ?Detach@CGdiObject@@QAEPAXXZ  +
push eax  +
mov ecx ebx +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
lea ecx [ebp-4Ch] +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
push eax  +
mov ecx edi +
call ?Attach@CDC@@QAEHPAUHDC__@@@Z  +
lea ecx [ebp-24h] +
call ?Detach@CGdiObject@@QAEPAXXZ  +
push eax  +
lea ecx [esi+44h] +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
mov eax [ebp-18h] +
xor ecx ecx +
cmp eax ecx +
jnz loc_104F29E  +
xor eax eax +
jmp loc_104F2A1  +
mov eax [eax+4] +
mov [esi+4Ch] eax +
mov eax [ebp-1Ch] +
cmp eax ecx +
jnz loc_104F2AF  +
xor eax eax +
jmp loc_104F2B2  +
mov eax [eax+4] +
mov [esi+50h] eax +
cmp dword_108AEF8 ecx +
jz loc_104F2C9  +
mov dword_108AEF8 ecx +
mov dword_108AEFC ecx +
mov edi offset off_1002208 +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-24h] edi +
call sub_1002407  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 1 +
call ??1CDC@@UAE@XZ  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
mov [ebp-2Ch] edi +
call sub_1002407  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
call ??1CDC@@UAE@XZ  +
mov eax [ebp+8] +
mov [esi+2Ch] eax +
mov eax [ebp+0Ch] +
mov [esi+30h] eax +
xor eax eax +
inc eax  +
call sub_1002061  +
retn 0Ch  +
mov esi offset off_1002208 +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-24h] esi +
call sub_1002407  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 1 +
call ??1CDC@@UAE@XZ  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
mov [ebp-2Ch] esi +
call sub_1002407  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
call ??1CDC@@UAE@XZ  +
xor eax eax +
jmp loc_104F313  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi dword ptr [ebp+arg_0.rgbBlue] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [edi+14h]  +
mov esi ecx +
push dword ptr [edi+0Ch]  +
call sub_10386E9  +
push dword ptr [ebp+arg_0.rgbBlue]  +
push dword ptr [edi+0Ch]  +
call ds:SetBkColor  +
push [ebp+var_4]  +
mov [ebp+var_10] eax +
push dword ptr [edi+0Ch]  +
call ds:SetTextColor  +
mov [ebp+var_14] eax +
lea eax [esi+14h] +
xor ebx ebx +
push ebx  +
push eax  +
mov ecx esi +
mov [ebp+var_C] eax +
call sub_1035462  +
mov [ebp+var_4] eax +
mov eax [esi+0B0h] +
cmp eax ebx +
jz loc_104F410  +
push eax  +
push dword ptr [esi+18h]  +
mov [ebp+arg_0.rgbBlue] bl +
mov [ebp+arg_0.rgbGreen] bl +
mov [ebp+arg_0.rgbRed] 0FFh +
mov [ebp+arg_0.rgbReserved] 1 +
call ds:SelectObject  +
push dword ptr [ebp+arg_0.rgbBlue]  +
mov [ebp+var_8] eax +
push dword ptr [esi+0B8h]  +
push dword ptr [esi+0B4h]  +
push ebx  +
push ebx  +
push dword ptr [esi+18h]  +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [edi+0Ch]  +
call ds:GdiAlphaBlend  +
push [ebp+var_8]  +
push dword ptr [esi+18h]  +
call ds:SelectObject  +
jmp loc_104F46D  +
push 660046h  +
push ebx  +
push ebx  +
push dword ptr [esi+18h]  +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [edi+0Ch]  +
call ds:BitBlt  +
push 220326h  +
push ebx  +
push ebx  +
push dword ptr [esi+38h]  +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [edi+0Ch]  +
call ds:BitBlt  +
push 660046h  +
push ebx  +
push ebx  +
push dword ptr [esi+18h]  +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [edi+0Ch]  +
call ds:BitBlt  +
cmp [ebp+var_4] ebx +
jz loc_104F47E  +
mov ecx [ebp+var_C] +
push ebx  +
push [ebp+var_4]  +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push [ebp+var_10]  +
push dword ptr [edi+0Ch]  +
call ds:SetBkColor  +
push [ebp+var_14]  +
push dword ptr [edi+0Ch]  +
call ds:SetTextColor  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_102DD4C +
call sub_1002407  +
test byte ptr [ebp+8] 1 +
jz loc_104F4C2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101F38C  +
test byte ptr [ebp+8] 1 +
jz loc_104F4E8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx+4Ch] +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [ebp+var_8] esi +
cmp eax edi +
jz loc_104F51E  +
push eax  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
push eax  +
lea ecx [ebx+14h] +
call sub_10022BD  +
mov eax [ebx+50h] +
cmp eax edi +
jz loc_104F534  +
push eax  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
push eax  +
lea ecx [ebx+34h] +
call sub_10022BD  +
lea ecx [ebx+14h] +
mov [ebx+4Ch] edi +
mov [ebx+50h] edi +
call ?DeleteDC@CDC@@QAEHXZ  +
lea ecx [ebx+24h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebx+34h] +
call ?DeleteDC@CDC@@QAEHXZ  +
lea ecx [ebx+44h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
cmp [esi+18h] edi +
jz loc_104F607  +
push edi  +
lea ecx [ebx+14h] +
call sub_1002292  +
test eax eax +
jz loc_104F643  +
push dword ptr [esi+30h]  +
lea eax [esi+14h] +
push dword ptr [esi+2Ch]  +
lea ecx [ebx+24h] +
push eax  +
call sub_1008818  +
test eax eax +
jz loc_104F643  +
lea eax [ebx+24h] +
push eax  +
lea ecx [ebx+14h] +
call sub_10022BD  +
cmp eax edi +
jnz loc_104F5A2  +
xor eax eax +
jmp loc_104F5A5  +
mov eax [eax+4] +
mov [ebx+4Ch] eax +
push 1  +
lea eax [esi+14h] +
push eax  +
mov ecx esi +
call sub_1035462  +
mov [ebp+arg_0] eax +
push 1  +
lea eax [ebx+14h] +
push eax  +
mov ecx esi +
call sub_1035462  +
push 0CC0020h  +
push edi  +
push edi  +
mov [ebp+var_4] eax +
lea eax [esi+14h] +
push eax  +
push dword ptr [esi+30h]  +
lea ecx [ebx+14h] +
push dword ptr [esi+2Ch]  +
push edi  +
push edi  +
call sub_100988D  +
cmp [ebp+arg_0] edi +
jz loc_104F5F5  +
push 1  +
push [ebp+arg_0]  +
lea ecx [esi+14h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
cmp [ebp+var_4] edi +
jz loc_104F607  +
push 1  +
push [ebp+var_4]  +
lea ecx [ebx+14h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
cmp [esi+38h] edi +
jz loc_104F676  +
push edi  +
lea ecx [ebx+34h] +
call sub_1002292  +
test eax eax +
jz loc_104F643  +
push dword ptr [esi+30h]  +
lea eax [esi+34h] +
push dword ptr [esi+2Ch]  +
lea ecx [ebx+44h] +
push eax  +
call sub_1008818  +
test eax eax +
jz loc_104F643  +
lea eax [ebx+44h] +
push eax  +
lea ecx [ebx+34h] +
call sub_10022BD  +
cmp eax edi +
jnz loc_104F655  +
xor eax eax +
jmp loc_104F658  +
push edi  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
xor eax eax +
jmp loc_104F6F6  +
mov eax [eax+4] +
push 0CC0020h  +
push edi  +
push edi  +
mov [ebx+50h] eax +
lea eax [esi+34h] +
push eax  +
push dword ptr [esi+30h]  +
lea ecx [ebx+34h] +
push dword ptr [esi+2Ch]  +
push edi  +
push edi  +
call sub_100988D  +
mov eax [esi+2Ch] +
mov [ebx+2Ch] eax +
mov eax [esi+30h] +
mov [ebx+30h] eax +
mov eax [esi+54h] +
mov [ebx+54h] eax +
mov eax [esi+58h] +
mov [ebx+58h] eax +
mov eax [esi+5Ch] +
mov [ebx+5Ch] eax +
mov eax [esi+64h] +
mov [ebx+64h] eax +
mov eax [esi+68h] +
mov [ebx+68h] eax +
mov eax [esi+6Ch] +
mov [ebx+6Ch] eax +
mov eax [esi+70h] +
mov [ebx+70h] eax +
mov eax [esi+74h] +
mov [ebx+74h] eax +
mov eax [ebp+var_8] +
add esi 78h +
lea edi [ebx+78h] +
movs   +
movs   +
movs   +
movs   +
mov ecx [eax+90h] +
mov [ebx+90h] ecx +
lea esi [eax+94h] +
lea edi [ebx+94h] +
movs   +
movs   +
movs   +
movs   +
mov ecx [eax+0A4h] +
mov [ebx+0A4h] ecx +
mov eax [eax+0A8h] +
mov [ebx+0A8h] eax +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor eax eax +
lea edx [ebp+lParam] +
push edx  +
push eax  +
push 434h  +
push dword ptr [ecx+20h]  +
mov [ebp+lParam] eax +
mov [ebp+var_4] eax +
call ds:SendMessageW  +
mov eax [ebp+arg_0] +
mov ecx [ebp+lParam] +
mov [eax] ecx +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+6Ch] +
test eax eax +
jz loc_104F754  +
push eax  +
call ds:GlobalFree  +
and dword ptr [esi+6Ch] 0 +
pop esi  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
and [ebp+var_4] 0 +
cmp [ebp+hMem] 0 +
jnz loc_104F783  +
xor eax eax +
jmp locret_104F916  +
push [ebp+hMem]  +
call ds:GlobalLock  +
test eax eax +
jz loc_104F77C  +
push ebx  +
push esi  +
push edi  +
push [ebp+hMem]  +
mov esi eax +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
call ds:GlobalUnlock  +
mov ebx [ebp+arg_4] +
push ebx  +
call ds:SaveDC  +
push [ebp+var_18]  +
push ebx  +
call ds:SetMapMode  +
cmp [ebp+var_18] 7 +
mov [ebp+var_8] eax +
jz loc_104F80E  +
cmp [ebp+var_18] 8 +
jz loc_104F80E  +
mov eax [ebp+var_14] +
and [ebp+var_28.x] 0 +
and [ebp+var_28.y] 0 +
mov [ebp+var_20] eax +
mov eax [ebp+var_10] +
mov [ebp+var_1C] eax +
push 2  +
lea eax [ebp+var_28] +
push eax  +
push ebx  +
call ds:LPtoDP  +
test eax eax +
jz loc_104F8F7  +
mov eax [ebp+var_20] +
sub eax [ebp+var_28.x] +
mov ecx [ebp+arg_8] +
inc eax  +
mov [ecx] eax +
mov eax [ebp+var_1C] +
sub eax [ebp+var_28.y] +
mov ecx [ebp+arg_C] +
inc eax  +
mov [ecx] eax +
jmp loc_104F8F0  +
mov esi ds:GetDeviceCaps +
push 8  +
push ebx  +
call esi  +
push 0Ah  +
push ebx  +
mov edi eax +
call esi  +
push 4  +
push [ebp+arg_4]  +
mov ebx eax +
call esi  +
push 6  +
push [ebp+arg_4]  +
mov [ebp+hMem] eax +
call esi  +
mov [ebp+var_4] eax +
mov eax edi +
imul eax eax +
cdq   +
idiv  [ebp+hMem] +
mov ecx [ebp+arg_10] +
mov esi [ebp+var_14] +
mov [ecx] eax +
mov eax ebx +
imul eax eax +
cdq   +
idiv  [ebp+var_4] +
mov ecx [ebp+arg_14] +
mov [ecx] eax +
test esi esi +
jnz loc_104F86F  +
mov eax [ebp+arg_18] +
mov ecx [eax+2Ch] +
mov edx [ebp+arg_8] +
mov [edx] ecx +
mov eax [eax+30h] +
jmp loc_104F8E8  +
jle loc_104F88B  +
mov eax edi +
imul eax esi +
cdq   +
idiv  [ebp+hMem] +
push 64h  +
pop ecx  +
push 64h  +
cdq   +
idiv  ecx +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov eax ebx +
jmp loc_104F8DC  +
test esi esi +
jge loc_104F8ED  +
mov ecx [ebp+arg_18] +
mov eax [ecx+2Ch] +
imul eax [ebp+hMem] +
imul eax eax +
cdq   +
idiv  edi +
cdq   +
idiv  esi +
mov [ebp+arg_18] eax +
mov eax [ecx+30h] +
imul eax [ebp+var_4] +
imul eax eax +
cdq   +
idiv  ebx +
mov ecx [ebp+arg_18] +
cdq   +
idiv  [ebp+var_10] +
cmp ecx eax +
jl loc_104F8BF  +
mov ecx eax +
mov eax ecx +
imul eax edi +
imul eax esi +
cdq   +
idiv  [ebp+hMem] +
push 0FFFFFF9Ch  +
pop esi  +
push esi  +
cdq   +
idiv  esi +
mov edx [ebp+arg_8] +
mov [edx] eax +
mov eax ecx +
imul eax ebx +
imul eax [ebp+var_10] +
cdq   +
idiv  [ebp+var_4] +
pop ecx  +
cdq   +
idiv  ecx +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
mov ebx [ebp+arg_4] +
mov [ebp+var_4] 1 +
cmp [ebp+var_8] 0 +
jz loc_104F907  +
push [ebp+var_8]  +
push ebx  +
call ds:SetMapMode  +
push 0FFFFFFFFh  +
push ebx  +
call ds:RestoreDC  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
push [ebp+hMem]  +
call ds:GlobalLock  +
mov edi eax +
test edi edi +
jz loc_104F9B8  +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push ebx  +
call ds:SaveDC  +
push dword_108A1C8  +
call ds:CreateSolidBrush  +
mov esi [ebp+lprc] +
mov [ebp+arg_8] eax +
test eax eax +
jz loc_104F96C  +
push eax  +
push esi  +
push ebx  +
call ds:FillRect  +
push [ebp+arg_8]  +
call ds:DeleteObject  +
push dword ptr [edi]  +
push ebx  +
call ds:SetMapMode  +
mov eax [edi] +
cmp eax 7 +
jz loc_104F981  +
cmp eax 8 +
jnz loc_104F997  +
mov eax [esi+0Ch] +
sub eax [esi+4] +
push 0  +
push eax  +
mov eax [esi+8] +
sub eax [esi] +
push eax  +
push ebx  +
call ds:SetViewportExtEx  +
push dword ptr [edi+0Ch]  +
push ebx  +
call ds:PlayMetaFile  +
push [ebp+hMem]  +
call ds:GlobalUnlock  +
push 0FFFFFFFFh  +
push ebx  +
call ds:RestoreDC  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:CreatePalette  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov ebx ecx +
lea ecx [ebp-4Ch] +
call ??0CDC@@QAE@XZ  +
mov esi offset stru_108AF34 +
lea edi [ebp-3Ch] +
movs   +
movs   +
xor eax eax +
movs   +
mov [ebp-4] eax +
movs   +
mov [ebp-14h] eax +
cmp [ebp+8] eax +
jnz loc_104FA2A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-4Ch] +
call ??1CDC@@UAE@XZ  +
xor eax eax +
call sub_1002061  +
retn 4  +
***
push dword ptr [ebp+8]  +
call sub_1010A2A  +
push dword ptr [ebp+8]  +
mov esi eax +
mov [ebp-10h] esi +
call sub_1010A4E  +
mov ecx off_108A1D4 +
mov ecx [ecx+40h] +
mov [ebp-18h] eax +
cmp ecx 259h +
jnz loc_104FAA1  +
cmp dword_108AEF4 0 +
jz loc_104FAA1  +
cmp esi dword_108AECC +
jge loc_104FA6E  +
mov ecx [ebp-3Ch] +
lea ecx [ecx+esi-1] +
mov [ebp-34h] ecx +
mov ecx dword_108AED0 +
cmp eax ecx +
mov edx [ebp-38h] +
jge loc_104FA82  +
lea edi [edx+eax-1] +
mov [ebp-30h] edi +
cmp esi dword_108AECC +
jg loc_104FA8E  +
cmp eax ecx +
jle loc_104FAF3  +
mov ecx [ebp-3Ch] +
lea ecx [ecx+esi-1] +
lea eax [edx+eax-1] +
mov [ebp-34h] ecx +
mov [ebp-30h] eax +
jmp loc_104FAF3  +
push dword ptr [ebx+40h]  +
mov edi [ebx+58h] +
mov esi [ebx+5Ch] +
push eax  +
push dword ptr [ebp-10h]  +
neg edi  +
neg esi  +
call sub_1036999  +
sub eax 6 +
jz loc_104FAC5  +
dec eax  +
jnz loc_104FA14  +
jmp loc_104FAC9  +
xor esi esi +
xor edi edi +
push 259h  +
call sub_1035D20  +
mov eax [ebp-10h] +
mov [ebp-2Ch] edi +
add edi eax +
mov eax [ebp-18h] +
mov [ebp-28h] esi +
add esi eax +
mov [ebp-24h] edi +
mov [ebp-20h] esi +
lea esi [ebp-2Ch] +
lea edi [ebp-3Ch] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebx+40h] +
push 1  +
sub esp 10h +
mov edi esp +
push dword ptr [eax+0Ch]  +
lea esi [ebp-3Ch] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_10362A0  +
xor esi esi +
mov dword_108AEF4 esi +
mov eax [ebx+40h] +
push dword ptr [eax+0Ch]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
push eax  +
lea ecx [ebp-4Ch] +
call sub_1002292  +
test eax eax +
jnz loc_104FB4D  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-4Ch] +
call ??1CDC@@UAE@XZ  +
mov eax esi +
jmp loc_104FA22  +
***
push dword ptr [ebp+8]  +
call sub_1036BB3  +
push eax  +
push dword ptr [ebp+8]  +
mov ecx ebx +
call sub_1036C0A  +
mov [ebp-1Ch] eax +
mov eax [ebx+40h] +
push dword ptr [eax+0Ch]  +
push dword_108B1D4  +
push dword ptr [ebp+8]  +
call sub_1036AAD  +
push dword ptr [ebx+40h]  +
mov [ebp-10h] eax +
call sub_100D08B  +
cmp [ebp-10h] esi +
jz loc_104FC70  +
mov [ebp-20h] esi +
mov dword ptr [ebp-24h] offset off_1002208 +
push dword ptr [ebp-10h]  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
mov [ebp+8] esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-4Ch] +
call sub_10022BD  +
mov [ebp-18h] eax +
mov eax [ebx+40h] +
mov eax [eax+24h] +
cmp eax esi +
jz loc_104FBD6  +
push esi  +
push eax  +
lea ecx [ebp-4Ch] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword ptr [ebp-48h]  +
mov [ebp+8] eax +
call ds:RealizePalette  +
mov eax [ebp-30h] +
sub eax [ebp-38h] +
mov ecx [ebp-34h] +
sub ecx [ebp-3Ch] +
push eax  +
push ecx  +
xor edx edx +
push esi  +
push edx  +
lea ecx [ebp-5Ch] +
call sub_100CA63  +
push 1  +
sub esp 10h +
mov edi esp +
push dword ptr [ebp-48h]  +
mov esi eax +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_10362A0  +
test eax eax +
jz loc_104FC2C  +
and dword_108AEF4 0 +
lea eax [ebp-3Ch] +
push eax  +
mov ecx ebx +
call sub_1036C4C  +
push dword ptr [ebx+40h]  +
call sub_100D2D1  +
mov dword ptr [ebp-14h] 1 +
cmp dword ptr [ebp+8] 0 +
jz loc_104FC3F  +
push 0  +
push dword ptr [ebp+8]  +
lea ecx [ebp-4Ch] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-4Ch] +
call sub_10022BD  +
lea ecx [ebp-24h] +
call ?Detach@CGdiObject@@QAEPAXXZ  +
push dword ptr [ebp-10h]  +
call ds:DeleteObject  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
mov dword ptr [ebp-24h] offset off_1002208 +
call sub_1002407  +
xor esi esi +
mov ecx [ebp-1Ch] +
cmp ecx esi +
jz loc_104FC7E  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov esi [ebp-14h] +
jmp loc_104FB3A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1039860 +
call sub_1002407  +
test byte ptr [ebp+8] 1 +
jz loc_104FCAB  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov [ebp-14h] ecx +
push 0E122h  +
call sub_1036A09  +
test eax eax +
jnz loc_104FE00  +
push 6A8h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-18h] eax +
xor ebx ebx +
mov [ebp-4] ebx +
cmp eax ebx +
jz loc_104FCFB  +
mov ecx eax +
call sub_1013B6A  +
mov [ebp-10h] eax +
jmp loc_104FCFE  +
mov [ebp-10h] ebx +
mov edi [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp edi ebx +
jz loc_104FE00  +
push 5Ch  +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
cmp esi ebx +
jz loc_104FDF6  +
push esi  +
push edi  +
push dword_108A24C  +
call sub_105C555  +
test eax eax +
jz loc_104FDEF  +
mov eax [esi+0Ch] +
mov ecx [ebp-14h] +
mov [esi+4] edi +
lea edi [esi+14h] +
mov [esi] ebx +
mov [esi+0Ch] ebx +
mov [esi+10h] ebx +
mov [esi+1Ch] ebx +
mov [esi+20h] ebx +
mov [edi] ebx +
lea ebx [esi+24h] +
and dword ptr [ebx] 0 +
push ebx  +
push edi  +
mov [ebp-18h] eax +
call sub_103B7D3  +
cmp dword ptr [edi] 0 +
jz loc_104FDF6  +
push dword ptr [ebp-18h]  +
call ds:CreateCompatibleDC  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_104FDF6  +
push dword ptr [edi]  +
push eax  +
call ds:SelectObject  +
mov ebx [ebx] +
mov [esi+18h] eax +
xor eax eax +
cmp ebx eax +
jz loc_104FD9A  +
push eax  +
push dword ptr [ebx+4]  +
push dword ptr [esi+0Ch]  +
call ds:SelectPalette  +
mov [esi+28h] eax +
call sub_10049D9  +
mov ecx eax +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
push 80h  +
mov esi eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-18h] eax +
xor edi edi +
inc edi  +
mov [ebp-4] edi +
test eax eax +
jz loc_104FDD5  +
push dword ptr [ebp-10h]  +
mov esi [esi+40h] +
push esi  +
mov ecx eax +
call sub_105E647  +
mov esi eax +
jmp loc_104FDD7  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_104FDF6  +
push 0  +
mov ecx esi +
call ?CopyToClipboard@COleServerItem@@QAEXH@Z  +
mov eax [esi] +
push edi  +
mov ecx esi +
jmp loc_104FDFD  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
call sub_1002061  +
retn   +
***
call sub_1002370  +
mov ebx ecx +
push 0E123h  +
call sub_1036A09  +
test eax eax +
jnz loc_104FE7B  +
xor edi edi +
cmp dword_108AF30 edi +
jz loc_104FE40  +
cmp dword_108AEF4 edi +
jz loc_104FE40  +
mov esi offset dword_108AF00 +
jmp loc_104FE42  +
xor esi esi +
mov ecx ebx +
mov [ebp-14h] esi +
call near ptr dword_104FCB4+3  +
lea ecx [ebp-20h] +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
mov [ebp-4] edi +
mov byte ptr [ebp-4] 1 +
cmp esi edi +
jz loc_104FE65  +
mov dword ptr [esi] 1 +
mov ecx ebx +
call loc_1051E8D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
cmp esi edi +
jz loc_104FE7B  +
mov [esi] edi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_104FEB9  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
jmp loc_104FEC4  +
mov eax [ebp+arg_4] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_104FEE7  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_104FEF2  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
movzx edi word ptr [eax] +
mov edx 100h +
cmp di dx +
jnb loc_104FF73  +
and [ebp+var_4] 0 +
xor edx edx +
push esi  +
cmp dx di +
jnb loc_104FF48  +
movzx edx word ptr [ebp+var_4] +
lea esi [ecx+edx*4] +
movzx edx byte ptr [esi] +
cmp edx [ebp+arg_0] +
jnz loc_104FF3C  +
movzx edx byte ptr [esi+1] +
cmp edx [ebp+arg_4] +
jnz loc_104FF3C  +
movzx edx byte ptr [esi+2] +
cmp edx [ebp+arg_8] +
jz loc_104FF72  +
inc [ebp+var_4]  +
mov dx word ptr [ebp+var_4] +
cmp dx [eax] +
jb loc_104FF1B  +
push ebx  +
mov bl byte ptr [ebp+arg_0] +
movzx edx di +
mov [ecx+edx*4] bl +
movzx edx word ptr [eax] +
mov bl byte ptr [ebp+arg_4] +
mov [ecx+edx*4+1] bl +
movzx edx word ptr [eax] +
mov bl byte ptr [ebp+arg_8] +
mov [ecx+edx*4+2] bl +
movzx edx word ptr [eax] +
mov byte ptr [ecx+edx*4+3] 0 +
inc word ptr [eax]  +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov edx [eax] +
push esi  +
mov esi [ecx] +
cmp edx esi +
jle loc_104FF95  +
mov [eax] esi +
mov [ecx] edx +
mov edx [eax+4] +
mov esi [ecx+4] +
cmp edx esi +
jle loc_104FFA5  +
mov [eax+4] esi +
mov [ecx+4] edx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:OffsetRgn  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_104FFDB  +
mov eax [eax+4] +
push eax  +
push [ebp+lprc]  +
push dword ptr [ecx+4]  +
call ds:FillRect  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:Polygon  +
pop ebp  +
retn 8  +
***
call sub_1002370  +
and dword ptr [ebp+8] 0 +
mov eax offset loc_1050052 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_104F9C2  +
test eax eax +
jz loc_1050088  +
push [ebp+arg_0]  +
call sub_105000E  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
push 8  +
call ??2@YAPAXI@Z  +
xor esi esi +
pop ecx  +
cmp eax esi +
jz loc_10500B6  +
mov [eax+4] esi +
mov dword ptr [eax] offset off_1039860 +
mov edi eax +
jmp loc_10500B8  +
xor edi edi +
mov [ebp+var_4] edi +
cmp edi esi +
jz loc_105018A  +
push ebx  +
mov ebx [ebp+arg_4] +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
mov [ebp+var_8] esi +
mov [ebp+var_C] esi +
mov [ebp+uBytes] esi +
call sub_104FEA4  +
test eax eax +
jl loc_1050171  +
lea eax [ebp+var_C] +
push eax  +
mov eax [ebp+var_8] +
push 4  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1063AFD  +
test eax eax +
jl loc_1050171  +
lea eax [ebp+uBytes] +
push eax  +
push [ebp+var_C]  +
push 8  +
call sub_104FECD  +
test eax eax +
jl loc_1050171  +
push [ebp+uBytes]  +
push esi  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jz loc_105016F  +
mov eax 300h +
mov [esi] ax +
mov [esi+2] bx +
test ebx ebx +
jle loc_1050142  +
mov ecx [ebp+arg_0] +
lea eax [esi+7] +
mov edx [ecx] +
mov [eax-3] edx +
mov byte ptr [eax] 0 +
add ecx 4 +
add eax 4 +
dec ebx  +
jnz loc_1050131  +
push esi  +
push edi  +
call sub_105006C  +
test eax eax +
jnz loc_1050166  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax+4]  +
and [ebp+var_4] 0 +
push esi  +
call ds:LocalFree  +
jmp loc_1050189  +
xor esi esi +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax+4]  +
mov [ebp+var_4] esi +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
call sub_1050091  +
retn   +
***
call sub_1050091  +
retn   +
***
call sub_1050091  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 408h +
push esi  +
push edi  +
push 8  +
call ??2@YAPAXI@Z  +
xor edi edi +
pop ecx  +
cmp eax edi +
jz loc_10501F6  +
mov [eax+4] edi +
mov dword ptr [eax] offset off_1039860 +
mov esi eax +
jmp loc_10501F8  +
xor esi esi +
mov [ebp+var_4] esi +
cmp esi edi +
jz loc_1050295  +
lea eax [ebp+var_408.palPalEntry] +
push eax  +
push 100h  +
push edi  +
push [ebp+arg_0]  +
call ds:GetDIBColorTable  +
cmp eax edi +
jz loc_1050286  +
xor edx edx +
inc edx  +
cmp eax edx +
jl loc_1050255  +
push ebx  +
cmp edx 101h +
jge loc_1050254  +
lea ecx [ebp+edx*4+var_408] +
movzx edi byte ptr [ecx] +
movzx ebx byte ptr [ecx+1] +
shl edi 8 +
or edi ebx +
movzx ebx byte ptr [ebp+edx*4+var_408.palNumEntries] +
shl edi 8 +
or edi ebx +
inc edx  +
cmp edx eax +
mov [ecx] edi +
jle loc_1050225  +
pop ebx  +
movzx eax ax +
shl eax 10h +
or eax 300h +
mov dword ptr [ebp+var_408.palVersion] eax +
lea eax [ebp+var_408] +
push eax  +
push esi  +
call sub_105006C  +
test eax eax +
jnz loc_1050295  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
and [ebp+var_4] 0 +
jmp loc_1050295  +
push edi  +
call ds:CreateHalftonePalette  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
call sub_103B1B6  +
mov eax [edi] +
mov [ebp+var_18] eax +
mov eax [edi+4] +
mov [ebp+var_14] eax +
mov eax [edi+8] +
mov [ebp+var_10] eax +
mov eax [edi+0Ch] +
mov [ebp+var_C] eax +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
call sub_104FF7D  +
mov eax [ebp+var_10] +
mov ebx [ebp+var_18] +
mov esi [ebp+var_14] +
push [ebp+arg_8]  +
mov [ebp+var_20] eax +
mov eax [ebp+var_C] +
mov [ebp+var_28] ebx +
mov [ebp+var_24] esi +
mov [ebp+var_1C] eax +
call ds:CreateSolidBrush  +
mov [ebp+arg_4] eax +
test eax eax +
jnz loc_1050314  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
jmp loc_10503C7  +
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 25Ah +
jnz loc_105035E  +
mov eax dword_108AEB0 +
test eax eax +
jz loc_10503B7  +
push esi  +
push ebx  +
push eax  +
call ds:OffsetRgn  +
push [ebp+arg_4]  +
push dword_108AEB0  +
push [ebp+arg_0]  +
call ds:FillRgn  +
neg esi  +
push esi  +
neg ebx  +
push ebx  +
push dword_108AEB0  +
call ds:OffsetRgn  +
jmp loc_10503B7  +
push 0  +
push 0  +
push 5  +
call ds:CreatePen  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10503B7  +
mov esi ds:SelectObject +
push eax  +
push [ebp+arg_0]  +
call esi  +
push [ebp+arg_4]  +
mov [ebp+arg_8] eax +
push [ebp+arg_0]  +
call esi  +
push [ebp+var_C]  +
mov [ebp+var_8] eax +
push [ebp+var_10]  +
push [ebp+var_14]  +
push ebx  +
push [ebp+arg_0]  +
call ds:Rectangle  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call esi  +
push [ebp+var_4]  +
call ds:DeleteObject  +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call esi  +
push [ebp+arg_4]  +
call ds:DeleteObject  +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_0] +
sub esp 808h +
push edi  +
test eax eax +
jz loc_1050511  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1050511  +
push ebx  +
push esi  +
mov esi ds:GetPaletteEntries +
lea ecx [ebp+var_404.palPalEntry] +
push ecx  +
mov ebx 100h +
push ebx  +
push 0  +
push dword ptr [eax+4]  +
call esi  +
lea ecx [ebp+var_404.palPalEntry] +
push ecx  +
push eax  +
mov [ebp+arg_4] eax +
mov eax [ebp+arg_0] +
push 0  +
push dword ptr [eax+4]  +
call esi  +
lea eax [ebp+var_804] +
push eax  +
push ebx  +
push 0  +
push dword ptr [edi+4]  +
call esi  +
lea ecx [ebp+var_804] +
push ecx  +
push eax  +
push 0  +
push dword ptr [edi+4]  +
mov [ebp+arg_0] eax +
call esi  +
xor esi esi +
cmp [ebp+arg_0] esi +
jle loc_10504B9  +
mov eax [ebp+arg_4] +
cmp eax ebx +
jge loc_10504BC  +
xor edi edi +
test eax eax +
jle loc_105049A  +
mov cl [ebp+esi*4+var_804.peRed] +
cmp [ebp+edi*4+var_404.palPalEntry.peRed] cl +
jnz loc_1050491  +
mov dl [ebp+edi*4+var_404.palPalEntry.peGreen] +
cmp dl [ebp+esi*4+var_804.peGreen] +
jnz loc_1050491  +
mov dl [ebp+edi*4+var_404.palPalEntry.peBlue] +
cmp dl [ebp+esi*4+var_804.peBlue] +
jz loc_1050496  +
inc edi  +
cmp edi eax +
jl loc_1050468  +
cmp edi eax +
jl loc_10504B1  +
mov ecx dword ptr [ebp+esi*4+var_804.peRed] +
mov dword ptr [ebp+eax*4+var_404.palPalEntry.peRed] ecx +
mov ecx [ebp+arg_8] +
inc eax  +
inc dword ptr [ecx]  +
mov [ebp+arg_4] eax +
inc esi  +
cmp esi [ebp+arg_0] +
jge loc_10504BC  +
jmp loc_1050454  +
mov eax [ebp+arg_4] +
mov ecx 300h +
push 8  +
mov [ebp+var_404.palVersion] cx +
mov [ebp+var_404.palNumEntries] ax +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10504E9  +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1039860 +
mov esi eax +
jmp loc_10504EB  +
xor esi esi +
test esi esi +
jz loc_1050509  +
lea eax [ebp+var_404] +
push eax  +
push esi  +
call sub_105006C  +
test eax eax +
jnz loc_105050B  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
xor esi esi +
mov eax esi +
pop esi  +
pop ebx  +
jmp loc_1050513  +
xor eax eax +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jnz loc_105052C  +
xor eax eax +
jmp loc_1050550  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_8]  +
mov ecx esi +
push dword_108B1D4  +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword ptr [esi+4]  +
mov edi eax +
call ds:RealizePalette  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx off_108A1D4 +
mov eax [ecx] +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
call dword ptr [eax+90h]  +
xor ebx ebx +
mov esi eax +
cmp dword_108A218 ebx +
jz loc_105064A  +
mov eax [ebp+arg_4] +
mov edx dword_108AECC +
mov ecx [ebp+arg_8] +
push dword_108AF48  +
add edx eax +
push dword_108AF44  +
mov [ebp+rcSrc2.left] eax +
mov eax dword_108AED0 +
add eax ecx +
mov [ebp+rcSrc2.top] ecx +
lea ecx [ebp+rcSrc2] +
mov [ebp+rcSrc2.right] edx +
mov [ebp+rcSrc2.bottom] eax +
call sub_1036D8C  +
lea esi [ebp+rcSrc2] +
mov edi offset stru_108AF34 +
movs   +
movs   +
movs   +
xor ecx ecx +
movs   +
cmp [ebp+arg_C] ebx +
jz loc_10505DB  +
cmp dword_108AF10 ebx +
mov eax dword_108A224 +
setnz cl  +
inc ecx  +
jmp loc_10505E0  +
mov eax dword_108A1C8 +
mov edx off_108A1D4 +
cmp dword ptr [edx+40h] 25Bh +
mov esi [ebp+arg_0] +
jz loc_1050634  +
sub ecx ebx +
jz loc_1050622  +
dec ecx  +
jz loc_105060F  +
dec ecx  +
jnz loc_1050634  +
push [ebp+rcSrc2.top]  +
mov ecx offset unk_108AEA0 +
push [ebp+rcSrc2.left]  +
push esi  +
call sub_1035EB1  +
jmp loc_1050634  +
push [ebp+rcSrc2.top]  +
mov ecx offset unk_108AEA0 +
push [ebp+rcSrc2.left]  +
push esi  +
call sub_104F35F  +
jmp loc_1050634  +
push eax  +
push [ebp+rcSrc2.top]  +
mov ecx offset unk_108AEA0 +
push [ebp+rcSrc2.left]  +
push esi  +
call sub_104EE43  +
lea eax [ebp+rcSrc2] +
push eax  +
push esi  +
call sub_1005D16  +
lea eax [ebp+rcSrc2] +
push eax  +
push esi  +
call sub_100D173  +
jmp loc_10506BB  +
cmp [ebp+arg_C] ebx +
mov ebx dword_108A224 +
jnz loc_105065B  +
mov ebx dword_108A1C8 +
mov ecx off_108A1D4 +
mov eax [ecx] +
push 1  +
mov edi ecx +
call dword ptr [eax+94h]  +
push eax  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+90h]  +
push eax  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1037E3E  +
mov ecx [ebp+arg_4] +
mov eax esi +
cdq   +
sub eax edx +
mov edx [ebp+arg_8] +
sar eax 1 +
sub ecx eax +
sub edx eax +
mov stru_108A338.left ecx +
add ecx esi +
mov stru_108A338.top edx +
add edx esi +
mov stru_108A338.right ecx +
mov stru_108A338.bottom edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov eax offset off_10506D0 +
retn   +
***
mov eax offset off_10506F4 +
retn   +
***
mov eax offset off_1050718 +
retn   +
***
mov eax offset off_105073C +
retn   +
***
mov eax offset off_1050760 +
retn   +
***
mov eax offset off_1050784 +
retn   +
***
mov eax offset off_10507A8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+10h] +
mov edx [ecx+8] +
cmp eax edx +
push esi  +
jle loc_10507F6  +
mov esi [ecx+14h] +
cmp esi [ecx+0Ch] +
jle loc_10507E4  +
push 4  +
jmp loc_1050812  +
cmp eax edx +
jle loc_10507F6  +
mov esi [ecx+14h] +
cmp esi [ecx+0Ch] +
jge loc_10507F4  +
push 5  +
jmp loc_1050812  +
cmp eax edx +
jge loc_1050804  +
mov esi [ecx+14h] +
cmp esi [ecx+0Ch] +
jle loc_1050804  +
push 6  +
jmp loc_1050812  +
cmp edx eax +
jle loc_1050817  +
mov esi [ecx+14h] +
cmp esi [ecx+0Ch] +
jge loc_1050815  +
push 3  +
pop eax  +
jmp loc_1050836  +
cmp edx eax +
jz loc_1050824  +
mov edx [ecx+0Ch] +
xor eax eax +
inc eax  +
mov [ecx+14h] edx +
jmp loc_1050836  +
mov eax [ecx+0Ch] +
cmp eax [ecx+14h] +
jz loc_1050834  +
push 2  +
pop eax  +
mov [ecx+10h] edx +
jmp loc_1050836  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_10508E9  +
mov edx [ecx+10h] +
push ebx  +
push esi  +
push edi  +
mov edi [ecx] +
mov eax edi +
sub eax edx +
cdq   +
mov ebx eax +
xor ebx edx +
sub ebx edx +
mov esi 96Eh +
jz loc_1050880  +
mov eax [ecx+4] +
sub eax [ecx+14h] +
cdq   +
xor eax edx +
sub eax edx +
imul eax eax +
cdq   +
idiv  ebx +
jmp loc_1050882  +
mov eax esi +
cmp eax esi +
jl loc_105088F  +
mov dword ptr [ebp+8] 5Ah +
jmp loc_10508A3  +
cmp eax 19Eh +
jl loc_105089F  +
mov dword ptr [ebp+8] 2Dh +
jmp loc_10508A3  +
and dword ptr [ebp+8] 0 +
mov esi [ecx+4] +
mov edx [ecx+14h] +
mov eax esi +
sub eax edx +
cdq   +
xor eax edx +
sub eax edx +
add eax ebx +
cdq   +
sub eax edx +
sar eax 1 +
cmp dword ptr [ebp+8] 2Dh +
jz loc_10508CA  +
cmp dword ptr [ebp+8] 5Ah +
jnz loc_10508E3  +
mov [ecx+10h] edi +
jmp loc_10508E6  +
cmp [ecx+10h] edi +
jge loc_10508D3  +
sub edi eax +
jmp loc_10508D5  +
add edi eax +
cmp [ecx+14h] esi +
mov [ecx+10h] edi +
jge loc_10508E1  +
sub esi eax +
jmp loc_10508E3  +
add esi eax +
mov [ecx+14h] esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
test edi edi +
jz loc_1050936  +
push 10h  +
call ds:GetKeyState  +
mov ecx 8000h +
test ax cx +
jz loc_1050932  +
mov eax [esi+4] +
dec eax  +
push edi  +
mov ecx esi +
cmp eax 5 +
jbe loc_105092B  +
call sub_10507C5  +
mov [esi+4] eax +
push edi  +
mov ecx esi +
mov eax [esi] +
call dword ptr [eax+14h]  +
jmp loc_1050936  +
and dword ptr [esi+4] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword_108A238 1 +
retn 8  +
***
and dword_108A238 0 +
retn 4  +
***
mov edi edi +
push esi  +
push dword_108A224  +
mov esi offset unk_108B074 +
mov ecx esi +
call sub_106702B  +
push dword_108A1C8  +
mov ecx esi +
call sub_1067077  +
pop esi  +
retn 4  +
***
call sub_106702B  +
retn   +
***
call sub_1067077  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+4] 0 +
and dword ptr [eax] 0 +
mov al 1 +
pop ebp  +
retn 4  +
***
and dword ptr [ecx+20h] 0 +
retn 4  +
***
xor eax eax +
cmp dword_108A238 eax +
jnz loc_10509FE  +
cmp [ecx+20h] eax +
jnz loc_10509FE  +
cmp [ecx+14h] eax +
jz locret_1050A01  +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_8] ecx +
cmp [ecx+28h] ebx +
jz loc_1050A23  +
mov esi [ecx+2Ch] +
mov eax [ecx+30h] +
jmp loc_1050A29  +
mov eax [ebp+arg_C] +
mov esi [ebp+arg_4] +
cmp eax ebx +
jz loc_1050B15  +
mov eax dword_108A1CC +
cmp eax 87654321h +
jz loc_1050B15  +
mov edx dword_108A1C8 +
cmp [ecx+1Ch] ebx +
jz loc_1050A5B  +
mov [ebp+arg_4] eax +
cmp esi ebx +
jnz loc_1050A65  +
mov [ebp+arg_4] edx +
mov [ebp+arg_C] eax +
jmp loc_1050A68  +
mov [ebp+arg_4] edx +
cmp esi ebx +
jnz loc_1050A56  +
mov [ebp+arg_4] eax +
mov [ebp+arg_C] edx +
cmp [ecx+24h] ebx +
jz loc_1050A86  +
mov ecx [ebp+arg_4] +
not ecx  +
mov eax 0FFFFFFh +
and ecx eax +
mov [ebp+arg_4] ecx +
mov ecx [ebp+arg_C] +
not ecx  +
and ecx eax +
mov [ebp+arg_C] ecx +
xor eax eax +
inc eax  +
mov [ebp+var_4] eax +
cmp [ebp+arg_8] ebx +
jz loc_1050B41  +
cmp dword_108EEB0 ebx +
jnz loc_1050B8B  +
mov edi ds:GetStockObject +
push 8  +
mov dword_108EEB0 eax +
mov dword_108EEAC ebx +
mov dword_108EEA8 ebx +
call edi  +
mov ebx [ebp+arg_0] +
mov esi ds:SelectObject +
push eax  +
push ebx  +
call esi  +
push 5  +
mov dword_108EEA4 eax +
call edi  +
push eax  +
push ebx  +
call esi  +
mov edi [ebp+var_8] +
cmp dword ptr [edi+18h] 0 +
mov dword_108EEA0 eax +
jz loc_1050AF6  +
push [ebp+arg_C]  +
call ds:CreateSolidBrush  +
push eax  +
push ebx  +
mov dword_108EEA8 eax +
call esi  +
cmp dword ptr [edi+1Ch] 0 +
jz loc_1050B3A  +
push [ebp+arg_4]  +
push dword ptr [edi+34h]  +
push 6  +
call ds:CreatePen  +
push eax  +
push ebx  +
mov dword_108EEAC eax +
call esi  +
jmp loc_1050B8E  +
cmp [ecx+1Ch] ebx +
jz loc_1050B2A  +
mov eax dword_108A1C8 +
mov edx dword_108A224 +
jmp loc_1050A5B  +
mov eax dword_108A224 +
mov edx dword_108A1C8 +
jmp loc_1050A5B  +
push [ebp+arg_C]  +
push 2  +
jmp loc_1050B02  +
cmp dword_108EEB0 ebx +
jz loc_1050B8B  +
push dword_108EEA4  +
mov esi ds:SelectObject +
push [ebp+arg_0]  +
mov dword_108EEB0 ebx +
call esi  +
mov eax dword_108EEAC +
mov edi ds:DeleteObject +
cmp eax ebx +
jz loc_1050B72  +
push eax  +
call edi  +
push dword_108EEA0  +
push [ebp+arg_0]  +
call esi  +
mov eax dword_108EEA8 +
cmp eax ebx +
jz loc_1050B8E  +
push eax  +
call edi  +
jmp loc_1050B8E  +
mov [ebp+var_4] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword_108A218 0 +
push esi  +
mov esi ecx +
mov [ebp+var_4] esi +
jz loc_1050BF2  +
mov edx dword_108AF44 +
mov eax dword_108AECC +
mov esi dword_108AF48 +
lea ecx [edx+eax] +
sub rcDst.left ecx +
mov ecx dword_108AED0 +
push edi  +
lea edi [esi+ecx] +
sub rcDst.top edi +
sub eax edx +
add rcDst.right eax +
sub ecx esi +
add rcDst.bottom ecx +
mov esi [ebp+var_4] +
pop edi  +
jmp loc_1050C3C  +
mov eax [esi+34h] +
shr eax 1 +
or ecx 0FFFFFFFFh +
sub ecx eax +
add rcDst.left ecx +
mov eax [esi+34h] +
shr eax 1 +
or ecx 0FFFFFFFFh +
sub ecx eax +
add rcDst.top ecx +
mov eax [esi+34h] +
mov ecx rcDst.right +
inc eax  +
shr eax 1 +
lea eax [ecx+eax+1] +
mov ecx rcDst.bottom +
mov rcDst.right eax +
mov eax [esi+34h] +
inc eax  +
shr eax 1 +
lea eax [ecx+eax+1] +
mov rcDst.bottom eax +
mov ecx [ebp+arg_0] +
push offset rcDst  +
call sub_100A226  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_1030468  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov edx [ecx+58h] +
push eax  +
push [ebp+arg_0]  +
mov [eax+20h] edx +
mov edx [ecx] +
call dword ptr [edx+34h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov dword_108A238 1 +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+34h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push dword ptr [eax+14h]  +
mov esi ecx +
push dword ptr [eax+10h]  +
mov eax [ebp+arg_0] +
mov eax [eax+40h] +
push dword ptr [eax+0Ch]  +
call ds:GetPixel  +
mov ecx eax +
mov edx eax +
shr ecx 8 +
shr edx 10h +
cmp dword_108B1A8 0 +
movzx edx dl +
movzx ecx cl +
movzx eax al +
jz loc_1050CDC  +
or edx 200h +
shl edx 8 +
or edx ecx +
shl edx 8 +
or edx eax +
mov [esi+48h] edx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
cmp dword ptr [edi+18h] 0 +
mov esi ecx +
push dword ptr [esi+48h]  +
jz loc_1050D0F  +
call sub_104D217  +
jmp loc_1050D14  +
call sub_104D315  +
push 0Fh  +
call ds:GetSysColor  +
mov [esi+48h] eax +
mov ecx off_108A1D8 +
mov eax [ecx] +
call dword ptr [eax+0A0h]  +
push edi  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1030468  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx off_108A1D8 +
mov eax [ecx] +
call dword ptr [eax+0A0h]  +
and dword_108A238 0 +
retn 4  +
***
cmp dword_108AF30 0 +
jz sub_10509EA  +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+arg_C] +
mov [ebp+var_10] eax +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push [ebp+arg_8]  +
mov [ebp+var_8] 4 +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi [esi+34h] +
jz loc_1050E19  +
cmp edi 32h +
ja loc_1050E19  +
call sub_10049FD  +
xor eax eax +
mov dword_108A218 eax +
mov [esi+34h] edi +
cmp dword_108A360 eax +
jnz loc_1050E07  +
cmp dword_108A364 eax +
jz loc_1050E19  +
mov eax [esi] +
push offset dword_108A348  +
push dword_108A24C  +
mov ecx esi +
call dword ptr [eax+34h]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:SetRectEmpty  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1050DD2  +
call sub_10049D9  +
mov ecx eax +
add ecx 51Ch +
call sub_10691C0  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_1050E81  +
mov ecx offset unk_108AF60 +
call sub_1056789  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A1F3  +
jmp loc_1050E92  +
push 0  +
call sub_100A1F3  +
mov ecx offset unk_108AF60 +
call sub_10567D0  +
push dword ptr [esi+40h]  +
call sub_10049D9  +
mov ecx eax +
add ecx 51Ch +
call sub_1009E8E  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 0  +
push 0  +
push 1  +
push dword ptr [esi+20h]  +
mov edi ecx +
call ds:SetTimer  +
push [ebp+arg_4]  +
mov ecx edi +
push esi  +
call sub_10380FF  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
and dword_108A21C 0 +
push ebx  +
push esi  +
mov ebx ecx +
mov eax [ebx+34h] +
push edi  +
inc eax  +
push 4  +
and eax 0FFFFFFFEh +
pop ecx  +
cmp eax ecx +
mov [ebp+var_4] eax +
jge loc_1050F0C  +
mov [ebp+var_4] ecx +
mov eax ecx +
mov esi [ebp+arg_4] +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp+var_8] eax +
imul eax eax +
mov [ebp+var_C] eax +
mov edx [ebx] +
lea edi [esi+10h] +
mov eax [edi] +
mov [ebp+rcSrc2.right] eax +
mov [ebp+rcSrc2.left] eax +
mov eax [esi+14h] +
mov [ebp+rcSrc2.bottom] eax +
mov [ebp+rcSrc2.top] eax +
mov eax [esi+20h] +
push eax  +
mov [ebx+58h] eax +
xor eax eax +
cmp [esi+18h] eax +
push 1  +
setz al  +
mov ecx ebx +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax+40h] +
push dword ptr [eax+0Ch]  +
call dword ptr [edx+80h]  +
mov eax [ebp+var_4] +
and [ebp+arg_4] 0 +
inc eax  +
mov [ebp+var_4] eax +
mov eax [edi] +
mov [ebp+var_14] eax +
mov eax [edi+4] +
mov [ebp+var_10] eax +
call ds:rand  +
cdq   +
idiv  [ebp+var_4] +
sub edx [ebp+var_8] +
add [ebp+var_14] edx +
call ds:rand  +
cdq   +
idiv  [ebp+var_4] +
mov ecx [ebp+var_14] +
sub ecx [edi] +
sub edx [ebp+var_8] +
add [ebp+var_10] edx +
mov eax [ebp+var_10] +
sub eax [esi+14h] +
mov edx ecx +
imul edx ecx +
mov ecx eax +
imul ecx eax +
add edx ecx +
cmp edx [ebp+var_C] +
jg loc_1050F61  +
mov eax [ebp+arg_0] +
mov eax [eax+40h] +
push 0F00021h  +
push 1  +
push 1  +
push [ebp+var_10]  +
push [ebp+var_14]  +
push dword ptr [eax+0Ch]  +
call ds:PatBlt  +
mov eax [ebp+var_14] +
cmp eax [ebp+rcSrc2.left] +
jge loc_1050FD3  +
mov [ebp+rcSrc2.left] eax +
jmp loc_1050FDC  +
inc eax  +
cmp eax [ebp+rcSrc2.right] +
jle loc_1050FDC  +
mov [ebp+rcSrc2.right] eax +
mov eax [ebp+var_10] +
cmp eax [ebp+rcSrc2.top] +
jge loc_1050FE9  +
mov [ebp+rcSrc2.top] eax +
jmp loc_1050FF2  +
inc eax  +
cmp eax [ebp+rcSrc2.bottom] +
jle loc_1050FF2  +
mov [ebp+rcSrc2.bottom] eax +
inc [ebp+arg_4]  +
cmp [ebp+arg_4] 0Ah +
jl loc_1050F61  +
push dword ptr [ebx+58h]  +
mov eax [ebx] +
xor ecx ecx +
cmp [esi+18h] ecx +
mov esi [ebp+arg_0] +
setz cl  +
push 0  +
push ecx  +
mov ecx [esi+40h] +
push dword ptr [ecx+0Ch]  +
mov ecx ebx +
call dword ptr [eax+80h]  +
lea eax [ebp+rcSrc2] +
push eax  +
mov eax offset rcDst +
push eax  +
push eax  +
call ds:UnionRect  +
lea eax [ebp+rcSrc2] +
push eax  +
push dword ptr [esi+40h]  +
call sub_1005D16  +
lea eax [ebp+rcSrc2] +
push eax  +
push dword ptr [esi+40h]  +
call sub_100D173  +
push edi  +
call sub_100A8D8  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jnz loc_105106F  +
xor eax eax +
jmp loc_1051072  +
mov eax [esi+20h] +
push 1  +
push eax  +
call ds:KillTimer  +
push [ebp+arg_4]  +
mov ecx edi +
push esi  +
call sub_1050B9D  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10510A0  +
mov eax [eax+20h] +
push 1  +
push eax  +
call ds:KillTimer  +
and dword_108A238 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push 0Fh  +
mov esi ecx +
mov dword_108EE9C edi +
call ds:GetSysColor  +
push edi  +
mov ecx esi +
mov [esi+48h] eax +
call sub_100A1F3  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_4] ecx +
cmp dword_108AF04 esi +
jnz loc_10511C0  +
mov ebx ds:GetCapture +
call ebx  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp eax edi +
jz loc_105115F  +
push 1  +
call sub_1009F8B  +
mov ecx offset unk_108AEA0 +
call sub_104EE2F  +
push esi  +
mov dword_108AF0C esi +
mov dword_108AF08 esi +
mov dword_108A218 esi +
call sub_1009E55  +
cmp dword_108AF30 esi +
jz loc_1051209  +
mov ecx edi +
call sub_10303DC  +
mov dword_108AF30 esi +
jmp loc_1051209  +
cmp dword_108AF04 esi +
jnz loc_10511C0  +
call ebx  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp eax edi +
jnz loc_10511C0  +
call sub_10049FD  +
cmp dword_108AF08 esi +
jnz loc_10511C0  +
cmp dword_108AF0C esi +
jnz loc_10511C0  +
cmp dword_108A218 esi +
jz loc_10511A8  +
mov ecx offset unk_108AEA0 +
call sub_104EE2F  +
push esi  +
mov dword_108A218 esi +
call sub_1009E55  +
jmp loc_10511C0  +
cmp dword_108AF30 esi +
jz loc_10511B7  +
push 1  +
call sub_1009F8B  +
push esi  +
push dword ptr [edi+40h]  +
call sub_1005D16  +
mov ecx [ebp+var_4] +
push edi  +
call sub_1035B8A  +
push esi  +
push esi  +
push esi  +
push esi  +
push offset stru_108B3D8  +
call ds:SetRect  +
mov ecx offset unk_108AEA0 +
call sub_104EE2F  +
push esi  +
mov dword_108A218 esi +
mov dword_108AF30 esi +
mov dword_108AF0C esi +
mov dword_108AF08 esi +
mov dword_108AF04 esi +
push dword ptr [edi+40h]  +
call sub_1005D16  +
pop edi  +
mov dword_108A238 esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx stru_108AF34.left +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov ecx stru_108AF34.top +
mov [eax+4] ecx +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10023C4 +
jz loc_105125A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
call sub_1034908  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
push offset rc  +
call ds:SetRect  +
mov ecx off_108A1D8 +
mov eax [ecx] +
call dword ptr [eax+0A0h]  +
mov dword_108A238 esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+48h] +
call sub_100CAB5  +
mov dword ptr [esi] offset off_10023C4 +
pop esi  +
retn   +
***
jmp sub_104C0E6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_104A3C8 +
call sub_104C0E6  +
test byte ptr [ebp+8] 1 +
jz loc_10512E6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_104C230  +
mov dword ptr [esi] offset off_104A3C8 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 44h  +
mov eax offset loc_107FC34 +
call sub_100208C  +
push offset aInvalidVectorT  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C1F6  +
push offset dword_10832E4  +
lea eax [ebp-50h] +
push eax  +
mov dword ptr [ebp-50h] offset off_104A3C8 +
call _CxxThrowException  +
int 3  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B9A1  +
mov ecx [ebp+arg_0] +
cmp eax ecx +
ja loc_10513CF  +
call loc_1051331  +
mov eax [esi+4] +
lea eax [eax+ecx*4] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea esi [ecx+48h] +
push edi  +
mov ecx esi +
xor edi edi +
call sub_100B9A1  +
cmp [ebp+arg_0] eax +
jnb loc_1051403  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10513B6  +
mov edi [eax] +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_105129C  +
test byte ptr [ebp+8] 1 +
jz loc_1051433  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 0C6h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
push 0  +
push 0  +
push 455h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
call sub_1006239  +
test eax eax +
jz loc_105147D  +
lea ecx [eax+40h] +
jmp loc_105143F  +
xor eax eax +
retn   +
***
call sub_1006239  +
test eax eax +
jz loc_1051493  +
lea ecx [eax+40h] +
jmp loc_1051457  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov [ecx+48h] edx +
mov [eax] ecx +
push eax  +
mov [ecx+40h] eax +
call sub_1009D21  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+8] +
add eax [ecx] +
push esi  +
mov esi [ebp+arg_0] +
cdq   +
sub eax edx +
sar eax 1 +
mov [esi] eax +
mov eax [ecx+0Ch] +
add eax [ecx+4] +
cdq   +
sub eax edx +
sar eax 1 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx 0FF515780h +
and eax ecx +
sub eax ecx +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
call ds:ReleaseCapture  +
mov ecx dword_108CF00 +
test ecx ecx +
jz loc_1051521  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
and dword_108CF00 0 +
and dword_108EEB4 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
mov [ebp+var_C] ecx +
cmp dword_108A228 ebx +
jz loc_10515F5  +
push esi  +
mov esi [ecx+40h] +
push edi  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_4] ebx +
call ds:CreateCompatibleDC  +
mov edi eax +
cmp edi ebx +
jnz loc_1051572  +
push ebx  +
call ds:MessageBeep  +
jmp loc_10515F3  +
call sub_10049FD  +
push dword_108A228  +
push edi  +
call ds:SelectObject  +
mov [ebp+var_8] eax +
mov eax [esi+24h] +
cmp eax ebx +
jz loc_10515A4  +
mov eax [eax+4] +
push ebx  +
push eax  +
push edi  +
call ds:SelectPalette  +
push edi  +
mov [ebp+var_4] eax +
call ds:RealizePalette  +
push 0CC0020h  +
push ebx  +
push ebx  +
push edi  +
push dword ptr [esi+30h]  +
push dword ptr [esi+2Ch]  +
push ebx  +
push ebx  +
push dword ptr [esi+0Ch]  +
call ds:BitBlt  +
cmp [ebp+var_4] ebx +
jz loc_10515CD  +
push ebx  +
push [ebp+var_4]  +
push edi  +
call ds:SelectPalette  +
push [ebp+var_8]  +
push edi  +
call ds:SelectObject  +
push edi  +
call ds:DeleteDC  +
mov esi [ebp+var_C] +
push ebx  +
push dword ptr [esi+40h]  +
call sub_1005D16  +
push ebx  +
push dword ptr [esi+40h]  +
call sub_100D173  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
fld  ds:dbl_1013E90 +
dec eax  +
fcomp  qword ptr [ecx+50h] +
jz loc_105172A  +
dec eax  +
fnstsw  ax +
jz loc_10516A7  +
test ah 41h +
jnp loc_1051731  +
fld  ds:dbl_1009880 +
fcomp  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jnp loc_10517A5  +
fld1   +
fcomp  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jnp loc_105171F  +
fld  ds:dbl_1006830 +
fcomp  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jp loc_1051666  +
fld  ds:dbl_104A3F0 +
jmp loc_10517AB  +
fld  ds:dbl_1031558 +
fcomp  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jp loc_1051681  +
fld  ds:dbl_1009F68 +
jmp loc_10517AB  +
fld  ds:dbl_10517B8 +
fcomp  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jp loc_105169C  +
fld  ds:dbl_1010288 +
jmp loc_10517AB  +
fld  ds:dbl_10517B0 +
jmp loc_10517AB  +
test ah 41h +
jnp loc_1051731  +
fld  ds:dbl_1009880 +
fcom  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jnp loc_105175D  +
fld1   +
fcom  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jp loc_10516DF  +
fstp  st +
fstp  st +
fld  ds:dbl_1006830 +
jmp loc_10517AB  +
fld  ds:dbl_1006830 +
fcomp  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jnp loc_105178D  +
fstp  st +
fld  ds:dbl_1031558 +
fcomp  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jnp loc_10517AB  +
fstp  st +
fld  ds:dbl_10517B8 +
fcomp  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jnp loc_10517A5  +
fld  ds:dbl_100FB70 +
jmp loc_10517AB  +
fnstsw  ax +
test ah 41h +
jp loc_1051735  +
fld1   +
jmp loc_10517AB  +
fld  ds:dbl_1009880 +
fcom  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jp loc_105174F  +
fstp  st +
fld  ds:dbl_104A3E8 +
jmp loc_10517AB  +
fld1   +
fcom  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jp loc_1051767  +
fstp  st +
fstp  st +
fld  ds:dbl_1031558 +
jmp loc_10517AB  +
fld  ds:dbl_1006830 +
fcom  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jp loc_105177B  +
fstp  st(1) +
jmp loc_105178D  +
fstp  st +
fld  ds:dbl_1031558 +
fcomp  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jp loc_1051791  +
fstp  st(1) +
jmp loc_10517AB  +
fstp  st +
fld  ds:dbl_10517B8 +
fcomp  qword ptr [ecx+50h] +
fnstsw  ax +
test ah 41h +
jnp loc_10517AB  +
fstp  st +
fld  ds:dbl_1008390 +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+14h]  +
mov esi ecx +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:CreateRectRgn  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_1051801  +
xor edx edx +
jmp loc_1051804  +
mov edx [eax+4] +
mov eax [ebp+8] +
test eax eax +
jz loc_105180E  +
mov eax [eax+4] +
push dword ptr [ebp+10h]  +
push edx  +
push eax  +
push dword ptr [ecx+4]  +
call ds:CombineRgn  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jz loc_1051834  +
mov eax [eax+4] +
push 5  +
push 0  +
push eax  +
push dword ptr [ecx+4]  +
call ds:CombineRgn  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [ecx+4]  +
call ds:GetBrushOrgEx  +
mov ecx [ebp+var_8.x] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+var_8.y] +
mov [eax+4] ecx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4.y]  +
push [ebp+arg_4.x]  +
push dword ptr [ecx+4]  +
call ds:SetBrushOrgEx  +
mov ecx [ebp+arg_4.x] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4.y] +
mov [eax+4] ecx +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 0Ch  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_10518CF  +
xor eax eax +
retn   +
mov eax [ecx+8] +
sub eax edx +
push 28h  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_10518EC  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+39h] 0 +
jz loc_10518EA  +
pop ebp  +
retn 4  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_1051908  +
xor eax eax +
retn   +
mov eax [ecx+0Ch] +
sub eax edx +
push 28h  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+39h] dl +
jz loc_105192C  +
mov eax [eax+8] +
jmp loc_1051952  +
mov ecx [eax] +
cmp [ecx+39h] dl +
jnz loc_1051943  +
push ecx  +
call sub_10518E0  +
jmp loc_1051952  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_105194B  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+39h] dl +
jz loc_105193B  +
mov ecx [esi] +
cmp [ecx+39h] dl +
jnz loc_1051954  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_C] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
push edi  +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
push 0Bh  +
mov [eax+8] ecx +
pop ecx  +
lea edi [eax+0Ch] +
movs   +
mov cl [ebp+arg_10] +
pop edi  +
mov [eax+38h] cl +
mov byte ptr [eax+39h] 0 +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_10519B8  +
push esi  +
push edi  +
mov esi [ebp+arg_8] +
mov edi eax +
push 0Ah  +
add eax 28h +
pop ecx  +
movs   +
cmp eax [ebp+arg_4] +
jnz loc_10519A4  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp [ebp+arg_0] eax +
jz loc_10519E6  +
push esi  +
push edi  +
sub [ebp+arg_8] 28h +
mov edi [ebp+arg_8] +
sub eax 28h +
push 0Ah  +
pop ecx  +
mov esi eax +
movs   +
cmp eax [ebp+arg_0] +
jnz loc_10519CE  +
pop edi  +
pop esi  +
mov eax [ebp+arg_8] +
pop ebp  +
retn   +
***
push dword ptr [ecx]  +
call GdipDeleteMatrix  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
push dword ptr [esi+4]  +
call GdipSetTextureTransform  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_4] +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push ecx  +
push ecx  +
fstp  [esp+10h+var_C] +
fld  [ebp+arg_0] +
fstp  [esp+10h+var_10] +
push dword ptr [esi+4]  +
call GdipTranslateTextureTransform  +
push eax  +
mov ecx esi +
call sub_100B289  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push dword ptr [ecx]  +
call GdipDeleteGraphics  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [esi] +
xor al al +
cmp edx edi +
jnb loc_1051A80  +
inc al  +
jmp loc_1051A8B  +
jnz loc_1051A8B  +
mov eax [ecx+4] +
cmp eax [esi+4] +
setb al  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
xor eax eax +
inc eax  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
mov ecx [esi+28h] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
and dword ptr [esi+74h] 0 +
mov ecx esi +
call sub_100A5AF  +
push 0  +
mov ecx esi +
call sub_1008489  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
mov ecx [esi+28h] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
mov ecx esi +
mov dword ptr [esi+74h] 1 +
call sub_100A5AF  +
push 0  +
mov ecx esi +
call sub_1008489  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100A5AF  +
push [ebp+arg_C]  +
mov ecx [esi+28h] +
push [ebp+arg_8]  +
mov eax [ecx] +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+1Ch]  +
pop esi  +
pop ebp  +
retn 10h  +
***
push 1  +
push 0  +
push dword ptr [ecx+20h]  +
call ds:InvalidateRect  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
xor eax eax +
cmp [ebp+arg_0] eax +
push esi  +
setnz al  +
push edi  +
push 17h  +
mov esi ecx +
mov [ebp+var_20] 1Ch +
mov [ebp+var_1C] 7 +
mov [ebp+var_4] eax +
lea eax [ebp+var_20] +
push eax  +
push [ebp+var_4]  +
call ?GetScrollInfo@CWnd@@QAEHHPAUtagSCROLLINFO@@I@Z  +
mov eax [ebp+var_10] +
mov edx [ebp+arg_4] +
mov edi [ebp+var_C] +
mov ecx [ebp+var_14] +
shr eax 2 +
cmp edx 7 +
ja loc_1051BBB  +
jmp ds:off_1051C33[edx*4]  +
xor edi edi +
jmp loc_1051BBB  +
mov edi ecx +
jmp loc_1051BBB  +
add edi eax +
jmp loc_1051BBB  +
lea edi [edi+eax*4] +
jmp loc_1051BBB  +
shl eax 2 +
sub edi eax +
jmp loc_1051BBB  +
mov edi [ebp+arg_8] +
cmp edi [ebp+var_18] +
jge loc_1051BC4  +
xor edi edi +
jmp loc_1051BD0  +
sub ecx [ebp+var_10] +
lea eax [ecx+1] +
cmp edi eax +
jle loc_1051BD0  +
mov edi eax +
push 1  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
mov eax edi +
neg eax  +
cmp [ebp+arg_0] 0 +
jz loc_1051BEC  +
mov [esi+5Ch] eax +
jmp loc_1051BEF  +
mov [esi+58h] eax +
push 1  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+var_4]  +
mov ecx esi +
mov [ebp+var_1C] 4 +
mov [ebp+var_C] edi +
call ?SetScrollInfo@CWnd@@QAEHHPAUtagSCROLLINFO@@H@Z  +
mov ecx [esi+74h] +
test ecx ecx +
jz loc_1051C1B  +
push dword ptr [esi+5Ch]  +
push dword ptr [esi+58h]  +
call sub_100FDD4  +
mov ecx [esi+78h] +
test ecx ecx +
jz loc_1051C2D  +
push dword ptr [esi+5Ch]  +
push dword ptr [esi+58h]  +
call sub_100FDD4  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
mov edi [ebp+lprc] +
push edi  +
mov esi ecx +
call sub_10083F8  +
lea eax [ebp+rcSrc2] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
lea eax [ebp+rcSrc2] +
push eax  +
push edi  +
push edi  +
call ds:IntersectRect  +
push 5  +
push 5  +
push edi  +
call ds:InflateRect  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword_108AF0C 0 +
mov [ebp+var_4] ecx +
jnz loc_1051CB9  +
cmp dword_108AF08 0 +
jz locret_1051D32  +
push ebx  +
push esi  +
push edi  +
call ds:ReleaseCapture  +
mov ebx offset stru_108AF34 +
mov esi offset rcSrc2 +
mov edi ebx +
movs   +
movs   +
movs   +
xor eax eax +
movs   +
push eax  +
mov dword_108AF0C eax +
mov dword_108AF08 eax +
mov dword_108A218 eax +
call sub_1009E55  +
push offset unk_108AEA0  +
mov ecx offset unk_108BCB8 +
call sub_104F4F4  +
mov eax stru_108AF34.right +
mov esi ebx +
mov edi offset stru_108A338 +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_4] +
inc eax  +
inc stru_108A338.bottom  +
mov ecx esi +
mov stru_108A338.right eax +
call sub_1051535  +
push 0  +
push dword ptr [esi+40h]  +
call sub_1005D16  +
and dword_108AF30 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_108AF0C +
sub esp 10h +
push ebx  +
xor ebx ebx +
push edi  +
mov edi ecx +
mov dword_108AEF8 eax +
cmp eax ebx +
jz loc_1051D7D  +
push esi  +
mov esi [edi+40h] +
push ebx  +
call sub_1009F8B  +
mov eax [esi+2Ch] +
mov [ebp+var_8] eax +
mov eax [esi+30h] +
mov [ebp+var_4] eax +
lea eax [ebp+var_10] +
push eax  +
mov ecx edi +
mov [ebp+var_10.unused] ebx +
mov [ebp+var_C] ebx +
call sub_100A226  +
pop esi  +
cmp [ebp+arg_0] 100h +
jz loc_1051D8C  +
call ds:ReleaseCapture  +
push ebx  +
mov dword_108AF0C ebx +
mov dword_108AF08 ebx +
mov dword_108A218 ebx +
call sub_1009E55  +
push ebx  +
push dword ptr [edi+40h]  +
call sub_1005D16  +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
call sub_100208C  +
aaa   +
pop ds  +
mov eax ds:7C7C46EEh +
inc ebx  +
mov ss [ebp+var_4C+1] +
and [edx] esp +
mov dl 92h +
xchg eax ebx +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push edi  +
mov edi ecx +
push 0E120h  +
mov [ebp+var_8] edi +
call sub_1036A09  +
test eax eax +
jnz loc_1052083  +
push ebx  +
mov ebx [edi+40h] +
push esi  +
mov esi off_108A1D4 +
mov eax [esi] +
push 5  +
mov ecx esi +
call dword ptr [eax+68h]  +
test al al +
jz loc_1051ED2  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+40h]  +
jmp loc_1052081  +
push dword_108A1C8  +
call ds:CreateSolidBrush  +
xor esi esi +
mov [ebp+var_4] eax +
cmp eax esi +
jnz loc_1051EF8  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
jmp loc_1052081  +
call sub_10049FD  +
cmp dword_108AF30 esi +
jnz loc_1051F19  +
push dword ptr [ebx+30h]  +
lea eax [ebp+rcSrc2] +
push dword ptr [ebx+2Ch]  +
push esi  +
push esi  +
push eax  +
call ds:SetRect  +
jmp loc_1051F30  +
mov esi offset stru_108A338 +
lea edi [ebp+rcSrc2] +
movs   +
movs   +
movs   +
movs   +
dec dword ptr [ebp-14h]  +
dec dword ptr [ebp-10h]  +
mov edi [ebp+var_8] +
xor esi esi +
mov [ebp+var_8] esi +
cmp dword_108AF30 esi +
jz loc_1051F4F  +
cmp dword_108AEF4 esi +
jnz loc_1051F4F  +
cmp dword_108AF00 esi +
jz loc_1051FF0  +
push dword ptr [edi+40h]  +
mov [ebp+var_8] 1 +
call sub_100D08B  +
mov ecx edi +
call sub_10075C5  +
test eax eax +
jz loc_1051FB3  +
push stru_108AF34.top  +
mov esi ds:OffsetRgn +
push stru_108AF34.left  +
push dword_108AEB0  +
call esi  +
test eax eax +
jz loc_1051FEE  +
push [ebp+var_4]  +
push dword_108AEB0  +
push dword ptr [ebx+0Ch]  +
call ds:FillRgn  +
mov eax stru_108AF34.top +
neg eax  +
push eax  +
mov eax stru_108AF34.left +
neg eax  +
push eax  +
push dword_108AEB0  +
call esi  +
jmp loc_1051FEE  +
push [ebp+var_4]  +
mov esi ds:SelectObject +
push dword ptr [ebx+0Ch]  +
call esi  +
mov [ebp+var_C] eax +
mov eax [ebp-10h] +
sub eax [ebp-18h] +
push 0F00021h  +
push eax  +
mov eax [ebp-14h] +
sub eax [ebp+rcSrc2.unused] +
push eax  +
push dword ptr [ebp-18h]  +
push [ebp+rcSrc2.unused]  +
push dword ptr [ebx+0Ch]  +
call ds:PatBlt  +
push [ebp+var_C]  +
push dword ptr [ebx+0Ch]  +
call esi  +
xor esi esi +
lea eax [ebp+rcSrc2] +
push eax  +
push dword ptr [edi+40h]  +
call sub_1005D16  +
lea eax [ebp+rcSrc2] +
push eax  +
push dword ptr [edi+40h]  +
call sub_100D173  +
cmp [ebp+var_8] esi +
jz loc_1052018  +
lea eax [ebp+rcSrc2] +
push eax  +
mov ecx edi +
call sub_100A226  +
push dword ptr [edi+40h]  +
call sub_100D2D1  +
push [ebp+var_4]  +
call ds:DeleteObject  +
cmp dword_108AF30 esi +
jz loc_1052081  +
cmp dword_108AEFC esi +
jz loc_105204B  +
push offset rcSrc2  +
mov ecx edi +
mov dword_108AEFC esi +
call sub_100A226  +
push esi  +
mov dword_108AF44 esi +
mov dword_108AF48 esi +
mov dword_108AF0C esi +
mov dword_108AF08 esi +
mov dword_108A218 esi +
call sub_1009E55  +
push esi  +
push dword_108AF30  +
call sub_1005D16  +
mov dword_108AF30 esi +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn   +
***
sti   +
jmp off_108A1D4[ecx]  +
***
cmp dword ptr [eax+40h] 25Bh +
jnz loc_10520D4  +
xor ecx ecx +
cmp dword_108AF14 ecx +
mov esi eax +
setz cl  +
mov dword_108AF14 ecx +
test esi esi +
jz loc_10520E4  +
push offset off_104A85C  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_10520E4  +
mov ecx esi +
call sub_1062ED1  +
jmp loc_10520E4  +
xor eax eax +
cmp dword_108AF10 eax +
setz al  +
mov dword_108AF10 eax +
push dword_108A1C8  +
mov ecx offset unk_108AEA0 +
call sub_103603F  +
push offset stru_108AF34  +
mov ecx edi +
call sub_1036C4C  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+39h] 0 +
jnz loc_1052124  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1052138  +
mov [ecx+4] eax +
jmp loc_1052146  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_1052143  +
mov [ecx] eax +
jmp loc_1052146  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push esi  +
mov esi [eax+4] +
push edi  +
mov edi eax +
jmp loc_105217E  +
push [ebp+arg_0]  +
lea eax [esi+0Ch] +
push eax  +
call sub_1051A65  +
test al al +
jz loc_105217A  +
mov esi [esi+8] +
jmp loc_105217E  +
mov edi esi +
mov esi [esi] +
cmp byte ptr [esi+39h] 0 +
jz loc_1052165  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10521B1  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_105195B  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10519BF  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1052246  +
push esi  +
mov esi [ebp+arg_4] +
push 0Ah  +
pop ecx  +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push 0  +
push [ebp+arg_0]  +
push 1  +
push [ebp+arg_8]  +
push dword ptr [esi]  +
call GdipSetImageAttributesColorMatrix  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 0  +
call sub_1051B52  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 1  +
call sub_1051B52  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [ebp+var_4] esi +
cmp dword_108AF30 edi +
jz loc_105236C  +
cmp dword_108AEF4 edi +
jz loc_105236C  +
cmp [ebp+arg_0] edi +
jz loc_10522E5  +
call sub_103B9F1  +
push ebx  +
push dword ptr [esi+40h]  +
call sub_100D08B  +
mov eax off_108A1D4 +
mov dword_108AEF4 edi +
mov dword_108AEFC 1 +
mov ebx offset rcSrc2 +
mov esi offset stru_108A338 +
mov edi ebx +
movs   +
movs   +
movs   +
movs   +
cmp dword ptr [eax+40h] 25Bh +
jnz loc_1052325  +
call sub_10049FD  +
and [ebp+arg_4] 0 +
cmp [ebp+arg_4] 0 +
jz loc_105236B  +
call sub_10049FD  +
push dword_108A1C8  +
mov esi [ebp+var_4] +
mov eax [esi+40h] +
push ebx  +
push dword ptr [eax+0Ch]  +
call sub_10502A3  +
push ebx  +
push dword ptr [esi+40h]  +
call sub_100D173  +
push ebx  +
push dword ptr [esi+40h]  +
call sub_1005D16  +
push ebx  +
mov ecx esi +
call sub_100A226  +
push offset stru_108AF34  +
mov ecx esi +
call sub_1036C4C  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
jmp sub_103D2A7  +
***
fld  qword ptr [eax+50h] +
fild  dword ptr [ebp-28h] +
fmul st st(1) +
fchs   +
call _ftol2_sse  +
fimul  dword ptr [ebp-2Ch] +
mov edi eax +
fchs   +
call _ftol2_sse  +
push edi  +
push eax  +
push dword_108AEA8  +
call esi  +
cmp eax ebx +
jz loc_10524AE  +
mov eax [ebp-28h] +
mov ecx [ebp-2Ch] +
neg eax  +
push eax  +
neg ecx  +
push ecx  +
push dword_108AEB0  +
call esi  +
cmp eax ebx +
jz loc_10524AE  +
push 25Ah  +
call sub_1035D20  +
push ebx  +
sub esp 10h +
lea eax [ebp-2Ch] +
mov ecx esp +
mov [ebp-14h] esp +
push eax  +
call sub_100B3A5  +
mov ecx [ebp-10h] +
mov eax [ecx+40h] +
push dword ptr [eax+0Ch]  +
call sub_10362A0  +
cmp eax ebx +
jz loc_10524AE  +
lea eax [ebp-2Ch] +
push eax  +
push offset stru_108AF34  +
call ds:CopyRect  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov dword ptr [ebp-1Ch] offset off_102DD4C +
call sub_1002407  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi dword_108CF00 +
push edi  +
add esi 4 +
lea edi [ebp+rc2] +
movs   +
movs   +
movs   +
lea eax [ebp+rc2] +
mov ebx ecx +
push eax  +
mov [ebp+var_4] ebx +
movs   +
call sub_100872F  +
mov eax [ebp+arg_0] +
sub eax 200h +
jz loc_105262F  +
dec eax  +
dec eax  +
jz loc_1052526  +
sub eax 1FEh +
jnz loc_105280B  +
mov ecx ebx +
call sub_105150A  +
jmp loc_105280B  +
mov eax [ebx+40h] +
cmp eax dword_108AF30 +
jz loc_1052545  +
mov eax [ebx+70h] +
test eax eax +
jz loc_1052545  +
push 1  +
push 0  +
push dword ptr [eax+20h]  +
call ds:InvalidateRect  +
mov ecx ebx +
call sub_105150A  +
cmp dword_108AF30 0 +
jnz loc_10525F3  +
call sub_10049D9  +
mov ecx eax +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
test eax eax +
jnz loc_105256D  +
xor esi esi +
jmp loc_1052570  +
mov esi [eax+40h] +
test esi esi +
jz loc_105261D  +
push 1  +
mov ebx offset unk_108B4B8 +
push offset aPropertyEdit  +
mov ecx ebx +
call sub_100D1F5  +
push 10h  +
call ds:GetKeyState  +
mov edi 20Dh +
test ax ax +
jge loc_10525AD  +
mov ecx [esi+0ECh] +
push 0  +
push 1  +
push edi  +
call sub_104CB3C  +
mov eax [ebp+rc2.right] +
mov ecx [ebp+rc2.bottom] +
sub ecx [ebp+rc2.top] +
sub eax [ebp+rc2.left] +
push offset dword_108B24C  +
mov dword_108B24C eax +
mov dword_108B250 ecx +
add esi 0ECh +
mov ecx [esi] +
push 15Eh  +
call sub_103584E  +
mov ecx [esi] +
push 0  +
push 0  +
push edi  +
call sub_104CB3C  +
mov ecx ebx +
call sub_100D848  +
mov ebx [ebp+var_4] +
jmp loc_105261D  +
call sub_10049FD  +
mov ecx [ebp+rc2.bottom] +
sub ecx [ebp+rc2.top] +
mov eax [ebp+rc2.right] +
sub eax [ebp+rc2.left] +
push 1  +
push ecx  +
push eax  +
mov ecx offset unk_108AEA0 +
call sub_104EF6B  +
lea eax [ebp+rc2] +
push eax  +
mov ecx ebx +
call sub_1036C4C  +
push 1  +
push 0  +
push dword ptr [ebx+20h]  +
call ds:InvalidateRect  +
jmp loc_105280B  +
mov eax dword_108EEB4 +
add eax 0FFFFFFFDh +
cmp eax 7 +
ja loc_10527B5  +
jmp ds:off_1052812[eax*4]  +
mov eax [ebp+arg_4] +
mov ecx [ebp+rc2.right] +
cmp eax ecx +
mov [ebp+rc2.left] eax +
jl loc_105265A  +
lea eax [ecx-1] +
mov [ebp+rc2.left] eax +
mov esi [ebp+rc2.bottom] +
cmp dword_108AF30 0 +
jnz loc_10527D4  +
mov edi [ebx+40h] +
cmp dword ptr [edi+4Ch] 0 +
jz loc_10526B8  +
mov ebx [edi+50h] +
cmp ebx 1 +
jz loc_1052694  +
cmp ebx [edi+2Ch] +
jg loc_1052694  +
mov eax ebx +
cdq   +
sub eax edx +
sar eax 1 +
add eax ecx +
cdq   +
idiv  ebx +
imul eax ebx +
mov ecx eax +
mov [ebp+rc2.right] ecx +
mov ebx [edi+54h] +
cmp ebx 1 +
jz loc_10526B5  +
cmp ebx [edi+30h] +
jg loc_10526B5  +
mov eax ebx +
cdq   +
sub eax edx +
sar eax 1 +
add eax esi +
cdq   +
idiv  ebx +
imul eax ebx +
mov esi eax +
mov [ebp+rc2.bottom] esi +
mov ebx [ebp+var_4] +
sub ecx [ebp+rc2.left] +
sub esi [ebp+rc2.top] +
lea eax [ebp+var_8] +
mov [ebp+var_8] ecx +
mov ecx dword_108A1EC +
push eax  +
mov [ebp+var_4] esi +
call sub_102E7F6  +
jmp loc_10527EF  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+rc2.left] +
mov [ebp+rc2.right] ecx +
jg loc_105265A  +
mov ecx [ebp+rc2.left] +
inc ecx  +
mov [ebp+rc2.right] ecx +
jmp loc_105265A  +
mov esi [ebp+arg_8] +
mov eax [ebp+rc2.top] +
cmp esi eax +
mov ecx [ebp+rc2.right] +
mov [ebp+rc2.bottom] esi +
jg loc_105265D  +
lea esi [eax+1] +
mov [ebp+rc2.bottom] esi +
jmp loc_105265D  +
mov eax [ebp+arg_8] +
mov esi [ebp+rc2.bottom] +
cmp eax esi +
mov edx [ebp+arg_4] +
mov [ebp+rc2.left] edx +
mov [ebp+rc2.top] eax +
jl loc_105272B  +
lea eax [esi-1] +
mov [ebp+rc2.top] eax +
mov ecx [ebp+rc2.right] +
cmp edx ecx +
jl loc_105265D  +
lea eax [ecx-1] +
mov [ebp+rc2.left] eax +
jmp loc_105265D  +
mov eax [ebp+arg_8] +
mov esi [ebp+rc2.bottom] +
cmp eax esi +
mov ecx [ebp+arg_4] +
mov [ebp+rc2.top] eax +
mov [ebp+rc2.right] ecx +
jl loc_105275A  +
lea eax [esi-1] +
mov [ebp+rc2.top] eax +
cmp ecx [ebp+rc2.left] +
jg loc_105265D  +
mov ecx [ebp+rc2.left] +
inc ecx  +
mov [ebp+rc2.right] ecx +
jmp loc_105265D  +
mov eax [ebp+arg_4] +
mov ecx [ebp+rc2.right] +
cmp eax ecx +
mov esi [ebp+arg_8] +
mov [ebp+rc2.left] eax +
mov [ebp+rc2.bottom] esi +
jl loc_1052788  +
lea eax [ecx-1] +
mov [ebp+rc2.left] eax +
cmp esi [ebp+rc2.top] +
jg loc_105265D  +
mov esi [ebp+rc2.top] +
inc esi  +
jmp loc_105270A  +
mov ecx [ebp+arg_4] +
mov eax [ebp+rc2.left] +
cmp ecx eax +
mov esi [ebp+arg_8] +
mov [ebp+rc2.right] ecx +
mov [ebp+rc2.bottom] esi +
jg loc_1052788  +
lea ecx [eax+1] +
mov [ebp+rc2.right] ecx +
jmp loc_1052788  +
mov eax [ebp+arg_8] +
mov esi [ebp+rc2.bottom] +
cmp eax esi +
mov ecx [ebp+rc2.right] +
mov [ebp+rc2.top] eax +
jl loc_105265D  +
lea eax [esi-1] +
mov [ebp+rc2.top] eax +
jmp loc_105265D  +
sub ecx [ebp+rc2.left] +
sub esi [ebp+rc2.top] +
lea eax [ebp+var_8] +
mov [ebp+var_8] ecx +
mov ecx dword_108A1EC +
push eax  +
mov [ebp+var_4] esi +
call sub_103560A  +
lea eax [ebp+rc2] +
push eax  +
mov ecx ebx +
call sub_1008309  +
mov ecx dword_108CF00 +
push 1  +
lea eax [ebp+rc2] +
push eax  +
call sub_105E4BB  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_108AF08 0 +
push ebx  +
mov ebx ecx +
jz loc_1052851  +
push 1  +
push 0  +
call sub_10522B4  +
mov eax dword_108A358 +
mov ecx stru_108AF34.top +
mov edx [ebp+arg_4] +
mov dword_108A350 eax +
mov eax dword_108A35C +
push esi  +
mov esi [ebp+arg_8] +
mov dword_108A354 eax +
mov eax stru_108AF34.left +
neg ecx  +
neg eax  +
add ecx esi +
sub ecx dword_108AF2C +
push edi  +
add eax edx +
sub eax dword_108AF28 +
push ecx  +
push eax  +
mov dword_108A35C esi +
mov esi ds:OffsetRect +
mov edi offset stru_108AF34 +
push edi  +
mov dword_108A358 edx +
call esi  +
mov eax [ebx+40h] +
mov eax [eax+2Ch] +
mov ecx stru_108AF34.left +
cmp ecx eax +
jle loc_10528C0  +
push 0  +
sub eax ecx +
push eax  +
push edi  +
call esi  +
mov eax [ebx+40h] +
mov eax [eax+30h] +
mov ecx stru_108AF34.top +
cmp ecx eax +
jle loc_10528D8  +
sub eax ecx +
push eax  +
push 0  +
push edi  +
call esi  +
mov eax stru_108AF34.right +
test eax eax +
jge loc_10528E9  +
push 0  +
neg eax  +
push eax  +
push edi  +
call esi  +
mov eax stru_108AF34.bottom +
test eax eax +
jge loc_10528FA  +
neg eax  +
push eax  +
push 0  +
push edi  +
call esi  +
cmp dword_108AF0C 0 +
pop edi  +
pop esi  +
jz loc_105291D  +
push 1  +
push stru_108AF34.top  +
push stru_108AF34.left  +
push dword ptr [ebx+40h]  +
call sub_1050559  +
jmp loc_1052930  +
push stru_108AF34.top  +
mov ecx ebx +
push stru_108AF34.left  +
call sub_10354F7  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
call sub_100208C  +
mov ebx ecx +
mov esi [ebp+8] +
mov eax [esi] +
push 0C0C0C0h  +
mov ecx esi +
call dword ptr [eax+38h]  +
mov eax [esi] +
push 808080h  +
mov ecx esi +
call dword ptr [eax+34h]  +
call sub_104D931  +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov esi [ebx+40h] +
fild  dword ptr [esi+30h] +
mov [ebp-18h] eax +
fmul  qword ptr [ebx+50h] +
fld1   +
fadd st(1) st +
fxch  st(1) +
call _ftol2_sse  +
fild  dword ptr [esi+2Ch] +
mov [ebp-10h] eax +
fmul  qword ptr [ebx+50h] +
faddp st(1) st +
call _ftol2_sse  +
mov esi [ebp+0Ch] +
lea edi [ebp-80h] +
movs   +
movs   +
movs   +
mov [ebp-14h] eax +
lea eax [ebp-80h] +
push eax  +
mov ecx ebx +
movs   +
call sub_1035FD3  +
mov edx dword_108B1D0 +
fild  dword ptr [ebp-80h] +
push edx  +
mov ecx ebx +
fstp  qword ptr [ebp-28h] +
fild  dword ptr [ebp-7Ch] +
fstp  qword ptr [ebp-30h] +
call sub_10515FD  +
push dword ptr [ebx+40h]  +
fstp  qword ptr [ebp-70h] +
push 1  +
push edx  +
call sub_1010340  +
fstp  qword ptr [ebp-68h] +
push dword ptr [ebx+40h]  +
xor edi edi +
push edi  +
push dword_108B1D0  +
call sub_1010340  +
fld  qword ptr [ebx+50h] +
fmul  qword ptr [ebp-70h] +
fld  qword ptr [ebp-68h] +
fmul st st(1) +
fstp  qword ptr [ebp-38h] +
fmulp st(1) st +
fstp  qword ptr [ebp-40h] +
fld  qword ptr [ebp-28h] +
fdiv  qword ptr [ebp-38h] +
call _ftol2_sse  +
mov esi [ebp+8] +
mov [ebp+0Ch] eax +
fild  dword ptr [ebp+0Ch] +
lea eax [ebp-68h] +
push eax  +
mov ecx esi +
fmul  qword ptr [ebp-38h] +
fstp  qword ptr [ebp-58h] +
fild  dword ptr [ebp-78h] +
fstp  qword ptr [ebp-60h] +
call sub_105184B  +
fld  qword ptr [ebp-30h] +
fchs   +
fstp  qword ptr [ebp-20h] +
fld  qword ptr [ebp-28h] +
fchs   +
fstp  qword ptr [ebp-50h] +
fld  qword ptr [ebp-20h] +
call _ftol2_sse  +
fld  qword ptr [ebp-50h] +
push eax  +
call _ftol2_sse  +
push eax  +
lea eax [ebp-70h] +
push eax  +
mov ecx esi +
call sub_1009A3F  +
push dword ptr [esi+4]  +
lea ecx [ebp-48h] +
call sub_100DA72  +
lea ecx [ebp-70h] +
mov [ebp-4] edi +
call sub_1030B58  +
mov byte ptr [ebp-4] 1 +
call sub_104D9EC  +
mov ecx eax +
lea eax [ebp-70h] +
push eax  +
mov [ebp+8] ecx +
call sub_10519FD  +
fld  qword ptr [ebp-20h] +
fstp  dword ptr [ebp+0Ch] +
push edi  +
fld  dword ptr [ebp+0Ch] +
push ecx  +
push ecx  +
mov ecx [ebp+8] +
fstp  dword ptr [esp+4] +
fld  qword ptr [ebp-50h] +
fstp  dword ptr [ebp+0Ch] +
fld  dword ptr [ebp+0Ch] +
fstp  dword ptr [esp+0] +
call sub_1051A24  +
fld  qword ptr [ebp-58h] +
mov edi ds:PatBlt +
fstp  qword ptr [ebp-20h] +
fld  qword ptr [ebp-60h] +
fcomp  qword ptr [ebp-58h] +
jmp loc_1052B1A  +
fld  ds:dbl_1013E90 +
fcomp  qword ptr [ebx+50h] +
fnstsw  ax +
fld  qword ptr [ebp-20h] +
fsub  qword ptr [ebp-28h] +
test ah 41h +
jnz loc_1052AF4  +
cmp dword ptr [ebx+80h] 1 +
jz loc_1052AF4  +
push dword ptr [ebp-10h]  +
push 1  +
push 0  +
call _ftol2_sse  +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-48h] +
call sub_100B903  +
jmp loc_1052B0B  +
push 0F00021h  +
push dword ptr [ebp-10h]  +
push 1  +
push 0  +
call _ftol2_sse  +
push eax  +
push dword ptr [esi+4]  +
call edi  +
fld  qword ptr [ebp-38h] +
fadd  qword ptr [ebp-20h] +
fstp  qword ptr [ebp-20h] +
fld  qword ptr [ebp-60h] +
fcomp  qword ptr [ebp-20h] +
fnstsw  ax +
test ah 1 +
jz loc_1052ABB  +
fild  dword ptr [ebp-74h] +
fstp  qword ptr [ebp-58h] +
fld  qword ptr [ebp-30h] +
fdiv  qword ptr [ebp-40h] +
call _ftol2_sse  +
mov [ebp+0Ch] eax +
fild  dword ptr [ebp+0Ch] +
fmul  qword ptr [ebp-40h] +
fst  qword ptr [ebp-60h] +
fld  qword ptr [ebp-58h] +
fcomp  st(1) +
fnstsw  ax +
test ah 1 +
jnz loc_1052B9F  +
fld  ds:dbl_1013E90 +
fcomp  qword ptr [ebx+50h] +
fnstsw  ax +
fsub  qword ptr [ebp-30h] +
test ah 41h +
jnz loc_1052B80  +
cmp dword ptr [ebx+80h] 1 +
jz loc_1052B80  +
push 1  +
push dword ptr [ebp-14h]  +
call _ftol2_sse  +
push eax  +
push 0  +
push dword ptr [ebp+8]  +
lea ecx [ebp-48h] +
call sub_100B903  +
jmp loc_1052B97  +
push 0F00021h  +
push 1  +
push dword ptr [ebp-14h]  +
call _ftol2_sse  +
push eax  +
push 0  +
push dword ptr [esi+4]  +
call edi  +
fld  qword ptr [ebp-40h] +
fadd  qword ptr [ebp-60h] +
jmp loc_1052B3B  +
push dword ptr [ebp-64h]  +
fstp  st +
lea eax [ebp-68h] +
push dword ptr [ebp-68h]  +
mov ecx esi +
push eax  +
call sub_1051876  +
push dword ptr [ebp-18h]  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push dword ptr [ebp-70h]  +
call GdipDeleteMatrix  +
push dword ptr [ebp-48h]  +
call GdipDeleteGraphics  +
call sub_1002061  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
mov ebx off_108A1D4 +
mov eax [ebx] +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+40h] +
push 3  +
mov ecx ebx +
mov [ebp-8] esi +
mov [ebp-4] edi +
call dword ptr [eax+68h]  +
test al al +
jz loc_1052C11  +
mov eax [ebx] +
push 1  +
push esi  +
mov ecx ebx +
call dword ptr [eax+70h]  +
jmp loc_1052E53  +
call sub_10049FD  +
xor ebx ebx +
cmp dword_108AF30 ebx +
jnz loc_1052C3C  +
cmp dword_108A218 ebx +
jnz loc_1052C3C  +
push dword ptr [edi+30h]  +
lea eax [ebp-20h] +
push dword ptr [edi+2Ch]  +
push ebx  +
push ebx  +
push eax  +
call ds:SetRect  +
jmp loc_1052C5F  +
push 1  +
push 1  +
mov ecx esi +
call sub_10522B4  +
mov esi offset stru_108A338 +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
movs   +
dec dword ptr [ebp-18h]  +
dec dword ptr [ebp-14h]  +
mov edi [ebp-4] +
mov esi [ebp-8] +
cmp dword_108AF30 ebx +
jnz loc_1052CDE  +
cmp dword_108A218 ebx +
jnz loc_1052CDE  +
push dword ptr [esi+40h]  +
call sub_100D08B  +
push 3  +
push dword ptr [edi+0Ch]  +
call ds:SetStretchBltMode  +
mov ecx [ebp-14h] +
sub ecx [ebp-1Ch] +
mov eax [ebp-18h] +
mov edx [ebp-20h] +
mov edi [edi+0Ch] +
push ecx  +
sub edx eax +
push edx  +
push dword ptr [ebp-1Ch]  +
lea edx [eax-1] +
sub eax [ebp-20h] +
push edx  +
push edi  +
push ecx  +
push eax  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-20h]  +
push edi  +
call sub_10098C4  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [esi+40h]  +
call sub_1005D16  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [esi+40h]  +
call sub_100D173  +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
call sub_100A226  +
push dword ptr [esi+40h]  +
call sub_100D2D1  +
jmp loc_1052E53  +
push ebx  +
mov edi offset unk_108AEB4 +
push edi  +
mov ecx esi +
call sub_1009365  +
push 3  +
mov ecx edi +
mov [ebp-4] eax +
call ?SetStretchBltMode@CDC@@QAEHH@Z  +
mov eax dword_108AECC +
mov ecx dword_108AED0 +
push ecx  +
mov edx eax +
neg edx  +
push edx  +
push ebx  +
lea edx [eax-1] +
push edx  +
mov edx dword_108AEB8 +
push edx  +
push ecx  +
push eax  +
push ebx  +
push ebx  +
push edx  +
call sub_10098C4  +
mov eax dword_108AECC +
mov ecx dword_108AED0 +
push ecx  +
mov edx eax +
neg edx  +
push edx  +
push ebx  +
lea edx [eax-1] +
push edx  +
mov edx dword_108AED8 +
push edx  +
push ecx  +
push eax  +
push ebx  +
push ebx  +
push edx  +
call sub_10098C4  +
cmp [ebp-4] ebx +
jz loc_1052D56  +
push ebx  +
push dword ptr [ebp-4]  +
mov ecx edi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
cmp dword_108AF50 ebx +
jz loc_1052E47  +
push 10h  +
mov [ebp-4] ebx +
call GdipAlloc  +
mov edi eax +
cmp edi ebx +
jz loc_1052D95  +
mov ecx dword_108AF4C +
call sub_100CD8C  +
push eax  +
push dword_108AF58  +
mov ecx edi +
push dword_108AF54  +
call sub_100B2C5  +
mov edi eax +
jmp loc_1052D97  +
xor edi edi +
push edi  +
lea ecx [ebp-10h] +
call sub_100B8C4  +
push 1  +
lea ecx [ebp-10h] +
call sub_103094A  +
push ebx  +
lea ecx [ebp-10h] +
call sub_100DAAA  +
mov ecx edi +
call sub_100CFB1  +
mov ecx edi +
mov [ebp-38h] eax +
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
call sub_100CFE8  +
mov ecx edi +
mov [ebp-8] eax +
call sub_100CFB1  +
mov [ebp-28h] eax +
mov eax [ebp-8] +
mov [ebp-24h] eax +
mov eax dword_108AF4C +
cmp eax ebx +
jz loc_1052DEE  +
mov eax [eax+4] +
jmp loc_1052DF0  +
xor eax eax +
push 3  +
lea ecx [ebp-38h] +
push ecx  +
push eax  +
push dword ptr [ebp-10h]  +
call GdipDrawImagePointsI  +
push dword ptr [ebp-10h]  +
call GdipDeleteGraphics  +
lea eax [ebp-4] +
push eax  +
lea eax [ebp-8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-8] 0FF000000h +
call sub_1010018  +
mov ecx dword_108AF4C +
cmp ecx ebx +
jz loc_1052E2D  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
push dword_108AF50  +
mov dword_108AF4C edi +
call ds:DeleteObject  +
mov eax [ebp-4] +
mov dword_108AF50 eax +
push offset stru_108AF34  +
mov ecx esi +
call sub_1036C4C  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
mov ebx off_108A1D4 +
mov eax [ebx] +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+40h] +
push 3  +
mov ecx ebx +
mov [ebp-8] esi +
mov [ebp-4] edi +
call dword ptr [eax+68h]  +
test al al +
jz loc_1052E95  +
mov eax [ebx] +
push 2  +
push esi  +
mov ecx ebx +
call dword ptr [eax+70h]  +
jmp loc_10530D7  +
call sub_10049FD  +
xor ebx ebx +
cmp dword_108AF30 ebx +
jnz loc_1052EC0  +
cmp dword_108A218 ebx +
jnz loc_1052EC0  +
push dword ptr [edi+30h]  +
lea eax [ebp-20h] +
push dword ptr [edi+2Ch]  +
push ebx  +
push ebx  +
push eax  +
call ds:SetRect  +
jmp loc_1052EE3  +
push 1  +
push 1  +
mov ecx esi +
call sub_10522B4  +
mov esi offset stru_108A338 +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
movs   +
dec dword ptr [ebp-18h]  +
dec dword ptr [ebp-14h]  +
mov edi [ebp-4] +
mov esi [ebp-8] +
cmp dword_108AF30 ebx +
jnz loc_1052F62  +
cmp dword_108A218 ebx +
jnz loc_1052F62  +
push dword ptr [esi+40h]  +
call sub_100D08B  +
push 3  +
push dword ptr [edi+0Ch]  +
call ds:SetStretchBltMode  +
mov eax [ebp-14h] +
mov edx [ebp-1Ch] +
mov ecx [ebp-18h] +
sub ecx [ebp-20h] +
mov edi [edi+0Ch] +
sub edx eax +
push edx  +
push ecx  +
lea edx [eax-1] +
sub eax [ebp-1Ch] +
push edx  +
push dword ptr [ebp-20h]  +
push edi  +
push eax  +
push ecx  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-20h]  +
push edi  +
call sub_10098C4  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [esi+40h]  +
call sub_1005D16  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [esi+40h]  +
call sub_100D173  +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
call sub_100A226  +
push dword ptr [esi+40h]  +
call sub_100D2D1  +
jmp loc_10530D7  +
push ebx  +
mov edi offset unk_108AEB4 +
push edi  +
mov ecx esi +
call sub_1009365  +
push 3  +
mov ecx edi +
mov [ebp-4] eax +
call ?SetStretchBltMode@CDC@@QAEHH@Z  +
mov eax dword_108AED0 +
mov ecx eax +
neg ecx  +
push ecx  +
mov ecx dword_108AECC +
push ecx  +
lea edx [eax-1] +
push edx  +
mov edx dword_108AEB8 +
push ebx  +
push edx  +
push eax  +
push ecx  +
push ebx  +
push ebx  +
push edx  +
call sub_10098C4  +
mov eax dword_108AED0 +
mov ecx eax +
neg ecx  +
push ecx  +
mov ecx dword_108AECC +
push ecx  +
lea edx [eax-1] +
push edx  +
mov edx dword_108AED8 +
push ebx  +
push edx  +
push eax  +
push ecx  +
push ebx  +
push ebx  +
push edx  +
call sub_10098C4  +
cmp [ebp-4] ebx +
jz loc_1052FDA  +
push ebx  +
push dword ptr [ebp-4]  +
mov ecx edi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
cmp dword_108AF50 ebx +
jz loc_10530CB  +
push 10h  +
mov [ebp-4] ebx +
call GdipAlloc  +
mov edi eax +
cmp edi ebx +
jz loc_1053019  +
mov ecx dword_108AF4C +
call sub_100CD8C  +
push eax  +
push dword_108AF58  +
mov ecx edi +
push dword_108AF54  +
call sub_100B2C5  +
mov edi eax +
jmp loc_105301B  +
xor edi edi +
push edi  +
lea ecx [ebp-10h] +
call sub_100B8C4  +
push 1  +
lea ecx [ebp-10h] +
call sub_103094A  +
push ebx  +
lea ecx [ebp-10h] +
call sub_100DAAA  +
mov ecx edi +
call sub_100CFE8  +
mov ecx edi +
mov [ebp-38h] ebx +
mov [ebp-34h] eax +
call sub_100CFE8  +
mov ecx edi +
mov [ebp-8] eax +
call sub_100CFB1  +
mov [ebp-30h] eax +
mov eax [ebp-8] +
mov [ebp-2Ch] eax +
mov eax dword_108AF4C +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
cmp eax ebx +
jz loc_1053072  +
mov eax [eax+4] +
jmp loc_1053074  +
xor eax eax +
push 3  +
lea ecx [ebp-38h] +
push ecx  +
push eax  +
push dword ptr [ebp-10h]  +
call GdipDrawImagePointsI  +
push dword ptr [ebp-10h]  +
call GdipDeleteGraphics  +
lea eax [ebp-4] +
push eax  +
lea eax [ebp-8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-8] 0FF000000h +
call sub_1010018  +
mov ecx dword_108AF4C +
cmp ecx ebx +
jz loc_10530B1  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
push dword_108AF50  +
mov dword_108AF4C edi +
call ds:DeleteObject  +
mov eax [ebp-4] +
mov dword_108AF50 eax +
push offset stru_108AF34  +
mov ecx esi +
call sub_1036C4C  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
xor eax eax +
push ebx  +
mov ebx ecx +
cmp dword_108A218 eax +
jnz loc_1053105  +
cmp dword_108AF30 eax +
jnz loc_1053105  +
push eax  +
call ds:MessageBeep  +
jmp loc_10531B4  +
push esi  +
push edi  +
push eax  +
push 1  +
call sub_10522B4  +
mov ecx dword_108AECC +
mov esi offset stru_108AF34 +
lea edi [ebp-10h] +
movs   +
movs   +
movs   +
mov eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
neg eax  +
movs   +
add [ebp-10h] eax +
mov eax [ebp-10h] +
lea eax [eax+ecx*2] +
mov ecx dword_108AED0 +
mov [ebp-8] eax +
mov eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
neg eax  +
add [ebp-0Ch] eax +
mov eax [ebp-0Ch] +
lea eax [eax+ecx*2] +
mov [ebp-4] eax +
mov eax [ebx+40h] +
mov ecx [eax+30h] +
mov eax [eax+2Ch] +
mov [ebp-18h] eax +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
xor edi edi +
push eax  +
mov [ebp-20h] edi +
mov [ebp-1Ch] edi +
mov [ebp-14h] ecx +
call ds:IntersectRect  +
call sub_10049FD  +
mov ecx [ebp-4] +
sub ecx [ebp-0Ch] +
mov eax [ebp-8] +
sub eax [ebp-10h] +
push 1  +
push ecx  +
mov esi offset unk_108AEA0 +
push eax  +
mov ecx esi +
call sub_104EF6B  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
call sub_1036C4C  +
cmp dword_108A218 edi +
jz loc_10531B2  +
mov ecx esi +
call sub_104EE0D  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
xor ebx ebx +
mov [ebp-4] ecx +
cmp dword_108A218 ebx +
jnz loc_10531E1  +
cmp dword_108AF30 ebx +
jnz loc_10531E1  +
push ebx  +
call ds:MessageBeep  +
jmp loc_1053285  +
push esi  +
push edi  +
push ebx  +
push 1  +
call sub_10522B4  +
mov ecx dword_108AECC +
mov esi offset stru_108AF34 +
lea edi [ebp-14h] +
movs   +
movs   +
mov eax ecx +
cdq   +
movs   +
and edx 3 +
add eax edx +
sar eax 2 +
movs   +
add [ebp-14h] eax +
lea eax [ecx+1] +
mov ecx dword_108AED0 +
cdq   +
sub eax edx +
sar eax 1 +
add eax [ebp-14h] +
mov [ebp-0Ch] eax +
mov eax ecx +
cdq   +
and edx 3 +
add eax edx +
sar eax 2 +
add [ebp-10h] eax +
lea eax [ecx+1] +
cdq   +
sub eax edx +
sar eax 1 +
add eax [ebp-10h] +
mov [ebp-8] eax +
call sub_10049FD  +
mov eax dword_108AECC +
inc eax  +
cdq   +
sub eax edx +
mov ecx eax +
mov eax dword_108AED0 +
sar ecx 1 +
inc eax  +
cdq   +
sub eax edx +
push 1  +
sar eax 1 +
push eax  +
push ecx  +
mov esi offset unk_108AEA0 +
mov ecx esi +
call sub_104EF6B  +
mov ecx [ebp-4] +
lea eax [ebp-14h] +
push eax  +
call sub_1036C4C  +
cmp dword_108A218 ebx +
jz loc_1053283  +
mov ecx esi +
call sub_104EE0D  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
jnz loc_10531B7  +
cmp dword_108A218 0 +
jnz loc_10531B7  +
mov ecx off_108A1D4 +
mov eax [ecx] +
call dword ptr [eax+90h]  +
cmp eax 1 +
jbe locret_10532CA  +
mov ecx off_108A1D4 +
mov edx [ecx] +
dec eax  +
push eax  +
call dword ptr [edx+8Ch]  +
retn   +
***
cmp dword_108AF30 0 +
jnz loc_10530DC  +
cmp dword_108A218 0 +
jnz loc_10530DC  +
mov ecx off_108A1D4 +
mov eax [ecx] +
call dword ptr [eax+90h]  +
mov ecx off_108A1D4 +
mov edx [ecx] +
inc eax  +
push eax  +
call dword ptr [edx+8Ch]  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 98h +
push ebx  +
mov ebx off_108A1D4 +
mov eax [ebx] +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+40h] +
push 2  +
mov ecx ebx +
mov [ebp-8] esi +
mov [ebp-4] edi +
call dword ptr [eax+68h]  +
test al al +
jz loc_1053347  +
mov eax [ebx] +
push esi  +
mov ecx ebx +
call dword ptr [eax+6Ch]  +
jmp loc_10535EE  +
call sub_10049FD  +
xor ebx ebx +
cmp dword_108AF30 ebx +
jnz loc_1053372  +
cmp dword_108A218 ebx +
jnz loc_1053372  +
push dword ptr [edi+30h]  +
lea eax [ebp-1Ch] +
push dword ptr [edi+2Ch]  +
push ebx  +
push ebx  +
push eax  +
call ds:SetRect  +
jmp loc_1053395  +
push 1  +
push 1  +
mov ecx esi +
call sub_10522B4  +
mov esi offset stru_108A338 +
lea edi [ebp-1Ch] +
movs   +
movs   +
movs   +
movs   +
dec dword ptr [ebp-14h]  +
dec dword ptr [ebp-10h]  +
mov edi [ebp-4] +
mov esi [ebp-8] +
cmp dword_108AF30 ebx +
jnz loc_10533FF  +
cmp dword_108A218 ebx +
jnz loc_10533FF  +
push dword ptr [esi+40h]  +
call sub_100D08B  +
mov eax [ebp-10h] +
sub eax [ebp-18h] +
push 550009h  +
push eax  +
mov eax [ebp-14h] +
sub eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [edi+0Ch]  +
call ds:PatBlt  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [esi+40h]  +
call sub_1005D16  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [esi+40h]  +
call sub_100D173  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call sub_100A226  +
push dword ptr [esi+40h]  +
call sub_100D2D1  +
jmp loc_10535EE  +
push ebx  +
mov edi offset unk_108AEB4 +
push edi  +
mov ecx esi +
call sub_1009365  +
push 550009h  +
push dword_108AED0  +
mov [ebp-4] eax +
push dword_108AECC  +
push ebx  +
push ebx  +
push dword_108AEB8  +
call ds:PatBlt  +
cmp [ebp-4] ebx +
jz loc_105343F  +
push ebx  +
push dword ptr [ebp-4]  +
mov ecx edi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword_108A1C8  +
mov ecx offset unk_108AEA0 +
call sub_103603F  +
cmp dword_108AF50 ebx +
jz loc_10535E2  +
push 10h  +
mov [ebp-4] ebx +
call GdipAlloc  +
mov edi eax +
cmp edi ebx +
jz loc_105348E  +
mov ecx dword_108AF4C +
call sub_100CD8C  +
push eax  +
push dword_108AF58  +
mov ecx edi +
push dword_108AF54  +
call sub_100B2C5  +
mov edi eax +
jmp loc_1053490  +
xor edi edi +
fld  ds:flt_1038DB4 +
lea eax [ebp-0Ch] +
fst  dword ptr [ebp-98h] +
push eax  +
fldz   +
mov [ebp-0Ch] ebx +
fst  dword ptr [ebp-94h] +
fst  dword ptr [ebp-90h] +
fst  dword ptr [ebp-8Ch] +
fst  dword ptr [ebp-88h] +
fst  dword ptr [ebp-84h] +
fst  dword ptr [ebp-7Ch] +
fst  dword ptr [ebp-78h] +
fst  dword ptr [ebp-74h] +
fst  dword ptr [ebp-70h] +
fst  dword ptr [ebp-6Ch] +
fst  dword ptr [ebp-64h] +
fst  dword ptr [ebp-60h] +
fst  dword ptr [ebp-5Ch] +
fst  dword ptr [ebp-58h] +
fst  dword ptr [ebp-54h] +
fxch  st(1) +
fst  dword ptr [ebp-80h] +
fstp  dword ptr [ebp-68h] +
fld1   +
fst  dword ptr [ebp-50h] +
fst  dword ptr [ebp-48h] +
fst  dword ptr [ebp-44h] +
fst  dword ptr [ebp-40h] +
fstp  dword ptr [ebp-38h] +
fst  dword ptr [ebp-4Ch] +
fstp  dword ptr [ebp-3Ch] +
call GdipCreateImageAttributes  +
push 1  +
mov [ebp-8] eax +
push ebx  +
lea eax [ebp-98h] +
push eax  +
lea ecx [ebp-0Ch] +
call sub_1052250  +
push edi  +
lea ecx [ebp-24h] +
call sub_100B8C4  +
push 1  +
lea ecx [ebp-24h] +
call sub_103094A  +
mov ecx dword_108AF58 +
mov eax dword_108AF54 +
push ebx  +
push ebx  +
lea edx [ebp-0Ch] +
push edx  +
push 2  +
push ecx  +
push eax  +
push ebx  +
mov [ebp-2Ch] eax +
push ebx  +
lea eax [ebp-34h] +
push eax  +
push dword_108AF4C  +
mov [ebp-28h] ecx +
lea ecx [ebp-24h] +
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
call sub_100D01F  +
push dword ptr [ebp-24h]  +
call GdipDeleteGraphics  +
push dword ptr [ebp-0Ch]  +
call GdipDisposeImageAttributes  +
or al 0FFh +
sub al byte ptr dword_108AF5C+2 +
or dl 0FFh +
movzx ecx al +
mov eax dword_108AF5C +
sub dl ah +
movzx edx dl +
shl ecx 8 +
or ecx edx +
shl ecx 8 +
or dl 0FFh +
sub dl al +
movzx eax dl +
or ecx eax +
lea eax [ebp-4] +
push eax  +
lea eax [ebp-8] +
mov dword_108AF5C ecx +
push eax  +
mov ecx edi +
mov dword ptr [ebp-8] 0FF000000h +
call sub_1010018  +
mov ecx dword_108AF4C +
cmp ecx ebx +
jz loc_10535C8  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
push dword_108AF50  +
mov dword_108AF4C edi +
call ds:DeleteObject  +
mov eax [ebp-4] +
mov dword_108AF50 eax +
push offset stru_108AF34  +
mov ecx esi +
call sub_1036C4C  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov ebx ecx +
xor esi esi +
push edi  +
cmp [ebx+40h] esi +
jz loc_105364D  +
push 259h  +
call sub_1035D20  +
mov eax [ebx+40h] +
mov ecx [eax+2Ch] +
mov eax [eax+30h] +
push 1  +
mov [ebp-10h] esi +
mov [ebp-0Ch] esi +
mov [ebp-8] ecx +
mov [ebp-4] eax +
mov eax [ebx+40h] +
sub esp 10h +
mov edi esp +
push dword ptr [eax+0Ch]  +
lea esi [ebp-10h] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_10362A0  +
mov ecx ebx +
call sub_10303DC  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_8] +
jz loc_105367E  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
push 0Ah  +
mov esi eax +
pop ecx  +
movs   +
add [ebp+arg_C] 28h +
add eax 28h +
cmp eax [ebp+arg_8] +
jnz loc_1053666  +
pop edi  +
pop esi  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10536A8  +
push esi  +
push [ebp+arg_8]  +
call sub_105222F  +
add [ebp+arg_8] 28h +
add esi 28h +
cmp esi [ebp+arg_4] +
jnz loc_1053698  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi offset unk_108AEA0 +
push offset unk_108BCB8  +
mov ecx esi +
call sub_104F4F4  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_100A894  +
cmp [ebp+arg_0] 100h +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov dword_108A350 eax +
mov dword_108A354 ecx +
mov dword_108A348 eax +
mov dword_108A34C ecx +
mov dword_108A358 eax +
mov dword_108A35C ecx +
jz loc_105371F  +
push dword ptr [edi+20h]  +
call ds:SetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
xor eax eax +
xor ebx ebx +
cmp dword_108AF10 ebx +
setnz al  +
inc eax  +
push eax  +
call sub_1009E55  +
cmp dword_108AEF4 ebx +
jz loc_1053742  +
call sub_103B9F1  +
jmp loc_1053757  +
cmp dword_108AF10 ebx +
jnz loc_1053757  +
push dword_108A1C8  +
mov ecx esi +
call sub_103603F  +
mov ecx esi +
call sub_104EE2F  +
mov ecx dword_108A35C +
sub ecx stru_108AF34.top +
mov eax dword_108A358 +
sub eax stru_108AF34.left +
mov dword_108AF2C ecx +
mov ecx edi +
mov dword_108AF28 eax +
call sub_10303DC  +
mov esi ds:GetKeyState +
push 11h  +
call esi  +
test ax ax +
jge loc_10537B7  +
xor esi esi +
inc esi  +
cmp dword_108AEF4 ebx +
jz loc_10537AF  +
mov dword_108AEF4 ebx +
mov dword_108AEFC esi +
jmp loc_10537F5  +
push esi  +
call sub_1009F8B  +
jmp loc_10537F5  +
push 10h  +
call esi  +
test ax ax +
jge loc_10537F2  +
call sub_10049FD  +
xor esi esi +
inc esi  +
cmp dword_108AEFC ebx +
jz loc_10537D6  +
push esi  +
call sub_1009F8B  +
push dword ptr [edi+40h]  +
call sub_100D08B  +
mov dword_108AF0C esi +
mov dword_108AEF4 ebx +
mov dword_108AEFC esi +
jmp loc_10537FB  +
xor esi esi +
inc esi  +
mov dword_108AF08 esi +
pop edi  +
mov dword_108A218 esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi 100h +
sub eax esi +
push edi  +
mov edi ecx +
jz loc_1053857  +
sub eax esi +
jz loc_1053845  +
dec eax  +
dec eax  +
jz loc_1053838  +
sub eax 1FEh +
jnz loc_1053871  +
call sub_1051C9E  +
jmp loc_1053871  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 202h  +
jmp loc_105386C  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 200h  +
call sub_1052837  +
jmp loc_1053871  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_1052837  +
push [ebp+arg_8]  +
mov ecx edi +
push [ebp+arg_4]  +
push esi  +
call sub_1051D39  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
setz al  +
mov dword_108B18C eax +
call sub_10303DC  +
mov eax dword_108A24C +
test eax eax +
jz locret_10538A7  +
push 0  +
push 0  +
push dword ptr [eax+20h]  +
call ds:InvalidateRect  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov esi offset stru_108AF34 +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
lea eax [ebp+var_8] +
mov ebx ecx +
push eax  +
lea ecx [ebp+var_18] +
movs   +
call sub_10514BC  +
push [ebp+var_4]  +
mov esi 100h +
push [ebp+var_8]  +
mov ecx ebx +
push esi  +
call sub_10536BA  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
call sub_100A894  +
mov ecx [ebp+var_4] +
add ecx [ebp+arg_4] +
mov eax [ebp+var_8] +
add eax [ebp+arg_0] +
push ecx  +
push eax  +
push esi  +
mov ecx ebx +
call sub_105380D  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_1052154  +
mov esi [esi+4] +
mov [ebp+var_4] eax +
cmp eax esi +
jz loc_1053942  +
add eax 0Ch +
push eax  +
push [ebp+arg_4]  +
call sub_1051A65  +
test al al +
jnz loc_1053942  +
lea eax [ebp+var_4] +
jmp loc_1053948  +
mov [ebp+arg_4] esi +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0  +
push 1  +
mov edi ecx +
call sub_10191C3  +
push [ebp+arg_10]  +
mov esi eax +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_1052191  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1053657  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_105368D  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
jmp loc_1053A0A  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_105222F  +
dec [ebp+arg_4]  +
add [ebp+arg_0] 28h +
cmp [ebp+arg_4] 0 +
ja loc_10539F8  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax off_108A1D4 +
push esi  +
push edi  +
push dword ptr [ebp+14h]  +
mov edi [ebp+0Ch] +
push dword ptr [ebp+10h]  +
mov esi ecx +
push edi  +
push dword ptr [ebp+8]  +
mov ecx offset unk_108B074 +
mov [ebp-4] eax +
call sub_1051B12  +
xor ecx ecx +
test byte ptr [ebp+8] 0Ch +
jz loc_1053A82  +
test byte ptr [ebp+8] 8 +
jz loc_1053BC1  +
movsx eax di +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 78h +
jl loc_1053BC1  +
mov ecx esi +
test di di +
jle loc_1053A78  +
call sub_1034E15  +
jmp loc_1053BBE  +
call sub_1034D0B  +
jmp loc_1053BBE  +
test esi esi +
jnz loc_1053A8A  +
xor eax eax +
jmp loc_1053A8D  +
mov eax [esi+20h] +
push ebx  +
push 0FFFFFFF0h  +
push eax  +
call ds:GetWindowLongW  +
test eax 200000h +
jz loc_1053AAA  +
mov dword ptr [ebp+8] 1 +
lea ebx [esi+5Ch] +
jmp loc_1053AB1  +
and dword ptr [ebp+8] 0 +
lea ebx [esi+58h] +
push 17h  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx esi +
mov dword ptr [ebp-20h] 1Ch +
mov dword ptr [ebp-1Ch] 7 +
call ?GetScrollInfo@CWnd@@QAEHHPAUtagSCROLLINFO@@I@Z  +
sub [esi+7Ch] di +
movzx eax word ptr [esi+7Ch] +
movsx ecx ax +
mov eax ecx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 78h +
jl loc_1053BBD  +
mov eax ecx +
push 78h  +
cdq   +
pop ecx  +
idiv  ecx +
mov edi [ebp-10h] +
shr edi 2 +
imul edi eax +
add edi [ebp-0Ch] +
cmp edi [ebp-18h] +
jge loc_1053B07  +
xor edi edi +
jmp loc_1053B14  +
mov eax [ebp-14h] +
sub eax [ebp-10h] +
inc eax  +
cmp edi eax +
jle loc_1053B14  +
mov edi eax +
push 1  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
mov eax edi +
neg eax  +
mov [ebx] eax +
push 1  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx esi +
mov dword ptr [ebp-1Ch] 4 +
mov [ebp-0Ch] edi +
call ?SetScrollInfo@CWnd@@QAEHHPAUtagSCROLLINFO@@H@Z  +
movsx eax word ptr [esi+7Ch] +
push 78h  +
cdq   +
pop ecx  +
idiv  ecx +
lea eax [ebp+10h] +
push eax  +
push dword ptr [esi+20h]  +
mov [esi+7Ch] dx +
call ds:ScreenToClient  +
lea eax [ebp+10h] +
push eax  +
mov ecx esi +
call sub_100839D  +
mov eax dword_108A358 +
mov ecx [ebp-4] +
mov dword_108A350 eax +
mov eax dword_108A35C +
mov dword_108A354 eax +
mov eax [ebp+10h] +
mov dword_108A358 eax +
mov eax [ebp+14h] +
push offset dword_108A348  +
mov dword_108A35C eax +
mov eax [ecx] +
push esi  +
call dword ptr [eax+38h]  +
mov ecx [esi+74h] +
test ecx ecx +
jz loc_1053BAB  +
push dword ptr [esi+5Ch]  +
push dword ptr [esi+58h]  +
call sub_100FDD4  +
mov ecx [esi+78h] +
test ecx ecx +
jz loc_1053BBD  +
push dword ptr [esi+5Ch]  +
push dword ptr [esi+58h]  +
call sub_100FDD4  +
pop ebx  +
xor ecx ecx +
inc ecx  +
pop edi  +
mov eax ecx +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
mov ecx offset unk_108B074 +
push dword ptr [ebp+8]  +
call sub_1051AA1  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100AB4F  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
mov ecx offset unk_108B074 +
push dword ptr [ebp+8]  +
call sub_1051AD8  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_103022D  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+98h] 0 +
jz loc_1053C88  +
mov ecx [ebx+94h] +
mov eax [ecx] +
mov [ebp-4] eax +
cmp eax ecx +
jz loc_1053C8F  +
push esi  +
push edi  +
push 9  +
pop ecx  +
lea esi [eax+14h] +
mov edi offset dword_108A348 +
movs   +
push 0  +
mov ecx ebx +
call sub_100A437  +
lea ecx [ebp-4] +
call sub_101313C  +
mov eax [ebp-4] +
cmp eax [ebx+94h] +
jnz loc_1053C5B  +
pop edi  +
pop esi  +
jmp loc_1053C8F  +
push 0  +
call sub_100A437  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10539F1  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_1053CF3  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_1053991  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1053C99  +
mov eax [ebp+arg_4] +
imul eax eax +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+39h] 0 +
jz loc_1053D72  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_104C1F6  +
push offset dword_10832E4  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_104A3C8 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_101313C  +
mov edx [edi] +
cmp byte ptr [edx+39h] 0 +
jz loc_1053D87  +
mov ebx [edi+8] +
jmp loc_1053DA0  +
mov eax [edi+8] +
cmp byte ptr [eax+39h] 0 +
jz loc_1053D94  +
mov ebx edx +
jmp loc_1053DA0  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_1053E09  +
cmp byte ptr [ebx+39h] 0 +
mov esi [edi+4] +
jnz loc_1053DAC  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_1053DBC  +
mov [eax+4] ebx +
jmp loc_1053DC7  +
cmp [esi] edi +
jnz loc_1053DC4  +
mov [esi] ebx +
jmp loc_1053DC7  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_1053DE6  +
cmp byte ptr [ebx+39h] 0 +
jz loc_1053DD8  +
mov eax esi +
jmp loc_1053DE1  +
push ebx  +
call sub_101316F  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_1053E65  +
cmp byte ptr [ebx+39h] 0 +
jz loc_1053DF8  +
mov eax esi +
jmp loc_1053E01  +
push ebx  +
call sub_10518E0  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_1053E65  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_1053E19  +
mov esi eax +
jmp loc_1053E32  +
cmp byte ptr [ebx+39h] 0 +
mov esi [eax+4] +
jnz loc_1053E25  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_1053E42  +
mov [ecx+4] eax +
jmp loc_1053E50  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_1053E4D  +
mov [ecx] eax +
jmp loc_1053E50  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+38h] +
mov dl [edi+38h] +
mov [eax+38h] dl +
mov [edi+38h] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+38h] 1 +
jz loc_1053F29  +
jmp loc_1053F6E  +
cmp byte ptr [ebx+38h] 1 +
jnz loc_1053F6A  +
mov eax [esi] +
cmp ebx eax +
jnz loc_1053EF0  +
mov eax [esi+8] +
cmp byte ptr [eax+38h] 0 +
jnz loc_1053EA1  +
mov byte ptr [eax+38h] 1 +
push esi  +
mov byte ptr [esi+38h] 0 +
call sub_1052108  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+39h] 0 +
jnz loc_1053F24  +
mov edx [eax] +
cmp byte ptr [edx+38h] 1 +
jnz loc_1053EB8  +
mov edx [eax+8] +
cmp byte ptr [edx+38h] 1 +
jz loc_1053F20  +
mov edx [eax+8] +
cmp byte ptr [edx+38h] 1 +
jnz loc_1053ED7  +
mov edx [eax] +
mov byte ptr [edx+38h] 1 +
push eax  +
mov byte ptr [eax+38h] 0 +
call sub_1072636  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+38h] +
mov [eax+38h] dl +
mov byte ptr [esi+38h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+38h] 1 +
call sub_1052108  +
jmp loc_1053F6A  +
cmp byte ptr [eax+38h] 0 +
jnz loc_1053F09  +
mov byte ptr [eax+38h] 1 +
push esi  +
mov byte ptr [esi+38h] 0 +
call sub_1072636  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+39h] 0 +
jnz loc_1053F24  +
mov edx [eax+8] +
cmp byte ptr [edx+38h] 1 +
jnz loc_1053F36  +
mov edx [eax] +
cmp byte ptr [edx+38h] 1 +
jnz loc_1053F36  +
mov byte ptr [eax+38h] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_1053F6A  +
jmp loc_1053E74  +
mov edx [eax] +
cmp byte ptr [edx+38h] 1 +
jnz loc_1053F54  +
mov edx [eax+8] +
mov byte ptr [edx+38h] 1 +
push eax  +
mov byte ptr [eax+38h] 0 +
call sub_1052108  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+38h] +
mov [eax+38h] dl +
mov byte ptr [esi+38h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+38h] 1 +
call sub_1072636  +
mov byte ptr [ebx+38h] 1 +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_1053F83  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1002061  +
retn 8  +
***
call sub_100208C  +
mov edi ecx +
cmp dword ptr [edi+8] 5D1745Ch +
jb loc_1053FDA  +
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_1053959  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_1054006  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_1054024  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_1054019  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_1054027  +
mov [eax] ebx +
jmp loc_1054027  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_1054027  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
jmp loc_10540C1  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_1054072  +
mov edx [edx+8] +
cmp byte ptr [edx+38h] 0 +
jz loc_105407A  +
cmp esi [ecx+8] +
jnz loc_1054052  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1052108  +
mov eax [esi+4] +
mov byte ptr [eax+38h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+38h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1072636  +
jmp loc_10540BE  +
mov edx [edx] +
cmp byte ptr [edx+38h] 0 +
jnz loc_1054092  +
mov byte ptr [ecx+38h] 1 +
mov byte ptr [edx+38h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+38h] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_10540BE  +
cmp esi [ecx] +
jnz loc_10540A0  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1072636  +
mov eax [esi+4] +
mov byte ptr [eax+38h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+38h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1052108  +
lea eax [esi+4] +
mov ecx [eax] +
cmp byte ptr [ecx+38h] 0 +
jz loc_1054031  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+38h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1002061  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
jmp loc_1054120  +
lea eax [esi+0Ch] +
push eax  +
push [ebp+arg_4]  +
mov ebx esi +
call sub_1051A65  +
mov byte ptr [ebp+var_8] al +
test al al +
jz loc_105411D  +
mov esi [esi] +
jmp loc_1054120  +
mov esi [esi+8] +
cmp byte ptr [esi+39h] 0 +
jz loc_1054104  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_105415F  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_1054154  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_1053F98  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
jmp loc_1054181  +
lea ecx [ebp+var_4] +
call sub_1051919  +
mov esi [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [esi+0Ch] +
push eax  +
call sub_1051A65  +
test al al +
jz loc_1054178  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_105413C  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_1002370  +
mov ebx ecx +
mov esi [ebp+10h] +
push 0Ah  +
pop ecx  +
lea edi [ebp-38h] +
movs   +
mov ecx ebx +
call sub_10518FE  +
mov esi [ebp+0Ch] +
mov edi eax +
test esi esi +
jz loc_1054317  +
mov ecx ebx +
call sub_10518C5  +
mov ecx 6666666h +
mov edx ecx +
sub edx eax +
cmp edx esi +
jnb loc_10541D3  +
call loc_1058901  +
add eax esi +
cmp edi eax +
jnb loc_105427F  +
mov edx edi +
shr edx 1 +
sub ecx edx +
cmp ecx edi +
jnb loc_10541EB  +
xor edi edi +
jmp loc_10541ED  +
add edi edx +
cmp edi eax +
jnb loc_10541F3  +
mov edi eax +
push 0  +
push edi  +
call sub_10521E6  +
and dword ptr [ebp-4] 0 +
push ebx  +
mov [ebp+10h] eax +
push dword ptr [ebp+10h]  +
mov eax [ebx+4] +
push dword ptr [ebp+8]  +
push eax  +
call sub_10539C3  +
lea ecx [ebp-38h] +
push ecx  +
push esi  +
push eax  +
mov ecx ebx +
call sub_1053D02  +
mov ecx [ebx+8] +
push ebx  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
call sub_10539C3  +
mov ecx ebx +
call sub_10518C5  +
add esi eax +
mov eax [ebx+4] +
test eax eax +
jz loc_1054252  +
mov ecx [ebx+8] +
jmp loc_1054245  +
add eax 28h +
cmp eax ecx +
jnz loc_1054242  +
push dword ptr [ebx+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+10h] +
imul edi edi +
imul esi esi +
add edi eax +
add esi eax +
mov [ebx+0Ch] edi +
mov [ebx+8] esi +
mov [ebx+4] eax +
jmp loc_1054317  +
push dword ptr [ebp+10h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
mov ecx [ebx+8] +
mov eax ecx +
sub eax [ebp+8] +
push 28h  +
cdq   +
pop edi  +
idiv  edi +
mov [ebp+10h] ecx +
push ebx  +
cmp eax esi +
jnb loc_10542E6  +
mov eax [ebp+8] +
mov edi esi +
imul edi edi +
lea edx [edi+eax] +
push edx  +
push ecx  +
push eax  +
call sub_10539C3  +
mov eax [ebx+8] +
sub eax [ebp+8] +
lea ecx [ebp-38h] +
push ecx  +
push 28h  +
pop ecx  +
cdq   +
idiv  ecx +
mov ecx ebx +
mov dword ptr [ebp-4] 2 +
sub esi eax +
push esi  +
push dword ptr [ebx+8]  +
call sub_1053D02  +
add [ebx+8] edi +
mov ebx [ebx+8] +
lea eax [ebp-38h] +
push eax  +
sub ebx edi +
push ebx  +
push dword ptr [ebp+8]  +
call sub_1051995  +
add esp 0Ch +
jmp loc_1054317  +
imul esi esi +
push ecx  +
mov edi ecx +
push ecx  +
sub edi esi +
push edi  +
call sub_10539C3  +
push dword ptr [ebp+10h]  +
mov [ebx+8] eax +
push edi  +
push dword ptr [ebp+8]  +
call sub_10521BA  +
lea eax [ebp-38h] +
push eax  +
mov eax [ebp+8] +
add esi eax +
push esi  +
push eax  +
call sub_1051995  +
add esp 18h +
call sub_1002061  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10518C5  +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jbe loc_105434E  +
mov edx [esi+8] +
push edi  +
lea edi [ebp+arg_4] +
push edi  +
sub ecx eax +
push ecx  +
push edx  +
mov ecx esi +
call sub_105418D  +
pop edi  +
jmp loc_1054366  +
jnb loc_1054366  +
mov eax [esi+8] +
imul ecx ecx +
add ecx [esi+4] +
push eax  +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1053CC7  +
pop esi  +
pop ebp  +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
push 0Ah  +
mov edx ecx +
pop ecx  +
sub esp 28h +
xor eax eax +
push 0Ah  +
lea edi [ebp+var_28] +
stos   +
pop ecx  +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+var_28] +
movs   +
mov ecx edx +
call sub_1054324  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 88h +
push ebx  +
push esi  +
movzx esi word ptr [ebp+8] +
mov ebx ecx +
push edi  +
lea edi [ebx+9Ch] +
mov ecx edi +
call sub_10518C5  +
cmp eax esi +
jnb loc_10543D5  +
push esi  +
mov ecx edi +
call sub_1054370  +
mov eax [ebx+0A0h] +
push 28h  +
push eax  +
push esi  +
push dword ptr [ebp+0Ch]  +
call ds:GetTouchInputInfo  +
test eax eax +
jz loc_105464D  +
xor eax eax +
cmp ax [ebp+8] +
jnb loc_105464D  +
xor ecx ecx +
mov [ebp+8] ecx +
mov [ebp-1Ch] esi +
mov eax [ebx+0A0h] +
mov eax [ecx+eax+10h] +
test al 2 +
jz loc_10544ED  +
mov eax [ebx+0A0h] +
add ecx eax +
mov eax [ecx+0Ch] +
mov [ebp-20h] eax +
mov eax [ecx+4] +
push 64h  +
cdq   +
pop edi  +
idiv  edi +
mov esi [ecx+8] +
push 64h  +
mov [ebp-24h] esi +
mov edi eax +
mov eax [ecx] +
cdq   +
pop ecx  +
idiv  ecx +
mov [ebp-0Ch] edi +
mov [ebp-10h] eax +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:ScreenToClient  +
cmp dword ptr [ebx+98h] 0 +
jz loc_10544A0  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-48h] +
lea ecx [ebx+90h] +
push eax  +
call sub_1053912  +
mov eax [eax] +
cmp eax [ebx+94h] +
jnz loc_105463B  +
push dword ptr [ebp-0Ch]  +
mov ecx ebx +
push dword ptr [ebp-10h]  +
push 1  +
push 200h  +
call sub_100A640  +
mov eax [ebp-20h] +
push 9  +
mov [ebp-74h] eax +
lea eax [ebp-78h] +
pop ecx  +
push eax  +
lea eax [ebp-80h] +
jmp loc_10544CF  +
push 0  +
call ds:ShowCursor  +
push dword ptr [ebp-0Ch]  +
mov ecx ebx +
push dword ptr [ebp-10h]  +
push 1  +
push 201h  +
call sub_100A640  +
mov eax [ebp-20h] +
push 9  +
mov [ebp-74h] eax +
lea eax [ebp-78h] +
pop ecx  +
push eax  +
lea eax [ebp-88h] +
mov [ebp-78h] esi +
lea edi [ebp-70h] +
mov esi offset dword_108A348 +
movs   +
push eax  +
lea ecx [ebx+90h] +
call sub_10540E9  +
jmp loc_105463B  +
test al 4 +
jz loc_1054594  +
mov eax [ebx+0A0h] +
add ecx eax +
mov eax [ecx+8] +
mov [ebp-34h] eax +
mov eax [ecx+0Ch] +
mov [ebp-30h] eax +
mov eax [ecx+4] +
push 64h  +
cdq   +
pop esi  +
idiv  esi +
push 64h  +
mov esi eax +
mov eax [ecx] +
cdq   +
pop ecx  +
idiv  ecx +
mov [ebp-4] esi +
mov [ebp-8] eax +
lea eax [ebp-8] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:ScreenToClient  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-40h] +
lea edi [ebx+90h] +
push eax  +
mov ecx edi +
call sub_1053912  +
mov esi [eax] +
cmp esi [ebx+94h] +
jz loc_105463B  +
cmp dword ptr [ebx+98h] 1 +
push dword ptr [ebp-4]  +
mov ecx ebx +
push dword ptr [ebp-8]  +
push 1  +
jnz loc_1054579  +
push 202h  +
call sub_100A640  +
push 1  +
call ds:ShowCursor  +
jmp loc_1054583  +
push 200h  +
call sub_100A640  +
push esi  +
lea eax [ebp-44h] +
push eax  +
mov ecx edi +
call sub_1053D28  +
jmp loc_105463B  +
test al 1 +
jz loc_105463B  +
mov eax [ebx+0A0h] +
add ecx eax +
mov eax [ecx+8] +
mov [ebp-3Ch] eax +
mov eax [ecx+0Ch] +
mov [ebp-38h] eax +
mov eax [ecx+4] +
push 64h  +
cdq   +
pop esi  +
idiv  esi +
push 64h  +
mov esi eax +
mov eax [ecx] +
cdq   +
pop ecx  +
idiv  ecx +
mov [ebp-14h] esi +
mov [ebp-18h] eax +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:ScreenToClient  +
lea eax [ebp-3Ch] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebx+90h] +
call sub_1053912  +
mov esi [eax] +
cmp esi [ebx+94h] +
jz loc_105463B  +
mov eax [ebp-14h] +
mov edi [ebp-18h] +
mov [ebp-28h] eax +
lea eax [ebp-2Ch] +
push eax  +
mov ecx ebx +
mov [ebp-2Ch] edi +
call sub_100839D  +
push dword ptr [ebp-28h]  +
lea ecx [esi+24h] +
push dword ptr [ebp-2Ch]  +
call sub_100A52D  +
test eax eax +
jz loc_105463B  +
push dword ptr [ebp-14h]  +
mov ecx ebx +
push edi  +
push 1  +
push 200h  +
call sub_100A640  +
lea edi [esi+14h] +
push 9  +
pop ecx  +
mov esi offset dword_108A348 +
movs   +
mov ecx [ebp+8] +
add ecx 28h +
dec dword ptr [ebp-1Ch]  +
mov [ebp+8] ecx +
jnz loc_1054404  +
push dword ptr [ebp+0Ch]  +
call ds:CloseTouchInputHandle  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
***
retn   +
***
mov eax [ecx] +
call dword ptr [eax+0FCh]  +
movzx eax ax +
add eax 20000h +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test dword ptr [ecx+28h] 200h +
jz loc_10546A9  +
xor eax eax +
pop ebp  +
retn 4  +
***
pop ebp  +
jmp loc_106A5EB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+bRevert]  +
push dword ptr [ecx+20h]  +
call ds:GetSystemMenu  +
push eax  +
call ?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CFrameWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_1054734 +
mov ecx dword_108BBA8 +
xor eax eax +
mov [ebp-4] eax +
cmp [ecx-8] eax +
jnz loc_1054722  +
push eax  +
push 10h  +
push 7F00h  +
push eax  +
call ds:LoadCursorW  +
push eax  +
push 8  +
call ?AfxRegisterWndClass@@YGPBGIPAUHICON__@@PAUHBRUSH__@@0@Z  +
push eax  +
mov ecx offset dword_108BBA8 +
call ??4CString@@QAEABV0@PBG@Z  +
mov eax esi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CFrameWnd@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1054853  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push 0  +
push 180h  +
push 0  +
push [ebp+arg_C]  +
or eax 80C80000h +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_0]  +
push dword_108BBA8  +
call ?Create@CFrameWnd@@QAEHPBG0KABUtagRECT@@PAVCWnd@@0KPAUCCreateContext@@@Z  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
push 0  +
mov [ebp-4] ecx +
call sub_10546B4  +
mov edi eax +
test edi edi +
jz loc_10548F7  +
push ebx  +
push esi  +
mov esi ds:RemoveMenu +
mov ebx 400h +
push ebx  +
push 7  +
push dword ptr [edi+4]  +
call esi  +
push ebx  +
push 5  +
push dword ptr [edi+4]  +
call esi  +
xor ebx ebx +
push ebx  +
push 0F120h  +
push dword ptr [edi+4]  +
call esi  +
push ebx  +
push 0F020h  +
push dword ptr [edi+4]  +
call esi  +
push ebx  +
push 0F030h  +
push dword ptr [edi+4]  +
call esi  +
push ebx  +
push 0F130h  +
push dword ptr [edi+4]  +
call esi  +
pop esi  +
pop ebx  +
push dword ptr [ebp+8]  +
mov ecx [ebp-4] +
call ?OnCreate@CFrameWnd@@IAEHPAUtagCREATESTRUCTW@@@Z  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp word ptr [ebp+lParam] 0 +
jnz loc_105493C  +
cmp [ebp+wParam] 0F000h +
jb loc_105493C  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 112h  +
push dword ptr [ecx+20h]  +
call ds:PostMessageW  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
pop ebp  +
jmp ?OnCommand@CFrameWnd@@MAEHIJ@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
and eax 0FFF0h +
sub eax 0F040h +
push esi  +
mov esi ecx +
jz loc_10549C3  +
sub eax 10h +
jz loc_10549C3  +
sub eax 0B0h +
jnz loc_10549E2  +
cmp word ptr [ebp+0Ch] 2Dh +
jz loc_10549ED  +
push ebx  +
push edi  +
push dword ptr [esi+20h]  +
mov edi ds:GetParent +
call edi  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push dword ptr [eax+20h]  +
mov ebx ds:SetActiveWindow +
call ebx  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push dword ptr [esi+20h]  +
call edi  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 112h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
push dword ptr [esi+20h]  +
call ebx  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
pop edi  +
pop ebx  +
jmp loc_10549ED  +
cmp word ptr [ebp+0Ch] 75h +
jnz loc_10549E2  +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov ecx eax +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
jmp loc_10549ED  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ?OnSysCommand@CFrameWnd@@IAEXIJ@Z  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax ds:?classCOleServerDoc@COleServerDoc@@2UCRuntimeClass@@B +
retn   +
***
mov eax offset off_101CC38 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+108h] +
cmp dword ptr [eax] 0 +
jz loc_1054A24  +
and dword ptr [eax] 0 +
pop ebp  +
retn 10h  +
cmp [ebp+arg_C] 0F185h +
jz loc_1054A20  +
pop ebp  +
jmp loc_106A782  +
***
push 4  +
mov eax offset loc_107A178 +
call sub_100208C  +
mov esi ecx +
push 80h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1054A66  +
push eax  +
push esi  +
call sub_105E647  +
call sub_1002061  +
retn   +
***
push 0  +
mov eax offset loc_107A1D0 +
call sub_100208C  +
mov esi ecx +
push dword ptr [ebp+8]  +
call ?OnGetLinkedItem@COleServerDoc@@UAEPAVCOleServerItem@@PBG@Z  +
test eax eax +
jnz loc_1054AAF  +
push 80h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1054AAD  +
push 0  +
push esi  +
call sub_105E647  +
jmp loc_1054AAF  +
xor eax eax +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
mov esi offset dword_104A500 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call ?OnDeactivateUI@COleServerDoc@@UAEXH@Z  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+68h]  +
lea ecx [ebp+8] +
mov [ebp+8] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+6Ch]  +
push 0  +
mov esi eax +
call sub_100AF58  +
test esi esi +
jz loc_1054B15  +
mov ecx esi +
call sub_1034D64  +
pop esi  +
pop ebp  +
retn 4  +
***
push 10h  +
mov eax offset loc_107A238 +
call sub_1002370  +
mov esi ecx +
lea ecx [ebp-1Ch] +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call ?SaveEmbedding@COleServerDoc@@QAEXXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
xor eax eax +
inc eax  +
jmp loc_1054B77  +
mov eax [ebp-14h] +
push 0FFFFFFFFh  +
push 0  +
push 0F188h  +
mov [ebp-18h] eax +
call ?AfxMessageBox@@YGHIII@Z  +
mov eax offset loc_1054B6C +
retn   +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
xor eax eax +
call sub_1002061  +
retn   +
***
mov eax offset loc_107A290 +
call sub_100208C  +
mov esi ecx +
lea ecx [ebp+0Bh] +
call sub_100AF92  +
push dword ptr [ebp+8]  +
mov ecx [esi+0ECh] +
and dword ptr [ebp-4] 0 +
call sub_1015A4D  +
test eax eax +
jz loc_1054C15  +
mov ecx [esi+0ECh] +
push esi  +
call sub_104CF75  +
push dword ptr [ebp+8]  +
call ds:GlobalLock  +
test eax eax +
jz loc_1054BEB  +
cmp word ptr [eax+0Eh] 1 +
jnz loc_1054BE2  +
mov ecx [esi+0ECh] +
push 0  +
push 1  +
push 15Ch  +
call sub_104CB3C  +
push dword ptr [ebp+8]  +
call ds:GlobalUnlock  +
mov ecx [esi+0ECh] +
push 1  +
call sub_100409B  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+64h]  +
cmp dword_108B190 0 +
jz loc_1054C15  +
push 1  +
push 0  +
mov ecx esi +
call ?NotifyAllItems@COleServerDoc@@IAEXW4OLE_NOTIFICATION@@K@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+0Bh] +
call sub_102E656  +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
push 5Ch  +
xor esi esi +
lea eax [ebp-80h] +
push esi  +
push eax  +
call memset  +
add esp 0Ch +
mov dword ptr [ebp-84h] 60h +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+0Ch] +
mov [ebp-7Ch] eax +
mov dword ptr [ebp-78h] 1000h +
call sub_10049D9  +
cmp eax esi +
jnz loc_1054C75  +
mov [ebp-80h] esi +
jmp loc_1054C7B  +
mov eax [eax+20h] +
mov [ebp-80h] eax +
push 6  +
pop edi  +
lea eax [ebp-24h] +
lea ecx [ebp-10h] +
mov dword ptr [ebp-74h] 8 +
mov dword ptr [ebp-70h] 0E000h +
mov [ebp-24h] edi +
mov dword ptr [ebp-20h] 0C373h +
mov dword ptr [ebp-1Ch] 7 +
mov dword ptr [ebp-18h] 0C374h +
mov dword ptr [ebp-60h] 2 +
mov [ebp-5Ch] eax +
call ??0CString@@QAE@XZ  +
push dword ptr [ebp+8]  +
lea eax [ebp-10h] +
push 0C375h  +
push eax  +
mov [ebp-4] esi +
call ?AfxFormatString1@@YGXAAVCString@@IPBG@Z  +
mov eax [ebp-10h] +
push esi  +
mov [ebp-68h] eax +
push esi  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-84h] +
push eax  +
call ds:COMCTL32_345  +
test eax eax +
jge loc_1054CED  +
mov [ebp-14h] edi +
mov esi [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
mov esi ecx +
push dword ptr [esi+0F0h]  +
push dword ptr [esi+0ECh]  +
push [ebp+arg_0]  +
call sub_1011E5B  +
mov [esi+0FCh] eax +
pop esi  +
test eax eax +
jnz loc_1054D3E  +
push eax  +
push 0FFFFFFFFh  +
push 6  +
call ?AfxThrowFileException@@YGXHJPBG@Z  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi-100h]  +
lea ecx [ebp-8] +
call MFC42u_6466  +
lea eax [esi-44h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov ecx [ebp-4] +
mov edx [ebp-8] +
mov [ecx+4] edx +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi-100h]  +
lea ecx [ebp-8] +
call MFC42u_6466  +
push dword ptr [ebp+0Ch]  +
lea eax [esi-44h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov ecx [ebp-4] +
mov edx [ebp-8] +
mov [ecx+4] edx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi-100h]  +
lea ecx [ebp-8] +
call MFC42u_6466  +
push dword ptr [ebp+0Ch]  +
lea eax [esi-44h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov ecx [ebp-4] +
mov edx [ebp-8] +
mov [ecx+4] edx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push dword ptr [esi-100h]  +
lea ecx [ebp-8] +
mov edi 80004005h +
call MFC42u_6466  +
xor eax eax +
cmp [esi-0A0h] eax +
jnz loc_1054E1F  +
cmp [ebp+0Ch] eax +
jz loc_1054E30  +
cmp [ebp+10h] eax +
jnz loc_1054E30  +
push dword ptr [ebp+10h]  +
lea eax [esi-44h] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi eax +
mov eax [ebp-4] +
mov ecx [ebp-8] +
mov [eax+4] ecx +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi-100h]  +
lea ecx [ebp-8] +
call MFC42u_6466  +
push dword ptr [ebp+0Ch]  +
lea eax [esi-44h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
mov ecx [ebp-4] +
mov edx [ebp-8] +
mov [ecx+4] edx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi-100h]  +
lea ecx [ebp-8] +
call MFC42u_6466  +
lea eax [esi-44h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
mov ecx [ebp-4] +
mov edx [ebp-8] +
mov [ecx+4] edx +
pop esi  +
leave   +
retn 4  +
***
push 8Ch  +
mov eax offset loc_107A550 +
call sub_1002370  +
mov esi ecx +
mov [ebp-1Ch] esi +
xor ebx ebx +
push ebx  +
lea ecx [ebp-34h] +
call ??0COleStreamFile@@QAE@PAUIStream@@@Z  +
push ebx  +
push 0FFFFFFFFh  +
push ebx  +
lea ecx [ebp-48h] +
mov [ebp-4] ebx +
call sub_102F32D  +
lea eax [ebp-48h] +
push eax  +
mov edi 1011h +
push edi  +
push offset dword_104A4D8  +
push dword ptr [esi+7Ch]  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ?CreateStream@COleStreamFile@@QAEHPAUIStorage@@PBGKPAVCFileException@@@Z  +
push ebx  +
test eax eax +
jnz loc_1054F0F  +
push dword ptr [ebp-3Ch]  +
push dword ptr [ebp-40h]  +
call ?AfxThrowFileException@@YGXHJPBG@Z  +
push 1000h  +
push 2  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-98h] +
call ??0CArchive@@QAE@PAVCFile@@IHPAX@Z  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-98h] esi +
mov [ebp-94h] ebx +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
mov ecx [ebp+8] +
mov byte ptr [ebp-4] 4 +
cmp ecx ebx +
jz loc_1054F56  +
mov eax [ecx] +
lea edx [ebp-98h] +
push edx  +
call dword ptr [eax+8]  +
jmp loc_1054F64  +
lea eax [ebp-98h] +
push eax  +
mov ecx esi +
call sub_1054D0B  +
lea ecx [ebp-98h] +
call ?Close@CArchive@@QAEXXZ  +
lea ecx [ebp-34h] +
call ?Close@COleStreamFile@@UAEXXZ  +
cmp [ebp+8] ebx +
jz loc_1055003  +
lea eax [ebp-48h] +
push eax  +
push edi  +
push offset dword_10550BC  +
push dword ptr [esi+7Ch]  +
lea ecx [ebp-34h] +
call ?CreateStream@COleStreamFile@@QAEHPAUIStorage@@PBGKPAVCFileException@@@Z  +
cmp eax ebx +
jz loc_1055003  +
mov eax [ebp+8] +
add eax 34h +
push eax  +
lea ecx [ebp-18h] +
call ??0CString@@QAE@ABV0@@Z  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 5 +
cmp [eax-8] ebx +
jnz loc_1054FC4  +
mov dword ptr [ebp-14h] offset word_100219C +
mov dword ptr [ebp+8] 1 +
jmp loc_1054FD2  +
push eax  +
mov [ebp-14h] eax +
call ds:lstrlenW  +
inc eax  +
mov [ebp+8] eax +
push 4  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-34h] +
call ?Write@COleStreamFile@@UAEXPBXI@Z  +
push dword ptr [ebp+8]  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-34h] +
call ?Write@COleStreamFile@@UAEXPBXI@Z  +
lea ecx [ebp-34h] +
call ?Close@COleStreamFile@@UAEXXZ  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 4 +
call ??1CString@@QAE@XZ  +
push offset dword_104A500  +
push dword ptr [esi+7Ch]  +
call ds:WriteClassStg  +
cmp eax ebx +
jz loc_105501B  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
mov eax offset aPbrush +
push eax  +
push eax  +
call ds:RegisterClipboardFormatW  +
push eax  +
push dword ptr [esi+7Ch]  +
call ds:WriteFmtUserTypeStg  +
cmp eax ebx +
jz loc_105503C  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
mov esi [esi+7Ch] +
mov eax [esi] +
push 2  +
pop edi  +
push edi  +
push esi  +
call dword ptr [eax+24h]  +
cmp eax ebx +
jz loc_1055053  +
push eax  +
call ?AfxThrowOleException@@YGXJ@Z  +
mov [ebp-4] edi +
call ?AfxTryCleanup@@YGXXZ  +
lea ecx [ebp-98h] +
mov byte ptr [ebp-4] 1 +
call ??1CArchive@@QAE@XZ  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call sub_102F2DF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-34h] +
call ??1COleStreamFile@@UAE@XZ  +
call sub_1002061  +
retn 4  +
***
push 84h  +
mov eax offset loc_107A5BC +
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
xor ebx ebx +
push ebx  +
lea ecx [ebp-4Ch] +
call ??0COleStreamFile@@QAE@PAUIStream@@@Z  +
push ebx  +
push 0FFFFFFFFh  +
push ebx  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call sub_102F32D  +
lea eax [ebp-34h] +
push eax  +
push 12h  +
push offset dword_104A4D8  +
push dword ptr [esi+7Ch]  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 1 +
call ?OpenStream@COleStreamFile@@QAEHPAUIStorage@@PBGKPAVCFileException@@@Z  +
test eax eax +
jz loc_1055143  +
mov [esi+100h] ebx +
jmp loc_105516B  +
lea eax [ebp-34h] +
push eax  +
push 12h  +
push offset aContents  +
push dword ptr [esi+7Ch]  +
lea ecx [ebp-4Ch] +
call ?OpenStream@COleStreamFile@@QAEHPAUIStorage@@PBGKPAVCFileException@@@Z  +
test eax eax +
jz loc_1055226  +
mov dword ptr [esi+100h] 1 +
push ebx  +
push 1000h  +
push 3  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-90h] +
call ??0CArchive@@QAE@PAVCFile@@IHPAX@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-90h] esi +
mov [ebp-8Ch] ebx +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
lea eax [ebp-90h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_1054D0B  +
lea ecx [ebp-90h] +
call ?Close@CArchive@@QAEXXZ  +
lea ecx [ebp-4Ch] +
call ?Close@COleStreamFile@@UAEXXZ  +
mov dword ptr [ebp-4] 2 +
call ?AfxTryCleanup@@YGXXZ  +
lea ecx [ebp-90h] +
mov byte ptr [ebp-4] 1 +
call ??1CArchive@@QAE@XZ  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call sub_102F2DF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-4Ch] +
call ??1COleStreamFile@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov eax [ebp-18h] +
lea ecx [ebp-4Ch] +
mov [ebp-1Ch] eax +
call ?Abort@COleStreamFile@@UAEXXZ  +
mov ecx [ebp-14h] +
mov eax [ecx] +
call dword ptr [eax+74h]  +
lea ecx [ebp-90h] +
call ?Abort@CArchive@@QAEXXZ  +
call ?AfxThrowLastCleanup@@YGXXZ  +
xor ebx ebx +
push ebx  +
push ebx  +
call _CxxThrowException  +
push ebx  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp-2Ch]  +
call ?AfxThrowFileException@@YGXHJPBG@Z  +
int 3  +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
call dword ptr [eax+68h]  +
lea ecx [ebp-4] +
mov [ebp-4] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+6Ch]  +
mov edi eax +
test edi edi +
jz loc_10552BD  +
cmp dword ptr [ebp+0Ch] 0 +
mov ecx edi +
jz loc_10552B8  +
call sub_101775E  +
mov eax [edi+48h] +
test eax eax +
jz loc_10552BD  +
fld1   +
fcomp  qword ptr [eax+50h] +
fnstsw  ax +
test ah 5 +
jp loc_10552BD  +
mov ecx edi +
call sub_1034E78  +
jmp loc_10552BD  +
call sub_1034D64  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call ?OnShowControlBars@COleServerDoc@@MAEXPAVCFrameWnd@@H@Z  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push edi  +
push 0  +
mov edi ecx +
call sub_100AF58  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push 0  +
push offset off_108C824  +
push offset off_108C80C  +
push 0  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
mov ecx eax +
call sub_102E919  +
mov ecx edi +
pop edi  +
jmp loc_106A7B9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+110h] eax +
mov byte ptr [ecx+114h] 1 +
call sub_10049D9  +
mov ecx eax +
xor eax eax +
cmp ecx eax +
jz loc_1055352  +
mov edx [ecx] +
push eax  +
push eax  +
push eax  +
cmp dword_108B190 eax +
jz loc_105534A  +
push 0E10Bh  +
jmp loc_105534F  +
push 0E104h  +
call dword ptr [edx+14h]  +
pop ebp  +
retn 4  +
***
push 8  +
call sub_1055314  +
retn   +
***
push 5  +
call sub_1055314  +
retn   +
***
mov eax [ecx+0ECh] +
mov eax [eax+10h] +
sub eax 0 +
push 4  +
pop edx  +
jz loc_1055398  +
dec eax  +
jz loc_1055393  +
dec eax  +
jz loc_105538F  +
dec eax  +
jmp loc_105539B  +
push 3  +
jmp loc_1055395  +
push 2  +
pop edx  +
jmp loc_105539B  +
xor edx edx +
inc edx  +
push edx  +
call sub_1055314  +
retn   +
***
push 6  +
call sub_1055314  +
retn   +
***
cmp dword ptr [ecx+50h] 0 +
jnz loc_106A890  +
mov ecx offset unk_108AF60 +
jmp loc_105663F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi [ebp+8] +
push 104h  +
lea eax [ebp-20Ch] +
push eax  +
push 0  +
push esi  +
call ds:DragQueryFileW  +
push esi  +
call ds:DragFinish  +
lea eax [ebp-20Ch] +
push eax  +
mov ecx offset unk_108AF60 +
call sub_1011D4C  +
lea eax [ebp-20Ch] +
push eax  +
push 3  +
call ds:SHAddToRecentDocs  +
mov ecx [ebp-4] +
xor ecx ebp +
pop esi  +
call sub_100207A  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call ?OnPaletteChanged@CFrameWnd@@IAEXPAVCWnd@@@Z  +
mov ecx esi +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
mov esi eax +
test esi esi +
jz loc_105546D  +
push offset off_1009BE0  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_105546D  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_105CD45  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
mov esi eax +
test esi esi +
jz loc_10554AC  +
push dword ptr [esi+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_10554AC  +
push offset off_1009BE0  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_10554AC  +
mov ecx esi +
call sub_105CD8A  +
mov ecx edi +
pop edi  +
pop esi  +
jmp loc_106A8A6  +
***
push 14h  +
mov eax offset loc_107A670 +
call sub_100208C  +
mov esi ecx +
push esi  +
lea ecx [ebp-20h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_10554E9  +
lea eax [ebp-20h] +
push eax  +
mov ecx offset unk_108AF60 +
call sub_1023341  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?OnDevModeChange@CWnd@@IAEXPAG@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ??1CClientDC@@UAE@XZ  +
call sub_1002061  +
retn 4  +
***
mov edx [ecx+0A0h] +
or eax 0FFFFFFFFh +
test edx edx +
jz locret_105551C  +
push ecx  +
call edx  +
retn   +
***
mov ecx offset unk_108AF60 +
call sub_105600C  +
xor eax eax +
retn 8  +
***
call ?OnSysColorChange@CWnd@@IAEXXZ  +
jmp sub_101E123  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push esi  +
mov eax ecx +
push 0Ah  +
cdq   +
pop esi  +
idiv  esi +
pop esi  +
sub ecx edx +
cmp edx 5 +
jl loc_1055563  +
add ecx 0Ah +
jmp loc_105556B  +
cmp edx 0FFFFFFFBh +
jg loc_105556B  +
sub ecx 0Ah +
mov eax ecx +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:MulDiv +
push edi  +
push dword ptr [ebp+14h]  +
mov edi [ebp+0Ch] +
push dword ptr [ebp+10h]  +
push dword ptr [edi]  +
call esi  +
push dword ptr [ebp+14h]  +
mov ebx [ebp+8] +
push dword ptr [ebp+10h]  +
mov [ebx] eax +
push dword ptr [edi+4]  +
call esi  +
push dword ptr [ebp+14h]  +
mov [ebx+4] eax +
push dword ptr [ebp+10h]  +
push dword ptr [edi+8]  +
call esi  +
push dword ptr [ebp+14h]  +
mov [ebx+8] eax +
push dword ptr [ebp+10h]  +
push dword ptr [edi+0Ch]  +
call esi  +
pop edi  +
pop esi  +
mov [ebx+0Ch] eax +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push 0Ch  +
lea edx [ebp-0Ch] +
push edx  +
xor eax eax +
push 1  +
push eax  +
push dword ptr [ecx+20h]  +
mov [ebp-0Ch] eax +
mov [ebp-8] eax +
mov dword ptr [ebp-4] 1 +
call ds:SetGestureConfig  +
xor eax eax +
inc eax  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset unk_108B024 +
pop ebp  +
jmp sub_1006A9A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0E801h +
jnz loc_1055664  +
xor eax eax +
cmp dword_108B17C eax +
setz al  +
mov dword_108B17C eax +
pop ebp  +
jmp loc_106A8BC  +
***
push 14h  +
mov eax offset loc_107A670 +
call sub_100208C  +
mov esi ecx +
push esi  +
lea ecx [ebp-20h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
push offset aIntl  +
push dword ptr [ebp+8]  +
xor edi edi +
mov [ebp-4] edi +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
mov ebx offset unk_108AF60 +
test eax eax +
jnz loc_10556AB  +
mov ecx ebx +
call sub_10231D1  +
cmp [ebp-1Ch] edi +
jz loc_10556BB  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
call sub_1023341  +
cmp [esi+100h] edi +
jz loc_10556DC  +
cmp dword_108B1DC edi +
jz loc_10556DC  +
push edi  +
push offset unk_108B1D8  +
lea ecx [esi+0E0h] +
call sub_10177DC  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?OnWinIniChange@CWnd@@IAEXPBG@Z  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0C4h]  +
cmp eax edi +
jz loc_105570E  +
push edi  +
push edi  +
push edi  +
mov ecx eax +
call ?UpdateAllViews@CDocument@@QAEXPAVCView@@JPAVCObject@@@Z  +
mov ecx esi +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
push dword ptr [eax+20h]  +
call ds:UpdateWindow  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ??1CClientDC@@UAE@XZ  +
call sub_1002061  +
retn 4  +
***
push 4  +
mov eax offset loc_107A6C8 +
call sub_100208C  +
mov esi ecx +
lea ecx [ebp-0Dh] +
call sub_100AF92  +
and dword ptr [ebp-4] 0 +
test esi esi +
jnz loc_1055749  +
xor eax eax +
jmp loc_105574C  +
mov eax [esi+20h] +
mov ecx [esi+4F8h] +
mov edx [ecx] +
push 1  +
push eax  +
call dword ptr [edx+4]  +
test eax eax +
jge loc_105576F  +
push 30h  +
push 0E000h  +
push 98Fh  +
call sub_104CFEB  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0Dh] +
call sub_102E656  +
call sub_1002061  +
retn   +
***
push 8  +
mov eax offset loc_107A720 +
call sub_100208C  +
mov esi ecx +
mov ecx offset unk_108AF60 +
call sub_102E919  +
lea ecx [ebp-0Dh] +
call sub_100AF92  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-14h] ebx +
cmp esi ebx +
jnz loc_10557B6  +
xor eax eax +
jmp loc_10557B9  +
mov eax [esi+20h] +
mov ecx [esi+4F8h] +
mov edx [ecx] +
lea edi [ebp-14h] +
push edi  +
push eax  +
call dword ptr [edx+8]  +
cmp [esi+4FCh] ebx +
jz loc_10557E7  +
push ebx  +
push 0E141h  +
push 111h  +
push dword ptr [esi+20h]  +
call ds:PostMessageW  +
jmp loc_1055855  +
cmp eax ebx +
jge loc_10557FE  +
push 30h  +
push 0E000h  +
push 990h  +
call sub_104CFEB  +
jmp loc_1055855  +
jnz loc_1055855  +
mov ecx esi +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
mov esi eax +
cmp esi ebx +
jz loc_1055855  +
mov edi [esi+40h] +
cmp edi ebx +
jz loc_1055855  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+98h]  +
test eax eax +
jz loc_1055855  +
mov eax [edi] +
push ebx  +
mov ecx edi +
call dword ptr [eax+64h]  +
mov ecx offset unk_108AF60 +
call sub_1037262  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call near ptr dword_1054B80+2  +
mov eax [esi+48h] +
push 1  +
push ebx  +
push dword ptr [eax+20h]  +
call ds:InvalidateRect  +
mov ecx [esi+48h] +
call sub_100FBC7  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0Dh] +
call sub_102E656  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+4F8h] +
cmp dword ptr [eax] 0 +
jz loc_1055892  +
mov ecx [ecx+20h] +
mov eax [eax] +
mov edx [eax] +
push ecx  +
mov ecx eax +
call dword ptr [edx+10h]  +
test eax eax +
jle loc_1055892  +
xor eax eax +
inc eax  +
jmp loc_1055894  +
xor eax eax +
mov ecx [ebp+8] +
mov edx [ecx] +
push eax  +
call dword ptr [edx]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push dword ptr [ebp+10h]  +
mov edi [ebp+8] +
push dword ptr [ebp+0Ch]  +
push edi  +
call ?OnInitMenuPopup@CFrameWnd@@IAEXPAVCMenu@@IH@Z  +
mov eax dword_108A24C +
fld  qword ptr [eax+50h] +
push 8  +
fstp  qword ptr [ebp-8] +
pop ebx  +
fld  ds:dbl_104A4F8 +
fcomp  qword ptr [ebp-8] +
fnstsw  ax +
test ah 44h +
jp loc_10558E0  +
mov eax ebx +
jmp loc_10558E2  +
xor eax eax +
mov esi ds:CheckMenuItem +
push eax  +
push 0C394h  +
push dword ptr [edi+4]  +
call esi  +
fld  ds:dbl_1031558 +
fcomp  qword ptr [ebp-8] +
fnstsw  ax +
test ah 44h +
jp loc_1055907  +
mov eax ebx +
jmp loc_1055909  +
xor eax eax +
push eax  +
push 0C395h  +
push dword ptr [edi+4]  +
call esi  +
fld  ds:dbl_1006830 +
fcomp  qword ptr [ebp-8] +
fnstsw  ax +
test ah 44h +
jp loc_1055928  +
mov eax ebx +
jmp loc_105592A  +
xor eax eax +
push eax  +
push 0C396h  +
push dword ptr [edi+4]  +
call esi  +
fld1   +
fcomp  qword ptr [ebp-8] +
fnstsw  ax +
test ah 44h +
jp loc_1055945  +
mov eax ebx +
jmp loc_1055947  +
xor eax eax +
push eax  +
push 0C397h  +
push dword ptr [edi+4]  +
call esi  +
fld  ds:dbl_1009880 +
fcomp  qword ptr [ebp-8] +
fnstsw  ax +
test ah 44h +
jp loc_1055966  +
mov eax ebx +
jmp loc_1055968  +
xor eax eax +
push eax  +
push 0C398h  +
push dword ptr [edi+4]  +
call esi  +
fld  ds:dbl_1013E90 +
fcomp  qword ptr [ebp-8] +
fnstsw  ax +
test ah 44h +
jp loc_1055987  +
mov eax ebx +
jmp loc_1055989  +
xor eax eax +
push eax  +
push 0C399h  +
push dword ptr [edi+4]  +
call esi  +
fld  ds:dbl_1023058 +
fcomp  qword ptr [ebp-8] +
fnstsw  ax +
test ah 44h +
jp loc_10559A8  +
mov eax ebx +
jmp loc_10559AA  +
xor eax eax +
push eax  +
push 0C39Ah  +
push dword ptr [edi+4]  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
push 0  +
push 0  +
push 10h  +
push dword ptr [ecx+20h]  +
call ds:PostMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
test eax eax +
jz loc_1055A02  +
cmp dword ptr [eax+1ACh] 0 +
jz loc_1055A02  +
push dword ptr [ebp+0Ch]  +
call sub_1073385  +
test eax eax +
jnz loc_1055A02  +
inc eax  +
jmp loc_1055A09  +
mov ecx esi +
call ?OnQueryEndSession@CFrameWnd@@IAEHXZ  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov esi [eax+4] +
xor edi edi +
cmp esi edi +
jz loc_1055A65  +
cmp [esi+1ACh] edi +
jz loc_1055A65  +
push dword ptr [ebp+0Ch]  +
call sub_1073385  +
test eax eax +
jnz loc_1055A65  +
mov ecx [esi+1ACh] +
cmp [ebp+8] edi +
jnz loc_1055A53  +
push 1  +
call sub_107339D  +
jmp loc_1055A65  +
push edi  +
call sub_107339D  +
mov ecx [esi+1ACh] +
push edi  +
call sub_1073509  +
push dword ptr [ebp+8]  +
mov ecx ebx +
call ?OnEndSession@CFrameWnd@@IAEXH@Z  +
cmp dword ptr [ebp+8] 1 +
jnz loc_1055A7C  +
push edi  +
call ds:PostQuitMessage  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
***
push 13Ch  +
mov eax offset loc_107A7D0 +
call sub_100208C  +
mov [ebp-14h] ecx +
mov edi dword_108A24C +
push 0  +
push 2  +
lea ecx [ebp-104h] +
call ??0CPageSetupDialog@@QAE@KPAVCWnd@@@Z  +
mov eax dword_108B1D0 +
and dword ptr [ebp-4] 0 +
test eax eax +
jnz loc_1055AE1  +
call ds:GetThreadLocale  +
push 2  +
lea ecx [ebp-18h] +
push ecx  +
push 0Dh  +
push eax  +
call ds:GetLocaleInfoW  +
xor eax eax +
cmp word ptr [ebp-18h] 30h +
setz al  +
mov esi eax +
jmp loc_1055AEB  +
xor ecx ecx +
cmp eax 2 +
setz cl  +
mov esi ecx +
mov eax [edi+40h] +
mov ecx [eax+3Ch] +
test ecx ecx +
jnz loc_1055AFE  +
mov ecx dword_108B28C +
imul ecx ecx +
mov eax [eax+40h] +
mov [ebp-10h] ecx +
fild  dword ptr [ebp-10h] +
test eax eax +
jnz loc_1055B13  +
mov eax dword_108B290 +
imul eax eax +
mov [ebp-10h] eax +
mov eax [edi+40h] +
fild  dword ptr [ebp-10h] +
fild  dword ptr [eax+2Ch] +
fld  ds:dbl_1055CD0 +
fmul st(1) st +
fxch  st(1) +
fdivrp st(3) st +
fimul  dword ptr [eax+30h] +
fdivrp st(1) st +
test esi esi +
jnz loc_1055B3E  +
fld  ds:dbl_1055CC8 +
fdiv st(2) st +
fdivp st(1) st +
sub esp 10h +
fstp  qword ptr [esp+8] +
lea ecx [ebp-50h] +
fstp  qword ptr [esp] +
push dword_108B218  +
push dword_108B214  +
push dword_108B210  +
push dword_108B20C  +
push dword_108B208  +
push dword_108B204  +
call sub_1065475  +
xor eax eax +
test esi esi +
setnz al  +
push 9ECh  +
mov ebx offset dword_108B1F4 +
lea eax ds:4[eax*4] +
or eax 4A002h +
or [ebp-94h] eax +
neg esi  +
sbb esi esi +
and esi 604h +
add esi 3E8h +
push esi  +
push ebx  +
lea eax [ebp-78h] +
push eax  +
mov [ebp-10h] esi +
call near ptr dword_1055574+32h  +
lea esi [ebp-78h] +
call near ptr dword_1055574+2  +
mov edi offset unk_108AF60 +
mov ecx edi +
call sub_1055EB3  +
and dword ptr [ebp-13Ch] 0 +
and dword ptr [ebp-140h] 0 +
lea eax [ebp-148h] +
push eax  +
mov ecx edi +
call ?GetPrinterDeviceDefaults@CWinApp@@QAEHPAUtagPDW@@@Z  +
mov eax [ebp-13Ch] +
mov [ebp-98h] eax +
mov eax [ebp-140h] +
mov [ebp-9Ch] eax +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
mov [ebp-68h] eax +
lea eax [ebp-50h] +
lea ecx [ebp-104h] +
mov [ebp-64h] eax +
mov dword ptr [ebp-5Ch] offset loc_106564D +
mov dword ptr [ebp-60h] offset loc_10659E6 +
mov dword ptr [ebp-58h] 85h +
call ?DoModal@CPageSetupDialog@@UAEHXZ  +
cmp eax 1 +
jnz loc_1055CAE  +
call near ptr dword_1055574+2  +
push dword ptr [ebp-10h]  +
mov eax esi +
push 9ECh  +
push eax  +
push ebx  +
call near ptr dword_1055574+32h  +
push 1  +
push dword ptr [ebp-9Ch]  +
mov ecx edi +
push dword ptr [ebp-98h]  +
call ?SelectPrinter@CWinApp@@QAEXPAX0H@Z  +
mov eax [ebp-50h] +
mov ecx [ebp-14h] +
mov dword_108B204 eax +
mov eax [ebp-4Ch] +
mov dword_108B208 eax +
mov eax [ebp-48h] +
mov dword_108B20C eax +
mov eax [ebp-44h] +
mov dword_108B210 eax +
mov eax [ebp-40h] +
mov dword_108B214 eax +
mov eax [ebp-3Ch] +
mov dword_108B218 eax +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
push eax  +
push offset off_104AA78  +
call ?AfxDynamicDownCast@@YAPAVCObject@@PAUCRuntimeClass@@PAV1@@Z  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1055CAE  +
mov ecx eax +
call sub_1068916  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-104h] +
call ??1CDialog@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_1055D0B  +
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_1055D0B  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_1055D0B  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_1055D0B  +
xor eax eax +
inc eax  +
jmp loc_1055D0D  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_1055D40  +
cmp dword ptr [eax+4] 0 +
jnz loc_1055D40  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_1055D40  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_1055D40  +
xor eax eax +
inc eax  +
jmp loc_1055D42  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_1055DE0  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1055DE0  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jnz loc_1055D72  +
mov eax 80004003h +
jmp loc_1055DE5  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_1055D16  +
test eax eax +
jz loc_1055DD2  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_1055DE5  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_1055DB0  +
push [ebp+arg_8]  +
push eax  +
call sub_1055CDD  +
test eax eax +
jz loc_1055DCF  +
cmp edi 1 +
jz loc_1055D81  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_1055DE5  +
cmp [ebp+arg_4] 0 +
jnz loc_1055DCF  +
test eax eax +
jl loc_1055DE5  +
add esi 0Ch +
mov edi [esi+8] +
test edi edi +
jnz loc_1055D93  +
mov eax 80004002h +
jmp loc_1055DE5  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1055E0C  +
push ecx  +
call sub_1055D4B  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1055DF1  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset loc_1055EA4  +
push hModule  +
call ds:GetProcAddress  +
mov off_108E758 eax +
test eax eax +
jnz loc_1055EA1  +
mov eax offset sub_104E1FD +
mov off_108E758 eax +
pop ebp  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
and [ebp+var_38] 0 +
and [ebp+hMem] 0 +
push esi  +
mov esi ecx +
cmp byte ptr [esi+454h] 0 +
jz loc_1055F14  +
lea eax [ebp+var_44] +
push eax  +
call ?GetPrinterDeviceDefaults@CWinApp@@QAEHPAUtagPDW@@@Z  +
test eax eax +
jz loc_1055F14  +
push [ebp+hMem]  +
call ds:GlobalLock  +
test eax eax +
jz loc_1055F0B  +
mov ecx 0DCh +
mov [eax+44h] cx +
mov dword ptr [eax+48h] 1 +
mov cx [esi+2BCh] +
mov [eax+4Ch] cx +
mov byte ptr [esi+454h] 0 +
push [ebp+hMem]  +
call ds:GlobalUnlock  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov [eax] edx +
mov edx [ebp+arg_8] +
push ebx  +
mov [eax+4] edx +
mov edx [ebp+arg_C] +
push esi  +
mov esi [edx] +
push edi  +
test esi esi +
jg loc_1055F3D  +
xor esi esi +
mov edi [edx+4] +
mov [edx] esi +
test edi edi +
jg loc_1055F48  +
xor edi edi +
mov [edx+4] edi +
test esi esi +
jz loc_1055F70  +
test edi edi +
jz loc_1055F70  +
mov ebx [ecx+324h] +
cmp esi ebx +
jl loc_1055F5F  +
mov esi ebx +
mov [edx] esi +
mov esi [ecx+328h] +
cmp edi esi +
jge loc_1055F6D  +
mov esi edi +
mov [edx+4] esi +
mov edi [eax] +
test edi edi +
jg loc_1055F78  +
xor edi edi +
mov esi [eax+4] +
mov [eax] edi +
test esi esi +
jle loc_1055F85  +
mov ebx esi +
jmp loc_1055F87  +
xor ebx ebx +
mov [eax+4] ebx +
test edi edi +
jz loc_1055FB0  +
test ebx ebx +
jz loc_1055FB0  +
mov esi [ecx+324h] +
cmp edi esi +
jl loc_1055FA0  +
sub esi [edx] +
mov [eax] esi +
mov ecx [ecx+328h] +
cmp ebx ecx +
jl loc_1055FB0  +
sub ecx [edx+4] +
mov [eax+4] ecx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_106A92A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
cmp ecx 3E8h +
jge loc_1055FE7  +
lea eax [ecx+8FCh] +
jmp loc_1055FFA  +
xor eax eax +
cmp dword_108E760[eax*8] ecx +
jz loc_1055FFE  +
inc eax  +
cmp eax 20h +
jb loc_1055FE9  +
xor eax eax +
pop ebp  +
retn 4  +
mov eax dword_108E764[eax*8] +
jmp loc_1055FFA  +
***
call sub_100208C  +
mov esi ecx +
xor ebx ebx +
cmp [esi+434h] ebx +
jz loc_1056127  +
cmp dword_108EEB8 ebx +
jnz loc_1056127  +
lea ecx [ebp-1Ch] +
mov dword_108EEB8 1 +
call ??0CString@@QAE@XZ  +
push dword ptr [esi+44Ch]  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ?LoadStringW@CString@@QAEHI@Z  +
lea ecx [ebp-18h] +
call ??0CString@@QAE@XZ  +
push dword ptr [esi+434h]  +
mov byte ptr [ebp-4] 1 +
call sub_1055FCF  +
push eax  +
lea ecx [ebp-18h] +
call ?LoadStringW@CString@@QAEHI@Z  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call ??0CString@@QAE@XZ  +
mov eax [esi+448h] +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-10h] +
cmp [eax-8] ebx +
jnz loc_10560BE  +
push 0C38Fh  +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp-18h]  +
lea eax [ebp-14h] +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push eax  +
call ?FormatMessageW@CString@@QAAXPBGZZ  +
add esp 10h +
jmp loc_10560E4  +
push 0C38Eh  +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp-18h]  +
mov eax [esi+448h] +
push dword ptr [ebp-1Ch]  +
push eax  +
push dword ptr [ebp-10h]  +
lea eax [ebp-14h] +
push eax  +
call ?FormatMessageW@CString@@QAAXPBGZZ  +
add esp 14h +
push ebx  +
push 2030h  +
push dword ptr [ebp-14h]  +
call ?AfxMessageBox@@YGHPBGII@Z  +
lea ecx [ebp-14h] +
mov dword_108EEB8 ebx +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-18h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ??1CString@@QAE@XZ  +
mov [esi+434h] ebx +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+218h] +
or word ptr [eax] 9 +
cmp [ebp+arg_0] 0 +
movzx ecx word ptr [eax] +
jz loc_1056156  +
or ecx 10h +
mov [eax] cx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+218h] +
or word ptr [eax] 0Ah +
cmp [ebp+arg_0] 0 +
movzx ecx word ptr [eax] +
jz loc_105617D  +
or ecx 10h +
mov [eax] cx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_C]  +
fild  [ebp+arg_8] +
push [ebp+arg_4]  +
fstp  [ebp+var_8] +
push [ebp+arg_0]  +
call sub_1010340  +
fdivr  [ebp+var_8] +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 3F8h +
pop ebp  +
jmp loc_1067F5C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+450h] +
test ecx ecx +
jz loc_10561E8  +
pop ebp  +
jmp loc_10769D6  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_105620E  +
mov ecx [eax] +
push esi  +
push offset loc_1056218  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push eax  +
push 0Eh  +
push eax  +
call ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBG0@Z  +
push eax  +
call ds:LoadIconW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_1056267  +
push [ebp+arg_8]  +
mov ecx esi +
call ??4CString@@QAEABV0@ABV0@@Z  +
add esi 4 +
cmp esi [ebp+arg_4] +
jnz loc_105625A  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] esi +
jz loc_1056297  +
sub [ebp+arg_8] 4 +
mov ecx [ebp+arg_8] +
sub esi 4 +
push esi  +
call ??4CString@@QAEABV0@ABV0@@Z  +
cmp esi [ebp+arg_0] +
jnz loc_1056282  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CString@@QAE@XZ  +
test [ebp+arg_0] 1 +
jz loc_10562BC  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call ds:GetTickCount  +
sub eax [ebp+arg_0] +
cmp [ebp+arg_4] eax +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1055E52  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_105631D  +
cmp word ptr [eax] 0 +
mov ecx eax +
jnz loc_1056322  +
mov ecx offset aNull +
mov eax [ebp+arg_0] +
mov [eax+4] ecx +
mov dword ptr [eax] 2 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_1056395  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_1056383  +
dec edx  +
jnz loc_1056395  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
jmp loc_1056392  +
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10562E6  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push edi  +
push [ebp+arg_0]  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
lea eax [ebp+var_8] +
push eax  +
call sub_1056309  +
lea eax [ebp+var_8] +
push eax  +
push 1  +
push 38Fh  +
push 0  +
call WinSqmAddToStream  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10762AB  +
test [ebp+arg_0] 1 +
jz loc_1056414  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
xor ebx ebx +
cmp [esi+450h] ebx +
jnz loc_10564C2  +
push 14h  +
call ??2@YAPAXI@Z  +
mov edi eax +
pop ecx  +
mov [ebp-10h] edi +
mov [ebp-4] ebx +
cmp edi ebx +
jz loc_105645B  +
mov ecx edi +
call sub_1076292  +
mov eax edi +
jmp loc_105645D  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi+450h] eax +
cmp eax ebx +
jz loc_10564C2  +
mov [ebp-10h] ebx +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
lea ecx [ebp-10h] +
push ecx  +
push 17h  +
push 0C4EAh  +
push eax  +
call SHLWAPI_628  +
mov edi eax +
cmp [ebp-10h] ebx +
jz loc_10564A7  +
push dword ptr [ebp-10h]  +
mov ecx [esi+450h] +
call sub_1076791  +
mov edi eax +
mov eax [ebp-10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp edi ebx +
jz loc_10564C2  +
mov ecx [esi+450h] +
cmp ecx ebx +
jz loc_10564BC  +
push 1  +
call sub_10563FA  +
mov [esi+450h] ebx +
call sub_1002061  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
movzx eax word ptr [esi+218h] +
test al 8 +
jz loc_1056577  +
test al 10h +
jnz loc_1056507  +
push 0EA60h  +
push dword ptr [esi+43Ch]  +
call sub_10562C8  +
test eax eax +
jnz loc_1056507  +
mov eax 0FFF7h +
and [esi+218h] ax +
pop esi  +
retn   +
cmp dword ptr [esi+23Ch] 0 +
jz loc_1056577  +
test byte ptr [esi+218h] 10h +
lea eax [esi+440h] +
jnz loc_1056525  +
lea eax [esi+444h] +
mov eax [eax] +
push 0  +
push 2010h  +
push eax  +
call ?AfxMessageBox@@YGHPBGII@Z  +
cmp eax 1 +
jnz loc_1056551  +
mov eax 0FFE7h +
and [esi+218h] ax +
call ds:GetTickCount  +
mov [esi+43Ch] eax +
mov eax [esi+20h] +
push dword ptr [eax+100h]  +
call ds:IsWindow  +
test eax eax +
jz loc_1056577  +
mov eax [esi+20h] +
push 0  +
push 0  +
push dword ptr [eax+100h]  +
call ds:InvalidateRect  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
test byte ptr [esi+218h] 1 +
jz loc_10565BA  +
call sub_10049D9  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+0C4h]  +
test eax eax +
jz loc_10565BA  +
mov ecx [eax+0ECh] +
test ecx ecx +
jz loc_10565BA  +
cmp dword ptr [ecx+2Ch] 0 +
jnz loc_10565BA  +
cmp dword ptr [ecx+30h] 0 +
jz loc_10565BA  +
call sub_1012405  +
test byte ptr [esi+218h] 2 +
pop esi  +
jnz sub_101E123  +
retn   +
***
push 4  +
mov eax offset loc_107CCA8 +
call sub_100208C  +
mov esi ecx +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
push 2  +
mov ecx esi +
call sub_105622D  +
push 0E000h  +
lea ecx [ebp-10h] +
mov edi eax +
call ?LoadStringW@CString@@QAEHI@Z  +
mov esi [ebp-10h] +
call sub_10049D9  +
test eax eax +
jz loc_105660F  +
mov eax [eax+20h] +
push edi  +
push offset word_100219C  +
push esi  +
push eax  +
call ds:ShellAboutW  +
test edi edi +
jz loc_1056628  +
push edi  +
call ds:DestroyIcon  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp-4] +
push eax  +
push offset loc_1056748  +
push 17h  +
push 0  +
push offset dword_104AC64  +
call ds:CoCreateInstance  +
test eax eax +
jl locret_1056698  +
push esi  +
push offset aHelp_entry_id_  +
call sub_10563C0  +
push offset aMshelpWindows?  +
call ds:SysAllocString  +
mov esi eax +
test esi esi +
jz loc_105668E  +
mov eax [ebp-4] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+0Ch]  +
push esi  +
call ds:SysFreeString  +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
leave   +
retn   +
***
test [eax-14h] bl +
mov word ptr [ecx-4EEE26F9h] fs +
pop esi  +
add ds:0EEE6BF56h cl +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_102DB20 +
call sub_1002407  +
test byte ptr [ebp+8] 1 +
jz loc_105677D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+3F4h] 0 +
jz loc_10567C9  +
cmp byte ptr [esi+3F6h] 0 +
jnz loc_10567C9  +
mov eax [esi+1A0h] +
test eax eax +
jz loc_10567C9  +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+10h]  +
mov eax dword_108A24C +
push 0  +
push dword ptr [eax+20h]  +
call ds:RegisterTouchWindow  +
mov byte ptr [esi+3F6h] 1 +
pop esi  +
retn   +
***
cmp byte ptr [ecx+3F4h] 0 +
jz locret_105680E  +
push edi  +
lea edi [ecx+3F6h] +
cmp byte ptr [edi] 0 +
jz loc_105680D  +
push esi  +
lea esi [ecx+1A0h] +
cmp dword ptr [esi] 0 +
jz loc_105680C  +
mov eax dword_108A24C +
push dword ptr [eax+20h]  +
call ds:UnregisterTouchWindow  +
mov esi [esi] +
push 1  +
mov byte ptr [edi] 0 +
mov eax [esi] +
push esi  +
call dword ptr [eax+10h]  +
pop esi  +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+8] +
mov eax 80004005h +
test ecx ecx +
jz loc_1056832  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
push offset dword_10130D0  +
push ecx  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
or [ecx+0D4h] eax +
mov ecx [ecx+0C8h] +
mov eax [ecx] +
push offset dword_101B690  +
push 4  +
push 59D8h  +
push ecx  +
call dword ptr [eax+24h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push offset dword_101B690  +
not eax  +
and [ecx+0D4h] eax +
mov ecx [ecx+0C8h] +
mov eax [ecx] +
push 4  +
push 59D8h  +
push ecx  +
call dword ptr [eax+24h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov eax [ecx] +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+18h]  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_1C]  +
mov eax [ecx] +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+1Ch]  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call ??0exception@@QAE@ABQBD@Z  +
mov dword ptr [esi] offset off_1056914 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ecx  +
lea ecx [ebp-0Ch] +
call ??0bad_cast@@QAE@ABV0@@Z  +
push offset dword_108372C  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1bad_cast@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1056964  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_102071C +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_1C]  +
mov eax [ecx] +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+24h]  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push offset off_108CF38  +
mov esi offset off_108CEAC +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov edi ecx +
mov [ebp-1] bl +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_10569DB  +
mov eax [eax+8] +
jmp loc_10569F7  +
push ebx  +
push offset off_108D3E8  +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_10569FE  +
mov eax [eax+8] +
mov eax [eax] +
mov byte ptr [ebp-1] 1 +
mov [edi+8] eax +
mov al [ebp-1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push offset off_108D3C0  +
mov esi offset off_108CEAC +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov edi ecx +
mov [ebp-1] bl +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_1056A40  +
mov eax [eax+8] +
mov eax [eax] +
jmp loc_1056A5A  +
push ebx  +
push offset off_108D398  +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_1056A63  +
mov eax [eax+8] +
mov ecx [edi+8] +
mov byte ptr [ebp-1] 1 +
mov [ecx] eax +
mov al [ebp-1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov eax [ecx] +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+1Ch]  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_1C]  +
mov eax [ecx] +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+20h]  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push offset off_108CF94  +
mov esi offset off_108CEAC +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov edi ecx +
mov [ebp-1] bl +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_1056B05  +
mov eax [eax+8] +
jmp loc_1056B21  +
push ebx  +
push offset off_108E878  +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_1056B28  +
mov eax [eax+8] +
mov eax [eax] +
mov byte ptr [ebp-1] 1 +
mov [edi+8] eax +
mov al [ebp-1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_14] +
mov eax [ecx] +
push ecx  +
push ecx  +
fstp  [esp+8+var_8] +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+0Ch]  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_1C]  +
mov eax [ecx] +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+0Ch]  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push offset off_108D68C  +
mov esi offset off_108CEAC +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov edi ecx +
mov [ebp-1] bl +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_1056BC3  +
fld  qword ptr [eax+8] +
jmp loc_1056BDF  +
push ebx  +
push offset off_108E8A0  +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_1056BE6  +
mov eax [eax+8] +
fld  qword ptr [eax] +
fstp  qword ptr [edi+8] +
mov byte ptr [ebp-1] 1 +
mov al [ebp-1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push offset off_108D68C  +
mov esi offset off_108CEAC +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov edi ecx +
mov [ebp-1] bl +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_1056C29  +
fld  qword ptr [edi+8] +
fstp  qword ptr [eax+8] +
jmp loc_1056C48  +
push ebx  +
push offset off_108E8A0  +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_1056C4C  +
mov eax [eax+8] +
fld  qword ptr [edi+8] +
fstp  qword ptr [eax] +
mov byte ptr [ebp-1] 1 +
mov al [ebp-1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_106F05A  +
push offset Addend  +
mov dword ptr [esi] offset off_1012BEC +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+14h] +
mov edx [ebp+8] +
mov ecx [edx+ecx] +
mov eax 80004002h +
test ecx ecx +
jz loc_1056CA3  +
push dword ptr [ebp+10h]  +
mov eax [ecx] +
push dword ptr [ebp+0Ch]  +
push ecx  +
call dword ptr [eax]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1056CC8  +
push ecx  +
call sub_1055D4B  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1056274  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+var_8] +
mov esi ecx +
mov ecx [ebp+arg_0] +
push eax  +
call sub_101D181  +
mov ecx [eax] +
mov [esi+8] ecx +
mov eax [eax+4] +
mov [esi+0Ch] eax +
pop esi  +
leave   +
retn 4  +
***
call sub_100208C  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1056D6D  +
push dword ptr [ebp+0Ch]  +
call ??0CString@@QAE@ABV0@@Z  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_10562A2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_1056DB0  +
push [ebp+arg_C]  +
mov ecx [eax] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_1056DD7  +
push [ebp+arg_C]  +
mov ecx [eax] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+10h]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_1056E01  +
push [ebp+arg_10]  +
mov ecx [eax] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+24h]  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_1056E2B  +
push [ebp+arg_10]  +
mov ecx [eax] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+28h]  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_1056E55  +
push [ebp+arg_10]  +
mov ecx [eax] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+34h]  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_1056E79  +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+3Ch]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_1056E9D  +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+40h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_1056ECA  +
push [ebp+arg_14]  +
mov ecx [eax] +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+44h]  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_1056EEB  +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+48h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi+2Ch] +
xor eax eax +
test ecx ecx +
jnz loc_1056F10  +
mov ecx [esi+28h] +
mov edx [ebp+arg_4] +
mov [edx] ecx +
jmp loc_1056F25  +
mov eax [ecx] +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
push ecx  +
call dword ptr [eax+4Ch]  +
test eax eax +
jl loc_1056F24  +
mov ecx [esi+28h] +
or [edi] ecx +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_105639E  +
pop ebp  +
retn 10h  +
***
push 0Ch  +
mov eax offset loc_107ACAC +
call sub_100208C  +
mov ebx ecx +
xor edi edi +
push edi  +
call sub_100AF58  +
mov ecx ebx +
call sub_102E919  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
lea eax [ebx+3D0h] +
push eax  +
push 1  +
push 1004h  +
push 0F000h  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
mov [ebp-4] edi +
call sub_103C144  +
test eax eax +
jz loc_10570DA  +
call sub_10049D9  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+0C4h]  +
mov esi eax +
cmp esi edi +
jz loc_10570DA  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+98h]  +
test eax eax +
jz loc_10570DA  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+64h]  +
mov ecx ebx +
call sub_1037262  +
xor edx edx +
mov edi 40000000h +
cmp dword_108BC04 edx +
jz loc_105702F  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_1056FF5  +
test al al +
jnz loc_105702F  +
mov ecx dword_108BBF4 +
and ecx edi +
xor eax eax +
or eax ecx +
jz loc_105702F  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax edi +
cmp edx dword_108BBF8 +
jnz loc_105702F  +
cmp eax ecx +
jnz loc_105702F  +
push offset dword_10570F0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
push dword ptr [ebp-10h]  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+84h]  +
test eax eax +
jnz loc_1057089  +
mov ecx ebx +
call ?GetFirstDocTemplatePosition@CWinApp@@QBEPAU__POSITION@@XZ  +
mov [ebp-14h] eax +
lea eax [ebp-14h] +
push eax  +
mov ecx ebx +
call ?GetNextDocTemplate@CWinApp@@QBEPAVCDocTemplate@@AAPAU__POSITION@@@Z  +
mov esi eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+5Ch]  +
lea ecx [ebp-18h] +
mov [ebp-18h] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+60h]  +
lea esi [eax+0F0h] +
mov ecx [esi] +
test ecx ecx +
jz loc_1057082  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
and dword ptr [esi] 0 +
mov ecx ebx +
call sub_1037262  +
xor edx edx +
cmp dword_108BC04 edx +
jz loc_10570DA  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_10570A0  +
test al al +
jnz loc_10570DA  +
mov ecx dword_108BBF4 +
and ecx edi +
xor eax eax +
or eax ecx +
jz loc_10570DA  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax edi +
cmp edx dword_108BBF8 +
jnz loc_10570DA  +
cmp eax ecx +
jnz loc_10570DA  +
push offset dword_1057100  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
call sub_1002061  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 33h  +
call sub_1006359  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov dword ptr [ebp-10h] 1 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 33h  +
call sub_1006359  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
push 3  +
pop eax  +
mov [ebp-14h] eax +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov [ebp-10h] eax +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 33h  +
call sub_1006359  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov dword ptr [ebp-10h] 5 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 33h  +
call sub_1006359  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov dword ptr [ebp-10h] 6 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 33h  +
call sub_1006359  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov dword ptr [ebp-10h] 8 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 33h  +
call sub_1006359  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov dword ptr [ebp-10h] 7 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 33h  +
call sub_1006359  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 34h  +
call sub_1006359  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov dword ptr [ebp-10h] 1 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 34h  +
call sub_1006359  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
push 3  +
pop eax  +
mov [ebp-14h] eax +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov [ebp-10h] eax +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 34h  +
call sub_1006359  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov dword ptr [ebp-10h] 5 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 34h  +
call sub_1006359  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov dword ptr [ebp-10h] 6 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 34h  +
call sub_1006359  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov dword ptr [ebp-10h] 8 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 34h  +
call sub_1006359  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn   +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov dword ptr [ebp-10h] 7 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
push 34h  +
call sub_1006359  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1056CAC  +
pop ebp  +
retn 0Ch  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1012BEC +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+4] 1 +
mov eax [esi+24h] +
test eax eax +
jz loc_10574F0  +
and dword ptr [esi+24h] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push offset Addend  +
call ds:InterlockedDecrement  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_106F021  +
call sub_1002061  +
retn   +
***
call sub_1002370  +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov esi [ebp+8] +
mov [ebp-14h] eax +
cmp esi [ebp+0Ch] +
jz loc_105755D  +
push esi  +
push dword ptr [ebp+10h]  +
call sub_1056D48  +
add dword ptr [ebp+10h] 4 +
add esi 4 +
jmp loc_105752A  +
mov esi [ebp-14h] +
jmp loc_105754F  +
push esi  +
call sub_1056D7A  +
add esi 4 +
cmp esi [ebp+10h] +
jnz loc_1057546  +
push 0  +
push 0  +
call _CxxThrowException  +
mov eax [ebp+10h] +
call sub_1002061  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10574BD  +
test [ebp+arg_0] 1 +
jz loc_1057587  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002370  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_10575DF  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_1056D48  +
dec dword ptr [ebp+0Ch]  +
add dword ptr [ebp+8] 4 +
jmp loc_10575A9  +
mov esi [ebp-14h] +
jmp loc_10575D1  +
push esi  +
call sub_1056D7A  +
add esi 4 +
cmp esi [ebp+8] +
jnz loc_10575C8  +
push 0  +
push 0  +
call _CxxThrowException  +
call sub_1002061  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1057511  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_105762E  +
push esi  +
call sub_1056D7A  +
add esi 4 +
cmp esi [ebp+arg_4] +
jnz loc_1057625  +
pop esi  +
pop ebp  +
retn 10h  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_105766D  +
test esi esi +
jz loc_105766D  +
push 1  +
mov ecx esi +
call sub_105756D  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1057593  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_105761A  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_104A524 +
call sub_1014D01  +
mov ecx esi +
pop esi  +
jmp ??1exception@@UAE@XZ  +
***
cmp dword ptr [ecx+24h] 10h +
jb loc_10576F5  +
mov eax [ecx+10h] +
retn   +
***
lea eax [ecx+10h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10576C7  +
test byte ptr [ebp+8] 1 +
jz loc_1057718  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 8 +
push ecx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_106B00E  +
add esp 10h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi ecx +
jmp loc_1057769  +
movzx eax word ptr [esi] +
mov edx [edi] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx edi +
call dword ptr [edx+8]  +
test al al +
jnz loc_105776E  +
inc esi  +
inc esi  +
cmp esi [ebp+10h] +
jnz loc_1057755  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi ecx +
jmp loc_105779D  +
movzx eax word ptr [esi] +
mov edx [edi] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx edi +
call dword ptr [edx+8]  +
test al al +
jz loc_10577A2  +
inc esi  +
inc esi  +
cmp esi [ebp+10h] +
jnz loc_1057789  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 8 +
push ecx  +
push dword ptr [ebp+8]  +
call sub_106B08D  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
cmp esi [ebp+0Ch] +
jz loc_10577F4  +
push edi  +
lea edi [ecx+8] +
movzx eax word ptr [esi] +
push edi  +
push eax  +
call sub_106B08D  +
mov [esi] ax +
inc esi  +
inc esi  +
pop ecx  +
pop ecx  +
cmp esi [ebp+0Ch] +
jnz loc_10577DD  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 8 +
push ecx  +
push dword ptr [ebp+8]  +
call sub_106B10C  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
cmp esi [ebp+0Ch] +
jz loc_1057845  +
push edi  +
lea edi [ecx+8] +
movzx eax word ptr [esi] +
push edi  +
push eax  +
call sub_106B10C  +
mov [esi] ax +
inc esi  +
inc esi  +
pop ecx  +
pop ecx  +
cmp esi [ebp+0Ch] +
jnz loc_105782E  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
sub eax esi +
mov ebx ecx +
cmp [ebp+arg_C] eax +
jnb loc_1057876  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_106CAD2  +
add esp 14h +
cmp esi [ebp+arg_4] +
jz loc_1057896  +
push edi  +
mov edi [ebp+arg_8] +
movzx eax byte ptr [esi] +
push eax  +
mov ecx ebx +
call sub_101C3E5  +
mov [edi] ax +
inc esi  +
inc edi  +
inc edi  +
cmp esi [ebp+arg_4] +
jnz loc_105787F  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_10] 0 +
mov eax ecx +
add eax 18h +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push dword ptr [ebp+WideCharStr]  +
lea eax [ebp+MultiByteStr] +
push eax  +
call sub_106AFCC  +
add esp 10h +
cmp eax 1 +
mov al [ebp+arg_4] +
jnz loc_10578DD  +
mov al [ebp+MultiByteStr] +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100207A  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_10578A3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
sub eax esi +
sar eax 1 +
mov ebx ecx +
cmp [ebp+arg_10] eax +
jnb loc_1057924  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_106CAD2  +
add esp 14h +
cmp esi [ebp+arg_4] +
jz loc_1057946  +
push edi  +
mov edi [ebp+arg_C] +
movzx eax word ptr [esi] +
push dword ptr [ebp+arg_8]  +
mov ecx ebx +
push eax  +
call sub_10578A3  +
inc esi  +
inc esi  +
mov [edi] al +
inc edi  +
cmp esi [ebp+arg_4] +
jnz loc_105792D  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub eax [ebp+8] +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1057851  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub eax [ebp+8] +
sar eax 1 +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10578FD  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_105767A  +
lea eax [edi+esi*4] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [ebp+8] +
mov [esi+4] eax +
and dword ptr [ebp-4] 0 +
push offset loc_101D524  +
lea ecx [ebp-84h] +
mov dword ptr [esi] offset off_1057A18 +
call sub_101C6A3  +
push eax  +
mov ecx esi +
call sub_1056D1D  +
lea ecx [ebp-84h] +
call sub_101D302  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_C] +
mov byte ptr [eax] 25h +
lea ecx [eax+1] +
test dl 20h +
jz loc_1057A5B  +
mov byte ptr [ecx] 2Bh +
inc ecx  +
test dl 10h +
jz loc_1057A64  +
mov byte ptr [ecx] 23h +
inc ecx  +
mov byte ptr [ecx] 2Eh +
inc ecx  +
push ebx  +
mov bl [ebp+arg_8] +
mov byte ptr [ecx] 2Ah +
inc ecx  +
test bl bl +
jz loc_1057A77  +
mov [ecx] bl +
inc ecx  +
and edx 3000h +
pop ebx  +
cmp edx 2000h +
jnz loc_1057A8A  +
mov dl 66h +
jmp loc_1057A97  +
cmp edx 1000h +
setnz dl  +
lea edx [edx+edx+65h] +
mov [ecx] dl +
mov byte ptr [ecx+1] 0 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_C] +
mov byte ptr [eax] 25h +
lea ecx [eax+1] +
test dl 20h +
jz loc_1057ABE  +
mov byte ptr [ecx] 2Bh +
inc ecx  +
test dl 8 +
jz loc_1057AC7  +
mov byte ptr [ecx] 23h +
inc ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov bl [edi] +
cmp bl 4Ch +
jz loc_1057AD8  +
mov [ecx] bl +
jmp loc_1057AE3  +
mov byte ptr [ecx] 49h +
inc ecx  +
mov byte ptr [ecx] 36h +
inc ecx  +
mov byte ptr [ecx] 34h +
mov esi edx +
and esi 0E00h +
inc ecx  +
cmp esi 400h +
jnz loc_1057AF8  +
mov dl 6Fh +
jmp loc_1057B10  +
cmp esi 800h +
jz loc_1057B05  +
mov dl [edi+1] +
jmp loc_1057B10  +
shl dl 3 +
not dl  +
and dl 20h +
or dl 58h +
pop edi  +
pop esi  +
mov [ecx] dl +
mov byte ptr [ecx+1] 0 +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+8]  +
call sub_1006809  +
push dword ptr [esi+10h]  +
call sub_1006809  +
push dword ptr [esi+14h]  +
call sub_1006809  +
add esp 0Ch +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1057B56  +
sub eax edx +
lea esi [eax+1] +
push esi  +
call sub_10067E4  +
pop ecx  +
mov ecx eax +
jmp loc_1057B74  +
mov dl [edi] +
dec esi  +
mov [ecx] dl +
inc ecx  +
inc edi  +
test esi esi +
ja loc_1057B6D  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_8]  +
and dword ptr [ebp+WideCharStr] 0 +
and dword ptr [ebp+MultiByteStr] 0 +
lea eax [ebp+MultiByteStr] +
push eax  +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_101C420  +
mov ax [ebp+WideCharStr] +
add esp 14h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov dword ptr [ebp+MultiByteStr] edi +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1057BCA  +
sub eax ecx +
lea esi [eax+1] +
mov eax [ebp+arg_0] +
mov ebx esi +
mov [ebp+var_8] eax +
cmp esi edi +
jbe loc_1057C07  +
push [ebp+arg_8]  +
lea eax [ebp+MultiByteStr] +
push eax  +
push ebx  +
push [ebp+var_8]  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_101C420  +
add esp 14h +
test eax eax +
jle loc_1057C07  +
add [ebp+var_8] eax +
sub ebx eax +
inc edi  +
test ebx ebx +
ja loc_1057BE2  +
inc edi  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10067E4  +
and [ebp+var_10] 0 +
mov ebx eax +
pop ecx  +
mov [ebp+var_8] ebx +
jmp loc_1057C48  +
push [ebp+arg_8]  +
lea eax [ebp+var_10] +
push eax  +
push esi  +
push [ebp+arg_0]  +
push ebx  +
call sub_101C420  +
add esp 14h +
test eax eax +
jle loc_1057C4C  +
add [ebp+arg_0] eax +
dec edi  +
inc ebx  +
inc ebx  +
test edi edi +
ja loc_1057C2A  +
test edi edi +
jz loc_1057C55  +
xor eax eax +
mov [ebx] ax +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 10h +
jb loc_1057C72  +
mov eax [ecx+4] +
jmp loc_1057C75  +
lea eax [ecx+4] +
mov ecx [ebp+arg_0] +
add eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 1 +
jnz loc_1057CA7  +
cmp dword ptr [ecx+18h] 10h +
jb loc_1057C99  +
mov ecx [ecx+4] +
jmp loc_1057C9C  +
add ecx 4 +
mov al [ebp+arg_8] +
mov edx [ebp+arg_0] +
mov [ecx+edx] al +
jmp loc_1057CCB  +
cmp dword ptr [ecx+18h] 10h +
jb loc_1057CB2  +
mov ecx [ecx+4] +
jmp loc_1057CB5  +
add ecx 4 +
movsx eax [ebp+arg_8] +
push [ebp+arg_4]  +
push eax  +
mov eax [ebp+arg_0] +
add ecx eax +
push ecx  +
call memset  +
add esp 0Ch +
pop ebp  +
retn 0Ch  +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
call ds:localeconv  +
mov ecx [ebp+8] +
mov ebx eax +
xor edi edi +
lea eax [ebp-20h] +
push eax  +
mov [esi+8] edi +
mov [esi+10h] edi +
mov [esi+14h] edi +
mov [ebp-4] edi +
call sub_101D181  +
push eax  +
push edi  +
push dword ptr [ebx+8]  +
call sub_1057B47  +
mov ecx [ebp+8] +
mov [esi+8] eax +
add esp 0Ch +
lea eax [ebp-20h] +
push eax  +
call sub_101D181  +
push eax  +
push edi  +
push offset aFalse  +
call sub_1057BB4  +
mov ecx [ebp+8] +
mov [esi+10h] eax +
add esp 0Ch +
lea eax [ebp-20h] +
push eax  +
call sub_101D181  +
push eax  +
push edi  +
push offset aTrue  +
call sub_1057BB4  +
mov ecx [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi+14h] eax +
add esp 0Ch +
lea eax [ebp-20h] +
push eax  +
call sub_101D181  +
push eax  +
mov eax [ebx] +
movzx eax byte ptr [eax] +
push edi  +
push eax  +
call sub_1057B81  +
mov ecx [ebp+8] +
mov [esi+0Ch] ax +
add esp 0Ch +
lea eax [ebp-18h] +
push eax  +
call sub_101D181  +
push eax  +
mov eax [ebx+4] +
movzx eax byte ptr [eax] +
push edi  +
push eax  +
call sub_1057B81  +
add esp 0Ch +
mov [esi+0Eh] ax +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+24h] +
cmp dword ptr [eax] 0 +
jz loc_1057DDA  +
mov eax [ecx+34h] +
mov eax [eax] +
jmp loc_1057DDC  +
xor eax eax +
test eax eax +
jle loc_1057DF7  +
mov eax [ecx+34h] +
dec dword ptr [eax]  +
mov eax [ecx+24h] +
mov ecx [eax] +
lea edx [ecx+2] +
mov [eax] edx +
mov eax [ebp+arg_0] +
mov [ecx] ax +
jmp loc_1057DFF  +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
movzx eax ax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
test ecx ecx +
jz loc_1057E2C  +
push [ebp+arg_0]  +
call sub_1057DC6  +
mov ecx 0FFFFh +
cmp cx ax +
jnz loc_1057E2F  +
mov byte ptr [esi] 1 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 0 +
jbe loc_1057E62  +
push esi  +
mov esi [ebp+18h] +
movzx eax word ptr [esi] +
push eax  +
lea ecx [ebp+10h] +
call sub_1057E0B  +
dec dword ptr [ebp+1Ch]  +
inc esi  +
inc esi  +
cmp dword ptr [ebp+1Ch] 0 +
ja loc_1057E4A  +
pop esi  +
mov ecx [ebp+10h] +
mov eax [ebp+0Ch] +
mov [eax] ecx +
mov ecx [ebp+14h] +
mov [eax+4] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_14] 0 +
jbe loc_1057E92  +
push [ebp+arg_10]  +
lea ecx [ebp+arg_8] +
call sub_1057E0B  +
dec [ebp+arg_14]  +
jnz loc_1057E82  +
mov ecx [ebp+arg_8] +
mov eax [ebp+arg_4] +
mov [eax] ecx +
mov ecx [ebp+arg_C] +
mov [eax+4] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_14] 0 +
jbe loc_1057EE4  +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
mov edi [ebp+arg_0] +
add edi 8 +
movzx eax byte ptr [esi] +
push edi  +
push 0  +
push eax  +
call sub_1057B81  +
movzx eax ax +
add esp 0Ch +
push eax  +
lea ecx [ebp+arg_8] +
call sub_1057E0B  +
dec [ebp+arg_14]  +
inc esi  +
cmp [ebp+arg_14] 0 +
ja loc_1057EBD  +
pop edi  +
pop esi  +
mov ecx [ebp+arg_8] +
mov eax [ebp+arg_4] +
mov [eax] ecx +
mov ecx [ebp+arg_C] +
mov [eax+4] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_14] +
push esi  +
push edi  +
mov edi [ebp+arg_10] +
push ebx  +
push 0  +
push edi  +
call ds:memchr  +
add esp 0Ch +
test eax eax +
jz loc_1057F21  +
sub eax edi +
mov esi eax +
jmp loc_1057F23  +
mov esi ebx +
push esi  +
push edi  +
push [ebp+arg_C]  +
lea eax [ebp+var_8] +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_0]  +
call sub_1057EA7  +
mov ecx [eax] +
mov [ebp+arg_8] ecx +
mov ecx [eax+4] +
add esp 18h +
add edi esi +
sub ebx esi +
mov [ebp+arg_C] ecx +
jz loc_1057F7A  +
cmp [ebp+arg_18] 0 +
jz loc_1057F76  +
push 1  +
push dword ptr [ebp+arg_18]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
call sub_1057E77  +
mov ecx [eax] +
mov [ebp+arg_8] ecx +
mov eax [eax+4] +
add esp 18h +
mov [ebp+arg_C] eax +
inc edi  +
dec ebx  +
jmp loc_1057F0A  +
mov edx [eax] +
mov ecx [ebp+arg_4] +
mov eax [eax+4] +
pop edi  +
pop esi  +
mov [ecx+4] eax +
mov [ecx] edx +
mov eax ecx +
pop ebx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
call dword ptr [eax+10h]  +
mov eax [ebp+8] +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
call dword ptr [eax+14h]  +
mov eax [ebp+8] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
or eax 0FFFFFFFFh +
mov edi ecx +
sub eax [edi+14h] +
cmp eax ebx +
ja loc_1057FEA  +
call loc_106AE9B  +
test ebx ebx +
jbe loc_1058019  +
push esi  +
mov esi [edi+14h] +
push 0  +
add esi ebx +
push esi  +
mov ecx edi +
call sub_101C199  +
test al al +
jz loc_1058018  +
push dword ptr [ebp+arg_4]  +
mov ecx edi +
push ebx  +
push dword ptr [edi+14h]  +
call sub_1057C83  +
push esi  +
mov ecx edi +
call sub_1014D34  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jnb loc_105803C  +
call loc_106AEE9  +
or eax 0FFFFFFFFh +
sub eax [esi+14h] +
cmp eax [ebp+arg_4] +
ja loc_105804C  +
call loc_106AE9B  +
cmp [ebp+arg_4] 0 +
jbe loc_10580B7  +
push ebx  +
mov ebx [esi+14h] +
add ebx [ebp+arg_4] +
push 0  +
push ebx  +
mov ecx esi +
call sub_101C199  +
test al al +
jz loc_10580B6  +
mov eax [esi+18h] +
lea ecx [esi+4] +
cmp eax 10h +
jb loc_1058079  +
mov edx [ecx] +
mov [ebp+arg_0] edx +
jmp loc_105807C  +
mov [ebp+arg_0] ecx +
cmp eax 10h +
jb loc_1058083  +
mov ecx [ecx] +
mov edx [esi+14h] +
sub edx edi +
push edx  +
mov edx [ebp+arg_0] +
sub eax edi +
sub eax [ebp+arg_4] +
add edx edi +
push edx  +
add ecx edi +
add ecx [ebp+arg_4] +
push eax  +
push ecx  +
call sub_104BF8E  +
push dword ptr [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push edi  +
call sub_1057C83  +
push ebx  +
mov ecx esi +
call sub_1014D34  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
mov eax [ecx] +
and [ebp+var_4] 0 +
call dword ptr [eax+0Ch]  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [edi+14h] ebx +
jnb loc_10580FC  +
call loc_106AEE9  +
mov eax [edi+14h] +
sub eax ebx +
cmp eax [ebp+arg_8] +
jnb loc_1058109  +
mov [ebp+arg_8] eax +
or eax 0FFFFFFFFh +
sub eax [esi+14h] +
cmp eax [ebp+arg_8] +
ja loc_1058119  +
call loc_106AE9B  +
cmp [ebp+arg_8] 0 +
jbe loc_1058172  +
mov eax [esi+14h] +
add eax [ebp+arg_8] +
push 0  +
push eax  +
mov ecx esi +
mov [ebp+arg_0] eax +
call sub_101C199  +
test al al +
jz loc_1058172  +
cmp dword ptr [edi+18h] 10h +
jb loc_1058141  +
mov edi [edi+4] +
jmp loc_1058144  +
add edi 4 +
mov eax [esi+18h] +
cmp eax 10h +
jb loc_1058151  +
mov edx [esi+4] +
jmp loc_1058154  +
lea edx [esi+4] +
push [ebp+arg_8]  +
mov ecx [esi+14h] +
add edi ebx +
push edi  +
sub eax ecx +
push eax  +
add ecx edx +
push ecx  +
call sub_101CFD9  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1014D34  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push ebx  +
mov esi ecx +
call sub_101B895  +
test al al +
jz loc_10581B4  +
cmp dword ptr [esi+18h] 10h +
jb loc_10581A1  +
mov eax [esi+4] +
jmp loc_10581A4  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub ebx eax +
push ebx  +
push esi  +
mov ecx esi +
call sub_10580E2  +
jmp loc_105820C  +
or eax 0FFFFFFFFh +
sub eax [esi+14h] +
cmp eax [ebp+arg_4] +
ja loc_10581C4  +
call loc_106AE9B  +
cmp [ebp+arg_4] 0 +
jbe loc_105820A  +
push edi  +
mov edi [esi+14h] +
add edi [ebp+arg_4] +
push 0  +
push edi  +
mov ecx esi +
call sub_101C199  +
test al al +
jz loc_1058209  +
mov eax [esi+18h] +
cmp eax 10h +
jb loc_10581EC  +
mov edx [esi+4] +
jmp loc_10581EF  +
lea edx [esi+4] +
push [ebp+arg_4]  +
mov ecx [esi+14h] +
push ebx  +
sub eax ecx +
push eax  +
add ecx edx +
push ecx  +
call sub_101CFD9  +
push edi  +
mov ecx esi +
call sub_1014D34  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [ebp+8] +
mov [esi+4] eax +
and dword ptr [ebp-4] 0 +
push offset loc_101D524  +
lea ecx [ebp-84h] +
mov dword ptr [esi] offset off_105826C +
call sub_101C6A3  +
push eax  +
mov ecx esi +
call sub_1056D1D  +
lea ecx [ebp-84h] +
call sub_101D302  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
test ecx ecx +
jbe loc_10582C8  +
mov eax [ebp+arg_4] +
movzx edx ax +
mov eax edx +
shl edx 10h +
push edi  +
mov edi [ebp+arg_0] +
or eax edx +
shr ecx 1 +
stos   +
adc ecx ecx +
stos   +
pop edi  +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_10582A1  +
add esp 0Ch +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-8] 0 +
lea eax [ebp-8] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp-1] +
push eax  +
mov byte ptr [ebp-1] 0 +
call sub_106AFCC  +
mov al [ebp-1] +
add esp 10h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_102071C +
jz loc_1058339  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_1058396  +
call sub_101C3AF  +
movzx eax ax +
mov ecx 0FFFFh +
cmp cx ax +
jz loc_1058396  +
mov [esi+6] ax +
jmp loc_1058399  +
and dword ptr [esi] 0 +
mov ax [esi+6] +
mov byte ptr [esi+4] 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor ebx ebx +
cmp [edi+4] bl +
jnz loc_10583BE  +
call sub_1058373  +
mov esi [ebp+arg_0] +
cmp [esi+4] bl +
jnz loc_10583CD  +
mov ecx esi +
call sub_1058373  +
cmp [edi] ebx +
jnz loc_10583DE  +
cmp [esi] ebx +
jz loc_10583E2  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
cmp [esi] ebx +
jz loc_10583D5  +
xor eax eax +
inc eax  +
jmp loc_10583D7  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_10583A8  +
xor ecx ecx +
test al al +
setz cl  +
mov al cl +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 0FFFFFFFFh +
jnz loc_105843D  +
call loc_106AE9B  +
push 0  +
push edi  +
mov ecx esi +
call sub_10141BD  +
test al al +
jz loc_1058460  +
push [ebp+arg_4]  +
mov ecx esi +
push edi  +
push 0  +
call sub_102CE43  +
push edi  +
mov ecx esi +
call sub_1012FDB  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 0FFFFFFFFh +
jnz loc_1058483  +
call loc_106AE9B  +
push 0  +
push edi  +
mov ecx esi +
call sub_101C199  +
test al al +
jz loc_10584A6  +
push dword ptr [ebp+arg_4]  +
mov ecx esi +
push edi  +
push 0  +
call sub_1057C83  +
push edi  +
mov ecx esi +
call sub_1014D34  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_1012FDB  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_1058427  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_1014D34  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_105846D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
cmp ax cx +
jnz loc_1058541  +
inc dword ptr [ebp+10h]  +
inc edx  +
movzx eax word ptr [esi+edx*2] +
test ax ax +
jnz loc_1058539  +
push 0  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-2Ch] +
call near ptr dword_10584E0+2  +
***
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-3Ch] 0FFFFFFFEh +
mov dword ptr [ebp-34h] 1 +
xor edi edi +
and [ebp-38h] edi +
mov byte ptr [ebp-2Dh] 0 +
cmp [ebp+10h] edi +
jbe loc_1058647  +
movzx eax word ptr [esi+edi*2] +
test ax ax +
jz loc_1058597  +
movzx ecx word ptr [esi] +
cmp ax cx +
jz loc_1058597  +
inc edi  +
movzx eax word ptr [esi+edi*2] +
test ax ax +
jnz loc_1058588  +
push dword ptr [ebp-38h]  +
lea ecx [ebp-2Ch] +
call sub_1057C62  +
mov cl [eax] +
test cl cl +
jz loc_10585AF  +
movsx eax cl +
add edi eax +
jmp loc_1058611  +
add edi [ebp-34h] +
movzx ecx word ptr [esi+edi*2] +
cmp cx [esi] +
jz loc_10585FE  +
test cx cx +
jz loc_10585FE  +
push dword ptr [ebp-40h]  +
mov ecx ebx +
call sub_10583A8  +
test al al +
jnz loc_10585E1  +
mov ecx ebx +
call near ptr dword_10583E8+4  +
cmp [esi+edi*2] ax +
jnz loc_10585E1  +
mov byte ptr [ebp-2Dh] 1 +
jmp loc_1058611  +
push 7Fh  +
pop ebx  +
cmp [ebp-34h] ebx +
jnb loc_10585EC  +
mov ebx [ebp-34h] +
push dword ptr [ebp-38h]  +
lea ecx [ebp-2Ch] +
call sub_1057C62  +
mov [eax] bl +
mov ebx [ebp-44h] +
jmp loc_1058611  +
push 7Fh  +
pop ecx  +
cmp [ebp-34h] ecx +
jnb loc_1058609  +
mov ecx [ebp-34h] +
mov [eax] cl +
mov eax [ebp-38h] +
mov [ebp-3Ch] eax +
inc dword ptr [ebp-38h]  +
mov eax [ebp-38h] +
cmp eax [ebp+10h] +
jb loc_105857C  +
cmp byte ptr [ebp-2Dh] 0 +
jz loc_1058647  +
push dword ptr [ebp-40h]  +
mov ecx ebx +
call sub_10583A8  +
test al al +
jnz loc_1058647  +
inc dword ptr [ebp-34h]  +
mov ecx ebx +
call near ptr dword_1058340+5  +
or dword ptr [ebp-3Ch] 0FFFFFFFFh +
jmp loc_105856A  +
***
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1014D01  +
mov eax [ebp-3Ch] +
call sub_1002119  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [ebp+8] +
mov [esi+4] eax +
and dword ptr [ebp-4] 0 +
push offset loc_101D524  +
lea ecx [ebp-84h] +
mov dword ptr [esi] offset off_104A554 +
call sub_101C6A3  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_1057CD4  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 0 +
call sub_101D302  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov ax [ecx+0Ch] +
retn   +
***
mov ax [ecx+0Eh] +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_104A554 +
call sub_1057B20  +
mov dword ptr [esi] offset off_102071C +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10586D0  +
test byte ptr [ebp+8] 1 +
jz loc_1058707  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi [ebp+8] +
test esi esi +
jz loc_105874D  +
cmp dword ptr [esi] 0 +
jnz loc_105874D  +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1058749  +
push 0  +
call sub_10579C4  +
jmp loc_105874B  +
xor eax eax +
mov [esi] eax +
push 4  +
pop eax  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi [ebp+8] +
test esi esi +
jz loc_1058795  +
cmp dword ptr [esi] 0 +
jnz loc_1058795  +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1058791  +
push 0  +
call sub_1058217  +
jmp loc_1058793  +
xor eax eax +
mov [esi] eax +
push 4  +
pop eax  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi [ebp+8] +
test esi esi +
jz loc_10587DD  +
cmp dword ptr [esi] 0 +
jnz loc_10587DD  +
push 18h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10587D9  +
push 0  +
call sub_1058661  +
jmp loc_10587DB  +
xor eax eax +
mov [esi] eax +
push 4  +
pop eax  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0exception@@QAE@XZ  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_104A524 +
call sub_104C1C6  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call ??0exception@@QAE@ABV0@@Z  +
and dword ptr [ebp-4] 0 +
add edi 0Ch +
push edi  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_104A524 +
call sub_104C1C6  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10587EB  +
mov dword ptr [esi] offset off_104A584 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_10576C7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_104A584 +
call sub_10576C7  +
test byte ptr [ebp+8] 1 +
jz loc_10588B6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1058825  +
mov dword ptr [esi] offset off_104A584 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 44h  +
mov eax offset loc_107FC34 +
call sub_100208C  +
push offset aVectorTTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push dword ptr [ecx+8]  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
call sub_101D8E7  +
mov eax [ebp+8] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push dword ptr [ecx+10h]  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
call sub_10142C5  +
mov eax [ebp+8] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push dword ptr [ecx+14h]  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
call sub_10142C5  +
mov eax [ebp+8] +
leave   +
retn 4  +
***
call sub_100208C  +
push 0  +
lea ecx [ebp-14h] +
call sub_1014DE0  +
mov esi dword_108EEBC +
and dword ptr [ebp-4] 0 +
mov ecx offset unk_108EED0 +
mov [ebp-10h] esi +
call sub_101C371  +
mov ecx [ebp+8] +
push eax  +
call sub_101BA83  +
mov edi eax +
test edi edi +
jnz loc_1058A3C  +
test esi esi +
jz loc_10589FB  +
mov edi esi +
jmp loc_1058A3C  +
lea eax [ebp-10h] +
push eax  +
call sub_1058713  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1058A25  +
push offset dword_104A544  +
lea ecx [ebp-20h] +
call sub_10568F1  +
push offset dword_108372C  +
lea eax [ebp-20h] +
push eax  +
call _CxxThrowException  +
mov edi [ebp-10h] +
mov ecx edi +
mov dword_108EEBC edi +
call sub_101D1FC  +
push edi  +
call sub_101C5E0  +
pop ecx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1014DB4  +
mov eax edi +
call sub_1002061  +
retn   +
***
call sub_100208C  +
push 0  +
lea ecx [ebp-14h] +
call sub_1014DE0  +
mov esi dword_108EEC0 +
and dword ptr [ebp-4] 0 +
mov ecx offset unk_108EECC +
mov [ebp-10h] esi +
call sub_101C371  +
mov ecx [ebp+8] +
push eax  +
call sub_101BA83  +
mov edi eax +
test edi edi +
jnz loc_1058ADA  +
test esi esi +
jz loc_1058A99  +
mov edi esi +
jmp loc_1058ADA  +
lea eax [ebp-10h] +
push eax  +
call sub_105875B  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1058AC3  +
push offset dword_104A544  +
lea ecx [ebp-20h] +
call sub_10568F1  +
push offset dword_108372C  +
lea eax [ebp-20h] +
push eax  +
call _CxxThrowException  +
mov edi [ebp-10h] +
mov ecx edi +
mov dword_108EEC0 edi +
call sub_101D1FC  +
push edi  +
call sub_101C5E0  +
pop ecx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1014DB4  +
mov eax edi +
call sub_1002061  +
retn   +
***
call sub_100208C  +
push 0  +
lea ecx [ebp-14h] +
call sub_1014DE0  +
mov esi dword_108EEC4 +
and dword ptr [ebp-4] 0 +
mov ecx offset unk_108EEC8 +
mov [ebp-10h] esi +
call sub_101C371  +
mov ecx [ebp+8] +
push eax  +
call sub_101BA83  +
mov edi eax +
test edi edi +
jnz loc_1058B78  +
test esi esi +
jz loc_1058B37  +
mov edi esi +
jmp loc_1058B78  +
lea eax [ebp-10h] +
push eax  +
call sub_10587A3  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1058B61  +
push offset dword_104A544  +
lea ecx [ebp-20h] +
call sub_10568F1  +
push offset dword_108372C  +
lea eax [ebp-20h] +
push eax  +
call _CxxThrowException  +
mov edi [ebp-10h] +
mov ecx edi +
mov dword_108EEC4 edi +
call sub_101D1FC  +
push edi  +
call sub_101C5E0  +
pop ecx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_1014DB4  +
mov eax edi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1058825  +
push offset dword_1058BB4  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
call sub_1002370  +
mov esi ecx +
mov [ebp-1Ch] esi +
push dword ptr [ebp+10h]  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@ABV0@@Z  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1013D61  +
mov edi [ebp+0Ch] +
mov [ebp+10h] eax +
test edi edi +
jz loc_1058DC2  +
mov ecx esi +
call sub_100B9A1  +
mov ecx 3FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jnb loc_1058C3C  +
call loc_1058901  +
add eax edi +
cmp [ebp+10h] eax +
jnb loc_1058D0A  +
mov edx [ebp+10h] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp+10h] +
jnb loc_1058C59  +
and dword ptr [ebp+10h] 0 +
jmp loc_1058C5C  +
add [ebp+10h] edx +
cmp [ebp+10h] eax +
jnb loc_1058C64  +
mov [ebp+10h] eax +
push 0  +
push dword ptr [ebp+10h]  +
call sub_1013BE9  +
mov ebx eax +
mov eax [esi+4] +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp-18h] ebx +
push eax  +
mov [ebp+0Ch] ebx +
mov byte ptr [ebp-4] 1 +
call sub_10575EC  +
lea ecx [ebp-14h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
mov [ebp+0Ch] eax +
call sub_105799E  +
push esi  +
mov [ebp+0Ch] eax +
push dword ptr [ebp+0Ch]  +
mov eax [esi+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_10575EC  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_100B9A1  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_1058CD3  +
mov ecx [esi+8] +
push esi  +
push ecx  +
push eax  +
call sub_10576A8  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+10h] +
lea eax [ebx+eax*4] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*4] +
mov [esi+8] eax +
mov [esi+4] ebx +
jmp loc_1058DC2  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-18h]  +
call sub_10576A8  +
push dword ptr [ebp-18h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
mov ebx [esi+8] +
mov ecx [ebp+8] +
mov eax ebx +
sub eax ecx +
sar eax 2 +
push esi  +
cmp eax edi +
jnb loc_1058D8D  +
mov eax edi +
shl eax 2 +
mov [ebp+10h] eax +
add eax ecx +
push eax  +
push ebx  +
push ecx  +
call sub_10575EC  +
mov eax [esi+8] +
lea ecx [ebp-14h] +
push ecx  +
mov ecx eax +
sub ecx [ebp+8] +
mov byte ptr [ebp-4] 3 +
sar ecx 2 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_105799E  +
mov eax [ebp+10h] +
add [esi+8] eax +
mov esi [esi+8] +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
push ecx  +
sub esi eax +
push esi  +
push dword ptr [ebp+8]  +
call sub_105624F  +
add esp 0Ch +
jmp loc_1058DC2  +
mov ecx [ebp-1Ch] +
mov eax [ebp+0Ch] +
push ecx  +
mov ecx [ecx+8] +
shl eax 2 +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
add eax ecx +
push eax  +
call sub_10576A8  +
jmp loc_1058D01  +
push ebx  +
shl edi 2 +
mov [ebp+0Ch] ebx +
sub [ebp+0Ch] edi +
push ebx  +
push dword ptr [ebp+0Ch]  +
call sub_10575EC  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov [esi+8] eax +
push dword ptr [ebp+8]  +
call sub_1056CF1  +
lea eax [ebp-14h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_105624F  +
add esp 18h +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
call sub_1002061  +
retn 0Ch  +
***
push 50h  +
mov eax (offset loc_107B4E8+1) +
call sub_10020DC  +
mov esi [ebp+14h] +
test dword ptr [esi+10h] 4000h +
mov edi [ebp+8] +
mov [ebp-30h] ecx +
mov [ebp-34h] edi +
jnz loc_1058E18  +
movzx edx byte ptr [ebp+1Ch] +
mov eax [ecx] +
push edx  +
push dword ptr [ebp+18h]  +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call dword ptr [eax+1Ch]  +
mov eax edi +
jmp loc_1058F1C  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx esi +
call sub_101D1BB  +
xor ebx ebx +
push eax  +
mov [ebp-4] ebx +
call sub_1058AF3  +
pop ecx  +
lea ecx [ebp-3Ch] +
mov [ebp-38h] eax +
call sub_1014D59  +
lea ecx [ebp-2Ch] +
call sub_101CA24  +
mov ecx [ebp-38h] +
xor edi edi +
inc edi  +
lea eax [ebp-5Ch] +
mov [ebp-4] edi +
push eax  +
cmp [ebp+1Ch] bl +
jz loc_1058E5F  +
call near ptr byte_1057FB0+1  +
mov byte ptr [ebp-4] 2 +
jmp loc_1058E68  +
call near ptr dword_1057F90+3  +
mov byte ptr [ebp-4] 3 +
push 0FFFFFFFFh  +
push ebx  +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1014F52  +
push ebx  +
push edi  +
lea ecx [ebp-5Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1012F94  +
mov eax [esi+18h] +
cmp eax ebx +
jle loc_1058E95  +
cmp eax [ebp-18h] +
jbe loc_1058E95  +
sub eax [ebp-18h] +
mov edi eax +
jmp loc_1058E97  +
xor edi edi +
mov eax [esi+10h] +
and eax 1C0h +
cmp eax 40h +
jz loc_1058ECA  +
push edi  +
push dword ptr [ebp+18h]  +
lea eax [ebp-40h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
push dword ptr [ebp-30h]  +
call sub_1057E77  +
mov ecx [eax] +
mov [ebp+0Ch] ecx +
mov eax [eax+4] +
add esp 18h +
mov [ebp+10h] eax +
xor edi edi +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1058ED6  +
lea eax [ebp-28h] +
push dword ptr [ebp-18h]  +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-40h] +
push dword ptr [ebp+0Ch]  +
push eax  +
push dword ptr [ebp-30h]  +
call near ptr dword_1057E38+3  +
mov ecx [eax] +
push edi  +
push dword ptr [ebp+18h]  +
mov [ebp+0Ch] ecx +
mov eax [eax+4] +
push eax  +
push ecx  +
push dword ptr [ebp-34h]  +
mov [ebp+10h] eax +
push dword ptr [ebp-30h]  +
mov [esi+18h] ebx +
call sub_1057E77  +
add esp 30h +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
mov eax [ebp-34h] +
call sub_1002119  +
retn 18h  +
***
call sub_10020DC  +
mov eax [ebp+0Ch] +
mov ecx [ebp+18h] +
mov edi [ebp+8] +
mov esi [ebp+20h] +
mov [ebp-74h] eax +
lea eax [ebp-78h] +
push eax  +
mov [ebp-60h] ecx +
call sub_101D1BB  +
and dword ptr [ebp-4] 0 +
push eax  +
call sub_1058AF3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov ebx eax +
lea ecx [ebp-78h] +
mov [ebp-64h] ebx +
call sub_1014D59  +
lea eax [ebp-48h] +
push eax  +
mov ecx ebx +
call sub_10580C4  +
mov eax [ebx] +
mov ecx ebx +
mov dword ptr [ebp-4] 1 +
call dword ptr [eax+8]  +
movzx eax ax +
lea ecx [ebp-2Ch] +
mov [ebp-6Ch] eax +
call sub_101C6FD  +
lea eax [edi+8] +
push eax  +
xor ebx ebx +
push ebx  +
push 30h  +
mov byte ptr [ebp-4] 2 +
call sub_1057B81  +
movzx eax ax +
mov [ebp-54h] eax +
mov al [esi] +
add esp 0Ch +
cmp al 2Bh +
jz loc_1058FBB  +
mov [ebp-70h] ebx +
cmp al 2Dh +
jnz loc_1058FC2  +
mov dword ptr [ebp-70h] 1 +
call ds:localeconv  +
mov eax [eax] +
push dword ptr [ebp+30h]  +
mov al [eax] +
push 65h  +
push esi  +
mov [ebp-50h] al +
mov byte ptr [ebp-4Fh] 65h +
mov [ebp-4Eh] bl +
call ds:memchr  +
push dword ptr [ebp+30h]  +
mov [ebp-58h] eax +
movsx eax byte ptr [ebp-50h] +
push eax  +
push esi  +
call ds:memchr  +
add esp 18h +
mov [ebp-4Ch] eax +
cmp eax ebx +
jnz loc_1059001  +
mov [ebp+2Ch] ebx +
cmp dword ptr [ebp-30h] 10h +
mov eax [ebp-44h] +
jnb loc_105900D  +
lea eax [ebp-44h] +
cmp byte ptr [eax] 7Fh +
jz loc_105911D  +
cmp dword ptr [ebp-30h] 10h +
mov eax [ebp-44h] +
jnb loc_1059022  +
lea eax [ebp-44h] +
cmp [eax] bl +
jle loc_105911D  +
push dword ptr [ebp+30h]  +
lea ecx [ebp-2Ch] +
push esi  +
call sub_1058180  +
mov eax [ebp-58h] +
cmp eax ebx +
jnz loc_105904C  +
push 30h  +
push dword ptr [ebp+2Ch]  +
lea ecx [ebp-2Ch] +
call sub_1057FCF  +
jmp loc_1059074  +
cmp [ebp-4Ch] ebx +
jnz loc_1059064  +
push 30h  +
push dword ptr [ebp+24h]  +
lea ecx [ebp-2Ch] +
call sub_1057FCF  +
mov eax [ebp-58h] +
mov [ebp+24h] ebx +
push 30h  +
push dword ptr [ebp+2Ch]  +
sub eax esi +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1058026  +
push 30h  +
lea ecx [ebp-2Ch] +
cmp [ebp-4Ch] ebx +
jnz loc_1059088  +
push dword ptr [ebp+24h]  +
call sub_1057FCF  +
jmp loc_10590AD  +
mov ebx [ebp-4Ch] +
push dword ptr [ebp+28h]  +
sub ebx esi +
lea eax [ebx+1] +
push eax  +
call sub_1058026  +
push 30h  +
push dword ptr [ebp+24h]  +
lea ecx [ebp-2Ch] +
push ebx  +
call sub_1058026  +
and dword ptr [ebp+28h] 0 +
xor ebx ebx +
cmp dword ptr [ebp-30h] 10h +
mov esi [ebp-44h] +
mov [ebp+24h] ebx +
jnb loc_10590BC  +
lea esi [ebp-44h] +
lea eax [ebp-50h] +
push eax  +
push ebx  +
lea ecx [ebp-2Ch] +
call sub_1057C62  +
push eax  +
call ds:strcspn  +
pop ecx  +
pop ecx  +
mov [ebp-4Ch] eax +
jmp loc_1059103  +
test al al +
jle loc_1059109  +
mov ecx [ebp-4Ch] +
sub ecx [ebp-70h] +
movsx eax al +
cmp eax ecx +
jnb loc_1059109  +
sub [ebp-4Ch] eax +
push ebx  +
push 1  +
push dword ptr [ebp-4Ch]  +
lea ecx [ebp-2Ch] +
call sub_1058026  +
lea eax [esi+1] +
cmp byte ptr [eax] 0 +
jle loc_1059103  +
mov esi eax +
mov al [esi] +
cmp al 7Fh +
jnz loc_10590D7  +
push ebx  +
lea ecx [ebp-2Ch] +
call sub_1057C62  +
mov esi eax +
mov eax [ebp-18h] +
mov [ebp+2Ch] ebx +
mov [ebp+30h] eax +
mov ecx [ebp+28h] +
mov eax [ebp+24h] +
mov edx [ebp-60h] +
add eax ecx +
add eax [ebp+2Ch] +
mov ecx [edx+18h] +
add eax [ebp+30h] +
cmp ecx ebx +
jle loc_1059140  +
cmp ecx eax +
jbe loc_1059140  +
sub ecx eax +
mov [ebp-4Ch] ecx +
jmp loc_1059143  +
mov [ebp-4Ch] ebx +
mov eax [edx+10h] +
and eax 1C0h +
cmp eax 40h +
jz loc_10591A8  +
cmp eax 100h +
jnz loc_1059181  +
cmp [ebp-70h] ebx +
jbe loc_1059181  +
push 1  +
push esi  +
push dword ptr [ebp+14h]  +
lea eax [ebp-5Ch] +
push dword ptr [ebp+10h]  +
push eax  +
push edi  +
call sub_1057EA7  +
mov ecx [eax] +
add esp 18h +
mov [ebp+10h] ecx +
mov eax [eax+4] +
inc esi  +
dec dword ptr [ebp+30h]  +
mov [ebp+14h] eax +
push dword ptr [ebp-4Ch]  +
lea eax [ebp-5Ch] +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
push edi  +
call sub_1057E77  +
mov ecx [eax] +
mov [ebp+10h] ecx +
mov eax [eax+4] +
mov [ebp-4Ch] ebx +
mov [ebp+14h] eax +
add esp 18h +
movsx eax byte ptr [ebp-50h] +
push dword ptr [ebp+30h]  +
push eax  +
push esi  +
call ds:memchr  +
add esp 0Ch +
cmp eax ebx +
jz loc_1059260  +
push dword ptr [ebp-6Ch]  +
sub eax esi +
inc eax  +
mov ebx eax +
lea eax [ebx-1] +
push eax  +
push esi  +
push dword ptr [ebp+14h]  +
lea eax [ebp-5Ch] +
push dword ptr [ebp+10h]  +
push eax  +
push edi  +
call sub_1057EF9  +
mov ecx [eax] +
push dword ptr [ebp+24h]  +
mov [ebp+10h] ecx +
push dword ptr [ebp-54h]  +
mov ecx [eax+4] +
mov [ebp+14h] ecx +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
lea eax [ebp-5Ch] +
push eax  +
push edi  +
call sub_1057E77  +
mov ecx [eax] +
mov [ebp+10h] ecx +
mov eax [eax+4] +
mov ecx [ebp-64h] +
mov [ebp+14h] eax +
mov eax [ecx] +
add esp 34h +
call dword ptr [eax+4]  +
movzx eax ax +
push 1  +
push eax  +
push dword ptr [ebp+14h]  +
lea eax [ebp-68h] +
push dword ptr [ebp+10h]  +
push eax  +
push edi  +
call sub_1057E77  +
mov ecx [eax] +
push dword ptr [ebp+28h]  +
mov [ebp+10h] ecx +
push dword ptr [ebp-54h]  +
mov ecx [eax+4] +
mov [ebp+14h] ecx +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
lea eax [ebp-68h] +
push eax  +
push edi  +
call sub_1057E77  +
mov ecx [eax] +
sub [ebp+30h] ebx +
mov [ebp+10h] ecx +
mov eax [eax+4] +
add esp 30h +
add esi ebx +
mov [ebp+14h] eax +
xor ebx ebx +
push dword ptr [ebp+30h]  +
push 65h  +
push esi  +
call ds:memchr  +
add esp 0Ch +
cmp eax ebx +
jz loc_1059300  +
push dword ptr [ebp-6Ch]  +
sub eax esi +
inc eax  +
mov ebx eax +
lea eax [ebx-1] +
push eax  +
push esi  +
push dword ptr [ebp+14h]  +
lea eax [ebp-68h] +
push dword ptr [ebp+10h]  +
push eax  +
push edi  +
call sub_1057EF9  +
mov ecx [eax] +
push dword ptr [ebp+2Ch]  +
mov [ebp+10h] ecx +
push dword ptr [ebp-54h]  +
mov ecx [eax+4] +
mov [ebp+14h] ecx +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
lea eax [ebp-68h] +
push eax  +
push edi  +
call sub_1057E77  +
mov ecx [eax] +
and dword ptr [ebp+2Ch] 0 +
mov [ebp+10h] ecx +
mov ecx [eax+4] +
mov [ebp+14h] ecx +
mov ecx [ebp-60h] +
add esp 34h +
test byte ptr [ecx+10h] 4 +
mov ecx (offset loc_105937C+4) +
jnz loc_10592D9  +
mov ecx offset loc_105937C +
push 1  +
push ecx  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
lea eax [ebp-68h] +
push eax  +
push edi  +
call sub_1057EA7  +
mov ecx [eax] +
sub [ebp+30h] ebx +
mov [ebp+10h] ecx +
mov eax [eax+4] +
add esp 18h +
add esi ebx +
mov [ebp+14h] eax +
xor ebx ebx +
push dword ptr [ebp-6Ch]  +
lea eax [ebp-68h] +
push dword ptr [ebp+30h]  +
push esi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
push edi  +
call sub_1057EF9  +
mov ecx [eax] +
push dword ptr [ebp+2Ch]  +
mov [ebp+10h] ecx +
push dword ptr [ebp-54h]  +
mov ecx [eax+4] +
mov [ebp+14h] ecx +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
lea eax [ebp-5Ch] +
push eax  +
push edi  +
call sub_1057E77  +
mov ecx [eax] +
push dword ptr [ebp-4Ch]  +
mov edx [ebp-60h] +
push dword ptr [ebp+1Ch]  +
mov [ebp+10h] ecx +
mov eax [eax+4] +
push eax  +
push ecx  +
push dword ptr [ebp-74h]  +
mov [ebp+14h] eax +
push edi  +
mov [edx+18h] ebx +
call sub_1057E77  +
add esp 4Ch +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1014D01  +
push ebx  +
push 1  +
lea ecx [ebp-48h] +
call sub_1014D01  +
mov eax [ebp-74h] +
call sub_1002119  +
retn   +
***
call sub_10020DC  +
mov eax [ebp+8] +
mov ebx [ebp+18h] +
mov esi [ebp+20h] +
mov [ebp-34h] eax +
mov eax [ebp+0Ch] +
mov [ebp-4Ch] eax +
lea eax [ebp-50h] +
push eax  +
mov ecx ebx +
mov [ebp-40h] ebx +
call sub_101D1BB  +
and dword ptr [ebp-4] 0 +
push eax  +
call sub_1058AF3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
lea ecx [ebp-50h] +
mov [ebp-48h] eax +
call sub_1014D59  +
mov ecx [ebp-48h] +
lea eax [ebp-2Ch] +
push eax  +
call sub_10580C4  +
mov al [esi] +
xor ecx ecx +
inc ecx  +
mov [ebp-4] ecx +
cmp al 2Bh +
jz loc_1059407  +
cmp al 2Dh +
jz loc_1059407  +
cmp al 30h +
jnz loc_1059401  +
mov al [esi+1] +
cmp al 78h +
jz loc_10593F8  +
cmp al 58h +
jnz loc_1059401  +
mov dword ptr [ebp-38h] 2 +
jmp loc_105940A  +
and dword ptr [ebp-38h] 0 +
jmp loc_105940A  +
mov [ebp-38h] ecx +
cmp dword ptr [ebp-14h] 10h +
mov ecx [ebp-28h] +
mov eax ecx +
jnb loc_1059418  +
lea eax [ebp-28h] +
cmp byte ptr [eax] 7Fh +
jz loc_105948C  +
cmp dword ptr [ebp-14h] 10h +
mov eax ecx +
jnb loc_1059428  +
lea eax [ebp-28h] +
cmp byte ptr [eax] 0 +
jle loc_105948C  +
cmp dword ptr [ebp-14h] 10h +
jb loc_1059438  +
mov [ebp-30h] ecx +
jmp loc_105943E  +
lea eax [ebp-28h] +
mov [ebp-30h] eax +
mov edi [ebp+24h] +
jmp loc_1059483  +
test al al +
jle loc_105948C  +
mov ecx edi +
sub ecx [ebp-38h] +
movsx eax al +
cmp eax ecx +
jnb loc_105948C  +
sub edi eax +
mov eax [ebp+24h] +
sub eax edi +
inc eax  +
push eax  +
lea ebx [esi+edi] +
push ebx  +
push eax  +
lea eax [esi+edi+1] +
push eax  +
call memmove_s  +
mov eax [ebp-30h] +
add esp 10h +
inc dword ptr [ebp+24h]  +
inc eax  +
mov byte ptr [ebx] 0 +
cmp byte ptr [eax] 0 +
jle loc_1059480  +
mov [ebp-30h] eax +
mov ebx [ebp-40h] +
mov eax [ebp-30h] +
mov al [eax] +
cmp al 7Fh +
jnz loc_1059443  +
mov edi [ebx+18h] +
test edi edi +
jle loc_105949D  +
cmp edi [ebp+24h] +
jbe loc_105949D  +
sub edi [ebp+24h] +
jmp loc_105949F  +
xor edi edi +
mov eax [ebx+10h] +
and eax 1C0h +
cmp eax 40h +
jz loc_1059519  +
cmp eax 100h +
lea eax [ebp-44h] +
jz loc_10594CE  +
push edi  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
push dword ptr [ebp-34h]  +
call sub_1057E77  +
add esp 18h +
jmp loc_105950C  +
push dword ptr [ebp-38h]  +
push esi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
push dword ptr [ebp-34h]  +
call sub_1057EA7  +
mov ecx [eax] +
push edi  +
push dword ptr [ebp+1Ch]  +
mov [ebp+10h] ecx +
mov ecx [eax+4] +
mov [ebp+14h] ecx +
push dword ptr [eax+4]  +
mov ecx [ebp-38h] +
push dword ptr [eax]  +
sub [ebp+24h] ecx +
lea eax [ebp-44h] +
push eax  +
push dword ptr [ebp-34h]  +
add esi ecx +
call sub_1057E77  +
add esp 30h +
mov ecx [eax] +
mov [ebp+10h] ecx +
mov eax [eax+4] +
xor edi edi +
mov [ebp+14h] eax +
mov ecx [ebp-48h] +
mov eax [ecx] +
call dword ptr [eax+8]  +
movzx eax ax +
push eax  +
push dword ptr [ebp+24h]  +
lea eax [ebp-3Ch] +
push esi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
push dword ptr [ebp-34h]  +
call sub_1057EF9  +
mov ecx [eax] +
push edi  +
push dword ptr [ebp+1Ch]  +
mov [ebp+10h] ecx +
mov eax [eax+4] +
and dword ptr [ebx+18h] 0 +
push eax  +
push ecx  +
push dword ptr [ebp-4Ch]  +
mov [ebp+14h] eax +
push dword ptr [ebp-34h]  +
call sub_1057E77  +
add esp 34h +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1014D01  +
mov eax [ebp-4Ch] +
call sub_1002119  +
retn   +
***
rcl byte ptr [eax+68h] 0B8h +
stos   +
add al 1 +
call ds:memchr  +
add esp 14h +
test eax eax +
jz loc_10597D2  +
cmp byte ptr [ebp-49h] 0 +
jnz loc_10597AB  +
cmp byte ptr [esi] 30h +
jz loc_10597BA  +
lea eax [edi+1Fh] +
cmp esi eax +
jnb loc_10597BA  +
inc esi  +
mov [ebp-5Ch] esi +
mov byte ptr [ebp-49h] 1 +
push dword ptr [ebp-50h]  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-58h] 1 +
call sub_1057C62  +
cmp byte ptr [eax] 7Fh +
jz loc_1059805  +
inc byte ptr [eax]  +
jmp loc_1059805  +
push dword ptr [ebp-50h]  +
lea ecx [ebp-2Ch] +
call sub_1057C62  +
cmp byte ptr [eax] 0 +
jz loc_105981F  +
cmp word ptr [ebp-68h] 0 +
jz loc_105981F  +
mov ecx ebx +
call near ptr dword_10583E8+4  +
cmp ax [ebp-68h] +
jnz loc_105981F  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1057FCF  +
inc dword ptr [ebp-50h]  +
mov ecx ebx +
call near ptr dword_1058340+5  +
push dword ptr [ebp-64h]  +
push ebx  +
call near ptr dword_10583E8+1Fh  +
pop ecx  +
pop ecx  +
test al al +
jnz near ptr dword_1059580+1EFh  +
cmp dword ptr [ebp-50h] 0 +
jz loc_105983E  +
push dword ptr [ebp-50h]  +
lea ecx [ebp-2Ch] +
call sub_1057C62  +
cmp byte ptr [eax] 0 +
jle loc_105983A  +
inc dword ptr [ebp-50h]  +
jmp loc_105983E  +
mov byte ptr [ebp-58h] 0 +
cmp dword ptr [ebp-30h] 10h +
mov esi [ebp-44h] +
jnb loc_105984A  +
lea esi [ebp-44h] +
cmp byte ptr [ebp-58h] 0 +
jz loc_10598A3  +
cmp dword ptr [ebp-50h] 0 +
jbe loc_1059892  +
mov bl [esi] +
cmp bl 7Fh +
jz loc_1059892  +
dec dword ptr [ebp-50h]  +
jz loc_1059871  +
push dword ptr [ebp-50h]  +
lea ecx [ebp-2Ch] +
call sub_1057C62  +
cmp bl [eax] +
jnz loc_10598A3  +
cmp dword ptr [ebp-50h] 0 +
jnz loc_1059886  +
push dword ptr [ebp-50h]  +
lea ecx [ebp-2Ch] +
call sub_1057C62  +
cmp bl [eax] +
jl loc_10598A3  +
lea eax [esi+1] +
cmp byte ptr [eax] 0 +
jle loc_1059850  +
mov esi eax +
jmp loc_1059850  +
***
cmp byte ptr [ebp-49h] 0 +
jnz loc_10598A6  +
mov eax [ebp-5Ch] +
inc dword ptr [ebp-5Ch]  +
mov byte ptr [eax] 30h +
jmp loc_10598A6  +
mov [ebp-5Ch] edi +
mov eax [ebp-5Ch] +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
mov byte ptr [eax] 0 +
call sub_1014D01  +
push 0  +
push 1  +
lea ecx [ebp-48h] +
call sub_1014D01  +
mov eax [ebp-54h] +
call sub_1002119  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_100B9A1  +
test eax eax +
jnz loc_1059E38  +
xor esi esi +
jmp loc_1059E41  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 2 +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_1058BEE  +
mov eax [edi+4] +
lea ecx [eax+esi*4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+14h] +
mov eax [esi+10h] +
push edi  +
push dword ptr [ebp+1Ch]  +
mov edi [ebp+8] +
push eax  +
push offset dword_1059ED4  +
lea eax [ebp-0Ch] +
mov ebx ecx +
push eax  +
push ebx  +
call sub_1057AA4  +
add esp 10h +
push eax  +
lea eax [ebp-4Ch] +
push 40h  +
push eax  +
call sprintf_s  +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push dword ptr [ebp+18h]  +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
push ebx  +
call sub_1059387  +
mov ecx [ebp-4] +
add esp 30h +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+14h] +
mov eax [esi+10h] +
push edi  +
push dword ptr [ebp+1Ch]  +
mov edi [ebp+8] +
push eax  +
push offset dword_1059F4C  +
lea eax [ebp-0Ch] +
mov ebx ecx +
push eax  +
push ebx  +
call sub_1057AA4  +
add esp 10h +
push eax  +
lea eax [ebp-4Ch] +
push 40h  +
push eax  +
call sprintf_s  +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push dword ptr [ebp+18h]  +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
push ebx  +
call sub_1059387  +
mov ecx [ebp-4] +
add esp 30h +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+14h] +
mov eax [esi+10h] +
push edi  +
push dword ptr [ebp+20h]  +
mov edi [ebp+8] +
push dword ptr [ebp+1Ch]  +
mov ebx ecx +
push eax  +
push offset dword_1059FC8  +
lea eax [ebp-0Ch] +
push eax  +
push ebx  +
call sub_1057AA4  +
add esp 10h +
push eax  +
lea eax [ebp-4Ch] +
push 40h  +
push eax  +
call sprintf_s  +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push dword ptr [ebp+18h]  +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
push ebx  +
call sub_1059387  +
mov ecx [ebp-4] +
add esp 34h +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+14h] +
mov eax [esi+10h] +
push edi  +
push dword ptr [ebp+20h]  +
mov edi [ebp+8] +
push dword ptr [ebp+1Ch]  +
mov ebx ecx +
push eax  +
push offset dword_105A044  +
lea eax [ebp-0Ch] +
push eax  +
push ebx  +
call sub_1057AA4  +
add esp 10h +
push eax  +
lea eax [ebp-4Ch] +
push 40h  +
push eax  +
call sprintf_s  +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push dword ptr [ebp+18h]  +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
push ebx  +
call sub_1059387  +
mov ecx [ebp-4] +
add esp 34h +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 88h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
push ebx  +
push esi  +
mov esi [ebp+14h] +
mov [ebp-84h] ecx +
mov ecx [esi+14h] +
xor ebx ebx +
cmp ecx ebx +
mov [ebp-88h] eax +
push edi  +
mov eax 2000h +
jg loc_105A08C  +
test [esi+10h] eax +
jnz loc_105A08C  +
push 6  +
pop ecx  +
mov edi ecx +
push 24h  +
pop ecx  +
cmp edi ecx +
mov [ebp-8] ecx +
jg loc_105A09B  +
mov [ebp-8] edi +
mov ecx [esi+10h] +
sub edi [ebp-8] +
mov edx ecx +
and edx 3000h +
mov [ebp-80h] ebx +
cmp edx eax +
jnz loc_105A140  +
fldz   +
fld  qword ptr [ebp+1Ch] +
fcom  st(1) +
fnstsw  ax +
test ah 5 +
jp loc_105A0E4  +
mov byte ptr [ebp-79h] 1 +
fchs   +
fld  ds:dbl_104A5B8 +
push 0Ah  +
fcom  st(1) +
pop edx  +
fnstsw  ax +
fld  ds:dbl_104A5B0 +
test ah 41h +
jnp loc_105A0EB  +
fstp  st(1) +
jmp loc_105A106  +
mov [ebp-79h] bl +
jmp loc_105A0C8  +
***
fxch  st(1) +
cmp dword ptr [ebp-80h] 1388h +
jnb loc_105A0E0  +
fdiv st(2) st +
add [ebp-80h] edx +
fxch  st(1) +
fcom  st(2) +
fnstsw  ax +
test ah 41h +
jnp loc_105A0E9  +
fstp  st +
fxch  st(2) +
fcomp  st(1) +
fnstsw  ax +
test ah 5 +
jp loc_105A134  +
cmp edi edx +
jl loc_105A134  +
fld  ds:dbl_104A5A8 +
fcomp  st(1) +
fnstsw  ax +
test ah 1 +
jnz loc_105A134  +
cmp ebx 1388h +
jnb loc_105A134  +
sub edi edx +
fmul st st(1) +
add ebx edx +
jmp loc_105A111  +
***
cmp byte ptr [ebp-79h] 0 +
fstp  st(1) +
jz loc_105A143  +
fchs   +
jmp loc_105A143  +
fld  qword ptr [ebp+1Ch] +
push ecx  +
push ecx  +
fstp  qword ptr [esp] +
push dword ptr [ebp-8]  +
lea eax [ebp-0Ch] +
push ecx  +
push 0  +
push eax  +
push dword ptr [ebp-84h]  +
call sub_1057A41  +
add esp 10h +
push eax  +
lea eax [ebp-78h] +
push 6Ch  +
push eax  +
call sprintf_s  +
push eax  +
push edi  +
push ebx  +
push dword ptr [ebp-80h]  +
lea eax [ebp-78h] +
push eax  +
push dword ptr [ebp+18h]  +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-88h]  +
push dword ptr [ebp-84h]  +
call sub_1058F29  +
mov ecx [ebp-4] +
mov eax [ebp-88h] +
add esp 44h +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8Ch +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
push esi  +
mov esi [ebp+14h] +
mov [ebp-88h] ecx +
mov ecx [esi+14h] +
mov [ebp-8Ch] eax +
push edi  +
mov eax 2000h +
test ecx ecx +
jg loc_105A1ED  +
test [esi+10h] eax +
jnz loc_105A1ED  +
push 6  +
pop ecx  +
mov edi ecx +
push 24h  +
pop ecx  +
cmp edi ecx +
mov [ebp-8] ecx +
jg loc_105A1FC  +
mov [ebp-8] edi +
mov ecx [esi+10h] +
sub edi [ebp-8] +
and dword ptr [ebp-80h] 0 +
and dword ptr [ebp-84h] 0 +
mov edx ecx +
and edx 3000h +
cmp edx eax +
jnz loc_105A2B1  +
fldz   +
fld  qword ptr [ebp+1Ch] +
fcom  st(1) +
fnstsw  ax +
test ah 5 +
jp loc_105A253  +
mov byte ptr [ebp-79h] 1 +
fchs   +
fld  ds:dbl_104A5B8 +
push ebx  +
fcom  st(1) +
push 0Ah  +
mov ebx 1388h +
pop edx  +
fnstsw  ax +
fld  ds:dbl_104A5B0 +
test ah 41h +
jnp loc_105A25B  +
fstp  st(1) +
jmp loc_105A272  +
mov byte ptr [ebp-79h] 0 +
jmp loc_105A231  +
***
fxch  st(1) +
cmp [ebp-80h] ebx +
jnb loc_105A24F  +
fdiv st(2) st +
add [ebp-80h] edx +
fxch  st(1) +
fcom  st(2) +
fnstsw  ax +
test ah 41h +
jnp loc_105A259  +
fstp  st +
fxch  st(2) +
fcomp  st(1) +
fnstsw  ax +
test ah 5 +
jp loc_105A2A4  +
cmp edi edx +
jl loc_105A2A4  +
fld  ds:dbl_104A5A8 +
fcomp  st(1) +
fnstsw  ax +
test ah 1 +
jnz loc_105A2A4  +
cmp [ebp-84h] ebx +
jnb loc_105A2A4  +
sub edi edx +
fmul st st(1) +
add [ebp-84h] edx +
jmp loc_105A27D  +
***
cmp byte ptr [ebp-79h] 0 +
fstp  st(1) +
pop ebx  +
jz loc_105A2B4  +
fchs   +
jmp loc_105A2B4  +
fld  qword ptr [ebp+1Ch] +
push ecx  +
push ecx  +
fstp  qword ptr [esp] +
push dword ptr [ebp-8]  +
lea eax [ebp-0Ch] +
push ecx  +
push 4Ch  +
push eax  +
push dword ptr [ebp-88h]  +
call sub_1057A41  +
add esp 10h +
push eax  +
lea eax [ebp-78h] +
push 6Ch  +
push eax  +
call sprintf_s  +
push eax  +
push edi  +
push dword ptr [ebp-84h]  +
lea eax [ebp-78h] +
push dword ptr [ebp-80h]  +
push eax  +
push dword ptr [ebp+18h]  +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-8Ch]  +
push dword ptr [ebp-88h]  +
call sub_1058F29  +
mov ecx [ebp-4] +
mov eax [ebp-8Ch] +
add esp 44h +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100207A  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+1Ch] +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+14h] +
push eax  +
push offset dword_105A384  +
lea eax [ebp-44h] +
push 40h  +
push eax  +
mov ebx ecx +
call sprintf_s  +
push eax  +
lea eax [ebp-44h] +
push eax  +
push dword ptr [ebp+18h]  +
push edi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push esi  +
push ebx  +
call sub_1059387  +
mov ecx [ebp-4] +
add esp 30h +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 18h  +
***
call ds:_strtoi64  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 24h +
lea ecx [ebp-44h] +
mov esi eax +
mov [ebp-3Ch] edx +
call sub_1014D59  +
lea eax [ebp+14h] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_10583A8  +
test al al +
jz loc_105A8B5  +
or dword ptr [ebx] 1 +
lea eax [ebp-30h] +
cmp [ebp-34h] eax +
jz loc_105A8C7  +
mov eax [ebp-3Ch] +
mov [edi] esi +
mov [edi+4] eax +
jmp loc_105A8CA  +
or dword ptr [ebx] 2 +
mov ecx [ebp+0Ch] +
mov eax [ebp-38h] +
mov [eax] ecx +
mov ecx [ebp+10h] +
mov [eax+4] ecx +
call sub_1002119  +
retn 20h  +
***
call ds:_strtoui64  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 24h +
lea ecx [ebp-44h] +
mov esi eax +
mov [ebp-3Ch] edx +
call sub_1014D59  +
lea eax [ebp+14h] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_10583A8  +
test al al +
jz loc_105A961  +
or dword ptr [ebx] 1 +
lea eax [ebp-30h] +
cmp [ebp-34h] eax +
jz loc_105A973  +
mov eax [ebp-3Ch] +
mov [edi] esi +
mov [edi+4] eax +
jmp loc_105A976  +
or dword ptr [ebx] 2 +
mov ecx [ebp+0Ch] +
mov eax [ebp-38h] +
mov [eax] ecx +
mov ecx [ebp+10h] +
mov [eax+4] ecx +
call sub_1002119  +
retn 20h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
mov eax [eax+4] +
push edi  +
add eax esi +
xor edi edi +
test byte ptr [eax+8] 6 +
jnz loc_105AC7A  +
mov eax [eax+28h] +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+2Ch]  +
cmp eax 0FFFFFFFFh +
jnz loc_105AC7A  +
push 4  +
pop edi  +
mov eax [esi] +
mov ecx [eax+4] +
push 0  +
push edi  +
add ecx esi +
call sub_101D395  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
call sub_100208C  +
mov edi ecx +
mov [ebp-10h] edi +
mov esi [ebp+8] +
push esi  +
call sub_101D22B  +
mov eax [esi] +
mov eax [eax+4] +
and dword ptr [ebp-4] 0 +
add eax esi +
cmp dword ptr [eax+8] 0 +
jnz loc_105ACCC  +
mov eax [eax+2Ch] +
test eax eax +
jz loc_105ACCC  +
mov ecx eax +
call sub_105AC53  +
mov eax [esi] +
mov eax [eax+4] +
cmp dword ptr [eax+esi+8] 0 +
setz al  +
mov [edi+4] al +
mov eax edi +
call sub_1002061  +
retn 4  +
***
call sub_1002370  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_100B9A1  +
mov ecx esi +
mov edi eax +
call sub_1013D61  +
push dword ptr [ebp+8]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jnb loc_105AD4D  +
push 1  +
push eax  +
call sub_105799E  +
mov [esi+8] eax +
jmp loc_105AD57  +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1059E22  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
call sub_106CB1F  +
test eax eax +
jnz loc_105AD87  +
mov ecx [esi] +
call sub_105ACEB  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101BFD4  +
call sub_1002061  +
retn   +
***
retn   +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
xor ebx ebx +
push esi  +
lea ecx [ebp-24h] +
mov [ebp-18h] ebx +
call sub_105AC93  +
mov [ebp-4] ebx +
cmp [ebp-20h] bl +
jz loc_105AED9  +
lea eax [ebp-1Ch] +
push eax  +
mov eax [esi] +
mov ecx [eax+4] +
add ecx esi +
call sub_101D1BB  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_10589B7  +
pop ecx  +
lea ecx [ebp-1Ch] +
mov edi eax +
call sub_1014D59  +
mov ecx [esi] +
mov eax [ecx+4] +
mov ecx [ecx+4] +
push dword ptr [ebp+8]  +
add ecx esi +
movzx edx word ptr [ecx+30h] +
mov ecx [ecx+28h] +
push edx  +
add eax esi +
push eax  +
push ecx  +
mov [ebp-2Ch] bl +
push dword ptr [ebp-2Ch]  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_1056A7E  +
cmp [eax] bl +
jz loc_105AEAD  +
mov dword ptr [ebp-18h] 4 +
mov [ebp-4] ebx +
jmp loc_105AED9  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx+4] +
add ecx eax +
mov eax [ecx+8] +
push 1  +
or eax 4 +
push eax  +
call sub_101D3B8  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_105AED4 +
retn   +
mov esi [ebp-14h] +
xor ebx ebx +
mov eax [esi] +
mov ecx [eax+4] +
push ebx  +
push dword ptr [ebp-18h]  +
add ecx esi +
call sub_101D395  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call sub_105AD62  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
xor ebx ebx +
push esi  +
lea ecx [ebp-24h] +
mov [ebp-18h] ebx +
call sub_105AC93  +
mov [ebp-4] ebx +
cmp [ebp-20h] bl +
jz loc_105AFB9  +
lea eax [ebp-1Ch] +
push eax  +
mov eax [esi] +
mov ecx [eax+4] +
add ecx esi +
call sub_101D1BB  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_10589B7  +
pop ecx  +
lea ecx [ebp-1Ch] +
mov edi eax +
call sub_1014D59  +
mov ecx [esi] +
mov eax [ecx+4] +
mov ecx [ecx+4] +
push dword ptr [ebp+8]  +
add ecx esi +
movzx edx word ptr [ecx+30h] +
mov ecx [ecx+28h] +
push edx  +
add eax esi +
push eax  +
push ecx  +
mov [ebp-2Ch] bl +
push dword ptr [ebp-2Ch]  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_105689B  +
cmp [eax] bl +
jz loc_105AF8D  +
mov dword ptr [ebp-18h] 4 +
mov [ebp-4] ebx +
jmp loc_105AFB9  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx+4] +
add ecx eax +
mov eax [ecx+8] +
push 1  +
or eax 4 +
push eax  +
call sub_101D3B8  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_105AFB4 +
retn   +
mov esi [ebp-14h] +
xor ebx ebx +
mov eax [esi] +
mov ecx [eax+4] +
push ebx  +
push dword ptr [ebp-18h]  +
add ecx esi +
call sub_101D395  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call sub_105AD62  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
xor ebx ebx +
push esi  +
lea ecx [ebp-24h] +
mov [ebp-18h] ebx +
call sub_105AC93  +
mov [ebp-4] ebx +
cmp [ebp-20h] bl +
jz loc_105B09E  +
lea eax [ebp-1Ch] +
push eax  +
mov eax [esi] +
mov ecx [eax+4] +
add ecx esi +
call sub_101D1BB  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_10589B7  +
pop ecx  +
lea ecx [ebp-1Ch] +
mov edi eax +
call sub_1014D59  +
fld  qword ptr [ebp+8] +
mov ecx [esi] +
mov eax [ecx+4] +
mov ecx [ecx+4] +
add ecx esi +
movzx edx word ptr [ecx+30h] +
mov ecx [ecx+28h] +
push ecx  +
push ecx  +
add eax esi +
mov [ebp-2Ch] bl +
fstp  [esp+0Ch+var_C] +
push edx  +
push eax  +
push ecx  +
push dword ptr [ebp-2Ch]  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_1056B37  +
cmp [eax] bl +
jz loc_105B072  +
mov dword ptr [ebp-18h] 4 +
mov [ebp-4] ebx +
jmp loc_105B09E  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx+4] +
add ecx eax +
mov eax [ecx+8] +
push 1  +
or eax 4 +
push eax  +
call sub_101D3B8  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_105B099 +
retn   +
mov esi [ebp-14h] +
xor ebx ebx +
mov eax [esi] +
mov ecx [eax+4] +
push ebx  +
push dword ptr [ebp-18h]  +
add ecx esi +
call sub_101D395  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call sub_105AD62  +
mov eax esi +
call sub_1002061  +
retn 8  +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-18h] esi +
xor edi edi +
push edi  +
push esi  +
lea ecx [ebp-28h] +
mov [ebp-14h] edi +
call sub_101C08E  +
cmp byte ptr [ebp-24h] 0 +
mov [ebp-4] edi +
jz loc_105B19D  +
lea eax [ebp-20h] +
push eax  +
mov eax [esi] +
mov [ebp-1Ch] edi +
mov ecx [eax+4] +
add ecx esi +
call sub_101D1BB  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1058A55  +
pop ecx  +
lea ecx [ebp-20h] +
mov ebx eax +
call sub_1014D59  +
mov eax [esi] +
mov eax [eax+4] +
add eax esi +
mov ecx [eax+28h] +
test ecx ecx +
setz dl  +
mov [ebp-34h] dl +
lea edx [ebp-1Ch] +
push edx  +
lea edx [ebp-14h] +
push edx  +
push eax  +
mov byte ptr [ebp-2Ch] 1 +
push dword ptr [ebp-2Ch]  +
lea eax [ebp-38h] +
push edi  +
push dword ptr [ebp-34h]  +
mov byte ptr [ebp-4] 2 +
push ecx  +
push eax  +
mov ecx ebx +
call sub_1056AA6  +
and [ebp-4] edi +
jmp loc_105B17E  +
mov eax [ebp-18h] +
mov ecx [eax] +
mov ecx [ecx+4] +
add ecx eax +
mov eax [ecx+8] +
push 1  +
or eax 4 +
push eax  +
call sub_101D3B8  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_105B17B +
retn   +
mov esi [ebp-18h] +
test byte ptr [ebp-14h] 2 +
jnz loc_105B199  +
mov eax [ebp-1Ch] +
lea ecx [eax-80000000h] +
cmp ecx 0FFFFFFFFh +
ja loc_105B199  +
mov ecx [ebp+8] +
mov [ecx] eax +
jmp loc_105B19D  +
or dword ptr [ebp-14h] 2 +
mov eax [esi] +
mov ecx [eax+4] +
push 0  +
push dword ptr [ebp-14h]  +
add ecx esi +
call sub_101D395  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call sub_101BFD4  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
xor edi edi +
push edi  +
push esi  +
lea ecx [ebp-24h] +
mov [ebp-18h] edi +
call sub_101C08E  +
cmp byte ptr [ebp-20h] 0 +
mov [ebp-4] edi +
jz loc_105B27A  +
lea eax [ebp-1Ch] +
push eax  +
mov eax [esi] +
mov ecx [eax+4] +
add ecx esi +
call sub_101D1BB  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1058A55  +
pop ecx  +
lea ecx [ebp-1Ch] +
mov ebx eax +
call sub_1014D59  +
mov eax [esi] +
mov eax [eax+4] +
push dword ptr [ebp+8]  +
add eax esi +
mov ecx [eax+28h] +
test ecx ecx +
setz dl  +
mov [ebp-30h] dl +
lea edx [ebp-18h] +
push edx  +
push eax  +
mov byte ptr [ebp-28h] 1 +
push dword ptr [ebp-28h]  +
lea eax [ebp-34h] +
push edi  +
push dword ptr [ebp-30h]  +
mov byte ptr [ebp-4] 2 +
push ecx  +
push eax  +
mov ecx ebx +
call sub_105697C  +
and [ebp-4] edi +
jmp loc_105B27A  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx+4] +
add ecx eax +
mov eax [ecx+8] +
push 1  +
or eax 4 +
push eax  +
call sub_101D3B8  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_105B277 +
retn   +
mov esi [ebp-14h] +
mov eax [esi] +
mov ecx [eax+4] +
push 0  +
push dword ptr [ebp-18h]  +
add ecx esi +
call sub_101D395  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call sub_101BFD4  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
xor edi edi +
push edi  +
push esi  +
lea ecx [ebp-24h] +
mov [ebp-18h] edi +
call sub_101C08E  +
cmp byte ptr [ebp-20h] 0 +
mov [ebp-4] edi +
jz loc_105B357  +
lea eax [ebp-1Ch] +
push eax  +
mov eax [esi] +
mov ecx [eax+4] +
add ecx esi +
call sub_101D1BB  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1058A55  +
pop ecx  +
lea ecx [ebp-1Ch] +
mov ebx eax +
call sub_1014D59  +
mov eax [esi] +
mov eax [eax+4] +
push dword ptr [ebp+8]  +
add eax esi +
mov ecx [eax+28h] +
test ecx ecx +
setz dl  +
mov [ebp-30h] dl +
lea edx [ebp-18h] +
push edx  +
push eax  +
mov byte ptr [ebp-28h] 1 +
push dword ptr [ebp-28h]  +
lea eax [ebp-34h] +
push edi  +
push dword ptr [ebp-30h]  +
mov byte ptr [ebp-4] 2 +
push ecx  +
push eax  +
mov ecx ebx +
call sub_10568C3  +
and [ebp-4] edi +
jmp loc_105B357  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx+4] +
add ecx eax +
mov eax [ecx+8] +
push 1  +
or eax 4 +
push eax  +
call sub_101D3B8  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_105B354 +
retn   +
mov esi [ebp-14h] +
mov eax [esi] +
mov ecx [eax+4] +
push 0  +
push dword ptr [ebp-18h]  +
add ecx esi +
call sub_101D395  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call sub_101BFD4  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
xor edi edi +
push edi  +
push esi  +
lea ecx [ebp-24h] +
mov [ebp-18h] edi +
call sub_101C08E  +
cmp byte ptr [ebp-20h] 0 +
mov [ebp-4] edi +
jz loc_105B434  +
lea eax [ebp-1Ch] +
push eax  +
mov eax [esi] +
mov ecx [eax+4] +
add ecx esi +
call sub_101D1BB  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1058A55  +
pop ecx  +
lea ecx [ebp-1Ch] +
mov ebx eax +
call sub_1014D59  +
mov eax [esi] +
mov eax [eax+4] +
push dword ptr [ebp+8]  +
add eax esi +
mov ecx [eax+28h] +
test ecx ecx +
setz dl  +
mov [ebp-30h] dl +
lea edx [ebp-18h] +
push edx  +
push eax  +
mov byte ptr [ebp-28h] 1 +
push dword ptr [ebp-28h]  +
lea eax [ebp-34h] +
push edi  +
push dword ptr [ebp-30h]  +
mov byte ptr [ebp-4] 2 +
push ecx  +
push eax  +
mov ecx ebx +
call sub_1056B64  +
and [ebp-4] edi +
jmp loc_105B434  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx+4] +
add ecx eax +
mov eax [ecx+8] +
push 1  +
or eax 4 +
push eax  +
call sub_101D3B8  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_105B431 +
retn   +
mov esi [ebp-14h] +
mov eax [esi] +
mov ecx [eax+4] +
push 0  +
push dword ptr [ebp-18h]  +
add ecx esi +
call sub_101D395  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call sub_101BFD4  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ecx+8]  +
mov ecx [ebp+8] +
call sub_105AF04  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 8 +
push ecx  +
mov ecx [ebp+8] +
call sub_105B2A6  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 8 +
push ecx  +
mov ecx [ebp+8] +
call sub_105B1C9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+8] +
push dword ptr [eax]  +
mov ecx [ebp+8] +
call sub_105AF04  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ecx+8]  +
mov ecx [ebp+8] +
call sub_105B2A6  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ecx+8]  +
mov ecx [ebp+8] +
call sub_105AE24  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 8 +
push ecx  +
mov ecx [ebp+8] +
call sub_105B0C9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  qword ptr [ecx+8] +
push ecx  +
push ecx  +
mov ecx [ebp+8] +
fstp  qword ptr [esp] +
call sub_105AFE4  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 8 +
push ecx  +
mov ecx [ebp+8] +
call sub_105B383  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101F49C  +
test byte ptr [ebp+8] 1 +
jz loc_105B566  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
call ?PreModal@CDialog@@IAEPAUHWND__@@XZ  +
mov ecx [esi+60h] +
mov [ecx+4] eax +
call ?AfxUnhookWindowCreate@@YGHXZ  +
mov eax [esi+60h] +
mov ecx [eax+4] +
mov [esi+0B0h] ecx +
mov ecx [eax+8] +
mov [esi+0B4h] ecx +
mov ecx [eax+0Ch] +
mov [esi+0B8h] ecx +
mov ecx [eax+10h] +
mov [esi+0BCh] ecx +
movzx ecx word ptr [eax+1Ch] +
mov [esi+0D8h] ecx +
movzx ecx word ptr [eax+1Eh] +
mov [esi+0DCh] ecx +
mov ecx [eax+22h] +
or dword ptr [esi+0F8h] 0FFFFFFFFh +
test byte ptr [esi+0C0h] 8 +
mov [esi+0E4h] ecx +
movzx ecx word ptr [eax+20h] +
mov [esi+0E0h] ecx +
lea ecx [esi+0A8h] +
mov [esi+0ECh] ecx +
jz loc_105B61A  +
xor eax eax +
mov [esi+0CCh] eax +
mov [esi+0D0h] eax +
jmp loc_105B63A  +
movzx ecx word ptr [eax+18h] +
mov [ebp-0Ch] ecx +
movzx eax word ptr [eax+1Ah] +
mov [ebp-8] eax +
xor eax eax +
inc eax  +
mov [esi+0CCh] eax +
mov [esi+0D0h] eax +
lea eax [ebp-0Ch] +
push ebx  +
push offset aComdlg32_dll  +
mov [esi+0D4h] eax +
call ds:GetModuleHandleA  +
push offset aPrintdlgexw  +
push eax  +
call ds:GetProcAddress  +
mov ebx eax +
mov dword ptr [ebp-4] 80004001h +
test ebx ebx +
jz loc_105B681  +
push edi  +
call ?AfxGetThreadState@@YGPAV_AFX_THREAD_STATE@@XZ  +
mov edi eax +
lea eax [esi+0ACh] +
push eax  +
mov [edi+18h] esi +
call ebx  +
and dword ptr [edi+18h] 0 +
mov [ebp-4] eax +
pop edi  +
mov ecx esi +
call ?PostModal@CDialog@@IAEXXZ  +
test byte ptr [esi+0C0h] 8 +
pop ebx  +
jnz loc_105B6CF  +
mov eax [esi+0D4h] +
mov ax [eax+4] +
mov ecx [esi+60h] +
mov [ecx+1Ah] ax +
mov eax [esi+0D4h] +
mov ax [eax] +
mov ecx [esi+60h] +
mov [ecx+18h] ax +
mov eax [esi+60h] +
mov cx [esi+0D8h] +
mov [eax+1Ch] cx +
mov eax [esi+60h] +
mov cx [esi+0DCh] +
mov [eax+1Eh] cx +
cmp dword ptr [ebp-4] 0 +
mov eax [esi+60h] +
mov ecx [esi+0B4h] +
mov [eax+8] ecx +
mov eax [esi+60h] +
mov ecx [esi+0B8h] +
mov [eax+0Ch] ecx +
mov eax [esi+60h] +
mov ecx [esi+0BCh] +
mov [eax+10h] ecx +
mov eax [esi+60h] +
mov cx [esi+0E0h] +
push 2  +
mov [eax+20h] cx +
pop eax  +
jl loc_105B716  +
cmp dword ptr [esi+0FCh] 1 +
jnz loc_105B716  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
add ecx 0FFFFFF58h +
call ?ExternalAddRef@CCmdTarget@@QAEKXZ  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
add ecx 0FFFFFF58h +
call ?ExternalRelease@CCmdTarget@@QAEKXZ  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFF58h +
call ?ExternalQueryInterface@CCmdTarget@@QAEKPBXPAPAX@Z  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
call ?AfxGetThreadState@@YGPAV_AFX_THREAD_STATE@@XZ  +
mov esi eax +
mov ecx [esi+18h] +
test ecx ecx +
jz loc_105B7B4  +
push [ebp+arg_0]  +
call ?SubclassWindow@CWnd@@QAEHPAUHWND__@@@Z  +
and dword ptr [esi+18h] 0 +
mov eax 110h +
pop esi  +
cmp [ebp+arg_4] eax +
jnz loc_105B7D3  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_0]  +
call ?AfxDlgProc@@YGHPAUHWND__@@IIJ@Z  +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 14h  +
***
retn   +
***
mov eax offset off_105B7F0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_105B82D  +
mov edx [eax+20h] +
test edx edx +
jz loc_105B82D  +
push eax  +
push dword ptr [ebp+8]  +
mov ecx edx +
call sub_105D85A  +
jmp loc_105B836  +
push eax  +
push dword ptr [ebp+8]  +
call ?OnBeginPrinting@CView@@MAEXPAVCDC@@PAUCPrintInfo@@@Z  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi ecx +
test esi esi +
jz loc_105B863  +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_105B863  +
push esi  +
push dword ptr [ebp+8]  +
call sub_105DADD  +
test eax eax +
jnz loc_105B86E  +
push esi  +
push dword ptr [ebp+8]  +
mov ecx edi +
call ?OnPrint@CView@@MAEXPAVCDC@@PAUCPrintInfo@@@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi ecx +
test esi esi +
jz loc_105B8CC  +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_105B89D  +
push esi  +
push dword ptr [ebp+8]  +
call sub_105D6C0  +
and dword ptr [esi+20h] 0 +
mov eax [esi] +
mov eax [eax+60h] +
mov eax [eax+10h] +
test eax eax +
jz loc_105B8B9  +
push eax  +
call ds:DeleteDC  +
mov eax [esi] +
mov eax [eax+60h] +
and dword ptr [eax+10h] 0 +
mov eax [edi+68h] +
mov [esi] eax +
mov ecx [edi+64h] +
test ecx ecx +
jz loc_105B8CC  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push 0E12Ch  +
mov esi ecx +
call sub_1036A09  +
test eax eax +
jnz loc_105B905  +
push eax  +
call sub_100AF58  +
mov ecx offset unk_108B4B8 +
call sub_1063762  +
mov eax [esi+48h] +
push dword ptr [eax+40h]  +
call sub_100D2D1  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+48h] +
xor eax eax +
test ecx ecx +
jz loc_105B953  +
call sub_1005DB8  +
mov ecx [ebp+8] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+48h] eax +
jz loc_105B97E  +
xor ecx ecx +
cmp dword_108B1A8 eax +
setz cl  +
mov eax ecx +
mov ecx [ebp+8] +
mov edx [ecx] +
push eax  +
call dword ptr [edx]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor edx edx +
cmp [ecx+48h] edx +
push esi  +
mov esi [ebp+8] +
mov eax [esi] +
setnz dl  +
mov ecx esi +
push edx  +
call dword ptr [eax]  +
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 25Bh +
mov eax [esi] +
mov ecx esi +
jnz loc_105B9CE  +
push dword_108AF14  +
jmp loc_105B9D4  +
push dword_108AF10  +
call dword ptr [eax+4]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_100AF58  +
mov ecx esi +
pop esi  +
jmp loc_106AA06  +
***
mov ecx [ecx+48h] +
jmp loc_10532D0  +
***
sbb eax 9090FFFFh +
nop   +
nop   +
nop   +
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+48h] 0 +
jz loc_105BA46  +
push 0E12Ah  +
call sub_1036A09  +
test eax eax +
jnz loc_105BA46  +
mov ecx [esi+48h] +
pop esi  +
jmp loc_10535F8  +
***
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi] +
push edi  +
mov edi ecx +
xor ecx ecx +
cmp [edi+48h] ecx +
setnz cl  +
push ecx  +
mov ecx esi +
call dword ptr [eax]  +
cmp dword ptr [edi+54h] 0 +
mov eax [esi] +
mov ecx esi +
jz loc_105BA76  +
push 1  +
jmp loc_105BA78  +
push 0  +
call dword ptr [eax+4]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push dword_108B1CC  +
mov eax [ecx] +
call dword ptr [eax+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
mov eax ecx +
cmp [eax+48h] ebx +
mov ecx [ebp+8] +
mov edx [ecx] +
setnz bl  +
push ebx  +
call dword ptr [edx]  +
pop ebx  +
pop ebp  +
retn 4  +
***
push 0C352h  +
call sub_1036A09  +
retn   +
***
push 0C356h  +
call sub_1036A09  +
retn   +
***
push 0C353h  +
call sub_1036A09  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
add ecx 2Ch +
push ecx  +
mov ecx [ebp+arg_0] +
call ??0CString@@QAE@ABV0@@Z  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
push 4  +
lea eax [ebp+arg_C] +
mov [ebp+var_70] eax +
pop eax  +
lea edx [ebp+arg_10] +
mov [ebp+var_60] edx +
xor ecx ecx +
mov [ebp+var_68] eax +
mov [ebp+var_58] eax +
mov [ebp+var_48] eax +
mov [ebp+var_38] eax +
mov [ebp+var_28] eax +
mov [ebp+var_18] eax +
mov [ebp+var_8] eax +
lea edx [ebp+arg_14] +
mov [ebp+var_50] edx +
lea eax [ebp+var_70] +
push eax  +
push 7  +
push [ebp+arg_8]  +
lea edx [ebp+arg_18] +
push [ebp+arg_4]  +
mov [ebp+var_40] edx +
push [ebp+arg_0]  +
lea edx [ebp+arg_1C] +
mov [ebp+var_30] edx +
lea edx [ebp+arg_20] +
mov [ebp+var_20] edx +
lea edx [ebp+arg_24] +
mov [ebp+var_6C] ecx +
mov [ebp+var_64] ecx +
mov [ebp+var_5C] ecx +
mov [ebp+var_54] ecx +
mov [ebp+var_4C] ecx +
mov [ebp+var_44] ecx +
mov [ebp+var_3C] ecx +
mov [ebp+var_34] ecx +
mov [ebp+var_2C] ecx +
mov [ebp+var_24] ecx +
mov [ebp+var_1C] ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_10] edx +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ecx +
call ds:EventWrite  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi-8Ch]  +
add esi 0FFFFFF58h +
lea ecx [ebp-8] +
call MFC42u_6466  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0DCh]  +
mov ecx [ebp-4] +
mov edx [ebp-8] +
mov [ecx+4] edx +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi-8Ch]  +
add esi 0FFFFFF58h +
lea ecx [ebp-8] +
call MFC42u_6466  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0E0h]  +
mov ecx [ebp-4] +
mov edx [ebp-8] +
mov [ecx+4] edx +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi-8Ch]  +
add esi 0FFFFFF58h +
lea ecx [ebp-8] +
call MFC42u_6466  +
push dword ptr [ebp+1Ch]  +
mov eax [esi] +
push dword ptr [ebp+18h]  +
mov ecx esi +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call dword ptr [eax+0E4h]  +
mov ecx [ebp-4] +
mov edx [ebp-8] +
mov [ecx+4] edx +
pop esi  +
leave   +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax dword_108B1B4 +
xor ecx ecx +
cmp [eax-8] ecx +
jnz loc_105BCB0  +
xor eax eax +
jmp loc_105BCF7  +
push ecx  +
push ecx  +
push eax  +
push ecx  +
call ds:CreateDCW  +
mov ecx [ebp+8] +
mov edx [ecx] +
mov edx [edx+60h] +
mov [edx+10h] eax +
mov eax [ecx] +
mov eax [eax+60h] +
mov dx [eax+1Ch] +
mov [eax+18h] dx +
mov eax [ecx] +
mov eax [eax+60h] +
mov dx [eax+1Eh] +
mov [eax+1Ah] dx +
mov eax dword_108B018 +
mov [ecx+18h] eax +
push 0F044h  +
add ecx 1Ch +
call ?LoadStringW@CString@@QAEHI@Z  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
xor edi edi +
cmp [esi+48h] edi +
jnz loc_105BD1C  +
xor eax eax +
jmp loc_105BDCF  +
call sub_101E32D  +
push 0D4h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_105BD42  +
push dword ptr [esi+48h]  +
call sub_10618DD  +
jmp loc_105BD44  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi+50h] eax +
cmp eax edi +
jz loc_105BD94  +
mov edx [eax] +
push esi  +
mov ecx eax +
call dword ptr [edx+100h]  +
test eax eax +
jz loc_105BD6A  +
mov eax [esi+50h] +
mov eax [eax+0C0h] +
mov [esi+4Ch] eax +
mov eax [esi+4Ch] +
cmp eax edi +
jz loc_105BD83  +
mov ecx [esi+48h] +
mov [ecx+70h] eax +
mov ecx [esi+50h] +
push 4  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
jmp loc_105BD94  +
mov ecx [esi+50h] +
cmp ecx edi +
jz loc_105BD91  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov [esi+50h] edi +
mov ecx [esi+4Ch] +
cmp ecx edi +
jnz loc_105BDB2  +
push 1  +
mov ecx offset unk_108AF60 +
mov dword_108B180 edi +
call sub_1056138  +
jmp loc_105BD15  +
push 4  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov eax [esi+4Ch] +
push dword ptr [eax+20h]  +
mov edi ds:UpdateWindow +
call edi  +
push dword ptr [esi+20h]  +
call edi  +
xor eax eax +
inc eax  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+48h] +
xor edx edx +
test eax eax +
jz loc_105BDF5  +
fld1   +
fcomp  qword ptr [eax+50h] +
fnstsw  ax +
test ah 5 +
jp loc_105BDF5  +
inc edx  +
push esi  +
mov esi [ebp+8] +
mov eax [esi] +
push edx  +
mov ecx esi +
call dword ptr [eax]  +
push dword_108B180  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
pop esi  +
pop ebp  +
retn 4  +
***
cmp dword_108BC04 0 +
push esi  +
push edi  +
mov edi ecx +
mov esi 40000000h +
jz loc_105BE72  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_105BE36  +
test al al +
jnz loc_105BE72  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_105BE72  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_105BE72  +
cmp eax ecx +
jnz loc_105BE72  +
push offset dword_105BEF8  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
push 0E12Bh  +
call sub_1036A09  +
test eax eax +
jnz loc_105BEA2  +
push eax  +
call sub_100AF58  +
push 1  +
call sub_1009F8B  +
mov ecx offset unk_108B4B8 +
call sub_106369B  +
mov eax [edi+48h] +
push dword ptr [eax+40h]  +
call sub_100D2D1  +
cmp dword_108BC04 0 +
jz loc_105BEF4  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_105BEB8  +
test al al +
jnz loc_105BEF4  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_105BEF4  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_105BEF4  +
cmp eax ecx +
jnz loc_105BEF4  +
push offset dword_105BF08  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
pop edi  +
pop esi  +
retn   +
***
fld  ds:dbl_104A4F8 +
push 1  +
push ecx  +
push ecx  +
mov ecx dword_108A24C +
fstp  qword ptr [esp] +
call sub_1010425  +
mov ecx dword_108A24C +
jmp sub_100FBC7  +
***
fld  ds:dbl_1031558 +
push 1  +
push ecx  +
push ecx  +
mov ecx dword_108A24C +
fstp  qword ptr [esp] +
call sub_1010425  +
mov ecx dword_108A24C +
jmp sub_100FBC7  +
***
fld  ds:dbl_1006830 +
push 1  +
push ecx  +
push ecx  +
mov ecx dword_108A24C +
fstp  qword ptr [esp] +
call sub_1010425  +
mov ecx dword_108A24C +
jmp sub_100FBC7  +
***
fld1   +
push 1  +
push ecx  +
push ecx  +
mov ecx dword_108A24C +
fstp  qword ptr [esp] +
call sub_1010425  +
mov ecx dword_108A24C +
jmp sub_100FBC7  +
***
fld  ds:dbl_1009880 +
push 1  +
push ecx  +
push ecx  +
mov ecx dword_108A24C +
fstp  qword ptr [esp] +
call sub_1010425  +
mov ecx dword_108A24C +
jmp sub_100FBC7  +
***
fld  ds:dbl_1013E90 +
push 1  +
push ecx  +
push ecx  +
mov ecx dword_108A24C +
fstp  qword ptr [esp] +
call sub_1010425  +
mov ecx dword_108A24C +
jmp sub_100FBC7  +
***
fld  ds:dbl_1023058 +
push 1  +
push ecx  +
push ecx  +
mov ecx dword_108A24C +
fstp  qword ptr [esp] +
call sub_1010425  +
mov ecx dword_108A24C +
jmp sub_100FBC7  +
***
mov ecx dword_108A24C +
jmp sub_1034D0B  +
***
mov ecx dword_108A24C +
jmp sub_1034E15  +
***
retf 0FF4Ch  +
***
jmp fword ptr [edx+1]  +
***
jz loc_105C10D  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_105C0D1  +
test al al +
jnz loc_105C10D  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_105C10D  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_105C10D  +
cmp eax ecx +
jnz loc_105C10D  +
push offset dword_105C120  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
pop edi  +
pop esi  +
retn   +
***
cmp ecx [eax+2Ch] +
jnz loc_105C1FB  +
mov ecx [ebp-14h] +
cmp ecx [eax+30h] +
jz loc_105C24E  +
mov ecx [ebp-1Ch] +
mov eax [ecx] +
push 0  +
call dword ptr [eax+68h]  +
test al al +
jz loc_105C210  +
push 0  +
call sub_100AF58  +
push 1  +
push offset aPropertyEdit  +
mov ecx edi +
call sub_100D1F5  +
lea eax [ebp-18h] +
push eax  +
push 15Eh  +
mov ecx ebx +
call sub_103584E  +
mov ecx edi +
mov [ebp-20h] eax +
call sub_100D848  +
cmp dword ptr [ebp-20h] 0 +
jz loc_105C24E  +
mov eax [ebp-18h] +
mov dword_108B24C eax +
mov eax [ebp-14h] +
mov dword_108B250 eax +
cmp [ebp-4Ch] esi +
jz loc_105C2B7  +
cmp dword ptr [ebp-4Ch] 0 +
jz loc_105C26C  +
push 0FFFFFFFFh  +
push 31h  +
push 8FAh  +
call ?AfxMessageBox@@YGHIII@Z  +
cmp eax 1 +
jnz loc_105C2B7  +
push 1  +
push 1435h  +
push offset unk_108E9F8  +
call WinSqmIncrementDWORD  +
mov ecx [ebp-1Ch] +
mov eax [ecx] +
xor esi esi +
push esi  +
call dword ptr [eax+68h]  +
test al al +
jz loc_105C292  +
push esi  +
call sub_100AF58  +
push 1  +
push offset aPropertyEdit  +
mov ecx edi +
call sub_100D1F5  +
push esi  +
push dword ptr [ebp-4Ch]  +
mov ecx ebx +
push 15Ch  +
call sub_104CB3C  +
mov ecx edi +
call sub_100D848  +
cmp dword_108B18C 0 +
jz loc_105C2DD  +
mov eax [ebp-24h] +
cmp eax dword_108B1D0 +
jz loc_105C2DD  +
mov esi [ebp-10h] +
mov eax [esi+48h] +
push 0  +
push dword ptr [eax+40h]  +
call sub_1005D16  +
jmp loc_105C2E0  +
mov esi [ebp-10h] +
mov ecx [esi+58h] +
test ecx ecx +
jz loc_105C2EC  +
call sub_10104B6  +
mov ecx [esi+5Ch] +
test ecx ecx +
jz loc_105C2F8  +
call sub_10104B6  +
mov ecx dword_108A1EC +
test ecx ecx +
jz loc_105C309  +
push 0  +
call sub_102E7F6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0B4h] +
call sub_104DC71  +
call sub_1002061  +
retn   +
***
push 4  +
mov eax offset loc_107F5D4 +
call sub_100208C  +
mov edi ecx +
push 0  +
call sub_100AF58  +
push 18h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_105C356  +
call ??0CPrintPreviewState@@QAE@XZ  +
mov esi eax +
jmp loc_105C358  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
push esi  +
push offset off_104AA78  +
push edi  +
push 86h  +
mov ecx edi +
call ?DoPrintPreview@CView@@QAEHIPAV1@PAUCRuntimeClass@@PAUCPrintPreviewState@@@Z  +
test eax eax +
jz loc_105C392  +
call sub_10049D9  +
mov edi eax +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
lea ecx [edi+0E0h] +
call near ptr dword_104BBE0+3  +
mov eax [esi+14h] +
mov [edi+4Ch] eax +
jmp loc_105C3A7  +
push 0FFFFFFFFh  +
push 0  +
push 0F109h  +
call ?AfxMessageBox@@YGHIII@Z  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_10049D9  +
mov esi eax +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
lea ecx [esi+0E0h] +
call sub_104BED7  +
push dword ptr [ebp+18h]  +
mov ecx edi +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ?OnEndPrintPreview@CView@@MAEXPAVCDC@@PAUCPrintInfo@@UtagPOINT@@PAVCPreviewView@@@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
push 18h  +
mov eax offset loc_107C4CE +
call sub_1002370  +
mov [ebp-24h] ecx +
xor edi edi +
push edi  +
call sub_100AF58  +
push 6A8h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-20h] ecx +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_105C42D  +
call sub_1013B6A  +
mov esi eax +
mov [ebp-1Ch] eax +
jmp loc_105C432  +
xor esi esi +
mov [ebp-1Ch] esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp esi edi +
jz loc_105C54A  +
mov ecx esi +
call sub_1019E28  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
push offset unk_108B330  +
xor ebx ebx +
inc ebx  +
push ebx  +
push 804h  +
push 0C36Dh  +
lea eax [ebp-14h] +
mov [ebp-4] ebx +
push eax  +
mov ecx offset unk_108AF60 +
mov byte ptr [ebp-4] 2 +
call sub_103C144  +
cmp eax edi +
jz loc_105C519  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp-14h]  +
mov ecx esi +
mov [ebp-18h] edi +
call near ptr dword_104CA18+3  +
cmp eax edi +
jz loc_105C519  +
cmp [ebp-18h] edi +
jz loc_105C4FB  +
push 10h  +
call GdipAlloc  +
cmp eax edi +
jz loc_105C4B3  +
push edi  +
push dword ptr [ebp-14h]  +
mov ecx eax +
call sub_10160AA  +
jmp loc_105C4B5  +
xor eax eax +
push offset dword_108AF50  +
lea ecx [ebp-20h] +
push ecx  +
mov ecx eax +
mov dword_108AF4C eax +
mov dword ptr [ebp-20h] 0FF000000h +
call sub_1010018  +
mov ecx dword_108AF4C +
call sub_100CFB1  +
mov ecx dword_108AF4C +
mov dword_108AF54 eax +
call sub_100CFE8  +
mov dword_108AF58 eax +
mov eax dword_108A1C8 +
mov dword_108AF5C eax +
push dword ptr [esi+30h]  +
call ds:GlobalLock  +
push eax  +
mov eax [ebp-24h] +
mov ecx [eax+48h] +
call near ptr dword_104F9E0+5  +
push dword ptr [esi+30h]  +
call ds:GlobalUnlock  +
mov [ebp-4] ebx +
jmp loc_105C533  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_105C52B +
retn   +
***
mov esi [ebp-1Ch] +
xor ebx ebx +
xor edi edi +
inc ebx  +
mov [esi+4] edi +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+4]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
mov ecx ebx +
call sub_1019E28  +
mov eax [ebp+arg_0] +
mov eax [eax+40h] +
test eax eax +
jz loc_105C615  +
mov eax [eax+4] +
test eax eax +
jz loc_105C615  +
cmp dword ptr [eax+4] 0 +
jz loc_105C615  +
cmp dword_108AEF4 0 +
jz loc_105C596  +
call sub_103B9F1  +
mov edx [ebp+arg_8] +
push esi  +
mov esi dword_108AF30 +
push edi  +
push 17h  +
pop ecx  +
mov edi edx +
movs   +
mov eax dword_108AEB8 +
mov [edx+0Ch] eax +
mov eax dword_108AEC8 +
mov [edx+14h] eax +
mov eax dword_108AEEC +
mov [edx+18h] eax +
mov dword ptr [edx+8] 1 +
mov eax dword_108B1D4 +
mov [edx+24h] eax +
mov eax dword_108AECC +
mov [edx+2Ch] eax +
mov eax dword_108AED0 +
mov [edx+30h] eax +
mov eax [edx+2Ch] +
mov [ebx+8] eax +
mov eax [edx+30h] +
mov [ebx+0Ch] eax +
mov eax [ebp+arg_0] +
mov ecx [eax+40h] +
mov esi [ecx+4] +
push 5  +
add esi 10h +
pop ecx  +
lea edi [ebx+10h] +
movs   +
mov eax [eax+40h] +
mov eax [eax+4] +
mov eax [eax+24h] +
mov [ebx+24h] eax +
xor eax eax +
pop edi  +
mov [ebx+4] edx +
inc eax  +
pop esi  +
jmp loc_105C617  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push 0E4h  +
mov eax offset loc_107C530 +
call sub_100208C  +
mov edi ecx +
mov [ebp-24h] edi +
push 1  +
call sub_100AF58  +
mov eax [edi+40h] +
xor ebx ebx +
mov [ebp-3Ch] eax +
cmp dword_108AF30 ebx +
jnz loc_105C660  +
mov eax [eax+0ECh] +
mov eax [eax+4] +
mov ecx [eax+2Ch] +
mov eax [eax+30h] +
mov [ebp-10h] ecx +
jmp loc_105C66D  +
mov eax dword_108AECC +
mov [ebp-10h] eax +
mov eax dword_108AED0 +
push eax  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-0F0h] +
push ebx  +
mov [ebp-18h] eax +
call near ptr dword_104DE5C+0Bh  +
lea ecx [ebp-0F0h] +
mov [ebp-4] ebx +
call ?DoModal@CDialog@@UAEHXZ  +
cmp eax 1 +
jnz loc_105CAE1  +
cmp dword_108BC04 ebx +
jz loc_105C6EB  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_105C6AC  +
cmp al bl +
jnz loc_105C6EB  +
mov ecx dword_108BBF4 +
mov edx 40000000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_105C6EB  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax edx +
cmp ebx dword_108BBF8 +
jnz loc_105C6EB  +
cmp eax ecx +
jnz loc_105C6EB  +
push offset dword_105CAF8  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
mov edx [ebp-90h] +
mov eax [ebp-84h] +
mov ecx [ebp-88h] +
mov [ebp-2Ch] edx +
mov edx [ebp-8Ch] +
mov [ebp-14h] eax +
mov [ebp-1Ch] ecx +
mov [ebp-28h] edx +
cmp [ebp-80h] bl +
jz loc_105C720  +
add eax 0FFFFFF9Ch +
add ecx 0FFFFFF9Ch +
mov [ebp-14h] eax +
mov [ebp-1Ch] ecx +
mov esi [ebp-1Ch] +
mov ecx off_108A1D4 +
cmp esi ebx +
jnz loc_105C742  +
cmp [ebp-14h] ebx +
jnz loc_105C742  +
cmp [ebp-90h] ebx +
jnz loc_105C742  +
cmp edx ebx +
jz loc_105CA79  +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+68h]  +
test al al +
jz loc_105C752  +
push ebx  +
call sub_100AF58  +
cmp esi ebx +
jnz loc_105C75F  +
cmp [ebp-14h] ebx +
jz loc_105CA56  +
cmp dword_108AF30 ebx +
jnz loc_105C9BC  +
mov eax [ebp-14h] +
cmp [ebp-80h] bl +
jz loc_105C797  +
imul eax [ebp-10h] +
cdq   +
push 64h  +
pop ecx  +
idiv  ecx +
mov esi eax +
mov eax [ebp-1Ch] +
imul eax [ebp-18h] +
cdq   +
idiv  ecx +
add esi [ebp-10h] +
mov [ebp-20h] esi +
add eax [ebp-18h] +
mov [ebp-38h] eax +
jmp loc_105C79F  +
mov [ebp-38h] esi +
mov [ebp-20h] eax +
mov esi eax +
mov [ebp-30h] ebx +
mov dword ptr [ebp-34h] offset off_1002208 +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 1 +
call ??0CDC@@QAE@XZ  +
mov eax [ebp-3Ch] +
mov eax [eax+0ECh] +
mov eax [eax+4] +
push dword ptr [eax+0Ch]  +
mov byte ptr [ebp-4] 2 +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov ecx [ebp-38h] +
mov [ebp-54h] ecx +
push eax  +
lea ecx [ebp-50h] +
mov [ebp-40h] eax +
mov [ebp-58h] esi +
call sub_1002292  +
test eax eax +
jz loc_105C926  +
push dword ptr [ebp-18h]  +
mov esi [ebp-40h] +
push dword ptr [ebp-10h]  +
lea ecx [ebp-34h] +
push esi  +
call sub_1008818  +
test eax eax +
jz loc_105C926  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-50h] +
call sub_10022BD  +
mov ecx [edi+48h] +
mov [ebp-5Ch] eax +
push ebx  +
lea eax [ebp-50h] +
push eax  +
call sub_1009365  +
mov ecx edi +
mov [ebp-24h] eax +
call ?BeginWaitCursor@CCmdTarget@@QAEXXZ  +
cmp esi ebx +
jnz loc_105C832  +
xor eax eax +
jmp loc_105C835  +
mov eax [esi+4] +
push 0CC0020h  +
push ebx  +
push ebx  +
push eax  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-10h]  +
push ebx  +
push ebx  +
push dword ptr [ebp-4Ch]  +
call ds:BitBlt  +
push 1  +
mov esi offset unk_108B4B8 +
push offset aPropertyEdit  +
mov ecx esi +
call sub_100D1F5  +
lea eax [ebp-58h] +
push eax  +
mov eax [ebp-3Ch] +
mov ecx [eax+0ECh] +
push 15Eh  +
call sub_103584E  +
push dword ptr [ebp-18h]  +
mov eax [ebp-40h] +
push dword ptr [ebp-10h]  +
push ebx  +
push ebx  +
push dword ptr [ebp-4Ch]  +
push dword ptr [ebp-38h]  +
push dword ptr [ebp-20h]  +
push ebx  +
push ebx  +
push dword ptr [eax+4]  +
call sub_10098C4  +
mov eax [edi+48h] +
push ebx  +
push dword ptr [eax+40h]  +
call sub_1005D16  +
mov eax [edi+48h] +
push ebx  +
push dword ptr [eax+40h]  +
call sub_100D173  +
mov ecx esi +
call sub_100D848  +
mov eax [edi+48h] +
push dword ptr [eax+40h]  +
call sub_100D2D1  +
push dword ptr [ebp-5Ch]  +
lea ecx [ebp-50h] +
call sub_10022BD  +
lea ecx [ebp-34h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
cmp [ebp-24h] ebx +
jz loc_105C8E4  +
push ebx  +
push dword ptr [ebp-24h]  +
lea ecx [ebp-50h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
lea ecx [ebp-50h] +
call ?DeleteDC@CDC@@QAEHXZ  +
mov eax [ebp-58h] +
mov dword_108B24C eax +
mov eax [ebp-54h] +
mov ecx edi +
mov dword_108B250 eax +
call ?EndWaitCursor@CCmdTarget@@QAEXXZ  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 1 +
call ??1CDC@@UAE@XZ  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
mov dword ptr [ebp-34h] offset off_1002208 +
call sub_1002407  +
jmp loc_105CA56  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
cmp dword_108BC04 ebx +
jz loc_105C999  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_105C947  +
cmp al bl +
jnz loc_105C999  +
mov ecx dword_108BBF4 +
mov edx 40000000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_105C999  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax edx +
cmp ebx dword_108BBF8 +
jnz loc_105C999  +
cmp eax ecx +
jnz loc_105C999  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-10h]  +
push ebx  +
push offset dword_105CB08  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_105BB44  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 1 +
call ??1CDC@@UAE@XZ  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
mov dword ptr [ebp-34h] offset off_1002208 +
call sub_1002407  +
jmp loc_105CAE1  +
mov esi offset stru_108AF34 +
lea edi [ebp-6Ch] +
movs   +
movs   +
movs   +
movs   +
cmp [ebp-80h] bl +
jz loc_105C9F7  +
mov edi dword_108AECC +
mov eax edi +
imul eax [ebp-14h] +
cdq   +
push 64h  +
pop esi  +
idiv  esi +
mov ecx dword_108AED0 +
add edi eax +
mov eax ecx +
imul eax [ebp-1Ch] +
cdq   +
idiv  esi +
add ecx eax +
mov [ebp-20h] ecx +
jmp loc_105CA02  +
mov eax [ebp-1Ch] +
mov edi [ebp-14h] +
mov [ebp-20h] eax +
mov ecx eax +
mov eax [ebp-6Ch] +
mov esi [ebp-24h] +
add eax edi +
mov [ebp-64h] eax +
mov eax [ebp-68h] +
add eax ecx +
mov ecx [esi+48h] +
push 1  +
push 1  +
mov [ebp-60h] eax +
call sub_10522B4  +
call sub_10049FD  +
push 1  +
push dword ptr [ebp-20h]  +
mov ecx offset unk_108AEA0 +
push edi  +
call sub_104EF6B  +
push ebx  +
call sub_1009E55  +
push ebx  +
push dword_108AF30  +
call sub_1005D16  +
mov ecx [esi+48h] +
lea eax [ebp-6Ch] +
push eax  +
call sub_1036C4C  +
mov edi esi +
cmp [ebp-2Ch] ebx +
jz loc_105CA68  +
mov ecx [edi+48h] +
push 1  +
push dword ptr [ebp-2Ch]  +
call sub_105DCB4  +
cmp [ebp-28h] ebx +
jz loc_105CA79  +
mov ecx [edi+48h] +
push ebx  +
push dword ptr [ebp-28h]  +
call sub_105DCB4  +
cmp dword_108BC04 ebx +
jz loc_105CAE1  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_105CA8E  +
cmp al bl +
jnz loc_105CAE1  +
mov ecx dword_108BBF4 +
mov edx 40000000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_105CAE1  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax edx +
cmp ebx dword_108BBF8 +
jnz loc_105CAE1  +
cmp eax ecx +
jnz loc_105CAE1  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-10h]  +
push 1  +
push offset dword_105CB08  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_105BB44  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0F0h] +
call ??1CDialog@@UAE@XZ  +
call sub_1002061  +
retn   +
***
adc eax offset GetDC +
push eax  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov ecx dword_108A24C +
mov edi eax +
push 0  +
push edi  +
call sub_1009942  +
push edi  +
mov ecx esi +
call sub_1009C7A  +
jmp loc_105CBE5  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
call sub_1002061  +
retn   +
***
xor eax eax +
cmp dword_108B1CC eax +
setz al  +
mov dword_108B1CC eax +
jmp sub_1013554  +
***
dec eax  +
jz loc_105CCFF  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
jmp loc_105CCFF  +
call ds:CoCreateInstance  +
cmp eax esi +
jl loc_105CCFF  +
mov eax [ebp-14h] +
mov ecx [eax] +
push esi  +
push dword ptr [ebp-10h]  +
push eax  +
call dword ptr [ecx+14h]  +
cmp eax esi +
jl loc_105CCF6  +
mov eax [ebp+8] +
push esi  +
mov [ebp-18h] eax +
mov eax [ebp-14h] +
lea edx [ebp-1Ch] +
push edx  +
mov dword ptr [ebp-1Ch] 8 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp eax esi +
jl loc_105CCF6  +
mov eax [ebp-14h] +
mov ecx [eax] +
push 0Fh  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp-14h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call ?ReleaseBuffer@CString@@QAEXH@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+48h] +
cmp [ebp+arg_0] eax +
jz loc_105CD80  +
xor ecx ecx +
cmp eax ecx +
jz loc_105CD80  +
cmp [eax+40h] ecx +
jz loc_105CD80  +
cmp dword_108B1D4 ecx +
jz loc_105CD80  +
push 1  +
push ecx  +
push dword ptr [eax+20h]  +
call ds:InvalidateRect  +
mov eax [esi+48h] +
push dword ptr [eax+20h]  +
call ds:UpdateWindow  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+48h] +
test eax eax +
jz loc_105CDCE  +
push dword ptr [eax+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_105CDCE  +
mov eax [esi+48h] +
cmp dword ptr [eax+40h] 0 +
jz loc_105CDCE  +
cmp dword_108B1D4 0 +
jz loc_105CDCE  +
push 1  +
push 0  +
push dword ptr [eax+20h]  +
call ds:InvalidateRect  +
mov eax [esi+48h] +
push dword ptr [eax+20h]  +
call ds:UpdateWindow  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
cmp dword_108BC04 0 +
push esi  +
push edi  +
mov edi ecx +
mov esi 40000000h +
jz loc_105CE8A  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_105CE4E  +
test al al +
jnz loc_105CE8A  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_105CE8A  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_105CE8A  +
cmp eax ecx +
jnz loc_105CE8A  +
push offset dword_104A100  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
push 1  +
call sub_100AF58  +
mov ecx [edi+48h] +
push 10Eh  +
call sub_10389DD  +
cmp dword_108BC04 0 +
jz loc_105CEF0  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_105CEB4  +
test al al +
jnz loc_105CEF0  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_105CEF0  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_105CEF0  +
cmp eax ecx +
jnz loc_105CEF0  +
push offset dword_104A110  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
pop edi  +
pop esi  +
retn   +
***
cmp dword_108BC04 edx +
jz loc_105CFD7  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_105CF9D  +
test al al +
jnz loc_105CFD7  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_105CFD7  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_105CFD7  +
cmp eax ecx +
jnz loc_105CFD7  +
push offset dword_104A110  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
inc dword ptr [ebx+8BC043Dh]  +
add [eax] eax +
jz loc_105D0B3  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_105D077  +
test al al +
jnz loc_105D0B3  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_105D0B3  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_105D0B3  +
cmp eax ecx +
jnz loc_105D0B3  +
push (offset dword_104A0EC+4)  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
pop edi  +
pop esi  +
retn   +
***
inc dword ptr [ebx+8BC043Dh]  +
add [eax] eax +
jz loc_105D177  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_105D13B  +
test al al +
jnz loc_105D177  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_105D177  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_105D177  +
cmp eax ecx +
jnz loc_105D177  +
push (offset dword_104A0EC+4)  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push 1  +
mov ecx eax +
call sub_101AB46  +
mov esi [ebp+8] +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx]  +
push dword_108AF14  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push 1  +
mov ecx eax +
call sub_101AB46  +
mov esi [ebp+8] +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx]  +
mov eax [esi] +
xor ecx ecx +
cmp dword_108AF14 ecx +
setz cl  +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
pop esi  +
pop ebp  +
retn 4  +
***
push 0  +
call sub_10049D9  +
add eax 500h +
mov ecx eax +
call sub_10695DA  +
retn   +
***
push 1  +
call sub_10049D9  +
add eax 500h +
mov ecx eax +
call sub_10695DA  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
cmp dword ptr [edi] 0Ah +
jnz loc_105D286  +
push esi  +
mov esi offset unk_108AF60 +
push 1Fh  +
mov ecx esi +
call sub_1006359  +
cmp [edi+4] eax +
jnz loc_105D25C  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push offset dword_100213C  +
push 4  +
push 54C6h  +
jmp loc_105D27B  +
push 20h  +
mov ecx esi +
call sub_1006359  +
cmp [edi+4] eax +
jnz loc_105D285  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push offset dword_100213C  +
push 4  +
push 54C7h  +
mov eax [eax+4] +
mov ecx eax +
call sub_1009E6B  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
push 0Ch  +
mov eax offset loc_107DD84 +
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
push 2  +
pop esi  +
mov [ebp-14h] esi +
mov dword ptr [ebp-18h] offset off_1006F8C +
and dword ptr [ebp-4] 0 +
push 2Bh  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
mov edi eax +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_1005BE0  +
xor eax eax +
cmp [ebp-10h] eax +
mov ecx edi +
setz al  +
mov [ebp-14h] esi +
mov [ebp-10h] eax +
lea eax [ebp-18h] +
push eax  +
call sub_1035687  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_8]  +
mov esi ecx +
push ebx  +
push [ebp+arg_0]  +
call ??0CPrintDialog@@QAE@HKPAVCWnd@@@Z  +
push 54h  +
lea edi [esi+0ACh] +
push 0  +
mov dword ptr [esi] offset off_105D3B4 +
push edi  +
mov dword ptr [esi+0A8h] offset off_105D394 +
call memset  +
add esp 0Ch +
mov dword ptr [edi] 54h +
pop edi  +
mov [esi+0C0h] ebx +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push 0  +
mov eax offset loc_107C727 +
call sub_100208C  +
mov edi ecx +
mov ecx offset unk_108AF60 +
call sub_1055EB3  +
mov esi [ebp+8] +
mov eax [esi] +
push 100h  +
mov [edi+68h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+8] eax +
xor ecx ecx +
mov [ebp-4] ecx +
cmp eax ecx +
jz loc_105D4E8  +
push ecx  +
push 84010Ch  +
push ecx  +
mov ecx eax +
call sub_105D33C  +
jmp loc_105D4EA  +
xor eax eax +
mov [edi+64h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi] eax +
mov eax [eax+60h] +
xor ebx ebx +
inc ebx  +
mov ecx ebx +
mov [eax+1Ch] cx +
mov eax [esi] +
mov eax [eax+60h] +
mov ecx 0FFFFh +
mov [eax+1Eh] cx +
mov eax [esi] +
mov eax [eax+60h] +
mov ecx ebx +
mov [eax+18h] cx +
mov eax [esi] +
mov eax [eax+60h] +
mov [eax+1Ah] cx +
and dword ptr [esi+20h] 0 +
push 58h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+8] eax +
mov [ebp-4] ebx +
test eax eax +
jz loc_105D542  +
push esi  +
push edi  +
mov ecx eax +
call sub_105D715  +
jmp loc_105D544  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jnz loc_105D553  +
xor eax eax +
jmp loc_105D626  +
cmp dword ptr [esi+20h] 0 +
jnz loc_105D563  +
mov edx [eax] +
push ebx  +
mov ecx eax +
call dword ptr [edx+4]  +
jmp loc_105D54C  +
***
cmp dword_108B1AC 0 +
push esi  +
mov ecx edi +
jz loc_105D61B  +
call near ptr dword_105BC98+3  +
test eax eax +
jz loc_105D5B9  +
mov eax [esi] +
mov eax [eax+60h] +
cmp dword ptr [eax+10h] 0 +
jnz loc_105D624  +
push 30h  +
push 0E000h  +
push 92Eh  +
call sub_104CFEB  +
push esi  +
mov ecx edi +
call ?DoPreparePrinting@CView@@QAEHPAUCPrintInfo@@@Z  +
test eax eax +
jnz loc_105D5B9  +
mov ecx [esi+20h] +
push esi  +
push 0  +
call sub_105D6C0  +
and dword ptr [esi+20h] 0 +
jmp loc_105D54C  +
***
mov eax [esi] +
push dword ptr [eax+60h]  +
mov edi offset unk_108AF60 +
mov ecx edi +
call ?GetPrinterDeviceDefaults@CWinApp@@QAEHPAUtagPDW@@@Z  +
test eax eax +
jnz loc_105D5DF  +
push dword ptr [esi]  +
mov ecx edi +
call ?DoPrintDialog@CWinApp@@QAEHPAVCPrintDialog@@@Z  +
cmp eax ebx +
jnz loc_105D54C  +
mov ecx [esi] +
mov eax [ecx+60h] +
cmp dword ptr [eax+10h] 0 +
jnz loc_105D5F7  +
call ?CreatePrinterDC@CPrintDialog@@QAEPAUHDC__@@XZ  +
test eax eax +
jz loc_105D54C  +
mov eax [esi] +
mov eax [eax+60h] +
mov cx [eax+1Ch] +
mov [eax+18h] cx +
mov eax [esi] +
mov eax [eax+60h] +
mov cx [eax+1Eh] +
mov [eax+1Ah] cx +
mov eax dword_108B018 +
mov [esi+18h] eax +
jmp loc_105D624  +
call ?DoPreparePrinting@CView@@QAEHPAUCPrintInfo@@@Z  +
test eax eax +
jz loc_105D5A8  +
mov eax ebx +
call sub_1002061  +
retn 4  +
***
jz loc_105D651  +
mov ecx esi +
pop esi  +
jmp sub_1034E78  +
***
cmp dword ptr [esi+4Ch] 0 +
jz loc_105D65F  +
mov ecx esi +
pop esi  +
jmp sub_1034D64  +
***
pop esi  +
retn   +
***
mov eax offset off_105D674 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_105D6B6  +
cmp [ebp+arg_4] 0 +
jz loc_105D6B6  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+3Ch]  +
push 4  +
mov ecx esi +
call ?SetStretchBltMode@CDC@@QAEHH@Z  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_105D6F4  +
push dword ptr [esi+20h]  +
mov eax [esi+4] +
push dword ptr [esi+1Ch]  +
mov ecx [eax+48h] +
call sub_1010728  +
fld  qword ptr [esi+10h] +
mov eax [esi+4] +
push 1  +
push ecx  +
push ecx  +
mov ecx [eax+48h] +
fstp  [esp+10h+var_10] +
call sub_1010425  +
mov ecx [esi+18h] +
test ecx ecx +
jz loc_105D702  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
xor edx edx +
mov [ebp-4] edx +
mov dword ptr [esi] offset off_1039894 +
mov [esi+8] edx +
mov [esi+18h] edx +
cmp [ebp+0Ch] edx +
jz loc_105D81E  +
mov eax [ebp+8] +
cmp eax edx +
jz loc_105D81E  +
mov ecx [eax+48h] +
cmp ecx edx +
jz loc_105D81E  +
mov ecx [ecx+40h] +
cmp ecx edx +
jz loc_105D81E  +
cmp [ecx+4] edx +
jz loc_105D81E  +
mov [esi+4] eax +
mov ecx [eax+48h] +
mov ecx [ecx+40h] +
mov ecx [ecx+4] +
mov ecx [ecx+8] +
mov [esi+24h] ecx +
mov ecx [eax+48h] +
mov ecx [ecx+40h] +
mov ecx [ecx+4] +
mov ecx [ecx+0Ch] +
mov [esi+28h] ecx +
mov eax [eax+48h] +
mov eax [eax+40h] +
mov eax [eax+4] +
mov ebx [eax+2Ch] +
xor edi edi +
inc edi  +
mov [eax+2Ch] edi +
mov eax [esi+4] +
mov eax [eax+48h] +
mov eax [eax+40h] +
mov ecx [eax+4] +
push edi  +
call sub_10123BE  +
mov eax [esi+4] +
mov eax [eax+48h] +
mov eax [eax+40h] +
mov eax [eax+4] +
mov [eax+2Ch] ebx +
mov eax [esi+4] +
mov eax [eax+48h] +
mov eax [eax+40h] +
mov eax [eax+4] +
push dword ptr [eax+30h]  +
call ds:GlobalLock  +
mov [esi+8] eax +
test eax eax +
jz loc_105D81E  +
push eax  +
call sub_1036BB3  +
push 0  +
push dword ptr [esi+8]  +
mov [esi+18h] eax +
call sub_1038D78  +
mov [esi+0Ch] eax +
mov eax [esi+4] +
mov ecx [eax+48h] +
mov edx [ecx+58h] +
mov ecx [ecx+5Ch] +
mov [esi+1Ch] edx +
mov [esi+20h] ecx +
mov eax [eax+48h] +
fld  qword ptr [eax+50h] +
lea eax [esi+2Ch] +
push eax  +
fstp  qword ptr [esi+10h] +
call ds:SetRectEmpty  +
mov eax [ebp+0Ch] +
mov [eax+18h] edi +
mov [eax+20h] esi +
mov eax esi +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov dword ptr [esi] offset off_1039894 +
mov eax [eax+48h] +
mov eax [eax+40h] +
mov eax [eax+4] +
push dword ptr [eax+30h]  +
call ds:GlobalUnlock  +
mov dword ptr [esi] offset off_10023C4 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
push ebx  +
mov ebx [ebp+arg_0] +
xor eax eax +
push edi  +
mov edi ecx +
cmp ebx eax +
jz loc_105DABE  +
cmp [ebx+4] eax +
jz loc_105DABE  +
push esi  +
push eax  +
push eax  +
mov eax [edi+4] +
mov ecx [eax+48h] +
call sub_1010728  +
fld1   +
mov eax [edi+4] +
push 1  +
push ecx  +
push ecx  +
mov ecx [eax+48h] +
fstp  [esp+80h+var_80] +
call sub_1010425  +
mov esi ds:GetDeviceCaps +
push 8  +
push dword ptr [ebx+8]  +
call esi  +
push 0Ah  +
push dword ptr [ebx+8]  +
mov [ebp+var_8] eax +
call esi  +
push 4  +
push dword ptr [ebx+8]  +
mov [ebp+var_10] eax +
call esi  +
push 6  +
push dword ptr [ebx+8]  +
mov [ebp+var_4] eax +
call esi  +
push 6Eh  +
push dword ptr [ebx+8]  +
mov [ebp+var_14] eax +
call esi  +
push 6Fh  +
push dword ptr [ebx+8]  +
mov [ebp+var_18] eax +
call esi  +
push 70h  +
push dword ptr [ebx+8]  +
mov [ebp+var_1C] eax +
call esi  +
push 71h  +
push dword ptr [ebx+8]  +
mov [ebp+arg_0] eax +
call esi  +
fild  [ebp+var_8] +
fld  ds:dbl_105DAD0 +
mov [ebp+var_C] eax +
mov eax [ebp+var_18] +
fmul st(1) st +
sub eax [ebp+arg_0] +
fild  [ebp+var_4] +
sub eax [ebp+var_8] +
fdivp st(2) st +
mov [ebp+var_28] eax +
mov eax [ebp+var_1C] +
sub eax [ebp+var_C] +
sub eax [ebp+var_10] +
mov [ebp+var_24] eax +
fimul  [ebp+var_10] +
fidiv  [ebp+var_14] +
fild  dword_108B1F4 +
fmul st st(2) +
fld  ds:dbl_105DAC8 +
fdiv st(1) st +
fxch  st(1) +
call _ftol2_sse  +
mov ecx [ebp+arg_0] +
neg ecx  +
sub ecx eax +
jns loc_105D948  +
and [ebp+var_4] 0 +
jmp loc_105D94B  +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
mov [edi+2Ch] eax +
fild  dword_108B1F8 +
fmul st st(2) +
fdiv st st(1) +
call _ftol2_sse  +
mov ecx [ebp+var_C] +
neg ecx  +
sub ecx eax +
jns loc_105D96F  +
and [ebp+var_C] 0 +
jmp loc_105D972  +
mov [ebp+var_C] ecx +
mov eax [ebp+var_C] +
mov [edi+30h] eax +
fild  dword_108B1FC +
fmul st st(3) +
fdiv st st(1) +
call _ftol2_sse  +
mov ecx [ebp+var_28] +
neg ecx  +
sub ecx eax +
jns loc_105D996  +
and [ebp+arg_0] 0 +
jmp loc_105D999  +
mov [ebp+arg_0] ecx +
mov eax [ebp+arg_0] +
mov [edi+34h] eax +
fild  dword_108B200 +
fmul st st(2) +
fdivrp st(1) st +
call _ftol2_sse  +
mov ecx [ebp+var_24] +
neg ecx  +
sub ecx eax +
jns loc_105D9BB  +
xor eax eax +
jmp loc_105D9BD  +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_4] +
add ecx edx +
cmp ecx [ebp+var_8] +
mov [edi+38h] eax +
jl loc_105D9D5  +
and dword ptr [edi+34h] 0 +
and dword ptr [edi+2Ch] 0 +
mov ecx [ebp+var_C] +
add eax ecx +
cmp eax [ebp+var_10] +
jl loc_105D9E7  +
and dword ptr [edi+38h] 0 +
and dword ptr [edi+30h] 0 +
mov eax [edi+4] +
mov eax [eax+48h] +
mov eax [eax+40h] +
mov ecx [eax+3Ch] +
test ecx ecx +
jnz loc_105DA00  +
mov ecx dword_108B28C +
imul ecx ecx +
mov eax [eax+40h] +
mov [ebp+arg_0] ecx +
fild  [ebp+arg_0] +
test eax eax +
jnz loc_105DA15  +
mov eax dword_108B290 +
imul eax eax +
fild  dword ptr [edi+28h] +
mov [ebp+arg_0] eax +
sub esp 10h +
lea ecx [ebp+var_68] +
fmulp st(2) st +
fild  [ebp+arg_0] +
fdivp st(2) st +
fxch  st(1) +
fstp  [esp+84h+var_80+4] +
fild  dword ptr [edi+24h] +
fmulp st(2) st +
fdivp st(1) st +
fstp  qword ptr [esp] +
push dword_108B218  +
push dword_108B214  +
push dword_108B210  +
push dword_108B20C  +
push dword_108B208  +
push dword_108B204  +
call sub_1065475  +
push 8  +
push dword ptr [ebx+8]  +
call esi  +
sub eax [edi+2Ch] +
lea ecx [edi+4Ch] +
sub eax [edi+34h] +
push 0Ah  +
mov [ecx] eax +
push dword ptr [ebx+8]  +
mov [ebp+arg_0] ecx +
call esi  +
sub eax [edi+30h] +
lea esi [edi+54h] +
sub eax [edi+38h] +
lea ecx [ebp+var_68] +
mov [edi+50h] eax +
lea eax [ebp+var_20] +
push eax  +
push esi  +
lea eax [edi+44h] +
push eax  +
add edi 3Ch +
push edi  +
push [ebp+arg_0]  +
call sub_10654FC  +
mov eax [esi] +
imul eax [ebp+var_20] +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
mov edx [edx+60h] +
mov [edx+1Eh] ax +
xor edx edx +
inc edx  +
pop esi  +
cmp eax edx +
jnz loc_105DABE  +
mov [ecx+18h] edx +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jnz loc_105DAF5  +
xor eax eax +
jmp loc_105DC61  +
mov eax [ebp+arg_4] +
mov eax [eax+14h] +
mov ecx [esi+54h] +
dec eax  +
xor edx edx +
div  ecx +
mov ecx [esi+4Ch] +
push ebx  +
mov ebx [esi+3Ch] +
push edi  +
mov edi ecx +
imul edi edx +
mov edx [esi+50h] +
sub ebx edi +
mov edi edx +
imul edi eax +
mov eax [esi+40h] +
sub eax edi +
mov [ebp+arg_4] eax +
test ebx ebx +
jle loc_105DB2B  +
mov [ebp+var_10] ebx +
jmp loc_105DB2F  +
and [ebp+var_10] 0 +
test eax eax +
jle loc_105DB38  +
mov [ebp+var_C] eax +
jmp loc_105DB3C  +
and [ebp+var_C] 0 +
mov edi [esi+44h] +
add edi ebx +
cmp edi ecx +
mov [ebp+var_8] edi +
jl loc_105DB4B  +
mov [ebp+var_8] ecx +
mov ecx [esi+48h] +
add eax ecx +
cmp eax edx +
mov [ebp+var_4] eax +
jl loc_105DB5A  +
mov [ebp+var_4] edx +
cmp [ebp+var_8] 0 +
jl loc_105DC5C  +
cmp [ebp+var_4] 0 +
jl loc_105DC5C  +
push dword ptr [esi+44h]  +
mov eax [ebp+var_10] +
push dword ptr [esi+24h]  +
mov edi ds:MulDiv +
sub eax ebx +
push eax  +
call edi  +
push dword ptr [esi+48h]  +
mov [ebp+var_20] eax +
mov eax [ebp+var_C] +
push dword ptr [esi+28h]  +
sub eax [ebp+arg_4] +
push eax  +
call edi  +
push dword ptr [esi+44h]  +
mov [ebp+var_1C] eax +
push dword ptr [esi+24h]  +
mov eax [ebp+var_8] +
sub eax ebx +
push eax  +
call edi  +
push dword ptr [esi+48h]  +
mov ebx eax +
mov eax [ebp+var_4] +
push dword ptr [esi+28h]  +
sub eax [ebp+arg_4] +
push eax  +
call edi  +
mov [ebp+var_14] eax +
test ebx ebx +
jl loc_105DC5C  +
test eax eax +
jl loc_105DC5C  +
mov eax [esi+18h] +
and [ebp+arg_4] 0 +
mov edi [ebp+arg_0] +
test eax eax +
jz loc_105DBED  +
push 0  +
push eax  +
mov ecx edi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword ptr [edi+4]  +
mov [ebp+arg_4] eax +
call ds:RealizePalette  +
mov eax [ebp+var_14] +
sub eax [ebp+var_1C] +
sub ebx [ebp+var_20] +
push 0CC0020h  +
push 0  +
push dword ptr [esi+8]  +
push dword ptr [esi+0Ch]  +
push eax  +
mov eax [esi+28h] +
sub eax [ebp+var_14] +
push ebx  +
push eax  +
push [ebp+var_20]  +
mov eax [ebp+var_4] +
sub eax [ebp+var_C] +
push eax  +
mov eax [ebp+var_8] +
sub eax [ebp+var_10] +
push eax  +
mov eax [esi+30h] +
add eax [ebp+var_C] +
push eax  +
mov eax [esi+2Ch] +
add eax [ebp+var_10] +
push eax  +
push dword ptr [edi+4]  +
call ds:StretchDIBits  +
cmp eax 0FFFFFFFFh +
jnz loc_105DC4A  +
push 30h  +
push 0E000h  +
push 8C8h  +
call sub_104CFEB  +
cmp [ebp+arg_4] 0 +
jz loc_105DC5C  +
push 0  +
push [ebp+arg_4]  +
mov ecx edi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
xor eax eax +
pop edi  +
inc eax  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_105D82D  +
test byte ptr [ebp+8] 1 +
jz loc_105DC85  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx dword_108EED4 +
imul eax eax +
cdq   +
idiv  dword_108EAB8[ecx*4] +
push 0Ah  +
pop ecx  +
add eax 5 +
cdq   +
idiv  ecx +
retn   +
***
call sub_100208C  +
mov ebx ecx +
mov eax [ebx+40h] +
push dword ptr [eax+0Ch]  +
xor esi esi +
mov [ebp-78h] esi +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov ecx dword_108AECC +
mov [ebp-2Ch] ecx +
mov ecx dword_108AED0 +
mov [ebp-7Ch] eax +
mov dword ptr [ebp-1Ch] offset unk_108AEB4 +
mov [ebp-34h] esi +
mov [ebp-30h] esi +
mov [ebp-28h] ecx +
cmp dword_108AF30 esi +
jnz loc_105DD28  +
cmp dword_108A218 esi +
jnz loc_105DD28  +
mov [ebp-1Ch] eax +
mov eax [ebx+40h] +
mov ecx [eax+30h] +
mov eax [eax+2Ch] +
push ecx  +
push eax  +
push esi  +
push esi  +
lea eax [ebp-34h] +
push eax  +
mov dword ptr [ebp-78h] 1 +
call ds:SetRect  +
lea esi [ebp-34h] +
lea edi [ebp-50h] +
movs   +
movs   +
movs   +
movs   +
xor edi edi +
cmp [ebp+8] edi +
jz loc_105E2DE  +
lea eax [ebp-34h] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_105E2DE  +
mov eax [ebp+8] +
cdq   +
mov esi eax +
xor esi edx +
sub esi edx +
cmp esi 59h +
jg loc_105E2DE  +
cmp esi 1 +
jl loc_105E2DE  +
cmp [ebp-78h] edi +
jnz loc_105DD80  +
push 1  +
push 1  +
mov ecx ebx +
call sub_10522B4  +
call sub_10049FD  +
mov eax [ebp-2Ch] +
mov ecx [ebp-28h] +
sub eax [ebp-34h] +
sub ecx [ebp-30h] +
mov [ebp-18h] eax +
mov [ebp-14h] ecx +
mov dword_108EED4 esi +
cmp [ebp+0Ch] edi +
jz loc_105DDB1  +
mov eax ecx +
call sub_105DC91  +
mov ecx [ebp-48h] +
mov edx [ebp-44h] +
add ecx eax +
mov [ebp-48h] ecx +
jmp loc_105DDC1  +
call sub_105DC91  +
mov edx [ebp-44h] +
mov ecx [ebp-48h] +
add edx eax +
mov [ebp-44h] edx +
sub ecx [ebp-50h] +
sub edx [ebp-4Ch] +
mov [ebp-58h] ecx +
lea ecx [ebp-74h] +
mov [ebp-54h] edx +
call ??0CDC@@QAE@XZ  +
mov esi offset off_1002208 +
mov [ebp-4] edi +
mov [ebp-38h] edi +
mov [ebp-3Ch] esi +
mov [ebp-60h] edi +
mov edi offset off_100A058 +
mov [ebp-64h] edi +
push dword ptr [ebp-7Ch]  +
lea ecx [ebp-74h] +
mov byte ptr [ebp-4] 2 +
call sub_1002292  +
test eax eax +
jz loc_105E2A8  +
push dword ptr [ebp-54h]  +
lea ecx [ebp-3Ch] +
push dword ptr [ebp-58h]  +
push dword ptr [ebp-7Ch]  +
call sub_1008818  +
test eax eax +
jz loc_105E2A8  +
push dword_108A1C8  +
lea ecx [ebp-64h] +
call sub_100A0C1  +
test eax eax +
jz loc_105E2A8  +
lea eax [ebp-3Ch] +
push eax  +
lea ecx [ebp-74h] +
call sub_10022BD  +
mov [ebp-80h] eax +
push 0  +
lea eax [ebp-74h] +
push eax  +
mov ecx ebx +
call sub_1009365  +
mov [ebp-5Ch] eax +
lea eax [ebp-64h] +
push eax  +
lea eax [ebp-50h] +
push eax  +
lea ecx [ebp-74h] +
call sub_104FFCC  +
push 0  +
push dword ptr [ebp-1Ch]  +
mov ecx ebx +
call sub_1009365  +
mov edi [ebp-30h] +
mov [ebp-20h] eax +
mov eax [ebp-34h] +
mov ecx ebx +
mov [ebp-40h] eax +
mov [ebp-10h] edi +
call ?BeginWaitCursor@CCmdTarget@@QAEXXZ  +
xor eax eax +
mov esi 0CC0020h +
cmp [ebp+0Ch] eax +
jz loc_105DF50  +
cmp [ebp+8] eax +
mov eax [ebp-14h] +
jle loc_105DEEC  +
sub eax edi +
call sub_105DC91  +
mov edi [ebp-28h] +
add eax [ebp-40h] +
cmp edi [ebp-30h] +
jl loc_105DFF7  +
mov ecx [ebp-14h] +
sub ecx edi +
mov [ebp+8] ecx +
push esi  +
push edi  +
push dword ptr [ebp-40h]  +
lea ecx [ebp-74h] +
push dword ptr [ebp-1Ch]  +
push 1  +
push dword ptr [ebp-18h]  +
push edi  +
push eax  +
call sub_100988D  +
mov eax [ebp+8] +
call sub_105DC91  +
add eax [ebp-40h] +
dec edi  +
inc dword ptr [ebp+8]  +
cmp edi [ebp-30h] +
jl loc_105DFF7  +
jmp loc_105DEBB  +
mov edi [ebp-48h] +
sub eax [ebp-10h] +
sub edi [ebp-18h] +
call sub_105DC91  +
mov ecx edi +
sub ecx eax +
mov eax [ebp-28h] +
cmp eax [ebp-30h] +
mov [ebp-10h] eax +
jl loc_105DFF7  +
mov edx [ebp-14h] +
sub edx eax +
mov [ebp+8] edx +
push esi  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-34h]  +
push dword ptr [ebp-1Ch]  +
push 1  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-10h]  +
push ecx  +
lea ecx [ebp-74h] +
call sub_100988D  +
mov eax [ebp+8] +
call sub_105DC91  +
mov ecx edi +
sub ecx eax +
dec dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
inc dword ptr [ebp+8]  +
cmp eax [ebp-30h] +
jl loc_105DFF7  +
jmp loc_105DF15  +
cmp [ebp+8] eax +
mov eax [ebp-18h] +
jle loc_105DFA4  +
sub eax [ebp-40h] +
call sub_105DC91  +
add eax edi +
mov edi [ebp-34h] +
dec edi  +
cmp edi [ebp-2Ch] +
jg loc_105DFF7  +
mov ecx [ebp-18h] +
sub ecx edi +
mov [ebp+8] ecx +
push esi  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-74h] +
push edi  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-14h]  +
push 1  +
push eax  +
push edi  +
call sub_100988D  +
mov eax [ebp+8] +
call sub_105DC91  +
add eax [ebp-10h] +
inc edi  +
dec dword ptr [ebp+8]  +
cmp edi [ebp-2Ch] +
jg loc_105DFF7  +
jmp loc_105DF77  +
mov edi [ebp-44h] +
sub edi [ebp-14h] +
sub eax [ebp-40h] +
mov [ebp-10h] edi +
call sub_105DC91  +
mov ecx edi +
mov edi [ebp-34h] +
sub ecx eax +
dec edi  +
cmp edi [ebp-2Ch] +
jg loc_105DFF7  +
mov eax [ebp-18h] +
sub eax edi +
mov [ebp+8] eax +
push esi  +
push dword ptr [ebp-30h]  +
push edi  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-14h]  +
push 1  +
push ecx  +
push edi  +
lea ecx [ebp-74h] +
call sub_100988D  +
mov eax [ebp+8] +
call sub_105DC91  +
mov ecx [ebp-10h] +
sub ecx eax +
inc edi  +
dec dword ptr [ebp+8]  +
cmp edi [ebp-2Ch] +
jle loc_105DFCA  +
xor edi edi +
cmp [ebp-20h] edi +
jz loc_105E00A  +
mov ecx [ebp-1Ch] +
push edi  +
push dword ptr [ebp-20h]  +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
cmp [ebp-78h] edi +
jz loc_105E0E0  +
push 1  +
mov edi offset unk_108B4B8 +
push offset aSkewBitmap  +
mov ecx edi +
call sub_100D1F5  +
mov eax [ebp-58h] +
mov [ebp-24h] eax +
mov eax [ebp-54h] +
mov [ebp-20h] eax +
lea eax [ebp-24h] +
push eax  +
mov eax [ebx+40h] +
mov ecx [eax+4] +
push 15Eh  +
call sub_103584E  +
mov eax [ebx+40h] +
mov ecx [ebp-58h] +
mov [eax+2Ch] ecx +
mov eax [ebx+40h] +
mov ecx [ebp-54h] +
mov [eax+30h] ecx +
push dword ptr [ebx+40h]  +
call sub_100D08B  +
mov eax [ebx+40h] +
mov ecx [eax+30h] +
mov eax [eax+2Ch] +
push esi  +
xor esi esi +
push esi  +
push esi  +
push dword ptr [ebp-70h]  +
push ecx  +
push eax  +
mov eax [ebp-7Ch] +
push esi  +
push esi  +
push dword ptr [eax+4]  +
call ds:BitBlt  +
lea eax [ebp-50h] +
push eax  +
push dword ptr [ebx+40h]  +
call sub_1005D16  +
lea eax [ebp-50h] +
push eax  +
push dword ptr [ebx+40h]  +
call sub_100D173  +
lea eax [ebp-50h] +
push eax  +
mov ecx ebx +
call sub_100A226  +
mov ecx edi +
call sub_100D848  +
push dword ptr [ebx+40h]  +
call sub_100D2D1  +
push 1  +
push esi  +
push dword ptr [ebx+20h]  +
call ds:InvalidateRect  +
push dword ptr [ebx+20h]  +
call ds:UpdateWindow  +
push dword ptr [ebp-80h]  +
lea ecx [ebp-74h] +
call sub_10022BD  +
lea ecx [ebp-3Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
jmp loc_105E26C  +
mov esi offset off_1002208 +
mov [ebp-20h] edi +
mov [ebp-24h] esi +
push edi  +
mov edi [ebp-58h] +
push 1  +
push 1  +
push dword ptr [ebp-54h]  +
lea ecx [ebp-24h] +
push edi  +
mov byte ptr [ebp-4] 3 +
call sub_1035483  +
test eax eax +
jnz loc_105E13F  +
cmp [ebp-5Ch] eax +
jz loc_105E118  +
push eax  +
push dword ptr [ebp-5Ch]  +
lea ecx [ebp-74h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-24h] esi +
call sub_1002407  +
mov dword ptr [ebp-64h] offset off_100A058 +
jmp loc_105E2B7  +
push dword ptr [ebp-80h]  +
lea ecx [ebp-74h] +
call sub_10022BD  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx offset unk_108AEB4 +
call sub_10022BD  +
mov esi offset unk_108AEC4 +
mov ecx esi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-3Ch] +
call ?Detach@CGdiObject@@QAEPAXXZ  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
mov eax [ebp-54h] +
mov dword_108AED0 eax +
lea eax [ebp-24h] +
push eax  +
mov ecx offset unk_108AED4 +
mov dword_108AECC edi +
call sub_10022BD  +
mov esi offset unk_108AEE4 +
mov ecx esi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-24h] +
call ?Detach@CGdiObject@@QAEPAXXZ  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
push dword_108A1C8  +
mov ecx offset unk_108AEA0 +
call sub_103603F  +
mov esi offset stru_108AF34 +
lea edi [ebp-50h] +
movs   +
movs   +
movs   +
movs   +
xor esi esi +
xor edi edi +
cmp [ebp+0Ch] esi +
jz loc_105E1E2  +
mov eax [ebp-14h] +
call sub_105DC91  +
cdq   +
sub eax edx +
mov edi eax +
sar edi 1 +
jmp loc_105E1F1  +
mov eax [ebp-18h] +
call sub_105DC91  +
cdq   +
sub eax edx +
mov esi eax +
sar esi 1 +
push esi  +
push edi  +
lea eax [ebp-50h] +
push eax  +
call ds:InflateRect  +
mov eax [ebx+40h] +
mov ecx [eax+30h] +
mov eax [eax+2Ch] +
and dword ptr [ebp-90h] 0 +
and dword ptr [ebp-8Ch] 0 +
mov [ebp-88h] eax +
lea eax [ebp-90h] +
push eax  +
lea eax [ebp-50h] +
push eax  +
push eax  +
mov [ebp-84h] ecx +
call ds:IntersectRect  +
mov eax [ebp-44h] +
sub eax [ebp-4Ch] +
mov ecx [ebp-48h] +
sub ecx [ebp-50h] +
push 1  +
push eax  +
push ecx  +
mov ecx offset unk_108AEA0 +
call sub_104EF6B  +
lea eax [ebp-50h] +
push eax  +
mov ecx ebx +
call sub_1036C4C  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
mov dword ptr [ebp-24h] offset off_1002208 +
call sub_1002407  +
xor esi esi +
cmp [ebp-5Ch] esi +
jz loc_105E27D  +
push esi  +
push dword ptr [ebp-5Ch]  +
lea ecx [ebp-74h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
lea ecx [ebp-74h] +
call ?DeleteDC@CDC@@QAEHXZ  +
mov ecx ebx +
call ?EndWaitCursor@CCmdTarget@@QAEXXZ  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ebp-64h] offset off_100A058 +
call sub_1002407  +
mov dword ptr [ebp-3Ch] offset off_1002208 +
jmp loc_105E2C6  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
mov [ebp-64h] edi +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 1 +
call sub_1002407  +
mov [ebp-3Ch] esi +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0 +
call sub_1002407  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-74h] +
call ??1CDC@@UAE@XZ  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpPoint] +
push edi  +
mov ebx ecx +
push esi  +
push dword ptr [ebx+20h]  +
call ds:ClientToScreen  +
lea edi [esi+8] +
push edi  +
push dword ptr [ebx+20h]  +
call ds:ClientToScreen  +
mov ecx ebx +
call ?GetExStyle@CWnd@@QBEKXZ  +
test eax 400000h +
jz loc_105E33F  +
mov eax [esi] +
mov ecx [edi] +
mov [esi] ecx +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
mov ebx ecx +
push esi  +
push esi  +
lea edi [ebx+4] +
push edi  +
mov dword ptr [ebx] offset off_10398F8 +
mov [ebx+18h] eax +
mov [ebx+14h] esi +
call ds:SetRect  +
cmp [ebp+arg_4] esi +
jz loc_105E380  +
mov esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
lea esi [ebx+4] +
lea edi [ebp-18h] +
movs   +
movs   +
movs   +
lea eax [ebp-28h] +
push eax  +
mov eax [ebx+18h] +
movs   +
push dword ptr [eax+20h]  +
call ds:GetWindowRect  +
mov ecx [ebx+18h] +
lea eax [ebp-18h] +
push eax  +
call sub_105E305  +
mov eax [ebp-24h] +
neg eax  +
push eax  +
mov eax [ebp-28h] +
neg eax  +
push eax  +
lea eax [ebp-18h] +
push eax  +
call ds:OffsetRect  +
mov esi [ebp-10h] +
sub esi [ebp-18h] +
mov edi [ebp-0Ch] +
mov eax [ebx+18h] +
sub edi [ebp-14h] +
push dword ptr [eax+20h]  +
dec esi  +
dec edi  +
call ds:GetWindowDC  +
push eax  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov [ebp-4] eax +
call sub_104D931  +
mov ecx [ebp-4] +
push eax  +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
push 5A0049h  +
push 1  +
push esi  +
push dword ptr [ebp-14h]  +
mov [ebp-8] eax +
push dword ptr [ebp-18h]  +
mov eax [ebp-4] +
push dword ptr [eax+4]  +
call ds:PatBlt  +
mov eax [ebp-0Ch] +
push 5A0049h  +
push 1  +
push esi  +
mov esi ds:PatBlt +
dec eax  +
push eax  +
push dword ptr [ebp-18h]  +
mov eax [ebp-4] +
push dword ptr [eax+4]  +
call esi  +
mov eax [ebp-4] +
push 5A0049h  +
push edi  +
push 1  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push dword ptr [eax+4]  +
call esi  +
mov eax [ebp-10h] +
push 5A0049h  +
push edi  +
mov edi [ebp-4] +
push 1  +
push dword ptr [ebp-14h]  +
dec eax  +
push eax  +
push dword ptr [edi+4]  +
call esi  +
push dword ptr [ebp-8]  +
mov ecx edi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov ecx [ebx+18h] +
push edi  +
call sub_1009C7A  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
cmp dword ptr [ecx+14h] 1 +
jnz locret_105E49D  +
and dword ptr [ecx+14h] 0 +
jmp loc_105E38E  +
retn   +
***
cmp dword ptr [ecx+14h] 0 +
jnz locret_105E4B5  +
mov dword ptr [ecx+14h] 1 +
jmp loc_105E38E  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lprc2] +
push edi  +
mov ebx ecx +
push esi  +
lea edi [ebx+4] +
push edi  +
call ds:EqualRect  +
test eax eax +
jz loc_105E4DD  +
cmp [ebp+arg_4] 0 +
jz loc_105E50C  +
xor eax eax +
inc eax  +
cmp [ebp+arg_4] 0 +
jnz loc_105E4F1  +
cmp [ebx+14h] eax +
jz loc_105E4F1  +
and [ebp+arg_4] 0 +
jmp loc_105E4F4  +
mov [ebp+arg_4] eax +
mov ecx ebx +
call sub_105E48E  +
cmp [ebp+arg_4] 0 +
movs   +
movs   +
movs   +
movs   +
jz loc_105E50C  +
mov ecx ebx +
call sub_105E4A3  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10398F8 +
mov ecx [esi+18h] +
xor eax eax +
mov [ebp-4] eax +
cmp [ecx+20h] eax +
jz loc_105E548  +
cmp [esi+14h] eax +
jz loc_105E548  +
mov ecx esi +
call sub_105E48E  +
mov dword ptr [esi] offset off_10023C4 +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_105E518  +
test byte ptr [ebp+8] 1 +
jz loc_105E573  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov eax offset off_105E590 +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10052FC +
mov ecx [esi+7Ch] +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_105E5D6  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1COleServerItem@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov eax [ecx] +
jmp dword ptr [eax+88h]  +
***
and dword_108A244 0 +
cmp dword_108A248 0 +
push esi  +
mov esi ecx +
mov dword_108B198 1 +
jz loc_105E61B  +
call sub_10049FD  +
mov ecx esi +
pop esi  +
jmp loc_106ABD4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ecx] +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+50h]  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov ebx [ebp+8] +
push 1  +
push ebx  +
call ??0COleServerItem@@IAE@PAVCOleServerDoc@@H@Z  +
mov edi [ebp+0Ch] +
xor eax eax +
mov [ebp-4] eax +
mov dword ptr [esi] offset off_10052FC +
cmp edi eax +
jz loc_105E67A  +
mov [esi+7Ch] edi +
jmp loc_105E683  +
mov edi [ebx+0ECh] +
mov [esi+7Ch] eax +
cmp edi eax +
jz loc_105E6B8  +
cmp [edi+4] eax +
jz loc_105E6B8  +
push eax  +
lea ebx [esi+40h] +
push 8  +
mov ecx ebx +
call ?DelayRenderFileData@COleDataSource@@QAEXGPAUtagFORMATETC@@@Z  +
push 0  +
push 2  +
mov ecx ebx +
call ?DelayRenderData@COleDataSource@@QAEXGPAUtagFORMATETC@@@Z  +
mov eax [edi+4] +
cmp dword ptr [eax+24h] 0 +
jz loc_105E6B8  +
push 0  +
push 9  +
mov ecx ebx +
call ?DelayRenderData@COleDataSource@@QAEXGPAUtagFORMATETC@@@Z  +
mov eax esi +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_105E5AD  +
test byte ptr [ebp+8] 1 +
jz loc_105E6E1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [eax+20h] +
mov eax [eax+7Ch] +
mov edx eax +
test eax eax +
jnz loc_105E70C  +
mov edx [ecx+0ECh] +
mov eax [ecx+0F0h] +
push 1  +
push eax  +
push edx  +
push dword ptr [ebp+8]  +
call sub_1011E5B  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 1 +
jz loc_105E732  +
pop ebp  +
jmp loc_106AC0B  +
mov eax [ecx+7Ch] +
test eax eax +
jnz loc_105E742  +
mov eax [ecx+20h] +
mov eax [eax+0ECh] +
push esi  +
test eax eax +
jz loc_105E7A0  +
cmp dword ptr [eax+4] 0 +
jz loc_105E7A0  +
mov ecx [eax+4] +
mov ecx [ecx+2Ch] +
mov esi [ebp+arg_4] +
mov [esi] ecx +
mov ecx [eax+4] +
mov ecx [ecx+30h] +
mov [esi+4] ecx +
mov eax [eax+4] +
push dword ptr [eax+0Ch]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
test eax eax +
jz loc_105E77A  +
push esi  +
mov ecx eax +
call ?DPtoHIMETRIC@CDC@@QBEXPAUtagSIZE@@@Z  +
jmp loc_105E7B1  +
mov eax [esi] +
imul eax eax +
cdq   +
idiv  dword_108B28C +
mov [esi] eax +
mov eax [esi+4] +
imul eax eax +
cdq   +
idiv  dword_108B290 +
mov [esi+4] eax +
jmp loc_105E7B1  +
mov eax 0BB8h +
mov ecx eax +
mov edx eax +
mov eax [ebp+arg_4] +
mov [eax] ecx +
mov [eax+4] edx +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_106AC16  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov ebx ecx +
mov esi [ebx+20h] +
cmp dword_108B194 edi +
jz loc_105E82B  +
mov dword_108B198 edi +
cmp dword_108A248 edi +
jz loc_105E7F9  +
call sub_10049FD  +
mov dword_108A248 edi +
mov dword_108A244 edi +
mov dword_108A21C edi +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+68h]  +
lea ecx [ebp+var_4] +
mov [ebp+var_4] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+6Ch]  +
cmp eax edi +
jz loc_105E82B  +
mov ecx eax +
call sub_101775E  +
mov ecx ebx +
call ?OnOpen@COleServerItem@@MAEXXZ  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi [ecx+7Ch] +
test esi esi +
jnz loc_105E85D  +
mov eax [ecx+20h] +
mov esi [eax+0ECh] +
test esi esi +
jz loc_105E913  +
mov eax [esi+4] +
push dword ptr [eax+0Ch]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_105E913  +
mov eax [esi+4] +
mov ecx [eax+2Ch] +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi [eax+30h] +
mov eax [ebx] +
mov [ebp+var_C] ecx +
push 8  +
mov ecx ebx +
neg edi  +
call dword ptr [eax+3Ch]  +
push edi  +
push [ebp+var_C]  +
lea eax [ebp+var_14] +
push eax  +
mov ecx ebx +
call sub_105E628  +
push 0  +
push 0  +
lea eax [ebp+var_14] +
push eax  +
mov ecx ebx +
call ?SetWindowOrg@CDC@@QAE?AVCPoint@@HH@Z  +
mov eax [esi+4] +
mov eax [eax+24h] +
and [ebp+arg_0] 0 +
test eax eax +
jz loc_105E8D1  +
push 0  +
push eax  +
mov ecx ebx +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword ptr [ebx+4]  +
mov [ebp+arg_0] eax +
call ds:RealizePalette  +
push 4  +
mov ecx ebx +
call ?SetStretchBltMode@CDC@@QAEHH@Z  +
mov eax [esi+4] +
push 0CC0020h  +
push dword ptr [eax+30h]  +
mov ecx ebx +
push dword ptr [eax+2Ch]  +
xor eax eax +
push eax  +
push eax  +
push [ebp+var_4]  +
push edi  +
push [ebp+var_C]  +
push eax  +
push eax  +
call sub_1036263  +
mov eax [esi+4] +
cmp dword ptr [eax+24h] 0 +
jz loc_105E911  +
push 0  +
push [ebp+arg_0]  +
mov ecx ebx +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
pop edi  +
pop ebx  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 8  +
***
call sub_1002370  +
mov ecx [ebp-14h] +
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+7Ch] +
xor eax eax +
test edx edx +
jnz loc_105E9CE  +
mov edx [ecx+20h] +
mov edx [edx+0ECh] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
movzx esi word ptr [edi] +
cmp si 2 +
jz loc_105E9E2  +
cmp si 9 +
jnz loc_105E9E6  +
test edx edx +
jnz loc_105E9EF  +
push [ebp+arg_4]  +
push edi  +
call ?OnRenderGlobalData@COleServerItem@@UAEHPAUtagFORMATETC@@PAPAX@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1002370  +
mov edx [ecx+7Ch] +
mov eax [ecx+20h] +
mov esi edx +
test edx edx +
jnz loc_105EA18  +
mov esi [eax+0ECh] +
mov eax [ebp+8] +
cmp word ptr [eax] 8 +
jnz loc_105EA85  +
test esi esi +
jz loc_105EA85  +
lea ecx [ebp-1Ch] +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
push 0  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_10123BE  +
push 1  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_103D004  +
or dword ptr [ebp-4] 0FFFFFFFFh +
xor esi esi +
inc esi  +
call ?AfxTryCleanup@@YGXXZ  +
jmp loc_105EA90  +
mov eax [ebp-14h] +
push 0  +
mov [ebp-18h] eax +
push dword ptr [eax+8]  +
mov ecx offset unk_108AF60 +
push 83Eh  +
call sub_101209D  +
mov eax offset loc_105EA78 +
retn   +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
xor eax eax +
jmp loc_105EA92  +
push dword ptr [ebp+0Ch]  +
push eax  +
call ?OnRenderFileData@COleServerItem@@UAEHPAUtagFORMATETC@@PAVCFile@@@Z  +
mov esi eax +
mov eax esi +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_105EABC +
mov eax esi +
pop esi  +
retn   +
***
push 44Eh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
movzx eax [ebp+arg_0] +
push eax  +
push 44Dh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
mov [ebp-8] eax +
mov eax [ebp+0Ch] +
mov [ebp-4] eax +
lea eax [ebp-8] +
push eax  +
push 0  +
push 437h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lParam] +
push eax  +
push 1  +
push 43Ah  +
mov dword ptr [eax] 5Ch +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
push 442h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 443h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lParam] +
push eax  +
push 0  +
push 444h  +
mov dword ptr [eax] 5Ch +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lParam] +
push eax  +
push 1  +
push 444h  +
mov dword ptr [eax] 5Ch +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lParam] +
push eax  +
push 0  +
push 444h  +
mov dword ptr [eax] 74h +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lParam] +
push eax  +
push 1  +
push 43Ah  +
mov dword ptr [eax] 74h +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lParam] +
push eax  +
push 1  +
push 444h  +
mov dword ptr [eax] 74h +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 4DDh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 4E1h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lParam]  +
mov esi [ebp+wParam] +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
push esi  +
push 0D6h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 0B3h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 439h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 43Fh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
push 0C7h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
call ds:SendMessageW  +
retn   +
***
call ds:SendMessageW  +
retn   +
***
call ds:SendMessageW  +
retn   +
***
call ds:SendMessageW  +
retn   +
***
call ds:SendMessageW  +
retn   +
***
xor eax offset SendMessageW +
push edi  +
push 1  +
push 2Eh  +
mov edi ecx +
push 100h  +
push dword ptr [edi+20h]  +
call esi  +
push 1  +
push 2Eh  +
push 101h  +
push dword ptr [edi+20h]  +
call esi  +
pop edi  +
pop esi  +
retn   +
***
mov eax offset off_105EEB8 +
retn   +
***
mov eax offset off_104A610 +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
push offset aRichedit50w  +
call ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
push 0  +
push 20h  +
push 0  +
mov esi ecx +
call ?ModifyStyleEx@CWnd@@QAEHKKI@Z  +
mov ecx esi +
pop esi  +
jmp ?Default@CWnd@@IAEJXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
mov ecx [ebp+0Ch] +
and dword ptr [esi+5Ch] 0 +
mov [esi+60h] ecx +
mov ecx [ebp+10h] +
lea eax [esi+58h] +
and dword ptr [eax] 0 +
mov [esi+64h] ecx +
push eax  +
mov ecx esi +
call sub_105ED87  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
or dword ptr [eax+2Ch] 20h +
push eax  +
call ?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
lea eax [edi+40h] +
cmp [ebp+0Ch] eax +
jnz loc_105EFFD  +
push esi  +
mov esi [ebp+8] +
push 0  +
push dword_108B1D4  +
push esi  +
call sub_105051D  +
push dword ptr [edi+0D0h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+38h]  +
push 1  +
mov ecx esi +
call ?SetBkMode@CDC@@QAEHH@Z  +
push 5  +
call ds:GetStockObject  +
pop esi  +
test eax eax +
jnz loc_105F004  +
mov ecx edi +
call ?Default@CWnd@@IAEJXZ  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
add dword ptr [eax] 5 +
add dword ptr [eax+4] 5 +
add dword ptr [eax+8] 0FFFFFFFBh +
add dword ptr [eax+0Ch] 0FFFFFFFBh +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 40h +
pop ebp  +
jmp sub_105ED37  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax ecx +
sub ecx 4 +
jz loc_105F074  +
dec ecx  +
jz loc_105F070  +
dec ecx  +
dec ecx  +
jz loc_105F06C  +
dec ecx  +
jz loc_105F068  +
dec ecx  +
jz loc_105F064  +
dec ecx  +
jnz loc_105F077  +
push 9  +
jmp loc_105F076  +
push 0Ah  +
jmp loc_105F076  +
push 7  +
jmp loc_105F076  +
push 8  +
jmp loc_105F076  +
push 4  +
jmp loc_105F076  +
push 5  +
pop eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ecx] +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+40h]  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
mov eax ecx +
push esi  +
lea ecx [ebp-60h] +
push ecx  +
lea ecx [eax+40h] +
mov dword ptr [ebp-60h] 5Ch +
mov dword ptr [ebp-5Ch] 2 +
or esi 0FFFFFFFFh +
call sub_105EBED  +
test al 2 +
jz loc_105F13C  +
movzx esi byte ptr [ebp-58h] +
shr esi 1 +
and esi 1 +
mov ecx [ebp-4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100207A  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax ecx +
push esi  +
lea ecx [ebp+lParam] +
push ecx  +
lea ecx [eax+40h] +
mov [ebp+lParam] 5Ch +
mov [ebp+var_5C] 4 +
or esi 0FFFFFFFFh +
call sub_105EBED  +
test al 4 +
jz loc_105F190  +
movzx esi [ebp+var_58] +
shr esi 2 +
and esi 1 +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100207A  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax ecx +
push esi  +
lea ecx [ebp+lParam] +
push ecx  +
lea ecx [eax+40h] +
mov [ebp+lParam] 5Ch +
mov [ebp+var_5C] 8 +
or esi 0FFFFFFFFh +
call sub_105EBED  +
test al 8 +
jz loc_105F1E4  +
movzx esi [ebp+var_58] +
shr esi 3 +
and esi 1 +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100207A  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
xor ebx ebx +
lea eax [ebp-60h] +
lea edi [esi+40h] +
inc ebx  +
push eax  +
mov ecx edi +
mov dword ptr [ebp-60h] 5Ch +
mov [ebp-5Ch] ebx +
call sub_105EBED  +
and eax [ebp-5Ch] +
test al bl +
jz loc_105F236  +
xor [ebp-58h] ebx +
jmp loc_105F239  +
or [ebp-58h] ebx +
lea eax [ebp-60h] +
push eax  +
mov ecx edi +
mov [ebp-5Ch] ebx +
call sub_105EC76  +
push 0  +
push 0  +
push 0Eh  +
push dword ptr [esi+60h]  +
call ds:SendMessageW  +
test eax eax +
jnz loc_105F265  +
lea eax [ebp-60h] +
push eax  +
mov ecx edi +
call sub_105EC4E  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 2  +
pop ebx  +
lea eax [ebp-60h] +
lea edi [esi+40h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-60h] 5Ch +
mov [ebp-5Ch] ebx +
call sub_105EBED  +
and eax [ebp-5Ch] +
test al bl +
jz loc_105F2B7  +
xor [ebp-58h] ebx +
jmp loc_105F2BA  +
or [ebp-58h] ebx +
lea eax [ebp-60h] +
push eax  +
mov ecx edi +
mov [ebp-5Ch] ebx +
call sub_105EC76  +
push 0  +
push 0  +
push 0Eh  +
push dword ptr [esi+60h]  +
call ds:SendMessageW  +
test eax eax +
jnz loc_105F2E6  +
lea eax [ebp-60h] +
push eax  +
mov ecx edi +
call sub_105EC4E  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 4  +
pop ebx  +
lea eax [ebp-60h] +
lea edi [esi+40h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-60h] 5Ch +
mov [ebp-5Ch] ebx +
call sub_105EBED  +
and eax [ebp-5Ch] +
test al bl +
jz loc_105F338  +
xor [ebp-58h] ebx +
jmp loc_105F33B  +
or [ebp-58h] ebx +
lea eax [ebp-60h] +
push eax  +
mov ecx edi +
mov [ebp-5Ch] ebx +
call sub_105EC76  +
push 0  +
push 0  +
push 0Eh  +
push dword ptr [esi+60h]  +
call ds:SendMessageW  +
test eax eax +
jnz loc_105F367  +
lea eax [ebp-60h] +
push eax  +
mov ecx edi +
call sub_105EC4E  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 0Fh  +
pop edi  +
lea eax [ebp+lParam] +
lea ebx [esi+40h] +
push eax  +
mov ecx ebx +
mov [ebp+lParam] 5Ch +
mov [ebp+var_5C] edi +
call sub_105EBED  +
xor eax eax +
cmp [ebp+arg_0] eax +
jnz loc_105F3BA  +
and [ebp+var_58] 0FFFFFFFEh +
jmp loc_105F3BE  +
or [ebp+var_58] 1 +
cmp [ebp+arg_4] eax +
jnz loc_105F3C9  +
and [ebp+var_58] 0FFFFFFFDh +
jmp loc_105F3CD  +
or [ebp+var_58] 2 +
cmp [ebp+arg_8] eax +
jnz loc_105F3D8  +
and [ebp+var_58] 0FFFFFFFBh +
jmp loc_105F3DC  +
or [ebp+var_58] 4 +
cmp [ebp+arg_C] eax +
jnz loc_105F3E7  +
and [ebp+var_58] 0FFFFFFF7h +
jmp loc_105F3EB  +
or [ebp+var_58] 8 +
lea eax [ebp+lParam] +
push eax  +
mov ecx ebx +
mov [ebp+var_5C] edi +
call sub_105EC76  +
push 0  +
push 0  +
push 0Eh  +
push dword ptr [esi+60h]  +
call ds:SendMessageW  +
test eax eax +
jnz loc_105F417  +
lea eax [ebp+lParam] +
push eax  +
mov ecx ebx +
call sub_105EC4E  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax ecx +
push edi  +
lea ecx [ebp+lParam] +
push ecx  +
lea ecx [eax+40h] +
xor edi edi +
mov [ebp+lParam] 5Ch +
mov [ebp+var_5C] 80000000h +
call sub_105EBED  +
and eax [ebp+var_5C] +
test eax eax +
jns loc_105F470  +
mov eax [ebp+var_54] +
push 14h  +
cdq   +
pop ecx  +
idiv  ecx +
mov edi eax +
mov ecx [ebp+var_4] +
mov eax edi +
xor ecx ebp +
pop edi  +
call sub_100207A  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
lea eax [ebp+lParam] +
lea ebx [esi+40h] +
push eax  +
mov ecx ebx +
mov [ebp+lParam] 5Ch +
mov [ebp+var_5C] 80000000h +
call sub_105EBED  +
mov eax [ebp+arg_0] +
imul eax eax +
mov [ebp+var_54] eax +
lea eax [ebp+lParam] +
push eax  +
mov ecx ebx +
mov [ebp+var_5C] 80000000h +
call sub_105EC76  +
push 0  +
push 0  +
push 0Eh  +
push dword ptr [esi+60h]  +
call ds:SendMessageW  +
test eax eax +
jnz loc_105F4EF  +
lea eax [ebp+lParam] +
push eax  +
mov ecx ebx +
call sub_105EC4E  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 4  +
***
call sub_10020DC  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-70h] 0 +
mov ebx [ebp+8] +
mov eax ecx +
lea ecx [ebp-6Ch] +
push ecx  +
lea ecx [eax+40h] +
mov [ebp-74h] ebx +
mov dword ptr [ebp-6Ch] 5Ch +
mov dword ptr [ebp-68h] 20000000h +
call sub_105EBED  +
push offset word_100219C  +
mov ecx ebx +
mov esi eax +
call ??0CString@@QAE@PBG@Z  +
and esi [ebp-68h] +
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-70h] 1 +
test esi 20000000h +
jz loc_105F569  +
lea eax [ebp-52h] +
push eax  +
mov ecx ebx +
call ??4CString@@QAEABV0@PBG@Z  +
mov eax ebx +
call sub_1002119  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
lea eax [ebp+lParam] +
lea ebx [esi+40h] +
push eax  +
mov ecx ebx +
mov [ebp+lParam] 5Ch +
mov [ebp+var_5C] 40000000h +
call sub_105EBED  +
mov eax [ebp+arg_0] +
and [ebp+var_58] 0 +
mov [ebp+var_4C] eax +
lea eax [ebp+lParam] +
push eax  +
mov ecx ebx +
mov [ebp+var_5C] 40000000h +
call sub_105EC76  +
push 0  +
push 0  +
push 0Eh  +
push dword ptr [esi+60h]  +
call ds:SendMessageW  +
test eax eax +
jnz loc_105F5E4  +
lea eax [ebp+lParam] +
push eax  +
mov ecx ebx +
call sub_105EC4E  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 40h +
pop ebp  +
jmp sub_105ECC6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+40h] +
mov ecx edi +
call sub_105EC15  +
xor ecx ecx +
cmp cx ax +
jz loc_105F661  +
add esi 110h +
cmp [esi] cl +
jz loc_105F637  +
mov ecx edi +
call sub_105EDEC  +
push 0  +
push 1  +
mov ecx edi +
mov byte ptr [esi] 1 +
call sub_105EDCA  +
cmp [ebp+arg_74] 0 +
jz loc_105F656  +
mov eax 44000000h +
or [ebp+arg_4] eax +
or [ebp+arg_8] eax +
lea eax [ebp+lParam] +
push eax  +
mov ecx edi +
call sub_105ECEE  +
pop edi  +
pop esi  +
pop ebp  +
retn 78h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 78h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+110h] +
cmp byte ptr [esi] 0 +
jz loc_105F695  +
lea ecx [edi+40h] +
call sub_105EDEC  +
mov byte ptr [esi] 0 +
lea eax [ebp+lParam] +
lea esi [edi+40h] +
push eax  +
mov ecx esi +
call sub_105ECC6  +
lea eax [ebp+lParam] +
push eax  +
mov ecx esi +
call sub_105ECEE  +
push 0  +
push 0  +
mov ecx esi +
call sub_105EDCA  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100207A  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push dword ptr [ecx+8]  +
call ds:GetTextMetricsW  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_103995C +
and dword ptr [ebp-4] 0 +
call ?DestroyMenu@CMenu@@QAEHXZ  +
mov dword ptr [esi] offset off_10023C4 +
call sub_1002061  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push dword ptr [ecx+4]  +
call ds:GetSubMenu  +
push eax  +
call ?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
movzx eax word ptr [ebp+8] +
push esi  +
push eax  +
push 4  +
push eax  +
mov esi ecx +
call ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBG0@Z  +
push eax  +
call ds:LoadMenuW  +
push eax  +
mov ecx esi +
call ?Attach@CMenu@@QAEHPAUHMENU__@@@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpRect]  +
push dword ptr [ecx+20h]  +
call ds:ValidateRect  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_105EA9F  +
mov edi ds:SetRectEmpty +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+54h] 0 +
lea eax [esi+44h] +
push eax  +
mov dword ptr [esi] offset off_105F7E4 +
mov dword ptr [esi+40h] 1 +
call edi  +
lea eax [esi+58h] +
push eax  +
call edi  +
and dword ptr [esi+68h] 0 +
mov ecx offset unk_108AF60 +
mov byte ptr [esi+6Ch] 0 +
call sub_1056420  +
mov eax esi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+54h] 0 +
jnz loc_105F8C4  +
call ?Default@CWnd@@IAEJXZ  +
jmp loc_105F999  +
push esi  +
push edi  +
lea esi [ebx+44h] +
push esi  +
call ds:IsRectEmpty  +
test eax eax +
jz loc_105F8F4  +
push 0  +
push esi  +
push dword ptr [ebx+20h]  +
call ds:GetUpdateRect  +
test eax eax +
jnz loc_105F8EC  +
push esi  +
mov ecx ebx +
call sub_104BCB6  +
push esi  +
mov ecx ebx +
call sub_105F768  +
lea edi [ebp-10h] +
movs   +
movs   +
movs   +
movs   +
lea esi [ebx+44h] +
push esi  +
mov ecx ebx +
call sub_105E305  +
mov eax [ebx+54h] +
mov ecx [eax+150h] +
push esi  +
call sub_1017263  +
mov edi [ebp+8] +
push 0  +
push dword_108B1D4  +
push edi  +
call sub_105051D  +
cmp dword ptr [ebx+40h] 0 +
mov [ebp+8] eax +
jz loc_105F967  +
mov ebx [ebx+54h] +
mov eax [ebx+150h] +
fld  qword ptr [eax+50h] +
fadd  ds:dbl_1031550 +
call _ftol2_sse  +
sub [ebp-10h] eax +
sub [ebp-0Ch] eax +
add [ebp-8] eax +
add [ebp-4] eax +
mov ecx [ebx+150h] +
push 1  +
lea eax [ebp-10h] +
push eax  +
push esi  +
push edi  +
call sub_1009432  +
jmp loc_105F97B  +
mov eax [ebx+54h] +
add eax 154h +
push eax  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_104FFCC  +
cmp dword ptr [ebp+8] 0 +
jz loc_105F98D  +
push 0  +
push dword ptr [ebp+8]  +
mov ecx edi +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push esi  +
call ds:SetRectEmpty  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CWnd@@QAE@XZ  +
xor ebx ebx +
lea ecx [esi+40h] +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_1002E94 +
call sub_105F782  +
lea eax [esi+154h] +
mov [eax+4] ebx +
mov dword ptr [eax] offset off_100A058 +
xor edi edi +
inc edi  +
push 8  +
mov [esi+110h] bl +
mov dword ptr [esi+0B0h] 3 +
mov [esi+0B8h] ebx +
mov [esi+0BCh] edi +
mov [esi+0C0h] ebx +
mov [esi+0C4h] ebx +
mov [esi+0C8h] ebx +
mov [esi+0CCh] ebx +
call ds:GetSysColor  +
push 5  +
mov [esi+0D0h] eax +
call ds:GetSysColor  +
mov [esi+0D4h] eax +
lea eax [esi+0D8h] +
mov [esi+100h] edi +
mov [esi+104h] edi +
mov [esi+0B4h] edi +
mov edi ds:SetRectEmpty +
push eax  +
mov [esi+0F8h] ebx +
mov [esi+0FCh] ebx +
mov [esi+108h] ebx +
mov [esi+10Ch] ebx +
call edi  +
lea eax [esi+0E8h] +
push eax  +
call edi  +
mov eax esi +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1002E94 +
lea edi [esi+0B8h] +
cmp dword ptr [edi] 0 +
mov dword ptr [ebp-4] 2 +
jz loc_105FAD8  +
lea ecx [esi+154h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
and dword ptr [edi] 0 +
lea ecx [esi+154h] +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ecx] offset off_100A058 +
call sub_1002407  +
lea ecx [esi+40h] +
mov byte ptr [ebp-4] 0 +
call ??1CWnd@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CWnd@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor edx edx +
cmp [ecx+0BCh] edx +
jnz loc_105FB37  +
xor eax eax +
inc eax  +
cmp [ebp+arg_4] edx +
jz loc_105FB29  +
push 5  +
pop eax  +
push eax  +
push edx  +
push [ebp+lprcUpdate]  +
push dword ptr [ecx+60h]  +
call ds:RedrawWindow  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
push eax  +
mov [esi+0D0h] eax +
call sub_105F578  +
push 0  +
push 0  +
mov ecx esi +
call sub_105FB0F  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+0B4h] +
mov ecx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp eax edi +
jnz loc_105FB8D  +
cmp ecx edi +
jnz loc_105FB91  +
cmp eax edi +
jz loc_105FB96  +
cmp ecx edi +
jnz loc_105FB96  +
xor ebx ebx +
inc ebx  +
jmp loc_105FB98  +
xor ebx ebx +
mov [esi+80h] ecx +
mov [esi+0B4h] ecx +
cmp [esi+0B8h] edi +
jz loc_105FBBD  +
lea ecx [esi+154h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov [esi+0B8h] edi +
cmp [esi+0B4h] edi +
jnz loc_105FBE0  +
push dword ptr [esi+0D4h]  +
lea ecx [esi+154h] +
call sub_100A0C1  +
mov dword ptr [esi+0B8h] 1 +
cmp ebx edi +
jz loc_105FC03  +
push 1  +
push edi  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
push 1  +
push edi  +
mov ecx esi +
call sub_105FB0F  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+60h]  +
mov [ebp+var_8] esi +
call ds:GetWindowRect  +
mov eax [esi+150h] +
fld  qword ptr [eax+50h] +
mov eax [ebp+arg_0] +
mov esi ds:GetDeviceCaps +
fstp  [ebp+var_18] +
push 58h  +
push dword ptr [eax+8]  +
call esi  +
mov ecx [ebp+Rect.right] +
sub ecx [ebp+Rect.left] +
mov edi ds:MulDiv +
push eax  +
mov ebx 5A0h +
push ebx  +
push ecx  +
call edi  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push 5Ah  +
push dword ptr [eax+8]  +
call esi  +
fild  [ebp+var_4] +
mov [ebp+nDenominator] eax +
mov eax [ebp+Rect.bottom] +
fdiv  [ebp+var_18] +
sub eax [ebp+Rect.top] +
mov [ebp+nNumber] eax +
call _ftol2_sse  +
push [ebp+nDenominator]  +
mov [ebp+var_4] eax +
push ebx  +
push [ebp+nNumber]  +
call edi  +
mov [ebp+nNumber] eax +
fild  [ebp+nNumber] +
fdiv  [ebp+var_18] +
call _ftol2_sse  +
or [ebp+var_34] 0FFFFFFFFh +
mov [ebp+nNumber] eax +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
mov [ebp+var_5C] eax +
mov [ebp+var_60] eax +
xor eax eax +
mov [ebp+var_38] eax +
mov [ebp+var_48] eax +
mov [ebp+var_58] eax +
mov [ebp+var_44] eax +
mov [ebp+var_54] eax +
mov eax [ebp+var_4] +
mov [ebp+var_40] eax +
mov [ebp+var_50] eax +
mov eax [ebp+var_8] +
push 0FFFFFFECh  +
push dword ptr [eax+20h]  +
call ds:GetWindowLongW  +
test eax 400000h +
jz loc_105FCF9  +
mov eax [ebp+arg_0] +
push 58h  +
push dword ptr [eax+8]  +
call esi  +
push eax  +
push ebx  +
push 1  +
call edi  +
mov ecx [ebp+var_4] +
sub ecx eax +
mov [ebp+var_40] ecx +
mov [ebp+var_50] ecx +
mov ecx [ebp+var_8] +
lea eax [ebp+lParam] +
add ecx 40h +
push eax  +
mov [ebp+var_8] ecx +
call sub_105ED16  +
mov eax [ebp+arg_0] +
push 5Ah  +
push dword ptr [eax+8]  +
call esi  +
push eax  +
push ebx  +
push [ebp+var_1C]  +
call edi  +
mov ecx [ebp+var_8] +
neg eax  +
mov [ebp+var_54] eax +
mov eax [ebp+nNumber] +
push 0  +
add eax 7D0h +
push 20h  +
push 0  +
mov [ebp+var_3C] eax +
mov [ebp+var_4C] eax +
call ?ModifyStyleEx@CWnd@@QAEHKKI@Z  +
mov ecx [ebp+var_8] +
push 1  +
lea eax [ebp+var_60] +
push eax  +
call sub_105EDA8  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
and dword ptr [ebp-18h] 0 +
mov ebx offset off_102DD4C +
mov [ebp-1Ch] ebx +
mov edi [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
push edi  +
lea ecx [ebp-1Ch] +
call sub_1036595  +
mov esi [ebp+8] +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call ?SelectClipRgn@CDC@@QAEHPAVCRgn@@@Z  +
mov eax [ebp-10h] +
cmp dword ptr [eax+0B4h] 0 +
jnz loc_105FDAA  +
add eax 154h +
push eax  +
push edi  +
mov ecx esi +
call sub_104FFCC  +
push dword ptr [edi+4]  +
mov eax [esi] +
push dword ptr [edi]  +
lea ecx [ebp-24h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+40h]  +
mov ecx [ebp-10h] +
push esi  +
call sub_105FC0F  +
push dword ptr [ebp-20h]  +
lea eax [ebp-14h] +
push dword ptr [ebp-24h]  +
mov ecx esi +
push eax  +
call sub_105F08D  +
push 0  +
mov ecx esi +
call ?SelectClipRgn@CDC@@QAEHPAVCRgn@@@Z  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov [ebp-1Ch] ebx +
call sub_1002407  +
call sub_1002061  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
lea eax [ebp-30h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
mov edi [ebp-28h] +
mov ebx [ebp-24h] +
push dword ptr [esi+60h]  +
sub edi [ebp-30h] +
sub ebx [ebp-2Ch] +
call ds:GetDC  +
push eax  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
and dword ptr [ebp-1Ch] 0 +
mov [ebp-10h] eax +
mov dword ptr [ebp-20h] offset off_102DB20 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
call sub_105F504  +
push dword ptr [ebp-10h]  +
mov eax [eax] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_105F42D  +
imul eax eax +
push eax  +
lea ecx [ebp-20h] +
call ?CreatePointFont@CFont@@QAEHHPBGPAVCDC@@@Z  +
lea ecx [ebp-18h] +
mov [ebp-14h] eax +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
cmp dword ptr [ebp-14h] 0 +
lea eax [ebp-20h] +
jnz loc_105FE8C  +
mov eax [ebp+8] +
mov ecx [ebp-10h] +
test ecx ecx +
jz loc_105FF0C  +
test eax eax +
jz loc_105FF01  +
mov edx [ecx] +
push eax  +
call dword ptr [edx+30h]  +
mov ecx [ebp-10h] +
mov [ebp-14h] eax +
lea eax [esi+114h] +
push eax  +
call sub_105F6CF  +
mov eax [esi+128h] +
mov ecx [esi+114h] +
imul eax eax +
add eax 0Ah +
add ecx 0Ah +
xor edx edx +
cmp eax edi +
mov [esi+100h] eax +
mov [esi+104h] ecx +
jle loc_105FED9  +
mov edi eax +
inc edx  +
cmp ecx ebx +
jle loc_105FEE2  +
xor edx edx +
mov ebx ecx +
inc edx  +
test edx edx +
jz loc_105FEF0  +
mov dword ptr [esi+0B0h] 3 +
cmp dword ptr [ebp-14h] 0 +
jz loc_105FF01  +
mov ecx [ebp-10h] +
push dword ptr [ebp-14h]  +
mov eax [ecx] +
call dword ptr [eax+30h]  +
push dword ptr [ebp-10h]  +
lea ecx [esi+40h] +
call sub_1009C7A  +
mov esi [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov [esi] edi +
mov [esi+4] ebx +
mov dword ptr [ebp-20h] offset off_102DB20 +
call sub_1002407  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
and dword ptr [ecx+0B0h] 0 +
cmp dword ptr [ecx+15Ch] 0 +
jz locret_105FF4F  +
push dword ptr [ecx+60h]  +
call ds:UpdateWindow  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+0C0h] ebx +
jz loc_105FF8A  +
cmp [esi+0A8h] ebx +
jnz loc_10600A6  +
push 0FFFFFFFFh  +
push 30h  +
push 3E8h  +
call ?AfxMessageBox@@YGHIII@Z  +
jmp loc_10600A6  +
push edi  +
mov edi ds:GetWindowRect +
lea eax [ebp+Point] +
push eax  +
push dword ptr [esi+20h]  +
call edi  +
lea eax [ebp+var_3C] +
push eax  +
push dword ptr [esi+60h]  +
call edi  +
push ebx  +
push ebx  +
push 0Eh  +
push dword ptr [esi+60h]  +
call ds:SendMessageW  +
dec eax  +
push eax  +
lea eax [ebp+rc.right] +
lea ecx [esi+40h] +
push eax  +
call sub_105ED59  +
mov ecx [eax] +
mov eax [eax+4] +
mov edi [ebp+var_38] +
mov ebx [ebp+var_30] +
sub edi [ebp+Point.y] +
sub ebx [ebp+var_38] +
cmp byte ptr [esi+0ACh] 0 +
mov [ebp+var_8] eax +
mov eax [esi+150h] +
fld  qword ptr [eax+50h] +
mov [ebp+var_C] ecx +
fstp  qword ptr [ebp+rc.right] +
jz loc_106000E  +
fild  dword ptr [esi+114h] +
fmul  qword ptr [ebp+rc.right] +
call _ftol2_sse  +
mov ecx [ebp+var_8] +
add eax edi +
add eax eax +
add ecx eax +
cmp ecx ebx +
jl loc_10600A5  +
add [ebp-20h] eax +
jmp loc_106003A  +
mov ecx esi +
call sub_105F42D  +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
fmul  qword ptr [ebp+rc.right] +
call _ftol2_sse  +
mov ecx [ebp+var_8] +
lea edx [eax+ecx] +
add edx edi +
cmp edx ebx +
jl loc_10600A5  +
add eax edi +
lea eax [ecx+eax*2] +
add eax [ebp+Point.y] +
mov [ebp-20h] eax +
mov ecx [esi+150h] +
lea eax [ebp+Point] +
push eax  +
call sub_1017263  +
mov ecx [esi+150h] +
lea eax [ebp+rc] +
push eax  +
call sub_1051C58  +
lea edi [esi+40h] +
mov ecx edi +
call sub_105EB81  +
mov ecx [ebp+rc.bottom] +
cmp [ebp-20h] ecx +
jle loc_1060077  +
mov [ebp-20h] ecx +
test al 40h +
jnz loc_1060086  +
push 40h  +
push 2  +
jmp loc_106007F  +
test al 40h +
jz loc_1060086  +
push 0FFFFFFBFh  +
push 3  +
mov ecx edi +
call sub_105EB99  +
push 1  +
lea eax [ebp+Point] +
push eax  +
mov ecx esi +
call sub_1017723  +
push 5  +
mov ecx edi +
call ?ShowWindow@CWnd@@QAEHH@Z  +
push dword ptr [esi+60h]  +
call ds:UpdateWindow  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+0Ch] +
push ebx  +
mov ebx ds:ScreenToClient +
mov [ebp-8] eax +
mov eax [ebp+10h] +
push esi  +
mov [ebp-4] eax +
push edi  +
mov esi ecx +
lea eax [ebp-8] +
push eax  +
lea edi [esi+150h] +
mov eax [edi] +
push dword ptr [eax+20h]  +
call ebx  +
mov ecx [edi] +
lea eax [ebp-8] +
push eax  +
call sub_100839D  +
lea eax [ebp-8] +
push eax  +
call sub_100A8D8  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [esi+20h]  +
call ebx  +
push 2  +
push dword ptr [ebp+10h]  +
lea eax [ebp-18h] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_10361D9  +
pop edi  +
pop esi  +
pop ebx  +
cmp eax 2 +
jnz locret_1060136  +
push eax  +
call sub_106217C  +
push eax  +
call ds:SetCursor  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+0Ch] +
mov [ebp-8] eax +
mov eax [ebp+10h] +
push esi  +
mov [ebp-4] eax +
lea eax [ebp-18h] +
mov esi ecx +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
lea eax [ebp-8] +
push eax  +
push dword ptr [esi+20h]  +
call ds:ScreenToClient  +
push 2  +
push dword ptr [ebp-4]  +
lea eax [ebp-18h] +
push dword ptr [ebp-8]  +
push eax  +
call sub_10361D9  +
cmp eax 2 +
jnz loc_1060193  +
push eax  +
call sub_106217C  +
push eax  +
call ds:SetCursor  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+0BCh] 0 +
jnz loc_10601BF  +
push 0  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
push esi  +
push edi  +
lea eax [ebx+0E8h] +
mov esi eax +
lea edi [ebx+0D8h] +
movs   +
movs   +
movs   +
push eax  +
mov ecx ebx +
movs   +
call sub_104BC9C  +
mov ecx [ebx+150h] +
lea eax [ebx+0E8h] +
push eax  +
call sub_1017263  +
lea esi [ebx+40h] +
xor edi edi +
mov dword ptr [ebx+0B0h] 2 +
cmp esi edi +
jz loc_1060229  +
cmp [esi+20h] edi +
jz loc_1060229  +
push 1  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
push edi  +
push edi  +
call ?MoveWindow@CWnd@@QAEXHHHHH@Z  +
push 3  +
push edi  +
push edi  +
push edi  +
push edi  +
push ds:?wndTopMost@CWnd@@2V1@B  +
mov ecx esi +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
push 1  +
push edi  +
push dword ptr [ebx+20h]  +
call ds:InvalidateRect  +
push dword ptr [ebx+20h]  +
call ds:UpdateWindow  +
cmp [ebx+0B4h] edi +
jz loc_1060250  +
push 1  +
push edi  +
mov ecx ebx +
call sub_105FB0F  +
cmp [ebx+0BCh] edi +
pop edi  +
pop esi  +
jnz loc_1060263  +
push 5  +
mov ecx ebx +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov eax [ebx+150h] +
fld  qword ptr [eax+50h] +
lea eax [ebp-18h] +
push eax  +
fstp  qword ptr [ebp-8] +
push dword ptr [ebx+20h]  +
call ds:GetWindowRect  +
mov eax [ebp-10h] +
sub eax [ebp-18h] +
mov [ebp+10h] eax +
fild  dword ptr [ebp+10h] +
fdiv  qword ptr [ebp-8] +
call _ftol2_sse  +
mov [ebx+0F8h] eax +
mov eax [ebp-0Ch] +
sub eax [ebp-14h] +
mov [ebp+10h] eax +
fild  dword ptr [ebp+10h] +
fdiv  qword ptr [ebp-8] +
call _ftol2_sse  +
mov ecx [ebx+150h] +
mov [ebx+0FCh] eax +
lea eax [ebp-28h] +
push eax  +
call sub_10083F8  +
mov ecx [ebx+150h] +
lea eax [ebp-18h] +
push eax  +
call sub_1017263  +
mov eax [ebp-14h] +
sub eax [ebp-24h] +
mov [ebx+10Ch] eax +
mov eax [ebp-18h] +
sub eax [ebp-28h] +
mov [ebx+108h] eax +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push dword ptr [ebp+0Ch]  +
mov esi ecx +
lea ecx [ebp-20h] +
call sub_100B3A5  +
mov eax [ebp-18h] +
sub eax [ebp-20h] +
mov [ebp-10h] eax +
mov eax [ebp-14h] +
sub eax [ebp-1Ch] +
mov [ebp-0Ch] eax +
lea eax [ebp-10h] +
push eax  +
call sub_103B3BA  +
mov eax [ebp-20h] +
mov [ebp-8] eax +
mov eax [ebp-1Ch] +
mov [ebp-4] eax +
lea eax [ebp-8] +
push eax  +
add esi 150h +
mov eax [esi] +
push dword ptr [eax+20h]  +
call ds:ScreenToClient  +
mov ecx [esi] +
lea eax [ebp-8] +
push eax  +
call sub_100839D  +
lea eax [ebp-8] +
push eax  +
call sub_100A8D8  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
push edi  +
push dword ptr [ebp+0Ch]  +
mov ebx ecx +
xor esi esi +
lea ecx [ebp-24h] +
mov [ebp-4] esi +
call sub_100B3A5  +
mov ecx [ebx+150h] +
lea eax [ebp-34h] +
push eax  +
call sub_1051C58  +
mov ecx [ebx+150h] +
lea eax [ebp-34h] +
push eax  +
call sub_105E305  +
mov eax [ebp-34h] +
mov ecx [ebp-1Ch] +
xor edi edi +
cmp [ebp-24h] eax +
jge loc_10603AD  +
sub eax [ebp-24h] +
jmp loc_10603B6  +
mov eax [ebp-2Ch] +
cmp ecx eax +
jle loc_10603B8  +
sub eax ecx +
mov edi eax +
mov edx [ebp-30h] +
cmp [ebp-20h] edx +
mov eax [ebp-18h] +
jge loc_10603C8  +
sub edx [ebp-20h] +
jmp loc_10603D1  +
mov edx [ebp-28h] +
cmp eax edx +
jle loc_10603D3  +
sub edx eax +
mov esi edx +
test edi edi +
jnz loc_10603DB  +
test esi esi +
jz loc_10603FE  +
push esi  +
push edi  +
lea eax [ebp-24h] +
push eax  +
call ds:OffsetRect  +
mov edi [ebp+0Ch] +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
lea esi [ebp-24h] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebp-4] 1 +
sub eax [ebp-20h] +
sub ecx [ebp-24h] +
mov [ebp-10h] eax +
lea eax [ebp-14h] +
push eax  +
mov [ebp-14h] ecx +
call sub_103B3BA  +
mov eax [ebp-24h] +
mov [ebp-0Ch] eax +
mov eax [ebp-20h] +
mov [ebp-8] eax +
lea eax [ebp-0Ch] +
push eax  +
mov eax [ebx+150h] +
push dword ptr [eax+20h]  +
call ds:ScreenToClient  +
mov ecx [ebx+150h] +
lea eax [ebp-0Ch] +
push eax  +
call sub_100839D  +
lea eax [ebp-0Ch] +
push eax  +
call sub_100A8D8  +
push 2  +
call sub_106217C  +
push eax  +
call ds:SetCursor  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ecx [edi+150h] +
lea eax [ebp-10h] +
push eax  +
call sub_10083F8  +
push 5  +
push 5  +
lea eax [ebp-10h] +
push eax  +
call ds:InflateRect  +
mov esi [ebp+8] +
mov edx [ebp-10h] +
mov eax [ebp-8] +
mov ebx [ebp-0Ch] +
mov ecx [ebp-4] +
and dword ptr [esi+18h] 0 +
and dword ptr [esi+1Ch] 0 +
sub eax edx +
mov [esi+8] eax +
lea eax [ebp-20h] +
sub ecx ebx +
push eax  +
mov [esi+0Ch] ecx +
mov [esi+10h] edx +
mov [esi+14h] ebx +
push dword ptr [edi+20h]  +
call ds:GetWindowRect  +
mov ecx [edi+150h] +
lea eax [ebp-20h] +
push eax  +
call sub_1017263  +
mov eax [edi+0CCh] +
cmp eax 0Bh +
jz loc_10604F0  +
cmp eax 0Eh +
jz loc_10604F0  +
jbe loc_106050B  +
cmp eax 10h +
jbe loc_1060502  +
cmp eax 11h +
jnz loc_106050B  +
mov eax [ebp-10h] +
sub eax [ebp-20h] +
add [esi+8] eax +
cmp dword ptr [edi+0CCh] 11h +
jnz loc_106050B  +
mov eax [ebp-0Ch] +
sub eax [ebp-1Ch] +
add [esi+0Ch] eax +
mov eax [esi+8] +
mov [esi+20h] eax +
mov eax [esi+0Ch] +
pop edi  +
mov [esi+24h] eax +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov ecx [esi+150h] +
lea eax [ebp+rc] +
push eax  +
call sub_10083F8  +
mov eax [esi+150h] +
fld  qword ptr [eax+50h] +
mov edi [esi+108h] +
fild  dword ptr [esi+0F8h] +
mov ebx [esi+10Ch] +
add edi [ebp+rc.left] +
add ebx [ebp+rc.top] +
fmul st st(1) +
call _ftol2_sse  +
fimul  dword ptr [esi+0FCh] +
mov [ebp+var_8] eax +
call _ftol2_sse  +
mov ecx [ebp+rc.right] +
sub ecx edi +
add ecx 5 +
cmp [ebp+var_8] ecx +
jl loc_1060585  +
mov [ebp+var_8] ecx +
mov ecx [ebp+rc.bottom] +
sub ecx ebx +
add ecx 5 +
cmp eax ecx +
jl loc_1060593  +
mov eax ecx +
push 1  +
push eax  +
push [ebp+var_8]  +
mov ecx esi +
push ebx  +
push edi  +
call ?MoveWindow@CWnd@@QAEXHHHHH@Z  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_100208C  +
mov edi ecx +
push dword ptr [edi+20h]  +
call ds:GetWindowDC  +
push eax  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov ebx eax +
test ebx ebx +
jz loc_1060808  +
and dword ptr [ebp-18h] 0 +
mov dword ptr [ebp-1Ch] offset off_102DD4C +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [edi+20h]  +
call ds:GetWindowRect  +
mov eax [ebp-20h] +
sub eax [ebp-28h] +
mov esi [ebp-24h] +
sub esi [ebp-2Ch] +
mov ecx [edi+150h] +
and dword ptr [ebp-3Ch] 0 +
and dword ptr [ebp-38h] 0 +
mov [ebp-10h] eax +
mov [ebp-30h] eax +
lea eax [ebp-2Ch] +
push eax  +
mov [ebp-14h] esi +
mov [ebp-34h] esi +
call sub_1017263  +
mov ecx [edi+150h] +
lea eax [ebp-2Ch] +
push eax  +
call sub_100872F  +
push 0FFFFFFECh  +
push dword ptr [edi+20h]  +
call ds:GetWindowLongW  +
test eax 400000h +
jz loc_10606FE  +
mov eax [ebp-24h] +
mov edx [ebp-2Ch] +
lea ecx [esi+1] +
mov esi 0CC0020h +
push esi  +
push 5  +
sub edx eax +
push edx  +
push dword ptr [ebp-28h]  +
add eax 0FFFFFFFEh +
push eax  +
mov eax [edi+150h] +
mov eax [eax+40h] +
push dword ptr [eax+0Ch]  +
push 5  +
push ecx  +
push 0  +
push 0  +
push dword ptr [ebx+4]  +
call ds:StretchBlt  +
mov eax [ebp-24h] +
mov ecx [ebp-2Ch] +
push esi  +
sub ecx eax +
push 5  +
push ecx  +
mov ecx [ebp-20h] +
add eax 0FFFFFFFEh +
add ecx 0FFFFFFFBh +
push ecx  +
push eax  +
mov eax [edi+150h] +
mov eax [eax+40h] +
push dword ptr [eax+0Ch]  +
mov eax [ebp-14h] +
push 5  +
inc eax  +
push eax  +
mov eax [ebp-10h] +
add eax 0FFFFFFFBh +
push eax  +
push 0  +
push dword ptr [ebx+4]  +
call ds:StretchBlt  +
mov ecx [ebp-20h] +
sub ecx [ebp-28h] +
mov eax [ebp-10h] +
push esi  +
push ecx  +
mov ecx [edi+150h] +
mov ecx [ecx+40h] +
push 0FFFFFFFBh  +
push dword ptr [ebp-28h]  +
inc eax  +
push dword ptr [ebp-24h]  +
mov [ebp-10h] eax +
push dword ptr [ecx+0Ch]  +
push eax  +
push 5  +
push 0  +
push 0  +
push dword ptr [ebx+4]  +
call ds:StretchBlt  +
mov eax [ebp-20h] +
sub eax [ebp-28h] +
push esi  +
push eax  +
mov eax [ebp-2Ch] +
push 0FFFFFFFBh  +
add eax 5 +
jmp loc_10607AE  +
mov ecx [ebp-24h] +
sub ecx [ebp-2Ch] +
lea eax [esi+1] +
mov esi 0CC0020h +
push esi  +
push 5  +
push ecx  +
push dword ptr [ebp-28h]  +
mov ecx [edi+150h] +
push dword ptr [ebp-2Ch]  +
mov ecx [ecx+40h] +
push dword ptr [ecx+0Ch]  +
push 5  +
push eax  +
push 0  +
push 0  +
push dword ptr [ebx+4]  +
call ds:StretchBlt  +
mov eax [ebp-24h] +
sub eax [ebp-2Ch] +
push esi  +
push 5  +
push eax  +
mov eax [ebp-20h] +
add eax 0FFFFFFFBh +
push eax  +
push dword ptr [ebp-2Ch]  +
mov eax [edi+150h] +
mov eax [eax+40h] +
push dword ptr [eax+0Ch]  +
mov eax [ebp-14h] +
push 5  +
inc eax  +
push eax  +
mov eax [ebp-10h] +
add eax 0FFFFFFFBh +
push eax  +
push 0  +
push dword ptr [ebx+4]  +
call ds:StretchBlt  +
mov ecx [ebp-20h] +
sub ecx [ebp-28h] +
mov eax [ebp-10h] +
push esi  +
push ecx  +
mov ecx [edi+150h] +
mov ecx [ecx+40h] +
push 5  +
push dword ptr [ebp-28h]  +
inc eax  +
push dword ptr [ebp-2Ch]  +
mov [ebp-10h] eax +
push dword ptr [ecx+0Ch]  +
push eax  +
push 5  +
push 0  +
push 0  +
push dword ptr [ebx+4]  +
call ds:StretchBlt  +
mov eax [ebp-20h] +
sub eax [ebp-28h] +
push esi  +
push eax  +
mov eax [ebp-24h] +
push 5  +
add eax 0FFFFFFFBh +
push dword ptr [ebp-28h]  +
push eax  +
mov eax [edi+150h] +
mov eax [eax+40h] +
push dword ptr [eax+0Ch]  +
mov eax [ebp-14h] +
push dword ptr [ebp-10h]  +
add eax 0FFFFFFFBh +
push 5  +
push 0  +
push eax  +
push dword ptr [ebx+4]  +
call ds:StretchBlt  +
push 0Fh  +
lea eax [ebp-3Ch] +
push eax  +
push ebx  +
call sub_10351DA  +
push 0Fh  +
lea eax [ebp-3Ch] +
push eax  +
push ebx  +
call sub_100857A  +
push ebx  +
mov ecx edi +
call sub_1009C7A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov dword ptr [ebp-1Ch] offset off_102DD4C +
call sub_1002407  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
push 2  +
pop ebx  +
lea eax [ebp+8] +
mov esi ecx +
push eax  +
push dword ptr [esi+20h]  +
call ds:ScreenToClient  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
push 0  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-10h] +
push dword ptr [ebp+8]  +
push eax  +
call sub_10361D9  +
push 0FFFFFFECh  +
push dword ptr [esi+20h]  +
mov edi eax +
call ds:GetWindowLongW  +
test eax 400000h +
jz loc_106086C  +
push edi  +
mov ecx esi +
call sub_105F041  +
mov edi eax +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-10h] +
push dword ptr [ebp+8]  +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_1060883  +
xor ebx ebx +
inc ebx  +
and dword ptr [esi+0CCh] 0 +
lea eax [edi-3] +
cmp eax 7 +
ja loc_10608F7  +
jmp ds:off_106090C[eax*4]  +
mov dword ptr [esi+0CCh] 0Ch +
jmp loc_10608F7  +
mov dword ptr [esi+0CCh] 0Ah +
jmp loc_10608F7  +
mov dword ptr [esi+0CCh] 0Bh +
jmp loc_10608F7  +
mov dword ptr [esi+0CCh] 0Fh +
jmp loc_10608F7  +
mov dword ptr [esi+0CCh] 0Dh +
jmp loc_10608F7  +
mov dword ptr [esi+0CCh] 0Eh +
jmp loc_10608F7  +
mov dword ptr [esi+0CCh] 10h +
jmp loc_10608F7  +
mov dword ptr [esi+0CCh] 11h +
mov esi [esi+0CCh] +
test esi esi +
jz loc_1060903  +
mov ebx esi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
push eax  +
call ds:GetCaretPos  +
mov eax [ebp-24h] +
mov [ebp-14h] eax +
mov eax [ebp-20h] +
mov [ebp-10h] eax +
lea eax [ebp-14h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:ClientToScreen  +
lea eax [ebp-34h] +
push eax  +
mov ecx esi +
call sub_105E305  +
mov ecx esi +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
test eax eax +
jnz loc_10609CC  +
mov eax esi +
lea ecx [ebp-34h] +
push ecx  +
push eax  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
push dword ptr [ebp-14h]  +
push 2  +
call ?TrackPopupMenu@CMenu@@QAEHIHHPAVCWnd@@PBUtagRECT@@@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_105F6E9  +
call sub_1002061  +
retn 0Ch  +
***
adc eax offset UpdateWindow +
push 1  +
push 0  +
mov ecx esi +
call sub_105FB0F  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+40h] +
call sub_105EDEC  +
push 1  +
push 0  +
mov ecx esi +
call sub_105FB0F  +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
push dword ptr [ecx+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov esi ds:PostMessageW +
mov edi 60006h +
push edi  +
push 1  +
mov ebx eax +
push 201h  +
push dword ptr [ebx+20h]  +
call esi  +
push edi  +
push 1  +
push 202h  +
push dword ptr [ebx+20h]  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp-8] +
push eax  +
mov esi ecx +
call ds:GetCursorPos  +
lea eax [ebp-8] +
push eax  +
add esi 150h +
mov eax [esi] +
push dword ptr [eax+20h]  +
call ds:ScreenToClient  +
mov ecx [esi] +
lea eax [ebp-8] +
push eax  +
call sub_100839D  +
lea eax [ebp-8] +
push eax  +
call sub_100A8D8  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov dword_108B268 eax +
call sub_105F150  +
mov ecx esi +
mov dword_108B264 eax +
call sub_105F1A4  +
mov dword_108B26C eax +
test edi edi +
jz loc_1060BE1  +
mov dword_108B254 edi +
push offset word_100219C  +
lea ecx [ebp-10h] +
call sub_103C01F  +
test eax eax +
jz loc_1060C00  +
lea eax [ebp-10h] +
push eax  +
mov ecx offset unk_108B274 +
call ??4CString@@QAEABV0@ABV0@@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 0  +
mov esi ecx +
push 0Eh  +
push dword ptr [esi+60h]  +
call ds:SendMessageW  +
test eax eax +
jnz loc_1060C44  +
push [ebp+lParam]  +
lea ecx [esi+40h] +
call sub_105EC9E  +
push [ebp+lParam]  +
add esi 40h +
mov ecx esi +
call sub_105ECEE  +
mov ecx esi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_105F6E9  +
test byte ptr [ebp+8] 1 +
jz loc_1060C7E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 4  +
mov eax offset loc_107A178 +
call sub_100208C  +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1060CB1  +
call sub_105F782  +
call sub_1002061  +
retn   +
***
push 4  +
mov eax offset loc_107A178 +
call sub_100208C  +
push 160h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1060CE6  +
call sub_105F9C7  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
test dword ptr [ebp+0Ch] 800h +
mov edi eax +
jz loc_1060D25  +
mov ecx [esi+54h] +
mov dword ptr [esi+68h] 1 +
mov byte ptr [esi+6Ch] 1 +
call sub_105FF55  +
and dword ptr [esi+68h] 0 +
mov byte ptr [esi+6Ch] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
mov ecx [esi+54h] +
mov dword ptr [esi+68h] 1 +
call sub_105FF55  +
and dword ptr [esi+68h] 0 +
pop esi  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_105FAA1  +
test byte ptr [ebp+8] 1 +
jz loc_1060D72  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lParam] +
push esi  +
mov esi ecx +
push eax  +
lea ecx [esi+40h] +
mov [esi+0D4h] eax +
call sub_105EC2D  +
lea eax [esi+0B4h] +
cmp dword ptr [eax] 0 +
jnz loc_1060DB2  +
push 0  +
mov ecx esi +
mov dword ptr [eax] 1 +
call sub_105FB6C  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
lea eax [ebx+0E8h] +
mov esi eax +
lea edi [ebx+0D8h] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call sub_104BC9C  +
mov ecx [ebx+150h] +
lea edi [ebx+0E8h] +
push edi  +
call sub_1017263  +
mov eax [edi+8] +
sub eax [edi] +
lea esi [ebx+0D8h] +
mov ecx [esi+8] +
sub ecx [esi] +
cmp ecx eax +
jnz loc_1060E17  +
mov eax [edi+0Ch] +
mov ecx [esi+0Ch] +
sub eax [edi+4] +
sub ecx [esi+4] +
cmp ecx eax +
jz loc_1060E1B  +
movs   +
movs   +
movs   +
movs   +
lea ecx [ebx+40h] +
xor esi esi +
mov dword ptr [ebx+0B0h] 2 +
cmp ecx esi +
jz loc_1060E44  +
cmp [ecx+20h] esi +
jz loc_1060E44  +
push 3  +
push esi  +
push esi  +
push esi  +
push esi  +
push ds:?wndTopMost@CWnd@@2V1@B  +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
mov ecx ebx +
call sub_10605AC  +
cmp [ebx+0B4h] esi +
jz loc_1060E5D  +
push 1  +
push esi  +
mov ecx ebx +
call sub_105FB0F  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetWindowRect  +
mov ecx [ebx+150h] +
lea eax [ebp-10h] +
push eax  +
call sub_1017263  +
mov ecx [ebx+150h] +
lea eax [ebp-20h] +
push eax  +
call sub_10083F8  +
mov eax [ebp-0Ch] +
sub eax [ebp-1Ch] +
pop edi  +
mov [ebx+10Ch] eax +
mov eax [ebp-10h] +
sub eax [ebp-20h] +
pop esi  +
mov [ebx+108h] eax +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+108h] +
fild  dword ptr [edi] +
fmul  [ebp+arg_8] +
call _ftol2_sse  +
mov [edi] eax +
lea edi [esi+10Ch] +
fild  dword ptr [edi] +
fmul  [ebp+arg_8] +
call _ftol2_sse  +
and dword ptr [esi+0CCh] 0 +
mov ecx esi +
mov [edi] eax +
call sub_1060523  +
push [ebp+lParam]  +
lea ecx [esi+40h] +
push [ebp+wParam]  +
call sub_105ED37  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
call sub_10020DC  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
lea eax [ebp-6Ch] +
lea ebx [esi+40h] +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-6Ch] 5Ch +
mov dword ptr [ebp-68h] 20000000h +
call sub_105EBED  +
push 1Fh  +
lea eax [ebp-0CCh] +
push eax  +
lea ecx [ebp+8] +
call ?Left@CString@@QBE?AV1@H@Z  +
push dword ptr [ebp+8]  +
lea eax [ebp-52h] +
push 20h  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_102F4F0  +
test eax eax +
jl loc_1060FE1  +
lea eax [ebp-6Ch] +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-68h] 20000000h +
call sub_105EC76  +
push 0  +
push 0  +
push 0Eh  +
push dword ptr [esi+60h]  +
call ds:SendMessageW  +
test eax eax +
jnz loc_1060FE1  +
push 5Ch  +
push eax  +
lea eax [ebp-0C8h] +
push eax  +
call memset  +
add esp 0Ch +
push 0  +
lea ecx [ebp-0CCh] +
call ?GetBuffer@CString@@QAEPAGH@Z  +
push eax  +
push 20h  +
lea eax [ebp-0ACh] +
push eax  +
call sub_102F4F0  +
lea eax [ebp-0C8h] +
push eax  +
mov byte ptr [ebp-0B1h] 1 +
call sub_1071EAD  +
mov al [ebp-0B1h] +
cmp al 1 +
jz loc_1060FD6  +
or dword ptr [ebp-68h] 8000000h +
mov [ebp-54h] al +
lea eax [ebp-6Ch] +
push eax  +
mov ecx ebx +
call sub_105EC4E  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call ??1CString@@QAE@XZ  +
call sub_1002119  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+0BCh] 0 +
push esi  +
push edi  +
jnz loc_1061026  +
xor eax eax +
jmp loc_1061363  +
mov eax [ebp+arg_0] +
mov [ebx+150h] eax +
mov eax [ebp+arg_8] +
mov [ebx+0D4h] eax +
mov eax [ebp+arg_4] +
mov [ebx+0D0h] eax +
mov eax [ebp+arg_10] +
push eax  +
mov [ebx+0B4h] eax +
call sub_105FB6C  +
mov esi [ebp+arg_C] +
lea edi [ebp+rc] +
movs   +
movs   +
push 5  +
movs   +
push 5  +
lea eax [ebp+rc] +
push eax  +
movs   +
call ds:InflateRect  +
add [ebp+rc.right] 0Ah +
add [ebp+rc.bottom] 0Ah +
push 0  +
push 73h  +
push [ebp+arg_0]  +
lea eax [ebp+rc] +
push eax  +
push 40040000h  +
push offset word_100219C  +
push 0  +
mov ecx ebx +
call ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z  +
test eax eax +
jz loc_106101F  +
lea eax [ebp+Point] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetClientRect  +
push 0FFFFFFECh  +
mov [ebx+94h] ebx +
mov byte ptr [ebp+arg_0+3] 0 +
call sub_10049D9  +
push dword ptr [eax+20h]  +
mov esi ds:GetWindowLongW +
call esi  +
mov edi 400000h +
test eax edi +
jz loc_10610DD  +
push 0FFFFFFECh  +
push dword ptr [ebx+20h]  +
call esi  +
or eax edi +
push eax  +
push 0FFFFFFECh  +
push dword ptr [ebx+20h]  +
call ds:SetWindowLongW  +
mov byte ptr [ebp+arg_0+3] 1 +
push 72h  +
push ebx  +
lea eax [ebp+Point] +
push eax  +
lea esi [ebx+40h] +
push 40001104h  +
mov ecx esi +
call sub_105EEF5  +
test eax eax +
jnz loc_106110F  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+60h]  +
jmp loc_106101F  +
lea eax [ebp+Point] +
push eax  +
mov ecx ebx +
call sub_105E305  +
test esi esi +
jnz loc_1061122  +
xor eax eax +
jmp loc_1061125  +
mov eax [esi+20h] +
mov edi ds:SendMessageW +
push 0  +
push 0  +
push 479h  +
push eax  +
call edi  +
and eax 0FFFFFF7Fh +
test esi esi +
jnz loc_1061144  +
xor ecx ecx +
jmp loc_1061147  +
mov ecx [esi+20h] +
push eax  +
push 0  +
push 478h  +
push ecx  +
call edi  +
test esi esi +
jz loc_1061159  +
mov esi [esi+20h] +
push esi  +
mov ecx offset unk_108AF60 +
call sub_10561D3  +
mov esi offset unk_108B274 +
push offset word_100219C  +
mov ecx esi +
call sub_103C01F  +
test eax eax +
jz loc_1061199  +
push ecx  +
mov ecx esp +
mov [ebp+arg_8] esp +
push esi  +
call ??0CString@@QAE@ABV0@@Z  +
mov ecx ebx +
call sub_1060F00  +
push dword_108B254  +
mov ecx ebx +
call sub_105F484  +
push dword_108B26C  +
mov ecx ebx +
push dword_108B264  +
push dword_108B268  +
push dword_108B260  +
call sub_105F37B  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
call sub_105FE01  +
lea eax [ebp+var_18] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetWindowRect  +
mov ecx [ebx+150h] +
lea eax [ebp+var_18] +
push eax  +
call sub_1017263  +
mov eax [ebp+var_C] +
mov ecx [ebp+var_14] +
mov edi [ebp+var_4] +
sub eax ecx +
cmp edi eax +
jle loc_106121F  +
cdq   +
sub eax edx +
mov esi eax +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
sar esi 1 +
sub esi eax +
lea eax [esi+ecx-7] +
xor ecx ecx +
cmp eax ecx +
mov [ebp+var_14] eax +
jg loc_106120E  +
mov [ebp+var_14] ecx +
mov eax [ebx+150h] +
push ecx  +
push ecx  +
push dword ptr [eax+20h]  +
call ds:InvalidateRect  +
mov esi [ebp+var_8] +
lea eax [edi-1] +
push eax  +
lea eax [esi-1] +
push eax  +
push 0  +
push 0  +
lea eax [ebp+var_48] +
push eax  +
call ds:SetRect  +
lea eax [ebp+var_48] +
push eax  +
mov ecx ebx +
call sub_105E305  +
mov ecx [ebx+150h] +
lea eax [ebp+var_48] +
push eax  +
call sub_1017263  +
mov ecx [ebx+150h] +
lea eax [ebp+var_58] +
push eax  +
call sub_1051C58  +
cmp byte ptr [ebp+arg_0+3] 0 +
jz loc_106128C  +
mov ecx [ebp+var_58] +
mov eax [ebp+var_40] +
lea edx [ecx+esi+5] +
cmp edx eax +
jle loc_106127F  +
sub eax ecx +
sub eax 5 +
mov [ebp+var_8] eax +
mov esi eax +
mov eax [ebp+var_10] +
sub eax esi +
sub eax 0Ah +
mov [ebp+var_18] eax +
jmp loc_10612A3  +
mov eax [ebp+var_50] +
cmp [ebp+var_40] eax +
jle loc_10612A0  +
sub eax [ebp+var_40] +
lea eax [esi+eax+5] +
mov [ebp+var_8] eax +
mov esi eax +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
lea ecx [edx+edi] +
cmp ecx [ebp+var_4C] +
jle loc_10612B8  +
mov ecx [ebp+var_4C] +
sub ecx edx +
mov [ebp+var_4] ecx +
mov edi ecx +
push edi  +
push esi  +
push edx  +
push eax  +
lea ecx [ebp+var_68] +
mov [ebx+100h] esi +
mov [ebx+104h] edi +
call sub_100CA63  +
mov esi eax +
push 10h  +
push [ebp+var_4]  +
lea edi [ebx+0E8h] +
push [ebp+var_8]  +
movs   +
push [ebp+var_14]  +
movs   +
push [ebp+var_18]  +
movs   +
movs   +
push ds:?wndTop@CWnd@@2V1@B  +
mov ecx ebx +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
push 4  +
mov ecx ebx +
call ?ShowWindow@CWnd@@QAEHH@Z  +
lea eax [ebp+Point] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetClientRect  +
mov eax [ebp-1Ch] +
sub eax [ebp+Point.y] +
xor edi edi +
push edi  +
push eax  +
mov eax [ebp-20h] +
sub eax [ebp+Point.x] +
lea esi [ebx+40h] +
push eax  +
push edi  +
push edi  +
push ds:?wndTopMost@CWnd@@2V1@B  +
mov ecx esi +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
push 4  +
mov ecx esi +
call ?ShowWindow@CWnd@@QAEHH@Z  +
push dword ptr [ebx+0D0h]  +
mov ecx ebx +
call sub_105F578  +
push dword ptr [ebx+0D4h]  +
mov ecx esi +
call sub_105EC2D  +
mov ecx esi +
mov [ebx+0BCh] edi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov eax offset off_1061378 +
retn   +
***
mov eax offset off_10613A0 +
retn   +
***
mov eax offset off_10613C8 +
retn   +
***
mov eax offset off_10613F0 +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov eax [ebp+arg_0] +
mov [esi+40h] eax +
mov al [ebp+arg_4] +
mov [esi+44h] al +
mov dword ptr [esi] offset off_1002FAC +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push [ebp+arg_14]  +
lea edx [ebp+arg_4] +
push edx  +
push [ebp+arg_0]  +
push offset word_100219C  +
push eax  +
call ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z  +
pop ebp  +
retn 18h  +
***
push 0  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
pop ebp  +
retn 4  +
***
retn   +
***
retn   +
***
and dword_108B180 0 +
push 0  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+0C0h] +
mov ecx [esi] +
test ecx ecx +
jz loc_10614F0  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
and dword ptr [esi] 0 +
mov ecx edi +
pop edi  +
pop esi  +
jmp ?PostNcDestroy@CWnd@@MAEXXZ  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call ?PreCreateWindow@CFrameWnd@@MAEHAAUtagCREATESTRUCTW@@@Z  +
test eax eax +
jz loc_1061532  +
and dword ptr [esi+2Ch] 0FFFFFDFFh +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002FAC +
call ??1CWnd@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_106155C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov ecx [edi+40h] +
mov eax [ecx+58h] +
mov ecx [ecx+5Ch] +
cdq   +
mov ebx eax +
xor ebx edx +
sub ebx edx +
mov eax ecx +
cdq   +
xor eax edx +
sub eax edx +
sub eax 5 +
sub ebx 5 +
cmp byte ptr [edi+44h] 0 +
mov [ebp+var_1] 0 +
mov [ebp+var_14] eax +
jz loc_106162D  +
mov eax [esi+8] +
sub eax [esi] +
mov [ebp+var_28] eax +
mov eax [esi+0Ch] +
sub eax [esi+4] +
mov [ebp+var_24] eax +
mov eax [edi+40h] +
mov eax [eax+40h] +
mov ecx [eax+30h] +
mov eax [eax+2Ch] +
mov [ebp+var_20] eax +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_1C] ecx +
call sub_106839B  +
fstp  [ebp+arg_0] +
fld1   +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 41h +
jnz loc_106162A  +
mov eax [edi+40h] +
mov ebx [eax+40h] +
fild  dword ptr [ebx+2Ch] +
fmul  [ebp+arg_0] +
call _ftol2_sse  +
fild  dword ptr [ebx+30h] +
mov [ebp+var_8] eax +
fmul  [ebp+arg_0] +
call _ftol2_sse  +
mov [ebp+var_C] eax +
mov eax [esi+8] +
sub eax [esi] +
mov [ebp+var_1] 1 +
sub eax [ebp+var_8] +
cdq   +
sub eax edx +
mov ecx eax +
mov eax [esi+0Ch] +
sub eax [esi+4] +
sar ecx 1 +
sub eax [ebp+var_C] +
cdq   +
sub eax edx +
sar eax 1 +
jmp loc_106169F  +
mov eax [ebp+var_14] +
mov ecx [esi+8] +
mov edx [esi] +
mov [ebp+arg_0] ecx +
sub [ebp+arg_0] edx +
mov [ebp+var_14] ecx +
mov ecx [edi+40h] +
mov edi [ebp+arg_0] +
mov [ebp+var_1C] edx +
mov edx [ecx+40h] +
mov ecx [edx+2Ch] +
cmp edi ecx +
mov [ebp+var_8] edi +
jl loc_1061654  +
mov [ebp+var_8] ecx +
mov edi [esi+0Ch] +
mov esi [esi+4] +
mov edx [edx+30h] +
mov [ebp+var_10] esi +
mov esi edi +
sub esi [ebp+var_10] +
mov [ebp+var_24] edi +
cmp esi edx +
mov [ebp+var_C] esi +
jl loc_1061672  +
mov [ebp+var_C] edx +
mov edi [ebp+arg_0] +
cmp edi ecx +
jl loc_106167D  +
xor ecx ecx +
jmp loc_106168D  +
add edi ebx +
cmp edi ecx +
jle loc_106168B  +
sub ecx [ebp+var_14] +
add ecx [ebp+var_1C] +
jmp loc_106168D  +
mov ecx ebx +
cmp esi edx +
jge loc_10616A3  +
add esi eax +
cmp esi edx +
jle loc_106169F  +
sub edx [ebp+var_24] +
add edx [ebp+var_10] +
mov eax edx +
test eax eax +
jge loc_10616A5  +
xor eax eax +
test ecx ecx +
jge loc_10616AB  +
xor ecx ecx +
mov edx [ebp+var_8] +
mov edi [ebp+arg_4] +
mov [ebp+var_30] ecx +
add edx ecx +
mov ecx [ebp+var_C] +
mov [ebp+var_2C] eax +
mov [ebp+var_28] edx +
add ecx eax +
mov al [ebp+var_1] +
mov [ebp+var_24] ecx +
lea esi [ebp+var_30] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_108A24C +
sub esp 54h +
push ebx  +
mov ebx ecx +
cmp eax [ebx+40h] +
jnz loc_106184B  +
push esi  +
xor esi esi +
cmp dword_108AF08 esi +
jnz loc_106184A  +
cmp dword_108AF0C esi +
jnz loc_106184A  +
cmp dword_108AF04 esi +
jnz loc_106184A  +
mov [ebp+var_4] esi +
cmp [ebp+arg_0] esi +
jnz loc_106174F  +
push dword ptr [ebx+20h]  +
call ds:GetDC  +
push eax  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov [ebp+arg_0] eax +
cmp eax esi +
jnz loc_1061748  +
push esi  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
jmp loc_106184A  +
mov [ebp+var_4] 1 +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetClientRect  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+Rect] +
push eax  +
mov ecx ebx +
call sub_1061568  +
mov ecx [ebx+40h] +
lea eax [ebp+rc] +
push eax  +
call sub_10083F8  +
push 5  +
push 5  +
lea eax [ebp+rc] +
push eax  +
call ds:InflateRect  +
mov eax [ebx+40h] +
mov eax [eax+40h] +
cmp eax dword_108AF30 +
jnz loc_106181F  +
push edi  +
mov esi offset stru_108AF34 +
lea edi [ebp+rc] +
movs   +
movs   +
push 2  +
movs   +
push 2  +
lea eax [ebp+rc] +
push eax  +
movs   +
call ds:InflateRect  +
and [ebp+var_34] 0 +
and [ebp+var_30] 0 +
xor eax eax +
inc eax  +
mov [ebp+var_2C] eax +
mov [ebp+var_28] eax +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
mov ecx ebx +
call sub_1061568  +
mov eax [ebx+40h] +
mov esi [ebp+var_C] +
sub esi [ebp+var_14] +
mov ecx [eax+40h] +
mov edx [ebp+var_44] +
mov eax [ecx+2Ch] +
add esi edx +
cmp esi eax +
pop edi  +
jle loc_10617F3  +
sub eax [ebp+var_C] +
add eax [ebp+var_14] +
mov edx eax +
mov esi [ebp+var_8] +
sub esi [ebp+var_10] +
mov eax [ebp+var_40] +
mov ecx [ecx+30h] +
add esi eax +
cmp esi ecx +
jle loc_106180D  +
sub ecx [ebp+var_8] +
add ecx [ebp+var_10] +
mov eax ecx +
neg eax  +
push eax  +
neg edx  +
push edx  +
lea eax [ebp+rc] +
push eax  +
call ds:OffsetRect  +
xor esi esi +
mov eax [ebx+40h] +
mov ecx dword_108AF30 +
cmp [eax+40h] ecx +
jnz loc_106183B  +
push 0Fh  +
lea eax [ebp+rc] +
push eax  +
push [ebp+arg_0]  +
call sub_10351DA  +
cmp [ebp+var_4] esi +
jz loc_106184A  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_1009C7A  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10049D9  +
mov ecx eax +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
mov eax [eax+48h] +
mov [esi+40h] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
call sub_10049D9  +
mov ecx eax +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
mov esi eax +
test esi esi +
jz loc_10618D6  +
push offset off_1009BE0  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_10618D6  +
mov ecx esi +
pop esi  +
jmp sub_1034D64  +
***
pop esi  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10546D4  +
and dword ptr [ebp-4] 0 +
push 48h  +
mov dword ptr [esi] offset off_10030C4 +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-14h] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_106191E  +
push 0  +
push dword ptr [ebp+8]  +
call sub_1061425  +
jmp loc_1061920  +
xor eax eax +
mov byte ptr [ebp-4] 0 +
mov [esi+0C0h] eax +
test eax eax +
jnz loc_106193A  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10030C4 +
call ??1CFrameWnd@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1061969  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov ebx ds:GetWindowRect +
lea eax [ebp-24h] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+20h]  +
call ebx  +
mov eax [ebp-24h] +
mov ecx [ebp-20h] +
mov [ebp-1Ch] eax +
add eax 78h +
push 0Fh  +
mov [ebp-1Ch] eax +
push 0Fh  +
lea eax [ebp-24h] +
add ecx 78h +
push eax  +
mov [ebp-18h] ecx +
call ds:OffsetRect  +
push offset stru_108B1E4  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_10619D4  +
mov esi offset stru_108B1E4 +
lea edi [ebp-24h] +
movs   +
movs   +
movs   +
movs   +
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
push 0C379h  +
lea ecx [ebp-14h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp+8]  +
mov esi [ebp-10h] +
lea eax [ebp-24h] +
push eax  +
push 40000h  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_105485F  +
mov [ebp+8] eax +
test eax eax +
jz loc_1061A4D  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
mov eax [ebp-10h] +
mov ecx [eax+0C0h] +
push esi  +
sub esp 10h +
mov edi esp +
lea esi [ebp-24h] +
movs   +
movs   +
movs   +
push 50000000h  +
movs   +
call sub_1061450  +
test eax eax +
jnz loc_1061A4D  +
and [ebp+8] eax +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
mov eax [ebp-10h] +
push offset stru_108B1E4  +
push dword ptr [eax+20h]  +
call ebx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+10h] +
push esi  +
push edi  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov esi ecx +
push dword ptr [ebp+8]  +
call ?OnSize@CFrameWnd@@IAEXIHH@Z  +
mov ecx [esi+0C0h] +
xor edi edi +
cmp ecx edi +
jz loc_1061AF1  +
cmp [ecx+20h] edi +
jz loc_1061AF1  +
push 10h  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push edi  +
push edi  +
push ds:?wndTop@CWnd@@2V1@B  +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
push dword ptr [esi+20h]  +
call ds:GetDC  +
push eax  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
push edi  +
mov [ebp+10h] eax +
push eax  +
mov eax [esi+0C0h] +
mov ecx [eax+40h] +
call sub_1009942  +
mov eax [esi+0C0h] +
push 1  +
push edi  +
push dword ptr [eax+20h]  +
call ds:InvalidateRect  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_1009C7A  +
mov eax stru_108B1E4.left +
mov ecx [ebp+0Ch] +
add eax ecx +
mov stru_108B1E4.right eax +
mov eax stru_108B1E4.top +
pop edi  +
add eax ebx +
pop esi  +
mov stru_108B1E4.bottom eax +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:GetSystemMetrics +
push edi  +
push 0Bh  +
mov ebx ecx +
call esi  +
mov edi [ebp+8] +
add eax eax +
push 0Ch  +
mov [edi+18h] eax +
call esi  +
add eax eax +
mov ecx ebx +
mov [edi+1Ch] eax +
call ?Default@CWnd@@IAEJXZ  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push 8  +
mov eax offset loc_107CE12 +
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CFrameWnd@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_1003284 +
mov eax dword_108B180 +
push 48h  +
mov [esi+0C4h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-14h] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_1061B9C  +
push 1  +
push dword ptr [ebp+8]  +
call sub_1061425  +
jmp loc_1061B9E  +
xor eax eax +
mov byte ptr [ebp-4] 0 +
mov [esi+0C8h] eax +
test eax eax +
jnz loc_1061BB8  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1003284 +
mov eax [esi+0C0h] +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_1061BF9  +
mov ecx [esi+20h] +
push eax  +
push 0FFFFFFF2h  +
push ecx  +
call ds:SetClassLongW  +
mov ecx [esi+0C8h] +
test ecx ecx +
jz loc_1061C15  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov eax [esi+0C4h] +
mov dword_108B180 eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CFrameWnd@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 268h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ebx ecx +
call sub_10049D9  +
lea ecx [ebp+rc] +
push ecx  +
push dword ptr [eax+20h]  +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+rc] +
push eax  +
call ds:MonitorFromRect  +
lea ecx [ebp+rcSrc] +
push ecx  +
push eax  +
mov [ebp+rcSrc.left] 28h +
call ds:GetMonitorInfoW  +
lea eax [ebp+rcSrc.top] +
push eax  +
lea eax [ebp+rcDst] +
push eax  +
call ds:CopyRect  +
xor edi edi +
cmp esi edi +
jz loc_1061CB8  +
cmp [esi] di +
jz loc_1061CB8  +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
call ds:GetFileTitleW  +
jmp loc_1061CD7  +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push 0F003h  +
push edi  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+rcDst] +
push eax  +
push 92000000h  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
mov ecx ebx +
call ?Create@CFrameWnd@@QAEHPBG0KABUtagRECT@@PAVCWnd@@0KPAUCCreateContext@@@Z  +
push 2  +
push edi  +
mov [ebp+var_228] eax +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadIconW  +
cmp ebx edi +
jnz loc_1061D14  +
xor ecx ecx +
jmp loc_1061D17  +
mov ecx [ebx+20h] +
push eax  +
push 0FFFFFFF2h  +
push ecx  +
call ds:SetClassLongW  +
mov [ebx+0C0h] eax +
cmp [ebp+var_228] edi +
jz loc_1061E41  +
push edi  +
call sub_10049D9  +
mov ecx eax +
call ?EnableWindow@CWnd@@QAEHH@Z  +
mov eax [ebx+0C8h] +
mov esi [eax+40h] +
cmp esi edi +
jz loc_1061E41  +
mov eax [ebp+rcDst.right] +
sub eax [ebp+rcDst.left] +
mov [ebp+var_224] eax +
mov eax [ebp+rcDst.bottom] +
sub eax [ebp+rcDst.top] +
mov [ebp+var_220] eax +
mov eax [esi+40h] +
mov ecx [eax+30h] +
mov eax [eax+2Ch] +
mov [ebp+var_230] eax +
lea eax [ebp+var_224] +
push eax  +
lea eax [ebp+var_230] +
push eax  +
mov [ebp+var_22C] ecx +
call sub_106839B  +
fstp  [ebp+var_220] +
fld1   +
mov esi [esi+40h] +
fcomp  [ebp+var_220] +
fnstsw  ax +
test ah 41h +
jnz loc_1061DD7  +
fild  dword ptr [esi+2Ch] +
fmul  [ebp+var_220] +
call _ftol2_sse  +
fild  dword ptr [esi+30h] +
mov edi eax +
fmul  [ebp+var_220] +
call _ftol2_sse  +
mov esi eax +
jmp loc_1061DDD  +
mov edi [esi+2Ch] +
mov esi [esi+30h] +
mov eax [ebp+rcDst.right] +
sub eax [ebp+rcDst.left] +
push ebx  +
sub eax edi +
cdq   +
sub eax edx +
mov ecx eax +
mov eax [ebp+rcDst.bottom] +
sub eax [ebp+rcDst.top] +
sar ecx 1 +
sub eax esi +
cdq   +
mov [ebp+rcDst.left] ecx +
sub eax edx +
add ecx edi +
sar eax 1 +
mov [ebp+rcDst.top] eax +
add eax esi +
mov [ebp+rcDst.right] ecx +
mov ecx [ebx+0C8h] +
sub esp 10h +
mov [ebp+rcDst.bottom] eax +
mov edi esp +
lea esi [ebp+rcDst] +
movs   +
movs   +
movs   +
push 50000000h  +
movs   +
call sub_1061450  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_228] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
push 1  +
mov esi ecx +
call sub_104D884  +
mov edi eax +
test edi edi +
jnz loc_1061E82  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?OnEraseBkgnd@CFrameWnd@@IAEHPAVCDC@@@Z  +
jmp loc_1061ECD  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
mov ecx [ebp+8] +
push edi  +
lea eax [ebp-10h] +
push eax  +
call sub_104FFCC  +
call sub_10022E9  +
test al al +
jz loc_1061ECA  +
mov eax [esi+0C8h] +
cmp dword ptr [eax+20h] 0 +
jz loc_1061ECA  +
lea ecx [ebp-20h] +
push ecx  +
push dword ptr [eax+20h]  +
call ds:GetWindowRect  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_106851E  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
push 0  +
push 0  +
push 10h  +
push dword ptr [ecx+20h]  +
call ds:PostMessageW  +
retn 0Ch  +
***
call sub_10049D9  +
push 0  +
push 0C360h  +
push 111h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
retn   +
***
call sub_100208C  +
mov ebx ecx +
cmp byte ptr [ebx+44h] 0 +
jnz loc_1061F30  +
cmp dword_108B180 0 +
jz loc_1062084  +
mov eax [ebx+40h] +
test eax eax +
jz loc_1062084  +
cmp dword ptr [eax+40h] 0 +
jz loc_1062084  +
lea eax [ebp-54h] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetClientRect  +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-54h] +
push eax  +
mov ecx ebx +
call sub_1061568  +
mov ecx [ebp-44h] +
mov esi [ebp-3Ch] +
mov edi [ebp-38h] +
mov [ebp-0Dh] al +
mov eax [ebp-40h] +
mov [ebp-18h] ecx +
sub esi ecx +
lea ecx [ebp-34h] +
mov [ebp-14h] eax +
sub edi eax +
call ??0CDC@@QAE@XZ  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-34h] +
call sub_1002292  +
mov eax [ebx+40h] +
push dword ptr [eax+44h]  +
lea ecx [ebp-34h] +
call sub_10022BD  +
mov [ebp-24h] eax +
push 0  +
lea eax [ebp-34h] +
push eax  +
mov ecx offset unk_108AEA0 +
call sub_1035462  +
push 0  +
push dword ptr [ebp+8]  +
mov ecx offset unk_108AEA0 +
mov [ebp-20h] eax +
call sub_1035462  +
cmp byte ptr [ebp-0Dh] 0 +
mov ecx [ebp+8] +
mov [ebp-1Ch] eax +
jz loc_1062004  +
push 4  +
call ?SetStretchBltMode@CDC@@QAEHH@Z  +
mov eax [ebx+40h] +
mov eax [eax+40h] +
mov ecx [ebp+8] +
push 0CC0020h  +
push dword ptr [eax+30h]  +
push dword ptr [eax+2Ch]  +
lea eax [ebp-34h] +
push 0  +
push 0  +
push eax  +
push edi  +
push esi  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
call sub_1036263  +
xor esi esi +
jmp loc_106201E  +
push 0CC0020h  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push dword ptr [ebp-18h]  +
push eax  +
push edi  +
push esi  +
xor esi esi +
push esi  +
push esi  +
call sub_100988D  +
call sub_10022E9  +
test al al +
jz loc_1062039  +
cmp byte ptr [ebx+44h] 0 +
jnz loc_1062039  +
lea eax [ebp-44h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_106851E  +
cmp [ebp-1Ch] esi +
jz loc_106204A  +
mov ecx [ebp+8] +
push esi  +
push dword ptr [ebp-1Ch]  +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
cmp [ebp-20h] esi +
jz loc_106205B  +
push esi  +
push dword ptr [ebp-20h]  +
lea ecx [ebp-34h] +
call ?SelectPalette@CDC@@QAEPAVCPalette@@PAV2@H@Z  +
push dword ptr [ebp-24h]  +
lea ecx [ebp-34h] +
call sub_10022BD  +
lea ecx [ebp-34h] +
call ?DeleteDC@CDC@@QAEHXZ  +
push dword ptr [ebp+8]  +
mov ecx ebx +
call sub_10616DA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-34h] +
call ??1CDC@@UAE@XZ  +
call sub_1002061  +
retn 4  +
***
call sub_1002370  +
mov eax [ebp-14h] +
mov [ebp-18h] eax +
mov eax offset loc_10620E1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1061BC7  +
test byte ptr [ebp+8] 1 +
jz loc_106211B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 58h  +
mov eax offset loc_107CF70 +
call sub_10020DC  +
mov esi ecx +
push esi  +
lea ecx [ebp-64h] +
call ??0CPaintDC@@QAE@PAVCWnd@@@Z  +
push dword ptr [ebp-60h]  +
and dword ptr [ebp-4] 0 +
call off_108A1DC  +
test al 1 +
jz loc_106215A  +
push 0  +
push dword ptr [ebp-60h]  +
call off_108E758  +
lea eax [ebp-64h] +
push eax  +
mov ecx esi +
call sub_1061F0F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-64h] +
call ??1CPaintDC@@UAE@XZ  +
call sub_1002119  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax off_108EC58[eax*4] +
mov eax [eax] +
pop ebp  +
retn 4  +
***
mov eax offset off_106219C +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_C]  +
xor esi esi +
push [ebp+arg_8]  +
inc esi  +
push [ebp+arg_4]  +
mov [ecx+34h] esi +
push [ebp+arg_0]  +
call sub_1050A07  +
mov edi eax +
xor eax eax +
cmp [ebp+arg_8] eax +
jz loc_1062200  +
cmp dword_108EEDC eax +
jnz loc_106221E  +
push 6  +
push [ebp+arg_0]  +
mov dword_108EEDC esi +
call ds:SetROP2  +
mov dword_108EED8 eax +
jmp loc_1062220  +
cmp dword_108EEDC eax +
jz loc_106221E  +
push dword_108EED8  +
mov dword_108EEDC eax +
push [ebp+arg_0]  +
call ds:SetROP2  +
jmp loc_1062220  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1050840  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10508F2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
and dword ptr [ecx+20h] 0 +
pop ebp  +
jmp sub_103048E  +
***
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi [ecx+8] +
push esi  +
call ?SetAtGrow@CObArray@@QAEXHPAVCObject@@@Z  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:CreatePolygonRgn  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:Polyline  +
pop ebp  +
retn 8  +
***
call sub_1002370  +
mov eax [ebp-20h] +
and dword ptr [ebp-14h] 0 +
mov [ebp-24h] eax +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
mov eax offset loc_10623D6 +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+58h] +
xor ebx ebx +
test edi edi +
jle loc_106242A  +
push ebx  +
lea ecx [esi+50h] +
call sub_1062261  +
push eax  +
call ??3@YAXPAX@Z  +
inc ebx  +
cmp ebx edi +
pop ecx  +
jl loc_1062415  +
push 0FFFFFFFFh  +
push 0  +
lea ecx [esi+50h] +
call ?SetSize@CObArray@@QAEXHH@Z  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi [esi+58h] +
mov [ebp+var_10] edi +
call dword ptr [eax+90h]  +
xor ebx ebx +
inc ebx  +
cmp edi ebx +
mov [ebp+dy] eax +
jl loc_1062485  +
cmp dword ptr [esi+58h] 0 +
jg loc_106246F  +
call MFC42u_6928  +
mov eax [esi+54h] +
mov eax [eax] +
mov ecx [eax+4] +
mov eax [eax] +
push ecx  +
push eax  +
push ecx  +
push eax  +
lea ecx [esi+74h] +
call sub_104C40E  +
cmp edi ebx +
mov [ebp+var_4] ebx +
jle loc_10624E1  +
lea ebx [esi+74h] +
push [ebp+var_4]  +
lea ecx [esi+50h] +
call sub_1062261  +
mov edx [eax+4] +
mov ecx [esi+80h] +
cmp edx ecx +
mov [ebp+yBottom] edx +
jg loc_10624AD  +
mov [ebp+yBottom] ecx +
mov ecx [eax] +
mov edi [esi+7Ch] +
cmp ecx edi +
jle loc_10624B8  +
mov edi ecx +
mov eax [esi+78h] +
cmp edx eax +
jl loc_10624C1  +
mov edx eax +
mov eax [ebx] +
cmp ecx eax +
jge loc_10624C9  +
mov eax ecx +
push [ebp+yBottom]  +
mov ecx ebx +
push edi  +
push edx  +
push eax  +
call sub_104C40E  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebp+var_10] +
jl loc_106248F  +
push [ebp+dy]  +
add esi 74h +
push [ebp+dy]  +
push esi  +
call ds:InflateRect  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_1002370  +
mov eax [ebp-18h] +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push 0  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_1062311  +
test eax eax +
jz locret_10625C4  +
cmp [ebp+var_4] 0 +
jz locret_10625C4  +
push [ebp+var_8]  +
mov ecx [ebp+arg_0] +
push [ebp+var_4]  +
call sub_10622F4  +
push [ebp+var_4]  +
call sub_1006809  +
pop ecx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push 0  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_1062311  +
test eax eax +
jz locret_106260E  +
cmp [ebp+var_4] 0 +
jz locret_106260E  +
cmp [ebp+var_8] 2 +
jle loc_1062605  +
push [ebp+var_8]  +
mov ecx [ebp+arg_0] +
push [ebp+var_4]  +
call sub_104FFF1  +
push [ebp+var_4]  +
call sub_1006809  +
pop ecx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
call sub_10049D9  +
push eax  +
push offset off_1006FF0  +
call ?AfxDynamicDownCast@@YAPAVCObject@@PAUCRuntimeClass@@PAV1@@Z  +
pop ecx  +
mov esi eax +
pop ecx  +
mov ecx esi +
call sub_1006E76  +
mov ecx 25Ah +
cmp eax ecx +
jz loc_1062649  +
push ecx  +
mov ecx esi +
call sub_1035D44  +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_1009DE5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101F701  +
test byte ptr [ebp+8] 1 +
jz loc_1062671  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+48h] +
push edi  +
test ecx ecx +
jz loc_106269B  +
cmp dword ptr [ecx+4] 0 +
jz loc_106269B  +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov ecx [esi+4Ch] +
test ecx ecx +
jz loc_10626AD  +
cmp dword ptr [ecx+4] 0 +
jz loc_10626AD  +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
xor ebx ebx +
inc ebx  +
push ebx  +
lea edi [esi+0A4h] +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1062311  +
push ebx  +
test eax eax +
jnz loc_10626D9  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
xor eax eax +
jmp loc_106277E  +
push dword ptr [edi]  +
mov ecx [esi+48h] +
push [ebp+var_4]  +
call sub_10622CB  +
push [ebp+var_4]  +
mov [ebp+var_8] eax +
call sub_1006809  +
cmp [ebp+var_8] 0 +
pop ecx  +
jnz loc_1062705  +
push ebx  +
mov ecx offset unk_108AF60 +
call sub_105615F  +
jmp loc_10626D2  +
mov eax [esi+78h] +
mov ecx [esi+48h] +
neg eax  +
push eax  +
mov eax [esi+74h] +
neg eax  +
push eax  +
call sub_104FFAF  +
push ebx  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1062311  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_1062773  +
mov ecx [esi+4Ch] +
push ebx  +
push dword ptr [edi]  +
push [ebp+var_4]  +
call sub_10622CB  +
push [ebp+var_4]  +
mov [ebp+var_8] eax +
call sub_1006809  +
cmp [ebp+var_8] 0 +
pop ecx  +
jz loc_1062773  +
fild  dword ptr [esi+78h] +
fmul  [ebp+arg_0] +
fchs   +
call _ftol2_sse  +
fild  dword ptr [esi+74h] +
push eax  +
fmul  [ebp+arg_0] +
fchs   +
call _ftol2_sse  +
mov ecx [esi+4Ch] +
push eax  +
call sub_104FFAF  +
jmp loc_106277B  +
mov ecx [esi+48h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_1002370  +
mov ebx ecx +
mov [ebp-14h] ebx +
mov edi [ebp+10h] +
xor esi esi +
cmp edi esi +
jz loc_106282A  +
cmp dword ptr [ebp+14h] 3 +
jl loc_106282A  +
call sub_1062405  +
lea ecx [ebp-20h] +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
mov [ebp-4] esi +
mov byte ptr [ebp-4] 1 +
cmp esi [ebp+14h] +
jge loc_1062834  +
push 8  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10627E1  +
mov ecx [edi+esi*8] +
mov [eax] ecx +
mov ecx [edi+esi*8+4] +
mov [eax+4] ecx +
jmp loc_10627E3  +
xor eax eax +
push eax  +
lea ecx [ebx+50h] +
mov [ebp+10h] eax +
call sub_10622AD  +
inc esi  +
jmp loc_10627C2  +
mov eax [ebp-18h] +
mov ecx [ebp-14h] +
mov [ebp-1Ch] eax +
call sub_1062405  +
cmp dword ptr [ebp+10h] 0 +
jz loc_106280F  +
push dword ptr [ebp+10h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
mov eax offset loc_1062821 +
retn   +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
xor eax eax +
call sub_1002061  +
retn 10h  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
mov eax [ebp+14h] +
mov ecx ebx +
mov [ebx+0A4h] eax +
call sub_106243F  +
fld  qword ptr [ebp+8] +
lea esi [ebx+74h] +
lea edi [ebx+84h] +
movs   +
movs   +
movs   +
xor eax eax +
push ecx  +
movs   +
mov [ebx+20h] eax +
push ecx  +
mov ecx ebx +
mov dword_108AF04 eax +
fstp  [esp+0Ch+var_C] +
mov dword_108AF08 eax +
mov dword_108AF0C eax +
call sub_106267D  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_106282C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
push 1  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov edi ecx +
call sub_1062311  +
test eax eax +
jz loc_106293D  +
lea eax [edi+74h] +
mov ecx [eax+8] +
sub ecx [eax] +
push ebx  +
push esi  +
mov esi [eax+0Ch] +
sub esi [eax+4] +
mov eax [ebp+arg_0] +
inc ecx  +
sub eax ecx +
imul eax eax +
cdq   +
idiv  ecx +
mov ecx [ebp+var_4] +
inc esi  +
mov ebx eax +
mov eax [ebp+arg_4] +
sub eax esi +
imul eax eax +
cdq   +
idiv  esi +
mov esi [ebp+var_8] +
test esi esi +
jz loc_1062914  +
add ebx 0Ah +
add eax 0Ah +
mov [ebp+arg_0] ebx +
mov [ebp+arg_4] eax +
mov eax [ecx] +
imul eax [ebp+arg_0] +
add eax 5 +
cdq   +
push 0Ah  +
pop ebx  +
idiv  ebx +
dec esi  +
mov [ecx] eax +
mov eax [ecx+4] +
imul eax [ebp+arg_4] +
add eax 5 +
cdq   +
idiv  ebx +
add ecx 8 +
mov [ecx-4] eax +
test esi esi +
jnz loc_10628EB  +
push [ebp+var_8]  +
mov eax dword_108A24C +
push [ebp+var_4]  +
fld  qword ptr [eax+50h] +
push ecx  +
push ecx  +
mov ecx edi +
fstp  [esp+24h+var_24] +
call sub_106278A  +
push [ebp+var_4]  +
mov esi eax +
call sub_1006809  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_10049FD  +
mov eax [esi] +
push 0  +
mov ecx esi +
call dword ptr [eax+44h]  +
mov edi [ebp+arg_0] +
mov ecx edi +
call sub_10303DC  +
xor eax eax +
inc eax  +
mov dword_108AF04 eax +
mov ecx esi +
mov [esi+20h] eax +
call sub_1062405  +
push [ebp+arg_4]  +
mov ecx esi +
push edi  +
call sub_1050941  +
push dword ptr [edi+40h]  +
call sub_1005C6C  +
push [ebp+arg_4]  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+34h]  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1062405  +
mov ecx offset unk_108A370 +
pop ebp  +
jmp sub_1035B65  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_1C]  +
mov edi [ebp+arg_0] +
push 1  +
push [ebp+arg_14]  +
mov esi ecx +
push dword ptr [edi+4]  +
mov eax [esi] +
call dword ptr [eax+80h]  +
cmp dword ptr [esi+20h] 0 +
push edi  +
mov ecx esi +
jz loc_10629EC  +
call sub_1062589  +
jmp loc_10629F1  +
call sub_10625CD  +
push [ebp+arg_1C]  +
mov eax [esi] +
push 0  +
push [ebp+arg_14]  +
mov ecx esi +
push dword ptr [edi+4]  +
call dword ptr [eax+80h]  +
pop edi  +
pop esi  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
fld  qword ptr [ebx+50h] +
push esi  +
push edi  +
fstp  [ebp+var_8] +
mov edi [ebp+arg_4] +
xor eax eax +
mov esi ecx +
push edi  +
mov dword_108AF04 eax +
mov dword_108AF0C eax +
mov dword_108AF08 eax +
mov eax [esi] +
push ebx  +
call dword ptr [eax+34h]  +
push dword ptr [edi+20h]  +
lea eax [esi+74h] +
push 1  +
push dword ptr [edi+18h]  +
sub esp 10h +
mov ecx esp +
push eax  +
call sub_100B3A5  +
mov eax [ebx+40h] +
push dword ptr [eax+0Ch]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
push eax  +
mov ecx esi +
call sub_10629BD  +
mov eax [esi+58h] +
cmp eax 2 +
mov [esi+0A4h] eax +
jle loc_1062AB3  +
fld  [ebp+var_8] +
push ecx  +
push ecx  +
mov ecx esi +
fstp  [esp+24h+var_24] +
call sub_106267D  +
test eax eax +
jz loc_1062AE1  +
mov eax [esi+74h] +
mov [edi] eax +
mov eax [esi+78h] +
mov [edi+4] eax +
mov eax [esi+7Ch] +
mov [edi+10h] eax +
mov eax [esi+80h] +
push edi  +
push ebx  +
mov ecx offset unk_108A370 +
mov [edi+14h] eax +
call sub_103B418  +
jmp loc_1062ACA  +
xor eax eax +
push eax  +
mov dword_108AF30 eax +
mov dword_108A218 eax +
call sub_1009E55  +
call sub_1009FC1  +
push 0  +
push dword ptr [ebx+40h]  +
call sub_1005D16  +
add esi 94h +
push esi  +
call ds:SetRectEmpty  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_1002370  +
mov [ebp-14h] ecx +
mov ebx [ebp+0Ch] +
lea edi [ecx+84h] +
lea esi [ecx+74h] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+8] +
mov eax [esi+40h] +
mov eax [eax+2Ch] +
cmp [ebx+10h] eax +
jle loc_1062B1D  +
mov [ebx+10h] eax +
mov eax [esi+40h] +
mov eax [eax+30h] +
cmp [ebx+14h] eax +
jle loc_1062B2B  +
mov [ebx+14h] eax +
xor edi edi +
cmp [ebx+10h] edi +
jge loc_1062B35  +
mov [ebx+10h] edi +
cmp [ebx+14h] edi +
jge loc_1062B3D  +
mov [ebx+14h] edi +
lea ecx [ebp-24h] +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
push dword ptr [ebx+14h]  +
mov [ebp-4] edi +
mov edi [ebp-14h] +
push dword ptr [ebx+10h]  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_10624FB  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
mov eax dword_108B1D4 +
and dword ptr [ebp+8] 0 +
test eax eax +
jz loc_1062B97  +
mov eax [eax+4] +
test eax eax +
jz loc_1062B97  +
push 0  +
push eax  +
push dword_108A20C  +
call ds:SelectPalette  +
push dword_108A20C  +
mov [ebp+8] eax +
call ds:RealizePalette  +
mov eax [edi+88h] +
mov edx [edi+90h] +
sub edx [edi+88h] +
push 0CC0020h  +
push eax  +
add edi 84h +
mov ecx [edi] +
push ecx  +
push dword_108A20C  +
push edx  +
mov edx [edi+8] +
sub edx ecx +
push edx  +
push eax  +
mov eax [esi+40h] +
push ecx  +
push dword ptr [eax+0Ch]  +
call ds:BitBlt  +
cmp dword ptr [ebp+8] 0 +
jz loc_1062BEA  +
push 0  +
push dword ptr [ebp+8]  +
push dword_108A20C  +
call ds:SelectPalette  +
push edi  +
push dword ptr [esi+40h]  +
call sub_1005D16  +
mov ecx [ebp-14h] +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+18h]  +
mov eax [ebx] +
push dword ptr [ebx+20h]  +
mov [ebp-34h] eax +
mov eax [ebx+4] +
mov [ebp-30h] eax +
mov eax [ebx+10h] +
push 0  +
push dword ptr [ebx+18h]  +
mov [ebp-2Ch] eax +
mov eax [ebx+14h] +
sub esp 10h +
mov [ebp-28h] eax +
lea eax [ebp-34h] +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call sub_100B3A5  +
mov eax [esi+40h] +
push dword ptr [eax+0Ch]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov ecx [ebp-14h] +
push eax  +
call sub_10629BD  +
lea eax [ebp-34h] +
push eax  +
push dword ptr [esi+40h]  +
call sub_1005D16  +
mov eax [ebp-14h] +
cmp dword ptr [eax+40h] 2C2h +
lea esi [ebp-34h] +
movs   +
movs   +
movs   +
movs   +
jz loc_1062CB6  +
mov ecx [ebx] +
mov eax [ebx+10h] +
mov edx [ebx+4] +
sub eax ecx +
mov ecx [ebx+14h] +
sub ecx edx +
test eax eax +
jge loc_1062C75  +
dec eax  +
jmp loc_1062C76  +
inc eax  +
mov [ebp-18h] eax +
test ecx ecx +
jge loc_1062C80  +
dec ecx  +
jmp loc_1062C81  +
inc ecx  +
push ebx  +
mov [ebp-14h] ecx +
call sub_100A8D8  +
lea eax [ebp-18h] +
push eax  +
call sub_103B3BA  +
jmp loc_1062CB6  +
mov eax [ebp-1Ch] +
push 1  +
mov ecx offset unk_108AF60 +
mov [ebp-20h] eax +
call sub_1056138  +
mov eax offset loc_1062CAD +
retn   +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 1  +
mov esi ecx +
call sub_1009F8B  +
mov edi [ebp+arg_0] +
xor ebx ebx +
cmp dword_108AF04 ebx +
jz loc_1062D07  +
push ebx  +
push 1  +
push 1  +
sub esp 10h +
lea eax [esi+74h] +
mov ecx esp +
push eax  +
call sub_100B3A5  +
mov eax [edi+40h] +
push dword ptr [eax+0Ch]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
push eax  +
mov ecx esi +
call sub_10629BD  +
mov ecx offset unk_108AEA0 +
call sub_104EE2F  +
mov ecx edi +
mov dword_108A218 ebx +
call sub_10303DC  +
mov ecx esi +
mov dword_108AF30 ebx +
mov dword_108AF08 ebx +
mov dword_108AF0C ebx +
mov dword_108AF04 ebx +
call sub_1062405  +
lea eax [esi+74h] +
push eax  +
push dword ptr [edi+40h]  +
call sub_1005D16  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+5Ch]  +
push edi  +
mov ecx esi +
call sub_1050953  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push 0Eh  +
push dword ptr [ecx+60h]  +
call ds:SendMessageW  +
xor ecx ecx +
test eax eax +
setnle cl  +
mov eax ecx +
retn   +
***
mov eax offset off_1062D8C +
retn   +
***
mov eax offset off_104A85C +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+48h] +
test ecx ecx +
jz loc_1062DD9  +
push dword_108A224  +
call sub_105FB40  +
push dword_108A1C8  +
mov ecx [esi+48h] +
call sub_1060D7E  +
pop esi  +
retn 4  +
***
mov ecx [ecx+48h] +
test ecx ecx +
jz locret_1062DF4  +
push dword_108A224  +
call sub_105FB40  +
retn   +
***
mov ecx [ecx+48h] +
test ecx ecx +
jz locret_1062E0C  +
push dword_108A1C8  +
call sub_1060D7E  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 78h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
mov eax ecx +
mov eax [eax+48h] +
push esi  +
push edi  +
test eax eax +
jz loc_1062E68  +
cmp dword ptr [ebp+8] 3 +
jnz loc_1062E41  +
push dword ptr [ebp+0Ch]  +
mov ecx eax +
call sub_1060D7E  +
jmp loc_1062E68  +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-70h] 0 +
push 0  +
sub esp 74h +
mov [ebp-64h] ecx +
push 1Dh  +
pop ecx  +
mov edi esp +
lea esi [ebp-78h] +
mov dword ptr [ebp-74h] 40000000h +
movs   +
mov ecx eax +
call sub_105F60C  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100207A  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+48h] +
test ecx ecx +
jz loc_1062E9E  +
cmp dword ptr [ebp+8] 3 +
jnz loc_1062E99  +
push dword ptr [ebp+0Ch]  +
call sub_1060D7E  +
jmp loc_1062E9E  +
call sub_105F66C  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1050941  +
push [ebp+arg_4]  +
mov eax [esi] +
push [ebp+arg_0]  +
mov ecx esi +
call dword ptr [eax+34h]  +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [ecx+48h] +
test ecx ecx +
jz locret_1062EE9  +
xor eax eax +
cmp dword_108AF14 eax +
setz al  +
push eax  +
call sub_105FB6C  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+48h] +
mov eax [ecx] +
call dword ptr [eax+60h]  +
mov ecx [esi+48h] +
test ecx ecx +
jz loc_1062F0A  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
and dword ptr [esi+48h] 0 +
pop esi  +
retn   +
***
call sub_100208C  +
mov [ebp-10h] ecx +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push offset stru_108B3D8  +
call ds:SetRect  +
mov esi [ebp+8] +
cmp esi ebx +
jz loc_10630B9  +
mov edi [esi+40h] +
cmp edi ebx +
jz loc_10630B9  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
mov edx [eax+10h] +
cmp ecx edx +
jle loc_1062F5F  +
mov [ebp-20h] edx +
mov [ebp-18h] ecx +
jmp loc_1062F65  +
mov [ebp-20h] ecx +
mov [ebp-18h] edx +
mov ecx [eax+4] +
mov eax [eax+14h] +
cmp ecx eax +
jle loc_1062F77  +
mov [ebp-1Ch] eax +
mov [ebp-14h] ecx +
jmp loc_1062F7D  +
mov [ebp-1Ch] ecx +
mov [ebp-14h] eax +
cmp [ebp-20h] ebx +
jge loc_1062F85  +
mov [ebp-20h] ebx +
cmp [ebp-1Ch] ebx +
jge loc_1062F8D  +
mov [ebp-1Ch] ebx +
mov eax [edi+2Ch] +
dec eax  +
cmp [ebp-18h] eax +
jle loc_1062F99  +
mov [ebp-18h] eax +
mov eax [edi+30h] +
dec eax  +
cmp [ebp-14h] eax +
jle loc_1062FA5  +
mov [ebp-14h] eax +
lea eax [ebp-30h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_100872F  +
mov eax [ebp-30h] +
cmp [ebp-20h] eax +
jge loc_1062FC8  +
mov [ebp-20h] eax +
mov eax [ebp-2Ch] +
cmp [ebp-1Ch] eax +
jge loc_1062FD3  +
mov [ebp-1Ch] eax +
mov eax [ebp-28h] +
cmp [ebp-18h] eax +
jle loc_1062FDF  +
dec eax  +
mov [ebp-18h] eax +
mov eax [ebp-24h] +
cmp [ebp-14h] eax +
jle loc_1062FEB  +
dec eax  +
mov [ebp-14h] eax +
xor eax eax +
cmp dword_108AF14 ebx +
mov ecx esi +
setz al  +
mov edi eax +
lea eax [ebp-20h] +
push eax  +
call sub_1008309  +
push 160h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov [ebp-4] ebx +
cmp ecx ebx +
jz loc_1063021  +
call sub_105F9C7  +
jmp loc_1063023  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-10h] +
mov [ecx+48h] eax +
cmp eax ebx +
jz loc_10630AD  +
push edi  +
lea ecx [ebp-20h] +
push ecx  +
push dword_108A1C8  +
mov ecx eax +
push dword_108A224  +
push esi  +
call sub_1061009  +
test eax eax +
jz loc_10630AD  +
push dword ptr [esi+40h]  +
call sub_1005C6C  +
push 3  +
push 3  +
push dword ptr [esi+20h]  +
call ds:EnableScrollBar  +
fld  qword ptr [esi+50h] +
fmul  ds:dbl_104A418 +
push 40h  +
call _ftol2_sse  +
push eax  +
mov eax [ebp-10h] +
mov ecx [eax+48h] +
call sub_105F02E  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push 1  +
mov ecx eax +
call sub_105683B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_1006838  +
push 4  +
push 5A3Dh  +
mov ecx eax +
call sub_1009E6B  +
jmp loc_10630B9  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx ecx +
mov ecx [ebx+48h] +
push edi  +
call sub_1062D66  +
mov edi [ebp+arg_0] +
test eax eax +
jz loc_106320C  +
cmp dword_108BC04 0 +
push esi  +
mov esi 40000000h +
jz loc_1063140  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_1063101  +
test al al +
jnz loc_1063140  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_1063140  +
mov ecx dword_108BBFC +
mov eax ecx +
xor edx edx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_1063140  +
cmp eax ecx +
jnz loc_1063140  +
push dword ptr [ebx+40h]  +
push offset dword_104A0A0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D97  +
mov eax [edi+40h] +
push dword ptr [eax+0Ch]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov [ebp+arg_0] eax +
lea eax [ebp+rcSrc2] +
push eax  +
mov eax [ebx+48h] +
push dword ptr [eax+20h]  +
call ds:GetClientRect  +
mov ecx [ebx+48h] +
lea eax [ebp+rcSrc2] +
push eax  +
call sub_105E305  +
lea eax [ebp+rcSrc2] +
push eax  +
mov ecx edi +
call sub_1017263  +
lea eax [ebp+rcSrc2] +
push eax  +
mov ecx edi +
call sub_100872F  +
mov ecx [ebx+48h] +
lea eax [ebp+rcSrc2] +
push eax  +
push [ebp+arg_0]  +
call sub_105FD57  +
lea eax [ebp+rcSrc2] +
push eax  +
push dword ptr [edi+40h]  +
call sub_1005D16  +
lea eax [ebp+rcSrc2] +
push eax  +
push dword ptr [edi+40h]  +
call sub_100D173  +
lea eax [ebp+rcSrc2] +
push eax  +
mov ecx edi +
call sub_100A226  +
push dword ptr [edi+40h]  +
call sub_100D2D1  +
xor edx edx +
cmp dword_108BC04 edx +
jz loc_106320B  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_10631D1  +
test al al +
jnz loc_106320B  +
mov ecx dword_108BBF4 +
and ecx esi +
xor eax eax +
or eax ecx +
jz loc_106320B  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax esi +
cmp edx dword_108BBF8 +
jnz loc_106320B  +
cmp eax ecx +
jnz loc_106320B  +
push offset dword_104A0B0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
pop esi  +
mov ecx ebx +
call sub_1062EEF  +
push 0  +
push 3  +
push dword ptr [edi+20h]  +
call ds:EnableScrollBar  +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push edi  +
mov edi ecx +
jnz loc_10632FB  +
call ds:GetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp eax dword_108A24C +
jz loc_10632F6  +
mov eax [edi+48h] +
test eax eax +
jz loc_10632F6  +
push ebx  +
push dword ptr [eax+20h]  +
mov ebx ds:IsWindow +
call ebx  +
test eax eax +
jz loc_10632F5  +
push esi  +
mov esi [edi+48h] +
add esi 40h +
jz loc_10632A0  +
push dword ptr [esi+20h]  +
call ebx  +
test eax eax +
jz loc_10632A0  +
mov ecx esi +
call ?GetWindowTextLengthW@CWnd@@QBEHXZ  +
test eax eax +
jle loc_10632A0  +
push dword_108A24C  +
mov ecx edi +
call sub_10630C6  +
jmp loc_10632C8  +
mov ecx edi +
call sub_1062EEF  +
mov eax dword_108A24C +
push 0  +
push dword ptr [eax+40h]  +
call sub_1005D16  +
mov eax dword_108A24C +
push 0  +
push 3  +
push dword ptr [eax+20h]  +
call ds:EnableScrollBar  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push 1  +
mov ecx eax +
call sub_105686A  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_1006838  +
push 4  +
push 5A3Dh  +
mov ecx eax +
call sub_1009E6B  +
pop esi  +
pop ebx  +
call sub_1009FC1  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_100A1F3  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
cmp dword ptr [edi+48h] 0 +
jz loc_106334F  +
call sub_1062EEF  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push 1  +
mov ecx eax +
call sub_105686A  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_1006838  +
push 4  +
push 5A3Dh  +
mov ecx eax +
call sub_1009E6B  +
mov esi [ebp+arg_0] +
push 0  +
push dword ptr [esi+40h]  +
call sub_1005D16  +
push 0  +
push 3  +
push dword ptr [esi+20h]  +
call ds:EnableScrollBar  +
push esi  +
mov ecx edi +
call sub_1050953  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov edx [esi+10h] +
cmp eax edx +
push edi  +
mov [ebp+var_4] ecx +
jge loc_106339A  +
inc edx  +
mov [esi+10h] edx +
jmp loc_106339D  +
inc eax  +
mov [esi] eax +
mov eax [esi+4] +
mov edx [esi+14h] +
cmp eax edx +
jge loc_10633AD  +
inc edx  +
mov [esi+14h] edx +
jmp loc_10633B1  +
inc eax  +
mov [esi+4] eax +
mov eax [esi+10h] +
mov edx [esi+14h] +
mov edi [esi] +
mov ebx [esi+4] +
sub edi eax +
sub ebx edx +
cmp dword ptr [ecx+48h] 0 +
jz loc_106342B  +
push [ebp+arg_0]  +
call sub_10630C6  +
mov eax ebx +
cdq   +
mov ecx eax +
xor ecx edx +
sub ecx edx +
mov eax edi +
cdq   +
xor eax edx +
sub eax edx +
cmp eax ecx +
jg loc_10633E4  +
mov eax ecx +
cmp eax 0Ah +
jg loc_1063428  +
call sub_1009FC1  +
mov ecx [ebp+var_4] +
push esi  +
push [ebp+arg_0]  +
call sub_1030468  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push 1  +
mov ecx eax +
call sub_105686A  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_1006838  +
push 4  +
push 5A3Dh  +
mov ecx eax +
call sub_1009E6B  +
jmp loc_1063434  +
mov ecx [ebp+var_4] +
push esi  +
push [ebp+arg_0]  +
call sub_1062F15  +
mov ecx [ebp+var_4] +
push esi  +
push [ebp+arg_0]  +
call sub_1030468  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov ebx [esi+10h] +
push edi  +
mov edi [esi+14h] +
lea eax [ebp+rc] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+20h]  +
mov [ebp+var_4] ecx +
call ds:GetClientRect  +
mov ecx [ebp+arg_0] +
lea eax [ebp+rc] +
push eax  +
call sub_100872F  +
push edi  +
push ebx  +
lea eax [ebp+rc] +
push eax  +
call ds:PtInRect  +
test eax eax +
jnz loc_10634B5  +
cmp ebx [ebp+rc.left] +
jge loc_1063497  +
mov ebx [ebp+rc.left] +
cmp ebx [ebp+rc.right] +
jle loc_106349F  +
mov ebx [ebp+rc.right] +
cmp edi [ebp+rc.top] +
jge loc_10634A7  +
mov edi [ebp+rc.top] +
cmp edi [ebp+rc.bottom] +
jle loc_10634AF  +
mov edi [ebp+rc.bottom] +
mov [esi+10h] ebx +
mov [esi+14h] edi +
mov ecx [ebp+var_4] +
push esi  +
push [ebp+arg_0]  +
call sub_103B2EB  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
cmp dword ptr [edi+48h] 0 +
jz loc_1063525  +
push esi  +
mov esi [ebp+arg_0] +
push dword ptr [esi+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_1063524  +
mov ecx [edi+48h] +
call sub_1062D66  +
test eax eax +
jnz loc_1063502  +
mov eax [edi] +
push esi  +
mov ecx edi +
call dword ptr [eax+40h]  +
jmp loc_1063524  +
mov eax [esi+40h] +
cmp dword_108A1FC eax +
jz loc_1063513  +
push eax  +
call sub_1005C6C  +
push esi  +
mov ecx edi +
call sub_10630C6  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov eax offset off_1063538 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 1  +
push 0Ch  +
push esi  +
call ?AfxIsValidAddress@@YGHPBXIH@Z  +
test eax eax +
jnz loc_1063571  +
call MFC42u_6928  +
lea eax [esi+8] +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002370  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
and dword ptr [esi+20h] 0 +
cmp dword ptr [esi+8] 0 +
jle loc_106366D  +
push 1  +
lea eax [ebp-1] +
push eax  +
mov ecx esi +
call sub_1009B54  +
push 4  +
lea eax [ebp+var_C] +
push eax  +
mov ecx esi +
call sub_1009B54  +
push 4  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1009B54  +
movzx eax [ebp+var_1] +
dec eax  +
dec eax  +
jz loc_1063659  +
dec eax  +
jz loc_106363A  +
dec eax  +
dec eax  +
jnz loc_1063659  +
push 4  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call sub_1009B54  +
mov ecx [ebp+var_C] +
push 0  +
push [ebp+var_10]  +
push [ebp+var_8]  +
call sub_104CB3C  +
jmp loc_1063665  +
push [ebp+var_8]  +
mov ecx [ebp+var_C] +
push esi  +
call sub_104C7D5  +
mov eax [esi+20h] +
cmp eax [esi+8] +
jl loc_1063604  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101F74C  +
test byte ptr [ebp+8] 1 +
jz loc_106368F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
lea ecx [ebp-0Dh] +
call sub_100AF92  +
mov ecx [esi+6CCh] +
mov eax [esi+6DCh] +
and dword ptr [ebp-4] 0 +
cmp eax ecx +
jz loc_106374B  +
lea ebx [esi+6C0h] +
push eax  +
mov ecx ebx +
mov dword ptr [esi+6E4h] 1 +
call ?FindIndex@CObList@@QBEPAU__POSITION@@H@Z  +
push eax  +
mov ecx ebx +
mov [ebp-14h] eax +
call sub_1063555  +
mov edi [eax] +
mov eax [edi+24h] +
push 0  +
push eax  +
mov ecx esi +
call sub_100D1F5  +
push dword ptr [ebp-14h]  +
mov ecx ebx +
call ?RemoveAt@CObList@@QAEXPAU__POSITION@@@Z  +
mov ecx edi +
call sub_10635EF  +
and dword ptr [esi+6B8h] 0 +
lea ebx [esi+6B4h] +
and dword ptr [ebx] 0 +
mov ecx esi +
call sub_100D848  +
xor eax eax +
mov [ebx] eax +
mov [esi+6B8h] eax +
mov [esi+6E4h] eax +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax+4]  +
cmp dword ptr [esi+6CCh] 0 +
jz loc_106374B  +
inc dword ptr [esi+6DCh]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0Dh] +
call sub_102E656  +
call sub_1002061  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+6DCh] +
test eax eax +
jz loc_106378C  +
dec eax  +
mov [esi+6DCh] eax +
call sub_106369B  +
cmp dword ptr [esi+6CCh] 0 +
jz loc_106378C  +
dec dword ptr [esi+6DCh]  +
pop esi  +
retn   +
***
call GdipDeleteBrush  +
retn   +
***
call sub_102E8A8  +
xor ebx ebx +
mov edi [ebp+0Ch] +
mov [edi] ebx +
mov esi [ebp+8] +
mov [esi] ebx +
cmp dword_108B34C ebx +
jnz loc_1063831  +
mov [ebp-4] ebx +
lea eax [ebp-1Ch] +
push eax  +
push esi  +
call GdipGetImageDecodersSize  +
test eax eax +
jnz loc_1063806  +
cmp [esi] ebx +
jbe loc_1063806  +
push dword ptr [ebp-1Ch]  +
push ebx  +
call ds:LocalAlloc  +
mov [edi] eax +
cmp eax ebx +
jz loc_1063806  +
mov ecx [esi] +
push eax  +
push dword ptr [ebp-1Ch]  +
push ecx  +
call GdipGetImageDecoders  +
test eax eax +
jnz loc_1063806  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
inc eax  +
jmp loc_1063833  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1063825  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor ebx ebx +
mov edi [ebp+0Ch] +
mov esi [ebp+8] +
push dword ptr [edi]  +
call ds:LocalFree  +
mov [edi] ebx +
mov [esi] ebx +
xor eax eax +
call sub_102E894  +
retn 8  +
***
call sub_1002370  +
mov ecx [ebp-18h] +
call ?Delete@CException@@QAEXXZ  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_1063978 +
retn   +
***
jmp eax  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
test eax eax +
jz loc_10639EA  +
push eax  +
call ds:GlobalFree  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+10h] 0 +
pop esi  +
retn   +
***
mov eax 80004001h +
retn 18h  +
***
mov eax 80004001h +
retn 4  +
***
mov eax 80004001h +
retn 0Ch  +
***
call ds:GetLastError  +
test eax eax +
jle loc_1063A2E  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl locret_1063A35  +
mov eax 80004005h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
test eax eax +
jz loc_1063A4A  +
and dword ptr [eax] 0 +
push esi  +
mov esi [ebp+8] +
mov eax [esi+0Ch] +
mov ecx [esi+10h] +
lea edx [eax+0Eh] +
cmp ecx edx +
jbe loc_1063A63  +
xor eax eax +
inc eax  +
jmp loc_1063AF3  +
push ebx  +
mov ebx [ebp+10h] +
test ebx ebx +
jz loc_1063AF0  +
sub eax ecx +
add eax 0Eh +
cmp ebx eax +
jbe loc_1063A7A  +
mov ebx eax +
push edi  +
push 0Eh  +
pop edi  +
cmp ecx edi +
jnb loc_1063AAE  +
sub edi ecx +
cmp ebx edi +
jnb loc_1063A8A  +
mov edi ebx +
push edi  +
lea eax [ecx+esi+14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call memcpy  +
add [ebp+0Ch] edi +
add [esi+10h] edi +
add esp 0Ch +
sub ebx edi +
cmp dword ptr [ebp+14h] 0 +
jz loc_1063AAE  +
mov eax [ebp+14h] +
add [eax] edi +
pop edi  +
test ebx ebx +
jbe loc_1063AF0  +
push dword ptr [esi+8]  +
call ds:GlobalLock  +
test eax eax +
jnz loc_1063AC7  +
call sub_1063A18  +
jmp loc_1063AF2  +
mov ecx [esi+10h] +
push ebx  +
lea eax [ecx+eax-0Eh] +
push eax  +
push dword ptr [ebp+0Ch]  +
call memcpy  +
add esp 0Ch +
push dword ptr [esi+8]  +
call ds:GlobalUnlock  +
mov eax [ebp+14h] +
add [esi+10h] ebx +
test eax eax +
jz loc_1063AF0  +
add [eax] ebx +
xor eax eax +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1063B1B  +
mov eax [ebp+arg_0] +
jb loc_1063B12  +
cmp eax 0FFFFFFFFh +
ja loc_1063B1B  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1063B26  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
add [ecx+ecx+2] edx +
add ebx eax +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1020954 +
jz loc_1063B56  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
mov eax [eax+4] +
mov dword ptr [ecx+eax] offset off_104A8B4 +
mov eax [ecx] +
mov eax [eax+8] +
mov dword ptr [ecx+eax] offset off_104A890 +
mov eax [ecx] +
mov eax [eax+4] +
lea edx [eax-20h] +
mov [eax+ecx-4] edx +
mov eax [ecx] +
mov eax [eax+8] +
lea edx [eax-28h] +
mov [eax+ecx-4] edx +
mov ecx [ecx+8] +
test ecx ecx +
jz locret_1063BA0  +
push ecx  +
call ds:GlobalFree  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+10h] +
test ebx ebx +
jnz loc_1063BBA  +
mov eax 80004003h +
jmp loc_1063C37  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1012B68 +
xor eax eax +
cmps   +
jnz loc_1063BEF  +
mov esi [ebp+8] +
mov eax [esi-20h] +
mov eax [eax+4] +
lea eax [eax+esi-20h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
lea eax [esi-20h] +
test eax eax +
jz loc_1063C1A  +
mov eax [esi-20h] +
mov eax [eax+8] +
jmp loc_1063C24  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset stru_104AC34 +
xor eax eax +
cmps   +
jnz loc_1063C2E  +
mov esi [ebp+8] +
mov eax [esi-20h] +
mov eax [eax+4] +
lea eax [eax+esi-20h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
lea eax [esi-20h] +
test eax eax +
jnz loc_1063C1E  +
xor eax eax +
jmp loc_1063C28  +
mov eax [esi-20h] +
mov eax [eax+4] +
lea eax [eax+esi-20h] +
mov [ebx] eax +
xor eax eax +
jmp loc_1063C35  +
and [ebx] eax +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1063B62  +
test [ebp+arg_0] 1 +
jz loc_1063C5B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
test eax eax +
jnz loc_1063C83  +
push [ebp+dwBytes]  +
push 2  +
call ds:GlobalAlloc  +
jmp loc_1063C8F  +
push 0  +
push [ebp+dwBytes]  +
push eax  +
call ds:GlobalReAlloc  +
test eax eax +
jnz loc_1063CA4  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
xor eax eax +
inc eax  +
jmp loc_1063CAF  +
mov [esi+8] eax +
mov eax [ebp+dwBytes] +
mov [esi+0Ch] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [esi] +
cmp ebx 0Ch +
jz loc_1063CE0  +
cmp ebx 28h +
jz loc_1063CE0  +
cmp ebx 6Ch +
jz loc_1063CE0  +
cmp ebx 7Ch +
jz loc_1063CE0  +
xor eax eax +
jmp loc_1063D93  +
push edi  +
mov edi ebx +
cmp ebx 0Ch +
jnz loc_1063D20  +
movzx eax word ptr [esi+0Ah] +
cmp ax 8 +
ja loc_1063CFF  +
xor edi edi +
inc edi  +
mov cl al +
shl edi cl +
add edi 4 +
imul edi edi +
movzx ecx word ptr [esi+4] +
movzx eax ax +
imul ecx eax +
movzx eax word ptr [esi+6] +
add ecx 1Fh +
shr ecx 3 +
and ecx 1FFFFFFCh +
imul ecx eax +
add edi ecx +
jmp loc_1063D90  +
mov eax [esi+20h] +
test eax eax +
jnz loc_1063D34  +
movzx ecx word ptr [esi+0Eh] +
cmp cx 8 +
ja loc_1063D37  +
inc eax  +
shl eax cl +
lea edi [ebx+eax*4] +
mov eax [esi+14h] +
test eax eax +
jnz loc_1063D6D  +
mov eax [esi+10h] +
test eax eax +
jz loc_1063D4E  +
cmp eax 3 +
jz loc_1063D4E  +
xor eax eax +
jmp loc_1063D92  +
movzx ecx word ptr [esi+0Eh] +
imul ecx [esi+4] +
mov eax [esi+8] +
cdq   +
add ecx 1Fh +
xor eax edx +
shr ecx 3 +
sub eax edx +
and ecx 1FFFFFFCh +
imul eax ecx +
add edi eax +
cmp ebx 28h +
jnz loc_1063D7F  +
cmp dword ptr [esi+10h] 3 +
jnz loc_1063D90  +
add edi 0Ch +
jmp loc_1063D90  +
cmp ebx 7Ch +
jb loc_1063D90  +
mov eax [esi+70h] +
cmp eax edi +
jbe loc_1063D8D  +
mov edi eax +
add edi [esi+74h] +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov edx [esi] +
push edi  +
cmp edx 0Ch +
jz loc_1063DEA  +
cmp edx 28h +
jz loc_1063DC2  +
cmp edx 6Ch +
jz loc_1063DC2  +
cmp edx 7Ch +
jnz loc_1063E7B  +
cmp dword ptr [esi+8] 0 +
jnz loc_1063E7B  +
mov eax [esi+14h] +
test eax eax +
jnz loc_1063E5E  +
mov eax [ebp+arg_4] +
mov ecx [esi+20h] +
sub eax edx +
test ecx ecx +
jz loc_1063E31  +
imul ecx ecx +
add eax ecx +
jmp loc_1063E43  +
cmp word ptr [esi+6] 0 +
jnz loc_1063E7B  +
movzx edx word ptr [esi+0Ah] +
mov eax [ebp+arg_4] +
add eax 0FFFFFFF4h +
cmp dx 8 +
ja loc_1063E11  +
or edi 0FFFFFFFFh +
mov cl dl +
shl edi cl +
imul edi edi +
add eax edi +
movzx ecx word ptr [esi+4] +
movzx edx dx +
imul ecx edx +
add ecx 1Fh +
shr ecx 3 +
and ecx 1FFFFFFCh +
xor edx edx +
div  ecx +
mov [esi+6] ax +
jmp loc_1063E7B  +
movzx ecx word ptr [esi+0Eh] +
cmp cx 8 +
ja loc_1063E43  +
or edi 0FFFFFFFFh +
shl edi cl +
lea eax [eax+edi*4] +
cmp edx 28h +
jnz loc_1063E53  +
cmp dword ptr [esi+10h] 3 +
jnz loc_1063E5B  +
sub eax 0Ch +
jmp loc_1063E5B  +
cmp edx 7Ch +
jb loc_1063E5B  +
sub eax [esi+74h] +
mov [esi+14h] eax +
movzx ecx word ptr [esi+0Eh] +
imul ecx [esi+4] +
add ecx 1Fh +
shr ecx 3 +
and ecx 1FFFFFFCh +
xor edx edx +
div  ecx +
neg eax  +
mov [esi+8] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
cmp dword ptr [esi+14h] 0 +
jz loc_1063F20  +
mov eax [esi+14h] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
dec eax  +
jz loc_1063ED1  +
dec eax  +
jz loc_1063ECA  +
dec eax  +
dec eax  +
jnz loc_1063EDE  +
push 994h  +
jmp loc_1063ED6  +
push 993h  +
jmp loc_1063ED6  +
push 992h  +
lea ecx [ebp-10h] +
call ?LoadStringW@CString@@QAEHI@Z  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-14h] +
push dword ptr [ebp-10h]  +
mov byte ptr [ebp-4] 1 +
push eax  +
call ?FormatMessageW@CString@@QAAXPBGZZ  +
mov esi [esi+14h] +
mov eax [esi] +
add esp 0Ch +
push dword ptr [ebp-14h]  +
push esi  +
call dword ptr [eax+20h]  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
call sub_1002061  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100B4A4 +
mov ecx dword_108A1EC +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1063F65  +
cmp [ecx+20h] eax +
jz loc_1063F65  +
push 1  +
push offset word_100219C  +
push eax  +
call ?SetPaneText@CStatusBar@@QAEHHPBGH@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+8] +
call ??1CProgressCtrl@@UAE@XZ  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+10h] +
test ebx ebx +
jnz loc_1063F90  +
mov eax 80004003h +
jmp loc_1063FCC  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1012B68 +
xor eax eax +
cmps   +
jz loc_1063FB4  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset loc_1063FD4 +
xor eax eax +
cmps   +
jnz loc_1063FC3  +
mov esi [ebp+8] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_1063FCA  +
and [ebx] eax +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov dh [ecx+40h] +
mul  dword ptr [eax-1Ch] +
add eax 0C5E8834Bh +
shl byte ptr [ecx] cl +
mov dword ptr [edx-1Bh] 90909090h +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1064010  +
test esi esi +
jz loc_1064010  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+2Ch]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_108A1EC +
test ecx ecx +
jz loc_1064054  +
cmp dword ptr [ecx+20h] 0 +
jz loc_1064054  +
push 1  +
push [ebp+arg_4]  +
push 0  +
call ?SetPaneText@CStatusBar@@QAEHHPBGH@Z  +
xor eax eax +
pop ebp  +
retn 8  +
***
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_10640CC  +
push edi  +
xor edi edi +
cmp [esi+4] edi +
jle loc_10640C3  +
mov eax [esi] +
lea eax [eax+edi*4] +
cmp dword ptr [eax] 0 +
jz loc_10640BD  +
mov eax [eax] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc edi  +
cmp edi [esi+4] +
jl loc_10640AB  +
push dword ptr [esi]  +
call ds:CoTaskMemFree  +
pop edi  +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_10640F0  +
mov ecx [eax] +
push esi  +
push offset dword_10640F8  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CProgressCtrl@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1064263  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
movzx edx [ebp+arg_0] +
shl eax 10h +
or eax edx +
push eax  +
push 0  +
push 401h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 402h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call ds:SysFreeString  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [esi+18h] +
mov dword ptr [ebp-4] 4 +
test eax eax +
jz loc_1064308  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+14h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_1064319  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+10h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_106432A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+0Ch] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_106433B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+4] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_106434C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_106435C  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
call sub_1002061  +
retn   +
***
xor eax eax +
cmp [ecx+4] eax +
setnz al  +
retn   +
***
push 4  +
mov eax offset loc_1080AB0 +
call sub_100208C  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
lea eax [ebp-10h] +
push eax  +
push offset stru_101B828  +
push 4017h  +
push edi  +
push offset stru_101B848  +
mov [ebp-4] edi +
call ds:CoCreateInstance  +
mov ebx eax +
cmp ebx edi +
jge loc_10643C0  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jz loc_10643BC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
jmp loc_106440F  +
add esi 10h +
push dword ptr [esi]  +
call ds:SysFreeString  +
mov eax [ebp-10h] +
push esi  +
push dword ptr [ebp+0Ch]  +
mov [esi] edi +
mov ecx [eax] +
push edi  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+18h]  +
mov ecx offset unk_108AF60 +
mov esi eax +
call ?RestoreWaitCursor@CCmdTarget@@QAEXXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [ebp-10h] +
cmp esi edi +
jz loc_1064403  +
cmp eax edi +
jz loc_10643FF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_106440F  +
cmp eax edi +
jz loc_106440D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
add ecx 10h +
call sub_10642BC  +
xor eax eax +
pop ebp  +
retn 4  +
***
sbb ds:byte_107D9C0[eax] bh +
call sub_100208C  +
mov esi [ebp+10h] +
test esi esi +
jnz loc_1064454  +
mov eax 80004003h +
jmp loc_1064521  +
push dword ptr [ebp+8]  +
lea ecx [ebp+10h] +
call near ptr dword_106405C+3  +
mov ecx [ebp+10h] +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jnz loc_1064474  +
mov eax 80004002h +
jmp loc_1064521  +
mov eax [ebp+0Ch] +
mov [ebp-10h] eax +
xor eax eax +
lea edi [ebp-24h] +
stos   +
stos   +
lea edx [ebp-24h] +
push edx  +
stos   +
lea edx [ebp-14h] +
push edx  +
push 1  +
mov dword ptr [ebp-14h] 1 +
stos   +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+0Ch]  +
mov edi eax +
test edi edi +
jnz loc_106450E  +
movzx eax word ptr [ebp-24h] +
cmp eax 11h +
jg loc_10644E9  +
jz loc_10644E3  +
dec eax  +
dec eax  +
jz loc_10644DD  +
dec eax  +
jz loc_10644D8  +
dec eax  +
jz loc_10644D3  +
dec eax  +
jz loc_10644C3  +
sub eax 0Bh +
jnz loc_10644F9  +
movsx eax byte ptr [ebp-1Ch] +
jmp loc_1064502  +
fld  qword ptr [ebp-1Ch] +
fadd  ds:dbl_1006830 +
call _ftol2_sse  +
jmp loc_1064502  +
fld  dword ptr [ebp-1Ch] +
jmp loc_10644C6  +
***
mov eax [ebp-1Ch] +
jmp loc_1064502  +
movsx eax word ptr [ebp-1Ch] +
jmp loc_1064502  +
movzx eax byte ptr [ebp-1Ch] +
jmp loc_1064502  +
sub eax 12h +
jz loc_10644FE  +
dec eax  +
jz loc_10644D8  +
sub eax 3 +
jz loc_10644D8  +
dec eax  +
jz loc_10644D8  +
xor edi edi +
inc edi  +
jmp loc_1064504  +
movzx eax word ptr [ebp-1Ch] +
mov [esi] eax +
lea eax [ebp-24h] +
push eax  +
call ds:PropVariantClear  +
mov eax [ebp+10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_106451F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_1002061  +
retn 0Ch  +
***
mov eax offset loc_107DA23 +
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
mov [esi] edi +
mov [ebp-4] edi +
mov [esi+4] edi +
mov eax [ebp+0Ch] +
push dword ptr [ebp+8]  +
lea ecx [esi+0Ch] +
mov byte ptr [ebp-4] 1 +
mov [esi+8] eax +
call sub_101B284  +
push dword ptr [ebp+10h]  +
lea ecx [esi+10h] +
mov byte ptr [ebp-4] 2 +
call sub_101B284  +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov eax esi +
call sub_1002061  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ds:CoMarshalInterThreadInterfaceInStream +
mov esi ecx +
mov eax [esi+0Ch] +
push esi  +
push eax  +
push offset stru_104AC44  +
call edi  +
test eax eax +
jnz loc_10645D5  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_10645AF  +
and dword ptr [esi+0Ch] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+10h] +
lea ecx [esi+4] +
push ecx  +
push eax  +
push offset stru_104AC34  +
call edi  +
test eax eax +
jnz loc_10645D5  +
mov eax [esi+10h] +
test eax eax +
jz loc_10645D3  +
and dword ptr [esi+10h] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop edi  +
pop esi  +
retn   +
***
mov eax [ecx+4] +
test eax eax +
jz loc_10645E9  +
mov eax [eax+8] +
jmp locret_10645EB  +
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 8 +
push eax  +
push 0  +
call sub_101B1E7  +
pop ebp  +
retn 24h  +
***
push ebp  +
mov ebp esp +
xor edx edx +
mov eax ecx +
cmp [ebp+10h] edx +
jz loc_1064623  +
mov dword ptr [eax] offset dword_1064674 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov dword ptr [ecx+eax] offset off_104A8B4 +
mov ecx [eax] +
mov ecx [ecx+8] +
mov dword ptr [ecx+eax] offset off_104A890 +
mov ecx [eax] +
mov ecx [ecx+4] +
push esi  +
lea esi [ecx-20h] +
mov [ecx+eax-4] esi +
mov ecx [eax] +
mov ecx [ecx+8] +
lea esi [ecx-28h] +
mov [ecx+eax-4] esi +
mov ecx [ebp+8] +
mov [eax+14h] ecx +
mov ecx [ebp+0Ch] +
mov [eax+4] edx +
mov [eax+8] edx +
mov [eax+0Ch] edx +
mov [eax+10h] edx +
mov [eax+18h] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi-1Ch] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10646AD  +
lea ecx [esi-20h] +
test ecx ecx +
jz loc_10646AD  +
push 1  +
call sub_1063C41  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+28h] +
push edi  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset aDatacallbackRe  +
call sub_106FAFF  +
mov esi [ebp+8] +
mov eax [esi-0Ch] +
add esp 1Ch +
test eax eax +
jz loc_1064701  +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jnz loc_1064701  +
cmp [ebp+8] eax +
jz loc_1064701  +
inc eax  +
jmp loc_1064744  +
mov eax [ebp+0Ch] +
dec eax  +
push ebx  +
jz loc_1064835  +
dec eax  +
jz loc_106474A  +
dec eax  +
jz loc_1064733  +
dec eax  +
jz loc_1064718  +
dec eax  +
jnz loc_1064741  +
push dword ptr [esi-18h]  +
call ds:GlobalLock  +
test eax eax +
jz loc_1064741  +
push dword ptr [esi-10h]  +
push eax  +
call sub_1063D9E  +
jmp loc_1064827  +
push dword ptr [ebp+14h]  +
lea ecx [esi-20h] +
push dword ptr [ebp+10h]  +
call sub_1063E86  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 24h  +
***
push dword ptr [ebp+14h]  +
lea ebx [esi-20h] +
push dword ptr [ebp+10h]  +
mov ecx ebx +
call sub_1063E86  +
xor eax eax +
cmp [esi-14h] eax +
jnz loc_1064782  +
cmp [ebp+18h] eax +
jnz loc_1064782  +
push edi  +
call sub_1063CB9  +
test eax eax +
jz loc_1064780  +
push eax  +
mov ecx ebx +
call sub_1063C67  +
test eax eax +
jnz loc_1064859  +
xor eax eax +
cmp [ebp+1Ch] eax +
mov [ebp+14h] eax +
jl loc_1064859  +
cmp [ebp+18h] eax +
jl loc_1064859  +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
call sub_104FECD  +
test eax eax +
jl loc_1064859  +
mov edi [ebp+14h] +
cmp edi [esi-14h] +
jbe loc_10647FA  +
and dword ptr [ebp+10h] 0 +
and dword ptr [ebp+14h] 0 +
lea eax [ebp+14h] +
push eax  +
mov eax [ebp+1Ch] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1063AFD  +
test eax eax +
jl loc_1064859  +
lea eax [ebp+10h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+18h]  +
call sub_104FECD  +
test eax eax +
jl loc_1064859  +
push dword ptr [ebp+10h]  +
mov ecx ebx +
call sub_1063C67  +
test eax eax +
jnz loc_1064859  +
cmp edi [esi-10h] +
jbe loc_1064802  +
mov [esi-10h] edi +
push dword ptr [esi-18h]  +
call ds:GlobalLock  +
test eax eax +
jz loc_1064741  +
push dword ptr [ebp+1Ch]  +
mov ecx [ebp+18h] +
push dword ptr [ebp+28h]  +
add eax ecx +
push eax  +
call memcpy  +
add esp 0Ch +
push dword ptr [esi-18h]  +
call ds:GlobalUnlock  +
jmp loc_1064741  +
***
test edi edi +
jz loc_1064741  +
mov eax [edi+14h] +
test eax eax +
jz loc_1064741  +
push eax  +
lea ecx [esi-20h] +
call sub_1063C67  +
test eax eax +
jz loc_1064741  +
xor eax eax +
inc eax  +
jmp loc_1064743  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1063F2D  +
test [ebp+arg_0] 1 +
jz loc_106492B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_108A1EC +
sub esp 10h +
test ecx ecx +
jz loc_1064985  +
cmp dword ptr [ecx+20h] 0 +
jz loc_1064985  +
push esi  +
lea eax [ebp-10h] +
push eax  +
push 1  +
call ?GetItemRect@CStatusBar@@QBEXHPAUtagRECT@@@Z  +
mov esi [ebp+8] +
push 1  +
push dword_108A1EC  +
lea eax [ebp-10h] +
push eax  +
add esi 8 +
push 50000000h  +
mov ecx esi +
call ?Create@CProgressCtrl@@QAEHKABUtagRECT@@PAVCWnd@@I@Z  +
push 64h  +
push 0  +
mov ecx esi +
call sub_106426F  +
pop esi  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push dword ptr [eax+28h]  +
call ds:UpdateWindow  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push [ebp+wParam]  +
add ecx 8 +
call sub_106429B  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov edi ds:CoGetInterfaceAndReleaseStream +
mov esi ecx +
mov eax [esi] +
lea ecx [ebp+ppv] +
push ecx  +
push offset stru_104AC44  +
xor ebx ebx +
push eax  +
mov [ebp+ppv] ebx +
call edi  +
push [ebp+ppv]  +
mov [ebp+var_4] eax +
lea eax [esi+14h] +
push eax  +
call sub_101403C  +
mov [esi] ebx +
cmp [ebp+var_4] ebx +
jz loc_1064A5C  +
push [ebp+var_4]  +
push offset aCogetinterface  +
call sub_106FAFF  +
mov eax [ebp+var_4] +
pop ecx  +
pop ecx  +
jmp loc_1064A96  +
mov eax [esi+4] +
lea ecx [ebp+var_C] +
push ecx  +
push offset stru_104AC34  +
push eax  +
mov [ebp+var_C] ebx +
call edi  +
push [ebp+var_C]  +
mov edi eax +
lea eax [esi+18h] +
push eax  +
call sub_101403C  +
mov [esi+4] ebx +
cmp edi ebx +
jz loc_1064A94  +
push edi  +
push offset aCogetinterface  +
call sub_106FAFF  +
pop ecx  +
pop ecx  +
mov eax edi +
jmp loc_1064A96  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
push 0  +
call ds:CoInitialize  +
mov edi eax +
test edi edi +
jz loc_1064B22  +
push edi  +
push offset aCoinitializeHr  +
call sub_106FAFF  +
pop ecx  +
pop ecx  +
jmp loc_1064B58  +
push esi  +
mov esi [ebp+8] +
test esi esi +
jz loc_1064B49  +
mov ecx esi +
call sub_1064A0C  +
mov edi eax +
test edi edi +
jnz loc_1064B49  +
mov ecx [esi+18h] +
mov eax [esi+14h] +
mov edx [eax] +
push ecx  +
push dword ptr [esi+8]  +
push eax  +
call dword ptr [edx+10h]  +
mov edi eax +
and dword ptr [esi+18h] 0 +
and dword ptr [esi+14h] 0 +
call ds:CoUninitialize  +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 28h +
push edi  +
call sub_1064582  +
xor edi edi +
cmp eax edi +
jnz loc_1064C62  +
lea eax [ebp-0Ch] +
push eax  +
push edi  +
push dword ptr [ebp+8]  +
push offset loc_1064AFF  +
push edi  +
push edi  +
call ds:_beginthreadex  +
add esp 18h +
mov [ebp-4] eax +
cmp eax edi +
jnz loc_1064BEF  +
call ds:GetLastError  +
push eax  +
push offset aCreatethreadLa  +
call sub_106FAFF  +
pop ecx  +
pop ecx  +
call sub_1063A18  +
jmp loc_1064C62  +
push ebx  +
push esi  +
xor ebx ebx +
mov esi offset unk_108AF60 +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp-28h] +
push eax  +
call ds:PeekMessageW  +
mov ecx esi +
test eax eax +
jz loc_1064C1A  +
call ?PumpMessage@CWinThread@@UAEHXZ  +
mov ecx esi +
call ?RestoreWaitCursor@CCmdTarget@@QAEXXZ  +
jmp loc_1064BF8  +
***
push ebx  +
call sub_1006750  +
inc ebx  +
test eax eax +
jnz loc_1064BF8  +
push 4  +
push 4FFh  +
push 0FFFFFFFFh  +
lea eax [ebp-4] +
push eax  +
push 1  +
xor ebx ebx +
call ds:MsgWaitForMultipleObjectsEx  +
test eax eax +
jnz loc_1064BF8  +
lea eax [ebp-8] +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-8] 1 +
call ds:GetExitCodeThread  +
push dword ptr [ebp-4]  +
call ds:CloseHandle  +
mov eax [ebp-8] +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 4  +
***
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1064D00  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
jmp loc_1065339  +
push dword ptr [ebp-28h]  +
push offset aSelectdevicedl  +
call sub_106FAFF  +
pop ecx  +
pop ecx  +
mov eax [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
cmp eax ebx +
jz loc_1064D7C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1064D8D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-28h] +
jmp loc_1065339  +
push esi  +
push offset aDevicedlgHresu  +
call sub_106FAFF  +
pop ecx  +
pop ecx  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1064099  +
mov eax [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
cmp eax ebx +
jz loc_1064DF7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1064E08  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_1065339  +
push offset aDevicedlgRetur  +
call sub_106FAFF  +
pop ecx  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1064099  +
mov eax [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
cmp eax ebx +
jz loc_1064E3C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1064E4D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 80004005h +
jmp loc_1065339  +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
lea edi [ebp-5Ch] +
stos   +
stos   +
stos   +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp-7Eh] +
stos   +
stos   +
push 3  +
pop eax  +
mov [ebp-80h] ax +
push 48h  +
pop eax  +
mov [ebp-70h] ax +
lea eax [ebp-20h] +
xor edi edi +
mov [ebp-68h] eax +
mov eax [ebp-3Ch] +
inc edi  +
mov [ebp-60h] edi +
mov dword ptr [ebp-5Ch] 100Ch +
mov dword ptr [ebp-78h] 80h +
mov [ebp-58h] edi +
mov dword ptr [ebp-54h] 100Ah +
push dword ptr [eax]  +
lea ecx [ebp-34h] +
call near ptr dword_106405C+3  +
mov eax [ebp-34h] +
mov byte ptr [ebp-4] 3 +
cmp eax ebx +
jnz loc_1064EF9  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1064099  +
mov eax [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
cmp eax ebx +
jz loc_1064EDE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1064EEF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 80004002h +
jmp loc_1065339  +
mov ecx [eax] +
mov esi 1002h +
push esi  +
lea edx [ebp-80h] +
push edx  +
lea edx [ebp-60h] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx+10h]  +
mov [ebp-28h] eax +
cmp eax ebx +
jz loc_1064F44  +
push eax  +
push offset aWritemultipleH  +
call sub_106FAFF  +
mov eax [ebp-34h] +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_1064F33  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1064099  +
jmp loc_1064D6B  +
***
mov eax [ebp-34h] +
mov ecx [eax] +
push esi  +
lea edx [ebp-70h] +
push edx  +
lea edx [ebp-58h] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi ebx +
jz loc_1064F84  +
push esi  +
push offset aWritemultipleH  +
call sub_106FAFF  +
mov eax [ebp-34h] +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_1064DDA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1064DDA  +
***
lea eax [ebp-28h] +
push eax  +
mov eax [ebp-3Ch] +
push 1016h  +
push dword ptr [eax]  +
call near ptr dword_1064434+3  +
mov ecx 10000h +
cmp eax ebx +
jnz loc_1064FA5  +
cmp [ebp-28h] ecx +
jge loc_1064FA8  +
mov [ebp-28h] ecx +
mov [ebp-4Ch] ebx +
push 48h  +
mov byte ptr [ebp-4] 4 +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-30h] eax +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_1064FCB  +
mov ecx eax +
call near ptr dword_10648EC+5  +
jmp loc_1064FCD  +
xor eax eax +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_101403C  +
lea eax [ebp-30h] +
push eax  +
push 5  +
push dword ptr [ebp-2Ch]  +
call near ptr dword_1064434+3  +
cmp eax ebx +
jnz loc_1064FF0  +
mov ebx [ebp-30h] +
shr ebx 10h +
dec ebx  +
jz loc_106500F  +
dec ebx  +
jz loc_1065008  +
dec ebx  +
jz loc_1065001  +
push 4  +
pop eax  +
jmp loc_1065014  +
mov eax 200000h +
jmp loc_1065014  +
mov eax 100000h +
jmp loc_1065014  +
mov eax 80000h +
mov ebx [ebp-4Ch] +
test ebx ebx +
jz loc_1065064  +
mov ecx [ebx] +
push eax  +
push dword ptr [ebp-40h]  +
push ebx  +
call dword ptr [ecx+0Ch]  +
lea ecx [ebp-30h] +
call ??0CString@@QAE@XZ  +
push 991h  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 6 +
call ?LoadStringW@CString@@QAEHI@Z  +
push dword ptr [ebp-30h]  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+1Ch]  +
mov eax [ebx] +
push offset word_100219C  +
push ebx  +
call dword ptr [eax+20h]  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+10h]  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call ??1CString@@QAE@XZ  +
push 2Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1065081  +
push 1  +
push dword ptr [ebp-40h]  +
mov ecx eax +
push ebx  +
call near ptr dword_106460C+3  +
mov esi eax +
jmp loc_1065083  +
xor esi esi +
test esi esi +
jnz loc_10650EA  +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1056138  +
mov byte ptr [ebp-4] 3 +
test ebx ebx +
jz loc_10650A1  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax [ebp-34h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_10650B2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1064099  +
mov eax [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_10650CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10650E0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 8007000Eh +
jmp loc_1065339  +
mov eax [esi] +
mov eax [eax+4] +
add eax esi +
push eax  +
lea ecx [ebp-30h] +
call sub_101B284  +
mov eax [ebp-3Ch] +
push dword ptr [eax]  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 7 +
call near ptr dword_10640D0+3  +
cmp dword ptr [ebp-48h] 0 +
mov byte ptr [ebp-4] 8 +
jnz loc_1065170  +
mov eax [ebp-30h] +
mov byte ptr [ebp-4] 4 +
test eax eax +
jz loc_1065126  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov byte ptr [ebp-4] 3 +
test ebx ebx +
jz loc_1065134  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax [ebp-34h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_1065145  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1064099  +
mov eax [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1065162  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jmp loc_1064EE7  +
***
push 6  +
pop ecx  +
xor eax eax +
lea edi [ebp-98h] +
stos   +
mov eax [ebp-28h] +
mov edi ds:EnableWindow +
push 0  +
push dword ptr [ebp-40h]  +
add eax eax +
mov dword ptr [ebp-9Ch] 1Ch +
mov [ebp-94h] eax +
mov dword ptr [ebp-90h] 1 +
call edi  +
mov eax [ebp-44h] +
push dword ptr [ebp-30h]  +
mov dword ptr [eax+14h] 1 +
lea eax [ebp-9Ch] +
push eax  +
push dword ptr [ebp-48h]  +
lea ecx [ebp-0B8h] +
call near ptr dword_106452C+2  +
mov ecx [ebp-44h] +
lea eax [ebp-0B8h] +
push eax  +
mov byte ptr [ebp-4] 9 +
call near ptr dword_1064B98+3  +
push 1  +
push dword ptr [ebp-40h]  +
mov [ebp-28h] eax +
mov eax [ebp-44h] +
and dword ptr [eax+14h] 0 +
call edi  +
test ebx ebx +
jz loc_1065213  +
mov eax [ebx] +
lea ecx [ebp-44h] +
push ecx  +
push ebx  +
call dword ptr [eax+18h]  +
test eax eax +
jnz loc_106520D  +
cmp [ebp-44h] eax +
jz loc_106520D  +
mov dword ptr [ebp-28h] 1 +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+28h]  +
xor edi edi +
cmp [ebp-28h] edi +
jz loc_10652A8  +
push dword ptr [ebp-28h]  +
push offset aIdtgetbandedda  +
call sub_106FAFF  +
pop ecx  +
pop ecx  +
lea ecx [ebp-0B8h] +
mov byte ptr [ebp-4] 8 +
call near ptr dword_10642E0+3  +
mov eax [ebp-48h] +
mov byte ptr [ebp-4] 7 +
cmp eax edi +
jz loc_106524D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-30h] +
mov byte ptr [ebp-4] 4 +
cmp eax edi +
jz loc_106525E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov byte ptr [ebp-4] 3 +
cmp ebx edi +
jz loc_106526C  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax [ebp-34h] +
mov byte ptr [ebp-4] 2 +
cmp eax edi +
jz loc_106527D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1064099  +
mov eax [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
cmp eax edi +
jz loc_106529A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jmp loc_1064D85  +
***
mov eax [esi+8] +
mov ecx [ebp-50h] +
mov [esi+8] edi +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [ecx] eax +
lea ecx [ebp-0B8h] +
mov byte ptr [ebp-4] 8 +
call near ptr dword_10642E0+3  +
mov eax [ebp-48h] +
mov byte ptr [ebp-4] 7 +
cmp eax edi +
jz loc_10652D9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-30h] +
mov byte ptr [ebp-4] 4 +
cmp eax edi +
jz loc_10652EA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov byte ptr [ebp-4] 3 +
cmp ebx edi +
jz loc_10652F8  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax [ebp-34h] +
mov byte ptr [ebp-4] 2 +
cmp eax edi +
jz loc_1065309  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1064099  +
mov eax [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
cmp eax edi +
jz loc_1065326  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jz loc_1065337  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
call sub_1002119  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_18] +
mov eax ecx +
mov ecx [ebp+arg_0] +
fstp  qword ptr [eax+18h] +
fld  [ebp+arg_20] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
fstp  qword ptr [eax+20h] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_10] +
mov [eax+10h] ecx +
mov ecx [ebp+arg_14] +
mov [eax+14h] ecx +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
lea eax [ebp+Translated] +
push eax  +
push [ebp+Translated]  +
push [ebp+hDlg]  +
call ds:GetDlgItemInt  +
cmp [ebp+Translated] 0 +
jz loc_10654F3  +
test eax eax +
jz loc_10654F3  +
mov ecx [ebp+arg_8] +
push 1  +
push 0  +
push 438h  +
push [ebp+hDlg]  +
mov [ecx] eax +
call ds:GetDlgItem  +
push eax  +
call ds:InvalidateRect  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
push edi  +
jz loc_106555D  +
mov eax [ebp+arg_0] +
mov ecx [esi+10h] +
mov ebx [eax] +
imul ebx ecx +
mov [ebp+var_8] ebx +
mov edx [esi+14h] +
mov edi [eax+4] +
fild  [ebp+var_8] +
imul edi edx +
fmul  qword ptr [esi+20h] +
fdiv  qword ptr [esi+18h] +
mov [ebp+var_C] edi +
mov [ebp+var_4] ecx +
mov [ebp+arg_0] edx +
mov [ebp+var_14] ebx +
call _ftol2_sse  +
cmp eax edi +
mov [ebp+var_10] eax +
jle loc_10655BF  +
fild  [ebp+var_C] +
fmul  qword ptr [esi+18h] +
fdiv  qword ptr [esi+20h] +
call _ftol2_sse  +
mov [ebp+var_14] eax +
mov [ebp+var_10] edi +
jmp loc_10655BF  +
mov eax [esi+0Ch] +
fild  dword ptr [esi+0Ch] +
test eax eax +
jge loc_106556D  +
fadd  ds:dbl_104A350 +
fld  qword ptr [esi+18h] +
fmul st st(1) +
fld  ds:dbl_1010288 +
fdiv st(1) st +
fxch  st(1) +
call _ftol2_sse  +
fld  qword ptr [esi+20h] +
fmulp st(2) st +
mov edi eax +
mov [ebp+var_14] edi +
fdivp st(1) st +
call _ftol2_sse  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea eax [ecx+edi-1] +
cdq   +
idiv  ecx +
mov [ebp+var_10] ebx +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
imul ecx [ebp+var_4] +
mov edi [eax+4] +
lea eax [edi+ebx-1] +
cdq   +
idiv  edi +
mov ebx ecx +
mov [ebp+arg_0] eax +
imul edi eax +
mov ecx [ebp+arg_4] +
xor eax eax +
cmp ecx eax +
jz loc_10655EC  +
cmp [esi] eax +
jz loc_10655D6  +
mov eax ebx +
sub eax [ebp+var_14] +
cdq   +
sub eax edx +
sar eax 1 +
mov [ecx] eax +
xor eax eax +
cmp [esi+4] eax +
jz loc_10655E9  +
mov eax edi +
sub eax [ebp+var_10] +
cdq   +
sub eax edx +
sar eax 1 +
mov [ecx+4] eax +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
test eax eax +
jz loc_1065601  +
mov ecx [ebp+var_14] +
mov [eax] ecx +
mov ecx [ebp+var_10] +
mov [eax+4] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_106560D  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
test eax eax +
jz locret_1065619  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov edx [ecx+14h] +
sub edx [ecx+34h] +
mov eax [ebp+arg_0] +
sub edx [ecx+2Ch] +
mov [eax] edx +
mov edx [ecx+18h] +
sub edx [ecx+38h] +
sub edx [ecx+30h] +
mov [eax+4] edx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
push edi  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
xor edi edi +
mov [ebp-4] edi +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+0Ch] +
sub eax 400h +
jz loc_1065875  +
dec eax  +
jz loc_106585E  +
dec eax  +
dec eax  +
jz loc_1065808  +
dec eax  +
jnz loc_1065883  +
cmp esi edi +
jz loc_1065883  +
mov ebx [esi+40h] +
cmp ebx edi +
jz loc_1065883  +
push esi  +
lea eax [ebp-20h] +
push eax  +
call sub_1065622  +
push edi  +
push edi  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-8] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
call sub_10654FC  +
mov esi [ebp+14h] +
mov eax [esi+8] +
sub eax [esi] +
push dword ptr [ebp+10h]  +
mov [ebp+14h] eax +
fild  dword ptr [ebp+14h] +
mov eax [esi+0Ch] +
sub eax [esi+4] +
fidiv  dword ptr [ebp-20h] +
mov [ebp+14h] eax +
fstp  qword ptr [ebp-10h] +
fild  dword ptr [ebp+14h] +
fidiv  dword ptr [ebp-1Ch] +
fstp  qword ptr [ebp-20h] +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov edi eax +
mov ecx edi +
call MFC42u_6699  +
test al 1 +
jz loc_1065747  +
mov eax [ebx+30h] +
sub eax [esi] +
push 0  +
sub eax [esi+8] +
mov ecx edi +
push eax  +
call ?OffsetClipRgn@CDC@@QAEHHH@Z  +
fild  dword ptr [ebp-8] +
fmul  qword ptr [ebp-10h] +
call _ftol2_sse  +
fild  dword ptr [ebp-18h] +
mov ebx [ebx+30h] +
sub ebx eax +
sub ebx [esi] +
fmul  qword ptr [ebp-10h] +
mov [ebp-38h] ebx +
call _ftol2_sse  +
fild  dword ptr [ebp-4] +
mov ecx ebx +
sub ecx eax +
fmul  qword ptr [ebp-20h] +
mov [ebp-40h] ecx +
call _ftol2_sse  +
add eax [esi+4] +
mov [ebp-3Ch] eax +
jmp loc_106577B  +
fild  dword ptr [ebp-8] +
fmul  qword ptr [ebp-10h] +
call _ftol2_sse  +
fild  dword ptr [ebp-4] +
add eax [esi] +
fmul  qword ptr [ebp-20h] +
mov [ebp-40h] eax +
call _ftol2_sse  +
fild  dword ptr [ebp-18h] +
add eax [esi+4] +
fmul  qword ptr [ebp-10h] +
mov [ebp-3Ch] eax +
call _ftol2_sse  +
mov ebx eax +
add ebx [ebp-40h] +
mov [ebp-38h] ebx +
fild  dword ptr [ebp-14h] +
fmul  qword ptr [ebp-20h] +
call _ftol2_sse  +
mov esi eax +
add esi [ebp-3Ch] +
mov [ebp-34h] esi +
test edi edi +
jz loc_10657FF  +
mov eax [edi] +
push 7  +
mov ecx edi +
call dword ptr [eax+2Ch]  +
mov [ebp+14h] eax +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax+2Ch]  +
mov [ebp+10h] eax +
lea eax [ebp-40h] +
push eax  +
mov ecx edi +
call sub_1034A1B  +
push dword ptr [ebp-3Ch]  +
lea eax [ebp-28h] +
push dword ptr [ebp-40h]  +
mov ecx edi +
push eax  +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
dec esi  +
push esi  +
dec ebx  +
push ebx  +
mov ecx edi +
call ?LineTo@CDC@@QAEHHH@Z  +
push esi  +
push dword ptr [ebp-40h]  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
push dword ptr [ebp-3Ch]  +
mov ecx edi +
push ebx  +
call ?LineTo@CDC@@QAEHHH@Z  +
push dword ptr [ebp+14h]  +
mov ecx edi +
call sub_10022BD  +
push dword ptr [ebp+10h]  +
mov ecx edi +
call sub_10022BD  +
mov dword ptr [ebp-4] 1 +
jmp loc_1065883  +
push dword ptr [ebp+10h]  +
call ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z  +
mov ecx eax +
mov [ebp+10h] eax +
call MFC42u_6699  +
test al 1 +
jz loc_1065883  +
cmp esi edi +
jz loc_1065883  +
mov ebx [esi+40h] +
cmp ebx edi +
jz loc_1065883  +
mov esi [ebp+14h] +
mov ecx [esi] +
mov eax [esi+8] +
mov edx [ebx+30h] +
sub edx ecx +
mov edi eax +
push 0  +
sub edx eax +
sub edi ecx +
mov ecx [ebp+10h] +
push edx  +
call ?OffsetClipRgn@CDC@@QAEHHH@Z  +
mov eax [ebx+30h] +
sub eax [esi] +
mov ecx [ebp+10h] +
mov [esi+8] eax +
sub eax edi +
push esi  +
mov [esi] eax +
call sub_1034A1B  +
jmp loc_10657FF  +
***
cmp esi edi +
jz loc_1065883  +
mov esi [esi+40h] +
cmp esi edi +
jz loc_1065883  +
lea edi [esi+28h] +
mov esi [ebp+14h] +
movs   +
movs   +
movs   +
movs   +
jmp loc_1065883  +
push dword ptr [ebp+14h]  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongW  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
cmp [esi+8] ebx +
jnz loc_10658D0  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
lea eax [ebp+var_C] +
push eax  +
call sub_1065622  +
push eax  +
mov ecx esi +
call sub_10654FC  +
mov eax [ebp+arg_4] +
mov [esi+10h] eax +
mov eax [ebp+var_4] +
mov [esi+14h] eax +
push dword ptr [esi]  +
mov edi ds:CheckDlgButton +
push 4BBh  +
push [ebp+hDlg]  +
call edi  +
push dword ptr [esi+4]  +
push 4BCh  +
push [ebp+hDlg]  +
call edi  +
xor eax eax +
cmp [esi+8] ebx +
setz al  +
push eax  +
push 4BEh  +
push [ebp+hDlg]  +
call edi  +
mov edi 4C0h +
cmp [ebp+arg_8] ebx +
jz loc_106591A  +
push ebx  +
push dword ptr [esi+0Ch]  +
push edi  +
push [ebp+hDlg]  +
call ds:SetDlgItemInt  +
xor eax eax +
cmp [esi+8] ebx +
setz al  +
push eax  +
push edi  +
push [ebp+hDlg]  +
mov edi ds:GetDlgItem +
call edi  +
mov ebx ds:EnableWindow +
push eax  +
call ebx  +
xor eax eax +
cmp [esi+8] eax +
setz al  +
push eax  +
push 4C1h  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ebx  +
push dword ptr [esi+8]  +
push 4BFh  +
push [ebp+hDlg]  +
call ds:CheckDlgButton  +
push 0  +
push dword ptr [esi+10h]  +
push 4C2h  +
push [ebp+hDlg]  +
call ds:SetDlgItemInt  +
push dword ptr [esi+8]  +
push 4C2h  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ebx  +
push dword ptr [esi+8]  +
push 4C3h  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ebx  +
push 0  +
push dword ptr [esi+14h]  +
push 4C4h  +
push [ebp+hDlg]  +
call ds:SetDlgItemInt  +
push dword ptr [esi+8]  +
push 4C4h  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ebx  +
push dword ptr [esi+8]  +
push 4C5h  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ebx  +
push 1  +
push 0  +
push 438h  +
push [ebp+hDlg]  +
call edi  +
push eax  +
call ds:InvalidateRect  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub eax 110h +
push ebx  +
push esi  +
push edi  +
jz loc_1065B6C  +
dec eax  +
jnz loc_1065BD0  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_1065BD0  +
mov esi [edi+40h] +
cmp esi ebx +
jz loc_1065BD0  +
mov eax [ebp+10h] +
movzx ecx ax +
sub ecx 4BBh +
jz loc_1065B4A  +
dec ecx  +
jz loc_1065B35  +
dec ecx  +
dec ecx  +
jz loc_1065B28  +
dec ecx  +
jz loc_1065B17  +
dec ecx  +
jz loc_1065AD9  +
dec ecx  +
dec ecx  +
jz loc_1065A91  +
dec ecx  +
dec ecx  +
jnz loc_1065BD0  +
shr eax 10h +
mov ecx 300h +
cmp ax cx +
jnz loc_1065A78  +
add esi 14h +
push esi  +
push 4C4h  +
jmp loc_1065AA7  +
mov ecx 200h +
cmp ax cx +
jnz loc_1065B67  +
push ebx  +
push dword ptr [esi+14h]  +
push 4C4h  +
jmp loc_1065ACB  +
shr eax 10h +
mov ecx 300h +
cmp ax cx +
jnz loc_1065AB4  +
add esi 10h +
push esi  +
push 4C2h  +
push dword ptr [ebp+8]  +
call sub_10654B4  +
jmp loc_1065B67  +
mov ecx 200h +
cmp ax cx +
jnz loc_1065B67  +
push ebx  +
push dword ptr [esi+10h]  +
push 4C2h  +
push dword ptr [ebp+8]  +
call ds:SetDlgItemInt  +
jmp loc_1065B67  +
shr eax 10h +
mov ecx 300h +
cmp ax cx +
jnz loc_1065AF9  +
lea eax [esi+0Ch] +
push eax  +
push 4C0h  +
push dword ptr [ebp+8]  +
call sub_10654B4  +
jmp loc_1065B5B  +
mov ecx 200h +
cmp ax cx +
jnz loc_1065B5B  +
push ebx  +
push dword ptr [esi+0Ch]  +
push 4C0h  +
push dword ptr [ebp+8]  +
call ds:SetDlgItemInt  +
jmp loc_1065B5B  +
shr eax 10h +
test ax ax +
jnz loc_1065B67  +
mov dword ptr [esi+8] 1 +
jmp loc_1065B5B  +
shr eax 10h +
test ax ax +
jnz loc_1065B67  +
mov [esi+8] ebx +
jmp loc_1065B5B  +
shr eax 10h +
test ax ax +
jnz loc_1065B67  +
xor eax eax +
cmp [esi+4] ebx +
setz al  +
mov [esi+4] eax +
jmp loc_1065B5B  +
shr eax 10h +
test ax ax +
jnz loc_1065B67  +
xor eax eax +
cmp [esi] ebx +
setz al  +
mov [esi] eax +
push ebx  +
push edi  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1065892  +
xor eax eax +
inc eax  +
jmp loc_1065BD2  +
mov eax [ebp+14h] +
xor ebx ebx +
cmp eax ebx +
jz loc_1065BD0  +
mov ecx [eax+40h] +
mov [ebp+0Ch] ecx +
cmp ecx ebx +
jz loc_1065BD0  +
push eax  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongW  +
mov esi ds:SendDlgItemMessageW +
push ebx  +
push 4  +
mov edi 0C5h +
push edi  +
push 4C0h  +
push dword ptr [ebp+8]  +
call esi  +
push ebx  +
push 2  +
push edi  +
push 4C2h  +
push dword ptr [ebp+8]  +
call esi  +
push ebx  +
push 2  +
push edi  +
push 4C4h  +
push dword ptr [ebp+8]  +
call esi  +
mov ecx [ebp+0Ch] +
push 1  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+8]  +
call sub_1065892  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov eax offset off_1065BE8 +
retn   +
***
mov eax ds:?classCWnd@CWnd@@2UCRuntimeClass@@B +
retn   +
***
mov eax offset off_1065C18 +
retn   +
***
jmp sub_1002407  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_1065C5D  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:SelectObject  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ecx+8]  +
call ds:GetTextExtentPoint32W  +
mov ecx [ebp+var_8._cx] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+var_8.cy] +
mov [eax+4] ecx +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp-1Ch] +
mov esi ecx +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
mov ebx [ebp+8] +
lea eax [esi+5Ch] +
push eax  +
mov ecx ebx +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
cmp dword ptr [esi+40h] 0 +
mov [ebp-4] eax +
jnz loc_1065D23  +
mov edi [esi+98h] +
test edi edi +
jge loc_1065CD4  +
xor edi edi +
mov eax [esi+88h] +
add eax edi +
mov [ebp+8] eax +
fild  dword ptr [ebp+8] +
push 0  +
fmul  qword ptr [esi+90h] +
call _ftol2_sse  +
add eax 5 +
push eax  +
lea eax [ebp-0Ch] +
push eax  +
mov ecx ebx +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
mov eax [ebp-10h] +
sub eax [ebp-18h] +
push eax  +
mov eax [esi+88h] +
add eax edi +
mov [ebp+8] eax +
fild  dword ptr [ebp+8] +
fmul  qword ptr [esi+90h] +
call _ftol2_sse  +
add eax 5 +
jmp loc_1065D7C  +
mov edi [esi+9Ch] +
test edi edi +
jge loc_1065D2F  +
xor edi edi +
mov eax [esi+8Ch] +
add eax edi +
mov [ebp+8] eax +
fild  dword ptr [ebp+8] +
fmul  qword ptr [esi+90h] +
call _ftol2_sse  +
add eax 5 +
push eax  +
push 0  +
lea eax [ebp-0Ch] +
push eax  +
mov ecx ebx +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
mov eax [esi+8Ch] +
add eax edi +
mov [ebp+8] eax +
fild  dword ptr [ebp+8] +
fmul  qword ptr [esi+90h] +
call _ftol2_sse  +
add eax 5 +
push eax  +
mov eax [ebp-14h] +
sub eax [ebp-1Ch] +
push eax  +
mov ecx ebx +
call ?LineTo@CDC@@QAEHHH@Z  +
lea eax [ebp-4] +
push eax  +
mov ecx ebx +
call sub_1065C45  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
push edi  +
lea eax [ebp-18h] +
mov esi ecx +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
mov edi [ebp+8] +
lea eax [esi+64h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_104FFCC  +
cmp dword ptr [esi+40h] 0 +
mov ecx edi +
jnz loc_1065DE9  +
mov eax [ebp-0Ch] +
dec eax  +
push eax  +
push dword ptr [ebp-18h]  +
lea eax [ebp-8] +
push eax  +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
mov eax [ebp-0Ch] +
dec eax  +
push eax  +
push dword ptr [ebp-10h]  +
jmp loc_1065E02  +
push dword ptr [ebp-14h]  +
mov eax [ebp-10h] +
dec eax  +
push eax  +
lea eax [ebp-8] +
push eax  +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
mov eax [ebp-10h] +
push dword ptr [ebp-0Ch]  +
dec eax  +
push eax  +
mov ecx edi +
call ?LineTo@CDC@@QAEHHH@Z  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+Rect] +
mov edi ecx +
push eax  +
push dword ptr [edi+20h]  +
call ds:GetClientRect  +
mov eax [edi+40h] +
test eax eax +
jnz loc_1065E3D  +
mov esi [ebp+Rect.bottom] +
sub esi [ebp+Rect.top] +
jmp loc_1065E43  +
mov esi [ebp+Rect.right] +
sub esi [ebp+Rect.left] +
test eax eax +
jnz loc_1065E4F  +
mov ecx [edi+88h] +
jmp loc_1065E55  +
mov ecx [edi+8Ch] +
mov [ebp+var_8] ecx +
test eax eax +
jnz loc_1065E61  +
fld  qword ptr [edi+70h] +
jmp loc_1065E64  +
fld  qword ptr [edi+78h] +
and [ebp+var_4] 0 +
fstp  [ebp+var_14] +
fild  [ebp+arg_C] +
fstp  [ebp+var_1C] +
fild  [ebp+var_8] +
fstp  qword ptr [ebp-0Ch] +
fld  qword ptr [edi+90h] +
fmul  [ebp+var_1C] +
fmul  [ebp+var_14] +
fimul  [ebp+var_4] +
fdiv  ds:dbl_100FB70 +
fadd  [ebp+arg_4] +
fld  qword ptr [edi+90h] +
fmul  qword ptr [ebp-0Ch] +
fadd st st(1) +
fcomp  ds:dbl_1017EF0 +
fnstsw  ax +
test ah 41h +
jnz loc_1065EEC  +
call _ftol2_sse  +
cmp dword ptr [edi+40h] 0 +
mov ecx [ebp+arg_0] +
mov ebx eax +
lea eax [esi-1] +
jnz loc_1065ED7  +
push eax  +
push ebx  +
lea eax [ebp+var_24] +
push eax  +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
mov eax esi +
sub eax [ebp+arg_10] +
dec eax  +
push eax  +
push ebx  +
mov ecx [ebp+arg_0] +
call ?LineTo@CDC@@QAEHHH@Z  +
jmp loc_1065EEE  +
push ebx  +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
mov eax esi +
sub eax [ebp+arg_10] +
push ebx  +
dec eax  +
push eax  +
jmp loc_1065ECD  +
fstp  st +
inc [ebp+var_4]  +
cmp [ebp+var_4] 0Ah +
jl loc_1065E77  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
push 70h  +
mov eax (offset loc_107DBD8+1) +
call sub_10020DC  +
mov esi ecx +
call sub_10022E9  +
mov edi 0F8F3F1h +
test al al +
jz loc_1065F29  +
push 5  +
call ds:GetSysColor  +
mov edi eax +
push esi  +
lea ecx [ebp-64h] +
call ??0CPaintDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-7Ch] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
and dword ptr [ebp-68h] 0 +
mov esi offset off_100A058 +
mov [ebp-6Ch] esi +
push edi  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 1 +
call sub_100A0C1  +
lea eax [ebp-6Ch] +
push eax  +
lea eax [ebp-7Ch] +
push eax  +
lea ecx [ebp-64h] +
call sub_104FFCC  +
lea ecx [ebp-6Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 0 +
mov [ebp-6Ch] esi +
call sub_1002407  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-64h] +
call ??1CPaintDC@@UAE@XZ  +
call sub_1002119  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_102DB88 +
call sub_1002407  +
test byte ptr [ebp+8] 1 +
jz loc_1065FBA  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
test ecx ecx +
jz loc_1066012  +
mov eax [ebp+arg_4] +
cmp eax 7FFFFFFFh +
ja loc_1066012  +
push edi  +
xor edi edi +
mov edx eax +
test eax eax +
jz loc_1065FF7  +
cmp [ecx] di +
jz loc_1065FF3  +
inc ecx  +
inc ecx  +
dec edx  +
jnz loc_1065FE9  +
test edx edx +
jnz loc_1065FFC  +
mov edi 80070057h +
test esi esi +
jz loc_106600D  +
test edi edi +
jl loc_106600A  +
sub eax edx +
mov [esi] eax +
jmp loc_106600D  +
and dword ptr [esi] 0 +
mov eax edi +
pop edi  +
jmp loc_1066017  +
mov eax 80070057h +
test eax eax +
jge loc_1066022  +
test esi esi +
jz loc_1066022  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?OnSysColorChange@CWnd@@IAEXXZ  +
mov ecx esi +
call sub_101B03E  +
push 0  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+Rect] +
mov ebx ecx +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetClientRect  +
xor eax eax +
mov [ebp+var_1C] ax +
lea edi [ebp-1Ah] +
stos   +
stos   +
stos   +
stos   +
stos   +
push 1  +
mov ecx esi +
stos   +
call ?SetBkMode@CDC@@QAEHH@Z  +
push dword ptr [ebx+6Ch]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+38h]  +
push dword ptr [ebp+arg_C]  +
lea eax [ebp+var_1C] +
push offset aD  +
push 0Ch  +
push eax  +
call sub_1005CB4  +
add esp 10h +
lea eax [ebp+var_20] +
push eax  +
push 0Bh  +
lea eax [ebp+var_1C] +
push eax  +
call sub_1065FC6  +
test eax eax +
jl loc_106615C  +
mov eax [esi] +
xor edi edi +
mov ecx esi +
cmp [ebx+40h] edi +
jnz loc_106610F  +
add ebx 44h +
push ebx  +
call dword ptr [eax+30h]  +
push 18h  +
mov ecx esi +
call ?SetTextAlign@CDC@@QAEII@Z  +
fld  [ebp+arg_4] +
fadd  ds:dbl_1031550 +
mov ebx [esi] +
push edi  +
push [ebp+var_20]  +
fadd  ds:dbl_1009880 +
lea eax [ebp+var_1C] +
push eax  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
push edi  +
sub eax 7 +
push edi  +
push eax  +
call _ftol2_sse  +
jmp loc_1066156  +
add ebx 4Ch +
push ebx  +
call dword ptr [eax+30h]  +
push [ebp+var_20]  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+var_38] +
push eax  +
mov ecx esi +
call sub_1065C66  +
push 18h  +
mov ecx esi +
call ?SetTextAlign@CDC@@QAEII@Z  +
fld  [ebp+arg_4] +
mov ebx [esi] +
push edi  +
push [ebp+var_20]  +
lea eax [ebp+var_1C] +
push eax  +
push edi  +
push edi  +
call _ftol2_sse  +
mov ecx [ebp+var_38] +
lea eax [eax+ecx+2] +
push eax  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
sub eax 7 +
push eax  +
mov ecx esi +
call dword ptr [ebx+68h]  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
push esi  +
push edi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
mov edx [esi+40h] +
mov eax [ebp+Rect.bottom] +
mov ecx [ebp+Rect.right] +
test edx edx +
jnz loc_106619F  +
mov edi ecx +
sub edi [ebp+Rect.left] +
jmp loc_10661A4  +
mov edi eax +
sub edi [ebp+Rect.top] +
mov [ebp+var_C] edi +
test edx edx +
jnz loc_10661B3  +
sub eax [ebp+Rect.top] +
mov [ebp+var_4] eax +
jmp loc_10661B9  +
sub ecx [ebp+Rect.left] +
mov [ebp+var_4] ecx +
test edx edx +
jnz loc_10661C5  +
mov eax [esi+88h] +
jmp loc_10661CB  +
mov eax [esi+8Ch] +
cmp [ebp+arg_8] 0 +
mov [ebp+var_10] eax +
jnz loc_10661DA  +
mov eax [ebp+var_4] +
mov [ebp+arg_8] eax +
test edx edx +
jnz loc_10661E3  +
fld  qword ptr [esi+70h] +
jmp loc_10661E6  +
fld  qword ptr [esi+78h] +
and [ebp+var_8] 0 +
fstp  [ebp+var_2C] +
fldz   +
fst  [ebp+var_1C] +
fild  [ebp+var_10] +
fstp  [ebp+var_24] +
fld  qword ptr [esi+90h] +
fmul  [ebp+var_24] +
call _ftol2_sse  +
mov ecx [ebp+var_C] +
sub ecx eax +
mov [ebp+var_10] ecx +
fild  [ebp+var_10] +
fcompp st(1) st +
fnstsw  ax +
test ah 41h +
jnz loc_10662F1  +
fild  [ebp+arg_4] +
mov edi [ebp+arg_0] +
push ebx  +
fstp  qword ptr [ebp-14h] +
push [ebp+arg_C]  +
fld  [ebp+var_1C] +
push [ebp+arg_4]  +
push ecx  +
push ecx  +
fstp  [esp+68h+var_68] +
push edi  +
mov ecx esi +
call sub_1065E14  +
fld  qword ptr [esi+90h] +
fmul  [ebp+var_24] +
fadd  [ebp+var_1C] +
fcomp  ds:dbl_10662F8 +
fnstsw  ax +
test ah 41h +
jnz loc_10662B1  +
fld  [ebp+var_1C] +
call _ftol2_sse  +
mov ebx eax +
mov eax [ebp+var_4] +
dec eax  +
cmp dword ptr [esi+40h] 0 +
mov ecx edi +
jnz loc_1066283  +
push eax  +
push ebx  +
lea eax [ebp+var_34] +
push eax  +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
mov eax [ebp+var_4] +
sub eax [ebp+arg_8] +
dec eax  +
push eax  +
push ebx  +
jmp loc_1066297  +
push ebx  +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
mov eax [ebp+var_4] +
sub eax [ebp+arg_8] +
push ebx  +
dec eax  +
push eax  +
mov ecx edi +
call ?LineTo@CDC@@QAEHHH@Z  +
fld  [ebp+var_1C] +
push [ebp+var_8]  +
push ecx  +
push ecx  +
fstp  [esp+64h+var_68+4] +
push edi  +
mov ecx esi +
call sub_1066051  +
fld  qword ptr [esi+90h] +
mov eax [ebp+arg_4] +
fmul  qword ptr [ebp-14h] +
add [ebp+var_8] eax +
fmul  [ebp+var_2C] +
fadd  [ebp+var_1C] +
fstp  [ebp+var_1C] +
fld  qword ptr [esi+90h] +
fmul  [ebp+var_24] +
call _ftol2_sse  +
mov ecx [ebp+var_C] +
sub ecx eax +
mov [ebp+arg_0] ecx +
fild  [ebp+arg_0] +
fcomp  [ebp+var_1C] +
fnstsw  ax +
test ah 41h +
jz loc_1066228  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+40h] edi +
jnz loc_1066333  +
fild  dword ptr [esi+88h] +
fmul  qword ptr [esi+90h] +
call _ftol2_sse  +
add eax 5 +
xor ecx ecx +
push ecx  +
push eax  +
jmp loc_1066349  +
fild  dword ptr [esi+8Ch] +
fmul  qword ptr [esi+90h] +
call _ftol2_sse  +
add eax 5 +
push eax  +
push edi  +
mov ecx [ebp+8] +
lea eax [ebp-8] +
push eax  +
call sub_105F08D  +
mov ebx [eax+4] +
mov edi [eax] +
lea eax [ebp-18h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
push 5  +
push 0  +
push dword ptr [esi+80h]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_1066172  +
mov ecx [ebp+8] +
push ebx  +
push edi  +
lea eax [ebp-8] +
push eax  +
call sub_105F08D  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
adc eax offset BitBlt +
push dword ptr [ebp-94h]  +
lea ecx [ebp-7Ch] +
call sub_10022BD  +
lea ecx [ebp-6Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-7Ch] +
call ?DeleteDC@CDC@@QAEHXZ  +
mov byte ptr [ebp-4] 1 +
mov [ebp-6Ch] edi +
lea ecx [ebp-6Ch] +
call sub_1002407  +
lea ecx [ebp-7Ch] +
mov [ebp-4] bl +
call ??1CDC@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-64h] +
call ??1CPaintDC@@UAE@XZ  +
call sub_1002119  +
retn   +
***
cmp dword ptr [ecx+14h] 0 +
jz locret_10664E6  +
mov ecx [ecx+14h] +
mov eax [ecx] +
jmp dword ptr [eax+14h]  +
retn   +
***
cmp dword ptr [ecx+14h] 0 +
jz locret_10664FA  +
mov ecx [ecx+14h] +
mov eax [ecx] +
jmp dword ptr [eax+18h]  +
retn   +
***
cmp dword ptr [ecx+14h] 0 +
jz locret_106650E  +
mov ecx [ecx+14h] +
mov eax [ecx] +
jmp dword ptr [eax+1Ch]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+14h] 0 +
jz loc_1066528  +
mov ecx [ecx+14h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+20h]  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+14h] 0 +
jz locret_106653F  +
mov ecx [ecx+14h] +
mov eax [ecx] +
jmp dword ptr [eax+24h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+14h] eax +
jz loc_106656F  +
mov ecx [ecx+14h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+2Ch]  +
***
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+14h] eax +
jz loc_106658D  +
mov ecx [ecx+14h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+78h]  +
pop ebp  +
retn 4  +
***
xor eax eax +
cmp [ecx+14h] eax +
jz locret_10665A8  +
mov ecx [ecx+14h] +
mov eax [ecx] +
jmp dword ptr [eax+80h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
fild  [ebp+arg_0] +
test eax eax +
jge loc_10665C4  +
fadd  ds:dbl_104A350 +
fld  [ebp+arg_4] +
fcomp  st(1) +
fnstsw  ax +
test ah 41h +
jnz loc_10665D7  +
fstp  st +
fld  [ebp+arg_4] +
jmp loc_10665E4  +
fcomp  [ebp+arg_C] +
fnstsw  ax +
test ah 41h +
jnz loc_10665EB  +
fld  [ebp+arg_C] +
call _ftol2  +
jmp locret_10665EE  +
mov eax [ebp+arg_0] +
leave   +
retn 14h  +
***
inc eax  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
lea eax [ebp+arg_4] +
mov esi ecx +
mov ecx dword_108A24C +
push eax  +
call sub_100839D  +
fldz   +
push [ebp+arg_0]  +
fstp  [ebp+var_4] +
and [ebp+var_14] 0 +
and [ebp+var_8] 0 +
lea eax [esi+0Ch] +
mov ecx esi +
mov [ebp+var_10] eax +
call sub_100BFCD  +
mov ecx [esi+4] +
lea edx [ebp+var_14] +
push edx  +
lea edx [ebp+arg_4] +
mov [ebp+var_C] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+64h]  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+arg_8] +
mov edi ecx +
mov ecx dword_108A24C +
push eax  +
call sub_100839D  +
mov esi [edi+4] +
mov ebx [esi] +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
mov ecx edi +
push [ebp+arg_0]  +
call sub_100BFCD  +
push eax  +
mov ecx esi +
call dword ptr [ebx+48h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
mov [ebp+var_8] ecx +
mov ecx dword_108A24C +
push eax  +
call sub_100839D  +
push [ebp+arg_4]  +
mov ecx [esi+4] +
mov eax [ecx] +
lea edx [ebp+var_8] +
push edx  +
call dword ptr [eax+50h]  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
mov [ebp+var_8] ecx +
mov ecx dword_108A24C +
push eax  +
call sub_100839D  +
push [ebp+arg_4]  +
mov ecx [esi+4] +
mov eax [ecx] +
lea edx [ebp+var_8] +
push edx  +
call dword ptr [eax+54h]  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
mov [ebp+var_8] ecx +
mov ecx dword_108A24C +
push eax  +
call sub_100839D  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_100CA00  +
test al al +
jz loc_106675C  +
push [ebp+arg_4]  +
mov ecx [esi+4] +
mov eax [ecx] +
lea edx [ebp+var_8] +
push edx  +
call dword ptr [eax+58h]  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+5Ch]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+60h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
mov [ebp+var_8] ecx +
mov ecx dword_108A24C +
push eax  +
call sub_100839D  +
push [ebp+arg_4]  +
mov ecx [esi+4] +
mov eax [ecx] +
lea edx [ebp+var_8] +
push edx  +
call dword ptr [eax+64h]  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
mov [ebp+var_8] ecx +
mov ecx dword_108A24C +
push eax  +
call sub_100839D  +
push [ebp+arg_C]  +
mov ecx [esi+4] +
push [ebp+arg_8]  +
mov eax [ecx] +
push [ebp+arg_4]  +
lea edx [ebp+var_8] +
push edx  +
call dword ptr [eax+68h]  +
pop esi  +
leave   +
retn 10h  +
***
cmp dword ptr [ecx+10h] 0 +
jz locret_1066833  +
mov ecx [ecx+10h] +
mov eax [ecx] +
call dword ptr [eax+40h]  +
test eax eax +
jz locret_1066833  +
mov eax dword_108A24C +
push 0  +
push dword ptr [eax+40h]  +
call sub_1005D16  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push offset off_108D3E8  +
mov esi offset off_108CEAC +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov edi ecx +
mov [ebp-1] bl +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_106686C  +
mov eax [eax+8] +
mov eax [eax] +
jmp loc_1066886  +
push ebx  +
push offset off_108CF38  +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_106688F  +
mov eax [eax+8] +
mov ecx [edi+8] +
mov byte ptr [ebp-1] 1 +
mov [ecx] eax +
mov al [ebp-1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push offset off_108D3E8  +
mov esi offset off_108CEAC +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov edi ecx +
mov [ebp-1] bl +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_10668D6  +
mov ecx [edi+8] +
mov eax [eax+8] +
mov ecx [ecx] +
mov [eax] ecx +
jmp loc_10668F5  +
push ebx  +
push offset off_108CF38  +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_10668F9  +
mov ecx [edi+8] +
mov ecx [ecx] +
mov [eax+8] ecx +
mov byte ptr [ebp-1] 1 +
mov al [ebp-1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_100208C  +
mov esi offset unk_108AF60 +
push 1  +
mov ecx esi +
call sub_1006359  +
mov edi eax +
test edi edi +
jz loc_1066975  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push 1  +
mov ecx esi +
call sub_10561AD  +
test al al +
jz loc_1066975  +
fld  qword ptr [ebp-14h] +
sub esp 10h +
fstp  [esp+20h+var_18] +
fld  qword ptr [ebp-1Ch] +
fstp  [esp+20h+var_20] +
push dword ptr [ebp+8]  +
call sub_10665AE  +
mov dword ptr [ebp-24h] 3 +
mov dword ptr [ebp-28h] offset off_1006E84 +
mov [ebp-20h] eax +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_1035687  +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi offset unk_108AF60 +
push 2  +
mov ecx esi +
call sub_1006359  +
mov edi eax +
test edi edi +
jz loc_10669EF  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push 2  +
mov ecx esi +
call sub_10561AD  +
test al al +
jz loc_10669EF  +
fld  qword ptr [ebp-14h] +
sub esp 10h +
fstp  [esp+20h+var_18] +
fld  qword ptr [ebp-1Ch] +
fstp  [esp+20h+var_20] +
push dword ptr [ebp+8]  +
call sub_10665AE  +
mov dword ptr [ebp-24h] 3 +
mov dword ptr [ebp-28h] offset off_1006E84 +
mov [ebp-20h] eax +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_1035687  +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi offset unk_108AF60 +
push 3  +
mov ecx esi +
call sub_1006359  +
mov ebx eax +
test ebx ebx +
jz loc_1066A69  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push 3  +
mov ecx esi +
call sub_10561AD  +
test al al +
jz loc_1066A69  +
fld  qword ptr [ebp-14h] +
sub esp 10h +
fstp  [esp+20h+var_18] +
fld  qword ptr [ebp-1Ch] +
fstp  [esp+20h+var_20] +
push dword ptr [ebp+8]  +
call sub_10665AE  +
mov dword ptr [ebp-24h] 3 +
mov dword ptr [ebp-28h] offset off_1006E84 +
mov [ebp-20h] eax +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
mov ecx ebx +
call sub_1035687  +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi offset unk_108AF60 +
push 4  +
mov ecx esi +
call sub_1006359  +
mov edi eax +
test edi edi +
jz loc_1066AE3  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push 4  +
mov ecx esi +
call sub_10561AD  +
test al al +
jz loc_1066AE3  +
fld  qword ptr [ebp-14h] +
sub esp 10h +
fstp  [esp+20h+var_18] +
fld  qword ptr [ebp-1Ch] +
fstp  [esp+20h+var_20] +
push dword ptr [ebp+8]  +
call sub_10665AE  +
mov dword ptr [ebp-24h] 3 +
mov dword ptr [ebp-28h] offset off_1006E84 +
mov [ebp-20h] eax +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_1035687  +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi offset unk_108AF60 +
push 5  +
mov ecx esi +
call sub_1006359  +
mov edi eax +
test edi edi +
jz loc_1066B5D  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push 5  +
mov ecx esi +
call sub_10561AD  +
test al al +
jz loc_1066B5D  +
fld  qword ptr [ebp-14h] +
sub esp 10h +
fstp  [esp+20h+var_18] +
fld  qword ptr [ebp-1Ch] +
fstp  [esp+20h+var_20] +
push dword ptr [ebp+8]  +
call sub_10665AE  +
mov dword ptr [ebp-24h] 3 +
mov dword ptr [ebp-28h] offset off_1006E84 +
mov [ebp-20h] eax +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_1035687  +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi offset unk_108AF60 +
push 6  +
mov ecx esi +
call sub_1006359  +
mov edi eax +
test edi edi +
jz loc_1066BD7  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push 6  +
mov ecx esi +
call sub_10561AD  +
test al al +
jz loc_1066BD7  +
fld  qword ptr [ebp-14h] +
sub esp 10h +
fstp  [esp+20h+var_18] +
fld  qword ptr [ebp-1Ch] +
fstp  [esp+20h+var_20] +
push dword ptr [ebp+8]  +
call sub_10665AE  +
mov dword ptr [ebp-24h] 3 +
mov dword ptr [ebp-28h] offset off_1006E84 +
mov [ebp-20h] eax +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_1035687  +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi offset unk_108AF60 +
push 7  +
mov ecx esi +
call sub_1006359  +
mov edi eax +
test edi edi +
jz loc_1066C51  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push 7  +
mov ecx esi +
call sub_10561AD  +
test al al +
jz loc_1066C51  +
fld  qword ptr [ebp-14h] +
sub esp 10h +
fstp  [esp+20h+var_18] +
fld  qword ptr [ebp-1Ch] +
fstp  [esp+20h+var_20] +
push dword ptr [ebp+8]  +
call sub_10665AE  +
mov dword ptr [ebp-24h] 3 +
mov dword ptr [ebp-28h] offset off_1006E84 +
mov [ebp-20h] eax +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_1035687  +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi offset unk_108AF60 +
push 8  +
mov ecx esi +
call sub_1006359  +
mov edi eax +
test edi edi +
jz loc_1066CCB  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push 8  +
mov ecx esi +
call sub_10561AD  +
test al al +
jz loc_1066CCB  +
fld  qword ptr [ebp-14h] +
sub esp 10h +
fstp  [esp+20h+var_18] +
fld  qword ptr [ebp-1Ch] +
fstp  [esp+20h+var_20] +
push dword ptr [ebp+8]  +
call sub_10665AE  +
mov dword ptr [ebp-24h] 3 +
mov dword ptr [ebp-28h] offset off_1006E84 +
mov [ebp-20h] eax +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_1035687  +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov esi offset unk_108AF60 +
push 9  +
mov ecx esi +
call sub_1006359  +
mov edi eax +
test edi edi +
jz loc_1066D45  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push 9  +
mov ecx esi +
call sub_10561AD  +
test al al +
jz loc_1066D45  +
fld  qword ptr [ebp-14h] +
sub esp 10h +
fstp  [esp+20h+var_18] +
fld  qword ptr [ebp-1Ch] +
fstp  [esp+20h+var_20] +
push dword ptr [ebp+8]  +
call sub_10665AE  +
mov dword ptr [ebp-24h] 3 +
mov dword ptr [ebp-28h] offset off_1006E84 +
mov [ebp-20h] eax +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_1035687  +
call sub_1002061  +
retn 4  +
***
mov eax offset byte_107F36C +
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
push 1  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
test eax eax +
jz loc_1066D95  +
lea ecx [ebp-10h] +
mov dword ptr [ebp-18h] 3 +
mov dword ptr [ebp-1Ch] offset off_100CBBC +
mov [ebp-14h] ecx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1005BE0  +
mov eax [ebp-10h] +
call sub_1002061  +
retn   +
***
adc ds:byte_107F36C[eax] bh +
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
push 2  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
test eax eax +
jz loc_1066DE6  +
lea ecx [ebp-10h] +
mov dword ptr [ebp-18h] 3 +
mov dword ptr [ebp-1Ch] offset off_100CBBC +
mov [ebp-14h] ecx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1005BE0  +
mov eax [ebp-10h] +
call sub_1002061  +
retn   +
***
push 10h  +
mov eax offset byte_107F36C +
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
push 3  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
test eax eax +
jz loc_1066E37  +
lea ecx [ebp-10h] +
mov dword ptr [ebp-18h] 3 +
mov dword ptr [ebp-1Ch] offset off_100CBBC +
mov [ebp-14h] ecx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1005BE0  +
mov eax [ebp-10h] +
call sub_1002061  +
retn   +
***
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
push 4  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
test eax eax +
jz loc_1066E88  +
lea ecx [ebp-10h] +
mov dword ptr [ebp-18h] 3 +
mov dword ptr [ebp-1Ch] offset off_100CBBC +
mov [ebp-14h] ecx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1005BE0  +
mov eax [ebp-10h] +
call sub_1002061  +
retn   +
***
mov eax offset byte_107F36C +
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
push 5  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
test eax eax +
jz loc_1066ED9  +
lea ecx [ebp-10h] +
mov dword ptr [ebp-18h] 3 +
mov dword ptr [ebp-1Ch] offset off_100CBBC +
mov [ebp-14h] ecx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1005BE0  +
mov eax [ebp-10h] +
call sub_1002061  +
retn   +
***
adc ds:byte_107F36C[eax] bh +
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
push 6  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
test eax eax +
jz loc_1066F2A  +
lea ecx [ebp-10h] +
mov dword ptr [ebp-18h] 3 +
mov dword ptr [ebp-1Ch] offset off_100CBBC +
mov [ebp-14h] ecx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1005BE0  +
mov eax [ebp-10h] +
call sub_1002061  +
retn   +
***
push 10h  +
mov eax offset byte_107F36C +
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
push 7  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
test eax eax +
jz loc_1066F7B  +
lea ecx [ebp-10h] +
mov dword ptr [ebp-18h] 3 +
mov dword ptr [ebp-1Ch] offset off_100CBBC +
mov [ebp-14h] ecx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1005BE0  +
mov eax [ebp-10h] +
call sub_1002061  +
retn   +
***
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
push 8  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
test eax eax +
jz loc_1066FCC  +
lea ecx [ebp-10h] +
mov dword ptr [ebp-18h] 3 +
mov dword ptr [ebp-1Ch] offset off_100CBBC +
mov [ebp-14h] ecx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1005BE0  +
mov eax [ebp-10h] +
call sub_1002061  +
retn   +
***
mov eax offset byte_107F36C +
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
push 9  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
test eax eax +
jz loc_106701D  +
lea ecx [ebp-10h] +
mov dword ptr [ebp-18h] 3 +
mov dword ptr [ebp-1Ch] offset off_100CBBC +
mov [ebp-14h] ecx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1005BE0  +
mov eax [ebp-10h] +
call sub_1002061  +
retn   +
***
call sub_100208C  +
push 1Fh  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
test eax eax +
jz loc_106706A  +
mov ecx [ebp+8] +
mov dword ptr [ebp-14h] 7 +
mov dword ptr [ebp-18h] offset off_100B560 +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-18h] +
push ecx  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
push 20h  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
test eax eax +
jz loc_10670B6  +
mov ecx [ebp+8] +
mov dword ptr [ebp-14h] 7 +
mov dword ptr [ebp-18h] offset off_100B560 +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-18h] +
push ecx  +
mov ecx eax +
call sub_1035687  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_0] +
mov [ecx+10h] al +
call sub_100BE03  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 0Ch  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1067102  +
mov ecx [esi+8] +
mov dword ptr [eax+4] 3 +
mov dword ptr [eax] offset off_100CBBC +
mov [eax+8] ecx +
pop esi  +
retn   +
***
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
mov esi ecx +
mov ecx [esi+20h] +
mov eax [ecx] +
push edi  +
push dword ptr [ebp+8]  +
call dword ptr [eax+20h]  +
mov eax [edi+8] +
and eax 8 +
mov [esi+6Ch] eax +
add esi 0FFFFFFF8h +
mov ecx esi +
call sub_100A5AF  +
push 0  +
mov ecx esi +
call sub_1008489  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
mov esi ecx +
mov ecx [esi+20h] +
mov eax [ecx] +
push edi  +
push dword ptr [ebp+8]  +
call dword ptr [eax+24h]  +
mov eax [edi+8] +
and eax 8 +
mov [esi+6Ch] eax +
add esi 0FFFFFFF8h +
mov ecx esi +
call sub_100A5AF  +
push 0  +
mov ecx esi +
call sub_1008489  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
mov esi ecx +
mov ecx [esi+20h] +
mov eax [ecx] +
push edi  +
push dword ptr [ebp+8]  +
call dword ptr [eax+28h]  +
mov eax [edi+8] +
and eax 8 +
mov [esi+6Ch] eax +
add esi 0FFFFFFF8h +
mov ecx esi +
call sub_100A5AF  +
push 0  +
mov ecx esi +
call sub_1008489  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
mov esi ecx +
mov ecx [esi+20h] +
mov eax [ecx] +
push edi  +
push dword ptr [ebp+8]  +
call dword ptr [eax+34h]  +
mov eax [edi+8] +
and eax 8 +
mov [esi+6Ch] eax +
add esi 0FFFFFFF8h +
mov ecx esi +
call sub_100A5AF  +
push 0  +
mov ecx esi +
call sub_1008489  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi-8] +
call sub_100A5AF  +
mov ecx [esi+20h] +
mov eax [ecx] +
pop esi  +
pop ebp  +
jmp dword ptr [eax+38h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
mov ecx [esi+20h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+2Ch]  +
mov eax [edi+8] +
and eax 8 +
mov [esi+6Ch] eax +
add esi 0FFFFFFF8h +
mov ecx esi +
call sub_100A5AF  +
push 0  +
mov ecx esi +
call sub_1008489  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
mov ecx [esi+20h] +
mov eax [ecx] +
call dword ptr [eax+30h]  +
and dword ptr [esi+6Ch] 0 +
add esi 0FFFFFFF8h +
mov ecx esi +
call sub_100A5AF  +
push 0  +
mov ecx esi +
call sub_1008489  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ecx+8]  +
mov ecx [ebp+8] +
call sub_105B1C9  +
pop ebp  +
retn 4  +
***
mov eax offset off_10672B8 +
retn   +
***
jmp loc_1066DF4  +
***
mov ecx offset unk_108B074 +
jmp loc_1066F38  +
***
mov ecx offset unk_108B074 +
call sub_1066531  +
retn 4  +
***
mov ecx offset unk_108B074 +
call sub_10664D8  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
dec eax  +
jz loc_10673C6  +
dec eax  +
jz loc_10673BA  +
dec eax  +
jz loc_10673AC  +
dec eax  +
jnz loc_10673D0  +
push 10Eh  +
jmp loc_10673AE  +
push 5Ah  +
mov ecx offset unk_108B074 +
call sub_1066514  +
jmp loc_10673D0  +
mov ecx offset unk_108B074 +
call sub_1066500  +
jmp loc_10673D0  +
mov ecx offset unk_108B074 +
call sub_10664EC  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset unk_108B074 +
pop ebp  +
jmp loc_106655A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push 4  +
lea eax [ebp+arg_C] +
mov [ebp+var_20] eax +
pop eax  +
mov [ebp+var_18] eax +
mov [ebp+var_8] eax +
lea eax [ebp+var_20] +
push eax  +
push 2  +
push [ebp+arg_8]  +
xor ecx ecx +
push [ebp+arg_4]  +
lea edx [ebp+arg_10] +
push [ebp+arg_0]  +
mov [ebp+var_1C] ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_10] edx +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ecx +
call ds:EventWrite  +
leave   +
retn 14h  +
***
xor eax eax +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_108BC04 0 +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
jz loc_10674BA  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_1067475  +
test al al +
jnz loc_10674BA  +
mov ecx dword_108BBF4 +
mov edx 40000000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_10674BA  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax edx +
xor edx edx +
cmp edx dword_108BBF8 +
jnz loc_10674BA  +
cmp eax ecx +
jnz loc_10674BA  +
push edi  +
push dword ptr [esi+40h]  +
push offset dword_1067570  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1067400  +
mov eax [esi+40h] +
mov ecx 290h +
mov [esi+34h] edi +
cmp eax ecx +
ja loc_106752A  +
jz loc_106751D  +
cmp eax 260h +
jz loc_1067510  +
add ecx 0FFFFFFFBh +
cmp eax ecx +
jz loc_1067503  +
jbe loc_1067537  +
cmp eax 28Dh +
jbe loc_10674F6  +
cmp eax 28Fh +
jnz loc_1067537  +
push edi  +
mov ecx offset unk_108B074 +
call sub_1066AF0  +
jmp loc_1067569  +
push edi  +
mov ecx offset unk_108B074 +
call sub_1066A76  +
jmp loc_1067569  +
push edi  +
mov ecx offset unk_108B074 +
call sub_1066982  +
jmp loc_1067569  +
push edi  +
mov ecx offset unk_108B074 +
call sub_10669FC  +
jmp loc_1067569  +
push edi  +
mov ecx offset unk_108B074 +
call sub_1066B6A  +
jmp loc_1067569  +
sub eax 291h +
jz loc_106755E  +
dec eax  +
jz loc_1067551  +
dec eax  +
jz loc_1067544  +
push edi  +
mov ecx offset unk_108B074 +
call sub_1066908  +
jmp loc_1067569  +
push edi  +
mov ecx offset unk_108B074 +
call sub_1066C5E  +
jmp loc_1067569  +
push edi  +
mov ecx offset unk_108B074 +
call sub_1066BE4  +
jmp loc_1067569  +
push edi  +
mov ecx offset unk_108B074 +
call sub_1066CD8  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
jmp loc_10675BC  +
mov ecx [ebp+arg_4] +
lea eax [esi+0Ch] +
push eax  +
mov ebx esi +
call sub_102E11A  +
mov byte ptr [ebp+var_8] al +
test al al +
jz loc_10675B9  +
mov esi [esi] +
jmp loc_10675BC  +
mov esi [esi+8] +
cmp byte ptr [esi+1Dh] 0 +
jz loc_10675A0  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_10675FB  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_10675F0  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_102551A  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
jmp loc_106761C  +
lea ecx [ebp+var_4] +
call sub_10255DD  +
mov esi [ebp+var_4] +
push [ebp+arg_4]  +
lea ecx [esi+0Ch] +
call sub_102E11A  +
test al al +
jz loc_1067613  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_10675D8  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+4] +
cmp byte ptr [eax+15h] 0 +
push edi  +
mov edi ecx +
mov byte ptr [ebp+var_4] 1 +
jnz loc_1067666  +
mov ecx [ebx] +
cmp ecx [eax+0Ch] +
mov edi eax +
setl byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jz loc_106765D  +
mov eax [eax] +
jmp loc_1067660  +
mov eax [eax+8] +
cmp byte ptr [eax+15h] 0 +
jz loc_106764A  +
cmp byte ptr [ebp+var_4] 0 +
mov ecx edi +
mov [ebp+arg_4] ecx +
jz loc_106769D  +
mov eax [esi+4] +
cmp edi [eax] +
jnz loc_1067692  +
push ebx  +
push edi  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_100C4A1  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
jmp loc_10676B2  +
lea ecx [ebp+arg_4] +
call sub_101441C  +
mov ecx [ebp+arg_4] +
mov eax [ecx+0Ch] +
cmp eax [ebx] +
jge loc_10676AB  +
push ebx  +
push edi  +
push [ebp+var_4]  +
jmp loc_106767C  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+14h] +
mov eax [ebp+arg_0] +
mov [edx] eax +
mov edx [ecx+24h] +
mov [edx] eax +
mov edx [ebp+arg_4] +
sub edx eax +
mov eax [ecx+34h] +
sar edx 1 +
mov [eax] edx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push esi  +
mov dword ptr [esi] offset off_101CD98 +
call sub_101DA19  +
test byte ptr [ebp+8] 1 +
pop ecx  +
jz loc_1067709  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov dword ptr [ecx] offset off_101CD98 +
call sub_101DA19  +
pop ecx  +
retn   +
***
retn   +
***
lea eax [ecx+4] +
mov ecx [eax-4] +
mov ecx [ecx+4] +
mov dword ptr [eax+ecx-4] offset off_101CDEC +
push eax  +
mov dword ptr [eax] offset off_101CD98 +
call sub_101DA19  +
pop ecx  +
retn   +
***
lea eax [ecx+8] +
mov ecx [eax-8] +
mov ecx [ecx+4] +
mov dword ptr [eax+ecx-8] offset off_101CEB8 +
push eax  +
mov dword ptr [eax] offset off_101CD98 +
call sub_101DA19  +
pop ecx  +
retn   +
***
mov eax 0FFFFh +
retn 4  +
***
retn   +
***
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+10h]  +
mov ecx 0FFFFh +
mov edx ecx +
cmp dx ax +
jnz loc_10677D6  +
mov eax ecx +
pop esi  +
retn   +
mov eax [esi+30h] +
dec dword ptr [eax]  +
mov eax [esi+20h] +
mov ecx [eax] +
lea edx [ecx+2] +
mov [eax] edx +
movzx eax word ptr [ecx] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
or dword ptr [eax] 0FFFFFFFFh +
xor ecx ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
or dword ptr [eax] 0FFFFFFFFh +
xor ecx ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea esi [ecx-4] +
mov ecx esi +
call sub_1067752  +
test byte ptr [ebp+8] 1 +
jz loc_106784A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101C665  +
test byte ptr [ebp+8] 1 +
jz loc_1067870  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea esi [ecx-8] +
mov ecx esi +
call sub_1067776  +
test byte ptr [ebp+8] 1 +
jz loc_1067899  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
mov ecx 0FFFFh +
cmp ax cx +
jz loc_10678BF  +
movzx eax ax +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+20h] +
mov edx [eax] +
push esi  +
mov eax 0FFFFh +
test edx edx +
jz loc_106791E  +
mov esi [ecx+10h] +
cmp edx [esi] +
jbe loc_106791E  +
mov si [ebp+8] +
push edi  +
mov edi eax +
cmp di si +
pop edi  +
jz loc_10678FC  +
cmp si [edx-2] +
jz loc_10678FC  +
test byte ptr [ecx+40h] 2 +
jnz loc_106791E  +
mov edx [ecx+30h] +
inc dword ptr [edx]  +
mov edx [ecx+20h] +
add dword ptr [edx] 0FFFFFFFEh +
cmp ax si +
jz loc_1067914  +
mov eax [ecx+20h] +
mov eax [eax] +
mov [eax] si +
lea eax [ebp+8] +
push eax  +
call sub_10678A5  +
pop ecx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+24h] +
mov eax [edx] +
test eax eax +
jz loc_106793E  +
cmp [ecx+3Ch] eax +
jnb loc_106793E  +
mov [ecx+3Ch] eax +
push ebx  +
mov bl [ebp+arg_C] +
push esi  +
push edi  +
test bl 1 +
jz loc_10679E5  +
mov eax [ecx+20h] +
mov esi [eax] +
test esi esi +
jz loc_10679E5  +
cmp [ebp+arg_8] 2 +
jnz loc_1067965  +
mov edx [ecx+3Ch] +
jmp loc_1067972  +
cmp [ebp+arg_8] 1 +
jnz loc_106797E  +
test bl 2 +
jnz loc_1067984  +
mov edx esi +
mov eax [ecx+10h] +
sub edx [eax] +
sar edx 1 +
add [ebp+arg_4] edx +
jmp loc_1067988  +
cmp [ebp+arg_8] 0 +
jz loc_1067988  +
or [ebp+arg_4] 0FFFFFFFFh +
mov edi [ebp+arg_4] +
test edi edi +
jl loc_1067A44  +
mov eax [ecx+10h] +
mov eax [eax] +
mov edx [ecx+3Ch] +
sub edx eax +
sar edx 1 +
cmp edi edx +
jg loc_1067A44  +
mov edx [ecx+30h] +
sub eax esi +
sar eax 1 +
add eax edi +
sub [edx] eax +
mov edx [ecx+20h] +
add eax eax +
add [edx] eax +
test bl 2 +
jz loc_1067A47  +
mov eax [ecx+24h] +
mov eax [eax] +
test eax eax +
jz loc_1067A47  +
mov edx [ecx+34h] +
mov edx [edx] +
lea eax [eax+edx*2] +
push eax  +
mov eax [ecx+20h] +
push dword ptr [eax]  +
mov eax [ecx+14h] +
push dword ptr [eax]  +
call sub_102CCFF  +
jmp loc_1067A47  +
test bl 2 +
jz loc_1067A44  +
mov edx [edx] +
test edx edx +
jz loc_1067A44  +
cmp [ebp+arg_8] 2 +
jnz loc_10679FB  +
mov esi [ecx+3Ch] +
jmp loc_1067A03  +
cmp [ebp+arg_8] 1 +
jnz loc_1067A0F  +
mov esi edx +
mov eax [ecx+10h] +
sub esi [eax] +
sar esi 1 +
add [ebp+arg_4] esi +
jmp loc_1067A19  +
cmp [ebp+arg_8] 0 +
jz loc_1067A19  +
or [ebp+arg_4] 0FFFFFFFFh +
mov edi [ebp+arg_4] +
test edi edi +
jl loc_1067A44  +
mov eax [ecx+10h] +
mov eax [eax] +
mov esi [ecx+3Ch] +
sub esi eax +
sar esi 1 +
cmp edi esi +
jg loc_1067A44  +
sub eax edx +
mov edx [ecx+34h] +
sar eax 1 +
add eax edi +
sub [edx] eax +
mov ecx [ecx+24h] +
add eax eax +
add [ecx] eax +
jmp loc_1067A47  +
or edi 0FFFFFFFFh +
mov eax [ebp+arg_0] +
mov [eax] edi +
pop edi  +
xor ecx ecx +
pop esi  +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_C] +
push esi  +
lea esi [edx+eax] +
mov eax [ecx+24h] +
mov edx [eax] +
test edx edx +
jz loc_1067A83  +
cmp [ecx+3Ch] edx +
jnb loc_1067A83  +
mov [ecx+3Ch] edx +
cmp esi 0FFFFFFFFh +
jz loc_1067B23  +
test [ebp+arg_1C] 1 +
push ebx  +
jz loc_1067AEB  +
mov edx [ecx+20h] +
mov edx [edx] +
test edx edx +
jz loc_1067AEB  +
test esi esi +
jl loc_1067B1F  +
mov eax [ecx+10h] +
mov eax [eax] +
mov ebx [ecx+3Ch] +
sub ebx eax +
sar ebx 1 +
cmp esi ebx +
jg loc_1067B1F  +
sub eax edx +
mov edx [ecx+30h] +
sar eax 1 +
add eax esi +
sub [edx] eax +
mov edx [ecx+20h] +
add eax eax +
add [edx] eax +
test [ebp+arg_1C] 2 +
jz loc_1067B22  +
mov eax [ecx+24h] +
mov eax [eax] +
test eax eax +
jz loc_1067B22  +
mov edx [ecx+34h] +
mov edx [edx] +
lea eax [eax+edx*2] +
push eax  +
mov eax [ecx+20h] +
push dword ptr [eax]  +
mov eax [ecx+14h] +
push dword ptr [eax]  +
call sub_102CCFF  +
jmp loc_1067B22  +
test [ebp+arg_1C] 2 +
jz loc_1067B1F  +
mov edx [eax] +
test edx edx +
jz loc_1067B1F  +
test esi esi +
jl loc_1067B1F  +
mov eax [ecx+10h] +
mov eax [eax] +
mov ebx [ecx+3Ch] +
sub ebx eax +
sar ebx 1 +
cmp esi ebx +
jg loc_1067B1F  +
sub eax edx +
mov edx [ecx+34h] +
sar eax 1 +
add eax esi +
sub [edx] eax +
mov ecx [ecx+24h] +
add eax eax +
add [ecx] eax +
jmp loc_1067B22  +
or esi 0FFFFFFFFh +
pop ebx  +
mov eax [ebp+arg_0] +
xor ecx ecx +
mov [eax] esi +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
pop esi  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
test byte ptr [esi+40h] 8 +
jz loc_1067B72  +
mov eax [esi+24h] +
mov eax [eax] +
test eax eax +
jz loc_1067B72  +
mov ecx [esi+3Ch] +
cmp eax ecx +
jnb loc_1067B72  +
mov edx [esi+34h] +
mov edx [edx] +
lea eax [eax+edx*2] +
push eax  +
mov eax [esi+14h] +
push ecx  +
push dword ptr [eax]  +
mov ecx esi +
call sub_102CCFF  +
mov ax [ebp+8] +
mov ecx 0FFFFh +
cmp cx ax +
jnz loc_1067B8F  +
lea eax [ebp+8] +
push eax  +
call sub_10678A5  +
pop ecx  +
jmp loc_1067CEF  +
mov edx [esi+24h] +
push ebx  +
push edi  +
mov edi [edx] +
test edi edi +
jz loc_1067BB9  +
mov ecx [esi+34h] +
mov ebx [ecx] +
mov edx edi +
lea ebx [edx+ebx*2] +
cmp edx ebx +
jnb loc_1067BB9  +
dec dword ptr [ecx]  +
mov esi [esi+24h] +
mov ecx [esi] +
lea edx [ecx+2] +
mov [esi] edx +
jmp loc_1067CEA  +
test byte ptr [esi+40h] 2 +
jz loc_1067BC9  +
mov eax 0FFFFh +
jmp loc_1067CED  +
test edi edi +
jnz loc_1067BD1  +
xor ebx ebx +
jmp loc_1067BE1  +
mov eax [esi+34h] +
mov ebx [eax] +
mov eax [esi+10h] +
add ebx ebx +
sub ebx [eax] +
add ebx edi +
sar ebx 1 +
mov eax ebx +
shr eax 1 +
mov [ebp-4] ebx +
cmp eax 20h +
jnb loc_1067BF0  +
push 20h  +
pop eax  +
xor edi edi +
test eax eax +
jbe loc_1067C18  +
mov ecx 7FFFFFFFh +
sub ecx eax +
cmp ecx ebx +
jnb loc_1067C05  +
shr eax 1 +
jnz loc_1067BF6  +
test eax eax +
jbe loc_1067C18  +
add eax ebx +
push 0  +
push eax  +
mov [ebp-4] eax +
call sub_101428F  +
mov edi eax +
test ebx ebx +
jbe loc_1067C2B  +
mov eax [esi+10h] +
push ebx  +
push dword ptr [eax]  +
push dword ptr [ebp-4]  +
push edi  +
call sub_1014379  +
test byte ptr [esi+40h] 1 +
jz loc_1067C3C  +
mov eax [esi+10h] +
push dword ptr [eax]  +
call ??3@YAXPAX@Z  +
pop ecx  +
or dword ptr [esi+40h] 1 +
test ebx ebx +
jnz loc_1067C63  +
mov eax [ebp-4] +
lea eax [edi+eax*2] +
push eax  +
push edi  +
mov ecx esi +
mov [esi+3Ch] edi +
call sub_10676C0  +
test byte ptr [esi+40h] 4 +
jnz loc_1067CA3  +
lea eax [edi+2] +
push eax  +
push edi  +
jmp loc_1067CCF  +
mov eax [esi+10h] +
mov ecx [esi+3Ch] +
sub ecx [eax] +
sar ecx 1 +
lea ecx [edi+ecx*2] +
mov [esi+3Ch] ecx +
mov ecx [ebp-4] +
mov eax [eax] +
lea ecx [edi+ecx*2] +
push ecx  +
mov ecx [esi+24h] +
mov ecx [ecx] +
sub ecx eax +
sar ecx 1 +
lea ecx [edi+ecx*2] +
push ecx  +
mov ecx [esi+14h] +
mov ecx [ecx] +
sub ecx eax +
sar ecx 1 +
lea eax [edi+ecx*2] +
push eax  +
mov ecx esi +
call sub_102CCFF  +
test byte ptr [esi+40h] 4 +
jz loc_1067CB7  +
mov eax [esi+10h] +
mov [eax] edi +
mov eax [esi+20h] +
and dword ptr [eax] 0 +
mov eax [esi+30h] +
sar edi 1 +
mov [eax] edi +
jmp loc_1067CD7  +
mov eax [esi+24h] +
mov eax [eax] +
mov ecx [esi+10h] +
inc eax  +
inc eax  +
push eax  +
mov eax [esi+20h] +
mov eax [eax] +
sub eax [ecx] +
sar eax 1 +
lea eax [edi+eax*2] +
push eax  +
push edi  +
mov ecx esi +
call sub_102CCD5  +
mov eax [esi+34h] +
dec dword ptr [eax]  +
mov esi [esi+24h] +
mov ecx [esi] +
lea eax [ecx+2] +
mov [esi] eax +
mov ax [ebp+8] +
mov [ecx] ax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov eax [ecx-4Ch] +
mov eax [eax+4] +
mov dword ptr [eax+ecx-4Ch] offset off_104A91C +
and dword ptr [ebp-4] 0 +
lea esi [ecx-48h] +
mov ecx esi +
call sub_101C64D  +
mov eax [esi-4] +
mov eax [eax+4] +
mov dword ptr [eax+esi-4] offset off_101CDEC +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101C64D  +
test byte ptr [ebp+8] 1 +
jz loc_1067D57  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi ecx +
jle loc_1067DE0  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov eax [edi+24h] +
cmp dword ptr [eax] 0 +
jz loc_1067D8A  +
mov ecx [edi+34h] +
mov ecx [ecx] +
jmp loc_1067D8C  +
xor ecx ecx +
test ecx ecx +
jle loc_1067DBB  +
cmp [ebp+arg_4] ecx +
mov esi ecx +
jge loc_1067D9A  +
mov esi [ebp+arg_4] +
push esi  +
push ebx  +
push ecx  +
push dword ptr [eax]  +
call sub_1014379  +
mov eax [edi+34h] +
sub [eax] esi +
mov eax [edi+24h] +
add [ebp+var_4] esi +
sub [ebp+arg_4] esi +
lea ecx [esi+esi] +
add ebx ecx +
add [eax] ecx +
jmp loc_1067DD8  +
movzx eax word ptr [ebx] +
mov edx [edi] +
push eax  +
mov ecx edi +
call dword ptr [edx+4]  +
mov ecx 0FFFFh +
cmp cx ax +
jz loc_1067DDE  +
inc ebx  +
inc ebx  +
inc [ebp+var_4]  +
dec [ebp+arg_4]  +
cmp [ebp+arg_4] 0 +
jg loc_1067D7B  +
pop esi  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_8] 0 +
push edi  +
mov edi ecx +
jle loc_1067E6C  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov eax [edi+20h] +
cmp dword ptr [eax] 0 +
jz loc_1067E14  +
mov ecx [edi+30h] +
mov esi [ecx] +
jmp loc_1067E16  +
xor esi esi +
test esi esi +
jle loc_1067E45  +
cmp [ebp+arg_8] esi +
jge loc_1067E22  +
mov esi [ebp+arg_8] +
push esi  +
push dword ptr [eax]  +
push [ebp+arg_4]  +
push ebx  +
call sub_1014379  +
mov eax [edi+30h] +
sub [eax] esi +
mov eax [edi+20h] +
add [ebp+var_4] esi +
sub [ebp+arg_8] esi +
lea ecx [esi+esi] +
add ebx ecx +
add [eax] ecx +
jmp loc_1067E64  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+14h]  +
movzx eax ax +
mov ecx 0FFFFh +
cmp cx ax +
jz loc_1067E6A  +
mov [ebx] ax +
inc ebx  +
inc ebx  +
inc [ebp+var_4]  +
dec [ebp+arg_8]  +
cmp [ebp+arg_8] 0 +
jg loc_1067E05  +
pop esi  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
lea esi [ecx+4Ch] +
mov ecx esi +
call sub_1067CF9  +
push esi  +
mov dword ptr [esi] offset off_101CD98 +
call sub_101DA19  +
pop ecx  +
pop esi  +
retn   +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov eax [ecx-50h] +
mov eax [eax+4] +
mov dword ptr [eax+ecx-50h] offset off_104A938 +
and dword ptr [ebp-4] 0 +
lea esi [ecx-48h] +
mov ecx esi +
call sub_101C64D  +
mov eax [esi-8] +
mov eax [eax+4] +
mov dword ptr [eax+esi-8] offset off_101CEB8 +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea esi [ecx-4Ch] +
mov ecx esi +
call sub_1067E79  +
test byte ptr [ebp+8] 1 +
jz loc_1067EFB  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
call sub_101D52B  +
push dword ptr [ebp+8]  +
and dword ptr [esi+3Ch] 0 +
mov ecx esi +
mov dword ptr [esi] offset off_10088C4 +
call sub_101BAD5  +
mov [esi+40h] eax +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1067DED  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
xor ebx ebx +
call sub_100639D  +
mov eax [ebp+var_4] +
cmp eax [esi+4] +
jz loc_1067F99  +
cmp [eax+18h] ebx +
jz loc_1067F99  +
mov ecx [eax+18h] +
fld  qword ptr [ecx] +
mov ecx [ebp+arg_4] +
fstp  qword ptr [ecx] +
mov eax [eax+18h] +
fld  qword ptr [eax+8] +
mov eax [ebp+arg_8] +
fstp  qword ptr [eax] +
mov bl 1 +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
lea esi [ecx+50h] +
mov ecx esi +
call sub_1067E9A  +
push esi  +
mov dword ptr [esi] offset off_101CD98 +
call sub_101DA19  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea esi [ecx-50h] +
mov ecx esi +
call sub_1067FA6  +
test byte ptr [ebp+8] 1 +
jz loc_1067FE4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1073D2F  +
test [ebp+arg_0] 1 +
jz loc_106800A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_1012FDB  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_101431E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_10020DC  +
mov eax ecx +
mov edx [eax+40h] +
mov esi [ebp+8] +
xor ebx ebx +
mov [ebp-4Ch] ebx +
test dl 2 +
jnz loc_106809B  +
mov ecx [eax+24h] +
cmp [ecx] ebx +
jz loc_106809B  +
mov ecx [ecx] +
mov edx [eax+3Ch] +
cmp edx ecx +
jb loc_1068075  +
mov ecx edx +
mov eax [eax+14h] +
mov eax [eax] +
sub ecx eax +
sar ecx 1 +
push ecx  +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1068016  +
mov [ebp-4] ebx +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call sub_1014F22  +
lea ecx [ebp-2Ch] +
jmp loc_10680EA  +
test dl 4 +
jnz loc_10680CD  +
mov ecx [eax+20h] +
cmp [ecx] ebx +
jz loc_10680CD  +
mov edx [eax+30h] +
mov ecx [ecx] +
mov edx [edx] +
mov eax [eax+10h] +
mov eax [eax] +
lea ecx [ecx+edx*2] +
sub ecx eax +
sar ecx 1 +
push ecx  +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1068016  +
mov dword ptr [ebp-4] 1 +
jmp loc_106808B  +
lea ecx [ebp-48h] +
call sub_101CA24  +
lea eax [ebp-48h] +
push eax  +
mov ecx esi +
mov dword ptr [ebp-4] 2 +
call sub_1014F22  +
lea ecx [ebp-48h] +
push ebx  +
push 1  +
call sub_1012F94  +
mov eax esi +
call sub_1002119  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
add ecx 4 +
call sub_1068045  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+4] +
cmp byte ptr [eax+1Dh] 0 +
push edi  +
mov edi ecx +
mov byte ptr [ebp+var_4] 1 +
jnz loc_1068160  +
mov ecx [ebx] +
cmp ecx [eax+0Ch] +
mov edi eax +
setl byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jz loc_1068157  +
mov eax [eax] +
jmp loc_106815A  +
mov eax [eax+8] +
cmp byte ptr [eax+1Dh] 0 +
jz loc_1068144  +
cmp byte ptr [ebp+var_4] 0 +
mov ecx edi +
mov [ebp+arg_4] ecx +
jz loc_1068197  +
mov eax [esi+4] +
cmp edi [eax] +
jnz loc_106818C  +
push ebx  +
push edi  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_102551A  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
jmp loc_10681AC  +
lea ecx [ebp+arg_4] +
call sub_10255DD  +
mov ecx [ebp+arg_4] +
mov eax [ecx+0Ch] +
cmp eax [ebx] +
jge loc_10681A5  +
push ebx  +
push edi  +
push [ebp+var_4]  +
jmp loc_1068176  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-14h] esi +
xor eax eax +
mov [ebp-10h] eax +
cmp [ebp+14h] eax +
jz loc_10681EC  +
mov dword ptr [esi] offset dword_106821C +
mov dword ptr [esi+8] offset off_101CF14 +
mov [ebp-4] eax +
mov dword ptr [ebp-10h] 1 +
mov ecx [esi] +
mov ecx [ecx+4] +
mov dword ptr [esi+ecx] offset off_101CEB8 +
mov [esi+4] eax +
cmp [ebp+10h] al +
jnz loc_1068212  +
push dword ptr [ebp+0Ch]  +
mov eax [esi] +
mov ecx [eax+4] +
push dword ptr [ebp+8]  +
add ecx esi +
call sub_101C4CE  +
mov eax esi +
call sub_1002061  +
retn 10h  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-14h] esi +
xor edi edi +
xor eax eax +
inc edi  +
mov [ebp-10h] eax +
cmp [ebp+10h] eax +
jz loc_106825A  +
mov dword ptr [esi] offset dword_1068294 +
mov dword ptr [esi+50h] offset off_101CF14 +
mov [ebp-4] eax +
mov [ebp-10h] edi +
push eax  +
push eax  +
push eax  +
lea ebx [esi+8] +
push ebx  +
mov ecx esi +
call sub_10681BA  +
mov eax [esi] +
mov eax [eax+4] +
mov dword ptr [esi+eax] offset off_104A938 +
mov eax [ebp+0Ch] +
or eax edi +
push eax  +
push dword ptr [ebp+8]  +
mov ecx ebx +
mov [ebp-4] edi +
call sub_101D63D  +
mov eax esi +
call sub_1002061  +
retn 0Ch  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-14h] esi +
xor edi edi +
xor eax eax +
inc edi  +
mov [ebp-10h] eax +
cmp [ebp+0Ch] eax +
jz loc_10682D2  +
mov dword ptr [esi] offset dword_101B838 +
mov dword ptr [esi+4Ch] offset off_101CF14 +
mov [ebp-4] eax +
mov [ebp-10h] edi +
push eax  +
push eax  +
lea ebx [esi+4] +
push ebx  +
mov ecx esi +
call sub_101C482  +
mov eax [esi] +
mov eax [eax+4] +
mov dword ptr [esi+eax] offset off_104A91C +
mov eax [ebp+8] +
or eax 2 +
push eax  +
mov ecx ebx +
mov [ebp-4] edi +
call sub_1067F07  +
mov eax esi +
call sub_1002061  +
retn 8  +
***
add [eax-21h] edi +
add al [ecx] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  dword ptr [ecx+18h] +
push ecx  +
push ecx  +
fstp  dword ptr [esp+4] +
add ecx 4 +
fld  dword ptr [ecx+10h] +
fstp  dword ptr [esp] +
push ecx  +
mov ecx [ebp+8] +
call sub_103A801  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+1Ch] +
push eax  +
lea eax [ecx+14h] +
push eax  +
lea eax [ecx+0Ch] +
add ecx 4 +
push eax  +
push ecx  +
mov ecx [ebp+8] +
call sub_106D397  +
pop ebp  +
retn 4  +
***
push 2  +
pop eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 4 +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_106D3FA  +
pop ebp  +
retn 4  +
***
pop eax  +
retn   +
***
push 6  +
pop eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
fld1   +
mov ecx [ebp+arg_0] +
fstp  [ebp+var_4] +
mov edx [eax] +
push esi  +
mov esi [ecx] +
mov [ebp+arg_0] esi +
cmp edx esi +
mov [ebp+arg_4] edx +
pop esi  +
jge loc_10683C5  +
fild  [ebp+arg_4] +
fidiv  [ebp+arg_0] +
fstp  [ebp+var_4] +
mov eax [eax+4] +
mov ecx [ecx+4] +
cmp eax ecx +
mov [ebp+arg_4] eax +
mov [ebp+arg_0] ecx +
jge loc_10683F3  +
fild  [ebp+arg_4] +
fidiv  [ebp+arg_0] +
fstp  [ebp+arg_4] +
fld  [ebp+var_4] +
fld  [ebp+arg_4] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jp loc_10683F3  +
fld  [ebp+arg_4] +
fstp  [ebp+var_4] +
fld  [ebp+var_4] +
leave   +
retn 8  +
***
call sub_100208C  +
lea ecx [ebp-2Ch] +
call ??0CDC@@QAE@XZ  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
mov dword ptr [ebp-14h] offset off_1002208 +
mov edi offset off_100A058 +
mov [ebp-18h] ebx +
mov [ebp-1Ch] edi +
push ebx  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1002292  +
mov esi [ebp+10h] +
push ebx  +
push 1  +
push 1  +
push dword ptr [esi+4]  +
lea ecx [ebp-14h] +
push dword ptr [esi]  +
call sub_1035483  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-1Ch] +
call sub_100A0C1  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_10022BD  +
mov [ebp+10h] eax +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-2Ch] +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
mov [ebp+0Ch] eax +
mov eax [esi+4] +
mov esi [esi] +
push eax  +
push esi  +
push ebx  +
push ebx  +
push dword ptr [ebp-28h]  +
call ds:Rectangle  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-2Ch] +
call sub_10022BD  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-2Ch] +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
lea ecx [ebp-1Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-2Ch] +
call ?DeleteDC@CDC@@QAEHXZ  +
push 10h  +
call GdipAlloc  +
cmp eax ebx +
jz loc_10684D5  +
push ebx  +
push dword ptr [ebp-10h]  +
mov ecx eax +
call sub_100CDED  +
jmp loc_10684D7  +
xor eax eax +
mov ecx [ebp+8] +
mov [ecx] eax +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
mov [ebp-1Ch] edi +
call sub_1002407  +
lea ecx [ebp-14h] +
mov [ebp-4] bl +
mov dword ptr [ebp-14h] offset off_1002208 +
call sub_1002407  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ??1CDC@@UAE@XZ  +
call sub_1002061  +
retn 0Ch  +
***
call sub_100208C  +
mov esi [ebp+0Ch] +
lea edi [ebp-24h] +
movs   +
movs   +
push 1  +
movs   +
push 1  +
lea eax [ebp-24h] +
push eax  +
movs   +
call ds:InflateRect  +
push 0Ah  +
call ds:GetSysColor  +
push eax  +
push 1  +
push 0  +
lea ecx [ebp-14h] +
call ??0CPen@@QAE@HHK@Z  +
mov esi [ebp+8] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
mov edi eax +
mov eax [esi] +
push 5  +
mov ecx esi +
call dword ptr [eax+2Ch]  +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
call sub_1034A1B  +
push edi  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
lea ecx [ebp-14h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
mov dword ptr [ebp-14h] offset off_102DB88 +
call sub_1002407  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+4] +
cmp byte ptr [eax+1Dh] 0 +
push edi  +
mov edi ecx +
mov byte ptr [ebp+var_4] 1 +
jnz loc_10685ED  +
mov ecx [ebx] +
cmp ecx [eax+0Ch] +
mov edi eax +
setl byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jz loc_10685E4  +
mov eax [eax] +
jmp loc_10685E7  +
mov eax [eax+8] +
cmp byte ptr [eax+1Dh] 0 +
jz loc_10685D1  +
cmp byte ptr [ebp+var_4] 0 +
mov ecx edi +
mov [ebp+arg_4] ecx +
jz loc_1068624  +
mov eax [esi+4] +
cmp edi [eax] +
jnz loc_1068619  +
push ebx  +
push edi  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_1026076  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
jmp loc_1068639  +
lea ecx [ebp+arg_4] +
call sub_10255DD  +
mov ecx [ebp+arg_4] +
mov eax [ecx+0Ch] +
cmp eax [ebx] +
jge loc_1068632  +
push ebx  +
push edi  +
push [ebp+var_4]  +
jmp loc_1068603  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov eax ds:?messageMap@CPreviewView@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
mov edi edi +
push esi  +
push edi  +
push 7F00h  +
mov esi ecx +
push 0  +
mov dword ptr [esi] offset off_10034FC +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
push dword ptr [esi+11Ch]  +
mov edi ds:DestroyCursor +
call edi  +
push dword ptr [esi+120h]  +
call edi  +
pop edi  +
mov ecx esi +
pop esi  +
jmp loc_106ADB8  +
***
mov eax ds:?classCPreviewView@CPreviewView@@2UCRuntimeClass@@B +
retn   +
***
mov eax offset off_104AA78 +
retn   +
***
cmp dword ptr [ecx+0F0h] 0 +
jnz loc_10686CF  +
mov eax [ecx+0FCh] +
retn   +
mov eax [ecx+0ECh] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CPrintInfo@@QAE@XZ  +
test [ebp+arg_0] 1 +
jz loc_10686F5  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CPreviewView@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_10034FC +
mov dword ptr [ebp-18h] 60h +
mov dword ptr [ebp-14h] 90h +
mov dword ptr [ebp-20h] 244Fh +
mov dword ptr [ebp-1Ch] 2450h +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov edi [eax+4] +
push 2  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_100A0E4  +
push eax  +
mov ecx edi +
call sub_102E831  +
mov [esi+11Ch] eax +
mov dword ptr [ebp-28h] 2451h +
mov dword ptr [ebp-24h] 2452h +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov edi [eax+4] +
push 2  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_100A0E4  +
push eax  +
mov ecx edi +
call sub_102E831  +
mov [esi+120h] eax +
mov eax esi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1068665  +
test byte ptr [ebp+8] 1 +
jz loc_10687BC  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 0  +
push 1E300h  +
push 111h  +
push dword ptr [ecx+20h]  +
call ds:PostMessageW  +
retn   +
***
call sub_10686BF  +
cmp eax 2 +
jz loc_106AE4D  +
retn   +
***
call sub_10686BF  +
cmp eax 1 +
jz loc_106AE4D  +
retn   +
***
cwde   +
stc   +
jmp fword ptr [eax+24h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+10h] +
push edi  +
push dword ptr [ebp+0Ch]  +
mov esi ecx +
push dword ptr [ebp+8]  +
call ?OnActivateView@CView@@MAEXHPAV1@0@Z  +
cmp [ebp+0Ch] edi +
jz loc_106888E  +
cmp dword ptr [ebp+8] 0 +
jz loc_106887D  +
mov ecx [esi+90h] +
test ecx ecx +
jz loc_106887D  +
push 0  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push 2  +
jmp loc_1068884  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push 1  +
mov eax [eax+4] +
mov ecx eax +
call sub_1019AE1  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
cmp dword ptr [ecx+0F0h] 0 +
jnz loc_10688C6  +
xor eax eax +
inc eax  +
cmp [ecx+0F4h] eax +
jz loc_10688C6  +
mov edx [ecx+118h] +
mov edx [edx] +
mov edx [edx+60h] +
cmp [edx+1Eh] ax +
ja locret_10688C8  +
cmp [ecx+0FCh] eax +
ja locret_10688C8  +
xor eax eax +
retn   +
***
push 0  +
push 0E304h  +
push 111h  +
push dword ptr [ecx+20h]  +
call ds:PostMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ecx+20h]  +
call ds:GetClientRect  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_100F9BF  +
xor eax eax +
inc eax  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+7Ch] +
call ?Detach@CDC@@QAEPAUHDC__@@XZ  +
mov ecx [esi+118h] +
test ecx ecx +
jz loc_1068934  +
push 1  +
call sub_10686DB  +
mov ecx [esi+78h] +
test ecx ecx +
jz loc_1068942  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
push dword ptr [esi+70h]  +
mov ecx esi +
call ?SetPrintView@CPreviewView@@QAEHPAVCView@@@Z  +
pop esi  +
retn   +
***
push 0  +
push 0E300h  +
push 111h  +
push dword ptr [ecx+20h]  +
call ds:PostMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
xor edi edi +
cmp dword ptr [ebp+0Ch] 1 +
mov esi ecx +
jz loc_106898A  +
call ?Default@CWnd@@IAEJXZ  +
mov edi eax +
jmp loc_10689E0  +
lea eax [ebp-8] +
push eax  +
call ds:GetCursorPos  +
lea eax [ebp-8] +
push eax  +
push dword ptr [esi+20h]  +
call ds:ScreenToClient  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-8] +
push eax  +
mov ecx esi +
call ?FindPageRect@CPreviewView@@IAEHAAVCPoint@@AAI@Z  +
test eax eax +
jz loc_10689CD  +
cmp dword ptr [esi+0F0h] 2 +
jz loc_10689C5  +
push dword ptr [esi+11Ch]  +
jmp loc_10689DA  +
push dword ptr [esi+120h]  +
jmp loc_10689DA  +
push 7F00h  +
push edi  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
mov edx [esi] +
push edi  +
mov edi ecx +
call sub_10686BF  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
mov ecx esi +
call dword ptr [edx+4]  +
mov ebx [esi] +
mov ecx edi +
call sub_1068899  +
movzx eax al +
push eax  +
mov ecx esi +
call dword ptr [ebx]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
mov edx [esi] +
push edi  +
mov edi ecx +
call sub_10686BF  +
dec eax  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
mov ecx esi +
call dword ptr [edx+4]  +
mov ebx [esi] +
mov ecx edi +
call sub_1068899  +
movzx eax al +
push eax  +
mov ecx esi +
call dword ptr [ebx]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_1068A89  +
push esi  +
push edi  +
mov esi [ebp+arg_8] +
mov edi eax +
movs   +
movs   +
add eax 0Ch +
movs   +
cmp eax [ebp+arg_4] +
jnz loc_1068A77  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_106DFB4  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
mov eax [ebp+arg_0] +
jz loc_1068AD1  +
add eax 0C47Dh +
jmp loc_1068AD6  +
add eax 0C4AFh +
add eax 0FFFF3B83h +
cmp eax 38h +
ja loc_1068B07  +
movzx eax ds:byte_1068B2E[eax] +
jmp ds:off_1068B0E[eax*4]  +
xor eax eax +
jmp loc_1068B0A  +
push 6  +
pop eax  +
jmp loc_1068B0A  +
push 8  +
jmp loc_1068AF4  +
push 3  +
jmp loc_1068AF4  +
push 7  +
jmp loc_1068AF4  +
push 5  +
jmp loc_1068AF4  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
add [edx] eax +
add eax ds:7070706h[eax] +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
add [ecx] al +
add al [ebx] +
add al 5 +
push es  +
nop   +
nop   +
nop   +
nop   +
nop   +
push 18h  +
mov eax offset loc_107F215 +
call sub_100208C  +
mov edi ecx +
mov eax [ebp+0Ch] +
xor esi esi +
sub eax esi +
jz loc_1068C6C  +
dec eax  +
jz loc_1068BBC  +
dec eax  +
jnz loc_1068CDD  +
cmp dword ptr [ebp+8] 53FEh +
jnz loc_1068B9E  +
push 4  +
jmp loc_1068BAD  +
cmp dword ptr [ebp+8] 53FFh +
jnz loc_1068CDD  +
push 5  +
mov ecx offset unk_108B074 +
call sub_103D3C2  +
jmp loc_1068CDD  +
cmp dword ptr [ebp+8] 53FEh +
jnz loc_1068C0C  +
push 4  +
mov ecx offset unk_108B074 +
call sub_103D469  +
push esi  +
push dword ptr [ebp+14h]  +
call ds:PropVariantToUInt32WithDefault  +
push 1  +
push eax  +
mov ecx edi +
call sub_1068ABC  +
push 68h  +
mov ecx offset unk_108AF60 +
mov edi eax +
call sub_1006359  +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov [ebp-10h] edi +
mov [ebp-4] esi +
lea ecx [ebp-18h] +
jmp loc_1068C62  +
cmp dword ptr [ebp+8] 53FFh +
jnz loc_1068CDD  +
push 5  +
mov ecx offset unk_108B074 +
call sub_103D469  +
push esi  +
push dword ptr [ebp+14h]  +
call ds:PropVariantToUInt32WithDefault  +
push 1  +
push eax  +
mov ecx edi +
call sub_1068ABC  +
push 69h  +
mov ecx offset unk_108AF60 +
mov esi eax +
call sub_1006359  +
mov dword ptr [ebp-20h] 3 +
mov dword ptr [ebp-24h] offset off_1006E84 +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-4] 1 +
lea ecx [ebp-24h] +
push ecx  +
mov ecx eax +
call sub_1035687  +
jmp loc_1068CDD  +
cmp dword ptr [ebp+8] 53FEh +
jnz loc_1068CA0  +
push 4  +
mov ecx offset unk_108B074 +
call sub_103D3C2  +
mov ecx [edi+4] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
mov edi eax +
cmp edi esi +
jz loc_1068CDD  +
push esi  +
push dword ptr [ebp+14h]  +
call ds:PropVariantToUInt32WithDefault  +
add eax 0C47Dh +
jmp loc_1068CD2  +
cmp dword ptr [ebp+8] 53FFh +
jnz loc_1068CDD  +
push 5  +
mov ecx offset unk_108B074 +
call sub_103D3C2  +
mov ecx [edi+4] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
mov edi eax +
cmp edi esi +
jz loc_1068CDD  +
push esi  +
push dword ptr [ebp+14h]  +
call ds:PropVariantToUInt32WithDefault  +
add eax 0C4AFh +
mov edx [edi] +
push esi  +
push esi  +
push esi  +
push eax  +
mov ecx edi +
call dword ptr [edx+14h]  +
xor eax eax +
call sub_1002061  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp-4] eax +
cmp dword ptr [ebp+8] 53FEh +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
mov dword ptr [ebp-64h] 80004005h +
jnz loc_1068EAC  +
and dword ptr [ebp-64h] 0 +
mov eax 0C47Dh +
mov [ebp-60h] ax +
mov eax 0A029h +
mov [ebp-5Eh] ax +
inc eax  +
mov [ebp-5Ch] ax +
mov eax 0A02Bh +
mov [ebp-5Ah] ax +
inc eax  +
mov [ebp-58h] ax +
xor eax eax +
mov [ebp-56h] ax +
mov eax 0C47Eh +
mov [ebp-54h] ax +
mov eax 0A033h +
mov [ebp-52h] ax +
inc eax  +
mov [ebp-50h] ax +
mov eax 0A035h +
mov [ebp-4Eh] ax +
inc eax  +
mov [ebp-4Ch] ax +
xor eax eax +
mov [ebp-4Ah] ax +
mov eax 0C47Fh +
mov [ebp-48h] ax +
mov eax 0A065h +
mov [ebp-46h] ax +
inc eax  +
mov [ebp-44h] ax +
mov eax 0A067h +
mov [ebp-42h] ax +
inc eax  +
mov [ebp-40h] ax +
xor eax eax +
mov [ebp-3Eh] ax +
mov eax 0C480h +
mov [ebp-3Ch] ax +
mov eax 0A06Fh +
mov [ebp-3Ah] ax +
inc eax  +
mov [ebp-38h] ax +
mov eax 0A071h +
mov [ebp-36h] ax +
inc eax  +
mov [ebp-34h] ax +
xor eax eax +
mov [ebp-32h] ax +
mov eax 0C481h +
mov [ebp-30h] ax +
mov eax 0A05Bh +
mov [ebp-2Eh] ax +
inc eax  +
mov [ebp-2Ch] ax +
mov eax 0A05Dh +
mov [ebp-2Ah] ax +
inc eax  +
mov [ebp-28h] ax +
xor eax eax +
mov [ebp-26h] ax +
mov eax 0C482h +
mov [ebp-24h] ax +
mov eax 0A079h +
mov [ebp-22h] ax +
inc eax  +
mov [ebp-20h] ax +
mov eax 0A07Bh +
mov [ebp-1Eh] ax +
inc eax  +
mov [ebp-1Ch] ax +
xor eax eax +
mov [ebp-1Ah] ax +
mov eax 0C483h +
mov [ebp-18h] ax +
mov eax 0A051h +
mov [ebp-16h] ax +
inc eax  +
mov [ebp-14h] ax +
mov eax 0A053h +
mov [ebp-12h] ax +
inc eax  +
mov [ebp-10h] ax +
xor eax eax +
push 7  +
mov [ebp-0Eh] ax +
lea esi [ebp-5Ch] +
pop ebx  +
mov ax [esi-2] +
push ds:dword_100FAB8  +
mov [ebp-0Ch] ax +
mov ax [esi] +
mov [ebp-0Ah] ax +
mov ax [esi+2] +
mov [ebp-8] ax +
mov ax [esi+4] +
mov [ebp-6] ax +
mov ax [esi-4] +
mov [ebp-70h] ax +
lea eax [ebp-0Ch] +
push eax  +
push offset dword_100FAA8  +
call sub_100FB15  +
mov [ebp-6Eh] ax +
movzx eax word ptr [esi+6] +
mov [ebp-6Ch] eax +
lea eax [ebp-70h] +
push eax  +
mov ecx edi +
call sub_1010DFE  +
add esi 0Ch +
dec ebx  +
jz loc_1069047  +
jmp loc_1068E4F  +
***
cmp dword ptr [ebp+8] 53FFh +
jnz loc_1069047  +
and dword ptr [ebp-64h] 0 +
mov eax 0C4AFh +
mov [ebp-60h] ax +
mov eax 0A03Dh +
mov [ebp-5Eh] ax +
inc eax  +
mov [ebp-5Ch] ax +
mov eax 0A03Fh +
mov [ebp-5Ah] ax +
inc eax  +
mov [ebp-58h] ax +
xor eax eax +
mov [ebp-56h] ax +
mov eax 0C4B0h +
mov [ebp-54h] ax +
mov eax 0A047h +
mov [ebp-52h] ax +
inc eax  +
mov [ebp-50h] ax +
mov eax 0A049h +
mov [ebp-4Eh] ax +
inc eax  +
mov [ebp-4Ch] ax +
xor eax eax +
mov [ebp-4Ah] ax +
mov eax 0C4B1h +
mov [ebp-48h] ax +
mov eax 0A065h +
mov [ebp-46h] ax +
inc eax  +
mov [ebp-44h] ax +
mov eax 0A067h +
mov [ebp-42h] ax +
inc eax  +
mov [ebp-40h] ax +
xor eax eax +
mov [ebp-3Eh] ax +
mov eax 0C4B2h +
mov [ebp-3Ch] ax +
mov eax 0A06Fh +
mov [ebp-3Ah] ax +
inc eax  +
mov [ebp-38h] ax +
mov eax 0A071h +
mov [ebp-36h] ax +
inc eax  +
mov [ebp-34h] ax +
xor eax eax +
mov [ebp-32h] ax +
mov eax 0C4B3h +
mov [ebp-30h] ax +
mov eax 0A05Bh +
mov [ebp-2Eh] ax +
inc eax  +
mov [ebp-2Ch] ax +
mov eax 0A05Dh +
mov [ebp-2Ah] ax +
inc eax  +
mov [ebp-28h] ax +
xor eax eax +
mov [ebp-26h] ax +
mov eax 0C4B4h +
mov [ebp-24h] ax +
mov eax 0A079h +
mov [ebp-22h] ax +
inc eax  +
mov [ebp-20h] ax +
mov eax 0A07Bh +
mov [ebp-1Eh] ax +
inc eax  +
mov [ebp-1Ch] ax +
xor eax eax +
mov [ebp-1Ah] ax +
mov eax 0C4B5h +
mov [ebp-18h] ax +
mov eax 0A051h +
mov [ebp-16h] ax +
inc eax  +
mov [ebp-14h] ax +
mov eax 0A053h +
mov [ebp-12h] ax +
inc eax  +
mov [ebp-10h] ax +
xor eax eax +
push 7  +
mov [ebp-0Eh] ax +
lea esi [ebp-5Ch] +
pop ebx  +
mov ax [esi-2] +
push ds:dword_100FAB8  +
mov [ebp-0Ch] ax +
mov ax [esi] +
mov [ebp-0Ah] ax +
mov ax [esi+2] +
mov [ebp-8] ax +
mov ax [esi+4] +
mov [ebp-6] ax +
mov ax [esi-4] +
mov [ebp-70h] ax +
lea eax [ebp-0Ch] +
push eax  +
push offset dword_100FAA8  +
call sub_100FB15  +
mov [ebp-6Eh] ax +
movzx eax word ptr [esi+6] +
mov [ebp-6Ch] eax +
lea eax [ebp-70h] +
push eax  +
mov ecx edi +
call sub_1010DFE  +
add esi 0Ch +
dec ebx  +
jnz loc_1068FF0  +
mov ecx [ebp-4] +
mov eax [ebp-64h] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
xor ecx ecx +
mov [eax] cx +
mov ecx [ebp+arg_8] +
xor edx edx +
mov [ecx] dx +
mov edx [ebp+arg_0] +
cmp edx 8 +
ja loc_1069111  +
jz loc_1069102  +
dec edx  +
jz loc_10690F3  +
dec edx  +
jz loc_10690E1  +
dec edx  +
jz loc_10690CF  +
dec edx  +
jz loc_10690BD  +
dec edx  +
jz loc_10690AB  +
dec edx  +
jnz loc_1069176  +
mov edx 9D0Eh +
mov [eax] dx +
mov eax 9E9Eh +
jmp loc_1069173  +
mov edx 9D0Dh +
mov [eax] dx +
mov eax 9E9Dh +
jmp loc_1069173  +
mov edx 9D0Ch +
mov [eax] dx +
mov eax 9E9Ch +
jmp loc_1069173  +
mov edx 9D0Bh +
mov [eax] dx +
mov eax 9E9Bh +
jmp loc_1069173  +
mov edx 9D0Ah +
mov [eax] dx +
mov eax 9E9Ah +
jmp loc_1069173  +
mov edx 9D09h +
mov [eax] dx +
mov eax 9E99h +
jmp loc_1069173  +
mov edx 9D10h +
mov [eax] dx +
mov eax 9EA0h +
jmp loc_1069173  +
cmp edx 0Ah +
jz loc_1069166  +
cmp edx 10h +
jz loc_1069157  +
cmp edx 18h +
jz loc_1069148  +
cmp edx 1Eh +
jz loc_1069139  +
cmp edx 28h +
jnz loc_1069176  +
mov edx 9D30h +
mov [eax] dx +
mov eax 9EC0h +
jmp loc_1069173  +
mov edx 9D26h +
mov [eax] dx +
mov eax 9EB6h +
jmp loc_1069173  +
mov edx 9D20h +
mov [eax] dx +
mov eax 9EB0h +
jmp loc_1069173  +
mov edx 9D18h +
mov [eax] dx +
mov eax 9EA8h +
jmp loc_1069173  +
mov edx 9D12h +
mov [eax] dx +
mov eax 9EA2h +
mov [ecx] ax +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
or edi 0FFFFFFFFh +
test esi esi +
jz loc_10691B3  +
mov ecx esi +
call sub_100B9A1  +
xor edx edx +
test eax eax +
jle loc_10691B3  +
mov ecx [esi+4] +
mov esi [ebp+0Ch] +
cmp esi [ecx] +
jz loc_10691B1  +
inc edx  +
add ecx 4 +
cmp edx eax +
jge loc_10691B3  +
jmp loc_10691A0  +
***
mov edi edx +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_1006B2C  +
push 4  +
push 5461h  +
mov ecx eax +
call sub_1009E6B  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
cmp dword ptr [eax] 0Ah +
jnz loc_10691F6  +
add ecx 0FFFFFFFCh +
call sub_10691C0  +
pop ebp  +
retn 4  +
***
push 38h  +
mov eax offset loc_107F269 +
call sub_100208C  +
mov edi ecx +
mov eax [ebp+0Ch] +
xor ebx ebx +
sub eax ebx +
jz loc_1069308  +
dec eax  +
jz loc_1069242  +
dec eax  +
jnz loc_1069410  +
cmp dword ptr [ebp+8] 5461h +
jnz loc_1069410  +
push 1  +
mov ecx offset unk_108B074 +
call sub_103D3C2  +
jmp loc_1069410  +
cmp dword ptr [ebp+8] 5461h +
jnz loc_1069410  +
cmp [ebp+14h] ebx +
jz loc_1069410  +
mov ecx [edi+8] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
cmp eax ebx +
jz loc_1069410  +
push ebx  +
push dword ptr [ebp+14h]  +
call ds:PropVariantToUInt32WithDefault  +
mov esi offset unk_108B074 +
push ebx  +
mov ecx esi +
mov [ebp+14h] eax +
call sub_1009EFA  +
mov ebx eax +
test ebx ebx +
jz loc_1069410  +
push 1  +
mov ecx esi +
call sub_103D469  +
mov edi offset unk_108AF60 +
push ebx  +
mov ecx edi +
call sub_1006359  +
mov [ebp+8] eax +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push ebx  +
mov ecx edi +
call sub_10561AD  +
test al al +
jz loc_1069410  +
push dword ptr [ebp+14h]  +
mov ecx esi +
call sub_1066578  +
test eax eax +
jz loc_1069410  +
fld  qword ptr [ebp-14h] +
sub esp 10h +
fstp  qword ptr [esp+8] +
fld  qword ptr [ebp-1Ch] +
fstp  qword ptr [esp] +
push eax  +
call sub_10665AE  +
mov dword ptr [ebp-34h] 3 +
mov dword ptr [ebp-38h] offset off_1006E84 +
mov [ebp-30h] eax +
mov ecx [ebp+8] +
mov dword ptr [ebp-4] 1 +
lea eax [ebp-38h] +
jmp loc_10693E0  +
cmp dword ptr [ebp+8] 5461h +
jnz loc_1069410  +
cmp [ebp+14h] ebx +
jz loc_1069410  +
mov esi offset unk_108B074 +
push 1  +
mov ecx esi +
call sub_103D3C2  +
mov ecx [edi+8] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
mov edi eax +
cmp edi ebx +
jz loc_1069410  +
push ebx  +
push dword ptr [ebp+14h]  +
call ds:PropVariantToUInt32WithDefault  +
mov ecx edi +
mov [ebp+14h] eax +
call sub_1006E76  +
cmp eax 28Eh +
jz loc_10693E8  +
cmp eax 25Fh +
jz loc_10693E8  +
push 1  +
mov ecx esi +
call sub_1009EFA  +
mov [ebp+8] eax +
cmp eax ebx +
jz loc_1069410  +
mov edi offset unk_108AF60 +
push eax  +
mov ecx edi +
call sub_1006359  +
mov [ebp+0Ch] eax +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_10561AD  +
test al al +
jz loc_1069410  +
push dword ptr [ebp+14h]  +
mov ecx esi +
call sub_1066578  +
cmp eax ebx +
jz loc_1069410  +
fld  qword ptr [ebp-24h] +
sub esp 10h +
fstp  qword ptr [esp+8] +
fld  qword ptr [ebp-2Ch] +
fstp  qword ptr [esp] +
push eax  +
call sub_10665AE  +
mov dword ptr [ebp-40h] 3 +
mov dword ptr [ebp-44h] offset off_1006E84 +
mov [ebp-3Ch] eax +
mov ecx [ebp+0Ch] +
mov [ebp-4] ebx +
lea eax [ebp-44h] +
push eax  +
call sub_1035687  +
jmp loc_1069410  +
push eax  +
call sub_1006581  +
mov esi eax +
cmp esi ebx +
jz loc_1069410  +
push dword ptr [ebp+14h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+98h]  +
cmp eax ebx +
jz loc_1069410  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+8Ch]  +
xor eax eax +
call sub_1002061  +
retn 14h  +
***
push 10h  +
mov eax offset byte_107F36C +
call sub_100208C  +
mov ebx ecx +
mov edi [ebp+0Ch] +
or dword ptr [edi] 0FFFFFFFFh +
cmp dword ptr [ebp+8] 5461h +
mov dword ptr [ebp-10h] 80004005h +
jnz loc_10694EE  +
mov ecx [ebx+8] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
test eax eax +
jz loc_10694EE  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp+0Ch] 0 +
mov ecx eax +
call sub_1006E76  +
cmp eax 28Eh +
jz loc_10694C0  +
cmp eax 25Fh +
jz loc_10694C0  +
mov esi offset unk_108B074 +
push 1  +
mov ecx esi +
call sub_1009EFA  +
test eax eax +
jz loc_10694EE  +
push eax  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
lea ecx [ebp+0Ch] +
mov dword ptr [ebp-18h] 3 +
mov dword ptr [ebp-1Ch] offset off_100CBBC +
mov [ebp-14h] ecx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1005BE0  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_1066596  +
jmp loc_10694E4  +
push eax  +
call sub_1006581  +
mov esi eax +
test esi esi +
jz loc_10694EE  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+90h]  +
mov [ebp+0Ch] eax +
push eax  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+9Ch]  +
push eax  +
mov ecx ebx +
call near ptr dword_106917C+3  +
mov [edi] eax +
mov eax [ebp-10h] +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp dword ptr [ebp+8] 5461h +
push ebx  +
mov ebx ecx +
mov dword ptr [ebp-8] 80004005h +
jnz loc_10695CD  +
mov ecx [ebx+8] +
mov eax [ecx] +
push esi  +
call dword ptr [eax+10h]  +
xor esi esi +
cmp eax esi +
jz loc_10695CC  +
push edi  +
mov ecx eax +
mov [ebp-8] esi +
call sub_1006E76  +
cmp eax 28Eh +
jz loc_1069555  +
cmp eax 25Fh +
jz loc_1069555  +
mov ecx offset unk_108B074 +
call sub_1066596  +
jmp loc_1069569  +
push eax  +
call sub_1006581  +
cmp eax esi +
jz loc_10695C4  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+9Ch]  +
mov edi eax +
cmp edi esi +
jz loc_10695C4  +
mov ecx edi +
call sub_100B9A1  +
test eax eax +
jbe loc_10695BB  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-4] +
push eax  +
mov eax [edi+4] +
push dword ptr [eax+esi*4]  +
mov ecx ebx +
call sub_1069060  +
mov ax [ebp+8] +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-10h] 0 +
mov [ebp-14h] ax +
mov ax [ebp-4] +
mov [ebp-12h] ax +
lea eax [ebp-14h] +
push eax  +
call sub_1010DFE  +
mov ecx edi +
inc esi  +
call sub_100B9A1  +
cmp esi eax +
jb loc_106957A  +
mov ecx ebx +
call sub_10691C0  +
jmp loc_10695CB  +
mov dword ptr [ebp-8] 80004005h +
pop edi  +
pop esi  +
mov eax [ebp-8] +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
pop ebp  +
retn 4  +
***
mov eax off_108A1D4 +
cmp dword ptr [eax+40h] 25Bh +
jnz locret_1069618  +
push esi  +
mov esi eax +
test esi esi +
jz loc_1069617  +
call sub_103D489  +
test eax eax +
mov eax [esi] +
mov ecx esi +
pop esi  +
jnz loc_1069614  +
jmp dword ptr [eax+50h]  +
jmp dword ptr [eax+54h]  +
pop esi  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov eax [esi+18h] +
test eax eax +
jz loc_1069676  +
xor ecx ecx +
cmp eax 2 +
setnz cl  +
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-14h] 7 +
mov dword ptr [ebp-18h] offset off_100B560 +
add ecx 66h +
mov eax ecx +
and dword ptr [ebp-4] 0 +
push eax  +
mov ecx offset unk_108AF60 +
call sub_1006359  +
lea ecx [ebp-18h] +
push ecx  +
mov ecx eax +
call sub_1005BE0  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_103D523  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+4] +
push dword ptr [eax]  +
lea eax [ebp+var_4] +
push eax  +
call sub_100BA88  +
leave   +
retn   +
***
call sub_100208C  +
mov esi ecx +
call sub_103D489  +
mov ecx offset unk_108AF60 +
test eax eax +
jnz loc_10696BC  +
push 1Fh  +
jmp loc_10696BE  +
push 20h  +
call sub_1006359  +
mov edi [ebp+8] +
mov dword ptr [ebp-18h] 7 +
mov dword ptr [ebp-1Ch] offset off_100B560 +
mov [ebp-14h] edi +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx eax +
call sub_1035687  +
mov ecx [esi+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [ecx] +
jmp loc_10696F8  +
cmp [eax+8] edi +
jz loc_10696FE  +
mov eax [eax] +
cmp eax ecx +
jz loc_106970B  +
jmp loc_10696F1  +
push eax  +
lea eax [ebp-10h] +
push eax  +
lea ecx [esi+4] +
call sub_100BA88  +
lea edi [esi+4] +
mov eax [edi+4] +
lea ecx [ebp+8] +
push ecx  +
push eax  +
mov ecx edi +
call sub_100BC85  +
cmp dword ptr [esi+0Ch] 0Ah +
jbe loc_106972A  +
mov ecx edi +
call sub_1069681  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push offset dword_1005BFC  +
push 4  +
push 54C5h  +
mov ecx eax +
call sub_1009E6B  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_106976F  +
mov ecx [eax] +
push esi  +
push offset dword_1016058  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 90h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp [ebp+arg_4] 5A3Dh +
push ebx  +
push esi  +
mov esi [ebp+arg_14] +
push edi  +
mov [ebp+var_80] 80004005h +
jnz loc_10698EA  +
mov eax [ebp+arg_8] +
xor edi edi +
sub eax edi +
jz loc_1069859  +
dec eax  +
jz loc_10697DD  +
dec eax  +
jnz loc_10698EA  +
call sub_1006239  +
cmp eax edi +
jz loc_10698EA  +
mov ecx eax +
mov [ebp+var_80] edi +
call sub_105F66C  +
jmp loc_10698EA  +
call sub_1006239  +
mov ebx eax +
cmp ebx edi +
jz loc_10698EA  +
mov [ebp+var_80] edi +
xor eax eax +
lea edi [ebp+pvar] +
stos   +
stos   +
stos   +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_1069900  +
stos   +
mov eax [esi] +
push esi  +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_10698DD  +
push dword ptr [ebp+pvar.anonymous_0]  +
lea ecx [ebp+var_7C] +
call sub_1069752  +
push 74h  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 0  +
lea eax [ebp+lParam] +
push eax  +
push [ebp+var_7C]  +
call sub_1071EEA  +
push 1  +
sub esp 74h +
push 1Dh  +
pop ecx  +
mov edi esp +
lea esi [ebp+lParam] +
movs   +
mov ecx ebx +
call sub_105F60C  +
jmp loc_10698D0  +
call sub_1006239  +
mov ebx eax +
cmp ebx edi +
jz loc_10698EA  +
mov ecx ebx +
call sub_105F66C  +
xor eax eax +
lea edi [ebp+pvar] +
stos   +
stos   +
stos   +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_1069900  +
stos   +
mov eax [esi] +
push esi  +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_10698DD  +
push dword ptr [ebp+pvar.anonymous_0]  +
lea ecx [ebp+var_7C] +
call sub_1069752  +
push 74h  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 1  +
lea eax [ebp+lParam] +
push eax  +
push [ebp+var_7C]  +
call sub_1071EEA  +
lea eax [ebp+lParam] +
push eax  +
mov ecx ebx +
call sub_1060C1E  +
test eax eax +
jz loc_10698D0  +
and [ebp+var_80] 0 +
mov eax [ebp+var_7C] +
test eax eax +
jz loc_10698DD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantClear  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_80] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1011A21  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A0h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp [ebp+arg_4] 5A3Dh +
mov eax [ebp+arg_10] +
mov edx [ebp+arg_C] +
mov [ebp+var_7C] eax +
mov [ebp+var_80] 80004005h +
jnz loc_1069B1A  +
mov eax [ebp+arg_8] +
mov ecx [eax+10h] +
push ebx  +
push esi  +
push edi  +
cmp ecx 0Dh +
jnz loc_1069AE1  +
push 4  +
pop ecx  +
mov edi offset dword_104A000 +
mov esi eax +
xor ebx ebx +
cmps   +
jnz loc_1069AE1  +
push dword ptr [edx+8]  +
lea ecx [ebp+var_7C] +
call sub_1069752  +
call sub_1006239  +
test eax eax +
jz loc_10699BA  +
lea ecx [ebp+var_78] +
push ecx  +
mov ecx eax +
call sub_105F5F9  +
push [ebp+var_7C]  +
lea eax [ebp+var_78] +
push eax  +
call sub_10723A1  +
jmp loc_1069AC6  +
xor eax eax +
lea edi [ebp+var_90] +
stos   +
stos   +
stos   +
stos   +
push 13h  +
pop eax  +
lea edx [ebp+var_90] +
push edx  +
mov word ptr [ebp+var_90] ax +
mov eax [ebp+var_7C] +
xor esi esi +
inc esi  +
push offset dword_104A03C  +
mov [ebp+var_88] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [ebp+var_7C] +
mov ecx [eax] +
lea edx [ebp+var_90] +
push edx  +
push offset dword_104A050  +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [ebp+var_7C] +
mov ecx [eax] +
lea edx [ebp+var_90] +
push edx  +
push offset dword_104A078  +
push eax  +
call dword ptr [ecx+18h]  +
push 13h  +
pop eax  +
lea edx [ebp+var_90] +
push edx  +
mov word ptr [ebp+var_90] ax +
mov eax [ebp+var_7C] +
push offset dword_104A064  +
mov [ebp+var_88] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
push 13h  +
pop eax  +
lea edx [ebp+var_90] +
push edx  +
mov word ptr [ebp+var_90] ax +
mov eax [ebp+var_7C] +
push offset dword_104A08C  +
mov [ebp+var_88] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
lea eax [ebp+var_90] +
push eax  +
push offset word_100219C  +
call sub_1011A21  +
mov eax [ebp+var_7C] +
mov ecx [eax] +
lea edx [ebp+var_90] +
push edx  +
push offset dword_104A014  +
push eax  +
call dword ptr [ecx+18h]  +
lea eax [ebp+pdecOut] +
push eax  +
push 0  +
call ds:VarDecFromI4  +
lea esi [ebp+pdecOut] +
lea edi [ebp+var_90] +
movs   +
movs   +
movs   +
push 0Eh  +
pop eax  +
movs   +
mov word ptr [ebp+var_90] ax +
mov eax [ebp+var_7C] +
mov ecx [eax] +
lea edx [ebp+var_90] +
push edx  +
push offset dword_104A028  +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [ebp+var_7C] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov [ebp+var_80] eax +
mov eax [ebp+var_7C] +
test eax eax +
jz loc_1069B17  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1069B17  +
cmp dword ptr [eax+10h] 0Bh +
jnz loc_1069B17  +
push 4  +
mov ebx offset dword_1006838 +
mov esi eax +
pop ecx  +
mov edi ebx +
xor eax eax +
cmps   +
jnz loc_1069B17  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push 1  +
mov ecx eax +
call sub_101AB46  +
push [ebp+var_7C]  +
push eax  +
push ebx  +
call sub_1006AC9  +
mov [ebp+var_80] eax +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_80] +
xor ecx ebp +
call sub_100207A  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push edi  +
lea eax [ebp+var_18] +
push eax  +
mov eax [ecx+8] +
push 18h  +
push dword ptr [eax]  +
call ds:GetObjectW  +
mov edi eax +
test edi edi +
jz loc_1069C2F  +
mov eax [ebp+var_6] +
imul eax [ebp-8] +
push ebx  +
push esi  +
movzx eax ax +
push 8  +
pop edx  +
cmp ax 1 +
jnz loc_1069B7D  +
xor ebx ebx +
inc ebx  +
xor eax eax +
inc eax  +
mov cl bl +
shl eax cl +
lea eax ds:28h[eax*4] +
push eax  +
jmp loc_1069BA6  +
push 4  +
pop ebx  +
cmp ax bx +
jbe loc_1069B6C  +
cmp ax dx +
ja loc_1069B8E  +
mov ebx edx +
jmp loc_1069B6C  +
push 10h  +
pop ebx  +
cmp ax bx +
jbe loc_1069B6C  +
mov cx 18h +
cmp cx ax +
sbb ebx ebx +
and ebx edx +
add ebx 18h +
push 28h  +
push edx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi [ebp+arg_0] +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [esi] eax +
mov edi ecx +
test edi edi +
jz loc_1069C2D  +
mov dword ptr [eax] 28h +
mov eax [esi] +
mov ecx [ebp+var_14] +
mov [eax+4] ecx +
mov eax [esi] +
mov ecx [ebp+var_10] +
mov [eax+8] ecx +
mov eax [esi] +
mov cx [ebp+var_8] +
mov [eax+0Ch] cx +
mov eax [esi] +
mov cx word ptr [ebp+var_6] +
mov [eax+0Eh] cx +
mov eax [esi] +
and dword ptr [eax+10h] 0 +
cmp bx 18h +
jnb loc_1069C08  +
xor eax eax +
mov cl bl +
inc eax  +
shl eax cl +
mov ecx [esi] +
mov [ecx+20h] eax +
mov ecx [esi] +
movzx eax bx +
imul eax [ecx+4] +
add eax 1Fh +
and eax 0FFFFFFE0h +
cdq   +
and edx 7 +
add eax edx +
sar eax 3 +
imul eax [ecx+8] +
mov [ecx+14h] eax +
mov eax [esi] +
and dword ptr [eax+24h] 0 +
pop esi  +
pop ebx  +
mov eax edi +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi [ebp+hObject] +
push edi  +
push dword ptr [esi+14h]  +
mov edi ecx +
push 0  +
call ds:GlobalAlloc  +
xor ebx ebx +
test eax eax +
setnz bl  +
mov [ebp+hMem] eax +
test ebx ebx +
jz loc_1069D50  +
push 0  +
push esi  +
push eax  +
movzx eax word ptr [esi+8] +
push eax  +
mov eax [edi+8] +
push 0  +
push dword ptr [eax]  +
mov eax [edi+10h] +
push dword ptr [eax]  +
call ds:GetDIBits  +
mov ebx eax +
test ebx ebx +
jz loc_1069D50  +
xor edi edi +
push edi  +
push 80h  +
push 2  +
push edi  +
push edi  +
push 0C0000000h  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
xor ebx ebx +
cmp eax 0FFFFFFFFh +
setnz bl  +
mov [ebp+hObject] eax +
cmp ebx edi +
jz loc_1069D32  +
mov ecx [esi] +
mov ebx [esi+14h] +
mov eax 4D42h +
mov word ptr [ebp+Buffer] ax +
mov eax [esi+20h] +
shl eax 2 +
lea edx [eax+ecx] +
lea eax [eax+ecx+0Eh] +
push edi  +
mov edi ds:WriteFile +
mov [ebp+var_E] eax +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 0Eh  +
lea edx [edx+ebx+0Eh] +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hObject]  +
mov [ebp+Buffer+2] edx +
xor edx edx +
mov [ebp+var_12] dx +
mov [ebp+var_10] dx +
call edi  +
mov ebx eax +
test ebx ebx +
jz loc_1069D32  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
mov eax [esi+20h] +
lea eax ds:28h[eax*4] +
push eax  +
push esi  +
push [ebp+hObject]  +
call edi  +
mov ebx eax +
test ebx ebx +
jz loc_1069D32  +
mov esi [esi+14h] +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push esi  +
push [ebp+hMem]  +
push [ebp+hObject]  +
call edi  +
mov ebx eax +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_1069D50  +
push [ebp+hObject]  +
call ds:CloseHandle  +
test eax eax +
jz loc_1069D4E  +
test ebx ebx +
jz loc_1069D4E  +
xor ebx ebx +
inc ebx  +
jmp loc_1069D50  +
xor ebx ebx +
cmp [ebp+hMem] 0 +
jz loc_1069D5F  +
push [ebp+hMem]  +
call ds:GlobalFree  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov eax [eax] +
retn   +
***
mov dword ptr [ecx] offset off_100AE14 +
retn   +
***
mov eax [ecx+18h] +
mov eax [eax] +
xor ecx ecx +
cmp [eax-8] ecx +
setz cl  +
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+hObject] +
push eax  +
mov esi ecx +
call sub_1069B30  +
test eax eax +
jz loc_1069DDD  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+18h] 8 +
jb loc_1069DBD  +
mov eax [eax+4] +
jmp loc_1069DC0  +
add eax 4 +
push [ebp+hObject]  +
mov ecx esi +
push eax  +
call sub_1069C3B  +
push [ebp+hObject]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov dword ptr [esi+20h] 1 +
call sub_1075D1C  +
mov [esi+28h] eax +
test eax eax +
jnz loc_1069E37  +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
cmp dword ptr [edi+18h] 8 +
lea ebx [edi+4] +
jb loc_1069E17  +
mov eax [ebx] +
jmp loc_1069E19  +
mov eax ebx +
mov ecx [esi+18h] +
push eax  +
call ??4CString@@QAEABV0@PBG@Z  +
cmp dword ptr [edi+18h] 8 +
jb loc_1069E2A  +
mov ebx [ebx] +
mov ecx [esi+14h] +
push ebx  +
call ??4CString@@QAEABV0@PBG@Z  +
pop edi  +
pop ebx  +
jmp loc_1069E6B  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+18h] 8 +
jb loc_1069E45  +
mov eax [eax+4] +
jmp loc_1069E48  +
add eax 4 +
mov ecx [esi+18h] +
push eax  +
call ??4CString@@QAEABV0@PBG@Z  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+18h] 8 +
jb loc_1069E5F  +
mov eax [eax+4] +
jmp loc_1069E62  +
add eax 4 +
mov ecx [esi+14h] +
push eax  +
call ??4CString@@QAEABV0@PBG@Z  +
push dword ptr [esi+18h]  +
lea ecx [esi+2Ch] +
call ??4CString@@QAEABV0@ABV0@@Z  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
call sub_101CA24  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ecx+18h] +
and [ebp+var_4] 0 +
push 0  +
call ?GetBuffer@CString@@QAEPAGH@Z  +
mov ecx [ebp+arg_0] +
push eax  +
call sub_10142C5  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
sub eax 0BDh +
jz loc_1069FF2  +
dec eax  +
jnz loc_106A0E3  +
mov eax 0C801h +
cmp [ebp+10h] ax +
jnz loc_106A0E3  +
push 3  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFEh  +
push dword ptr [ebp-32Ch]  +
call ds:SetWindowPos  +
lea eax [ebp-328h] +
push eax  +
mov dword ptr [ebp-328h] 11Ch +
call ds:GetVersionExW  +
xor edi edi +
inc edi  +
cmp eax esi +
jz loc_1069F73  +
cmp byte ptr [ebp-20Eh] 3 +
jz loc_1069F71  +
cmp byte ptr [ebp-20Eh] 2 +
jz loc_1069F71  +
xor eax eax +
jmp loc_1069F73  +
mov eax edi +
neg eax  +
push 104h  +
lea ecx [ebp-20Ch] +
sbb eax eax +
push ecx  +
add eax 0C807h +
push eax  +
push offset __ImageBase  +
call ds:LoadStringW  +
test eax eax +
jz loc_1069FDD  +
push 38h  +
lea eax [ebp-364h] +
push esi  +
push eax  +
call memset  +
lea eax [ebp-20Ch] +
mov [ebp-358h] eax +
add esp 0Ch +
lea eax [ebp-368h] +
push eax  +
mov dword ptr [ebp-368h] 3Ch +
mov [ebp-34Ch] edi +
mov dword ptr [ebp-364h] 100h +
call ds:ShellExecuteExW  +
push esi  +
push esi  +
push 10h  +
push dword ptr [ebp-32Ch]  +
call ds:PostMessageW  +
jmp loc_106A150  +
mov esi ds:GetParent +
push 14h  +
push 10h  +
push 48Ah  +
push ebx  +
call esi  +
mov edi ds:PostMessageW +
push eax  +
call edi  +
push 11h  +
push 10h  +
push 48Bh  +
push ebx  +
call esi  +
push eax  +
call edi  +
push 3  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push dword ptr [ebp-32Ch]  +
call ds:SetWindowPos  +
xor eax eax +
inc eax  +
jmp loc_106A152  +
push 17h  +
push esi  +
push offset dword_104AC64  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_106A0C2  +
push 104h  +
lea eax [ebp-20Ch] +
push eax  +
push 0C805h  +
push offset __ImageBase  +
call ds:LoadStringW  +
test eax eax +
jz loc_106A0B6  +
lea eax [ebp-20Ch] +
push eax  +
call ds:SysAllocString  +
mov edi eax +
cmp edi esi +
jz loc_106A0B6  +
mov eax [ebp-32Ch] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+10h]  +
push edi  +
call ds:SysFreeString  +
mov eax [ebp-32Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call ds:CoUninitialize  +
jmp loc_106A0E3  +
mov ecx [ebp+14h] +
mov eax [ecx+8] +
cmp eax 0FFFFFFFCh +
jz loc_106A0DA  +
cmp eax 0FFFFFFFEh +
jnz loc_106A0E3  +
cmp dword ptr [ecx+4] 0C802h +
jz loc_106A0E7  +
xor eax eax +
jmp loc_106A152  +
push 104h  +
lea eax [ebp-20Ch] +
push eax  +
push 0C808h  +
push offset __ImageBase  +
call ds:LoadStringW  +
xor edi edi +
inc edi  +
test eax eax +
jz loc_106A150  +
push 38h  +
lea eax [ebp-364h] +
push 0  +
push eax  +
call memset  +
lea eax [ebp-20Ch] +
mov [ebp-358h] eax +
add esp 0Ch +
lea eax [ebp-368h] +
push eax  +
mov dword ptr [ebp-368h] 3Ch +
mov [ebp-34Ch] edi +
mov dword ptr [ebp-364h] 100h +
call ds:ShellExecuteExW  +
mov eax edi +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
push esi  +
push edi  +
push 34h  +
xor edi edi +
lea eax [ebp+var_70.dwFlags] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_70] +
mov esi offset __ImageBase +
push eax  +
mov [ebp+var_70.dwSize] 38h +
mov [ebp+var_70.dwFlags] 1000h +
mov [ebp+var_70.hInstance] esi +
mov dword ptr [ebp+var_70.anonymous_0] 0C800h +
mov [ebp+var_70.pfnDlgProc] offset loc_1069EC7 +
mov [ebp+var_70.pszHeaderTitle] 0C803h +
mov [ebp+var_70.lParam] edi +
call ds:CreatePropertySheetPageW  +
mov [ebp+var_4] eax +
cmp eax edi +
jz loc_106A214  +
push 30h  +
lea eax [ebp+var_38.dwFlags] +
push edi  +
push eax  +
call memset  +
lea eax [ebp+var_4] +
mov dword ptr [ebp+var_38.anonymous_2] eax +
add esp 0Ch +
lea eax [ebp+var_38] +
push eax  +
mov [ebp+var_38.dwSize] 34h +
mov [ebp+var_38.dwFlags] 4020h +
mov [ebp+var_38.hwndParent] edi +
mov [ebp+var_38.hInstance] esi +
mov [ebp+var_38.pszCaption] 0C804h +
mov [ebp+var_38.nPages] 1 +
call ds:PropertySheetW  +
push edi  +
push offset Target  +
call ds:InterlockedExchange  +
push edi  +
push esi  +
call ds:FreeLibraryAndExitThread  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
jmp ds:?OnFinalRelease@CWnd@@UAEXXZ  +
***
jmp ds:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CFileException@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetErrorMessage@CFileException@@UAEHPAGIPAI@Z  +
***
jmp ds:?ReportError@CException@@UAEHII@Z  +
***
jmp ds:?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CBitmap@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CBrush@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CDialog@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z  +
***
jmp ds:?GetRuntimeClass@CRgn@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CPalette@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?OnNcActivate@CFrameWnd@@IAEHH@Z  +
***
jmp ds:?OnFileSendMail@COleDocument@@IAEXXZ  +
***
jmp ds:?OnFileSaveCopyAs@COleServerDoc@@IAEXXZ  +
***
jmp ds:?OnFinalRelease@CDocument@@UAEXXZ  +
***
jmp ds:?OnFindEmbeddedItem@COleLinkingDoc@@MAEPAVCOleClientItem@@PBG@Z  +
***
jmp ds:?OnClose@COleServerDoc@@MAEXW4tagOLECLOSE@@@Z  +
***
jmp ds:?OnSetHostNames@COleServerDoc@@MAEXPBG0@Z  +
***
jmp ds:?OnExecOleCmd@COleServerDoc@@MAEJPBU_GUID@@KKPAUtagVARIANT@@1@Z  +
***
jmp ds:?GetDocObjectServer@COleServerDoc@@MAEPAVCDocObjectServer@@PAUIOleDocumentSite@@@Z  +
***
jmp ds:?OnShowDocument@COleServerDoc@@MAEXH@Z  +
***
jmp ds:?OnDeactivate@COleServerDoc@@UAEXXZ  +
***
jmp ds:?OnSetItemRects@COleServerDoc@@MAEXPBUtagRECT@@0@Z  +
***
jmp ds:?OnReactivateAndUndo@COleServerDoc@@MAEHXZ  +
***
jmp ds:?OnFrameWindowActivate@COleServerDoc@@MAEXH@Z  +
***
jmp ds:?OnDocWindowActivate@COleServerDoc@@MAEXH@Z  +
***
jmp ds:?CreateInPlaceFrame@COleServerDoc@@MAEPAVCOleIPFrameWnd@@PAVCWnd@@@Z  +
***
jmp ds:?DestroyInPlaceFrame@COleServerDoc@@MAEXPAVCOleIPFrameWnd@@@Z  +
***
jmp ds:?OnResizeBorder@COleServerDoc@@UAEXPBUtagRECT@@PAUIOleInPlaceUIWindow@@H@Z  +
***
jmp ds:?GetFileTypeString@COleServerDoc@@MAEHAAVCString@@@Z  +
***
jmp ds:?OnNewEmbedding@COleServerDoc@@MAEXPAUIStorage@@@Z  +
***
jmp ds:?OnOpenEmbedding@COleServerDoc@@MAEXPAUIStorage@@@Z  +
***
jmp ds:?OnSaveEmbedding@COleServerDoc@@MAEXPAUIStorage@@@Z  +
***
jmp ds:?ReportSaveLoadException@COleLinkingDoc@@UAEXPBGPAVCException@@HI@Z  +
***
jmp ds:?OnFileUpdate@COleServerDoc@@IAEXXZ  +
***
jmp ds:?CommitItems@COleDocument@@QAEXH@Z  +
***
jmp ds:?OnContextHelp@CFrameWnd@@QAEXXZ  +
***
jmp ds:?OnHelpUsing@CWnd@@QAEXXZ  +
***
jmp ds:?OnHelpIndex@CWnd@@QAEXXZ  +
***
jmp ds:?OnHelp@CFrameWnd@@IAEXXZ  +
***
jmp ds:?OnQueryNewPalette@CFrameWnd@@IAEHXZ  +
***
jmp ds:?OnBarCheck@CFrameWnd@@QAEHI@Z  +
***
jmp ds:?OnFilePrintSetup@CWinApp@@IAEXXZ  +
***
jmp ds:?WinHelpW@CWinApp@@UAEXKI@Z  +
***
jmp ds:?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CWinApp@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?OnFilePrint@CView@@IAEXXZ  +
***
jmp ds:?IsSelected@CView@@UBEHPBVCObject@@@Z  +
***
jmp ds:?OnScroll@CView@@UAEHIIH@Z  +
***
jmp ds:?OnScrollBy@CView@@UAEHVCSize@@H@Z  +
***
jmp ds:?OnDragEnter@CView@@UAEKPAVCOleDataObject@@KVCPoint@@@Z  +
***
jmp ds:?OnDragOver@CView@@UAEKPAVCOleDataObject@@KVCPoint@@@Z  +
***
jmp ds:?OnDragLeave@CView@@UAEXXZ  +
***
jmp ds:?OnDrop@CView@@UAEHPAVCOleDataObject@@KVCPoint@@@Z  +
***
jmp ds:?OnDropEx@CView@@UAEKPAVCOleDataObject@@KKVCPoint@@@Z  +
***
jmp ds:?OnDragScroll@CView@@UAEKKVCPoint@@@Z  +
***
jmp ds:?OnUpdate@CView@@MAEXPAV1@JPAVCObject@@@Z  +
***
jmp ds:?OnHide@COleServerItem@@MAEXXZ  +
***
jmp ds:?OnGetExtent@COleServerItem@@UAEHW4tagDVASPECT@@AAVCSize@@@Z  +
***
jmp ds:?OnSetExtent@COleServerItem@@UAEHW4tagDVASPECT@@ABVCSize@@@Z  +
***
jmp ds:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CMenu@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?DrawItem@CMenu@@UAEXPAUtagDRAWITEMSTRUCT@@@Z  +
***
jmp ds:?MeasureItem@CMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z  +
***
jmp ds:?GetRuntimeClass@CByteArray@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?Serialize@CByteArray@@UAEXAAVCArchive@@@Z  +
***
jmp ds:?GetRuntimeClass@CProgressCtrl@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CPen@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:??1CPreviewView@@UAE@XZ  +
***
jmp ds:?OnScroll@CScrollView@@UAEHIIH@Z  +
***
jmp ds:?OnScrollBy@CScrollView@@UAEHVCSize@@H@Z  +
***
jmp ds:?OnPrepareDC@CPreviewView@@UAEXPAVCDC@@PAUCPrintInfo@@@Z  +
***
jmp ds:?OnInitialUpdate@CView@@UAEXXZ  +
***
jmp ds:?OnDraw@CPreviewView@@MAEXPAVCDC@@@Z  +
***
jmp ds:?OnPreparePrinting@CView@@MAEHPAUCPrintInfo@@@Z  +
***
jmp ds:?OnNumPageChange@CPreviewView@@IAEXXZ  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0exception@@QAE@XZ  +
cmp dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_104A130 +
jnz loc_106AE92  +
cmp dword ptr [esi+8] 0 +
jnz loc_106AE92  +
mov eax off_108ED8C +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
push 44h  +
mov eax offset loc_107FC34 +
call sub_100208C  +
push offset aStringTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
push 44h  +
mov eax offset loc_107FC34 +
call sub_100208C  +
push offset aInvalidStringP  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C1F6  +
push offset dword_10832E4  +
lea eax [ebp-50h] +
push eax  +
mov dword ptr [ebp-50h] offset off_104A3C8 +
call _CxxThrowException  +
int 3  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+UsedDefaultChar] +
push esi  +
push edi  +
test eax eax +
jnz loc_106AF66  +
call ds:___lc_handle_func  +
mov esi [eax+8] +
call ds:___lc_codepage_func  +
mov edi eax +
jmp loc_106AF6B  +
mov esi [eax] +
mov edi [eax+4] +
test esi esi +
jnz loc_106AF87  +
mov ax [ebp+WideCharStr] +
mov ecx 0FFh +
cmp ax cx +
ja loc_106AFB4  +
mov ecx [ebp+lpMultiByteStr] +
mov [ecx] al +
xor eax eax +
inc eax  +
jmp loc_106AFC3  +
and [ebp+UsedDefaultChar] 0 +
lea eax [ebp+UsedDefaultChar] +
push eax  +
push 0  +
call ds:___mb_cur_max_func  +
push eax  +
push [ebp+lpMultiByteStr]  +
lea eax [ebp+WideCharStr] +
push 1  +
push eax  +
push 0  +
push edi  +
call ds:WideCharToMultiByte  +
test eax eax +
jz loc_106AFB4  +
cmp [ebp+UsedDefaultChar] 0 +
jz loc_106AFC3  +
call ds:_errno  +
mov dword ptr [eax] 2Ah +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_106AF45  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
push dword ptr [eax]  +
push dword ptr [eax+4]  +
mov eax [ebp+arg_4] +
push [ebp+arg_8]  +
sub eax [ebp+arg_0] +
sar eax 1 +
push eax  +
push [ebp+arg_0]  +
push 1  +
push 0  +
call __crtGetStringTypeW  +
mov eax [ebp+arg_4] +
add esp 1Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_106AFDC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi [ebp+arg_0] +
movzx eax di +
mov ecx 0FFFFh +
mov [ebp+var_4] eax +
cmp di cx +
jz loc_106B085  +
mov edx [ebp+arg_4] +
push esi  +
mov esi [edx] +
mov ecx 100h +
test esi esi +
jnz loc_106B05E  +
push ebx  +
mov ebx ecx +
cmp di bx +
pop ebx  +
jnb loc_106B05E  +
lea ecx [edi-41h] +
cmp cx 19h +
ja loc_106B084  +
add edi 20h +
movzx eax di +
jmp loc_106B084  +
push dword ptr [edx+4]  +
lea eax [ebp+var_4] +
push 1  +
push eax  +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
push ecx  +
push esi  +
push 0  +
call __crtLCMapStringW  +
add esp 20h +
test eax eax +
movzx eax word ptr [ebp+arg_0] +
jz loc_106B084  +
mov eax [ebp+var_4] +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_106B01B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
movzx eax si +
mov ecx 0FFFFh +
mov [ebp+var_4] eax +
cmp si cx +
jz loc_106B104  +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
test edx edx +
jnz loc_106B0DA  +
push edi  +
mov edi 100h +
cmp si di +
pop edi  +
jnb loc_106B0DA  +
lea ecx [esi-61h] +
cmp cx 19h +
ja loc_106B104  +
add esi 0FFFFFFE0h +
movzx eax si +
jmp loc_106B104  +
push dword ptr [ecx+4]  +
lea eax [ebp+var_4] +
push 1  +
push eax  +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
push 200h  +
push edx  +
push 0  +
call __crtLCMapStringW  +
add esp 20h +
test eax eax +
movzx eax word ptr [ebp+arg_0] +
jz loc_106B104  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_106B09A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
sub esp 14h +
test eax eax +
jz loc_106B12B  +
and dword ptr [eax] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
movzx eax byte ptr [ebx] +
push esi  +
push edi  +
mov edi ds:isspace +
mov esi ebx +
jmp loc_106B142  +
inc esi  +
movzx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
test eax eax +
jnz loc_106B13E  +
mov al [esi] +
cmp al 2Dh +
jz loc_106B15A  +
cmp al 2Bh +
jz loc_106B15A  +
mov [ebp+var_1] 2Bh +
jmp loc_106B15E  +
mov [ebp+var_1] al +
inc esi  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_106B294  +
cmp eax 1 +
jz loc_106B294  +
cmp eax 24h +
jg loc_106B294  +
mov cl 30h +
test eax eax +
jle loc_106B197  +
cmp eax 10h +
jnz loc_106B1C1  +
cmp [esi] cl +
jnz loc_106B1C1  +
mov al [esi+1] +
cmp al 78h +
jz loc_106B1BF  +
cmp al 58h +
jz loc_106B1BF  +
jmp loc_106B1C1  +
cmp [esi] cl +
jz loc_106B1A4  +
mov [ebp+arg_8] 0Ah +
jmp loc_106B1C1  +
mov al [esi+1] +
cmp al 78h +
jz loc_106B1B8  +
cmp al 58h +
jz loc_106B1B8  +
mov [ebp+arg_8] 8 +
jmp loc_106B1C1  +
mov [ebp+arg_8] 10h +
inc esi  +
inc esi  +
mov [ebp+var_C] esi +
jmp loc_106B1C7  +
inc esi  +
cmp [esi] cl +
jz loc_106B1C6  +
movsx eax byte ptr [esi] +
push [ebp+arg_8]  +
mov ebx ds:tolower +
and [ebp+var_8] 0 +
push eax  +
mov [ebp+var_10] esi +
call ebx  +
mov edi offset a0123456789abcd +
jmp loc_106B20B  +
mov ecx [ebp+var_8] +
push [ebp+arg_8]  +
mov [ebp+var_14] ecx +
imul ecx [ebp+arg_8] +
mov edx edi +
sub al dl +
mov [ebp+var_2] al +
movsx eax al +
add ecx eax +
inc esi  +
movsx eax byte ptr [esi] +
push eax  +
mov [ebp+var_8] ecx +
call ebx  +
pop ecx  +
push eax  +
push edi  +
call ds:memchr  +
add esp 0Ch +
test eax eax +
jnz loc_106B1E8  +
cmp [ebp+var_C] esi +
jnz loc_106B22E  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_106B29D  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
jmp loc_106B29D  +
mov ecx [ebp+arg_8] +
movsx edx ds:byte_106B2CC[ecx] +
mov eax esi +
sub eax edx +
sub eax [ebp+var_10] +
js loc_106B27D  +
test eax eax +
jg loc_106B25C  +
movsx edx [ebp+var_2] +
mov eax [ebp+var_8] +
sub eax edx +
cmp [ebp+var_8] eax +
jb loc_106B25C  +
xor edx edx +
div  ecx +
cmp eax [ebp+var_14] +
jz loc_106B27D  +
call ds:_errno  +
mov dword ptr [eax] 22h +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_106B275  +
mov dword ptr [eax] 1 +
or [ebp+var_8] 0FFFFFFFFh +
mov [ebp+var_1] 2Bh +
cmp [ebp+var_1] 2Dh +
jnz loc_106B286  +
neg [ebp+var_8]  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_106B28F  +
mov [eax] esi +
mov eax [ebp+var_8] +
jmp loc_106B29F  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_106B29D  +
mov [eax] ebx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
and ds:0C0D0E11h edx +
or ecx [ebx] +
or cl [edx] +
or [ecx] ecx +
or [ecx] ecx +
or [eax] ecx +
or [eax] cl +
or [eax] cl +
or [eax] cl +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
pop es  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
push edi  +
test ebx ebx +
jnz loc_106B309  +
lea ebx [ebp-4] +
mov esi [ebp+8] +
mov edi ds:isspace +
jmp loc_106B315  +
inc esi  +
movzx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
test eax eax +
jnz loc_106B314  +
mov al [esi] +
cmp al 2Dh +
jz loc_106B330  +
cmp al 2Bh +
jz loc_106B330  +
mov byte ptr [ebp+0Fh] 2Bh +
jmp loc_106B334  +
mov [ebp+0Fh] al +
inc esi  +
mov edi [ebp+14h] +
push edi  +
push dword ptr [ebp+10h]  +
push ebx  +
push esi  +
call sub_106B119  +
add esp 10h +
cmp esi [ebx] +
jnz loc_106B34E  +
mov ecx [ebp+8] +
mov [ebx] ecx +
mov ecx [ebp+8] +
mov esi 7FFFFFFFh +
cmp ecx [ebx] +
jnz loc_106B35E  +
test eax eax +
jnz loc_106B375  +
cmp byte ptr [ebp+0Fh] 2Bh +
jnz loc_106B368  +
cmp eax esi +
ja loc_106B375  +
cmp byte ptr [ebp+0Fh] 2Dh +
jnz loc_106B39A  +
cmp eax 80000000h +
jbe loc_106B398  +
call ds:_errno  +
mov dword ptr [eax] 22h +
test edi edi +
jz loc_106B38B  +
mov dword ptr [edi] 1 +
xor eax eax +
cmp byte ptr [ebp+0Fh] 2Dh +
setz al  +
add eax esi +
jmp loc_106B39A  +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+8] +
push eax  +
call sub_106BF3C  +
pop ecx  +
pop ecx  +
mov ecx [ebp+14h] +
mov ebx eax +
and ebx 8 +
test ecx ecx +
jz loc_106B3CF  +
and dword ptr [ecx] 0 +
xor edi edi +
and eax 0FFFFFFF7h +
inc edi  +
cmp eax edi +
jnz loc_106B438  +
push edi  +
lea eax [ebp-0Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push esi  +
call sub_106BCF5  +
add esp 14h +
test eax eax +
jnz loc_106B3F8  +
fldz   +
fstp  dword ptr [ebp-4] +
jmp loc_106B41B  +
cmp eax edi +
fild  dword ptr [ebp-8] +
mov ecx edi +
fstp  dword ptr [ebp-4] +
jle loc_106B41B  +
fild  dword ptr [ebp+ecx*4-8] +
inc ecx  +
cmp ecx eax +
fld  dword ptr [ebp-4] +
fmul  ds:dbl_104AAB0 +
faddp st(1) st +
fstp  dword ptr [ebp-4] +
jl loc_106B404  +
mov eax [ebp+10h] +
mov ecx [ebp-0Ch] +
push dword ptr [ebp+14h]  +
add ecx eax +
push ecx  +
fld  dword ptr [ebp-4] +
push ecx  +
fstp  dword ptr [esp] +
call sub_106BBA7  +
add esp 0Ch +
jmp loc_106B4B1  +
cmp eax 2 +
jnz loc_106B495  +
push edi  +
lea eax [ebp-0Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push esi  +
call sub_106B8FD  +
add esp 14h +
test eax eax +
jnz loc_106B45C  +
fldz   +
fstp  dword ptr [ebp-4] +
jmp loc_106B47F  +
cmp eax edi +
fild  dword ptr [ebp-8] +
mov ecx edi +
fstp  dword ptr [ebp-4] +
jle loc_106B47F  +
fild  dword ptr [ebp+ecx*4-8] +
inc ecx  +
cmp ecx eax +
fld  dword ptr [ebp-4] +
fmul  ds:dbl_104AAA8 +
faddp st(1) st +
fstp  dword ptr [ebp-4] +
jl loc_106B468  +
push dword ptr [ebp-0Ch]  +
lea eax [ebp-4] +
push eax  +
call sub_106B75E  +
pop ecx  +
pop ecx  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
jmp loc_106B427  +
***
cmp eax 3 +
jnz loc_106B4A2  +
fld  flt_108ED90 +
jmp loc_106B4B1  +
cmp eax 4 +
jnz loc_106B4AF  +
fld  flt_108EDA0 +
jmp loc_106B4B1  +
fldz   +
pop edi  +
fstp  dword ptr [ebp-4] +
fld  dword ptr [ebp-4] +
pop esi  +
test ebx ebx +
pop ebx  +
jz loc_106B4C0  +
fchs   +
fstp  dword ptr [ebp+8] +
fld  dword ptr [ebp+8] +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi [ebp+8] +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+8] +
push eax  +
call sub_106BF3C  +
pop ecx  +
pop ecx  +
mov ecx [ebp+14h] +
mov edi eax +
and edi 8 +
test ecx ecx +
jz loc_106B4F7  +
and dword ptr [ecx] 0 +
and eax 0FFFFFFF7h +
cmp eax 1 +
jnz loc_106B551  +
push 2  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push esi  +
call sub_106BCF5  +
add esp 14h +
test eax eax +
jnz loc_106B51F  +
fldz   +
fstp  qword ptr [ebp-8] +
jmp loc_106B543  +
fild  dword ptr [ebp-10h] +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
fstp  qword ptr [ebp-8] +
jle loc_106B543  +
fild  dword ptr [ebp+ecx*4-10h] +
inc ecx  +
cmp ecx eax +
fld  qword ptr [ebp-8] +
fmul  ds:dbl_104AAB0 +
faddp st(1) st +
fstp  qword ptr [ebp-8] +
jl loc_106B52C  +
mov eax [ebp+10h] +
mov ecx [ebp-14h] +
push dword ptr [ebp+14h]  +
add ecx eax +
push ecx  +
jmp loc_106B5AD  +
cmp eax 2 +
jnz loc_106B5BF  +
push eax  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push esi  +
call sub_106B8FD  +
add esp 14h +
test eax eax +
jnz loc_106B575  +
fldz   +
fstp  qword ptr [ebp-8] +
jmp loc_106B599  +
fild  dword ptr [ebp-10h] +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
fstp  qword ptr [ebp-8] +
jle loc_106B599  +
fild  dword ptr [ebp+ecx*4-10h] +
inc ecx  +
cmp ecx eax +
fld  qword ptr [ebp-8] +
fmul  ds:dbl_104AAA8 +
faddp st(1) st +
fstp  qword ptr [ebp-8] +
jl loc_106B582  +
push dword ptr [ebp-14h]  +
lea eax [ebp-8] +
push eax  +
call sub_106C1F5  +
pop ecx  +
pop ecx  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
fld  qword ptr [ebp-8] +
push ecx  +
push ecx  +
fstp  qword ptr [esp] +
call sub_106C088  +
add esp 10h +
jmp loc_106B5DB  +
cmp eax 3 +
jnz loc_106B5CC  +
fld  dbl_108EDB0 +
jmp loc_106B5DB  +
cmp eax 4 +
jnz loc_106B5D9  +
fld  dbl_108EDC0 +
jmp loc_106B5DB  +
fldz   +
test edi edi +
pop edi  +
pop esi  +
jz locret_106B5E3  +
fchs   +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi [ebp+8] +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+8] +
push eax  +
call sub_106BF3C  +
pop ecx  +
pop ecx  +
mov ecx [ebp+14h] +
mov edi eax +
and edi 8 +
test ecx ecx +
jz loc_106B614  +
and dword ptr [ecx] 0 +
and eax 0FFFFFFF7h +
cmp eax 1 +
jnz loc_106B66E  +
push 2  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push esi  +
call sub_106BCF5  +
add esp 14h +
test eax eax +
jnz loc_106B63C  +
fldz   +
fstp  qword ptr [ebp-8] +
jmp loc_106B660  +
fild  dword ptr [ebp-10h] +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
fstp  qword ptr [ebp-8] +
jle loc_106B660  +
fild  dword ptr [ebp+ecx*4-10h] +
inc ecx  +
cmp ecx eax +
fld  qword ptr [ebp-8] +
fmul  ds:dbl_104AAB0 +
faddp st(1) st +
fstp  qword ptr [ebp-8] +
jl loc_106B649  +
mov eax [ebp+10h] +
mov ecx [ebp-14h] +
push dword ptr [ebp+14h]  +
add ecx eax +
push ecx  +
jmp loc_106B6CA  +
cmp eax 2 +
jnz loc_106B6DC  +
push eax  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push esi  +
call sub_106B8FD  +
add esp 14h +
test eax eax +
jnz loc_106B692  +
fldz   +
fstp  qword ptr [ebp-8] +
jmp loc_106B6B6  +
fild  dword ptr [ebp-10h] +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
fstp  qword ptr [ebp-8] +
jle loc_106B6B6  +
fild  dword ptr [ebp+ecx*4-10h] +
inc ecx  +
cmp ecx eax +
fld  qword ptr [ebp-8] +
fmul  ds:dbl_104AAA8 +
faddp st(1) st +
fstp  qword ptr [ebp-8] +
jl loc_106B69F  +
push dword ptr [ebp-14h]  +
lea eax [ebp-8] +
push eax  +
call sub_106C5FD  +
pop ecx  +
pop ecx  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
fld  qword ptr [ebp-8] +
push ecx  +
push ecx  +
fstp  qword ptr [esp] +
call sub_106C48A  +
add esp 10h +
jmp loc_106B6F8  +
cmp eax 3 +
jnz loc_106B6E9  +
fld  dbl_108EDD0 +
jmp loc_106B6F8  +
cmp eax 4 +
jnz loc_106B6F6  +
fld  dbl_108EDE0 +
jmp loc_106B6F8  +
fldz   +
test edi edi +
pop edi  +
pop esi  +
jz locret_106B700  +
fchs   +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push 2  +
lea ecx [ebp+var_4] +
call sub_1014DE0  +
mov eax [ebp+arg_0] +
mov dword ptr [eax+4] 1 +
mov ecx [eax+4] +
mov ecx dword_108EEF4[ecx*4] +
test ecx ecx +
jz loc_106B73C  +
cmp ecx eax +
jz loc_106B73C  +
inc dword ptr [eax+4]  +
cmp dword ptr [eax+4] 8 +
jb loc_106B721  +
mov ecx [eax+4] +
mov dword_108EEF4[ecx*4] eax +
mov eax [eax+4] +
inc byte_108EF1C[eax]  +
lea ecx [ebp+var_4] +
call sub_1014DB4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
movzx ecx word ptr [esi+2] +
mov eax ecx +
push edi  +
shr eax 7 +
mov edi 0FFh +
and eax edi +
mov edx edi +
cmp ax dx +
jnz loc_106B795  +
test cl 7Fh +
jnz loc_106B78D  +
cmp word ptr [esi] 0 +
jz loc_106B7DA  +
push 2  +
pop eax  +
jmp loc_106B8F3  +
test ax ax +
jnz loc_106B7AF  +
push esi  +
call sub_106C60D  +
movzx eax ax +
pop ecx  +
xor ecx ecx +
cmp cx ax +
jl loc_106B8F1  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jle loc_106B7E2  +
movsx edx ax +
sub edi edx +
cmp edi ecx +
jg loc_106B7E2  +
fld  flt_108ED90 +
mov eax 8000h +
test [esi+2] ax +
jz loc_106B7D2  +
fchs   +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
fstp  dword ptr [esi] +
xor eax eax +
inc eax  +
jmp loc_106B8F3  +
movsx edx ax +
mov edi edx +
neg edi  +
cmp edi ecx +
jge loc_106B80F  +
add ecx eax +
mov ax [esi+2] +
mov edx 807Fh +
and ax dx +
shl ecx 7 +
or cx ax +
mov [esi+2] cx +
mov eax 0FFFFFFFFh +
jmp loc_106B8F3  +
movzx eax word ptr [esi+2] +
mov edi eax +
and eax 7Fh +
lea ecx [ecx+edx-1] +
or eax 80h +
lea edx [ecx+18h] +
and edi 8000h +
mov [esi+2] ax +
cmp edx 17h +
ja loc_106B8E8  +
xor ebx ebx +
cmp cx 0FFF0h +
movzx edx cx +
jg loc_106B854  +
movzx ebx word ptr [esi] +
mov [esi] ax +
xor eax eax +
add ecx 10h +
mov [esi+2] ax +
movzx edx cx +
neg edx  +
movzx eax dx +
mov [ebp+arg_0] eax +
test ax ax +
jz loc_106B8A8  +
cwde   +
push 10h  +
pop ecx  +
sub ecx eax +
movzx eax word ptr [esi] +
mov [ebp+var_4] ecx +
mov edx eax +
shl edx cl +
xor ecx ecx +
test bx bx +
setnz cl  +
or dx cx +
movzx ecx dx +
movzx edx word ptr [esi+2] +
mov [ebp+var_8] ecx +
mov cx word ptr [ebp+arg_0] +
shr ax cl +
mov ecx [ebp+var_4] +
mov ebx edx +
shl ebx cl +
mov cx word ptr [ebp+arg_0] +
or ax bx +
mov ebx [ebp+var_8] +
shr dx cl +
mov [esi] ax +
mov [esi+2] dx +
or [esi+2] di +
movzx eax word ptr [esi+2] +
mov ecx 8000h +
mov edx ecx +
cmp dx bx +
jb loc_106B8C6  +
cmp cx bx +
jnz loc_106B8D8  +
test byte ptr [esi] 1 +
jz loc_106B8D8  +
inc word ptr [esi]  +
movzx ecx word ptr [esi] +
test cx cx +
jnz loc_106B8D8  +
inc eax  +
mov [esi+2] ax +
jmp loc_106B8E3  +
cmp ax di +
jnz loc_106B8E3  +
cmp word ptr [esi] 0 +
jz loc_106B8F1  +
or eax 0FFFFFFFFh +
jmp loc_106B8F3  +
xor eax eax +
mov [esi+2] di +
mov [esi] ax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_40] eax +
mov eax [ebp+arg_10] +
push ebx  +
imul eax eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_C] +
push 23h  +
pop ecx  +
cmp eax ecx +
mov [ebp+var_34] eax +
jle loc_106B931  +
mov [ebp+var_34] ecx +
xor eax eax +
mov [edi] eax +
mov [edi+4] eax +
cmp byte ptr [esi] 30h +
mov [ebp+var_38] eax +
jnz loc_106B94D  +
mov [ebp+var_38] 1 +
inc esi  +
cmp byte ptr [esi] 30h +
jz loc_106B947  +
mov [ebp+var_2C] eax +
movsx eax byte ptr [esi] +
push 16h  +
push eax  +
mov ebx offset a0123456789ab_0 +
push ebx  +
call ds:memchr  +
add esp 0Ch +
test eax eax +
jz loc_106B9A1  +
mov [ebp+var_38] 1 +
mov ecx [ebp+var_2C] +
cmp ecx [ebp+var_34] +
jge loc_106B98A  +
sub eax ebx +
mov al ds:byte_106BB60[eax] +
mov byte ptr [ebp+ecx+var_28] al +
inc ecx  +
mov [ebp+var_2C] ecx +
jmp loc_106B98C  +
inc dword ptr [edi]  +
inc esi  +
movsx eax byte ptr [esi] +
push 16h  +
push eax  +
push ebx  +
call ds:memchr  +
add esp 0Ch +
test eax eax +
jnz loc_106B970  +
call ds:localeconv  +
mov eax [eax] +
mov cl [esi] +
cmp cl [eax] +
jnz loc_106B9B0  +
inc esi  +
cmp [ebp+var_2C] 0 +
jnz loc_106B9CA  +
cmp byte ptr [esi] 30h +
jnz loc_106B9CA  +
mov [ebp+var_38] 1 +
dec dword ptr [edi]  +
inc esi  +
cmp byte ptr [esi] 30h +
jz loc_106B9C2  +
movsx eax byte ptr [esi] +
push 16h  +
push eax  +
push ebx  +
call ds:memchr  +
add esp 0Ch +
test eax eax +
jz loc_106BA14  +
mov [ebp+var_38] 1 +
mov ecx [ebp+var_2C] +
cmp ecx [ebp+var_34] +
jge loc_106B9FF  +
sub eax ebx +
mov al ds:byte_106BB60[eax] +
mov byte ptr [ebp+ecx+var_28] al +
inc ecx  +
dec dword ptr [edi]  +
mov [ebp+var_2C] ecx +
inc esi  +
movsx eax byte ptr [esi] +
push 16h  +
push eax  +
push ebx  +
call ds:memchr  +
add esp 0Ch +
test eax eax +
jnz loc_106B9E5  +
mov eax [ebp+var_34] +
cmp eax [ebp+var_2C] +
jge loc_106BA2C  +
cmp byte ptr [ebp+eax+var_28] 8 +
jl loc_106BA27  +
inc byte ptr [ebp+eax+var_2C+3]  +
inc dword ptr [edi]  +
mov [ebp+var_2C] eax +
mov ecx [ebp+var_2C] +
test ecx ecx +
jle loc_106BA49  +
lea eax [ebp+var_28] +
dec eax  +
cmp byte ptr [eax+ecx] 0 +
jnz loc_106BA47  +
inc dword ptr [edi]  +
dec ecx  +
mov [ebp+var_2C] ecx +
test ecx ecx +
jg loc_106BA37  +
test ecx ecx +
jnz loc_106BA56  +
mov byte ptr [ebp+var_28] 0 +
mov [ebp+var_2C] 1 +
mov eax [ebp+var_2C] +
cdq   +
push 7  +
pop ebx  +
idiv  ebx +
push ebx  +
pop eax  +
shl dword ptr [edi] 2 +
xor ecx ecx +
mov [ebp+var_34] ecx +
sub eax edx +
mov [ebp+var_3C] eax +
cdq   +
idiv  ebx +
mov ebx edx +
neg ebx  +
sbb ebx ebx +
neg ebx  +
cmp [ebp+var_2C] ecx +
jle loc_106BAC2  +
mov edx [ebp+var_3C] +
lea eax [ebp+var_28] +
sub edx eax +
mov [ebp+var_3C] edx +
jmp loc_106BA8E  +
mov edx [ebp+var_3C] +
lea eax [ebp+ecx+var_28] +
add eax edx +
push 7  +
cdq   +
pop ecx  +
idiv  ecx +
mov ecx [ebp+var_34] +
test edx edx +
jnz loc_106BAA9  +
movsx eax byte ptr [ebp+ecx+var_28] +
inc ebx  +
jmp loc_106BAB6  +
mov eax [edi+ebx*4] +
movsx edx byte ptr [ebp+ecx+var_28] +
shl eax 4 +
add eax edx +
inc ecx  +
cmp ecx [ebp+var_2C] +
mov [edi+ebx*4] eax +
mov [ebp+var_34] ecx +
jl loc_106BA8B  +
xor ecx ecx +
cmp [ebp+var_38] ecx +
jz loc_106BB3B  +
mov al [esi] +
cmp al 70h +
jz loc_106BAD3  +
cmp al 50h +
jnz loc_106BB3B  +
inc esi  +
mov al [esi] +
cmp al 2Bh +
jz loc_106BAE4  +
cmp al 2Dh +
jz loc_106BAE4  +
mov [ebp+var_2D] 2Bh +
jmp loc_106BAE8  +
mov [ebp+var_2D] al +
inc esi  +
movzx eax byte ptr [esi] +
push eax  +
mov [ebp+var_2C] ecx +
mov [ebp+var_38] ecx +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_106BB2D  +
mov [ebp+var_38] 1 +
cmp [ebp+var_2C] 5F5E100h +
jge loc_106BB1D  +
mov eax [ebp+var_2C] +
movzx ecx byte ptr [esi] +
imul eax eax +
lea eax [eax+ecx-30h] +
mov [ebp+var_2C] eax +
inc esi  +
movzx eax byte ptr [esi] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jnz loc_106BB04  +
cmp [ebp+var_2D] 2Dh +
jnz loc_106BB36  +
neg [ebp+var_2C]  +
mov eax [ebp+var_2C] +
add [edi] eax +
mov eax [ebp+var_40] +
test eax eax +
jz loc_106BB4D  +
cmp [ebp+var_38] 0 +
jnz loc_106BB4B  +
mov esi [ebp+arg_0] +
mov [eax] esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push esi  +
push eax  +
call sub_106C6D4  +
fld  dword ptr [esi] +
movsx eax word ptr [ebp+var_4] +
fmul  [ebp+arg_0] +
push eax  +
push esi  +
fstp  dword ptr [esi] +
call sub_106B75E  +
add esp 10h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_106BCCD  +
fldz   +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 44h +
jnp loc_106BCCD  +
fld1   +
push esi  +
fstp  [ebp+arg_4] +
test ebx ebx +
jge loc_106BC47  +
neg ebx  +
jz loc_106BBF7  +
xor eax eax +
cmp eax 14h +
jnb loc_106BBF7  +
test bl 1 +
jz loc_106BBEE  +
fld  ds:flt_106BCD4[eax] +
fmul  [ebp+arg_4] +
fstp  [ebp+arg_4] +
shr ebx 1 +
add eax 4 +
test ebx ebx +
ja loc_106BBD8  +
fld  [ebp+arg_4] +
push ecx  +
fld1   +
lea esi [ebp+arg_0] +
fdivrp st(1) st +
fstp  [ebp+arg_4] +
fld  [ebp+arg_4] +
fstp  [esp+0Ch+var_C] +
call sub_106BB7B  +
movzx eax ax +
pop ecx  +
test ax ax +
jge loc_106BCAB  +
test ebx ebx +
jbe loc_106BCAB  +
fld  ds:flt_106BCEC +
push ecx  +
lea esi [ebp+arg_0] +
fstp  [esp+0Ch+var_C] +
call sub_106BB7B  +
movzx eax ax +
pop ecx  +
xor ecx ecx +
cmp cx ax +
jle loc_106BCAB  +
dec ebx  +
jz loc_106BCAB  +
jmp loc_106BC25  +
jle loc_106BCA8  +
xor eax eax +
cmp eax 14h +
jnb loc_106BC6A  +
test bl 1 +
jz loc_106BC61  +
fld  ds:flt_106BCD4[eax] +
fmul  [ebp+arg_4] +
fstp  [ebp+arg_4] +
sar ebx 1 +
add eax 4 +
test ebx ebx +
jg loc_106BC4B  +
fld  [ebp+arg_4] +
push ecx  +
lea esi [ebp+arg_0] +
fstp  [esp+0Ch+var_C] +
call sub_106BB7B  +
movzx eax ax +
pop ecx  +
test ax ax +
jl loc_106BCA2  +
jmp loc_106BCAB  +
fld  ds:flt_106BCE8 +
push ecx  +
lea esi [ebp+arg_0] +
fstp  [esp+0Ch+var_C] +
call sub_106BB7B  +
movzx eax ax +
pop ecx  +
xor ecx ecx +
cmp cx ax +
jle loc_106BCAB  +
dec ebx  +
test ebx ebx +
jle loc_106BCAB  +
jmp loc_106BC84  +
mov eax [ebp+arg_4] +
pop esi  +
test ax ax +
jz loc_106BCB7  +
cmp ax 1 +
jnz loc_106BCCD  +
call ds:_errno  +
mov dword ptr [eax] 22h +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_106BCCD  +
or dword ptr [eax] 1 +
fld  [ebp+arg_0] +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_4C] eax +
mov eax [ebp+arg_10] +
push ebx  +
imul eax eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_C] +
push 2Dh  +
pop ecx  +
cmp eax ecx +
mov [ebp+var_44] eax +
jle loc_106BD29  +
mov [ebp+var_44] ecx +
xor ebx ebx +
mov [edi] ebx +
mov [edi+4] ebx +
cmp byte ptr [esi] 30h +
mov [ebp+var_40] ebx +
jnz loc_106BD45  +
mov [ebp+var_40] 1 +
inc esi  +
cmp byte ptr [esi] 30h +
jz loc_106BD3F  +
movzx eax byte ptr [esi] +
push eax  +
mov [ebp+var_38] ebx +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_106BD83  +
mov [ebp+var_40] 1 +
cmp ebx [ebp+var_44] +
jg loc_106BD6E  +
mov al [esi] +
sub al 30h +
mov byte ptr [ebp+ebx+var_34] al +
inc ebx  +
jmp loc_106BD70  +
inc dword ptr [edi]  +
inc esi  +
movzx eax byte ptr [esi] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jnz loc_106BD5E  +
mov [ebp+var_38] ebx +
call ds:localeconv  +
mov eax [eax] +
mov cl [esi] +
cmp cl [eax] +
jnz loc_106BD92  +
inc esi  +
test ebx ebx +
jnz loc_106BDAA  +
cmp byte ptr [esi] 30h +
jnz loc_106BDAA  +
mov [ebp+var_40] 1 +
dec dword ptr [edi]  +
inc esi  +
cmp byte ptr [esi] 30h +
jz loc_106BDA2  +
movzx eax byte ptr [esi] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_106BDE3  +
mov [ebp+var_40] 1 +
cmp ebx [ebp+var_44] +
jg loc_106BDD0  +
mov al [esi] +
sub al 30h +
mov byte ptr [ebp+ebx+var_34] al +
inc ebx  +
dec dword ptr [edi]  +
inc esi  +
movzx eax byte ptr [esi] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jnz loc_106BDC0  +
mov [ebp+var_38] ebx +
mov eax [ebp+var_44] +
cmp eax ebx +
jge loc_106BDFC  +
cmp byte ptr [ebp+eax+var_34] 5 +
jl loc_106BDF5  +
inc byte ptr [ebp+eax+var_38+3]  +
inc dword ptr [edi]  +
mov [ebp+var_38] eax +
mov ebx eax +
xor ecx ecx +
cmp ebx ecx +
jle loc_106BE18  +
lea eax [ebp+var_34] +
dec eax  +
cmp byte ptr [eax+ebx] 0 +
jnz loc_106BE16  +
inc dword ptr [edi]  +
dec ebx  +
cmp ebx ecx +
mov [ebp+var_38] ebx +
jg loc_106BE06  +
cmp ebx ecx +
jnz loc_106BE28  +
mov [ebp+var_38] 1 +
mov ebx [ebp+var_38] +
mov byte ptr [ebp+var_34] 0 +
cmp [ebp+var_40] ecx +
jz loc_106BF12  +
mov eax ebx +
cdq   +
push 9  +
pop ebx  +
idiv  ebx +
push ebx  +
pop eax  +
mov [ebp+var_44] ecx +
sub eax edx +
mov [ebp+var_48] eax +
cdq   +
idiv  ebx +
mov ebx edx +
neg ebx  +
sbb ebx ebx +
neg ebx  +
cmp [ebp+var_38] 0 +
jle loc_106BE98  +
mov edx [ebp+var_48] +
lea eax [ebp+var_34] +
sub edx eax +
mov [ebp+var_48] edx +
jmp loc_106BE64  +
mov edx [ebp+var_48] +
lea eax [ebp+ecx+var_34] +
add eax edx +
push 9  +
cdq   +
pop ecx  +
idiv  ecx +
mov ecx [ebp+var_44] +
test edx edx +
jnz loc_106BE7F  +
movsx eax byte ptr [ebp+ecx+var_34] +
inc ebx  +
jmp loc_106BE8C  +
mov eax [edi+ebx*4] +
movsx edx byte ptr [ebp+ecx+var_34] +
imul eax eax +
add eax edx +
inc ecx  +
cmp ecx [ebp+var_38] +
mov [edi+ebx*4] eax +
mov [ebp+var_44] ecx +
jl loc_106BE61  +
mov al [esi] +
cmp al 65h +
jz loc_106BEA2  +
cmp al 45h +
jnz loc_106BF0C  +
inc esi  +
mov al [esi] +
cmp al 2Bh +
jz loc_106BEB3  +
cmp al 2Dh +
jz loc_106BEB3  +
mov [ebp+var_39] 2Bh +
jmp loc_106BEB7  +
mov [ebp+var_39] al +
inc esi  +
movzx eax byte ptr [esi] +
and [ebp+var_38] 0 +
and [ebp+var_40] 0 +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_106BEFE  +
mov [ebp+var_40] 1 +
cmp [ebp+var_38] 5F5E100h +
jge loc_106BEEE  +
mov eax [ebp+var_38] +
movzx ecx byte ptr [esi] +
imul eax eax +
lea eax [eax+ecx-30h] +
mov [ebp+var_38] eax +
inc esi  +
movzx eax byte ptr [esi] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jnz loc_106BED5  +
cmp [ebp+var_39] 2Dh +
jnz loc_106BF07  +
neg [ebp+var_38]  +
mov eax [ebp+var_38] +
add [edi] eax +
cmp [ebp+var_40] 0 +
jnz loc_106BF14  +
xor ebx ebx +
mov eax [ebp+var_4C] +
test eax eax +
jz loc_106BF26  +
cmp [ebp+var_40] 0 +
jnz loc_106BF24  +
mov esi [ebp+arg_0] +
mov [eax] esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
mov esi [eax] +
push edi  +
mov edi ds:isspace +
jmp loc_106BF56  +
inc esi  +
movzx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
test eax eax +
jnz loc_106BF55  +
mov al [esi] +
cmp al 2Dh +
jnz loc_106BF70  +
mov [ebp+var_4] 8 +
jmp loc_106BF74  +
cmp al 2Bh +
jnz loc_106BF75  +
inc esi  +
mov al [esi] +
mov dl 6Eh +
cmp al dl +
jz loc_106BFF5  +
cmp al 4Eh +
jz loc_106BFF5  +
cmp al 69h +
jz loc_106BF92  +
cmp al 49h +
jz loc_106BF92  +
or [ebp+var_4] 1 +
jmp loc_106C04B  +
inc esi  +
mov al [esi] +
cmp al dl +
jz loc_106BF9D  +
cmp al 4Eh +
jnz loc_106C00B  +
inc esi  +
mov al [esi] +
cmp al 66h +
jz loc_106BFA8  +
cmp al 46h +
jnz loc_106C00B  +
or [ebp+var_4] 3 +
inc esi  +
mov al [esi] +
cmp al 69h +
jz loc_106BFBB  +
cmp al 49h +
jnz loc_106C042  +
lea eax [esi+1] +
mov cl [eax] +
cmp cl dl +
jz loc_106BFC9  +
cmp cl 4Eh +
jnz loc_106C042  +
inc eax  +
mov cl [eax] +
cmp cl 69h +
jz loc_106BFD6  +
cmp cl 49h +
jnz loc_106C042  +
inc eax  +
mov cl [eax] +
cmp cl 74h +
jz loc_106BFE3  +
cmp cl 54h +
jnz loc_106C042  +
inc eax  +
mov cl [eax] +
cmp cl 79h +
jz loc_106BFF0  +
cmp cl 59h +
jnz loc_106C042  +
lea esi [eax+1] +
jmp loc_106C042  +
inc esi  +
mov al [esi] +
cmp al 61h +
jz loc_106C000  +
cmp al 41h +
jnz loc_106C00B  +
inc esi  +
mov al [esi] +
cmp al dl +
jz loc_106C016  +
cmp al 4Eh +
jz loc_106C016  +
mov eax [ebp+arg_0] +
mov esi [eax] +
and [ebp+var_4] 0 +
jmp loc_106C042  +
inc esi  +
cmp byte ptr [esi] 28h +
mov edi esi +
mov [ebp+var_4] 4 +
jnz loc_106C03A  +
inc edi  +
movzx eax byte ptr [edi] +
push eax  +
call ds:isalnum  +
pop ecx  +
test eax eax +
jnz loc_106C025  +
cmp byte ptr [edi] 5Fh +
jz loc_106C025  +
cmp byte ptr [edi] 29h +
jnz loc_106C042  +
lea esi [edi+1] +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_106C04B  +
mov [eax] esi +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push esi  +
push eax  +
call sub_106C75E  +
fld  qword ptr [esi] +
movsx eax word ptr [ebp+var_4] +
fmul  [ebp+arg_0] +
push eax  +
push esi  +
fstp  qword ptr [esi] +
call sub_106C1F5  +
add esp 10h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
test ebx ebx +
jz loc_106C1A1  +
fldz   +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 44h +
jnp loc_106C1A1  +
fld1   +
push esi  +
fld  st +
test ebx ebx +
jge loc_106C11A  +
neg ebx  +
jz loc_106C0D1  +
xor eax eax +
cmp eax 40h +
jnb loc_106C0D1  +
test bl 1 +
jz loc_106C0C8  +
fmul  ds:dbl_106C1A8[eax] +
shr ebx 1 +
add eax 8 +
test ebx ebx +
ja loc_106C0B8  +
fdivp st(1) st +
push ecx  +
push ecx  +
lea esi [ebp+arg_0] +
fstp  [esp+10h+var_10] +
call sub_106C05C  +
movzx eax ax +
pop ecx  +
pop ecx  +
test ax ax +
jge loc_106C17F  +
test ebx ebx +
jbe loc_106C17F  +
fld  ds:dbl_104AAD0 +
push ecx  +
push ecx  +
lea esi [ebp+arg_0] +
fstp  [esp+10h+var_10] +
call sub_106C05C  +
pop ecx  +
movzx eax ax +
pop ecx  +
xor ecx ecx +
cmp cx ax +
jle loc_106C17F  +
dec ebx  +
jz loc_106C17F  +
jmp loc_106C0F6  +
fstp  st(1) +
test ebx ebx +
jle loc_106C17A  +
xor eax eax +
cmp eax 40h +
jnb loc_106C13B  +
test bl 1 +
jz loc_106C132  +
fmul  ds:dbl_106C1A8[eax] +
sar ebx 1 +
add eax 8 +
test ebx ebx +
jg loc_106C122  +
push ecx  +
push ecx  +
lea esi [ebp+arg_0] +
fstp  [esp+10h+var_10] +
call sub_106C05C  +
movzx eax ax +
pop ecx  +
pop ecx  +
test ax ax +
jl loc_106C174  +
jmp loc_106C17F  +
fld  ds:dbl_106C1E8 +
push ecx  +
push ecx  +
lea esi [ebp+arg_0] +
fstp  [esp+10h+var_10] +
call sub_106C05C  +
pop ecx  +
movzx eax ax +
pop ecx  +
xor ecx ecx +
cmp cx ax +
jle loc_106C17F  +
dec ebx  +
test ebx ebx +
jle loc_106C17F  +
jmp loc_106C154  +
mov eax [ebp+arg_8] +
fstp  st +
pop esi  +
test ax ax +
jz loc_106C18B  +
cmp ax 1 +
jnz loc_106C1A1  +
call ds:_errno  +
mov dword ptr [eax] 22h +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_106C1A1  +
or dword ptr [eax] 1 +
fld  [ebp+arg_0] +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_0] +
movzx ecx word ptr [esi+6] +
mov eax ecx +
push edi  +
shr eax 4 +
mov edi 7FFh +
and eax edi +
mov edx edi +
cmp ax dx +
jnz loc_106C239  +
test cl 0Fh +
jnz loc_106C231  +
xor eax eax +
cmp [esi+4] ax +
jnz loc_106C231  +
cmp [esi+2] ax +
jnz loc_106C231  +
cmp [esi] ax +
jz loc_106C27B  +
push 2  +
pop eax  +
jmp loc_106C455  +
test ax ax +
jnz loc_106C256  +
push esi  +
call sub_106C7F6  +
movzx eax ax +
pop ecx  +
xor ecx ecx +
cmp cx ax +
jge loc_106C256  +
xor eax eax +
jmp loc_106C455  +
mov edx [ebp+arg_4] +
test edx edx +
jle loc_106C283  +
movsx ecx ax +
sub edi ecx +
cmp edi edx +
jg loc_106C283  +
fld  dbl_108EDB0 +
mov eax 8000h +
test [esi+6] ax +
jz loc_106C279  +
fchs   +
fstp  qword ptr [esi] +
xor eax eax +
inc eax  +
jmp loc_106C455  +
push ebx  +
movsx ebx ax +
mov ecx ebx +
neg ecx  +
cmp ecx edx +
jge loc_106C2B1  +
add edx eax +
mov ax [esi+6] +
mov ecx 800Fh +
and ax cx +
shl edx 4 +
or dx ax +
mov [esi+6] dx +
mov eax 0FFFFFFFFh +
jmp loc_106C454  +
movzx eax word ptr [esi+6] +
mov ecx eax +
and eax 0Fh +
or eax 10h +
movzx edi ax +
mov [esi+6] ax +
lea eax [edx+ebx-1] +
and ecx 8000h +
lea edx [eax+35h] +
mov [ebp+var_C] ecx +
cmp edx 34h +
ja loc_106C441  +
xor ebx ebx +
cmp ax 0FFF0h +
movzx edx ax +
mov [ebp+var_10] ebx +
jg loc_106C356  +
movzx edx word ptr [esi+2] +
mov ebx 0FFF0h +
sub bx ax +
shr bx 4 +
inc bx  +
movzx ebx bx +
mov [ebp+var_8] ebx +
shl ebx 4 +
movzx ecx di +
movzx edi word ptr [esi+4] +
add ebx eax +
movzx eax bx +
mov ebx [ebp+var_10] +
mov [ebp+var_4] ecx +
movzx ecx word ptr [esi] +
mov [ebp+arg_0] eax +
xor eax eax +
test bx bx +
setnz al  +
or ax cx +
movzx ecx dx +
movzx edx di +
movzx edi word ptr [ebp+var_4] +
and [ebp+var_4] 0 +
dec [ebp+var_8]  +
movzx ebx ax +
jnz loc_106C31E  +
xor eax eax +
mov [esi+2] dx +
mov edx [ebp+arg_0] +
mov [esi] cx +
mov ecx [ebp+var_C] +
mov [esi+6] ax +
mov [esi+4] di +
neg edx  +
movzx eax dx +
mov [ebp+arg_0] eax +
test ax ax +
jz loc_106C3DA  +
cwde   +
push 10h  +
pop edi  +
sub edi eax +
movzx eax word ptr [esi] +
mov ecx edi +
mov edx eax +
shl edx cl +
xor ecx ecx +
test bx bx +
setnz cl  +
mov [ebp+var_8] edi +
or dx cx +
mov cx word ptr [ebp+arg_0] +
shr ax cl +
movzx ebx dx +
movzx edx word ptr [esi+2] +
mov ecx edi +
mov edi edx +
shl edi cl +
mov cx word ptr [ebp+arg_0] +
shr dx cl +
mov ecx [ebp+var_8] +
or ax di +
mov [esi] ax +
movzx eax word ptr [esi+4] +
mov edi eax +
shl edi cl +
mov cx word ptr [ebp+arg_0] +
shr ax cl +
mov ecx [ebp+var_8] +
or dx di +
mov [esi+2] dx +
movzx edx word ptr [esi+6] +
mov edi edx +
shl edi cl +
mov cx word ptr [ebp+arg_0] +
or ax di +
shr dx cl +
mov ecx [ebp+var_C] +
mov [esi+4] ax +
mov [esi+6] dx +
or [esi+6] cx +
movzx edx word ptr [esi+6] +
mov eax 8000h +
mov edi eax +
cmp di bx +
jb loc_106C3F8  +
cmp ax bx +
jnz loc_106C424  +
test byte ptr [esi] 1 +
jz loc_106C424  +
inc word ptr [esi]  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_106C424  +
inc word ptr [esi+2]  +
movzx eax word ptr [esi+2] +
test ax ax +
jnz loc_106C424  +
inc word ptr [esi+4]  +
movzx eax word ptr [esi+4] +
test ax ax +
jnz loc_106C424  +
inc edx  +
mov [esi+6] dx +
jmp loc_106C43C  +
cmp dx cx +
jnz loc_106C43C  +
xor eax eax +
cmp [esi+4] ax +
jnz loc_106C43C  +
cmp [esi+2] ax +
jnz loc_106C43C  +
cmp [esi] ax +
jz loc_106C452  +
or eax 0FFFFFFFFh +
jmp loc_106C454  +
xor eax eax +
mov [esi+6] cx +
mov [esi+4] ax +
mov [esi+2] ax +
mov [esi] ax +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push esi  +
push eax  +
call sub_106C90B  +
fld  qword ptr [esi] +
movsx eax word ptr [ebp+var_4] +
fmul  [ebp+arg_0] +
push eax  +
push esi  +
fstp  qword ptr [esi] +
call sub_106C5FD  +
add esp 10h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
test ebx ebx +
jz loc_106C5A3  +
fldz   +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 44h +
jnp loc_106C5A3  +
fld1   +
push esi  +
fld  st +
test ebx ebx +
jge loc_106C51C  +
neg ebx  +
jz loc_106C4D3  +
xor eax eax +
cmp eax 40h +
jnb loc_106C4D3  +
test bl 1 +
jz loc_106C4CA  +
fmul  ds:dbl_106C5B0[eax] +
shr ebx 1 +
add eax 8 +
test ebx ebx +
ja loc_106C4BA  +
fdivp st(1) st +
push ecx  +
push ecx  +
lea esi [ebp+arg_0] +
fstp  [esp+10h+var_10] +
call sub_106C45E  +
movzx eax ax +
pop ecx  +
pop ecx  +
test ax ax +
jge loc_106C581  +
test ebx ebx +
jbe loc_106C581  +
fld  ds:dbl_104AAD0 +
push ecx  +
push ecx  +
lea esi [ebp+arg_0] +
fstp  [esp+10h+var_10] +
call sub_106C45E  +
pop ecx  +
movzx eax ax +
pop ecx  +
xor ecx ecx +
cmp cx ax +
jle loc_106C581  +
dec ebx  +
jz loc_106C581  +
jmp loc_106C4F8  +
fstp  st(1) +
test ebx ebx +
jle loc_106C57C  +
xor eax eax +
cmp eax 40h +
jnb loc_106C53D  +
test bl 1 +
jz loc_106C534  +
fmul  ds:dbl_106C5B0[eax] +
sar ebx 1 +
add eax 8 +
test ebx ebx +
jg loc_106C524  +
push ecx  +
push ecx  +
lea esi [ebp+arg_0] +
fstp  [esp+10h+var_10] +
call sub_106C45E  +
movzx eax ax +
pop ecx  +
pop ecx  +
test ax ax +
jl loc_106C576  +
jmp loc_106C581  +
fld  ds:dbl_106C5F0 +
push ecx  +
push ecx  +
lea esi [ebp+arg_0] +
fstp  [esp+10h+var_10] +
call sub_106C45E  +
pop ecx  +
movzx eax ax +
pop ecx  +
xor ecx ecx +
cmp cx ax +
jle loc_106C581  +
dec ebx  +
test ebx ebx +
jle loc_106C581  +
jmp loc_106C556  +
mov eax [ebp+arg_8] +
fstp  st +
pop esi  +
test ax ax +
jz loc_106C58D  +
cmp ax 1 +
jnz loc_106C5A3  +
call ds:_errno  +
mov dword ptr [eax] 22h +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_106C5A3  +
or dword ptr [eax] 1 +
fld  [ebp+arg_0] +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_106C1F5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
movzx edx word ptr [ecx+2] +
push esi  +
mov esi edx +
and esi 8000h +
and edx 7Fh +
mov [ebp+arg_0] 1 +
mov [ecx+2] dx +
jnz loc_106C64E  +
movzx eax word ptr [ecx] +
test ax ax +
jz loc_106C6C2  +
mov [ecx+2] ax +
xor eax eax +
mov [ecx] ax +
mov [ebp+arg_0] 0FFFFFFF1h +
mov eax 80h +
mov edx eax +
push ebx  +
push edi  +
cmp [ecx+2] dx +
jnb loc_106C684  +
movzx edx word ptr [ecx] +
mov bx [ecx+2] +
mov di dx +
add edx edx +
shr di 0Fh +
add bx bx +
or di bx +
dec [ebp+arg_0]  +
mov [ecx] dx +
mov edx eax +
mov [ecx+2] di +
cmp di dx +
jb loc_106C65D  +
mov edi 100h +
mov eax edi +
cmp ax [ecx+2] +
ja loc_106C6B7  +
movzx edx word ptr [ecx+2] +
mov bx [ecx] +
mov eax edx +
shl eax 0Fh +
shr bx 1 +
or ax bx +
shr dx 1 +
inc [ebp+arg_0]  +
mov [ecx] ax +
mov eax edi +
mov [ecx+2] dx +
cmp ax dx +
jbe loc_106C691  +
and word ptr [ecx+2] 7Fh +
movzx edx word ptr [ecx+2] +
pop edi  +
pop ebx  +
mov ax word ptr [ebp+arg_0] +
or edx esi +
mov [ecx+2] dx +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
mov ax [esi+2] +
mov ecx 0FFh +
shr ax 7 +
mov edx ecx +
and ax dx +
movzx eax ax +
cmp ax cx +
jnz loc_106C712  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx] ax +
test byte ptr [esi+2] 7Fh +
jnz loc_106C70D  +
cmp [esi] ax +
jnz loc_106C70D  +
inc eax  +
jmp loc_106C756  +
push 2  +
pop eax  +
jmp loc_106C756  +
xor ecx ecx +
cmp cx ax +
jl loc_106C732  +
push esi  +
call sub_106C60D  +
movzx eax ax +
pop ecx  +
test ax ax +
jle loc_106C732  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx] ax +
jmp loc_106C756  +
mov cx [esi+2] +
mov edx 0BF7Fh +
and cx dx +
mov edx 3F00h +
or cx dx +
mov [esi+2] cx +
mov ecx [ebp+arg_0] +
add eax 0FFFFFF82h +
mov [ecx] ax +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
mov ax [esi+6] +
mov ecx 7FFh +
shr ax 4 +
mov edx ecx +
and ax dx +
movzx eax ax +
cmp ax cx +
jnz loc_106C7A8  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx] ax +
test byte ptr [esi+6] 0Fh +
jnz loc_106C7A3  +
cmp [esi+4] ax +
jnz loc_106C7A3  +
cmp [esi+2] ax +
jnz loc_106C7A3  +
cmp [esi] ax +
jnz loc_106C7A3  +
inc eax  +
jmp loc_106C7EE  +
push 2  +
pop eax  +
jmp loc_106C7EE  +
xor ecx ecx +
cmp cx ax +
jl loc_106C7C8  +
push esi  +
call sub_106C7F6  +
movzx eax ax +
pop ecx  +
test ax ax +
jle loc_106C7C8  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx] ax +
jmp loc_106C7EE  +
mov cx [esi+6] +
mov edx 0BFEFh +
and cx dx +
mov edx 3FE0h +
or cx dx +
mov [esi+6] cx +
mov ecx [ebp+arg_0] +
add eax 0FFFFFC02h +
mov [ecx] ax +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
movzx edx word ptr [ecx+6] +
push esi  +
push edi  +
mov edi edx +
xor eax eax +
and edi 8000h +
inc eax  +
and edx 0Fh +
mov [ecx+6] dx +
jnz loc_106C854  +
xor esi esi +
cmp [ecx+4] si +
jnz loc_106C82F  +
cmp [ecx+2] si +
jnz loc_106C82F  +
cmp [ecx] si +
jz loc_106C8FC  +
mov dx [ecx+4] +
mov [ecx+6] dx +
mov dx [ecx+2] +
mov [ecx+4] dx +
mov dx [ecx] +
mov [ecx+2] dx +
xor edx edx +
mov [ecx] dx +
sub eax 10h +
cmp [ecx+6] si +
jz loc_106C82F  +
push ebx  +
jmp loc_106C89D  +
movzx edx word ptr [ecx+4] +
mov bx [ecx+6] +
add bx bx +
mov si dx +
shr si 0Fh +
or si bx +
mov [ecx+6] si +
movzx esi word ptr [ecx+2] +
mov bx si +
shr bx 0Fh +
add edx edx +
or bx dx +
movzx edx word ptr [ecx] +
mov [ecx+4] bx +
mov bx dx +
shr bx 0Fh +
add esi esi +
or bx si +
add edx edx +
mov [ecx+2] bx +
mov [ecx] dx +
dec eax  +
cmp word ptr [ecx+6] 10h +
jnb loc_106C8E9  +
jmp loc_106C857  +
movzx edx word ptr [ecx+2] +
mov bx [ecx] +
mov esi edx +
shr bx 1 +
shl esi 0Fh +
or si bx +
mov [ecx] si +
movzx esi word ptr [ecx+4] +
mov ebx esi +
shr dx 1 +
shl ebx 0Fh +
or dx bx +
mov [ecx+2] dx +
movzx edx word ptr [ecx+6] +
mov ebx edx +
shr si 1 +
shl ebx 0Fh +
or si bx +
shr dx 1 +
mov [ecx+4] si +
mov [ecx+6] dx +
inc eax  +
push 20h  +
pop edx  +
cmp dx [ecx+6] +
jbe loc_106C8A6  +
and word ptr [ecx+6] 0Fh +
movzx edx word ptr [ecx+6] +
pop ebx  +
or edx edi +
pop edi  +
mov [ecx+6] dx +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_106C75E  +
***
call sub_102E8A8  +
and dword ptr [ebp-4] 0 +
dec dword ptr [ebp+10h]  +
js loc_106C96B  +
mov ecx [ebp+8] +
sub ecx [ebp+0Ch] +
mov [ebp+8] ecx +
call dword ptr [ebp+14h]  +
jmp loc_106C92B  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_106C962  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
call ds:?terminate@@YAXXZ  +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_102E894  +
retn 10h  +
***
jmp ds:__CxxFrameHandler3  +
***
jmp ds:?what@exception@@UBEPBDXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100207A  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_106C9F9  +
***
call __uncaught_exception  +
xor ecx ecx +
test al al +
setnz cl  +
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100207A  +
push offset dword_108A1E0  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_106CBB0  +
cmp dword ptr [eax+10h] 3 +
jnz loc_106CBB0  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_106CBAA  +
cmp eax 19930521h +
jz loc_106CBAA  +
cmp eax 19930522h +
jz loc_106CBAA  +
cmp eax 1994000h +
jnz loc_106CBB0  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_106CBDC  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_106CBD8  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_106CC3D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_106CC35  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_106CC3F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_106CC25  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_102E8A8  +
and dword ptr [ebp-4] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_106CBC6  +
pop ecx  +
test eax eax +
jz loc_106CCA6  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_106CC00  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_106CCA6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_106CCAF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_102E894  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_108BF30 eax +
mov dword_108BF2C ecx +
mov dword_108BF28 edx +
mov dword_108BF24 ebx +
mov dword_108BF20 esi +
mov dword_108BF1C edi +
mov word_108BF48 ss +
mov word_108BF3C cs +
mov word_108BF18 ds +
mov word_108BF14 es +
mov word_108BF10 fs +
mov word_108BF0C gs +
pushf   +
pop dword_108BF40  +
mov eax [ebp+0] +
mov dword_108BF34 eax +
mov eax [ebp+4] +
mov dword_108BF38 eax +
lea eax [ebp+8] +
mov dword_108BF44 eax +
mov eax [ebp-320h] +
mov dword_108BE80 10001h +
mov eax dword_108BF38 +
mov dword_108BE3C eax +
mov dword_108BE30 0C0000409h +
mov dword_108BE34 1 +
mov eax dword_108A1E0 +
mov [ebp-328h] eax +
mov eax dword_108A1E4 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov [eax] edx +
mov ecx [ecx+4] +
mov [eax+4] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  qword ptr [ecx] +
mov eax [ebp+arg_0] +
fstp  dword ptr [eax] +
mov eax [ebp+arg_4] +
fld  qword ptr [ecx+8] +
fstp  dword ptr [eax] +
mov eax [ebp+arg_8] +
fld  qword ptr [ecx+10h] +
fstp  dword ptr [eax] +
mov eax [ebp+arg_C] +
fld  qword ptr [ecx+18h] +
fstp  dword ptr [eax] +
mov al 1 +
pop ebp  +
retn 10h  +
***
call sub_100208C  +
push 20h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_106CE79  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1033539  +
call sub_1002061  +
retn 8  +
***
call sub_100208C  +
push 8  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_106CEB0  +
push dword ptr [ebp+8]  +
call sub_106E438  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_8] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 41h +
jnz loc_106CED4  +
fld  [ebp+arg_8] +
jmp loc_106CEE9  +
fld  [ebp+arg_10] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 5 +
jp loc_106CEE6  +
fld  [ebp+arg_10] +
jmp loc_106CEE9  +
fld  [ebp+arg_0] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld1   +
push esi  +
sub esp 18h +
fstp  [esp+1Ch+var_C] +
fldz   +
mov esi ecx +
fstp  [esp+1Ch+var_14] +
fld  [ebp+arg_0] +
fstp  [esp+1Ch+var_1C] +
call sub_106CEBD  +
fstp  qword ptr [esi+18h] +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call GdipDeleteRegion  +
test [ebp+arg_0] 1 +
jz loc_106CF4A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_106CF69  +
push 1  +
call sub_106CF2E  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov edx [eax] +
push ecx  +
mov ecx eax +
call dword ptr [edx+24h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push dword ptr [eax]  +
push dword ptr [esi]  +
call GdipSetClipRegion  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call GdipCreateRegion  +
mov [esi+4] eax +
mov eax [ebp+var_4] +
mov [esi] eax +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
mov esi ecx +
call GdipCreateRegionPath  +
mov [esi+4] eax +
mov eax [ebp+var_4] +
mov [esi] eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call GdipDeleteGraphics  +
test [ebp+arg_0] 1 +
jz loc_106D029  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
push ebx  +
push esi  +
push edi  +
push 30h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
xor edi edi +
pop ecx  +
cmp eax edi +
jz loc_106D069  +
push 26200Ah  +
push dword ptr [esi+1Ch]  +
mov ecx eax +
push dword ptr [esi+18h]  +
call sub_103132C  +
mov ebx eax +
jmp loc_106D06B  +
xor ebx ebx +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_94] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
call sub_106CE1D  +
fldz   +
fst  [ebp+var_90] +
lea eax [ebp+var_8] +
fst  [ebp+var_8C] +
push eax  +
fst  [ebp+var_88] +
mov [ebp+var_8] edi +
fld  ds:flt_106D184 +
fstp  [ebp+var_84] +
fst  [ebp+var_80] +
fst  [ebp+var_7C] +
fst  [ebp+var_78] +
fst  [ebp+var_74] +
fld  ds:flt_106D180 +
fstp  [ebp+var_70] +
fst  [ebp+var_6C] +
fst  [ebp+var_68] +
fst  [ebp+var_64] +
fst  [ebp+var_60] +
fld  ds:flt_106D17C +
fstp  [ebp+var_5C] +
fst  [ebp+var_58] +
fst  [ebp+var_54] +
fst  [ebp+var_50] +
fst  [ebp+var_4C] +
fst  [ebp+var_48] +
fst  [ebp+var_44] +
fld  [ebp+var_C] +
fstp  [ebp+var_40] +
fld  [ebp+var_10] +
fstp  [ebp+var_3C] +
fld  [ebp+var_14] +
fstp  [ebp+var_38] +
fstp  [ebp+var_34] +
fld1   +
fstp  [ebp+var_30] +
call GdipCreateImageAttributes  +
push edi  +
mov [ebp+var_4] eax +
push edi  +
lea eax [ebp+var_90] +
push eax  +
lea ecx [ebp+var_8] +
call sub_1052250  +
lea eax [ebx+4] +
push eax  +
lea ecx [ebp+var_1C] +
call sub_100B8C4  +
push 1  +
lea ecx [ebp+var_1C] +
call sub_103094A  +
mov ecx [esi+1Ch] +
mov eax [esi+18h] +
push edi  +
push edi  +
lea edx [ebp+var_8] +
push edx  +
push 2  +
push ecx  +
push eax  +
push edi  +
mov [ebp+var_24] eax +
push edi  +
lea eax [ebp+var_2C] +
push eax  +
add esi 4 +
mov [ebp+var_20] ecx +
mov [ebp+var_2C] edi +
mov [ebp+var_28] edi +
push esi  +
lea ecx [ebp+var_1C] +
call sub_100D01F  +
push [ebp+var_1C]  +
call GdipDeleteGraphics  +
push [ebp+var_8]  +
call GdipDisposeImageAttributes  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call GdipAddPathLine2I  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_1C]  +
mov esi ecx +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call GdipAddPathBezierI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call GdipAddPathEllipseI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push dword ptr [esi]  +
call GdipGetPointCount  +
push eax  +
mov ecx esi +
call sub_100B30D  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call GdipGetPathPointsI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov eax [ebp+0Ch] +
xor ecx ecx +
push 8  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10067E4  +
mov edi eax +
pop ecx  +
mov [ebp-14h] edi +
and dword ptr [ebp-4] 0 +
test edi edi +
jz loc_106D2B2  +
push offset sub_100BFF1  +
push dword ptr [ebp+0Ch]  +
push 8  +
push edi  +
call sub_100A25C  +
jmp loc_106D2B4  +
xor edi edi +
xor ecx ecx +
cmp [ebp+0Ch] ecx +
jle loc_106D2D9  +
mov esi [ebp+8] +
mov edx esi +
lea eax [edi+4] +
sub edx edi +
mov ebx [esi+ecx*8] +
mov [eax-4] ebx +
mov ebx [edx+eax] +
mov [eax] ebx +
inc ecx  +
add eax 8 +
cmp ecx [ebp+0Ch] +
jl loc_106D2C5  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-10h] +
push edi  +
call sub_106D18D  +
mov ebx eax +
neg ebx  +
sbb bl bl +
push edi  +
inc bl  +
call sub_1006809  +
pop ecx  +
mov al bl +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push dword ptr [esi]  +
call GdipClonePath  +
push eax  +
mov ecx esi +
call sub_100B30D  +
push 8  +
call GdipAlloc  +
pop esi  +
test eax eax +
jz loc_106D33A  +
mov ecx [ebp+var_4] +
and dword ptr [eax+4] 0 +
mov [eax] ecx +
leave   +
retn   +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
mov eax [ebp+arg_8] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
mov eax [ebp+arg_4] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_106D1B4  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_106D1ED  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov eax [eax+4] +
mov [ebp+var_1C] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_20] edx +
mov edx [eax] +
mov eax [eax+4] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_18] edx +
mov edx [eax] +
mov eax [eax+4] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_10] edx +
mov edx [eax] +
mov eax [eax+4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_8] edx +
call sub_106D343  +
neg eax  +
sbb eax eax +
inc eax  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
push edi  +
mov ecx esi +
call sub_100DC54  +
mov ecx esi +
mov edi eax +
call sub_100DC3F  +
mov ecx [esi] +
mov [ebp+var_10] ecx +
mov ecx [esi+4] +
mov [ebp+var_8] eax +
lea eax [ebp+var_10] +
mov [ebp+var_C] ecx +
push eax  +
mov ecx ebx +
mov [ebp+var_4] edi +
call sub_106D376  +
neg eax  +
pop edi  +
sbb eax eax +
pop esi  +
inc eax  +
pop ebx  +
leave   +
retn 4  +
***
call sub_100208C  +
xor esi esi +
cmp [ebp+0Ch] esi +
jz loc_106D45D  +
mov esi [ebp+0Ch] +
call sub_106D303  +
fld  ds:flt_1038DB8 +
push ecx  +
mov edi eax +
fstp  [esp+8+var_8] +
push esi  +
mov ecx edi +
call sub_1039478  +
mov ecx edi +
call sub_106D21A  +
xor ecx ecx +
push 8  +
pop edx  +
mov ebx eax +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10067E4  +
mov esi eax +
pop ecx  +
mov [ebp+0Ch] esi +
and dword ptr [ebp-4] 0 +
test esi esi +
jz loc_106D4B1  +
push offset sub_100BFF1  +
push ebx  +
push 8  +
push esi  +
call sub_100A25C  +
jmp loc_106D4B3  +
xor esi esi +
push ebx  +
push esi  +
mov ecx edi +
call sub_106D245  +
mov ecx [esi] +
mov eax [ebp+8] +
xor edi edi +
mov [eax+8] ecx +
mov [eax] ecx +
mov ecx [esi+4] +
inc edi  +
cmp ebx edi +
mov [eax+0Ch] ecx +
mov [eax+4] ecx +
jle loc_106D508  +
lea edx [esi+edi*8] +
mov ecx [edx] +
cmp ecx [eax] +
jge loc_106D4E1  +
mov [eax] ecx +
mov ecx [edx] +
cmp ecx [eax+8] +
jle loc_106D4EB  +
mov [eax+8] ecx +
lea ecx [esi+edi*8+4] +
mov edx [ecx] +
cmp edx [eax+4] +
jge loc_106D4F9  +
mov [eax+4] edx +
mov ecx [ecx] +
cmp ecx [eax+0Ch] +
jle loc_106D503  +
mov [eax+0Ch] ecx +
inc edi  +
cmp edi ebx +
jl loc_106D4D6  +
push esi  +
call sub_1006809  +
pop ecx  +
mov al 1 +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
push [ebp+arg_0]  +
call sub_106E103  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_0]  +
mov eax [esi] +
call dword ptr [eax+24h]  +
push 0  +
push [ebp+arg_14]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
push [ebp+arg_0]  +
call sub_106E0D7  +
mov al 1 +
pop esi  +
pop ebp  +
retn 18h  +
***
jmp sub_100C2C1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+8] eax +
pop ebp  +
retn 4  +
***
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100DB4C +
jz loc_106D5E0  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10312AF  +
test [ebp+arg_0] 1 +
jz loc_106D606  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call GdipDeletePath  +
test [ebp+arg_0] 1 +
jz loc_106D62D  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax]  +
push dword ptr [esi]  +
call GdipDrawLineI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
mov eax [ebp+arg_4] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call sub_106D639  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax]  +
push dword ptr [esi]  +
call GdipDrawEllipseI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push dword ptr [eax]  +
push dword ptr [esi]  +
call GdipDrawPolygonI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax+4]  +
push dword ptr [esi]  +
call GdipFillPolygonI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
xor ecx ecx +
push edi  +
inc esi  +
inc ebx  +
push ecx  +
mov [ebp+var_24] ebx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
call ds:CreateCompatibleDC  +
mov edi eax +
mov [ebp+hDC] edi +
test edi edi +
jnz loc_106D75C  +
xor eax eax +
jmp loc_106D955  +
push ebx  +
push esi  +
push edi  +
call ds:CreateCompatibleBitmap  +
mov [ebp+var_20] eax +
test eax eax +
jz loc_106D755  +
push eax  +
push edi  +
mov edi ds:SelectObject +
call edi  +
push 2FFFFFFh  +
mov [ebp+var_1C] eax +
call ds:CreateSolidBrush  +
and [ebp+rc.left] 0 +
and [ebp+rc.top] 0 +
push eax  +
mov [ebp+var_14] eax +
lea eax [ebp+rc] +
push eax  +
push [ebp+hDC]  +
mov [ebp+rc.right] esi +
mov [ebp+rc.bottom] ebx +
call ds:FillRect  +
push [ebp+var_14]  +
call ds:DeleteObject  +
mov ebx ds:GetStockObject +
push 8  +
call ebx  +
push eax  +
push [ebp+hDC]  +
call edi  +
push 4  +
call ebx  +
push eax  +
push [ebp+hDC]  +
call edi  +
push [ebp+hDC]  +
lea ecx [ebp+var_30] +
call sub_100DA72  +
push 3  +
lea ecx [ebp+var_30] +
call sub_100DAAA  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+rc.top] +
mov [ebp+var_14] 0FF000000h +
call sub_100B7C0  +
push 1  +
push esi  +
xor ebx ebx +
push ebx  +
push ebx  +
lea eax [ebp+rc.top] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
call sub_10309AF  +
dec esi  +
mov [ebp+var_14] ebx +
mov [ebp+var_18] esi +
test esi esi +
jle loc_106D822  +
push 0  +
push ebx  +
push [ebp+hDC]  +
call ds:GetPixel  +
test eax eax +
jz loc_106D822  +
inc ebx  +
cmp ebx esi +
jl loc_106D80D  +
mov eax ebx +
imul eax eax +
xor ecx ecx +
mov [ebp+var_10] eax +
cmp [ebp+arg_C] ecx +
jnz loc_106D848  +
mov eax [ebp+arg_10] +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov ecx [ebp+var_24] +
dec ecx  +
mov [eax] ebx +
mov [eax+0Ch] ecx +
jmp loc_106D928  +
cmp [ebp+var_24] ecx +
mov [ebp+var_8] ecx +
jle loc_106D8A9  +
and [ebp+var_4] 0 +
test esi esi +
jle loc_106D873  +
push [ebp+var_8]  +
push [ebp+var_4]  +
push [ebp+hDC]  +
call ds:GetPixel  +
test eax eax +
jz loc_106D873  +
inc [ebp+var_4]  +
cmp [ebp+var_4] esi +
jl loc_106D858  +
mov eax [ebp+arg_8] +
imul eax [ebp+var_8] +
imul eax eax +
cdq   +
idiv  [ebp+arg_C] +
mov ecx [ebp+var_4] +
imul ecx ecx +
sub ecx eax +
cmp [ebp+var_10] ecx +
jle loc_106D89C  +
mov eax [ebp+var_8] +
mov ebx [ebp+var_4] +
mov [ebp+var_14] eax +
mov [ebp+var_10] ecx +
jmp loc_106D89E  +
jl loc_106D8A9  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_24] +
jl loc_106D850  +
mov esi [ebp+arg_10] +
mov eax [ebp+var_14] +
and [ebp+var_8] 0 +
cmp [ebp+var_24] 0 +
mov [esi] ebx +
mov [esi+4] eax +
jle loc_106D91A  +
mov eax [ebp+var_18] +
mov [ebp+var_4] eax +
test eax eax +
jle loc_106D8E4  +
push [ebp+var_8]  +
push [ebp+var_4]  +
push [ebp+hDC]  +
call ds:GetPixel  +
test eax eax +
jz loc_106D8E4  +
dec [ebp+var_4]  +
cmp [ebp+var_4] 0 +
jg loc_106D8C8  +
mov eax [ebp+arg_8] +
imul eax [ebp+var_8] +
imul eax eax +
cdq   +
idiv  [ebp+arg_C] +
mov ecx [ebp+var_4] +
imul ecx ecx +
sub ecx eax +
cmp [ebp+var_10] ecx +
jge loc_106D90D  +
mov eax [ebp+var_8] +
mov ebx [ebp+var_4] +
mov [ebp+var_14] eax +
mov [ebp+var_10] ecx +
jmp loc_106D90F  +
jg loc_106D91A  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_24] +
jl loc_106D8BE  +
sub ebx [esi] +
mov eax [ebp+var_14] +
sub eax [esi+4] +
mov [esi+8] ebx +
mov [esi+0Ch] eax +
push [ebp+var_1C]  +
push [ebp+hDC]  +
call edi  +
push [ebp+var_20]  +
call ds:DeleteObject  +
push [ebp+hDC]  +
call ds:DeleteDC  +
push [ebp+rc.right]  +
call GdipDeleteBrush  +
push [ebp+var_30]  +
call GdipDeleteGraphics  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push 5  +
lea eax [ebp+var_30] +
pop ecx  +
and dword ptr [eax+4] 0 +
and dword ptr [eax] 0 +
add eax 8 +
dec ecx  +
jns loc_106D96F  +
mov edx [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_8] +
mov ecx [ebx] +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
mov eax [edi] +
cmp eax ecx +
jle loc_106D99F  +
mov [ebp+var_20] eax +
mov [ebp+var_28] ecx +
mov [ebp+var_30] ecx +
add eax edx +
add ecx edx +
jmp loc_106D9AD  +
lea esi [ecx+edx] +
add edx eax +
mov [ebp+var_28] esi +
mov [ebp+var_30] esi +
mov [ebp+var_20] edx +
mov edx [ebp+arg_14] +
mov [ebp+var_8] ecx +
mov ecx [ebx+4] +
mov [ebp+var_18] eax +
mov [ebp+var_10] eax +
mov eax [edi+4] +
cmp eax ecx +
jle loc_106D9D9  +
mov [ebp+var_4] ecx +
mov [ebp+var_2C] ecx +
add ecx edx +
mov [ebp+var_24] ecx +
lea ecx [edx+eax] +
mov [ebp+var_14] ecx +
mov [ebp+var_1C] ecx +
jmp loc_106D9ED  +
lea esi [ecx+edx] +
mov [ebp+var_14] eax +
mov [ebp+var_1C] eax +
mov [ebp+var_4] esi +
mov [ebp+var_2C] esi +
mov [ebp+var_24] ecx +
add eax edx +
mov ecx [ebp+arg_0] +
push 0  +
mov [ebp+var_C] eax +
push 6  +
lea eax [ebp+var_30] +
push eax  +
push [ebp+arg_4]  +
call sub_106D6EF  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax [ebp+arg_8] +
mov edx [ebp+arg_14] +
and [ebp+arg_8] 0 +
push ebx  +
mov ebx [eax] +
push esi  +
mov esi [eax+4] +
mov eax [ebp+arg_C] +
mov ecx [eax] +
push edi  +
mov edi [eax+4] +
sub esi edx +
sub ebx edx +
sub edi edx +
sub ecx edx +
cmp [ebp+arg_18] 2 +
mov [ebp+var_10] ebx +
mov [ebp+var_C] esi +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edi +
jz loc_106DA51  +
cmp [ebp+arg_18] 3 +
jnz loc_106DAA2  +
mov eax ecx +
sub eax ebx +
cdq   +
xor eax edx +
sub eax edx +
mov [ebp+arg_8] eax +
mov eax edi +
sub eax esi +
cdq   +
xor eax edx +
sub eax edx +
cmp ecx ebx +
jle loc_106DA83  +
xor ecx ecx +
cmp edi esi +
jge loc_106DA78  +
cmp [ebp+arg_8] eax +
setle cl  +
jmp loc_106DA9C  +
cmp [ebp+arg_8] eax +
setnle cl  +
add ecx 6 +
jmp loc_106DA9C  +
xor ecx ecx +
cmp edi esi +
jge loc_106DA93  +
cmp [ebp+arg_8] eax +
setnle cl  +
inc ecx  +
inc ecx  +
jmp loc_106DA9C  +
cmp [ebp+arg_8] eax +
setle cl  +
add ecx 4 +
mov [ebp+arg_8] ecx +
mov ecx [ebp+var_8] +
mov eax [ebp+arg_18] +
xor edx edx +
sub eax edx +
jz loc_106DDA7  +
dec eax  +
jz loc_106DD83  +
dec eax  +
jz loc_106DBF5  +
dec eax  +
jnz loc_106DE73  +
push 5  +
lea eax [ebp+var_48] +
pop edx  +
and dword ptr [eax+4] 0 +
and dword ptr [eax] 0 +
add eax 8 +
dec edx  +
jns loc_106DACA  +
mov eax [ebp+arg_8] +
test eax eax +
jl loc_106DBC1  +
cmp eax 1 +
jle loc_106DBA5  +
cmp eax 2 +
jz loc_106DB83  +
cmp eax 3 +
jz loc_106DB52  +
jle loc_106DBC1  +
cmp eax 5 +
jle loc_106DB2E  +
cmp eax 6 +
jnz loc_106DBC1  +
lea eax [ebx+1] +
mov [ebp+var_40] eax +
mov eax [ebp+arg_10] +
lea edx [ebx+eax+1] +
mov [ebp+var_38] edx +
lea edx [eax+ecx] +
mov [ebp+var_48] ebx +
lea ebx [edx+1] +
mov [ebp+var_30] ebx +
jmp loc_106DC54  +
lea eax [ebx+1] +
mov [ebp+var_48] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_38] ecx +
add ecx eax +
mov [ebp+var_30] ecx +
inc ecx  +
mov [ebp+var_28] ecx +
lea ecx [ebx+eax+1] +
mov [ebp+var_40] ebx +
mov [ebp+var_20] ecx +
jmp loc_106DBE3  +
mov eax [ebp+arg_10] +
lea edx [ebx+eax+1] +
mov [ebp+var_48] edx +
lea edx [ebx+eax] +
mov [ebp+var_40] edx +
lea edx [eax+ecx] +
mov [ebp+var_30] ecx +
inc ecx  +
mov [ebp+var_38] edx +
inc ebx  +
mov [ebp+var_28] ecx +
lea ecx [eax+esi] +
add eax edi +
mov [ebp+var_3C] ecx +
mov [ebp+var_44] ecx +
mov [ebp+var_34] eax +
jmp loc_106DD5F  +
mov eax [ebp+arg_10] +
lea edx [ebx+eax+1] +
mov [ebp+var_48] edx +
lea edx [ebx+eax] +
mov [ebp+var_40] edx +
mov [ebp+var_30] ecx +
lea edx [ecx+1] +
mov [ebp+var_38] ebx +
lea ecx [ecx+eax+1] +
jmp loc_106DD13  +
mov eax [ebp+arg_10] +
lea edx [ebx+eax] +
mov [ebp+var_48] edx +
inc edx  +
mov [ebp+var_40] edx +
lea edx [ecx+eax+1] +
mov [ebp+var_38] edx +
lea edx [ecx+1] +
mov [ebp+var_30] edx +
jmp loc_106DB6D  +
lea eax [ebx+1] +
mov [ebp+var_40] eax +
lea eax [ecx+1] +
mov [ebp+var_38] eax +
mov eax [ebp+arg_10] +
add ecx eax +
mov [ebp+var_48] ebx +
lea edx [ecx+1] +
add ebx eax +
mov [ebp+var_30] edx +
mov [ebp+var_28] ecx +
mov [ebp+var_20] ebx +
mov [ebp+var_34] edi +
add edi eax +
mov [ebp+var_3C] esi +
mov [ebp+var_44] esi +
add esi eax +
jmp loc_106DD62  +
push 5  +
lea eax [ebp+var_48] +
pop edx  +
and dword ptr [eax+4] 0 +
and dword ptr [eax] 0 +
add eax 8 +
dec edx  +
jns loc_106DBFB  +
mov eax [ebp+arg_8] +
dec ebx  +
dec ecx  +
test eax eax +
jz loc_106DD32  +
cmp eax 1 +
jz loc_106DCF7  +
jle loc_106DCCE  +
cmp eax 3 +
jle loc_106DC9C  +
cmp eax 4 +
jz loc_106DC6C  +
cmp eax 5 +
jnz loc_106DCCE  +
mov eax [ebp+arg_10] +
lea edx [ebx+eax+1] +
mov [ebp+var_48] edx +
lea edx [ebx+eax] +
mov [ebp+var_40] edx +
mov [ebp+var_30] ecx +
lea edx [ecx+1] +
mov [ebp+var_38] ebx +
lea ecx [ecx+eax+1] +
mov [ebp+var_3C] esi +
mov [ebp+var_44] esi +
add esi eax +
add eax edi +
mov [ebp+var_20] ecx +
mov [ebp+var_24] eax +
mov [ebp+var_2C] eax +
jmp loc_106DD27  +
mov eax [ebp+arg_10] +
lea edx [ebx+eax+1] +
mov [ebp+var_48] edx +
lea edx [ebx+eax] +
mov [ebp+var_40] edx +
lea edx [eax+ecx] +
mov [ebp+var_30] ecx +
inc ecx  +
mov [ebp+var_34] edi +
inc ebx  +
mov [ebp+var_3C] esi +
mov [ebp+var_44] esi +
add edi eax +
mov [ebp+var_38] edx +
mov [ebp+var_28] ecx +
add esi eax +
jmp loc_106DD5F  +
lea eax [ebx+1] +
mov [ebp+var_48] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_38] ecx +
add ecx eax +
mov [ebp+var_30] ecx +
inc ecx  +
mov [ebp+var_28] ecx +
lea ecx [ebx+eax+1] +
mov [ebp+var_20] ecx +
lea ecx [eax+esi] +
add eax edi +
mov [ebp+var_40] ebx +
mov [ebp+var_3C] ecx +
mov [ebp+var_44] ecx +
mov [ebp+var_34] eax +
jmp loc_106DD62  +
mov eax [ebp+arg_10] +
lea edx [ebx+eax] +
mov [ebp+var_48] edx +
inc edx  +
mov [ebp+var_40] edx +
lea edx [ecx+eax+1] +
mov [ebp+var_34] edi +
mov [ebp+var_38] edx +
mov [ebp+var_3C] esi +
mov [ebp+var_44] esi +
add edi eax +
lea edx [ecx+1] +
mov [ebp+var_28] ecx +
add esi eax +
jmp loc_106DD5C  +
lea eax [ebx+1] +
mov [ebp+var_40] eax +
mov eax [ebp+arg_10] +
lea edx [ebx+eax+1] +
mov [ebp+var_38] edx +
lea edx [eax+ecx] +
mov [ebp+var_48] ebx +
lea ebx [edx+1] +
mov [ebp+var_30] ebx +
mov [ebp+var_20] ecx +
lea ecx [eax+esi] +
mov [ebp+var_24] edi +
mov [ebp+var_2C] edi +
mov [ebp+var_3C] ecx +
mov [ebp+var_44] ecx +
add edi eax +
mov [ebp+var_34] esi +
mov [ebp+var_28] edx +
mov [ebp+var_1C] edi +
jmp loc_106DD6B  +
lea eax [ebx+1] +
mov [ebp+var_40] eax +
lea eax [ecx+1] +
mov [ebp+var_38] eax +
mov eax [ebp+arg_10] +
add ecx eax +
mov [ebp+var_48] ebx +
lea edx [ecx+1] +
mov [ebp+var_28] ecx +
lea ecx [eax+esi] +
add ebx eax +
add eax edi +
mov [ebp+var_3C] ecx +
mov [ebp+var_44] ecx +
mov [ebp+var_34] eax +
mov [ebp+var_30] edx +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] esi +
mov [ebp+var_2C] edi +
mov [ebp+var_24] edi +
mov ecx [ebp+arg_0] +
push 0  +
push 6  +
lea eax [ebp+var_48] +
push eax  +
push [ebp+arg_4]  +
call sub_106D6EF  +
jmp loc_106DE73  +
push ecx  +
push ecx  +
mov ecx [ebp+arg_10] +
mov eax esp +
mov [eax] ecx +
mov [eax+4] ecx +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_106D961  +
jmp loc_106DE73  +
cmp ecx ebx +
jnz loc_106DDB3  +
cmp edi esi +
jz loc_106DE61  +
push 3  +
mov [ebp+var_C] edx +
mov [ebp+var_10] edx +
mov [ebp+var_14] edx +
mov [ebp+var_18] edx +
lea eax [ebp+var_38] +
pop edx  +
and dword ptr [eax+4] 0 +
and dword ptr [eax] 0 +
add eax 8 +
dec edx  +
jns loc_106DDC5  +
sub ecx ebx +
lea edx [ebp+var_18] +
push edx  +
push ecx  +
push ecx  +
mov edx esp +
push ecx  +
mov eax edi +
sub eax esi +
mov [edx] ecx +
mov [edx+4] eax +
push ecx  +
mov ecx [ebp+arg_10] +
mov eax esp +
mov [eax] ecx +
mov [eax+4] ecx +
call sub_106D71F  +
test eax eax +
jz loc_106DE73  +
mov eax [ebp+var_18] +
lea ecx [eax+ebx] +
mov [ebp+var_38] ecx +
mov ecx [ebp+var_10] +
add ecx eax +
lea edx [ebx+ecx] +
mov [ebp+var_30] edx +
mov edx [ebp+var_8] +
add ecx edx +
add eax edx +
mov [ebp+var_28] ecx +
mov [ebp+var_20] eax +
mov eax [ebp+var_14] +
lea ecx [eax+esi] +
mov [ebp+var_34] ecx +
mov ecx [ebp+var_C] +
add ecx eax +
add eax edi +
push 0  +
lea edx [esi+ecx] +
mov [ebp+var_1C] eax +
push 4  +
lea eax [ebp+var_38] +
add ecx edi +
push eax  +
push [ebp+arg_4]  +
mov [ebp+var_24] ecx +
mov ecx [ebp+arg_0] +
mov [ebp+var_2C] edx +
call sub_106D6EF  +
push 1  +
push [ebp+arg_10]  +
push esi  +
push ebx  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10309AF  +
mov ecx [ebp+var_8] +
push 1  +
push [ebp+arg_10]  +
push edi  +
push ecx  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10309AF  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_1C]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10314FD  +
push [ebp+arg_20]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100E6F7  +
mov al 1 +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
fld  dword ptr [ecx] +
mov edx [ebp+arg_4] +
fld  dword ptr [edx] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jp loc_106DED6  +
fld  dword ptr [edx] +
fstp  dword ptr [ecx] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
fld  dword ptr [ecx] +
mov edx [ebp+arg_4] +
fld  dword ptr [edx] +
fcompp st(1) st +
fnstsw  ax +
test ah 41h +
jnz loc_106DEFB  +
fld  dword ptr [edx] +
fstp  dword ptr [ecx] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_106DF27  +
push esi  +
push edi  +
mov esi [ebp+arg_8] +
mov edi eax +
push 19h  +
add eax 64h +
pop ecx  +
movs   +
cmp eax [ebp+arg_4] +
jnz loc_106DF13  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_106DF50  +
mov ecx [ebp+arg_8] +
mov edx [ecx] +
mov [eax] edx +
mov edx [ecx+4] +
mov [eax+4] edx +
add eax 8 +
cmp eax [ebp+arg_4] +
jnz loc_106DF3E  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp [ebp+arg_0] eax +
jz loc_106DF7E  +
push esi  +
push edi  +
sub [ebp+arg_8] 64h +
mov edi [ebp+arg_8] +
sub eax 64h +
push 19h  +
pop ecx  +
mov esi eax +
movs   +
cmp eax [ebp+arg_0] +
jnz loc_106DF66  +
pop edi  +
pop esi  +
mov eax [ebp+arg_8] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_8] +
cmp [ebp+arg_0] ecx +
jz loc_106DFAD  +
sub ecx 8 +
mov edx [ecx] +
sub eax 8 +
mov [eax] edx +
mov edx [ecx+4] +
mov [eax+4] edx +
cmp ecx [ebp+arg_0] +
jnz loc_106DF98  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp [ebp+arg_0] eax +
jz loc_106DFD9  +
push esi  +
push edi  +
sub [ebp+arg_8] 0Ch +
mov edi [ebp+arg_8] +
sub eax 0Ch +
mov esi eax +
movs   +
movs   +
movs   +
cmp eax [ebp+arg_0] +
jnz loc_106DFC3  +
pop edi  +
pop esi  +
mov eax [ebp+arg_8] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
fld  dword ptr [eax+4] +
fmul  dword ptr [ecx+4] +
fld  dword ptr [eax] +
fmul  dword ptr [ecx] +
faddp st(1) st +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
fld  dword ptr [eax] +
mov ecx [ebp+arg_4] +
fadd  dword ptr [ecx] +
push ebx  +
fld  ds:dbl_1006830 +
push esi  +
mov esi [ebp+arg_8] +
fmul st(1) st +
fxch  st(1) +
push esi  +
push esi  +
fstp  dword ptr [esi] +
mov bl 1 +
fld  dword ptr [eax+4] +
fadd  dword ptr [ecx+4] +
fmulp st(1) st +
fstp  dword ptr [esi+4] +
call sub_106DFE3  +
fcomp  ds:dbl_1032EE8 +
fnstsw  ax +
test ah 5 +
jp loc_106E04E  +
xor bl bl +
jmp loc_106E054  +
push esi  +
call sub_103260C  +
pop esi  +
mov al bl +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call GdipTransformMatrixPoints  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_106DF57  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 8  +
call GdipAlloc  +
test eax eax +
jz loc_106E0CC  +
mov ecx eax +
pop ebp  +
jmp sub_100B8C4  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_18] +
push eax  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103299A  +
pop ebp  +
retn 1Ch  +
***
call sub_100208C  +
mov ecx [ebp+10h] +
mov byte ptr [ebp-0Dh] 0 +
call sub_106D303  +
fld  ds:flt_106E1BC +
push ecx  +
mov ebx eax +
fstp  [esp+8+var_8] +
push 0  +
mov ecx ebx +
call sub_1039478  +
test eax eax +
jnz loc_106E1A3  +
mov ecx ebx +
call sub_106D21A  +
xor ecx ecx +
push 8  +
pop edx  +
mov esi eax +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10067E4  +
mov edi eax +
pop ecx  +
mov [ebp+10h] edi +
and dword ptr [ebp-4] 0 +
test edi edi +
jz loc_106E16F  +
push offset sub_100BFF1  +
push esi  +
push 8  +
push edi  +
call sub_100A25C  +
jmp loc_106E171  +
xor edi edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
push esi  +
push edi  +
mov ecx ebx +
call sub_106D245  +
test eax eax +
jnz loc_106E19C  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push esi  +
push eax  +
push edi  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_103299A  +
mov [ebp-0Dh] al +
push edi  +
call sub_1006809  +
pop ecx  +
test ebx ebx +
jz loc_106E1B0  +
push 1  +
mov ecx ebx +
call sub_106D612  +
mov al [ebp-0Dh] +
call sub_1002061  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call GdipVectorTransformMatrixPoints  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_106E1C5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
add ecx 38h +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ecx-30h]  +
push dword ptr [ecx-34h]  +
push ecx  +
push [ebp+arg_0]  +
call sub_106DE7F  +
mov al 1 +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
fild  dword ptr [ebp+8] +
push ecx  +
mov [ecx+4] eax +
add ecx 30h +
fstp  dword ptr [esp] +
call sub_100DFEF  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
add ecx 14h +
push [ebp+arg_4]  +
push dword ptr [ecx-0Ch]  +
push dword ptr [ecx-10h]  +
push ecx  +
push [ebp+arg_0]  +
call sub_10394DD  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
add ecx 14h +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ecx-0Ch]  +
push dword ptr [ecx-10h]  +
push ecx  +
push [ebp+arg_0]  +
call sub_100E6F7  +
mov al 1 +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
add ecx 14h +
push ecx  +
push [ebp+arg_0]  +
call sub_10314FD  +
mov al 1 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
add ecx 14h +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ecx-0Ch]  +
push dword ptr [ecx-10h]  +
push ecx  +
push [ebp+arg_0]  +
call sub_106DE7F  +
mov al 1 +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
fild  dword ptr [ebp+8] +
push ecx  +
mov [ecx+4] eax +
add ecx 0Ch +
fstp  dword ptr [esp] +
call sub_100DFEF  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
lea ecx [ebp+var_8] +
call sub_1030B58  +
fild  [ebp+arg_4] +
push 0  +
push ecx  +
push ecx  +
fstp  [esp+18h+var_14] +
lea ecx [ebp+var_8] +
fild  [ebp+arg_0] +
fstp  [esp+18h+var_18] +
call sub_1039612  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [esi+14h] +
call sub_10519FD  +
push [ebp+var_8]  +
call GdipDeleteMatrix  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [eax]  +
push dword ptr [esi]  +
call GdipGetRegionBoundsI  +
push eax  +
mov ecx esi +
call sub_100B30D  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_4] +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
and [ebp+var_C] 0 +
and [ebp+var_10] 0 +
add eax 14h +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_106E3AF  +
test eax eax +
jnz loc_106E426  +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_10] +
push ebx  +
mov ebx [ebp+var_8] +
push esi  +
mov esi [ebp+var_C] +
add ebx edx +
mov [ecx] edx +
mov edx [ebp+var_4] +
mov [ecx+4] esi +
add esi edx +
mov [ecx+0Ch] esi +
pop esi  +
mov [ecx+8] ebx +
pop ebx  +
xor ecx ecx +
test eax eax +
setz cl  +
mov al cl +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_106CFDF  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+44h] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
imul eax [edi] +
mov esi 4F6h +
add eax esi +
cdq   +
mov ebx 9ECh +
idiv  ebx +
mov ebx [ebp+arg_4] +
mov [ebx] eax +
mov eax [ecx+48h] +
imul eax [edi+4] +
add eax esi +
cdq   +
mov ecx 9ECh +
idiv  ecx +
pop edi  +
pop esi  +
mov [ebx+4] eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov [ebp+var_8] edx +
mov edx [eax+4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_4] edx +
call sub_106E454  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+pv] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_8] ecx +
lea ecx [ebp+pv] +
push ecx  +
lea ecx [ebp+arg_4] +
push ecx  +
lea ecx [ebp+var_C] +
push ecx  +
lea ecx [ebp+var_10] +
push ecx  +
push dword ptr [edi]  +
xor bl bl +
push esi  +
call dword ptr [eax+84h]  +
mov eax [ebp+arg_8] +
cmp eax 2 +
jb loc_106E5DB  +
cmp eax [ebp+arg_4] +
jnz loc_106E5DB  +
mov ebx [ebp+arg_14] +
test ebx ebx +
jz loc_106E517  +
mov [ebx] esi +
mov [ebx+4] edi +
mov ecx [ebp+arg_C] +
mov edx [ecx] +
mov eax [ebp+arg_10] +
mov [eax] edx +
mov ecx [ecx+4] +
mov [eax+4] ecx +
mov ecx [ebp+var_8] +
push eax  +
call sub_106E499  +
push 2  +
pop edx  +
cmp [ebp+arg_8] edx +
jbe loc_106E5D9  +
mov eax [ebp+pv] +
add eax 40h +
mov [ebp+arg_0] eax +
mov esi [ebp+arg_0] +
push 4  +
pop ecx  +
mov edi offset dword_106E610 +
xor eax eax +
cmps   +
jnz loc_106E58B  +
test ebx ebx +
jz loc_106E5CB  +
mov eax [ebp+arg_0] +
mov ecx [eax+10h] +
mov eax [eax+14h] +
test eax eax +
jnz loc_106E56C  +
mov eax 0FFh +
mov esi [ebp+arg_C] +
mov esi [esi+edx*4] +
sub esi ecx +
mov [ebp+arg_14] esi +
fild  [ebp+arg_14] +
sub eax ecx +
mov [ebp+arg_14] eax +
or dword ptr [ebx+0Ch] 1 +
fidiv  [ebp+arg_14] +
fstp  dword ptr [ebx+10h] +
jmp loc_106E5CB  +
mov esi [ebp+arg_0] +
push 4  +
pop ecx  +
mov edi offset dword_106E600 +
xor eax eax +
cmps   +
jnz loc_106E5AD  +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_106E5CB  +
mov ecx [ebp+arg_C] +
mov ecx [ecx+edx*4] +
mov [eax] ecx +
jmp loc_106E5CB  +
mov esi [ebp+arg_0] +
push 4  +
pop ecx  +
mov edi offset dword_106E5F0 +
xor eax eax +
cmps   +
jnz loc_106E5CB  +
test ebx ebx +
jz loc_106E5CB  +
mov eax [ebp+arg_C] +
mov eax [eax+edx*4] +
mov [ebx+8] eax +
add [ebp+arg_0] 20h +
inc edx  +
cmp edx [ebp+arg_8] +
jb loc_106E545  +
mov bl 1 +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
pop edi  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_106E631  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+21h] 0 +
jz loc_106E62F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_106E64F  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+21h] 0 +
jz loc_106E64D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+21h] 0 +
jnz loc_106E67C  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_106E690  +
mov [ecx+4] eax +
jmp loc_106E69F  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_106E69D  +
mov [ecx+8] eax +
jmp loc_106E69F  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+21h] dl +
jz loc_106E6CB  +
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_106CAD2  +
add esp 14h +
pop esi  +
retn   +
mov ecx [eax+8] +
cmp [ecx+21h] dl +
jnz loc_106E6E4  +
push ecx  +
call sub_106E643  +
jmp loc_106E6EC  +
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_106E6EC  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+21h] dl +
jz loc_106E6DB  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 1Ch +
push esi  +
xor esi esi +
cmp [eax+30h] esi +
jz loc_106E7A6  +
mov eax [ebp+arg_10] +
xor edx edx +
div  [ebp+arg_C] +
push edi  +
mov [ebp+arg_10] esi +
mov edi eax +
cmp [ebp+arg_C] esi +
jbe loc_106E7A5  +
push ebx  +
mov ebx [ebp+arg_14] +
fldz   +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_14] +
fstp  [ebp+var_C] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
push edi  +
push [ebp+arg_8]  +
mov [ebp+var_8] esi +
push [ebp+arg_4]  +
mov [ebp+var_4] esi +
mov [ebp+arg_14] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_18] esi +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
call sub_106E4C1  +
test al al +
jz loc_106E792  +
push [ebp+var_14]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_14]  +
lea eax [ebp+var_8] +
push eax  +
mov eax [ebp+arg_8] +
push dword ptr [eax+4]  +
add ecx 34h +
call sub_106F4B4  +
test al al +
jz loc_106E792  +
mov eax [ebp+arg_0] +
mov ecx [eax+30h] +
mov eax [ecx] +
lea edx [ebp+var_1C] +
push edx  +
lea edx [ebp+var_8] +
push edx  +
call dword ptr [eax]  +
add [ebp+arg_10] edi +
mov eax edi +
shl eax 2 +
add ebx eax +
mov eax [ebp+arg_10] +
cmp eax [ebp+arg_C] +
jb loc_106E727  +
pop ebx  +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
xor ebx ebx +
push esi  +
cmp dword_108BC04 ebx +
jz loc_106E814  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_106E7D3  +
cmp al bl +
jnz loc_106E814  +
mov ecx dword_108BBF4 +
mov edx 40000000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_106E814  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax edx +
xor edx edx +
cmp edx dword_108BBF8 +
jnz loc_106E814  +
cmp eax ecx +
jnz loc_106E814  +
push offset dword_104A0D0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
mov esi [ebp+arg_0] +
cmp [esi+30h] ebx +
jz loc_106E863  +
fldz   +
push ebx  +
lea eax [ebp+var_1C] +
fstp  [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_C]  +
mov [ebp+var_8] ebx +
push [ebp+arg_8]  +
mov [ebp+var_4] ebx +
push [ebp+arg_4]  +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
call sub_106E4C1  +
test al al +
jz loc_106E863  +
mov ecx [esi+30h] +
mov eax [ecx] +
lea edx [ebp+var_1C] +
push edx  +
lea edx [ebp+var_8] +
push edx  +
call dword ptr [eax+8]  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
xor ebx ebx +
push esi  +
cmp dword_108BC04 ebx +
jz loc_106E8D2  +
mov al byte_108BC08 +
cmp al 4 +
jnb loc_106E891  +
cmp al bl +
jnz loc_106E8D2  +
mov ecx dword_108BBF4 +
mov edx 40000000h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_106E8D2  +
mov ecx dword_108BBFC +
mov eax ecx +
and eax edx +
xor edx edx +
cmp edx dword_108BBF8 +
jnz loc_106E8D2  +
cmp eax ecx +
jnz loc_106E8D2  +
push offset dword_104A0D0  +
push dword_108B3C4  +
push dword_108B3C0  +
call sub_1050D76  +
mov esi [ebp+arg_0] +
cmp [esi+30h] ebx +
jz loc_106E921  +
fldz   +
push ebx  +
lea eax [ebp+var_1C] +
fstp  [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_C]  +
mov [ebp+var_8] ebx +
push [ebp+arg_8]  +
mov [ebp+var_4] ebx +
push [ebp+arg_4]  +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
call sub_106E4C1  +
test al al +
jz loc_106E921  +
mov ecx [esi+30h] +
mov eax [ecx] +
lea edx [ebp+var_1C] +
push edx  +
lea edx [ebp+var_8] +
push edx  +
call dword ptr [eax+4]  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
sub esp 20h +
cmp [eax+30h] ecx +
jz loc_106E96F  +
fldz   +
mov [ebp+var_18] ecx +
mov [ebp+var_14] ecx +
fstp  [ebp+var_10] +
mov ecx [ebp+arg_C] +
mov [ebp+var_8] ecx +
mov ecx [ebp+arg_8] +
mov [ebp+var_C] ecx +
mov ecx [ebp+arg_4] +
mov [ebp+var_20] ecx +
lea ecx [ebp+var_C] +
mov [ebp+var_1C] ecx +
mov ecx [eax+30h] +
mov eax [ecx] +
lea edx [ebp+var_20] +
push edx  +
call dword ptr [eax+0Ch]  +
xor eax eax +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
sub esp 20h +
cmp [eax+30h] ecx +
jz loc_106E9BB  +
fldz   +
mov [ebp+var_18] ecx +
mov [ebp+var_14] ecx +
fstp  [ebp+var_10] +
mov ecx [ebp+arg_C] +
mov [ebp+var_8] ecx +
mov ecx [ebp+arg_8] +
mov [ebp+var_C] ecx +
mov ecx [ebp+arg_4] +
mov [ebp+var_20] ecx +
lea ecx [ebp+var_C] +
mov [ebp+var_1C] ecx +
mov ecx [eax+30h] +
mov eax [ecx] +
lea edx [ebp+var_20] +
push edx  +
call dword ptr [eax+10h]  +
xor eax eax +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 28h +
push esi  +
mov esi [ecx+30h] +
test esi esi +
jz loc_106EA42  +
mov eax [ebp+arg_C] +
fldz   +
and [ebp+var_1C] 0 +
fstp  [ebp+var_18] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_28] eax +
lea eax [ebp+var_14] +
mov [ebp+var_24] eax +
mov eax [ebp+arg_24] +
mov [ebp+var_20] eax +
mov eax [ebp+arg_18] +
mov [ebp+var_8] eax +
mov eax [ebp+arg_1C] +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
call sub_106E499  +
cmp word ptr [ebp+arg_10] 11h +
mov eax [esi] +
jnz loc_106EA2D  +
lea ecx [ebp+var_28] +
push ecx  +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx esi +
call dword ptr [eax+14h]  +
jmp loc_106EA42  +
lea ecx [ebp+arg_14] +
push ecx  +
lea ecx [ebp+arg_10] +
push ecx  +
lea ecx [ebp+var_28] +
push ecx  +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx esi +
call dword ptr [eax+18h]  +
xor eax eax +
pop esi  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+21h] 0 +
jnz loc_106EA6A  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_106EA7E  +
mov [ecx+4] eax +
jmp loc_106EA8C  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_106EA89  +
mov [ecx] eax +
jmp loc_106EA8C  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [esi+2Ch] +
mov dword ptr [ebp-4] 1 +
test eax eax +
jz loc_106EABF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+24h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_106EAD0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+4] +
call sub_101F0ED  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+21h] 0 +
mov ebx ecx +
mov esi edi +
jnz loc_106EB13  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_106EAE3  +
mov esi [esi] +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+21h] 0 +
pop ecx  +
mov edi esi +
jz loc_106EAF8  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_101AD45  +
mov eax [ebp+arg_0] +
mov dword ptr [esi] offset off_106EB54 +
and dword ptr [esi+24h] 0 +
mov [esi+28h] eax +
and dword ptr [esi+2Ch] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_106EBCB  +
push [ebp+arg_C]  +
mov ecx [eax] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+14h]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_106EBF2  +
push [ebp+arg_C]  +
mov ecx [eax] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+18h]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_106EC1F  +
push [ebp+arg_14]  +
mov ecx [eax] +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+1Ch]  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_106EC4C  +
push [ebp+arg_14]  +
mov ecx [eax] +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_106EC7F  +
push [ebp+arg_1C]  +
mov ecx [eax] +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+2Ch]  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_106ECB2  +
push [ebp+arg_1C]  +
mov ecx [eax] +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+30h]  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+2Ch] +
push esi  +
push edi  +
test eax eax +
jz loc_106ECEB  +
mov edx [eax] +
sub esp 14h +
push 5  +
pop ecx  +
mov edi esp +
push [ebp+arg_10]  +
lea esi [ebp+arg_14] +
push [ebp+arg_C]  +
movs   +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [edx+38h]  +
pop edi  +
pop esi  +
pop ebp  +
retn 28h  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_106EAE3  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+21h] 0 +
jz loc_106ED6D  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_104C1F6  +
push offset dword_10832E4  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_104A3C8 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_106E6AE  +
mov edx [edi] +
cmp byte ptr [edx+21h] 0 +
jz loc_106ED82  +
mov ebx [edi+8] +
jmp loc_106ED9B  +
mov eax [edi+8] +
cmp byte ptr [eax+21h] 0 +
jz loc_106ED8F  +
mov ebx edx +
jmp loc_106ED9B  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_106EE04  +
cmp byte ptr [ebx+21h] 0 +
mov esi [edi+4] +
jnz loc_106EDA7  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_106EDB7  +
mov [eax+4] ebx +
jmp loc_106EDC2  +
cmp [esi] edi +
jnz loc_106EDBF  +
mov [esi] ebx +
jmp loc_106EDC2  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_106EDE1  +
cmp byte ptr [ebx+21h] 0 +
jz loc_106EDD3  +
mov eax esi +
jmp loc_106EDDC  +
push ebx  +
call sub_106E643  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_106EE60  +
cmp byte ptr [ebx+21h] 0 +
jz loc_106EDF3  +
mov eax esi +
jmp loc_106EDFC  +
push ebx  +
call sub_106E625  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_106EE60  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_106EE14  +
mov esi eax +
jmp loc_106EE2D  +
cmp byte ptr [ebx+21h] 0 +
mov esi [eax+4] +
jnz loc_106EE20  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_106EE3D  +
mov [ecx+4] eax +
jmp loc_106EE4B  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_106EE48  +
mov [ecx] eax +
jmp loc_106EE4B  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+20h] +
mov dl [edi+20h] +
mov [eax+20h] dl +
mov [edi+20h] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+20h] 1 +
jz loc_106EF24  +
jmp loc_106EF69  +
cmp byte ptr [ebx+20h] 1 +
jnz loc_106EF65  +
mov eax [esi] +
cmp ebx eax +
jnz loc_106EEEB  +
mov eax [esi+8] +
cmp byte ptr [eax+20h] 0 +
jnz loc_106EE9C  +
mov byte ptr [eax+20h] 1 +
push esi  +
mov byte ptr [esi+20h] 0 +
call sub_106EA4E  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+21h] 0 +
jnz loc_106EF1F  +
mov edx [eax] +
cmp byte ptr [edx+20h] 1 +
jnz loc_106EEB3  +
mov edx [eax+8] +
cmp byte ptr [edx+20h] 1 +
jz loc_106EF1B  +
mov edx [eax+8] +
cmp byte ptr [edx+20h] 1 +
jnz loc_106EED2  +
mov edx [eax] +
mov byte ptr [edx+20h] 1 +
push eax  +
mov byte ptr [eax+20h] 0 +
call sub_106E660  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+20h] +
mov [eax+20h] dl +
mov byte ptr [esi+20h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+20h] 1 +
call sub_106EA4E  +
jmp loc_106EF65  +
cmp byte ptr [eax+20h] 0 +
jnz loc_106EF04  +
mov byte ptr [eax+20h] 1 +
push esi  +
mov byte ptr [esi+20h] 0 +
call sub_106E660  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+21h] 0 +
jnz loc_106EF1F  +
mov edx [eax+8] +
cmp byte ptr [edx+20h] 1 +
jnz loc_106EF31  +
mov edx [eax] +
cmp byte ptr [edx+20h] 1 +
jnz loc_106EF31  +
mov byte ptr [eax+20h] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_106EF65  +
jmp loc_106EE6F  +
mov edx [eax] +
cmp byte ptr [edx+20h] 1 +
jnz loc_106EF4F  +
mov edx [eax+8] +
mov byte ptr [edx+20h] 1 +
push eax  +
mov byte ptr [eax+20h] 0 +
call sub_106EA4E  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+20h] +
mov [eax+20h] dl +
mov byte ptr [esi+20h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+20h] 1 +
call sub_106E660  +
mov byte ptr [ebx+20h] 1 +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_106EF7E  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_106EFB9  +
cmp [ebp+arg_8] eax +
jnz loc_106EFB9  +
mov ecx esi +
call sub_106ECF6  +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_106EFDE  +
cmp ecx [ebp+arg_8] +
jz loc_106EFDE  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_106E6AE  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_106ED23  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_106EFBF  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_106EF93  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_104AAE4 +
and dword ptr [ebp-4] 0 +
lea ecx [esi+38h] +
call sub_106EFED  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_106EA9A  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
push edi  +
call sub_106EB1F  +
lea ecx [esi+34h] +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_104AAE4 +
call sub_106F569  +
push edi  +
mov dword ptr [esi+28h] 93F6h +
mov [esi+30h] edi +
call ds:GetDC  +
mov ebx eax +
cmp ebx edi +
jz loc_106F0BC  +
mov edi ds:GetDeviceCaps +
push 58h  +
push ebx  +
call edi  +
push 5Ah  +
push ebx  +
mov [esi+44h] eax +
call edi  +
push ebx  +
push 0  +
mov [esi+48h] eax +
call ds:ReleaseDC  +
jmp loc_106F0C5  +
xor eax eax +
inc eax  +
mov [esi+44h] eax +
mov [esi+48h] eax +
mov eax esi +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_C] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
push edi  +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
push 5  +
mov [eax+8] ecx +
pop ecx  +
lea edi [eax+0Ch] +
movs   +
mov cl [ebp+arg_10] +
pop edi  +
mov [eax+20h] cl +
mov byte ptr [eax+21h] 0 +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+21h] 0 +
jnz loc_106F136  +
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp [ecx+0Ch] edx +
jge loc_106F12C  +
mov ecx [ecx+8] +
jmp loc_106F130  +
mov eax ecx +
mov ecx [ecx] +
cmp byte ptr [ecx+21h] 0 +
jz loc_106F122  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_106F15F  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_106F0D2  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+21h] dl +
jz loc_106F17B  +
mov eax [eax+8] +
jmp loc_106F1A1  +
mov ecx [eax] +
cmp [ecx+21h] dl +
jnz loc_106F192  +
push ecx  +
call sub_106E625  +
jmp loc_106F1A1  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_106F19A  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+21h] dl +
jz loc_106F18A  +
mov ecx [esi] +
cmp [ecx+21h] dl +
jnz loc_106F1A3  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_106F10C  +
mov esi [esi+4] +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_106F21C  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jl loc_106F21C  +
lea eax [ebp+arg_4] +
jmp loc_106F222  +
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0  +
push 1  +
mov edi ecx +
call sub_106F1AA  +
push [ebp+arg_10]  +
mov esi eax +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_106F13F  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_106F1AA  +
cmp eax ebx +
jz loc_106F27F  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_106F288  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_106F291  +
mov [ecx] ebx +
mov [eax+21h] bl +
mov byte ptr [eax+20h] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_106F26C  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+21h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
call sub_100208C  +
mov edi ecx +
cmp dword ptr [edi+8] 0CCCCCCBh +
jb loc_106F30D  +
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_106F234  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_106F339  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_106F357  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_106F34C  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_106F35A  +
mov [eax] ebx +
jmp loc_106F35A  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_106F35A  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
jmp loc_106F3F4  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_106F3A5  +
mov edx [edx+8] +
cmp byte ptr [edx+20h] 0 +
jz loc_106F3AD  +
cmp esi [ecx+8] +
jnz loc_106F385  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_106EA4E  +
mov eax [esi+4] +
mov byte ptr [eax+20h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+20h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_106E660  +
jmp loc_106F3F1  +
mov edx [edx] +
cmp byte ptr [edx+20h] 0 +
jnz loc_106F3C5  +
mov byte ptr [ecx+20h] 1 +
mov byte ptr [edx+20h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+20h] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_106F3F1  +
cmp esi [ecx] +
jnz loc_106F3D3  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_106E660  +
mov eax [esi+4] +
mov byte ptr [eax+20h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+20h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_106EA4E  +
lea eax [esi+4] +
mov ecx [eax] +
cmp byte ptr [ecx+20h] 0 +
jz loc_106F364  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+20h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1002061  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+4] +
cmp byte ptr [eax+21h] 0 +
push edi  +
mov edi ecx +
mov byte ptr [ebp+var_4] 1 +
jnz loc_106F45A  +
mov ecx [ebx] +
cmp ecx [eax+0Ch] +
mov edi eax +
setl byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jz loc_106F451  +
mov eax [eax] +
jmp loc_106F454  +
mov eax [eax+8] +
cmp byte ptr [eax+21h] 0 +
jz loc_106F43E  +
cmp byte ptr [ebp+var_4] 0 +
mov ecx edi +
mov [ebp+arg_4] ecx +
jz loc_106F491  +
mov eax [esi+4] +
cmp edi [eax] +
jnz loc_106F486  +
push ebx  +
push edi  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_106F2CB  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
jmp loc_106F4A6  +
lea ecx [ebp+arg_4] +
call sub_106F168  +
mov ecx [ebp+arg_4] +
mov eax [ecx+0Ch] +
cmp eax [ebx] +
jge loc_106F49F  +
push ebx  +
push edi  +
push [ebp+var_4]  +
jmp loc_106F470  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_8] +
lea ebx [esi+4] +
push eax  +
mov ecx ebx +
mov [ebp+var_1] 0 +
call sub_106F1F3  +
mov ecx [ebp+var_8] +
cmp ecx [esi+8] +
jz loc_106F51D  +
mov edi [ebp+arg_8] +
mov eax edi +
sub eax [ecx+18h] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax [esi] +
mov edx [ebp+arg_C] +
mov eax [ebp+arg_4] +
jge loc_106F50A  +
cmp [ecx+1Ch] edx +
jnz loc_106F50A  +
mov esi [ecx+10h] +
cmp esi [eax] +
jnz loc_106F50A  +
mov esi [ecx+14h] +
cmp esi [eax+4] +
jz loc_106F55A  +
mov [ecx+1Ch] edx +
mov [ecx+18h] edi +
mov edx [eax] +
mov [ecx+10h] edx +
mov eax [eax+4] +
mov [ecx+14h] eax +
jmp loc_106F556  +
mov eax [ebp+arg_C] +
mov [ebp+var_8] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_28] eax +
mov [ebp+var_14] ecx +
lea esi [ebp+var_14] +
lea edi [ebp+var_24] +
movs   +
movs   +
lea eax [ebp+var_28] +
movs   +
push eax  +
lea eax [ebp+var_C] +
push eax  +
mov ecx ebx +
movs   +
call sub_106F41C  +
mov [ebp+var_1] 1 +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_106F29F  +
mov dword ptr [esi] 0C8h +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+10h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+14h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_0] +
mov [ebp+var_10] eax +
mov eax [esi+8] +
mov [ebp+var_C] eax +
mov eax [esi+0Ch] +
mov [ebp+var_8] eax +
mov eax [esi+10h] +
mov [ebp+var_4] eax +
push 2  +
lea eax [ebp+var_10] +
push eax  +
call sub_1039BC2  +
mov eax [ebp+var_10] +
mov [esi+4] eax +
mov eax [ebp+var_C] +
mov [esi+8] eax +
mov eax [ebp+var_8] +
mov [esi+0Ch] eax +
mov eax [ebp+var_4] +
mov [esi+10h] eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov [ebp-20h] eax +
mov eax [esi+8] +
mov ecx [ebp+8] +
mov [ebp-1Ch] eax +
mov eax [esi+0Ch] +
mov [ebp-18h] eax +
mov eax [esi+10h] +
mov [ebp-14h] eax +
mov eax [esi+14h] +
mov [ebp-10h] eax +
mov eax [esi+18h] +
mov [ebp-0Ch] eax +
mov eax [esi+1Ch] +
mov [ebp-8] eax +
mov eax [esi+20h] +
mov [ebp-4] eax +
push 4  +
lea eax [ebp-20h] +
push eax  +
call sub_1039BC2  +
mov eax [ebp-20h] +
mov [esi+4] eax +
mov eax [ebp-1Ch] +
mov [esi+8] eax +
mov eax [ebp-18h] +
mov [esi+0Ch] eax +
mov eax [ebp-14h] +
mov [esi+10h] eax +
mov eax [ebp-10h] +
mov [esi+14h] eax +
mov eax [ebp-0Ch] +
mov [esi+18h] eax +
mov eax [ebp-8] +
mov [esi+1Ch] eax +
mov eax [ebp-4] +
mov [esi+20h] eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+8] +
push edi  +
call sub_100C68F  +
call sub_10391CE  +
mov edi eax +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
push 0  +
push 0  +
mov ecx edi +
call sub_1039439  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
push dword ptr [ebp+8]  +
call sub_106D447  +
push edi  +
call sub_103928E  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+8]  +
lea edi [esi+4] +
push dword ptr [edi]  +
lea ecx [ebp+var_10] +
call sub_100C6CD  +
push dword ptr [esi+10h]  +
lea ecx [ebp+var_8] +
push dword ptr [esi+0Ch]  +
call sub_100C6CD  +
mov ecx [ebp+arg_0] +
push 2  +
lea eax [ebp+var_10] +
push eax  +
call sub_1039BC2  +
mov eax [ebp+var_10] +
mov [edi] eax +
mov eax [ebp+var_C] +
mov [esi+8] eax +
mov eax [ebp+var_8] +
mov [esi+0Ch] eax +
mov eax [ebp+var_4] +
mov ecx edi +
mov [esi+10h] eax +
call sub_10397CE  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
push dword ptr [esi+8]  +
lea ecx [ebp-10h] +
push dword ptr [esi+4]  +
call sub_100C6CD  +
push dword ptr [esi+10h]  +
lea ecx [ebp-8] +
push dword ptr [esi+0Ch]  +
call sub_100C6CD  +
mov ecx [ebp+8] +
push 2  +
lea eax [ebp-10h] +
push eax  +
call sub_1039BC2  +
mov eax [ebp-10h] +
mov [esi+4] eax +
mov eax [ebp-0Ch] +
mov [esi+8] eax +
mov eax [ebp-8] +
mov [esi+0Ch] eax +
mov eax [ebp-4] +
mov [esi+10h] eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push esi  +
mov esi ecx +
fld  dword ptr [esi+14h] +
mov eax [esi+8] +
fld  ds:dbl_106FAC0 +
add eax [esi+10h] +
fmul st(1) st +
push edi  +
fld  ds:dbl_104AB60 +
cdq   +
sub eax edx +
fdiv st(2) st +
sar eax 1 +
push eax  +
lea edi [esi+4] +
mov eax [edi] +
add eax [esi+0Ch] +
lea ecx [ebp-18h] +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
fxch  st(2) +
fstp  dword ptr [ebp-8] +
fld  dword ptr [esi+18h] +
fadd  dword ptr [esi+14h] +
fmulp st(1) st +
fdivrp st(1) st +
fstp  dword ptr [ebp-4] +
call sub_100C6CD  +
mov ecx edi +
call sub_100DC54  +
mov [ebp-0Ch] eax +
fild  dword ptr [ebp-0Ch] +
fstp  dword ptr [ebp-10h] +
fld  dword ptr [ebp-8] +
call _CIsin  +
fstp  dword ptr [ebp-0Ch] +
fld  dword ptr [ebp-0Ch] +
fmul  dword ptr [ebp-10h] +
fmul  ds:dbl_1006830 +
fiadd  dword ptr [ebp-14h] +
call _ftol2_sse  +
push eax  +
mov ecx edi +
call sub_100DC3F  +
mov [ebp-10h] eax +
fild  dword ptr [ebp-10h] +
fstp  dword ptr [ebp-0Ch] +
fld  dword ptr [ebp-8] +
call _CIcos  +
fstp  dword ptr [ebp-10h] +
fld  dword ptr [ebp-10h] +
fmul  dword ptr [ebp-0Ch] +
fmul  ds:dbl_1006830 +
fiadd  dword ptr [ebp-18h] +
call _ftol2_sse  +
push eax  +
lea ecx [ebp-28h] +
call sub_100C6CD  +
mov ecx edi +
call sub_100DC54  +
mov [ebp-10h] eax +
fild  dword ptr [ebp-10h] +
fstp  dword ptr [ebp-0Ch] +
fld  dword ptr [ebp-4] +
call _CIsin  +
fstp  dword ptr [ebp-10h] +
fld  dword ptr [ebp-10h] +
fmul  dword ptr [ebp-0Ch] +
fmul  ds:dbl_1006830 +
fiadd  dword ptr [ebp-14h] +
call _ftol2_sse  +
push eax  +
mov ecx edi +
call sub_100DC3F  +
mov [ebp-10h] eax +
fild  dword ptr [ebp-10h] +
fstp  dword ptr [ebp-0Ch] +
fld  dword ptr [ebp-4] +
call _CIcos  +
fstp  dword ptr [ebp-10h] +
fld  dword ptr [ebp-10h] +
fmul  dword ptr [ebp-0Ch] +
fmul  ds:dbl_1006830 +
fiadd  dword ptr [ebp-18h] +
call _ftol2_sse  +
push eax  +
lea ecx [ebp-30h] +
call sub_100C6CD  +
mov eax [ebp-28h] +
mov ecx [ebp+8] +
mov [ebp-40h] eax +
mov eax [ebp-24h] +
mov [ebp-3Ch] eax +
mov eax [ebp-30h] +
mov [ebp-38h] eax +
mov eax [ebp-2Ch] +
mov [ebp-34h] eax +
push 2  +
lea eax [ebp-40h] +
push eax  +
call sub_1039BC2  +
push dword ptr [esi+8]  +
lea ecx [ebp-50h] +
push dword ptr [edi]  +
call sub_100C6CD  +
push dword ptr [esi+10h]  +
lea ecx [ebp-48h] +
push dword ptr [esi+0Ch]  +
call sub_100C6CD  +
mov ecx [ebp+8] +
push 2  +
lea eax [ebp-50h] +
push eax  +
call sub_1039BC2  +
mov eax [ebp-50h] +
mov [edi] eax +
mov eax [ebp-4Ch] +
mov [esi+8] eax +
mov eax [ebp-48h] +
mov [esi+0Ch] eax +
mov eax [ebp-44h] +
mov ecx edi +
mov [esi+10h] eax +
call sub_10397CE  +
mov eax [esi+8] +
add eax [esi+10h] +
lea ecx [ebp-20h] +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
mov eax [edi] +
add eax [esi+0Ch] +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
call sub_100C6CD  +
mov eax [ebp-3Ch] +
sub eax [ebp-1Ch] +
mov [ebp+8] eax +
mov eax [ebp-40h] +
fild  dword ptr [ebp+8] +
sub eax [ebp-20h] +
mov [ebp+8] eax +
fild  dword ptr [ebp+8] +
call _CIatan2  +
fstp  dword ptr [ebp+8] +
fld  dword ptr [ebp+8] +
mov eax [ebp-34h] +
fmul  ds:dbl_104AB60 +
sub eax [ebp-1Ch] +
mov [ebp+8] eax +
fdiv  ds:dbl_106FAC0 +
mov eax [ebp-38h] +
sub eax [ebp-20h] +
fstp  dword ptr [ebp-8] +
fld  dword ptr [ebp-8] +
fstp  dword ptr [esi+14h] +
fild  dword ptr [ebp+8] +
mov [ebp+8] eax +
fild  dword ptr [ebp+8] +
call _CIatan2  +
fstp  dword ptr [ebp+8] +
fld  dword ptr [ebp+8] +
fmul  ds:dbl_104AB60 +
fdiv  ds:dbl_106FAC0 +
fstp  dword ptr [ebp-4] +
fld  dword ptr [ebp-4] +
fld  st +
fsub  dword ptr [ebp-8] +
fstp  dword ptr [ebp+8] +
fld  ds:flt_106FAB8 +
fcom  dword ptr [esi+18h] +
fnstsw  ax +
fldz   +
fld  ds:dbl_104AB50 +
fld  ds:flt_102E194 +
test ah 41h +
jz loc_106F9EE  +
fcom  dword ptr [esi+18h] +
fnstsw  ax +
test ah 5 +
jnp loc_106F9EE  +
fld  dword ptr [ebp+8] +
fcom  st(4) +
fnstsw  ax +
fstp  st(4) +
test ah 5 +
jnp loc_106F9EA  +
fcomp  st(3) +
fnstsw  ax +
test ah 5 +
jnp loc_106FA05  +
jmp loc_106FA20  +
fstp  st +
jmp loc_106FA05  +
fld  dword ptr [ebp+8] +
fcom  st(4) +
fnstsw  ax +
fstp  st(4) +
test ah 41h +
jnz loc_106FA40  +
fcomp  st(3) +
fnstsw  ax +
test ah 41h +
jnz loc_106FA20  +
fxch  st(2) +
fcom  st(1) +
fnstsw  ax +
test ah 5 +
jp loc_106FA14  +
fadd st st(2) +
jmp loc_106FA18  +
fld  st(2) +
fsubrp st(1) st +
fstp  dword ptr [ebp+8] +
fld  dword ptr [ebp+8] +
fxch  st(2) +
fld  dword ptr [ebp-8] +
fld  st(3) +
faddp st(1) st +
fstp  dword ptr [ebp+8] +
fld  ds:flt_104AB58 +
fld  dword ptr [ebp+8] +
fcom  st(1) +
fnstsw  ax +
test ah 41h +
jnz loc_106FA44  +
fsub st st(2) +
jmp loc_106FA4F  +
fstp  st +
jmp loc_106FA20  +
***
fcom  st(3) +
fnstsw  ax +
test ah 5 +
jp loc_106FA54  +
fadd st st(2) +
fstp  dword ptr [ebp+8] +
jmp loc_106FA56  +
fstp  st +
fcomp  st(4) +
fnstsw  ax +
test ah 5 +
jp loc_106FA65  +
fstp  st(1) +
fsubp st(2) st +
jmp loc_106FA72  +
fxch  st(1) +
fcomp  st(3) +
fnstsw  ax +
test ah 41h +
jnz loc_106FA79  +
faddp st(2) st +
fxch  st(1) +
fstp  dword ptr [ebp-4] +
jmp loc_106FA7D  +
fstp  st +
fstp  st(1) +
fld  dword ptr [ebp-4] +
fsub  dword ptr [ebp+8] +
fld  ds:dbl_104A3E8 +
fcomp  st(1) +
fnstsw  ax +
test ah 5 +
jnp loc_106FAA1  +
fcomp  ds:dbl_106FAB0 +
fnstsw  ax +
test ah 5 +
jp loc_106FAA5  +
jmp loc_106FAA3  +
fstp  st +
fchs   +
pop edi  +
fstp  dword ptr [esi+18h] +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+8] +
mov esi [eax] +
cmp esi eax +
jz loc_106FAF4  +
push [ebp+arg_4]  +
mov ecx [esi+8] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
mov esi [esi] +
cmp esi [edi+8] +
jnz loc_106FADF  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
retn   +
***
retn 0Ch  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_106FB35  +
mov ecx [eax] +
mov edx [ebp+arg_8] +
add [ebp+arg_8] 4 +
add eax 4 +
mov [edx] ecx +
mov [ebp+arg_0] eax +
cmp eax [ebp+arg_4] +
jnz loc_106FB24  +
mov eax [ebp+arg_8] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_106FB1A  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 2Ch +
call sub_10513B6  +
mov eax [eax] +
pop ebp  +
retn 4  +
***
lea eax [ecx+80h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
sub ecx 0FFFFFF80h +
call sub_10513B6  +
mov eax [eax] +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
push 0C8h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_106FBF3  +
mov eax [esi+1Ch] +
push dword ptr [eax+90h]  +
call sub_1076E2D  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp+rc] +
push edx  +
xor bl bl +
call dword ptr [eax+70h]  +
cmp [ebp+arg_0] 2 +
jl loc_106FC39  +
cmp [ebp+arg_0] 5 +
jg loc_106FC39  +
lea eax [ebp+rc] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_106FC45  +
inc bl  +
jmp loc_106FC45  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1039B4F  +
mov bl al +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_100C6CD  +
mov eax [ebp+arg_8] +
mov [esi+8] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_104AB6C +
jz loc_106FC92  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
and dword ptr [eax+8] 0 +
mov dword ptr [eax+4] 4 +
mov dword ptr [eax] offset off_106FCC4 +
mov [eax+0Ch] ecx +
pop ebp  +
retn 4  +
***
retn   +
***
call sub_100208C  +
mov esi ecx +
xor ebx ebx +
push ebx  +
push offset off_108D4CC  +
push offset off_108D4AC  +
push ebx  +
push dword ptr [ebp+0Ch]  +
call __RTDynamicCast  +
push 0E0h  +
mov edi eax +
call ??2@YAPAXI@Z  +
add esp 18h +
mov [ebp-10h] eax +
mov [ebp-4] ebx +
cmp eax ebx +
jz loc_106FD1F  +
mov ecx eax +
call sub_1077421  +
jmp loc_106FD21  +
xor eax eax +
mov ecx [esi+24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ecx+20h] eax +
mov eax [esi+24h] +
mov ecx [eax+14h] +
push dword ptr [eax+20h]  +
mov edx [ecx] +
call dword ptr [edx]  +
lea ebx [edi+0Ch] +
push ebx  +
lea ecx [ebp-14h] +
call sub_106CE00  +
mov eax [ebp-14h] +
push dword ptr [ebp+0Ch]  +
mov [esi+18h] eax +
mov eax [ebp-10h] +
push dword ptr [ebp+8]  +
mov ecx esi +
mov [esi+1Ch] eax +
mov byte ptr [esi+20h] 0 +
call sub_103AC47  +
sub esp 10h +
xor eax eax +
mov ecx esp +
mov [ebp+0Ch] esp +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_100C6E8  +
lea eax [edi+18h] +
push eax  +
push dword ptr [edi+10h]  +
lea ecx [ebp-34h] +
push dword ptr [ebx]  +
call sub_100F049  +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-34h] +
push edx  +
call dword ptr [eax+34h]  +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-34h] +
push edx  +
call dword ptr [eax+34h]  +
call sub_1002061  +
retn 8  +
***
push 3Ch  +
mov eax offset loc_107FEB8 +
call sub_100208C  +
mov esi ecx +
mov eax [ebp+8] +
mov ecx [eax] +
mov eax [eax+4] +
lea edx [ebp-14h] +
mov [ebp-14h] ecx +
mov ecx [esi+4] +
push edx  +
lea edx [esi+8] +
mov [ebp-10h] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+4Ch]  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_106CE00  +
mov ecx [esi+24h] +
mov eax [ecx] +
lea edx [ebp-1Ch] +
push edx  +
call dword ptr [eax+74h]  +
test al al +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
jz loc_106FE23  +
call dword ptr [eax+74h]  +
push eax  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-20h] +
push dword ptr [ebp-14h]  +
call sub_106FC52  +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-20h] +
push edx  +
call dword ptr [eax+30h]  +
jmp loc_106FE73  +
call dword ptr [eax+74h]  +
push eax  +
push dword ptr [esi+1Ch]  +
lea ecx [ebp-2Ch] +
push dword ptr [esi+18h]  +
call sub_106FC52  +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-2Ch] +
push edx  +
call dword ptr [eax+30h]  +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
sub esp 10h +
mov edx esp +
mov [ebp+8] esp +
push edx  +
call dword ptr [eax+70h]  +
lea ecx [ebp-48h] +
call sub_103A659  +
mov ecx [esi+4] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-48h] +
push edx  +
push dword ptr [ecx+0Ch]  +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
call dword ptr [eax+74h]  +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+4]  +
lea ecx [ebp-0Ch] +
push dword ptr [eax]  +
call sub_106FC52  +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-0Ch] +
push edx  +
call dword ptr [eax+30h]  +
mov byte ptr [esi+20h] 1 +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub esp 14h +
test byte ptr [eax+8] 1 +
push esi  +
mov esi ecx +
jz loc_106FF1F  +
mov eax [ebp+8] +
mov ecx [eax] +
mov eax [eax+4] +
lea edx [ebp-8] +
mov [ebp-8] ecx +
mov ecx [esi+4] +
push edx  +
lea edx [esi+8] +
mov [ebp-4] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+4Ch]  +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
call dword ptr [eax+74h]  +
push eax  +
push dword ptr [ebp-4]  +
lea ecx [ebp-14h] +
push dword ptr [ebp-8]  +
call sub_106FC52  +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-14h] +
push edx  +
call dword ptr [eax+30h]  +
pop esi  +
leave   +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov dword ptr [ebp-14h] 3 +
mov dword ptr [ebp-18h] offset off_1006E84 +
mov dword ptr [ebp-10h] 5 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
mov eax [esi+24h] +
mov ecx [eax+28h] +
call sub_1005BE0  +
mov eax [ebp+8] +
sub eax [esi+18h] +
mov ecx [ebp-10h] +
cdq   +
xor eax edx +
add ecx ecx +
sub eax edx +
cmp eax ecx +
jg loc_106FF86  +
mov eax [ebp+0Ch] +
sub eax [esi+1Ch] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax ecx +
jg loc_106FF86  +
mov al 1 +
jmp loc_106FF88  +
xor al al +
call sub_1002061  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
call dword ptr [eax+74h]  +
push eax  +
push dword ptr [esi+1Ch]  +
lea ecx [ebp-24h] +
push dword ptr [esi+18h]  +
call sub_106FC52  +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-24h] +
push edx  +
call dword ptr [eax+30h]  +
mov ecx [esi+24h] +
push dword ptr [ecx+20h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+60h]  +
mov eax [esi+24h] +
mov ecx [eax+14h] +
push dword ptr [eax+20h]  +
mov edx [ecx] +
call dword ptr [edx+4]  +
mov eax [esi+24h] +
mov ecx [eax+20h] +
test ecx ecx +
jz loc_106FFF8  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+0Ch]  +
mov eax [esi+24h] +
and dword ptr [eax+20h] 0 +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-18h] offset off_100E4B4 +
mov ecx [esi+4] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-18h] +
push edx  +
push dword ptr [ecx+4]  +
call dword ptr [eax+70h]  +
xor eax eax +
inc eax  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
call dword ptr [eax+74h]  +
push eax  +
push dword ptr [esi+1Ch]  +
lea ecx [ebp-24h] +
push dword ptr [esi+18h]  +
call sub_106FC52  +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-24h] +
push edx  +
call dword ptr [eax+30h]  +
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-14h] 5 +
mov dword ptr [ebp-18h] offset off_104ABA4 +
mov ecx [esi+4] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-18h] +
push edx  +
push dword ptr [ecx+0Ch]  +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
call dword ptr [eax+74h]  +
push eax  +
push dword ptr [esi+1Ch]  +
lea ecx [ebp-18h] +
push dword ptr [esi+18h]  +
call sub_106FC52  +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-18h] +
push edx  +
call dword ptr [eax+30h]  +
and dword ptr [ebp-20h] 0 +
mov dword ptr [ebp-24h] 3 +
mov dword ptr [ebp-28h] offset off_104AB88 +
mov byte ptr [ebp-1Ch] 1 +
mov ecx [esi+4] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-28h] +
push edx  +
push dword ptr [ecx+0Ch]  +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
call dword ptr [eax+74h]  +
push eax  +
push dword ptr [esi+1Ch]  +
lea ecx [ebp-18h] +
push dword ptr [esi+18h]  +
call sub_106FC52  +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-18h] +
push edx  +
call dword ptr [eax+30h]  +
xor eax eax +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] eax +
mov dword ptr [ebp-28h] offset off_104AB88 +
mov [ebp-1Ch] al +
mov ecx [esi+4] +
lea edx [ebp-28h] +
push edx  +
push dword ptr [ecx+0Ch]  +
mov [ebp-4] eax +
mov eax [ecx] +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
call dword ptr [eax+74h]  +
push eax  +
push dword ptr [esi+1Ch]  +
lea ecx [ebp-18h] +
push dword ptr [esi+18h]  +
call sub_106FC52  +
mov eax [esi+24h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-18h] +
push edx  +
call dword ptr [eax+30h]  +
push dword ptr [ebp+8]  +
lea ecx [ebp-28h] +
call sub_106FC9E  +
mov ecx [esi+4] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-28h] +
push edx  +
push dword ptr [ecx+0Ch]  +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn 4  +
***
mov ecx [esi+4] +
mov eax [ecx] +
lea edx [ebp-20h] +
push edx  +
push dword ptr [ecx+0Ch]  +
mov [ebp-4] ebx +
call dword ptr [eax+70h]  +
mov [esi+20h] bl +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 8 +
jz loc_1070330  +
pop ebp  +
jmp sub_1038ED3  +
xor al al +
pop ebp  +
retn 4  +
***
mov byte ptr [ecx+1Ch] 1 +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+20h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp+rc] +
push edx  +
xor bl bl +
call dword ptr [eax+70h]  +
cmp [ebp+arg_0] 2 +
jl loc_1070382  +
cmp [ebp+arg_0] 5 +
jg loc_1070382  +
lea eax [ebp+rc] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_107038E  +
inc bl  +
jmp loc_107038E  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1039B4F  +
mov bl al +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
xor ebx ebx +
push ebx  +
push offset off_108D4CC  +
push offset off_108D4AC  +
push ebx  +
push dword ptr [ebp+0Ch]  +
call __RTDynamicCast  +
push 108h  +
mov edi eax +
call ??2@YAPAXI@Z  +
mov ecx eax +
add esp 18h +
mov [ebp-10h] ecx +
mov [ebp-4] ebx +
cmp ecx ebx +
jz loc_10703E1  +
call sub_10777B7  +
jmp loc_10703E3  +
xor eax eax +
mov ecx [esi+20h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ecx+20h] eax +
mov eax [esi+20h] +
mov ecx [eax+14h] +
push dword ptr [eax+20h]  +
mov edx [ecx] +
call dword ptr [edx]  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_103AC47  +
add edi 0Ch +
push edi  +
lea ecx [ebp-1Ch] +
call sub_106CE00  +
fld1   +
sub esp 10h +
fstp  dword ptr [ebp-10h] +
mov ecx esp +
mov [ebp+0Ch] esp +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [ebp-14h] 1 +
call sub_100C6E8  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-3Ch] +
push dword ptr [ebp-1Ch]  +
call sub_100F049  +
mov eax [esi+20h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-3Ch] +
push edx  +
call dword ptr [eax+34h]  +
mov eax [esi+20h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-3Ch] +
push edx  +
call dword ptr [eax+34h]  +
mov dword ptr [esi+18h] 2 +
mov [esi+1Ch] bl +
call sub_1002061  +
retn 8  +
***
push 28h  +
mov eax offset loc_10800C8 +
call sub_100208C  +
mov esi ecx +
mov edi [ebp+8] +
push edi  +
lea ecx [ebp-14h] +
call sub_106CE00  +
mov ecx [esi+20h] +
mov eax [ecx] +
lea edx [ebp-14h] +
push edx  +
call dword ptr [eax+74h]  +
test al al +
jz loc_10704C4  +
mov eax [esi+18h] +
dec eax  +
push eax  +
push dword ptr [edi+4]  +
lea ecx [ebp-18h] +
push dword ptr [edi]  +
call sub_106FC52  +
mov eax [esi+20h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-18h] +
push edx  +
call dword ptr [eax+30h]  +
jmp loc_10704F3  +
mov eax [esi+20h] +
mov ecx [eax+20h] +
mov eax [ecx] +
sub esp 10h +
mov edx esp +
mov [ebp+8] esp +
push edx  +
call dword ptr [eax+70h]  +
lea ecx [ebp-34h] +
call sub_103A659  +
mov ecx [esi+4] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-34h] +
push edx  +
push dword ptr [ecx+0Ch]  +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn 8  +
***
push 58h  +
mov eax offset loc_1080120 +
call sub_100208C  +
mov esi ecx +
mov ecx [esi+18h] +
mov eax [ebp+8] +
cmp ecx 2 +
jnz loc_1070534  +
mov edx [esi+8] +
cmp edx [eax] +
jnz loc_1070534  +
mov edx [esi+0Ch] +
cmp edx [eax+4] +
jnz loc_1070534  +
mov ecx esi +
call sub_1071891  +
jmp loc_10705FB  +
mov edx [eax] +
mov eax [eax+4] +
mov [ebp-14h] edx +
mov [ebp-10h] eax +
cmp ecx 2 +
jnz loc_1070554  +
mov ecx [esi+4] +
mov eax [ecx] +
lea edx [ebp-14h] +
push edx  +
lea edx [esi+8] +
push edx  +
call dword ptr [eax+4Ch]  +
mov eax [esi+18h] +
dec eax  +
push eax  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-28h] +
push dword ptr [ebp-14h]  +
call sub_106FC52  +
mov eax [esi+20h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-28h] +
push edx  +
call dword ptr [eax+30h]  +
xor ebx ebx +
cmp dword ptr [esi+18h] 4 +
jz loc_10705CA  +
cmp [esi+1Ch] bl +
jnz loc_10705CA  +
mov eax [ebp+0Ch] +
fld  dword ptr [eax+10h] +
sub esp 10h +
mov ecx esp +
fstp  dword ptr [ebp-18h] +
mov [ebp+8] esp +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [ebp-1Ch] 1 +
call sub_100C6E8  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-64h] +
push dword ptr [ebp-14h]  +
call sub_100F049  +
mov eax [esi+20h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-64h] +
push edx  +
call dword ptr [eax+34h]  +
inc dword ptr [esi+18h]  +
jmp loc_10705FB  +
mov eax [esi+20h] +
mov ecx [eax+20h] +
mov eax [ecx] +
sub esp 10h +
mov edx esp +
mov [ebp+8] esp +
push edx  +
call dword ptr [eax+70h]  +
lea ecx [ebp-44h] +
call sub_103A659  +
mov ecx [esi+4] +
mov eax [ecx] +
lea edx [ebp-44h] +
push edx  +
push dword ptr [ecx+0Ch]  +
mov [ebp-4] ebx +
call dword ptr [eax+70h]  +
mov [esi+1Ch] bl +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub esp 14h +
test byte ptr [eax+8] 1 +
push esi  +
mov esi ecx +
jz loc_1070662  +
cmp dword ptr [esi+18h] 2 +
mov eax [ebp+8] +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-8] ecx +
mov [ebp-4] eax +
jnz loc_1070640  +
mov ecx [esi+4] +
mov eax [ecx] +
lea edx [ebp-8] +
push edx  +
lea edx [esi+8] +
push edx  +
call dword ptr [eax+4Ch]  +
mov eax [esi+18h] +
dec eax  +
push eax  +
push dword ptr [ebp-4]  +
lea ecx [ebp-14h] +
push dword ptr [ebp-8]  +
call sub_106FC52  +
mov eax [esi+20h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-14h] +
push edx  +
call dword ptr [eax+30h]  +
pop esi  +
leave   +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov ecx [esi+20h] +
push dword ptr [ecx+20h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+60h]  +
mov eax [esi+20h] +
mov ecx [eax+14h] +
push dword ptr [eax+20h]  +
mov edx [ecx] +
call dword ptr [edx+4]  +
mov eax [esi+20h] +
mov ecx [eax+20h] +
test ecx ecx +
jz loc_10706A6  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+0Ch]  +
mov eax [esi+20h] +
and dword ptr [eax+20h] 0 +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-18h] offset off_100E4B4 +
mov ecx [esi+4] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-18h] +
push edx  +
push dword ptr [ecx+4]  +
call dword ptr [eax+70h]  +
xor eax eax +
inc eax  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
and dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-14h] 5 +
mov dword ptr [ebp-18h] offset off_104ABA4 +
mov ecx [ecx+4] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-18h] +
push edx  +
push dword ptr [ecx+0Ch]  +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
and dword ptr [ebp-14h] 0 +
mov dword ptr [ebp-18h] 3 +
mov dword ptr [ebp-1Ch] offset off_104AB88 +
mov byte ptr [ebp-10h] 1 +
mov ecx [ecx+4] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-1Ch] +
push edx  +
push dword ptr [ecx+0Ch]  +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
xor eax eax +
mov dword ptr [ebp-18h] 3 +
mov [ebp-14h] eax +
mov dword ptr [ebp-1Ch] offset off_104AB88 +
mov [ebp-10h] al +
mov ecx [ecx+4] +
lea edx [ebp-1Ch] +
push edx  +
push dword ptr [ecx+0Ch]  +
mov [ebp-4] eax +
mov eax [ecx] +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
push dword ptr [ebp+8]  +
lea ecx [ebp-1Ch] +
call sub_106FC9E  +
mov ecx [esi+4] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-1Ch] +
push edx  +
push dword ptr [ecx+0Ch]  +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100617C +
jz loc_10707EC  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
and dword ptr [ecx+24h] 0 +
pop ebp  +
jmp sub_103A53C  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1071A0D  +
push dword ptr [esi+0Ch]  +
mov eax [esi] +
push dword ptr [esi+8]  +
mov ecx esi +
call dword ptr [eax+64h]  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1071A2D  +
push dword ptr [esi+0Ch]  +
mov eax [esi] +
push dword ptr [esi+8]  +
mov ecx esi +
call dword ptr [eax+64h]  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1071A4D  +
push dword ptr [esi+0Ch]  +
mov eax [esi] +
push dword ptr [esi+8]  +
mov ecx esi +
call dword ptr [eax+64h]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
fldz   +
mov ecx [ebp+arg_8] +
mov eax [ebp+arg_C] +
fstp  [ebp+var_4] +
push esi  +
mov esi [ebp+arg_14] +
cmp ecx [ebp+arg_10] +
jnz loc_1070893  +
cmp eax esi +
jz loc_10709A3  +
mov edx [ebp+arg_4] +
sub esi eax +
push ebx  +
mov ebx [ebp+arg_10] +
sub edx eax +
sub ebx ecx +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_8] edx +
mov edx esi +
mov [ebp+var_4] esi +
imul edx esi +
imul esi [ebp+var_8] +
sub edi ecx +
mov [ebp+arg_C] ebx +
imul ebx edi +
add ebx esi +
mov esi [ebp+arg_C] +
imul esi esi +
mov [ebp+var_C] ebx +
add esi edx +
sub eax [ebp+arg_4] +
fild  [ebp+var_C] +
mov [ebp+var_C] esi +
imul eax [ebp+arg_C] +
fidiv  [ebp+var_C] +
mov esi [ebp+arg_0] +
sub ecx esi +
mov [ebp+var_10] edx +
mov [ebp+var_14] edi +
imul ecx [ebp+var_4] +
fstp  [ebp+var_C] +
fild  [ebp+arg_C] +
sub eax ecx +
mov [ebp+arg_C] eax +
fild  [ebp+arg_C] +
fabs   +
fstp  [ebp+arg_C] +
fld  [ebp+arg_C] +
fstp  [ebp+var_4] +
fld  st +
fmulp st(1) st +
fiadd  [ebp+var_10] +
fstp  [ebp+arg_C] +
fld  [ebp+arg_C] +
call _CIsqrt  +
fstp  [ebp+arg_C] +
fld  [ebp+arg_C] +
pop edi  +
fdivr  [ebp+var_4] +
pop ebx  +
fstp  [ebp+var_4] +
fldz   +
fcomp  [ebp+var_C] +
fnstsw  ax +
test ah 41h +
jz loc_1070938  +
fld1   +
fcomp  [ebp+var_C] +
fnstsw  ax +
test ah 5 +
jp loc_10709A3  +
mov eax [ebp+var_8] +
fild  [ebp+var_14] +
sub esi [ebp+arg_10] +
imul eax eax +
mov [ebp+arg_C] eax +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_14] +
fild  [ebp+arg_C] +
fld  st(1) +
mov [ebp+var_14] esi +
fmulp st(2) st +
mov ecx eax +
imul ecx eax +
faddp st(1) st +
fstp  [ebp+arg_C] +
fild  [ebp+var_14] +
mov [ebp+arg_4] ecx +
fild  [ebp+arg_4] +
fld  st(1) +
fmulp st(2) st +
faddp st(1) st +
fstp  [ebp+arg_4] +
fld  [ebp+arg_C] +
fld  [ebp+arg_4] +
fcompp st(1) st +
fnstsw  ax +
test ah 41h +
jnz loc_1070992  +
fld  [ebp+arg_C] +
call _CIsqrt  +
fstp  [ebp+arg_4] +
fld  [ebp+arg_4] +
jmp loc_10709A0  +
fld  [ebp+arg_4] +
call _CIsqrt  +
fstp  [ebp+arg_4] +
fld  [ebp+arg_4] +
fstp  [ebp+var_4] +
fld  [ebp+var_4] +
pop esi  +
leave   +
retn 18h  +
***
call sub_100208C  +
mov esi ecx +
xor ebx ebx +
push ebx  +
push offset off_108D4CC  +
push offset off_108D4AC  +
push ebx  +
push dword ptr [ebp+0Ch]  +
call __RTDynamicCast  +
push 0E8h  +
mov edi eax +
call ??2@YAPAXI@Z  +
mov ecx eax +
add esp 18h +
mov [ebp-10h] ecx +
mov [ebp-4] ebx +
cmp ecx ebx +
jz loc_10709F6  +
call sub_1077D71  +
jmp loc_10709F8  +
xor eax eax +
mov ecx [esi+18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ecx+20h] eax +
mov eax [esi+18h] +
mov ecx [eax+14h] +
push dword ptr [eax+20h]  +
mov edx [ecx] +
call dword ptr [edx]  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_103AC47  +
lea eax [edi+0Ch] +
push eax  +
lea ecx [ebp-18h] +
call sub_106CE00  +
sub esp 10h +
mov ecx esp +
mov [ebp+0Ch] esp +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_100C6E8  +
add edi 18h +
push edi  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-38h] +
push dword ptr [ebp-18h]  +
call sub_100F049  +
mov eax [esi+18h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-38h] +
push edx  +
call dword ptr [eax+34h]  +
mov eax [esi+18h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-38h] +
push edx  +
call dword ptr [eax+34h]  +
call sub_1002061  +
retn 8  +
***
push 30h  +
mov eax offset loc_1080294 +
call sub_100208C  +
mov esi ecx +
xor ebx ebx +
lea edi [ebp-3Ch] +
inc ebx  +
mov ecx edi +
call sub_102A69D  +
add edi 8 +
dec ebx  +
jns loc_1070A8A  +
mov eax [ebp+8] +
mov ecx [eax] +
mov eax [eax+4] +
lea edx [ebp-14h] +
mov [ebp-14h] ecx +
mov ecx [esi+4] +
push edx  +
lea edx [esi+8] +
mov [ebp-10h] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+4Ch]  +
mov eax [esi+18h] +
mov ecx [eax+20h] +
mov eax [ecx] +
call dword ptr [eax+74h]  +
push eax  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-2Ch] +
push dword ptr [ebp-14h]  +
call sub_106FC52  +
mov eax [esi+18h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-2Ch] +
push edx  +
call dword ptr [eax+30h]  +
mov eax [esi+18h] +
mov ecx [eax+20h] +
mov eax [ecx] +
push 2  +
lea edx [ebp-3Ch] +
push edx  +
call dword ptr [eax+78h]  +
mov eax [ebp-3Ch] +
cmp eax [ebp-34h] +
jnz loc_1070B08  +
mov eax [ebp-38h] +
cmp eax [ebp-30h] +
jnz loc_1070B08  +
mov ecx esi +
call sub_1071891  +
jmp loc_1070B29  +
xor eax eax +
mov [ebp-1Ch] eax +
mov [ebp-18h] eax +
mov dword ptr [ebp-20h] offset off_100E4B4 +
mov ecx [esi+4] +
lea edx [ebp-20h] +
push edx  +
push dword ptr [ecx+0Ch]  +
mov [ebp-4] eax +
mov eax [ecx] +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub esp 14h +
test byte ptr [eax+8] 1 +
push esi  +
mov esi ecx +
jz loc_1070B91  +
mov eax [ebp+8] +
mov ecx [eax] +
mov eax [eax+4] +
lea edx [ebp-8] +
mov [ebp-8] ecx +
mov ecx [esi+4] +
push edx  +
lea edx [esi+8] +
mov [ebp-4] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+4Ch]  +
mov eax [esi+18h] +
mov ecx [eax+20h] +
mov eax [ecx] +
call dword ptr [eax+74h]  +
push eax  +
push dword ptr [ebp-4]  +
lea ecx [ebp-14h] +
push dword ptr [ebp-8]  +
call sub_106FC52  +
mov eax [esi+18h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-14h] +
push edx  +
call dword ptr [eax+30h]  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
and [ebp+var_C] 0 +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
mov [ebp+var_8] esi +
lea edi [ebp+var_28] +
inc ebx  +
mov ecx edi +
call sub_102A69D  +
add edi 8 +
dec ebx  +
jns loc_1070BB5  +
mov eax [esi+20h] +
mov ecx [eax+14h] +
mov eax [ecx] +
call dword ptr [eax+2Ch]  +
fstp  [ebp+var_18] +
mov esi [esi+20h] +
lea ebx [esi+60h] +
fld  qword ptr [ebx] +
fadd st st +
call _ftol2_sse  +
fld  qword ptr [ebx] +
mov esi eax +
call _ftol2_sse  +
fld  qword ptr [ebx] +
fmul  ds:dbl_103A3D8 +
mov edi eax +
call _ftol2_sse  +
mov ebx eax +
mov eax [ebp+var_8] +
mov eax [eax+20h] +
mov ecx [eax+20h] +
mov eax [ecx] +
push 2  +
lea edx [ebp+var_28] +
push edx  +
call dword ptr [eax+78h]  +
push [ebp+var_1C]  +
lea eax [ebp+pt] +
push [ebp+var_20]  +
push [ebp+var_24]  +
push [ebp+var_28]  +
push ecx  +
push ecx  +
mov ecx esp +
push eax  +
call sub_106CE00  +
mov ecx [ebp+var_8] +
call sub_107086F  +
imul esi esi +
fstp  [ebp+var_10] +
mov eax [ebp+pt.x] +
mov [ebp+var_4] esi +
imul eax eax +
fild  [ebp+var_4] +
fdiv  [ebp+var_18] +
mov [ebp+pt.x] eax +
mov eax [ebp+pt.y] +
imul eax eax +
mov [ebp+pt.y] eax +
call _ftol2_sse  +
imul edi edi +
mov [ebp+var_4] edi +
mov esi eax +
fild  [ebp+var_4] +
fdiv  [ebp+var_18] +
call _ftol2_sse  +
imul ebx ebx +
mov [ebp+var_4] ebx +
mov edi eax +
fild  [ebp+var_4] +
fdiv  [ebp+var_18] +
call _ftol2_sse  +
and [ebp+var_4] 0 +
mov ebx eax +
lea eax [edi+ebx] +
lea edi [eax+esi] +
mov edx [ebp+var_4] +
shl edx 3 +
lea ecx [ebp+edx+var_28] +
mov eax [ecx] +
imul eax eax +
mov [ecx] eax +
lea edx [ebp+edx+var_24] +
mov ecx [edx] +
imul ecx ecx +
mov [edx] ecx +
lea edx [edi+ecx] +
push edx  +
lea edx [edi+eax] +
push edx  +
sub ecx ebx +
sub eax ebx +
sub ecx esi +
push ecx  +
sub eax esi +
push eax  +
lea eax [ebp+rc] +
push eax  +
call ds:SetRect  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call ds:PtInRect  +
test eax eax +
jnz loc_1070D11  +
inc [ebp+var_4]  +
cmp [ebp+var_4] 2 +
jl loc_1070C95  +
fld  ds:flt_1070D24 +
fcomp  [ebp+var_10] +
fnstsw  ax +
test ah 1 +
jnz loc_1070D07  +
mov [ebp+var_C] 1 +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_4] +
mov [ebp+var_C] 2 +
mov [eax+24h] ecx +
jmp loc_1070D07  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
lea edi [ebp+var_34] +
inc ebx  +
mov ecx edi +
call sub_102A69D  +
add edi 8 +
dec ebx  +
jns loc_1070D40  +
xor edi edi +
push edi  +
push edi  +
lea ecx [ebp+var_24] +
call sub_100C6CD  +
mov eax [esi+14h] +
dec eax  +
mov [ebp+var_1C] edi +
jz loc_1070D8C  +
dec eax  +
jnz loc_1070E12  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
lea ecx [ebp+var_8] +
push dword ptr [eax]  +
call sub_100C6CD  +
mov ecx [eax] +
mov [ebp+var_24] ecx +
mov eax [eax+4] +
mov [ebp+var_20] eax +
mov eax [esi+24h] +
mov [ebp+var_1C] eax +
jmp loc_1070E03  +
mov eax [ebp+arg_0] +
mov edi [esi+8] +
mov ebx [esi+0Ch] +
sub edi [eax] +
sub ebx [eax+4] +
mov eax [esi+20h] +
mov ecx [eax+20h] +
mov eax [ecx] +
push 2  +
lea edx [ebp+var_34] +
push edx  +
call dword ptr [eax+78h]  +
mov eax [ebp+var_30] +
sub eax ebx +
push eax  +
mov eax [ebp+var_34] +
sub eax edi +
push eax  +
lea ecx [ebp+var_10] +
call sub_100C6CD  +
mov ecx [eax] +
mov [ebp+var_24] ecx +
mov eax [eax+4] +
and [ebp+var_1C] 0 +
mov [ebp+var_20] eax +
mov eax [esi+20h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp+var_24] +
push edx  +
call dword ptr [eax+30h]  +
mov eax [ebp+var_28] +
sub eax ebx +
push eax  +
mov eax [ebp+var_2C] +
sub eax edi +
push eax  +
lea ecx [ebp+var_18] +
call sub_100C6CD  +
mov ecx [eax] +
mov [ebp+var_24] ecx +
mov eax [eax+4] +
mov [ebp+var_20] eax +
mov [ebp+var_1C] 1 +
mov eax [esi+20h] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp+var_24] +
push edx  +
call dword ptr [eax+30h]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi ecx +
lea esi [ebp+var_10] +
inc ebx  +
mov ecx esi +
call sub_102A69D  +
add esi 8 +
dec ebx  +
jns loc_1070E31  +
mov eax [ebp+arg_0] +
sub eax 9 +
jz loc_1070E7C  +
dec eax  +
jz loc_1070E55  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_103A124  +
jmp loc_1070E7E  +
mov eax [edi+20h] +
mov ecx [eax+20h] +
mov eax [ecx] +
push 2  +
lea edx [ebp+var_10] +
push edx  +
call dword ptr [eax+78h]  +
mov eax [ebp+var_10] +
sub eax [ebp+var_8] +
mov ecx [ebp+var_C] +
sub ecx [ebp+var_4] +
imul eax ecx +
test eax eax +
setl al  +
jmp loc_1070E7E  +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
neg eax  +
sbb eax eax +
and eax 4 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_8] +
sub ecx [eax+4] +
mov [ebp+arg_0] ecx +
mov ecx [ebp+arg_4] +
fild  [ebp+arg_0] +
sub ecx [eax] +
mov [ebp+arg_0] ecx +
fild  [ebp+arg_0] +
call _CIatan2  +
fmul  ds:dbl_104AB60 +
fmul  ds:dbl_1070F10 +
fadd  ds:dbl_104AB50 +
call _ftol2_sse  +
cdq   +
mov ecx 0B4h +
idiv  ecx +
push 2Dh  +
pop ecx  +
mov eax edx +
add eax 16h +
cdq   +
idiv  ecx +
imul eax eax +
mov [esi+58h] eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx+4] +
mov [ebp+arg_0] eax +
push esi  +
mov esi [ebp+arg_4] +
mov [ebp+var_4] ecx +
mov ecx [esi+4] +
sub eax ecx +
cdq   +
mov ecx eax +
xor ecx edx +
sub ecx edx +
mov edx [esi] +
push edi  +
mov edi [ebx] +
mov eax edi +
sub eax edx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax ecx +
jl loc_1070F54  +
mov eax ecx +
mov ecx [ebp+var_4] +
mov edx [ecx+58h] +
sub edx 2Dh +
jz loc_1070FA0  +
sub edx 2Dh +
jz loc_1070F9C  +
sub edx 2Dh +
jz loc_1070F78  +
sub edx 5Ah +
jz loc_1070FA0  +
sub edx 5Ah +
jz loc_1070F78  +
mov eax [ebp+arg_0] +
jmp loc_1070FBA  +
cmp [esi] edi +
jg loc_1070F91  +
mov ecx [esi+4] +
cmp ecx [ebp+arg_0] +
jl loc_1070F91  +
cmp [esi] edi +
jl loc_1070F8D  +
cmp ecx [ebp+arg_0] +
jle loc_1070FB5  +
sub edi eax +
jmp loc_1070FC5  +
add edi eax +
mov [esi] edi +
mov ecx [ebx+4] +
sub ecx eax +
jmp loc_1070FCC  +
mov [esi] edi +
jmp loc_1070FCF  +
cmp [esi] edi +
jg loc_1070FC3  +
mov ecx [esi+4] +
cmp ecx [ebp+arg_0] +
jg loc_1070FC3  +
cmp [esi] edi +
jl loc_1070FBF  +
cmp ecx [ebp+arg_0] +
jl loc_1070FBF  +
mov [esi] edi +
mov eax [ebx+4] +
mov [esi+4] eax +
jmp loc_1070FCF  +
sub edi eax +
jmp loc_1070F93  +
add edi eax +
mov [esi] edi +
mov ecx [ebx+4] +
add ecx eax +
mov [esi+4] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
add [eax+edi*2] edx +
add [ecx] al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1007814 +
jz loc_1071002  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push dword ptr [esi+4]  +
call sub_100C060  +
test eax eax +
jz loc_107102C  +
mov ecx [eax+0Ch] +
mov eax [ecx] +
push esi  +
call dword ptr [eax+44h]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push dword ptr [esi+4]  +
call sub_100C060  +
test eax eax +
jz loc_1071054  +
mov ecx [eax+0Ch] +
mov eax [ecx] +
push esi  +
call dword ptr [eax+48h]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push dword ptr [esi+4]  +
call sub_100C060  +
test eax eax +
jz loc_107107F  +
mov ecx [eax+0Ch] +
mov eax [ecx] +
push esi  +
push [ebp+arg_0]  +
call dword ptr [eax+4Ch]  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push dword ptr [esi+4]  +
call sub_100C060  +
test eax eax +
jz loc_10710B0  +
push [ebp+arg_C]  +
mov ecx [eax+0Ch] +
push [ebp+arg_8]  +
mov eax [ecx] +
push esi  +
push [ebp+arg_0]  +
call dword ptr [eax+50h]  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx [ebp+8] +
cmp dword ptr [ebx] 0Ah +
push esi  +
push edi  +
mov edi ecx +
jnz loc_10710E4  +
mov eax [ebx+4] +
cmp eax [edi+48h] +
jnz loc_10710E4  +
call sub_100CC4D  +
mov ecx [edi+14h] +
mov eax [ecx] +
call dword ptr [eax+34h]  +
mov eax [edi+40h] +
mov esi [eax] +
cmp esi eax +
jz loc_1071111  +
mov eax [ebx] +
mov ecx [esi+14h] +
mov [ebp-0Ch] eax +
mov eax [ebx+4] +
mov [ebp-8] eax +
lea eax [esi+8] +
lea edx [ebp-0Ch] +
mov [ebp-4] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+2Ch]  +
mov esi [esi] +
cmp esi [edi+40h] +
jnz loc_10710ED  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 0Ah +
push edi  +
mov edi ecx +
jnz loc_10711CA  +
mov eax [edi+8] +
mov ecx [esi+4] +
cmp ecx [eax+48h] +
jnz loc_10711CA  +
mov eax [esi+8] +
mov ecx [eax+10h] +
mov eax [ecx] +
lea edx [ebp+arg_0+3] +
push edx  +
call dword ptr [eax+18h]  +
mov ecx [esi+8] +
push dword ptr [ecx+10h]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+60h]  +
mov eax [edi+8] +
mov edx [esi+8] +
mov ecx [eax+14h] +
push dword ptr [edx+10h]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax [esi+8] +
mov ecx [eax+10h] +
test ecx ecx +
jz loc_1071181  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+0Ch]  +
mov eax [esi+8] +
push dword ptr [eax+24h]  +
mov ecx [edi+8] +
push dword ptr [eax+20h]  +
call sub_100F4E7  +
mov ecx [esi+8] +
mov [ecx+10h] eax +
mov eax [edi+8] +
mov edx [esi+8] +
mov ecx [eax+14h] +
push dword ptr [edx+10h]  +
mov eax [ecx] +
call dword ptr [eax]  +
mov esi [esi+8] +
fld  dword ptr [esi+1Ch] +
lea eax [ebp+var_8] +
push eax  +
fstp  [ebp+var_4] +
lea eax [esi+14h] +
push eax  +
push dword ptr [esi+10h]  +
mov ecx edi +
mov [ebp+var_8] 1 +
call sub_100EFCF  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call sub_100208C  +
mov edi ecx +
mov eax [edi+40h] +
mov ebx [eax] +
cmp ebx eax +
jz loc_1071257  +
lea esi [ebx+8] +
mov ecx [esi+10h] +
mov eax [ecx] +
lea edx [ebp-0Dh] +
push edx  +
call dword ptr [eax+28h]  +
mov eax [esi+10h] +
and dword ptr [ebp-1Ch] 0 +
mov [ebp-18h] eax +
mov dword ptr [ebp-20h] offset off_100E4B4 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-20h] +
push eax  +
push dword ptr [edi+4]  +
mov ecx edi +
push esi  +
call sub_100E87A  +
mov esi [esi+10h] +
mov ecx [edi+14h] +
mov eax [ecx] +
push esi  +
call dword ptr [eax+4]  +
push ebx  +
lea eax [ebp-14h] +
push eax  +
lea ecx [edi+3Ch] +
call sub_100BA88  +
mov ebx [eax] +
test esi esi +
jz loc_1071247  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword ptr [ebp-20h] offset off_104AB6C +
cmp ebx [edi+40h] +
jnz loc_10711EC  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
push dword ptr [ebp+8]  +
mov ecx [esi+8] +
call sub_100C060  +
mov edi eax +
test edi edi +
jz loc_10712C2  +
mov ecx [edi+10h] +
mov eax [ecx] +
lea edx [ebp-0Dh] +
push edx  +
call dword ptr [eax+28h]  +
mov eax [edi+10h] +
and dword ptr [ebp-18h] 0 +
mov [ebp-14h] eax +
mov dword ptr [ebp-1Ch] offset off_100E4B4 +
mov ecx [esi+8] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-1Ch] +
push eax  +
mov eax [esi+4] +
push dword ptr [eax+4]  +
push dword ptr [ebp+8]  +
call sub_100E87A  +
push dword ptr [edi+10h]  +
mov ecx [esi+8] +
call sub_100F30C  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov ebx [esi+4] +
push edi  +
mov edi ecx +
mov ecx [edi+8] +
push ebx  +
call sub_100C060  +
mov ecx [eax+20h] +
xor ecx [esi+8] +
test cl 8 +
jz loc_1071309  +
push ebx  +
mov ecx edi +
call sub_1071262  +
jmp loc_1071329  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov ecx [ecx+4] +
mov [ebp+var_4] ecx +
add esi 0Ch +
push esi  +
lea ecx [ebp+var_8] +
push ecx  +
push dword ptr [eax+10h]  +
mov ecx edi +
mov [ebp+var_8] edx +
call sub_100EFCF  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101EF07  +
test byte ptr [ebp+8] 1 +
jz loc_107134F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+10h] 0 +
jz locret_1071369  +
mov ecx [ecx+10h] +
mov eax [ecx] +
jmp dword ptr [eax+0Ch]  +
***
retn   +
***
cmp dword ptr [ecx+10h] 0 +
jz locret_107137D  +
mov ecx [ecx+10h] +
mov eax [ecx] +
jmp dword ptr [eax+10h]  +
***
retn   +
***
cmp dword ptr [ecx+10h] 0 +
jz locret_1071391  +
mov ecx [ecx+10h] +
mov eax [ecx] +
jmp dword ptr [eax+14h]  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+10h] 0 +
jz loc_10713AB  +
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+18h]  +
***
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+10h] 0 +
jz locret_10713C2  +
mov ecx [ecx+10h] +
mov eax [ecx] +
jmp dword ptr [eax+1Ch]  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+10h] eax +
jz loc_10713DD  +
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+28h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+10h] 0 +
jz loc_10713FA  +
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+44h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+10h] 0 +
jz loc_1071417  +
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+48h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+10h] 0 +
jz loc_1071434  +
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+10h] 0 +
jz loc_1071451  +
mov ecx [ecx+10h] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+50h]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10h  +
call ds:GetKeyState  +
mov ecx 8000h +
test ax cx +
jz loc_107151A  +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx [edi] +
mov eax ebx +
sub eax edx +
cdq   +
mov esi eax +
xor esi edx +
sub esi edx +
jz loc_10714A5  +
mov eax [edi+4] +
sub eax [ecx+4] +
cdq   +
xor eax edx +
sub eax edx +
imul eax eax +
cdq   +
idiv  esi +
jmp loc_10714AA  +
mov eax 96Eh +
cmp eax 96Eh +
jl loc_10714BA  +
mov [ebp+arg_0] 5Ah +
jmp loc_10714CE  +
cmp eax 19Eh +
jl loc_10714CA  +
mov [ebp+arg_0] 2Dh +
jmp loc_10714CE  +
and [ebp+arg_0] 0 +
mov edx [ecx+4] +
mov eax [edi+4] +
sub eax edx +
cdq   +
xor eax edx +
sub eax edx +
add eax esi +
cdq   +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_0] 2Dh +
jz loc_10714FA  +
cmp [ebp+arg_0] 5Ah +
jz loc_10714F6  +
mov eax [edi+4] +
mov [ecx+4] eax +
jmp loc_1071517  +
mov [ecx] ebx +
jmp loc_1071517  +
cmp [ecx] ebx +
jge loc_1071502  +
sub ebx eax +
jmp loc_1071504  +
add ebx eax +
mov [ecx] ebx +
mov edx [edi+4] +
cmp [ecx+4] edx +
jge loc_1071512  +
sub edx eax +
jmp loc_1071514  +
add edx eax +
mov [ecx+4] edx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_100C6E8  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
lea ecx [ebp+var_8] +
xor bl bl +
call sub_100BFF1  +
mov ecx [esi+14h] +
lea eax [ebp+var_8] +
push eax  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
mov ecx eax +
call sub_100C840  +
test al al +
jz loc_10715A3  +
push [ebp+var_4]  +
xor ecx ecx +
push [ebp+var_8]  +
xor eax eax +
push ecx  +
push eax  +
lea ecx [ebp+rc] +
call sub_100CA63  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
lea eax [ebp+rc] +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_10715A3  +
inc bl  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 4  +
***
mov eax 7D14h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+20h] +
mov eax [ecx] +
sub esp 10h +
lea edx [ebp-10h] +
push edx  +
call dword ptr [eax+70h]  +
mov eax [ebp+8] +
mov ecx [ebp-10h] +
mov [eax] ecx +
mov ecx [ebp-0Ch] +
mov [eax+4] ecx +
mov al 1 +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+20h] +
mov eax [ecx] +
lea edx [ebp-1] +
push edx  +
call dword ptr [eax+28h]  +
mov ecx [esi+14h] +
push dword ptr [esi+20h]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_1071616  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+0Ch]  +
and dword ptr [esi+20h] 0 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
cmp word ptr [eax] 15h +
jnz loc_1071634  +
mov byte ptr [ecx+10h] 1 +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_14] +
add eax 0FFFFFFF8h +
cmp [ebp+arg_4] eax +
jg loc_1071650  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax 8 +
cmp [ebp+arg_4] eax +
jl loc_107166C  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
add eax 0FFFFFFF8h +
cmp [ebp+arg_0] eax +
jg loc_1071688  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
add eax 8 +
cmp [ebp+arg_0] eax +
jl loc_10716A4  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
mov byte ptr [esi+18h] 1 +
cmp dword ptr [eax+24h] 0 +
jnz loc_107174D  +
mov ecx [eax+20h] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
mov ecx [esi+1Ch] +
mov [ecx+24h] eax +
mov eax [ebp+arg_0] +
dec eax  +
jz loc_1071736  +
dec eax  +
jz loc_1071722  +
dec eax  +
jz loc_107170E  +
dec eax  +
jz loc_10716FA  +
dec eax  +
jnz loc_107174D  +
mov eax [esi+1Ch] +
mov ecx [eax+40h] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
mov esi [esi+1Ch] +
mov ecx [esi+58h] +
jmp loc_1071748  +
mov eax [esi+1Ch] +
mov ecx [eax+3Ch] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
mov esi [esi+1Ch] +
mov ecx [esi+54h] +
jmp loc_1071748  +
mov eax [esi+1Ch] +
mov ecx [eax+38h] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
mov esi [esi+1Ch] +
mov ecx [esi+50h] +
jmp loc_1071748  +
mov eax [esi+1Ch] +
mov ecx [eax+34h] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
mov esi [esi+1Ch] +
mov ecx [esi+4Ch] +
jmp loc_1071748  +
mov eax [esi+1Ch] +
mov ecx [eax+28h] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
mov esi [esi+1Ch] +
mov ecx [esi+48h] +
mov eax [ecx] +
push esi  +
call dword ptr [eax]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
cmp dword ptr [eax+24h] 0 +
jz loc_1071832  +
mov ecx [eax+14h] +
push dword ptr [eax+20h]  +
mov edx [ecx] +
call dword ptr [edx+4]  +
mov eax [esi+1Ch] +
mov ecx [eax+20h] +
test ecx ecx +
jz loc_1071789  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+0Ch]  +
mov eax [esi+1Ch] +
mov ecx [eax+24h] +
mov [eax+20h] ecx +
mov eax [esi+1Ch] +
and dword ptr [eax+24h] 0 +
mov eax [esi+1Ch] +
mov ecx [eax+14h] +
push dword ptr [eax+20h]  +
mov edx [ecx] +
call dword ptr [edx]  +
mov eax [esi+1Ch] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-1] +
push edx  +
call dword ptr [eax+54h]  +
mov eax [ebp+arg_0] +
and dword ptr [esi+14h] 0 +
dec eax  +
jz loc_107181B  +
dec eax  +
jz loc_1071807  +
dec eax  +
jz loc_10717F3  +
dec eax  +
jz loc_10717DF  +
dec eax  +
jnz loc_1071832  +
mov eax [esi+1Ch] +
mov ecx [eax+58h] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
mov eax [esi+1Ch] +
mov ecx [eax+40h] +
jmp loc_107182D  +
mov eax [esi+1Ch] +
mov ecx [eax+54h] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
mov eax [esi+1Ch] +
mov ecx [eax+3Ch] +
jmp loc_107182D  +
mov eax [esi+1Ch] +
mov ecx [eax+50h] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
mov eax [esi+1Ch] +
mov ecx [eax+38h] +
jmp loc_107182D  +
mov eax [esi+1Ch] +
mov ecx [eax+4Ch] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
mov eax [esi+1Ch] +
mov ecx [eax+34h] +
jmp loc_107182D  +
mov eax [esi+1Ch] +
mov ecx [eax+48h] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+4]  +
mov eax [esi+1Ch] +
mov ecx [eax+28h] +
mov edx [ecx] +
push eax  +
call dword ptr [edx]  +
mov byte ptr [esi+18h] 0 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
lea eax [ebp+arg_4] +
push eax  +
lea ecx [esi+4] +
call sub_100C6A4  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 2 +
jz loc_1071885  +
cmp eax 4 +
jz loc_1071885  +
cmp eax 6 +
jz loc_1071885  +
cmp eax 7 +
jz loc_1071885  +
xor eax eax +
jmp loc_1071888  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov ecx [esi+14h] +
call sub_10715E8  +
xor eax eax +
mov [ebp-14h] eax +
mov [ebp-10h] eax +
mov dword ptr [ebp-18h] offset off_100E4B4 +
mov ecx [esi+4] +
lea edx [ebp-18h] +
push edx  +
push dword ptr [ecx+4]  +
mov [ebp-4] eax +
mov eax [ecx] +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov edi [ebp+8] +
mov ecx [edi] +
mov edx [edi+4] +
push ecx  +
push ecx  +
mov eax esp +
mov [eax] ecx +
mov [eax+4] edx +
mov eax [esi] +
mov ecx esi +
mov [ebp+8] esp +
call dword ptr [eax+64h]  +
mov ebx [ebp+0Ch] +
mov [esi+14h] eax +
test eax eax +
jnz loc_10719AB  +
mov ecx [esi+1Ch] +
push dword ptr [ecx+20h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+60h]  +
mov eax [esi+1Ch] +
mov ecx [eax+14h] +
push dword ptr [eax+20h]  +
mov edx [ecx] +
call dword ptr [edx+4]  +
mov eax [esi+1Ch] +
mov ecx [eax+20h] +
test ecx ecx +
jz loc_1071936  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+0Ch]  +
mov eax [esi+1Ch] +
and dword ptr [eax+20h] 0 +
push edi  +
lea ecx [ebp-14h] +
call sub_106CE00  +
mov ecx [esi+1Ch] +
mov eax [ecx] +
lea edx [ebp-14h] +
push edx  +
call dword ptr [eax+74h]  +
test al al +
jz loc_1071986  +
mov ecx [edi] +
mov edx [edi+4] +
lea eax [ebx+0Ch] +
push eax  +
push ecx  +
push ecx  +
mov eax esp +
mov [eax] ecx +
mov [ebp+8] esp +
mov [eax+4] edx +
push dword ptr [ebx+8]  +
lea ecx [ebp-4Ch] +
call sub_103AFFE  +
mov ecx [esi+4] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-4Ch] +
push edx  +
push dword ptr [ecx+8]  +
jmp loc_10719A6  +
and dword ptr [ebp-1Ch] 0 +
and dword ptr [ebp-18h] 0 +
mov dword ptr [ebp-20h] offset off_100E4B4 +
mov ecx [esi+4] +
lea edx [ebp-20h] +
push edx  +
push dword ptr [ecx+4]  +
mov dword ptr [ebp-4] 1 +
mov eax [ecx] +
call dword ptr [eax+70h]  +
mov eax [edi] +
mov edi [edi+4] +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov al [ebx+8] +
shr al 3 +
and al 1 +
mov [esi+10h] al +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
cmp byte ptr [esi+10h] 0 +
jnz loc_10719F7  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp+var_8] ecx +
lea ecx [ebp+var_8] +
mov [ebp+var_4] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+68h]  +
and dword ptr [esi+14h] 0 +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+1Ch] +
mov byte ptr [ebp-1] 1 +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-1] +
push edx  +
call dword ptr [eax+40h]  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+1Ch] +
mov byte ptr [ebp-1] 0 +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-1] +
push edx  +
call dword ptr [eax+40h]  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov eax [ecx+1Ch] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp+arg_0] +
push edx  +
call dword ptr [eax+3Ch]  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov ecx [esi+1Ch] +
call sub_10715E8  +
xor eax eax +
mov [ebp-14h] eax +
mov [ebp-10h] eax +
mov dword ptr [ebp-18h] offset off_100E4B4 +
mov ecx [esi+4] +
lea edx [ebp-18h] +
push edx  +
push dword ptr [ecx+4]  +
mov [ebp-4] eax +
mov eax [ecx] +
call dword ptr [eax+70h]  +
call sub_1002061  +
retn   +
***
mov edi edi +
sub esp 10h +
sub esp 10h +
sub esp 10h +
sub esp 10h +
sub esp 10h +
sub esp 10h +
sub esp 10h +
sub esp 10h +
sub esp 10h +
lea eax [ebp-10h] +
mov ecx esp +
push eax  +
call sub_100C6A4  +
push dword ptr [esi+14h]  +
lea ecx [ebp-24h] +
call sub_1071840  +
mov eax [esi+1Ch] +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp-24h] +
push edx  +
call dword ptr [eax+48h]  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
mov dword ptr [esi+14h] 1 +
mov ecx [eax+20h] +
mov eax [ecx] +
lea edx [ebp+var_28] +
push edx  +
call dword ptr [eax+70h]  +
push eax  +
lea ecx [ebp+rcDst] +
call sub_100B3A5  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+rcDst] +
call sub_10514BC  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_8] +
mov [esi+0Ch] ecx +
add ecx [ebp+arg_4] +
mov [esi+8] eax +
add eax [ebp+arg_0] +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_8] +
mov [ebp+var_8] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+68h]  +
xor eax eax +
mov [esi+14h] eax +
mov [esi+0Ch] eax +
mov [esi+8] eax +
pop esi  +
leave   +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
push 7  +
pop edi  +
mov eax offset off_100B560 +
xor edx edx +
mov [ebp-14h] edi +
mov [ebp-18h] eax +
mov [ebp-10h] edx +
mov ebx 0FFFFFFh +
mov [ebp-4] edx +
mov [ebp-20h] edi +
mov [ebp-24h] eax +
mov [ebp-1Ch] ebx +
push 3  +
pop ecx  +
mov eax offset off_1006E84 +
mov [ebp-2Ch] ecx +
mov [ebp-30h] eax +
mov dword ptr [ebp-28h] 1 +
mov [ebp-38h] ecx +
mov [ebp-3Ch] eax +
mov [ebp-34h] edx +
lea eax [ebp-30h] +
mov [ebp-4] cl +
mov ecx [esi+3Ch] +
push eax  +
call sub_1005BE0  +
mov ecx [esi+40h] +
lea eax [ebp-3Ch] +
push eax  +
call sub_1005BE0  +
mov ecx [esi+34h] +
lea eax [ebp-18h] +
push eax  +
call sub_1005BE0  +
mov ecx [esi+38h] +
lea eax [ebp-24h] +
push eax  +
call sub_1005BE0  +
push dword ptr [ebp-28h]  +
mov ecx esi +
call sub_103AE43  +
test eax eax +
jz loc_1071DAA  +
mov eax [ebp-10h] +
not eax  +
and eax ebx +
mov [ebp-14h] edi +
mov [ebp-10h] eax +
push dword ptr [ebp-34h]  +
mov ecx esi +
call sub_103AE43  +
test eax eax +
jz loc_1071DC5  +
mov eax [ebp-1Ch] +
not eax  +
and eax ebx +
mov [ebp-20h] edi +
mov [ebp-1Ch] eax +
mov ecx [esi+34h] +
lea eax [ebp-18h] +
push eax  +
call sub_1035687  +
mov ecx [esi+38h] +
lea eax [ebp-24h] +
push eax  +
call sub_1035687  +
call sub_1002061  +
retn   +
***
call sub_1071891  +
retn 8  +
***
mov ecx [ecx+1Ch] +
jmp sub_1071D0C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor edx edx +
cmp [ecx+14h] edx +
jnz loc_1071E44  +
cmp [ecx+18h] dl +
jnz loc_1071E44  +
mov eax [ebp+arg_0] +
sub eax 25h +
jz loc_1071E3C  +
dec eax  +
jz loc_1071E38  +
dec eax  +
jz loc_1071E33  +
dec eax  +
jnz loc_1071E44  +
push 1  +
push edx  +
jmp loc_1071E3F  +
push edx  +
push 1  +
jmp loc_1071E3F  +
push 0FFFFFFFFh  +
jmp loc_1071E30  +
push edx  +
push 0FFFFFFFFh  +
call sub_1071C9E  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0Ah +
jnz loc_1071E63  +
mov ecx [ecx+1Ch] +
push eax  +
call sub_103B06A  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101ECE0  +
test byte ptr [ebp+8] 1 +
jz loc_1071E86  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov al [eax+38h] +
mov ecx [ebp+arg_C] +
mov [ecx] al +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
call ds:GetDC  +
mov esi eax +
test esi esi +
jz loc_1071EE0  +
mov eax [ebp+arg_0] +
push 0  +
lea ecx [eax+17h] +
push ecx  +
push offset sub_1071E92  +
push eax  +
push esi  +
call ds:EnumFontFamiliesExW  +
push esi  +
push 0  +
call ds:ReleaseDC  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0E4h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor eax eax +
mov edi ebx +
stos   +
and [ebx+4] eax +
and [ebx+8] eax +
lea edi [ebp+pvar] +
stos   +
stos   +
stos   +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_104A03C  +
mov dword ptr [ebx] 74h +
stos   +
mov eax [esi] +
push esi  +
mov [ebp+var_BC] esi +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_1071F6F  +
lea eax [ebp+var_A4] +
push eax  +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantToUInt32  +
cmp [ebp+var_A4] 0 +
jz loc_1071F6F  +
or dword ptr [ebx+4] 1 +
xor eax eax +
cmp [ebp+var_A4] 2 +
setz al  +
or [ebx+8] eax +
mov edi ds:PropVariantClear +
lea eax [ebp+pvar] +
push eax  +
call edi  +
mov eax [esi] +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_104A050  +
push esi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_1071FC4  +
lea eax [ebp+var_A4] +
push eax  +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantToUInt32  +
cmp [ebp+var_A4] 0 +
jz loc_1071FC4  +
push 2  +
pop eax  +
or [ebx+4] eax +
cmp [ebp+var_A4] eax +
jz loc_1071FC1  +
xor eax eax +
or [ebx+8] eax +
lea eax [ebp+pvar] +
push eax  +
call edi  +
mov eax [esi] +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_104A064  +
push esi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_1072014  +
lea eax [ebp+var_A4] +
push eax  +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantToUInt32  +
cmp [ebp+var_A4] 0 +
jz loc_1072014  +
push 4  +
pop eax  +
or [ebx+4] eax +
cmp [ebp+var_A4] 2 +
jz loc_1072011  +
xor eax eax +
or [ebx+8] eax +
lea eax [ebp+pvar] +
push eax  +
call edi  +
mov eax [esi] +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_104A078  +
push esi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_1072064  +
lea eax [ebp+var_A4] +
push eax  +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantToUInt32  +
cmp [ebp+var_A4] 0 +
jz loc_1072064  +
push 8  +
pop eax  +
or [ebx+4] eax +
cmp [ebp+var_A4] 2 +
jz loc_1072061  +
xor eax eax +
or [ebx+8] eax +
lea eax [ebp+pvar] +
push eax  +
call edi  +
mov eax [esi] +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_104A08C  +
push esi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_10720C9  +
lea eax [ebp+var_A4] +
push eax  +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantToUInt32  +
cmp [ebp+var_A4] 0 +
jz loc_10720C9  +
or dword ptr [ebx+4] 30000h +
cmp [ebp+var_A4] 1 +
jz loc_10720C9  +
xor ecx ecx +
cmp [ebp+var_A4] 2 +
mov eax 10000h +
setnz cl  +
dec ecx  +
and ecx eax +
add ecx eax +
or [ebx+8] ecx +
lea eax [ebp+pvar] +
push eax  +
call edi  +
mov eax [esi] +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_104A014  +
push esi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_107217A  +
push 20h  +
lea eax [ebp+String1] +
push eax  +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantToString  +
push offset word_100219C  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrcmpW  +
test eax eax +
jz loc_107217A  +
lea eax [ebp+String1] +
push eax  +
push 20h  +
lea eax [ebx+1Ah] +
push eax  +
call sub_102F4F0  +
or dword ptr [ebx+4] 20000000h +
cmp [ebp+arg_8] 0 +
jz loc_107217A  +
push 5Ch  +
lea eax [ebp+var_A0] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+String1] +
push eax  +
push 20h  +
lea eax [ebp+var_A0.lfFaceName] +
push eax  +
call sub_102F4F0  +
lea eax [ebp+var_A0] +
push eax  +
mov [ebp+var_A0.lfCharSet] 1 +
call sub_1071EAD  +
mov al [ebp+var_A0.lfCharSet] +
cmp al 1 +
jz loc_107217A  +
or dword ptr [ebx+4] 8000000h +
mov [ebx+18h] al +
lea eax [ebp+pvar] +
push eax  +
call edi  +
mov eax [esi] +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_104A028  +
push esi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_1072207  +
lea eax [ebp+var_A4] +
push eax  +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantToUInt32  +
lea esi [ebp+pvar] +
lea edi [ebp+pdecIn] +
movs   +
movs   +
lea eax [ebp+pdblOut] +
movs   +
push eax  +
lea eax [ebp+pdecIn] +
push eax  +
movs   +
call ds:VarR8FromDec  +
fldz   +
fcomp  [ebp+pdblOut] +
fnstsw  ax +
test ah 5 +
jp loc_10721FB  +
fld  [ebp+pdblOut] +
or dword ptr [ebx+4] 80000000h +
fmul  ds:dbl_104A3F0 +
call _ftol2_sse  +
mov [ebx+0Ch] eax +
mov edi ds:PropVariantClear +
mov esi [ebp+var_BC] +
lea eax [ebp+pvar] +
push eax  +
call edi  +
xor eax eax +
lea edi [ebp+var_CC] +
stos   +
stos   +
stos   +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_1072374  +
stos   +
mov eax [esi] +
push esi  +
call dword ptr [eax+14h]  +
mov edi 40000000h +
test eax eax +
jl loc_107225A  +
lea eax [ebp+var_A4] +
push eax  +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantToUInt32  +
cmp [ebp+var_A4] 1 +
jnz loc_107225A  +
or [ebx+4] edi +
or [ebx+8] edi +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantClear  +
mov eax [esi] +
lea ecx [ebp+var_CC] +
push ecx  +
push offset dword_107234C  +
push esi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_107229D  +
lea eax [ebp+var_B8] +
push eax  +
lea eax [ebp+var_CC] +
push eax  +
call ds:PropVariantToUInt32  +
mov eax [ebp+var_B8] +
or [ebx+4] edi +
mov [ebx+14h] eax +
lea eax [ebp+var_CC] +
push eax  +
call ds:PropVariantClear  +
mov eax [esi] +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_1072388  +
push esi  +
call dword ptr [eax+14h]  +
mov edi 4000000h +
test eax eax +
jl loc_10722E8  +
lea eax [ebp+var_A4] +
push eax  +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantToUInt32  +
cmp [ebp+var_A4] 0 +
jnz loc_10722E8  +
or [ebx+4] edi +
or [ebx+8] edi +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantClear  +
mov eax [esi] +
lea ecx [ebp+var_CC] +
push ecx  +
push offset dword_1072360  +
push esi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_107232B  +
lea eax [ebp+var_B8] +
push eax  +
lea eax [ebp+var_CC] +
push eax  +
call ds:PropVariantToUInt32  +
mov eax [ebp+var_B8] +
or [ebx+4] edi +
mov [ebx+60h] eax +
lea eax [ebp+var_CC] +
push eax  +
call ds:PropVariantClear  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor eax eax +
test byte ptr [esi+4] 1 +
lea edi [ebp+pvar] +
stos   +
stos   +
stos   +
stos   +
push 13h  +
pop eax  +
mov [ebp+pvar.vt] ax +
jz loc_10723D5  +
test byte ptr [esi+8] 1 +
push 0  +
pop eax  +
setnz al  +
inc eax  +
mov dword ptr [ebp+pvar.anonymous_0] eax +
jmp loc_10723D9  +
and dword ptr [ebp+pvar.anonymous_0] 0 +
mov ebx [ebp+arg_4] +
mov eax [ebx] +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_104A03C  +
push ebx  +
call dword ptr [eax+18h]  +
mov edi ds:PropVariantClear +
lea eax [ebp+pvar] +
push eax  +
call edi  +
test byte ptr [esi+4] 2 +
push 13h  +
pop eax  +
mov [ebp+pvar.vt] ax +
jz loc_1072414  +
test byte ptr [esi+8] 2 +
push 0  +
pop eax  +
setnz al  +
inc eax  +
mov dword ptr [ebp+pvar.anonymous_0] eax +
jmp loc_1072418  +
and dword ptr [ebp+pvar.anonymous_0] 0 +
mov eax [ebx] +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_104A050  +
push ebx  +
call dword ptr [eax+18h]  +
lea eax [ebp+pvar] +
push eax  +
call edi  +
test byte ptr [esi+4] 4 +
push 13h  +
pop eax  +
mov [ebp+pvar.vt] ax +
jz loc_107244A  +
test byte ptr [esi+8] 4 +
push 0  +
pop eax  +
setnz al  +
inc eax  +
mov dword ptr [ebp+pvar.anonymous_0] eax +
jmp loc_107244E  +
and dword ptr [ebp+pvar.anonymous_0] 0 +
mov eax [ebx] +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_104A064  +
push ebx  +
call dword ptr [eax+18h]  +
lea eax [ebp+pvar] +
push eax  +
call edi  +
test byte ptr [esi+4] 8 +
push 13h  +
pop eax  +
mov [ebp+pvar.vt] ax +
jz loc_1072480  +
test byte ptr [esi+8] 8 +
push 0  +
pop eax  +
setnz al  +
inc eax  +
mov dword ptr [ebp+pvar.anonymous_0] eax +
jmp loc_1072484  +
and dword ptr [ebp+pvar.anonymous_0] 0 +
mov eax [ebx] +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_104A078  +
push ebx  +
call dword ptr [eax+18h]  +
lea eax [ebp+pvar] +
push eax  +
call edi  +
mov ecx [esi+4] +
mov eax 10000h +
test ecx eax +
jz loc_10724C4  +
test ecx 30000h +
jz loc_10724B2  +
test [esi+8] eax +
jnz loc_10724D9  +
test dword ptr [esi+8] 20000h +
jz loc_10724E7  +
mov dword ptr [ebp+pvar.anonymous_0] 2 +
jmp loc_10724E0  +
test ecx 10000000h +
jz loc_10724E7  +
cmp dword ptr [esi+10h] 0 +
mov dword ptr [ebp+pvar.anonymous_0] 2 +
jg loc_10724E0  +
mov dword ptr [ebp+pvar.anonymous_0] 3 +
push 13h  +
pop eax  +
mov [ebp+pvar.vt] ax +
mov eax [ebx] +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_104A08C  +
push ebx  +
call dword ptr [eax+18h]  +
lea eax [ebp+pvar] +
push eax  +
call edi  +
test dword ptr [esi+4] 20000000h +
lea eax [ebp+pvar] +
push eax  +
jz loc_107250F  +
lea eax [esi+1Ah] +
push eax  +
jmp loc_1072514  +
push offset word_100219C  +
call sub_1011A21  +
mov eax [ebx] +
lea ecx [ebp+pvar] +
push ecx  +
push offset dword_104A014  +
push ebx  +
call dword ptr [eax+18h]  +
lea eax [ebp+pvar] +
push eax  +
call edi  +
test dword ptr [esi+4] 80000000h +
lea eax [ebp+pdecOut] +
push eax  +
jz loc_1072551  +
fild  dword ptr [esi+0Ch] +
push ecx  +
push ecx  +
fdiv  ds:dbl_104A3F0 +
fstp  [esp+80h+var_80] +
call ds:VarDecFromR8  +
jmp loc_1072559  +
push 0  +
call ds:VarDecFromI4  +
lea esi [ebp+pdecOut] +
lea edi [ebp+pvar] +
movs   +
movs   +
push 0Eh  +
pop eax  +
movs   +
lea ecx [ebp+pvar] +
push ecx  +
movs   +
push offset dword_104A028  +
mov [ebp+pvar.vt] ax +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+18h]  +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantClear  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov eax ds:?interfaceMap@CCmdTarget@@1UAFX_INTERFACEMAP@@B +
retn   +
***
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+10h] +
push edi  +
mov edi [ebp+0Ch] +
cmp eax [edi+10h] +
jnz loc_10725DB  +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
jnz loc_10725DB  +
inc eax  +
jmp loc_10725DD  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
add ecx 34h +
push ecx  +
mov ecx [ebp+arg_0] +
call ??0CString@@QAE@ABV0@@Z  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100370C +
call ??1CControlBar@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_107262A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+39h] 0 +
jnz loc_1072652  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1072666  +
mov [ecx+4] eax +
jmp loc_1072675  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_1072673  +
mov [ecx+8] eax +
jmp loc_1072675  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+psa] +
mov ecx 200h +
test [eax+2] cx +
jz loc_10726B5  +
push esi  +
mov esi [ebp+arg_8] +
lea ecx [esi+8] +
push ecx  +
push eax  +
call ds:SafeArrayCopy  +
test eax eax +
jl loc_10726B2  +
mov ecx 200Dh +
mov [esi] cx +
pop esi  +
jmp loc_10726BA  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov dword ptr [ecx+30h] 1 +
add ecx 34h +
pop ebp  +
jmp ??4CString@@QAEABV0@PBG@Z  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_10726FC  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10576A8  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov eax ds:?classCStatusBar@CStatusBar@@2UCRuntimeClass@@B +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_107272E  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
add eax 4 +
cmp eax [ebp+arg_4] +
jnz loc_1072724  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_1072752  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_10195C5  +
add esi 20h +
cmp esi [ebp+arg_4] +
jnz loc_1072745  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] esi +
jz loc_1072782  +
sub [ebp+arg_8] 20h +
mov ecx [ebp+arg_8] +
sub esi 20h +
push esi  +
call sub_10195C5  +
cmp esi [ebp+arg_0] +
jnz loc_107276D  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_107275F  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
call sub_1002370  +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov esi [ebp+8] +
mov [ebp-14h] eax +
cmp esi [ebp+0Ch] +
jz loc_1072805  +
push esi  +
push dword ptr [ebp+10h]  +
call sub_101951F  +
add dword ptr [ebp+10h] 20h +
add esi 20h +
jmp loc_10727D2  +
mov esi [ebp-14h] +
jmp loc_10727F7  +
push esi  +
call sub_102132B  +
add esi 20h +
cmp esi [ebp+10h] +
jnz loc_10727EE  +
push 0  +
push 0  +
call _CxxThrowException  +
mov eax [ebp+10h] +
call sub_1002061  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10727B9  +
pop edi  +
leave   +
retn 10h  +
***
call sub_1002370  +
mov esi ecx +
mov [ebp-14h] esi +
push dword ptr [ebp+10h]  +
lea ecx [ebp-34h] +
call sub_1019551  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_10188CC  +
mov edi [ebp+0Ch] +
mov ebx eax +
test edi edi +
jz loc_1072A09  +
mov ecx esi +
call sub_1005C53  +
mov ecx 7FFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jnb loc_1072890  +
call loc_1058901  +
add eax edi +
cmp ebx eax +
jnb loc_1072951  +
mov edx ebx +
shr edx 1 +
sub ecx edx +
cmp ecx ebx +
jnb loc_10728A8  +
xor ebx ebx +
jmp loc_10728AA  +
add ebx edx +
cmp ebx eax +
jnb loc_10728B0  +
mov ebx eax +
push 0  +
push ebx  +
call sub_100B693  +
mov ecx [esi+4] +
push esi  +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp+10h] eax +
push ecx  +
mov [ebp+0Ch] eax +
mov byte ptr [ebp-4] 1 +
call sub_1072815  +
lea ecx [ebp-34h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
mov [ebp+0Ch] eax +
call sub_10184EB  +
push esi  +
mov [ebp+0Ch] eax +
push dword ptr [ebp+0Ch]  +
mov eax [esi+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1072815  +
mov ecx esi +
call sub_1005C53  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_1072916  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_101EFF6  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+10h] +
shl ebx 5 +
add ebx eax +
shl edi 5 +
add edi eax +
mov [esi+0Ch] ebx +
mov [esi+8] edi +
mov [esi+4] eax +
jmp loc_1072A09  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+10h]  +
call sub_101EFF6  +
push dword ptr [ebp+10h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
mov ebx [esi+8] +
mov ecx [ebp+8] +
mov eax ebx +
sub eax ecx +
sar eax 5 +
push esi  +
cmp eax edi +
jnb loc_10729D4  +
mov eax edi +
shl eax 5 +
mov [ebp+10h] eax +
add eax ecx +
push eax  +
push ebx  +
push ecx  +
call sub_1072815  +
mov eax [esi+8] +
lea ecx [ebp-34h] +
push ecx  +
mov ecx eax +
sub ecx [ebp+8] +
mov byte ptr [ebp-4] 3 +
sar ecx 5 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_10184EB  +
mov eax [ebp+10h] +
add [esi+8] eax +
mov esi [esi+8] +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-34h] +
push ecx  +
sub esi eax +
push esi  +
push dword ptr [ebp+8]  +
call sub_107273A  +
add esp 0Ch +
jmp loc_1072A09  +
mov ecx [ebp-14h] +
mov eax [ebp+0Ch] +
push ecx  +
mov ecx [ecx+8] +
shl eax 5 +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
add eax ecx +
push eax  +
call sub_101EFF6  +
jmp loc_1072948  +
push ebx  +
shl edi 5 +
mov [ebp+0Ch] ebx +
sub [ebp+0Ch] edi +
push ebx  +
push dword ptr [ebp+0Ch]  +
call sub_1072815  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov [esi+8] eax +
push dword ptr [ebp+8]  +
call sub_107278D  +
lea eax [ebp-34h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_107273A  +
add esp 18h +
lea ecx [ebp-34h] +
call sub_10133AF  +
call sub_1002061  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101FCE4  +
test byte ptr [ebp+8] 1 +
jz loc_1072A38  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_1005C53  +
test eax eax +
jnz loc_1072A5A  +
xor esi esi +
jmp loc_1072A63  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 5 +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_1072843  +
mov eax [ebp+arg_0] +
shl esi 5 +
add esi [edi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 32h +
jge loc_1072AAC  +
fld1   +
lea eax [ecx+298h] +
fsub  qword ptr [eax] +
fimul  [ebp+arg_0] +
fdiv  ds:dbl_1009F68 +
fadd  qword ptr [eax] +
jmp loc_1072ACB  +
fld  qword ptr [ecx+2A0h] +
add eax 0FFFFFFCEh +
fld1   +
mov [ebp+arg_0] eax +
fsub st(1) st +
fild  [ebp+arg_0] +
fmulp st(2) st +
fxch  st(1) +
fdiv  ds:dbl_1009F68 +
faddp st(1) st +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CStatic@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1072AEE  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 401h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 407h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CSliderCtrl@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1072B56  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
xor edi edi +
cmp [esi+60h] edi +
jnz loc_1072C7A  +
push edi  +
lea ebx [esi+40h] +
push esi  +
mov ecx ebx +
call ?Create@CToolTipCtrl@@QAEHPAVCWnd@@K@Z  +
push 1  +
mov ecx ebx +
call sub_1072AFA  +
mov ecx [esi+27Ch] +
mov eax [ecx] +
push 5  +
lea edx [ebp-10h] +
push edx  +
call dword ptr [eax+8]  +
mov eax [eax] +
push edi  +
push edi  +
lea ecx [esi+0DCh] +
push eax  +
mov [ebp-18h] ecx +
push ecx  +
mov ecx ebx +
mov [ebp-4] edi +
call ?AddTool@CToolTipCtrl@@QAEHPAVCWnd@@PBGPBUtagRECT@@I@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
mov ecx [esi+27Ch] +
mov eax [ecx] +
push 7  +
lea edx [ebp-10h] +
push edx  +
call dword ptr [eax+8]  +
mov eax [eax] +
push edi  +
push edi  +
push eax  +
lea eax [esi+11Ch] +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-4] 1 +
call ?AddTool@CToolTipCtrl@@QAEHPAVCWnd@@PBGPBUtagRECT@@I@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
mov ecx [esi+27Ch] +
mov eax [ecx] +
push 6  +
lea edx [ebp-10h] +
push edx  +
call dword ptr [eax+8]  +
mov eax [eax] +
push edi  +
push edi  +
push eax  +
lea eax [esi+1A4h] +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-4] 2 +
call ?AddTool@CToolTipCtrl@@QAEHPAVCWnd@@PBGPBUtagRECT@@I@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
mov ecx [esi+27Ch] +
mov eax [ecx] +
push 8  +
lea edx [ebp-14h] +
push edx  +
call dword ptr [eax+8]  +
mov eax [eax] +
push edi  +
push edi  +
push eax  +
add esi 22Ch +
mov dword ptr [ebp-4] 3 +
push esi  +
mov ecx ebx +
call ?AddTool@CToolTipCtrl@@QAEHPAVCWnd@@PBGPBUtagRECT@@I@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
mov ecx [ebp-18h] +
push edi  +
push 100h  +
push edi  +
call ?ModifyStyle@CWnd@@QAEHKKI@Z  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_0] 1Bh +
push esi  +
mov esi ecx +
jnz loc_1072CA5  +
mov ecx [esi+27Ch] +
mov eax [ecx] +
push 2  +
call dword ptr [eax+4]  +
jmp loc_1072CE7  +
xor eax eax +
cmp [ebp+arg_4] ebx +
setnz al  +
mov [ebp+arg_0] eax +
call ds:GetFocus  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp [ebp+arg_4] ebx +
jz loc_1072CC9  +
cmp eax [esi+2A8h] +
jmp loc_1072CCF  +
cmp eax [esi+2ACh] +
jnz loc_1072CE9  +
lea eax [esi+27Ch] +
cmp [eax] ebx +
jz loc_1072CE9  +
mov eax [eax] +
push [ebp+arg_0]  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+4]  +
mov bl al +
pop esi  +
mov al bl +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
jmp loc_1072D0B  +
fld  qword ptr [eax] +
fstp  qword ptr [ecx] +
add [ebp+arg_C] 8 +
add eax 8 +
mov ecx [ebp+arg_C] +
cmp eax [ebp+arg_8] +
jnz loc_1072D00  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1072D3A  +
fld  qword ptr [eax] +
mov ecx [ebp+arg_8] +
add [ebp+arg_8] 8 +
fstp  qword ptr [ecx] +
add eax 8 +
mov [ebp+arg_0] eax +
cmp eax [ebp+arg_4] +
jnz loc_1072D29  +
mov eax [ebp+arg_8] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov eax [edi] +
mov esi ecx +
cmp eax [esi+0FCh] +
jz loc_1072D77  +
cmp eax [esi+13Ch] +
jz loc_1072D77  +
cmp eax [esi+1C4h] +
jz loc_1072D77  +
cmp eax [esi+24Ch] +
jnz loc_1072D85  +
call sub_1072B62  +
push edi  +
lea ecx [esi+40h] +
call sub_1072B1B  +
mov ecx [edi+4] +
mov eax 100h +
cmp ecx eax +
jnz loc_1072DD3  +
cmp dword ptr [edi+8] 9 +
jnz loc_1072DB3  +
push 10h  +
call ds:GetKeyState  +
xor ecx ecx +
test ax ax +
setl cl  +
push ecx  +
push 9  +
mov ecx esi +
call sub_1072C85  +
jmp loc_1072DCA  +
cmp ecx eax +
jnz loc_1072DD3  +
cmp dword ptr [edi+8] 1Bh +
jnz loc_1072DD3  +
mov ecx [esi+27Ch] +
mov eax [ecx] +
push 2  +
call dword ptr [eax+4]  +
test al al +
jz loc_1072DD3  +
xor eax eax +
inc eax  +
jmp loc_1072DF3  +
call sub_10049D9  +
test eax eax +
jz loc_1072DEB  +
mov edx [eax] +
push edi  +
mov ecx eax +
call dword ptr [edx+98h]  +
test eax eax +
jnz loc_1072DF3  +
push edi  +
mov ecx esi +
call ?PreTranslateInput@CWnd@@QAEHPAUtagMSG@@@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1072CF6  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1072D1F  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
lea ebx [esi+284h] +
push edi  +
mov ecx ebx +
call sub_100CA8E  +
test eax eax +
jz loc_1072EAB  +
mov edi [esi+288h] +
mov ecx ebx +
call sub_100CA8E  +
fld  qword ptr [edi+eax*8-8] +
mov esi [esi+28Ch] +
jmp loc_1072E9F  +
fld  qword ptr [edi] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 41h +
jz loc_1072EA5  +
add edi 8 +
cmp edi esi +
jz loc_1072EE4  +
jmp loc_1072E90  +
fstp  st +
fld  qword ptr [edi] +
jmp loc_1072EE4  +
fld  [ebp+arg_0] +
fld  ds:dbl_104ABF0 +
fmul st(1) st +
fxch  st(1) +
fadd  ds:dbl_1072EF0 +
fadd  ds:dbl_104ABF8 +
call _ftol2_sse  +
mov dword ptr [ebp+arg_0+4] eax +
fild  dword ptr [ebp+arg_0+4] +
lea ecx [esi+2A0h] +
fdivrp st(1) st +
fcom  qword ptr [ecx] +
fnstsw  ax +
test ah 41h +
jnz loc_1072EE4  +
fstp  st +
fld  qword ptr [ecx] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+284h] +
call sub_100CA8E  +
test eax eax +
jz loc_1072F39  +
mov edx [esi+288h] +
fld  qword ptr [edx] +
mov ecx [esi+28Ch] +
jmp loc_1072F30  +
fld  qword ptr [ecx] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 5 +
jnp loc_1072F68  +
sub ecx 8 +
cmp ecx edx +
jz loc_1072F6C  +
jmp loc_1072F24  +
fld  [ebp+arg_0] +
fld  ds:dbl_104ABF0 +
fmul st(1) st +
fxch  st(1) +
fsub  ds:dbl_104ABF8 +
call _ftol2_sse  +
mov dword ptr [ebp+arg_0+4] eax +
fild  dword ptr [ebp+arg_0+4] +
lea ecx [esi+298h] +
fdivrp st(1) st +
fcom  qword ptr [ecx] +
fnstsw  ax +
test ah 5 +
jp loc_1072F6C  +
fstp  st +
fld  qword ptr [ecx] +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
fld  qword ptr [esi+270h] +
push ecx  +
fstp  qword ptr [ebp-8] +
push ecx  +
fld  qword ptr [esi+270h] +
fstp  qword ptr [esp] +
call sub_1072E5C  +
fst  qword ptr [esi+270h] +
fcomp  qword ptr [ebp-8] +
fnstsw  ax +
test ah 44h +
jnp loc_1072FF9  +
push edi  +
mov ecx esi +
call sub_101062D  +
fld  qword ptr [esi+270h] +
push ecx  +
push ecx  +
mov ecx esi +
fstp  qword ptr [esp] +
lea edi [esi+22Ch] +
call sub_10102BE  +
push eax  +
mov ecx edi +
call sub_101029D  +
mov ecx edi +
call sub_1010615  +
mov ecx [esi+27Ch] +
mov [esi+278h] eax +
pop edi  +
test ecx ecx +
jz loc_1072FF9  +
fld  qword ptr [esi+270h] +
mov eax [ecx] +
push esi  +
push ecx  +
push ecx  +
fstp  qword ptr [esp] +
call dword ptr [eax]  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
fld  qword ptr [esi+270h] +
push ecx  +
fstp  qword ptr [ebp-8] +
push ecx  +
fld  qword ptr [esi+270h] +
fstp  qword ptr [esp] +
call sub_1072EFD  +
fst  qword ptr [esi+270h] +
fcomp  qword ptr [ebp-8] +
fnstsw  ax +
test ah 44h +
jnp loc_1073084  +
push edi  +
mov ecx esi +
call sub_101062D  +
fld  qword ptr [esi+270h] +
push ecx  +
push ecx  +
mov ecx esi +
fstp  qword ptr [esp] +
lea edi [esi+22Ch] +
call sub_10102BE  +
push eax  +
mov ecx edi +
call sub_101029D  +
mov ecx edi +
call sub_1010615  +
mov ecx [esi+27Ch] +
mov [esi+278h] eax +
pop edi  +
test ecx ecx +
jz loc_1073084  +
fld  qword ptr [esi+270h] +
mov eax [ecx] +
push esi  +
push ecx  +
push ecx  +
fstp  qword ptr [esp] +
call dword ptr [eax]  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx ecx +
lea ecx [ebx+284h] +
mov [ebp+var_4] ecx +
call sub_100CA8E  +
test eax eax +
jz loc_1073131  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebx+288h] +
fld  qword ptr [edi] +
fcomp  qword ptr [esi] +
fnstsw  ax +
test ah 41h +
jnz loc_10730C5  +
fld  qword ptr [edi] +
jmp loc_107312D  +
mov ecx [ebp+var_4] +
call sub_100CA8E  +
fld  qword ptr [edi+eax*8-8] +
fcomp  qword ptr [esi] +
fnstsw  ax +
test ah 5 +
jp loc_10730E8  +
mov ecx [ebp+var_4] +
call sub_100CA8E  +
fld  qword ptr [edi+eax*8-8] +
jmp loc_107312D  +
mov ebx [ebx+28Ch] +
mov ecx edi +
jmp loc_107310C  +
fld  qword ptr [ecx] +
fcomp  qword ptr [esi] +
fnstsw  ax +
test ah 5 +
jp loc_1073109  +
fld  qword ptr [ecx+8] +
fcomp  qword ptr [esi] +
fnstsw  ax +
test ah 41h +
jz loc_1073112  +
add ecx 8 +
cmp ecx ebx +
jz loc_107312F  +
jmp loc_10730F2  +
fld  qword ptr [ecx+8] +
fmul  ds:dbl_1006830 +
fadd  qword ptr [ecx] +
fcomp  qword ptr [esi] +
fnstsw  ax +
test ah 41h +
jnz loc_107312A  +
fld  qword ptr [ecx] +
jmp loc_107312D  +
fld  qword ptr [ecx+8] +
fstp  qword ptr [esi] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+22Ch] +
call sub_1010615  +
lea edi [esi+270h] +
fld  qword ptr [edi] +
lea ecx [esi+284h] +
fstp  qword ptr [ebp-8] +
mov ebx eax +
call sub_100CA8E  +
test eax eax +
jz loc_1073200  +
mov eax [ebp+8] +
sub eax 0 +
jz loc_10731C4  +
dec eax  +
jz loc_10731BF  +
dec eax  +
jz loc_10731C4  +
dec eax  +
jz loc_10731BF  +
dec eax  +
jz loc_107319B  +
dec eax  +
jnz loc_10731D5  +
push ebx  +
mov ecx esi +
call sub_1072A88  +
fstp  qword ptr [edi] +
push edi  +
call sub_107308C  +
jmp loc_10731D5  +
mov eax [esi+278h] +
cmp ebx eax +
jz loc_10731D5  +
jge loc_10731AB  +
fld  qword ptr [edi] +
jmp loc_10731C7  +
cmp ebx eax +
jle loc_10731D5  +
fld  qword ptr [edi] +
push ecx  +
push ecx  +
mov ecx esi +
fstp  qword ptr [esp] +
call sub_1072E5C  +
jmp loc_10731D3  +
fld  qword ptr [ebp-8] +
jmp loc_10731B1  +
***
fld  qword ptr [ebp-8] +
push ecx  +
push ecx  +
mov ecx esi +
fstp  qword ptr [esp] +
call sub_1072EFD  +
fstp  qword ptr [edi] +
fld  qword ptr [edi] +
push ecx  +
push ecx  +
mov ecx esi +
fstp  qword ptr [esp] +
call sub_10102BE  +
lea ebx [esi+22Ch] +
push eax  +
mov ecx ebx +
call sub_101029D  +
mov ecx ebx +
call sub_1010615  +
mov [esi+278h] eax +
jmp loc_107320A  +
push ebx  +
mov ecx esi +
call sub_1072A88  +
fstp  qword ptr [edi] +
fld  qword ptr [edi] +
fcomp  qword ptr [ebp-8] +
fnstsw  ax +
test ah 44h +
jnp loc_1073233  +
mov ecx esi +
call sub_101062D  +
mov ecx [esi+27Ch] +
test ecx ecx +
jz loc_1073233  +
fld  qword ptr [edi] +
mov eax [ecx] +
push esi  +
push ecx  +
push ecx  +
fstp  qword ptr [esp] +
call dword ptr [eax]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101FB9A  +
test byte ptr [ebp+8] 1 +
jz loc_1073259  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?GetCurrentMessage@CWnd@@KGPBUtagMSG@@XZ  +
push dword ptr [eax+0Ch]  +
mov edx [esi] +
push dword ptr [eax+8]  +
mov ecx esi +
push 201h  +
call dword ptr [edx+0A8h]  +
pop esi  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CButton@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10732A7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+i]  +
push dword ptr [ecx+4]  +
call ds:ImageList_Remove  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+78h] 0 +
jnz loc_10732E8  +
push 0Fh  +
call ds:GetSysColor  +
push eax  +
mov ecx esi +
call sub_1019062  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
lea eax [esi+84h] +
cmp byte ptr [eax] 0 +
jnz loc_1073333  +
mov byte ptr [eax] 1 +
mov eax [esi+20h] +
mov [ebp-8] eax +
lea eax [ebp-10h] +
push eax  +
mov dword ptr [ebp-10h] 10h +
mov dword ptr [ebp-0Ch] 2 +
call ds:TrackMouseEvent  +
push 0  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
leave   +
retn 0Ch  +
***
xor eax eax +
push eax  +
push eax  +
push dword ptr [ecx+20h]  +
mov [ecx+84h] al +
call ds:InvalidateRect  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1021436  +
test byte ptr [ebp+8] 1 +
jz loc_1073379  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
inc eax  +
test [ebp+arg_0] al +
jz loc_1073394  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+34h] eax +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov ecx [esi] +
xor ebx ebx +
push ebx  +
lea eax [ebp-2Ch] +
push eax  +
mov [ebp-10h] ebx +
call sub_107385B  +
lea ecx [esi+0Ch] +
push eax  +
mov [ebp-4] ebx +
call sub_101DE5A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
xor edi edi +
push ebx  +
inc edi  +
push edi  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
mov ecx [esi+4] +
lea eax [esi+0Ch] +
push eax  +
call sub_10759CF  +
mov ecx [esi+4] +
call sub_1075F3C  +
test eax eax +
jz loc_107344A  +
mov ecx [esi+4] +
lea eax [ebp-64h] +
push eax  +
call sub_1075DAE  +
mov [ebp-10h] eax +
mov ecx [esi+4] +
lea eax [ebp-48h] +
push eax  +
mov [ebp-4] edi +
call sub_1075E4E  +
push dword ptr [ebp-10h]  +
mov ecx [esi+8] +
mov edx [ecx] +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [edx+10h]  +
push ebx  +
push edi  +
lea ecx [ebp-48h] +
call sub_1012F94  +
push ebx  +
push edi  +
lea ecx [ebp-64h] +
call sub_1012F94  +
mov [ebp-10h] edi +
mov eax [ebp-10h] +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi [ebp+8] +
mov edi [esi+28h] +
imul edi edi +
mov dword ptr [ebp+8] 1 +
call ds:timeGetTime  +
mov [ebp-10h] eax +
push edi  +
call ds:Sleep  +
mov ecx [esi+8] +
mov eax [ecx] +
call dword ptr [eax+14h]  +
test eax eax +
jz loc_10734BC  +
lea ebx [esi+30h] +
push ebx  +
call ds:ApplicationRecoveryInProgress  +
cmp dword ptr [ebx] 0 +
jnz loc_10734BC  +
call ds:timeGetTime  +
sub eax [ebp-10h] +
cmp eax [esi+2Ch] +
jle loc_10734B4  +
and dword ptr [ebp+8] 0 +
cmp dword ptr [ebp+8] 0 +
jz loc_10734FA  +
jmp loc_1073480  +
push offset aValid  +
lea ecx [ebp-2Ch] +
call sub_10142C5  +
mov ecx [esi+4] +
xor edi edi +
push edi  +
lea eax [ebp-2Ch] +
push eax  +
mov [ebp-4] edi +
call sub_1075F1E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push edi  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
mov ecx [esi+4] +
call sub_1075A84  +
mov ecx [esi+8] +
mov eax [ecx] +
call dword ptr [eax+8]  +
xor eax eax +
call sub_1002061  +
retn 4  +
***
call sub_10020DC  +
mov esi ecx +
lea ecx [ebp-2Ch] +
call sub_101CA24  +
xor ebx ebx +
mov [ebp-4] ebx +
cmp [ebp+8] ebx +
jz loc_1073584  +
mov ecx [esi+4] +
lea eax [ebp-48h] +
push eax  +
call sub_101DD2E  +
lea ecx [esi+0Ch] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101DE5A  +
xor edi edi +
push ebx  +
inc edi  +
push edi  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call sub_1012F94  +
lea eax [esi+30h] +
push eax  +
call ds:ApplicationRecoveryInProgress  +
lea eax [ebp-4Ch] +
push eax  +
push ebx  +
push esi  +
push offset StartAddress  +
push ebx  +
push ebx  +
call ds:CreateThread  +
mov ecx [esi] +
push ebx  +
lea eax [esi+0Ch] +
push eax  +
call sub_101CA40  +
mov ecx [esi] +
call sub_101BE85  +
jmp loc_1073587  +
xor edi edi +
inc edi  +
push offset aValid  +
lea ecx [ebp-48h] +
call sub_10142C5  +
mov ecx [esi+4] +
push edi  +
lea eax [ebp-48h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_1075F1E  +
push ebx  +
push edi  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call sub_1012F94  +
mov ecx [esi+8] +
mov eax [ecx] +
call dword ptr [eax+1Ch]  +
push offset aUnsaved  +
lea ecx [ebp-48h] +
test eax eax +
jz loc_10735D2  +
call sub_10142C5  +
mov byte ptr [ebp-4] 3 +
push edi  +
jmp loc_10735DC  +
call sub_10142C5  +
mov byte ptr [ebp-4] 4 +
push ebx  +
mov ecx [esi+4] +
lea eax [ebp-48h] +
push eax  +
call sub_1075F1E  +
push ebx  +
push edi  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call sub_1012F94  +
mov ecx [esi+8] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push offset aUntitled  +
lea ecx [ebp-48h] +
test eax eax +
jz loc_1073615  +
call sub_10142C5  +
mov byte ptr [ebp-4] 5 +
push edi  +
jmp loc_107361F  +
call sub_10142C5  +
mov byte ptr [ebp-4] 6 +
push ebx  +
mov ecx [esi+4] +
lea eax [ebp-48h] +
push eax  +
call sub_1075F1E  +
push ebx  +
push edi  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call sub_1012F94  +
push offset aOriginalfilepa  +
lea ecx [ebp-48h] +
call sub_10142C5  +
mov ecx [esi+8] +
mov eax [ecx] +
lea edx [ebp-68h] +
push edx  +
mov byte ptr [ebp-4] 7 +
call dword ptr [eax+20h]  +
mov ecx [esi+4] +
push eax  +
lea eax [ebp-48h] +
push eax  +
mov byte ptr [ebp-4] 8 +
call sub_1075EFB  +
push ebx  +
push edi  +
lea ecx [ebp-68h] +
call sub_1012F94  +
push ebx  +
push edi  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call sub_1012F94  +
mov ecx [esi+4] +
lea eax [ebp-68h] +
push eax  +
call sub_107406C  +
push 0FFFFFFFFh  +
push ebx  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 9 +
call sub_1014F52  +
push ebx  +
push edi  +
lea ecx [ebp-68h] +
mov [ebp-4] bl +
call sub_1012F94  +
lea ecx [ebp-48h] +
cmp [ebp-18h] ebx +
ja loc_10736D8  +
push offset aValid  +
call sub_10142C5  +
mov ecx [esi+4] +
push ebx  +
lea eax [ebp-48h] +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call sub_1075F1E  +
push ebx  +
push edi  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call sub_1012F94  +
jmp loc_107371B  +
push offset aRecoveryfilepa  +
call sub_10142C5  +
mov ecx [esi+4] +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-48h] +
push eax  +
mov byte ptr [ebp-4] 0Bh +
call sub_1075EFB  +
push ebx  +
push edi  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call sub_1012F94  +
mov ecx [esi+8] +
mov eax [ecx] +
call dword ptr [eax+1Ch]  +
test eax eax +
jz loc_107371B  +
mov ecx [esi+8] +
mov eax [ecx] +
lea edx [ebp-2Ch] +
push edx  +
call dword ptr [eax+0Ch]  +
mov ecx [esi+4] +
call sub_1075A84  +
cmp [ebp+8] ebx +
jz loc_1073737  +
xor eax eax +
cmp [esi+30h] ebx +
setz al  +
push eax  +
call ds:ApplicationRecoveryFinished  +
push ebx  +
push edi  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
xor eax eax +
call sub_1002119  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push 1  +
call sub_1073509  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
lea esi [ecx+0Ch] +
mov ecx esi +
call sub_101CE86  +
push esi  +
mov dword ptr [esi] offset off_101CD98 +
call sub_101DA19  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea esi [ecx-0Ch] +
mov ecx esi +
call sub_1073768  +
test byte ptr [ebp+8] 1 +
jz loc_10737A6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea esi [ecx-54h] +
mov ecx esi +
call sub_101D9F8  +
test byte ptr [ebp+8] 1 +
jz loc_10737CF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10737F3  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_101DE5A  +
add esi 1Ch +
cmp esi [ebp+arg_4] +
jnz loc_10737E6  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
jmp loc_1073818  +
push esi  +
call sub_101DE5A  +
add [ebp+arg_C] 1Ch +
add esi 1Ch +
mov ecx [ebp+arg_C] +
cmp esi [ebp+arg_8] +
jnz loc_107380B  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] esi +
jz loc_1073850  +
sub [ebp+arg_8] 1Ch +
mov ecx [ebp+arg_8] +
sub esi 1Ch +
push esi  +
call sub_101DE5A  +
cmp esi [ebp+arg_0] +
jnz loc_107383B  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
call sub_100208C  +
mov esi [ebp+8] +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov edi ecx +
push offset word_100219C  +
mov ecx esi +
mov [ebp-14h] esi +
call sub_10142C5  +
and dword ptr [ebp-4] 0 +
mov ecx edi +
mov dword ptr [ebp-10h] 1 +
call sub_101BDEF  +
mov ecx [ebp+0Ch] +
cmp eax ecx +
jle loc_10738AA  +
imul ecx ecx +
add ecx [edi+4] +
push ecx  +
mov ecx esi +
call sub_101DE5A  +
mov eax esi +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1073800  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_107382D  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_107394F  +
push edi  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_10738B9  +
mov edi [eax] +
add esp 10h +
push esi  +
push dword ptr [esi+8]  +
push edi  +
call sub_10148C4  +
mov ecx [ebp+arg_4] +
mov [esi+8] edi +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_1073917  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+SystemTime] +
push eax  +
mov edi ecx +
xor ebx ebx +
call ds:GetSystemTime  +
mov esi ds:SystemTimeToFileTime +
lea eax [ebp+FileTime1] +
push eax  +
lea eax [ebp+SystemTime] +
push eax  +
call esi  +
lea eax [ebp+FileTime2] +
push eax  +
add edi 38h +
push edi  +
call esi  +
mov eax [ebp+FileTime1.dwLowDateTime] +
mov ecx [ebp+FileTime1.dwHighDateTime] +
add eax 3C773000h +
mov [ebp+FileTime1.dwLowDateTime] eax +
lea eax [ebp+FileTime2] +
push eax  +
lea eax [ebp+FileTime1] +
adc ecx 0FFFFFFEFh +
push eax  +
mov [ebp+FileTime1.dwHighDateTime] ecx +
call ds:CompareFileTime  +
test eax eax +
jle loc_10739D6  +
inc ebx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+45h] 0 +
jnz loc_10739FE  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1073A12  +
mov [ecx+4] eax +
jmp loc_1073A21  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_1073A1F  +
mov [ecx+8] eax +
jmp loc_1073A21  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+2Dh] 0 +
jnz loc_1073A4C  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1073A60  +
mov [ecx+4] eax +
jmp loc_1073A6F  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_1073A6D  +
mov [ecx+8] eax +
jmp loc_1073A6F  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1073A8A  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+45h] 0 +
jz loc_1073A88  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1073AA8  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+45h] 0 +
jz loc_1073AA6  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1073AC5  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+2Dh] 0 +
jz loc_1073AC3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1073AE2  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+2Dh] 0 +
jz loc_1073AE0  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+45h] dl +
jz loc_1073B07  +
mov eax [eax+8] +
jmp loc_1073B2D  +
mov ecx [eax] +
cmp [ecx+45h] dl +
jnz loc_1073B1E  +
push ecx  +
call sub_1073A7E  +
jmp loc_1073B2D  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_1073B26  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+45h] dl +
jz loc_1073B16  +
mov ecx [esi] +
cmp [ecx+45h] dl +
jnz loc_1073B2F  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+2Dh] dl +
jz loc_1073B49  +
mov eax [eax+8] +
jmp loc_1073B6F  +
mov ecx [eax] +
cmp [ecx+2Dh] dl +
jnz loc_1073B60  +
push ecx  +
call sub_1073AD6  +
jmp loc_1073B6F  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_1073B68  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+2Dh] dl +
jz loc_1073B58  +
mov ecx [esi] +
cmp [ecx+2Dh] dl +
jnz loc_1073B71  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+2Dh] dl +
jz loc_1073B95  +
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_106CAD2  +
add esp 14h +
pop esi  +
retn   +
mov ecx [eax+8] +
cmp [ecx+2Dh] dl +
jnz loc_1073BAE  +
push ecx  +
call sub_1073AB9  +
jmp loc_1073BB6  +
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_1073BB6  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+2Dh] dl +
jz loc_1073BA5  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+2Dh] 0 +
jnz loc_1073BE9  +
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp [ecx+0Ch] edx +
jge loc_1073BDF  +
mov ecx [ecx+8] +
jmp loc_1073BE3  +
mov eax ecx +
mov ecx [ecx] +
cmp byte ptr [ecx+2Dh] 0 +
jz loc_1073BD5  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+45h] 0 +
jnz loc_1073C0E  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1073C22  +
mov [ecx+4] eax +
jmp loc_1073C30  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_1073C2D  +
mov [ecx] eax +
jmp loc_1073C30  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+2Dh] 0 +
jnz loc_1073C5A  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1073C6E  +
mov [ecx+4] eax +
jmp loc_1073C7C  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_1073C79  +
mov [ecx] eax +
jmp loc_1073C7C  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+45h] dl +
jz loc_1073CA7  +
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_106CAD2  +
add esp 14h +
pop esi  +
retn   +
mov ecx [eax+8] +
cmp [ecx+45h] dl +
jnz loc_1073CC0  +
push ecx  +
call sub_1073A9C  +
jmp loc_1073CC8  +
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_1073CC8  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+45h] dl +
jz loc_1073CB7  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_1014FD3  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1073CD1  +
pop ecx  +
pop ecx  +
xor ecx ecx +
test al al +
setz cl  +
mov al cl +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_102CFC1  +
xor ecx ecx +
test eax eax +
setl cl  +
mov al cl +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+1Ch] +
call sub_1012F94  +
push 0  +
push 1  +
mov ecx esi +
call sub_1012F94  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push esi  +
mov esi [eax+4] +
push edi  +
mov edi eax +
jmp loc_1073D90  +
push [ebp+arg_0]  +
lea eax [esi+0Ch] +
push eax  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_1073D8C  +
mov esi [esi+8] +
jmp loc_1073D90  +
mov edi esi +
mov esi [esi] +
cmp byte ptr [esi+2Dh] 0 +
jz loc_1073D75  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_1073D2F  +
test [ebp+arg_0] 1 +
jz loc_1073DC0  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
call sub_1012F94  +
test [ebp+arg_0] 1 +
jz loc_1073DED  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+10h] +
call sub_1012F94  +
test [ebp+arg_0] 1 +
jz loc_1073E1A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_1073D64  +
mov [ebp+var_4] eax +
cmp eax [esi+4] +
jz loc_1073E56  +
add eax 0Ch +
push eax  +
push [ebp+arg_4]  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_1073E56  +
lea eax [ebp+var_4] +
jmp loc_1073E5F  +
mov eax [esi+4] +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1014F22  +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov [esi+1Ch] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1014F22  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+1Ch] +
call sub_1014F22  +
mov eax esi +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
lea ecx [esi+4] +
mov [esi] eax +
call sub_1014F22  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call sub_1014F22  +
and dword ptr [ebp-4] 0 +
add edi 1Ch +
push edi  +
lea ecx [esi+1Ch] +
call sub_1014F22  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1014F22  +
mov eax [edi+1Ch] +
mov [esi+1Ch] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
add eax 4 +
mov [esi] ecx +
push eax  +
lea ecx [esi+4] +
call sub_1014F22  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1073DA3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1073DCC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1073DF9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+0Ch] +
mov [esi+8] eax +
call sub_1073EF1  +
mov al [ebp+arg_10] +
mov [esi+44h] al +
mov byte ptr [esi+45h] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+0Ch] +
mov [esi+8] eax +
call sub_1073F2A  +
mov al [ebp+arg_10] +
mov [esi+2Ch] al +
mov byte ptr [esi+2Dh] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+0Ch] +
mov [esi+8] eax +
call sub_1073F4F  +
mov al [ebp+arg_10] +
mov [esi+2Ch] al +
mov byte ptr [esi+2Dh] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
call sub_10020DC  +
mov esi [ebp+8] +
xor ebx ebx +
xor eax eax +
mov [ebp-428h] ebx +
push 206h  +
mov [ebp-218h] ax +
lea eax [ebp-216h] +
push ebx  +
push eax  +
mov [ebp-4] ebx +
mov edi ecx +
mov [ebp-42Ch] esi +
call memset  +
add esp 0Ch +
push offset word_100219C  +
mov ecx esi +
call sub_10142C5  +
push ebx  +
push 1Ah  +
lea eax [ebp-218h] +
push eax  +
push ebx  +
mov [ebp-4] ebx +
mov dword ptr [ebp-428h] 1 +
call ds:SHGetSpecialFolderPathW  +
test eax eax +
jz loc_10741B9  +
lea eax [ebp-218h] +
push eax  +
mov ecx esi +
call sub_10142F1  +
push offset aMicrosoft  +
mov ecx esi +
call sub_101F20B  +
lea eax [edi+1Ch] +
push eax  +
mov ecx esi +
mov [ebp-424h] eax +
call sub_1014E20  +
push offset dword_10741C4  +
mov ecx esi +
call sub_101F20B  +
cmp dword ptr [esi+18h] 8 +
lea edi [esi+4] +
jb loc_1074125  +
mov eax [edi] +
jmp loc_1074127  +
mov eax edi +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_107414B  +
cmp dword ptr [esi+18h] 8 +
jb loc_107413D  +
mov eax [edi] +
jmp loc_107413F  +
mov eax edi +
push eax  +
push ebx  +
call ds:SHELL32_165  +
cmp eax ebx +
jnz loc_1074193  +
mov eax [ebp-424h] +
cmp dword ptr [eax+18h] 8 +
jb loc_107415C  +
mov eax [eax+4] +
jmp loc_107415F  +
add eax 4 +
cmp dword ptr [esi+18h] 8 +
jb loc_1074167  +
mov edi [edi] +
lea ecx [ebp-420h] +
push ecx  +
push ebx  +
push eax  +
push edi  +
call ds:GetTempFileNameW  +
push offset word_100219C  +
mov ecx esi +
call sub_10142F1  +
lea eax [ebp-420h] +
push eax  +
mov ecx esi +
call sub_101F20B  +
jmp loc_10741B9  +
lea ecx [ebp-448h] +
call sub_101CA24  +
xor edi edi +
inc edi  +
push eax  +
mov ecx esi +
mov [ebp-4] edi +
call sub_101DE5A  +
push ebx  +
push edi  +
lea ecx [ebp-448h] +
call sub_1012F94  +
mov eax esi +
call sub_1002119  +
retn 4  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+45h] 0 +
jz loc_107422F  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_104C1F6  +
push offset dword_10832E4  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_104A3C8 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_1073C8A  +
mov edx [edi] +
cmp byte ptr [edx+45h] 0 +
jz loc_1074244  +
mov ebx [edi+8] +
jmp loc_107425D  +
mov eax [edi+8] +
cmp byte ptr [eax+45h] 0 +
jz loc_1074251  +
mov ebx edx +
jmp loc_107425D  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_10742C6  +
cmp byte ptr [ebx+45h] 0 +
mov esi [edi+4] +
jnz loc_1074269  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_1074279  +
mov [eax+4] ebx +
jmp loc_1074284  +
cmp [esi] edi +
jnz loc_1074281  +
mov [esi] ebx +
jmp loc_1074284  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_10742A3  +
cmp byte ptr [ebx+45h] 0 +
jz loc_1074295  +
mov eax esi +
jmp loc_107429E  +
push ebx  +
call sub_1073A9C  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_1074322  +
cmp byte ptr [ebx+45h] 0 +
jz loc_10742B5  +
mov eax esi +
jmp loc_10742BE  +
push ebx  +
call sub_1073A7E  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_1074322  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_10742D6  +
mov esi eax +
jmp loc_10742EF  +
cmp byte ptr [ebx+45h] 0 +
mov esi [eax+4] +
jnz loc_10742E2  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_10742FF  +
mov [ecx+4] eax +
jmp loc_107430D  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_107430A  +
mov [ecx] eax +
jmp loc_107430D  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+44h] +
mov dl [edi+44h] +
mov [eax+44h] dl +
mov [edi+44h] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+44h] 1 +
jz loc_10743E6  +
jmp loc_107442B  +
cmp byte ptr [ebx+44h] 1 +
jnz loc_1074427  +
mov eax [esi] +
cmp ebx eax +
jnz loc_10743AD  +
mov eax [esi+8] +
cmp byte ptr [eax+44h] 0 +
jnz loc_107435E  +
mov byte ptr [eax+44h] 1 +
push esi  +
mov byte ptr [esi+44h] 0 +
call sub_1073BF2  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+45h] 0 +
jnz loc_10743E1  +
mov edx [eax] +
cmp byte ptr [edx+44h] 1 +
jnz loc_1074375  +
mov edx [eax+8] +
cmp byte ptr [edx+44h] 1 +
jz loc_10743DD  +
mov edx [eax+8] +
cmp byte ptr [edx+44h] 1 +
jnz loc_1074394  +
mov edx [eax] +
mov byte ptr [edx+44h] 1 +
push eax  +
mov byte ptr [eax+44h] 0 +
call sub_10739E2  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+44h] +
mov [eax+44h] dl +
mov byte ptr [esi+44h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+44h] 1 +
call sub_1073BF2  +
jmp loc_1074427  +
cmp byte ptr [eax+44h] 0 +
jnz loc_10743C6  +
mov byte ptr [eax+44h] 1 +
push esi  +
mov byte ptr [esi+44h] 0 +
call sub_10739E2  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+45h] 0 +
jnz loc_10743E1  +
mov edx [eax+8] +
cmp byte ptr [edx+44h] 1 +
jnz loc_10743F3  +
mov edx [eax] +
cmp byte ptr [edx+44h] 1 +
jnz loc_10743F3  +
mov byte ptr [eax+44h] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_1074427  +
jmp loc_1074331  +
mov edx [eax] +
cmp byte ptr [edx+44h] 1 +
jnz loc_1074411  +
mov edx [eax+8] +
mov byte ptr [edx+44h] 1 +
push eax  +
mov byte ptr [eax+44h] 0 +
call sub_1073BF2  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+44h] +
mov [eax+44h] dl +
mov byte ptr [esi+44h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+44h] 1 +
call sub_10739E2  +
mov byte ptr [ebx+44h] 1 +
push edi  +
call sub_1073F76  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_1074446  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1002061  +
retn 8  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+2Dh] 0 +
jz loc_10744A5  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_104C1F6  +
push offset dword_10832E4  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_104A3C8 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_1073B78  +
mov edx [edi] +
cmp byte ptr [edx+2Dh] 0 +
jz loc_10744BA  +
mov ebx [edi+8] +
jmp loc_10744D3  +
mov eax [edi+8] +
cmp byte ptr [eax+2Dh] 0 +
jz loc_10744C7  +
mov ebx edx +
jmp loc_10744D3  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_107453C  +
cmp byte ptr [ebx+2Dh] 0 +
mov esi [edi+4] +
jnz loc_10744DF  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_10744EF  +
mov [eax+4] ebx +
jmp loc_10744FA  +
cmp [esi] edi +
jnz loc_10744F7  +
mov [esi] ebx +
jmp loc_10744FA  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_1074519  +
cmp byte ptr [ebx+2Dh] 0 +
jz loc_107450B  +
mov eax esi +
jmp loc_1074514  +
push ebx  +
call sub_1073AB9  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_1074598  +
cmp byte ptr [ebx+2Dh] 0 +
jz loc_107452B  +
mov eax esi +
jmp loc_1074534  +
push ebx  +
call sub_1073AD6  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_1074598  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_107454C  +
mov esi eax +
jmp loc_1074565  +
cmp byte ptr [ebx+2Dh] 0 +
mov esi [eax+4] +
jnz loc_1074558  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_1074575  +
mov [ecx+4] eax +
jmp loc_1074583  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_1074580  +
mov [ecx] eax +
jmp loc_1074583  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+2Ch] +
mov dl [edi+2Ch] +
mov [eax+2Ch] dl +
mov [edi+2Ch] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+2Ch] 1 +
jz loc_107465C  +
jmp loc_10746A1  +
cmp byte ptr [ebx+2Ch] 1 +
jnz loc_107469D  +
mov eax [esi] +
cmp ebx eax +
jnz loc_1074623  +
mov eax [esi+8] +
cmp byte ptr [eax+2Ch] 0 +
jnz loc_10745D4  +
mov byte ptr [eax+2Ch] 1 +
push esi  +
mov byte ptr [esi+2Ch] 0 +
call sub_1073C3E  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+2Dh] 0 +
jnz loc_1074657  +
mov edx [eax] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_10745EB  +
mov edx [eax+8] +
cmp byte ptr [edx+2Ch] 1 +
jz loc_1074653  +
mov edx [eax+8] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_107460A  +
mov edx [eax] +
mov byte ptr [edx+2Ch] 1 +
push eax  +
mov byte ptr [eax+2Ch] 0 +
call sub_1073A30  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+2Ch] +
mov [eax+2Ch] dl +
mov byte ptr [esi+2Ch] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+2Ch] 1 +
call sub_1073C3E  +
jmp loc_107469D  +
cmp byte ptr [eax+2Ch] 0 +
jnz loc_107463C  +
mov byte ptr [eax+2Ch] 1 +
push esi  +
mov byte ptr [esi+2Ch] 0 +
call sub_1073A30  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+2Dh] 0 +
jnz loc_1074657  +
mov edx [eax+8] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_1074669  +
mov edx [eax] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_1074669  +
mov byte ptr [eax+2Ch] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_107469D  +
jmp loc_10745A7  +
mov edx [eax] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_1074687  +
mov edx [eax+8] +
mov byte ptr [edx+2Ch] 1 +
push eax  +
mov byte ptr [eax+2Ch] 0 +
call sub_1073C3E  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+2Ch] +
mov [eax+2Ch] dl +
mov byte ptr [esi+2Ch] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+2Ch] 1 +
call sub_1073A30  +
mov byte ptr [ebx+2Ch] 1 +
push edi  +
call sub_1073F8E  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_10746BC  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1002061  +
retn 8  +
***
call sub_100208C  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+2Dh] 0 +
jz loc_107471B  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_104C1F6  +
push offset dword_10832E4  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_104A3C8 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_1073B78  +
mov edx [edi] +
cmp byte ptr [edx+2Dh] 0 +
jz loc_1074730  +
mov ebx [edi+8] +
jmp loc_1074749  +
mov eax [edi+8] +
cmp byte ptr [eax+2Dh] 0 +
jz loc_107473D  +
mov ebx edx +
jmp loc_1074749  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_10747B2  +
cmp byte ptr [ebx+2Dh] 0 +
mov esi [edi+4] +
jnz loc_1074755  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_1074765  +
mov [eax+4] ebx +
jmp loc_1074770  +
cmp [esi] edi +
jnz loc_107476D  +
mov [esi] ebx +
jmp loc_1074770  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_107478F  +
cmp byte ptr [ebx+2Dh] 0 +
jz loc_1074781  +
mov eax esi +
jmp loc_107478A  +
push ebx  +
call sub_1073AB9  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_107480E  +
cmp byte ptr [ebx+2Dh] 0 +
jz loc_10747A1  +
mov eax esi +
jmp loc_10747AA  +
push ebx  +
call sub_1073AD6  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_107480E  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_10747C2  +
mov esi eax +
jmp loc_10747DB  +
cmp byte ptr [ebx+2Dh] 0 +
mov esi [eax+4] +
jnz loc_10747CE  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_10747EB  +
mov [ecx+4] eax +
jmp loc_10747F9  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_10747F6  +
mov [ecx] eax +
jmp loc_10747F9  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+2Ch] +
mov dl [edi+2Ch] +
mov [eax+2Ch] dl +
mov [edi+2Ch] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+2Ch] 1 +
jz loc_10748D2  +
jmp loc_1074917  +
cmp byte ptr [ebx+2Ch] 1 +
jnz loc_1074913  +
mov eax [esi] +
cmp ebx eax +
jnz loc_1074899  +
mov eax [esi+8] +
cmp byte ptr [eax+2Ch] 0 +
jnz loc_107484A  +
mov byte ptr [eax+2Ch] 1 +
push esi  +
mov byte ptr [esi+2Ch] 0 +
call sub_1073C3E  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+2Dh] 0 +
jnz loc_10748CD  +
mov edx [eax] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_1074861  +
mov edx [eax+8] +
cmp byte ptr [edx+2Ch] 1 +
jz loc_10748C9  +
mov edx [eax+8] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_1074880  +
mov edx [eax] +
mov byte ptr [edx+2Ch] 1 +
push eax  +
mov byte ptr [eax+2Ch] 0 +
call sub_1073A30  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+2Ch] +
mov [eax+2Ch] dl +
mov byte ptr [esi+2Ch] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+2Ch] 1 +
call sub_1073C3E  +
jmp loc_1074913  +
cmp byte ptr [eax+2Ch] 0 +
jnz loc_10748B2  +
mov byte ptr [eax+2Ch] 1 +
push esi  +
mov byte ptr [esi+2Ch] 0 +
call sub_1073A30  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+2Dh] 0 +
jnz loc_10748CD  +
mov edx [eax+8] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_10748DF  +
mov edx [eax] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_10748DF  +
mov byte ptr [eax+2Ch] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_1074913  +
jmp loc_107481D  +
mov edx [eax] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_10748FD  +
mov edx [eax+8] +
mov byte ptr [edx+2Ch] 1 +
push eax  +
mov byte ptr [eax+2Ch] 0 +
call sub_1073C3E  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+2Ch] +
mov [eax+2Ch] dl +
mov byte ptr [esi+2Ch] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+2Ch] 1 +
call sub_1073A30  +
mov byte ptr [ebx+2Ch] 1 +
push edi  +
call sub_1073FA6  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_1074932  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1002061  +
retn 8  +
***
call sub_100208C  +
mov ecx [ebp+8] +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1074975  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1073FBE  +
call sub_1002061  +
retn 18h  +
***
call sub_100208C  +
mov ecx [ebp+8] +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10749B0  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1073FF8  +
call sub_1002061  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+2Dh] 0 +
mov ebx ecx +
mov esi edi +
jnz loc_10749F3  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_10749BD  +
mov esi [esi] +
push edi  +
call sub_1073FA6  +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+2Dh] 0 +
pop ecx  +
mov edi esi +
jz loc_10749D2  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov ecx [ebp+8] +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1074A2D  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1074032  +
call sub_1002061  +
retn 18h  +
***
call sub_1002370  +
pop ecx  +
call sub_1002370  +
pop ecx  +
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_10749BD  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
call sub_1002370  +
pop ecx  +
call sub_100208C  +
mov edi ecx +
cmp dword ptr [edi+8] 4924923h +
jb loc_1074BB1  +
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_1074A3A  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_1074BDD  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_1074BFB  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_1074BF0  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_1074BFE  +
mov [eax] ebx +
jmp loc_1074BFE  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_1074BFE  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
jmp loc_1074C98  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_1074C49  +
mov edx [edx+8] +
cmp byte ptr [edx+44h] 0 +
jz loc_1074C51  +
cmp esi [ecx+8] +
jnz loc_1074C29  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1073BF2  +
mov eax [esi+4] +
mov byte ptr [eax+44h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+44h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_10739E2  +
jmp loc_1074C95  +
mov edx [edx] +
cmp byte ptr [edx+44h] 0 +
jnz loc_1074C69  +
mov byte ptr [ecx+44h] 1 +
mov byte ptr [edx+44h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+44h] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_1074C95  +
cmp esi [ecx] +
jnz loc_1074C77  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_10739E2  +
mov eax [esi+4] +
mov byte ptr [eax+44h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+44h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1073BF2  +
lea eax [esi+4] +
mov ecx [eax] +
cmp byte ptr [ecx+44h] 0 +
jz loc_1074C08  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+44h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1002061  +
retn 10h  +
***
call sub_100208C  +
mov edi ecx +
cmp dword ptr [edi+8] 7FFFFFEh +
jb loc_1074D02  +
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_1074A92  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_1074D2E  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_1074D4C  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_1074D41  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_1074D4F  +
mov [eax] ebx +
jmp loc_1074D4F  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_1074D4F  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
jmp loc_1074DE9  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_1074D9A  +
mov edx [edx+8] +
cmp byte ptr [edx+2Ch] 0 +
jz loc_1074DA2  +
cmp esi [ecx+8] +
jnz loc_1074D7A  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1073C3E  +
mov eax [esi+4] +
mov byte ptr [eax+2Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+2Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1073A30  +
jmp loc_1074DE6  +
mov edx [edx] +
cmp byte ptr [edx+2Ch] 0 +
jnz loc_1074DBA  +
mov byte ptr [ecx+2Ch] 1 +
mov byte ptr [edx+2Ch] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+2Ch] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_1074DE6  +
cmp esi [ecx] +
jnz loc_1074DC8  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1073A30  +
mov eax [esi+4] +
mov byte ptr [eax+2Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+2Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1073C3E  +
lea eax [esi+4] +
mov ecx [eax] +
cmp byte ptr [ecx+2Ch] 0 +
jz loc_1074D59  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+2Ch] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1002061  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_1074E37  +
cmp [ebp+arg_8] eax +
jnz loc_1074E37  +
mov ecx esi +
call sub_1074AEA  +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_1074E5C  +
cmp ecx [ebp+arg_8] +
jz loc_1074E5C  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1073B78  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10746D1  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1074E3D  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
call sub_100208C  +
mov edi ecx +
cmp dword ptr [edi+8] 7FFFFFEh +
jb loc_1074EAD  +
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_101D8E7  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104C26F  +
push offset dword_1082DC4  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_1074B17  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_1074ED9  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_1074EF7  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_1074EEC  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_1074EFA  +
mov [eax] ebx +
jmp loc_1074EFA  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_1074EFA  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
jmp loc_1074F94  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_1074F45  +
mov edx [edx+8] +
cmp byte ptr [edx+2Ch] 0 +
jz loc_1074F4D  +
cmp esi [ecx+8] +
jnz loc_1074F25  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1073C3E  +
mov eax [esi+4] +
mov byte ptr [eax+2Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+2Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1073A30  +
jmp loc_1074F91  +
mov edx [edx] +
cmp byte ptr [edx+2Ch] 0 +
jnz loc_1074F65  +
mov byte ptr [ecx+2Ch] 1 +
mov byte ptr [edx+2Ch] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+2Ch] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_1074F91  +
cmp esi [ecx] +
jnz loc_1074F73  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1073A30  +
mov eax [esi+4] +
mov byte ptr [eax+2Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+2Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1073C3E  +
lea eax [esi+4] +
mov ecx [eax] +
cmp byte ptr [ecx+2Ch] 0 +
jz loc_1074F04  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+2Ch] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1002061  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1074E11  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
jmp loc_1075029  +
lea eax [esi+0Ch] +
push eax  +
push [ebp+arg_4]  +
mov ebx esi +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
mov byte ptr [ebp+var_8] al +
test al al +
jz loc_1075026  +
mov esi [esi] +
jmp loc_1075029  +
mov esi [esi+8] +
cmp byte ptr [esi+45h] 0 +
jz loc_107500B  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_1075068  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_107505D  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_1074B6F  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
jmp loc_107508C  +
lea ecx [ebp+var_4] +
call sub_1073AF4  +
mov esi [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [esi+0Ch] +
push eax  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_1075083  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_1075045  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
jmp loc_10750D1  +
lea eax [esi+0Ch] +
push eax  +
push [ebp+arg_4]  +
mov ebx esi +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
mov byte ptr [ebp+var_8] al +
test al al +
jz loc_10750CE  +
mov esi [esi] +
jmp loc_10750D1  +
mov esi [esi+8] +
cmp byte ptr [esi+2Dh] 0 +
jz loc_10750B3  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_1075110  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_1075105  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_1074CC0  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
jmp loc_1075134  +
lea ecx [ebp+var_4] +
call sub_1073B36  +
mov esi [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [esi+0Ch] +
push eax  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_107512B  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_10750ED  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+4] +
cmp byte ptr [eax+2Dh] 0 +
push edi  +
mov edi ecx +
mov byte ptr [ebp+var_4] 1 +
jnz loc_107517E  +
mov ecx [ebx] +
cmp ecx [eax+0Ch] +
mov edi eax +
setl byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jz loc_1075175  +
mov eax [eax] +
jmp loc_1075178  +
mov eax [eax+8] +
cmp byte ptr [eax+2Dh] 0 +
jz loc_1075162  +
cmp byte ptr [ebp+var_4] 0 +
mov ecx edi +
mov [ebp+arg_4] ecx +
jz loc_10751B5  +
mov eax [esi+4] +
cmp edi [eax] +
jnz loc_10751AA  +
push ebx  +
push edi  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_1074E6B  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
jmp loc_10751CA  +
lea ecx [ebp+arg_4] +
call sub_1073B36  +
mov ecx [ebp+arg_4] +
mov eax [ecx+0Ch] +
cmp eax [ebx] +
jge loc_10751C3  +
push ebx  +
push edi  +
push [ebp+var_4]  +
jmp loc_1075194  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jnz loc_1075200  +
push [ebp+arg_8]  +
push dword ptr [esi+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_1074B6F  +
mov eax [ebp+arg_0] +
jmp loc_1075314  +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
push ebx  +
push edi  +
mov edi [ebp+arg_8] +
cmp ecx [eax] +
jnz loc_107522E  +
add ecx 0Ch +
push ecx  +
push edi  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_10752FF  +
push edi  +
push [ebp+arg_4]  +
mov ecx esi +
jmp loc_10752F0  +
cmp ecx eax +
jnz loc_1075259  +
mov eax [eax+8] +
add eax 0Ch +
push edi  +
push eax  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_10752FF  +
mov eax [esi+4] +
push edi  +
push dword ptr [eax+8]  +
mov ecx esi +
push 0  +
jmp loc_10752F2  +
add ecx 0Ch +
push ecx  +
push edi  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_107529E  +
mov eax [ebp+arg_4] +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] eax +
call sub_1073AF4  +
mov ebx [ebp+arg_8] +
lea eax [ebx+0Ch] +
push edi  +
push eax  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_107529E  +
mov eax [ebx+8] +
cmp byte ptr [eax+45h] 0 +
push edi  +
mov ecx esi +
jz loc_1075299  +
push ebx  +
jmp loc_10752E9  +
push [ebp+arg_4]  +
jmp loc_10752F0  +
mov eax [ebp+arg_4] +
add eax 0Ch +
push edi  +
push eax  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_10752FF  +
mov eax [ebp+arg_4] +
mov ebx [esi+4] +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] eax +
call sub_1073C8A  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_10752D9  +
add eax 0Ch +
push eax  +
push edi  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_10752FF  +
mov eax [ebp+arg_4] +
mov ecx [eax+8] +
cmp byte ptr [ecx+45h] 0 +
push edi  +
mov ecx esi +
jz loc_10752ED  +
push eax  +
push 0  +
jmp loc_10752F2  +
push [ebp+arg_8]  +
push 1  +
push [ebp+arg_0]  +
call sub_1074B6F  +
mov eax [ebp+arg_0] +
jmp loc_1075312  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1074FF0  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jnz loc_1075346  +
push [ebp+arg_8]  +
push dword ptr [esi+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_1074CC0  +
mov eax [ebp+arg_0] +
jmp loc_107545A  +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
push ebx  +
push edi  +
mov edi [ebp+arg_8] +
cmp ecx [eax] +
jnz loc_1075374  +
add ecx 0Ch +
push ecx  +
push edi  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_1075445  +
push edi  +
push [ebp+arg_4]  +
mov ecx esi +
jmp loc_1075436  +
cmp ecx eax +
jnz loc_107539F  +
mov eax [eax+8] +
add eax 0Ch +
push edi  +
push eax  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_1075445  +
mov eax [esi+4] +
push edi  +
push dword ptr [eax+8]  +
mov ecx esi +
push 0  +
jmp loc_1075438  +
add ecx 0Ch +
push ecx  +
push edi  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_10753E4  +
mov eax [ebp+arg_4] +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] eax +
call sub_1073B36  +
mov ebx [ebp+arg_8] +
lea eax [ebx+0Ch] +
push edi  +
push eax  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_10753E4  +
mov eax [ebx+8] +
cmp byte ptr [eax+2Dh] 0 +
push edi  +
mov ecx esi +
jz loc_10753DF  +
push ebx  +
jmp loc_107542F  +
push [ebp+arg_4]  +
jmp loc_1075436  +
mov eax [ebp+arg_4] +
add eax 0Ch +
push edi  +
push eax  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_1075445  +
mov eax [ebp+arg_4] +
mov ebx [esi+4] +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] eax +
call sub_1073B78  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_107541F  +
add eax 0Ch +
push eax  +
push edi  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_1075445  +
mov eax [ebp+arg_4] +
mov ecx [eax+8] +
cmp byte ptr [ecx+2Dh] 0 +
push edi  +
mov ecx esi +
jz loc_1075433  +
push eax  +
push 0  +
jmp loc_1075438  +
push [ebp+arg_8]  +
push 1  +
push [ebp+arg_0]  +
call sub_1074CC0  +
mov eax [ebp+arg_0] +
jmp loc_1075458  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1075098  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+8] 0 +
jnz loc_107548C  +
push [ebp+arg_8]  +
push dword ptr [ebx+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_1074E6B  +
mov eax [ebp+arg_0] +
jmp loc_1075546  +
mov eax [ebx+4] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_4] eax +
cmp edi [eax] +
jnz loc_10754AF  +
mov eax [esi] +
cmp eax [edi+0Ch] +
jge loc_1075531  +
push esi  +
push edi  +
push 1  +
jmp loc_1075524  +
cmp edi eax +
jnz loc_10754C0  +
mov eax [eax+8] +
mov ecx [eax+0Ch] +
cmp ecx [esi] +
jge loc_1075531  +
push esi  +
jmp loc_107551A  +
mov eax [esi] +
cmp eax [edi+0Ch] +
jge loc_10754EC  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] edi +
call sub_1073B36  +
mov ecx [ebp+arg_8] +
mov eax [esi] +
cmp [ecx+0Ch] eax +
jge loc_10754EC  +
mov eax [ecx+8] +
cmp byte ptr [eax+2Dh] 0 +
push esi  +
jz loc_10754E9  +
push ecx  +
jmp loc_107551B  +
push edi  +
jmp loc_1075520  +
mov eax [esi] +
cmp [edi+0Ch] eax +
jge loc_1075531  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] edi +
call sub_1073B78  +
mov ecx [ebp+arg_8] +
cmp ecx [ebp+var_4] +
jz loc_107550D  +
mov eax [esi] +
cmp eax [ecx+0Ch] +
jge loc_1075531  +
mov eax [ebp+arg_4] +
mov edx [eax+8] +
cmp byte ptr [edx+2Dh] 0 +
push esi  +
jz loc_107551F  +
push eax  +
push 0  +
jmp loc_1075522  +
push ecx  +
push 1  +
mov ecx ebx +
push [ebp+arg_0]  +
call sub_1074E6B  +
mov eax [ebp+arg_0] +
jmp loc_1075544  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
call sub_1075140  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
call sub_100208C  +
mov edi ecx +
push dword ptr [ebp+8]  +
call sub_10215E0  +
mov esi eax +
cmp esi [edi+4] +
jz loc_107557F  +
lea eax [esi+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_10755BE  +
lea ecx [ebp-2Ch] +
call sub_101CA24  +
and dword ptr [ebp-4] 0 +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-64h] +
call sub_1073E94  +
push eax  +
push esi  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_10751D8  +
mov esi [eax] +
lea ecx [ebp-64h] +
call sub_1073D2F  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
lea eax [esi+28h] +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov edi ecx +
push dword ptr [ebp+8]  +
call sub_1073D64  +
mov esi eax +
cmp esi [edi+4] +
jz loc_10755FD  +
lea eax [esi+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1073D0F  +
pop ecx  +
pop ecx  +
test al al +
jz loc_107562F  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-30h] +
call sub_1073E70  +
and dword ptr [ebp-4] 0 +
push eax  +
push esi  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
call sub_107531E  +
mov esi [eax] +
push 0  +
push 1  +
lea ecx [ebp-30h] +
call sub_1012F94  +
lea eax [esi+28h] +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov edi ecx +
mov ebx [ebp+8] +
push ebx  +
call sub_1073BBF  +
mov esi eax +
cmp esi [edi+4] +
jz loc_1075664  +
mov eax [ebx] +
cmp eax [esi+0Ch] +
jge loc_10756A6  +
lea ecx [ebp-2Ch] +
call sub_101CA24  +
push eax  +
push dword ptr [ebp+8]  +
xor ebx ebx +
lea ecx [ebp-4Ch] +
mov [ebp-4] ebx +
call sub_1073ECB  +
push eax  +
push esi  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_1075464  +
mov esi [eax] +
push ebx  +
push 1  +
lea ecx [ebp-48h] +
call sub_1012F94  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
lea eax [esi+10h] +
call sub_1002061  +
retn 4  +
***
call sub_10020DC  +
mov edi [ebp+8] +
xor eax eax +
push 206h  +
mov [ebp-218h] ax +
xor esi esi +
lea eax [ebp-216h] +
push esi  +
push eax  +
mov ebx ecx +
mov [ebp-0E48h] edi +
call memset  +
add esp 0Ch +
lea eax [ebp-0E98h] +
push eax  +
lea eax [ebp-0E64h] +
push eax  +
lea eax [ebp-0E54h] +
push eax  +
lea eax [ebp-0E58h] +
push eax  +
lea eax [ebp-0E40h] +
push eax  +
lea eax [ebp-0E6Ch] +
push eax  +
lea eax [ebp-0E68h] +
push eax  +
lea eax [ebp-0E50h] +
push eax  +
push esi  +
lea eax [ebp-0E60h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
push edi  +
mov dword ptr [ebp-0E60h] 104h +
mov [ebp-0E50h] esi +
mov [ebp-0E68h] esi +
mov [ebp-0E6Ch] esi +
mov [ebp-0E40h] esi +
mov [ebp-0E58h] esi +
mov [ebp-0E54h] esi +
mov [ebp-0E64h] esi +
mov [ebp-0E3Ch] esi +
mov dword ptr [ebp-0E4Ch] 400h +
call ds:RegQueryInfoKeyW  +
cmp eax esi +
jz loc_107578C  +
mov [ebp-0E40h] esi +
cmp [ebp-0E40h] esi +
jz loc_10759BC  +
lea ecx [ebp-0E38h] +
mov dword ptr [ebp-0E44h] 4 +
call sub_101CA24  +
lea ecx [ebp-0E1Ch] +
mov [ebp-4] esi +
call sub_101CA24  +
mov byte ptr [ebp-4] 1 +
mov [ebp-0E3Ch] esi +
cmp [ebp-0E40h] esi +
jbe loc_1075912  +
mov edi ds:RegGetValueW +
push esi  +
push esi  +
push esi  +
xor eax eax +
push esi  +
mov [ebp-0E00h] ax +
lea eax [ebp-0E4Ch] +
push eax  +
lea eax [ebp-0E00h] +
push eax  +
push dword ptr [ebp-0E3Ch]  +
mov dword ptr [ebp-0E4Ch] 400h +
push dword ptr [ebp-0E48h]  +
call ds:RegEnumValueW  +
cmp eax esi +
jnz loc_10758FA  +
lea eax [ebp-0E00h] +
push eax  +
lea ecx [ebp-0E1Ch] +
call sub_10142F1  +
cmp dword ptr [ebp-0E04h] 8 +
mov eax [ebp-0E18h] +
mov dword ptr [ebp-0E44h] 4 +
jnb loc_1075847  +
lea eax [ebp-0E18h] +
lea ecx [ebp-0E44h] +
push ecx  +
lea ecx [ebp-0E5Ch] +
push ecx  +
push esi  +
push 10h  +
push eax  +
push offset word_100219C  +
push dword ptr [ebp-0E48h]  +
call edi  +
test eax eax +
jnz loc_1075883  +
lea eax [ebp-0E1Ch] +
push eax  +
lea ecx [ebx+54h] +
call sub_10755CE  +
mov ecx [ebp-0E5Ch] +
mov [eax] ecx +
jmp loc_10758FA  +
cmp dword ptr [ebp-0E04h] 8 +
mov eax [ebp-0E18h] +
mov dword ptr [ebp-0E44h] 3E8h +
jnb loc_10758A2  +
lea eax [ebp-0E18h] +
lea ecx [ebp-0E44h] +
push ecx  +
lea ecx [ebp-600h] +
push ecx  +
push esi  +
push 0FFFFh  +
push eax  +
push offset word_100219C  +
push dword ptr [ebp-0E48h]  +
call edi  +
test eax eax +
jnz loc_10758FA  +
lea eax [ebp-600h] +
push eax  +
lea ecx [ebp-0E38h] +
call sub_10142F1  +
lea eax [ebp-0E1Ch] +
push eax  +
lea ecx [ebx+48h] +
call sub_1075550  +
push 0FFFFFFFFh  +
push esi  +
lea ecx [ebp-0E38h] +
push ecx  +
mov ecx eax +
call sub_1014F52  +
inc dword ptr [ebp-0E3Ch]  +
mov eax [ebp-0E3Ch] +
cmp eax [ebp-0E40h] +
jb loc_10757D7  +
push offset aSavesystimelow  +
lea ecx [ebp-0E90h] +
call sub_10142C5  +
lea eax [ebp-0E90h] +
lea edi [ebx+54h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_10755CE  +
mov eax [eax] +
push esi  +
push 1  +
lea ecx [ebp-0E90h] +
mov [ebp-0E74h] eax +
mov byte ptr [ebp-4] 1 +
call sub_1012F94  +
push offset aSavesystimehig  +
lea ecx [ebp-0E90h] +
call sub_10142C5  +
lea eax [ebp-0E90h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 3 +
call sub_10755CE  +
mov eax [eax] +
xor edi edi +
push esi  +
inc edi  +
push edi  +
lea ecx [ebp-0E90h] +
mov [ebp-0E70h] eax +
call sub_1012F94  +
add ebx 38h +
push ebx  +
lea eax [ebp-0E74h] +
push eax  +
call ds:FileTimeToSystemTime  +
push esi  +
push edi  +
lea ecx [ebp-0E1Ch] +
mov [ebp-0E3Ch] edi +
call sub_1012F94  +
push esi  +
push edi  +
lea ecx [ebp-0E38h] +
call sub_1012F94  +
mov eax [ebp-0E3Ch] +
call sub_1002119  +
retn 4  +
***
call sub_10020DC  +
mov edi [ebp+8] +
mov esi ecx +
lea eax [esi+1Ch] +
push eax  +
lea eax [ebp-50h] +
push offset aSoftwareMicros  +
xor ebx ebx +
push eax  +
mov [ebp-30h] ebx +
call sub_1014ED6  +
push offset aRecovery  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
mov [ebp-4] ebx +
call sub_101F1BF  +
add esp 18h +
push ebx  +
push 1  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 2 +
call sub_1012F94  +
push edi  +
mov ecx esi +
call sub_101DE5A  +
push 0FFFFFFFFh  +
push ebx  +
push esi  +
lea ecx [ebp-2Ch] +
call sub_1014E3A  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1075A3B  +
lea eax [ebp-28h] +
lea ecx [ebp-34h] +
push ecx  +
xor edi edi +
inc edi  +
push edi  +
push ebx  +
push eax  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1075A6A  +
push dword ptr [ebp-34h]  +
mov ecx esi +
call sub_10756B6  +
push dword ptr [ebp-34h]  +
call ds:RegCloseKey  +
mov [ebp-30h] edi +
push ebx  +
push edi  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
mov eax [ebp-30h] +
call sub_1002119  +
retn 4  +
***
call sub_10020DC  +
lea eax [ebp-84h] +
push eax  +
mov esi ecx +
call sub_101DD2E  +
xor edi edi +
push offset word_100219C  +
mov ecx eax +
mov [ebp-4] edi +
call sub_1014FD3  +
mov ebx eax +
neg ebx  +
sbb bl bl +
or dword ptr [ebp-4] 0FFFFFFFFh +
push edi  +
push 1  +
lea ecx [ebp-84h] +
inc bl  +
call sub_1012F94  +
test bl bl +
jz loc_1075B2A  +
lea ecx [ebp-2Ch] +
call sub_101CA24  +
xor ebx ebx +
lea eax [ebp-3Ch] +
inc ebx  +
push eax  +
mov [ebp-4] ebx +
call ds:UuidCreate  +
test eax eax +
jnz loc_1075C38  +
lea eax [ebp-5Ch] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
call ds:UuidToStringW  +
test eax eax +
jnz loc_1075C38  +
push 0FFh  +
push dword ptr [ebp-5Ch]  +
mov ecx esi +
call sub_101431E  +
lea eax [ebp-5Ch] +
push eax  +
call ds:RpcStringFreeW  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push edi  +
push ebx  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
lea eax [esi+1Ch] +
push eax  +
lea eax [ebp-84h] +
push offset aSoftwareMicros  +
push eax  +
xor ebx ebx +
call sub_1014ED6  +
push offset aRecovery  +
push eax  +
lea eax [ebp-58h] +
push eax  +
mov dword ptr [ebp-4] 2 +
call sub_101F1BF  +
add esp 18h +
push edi  +
push 1  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 4 +
call sub_1012F94  +
push 0FFFFFFFFh  +
push edi  +
push esi  +
lea ecx [ebp-58h] +
call sub_1014E3A  +
cmp dword ptr [ebp-40h] 8 +
mov eax [ebp-54h] +
jnb loc_1075B84  +
lea eax [ebp-54h] +
push edi  +
lea ecx [ebp-64h] +
push ecx  +
push edi  +
push 20006h  +
push edi  +
push edi  +
push edi  +
push eax  +
push 80000001h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_1075D04  +
lea ebx [esi+38h] +
push ebx  +
call ds:GetSystemTime  +
lea eax [ebp-34h] +
push eax  +
push ebx  +
call ds:SystemTimeToFileTime  +
push offset aSavesystimelow  +
lea ecx [ebp-2Ch] +
call sub_10142C5  +
lea eax [ebp-2Ch] +
lea ebx [esi+54h] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 5 +
call sub_10755CE  +
mov ecx [ebp-34h] +
push edi  +
mov [eax] ecx +
push 1  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call sub_1012F94  +
push offset aSavesystimehig  +
lea ecx [ebp-2Ch] +
call sub_10142C5  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 6 +
call sub_10755CE  +
mov ecx [ebp-30h] +
push edi  +
mov [eax] ecx +
push 1  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call sub_1012F94  +
mov ecx [esi+58h] +
mov eax [ecx] +
mov [ebp-60h] eax +
cmp eax ecx +
jz loc_1075C79  +
add eax 0Ch +
cmp dword ptr [eax+18h] 8 +
jb loc_1075C49  +
mov ecx [eax+4] +
jmp loc_1075C4C  +
push edi  +
push ebx  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
xor eax eax +
jmp loc_1075D11  +
lea ecx [eax+4] +
push 4  +
mov [ebp-5Ch] ecx +
push eax  +
mov ecx ebx +
call sub_10755CE  +
push eax  +
push 4  +
push edi  +
push dword ptr [ebp-5Ch]  +
push dword ptr [ebp-64h]  +
call ds:RegSetValueExW  +
lea ecx [ebp-60h] +
call sub_1073B78  +
mov eax [ebp-60h] +
cmp eax [esi+58h] +
jnz loc_1075C2A  +
mov ecx [esi+4Ch] +
mov eax [ecx] +
mov [ebp-68h] eax +
cmp eax ecx +
jz loc_1075CF8  +
lea ebx [eax+0Ch] +
push ebx  +
lea ecx [esi+48h] +
call sub_1075550  +
cmp dword ptr [eax+18h] 8 +
jb loc_1075C9C  +
mov eax [eax+4] +
jmp loc_1075C9F  +
add eax 4 +
push ebx  +
lea ecx [esi+48h] +
mov [ebp-60h] eax +
call sub_1075550  +
cmp dword ptr [eax+18h] 8 +
jb loc_1075CB6  +
mov eax [eax+4] +
jmp loc_1075CB9  +
add eax 4 +
cmp dword ptr [ebx+18h] 8 +
mov [ebp-5Ch] eax +
jb loc_1075CC7  +
mov ebx [ebx+4] +
jmp loc_1075CCA  +
add ebx 4 +
push dword ptr [ebp-60h]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push dword ptr [ebp-5Ch]  +
push 1  +
push edi  +
push ebx  +
push dword ptr [ebp-64h]  +
call ds:RegSetValueExW  +
lea ecx [ebp-68h] +
call sub_1073C8A  +
mov eax [ebp-68h] +
cmp eax [esi+4Ch] +
jnz loc_1075C85  +
push dword ptr [ebp-64h]  +
call ds:RegCloseKey  +
xor ebx ebx +
inc ebx  +
push edi  +
push 1  +
lea ecx [ebp-58h] +
call sub_1012F94  +
mov eax ebx +
call sub_1002119  +
retn   +
***
call sub_100208C  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
mov edi offset aUnsaved +
push edi  +
lea ecx [ebp-34h] +
call sub_10142C5  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-18h] +
lea ebx [esi+54h] +
push eax  +
mov ecx ebx +
call sub_1073E26  +
mov eax [eax] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0  +
push 1  +
lea ecx [ebp-34h] +
mov [ebp-14h] eax +
call sub_1012F94  +
mov eax [ebp-14h] +
cmp eax [esi+58h] +
jz loc_1075DA0  +
push edi  +
lea ecx [ebp-50h] +
call sub_10142C5  +
xor esi esi +
lea eax [ebp-50h] +
inc esi  +
push eax  +
mov ecx ebx +
mov [ebp-4] esi +
call sub_10755CE  +
cmp [eax] esi +
push 0  +
push esi  +
lea ecx [ebp-50h] +
setz bl  +
call sub_1012F94  +
test bl bl +
jz loc_1075DA0  +
mov [ebp-10h] esi +
mov eax [ebp-10h] +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
mov edi offset aOriginalfilepa +
push edi  +
lea ecx [ebp-30h] +
call sub_10142C5  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-14h] +
lea ebx [esi+48h] +
push eax  +
mov ecx ebx +
call sub_10215A9  +
mov eax [eax] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0  +
push 1  +
lea ecx [ebp-30h] +
mov [ebp-10h] eax +
call sub_1012F94  +
mov eax [ebp-10h] +
cmp eax [esi+4Ch] +
jz loc_1075E31  +
push edi  +
lea ecx [ebp-4Ch] +
call sub_10142C5  +
xor esi esi +
lea eax [ebp-4Ch] +
inc esi  +
push eax  +
mov ecx ebx +
mov [ebp-4] esi +
call sub_1075550  +
mov ecx [ebp+8] +
push eax  +
call sub_1014F22  +
push 0  +
push esi  +
lea ecx [ebp-4Ch] +
call sub_1012F94  +
jmp loc_1075E3E  +
mov ecx [ebp+8] +
push offset word_100219C  +
call sub_10142C5  +
mov eax [ebp+8] +
call sub_1002061  +
retn 4  +
***
call sub_100208C  +
mov edi ecx +
mov ecx [ebp+8] +
xor esi esi +
push offset word_100219C  +
mov [ebp-4] esi +
mov [ebp-10h] ecx +
mov [ebp-1Ch] esi +
call sub_10142C5  +
mov [ebp-4] esi +
mov ebx offset aRecoveryfilepa +
inc esi  +
push ebx  +
lea ecx [ebp-3Ch] +
mov [ebp-1Ch] esi +
call sub_10142C5  +
lea eax [ebp-3Ch] +
push eax  +
lea eax [ebp-20h] +
lea ecx [edi+48h] +
push eax  +
mov [ebp-4] esi +
mov [ebp-18h] ecx +
call sub_10215A9  +
mov eax [eax] +
push 0  +
push esi  +
lea ecx [ebp-3Ch] +
mov [ebp-14h] eax +
mov byte ptr [ebp-4] 0 +
call sub_1012F94  +
mov eax [ebp-14h] +
cmp eax [edi+4Ch] +
jz loc_1075EEB  +
push ebx  +
lea ecx [ebp-3Ch] +
call sub_10142C5  +
mov ecx [ebp-18h] +
lea eax [ebp-3Ch] +
push eax  +
mov dword ptr [ebp-4] 2 +
call sub_1075550  +
mov ecx [ebp-10h] +
push eax  +
call sub_101DE5A  +
push 0  +
push esi  +
lea ecx [ebp-3Ch] +
call sub_1012F94  +
mov eax [ebp-10h] +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 48h +
call sub_1075550  +
push [ebp+arg_4]  +
mov ecx eax +
call sub_101DE5A  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 54h +
call sub_10755CE  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
pop ebp  +
retn 8  +
***
call sub_10020DC  +
and dword ptr [ebp-30h] 0 +
mov edi ecx +
mov esi offset aValid +
push esi  +
lea ecx [ebp-54h] +
call sub_10142C5  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-54h] +
push eax  +
lea eax [ebp-38h] +
lea ebx [edi+54h] +
push eax  +
mov ecx ebx +
call sub_1073E26  +
mov eax [eax] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0  +
push 1  +
lea ecx [ebp-54h] +
mov [ebp-34h] eax +
call sub_1012F94  +
mov eax [ebp-34h] +
cmp eax [edi+58h] +
jz loc_107602D  +
push esi  +
lea ecx [ebp-54h] +
call sub_10142C5  +
xor esi esi +
lea eax [ebp-54h] +
inc esi  +
push eax  +
mov ecx ebx +
mov [ebp-4] esi +
call sub_10755CE  +
cmp [eax] esi +
push 0  +
setz bl  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push esi  +
lea ecx [ebp-54h] +
call sub_1012F94  +
test bl bl +
jz loc_107602D  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx edi +
call sub_1075E4E  +
lea eax [ebp-2Ch] +
push offset word_100219C  +
push eax  +
mov dword ptr [ebp-4] 2 +
call sub_1073CED  +
pop ecx  +
pop ecx  +
test al al +
jz loc_1076022  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1075FF7  +
lea eax [ebp-28h] +
xor ecx ecx +
push ecx  +
push 80h  +
push 3  +
push ecx  +
push ecx  +
push 0C0000000h  +
push eax  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jz loc_1076022  +
push eax  +
call ds:CloseHandle  +
test eax eax +
jz loc_1076022  +
mov [ebp-30h] esi +
push 0  +
push esi  +
lea ecx [ebp-2Ch] +
call sub_1012F94  +
mov eax [ebp-30h] +
call sub_1002119  +
retn   +
***
call sub_10020DC  +
mov edi [ebp+8] +
xor eax eax +
push 206h  +
mov [ebp-418h] ax +
xor esi esi +
lea eax [ebp-416h] +
push esi  +
push eax  +
mov ebx ecx +
call memset  +
push 60h  +
mov dword ptr [ebp-448h] 104h +
mov [ebp-424h] esi +
mov [ebp-42Ch] esi +
mov [ebp-434h] esi +
mov [ebp-438h] esi +
mov [ebp-444h] esi +
mov [ebp-430h] esi +
mov [ebp-43Ch] esi +
call ??2@YAPAXI@Z  +
mov ecx eax +
add esp 10h +
mov [ebp-420h] ecx +
mov [ebp-4] esi +
cmp ecx esi +
jz loc_10760CA  +
add ebx 1Ch +
push ebx  +
call sub_101C9BF  +
mov [ebp-41Ch] eax +
jmp loc_10760D0  +
mov [ebp-41Ch] esi +
lea eax [ebp-45Ch] +
push eax  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-43Ch] +
push eax  +
lea eax [ebp-430h] +
push eax  +
lea eax [ebp-444h] +
push eax  +
lea eax [ebp-438h] +
push eax  +
lea eax [ebp-434h] +
push eax  +
lea eax [ebp-42Ch] +
push eax  +
lea eax [ebp-424h] +
push eax  +
push esi  +
lea eax [ebp-448h] +
push eax  +
lea eax [ebp-418h] +
push eax  +
push edi  +
xor ebx ebx +
call ds:RegQueryInfoKeyW  +
cmp eax esi +
jnz loc_1076272  +
cmp [ebp-424h] esi +
jz loc_107626F  +
lea ecx [ebp-454h] +
call sub_101DFA4  +
mov dword ptr [ebp-4] 1 +
mov [ebp-428h] esi +
cmp [ebp-424h] esi +
jbe loc_1076226  +
lea eax [ebp-45Ch] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp-440h] +
push eax  +
lea eax [ebp-210h] +
push eax  +
push dword ptr [ebp-428h]  +
mov dword ptr [ebp-440h] 0FFh +
push edi  +
call ds:RegEnumKeyExW  +
cmp eax esi +
jnz loc_107620E  +
lea eax [ebp-210h] +
push eax  +
lea ecx [ebp-478h] +
call sub_10142C5  +
mov ecx [ebp-41Ch] +
lea eax [ebp-478h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_10759CF  +
push esi  +
push 1  +
lea ecx [ebp-478h] +
mov byte ptr [ebp-4] 1 +
call sub_1012F94  +
mov ecx [ebp-41Ch] +
call sub_1075F3C  +
test eax eax +
jz loc_10761E7  +
mov ecx [ebp-41Ch] +
call sub_107397C  +
test eax eax +
jz loc_107620E  +
lea eax [ebp-420h] +
mov [ebp-420h] ebx +
push eax  +
lea ecx [ebp-454h] +
inc ebx  +
call sub_107563F  +
lea ecx [ebp-210h] +
push ecx  +
mov ecx eax +
call sub_10142F1  +
inc dword ptr [ebp-428h]  +
mov eax [ebp-428h] +
cmp eax [ebp-424h] +
jb loc_107615C  +
xor edi edi +
cmp ebx esi +
jbe loc_1076260  +
lea eax [ebp-420h] +
push eax  +
lea ecx [ebp-454h] +
mov [ebp-420h] edi +
call sub_107563F  +
mov ecx [ebp-41Ch] +
push eax  +
call sub_10759CF  +
mov ecx [ebp-41Ch] +
call sub_10214A1  +
inc edi  +
cmp edi ebx +
jb loc_107622C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-454h] +
call sub_1074FBC  +
xor ebx ebx +
inc ebx  +
mov ecx [ebp-41Ch] +
cmp ecx esi +
jz loc_1076283  +
push 1  +
call sub_10201BE  +
mov eax ebx +
call sub_1002119  +
retn 4  +
***
mov eax ecx +
or dword ptr [eax+0Ch] 0FFFFFFFFh +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+10h] ecx +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
test eax eax +
jz loc_10762C1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+8] 0 +
mov eax [esi] +
test eax eax +
jz loc_10762D0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
mov eax [esi+4] +
test eax eax +
jz loc_10762E1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
mov edx [ebp+arg_4] +
push dword ptr [edx]  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jnz loc_1076345  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+pvarg] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
test esi esi +
jnz loc_1076345  +
push dword ptr [ebp+pvarg.anonymous_0+8]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
call wcscpy_s  +
add esp 0Ch +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1076352  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov ebx ecx +
mov esi 80004005h +
test eax eax +
jz loc_10764D5  +
mov ecx [eax] +
and [ebp+var_4C] 0 +
lea edx [ebp+var_4C] +
push edx  +
push eax  +
call dword ptr [ecx+44h]  +
mov esi eax +
test esi esi +
jnz loc_10764CE  +
mov eax [ebp+arg_8] +
sub eax esi +
jz loc_1076475  +
dec eax  +
jz loc_107643A  +
dec eax  +
jz loc_10763FC  +
dec eax  +
jnz loc_10764BF  +
push offset aFontface  +
call ds:SysAllocString  +
mov [ebp+var_48] eax +
push 20h  +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
push [ebp+var_4C]  +
mov ecx ebx +
call sub_10762E8  +
mov esi eax +
test esi esi +
jnz loc_10764B0  +
lea eax [ebp+var_44] +
push eax  +
add edi 8 +
push 20h  +
push edi  +
call wcscpy_s  +
jmp loc_10764AD  +
push offset aSize  +
call ds:SysAllocString  +
mov [ebp+var_48] eax +
push 20h  +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
push [ebp+var_4C]  +
mov ecx ebx +
call sub_10762E8  +
mov esi eax +
test esi esi +
jnz loc_10764B0  +
push 0Ah  +
push eax  +
lea eax [ebp+var_44] +
push eax  +
call ds:wcstoul  +
mov [edi+4] eax +
jmp loc_10764AD  +
push offset aSublangid  +
call ds:SysAllocString  +
mov [ebp+var_48] eax +
push 20h  +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
push [ebp+var_4C]  +
mov ecx ebx +
call sub_10762E8  +
mov esi eax +
test esi esi +
jnz loc_10764B0  +
push 10h  +
push eax  +
lea eax [ebp+var_44] +
push eax  +
call ds:wcstoul  +
mov [edi+2] ax +
jmp loc_10764AD  +
push offset aPrimarylangid  +
call ds:SysAllocString  +
mov [ebp+var_48] eax +
push 20h  +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
push [ebp+var_4C]  +
mov ecx ebx +
call sub_10762E8  +
mov esi eax +
test esi esi +
jnz loc_10764B0  +
push 10h  +
push eax  +
lea eax [ebp+var_44] +
push eax  +
call ds:wcstoul  +
mov [edi] ax +
add esp 0Ch +
cmp [ebp+var_48] 0 +
jz loc_10764BF  +
push [ebp+var_48]  +
call ds:SysFreeString  +
mov eax [ebp+var_4C] +
test eax eax +
jz loc_10764D5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10764D5  +
mov ecx ebx +
call sub_10762AB  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
mov ecx [esi+0Ch] +
push edi  +
xor edi edi +
cmp ecx [esi+10h] +
mov [ebp+var_C] 1 +
jl loc_1076563  +
mov [ebp+var_C] edi +
mov [esi+0Ch] edi +
jmp loc_10765FE  +
mov eax [esi+8] +
push ebx  +
lea ebx [ebp+var_8] +
push ebx  +
push ecx  +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
mov edx [eax] +
push eax  +
call dword ptr [edx+1Ch]  +
cmp eax edi +
jnz loc_10765D3  +
mov ebx [ebp+arg_0] +
push edi  +
push ebx  +
push [ebp+var_8]  +
mov ecx esi +
call sub_107635E  +
cmp eax edi +
jnz loc_10765D3  +
push 1  +
push ebx  +
push [ebp+var_8]  +
mov ecx esi +
call sub_107635E  +
cmp eax edi +
jnz loc_10765D3  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+34h]  +
cmp eax edi +
jnz loc_10765D3  +
push 2  +
push ebx  +
push [ebp+var_4]  +
mov ecx esi +
call sub_107635E  +
cmp eax edi +
jnz loc_10765D3  +
push 3  +
push ebx  +
push [ebp+var_4]  +
mov ecx esi +
call sub_107635E  +
cmp eax edi +
jz loc_10765DD  +
mov ecx esi +
mov [ebp+var_C] edi +
call sub_10762AB  +
mov eax [ebp+var_4] +
pop ebx  +
cmp eax edi +
jz loc_10765EE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] edi +
mov eax [ebp+var_8] +
cmp eax edi +
jz loc_10765FB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [esi+0Ch]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
push ebx  +
push offset riid  +
push 1  +
push 0  +
push offset stru_107677C  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jl loc_1076758  +
mov eax [ebx] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+0FCh]  +
mov esi eax +
test esi esi +
jnz loc_1076758  +
mov eax [ebx] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+110h]  +
mov esi eax +
test esi esi +
jnz loc_1076758  +
mov eax [ebx] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+118h]  +
mov esi eax +
test esi esi +
jnz loc_1076758  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
push 0Dh  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10766A7  +
mov ecx [eax] +
lea edx [ebp+pvarg.anonymous_0+8] +
push edx  +
push offset dword_1010AB4  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
jmp loc_10766AC  +
mov esi 80004005h +
test esi esi +
jnz loc_1076739  +
mov eax [ebx] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+0E8h]  +
mov esi eax +
test esi esi +
jnz loc_1076739  +
mov eax [ebx] +
mov ecx [eax] +
lea edi [ebx+4] +
push edi  +
push eax  +
call dword ptr [ecx+0B4h]  +
mov esi eax +
test esi esi +
jnz loc_1076739  +
push offset aLanguage  +
call ds:SysAllocString  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_1076725  +
mov eax [edi] +
mov ecx [eax] +
lea edi [ebx+8] +
push edi  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+0C8h]  +
mov esi eax +
test esi esi +
jnz loc_107672A  +
mov edi [edi] +
mov eax [edi] +
lea ecx [ebx+10h] +
push ecx  +
push edi  +
call dword ptr [eax+20h]  +
and [ebx+0Ch] esi +
jmp loc_107672A  +
mov esi 8007000Eh +
cmp [ebp+arg_0] 0 +
jz loc_1076739  +
push [ebp+arg_0]  +
call ds:SysFreeString  +
mov eax dword ptr [ebp+pvarg.anonymous_0+8] +
test eax eax +
jz loc_107674A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp+pvarg.anonymous_0+8] 0 +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
test esi esi +
jz loc_107675F  +
mov ecx ebx +
call sub_10762AB  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_107660C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_C] 0 +
jz loc_10767C8  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
mov [ebp+var_4] eax +
jmp loc_10767E1  +
mov ecx [ebp+arg_14] +
test ecx ecx +
jz loc_10767E1  +
mov eax [ecx] +
lea edx [ebp+var_4] +
push edx  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
call dword ptr [eax+0Ch]  +
mov eax [ebp+var_4] +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
push esi  +
mov [ebp+var_8] esi +
call ds:CreateCompatibleDC  +
mov [ebp+var_4] eax +
cmp eax esi +
jz loc_1076876  +
mov eax [ebp+arg_0] +
push ebx  +
lea ebx [eax+1Ah] +
movzx eax byte ptr [eax+18h] +
push ebx  +
push esi  +
push esi  +
push esi  +
push esi  +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call ds:CreateFontW  +
mov [ebp+var_C] eax +
cmp eax esi +
jz loc_107686C  +
push edi  +
mov edi ds:SelectObject +
push eax  +
push [ebp+var_4]  +
call edi  +
mov [ebp+arg_0] eax +
cmp eax esi +
jz loc_1076862  +
push ebx  +
push 20h  +
push [ebp+var_4]  +
call ds:GetTextFaceW  +
test eax eax +
jz loc_107685A  +
mov [ebp+var_8] 1 +
push [ebp+arg_0]  +
push [ebp+var_4]  +
call edi  +
push [ebp+var_C]  +
call ds:DeleteObject  +
pop edi  +
push [ebp+var_4]  +
call ds:DeleteDC  +
pop ebx  +
mov eax [ebp+var_8] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C8h +
mov eax dword_108A1E0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
and [ebp+var_C8] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+var_C4] eax +
lea eax [ebp+var_C0] +
push eax  +
mov ecx edi +
call sub_107653B  +
test eax eax +
jz loc_10769C0  +
push 74h  +
pop esi  +
push esi  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push [ebp+var_C4]  +
lea eax [ebp+lParam] +
push ebx  +
push dword ptr [ebp+arg_0]  +
mov ecx edi +
push eax  +
push 0  +
push 43Ah  +
mov [ebp+lParam] esi +
call sub_10767A1  +
mov eax [ebp+var_C0+2] +
or [ebp+var_74] 2000000h +
or [ebp+var_74] 80000000h +
or [ebp+var_74] 20000000h +
shl eax 0Ah +
or eax [ebp+var_C0] +
movzx esi ax +
movzx eax si +
mov [ebp+var_14] eax +
mov eax [ebp+var_BC] +
mov [ebp+var_6C] eax +
lea eax [ebp+var_B8] +
push eax  +
push 20h  +
lea eax [ebp+var_5E] +
push eax  +
call sub_102F4F0  +
push 0  +
call ds:GetKeyboardLayout  +
cmp [ebp+var_C8] 0 +
movzx eax ax +
jnz loc_107699F  +
cmp ax si +
jz loc_107696E  +
xor ecx ecx +
cmp cx word ptr [ebp+var_C0+2] +
jnz loc_107699F  +
xor eax esi +
test eax 3FFh +
jz loc_1076978  +
jmp loc_107699F  +
mov [ebp+var_C8] 1 +
lea eax [ebp+lParam] +
push eax  +
mov ecx edi +
call sub_10767ED  +
push [ebp+var_C4]  +
lea eax [ebp+lParam] +
push ebx  +
push dword ptr [ebp+arg_0]  +
mov ecx edi +
push eax  +
push 0  +
push 444h  +
call sub_10767A1  +
push [ebp+var_C4]  +
lea eax [ebp+lParam] +
push ebx  +
push dword ptr [ebp+arg_0]  +
mov ecx edi +
push eax  +
push 10h  +
push 444h  +
call sub_10767A1  +
jmp loc_10768B0  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100207A  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
push 1  +
call sub_1076883  +
pop ebp  +
retn 4  +
***
mov eax offset __imp_GdipCloneBrush +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipCloneImage +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipCreateImageAttributes +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDisposeImageAttributes +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetTextureTransform +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipTranslateTextureTransform +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetImageAttributesColorMatrix +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDrawImagePointsI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipCreateBitmapFromFileICM +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetImageDecodersSize +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetImageDecoders +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipCreateBitmapFromStreamICM +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipSetClipRegion +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipCreateRegion +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipCreateRegionPath +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipAddPathLine2I +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipAddPathBezierI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipAddPathEllipseI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetPointCount +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetPathPointsI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipClonePath +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDrawLineI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDrawEllipseI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipDrawPolygonI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipFillPolygonI +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipTransformMatrixPoints +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipVectorTransformMatrixPoints +
jmp loc_100ABE3  +
***
mov eax offset __imp_GdipGetRegionBoundsI +
jmp loc_100ABE3  +
***
jmp ds:?GetRuntimeClass@CControlBar@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CCmdTarget@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CStatic@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CSliderCtrl@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CButton@@UBEPAUCRuntimeClass@@XZ  +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
push edi  +
mov esi ecx +
call sub_10786C2  +
mov dword ptr [esi] offset off_1008D34 +
mov eax [edi+0C0h] +
mov [esi+0C0h] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
lea ecx [ebp-10h] +
call sub_100C68F  +
mov edi [ebp+8] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor al al +
pop esi  +
leave   +
retn 8  +
***
retn 4  +
***
mov dword ptr [esi] offset off_1008E1C +
call sub_103AB5C  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
push eax  +
push dword ptr [ecx+0A0h]  +
call sub_100E79E  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_103AE9D  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
mov dword ptr [esi] offset off_1008E1C +
call sub_103AB5C  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
jmp loc_1076E8D  +
mov ecx [eax] +
mov edx [ebp+arg_C] +
mov [edx] ecx +
mov eax [eax+4] +
mov ecx [ebp+arg_C] +
mov [ecx+4] eax +
mov eax [ebp+arg_4] +
add [ebp+arg_C] 8 +
add eax 8 +
mov [ebp+arg_4] eax +
cmp eax [ebp+arg_8] +
jnz loc_1076E70  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_8] +
cmp ecx [ebp+arg_4] +
jz loc_1076EC6  +
mov edx [ecx] +
mov [eax] edx +
mov edx [ecx+4] +
mov [eax+4] edx +
add eax 8 +
add ecx 8 +
mov [ebp+arg_0] ecx +
jmp loc_1076EAC  +
pop ebp  +
retn   +
***
call sub_100208C  +
mov esi ecx +
push dword ptr [esi+9Ch]  +
lea ecx [ebp-14h] +
push dword ptr [esi+98h]  +
call sub_100C6CD  +
push eax  +
push dword ptr [esi+94h]  +
lea ecx [ebp-1Ch] +
push dword ptr [esi+90h]  +
call sub_100C6CD  +
push eax  +
lea ecx [ebp-30h] +
call sub_102DFFB  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+8]  +
lea ecx [ebp-30h] +
call sub_1039F32  +
mov eax [ebp+8] +
call sub_1002061  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1076E66  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
jmp loc_1076F7B  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
call sub_100ED32  +
add [ebp+arg_8] 8 +
add [ebp+arg_0] 8 +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnz loc_1076F68  +
mov eax [ebp+arg_8] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1076EA1  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+3Ch] +
mov eax [esi+44h] +
lea eax [ecx+eax+1] +
mov ecx [esi+40h] +
cdq   +
sub eax edx +
push edi  +
mov edi eax +
mov eax [esi+48h] +
lea eax [ecx+eax+1] +
mov ecx [esi+0D8h] +
cdq   +
sub eax edx +
mov edx [esi+0D4h] +
mov ebx eax +
mov eax [esi+0C4h] +
push eax  +
push ecx  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
sar edi 1 +
sar ebx 1 +
call sub_1076F2F  +
mov eax [esi+0C4h] +
add esp 10h +
lea ecx [esi+0C8h] +
jmp loc_107701F  +
sub [eax] edi +
sub [eax+4] ebx +
add eax 8 +
cmp eax [ecx] +
jnz loc_1077017  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx+0D4h] +
mov edx [eax] +
push esi  +
mov esi [eax+4] +
add eax 8 +
mov [ebp+xRight] edx +
mov [ebp+yTop] esi +
cmp eax [ecx+0D8h] +
jz loc_1077084  +
push edi  +
mov edi [eax] +
cmp edi edx +
jge loc_107705A  +
mov edx edi +
mov edi [eax+4] +
cmp edi [ebp+yTop] +
jge loc_1077065  +
mov [ebp+yTop] edi +
mov edi [eax] +
cmp edi [ebp+xRight] +
jle loc_107706F  +
mov [ebp+xRight] edi +
mov edi [eax+4] +
cmp edi esi +
jle loc_1077078  +
mov esi edi +
add eax 8 +
cmp eax [ecx+0D8h] +
jnz loc_1077052  +
pop edi  +
push esi  +
push [ebp+xRight]  +
add ecx 3Ch +
push [ebp+yTop]  +
push edx  +
push ecx  +
call ds:SetRect  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx+0C4h] +
mov edx [eax] +
push esi  +
mov esi [eax+4] +
add eax 8 +
mov [ebp+xRight] edx +
mov [ebp+yTop] esi +
cmp eax [ecx+0C8h] +
jz loc_10770F5  +
push edi  +
mov edi [eax] +
cmp edi edx +
jge loc_10770CB  +
mov edx edi +
mov edi [eax+4] +
cmp edi [ebp+yTop] +
jge loc_10770D6  +
mov [ebp+yTop] edi +
mov edi [eax] +
cmp edi [ebp+xRight] +
jle loc_10770E0  +
mov [ebp+xRight] edi +
mov edi [eax+4] +
cmp edi esi +
jle loc_10770E9  +
mov esi edi +
add eax 8 +
cmp eax [ecx+0C8h] +
jnz loc_10770C3  +
pop edi  +
push esi  +
push [ebp+xRight]  +
add ecx 90h +
push [ebp+yTop]  +
push edx  +
push ecx  +
call ds:SetRect  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1076F61  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_107702D  +
mov ecx esi +
call sub_1076FBB  +
mov ecx esi +
call sub_107709E  +
mov ecx esi +
call sub_1078325  +
mov ecx esi +
pop esi  +
jmp sub_1039E3F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx [edi] +
mov esi ecx +
lea ecx [esi+0D0h] +
call sub_100CA8E  +
cmp eax 2 +
jbe loc_10771A6  +
mov eax [esi+0D4h] +
cmp [eax] ebx +
jnz loc_10771A6  +
mov ecx [edi+4] +
cmp [eax+4] ecx +
jnz loc_10771A6  +
mov byte ptr [esi+0B8h] 1 +
mov ecx [edi+8] +
mov edx [edi] +
mov eax [esi+0D4h] +
mov [eax+ecx*8] edx +
mov edx [edi+4] +
mov [eax+ecx*8+4] edx +
mov ecx esi +
call sub_1077140  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
mov [ebp+var_8] 14h +
mov [ebp+var_4] esi +
call sub_100DD20  +
pop edi  +
pop esi  +
mov al 1 +
pop ebx  +
leave   +
retn 4  +
***
call sub_1002370  +
mov esi ecx +
mov edi [ebp+10h] +
sub edi [ebp+0Ch] +
sar edi 3 +
call sub_100CADB  +
mov [ebp-14h] eax +
test edi edi +
jz loc_107735D  +
mov ecx esi +
call sub_100CA8E  +
mov ecx 1FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jnb loc_1077225  +
call loc_1058901  +
add eax edi +
cmp [ebp-14h] eax +
jnb loc_10772D7  +
mov edx [ebp-14h] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp-14h] +
jnb loc_1077242  +
and dword ptr [ebp-14h] 0 +
jmp loc_1077245  +
add [ebp-14h] edx +
cmp [ebp-14h] eax +
jnb loc_107724D  +
mov [ebp-14h] eax +
push 0  +
push dword ptr [ebp-14h]  +
call sub_100CAF0  +
and dword ptr [ebp-4] 0 +
mov ebx eax +
mov eax [esi+4] +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp-18h] ebx +
push eax  +
call sub_100F082  +
push esi  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1077112  +
mov ecx [esi+8] +
push esi  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
call sub_100F082  +
mov ecx esi +
call sub_100CA8E  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_10772AE  +
mov ecx [esi+8] +
jmp loc_10772A1  +
add eax 8 +
cmp eax ecx +
jnz loc_107729E  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp-14h] +
lea eax [ebx+eax*8] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*8] +
mov [esi+8] eax +
mov [esi+4] ebx +
jmp loc_107735D  +
push dword ptr [ebp-18h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
mov ebx [esi+8] +
mov eax [ebp+8] +
mov ecx ebx +
sub ecx eax +
sar ecx 3 +
push esi  +
cmp ecx edi +
jnb loc_107732E  +
shl edi 3 +
lea ecx [edi+eax] +
push ecx  +
push ebx  +
push eax  +
call sub_100F082  +
mov eax [esi+8] +
mov edx [ebp+0Ch] +
mov ecx eax +
sub ecx [ebp+8] +
push esi  +
push eax  +
push dword ptr [ebp+10h]  +
sar ecx 3 +
lea ebx [edx+ecx*8] +
push ebx  +
mov dword ptr [ebp-4] 2 +
call sub_1077112  +
push dword ptr [ebp+8]  +
add [esi+8] edi +
push ebx  +
push dword ptr [ebp+0Ch]  +
call sub_1076F8F  +
add esp 0Ch +
jmp loc_107735D  +
mov eax edi +
push ebx  +
shl eax 3 +
mov edi ebx +
sub edi eax +
push ebx  +
push edi  +
call sub_100F082  +
push ebx  +
push edi  +
push dword ptr [ebp+8]  +
mov [esi+8] eax +
call sub_10780FD  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1076F8F  +
add esp 18h +
call sub_1002061  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10771E5  +
pop ebp  +
retn 0Ch  +
***
call sub_1002370  +
mov ecx [ebp-14h] +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [esi+4] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1020CA5  +
push [ebp+arg_4]  +
mov eax [esi+4] +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_107736A  +
pop esi  +
leave   +
retn 0Ch  +
***
call sub_100208C  +
mov ebx ecx +
mov [ebp-10h] ebx +
call sub_103AEEC  +
xor esi esi +
lea ecx [ebx+0C0h] +
push esi  +
mov [ebp-4] esi +
mov dword ptr [ebx] offset off_1008F34 +
call sub_100CB64  +
push esi  +
lea ecx [ebx+0D0h] +
mov byte ptr [ebp-4] 1 +
call sub_100CB64  +
lea esi [ebx+3Ch] +
push esi  +
call ds:SetRectEmpty  +
lea edi [ebx+90h] +
movs   +
movs   +
movs   +
movs   +
mov eax ebx +
call sub_1002061  +
retn   +
***
add ecx 0D0h +
call sub_100CA8E  +
dec eax  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+0D0h] +
call sub_100CAB5  +
lea ecx [esi+0C0h] +
call sub_100CAB5  +
mov ecx esi +
pop esi  +
jmp sub_103A4A4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1077491  +
test byte ptr [ebp+8] 1 +
jz loc_10774D3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
lea edi [esi+0C0h] +
mov ecx edi +
call sub_100CA8E  +
push edi  +
lea ecx [ebp-1Ch] +
mov ebx eax +
call sub_1077389  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1038F9B  +
push ebx  +
push dword ptr [ebp-18h]  +
mov esi eax +
mov ecx esi +
call sub_1039BC2  +
push esi  +
call sub_1030B8B  +
mov ecx [ebp+8] +
push ebx  +
push dword ptr [ebp-18h]  +
call sub_106D26C  +
lea ecx [ebp-1Ch] +
call sub_100CAB5  +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10773EA  +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov edi ecx +
mov [ebp-10h] edi +
mov esi [ebp+8] +
push esi  +
call sub_10786C2  +
and dword ptr [ebp-4] 0 +
lea ebx [edi+0C0h] +
push 0  +
mov ecx ebx +
mov dword ptr [edi] offset off_1008F34 +
call sub_100CB64  +
lea ecx [edi+0D0h] +
push 0  +
mov byte ptr [ebp-4] 1 +
call sub_100CB64  +
mov eax [esi+0C8h] +
mov ecx [esi+0C4h] +
push eax  +
push ecx  +
mov ecx ebx +
mov byte ptr [ebp-4] 2 +
call sub_1077544  +
mov eax [esi+0D8h] +
mov esi [esi+0D4h] +
push eax  +
push esi  +
lea ecx [edi+0D0h] +
call sub_1077544  +
mov eax edi +
call sub_1002061  +
retn 4  +
***
push 4  +
mov eax offset loc_107F5D4 +
call sub_100208C  +
mov esi ecx +
push 0E0h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1077612  +
push esi  +
call sub_1077560  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+0D0h] +
call sub_100EDE4  +
push [ebp+arg_0]  +
lea ecx [esi+0C0h] +
call sub_100EDE4  +
mov ecx esi +
call sub_1077140  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
mov [ebp+var_8] 14h +
mov [ebp+var_4] esi +
call sub_100DD20  +
mov al 1 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+3Ch] +
mov eax [ecx+44h] +
lea eax [eax+edx+1] +
cdq   +
sub eax edx +
mov edx [ecx+40h] +
push esi  +
mov esi eax +
mov eax [ecx+48h] +
lea eax [eax+edx+1] +
cdq   +
sub eax edx +
mov edx [ebp+arg_0] +
sar esi 1 +
sar eax 1 +
test edx edx +
jl loc_10776B6  +
add ecx 0C0h +
inc edx  +
push edi  +
mov edi [ecx+20h] +
sub edi esi +
mov [ecx] edi +
mov edi [ecx+24h] +
sub edi eax +
mov [ecx+4] edi +
add ecx 8 +
dec edx  +
jnz loc_10776A0  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ecx+100h] +
cmp eax 1 +
push esi  +
mov esi [ecx+0C0h] +
push edi  +
mov edi [ecx+0C4h] +
mov [ebp+xRight] esi +
mov [ebp+yTop] edi +
jle loc_107771F  +
dec eax  +
lea edx [ecx+0CCh] +
mov [ebp+var_C] eax +
push ebx  +
mov eax [edx-4] +
cmp eax esi +
jge loc_10776FB  +
mov esi eax +
mov eax [edx] +
cmp eax [ebp+yTop] +
jge loc_1077705  +
mov [ebp+yTop] eax +
mov ebx [edx-4] +
cmp ebx [ebp+xRight] +
jle loc_1077710  +
mov [ebp+xRight] ebx +
cmp eax edi +
jle loc_1077716  +
mov edi eax +
add edx 8 +
dec [ebp+var_C]  +
jnz loc_10776F2  +
pop ebx  +
push edi  +
push [ebp+xRight]  +
add ecx 90h +
push [ebp+yTop]  +
push esi  +
push ecx  +
call ds:SetRect  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ecx+100h] +
cmp eax 1 +
push esi  +
mov esi [ecx+0E0h] +
push edi  +
mov edi [ecx+0E4h] +
mov [ebp+xRight] esi +
mov [ebp+yTop] edi +
jle loc_107779C  +
dec eax  +
lea edx [ecx+0ECh] +
mov [ebp+var_C] eax +
push ebx  +
mov eax [edx-4] +
cmp eax esi +
jge loc_1077778  +
mov esi eax +
mov eax [edx] +
cmp eax [ebp+yTop] +
jge loc_1077782  +
mov [ebp+yTop] eax +
mov ebx [edx-4] +
cmp ebx [ebp+xRight] +
jle loc_107778D  +
mov [ebp+xRight] ebx +
cmp eax edi +
jle loc_1077793  +
mov edi eax +
add edx 8 +
dec [ebp+var_C]  +
jnz loc_107776F  +
pop ebx  +
push edi  +
push [ebp+xRight]  +
add ecx 3Ch +
push [ebp+yTop]  +
push esi  +
push ecx  +
call ds:SetRect  +
pop edi  +
pop esi  +
leave   +
retn   +
***
call sub_100208C  +
mov ebx ecx +
mov [ebp-10h] ebx +
call sub_103AEEC  +
and dword ptr [ebp-4] 0 +
push 3  +
mov dword ptr [ebx] offset off_1009074 +
lea esi [ebx+0C0h] +
pop edi  +
mov ecx esi +
call sub_102A69D  +
add esi 8 +
dec edi  +
jns loc_10777E0  +
push 3  +
lea esi [ebx+0E0h] +
pop edi  +
mov ecx esi +
call sub_102A69D  +
add esi 8 +
dec edi  +
jns loc_10777F6  +
and dword ptr [ebx+100h] 0 +
lea esi [ebx+3Ch] +
push esi  +
call ds:SetRectEmpty  +
lea edi [ebx+90h] +
movs   +
movs   +
movs   +
movs   +
mov eax ebx +
call sub_1002061  +
retn   +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-14h] esi +
mov edi [ebp+8] +
push edi  +
call sub_10786C2  +
and dword ptr [ebp-4] 0 +
lea ebx [esi+0C0h] +
mov dword ptr [esi] offset off_1009074 +
mov [ebp+8] ebx +
mov dword ptr [ebp-10h] 3 +
mov ecx [ebp+8] +
call sub_102A69D  +
add dword ptr [ebp+8] 8 +
dec dword ptr [ebp-10h]  +
jns loc_107786C  +
lea eax [esi+0E0h] +
mov [ebp+8] eax +
mov dword ptr [ebp-10h] 3 +
mov ecx [ebp+8] +
call sub_102A69D  +
add dword ptr [ebp+8] 8 +
dec dword ptr [ebp-10h]  +
jns loc_107788D  +
mov eax [edi+100h] +
mov ecx edi +
push 4  +
mov [esi+100h] eax +
mov eax ebx +
sub ecx esi +
pop edx  +
mov edi [ecx+eax] +
mov [eax] edi +
mov edi [ecx+eax+4] +
mov [eax+4] edi +
add eax 8 +
dec edx  +
jnz loc_10778B3  +
push 4  +
lea eax [esi+0E0h] +
pop edx  +
mov edi [ecx+eax] +
mov [eax] edi +
mov edi [ecx+eax+4] +
mov [eax+4] edi +
add eax 8 +
dec edx  +
jnz loc_10778CE  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
push 4  +
mov eax offset loc_107F5D4 +
call sub_100208C  +
mov esi ecx +
push 108h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_107791C  +
push esi  +
call sub_1077838  +
call sub_1002061  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
mov [esi+edi*8+0E4h] ecx +
mov [esi+edi*8+0C4h] ecx +
mov ecx esi +
mov [esi+edi*8+0E0h] eax +
mov [esi+edi*8+0C0h] eax +
call sub_107773D  +
push edi  +
mov ecx esi +
call sub_107766B  +
mov ecx esi +
call sub_10776C0  +
mov ecx esi +
call sub_1078325  +
test edi edi +
jnz loc_10779BE  +
mov eax [esi+0C0h] +
mov [esi+0D8h] eax +
mov eax [esi+0C4h] +
mov [esi+0DCh] eax +
mov eax [esi+0C0h] +
mov [esi+0D0h] eax +
mov eax [esi+0C4h] +
mov [esi+0D4h] eax +
mov eax [esi+0C0h] +
mov [esi+0C8h] eax +
mov eax [esi+0C4h] +
mov [esi+0CCh] eax +
cmp edi 1 +
jnz loc_10779ED  +
lea eax [esi+0C8h] +
mov ecx [eax] +
mov [esi+0D8h] ecx +
mov ecx [eax+4] +
mov [esi+0DCh] ecx +
mov ecx [eax] +
mov eax [eax+4] +
mov [esi+0D0h] ecx +
mov [esi+0D4h] eax +
jmp loc_1077A0A  +
cmp edi 2 +
jnz loc_1077A0A  +
mov eax [esi+0D0h] +
mov [esi+0D8h] eax +
mov eax [esi+0D4h] +
mov [esi+0DCh] eax +
mov ecx esi +
call sub_1039E3F  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax+8]  +
mov esi ecx +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_1077927  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
mov [ebp+var_8] 14h +
mov [ebp+var_4] esi +
call sub_100DD20  +
mov al 1 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+100h] +
push dword ptr [esi]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_1077927  +
inc dword ptr [esi]  +
lea eax [ebp+var_8] +
push eax  +
mov ecx edi +
mov [ebp+var_8] 14h +
mov [ebp+var_4] edi +
call sub_100DD20  +
pop edi  +
mov al 1 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax+4]  +
mov esi ecx +
lea ecx [esi+70h] +
call sub_100C009  +
mov ecx esi +
call sub_103AB5C  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
mov [ebp+var_8] 14h +
mov [ebp+var_4] esi +
call sub_100DD20  +
mov al 1 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov [esi+24h] ecx +
mov eax [eax+8] +
and dword ptr [esi+28h] 0 +
mov ecx esi +
mov [esi+2Ch] eax +
call sub_103AB5C  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
mov [ebp+var_8] 14h +
mov [ebp+var_4] esi +
call sub_100DD20  +
mov al 1 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
push 3  +
mov ebx ecx +
lea esi [ebp+var_20] +
pop edi  +
mov ecx esi +
call sub_102A69D  +
add esi 8 +
dec edi  +
jns loc_1077B32  +
push 8  +
pop ecx  +
lea esi [ebx+0C0h] +
lea edi [ebp+var_20] +
movs   +
mov ecx ebx +
call sub_1038F9B  +
mov esi eax +
push 4  +
lea eax [ebp+var_20] +
push eax  +
mov ecx esi +
call sub_1039BC2  +
push esi  +
call sub_1030B8B  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
call sub_106D397  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov eax [ecx+44h] +
add eax [ecx+3Ch] +
push esi  +
cdq   +
sub eax edx +
mov esi eax +
mov eax [ecx+48h] +
add eax [ecx+40h] +
push edi  +
cdq   +
sub eax edx +
xor edi edi +
sar esi 1 +
sar eax 1 +
cmp [ecx+0E0h] edi +
jle loc_1077BD4  +
lea edx [ecx+0C0h] +
push ebx  +
mov ebx [edx+10h] +
sub ebx esi +
mov [edx] ebx +
mov ebx [edx+14h] +
sub ebx eax +
mov [edx+4] ebx +
inc edi  +
add edx 8 +
cmp edi [ecx+0E0h] +
jl loc_1077BB8  +
pop ebx  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ecx+0E0h] +
cmp eax 1 +
push esi  +
mov esi [ecx+0C0h] +
push edi  +
mov edi [ecx+0C4h] +
mov [ebp+xRight] esi +
mov [ebp+yTop] edi +
jle loc_1077C3B  +
dec eax  +
lea edx [ecx+0CCh] +
mov [ebp+var_C] eax +
push ebx  +
mov eax [edx-4] +
cmp eax esi +
jge loc_1077C17  +
mov esi eax +
mov eax [edx] +
cmp eax [ebp+yTop] +
jge loc_1077C21  +
mov [ebp+yTop] eax +
mov ebx [edx-4] +
cmp ebx [ebp+xRight] +
jle loc_1077C2C  +
mov [ebp+xRight] ebx +
cmp eax edi +
jle loc_1077C32  +
mov edi eax +
add edx 8 +
dec [ebp+var_C]  +
jnz loc_1077C0E  +
pop ebx  +
push edi  +
push [ebp+xRight]  +
add ecx 90h +
push [ebp+yTop]  +
push esi  +
push ecx  +
call ds:SetRect  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
mov eax [esi+0D4h] +
mov edx [esi+0D0h] +
mov [ebp+yBottom] eax +
mov [ebp+yTop] eax +
lea eax [esi+0E0h] +
cmp dword ptr [eax] 1 +
push edi  +
mov [ebp+xRight] edx +
jle loc_1077CBC  +
mov eax [eax] +
lea ecx [esi+0DCh] +
dec eax  +
mov edi [ecx-4] +
cmp edi edx +
jge loc_1077C97  +
mov edx edi +
mov edi [ecx] +
cmp edi [ebp+yTop] +
jge loc_1077CA1  +
mov [ebp+yTop] edi +
mov edi [ecx-4] +
cmp edi [ebp+xRight] +
jle loc_1077CAC  +
mov [ebp+xRight] edi +
mov edi [ecx] +
cmp edi [ebp+yBottom] +
jle loc_1077CB6  +
mov [ebp+yBottom] edi +
add ecx 8 +
dec eax  +
jnz loc_1077C8E  +
push [ebp+yBottom]  +
lea edi [esi+3Ch] +
push [ebp+xRight]  +
push [ebp+yTop]  +
push edx  +
push edi  +
call ds:SetRect  +
mov ecx edi +
call sub_100DC3F  +
cdq   +
sub eax edx +
sar eax 1 +
add eax [edi] +
mov ecx edi +
mov [ebp+yTop] eax +
fild  [ebp+yTop] +
fstp  dword ptr [esi+0B0h] +
call sub_100DC54  +
cdq   +
sub eax edx +
sar eax 1 +
add eax [esi+40h] +
pop edi  +
mov [ebp+yTop] eax +
fild  [ebp+yTop] +
fstp  dword ptr [esi+0B4h] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+8] +
test edx edx +
jz loc_1077D3E  +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jle loc_1077D3D  +
lea eax [ecx+0D0h] +
push edi  +
mov edi [eax] +
mov [edx] edi +
mov edi [eax+4] +
mov [edx+4] edi +
add eax 8 +
add edx 8 +
dec esi  +
jnz loc_1077D29  +
pop edi  +
pop esi  +
mov eax [ecx+0E0h] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+0D8h] +
add ecx 0D0h +
push eax  +
push ecx  +
mov ecx [ebp+8] +
call sub_1039321  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov ebx ecx +
mov [ebp-10h] ebx +
call sub_103AEEC  +
and dword ptr [ebp-4] 0 +
xor edi edi +
mov dword ptr [ebx] offset off_100919C +
lea esi [ebx+0C0h] +
inc edi  +
mov ecx esi +
call sub_102A69D  +
add esi 8 +
dec edi  +
jns loc_1077D9A  +
xor edi edi +
lea esi [ebx+0D0h] +
inc edi  +
mov ecx esi +
call sub_102A69D  +
add esi 8 +
dec edi  +
jns loc_1077DB0  +
and dword ptr [ebx+0E0h] 0 +
lea esi [ebx+3Ch] +
push esi  +
call ds:SetRectEmpty  +
lea edi [ebx+90h] +
movs   +
movs   +
movs   +
movs   +
mov eax ebx +
call sub_1002061  +
retn   +
***
mov eax [ecx+0E0h] +
dec eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_100C6E8  +
mov eax [ebp+8] +
pop ebp  +
retn 8  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-14h] esi +
mov edi [ebp+8] +
push edi  +
call sub_10786C2  +
and dword ptr [ebp-4] 0 +
lea ebx [esi+0C0h] +
mov dword ptr [esi] offset off_100919C +
mov [ebp+8] ebx +
mov dword ptr [ebp-10h] 1 +
mov ecx [ebp+8] +
call sub_102A69D  +
add dword ptr [ebp+8] 8 +
dec dword ptr [ebp-10h]  +
jns loc_1077E45  +
lea eax [esi+0D0h] +
mov [ebp+8] eax +
mov dword ptr [ebp-10h] 1 +
mov ecx [ebp+8] +
call sub_102A69D  +
add dword ptr [ebp+8] 8 +
dec dword ptr [ebp-10h]  +
jns loc_1077E66  +
mov eax [edi+0E0h] +
mov ecx edi +
push 2  +
mov [esi+0E0h] eax +
mov eax ebx +
sub ecx esi +
pop edx  +
mov edi [ecx+eax] +
mov [eax] edi +
mov edi [ecx+eax+4] +
mov [eax+4] edi +
add eax 8 +
dec edx  +
jnz loc_1077E8C  +
push 2  +
lea eax [esi+0D0h] +
pop edx  +
mov edi [ecx+eax] +
mov [eax] edi +
mov edi [ecx+eax+4] +
mov [eax+4] edi +
add eax 8 +
dec edx  +
jnz loc_1077EA7  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
fldz   +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov [esi+eax*8+0D0h] ecx +
mov ecx [ebp+arg_4] +
mov [esi+eax*8+0D4h] ecx +
fstp  dword ptr [esi+0A4h] +
mov ecx esi +
call sub_1077C59  +
mov ecx esi +
call sub_1077B8D  +
call sub_1077BDC  +
mov ecx esi +
call sub_1039E3F  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax+8]  +
mov esi ecx +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_1077F00  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
mov [ebp+var_8] 14h +
mov [ebp+var_4] esi +
call sub_100DD20  +
mov al 1 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+0E0h] +
push dword ptr [esi]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_1077F00  +
inc dword ptr [esi]  +
lea eax [ebp+var_8] +
push eax  +
mov ecx edi +
mov [ebp+var_8] 14h +
mov [ebp+var_4] edi +
call sub_100DD20  +
pop edi  +
mov al 1 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
fild  dword ptr [eax] +
push ebx  +
mov ebx ecx +
push esi  +
fadd  dword ptr [ebx+0A4h] +
push edi  +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
fstp  dword ptr [ebx+0A4h] +
fld  ds:flt_104AB58 +
fcomp  [ebp+arg_0] +
fnstsw  ax +
fld  ds:dbl_104AB50 +
test ah 5 +
jp loc_107800F  +
fld  [ebp+arg_0] +
fsub st st(1) +
fstp  dword ptr [ebx+0A4h] +
fldz   +
fcomp  dword ptr [ebx+0A4h] +
fnstsw  ax +
test ah 41h +
jnz loc_107802C  +
fadd  dword ptr [ebx+0A4h] +
fstp  dword ptr [ebx+0A4h] +
jmp loc_107802E  +
fstp  st +
xor ecx ecx +
cmp [ebx+0E0h] ecx +
jle loc_1078055  +
lea eax [ebx+0D0h] +
mov edx [eax-10h] +
mov [eax] edx +
mov edx [eax-0Ch] +
mov [eax+4] edx +
inc ecx  +
add eax 8 +
cmp ecx [ebx+0E0h] +
jl loc_107803E  +
mov ecx ebx +
call sub_1038F9B  +
push 2  +
mov ecx eax +
lea esi [ebx+0D0h] +
push esi  +
mov [ebp+arg_0] ecx +
call sub_1039BC2  +
push dword ptr [ebx+0DCh]  +
lea ecx [ebp+var_18] +
push dword ptr [ebx+0D8h]  +
push dword ptr [ebx+0D4h]  +
push dword ptr [esi]  +
call sub_100C6E8  +
lea ecx [ebx+3Ch] +
mov esi eax +
mov edi ecx +
movs   +
movs   +
movs   +
movs   +
call sub_10397CE  +
push [ebp+arg_0]  +
call sub_1030B8B  +
mov ecx ebx +
call sub_1039E3F  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
mov [ebp+var_8] 14h +
mov [ebp+var_4] ebx +
call sub_100DD20  +
pop edi  +
pop esi  +
mov al 1 +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor eax eax +
mov byte ptr [ecx+10h] 1 +
cmp [ebp+arg_0] eax +
jz locret_10780F4  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_8] 15h +
mov [ebp+var_4] ecx +
call sub_100DD20  +
mov al 1 +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_106DF88  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
retn 0Ch  +
***
add [ecx+edi*4-3E7CFF00h] edi +
add al 0E9h +
xchg edi [ecx] +
stc   +
call dword ptr [eax-6F6F6F70h]  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_100B9BC +
call sub_100BAC8  +
test byte ptr [ebp+8] 1 +
jz loc_1078169  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push dword ptr [esi]  +
mov edi ecx +
push [ebp+arg_0]  +
call sub_100EA01  +
mov bl al +
test bl bl +
jz loc_107819D  +
lea ecx [edi+38h] +
call sub_100CA8E  +
dec eax  +
mov [esi] eax +
pop edi  +
pop esi  +
mov al bl +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
fldz   +
mov edx [eax] +
fst  [ebp+var_4] +
dec edx  +
fstp  [ebp+var_8] +
cmp edx 9 +
ja loc_10782DA  +
jmp ds:off_10782F8[edx*4]  +
mov edx [eax+4] +
sub edx [ecx+3Ch] +
mov eax [eax+8] +
sub eax [ecx+40h] +
mov [ebp+arg_0] edx +
fild  [ebp+arg_0] +
mov [ebp+arg_0] eax +
fstp  [ebp+var_4] +
fild  [ebp+arg_0] +
jmp loc_10782D7  +
mov eax [eax+8] +
sub eax [ecx+40h] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fmul  ds:dbl_1006830 +
jmp loc_10782D7  +
mov eax [eax+10h] +
sub eax [ecx+48h] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
jmp loc_10781FC  +
mov eax [eax+4] +
sub eax [ecx+3Ch] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fmul  ds:dbl_1006830 +
fstp  [ebp+var_4] +
jmp loc_10782DA  +
mov eax [eax+0Ch] +
sub eax [ecx+44h] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
jmp loc_1078221  +
mov edx [eax+4] +
sub edx [ecx+3Ch] +
mov eax [eax+8] +
sub eax [ecx+40h] +
mov [ebp+arg_0] edx +
fild  [ebp+arg_0] +
mov [ebp+arg_0] eax +
fld  ds:dbl_1006830 +
fmul st(1) st +
fxch  st(1) +
fstp  [ebp+var_4] +
fimul  [ebp+arg_0] +
jmp loc_10782D7  +
mov edx [eax+0Ch] +
sub edx [ecx+44h] +
mov eax [eax+8] +
sub eax [ecx+40h] +
mov [ebp+arg_0] edx +
fild  [ebp+arg_0] +
mov [ebp+arg_0] eax +
fld  ds:dbl_1006830 +
fmul st(1) st +
fxch  st(1) +
fstp  [ebp+var_4] +
fimul  [ebp+arg_0] +
jmp loc_10782D7  +
mov edx [eax+4] +
sub edx [ecx+3Ch] +
mov eax [eax+10h] +
sub eax [ecx+48h] +
mov [ebp+arg_0] edx +
fild  [ebp+arg_0] +
mov [ebp+arg_0] eax +
fld  ds:dbl_1006830 +
fmul st(1) st +
fxch  st(1) +
fstp  [ebp+var_4] +
fimul  [ebp+arg_0] +
jmp loc_10782D7  +
mov edx [eax+0Ch] +
sub edx [ecx+44h] +
mov eax [eax+10h] +
sub eax [ecx+48h] +
mov [ebp+arg_0] edx +
fild  [ebp+arg_0] +
mov [ebp+arg_0] eax +
fld  ds:dbl_1006830 +
fmul st(1) st +
fxch  st(1) +
fstp  [ebp+var_4] +
fimul  [ebp+arg_0] +
fstp  [ebp+var_8] +
fld  [ebp+var_4] +
lea eax [ecx+0B0h] +
fadd  dword ptr [eax] +
fstp  dword ptr [eax] +
lea eax [ecx+0B4h] +
fld  dword ptr [eax] +
fadd  [ebp+var_8] +
fstp  dword ptr [eax] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+3Ch] +
mov ecx edi +
call sub_100DC3F  +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
mov ecx edi +
fmul  ds:dbl_1006830 +
fiadd  dword ptr [edi] +
fstp  dword ptr [esi+0B0h] +
call sub_100DC54  +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
pop edi  +
fmul  ds:dbl_1006830 +
fiadd  dword ptr [esi+40h] +
fstp  dword ptr [esi+0B4h] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
cmp eax 1 +
jz loc_10783BF  +
cmp eax 8 +
jz loc_10783BF  +
mov eax [esi+30h] +
push ebx  +
push edi  +
push dword ptr [eax+14h]  +
call sub_1033AEB  +
mov edi eax +
lea eax [esi+50h] +
push eax  +
mov ecx edi +
call sub_106D035  +
mov ebx eax +
push ebx  +
push 1  +
call sub_106CE4C  +
push edi  +
mov [ebp+var_4] eax +
call sub_100C26D  +
push ebx  +
call sub_100C26D  +
pop edi  +
pop ebx  +
jmp loc_10783CD  +
lea eax [esi+50h] +
push eax  +
push 1  +
call sub_1030BDA  +
mov [ebp+var_4] eax +
movzx eax byte ptr [esi+0B8h] +
mov ecx [ebp+arg_0] +
push eax  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
call sub_10392DD  +
push [ebp+var_4]  +
call sub_100DAD9  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor eax eax +
cmp [ebp+arg_0] eax +
jz locret_1078418  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_8] 14h +
mov [ebp+var_4] ecx +
call sub_100DD20  +
mov al 1 +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
add esi 4 +
push edi  +
mov ecx esi +
call sub_100DC3F  +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
lea edi [ebx+3Ch] +
mov ecx edi +
fstp  [ebp+var_C] +
call sub_100DC3F  +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
mov ecx esi +
fdivr  [ebp+var_C] +
fstp  dword ptr [ebp+var_C+4] +
call sub_100DC54  +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
mov ecx edi +
fstp  [ebp+var_24] +
call sub_100DC54  +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
fdivr  [ebp+var_24] +
fstp  [ebp+var_4] +
fld  dword ptr [ebp+var_C+4] +
fstp  [ebp+var_14] +
fld  [ebp+var_4] +
fstp  [ebp+var_10] +
call sub_1030B13  +
fld  dword ptr [ebx+0A4h] +
mov esi eax +
push ecx  +
mov ecx esi +
fstp  [esp+3Ch+var_3C] +
call sub_1039720  +
push 1  +
lea eax [ebp+var_14] +
push eax  +
mov ecx esi +
call sub_106E1EC  +
push esi  +
call sub_1030B8B  +
fld  [ebp+var_14] +
push [ebp+arg_0]  +
fabs   +
fstp  dword ptr [ebp+var_C+4] +
mov ecx ebx +
fld  dword ptr [ebp+var_C+4] +
fmul  dword ptr [ebx+0A8h] +
fstp  dword ptr [ebx+0A8h] +
fld  [ebp+var_10] +
fabs   +
fstp  dword ptr [ebp+var_C+4] +
fld  dword ptr [ebp+var_C+4] +
fmul  dword ptr [ebx+0ACh] +
fstp  dword ptr [ebx+0ACh] +
call sub_10781AB  +
call sub_1038F9B  +
mov edx [ebx] +
push eax  +
mov [ebp+arg_0] eax +
lea eax [ebp+var_2C] +
push eax  +
mov ecx ebx +
call dword ptr [edx+80h]  +
push [ebp+arg_0]  +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
call sub_1030B8B  +
mov ecx ebx +
call sub_1039E3F  +
mov [ebp+var_1C] 14h +
mov [ebp+var_18] ebx +
lea eax [ebp+var_1C] +
push eax  +
mov ecx ebx +
call sub_100DD20  +
pop edi  +
pop esi  +
mov al 1 +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
fild  dword ptr [eax] +
push ebx  +
mov ebx ecx +
push esi  +
fadd  dword ptr [ebx+0A4h] +
push edi  +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
fstp  dword ptr [ebx+0A4h] +
fld  ds:flt_104AB58 +
fcomp  [ebp+arg_0] +
fnstsw  ax +
fld  ds:dbl_104AB50 +
test ah 5 +
jp loc_1078580  +
fld  [ebp+arg_0] +
fsub st st(1) +
fstp  dword ptr [ebx+0A4h] +
fldz   +
fcomp  dword ptr [ebx+0A4h] +
fnstsw  ax +
test ah 41h +
jnz loc_107859D  +
fadd  dword ptr [ebx+0A4h] +
fstp  dword ptr [ebx+0A4h] +
jmp loc_107859F  +
fstp  st +
call sub_1038F9B  +
mov edx [ebx] +
push eax  +
mov [ebp+arg_0] eax +
lea eax [ebp+var_18] +
push eax  +
mov ecx ebx +
call dword ptr [edx+80h]  +
push [ebp+arg_0]  +
mov esi eax +
lea edi [ebx+3Ch] +
movs   +
movs   +
movs   +
movs   +
call sub_1030B8B  +
mov ecx ebx +
call sub_1039E3F  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
mov [ebp+var_8] 14h +
mov [ebp+var_4] ebx +
call sub_100DD20  +
pop edi  +
pop esi  +
mov al 1 +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov edx [ebp+arg_0] +
xor al al +
cmp [edx] al +
jz loc_107860C  +
cmp [ecx+4Dh] al +
setz al  +
mov [ecx+4Dh] al +
jmp loc_1078615  +
cmp [ecx+4Eh] al +
setz al  +
mov [ecx+4Eh] al +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_8] 14h +
mov [ebp+var_4] ecx +
call sub_100DD20  +
mov al 1 +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+var_8] +
push eax  +
mov byte ptr [ecx+10h] 1 +
mov [ebp+var_8] 15h +
mov [ebp+var_4] ecx +
call sub_100DD20  +
mov al 1 +
leave   +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100B6DE  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_100B9BC +
mov cl [eax+10h] +
add eax 14h +
mov [esi+10h] cl +
push eax  +
lea ecx [esi+14h] +
call sub_100C6A4  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_107865C  +
mov dword ptr [esi] offset off_1008BF4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100208C  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call sub_10786A0  +
mov dword ptr [esi] offset off_1008C94 +
mov ecx [edi+24h] +
mov [esi+24h] ecx +
mov ecx [edi+28h] +
mov [esi+28h] ecx +
mov ecx [edi+2Ch] +
xor eax eax +
mov [esi+2Ch] ecx +
mov ecx [edi+30h] +
mov [ebp-4] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
lea eax [edi+3Ch] +
mov [esi+30h] ecx +
push eax  +
lea ecx [esi+3Ch] +
call sub_100C6A4  +
mov al [edi+4Ch] +
mov [esi+4Ch] al +
mov al [edi+4Dh] +
mov [esi+4Dh] al +
mov al [edi+4Eh] +
mov [esi+4Eh] al +
lea eax [edi+50h] +
push eax  +
lea ecx [esi+50h] +
call sub_100C009  +
lea eax [edi+70h] +
push eax  +
lea ecx [esi+70h] +
call sub_100C009  +
lea eax [edi+90h] +
push eax  +
lea ecx [esi+90h] +
call sub_100C6A4  +
mov eax [edi+0A0h] +
mov [esi+0A0h] eax +
fld  dword ptr [edi+0A4h] +
fstp  dword ptr [esi+0A4h] +
mov ecx esi +
fld  dword ptr [edi+0A8h] +
fstp  dword ptr [esi+0A8h] +
fld  dword ptr [edi+0ACh] +
fstp  dword ptr [esi+0ACh] +
fld  dword ptr [edi+0B0h] +
fstp  dword ptr [esi+0B0h] +
fld  dword ptr [edi+0B4h] +
fstp  dword ptr [esi+0B4h] +
mov al [edi+0B8h] +
mov [esi+0B8h] al +
call sub_103AB5C  +
mov eax esi +
call sub_1002061  +
retn 4  +
***
push 4  +
mov eax offset loc_107F5D4 +
call sub_100208C  +
mov esi ecx +
push 0C0h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10787E4  +
push esi  +
call sub_10786C2  +
call sub_1002061  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078828 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10788BC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078924 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078978 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-108h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10789DC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078A20 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078A78 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0D0h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078AFC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078B54 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078BA8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078C10 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078C68 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078CCC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078D24 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078D80 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
lods   +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078DE0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078E38 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078EA0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078EF4 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov bl [ebp+ebp*8-1] +
push dword ptr [ebx]  +
enter 1DE8h 91h +
clc   +
dec dword ptr [ebx-37CC07B6h]  +
call sub_100207A  +
mov eax offset dword_1078F74 +
jmp loc_106C9AC  +
***
push esp  +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-9Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1078FD0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079024 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107907C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10790E0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079138 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0E8h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10791A0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-124h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079234 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107928C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079304 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079394 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10793F8 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
int 3  +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107944C +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
int 3  +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10794A0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079538 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107958C +
jmp loc_106C9AC  +
***
std   +
inc ebx  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10795E4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107964C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10796A0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079708 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107975C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10797B4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107981C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079884 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov al [ebx+edi*8-37CC0001h] +
call sub_100207A  +
mov eax offset dword_10798EC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079944 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-44h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107999C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10799F4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079A4C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079AA4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079B08 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079B60 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079BB8 +
jmp loc_106C9AC  +
***
and eax 0FFFFFFFEh +
mov dword_108A250 eax +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079C14 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079C6C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079CC4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-50h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079D2C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079D84 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-84h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079DDC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-54h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079E34 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-508h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079EC4 +
jmp loc_106C9AC  +
***
std   +
inc ebx  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079F1C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-78h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079F80 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-58h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1079FD8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A01C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A084 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A0E0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A13C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A194 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A1EC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A254 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A2AC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-26Ch] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A314 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A36C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-88h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A3C8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A41C +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
test al 33h +
enter 0FFFFFCE8h 7Bh +
clc   +
dec dword ptr [ebx-37CC07B6h]  +
call sub_100207A  +
mov eax offset dword_107A494 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
mov al 33h +
enter 0FFFF94E8h 7Bh +
clc   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_100207A  +
mov eax offset dword_107A4FC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-9Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A570 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-94h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A5DC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A634 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A68C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A6E4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A73C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A794 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A7F0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A848 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A8E8 +
jmp loc_106C9AC  +
***
call fword ptr [ecx-3Dh]  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-214h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107A9B8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107AA10 +
jmp loc_106C9AC  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107AA90 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107AAF4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-21Ch] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107AB58 +
jmp loc_106C9AC  +
***
inc ebx  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-260h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107AC70 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107ACC8 +
jmp loc_106C9AC  +
***
call fword ptr [ecx-3Dh]  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107AEF4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107AF5C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107AFC4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B01C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B060 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B0A4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B0E8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B160 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-88h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B1BC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B200 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B264 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-88h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B2C0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B318 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B370 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B3C8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-98h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B428 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B4A0 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
mov al ds:80E8C833h +
imul edi eax +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B510 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
test [ebx] dh +
enter 18E8h 6Bh +
clc   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_100207A  +
mov eax offset dword_107B578 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
lods   +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B5D8 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
nop   +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B638 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-74h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B698 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B6DC +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
nop   +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B754 +
jmp loc_106C9AC  +
***
push esp  +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B7B8 +
jmp loc_106C9AC  +
***
push esp  +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B81C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B880 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B8E4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-64h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B948 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107B9AC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107BA04 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107BA48 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107BAB0 +
jmp loc_106C9AC  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-68h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107BC5C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107BCC4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107BD18 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107BD6C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107BDC0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107BE14 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107BE68 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
enter 0FFFFC833h 0E8h +
enter 0FFFFF861h 0FFh +
mov eax offset dword_107BEBC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107BF10 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2A8h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107BFF4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C190 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C33C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C39C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C3F4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C438 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0B8h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C494 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C4EC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0F4h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C550 +
jmp loc_106C9AC  +
***
push esp  +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C5A8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C600 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C658 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-234h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C6EC +
jmp loc_106C9AC  +
***
cld   +
inc ebx  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C744 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0D0h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C7A4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-268h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C808 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-94h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C870 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C8C8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C920 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C988 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-78h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107C9F8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CA50 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CAA8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CB10 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CB68 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
int 3  +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CBBC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CC14 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CC6C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CCC4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0D0h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CD28 +
jmp loc_106C9AC  +
***
inc ebx  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CD80 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CDD8 +
jmp loc_106C9AC  +
***
inc ebx  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CE30 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CE88 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-58h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CEE0 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
int 3  +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CF34 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-68h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CF98 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107CFF0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D058 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D0C0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D118 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D180 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D1E8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D240 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D298 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D2F4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D34C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D390 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D3E8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-46Ch] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D44C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D4A4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D4FC +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
mov [ebx] dh +
enter 34E8h 4Bh +
clc   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_100207A  +
mov eax offset dword_107D55C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D5C4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D618 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D680 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
test al 33h +
enter 0FFFF98E8h 49h +
clc   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_100207A  +
mov eax offset dword_107D6F8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-278h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-8] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D780 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D7E8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D83C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D894 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D90C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D984 +
jmp loc_106C9AC  +
***
push esp  +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107D9DC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DA40 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DA94 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0BCh] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DB3C +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov ch [edi+edi*8-1] +
push dword ptr [ebx]  +
enter 0FFFFF1E8h 44h +
clc   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_100207A  +
mov eax offset dword_107DBA0 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
xor byte ptr [ebx] 0C8h +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DC00 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DC84 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-98h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DCF0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DD48 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DDA0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DDE4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DE3C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DE94 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DEEC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DF44 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DF9C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107DFF4 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
mov al 33h +
enter 34E8h 40h +
clc   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_100207A  +
mov eax offset dword_107E05C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E0C4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E12C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E194 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E1FC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0D0h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E258 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0D0h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E2BC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E314 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-88h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E388 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E3E0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-68h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E448 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-84h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E4BC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0A0h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E53C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0BCh] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E5C8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0D8h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E660 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-58h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E6C8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3ECh] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E894 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-100h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E944 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0F8h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107E9E8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-12Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107EAA4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-168h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107EB7C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-118h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107EBFC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-148h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107ECC4 +
jmp loc_106C9AC  +
***
inc ebx  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107ED28 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107ED84 +
jmp loc_106C9AC  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0B4h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107EE38 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107EE90 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107EEEC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107EF30 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107EF74 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107EFCC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F024 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F068 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F0BC +
jmp loc_106C9AC  +
***
call fword ptr [ecx-3Dh]  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F184 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F1DC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F230 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F284 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F2D8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F330 +
jmp loc_106C9AC  +
***
push esp  +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F388 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F3E0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F438 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F490 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F4E8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F540 +
jmp loc_106C9AC  +
***
call fword ptr [ecx-3Dh]  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F598 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F5F0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F648 +
jmp loc_106C9AC  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F6A0 +
jmp loc_106C9AC  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F6F8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F750 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F7A8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F800 +
jmp loc_106C9AC  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-64h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F858 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F8B0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-78h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F8F4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F938 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F97C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0D4h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107F9D8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FA30 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FA88 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FAEC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FB48 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FBA0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FBF8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-54h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FC50 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-7Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FCA8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FCEC +
jmp loc_106C9AC  +
***
call fword ptr [ecx-3Dh]  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FD60 +
jmp loc_106C9AC  +
***
call fword ptr [ecx-3Dh]  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FDCC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FE24 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FE7C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-4Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FED4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FF2C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FF84 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_107FFDC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-5Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080034 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_108008C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10800E4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-68h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_108013C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080194 +
jmp loc_106C9AC  +
***
call fword ptr [ecx-3Dh]  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080200 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080258 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10802B0 +
jmp loc_106C9AC  +
***
call fword ptr [ecx-3Dh]  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_108031C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080374 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10803CC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080410 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080468 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10804C0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080518 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-58h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080570 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-50h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10805C4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_108061C +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
sal byte ptr [ebx] 0C8h +
call sub_100207A  +
mov eax offset dword_1080680 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-98h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10806F8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080750 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
nop   +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10807C4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-48h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080888 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10808F8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080950 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10809B4 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
sal byte ptr [ebx] 0C8h +
call sub_100207A  +
mov eax offset dword_1080A10 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080A74 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080ACC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080B24 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080B7C +
jmp loc_106C9AC  +
***
sub eax 548BFFFEh +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080BE0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080C48 +
jmp loc_106C9AC  +
***
sub eax 548BFFFEh +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080CAC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080D04 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080D68 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080DC0 +
jmp loc_106C9AC  +
***
cld   +
inc ebx  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080E18 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2D8h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-8] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080ED8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-158h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-8] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1080FF8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_108105C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10810C0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081104 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_108115C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10811B4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10811F8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_108123C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081298 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10812DC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081344 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081388 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-38h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081400 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081458 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10814BC +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
mov esp 74E8C833h +
or edi eax +
dec dword ptr [ebx-37CC03B6h]  +
call sub_100207A  +
mov eax offset dword_108151C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0C8h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10815AC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081658 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_108169C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_108173C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081794 +
jmp loc_106C9AC  +
***
sar ah 0FFh +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10817F8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081850 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10818A8 +
jmp loc_106C9AC  +
***
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081904 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_108195C +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
cwde   +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10819B8 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
xchg eax esp +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081A68 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081AC0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081B04 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
mov al 33h +
enter 2CE8h 5 +
clc   +
dec dword ptr [ebx-37CC03B6h]  +
call sub_100207A  +
mov eax offset dword_1081B64 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081BC8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081C0C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-8] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081C90 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081CF8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081D4C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081DA4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081E0C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0B8h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081E70 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-44h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081EC4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081F1C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081F74 +
jmp loc_106C9AC  +
***
stc   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov dh [ebx+edi*8-37CC0001h] +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1081FF0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_108204C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082090 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10820D4 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082118 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_108217C +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
cwde   +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10821D0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082228 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
mov al 33h +
enter 8E8h 0FEh +
idiv  edi +
mov eax offset dword_108227C +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10822EC +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov ah [ecx+esi*8-1] +
push dword ptr [ebx]  +
enter 25E8h 0FDh +
idiv  edi +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_108236C +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
lods   +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10823CC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-88h] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082454 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
lods   +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10824A8 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
mov al 33h +
enter 0FFFF88E8h 0FBh +
idiv  edi +
mov eax offset dword_10824FC +
jmp loc_106C9AC  +
***
stc   +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
sal byte ptr [ebx] 0C8h +
call sub_100207A  +
mov eax offset dword_1082568 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
nop   +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10825D8 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
test al 33h +
enter 50E8h 0FAh +
idiv  edi +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082640 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-47Ch] +
xor ecx eax +
call sub_100207A  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10826B4 +
jmp loc_106C9AC  +
***
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
dec edx  +
mov al 33h +
enter 7CE8h 0F9h +
idiv  edi +
mov ecx [edx-4] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082714 +
jmp loc_106C9AC  +
***
jmp loc_1021705  +
***
mov ecx offset unk_108C664 +
jmp loc_1021705  +
***
mov ecx offset unk_108C680 +
jmp loc_1021705  +
***
mov ecx offset unk_108C69C +
jmp loc_1021705  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082780 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10827D8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082830 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082888 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10828CC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082910 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082954 +
jmp loc_106C9AC  +
***
mov eax ds:548BFFF8h +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_10829B0 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082A08 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082A70 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082AC8 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082B20 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082B78 +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082BDC +
jmp loc_106C9AC  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100207A  +
mov eax offset dword_1082C34 +
jmp loc_106C9AC  +
***
mov dword_108EE64 offset off_100A058 +
mov ecx offset dword_108EE64 +
jmp sub_1002407  +
***
push dword_108EE74  +
mov dword_108EE70 offset off_100B384 +
call GdipDeleteBrush  +
retn   +
***
push dword_108EE80  +
mov dword_108EE7C offset off_100B2A4 +
call GdipDisposeImage  +
retn   +
***
mov dword_108EEE4 offset off_104A130 +
mov ecx offset dword_108EEE4 +
jmp ??1exception@@UAE@XZ  +
***
add eax 7000000h +
retn 107h  +
***
or eax 77000000h +
retn 107h  +
***
adc eax 0E7000000h +
retn 107h  +
***
retf 4701h  +
***
retf 4901h  +
***
