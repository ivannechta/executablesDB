mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_100261F  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100262A  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_100264D  +
push offset szFormat  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
cmp dword_100B26C 0 +
jnz loc_100265C  +
mov eax 26Fh +
retn   +
push esi  +
call sub_1003C0F  +
mov esi eax +
test esi esi +
jnz loc_10026C4  +
push edi  +
push dword_100B26C  +
push lpString2  +
call sub_1004171  +
mov edi eax +
test edi edi +
jz loc_10026BE  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_100269A  +
push offset aRashangup  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
push edi  +
call dword_100B608  +
mov esi eax +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10026BE  +
push esi  +
push offset aRashangupD  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
call sub_1003FFE  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10026E7  +
push offset aRemoveentry  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
call sub_1003C0F  +
test eax eax +
jnz locret_1002777  +
push esi  +
push dword_100B26C  +
push lpString2  +
call sub_1004171  +
test eax eax +
mov eax dwTraceID +
jz loc_100272B  +
cmp eax 0FFFFFFFFh +
jz loc_1002724  +
push offset aRemoveentryCon  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
mov esi 3EBh +
jmp loc_100276F  +
cmp eax 0FFFFFFFFh +
jz loc_1002740  +
push offset aRasdeleteentry  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
push dword_100B26C  +
push lpString2  +
call dword_100B5CC  +
mov esi eax +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_100276F  +
push esi  +
push offset aRasdeleteent_0  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
call sub_1003FFE  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D4h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10027AC  +
push offset aRun  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
mov eax dword_100B25C +
cmp eax 5 +
jnz loc_10027C0  +
call sub_1002633  +
jmp loc_1002A2E  +
cmp eax 3 +
jnz loc_10027CF  +
call sub_10026CD  +
jmp loc_1002A2E  +
push ebx  +
call sub_1003C4B  +
xor ebx ebx +
cmp eax ebx +
jnz loc_1002A2D  +
push esi  +
mov esi dword_100B25C +
push edi  +
cmp esi ebx +
jz loc_1002912  +
jle loc_100290A  +
cmp esi 2 +
jle loc_1002879  +
cmp esi 4 +
jnz loc_100290A  +
push 9  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_24C] +
stos   +
mov eax dwTraceID +
mov [ebp+var_24C] 24h +
cmp eax 0FFFFFFFFh +
jz loc_1002834  +
push offset aRasdialdlg  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
lea eax [ebp+var_24C] +
push eax  +
push ebx  +
push dword_100B26C  +
push lpString2  +
call dword_100B63C  +
mov ecx dwTraceID +
cmp ecx 0FFFFFFFFh +
jz loc_10029E2  +
push [ebp+var_234]  +
push eax  +
push offset aRasdialdlgDED  +
push 0Ch  +
push ecx  +
call TracePrintfExA  +
add esp 14h +
jmp loc_10029E2  +
mov edi 224h +
push edi  +
lea eax [ebp+var_228] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
mov [ebp+var_228] edi +
cmp esi 1 +
jnz loc_10028A1  +
or [ebp+var_220] 2 +
cmp dword_100B260 ebx +
jz loc_10028B0  +
or [ebp+var_220] 8 +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10028CA  +
push offset aRasentrydlg  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
lea eax [ebp+var_228] +
push eax  +
push dword_100B26C  +
push lpString2  +
call dword_100B640  +
mov ecx dwTraceID +
cmp ecx 0FFFFFFFFh +
jz loc_1002902  +
push [ebp+var_10]  +
push eax  +
push offset aRasentrydlgFED  +
push 0Ch  +
push ecx  +
call TracePrintfExA  +
add esp 14h +
mov esi [ebp+var_10] +
jmp loc_10029E8  +
push 57h  +
pop esi  +
jmp loc_10029E8  +
push 0Ah  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_250] +
stos   +
push ebx  +
lea eax [ebp+var_2D4] +
push eax  +
push ebx  +
mov [ebp+var_250] 28h +
mov [ebp+var_248] 80000000h +
call sub_10054E0  +
mov edi eax +
cmp edi ebx +
jnz loc_1002975  +
mov eax [ebp+var_264] +
cmp eax 7FFFFFFFh +
jz loc_100296D  +
or [ebp+var_248] 1 +
mov [ebp+var_244] eax +
mov eax [ebp+var_260] +
mov [ebp+var_240] eax +
mov esi [ebp+var_25C] +
jmp loc_1002977  +
xor esi esi +
mov eax dword_100B26C +
cmp eax ebx +
jz loc_1002982  +
mov esi eax +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_100299C  +
push offset aRasphonebookdl  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
lea eax [ebp+var_250] +
push eax  +
push esi  +
push lpString2  +
call dword_100B644  +
mov ecx dwTraceID +
cmp ecx 0FFFFFFFFh +
jz loc_10029D2  +
push [ebp+var_234]  +
push eax  +
push offset aRasphonebook_0  +
push 0Ch  +
push ecx  +
call TracePrintfExA  +
add esp 14h +
cmp edi ebx +
jnz loc_10029E2  +
lea eax [ebp+var_2D4] +
push eax  +
call sub_1004316  +
mov esi [ebp+var_234] +
push offset ModuleName  +
call ds:GetModuleHandleW  +
cmp eax ebx +
jz loc_1002A09  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
cmp eax ebx +
jz loc_1002A09  +
call eax  +
call sub_1004021  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1002A29  +
push esi  +
push offset aRunD  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1003217  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_8] +
lea eax [ebp+var_4] +
push eax  +
push 1  +
push dword ptr [esi]  +
call sub_1002605  +
test eax eax +
jge loc_1002A63  +
push 57h  +
pop eax  +
jmp loc_1002A87  +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_0] +
jnb loc_1002A5E  +
mov ecx [ebp+arg_4] +
mov [esi] eax +
push dword ptr [ecx+eax*4]  +
call sub_1005E8A  +
test eax eax +
jnz loc_1002A80  +
push 8  +
jmp loc_1002A60  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
xor eax eax +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax ds:__argc +
mov eax [eax] +
push ebx  +
push esi  +
mov [ebp+var_8] eax +
mov eax ds:__argv +
push edi  +
mov edi [eax] +
mov esi [edi] +
push esi  +
xor ebx ebx +
call ds:lstrlenA  +
lea eax [eax+esi-1] +
jmp loc_1002ACA  +
mov cl [eax] +
cmp cl 5Ch +
jz loc_1002ACE  +
cmp cl 3Ah +
jz loc_1002ACE  +
dec eax  +
cmp eax esi +
jnb loc_1002ABD  +
inc eax  +
push eax  +
call sub_1005E7A  +
mov dword_100B264 eax +
xor eax eax +
inc eax  +
mov [ebp+var_4] eax +
cmp [ebp+var_8] eax +
jbe loc_1002CA3  +
mov esi offset dword_100B26C +
test ebx ebx +
jnz loc_1002CE5  +
mov edx [ebp+var_4] +
mov ecx [edi+edx*4] +
mov al [ecx] +
cmp al 2Dh +
jz loc_1002B0A  +
cmp al 2Fh +
jnz loc_1002C81  +
movsx eax byte ptr [ecx+1] +
push 61h  +
pop edx  +
cmp eax edx +
jg loc_1002B6F  +
jz loc_1002B52  +
cmp eax 48h +
jg loc_1002B44  +
jz loc_1002C3E  +
sub eax 41h +
jz loc_1002B52  +
sub eax 3 +
jz loc_1002C56  +
dec eax  +
jz loc_1002C4A  +
dec eax  +
jnz loc_1002B9F  +
push offset lpString2  +
jmp loc_1002C61  +
sub eax 4Ch +
jz loc_1002BB6  +
sub eax 6 +
jz loc_1002BA7  +
dec eax  +
dec eax  +
jmp loc_1002B99  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push [ebp+var_8]  +
mov dword_100B25C 1 +
call sub_1002A3F  +
jmp loc_1002C70  +
sub eax 64h +
jz loc_1002C56  +
dec eax  +
jz loc_1002C4A  +
dec eax  +
jz loc_1002B3A  +
push 2  +
pop ebx  +
sub eax ebx +
jz loc_1002C3E  +
sub eax 4 +
jz loc_1002BB9  +
sub eax 6 +
jz loc_1002BA7  +
sub eax ebx +
jz loc_1002C56  +
push 57h  +
pop ebx  +
jmp loc_1002C70  +
mov dword_100B25C 3 +
jmp loc_1002C60  +
push 2  +
pop ebx  +
movsx eax byte ptr [ecx+2] +
cmp eax edx +
jg loc_1002BE7  +
jz loc_1002BCD  +
sub eax 41h +
jz loc_1002BCD  +
sub eax 3 +
jmp loc_1002BEA  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push [ebp+var_8]  +
mov dword_100B25C 1 +
call sub_1002A3F  +
jmp loc_1002C37  +
sub eax 64h +
jz loc_1002C2D  +
dec eax  +
jz loc_1002C25  +
sub eax 3 +
jz loc_1002C19  +
sub eax 0Ah +
jz loc_1002C0D  +
sub eax ebx +
jz loc_1002C2D  +
sub eax ebx +
jnz loc_1002B9F  +
mov dword_100B260 1 +
jmp loc_1002C37  +
mov dword_100B25C 3 +
jmp loc_1002C37  +
mov dword_100B25C 5 +
jmp loc_1002C37  +
mov dword_100B25C ebx +
jmp loc_1002C37  +
mov dword_100B25C 4 +
push offset dword_100B270  +
jmp loc_1002C61  +
mov dword_100B25C 5 +
jmp loc_1002C60  +
mov dword_100B25C 2 +
jmp loc_1002C60  +
mov dword_100B25C 4 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push [ebp+var_8]  +
call sub_1002A3F  +
mov ebx eax +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebp+var_8] +
jb loc_1002AEE  +
jmp loc_1002C9F  +
cmp edx 1 +
jnz loc_1002C9C  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push [ebp+var_8]  +
call sub_1002A3F  +
mov ebx eax +
jmp loc_1002C9F  +
push 57h  +
pop ebx  +
test ebx ebx +
jnz loc_1002CE5  +
mov eax dword_100B270 +
test eax eax +
jz loc_1002CE5  +
push eax  +
call sub_1007139  +
mov esi eax +
test esi esi +
jnz loc_1002CBD  +
push 6Eh  +
pop ebx  +
jmp loc_1002CE5  +
push dword ptr [esi]  +
call sub_1005DE7  +
cmp dword_100B25C 1 +
mov lpString2 eax +
jz loc_1002CDF  +
push dword ptr [esi+4]  +
call sub_1005DE7  +
mov dword_100B26C eax +
push esi  +
call sub_100710C  +
mov eax dwTraceID +
or edi 0FFFFFFFFh +
cmp eax edi +
jz loc_1002D6C  +
push dword_100B260  +
push dword_100B25C  +
push offset aCmdlineMDVD  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 14h +
cmp dwTraceID edi +
jz loc_1002D6C  +
mov eax dword_100B26C +
mov esi offset Class +
test eax eax +
jnz loc_1002D25  +
mov eax esi +
push eax  +
push offset aCmdlineES  +
call sub_1003781  +
cmp dwTraceID edi +
jz loc_1002D6C  +
mov eax lpString2 +
test eax eax +
jnz loc_1002D43  +
mov eax esi +
push eax  +
push offset aCmdlineFS  +
call sub_1003781  +
cmp dwTraceID edi +
jz loc_1002D6C  +
mov eax dword_100B270 +
test eax eax +
jnz loc_1002D61  +
mov eax esi +
push eax  +
push offset aCmdlineLS  +
call sub_1003781  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
xor ebx ebx +
push ebx  +
push offset aRasphone  +
call sub_100399F  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1002DA9  +
push offset aWinmain  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
cmp byte_100B000 bl +
jz loc_1002DC1  +
push offset dword_10011F0  +
call sub_1007D69  +
mov byte_100B000 bl +
mov eax [ebp+hInstance] +
push eax  +
mov hInstance eax +
call sub_100778F  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call ds:HeapSetInformation  +
call sub_1002A91  +
mov esi eax +
cmp esi ebx +
jnz loc_1002DF1  +
call sub_100277D  +
mov esi eax +
jmp loc_1002EA9  +
push 34h  +
lea eax [ebp+uType] +
push ebx  +
push eax  +
call memset  +
mov eax dword_100B264 +
add esp 0Ch +
push 4E23h  +
push hInstance  +
mov [ebp+uType] eax +
call sub_10058A0  +
push 4E24h  +
push hInstance  +
mov [ebp+var_30] eax +
call sub_10058A0  +
push 4E25h  +
push hInstance  +
mov [ebp+var_2C] eax +
call sub_10058A0  +
push 4E26h  +
push hInstance  +
mov [ebp+var_28] eax +
call sub_10058A0  +
push 4E27h  +
push hInstance  +
mov [ebp+var_24] eax +
call sub_10058A0  +
push 4E21h  +
push hInstance  +
mov [ebp+var_20] eax +
lea eax [ebp+uType] +
push eax  +
push 4E22h  +
push ebx  +
call sub_1007239  +
push [ebp+var_30]  +
call sub_1005662  +
push [ebp+var_2C]  +
call sub_1005662  +
push [ebp+var_28]  +
call sub_1005662  +
push [ebp+var_24]  +
call sub_1005662  +
push [ebp+var_20]  +
call sub_1005662  +
push dword_100B264  +
call sub_1005662  +
push lpString2  +
call sub_1005662  +
push dword_100B26C  +
call sub_1005662  +
call sub_10077A7  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1002EEA  +
push esi  +
push offset aWinmainD  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
call sub_1003771  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1002F18  +
test eax eax +
jnz loc_1002F1D  +
mov ecx [esi] +
test ecx ecx +
jz loc_1002F15  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1002F09  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100B298 +
push offset dword_100B288  +
push dword_100B294  +
mov dword_100B288 eax +
push offset unk_100B278  +
push offset unk_100B27C  +
push offset unk_100B274  +
call ds:__getmainargs  +
add esp 14h +
mov dword_100B284 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1002FBF  +
cmp eax esi +
jnz loc_1002FB2  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_1002FC2  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1002F99  +
xor esi esi +
inc esi  +
mov eax dword_100B928 +
cmp eax esi +
jnz loc_1002FD5  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1003004  +
mov eax dword_100B928 +
test eax eax +
jnz loc_1002FFE  +
mov dword_100B928 esi +
push offset dword_10011C4  +
push offset dword_10011B8  +
call sub_1002EFC  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003004  +
jmp loc_100312C  +
mov dword_100B290 esi +
mov eax dword_100B928 +
cmp eax esi +
jnz loc_1003028  +
push offset dword_10011B4  +
push offset dword_10011AC  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100B928 2 +
test ebx ebx +
jnz loc_1003034  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100B930 0 +
jz loc_1003058  +
push offset dword_100B930  +
call sub_1003329  +
pop ecx  +
test eax eax +
jz loc_1003058  +
push 0  +
push 2  +
push 0  +
call dword_100B930  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_1003072  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_1003082  +
cmp al 20h +
ja loc_1003082  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1003072  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_100308E  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_1003091  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_100B28C eax +
cmp dword_100B280 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_10030C3  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_10030D6  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_100305F  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_100B28C eax +
cmp dword_100B280 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_100B290 0 +
jnz loc_1003117  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100B28C +
jmp loc_1003138  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1003155  +
xor eax eax +
jmp loc_10031A2  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1003151  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100318F  +
cmp ecx 20Bh +
jnz loc_1003151  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1003151  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100319D  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1003151  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100B280 eax +
call sub_10034C2  +
push eax  +
call ds:__set_app_type  +
or dword_100B920 0FFFFFFFFh +
or dword_100B924 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100B2A0 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100B29C +
mov [eax] ecx +
call sub_1003454  +
cmp dword_100B014 0 +
jnz loc_10031FB  +
push offset sub_1003454  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100343C  +
xor eax eax +
retn   +
***
call sub_1003501  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_100B004 +
jnz loc_1003222  +
retn 0  +
jmp loc_1003597  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1003274  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1003274  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100326E  +
cmp eax 19930521h +
jz loc_100326E  +
cmp eax 19930522h +
jz loc_100326E  +
cmp eax 1994000h +
jnz loc_1003274  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1003234+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10032B6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10032B2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100331D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1003315  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100331F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1003305  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_10032A0  +
pop ecx  +
test eax eax +
jz loc_1003386  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_10032E0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003386  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100338F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1003217  +
push offset dword_100B004  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10034B5  +
cmp ecx 0FFFFFFFFh +
jz loc_10034B5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10034AE  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10034AE  +
cmp edx 10000000h +
jnb loc_10034AE  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10034AE  +
jmp loc_10034A9  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10034F7  +
push eax  +
call sub_100345C  +
test eax eax +
jz loc_10034F7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10034EC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10034F7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100B004 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1003533  +
test eax ebx +
jz loc_1003533  +
not eax  +
mov dword_100B008 eax +
jmp loc_100358E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100357A  +
test dword_100B004 ebx +
jnz loc_100357F  +
mov esi 0BB40E64Fh +
mov dword_100B004 esi +
not esi  +
mov dword_100B008 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100B3A8 eax +
mov dword_100B3A4 ecx +
mov dword_100B3A0 edx +
mov dword_100B39C ebx +
mov dword_100B398 esi +
mov dword_100B394 edi +
mov word_100B3C0 ss +
mov word_100B3B4 cs +
mov word_100B390 ds +
mov word_100B38C es +
mov word_100B388 fs +
mov word_100B384 gs +
pushf   +
pop dword_100B3B8  +
mov eax [ebp+0] +
mov dword_100B3AC eax +
mov eax [ebp+4] +
mov dword_100B3B0 eax +
lea eax [ebp+8] +
mov dword_100B3BC eax +
mov eax [ebp-320h] +
mov dword_100B2F8 10001h +
mov eax dword_100B3B0 +
mov dword_100B2B4 eax +
mov dword_100B2A8 0C0000409h +
mov dword_100B2AC 1 +
mov eax dword_100B004 +
mov [ebp-328h] eax +
mov eax dword_100B008 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_10036AE  +
cmp [esi] al +
jz loc_10036AA  +
inc esi  +
dec edx  +
jnz loc_10036A2  +
test edx edx +
jnz loc_10036B3  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_10036C4  +
test eax eax +
jl loc_10036C1  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi eax +
xor eax eax +
test edx edx +
jz loc_10036DD  +
cmp edx [ebp+arg_4] +
jbe loc_10036E2  +
mov eax 80070057h +
test eax eax +
jl loc_10036F0  +
mov eax [ebp+arg_0] +
call sub_1003695  +
jmp loc_10036F3  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100372D  +
cmp [ebp+arg_4] eax +
jz loc_1003729  +
mov dl [ebx] +
test dl dl +
jz loc_1003729  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1003711  +
test esi esi +
jnz loc_1003734  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1003740  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_1003767  +
push 4  +
push eax  +
call TraceDeregisterExA  +
or dword ptr [esi] 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpWideCharStr] +
push esi  +
mov esi [ebp+arg_0] +
xor ecx ecx +
push ecx  +
push ecx  +
push 200h  +
lea edx [ebp+MultiByteStr] +
push edx  +
push 0FFFFFFFFh  +
push eax  +
push ecx  +
push 0FDE9h  +
call ds:WideCharToMultiByte  +
test eax eax +
mov eax dwTraceID +
jg loc_10037DC  +
cmp eax 0FFFFFFFFh +
jz loc_10037F4  +
push offset aTracew1Failed  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
jmp loc_10037F4  +
cmp eax 0FFFFFFFFh +
jz loc_10037F4  +
lea ecx [ebp+MultiByteStr] +
push ecx  +
push esi  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1003217  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_100381E  +
cmp edx 7FFFFFFFh +
jbe loc_1003823  +
mov eax 80070057h +
test eax eax +
jl loc_1003839  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_10036FD  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi 7FFFFFFFh +
push esi  +
push edi  +
lea eax [ebp+arg_0] +
call sub_10036CA  +
test eax eax +
jl loc_1003878  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
push esi  +
sub edx eax +
lea ecx [eax+edi] +
mov eax [ebp+arg_8] +
push 0  +
call sub_10036FD  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
push 3Fh  +
lea eax [ebp-43h] +
push ebx  +
push eax  +
mov [ebp+var_48] edi +
mov [ebp+szCallerName] bl +
call memset  +
mov eax large fs:18h +
add esp 0Ch +
cmp [eax+0F9Ch] ebx +
jnz loc_1003987  +
cmp dword ptr [esi] 0FFFFFFFFh +
jnz loc_1003987  +
cmp dword_100B01C ebx +
jnz loc_10038E0  +
push 5  +
pop eax  +
jmp loc_1003989  +
lea eax [ebp+szCallerName] +
cmp [ebp+arg_4] bl +
jz loc_100395F  +
push 40h  +
pop edi  +
push edi  +
push eax  +
push ebx  +
call ds:GetCurrentProcess  +
push eax  +
call K32GetModuleBaseNameA  +
test eax eax +
jz loc_100393E  +
xor eax eax +
cmp [ebp+szCallerName] bl +
jz loc_1003918  +
cmp [ebp+eax+szCallerName] 2Eh +
jz loc_1003918  +
cmp eax 3Fh +
jnb loc_1003918  +
inc eax  +
cmp [ebp+eax+szCallerName] bl +
jnz loc_1003905  +
push offset a_  +
mov [ebp+eax+szCallerName] bl +
push edi  +
lea eax [ebp+szCallerName] +
push eax  +
call sub_1003842  +
cmp eax ebx +
jl loc_1003956  +
push [ebp+var_48]  +
lea eax [ebp+szCallerName] +
push edi  +
push eax  +
call sub_1003842  +
jmp loc_1003952  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1003954  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
jge loc_1003968  +
push [ebp+var_48]  +
lea eax [ebp+szCallerName] +
push edi  +
jmp loc_1003962  +
push edi  +
push 40h  +
push eax  +
call sub_1003808  +
push ebx  +
lea eax [ebp+szCallerName] +
push eax  +
call TraceRegisterExA  +
mov [esi] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1003987  +
mov dword_100B01C ebx +
call ds:GetLastError  +
jmp loc_1003989  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1003217  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dwTraceID  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003883  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+hModule] +
xor ebx ebx +
test edi edi +
jnz loc_10039D5  +
push 57h  +
pop eax  +
jmp loc_1003C04  +
push esi  +
mov esi ds:GetProcAddress +
push offset aRasconnectionn  +
push edi  +
call esi  +
mov dword_100B5C8 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasdeleteent_1  +
push edi  +
call esi  +
mov dword_100B5CC eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasdialw  +
push edi  +
call esi  +
mov dword_100B5D0 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasenumentries  +
push edi  +
call esi  +
mov dword_100B5D8 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasenumconnect  +
push edi  +
call esi  +
mov dword_100B5D4 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasgetautodial  +
push edi  +
call esi  +
mov dword_100B5DC eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasgetautodi_0  +
push edi  +
call esi  +
mov dword_100B5E0 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasgetconnects  +
push edi  +
call esi  +
mov dword_100B5E4 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasgetcredenti  +
push edi  +
call esi  +
mov dword_100B5EC eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasgetentrydia  +
push edi  +
call esi  +
mov dword_100B5F0 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasgeterrorstr  +
push edi  +
call esi  +
mov dword_100B5F8 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasgethport  +
push edi  +
call esi  +
mov dword_100B5FC eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasgetprojecti  +
push edi  +
call esi  +
mov dword_100B600 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasgetsubentry  +
push edi  +
call esi  +
mov dword_100B604 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRashangupw  +
push edi  +
call esi  +
mov dword_100B608 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRassetautodial  +
push edi  +
call esi  +
mov dword_100B614 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRassetautodi_0  +
push edi  +
call esi  +
mov dword_100B618 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRassetcredenti  +
push edi  +
call esi  +
mov dword_100B61C eax +
test eax eax +
jz loc_1003BF3  +
push offset aRassetoldpassw  +
push edi  +
call esi  +
mov dword_100B620 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasgetcountryi  +
push edi  +
call esi  +
mov dword_100B5E8 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasinvokeeapui  +
push edi  +
call esi  +
mov dword_100B60C eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasseteapuserd  +
push edi  +
call esi  +
mov dword_100B610 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasgetentrypro  +
push edi  +
call esi  +
mov dword_100B5F4 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasvalidateent  +
push edi  +
call esi  +
mov dword_100B624 eax +
test eax eax +
jz loc_1003BF3  +
push offset aRaswriteshared  +
push edi  +
call esi  +
mov dword_100B62C eax +
test eax eax +
jz loc_1003BF3  +
push offset aRasgetautodi_1  +
push edi  +
call esi  +
mov dword_100B630 eax +
test eax eax +
jz loc_1003BF3  +
push offset aDwenumentrydet  +
push edi  +
call esi  +
mov dword_100B634 eax +
test eax eax +
jnz loc_1003BFB  +
call ds:GetLastError  +
mov ebx eax +
mov dword_100B5C4 edi +
mov eax ebx +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp dword_100B5C4 0 +
jz loc_1003C1B  +
xor eax eax +
retn   +
push esi  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov esi eax +
test esi esi +
jnz loc_1003C34  +
pop esi  +
jmp ds:GetLastError  +
push esi  +
call sub_10039BD  +
test eax eax +
jnz loc_1003C44  +
mov dword_100B5C4 esi +
pop esi  +
retn   +
***
cmp hLibModule 0 +
jz loc_1003C57  +
xor eax eax +
retn   +
push esi  +
push edi  +
push offset aRasdlg_dll  +
call ds:LoadLibraryW  +
mov edi eax +
test edi edi +
jz loc_1003CBF  +
mov esi ds:GetProcAddress +
push offset aRasphonebook_1  +
push edi  +
call esi  +
mov dword_100B644 eax +
test eax eax +
jz loc_1003CBF  +
push offset aRasentrydlgw  +
push edi  +
call esi  +
mov dword_100B640 eax +
test eax eax +
jz loc_1003CBF  +
push offset aRouterentrydlg  +
push edi  +
call esi  +
mov dword_100B648 eax +
test eax eax +
jz loc_1003CBF  +
push offset aRasdialdlgw  +
push edi  +
call esi  +
mov dword_100B63C eax +
test eax eax +
jz loc_1003CBF  +
mov hLibModule edi +
pop edi  +
xor eax eax +
pop esi  +
retn   +
pop edi  +
pop esi  +
jmp ds:GetLastError  +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
call dword_100B7D0  +
jmp loc_1003D05  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-20h] eax +
mov [ebp-1Ch] eax +
push dword ptr [ebp-1Ch]  +
call I_RpcExceptionFilter  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
call __SEH_prolog4  +
and [ebp+var_1C] 0 +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1003D37  +
xor eax eax +
jmp loc_1003D8D  +
mov ecx [eax] +
test ecx ecx +
jz loc_1003D33  +
cmp dword ptr [eax+8] 4 +
jnz loc_1003D4E  +
push eax  +
call sub_1003CCC  +
mov [ebp+var_1C] eax +
jmp loc_1003D8A  +
and [ebp+ms_exc.disabled] 0 +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
call dword_100B7D4  +
jmp loc_1003D80  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-20h] eax +
mov [ebp-1Ch] eax +
push dword ptr [ebp-1Ch]  +
call I_RpcExceptionFilter  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn 10h  +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
call dword_100B7D8  +
jmp loc_1003DD9  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-20h] eax +
mov [ebp-1Ch] eax +
push dword ptr [ebp-1Ch]  +
call I_RpcExceptionFilter  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1003E10  +
cmp dword ptr [eax+4] 0 +
jnz loc_1003E10  +
push [ebp+uSize]  +
push [ebp+lpBuffer]  +
push eax  +
call sub_1003D9A  +
jmp loc_1003E1C  +
push [ebp+uSize]  +
push [ebp+lpBuffer]  +
call ds:GetSystemDirectoryW  +
pop ebp  +
retn 0Ch  +
***
call __SEH_prolog4_GS  +
mov esi [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov [ebp+var_7B4] eax +
push 78Ch  +
push 0  +
lea eax [ebp+var_7A8] +
push eax  +
call memset  +
add esp 0Ch +
and [ebp+ms_exc.disabled] 0 +
push [ebp+arg_8]  +
lea eax [ebp+var_7A8] +
push eax  +
push dword ptr [esi]  +
call dword_100B7DC  +
jmp loc_1003E96  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-7B0h] eax +
mov [ebp-7ACh] eax +
push dword ptr [ebp-7ACh]  +
call I_RpcExceptionFilter  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-7B0h] +
mov [ebp+var_7AC] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
test eax eax +
jnz loc_1003EC9  +
lea eax [ebp+var_7A8] +
push eax  +
push [ebp+var_7B4]  +
call sub_100623B  +
mov esi eax +
lea eax [ebp+var_7A8] +
push eax  +
call sub_100661D  +
mov eax esi +
call __SEH_epilog4_GS  +
retn 0Ch  +
***
call __SEH_prolog4_GS  +
mov edi [ebp+arg_0] +
mov esi [ebp+arg_4] +
xor ebx ebx +
mov [ebp+var_7A8] ebx +
push 788h  +
push ebx  +
lea eax [ebp+var_7A4] +
push eax  +
call memset  +
add esp 0Ch +
push esi  +
lea eax [ebp+var_7A8] +
push eax  +
call sub_100680E  +
mov [ebp+var_7AC] eax +
cmp eax ebx +
jnz loc_1003F6B  +
mov [ebp+ms_exc.disabled] ebx +
push [ebp+arg_8]  +
lea eax [ebp+var_7A8] +
push eax  +
push dword ptr [edi]  +
call dword_100B7F0  +
jmp loc_1003F5E  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-7B0h] eax +
mov [ebp-7ACh] eax +
push dword ptr [ebp-7ACh]  +
call I_RpcExceptionFilter  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-7B0h] +
mov [ebp+var_7AC] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
lea eax [ebp+var_7A8] +
push eax  +
call sub_100661D  +
mov eax [ebp+var_7AC] +
call __SEH_epilog4_GS  +
retn 0Ch  +
***
xor eax eax +
mov dword_100B5C8 eax +
mov dword_100B5CC eax +
mov dword_100B5D0 eax +
mov dword_100B5D8 eax +
mov dword_100B5D4 eax +
mov dword_100B5E4 eax +
mov dword_100B5EC eax +
mov dword_100B5F8 eax +
mov dword_100B608 eax +
mov dword_100B5DC eax +
mov dword_100B5E0 eax +
mov dword_100B600 eax +
mov dword_100B614 eax +
mov dword_100B618 eax +
mov dword_100B604 eax +
mov dword_100B5FC eax +
mov dword_100B61C eax +
mov dword_100B620 eax +
mov dword_100B5E8 eax +
mov dword_100B624 eax +
mov dword_100B634 eax +
retn   +
***
mov ecx dword_100B5C4 +
test ecx ecx +
jz locret_100401B  +
call sub_1003F8A  +
and dword_100B5C4 0 +
push ecx  +
call ds:FreeLibrary  +
retn   +
***
mov eax hLibModule +
xor ecx ecx +
cmp eax ecx +
jz locret_1004051  +
push eax  +
mov dword_100B644 ecx +
mov dword_100B640 ecx +
mov dword_100B648 ecx +
mov dword_100B63C ecx +
mov hLibModule ecx +
call ds:FreeLibrary  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 578h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_578] eax +
cmp eax edi +
jz loc_1004158  +
cmp ebx edi +
jz loc_1004158  +
mov [ebx] edi +
mov [eax] edi +
lea eax [ebp+var_570] +
push eax  +
lea eax [ebp+dwBytes] +
push eax  +
lea eax [ebp+var_56C] +
mov esi 568h +
push eax  +
mov [ebp+dwBytes] esi +
mov [ebp+var_56C] esi +
call dword_100B5D4  +
cmp eax edi +
jnz loc_1004100  +
cmp [ebp+var_570] edi +
jnz loc_10040D0  +
xor eax eax +
jmp loc_100415B  +
push esi  +
push 40h  +
call ds:GlobalAlloc  +
cmp eax edi +
jnz loc_10040E1  +
push 8  +
jmp loc_100415A  +
mov ecx 15Ah +
lea esi [ebp+var_56C] +
mov edi eax +
movs   +
mov ecx [ebp+var_578] +
mov [ecx] eax +
mov dword ptr [ebx] 1 +
jmp loc_10040C9  +
cmp eax 25Bh +
jnz loc_100415B  +
push [ebp+dwBytes]  +
push 40h  +
call ds:GlobalAlloc  +
mov edi eax +
test edi edi +
jz loc_10040DD  +
lea eax [ebp+var_570] +
push eax  +
lea eax [ebp+dwBytes] +
push eax  +
push edi  +
mov [edi] esi +
call dword_100B5D4  +
mov esi eax +
test esi esi +
jz loc_1004143  +
push edi  +
call ds:GlobalFree  +
mov eax esi +
jmp loc_100415B  +
mov eax [ebp+var_578] +
mov [eax] edi +
mov eax [ebp+var_570] +
mov [ebx] eax +
jmp loc_10040C9  +
push 57h  +
pop eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1003217  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1004192  +
push offset aHrasconnfromen  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
jnz loc_100419E  +
xor eax eax +
jmp loc_100421C  +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+hMem] +
push eax  +
xor ebx ebx +
call sub_1004057  +
test eax eax +
jnz loc_10041FE  +
cmp [ebp+var_4] edi +
jbe loc_10041FE  +
push esi  +
mov esi [ebp+hMem] +
cmp [ebp+lpString2] ebx +
jz loc_10041D3  +
push [ebp+lpString2]  +
lea eax [esi+32Eh] +
push eax  +
call sub_1006A1A  +
test eax eax +
jnz loc_10041E3  +
push [ebp+arg_4]  +
lea eax [esi+8] +
push eax  +
call sub_1006A1A  +
test eax eax +
jz loc_10041F1  +
inc edi  +
add esi 568h +
cmp edi [ebp+var_4] +
jb loc_10041BB  +
jmp loc_10041F4  +
mov ebx [esi+4] +
push [ebp+hMem]  +
call ds:GlobalFree  +
pop esi  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1004219  +
push ebx  +
push offset aHrasconnfrom_0  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
mov eax ebx +
pop ebx  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0Ch  +
call sub_1006AFE  +
test eax eax +
jz loc_100424C  +
mov ecx [eax+8] +
mov edx [ebp+arg_0] +
mov [ecx] edx +
mov edx [ebp+arg_4] +
mov [ecx+4] edx +
mov edx [ebp+arg_8] +
mov [ecx+8] edx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
push 0  +
push 10h  +
call sub_1006AFE  +
mov edi eax +
test edi edi +
jz loc_10042C7  +
push esi  +
push [ebp+lpString]  +
mov esi [edi+8] +
call sub_1005DE7  +
push [ebp+arg_4]  +
mov [esi] eax +
call sub_1005DE7  +
push [ebp+arg_8]  +
mov [esi+4] eax +
call sub_1005DE7  +
mov ecx [ebp+arg_C] +
mov [esi+0Ch] ecx +
mov ecx [esi] +
mov [esi+8] eax +
test ecx ecx +
jz loc_10042A8  +
cmp dword ptr [esi+4] 0 +
jz loc_10042A8  +
test eax eax +
jz loc_10042A8  +
mov eax edi +
jmp loc_10042C6  +
push ecx  +
call sub_1005662  +
push dword ptr [esi+4]  +
call sub_1005662  +
push dword ptr [esi+8]  +
call sub_1005662  +
push edi  +
call sub_1006B5F  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1006B5F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi [edi+8] +
push dword ptr [esi]  +
call sub_1005662  +
push dword ptr [esi+4]  +
call sub_1005662  +
push dword ptr [esi+8]  +
call sub_1005662  +
push edi  +
call sub_1006B5F  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+7Ch] 0 +
jz loc_100438A  +
push edi  +
push offset loc_10042E1  +
push dword ptr [esi+44h]  +
call sub_1006BD7  +
mov edi offset loc_1005C81 +
push edi  +
push dword ptr [esi+58h]  +
call sub_1006BD7  +
push edi  +
push dword ptr [esi+5Ch]  +
call sub_1006BD7  +
push edi  +
push dword ptr [esi+64h]  +
call sub_1006BD7  +
push edi  +
push dword ptr [esi+68h]  +
call sub_1006BD7  +
push offset loc_10042D1  +
push dword ptr [esi+6Ch]  +
call sub_1006BD7  +
push dword ptr [esi+50h]  +
call sub_1005662  +
push dword ptr [esi+54h]  +
call sub_1005662  +
push dword ptr [esi+48h]  +
call sub_1005662  +
push dword ptr [esi+78h]  +
call sub_1005662  +
pop edi  +
push 84h  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 154h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor esi esi +
push esi  +
mov [ebp+var_154] edi +
call sub_1006AD2  +
mov [ebp+var_144] eax +
cmp eax esi +
jz loc_1004575  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push esi  +
push offset SubKey  +
push ebx  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1004561  +
mov edi ds:RegEnumKeyExW +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push esi  +
push [ebp+hKey]  +
mov [ebp+dwIndex] esi +
mov [ebp+cbName] 94h +
call edi  +
mov ebx 103h +
jmp loc_1004547  +
cmp eax esi +
jnz loc_1004517  +
lea eax [ebp+lpString] +
push eax  +
lea eax [ebp+var_140] +
push eax  +
lea eax [ebp+Name] +
push eax  +
call sub_1005F23  +
test eax eax +
jz loc_1004517  +
lea eax [ebp+phkResult] +
push eax  +
push 20019h  +
push esi  +
lea eax [ebp+Name] +
push eax  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10044FF  +
lea eax [ebp+var_150] +
push eax  +
push offset aDevicetype  +
push [ebp+phkResult]  +
call sub_1006C17  +
lea eax [ebp+hMem] +
push eax  +
push offset aNumber  +
push [ebp+phkResult]  +
call sub_1006D7B  +
test eax eax +
jnz loc_10044F3  +
push [ebp+var_150]  +
push [ebp+hMem]  +
push [ebp+var_140]  +
push [ebp+lpString]  +
call sub_1004255  +
cmp eax esi +
jz loc_10044E7  +
push eax  +
push [ebp+var_144]  +
call sub_1006A93  +
push [ebp+hMem]  +
call ds:GlobalFree  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
push [ebp+var_140]  +
call ds:GlobalFree  +
push [ebp+lpString]  +
call ds:GlobalFree  +
inc [ebp+dwIndex]  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push [ebp+dwIndex]  +
mov [ebp+cbName] 94h +
push [ebp+hKey]  +
call edi  +
cmp eax ebx +
jnz loc_100443A  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov edi [ebp+var_154] +
push offset loc_10042E1  +
push dword ptr [edi]  +
call sub_1006BD7  +
mov eax [ebp+var_144] +
mov [edi] eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1003217  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor esi esi +
push esi  +
mov [ebp+var_40] edi +
call sub_1006AD2  +
mov [ebp+var_38] eax +
cmp eax esi +
jz loc_10046C0  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push esi  +
push offset aLocation  +
push ebx  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10046AF  +
mov edi ds:RegEnumKeyExW +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+WideCharStr] +
push eax  +
push esi  +
push [ebp+hKey]  +
mov [ebp+dwIndex] esi +
mov [ebp+cbName] 0Ch +
call edi  +
mov ebx 103h +
jmp loc_100469B  +
cmp eax esi +
jnz loc_100467D  +
lea eax [ebp+phkResult] +
push eax  +
push 20019h  +
push esi  +
lea eax [ebp+WideCharStr] +
push eax  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100467D  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_1005859  +
mov [ebp+var_3C] eax +
lea eax [ebp+var_34] +
push eax  +
push offset aPrefix  +
push [ebp+phkResult]  +
mov [ebp+var_34] esi +
call sub_1006C17  +
lea eax [ebp+var_30] +
push eax  +
push offset aSuffix  +
push [ebp+phkResult]  +
mov [ebp+var_30] esi +
call sub_1006C17  +
push [ebp+var_30]  +
push [ebp+var_34]  +
push [ebp+var_3C]  +
call sub_1004226  +
cmp eax esi +
jz loc_100467D  +
push eax  +
push [ebp+var_38]  +
call sub_1006A93  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
inc [ebp+dwIndex]  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+WideCharStr] +
push eax  +
push [ebp+dwIndex]  +
mov [ebp+cbName] 0Ch +
push [ebp+hKey]  +
call edi  +
cmp eax ebx +
jnz loc_1004606  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov edi [ebp+var_40] +
push offset loc_10042D1  +
push dword ptr [edi]  +
call sub_1006BD7  +
mov eax [ebp+var_38] +
mov [edi] eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1003217  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10046F6  +
push offset aReaduserprefer  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
or [ebp+var_4] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+hKey] +
lea eax [ebp+var_4] +
push eax  +
push offset aPhonebookmode  +
push edi  +
call sub_1006C17  +
mov eax [ebp+var_4] +
mov esi [ebp+arg_4] +
cmp eax 0FFFFFFFFh +
jz loc_1004723  +
and [ebp+arg_4] 0 +
mov [esi+4Ch] eax +
jmp loc_100472A  +
mov [ebp+arg_4] 1 +
push esi  +
push offset aOperatordial  +
push edi  +
call sub_1006C17  +
lea eax [esi+4] +
push eax  +
push offset aPreviewphonenu  +
push edi  +
call sub_1006C17  +
lea eax [esi+8] +
push eax  +
push offset aUselocation  +
push edi  +
call sub_1006C17  +
lea eax [esi+0Ch] +
push eax  +
push offset aShowlights  +
push edi  +
call sub_1006C17  +
lea eax [esi+10h] +
push eax  +
push offset aShowconnectsta  +
push edi  +
call sub_1006C17  +
lea ebx [esi+24h] +
push ebx  +
push offset aNewentrywizard  +
push edi  +
call sub_1006C17  +
lea eax [esi+14h] +
push eax  +
push offset aCloseondial  +
push edi  +
call sub_1006C17  +
lea eax [esi+18h] +
push eax  +
push offset aAllowlogonphon  +
push edi  +
call sub_1006C17  +
lea eax [esi+1Ch] +
push eax  +
push offset aAllowlogonloca  +
push edi  +
call sub_1006C17  +
lea eax [esi+20h] +
push eax  +
push offset aSkipconnectcom  +
push edi  +
call sub_1006C17  +
lea eax [esi+28h] +
push eax  +
push offset aRedialattempts  +
push edi  +
call sub_1006C17  +
lea eax [esi+2Ch] +
push eax  +
push offset aRedialseconds  +
push edi  +
call sub_1006C17  +
lea eax [esi+30h] +
push eax  +
push offset aIdlehangupseco  +
push edi  +
call sub_1006C17  +
lea eax [esi+34h] +
push eax  +
push offset aRedialonlinkfa  +
push edi  +
call sub_1006C17  +
lea eax [esi+38h] +
push eax  +
push offset aPopupontopwhen  +
push edi  +
call sub_1006C17  +
lea eax [esi+3Ch] +
push eax  +
push offset aExpandautodial  +
push edi  +
call sub_1006C17  +
lea eax [esi+40h] +
push eax  +
push offset aCallbackmode  +
push edi  +
call sub_1006C17  +
lea eax [esi+60h] +
push eax  +
push offset aUseareaandcoun  +
push edi  +
call sub_1006C17  +
lea eax [esi+70h] +
push eax  +
push offset aWindowx  +
push edi  +
call sub_1006C17  +
lea eax [esi+74h] +
push eax  +
push offset aWindowy  +
push edi  +
call sub_1006C17  +
lea eax [esi+44h] +
push eax  +
push edi  +
mov dword ptr [ebx] 1 +
call sub_10043A4  +
push 1  +
lea eax [esi+58h] +
push eax  +
push offset aPhonebooks  +
push edi  +
call sub_1006C64  +
mov ebx eax +
test ebx ebx +
jnz loc_10049CB  +
push 1  +
lea eax [esi+5Ch] +
push eax  +
push offset aAreacodes  +
push edi  +
call sub_1006C64  +
mov ebx eax +
test ebx ebx +
jnz loc_10049CB  +
mov ebx offset aPrefixes +
push ebx  +
push edi  +
call sub_1006F27  +
test eax eax +
jz loc_10048C0  +
push 1  +
lea eax [esi+64h] +
push eax  +
push ebx  +
push edi  +
call sub_1006C64  +
mov ebx eax +
test ebx ebx +
jnz loc_10049CB  +
push 1  +
lea eax [esi+68h] +
push eax  +
push offset aSuffixes  +
push edi  +
call sub_1006C64  +
mov ebx eax +
test ebx ebx +
jnz loc_10049CB  +
lea eax [esi+6Ch] +
push eax  +
push edi  +
call sub_100458B  +
lea eax [esi+48h] +
push eax  +
push offset aLastcallbackby  +
push edi  +
call sub_1006D7B  +
mov ebx eax +
test ebx ebx +
jnz loc_10049CB  +
lea eax [ebp+hKey] +
push eax  +
push offset ValueName  +
push edi  +
call sub_1006D7B  +
mov ebx eax +
test ebx ebx +
jnz loc_10049CB  +
mov eax [ebp+hKey] +
push eax  +
cmp [eax] bx +
jnz loc_10049A7  +
call ds:GlobalFree  +
lea eax [esi+50h] +
push eax  +
push offset aPersonalphon_0  +
push edi  +
call sub_1006D7B  +
mov ebx eax +
test ebx ebx +
jnz loc_10049CB  +
lea eax [esi+54h] +
push eax  +
push offset aAlternatephone  +
push edi  +
call sub_1006D7B  +
mov ebx eax +
test ebx ebx +
jnz loc_10049CB  +
lea eax [esi+78h] +
push eax  +
push offset aDefaultentry  +
push edi  +
call sub_1006D7B  +
mov ebx eax +
test ebx ebx +
jnz loc_10049CB  +
cmp [ebp+arg_4] eax +
jz loc_10049D1  +
and [ebp+hKey] eax +
lea eax [ebp+hKey] +
push eax  +
push offset aUsepersonalpho  +
push edi  +
call sub_1006D7B  +
mov ebx eax +
test ebx ebx +
jnz loc_10049CB  +
mov eax [ebp+hKey] +
test eax eax +
jz loc_10049D1  +
cmp word ptr [eax] 31h +
jnz loc_100499E  +
mov dword ptr [esi+4Ch] 1 +
push eax  +
call ds:GlobalFree  +
jmp loc_10049D1  +
call sub_10059DC  +
push eax  +
call sub_1005DE7  +
push [ebp+hKey]  +
mov [esi+50h] eax +
call ds:GlobalFree  +
cmp dword ptr [esi+50h] 0 +
jnz loc_1004943  +
push 8  +
pop ebx  +
push esi  +
call sub_1004316  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10049EC  +
push ebx  +
push offset aReaduserpref_0  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 144h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+hKey] +
push esi  +
mov [ebp+var_134] ecx +
lea ecx [ebp+dwDisposition] +
push ecx  +
lea ecx [ebp+phkResult] +
push ecx  +
xor esi esi +
push esi  +
push 2000Eh  +
push esi  +
push offset Class  +
push esi  +
push offset SubKey  +
push eax  +
call ds:RegCreateKeyExW  +
cmp eax esi +
jnz loc_1004B94  +
push ebx  +
push edi  +
mov edi ds:RegEnumKeyExW +
jmp loc_1004A72  +
push esi  +
push esi  +
lea eax [ebp+var_12C] +
push eax  +
push [ebp+phkResult]  +
call ds:RegDeleteKeyExW  +
mov ebx eax +
cmp ebx esi +
jnz loc_1004A9D  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_13C] +
push eax  +
lea eax [ebp+var_12C] +
push eax  +
push esi  +
push [ebp+phkResult]  +
mov [ebp+var_13C] 94h +
call edi  +
mov ebx eax +
cmp ebx esi +
jz loc_1004A57  +
cmp ebx 103h +
jnz loc_1004AA7  +
xor ebx ebx +
cmp ebx esi +
jnz loc_1004B84  +
mov eax [ebp+var_134] +
mov eax [eax] +
mov [ebp+var_138] eax +
cmp eax esi +
jz loc_1004B84  +
jmp loc_1004ACD  +
mov eax [ebp+var_138] +
mov edi [eax+8] +
push dword ptr [edi]  +
push dword ptr [edi+4]  +
call sub_1005D3B  +
mov [ebp+var_134] eax +
cmp eax esi +
jz loc_1004B59  +
lea ecx [ebp+dwDisposition] +
push ecx  +
lea ecx [ebp+var_140] +
push ecx  +
push esi  +
push 20006h  +
push esi  +
push offset Class  +
push esi  +
push eax  +
push [ebp+phkResult]  +
call ds:RegCreateKeyExW  +
mov ebx eax +
cmp ebx esi +
jnz loc_1004B79  +
push dword ptr [edi+0Ch]  +
push offset aDevicetype  +
push [ebp+var_140]  +
call sub_1006F56  +
mov ebx eax +
cmp ebx esi +
jnz loc_1004B40  +
push dword ptr [edi+8]  +
push offset aNumber  +
push [ebp+var_140]  +
call sub_1006F7A  +
mov ebx eax +
push [ebp+var_140]  +
call ds:RegCloseKey  +
push [ebp+var_134]  +
call sub_1005662  +
jmp loc_1004B5C  +
push 8  +
pop ebx  +
cmp ebx esi +
jnz loc_1004B84  +
mov eax [ebp+var_138] +
mov eax [eax+4] +
mov [ebp+var_138] eax +
cmp eax esi +
jnz loc_1004AC7  +
jmp loc_1004B84  +
push [ebp+var_134]  +
call sub_1005662  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
pop edi  +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1003217  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push 21h  +
pop ecx  +
mov esi offset dword_10016E0 +
mov edi ebx +
movs   +
xor esi esi +
push esi  +
call sub_1006AD2  +
push esi  +
mov [ebx+44h] eax +
call sub_1006AD2  +
push esi  +
mov [ebx+58h] eax +
call sub_1006AD2  +
push esi  +
mov [ebx+5Ch] eax +
call sub_1006AD2  +
push esi  +
mov [ebx+64h] eax +
call sub_1006AD2  +
push esi  +
mov [ebx+68h] eax +
call sub_1006AD2  +
mov [ebx+6Ch] eax +
cmp [ebx+44h] esi +
jz loc_1004C9E  +
cmp [ebx+58h] esi +
jz loc_1004C9E  +
cmp [ebx+5Ch] esi +
jz loc_1004C9E  +
cmp [ebx+64h] esi +
jz loc_1004C9E  +
cmp [ebx+68h] esi +
jz loc_1004C9E  +
cmp eax esi +
jz loc_1004C9E  +
push offset a0  +
call sub_1005EF0  +
cmp eax esi +
jz loc_1004C3B  +
push eax  +
push dword ptr [ebx+64h]  +
call sub_1006A93  +
push offset a9  +
call sub_1005EF0  +
cmp eax esi +
jz loc_1004C52  +
push eax  +
push dword ptr [ebx+64h]  +
call sub_1006A93  +
push offset a8  +
call sub_1005EF0  +
cmp eax esi +
jz loc_1004C69  +
push eax  +
push dword ptr [ebx+64h]  +
call sub_1006A93  +
push offset a70  +
call sub_1005EF0  +
cmp eax esi +
jz loc_1004C80  +
push eax  +
push dword ptr [ebx+64h]  +
call sub_1006A93  +
xor eax eax +
inc eax  +
cmp [ebp+arg_4] eax +
jnz loc_1004C8E  +
mov [ebx+0Ch] esi +
mov [ebx+20h] eax +
cmp [ebp+arg_4] 2 +
jnz loc_1004C97  +
mov [ebx+40h] esi +
mov [ebx+7Ch] eax +
xor eax eax +
jmp loc_1004CA7  +
push ebx  +
call sub_1004316  +
push 8  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+hKey] +
push esi  +
mov [ebp+var_24] ecx +
lea ecx [ebp+dwDisposition] +
push ecx  +
lea ecx [ebp+phkResult] +
push ecx  +
xor esi esi +
push esi  +
push 2000Eh  +
push esi  +
push offset Class  +
push esi  +
push offset aLocation  +
push eax  +
call ds:RegCreateKeyExW  +
cmp eax esi +
jnz loc_1004DE8  +
push ebx  +
push edi  +
mov edi ds:RegEnumKeyExW +
jmp loc_1004D19  +
push esi  +
push esi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+phkResult]  +
call ds:RegDeleteKeyExW  +
mov ebx eax +
cmp ebx esi +
jnz loc_1004D38  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+phkResult]  +
mov [ebp+var_2C] 0Ch +
call edi  +
mov ebx eax +
cmp ebx esi +
jz loc_1004D04  +
cmp ebx 103h +
jnz loc_1004D42  +
xor ebx ebx +
cmp ebx esi +
jnz loc_1004DDB  +
mov eax [ebp+var_24] +
mov eax [eax] +
mov [ebp+var_24] eax +
cmp eax esi +
jz loc_1004DDB  +
jmp loc_1004D5F  +
mov eax [ebp+var_24] +
mov edi [eax+8] +
push 0Ah  +
push 0Ch  +
lea eax [ebp+SubKey] +
push eax  +
push dword ptr [edi]  +
call sub_1005CCF  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
push 20006h  +
push esi  +
push offset Class  +
push esi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+phkResult]  +
call ds:RegCreateKeyExW  +
mov ebx eax +
cmp ebx esi +
jnz loc_1004DDB  +
push dword ptr [edi+4]  +
push offset aPrefix  +
push [ebp+var_28]  +
call sub_1006F56  +
mov ebx eax +
cmp ebx esi +
jnz loc_1004DC1  +
push dword ptr [edi+8]  +
push offset aSuffix  +
push [ebp+var_28]  +
call sub_1006F56  +
mov ebx eax +
push [ebp+var_28]  +
call ds:RegCloseKey  +
cmp ebx esi +
jnz loc_1004DDB  +
mov eax [ebp+var_24] +
mov eax [eax+4] +
mov [ebp+var_24] eax +
cmp eax esi +
jnz loc_1004D5C  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
pop edi  +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1003217  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1004E1B  +
push offset aWriteuserprefe  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
push ebx  +
mov ebx [ebp+hKey] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push dword ptr [esi]  +
push offset aOperatordial  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+4]  +
push offset aPreviewphonenu  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+8]  +
push offset aUselocation  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+0Ch]  +
push offset aShowlights  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+10h]  +
push offset aShowconnectsta  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+24h]  +
push offset aNewentrywizard  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+14h]  +
push offset aCloseondial  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+18h]  +
push offset aAllowlogonphon  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+1Ch]  +
push offset aAllowlogonloca  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+20h]  +
push offset aSkipconnectcom  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+28h]  +
push offset aRedialattempts  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+2Ch]  +
push offset aRedialseconds  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+30h]  +
push offset aIdlehangupseco  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+34h]  +
push offset aRedialonlinkfa  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+38h]  +
push offset aPopupontopwhen  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+3Ch]  +
push offset aExpandautodial  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+40h]  +
push offset aCallbackmode  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+4Ch]  +
push offset aPhonebookmode  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+60h]  +
push offset aUseareaandcoun  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+70h]  +
push offset aWindowx  +
push ebx  +
call sub_1006F56  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+74h]  +
push offset aWindowy  +
push ebx  +
call sub_1006F56  +
push dword ptr [esi+44h]  +
push ebx  +
call sub_10049FA  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push 1  +
push dword ptr [esi+58h]  +
push offset aPhonebooks  +
push ebx  +
call sub_1006FB3  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push 1  +
push dword ptr [esi+5Ch]  +
push offset aAreacodes  +
push ebx  +
call sub_1006FB3  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push 1  +
push dword ptr [esi+64h]  +
push offset aPrefixes  +
push ebx  +
call sub_1006FB3  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push 1  +
push dword ptr [esi+68h]  +
push offset aSuffixes  +
push ebx  +
call sub_1006FB3  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+6Ch]  +
push ebx  +
call sub_1004CB3  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+48h]  +
push offset aLastcallbackby  +
push ebx  +
call sub_1006F7A  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+50h]  +
push offset aPersonalphon_0  +
push ebx  +
call sub_1006F7A  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+54h]  +
push offset aAlternatephone  +
push ebx  +
call sub_1006F7A  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push dword ptr [esi+78h]  +
push offset aDefaultentry  +
push ebx  +
call sub_1006F7A  +
mov edi eax +
test edi edi +
jnz loc_10050F9  +
push offset ValueName  +
push ebx  +
call ds:RegDeleteValueW  +
and [esi+80h] edi +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1005114  +
push edi  +
push offset aWriteuserpre_0  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1005146  +
push [ebp+arg_4]  +
push offset aSetuserprefere  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
cmp [ebx+80h] esi +
jnz loc_100515C  +
xor eax eax +
jmp loc_10051DD  +
push edi  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 2000Eh  +
push esi  +
push offset Class  +
push esi  +
cmp [ebp+arg_4] esi +
jnz loc_1005183  +
push offset aSoftwareMicros  +
push 80000001h  +
jmp loc_100519F  +
cmp [ebp+arg_4] 1 +
jnz loc_1005195  +
push offset a_defaultSoftwa  +
push 80000003h  +
jmp loc_100519F  +
push offset aSoftwareMicr_0  +
push 80000002h  +
call ds:RegCreateKeyExW  +
mov edi eax +
cmp edi esi +
jnz loc_10051BF  +
push ebx  +
push [ebp+hKey]  +
call sub_1004DFC  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10051DA  +
push edi  +
push offset aSetuserprefe_0  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1005208  +
cmp dword ptr [eax+4] 0 +
jnz loc_1005208  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call sub_1003ED6  +
jmp loc_1005213  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1005122  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8Ch +
push ebx  +
push esi  +
mov esi ds:RegOpenKeyExW +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
mov ebx 20019h +
push ebx  +
push 0  +
push offset a_defaultSoft_0  +
mov edi 80000003h +
push edi  +
call esi  +
test eax eax +
jnz loc_10052D7  +
lea eax [ebp+hKey] +
push eax  +
push ebx  +
push 0  +
push offset a_defaultSoftwa  +
push edi  +
call esi  +
mov edi ds:RegCloseKey +
test eax eax +
jnz loc_1005271  +
push [ebp+hKey]  +
call edi  +
jmp loc_10052D2  +
push 1  +
lea eax [ebp+var_8C] +
push eax  +
call sub_1004BA8  +
mov esi eax +
test esi esi +
jnz loc_10052AB  +
lea eax [ebp+var_8C] +
push eax  +
push [ebp+phkResult]  +
call sub_10046D6  +
mov esi eax +
test esi esi +
jnz loc_10052AB  +
push 1  +
lea eax [ebp+var_8C] +
push eax  +
push esi  +
call sub_10051E8  +
mov esi eax +
lea eax [ebp+var_8C] +
push eax  +
call sub_1004316  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10052D2  +
push esi  +
push offset aMovelogonprefe  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
push [ebp+phkResult]  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8Ch +
push ebx  +
push edi  +
mov edi ds:RegOpenKeyExW +
lea eax [ebp+phkResult] +
push eax  +
push 20019h  +
push 0  +
push offset aSoftwareMicr_1  +
mov ebx 80000001h +
push ebx  +
call edi  +
test eax eax +
jnz loc_10053E2  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_100532E  +
push offset aGettingOldPref  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
push esi  +
push 0  +
lea eax [ebp+var_8C] +
push eax  +
call sub_1004BA8  +
mov esi eax +
test esi esi +
jnz loc_10053BD  +
lea eax [ebp+var_8C] +
push eax  +
push [ebp+phkResult]  +
call sub_10046D6  +
mov esi eax +
test esi esi +
jnz loc_10053BD  +
push eax  +
lea eax [ebp+var_8C] +
push eax  +
push esi  +
mov [ebp+var_C] 1 +
call sub_10051E8  +
mov esi eax +
test esi esi +
jnz loc_10053BD  +
lea eax [ebp+hKey] +
push eax  +
push 20006h  +
push esi  +
push offset aSoftwareMicr_2  +
push ebx  +
call edi  +
mov esi eax +
test esi esi +
jnz loc_10053BD  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10053A5  +
push offset aDeleteOldPrefs  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
push offset aRemoteaccess  +
push [ebp+hKey]  +
call sub_1006DE9  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10053E1  +
push esi  +
push offset aMoveuserprefer  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dwTraceID +
push ebx  +
push esi  +
mov esi [ebp+hKey] +
cmp eax 0FFFFFFFFh +
jz loc_1005410  +
push esi  +
push offset aGetuserprefere  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
test esi esi +
jnz loc_100541B  +
call sub_10052E1  +
jmp loc_1005425  +
cmp esi 1 +
jnz loc_1005425  +
call sub_100521C  +
push esi  +
push [ebp+arg_0]  +
call sub_1004BA8  +
mov ebx eax +
test ebx ebx +
jnz loc_10054B8  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
test esi esi +
jnz loc_1005452  +
push offset aSoftwareMicros  +
push 80000001h  +
jmp loc_100546D  +
cmp esi 1 +
jnz loc_1005463  +
push offset a_defaultSoftwa  +
push 80000003h  +
jmp loc_100546D  +
push offset aSoftwareMicr_0  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100549C  +
push [ebp+arg_0]  +
push [ebp+hKey]  +
call sub_10046D6  +
test eax eax +
jz loc_1005491  +
push esi  +
push [ebp+arg_0]  +
call sub_1004BA8  +
mov ebx eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_10054B8  +
mov ecx dwTraceID +
cmp ecx 0FFFFFFFFh +
jz loc_10054D3  +
push eax  +
push offset aRegopenkeyexD  +
push 0Ch  +
push ecx  +
call TracePrintfExA  +
add esp 10h +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10054D3  +
push ebx  +
push offset aGetuserprefe_0  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1005500  +
cmp dword ptr [eax+4] 0 +
jnz loc_1005500  +
push [ebp+hKey]  +
push [ebp+arg_4]  +
push eax  +
call sub_1003E25  +
jmp loc_100550B  +
push [ebp+hKey]  +
push [ebp+arg_4]  +
call sub_10053EB  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_100552F  +
cmp [ebp+arg_0] eax +
jnz loc_1005533  +
cmp ecx eax +
jnz loc_1005538  +
jmp loc_1005533  +
cmp ecx eax +
jz loc_1005538  +
cmp ecx [ebp+arg_4] +
jbe loc_100553D  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100557B  +
cmp [ebp+arg_4] eax +
jz loc_1005577  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1005577  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100555A  +
test esi esi +
jnz loc_1005583  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1005591  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ecx 2 +
jbe loc_10055C0  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+arg_0] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_10055F5  +
test [ebp+arg_8] 1000h +
jz loc_10055F5  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_100563D  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_1005625  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_100563D  +
test esi esi +
jbe loc_1005656  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_1005656  +
test [ebp+arg_8] 800h +
jz loc_1005656  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_1005673  +
xor eax eax +
pop ebp  +
retn 4  +
pop ebp  +
jmp ds:GlobalFree  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi [ebp+lpData] +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+lpData] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_10056B6  +
cmp [ebp+lpData] 4 +
jz loc_10056B9  +
mov eax 70Ch +
and dword ptr [edi] 0 +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+Data] 0 +
jz loc_10056F2  +
lea eax [ebp+Data] +
push eax  +
push offset aEnablein  +
push [ebp+hKey]  +
call sub_100567F  +
cmp eax 2 +
jz loc_10056ED  +
test eax eax +
jnz loc_10056F2  +
cmp dword ptr [ebp+Data] eax +
jz loc_10056F2  +
xor eax eax +
inc eax  +
jmp loc_1005719  +
cmp [ebp+arg_8] 0 +
jz loc_1005717  +
lea eax [ebp+Data] +
push eax  +
push offset aEnableroute  +
push [ebp+hKey]  +
call sub_100567F  +
cmp eax 2 +
jz loc_10056ED  +
test eax eax +
jnz loc_1005717  +
cmp dword ptr [ebp+Data] eax +
jnz loc_10056ED  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi ds:RegOpenKeyExW +
mov [ebp+var_4] esi +
mov ebx 2000000h +
lea eax [ebp+hKey] +
push eax  +
push ebx  +
push 0  +
push ds:off_10020EC[esi]  +
push 80000002h  +
call edi  +
test eax eax +
jnz loc_1005767  +
mov eax ds:dword_10020E8[esi] +
push [ebp+hKey]  +
or [ebp+var_4] eax +
call ds:RegCloseKey  +
add esi 0Ch +
cmp esi 18h +
jb loc_100573D  +
xor esi esi +
cmp [ebp+arg_0] esi +
jnz loc_100577B  +
cmp dword ptr [ebp+Data] esi +
jz loc_10057F3  +
cmp [ebp+var_4] esi +
jz loc_10057F3  +
lea eax [ebp+hKey] +
push eax  +
push ebx  +
push esi  +
push offset aSystemCurrentc  +
push 80000002h  +
call edi  +
test eax eax +
jnz loc_10057F0  +
mov eax [ebp+var_4] +
test ds:dword_10020E8[esi] eax +
jz loc_10057DD  +
lea eax [ebp+phkResult] +
push eax  +
push ebx  +
push 0  +
push ds:off_10020F0[esi]  +
push [ebp+hKey]  +
call edi  +
test eax eax +
jnz loc_10057DD  +
push [ebp+arg_0]  +
push dword ptr [ebp+Data]  +
push [ebp+phkResult]  +
call sub_10056C3  +
test eax eax +
jnz loc_10057D4  +
mov eax ds:dword_10020E8[esi] +
not eax  +
and [ebp+var_4] eax +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
add esi 0Ch +
cmp esi 18h +
jb loc_1005796  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_10057F3  +
mov [ebp+var_4] esi +
mov eax dwTraceID +
pop edi  +
pop esi  +
pop ebx  +
cmp eax 0FFFFFFFFh +
jz loc_1005813  +
push [ebp+var_4]  +
push offset aGetinstalledpr  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
mov eax [ebp+var_4] +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jz loc_1005842  +
cmp dword ptr [eax+4] 0 +
jnz loc_1005842  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1003D1C  +
jmp loc_1005850  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1005722  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpWideCharStr] +
xor ecx ecx +
push ecx  +
push ecx  +
push 0Ch  +
lea edx [ebp+MultiByteStr] +
push edx  +
push 0FFFFFFFFh  +
push eax  +
push ecx  +
push ecx  +
call ds:WideCharToMultiByte  +
lea eax [ebp+MultiByteStr] +
push eax  +
call atol  +
pop ecx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1003217  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:GlobalAlloc +
push esi  +
push edi  +
mov esi 100h +
push 200h  +
jmp loc_10058FB  +
push esi  +
push edi  +
push [ebp+uID]  +
push [ebp+hInstance]  +
call ds:LoadStringW  +
lea ecx [esi-1] +
cmp eax ecx +
jl loc_1005907  +
push edi  +
call ds:GlobalFree  +
mov eax dwTraceID +
add esi 100h +
cmp eax 0FFFFFFFFh +
jz loc_10058F7  +
push esi  +
push offset aGrowStringBufT  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
lea eax [esi+esi] +
push eax  +
push 40h  +
call ebx  +
mov edi eax +
test edi edi +
jnz loc_10058BA  +
jmp loc_1005926  +
push 42h  +
lea eax [eax+eax+2] +
push eax  +
push edi  +
call ds:GlobalReAlloc  +
test eax eax +
jnz loc_1005924  +
push edi  +
call ds:GlobalFree  +
xor edi edi +
jmp loc_1005926  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp [ebp+lpMultiByteStr] ebx +
jz loc_10059B3  +
mov esi ds:MultiByteToWideChar +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push ebx  +
push [ebp+CodePage]  +
call esi  +
mov edi eax +
lea eax [edi+edi+2] +
push eax  +
push 40h  +
call ds:GlobalAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_1005989  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1005985  +
push offset aStrdupwfromaMa  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
xor eax eax +
jmp loc_10059B5  +
push edi  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push 0  +
push [ebp+CodePage]  +
call esi  +
test eax eax +
jnz loc_10059B3  +
push ebx  +
call ds:GlobalFree  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1005985  +
push offset aStrdupwfromaCo  +
jmp loc_100597A  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FDE9h  +
push [ebp+lpMultiByteStr]  +
call sub_1005934  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpString] +
push esi  +
call ds:lstrlenW  +
lea eax [esi+eax*2] +
jmp loc_1005A0E  +
movzx ecx word ptr [eax] +
cmp cx 5Ch +
jz loc_1005A14  +
cmp cx 2Fh +
jz loc_1005A14  +
cmp cx 3Ah +
jz loc_1005A14  +
push eax  +
push esi  +
call ds:CharPrevW  +
cmp eax esi +
ja loc_10059F1  +
jmp loc_1005A1B  +
push eax  +
call ds:CharNextW  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_14]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_1005514  +
mov esi eax +
xor eax eax +
cmp esi eax +
jl loc_1005B39  +
test [ebp+arg_14] 100h +
push ebx  +
mov ebx ecx +
mov [ebp+arg_0] edi +
mov [ebp+var_4] ebx +
jz loc_1005A6B  +
cmp [ebp+arg_8] eax +
jnz loc_1005A6B  +
mov [ebp+arg_8] offset Class +
xor esi esi +
test [ebp+arg_14] 0FFFFE000h +
jz loc_1005A86  +
mov esi 80070057h +
cmp ecx eax +
jz loc_1005AF2  +
xor eax eax +
mov [edi] ax +
jmp loc_1005AF2  +
cmp ecx eax +
jnz loc_1005AA7  +
mov edx [ebp+arg_8] +
cmp [edx] ax +
jz loc_1005B23  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_1005AF2  +
mov [ebp+arg_0] eax +
push 7FFFFFFEh  +
lea eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_8] +
mov edx ecx +
mov ecx edi +
call sub_1005546  +
mov esi eax +
mov eax [ebp+arg_0] +
sub ebx eax +
lea ecx [edi+eax*2] +
mov [ebp+arg_0] ecx +
mov [ebp+var_4] ebx +
test esi esi +
jl loc_1005AEF  +
mov eax [ebp+arg_14] +
test eax 200h +
jz loc_1005B23  +
cmp ebx 1 +
jbe loc_1005B23  +
push [ebp+arg_0]  +
lea ecx [ebx+ebx] +
call sub_100559D  +
jmp loc_1005B23  +
mov ecx [ebp+arg_4] +
test [ebp+arg_14] 1C00h +
jz loc_1005B17  +
test ecx ecx +
jz loc_1005B17  +
push [ebp+arg_14]  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+var_4] +
xor ecx ecx +
call sub_10055CB  +
mov ebx [ebp+var_4] +
test esi esi +
jge loc_1005B23  +
cmp esi 8007007Ah +
jnz loc_1005B38  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1005B2F  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1005B38  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_10]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_1005514  +
mov esi eax +
test esi esi +
jl loc_1005C76  +
test [ebp+arg_10] 100h +
push ebx  +
mov ebx ecx +
mov [ebp+var_4] edi +
mov [ebp+var_8] ebx +
jz loc_1005B8C  +
cmp [ebp+arg_14] 0 +
jnz loc_1005B8C  +
mov [ebp+arg_14] offset Class +
xor esi esi +
test [ebp+arg_10] 0FFFFE000h +
jz loc_1005BAE  +
mov esi 80070057h +
test ecx ecx +
jz loc_1005C2F  +
xor eax eax +
mov [edi] ax +
jmp loc_1005C2F  +
test ecx ecx +
jnz loc_1005BCF  +
mov eax [ebp+arg_14] +
cmp [eax] si +
jz loc_1005C60  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_1005C2F  +
lea eax [ebp+arg_18] +
push eax  +
push [ebp+arg_14]  +
lea ebx [ecx-1] +
push ebx  +
push edi  +
xor esi esi +
call _vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1005BF1  +
cmp eax ebx +
ja loc_1005BF1  +
jz loc_1005BF6  +
jmp loc_1005BFE  +
mov esi 8007007Ah +
xor eax eax +
mov [edi+ebx*2] ax +
mov eax ebx +
mov ebx [ebp+arg_4] +
sub ebx eax +
lea ecx [edi+eax*2] +
mov [ebp+var_4] ecx +
mov [ebp+var_8] ebx +
test esi esi +
jl loc_1005C2C  +
mov eax [ebp+arg_10] +
test eax 200h +
jz loc_1005C60  +
cmp ebx 1 +
jbe loc_1005C60  +
push [ebp+var_4]  +
lea ecx [ebx+ebx] +
call sub_100559D  +
jmp loc_1005C60  +
mov ecx [ebp+arg_4] +
test [ebp+arg_10] 1C00h +
jz loc_1005C54  +
test ecx ecx +
jz loc_1005C54  +
push [ebp+arg_10]  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+var_8] +
xor ecx ecx +
call sub_10055CB  +
mov ebx [ebp+var_8] +
test esi esi +
jge loc_1005C60  +
cmp esi 8007007Ah +
jnz loc_1005C75  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1005C6C  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1005C75  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi+8]  +
call sub_1005662  +
push esi  +
call sub_1006B5F  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi+8] +
push dword ptr [esi]  +
call sub_1005662  +
push dword ptr [esi+4]  +
call sub_1005662  +
push edi  +
call sub_1006B5F  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_C] 0Ah +
jz loc_1005CE4  +
cmp [ebp+arg_C] 10h +
jz loc_1005D25  +
xor eax eax +
jmp loc_1005D32  +
push dword ptr [ebp+arg_0]  +
push offset aD  +
push 100h  +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1005B46  +
add esp 1Ch +
test eax eax +
jge loc_1005D2F  +
mov ecx dwTraceID +
cmp ecx 0FFFFFFFFh +
jz loc_1005CE0  +
push eax  +
push offset aLtotStringcchp  +
push 0Ch  +
push ecx  +
call TracePrintfExA  +
add esp 10h +
jmp loc_1005CE0  +
push dword ptr [ebp+arg_0]  +
push offset asc_1002190  +
jmp loc_1005CEC  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+lpString] +
mov eax offset Class +
mov dword ptr [ebp+var_4] ecx +
test ecx ecx +
jnz loc_1005D53  +
mov dword ptr [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov [ebp+lpString] ecx +
test ecx ecx +
jnz loc_1005D60  +
mov [ebp+lpString] eax +
push ebx  +
push esi  +
mov esi ds:lstrlenW +
push edi  +
push [ebp+lpString]  +
call esi  +
push dword ptr [ebp+var_4]  +
mov edi eax +
call esi  +
lea ebx [edi+eax] +
mov edi offset String +
push edi  +
call esi  +
lea esi [eax+ebx+1] +
lea eax [esi+esi] +
push eax  +
push 40h  +
call ds:GlobalAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_1005DD9  +
push [ebp+lpString]  +
push dword ptr [ebp+var_4]  +
push edi  +
push 100h  +
push 0  +
push 0  +
push esi  +
push ebx  +
call sub_1005B46  +
add esp 20h +
test eax eax +
jge loc_1005DD9  +
mov ecx dwTraceID +
cmp ecx 0FFFFFFFFh +
jz loc_1005DD0  +
push eax  +
push offset aPszfromdevicea  +
push 0Ch  +
push ecx  +
call TracePrintfExA  +
add esp 10h +
push ebx  +
call ds:GlobalFree  +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+lpString] edi +
jz loc_1005E6D  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov esi eax +
inc esi  +
lea eax [esi+esi] +
push eax  +
push 40h  +
call ds:GlobalAlloc  +
mov edi eax +
test edi edi +
jnz loc_1005E31  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1005E2D  +
push offset aStrdupMallocFa  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
xor eax eax +
jmp loc_1005E6F  +
push 100h  +
push 0  +
push 0  +
push [ebp+lpString]  +
push esi  +
push edi  +
call sub_1005A25  +
test eax eax +
jge loc_1005E6D  +
mov ecx dwTraceID +
cmp ecx 0FFFFFFFFh +
jz loc_1005E64  +
push eax  +
push offset aStrdupStringcc  +
push 0Ch  +
push ecx  +
call TracePrintfExA  +
add esp 10h +
push edi  +
call ds:GlobalFree  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10059C1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+lpMultiByteStr]  +
call sub_1005934  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
push 0  +
push 8  +
call sub_1006AFE  +
mov edi eax +
test edi edi +
jz loc_1005EE4  +
push esi  +
push [ebp+lpString]  +
mov esi [edi+8] +
call sub_1005DE7  +
push [ebp+arg_4]  +
mov [esi] eax +
call sub_1005DE7  +
cmp dword ptr [esi] 0 +
mov [esi+4] eax +
pop esi  +
jz loc_1005EDE  +
test eax eax +
jz loc_1005EDE  +
mov eax edi +
jmp loc_1005EE6  +
push edi  +
call sub_1005CA2  +
xor eax eax +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
call sub_1005DE7  +
mov esi eax +
test esi esi +
jz loc_1005F17  +
push 0  +
push esi  +
call sub_1006BB5  +
test eax eax +
jnz loc_1005F19  +
push esi  +
call ds:GlobalFree  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 12Ch +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
and dword ptr [ebx] 0 +
push edi  +
mov edi [ebp+arg_8] +
and dword ptr [edi] 0 +
push eax  +
push 94h  +
lea eax [ebp+String] +
push eax  +
call sub_1006A47  +
test eax eax +
jz loc_1005F66  +
xor eax eax +
jmp loc_1005FF7  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
test eax eax +
jle loc_1005FEC  +
push esi  +
lea eax [ebp+eax*2+String] +
push eax  +
jmp loc_1005F99  +
movzx eax word ptr [esi] +
cmp ax 29h +
jnz loc_1005F92  +
xor eax eax +
mov [esi] ax +
jmp loc_1005F98  +
cmp ax 28h +
jz loc_1005FB4  +
push esi  +
lea eax [ebp+String] +
push eax  +
call ds:CharPrevW  +
mov esi eax +
lea eax [ebp+String] +
cmp esi eax +
jnz loc_1005F82  +
jmp loc_1005FEB  +
push esi  +
call ds:CharNextW  +
push eax  +
call sub_1005DE7  +
mov [edi] eax +
jmp loc_1005FCF  +
lea eax [ebp+String] +
cmp esi eax +
jz loc_1005FD7  +
dec esi  +
dec esi  +
cmp word ptr [esi] 20h +
jz loc_1005FC5  +
xor eax eax +
mov [esi+2] ax +
lea eax [ebp+String] +
push eax  +
call sub_1005DE7  +
mov [ebx] eax +
pop esi  +
xor eax eax +
cmp [ebx] eax +
jz loc_1005FF7  +
cmp [edi] eax +
jz loc_1005FF7  +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1003217  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_100602B  +
push offset aCallbacklistfr  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
push ebx  +
push 0  +
call sub_1006AD2  +
mov ebx [ebp+arg_0] +
mov [ebx] eax +
test eax eax +
jnz loc_1006047  +
call ds:GetLastError  +
jmp loc_10060CE  +
push esi  +
mov esi [ebp+lpString] +
push edi  +
jmp loc_10060AC  +
push dword ptr [esi+228h]  +
xor eax eax +
mov [esi+20h] ax +
mov [esi+122h] ax +
mov [esi+224h] ax +
lea eax [esi+124h] +
push eax  +
lea edi [esi+22h] +
push edi  +
push esi  +
call sub_1004255  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_10060D3  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_100609C  +
push edi  +
push esi  +
push offset aCallbacklistto  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 14h +
push [ebp+arg_0]  +
push dword ptr [ebx]  +
call sub_1006A93  +
mov esi [esi+22Ch] +
test esi esi +
jnz loc_100604E  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10060CA  +
push offset aCallbacklist_0  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
call ds:GetLastError  +
jmp loc_10060CC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10060FF  +
push offset aStringlistfrom  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
push edi  +
push 0  +
call sub_1006AD2  +
mov edi [ebp+arg_0] +
mov [edi] eax +
test eax eax +
jnz loc_1006118  +
call ds:GetLastError  +
jmp loc_1006176  +
push ebx  +
push esi  +
mov esi [ebp+lpString] +
jmp loc_1006154  +
push esi  +
call sub_1005EF0  +
mov ebx eax +
test ebx ebx +
jz loc_100617B  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1006146  +
push esi  +
push offset aStringlisttorp  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
push ebx  +
push dword ptr [edi]  +
call sub_1006A93  +
mov esi [esi+200h] +
test esi esi +
jnz loc_100611F  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1006172  +
push offset aStringlistfr_0  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
xor eax eax +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 8  +
call ds:GetLastError  +
jmp loc_1006174  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10061A7  +
push offset aLocationlistfr  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
push edi  +
push 0  +
call sub_1006AD2  +
mov edi [ebp+arg_0] +
mov [edi] eax +
test eax eax +
jnz loc_10061C0  +
call ds:GetLastError  +
jmp loc_1006229  +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
jmp loc_1006207  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call sub_1004226  +
mov ebx eax +
test ebx ebx +
jz loc_100622E  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10061FC  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push offset aLocationlist_0  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 18h +
push ebx  +
push dword ptr [edi]  +
call sub_1006A93  +
mov esi [esi+0Ch] +
test esi esi +
jnz loc_10061C7  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1006225  +
push offset aLocationlist_1  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
xor eax eax +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 8  +
call ds:GetLastError  +
jmp loc_1006227  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_100625A  +
push offset aRpctoraspbuser  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_0] +
mov [edi] eax +
mov eax [esi+4] +
mov [edi+4] eax +
mov eax [esi+8] +
mov [edi+8] eax +
mov eax [esi+0Ch] +
mov [edi+0Ch] eax +
mov eax [esi+10h] +
mov [edi+10h] eax +
mov eax [esi+14h] +
mov [edi+14h] eax +
mov eax [esi+18h] +
mov [edi+18h] eax +
mov eax [esi+1Ch] +
mov [edi+1Ch] eax +
mov eax [esi+20h] +
mov [edi+20h] eax +
mov eax [esi+24h] +
mov [edi+24h] eax +
mov eax [esi+28h] +
mov [edi+28h] eax +
mov eax [esi+2Ch] +
mov [edi+2Ch] eax +
mov eax [esi+30h] +
mov [edi+30h] eax +
mov eax [esi+34h] +
mov [edi+34h] eax +
mov eax [esi+38h] +
mov [edi+38h] eax +
mov eax [esi+3Ch] +
mov [edi+3Ch] eax +
mov eax [esi+40h] +
mov [edi+40h] eax +
push dword ptr [esi+44h]  +
lea eax [edi+44h] +
push eax  +
call sub_100600C  +
test eax eax +
jnz loc_1006414  +
mov [esi+148h] ax +
lea eax [esi+48h] +
push eax  +
call sub_1005DE7  +
mov [edi+48h] eax +
test eax eax +
jnz loc_10062FC  +
call ds:GetLastError  +
jmp loc_1006414  +
mov eax [esi+14Ch] +
mov [edi+4Ch] eax +
xor eax eax +
mov [esi+356h] ax +
lea eax [esi+150h] +
push eax  +
call sub_1005DE7  +
mov [edi+50h] eax +
test eax eax +
jz loc_10062F1  +
xor eax eax +
mov [esi+55Eh] ax +
lea eax [esi+358h] +
push eax  +
call sub_1005DE7  +
mov [edi+54h] eax +
test eax eax +
jz loc_10062F1  +
push dword ptr [esi+560h]  +
lea eax [edi+58h] +
push eax  +
call sub_10060E0  +
test eax eax +
jnz loc_1006414  +
push dword ptr [esi+564h]  +
lea eax [edi+5Ch] +
push eax  +
call sub_10060E0  +
test eax eax +
jnz loc_1006414  +
mov eax [esi+568h] +
mov [edi+60h] eax +
push dword ptr [esi+56Ch]  +
lea eax [edi+64h] +
push eax  +
call sub_10060E0  +
test eax eax +
jnz loc_1006414  +
push dword ptr [esi+570h]  +
lea eax [edi+68h] +
push eax  +
call sub_10060E0  +
test eax eax +
jnz loc_1006414  +
push dword ptr [esi+574h]  +
lea eax [edi+6Ch] +
push eax  +
call sub_1006188  +
test eax eax +
jnz loc_1006414  +
mov eax [esi+578h] +
mov [edi+70h] eax +
mov eax [esi+57Ch] +
mov [edi+74h] eax +
xor eax eax +
mov [esi+77Eh] ax +
lea eax [esi+580h] +
push eax  +
call sub_1005DE7  +
mov [edi+78h] eax +
test eax eax +
jz loc_10062F1  +
mov eax [esi+784h] +
mov [edi+7Ch] eax +
mov eax [esi+788h] +
mov [edi+80h] eax +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1006412  +
push offset aRpctoraspbus_0  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 40h  +
call ds:GlobalAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GlobalFree  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dwTraceID +
and [ebp+var_4] 0 +
cmp eax 0FFFFFFFFh +
jz loc_100646D  +
push offset aCallbacklist_1  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_4] +
mov eax [eax] +
push ebx  +
push esi  +
push edi  +
mov [ebp+arg_4] eax +
test eax eax +
jz loc_1006563  +
mov ebx 81h +
jmp loc_1006490  +
mov eax [ebp+arg_4] +
mov edi [eax+8] +
push 230h  +
call sub_100641F  +
mov esi eax +
test esi esi +
jz loc_1006586  +
mov eax [edi] +
test eax eax +
jz loc_10064C0  +
push eax  +
push 11h  +
push esi  +
call sub_1006A47  +
test eax eax +
jnz loc_100657F  +
jmp loc_10064C5  +
xor eax eax +
mov [esi] ax +
mov eax [edi+4] +
test eax eax +
jz loc_10064E1  +
push eax  +
push ebx  +
lea eax [esi+22h] +
push eax  +
call sub_1006A47  +
test eax eax +
jnz loc_100657F  +
jmp loc_10064E7  +
xor eax eax +
mov [esi+22h] ax +
mov eax [edi+8] +
test eax eax +
jz loc_1006502  +
push eax  +
push ebx  +
lea eax [esi+124h] +
push eax  +
call sub_1006A47  +
test eax eax +
jnz loc_100657F  +
jmp loc_100650B  +
xor eax eax +
mov [esi+124h] ax +
mov eax [edi+0Ch] +
mov [esi+228h] eax +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1006533  +
push dword ptr [edi+4]  +
push dword ptr [edi]  +
push offset aCallbacklistto  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 14h +
mov eax [ebp+arg_0] +
and dword ptr [esi+22Ch] 0 +
cmp dword ptr [eax] 0 +
jnz loc_1006546  +
mov [eax] esi +
jmp loc_100654F  +
mov eax [ebp+var_4] +
mov [eax+22Ch] esi +
mov eax [ebp+arg_4] +
mov eax [eax+4] +
mov [ebp+var_4] esi +
mov [ebp+arg_4] eax +
test eax eax +
jnz loc_100648D  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_100657D  +
push offset aCallbacklist_2  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
call ds:GetLastError  +
jmp loc_100657F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
test eax eax +
jz loc_10065B8  +
push esi  +
mov esi [eax+22Ch] +
push eax  +
call sub_1006438  +
mov eax esi +
test esi esi +
jnz loc_10065A3  +
and [edi] esi +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
test eax eax +
jz loc_10065E7  +
push esi  +
mov esi [eax+200h] +
push eax  +
call sub_1006438  +
mov eax esi +
test esi esi +
jnz loc_10065D2  +
and [edi] esi +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
test eax eax +
jz loc_1006613  +
push esi  +
mov esi [eax+0Ch] +
push eax  +
call sub_1006438  +
mov eax esi +
test esi esi +
jnz loc_1006601  +
and [edi] esi +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
lea eax [esi+44h] +
push eax  +
call sub_1006593  +
lea eax [esi+574h] +
push eax  +
call sub_10065F1  +
lea eax [esi+560h] +
push eax  +
call sub_10065C2  +
lea eax [esi+564h] +
push eax  +
call sub_10065C2  +
lea eax [esi+56Ch] +
push eax  +
call sub_10065C2  +
add esi 570h +
push esi  +
call sub_10065C2  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dwTraceID +
and [ebp+var_4] 0 +
cmp eax 0FFFFFFFFh +
jz loc_1006699  +
push offset aStringlistto_0  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [eax] +
jmp loc_1006714  +
mov ebx [edi+8] +
push 204h  +
call sub_100641F  +
mov esi eax +
test esi esi +
jz loc_100673B  +
test ebx ebx +
jz loc_10066D2  +
push ebx  +
push 100h  +
push esi  +
call sub_1006A47  +
test eax eax +
jnz loc_1006734  +
jmp loc_10066D7  +
xor eax eax +
mov [esi] ax +
and dword ptr [esi+200h] 0 +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10066F9  +
push ebx  +
push offset aStringlisttorp  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 10h +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_1006705  +
mov [eax] esi +
jmp loc_100670E  +
mov eax [ebp+var_4] +
mov [eax+200h] esi +
mov edi [edi+4] +
mov [ebp+var_4] esi +
test edi edi +
jnz loc_10066A9  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1006732  +
push offset aStringlistto_1  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
call ds:GetLastError  +
jmp loc_1006734  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dwTraceID +
and [ebp+var_4] 0 +
cmp eax 0FFFFFFFFh +
jz loc_100676C  +
push offset aLocationlistto  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [eax] +
push esi  +
push edi  +
jmp loc_10067DA  +
mov esi [ebx+8] +
push 10h  +
call sub_100641F  +
mov edi eax +
test edi edi +
jz loc_1006801  +
mov eax [esi] +
mov [edi] eax +
mov eax [esi+4] +
mov [edi+4] eax +
mov eax [esi+8] +
and dword ptr [edi+0Ch] 0 +
mov [edi+8] eax +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10067C2  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push offset aLocationlist_2  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 18h +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_10067CE  +
mov [eax] edi +
jmp loc_10067D4  +
mov eax [ebp+var_4] +
mov [eax+0Ch] edi +
mov ebx [ebx+4] +
mov [ebp+var_4] edi +
test ebx ebx +
jnz loc_100677C  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_10067F8  +
push offset aLocationlist_3  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
call ds:GetLastError  +
jmp loc_10067FA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_100682D  +
push offset aRastorpcpbuser  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
mov eax [edi] +
mov [esi] eax +
mov eax [edi+4] +
mov [esi+4] eax +
mov eax [edi+8] +
mov [esi+8] eax +
mov eax [edi+0Ch] +
mov [esi+0Ch] eax +
mov eax [edi+10h] +
mov [esi+10h] eax +
mov eax [edi+14h] +
mov [esi+14h] eax +
mov eax [edi+18h] +
mov [esi+18h] eax +
mov eax [edi+1Ch] +
mov [esi+1Ch] eax +
mov eax [edi+20h] +
mov [esi+20h] eax +
mov eax [edi+24h] +
mov [esi+24h] eax +
mov eax [edi+28h] +
mov [esi+28h] eax +
mov eax [edi+2Ch] +
mov [esi+2Ch] eax +
mov eax [edi+30h] +
mov [esi+30h] eax +
mov eax [edi+34h] +
mov [esi+34h] eax +
mov eax [edi+38h] +
mov [esi+38h] eax +
mov eax [edi+3Ch] +
mov [esi+3Ch] eax +
mov eax [edi+40h] +
mov [esi+40h] eax +
push dword ptr [edi+44h]  +
lea eax [esi+44h] +
push eax  +
call sub_1006449  +
test eax eax +
jnz loc_1006A0F  +
mov eax [edi+48h] +
test eax eax +
jz loc_10068CC  +
push eax  +
push 81h  +
lea eax [esi+48h] +
push eax  +
call sub_1006A47  +
test eax eax +
jz loc_10068D2  +
jmp loc_1006A0F  +
xor eax eax +
mov [esi+48h] ax +
mov eax [edi+4Ch] +
mov [esi+14Ch] eax +
mov eax [edi+50h] +
push ebx  +
mov ebx 104h +
test eax eax +
jz loc_10068FF  +
push eax  +
push ebx  +
lea eax [esi+150h] +
push eax  +
call sub_1006A47  +
test eax eax +
jz loc_1006908  +
jmp loc_1006A0E  +
xor eax eax +
mov [esi+150h] ax +
mov eax [edi+54h] +
test eax eax +
jz loc_1006926  +
push eax  +
push ebx  +
lea eax [esi+358h] +
push eax  +
call sub_1006A47  +
test eax eax +
jz loc_100692F  +
jmp loc_1006A0E  +
xor eax eax +
mov [esi+358h] ax +
push dword ptr [edi+58h]  +
lea eax [esi+560h] +
push eax  +
call sub_1006675  +
test eax eax +
jnz loc_1006A0E  +
push dword ptr [edi+5Ch]  +
lea eax [esi+564h] +
push eax  +
call sub_1006675  +
test eax eax +
jnz loc_1006A0E  +
mov eax [edi+60h] +
mov [esi+568h] eax +
push dword ptr [edi+64h]  +
lea eax [esi+56Ch] +
push eax  +
call sub_1006675  +
test eax eax +
jnz loc_1006A0E  +
push dword ptr [edi+68h]  +
lea eax [esi+570h] +
push eax  +
call sub_1006675  +
test eax eax +
jnz loc_1006A0E  +
push dword ptr [edi+6Ch]  +
lea eax [esi+574h] +
push eax  +
call sub_1006748  +
test eax eax +
jnz loc_1006A0E  +
mov eax [edi+70h] +
mov [esi+578h] eax +
mov eax [edi+74h] +
mov [esi+57Ch] eax +
mov eax [edi+78h] +
test eax eax +
jz loc_10069D4  +
push eax  +
push 101h  +
lea eax [esi+580h] +
push eax  +
call sub_1006A47  +
test eax eax +
jz loc_10069DD  +
jmp loc_1006A0E  +
xor eax eax +
mov [esi+580h] ax +
mov eax [edi+7Ch] +
mov [esi+784h] eax +
mov eax [edi+80h] +
mov [esi+788h] eax +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1006A0C  +
push offset aRastorpcpbus_0  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push [ebp+lpString2]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
test eax eax +
jnz loc_1006A3C  +
or eax 0FFFFFFFFh +
jmp loc_1006A3E  +
dec eax  +
dec eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 900h  +
xor esi esi +
push esi  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1005A25  +
cmp eax esi +
jge loc_1006A87  +
mov ecx dwTraceID +
movzx esi ax +
cmp ecx 0FFFFFFFFh +
jz loc_1006A87  +
push eax  +
push offset aStringcchcopyF  +
push 0Ch  +
push ecx  +
call TracePrintfExA  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
xor edx edx +
cmp ecx edx +
jz loc_1006AC9  +
cmp eax edx +
jz loc_1006AC9  +
cmp [ecx+8] edx +
jz loc_1006ABC  +
push esi  +
mov esi [ecx+4] +
mov [eax] esi +
mov esi [ecx+4] +
mov [esi+4] eax +
pop esi  +
jmp loc_1006AC0  +
mov [eax] edx +
mov [ecx] eax +
mov [ecx+4] eax +
mov [eax+4] edx +
inc dword ptr [ecx+8]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10h  +
push 40h  +
call ds:GlobalAlloc  +
xor ecx ecx +
cmp eax ecx +
jz loc_1006AF5  +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov ecx [ebp+arg_0] +
mov [eax+0Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+dwBytes] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+dwBytes] +
push eax  +
push edi  +
push 10h  +
xor esi esi +
call sub_1002605  +
test eax 0FFFFh +
jnz loc_1006B52  +
push [ebp+dwBytes]  +
push 40h  +
call ds:GlobalAlloc  +
mov esi eax +
test esi esi +
jz loc_1006B52  +
lea eax [edi+10h] +
push eax  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
test edi edi +
jz loc_1006B4C  +
lea eax [esi+10h] +
mov [esi+8] eax +
mov eax [ebp+arg_4] +
mov [esi+0Ch] eax +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1005662  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
test edx edx +
jz loc_1006BAC  +
test eax eax +
jz loc_1006BAC  +
mov ecx [eax] +
push esi  +
test ecx ecx +
jz loc_1006B91  +
mov esi [eax+4] +
mov [ecx+4] esi +
jmp loc_1006B96  +
mov ecx [eax+4] +
mov [edx] ecx +
mov ecx [eax+4] +
test ecx ecx +
jz loc_1006BA3  +
mov esi [eax] +
mov [ecx] esi +
jmp loc_1006BA8  +
mov ecx [eax] +
mov [edx+4] ecx +
dec dword ptr [edx+8]  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push 0  +
call sub_1006AFE  +
test eax eax +
jz loc_1006BCE  +
mov ecx [ebp+arg_0] +
mov [eax+8] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1006C0D  +
push esi  +
jmp loc_1006BFF  +
push esi  +
push edi  +
call sub_1006B6F  +
cmp [ebp+arg_4] 0 +
push esi  +
jz loc_1006BFA  +
call [ebp+arg_4]  +
jmp loc_1006BFF  +
call sub_1005662  +
mov esi [edi] +
test esi esi +
jnz loc_1006BE7  +
push edi  +
call ds:GlobalFree  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and dword ptr [ebp+Data] 0 +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+Type]  +
mov [ebp+cbData] 4 +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz locret_1006C5B  +
cmp [ebp+Type] 4 +
jnz locret_1006C5B  +
cmp [ebp+cbData] 4 +
jnz locret_1006C5B  +
mov eax [ebp+arg_8] +
mov ecx dword ptr [ebp+Data] +
mov [eax] ecx +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
xor edi edi +
push edi  +
call sub_1006AD2  +
mov [ebp+var_4] eax +
cmp eax edi +
jnz loc_1006C84  +
push 8  +
pop eax  +
jmp loc_1006D71  +
push esi  +
mov esi ds:RegQueryValueExW +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push [ebp+lpValueName]  +
mov [ebp+lpString] edi +
push [ebp+hKey]  +
call esi  +
test eax eax +
jz loc_1006CAC  +
mov [ebp+lpValueName] edi +
jmp loc_1006D37  +
push [ebp+cbData]  +
push 40h  +
call ds:GlobalAlloc  +
mov [ebp+lpString] eax +
cmp eax edi +
jnz loc_1006CC7  +
mov [ebp+lpValueName] 8 +
jmp loc_1006D37  +
lea ecx [ebp+cbData] +
push ecx  +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call esi  +
mov [ebp+lpValueName] eax +
cmp eax edi +
jnz loc_1006CA4  +
cmp [ebp+Type] 7 +
jnz loc_1006D37  +
mov esi [ebp+lpString] +
push ebx  +
xor ebx ebx +
jmp loc_1006D28  +
cmp [ebp+arg_C] 1 +
jnz loc_1006CFC  +
push esi  +
call sub_1005EF0  +
jmp loc_1006D0C  +
cmp ebx edi +
jz loc_1006D1B  +
lea eax [esi+2] +
push eax  +
push ebx  +
call sub_1005EA2  +
xor ebx ebx +
cmp eax edi +
jz loc_1006D2F  +
push eax  +
push [ebp+var_4]  +
call sub_1006A93  +
jmp loc_1006D1D  +
mov ebx esi +
push esi  +
call ds:lstrlenW  +
lea esi [esi+eax*2+2] +
cmp [esi] di +
jnz loc_1006CEE  +
jmp loc_1006D36  +
mov [ebp+lpValueName] 8 +
pop ebx  +
cmp [ebp+arg_C] 1 +
mov eax offset loc_1005C81 +
jz loc_1006D47  +
mov eax offset sub_1005CA2 +
push eax  +
cmp [ebp+lpValueName] edi +
jnz loc_1006D5E  +
mov esi [ebp+arg_8] +
push dword ptr [esi]  +
call sub_1006BD7  +
mov eax [ebp+var_4] +
mov [esi] eax +
jmp loc_1006D66  +
push [ebp+var_4]  +
call sub_1006BD7  +
push [ebp+lpString]  +
call sub_1005662  +
xor eax eax +
pop esi  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+cbData] 0 +
push esi  +
mov esi ds:RegQueryValueExW +
lea eax [ebp+cbData] +
push eax  +
push 0  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call esi  +
test eax eax +
jz loc_1006DAC  +
mov [ebp+cbData] 2 +
push [ebp+cbData]  +
push 40h  +
call ds:GlobalAlloc  +
test eax eax +
jnz loc_1006DC0  +
push 8  +
pop eax  +
jmp loc_1006DDF  +
xor ecx ecx +
mov [eax] cx +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
lea ecx [ebp+cbData] +
push ecx  +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call esi  +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+lpSubKey] +
mov eax [ebp+hKey] +
push esi  +
lea edx [ebp+phkResult] +
push edx  +
push 0F003Fh  +
xor esi esi +
push esi  +
push ecx  +
push eax  +
mov [ebp+var_224] eax +
mov [ebp+var_220] ecx +
call ds:RegOpenKeyExW  +
mov [ebp+var_214] eax +
cmp eax esi +
jnz loc_1006F0D  +
push ebx  +
push edi  +
xor eax eax +
push 208h  +
mov [ebp+SubKey] ax +
lea eax [ebp-20Eh] +
push esi  +
push eax  +
call memset  +
mov ebx ds:RegEnumKeyExW +
add esp 0Ch +
lea eax [ebp+ftLastWriteTime] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+phkResult]  +
mov [ebp+cbName] 104h +
call ebx  +
mov edi 103h +
jmp loc_1006ECB  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+phkResult]  +
call sub_1006DE9  +
lea eax [ebp+ftLastWriteTime] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+phkResult]  +
mov [ebp+cbName] 104h +
call ebx  +
mov [ebp+var_214] eax +
cmp eax edi +
jnz loc_1006E8E  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
cmp [ebp+var_214] esi +
jz loc_1006EF1  +
cmp [ebp+var_214] edi +
jnz loc_1006F0B  +
push esi  +
push esi  +
push [ebp+var_220]  +
push [ebp+var_224]  +
call ds:RegDeleteKeyExW  +
mov [ebp+var_214] eax +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_214] +
xor ecx ebp +
pop esi  +
call sub_1003217  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
lea ecx [ebp+cbData] +
push ecx  +
push eax  +
lea ecx [ebp+Type] +
push ecx  +
push eax  +
push [ebp+Type]  +
mov [ebp+cbData] eax +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
neg eax  +
sbb eax eax +
inc eax  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_1006F8C  +
mov esi offset Class +
push esi  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push 1  +
push 0  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
mov esi [eax] +
push edi  +
mov [ebp+cbData] 2 +
test esi esi +
jz loc_1007012  +
mov edi ds:lstrlenW +
cmp [ebp+arg_C] 1 +
jnz loc_1006FE8  +
push dword ptr [esi+8]  +
call edi  +
mov ecx [ebp+cbData] +
lea eax [ecx+eax*2+2] +
jmp loc_1007003  +
mov ebx [esi+8] +
push dword ptr [ebx+4]  +
call edi  +
push dword ptr [ebx]  +
mov [ebp+hMem] eax +
call edi  +
mov ecx [ebp+hMem] +
add ecx eax +
mov eax [ebp+cbData] +
lea eax [eax+ecx*2+6] +
mov esi [esi+4] +
mov [ebp+cbData] eax +
test esi esi +
jnz loc_1006FD4  +
cmp eax 2 +
jnz loc_1007019  +
mov [ebp+cbData] 4 +
push [ebp+cbData]  +
push 40h  +
call ds:GlobalAlloc  +
mov [ebp+hMem] eax +
test eax eax +
jnz loc_1007033  +
push 8  +
pop eax  +
jmp loc_10070FB  +
mov ecx [ebp+cbData] +
shr ecx 1 +
cmp [ebp+cbData] 4 +
mov [ebp+var_8] ecx +
jnz loc_100704F  +
xor ecx ecx +
mov [eax+2] cx +
mov [eax] cx +
jmp loc_10070DA  +
mov ecx [ebp+arg_8] +
mov ebx [ecx] +
mov [ebp+var_4] eax +
test ebx ebx +
jz loc_10070D2  +
mov esi 100h +
cmp [ebp+arg_C] 1 +
push esi  +
jnz loc_1007075  +
mov eax [ebx+8] +
lea ecx [ebp+var_8] +
push ecx  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
jmp loc_10070B2  +
mov edi [ebx+8] +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [edi]  +
push [ebp+var_8]  +
push [ebp+var_4]  +
call sub_1005A25  +
test eax eax +
jl loc_1007102  +
add [ebp+var_4] 2 +
mov ecx [ebp+var_4] +
add [ebp+var_4] 2 +
sub [ebp+var_8] 2 +
push 3Dh  +
pop eax  +
mov [ecx] ax +
push esi  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [edi+4]  +
push [ebp+var_8]  +
push [ebp+var_4]  +
call sub_1005A25  +
test eax eax +
jl loc_1007102  +
add [ebp+var_4] 2 +
mov ebx [ebx+4] +
dec [ebp+var_8]  +
test ebx ebx +
jnz loc_1007060  +
mov eax [ebp+hMem] +
mov edx [ebp+var_4] +
xor ecx ecx +
mov [edx] cx +
push [ebp+cbData]  +
push eax  +
push 7  +
push 0  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
mov esi eax +
push [ebp+hMem]  +
call ds:GlobalFree  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
movzx esi ax +
jmp loc_10070F0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_100712F  +
push dword ptr [esi+4]  +
call sub_1005662  +
push dword ptr [esi]  +
call sub_1005662  +
push esi  +
call ds:GlobalFree  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 808h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dwTraceID +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov [ebp+lpFileName] ebx +
cmp eax 0FFFFFFFFh +
jz loc_1007173  +
push offset aReadshortcutfi  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
push 8  +
push 40h  +
call ds:GlobalAlloc  +
mov esi eax +
xor eax eax +
test esi esi +
jz loc_10071EE  +
push edi  +
push ebx  +
mov edi esi +
stos   +
push 400h  +
stos   +
mov edi ds:GetPrivateProfileStringW +
lea eax [ebp+String] +
push eax  +
push offset Class  +
push offset KeyName  +
mov ebx offset AppName +
push ebx  +
call edi  +
lea eax [ebp+String] +
push eax  +
call sub_1005DE7  +
push [ebp+lpFileName]  +
mov [esi+4] eax +
push 400h  +
lea eax [ebp+String] +
push eax  +
push offset Class  +
push offset aPhonebook  +
push ebx  +
call edi  +
lea eax [ebp+String] +
push eax  +
call sub_1005DE7  +
mov [esi] eax +
mov eax esi +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1003217  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jnz loc_100722E  +
push esi  +
mov esi [ebp+arg_8] +
cmp dword ptr [esi+8] 110h +
jnz loc_100722D  +
push dword ptr [esi+0Ch]  +
call ds:GetParent  +
push eax  +
push dword ptr [esi+0Ch]  +
call sub_100759E  +
pop esi  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dwTraceID +
cmp eax 0FFFFFFFFh +
jz loc_1007259  +
push offset aMsgdlgutil  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 0Ch +
push ebx  +
push esi  +
mov esi [ebp+uType] +
mov ebx offset Class +
push edi  +
mov [ebp+hMem] ebx +
test esi esi +
jz loc_100728B  +
mov eax [esi+28h] +
test eax eax +
jz loc_100728B  +
push esi  +
push 1  +
lea ecx [ebp+hMem] +
push ecx  +
push 0  +
push 0  +
push eax  +
push 2500h  +
call ds:FormatMessageW  +
jmp loc_10072BA  +
push [ebp+uID]  +
push [ebp+hInstance]  +
call sub_10058A0  +
mov edi eax +
test edi edi +
jz loc_10072BA  +
push esi  +
push 1  +
lea eax [ebp+hMem] +
push eax  +
push 0  +
push 0  +
push edi  +
push 2500h  +
call ds:FormatMessageW  +
push edi  +
call ds:GlobalFree  +
test esi esi +
jz loc_10072E6  +
cmp dword ptr [esi+2Ch] 0 +
jz loc_10072DC  +
mov eax [ebp+hMem] +
sub eax ebx +
neg eax  +
sbb eax eax +
and eax [ebp+hMem] +
mov [ebp+hInstance] 1 +
mov [esi+30h] eax +
jmp loc_1007352  +
mov esi [esi+24h] +
mov [ebp+uType] esi +
test esi esi +
jnz loc_10072ED  +
mov [ebp+uType] 10040h +
push [ebp+arg_10]  +
push [ebp+hInstance]  +
call sub_10058A0  +
xor esi esi +
mov edi eax +
cmp [ebp+hWnd] esi +
jz loc_100731A  +
call ds:GetCurrentThreadId  +
push eax  +
push [ebp+hInstance]  +
push offset fn  +
push 4  +
call ds:SetWindowsHookExW  +
mov esi eax +
cmp [ebp+hMem] 0 +
jz loc_1007333  +
push [ebp+uType]  +
push edi  +
push [ebp+hMem]  +
push [ebp+hWnd]  +
call ds:MessageBoxW  +
mov [ebp+hInstance] eax +
test esi esi +
jz loc_100733E  +
push esi  +
call ds:UnhookWindowsHookEx  +
push edi  +
call sub_1005662  +
cmp [ebp+hMem] ebx +
jz loc_1007352  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax [ebp+hInstance] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dwTraceID +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
cmp eax 0FFFFFFFFh +
jz loc_1007389  +
push [ebp+arg_4]  +
push edi  +
push offset aSetoffdesktopH  +
push 0Ch  +
push eax  +
call TracePrintfExA  +
add esp 14h +
mov eax lpString +
xor ebx ebx +
cmp eax ebx +
jnz loc_10073B2  +
push offset aRassetoffdeskt  +
call ds:GlobalAddAtomW  +
movzx eax ax +
mov lpString eax +
cmp eax ebx +
jnz loc_10073B2  +
xor eax eax +
jmp loc_1007522  +
push esi  +
push eax  +
push edi  +
call ds:GetPropW  +
mov esi eax +
mov eax [ebp+arg_4] +
cmp eax 1 +
jnz loc_1007480  +
cmp esi ebx +
jz loc_100740A  +
mov eax [esi+0Ch] +
add eax [esi+4] +
push 4  +
cdq   +
sub eax edx +
push ebx  +
sar eax 1 +
push ebx  +
push eax  +
mov eax [esi+8] +
add eax [esi] +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
push ebx  +
push edi  +
call ds:SetWindowPos  +
cmp [esi+10h] ebx +
jz loc_10074E0  +
push 5  +
push edi  +
call ds:ShowWindow  +
mov [esi+10h] ebx +
jmp loc_10074E0  +
push 14h  +
push 40h  +
call ds:GlobalAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_100751F  +
push edi  +
call ds:IsWindowVisible  +
mov [ebp+arg_4] eax +
cmp eax ebx +
jnz loc_1007434  +
push ebx  +
push edi  +
call ds:ShowWindow  +
push esi  +
push edi  +
call ds:GetWindowRect  +
mov eax [esi+0Ch] +
add eax [esi+4] +
push 4  +
cdq   +
sub eax edx +
push ebx  +
sar eax 1 +
push ebx  +
push eax  +
mov eax [esi+8] +
add eax [esi] +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
push ebx  +
push edi  +
call ds:SetWindowPos  +
cmp [ebp+arg_4] ebx +
jnz loc_100746D  +
push 5  +
push edi  +
call ds:ShowWindow  +
push esi  +
push lpString  +
mov [esi+10h] ebx +
push edi  +
call ds:SetPropW  +
jmp loc_10074E0  +
cmp eax 2 +
jz loc_10074E5  +
cmp eax 4 +
jz loc_10074E5  +
cmp eax 5 +
jnz loc_10074A0  +
cmp esi ebx +
jz loc_100751F  +
mov edi [ebp+hWnd] +
movs   +
movs   +
movs   +
movs   +
jmp loc_10074E0  +
cmp eax 3 +
jnz loc_10074E0  +
cmp esi ebx +
jz loc_100751F  +
push edi  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_10074C3  +
push ebx  +
push edi  +
call ds:ShowWindow  +
mov dword ptr [esi+10h] 1 +
mov eax [esi+4] +
mov edx [esi+0Ch] +
mov ecx [esi] +
push 4  +
sub edx eax +
push edx  +
mov edx [esi+8] +
sub edx ecx +
push edx  +
push eax  +
push ecx  +
push ebx  +
push edi  +
call ds:SetWindowPos  +
xor eax eax +
inc eax  +
jmp loc_1007521  +
cmp esi ebx +
jz loc_100751F  +
cmp eax 2 +
jnz loc_100750B  +
mov eax [esi+4] +
mov edx [esi+0Ch] +
mov ecx [esi] +
push 4  +
sub edx eax +
push edx  +
mov edx [esi+8] +
sub edx ecx +
push edx  +
push eax  +
push ecx  +
push ebx  +
push edi  +
call ds:SetWindowPos  +
push esi  +
call ds:GlobalFree  +
push lpString  +
push edi  +
call ds:RemovePropW  +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ds:GetSystemMetrics +
push edi  +
xor ebx ebx +
push ebx  +
call esi  +
push 1  +
mov edi eax +
call esi  +
mov esi eax +
lea eax [ebp+X] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
cmp [ebp-8] edi +
jle loc_1007563  +
sub edi [ebp-8] +
add [ebp+X] edi +
cmp [ebp+X] ebx +
jge loc_100756B  +
mov [ebp+X] ebx +
cmp [ebp-4] esi +
jle loc_1007576  +
sub esi [ebp-4] +
add [ebp-0Ch] esi +
cmp [ebp-0Ch] ebx +
jge loc_100757E  +
mov [ebp-0Ch] ebx +
push 5  +
push ebx  +
push ebx  +
push dword ptr [ebp-0Ch]  +
push [ebp+X]  +
push ebx  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
mov ebx ds:GetWindowRect +
push esi  +
push edi  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call ebx  +
mov esi [ebp+Rect.right] +
mov edi [ebp+Rect.bottom] +
sub esi [ebp+Rect.left] +
sub edi [ebp+Rect.top] +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_10075E8  +
lea eax [ebp+var_10] +
push eax  +
push 5  +
push [ebp+arg_4]  +
call sub_1007361  +
test eax eax +
jnz loc_1007601  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_4]  +
call ebx  +
jmp loc_1007601  +
mov ebx ds:GetSystemMetrics +
push eax  +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
call ebx  +
push 1  +
mov [ebp+var_8] eax +
call ebx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_8] +
sub eax [ebp+var_10] +
push 5  +
sub eax esi +
cdq   +
sub eax edx +
mov ecx eax +
mov eax [ebp+var_4] +
sub eax [ebp+var_C] +
sar ecx 1 +
add ecx [ebp+var_10] +
sub eax edi +
cdq   +
sub eax edx +
xor edx edx +
push edx  +
sar eax 1 +
add eax [ebp+var_C] +
push edx  +
push eax  +
push ecx  +
push edx  +
push [ebp+hWnd]  +
mov [ebp+Rect.left] ecx +
mov [ebp+Rect.top] eax +
call ds:SetWindowPos  +
push [ebp+hWnd]  +
call sub_100752D  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:ReleaseActCtx  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
push eax  +
push [ebp+arg_0]  +
call ds:ActivateActCtx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 0  +
call ds:DeactivateActCtx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_10076A8  +
pop ebp  +
jmp loc_100767E  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_100B038 0FFFFFFFFh +
push esi  +
mov esi [ebp+arg_0] +
jnz loc_100776F  +
and [ebp+var_22C] 0 +
push edi  +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_228] +
stos   +
pop edi  +
test esi esi +
jnz loc_10076FA  +
push eax  +
call ds:GetModuleHandleW  +
mov esi eax +
push 104h  +
lea eax [ebp+Filename] +
push eax  +
push esi  +
call ds:GetModuleFileNameW  +
lea eax [ebp+Filename] +
mov [ebp+var_224] eax +
movzx eax [ebp+arg_4] +
mov [ebp+var_218] eax +
lea eax [ebp+var_22C] +
push eax  +
mov [ebp+var_22C] 20h +
mov [ebp+var_228] 88h +
mov [ebp+var_210] esi +
call ds:CreateActCtxW  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_100776F  +
push 0FFFFFFFFh  +
push esi  +
push offset dword_100B038  +
call ds:InterlockedCompareExchange  +
cmp eax 0FFFFFFFFh +
jz loc_100776A  +
push esi  +
call sub_100764F  +
call sub_1007862  +
mov ecx [ebp+var_4] +
xor eax eax +
cmp dword_100B038 0FFFFFFFFh +
pop esi  +
setnz al  +
xor ecx ebp +
call sub_1003217  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 7Bh  +
push [ebp+arg_0]  +
call sub_10076B1  +
pop ebp  +
retn 4  +
***
mov eax dword_100B038 +
cmp eax 0FFFFFFFFh +
jz loc_10077BE  +
push eax  +
call sub_100764F  +
or dword_100B038 0FFFFFFFFh +
cmp dword_100B890 0 +
jz locret_10077CE  +
or dword_100B890 0FFFFFFFFh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi] 0 +
cmp dword_100B038 0FFFFFFFFh +
jnz loc_1007810  +
mov eax dword_100B890 +
test eax eax +
jz loc_100781E  +
cmp eax 0FFFFFFFFh +
jnz loc_10077FB  +
xor eax eax +
jmp loc_1007821  +
push dword_100B88C  +
push eax  +
call sub_10076B1  +
cmp dword_100B038 0FFFFFFFFh +
jz loc_100781E  +
push esi  +
push dword_100B038  +
call sub_1007660  +
jmp loc_1007821  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_10077D4  +
test eax eax +
jz locret_1007859  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryW  +
push [ebp+var_4]  +
mov esi eax +
call sub_1007697  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov eax dword_100B8AC +
test eax eax +
jnz loc_1007892  +
push esi  +
mov esi offset aComctl32_dll +
push esi  +
call sub_100782B  +
mov dword_100B8AC eax +
test eax eax +
jnz loc_1007891  +
call sub_10077A7  +
push esi  +
call ds:LoadLibraryW  +
mov dword_100B8AC eax +
pop esi  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov eax ecx +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1003217  +
jmp __SEH_epilog4  +
***
sub esp 20h +
and esp 0FFFFFFF0h +
fld  st +
fst  [esp+20h+var_8] +
fistp  [esp+20h+var_10] +
fild  [esp+20h+var_10] +
mov edx [esp+20h+var_8] +
mov eax dword ptr [esp+20h+var_10] +
test eax eax +
jz integer_QnaN_or_zero  +
fsubp st(1) st +
test edx edx +
jns positive  +
fstp  [esp+20h+var_20] +
mov ecx [esp+20h+var_20] +
xor ecx 80000000h +
add ecx 7FFFFFFFh +
adc eax 0 +
mov edx dword ptr [esp+20h+var_10+4] +
adc edx 0 +
jmp localexit  +
fstp  [esp+20h+var_20] +
mov ecx [esp+20h+var_20] +
add ecx 7FFFFFFFh +
sbb eax 0 +
mov edx dword ptr [esp+20h+var_10+4] +
sbb edx 0 +
jmp localexit  +
mov edx dword ptr [esp+20h+var_10+4] +
test edx 7FFFFFFFh +
jnz arg_is_not_integer_QnaN  +
fstp  [esp+20h+var_8] +
fstp  [esp+20h+var_8] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
push ebx  +
push esi  +
push edi  +
push 6  +
pop ecx  +
xor ebx ebx +
push ebx  +
xor eax eax +
lea edi [ebp+var_20] +
push 18h  +
stos   +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
push [ebp+hProcess]  +
mov [ebp+Buffer] ebx +
mov [ebp+lpBaseAddress] ebx +
call ds:NtQueryInformationProcess  +
cmp eax ebx +
jge loc_10079ED  +
or eax 10000000h +
mov esi eax +
jmp loc_1007AEE  +
mov edi ds:ReadProcessMemory +
push ebx  +
push 4  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [ebp+var_1C] +
add eax 0Ch +
push eax  +
push [ebp+hProcess]  +
call edi  +
test eax eax +
jnz loc_1007A20  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10079E6  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10079E6  +
mov eax [ebp+Buffer] +
cmp eax ebx +
jnz loc_1007A31  +
mov esi 80070006h +
jmp loc_1007AEE  +
push ebx  +
lea esi [eax+0Ch] +
push 4  +
lea eax [ebp+lpBaseAddress] +
push eax  +
push esi  +
push [ebp+hProcess]  +
call edi  +
test eax eax +
jz loc_1007A0A  +
cmp esi [ebp+lpBaseAddress] +
jnz loc_1007A54  +
mov esi 8000FFFFh +
jmp loc_1007AEE  +
push ebx  +
push 78h  +
lea eax [ebp+var_98] +
push eax  +
push [ebp+lpBaseAddress]  +
push [ebp+hProcess]  +
call edi  +
test eax eax +
jz loc_1007A0A  +
movzx esi [ebp+var_74] +
mov eax large fs:18h +
mov eax [eax+30h] +
inc esi  +
inc esi  +
push esi  +
push 8  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov ebx eax +
test ebx ebx +
jnz loc_1007A92  +
mov esi 8007000Eh +
jmp loc_1007AD5  +
push 0  +
push esi  +
push ebx  +
push [ebp+var_70]  +
push [ebp+hProcess]  +
call edi  +
test eax eax +
jnz loc_1007ABA  +
call ds:GetLastError  +
test eax eax +
jle loc_1007AB6  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1007AD5  +
mov eax [ebp+arg_4] +
shr esi 1 +
dec esi  +
mov [eax] si +
movzx eax si +
xor ecx ecx +
mov [ebx+eax*2] cx +
mov eax [ebp+arg_0] +
mov [eax] ebx +
xor ebx ebx +
xor esi esi +
test ebx ebx +
jz loc_1007AEE  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
call __SEH_prolog4_GS  +
mov eax [ebp+arg_0] +
mov [ebp+var_7C] eax +
mov ebx [ebp+arg_4] +
xor edi edi +
mov [ebp+lpBuffer] edi +
push 40h  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
call memset  +
mov esi 0F8h +
push esi  +
push edi  +
lea eax [ebp+var_17C] +
push eax  +
call memset  +
add esp 18h +
xor eax eax +
lea edi [ebp+var_78] +
stos   +
stos   +
push 0  +
push 80h  +
push 3  +
push 0  +
push 7  +
push 80000000h  +
push ebx  +
call ds:CreateFileW  +
mov edi eax +
mov [ebp+hObject] edi +
cmp edi 0FFFFFFFFh +
jz loc_1007B74  +
lea eax [ebp+var_78] +
push eax  +
push edi  +
call ds:GetFileSizeEx  +
test eax eax +
jnz loc_1007B90  +
call ds:GetLastError  +
test eax eax +
jle loc_1007B88  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_60] eax +
jmp loc_1007D28  +
and [ebp+ms_exc.disabled] 0 +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 40h  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
mov ebx ds:ReadFile +
call ebx  +
test eax eax +
jnz loc_1007BC9  +
call ds:GetLastError  +
test eax eax +
jle loc_1007BC1  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_60] eax +
jmp loc_1007D21  +
cmp [ebp+NumberOfBytesRead] 40h +
jz loc_1007BDB  +
mov [ebp+var_60] 800700C1h +
jmp loc_1007D21  +
mov eax 5A4Dh +
cmp word ptr [ebp+Buffer] ax +
jnz loc_1007BCF  +
mov eax [ebp+var_20] +
test eax eax +
jle loc_1007BCF  +
cmp eax 10000000h +
jnb loc_1007BCF  +
cdq   +
mov [ebp+var_84] eax +
mov [ebp+var_80] edx +
push 0  +
push 0  +
push edx  +
push eax  +
push edi  +
mov edi ds:SetFilePointerEx +
call edi  +
test eax eax +
jz loc_1007BCF  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push esi  +
lea eax [ebp+var_17C] +
push eax  +
push [ebp+hObject]  +
call ebx  +
test eax eax +
jz loc_1007BAD  +
cmp [ebp+NumberOfBytesRead] esi +
jnz loc_1007BCF  +
cmp [ebp+var_17C] 4550h +
jnz loc_1007BCF  +
movzx ecx [ebp+var_176] +
imul ecx ecx +
movzx eax [ebp+var_168] +
lea eax [ebp+eax+var_164] +
add eax ecx +
lea ecx [ebp+var_17C] +
cmp eax ecx +
jbe loc_1007BCF  +
sub eax ecx +
mov [ebp+nNumberOfBytesToRead] eax +
cmp eax 0FFFFFFFFh +
ja loc_1007BCF  +
mov eax large fs:18h +
push [ebp+nNumberOfBytesToRead]  +
push 8  +
mov eax [eax+30h] +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov [ebp+lpBuffer] eax +
xor esi esi +
cmp eax esi +
jnz loc_1007C9B  +
mov [ebp+var_60] 8007000Eh +
jmp loc_1007D21  +
push esi  +
push esi  +
push [ebp+var_80]  +
push [ebp+var_84]  +
push [ebp+hObject]  +
call edi  +
test eax eax +
jz loc_1007BCF  +
push esi  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
mov edi [ebp+nNumberOfBytesToRead] +
push edi  +
push [ebp+lpBuffer]  +
push [ebp+hObject]  +
call ebx  +
test eax eax +
jnz loc_1007CD5  +
call ds:GetLastError  +
cmp eax esi +
jmp loc_1007BB5  +
cmp [ebp+NumberOfBytesRead] edi +
jnz loc_1007BCF  +
mov eax [ebp+var_7C] +
lea ecx [eax+14h] +
push ecx  +
push eax  +
push [ebp+var_74]  +
push [ebp+var_78]  +
push [ebp+lpBuffer]  +
call sub_1007E63  +
cmp eax esi +
jge loc_1007D02  +
or eax 10000000h +
jmp loc_1007BC1  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+var_60] esi +
jmp loc_1007D28  +
push dword ptr [ebp-14h]  +
call sub_1007F55  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-60h] 80070002h +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor esi esi +
cmp [ebp+lpBuffer] esi +
jz loc_1007D45  +
push [ebp+lpBuffer]  +
push esi  +
mov eax large fs:18h +
mov eax [eax+30h] +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_1007D59  +
cmp [ebp+hObject] esi +
jz loc_1007D59  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax [ebp+var_60] +
call __SEH_epilog4_GS  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
push edi  +
push 18h  +
mov [ebp+var_24] eax +
lea eax [ebp+var_40] +
push eax  +
push edi  +
push 0FFFFFFFFh  +
mov [ebp+var_20] edi +
mov [ebp+var_28] edi +
call ds:NtQueryInformationProcess  +
cmp eax edi +
jge loc_1007DAB  +
or eax 10000000h +
mov esi eax +
jmp loc_1007E42  +
push ebx  +
push [ebp+dwProcessId]  +
push edi  +
push 410h  +
call ds:OpenProcess  +
mov ebx eax +
cmp ebx edi +
jnz loc_1007DD9  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1007DD5  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1007E1B  +
push ebx  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
call sub_10079AC  +
mov esi eax +
cmp esi edi +
jnz loc_1007E1B  +
push [ebp+var_20]  +
lea eax [ebp+var_1C] +
push eax  +
call sub_1007AFC  +
mov esi eax +
cmp esi edi +
jl loc_1007E1B  +
push [ebp+var_24]  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+var_28]  +
push [ebp+var_20]  +
call PropertyLengthAsVariant  +
cmp eax edi +
jz loc_1007E19  +
jg loc_1007DCB  +
jmp loc_1007DD5  +
xor esi esi +
cmp ebx edi +
jz loc_1007E26  +
push ebx  +
call ds:CloseHandle  +
pop ebx  +
cmp [ebp+var_20] edi +
jz loc_1007E42  +
push [ebp+var_20]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push edi  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
cmp esi edi +
pop edi  +
pop esi  +
jge loc_1007E50  +
push [ebp+var_24]  +
call ?Allocate@CBufferAllocator@@UAEPAXK@Z  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1003217  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_100B004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_10] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_0] +
push 5Bh  +
lea eax [ebp+var_60+1] +
push 0  +
push eax  +
mov [ebp+var_68] esi +
mov [ebp+var_6C] ebx +
mov byte ptr [ebp+var_60] 0 +
call memset  +
add esp 0Ch +
test edi edi +
jz loc_1007F3A  +
mov eax [ebp+arg_4] +
or eax [ebp+arg_8] +
jz loc_1007F3A  +
test esi esi +
jz loc_1007F3A  +
test ebx ebx +
jz loc_1007F3A  +
movzx eax word ptr [edi+6] +
movzx ecx word ptr [edi+14h] +
imul eax eax +
add eax edi +
lea ebx [ecx+eax+18h] +
movzx eax word ptr [edi+18h] +
cmp eax 10Bh +
jz loc_1007EE6  +
cmp eax 20Bh +
jnz loc_1007F3A  +
lea esi [edi+30h] +
lea eax [esi+8] +
jmp loc_1007EEC  +
lea esi [edi+34h] +
lea eax [esi+4] +
mov [ebp+var_64] eax +
lea eax [ebp+var_60] +
push eax  +
call sub_1007FC0  +
sub esi edi +
push esi  +
push edi  +
lea eax [ebp+var_60] +
push eax  +
call sub_1008080  +
sub ebx [ebp+var_64] +
lea eax [ebp+var_60] +
push ebx  +
push [ebp+var_64]  +
push eax  +
call sub_1008080  +
push 8  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_60] +
push eax  +
call sub_1008080  +
push [ebp+var_68]  +
lea eax [ebp+var_60] +
push eax  +
call sub_1008190  +
mov eax [ebp+var_6C] +
mov byte ptr [eax] 1 +
xor eax eax +
jmp loc_1007F3F  +
mov eax 0C000000Dh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1003217  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
xor ecx ecx +
cmp dword ptr [eax] 0C0000006h +
setz cl  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
cmp dword_100B91C 0 +
push ebx  +
jnz loc_100803D  +
push eax  +
push ebx  +
push ecx  +
push edx  +
xor eax eax +
cpuid   +
xor eax eax +
xor ebx 756E6547h +
setz al  +
xor ebx ebx +
xor ecx 6C65746Eh +
setz bl  +
and eax ebx +
xor ecx ecx +
xor edx 49656E69h +
setz cl  +
and eax ecx +
mov [ebp+var_4] eax +
mov eax 1 +
cpuid   +
xor ecx ecx +
xor edx edx +
mov ebx 0FF0h +
and ebx eax +
mov [ebp+var_8] ebx +
pop edx  +
pop ecx  +
pop ebx  +
pop eax  +
cmp [ebp+var_4] 0 +
mov eax 1 +
jz loc_1008031  +
cmp [ebp+var_8] 660h +
jnb loc_1008031  +
xor eax eax +
mov eax off_100B250[eax*4] +
mov dword_100B91C eax +
mov eax [ebp+arg_0] +
mov dword ptr [eax+54h] 0 +
mov dword ptr [eax+58h] 0 +
mov dword ptr [eax+40h] 67452301h +
mov dword ptr [eax+44h] 0EFCDAB89h +
mov dword ptr [eax+48h] 98BADCFEh +
mov dword ptr [eax+4Ch] 10325476h +
mov dword ptr [eax+50h] 0C3D2E1F0h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_0] +
mov ecx [edi+58h] +
mov eax ecx +
add ecx esi +
and eax 3Fh +
mov [ebp+var_4] eax +
mov [edi+58h] ecx +
cmp ecx esi +
jnb loc_10080A8  +
inc dword ptr [edi+54h]  +
test eax eax +
jbe loc_10080FB  +
lea ecx [eax+esi] +
mov [ebp+var_8] ecx +
cmp ecx 40h +
jb loc_10080FB  +
mov ebx [ebp+arg_4] +
mov ecx 40h +
sub ecx eax +
push ecx  +
add eax edi +
push ebx  +
push eax  +
call memcpy  +
mov eax [ebp+var_8] +
add esp 0Ch +
mov edx 40h +
sub edx [ebp+var_4] +
push edi  +
lea ecx [edi+40h] +
add eax 0FFFFFFC0h +
push ecx  +
add ebx edx +
mov [ebp+arg_8] eax +
call dword_100B91C  +
mov esi [ebp+arg_8] +
mov [ebp+var_4] 0 +
mov eax [ebp+var_4] +
jmp loc_10080FE  +
mov ebx [ebp+arg_4] +
test bl 3 +
jz loc_100813C  +
cmp esi 40h +
jb loc_100816A  +
shr esi 6 +
mov [ebp+arg_4] esi +
mov edi edi +
mov eax [ebp+arg_0] +
push eax  +
add eax 40h +
mov ecx 10h +
mov esi ebx +
push eax  +
movs   +
call dword_100B91C  +
sub [ebp+arg_8] 40h +
mov edi [ebp+arg_0] +
add ebx 40h +
sub [ebp+arg_4] 1 +
jnz loc_1008110  +
mov esi [ebp+arg_8] +
jmp loc_1008167  +
cmp esi 40h +
jb loc_100816A  +
mov eax esi +
shr eax 6 +
mov [ebp+arg_8] eax +
lea esp [esp+0] +
push ebx  +
lea eax [edi+40h] +
push eax  +
call dword_100B91C  +
add ebx 40h +
sub esi 40h +
sub [ebp+arg_8] 1 +
jnz loc_1008150  +
mov eax [ebp+var_4] +
test esi esi +
jz loc_100817B  +
push esi  +
add eax edi +
push ebx  +
push eax  +
call memcpy  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+58h] +
push edi  +
and eax 3Fh +
mov edi 40h +
sub edi eax +
cmp edi 8 +
ja loc_10081B2  +
add edi 40h +
lea ecx [edi-8] +
push ecx  +
lea edx [ebp+var_50] +
push 0  +
push edx  +
call memset  +
mov ecx [esi+54h] +
mov eax [esi+58h] +
add ecx ecx +
mov edx eax +
add ecx ecx +
add ecx ecx +
shr edx 1Dh +
or ecx edx +
add esp 0Ch +
add eax eax +
mov [ebp+var_8] ecx +
push 2  +
lea ecx [ebp+var_8] +
add eax eax +
push ecx  +
lea edx [ebp+edi+var_58] +
add eax eax +
push edx  +
mov byte ptr [ebp+var_50] 80h +
mov [ebp+var_4] eax +
call sub_100A050  +
push edi  +
lea eax [ebp+var_50] +
push eax  +
push esi  +
call sub_1008080  +
mov edx [ebp+arg_4] +
push 5  +
lea ecx [esi+40h] +
push ecx  +
push edx  +
call sub_100A050  +
push 40h  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
push esi  +
call sub_1007FC0  +
pop edi  +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push ebx  +
push ebp  +
mov edx [esp+arg_4] +
sub esp 140h +
mov esi 10h +
lea ecx [esp+140h+var_144] +
mov eax [edx] +
add ecx 4 +
add edx 4 +
bswap eax  +
mov [ecx] eax +
dec esi  +
jnz loc_1008257  +
mov ebp [esp+140h+arg_0] +
lea ecx [esp+140h+var_138] +
mov edx 20h +
xor eax eax +
xor ebx ebx +
mov eax [ecx-8] +
mov ebx [ecx-4] +
mov esi [ecx] +
mov edi [ecx+4] +
xor eax esi +
xor ebx edi +
mov esi [ecx+18h] +
mov edi [ecx+1Ch] +
xor eax esi +
xor ebx edi +
mov esi [ecx+2Ch] +
mov edi [ecx+30h] +
xor eax esi +
add ecx 8 +
rol eax 1 +
xor ebx edi +
rol ebx 1 +
mov [ecx+30h] eax +
dec edx  +
mov [ecx+34h] ebx +
jnz loc_100827A  +
mov eax [ebp+0] +
mov ebx [ebp+4] +
mov ecx [ebp+8] +
mov edx [ebp+0Ch] +
mov edi [ebp+10h] +
mov ebp ecx +
xor ebp edx +
and ebp ebx +
mov esi eax +
rol esi 5 +
add edi esi +
mov esi [esp+140h+var_140] +
ror ebx 1 +
xor ebp edx +
ror ebx 1 +
lea edi [esi+edi+5A827999h] +
add edi ebp +
mov esi ebx +
xor esi ecx +
mov ebp edi +
rol ebp 5 +
and esi eax +
add edx ebp +
ror eax 1 +
mov ebp [esp+140h+var_13C] +
ror eax 1 +
xor esi ecx +
lea edx [ebp+edx+5A827999h] +
mov ebp eax +
add edx esi +
xor ebp ebx +
and ebp edi +
mov esi edx +
rol esi 5 +
add ecx esi +
mov esi [esp+140h+var_138] +
ror edi 1 +
xor ebp ebx +
ror edi 1 +
lea ecx [esi+ecx+5A827999h] +
add ecx ebp +
mov esi edi +
xor esi eax +
mov ebp ecx +
rol ebp 5 +
and esi edx +
add ebx ebp +
ror edx 1 +
mov ebp [esp+140h+var_134] +
ror edx 1 +
xor esi eax +
lea ebx [ebp+ebx+5A827999h] +
mov ebp edx +
add ebx esi +
xor ebp edi +
and ebp ecx +
mov esi ebx +
rol esi 5 +
add eax esi +
mov esi [esp+140h+var_130] +
ror ecx 1 +
xor ebp edi +
ror ecx 1 +
lea eax [esi+eax+5A827999h] +
add eax ebp +
mov esi ecx +
xor esi edx +
mov ebp eax +
rol ebp 5 +
and esi ebx +
add edi ebp +
ror ebx 1 +
mov ebp [esp+140h+var_12C] +
ror ebx 1 +
xor esi edx +
lea edi [ebp+edi+5A827999h] +
mov ebp ebx +
add edi esi +
xor ebp ecx +
and ebp eax +
mov esi edi +
rol esi 5 +
add edx esi +
mov esi [esp+140h+var_128] +
ror eax 1 +
xor ebp ecx +
ror eax 1 +
lea edx [esi+edx+5A827999h] +
add edx ebp +
mov esi eax +
xor esi ebx +
mov ebp edx +
rol ebp 5 +
and esi edi +
add ecx ebp +
ror edi 1 +
mov ebp [esp+140h+var_124] +
ror edi 1 +
xor esi ebx +
lea ecx [ebp+ecx+5A827999h] +
mov ebp edi +
add ecx esi +
xor ebp eax +
and ebp edx +
mov esi ecx +
rol esi 5 +
add ebx esi +
mov esi [esp+140h+var_120] +
ror edx 1 +
xor ebp eax +
ror edx 1 +
lea ebx [esi+ebx+5A827999h] +
add ebx ebp +
mov esi edx +
xor esi edi +
mov ebp ebx +
rol ebp 5 +
and esi ecx +
add eax ebp +
ror ecx 1 +
mov ebp [esp+140h+var_11C] +
ror ecx 1 +
xor esi edi +
lea eax [ebp+eax+5A827999h] +
mov ebp ecx +
add eax esi +
xor ebp edx +
and ebp ebx +
mov esi eax +
rol esi 5 +
add edi esi +
mov esi [esp+140h+var_118] +
ror ebx 1 +
xor ebp edx +
ror ebx 1 +
lea edi [esi+edi+5A827999h] +
add edi ebp +
mov esi ebx +
xor esi ecx +
mov ebp edi +
rol ebp 5 +
and esi eax +
add edx ebp +
ror eax 1 +
mov ebp [esp+140h+var_114] +
ror eax 1 +
xor esi ecx +
lea edx [ebp+edx+5A827999h] +
mov ebp eax +
add edx esi +
xor ebp ebx +
and ebp edi +
mov esi edx +
rol esi 5 +
add ecx esi +
mov esi [esp+140h+var_110] +
ror edi 1 +
xor ebp ebx +
ror edi 1 +
lea ecx [esi+ecx+5A827999h] +
add ecx ebp +
mov esi edi +
xor esi eax +
mov ebp ecx +
rol ebp 5 +
and esi edx +
add ebx ebp +
ror edx 1 +
mov ebp [esp+140h+var_10C] +
ror edx 1 +
xor esi eax +
lea ebx [ebp+ebx+5A827999h] +
mov ebp edx +
add ebx esi +
xor ebp edi +
and ebp ecx +
mov esi ebx +
rol esi 5 +
add eax esi +
mov esi [esp+140h+var_108] +
ror ecx 1 +
xor ebp edi +
ror ecx 1 +
lea eax [esi+eax+5A827999h] +
add eax ebp +
mov esi ecx +
xor esi edx +
mov ebp eax +
rol ebp 5 +
and esi ebx +
add edi ebp +
ror ebx 1 +
mov ebp [esp+140h+var_104] +
ror ebx 1 +
xor esi edx +
lea edi [ebp+edi+5A827999h] +
mov ebp ebx +
add edi esi +
xor ebp ecx +
and ebp eax +
mov esi edi +
rol esi 5 +
add edx esi +
mov esi [esp+140h+var_100] +
ror eax 1 +
xor ebp ecx +
ror eax 1 +
lea edx [esi+edx+5A827999h] +
add edx ebp +
mov esi eax +
xor esi ebx +
mov ebp edx +
rol ebp 5 +
and esi edi +
add ecx ebp +
ror edi 1 +
mov ebp [esp+140h+var_FC] +
ror edi 1 +
xor esi ebx +
lea ecx [ebp+ecx+5A827999h] +
mov ebp edi +
add ecx esi +
xor ebp eax +
and ebp edx +
mov esi ecx +
rol esi 5 +
add ebx esi +
mov esi [esp+140h+var_F8] +
ror edx 1 +
xor ebp eax +
ror edx 1 +
lea ebx [esi+ebx+5A827999h] +
add ebx ebp +
mov esi edx +
xor esi edi +
mov ebp ebx +
rol ebp 5 +
and esi ecx +
add eax ebp +
ror ecx 1 +
mov ebp [esp+140h+var_F4] +
ror ecx 1 +
xor esi edi +
lea eax [ebp+eax+5A827999h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_F0] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_EC] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_E8] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_E4] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_E0] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_DC] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_D8] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_D4] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_D0] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_CC] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_C8] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_C4] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_C0] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_BC] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_B8] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_B4] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_B0] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_AC] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_A8] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_A4] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
mov ebp ebx +
mov esi eax +
or ebp ecx +
rol esi 5 +
and ebp edx +
add edi esi +
mov esi [esp+140h+var_A0] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_9C] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_98] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_94] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_90] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ebx +
mov esi eax +
rol esi 5 +
or ebp ecx +
add edi esi +
and ebp edx +
mov esi [esp+140h+var_8C] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_88] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_84] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_80] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_7C] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ebx +
mov esi eax +
rol esi 5 +
or ebp ecx +
add edi esi +
and ebp edx +
mov esi [esp+140h+var_78] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_74] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_70] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_6C] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_68] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ebx +
mov esi eax +
rol esi 5 +
or ebp ecx +
add edi esi +
and ebp edx +
mov esi [esp+140h+var_64] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_60] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_5C] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_58] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_54] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ecx +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_50] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_4C] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_48] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_44] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_40] +
lea eax [ebp+eax-359D3E2Ah] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_3C] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_38] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_34] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_30] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_2C] +
lea eax [ebp+eax-359D3E2Ah] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_28] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_24] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_20] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_1C] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_18] +
lea eax [ebp+eax-359D3E2Ah] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_14] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_10] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_C] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_8] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_4] +
add eax 0CA62C1D6h +
add esi ebp +
add eax esi +
mov esi [esp+140h+arg_0] +
add esp 140h +
mov ebp [esi] +
add eax ebp +
mov ebp [esi+4] +
add ebx ebp +
mov ebp [esi+8] +
add ecx ebp +
mov ebp [esi+0Ch] +
add edx ebp +
mov ebp [esi+10h] +
add edi ebp +
mov [esi] eax +
mov [esi+4] ebx +
mov [esi+8] ecx +
mov [esi+0Ch] edx +
mov [esi+10h] edi +
pop ebp  +
pop ebx  +
pop edi  +
pop esi  +
retn 8  +
***
push ebx  +
push ebp  +
sub esp 140h +
mov ebp [esp+140h+arg_0] +
mov eax [ebp+0] +
mov ebx [ebp+4] +
mov ecx [ebp+8] +
mov edx [ebp+0Ch] +
mov edi [ebp+10h] +
mov ebp [esp+140h+arg_4] +
mov esi [ebp+0] +
bswap esi  +
mov [esp+140h+var_140] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [ebp+4] +
bswap esi  +
mov [esp+140h+var_13C] esi +
add edx esi +
mov esi edi +
rol esi 5 +
lea edx [edx+esi+5A827999h] +
mov esi ebx +
xor esi ecx +
and esi eax +
xor esi ecx +
ror eax 2 +
add edx esi +
mov esi [ebp+8] +
bswap esi  +
mov [esp+140h+var_138] esi +
add ecx esi +
mov esi edx +
rol esi 5 +
lea ecx [ecx+esi+5A827999h] +
mov esi eax +
xor esi ebx +
and esi edi +
xor esi ebx +
ror edi 2 +
add ecx esi +
mov esi [ebp+0Ch] +
bswap esi  +
mov [esp+140h+var_134] esi +
add ebx esi +
mov esi ecx +
rol esi 5 +
lea ebx [ebx+esi+5A827999h] +
mov esi edi +
xor esi eax +
and esi edx +
xor esi eax +
ror edx 2 +
add ebx esi +
mov esi [ebp+10h] +
bswap esi  +
mov [esp+140h+var_130] esi +
add eax esi +
mov esi ebx +
rol esi 5 +
lea eax [eax+esi+5A827999h] +
mov esi edx +
xor esi edi +
and esi ecx +
xor esi edi +
ror ecx 2 +
add eax esi +
mov esi [ebp+14h] +
bswap esi  +
mov [esp+140h+var_12C] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [ebp+18h] +
bswap esi  +
mov [esp+140h+var_128] esi +
add edx esi +
mov esi edi +
rol esi 5 +
lea edx [edx+esi+5A827999h] +
mov esi ebx +
xor esi ecx +
and esi eax +
xor esi ecx +
ror eax 2 +
add edx esi +
mov esi [ebp+1Ch] +
bswap esi  +
mov [esp+140h+var_124] esi +
add ecx esi +
mov esi edx +
rol esi 5 +
lea ecx [ecx+esi+5A827999h] +
mov esi eax +
xor esi ebx +
and esi edi +
xor esi ebx +
ror edi 2 +
add ecx esi +
mov esi [ebp+20h] +
bswap esi  +
mov [esp+140h+var_120] esi +
add ebx esi +
mov esi ecx +
rol esi 5 +
lea ebx [ebx+esi+5A827999h] +
mov esi edi +
xor esi eax +
and esi edx +
xor esi eax +
ror edx 2 +
add ebx esi +
mov esi [ebp+24h] +
bswap esi  +
mov [esp+140h+var_11C] esi +
add eax esi +
mov esi ebx +
rol esi 5 +
lea eax [eax+esi+5A827999h] +
mov esi edx +
xor esi edi +
and esi ecx +
xor esi edi +
ror ecx 2 +
add eax esi +
mov esi [ebp+28h] +
bswap esi  +
mov [esp+140h+var_118] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [ebp+2Ch] +
bswap esi  +
mov [esp+140h+var_114] esi +
add edx esi +
mov esi edi +
rol esi 5 +
lea edx [edx+esi+5A827999h] +
mov esi ebx +
xor esi ecx +
and esi eax +
xor esi ecx +
ror eax 2 +
add edx esi +
mov esi [ebp+30h] +
bswap esi  +
mov [esp+140h+var_110] esi +
add ecx esi +
mov esi edx +
rol esi 5 +
lea ecx [ecx+esi+5A827999h] +
mov esi eax +
xor esi ebx +
and esi edi +
xor esi ebx +
ror edi 2 +
add ecx esi +
mov esi [ebp+34h] +
bswap esi  +
mov [esp+140h+var_10C] esi +
add ebx esi +
mov esi ecx +
rol esi 5 +
lea ebx [ebx+esi+5A827999h] +
mov esi edi +
xor esi eax +
and esi edx +
xor esi eax +
ror edx 2 +
add ebx esi +
mov esi [ebp+38h] +
bswap esi  +
mov [esp+140h+var_108] esi +
add eax esi +
mov esi ebx +
rol esi 5 +
lea eax [eax+esi+5A827999h] +
mov esi edx +
xor esi edi +
and esi ecx +
xor esi edi +
ror ecx 2 +
add eax esi +
mov esi [ebp+3Ch] +
bswap esi  +
mov [esp+140h+var_104] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [esp+140h+var_140] +
mov ebp [esp+140h+var_138] +
xor esi ebp +
mov ebp [esp+140h+var_120] +
xor esi ebp +
mov ebp [esp+140h+var_10C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_100] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+5A827999h] +
add edx esi +
mov ebp ebx +
xor ebp ecx +
and ebp eax +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_13C] +
mov ebp [esp+140h+var_134] +
xor esi ebp +
mov ebp [esp+140h+var_11C] +
xor esi ebp +
mov ebp [esp+140h+var_108] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_FC] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+5A827999h] +
add ecx esi +
mov ebp eax +
xor ebp ebx +
and ebp edi +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_138] +
mov ebp [esp+140h+var_130] +
xor esi ebp +
mov ebp [esp+140h+var_118] +
xor esi ebp +
mov ebp [esp+140h+var_104] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_F8] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+5A827999h] +
add ebx esi +
mov ebp edi +
xor ebp eax +
and ebp edx +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_134] +
mov ebp [esp+140h+var_12C] +
xor esi ebp +
mov ebp [esp+140h+var_114] +
xor esi ebp +
mov ebp [esp+140h+var_100] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_F4] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+5A827999h] +
add eax esi +
mov ebp edx +
xor ebp edi +
and ebp ecx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_130] +
mov ebp [esp+140h+var_128] +
xor esi ebp +
mov ebp [esp+140h+var_110] +
xor esi ebp +
mov ebp [esp+140h+var_FC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_F0] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_12C] +
mov ebp [esp+140h+var_124] +
xor esi ebp +
mov ebp [esp+140h+var_10C] +
xor esi ebp +
mov ebp [esp+140h+var_F8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_EC] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_128] +
mov ebp [esp+140h+var_120] +
xor esi ebp +
mov ebp [esp+140h+var_108] +
xor esi ebp +
mov ebp [esp+140h+var_F4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_E8] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_124] +
mov ebp [esp+140h+var_11C] +
xor esi ebp +
mov ebp [esp+140h+var_104] +
xor esi ebp +
mov ebp [esp+140h+var_F0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_E4] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_120] +
mov ebp [esp+140h+var_118] +
xor esi ebp +
mov ebp [esp+140h+var_100] +
xor esi ebp +
mov ebp [esp+140h+var_EC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_E0] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_11C] +
mov ebp [esp+140h+var_114] +
xor esi ebp +
mov ebp [esp+140h+var_FC] +
xor esi ebp +
mov ebp [esp+140h+var_E8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_DC] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_118] +
mov ebp [esp+140h+var_110] +
xor esi ebp +
mov ebp [esp+140h+var_F8] +
xor esi ebp +
mov ebp [esp+140h+var_E4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_D8] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_114] +
mov ebp [esp+140h+var_10C] +
xor esi ebp +
mov ebp [esp+140h+var_F4] +
xor esi ebp +
mov ebp [esp+140h+var_E0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_D4] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_110] +
mov ebp [esp+140h+var_108] +
xor esi ebp +
mov ebp [esp+140h+var_F0] +
xor esi ebp +
mov ebp [esp+140h+var_DC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_D0] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_10C] +
mov ebp [esp+140h+var_104] +
xor esi ebp +
mov ebp [esp+140h+var_EC] +
xor esi ebp +
mov ebp [esp+140h+var_D8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_CC] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_108] +
mov ebp [esp+140h+var_100] +
xor esi ebp +
mov ebp [esp+140h+var_E8] +
xor esi ebp +
mov ebp [esp+140h+var_D4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_C8] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_104] +
mov ebp [esp+140h+var_FC] +
xor esi ebp +
mov ebp [esp+140h+var_E4] +
xor esi ebp +
mov ebp [esp+140h+var_D0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_C4] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_100] +
mov ebp [esp+140h+var_F8] +
xor esi ebp +
mov ebp [esp+140h+var_E0] +
xor esi ebp +
mov ebp [esp+140h+var_CC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_C0] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_FC] +
mov ebp [esp+140h+var_F4] +
xor esi ebp +
mov ebp [esp+140h+var_DC] +
xor esi ebp +
mov ebp [esp+140h+var_C8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_BC] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_F8] +
mov ebp [esp+140h+var_F0] +
xor esi ebp +
mov ebp [esp+140h+var_D8] +
xor esi ebp +
mov ebp [esp+140h+var_C4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_B8] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_F4] +
mov ebp [esp+140h+var_EC] +
xor esi ebp +
mov ebp [esp+140h+var_D4] +
xor esi ebp +
mov ebp [esp+140h+var_C0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_B4] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_F0] +
mov ebp [esp+140h+var_E8] +
xor esi ebp +
mov ebp [esp+140h+var_D0] +
xor esi ebp +
mov ebp [esp+140h+var_BC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_B0] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_EC] +
mov ebp [esp+140h+var_E4] +
xor esi ebp +
mov ebp [esp+140h+var_CC] +
xor esi ebp +
mov ebp [esp+140h+var_B8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_AC] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_E8] +
mov ebp [esp+140h+var_E0] +
xor esi ebp +
mov ebp [esp+140h+var_C8] +
xor esi ebp +
mov ebp [esp+140h+var_B4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_A8] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_E4] +
mov ebp [esp+140h+var_DC] +
xor esi ebp +
mov ebp [esp+140h+var_C4] +
xor esi ebp +
mov ebp [esp+140h+var_B0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_A4] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_E0] +
mov ebp [esp+140h+var_D8] +
xor esi ebp +
mov ebp [esp+140h+var_C0] +
xor esi ebp +
mov ebp [esp+140h+var_AC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_A0] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_DC] +
mov ebp [esp+140h+var_D4] +
xor esi ebp +
mov ebp [esp+140h+var_BC] +
xor esi ebp +
mov ebp [esp+140h+var_A8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_9C] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_D8] +
mov ebp [esp+140h+var_D0] +
xor esi ebp +
mov ebp [esp+140h+var_B8] +
xor esi ebp +
mov ebp [esp+140h+var_A4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_98] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_D4] +
mov ebp [esp+140h+var_CC] +
xor esi ebp +
mov ebp [esp+140h+var_B4] +
xor esi ebp +
mov ebp [esp+140h+var_A0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_94] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_D0] +
mov ebp [esp+140h+var_C8] +
xor esi ebp +
mov ebp [esp+140h+var_B0] +
xor esi ebp +
mov ebp [esp+140h+var_9C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_90] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_CC] +
mov ebp [esp+140h+var_C4] +
xor esi ebp +
mov ebp [esp+140h+var_AC] +
xor esi ebp +
mov ebp [esp+140h+var_98] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_8C] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_C8] +
mov ebp [esp+140h+var_C0] +
xor esi ebp +
mov ebp [esp+140h+var_A8] +
xor esi ebp +
mov ebp [esp+140h+var_94] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_88] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_C4] +
mov ebp [esp+140h+var_BC] +
xor esi ebp +
mov ebp [esp+140h+var_A4] +
xor esi ebp +
mov ebp [esp+140h+var_90] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_84] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_C0] +
mov ebp [esp+140h+var_B8] +
xor esi ebp +
mov ebp [esp+140h+var_A0] +
xor esi ebp +
mov ebp [esp+140h+var_8C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_80] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_BC] +
mov ebp [esp+140h+var_B4] +
xor esi ebp +
mov ebp [esp+140h+var_9C] +
xor esi ebp +
mov ebp [esp+140h+var_88] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_7C] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_B8] +
mov ebp [esp+140h+var_B0] +
xor esi ebp +
mov ebp [esp+140h+var_98] +
xor esi ebp +
mov ebp [esp+140h+var_84] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_78] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_B4] +
mov ebp [esp+140h+var_AC] +
xor esi ebp +
mov ebp [esp+140h+var_94] +
xor esi ebp +
mov ebp [esp+140h+var_80] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_74] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_B0] +
mov ebp [esp+140h+var_A8] +
xor esi ebp +
mov ebp [esp+140h+var_90] +
xor esi ebp +
mov ebp [esp+140h+var_7C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_70] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_AC] +
mov ebp [esp+140h+var_A4] +
xor esi ebp +
mov ebp [esp+140h+var_8C] +
xor esi ebp +
mov ebp [esp+140h+var_78] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_6C] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_A8] +
mov ebp [esp+140h+var_A0] +
xor esi ebp +
mov ebp [esp+140h+var_88] +
xor esi ebp +
mov ebp [esp+140h+var_74] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_68] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_A4] +
mov ebp [esp+140h+var_9C] +
xor esi ebp +
mov ebp [esp+140h+var_84] +
xor esi ebp +
mov ebp [esp+140h+var_70] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_64] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_A0] +
mov ebp [esp+140h+var_98] +
xor esi ebp +
mov ebp [esp+140h+var_80] +
xor esi ebp +
mov ebp [esp+140h+var_6C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_60] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_9C] +
mov ebp [esp+140h+var_94] +
xor esi ebp +
mov ebp [esp+140h+var_7C] +
xor esi ebp +
mov ebp [esp+140h+var_68] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_5C] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_98] +
mov ebp [esp+140h+var_90] +
xor esi ebp +
mov ebp [esp+140h+var_78] +
xor esi ebp +
mov ebp [esp+140h+var_64] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_58] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_94] +
mov ebp [esp+140h+var_8C] +
xor esi ebp +
mov ebp [esp+140h+var_74] +
xor esi ebp +
mov ebp [esp+140h+var_60] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_54] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_90] +
mov ebp [esp+140h+var_88] +
xor esi ebp +
mov ebp [esp+140h+var_70] +
xor esi ebp +
mov ebp [esp+140h+var_5C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_50] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_8C] +
mov ebp [esp+140h+var_84] +
xor esi ebp +
mov ebp [esp+140h+var_6C] +
xor esi ebp +
mov ebp [esp+140h+var_58] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_4C] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_88] +
mov ebp [esp+140h+var_80] +
xor esi ebp +
mov ebp [esp+140h+var_68] +
xor esi ebp +
mov ebp [esp+140h+var_54] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_48] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_84] +
mov ebp [esp+140h+var_7C] +
xor esi ebp +
mov ebp [esp+140h+var_64] +
xor esi ebp +
mov ebp [esp+140h+var_50] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_44] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_80] +
mov ebp [esp+140h+var_78] +
xor esi ebp +
mov ebp [esp+140h+var_60] +
xor esi ebp +
mov ebp [esp+140h+var_4C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_40] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_7C] +
mov ebp [esp+140h+var_74] +
xor esi ebp +
mov ebp [esp+140h+var_5C] +
xor esi ebp +
mov ebp [esp+140h+var_48] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_3C] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_78] +
mov ebp [esp+140h+var_70] +
xor esi ebp +
mov ebp [esp+140h+var_58] +
xor esi ebp +
mov ebp [esp+140h+var_44] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_38] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_74] +
mov ebp [esp+140h+var_6C] +
xor esi ebp +
mov ebp [esp+140h+var_54] +
xor esi ebp +
mov ebp [esp+140h+var_40] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_34] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_70] +
mov ebp [esp+140h+var_68] +
xor esi ebp +
mov ebp [esp+140h+var_50] +
xor esi ebp +
mov ebp [esp+140h+var_3C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_30] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_6C] +
mov ebp [esp+140h+var_64] +
xor esi ebp +
mov ebp [esp+140h+var_4C] +
xor esi ebp +
mov ebp [esp+140h+var_38] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_2C] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_68] +
mov ebp [esp+140h+var_60] +
xor esi ebp +
mov ebp [esp+140h+var_48] +
xor esi ebp +
mov ebp [esp+140h+var_34] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_28] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_64] +
mov ebp [esp+140h+var_5C] +
xor esi ebp +
mov ebp [esp+140h+var_44] +
xor esi ebp +
mov ebp [esp+140h+var_30] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_24] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_60] +
mov ebp [esp+140h+var_58] +
xor esi ebp +
mov ebp [esp+140h+var_40] +
xor esi ebp +
mov ebp [esp+140h+var_2C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_20] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_5C] +
mov ebp [esp+140h+var_54] +
xor esi ebp +
mov ebp [esp+140h+var_3C] +
xor esi ebp +
mov ebp [esp+140h+var_28] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_1C] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_58] +
mov ebp [esp+140h+var_50] +
xor esi ebp +
mov ebp [esp+140h+var_38] +
xor esi ebp +
mov ebp [esp+140h+var_24] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_18] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_54] +
mov ebp [esp+140h+var_4C] +
xor esi ebp +
mov ebp [esp+140h+var_34] +
xor esi ebp +
mov ebp [esp+140h+var_20] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_14] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_50] +
mov ebp [esp+140h+var_48] +
xor esi ebp +
mov ebp [esp+140h+var_30] +
xor esi ebp +
mov ebp [esp+140h+var_1C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_10] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_4C] +
mov ebp [esp+140h+var_44] +
xor esi ebp +
mov ebp [esp+140h+var_2C] +
xor esi ebp +
mov ebp [esp+140h+var_18] +
xor esi ebp +
rol esi 1 +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_48] +
mov ebp [esp+140h+var_40] +
xor esi ebp +
mov ebp [esp+140h+var_28] +
xor esi ebp +
mov ebp [esp+140h+var_14] +
xor esi ebp +
rol esi 1 +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_44] +
mov ebp [esp+140h+var_3C] +
xor esi ebp +
mov ebp [esp+140h+var_24] +
xor esi ebp +
mov ebp [esp+140h+var_10] +
xor esi ebp +
rol esi 1 +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+arg_0] +
add esp 140h +
mov ebp [esi] +
add eax ebp +
mov ebp [esi+4] +
add ebx ebp +
mov ebp [esi+8] +
add ecx ebp +
mov ebp [esi+0Ch] +
add edx ebp +
mov ebp [esi+10h] +
add edi ebp +
mov [esi] eax +
mov [esi+4] ebx +
mov [esi+8] ecx +
mov [esi+0Ch] edx +
mov [esi+10h] edi +
pop ebp  +
pop ebx  +
pop edi  +
pop esi  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
test edx edx +
jbe loc_100A075  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
sub ecx eax +
push esi  +
mov esi [ecx+eax] +
bswap esi  +
mov [eax] esi +
add eax 4 +
sub edx 1 +
jnz loc_100A065  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
retn   +
***
