mov edi edi +
push ebp  +
mov ebp esp +
sub esp 404h +
mov eax dword_1002000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push ebx  +
push ebx  +
xor esi esi +
inc esi  +
push esi  +
push ebx  +
call ds:HeapSetInformation  +
push ebx  +
call ds:SetThreadUILanguage  +
push offset stru_1002380  +
push 101h  +
call ds:WSAStartup  +
cmp eax ebx +
jz loc_10011D1  +
push eax  +
push 2713h  +
call sub_1001A09  +
cmp [ebp+arg_0] esi +
jle loc_100120B  +
mov eax [ebp+arg_4] +
mov eax [eax+4] +
mov cl [eax] +
cmp cl 2Fh +
jz loc_10011E8  +
cmp cl 2Dh +
jnz loc_1001202  +
cmp byte ptr [eax+1] 3Fh +
jnz loc_1001202  +
push 2710h  +
push esi  +
call sub_1001979  +
pop ecx  +
pop ecx  +
push esi  +
call ds:exit  +
push 2714h  +
push 2  +
jmp loc_10011F4  +
push 400h  +
lea eax [ebp+szDst] +
push eax  +
call ds:gethostname  +
test eax eax +
jge loc_1001234  +
call ds:GetLastError  +
push eax  +
push 2712h  +
call sub_1001A09  +
jmp loc_10011FB  +
lea eax [ebp+szDst] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_100123D  +
sub eax edx +
push eax  +
lea eax [ebp+szDst] +
push eax  +
push eax  +
call ds:CharToOemBuffA  +
lea eax [ebp+szDst] +
push eax  +
call ds:puts  +
pop ecx  +
push ebx  +
jmp loc_10011FC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1001287  +
test eax eax +
jnz loc_100128C  +
mov ecx [esi] +
test ecx ecx +
jz loc_1001284  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1001278  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1002044 +
push offset dword_1002034  +
push dword_1002040  +
mov dword_1002034 eax +
push offset dword_1002024  +
push offset dword_1002028  +
push offset dword_1002020  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1002030 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1001314  +
cmp eax esi +
jnz loc_1001307  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_1001317  +
push 3E8h  +
call ds:Sleep  +
jmp loc_10012EE  +
xor esi esi +
inc esi  +
mov eax dword_1002518 +
cmp eax esi +
jnz loc_100132A  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1001365  +
mov eax dword_1002518 +
test eax eax +
jnz loc_100135F  +
mov dword_1002518 esi +
push offset dword_10010C8  +
push offset dword_10010BC  +
call sub_100126B  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1001365  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_100142F  +
mov dword_100203C esi +
mov eax dword_1002518 +
cmp eax esi +
jnz loc_1001389  +
push offset dword_10010B8  +
push offset dword_10010B0  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1002518 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1001396  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1002520 ebx +
jz loc_10013B7  +
push offset dword_1002520  +
call sub_1001619  +
pop ecx  +
test eax eax +
jz loc_10013B7  +
push ebx  +
push 2  +
push ebx  +
call dword_1002520  +
push dword_1002024  +
push dword_1002028  +
push dword_1002020  +
call sub_1001185  +
add esp 0Ch +
mov dword_1002038 eax +
cmp dword_100202C ebx +
jnz loc_1001415  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1002038 eax +
xor ebx ebx +
cmp dword_100202C ebx +
jnz loc_1001415  +
push eax  +
call ds:_exit  +
cmp dword_100203C ebx +
jnz loc_1001423  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1002038 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100144C  +
xor eax eax +
jmp loc_1001499  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1001448  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1001486  +
cmp ecx 20Bh +
jnz loc_1001448  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1001448  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1001494  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1001448  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_100202C eax +
call sub_10017B2  +
push eax  +
call ds:__set_app_type  +
or dword_1002510 0FFFFFFFFh +
or dword_1002514 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100204C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1002048 +
mov [eax] ecx +
call sub_1001744  +
cmp dword_1002010 0 +
jnz loc_10014F2  +
push offset sub_1001744  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100172C  +
xor eax eax +
retn   +
***
call sub_10017F1  +
jmp sub_10012CC  +
***
cmp ecx dword_1002000 +
jnz loc_1001519  +
retn 0  +
***
jmp loc_1001887  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1001560  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1001560  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100155A  +
cmp eax 19930521h +
jz loc_100155A  +
cmp eax 19930522h +
jz loc_100155A  +
cmp eax 1994000h +
jnz loc_1001560  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1001520+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10015A6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10015A2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100160D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1001605  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100160F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10015F5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1001590  +
pop ecx  +
test eax eax +
jz loc_1001676  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_10015D0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1001676  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100167F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset loc_100150E  +
push offset dword_1002000  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10017A5  +
cmp ecx 0FFFFFFFFh +
jz loc_10017A5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100179E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100179E  +
cmp edx 10000000h +
jnb loc_100179E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100179E  +
jmp loc_1001799  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10017E7  +
push eax  +
call sub_100174C  +
test eax eax +
jz loc_10017E7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10017DC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10017E7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1002000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1001823  +
test eax ebx +
jz loc_1001823  +
not eax  +
mov dword_1002004 eax +
jmp loc_100187E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100186A  +
test dword_1002000 ebx +
jnz loc_100186F  +
mov esi 0BB40E64Fh +
mov dword_1002000 esi +
not esi  +
mov dword_1002004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1002150 eax +
mov dword_100214C ecx +
mov dword_1002148 edx +
mov dword_1002144 ebx +
mov dword_1002140 esi +
mov dword_100213C edi +
mov word_1002168 ss +
mov word_100215C cs +
mov word_1002138 ds +
mov word_1002134 es +
mov word_1002130 fs +
mov word_100212C gs +
pushf   +
pop dword_1002160  +
mov eax [ebp+0] +
mov dword_1002154 eax +
mov eax [ebp+4] +
mov dword_1002158 eax +
lea eax [ebp+8] +
mov dword_1002164 eax +
mov eax [ebp-320h] +
mov dword_10020A0 10001h +
mov eax dword_1002158 +
mov dword_100205C eax +
mov dword_1002050 0C0000409h +
mov dword_1002054 1 +
mov eax dword_1002000 +
mov [ebp-328h] eax +
mov eax dword_1002004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset off_10010EC  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+arg_8] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 0  +
lea eax [ebp+hMem] +
push eax  +
push 0  +
push [ebp+dwMessageId]  +
push lpSource  +
push 900h  +
call ds:FormatMessageA  +
test eax eax +
jnz loc_10019AC  +
leave   +
retn   +
mov eax [ebp+hMem] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_10019B2  +
push esi  +
push edi  +
sub eax ecx +
mov esi eax +
push esi  +
push [ebp+hMem]  +
push [ebp+hMem]  +
call ds:CharToOemBuffA  +
push 8000h  +
push [ebp+arg_0]  +
call _setmode  +
push esi  +
push [ebp+hMem]  +
mov edi eax +
push [ebp+arg_0]  +
call _write  +
push edi  +
push [ebp+arg_0]  +
mov esi eax +
call _setmode  +
add esp 1Ch +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
lea ecx [ebp+hMem] +
push ecx  +
push eax  +
push [ebp+hMem]  +
push lpSource  +
push 900h  +
call ds:FormatMessageA  +
test eax eax +
jz loc_1001A43  +
push [ebp+arg_4]  +
push [ebp+hMem]  +
call s_perror  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop ebp  +
retn 8  +
***
