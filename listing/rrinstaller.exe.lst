mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+dwExceptionFlags]  +
push [ebp+dwExceptionCode]  +
call ds:RaiseException  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp dword ptr [ebp+8] 8007000Eh +
push 1  +
setz al  +
dec eax  +
and eax 6 +
add eax 0C0000017h +
push eax  +
call sub_10020A5  +
mov edi edi +
push edi  +
mov edx ecx +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov eax edx +
pop edi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_100213D  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push [ebp+arg_0]  +
call MFHeapAlloc  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100217F  +
push [ebp+arg_0]  +
call MFHeapFree  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpArguments] +
push esi  +
test ebx ebx +
jnz loc_10021A3  +
push ebx  +
push ebx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebx+8] +
test esi esi +
jz loc_10021C1  +
push edi  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call sub_100216C  +
pop ecx  +
mov esi edi +
test edi edi +
jnz loc_10021AB  +
pop edi  +
and dword ptr [ebx+8] 0 +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov [ecx+4] eax +
mov eax [ebp+arg_0] +
sub eax ecx +
push 0Dh  +
sub eax 0Dh +
push ecx  +
mov dword ptr [ecx] 42444C7h +
mov byte ptr [ecx+8] 0E9h +
mov [ecx+9] eax +
call ds:GetCurrentProcess  +
push eax  +
call ds:FlushInstructionCache  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_1002224  +
call sub_100648A  +
mov [esi] eax +
test eax eax +
jz loc_1002242  +
cmp [ebp+arg_0] 0 +
jnz loc_1002235  +
cmp [ebp+arg_4] 0 +
jnz loc_1002235  +
xor eax eax +
inc eax  +
jmp loc_1002242  +
push [ebp+arg_4]  +
mov ecx [esi] +
push [ebp+arg_0]  +
call sub_10021D0  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
mov [ebp+var_8.dwICC] eax +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_8.dwSize] 8 +
call ds:InitCommonControlsEx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+lpBuffer] 0 +
push ebx  +
push esi  +
mov ebx 0FFFF0000h +
push edi  +
mov esi 100h +
test [ebp+lpText] ebx +
jnz loc_10022FB  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
mov edi esi +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1002152  +
jmp loc_10022E6  +
movzx eax word ptr [ebp+lpText] +
push edi  +
push [ebp+lpBuffer]  +
push eax  +
push hInstance  +
call ds:LoadStringW  +
lea ecx [edi-1] +
cmp eax ecx +
jl loc_10022F5  +
push [ebp+lpBuffer]  +
call sub_100216C  +
add edi edi +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1002152  +
pop ecx  +
mov [ebp+lpBuffer] eax +
pop ecx  +
test eax eax +
jnz loc_10022A9  +
xor eax eax +
jmp loc_100238B  +
mov eax [ebp+lpBuffer] +
mov [ebp+lpText] eax +
xor edi edi +
test [ebp+lpCaption] ebx +
jnz loc_1002365  +
cmp word ptr [ebp+lpCaption] di +
jz loc_1002365  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1002152  +
jmp loc_1002359  +
movzx eax word ptr [ebp+lpCaption] +
push esi  +
push edi  +
push eax  +
push hInstance  +
call ds:LoadStringW  +
lea ecx [esi-1] +
cmp eax ecx +
jl loc_1002362  +
push edi  +
call sub_100216C  +
add esi esi +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1002152  +
pop ecx  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_1002320  +
jmp loc_10022EE  +
mov [ebp+lpCaption] edi +
push [ebp+uType]  +
push [ebp+lpCaption]  +
push [ebp+lpText]  +
push [ebp+hWnd]  +
call ds:MessageBoxW  +
push [ebp+lpBuffer]  +
mov esi eax +
call sub_100216C  +
push edi  +
call sub_100216C  +
pop ecx  +
pop ecx  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov ecx edx +
mov [esi+28h] eax +
call sub_1002102  +
test eax eax +
jge loc_10023CF  +
mov byte_100C034 1 +
jmp loc_10023D6  +
mov dword ptr [esi+4] 24h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
cmp dword ptr [edi] 0 +
jz loc_1002418  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_10023FE  +
push edi  +
call sub_1002186  +
and dword ptr [esi+0Ch] 0 +
mov eax [esi+28h] +
test eax eax +
jz loc_100240B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
add esi 10h +
push esi  +
call ds:DeleteCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_1002434  +
cmp eax 0FFFFFFFFh +
jbe loc_100243B  +
mov eax 80070057h +
jmp loc_1002442  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+cb] 0 +
push [ebp+arg_0]  +
lea eax [ebp+cb] +
push eax  +
call sub_1002420  +
test eax eax +
jge loc_100246C  +
xor eax eax +
jmp locret_1002475  +
push [ebp+cb]  +
call ds:CoTaskMemAlloc  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+cb] 0 +
push [ebp+arg_4]  +
lea eax [ebp+cb] +
push eax  +
call sub_1002420  +
test eax eax +
jge loc_100249F  +
xor eax eax +
jmp locret_10024AB  +
push [ebp+cb]  +
push [ebp+pv]  +
call ds:CoTaskMemRealloc  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpString]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1002551  +
cmp eax 0Ch +
jz loc_100254A  +
cmp eax 16h +
jz loc_1002543  +
cmp eax 22h +
jz loc_1002543  +
cmp eax 50h +
jz loc_1002551  +
push 80004005h  +
call loc_10020C3  +
push 80070057h  +
jmp loc_100253E  +
push 8007000Eh  +
jmp loc_100253E  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
push eax  +
call sub_1002519  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_1002519  +
pop ebp  +
retn   +
***
call ds:GetLastError  +
test eax eax +
jle locret_10025BA  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jle loc_10025D6  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
add ecx 8 +
push ecx  +
call ds:InterlockedIncrement  +
retn   +
***
add ecx 8 +
push ecx  +
call ds:InterlockedDecrement  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_100261F  +
mov eax 80004003h +
jmp loc_1002650  +
push esi  +
lea esi [ecx+28h] +
cmp [esi] edi +
jnz loc_1002641  +
push esi  +
push offset stru_1001494  +
push 1  +
push edi  +
push offset rclsid  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_100264D  +
mov eax [esi] +
mov [ebx] eax +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_10026A9  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebx-1] +
xor eax eax +
test edi edi +
jbe loc_10026A1  +
mov edx [ebp+arg_8] +
movzx ecx word ptr [edx] +
test cx cx +
jz loc_10026A1  +
mov [esi+eax*2] cx +
cmp word ptr [edx] 27h +
jnz loc_100269A  +
lea ecx [ebx-2] +
cmp eax ecx +
jnb loc_100269A  +
push 27h  +
inc eax  +
pop ecx  +
mov [esi+eax*2] cx +
inc edx  +
inc edx  +
inc eax  +
cmp eax edi +
jb loc_1002679  +
xor ecx ecx +
pop edi  +
mov [esi+eax*2] cx +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov eax 80004005h +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_1002712  +
cmp dword ptr [esi+8] 0 +
jnz loc_1002712  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_10026F4  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
mov [esi+4] eax +
jmp loc_1002712  +
push offset LibFileName  +
call ds:LoadLibraryW  +
test eax eax +
jz loc_1002712  +
push offset aRegdeletekeyw  +
push eax  +
call ds:GetProcAddress  +
mov [esi+8] eax +
mov eax [esi+4] +
test eax eax +
jz loc_1002726  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_100273C  +
mov eax [esi+8] +
test eax eax +
jz loc_1002736  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_100273C  +
call ds:GetLastError  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_100275D  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_100279F  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_10027AF  +
mov ecx esi +
call sub_1002746  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10027EB  +
mov ecx esi +
call sub_1002746  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jnz loc_1002830  +
push 80004005h  +
call loc_10020C3  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpData] +
push edi  +
mov ebx ecx +
test esi esi +
jnz loc_1002876  +
push 80004005h  +
call loc_10020C3  +
xor edi edi +
push esi  +
call ds:lstrlenW  +
inc eax  +
lea ecx [eax+eax] +
add esi ecx +
add edi ecx +
cmp eax 1 +
jnz loc_1002878  +
push edi  +
push [ebp+lpData]  +
push 7  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ebx]  +
call ds:RegSetValueExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
neg eax  +
sbb al al +
inc al  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_10028E8  +
push eax  +
call ds:CharNextW  +
push 27h  +
pop ecx  +
cmp cx [eax] +
jz loc_10028E8  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 64h +
push esi  +
mov esi ecx +
jge loc_1002905  +
mov eax 3E8h +
and dword ptr [esi] 0 +
push 2  +
push eax  +
mov [esi+4] eax +
call sub_100244B  +
mov [esi+8] eax +
test eax eax +
jz loc_100291F  +
xor ecx ecx +
mov [eax] cx +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov eax [esi] +
lea ecx [eax+ebx+1] +
cmp ecx eax +
push edi  +
jle loc_10029B0  +
cmp ecx ebx +
jle loc_10029B0  +
mov edi [esi+4] +
cmp ecx edi +
jl loc_1002970  +
cmp edi 3FFFFFFFh +
jg loc_10029B0  +
add edi edi +
cmp ecx edi +
jge loc_100294D  +
push 2  +
push edi  +
push dword ptr [esi+8]  +
call sub_100247E  +
test eax eax +
jz loc_10029B0  +
mov [esi+8] eax +
mov [esi+4] edi +
mov eax [esi] +
test eax eax +
jl loc_10029B0  +
mov edx [esi+4] +
cmp eax edx +
jge loc_10029B0  +
mov ecx edx +
sub ecx eax +
cmp ecx edx +
jg loc_10029B0  +
lea edx [ebx+ebx] +
push edx  +
push [ebp+arg_0]  +
add ecx ecx +
push ecx  +
mov ecx [esi+8] +
lea eax [ecx+eax*2] +
push eax  +
call sub_100255A  +
add [esi] ebx +
mov eax [esi] +
mov ecx [esi+8] +
xor edx edx +
mov [ecx+eax*2] dx +
xor eax eax +
add esp 10h +
inc eax  +
jmp loc_10029B2  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_100C0B4 1 +
jnz loc_1002A21  +
or dword_100C0B4 1 +
push 8  +
pop eax  +
mov word_100C098 ax +
mov eax 4008h +
push 13h  +
mov word_100C0A0 ax +
pop eax  +
push 11h  +
mov word_100C0A8 ax +
pop eax  +
mov lpString2 offset aS +
mov dword_100C09C offset aM +
mov dword_100C0A4 offset aD +
mov dword_100C0AC offset aB +
mov word_100C0B0 ax +
push esi  +
xor esi esi +
push lpString2[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1002A45  +
inc esi  +
cmp esi 4 +
jb loc_1002A24  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov ax word_100C098[esi*8] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
xor eax eax +
inc eax  +
jmp loc_1002A40  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 30h +
jl loc_1002A91  +
cmp eax 39h +
jle loc_1002A8C  +
cmp eax 40h +
jle loc_1002A91  +
cmp eax 46h +
jle loc_1002A87  +
lea ecx [eax-61h] +
cmp ecx 5 +
ja loc_1002A91  +
add eax 0FFFFFFA9h +
jmp loc_1002A93  +
add eax 0FFFFFFC9h +
jmp loc_1002A93  +
add eax 0FFFFFFD0h +
jmp loc_1002A93  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_1001538[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1002AC5  +
inc esi  +
cmp esi 0Eh +
jb loc_1002AA4  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax ds:dword_100153C[esi*8] +
jmp loc_1002AC0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
test eax eax +
jnz loc_1002AF1  +
jmp loc_1002AFF  +
cmp cx [ebp+arg_4] +
jz loc_1002AFB  +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1002AE4  +
jmp loc_1002AFD  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 9 +
jl loc_1002B2B  +
cmp eax 0Ah +
jle loc_1002B26  +
cmp eax 0Dh +
jz loc_1002B26  +
cmp eax 20h +
jnz loc_1002B2B  +
xor eax eax +
inc eax  +
jmp loc_1002B2D  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1002B49  +
push dword ptr [esi]  +
call ds:CharNextW  +
mov [esi] eax +
mov ecx esi +
mov eax [esi] +
movzx eax word ptr [eax] +
push eax  +
call sub_1002B09  +
test eax eax +
jnz loc_1002B3D  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_1002B36  +
mov eax [esi] +
movzx ecx word ptr [eax] +
xor edx edx +
cmp dx cx +
jnz loc_1002B83  +
mov eax 80020009h +
jmp loc_1002C63  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push 27h  +
pop edx  +
mov [ebp+var_4] edi +
cmp dx cx +
jnz loc_1002C11  +
mov ebx ds:CharNextW +
push eax  +
call ebx  +
mov [esi] eax +
jmp loc_1002BF4  +
mov ecx esi +
call sub_10028CB  +
test eax eax +
jnz loc_1002BFB  +
mov eax [esi] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1002BBA  +
push eax  +
call ebx  +
mov [esi] eax +
mov eax [esi] +
push eax  +
mov [ebp+arg_0] eax +
call ebx  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax [ebp+arg_0] +
add edx 2000h +
sar eax 1 +
lea ecx [edi+eax*2+2] +
cmp ecx edx +
jnb loc_1002C68  +
test eax eax +
jle loc_1002BF2  +
mov ecx [ebp+arg_0] +
mov dx [ecx] +
mov [edi] dx +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
dec eax  +
jnz loc_1002BE5  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1002BA0  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_1002C68  +
xor eax eax +
mov [edi] ax +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
jmp loc_1002C5F  +
mov ebx [esi] +
movzx eax word ptr [ebx] +
push eax  +
mov ecx esi +
call sub_1002B09  +
test eax eax +
jnz loc_1002C5A  +
push ebx  +
call ds:CharNextW  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax ebx +
sar eax 1 +
lea ecx [edi+eax*2+2] +
add edx 2000h +
cmp ecx edx +
jnb loc_1002C68  +
test eax eax +
jle loc_1002C51  +
mov cx [ebx] +
mov [edi] cx +
inc edi  +
inc edi  +
inc ebx  +
inc ebx  +
dec eax  +
jnz loc_1002C44  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1002C11  +
xor eax eax +
mov [edi] ax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov eax 80020009h +
jmp loc_1002C61  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset off_100140C +
push dword ptr [esi]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1002CA1  +
add esi 4 +
cmp esi offset dword_100143C +
jl loc_1002C7F  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1002C9C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+cSubKeys] +
push ecx  +
push eax  +
push eax  +
push eax  +
push [ebp+hKey]  +
mov [ebp+cSubKeys] eax +
call ds:RegQueryInfoKeyW  +
test eax eax +
jz loc_1002CD4  +
xor eax eax +
jmp locret_1002CDD  +
xor eax eax +
cmp eax [ebp+cSubKeys] +
sbb eax eax +
neg eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call __alloca_probe  +
mov eax dword_100C000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 3Dh +
push edi  +
mov edi ecx +
jnz loc_1002D3B  +
push esi  +
call sub_1002B5F  +
test eax eax +
jl loc_1002D3D  +
mov ecx edi +
call sub_1002B36  +
lea eax [ebp+var_2004] +
push eax  +
mov ecx edi +
call sub_1002B5F  +
test eax eax +
jl loc_1002D3D  +
push esi  +
mov ecx edi +
call sub_1002B5F  +
test eax eax +
jl loc_1002D3D  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1006863  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1002D65  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_10024CC  +
cmp dword ptr [esi] 0 +
jnz loc_1002D59  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi ds:__imp_free +
test eax eax +
jz loc_1002D8A  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_1002D99  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
and dword ptr [esi+8] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1002DBF  +
cmp eax [ecx+8] +
jge loc_1002DBF  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1002DF1  +
cmp eax [ecx+8] +
jge loc_1002DF1  +
mov ecx [ecx+4] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_1002E31  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
mov eax [esi] +
push dword ptr [eax+edi*4]  +
call sub_10028AB  +
test al al +
jnz loc_1002E3A  +
inc edi  +
cmp edi [esi+8] +
jl loc_1002E18  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax edi +
jmp loc_1002E34  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10024B4  +
test eax eax +
jnz loc_1002E6E  +
push 8007000Eh  +
call loc_10020C3  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_1002420  +
test eax eax +
jge loc_1002E98  +
push eax  +
call loc_10020C3  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_100C000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax ecx +
mov ecx [ebp+lpSubKey] +
push 2001Fh  +
push ecx  +
push dword ptr [eax]  +
xor esi esi +
mov [ebp+var_21C] ecx +
lea ecx [ebp+var_214] +
mov [ebp+var_218] eax +
mov [ebp+var_214] esi +
mov [ebp+var_210] esi +
mov [ebp+var_20C] esi +
call sub_10027B9  +
mov edi eax +
cmp edi esi +
jz loc_1002F16  +
lea ecx [ebp+var_214] +
call sub_1002746  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1006863  +
leave   +
retn 4  +
mov edi ds:RegEnumKeyExW +
jmp loc_1002F34  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_214] +
call sub_1002EA4  +
cmp eax esi +
jnz loc_1002F7F  +
lea eax [ebp+var_224] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_208] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+var_214]  +
mov [ebp+var_208] 100h +
call edi  +
test eax eax +
jz loc_1002F1E  +
lea ecx [ebp+var_214] +
call sub_1002746  +
push [ebp+var_21C]  +
mov ecx [ebp+var_218] +
call sub_10026C0  +
lea ecx [ebp+var_214] +
mov esi eax +
call sub_1002746  +
mov eax esi +
jmp loc_1002F06  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_1002FCB  +
push edi  +
mov ecx esi +
call loc_1002DA5  +
push dword ptr [eax]  +
call sub_100216C  +
pop ecx  +
push edi  +
mov ecx esi +
call loc_1002DD6  +
push dword ptr [eax]  +
call sub_100216C  +
inc edi  +
cmp edi [esi+8] +
pop ecx  +
jl loc_1002FA5  +
mov ecx esi +
call sub_1002D71  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+lpString] 0 +
push esi  +
mov esi ecx +
jnz loc_1002FEF  +
xor eax eax +
jmp loc_1003013  +
push [ebp+lpString]  +
and [ebp+var_4] 0 +
call ds:lstrlenW  +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_100292B  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1002D52  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
add ecx 4 +
call sub_1002F98  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset dword_10016F0  +
push offset aAppid  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002E08  +
cmp eax 0FFFFFFFFh +
jnz loc_1003070  +
xor eax eax +
jmp loc_100307A  +
push eax  +
mov ecx esi +
call loc_1002DD6  +
mov eax [eax] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx] +
shl edx 2 +
add eax edx +
jz loc_100309E  +
push esi  +
mov esi [ebp+arg_4] +
mov esi [esi] +
mov [eax] esi +
pop esi  +
mov eax [ecx+4] +
add eax edx +
jz loc_10030AC  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 400h +
push esi  +
mov esi ecx +
jbe loc_10030D0  +
push [ebp+arg_0]  +
call sub_1002E50  +
jmp loc_10030D5  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 100h +
push esi  +
mov esi ecx +
jbe loc_10030FC  +
push [ebp+arg_0]  +
call sub_1002E50  +
jmp loc_1003101  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push esi  +
mov dword ptr [esi] offset off_1001700 +
call sub_100301D  +
add esi 4 +
mov ecx esi +
call sub_1002F98  +
mov ecx esi +
pop esi  +
jmp sub_1002D71  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jz loc_1003144  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
inc eax  +
retn 4  +
***
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100310D  +
test [ebp+arg_0] 1 +
jz loc_1003181  +
push esi  +
call sub_100216C  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
mov eax dword_100C000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov esi ecx +
mov [ebp+var_58] ebx +
test edi edi +
jz loc_10032CD  +
test ebx ebx +
jz loc_10032CD  +
and dword ptr [ebx] 0 +
push edi  +
call ds:lstrlenW  +
add eax eax +
push eax  +
lea ecx [ebp+var_54] +
call sub_10028F0  +
xor ecx ecx +
cmp [ebp+pv] ecx +
jnz loc_10031EA  +
push ecx  +
call ds:CoTaskMemFree  +
mov eax 8007000Eh +
jmp loc_10032D2  +
mov [esi] edi +
mov [ebp+var_48] ecx +
cmp [edi] cx +
jz loc_100329C  +
mov ebx ds:CharNextW +
mov eax [esi] +
cmp word ptr [eax] 25h +
jnz loc_1003278  +
push eax  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 25h +
jz loc_1003278  +
push 25h  +
push eax  +
call sub_1002AD3  +
mov edi eax +
test edi edi +
jz loc_10032B2  +
mov ecx [esi] +
sub eax ecx +
sar eax 1 +
cmp eax 1Fh +
jg loc_10032BB  +
push eax  +
push ecx  +
lea eax [ebp+var_44] +
push 20h  +
push eax  +
call sub_1002580  +
lea eax [ebp+var_44] +
add esp 10h +
mov [ebp+var_5C] eax +
mov eax [esi+4] +
lea ecx [ebp+var_5C] +
push ecx  +
lea ecx [eax+4] +
call sub_1003057  +
test eax eax +
jz loc_10032B2  +
push eax  +
lea ecx [ebp+var_54] +
call sub_1002FDC  +
test eax eax +
jz loc_10032C4  +
cmp [esi] edi +
jz loc_1003287  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp eax edi +
jnz loc_100326C  +
jmp loc_1003287  +
push 1  +
push eax  +
lea ecx [ebp+var_54] +
call sub_100292B  +
test eax eax +
jz loc_10032C4  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 0 +
jnz loc_10031FE  +
mov ebx [ebp+var_58] +
xor ecx ecx +
mov eax [ebp+pv] +
mov [ebp+pv] ecx +
mov [ebx] eax +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax [ebp+var_48] +
jmp loc_10032D2  +
mov [ebp+var_48] 80020009h +
jmp loc_10032A4  +
mov [ebp+var_48] 80004005h +
jmp loc_10032A4  +
mov [ebp+var_48] 8007000Eh +
jmp loc_10032A4  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006863  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ecx ecx +
cmp edi ecx +
jnz loc_1003308  +
push ecx  +
push ecx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebp+arg_4] +
cmp esi ecx +
jz loc_10032F9  +
mov eax [ebp+arg_8] +
cmp eax ecx +
jz loc_10032F9  +
mov [esi] eax +
call ds:GetCurrentThreadId  +
lea ebx [edi+4] +
push ebx  +
mov [esi+4] eax +
call ds:EnterCriticalSection  +
mov eax [edi+1Ch] +
mov [esi+8] eax +
push ebx  +
mov [edi+1Ch] esi +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1003358  +
xor eax eax +
jmp loc_10033A7  +
and [ebp+arg_0] 0 +
push ebx  +
push esi  +
lea ebx [edi+4] +
push ebx  +
call ds:EnterCriticalSection  +
mov esi [edi+1Ch] +
test esi esi +
jz loc_100339B  +
call ds:GetCurrentThreadId  +
xor ecx ecx +
cmp [esi+4] eax +
jz loc_1003387  +
mov ecx esi +
mov esi [esi+8] +
test esi esi +
jnz loc_1003377  +
jmp loc_100339B  +
mov eax [esi+8] +
test ecx ecx +
jnz loc_1003393  +
mov [edi+1Ch] eax +
jmp loc_1003396  +
mov [ecx+8] eax +
mov eax [esi] +
mov [ebp+arg_0] eax +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi off_100C010 +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_10033D6  +
xor eax eax +
jmp loc_1003404  +
mov [esi] eax +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_10033D2  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
mov [esi+4] eax +
push dword ptr [esi+8]  +
call sub_1003084  +
inc dword ptr [esi+8]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002E7A  +
push eax  +
mov ecx esi +
call sub_10030B5  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002E7A  +
push eax  +
mov ecx esi +
call sub_10030E1  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002E7A  +
push eax  +
mov ecx esi +
call sub_10030E1  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
xor eax eax +
mov [ebp+var_18] ecx +
cmp [ebp+lpString] eax +
jz loc_100355B  +
cmp [ebp+arg_4] eax +
jz loc_100355B  +
push ebx  +
push esi  +
mov esi ds:lstrlenW +
push edi  +
push [ebp+lpString]  +
mov [ebp+var_4] eax +
call esi  +
lea edi [eax+eax+2] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1002152  +
pop ecx  +
push [ebp+arg_4]  +
mov ebx eax +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
call esi  +
lea esi [eax+eax+2] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1002152  +
pop ecx  +
mov [ebp+var_8] eax +
mov [ebp+var_C] eax +
test ebx ebx +
jz loc_100352B  +
test eax eax +
jz loc_100352B  +
push edi  +
push [ebp+lpString]  +
push edi  +
push ebx  +
call sub_100255A  +
push esi  +
push [ebp+arg_4]  +
push esi  +
push [ebp+var_8]  +
call sub_100255A  +
mov ecx [ebp+var_18] +
add esp 20h +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call sub_10033B1  +
test eax eax +
jnz loc_1003534  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100353C  +
and [ebp+var_10] 0 +
and [ebp+var_C] 0 +
push [ebp+var_C]  +
call sub_100216C  +
push [ebp+var_10]  +
call sub_100216C  +
pop ecx  +
pop ecx  +
xor eax eax +
cmp [ebp+var_4] eax +
pop edi  +
pop esi  +
setnl al  +
pop ebx  +
jmp locret_100355D  +
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
cmp [ebp+lpString] eax +
jz loc_10035AC  +
cmp [ebp+arg_8] eax +
jz loc_10035AC  +
mov ecx [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
add ecx 4 +
push [ebp+lpString]  +
mov [ebp+var_4] eax +
call sub_100347B  +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
lea ecx [ebp+var_4] +
add esi 8007000Eh +
call sub_1002D52  +
mov eax esi +
pop esi  +
jmp locret_10035B1  +
mov eax 80070057h +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 211Ch +
call __alloca_probe  +
mov eax dword_100C000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_211C] eax +
lea eax [ebp+String1] +
xor edi edi +
push eax  +
mov [ebp+var_2118] ecx +
mov [ebp+var_2114] esi +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_210C] edi +
call sub_1002B5F  +
cmp eax edi +
jl loc_1003897  +
lea eax [ebp+var_210C] +
push eax  +
lea eax [ebp+String1] +
push eax  +
call sub_10029BE  +
test eax eax +
jnz loc_1003634  +
mov eax 80020009h +
jmp loc_1003897  +
mov ecx [ebp+var_2118] +
call sub_1002B36  +
mov ecx [ebp+var_2118] +
lea eax [ebp+String1] +
push eax  +
call sub_1002B5F  +
cmp eax edi +
jl loc_1003897  +
movzx eax word ptr [ebp+var_210C] +
sub eax 8 +
jz loc_1003861  +
sub eax 9 +
jz loc_100377A  +
dec eax  +
dec eax  +
jz loc_100373E  +
sub eax 3FF5h +
jnz loc_1003880  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrlenW  +
inc eax  +
inc eax  +
push eax  +
lea ecx [ebp+lpData] +
mov [ebp+lpData] edi +
call sub_1003433  +
mov esi [ebp+lpData] +
cmp esi edi +
jz loc_1003719  +
cmp [ebp+String1] 0 +
lea edi [ebp+String1] +
jz loc_10036F3  +
mov ebx ds:CharNextW +
push edi  +
call ebx  +
movzx ecx word ptr [edi] +
cmp cx 5Ch +
jnz loc_10036E6  +
cmp word ptr [eax] 30h +
jnz loc_10036E6  +
xor ecx ecx +
mov [esi] cx +
inc esi  +
push eax  +
inc esi  +
call ebx  +
mov edi eax +
jmp loc_10036ED  +
mov [esi] cx +
inc esi  +
inc esi  +
inc edi  +
inc edi  +
cmp word ptr [edi] 0 +
jnz loc_10036C6  +
mov ecx [ebp+var_2114] +
xor eax eax +
mov [esi] ax +
mov [esi+2] ax +
push [ebp+lpData]  +
push dword ptr [ebp+Data]  +
call sub_100285B  +
mov esi eax +
xor edi edi +
jmp loc_100371C  +
push 0Eh  +
pop esi  +
lea eax [ebp+var_2104] +
cmp [ebp+lpData] eax +
jz loc_1003874  +
lea ecx [ebp+lpData] +
call sub_1002E43  +
jmp loc_1003874  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
lea eax [ebp+String1] +
push eax  +
mov [ebp+var_2114] edi +
call ds:VarUI4FromStr  +
push dword ptr [ebp+Data]  +
mov ecx esi +
push ebx  +
call sub_10027F5  +
lea ecx [ebp+var_2114] +
mov esi eax +
call sub_1002D52  +
jmp loc_1003874  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrlenW  +
mov [ebp+var_210C] eax +
test al 1 +
jz loc_100379B  +
mov eax 80004005h +
jmp loc_1003897  +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
push ebx  +
lea ecx [ebp+lpData] +
mov [ebp+lpData] edi +
call sub_1003457  +
cmp [ebp+lpData] edi +
jnz loc_10037D3  +
lea eax [ebp+var_2104] +
test eax eax +
jz loc_1003791  +
lea ecx [ebp+lpData] +
call sub_1002E43  +
jmp loc_1003791  +
push ebx  +
push edi  +
push [ebp+lpData]  +
call memset  +
add esp 0Ch +
cmp [ebp+var_210C] edi +
jle loc_100382B  +
mov ecx [ebp+lpData] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
movzx eax [ebp+edi*2+String1] +
push eax  +
call sub_1002A5D  +
mov edx edi +
and edx 1 +
shl edx 2 +
push 4  +
pop ecx  +
sub ecx edx +
shl al cl +
or [esi] al +
inc edi  +
cmp edi [ebp+var_210C] +
jl loc_10037EB  +
mov esi [ebp+var_2114] +
xor edi edi +
mov esi [esi] +
push ebx  +
push [ebp+lpData]  +
push 3  +
push edi  +
push dword ptr [ebp+Data]  +
push esi  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp+var_2104] +
cmp [ebp+lpData] eax +
jz loc_1003874  +
lea ecx [ebp+lpData] +
call sub_1002E43  +
jmp loc_1003874  +
push 1  +
lea eax [ebp+String1] +
push eax  +
push ebx  +
mov ecx esi +
call sub_1002818  +
mov esi eax +
cmp esi edi +
jz loc_1003880  +
push esi  +
call sub_10025C0  +
jmp loc_1003897  +
push [ebp+var_211C]  +
mov ecx [ebp+var_2118] +
call sub_1002B5F  +
cmp eax edi +
jl loc_1003897  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006863  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 225Ch +
call __alloca_probe  +
mov eax dword_100C000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_2214] eax +
mov eax [ebp+arg_C] +
push edi  +
mov [ebp+var_2210] ecx +
mov [ebp+var_2220] ebx +
mov [ebp+var_221C] ebx +
mov [ebp+var_2218] ebx +
mov [ebp+var_2258] eax +
call sub_1002B5F  +
mov esi eax +
cmp esi ebx +
jmp loc_1003E07  +
mov esi ds:lstrcmpiW +
push offset String2  +
push edi  +
mov [ebp+var_2224] 1 +
call esi  +
mov ebx eax +
neg ebx  +
push offset aForceremove  +
sbb ebx ebx +
push edi  +
inc ebx  +
call esi  +
test eax eax +
jz loc_100393A  +
test ebx ebx +
jz loc_10039F7  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002B5F  +
mov esi eax +
test esi esi +
jl loc_1003E71  +
cmp [ebp+arg_8] 0 +
jz loc_10039F7  +
xor esi esi +
push 5Ch  +
push edi  +
mov [ebp+var_2230] esi +
mov [ebp+var_222C] esi +
mov [ebp+var_2228] esi +
call sub_1002AD3  +
test eax eax +
jnz loc_1003E15  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002C74  +
test eax eax +
jz loc_10039AC  +
mov eax [ebp+var_2214] +
push edi  +
lea ecx [ebp+var_2230] +
mov [ebp+var_2230] eax +
call sub_1002EA4  +
mov [ebp+var_2230] esi +
cmp ebx esi +
jz loc_10039EC  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002B5F  +
mov esi eax +
test esi esi +
jl loc_1003E27  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002CE6  +
lea ecx [ebp+var_2230] +
mov esi eax +
call sub_1002746  +
test esi esi +
jl loc_1003E71  +
jmp loc_1003DC2  +
lea ecx [ebp+var_2230] +
call sub_1002746  +
push offset aNoremove  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1003A23  +
mov ecx [ebp+var_2210] +
and [ebp+var_2224] eax +
push edi  +
call sub_1002B5F  +
mov esi eax +
test esi esi +
jl loc_1003E71  +
push offset aVal  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1003B40  +
mov ecx [ebp+var_2210] +
lea eax [ebp+ValueName] +
push eax  +
call sub_1002B5F  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
jl loc_1003E71  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002B5F  +
mov esi eax +
cmp esi ebx +
jl loc_1003E71  +
cmp word ptr [edi] 3Dh +
jnz loc_1003E20  +
cmp [ebp+arg_8] ebx +
jz loc_1003AC6  +
mov eax [ebp+var_2214] +
mov ecx [ebp+var_2210] +
mov [ebp+var_2248] eax +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
lea eax [ebp+var_2248] +
push eax  +
mov [ebp+var_2244] ebx +
mov [ebp+var_2240] ebx +
call sub_10035BA  +
lea ecx [ebp+var_2248] +
mov esi eax +
mov [ebp+var_2248] ebx +
call sub_1002746  +
cmp esi ebx +
jmp loc_10039E1  +
cmp [ebp+arg_C] ebx +
jnz loc_1003B2F  +
cmp [ebp+var_2224] ebx +
jz loc_1003B2F  +
push 20006h  +
push ebx  +
push [ebp+var_2214]  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] ebx +
mov [ebp+var_2238] ebx +
mov [ebp+var_2234] ebx +
call sub_10027B9  +
cmp eax ebx +
jnz loc_1003E2F  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax ebx +
jz loc_1003B24  +
cmp eax 2 +
jnz loc_1003E2F  +
lea ecx [ebp+hKey] +
call sub_1002746  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002CE6  +
jmp loc_10038FE  +
push 5Ch  +
push edi  +
call sub_1002AD3  +
test eax eax +
jnz loc_1003E20  +
cmp [ebp+arg_8] eax +
jz loc_1003BEF  +
mov esi 2001Fh +
push esi  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_10027B9  +
test eax eax +
jz loc_1003BB3  +
push 20019h  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_10027B9  +
test eax eax +
jz loc_1003BB3  +
xor ebx ebx +
push ebx  +
push ebx  +
push esi  +
push ebx  +
push ebx  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_1002764  +
mov esi eax +
cmp esi ebx +
jnz loc_1003E3D  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002B5F  +
mov esi eax +
test esi esi +
jl loc_1003E71  +
cmp word ptr [edi] 3Dh +
jnz loc_1003DC2  +
mov ecx [ebp+var_2210] +
push edi  +
push 0  +
lea eax [ebp+var_2220] +
push eax  +
call sub_10035BA  +
mov esi eax +
jmp loc_10039DF  +
cmp [ebp+arg_C] 0 +
jnz loc_1003C10  +
push 20019h  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_10027B9  +
mov ebx eax +
jmp loc_1003C13  +
push 2  +
pop ebx  +
test ebx ebx +
jz loc_1003C1E  +
mov [ebp+arg_C] 1 +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+SubKey] +
push 104h  +
push eax  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_1002519  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002B5F  +
mov esi eax +
test esi esi +
jl loc_1003E71  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002CE6  +
mov esi eax +
test esi esi +
jl loc_1003E71  +
cmp word ptr [edi] 7Bh +
jnz loc_1003CB6  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_1003CB6  +
push [ebp+arg_C]  +
mov ecx [ebp+var_2210] +
push 0  +
push [ebp+var_2220]  +
push edi  +
call sub_10038AD  +
mov esi eax +
test esi esi +
jge loc_1003CA0  +
cmp [ebp+arg_C] 0 +
jz loc_1003E71  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002B5F  +
mov esi eax +
test esi esi +
jl loc_1003E71  +
mov eax [ebp+var_2258] +
mov [ebp+arg_C] eax +
cmp ebx 2 +
jz loc_1003E09  +
test ebx ebx +
jz loc_1003CE1  +
test eax eax +
jnz loc_1003E09  +
push ebx  +
call sub_10025C0  +
mov esi eax +
jmp loc_1003E71  +
test eax eax +
jz loc_1003D38  +
push [ebp+var_2220]  +
mov ecx [ebp+var_2210] +
call sub_1002CAA  +
test eax eax +
jz loc_1003D38  +
mov ecx [ebp+var_2210] +
lea eax [ebp+SubKey] +
push eax  +
call sub_1002C74  +
test eax eax +
jz loc_1003E09  +
cmp [ebp+var_2224] 0 +
jz loc_1003E09  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2220] +
call sub_1002EA4  +
jmp loc_1003E09  +
push [ebp+var_2220]  +
mov ecx [ebp+var_2210] +
call sub_1002CAA  +
lea ecx [ebp+var_2220] +
mov [ebp+var_225C] eax +
call sub_1002746  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_1003E50  +
cmp [ebp+var_2224] eax +
jz loc_1003E09  +
cmp [ebp+var_225C] eax +
jnz loc_1003E09  +
mov [ebp+var_2250] eax +
mov [ebp+var_224C] eax +
mov eax [ebp+var_2214] +
mov [ebp+var_2254] eax +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2254] +
call sub_10026C0  +
and [ebp+var_2254] 0 +
test eax eax +
jnz loc_1003E5E  +
lea ecx [ebp+var_2254] +
call sub_1002746  +
cmp [ebp+arg_8] 0 +
jz loc_1003E09  +
cmp word ptr [edi] 7Bh +
jnz loc_1003E09  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_1003E09  +
mov ecx [ebp+var_2210] +
push 0  +
push [ebp+arg_8]  +
push [ebp+var_2220]  +
push edi  +
call sub_10038AD  +
mov esi eax +
test esi esi +
jl loc_1003E71  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002B5F  +
mov esi eax +
test esi esi +
jl loc_1003E71  +
cmp word ptr [edi] 7Dh +
jnz loc_1003907  +
jmp loc_1003E71  +
lea ecx [ebp+var_2230] +
call sub_1002746  +
mov esi 80020009h +
jmp loc_1003E71  +
lea ecx [ebp+var_2230] +
jmp loc_1003E6C  +
push eax  +
call sub_10025C0  +
lea ecx [ebp+hKey] +
jmp loc_1003E6A  +
lea ecx [ebp+var_2220] +
call sub_1002746  +
push esi  +
call sub_10025C0  +
jmp loc_1003E7E  +
lea ecx [ebp+var_2220] +
call sub_1002746  +
push ebx  +
jmp loc_1003E49  +
push eax  +
call sub_10025C0  +
lea ecx [ebp+var_2254] +
mov esi eax +
call sub_1002746  +
lea ecx [ebp+var_2220] +
call sub_1002746  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006863  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1003EB7  +
push dword ptr [esi+3Ch]  +
mov byte ptr [esi+40h] 1 +
call ds:SetEvent  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100146C +
call sub_10023E0  +
test [ebp+arg_0] 1 +
jz loc_1003EE1  +
push esi  +
call sub_100216C  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset unk_100C0F4  +
call sub_1003347  +
mov esi eax +
test esi esi +
jz loc_1003F38  +
mov eax [esi] +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov ecx esi +
mov [esi+4] ebx +
call dword ptr [eax+8]  +
push esi  +
lea edi [esi+14h] +
push eax  +
mov ecx edi +
call sub_100220C  +
mov edi [edi] +
push edi  +
push 4  +
push ebx  +
call ds:SetWindowLongW  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ebx  +
call edi  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 200Ch +
call __alloca_probe  +
mov eax dword_100C000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpString] +
and [ebp+pv] 0 +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+pv] +
push ecx  +
push eax  +
mov ecx esi +
call sub_100318D  +
mov edi eax +
test edi edi +
jl loc_1004039  +
mov eax [ebp+pv] +
xor ecx ecx +
mov [esi] eax +
cmp cx [eax] +
jz loc_100402B  +
push ebx  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_1002B5F  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jl loc_100402A  +
lea eax [ebp+String1] +
push eax  +
call sub_1002A9C  +
mov [ebp+var_200C] eax +
cmp eax ebx +
jz loc_1004073  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_1002B5F  +
mov edi eax +
cmp edi ebx +
jl loc_100402A  +
push 7Bh  +
pop eax  +
cmp ax [ebp+String1] +
jnz loc_1004073  +
lea eax [ebp+String1] +
mov ecx esi +
cmp [ebp+arg_4] ebx +
jz loc_1004049  +
mov ebx [esi] +
push 0  +
push [ebp+arg_4]  +
push [ebp+var_200C]  +
push eax  +
call sub_10038AD  +
mov edi eax +
test edi edi +
jge loc_100405D  +
push 0  +
push 0  +
push [ebp+var_200C]  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
mov [esi] ebx +
call sub_10038AD  +
pop ebx  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1006863  +
leave   +
retn 8  +
push ebx  +
push ebx  +
push [ebp+var_200C]  +
push eax  +
call sub_10038AD  +
mov edi eax +
cmp edi ebx +
jl loc_100402A  +
mov ecx esi +
call sub_1002B36  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1003F96  +
jmp loc_100402A  +
mov edi 80020009h +
jmp loc_100402A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
push 0  +
lea ecx [esi+14h] +
call sub_100220C  +
test eax eax +
jnz loc_10040A4  +
push 0Eh  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
jmp loc_10040CC  +
push esi  +
add esi 8 +
push esi  +
push offset unk_100C0F4  +
call sub_10032E8  +
push [ebp+dwInitParam]  +
push offset DialogFunc  +
push [ebp+hWndParent]  +
push 71h  +
push hInstance  +
call ds:DialogBoxParamW  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100581E  +
mov dword ptr [esi] offset off_1001754 +
mov dword ptr [esi+20h] offset off_1001740 +
mov ecx dword_100C038 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_1004131  +
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_1004131  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_1004131  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_1004131  +
xor eax eax +
inc eax  +
jmp loc_1004133  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_1004166  +
cmp dword ptr [eax+4] 0 +
jnz loc_1004166  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_1004166  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_1004166  +
xor eax eax +
inc eax  +
jmp loc_1004168  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_1004206  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1004206  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jnz loc_1004198  +
mov eax 80004003h +
jmp loc_100420B  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_100413C  +
test eax eax +
jz loc_10041F8  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_100420B  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_10041D6  +
push [ebp+arg_8]  +
push eax  +
call sub_1004103  +
test eax eax +
jz loc_10041F5  +
cmp edi 1 +
jz loc_10041A7  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_100420B  +
cmp [ebp+arg_4] 0 +
jnz loc_10041F5  +
test eax eax +
jl loc_100420B  +
add esi 0Ch +
mov edi [esi+8] +
test edi edi +
jnz loc_10041B9  +
mov eax 80004002h +
jmp loc_100420B  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+1Ch] edi +
jnz loc_10042C6  +
mov esi [ebp+0Ch] +
mov eax 110h +
cmp esi eax +
jnz loc_1004259  +
lea edx [ebp+1Ch] +
push edx  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push eax  +
mov [ebp+1Ch] esi +
call sub_1005521  +
mov ecx [ebp+18h] +
mov [ecx] eax +
cmp [ebp+1Ch] edi +
jz loc_10042C6  +
mov eax esi +
jmp loc_10042C8  +
push 2  +
pop edx  +
cmp esi edx +
jnz loc_1004278  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push edx  +
mov [ebp+1Ch] esi +
call sub_1005351  +
jmp loc_100424B  +
***
mov eax 113h +
cmp esi eax +
jnz loc_1004299  +
lea edx [ebp+1Ch] +
push edx  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push eax  +
mov [ebp+1Ch] esi +
call sub_1005C2D  +
jmp loc_100424B  +
***
cmp esi 111h +
jnz loc_10042C6  +
mov eax [ebp+10h] +
mov esi edx +
cmp si ax +
jnz loc_10042C6  +
push ebx  +
lea ebx [ebp+1Ch] +
push ebx  +
push dword ptr [ebp+14h]  +
xor esi esi +
push edx  +
shr eax 10h +
inc esi  +
push eax  +
mov [ebp+1Ch] esi +
call sub_100537C  +
pop ebx  +
jmp loc_100424B  +
***
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_10] +
mov [eax+20h] ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov [eax+0Ch] ecx +
xor ecx ecx +
mov dword ptr [eax+1Ch] 24h +
mov [eax+10h] ecx +
mov [eax+18h] ecx +
mov [eax+14h] ecx +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+4]  +
mov eax [eax+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
dec dword ptr [eax+4]  +
push esi  +
mov esi [eax+4] +
jnz loc_1004348  +
lea ecx [eax-20h] +
test ecx ecx +
jz loc_1004348  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
mov esi [ebp+8] +
push edi  +
push 1  +
push dword ptr [ebp+14h]  +
lea ecx [ebp-24h] +
push dword ptr [ebp+10h]  +
push ebx  +
push dword ptr [esi+4]  +
call sub_10042D3  +
mov edi [esi+18h] +
push 0  +
lea ecx [ebp+8] +
push ecx  +
push dword ptr [ebp+14h]  +
lea eax [ebp-24h] +
push dword ptr [ebp+10h]  +
mov [esi+18h] eax +
mov eax [esi] +
push ebx  +
push dword ptr [esi+4]  +
mov ecx esi +
call dword ptr [eax]  +
mov [esi+18h] edi +
xor edi edi +
mov [ebp+14h] eax +
cmp eax edi +
jz loc_10043EF  +
cmp ebx 2Eh +
jb loc_10043E0  +
cmp ebx 2Fh +
jbe loc_10043D8  +
cmp ebx 37h +
jz loc_10043D8  +
cmp ebx 39h +
jz loc_10043D8  +
cmp ebx 110h +
jz loc_10043D8  +
cmp ebx 131h +
jbe loc_10043E0  +
cmp ebx 138h +
ja loc_10043E0  +
mov eax [ebp+8] +
mov [ebp+14h] eax +
jmp loc_10043FB  +
push dword ptr [ebp+8]  +
push edi  +
push dword ptr [esi+4]  +
call ds:SetWindowLongW  +
jmp loc_10043FB  +
cmp ebx 82h +
jnz loc_10043FB  +
or dword ptr [esi+1Ch] 1 +
mov eax [esi+1Ch] +
test al 1 +
jz loc_100441B  +
cmp [esi+18h] edi +
jnz loc_100441B  +
mov ecx [esi+4] +
and eax 0FFFFFFFEh +
mov [esi+1Ch] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
mov [esi+4] edi +
call dword ptr [eax+0Ch]  +
mov eax [ebp+14h] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1001764  +
push ecx  +
call sub_1004171  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFE0h +
call sub_100442A  +
pop ebp  +
retn 0Ch  +
***
mov eax offset loc_100435C +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 418h +
mov eax dword_100C000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpLibFileName] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
push 2  +
push edi  +
push eax  +
mov [ebp+var_410] edi +
mov [ebp+var_414] ecx +
mov [ebp+var_418] edi +
mov [ebp+lpString] edi +
call ds:LoadLibraryExW  +
mov [ebp+hLibModule] eax +
cmp eax edi +
jnz loc_10044CE  +
call sub_10025A6  +
mov esi eax +
jmp loc_10045AF  +
push ebx  +
push esi  +
push eax  +
call ds:FindResourceW  +
mov esi eax +
cmp esi edi +
jnz loc_10044E7  +
call sub_10025A6  +
jmp loc_10045A1  +
push esi  +
push [ebp+hLibModule]  +
call ds:LoadResource  +
mov ebx eax +
cmp ebx edi +
jz loc_10044DD  +
push esi  +
push [ebp+hLibModule]  +
call ds:SizeofResource  +
mov esi eax +
lea eax [esi+1] +
cmp eax esi +
jnb loc_100454C  +
lea eax [ebp+var_404] +
cmp [ebp+lpString] eax +
jz loc_1004529  +
lea ecx [ebp+lpString] +
call sub_1002E43  +
mov esi 8007000Eh +
lea ecx [ebp+var_410] +
call sub_1002D52  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006863  +
leave   +
retn 10h  +
push eax  +
lea ecx [ebp+lpString] +
call sub_100340F  +
cmp [ebp+lpString] edi +
jnz loc_1004567  +
mov esi 8007000Eh +
jmp loc_10045A3  +
push esi  +
push [ebp+lpString]  +
push esi  +
push ebx  +
push edi  +
push 3  +
call ds:MultiByteToWideChar  +
cmp eax edi +
jz loc_10044DD  +
mov edx [ebp+lpString] +
push [ebp+arg_C]  +
xor ecx ecx +
mov [edx+eax*2] cx +
push [ebp+lpString]  +
lea ecx [ebp+var_418] +
call sub_1003F42  +
mov esi eax +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
lea eax [ebp+var_404] +
cmp [ebp+lpString] eax +
jz loc_100452E  +
lea ecx [ebp+lpString] +
call sub_1002E43  +
jmp loc_100452E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
movzx eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
push 1  +
push [ebp+arg_C]  +
push eax  +
push [ebp+lpLibFileName]  +
call sub_1004473  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1002D52  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
mov [ebp+var_4] eax +
cmp [ebp+arg_8] eax +
jz loc_1004644  +
cmp [ebp+arg_C] eax +
jz loc_1004644  +
mov ecx [ebp+arg_0] +
push esi  +
push 1  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+lpLibFileName]  +
call sub_1004473  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1002D52  +
mov eax esi +
pop esi  +
jmp locret_1004651  +
lea ecx [ebp+var_4] +
call sub_1002D52  +
mov eax 80070057h +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
movzx eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
push 0  +
push [ebp+arg_C]  +
push eax  +
push [ebp+lpLibFileName]  +
call sub_1004473  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1002D52  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
mov [ebp+var_4] eax +
cmp [ebp+arg_8] eax +
jz loc_10046C7  +
cmp [ebp+arg_C] eax +
jz loc_10046C7  +
mov ecx [ebp+arg_0] +
push esi  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+lpLibFileName]  +
call sub_1004473  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1002D52  +
mov eax esi +
pop esi  +
jmp locret_10046D4  +
lea ecx [ebp+var_4] +
call sub_1002D52  +
mov eax 80070057h +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A50h +
mov eax dword_100C000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpString] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_A3C] eax +
mov [ebp+var_A50] offset off_1001700 +
mov [ebp+var_A4C] ebx +
mov [ebp+var_A48] ebx +
mov [ebp+var_A44] ebx +
cmp esi ebx +
jz loc_1004741  +
jmp loc_100473B  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp+var_A50] +
push eax  +
call sub_1003566  +
add esi 8 +
mov eax [esi] +
cmp eax ebx +
jnz loc_1004728  +
mov eax [edi] +
lea ecx [ebp+var_A50] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
cmp eax ebx +
jge loc_1004773  +
mov esi eax +
lea ecx [ebp+var_A50] +
call sub_100310D  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006863  +
leave   +
retn 10h  +
mov edi hModule +
mov esi 104h +
push esi  +
lea eax [ebp+LibFileName] +
push eax  +
push edi  +
mov [ebp+var_A38] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_10047AB  +
call sub_10025A6  +
mov esi eax +
lea ecx [ebp+var_A38] +
call sub_1002D52  +
jmp loc_1004755  +
cmp eax esi +
jnz loc_10047C1  +
lea ecx [ebp+var_A38] +
call sub_1002D52  +
mov esi 8007007Ah +
jmp loc_1004755  +
lea eax [ebp+LibFileName] +
push eax  +
push 208h  +
lea eax [ebp+var_A34] +
push eax  +
call sub_100265B  +
cmp edi ebx +
jz loc_10047F0  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_10047F0  +
lea eax [ebp+var_A34] +
jmp loc_1004855  +
push 22h  +
pop eax  +
mov word ptr [ebp+String] ax +
lea eax [ebp+var_A34] +
push eax  +
push 20Bh  +
lea eax [ebp+String+2] +
push eax  +
call sub_10024E4  +
test al al +
jnz loc_100482B  +
lea ecx [ebp+var_A38] +
call sub_1002D52  +
mov esi 80004005h +
jmp loc_1004755  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov word ptr [ebp+eax+String] cx +
xor ecx ecx +
mov word ptr [ebp+eax+String+2] cx +
lea eax [ebp+String] +
push eax  +
push offset String  +
lea eax [ebp+var_A50] +
push eax  +
call sub_1003566  +
mov esi eax +
cmp esi ebx +
jl loc_100479E  +
lea eax [ebp+var_A34] +
push eax  +
push offset aModule_raw  +
lea eax [ebp+var_A50] +
push eax  +
call sub_1003566  +
mov esi eax +
cmp esi ebx +
jl loc_100479E  +
push offset aRegistry  +
push [ebp+var_A3C]  +
lea eax [ebp+LibFileName] +
push eax  +
lea eax [ebp+var_A50] +
push eax  +
cmp [ebp+arg_8] ebx +
jz loc_10048BB  +
call sub_100460C  +
jmp loc_100479C  +
call sub_1004690  +
jmp loc_100479C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A4Ch +
mov eax dword_100C000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_A4C] offset off_1001700 +
mov [ebp+var_A48] ebx +
mov [ebp+var_A44] ebx +
mov [ebp+var_A40] ebx +
cmp esi ebx +
jz loc_1004925  +
jmp loc_100491F  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp+var_A4C] +
push eax  +
call sub_1003566  +
add esi 8 +
mov eax [esi] +
cmp eax ebx +
jnz loc_100490C  +
mov eax [edi] +
lea ecx [ebp+var_A4C] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
cmp eax ebx +
jge loc_1004957  +
mov esi eax +
lea ecx [ebp+var_A4C] +
call sub_100310D  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006863  +
leave   +
retn 10h  +
mov edi hModule +
mov esi 104h +
push esi  +
lea eax [ebp+LibFileName] +
push eax  +
push edi  +
mov [ebp+var_A38] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_100498F  +
call sub_10025A6  +
mov esi eax +
lea ecx [ebp+var_A38] +
call sub_1002D52  +
jmp loc_1004939  +
cmp eax esi +
jnz loc_10049A5  +
lea ecx [ebp+var_A38] +
call sub_1002D52  +
mov esi 8007007Ah +
jmp loc_1004939  +
lea eax [ebp+LibFileName] +
push eax  +
push 208h  +
lea eax [ebp+var_A34] +
push eax  +
call sub_100265B  +
cmp edi ebx +
jz loc_10049D4  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_10049D4  +
lea eax [ebp+var_A34] +
jmp loc_1004A39  +
push 22h  +
pop eax  +
mov word ptr [ebp+String] ax +
lea eax [ebp+var_A34] +
push eax  +
push 20Bh  +
lea eax [ebp+String+2] +
push eax  +
call sub_10024E4  +
test al al +
jnz loc_1004A0F  +
lea ecx [ebp+var_A38] +
call sub_1002D52  +
mov esi 80004005h +
jmp loc_1004939  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov word ptr [ebp+eax+String] cx +
xor ecx ecx +
mov word ptr [ebp+eax+String+2] cx +
lea eax [ebp+String] +
push eax  +
push offset String  +
lea eax [ebp+var_A4C] +
push eax  +
call sub_1003566  +
mov esi eax +
cmp esi ebx +
jl loc_1004982  +
lea eax [ebp+var_A34] +
push eax  +
push offset aModule_raw  +
lea eax [ebp+var_A4C] +
push eax  +
call sub_1003566  +
mov esi eax +
cmp esi ebx +
jl loc_1004982  +
push offset aRegistry  +
push dword ptr [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push eax  +
lea eax [ebp+var_A4C] +
push eax  +
cmp [ebp+arg_8] ebx +
jz loc_1004A9C  +
call sub_10045D6  +
jmp loc_1004980  +
call sub_100465A  +
jmp loc_1004980  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001754 +
mov dword ptr [esi+20h] offset off_1001740 +
mov dword ptr [esi+24h] 0C0000001h +
mov ecx dword_100C038 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov esi [esi+14h] +
test esi esi +
jz loc_1004ADC  +
push esi  +
call sub_10063D5  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004AAB  +
test byte ptr [ebp+8] 1 +
jz loc_1004AFD  +
push esi  +
call sub_100216C  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
cmp edi esi +
jnz loc_1004B20  +
mov eax 80004003h +
jmp loc_1004B4E  +
push ebx  +
push esi  +
push esi  +
push esi  +
push esi  +
push 40h  +
mov [edi] esi +
mov ebx 8007000Eh +
call MFHeapAlloc  +
cmp eax esi +
jz loc_1004B41  +
push esi  +
mov ecx eax +
call sub_10040D6  +
jmp loc_1004B43  +
xor eax eax +
cmp eax esi +
jz loc_1004B49  +
xor ebx ebx +
mov [edi] eax +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10046DD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10048CA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_100C000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
mov esi offset dword_10017E0 +
lea edi [ebp+pclsid] +
movs   +
movs   +
movs   +
xor ebx ebx +
mov [ebp+lpsz] eax +
mov [ebp+hLibModule] ebx +
movs   +
cmp dword_100C040 ebx +
jz loc_1004BB9  +
mov [ebp+var_18] 80070057h +
jmp loc_1004CB8  +
push ebx  +
call ds:CoInitialize  +
cmp eax ebx +
mov [ebp+var_18] eax +
jl loc_1004CB8  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call ds:DefWindowProcW  +
push 4  +
call sub_100224C  +
push 2  +
push ebx  +
push offset aMferror_dll  +
call ds:LoadLibraryExW  +
mov [ebp+hLibModule] eax +
cmp eax ebx +
jnz loc_1004C10  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1004C05  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
mov [ebp+var_18] eax +
jl loc_1004CB8  +
push [ebp+hLibModule]  +
push offset hInstance  +
call ds:InterlockedExchange  +
lea eax [ebp+pclsid] +
push eax  +
push [ebp+lpsz]  +
call ds:CLSIDFromString  +
cmp eax ebx +
mov [ebp+var_18] eax +
jl loc_1004CB8  +
push 4  +
pop ecx  +
mov edi offset dword_100143C +
lea esi [ebp+pclsid] +
xor eax eax +
cmps   +
jnz loc_1004C69  +
push 40h  +
push ecx  +
mov eax esp +
mov dword ptr [eax] 6Eh +
push ecx  +
mov eax esp +
mov dword ptr [eax] 6Fh +
call ds:GetActiveWindow  +
push eax  +
call sub_1002273  +
jmp loc_1004CB8  +
push offset dword_100C040  +
call sub_1004B09  +
cmp eax ebx +
mov [ebp+var_18] eax +
jl loc_1004CB8  +
mov eax dword_100C040 +
add eax 20h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov ecx dword_100C040 +
lea eax [ebp+pclsid] +
push eax  +
call sub_1004E71  +
push ebx  +
call ds:GetActiveWindow  +
mov ecx dword_100C040 +
push eax  +
call sub_100407F  +
mov eax dword_100C040 +
add eax 20h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
call ds:CoUninitialize  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_18] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006863  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100514F  +
add esp 10h +
push eax  +
call sub_1002519  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
push eax  +
call sub_1002519  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:LoadResource  +
test eax eax +
jz loc_1004D85  +
push esi  +
push eax  +
call ds:LockResource  +
mov esi eax +
test esi esi +
jz loc_1004D77  +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:SizeofResource  +
mov ecx [ebp+arg_8] +
add eax esi +
and ecx 0Fh +
jbe loc_1004D73  +
cmp esi eax +
jnb loc_1004D77  +
dec ecx  +
movzx edx word ptr [esi] +
lea esi [esi+edx*2+2] +
jnz loc_1004D65  +
cmp esi eax +
jb loc_1004D7B  +
xor eax eax +
jmp loc_1004D84  +
movzx eax word ptr [esi] +
neg eax  +
sbb eax eax +
and eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
shr eax 4 +
inc eax  +
movzx eax ax +
push 6  +
push eax  +
push [ebp+hModule]  +
call ds:FindResourceW  +
test eax eax +
jz loc_1004DB9  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_1004D2C  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [ebp+wLanguage]  +
shr eax 4 +
inc eax  +
movzx eax ax +
push eax  +
push 6  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
test eax eax +
jz loc_1004DF0  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_1004D2C  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi offset unk_100C0B8 +
push 0  +
mov ecx esi +
call sub_1005EC0  +
xor ebx ebx +
inc ebx  +
jmp loc_1004E2D  +
push dword ptr [ebp+wLanguage]  +
push [ebp+arg_0]  +
push edi  +
call sub_1004DC2  +
test eax eax +
jnz loc_1004E3A  +
push ebx  +
mov ecx esi +
call sub_1005EC0  +
inc ebx  +
mov edi eax +
test edi edi +
jnz loc_1004E14  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov eax edi +
jmp loc_1004E33  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_0] +
cmp eax edi +
jz loc_1004E5E  +
push eax  +
call ds:SysFreeString  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ecx+2Ch] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+18h] 0 +
call sub_1008DD1  +
mov eax [eax] +
push esi  +
push eax  +
call sub_1007860  +
test eax eax +
jz loc_1004EAF  +
mov dword ptr [esi+18h] 1 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+nResult]  +
push dword ptr [ecx+4]  +
call ds:EndDialog  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
movzx edx [ebp+arg_0] +
shl eax 10h +
or eax edx +
push eax  +
push 0  +
push 401h  +
push dword ptr [ecx]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 404h  +
push dword ptr [ecx]  +
call ds:SendMessageW  +
cwde   +
pop ebp  +
retn 4  +
***
lea eax [ecx+0Ch] +
or edx 0FFFFFFFFh +
xadd [eax] edx +
dec edx  +
test edx edx +
jg locret_1004F37  +
mov eax [ecx] +
mov edx [eax] +
push ecx  +
mov ecx eax +
call dword ptr [edx+4]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetWindowLongW +
mov esi ecx +
push 0FFFFFFF0h  +
push dword ptr [esi]  +
mov [ebp+var_8] esi +
call edi  +
mov ebx [ebp+arg_0] +
mov [ebp+var_4] eax +
test ebx ebx +
jnz loc_1004F80  +
test eax 40000000h +
jz loc_1004F74  +
push dword ptr [esi]  +
call ds:GetParent  +
jmp loc_1004F7E  +
push 4  +
push dword ptr [esi]  +
call ds:GetWindow  +
mov ebx eax +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi]  +
call ds:GetWindowRect  +
test [ebp+var_4] 40000000h +
jnz loc_1004FDB  +
test ebx ebx +
jz loc_1004FAE  +
push 0FFFFFFF0h  +
push ebx  +
call edi  +
test eax 10000000h +
jz loc_1004FAC  +
test eax 20000000h +
jz loc_1004FAE  +
xor ebx ebx +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 30h  +
call ds:SystemParametersInfoW  +
test ebx ebx +
jnz loc_1004FCE  +
lea esi [ebp+pvParam] +
lea edi [ebp+Points] +
movs   +
movs   +
movs   +
movs   +
jmp loc_1005007  +
lea eax [ebp+Points] +
push eax  +
push ebx  +
call ds:GetWindowRect  +
jmp loc_1005007  +
push dword ptr [esi]  +
call ds:GetParent  +
mov esi ds:GetClientRect +
mov edi eax +
lea eax [ebp+pvParam] +
push eax  +
push edi  +
call esi  +
lea eax [ebp+Points] +
push eax  +
push ebx  +
call esi  +
push 2  +
lea eax [ebp+Points] +
push eax  +
push edi  +
push ebx  +
call ds:MapWindowPoints  +
mov edx [ebp+var_20] +
mov eax [ebp+Points.x] +
mov ecx [ebp+Rect.right] +
sub ecx [ebp+Rect.left] +
add eax edx +
cdq   +
mov esi [ebp+Rect.bottom] +
sub eax edx +
sub esi [ebp+Rect.top] +
mov edi eax +
mov eax ecx +
cdq   +
sub eax edx +
mov edx [ebp+var_1C] +
sar eax 1 +
sar edi 1 +
sub edi eax +
mov eax [ebp+Points.y] +
add eax edx +
cdq   +
sub eax edx +
mov ebx eax +
mov eax esi +
cdq   +
sub eax edx +
sar ebx 1 +
sar eax 1 +
sub ebx eax +
cmp edi [ebp+pvParam] +
jge loc_100504D  +
mov edi [ebp+pvParam] +
jmp loc_100505B  +
mov eax [ebp+var_10] +
lea edx [edi+ecx] +
cmp edx eax +
jle loc_100505B  +
sub eax ecx +
mov edi eax +
cmp ebx [ebp+var_14] +
jge loc_1005065  +
mov ebx [ebp+var_14] +
jmp loc_1005073  +
mov eax [ebp+var_C] +
lea ecx [ebx+esi] +
cmp ecx eax +
jle loc_1005073  +
sub eax esi +
mov ebx eax +
mov eax [ebp+var_8] +
push 15h  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push ebx  +
push edi  +
push 0  +
push dword ptr [eax]  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax 0FFFFFFFFh +
jnz loc_10050B6  +
mov eax [ebp+arg_8] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10050A7  +
sub eax ecx +
sar eax 1 +
inc eax  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004CE0  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10050EE  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10050DE  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1005105  +
pop ebp  +
retn   +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1005108  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_100513F  +
mov edx [ecx] +
cmp eax [edx-8] +
jg loc_100513F  +
mov [edx-0Ch] eax +
mov ecx [ecx] +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
***
push 80070057h  +
call loc_10020C3  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
pop ebp  +
retn   +
***
push 8007000Eh  +
call loc_10020C3  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ecx] +
mov ebx [esi-0Ch] +
sub esi 10h +
mov [ebp+var_8] ecx +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
mov [ebp+var_4] ebx +
call dword ptr [eax+10h]  +
mov edx [eax] +
push 2  +
push [ebp+arg_0]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_10051BA  +
call loc_1005175  +
mov eax [ebp+arg_0] +
cmp ebx eax +
jge loc_10051C3  +
mov eax ebx +
inc eax  +
push eax  +
lea ecx [esi+10h] +
push ecx  +
push eax  +
lea ebx [edi+10h] +
push ebx  +
call sub_100514F  +
mov eax [ebp+var_4] +
add esp 10h +
mov ecx esi +
mov [edi+4] eax +
call sub_1004F1E  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp [eax+8] edx +
mov ecx [eax] +
jge loc_100521E  +
test edx edx +
jle loc_100521E  +
push edi  +
mov edi [ecx] +
push 2  +
push edx  +
push eax  +
call dword ptr [edi+8]  +
pop edi  +
test eax eax +
jnz loc_1005223  +
call loc_1005175  +
add eax 10h +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_1004DF9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001820 +
mov dword ptr [esi+4] offset off_1001810 +
mov dword ptr [esi+8] offset off_1001800 +
mov dword ptr [esi+0Ch] offset off_10017F0 +
push edi  +
xor edi edi +
mov [esi+10h] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
mov [esi+28h] edi +
lea ecx [esi+30h] +
mov [esi+2Ch] edi +
call sub_1004E8D  +
xor eax eax +
mov [esi+54h] edi +
mov [esi+58h] ax +
pop edi  +
mov byte ptr [esi+50h] 1 +
mov eax esi +
pop esi  +
retn   +
***
sub dword ptr [esp+4] 8 +
jmp loc_1008E20  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1008E20  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1008FA0  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1008FA0  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1008FA0  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1008F80  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1008F80  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1008E20  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1008F80  +
***
cmp Addend 1 +
jnz loc_1005368  +
and dword_100C08C 0 +
and dword_100C090 0 +
mov ecx offset dword_100C048 +
call sub_1003E94  +
xor eax eax +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push esi  +
push eax  +
mov esi ecx +
call sub_1004EB8  +
mov eax [esi+28h] +
test eax eax +
jz loc_100539F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+28h] 0 +
mov ecx offset dword_100C048 +
call sub_1003E94  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
cmp [esi+8] edi +
jnz loc_10053CD  +
mov edi 80070057h +
jmp loc_10053F1  +
push edi  +
push dword ptr [esi-1Ch]  +
call ds:EndDialog  +
mov eax [esi+8] +
cmp eax edi +
jz loc_10053E7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+8] edi +
mov ecx offset dword_100C048 +
call sub_1003E94  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
sub ecx 10h +
xor eax eax +
push edi  +
mov edi [ecx] +
cmp [ecx+4] eax +
jz loc_1005432  +
cmp [ecx+0Ch] eax +
jge loc_1005421  +
push eax  +
mov ecx esi +
call loc_100511D  +
jmp loc_1005432  +
call sub_1004F1E  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_1005453  +
push 80004005h  +
call loc_10020C3  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov edx [eax-0Ch] +
sub eax 10h +
push esi  +
mov esi [ebp+arg_0] +
cmp edx esi +
jle loc_1005480  +
mov esi edx +
cmp dword ptr [eax+0Ch] 1 +
jle loc_100548E  +
push esi  +
call sub_1005185  +
jmp loc_10054B2  +
mov eax [eax+8] +
cmp eax esi +
jge loc_10054B2  +
mov edx eax +
mov eax 400h +
cmp edx eax +
jle loc_10054A4  +
add edx eax +
jmp loc_10054A6  +
add edx edx +
cmp edx esi +
jge loc_10054AC  +
mov edx esi +
push edx  +
call sub_10051F4  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+10h]  +
lea edx [esi+0Ch] +
cmp dword ptr [edx] 0 +
jl loc_10054E4  +
cmp eax [esi] +
jnz loc_10054E4  +
xor eax eax +
mov edi esi +
inc eax  +
xadd [edx] eax +
jmp loc_1005516  +
mov edx [eax] +
push 2  +
push dword ptr [esi+4]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_10054FA  +
call loc_1005175  +
mov eax [esi+4] +
mov [edi+4] eax +
mov eax [esi+4] +
inc eax  +
push eax  +
add esi 10h +
push esi  +
push eax  +
lea eax [edi+10h] +
push eax  +
call sub_100514F  +
add esp 10h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push esi  +
push edi  +
push offset Addend  +
mov edi ecx +
call ds:InterlockedIncrement  +
lea esi [edi+4] +
push 0  +
mov ecx esi +
call sub_1004F3D  +
push 70h  +
push dword ptr [esi]  +
call ds:GetDlgItem  +
push 64h  +
push 0  +
lea ecx [ebp+var_4] +
mov [ebp+var_4] eax +
call sub_1004ED2  +
push 1  +
lea ecx [ebp+var_4] +
call sub_1004EFD  +
push 0  +
push 3E8h  +
push 64h  +
push dword ptr [esi]  +
call ds:SetTimer  +
mov [edi+3Ch] eax +
pop edi  +
pop esi  +
test eax eax +
jnz loc_1005593  +
call ds:GetLastError  +
push eax  +
call sub_10025C0  +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push ebx  +
push edi  +
push 70h  +
push dword ptr [eax-1Ch]  +
xor ebx ebx +
call ds:GetDlgItem  +
mov edi eax +
test edi edi +
jnz loc_10055C3  +
mov ebx 80070057h +
jmp loc_10055DF  +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jbe loc_10055DE  +
push 0  +
push 0  +
push 405h  +
push edi  +
call ds:SendMessageW  +
dec esi  +
jnz loc_10055CB  +
pop esi  +
pop edi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
push dword ptr [eax-0Ch]  +
push eax  +
call ds:SysAllocStringLen  +
test eax eax +
jnz locret_1005601  +
jmp loc_1005175  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+8] +
test edx edx +
jl loc_1005622  +
mov eax [ecx] +
cmp edx [eax-0Ch] +
jg loc_1005622  +
mov ax [eax+edx*2] +
pop ebp  +
retn 4  +
***
push 80070057h  +
call loc_10020C3  +
mov edi edi +
push esi  +
push offset dword_100C12C  +
mov esi ecx +
call sub_100543A  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ecx ecx +
sub eax 10h +
inc ecx  +
sub ecx [eax+0Ch] +
mov eax [eax+8] +
sub eax [ebp+arg_0] +
or ecx eax +
jge loc_1005671  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1005469  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100564A  +
push [ebp+arg_0]  +
mov ecx esi +
call loc_100511D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
mov ebx ecx +
jnz loc_10056B6  +
call sub_10053FE  +
jmp loc_100570B  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_10056C8  +
push 80070057h  +
call loc_10020C3  +
mov eax [ebx] +
push edi  +
push [ebp+arg_4]  +
mov edi [eax-0Ch] +
sub esi eax +
sar esi 1 +
call sub_100564A  +
cmp esi edi +
pop edi  +
push [ebp+arg_4]  +
ja loc_10056F1  +
lea ecx [eax+esi*2] +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call sub_100524A  +
jmp loc_10056FD  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push eax  +
call sub_100514F  +
add esp 10h +
push [ebp+arg_4]  +
mov ecx ebx +
call loc_100511D  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_4]  +
mov ebx ecx +
push [ebp+hModule]  +
call sub_1004D8E  +
mov esi eax +
test esi esi +
jz loc_1005759  +
push edi  +
movzx edi word ptr [esi] +
push edi  +
mov ecx ebx +
call sub_100564A  +
movzx ecx word ptr [esi] +
push ecx  +
add esi 2 +
push esi  +
push edi  +
push eax  +
call sub_1005094  +
add esp 10h +
push edi  +
mov ecx ebx +
call loc_100511D  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov edi ecx +
jnz loc_100577D  +
push 80070057h  +
call loc_10020C3  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:_vscwprintf  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi 0FFFFFFFFh +
jnz loc_1005799  +
push 8007000Eh  +
jmp loc_1005778  +
push esi  +
mov ecx edi +
call sub_100564A  +
push [ebp+arg_4]  +
lea ecx [esi+1] +
push [ebp+arg_0]  +
push ecx  +
push eax  +
call vswprintf_s  +
add esp 10h +
push esi  +
mov ecx edi +
call loc_100511D  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
lea ecx [eax-10h] +
sub esi 10h +
cmp ecx esi +
jz loc_1005811  +
cmp dword ptr [esi+0Ch] 0 +
jl loc_1005806  +
mov edx [ecx] +
cmp edx [esi] +
jnz loc_1005806  +
push ebx  +
push ecx  +
call sub_10054BC  +
pop ecx  +
mov ecx esi +
mov ebx eax +
call sub_1004F1E  +
add ebx 10h +
mov [edi] ebx +
pop ebx  +
jmp loc_1005811  +
push dword ptr [eax-0Ch]  +
mov ecx edi +
push eax  +
call sub_10056A1  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+14h] ecx +
push esi  +
push edi  +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+24h] ecx +
mov dword ptr [eax] offset off_1001850 +
mov dword ptr [eax+20h] offset off_100183C +
mov [eax+28h] ecx +
lea edi [eax+2Ch] +
mov esi offset dword_10017E0 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
mov [eax+3Ch] ecx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+14h] +
test eax eax +
jz loc_100586F  +
push eax  +
call sub_10063D5  +
test byte ptr [ebp+8] 1 +
jz loc_100587C  +
push esi  +
call sub_100216C  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov [ebp+var_18] esi +
call sub_10050CF  +
pop ecx  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_10059D8  +
push edi  +
push [ebp+arg_4]  +
call sub_10050CF  +
mov esi [esi] +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
mov eax [esi-0Ch] +
lea edi [esi+eax*2] +
pop ecx  +
cmp esi edi +
jnb loc_10059D4  +
push ebx  +
mov ebx ds:wcsstr +
jmp loc_10058DD  +
mov ecx [ebp+var_C] +
inc [ebp+var_4]  +
lea esi [eax+ecx*2] +
push [ebp+arg_0]  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10058D4  +
push esi  +
call sub_10050CF  +
lea esi [esi+eax*2+2] +
pop ecx  +
cmp esi edi +
jb loc_10058DD  +
cmp [ebp+var_4] 0 +
jle loc_10059D3  +
mov esi [ebp+var_8] +
sub esi [ebp+var_C] +
mov eax [ebp+var_18] +
imul esi [ebp+var_4] +
mov eax [eax] +
mov edi [eax-0Ch] +
add esi edi +
cmp esi edi +
mov [ebp+var_14] edi +
mov [ebp+var_20] esi +
mov eax esi +
jg loc_1005924  +
mov eax edi +
mov ecx [ebp+var_18] +
push eax  +
call sub_100564A  +
lea ecx [eax+edi*2] +
mov [ebp+var_1C] eax +
mov [ebp+var_24] ecx +
cmp eax ecx +
jmp loc_10059C1  +
push [ebp+arg_0]  +
push [ebp+var_10]  +
call ebx  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_10059B0  +
mov esi [ebp+var_14] +
mov edx [ebp+var_C] +
mov eax edi +
sub eax [ebp+var_1C] +
sar eax 1 +
sub esi eax +
mov eax [ebp+var_8] +
sub esi edx +
lea ecx [esi+esi] +
push ecx  +
lea edx [edi+edx*2] +
push edx  +
add eax eax +
add eax edi +
push ecx  +
push eax  +
mov [ebp+var_10] eax +
call sub_1004D06  +
mov eax [ebp+var_8] +
add eax eax +
push eax  +
push [ebp+arg_4]  +
push eax  +
push edi  +
call sub_100255A  +
mov ecx [ebp+var_8] +
mov eax [ebp+var_10] +
push [ebp+arg_0]  +
add esi ecx +
sub ecx [ebp+var_C] +
xor edx edx +
add [ebp+var_14] ecx +
push eax  +
mov [ebp+var_10] eax +
mov [edi+esi*2] dx +
call ebx  +
mov edi eax +
add esp 28h +
test edi edi +
jnz loc_100594D  +
mov esi [ebp+var_20] +
mov edi [ebp+var_10] +
push edi  +
call sub_10050CF  +
lea eax [edi+eax*2+2] +
cmp eax [ebp+var_24] +
pop ecx  +
mov [ebp+var_10] eax +
jb loc_100593D  +
mov ecx [ebp+var_18] +
push esi  +
call loc_100511D  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10050F7  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10056A1  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1005232  +
test eax eax +
jz loc_1005A27  +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_1005715  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
call sub_1005764  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push offset dword_100C12C  +
lea ecx [ebp+var_4] +
call sub_100543A  +
mov eax [esi+28h] +
xor edi edi +
mov ebx offset aWindowsMediaRe +
cmp eax edi +
jz loc_1005A7B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+28h] edi +
push edi  +
push edi  +
push edi  +
push edi  +
push 60h  +
call MFHeapAlloc  +
cmp eax edi +
jz loc_1005A93  +
mov ecx eax +
call sub_1005270  +
jmp loc_1005A95  +
xor eax eax +
mov [esi+28h] eax +
cmp eax edi +
jnz loc_1005AA3  +
mov esi 80000002h +
jmp loc_1005AD0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
push 6Eh  +
lea ecx [ebp+var_4] +
call sub_1005A08  +
test eax eax +
jz loc_1005ABA  +
mov ebx [ebp+var_4] +
mov esi [esi+28h] +
mov eax [esi] +
push ebx  +
push 1  +
push 1  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call dword ptr [eax+10h]  +
mov esi eax +
mov ecx [ebp+var_4] +
add ecx 0FFFFFFF0h +
call sub_1004F1E  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10059E2  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1005AE9  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov ecx edi +
mov [ebp+hMem] ebx +
call sub_1005632  +
push ebx  +
push ebx  +
lea eax [ebp+hMem] +
push eax  +
push [ebp+dwLanguageId]  +
push [ebp+dwMessageId]  +
push ebx  +
push 1300h  +
call ds:FormatMessageW  +
test eax eax +
jnz loc_1005B67  +
push [ebp+dwMessageId]  +
push offset aHresult0x8_8x  +
push edi  +
call sub_1005A31  +
add esp 0Ch +
jmp loc_1005BB2  +
push esi  +
push [ebp+hMem]  +
mov ecx edi +
call sub_1005B05  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax [edi] +
mov esi [eax-0Ch] +
cmp esi ebx +
jle loc_1005BA9  +
lea ebx [esi-1] +
push ebx  +
mov ecx edi +
call loc_1005607  +
cmp ax 0Dh +
jz loc_1005BA3  +
push ebx  +
mov ecx edi +
call loc_1005607  +
cmp ax 0Ah +
jnz loc_1005BA9  +
dec esi  +
dec ebx  +
test esi esi +
jg loc_1005B87  +
push esi  +
mov ecx edi +
call sub_100567D  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push offset dword_100C12C  +
lea ecx [ebp+var_4] +
call sub_100543A  +
cmp [ebp+dwMessageId] 0 +
jge loc_1005C18  +
push 0  +
push [ebp+dwMessageId]  +
lea eax [ebp+dwMessageId] +
push eax  +
call sub_1005B21  +
push eax  +
lea ecx [ebp+var_4] +
call sub_10057C7  +
mov ecx [ebp+dwMessageId] +
add ecx 0FFFFFFF0h +
call sub_1004F1E  +
push 40h  +
push ecx  +
mov eax esp +
push ecx  +
mov ecx [ebp+var_4] +
mov dword ptr [eax] 6Eh +
mov eax esp +
mov [eax] ecx +
push dword ptr [esi+4]  +
call sub_1002273  +
mov ecx [ebp+var_4] +
add ecx 0FFFFFFF0h +
call sub_1004F1E  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor ebx ebx +
push offset dword_100C12C  +
lea ecx [ebp+var_4] +
mov [ebp+pv] ebx +
mov [ebp+var_C] ebx +
call sub_100543A  +
cmp dword_100C040 ebx +
jnz loc_1005C61  +
mov edi 80070057h +
jmp loc_1005CE7  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+4]  +
call ds:KillTimer  +
lea eax [ebp+pv] +
push eax  +
lea eax [esi+2Ch] +
push eax  +
call ds:StringFromCLSID  +
mov edi eax +
cmp edi ebx +
jl loc_1005CE7  +
push [ebp+pv]  +
lea ecx [ebp+var_4] +
call sub_10059E2  +
mov edi offset dword_10016F0 +
push edi  +
push offset asc_10018D0  +
lea ecx [ebp+var_4] +
call sub_1005888  +
push edi  +
push offset asc_10018CC  +
lea ecx [ebp+var_4] +
call sub_1005888  +
lea ecx [ebp+var_4] +
call sub_10055EC  +
push eax  +
lea ecx [ebp+var_C] +
call sub_1004E43  +
cmp [ebp+var_C] ebx +
jnz loc_1005CCA  +
mov edi 80000002h +
jmp loc_1005CE7  +
mov eax dword_100C040 +
mov ecx eax +
add eax 20h +
neg ecx  +
sbb ecx ecx +
and ecx eax +
push ecx  +
push [ebp+var_C]  +
mov ecx esi +
call sub_1005A4C  +
mov edi eax +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
cmp edi ebx +
mov [ebp+pv] ebx +
jge loc_1005D23  +
push edi  +
mov ecx esi +
call sub_1005BBF  +
mov eax [esi+28h] +
cmp eax ebx +
jz loc_1005D0F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+28h] ebx +
push ebx  +
push dword ptr [esi+4]  +
call ds:EndDialog  +
mov ecx offset dword_100C048 +
call sub_1003E94  +
mov ecx [ebp+var_4] +
add ecx 0FFFFFFF0h +
call sub_1004F1E  +
push [ebp+var_C]  +
call ds:SysFreeString  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_1005D58  +
mov eax 80070057h +
jmp loc_1005D69  +
cmp dword ptr [eax] 2Ch +
jnz loc_1005D51  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_1002102  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1005D87  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1005DB0  +
cmp eax [ecx+4] +
jge loc_1005DB0  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1005DE1  +
cmp eax [ecx+4] +
jge loc_1005DE1  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_1005E30  +
mov eax 80070057h +
jmp loc_1005E77  +
mov eax [esi] +
cmp eax edi +
jz loc_1005E75  +
cmp eax 2Ch +
jnz loc_1005E29  +
cmp [esi+24h] edi +
jle loc_1005E60  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_1005D96  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_1005E44  +
pop ebx  +
lea ecx [esi+20h] +
call sub_1005D72  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_10020EB  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
call ds:DeleteCriticalSection  +
lea ecx [esi+30h] +
pop esi  +
jmp sub_1005D72  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+18h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [esi+34h] +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jg loc_1005F00  +
test ecx ecx +
jl loc_1005F00  +
cmp ecx eax +
jnz loc_1005EF3  +
mov esi [esi+8] +
push edi  +
call ds:LeaveCriticalSection  +
mov eax esi +
jmp loc_1005F09  +
push ecx  +
lea ecx [esi+30h] +
call loc_1005DC7  +
mov esi [eax] +
jmp loc_1005EE8  +
push edi  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
add [ebx-3974FFDAh] eax +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_100C000 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi ecx +
call sub_1005E82  +
mov eax 1000000h +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp-98h] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call memset  +
add esp 0Ch +
lea eax [ebp-98h] +
push eax  +
mov dword ptr [ebp-98h] 94h +
call ds:GetVersionExA  +
cmp dword ptr [ebp-88h] 2 +
jnz loc_1005FB4  +
cmp dword ptr [ebp-94h] 5 +
jb loc_1005FD5  +
jmp loc_1005FD1  +
cmp dword ptr [ebp-88h] 1 +
jnz loc_1005FD5  +
cmp dword ptr [ebp-94h] 4 +
ja loc_1005FD1  +
jnz loc_1005FD5  +
cmp dword ptr [ebp-90h] 0 +
jbe loc_1005FD5  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_10018E4 +
call sub_1002102  +
test eax eax +
jge loc_1005FF6  +
mov byte_100C034 1 +
mov ecx [ebp-4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1006863  +
leave   +
retn   +
***
cmp byte ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_10018F4 +
jz locret_1006043  +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_1006043  +
push ecx  +
call ds:HeapDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_100607E  +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jnz loc_100609C  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_10060BD  +
cmp [ebp+0Ch] eax +
jnz loc_10060AD  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_10060BD  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1006029  +
test byte ptr [ebp+8] 1 +
jz loc_10060FC  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4]  +
***
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001908 +
jz loc_1006187  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ecx +
jnb loc_10061AE  +
mov eax 80070057h +
jmp loc_10061B7  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
lea ecx [edx+eax] +
lea esi [ecx-1] +
cmp esi edx +
pop esi  +
jge loc_10061DC  +
mov eax [ebp+arg_8] +
jmp loc_10061E2  +
dec eax  +
not eax  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_10061C0  +
push dword ptr [ebp+0Ch]  +
mov edi eax +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_1002420  +
test eax eax +
jl loc_100624B  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push 10h  +
push eax  +
call sub_1006193  +
test eax eax +
jl loc_100624B  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_100624B  +
dec edi  +
and dword ptr [eax+4] 0 +
mov [eax] esi +
mov dword ptr [eax+0Ch] 1 +
mov [eax+8] edi +
jmp loc_100624D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_10061C0  +
push dword ptr [ebp+10h]  +
mov edi eax +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1002420  +
test eax eax +
jl loc_10062AF  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push 10h  +
push eax  +
call sub_1006193  +
test eax eax +
jl loc_10062AF  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_10062AF  +
dec edi  +
mov [eax+8] edi +
jmp loc_10062B1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_100C180 +
push [ebp+lpMem]  +
cmp eax 1 +
jnz loc_10062DF  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_10062E6  +
push eax  +
call dword_100C184  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push edi  +
push offset aKernel32_dll  +
call ds:LoadLibraryA  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jnz loc_100630D  +
xor eax eax +
jmp loc_10063CD  +
push esi  +
mov esi ds:GetProcAddress +
push offset aIsprocessorfea  +
push edi  +
call esi  +
cmp eax ebx +
jz loc_1006326  +
push 0Ch  +
call eax  +
jmp loc_1006328  +
xor eax eax +
cmp eax ebx +
jnz loc_1006339  +
xor eax eax +
inc eax  +
mov dword_100C180 eax +
jmp loc_10063CC  +
push offset aInterlockedpop  +
push edi  +
call esi  +
push offset aInterlockedpus  +
push edi  +
mov dword_100C188 eax +
call esi  +
push offset aInterlockedcom  +
push edi  +
mov dword_100C184 eax +
call esi  +
mov dword_100C18C eax +
cmp dword_100C184 ebx +
jz loc_10063CA  +
cmp dword_100C188 ebx +
jz loc_10063CA  +
cmp eax ebx +
jz loc_10063CA  +
mov eax large fs:18h +
mov esi [eax+30h] +
add esi 34h +
mov eax [esi] +
cmp eax ebx +
jnz loc_10063C0  +
push 8  +
push ebx  +
mov ebx ds:GetProcessHeap +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
xor eax eax +
cmp edi eax +
jz loc_10063CA  +
push eax  +
push edi  +
push esi  +
mov [edi] eax +
mov [edi+4] eax +
call dword_100C18C  +
test eax eax +
jz loc_10063BE  +
push edi  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
mov eax [esi] +
mov dword_100C180 eax +
xor eax eax +
inc eax  +
jmp loc_10063CC  +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10062BC  +
***
cmp dword_100C180 0 +
push esi  +
jnz loc_10063F8  +
call sub_10062EF  +
test eax eax +
jz loc_100643B  +
mov eax dword_100C180 +
cmp eax 1 +
jnz loc_1006419  +
push 0Dh  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_100643B  +
pop esi  +
retn   +
push eax  +
call dword_100C188  +
test eax eax +
jnz loc_1006483  +
push 40h  +
mov eax 1000h +
push eax  +
push eax  +
push 0  +
call ds:VirtualAlloc  +
mov esi eax +
test esi esi +
jnz loc_100643F  +
xor eax eax +
pop esi  +
retn   +
mov eax [esi] +
push edi  +
push dword_100C180  +
call dword_100C188  +
mov edi eax +
test edi edi +
jz loc_1006464  +
push 8000h  +
push 0  +
push esi  +
call ds:VirtualFree  +
jmp loc_1006480  +
mov edi esi +
add esi 0FF0h +
push edi  +
push dword_100C180  +
call dword_100C184  +
add edi 10h +
cmp edi esi +
jb loc_100646C  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10064B0  +
test eax eax +
jnz loc_10064B5  +
mov ecx [esi] +
test ecx ecx +
jz loc_10064AD  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10064A1  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100C1B4 +
push offset dword_100C1A4  +
push dword_100C1B0  +
mov dword_100C1A4 eax +
push offset unk_100C194  +
push offset unk_100C198  +
push offset unk_100C190  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_100C1A0 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1006558  +
cmp eax esi +
jnz loc_100654B  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_100655B  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1006532  +
xor esi esi +
inc esi  +
mov eax dword_100C4E8 +
cmp eax esi +
jnz loc_100656E  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100659D  +
mov eax dword_100C4E8 +
test eax eax +
jnz loc_1006597  +
mov dword_100C4E8 esi +
push offset dword_1001288  +
push offset dword_100127C  +
call sub_1006494  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100659D  +
jmp loc_10066C1  +
mov dword_100C1AC esi +
mov eax dword_100C4E8 +
cmp eax esi +
jnz loc_10065C1  +
push offset dword_1001278  +
push offset dword_1001258  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100C4E8 2 +
cmp [ebp+var_20] ebx +
jnz loc_10065CE  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100C4F8 ebx +
jz loc_10065EF  +
push offset dword_100C4F8  +
call sub_1006B59  +
pop ecx  +
test eax eax +
jz loc_10065EF  +
push ebx  +
push 2  +
push ebx  +
call dword_100C4F8  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_10066C1  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_1006614  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_1006629  +
cmp cx 20h +
ja loc_1006629  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_1006614  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1006635  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_1006638  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_100C1A8 eax +
cmp dword_100C19C ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_100666A  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_10065FE  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_100C1A8 eax +
xor ebx ebx +
cmp dword_100C19C ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_100C1AC ebx +
jnz loc_10066AC  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100C1A8 +
jmp loc_10066CD  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_10066EA  +
xor eax eax +
jmp loc_1006737  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_10066E6  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1006724  +
cmp ecx 20Bh +
jnz loc_10066E6  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10066E6  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1006732  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10066E6  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100C19C eax +
call sub_1006C67  +
push eax  +
call ds:__set_app_type  +
or dword_100C4F0 0FFFFFFFFh +
or dword_100C4F4 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100C1BC +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100C1B8 +
mov [eax] ecx +
call sub_1006BF9  +
cmp dword_100C028 0 +
jnz loc_1006790  +
push offset sub_1006BF9  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1006BE1  +
xor eax eax +
retn   +
***
call sub_1006CA6  +
jmp ___tmainCRTStartup  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1006863  +
push offset dword_100C000  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
cmp ecx dword_100C000 +
jnz loc_100686E  +
retn 0  +
jmp loc_1006D47  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp ecx esi +
jbe loc_10068E7  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax [ebp+arg_8] +
jnb loc_10068E7  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 0Ch +
call sub_1006EE4  +
add esp 14h +
xor eax eax +
jmp loc_10068F6  +
imul ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_0]  +
call realloc  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1006909  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
jmp ds:_purecall  +
***
push offset loc_1006816  +
push large dword ptr fs:0  +
mov eax [esp+10h] +
mov [esp+10h] ebp +
lea ebp [esp+10h] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_100C000 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1006863  +
jmp __SEH_epilog4  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1006A9E  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1006A9E  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1006A98  +
cmp eax 19930521h +
jz loc_1006A98  +
cmp eax 19930522h +
jz loc_1006A98  +
cmp eax 1994000h +
jnz loc_1006A9E  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1006A60+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1006AE6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1006AE2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1006B4D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1006B45  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1006B4F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1006B35  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1006AD0  +
pop ecx  +
test eax eax +
jz loc_1006BB6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1006B10  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006BB6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1006BBF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1006C5A  +
cmp ecx 0FFFFFFFFh +
jz loc_1006C5A  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1006C53  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1006C53  +
cmp edx 10000000h +
jnb loc_1006C53  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1006C53  +
jmp loc_1006C4E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1006C9C  +
push eax  +
call sub_1006C01  +
test eax eax +
jz loc_1006C9C  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1006C91  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1006C9C  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100C000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1006CD8  +
test eax ebx +
jz loc_1006CD8  +
not eax  +
mov dword_100C004 eax +
jmp loc_1006D33  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1006D1F  +
test dword_100C000 ebx +
jnz loc_1006D24  +
mov esi 0BB40E64Fh +
mov dword_100C000 esi +
not esi  +
mov dword_100C004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100C2C0 eax +
mov dword_100C2BC ecx +
mov dword_100C2B8 edx +
mov dword_100C2B4 ebx +
mov dword_100C2B0 esi +
mov dword_100C2AC edi +
mov word_100C2D8 ss +
mov word_100C2CC cs +
mov word_100C2A8 ds +
mov word_100C2A4 es +
mov word_100C2A0 fs +
mov word_100C29C gs +
pushf   +
pop dword_100C2D0  +
mov eax [ebp+0] +
mov dword_100C2C4 eax +
mov eax [ebp+4] +
mov dword_100C2C8 eax +
lea eax [ebp+8] +
mov dword_100C2D4 eax +
mov eax [ebp-320h] +
mov dword_100C210 10001h +
mov eax dword_100C2C8 +
mov dword_100C1CC eax +
mov dword_100C1C0 0C0000409h +
mov dword_100C1C4 1 +
mov eax dword_100C000 +
mov [ebp-328h] eax +
mov eax dword_100C004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_100C000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1006863  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1006E39  +
***
sub esp 28h +
mov [esp+28h+var_28] 0 +
mov al byte_100C02C +
cmp al 2 +
jnz loc_1006F99  +
lea ecx [esp+28h+SystemInfo] +
push ecx  +
call ds:GetSystemInfo  +
mov ecx 1 +
cmp [esp+28h+SystemInfo.dwNumberOfProcessors] ecx +
ja loc_1006F89  +
mov eax [esp+28h+SystemInfo.dwActiveProcessorMask] +
lea edx [eax-1] +
test edx eax +
jnz loc_1006F89  +
lea eax [esp+28h+var_28] +
push eax  +
mov byte_100C02C 0FFh +
call ds:InterlockedIncrement  +
add esp 28h +
retn   +
lea eax [esp+28h+var_28] +
push eax  +
mov byte_100C02C cl +
call ds:InterlockedIncrement  +
add esp 28h +
retn   +
***
mov al byte_100C02C +
sub esp 28h +
cmp al 2 +
jnz loc_1007013  +
mov dword ptr [esp] 0 +
mov cl byte_100C02C +
cmp cl al +
jnz loc_1007013  +
lea edx [esp+4] +
push edx  +
call ds:GetSystemInfo  +
mov ecx 1 +
cmp [esp+18h] ecx +
ja loc_1007003  +
mov eax [esp+14h] +
lea edx [eax-1] +
test edx eax +
jnz loc_1007003  +
lea eax [esp] +
push eax  +
mov byte_100C02C 0FFh +
call ds:InterlockedIncrement  +
add esp 28h +
retn   +
***
lea eax [esp] +
push eax  +
mov byte_100C02C cl +
call ds:InterlockedIncrement  +
add esp 28h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
lea eax [ebp+var_4] +
mov [ebp+var_8] eax +
mov eax 1 +
mov edx [ebp+var_8] +
cmp byte_100C02C ah +
jle loc_1007044  +
xadd [edx] eax +
jmp loc_1007047  +
xadd [edx] eax +
inc eax  +
mov esp ebp +
pop ebp  +
retn   +
***
test eax eax +
jnz loc_100706C  +
mov eax 102h +
retn 4  +
mov edx [esp+hHandle] +
push ecx  +
push eax  +
push edx  +
call ds:WaitForSingleObjectEx  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jg loc_10070A9  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
test eax eax +
jz loc_10070DD  +
mov ecx [eax+4] +
mov edx [eax+8] +
push esi  +
push ecx  +
call edx  +
mov esi eax +
test ebx ebx +
jz loc_1007124  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
cmp byte_100C02C 0 +
jle loc_10070D2  +
xadd [edx] eax +
jmp loc_10070D5  +
xadd [edx] eax +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
push edi  +
call ds:GetProcessHeap  +
push esi  +
mov edi eax +
push 0  +
push edi  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_1007123  +
test ebx ebx +
jz loc_1007123  +
push esi  +
push 0  +
push edi  +
call ds:HeapSize  +
mov [ebp+arg_0] eax +
test eax eax +
jle loc_1007123  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
cmp byte_100C02C 0 +
jle loc_1007120  +
xadd [edx] eax +
jmp loc_1007123  +
xadd [edx] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
test eax eax +
jz loc_100715A  +
mov ecx [eax+4] +
mov edx [eax+0Ch] +
push esi  +
push ecx  +
call edx  +
mov esp ebp +
pop ebp  +
retn 4  +
push edi  +
mov edi ds:GetProcessHeap +
call edi  +
cmp [ebp+arg_0] 0 +
jz loc_1007194  +
push esi  +
push 0  +
push eax  +
call ds:HeapSize  +
test eax eax +
jle loc_1007194  +
neg eax  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov edx [ebp+arg_0] +
cmp byte_100C02C 0 +
jle loc_1007191  +
xadd [edx] eax +
jmp loc_1007194  +
xadd [edx] eax +
push esi  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov esp ebp +
pop ebp  +
retn 4  +
***
test edx edx +
jg loc_10071BF  +
mov dword ptr [edi] 0 +
xor eax eax +
retn 4  +
push esi  +
mov esi 40h +
cmp edx 20h +
ja loc_10071D8  +
mov ecx 20h +
nop   +
mov esi ecx +
shr ecx 1 +
cmp edx ecx +
jbe loc_10071D0  +
mov ecx 8 +
test eax eax +
jz loc_10071E3  +
mov ecx [eax] +
cmp esi ecx +
ja loc_10071EC  +
mov esi 1 +
mov ecx [esp+4+arg_0] +
push ecx  +
lea edx [esi+edx-1] +
push edx  +
call sub_1007090  +
mov ecx eax +
mov eax esi +
sub eax ecx +
dec esi  +
and eax esi +
mov [edi] ecx +
add eax ecx +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetProcessHeap +
mov [ebp+var_8] eax +
jmp loc_1007240  +
mov esi [ebp+var_8] +
mov edx [esi+4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1007262  +
test eax eax +
lea ecx [edx+1] +
jz loc_1007270  +
mov ebx [eax] +
cmpxchg8b qword ptr [esi]  +
jz loc_1007270  +
jmp loc_1007251  +
test eax eax +
lea ecx [edx+1] +
jz loc_1007270  +
mov ebx [eax] +
cmpxchg8b qword ptr [esi]  +
jnz loc_1007262  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10072D4  +
mov esi [eax+4] +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1007290  +
mov ecx [eax+4] +
mov edx [eax+0Ch] +
push esi  +
push ecx  +
call edx  +
jmp loc_1007240  +
call edi  +
cmp [ebp+arg_4] 0 +
jz loc_10072C3  +
push esi  +
push 0  +
push eax  +
call ds:HeapSize  +
test eax eax +
jle loc_10072C3  +
neg eax  +
mov [ebp+var_C] eax +
mov eax [ebp+var_C] +
mov edx [ebp+arg_4] +
cmp byte_100C02C 0 +
jle loc_10072C0  +
xadd [edx] eax +
jmp loc_10072C3  +
xadd [edx] eax +
push esi  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
jmp loc_1007240  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
mov ebx [ebp+arg_C] +
mov edx ebx +
neg edx  +
push esi  +
sbb edx edx +
push edi  +
lea eax [ebp+var_4] +
and edx 10h +
push eax  +
add edx 0F8h +
lea edi [ebp+var_C] +
mov eax ebx +
mov [ebp+var_4] 0 +
call sub_10071B0  +
mov esi eax +
xor edi edi +
cmp esi edi +
jnz loc_1007335  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
push 0F8h  +
push edi  +
push esi  +
call memset  +
mov ecx [ebp+var_C] +
mov [esi+0F0h] ecx +
mov edx [ebp+var_4] +
add esp 0Ch +
mov [esi+28h] edx +
cmp ebx edi +
jnz loc_100735F  +
mov [esi+0F4h] edi +
jmp loc_1007381  +
lea eax [esi+0F8h] +
mov [esi+0F4h] eax +
mov ecx [ebx] +
mov [eax] ecx +
mov edx [ebx+4] +
mov [eax+4] edx +
mov ecx [ebx+8] +
mov [eax+8] ecx +
mov edx [ebx+0Ch] +
mov [eax+0Ch] edx +
mov dword ptr [esi+0Ch] 0FFFFFFFFh +
mov ebx 1 +
cmp [ebp+arg_8] edi +
jz loc_1007397  +
mov [esi+0Ch] ebx +
jmp loc_100739F  +
cmp [ebp+arg_4] edi +
jz loc_100739F  +
mov [esi+0Ch] edi +
mov eax [ebp+arg_0] +
cmp eax 10h +
jge loc_10073AE  +
mov eax 10h +
jmp loc_10073BA  +
cmp eax 100h +
jle loc_10073BA  +
mov eax 100h +
mov [esi+30h] eax +
lea eax [esi+70h] +
mov [eax] edi +
mov [esi+10h] eax +
mov [esi+14h] ebx +
mov dword ptr [esi+8] 4C66506Ch +
mov al byte_100C02C +
cmp al 2 +
jnz loc_1007417  +
mov [ebp+Addend] edi +
mov cl byte_100C02C +
cmp cl al +
jnz loc_1007417  +
lea edx [ebp+SystemInfo] +
push edx  +
call ds:GetSystemInfo  +
cmp [ebp+SystemInfo.dwNumberOfProcessors] ebx +
ja loc_1007407  +
mov eax [ebp+SystemInfo.dwActiveProcessorMask] +
lea ecx [eax-1] +
test ecx eax +
jnz loc_1007407  +
mov byte_100C02C 0FFh +
jmp loc_100740D  +
mov byte_100C02C bl +
lea edx [ebp+Addend] +
push edx  +
call ds:InterlockedIncrement  +
lea eax [ebp+var_8] +
mov [ebp+arg_C] eax +
mov eax 1 +
mov edx [ebp+arg_C] +
cmp byte_100C02C ah +
jle loc_1007433  +
xadd [edx] eax +
jmp loc_1007436  +
xadd [edx] eax +
inc eax  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
mov eax [esp+0Ch] +
mov ecx [esp+8] +
mov edx [esp+4] +
push 0  +
push eax  +
push ecx  +
push edx  +
call sub_10072F0  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_1007579  +
push 0  +
lea eax [edi+8] +
push eax  +
call ds:InterlockedExchange  +
cmp eax 4C66506Ch +
jnz loc_1007579  +
mov cl byte_100C02C +
cmp cl 2 +
jnz loc_10074AB  +
call sub_1006F40  +
mov edx [edi+10h] +
push ebx  +
mov ebx [edi+14h] +
sub ebx 1 +
push esi  +
mov [ebp-4] edx +
js loc_10074F1  +
jmp loc_10074C0  +
mov eax [ebp-4] +
mov esi [eax+ebx*4] +
test esi esi +
jz loc_10074EC  +
mov ecx [esi] +
push ecx  +
call ds:CloseHandle  +
mov edx [esi+4] +
push edx  +
call ds:CloseHandle  +
lea eax [edi+28h] +
push eax  +
mov eax [edi+0F4h] +
call sub_1007140  +
sub ebx 1 +
jns loc_10074C0  +
lea ebx [edi+34h] +
mov dword ptr [ebp-4] 0Fh +
jmp loc_1007500  +
mov esi [ebx] +
test esi esi +
jz loc_1007515  +
mov eax [edi+0F4h] +
lea ecx [edi+28h] +
push ecx  +
call sub_1007140  +
add ebx 4 +
sub dword ptr [ebp-4] 1 +
jnz loc_1007500  +
mov edx [edi+0F4h] +
lea esi [edi+28h] +
push esi  +
lea eax [edi+20h] +
push edx  +
call sub_1007220  +
mov eax [esi] +
mov esi [edi+0F0h] +
lea ecx [ebp+8] +
mov [ebp+8] eax +
mov eax [edi+0F4h] +
push ecx  +
call sub_1007140  +
lea edx [ebp-8] +
mov [ebp-4] edx +
mov eax 1 +
mov edx [ebp-4] +
cmp byte_100C02C ah +
jle loc_1007567  +
xadd [edx] eax +
jmp loc_100756A  +
xadd [edx] eax +
inc eax  +
pop esi  +
pop ebx  +
mov eax 1 +
pop edi  +
mov esp ebp +
pop ebp  +
retn 4  +
***
xor eax eax +
pop edi  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx+14h] +
cmp eax 8000h +
jnz loc_10075AF  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
push esi  +
push edi  +
lea eax [ebx+28h] +
push eax  +
mov eax [ebx+0F4h] +
push 10h  +
call sub_1007090  +
mov esi eax +
mov [ebp+var_4] esi +
test esi esi +
jz loc_100778C  +
push 0  +
push 7FFFFFFFh  +
push 0  +
push 0  +
call ds:CreateSemaphoreW  +
mov [esi] eax +
test eax eax +
jz loc_100777D  +
push 0  +
push 0  +
push 0  +
push 0  +
call ds:CreateEventW  +
mov [esi+4] eax +
test eax eax +
jz loc_1007774  +
mov edi [ebx+14h] +
mov eax [ebx+10h] +
lea ecx [ebx+10h] +
mov [ebp+var_14] edi +
mov [ebp+var_8] ecx +
mov [ebp+var_18] eax +
cmp edi 8000h +
jz loc_1007764  +
jmp loc_1007628  +
mov eax [ebp+var_18] +
mov ecx edx +
cmp edi 20h +
jb loc_10076E7  +
lea edx [edi-1] +
test edx edi +
jnz loc_10076E7  +
lea eax [ebx+28h] +
push eax  +
mov eax [ebx+0F4h] +
lea ecx ds:0[edi*8] +
push ecx  +
call sub_1007090  +
mov esi eax +
mov [ebp+Value] esi +
test esi esi +
jz loc_1007764  +
mov edx [ebp+var_18] +
lea ebx ds:0[edi*4] +
push ebx  +
push edx  +
push esi  +
call memcpy  +
mov eax [ebp+var_4] +
mov [ebx+esi] eax +
lea eax [edi-1] +
lea ecx ds:0[eax*4] +
push ecx  +
lea edx [ebx+esi+4] +
push 0  +
push edx  +
call memset  +
mov ecx [ebp+var_8] +
lea eax [edi+1] +
add esp 18h +
mov [ebp+var_20] esi +
mov [ebp+var_1C] eax +
mov [ebp+var_10] ecx +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
mov ebx [ebp+var_20] +
mov ecx [ebp+var_1C] +
cmp byte_100C02C 0 +
mov esi [ebp+var_10] +
jle loc_10076BF  +
cmpxchg8b qword ptr [esi]  +
jmp loc_10076C2  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_10077E2  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov esi [ebp+Value] +
add eax 28h +
push eax  +
mov eax [edx+0F4h] +
call sub_1007140  +
jmp loc_1007745  +
mov [ebp+var_20] eax +
lea edx [edi+1] +
lea eax [eax+edi*4] +
mov [ebp+var_1C] edx +
mov [ebp+var_10] eax +
mov eax 0 +
mov edx [ebp+var_4] +
cmp byte_100C02C 0 +
mov ebx [ebp+var_10] +
jle loc_1007710  +
cmpxchg [ebx] edx +
jmp loc_1007713  +
cmpxchg [ebx] edx +
setz al  +
test al al +
jnz loc_1007815  +
mov [ebp+var_10] ecx +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
mov ebx [ebp+var_20] +
mov ecx [ebp+var_1C] +
cmp byte_100C02C 0 +
mov esi [ebp+var_10] +
jle loc_100773F  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1007742  +
cmpxchg8b qword ptr [esi]  +
setz al  +
mov ecx [ebp+arg_0] +
mov edi [ecx+14h] +
mov edx [ebp+var_8] +
mov eax [edx] +
mov [ebp+var_14] edi +
mov [ebp+var_18] eax +
mov ebx ecx +
cmp edi 8000h +
jnz loc_1007623  +
mov ecx [ebp+var_4] +
mov edx [ecx+4] +
push edx  +
call ds:CloseHandle  +
mov esi [ebp+var_4] +
mov eax [esi] +
push eax  +
call ds:CloseHandle  +
lea eax [ebx+28h] +
push eax  +
mov eax [ebx+0F4h] +
call sub_1007140  +
mov [ebp+var_1C] 8000h +
lea edi [ebx+10h] +
mov eax [edi] +
mov ecx [edi+4] +
mov [ebp+var_18] eax +
mov [ebp+var_14] ecx +
mov [ebp+var_20] eax +
cmp ecx 8000h +
jz loc_10077D7  +
mov [ebp+arg_0] edi +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
mov ebx [ebp+var_20] +
mov ecx [ebp+var_1C] +
cmp byte_100C02C 0 +
mov esi [ebp+arg_0] +
jle loc_10077CD  +
cmpxchg8b qword ptr [esi]  +
jmp loc_10077D0  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1007796  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
mov esi [ebp+var_4] +
xor ecx ecx +
lea eax [ecx+1] +
mov [esi+8] edi +
cmp edi eax +
jz loc_10077F8  +
inc ecx  +
rol eax 1 +
cmp edi eax +
jnz loc_10077F1  +
mov edx [ebp+Value] +
mov eax [ebp+arg_0] +
push edx  +
lea ecx [eax+ecx*4+34h] +
push ecx  +
call ds:InterlockedExchange  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
mov edx [ebp+var_4] +
mov [edx+8] edi +
mov [ebp+arg_0] ecx +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
mov ebx [ebp+var_20] +
mov ecx [ebp+var_1C] +
cmp byte_100C02C 0 +
mov esi [ebp+arg_0] +
jle loc_100783C  +
cmpxchg8b qword ptr [esi]  +
jmp loc_100783F  +
cmpxchg8b qword ptr [esi]  +
setz al  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov eax [esp+arg_0] +
xor ecx ecx +
cmp eax ecx +
jz loc_10078AF  +
mov eax [eax+8] +
cmp eax 4C66506Ch +
jnz loc_10078AF  +
mov eax [esp+arg_4] +
cmp eax ecx +
jz loc_10078AF  +
test al 7 +
jnz loc_10078AF  +
mov [eax] ecx +
mov [eax+4] ecx +
or dword ptr [eax+4] 10000h +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov cl byte_100C02C +
cmp cl 2 +
jnz loc_10078A2  +
call sub_1006F40  +
call sub_1007020  +
mov eax 1 +
retn 8  +
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_1008798  +
mov eax [esi+8] +
cmp eax 4C66506Ch +
jnz loc_1008798  +
mov ebx [ebp+arg_4] +
mov [ebp+var_8] ebx +
cmp ebx edi +
jz loc_1008798  +
test bl 3 +
jnz loc_1008798  +
mov cl byte_100C02C +
cmp cl 2 +
jnz loc_100790D  +
call sub_1006F40  +
mov ecx [ebp+arg_8] +
mov [ebp+var_4] edi +
test ecx 0FFFFFFF7h +
jnz loc_1007E50  +
cmp [esi+0Ch] edi +
jl loc_10079B8  +
call ds:GetCurrentThreadId  +
mov edx [ebx+8] +
cmp edx eax +
jnz loc_10079B8  +
cmp [esi+0Ch] edi +
jnz loc_100794C  +
pop edi  +
pop esi  +
mov eax 0E0000004h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov edi [ebp+arg_14] +
jmp loc_1007954  +
mov ebx [ebp+arg_4] +
mov eax [ebx] +
mov ebx [ebx+4] +
mov [ebp+var_18] ebx +
mov [ebp+var_24] eax +
mov [ebp+var_20] ebx +
test edi edi +
jnz loc_100796E  +
and ebx 0FFFF7FFFh +
jmp loc_100797B  +
test eax 7FFFh +
jnz loc_100797E  +
or ebx 8000h +
mov [ebp+var_18] ebx +
inc eax  +
mov [ebp+var_1C] eax +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_10079A0  +
cmpxchg8b qword ptr [esi]  +
jmp loc_10079A3  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1007951  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov ebx [ebp+arg_4] +
mov eax [ebx] +
mov edi [ebx+4] +
mov [ebp+var_1C] eax +
mov [ebp+var_18] edi +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
test eax 0FFFF0000h +
jnz loc_1007A59  +
cmp [ebp+arg_14] 0 +
jnz loc_10079E2  +
and edi 0FFFF7FFFh +
jmp loc_10079EF  +
test eax 7FFFh +
jnz loc_10079F2  +
or edi 8000h +
mov [ebp+var_18] edi +
inc eax  +
mov [ebp+var_1C] eax +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1007A14  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1007A17  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_10079B5  +
cmp [ebp+var_4] 0 +
jz loc_1007A4E  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1007A46  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1007A4E  +
jmp loc_1007A3B  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1007A46  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
test byte ptr [ebp+arg_8] 8 +
jnz loc_1007E12  +
mov al byte_100C02C +
test al al +
jle loc_1007A7D  +
mov ecx edi +
and ecx 8000h +
or ecx [ebp+arg_18] +
jz loc_1007E12  +
test edi 0FFFE0000h +
jnz loc_1007AF3  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1007AEB  +
mov edx [ebp+arg_0] +
mov [ebp+var_C] edx +
mov esi [ebp+var_C] +
mov edx [esi+4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1007AB5  +
test eax eax +
lea ecx [edx+1] +
jz loc_1007AC4  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jz loc_1007AC4  +
jmp loc_1007AA3  +
test eax eax +
lea ecx [edx+1] +
jz loc_1007AC4  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jnz loc_1007AB5  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1007AEB  +
mov eax [ebp+arg_0] +
push eax  +
call sub_1007590  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_1007AEB  +
push 1  +
call ds:Sleep  +
jmp loc_10079B5  +
mov ecx [eax+8] +
shl ecx 11h +
add edi ecx +
inc edi  +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1007B15  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1007B18  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_10079B5  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1007B3A  +
mov ecx [ebp+arg_0] +
mov edx [ecx+10h] +
mov eax edi +
shr eax 11h +
mov eax [edx+eax*4] +
jmp loc_1007B74  +
mov ecx edi +
shr ecx 11h +
cmp [eax+8] ecx +
jz loc_1007B77  +
mov edx [ebp+arg_0] +
mov [ebp+arg_8] edx +
mov esi [ebp+arg_8] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1007B66  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1007B6E  +
jmp loc_1007B5B  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1007B66  +
mov edx [edx+10h] +
mov eax [edx+ecx*4] +
mov [ebp+var_4] eax +
mov cl byte_100C02C +
test cl cl +
jle loc_1007C68  +
test edi 8000h +
jz loc_1007C68  +
mov [ebp+arg_8] 3E8h +
pause   +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov edi [esi+4] +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
test eax 0FFFF0000h +
jnz loc_1007C17  +
cmp [ebp+arg_14] 0 +
jnz loc_1007BBD  +
and edi 0FFFF7FFFh +
jmp loc_1007BCA  +
test eax 7FFFh +
jnz loc_1007BCA  +
or edi 8000h +
dec edi  +
inc eax  +
mov [ebp+var_1C] eax +
mov edx edi +
and eax 0FFFE0000h +
and edx 7FFFh +
or eax edx +
mov [ebp+var_18] edi +
jnz loc_1007BEC  +
and edi 1FFFFh +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1007C0A  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1007C0D  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1007C2B  +
mov esi [ebp+arg_4] +
sub [ebp+arg_8] 1 +
jz loc_1007C6B  +
test edi 8000h +
jnz loc_1007B98  +
jmp loc_1007C6B  +
test edi 0FFFE0000h +
jnz loc_1007C5D  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1007C55  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1007C5D  +
jmp loc_1007C4A  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1007C55  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov esi [ebp+arg_4] +
mov ebx [ebp+bAlertable] +
mov edi edi +
mov eax [ebp+arg_10] +
test eax eax +
jnz loc_1007C89  +
mov ecx [ebp+var_4] +
mov edx [ecx] +
mov eax [ebp+arg_18] +
push edx  +
mov ecx ebx +
call sub_1007060  +
jmp loc_1007C9A  +
mov ecx [ebp+arg_18] +
mov edx [ebp+var_4] +
push ebx  +
push ecx  +
mov ecx [edx] +
mov edx [ebp+arg_C] +
push ecx  +
push edx  +
call eax  +
mov [ebp+arg_8] eax +
test eax eax +
jnz loc_1007D43  +
mov eax [esi] +
mov edi [esi+4] +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
test eax 0FFFF0000h +
jnz loc_1007C70  +
cmp [ebp+arg_14] 0 +
jnz loc_1007CC5  +
and edi 0FFFF7FFFh +
jmp loc_1007CD2  +
test eax 7FFFh +
jnz loc_1007CD2  +
or edi 8000h +
dec edi  +
inc eax  +
mov [ebp+var_1C] eax +
mov ecx edi +
and eax 0FFFE0000h +
and ecx 7FFFh +
or eax ecx +
mov [ebp+var_18] edi +
jnz loc_1007CF4  +
and edi 1FFFFh +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1007D12  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1007D15  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1007DD5  +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
mov edi [ecx+4] +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
test eax 0FFFF0000h +
jz loc_1007CB7  +
jmp loc_1007C68  +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov edi [esi+4] +
mov [ebp+var_20] edi +
dec edi  +
mov [ebp+var_1C] eax +
mov [ebp+var_24] eax +
mov edx edi +
and eax 0FFFE0000h +
and edx 7FFFh +
or eax edx +
mov [ebp+var_18] edi +
jnz loc_1007D6F  +
and edi 1FFFFh +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1007D8D  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1007D90  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1007D40  +
test edi 0FFFE0000h +
jnz loc_1007DC9  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1007DC1  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1007DC9  +
jmp loc_1007DB6  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1007DC1  +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
test edi 0FFFE0000h +
jnz loc_1007E07  +
mov ecx [ebp+arg_0] +
mov [ebp+arg_0] ecx +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1007DFF  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1007E07  +
jmp loc_1007DF4  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1007DFF  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
cmp [ebp+var_4] 0 +
jz loc_1007E42  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1007E3A  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1007E42  +
jmp loc_1007E2F  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1007E3A  +
pop edi  +
pop esi  +
mov eax 102h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
lea eax [ecx-1] +
test eax 0FFFFFFF7h +
jnz loc_10083F8  +
cmp [esi+0Ch] edi +
mov [ebp+var_C] edi +
jl loc_1007EF0  +
call ds:GetCurrentThreadId  +
mov ecx [ebx+8] +
mov [ebp+var_C] eax +
cmp ecx eax +
jnz loc_1007EF0  +
cmp [esi+0Ch] edi +
jz loc_100793E  +
inc dword ptr [ebx+0Ch]  +
cmp [ebp+arg_14] edi +
jnz loc_1007EDD  +
mov edx [ebx+4] +
test edx 8000h +
jz loc_1007EDD  +
jmp loc_1007E9B  +
mov ebx [ebp+arg_4] +
mov eax [ebx] +
mov ebx [ebx+4] +
mov [ebp+var_20] ebx +
mov [ebp+var_18] ebx +
and ebx 0FFFF7FFFh +
mov [ebp+var_1C] eax +
mov [ebp+var_24] eax +
mov [ebp+var_20] ebx +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1007ED3  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1007ED6  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1007E98  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov ebx [ebp+arg_4] +
jmp loc_1007EF0  +
mov eax [ebx] +
mov edi [ebx+4] +
mov [ebp+var_1C] eax +
mov [ebp+var_18] edi +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
test eax eax +
jnz loc_1007F9C  +
and edi 0FFFF7FFFh +
mov [ebp+var_1C] 10000h +
mov [ebp+var_18] edi +
cmp [ebp+arg_14] eax +
jz loc_1007F27  +
or edi 8000h +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1007F45  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1007F48  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1007EE8  +
cmp [ebp+var_4] 0 +
jz loc_1007F7F  +
mov edx [ebp+arg_0] +
mov [ebp+arg_14] edx +
mov esi [ebp+arg_14] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1007F77  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1007F7F  +
jmp loc_1007F6C  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1007F77  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+0Ch] 0 +
jl loc_1007F91  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_C] +
mov [ecx+8] edx +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
test byte ptr [ebp+arg_8] 8 +
jnz loc_10083BA  +
mov al byte_100C02C +
test al al +
jle loc_1007FC0  +
mov ecx edi +
and ecx 8000h +
or ecx [ebp+arg_18] +
jz loc_10083BA  +
test edi 0FFFE0000h +
jnz loc_100802C  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1008021  +
mov edx [ebp+arg_0] +
mov [ebp+var_10] edx +
mov esi [ebp+var_10] +
mov edx [esi+4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1007FF8  +
test eax eax +
lea ecx [edx+1] +
jz loc_1008007  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jz loc_1008007  +
jmp loc_1007FE6  +
test eax eax +
lea ecx [edx+1] +
jz loc_1008007  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jnz loc_1007FF8  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1008021  +
mov eax [ebp+arg_0] +
push eax  +
call sub_1007590  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1008076  +
mov ecx [eax+8] +
shl ecx 11h +
add edi ecx +
mov [ebp+var_18] edi +
add [ebp+var_1C] 20000h +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1008051  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1008054  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1007EE8  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1008084  +
mov ecx [ebp+arg_0] +
mov edx [ecx+10h] +
mov eax edi +
shr eax 11h +
mov eax [edx+eax*4] +
jmp loc_10080BE  +
pop edi  +
pop esi  +
mov eax 8 +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov ecx edi +
shr ecx 11h +
cmp [eax+8] ecx +
jz loc_10080C1  +
mov edx [ebp+arg_0] +
mov [ebp+arg_8] edx +
mov esi [ebp+arg_8] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_10080B0  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_10080B8  +
jmp loc_10080A5  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10080B0  +
mov edx [edx+10h] +
mov eax [edx+ecx*4] +
mov [ebp+var_4] eax +
mov cl byte_100C02C +
test cl cl +
jle loc_10081C6  +
test edi 8000h +
jz loc_10081C6  +
mov [ebp+arg_8] 3E8h +
pause   +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov edi [esi+4] +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
test eax 1FFFFh +
jnz loc_1008163  +
or eax 10000h +
sub eax 20000h +
and edi 0FFFF7FFFh +
cmp [ebp+arg_14] 0 +
mov [ebp+var_1C] eax +
mov [ebp+var_18] edi +
jz loc_100811E  +
or edi 8000h +
mov [ebp+var_18] edi +
mov edx edi +
and eax 0FFFE0000h +
and edx 7FFFh +
or eax edx +
jnz loc_1008138  +
and edi 1FFFFh +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1008156  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1008159  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1008177  +
mov esi [ebp+arg_4] +
sub [ebp+arg_8] 1 +
jz loc_10081D0  +
test edi 8000h +
jnz loc_10080E2  +
jmp loc_10081D0  +
test edi 0FFFE0000h +
jnz loc_10081A9  +
mov eax [ebp+arg_0] +
mov [ebp+arg_14] eax +
mov esi [ebp+arg_14] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_10081A1  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_10081A9  +
jmp loc_1008196  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10081A1  +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+0Ch] 0 +
jl loc_10081BB  +
mov edx [ebp+arg_4] +
mov eax [ebp+var_C] +
mov [edx+8] eax +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov esi [ebp+arg_4] +
lea esp [esp+0] +
mov eax [ebp+arg_10] +
test eax eax +
jnz loc_10081EB  +
mov ecx [ebp+var_4] +
mov edx [ecx+4] +
mov ecx [ebp+bAlertable] +
mov eax [ebp+arg_18] +
push edx  +
call sub_1007060  +
jmp loc_1008200  +
mov ecx [ebp+bAlertable] +
mov edx [ebp+arg_18] +
push ecx  +
mov ecx [ebp+var_4] +
push edx  +
mov edx [ecx+4] +
mov ecx [ebp+arg_C] +
push edx  +
push ecx  +
call eax  +
mov [ebp+arg_8] eax +
test eax eax +
jnz loc_10082C3  +
mov eax [esi] +
mov edi [esi+4] +
test eax 1FFFFh +
jnz loc_10082A2  +
jmp loc_1008220  +
mov [ebp+var_24] eax +
or eax 10000h +
mov [ebp+var_20] edi +
sub eax 20000h +
and edi 0FFFF7FFFh +
cmp [ebp+arg_14] 0 +
mov [ebp+var_1C] eax +
mov [ebp+var_18] edi +
jz loc_100824B  +
or edi 8000h +
mov [ebp+var_18] edi +
mov edx edi +
and eax 0FFFE0000h +
and edx 7FFFh +
or eax edx +
jnz loc_1008265  +
and edi 1FFFFh +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1008283  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1008286  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_100837F  +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
mov edi [ecx+4] +
test eax 1FFFFh +
jz loc_1008220  +
mov esi ecx +
test eax 8000h +
jz loc_10081D0  +
mov eax [ebp+var_4] +
mov ecx [eax+4] +
push ecx  +
call ds:SetEvent  +
jmp loc_10081D0  +
mov esi [ebp+arg_4] +
mov edi [esi] +
mov esi [esi+4] +
mov [ebp+var_24] edi +
sub edi 20000h +
mov edx edi +
mov eax esi +
and edx 0FFFE0000h +
and eax 7FFFh +
or edx eax +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
mov [ebp+var_1C] edi +
jnz loc_10082F6  +
and esi 1FFFFh +
mov [ebp+var_18] esi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1008314  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1008317  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_10082C0  +
mov ecx [ebp+var_18] +
test ecx 0FFFE0000h +
jnz loc_1008353  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_100834B  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1008353  +
jmp loc_1008340  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_100834B  +
test edi 0FFFF0000h +
jnz loc_1008373  +
mov eax ecx +
and eax 7FFFh +
jz loc_1008373  +
push 0  +
push eax  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push ecx  +
call ds:ReleaseSemaphore  +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
test edi 0FFFE0000h +
jnz loc_1007F7F  +
mov edx [ebp+arg_0] +
mov [ebp+arg_14] edx +
mov esi [ebp+arg_14] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_10083AD  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_10083B5  +
jmp loc_10083A2  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10083AD  +
jmp loc_1007F7F  +
cmp [ebp+var_4] 0 +
jz loc_10083EA  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_10083E2  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_10083EA  +
jmp loc_10083D7  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10083E2  +
pop edi  +
pop esi  +
mov eax 102h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
lea edx [ecx-2] +
test edx 0FFFFFFF7h +
jnz loc_10084EF  +
cmp [esi+0Ch] edi +
jl loc_1008430  +
call ds:GetCurrentThreadId  +
mov ecx [ebx+8] +
cmp ecx eax +
jz loc_1008427  +
pop edi  +
pop esi  +
mov eax 0E0000001h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
cmp [ebx+0Ch] edi +
jnz loc_1008430  +
mov [ebx+8] edi +
nop   +
mov eax [ebx] +
mov edi [ebx+4] +
cmp dword ptr [ebx+0Ch] 0 +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
jnz loc_100844D  +
test eax 10000h +
jz loc_1008419  +
and eax 0FFFEFFFFh +
and edi 0FFFF7FFFh +
cmp [ebp+arg_14] 0 +
mov [ebp+var_18] edi +
jz loc_1008465  +
or edi 8000h +
mov [ebp+var_18] edi +
inc eax  +
mov [ebp+var_1C] eax +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1008487  +
cmpxchg8b qword ptr [esi]  +
jmp loc_100848A  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1008496  +
mov ebx [ebp+arg_4] +
jmp loc_1008430  +
mov ecx [ebp+arg_4] +
mov eax [ecx+0Ch] +
test eax eax +
jz loc_10084AF  +
pop edi  +
dec eax  +
pop esi  +
mov [ecx+0Ch] eax +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
test [ebp+var_1C] 0FFFE0000h +
jnz loc_1007F91  +
mov eax edi +
and eax 7FFFh +
jz loc_1007F91  +
mov edx [ebp+arg_0] +
mov ecx [edx+10h] +
shr edi 11h +
mov edi [ecx+edi*4] +
push 0  +
mov [ebp+var_4] edi +
mov edx [edi] +
push eax  +
push edx  +
call ds:ReleaseSemaphore  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
lea eax [ecx-3] +
and eax 0FFFFFFF7h +
mov [ebp+var_10] eax +
jz loc_1008509  +
add ecx 0FFFFFFFCh +
test ecx 0FFFFFFF7h +
jnz loc_1008798  +
cmp [esi+0Ch] edi +
mov [ebp+var_C] edi +
jl loc_1008590  +
call ds:GetCurrentThreadId  +
mov ecx [ebx+8] +
mov [ebp+var_C] eax +
cmp ecx eax +
jnz loc_1008590  +
mov edi [ebp+arg_14] +
mov eax [ebx] +
mov ebx [ebx+4] +
mov [ebp+var_18] ebx +
mov [ebp+var_24] eax +
mov [ebp+var_20] ebx +
test eax 7FFFh +
jz loc_1008798  +
dec eax  +
mov [ebp+var_1C] eax +
test edi edi +
jnz loc_1008552  +
and ebx 0FFFF7FFFh +
mov [ebp+var_18] ebx +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1008570  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1008573  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_100857F  +
mov ebx [ebp+arg_4] +
jmp loc_1008528  +
mov eax [ebp+arg_4] +
inc dword ptr [eax+0Ch]  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov edi [ebx] +
mov ebx [ebx+4] +
mov [ebp+var_18] ebx +
mov [ebp+var_24] edi +
mov [ebp+var_20] ebx +
test edi 7FFFh +
jz loc_1008768  +
mov ecx ebx +
lea esp [esp+0] +
test edi 8000h +
jnz loc_10087A6  +
test edi 0FFFE0000h +
jz loc_10085CE  +
cmp [ebp+var_10] 0 +
jz loc_10087E4  +
dec edi  +
test edi 17FFFh +
jnz loc_1008679  +
or edi 10000h +
and ecx 0FFFF7FFFh +
cmp [ebp+arg_14] 0 +
mov [ebp+var_1C] edi +
mov [ebp+var_18] ecx +
jz loc_10085FC  +
or ecx 8000h +
mov [ebp+var_18] ecx +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_100861A  +
cmpxchg8b qword ptr [esi]  +
jmp loc_100861D  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_100874B  +
cmp [ebp+var_4] 0 +
jz loc_1008658  +
mov ecx [ebp+arg_0] +
mov [ebp+arg_14] ecx +
mov esi [ebp+arg_14] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1008650  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1008658  +
jmp loc_1008645  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1008650  +
mov edx [ebp+arg_0] +
cmp dword ptr [edx+0Ch] 0 +
jl loc_1007F91  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_C] +
pop edi  +
pop esi  +
mov [eax+8] ecx +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
test byte ptr [ebp+arg_8] 8 +
jnz loc_1008B2F  +
mov dl byte_100C02C +
test dl dl +
jle loc_100869D  +
mov eax ecx +
and eax 8000h +
or eax [ebp+arg_18] +
jz loc_1008B2F  +
test ecx 0FFFE0000h +
jnz loc_1008710  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1008705  +
mov ecx [ebp+arg_0] +
mov [ebp+var_14] ecx +
mov esi [ebp+var_14] +
mov edx [esi+4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_10086D5  +
test eax eax +
lea ecx [edx+1] +
jz loc_10086E4  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jz loc_10086E4  +
jmp loc_10086C3  +
test eax eax +
lea ecx [edx+1] +
jz loc_10086E4  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jnz loc_10086D5  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1008702  +
mov edx [ebp+arg_0] +
push edx  +
call sub_1007590  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1008076  +
mov ecx [ebp+var_18] +
mov eax [eax+8] +
shl eax 11h +
add ecx eax +
mov [ebp+var_18] ecx +
or edi 8000h +
add edi 20000h +
mov [ebp+var_1C] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_100873D  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1008740  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1008822  +
mov eax [ebp+arg_4] +
mov edi [eax] +
mov ecx [eax+4] +
mov [ebp+var_18] ecx +
mov [ebp+var_24] edi +
mov [ebp+var_20] ecx +
test edi 7FFFh +
jnz loc_10085B0  +
cmp [ebp+var_4] 0 +
jz loc_1008798  +
mov ecx [ebp+arg_0] +
mov [ebp+arg_0] ecx +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1008790  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1008798  +
jmp loc_1008785  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1008790  +
pop edi  +
pop esi  +
mov eax 57h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
cmp [ebp+var_4] 0 +
jz loc_10087D6  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_10087CE  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_10087D6  +
jmp loc_10087C3  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10087CE  +
pop edi  +
pop esi  +
mov eax 0E0000002h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
cmp [ebp+var_4] 0 +
jz loc_1008814  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_100880C  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1008814  +
jmp loc_1008801  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_100880C  +
pop edi  +
pop esi  +
mov eax 0E0000003h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov eax [ebp+var_4] +
mov edx [ebp+var_18] +
test eax eax +
jnz loc_100883F  +
mov ecx [ebp+arg_0] +
mov ecx [ecx+10h] +
mov eax edx +
shr eax 11h +
mov eax [ecx+eax*4] +
mov [ebp+var_4] eax +
jmp loc_100887C  +
mov ecx edx +
shr ecx 11h +
cmp [eax+8] ecx +
jz loc_100887C  +
mov edi [ebp+arg_0] +
mov [ebp+arg_8] edi +
mov esi [ebp+arg_8] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_100886B  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1008873  +
jmp loc_1008860  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_100886B  +
mov eax [edi+10h] +
mov ecx [eax+ecx*4] +
mov [ebp+var_4] ecx +
mov al byte_100C02C +
test al al +
jle loc_1008975  +
test edx 8000h +
jz loc_1008975  +
mov [ebp+arg_8] 3E8h +
lea esp [esp+0] +
pause   +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov edi [esi+4] +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
test eax 17FFFh +
jnz loc_1008926  +
or eax 10000h +
sub eax 20000h +
and eax 0FFFF7FFFh +
and edi 0FFFF7FFFh +
cmp [ebp+arg_14] 0 +
mov [ebp+var_1C] eax +
mov [ebp+var_18] edi +
jz loc_10088E1  +
or edi 8000h +
mov [ebp+var_18] edi +
mov ecx edi +
and eax 0FFFE0000h +
and ecx 7FFFh +
or eax ecx +
jnz loc_10088FB  +
and edi 1FFFFh +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1008919  +
cmpxchg8b qword ptr [esi]  +
jmp loc_100891C  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_100893A  +
mov esi [ebp+arg_4] +
sub [ebp+arg_8] 1 +
jz loc_1008978  +
test edi 8000h +
jnz loc_10088A0  +
jmp loc_1008978  +
test edi 0FFFE0000h +
jnz loc_1007F7F  +
mov edx [ebp+arg_0] +
mov [ebp+arg_14] edx +
mov esi [ebp+arg_14] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1008968  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1008970  +
jmp loc_100895D  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1008968  +
jmp loc_1007F7F  +
mov esi [ebp+arg_4] +
mov ebx [ebp+bAlertable] +
jmp loc_1008980  +
mov eax [ebp+arg_10] +
test eax eax +
jnz loc_100899A  +
mov eax [ebp+var_4] +
mov ecx [eax+4] +
mov eax [ebp+arg_18] +
push ecx  +
mov ecx ebx +
call sub_1007060  +
jmp loc_10089AC  +
mov edx [ebp+arg_18] +
mov ecx [ebp+var_4] +
push ebx  +
push edx  +
mov edx [ecx+4] +
mov ecx [ebp+arg_C] +
push edx  +
push ecx  +
call eax  +
mov [ebp+arg_8] eax +
test eax eax +
jnz loc_1008A54  +
mov eax [esi] +
mov edi [esi+4] +
test eax 17FFFh +
jnz loc_1008980  +
mov [ebp+var_24] eax +
or eax 10000h +
sub eax 20000h +
mov [ebp+var_20] edi +
and eax 0FFFF7FFFh +
and edi 0FFFF7FFFh +
cmp [ebp+arg_14] 0 +
mov [ebp+var_1C] eax +
mov [ebp+var_18] edi +
jz loc_10089F3  +
or edi 8000h +
mov [ebp+var_18] edi +
mov edx edi +
and eax 0FFFE0000h +
and edx 7FFFh +
or eax edx +
jnz loc_1008A0D  +
and edi 1FFFFh +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1008A2B  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1008A2E  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1008AF4  +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
mov edi [ecx+4] +
test eax 17FFFh +
jz loc_10089C3  +
jmp loc_1008975  +
mov esi [ebp+arg_4] +
mov edi [esi] +
mov esi [esi+4] +
mov [ebp+var_24] edi +
add edi 0FFFE0000h +
and edi 0FFFF7FFFh +
inc edi  +
mov eax edi +
mov ecx esi +
and eax 0FFFE0000h +
and ecx 7FFFh +
or eax ecx +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
mov [ebp+var_1C] edi +
jnz loc_1008A8E  +
and esi 1FFFFh +
mov [ebp+var_18] esi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100C02C 0 +
mov esi [ebp+var_8] +
jle loc_1008AAC  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1008AAF  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1008A51  +
mov ecx [ebp+var_18] +
test ecx 0FFFE0000h +
jnz loc_1008353  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1008AE7  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1008AEF  +
jmp loc_1008ADC  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1008AE7  +
jmp loc_1008353  +
test edi 0FFFE0000h +
jnz loc_1007F7F  +
mov edx [ebp+arg_0] +
mov [ebp+arg_14] edx +
mov esi [ebp+arg_14] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1008B22  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1008B2A  +
jmp loc_1008B17  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1008B22  +
jmp loc_1007F7F  +
cmp [ebp+var_4] 0 +
jz loc_1008B5F  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100C02C 0 +
mov eax [esi] +
jl loc_1008B57  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_1008B5F  +
jmp loc_1008B4C  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1008B57  +
pop edi  +
pop esi  +
mov eax 102h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
***
mov eax [esp+bAlertable] +
mov ecx [esp+arg_10] +
mov edx [esp+arg_C] +
push eax  +
mov eax [esp+4+arg_8] +
push ecx  +
mov ecx [esp+8+arg_4] +
push edx  +
mov edx [esp+0Ch+arg_0] +
push 0  +
push 0  +
push eax  +
push ecx  +
push edx  +
call sub_10078C0  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1008DBF  +
mov eax [esi+8] +
cmp eax 4C66506Ch +
jnz loc_1008DBF  +
mov ebx [ebp+arg_4] +
mov [ebp+var_4] ebx +
test ebx ebx +
jz loc_1008DBF  +
test bl 3 +
jnz loc_1008DBF  +
mov cl byte_100C02C +
cmp cl 2 +
jnz loc_1008BFA  +
call sub_1006F40  +
cmp [ebp+arg_8] 0 +
push edi  +
jnz loc_1008C91  +
mov edi [ebx] +
mov ebx [ebx+4] +
mov [ebp+var_8] ebx +
mov [ebp+var_14] edi +
mov [ebp+var_10] ebx +
test edi 7FFFh +
jz loc_1008D0B  +
dec edi  +
mov [ebp+var_C] edi +
mov eax [ebp+var_14] +
mov edx [ebp+var_10] +
mov ebx [ebp+var_C] +
mov ecx [ebp+var_8] +
cmp byte_100C02C 0 +
mov esi [ebp+var_4] +
jle loc_1008C41  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1008C44  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1008C50  +
mov ebx [ebp+arg_4] +
jmp loc_1008C05  +
test edi 17FFFh +
jnz loc_1008CAF  +
and edi 0FFFE0000h +
jz loc_1008CAF  +
mov edx [ebp+arg_0] +
mov eax [ebp+var_8] +
mov ecx [edx+10h] +
shr eax 11h +
mov eax [ecx+eax*4] +
mov edx [eax+4] +
push edx  +
call ds:SetEvent  +
cmp [ebp+arg_C] 0 +
jz loc_1008CAF  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
and ecx 0FFFE0000h +
cmp ecx edi +
jmp loc_1008DA6  +
cmp dword ptr [esi+0Ch] 0 +
jl loc_1008CC1  +
call ds:GetCurrentThreadId  +
mov edx [ebx+8] +
cmp edx eax +
jnz loc_1008D0B  +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_1008CBA  +
dec eax  +
mov [ebx+0Ch] eax +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov dword ptr [ebx+8] 0 +
mov eax [ebx] +
mov edi [ebx+4] +
mov [ebp+var_8] edi +
mov [ebp+var_14] eax +
mov [ebp+var_10] edi +
test eax 10000h +
jz loc_1008D0B  +
and eax 0FFFEFFFFh +
mov [ebp+var_C] eax +
mov eax [ebp+var_14] +
mov edx [ebp+var_10] +
mov ebx [ebp+var_C] +
mov ecx [ebp+var_8] +
cmp byte_100C02C 0 +
mov esi [ebp+var_4] +
jle loc_1008CFC  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1008CFF  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1008D19  +
mov ebx [ebp+arg_4] +
jmp loc_1008CC1  +
pop edi  +
pop esi  +
mov eax 0E0000001h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov ebx [ebp+var_C] +
mov esi ebx +
and esi 0FFFE0000h +
jz loc_1008D5D  +
test ebx 7FFFh +
jnz loc_1008CAF  +
mov eax [ebp+arg_0] +
mov ecx [eax+10h] +
shr edi 11h +
mov edi [ecx+edi*4] +
mov edx [edi+4] +
push edx  +
call ds:SetEvent  +
cmp [ebp+arg_C] 0 +
jz loc_1008CAF  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
and ecx 0FFFE0000h +
cmp ecx esi +
jmp loc_1008DA6  +
mov esi edi +
and esi 7FFFh +
jz loc_1008CAF  +
mov edx [ebp+arg_0] +
mov eax [edx+10h] +
shr edi 11h +
mov edi [eax+edi*4] +
mov ecx [edi] +
push 0  +
push esi  +
push ecx  +
call ds:ReleaseSemaphore  +
cmp [ebp+arg_C] 0 +
jz loc_1008CAF  +
test ebx 7FFFh +
jnz loc_1008CAF  +
mov edx [ebp+arg_4] +
mov eax [edx+4] +
and eax 7FFFh +
cmp eax esi +
jnz loc_1008CAF  +
push 1  +
call ds:Sleep  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
pop esi  +
mov eax 57h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push offset dword_1001A98  +
mov eax [ebp+0Ch] +
push eax  +
call sub_1008F30  +
test eax eax +
jz loc_1008E47  +
mov ecx [ebp+10h] +
mov edx [ebp+8] +
mov [ecx] edx +
jmp loc_1008F12  +
push offset dword_1001DE8  +
mov eax [ebp+0Ch] +
push eax  +
call sub_1008F30  +
test eax eax +
jz loc_1008E66  +
mov ecx [ebp+10h] +
mov edx [ebp+8] +
mov [ecx] edx +
jmp loc_1008F12  +
push offset dword_1001DC8  +
mov eax [ebp+0Ch] +
push eax  +
call sub_1008F30  +
test eax eax +
jz loc_1008E9A  +
cmp dword ptr [ebp+8] 0 +
jz loc_1008E89  +
mov ecx [ebp+8] +
add ecx 4 +
mov [ebp-4] ecx +
jmp loc_1008E90  +
mov dword ptr [ebp-4] 0 +
mov edx [ebp+10h] +
mov eax [ebp-4] +
mov [edx] eax +
jmp loc_1008F12  +
push offset dword_1001E78  +
mov ecx [ebp+0Ch] +
push ecx  +
call sub_1008F30  +
test eax eax +
jz loc_1008ECE  +
cmp dword ptr [ebp+8] 0 +
jz loc_1008EBD  +
mov edx [ebp+8] +
add edx 8 +
mov [ebp-8] edx +
jmp loc_1008EC4  +
mov dword ptr [ebp-8] 0 +
mov eax [ebp+10h] +
mov ecx [ebp-8] +
mov [eax] ecx +
jmp loc_1008F12  +
push offset dword_1001E58  +
mov edx [ebp+0Ch] +
push edx  +
call sub_1008F30  +
test eax eax +
jz loc_1008F02  +
cmp dword ptr [ebp+8] 0 +
jz loc_1008EF1  +
mov eax [ebp+8] +
add eax 0Ch +
mov [ebp-0Ch] eax +
jmp loc_1008EF8  +
mov dword ptr [ebp-0Ch] 0 +
mov ecx [ebp+10h] +
mov edx [ebp-0Ch] +
mov [ecx] edx +
jmp loc_1008F12  +
mov eax [ebp+10h] +
mov dword ptr [eax] 0 +
mov eax 80004002h +
jmp loc_1008F22  +
mov ecx [ebp+8] +
mov edx [ecx] +
mov eax [ebp+8] +
push eax  +
mov ecx [edx+4] +
call ecx  +
xor eax eax +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push eax  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_1008F50  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10h  +
mov eax [ebp+arg_4] +
push eax  +
mov ecx [ebp+arg_0] +
push ecx  +
call memcmp  +
add esp 0Ch +
neg eax  +
sbb eax eax +
add eax 1 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 2Ch +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+8] +
add eax 2Ch +
push eax  +
call ds:InterlockedDecrement  +
mov [ebp-4] eax +
mov eax [ebp-4] +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 88h +
mov dword ptr [ebp-30h] 0 +
mov dword ptr [ebp-34h] 0 +
mov eax [ebp+8] +
add eax 30h +
push eax  +
lea ecx [ebp-20h] +
call sub_1009EA0  +
lea ecx [ebp-28h] +
call sub_1009EF0  +
lea ecx [ebp-24h] +
call sub_1009EF0  +
lea ecx [ebp-4] +
call sub_1009EF0  +
mov dword ptr [ebp-2Ch] 0 +
lea ecx [ebp-18h] +
call sub_100A040  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1009033  +
mov ecx [ebp+0Ch] +
push ecx  +
call ds:SysStringLen  +
test eax eax +
jnz loc_100903F  +
mov dword ptr [ebp-30h] 80070057h +
jmp loc_100952A  +
cmp dword ptr [ebp+1Ch] 0 +
jz loc_100906C  +
mov edx [ebp+8] +
mov eax [edx+54h] +
push eax  +
call ds:SysFreeString  +
mov ecx [ebp+8] +
mov dword ptr [ecx+54h] 0 +
mov edx [ebp+1Ch] +
push edx  +
call ds:SysAllocString  +
mov ecx [ebp+8] +
mov [ecx+54h] eax +
mov edx [ebp+8] +
mov al [ebp+14h] +
mov [edx+50h] al +
mov ecx [ebp+8] +
cmp dword ptr [ecx+1Ch] 0 +
jz loc_100909C  +
mov edx [ebp+8] +
mov eax [edx+1Ch] +
mov ecx [ebp+8] +
mov edx [ecx+1Ch] +
mov eax [eax] +
push edx  +
mov ecx [eax+8] +
call ecx  +
mov edx [ebp+8] +
mov dword ptr [edx+1Ch] 0 +
push 17h  +
push 0  +
push offset dword_1001FE8  +
mov ecx [ebp+8] +
add ecx 1Ch +
call sub_1009E70  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
jge loc_10090BE  +
jmp loc_100952A  +
mov ecx [ebp+8] +
add ecx 1Ch +
call sub_1009F60  +
mov [ebp-50h] eax +
lea ecx [ebp-28h] +
call sub_1009F40  +
push eax  +
mov eax [ebp-50h] +
push eax  +
mov ecx [ebp-50h] +
mov edx [ecx] +
mov eax [edx+30h] +
call eax  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
jge loc_10090F1  +
jmp loc_100952A  +
movzx ecx byte ptr [ebp+18h] +
test ecx ecx +
jz loc_1009108  +
push offset aCategoryidsCon  +
lea ecx [ebp-18h] +
call sub_100A0E0  +
jmp loc_1009115  +
push offset aUpdateid  +
lea ecx [ebp-18h] +
call sub_100A0E0  +
mov edx [ebp+0Ch] +
push edx  +
lea ecx [ebp-18h] +
call sub_100A140  +
push offset asc_1001A30  +
lea ecx [ebp-18h] +
call sub_100A140  +
push 0  +
lea ecx [ebp-18h] +
call sub_100A090  +
push eax  +
call ds:SysAllocString  +
mov [ebp-2Ch] eax +
cmp dword ptr [ebp-2Ch] 0 +
jz loc_1009156  +
mov eax [ebp-2Ch] +
push eax  +
call ds:SysStringLen  +
test eax eax +
jnz loc_1009168  +
mov dword ptr [ebp-30h] 8007000Eh +
cmp dword ptr [ebp-30h] 0 +
jge loc_1009168  +
jmp loc_100952A  +
lea ecx [ebp-28h] +
call sub_1009F60  +
mov [ebp-54h] eax +
lea ecx [ebp-24h] +
call sub_1009F40  +
push eax  +
mov ecx [ebp-2Ch] +
push ecx  +
mov edx [ebp-54h] +
push edx  +
mov eax [ebp-54h] +
mov ecx [eax] +
mov edx [ecx+4Ch] +
call edx  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
jge loc_100919C  +
jmp loc_100952A  +
lea ecx [ebp-24h] +
call sub_1009F60  +
mov [ebp-58h] eax +
mov ecx [ebp+8] +
add ecx 28h +
call sub_1009F40  +
push eax  +
mov eax [ebp-58h] +
push eax  +
mov ecx [ebp-58h] +
mov edx [ecx] +
mov eax [edx+24h] +
call eax  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
jge loc_10091CF  +
jmp loc_100952A  +
mov ecx [ebp+8] +
add ecx 1Ch +
call sub_1009F60  +
mov [ebp-5Ch] eax +
mov ecx [ebp+8] +
add ecx 18h +
call sub_1009F40  +
push eax  +
mov ecx [ebp-5Ch] +
push ecx  +
mov edx [ebp-5Ch] +
mov eax [edx] +
mov ecx [eax+34h] +
call ecx  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
jge loc_1009205  +
jmp loc_100952A  +
mov ecx [ebp+8] +
add ecx 1Ch +
call sub_1009F60  +
mov [ebp-60h] eax +
mov ecx [ebp+8] +
add ecx 20h +
call sub_1009F40  +
push eax  +
mov edx [ebp-60h] +
push edx  +
mov eax [ebp-60h] +
mov ecx [eax] +
mov edx [ecx+38h] +
call edx  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
jge loc_100923B  +
jmp loc_100952A  +
mov ecx [ebp+8] +
add ecx 18h +
call sub_1009F60  +
mov [ebp-64h] eax +
mov ecx [ebp+8] +
add ecx 28h +
call sub_1009F60  +
push eax  +
mov eax [ebp-64h] +
push eax  +
mov ecx [ebp-64h] +
mov edx [ecx] +
mov eax [edx+38h] +
call eax  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
jge loc_1009271  +
jmp loc_100952A  +
cmp dword ptr [ebp+10h] 0 +
jnz loc_1009445  +
lea ecx [ebp-38h] +
call sub_1009EF0  +
mov ecx [ebp+8] +
add ecx 18h +
call sub_1009F60  +
mov [ebp-68h] eax +
lea ecx [ebp-38h] +
call sub_1009F40  +
push eax  +
mov ecx [ebp-68h] +
push ecx  +
mov edx [ebp-68h] +
mov eax [edx] +
mov ecx [eax+40h] +
call ecx  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
jge loc_10092BE  +
lea ecx [ebp-38h] +
call sub_1009F10  +
jmp loc_100952A  +
lea ecx [ebp-38h] +
call sub_1009F60  +
mov [ebp-6Ch] eax +
lea edx [ebp-34h] +
push edx  +
mov eax [ebp-6Ch] +
push eax  +
mov ecx [ebp-6Ch] +
mov edx [ecx] +
mov eax [edx+1Ch] +
call eax  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
jge loc_10092F1  +
lea ecx [ebp-38h] +
call sub_1009F10  +
jmp loc_100952A  +
mov ecx [ebp-34h] +
mov [ebp-30h] ecx +
cmp dword ptr [ebp-30h] 0 +
jge loc_100930A  +
lea ecx [ebp-38h] +
call sub_1009F10  +
jmp loc_100952A  +
mov ecx [ebp+8] +
add ecx 20h +
call sub_1009F60  +
mov [ebp-70h] eax +
mov ecx [ebp+8] +
add ecx 28h +
call sub_1009F60  +
push eax  +
mov edx [ebp-70h] +
push edx  +
mov eax [ebp-70h] +
mov ecx [eax] +
mov edx [ecx+40h] +
call edx  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
jge loc_1009348  +
lea ecx [ebp-38h] +
call sub_1009F10  +
jmp loc_100952A  +
movzx eax byte ptr [ebp+14h] +
test eax eax +
jz loc_1009394  +
mov ecx [ebp+8] +
add ecx 20h +
call sub_1009F60  +
mov [ebp-74h] eax +
lea ecx [ebp-4] +
call sub_1009F40  +
push eax  +
mov ecx [ebp+8] +
mov edx [ecx+54h] +
push edx  +
mov eax [ebp-74h] +
push eax  +
mov ecx [ebp-74h] +
mov edx [ecx] +
mov eax [edx+58h] +
call eax  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
jge loc_1009392  +
lea ecx [ebp-38h] +
call sub_1009F10  +
jmp loc_100952A  +
jmp loc_10093CF  +
mov ecx [ebp+8] +
add ecx 20h +
call sub_1009F60  +
mov [ebp-78h] eax +
lea ecx [ebp-4] +
call sub_1009F40  +
push eax  +
mov ecx [ebp-78h] +
push ecx  +
mov edx [ebp-78h] +
mov eax [edx] +
mov ecx [eax+54h] +
call ecx  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
jge loc_10093CF  +
lea ecx [ebp-38h] +
call sub_1009F10  +
jmp loc_100952A  +
lea ecx [ebp-4] +
call sub_1009F60  +
mov [ebp-7Ch] eax +
lea edx [ebp-34h] +
push edx  +
mov eax [ebp-7Ch] +
push eax  +
mov ecx [ebp-7Ch] +
mov edx [ecx] +
mov eax [edx+1Ch] +
call eax  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
jge loc_1009402  +
lea ecx [ebp-38h] +
call sub_1009F10  +
jmp loc_100952A  +
lea ecx [ebp-4] +
call sub_1009F60  +
mov [ebp-80h] eax +
mov ecx [ebp+8] +
add ecx 58h +
push ecx  +
mov edx [ebp-80h] +
push edx  +
mov eax [ebp-80h] +
mov ecx [eax] +
mov edx [ecx+20h] +
call edx  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
jge loc_1009438  +
lea ecx [ebp-38h] +
call sub_1009F10  +
jmp loc_100952A  +
lea ecx [ebp-38h] +
call sub_1009F10  +
jmp loc_100952A  +
mov eax [ebp+8] +
cmp dword ptr [eax+10h] 0 +
jz loc_100946C  +
mov ecx [ebp+8] +
mov edx [ecx+10h] +
mov eax [ebp+8] +
mov ecx [eax+10h] +
mov edx [edx] +
push ecx  +
mov eax [edx+8] +
call eax  +
mov ecx [ebp+8] +
mov dword ptr [ecx+10h] 0 +
mov edx [ebp+10h] +
push edx  +
mov ecx [ebp+8] +
add ecx 10h +
call sub_1009DF0  +
mov eax 0Dh +
mov [ebp-48h] ax +
mov ecx [ebp+8] +
mov [ebp-40h] ecx +
mov edx [ebp+8] +
cmp dword ptr [edx+14h] 0 +
jz loc_10094B1  +
mov eax [ebp+8] +
mov ecx [eax+14h] +
mov edx [ebp+8] +
mov eax [edx+14h] +
mov ecx [ecx] +
push eax  +
mov edx [ecx+8] +
call edx  +
mov eax [ebp+8] +
mov dword ptr [eax+14h] 0 +
cmp dword ptr [ebp+8] 0 +
jz loc_10094C5  +
mov ecx [ebp+8] +
add ecx 4 +
mov [ebp-84h] ecx +
jmp loc_10094CF  +
mov dword ptr [ebp-84h] 0 +
mov ecx [ebp+8] +
add ecx 18h +
call sub_1009F60  +
mov [ebp-88h] eax +
mov ecx [ebp+8] +
add ecx 14h +
call sub_1009F40  +
push eax  +
sub esp 10h +
mov edx esp +
mov eax [ebp-48h] +
mov [edx] eax +
mov ecx [ebp-44h] +
mov [edx+4] ecx +
mov eax [ebp-40h] +
mov [edx+8] eax +
mov ecx [ebp-3Ch] +
mov [edx+0Ch] ecx +
mov edx [ebp-84h] +
push edx  +
mov eax [ebp+8] +
push eax  +
mov ecx [ebp-88h] +
push ecx  +
mov edx [ebp-88h] +
mov eax [edx] +
mov ecx [eax+3Ch] +
call ecx  +
mov [ebp-30h] eax +
mov edx [ebp-2Ch] +
push edx  +
call ds:SysFreeString  +
mov dword ptr [ebp-2Ch] 0 +
mov eax [ebp-30h] +
mov [ebp-4Ch] eax +
lea ecx [ebp-18h] +
call sub_100A060  +
lea ecx [ebp-4] +
call sub_1009F10  +
lea ecx [ebp-24h] +
call sub_1009F10  +
lea ecx [ebp-28h] +
call sub_1009F10  +
lea ecx [ebp-20h] +
call sub_1009ED0  +
mov eax [ebp-4Ch] +
mov esp ebp +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
mov eax [ebp+8] +
add eax 2Ch +
push eax  +
lea ecx [ebp-0Ch] +
call sub_1009EA0  +
mov dword ptr [ebp-28h] 0 +
mov dword ptr [ebp-2Ch] 0 +
lea ecx [ebp-4] +
call sub_1009EF0  +
lea ecx [ebp-24h] +
call sub_1009EF0  +
cmp dword ptr [ebp+10h] 0 +
jz loc_10095E5  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_10095E5  +
mov ecx [ebp+8] +
cmp dword ptr [ecx+0Ch] 0 +
jz loc_10095E5  +
mov edx [ebp+8] +
cmp dword ptr [edx+14h] 0 +
jz loc_10095E5  +
mov eax [ebp+8] +
cmp dword ptr [eax+1Ch] 0 +
jz loc_10095E5  +
mov ecx [ebp+8] +
cmp dword ptr [ecx+24h] 0 +
jnz loc_10095F1  +
mov dword ptr [ebp-28h] 80070057h +
jmp loc_100981F  +
mov ecx [ebp+8] +
add ecx 14h +
call sub_1009F60  +
mov [ebp-34h] eax +
lea ecx [ebp-24h] +
call sub_1009F40  +
push eax  +
mov ecx [ebp+8] +
add ecx 10h +
call sub_1009F60  +
push eax  +
mov edx [ebp-34h] +
push edx  +
mov eax [ebp-34h] +
mov ecx [eax] +
mov edx [ecx+44h] +
call edx  +
mov [ebp-28h] eax +
cmp dword ptr [ebp-28h] 0 +
jge loc_1009630  +
jmp loc_100981F  +
lea ecx [ebp-24h] +
call sub_1009F60  +
mov [ebp-38h] eax +
lea eax [ebp-2Ch] +
push eax  +
mov ecx [ebp-38h] +
push ecx  +
mov edx [ebp-38h] +
mov eax [edx] +
mov ecx [eax+1Ch] +
call ecx  +
mov [ebp-28h] eax +
cmp dword ptr [ebp-28h] 0 +
jge loc_100965B  +
jmp loc_100981F  +
mov edx [ebp-2Ch] +
mov [ebp-28h] edx +
cmp dword ptr [ebp-28h] 0 +
jge loc_100966C  +
jmp loc_100981F  +
mov ecx [ebp+8] +
add ecx 1Ch +
call sub_1009F60  +
mov [ebp-3Ch] eax +
mov ecx [ebp+8] +
add ecx 24h +
call sub_1009F60  +
push eax  +
mov eax [ebp-3Ch] +
push eax  +
mov ecx [ebp-3Ch] +
mov edx [ecx] +
mov eax [edx+40h] +
call eax  +
mov [ebp-28h] eax +
cmp dword ptr [ebp-28h] 0 +
jge loc_10096A2  +
jmp loc_100981F  +
mov ecx [ebp+8] +
movzx edx byte ptr [ecx+4Ch] +
test edx edx +
jz loc_100974C  +
mov ecx [ebp+8] +
add ecx 1Ch +
call sub_1009F60  +
mov [ebp-40h] eax +
lea ecx [ebp-4] +
call sub_1009F40  +
push eax  +
mov eax [ebp+8] +
mov ecx [eax+50h] +
push ecx  +
mov edx [ebp-40h] +
push edx  +
mov eax [ebp-40h] +
mov ecx [eax] +
mov edx [ecx+58h] +
call edx  +
mov [ebp-28h] eax +
cmp dword ptr [ebp-28h] 0 +
jge loc_10096EB  +
jmp loc_100981F  +
lea ecx [ebp-4] +
call sub_1009F60  +
mov [ebp-44h] eax +
mov eax [ebp+8] +
add eax 54h +
push eax  +
mov ecx [ebp-44h] +
push ecx  +
mov edx [ebp-44h] +
mov eax [edx] +
mov ecx [eax+20h] +
call ecx  +
mov [ebp-28h] eax +
cmp dword ptr [ebp-28h] 0 +
jge loc_1009719  +
jmp loc_100981F  +
mov ecx [ebp+8] +
add ecx 0Ch +
call sub_1009F60  +
mov [ebp-48h] eax +
mov edx [ebp-28h] +
push edx  +
mov eax [ebp-48h] +
push eax  +
mov ecx [ebp-48h] +
mov edx [ecx] +
mov eax [edx+10h] +
call eax  +
mov [ebp-28h] eax +
cmp dword ptr [ebp-28h] 0 +
jge loc_1009747  +
jmp loc_100981F  +
jmp loc_100981F  +
mov ecx 0Dh +
mov [ebp-20h] cx +
mov edx [ebp+8] +
sub edx 4 +
jz loc_1009768  +
mov eax [ebp+8] +
add eax 4 +
mov [ebp-4Ch] eax +
jmp loc_100976F  +
mov dword ptr [ebp-4Ch] 0 +
mov ecx [ebp-4Ch] +
mov [ebp-18h] ecx +
mov edx [ebp+8] +
cmp dword ptr [edx+20h] 0 +
jz loc_100979C  +
mov eax [ebp+8] +
mov ecx [eax+20h] +
mov edx [ebp+8] +
mov eax [edx+20h] +
mov ecx [ecx] +
push eax  +
mov edx [ecx+8] +
call edx  +
mov eax [ebp+8] +
mov dword ptr [eax+20h] 0 +
mov ecx [ebp+8] +
sub ecx 4 +
jz loc_10097AF  +
mov edx [ebp+8] +
add edx 8 +
mov [ebp-50h] edx +
jmp loc_10097B6  +
mov dword ptr [ebp-50h] 0 +
mov eax [ebp+8] +
sub eax 4 +
jz loc_10097C9  +
mov ecx [ebp+8] +
add ecx 4 +
mov [ebp-54h] ecx +
jmp loc_10097D0  +
mov dword ptr [ebp-54h] 0 +
mov ecx [ebp+8] +
add ecx 1Ch +
call sub_1009F60  +
mov [ebp-58h] eax +
mov ecx [ebp+8] +
add ecx 20h +
call sub_1009F40  +
push eax  +
sub esp 10h +
mov edx esp +
mov eax [ebp-20h] +
mov [edx] eax +
mov ecx [ebp-1Ch] +
mov [edx+4] ecx +
mov eax [ebp-18h] +
mov [edx+8] eax +
mov ecx [ebp-14h] +
mov [edx+0Ch] ecx +
mov edx [ebp-50h] +
push edx  +
mov eax [ebp-54h] +
push eax  +
mov ecx [ebp-58h] +
push ecx  +
mov edx [ebp-58h] +
mov eax [edx] +
mov ecx [eax+44h] +
call ecx  +
mov [ebp-28h] eax +
cmp dword ptr [ebp-28h] 0 +
jge loc_1009851  +
mov edx [ebp+8] +
cmp dword ptr [edx+0Ch] 0 +
jz loc_1009851  +
mov ecx [ebp+8] +
add ecx 0Ch +
call sub_1009F60  +
mov [ebp-5Ch] eax +
mov eax [ebp-28h] +
push eax  +
mov ecx [ebp-5Ch] +
push ecx  +
mov edx [ebp-5Ch] +
mov eax [edx] +
mov ecx [eax+10h] +
call ecx  +
mov [ebp-28h] eax +
mov edx [ebp-28h] +
mov [ebp-30h] edx +
lea ecx [ebp-24h] +
call sub_1009F10  +
lea ecx [ebp-4] +
call sub_1009F10  +
lea ecx [ebp-0Ch] +
call sub_1009ED0  +
mov eax [ebp-30h] +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov dword ptr [ebp-18h] 0 +
mov eax [ebp+8] +
add eax 30h +
push eax  +
lea ecx [ebp-0Ch] +
call sub_1009EA0  +
lea ecx [ebp-4] +
call sub_1009EF0  +
mov dword ptr [ebp-14h] 1 +
mov dword ptr [ebp-10h] 0 +
cmp dword ptr [ebp+10h] 0 +
jz loc_10098C9  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_10098C9  +
mov ecx [ebp+8] +
cmp dword ptr [ecx+10h] 0 +
jnz loc_10098D5  +
mov dword ptr [ebp-18h] 80070057h +
jmp loc_1009958  +
lea ecx [ebp-4] +
call sub_1009F40  +
push eax  +
mov edx [ebp+10h] +
mov eax [edx] +
mov ecx [ebp+10h] +
push ecx  +
mov edx [eax+1Ch] +
call edx  +
mov [ebp-18h] eax +
cmp dword ptr [ebp-18h] 0 +
jge loc_10098F7  +
jmp loc_1009958  +
lea ecx [ebp-4] +
call sub_1009F60  +
mov [ebp-20h] eax +
lea eax [ebp-10h] +
push eax  +
mov ecx [ebp-20h] +
push ecx  +
mov edx [ebp-20h] +
mov eax [edx] +
mov ecx [eax+3Ch] +
call ecx  +
mov [ebp-18h] eax +
cmp dword ptr [ebp-18h] 0 +
jge loc_100991F  +
jmp loc_1009958  +
mov edx [ebp+8] +
movzx eax byte ptr [edx+50h] +
neg eax  +
sbb eax eax +
add eax 2 +
mov [ebp-14h] eax +
mov ecx [ebp+8] +
add ecx 10h +
call sub_1009F60  +
mov [ebp-24h] eax +
mov eax [ebp-10h] +
xor edx edx +
div  dword ptr [ebp-14h] +
push eax  +
mov ecx [ebp-24h] +
push ecx  +
mov edx [ebp-24h] +
mov eax [edx] +
mov ecx [eax+0Ch] +
call ecx  +
mov [ebp-18h] eax +
mov edx [ebp-18h] +
mov [ebp-1Ch] edx +
lea ecx [ebp-4] +
call sub_1009F10  +
lea ecx [ebp-0Ch] +
call sub_1009ED0  +
mov eax [ebp-1Ch] +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov dword ptr [ebp-0Ch] 0 +
mov eax [ebp+8] +
add eax 30h +
push eax  +
lea ecx [ebp-8] +
call sub_1009EA0  +
mov ecx [ebp+8] +
cmp dword ptr [ecx+14h] 0 +
jz loc_10099B0  +
mov edx [ebp+8] +
cmp dword ptr [edx+24h] 0 +
jnz loc_10099B9  +
mov dword ptr [ebp-0Ch] 1 +
jmp loc_10099FF  +
mov ecx [ebp+8] +
add ecx 14h +
call sub_1009F60  +
mov [ebp-14h] eax +
mov eax [ebp-14h] +
mov ecx [eax] +
mov edx [ebp-14h] +
push edx  +
mov eax [ecx+30h] +
call eax  +
mov [ebp-0Ch] eax +
cmp dword ptr [ebp-0Ch] 0 +
jge loc_10099E0  +
jmp loc_10099FF  +
mov ecx [ebp+8] +
add ecx 24h +
call sub_1009F60  +
mov [ebp-18h] eax +
mov ecx [ebp-18h] +
mov edx [ecx] +
mov eax [ebp-18h] +
push eax  +
mov ecx [edx+30h] +
call ecx  +
mov [ebp-0Ch] eax +
mov edx [ebp-0Ch] +
mov [ebp-10h] edx +
lea ecx [ebp-8] +
call sub_1009ED0  +
mov eax [ebp-10h] +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-14h] 0 +
mov eax [ebp+8] +
add eax 24h +
push eax  +
lea ecx [ebp-0Ch] +
call sub_1009EA0  +
lea ecx [ebp-4] +
call sub_1009EF0  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1009A6B  +
cmp dword ptr [ebp+10h] 0 +
jz loc_1009A6B  +
mov ecx [ebp+8] +
cmp dword ptr [ecx+4] 0 +
jz loc_1009A6B  +
mov edx [ebp+8] +
cmp dword ptr [edx+14h] 0 +
jnz loc_1009A77  +
mov dword ptr [ebp-10h] 80070057h +
jmp loc_1009B12  +
mov ecx [ebp+8] +
add ecx 14h +
call sub_1009F60  +
mov [ebp-1Ch] eax +
lea ecx [ebp-4] +
call sub_1009F40  +
push eax  +
mov ecx [ebp+8] +
add ecx 18h +
call sub_1009F60  +
push eax  +
mov eax [ebp-1Ch] +
push eax  +
mov ecx [ebp-1Ch] +
mov edx [ecx] +
mov eax [edx+4Ch] +
call eax  +
mov [ebp-10h] eax +
cmp dword ptr [ebp-10h] 0 +
jge loc_1009AB3  +
jmp loc_1009B12  +
lea ecx [ebp-4] +
call sub_1009F60  +
mov [ebp-20h] eax +
lea ecx [ebp-14h] +
push ecx  +
mov edx [ebp-20h] +
push edx  +
mov eax [ebp-20h] +
mov ecx [eax] +
mov edx [ecx+1Ch] +
call edx  +
mov [ebp-10h] eax +
cmp dword ptr [ebp-10h] 0 +
jge loc_1009ADB  +
jmp loc_1009B12  +
lea ecx [ebp-4] +
call sub_1009F60  +
mov [ebp-24h] eax +
mov eax [ebp+8] +
add eax 4Ch +
push eax  +
mov ecx [ebp-24h] +
push ecx  +
mov edx [ebp-24h] +
mov eax [edx] +
mov ecx [eax+20h] +
call ecx  +
mov [ebp-10h] eax +
cmp dword ptr [ebp-10h] 0 +
jge loc_1009B06  +
jmp loc_1009B12  +
cmp dword ptr [ebp-14h] 0 +
jge loc_1009B12  +
mov edx [ebp-14h] +
mov [ebp-10h] edx +
mov eax [ebp+8] +
cmp dword ptr [eax+4] 0 +
jz loc_1009B3E  +
mov ecx [ebp+8] +
add ecx 4 +
call sub_1009F60  +
mov [ebp-28h] eax +
mov ecx [ebp-10h] +
push ecx  +
mov edx [ebp-28h] +
push edx  +
mov eax [ebp-28h] +
mov ecx [eax] +
mov edx [ecx+10h] +
call edx  +
mov [ebp-10h] eax +
mov eax [ebp-10h] +
mov [ebp-18h] eax +
lea ecx [ebp-4] +
call sub_1009F10  +
lea ecx [ebp-0Ch] +
call sub_1009ED0  +
mov eax [ebp-18h] +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov dword ptr [ebp-14h] 0 +
mov eax [ebp+8] +
add eax 28h +
push eax  +
lea ecx [ebp-10h] +
call sub_1009EA0  +
lea ecx [ebp-4] +
call sub_1009EF0  +
mov dword ptr [ebp-8] 0 +
cmp dword ptr [ebp+10h] 0 +
jz loc_1009BB2  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1009BB2  +
mov ecx [ebp+8] +
cmp dword ptr [ecx+8] 0 +
jnz loc_1009BBB  +
mov dword ptr [ebp-14h] 80070057h +
jmp loc_1009C30  +
lea ecx [ebp-4] +
call sub_1009F40  +
push eax  +
mov edx [ebp+10h] +
mov eax [edx] +
mov ecx [ebp+10h] +
push ecx  +
mov edx [eax+1Ch] +
call edx  +
mov [ebp-14h] eax +
cmp dword ptr [ebp-14h] 0 +
jge loc_1009BDD  +
jmp loc_1009C30  +
lea ecx [ebp-4] +
call sub_1009F60  +
mov [ebp-1Ch] eax +
lea eax [ebp-8] +
push eax  +
mov ecx [ebp-1Ch] +
push ecx  +
mov edx [ebp-1Ch] +
mov eax [edx] +
mov ecx [eax+20h] +
call ecx  +
mov [ebp-14h] eax +
cmp dword ptr [ebp-14h] 0 +
jge loc_1009C05  +
jmp loc_1009C30  +
mov ecx [ebp+8] +
add ecx 8 +
call sub_1009F60  +
mov [ebp-20h] eax +
mov eax [ebp-8] +
cdq   +
sub eax edx +
sar eax 1 +
add eax 32h +
push eax  +
mov edx [ebp-20h] +
push edx  +
mov eax [ebp-20h] +
mov ecx [eax] +
mov edx [ecx+0Ch] +
call edx  +
mov [ebp-14h] eax +
mov eax [ebp-14h] +
mov [ebp-18h] eax +
lea ecx [ebp-4] +
call sub_1009F10  +
lea ecx [ebp-10h] +
call sub_1009ED0  +
mov eax [ebp-18h] +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov dword ptr [ebp-8] 0 +
mov dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-4] 80004005h +
mov dword ptr [ebp-0Ch] 0 +
cmp dword ptr [ebp+8] 0 +
jnz loc_1009C95  +
mov dword ptr [ebp-10h] 80070057h +
jmp loc_1009D00  +
jmp loc_1009D00  +
mov eax [ebp+8] +
mov [ebp-0Ch] eax +
mov ecx [ebp-0Ch] +
push ecx  +
call ds:SysStringLen  +
test eax eax +
jnz loc_1009CB4  +
mov dword ptr [ebp-10h] 80070057h +
jmp loc_1009D00  +
jmp loc_1009D00  +
push 2  +
push 0  +
call ds:CoInitializeEx  +
mov [ebp-4] eax +
mov edx [ebp-4] +
mov [ebp-10h] edx +
cmp dword ptr [ebp-10h] 0 +
jge loc_1009CD1  +
jmp loc_1009D00  +
jmp loc_1009D00  +
push 5  +
push 0  +
push 0  +
mov eax [ebp-0Ch] +
push eax  +
push offset aOpen  +
push 0  +
call ds:ShellExecuteW  +
mov [ebp-8] eax +
cmp dword ptr [ebp-8] 20h +
jg loc_1009D00  +
call ds:GetLastError  +
push eax  +
call sub_10025C0  +
mov [ebp-10h] eax +
cmp dword ptr [ebp-4] 0 +
jl loc_1009D0C  +
call ds:CoUninitialize  +
mov ecx [ebp-0Ch] +
push ecx  +
call ds:SysFreeString  +
mov dword ptr [ebp-0Ch] 0 +
mov eax [ebp-10h] +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-0Ch] 0 +
mov dword ptr [ebp-8] 0 +
mov eax [ebp+0Ch] +
push eax  +
call ds:SysStringLen  +
test eax eax +
jnz loc_1009D66  +
mov dword ptr [ebp-10h] 80070057h +
jmp loc_1009DC6  +
jmp loc_1009DC6  +
mov ecx [ebp+0Ch] +
push ecx  +
call ds:SysAllocString  +
mov [ebp-8] eax +
cmp dword ptr [ebp-8] 0 +
jnz loc_1009D84  +
mov dword ptr [ebp-10h] 8007000Eh +
jmp loc_1009DC6  +
jmp loc_1009DC6  +
lea edx [ebp-4] +
push edx  +
push 0  +
mov eax [ebp-8] +
push eax  +
push offset loc_1009C60  +
push 0  +
push 0  +
call ds:CreateThread  +
mov [ebp-0Ch] eax +
cmp dword ptr [ebp-0Ch] 0 +
jnz loc_1009DBF  +
call ds:GetLastError  +
push eax  +
call sub_10025C0  +
mov [ebp-10h] eax +
cmp dword ptr [ebp-10h] 0 +
jge loc_1009DBF  +
jmp loc_1009DC6  +
jmp loc_1009DC6  +
mov dword ptr [ebp-8] 0 +
mov ecx [ebp-8] +
push ecx  +
call ds:SysFreeString  +
mov dword ptr [ebp-8] 0 +
lea edx [ebp-0Ch] +
push edx  +
call sub_100A7F0  +
mov eax [ebp-10h] +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
cmp [ebp+arg_0] 0 +
jnz loc_1009E28  +
mov eax [ebp+var_4] +
cmp dword ptr [eax] 0 +
jz loc_1009E22  +
mov ecx [ebp+var_4] +
mov edx [ecx] +
mov eax [ebp+var_4] +
mov ecx [eax] +
mov edx [edx] +
push ecx  +
mov eax [edx+8] +
call eax  +
mov ecx [ebp+var_4] +
mov dword ptr [ecx] 0 +
xor eax eax +
jmp loc_1009E5B  +
jmp loc_1009E5B  +
mov edx [ebp+arg_0] +
mov eax [edx] +
mov ecx [ebp+arg_0] +
push ecx  +
mov edx [eax+4] +
call edx  +
mov eax [ebp+var_4] +
cmp dword ptr [eax] 0 +
jz loc_1009E50  +
mov ecx [ebp+var_4] +
mov edx [ecx] +
mov eax [ebp+var_4] +
mov ecx [eax] +
mov edx [edx] +
push ecx  +
mov eax [edx+8] +
call eax  +
mov ecx [ebp+var_4] +
mov edx [ebp+arg_0] +
mov [ecx] edx +
mov eax [ebp+arg_0] +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+ppv] ecx +
mov eax [ebp+ppv] +
push eax  +
push offset riid  +
mov ecx [ebp+dwClsContext] +
push ecx  +
mov edx [ebp+pUnkOuter] +
push edx  +
mov eax [ebp+rclsid] +
push eax  +
call ds:CoCreateInstance  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
push 1  +
mov ecx [ebp+arg_0] +
call sub_1009F80  +
mov eax [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
push 1  +
mov eax [ebp+var_4] +
mov ecx [eax] +
call sub_1009FF0  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
mov dword ptr [eax] 0 +
mov eax [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
cmp dword ptr [eax] 0 +
jz loc_1009F33  +
mov ecx [ebp+var_4] +
mov edx [ecx] +
mov eax [ebp+var_4] +
mov ecx [eax] +
mov edx [edx] +
push ecx  +
mov eax [edx+8] +
call eax  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
mov eax [eax] +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
mov [ebp+var_8] ecx +
mov eax [ebp+var_8] +
push eax  +
push 1  +
mov ecx [ebp+var_8] +
push ecx  +
push 506C7466h  +
call sub_100A7A0  +
push 0  +
push 0FFFFFFFFh  +
push 0  +
xor edx edx +
cmp [ebp+arg_0] 0 +
setnz dl  +
push edx  +
mov eax [ebp+var_8] +
push eax  +
call sub_1008DD1  +
mov ecx eax +
call sub_1004E69  +
push eax  +
call sub_1008B80  +
mov [ebp+var_4] eax +
mov ecx [ebp+var_8] +
push ecx  +
push 2  +
mov edx [ebp+var_8] +
push edx  +
push 506C7466h  +
call sub_100A7A0  +
mov eax [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
push eax  +
push 3  +
mov ecx [ebp+var_4] +
push ecx  +
push 506C7466h  +
call sub_100A7A0  +
push 0  +
mov edx [ebp+arg_0] +
push edx  +
mov eax [ebp+var_4] +
push eax  +
call sub_1008DD1  +
mov ecx eax +
call sub_1004E69  +
push eax  +
call sub_1008BB0  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov ecx [ebp+var_4] +
call sub_100A5B0  +
mov eax [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
cmp dword ptr [eax+10h] 0 +
jz loc_100A07A  +
mov ecx [ebp+var_4] +
call sub_100A520  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov ecx [ebp+var_4] +
call sub_100A350  +
test eax eax +
jz loc_100A0A9  +
xor eax eax +
jmp loc_100A0C9  +
cmp [ebp+arg_0] 0 +
jle loc_100A0C3  +
mov eax [ebp+arg_0] +
push eax  +
mov ecx [ebp+var_4] +
call sub_100A170  +
test eax eax +
jge loc_100A0C3  +
xor eax eax +
jmp loc_100A0C9  +
mov ecx [ebp+var_4] +
mov eax [ecx+10h] +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
push 0  +
mov ecx [ebp+var_4] +
call sub_100A2C0  +
push 0FFFFFFFFh  +
mov eax [ebp+lpWideCharStr] +
push eax  +
mov ecx [ebp+var_4] +
call sub_100A110  +
mov eax [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov eax [ebp+cchWideChar] +
push eax  +
mov ecx [ebp+lpWideCharStr] +
push ecx  +
push 0  +
mov ecx [ebp+var_4] +
call sub_100A370  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
push 0FFFFFFFFh  +
mov eax [ebp+lpWideCharStr] +
push eax  +
mov ecx [ebp+var_4] +
call sub_100A110  +
mov eax [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov [ebp+var_14] ecx +
mov ecx [ebp+var_14] +
call sub_100A350  +
test eax eax +
jz loc_100A194  +
mov ecx [ebp+var_14] +
call sub_100A310  +
jmp loc_100A2B0  +
mov eax [ebp+arg_0] +
add eax 1 +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jle loc_100A1AC  +
cmp [ebp+var_4] 4000000h +
jle loc_100A1C9  +
push 6Fh  +
call sub_10025C0  +
push eax  +
mov ecx [ebp+var_14] +
call sub_100A330  +
mov ecx [ebp+var_14] +
call sub_100A310  +
jmp loc_100A2B0  +
mov ecx [ebp+var_14] +
mov edx [ebp+var_4] +
cmp edx [ecx+0Ch] +
jle loc_100A2AE  +
mov eax [ebp+var_14] +
mov ecx [eax] +
shr ecx 1 +
and ecx 3 +
cmp ecx 2 +
jnz loc_100A204  +
push 7Ah  +
call sub_10025C0  +
push eax  +
mov ecx [ebp+var_14] +
call sub_100A330  +
mov ecx [ebp+var_14] +
call sub_100A310  +
jmp loc_100A2B0  +
mov [ebp+dwBytes] 0 +
mov edx [ebp+var_4] +
shl edx 1 +
mov [ebp+dwBytes] edx +
mov eax [ebp+dwBytes] +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_C] eax +
cmp [ebp+var_C] 0 +
jnz loc_100A250  +
mov ecx [ebp+var_14] +
mov dword ptr [ecx+8] 0 +
push 8007000Eh  +
mov ecx [ebp+var_14] +
call sub_100A330  +
mov ecx [ebp+var_14] +
call sub_100A310  +
jmp loc_100A2B0  +
mov edx [ebp+var_14] +
cmp dword ptr [edx+10h] 0 +
jz loc_100A29C  +
mov eax [ebp+var_14] +
mov ecx [eax+8] +
shl ecx 1 +
push ecx  +
mov edx [ebp+var_14] +
mov eax [edx+10h] +
push eax  +
mov ecx [ebp+var_C] +
push ecx  +
call memcpy  +
add esp 0Ch +
mov edx [ebp+var_14] +
mov eax [edx+8] +
mov [ebp+var_10] eax +
mov ecx [ebp+var_14] +
call sub_100A520  +
mov ecx [ebp+var_14] +
mov edx [ecx] +
and edx 0FFFFFFFEh +
mov eax [ebp+var_14] +
mov [eax] edx +
mov ecx [ebp+var_14] +
mov edx [ebp+var_10] +
mov [ecx+8] edx +
mov eax [ebp+var_14] +
mov ecx [ebp+var_C] +
mov [eax+10h] ecx +
mov edx [ebp+var_14] +
mov eax [ebp+var_4] +
mov [edx+0Ch] eax +
xor eax eax +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
cmp [ebp+arg_0] 0 +
jz loc_100A2E9  +
mov eax [ebp+var_4] +
mov ecx [eax+0Ch] +
shl ecx 1 +
push ecx  +
push 0  +
mov edx [ebp+var_4] +
mov eax [edx+10h] +
push eax  +
call memset  +
add esp 0Ch +
mov ecx [ebp+var_4] +
mov dword ptr [ecx+8] 0 +
mov edx [ebp+var_4] +
mov dword ptr [edx+4] 0 +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
mov eax [eax+4] +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
xor ecx ecx +
cmp dword ptr [eax+4] 0 +
setl cl  +
mov eax ecx +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov [ebp+var_18] ecx +
cmp [ebp+lpWideCharStr] 0 +
jz loc_100A50A  +
cmp [ebp+cchWideChar] 0FFFFFFFFh +
jl loc_100A394  +
cmp [ebp+cchWideChar] 4000000h +
jle loc_100A3B1  +
push 6Fh  +
call sub_10025C0  +
push eax  +
mov ecx [ebp+var_18] +
call sub_100A330  +
mov ecx [ebp+var_18] +
call sub_100A310  +
jmp loc_100A50C  +
mov eax 1 +
test eax eax +
jz loc_100A413  +
cmp [ebp+cchWideChar] 0FFFFFFFFh +
jnz loc_100A3F9  +
lea ecx [ebp+cchWideChar] +
push ecx  +
mov edx [ebp+lpWideCharStr] +
push edx  +
call sub_100A830  +
push eax  +
call sub_100A7B0  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jge loc_100A3F9  +
push 6Fh  +
call sub_10025C0  +
push eax  +
mov ecx [ebp+var_18] +
call sub_100A330  +
mov ecx [ebp+var_18] +
call sub_100A310  +
jmp loc_100A50C  +
mov eax [ebp+cchWideChar] +
push eax  +
mov ecx [ebp+lpWideCharStr] +
push ecx  +
mov ecx [ebp+var_18] +
call sub_100A6F0  +
jmp loc_100A50C  +
jmp loc_100A50A  +
cmp [ebp+cchWideChar] 0FFFFFFFFh +
jnz loc_100A456  +
lea edx [ebp+cchWideChar] +
push edx  +
mov eax [ebp+lpWideCharStr] +
push eax  +
call ds:wcslen  +
add esp 4 +
push eax  +
call sub_100A7B0  +
mov [ebp+var_10] eax +
cmp [ebp+var_10] 0 +
jge loc_100A456  +
push 6Fh  +
call sub_10025C0  +
push eax  +
mov ecx [ebp+var_18] +
call sub_100A330  +
mov ecx [ebp+var_18] +
call sub_100A310  +
jmp loc_100A50C  +
mov ecx [ebp+cchWideChar] +
imul ecx ecx +
mov edx [ebp+var_18] +
add ecx [edx+8] +
push ecx  +
mov ecx [ebp+var_18] +
call sub_100A170  +
test eax eax +
jge loc_100A47C  +
mov ecx [ebp+var_18] +
call sub_100A310  +
jmp loc_100A50C  +
mov eax [ebp+var_18] +
mov ecx [eax+8] +
mov edx [ebp+var_18] +
mov eax [edx+10h] +
lea ecx [eax+ecx*2] +
mov [ebp+lpMultiByteStr] ecx +
push 0  +
push 0  +
mov edx [ebp+var_18] +
mov eax [ebp+var_18] +
mov ecx [edx+0Ch] +
sub ecx [eax+8] +
push ecx  +
mov edx [ebp+lpMultiByteStr] +
push edx  +
mov eax [ebp+cchWideChar] +
push eax  +
mov ecx [ebp+lpWideCharStr] +
push ecx  +
push 0  +
mov edx [ebp+CodePage] +
push edx  +
call ds:WideCharToMultiByte  +
mov [ebp+var_C] eax +
cmp [ebp+var_C] 0 +
jnz loc_100A4F8  +
cmp [ebp+cchWideChar] 0 +
jz loc_100A4F8  +
call ds:GetLastError  +
push eax  +
call sub_10025C0  +
mov [ebp+var_14] eax +
cmp [ebp+var_14] 0 +
jl loc_100A4E2  +
mov [ebp+var_14] 8000FFFFh +
mov eax [ebp+var_14] +
push eax  +
mov ecx [ebp+var_18] +
call sub_100A330  +
mov ecx [ebp+var_18] +
call sub_100A310  +
jmp loc_100A50C  +
mov ecx [ebp+var_18] +
mov edx [ecx+8] +
add edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_18] +
call sub_100A610  +
xor eax eax +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
mov ecx [eax] +
and ecx 1 +
jnz loc_100A59E  +
mov edx [ebp+var_4] +
mov eax [edx] +
shr eax 1 +
and eax 3 +
jnz loc_100A557  +
mov ecx [ebp+var_4] +
mov edx [ecx+10h] +
push edx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_100A573  +
mov eax [ebp+var_4] +
mov ecx [eax] +
shr ecx 1 +
and ecx 3 +
cmp ecx 1 +
jnz loc_100A573  +
mov edx [ebp+var_4] +
mov eax [edx+10h] +
push eax  +
call ds:CoTaskMemFree  +
mov ecx [ebp+var_4] +
mov edx [ecx] +
and edx 0FFFFFFF9h +
mov eax [ebp+var_4] +
mov [eax] edx +
mov ecx [ebp+var_4] +
mov dword ptr [ecx+10h] 0 +
mov edx [ebp+var_4] +
mov dword ptr [edx+0Ch] 0 +
mov eax [ebp+var_4] +
mov dword ptr [eax+8] 0 +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
mov dword ptr [eax+4] 0 +
mov ecx [ebp+var_4] +
mov edx [ecx] +
and edx 0FFFFFFFEh +
mov eax [ebp+var_4] +
mov [eax] edx +
mov ecx [ebp+var_4] +
mov edx [ecx] +
and edx 0FFFFFFF9h +
mov eax [ebp+var_4] +
mov [eax] edx +
mov ecx [ebp+var_4] +
mov dword ptr [ecx+10h] 0 +
mov edx [ebp+var_4] +
mov dword ptr [edx+0Ch] 0 +
mov eax [ebp+var_4] +
mov dword ptr [eax+8] 0 +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
mov [ebp+var_8] ecx +
mov ecx [ebp+var_8] +
call sub_100A350  +
test eax eax +
jz loc_100A634  +
mov ecx [ebp+var_8] +
call sub_100A310  +
jmp loc_100A6D9  +
cmp [ebp+arg_0] 0 +
jl loc_100A670  +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_0] +
cmp ecx [eax+0Ch] +
jl loc_100A65F  +
push 6Fh  +
call sub_10025C0  +
push eax  +
mov ecx [ebp+var_8] +
call sub_100A330  +
mov ecx [ebp+var_8] +
call sub_100A310  +
jmp loc_100A6D9  +
mov edx [ebp+var_8] +
mov eax [edx+10h] +
xor ecx ecx +
mov edx [ebp+arg_0] +
mov [eax+edx*2] cx +
jmp loc_100A6CE  +
mov eax [ebp+var_8] +
cmp dword ptr [eax+0Ch] 0 +
jle loc_100A6C7  +
mov ecx [ebp+var_8] +
mov edx [ecx+0Ch] +
mov eax [ebp+var_8] +
mov ecx [eax+10h] +
xor eax eax +
mov [ecx+edx*2-2] ax +
lea ecx [ebp+arg_0] +
push ecx  +
mov edx [ebp+var_8] +
mov eax [edx+10h] +
push eax  +
call sub_100A830  +
push eax  +
call sub_100A7B0  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jge loc_100A6C5  +
push 6Fh  +
call sub_10025C0  +
push eax  +
mov ecx [ebp+var_8] +
call sub_100A330  +
mov ecx [ebp+var_8] +
call sub_100A310  +
jmp loc_100A6D9  +
jmp loc_100A6CE  +
mov [ebp+arg_0] 0 +
mov ecx [ebp+var_8] +
mov edx [ebp+arg_0] +
mov [ecx+8] edx +
xor eax eax +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov ecx [ebp+var_4] +
call sub_100A350  +
test eax eax +
jz loc_100A70F  +
mov ecx [ebp+var_4] +
call sub_100A310  +
jmp loc_100A78E  +
cmp [ebp+arg_4] 0 +
jl loc_100A71E  +
cmp [ebp+arg_4] 4000000h +
jle loc_100A738  +
push 6Fh  +
call sub_10025C0  +
push eax  +
mov ecx [ebp+var_4] +
call sub_100A330  +
mov ecx [ebp+var_4] +
call sub_100A310  +
jmp loc_100A78E  +
mov eax [ebp+var_4] +
mov ecx [eax+8] +
add ecx [ebp+arg_4] +
push ecx  +
mov ecx [ebp+var_4] +
call sub_100A170  +
test eax eax +
jge loc_100A758  +
mov ecx [ebp+var_4] +
call sub_100A310  +
jmp loc_100A78E  +
mov edx [ebp+arg_4] +
shl edx 1 +
push edx  +
mov eax [ebp+arg_0] +
push eax  +
mov ecx [ebp+var_4] +
mov edx [ecx+8] +
mov eax [ebp+var_4] +
mov ecx [eax+10h] +
lea edx [ecx+edx*2] +
push edx  +
call memcpy  +
add esp 0Ch +
mov eax [ebp+var_4] +
mov ecx [eax+8] +
add ecx [ebp+arg_4] +
push ecx  +
mov ecx [ebp+var_4] +
call sub_100A610  +
xor eax eax +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_0] 7FFFFFFFh +
ja loc_100A7D0  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov [ebp+var_4] 0 +
jmp loc_100A7E0  +
mov edx [ebp+arg_4] +
mov dword ptr [edx] 0FFFFFFFFh +
mov [ebp+var_4] 80070216h +
mov eax [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jz loc_100A81B  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
push edx  +
call ds:CloseHandle  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 0 +
mov eax [ebp+var_4] +
jmp loc_100A820  +
mov eax 1 +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push eax  +
call ds:wcslen  +
add esp 4 +
pop ebp  +
retn 4  +
***
pop es  +
sar edi 0FFh +
pop ecx  +
pop esi  +
retn   +
***
jmp fword ptr [eax+5Ah]  +
***
test eax 0D0E80100h +
sar bh 0FFh +
pop ecx  +
retn   +
***
add al ch +
mov ds:59FFFFC0h eax +
retn   +
***
jmp fword ptr (byte_100B7FF-100B877h)[eax]  +
***
test eax 68E80100h +
sar bh 0FFh +
pop ecx  +
retn   +
***
mov dword_100C048 offset off_100146C +
mov ecx offset dword_100C048 +
jmp sub_10023E0  +
***
mov ecx offset dword_100C120 +
jmp sub_1006029  +
***
mov dword_100C12C offset off_1001908 +
retn   +
***
jns $+2  +
retf   +
***
ins  dx +
ins  dx +
outs   +
arpl [eax] ax +
iret   +
***
add cl ch +
add al 56h +
imul esi [edx+74h] +
ins  dx +
ins  dx +
outs   +
arpl [eax] ax +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756EFDC7h  +
***
