mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
test edx edx +
jz loc_10013E8  +
cmp word ptr [edx] 0 +
jnz loc_10013CD  +
push 0Eh  +
jmp loc_10013EA  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10013D3  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10013EB  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_10013FC  +
cmp word ptr [edx] 0 +
jnz loc_1001401  +
mov edx offset aNull +
jmp loc_1001401  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_100145B  +
cmp word ptr [edx] 0 +
jnz loc_1001440  +
push 0Eh  +
jmp loc_100145D  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1001446  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_100145E  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_100146F  +
cmp word ptr [edx] 0 +
jnz loc_1001474  +
mov edx offset aNull +
jmp loc_1001474  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ds:GetProcessHeap +
xor ebx ebx +
push 44h  +
push 8  +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_1] bl +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jnz loc_10014F7  +
mov eax hModule +
cmp eax offset hModule +
jz loc_100159E  +
test byte ptr [eax+1Ch] 1 +
jz loc_100159E  +
push offset dword_100114C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001365  +
jmp loc_100159E  +
lea ecx [ebp+var_C] +
push ecx  +
push eax  +
push ebx  +
push 0Bh  +
mov [ebp+var_C] 44h +
call ds:CreateWellKnownSid  +
test eax eax +
jnz loc_1001542  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001591  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001591  +
call ds:__imp_GetLastError  +
push eax  +
mov eax hModule +
push offset dword_100114C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100138B  +
jmp loc_1001591  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+lpMem]  +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jnz loc_1001589  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001584  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001584  +
call ds:__imp_GetLastError  +
push eax  +
mov eax hModule +
push offset dword_100114C  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100138B  +
mov [ebp+var_8] ebx +
jmp loc_1001591  +
cmp [ebp+var_8] 1 +
setz [ebp+var_1]  +
push [ebp+lpMem]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov al [ebp+var_1] +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
mov [ebp+nLength] ebx +
mov [ebp+nLengthNeeded] ebx +
mov [ebp+var_1] bl +
call GetProcessWindowStation  +
mov [ebp+hWinSta] eax +
cmp eax ebx +
jnz loc_1001608  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001777  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001777  +
call ds:__imp_GetLastError  +
push eax  +
mov eax hModule +
push offset dword_100114C  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100138B  +
jmp loc_1001777  +
push esi  +
mov esi GetUserObjectInformationW +
lea ecx [ebp+nLength] +
push ecx  +
push ebx  +
push ebx  +
push 2  +
push eax  +
call esi  +
test eax eax +
jnz loc_1001759  +
push edi  +
mov edi ds:__imp_GetLastError +
call edi  +
cmp eax 7Ah +
jz loc_100165F  +
mov ecx hModule +
cmp ecx offset hModule +
jz loc_1001758  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1001758  +
push eax  +
push offset dword_100114C  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
jmp loc_10016ED  +
push [ebp+nLength]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_10016AB  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001758  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001758  +
push [ebp+nLength]  +
push offset dword_100114C  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100138B  +
jmp loc_1001758  +
lea eax [ebp+nLengthNeeded] +
push eax  +
push [ebp+nLength]  +
push ebx  +
push 2  +
push [ebp+hWinSta]  +
call esi  +
test eax eax +
jnz loc_10016F4  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001758  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001758  +
call edi  +
push eax  +
mov eax hModule +
push offset dword_100114C  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100138B  +
jmp loc_1001758  +
push offset aWinsta0  +
push ebx  +
call ds:_wcsicmp  +
neg eax  +
sbb al al +
pop ecx  +
inc al  +
pop ecx  +
mov [ebp+var_1] al +
jnz loc_1001734  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001758  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001758  +
push ebx  +
push offset dword_100114C  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100142A  +
jmp loc_1001758  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001758  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001758  +
push offset dword_100114C  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001365  +
pop edi  +
push [ebp+hWinSta]  +
call CloseWindowStation  +
pop esi  +
test ebx ebx +
jz loc_1001777  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov al [ebp+var_1] +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1004004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov esi 104h +
push esi  +
lea eax [ebp+LibFileName] +
push eax  +
xor edi edi +
call ds:GetSystemDirectoryW  +
cmp eax esi +
ja loc_10017DB  +
test eax eax +
jz loc_10017DB  +
push offset pMore  +
lea eax [ebp+LibFileName] +
push eax  +
call PathAppendW  +
test eax eax +
jz loc_10017DB  +
lea eax [ebp+LibFileName] +
push eax  +
call ds:LoadLibraryW  +
mov edi eax +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002BDA  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
xor eax eax +
mov [ebp+var_C] eax +
cmp [ebp+arg_4] eax +
jbe locret_1001963  +
push ebx  +
mov ebx [ebp+arg_0] +
lea ecx [ebx+8] +
push esi  +
mov [ebp+var_8] ecx +
lea ecx [ebx+6] +
push edi  +
mov [ebp+var_4] ecx +
lea edi [ebx+4] +
lea esi [ebx+2] +
jmp loc_1001823  +
mov ebx [ebp+arg_0] +
push 3Ch  +
lea ebx [ebx+eax*2] +
pop ecx  +
cmp cx [ebx] +
jnz loc_1001944  +
mov ecx [ebp+arg_4] +
sub ecx eax +
lea eax [ecx-1] +
mov [ebp+var_10] eax +
cmp eax 2 +
jb loc_1001874  +
push 2  +
push offset aP  +
push esi  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1001874  +
add [ebp+var_C] 3 +
push 20h  +
pop eax  +
push 0Ah  +
mov [ebx] ax +
pop eax  +
push 0Dh  +
mov [esi] ax +
pop eax  +
mov [edi] ax +
push 6  +
jmp loc_1001949  +
cmp [ebp+var_10] 3 +
jb loc_10018D9  +
push 3  +
push offset aP_0  +
push esi  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_10018B9  +
push 3  +
push offset aP_1  +
push esi  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_10018B9  +
push 3  +
push offset aBr  +
push esi  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_10018D9  +
mov ecx [ebp+var_4] +
add [ebp+var_C] 4 +
push 20h  +
pop eax  +
push 0Ah  +
mov [ebx] ax +
mov [esi] ax +
pop eax  +
push 0Dh  +
mov [edi] ax +
pop eax  +
mov [ecx] ax +
push 8  +
jmp loc_1001949  +
cmp [ebp+var_10] 4 +
jb loc_1001944  +
push 4  +
push offset aBr_0  +
push esi  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_100191E  +
push 4  +
push offset aBr_1  +
push esi  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_100191E  +
push 4  +
push offset aP_2  +
push esi  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1001944  +
mov edx [ebp+var_4] +
add [ebp+var_C] 5 +
push 20h  +
pop eax  +
push 0Ah  +
mov [ebx] ax +
mov [esi] ax +
mov [edi] ax +
pop eax  +
mov ecx eax +
mov [edx] cx +
mov edx [ebp+var_8] +
push 0Dh  +
pop ecx  +
mov [edx] cx +
jmp loc_100194A  +
inc [ebp+var_C]  +
push 2  +
pop eax  +
add [ebp+var_4] eax +
add [ebp+var_8] eax +
add esi eax +
add edi eax +
mov eax [ebp+var_C] +
cmp eax [ebp+arg_4] +
jb loc_1001820  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and [ebp+var_4] 0 +
and [ebp+hLibModule] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ds:RtlInitUnicodeString +
lea eax [esi+208h] +
push eax  +
mov [ebp+arg_0] eax +
lea eax [ebp+var_18] +
push eax  +
mov [ebp+var_C] 1 +
call edi  +
mov ebx ds:RtlGUIDFromString +
lea eax [esi+2A4h] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
call ebx  +
test eax eax +
jge loc_10019ED  +
mov ecx hModule +
cmp ecx offset hModule +
jz loc_1001BD4  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1001BD4  +
push [ebp+arg_0]  +
push eax  +
push offset dword_100114C  +
push 13h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10013B7  +
jmp loc_1001BD4  +
lea eax [esi+256h] +
push eax  +
mov [ebp+var_10] eax +
lea eax [ebp+var_20] +
push eax  +
call edi  +
lea edi [esi+2B4h] +
push edi  +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+arg_0] edi +
call ebx  +
test eax eax +
jge loc_1001A3A  +
mov ecx hModule +
cmp ecx offset hModule +
jz loc_1001BD4  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1001BD4  +
push [ebp+var_10]  +
push eax  +
push offset dword_100114C  +
push 14h  +
jmp loc_10019DD  +
push edi  +
call SdbIsNullGUID  +
test eax eax +
jnz loc_1001A52  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
call SdbGetEntryFlags  +
test eax eax +
jnz loc_1001A56  +
and [ebp+var_4] 0 +
mov ebx [ebp+var_4] +
test bl 2 +
jz loc_1001A90  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001BD4  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001BD4  +
push esi  +
push offset dword_100114C  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100142A  +
jmp loc_1001BD4  +
shr ebx 2 +
and ebx 1 +
mov edi offset dword_100114C +
jnz loc_1001ABB  +
call sub_10015AA  +
xor ebx ebx +
test al al +
setz bl  +
test ebx ebx +
jnz loc_1001ABB  +
call sub_1001497  +
test al al +
setz bl  +
test ebx ebx +
jz loc_1001AFF  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001ADC  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001ADC  +
push esi  +
push edi  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100142A  +
test ebx ebx +
jz loc_1001AFF  +
cmp dword ptr [esi+2D4h] 0 +
jnz loc_1001BC1  +
test [ebp+var_4] 10000000h +
jz loc_1001BD4  +
jmp loc_1001BC1  +
call sub_1001782  +
mov [ebp+hLibModule] eax +
test eax eax +
jnz loc_1001B2A  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001BC5  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001BC5  +
push edi  +
push 17h  +
jmp loc_1001B52  +
push offset ProcName  +
push eax  +
call ds:__imp_GetProcAddress  +
mov [ebp+var_10] eax +
test eax eax +
jnz loc_1001B5F  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001BC5  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001BC5  +
push edi  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001365  +
jmp loc_1001BC5  +
mov ecx [esi+2CCh] +
mov eax ecx +
lea ebx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1001B6A  +
sub eax ebx +
sar eax 1 +
inc eax  +
push eax  +
push ecx  +
call sub_10017F0  +
push esi  +
call [ebp+var_10]  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_1001BB2  +
test bl 8 +
jz loc_1001BAB  +
push [ebp+arg_0]  +
or [ebp+var_4] 4 +
call SdbIsNullGUID  +
test eax eax +
jnz loc_1001BAB  +
push [ebp+var_4]  +
push [ebp+arg_0]  +
call SdbSetEntryFlags  +
shr ebx 1 +
and ebx 1 +
jmp loc_1001BBD  +
xor ebx ebx +
cmp [esi+2D4h] ebx +
setz bl  +
test ebx ebx +
jnz loc_1001BC5  +
and [ebp+var_C] 0 +
cmp [ebp+hLibModule] 0 +
jz loc_1001BD4  +
push [ebp+hLibModule]  +
call ds:__imp_FreeLibrary  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_1001C3A  +
dec eax  +
jz loc_1001C31  +
push 57h  +
pop eax  +
jmp loc_1001CA8  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_1001C60  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_1001C89  +
cmp dword ptr [esi+10h] 0 +
jz loc_1001C89  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_1001CA6  +
test cl 2 +
jz loc_1001C97  +
mov esi [esi+10h] +
test esi esi +
jz loc_1001C97  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi hModule +
push edi  +
mov edi offset dword_1004060 +
jmp loc_1001CF3  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_1001C0B  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_1001CCA  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi hModule +
push edi  +
mov edi offset hModule +
cmp esi edi +
jz loc_1001D3F  +
jmp loc_1001D35  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_1001D33  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_1001D17  +
mov hModule edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
xor edx edx +
xor ecx ecx +
xor bl bl +
cmp dx [eax+208h] +
jnz loc_1001D85  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001E25  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001E25  +
push offset dword_10011F8  +
push 1Fh  +
jmp loc_1001E16  +
xor edx edx +
cmp dx [eax+256h] +
jnz loc_1001DAF  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001E25  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001E25  +
push offset dword_10011F8  +
push 20h  +
jmp loc_1001E16  +
cmp [eax+2C4h] ecx +
jnz loc_1001DD2  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001E25  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001E25  +
push offset dword_10011F8  +
push 21h  +
jmp loc_1001E16  +
cmp [eax+2C8h] ecx +
jnz loc_1001DF5  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001E25  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001E25  +
push offset dword_10011F8  +
push 22h  +
jmp loc_1001E16  +
cmp [eax+2CCh] ecx +
jnz loc_1001E23  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001E25  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001E25  +
push offset dword_10011F8  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001365  +
jmp loc_1001E25  +
mov bl 1 +
mov al bl +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1001E66  +
cmp [ebp+arg_4] eax +
jz loc_1001E62  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1001E62  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1001E45  +
test esi esi +
jnz loc_1001E6E  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1001E7C  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1001E9E  +
cmp edx 7FFFFFFFh +
jbe loc_1001EA3  +
mov eax 80070057h +
test eax eax +
jl loc_1001EB9  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1001E31  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push 0  +
pop eax  +
jz loc_1001ED9  +
cmp edx 7FFFFFFFh +
jbe loc_1001EDE  +
mov eax 80070057h +
test eax eax +
jl loc_1001EF4  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1001E31  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
test ecx ecx +
jz loc_1001F49  +
mov eax [ebp+arg_4] +
cmp eax 7FFFFFFFh +
ja loc_1001F49  +
push edi  +
xor edi edi +
mov edx eax +
test eax eax +
jz loc_1001F2E  +
cmp [ecx] di +
jz loc_1001F2A  +
inc ecx  +
inc ecx  +
dec edx  +
jnz loc_1001F20  +
test edx edx +
jnz loc_1001F33  +
mov edi 80070057h +
test esi esi +
jz loc_1001F44  +
test edi edi +
jl loc_1001F41  +
sub eax edx +
mov [esi] eax +
jmp loc_1001F44  +
and dword ptr [esi] 0 +
mov eax edi +
pop edi  +
jmp loc_1001F4E  +
mov eax 80070057h +
test eax eax +
jge loc_1001F59  +
test esi esi +
jz loc_1001F59  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
lea eax [ebp+var_8] +
push eax  +
push 7FFFh  +
push [ebp+arg_0]  +
mov [ebp+var_1] 0 +
call sub_1001EFD  +
test eax eax +
jge loc_1001FB3  +
mov ecx hModule +
cmp ecx offset hModule +
jz loc_100200C  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100200C  +
movzx eax ax +
push eax  +
push offset dword_10011F8  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100138B  +
jmp loc_100200C  +
push ebx  +
push esi  +
mov esi [ebp+var_8] +
push edi  +
mov edi ds:GetProcessHeap +
lea esi [esi+esi+2] +
push esi  +
push 8  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_1002013  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001FF9  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001FF9  +
push offset dword_10011F8  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001365  +
test ebx ebx +
jz loc_1002009  +
push ebx  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
pop ebx  +
mov al [ebp+var_1] +
leave   +
retn 8  +
push [ebp+arg_0]  +
push esi  +
push ebx  +
call sub_1001EC2  +
test eax eax +
jge loc_100203C  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1001FF9  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001FF9  +
push offset dword_10011F8  +
push 0Ch  +
jmp loc_1001FEE  +
mov eax [ebp+arg_4] +
mov [ebp+var_1] 1 +
mov [eax] ebx +
jmp loc_1002009  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
lea eax [ebp+pNumArgs] +
push eax  +
push dword ptr [ebp+lpCmdLine]  +
xor esi esi +
mov [ebp+pNumArgs] esi +
mov [ebp+var_1] 0 +
call CommandLineToArgvW  +
mov ebx eax +
cmp ebx esi +
jnz loc_10020A2  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002321  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002321  +
push offset dword_10011F8  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001365  +
jmp loc_1002321  +
mov edx [ebp+pNumArgs] +
cmp edx esi +
push edi  +
jle loc_1002315  +
mov edi [ebp+arg_4] +
mov eax [ebx+esi*4] +
movzx ecx word ptr [eax] +
cmp cx 2Dh +
jz loc_10020C7  +
cmp cx 2Fh +
jnz loc_1002309  +
movzx eax word ptr [eax+2] +
add eax 0FFFFFFBFh +
cmp eax 37h +
ja loc_1002309  +
movzx eax ds:byte_1002500[eax] +
jmp ds:off_10024D4[eax*4]  +
mov dword ptr [edi+2D8h] 1 +
jmp loc_1002309  +
mov dword ptr [edi+2D8h] 2 +
jmp loc_1002309  +
inc esi  +
cmp esi edx +
jge loc_100232A  +
push dword ptr [ebx+esi*4]  +
lea eax [edi+208h] +
push 27h  +
push eax  +
call sub_1001E88  +
test eax eax +
jge loc_1002309  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 0Fh  +
jmp loc_10024C4  +
inc esi  +
cmp esi edx +
jge loc_1002348  +
push dword ptr [ebx+esi*4]  +
lea eax [edi+256h] +
push 27h  +
push eax  +
call sub_1001E88  +
test eax eax +
jge loc_1002309  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 11h  +
jmp loc_10024C4  +
inc esi  +
cmp esi edx +
jge loc_1002366  +
push dword ptr [ebx+esi*4]  +
lea eax [ebp+lpCmdLine] +
push 2  +
push eax  +
call sub_1001E88  +
test eax eax +
jl loc_1002384  +
lea eax [ebp+lpCmdLine] +
push eax  +
call ds:_wtoi  +
pop ecx  +
cmp eax 2 +
jnz loc_10021D1  +
mov dword ptr [edi+2D4h] 1 +
jmp loc_1002309  +
cmp eax 1 +
jnz loc_10023A2  +
and dword ptr [edi+2D4h] 0 +
jmp loc_1002309  +
inc esi  +
cmp esi edx +
jge loc_10023C8  +
push dword ptr [ebx+esi*4]  +
push 104h  +
push edi  +
call sub_1001E88  +
test eax eax +
jl loc_10023EE  +
push offset aNull_1  +
push edi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1002309  +
push 208h  +
push eax  +
push edi  +
call memset  +
add esp 0Ch +
jmp loc_1002309  +
inc esi  +
cmp esi edx +
jge loc_1002414  +
lea eax [edi+2CCh] +
push eax  +
push dword ptr [ebx+esi*4]  +
call sub_1001F63  +
test al al +
jnz loc_1002309  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 18h  +
jmp loc_10024C4  +
inc esi  +
cmp esi edx +
jge loc_100243A  +
lea eax [edi+2C4h] +
push eax  +
push dword ptr [ebx+esi*4]  +
call sub_1001F63  +
test al al +
jnz loc_1002309  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 1Ah  +
jmp loc_10024C4  +
inc esi  +
cmp esi edx +
jge loc_100245D  +
lea eax [edi+2C8h] +
push eax  +
push dword ptr [ebx+esi*4]  +
call sub_1001F63  +
test al al +
jnz loc_1002309  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 1Ch  +
jmp loc_10024C4  +
inc esi  +
cmp esi edx +
jge loc_1002480  +
lea eax [edi+2D0h] +
push eax  +
push dword ptr [ebx+esi*4]  +
call sub_1001F63  +
test al al +
jz loc_10024A3  +
mov edx [ebp+pNumArgs] +
inc esi  +
cmp esi edx +
jl loc_10020B1  +
mov [ebp+var_1] 1 +
push ebx  +
call ds:LocalFree  +
pop edi  +
mov al [ebp+var_1] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 0Eh  +
jmp loc_10024C4  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 10h  +
jmp loc_10024C4  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 12h  +
jmp loc_10024C4  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 13h  +
jmp loc_10024C4  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 14h  +
jmp loc_10024C4  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 15h  +
jmp loc_10024C4  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 16h  +
jmp loc_10024C4  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 17h  +
jmp loc_10024C4  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 19h  +
jmp loc_10024C4  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 1Bh  +
jmp loc_10024C4  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 1Dh  +
jmp loc_10024C4  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002319  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002319  +
push offset dword_10011F8  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001365  +
jmp loc_1002319  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2ECh +
mov eax dword_1004004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
xor ebx ebx +
push 2DCh  +
xor esi esi +
lea eax [ebp+var_2E0] +
push ebx  +
inc esi  +
push eax  +
mov [ebp+var_2E4] esi +
mov [ebp+var_2E8] ebx +
call memset  +
add esp 0Ch +
push ebx  +
push ebx  +
push esi  +
push ebx  +
call ds:HeapSetInformation  +
lea eax [ebp+var_2E8] +
push eax  +
call ds:GetCurrentProcessId  +
push eax  +
call ds:ProcessIdToSessionId  +
test eax eax +
jnz loc_10025A7  +
mov eax esi +
jmp loc_10026FA  +
cmp [ebp+var_2E8] ebx +
jz loc_10025A0  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov [ebp+hLibModule] eax +
cmp eax ebx +
jz loc_10025A0  +
mov esi offset unk_1004040 +
push esi  +
call sub_1001BE3  +
push offset aMicrosoftWindo  +
mov dword_1004060 offset dword_100113C +
mov hModule esi +
call sub_1001CB4  +
cmp edi ebx +
jnz loc_1002610  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002693  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002693  +
push offset dword_10011F8  +
push 24h  +
jmp loc_1002674  +
lea eax [ebp+var_2E0] +
push eax  +
push edi  +
call sub_100204C  +
test al al +
jnz loc_100263C  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002693  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002693  +
push offset dword_10011F8  +
push 25h  +
jmp loc_1002674  +
cmp [ebp+var_8] 1 +
jz loc_100264B  +
cmp [ebp+var_8] 2 +
jz loc_100264B  +
mov [ebp+var_8] ebx +
lea eax [ebp+var_2E0] +
push eax  +
call sub_1001D47  +
test al al +
jnz loc_1002681  +
mov eax hModule +
cmp eax offset hModule +
jz loc_1002693  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002693  +
push offset dword_10011F8  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001365  +
jmp loc_1002693  +
lea eax [ebp+var_2E0] +
push eax  +
call sub_100196C  +
mov [ebp+var_2E4] eax +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
cmp [ebp+lpMem] ebx +
jz loc_10026B0  +
push [ebp+lpMem]  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov [ebp+lpMem] ebx +
cmp [ebp+var_18] ebx +
jz loc_10026C1  +
push [ebp+var_18]  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov [ebp+var_18] ebx +
cmp [ebp+var_14] ebx +
jz loc_10026D2  +
push [ebp+var_14]  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov [ebp+var_14] ebx +
cmp [ebp+var_10] ebx +
jz loc_10026E3  +
push [ebp+var_10]  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov [ebp+var_10] ebx +
push [ebp+hLibModule]  +
call ds:__imp_FreeLibrary  +
call sub_1001D02  +
mov eax [ebp+var_2E4] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002BDA  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+hModule] +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [ebp+arg_4] +
sub edi [eax+0Ch] +
mov eax [eax+10h] +
mov ecx offset __ImageBase +
sub edi ecx +
sar edi 2 +
add esi ecx +
mov edx [esi] +
lea eax __ImageBase[eax+edi*4] +
add ebx ecx +
mov ecx [eax] +
mov [ebp+hModule] edx +
lea eax (__ImageBase+2)[ecx] +
test ecx ecx +
jns loc_100275A  +
movzx eax cx +
mov [ebp+lpProcName] eax +
test edx edx +
jnz loc_10027D9  +
push edx  +
push edx  +
push ebx  +
call LoadLibraryExA  +
mov edi eax +
mov [ebp+hModule] edi +
test edi edi +
jz loc_10027B7  +
push 0  +
push edi  +
push esi  +
call InterlockedCompareExchange  +
mov esi eax +
test esi esi +
jnz loc_10027AC  +
push 8  +
pop ecx  +
lea edi [ebp+var_28] +
stos   +
mov eax [ebp+hModule] +
mov [ebp+var_14] eax +
mov eax ds:dword_100129C +
mov [ebp+var_2C] 24h +
mov [ebp+var_20] ebx +
test eax eax +
jz loc_10027D9  +
lea ecx [ebp+var_2C] +
push ecx  +
push 5  +
call eax  +
jmp loc_10027D9  +
push edi  +
call FreeLibrary  +
mov [ebp+hModule] esi +
jmp loc_10027D9  +
call GetLastError  +
cmp eax 7Eh +
jz loc_10027C8  +
cmp eax 0C1h +
jnz loc_100281B  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call InterlockedCompareExchange  +
test eax eax +
jz loc_10027DF  +
mov [ebp+hModule] eax +
cmp [ebp+hModule] 0FFFFFFFFh +
jnz loc_10027E8  +
mov [ebp+var_4] 1 +
jmp loc_100281B  +
cmp [ebp+hModule] 0 +
jz loc_100281B  +
push [ebp+lpProcName]  +
push [ebp+hModule]  +
call GetProcAddress  +
mov esi eax +
test esi esi +
jnz loc_1002810  +
call GetLastError  +
cmp eax 7Fh +
jz loc_1002810  +
cmp eax 0B6h +
jnz loc_1002817  +
mov [ebp+var_4] 1 +
test esi esi +
jnz loc_1002826  +
push [ebp+lpProcName]  +
push ebx  +
call DelayLoadFailureHook  +
mov esi eax +
cmp [ebp+var_4] 0 +
jz loc_1002831  +
mov eax [ebp+arg_4] +
mov [eax] esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov eax offset CloseWindowStation +
jmp $+5  +
push ecx  +
push edx  +
push eax  +
push offset USER32_dll_import_table  +
call sub_1002710  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset GetUserObjectInformationW +
jmp loc_1002898  +
***
mov eax offset GetProcessWindowStation +
jmp loc_1002898  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10028DE  +
test eax eax +
jnz loc_10028E3  +
mov ecx [esi] +
test ecx ecx +
jz loc_10028DB  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10028CF  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100408C +
push offset dword_100407C  +
push dword_1004088  +
mov dword_100407C eax +
push offset unk_100406C  +
push offset unk_1004070  +
push offset unk_1004068  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1004078 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:__imp_InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1002986  +
cmp eax esi +
jnz loc_1002979  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1002989  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1002960  +
xor esi esi +
inc esi  +
mov eax dword_10043C4 +
cmp eax esi +
jnz loc_100299C  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10029CB  +
mov eax dword_10043C4 +
test eax eax +
jnz loc_10029C5  +
mov dword_10043C4 esi +
push offset dword_1001118  +
push offset dword_100110C  +
call sub_10028C2  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10029CB  +
jmp loc_1002AEF  +
mov dword_1004084 esi +
mov eax dword_10043C4 +
cmp eax esi +
jnz loc_10029EF  +
push offset dword_1001108  +
push offset dword_1001100  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10043C4 2 +
cmp [ebp+var_20] ebx +
jnz loc_10029FC  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10043CC ebx +
jz loc_1002A1D  +
push offset dword_10043CC  +
call sub_1002CF9  +
pop ecx  +
test eax eax +
jz loc_1002A1D  +
push ebx  +
push 2  +
push ebx  +
call dword_10043CC  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_1002AEF  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_1002A42  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_1002A57  +
cmp cx 20h +
ja loc_1002A57  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_1002A42  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1002A63  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_1002A66  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push offset __ImageBase  +
call _wWinMain@16  +
mov dword_1004080 eax +
cmp dword_1004074 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_1002A98  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_1002A2C  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_1004080 eax +
xor ebx ebx +
cmp dword_1004074 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_1004084 ebx +
jnz loc_1002ADA  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1004080 +
jmp loc_1002AFB  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp word ptr ds:__ImageBase ax +
jz loc_1002B18  +
xor eax eax +
jmp loc_1002B65  +
mov eax ds:dword_100003C +
lea eax __ImageBase[eax] +
cmp dword ptr [eax] 4550h +
jnz loc_1002B14  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1002B52  +
cmp ecx 20Bh +
jnz loc_1002B14  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1002B14  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1002B60  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1002B14  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1004074 eax +
call sub_1002E92  +
push eax  +
call ds:__set_app_type  +
or dword_10043BC 0FFFFFFFFh +
or dword_10043C0 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1004094 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1004090 +
mov [eax] ecx +
call sub_1002E24  +
cmp dword_1004014 0 +
jnz loc_1002BBE  +
push offset sub_1002E24  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1002E0C  +
xor eax eax +
retn   +
***
call sub_1002ED1  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_1004004 +
jnz loc_1002BE5  +
retn 0  +
jmp loc_1002F67  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1002C38  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1002C38  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1002C32  +
cmp eax 19930521h +
jz loc_1002C32  +
cmp eax 19930522h +
jz loc_1002C32  +
cmp eax 1994000h +
jnz loc_1002C38  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1002BF8+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1002C86  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1002C82  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1002CED  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1002CE5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1002CEF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1002CD5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_1002C70  +
pop ecx  +
test eax eax +
jz loc_1002D56  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1002CB0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002D56  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1002D5F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1002BDA  +
push offset dword_1004004  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1002E85  +
cmp ecx 0FFFFFFFFh +
jz loc_1002E85  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1002E7E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1002E7E  +
cmp edx 10000000h +
jnb loc_1002E7E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1002E7E  +
jmp loc_1002E79  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1002EC7  +
push eax  +
call sub_1002E2C  +
test eax eax +
jz loc_1002EC7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1002EBC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1002EC7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1004004 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1002F03  +
test eax ebx +
jz loc_1002F03  +
not eax  +
mov dword_1004008 eax +
jmp loc_1002F5E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1002F4A  +
test dword_1004004 ebx +
jnz loc_1002F4F  +
mov esi 0BB40E64Fh +
mov dword_1004004 esi +
not esi  +
mov dword_1004008 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1004198 eax +
mov dword_1004194 ecx +
mov dword_1004190 edx +
mov dword_100418C ebx +
mov dword_1004188 esi +
mov dword_1004184 edi +
mov word_10041B0 ss +
mov word_10041A4 cs +
mov word_1004180 ds +
mov word_100417C es +
mov word_1004178 fs +
mov word_1004174 gs +
pushf   +
pop dword_10041A8  +
mov eax [ebp+0] +
mov dword_100419C eax +
mov eax [ebp+4] +
mov dword_10041A0 eax +
lea eax [ebp+8] +
mov dword_10041AC eax +
mov eax [ebp-320h] +
mov dword_10040E8 10001h +
mov eax dword_10041A0 +
mov dword_10040A4 eax +
mov dword_1004098 0C0000409h +
mov dword_100409C 1 +
mov eax dword_1004004 +
mov [ebp-328h] eax +
mov eax dword_1004008 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov eax offset PathAppendW +
jmp $+5  +
push ecx  +
push edx  +
push eax  +
push offset SHLWAPI_dll_import_table  +
call sub_1002710  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset CommandLineToArgvW +
jmp $+5  +
push ecx  +
push edx  +
push eax  +
push offset SHELL32_dll_import_table  +
call sub_1002710  +
pop edx  +
pop ecx  +
jmp eax  +
***
retf   +
***
arpl [ebp+73h] sp +
jnb $+2  +
iret   +
***
