mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_100178E  +
cmp [esi] al +
jz loc_100178A  +
inc esi  +
dec edx  +
jnz loc_1001782  +
test edx edx +
jnz loc_1001793  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_10017A4  +
test eax eax +
jl loc_10017A1  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] eax +
jb loc_10017C6  +
mov ecx [ebp+arg_4] +
sub ecx eax +
cmp [ebp+arg_0] ecx +
jb loc_10017C6  +
sub eax [ebp+arg_4] +
add eax [ebp+arg_0] +
jmp loc_10017C8  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
push offset LibFileName  +
mov [ebp+var_10] ebx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call ds:LoadLibraryA  +
mov [ebp+hLibModule] eax +
cmp eax ebx +
jz loc_1001869  +
push edi  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
mov edi eax +
cmp edi ebx +
jz loc_100185F  +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [ebp+var_10] 1 +
mov [esi] ebx +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_100185F  +
push esi  +
push [ebp+pSid]  +
push ebx  +
call edi  +
push [ebp+pSid]  +
call ds:FreeSid  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
pop edi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_10] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dword_100C1F4 +
push ebx  +
xor ebx ebx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+var_10] ebx +
cmp eax 2 +
jnz loc_10019B0  +
lea eax [ebp+var_10] +
push eax  +
call sub_10017D1  +
test eax eax +
jnz loc_100199E  +
lea eax [ebp+hObject] +
push eax  +
push 8  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_10019B0  +
push edi  +
mov edi ds:GetTokenInformation +
lea eax [ebp+ReturnLength] +
push eax  +
push ebx  +
push ebx  +
push 2  +
push [ebp+hObject]  +
call edi  +
test eax eax +
jnz loc_1001992  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_1001992  +
push esi  +
push [ebp+ReturnLength]  +
push ebx  +
call ds:LocalAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_1001991  +
lea eax [ebp+ReturnLength] +
push eax  +
push [ebp+ReturnLength]  +
push esi  +
push 2  +
push [ebp+hObject]  +
call edi  +
test eax eax +
jz loc_100198A  +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_100198A  +
cmp [esi] ebx +
jbe loc_1001981  +
lea edi [esi+4] +
push [ebp+pSid]  +
push dword ptr [edi]  +
call ds:EqualSid  +
test eax eax +
jnz loc_1001976  +
inc ebx  +
add edi 8 +
cmp ebx [esi] +
jb loc_100195D  +
jmp loc_1001981  +
xor eax eax +
inc eax  +
mov dword_100C1F4 eax +
mov [ebp+var_10] eax +
push [ebp+pSid]  +
call ds:FreeSid  +
push esi  +
call ds:LocalFree  +
pop esi  +
push [ebp+hObject]  +
call ds:CloseHandle  +
pop edi  +
jmp loc_10019AD  +
cmp [ebp+var_10] ebx +
jz loc_10019AD  +
mov dword_100C1F4 1 +
mov eax [ebp+var_10] +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
sub eax 110h +
push esi  +
mov esi [ebp+hDlg] +
jz loc_1001A0A  +
dec eax  +
jnz loc_1001A06  +
cmp [ebp+nResult] 83Dh +
jb loc_1001A06  +
cmp [ebp+nResult] 83Eh +
ja loc_1001A06  +
push [ebp+nResult]  +
push esi  +
call ds:EndDialog  +
jmp loc_1001A54  +
xor eax eax +
jmp loc_1001A57  +
call ds:GetDesktopWindow  +
push eax  +
push esi  +
call sub_1003049  +
push 200h  +
lea eax [ebp+String] +
push eax  +
push [ebp+uID]  +
mov [ebp+String] 0 +
push hModule  +
call ds:LoadStringA  +
lea eax [ebp+String] +
push eax  +
push 83Fh  +
push esi  +
call ds:SetDlgItemTextA  +
push 0FFFFFFFFh  +
call ds:MessageBeep  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1006B07  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebx] +
push edi  +
xor edi edi +
jmp loc_1001A82  +
cmp byte ptr [esi] 0 +
jz loc_1001A9E  +
inc esi  +
movsx ax byte ptr [esi] +
movzx eax ax +
push eax  +
push [ebp+arg_4]  +
call sub_10073DE  +
test eax eax +
jnz loc_1001A7C  +
mov [ebx] esi +
movsx ax byte ptr [esi] +
jmp loc_1001AAE  +
xor eax eax +
jmp loc_1001ACA  +
cmp byte ptr [edi+esi] 0 +
jz loc_1001ABE  +
inc edi  +
movsx ax byte ptr [edi+esi] +
movzx eax ax +
push eax  +
push [ebp+arg_4]  +
call sub_10073DE  +
test eax eax +
jz loc_1001AA2  +
lea eax [edi+esi] +
cmp byte ptr [eax] 0 +
jz loc_1001ACA  +
mov byte ptr [eax] 0 +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
xor eax eax +
push eax  +
push 40h  +
push eax  +
push offset Default  +
push 521h  +
push eax  +
call sub_10037C2  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
lea eax [ebp+hObject] +
push eax  +
push 28h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
xor esi esi +
test eax eax +
jnz loc_1001B28  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 4F5h  +
push esi  +
call sub_10037C2  +
xor eax eax +
jmp loc_1001B8F  +
lea eax [ebp+NewState.Privileges] +
push eax  +
push offset Name  +
push esi  +
call ds:LookupPrivilegeValueA  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+NewState] +
push eax  +
push esi  +
push [ebp+hObject]  +
mov [ebp+NewState.PrivilegeCount] 1 +
mov [ebp+NewState.Privileges.Attributes] 2 +
call ds:AdjustTokenPrivileges  +
push [ebp+hObject]  +
mov [ebp+var_8] eax +
call ds:CloseHandle  +
push esi  +
cmp [ebp+var_8] esi +
jnz loc_1001B74  +
push 10h  +
push esi  +
push esi  +
push 4F6h  +
jmp loc_1001B1E  +
push 2  +
call ds:ExitWindowsEx  +
test eax eax +
jnz loc_1001B8C  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 4F7h  +
jmp loc_1001B1E  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp ValueName 0 +
jz locret_1001BDC  +
lea eax [ebp+hKey] +
push eax  +
push 20006h  +
push 0  +
push offset SubKey  +
push 80000002h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz locret_1001BDC  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegDeleteValueA  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpString] +
test esi esi +
jz loc_1001C17  +
push esi  +
call ds:lstrlenA  +
cmp eax 3 +
jl loc_1001C17  +
mov al [esi+1] +
cmp al 3Ah +
jnz loc_1001C09  +
cmp byte ptr [esi+2] 5Ch +
jz loc_1001C12  +
cmp byte ptr [esi] 5Ch +
jnz loc_1001C17  +
cmp al 5Ch +
jnz loc_1001C17  +
xor eax eax +
inc eax  +
jmp loc_1001C19  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov esi 104h +
push esi  +
lea eax [ebp+String] +
push eax  +
xor edi edi +
call ds:GetWindowsDirectoryA  +
test eax eax +
jz loc_1001C9E  +
push offset aWininit_ini  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1007480  +
lea eax [ebp+String] +
push eax  +
push edi  +
push edi  +
push edi  +
call ds:WritePrivateProfileStringA  +
push 40h  +
lea eax [ebp+String] +
push eax  +
call ds:_lopen  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_1001C9E  +
push 2  +
push edi  +
push esi  +
call ds:_llseek  +
push esi  +
mov edi eax +
call ds:_lclose  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1006B07  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor esi esi +
push esi  +
push [ebp+hKey]  +
mov [ebp+cbData] esi +
push 80000002h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_1001CFE  +
lea eax [ebp+cbData] +
push eax  +
push esi  +
push esi  +
push esi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegQueryValueExA  +
test eax eax +
jz loc_1001CF5  +
mov [ebp+cbData] esi +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax [ebp+cbData] +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor esi esi +
push esi  +
push [ebp+hKey]  +
mov [ebp+cValues] esi +
push 80000002h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_1001D5A  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cValues] +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyA  +
test eax eax +
jz loc_1001D51  +
mov [ebp+cValues] esi +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax [ebp+cValues] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1001DA0  +
cmp ecx 1 +
jz loc_1001D94  +
add ecx 0FFFFFFFEh +
cmp ecx 1 +
ja loc_1001DA5  +
push offset aPendingfileren  +
push offset hKey  +
call sub_1001CB3  +
jmp loc_1001DA5  +
push offset stru_100C148  +
call sub_1001D0B  +
jmp loc_1001DA5  +
call sub_1001C23  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
call sub_1001D67  +
xor ecx ecx +
cmp [ebp+arg_0] eax +
setnz cl  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpPathName]  +
call ds:GetFileAttributesA  +
cmp eax 0FFFFFFFFh +
jnz loc_1001DEE  +
push 0  +
push [ebp+lpPathName]  +
call ds:CreateDirectoryA  +
jmp loc_1001DF1  +
and eax 10h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetWindowsDirectoryA  +
test eax eax +
jnz loc_1001E35  +
push eax  +
push 10h  +
push eax  +
push eax  +
push 4F0h  +
push eax  +
call sub_10037C2  +
mov ecx [ebp+arg_0] +
mov cl [ecx] +
xor eax eax +
cmp cl [ebp+Buffer] +
mov ecx [ebp+var_4] +
setz al  +
xor ecx ebp +
call sub_1006B07  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_0] +
test al 1 +
jz loc_1001E6B  +
mov eax 104h +
jmp loc_1001E79  +
and al 2 +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 101h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_8] +
jnb loc_1001E94  +
or eax 0FFFFFFFFh +
jmp loc_1001EA7  +
jbe loc_1001E9B  +
xor eax eax +
inc eax  +
jmp loc_1001EA7  +
mov eax [ebp+arg_4] +
cmp [ebp+arg_C] eax +
ja loc_1001E8F  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1001EC6  +
cmp edx 7FFFFFFFh +
jbe loc_1001ECB  +
mov eax 80070057h +
test eax eax +
jl loc_1001EE1  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1002E0E  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_1001F03  +
cmp edx esi +
jbe loc_1001F08  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_1001F20  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_1001775  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_1001F22  +
xor ecx ecx +
test eax eax +
jl loc_1001F38  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
add ecx ebx +
call sub_1002E0E  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1001F59  +
cmp ecx 7FFFFFFFh +
jbe loc_1001F5E  +
mov eax 80070057h +
test eax eax +
jl loc_1001F9B  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1001F8E  +
cmp eax esi +
ja loc_1001F8E  +
jnz loc_1001F96  +
mov [esi+edi] bl +
jmp loc_1001F96  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
or esi 0FFFFFFFFh +
cmp dword_100D0C8 0 +
jnz loc_1001FC8  +
movzx eax word_100D0CC +
push eax  +
push dword_100D1E4  +
call sub_1001DAE  +
test eax eax +
jz loc_1001FCB  +
push 2  +
pop esi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
jnz loc_1001FE9  +
call sub_1001FA2  +
cmp eax 2 +
jnz loc_1002026  +
test [ebp+arg_0] 4 +
jnz loc_100200B  +
push 4  +
push 40h  +
push 0  +
push offset Default  +
push 522h  +
push 0  +
call sub_10037C2  +
cmp eax 6 +
jnz loc_1002026  +
cmp word_100D0CC 0 +
jnz loc_1002021  +
push 0  +
push 2  +
call ds:ExitWindowsEx  +
jmp loc_1002026  +
call sub_1001AF2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi 103h +
xor ebx ebx +
push esi  +
lea eax [ebp-107h] +
push ebx  +
push eax  +
mov [ebp+String] bl +
call memset  +
push esi  +
lea eax [ebp-20Bh] +
push ebx  +
push eax  +
mov [ebp+LibFileName] bl +
call memset  +
add esp 18h +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push ebx  +
push 2001Fh  +
push ebx  +
push ebx  +
push ebx  +
push offset SubKey  +
push 80000002h  +
mov [ebp+var_218] ebx +
call ds:RegCreateKeyExA  +
test eax eax +
jnz loc_100227C  +
push edi  +
mov [ebp+hLibModule] ebx +
mov esi offset ValueName +
mov edi 0C8h +
push [ebp+hLibModule]  +
push offset aWextract_clean  +
push 50h  +
push esi  +
call sub_1001F43  +
add esp 10h +
lea eax [ebp+cbData] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push esi  +
push [ebp+hKey]  +
call ds:RegQueryValueExA  +
test eax eax +
jnz loc_10020FD  +
inc [ebp+hLibModule]  +
cmp [ebp+hLibModule] edi +
jl loc_10020BE  +
cmp [ebp+hLibModule] edi +
jnz loc_100211C  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ValueName bl +
jmp loc_100227B  +
mov esi 104h +
push esi  +
lea eax [ebp+LibFileName] +
push eax  +
call ds:GetSystemDirectoryA  +
push offset aAdvpack_dll  +
push esi  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_1007480  +
lea eax [ebp+LibFileName] +
push eax  +
call ds:LoadLibraryA  +
mov [ebp+hLibModule] eax +
cmp eax ebx +
jz loc_10021A8  +
push offset aDelnoderundll3  +
push eax  +
call ds:GetProcAddress  +
push [ebp+hLibModule]  +
mov edi eax +
neg edi  +
sbb edi edi +
neg edi  +
mov [ebp+var_218] edi +
call ds:FreeLibrary  +
cmp edi ebx +
jz loc_10021A8  +
push esi  +
lea eax [ebp+String] +
push eax  +
call ds:GetSystemDirectoryA  +
test eax eax +
jz loc_10021C0  +
push offset Default  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1007480  +
jmp loc_10021C0  +
push esi  +
lea eax [ebp+String] +
push eax  +
push hModule  +
call ds:GetModuleFileNameA  +
test eax eax +
jz loc_1002204  +
mov esi ds:lstrlenA +
mov edi offset String +
push edi  +
call esi  +
mov ebx eax +
lea eax [ebp+String] +
push eax  +
call esi  +
lea eax [ebx+eax+50h] +
push eax  +
push 40h  +
mov [ebp+hLibModule] eax +
call ds:LocalAlloc  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_1002212  +
push eax  +
push 10h  +
push eax  +
push eax  +
push 4B5h  +
push eax  +
call sub_10037C2  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_100227B  +
xor ecx ecx +
cmp [ebp+var_218] eax +
setz cl  +
cmp [ebp+var_218] eax +
mov eax offset aRundll32_exeSa +
mov dword_100C650 ecx +
jnz loc_1002235  +
mov eax offset aSDS +
push edi  +
lea ecx [ebp+String] +
push ecx  +
push eax  +
push [ebp+hLibModule]  +
push ebx  +
call sub_1001F43  +
add esp 14h +
push ebx  +
call esi  +
inc eax  +
push eax  +
push ebx  +
push 1  +
push 0  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegSetValueExA  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
push ebx  +
call ds:LocalFree  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 348h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
cmp ValueName bl +
jz loc_10023AC  +
lea eax [ebp+hKey] +
push eax  +
push 2001Fh  +
push ebx  +
push offset SubKey  +
push 80000002h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_10023AC  +
push esi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push ebx  +
push ebx  +
mov esi offset ValueName +
push esi  +
push [ebp+hKey]  +
mov [ebp+cbData] 238h +
call ds:RegQueryValueExA  +
test eax eax +
jnz loc_100239F  +
push 103h  +
lea eax [ebp-107h] +
push ebx  +
push eax  +
mov [ebp+String] bl +
call memset  +
add esp 0Ch +
push 104h  +
lea eax [ebp+String] +
push eax  +
call ds:GetSystemDirectoryA  +
test eax eax +
jz loc_1002354  +
push offset Default  +
push 104h  +
lea eax [ebp+String] +
push eax  +
call sub_1007480  +
push offset String  +
lea eax [ebp+String] +
push eax  +
push offset aRundll32_exeSa  +
lea eax [ebp+Data] +
push 238h  +
push eax  +
call sub_1001F43  +
add esp 14h +
lea eax [ebp+Data] +
push eax  +
call ds:lstrlenA  +
inc eax  +
push eax  +
lea eax [ebp+Data] +
push eax  +
push 1  +
push ebx  +
push esi  +
push [ebp+hKey]  +
call ds:RegSetValueExA  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24Ch +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1002504  +
cmp byte ptr [edi] 0 +
jz loc_1002504  +
push esi  +
push edi  +
mov esi 104h +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1001EB0  +
push offset asc_1001328  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1001EEA  +
lea eax [ebp+FindFileData] +
push eax  +
lea eax [ebp+String] +
push eax  +
call ds:FindFirstFileA  +
mov [ebp+hFindFile] eax +
cmp eax 0FFFFFFFFh +
jz loc_1002503  +
push ebx  +
mov ebx ds:lstrcmpA +
push edi  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1001EB0  +
test byte ptr [ebp+FindFileData.dwFileAttributes] 10h +
lea eax [ebp+FindFileData.cFileName] +
jz loc_10024A7  +
push offset String2  +
push eax  +
call ebx  +
test eax eax +
jz loc_10024D4  +
push offset PathName  +
lea eax [ebp+FindFileData.cFileName] +
push eax  +
call ebx  +
test eax eax +
jz loc_10024D4  +
lea eax [ebp+FindFileData.cFileName] +
push eax  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1001EEA  +
push offset Default  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1007480  +
lea eax [ebp+String] +
push eax  +
call sub_10023BE  +
jmp loc_10024D4  +
push eax  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1001EEA  +
push 80h  +
lea eax [ebp+String] +
push eax  +
call ds:SetFileAttributesA  +
lea eax [ebp+String] +
push eax  +
call ds:DeleteFileA  +
lea eax [ebp+FindFileData] +
push eax  +
push [ebp+hFindFile]  +
call ds:FindNextFileA  +
test eax eax +
jnz loc_1002438  +
push [ebp+hFindFile]  +
call ds:FindClose  +
push edi  +
call ds:RemoveDirectoryA  +
pop ebx  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1006B07  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+arg_0]  +
push offset aLu  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1001F43  +
mov eax [ebp+arg_4] +
add esp 10h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
cmp [ebp+arg_0] 1 +
mov dword_100D0C4 70h +
jnz loc_1002590  +
mov ecx dword ptr [ebp+arg_8] +
push edi  +
push 10h  +
push edi  +
push 0Ah  +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebp+arg_4] +
add eax ecx +
push eax  +
call sub_1002518  +
push eax  +
push 4FAh  +
push edi  +
call sub_10037C2  +
jmp loc_10025FD  +
cmp [ebp+arg_0] 4 +
jnz loc_10025C7  +
mov ecx [ebp+arg_4] +
push 5  +
push 20h  +
push edi  +
push 0Ah  +
lea eax [ebp+var_10] +
push eax  +
mov eax dword ptr [ebp+arg_8] +
add ecx eax +
push ecx  +
call sub_1002518  +
push eax  +
push 4BDh  +
push edi  +
call sub_10037C2  +
mov esi eax +
sub esi 4 +
neg esi  +
sbb esi esi +
inc esi  +
jmp loc_10025FD  +
cmp [ebp+arg_0] 2 +
jnz loc_10025FD  +
push 104h  +
push 40h  +
push eax  +
push 0Ah  +
lea eax [ebp+var_10] +
push eax  +
push dword ptr [ebp+arg_8]  +
call sub_1002518  +
push eax  +
push 4CCh  +
push edi  +
call sub_10037C2  +
cmp eax 6 +
jnz loc_10025FD  +
xor esi esi +
inc esi  +
mov dword_100D0C4 edi +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1006B07  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 11Ch +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_110] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
mov byte ptr [esi] 0 +
cmp byte ptr [ebx] 23h +
push edi  +
jnz loc_1002752  +
inc ebx  +
movsx eax byte ptr [ebx] +
push eax  +
call ds:CharUpperA  +
mov edi ds:CharNextA +
push ebx  +
mov [ebp+var_109] al +
call edi  +
push eax  +
call edi  +
cmp [ebp+var_109] 53h +
mov ebx eax +
jz loc_1002752  +
cmp [ebp+var_109] 57h +
jz loc_1002746  +
push offset aSoftwareMicr_0  +
mov edi 104h +
push edi  +
lea eax [ebp+String] +
push eax  +
mov [ebp+cbData] edi +
call sub_1001EB0  +
push ebx  +
push edi  +
lea eax [ebp+String] +
push eax  +
call sub_1007480  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
lea eax [ebp+String] +
push eax  +
push 80000002h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_1002765  +
lea eax [ebp+cbData] +
push eax  +
push esi  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push offset Default  +
push [ebp+hKey]  +
call ds:RegQueryValueExA  +
test eax eax +
jnz loc_1002738  +
cmp [ebp+Type] 2 +
jnz loc_1002725  +
push edi  +
lea eax [ebp+String] +
push eax  +
push esi  +
call ds:ExpandEnvironmentStringsA  +
test eax eax +
jz loc_1002725  +
lea eax [ebp+String] +
push eax  +
push [ebp+uSize]  +
push esi  +
call sub_1001EB0  +
jmp loc_100272E  +
cmp [ebp+Type] 1 +
jnz loc_1002738  +
mov [ebp+var_110] 1 +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_100275C  +
push [ebp+uSize]  +
push esi  +
call ds:GetWindowsDirectoryA  +
jmp loc_1002765  +
push [ebp+uSize]  +
push esi  +
call ds:GetSystemDirectoryA  +
cmp [ebp+var_110] 0 +
jnz loc_100276F  +
push ebx  +
push [ebp+uSize]  +
push esi  +
call sub_1007480  +
mov ecx [ebp+var_4] +
pop edi  +
xor eax eax +
pop esi  +
xor ecx ebp +
inc eax  +
pop ebx  +
call sub_1006B07  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
cmp [edi+7Ch] ebx +
mov [ebp+hMem] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_8] ebx +
jle loc_10028C9  +
mov [ebp+var_C] ebx +
jmp loc_10027B1  +
xor ebx ebx +
mov eax [ebp+var_C] +
mov ecx [edi+80h] +
add eax edi +
lea esi [eax+ecx+84h] +
mov eax [esi+38h] +
lea eax [eax+edi+84h] +
push eax  +
push [ebp+uSize]  +
push [ebp+lptstrFilename]  +
call sub_1002614  +
test eax eax +
jz loc_10028D0  +
lea eax [ebp+dwHandle] +
push eax  +
push [ebp+lptstrFilename]  +
call GetFileVersionInfoSizeA  +
mov [ebp+dwLen] eax +
cmp eax ebx +
jz loc_10028AD  +
push eax  +
push 42h  +
call ds:GlobalAlloc  +
mov [ebp+hMem] eax +
cmp eax ebx +
jz loc_10028D0  +
push eax  +
call ds:GlobalLock  +
mov ebx eax +
test ebx ebx +
jz loc_10028D0  +
push ebx  +
push [ebp+dwLen]  +
push [ebp+dwHandle]  +
push [ebp+lptstrFilename]  +
call GetFileVersionInfoA  +
test eax eax +
jz loc_10028A2  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset SubBlock  +
push ebx  +
call VerQueryValueA  +
test eax eax +
jz loc_10028A2  +
cmp [ebp+puLen] 0 +
jz loc_10028A2  +
mov eax [ebp+lpBuffer] +
mov edi [eax+0Ch] +
mov ebx [eax+8] +
lea ecx [esi+10h] +
xor edx edx +
push dword ptr [ecx-0Ch]  +
push dword ptr [ecx-10h]  +
push edi  +
push ebx  +
call sub_1001E82  +
push dword ptr [ecx]  +
mov [ebp+edx+var_28] eax +
push dword ptr [ecx-4]  +
push edi  +
push ebx  +
call sub_1001E82  +
mov [ebp+edx+var_30] eax +
add edx 4 +
add ecx 18h +
cmp edx 8 +
jl loc_100285B  +
cmp [ebp+var_28] 0 +
jl loc_1002893  +
cmp [ebp+var_30] 0 +
jle loc_100289F  +
cmp [ebp+var_24] 0 +
jl loc_10028F1  +
cmp [ebp+var_2C] 0 +
jg loc_10028F1  +
mov edi [ebp+arg_0] +
push [ebp+hMem]  +
call ds:GlobalUnlock  +
jmp loc_10028B6  +
cmp [esi] ebx +
jnz loc_10028D0  +
cmp [esi+4] ebx +
jnz loc_10028D0  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add [ebp+var_C] 3Ch +
cmp eax [edi+7Ch] +
jl loc_10027AF  +
mov [ebp+var_10] 1 +
cmp [ebp+hMem] 0 +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
jz loc_10028EA  +
push [ebp+hMem]  +
call ds:GlobalFree  +
mov eax [ebp+var_10] +
leave   +
retn 10h  +
push [ebp+hMem]  +
call ds:GlobalUnlock  +
jmp loc_10028D0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_10C] edi +
mov byte ptr [edi] 0 +
test esi esi +
jz loc_1002A26  +
cmp byte ptr [esi] 0 +
jz loc_1002A26  +
push 104h  +
lea eax [ebp+String] +
push eax  +
push hModule  +
call ds:GetModuleFileNameA  +
movzx eax byte ptr [esi] +
test al al +
jz loc_1002A23  +
push ebx  +
mov ebx ds:lstrlenA +
push eax  +
call ds:IsDBCSLeadByte  +
test eax eax +
mov al [esi] +
mov [edi] al +
jz loc_1002977  +
mov al [esi+1] +
mov [edi+1] al +
cmp byte ptr [esi] 23h +
jnz loc_1002A06  +
push esi  +
call ds:CharNextA  +
mov esi eax +
movsx eax byte ptr [esi] +
push eax  +
call ds:CharUpperA  +
cmp al 44h +
jnz loc_10029CF  +
lea eax [ebp+String] +
push eax  +
call sub_1007417  +
lea eax [ebp+String] +
push eax  +
call ebx  +
lea eax [ebp+eax+String] +
push eax  +
lea eax [ebp+String] +
push eax  +
call ds:CharPrevA  +
test eax eax +
jz loc_10029DD  +
cmp byte ptr [eax] 5Ch +
jnz loc_10029DD  +
mov byte ptr [eax] 0 +
jmp loc_10029DD  +
movsx eax byte ptr [esi] +
push eax  +
call ds:CharUpperA  +
cmp al 45h +
jnz loc_1002A01  +
lea eax [ebp+String] +
push eax  +
mov eax [ebp+var_10C] +
push edi  +
push [ebp+arg_8]  +
call sub_10017AA  +
push eax  +
push edi  +
call sub_1001EB0  +
push edi  +
call ebx  +
add edi eax +
jmp loc_1002A0F  +
cmp byte ptr [esi] 23h +
jnz loc_1002A0F  +
push edi  +
call ds:CharNextA  +
mov edi eax +
push esi  +
call ds:CharNextA  +
mov esi eax +
mov al [esi] +
test al al +
jnz loc_1002962  +
pop ebx  +
mov byte ptr [edi] 0 +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1006B07  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 620h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
push eax  +
mov [ebp+var_61C] eax +
mov esi 104h +
mov [ebp+var_620] ecx +
mov ecx [ebp+arg_C] +
push esi  +
lea eax [ebp+var_20C] +
push eax  +
mov [ebp+var_618] ecx +
call sub_1001EB0  +
cmp byte ptr [ebp+var_20C] 22h +
jnz loc_1002A97  +
lea eax [ebp+var_20C+1] +
push offset asc_10013BC  +
jmp loc_1002AA2  +
lea eax [ebp+var_20C] +
push offset asc_10013B8  +
mov [ebp+lpString] eax +
lea eax [ebp+lpString] +
push eax  +
call sub_1001A6B  +
mov ebx [ebp+lpString] +
push ebx  +
mov dword ptr [ebp+var_614] eax +
call sub_1001BE3  +
test eax eax +
lea eax [ebp+FileName] +
jnz loc_1002AEC  +
push offset String  +
push esi  +
push eax  +
call sub_1001EB0  +
push ebx  +
push esi  +
lea eax [ebp+FileName] +
push eax  +
call sub_1007480  +
jmp loc_1002AF4  +
push ebx  +
push esi  +
push eax  +
call sub_1001EB0  +
push 2Eh  +
push ebx  +
call sub_1007503  +
mov esi ds:CompareStringA +
or edi 0FFFFFFFFh +
test eax eax +
jz loc_1002CCF  +
push edi  +
push offset a_inf  +
push edi  +
push eax  +
push 1  +
push 7Fh  +
call esi  +
dec eax  +
dec eax  +
jnz loc_1002CCF  +
lea eax [ebp+FileName] +
push eax  +
call sub_10074DB  +
test eax eax +
jnz loc_1002B50  +
push eax  +
push 10h  +
push eax  +
lea ecx [ebp+FileName] +
push ecx  +
push 525h  +
push eax  +
call sub_10037C2  +
xor eax eax +
jmp loc_1002DF8  +
mov eax dword ptr [ebp+var_614] +
mov [ebp+lpString] eax +
push offset asc_10013AC  +
lea eax [ebp+lpString] +
push eax  +
call sub_1001A6B  +
mov esi ds:lstrlenA +
mov ebx offset aDefaultinstall +
push ebx  +
mov edi eax +
call esi  +
test edi edi +
jz loc_1002BAD  +
cmp byte ptr [edi] 0 +
jz loc_1002B8C  +
mov [ebp+lpString] edi +
push offset asc_10013A8  +
lea eax [ebp+lpString] +
push eax  +
call sub_1001A6B  +
mov edi [ebp+lpString] +
cmp byte ptr [edi] 0 +
jz loc_1002BB3  +
push edi  +
call esi  +
jmp loc_1002BB3  +
mov edi [ebp+lpString] +
mov esi 200h +
push esi  +
push 40h  +
call ds:LocalAlloc  +
xor ecx ecx +
mov [ebp+lpString] eax +
cmp eax ecx +
jnz loc_1002BDD  +
push ecx  +
push 10h  +
push ecx  +
push ecx  +
push 4B5h  +
push ecx  +
jmp loc_1002B44  +
mov eax edi +
cmp [edi] cl +
jnz loc_1002BE5  +
mov eax ebx +
lea edx [ebp+FileName] +
push edx  +
push ecx  +
push offset KeyName  +
push eax  +
call ds:GetPrivateProfileIntA  +
mov dword_100D0C8 eax +
mov eax [ebp+var_618] +
mov dword ptr [eax] 1 +
lea eax [ebp+FileName] +
push eax  +
push 8  +
push [ebp+lpString]  +
push offset Default  +
push offset aAdvancedinf  +
push offset AppName  +
call ds:GetPrivateProfileStringA  +
test eax eax +
jbe loc_1002C67  +
or dword_100DAF4 4 +
cmp byte ptr [edi] 0 +
jnz loc_1002C40  +
mov edi ebx +
push edi  +
push [ebp+arg_4]  +
push [ebp+var_61C]  +
call sub_1001EB0  +
lea eax [ebp+FileName] +
push eax  +
push esi  +
push [ebp+lpString]  +
call sub_1001EB0  +
jmp loc_1002DE7  +
and dword_100DAF4 0FFFFFFFBh +
cmp word_100D0CC 0 +
jnz loc_1002C97  +
push 104h  +
lea eax [ebp+FileName] +
push eax  +
push eax  +
mov dword ptr [ebp+var_614] offset aSetupx_dll +
call ds:GetShortPathNameA  +
jmp loc_1002CA1  +
mov dword ptr [ebp+var_614] offset aSetupapi_dll +
cmp byte ptr [edi] 0 +
jnz loc_1002CA8  +
mov edi ebx +
lea eax [ebp+FileName] +
push eax  +
push edi  +
push dword ptr [ebp+var_614]  +
push offset aRundll32_exeSI  +
push esi  +
push [ebp+lpString]  +
call sub_1001F43  +
add esp 18h +
jmp loc_1002DE7  +
push 2Eh  +
push ebx  +
call sub_1007503  +
xor ebx ebx +
cmp eax ebx +
jz loc_1002D50  +
push edi  +
push offset a_bat  +
push edi  +
push eax  +
push 1  +
push 7Fh  +
call esi  +
dec eax  +
dec eax  +
jnz loc_1002D50  +
mov esi ds:lstrlenA +
mov edi offset aCommand_comCS +
push edi  +
call esi  +
lea ecx [ebp+FileName] +
push ecx  +
mov [ebp+var_618] eax +
call esi  +
mov ecx [ebp+var_618] +
lea esi [ecx+eax+8] +
push esi  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+lpString] eax +
cmp eax ebx +
jnz loc_1002D39  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 4B5h  +
push ebx  +
jmp loc_1002B44  +
lea ecx [ebp+FileName] +
push ecx  +
push edi  +
push esi  +
push eax  +
call sub_1001F43  +
add esp 10h +
jmp loc_1002DE7  +
mov esi 400h +
push esi  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+lpString] eax +
cmp eax ebx +
jz loc_1002D29  +
lea eax [ebp+FileName] +
push eax  +
call ds:GetFileAttributesA  +
cmp eax edi +
jz loc_1002DC1  +
test al 10h +
jnz loc_1002DC1  +
lea eax [ebp+FileName] +
push eax  +
push esi  +
lea eax [ebp+var_60C] +
push eax  +
call sub_1001EB0  +
mov edi dword ptr [ebp+var_614] +
cmp edi ebx +
jz loc_1002DD4  +
cmp [edi] bl +
jz loc_1002DD4  +
push offset asc_10013B8  +
push esi  +
lea eax [ebp+var_60C] +
push eax  +
call sub_1001EEA  +
push edi  +
push esi  +
lea eax [ebp+var_60C] +
push eax  +
call sub_1001EEA  +
jmp loc_1002DD4  +
push [ebp+var_61C]  +
lea eax [ebp+var_60C] +
push esi  +
push eax  +
call sub_1001EB0  +
push esi  +
push [ebp+lpString]  +
lea eax [ebp+var_60C] +
push eax  +
call sub_1002901  +
mov eax [ebp+var_620] +
mov ecx [ebp+lpString] +
mov [eax] ecx +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1002E3E  +
cmp [ebp+arg_4] eax +
jz loc_1002E3A  +
mov dl [ebx] +
test dl dl +
jz loc_1002E3A  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1002E22  +
test esi esi +
jnz loc_1002E45  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1002E51  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call ds:GetVersion  +
test eax eax +
jns loc_1002E6A  +
xor eax eax +
retn   +
movzx eax al +
retn   +
***
call sub_1002E5D  +
cmp eax 6 +
jb locret_1002EA6  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz locret_1002EA6  +
push offset aHeapsetinforma  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz locret_1002EA6  +
push 0  +
push 0  +
push 1  +
push 0  +
call eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFCh  +
push [ebp+hWnd]  +
call ds:GetWindowLongA  +
push [ebp+dwNewLong]  +
mov lpPrevWndFunc eax +
push 0FFFFFFFCh  +
push [ebp+hWnd]  +
call ds:SetWindowLongA  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+Msg] 0B1h +
jnz loc_1002EF6  +
cmp [ebp+wParam] 0 +
jnz loc_1002EF6  +
cmp [ebp+lParam] 0FFFFFFFEh +
jnz loc_1002EF6  +
xor eax eax +
jmp loc_1002F0E  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push [ebp+hWnd]  +
push lpPrevWndFunc  +
call ds:CallWindowProcA  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpString] +
test esi esi +
jz loc_1002F45  +
push esi  +
call ds:lstrlenA  +
cmp eax 3 +
jl loc_1002F45  +
mov al [esi+1] +
cmp al 3Ah +
jz loc_1002F40  +
cmp byte ptr [esi] 5Ch +
jnz loc_1002F45  +
cmp al 5Ch +
jnz loc_1002F45  +
xor eax eax +
inc eax  +
jmp loc_1002F47  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi ds:PeekMessageA +
push edi  +
xor edi edi +
xor ebx ebx +
mov [ebp+var_4] edi +
inc ebx  +
push 0FFh  +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+pHandles] +
push eax  +
push ebx  +
call ds:MsgWaitForMultipleObjects  +
test eax eax +
jz loc_1002FB7  +
push ebx  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jz loc_1002F6A  +
cmp [ebp+Msg.message] 12h +
jnz loc_1002F9A  +
mov [ebp+var_4] ebx +
jmp loc_1002FA4  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageA  +
push ebx  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jnz loc_1002F8F  +
cmp [ebp+var_4] edi +
jz loc_1002F6A  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test dword_100DAF4 800h +
jz loc_1002FDE  +
mov eax [ebp+arg_0] +
mov dword_100D0C4 eax +
jmp loc_1003017  +
call sub_1001FA2  +
cmp eax 2 +
jz loc_100300D  +
mov eax [ebp+arg_0] +
mov ecx eax +
and ecx 0FF000000h +
cmp ecx 0AA000000h +
jnz loc_1002FFF  +
test al 1 +
jnz loc_100300D  +
test dword_100DAF4 200h +
jz loc_1003017  +
jmp loc_1002FD7  +
mov dword_100D0C4 0BC2h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
dec eax  +
jnz loc_100303E  +
push dword ptr [ebp+14h]  +
push 1  +
push 466h  +
push dword ptr [ebp+8]  +
call ds:SendMessageA  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetWindowRect +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call edi  +
mov esi [ebp+Rect.right] +
mov ebx [ebp+Rect.bottom] +
sub esi [ebp+Rect.left] +
sub ebx [ebp+Rect.top] +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+hDC]  +
call edi  +
mov eax [ebp+var_10] +
sub eax [ebp+var_18] +
mov edi [ebp+var_14] +
push [ebp+hWnd]  +
sub edi [ebp+var_1C] +
mov [ebp+var_8] eax +
call ds:GetDC  +
push 8  +
push eax  +
mov [ebp+hDC] eax +
call ds:GetDeviceCaps  +
push 0Ah  +
push [ebp+hDC]  +
mov [ebp+var_4] eax +
call ds:GetDeviceCaps  +
push [ebp+hDC]  +
mov [ebp+var_C] eax +
push [ebp+hWnd]  +
call ds:ReleaseDC  +
mov eax edi +
sub eax esi +
cdq   +
sub eax edx +
mov ecx eax +
sar ecx 1 +
add ecx [ebp+var_1C] +
push 0  +
pop edi  +
jns loc_10030D0  +
xor ecx ecx +
jmp loc_10030DE  +
mov eax [ebp+var_4] +
lea edx [ecx+esi] +
cmp edx eax +
jle loc_10030DE  +
sub eax esi +
mov ecx eax +
mov eax [ebp+var_8] +
sub eax ebx +
cdq   +
sub eax edx +
sar eax 1 +
add eax [ebp+var_18] +
jns loc_10030F1  +
xor eax eax +
jmp loc_10030FF  +
mov edx [ebp+var_C] +
lea esi [eax+ebx] +
cmp esi edx +
jle loc_10030FF  +
sub edx ebx +
mov eax edx +
push 5  +
push edi  +
push edi  +
push eax  +
push ecx  +
push edi  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:FindResourceA +
push edi  +
push 0Ah  +
push [ebp+lpName]  +
xor ebx ebx +
push ebx  +
call esi  +
push eax  +
push ebx  +
call ds:SizeofResource  +
mov edi eax +
cmp edi [ebp+arg_8] +
ja loc_1003182  +
cmp [ebp+arg_4] ebx +
jz loc_1003182  +
cmp edi ebx +
jnz loc_100314F  +
xor eax eax +
jmp loc_1003182  +
push 0Ah  +
push [ebp+lpName]  +
push ebx  +
call esi  +
push eax  +
push ebx  +
call ds:LoadResource  +
push eax  +
call ds:LockResource  +
mov esi eax +
cmp esi ebx +
jz loc_100314B  +
push edi  +
push esi  +
push [ebp+arg_4]  +
call memcpy  +
add esp 0Ch +
push esi  +
call ds:FreeResource  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpBuffer] +
test esi esi +
jz loc_10031B1  +
push [ebp+nBufferMax]  +
mov byte ptr [esi] 0 +
push esi  +
push [ebp+uID]  +
push hModule  +
call ds:LoadStringA  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+lpPathName] +
mov cl [edi] +
xor ebx ebx +
cmp cl bl +
jz loc_100322C  +
push esi  +
lea esi [edi+1] +
mov al [esi] +
mov [ebp+lpPathName] ebx +
cmp al 3Ah +
jnz loc_10031E7  +
cmp byte ptr [edi+2] 5Ch +
jnz loc_10031E7  +
lea esi [edi+3] +
jmp loc_1003227  +
cmp cl 5Ch +
jnz loc_1003227  +
cmp al cl +
jnz loc_1003227  +
lea esi [edi+2] +
mov [ebp+lpPathName] 2 +
jmp loc_1003227  +
cmp byte ptr [esi] 5Ch +
jnz loc_100321E  +
cmp byte ptr [esi-1] 3Ah +
jz loc_100321E  +
cmp [ebp+lpPathName] ebx +
jz loc_1003211  +
dec [ebp+lpPathName]  +
jmp loc_100321E  +
push ebx  +
push edi  +
mov [esi] bl +
call ds:CreateDirectoryA  +
mov byte ptr [esi] 5Ch +
push esi  +
call ds:CharNextA  +
mov esi eax +
cmp [esi] bl +
jnz loc_10031FC  +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
imul esi esi +
mov eax dword_100DB24[esi] +
sub eax 0 +
jz loc_1003288  +
dec eax  +
jnz loc_10032AE  +
mov eax dword_100DB2C[esi] +
push edi  +
mov edi dword_100DB30[esi] +
sub edi eax +
cmp [ebp+10h] edi +
jnb loc_1003268  +
mov edi [ebp+10h] +
mov ecx dword_100DB28[esi] +
push edi  +
add ecx eax +
push ecx  +
push dword ptr [ebp+0Ch]  +
call memcpy  +
add esp 0Ch +
add dword_100DB2C[esi] edi +
mov eax edi +
pop edi  +
jmp loc_10032B1  +
push 0  +
lea eax [ebp+10h] +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword_100DB34[esi]  +
call ds:ReadFile  +
test eax eax +
jnz loc_10032A9  +
or eax 0FFFFFFFFh +
jmp loc_10032B1  +
mov eax [ebp+10h] +
jmp loc_10032B1  +
mov eax [ebp+8] +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push hEvent  +
call sub_1002F51  +
cmp dword_100D298 0 +
jz loc_10032D7  +
or eax 0FFFFFFFFh +
pop ebp  +
retn   +
***
push edi  +
push 0  +
lea eax [ebp+10h] +
push eax  +
mov eax [ebp+8] +
push dword ptr [ebp+10h]  +
imul eax eax +
push dword ptr [ebp+0Ch]  +
push dword_100DB34[eax]  +
call ds:WriteFile  +
test eax eax +
jnz loc_10032FF  +
or edi 0FFFFFFFFh +
jmp loc_1003344  +
mov edi [ebp+10h] +
cmp edi 0FFFFFFFFh +
jz loc_1003344  +
add dword_100D4C0 edi +
cmp dword_100C2BC 0 +
jz loc_1003344  +
mov ecx hDlg +
test ecx ecx +
jz loc_1003344  +
mov eax dword_100D4C0 +
imul eax eax +
xor edx edx +
div  dword_100D4B8 +
push 0  +
push eax  +
push 402h  +
push 83Ah  +
push ecx  +
call ds:SendDlgItemMessageA  +
mov eax edi +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
imul esi esi +
push edi  +
xor edi edi +
inc edi  +
cmp dword_100DB24[esi] edi +
jnz loc_1003382  +
xor eax eax +
mov dword_100DB20[esi] edi +
mov dword_100DB28[esi] eax +
mov dword_100DB30[esi] eax +
mov dword_100DB2C[esi] eax +
jmp loc_100339F  +
push dword_100DB34[esi]  +
call ds:CloseHandle  +
test eax eax +
jz loc_100339C  +
xor eax eax +
mov dword_100DB20[esi] edi +
jmp loc_100339F  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [ebp+10h] +
imul eax eax +
cmp dword_100DB24[eax] 1 +
jnz loc_10033F1  +
sub ecx 0 +
jz loc_10033E0  +
dec ecx  +
jz loc_10033D5  +
dec ecx  +
jnz loc_1003424  +
mov ecx dword_100DB30[eax] +
add ecx [ebp+0Ch] +
jmp loc_10033E3  +
mov ecx [ebp+0Ch] +
add dword_100DB2C[eax] ecx +
jmp loc_10033E9  +
mov ecx [ebp+0Ch] +
mov dword_100DB2C[eax] ecx +
mov eax dword_100DB2C[eax] +
pop ebp  +
retn   +
***
sub ecx 0 +
jz loc_1003406  +
dec ecx  +
jz loc_1003401  +
dec ecx  +
jnz loc_100340A  +
push 2  +
pop ecx  +
jmp loc_100340D  +
xor ecx ecx +
inc ecx  +
jmp loc_100340D  +
xor ecx ecx +
jmp loc_100340D  +
mov ecx [ebp+8] +
push ecx  +
push 0  +
push dword ptr [ebp+0Ch]  +
push dword_100DB34[eax]  +
call ds:SetFilePointer  +
cmp eax 0FFFFFFFFh +
jnz loc_1003427  +
or eax 0FFFFFFFFh +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_0] +
imul esi esi +
cmp dword_100DB24[esi] 1 +
jnz loc_100344A  +
xor eax eax +
jmp loc_1003488  +
lea eax [ebp+LocalFileTime] +
push eax  +
push dword ptr [ebp+wFatTime]  +
push dword ptr [ebp+wFatDate]  +
call ds:DosDateTimeToFileTime  +
test eax eax +
jz loc_1003446  +
lea eax [ebp+LastWriteTime] +
push eax  +
lea eax [ebp+LocalFileTime] +
push eax  +
call ds:LocalFileTimeToFileTime  +
test eax eax +
jz loc_1003446  +
lea eax [ebp+LastWriteTime] +
push eax  +
push eax  +
push eax  +
push dword_100DB34[esi]  +
call ds:SetFileTime  +
neg eax  +
sbb eax eax +
neg eax  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test ax ax +
jnz loc_10034A6  +
mov eax 80h +
jmp loc_10034A9  +
and eax 27h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
call ds:GlobalAlloc  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ds:GlobalFree  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
push 0  +
mov esi offset aCabinet +
push esi  +
call sub_100311B  +
push 0Ah  +
push esi  +
push 0  +
mov dword_100D204 eax +
call ds:FindResourceA  +
push eax  +
push 0  +
call ds:LoadResource  +
push eax  +
call ds:LockResource  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov hResData eax +
pop esi  +
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov al [esi] +
push edi  +
xor edi edi +
jmp loc_1003552  +
cmp al 20h +
jz loc_100354E  +
cmp al 9 +
jz loc_100354E  +
cmp al 0Dh +
jz loc_100354E  +
cmp al 0Ah +
jz loc_100354E  +
cmp al 0Bh +
jz loc_100354E  +
cmp al 0Ch +
jnz loc_1003556  +
inc edi  +
mov al [edi+esi] +
test al al +
jnz loc_1003536  +
lea ebx [edi+esi] +
cmp byte ptr [ebx] 0 +
jnz loc_1003562  +
xor eax eax +
jmp loc_100359E  +
push ebx  +
call ds:lstrlenA  +
jmp loc_100358C  +
mov cl [ebx+eax] +
cmp cl 20h +
jz loc_100358C  +
cmp cl 9 +
jz loc_100358C  +
cmp cl 0Dh +
jz loc_100358C  +
cmp cl 0Ah +
jz loc_100358C  +
cmp cl 0Bh +
jz loc_100358C  +
cmp cl 0Ch +
jnz loc_100358F  +
dec eax  +
jns loc_100356B  +
add eax edi +
mov byte ptr [eax+esi+1] 0 +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call ds:GetLastError  +
test eax eax +
jle locret_10035BE  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi 200h +
xor ecx ecx +
mov eax [ebp+8] +
xor edx edx +
div  esi +
neg edx  +
sbb edx edx +
imul eax esi +
and edx esi +
add edx eax +
add dword_100E220[ecx] edx +
add ecx 4 +
add esi esi +
cmp ecx 20h +
jb loc_10035D1  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 10h  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_1003629  +
cmp edx 7FFFFFFFh +
jbe loc_100362B  +
mov eax ecx +
test eax eax +
jl loc_1003652  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_1003642  +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov byte ptr [ecx] 0 +
jmp loc_1003652  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1002E0E  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 0Fh +
jz loc_10036F2  +
dec eax  +
jz loc_100368D  +
sub eax 100h +
jz loc_10036A0  +
dec eax  +
jnz loc_1003721  +
cmp [ebp+arg_8] 6 +
jnz loc_1003687  +
push 1  +
jmp loc_100368F  +
cmp [ebp+arg_8] 7 +
jnz loc_1003698  +
push 0  +
push [ebp+hDlg]  +
call ds:EndDialog  +
xor eax eax +
inc eax  +
jmp loc_1003723  +
push esi  +
push edi  +
call ds:GetDesktopWindow  +
mov edi [ebp+hDlg] +
push eax  +
push edi  +
call sub_1003049  +
push hMem  +
mov esi 834h +
push esi  +
push edi  +
call ds:SetDlgItemTextA  +
push offset Caption  +
push edi  +
call ds:SetWindowTextA  +
push edi  +
call ds:SetForegroundWindow  +
push offset sub_1002ED8  +
push esi  +
push edi  +
call ds:GetDlgItem  +
push eax  +
call sub_1002EAC  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
jmp loc_1003723  +
cmp dword_100CD74 0 +
jnz loc_1003721  +
push 0  +
push 0FFFFFFFFh  +
push 0B1h  +
push 834h  +
push [ebp+hDlg]  +
call ds:SendDlgItemMessageA  +
mov dword_100CB60 eax +
mov dword_100CD74 1 +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 10h +
push esi  +
jz loc_10037AA  +
sub eax 100h +
jz loc_1003773  +
dec eax  +
jz loc_1003748  +
xor eax eax +
jmp loc_10037B8  +
mov eax [ebp+nResult] +
cmp eax 6 +
jb loc_10037B5  +
xor esi esi +
inc esi  +
cmp eax 7 +
jbe loc_1003765  +
cmp eax 839h +
jnz loc_10037B5  +
mov dword_100D29C esi +
push eax  +
push [ebp+hDlg]  +
call ds:EndDialog  +
mov eax esi +
jmp loc_10037B8  +
call ds:GetDesktopWindow  +
mov esi [ebp+hDlg] +
push eax  +
push esi  +
call sub_1003049  +
push offset Caption  +
push esi  +
call ds:SetWindowTextA  +
push lpString  +
push 838h  +
push esi  +
call ds:SetDlgItemTextA  +
push esi  +
call ds:SetForegroundWindow  +
jmp loc_10037B5  +
push 2  +
push [ebp+hDlg]  +
call ds:EndDialog  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 244h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
test byte ptr word_100DEF8 1 +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
push 0Dh  +
pop ecx  +
mov esi offset aLoadstringErro +
lea edi [ebp+Text] +
movs   +
mov [ebp+hWnd] eax +
mov eax [ebp+arg_C] +
mov [ebp+lpString] eax +
movs   +
jnz loc_1003990  +
push 200h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
call sub_100318E  +
cmp [ebp+Buffer] 0 +
jnz loc_100386F  +
call sub_1007661  +
test eax eax +
jz loc_100384A  +
push 1  +
push 10h  +
push hModule  +
call sub_100760C  +
test eax eax +
jz loc_100384A  +
mov eax 180000h +
jmp loc_100384C  +
xor eax eax +
or eax 10010h +
push eax  +
push offset Caption  +
lea eax [ebp+Text] +
push eax  +
push [ebp+hWnd]  +
call ds:MessageBoxA  +
or eax 0FFFFFFFFh +
jmp loc_1003993  +
cmp [ebp+lpString] 0 +
jz loc_10038C3  +
push [ebp+lpString]  +
mov esi ds:lstrlenA +
call esi  +
push ebx  +
mov edi eax +
call esi  +
add edi eax +
lea eax [ebp+Buffer] +
push eax  +
call esi  +
lea edi [eax+edi+64h] +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jz loc_1003867  +
push [ebp+lpString]  +
lea eax [ebp+Buffer] +
push ebx  +
push eax  +
push edi  +
push esi  +
call sub_1001F43  +
add esp 14h +
jmp loc_1003937  +
test ebx ebx +
jz loc_1003906  +
mov esi ds:lstrlenA +
push ebx  +
call esi  +
mov edi eax +
lea eax [ebp+Buffer] +
push eax  +
call esi  +
lea edi [edi+eax+64h] +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jz loc_1003867  +
push ebx  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
push esi  +
call sub_1001F43  +
add esp 10h +
jmp loc_1003937  +
lea eax [ebp+Buffer] +
push eax  +
call ds:lstrlenA  +
mov edi eax +
inc edi  +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jz loc_1003867  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
push esi  +
call sub_1001EB0  +
push [ebp+uType]  +
call ds:MessageBeep  +
call sub_1007661  +
test eax eax +
jz loc_1003963  +
push 1  +
push 10h  +
push hModule  +
call sub_100760C  +
test eax eax +
jz loc_1003963  +
mov eax 180000h +
jmp loc_1003965  +
xor eax eax +
or eax [ebp+uType] +
or eax [ebp+arg_14] +
or eax 10000h +
push eax  +
push offset Caption  +
push esi  +
push [ebp+hWnd]  +
call ds:MessageBoxA  +
push esi  +
mov edi eax +
call ds:LocalFree  +
mov eax edi +
jmp loc_1003993  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:lstrlenA +
push edi  +
push [ebp+lpString]  +
call esi  +
push [ebp+arg_C]  +
mov edi eax +
call esi  +
mov ebx [ebp+arg_4] +
lea eax [edi+eax+1] +
cmp eax ebx +
jl loc_10039D2  +
xor eax eax +
jmp loc_1003A10  +
push [ebp+lpString]  +
mov edi [ebp+arg_0] +
push ebx  +
push edi  +
call sub_1001EB0  +
push edi  +
call esi  +
cmp byte ptr [eax+edi-1] 5Ch +
jz loc_1003A03  +
push edi  +
call esi  +
cmp byte ptr [eax+edi-1] 2Fh +
jz loc_1003A03  +
push offset SubBlock  +
push ebx  +
push edi  +
call sub_1001EEA  +
test eax eax +
jl loc_10039CE  +
push [ebp+arg_C]  +
push ebx  +
push edi  +
call sub_1001EEA  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ds:LocalAlloc +
push 8  +
push 40h  +
call edi  +
mov esi eax +
xor eax eax +
cmp esi eax +
jnz loc_1003A50  +
push eax  +
push 10h  +
push eax  +
push eax  +
push 4B5h  +
push hDlg  +
call sub_10037C2  +
xor eax eax +
jmp loc_1003AAD  +
push ebx  +
push [ebp+lpString]  +
mov ebx ds:lstrlenA +
call ebx  +
inc eax  +
push eax  +
push 40h  +
call edi  +
xor ecx ecx +
mov [esi] eax +
cmp eax ecx +
jnz loc_1003A8A  +
push ecx  +
push 10h  +
push ecx  +
push ecx  +
push 4B5h  +
push hDlg  +
call sub_10037C2  +
push esi  +
call ds:LocalFree  +
xor eax eax +
jmp loc_1003AAC  +
push [ebp+lpString]  +
push [ebp+lpString]  +
call ebx  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call sub_1001EB0  +
mov eax dword_100D2A0 +
mov [esi+4] eax +
xor eax eax +
mov dword_100D2A0 esi +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+dwCreationDisposition] +
test al 8 +
jz loc_1003ACD  +
or eax 0FFFFFFFFh +
jmp locret_1003B5D  +
mov [ebp+dwDesiredAccess] 80000000h +
test al 3 +
jz loc_1003ADF  +
mov [ebp+dwDesiredAccess] 40000000h +
test eax 100h +
jz loc_1003B07  +
test eax 400h +
jz loc_1003AF6  +
mov [ebp+dwCreationDisposition] 1 +
jmp loc_1003B19  +
and eax 200h +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFEh +
add eax 4 +
jmp loc_1003B16  +
and eax 200h +
neg eax  +
sbb eax eax +
and eax 2 +
add eax 3 +
mov [ebp+dwCreationDisposition] eax +
push ebx  +
push esi  +
mov esi ds:CreateFileA +
push edi  +
xor ebx ebx +
push ebx  +
mov edi 80h +
push edi  +
push [ebp+dwCreationDisposition]  +
push ebx  +
push ebx  +
push [ebp+dwDesiredAccess]  +
push [ebp+lpPathName]  +
call esi  +
cmp eax 0FFFFFFFFh +
jnz loc_1003B5A  +
cmp [ebp+dwCreationDisposition] 3 +
jz loc_1003B5A  +
push [ebp+lpPathName]  +
call sub_10031BD  +
push ebx  +
push edi  +
push [ebp+dwCreationDisposition]  +
push ebx  +
push ebx  +
push [ebp+dwDesiredAccess]  +
push [ebp+lpPathName]  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
xor esi esi +
mov eax offset dword_100DB20 +
cmp dword ptr [eax] 1 +
jz loc_1003B86  +
add eax 18h +
inc esi  +
cmp eax offset dword_100DEE0 +
jl loc_1003B76  +
cmp esi 28h +
jnz loc_1003BA7  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 4BBh  +
push hDlg  +
call sub_10037C2  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
push offset aMemcab  +
push [ebp+lpPathName]  +
call ds:lstrcmpA  +
test eax eax +
jnz loc_1003BFD  +
test [ebp+dwCreationDisposition] 100h +
jnz loc_1003BA0  +
test byte ptr [ebp+dwCreationDisposition] 0Bh +
jnz loc_1003BA0  +
mov ecx hResData +
mov eax esi +
imul eax eax +
mov dword_100DB28[eax] ecx +
mov ecx dword_100D204 +
mov dword_100DB20[eax] ebx +
mov dword_100DB24[eax] 1 +
mov dword_100DB30[eax] ecx +
mov dword_100DB2C[eax] ebx +
jmp loc_1003C27  +
push [ebp+arg_8]  +
push [ebp+dwCreationDisposition]  +
push [ebp+lpPathName]  +
call sub_1003AB8  +
mov ecx esi +
imul ecx ecx +
mov dword_100DB34[ecx] eax +
cmp eax 0FFFFFFFFh +
jz loc_1003BA0  +
mov dword_100DB20[ecx] ebx +
mov dword_100DB24[ecx] ebx +
mov eax esi +
jmp loc_1003BA3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov eax offset unk_100D7DC +
mov esi eax +
mov ecx 0C4h +
mov edi offset unk_100D4CC +
movs   +
mov esi [ebp+arg_0] +
push dword ptr [esi+0Ch]  +
mov edi 104h +
push edi  +
push eax  +
call sub_1001EB0  +
push dword ptr [esi+4]  +
push edi  +
push offset unk_100D8E0  +
call sub_1001EB0  +
push dword ptr [esi+8]  +
push edi  +
push offset unk_100D9E4  +
call sub_1001EB0  +
mov ax [esi+1Eh] +
mov word_100DAE8 ax +
mov ax [esi+20h] +
pop edi  +
mov word_100DAEA ax +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push edi  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_24] +
stos   +
lea eax [ebp+var_C] +
push eax  +
push 1  +
push offset loc_10033A8  +
push offset sub_100334E  +
push offset loc_10032B9  +
push offset loc_1003237  +
push offset sub_1003B66  +
push offset loc_10034C9  +
push offset loc_10034B2  +
call sub_1007866  +
mov edi eax +
add esp 24h +
test edi edi +
jz loc_1003D4C  +
push esi  +
push 180h  +
push 8000h  +
push offset aMemcab  +
call sub_1003B66  +
mov esi eax +
add esp 0Ch +
cmp esi 0FFFFFFFFh +
jz loc_1003D49  +
lea eax [ebp+var_24] +
push eax  +
push esi  +
push edi  +
call sub_100790C  +
add esp 0Ch +
test eax eax +
jz loc_1003D49  +
mov eax [ebp+var_24] +
cmp eax dword_100D204 +
jnz loc_1003D49  +
cmp [ebp+var_14] 0 +
jnz loc_1003D49  +
cmp [ebp+var_10] 0 +
jnz loc_1003D49  +
push esi  +
call sub_100334E  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1003D49  +
push edi  +
call sub_100841D  +
neg eax  +
sbb eax eax +
pop ecx  +
neg eax  +
jmp loc_1003D4B  +
xor eax eax +
pop esi  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
mov esi offset aUprompt +
push esi  +
call sub_100311B  +
mov [ebp+var_4] eax +
inc eax  +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
cmp ebx edi +
jnz loc_1003D9D  +
push edi  +
push 10h  +
push edi  +
push edi  +
push 4B5h  +
push edi  +
call sub_10037C2  +
call sub_10035AA  +
mov dword_100D0C4 eax +
jmp loc_1003E1B  +
push [ebp+var_4]  +
push ebx  +
push esi  +
call sub_100311B  +
test eax eax +
jnz loc_1003DCE  +
push edi  +
push 10h  +
push edi  +
push edi  +
push 4B1h  +
push edi  +
call sub_10037C2  +
push ebx  +
call ds:LocalFree  +
mov dword_100D0C4 80070714h +
jmp loc_1003E1B  +
push offset aNone  +
push ebx  +
call ds:lstrcmpA  +
test eax eax +
jnz loc_1003DEA  +
push ebx  +
call ds:LocalFree  +
xor eax eax +
inc eax  +
jmp loc_1003E1D  +
push 4  +
push 20h  +
push edi  +
push ebx  +
push 3E9h  +
push edi  +
call sub_10037C2  +
push ebx  +
mov esi eax +
call ds:LocalFree  +
cmp esi 6 +
jnz loc_1003E11  +
mov dword_100D0C4 edi +
jmp loc_1003DE5  +
mov dword_100D0C4 800704C7h +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi dword_100D2A0 +
mov ebx esi +
test esi esi +
jz loc_1003E89  +
push edi  +
mov edi ds:LocalFree +
cmp dword_100DEE4 0 +
jnz loc_1003E78  +
cmp dword_100DAF0 0 +
jnz loc_1003E78  +
push 80h  +
push dword ptr [esi]  +
call ds:SetFileAttributesA  +
push dword ptr [esi]  +
call ds:DeleteFileA  +
push dword ptr [ebx]  +
mov esi [esi+4] +
call edi  +
push ebx  +
call edi  +
mov ebx esi +
test esi esi +
jnz loc_1003E51  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
cmp dword_100DEE0 eax +
jz loc_1003EE7  +
cmp dword_100DEE4 eax +
jnz loc_1003EE7  +
cmp dword_100DAF0 eax +
jnz loc_1003EE7  +
push offset String  +
push 104h  +
lea eax [ebp+String] +
push eax  +
call sub_1001EB0  +
test byte ptr dword_100DAF4 20h +
jz loc_1003ED0  +
lea eax [ebp+String] +
push eax  +
call sub_1007417  +
push offset PathName  +
call ds:SetCurrentDirectoryA  +
lea eax [ebp+String] +
push eax  +
call sub_10023BE  +
cmp word_100D0CC 1 +
jz loc_1003EFF  +
cmp dword_100DEE0 0 +
jz loc_1003EFF  +
call sub_1001B97  +
mov ecx [ebp+var_4] +
and dword_100DEE0 0 +
xor ecx ebp +
call sub_1006B07  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 110h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
push edi  +
mov [ebp+lpPathName] eax +
mov [ebp+var_10C] ebx +
push ebx  +
push offset aIxp03d_tmp  +
lea eax [ebp+var_108] +
push 104h  +
push eax  +
call sub_1001F43  +
add esp 10h +
push [ebp+lpPathName]  +
inc ebx  +
push [ebp+arg_8]  +
push esi  +
call sub_1001EB0  +
lea eax [ebp+var_108] +
push eax  +
push [ebp+arg_8]  +
push esi  +
call sub_1007480  +
push esi  +
call ds:RemoveDirectoryA  +
push esi  +
call ds:GetFileAttributesA  +
mov edi ds:CreateDirectoryA +
cmp eax 0FFFFFFFFh +
jz loc_1003FA0  +
cmp ebx 190h +
jl loc_1003F43  +
jmp loc_1003FC0  +
push 0  +
push esi  +
call edi  +
test eax eax +
jz loc_1003FB9  +
xor eax eax +
inc eax  +
mov dword_100DEE0 eax +
mov [ebp+var_10C] eax +
jmp loc_1003FEE  +
and [ebp+var_10C] 0 +
push esi  +
push 0  +
push offset PrefixString  +
push [ebp+lpPathName]  +
call ds:GetTempFileNameA  +
test eax eax +
jz loc_1003FEE  +
push esi  +
mov [ebp+var_10C] 1 +
call ds:DeleteFileA  +
push 0  +
push esi  +
call edi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_10C] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+lpFileName]  +
call ds:lstrlenA  +
mov esi eax +
add esi 14h +
push esi  +
push 40h  +
call ds:LocalAlloc  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jnz loc_1004054  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 4B5h  +
push ebx  +
call sub_10037C2  +
call sub_10035AA  +
mov dword_100D0C4 eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
push [ebp+lpFileName]  +
push esi  +
push edi  +
call sub_1001EB0  +
push offset aTmp4351_tmp  +
push esi  +
push edi  +
call sub_1007480  +
push ebx  +
push 4000080h  +
push 1  +
push ebx  +
push ebx  +
push 40000000h  +
push edi  +
call ds:CreateFileA  +
push edi  +
mov esi eax +
call ds:LocalFree  +
cmp esi 0FFFFFFFFh +
jz loc_1004041  +
push esi  +
call ds:CloseHandle  +
push [ebp+lpFileName]  +
call ds:GetFileAttributesA  +
cmp eax 0FFFFFFFFh +
jz loc_1004041  +
test al 10h +
jz loc_1004041  +
xor eax eax +
mov dword_100D0C4 ebx +
inc eax  +
jmp loc_100404D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 320h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_318] ebx +
cmp [ebp+arg_4] ebx +
jnz loc_10040E6  +
xor eax eax +
inc eax  +
jmp loc_10042EC  +
push esi  +
lea eax [ebp+PathName] +
push eax  +
push 104h  +
call ds:GetCurrentDirectoryA  +
mov esi ds:SetCurrentDirectoryA +
push edi  +
call esi  +
test eax eax +
jnz loc_1004125  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 4BCh  +
push ebx  +
call sub_10037C2  +
call sub_10035AA  +
mov dword_100D0C4 eax +
jmp loc_100425E  +
lea eax [ebp+var_318] +
push eax  +
push ebx  +
call sub_1007807  +
mov [ebp+var_314] eax +
cmp eax ebx +
jnz loc_1004194  +
push 1FFh  +
lea eax [ebp+var_20C+1] +
push ebx  +
push eax  +
mov byte ptr [ebp+var_20C] bl +
call memset  +
add esp 0Ch +
call sub_10035AA  +
push ebx  +
mov dword_100D0C4 eax +
push 200h  +
lea eax [ebp+var_20C] +
push eax  +
push ebx  +
call ds:GetLastError  +
push eax  +
push ebx  +
push 1000h  +
call ds:FormatMessageA  +
push ebx  +
push 10h  +
lea eax [ebp+var_20C] +
push eax  +
push edi  +
push 4B0h  +
jmp loc_1004208  +
push ebx  +
push ebx  +
lea eax [ebp+FileSystemFlags] +
push eax  +
lea eax [ebp+MaximumComponentLength] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call ds:GetVolumeInformationA  +
test eax eax +
jnz loc_1004219  +
push 1FFh  +
lea eax [ebp+var_20C+1] +
push ebx  +
push eax  +
mov byte ptr [ebp+var_20C] bl +
call memset  +
add esp 0Ch +
call sub_10035AA  +
push ebx  +
mov dword_100D0C4 eax +
push 200h  +
lea eax [ebp+var_20C] +
push eax  +
push ebx  +
call ds:GetLastError  +
push eax  +
push ebx  +
push 1000h  +
call ds:FormatMessageA  +
push ebx  +
push 10h  +
lea eax [ebp+var_20C] +
push eax  +
push edi  +
push 4F9h  +
push ebx  +
call sub_10037C2  +
lea eax [ebp+PathName] +
push eax  +
call esi  +
jmp loc_100425E  +
lea eax [ebp+PathName] +
push eax  +
call esi  +
push 2  +
push edi  +
push 6  +
lea eax [ebp+var_C] +
push eax  +
call sub_100360E  +
mov ecx 200h +
xor eax eax +
cmp [ebp+var_318] ecx +
jz loc_1004248  +
add ecx ecx +
inc eax  +
cmp ax 8 +
jb loc_1004237  +
cmp ax 8 +
jnz loc_1004265  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 4C5h  +
push ebx  +
call sub_10037C2  +
xor eax eax +
jmp loc_10042EB  +
test byte ptr dword_100DAF4 8 +
jz loc_1004295  +
test [ebp+FileSystemFlags] 8000h +
jz loc_1004295  +
mov edx dword_100DAF8 +
movzx eax ax +
mov eax dword_100E220[eax*4] +
mov ecx edx +
shr ecx 2 +
add eax eax +
add ecx edx +
jmp loc_10042A5  +
mov ecx dword_100DAF8 +
movzx eax ax +
mov eax dword_100E220[eax*4] +
mov esi [ebp+arg_4] +
and esi 1 +
jz loc_10042BE  +
test byte ptr [ebp+arg_4] 2 +
jz loc_10042BE  +
lea edx [ecx+eax] +
cmp edx [ebp+var_314] +
jmp loc_10042D0  +
cmp esi ebx +
jz loc_10042CA  +
cmp eax [ebp+var_314] +
jmp loc_10042D0  +
cmp ecx [ebp+var_314] +
jbe loc_10042E2  +
lea edx [ebp+var_C] +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
call sub_100253F  +
jmp loc_10042EB  +
xor eax eax +
mov dword_100D0C4 ebx +
inc eax  +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 114h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
inc edi  +
mov [ebp+var_10C] edi +
test eax eax +
jz loc_1004843  +
cmp byte ptr [eax] 0 +
jz loc_1004843  +
mov [ebp+lpsz] eax +
mov ebx 104h +
cmp [ebp+var_10C] 0 +
jz loc_1004450  +
mov eax [ebp+lpsz] +
mov cl [eax] +
cmp cl 20h +
jz loc_1004374  +
cmp cl 9 +
jz loc_1004374  +
cmp cl 0Dh +
jz loc_1004374  +
cmp cl 0Ah +
jz loc_1004374  +
cmp cl 0Bh +
jz loc_1004374  +
cmp cl 0Ch +
jnz loc_100437D  +
push eax  +
call ds:CharNextA  +
jmp loc_1004354  +
cmp byte ptr [eax] 0 +
jz loc_1004450  +
xor ecx ecx +
xor edx edx +
mov [ebp+lpsz] eax +
xor esi esi +
test edx edx +
jnz loc_10043C4  +
mov eax [ebp+lpsz] +
mov al [eax] +
cmp al 20h +
jz loc_1004439  +
cmp al 9 +
jz loc_1004439  +
cmp al 0Dh +
jz loc_1004439  +
cmp al 0Ah +
jz loc_1004439  +
cmp al 0Bh +
jz loc_1004439  +
cmp al 0Ch +
jz loc_1004439  +
jmp loc_10043C8  +
test esi esi +
jnz loc_1004439  +
mov eax [ebp+lpsz] +
mov al [eax] +
cmp al 22h +
jnz loc_1004410  +
mov eax [ebp+lpsz] +
inc eax  +
cmp byte ptr [eax] 22h +
jz loc_10043F2  +
test edx edx +
jnz loc_10043E8  +
mov edx edi +
jmp loc_10043EA  +
mov esi edi +
mov [ebp+lpsz] eax +
jmp loc_100442A  +
cmp ecx 103h +
jnb loc_1004752  +
mov [ebp+ecx+String] 22h +
inc ecx  +
add [ebp+lpsz] 2 +
jmp loc_100442A  +
cmp ecx 103h +
jnb loc_1004752  +
mov [ebp+ecx+String] al +
inc ecx  +
inc [ebp+lpsz]  +
mov eax [ebp+lpsz] +
cmp byte ptr [eax] 0 +
jnz loc_1004392  +
mov [ebp+ecx+String] 0 +
test edx edx +
jz loc_1004496  +
test esi esi +
jnz loc_100449A  +
and [ebp+var_10C] 0 +
cmp dword_100DEEC 0 +
jz loc_100483B  +
cmp Filename 0 +
jnz loc_100483B  +
push ebx  +
mov esi offset Filename +
push esi  +
push hModule  +
call ds:GetModuleFileNameA  +
test eax eax +
jz loc_1004834  +
push 5Ch  +
push esi  +
call sub_1007503  +
mov byte ptr [eax+1] 0 +
jmp loc_100483B  +
test esi esi +
jnz loc_1004449  +
cmp [ebp+String] 2Fh +
jz loc_10044B0  +
cmp [ebp+String] 2Dh +
jnz loc_1004752  +
movsx eax byte ptr [ebp-107h] +
mov esi ds:CharUpperA +
push eax  +
call esi  +
movsx eax al +
sub eax 3Fh +
jz loc_1004817  +
sub eax 4 +
jz loc_1004759  +
dec eax  +
jz loc_10046AC  +
sub eax 0Ah +
jz loc_1004633  +
push 3  +
pop ecx  +
sub eax ecx +
jz loc_10045F0  +
dec eax  +
jz loc_1004516  +
dec eax  +
dec eax  +
jz loc_10046AC  +
and [ebp+var_10C] 0 +
mov eax [ebp+lpsz] +
cmp byte ptr [eax] 0 +
jnz loc_1004341  +
jmp loc_1004450  +
cmp byte ptr [ebp-106h] 0 +
jnz loc_100452D  +
mov dword_100DAEC ecx +
mov dword_100DEE8 edi +
jmp loc_1004502  +
cmp byte ptr [ebp-106h] 3Ah +
jnz loc_10045CA  +
cmp byte ptr [ebp-105h] 0 +
mov dword_100DAEC edi +
jz loc_1004502  +
lea esi [ebp-105h] +
movsx eax byte ptr [esi] +
push eax  +
call ds:CharUpperA  +
movsx eax al +
inc esi  +
sub eax 41h +
jz loc_10045B3  +
sub eax 3 +
jz loc_10045AA  +
sub eax 5 +
jz loc_10045A1  +
sub eax 5 +
jz loc_1004598  +
dec eax  +
dec eax  +
jz loc_100458C  +
sub eax 3 +
jz loc_1004583  +
and [ebp+var_10C] 0 +
jmp loc_10045C0  +
or dword_100DAEC 4 +
jmp loc_10045BA  +
or dword_100E208 80h +
jmp loc_10045C0  +
and dword_100DAEC 0FFFFFFFEh +
jmp loc_10045BA  +
and dword_100DAEC 0FFFFFFFDh +
jmp loc_10045BA  +
or dword_100E208 40h +
jmp loc_10045C0  +
or dword_100DAEC 2 +
mov dword_100DEE8 edi +
cmp byte ptr [esi] 0 +
jnz loc_100454F  +
jmp loc_1004502  +
push 0FFFFFFFFh  +
lea eax [ebp-107h] +
push eax  +
push 0FFFFFFFFh  +
push offset String1  +
push edi  +
push 7Fh  +
call ds:CompareStringA  +
dec eax  +
dec eax  +
jz loc_1004502  +
jmp loc_10044FB  +
cmp byte ptr [ebp-106h] 0 +
jnz loc_1004607  +
push 2  +
pop eax  +
mov word_100DEF8 ax +
jmp loc_1004502  +
cmp byte ptr [ebp-106h] 3Ah +
jnz loc_10044FB  +
movsx eax byte ptr [ebp-105h] +
push eax  +
call esi  +
cmp al 31h +
jz loc_10045F9  +
cmp al 41h +
jz loc_100462F  +
cmp al 55h +
jz loc_10045F9  +
jmp loc_10044FB  +
mov eax edi +
jmp loc_10045FC  +
cmp byte ptr [ebp-106h] 0 +
jnz loc_1004647  +
mov dword_100DEEC edi +
jmp loc_1004502  +
cmp byte ptr [ebp-106h] 3Ah +
jnz loc_10044FB  +
cmp byte ptr [ebp-105h] 0 +
jz loc_1004502  +
lea esi [ebp-105h] +
movsx eax byte ptr [esi] +
push eax  +
call ds:CharUpperA  +
movsx eax al +
inc esi  +
sub eax 45h +
jz loc_100469C  +
dec eax  +
dec eax  +
jz loc_1004694  +
sub eax 0Fh +
jz loc_100468C  +
and [ebp+var_10C] 0 +
jmp loc_10046A2  +
mov dword_100DEF4 edi +
jmp loc_10046A2  +
mov dword_100DEF0 edi +
jmp loc_10046A2  +
mov dword_100DEEC edi +
cmp byte ptr [esi] 0 +
jnz loc_1004667  +
jmp loc_1004502  +
cmp byte ptr [ebp-106h] 3Ah +
jnz loc_10044FB  +
xor eax eax +
cmp byte ptr [ebp-105h] 22h +
setz al  +
add eax 3 +
mov esi eax +
lea edi [ebp+esi+String] +
push edi  +
call ds:lstrlenA  +
test eax eax +
jnz loc_10046E8  +
and [ebp+var_10C] 0 +
jmp loc_100480F  +
lea eax [ebp+var_114] +
push eax  +
push edi  +
mov [ebp+var_114] esi +
call sub_1003525  +
test eax eax +
jz loc_10046DC  +
movsx eax byte ptr [ebp-107h] +
push eax  +
call ds:CharUpperA  +
cmp al 54h +
mov eax [ebp+var_114] +
jnz loc_1004720  +
add eax esi +
mov esi offset Filename +
jmp loc_1004727  +
add eax esi +
mov esi offset byte_100DEFA +
lea eax [ebp+eax+String] +
push eax  +
push ebx  +
push esi  +
call sub_1001EB0  +
push offset Default  +
push ebx  +
push esi  +
call sub_1007480  +
mov eax esi +
push eax  +
call sub_1002F17  +
test eax eax +
jnz loc_100480F  +
xor eax eax +
jmp loc_1004845  +
cmp byte ptr [ebp-106h] 0 +
jnz loc_100476D  +
mov dword_100DEE4 edi +
jmp loc_1004502  +
cmp byte ptr [ebp-106h] 3Ah +
jnz loc_10044FB  +
xor eax eax +
cmp byte ptr [ebp-105h] 22h +
setz al  +
add eax 3 +
mov esi eax +
lea edi [ebp+esi+String] +
push edi  +
call ds:lstrlenA  +
test eax eax +
jz loc_10046DC  +
push 5Bh  +
push edi  +
call sub_10073DE  +
test eax eax +
jz loc_10047BD  +
push 5Dh  +
push edi  +
call sub_10073DE  +
test eax eax +
jz loc_10046DC  +
push 5Dh  +
push edi  +
call sub_10073DE  +
test eax eax +
jz loc_10047D9  +
push 5Bh  +
push edi  +
call sub_10073DE  +
test eax eax +
jz loc_10046DC  +
lea eax [ebp+var_114] +
push eax  +
push edi  +
mov [ebp+var_114] esi +
call sub_1003525  +
test eax eax +
jz loc_10046DC  +
mov eax [ebp+var_114] +
add eax esi +
lea eax [ebp+eax+String] +
push eax  +
push ebx  +
push offset byte_100E102  +
call sub_1001EB0  +
xor edi edi +
inc edi  +
jmp loc_1004502  +
call sub_1001AD6  +
mov eax hObject +
test eax eax +
jz loc_100482C  +
push eax  +
call ds:CloseHandle  +
push 0  +
call ds:ExitProcess  +
and [ebp+var_10C] 0 +
mov eax [ebp+var_10C] +
jmp loc_1004845  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetWindowsDirectoryA  +
test eax eax +
jnz loc_10048A4  +
push eax  +
push 10h  +
push eax  +
push eax  +
push 4F0h  +
push eax  +
call sub_10037C2  +
call sub_10035AA  +
mov dword_100D0C4 eax +
xor eax eax +
jmp loc_10048B4  +
push 2  +
push 2  +
lea eax [ebp+Buffer] +
push eax  +
call sub_10040B7  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1006B07  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push edi  +
xor edi edi +
push edi  +
push offset aUpdfileLu  +
mov [ebp+var_28] eax +
lea eax [ebp+Name] +
push 14h  +
push eax  +
mov [ebp+var_1C] 1 +
mov dword ptr [ebp+var_20] edi +
call sub_1001F43  +
mov ebx ds:FindResourceA +
add esp 10h +
push 0Ah  +
lea eax [ebp+Name] +
push eax  +
push edi  +
call ebx  +
cmp eax edi +
jz loc_10049A2  +
push esi  +
jmp loc_100491B  +
xor edi edi +
push eax  +
push edi  +
call ds:LoadResource  +
push eax  +
call ds:LockResource  +
mov esi eax +
cmp esi edi +
jz loc_1004988  +
mov eax [esi] +
mov [ebp+var_2C] eax +
mov eax [esi+4] +
lea edi [esi+8] +
push edi  +
mov [ebp+var_24] eax +
call ds:lstrlenA  +
lea eax [eax+edi+1] +
push eax  +
push edi  +
push [ebp+var_24]  +
push [ebp+var_2C]  +
call [ebp+var_28]  +
push esi  +
test eax eax +
jz loc_1004997  +
call ds:FreeResource  +
inc dword ptr [ebp+var_20]  +
push dword ptr [ebp+var_20]  +
lea eax [ebp+Name] +
push offset aUpdfileLu  +
push 14h  +
push eax  +
call sub_1001F43  +
add esp 10h +
push 0Ah  +
lea eax [ebp+Name] +
push eax  +
push 0  +
call ebx  +
test eax eax +
jnz loc_1004919  +
jmp loc_10049A1  +
mov dword_100D0C4 80070714h +
mov [ebp+var_1C] edi +
jmp loc_10049A1  +
and [ebp+var_1C] 0 +
call ds:FreeResource  +
pop esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_1C] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 114h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+14h] +
push ebx  +
mov ebx [ebp+10h] +
push esi  +
push edi  +
push offset String  +
mov [ebp-114h] eax +
mov esi 104h +
push esi  +
lea eax [ebp-108h] +
xor edi edi +
push eax  +
mov dword ptr [ebp-10Ch] 1 +
mov [ebp-110h] edi +
call sub_1001EB0  +
push ebx  +
push esi  +
lea eax [ebp-108h] +
push eax  +
call sub_1007480  +
push edi  +
push 80h  +
push 2  +
push edi  +
push edi  +
push 40000000h  +
lea eax [ebp-108h] +
push eax  +
call ds:CreateFileA  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_1004A4A  +
mov dword_100D0C4 80070052h +
mov [ebp-10Ch] edi +
jmp loc_1004A86  +
mov ebx [ebp+8] +
push edi  +
lea eax [ebp-110h] +
push eax  +
push ebx  +
push dword ptr [ebp-114h]  +
push esi  +
call ds:WriteFile  +
test eax eax +
jz loc_1004A6F  +
cmp ebx [ebp-110h] +
jz loc_1004A7F  +
mov dword_100D0C4 80070052h +
mov [ebp-10Ch] edi +
push esi  +
call ds:CloseHandle  +
mov ecx [ebp-4] +
mov eax [ebp-10Ch] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push offset String  +
mov esi 104h +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1001EB0  +
push edi  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1007480  +
lea eax [ebp+String] +
push eax  +
call ds:GetFileAttributesA  +
cmp eax 0FFFFFFFFh +
jz loc_1004B0A  +
test al 10h +
jnz loc_1004B0A  +
push 8  +
push 0  +
lea eax [ebp+String] +
push eax  +
call ds:LoadLibraryExA  +
jmp loc_1004B11  +
push edi  +
call ds:LoadLibraryA  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1006B07  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+hModule] +
push edi  +
push 5  +
push [ebp+lpName]  +
push esi  +
call ds:FindResourceA  +
xor ebx ebx +
cmp eax ebx +
jz loc_1004B78  +
push eax  +
push esi  +
call ds:LoadResource  +
mov edi eax +
cmp edi ebx +
jz loc_1004B78  +
cmp [ebp+dwInitParam] ebx +
jnz loc_1004B59  +
push ebx  +
jmp loc_1004B5C  +
push [ebp+dwInitParam]  +
push [ebp+lpDialogFunc]  +
push [ebp+hWndParent]  +
push edi  +
push esi  +
call ds:DialogBoxIndirectParamA  +
push edi  +
mov esi eax +
call ds:FreeResource  +
cmp esi 0FFFFFFFFh +
jnz loc_1004B8B  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 4FBh  +
push ebx  +
call sub_10037C2  +
mov esi [ebp+arg_14] +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1B8h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+VersionInformation] +
xor edi edi +
push eax  +
mov [ebp+var_1A4] esi +
mov [ebp+uID] edi +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
test eax eax +
jnz loc_1004BFC  +
mov [ebp+uID] 4B4h +
push edi  +
push 10h  +
push edi  +
push edi  +
push [ebp+uID]  +
push edi  +
call sub_10037C2  +
jmp loc_1004EB7  +
mov eax [ebp+VersionInformation.dwPlatformId] +
dec eax  +
mov edx [ebp+VersionInformation.dwMajorVersion] +
jz loc_1004C6A  +
dec eax  +
jz loc_1004C1A  +
mov [ebp+uID] 4CAh +
jmp loc_1004BE6  +
push 2  +
pop eax  +
xor ecx ecx +
push 3  +
inc ecx  +
mov word_100D0CC ax +
pop eax  +
mov dword_100C2BC ecx +
mov dword_100C2C0 ecx +
cmp edx eax +
ja loc_1004C5D  +
mov word_100D0CC cx +
jb loc_1004C4F  +
cmp edx eax +
jnz loc_1004C7D  +
cmp [ebp+VersionInformation.dwMinorVersion] 33h +
jnb loc_1004C7D  +
mov dword_100C2BC edi +
mov dword_100C2C0 edi +
jmp loc_1004C7D  +
cmp edx 5 +
jb loc_1004C7D  +
mov word_100D0CC ax +
jmp loc_1004C7D  +
xor eax eax +
mov word_100D0CC ax +
inc eax  +
mov dword_100C2BC eax +
mov dword_100C2C0 eax +
cmp dword_100DEF4 edi +
jnz loc_1004EB7  +
cmp esi edi +
jz loc_1004EB7  +
cmp word_100D0CC di +
jnz loc_1004C9F  +
add esi 40h +
jmp loc_1004CA2  +
add esi 4 +
xor ecx ecx +
push ebx  +
movzx ebx word ptr [ebp+VersionInformation.dwBuildNumber] +
mov [ebp+var_1A8] ecx +
imul ecx ecx +
lea eax [ecx+esi] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push [ebp+VersionInformation.dwMinorVersion]  +
push [ebp+VersionInformation.dwMajorVersion]  +
call sub_1001E82  +
mov ecx [ebp+var_1A8] +
mov [ebp+ecx*4+var_1B0] eax +
imul ecx ecx +
lea eax [ecx+esi] +
push dword ptr [eax+10h]  +
push dword ptr [eax+0Ch]  +
push [ebp+VersionInformation.dwMinorVersion]  +
push [ebp+VersionInformation.dwMajorVersion]  +
call sub_1001E82  +
mov ecx [ebp+var_1A8] +
mov edx [ebp+ecx*4+var_1B0] +
mov edi 54Dh +
test edx edx +
jl loc_1004E46  +
test eax eax +
jg loc_1004E46  +
test edx edx +
jnz loc_1004E19  +
test eax eax +
jnz loc_1004D41  +
mov eax ecx +
imul eax eax +
movzx edx bx +
add eax esi +
cmp edx [eax+8] +
jb loc_1004E33  +
cmp edx [eax+14h] +
jmp loc_1004E2D  +
test edx edx +
jnz loc_1004E19  +
mov eax ecx +
imul eax eax +
movzx edx bx +
cmp edx [eax+esi+8] +
jb loc_1004E33  +
mov eax [ebp+var_1A4] +
cmp dword ptr [eax+7Ch] 0 +
jz loc_1004EB6  +
lea ecx [ebp+var_1A8] +
push ecx  +
push 104h  +
lea ecx [ebp+lptstrFilename] +
push ecx  +
push eax  +
call sub_1002788  +
test eax eax +
jnz loc_1004EB6  +
mov ecx [ebp+var_1A8] +
mov [ebp+uID] edi +
mov eax [ebp+var_1A4] +
xor ebx ebx +
cmp [ebp+uID] edi +
jnz loc_1004DC0  +
mov edx [eax+80h] +
imul ecx ecx +
add edx ecx +
lea esi [edx+eax+84h] +
lea ebx [ebp+lptstrFilename] +
mov ecx [esi+34h] +
push dword ptr [esi+30h]  +
lea edi [ecx+eax+84h] +
call sub_1001E58  +
test byte ptr word_100DEF8 1 +
mov [ebp+var_1A4] eax +
jnz loc_1004E9F  +
cmp byte ptr [edi] 0 +
jz loc_1004E9F  +
push 0  +
call ds:MessageBeep  +
call sub_1007661  +
test eax eax +
jz loc_1004E60  +
push 1  +
push 10h  +
push hModule  +
call sub_100760C  +
test eax eax +
jz loc_1004E60  +
mov eax 180000h +
jmp loc_1004E62  +
test eax eax +
jnz loc_1004D5B  +
mov eax ecx +
imul eax eax +
movzx edx bx +
cmp edx [eax+esi+14h] +
jbe loc_1004D5B  +
test ecx ecx +
jz loc_1004E4B  +
mov [ebp+uID] 54Ch +
jmp loc_1004D98  +
cmp ecx 1 +
jz loc_1004E37  +
inc ecx  +
cmp ecx 2 +
mov [ebp+var_1A8] ecx +
jl loc_1004CB2  +
jmp loc_1004D5B  +
xor eax eax +
or eax [ebp+var_1A4] +
or eax 30h +
push eax  +
push offset Caption  +
push edi  +
push 0  +
call ds:MessageBoxA  +
test byte ptr [ebp+var_1A4] 4 +
jz loc_1004E88  +
cmp eax 6 +
jmp loc_1004E94  +
test byte ptr [ebp+var_1A4] 1 +
jz loc_1004EB6  +
cmp eax 1 +
jnz loc_1004EB6  +
and [ebp+uID] 0 +
jmp loc_1004EB6  +
push 0  +
push 30h  +
push ebx  +
push offset Caption  +
push [ebp+uID]  +
push 0  +
call sub_10037C2  +
pop ebx  +
mov ecx [ebp+var_4] +
xor eax eax +
cmp [ebp+uID] eax +
pop edi  +
setz al  +
xor ecx ebp +
pop esi  +
call sub_1006B07  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
mov esi offset aLicense +
push esi  +
call sub_100311B  +
mov ebx eax +
lea eax [ebx+1] +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov hMem eax +
cmp eax edi +
jnz loc_1004F23  +
push edi  +
push 10h  +
push edi  +
push edi  +
push 4B5h  +
push edi  +
call sub_10037C2  +
call sub_10035AA  +
mov dword_100D0C4 eax +
xor eax eax +
jmp loc_1004FBA  +
push ebx  +
push eax  +
push esi  +
call sub_100311B  +
test eax eax +
jnz loc_1004F57  +
push edi  +
push 10h  +
push edi  +
push edi  +
push 4B1h  +
push edi  +
call sub_10037C2  +
push hMem  +
call ds:LocalFree  +
mov dword_100D0C4 80070714h +
jmp loc_1004F1C  +
push offset aNone  +
push hMem  +
call ds:lstrcmpA  +
test eax eax +
jz loc_1004FA5  +
push edi  +
push edi  +
push offset DialogFunc  +
push edi  +
push 7D1h  +
push hModule  +
call sub_1004B26  +
push hMem  +
mov esi eax +
call ds:LocalFree  +
cmp esi edi +
jnz loc_1004FB1  +
mov dword_100D0C4 800704C7h +
jmp loc_1004F1C  +
push hMem  +
call ds:LocalFree  +
xor eax eax +
mov dword_100D0C4 edi +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+lpStartupInfo] +
push ebx  +
mov ebx [ebp+lpCommandLine] +
push esi  +
xor esi esi +
xor eax eax +
mov [ebp+var_208] 1 +
cmp ebx esi +
jz loc_10050F0  +
push edi  +
lea edi [ebp+hObject] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+hObject] +
push eax  +
push ecx  +
push esi  +
push esi  +
push 20h  +
push esi  +
push esi  +
push esi  +
push ebx  +
push esi  +
call ds:CreateProcessA  +
test eax eax +
jz loc_10050A2  +
push 0FFFFFFFFh  +
push [ebp+hObject]  +
call ds:WaitForSingleObject  +
lea eax [ebp+ExitCode] +
push eax  +
push [ebp+hObject]  +
call ds:GetExitCodeProcess  +
mov ecx [ebp+ExitCode] +
cmp dword_100DEE8 esi +
jnz loc_1005070  +
mov al byte ptr dword_100DAEC +
test al 1 +
jz loc_1005070  +
test al 2 +
jnz loc_1005070  +
mov eax ecx +
and eax 0FF000000h +
cmp eax 0AA000000h +
jnz loc_1005070  +
mov dword_100DAEC ecx +
push ecx  +
call sub_1002FC3  +
push dword ptr [ebp-218h]  +
mov edi ds:CloseHandle +
call edi  +
push [ebp+hObject]  +
call edi  +
test dword_100DAF4 400h +
jz loc_10050E9  +
cmp [ebp+ExitCode] esi +
jge loc_10050E9  +
jmp loc_10050E3  +
call sub_10035AA  +
push esi  +
mov dword_100D0C4 eax +
push 200h  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
call ds:GetLastError  +
push eax  +
push esi  +
push 1000h  +
call ds:FormatMessageA  +
push esi  +
push 10h  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
push 4C4h  +
push esi  +
call sub_10037C2  +
mov [ebp+var_208] esi +
mov eax [ebp+var_208] +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
mov esi offset aFinishmsg +
push esi  +
call sub_100311B  +
mov ebx eax +
lea eax ds:4[ebx*4] +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
cmp eax edi +
jnz loc_1005148  +
push edi  +
push 10h  +
push edi  +
push edi  +
push 4B5h  +
push edi  +
call sub_10037C2  +
jmp loc_100518D  +
push ebx  +
push eax  +
push esi  +
call sub_100311B  +
test eax eax +
jnz loc_1005160  +
push edi  +
push 10h  +
push edi  +
push edi  +
push 4B1h  +
jmp loc_100517E  +
push offset aNone  +
push [ebp+hMem]  +
call ds:lstrcmpA  +
test eax eax +
jz loc_1005184  +
push edi  +
push 40h  +
push edi  +
push [ebp+hMem]  +
push 3E9h  +
push edi  +
call sub_10037C2  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
push edi  +
push offset aShell32_dll  +
call ds:LoadLibraryA  +
mov edi eax +
xor ebx ebx +
mov [ebp+hLibModule] edi +
cmp edi ebx +
jz loc_10052B5  +
mov esi ds:GetProcAddress +
push offset aShbrowseforfol  +
push edi  +
call esi  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_10052A2  +
push 0C3h  +
push edi  +
call esi  +
mov [ebp+var_10] eax +
cmp eax ebx +
jz loc_10052A2  +
push offset aShgetpathfromi  +
push edi  +
call esi  +
mov [ebp+var_C] eax +
cmp eax ebx +
jz loc_10052A2  +
mov esi offset Buffer +
cmp Buffer bl +
jnz loc_100523D  +
push esi  +
push 104h  +
call ds:GetTempPathA  +
push esi  +
call ds:lstrlenA  +
mov edi ds:CharPrevA +
add eax esi +
push eax  +
push esi  +
call edi  +
cmp byte ptr [eax] 5Ch +
mov [ebp+var_4] eax +
jnz loc_100523D  +
push eax  +
push esi  +
call edi  +
cmp byte ptr [eax] 3Ah +
jz loc_100523D  +
mov eax [ebp+var_4] +
mov [eax] bl +
mov eax [ebp+arg_0] +
mov edi [ebp+arg_8] +
mov [ebp+var_34] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_28] eax +
lea eax [ebp+var_34] +
push eax  +
mov [edi] bl +
mov [ebp+var_30] ebx +
mov [ebp+var_2C] ebx +
mov [ebp+var_24] 1 +
mov [ebp+var_20] offset loc_1003020 +
mov [ebp+var_1C] esi +
call [ebp+var_8]  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jz loc_1005290  +
push esi  +
push eax  +
call [ebp+var_C]  +
cmp Buffer bl +
jz loc_100528A  +
push esi  +
push [ebp+arg_C]  +
push edi  +
call sub_1001EB0  +
push [ebp+arg_0]  +
call [ebp+var_10]  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
xor eax eax +
cmp [edi] bl +
setnz al  +
jmp loc_10052C9  +
push edi  +
call ds:FreeLibrary  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 4C1h  +
jmp loc_10052BF  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 4C2h  +
push [ebp+arg_0]  +
call sub_10037C2  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpFileName] +
xor ebx ebx +
push esi  +
inc ebx  +
call sub_10074DB  +
test eax eax +
jz loc_1005343  +
cmp dword_100D29C 0 +
jnz loc_1005337  +
test byte ptr word_100DEF8 bl +
jnz loc_1005337  +
push 6  +
push 0  +
push offset sub_100372C  +
push hDlg  +
mov lpString esi +
push 7D3h  +
push hModule  +
call sub_1004B26  +
sub eax 6 +
jz loc_1005337  +
dec eax  +
jz loc_100534B  +
sub eax 832h +
jnz loc_1005337  +
mov dword_100D29C ebx +
push 80h  +
push esi  +
call ds:SetFileAttributesA  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
xor ebx ebx +
jmp loc_1005343  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp-4] eax +
cmp dword_100D298 0 +
push esi  +
mov esi [ebp+0Ch] +
jz loc_100538D  +
cmp dword ptr [ebp+8] 3 +
jnz loc_1005385  +
push dword ptr [esi+14h]  +
call sub_100334E  +
pop ecx  +
or eax 0FFFFFFFFh +
jmp loc_10054A4  +
mov eax [ebp+8] +
sub eax 0 +
jz loc_100549E  +
dec eax  +
jz loc_1005458  +
dec eax  +
jz loc_100540F  +
dec eax  +
jz loc_10053AE  +
dec eax  +
jz loc_1005385  +
jmp loc_1005458  +
push dword ptr [esi+4]  +
lea eax [ebp-108h] +
push offset String  +
push 104h  +
push eax  +
call sub_10039A9  +
test eax eax +
jz loc_1005385  +
movzx eax word ptr [esi+1Ah] +
push eax  +
movzx eax word ptr [esi+18h] +
push eax  +
push dword ptr [esi+14h]  +
call sub_100342E  +
test eax eax +
jz loc_1005385  +
push dword ptr [esi+14h]  +
call sub_100334E  +
movzx eax word ptr [esi+1Ch] +
pop ecx  +
push eax  +
call sub_1003492  +
push eax  +
lea eax [ebp-108h] +
push eax  +
call ds:SetFileAttributesA  +
neg eax  +
sbb eax eax +
and eax 2 +
dec eax  +
jmp loc_10054A4  +
mov eax hDlg +
test eax eax +
jz loc_1005427  +
push dword ptr [esi+4]  +
push 837h  +
push eax  +
call ds:SetDlgItemTextA  +
push dword ptr [esi+4]  +
lea eax [ebp-108h] +
push offset String  +
push 104h  +
push eax  +
call sub_10039A9  +
test eax eax +
jz loc_1005385  +
lea eax [ebp-108h] +
push eax  +
call sub_10052D5  +
test eax eax +
jnz loc_100545C  +
xor eax eax +
jmp loc_10054A4  +
push 180h  +
lea eax [ebp-108h] +
push 8302h  +
push eax  +
call sub_1003B66  +
mov esi eax +
add esp 0Ch +
cmp esi 0FFFFFFFFh +
jz loc_1005385  +
lea eax [ebp-108h] +
push eax  +
call sub_1003A1C  +
test eax eax +
jz loc_1005385  +
inc dword_100D4B4  +
mov eax esi +
jmp loc_10054A4  +
push esi  +
call sub_1003C33  +
mov ecx [ebp-4] +
xor ecx ebp +
pop esi  +
call sub_1006B07  +
leave   +
retn   +
***
call sub_10034DE  +
test eax eax +
jnz loc_10054C0  +
retn   +
mov eax hDlg +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp eax esi +
jz loc_10054F8  +
mov edi ds:GetDlgItem +
push esi  +
push 842h  +
push eax  +
call edi  +
mov ebx ds:ShowWindow +
push eax  +
call ebx  +
push 5  +
push 841h  +
push hDlg  +
call edi  +
push eax  +
call ebx  +
push hResData  +
call sub_1003C9C  +
test eax eax +
jnz loc_1005513  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 4BAh  +
jmp loc_100558B  +
push offset dword_100D208  +
push 1  +
push offset loc_10033A8  +
push offset sub_100334E  +
push offset loc_10032B9  +
push offset loc_1003237  +
push offset sub_1003B66  +
push offset loc_10034C9  +
push offset loc_10034B2  +
call sub_1007866  +
mov ebx eax +
add esp 24h +
cmp ebx esi +
jz loc_100557B  +
push offset hResData  +
push esi  +
push offset loc_1005354  +
push esi  +
push offset Default  +
push offset aMemcab  +
push ebx  +
call sub_1008981  +
mov edi eax +
add esp 1Ch +
cmp edi esi +
jz loc_1005598  +
push ebx  +
call sub_100841D  +
pop ecx  +
test eax eax +
jnz loc_1005598  +
mov eax dword_100D208 +
push esi  +
push 10h  +
push esi  +
push esi  +
add eax 514h +
push eax  +
push hDlg  +
call sub_10037C2  +
xor edi edi +
mov eax hResData +
cmp eax esi +
jz loc_10055AE  +
push eax  +
call ds:FreeResource  +
mov hResData esi +
cmp edi esi +
jnz loc_10055CA  +
cmp dword_100D298 esi +
jnz loc_10055CA  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 4F8h  +
push esi  +
call sub_10037C2  +
test byte ptr word_100DEF8 1 +
jnz loc_10055EF  +
test byte ptr dword_100DAF4 1 +
jnz loc_10055EF  +
push esi  +
push edi  +
push 0FA1h  +
push hDlg  +
call ds:SendMessageA  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
push 24h  +
push offset dword_100E220  +
push offset aFilesizes  +
call sub_100311B  +
xor esi esi +
cmp eax 24h +
jz loc_1005633  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 4B1h  +
push esi  +
call sub_10037C2  +
mov dword_100D0C4 80070714h +
xor eax eax +
pop esi  +
retn   +
mov eax dword_100E240 +
mov dword_100D4B8 eax +
cmp eax esi +
jnz loc_100564D  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 4C6h  +
jmp loc_100561F  +
push 4  +
push offset dword_100DAF8  +
push offset aPackinstspace  +
call sub_100311B  +
push offset loc_10035C4  +
call sub_10048C5  +
test eax eax +
jnz loc_100567E  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 4C6h  +
push esi  +
call sub_10037C2  +
jmp loc_100562F  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 12Ch +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp [ebp+arg_4] ebx +
jz loc_1005735  +
mov edi 104h +
push edi  +
lea ecx [ebp+var_108] +
push ecx  +
push eax  +
call sub_1003F17  +
test eax eax +
jz loc_100579E  +
lea eax [ebp+var_108] +
push eax  +
push edi  +
mov esi offset String +
push esi  +
call sub_1001EB0  +
test byte ptr dword_100DAF4 20h +
jz loc_1005727  +
lea eax [ebp+SystemInfo] +
push eax  +
call ds:GetSystemInfo  +
movzx eax word ptr [ebp+SystemInfo.anonymous_0] +
sub eax ebx +
jz loc_100571B  +
dec eax  +
jz loc_1005714  +
dec eax  +
jz loc_100570D  +
dec eax  +
jnz loc_1005727  +
push offset aPpc  +
jmp loc_1005720  +
push offset aAlpha  +
jmp loc_1005720  +
push offset aMips  +
jmp loc_1005720  +
push offset aI386  +
push edi  +
push esi  +
call sub_1007480  +
push offset Default  +
push edi  +
push esi  +
call sub_1007480  +
jmp loc_1005746  +
push eax  +
push 104h  +
mov esi offset String +
push esi  +
call sub_1001EB0  +
push esi  +
call sub_100400A  +
xor edi edi +
inc edi  +
test eax eax +
jnz loc_1005765  +
push ebx  +
push esi  +
call ds:CreateDirectoryA  +
test eax eax +
jz loc_100577D  +
mov dword_100DEE0 edi +
push ebx  +
push [ebp+arg_8]  +
push esi  +
call sub_10040B7  +
test eax eax +
jz loc_1005789  +
mov dword_100D0C4 ebx +
mov eax edi +
jmp loc_10057A0  +
call sub_10035AA  +
mov dword_100D0C4 eax +
jmp loc_100579E  +
cmp dword_100DEE0 ebx +
jz loc_100579E  +
push esi  +
mov dword_100DEE0 ebx +
call ds:RemoveDirectoryA  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 110h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
push 8FCh  +
push ebx  +
push offset hResData  +
mov [ebp+var_110] eax +
mov [ebp+var_10C] ebx +
mov hModule edi +
call memset  +
push 32Ch  +
push ebx  +
push offset dword_100DEE0  +
call memset  +
push 104h  +
push ebx  +
push offset Buffer  +
call memset  +
add esp 24h +
push 7Fh  +
mov esi offset Caption +
push esi  +
push offset aTitle  +
mov dword_100D4AC 1 +
call sub_100311B  +
cmp eax ebx +
jz loc_1005A16  +
cmp eax 80h +
ja loc_1005A16  +
push ebx  +
push 1  +
push 1  +
push ebx  +
call ds:CreateEventA  +
push eax  +
mov hEvent eax +
call ds:SetEvent  +
push 4  +
push offset dword_100DAF4  +
push offset aExtractopt  +
call sub_100311B  +
test eax eax +
jnz loc_1005896  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 4B1h  +
push ebx  +
call sub_10037C2  +
mov dword_100D0C4 80070714h +
jmp loc_1005A26  +
test byte ptr dword_100DAF4 0C0h +
jz loc_100592F  +
push 104h  +
lea eax [ebp+Name] +
push eax  +
push offset aInstancecheck  +
call sub_100311B  +
test eax eax +
jz loc_1005877  +
lea eax [ebp+Name] +
push eax  +
push 1  +
push ebx  +
call ds:CreateMutexA  +
mov hObject eax +
cmp eax ebx +
jz loc_100592F  +
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_100592F  +
test byte ptr dword_100DAF4 80h +
jz loc_10058FE  +
push ebx  +
push 10h  +
push ebx  +
push esi  +
push 54Bh  +
push ebx  +
call sub_10037C2  +
jmp loc_1005914  +
push 4  +
push 20h  +
push ebx  +
push esi  +
push 524h  +
push ebx  +
call sub_10037C2  +
cmp eax 6 +
jz loc_100592F  +
push hObject  +
call ds:CloseHandle  +
mov dword_100D0C4 800700B7h +
jmp loc_1005A26  +
push [ebp+var_110]  +
mov dword_100D0C8 ebx +
call sub_1004301  +
test eax eax +
jnz loc_1005953  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 520h  +
jmp loc_1005A20  +
cmp byte_100DEFA bl +
jz loc_100596A  +
push offset byte_100DEFA  +
call sub_10023BE  +
jmp loc_1005A26  +
push 0Ah  +
push offset aVercheck  +
push edi  +
call ds:FindResourceA  +
cmp eax ebx +
jz loc_100598A  +
push eax  +
push edi  +
call ds:LoadResource  +
mov [ebp+var_10C] eax +
cmp dword_100C2BC ebx +
jz loc_1005998  +
call ds:InitCommonControls  +
cmp dword_100DEE4 ebx +
jz loc_10059A8  +
xor eax eax +
inc eax  +
jmp loc_1005A28  +
push [ebp+var_10C]  +
call sub_1004B99  +
test eax eax +
jz loc_1005A26  +
mov ax word_100D0CC +
cmp ax 1 +
jz loc_10059CF  +
cmp ax 2 +
jz loc_10059CF  +
cmp ax 3 +
jnz loc_10059A0  +
test dword_100DAF4 100h +
jz loc_10059A0  +
test byte ptr word_100DEF8 1 +
jnz loc_10059A0  +
call sub_1001881  +
test eax eax +
jnz loc_10059A0  +
push 83Eh  +
push 547h  +
push offset sub_10019C2  +
push ebx  +
push 7D6h  +
push hModule  +
call sub_1004B26  +
cmp eax 83Dh +
jnz loc_1005A26  +
jmp loc_10059A0  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 4B1h  +
push ebx  +
call sub_10037C2  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 10h +
push ebx  +
push esi  +
push edi  +
jz loc_1005C57  +
sub eax 100h +
jz loc_1005BFE  +
dec eax  +
jz loc_1005A67  +
xor eax eax +
jmp loc_1005C65  +
mov eax [ebp+arg_8] +
dec eax  +
jz loc_1005B22  +
dec eax  +
jz loc_1005B08  +
sub eax 834h +
jnz loc_1005C62  +
push 200h  +
mov edi offset byte_100C960 +
push edi  +
push 3E8h  +
push hModule  +
call ds:LoadStringA  +
test eax eax +
jnz loc_1005ABD  +
xor edi edi +
push edi  +
push 10h  +
push edi  +
push edi  +
push 4B1h  +
push [ebp+hDlg]  +
call sub_10037C2  +
push edi  +
jmp loc_1005C59  +
mov ebx [ebp+hDlg] +
push 104h  +
mov esi offset unk_100C658 +
push esi  +
push edi  +
push ebx  +
call sub_1005197  +
test eax eax +
jz loc_1005C62  +
push esi  +
push 835h  +
push ebx  +
call ds:SetDlgItemTextA  +
test eax eax +
jnz loc_1005C62  +
xor edi edi +
push edi  +
push 10h  +
push edi  +
push edi  +
push 4C0h  +
push ebx  +
call sub_10037C2  +
push edi  +
push ebx  +
jmp loc_1005C5C  +
push 0  +
push [ebp+hDlg]  +
call ds:EndDialog  +
mov dword_100D0C4 800704C7h +
jmp loc_1005C62  +
mov ebx 104h +
push ebx  +
mov esi offset String +
push esi  +
push 835h  +
push [ebp+hDlg]  +
call ds:GetDlgItemTextA  +
test eax eax +
jz loc_1005BF0  +
push esi  +
call sub_1002F17  +
test eax eax +
jz loc_1005BF0  +
push esi  +
call ds:GetFileAttributesA  +
xor edi edi +
cmp eax 0FFFFFFFFh +
jnz loc_1005B9F  +
push 4  +
push 20h  +
push edi  +
push esi  +
push 54Ah  +
push [ebp+hDlg]  +
call sub_10037C2  +
cmp eax 6 +
jnz loc_1005C62  +
push edi  +
push esi  +
call ds:CreateDirectoryA  +
test eax eax +
jnz loc_1005B9F  +
push edi  +
push 10h  +
push edi  +
push esi  +
push 4CBh  +
push [ebp+hDlg]  +
call sub_10037C2  +
jmp loc_1005C62  +
push offset Default  +
push ebx  +
push esi  +
call sub_1007480  +
push esi  +
call sub_100400A  +
test eax eax +
jnz loc_1005BC1  +
push edi  +
push 10h  +
push edi  +
push edi  +
push 4BEh  +
jmp loc_1005B92  +
xor ebx ebx +
inc ebx  +
cmp String 5Ch +
jnz loc_1005BD6  +
cmp byte_100D2A5 5Ch +
jz loc_1005BD8  +
mov edi ebx +
push ebx  +
push edi  +
push esi  +
call sub_10040B7  +
test eax eax +
jz loc_1005C53  +
push ebx  +
push [ebp+hDlg]  +
call ds:EndDialog  +
jmp loc_1005C53  +
xor edi edi +
push edi  +
push 10h  +
push edi  +
push edi  +
push 4BFh  +
jmp loc_1005B92  +
call ds:GetDesktopWindow  +
mov esi [ebp+hDlg] +
push eax  +
push esi  +
call sub_1003049  +
push offset Caption  +
push esi  +
call ds:SetWindowTextA  +
xor edi edi +
push edi  +
push 103h  +
push 0C5h  +
push 835h  +
push esi  +
call ds:SendDlgItemMessageA  +
xor ebx ebx +
inc ebx  +
cmp word_100D0CC bx +
jnz loc_1005C53  +
push edi  +
push 836h  +
push esi  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
mov eax ebx +
jmp loc_1005C65  +
push 0  +
push [ebp+hDlg]  +
call ds:EndDialog  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 10h +
push esi  +
jz loc_1005DEC  +
sub eax 0F2h +
jz loc_1005DE1  +
sub eax 0Eh +
jz loc_1005D3A  +
dec eax  +
jz loc_1005CCA  +
sub eax 0E90h +
jz loc_1005CA8  +
xor eax eax +
jmp loc_1005E02  +
push 0  +
push hThread  +
call ds:TerminateThread  +
push [ebp+nResult]  +
push [ebp+hDlg]  +
call ds:EndDialog  +
xor eax eax +
inc eax  +
jmp loc_1005E02  +
xor esi esi +
inc esi  +
cmp [ebp+nResult] 2 +
jnz loc_1005E00  +
push hEvent  +
call ds:ResetEvent  +
push 4  +
push 20h  +
push 0  +
push offset Default  +
push 4B2h  +
push hDlg  +
call sub_10037C2  +
cmp eax 6 +
jz loc_1005D18  +
cmp eax esi +
jz loc_1005D18  +
push hEvent  +
call ds:SetEvent  +
jmp loc_1005E00  +
push hEvent  +
mov dword_100D298 esi +
call ds:SetEvent  +
push hThread  +
call sub_1002F51  +
jmp loc_1005DF5  +
push edi  +
mov edi [ebp+hDlg] +
mov hDlg edi +
call ds:GetDesktopWindow  +
push eax  +
push edi  +
call sub_1003049  +
xor esi esi +
cmp dword_100C2BC esi +
jz loc_1005D9A  +
push ebx  +
push 0BB9h  +
push esi  +
mov esi ds:GetDlgItem +
push 464h  +
mov ebx 83Bh +
push ebx  +
push edi  +
call esi  +
mov edi ds:SendMessageA +
push eax  +
call edi  +
push 0FFFF0000h  +
push 0FFFFFFFFh  +
push 465h  +
push ebx  +
push [ebp+hDlg]  +
call esi  +
push eax  +
call edi  +
mov edi [ebp+hDlg] +
xor esi esi +
pop ebx  +
push offset Caption  +
push edi  +
call ds:SetWindowTextA  +
push offset ThreadId  +
push esi  +
push esi  +
push offset StartAddress  +
push esi  +
push esi  +
call ds:CreateThread  +
mov hThread eax +
cmp eax esi +
jnz loc_1005DDB  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 4B8h  +
push edi  +
call sub_10037C2  +
push esi  +
push edi  +
call ds:EndDialog  +
xor eax eax +
inc eax  +
pop edi  +
jmp loc_1005E02  +
xor esi esi +
inc esi  +
cmp [ebp+nResult] 1Bh +
jnz loc_1005E00  +
jmp loc_1005DEF  +
xor esi esi +
inc esi  +
mov dword_100D298 esi +
push 0  +
push [ebp+hDlg]  +
call ds:EndDialog  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebx  +
xor ebx ebx +
xor eax eax +
inc ebx  +
mov dword_100DB20[eax] ebx +
add eax 18h +
cmp eax 3C0h +
jb loc_1005E14  +
test byte ptr word_100DEF8 bl +
jnz loc_1005E5B  +
test byte ptr dword_100DAF4 bl +
jnz loc_1005E5B  +
mov eax dword_100C2BC +
push 0  +
push 0  +
neg eax  +
push offset sub_1005C71  +
sbb eax eax +
push 0  +
add eax 7D5h +
push eax  +
push hModule  +
call sub_1004B26  +
jmp loc_1005E60  +
call StartAddress  +
test eax eax +
jnz loc_1005E72  +
mov dword_100D0C4 8007042Bh +
xor eax eax +
pop ebx  +
retn   +
push offset loc_10049BA  +
call sub_10048C5  +
test eax eax +
jz loc_1005E6E  +
and dword_100D0C4 0 +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18Ch +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
mov [ebp+var_114] ebx +
mov [ebp+var_128] ebx +
mov [ebp+var_120] ebx +
mov dword_100D0C4 ebx +
cmp dword_100DEE8 ebx +
jnz loc_1005F03  +
push 4  +
push offset dword_100DAEC  +
push offset aReboot_0  +
call sub_100311B  +
cmp eax ebx +
jz loc_1005EE2  +
cmp eax 4 +
jbe loc_1005F03  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 4B1h  +
push ebx  +
call sub_10037C2  +
mov dword_100D0C4 80070714h +
xor eax eax +
jmp loc_1006293  +
push edi  +
mov edi ds:LocalFree +
mov [ebp+var_110] ebx +
push esi  +
push 44h  +
pop esi  +
push esi  +
lea eax [ebp+StartupInfo] +
push ebx  +
push eax  +
mov [ebp+var_114] ebx +
call memset  +
add esp 0Ch +
mov [ebp+StartupInfo.cb] esi +
cmp byte_100E102 bl +
jnz loc_1006065  +
push 4  +
lea eax [ebp+var_118] +
push eax  +
push offset aShowwindow  +
call sub_100311B  +
cmp eax ebx +
jz loc_100603E  +
cmp eax 4 +
ja loc_100603E  +
xor esi esi +
inc esi  +
cmp [ebp+var_118] esi +
jnz loc_1005F70  +
xor eax eax +
jmp loc_1005F89  +
cmp [ebp+var_118] 2 +
jnz loc_1005F7D  +
push 6  +
jmp loc_1005F88  +
cmp [ebp+var_118] 3 +
jnz loc_1005F96  +
push 3  +
pop eax  +
mov [ebp+StartupInfo.dwFlags] esi +
mov [ebp+StartupInfo.wShowWindow] ax +
cmp [ebp+var_110] ebx +
jnz loc_100607E  +
mov ax word_100DEF8 +
cmp ax bx +
jz loc_1006018  +
test al 1 +
jz loc_1005FBD  +
mov [ebp+lpName] offset aAdmqcmd +
jmp loc_1005FCB  +
test al 2 +
jz loc_1005FCB  +
mov [ebp+lpName] offset aUsrqcmd +
push 104h  +
lea eax [ebp+String1] +
push eax  +
push [ebp+lpName]  +
call sub_100311B  +
test eax eax +
jz loc_100603E  +
push 0FFFFFFFFh  +
push offset aNone  +
push 0FFFFFFFFh  +
lea eax [ebp+String1] +
push eax  +
push esi  +
push 7Fh  +
call ds:CompareStringA  +
dec eax  +
dec eax  +
jz loc_100605D  +
cmp [ebp+var_11C] 0FFFFFFFEh +
jz loc_100605D  +
mov [ebp+var_11C] esi +
mov [ebp+var_128] esi +
cmp [ebp+var_128] ebx +
jnz loc_10060CD  +
push 104h  +
lea eax [ebp+String1] +
push eax  +
push offset aRunprogram  +
call sub_100311B  +
test eax eax +
jnz loc_100607E  +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 4B1h  +
push ebx  +
call sub_10037C2  +
mov dword_100D0C4 80070714h +
jmp loc_1006317  +
mov [ebp+var_11C] ebx +
jmp loc_1006018  +
push offset byte_100E102  +
push 104h  +
lea eax [ebp+String1] +
push eax  +
call sub_1001EB0  +
xor esi esi +
inc esi  +
cmp [ebp+var_110] esi +
jnz loc_10060CD  +
push 104h  +
lea eax [ebp+String1] +
push eax  +
push offset aPostrunprogram  +
call sub_100311B  +
test eax eax +
jz loc_100603E  +
cmp byte_100E102 bl +
jnz loc_1006282  +
push 0FFFFFFFFh  +
push offset aNone  +
push 0FFFFFFFFh  +
lea eax [ebp+String1] +
push eax  +
push esi  +
push 7Fh  +
call ds:CompareStringA  +
dec eax  +
dec eax  +
jz loc_1006282  +
lea eax [ebp+var_114] +
push eax  +
lea eax [ebp+lpCommandLine] +
push eax  +
push 104h  +
lea eax [ebp+String1] +
push eax  +
call sub_1002A3B  +
test eax eax +
jz loc_1006317  +
cmp [ebp+var_120] ebx +
jnz loc_1006120  +
cmp word_100D0CC si +
jz loc_1006120  +
cmp dword_100DEE0 ebx +
jz loc_1006120  +
cmp [ebp+var_114] ebx +
jnz loc_100612C  +
mov [ebp+var_120] esi +
call sub_100202F  +
cmp [ebp+var_114] ebx +
jz loc_100624A  +
cmp dword_100C2C0 ebx +
jz loc_10062A0  +
cmp [ebp+var_114] ebx +
jz loc_100624A  +
test byte ptr dword_100DAF4 4 +
jz loc_100624A  +
push offset aAdvpack_dll  +
call sub_1004AA2  +
mov esi eax +
cmp esi ebx +
jz loc_10062C4  +
push offset aDoinfinstall  +
push esi  +
call ds:GetProcAddress  +
cmp eax ebx +
jz loc_10062DA  +
mov ecx [ebp+lpCommandLine] +
mov [ebp+var_140] ecx +
lea ecx [ebp+String1] +
mov [ebp+var_138] ecx +
mov cx word_100D0CC +
mov [ebp+var_134] cx +
movzx ecx word_100DEF8 +
mov [ebp+var_148] ebx +
mov [ebp+var_144] offset Caption +
mov [ebp+var_13C] offset String +
mov [ebp+var_130] ecx +
cmp dword_100DEF0 ebx +
jz loc_10061D8  +
or [ebp+var_130] 10000h +
mov cl byte ptr dword_100DAF4 +
test cl 8 +
jz loc_10061ED  +
or [ebp+var_130] 20000h +
test cl 10h +
jz loc_10061FC  +
or [ebp+var_130] 40000h +
mov cl byte ptr dword_100E208 +
test cl 40h +
jz loc_1006211  +
or [ebp+var_130] 80000h +
test cl cl +
jns loc_100621F  +
or [ebp+var_130] 100000h +
mov ecx dword_100DAF8 +
mov [ebp+var_12C] ecx +
lea ecx [ebp+var_148] +
push ecx  +
call eax  +
cmp eax ebx +
mov dword_100D0C4 eax +
push esi  +
jl loc_1006309  +
call ds:FreeLibrary  +
jmp loc_1006264  +
lea eax [ebp+StartupInfo] +
push eax  +
push [ebp+lpCommandLine]  +
call sub_1004FC3  +
test eax eax +
jz loc_100630F  +
push [ebp+lpCommandLine]  +
call edi  +
inc [ebp+var_110]  +
cmp [ebp+var_110] 2 +
jb loc_1005F11  +
xor esi esi +
inc esi  +
cmp dword_100C650 ebx +
jz loc_100628F  +
call sub_100228F  +
mov eax esi +
pop esi  +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn   +
push ebx  +
push 10h  +
push ebx  +
push ebx  +
push 4C7h  +
push ebx  +
call sub_10037C2  +
push [ebp+lpCommandLine]  +
call edi  +
mov dword_100D0C4 8007042Bh +
jmp loc_1006317  +
push ebx  +
push 10h  +
push ebx  +
push offset aAdvpack_dll  +
push 4C8h  +
push ebx  +
call sub_10037C2  +
jmp loc_10062F5  +
push ebx  +
push 10h  +
push ebx  +
push offset aDoinfinstall  +
push 4C9h  +
push ebx  +
call sub_10037C2  +
push esi  +
call ds:FreeLibrary  +
push [ebp+lpCommandLine]  +
call edi  +
call sub_10035AA  +
mov dword_100D0C4 eax +
jmp loc_1006317  +
call ds:FreeLibrary  +
push [ebp+lpCommandLine]  +
call edi  +
xor eax eax +
jmp loc_1006291  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
push 0  +
push 0  +
mov esi offset aRunprogram +
push esi  +
call sub_100311B  +
mov edi eax +
lea eax [edi+1] +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_1006381  +
push eax  +
push 10h  +
push eax  +
push eax  +
push 4B5h  +
push eax  +
call sub_10037C2  +
call sub_10035AA  +
mov dword_100D0C4 eax +
xor eax eax +
jmp loc_10065FA  +
push edi  +
push ebx  +
push esi  +
call sub_100311B  +
test eax eax +
jnz loc_10063B0  +
push eax  +
push 10h  +
push eax  +
push eax  +
push 4B1h  +
push eax  +
call sub_10037C2  +
push ebx  +
call ds:LocalFree  +
mov dword_100D0C4 80070714h +
jmp loc_100637A  +
push offset aNone  +
push ebx  +
call ds:lstrcmpA  +
test eax eax +
jnz loc_10063CA  +
mov dword_100DAF0 1 +
push ebx  +
call ds:LocalFree  +
mov al Filename +
test al al +
jz loc_100641E  +
cmp al 5Ch +
jnz loc_10063EC  +
cmp byte_100DFFF al +
jnz loc_10063EC  +
xor esi esi +
xor eax eax +
jmp loc_10063F1  +
xor eax eax +
inc eax  +
xor esi esi +
push eax  +
push esi  +
push offset Filename  +
call sub_1005688  +
test eax eax +
jz loc_1006409  +
xor eax eax +
inc eax  +
jmp loc_10065FA  +
push esi  +
push 10h  +
push esi  +
push esi  +
push 4BEh  +
push esi  +
call sub_10037C2  +
jmp loc_100637A  +
xor eax eax +
cmp dword_100DEE4 eax +
jnz loc_10065DC  +
cmp dword_100DAF0 eax +
jnz loc_10065DC  +
mov esi offset String +
push esi  +
mov edi 104h +
push edi  +
call ds:GetTempPathA  +
test eax eax +
jz loc_100647B  +
push 3  +
xor ebx ebx +
inc ebx  +
push ebx  +
push esi  +
call sub_1005688  +
test eax eax +
jz loc_1006465  +
mov eax ebx +
jmp loc_10065FA  +
push esi  +
call sub_1001DFA  +
test eax eax +
jnz loc_100647B  +
push ebx  +
push ebx  +
push esi  +
call sub_1005688  +
test eax eax +
jnz loc_100645E  +
push offset aA  +
push edi  +
lea eax [ebp+PathName] +
push eax  +
call sub_1001EB0  +
jmp loc_10065A4  +
push eax  +
call ds:GetDriveTypeA  +
mov ebx eax +
cmp ebx 6 +
jz loc_10064A5  +
cmp ebx 3 +
jnz loc_10064B7  +
lea eax [ebp+PathName] +
push eax  +
call ds:GetFileAttributesA  +
cmp eax 0FFFFFFFFh +
jnz loc_10064F0  +
cmp ebx 2 +
jnz loc_10064E5  +
cmp [ebp+PathName] 41h +
jz loc_10064E5  +
cmp [ebp+PathName] 42h +
jz loc_10064E5  +
lea eax [ebp+PathName] +
push eax  +
call sub_10077F7  +
test eax eax +
jz loc_10064E5  +
cmp eax 19000h +
jnb loc_10064F0  +
inc [ebp+PathName]  +
jmp loc_10065A4  +
xor ebx ebx +
push ebx  +
push 3  +
lea eax [ebp+PathName] +
push eax  +
call sub_10040B7  +
test eax eax +
jnz loc_1006528  +
lea eax [ebp+PathName] +
push eax  +
call sub_1001DFA  +
test eax eax +
jnz loc_10064E5  +
push ebx  +
push 1  +
lea eax [ebp+PathName] +
push eax  +
call sub_10040B7  +
test eax eax +
jz loc_10064E5  +
lea eax [ebp+PathName] +
push eax  +
call sub_1001DFA  +
test eax eax +
jz loc_1006546  +
push edi  +
lea eax [ebp+PathName] +
push eax  +
call ds:GetWindowsDirectoryA  +
push offset aMsdownld_tmp  +
push edi  +
lea eax [ebp+PathName] +
push eax  +
call sub_1007480  +
lea eax [ebp+PathName] +
push eax  +
call sub_1001DCE  +
test eax eax +
jnz loc_1006576  +
inc [ebp+PathName]  +
mov [ebp-105h] al +
jmp loc_10065A4  +
push 2  +
lea eax [ebp+PathName] +
push eax  +
call ds:SetFileAttributesA  +
lea eax [ebp+PathName] +
push eax  +
push edi  +
push esi  +
call sub_1001EB0  +
push ebx  +
push 1  +
push esi  +
call sub_1005688  +
test eax eax +
jnz loc_1006401  +
cmp [ebp+PathName] 5Ah +
lea eax [ebp+PathName] +
jle loc_1006492  +
push edi  +
push eax  +
call ds:GetWindowsDirectoryA  +
push 4  +
push 3  +
lea eax [ebp+PathName] +
push eax  +
call sub_10040B7  +
test eax eax +
jnz loc_100647B  +
jmp loc_100637A  +
push eax  +
push eax  +
push offset sub_1005A3E  +
push eax  +
push 7D2h  +
push hModule  +
call sub_1004B26  +
neg eax  +
sbb eax eax +
neg eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp word_100DEF8 di +
jnz loc_1006659  +
cmp dword_100DEE4 edi +
jnz loc_1006650  +
call sub_1003D56  +
test eax eax +
jnz loc_1006647  +
xor eax eax +
jmp loc_1006771  +
cmp word_100DEF8 di +
jnz loc_1006659  +
call sub_1004ED7  +
test eax eax +
jz loc_1006640  +
call sub_10055FA  +
test eax eax +
jz loc_1006640  +
call sub_1006323  +
test eax eax +
jz loc_1006640  +
push ebx  +
push esi  +
mov esi 105h +
push esi  +
lea eax [ebp+String] +
push eax  +
call ds:GetSystemDirectoryA  +
push offset LibFileName  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1007480  +
lea eax [ebp+String] +
push eax  +
call ds:LoadLibraryA  +
mov esi eax +
mov ebx offset String +
cmp esi edi +
jz loc_10066BE  +
push offset aDecryptfilea  +
push esi  +
call ds:GetProcAddress  +
cmp eax edi +
jz loc_10066BE  +
push edi  +
push ebx  +
call eax  +
push esi  +
call ds:FreeLibrary  +
cmp dword_100DEE4 edi +
jnz loc_10066DE  +
cmp dword_100DAF0 edi +
jnz loc_10066DE  +
call sub_100485B  +
test eax eax +
jz loc_1006752  +
push ebx  +
call ds:SetCurrentDirectoryA  +
test eax eax +
jnz loc_1006705  +
push edi  +
push 10h  +
push edi  +
push edi  +
push 4BCh  +
push edi  +
call sub_10037C2  +
call sub_10035AA  +
mov dword_100D0C4 eax +
jmp loc_1006752  +
cmp dword_100DEEC edi +
jnz loc_1006716  +
call sub_1005E0C  +
test eax eax +
jz loc_1006752  +
test byte ptr dword_100E208 0C0h +
jnz loc_1006733  +
movzx eax word_100D0CC +
push eax  +
call sub_1001D67  +
mov dword_100D1E4 eax +
jmp loc_1006739  +
mov dword_100D1E4 edi +
cmp dword_100DEE4 edi +
jnz loc_1006756  +
cmp dword_100DAF0 edi +
jnz loc_1006756  +
call sub_1005E90  +
test eax eax +
jnz loc_1006756  +
xor eax eax +
jmp loc_100676F  +
cmp word_100DEF8 di +
jnz loc_100676C  +
cmp dword_100DEE4 edi +
jnz loc_100676C  +
call sub_1005105  +
xor eax eax +
inc eax  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1006B07  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1002E73  +
push [ebp+nShowCmd]  +
and dword_100D0C4 0 +
push [ebp+lpCmdLine]  +
push [ebp+hInstance]  +
call sub_10057B6  +
test eax eax +
jz loc_10067D0  +
push esi  +
call sub_100660E  +
mov esi eax +
call sub_1003E27  +
test esi esi +
pop esi  +
jz loc_10067D0  +
cmp byte_100DEFA 0 +
jnz loc_10067D0  +
mov eax dword_100DAEC +
test al 1 +
jz loc_10067D0  +
push eax  +
call sub_1001FD4  +
mov eax hObject +
test eax eax +
jz loc_10067E0  +
push eax  +
call ds:CloseHandle  +
mov eax dword_100D0C4 +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100680A  +
test eax eax +
jnz loc_100680F  +
mov ecx [esi] +
test ecx ecx +
jz loc_1006807  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10067FB  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100CD9C +
push offset dword_100CD8C  +
push dword_100CD98  +
mov dword_100CD8C eax +
push offset unk_100CD7C  +
push offset unk_100CD80  +
push offset unk_100CD78  +
call ds:__getmainargs  +
add esp 14h +
mov dword_100CD88 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_10068AF  +
cmp eax esi +
jnz loc_10068A2  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_10068B2  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1006889  +
xor esi esi +
inc esi  +
mov eax dword_100E24C +
cmp eax esi +
jnz loc_10068C5  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10068F4  +
mov eax dword_100E24C +
test eax eax +
jnz loc_10068EE  +
mov dword_100E24C esi +
push offset dword_1001298  +
push offset dword_100128C  +
call sub_10067EE  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10068F4  +
jmp loc_1006A1C  +
mov dword_100CD94 esi +
mov eax dword_100E24C +
cmp eax esi +
jnz loc_1006918  +
push offset dword_1001288  +
push offset dword_1001280  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100E24C 2 +
test ebx ebx +
jnz loc_1006924  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100E258 0 +
jz loc_1006948  +
push offset dword_100E258  +
call sub_1006F49  +
pop ecx  +
test eax eax +
jz loc_1006948  +
push 0  +
push 2  +
push 0  +
call dword_100E258  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_1006962  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_1006972  +
cmp al 20h +
ja loc_1006972  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1006962  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_100697E  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_1006981  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_100CD90 eax +
cmp dword_100CD84 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_10069B3  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_10069C6  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_100694F  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_100CD90 eax +
cmp dword_100CD84 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_100CD94 0 +
jnz loc_1006A07  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100CD90 +
jmp loc_1006A28  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1006A45  +
xor eax eax +
jmp loc_1006A92  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1006A41  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1006A7F  +
cmp ecx 20Bh +
jnz loc_1006A41  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1006A41  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1006A8D  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1006A41  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100CD84 eax +
call sub_10070DA  +
push eax  +
call ds:__set_app_type  +
or dword_100E244 0FFFFFFFFh +
or dword_100E248 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100CDA4 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100CDA0 +
mov [eax] ecx +
call sub_1003606  +
cmp dword_100C2D8 0 +
jnz loc_1006AEB  +
push offset sub_1003606  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100705C  +
xor eax eax +
retn   +
***
call sub_1007119  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_100C2C4 +
jnz loc_1006B12  +
retn 0  +
jmp loc_10071AF  +
***
push ecx  +
lea ecx [esp+4] +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp] eax +
retn   +
***
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
push edi  +
mov ebp [ecx] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call __local_unwind4  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_1006D06  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_1006E33  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_1006D98  +
jmp loc_1006D40  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_1006D6B  +
mov edx edi +
call @_EH4_CallFilterFunc@8  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_1006DA2  +
jg loc_1006DAB  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_1006D40  +
cmp [ebp+var_1] 0 +
jz loc_1006D98  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1006D8A  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_1006D78  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1006DDF  +
cmp dword_100E254 0 +
jz loc_1006DDF  +
push offset dword_100E254  +
call sub_1006F49  +
add esp 4 +
test eax eax +
jz loc_1006DDF  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_100E254  +
add esp 8 +
mov ecx [ebp+arg_C] +
call @_EH4_GlobalUnwind@4  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_1006E00  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call @_EH4_LocalUnwind@16  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1006E18  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call @_EH4_TransferToHandler@8  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_1006D98  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call @_EH4_LocalUnwind@16  +
jmp loc_1006D78  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1006E94  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1006E94  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1006E8E  +
cmp eax 19930521h +
jz loc_1006E8E  +
cmp eax 19930522h +
jz loc_1006E8E  +
cmp eax 1994000h +
jnz loc_1006E94  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1006E54+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1006ED6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1006ED2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1006F3D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1006F35  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1006F3F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1006F25  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1006EC0  +
pop ecx  +
test eax eax +
jz loc_1006FA6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1006F00  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006FA6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1006FAF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1006B07  +
push offset dword_100C2C4  +
call sub_1006CD0  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10070CD  +
cmp ecx 0FFFFFFFFh +
jz loc_10070CD  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10070C6  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10070C6  +
cmp edx 10000000h +
jnb loc_10070C6  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10070C6  +
jmp loc_10070C1  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100710F  +
push eax  +
call sub_1007074  +
test eax eax +
jz loc_100710F  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1007104  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100710F  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100C2C4 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_100714B  +
test eax ebx +
jz loc_100714B  +
not eax  +
mov dword_100C2C8 eax +
jmp loc_10071A6  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1007192  +
test dword_100C2C4 ebx +
jnz loc_1007197  +
mov esi 0BB40E64Fh +
mov dword_100C2C4 esi +
not esi  +
mov dword_100C2C8 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100CEA8 eax +
mov dword_100CEA4 ecx +
mov dword_100CEA0 edx +
mov dword_100CE9C ebx +
mov dword_100CE98 esi +
mov dword_100CE94 edi +
mov word_100CEC0 ss +
mov word_100CEB4 cs +
mov word_100CE90 ds +
mov word_100CE8C es +
mov word_100CE88 fs +
mov word_100CE84 gs +
pushf   +
pop dword_100CEB8  +
mov eax [ebp+0] +
mov dword_100CEAC eax +
mov eax [ebp+4] +
mov dword_100CEB0 eax +
lea eax [ebp+8] +
mov dword_100CEBC eax +
mov eax [ebp-320h] +
mov dword_100CDF8 10001h +
mov eax dword_100CEB0 +
mov dword_100CDB4 eax +
mov dword_100CDA8 0C0000409h +
mov dword_100CDAC 1 +
mov eax dword_100C2C4 +
mov [ebp-328h] eax +
mov eax dword_100C2C8 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push esi  +
mov eax [esp+14h] +
or eax eax +
jnz loc_10072D1  +
mov ecx [esp+10h] +
mov eax [esp+0Ch] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+8] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  dword ptr [esp+10h] +
mov ecx eax +
mov eax esi +
mul  dword ptr [esp+10h] +
add edx ecx +
jmp loc_1007318  +
mov ecx eax +
mov ebx [esp+10h] +
mov edx [esp+0Ch] +
mov eax [esp+8] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_10072DF  +
div  ebx +
mov esi eax +
mul  dword ptr [esp+14h] +
mov ecx eax +
mov eax [esp+10h] +
mul  esi +
add edx ecx +
jb loc_100730D  +
cmp edx [esp+0Ch] +
ja loc_100730D  +
jb loc_1007316  +
cmp eax [esp+8] +
jbe loc_1007316  +
dec esi  +
sub eax [esp+10h] +
sbb edx [esp+14h] +
xor ebx ebx +
sub eax [esp+8] +
sbb edx [esp+0Ch] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov ebx offset unk_100C2E0 +
retn   +
***
mov eax [esp+8] +
mov ecx [esp+10h] +
or ecx eax +
mov ecx [esp+0Ch] +
jnz loc_1007389  +
mov eax [esp+4] +
mul  ecx +
retn 10h  +
***
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+8] +
mul  dword ptr [esp+14h] +
add ebx eax +
mov eax [esp+8] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx dword ptr [ebp+TestChar] +
cmp bl [ebp+arg_4] +
jnz loc_10073D1  +
push ebx  +
call ds:IsDBCSLeadByte  +
test eax eax +
jz loc_10073CD  +
xor eax eax +
cmp bx word ptr [ebp+arg_4] +
setnz al  +
jmp loc_10073D4  +
xor eax eax +
jmp loc_10073D4  +
xor eax eax +
inc eax  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_1007402  +
movzx eax word ptr [esi] +
push dword ptr [ebp+arg_4]  +
push eax  +
call sub_10073A9  +
test eax eax +
jz loc_100740E  +
push esi  +
call ds:CharNextA  +
mov esi eax +
cmp byte ptr [esi] 0 +
jnz loc_10073E9  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov eax esi +
jmp loc_1007409  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+lpString] +
push esi  +
push edi  +
push ebx  +
call ds:lstrlenA  +
mov esi ds:CharPrevA +
add eax ebx +
push eax  +
push ebx  +
call esi  +
push eax  +
jmp loc_1007443  +
cmp byte ptr [edi] 5Ch +
jz loc_1007451  +
push edi  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
ja loc_100743D  +
cmp byte ptr [edi] 5Ch +
jnz loc_1007471  +
cmp edi ebx +
jz loc_100745E  +
push edi  +
push ebx  +
call esi  +
cmp byte ptr [eax] 3Ah +
jnz loc_1007467  +
push edi  +
call ds:CharNextA  +
mov edi eax +
mov byte ptr [edi] 0 +
mov [ebp+var_4] 1 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+lpString] +
push edi  +
call ds:lstrlenA  +
lea ecx [eax+1] +
cmp ecx [ebp+arg_4] +
jb loc_100749F  +
mov eax 8007007Ah +
jmp loc_10074D1  +
push esi  +
lea esi [eax+edi] +
cmp esi edi +
jbe loc_10074B8  +
push esi  +
push edi  +
call ds:CharPrevA  +
cmp byte ptr [eax] 5Ch +
jz loc_10074B8  +
mov byte ptr [esi] 5Ch +
inc esi  +
mov eax [ebp+arg_8] +
mov byte ptr [esi] 0 +
pop esi  +
jmp loc_10074C2  +
inc eax  +
cmp byte ptr [eax] 20h +
jz loc_10074C1  +
push eax  +
push [ebp+arg_4]  +
push edi  +
call sub_1001EEA  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpFileName]  +
call ds:GetFileAttributesA  +
cmp eax 0FFFFFFFFh +
jnz loc_10074F2  +
xor eax eax +
jmp loc_10074FA  +
shr eax 4 +
not eax  +
and eax 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
jmp loc_100752C  +
movzx eax word ptr [esi] +
push dword ptr [ebp+arg_4]  +
push eax  +
call sub_10073A9  +
test eax eax +
jnz loc_1007523  +
mov edi esi +
push esi  +
call ds:CharNextA  +
mov esi eax +
cmp byte ptr [esi] 0 +
jnz loc_1007511  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
mov cl [eax] +
cmp cl 30h +
jl loc_100755D  +
cmp cl 39h +
jg loc_100755D  +
add esi 0FFFFFFFDh +
movsx ecx cl +
jmp loc_1007573  +
cmp cl 61h +
jl loc_1007565  +
add cl 0E0h +
movsx ecx cl +
sub ecx 37h +
lea edx [ecx-0Ah] +
cmp edx 5 +
ja loc_1007581  +
shl esi 4 +
push eax  +
add esi ecx +
call ds:CharNextA  +
jmp loc_1007549  +
mov ecx [ebp+arg_4] +
mov [ecx] esi +
xor ecx ecx +
cmp eax [ebp+lpsz] +
pop esi  +
setnz cl  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_10] +
mov edx [ebp+arg_4] +
xor eax eax +
inc eax  +
cmp edx [ecx+8] +
jnz loc_10075C7  +
mov edx [ebp+arg_C] +
push esi  +
mov esi edx +
and esi 3FFh +
cmp [ecx] si +
pop esi  +
jnz loc_10075C7  +
mov [ecx+4] eax +
mov [ecx] dx +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov ax [ebp+arg_C] +
and [ebp+var_8] 0 +
lea ecx [ebp+lParam] +
push ecx  +
push offset EnumFunc  +
push [ebp+lpName]  +
mov word ptr [ebp+lParam] ax +
mov eax [ebp+lpType] +
push eax  +
push [ebp+hModule]  +
mov [ebp+var_4] eax +
call ds:EnumResourceLanguagesA  +
mov eax [ebp+var_8] +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_100C5E0 0FFFFFFFEh +
jnz loc_1007653  +
and dword_100C5E0 0 +
push 1  +
push [ebp+lpName]  +
push [ebp+lpType]  +
push [ebp+hModule]  +
call sub_10075D0  +
test eax eax +
jnz loc_1007649  +
push 0Dh  +
push [ebp+lpName]  +
push [ebp+lpType]  +
push [ebp+hModule]  +
call sub_10075D0  +
test eax eax +
jz loc_1007653  +
mov dword_100C5E0 1 +
mov eax dword_100C5E0 +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B4h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_A8] 0 +
cmp dword_100C5E4 0FFFFFFFEh +
mov [ebp+cbData] 0Ch +
jnz loc_1007786  +
and dword_100C5E4 0 +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
test eax eax +
jz loc_1007786  +
cmp [ebp+VersionInformation.dwPlatformId] 1 +
jnz loc_1007786  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jnz loc_1007786  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jnb loc_1007786  +
push 4Ah  +
call ds:GetSystemMetrics  +
test eax eax +
jz loc_1007786  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
push offset aControlPanelDe  +
push 80000001h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_1007786  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push offset Default  +
push [ebp+hKey]  +
call ds:RegQueryValueExA  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
test edi edi +
pop edi  +
jnz loc_1007786  +
lea eax [ebp+var_A8] +
push eax  +
lea eax [ebp+sz] +
push eax  +
call sub_100753E  +
test eax eax +
jz loc_1007786  +
and [ebp+var_A8] 3FFh +
cmp [ebp+var_A8] 1 +
jz loc_100777C  +
cmp [ebp+var_A8] 0Dh +
jnz loc_1007786  +
mov dword_100C5E4 1 +
mov ecx [ebp+var_4] +
mov eax dword_100C5E4 +
xor ecx ebp +
call sub_1006B07  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov ecx [ebp+lpRootPathName] +
xor eax eax +
mov [ebp+SectorsPerCluster] eax +
mov [ebp+BytesPerSector] eax +
mov [ebp+NumberOfFreeClusters] eax +
mov [ebp+nNumerator] eax +
cmp [ecx] al +
jnz loc_10077BD  +
xor eax eax +
jmp locret_10077EE  +
lea eax [ebp+nNumerator] +
push eax  +
lea eax [ebp+NumberOfFreeClusters] +
push eax  +
lea eax [ebp+BytesPerSector] +
push eax  +
lea eax [ebp+SectorsPerCluster] +
push eax  +
push ecx  +
call ds:GetDiskFreeSpaceA  +
test eax eax +
jz loc_10077B9  +
mov eax [ebp+BytesPerSector] +
imul eax [ebp+SectorsPerCluster] +
push 400h  +
push [ebp+nNumerator]  +
push eax  +
call ds:MulDiv  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_100779C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+SectorsPerCluster] 0 +
and [ebp+BytesPerSector] 0 +
and [ebp+nNumerator] 0 +
and [ebp+TotalNumberOfClusters] 0 +
lea eax [ebp+TotalNumberOfClusters] +
push eax  +
lea eax [ebp+nNumerator] +
push eax  +
lea eax [ebp+BytesPerSector] +
push eax  +
lea eax [ebp+SectorsPerCluster] +
push eax  +
push [ebp+lpRootPathName]  +
call ds:GetDiskFreeSpaceA  +
test eax eax +
jz locret_100785D  +
push esi  +
mov esi [ebp+BytesPerSector] +
imul esi [ebp+SectorsPerCluster] +
push 400h  +
push [ebp+nNumerator]  +
push esi  +
call ds:MulDiv  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_100785C  +
mov [ecx] esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_20] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_1007897  +
mov ebx [ebp+arg_0] +
push 804h  +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+8] edi +
call ebx  +
pop ecx  +
cmp eax edi +
jnz loc_100789E  +
push edi  +
push 5  +
push esi  +
call sub_1008BA0  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
mov ecx [ebp+arg_4] +
or dword ptr [eax+88h] 0FFFFFFFFh +
or dword ptr [eax+84h] 0FFFFFFFFh +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_C] +
mov [eax+10h] ecx +
mov ecx [ebp+arg_10] +
mov [eax+14h] ecx +
mov ecx [ebp+arg_14] +
mov [eax+18h] ecx +
mov ecx [ebp+arg_18] +
mov [eax+1Ch] ecx +
mov ecx [ebp+arg_1C] +
mov [eax+20h] ecx +
push 0Fh  +
pop ecx  +
mov [eax+0B2h] cx +
mov ecx 0FFFFh +
mov [eax+8] ebx +
mov [eax] esi +
mov [eax+48h] edi +
mov [eax+44h] edi +
mov [eax+4Ch] edi +
mov [eax+0A0h] ecx +
mov [eax+0A8h] ecx +
mov [eax+0A4h] ecx +
jmp loc_1007899  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1007923  +
xor eax eax +
jmp loc_10079A7  +
push 24h  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+arg_4]  +
call dword ptr [esi+10h]  +
add esp 0Ch +
cmp eax 24h +
jnz loc_100791C  +
cmp [ebp+var_24] 4643534Dh +
jnz loc_100791C  +
mov eax 103h +
cmp [ebp+var_C] ax +
jz loc_100795B  +
movzx eax [ebp+var_C] +
push eax  +
push 3  +
push dword ptr [esi]  +
call sub_1008BA0  +
jmp loc_100791C  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10079A4  +
mov ecx [ebp+var_1C] +
mov [eax] ecx +
mov cx [ebp+var_A] +
mov [eax+4] cx +
mov cx [ebp+var_8] +
mov [eax+6] cx +
mov cx [ebp+var_4] +
mov [eax+8] cx +
mov cx [ebp+var_2] +
mov [eax+0Ah] cx +
movzx ecx [ebp+var_6] +
mov edx ecx +
shr edx 2 +
and edx 1 +
mov [eax+0Ch] edx +
mov edx ecx +
and edx 1 +
and ecx 2 +
mov [eax+10h] edx +
mov [eax+14h] ecx +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
lea eax [esi+7BCh] +
lea ecx [esi+3B7h] +
mov [eax+4] ecx +
lea ecx [esi+4B8h] +
mov [eax+8] ecx +
lea ecx [esi+5B9h] +
mov [eax+0Ch] ecx +
mov ecx [esi+38h] +
mov [eax+10h] ecx +
mov cx [esi+70h] +
push edi  +
mov [eax+1Eh] cx +
mov cx [esi+72h] +
push eax  +
xor ebx ebx +
push ebx  +
lea edi [esi+7E4h] +
mov [eax+20h] cx +
call dword ptr [esi+24h]  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1007A13  +
push ebx  +
push 0Bh  +
push dword ptr [esi]  +
call sub_1008BA0  +
xor eax eax +
jmp loc_1007A4D  +
cmp [esi+28h] ebx +
jz loc_1007A4A  +
mov [edi] ebx +
mov eax [esi+38h] +
mov [edi+4] eax +
mov eax [esi+4Ch] +
mov [edi+8] eax +
mov ax [esi+0A0h] +
mov [edi+0Ch] ax +
mov ax [esi+70h] +
mov [edi+0Eh] ax +
movzx eax word ptr [esi+72h] +
push edi  +
mov [edi+10h] eax +
call dword ptr [esi+28h]  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1007A05  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi+0A8h]  +
lea edi [esi+7E4h] +
push dword ptr [esi+48h]  +
push dword ptr [esi+84h]  +
call dword ptr [esi+10h]  +
add esp 0Ch +
cmp [esi+0A8h] eax +
jnz loc_1007B80  +
mov eax [esi+48h] +
movzx eax word ptr [eax+4] +
mov ebx [ebp+arg_4] +
add eax ebx +
cmp eax [esi+98h] +
ja loc_1007B80  +
mov eax [esi+48h] +
movzx eax word ptr [eax+4] +
push eax  +
mov eax [esi+3Ch] +
add eax ebx +
push eax  +
push dword ptr [esi+84h]  +
call dword ptr [esi+10h]  +
mov ecx [esi+48h] +
movzx ecx word ptr [ecx+4] +
add esp 0Ch +
cmp ecx eax +
jnz loc_1007B80  +
mov eax [esi+48h] +
xor ecx ecx +
cmp [eax] ecx +
jz loc_1007B06  +
movzx eax word ptr [eax+4] +
push ecx  +
push eax  +
mov eax [esi+3Ch] +
add eax ebx +
push eax  +
call sub_1008BC3  +
push eax  +
mov eax [esi+0A8h] +
sub eax 4 +
push eax  +
mov eax [esi+48h] +
add eax 4 +
push eax  +
call sub_1008BC3  +
mov ecx [esi+48h] +
cmp eax [ecx] +
jnz loc_1007B80  +
xor ecx ecx +
mov eax [esi+48h] +
add [eax+4] bx +
cmp ebx ecx +
ja loc_1007B1E  +
mov eax [esi+48h] +
cmp [eax+6] cx +
jz loc_1007B1E  +
xor edx edx +
jmp loc_1007B21  +
xor edx edx +
inc edx  +
cmp [esi+28h] ecx +
jz loc_1007B7B  +
mov dword ptr [edi] 2 +
mov eax [esi+38h] +
mov [edi+4] eax +
mov ax [esi+0A8h] +
sub ax 8 +
mov [edi+0Ch] ax +
jz loc_1007B4E  +
mov eax [esi+48h] +
add eax 8 +
mov [edi+8] eax +
jmp loc_1007B51  +
mov [edi+8] ecx +
mov eax [esi+3Ch] +
add eax ebx +
mov [edi+10h] eax +
mov eax [esi+48h] +
mov ax [eax+4] +
push edi  +
mov [edi+14h] ax +
mov [edi+18h] edx +
mov [edi+1Ch] bx +
call dword ptr [esi+28h]  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1007B7B  +
push 0  +
push 0Bh  +
jmp loc_1007B84  +
xor eax eax +
inc eax  +
jmp loc_1007B8D  +
push 0  +
push 4  +
push dword ptr [esi]  +
call sub_1008BA0  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 1  +
push 0  +
push dword ptr [esi+88h]  +
call dword ptr [esi+1Ch]  +
mov ebx [ebp+arg_4] +
mov edi [ebp+arg_0] +
push ebx  +
push edi  +
push dword ptr [esi+88h]  +
mov [ebp+arg_8] eax +
call dword ptr [esi+10h]  +
add esp 18h +
test eax eax +
jg loc_1007BDB  +
push 0  +
push 4  +
push dword ptr [esi]  +
call sub_1008BA0  +
xor eax eax +
jmp loc_1007C1B  +
mov cl [edi+ebx-1] +
mov eax edi +
mov byte ptr [edi+ebx-1] 0 +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1007BE9  +
sub eax edi +
lea edx [eax+1] +
cmp edx ebx +
jl loc_1007BFD  +
test cl cl +
jnz loc_1007BCC  +
mov ecx [ebp+arg_8] +
push 0  +
lea eax [eax+ecx+1] +
push eax  +
push dword ptr [esi+88h]  +
call dword ptr [esi+1Ch]  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_1007BCC  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push 1  +
push 0  +
push dword ptr [esi+88h]  +
call dword ptr [esi+1Ch]  +
mov ebx eax +
add esp 0Ch +
cmp ebx 0FFFFFFFFh +
jnz loc_1007C57  +
push 0  +
push 4  +
push dword ptr [esi]  +
call sub_1008BA0  +
xor eax eax +
jmp loc_1007CCF  +
mov ax [esi+0ACh] +
push edi  +
mov [esi+7DEh] ax +
mov ax [esi+70h] +
lea edi [esi+7BCh] +
mov [esi+7DAh] ax +
mov eax [esi+38h] +
push edi  +
push 5  +
mov [edi] ebx +
mov [esi+7CCh] eax +
call dword ptr [esi+24h]  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1007CBC  +
movzx eax word ptr [esi+7DEh] +
mov [esi+0ACh] ax +
test ax ax +
jz loc_1007CCB  +
mov edi [edi] +
cmp edi ebx +
jz loc_1007CCB  +
push 0  +
push edi  +
push dword ptr [esi+88h]  +
call dword ptr [esi+1Ch]  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_1007CCB  +
push 0  +
push 0Bh  +
push dword ptr [esi]  +
call sub_1008BA0  +
xor eax eax +
jmp loc_1007CCE  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi+0B2h] +
push edi  +
and eax 0Fh +
xor edi edi +
sub eax edi +
jz loc_1007D36  +
dec eax  +
jz loc_1007D1B  +
dec eax  +
jz loc_1007D11  +
dec eax  +
jz loc_1007D07  +
sub eax 0Ch +
jz loc_1007D44  +
push edi  +
push 6  +
jmp loc_1007D2B  +
push dword ptr [esi+34h]  +
call sub_1008DBE  +
jmp loc_1007D23  +
push dword ptr [esi+34h]  +
call nullsub_1  +
jmp loc_1007D23  +
push dword ptr [esi+34h]  +
call nullsub_1  +
pop ecx  +
test eax eax +
jz loc_1007D36  +
push edi  +
push 7  +
push dword ptr [esi]  +
call sub_1008BA0  +
xor eax eax +
jmp loc_1007D47  +
push dword ptr [esi+3Ch]  +
call dword ptr [esi+4]  +
push dword ptr [esi+40h]  +
call dword ptr [esi+4]  +
pop ecx  +
pop ecx  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
movzx ecx word ptr [esi+0B2h] +
mov eax ecx +
push edi  +
and eax 0Fh +
xor edi edi +
sub eax edi +
lea edx [esi+94h] +
mov dword ptr [edx] 8000h +
jz loc_1007E26  +
dec eax  +
jz loc_1007E11  +
dec eax  +
jz loc_1007DE7  +
dec eax  +
jz loc_1007DB5  +
sub eax 0Ch +
jz loc_1007F12  +
push 6  +
pop eax  +
push edi  +
push eax  +
push dword ptr [esi]  +
call sub_1008BA0  +
push 0Fh  +
pop eax  +
mov [esi+0B2h] ax +
xor eax eax +
jmp loc_1007F15  +
push edi  +
push edi  +
push edi  +
push edi  +
xor eax eax +
push edi  +
shr ecx 8 +
inc eax  +
push edi  +
and ecx 1Fh +
shl eax cl +
lea ebx [esi+98h] +
push ebx  +
push edi  +
mov [ebp+var_10] eax +
push edi  +
lea eax [ebp+var_10] +
push eax  +
push edx  +
call sub_1008C34  +
add esp 2Ch +
test eax eax +
jz loc_1007E32  +
push 7  +
jmp loc_1007D9A  +
mov eax [esi+20h] +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
lea ebx [esi+98h] +
push ebx  +
push edi  +
mov [ebp+var_4] eax +
push edi  +
lea eax [ebp+var_8] +
shr ecx 8 +
push eax  +
and ecx 1Fh +
push edx  +
mov [ebp+var_8] ecx +
call sub_1003606  +
jmp loc_1007DDC  +
push edi  +
lea ebx [esi+98h] +
push ebx  +
push edi  +
push edi  +
push edx  +
call sub_1003606  +
add esp 14h +
jmp loc_1007DDF  +
lea ebx [esi+98h] +
mov dword ptr [ebx] 8000h +
push dword ptr [ebx]  +
call dword ptr [esi+8]  +
pop ecx  +
mov [esi+3Ch] eax +
cmp eax edi +
jnz loc_1007E47  +
push edi  +
push 5  +
jmp loc_1007D9D  +
push dword ptr [esi+94h]  +
call dword ptr [esi+8]  +
pop ecx  +
mov [esi+40h] eax +
cmp eax edi +
jnz loc_1007E61  +
push dword ptr [esi+3Ch]  +
call dword ptr [esi+4]  +
pop ecx  +
jmp loc_1007E3F  +
movzx eax word ptr [esi+0B2h] +
and eax 0Fh +
dec eax  +
jz loc_1007ED3  +
dec eax  +
jz loc_1007EA7  +
dec eax  +
jnz loc_1007F12  +
push dword ptr [esi+1Ch]  +
lea eax [esi+34h] +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
lea eax [ebp+var_10] +
push dword ptr [esi+8]  +
push eax  +
lea eax [esi+94h] +
push eax  +
call sub_1008C34  +
add esp 2Ch +
jmp loc_1007EED  +
push dword ptr [esi+1Ch]  +
lea eax [esi+34h] +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
lea eax [ebp+var_8] +
push dword ptr [esi+8]  +
push eax  +
lea eax [esi+94h] +
push eax  +
call sub_1003606  +
jmp loc_1007EA2  +
lea eax [esi+34h] +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
lea eax [esi+94h] +
push dword ptr [esi+8]  +
push eax  +
call sub_1003606  +
add esp 14h +
cmp eax edi +
jz loc_1007F12  +
push dword ptr [esi+3Ch]  +
xor ebx ebx +
cmp eax 1 +
setnz bl  +
lea ebx [ebx+ebx+5] +
call dword ptr [esi+4]  +
push dword ptr [esi+40h]  +
call dword ptr [esi+4]  +
pop ecx  +
pop ecx  +
push edi  +
push ebx  +
jmp loc_1007D9D  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi+0B2h] +
push edi  +
and eax 0Fh +
xor edi edi +
sub eax edi +
jz loc_1007F7D  +
dec eax  +
jz loc_1007F62  +
dec eax  +
jz loc_1007F58  +
dec eax  +
jz loc_1007F4E  +
sub eax 0Ch +
jz loc_1007F7D  +
push edi  +
push 6  +
jmp loc_1007F72  +
push dword ptr [esi+34h]  +
call sub_1008D98  +
jmp loc_1007F6A  +
push dword ptr [esi+34h]  +
call nullsub_1  +
jmp loc_1007F6A  +
push dword ptr [esi+34h]  +
call nullsub_1  +
pop ecx  +
test eax eax +
jz loc_1007F7D  +
push edi  +
push 7  +
push dword ptr [esi]  +
call sub_1008BA0  +
xor eax eax +
jmp loc_1007F80  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi+0B2h] +
and eax 0Fh +
xor ebx ebx +
sub eax ebx +
push edi  +
jz loc_1008049  +
dec eax  +
jz loc_1008013  +
dec eax  +
jz loc_1007FE0  +
dec eax  +
jz loc_1007FBB  +
push ebx  +
push 6  +
jmp loc_100807B  +
mov edi [ebp+arg_4] +
movzx eax word ptr [edi] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
mov eax [esi+48h] +
push dword ptr [esi+40h]  +
movzx eax word ptr [eax+4] +
push eax  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+34h]  +
call sub_1008D32  +
jmp loc_1008003  +
mov edi [ebp+arg_4] +
movzx eax word ptr [edi] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
mov eax [esi+48h] +
push dword ptr [esi+40h]  +
movzx eax word ptr [eax+4] +
push eax  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+34h]  +
call nullsub_1  +
add esp 14h +
test eax eax +
jnz loc_1008078  +
mov ax word ptr [ebp+arg_0] +
mov [edi] ax +
jmp loc_1008073  +
mov eax [esi+94h] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
mov eax [esi+48h] +
push dword ptr [esi+40h]  +
movzx eax word ptr [eax+4] +
push eax  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+34h]  +
call nullsub_1  +
add esp 14h +
test eax eax +
jnz loc_1008078  +
mov eax [ebp+arg_4] +
mov cx word ptr [ebp+arg_0] +
mov [eax] cx +
jmp loc_1008073  +
mov eax [esi+48h] +
movzx eax word ptr [eax+4] +
movzx ecx ax +
cmp ecx [esi+94h] +
ja loc_1008078  +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
movzx eax ax +
push eax  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+40h]  +
call memcpy  +
add esp 0Ch +
xor eax eax +
inc eax  +
jmp loc_1008084  +
push ebx  +
push 7  +
push dword ptr [esi]  +
call sub_1008BA0  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
lea eax [ebx+5B9h] +
push eax  +
mov esi 101h +
push esi  +
lea edi [ebx+6BAh] +
push edi  +
call sub_1001EB0  +
push [ebp+arg_4]  +
push esi  +
push edi  +
call sub_1001EEA  +
lea edi [esi+7Fh] +
push edi  +
mov esi 8000h +
lea eax [ebx+6BAh] +
push esi  +
push eax  +
call dword ptr [ebx+0Ch]  +
add esp 0Ch +
mov [ebx+88h] eax +
cmp eax 0FFFFFFFFh +
jz loc_1008360  +
push edi  +
lea eax [ebx+6BAh] +
push esi  +
push eax  +
call dword ptr [ebx+0Ch]  +
add esp 0Ch +
mov [ebx+84h] eax +
cmp eax 0FFFFFFFFh +
jz loc_1008360  +
push 24h  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [ebx+88h]  +
call dword ptr [ebx+10h]  +
add esp 0Ch +
cmp eax 24h +
jz loc_1008125  +
push 0  +
push 2  +
jmp loc_1008364  +
cmp [ebp+var_24] 4643534Dh +
jnz loc_100811C  +
mov eax 103h +
cmp [ebp+var_C] ax +
jz loc_1008145  +
movzx eax [ebp+var_C] +
push eax  +
push 3  +
jmp loc_1008364  +
mov ax [ebp+arg_C] +
mov ecx 0FFFFh +
cmp ax cx +
jz loc_100816C  +
mov cx [ebp+arg_8] +
cmp cx [ebp+var_4] +
jnz loc_1008163  +
cmp ax [ebp+var_2] +
jz loc_100816C  +
push 0  +
push 0Ah  +
jmp loc_1008364  +
push 9  +
xor eax eax +
lea edi [ebx+50h] +
pop ecx  +
lea esi [ebp+var_24] +
movs   +
test byte ptr [ebx+6Eh] 4 +
mov word ptr [ebp+arg_0] ax +
mov byte ptr [ebp+arg_0+2] al +
mov byte ptr [ebp+arg_0+3] al +
jz loc_10081C7  +
push 4  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [ebx+88h]  +
call dword ptr [ebx+10h]  +
add esp 0Ch +
cmp eax 4 +
jnz loc_100811C  +
mov eax 0EA60h +
cmp word ptr [ebp+arg_0] ax +
ja loc_100811C  +
cmp byte ptr [ebp+arg_0+2] 0FFh +
ja loc_100811C  +
cmp byte ptr [ebp+arg_0+3] 0FFh +
ja loc_100811C  +
movzx eax word ptr [ebp+arg_0] +
xor edi edi +
cmp [ebx+0A0h] eax +
jz loc_1008206  +
mov eax [ebx+4Ch] +
cmp eax edi +
jz loc_10081E4  +
push eax  +
call dword ptr [ebx+4]  +
pop ecx  +
mov [ebx+4Ch] edi +
movzx eax word ptr [ebp+arg_0] +
mov [ebx+0A0h] eax +
cmp eax edi +
jbe loc_1008206  +
push eax  +
call dword ptr [ebx+8]  +
pop ecx  +
mov [ebx+4Ch] eax +
cmp eax edi +
jnz loc_1008206  +
push edi  +
push 5  +
jmp loc_1008364  +
mov eax [ebx+0A0h] +
cmp eax edi +
jbe loc_100822E  +
push eax  +
push dword ptr [ebx+4Ch]  +
push dword ptr [ebx+88h]  +
call dword ptr [ebx+10h]  +
add esp 0Ch +
cmp [ebx+0A0h] eax +
jz loc_100822E  +
push edi  +
jmp loc_100811E  +
movzx eax byte ptr [ebp+arg_0+2] +
add eax 8 +
cmp [ebx+44h] edi +
jnz loc_100827C  +
push eax  +
mov [ebx+0A4h] eax +
call dword ptr [ebx+8]  +
pop ecx  +
mov [ebx+44h] eax +
cmp eax edi +
jz loc_10081FE  +
movzx eax byte ptr [ebp+arg_0+3] +
add eax 8 +
cmp [ebx+48h] edi +
jnz loc_100828C  +
push eax  +
mov [ebx+0A8h] eax +
call dword ptr [ebx+8]  +
pop ecx  +
mov [ebx+48h] eax +
cmp eax edi +
jz loc_10081FE  +
push dword ptr [ebx+0A8h]  +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_1008294  +
cmp eax [ebx+0A4h] +
jz loc_100824C  +
push edi  +
push 9  +
jmp loc_1008364  +
cmp eax [ebx+0A8h] +
jnz loc_1008284  +
test byte ptr [ebx+6Eh] 1 +
mov esi 100h +
jz loc_10082CC  +
push ebx  +
push esi  +
lea eax [ebx+1B5h] +
push eax  +
call sub_1007B99  +
test eax eax +
jz loc_100836B  +
push ebx  +
push esi  +
lea eax [ebx+2B6h] +
push eax  +
call sub_1007B99  +
test eax eax +
jnz loc_10082DA  +
jmp loc_100836B  +
mov byte ptr [ebx+1B5h] 0 +
mov byte ptr [ebx+2B6h] 0 +
test byte ptr [ebx+6Eh] 2 +
jz loc_1008306  +
push ebx  +
push esi  +
lea eax [ebx+3B7h] +
push eax  +
call sub_1007B99  +
test eax eax +
jz loc_100836B  +
push ebx  +
push esi  +
lea eax [ebx+4B8h] +
push eax  +
call sub_1007B99  +
test eax eax +
jnz loc_1008314  +
jmp loc_100836B  +
mov byte ptr [ebx+3B7h] 0 +
mov byte ptr [ebx+4B8h] 0 +
push 1  +
push edi  +
push dword ptr [ebx+88h]  +
call dword ptr [ebx+1Ch]  +
add esp 0Ch +
mov [ebx+2Ch] eax +
push edi  +
cmp eax 0FFFFFFFFh +
jnz loc_1008330  +
push 4  +
jmp loc_1008364  +
push dword ptr [ebx+60h]  +
push dword ptr [ebx+88h]  +
call dword ptr [ebx+1Ch]  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_1008347  +
push edi  +
jmp loc_100832C  +
mov ax [ebx+6Ch] +
push ebx  +
mov [ebx+0ACh] ax +
call sub_10079AF  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_100836D  +
push 0  +
push 1  +
push dword ptr [ebx]  +
call sub_1008BA0  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 10h  +
lea eax [esi+74h] +
push eax  +
push dword ptr [esi+88h]  +
call dword ptr [esi+10h]  +
add esp 0Ch +
cmp eax 10h +
jnz loc_10083B4  +
push esi  +
push 100h  +
lea eax [esi+0B4h] +
push eax  +
call sub_1007B99  +
test eax eax +
jz loc_10083B4  +
xor eax eax +
inc eax  +
jmp loc_10083C1  +
push 0  +
push 4  +
push dword ptr [esi]  +
call sub_1008BA0  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov di [ebp+arg_0] +
cmp di [esi+0B2h] +
jnz loc_10083E7  +
xor eax eax +
inc eax  +
jmp loc_1008412  +
push esi  +
call sub_1007CDA  +
test eax eax +
jnz loc_10083FF  +
push eax  +
push 7  +
push dword ptr [esi]  +
call sub_1008BA0  +
xor eax eax +
jmp loc_1008412  +
push esi  +
mov [esi+0B2h] di +
call sub_1007D52  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100842E  +
xor eax eax +
jmp loc_1008482  +
push esi  +
push 0Fh  +
call sub_10083CB  +
mov eax [esi+4Ch] +
test eax eax +
jz loc_1008442  +
push eax  +
call dword ptr [esi+4]  +
pop ecx  +
mov eax [esi+44h] +
test eax eax +
jz loc_100844E  +
push eax  +
call dword ptr [esi+4]  +
pop ecx  +
mov eax [esi+48h] +
test eax eax +
jz loc_100845A  +
push eax  +
call dword ptr [esi+4]  +
pop ecx  +
mov eax [esi+88h] +
cmp eax 0FFFFFFFFh +
jz loc_100846A  +
push eax  +
call dword ptr [esi+18h]  +
pop ecx  +
mov eax [esi+84h] +
cmp eax 0FFFFFFFFh +
jz loc_100847A  +
push eax  +
call dword ptr [esi+18h]  +
pop ecx  +
push esi  +
call dword ptr [esi+4]  +
xor eax eax +
pop ecx  +
inc eax  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+0A4h] +
imul eax ebx +
add eax [esi+2Ch] +
push edi  +
push 0  +
push eax  +
push dword ptr [esi+84h]  +
lea edi [esi+7E4h] +
mov [esi+90h] ebx +
call dword ptr [esi+1Ch]  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_100857A  +
push dword ptr [esi+0A4h]  +
push dword ptr [esi+44h]  +
push dword ptr [esi+84h]  +
call dword ptr [esi+10h]  +
add esp 0Ch +
cmp [esi+0A4h] eax +
jnz loc_100857A  +
mov eax [esi+44h] +
push 0  +
push dword ptr [eax]  +
push dword ptr [esi+84h]  +
call dword ptr [esi+1Ch]  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_100857A  +
mov eax [esi+44h] +
mov cl [eax+6] +
and cl 0Fh +
cmp cl 0Fh +
jnz loc_1008515  +
push 0  +
push 6  +
jmp loc_100857E  +
mov cx [eax+4] +
mov [esi+0B0h] cx +
movzx eax word ptr [eax+6] +
push esi  +
push eax  +
call sub_10083CB  +
test eax eax +
jz loc_1008585  +
cmp dword ptr [esi+28h] 0 +
jz loc_1008575  +
mov dword ptr [edi] 1 +
mov eax [esi+38h] +
mov [edi+4] eax +
mov ax [esi+0A4h] +
sub ax 8 +
mov [edi+0Ch] ax +
jz loc_100855D  +
mov eax [esi+44h] +
add eax 8 +
mov [edi+8] eax +
jmp loc_1008561  +
and dword ptr [edi+8] 0 +
push edi  +
mov [edi+0Eh] bx +
call dword ptr [esi+28h]  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1008575  +
push 0  +
push 0Bh  +
jmp loc_100857E  +
xor eax eax +
inc eax  +
jmp loc_1008587  +
push 0  +
push 4  +
push dword ptr [esi]  +
call sub_1008BA0  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov cx [esi+72h] +
movzx eax word ptr [esi+70h] +
push edi  +
lea edi [esi+7BCh] +
lea edx [esi+3B7h] +
mov [edi+4] edx +
lea edx [esi+4B8h] +
inc cx  +
mov [edi+8] edx +
lea edx [esi+5B9h] +
movzx ecx cx +
mov [edi+0Ch] edx +
mov edx [esi+38h] +
and dword ptr [edi+24h] 0 +
mov [ebp+var_8] eax +
mov [ebp+var_4] ecx +
mov [edi+10h] edx +
mov [edi+1Eh] ax +
mov [edi+20h] cx +
or ebx 0FFFFFFFFh +
mov eax [esi+88h] +
and [ebp+arg_0] 0 +
cmp eax ebx +
jz loc_1008606  +
push eax  +
call dword ptr [esi+18h]  +
pop ecx  +
test eax eax +
jnz loc_1008606  +
mov [esi+88h] ebx +
mov eax [esi+84h] +
cmp eax ebx +
jz loc_100861F  +
push eax  +
call dword ptr [esi+18h]  +
pop ecx  +
test eax eax +
jnz loc_100861F  +
mov [esi+84h] ebx +
cmp [esi+88h] ebx +
jnz loc_10086D6  +
cmp [esi+84h] ebx +
jnz loc_10086D6  +
push edi  +
push 4  +
call dword ptr [esi+24h]  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_10086D0  +
push [ebp+var_4]  +
lea eax [esi+3B7h] +
push [ebp+var_8]  +
push eax  +
push esi  +
call sub_1008090  +
test eax eax +
jz loc_100866A  +
push 0  +
push esi  +
call sub_100848A  +
test eax eax +
jnz loc_1008678  +
mov eax [esi] +
cmp dword ptr [eax] 0Bh +
jz loc_10086ED  +
mov [ebp+arg_0] 1 +
cmp [ebp+arg_0] 0 +
mov eax [esi] +
mov eax [eax] +
mov [edi+24h] eax +
jnz loc_10085E9  +
inc word ptr [esi+0AEh]  +
movzx eax word ptr [esi+0AEh] +
test ax ax +
jz loc_10086C5  +
mov edi 0FFFFh +
mov eax edi +
add [esi+0ACh] ax +
add [esi+0AEh] ax +
push esi  +
call sub_1008379  +
test eax eax +
jz loc_10086ED  +
cmp word ptr [esi+0AEh] 0 +
jnz loc_10086A1  +
xor eax eax +
inc eax  +
mov [esi+9Ch] eax +
jmp loc_10086EF  +
push 0  +
push 0Bh  +
jmp loc_10086E6  +
push 0  +
mov [esi+88h] ebx +
mov [esi+84h] ebx +
push 4  +
push dword ptr [esi]  +
call sub_1008BA0  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+48h] +
movzx eax word ptr [eax+6] +
add [esi+30h] eax +
movzx eax word ptr [esi+0B0h] +
push edi  +
xor edi edi +
cmp ax di +
jbe loc_1008725  +
dec eax  +
mov [esi+0B0h] ax +
push edi  +
push esi  +
call sub_1007A59  +
test eax eax +
jnz loc_1008752  +
cmp [esi+0B0h] di +
jnz loc_1008743  +
push esi  +
call sub_1008593  +
test eax eax +
jnz loc_1008747  +
xor eax eax +
jmp loc_10087B7  +
push edi  +
push esi  +
call sub_1007A59  +
test eax eax +
jz loc_1008743  +
mov eax [esi+48h] +
cmp [eax+6] di +
jnz loc_1008783  +
push esi  +
call sub_1008593  +
test eax eax +
jz loc_1008743  +
mov eax [esi+48h] +
movzx eax word ptr [eax+4] +
push eax  +
push esi  +
call sub_1007A59  +
test eax eax +
jz loc_1008743  +
mov eax 0FFFFh +
add [esi+0B0h] ax +
mov eax [esi+48h] +
movzx eax word ptr [eax+6] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
call sub_1007F8B  +
test eax eax +
jz loc_1008743  +
mov eax [esi+48h] +
mov cx word ptr [ebp+arg_0] +
cmp cx [eax+6] +
jz loc_10087B4  +
push edi  +
push 7  +
push dword ptr [esi]  +
call sub_1008BA0  +
jmp loc_1008743  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
cmp dword ptr [edi+9Ch] 0 +
jz loc_10087D9  +
xor eax eax +
inc eax  +
jmp loc_100881E  +
push esi  +
mov esi [ebp+arg_4] +
mov eax 0FFFEh +
mov ecx esi +
and ecx eax +
cmp ecx eax +
jnz loc_10087EF  +
movzx esi word ptr [edi+6Ah] +
dec esi  +
cmp [edi+90h] esi +
jz loc_100881A  +
push edi  +
call sub_1007F21  +
test eax eax +
jz loc_1008823  +
push esi  +
push edi  +
call sub_100848A  +
test eax eax +
jz loc_1008823  +
push edi  +
call sub_10086FB  +
test eax eax +
jz loc_1008823  +
and dword ptr [edi+30h] 0 +
xor eax eax +
inc eax  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_100881D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+74h] +
push edi  +
test eax eax +
jz loc_10088E8  +
mov ebx [esi+78h] +
mov [ebp+arg_0] eax +
cmp ebx [esi+30h] +
jnb loc_1008857  +
mov dword ptr [esi+90h] 0FFFFh +
movzx eax word ptr [esi+7Ch] +
push eax  +
push esi  +
call sub_10087C2  +
jmp loc_100886A  +
push esi  +
call sub_10086FB  +
test eax eax +
jz loc_10088CD  +
mov eax [esi+48h] +
movzx eax word ptr [eax+6] +
add eax [esi+30h] +
cmp ebx eax +
jnb loc_1008864  +
cmp [ebp+arg_0] 0 +
jz loc_10088E8  +
mov ecx [esi+48h] +
movzx edi word ptr [ecx+6] +
mov eax ebx +
sub eax [esi+30h] +
sub edi eax +
cmp edi [ebp+arg_0] +
jbe loc_1008898  +
mov edi [ebp+arg_0] +
mov ecx [esi+40h] +
push edi  +
add ecx eax +
push ecx  +
push dword ptr [esi+8Ch]  +
call dword ptr [esi+14h]  +
add esp 0Ch +
cmp edi eax +
jnz loc_10088C2  +
add ebx edi +
sub [ebp+arg_0] edi +
jz loc_10088E8  +
push esi  +
call sub_10086FB  +
test eax eax +
jnz loc_1008882  +
jmp loc_10088CD  +
push 0  +
push 8  +
push dword ptr [esi]  +
call sub_1008BA0  +
lea edi [esi+8Ch] +
mov eax [edi] +
cmp eax 0FFFFFFFFh +
jz loc_1008966  +
push eax  +
call dword ptr [esi+18h]  +
or dword ptr [edi] 0FFFFFFFFh +
pop ecx  +
jmp loc_1008966  +
lea eax [esi+7BCh] +
lea ecx [esi+0B4h] +
mov [eax+4] ecx +
mov ecx [esi+8Ch] +
mov [eax+14h] ecx +
mov cx [esi+7Eh] +
mov [eax+18h] cx +
mov cx [esi+80h] +
mov [eax+1Ah] cx +
mov cx [esi+82h] +
mov [eax+1Ch] cx +
mov ecx [esi+38h] +
mov [eax+10h] ecx +
mov cx [esi+7Ch] +
and dword ptr [eax] 0 +
mov [eax+22h] cx +
movzx ecx word ptr [eax+1Ch] +
xor edi edi +
inc edi  +
test cl 40h +
jz loc_1008947  +
and ecx 0FFBFh +
mov [eax] edi +
mov [eax+1Ch] cx +
push eax  +
push 3  +
call dword ptr [esi+24h]  +
or dword ptr [esi+8Ch] 0FFFFFFFFh +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_100896A  +
push 0  +
push 0Bh  +
push dword ptr [esi]  +
call sub_1008BA0  +
xor eax eax +
jmp loc_1008975  +
test eax eax +
jnz loc_1008973  +
push eax  +
push 8  +
jmp loc_100895F  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1008B96  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1008B96  +
mov ecx [ebp+arg_18] +
push ebx  +
mov [esi+24h] eax +
mov eax [ebp+arg_14] +
push edi  +
push [ebp+arg_8]  +
mov [esi+28h] eax +
xor eax eax +
mov [esi+0AEh] ax +
mov ebx 101h +
lea eax [esi+5B9h] +
push ebx  +
push eax  +
lea edi [esi+7BCh] +
mov [esi+38h] ecx +
call sub_1001EB0  +
push 0FFFFh  +
push 0  +
push [ebp+arg_4]  +
push esi  +
call sub_1008090  +
test eax eax +
jz loc_1008B64  +
push [ebp+arg_8]  +
and dword ptr [esi+9Ch] 0 +
and dword ptr [esi+30h] 0 +
push ebx  +
lea eax [esi+5B9h] +
push eax  +
mov dword ptr [esi+90h] 0FFFFh +
call sub_1001EB0  +
push esi  +
call sub_1007C27  +
test eax eax +
jz loc_1008B64  +
xor ebx ebx +
jmp loc_1008B44  +
mov eax 0FFFFh +
add [esi+0ACh] ax +
push esi  +
call sub_1008379  +
test eax eax +
jz loc_1008B64  +
lea eax [esi+0B4h] +
mov [edi+4] eax +
mov eax [esi+74h] +
mov [edi] eax +
lea eax [esi+1B5h] +
mov [edi+8] eax +
lea eax [esi+2B6h] +
mov [edi+0Ch] eax +
mov ax [esi+7Eh] +
mov [edi+18h] ax +
mov ax [esi+80h] +
mov [edi+1Ah] ax +
mov ax [esi+82h] +
mov [edi+1Ch] ax +
mov eax [esi+38h] +
mov [edi+10h] eax +
mov ax [esi+7Ch] +
mov [edi+22h] ax +
mov cx [esi+7Ch] +
mov eax 0FFFDh +
mov edx eax +
and cx dx +
cmp cx ax +
jnz loc_1008AE9  +
push edi  +
cmp [esi+9Ch] ebx +
jz loc_1008AD1  +
push 2  +
call [ebp+arg_10]  +
pop ecx  +
mov [esi+8Ch] eax +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1008ADD  +
cmp eax ebx +
jz loc_1008B08  +
push esi  +
call sub_100882C  +
test eax eax +
jz loc_1008B64  +
jmp loc_1008B2D  +
push 1  +
call [ebp+arg_10]  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1008B2D  +
push ebx  +
push 0Bh  +
push dword ptr [esi]  +
call sub_1008BA0  +
jmp loc_1008B64  +
cmp [esi+9Ch] ebx +
jnz loc_1008B24  +
movzx eax word ptr [edi+22h] +
cmp ax [esi+6Ah] +
jb loc_1008B05  +
mov ecx 0FFFCh +
cmp ax cx +
jb loc_1008B2D  +
push edi  +
jmp loc_1008AAB  +
mov cx [esi+7Ch] +
mov eax 0FFFEh +
mov edx eax +
and cx dx +
cmp cx ax +
jnz loc_1008B2D  +
inc word ptr [esi+0AEh]  +
jmp loc_1008B2D  +
xor eax eax +
mov [esi+0ACh] ax +
cmp [esi+0ACh] bx +
jnz loc_1008A29  +
push esi  +
call sub_1007C27  +
test eax eax +
jz loc_1008B64  +
cmp [esi+0ACh] bx +
jnz loc_1008A29  +
mov eax 0FFFFh +
add [esi+0ACh] ax +
mov [ebp+var_4] 1 +
mov eax [esi+88h] +
or ebx 0FFFFFFFFh +
cmp eax ebx +
jz loc_1008B76  +
push eax  +
call dword ptr [esi+18h]  +
pop ecx  +
lea edi [esi+84h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1008B87  +
push eax  +
call dword ptr [esi+18h]  +
pop ecx  +
mov eax [ebp+var_4] +
mov [edi] ebx +
pop edi  +
mov [esi+88h] ebx +
pop ebx  +
jmp loc_1008B98  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
mov ecx [ebp+arg_8] +
mov [eax+4] ecx +
mov dword ptr [eax+8] 1 +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov eax esi +
shr eax 2 +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jle loc_1008C04  +
push ebx  +
movzx edx byte ptr [ecx] +
dec eax  +
inc ecx  +
movzx ebx byte ptr [ecx] +
shl ebx 8 +
or edx ebx +
inc ecx  +
movzx ebx byte ptr [ecx] +
shl ebx 10h +
or edx ebx +
inc ecx  +
movzx ebx byte ptr [ecx] +
shl ebx 18h +
or edx ebx +
inc ecx  +
xor edi edx +
test eax eax +
jg loc_1008BDD  +
pop ebx  +
and esi 3 +
xor eax eax +
dec esi  +
jz loc_1008C22  +
dec esi  +
jz loc_1008C19  +
dec esi  +
jnz loc_1008C27  +
movzx eax byte ptr [ecx] +
shl eax 10h +
inc ecx  +
movzx edx byte ptr [ecx] +
shl edx 8 +
or eax edx +
inc ecx  +
movzx ecx byte ptr [ecx] +
or eax ecx +
xor eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jz loc_1008D25  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1008D25  +
mov ecx [ebp+arg_10] +
test ecx ecx +
jz loc_1008D25  +
mov eax [eax] +
add eax 1804h +
cmp eax 1804h +
jnb loc_1008C73  +
push 3  +
jmp loc_1008D27  +
mov [ecx] eax +
mov eax [ebp+arg_14] +
test eax eax +
jnz loc_1008C83  +
xor eax eax +
jmp loc_1008D28  +
mov ebx [ebp+arg_8] +
and dword ptr [eax] 0 +
push 2Ch  +
call ebx  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_1008C9A  +
inc eax  +
jmp loc_1008D28  +
push 2EFCh  +
call ebx  +
pop ecx  +
mov [ebp+var_4] eax +
mov [esi+28h] eax +
test eax eax +
jnz loc_1008CB8  +
xor edi edi +
inc edi  +
push esi  +
call [ebp+arg_C]  +
pop ecx  +
mov eax edi +
jmp loc_1008D28  +
push [ebp+arg_28]  +
mov eax [ebp+arg_C] +
push [ebp+arg_24]  +
mov edx [ebp+arg_1C] +
push [ebp+arg_20]  +
mov ecx [ebp+arg_18] +
mov [esi+8] eax +
mov eax [ebp+arg_20] +
mov [esi+14h] eax +
mov eax [ebp+arg_24] +
mov [esi+18h] eax +
mov eax [ebp+arg_28] +
push edx  +
mov [esi+1Ch] eax +
mov eax [ebp+arg_0] +
push ecx  +
push [ebp+arg_C]  +
mov [esi+4] ebx +
mov [esi+0Ch] ecx +
mov [esi+10h] edx +
mov eax [eax] +
mov [esi+20h] eax +
mov eax [edi+4] +
push ebx  +
mov [esi+24h] eax +
mov dword ptr [esi] 4349444Ch +
push dword ptr [edi]  +
push [ebp+var_4]  +
call sub_1008EA1  +
mov edi eax +
test edi edi +
jz loc_1008D1B  +
push dword ptr [esi+28h]  +
call [ebp+arg_C]  +
pop ecx  +
jmp loc_1008CAF  +
mov eax [ebp+arg_14] +
mov [eax] esi +
jmp loc_1008C7C  +
push 2  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
cmp dword ptr [eax] 4349444Ch +
jz loc_1008D4C  +
push 2  +
pop eax  +
leave   +
retn   +
mov edx [eax+20h] +
push esi  +
mov esi [ebp+arg_10] +
mov ecx [esi] +
cmp ecx edx +
jbe loc_1008D5D  +
push 3  +
jmp loc_1008D6A  +
add edx 1800h +
cmp [ebp+arg_8] edx +
jbe loc_1008D6D  +
push 4  +
pop eax  +
jmp loc_1008D90  +
lea edx [ebp+var_4] +
push edx  +
push ecx  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
push dword ptr [eax+28h]  +
call sub_1008E31  +
mov ecx [ebp+var_4] +
neg eax  +
sbb eax eax +
mov [esi] ecx +
and eax 4 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 4349444Ch +
jz loc_1008DAD  +
push 2  +
pop eax  +
pop ebp  +
retn   +
push dword ptr [eax+28h]  +
call sub_1008E05  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 4349444Ch +
jz loc_1008DD4  +
push 2  +
pop eax  +
jmp loc_1008DED  +
push dword ptr [esi+28h]  +
call sub_1008DF5  +
push dword ptr [esi+28h]  +
and dword ptr [esi] 0 +
call dword ptr [esi+8]  +
push esi  +
call dword ptr [esi+8]  +
pop ecx  +
pop ecx  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1008F8A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_1008FAE  +
push esi  +
call sub_1009037  +
push esi  +
call sub_1009086  +
and dword ptr [esi+2ECCh] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi+2B04h] eax +
lea eax [eax+ecx+4] +
mov [esi+2B08h] eax +
mov eax [ebp+arg_10] +
push esi  +
mov [esi+2B0Ch] eax +
call sub_100942A  +
push [ebp+arg_4]  +
push esi  +
call sub_100917F  +
lea ecx [esi+2ECCh] +
mov edx [ecx] +
cmp edx 8000h +
jnb loc_1008E7B  +
inc edx  +
mov [ecx] edx +
test eax eax +
jge loc_1008E8A  +
mov eax [ebp+arg_18] +
and dword ptr [eax] 0 +
xor eax eax +
inc eax  +
jmp loc_1008E97  +
mov ecx [ebp+arg_18] +
mov [ecx] eax +
add [esi+2B10h] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi+2EE0h] eax +
mov eax [ebp+arg_C] +
mov [esi+2EE4h] eax +
mov eax [ebp+arg_10] +
mov [esi+2EE8h] eax +
mov eax [ebp+arg_14] +
mov [esi+2EECh] eax +
mov eax [ebp+arg_18] +
mov [esi+2EF0h] eax +
mov eax [ebp+arg_1C] +
mov [esi+2EF4h] eax +
mov eax [ebp+arg_20] +
mov [esi+2EF8h] eax +
mov eax [ebp+arg_4] +
lea ecx [eax-1] +
mov [esi+4] eax +
mov [esi+8] ecx +
test ecx eax +
jnz loc_1008F1E  +
cmp eax 8000h +
jb loc_1008F1E  +
cmp eax 200000h +
ja loc_1008F1E  +
push esi  +
call sub_1008F2B  +
test eax eax +
jnz loc_1008F14  +
inc eax  +
jmp loc_1008F21  +
push esi  +
call sub_1008E05  +
xor eax eax +
jmp loc_1008F21  +
push 5  +
pop eax  +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov edx [esi+4] +
push edi  +
push 4  +
mov byte ptr [esi+2EB5h] 4 +
pop edi  +
mov al [esi+2EB5h] +
movzx ecx al +
mov cl ds:byte_10015E8[ecx] +
xor ebx ebx +
inc ebx  +
shl ebx cl +
add edi ebx +
inc al  +
mov [esi+2EB5h] al +
cmp edi edx +
jb loc_1008F43  +
add edx 105h +
push edx  +
call dword ptr [esi+2EE0h]  +
pop ecx  +
xor ecx ecx +
test eax eax +
setnz cl  +
pop edi  +
mov [esi] eax +
pop esi  +
pop ebx  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
test eax eax +
jz loc_1008FA4  +
push eax  +
call dword ptr [esi+2EE4h]  +
and dword ptr [esi] 0 +
pop ecx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movzx eax byte ptr [esi+2EB5h] +
push edi  +
lea eax ds:100h[eax*8] +
mov edi 2A0h +
cmp eax edi +
jl loc_1008FD1  +
mov eax edi +
push eax  +
lea eax [esi+0A18h] +
push 0  +
push eax  +
call memset  +
movzx eax byte ptr [esi+2EB5h] +
lea eax ds:100h[eax*8] +
add esp 0Ch +
cmp eax edi +
jl loc_1008FF7  +
mov eax edi +
push eax  +
lea eax [esi+2B14h] +
push 0  +
push eax  +
call memset  +
mov edi 0F9h +
push edi  +
lea eax [esi+0CB8h] +
push 0  +
push eax  +
call memset  +
push edi  +
push 0  +
add esi 2DB4h +
push esi  +
call memset  +
add esp 24h +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
inc ecx  +
xor edx edx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+2EC0h] edx +
mov [eax+2B10h] edx +
mov [eax+2EDCh] ecx +
mov [eax+2ED4h] edx +
mov [eax+2ED8h] edx +
mov [eax+2EB8h] ecx +
mov [eax+2EC4h] edx +
mov [eax+2EBCh] edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+2EC8h] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_8] +
cmp ebx 6 +
jg loc_10090CA  +
add [ecx+2EC8h] ebx +
jmp loc_100916B  +
mov eax [ecx+2EC8h] +
add eax ebx +
cmp eax 0Ah +
jnb loc_10090E2  +
mov [ecx+2EC8h] eax +
jmp loc_100916B  +
push esi  +
push edi  +
lea eax [edx+ebx] +
lea esi [eax-6] +
lea edi [ebp+var_C] +
movs   +
mov [ebp+var_10] eax +
movs   +
mov edi [ebp+var_10] +
add edi 0FFFFFFFAh +
mov eax 0E8E8E8E8h +
stos   +
stos   +
mov eax [ecx+2EC8h] +
lea ebx [eax+ebx-0Ah] +
mov [ebp+var_14] ebx +
jmp loc_1009117  +
inc edx  +
inc dword ptr [ecx+2EC8h]  +
cmp byte ptr [edx] 0E8h +
jnz loc_1009110  +
mov edi [ecx+2EC8h] +
inc edx  +
cmp edi ebx +
jnb loc_1009154  +
mov eax [edx] +
mov esi [ecx+2EC4h] +
cmp eax esi +
jnb loc_1009139  +
sub eax edi +
mov [edx] eax +
jmp loc_1009145  +
mov ebx eax +
neg ebx  +
cmp ebx edi +
ja loc_1009145  +
add esi eax +
mov [edx] esi +
mov ebx [ebp+var_14] +
add edx 4 +
add dword ptr [ecx+2EC8h] 5 +
jmp loc_1009117  +
mov edi [ebp+var_10] +
add ebx 0Ah +
add edi 0FFFFFFFAh +
mov [ecx+2EC8h] ebx +
lea esi [ebp+var_C] +
movs   +
movs   +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1006B07  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
jmp loc_100938B  +
cmp dword ptr [ebx+2EDCh] 1 +
jnz loc_1009355  +
lea eax [ebx+2EB8h] +
cmp [eax] edi +
jz loc_10091DF  +
push 1  +
push ebx  +
mov [eax] edi +
call sub_10094F2  +
test eax eax +
jz loc_10091D9  +
push 10h  +
push ebx  +
call sub_10094F2  +
push 10h  +
push ebx  +
mov esi eax +
call sub_10094F2  +
shl esi 10h +
or eax esi +
mov [ebx+2EC4h] eax +
jmp loc_10091DF  +
mov [ebx+2EC4h] edi +
cmp dword ptr [ebx+2ED8h] 3 +
jnz loc_1009216  +
test byte ptr [ebx+2ED0h] 1 +
jz loc_100920A  +
lea eax [ebx+2B04h] +
inc dword ptr [eax]  +
mov eax [eax] +
add eax 4 +
cmp eax [ebx+2B08h] +
jnb loc_1009394  +
push ebx  +
mov [ebx+2ED8h] edi +
call sub_10093CA  +
push 3  +
push ebx  +
call sub_10094F2  +
push 8  +
push ebx  +
mov [ebx+2ED8h] eax +
call sub_10094F2  +
push 8  +
push ebx  +
mov esi eax +
call sub_10094F2  +
push 8  +
push ebx  +
mov edi eax +
call sub_10094F2  +
shl esi 8 +
add esi edi +
shl esi 8 +
add eax esi +
cmp dword ptr [ebx+2ED8h] 2 +
mov [ebx+2ED0h] eax +
mov [ebx+2ED4h] eax +
jnz loc_1009265  +
push ebx  +
call sub_100A8DF  +
mov eax [ebx+2ED8h] +
cmp eax 1 +
jz loc_100928C  +
cmp eax 2 +
jz loc_100928C  +
cmp eax 3 +
jnz loc_1009284  +
push ebx  +
call sub_10095AF  +
test eax eax +
jnz loc_10092D4  +
or eax 0FFFFFFFFh +
jmp loc_10093BE  +
movzx ecx byte ptr [ebx+2EB5h] +
lea ecx ds:100h[ecx*8] +
mov eax 2A0h +
cmp ecx eax +
jge loc_10092A5  +
mov eax ecx +
push eax  +
lea eax [ebx+0A18h] +
push eax  +
lea eax [ebx+2B14h] +
push eax  +
call memcpy  +
add esp 0Ch +
push 3Eh  +
pop ecx  +
lea esi [ebx+0CB8h] +
lea edi [ebx+2DB4h] +
movs   +
push ebx  +
movs   +
call sub_100A816  +
mov dword ptr [ebx+2EDCh] 2 +
xor edi edi +
jmp loc_1009355  +
cmp [ebp+arg_4] edi +
jle loc_100935D  +
mov esi [ebx+2ED4h] +
cmp esi [ebp+arg_4] +
jl loc_10092F5  +
mov esi [ebp+arg_4] +
cmp esi edi +
jz loc_1009284  +
mov eax [ebx+2EC0h] +
mov edx [ebx+2ED8h] +
lea ecx [eax+esi] +
cmp ecx eax +
jl loc_100933E  +
cmp ecx [ebx+4] +
jg loc_100933E  +
cmp edx 2 +
jnz loc_1009320  +
push esi  +
push eax  +
push ebx  +
call sub_100A478  +
jmp loc_1009341  +
cmp edx 1 +
jnz loc_100932F  +
push esi  +
push eax  +
push ebx  +
call sub_1009C70  +
jmp loc_1009341  +
cmp edx 3 +
jnz loc_100933E  +
push esi  +
push eax  +
push ebx  +
call sub_100951E  +
jmp loc_1009341  +
or eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_1009284  +
sub [ebx+2ED4h] esi +
sub [ebp+arg_4] esi +
add [ebp+var_4] esi +
cmp [ebx+2ED4h] edi +
jg loc_10092E2  +
cmp [ebx+2ED4h] edi +
jnz loc_100936F  +
mov dword ptr [ebx+2EDCh] 1 +
mov eax [ebx+2B04h] +
add eax 4 +
cmp eax [ebx+2B08h] +
jnb loc_1009394  +
cmp [ebp+arg_4] edi +
jnz loc_100938E  +
push ebx  +
call sub_10093CA  +
cmp [ebp+arg_4] edi +
jg loc_1009195  +
mov eax [ebx+2EC0h] +
cmp eax edi +
jnz loc_10093A1  +
mov eax [ebx+4] +
sub eax [ebp+var_4] +
mov ecx 9800h +
add eax [ebx] +
cmp [ebp+var_4] ecx +
jge loc_10093B3  +
mov ecx [ebp+var_4] +
push eax  +
push ecx  +
push ebx  +
call sub_100A4DD  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+2ED8h] 3 +
jz loc_1009421  +
mov eax [ecx+2B04h] +
lea edx [eax+4] +
cmp edx [ecx+2B08h] +
ja loc_1009421  +
push esi  +
movzx esi byte ptr [eax+1] +
push edi  +
movzx edi byte ptr [eax] +
shl esi 8 +
or esi edi +
movzx edi byte ptr [eax+3] +
movzx eax byte ptr [eax+2] +
shl esi 8 +
or esi edi +
shl esi 8 +
or esi eax +
pop edi  +
mov [ecx+2EB0h] esi +
mov byte ptr [ecx+2EB4h] 10h +
mov [ecx+2B04h] edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_10093CA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
sub [eax+2EB4h] cl +
shl dword ptr [eax+2EB0h] cl +
push ebx  +
mov bl [eax+2EB4h] +
push esi  +
mov esi [eax+2EB0h] +
test bl bl +
jg loc_10094E7  +
mov edx [eax+2B04h] +
cmp edx [eax+2B08h] +
jb loc_1009481  +
mov dword ptr [eax+2EBCh] 1 +
jmp loc_10094E7  +
movzx ecx byte ptr [edx] +
push edi  +
movzx edi byte ptr [edx+1] +
shl edi 8 +
or edi ecx +
movsx ecx bl +
neg ecx  +
shl edi cl +
add bl 10h +
add edx 2 +
mov [eax+2B04h] edx +
or edi esi +
mov [eax+2EB0h] edi +
mov [eax+2EB4h] bl +
pop edi  +
test bl bl +
jg loc_10094E7  +
cmp edx [eax+2B08h] +
jnb loc_1009475  +
movzx esi byte ptr [edx+1] +
movzx ecx byte ptr [edx] +
shl esi 8 +
or esi ecx +
movsx ecx bl +
neg ecx  +
shl esi cl +
add edx 2 +
mov [eax+2B04h] edx +
or [eax+2EB0h] esi +
add bl 10h +
mov [eax+2EB4h] bl +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax+2EB0h] +
push 20h  +
pop ecx  +
push [ebp+arg_4]  +
sub ecx [ebp+arg_4] +
push eax  +
shr esi cl +
call sub_100943A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
mov edx [ecx+2B04h] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
lea edi [esi+eax] +
cmp esi edi +
mov ebx esi +
mov [ebp+arg_4] ebx +
jge loc_1009565  +
cmp edx [ecx+2B08h] +
jnb loc_100957C  +
mov eax [ecx+4] +
add eax 105h +
cmp esi eax +
jge loc_100957C  +
mov bl [edx] +
mov eax [ecx] +
mov [esi+eax] bl +
inc esi  +
inc edx  +
cmp esi edi +
jl loc_1009541  +
mov ebx [ebp+arg_4] +
mov eax 101h +
cmp edi eax +
mov [ecx+2B04h] edx +
mov [ebp+arg_4] eax +
jg loc_100958F  +
mov [ebp+arg_4] edi +
jmp loc_100958F  +
or eax 0FFFFFFFFh +
jmp loc_10095A3  +
mov eax [ecx] +
mov edx [ecx+4] +
add edx eax +
mov al [eax+ebx] +
mov [edx+ebx] al +
inc ebx  +
cmp ebx [ebp+arg_4] +
jb loc_1009581  +
mov eax [ecx+8] +
and eax esi +
mov [ecx+2EC0h] eax +
mov eax esi +
sub eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add dword ptr [eax+2B04h] 0FFFFFFFEh +
mov ecx [eax+2B04h] +
add ecx 4 +
cmp ecx [eax+2B08h] +
jb loc_10095D3  +
xor eax eax +
jmp loc_1009615  +
push ebx  +
push esi  +
push edi  +
push 3  +
lea edx [eax+0Ch] +
pop esi  +
mov ecx [eax+2B04h] +
movzx edi byte ptr [ecx+3] +
movzx ebx byte ptr [ecx+2] +
shl edi 8 +
or edi ebx +
movzx ebx byte ptr [ecx+1] +
movzx ecx byte ptr [ecx] +
shl edi 8 +
or edi ebx +
shl edi 8 +
or edi ecx +
mov [edx] edi +
add dword ptr [eax+2B04h] 4 +
add edx 4 +
dec esi  +
jnz loc_10095DC  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov al [edx+2EB4h] +
mov ecx [edx+2B08h] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_1] al +
mov eax [edx+2EB0h] +
mov [ebp+var_10] ecx +
mov ecx [ebp+arg_4] +
add ecx esi +
cmp esi ecx +
mov [ebp+var_8] eax +
mov eax [edx+2B04h] +
push edi  +
mov [ebp+var_C] eax +
mov [ebp+var_14] ecx +
jge loc_100991F  +
mov ecx [ebp+var_8] +
xor esi esi +
shr ecx 16h +
inc esi  +
cmp ecx 400h +
jnb loc_1009678  +
movsx ebx word ptr [edx+ecx*2+18h] +
jmp loc_1009680  +
mov [edx+2EBCh] esi +
xor ebx ebx +
test ebx ebx +
jge loc_10096CB  +
mov ecx 200000h +
mov edi [ebp+var_8] +
neg ebx  +
test ecx edi +
jz loc_10096A8  +
lea edi [ebx+ebx+1] +
cmp edi 0A80h +
jnb loc_10096BD  +
movsx ebx word ptr [edx+ebx*4+0E3Eh] +
jmp loc_10096C5  +
lea edi [ebx+ebx] +
cmp edi 0A80h +
jnb loc_10096BD  +
movsx ebx word ptr [edx+ebx*4+0E3Ch] +
jmp loc_10096C5  +
mov [edx+2EBCh] esi +
xor ebx ebx +
shr ecx 1 +
test ebx ebx +
jl loc_1009689  +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100971A  +
cmp eax [ebp+var_10] +
jnb loc_1009940  +
mov cl [ebx+edx+0A18h] +
shl [ebp+var_8] cl +
mov cl [ebp+var_1] +
sub cl [ebx+edx+0A18h] +
mov eax [ebp+var_C] +
mov [ebp+var_1] cl +
test cl cl +
jg loc_100971A  +
movzx esi byte ptr [eax+1] +
movzx edi byte ptr [eax] +
shl esi 8 +
movsx ecx cl +
or esi edi +
neg ecx  +
shl esi cl +
or [ebp+var_8] esi +
inc eax  +
inc eax  +
add [ebp+var_1] 10h +
mov [ebp+var_C] eax +
mov esi 100h +
sub ebx esi +
jns loc_1009739  +
mov esi [edx] +
mov ecx [ebp+arg_0] +
mov [ecx+esi] bl +
mov esi [edx+4] +
add esi [edx] +
mov [esi+ecx] bl +
inc ecx  +
jmp loc_1009911  +
mov edi ebx +
and edi 7 +
cmp edi 7 +
jnz loc_100980F  +
mov ecx [ebp+var_8] +
shr ecx 18h +
cmp ecx esi +
jnb loc_100975B  +
movsx edi word ptr [edx+ecx*2+818h] +
jmp loc_1009767  +
mov dword ptr [edx+2EBCh] 1 +
xor edi edi +
test edi edi +
jge loc_10097B4  +
mov ecx 800000h +
neg edi  +
test [ebp+var_8] ecx +
jz loc_100978D  +
lea esi [edi+edi+1] +
cmp esi 3E4h +
jnb loc_10097A2  +
movsx edi word ptr [edx+edi*4+233Eh] +
jmp loc_10097AE  +
lea esi [edi+edi] +
cmp esi 3E4h +
jnb loc_10097A2  +
movsx edi word ptr [edx+edi*4+233Ch] +
jmp loc_10097AE  +
mov dword ptr [edx+2EBCh] 1 +
xor edi edi +
shr ecx 1 +
test edi edi +
jl loc_1009770  +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_10097FF  +
cmp eax [ebp+var_10] +
jnb loc_1009940  +
mov al [ebp+var_1] +
mov cl [edi+edx+0CB8h] +
shl [ebp+var_8] cl +
sub al cl +
mov [ebp+var_1] al +
test al al +
mov eax [ebp+var_C] +
jg loc_10097FF  +
movzx esi byte ptr [eax+1] +
movzx ecx byte ptr [eax] +
shl esi 8 +
or esi ecx +
movsx ecx [ebp+var_1] +
neg ecx  +
shl esi cl +
or [ebp+var_8] esi +
inc eax  +
inc eax  +
add [ebp+var_1] 10h +
mov [ebp+var_C] eax +
add edi 7 +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_1009940  +
sar ebx 3 +
cmp bl 2 +
jle loc_10098BE  +
cmp bl 3 +
jle loc_10098AD  +
cmp bl 33h +
jnb loc_1009940  +
mov esi [ebp+var_8] +
movsx ecx bl +
movzx ebx ds:byte_10015E8[ecx] +
mov [ebp+arg_4] ecx +
push 20h  +
pop ecx  +
sub ecx ebx +
shr esi cl +
mov ecx ebx +
shl [ebp+var_8] cl +
mov ecx [ebp+arg_4] +
mov cl ds:byte_10015E8[ecx] +
sub [ebp+var_1] cl +
cmp [ebp+var_1] 0 +
jg loc_10098A1  +
movzx ebx byte ptr [eax+1] +
movzx ecx byte ptr [eax] +
shl ebx 8 +
or ebx ecx +
movsx ecx [ebp+var_1] +
add [ebp+var_1] 10h +
neg ecx  +
shl ebx cl +
or [ebp+var_8] ebx +
inc eax  +
inc eax  +
cmp [ebp+var_1] 0 +
mov [ebp+var_C] eax +
jg loc_10098A1  +
movzx ebx byte ptr [eax+1] +
movzx ecx byte ptr [eax] +
shl ebx 8 +
or ebx ecx +
movsx ecx [ebp+var_1] +
neg ecx  +
shl ebx cl +
or [ebp+var_8] ebx +
inc eax  +
inc eax  +
add [ebp+var_1] 10h +
mov [ebp+var_C] eax +
mov ecx [ebp+arg_4] +
add esi ds:dword_1001620[ecx*4] +
jmp loc_10098B0  +
xor esi esi +
inc esi  +
mov ecx [edx+10h] +
mov [edx+14h] ecx +
mov ecx [edx+0Ch] +
mov [edx+10h] ecx +
jmp loc_10098D0  +
movsx ecx bl +
lea ecx [edx+ecx*4+0Ch] +
mov esi [ecx] +
test bl bl +
jz loc_10098D3  +
mov ebx [edx+0Ch] +
mov [ecx] ebx +
mov [edx+0Ch] esi +
mov ecx [ebp+arg_0] +
inc edi  +
mov ebx ecx +
inc edi  +
sub ebx esi +
mov [ebp+arg_0] ebx +
mov ebx [ebp+arg_0] +
and ebx [edx+8] +
cmp ecx 101h +
mov esi [edx] +
mov bl [ebx+esi] +
mov [esi+ecx] bl +
jge loc_1009908  +
mov esi [edx] +
mov ebx [edx+4] +
mov [ebp+arg_4] eax +
mov al [esi+ecx] +
add ebx esi +
mov [ebx+ecx] al +
mov eax [ebp+arg_4] +
inc ecx  +
inc [ebp+arg_0]  +
dec edi  +
test edi edi +
jg loc_10098DF  +
mov esi ecx +
cmp esi [ebp+var_14] +
mov [ebp+arg_0] ecx +
jl loc_1009660  +
mov cl [ebp+var_1] +
mov [edx+2EB4h] cl +
mov ecx [ebp+var_8] +
mov [edx+2B04h] eax +
mov [edx+2EB0h] ecx +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
or eax 0FFFFFFFFh +
jmp loc_1009939  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov edx [ebp+arg_0] +
mov al [edx+2EB4h] +
mov ecx [edx+2EB0h] +
push ebx  +
mov ebx [edx+2B04h] +
mov byte ptr [ebp+arg_0+3] al +
mov eax [edx+2B08h] +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
add esi eax +
cmp eax esi +
push edi  +
mov [ebp+var_4] ecx +
mov [ebp+var_C] ebx +
mov [ebp+var_14] esi +
jge loc_1009C39  +
xor esi esi +
inc esi  +
jmp loc_1009997  +
mov ecx [ebp+var_4] +
mov eax ecx +
shr eax 16h +
cmp eax 400h +
jnb loc_10099AA  +
movsx edi word ptr [edx+eax*2+18h] +
jmp loc_10099B2  +
mov [edx+2EBCh] esi +
xor edi edi +
mov [ebp+var_8] edi +
test edi edi +
jge loc_1009A02  +
mov [ebp+arg_8] 200000h +
neg edi  +
test [ebp+arg_8] ecx +
jz loc_10099DC  +
lea eax [edi+edi+1] +
cmp eax 0A80h +
jnb loc_10099F0  +
movsx edi word ptr [edx+edi*4+0E3Eh] +
jmp loc_10099F8  +
lea eax [edi+edi] +
cmp eax 0A80h +
jnb loc_10099F0  +
movsx edi word ptr [edx+edi*4+0E3Ch] +
jmp loc_10099F8  +
mov [edx+2EBCh] esi +
xor edi edi +
shr [ebp+arg_8] 1 +
test edi edi +
jl loc_10099C0  +
mov [ebp+var_8] edi +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_1009C66  +
cmp ebx [ebp+var_10] +
jnb loc_1009C66  +
mov cl [edi+edx+0A18h] +
mov al byte ptr [ebp+arg_0+3] +
shl [ebp+var_4] cl +
sub al cl +
mov byte ptr [ebp+arg_8+3] cl +
mov byte ptr [ebp+arg_0+3] al +
test al al +
jg loc_1009A51  +
movzx edi byte ptr [ebx+1] +
movzx ecx byte ptr [ebx] +
shl edi 8 +
or edi ecx +
movsx ecx al +
neg ecx  +
shl edi cl +
or [ebp+var_4] edi +
inc ebx  +
inc ebx  +
add al 10h +
mov [ebp+var_C] ebx +
mov byte ptr [ebp+arg_0+3] al +
sub [ebp+var_8] 100h +
jns loc_1009A71  +
mov ecx [edx] +
mov eax [ebp+arg_4] +
mov [ebp+arg_8] edx +
mov dl byte ptr [ebp+var_8] +
mov [eax+ecx] dl +
mov edx [ebp+arg_8] +
inc eax  +
jmp loc_1009C2D  +
mov edi [ebp+var_8] +
and edi 7 +
cmp edi 7 +
jnz loc_1009B42  +
mov ecx [ebp+var_4] +
shr ecx 18h +
cmp ecx 100h +
jnb loc_1009A98  +
movsx edi word ptr [edx+ecx*2+818h] +
jmp loc_1009AA0  +
mov [edx+2EBCh] esi +
xor edi edi +
test edi edi +
jge loc_1009AED  +
mov ecx 800000h +
neg edi  +
test [ebp+var_4] ecx +
jz loc_1009AC6  +
lea esi [edi+edi+1] +
cmp esi 3E4h +
jnb loc_1009ADB  +
movsx edi word ptr [edx+edi*4+233Eh] +
jmp loc_1009AE7  +
lea esi [edi+edi] +
cmp esi 3E4h +
jnb loc_1009ADB  +
movsx edi word ptr [edx+edi*4+233Ch] +
jmp loc_1009AE7  +
mov dword ptr [edx+2EBCh] 1 +
xor edi edi +
shr ecx 1 +
test edi edi +
jl loc_1009AA9  +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_1009B32  +
cmp ebx [ebp+var_10] +
jnb loc_1009C66  +
mov cl [edi+edx+0CB8h] +
shl [ebp+var_4] cl +
sub al cl +
mov byte ptr [ebp+arg_0+3] al +
test al al +
jg loc_1009B32  +
movzx esi byte ptr [ebx+1] +
movzx ecx byte ptr [ebx] +
shl esi 8 +
or esi ecx +
movsx ecx al +
neg ecx  +
shl esi cl +
or [ebp+var_4] esi +
inc ebx  +
inc ebx  +
add al 10h +
mov [ebp+var_C] ebx +
mov byte ptr [ebp+arg_0+3] al +
add edi 7 +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_1009C66  +
mov ecx [ebp+var_8] +
sar ecx 3 +
cmp cl 2 +
jle loc_1009BF7  +
cmp cl 3 +
jle loc_1009BE3  +
cmp cl 33h +
jnb loc_1009C66  +
mov esi [ebp+var_4] +
movsx eax cl +
mov [ebp+arg_8] eax +
movzx eax ds:byte_10015E8[eax] +
push 20h  +
pop ecx  +
sub ecx eax +
shr esi cl +
mov ecx eax +
mov eax [ebp+arg_8] +
mov al ds:byte_10015E8[eax] +
sub byte ptr [ebp+arg_0+3] al +
shl [ebp+var_4] cl +
cmp byte ptr [ebp+arg_0+3] 0 +
jg loc_1009BD7  +
movzx eax byte ptr [ebx+1] +
movzx ecx byte ptr [ebx] +
shl eax 8 +
or eax ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
add byte ptr [ebp+arg_0+3] 10h +
neg ecx  +
shl eax cl +
or [ebp+var_4] eax +
inc ebx  +
inc ebx  +
cmp byte ptr [ebp+arg_0+3] 0 +
mov [ebp+var_C] ebx +
jg loc_1009BD7  +
movzx eax byte ptr [ebx+1] +
movzx ecx byte ptr [ebx] +
shl eax 8 +
or eax ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
neg ecx  +
shl eax cl +
or [ebp+var_4] eax +
inc ebx  +
inc ebx  +
add byte ptr [ebp+arg_0+3] 10h +
mov [ebp+var_C] ebx +
mov eax [ebp+arg_8] +
add esi ds:dword_1001620[eax*4] +
jmp loc_1009BE9  +
mov esi ds:dword_100162C +
mov eax [edx+10h] +
mov [edx+14h] eax +
mov eax [edx+0Ch] +
mov [edx+10h] eax +
jmp loc_1009C09  +
movsx eax cl +
lea eax [edx+eax*4+0Ch] +
mov esi [eax] +
test cl cl +
jz loc_1009C0C  +
mov ecx [edx+0Ch] +
mov [eax] ecx +
mov [edx+0Ch] esi +
mov eax [ebp+arg_4] +
inc edi  +
mov ecx eax +
sub ecx esi +
inc edi  +
and ecx [edx+8] +
mov esi [edx] +
mov bl [esi+ecx] +
mov [esi+eax] bl +
inc eax  +
inc ecx  +
dec edi  +
test edi edi +
jg loc_1009C18  +
mov ebx [ebp+var_C] +
xor esi esi +
inc esi  +
cmp eax [ebp+var_14] +
mov [ebp+arg_4] eax +
jl loc_1009994  +
mov cl byte ptr [ebp+arg_0+3] +
mov [edx+2EB4h] cl +
mov ecx [ebp+var_4] +
mov [edx+2EB0h] ecx +
mov ecx [edx+8] +
and ecx eax +
sub eax [ebp+var_14] +
mov [edx+2B04h] ebx +
mov [edx+2EC0h] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
or eax 0FFFFFFFFh +
jmp loc_1009C5F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov eax 101h +
cmp esi eax +
jge loc_1009CB7  +
sub eax esi +
cmp eax [ebp+arg_8] +
jl loc_1009C8F  +
mov eax [ebp+arg_8] +
push eax  +
push esi  +
call sub_100961E  +
cmp eax esi +
jge loc_1009C9F  +
or eax 0FFFFFFFFh +
jmp loc_1009CC1  +
sub esi eax +
add [ebp+arg_8] esi +
cmp [ebp+arg_8] 0 +
mov esi eax +
mov [edx+2EC0h] eax +
jg loc_1009CB7  +
mov eax [ebp+arg_8] +
jmp loc_1009CC1  +
push [ebp+arg_8]  +
push esi  +
push edx  +
call sub_100994A  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [edx+2B08h] +
mov ecx [ebp+arg_0] +
mov [ebp+var_C] eax +
mov eax [edx] +
push ebx  +
mov bl [edx+2EB4h] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi [edx+2EB0h] +
add eax ecx +
cmp ecx eax +
push edi  +
mov edi [edx+2B04h] +
mov [ebp+var_18] eax +
jge loc_100A077  +
mov eax esi +
shr eax 16h +
cmp eax 400h +
jnb loc_1009D1C  +
movsx eax word ptr [edx+eax*2+18h] +
jmp loc_1009D28  +
mov dword ptr [edx+2EBCh] 1 +
xor eax eax +
test eax eax +
jge loc_1009D78  +
mov [ebp+arg_4] 200000h +
neg eax  +
test [ebp+arg_4] esi +
jz loc_1009D50  +
lea ecx [eax+eax+1] +
cmp ecx 0A80h +
jnb loc_1009D65  +
movsx eax word ptr [edx+eax*4+0E3Eh] +
jmp loc_1009D71  +
lea ecx [eax+eax] +
cmp ecx 0A80h +
jnb loc_1009D65  +
movsx eax word ptr [edx+eax*4+0E3Ch] +
jmp loc_1009D71  +
mov dword ptr [edx+2EBCh] 1 +
xor eax eax +
shr [ebp+arg_4] 1 +
test eax eax +
jl loc_1009D33  +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100A092  +
cmp edi [ebp+var_C] +
jnb loc_100A092  +
mov cl [eax+edx+0A18h] +
shl esi cl +
sub bl cl +
mov byte ptr [ebp+arg_4+3] bl +
mov [ebp+var_4] esi +
test bl bl +
jg loc_1009DC1  +
movzx esi byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl esi 8 +
or esi ecx +
movsx ecx bl +
neg ecx  +
shl esi cl +
or [ebp+var_4] esi +
inc edi  +
inc edi  +
add bl 10h +
mov byte ptr [ebp+arg_4+3] bl +
mov esi 100h +
sub eax esi +
jns loc_1009DE6  +
mov ecx [ebp+var_10] +
mov esi [ebp+arg_0] +
mov [ecx+esi] al +
mov esi [edx+4] +
add esi ecx +
mov ecx [ebp+arg_0] +
inc [ebp+arg_0]  +
mov [esi+ecx] al +
jmp loc_100A068  +
mov ecx eax +
and ecx 7 +
mov [ebp+var_8] ecx +
cmp ecx 7 +
jnz loc_1009ED0  +
mov ecx [ebp+var_4] +
shr ecx 18h +
cmp ecx esi +
jnb loc_1009E0B  +
movsx esi word ptr [edx+ecx*2+818h] +
jmp loc_1009E1C  +
and [ebp+var_8] 0 +
mov esi [ebp+var_8] +
mov dword ptr [edx+2EBCh] 1 +
test esi esi +
jge loc_1009E73  +
mov ecx 800000h +
mov ebx [ebp+var_4] +
neg esi  +
test ecx ebx +
jz loc_1009E44  +
lea ebx [esi+esi+1] +
cmp ebx 3E4h +
jnb loc_1009E5C  +
movsx esi word ptr [edx+esi*4+233Eh] +
jmp loc_1009E57  +
lea ebx [esi+esi] +
cmp ebx 3E4h +
jnb loc_1009E5C  +
movsx esi word ptr [edx+esi*4+233Ch] +
mov [ebp+var_8] esi +
jmp loc_1009E6A  +
and [ebp+var_8] 0 +
mov dword ptr [edx+2EBCh] 1 +
mov esi [ebp+var_8] +
shr ecx 1 +
test esi esi +
jl loc_1009E25  +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_1009EBD  +
cmp edi [ebp+var_C] +
jnb loc_100A092  +
mov cl [esi+edx+0CB8h] +
shl [ebp+var_4] cl +
mov cl byte ptr [ebp+arg_4+3] +
sub cl [esi+edx+0CB8h] +
mov byte ptr [ebp+arg_4+3] cl +
test cl cl +
jg loc_1009EBD  +
movzx ebx byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl ebx 8 +
or ebx ecx +
movsx ecx byte ptr [ebp+arg_4+3] +
neg ecx  +
shl ebx cl +
or [ebp+var_4] ebx +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_4+3] 10h +
add esi 7 +
cmp dword ptr [edx+2EBCh] 0 +
mov [ebp+var_8] esi +
jnz loc_100A092  +
sar eax 3 +
cmp al 2 +
jle loc_100A018  +
cmp al 33h +
jnb loc_100A092  +
movsx eax al +
mov bl ds:byte_10015E8[eax] +
mov [ebp+var_14] eax +
cmp bl 3 +
jb loc_1009FB6  +
movzx eax bl +
lea ecx [eax-3] +
test ecx ecx +
jz loc_1009F47  +
mov esi [ebp+var_4] +
push 23h  +
pop ecx  +
sub ecx eax +
shr esi cl +
cmp edi [ebp+var_C] +
jnb loc_100A092  +
lea ecx [eax-3] +
shl [ebp+var_4] cl +
mov al 3 +
sub al bl +
add byte ptr [ebp+arg_4+3] al +
cmp byte ptr [ebp+arg_4+3] 0 +
jg loc_1009F49  +
movzx eax byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl eax 8 +
or eax ecx +
movsx ecx byte ptr [ebp+arg_4+3] +
neg ecx  +
shl eax cl +
or [ebp+var_4] eax +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_4+3] 10h +
jmp loc_1009F49  +
xor esi esi +
mov eax [ebp+var_14] +
mov eax ds:dword_1001620[eax*4] +
lea esi [eax+esi*8] +
mov eax [ebp+var_4] +
shr eax 19h +
cmp eax 80h +
jnb loc_1009FA6  +
movsx eax byte ptr [eax+edx+0DB4h] +
cmp edi [ebp+var_C] +
jnb loc_100A092  +
mov cl [eax+edx+0E34h] +
sub byte ptr [ebp+arg_4+3] cl +
shl [ebp+var_4] cl +
cmp byte ptr [ebp+arg_4+3] 0 +
jg loc_1009FB2  +
movzx ebx byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl ebx 8 +
or ebx ecx +
movsx ecx byte ptr [ebp+arg_4+3] +
neg ecx  +
shl ebx cl +
or [ebp+var_4] ebx +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_4+3] 10h +
jmp loc_1009FB2  +
xor eax eax +
mov dword ptr [edx+2EBCh] 1 +
add esi eax +
jmp loc_100A00A  +
test bl bl +
jz loc_100A007  +
mov esi [ebp+var_4] +
movzx eax bl +
push 20h  +
pop ecx  +
sub ecx eax +
shr esi cl +
cmp edi [ebp+var_C] +
jnb loc_100A092  +
sub byte ptr [ebp+arg_4+3] bl +
mov ecx eax +
shl [ebp+var_4] cl +
cmp byte ptr [ebp+arg_4+3] 0 +
jg loc_1009FFB  +
movzx eax byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl eax 8 +
or eax ecx +
movsx ecx byte ptr [ebp+arg_4+3] +
neg ecx  +
shl eax cl +
or [ebp+var_4] eax +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_4+3] 10h +
mov eax [ebp+var_14] +
add esi ds:dword_1001620[eax*4] +
jmp loc_100A00A  +
xor esi esi +
inc esi  +
mov eax [edx+10h] +
mov [edx+14h] eax +
mov eax [edx+0Ch] +
mov [edx+10h] eax +
jmp loc_100A02A  +
movsx ecx al +
lea ecx [edx+ecx*4+0Ch] +
mov esi [ecx] +
test al al +
jz loc_100A02D  +
mov eax [edx+0Ch] +
mov [ecx] eax +
mov [edx+0Ch] esi +
mov ecx [ebp+arg_0] +
add [ebp+var_8] 2 +
mov ebx ecx +
sub ebx esi +
mov esi [ebp+var_10] +
mov eax ebx +
and eax [edx+8] +
cmp ecx 101h +
mov al [eax+esi] +
mov [esi+ecx] al +
jge loc_100A057  +
mov esi [edx+4] +
add esi [ebp+var_10] +
mov [esi+ecx] al +
inc ecx  +
inc ebx  +
dec [ebp+var_8]  +
cmp [ebp+var_8] 0 +
jg loc_100A038  +
mov bl byte ptr [ebp+arg_4+3] +
mov [ebp+arg_0] ecx +
mov ecx [ebp+arg_0] +
cmp ecx [ebp+var_18] +
mov esi [ebp+var_4] +
jl loc_1009D09  +
mov [edx+2EB4h] bl +
mov [edx+2EB0h] esi +
mov [edx+2B04h] edi +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
or eax 0FFFFFFFFh +
jmp loc_100A08B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov edx [ebp+arg_0] +
mov al [edx+2EB4h] +
mov ecx [ebp+arg_8] +
mov byte ptr [ebp+arg_0+3] al +
mov eax [edx+2EB0h] +
mov [ebp+var_4] eax +
mov eax [edx+2B08h] +
mov [ebp+var_8] eax +
mov eax [edx] +
push ebx  +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
add ecx eax +
cmp eax ecx +
push esi  +
push edi  +
mov edi [edx+2B04h] +
mov [ebp+var_14] ecx +
jge loc_100A441  +
mov eax [ebp+var_4] +
xor ecx ecx +
shr eax 16h +
inc ecx  +
cmp eax 400h +
jnb loc_100A0FA  +
movsx eax word ptr [edx+eax*2+18h] +
jmp loc_100A102  +
mov [edx+2EBCh] ecx +
xor eax eax +
test eax eax +
jge loc_100A14D  +
mov esi 200000h +
mov ebx [ebp+var_4] +
neg eax  +
test esi ebx +
jz loc_100A12A  +
lea ebx [eax+eax+1] +
cmp ebx 0A80h +
jnb loc_100A13F  +
movsx eax word ptr [edx+eax*4+0E3Eh] +
jmp loc_100A147  +
lea ebx [eax+eax] +
cmp ebx 0A80h +
jnb loc_100A13F  +
movsx eax word ptr [edx+eax*4+0E3Ch] +
jmp loc_100A147  +
mov [edx+2EBCh] ecx +
xor eax eax +
shr esi 1 +
test eax eax +
jl loc_100A10B  +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100A197  +
cmp edi [ebp+var_8] +
jnb loc_100A46E  +
mov cl [eax+edx+0A18h] +
shl [ebp+var_4] cl +
mov cl byte ptr [ebp+arg_0+3] +
sub cl [eax+edx+0A18h] +
mov byte ptr [ebp+arg_0+3] cl +
test cl cl +
jg loc_100A197  +
movzx esi byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl esi 8 +
or esi ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
neg ecx  +
shl esi cl +
or [ebp+var_4] esi +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_0+3] 10h +
mov esi 100h +
sub eax esi +
jns loc_100A1B1  +
mov esi [ebp+arg_4] +
mov ecx [ebp+var_10] +
inc [ebp+arg_4]  +
mov [ecx+esi] al +
jmp loc_100A435  +
mov ebx eax +
and ebx 7 +
cmp ebx 7 +
jnz loc_100A28E  +
mov ecx [ebp+var_4] +
shr ecx 18h +
cmp ecx esi +
jnb loc_100A1D3  +
movsx ebx word ptr [edx+ecx*2+818h] +
jmp loc_100A1DF  +
mov dword ptr [edx+2EBCh] 1 +
xor ebx ebx +
mov [ebp+arg_8] ebx +
test ebx ebx +
jge loc_100A232  +
mov ecx 800000h +
neg ebx  +
test [ebp+var_4] ecx +
jz loc_100A208  +
lea esi [ebx+ebx+1] +
cmp esi 3E4h +
jnb loc_100A21D  +
movsx ebx word ptr [edx+ebx*4+233Eh] +
jmp loc_100A229  +
lea esi [ebx+ebx] +
cmp esi 3E4h +
jnb loc_100A21D  +
movsx ebx word ptr [edx+ebx*4+233Ch] +
jmp loc_100A229  +
mov dword ptr [edx+2EBCh] 1 +
xor ebx ebx +
shr ecx 1 +
test ebx ebx +
jl loc_100A1EB  +
mov [ebp+arg_8] ebx +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100A27E  +
cmp edi [ebp+var_8] +
jnb loc_100A46E  +
mov cl [ebx+edx+0CB8h] +
shl [ebp+var_4] cl +
mov cl byte ptr [ebp+arg_0+3] +
sub cl [ebx+edx+0CB8h] +
mov byte ptr [ebp+arg_0+3] cl +
test cl cl +
jg loc_100A27B  +
movzx esi byte ptr [edi+1] +
movzx ebx byte ptr [edi] +
shl esi 8 +
movsx ecx cl +
or esi ebx +
neg ecx  +
shl esi cl +
or [ebp+var_4] esi +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_0+3] 10h +
mov ebx [ebp+arg_8] +
add ebx 7 +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100A46E  +
sar eax 3 +
cmp al 2 +
jle loc_100A3F7  +
cmp al 33h +
jnb loc_100A46E  +
movsx ecx al +
mov al ds:byte_10015E8[ecx] +
mov [ebp+var_C] ecx +
mov byte ptr [ebp+arg_8+3] al +
cmp al 3 +
jb loc_100A388  +
movzx eax al +
lea esi [eax-3] +
test esi esi +
jz loc_100A371  +
mov esi [ebp+var_4] +
push 23h  +
pop ecx  +
sub ecx eax +
shr esi cl +
cmp edi [ebp+var_8] +
jnb loc_100A46E  +
lea ecx [eax-3] +
shl [ebp+var_4] cl +
mov al 3 +
sub al byte ptr [ebp+arg_8+3] +
add byte ptr [ebp+arg_0+3] al +
cmp byte ptr [ebp+arg_0+3] 0 +
jg loc_100A30A  +
movzx eax byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl eax 8 +
or eax ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
neg ecx  +
shl eax cl +
or [ebp+var_4] eax +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_0+3] 10h +
mov ecx [ebp+var_C] +
mov eax ds:dword_1001620[ecx*4] +
lea esi [eax+esi*8] +
mov eax [ebp+var_4] +
shr eax 19h +
cmp eax 80h +
jnb loc_100A375  +
movsx eax byte ptr [eax+edx+0DB4h] +
mov [ebp+arg_8] eax +
cmp edi [ebp+var_8] +
jnb loc_100A46E  +
mov cl [eax+edx+0E34h] +
mov al [eax+edx+0E34h] +
sub byte ptr [ebp+arg_0+3] al +
shl [ebp+var_4] cl +
cmp byte ptr [ebp+arg_0+3] 0 +
jg loc_100A383  +
movzx eax byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl eax 8 +
or eax ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
neg ecx  +
shl eax cl +
or [ebp+var_4] eax +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_0+3] 10h +
jmp loc_100A383  +
xor esi esi +
jmp loc_100A30D  +
and [ebp+arg_8] 0 +
mov dword ptr [edx+2EBCh] 1 +
add esi [ebp+arg_8] +
jmp loc_100A3E9  +
test al al +
jz loc_100A3E2  +
mov esi [ebp+var_4] +
movzx eax al +
push 20h  +
pop ecx  +
sub ecx eax +
shr esi cl +
cmp edi [ebp+var_8] +
jnb loc_100A46E  +
mov ecx eax +
mov eax [ebp+var_C] +
mov al ds:byte_10015E8[eax] +
sub byte ptr [ebp+arg_0+3] al +
shl [ebp+var_4] cl +
cmp byte ptr [ebp+arg_0+3] 0 +
jg loc_100A3D6  +
movzx eax byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl eax 8 +
or eax ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
neg ecx  +
shl eax cl +
or [ebp+var_4] eax +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_0+3] 10h +
mov eax [ebp+var_C] +
add esi ds:dword_1001620[eax*4] +
jmp loc_100A3E9  +
mov esi ds:dword_1001620[ecx*4] +
mov eax [edx+10h] +
mov [edx+14h] eax +
mov eax [edx+0Ch] +
mov [edx+10h] eax +
jmp loc_100A409  +
movsx ecx al +
lea ecx [edx+ecx*4+0Ch] +
mov esi [ecx] +
test al al +
jz loc_100A40C  +
mov eax [edx+0Ch] +
mov [ecx] eax +
mov [edx+0Ch] esi +
mov ecx [ebp+arg_4] +
sub ecx esi +
and ecx [edx+8] +
mov esi [ebp+var_10] +
inc ebx  +
inc ebx  +
add ecx esi +
mov [ebp+arg_8] ecx +
mov al [ecx] +
mov ecx [ebp+arg_4] +
inc [ebp+arg_4]  +
mov [esi+ecx] al +
mov ecx [ebp+arg_8] +
inc ecx  +
dec ebx  +
mov [ebp+arg_8] ecx +
test ebx ebx +
jg loc_100A41E  +
mov eax [ebp+arg_4] +
cmp eax [ebp+var_14] +
jl loc_100A0E3  +
mov cl byte ptr [ebp+arg_0+3] +
mov [edx+2EB4h] cl +
mov ecx [ebp+var_4] +
mov [edx+2EB0h] ecx +
mov ecx [edx+8] +
and ecx eax +
sub eax [ebp+var_14] +
mov [edx+2B04h] edi +
mov [edx+2EC0h] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
or eax 0FFFFFFFFh +
jmp loc_100A467  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov eax 101h +
cmp esi eax +
jge loc_100A4C9  +
sub eax esi +
cmp eax [ebp+arg_8] +
jl loc_100A497  +
mov eax [ebp+arg_8] +
push eax  +
push esi  +
call sub_1009CCB  +
cmp eax 0FFFFFFFFh +
jnz loc_100A4B1  +
mov dword ptr [edx+2EBCh] 1 +
or eax eax +
jmp loc_100A4D3  +
sub esi eax +
add [ebp+arg_8] esi +
cmp [ebp+arg_8] 0 +
mov esi eax +
mov [edx+2EC0h] eax +
jg loc_100A4C9  +
mov eax [ebp+arg_8] +
jmp loc_100A4D3  +
push [ebp+arg_8]  +
push esi  +
push edx  +
call sub_100A09C  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+2B0Ch] +
test eax eax +
jz loc_100A523  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push eax  +
call memcpy  +
add esp 0Ch +
cmp dword ptr [esi+2EC4h] 0 +
jz loc_100A523  +
cmp dword ptr [esi+2ECCh] 8000h +
jnb loc_100A523  +
push [ebp+arg_4]  +
push dword ptr [esi+2B0Ch]  +
push esi  +
call sub_100909E  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2E8h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_2DC] eax +
xor esi esi +
push 4  +
push ebx  +
call sub_10094F2  +
mov byte ptr [ebp+esi+var_1C] al +
inc esi  +
cmp esi 14h +
jl loc_100A551  +
cmp [ebx+2EBCh] edi +
jz loc_100A572  +
xor eax eax +
jmp loc_100A801  +
lea eax [ebp+var_D8] +
push eax  +
lea eax [ebp+var_2D8] +
push eax  +
push 8  +
lea eax [ebp+var_1C] +
push eax  +
push 14h  +
push ebx  +
call sub_100A930  +
cmp [ebp+arg_0] edi +
jle loc_100A7F6  +
mov eax [ebx+2EB0h] +
xor ecx ecx +
shr eax 18h +
inc ecx  +
cmp eax 100h +
jnb loc_100A5B4  +
movzx esi word ptr [ebp+eax*2+var_2D8] +
jmp loc_100A5BC  +
mov [ebx+2EBCh] ecx +
xor esi esi +
test si si +
jge loc_100A608  +
mov edx 800000h +
neg esi  +
movzx eax si +
cwde   +
test [ebx+2EB0h] edx +
jz loc_100A5E7  +
lea esi [eax+eax+1] +
cmp esi 5Eh +
jnb loc_100A5F9  +
movzx esi word ptr [ebp+eax*4+var_D8+2] +
jmp loc_100A601  +
lea esi [eax+eax] +
cmp esi 5Eh +
jnb loc_100A5F9  +
movzx esi word ptr [ebp+eax*4+var_D8] +
jmp loc_100A601  +
mov [ebx+2EBCh] ecx +
xor esi esi +
shr edx 1 +
test si si +
jl loc_100A5C6  +
cmp si 18h +
jnb loc_100A634  +
test si si +
jl loc_100A634  +
cmp dword ptr [ebx+2EBCh] 0 +
jnz loc_100A56B  +
movsx eax si +
movzx eax byte ptr [ebp+eax+var_1C] +
push eax  +
push ebx  +
call sub_100943A  +
xor ecx ecx +
inc ecx  +
jmp loc_100A63A  +
mov [ebx+2EBCh] ecx +
cmp dword ptr [ebx+2EBCh] 0 +
jnz loc_100A56B  +
cmp si 11h +
jnz loc_100A65D  +
push 4  +
push ebx  +
call sub_10094F2  +
movzx esi al +
add esi 4 +
jmp loc_100A671  +
cmp si 12h +
jnz loc_100A6A1  +
push 5  +
push ebx  +
call sub_10094F2  +
movzx esi al +
add esi 14h +
lea eax [esi+edi] +
cmp eax [ebp+arg_0] +
jl loc_100A67E  +
mov esi [ebp+arg_0] +
sub esi edi +
test esi esi +
jle loc_100A7CB  +
mov eax [ebp+var_2DC] +
push esi  +
add eax edi +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
add edi esi +
jmp loc_100A7CB  +
cmp si 13h +
jnz loc_100A7CE  +
push ecx  +
push ebx  +
call sub_10094F2  +
movzx ecx al +
mov eax [ebp+arg_0] +
add ecx 4 +
lea edx [ecx+edi] +
cmp edx eax +
mov [ebp+var_2E0] ecx +
jl loc_100A6D2  +
sub eax edi +
mov [ebp+var_2E0] eax +
mov ecx eax +
mov eax [ebx+2EB0h] +
xor edx edx +
shr eax 18h +
inc edx  +
cmp eax 100h +
jnb loc_100A6EF  +
movzx esi word ptr [ebp+eax*2+var_2D8] +
jmp loc_100A6F7  +
mov [ebx+2EBCh] edx +
xor esi esi +
test si si +
jge loc_100A75E  +
mov [ebp+var_2E4] 800000h +
neg esi  +
movzx eax si +
mov [ebp+var_2E8] eax +
mov eax [ebp+var_2E4] +
test [ebx+2EB0h] eax +
movsx eax word ptr [ebp+var_2E8] +
jz loc_100A739  +
lea esi [eax+eax+1] +
cmp esi 5Eh +
jnb loc_100A74B  +
movzx esi word ptr [ebp+eax*4+var_D8+2] +
jmp loc_100A753  +
lea esi [eax+eax] +
cmp esi 5Eh +
jnb loc_100A74B  +
movzx esi word ptr [ebp+eax*4+var_D8] +
jmp loc_100A753  +
mov [ebx+2EBCh] edx +
xor esi esi +
shr [ebp+var_2E4] 1 +
test si si +
jl loc_100A706  +
cmp si 18h +
jnb loc_100A78D  +
test si si +
jl loc_100A78D  +
cmp dword ptr [ebx+2EBCh] 0 +
jnz loc_100A56B  +
movsx eax si +
movzx eax byte ptr [ebp+eax+var_1C] +
push eax  +
push ebx  +
call sub_100943A  +
mov ecx [ebp+var_2E0] +
jmp loc_100A793  +
mov [ebx+2EBCh] edx +
cmp dword ptr [ebx+2EBCh] 0 +
jnz loc_100A56B  +
mov eax [ebp+arg_4] +
movzx eax byte ptr [edi+eax] +
movsx edx si +
sub eax edx +
add eax 11h +
push 11h  +
cdq   +
pop esi  +
idiv  esi +
jmp loc_100A7C7  +
dec ecx  +
cmp edi [ebp+arg_0] +
jge loc_100A7CB  +
mov eax [ebp+var_2DC] +
mov [eax+edi] dl +
inc edi  +
test ecx ecx +
jg loc_100A7B7  +
dec edi  +
jmp loc_100A7EC  +
mov eax [ebp+arg_4] +
movzx eax byte ptr [edi+eax] +
movsx ecx si +
sub eax ecx +
add eax 11h +
cdq   +
push 11h  +
pop ecx  +
idiv  ecx +
mov eax [ebp+var_2DC] +
mov [eax+edi] dl +
inc edi  +
cmp edi [ebp+arg_0] +
jl loc_100A597  +
xor eax eax +
cmp [ebx+2EBCh] eax +
setz al  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1006B07  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
lea esi [ebx+0A18h] +
push esi  +
lea eax [ebx+2B14h] +
push eax  +
push 100h  +
call sub_100A52D  +
test eax eax +
jnz loc_100A843  +
xor eax eax +
jmp loc_100A8D4  +
lea eax [ebx+0B18h] +
push eax  +
lea eax [ebx+2C14h] +
push eax  +
movzx eax byte ptr [ebx+2EB5h] +
shl eax 3 +
push eax  +
call sub_100A52D  +
test eax eax +
jz loc_100A83C  +
movzx ecx byte ptr [ebx+2EB5h] +
lea ecx ds:100h[ecx*8] +
mov eax 2A0h +
cmp ecx eax +
jge loc_100A87E  +
mov eax ecx +
lea ecx [ebx+0E3Ch] +
push ecx  +
lea ecx [ebx+18h] +
push ecx  +
push 0Ah  +
push esi  +
push eax  +
push ebx  +
call sub_100A930  +
test eax eax +
jz loc_100A83C  +
push edi  +
lea edi [ebx+0CB8h] +
push edi  +
lea eax [ebx+2DB4h] +
push eax  +
mov esi 0F9h +
push esi  +
call sub_100A52D  +
test eax eax +
jz loc_100A8D3  +
lea eax [ebx+233Ch] +
push eax  +
lea eax [ebx+818h] +
push eax  +
push 8  +
push edi  +
push esi  +
push ebx  +
call sub_100A930  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor ebx ebx +
lea edi [esi+0E34h] +
push 3  +
push esi  +
call sub_10094F2  +
mov [edi+ebx] al +
inc ebx  +
cmp ebx 8 +
jl loc_100A8F2  +
cmp dword ptr [esi+2EBCh] 0 +
jz loc_100A910  +
xor eax eax +
jmp loc_100A924  +
lea eax [esi+0DB4h] +
push eax  +
push edi  +
push esi  +
call sub_100AB37  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A0h +
push esi  +
push edi  +
push 10h  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_9C] +
stos   +
xor esi esi +
xor ecx ecx +
cmp [ebp+arg_4] esi +
jbe loc_100A96F  +
mov eax [ebp+arg_8] +
add eax ecx +
cmp byte ptr [eax] 10h +
ja loc_100A9BD  +
movzx eax byte ptr [eax] +
lea eax [ebp+eax*4+var_A0] +
inc dword ptr [eax]  +
inc ecx  +
cmp ecx [ebp+arg_4] +
jb loc_100A953  +
xor edx edx +
inc edx  +
mov [ebp+var_58] esi +
mov eax edx +
mov edi [ebp+eax*4+var_A0] +
push 10h  +
pop ecx  +
sub ecx eax +
shl edi cl +
add edi [ebp+eax*4+var_5C] +
inc eax  +
mov [ebp+eax*4+var_5C] edi +
cmp eax 10h +
jbe loc_100A977  +
cmp [ebp+var_18] 10000h +
jz loc_100A9C4  +
cmp [ebp+var_18] esi +
jnz loc_100A9BD  +
mov cl [ebp+arg_C] +
shl edx cl +
add edx edx +
push edx  +
push esi  +
push [ebp+arg_10]  +
call memset  +
xor eax eax +
add esp 0Ch +
inc eax  +
jmp loc_100AB28  +
xor eax eax +
jmp loc_100AB28  +
movzx esi [ebp+arg_C] +
push ebx  +
mov bl 10h +
sub bl [ebp+arg_C] +
mov eax edx +
mov [ebp+var_10] esi +
cmp esi edx +
jb loc_100A9FC  +
lea edi [esi-1] +
movzx ecx bl +
lea edx [ebp+eax*4+var_5C] +
shr dword ptr [edx] cl +
xor edx edx +
inc edx  +
mov ecx edi +
shl edx cl +
inc eax  +
dec edi  +
mov [ebp+eax*4+var_A4] edx +
cmp eax esi +
jbe loc_100A9DA  +
cmp eax 10h +
ja loc_100AA14  +
push 10h  +
pop ecx  +
sub ecx eax +
xor edx edx +
inc edx  +
shl edx cl +
inc eax  +
dec ecx  +
mov [ebp+eax*4+var_A4] edx +
cmp eax 10h +
jbe loc_100AA01  +
mov eax [ebp+esi*4+var_58] +
movzx ecx bl +
mov ebx [ebp+arg_10] +
shr eax cl +
mov [ebp+var_14] ecx +
cmp eax 10000h +
jz loc_100AA44  +
xor edx edx +
inc edx  +
mov ecx esi +
shl edx cl +
sub edx eax +
add edx edx +
push edx  +
lea eax [ebx+eax*2] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov ecx [ebp+arg_4] +
xor eax eax +
mov [ebp+var_8] ecx +
mov [ebp+var_C] eax +
test ecx ecx +
jle loc_100AB24  +
mov ecx [ebp+arg_8] +
mov al [eax+ecx] +
test al al +
jz loc_100AB14  +
movzx ecx al +
shl ecx 2 +
mov edx [ebp+ecx+var_A0] +
lea esi [ebp+ecx+var_5C] +
mov edi [esi] +
add edx edi +
cmp al [ebp+arg_C] +
ja loc_100AAB9  +
mov ecx [ebp+var_10] +
xor eax eax +
inc eax  +
shl eax cl +
cmp edx eax +
ja loc_100AB2E  +
cmp edi edx +
jnb loc_100AAB5  +
mov eax [ebp+var_C] +
lea ebx [ebx+edi*2] +
mov ecx edx +
sub ecx edi +
mov edi ebx +
movzx ebx ax +
mov eax ebx +
shl ebx 10h +
or eax ebx +
mov ebx [ebp+arg_10] +
shr ecx 1 +
stos   +
adc ecx ecx +
stos   +
mov [esi] edx +
jmp loc_100AB14  +
mov ecx [ebp+var_14] +
sub al [ebp+arg_C] +
mov [esi] edx +
mov edx edi +
shr edx cl +
mov ecx [ebp+var_10] +
mov [ebp+var_1] al +
shl edi cl +
lea edx [ebx+edx*2] +
cmp word ptr [edx] 0 +
mov eax [ebp+arg_14] +
jnz loc_100AAF5  +
mov ecx [ebp+var_8] +
shl ecx 2 +
xor esi esi +
mov [ecx+eax+2] si +
mov [ecx+eax] si +
mov ecx [ebp+var_8] +
neg ecx  +
inc [ebp+var_8]  +
mov [edx] cx +
movsx ecx word ptr [edx] +
shl ecx 2 +
sub eax ecx +
test di di +
jge loc_100AB04  +
inc eax  +
inc eax  +
add edi edi +
dec [ebp+var_1]  +
mov edx eax +
jnz loc_100AAD0  +
mov ax word ptr [ebp+var_C] +
mov [edx] ax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax [ebp+arg_4] +
mov [ebp+var_C] eax +
jl loc_100AA57  +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 18h  +
xor eax eax +
jmp loc_100AB27  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax dword_100C2C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
mov [ebp+var_54] eax +
xor eax eax +
push edi  +
movzx edx ax +
push 8  +
mov eax edx +
shl edx 10h +
pop ecx  +
or eax edx +
lea edi [ebp+var_4A] +
push 10h  +
stos   +
mov [ebp+var_58] esi +
xor ecx ecx +
pop edx  +
movzx eax cx +
add eax esi +
cmp [eax] dl +
ja loc_100AC73  +
movzx eax byte ptr [eax] +
lea eax [ebp+eax*2-4Ch] +
inc word ptr [eax]  +
inc ecx  +
cmp cx 8 +
jb loc_100AB70  +
xor eax eax +
push 0Fh  +
mov [ebp+var_26] ax +
pop ecx  +
mov di word ptr [ebp+eax+var_4A] +
shl di cl +
add di [ebp+eax+var_26] +
dec ecx  +
mov [ebp+eax+var_24] di +
inc eax  +
inc eax  +
dec edx  +
jnz loc_100AB97  +
xor eax eax +
cmp [ebp+var_6] ax +
jnz loc_100AC63  +
push 6  +
pop ecx  +
push 7  +
pop edx  +
shr [ebp+eax+var_26] 9 +
xor edi edi +
inc edi  +
shl edi cl +
dec ecx  +
inc eax  +
inc eax  +
dec edx  +
mov [ebp+eax+var_4C] di +
jnz loc_100ABC1  +
push 8  +
pop ecx  +
push 9  +
lea eax [ebp+var_3C] +
pop edx  +
xor edi edi +
inc edi  +
shl edi cl +
dec ecx  +
mov [eax] di +
inc eax  +
inc eax  +
dec edx  +
jnz loc_100ABE0  +
push 80h  +
push edx  +
push [ebp+var_54]  +
call memset  +
add esp 0Ch +
mov byte ptr [ebp+var_50] 0 +
movzx eax byte ptr [ebp+var_50] +
mov al [eax+esi] +
test al al +
jz loc_100AC57  +
movzx eax al +
add eax eax +
lea edi [ebp+eax-28h] +
movzx ecx word ptr [edi] +
mov ax [ebp+eax+var_4C] +
add ax cx +
movzx esi ax +
mov eax 80h +
cmp si ax +
ja loc_100AC73  +
movzx ecx cx +
cmp cx si +
jnb loc_100AC51  +
mov edx esi +
movzx eax cx +
add eax [ebp+var_54] +
sub edx ecx +
movzx ecx dx +
push ecx  +
push [ebp+var_50]  +
push eax  +
call memset  +
add esp 0Ch +
mov [edi] si +
mov esi [ebp+var_58] +
inc byte ptr [ebp+var_50]  +
cmp byte ptr [ebp+var_50] 8 +
jb loc_100AC03  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1006B07  +
leave   +
retn 0Ch  +
xor eax eax +
jmp loc_100AC63  +
***
retf 5302h  +
***
