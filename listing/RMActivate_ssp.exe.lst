push ebp  +
mov edi edi +
mov ebp esp +
sub esp 14Ch +
mov eax dword_1043424 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
push ebx  +
mov [ebp-0DCh] eax +
mov eax [eax+8] +
mov edx [eax+8] +
mov ebx [eax] +
push esi  +
mov esi [eax+4] +
add eax 0Ch +
mov [ebp-0C8h] ecx +
push edi  +
mov ecx 0FFFFFFFh +
and ebx ecx +
and edx ecx +
and esi ecx +
mov edi offset __ImageBase +
lea ecx [eax-1] +
add ebx edi +
cmp ecx offset Address +
mov [ebp-0D4h] ebx +
mov [ebp-0FCh] edx +
mov [ebp-0CCh] esi +
mov [ebp-78h] eax +
mov [ebp-80h] ecx +
jb loc_100179D  +
mov edx ds:dword_1021358 +
mov ecx ds:dword_10049B0 +
imul ecx edx +
lea edx Address[ecx] +
mov ecx [ebp-80h] +
cmp ecx edx +
jnb loc_100179D  +
mov eax ecx +
sub eax offset Address +
xor edx edx +
mov ecx ds:dword_1021358 +
div  ecx +
mov ecx ds:dword_1021358 +
imul ecx eax +
lea edx Address[ecx] +
mov eax [ebp-78h] +
mov ecx [ebp-80h] +
jmp loc_100179F  +
xor edx edx +
test edx edx +
mov [ebp-6Ch] edx +
jnz loc_10017B1  +
and ecx 0FFFF0000h +
mov edx ecx +
mov [ebp-6Ch] edx +
sub eax edx +
add eax 0FFFFFFC0h +
jns loc_10017BA  +
xor eax eax +
add eax edx +
push 40h  +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_10017BF  +
lea eax [esi+ebx] +
mov [ebp-78h] eax +
mov eax ds:dword_1021358 +
sub eax esi +
mov [ebp-0D0h] ebx +
sub [ebp-0D0h] edi +
lea ecx [eax+1] +
xor eax eax +
mov [ebp-60h] ecx +
test ecx ecx +
jz loc_1001815  +
mov edx dword_1042FC4 +
shr dword ptr [ebp-60h] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_1042FC4 edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp dword ptr [ebp-60h] 0 +
jnz loc_10017EB  +
xor edx edx +
div  ecx +
mov eax [ebp-6Ch] +
add eax edx +
push esi  +
push dword ptr [ebp-0D0h]  +
mov [ebp-7Ch] eax +
mov eax 0D5C0E2E0h +
test esi esi +
mov eax [ebp-78h] +
pop ecx  +
pop ecx  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-0E0h] eax +
mov eax [ebp-7Ch] +
mov [ebp-0E4h] ecx +
mov byte ptr [ebp-59h] 0 +
mov [ebp-6Ch] esi +
mov [ebp-0D8h] ebx +
mov [ebp-80h] eax +
jz loc_1001F7E  +
lea esi [ebp-0E4h] +
mov eax 0A371770Fh +
mov eax [ebp-0E0h] +
mov ecx ds:off_10051BC +
mov ebx [ebp-0E4h] +
and dword ptr [ebp-68h] 0 +
and dword ptr [ebp-64h] 0 +
and eax 0FFFFFFFh +
mov [ebp-60h] eax +
mov eax edi +
and ebx 0FFFFFFFh +
add ebx edi +
sub eax ecx +
mov [ebp-100h] eax +
jnz loc_100190C  +
xor edi edi +
cmp [ebp-60h] edi +
jbe loc_1001B8D  +
mov esi 3EC41EC2h +
mov ecx 7FFFFFFFh +
movzx eax byte ptr [edi+ebx] +
add eax esi +
add [ebp-68h] eax +
add eax [ebp-64h] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-68h] eax +
inc edi  +
mov [ebp-64h] eax +
cmp edi [ebp-60h] +
jb loc_10018B4  +
jmp loc_1001B8D  +
mov edx ds:dword_100003C +
mov ecx ebx +
lea edx dword_10000A0[edx] +
mov eax [ebp-60h] +
add eax ebx +
mov [ebp-0C4h] eax +
mov eax [edx] +
mov edx [edx+4] +
mov [ebp-74h] edx +
add eax edi +
sub ecx edi +
mov edx ecx +
mov edi 0FFFFF000h +
and edx edi +
mov esi ecx +
sub esi edx +
mov [ebp-70h] esi +
mov esi [ebp-60h] +
add ecx esi +
mov esi ecx +
and esi edi +
mov edi eax +
sub ecx esi +
mov [ebp-0F4h] ecx +
mov ecx [ebp-74h] +
mov [ebp-0F8h] esi +
add ecx eax +
cmp eax ecx +
mov [ebp-0F0h] ecx +
jz loc_1001974  +
cmp [edi] edx +
jnb loc_1001974  +
add edi [edi+4] +
cmp edi ecx +
jnz loc_1001969  +
xor eax eax +
cmp edi ecx +
jz loc_10019A0  +
cmp [edi] edx +
jnz loc_10019A0  +
mov edx [edi+4] +
sub edx 8 +
shr edx 1 +
jz loc_10019A0  +
lea ecx [edi+8] +
movzx esi word ptr [ecx] +
and esi 0FFFh +
cmp esi [ebp-70h] +
jnb loc_10019A0  +
inc eax  +
inc ecx  +
inc ecx  +
cmp eax edx +
jnz loc_100198B  +
mov esi 3EC41EC2h +
mov ecx 7FFFFFFFh +
jmp loc_10019B2  +
mov eax [ebp-0E8h] +
cmp edi [ebp-0F0h] +
jz loc_1001B25  +
mov edx [ebp-0F8h] +
cmp [edi] edx +
ja loc_1001B25  +
mov edx [edi+4] +
add edx 0FFFFFFF8h +
shr edx 1 +
cmp eax edx +
jnz loc_10019F9  +
add edi [edi+4] +
cmp edi [ebp-0F0h] +
jz loc_1001B25  +
mov eax [ebp-0F8h] +
cmp [edi] eax +
ja loc_1001B25  +
xor eax eax +
jmp loc_10019CC  +
***
mov edx [ebp-0F8h] +
cmp [edi] edx +
jnz loc_1001A1A  +
movzx edx word ptr [edi+eax*2+8] +
and edx 0FFFh +
cmp edx [ebp-0F4h] +
jnb loc_1001B25  +
mov edx eax +
inc eax  +
mov [ebp-0E8h] eax +
mov eax 0F000h +
test [edi+edx*2+8] ax +
jz loc_10019AC  +
movzx eax word ptr [edi+edx*2+8] +
mov edx [edi] +
and dword ptr [ebp-60h] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-70h] eax +
sub [ebp-70h] ebx +
mov [ebp-74h] eax +
jz loc_1001AB3  +
mov eax [ebp-60h] +
movzx eax byte ptr [eax+ebx] +
add eax esi +
add [ebp-68h] eax +
add eax [ebp-64h] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-68h] eax +
inc dword ptr [ebp-60h]  +
mov [ebp-64h] eax +
mov eax [ebp-60h] +
cmp eax [ebp-70h] +
jb loc_1001A55  +
mov eax [ebp-74h] +
mov eax [eax] +
sub eax [ebp-100h] +
mov [ebp-104h] eax +
xor ebx ebx +
movzx eax byte ptr [ebp+ebx-104h] +
add eax esi +
add [ebp-68h] eax +
add eax [ebp-64h] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-68h] eax +
mov [ebp-64h] eax +
inc ebx  +
cmp ebx 4 +
jb loc_1001AC3  +
mov ebx [ebp-74h] +
add ebx 4 +
jmp loc_10019AC  +
***
xor edi edi +
mov eax [ebp-0C4h] +
sub eax ebx +
mov [ebp-0C4h] eax +
jz loc_1001B8D  +
movzx eax byte ptr [edi+ebx] +
add eax esi +
add [ebp-68h] eax +
add eax [ebp-64h] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-68h] eax +
inc edi  +
mov [ebp-64h] eax +
cmp edi [ebp-0C4h] +
jb loc_1001B37  +
xor edi edi +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-68h] +
mov [ebp+eax-58h] cl +
inc eax  +
cmp eax 10h +
jb loc_1001B91  +
mov eax 138A539h +
mov esi [ebp-4Ch] +
mov eax [ebp-58h] +
mov edx [ebp-50h] +
mov ecx [ebp-54h] +
mov [ebp-144h] eax +
mov [ebp-11Ch] eax +
mov eax ds:dword_1002168 +
mov [ebp-148h] eax +
mov eax ds:dword_100216C +
mov [ebp-134h] eax +
mov eax ds:dword_1002170 +
mov [ebp-120h] eax +
mov eax ds:dword_1002174 +
mov [ebp-10Ch] eax +
mov eax [ebp-7Ch] +
mov [ebp-140h] ecx +
mov [ebp-118h] ecx +
lea ecx [ebp-48h] +
sub eax ecx +
mov [ebp-70h] eax +
mov eax [ebp-0D4h] +
sub eax [ebp-7Ch] +
mov [ebp-13Ch] edx +
mov [ebp-138h] esi +
mov [ebp-114h] edx +
mov [ebp-110h] esi +
mov [ebp-130h] edi +
mov [ebp-12Ch] edi +
mov [ebp-128h] edi +
mov [ebp-124h] edi +
mov [ebp-0C4h] eax +
lea edi [ebp-0C0h] +
lea esi [ebp-148h] +
push 10h  +
pop ecx  +
movs   +
mov eax [ebp-0B0h] +
mov ecx [ebp-0A0h] +
mov edx [ebp-90h] +
mov esi [ebp-0C0h] +
mov dword ptr [ebp-74h] 3 +
mov ebx [ebp-0BCh] +
lea edi [esi+edx] +
rol edi 7 +
xor eax edi +
lea edi [esi+eax] +
rol edi 9 +
xor ecx edi +
lea edi [ecx+eax] +
rol edi 0Dh +
xor edx edi +
lea edi [ecx+edx] +
ror edi 0Eh +
xor esi edi +
mov edi [ebp-0ACh] +
add ebx edi +
rol ebx 7 +
xor [ebp-9Ch] ebx +
mov ebx [ebp-9Ch] +
add edi ebx +
rol edi 9 +
xor [ebp-8Ch] edi +
mov edi ebx +
mov ebx [ebp-8Ch] +
add ebx edi +
mov edi [ebp-8Ch] +
rol ebx 0Dh +
xor [ebp-0BCh] ebx +
mov ebx [ebp-0BCh] +
add edi ebx +
ror edi 0Eh +
mov ebx [ebp-98h] +
xor [ebp-0ACh] edi +
mov edi [ebp-0A8h] +
add edi ebx +
rol edi 7 +
xor [ebp-88h] edi +
mov edi ebx +
mov ebx [ebp-88h] +
add edi ebx +
rol edi 9 +
xor [ebp-0B8h] edi +
mov edi ebx +
mov ebx [ebp-0B8h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0B8h] +
xor [ebp-0A8h] ebx +
mov ebx [ebp-0A8h] +
add edi ebx +
mov ebx [ebp-84h] +
ror edi 0Eh +
xor [ebp-98h] edi +
mov edi [ebp-94h] +
add edi ebx +
rol edi 7 +
xor [ebp-0B4h] edi +
mov edi ebx +
mov ebx [ebp-0B4h] +
add edi ebx +
rol edi 9 +
xor [ebp-0A4h] edi +
mov edi ebx +
mov ebx [ebp-0A4h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0A4h] +
xor [ebp-94h] ebx +
mov ebx [ebp-94h] +
add edi ebx +
ror edi 0Eh +
xor [ebp-84h] edi +
mov edi [ebp-0B4h] +
add edi esi +
rol edi 7 +
xor [ebp-0BCh] edi +
mov edi [ebp-0BCh] +
add edi esi +
rol edi 9 +
xor [ebp-0B8h] edi +
mov edi [ebp-0BCh] +
mov ebx [ebp-0B8h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0B8h] +
xor [ebp-0B4h] ebx +
mov ebx [ebp-0B4h] +
add ebx edi +
mov edi [ebp-0ACh] +
add edi eax +
ror ebx 0Eh +
xor esi ebx +
rol edi 7 +
xor [ebp-0A8h] edi +
mov ebx [ebp-0A8h] +
mov edi [ebp-0ACh] +
add ebx edi +
mov edi [ebp-0A8h] +
rol ebx 9 +
xor [ebp-0A4h] ebx +
mov ebx [ebp-0A4h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0A4h] +
xor eax ebx +
mov ebx [ebp-9Ch] +
add edi eax +
ror edi 0Eh +
xor [ebp-0ACh] edi +
mov edi [ebp-98h] +
add edi ebx +
rol edi 7 +
xor [ebp-94h] edi +
mov edi [ebp-98h] +
mov ebx [ebp-94h] +
add ebx edi +
rol ebx 9 +
xor ecx ebx +
mov edi [ebp-94h] +
mov ebx [ebp-88h] +
add edi ecx +
rol edi 0Dh +
xor [ebp-9Ch] edi +
mov edi [ebp-9Ch] +
add edi ecx +
ror edi 0Eh +
xor [ebp-98h] edi +
mov edi [ebp-84h] +
add edi ebx +
rol edi 7 +
xor edx edi +
mov edi [ebp-84h] +
add edi edx +
rol edi 9 +
xor [ebp-8Ch] edi +
mov edi [ebp-8Ch] +
add edi edx +
rol edi 0Dh +
xor [ebp-88h] edi +
mov edi [ebp-8Ch] +
mov ebx [ebp-88h] +
add ebx edi +
ror ebx 0Eh +
xor [ebp-84h] ebx +
dec dword ptr [ebp-74h]  +
jnz loc_1001C73  +
push 40h  +
mov [ebp-0B0h] eax +
mov [ebp-90h] edx +
xor eax eax +
mov [ebp-0A0h] ecx +
mov [ebp-0C0h] esi +
pop ebx  +
mov ecx [ebp+eax-148h] +
add [ebp+eax-0C0h] ecx +
add eax 4 +
cmp eax ebx +
jl loc_1001EE3  +
lea esi [ebp-0C0h] +
lea edi [ebp-48h] +
inc dword ptr [ebp-128h]  +
push 10h  +
pop ecx  +
movs   +
xor edx edx +
cmp [ebp-6Ch] ebx +
jbe loc_1001F49  +
mov eax [ebp-0C4h] +
mov esi [ebp-70h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-48h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-59h] al +
mov [ecx+esi] al +
inc edx  +
cmp edx ebx +
jb loc_1001F1F  +
sub [ebp-6Ch] ebx +
add [ebp-80h] ebx +
add esi ebx +
add [ebp-0D8h] ebx +
mov [ebp-70h] esi +
jmp loc_1001C43  +
***
cmp [ebp-6Ch] edx +
jbe loc_1001F73  +
mov esi [ebp-0D8h] +
mov edi [ebp-80h] +
lea eax [ebp-48h] +
sub esi eax +
sub edi eax +
lea ecx [ebp+edx-48h] +
mov al [ecx+esi] +
xor al [ecx] +
xor [ebp-59h] al +
mov [ecx+edi] al +
inc edx  +
cmp edx [ebp-6Ch] +
jb loc_1001F5E  +
mov esi [ebp-0CCh] +
mov edi offset __ImageBase +
movzx eax byte ptr [ebp-59h] +
mov ecx [ebp-78h] +
movzx ecx byte ptr [ecx+8] +
sub eax ecx +
jz loc_1002024  +
call sub_100D9B4  +
mov edx 0FFFFF000h +
mov edi eax +
mov eax [ebp-0DCh] +
mov dword ptr [eax+8] offset sub_1016D68 +
lea ecx [eax+0Ch] +
and ecx 0FFFFFFFCh +
lea esi [ecx+0FFFh] +
and edi edx +
and esi edx +
mov edx 0FFFFh +
xor eax eax +
mov ebx dword_1042FC4 +
imul ebx ebx +
add ebx 269EC3h +
mov dword_1042FC4 ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_1001FC1  +
mov ebx 0FFFFh +
div  ebx +
inc edx  +
cmp ecx esi +
mov eax [ebp-0C8h] +
mov [eax+4] edi +
mov [eax] edx +
mov eax ecx +
mov dword ptr [ebp-0C8h] 0 +
jnb loc_100201A  +
mov ecx [ebp-0C8h] +
mov [eax] ecx +
add eax 4 +
cmp eax esi +
jb loc_100200B  +
mov eax offset sub_1016D68 +
jmp loc_100210E  +
mov ecx ds:off_10051BC +
mov eax [ebp-0D4h] +
sub eax [ebp-7Ch] +
mov [ebp-0CCh] eax +
sub edi ecx +
mov [ebp-78h] edi +
jnz loc_1002048  +
test eax eax +
jz loc_10020F9  +
mov edi [ebp-7Ch] +
mov ebx [ebp-0D0h] +
lea eax [esi+ebx] +
mov ecx ds:dword_1001168 +
sub edi [ebp-0D4h] +
xor esi esi +
mov [ebp-0C8h] eax +
dec ecx  +
js loc_1002092  +
lea eax [ecx+esi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100116C[eax*4] +
and edx 0FFFFFFFh +
cmp ebx edx +
jnb loc_1002089  +
lea ecx [eax-1] +
jmp loc_100208E  +
jbe loc_1002096  +
lea esi [eax+1] +
cmp ecx esi +
jge loc_100206B  +
mov ebx esi +
jmp loc_10020F1  +
mov ebx eax +
jmp loc_10020F1  +
mov eax ds:dword_100116C[ebx*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-0C8h] +
jnb loc_10020F9  +
lea esi __ImageBase[ecx+edi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_10020E1  +
dec ecx  +
jz loc_10020D9  +
dec ecx  +
jnz loc_10020EA  +
mov edx [ebp-78h] +
jmp loc_10020EA  +
mov edx [ebp-0CCh] +
jmp loc_10020EA  +
mov edx [ebp-78h] +
sub edx [ebp-0CCh] +
dec eax  +
dec eax  +
jnz loc_10020F0  +
add [esi] edx +
inc ebx  +
cmp ebx ds:dword_1001168 +
jb loc_100209A  +
mov eax ds:dword_1021358 +
mov eax 0EBF18E10h +
mov ecx [ebp-7Ch] +
mov eax [ebp-0FCh] +
add eax ecx +
mov ecx [ebp-0DCh] +
mov [ecx+8] eax +
mov ecx [ebp-4] +
xor ecx ebp +
pop edi  +
pop esi  +
pop ebx  +
call sub_1026F89  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
mov dword ptr [eax] 40000015h +
mov [ebp-8] eax +
mov eax [ebp+10h] +
push 0  +
mov [ebp-4] eax +
call ds:SetUnhandledExceptionFilter  +
lea eax [ebp-8] +
push eax  +
call ds:UnhandledExceptionFilter  +
push 3  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
int 3  +
nop   +
add ch [edx+5CB3E5B0h] +
cmp [ebp-78h] esi +
sbb ebp [eax] +
jmp loc_10045FD  +
xor [edx+5E441ADEh] bh +
jno loc_1004610  +
retf 86D1h  +
***
shr dword ptr [esi-2E50CA9Eh] cl +
or eax 5E338458h +
stc   +
xchg eax esi +
scas   +
pop edx  +
push edx  +
push ecx  +
retn   +
***
push esp  +
fstp  tbyte ptr [ebx] +
or [edx] esp +
add eax 0AF5A8142h +
pop ebx  +
leave   +
sub eax 0D74873Ch +
and eax 9EAB54ADh +
cmp edx eax +
test al 28h +
push ds  +
in al dx +
and dl [edx+23h] +
jo loc_1004644  +
or al 32h +
xor al 37h +
jz loc_1004640  +
sub eax 2F1CE228h +
add edx ebp +
fldcw  word ptr [edx+199D1DFAh] +
js near ptr loc_10045D0+5  +
push edi  +
sbb al dh +
pop ss  +
pushf   +
inc esp  +
jmp near ptr loc_10046B9+6  +
lahf   +
jp loc_1004661  +
push 0E05407B0h  +
cmp [esi] ebp +
icebp   +
pop ecx  +
nop   +
push 0BA0A1D8Eh  +
wait   +
aad  0F7h +
hlt   +
sbb edi eax +
fld  tbyte ptr [edx-41h] +
jl loc_10045F2  +
inc eax  +
xor esp [edi+4Ch] +
cmp ebx ecx +
dec eax  +
mov bh 0D9h +
dec esi  +
out 0D0h al +
mov bh 20h +
add [eax-29h] bl +
call near ptr 3F38D0D9h  +
cmc   +
leave   +
pop dword ptr [edi+21h]  +
mov eax 85E21EEFh +
js loc_10046CB  +
and byte ptr [edx+60h] 0 +
sbb cl ch +
std   +
sbb [edx-45h] bh +
pop ecx  +
pop ss  +
mov esp 42E6292Dh +
das   +
cmp eax 8D1D8713h +
ins  dx +
xchg eax edx +
out dx al +
pop eax  +
mov eax 0C0286D31h +
lods   +
push esp  +
push ss  +
cmps   +
xor eax esp +
mov dword ptr [ecx-24D9E7C4h] 0AE1ED523h +
fcom  qword ptr [edi+43h] +
mov ds word ptr [ebx+eax*8-43C07D08h] +
jp loc_10046A9  +
sahf   +
adc al 0C1h +
inc ebp  +
jbe loc_100471A  +
mov fs word ptr [edi+54h] +
add dh [esi] +
dec eax  +
add eax 0D3B9BC3Ah +
test eax 1E4B80B8h +
iret   +
***
push ebx  +
sbb ebx ds:0F53B792Fh +
jb loc_1004771  +
inc ebx  +
sub [ebp-79h] cl +
retf   +
***
or [ecx] bl +
fmul  qword ptr [esi+72h] +
add eax edi +
xor ch [ebx] +
shl dword ptr [ebx+4] cl +
add dl dl +
ficom  word ptr [ecx-45D5EB30h] +
add bh cl +
popa   +
wait   +
cmp bl cl +
mov ecx 512AF28h +
dec esp  +
push cs  +
out dx al +
push ecx  +
rcl byte ptr ds:0F3112C53h cl +
sbb esp esi +
pop esi  +
ins  dx +
push es  +
mov ds:0E12209D1h eax +
clc   +
xchg eax esp +
xor eax 0FD8FAB42h +
stc   +
ja near ptr loc_10047AB+4  +
pop ds  +
outs   +
cmp ds:0A393D46Eh dl +
setalc   +
loopne loc_10047FE  +
xor [ecx-70h] al +
sbb eax 3EB7D713h +
jmp loc_10047C9  +
sub ebp [ebp+edx*8+0D0C47C1h] +
inc ebp  +
push cs  +
rcr byte ptr [edi-20D4E371h] 0Ah +
sub ecx edx +
mov dh 29h +
xchg ah [esi+1C746606h] +
cmp [ecx] esp +
sbb al 0Eh +
sbb esp ebx +
mov ebx 19018170h +
mov al 89h +
mov ebp 0BF09BE2Ch +
std   +
pop edx  +
sbb eax 379536BFh +
mov ds:3DD5B003h eax +
add ebx [esi+780CD08Ah] +
outs   +
das   +
xchg eax esp +
push edx  +
jg near ptr loc_100485A+1  +
push cs  +
jg loc_100484B  +
push ds  +
pusha   +
imul eax [esp+ecx*4] +
sbb [esi-2EE2BA9Ch] ebp +
pop edi  +
loopne loc_1004868  +
retf 6B5Fh  +
***
push eax  +
push ss  +
daa   +
pop es  +
mov dl 9Eh +
bswap ebp  +
inc edx  +
test al 0B1h +
mov byte ptr [edx] 0F2h +
lea eax [esi] +
aas   +
push 1A780EF7h  +
cmp [ebx+edi+46F66D6Bh] bl +
jl loc_1004844  +
or eax 0DF6B2DBEh +
add bh dh +
retn 0B699h  +
***
sbb eax 0EAB0744h +
push ds  +
retf 5E97h  +
***
adc edi eax +
retn   +
***
adc ebx [ebx-1A0A44F0h] +
retf   +
***
pop ds  +
sbb [eax+3DE5FF49h] ecx +
retf   +
***
das   +
mov gs:0EAAE7742h al +
sbb esi ds:0D4EC00Bh +
pushf   +
push ds  +
xchg eax esi +
retf   +
***
sbb ah bl +
wait   +
push ecx  +
jo loc_1004EC8  +
stc   +
inc eax  +
retf 0E740h  +
***
into   +
xor byte ptr [esi+74h] 66h +
sbb eax 4A28EE96h +
test al 21h +
pop eax  +
setalc   +
mov cl 5Bh +
jle loc_1004F40  +
mov edx 0B7A7B3A8h +
or al 4 +
sub al 53h +
fcomp  dword ptr [eax-5511F41Ah] +
or ch ah +
pop edx  +
jno loc_1004EED  +
mov dl 48h +
adc edi edi +
xchg eax edx +
cdq   +
jns near ptr loc_1004F3D+1  +
add [ecx] eax +
inc eax  +
inc edi  +
sub bl ah +
adc cl [ebx+ecx*8+5198D29h] +
js loc_1004F18  +
js near ptr loc_1004F25+2  +
sub esp [eax+edx*8+33112308h] +
inc edx  +
sbb al 58h +
pushf   +
push 56CA9E0Fh  +
mul  byte ptr [edx+12h] +
push 0Bh  +
sub eax 654026FDh +
nop   +
xchg eax edi +
pop ds  +
enter 0FFFFBB20h 95h +
or [esi+65h] edi +
sbb al 48h +
dec edi  +
mov byte ptr [eax] 0AFh +
retf   +
***
inc ebx  +
or ebx [ecx-4Ch] +
push edi  +
inc eax  +
push es  +
pop esp  +
jnp loc_1004F8D  +
pop edi  +
mov cl 31h +
pop es  +
push ebx  +
retf 0E821h  +
***
mov word ptr [edx-70h] ss +
or ecx ebp +
call far ptr 7A9Eh:524EFEDEh  +
push ecx  +
mov ax 6606h +
outs   +
test [esi+66DEA05Ch] bl +
cmps   +
cmp bh [ebx-29D5B050h] +
add [esi+78262F12h] ebx +
sub ebx [esi] +
or esp esp +
mov dl 0D4h +
sbb eax 0A51985F3h +
cmc   +
push es  +
push cs  +
push dword ptr [eax+74C504E6h]  +
setalc   +
or eax [edx+9912449h] +
retn 0BA0Ah  +
***
adc esi ebx +
jmp loc_1005061  +
pop eax  +
ins  dx +
cmp [edx-7Ch] eax +
mov ebp 524416B4h +
push cs  +
xchg al [edi+edx*2] +
or bl [eax+12204DF9h] +
call far ptr 8118h:7F2E50A7h  +
sbb al 0ACh +
imul edx [ebx] +
jle near ptr dword_1005028+3  +
xchg eax ebp +
jl loc_10050CD  +
pop esp  +
nop   +
lods   +
sal sp 0E0h +
sub al 60h +
and esi esi +
add ch [eax] +
test dword ptr [ebp+65h] 0AC7C90FEh +
sbb [ebx+0Ch] ah +
mov dh 0 +
fucomip st st(5) +
add dword ptr [eax] 0FFFFFFCDh +
loop loc_1005119  +
mov dh 0FEh +
sub [eax+40C5A44Dh] eax +
sub [ebp-22C08A15h] bl +
sbb al 46h +
jns loc_1005108  +
adc ebx esp +
adc esp [ebp+edi+9] +
or esp [ecx+eax-39A8698h] +
loope near ptr loc_100510E+1  +
inc esp  +
into   +
test dword ptr [ebp-7Ah] 628FD69Dh +
dec dword ptr [edx+6]  +
or byte ptr [edx+11CCCB76h] 6Ch +
dec ebp  +
mov esi 4E523034h +
fdivr  dword ptr [esi+6FA2AF29h] +
cmp [esi-62h] ah +
pushf   +
jl near ptr loc_100511D+3  +
fild  qword ptr [ecx] +
imul ebp [esi-1] +
and esi [edi+73074D17h] +
add eax [ecx+edx*2] +
xchg eax esp +
add edx [eax+6] +
sbb eax 19521ABh +
pop ecx  +
dec esi  +
out dx eax +
mov dword ptr [edi+esi*2+79DCEC89h] 0D5E1C7Fh +
cld   +
outs   +
sbb [esp+ebp*8] bh +
inc edi  +
push eax  +
mov ds:7FB9FA80h eax +
mov esp 2F393587h +
sub al 28h +
jmp locret_1005192  +
push ss  +
lds ebp [eax-1Ch] +
nop   +
adc eax 8214F411h +
mov ch 35h +
and eax [eax-6FF8866Ah] +
iret   +
***
adc ebx [esi] +
retn   +
***
and bh [ecx-68h] +
stc   +
sub cl [edi-6Dh] +
retf   +
***
mov ebp 80601373h +
retf 0E82h  +
***
sbb eax ds:1FD8A5EFh +
mov al ds:6ACCEA6Ah +
and al 0Dh +
add al 0C7h +
jle near ptr locret_1005501+1  +
and bl ch +
push ecx  +
push es  +
mov ch 0DDh +
add ds:11EE8FB9h cl +
retn 0D37Ah  +
***
add [edx] esi +
inc esi  +
sub eax 946CA2C6h +
and byte ptr [edi+1Ch] 25h +
and ah [ebx] +
fild  dword ptr [edx+65h] +
dec edi  +
sbb byte ptr [eax-352484DBh] 26h +
retf 6CDEh  +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-10h] eax +
mov [ebp-24h] ecx +
mov [ebp-20h] edx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] esi +
mov [ebp-14h] edi +
lea esi [ebp+4] +
mov eax [esi+4] +
mov ecx [esi+8] +
sub esi 4 +
mov [ebp-0Ch] ecx +
movzx ecx byte ptr [eax] +
mov edi offset Address +
and ecx 0Fh +
mov [ebp-8] ecx +
lea ecx [eax+1] +
lea eax [ecx-1] +
mov [ebp-4] eax +
cmp eax edi +
jb loc_1009280  +
mov edx ds:dword_10049B0 +
mov ebx ds:dword_1021358 +
imul edx ebx +
lea edx Address[edx] +
cmp eax edx +
jnb loc_1009280  +
mov ebx ds:dword_1021358 +
sub eax edi +
xor edx edx +
div  ebx +
mov edx ds:dword_1021358 +
imul edx eax +
lea ebx Address[edx] +
mov eax [ebp-4] +
jmp loc_1009282  +
xor ebx ebx +
test ebx ebx +
jnz loc_100928D  +
and eax 0FFFF0000h +
mov ebx eax +
sub ecx ebx +
lea eax [ecx-40h] +
test eax eax +
jge loc_1009298  +
xor eax eax +
add eax ebx +
push 40h  +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100929D  +
mov eax 99E7D606h +
cmp ebx edi +
jb loc_10092E4  +
mov eax ds:dword_10049B0 +
mov ecx ds:dword_1021358 +
imul eax ecx +
lea eax Address[eax] +
cmp ebx eax +
jnb loc_10092E4  +
mov eax ebx +
mov ecx ds:dword_1021358 +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_1021358 +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_10092E6  +
xor ecx ecx +
test ecx ecx +
jz loc_100930B  +
mov ecx ds:dword_1021358 +
mov eax ebx +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_10049B0 +
mov dword_10430D4[eax*4] 0B4C4h +
jmp loc_1009328  +
call ds:__imp_GetLastError  +
push 8000h  +
push 0  +
push ebx  +
mov edi eax +
call ds:VirtualFree  +
push edi  +
call ds:SetLastError  +
mov eax [ebp-8] +
mov eax ds:off_101D350[eax*4] +
mov [esi+8] eax +
mov eax [ebp-0Ch] +
mov [esi+0Ch] eax +
mov edi [ebp-14h] +
mov ecx [ebp-24h] +
mov edx [ebp-20h] +
mov ebx [ebp-1Ch] +
mov eax [ebp-10h] +
mov esi [ebp-18h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-10h] eax +
mov [ebp-24h] ecx +
mov [ebp-8] edx +
mov [ebp-1Ch] ebx +
lea ebx [ebp+4] +
mov [ebp-0Ch] esi +
sub ebx 4 +
mov [ebp-20h] edi +
mov [ebp-14h] ebx +
mov eax [ebx] +
mov [ebp-18h] eax +
mov eax [ebx+8] +
test byte ptr [eax+0Ch] 2 +
jz loc_10093C3  +
mov ecx [eax+10h] +
neg ecx  +
sbb ecx ecx +
xor esi esi +
and ecx offset __ImageBase +
cmp [eax+1Ch] esi +
jz loc_10093AA  +
mov edx [eax+14h] +
mov edx ds:dword_10045C0[edx*4] +
mov edi [eax+4] +
imul edx [ebp+edi*4-24h] +
jmp loc_10093AC  +
xor edx edx +
cmp [eax+18h] esi +
jz loc_10093B7  +
mov esi [eax] +
mov esi [ebp+esi*4-24h] +
mov edi [eax+8] +
add edi esi +
add edi edx +
mov ecx [edi+ecx] +
jmp loc_10093C9  +
mov ecx [eax] +
mov ecx [ebp+ecx*4-24h] +
mov edx offset Address +
lea esi [eax+20h] +
mov [ebp-4] ecx +
lea edi [esi-1] +
cmp edi edx +
jb loc_1009412  +
mov eax ds:dword_10049B0 +
mov ecx ds:dword_1021358 +
imul eax ecx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_1009412  +
mov eax edi +
sub eax edx +
mov ecx ds:dword_1021358 +
xor edx edx +
div  ecx +
mov edx ds:dword_1021358 +
imul edx eax +
lea eax Address[edx] +
jmp loc_1009414  +
xor eax eax +
test eax eax +
jnz loc_1009420  +
and edi 0FFFF0000h +
mov eax edi +
sub esi eax +
lea edx [esi-40h] +
test edx edx +
jge loc_100942B  +
xor edx edx +
add edx eax +
push 40h  +
pop ecx  +
mov byte ptr [edx] 0 +
inc edx  +
dec ecx  +
jnz loc_1009430  +
mov ecx [ebp-4] +
push eax  +
lea eax [ebp-24h] +
push eax  +
push ebx  +
call sub_10151CC  +
mov [ebx+8] eax +
mov ecx [ebp-24h] +
mov esi [ebp-0Ch] +
mov edx [ebp-8] +
mov eax [ebp-10h] +
mov edi [ebp-20h] +
mov ebx [ebp-1Ch] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 18h +
mov [ebp-4] eax +
mov [ebp-18h] ecx +
mov [ebp-14h] edx +
lea edx [ebp+4] +
mov [ebp-10h] ebx +
mov [ebp-0Ch] esi +
mov [ebp-8] edi +
mov eax [edx] +
mov esi [edx+4] +
sub edx 4 +
mov ecx [esi+4] +
and ecx 1Fh +
cmp ecx 4 +
jnz loc_100949C  +
and al 80h +
xor ecx ecx +
cmp al 80h +
setz cl  +
jmp loc_10096A2  +
cmp ecx 8 +
jnz loc_10094DC  +
test al 1 +
jnz loc_10094AD  +
test al 40h +
jz loc_10096AA  +
add dword ptr [edx+8] 10h +
mov eax [esi+8] +
lea ecx [ebp-18h] +
and eax 0FFFFFFFh +
add eax offset __ImageBase +
push ecx  +
push edx  +
call eax  +
mov edi [ebp-8] +
mov eax [ebp-4] +
mov esi [ebp-0Ch] +
mov ebx [ebp-10h] +
mov ecx [ebp-18h] +
mov edx [ebp-14h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
cmp ecx 3 +
jnz loc_10094F3  +
test al 1 +
jnz loc_10096AA  +
test eax 800h +
jmp loc_10096A4  +
test ecx ecx +
jnz loc_1009506  +
shr eax 0Bh +
not eax  +
and eax 1 +
mov ecx eax +
jmp loc_10096A2  +
cmp ecx 5 +
jnz loc_1009510  +
shr eax 6 +
jmp loc_10094FA  +
***
cmp ecx 0Ah +
jnz loc_1009529  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
shr ecx 7 +
not ecx  +
and ecx 1 +
jmp loc_10096A2  +
cmp ecx 16h +
jz loc_10094FA  +
cmp ecx 10h +
jnz loc_100954B  +
test al al +
js loc_10094AD  +
test eax 800h +
jnz loc_10096AA  +
jmp loc_10094AD  +
***
cmp ecx 0Ch +
jnz loc_100955B  +
and al 40h +
xor ecx ecx +
cmp al 40h +
jmp loc_1009494  +
***
cmp ecx 17h +
jz loc_100950B  +
cmp ecx 12h +
jnz loc_100956A  +
shr eax 7 +
jmp loc_10094FA  +
***
cmp ecx 14h +
jz loc_1009550  +
cmp ecx 9 +
jnz loc_1009579  +
shr eax 2 +
jmp loc_10094FA  +
***
cmp ecx 18h +
jnz loc_100958C  +
xor ebx ebx +
inc ebx  +
and al bl +
xor ecx ecx +
cmp al bl +
jmp loc_1009494  +
***
cmp ecx 11h +
jnz loc_10095A6  +
test al 1 +
jnz loc_10096AA  +
test al 4 +
jnz loc_10094AD  +
jmp loc_10096AA  +
cmp ecx 0Eh +
jnz loc_10095BE  +
mov ecx 800h +
and eax ecx +
sub eax ecx +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_10094FF  +
***
cmp ecx 6 +
jnz loc_10095CE  +
and al 4 +
xor ecx ecx +
cmp al 4 +
jmp loc_1009494  +
***
cmp ecx 0Bh +
jnz loc_10095E2  +
test al 1 +
jnz loc_10096AA  +
test al 40h +
jmp loc_10096A4  +
cmp ecx 0Dh +
jnz loc_1009603  +
test al 40h +
jnz loc_10094AD  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
test cl cl +
jns loc_10096AA  +
jmp loc_10094AD  +
***
xor ebx ebx +
inc ebx  +
cmp ecx ebx +
jnz loc_1009620  +
test al 40h +
jnz loc_10094AD  +
mov ecx eax +
shr ecx 2 +
xor ecx eax +
test cl bl +
jmp loc_10094A7  +
***
cmp ecx 2 +
jnz loc_1009634  +
test al 40h +
jz loc_10094AD  +
test al 4 +
jmp loc_10094A7  +
***
cmp ecx 0Fh +
jnz loc_1009643  +
xor ecx ecx +
cmp [ebp-18h] ecx +
jmp loc_1009494  +
***
cmp ecx 1Ah +
jnz loc_100965D  +
test al 40h +
jnz loc_10096AA  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
test cl cl +
jns loc_10094AD  +
jmp loc_10096AA  +
cmp ecx 13h +
jnz loc_100966C  +
shr eax 4 +
and eax ebx +
jmp loc_10094FF  +
***
cmp ecx 19h +
jnz loc_1009681  +
test al 4 +
jz loc_10096AA  +
mov ecx eax +
shr ecx 5 +
xor ecx eax +
test cl 40h +
jmp loc_10096A4  +
cmp ecx 15h +
jnz loc_100968D  +
shr eax 0Ah +
not eax  +
jmp loc_1009665  +
***
cmp ecx 7 +
jnz loc_10096A0  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
shr ecx 7 +
and ecx ebx +
jmp loc_10096A2  +
xor ecx ecx +
test ecx ecx +
jz loc_10094AD  +
mov eax [esi+0Ch] +
and eax 3Fh +
add [edx+8] eax +
mov eax [esi] +
jmp loc_10094B4  +
***
push edi  +
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-10h] eax +
mov [ebp-24h] ecx +
mov [ebp-20h] edx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] esi +
lea esi [ebp+4] +
mov [ebp-14h] edi +
mov edi offset Address +
mov eax [esi+8] +
lea ecx [eax+4] +
mov ebx [eax] +
lea eax [ecx-1] +
sub esi 4 +
shr ebx 1 +
and ebx 0FFFFFFFh +
add ebx offset __ImageBase +
cmp eax edi +
mov [ebp-0Ch] ebx +
mov [ebp-8] eax +
jb loc_1009743  +
mov edx ds:dword_1021358 +
mov eax ds:dword_10049B0 +
imul eax edx +
lea edx Address[eax] +
mov eax [ebp-8] +
cmp eax edx +
jnb loc_1009743  +
sub eax edi +
mov ebx ds:dword_1021358 +
xor edx edx +
div  ebx +
mov ebx [ebp-0Ch] +
mov edx ds:dword_1021358 +
imul edx eax +
lea eax Address[edx] +
mov [ebp-4] eax +
mov eax [ebp-8] +
jmp loc_1009747  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-4] 0 +
jnz loc_1009755  +
and eax 0FFFF0000h +
mov [ebp-4] eax +
mov edx [ebp-4] +
sub ecx edx +
lea eax [ecx-40h] +
test eax eax +
jge loc_1009763  +
xor eax eax +
add eax edx +
push 40h  +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1009768  +
mov eax 40D74BF4h +
cmp [ebp-4] edi +
jb loc_10097B2  +
mov eax ds:dword_10049B0 +
mov ecx ds:dword_1021358 +
imul eax ecx +
lea eax Address[eax] +
cmp [ebp-4] eax +
jnb loc_10097B2  +
mov eax [ebp-4] +
sub eax edi +
mov ecx ds:dword_1021358 +
xor edx edx +
div  ecx +
mov ecx ds:dword_1021358 +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_10097B4  +
xor ecx ecx +
test ecx ecx +
jz loc_10097DA  +
mov ecx ds:dword_1021358 +
mov eax [ebp-4] +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_10049B0 +
mov dword_10430D4[eax*4] 0B4C4h +
jmp loc_10097F9  +
call ds:__imp_GetLastError  +
push 8000h  +
push 0  +
mov edi eax +
push dword ptr [ebp-4]  +
call ds:VirtualFree  +
push edi  +
call ds:SetLastError  +
mov [esi+8] ebx +
add dword ptr [esi+0Ch] 4 +
mov ecx [ebp-24h] +
mov eax [ebp-10h] +
mov esi [ebp-18h] +
mov ebx [ebp-1Ch] +
mov edx [ebp-20h] +
mov edi [ebp-14h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
push edi  +
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-10h] eax +
mov [ebp-24h] ecx +
mov [ebp-20h] edx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] esi +
lea esi [ebp+4] +
mov [ebp-14h] edi +
mov eax [esi+8] +
lea ecx [eax+4] +
mov ebx [eax] +
sub esi 4 +
lea eax [ecx-1] +
mov edi offset Address +
shr ebx 2 +
and ebx 0FFFFFFFh +
add ebx offset __ImageBase +
cmp eax edi +
mov [ebp-0Ch] ebx +
mov [ebp-8] eax +
jb loc_10098AD  +
mov eax ds:dword_10049B0 +
mov edx ds:dword_1021358 +
imul eax edx +
lea edx Address[eax] +
mov eax [ebp-8] +
cmp eax edx +
jnb loc_10098AD  +
mov ebx ds:dword_1021358 +
sub eax edi +
xor edx edx +
div  ebx +
mov edx ds:dword_1021358 +
imul edx eax +
mov ebx [ebp-0Ch] +
lea eax Address[edx] +
mov [ebp-4] eax +
mov eax [ebp-8] +
jmp loc_10098B1  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-4] 0 +
jnz loc_10098BF  +
and eax 0FFFF0000h +
mov [ebp-4] eax +
mov edx [ebp-4] +
sub ecx edx +
lea eax [ecx-40h] +
test eax eax +
jge loc_10098CD  +
xor eax eax +
add eax edx +
push 40h  +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_10098D2  +
mov eax 0E914177Dh +
cmp [ebp-4] edi +
jb loc_100991C  +
mov eax ds:dword_10049B0 +
mov ecx ds:dword_1021358 +
imul eax ecx +
lea eax Address[eax] +
cmp [ebp-4] eax +
jnb loc_100991C  +
mov eax [ebp-4] +
mov ecx ds:dword_1021358 +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_1021358 +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_100991E  +
xor ecx ecx +
test ecx ecx +
jz loc_1009944  +
mov ecx ds:dword_1021358 +
mov eax [ebp-4] +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_10049B0 +
mov dword_10430D4[eax*4] 0B4C4h +
jmp loc_1009963  +
call ds:__imp_GetLastError  +
mov edi eax +
push 8000h  +
push 0  +
push dword ptr [ebp-4]  +
call ds:VirtualFree  +
push edi  +
call ds:SetLastError  +
mov [esi+8] ebx +
add dword ptr [esi+0Ch] 4 +
mov ecx [ebp-24h] +
mov ebx [ebp-1Ch] +
mov edx [ebp-20h] +
mov esi [ebp-18h] +
mov eax [ebp-10h] +
mov edi [ebp-14h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-10h] eax +
mov [ebp-24h] ecx +
mov [ebp-20h] edx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] esi +
mov [ebp-14h] edi +
mov esi offset Address +
lea ebx [ebp+4] +
mov eax [ebx+4] +
mov ecx [eax] +
sub ebx 4 +
shr ecx 1 +
and ecx 0FFFFFFFh +
add ecx offset __ImageBase +
mov [ebp-0Ch] ecx +
mov [ebp-8] ebx +
lea ecx [eax+4] +
lea edi [ecx-1] +
cmp edi esi +
jb loc_1009A05  +
mov eax ds:dword_10049B0 +
mov edx ds:dword_1021358 +
imul eax edx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_1009A05  +
mov eax edi +
sub eax esi +
mov ebx ds:dword_1021358 +
xor edx edx +
div  ebx +
mov ebx [ebp-8] +
mov edx ds:dword_1021358 +
imul edx eax +
lea eax Address[edx] +
mov [ebp-4] eax +
jmp loc_1009A09  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-4] 0 +
jnz loc_1009A18  +
and edi 0FFFF0000h +
mov [ebp-4] edi +
mov edx [ebp-4] +
sub ecx edx +
lea eax [ecx-40h] +
test eax eax +
jge loc_1009A26  +
xor eax eax +
push 40h  +
pop ecx  +
add eax edx +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1009A2B  +
mov eax 0B4AE136Ch +
mov edi [ebp-4] +
cmp edi esi +
jb loc_1009A75  +
mov ecx ds:dword_1021358 +
mov eax ds:dword_10049B0 +
imul eax ecx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_1009A75  +
mov eax edi +
mov ecx ds:dword_1021358 +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_1021358 +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_1009A77  +
xor ecx ecx +
test ecx ecx +
jz loc_1009A9C  +
mov ecx ds:dword_1021358 +
mov eax edi +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_10049B0 +
mov dword_10430D4[eax*4] 0B4C4h +
jmp loc_1009AB9  +
call ds:__imp_GetLastError  +
mov esi eax +
push 8000h  +
push 0  +
push edi  +
call ds:VirtualFree  +
push esi  +
call ds:SetLastError  +
mov eax [ebp-0Ch] +
mov [ebx+8] eax +
mov edx [ebp-20h] +
mov ebx [ebp-1Ch] +
mov eax [ebp-10h] +
mov ecx [ebp-24h] +
mov esi [ebp-18h] +
mov edi [ebp-14h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-10h] eax +
mov [ebp-24h] ecx +
mov [ebp-20h] edx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] esi +
mov esi offset Address +
lea ebx [ebp+4] +
mov [ebp-14h] edi +
mov eax [ebx+4] +
mov ecx [eax] +
sub ebx 4 +
shr ecx 2 +
and ecx 0FFFFFFFh +
add ecx offset __ImageBase +
mov [ebp-0Ch] ecx +
lea ecx [eax+4] +
mov [ebp-8] ebx +
lea edi [ecx-1] +
cmp edi esi +
jb loc_1009B5B  +
mov edx ds:dword_1021358 +
mov eax ds:dword_10049B0 +
imul eax edx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_1009B5B  +
mov ebx ds:dword_1021358 +
mov eax edi +
sub eax esi +
xor edx edx +
div  ebx +
mov edx ds:dword_1021358 +
imul edx eax +
mov ebx [ebp-8] +
lea eax Address[edx] +
mov [ebp-4] eax +
jmp loc_1009B5F  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-4] 0 +
jnz loc_1009B6E  +
and edi 0FFFF0000h +
mov [ebp-4] edi +
mov edx [ebp-4] +
sub ecx edx +
lea eax [ecx-40h] +
test eax eax +
jge loc_1009B7C  +
xor eax eax +
push 40h  +
pop ecx  +
add eax edx +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1009B81  +
mov eax 2C1A323Dh +
mov edi [ebp-4] +
cmp edi esi +
jb loc_1009BCB  +
mov eax ds:dword_10049B0 +
mov ecx ds:dword_1021358 +
imul eax ecx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_1009BCB  +
mov eax edi +
mov ecx ds:dword_1021358 +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_1021358 +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_1009BCD  +
xor ecx ecx +
test ecx ecx +
jz loc_1009BF2  +
mov ecx ds:dword_1021358 +
mov eax edi +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_10049B0 +
mov dword_10430D4[eax*4] 0B4C4h +
jmp loc_1009C0F  +
call ds:__imp_GetLastError  +
push 8000h  +
mov esi eax +
push 0  +
push edi  +
call ds:VirtualFree  +
push esi  +
call ds:SetLastError  +
mov eax [ebp-0Ch] +
mov [ebx+8] eax +
mov ebx [ebp-1Ch] +
mov ecx [ebp-24h] +
mov edi [ebp-14h] +
mov edx [ebp-20h] +
mov esi [ebp-18h] +
mov eax [ebp-10h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
push edi  +
pushf   +
push ebp  +
mov ebp esp +
sub esp 158h +
mov [ebp-144h] eax +
lea eax [ebp+4] +
mov [ebp-158h] ecx +
sub eax 4 +
mov ecx 0FFFFFFFh +
mov [ebp-154h] edx +
mov [ebp-150h] ebx +
mov [ebp-14Ch] esi +
mov [ebp-148h] edi +
mov edi offset __ImageBase +
mov [ebp-0D4h] eax +
add eax 0Ch +
mov [ebp-0D8h] eax +
mov eax [eax] +
mov edx [eax+8] +
mov esi [eax+4] +
mov ebx [eax] +
add eax 0Ch +
and ebx ecx +
and edx ecx +
and esi ecx +
add ebx edi +
mov [ebp-0CCh] ebx +
mov [ebp-100h] edx +
lea ecx [eax-1] +
cmp ecx offset Address +
mov [ebp-0C4h] esi +
mov [ebp-78h] eax +
mov [ebp-80h] ecx +
jb loc_1009CF6  +
mov edx ds:dword_1021358 +
mov ecx ds:dword_10049B0 +
imul ecx edx +
lea edx Address[ecx] +
mov ecx [ebp-80h] +
cmp ecx edx +
jnb loc_1009CF6  +
mov eax ecx +
sub eax offset Address +
mov ecx ds:dword_1021358 +
xor edx edx +
div  ecx +
mov ecx ds:dword_1021358 +
imul ecx eax +
mov eax [ebp-78h] +
lea edx Address[ecx] +
mov ecx [ebp-80h] +
jmp loc_1009CF8  +
xor edx edx +
test edx edx +
mov [ebp-68h] edx +
jnz loc_1009D0A  +
and ecx 0FFFF0000h +
mov edx ecx +
mov [ebp-68h] edx +
sub eax edx +
add eax 0FFFFFFC0h +
jns loc_1009D13  +
xor eax eax +
push 40h  +
pop ecx  +
add eax edx +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1009D18  +
lea eax [esi+ebx] +
mov [ebp-78h] eax +
mov eax ds:dword_1021358 +
sub eax esi +
mov [ebp-0C8h] ebx +
lea ecx [eax+1] +
sub [ebp-0C8h] edi +
mov [ebp-64h] ecx +
xor eax eax +
test ecx ecx +
jz loc_1009D6E  +
mov edx dword_1042FC4 +
shr dword ptr [ebp-64h] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_1042FC4 edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp dword ptr [ebp-64h] 0 +
jnz loc_1009D44  +
xor edx edx +
div  ecx +
mov eax [ebp-68h] +
push esi  +
add eax edx +
push dword ptr [ebp-0C8h]  +
mov [ebp-7Ch] eax +
mov eax 60647B2Eh +
mov eax [ebp-78h] +
pop ecx  +
test esi esi +
pop ecx  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-0DCh] eax +
mov eax [ebp-7Ch] +
mov [ebp-0E0h] ecx +
mov byte ptr [ebp-55h] 0 +
mov [ebp-68h] esi +
mov [ebp-0D0h] ebx +
mov [ebp-80h] eax +
jz loc_100A4C5  +
lea esi [ebp-0E0h] +
mov eax 49806D9Dh +
mov eax [ebp-0DCh] +
mov ebx [ebp-0E0h] +
mov ecx ds:off_10051BC +
and dword ptr [ebp-60h] 0 +
and dword ptr [ebp-5Ch] 0 +
and eax 0FFFFFFFh +
mov [ebp-64h] eax +
mov eax edi +
and ebx 0FFFFFFFh +
add ebx edi +
sub eax ecx +
mov [ebp-0FCh] eax +
jnz loc_1009E65  +
xor edi edi +
cmp [ebp-64h] edi +
jbe loc_100A0DA  +
mov ecx 7FFFFFFFh +
mov esi 3EC41EC2h +
movzx eax byte ptr [edi+ebx] +
add eax esi +
add [ebp-60h] eax +
add eax [ebp-5Ch] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-60h] eax +
mov [ebp-5Ch] eax +
inc edi  +
cmp edi [ebp-64h] +
jb loc_1009E0D  +
jmp loc_100A0DA  +
mov edx ds:dword_100003C +
lea edx dword_10000A0[edx] +
mov ecx ebx +
mov eax [ebp-64h] +
add eax ebx +
mov [ebp-6Ch] eax +
mov eax [edx] +
mov edx [edx+4] +
add eax edi +
mov [ebp-74h] edx +
sub ecx edi +
mov esi ecx +
mov edx ecx +
mov edi 0FFFFF000h +
and edx edi +
sub esi edx +
mov [ebp-70h] esi +
mov esi [ebp-64h] +
add ecx esi +
mov esi ecx +
and esi edi +
mov edi eax +
sub ecx esi +
mov [ebp-0F0h] ecx +
mov ecx [ebp-74h] +
add ecx eax +
cmp eax ecx +
mov [ebp-0F4h] esi +
mov [ebp-0ECh] ecx +
jz loc_1009ECA  +
cmp [edi] edx +
jnb loc_1009ECA  +
add edi [edi+4] +
cmp edi ecx +
jnz loc_1009EBF  +
xor eax eax +
cmp edi ecx +
jz loc_1009EF6  +
cmp [edi] edx +
jnz loc_1009EF6  +
mov edx [edi+4] +
sub edx 8 +
shr edx 1 +
jz loc_1009EF6  +
lea ecx [edi+8] +
movzx esi word ptr [ecx] +
and esi 0FFFh +
cmp esi [ebp-70h] +
jnb loc_1009EF6  +
inc eax  +
inc ecx  +
inc ecx  +
cmp eax edx +
jnz loc_1009EE1  +
mov ecx 7FFFFFFFh +
mov esi 3EC41EC2h +
jmp loc_1009F08  +
mov eax [ebp-0E4h] +
cmp edi [ebp-0ECh] +
jz loc_100A07B  +
mov edx [ebp-0F4h] +
cmp [edi] edx +
ja loc_100A07B  +
mov edx [edi+4] +
add edx 0FFFFFFF8h +
shr edx 1 +
cmp eax edx +
jnz loc_1009F4F  +
add edi [edi+4] +
cmp edi [ebp-0ECh] +
jz loc_100A07B  +
mov eax [ebp-0F4h] +
cmp [edi] eax +
ja loc_100A07B  +
xor eax eax +
jmp loc_1009F22  +
***
mov edx [ebp-0F4h] +
cmp [edi] edx +
jnz loc_1009F70  +
movzx edx word ptr [edi+eax*2+8] +
and edx 0FFFh +
cmp edx [ebp-0F0h] +
jnb loc_100A07B  +
mov edx eax +
inc eax  +
mov [ebp-0E4h] eax +
mov eax 0F000h +
test [edi+edx*2+8] ax +
jz loc_1009F02  +
movzx eax word ptr [edi+edx*2+8] +
mov edx [edi] +
and dword ptr [ebp-64h] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-70h] eax +
sub [ebp-70h] ebx +
mov [ebp-74h] eax +
jz loc_100A009  +
mov eax [ebp-64h] +
movzx eax byte ptr [eax+ebx] +
add eax esi +
add [ebp-60h] eax +
add eax [ebp-5Ch] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-60h] eax +
inc dword ptr [ebp-64h]  +
mov [ebp-5Ch] eax +
mov eax [ebp-64h] +
cmp eax [ebp-70h] +
jb loc_1009FAB  +
mov eax [ebp-74h] +
mov eax [eax] +
sub eax [ebp-0FCh] +
xor ebx ebx +
mov [ebp-0F8h] eax +
movzx eax byte ptr [ebp+ebx-0F8h] +
add eax esi +
add [ebp-60h] eax +
add eax [ebp-5Ch] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-60h] eax +
mov [ebp-5Ch] eax +
inc ebx  +
cmp ebx 4 +
jb loc_100A019  +
mov ebx [ebp-74h] +
add ebx 4 +
jmp loc_1009F02  +
***
xor edi edi +
mov eax [ebp-6Ch] +
sub eax ebx +
mov [ebp-6Ch] eax +
jz loc_100A0DA  +
movzx eax byte ptr [edi+ebx] +
add eax esi +
add [ebp-60h] eax +
add eax [ebp-5Ch] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-60h] eax +
inc edi  +
mov [ebp-5Ch] eax +
cmp edi [ebp-6Ch] +
jb loc_100A087  +
xor edi edi +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-60h] +
mov [ebp+eax-54h] cl +
inc eax  +
cmp eax 10h +
jb loc_100A0DE  +
mov eax 329E48DFh +
mov edx [ebp-4Ch] +
mov ecx [ebp-50h] +
mov eax [ebp-54h] +
mov esi [ebp-48h] +
mov [ebp-13Ch] eax +
mov [ebp-114h] eax +
mov eax ds:dword_1002168 +
mov [ebp-140h] eax +
mov eax ds:dword_100216C +
mov [ebp-12Ch] eax +
mov eax ds:dword_1002170 +
mov [ebp-118h] eax +
mov eax ds:dword_1002174 +
mov [ebp-104h] eax +
mov eax [ebp-7Ch] +
mov [ebp-138h] ecx +
mov [ebp-110h] ecx +
lea ecx [ebp-44h] +
sub eax ecx +
mov [ebp-70h] eax +
mov eax [ebp-0CCh] +
sub eax [ebp-7Ch] +
mov [ebp-134h] edx +
mov [ebp-130h] esi +
mov [ebp-10Ch] edx +
mov [ebp-108h] esi +
mov [ebp-128h] edi +
mov [ebp-124h] edi +
mov [ebp-120h] edi +
mov [ebp-11Ch] edi +
mov [ebp-6Ch] eax +
lea edi [ebp-0C0h] +
lea esi [ebp-140h] +
push 10h  +
pop ecx  +
movs   +
mov esi [ebp-0C0h] +
mov edx [ebp-90h] +
mov ecx [ebp-0A0h] +
mov eax [ebp-0B0h] +
mov dword ptr [ebp-74h] 3 +
mov ebx [ebp-0BCh] +
lea edi [esi+edx] +
rol edi 7 +
xor eax edi +
lea edi [esi+eax] +
rol edi 9 +
xor ecx edi +
lea edi [ecx+eax] +
rol edi 0Dh +
xor edx edi +
lea edi [ecx+edx] +
ror edi 0Eh +
xor esi edi +
mov edi [ebp-0ACh] +
add ebx edi +
rol ebx 7 +
xor [ebp-9Ch] ebx +
mov ebx [ebp-9Ch] +
add edi ebx +
rol edi 9 +
xor [ebp-8Ch] edi +
mov edi ebx +
mov ebx [ebp-8Ch] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-8Ch] +
xor [ebp-0BCh] ebx +
mov ebx [ebp-0BCh] +
add edi ebx +
mov ebx [ebp-98h] +
ror edi 0Eh +
xor [ebp-0ACh] edi +
mov edi [ebp-0A8h] +
add edi ebx +
rol edi 7 +
xor [ebp-88h] edi +
mov edi ebx +
mov ebx [ebp-88h] +
add edi ebx +
rol edi 9 +
xor [ebp-0B8h] edi +
mov edi ebx +
mov ebx [ebp-0B8h] +
add ebx edi +
mov edi [ebp-0B8h] +
rol ebx 0Dh +
xor [ebp-0A8h] ebx +
mov ebx [ebp-0A8h] +
add edi ebx +
mov ebx [ebp-84h] +
ror edi 0Eh +
xor [ebp-98h] edi +
mov edi [ebp-94h] +
add edi ebx +
rol edi 7 +
xor [ebp-0B4h] edi +
mov edi ebx +
mov ebx [ebp-0B4h] +
add edi ebx +
rol edi 9 +
xor [ebp-0A4h] edi +
mov edi ebx +
mov ebx [ebp-0A4h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0A4h] +
xor [ebp-94h] ebx +
mov ebx [ebp-94h] +
add edi ebx +
ror edi 0Eh +
xor [ebp-84h] edi +
mov edi [ebp-0B4h] +
add edi esi +
rol edi 7 +
xor [ebp-0BCh] edi +
mov edi [ebp-0BCh] +
add edi esi +
rol edi 9 +
xor [ebp-0B8h] edi +
mov ebx [ebp-0B8h] +
mov edi [ebp-0BCh] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0B8h] +
xor [ebp-0B4h] ebx +
mov ebx [ebp-0B4h] +
add ebx edi +
mov edi [ebp-0ACh] +
add edi eax +
ror ebx 0Eh +
xor esi ebx +
rol edi 7 +
xor [ebp-0A8h] edi +
mov edi [ebp-0ACh] +
mov ebx [ebp-0A8h] +
add ebx edi +
rol ebx 9 +
mov edi [ebp-0A8h] +
xor [ebp-0A4h] ebx +
mov ebx [ebp-0A4h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0A4h] +
xor eax ebx +
mov ebx [ebp-9Ch] +
add edi eax +
ror edi 0Eh +
xor [ebp-0ACh] edi +
mov edi [ebp-98h] +
add edi ebx +
rol edi 7 +
xor [ebp-94h] edi +
mov edi [ebp-98h] +
mov ebx [ebp-94h] +
add ebx edi +
rol ebx 9 +
mov edi [ebp-94h] +
xor ecx ebx +
mov ebx [ebp-88h] +
add edi ecx +
rol edi 0Dh +
xor [ebp-9Ch] edi +
mov edi [ebp-9Ch] +
add edi ecx +
ror edi 0Eh +
xor [ebp-98h] edi +
mov edi [ebp-84h] +
add edi ebx +
rol edi 7 +
xor edx edi +
mov edi [ebp-84h] +
add edi edx +
rol edi 9 +
xor [ebp-8Ch] edi +
mov edi [ebp-8Ch] +
add edi edx +
rol edi 0Dh +
xor [ebp-88h] edi +
mov edi [ebp-8Ch] +
mov ebx [ebp-88h] +
add ebx edi +
ror ebx 0Eh +
xor [ebp-84h] ebx +
dec dword ptr [ebp-74h]  +
jnz loc_100A1BD  +
push 40h  +
mov [ebp-0B0h] eax +
xor eax eax +
mov [ebp-90h] edx +
mov [ebp-0A0h] ecx +
mov [ebp-0C0h] esi +
pop ebx  +
mov ecx [ebp+eax-140h] +
add [ebp+eax-0C0h] ecx +
add eax 4 +
cmp eax ebx +
jl loc_100A42D  +
lea edi [ebp-44h] +
inc dword ptr [ebp-120h]  +
push 10h  +
xor edx edx +
lea esi [ebp-0C0h] +
pop ecx  +
movs   +
cmp [ebp-68h] ebx +
jbe loc_100A490  +
mov eax [ebp-6Ch] +
mov esi [ebp-70h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
inc edx  +
cmp edx ebx +
mov [ecx+esi] al +
jb loc_100A466  +
sub [ebp-68h] ebx +
add [ebp-80h] ebx +
add esi ebx +
add [ebp-0D0h] ebx +
mov [ebp-70h] esi +
jmp loc_100A18D  +
***
cmp [ebp-68h] edx +
jbe loc_100A4BA  +
mov esi [ebp-0D0h] +
mov edi [ebp-80h] +
lea eax [ebp-44h] +
sub esi eax +
sub edi eax +
lea ecx [ebp+edx-44h] +
mov al [ecx+esi] +
xor al [ecx] +
xor [ebp-55h] al +
mov [ecx+edi] al +
inc edx  +
cmp edx [ebp-68h] +
jb loc_100A4A5  +
mov esi [ebp-0C4h] +
mov edi offset __ImageBase +
movzx eax byte ptr [ebp-55h] +
mov ecx [ebp-78h] +
movzx ecx byte ptr [ecx+8] +
sub eax ecx +
jz loc_100A569  +
call sub_100D9B4  +
mov edi eax +
mov ecx [ebp-0D8h] +
mov edx 0FFFFh +
mov eax 0FFFFF000h +
and ecx 0FFFFFFFCh +
and edi eax +
lea esi [ecx+0FFFh] +
and esi eax +
mov eax [ebp-0D4h] +
mov dword ptr [eax+8] offset sub_1016D68 +
xor eax eax +
mov ebx dword_1042FC4 +
imul ebx ebx +
add ebx 269EC3h +
mov dword_1042FC4 ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100A50B  +
mov ebx 0FFFFh +
div  ebx +
inc edx  +
mov [ebp-154h] edi +
mov [ebp-158h] edx +
cmp ecx esi +
mov dword ptr [ebp-6Ch] 0 +
mov eax ecx +
jnb loc_100A55F  +
mov ecx [ebp-6Ch] +
mov [eax] ecx +
add eax 4 +
cmp eax esi +
jb loc_100A553  +
mov eax offset sub_1016D68 +
jmp loc_100A64D  +
mov ecx ds:off_10051BC +
mov eax [ebp-0CCh] +
sub eax [ebp-7Ch] +
mov [ebp-0C4h] eax +
sub edi ecx +
mov [ebp-78h] edi +
jnz loc_100A58D  +
test eax eax +
jz loc_100A638  +
mov ebx [ebp-0C8h] +
mov ecx ds:dword_1001168 +
lea eax [esi+ebx] +
mov edi [ebp-7Ch] +
sub edi [ebp-0CCh] +
xor esi esi +
mov [ebp-6Ch] eax +
dec ecx  +
js loc_100A5D4  +
lea eax [ecx+esi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100116C[eax*4] +
and edx 0FFFFFFFh +
cmp ebx edx +
jnb loc_100A5CB  +
lea ecx [eax-1] +
jmp loc_100A5D0  +
jbe loc_100A5D8  +
lea esi [eax+1] +
cmp ecx esi +
jge loc_100A5AD  +
mov ebx esi +
jmp loc_100A630  +
mov ebx eax +
jmp loc_100A630  +
mov eax ds:dword_100116C[ebx*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-6Ch] +
jnb loc_100A638  +
lea esi __ImageBase[ecx+edi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_100A620  +
dec ecx  +
jz loc_100A618  +
dec ecx  +
jnz loc_100A629  +
mov edx [ebp-78h] +
jmp loc_100A629  +
mov edx [ebp-0C4h] +
jmp loc_100A629  +
mov edx [ebp-78h] +
sub edx [ebp-0C4h] +
dec eax  +
dec eax  +
jnz loc_100A62F  +
add [esi] edx +
inc ebx  +
cmp ebx ds:dword_1001168 +
jb loc_100A5DC  +
mov eax ds:dword_1021358 +
mov eax 44B1591Ah +
mov ecx [ebp-7Ch] +
mov eax [ebp-100h] +
add eax ecx +
mov ecx [ebp-0D4h] +
mov [ecx+8] eax +
mov eax [ebp-0D8h] +
add dword ptr [eax] 0Ch +
mov ecx [ebp-158h] +
mov edi [ebp-148h] +
mov edx [ebp-154h] +
mov esi [ebp-14Ch] +
mov eax [ebp-144h] +
mov ebx [ebp-150h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 150h +
mov [ebp-13Ch] eax +
mov [ebp-150h] ecx +
mov [ebp-14Ch] edx +
mov [ebp-148h] ebx +
mov [ebp-144h] esi +
lea eax [ebp+4] +
mov [ebp-140h] edi +
mov esi ds:dword_1021358 +
mov edi [eax+4] +
sub eax 4 +
mov [ebp-0D4h] eax +
mov eax [edi] +
shr eax 4 +
xor edx edx +
lea ecx [esi+eax-1] +
mov eax ecx +
div  esi +
mov eax ds:dword_1021358 +
sub ecx edx +
mov [ebp-80h] ecx +
mov eax ds:dword_10049B0 +
mov [ebp-7Ch] eax +
mov eax ds:dword_1021358 +
mov eax ds:dword_10049B0 +
test eax eax +
jz loc_100A783  +
mov eax ds:dword_10049B0 +
xor esi esi +
dec eax  +
lea ecx [eax+1] +
xor eax eax +
mov edx ecx +
test ecx ecx +
jz loc_100A738  +
mov ebx dword_1042FC4 +
imul ebx ebx +
add ebx 269EC3h +
mov dword_1042FC4 ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100A711  +
xor edx edx +
div  ecx +
cmp dword ptr [ebp-7Ch] 0 +
jbe loc_100A775  +
inc esi  +
mov ecx 0FFFF4B3Bh +
lea ebx dword_10430D4[edx*4] +
mov eax 0B4C4h +
cmpxchg [ebx] ecx +
cmp eax 0B4C4h +
jz loc_100A973  +
lea eax [edx+1] +
mov ecx ds:dword_10049B0 +
xor edx edx +
div  ecx +
cmp esi [ebp-7Ch] +
jb loc_100A742  +
and dword ptr [ebp-5Ch] 0 +
cmp dword ptr [ebp-5Ch] 0 +
jnz loc_100A806  +
call ds:__imp_GetLastError  +
mov ebx eax +
xor esi esi +
inc esi  +
push 40h  +
push 1000h  +
push dword ptr [ebp-80h]  +
push 0  +
call ds:VirtualAlloc  +
test eax eax +
jnz loc_100A989  +
push eax  +
call ds:Sleep  +
cmp esi 11h +
jb loc_100A78D  +
and dword ptr [ebp-5Ch] 0 +
cmp dword ptr [ebp-5Ch] 10000h +
jb loc_100A7CA  +
test dword ptr [ebp-5Ch] 3 +
jz loc_100A7E4  +
cmp dword ptr [ebp-5Ch] 0 +
jz loc_100A7E0  +
push 8000h  +
push 0  +
push dword ptr [ebp-5Ch]  +
call ds:VirtualFree  +
and dword ptr [ebp-5Ch] 0 +
push ebx  +
call ds:SetLastError  +
cmp dword ptr [ebp-5Ch] 0 +
jz loc_100A6E4  +
mov ecx [ebp-80h] +
mov eax [ebp-5Ch] +
test ecx ecx +
jz loc_100A806  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100A7FF  +
mov eax 0E79A7076h +
mov esi [edi] +
mov eax esi +
shr eax 1 +
and eax 7 +
lea eax [eax+edi+8] +
shr esi 4 +
mov [ebp-64h] eax +
mov edi offset __ImageBase +
mov [ebp-0D0h] eax +
lea ebx [esi+eax] +
mov eax ds:dword_1021358 +
sub eax esi +
lea ecx [eax+1] +
sub [ebp-64h] edi +
mov [ebp-0C4h] esi +
xor eax eax +
test ecx ecx +
mov [ebp-0CCh] ebx +
mov [ebp-60h] ecx +
jz loc_100A878  +
mov edx dword_1042FC4 +
shr dword ptr [ebp-60h] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_1042FC4 edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp dword ptr [ebp-60h] 0 +
jnz loc_100A84E  +
xor edx edx +
div  ecx +
mov eax [ebp-5Ch] +
push esi  +
add eax edx +
push dword ptr [ebp-64h]  +
mov [ebp-5Ch] eax +
mov eax 63D525F4h +
test esi esi +
mov eax [ebx] +
mov [ebp-0DCh] eax +
mov eax [ebx+4] +
mov [ebp-0D8h] eax +
mov eax [ebp-0D0h] +
mov [ebp-80h] eax +
mov eax [ebp-5Ch] +
pop ecx  +
pop ecx  +
mov byte ptr [ebp-55h] 0 +
mov [ebp-0C8h] esi +
mov [ebp-7Ch] eax +
jz loc_100AFFD  +
lea esi [ebp-0DCh] +
mov eax 7D89C97Ah +
mov ebx [ebp-0DCh] +
mov ecx ds:off_10051BC +
mov eax [ebp-0D8h] +
and dword ptr [ebp-6Ch] 0 +
and dword ptr [ebp-68h] 0 +
and eax 0FFFFFFFh +
and ebx 0FFFFFFFh +
mov [ebp-60h] eax +
mov eax edi +
add ebx edi +
sub eax ecx +
mov [ebp-0F8h] eax +
jnz loc_100A991  +
xor edi edi +
cmp [ebp-60h] edi +
jbe loc_100AC06  +
mov esi 3EC41EC2h +
mov ecx 7FFFFFFFh +
movzx eax byte ptr [edi+ebx] +
add eax esi +
add [ebp-6Ch] eax +
add eax [ebp-68h] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-6Ch] eax +
inc edi  +
mov [ebp-68h] eax +
cmp edi [ebp-60h] +
jb loc_100A91B  +
jmp loc_100AC06  +
mov eax ds:dword_1021358 +
imul eax edx +
lea eax Address[eax] +
mov [ebp-5Ch] eax +
jmp loc_100A779  +
***
mov [ebp-5Ch] eax +
jmp loc_100A7B8  +
***
mov eax [ebp-60h] +
add eax ebx +
mov ecx ebx +
mov edx ds:dword_100003C +
lea edx dword_10000A0[edx] +
mov [ebp-70h] eax +
mov eax [edx] +
mov edx [edx+4] +
add eax edi +
sub ecx edi +
mov esi ecx +
mov edi 0FFFFF000h +
mov [ebp-78h] edx +
mov edx ecx +
and edx edi +
sub esi edx +
mov [ebp-74h] esi +
mov esi [ebp-60h] +
add ecx esi +
mov esi ecx +
and esi edi +
mov edi eax +
sub ecx esi +
mov [ebp-0ECh] ecx +
mov ecx [ebp-78h] +
add ecx eax +
mov [ebp-0F0h] esi +
mov [ebp-0E8h] ecx +
cmp eax ecx +
jz loc_100A9F6  +
cmp [edi] edx +
jnb loc_100A9F6  +
add edi [edi+4] +
cmp edi ecx +
jnz loc_100A9EB  +
xor eax eax +
cmp edi ecx +
jz loc_100AA22  +
cmp [edi] edx +
jnz loc_100AA22  +
mov edx [edi+4] +
sub edx 8 +
shr edx 1 +
jz loc_100AA22  +
lea ecx [edi+8] +
movzx esi word ptr [ecx] +
and esi 0FFFh +
cmp esi [ebp-74h] +
jnb loc_100AA22  +
inc eax  +
inc ecx  +
inc ecx  +
cmp eax edx +
jnz loc_100AA0D  +
mov esi 3EC41EC2h +
mov ecx 7FFFFFFFh +
jmp loc_100AA34  +
mov eax [ebp-0E0h] +
cmp edi [ebp-0E8h] +
jz loc_100ABA7  +
mov edx [ebp-0F0h] +
cmp [edi] edx +
ja loc_100ABA7  +
mov edx [edi+4] +
add edx 0FFFFFFF8h +
shr edx 1 +
cmp eax edx +
jnz loc_100AA7B  +
add edi [edi+4] +
cmp edi [ebp-0E8h] +
jz loc_100ABA7  +
mov eax [ebp-0F0h] +
cmp [edi] eax +
ja loc_100ABA7  +
xor eax eax +
jmp loc_100AA4E  +
***
mov edx [ebp-0F0h] +
cmp [edi] edx +
jnz loc_100AA9C  +
movzx edx word ptr [edi+eax*2+8] +
and edx 0FFFh +
cmp edx [ebp-0ECh] +
jnb loc_100ABA7  +
mov edx eax +
inc eax  +
mov [ebp-0E0h] eax +
mov eax 0F000h +
test [edi+edx*2+8] ax +
jz loc_100AA2E  +
movzx eax word ptr [edi+edx*2+8] +
mov edx [edi] +
and dword ptr [ebp-60h] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-74h] eax +
sub [ebp-74h] ebx +
mov [ebp-78h] eax +
jz loc_100AB35  +
mov eax [ebp-60h] +
movzx eax byte ptr [eax+ebx] +
add eax esi +
add [ebp-6Ch] eax +
add eax [ebp-68h] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-6Ch] eax +
inc dword ptr [ebp-60h]  +
mov [ebp-68h] eax +
mov eax [ebp-60h] +
cmp eax [ebp-74h] +
jb loc_100AAD7  +
mov eax [ebp-78h] +
mov eax [eax] +
sub eax [ebp-0F8h] +
mov [ebp-0F4h] eax +
xor ebx ebx +
movzx eax byte ptr [ebp+ebx-0F4h] +
add eax esi +
add [ebp-6Ch] eax +
add eax [ebp-68h] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-6Ch] eax +
mov [ebp-68h] eax +
inc ebx  +
cmp ebx 4 +
jb loc_100AB45  +
mov ebx [ebp-78h] +
add ebx 4 +
jmp loc_100AA2E  +
***
xor edi edi +
mov eax [ebp-70h] +
sub eax ebx +
mov [ebp-70h] eax +
jz loc_100AC06  +
movzx eax byte ptr [edi+ebx] +
add eax esi +
add [ebp-6Ch] eax +
add eax [ebp-68h] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-6Ch] eax +
mov [ebp-68h] eax +
inc edi  +
cmp edi [ebp-70h] +
jb loc_100ABB3  +
xor edi edi +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-6Ch] +
mov [ebp+eax-54h] cl +
inc eax  +
cmp eax 10h +
jb loc_100AC0A  +
mov eax 9E7E394Fh +
mov edx [ebp-4Ch] +
mov esi [ebp-48h] +
mov ecx [ebp-50h] +
mov eax [ebp-54h] +
mov [ebp-134h] eax +
mov [ebp-10Ch] eax +
mov eax ds:dword_1002168 +
mov [ebp-138h] eax +
mov eax ds:dword_100216C +
mov [ebp-124h] eax +
mov eax ds:dword_1002170 +
mov [ebp-110h] eax +
mov eax ds:dword_1002174 +
mov [ebp-0FCh] eax +
mov eax [ebp-5Ch] +
mov [ebp-130h] ecx +
mov [ebp-108h] ecx +
lea ecx [ebp-44h] +
sub eax ecx +
mov [ebp-74h] eax +
mov eax [ebp-0D0h] +
sub eax [ebp-5Ch] +
mov [ebp-12Ch] edx +
mov [ebp-128h] esi +
mov [ebp-104h] edx +
mov [ebp-100h] esi +
mov [ebp-120h] edi +
mov [ebp-11Ch] edi +
mov [ebp-118h] edi +
mov [ebp-114h] edi +
mov [ebp-70h] eax +
lea edi [ebp-0C0h] +
push 10h  +
lea esi [ebp-138h] +
pop ecx  +
movs   +
mov edx [ebp-90h] +
mov ecx [ebp-0A0h] +
mov eax [ebp-0B0h] +
mov esi [ebp-0C0h] +
mov dword ptr [ebp-78h] 3 +
mov ebx [ebp-0BCh] +
lea edi [esi+edx] +
rol edi 7 +
xor eax edi +
lea edi [esi+eax] +
rol edi 9 +
xor ecx edi +
lea edi [ecx+eax] +
rol edi 0Dh +
xor edx edi +
lea edi [ecx+edx] +
ror edi 0Eh +
xor esi edi +
mov edi [ebp-0ACh] +
add ebx edi +
rol ebx 7 +
xor [ebp-9Ch] ebx +
mov ebx [ebp-9Ch] +
add edi ebx +
rol edi 9 +
xor [ebp-8Ch] edi +
mov edi ebx +
mov ebx [ebp-8Ch] +
add ebx edi +
mov edi [ebp-8Ch] +
rol ebx 0Dh +
xor [ebp-0BCh] ebx +
mov ebx [ebp-0BCh] +
add edi ebx +
ror edi 0Eh +
mov ebx [ebp-98h] +
xor [ebp-0ACh] edi +
mov edi [ebp-0A8h] +
add edi ebx +
rol edi 7 +
xor [ebp-88h] edi +
mov edi ebx +
mov ebx [ebp-88h] +
add edi ebx +
rol edi 9 +
xor [ebp-0B8h] edi +
mov edi ebx +
mov ebx [ebp-0B8h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0B8h] +
xor [ebp-0A8h] ebx +
mov ebx [ebp-0A8h] +
add edi ebx +
mov ebx [ebp-84h] +
ror edi 0Eh +
xor [ebp-98h] edi +
mov edi [ebp-94h] +
add edi ebx +
rol edi 7 +
xor [ebp-0B4h] edi +
mov edi ebx +
mov ebx [ebp-0B4h] +
add edi ebx +
rol edi 9 +
xor [ebp-0A4h] edi +
mov edi ebx +
mov ebx [ebp-0A4h] +
add ebx edi +
mov edi [ebp-0A4h] +
rol ebx 0Dh +
xor [ebp-94h] ebx +
mov ebx [ebp-94h] +
add edi ebx +
ror edi 0Eh +
xor [ebp-84h] edi +
mov edi [ebp-0B4h] +
add edi esi +
rol edi 7 +
xor [ebp-0BCh] edi +
mov edi [ebp-0BCh] +
add edi esi +
rol edi 9 +
xor [ebp-0B8h] edi +
mov ebx [ebp-0B8h] +
mov edi [ebp-0BCh] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0B8h] +
xor [ebp-0B4h] ebx +
mov ebx [ebp-0B4h] +
add ebx edi +
mov edi [ebp-0ACh] +
add edi eax +
ror ebx 0Eh +
xor esi ebx +
rol edi 7 +
xor [ebp-0A8h] edi +
mov edi [ebp-0ACh] +
mov ebx [ebp-0A8h] +
add ebx edi +
mov edi [ebp-0A8h] +
rol ebx 9 +
xor [ebp-0A4h] ebx +
mov ebx [ebp-0A4h] +
add ebx edi +
mov edi [ebp-0A4h] +
rol ebx 0Dh +
xor eax ebx +
mov ebx [ebp-9Ch] +
add edi eax +
ror edi 0Eh +
xor [ebp-0ACh] edi +
mov edi [ebp-98h] +
add edi ebx +
rol edi 7 +
xor [ebp-94h] edi +
mov ebx [ebp-94h] +
mov edi [ebp-98h] +
add ebx edi +
mov edi [ebp-94h] +
rol ebx 9 +
xor ecx ebx +
add edi ecx +
rol edi 0Dh +
mov ebx [ebp-88h] +
xor [ebp-9Ch] edi +
mov edi [ebp-9Ch] +
add edi ecx +
ror edi 0Eh +
xor [ebp-98h] edi +
mov edi [ebp-84h] +
add edi ebx +
rol edi 7 +
xor edx edi +
mov edi [ebp-84h] +
add edi edx +
rol edi 9 +
xor [ebp-8Ch] edi +
mov edi [ebp-8Ch] +
add edi edx +
rol edi 0Dh +
xor [ebp-88h] edi +
mov edi [ebp-8Ch] +
mov ebx [ebp-88h] +
add ebx edi +
ror ebx 0Eh +
xor [ebp-84h] ebx +
dec dword ptr [ebp-78h]  +
jnz loc_100ACE9  +
mov [ebp-90h] edx +
xor edx edx +
push 40h  +
mov [ebp-0B0h] eax +
mov [ebp-0A0h] ecx +
xor eax eax +
mov [ebp-0C0h] esi +
pop ebx  +
mov ecx [ebp+eax-138h] +
add [ebp+eax-0C0h] ecx +
add eax 4 +
cmp eax ebx +
jl loc_100AF5B  +
inc dword ptr [ebp-118h]  +
lea esi [ebp-0C0h] +
push 10h  +
lea edi [ebp-44h] +
pop ecx  +
movs   +
cmp [ebp-0C8h] ebx +
jbe loc_100AFBF  +
mov eax [ebp-70h] +
mov esi [ebp-74h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
inc edx  +
cmp edx ebx +
mov [ecx+esi] al +
jb loc_100AF95  +
sub [ebp-0C8h] ebx +
add [ebp-7Ch] ebx +
add esi ebx +
add [ebp-80h] ebx +
mov [ebp-74h] esi +
jmp loc_100ACB9  +
***
cmp [ebp-0C8h] edx +
jbe loc_100AFEC  +
mov esi [ebp-80h] +
lea eax [ebp-44h] +
mov edi [ebp-7Ch] +
sub esi eax +
sub edi eax +
lea ecx [ebp+edx-44h] +
mov al [ecx+esi] +
xor al [ecx] +
xor [ebp-55h] al +
mov [ecx+edi] al +
inc edx  +
cmp edx [ebp-0C8h] +
jb loc_100AFD4  +
mov edi offset __ImageBase +
mov esi [ebp-0C4h] +
mov ebx [ebp-0CCh] +
movzx ecx byte ptr [ebp-55h] +
movzx eax byte ptr [ebx+8] +
sub ecx eax +
jz loc_100B09B  +
call sub_100D9B4  +
mov edi eax +
mov eax [ebp-0D4h] +
mov edx 0FFFFF000h +
mov dword ptr [eax+8] offset sub_1016D68 +
lea ecx [eax+0Ch] +
and ecx 0FFFFFFFCh +
lea esi [ecx+0FFFh] +
and edi edx +
and esi edx +
mov edx 0FFFFh +
xor eax eax +
mov ebx dword_1042FC4 +
imul ebx ebx +
add ebx 269EC3h +
mov dword_1042FC4 ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100B03D  +
mov ebx 0FFFFh +
div  ebx +
mov [ebp-14Ch] edi +
mov eax ecx +
inc edx  +
mov [ebp-150h] edx +
mov dword ptr [ebp-70h] 0 +
cmp ecx esi +
jnb loc_100B091  +
mov ecx [ebp-70h] +
mov [eax] ecx +
add eax 4 +
cmp eax esi +
jb loc_100B085  +
mov eax offset sub_1016D68 +
jmp loc_100B18A  +
mov ebx [ebp-0D0h] +
mov eax ds:off_10051BC +
sub ebx [ebp-5Ch] +
sub edi eax +
mov [ebp-0C4h] ebx +
mov [ebp-0CCh] edi +
jnz loc_100B0C1  +
test ebx ebx +
jz loc_100B17D  +
mov ecx ds:dword_1001168 +
mov edi [ebp-5Ch] +
mov eax [ebp-64h] +
sub edi [ebp-0D0h] +
add eax esi +
mov [ebp-70h] eax +
xor esi esi +
dec ecx  +
js loc_100B10B  +
lea eax [ecx+esi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100116C[eax*4] +
and edx 0FFFFFFFh +
cmp [ebp-64h] edx +
jnb loc_100B0FC  +
lea ecx [eax-1] +
jmp loc_100B101  +
jbe loc_100B110  +
lea esi [eax+1] +
cmp ecx esi +
jge loc_100B0DD  +
mov ebx [ebp-0C4h] +
mov [ebp-64h] esi +
jmp loc_100B172  +
mov ebx [ebp-0C4h] +
mov [ebp-64h] eax +
jmp loc_100B172  +
mov eax [ebp-64h] +
mov eax ds:dword_100116C[eax*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-70h] +
jnb loc_100B17D  +
lea esi __ImageBase[ecx+edi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_100B161  +
dec ecx  +
jz loc_100B15D  +
dec ecx  +
jnz loc_100B169  +
mov edx [ebp-0CCh] +
jmp loc_100B169  +
mov edx ebx +
jmp loc_100B169  +
mov edx [ebp-0CCh] +
sub edx ebx +
dec eax  +
dec eax  +
jnz loc_100B16F  +
add [esi] edx +
inc dword ptr [ebp-64h]  +
mov eax [ebp-64h] +
cmp eax ds:dword_1001168 +
jb loc_100B11B  +
mov eax ds:dword_1021358 +
mov eax 0EB22AE1Ch +
mov eax [ebp-5Ch] +
mov ecx [ebp-0D4h] +
mov [ecx+8] eax +
mov edi [ebp-140h] +
mov ecx [ebp-150h] +
mov esi [ebp-144h] +
mov edx [ebp-14Ch] +
mov ebx [ebp-148h] +
mov eax [ebp-13Ch] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
push edi  +
pushf   +
push ebp  +
mov ebp esp +
sub esp 154h +
mov [ebp-140h] eax +
mov [ebp-154h] ecx +
mov ecx 0FFFFFFFh +
mov [ebp-150h] edx +
mov [ebp-14Ch] ebx +
mov ebx offset __ImageBase +
mov [ebp-148h] esi +
mov [ebp-144h] edi +
lea edi [ebp+4] +
sub edi 4 +
mov [ebp-0D4h] edi +
add edi 0Ch +
mov esi [edi] +
mov eax [esi+4] +
and eax ecx +
add eax ebx +
mov [ebp-0C8h] eax +
mov eax [esi] +
and eax ecx +
xor edx edx +
mov ecx ds:dword_1021358 +
mov [ebp-70h] ecx +
lea ecx [eax+ecx-1] +
mov eax ecx +
div  dword ptr [ebp-70h] +
sub ecx edx +
mov eax ds:dword_1021358 +
mov [ebp-0D0h] edi +
mov [ebp-84h] ecx +
mov eax ds:dword_10049B0 +
mov [ebp-80h] eax +
mov eax ds:dword_1021358 +
mov eax ds:dword_10049B0 +
test eax eax +
jz loc_100B2EF  +
and dword ptr [ebp-60h] 0 +
mov eax ds:dword_10049B0 +
dec eax  +
lea ecx [eax+1] +
xor eax eax +
mov [ebp-64h] ecx +
test ecx ecx +
jz loc_100B298  +
mov edx dword_1042FC4 +
shr dword ptr [ebp-64h] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_1042FC4 edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp dword ptr [ebp-64h] 0 +
jnz loc_100B26E  +
xor edx edx +
div  ecx +
cmp dword ptr [ebp-80h] 0 +
mov [ebp-64h] edx +
jbe loc_100B2E1  +
mov ecx 0FFFF4B3Bh +
inc dword ptr [ebp-60h]  +
lea edx dword_10430D4[edx*4] +
mov eax 0B4C4h +
cmpxchg [edx] ecx +
cmp eax 0B4C4h +
jz loc_100B4E6  +
mov ecx ds:dword_10049B0 +
mov eax [ebp-64h] +
inc eax  +
xor edx edx +
div  ecx +
mov eax [ebp-60h] +
mov [ebp-64h] edx +
cmp eax [ebp-80h] +
jb loc_100B2A5  +
and dword ptr [ebp-5Ch] 0 +
cmp dword ptr [ebp-5Ch] 0 +
jnz loc_100B380  +
call ds:__imp_GetLastError  +
and dword ptr [ebp-64h] 0 +
mov [ebp-70h] eax +
inc dword ptr [ebp-64h]  +
push 40h  +
push 1000h  +
push dword ptr [ebp-84h]  +
push 0  +
call ds:VirtualAlloc  +
test eax eax +
jnz loc_100B4FD  +
push eax  +
call ds:Sleep  +
cmp dword ptr [ebp-64h] 11h +
jb loc_100B2FC  +
and dword ptr [ebp-5Ch] 0 +
cmp dword ptr [ebp-5Ch] 10000h +
jb loc_100B33F  +
test dword ptr [ebp-5Ch] 3 +
jz loc_100B359  +
cmp dword ptr [ebp-5Ch] 0 +
jz loc_100B355  +
push 8000h  +
push 0  +
push dword ptr [ebp-5Ch]  +
call ds:VirtualFree  +
and dword ptr [ebp-5Ch] 0 +
push dword ptr [ebp-70h]  +
call ds:SetLastError  +
cmp dword ptr [ebp-5Ch] 0 +
jz loc_100B23E  +
mov ecx [ebp-84h] +
test ecx ecx +
mov eax [ebp-5Ch] +
jz loc_100B380  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100B379  +
mov eax 89C09110h +
add dword ptr [edi] 8 +
mov eax [ebp-0C8h] +
mov esi [esi] +
and esi 0FFFFFFFh +
mov [ebp-64h] eax +
lea ecx [esi+eax] +
mov eax ds:dword_1021358 +
sub [ebp-64h] ebx +
mov [ebp-70h] ecx +
mov [ebp-0D8h] esi +
sub eax esi +
lea ecx [eax+1] +
mov [ebp-60h] ecx +
xor eax eax +
test ecx ecx +
jz loc_100B3E5  +
mov edx dword_1042FC4 +
shr dword ptr [ebp-60h] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_1042FC4 edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp dword ptr [ebp-60h] 0 +
jnz loc_100B3BB  +
xor edx edx +
div  ecx +
mov eax [ebp-5Ch] +
push esi  +
add eax edx +
push dword ptr [ebp-64h]  +
mov [ebp-5Ch] eax +
mov eax 0F49A1DF9h +
mov eax [ebp-70h] +
pop ecx  +
pop ecx  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-0DCh] eax +
mov eax [ebp-0C8h] +
mov [ebp-84h] eax +
test esi esi +
mov eax [ebp-5Ch] +
mov [ebp-0E0h] ecx +
mov byte ptr [ebp-55h] 0 +
mov [ebp-0CCh] esi +
mov [ebp-80h] eax +
jz loc_100BB77  +
lea esi [ebp-0E0h] +
mov eax 4E76425Fh +
mov eax [ebp-0DCh] +
mov ecx ds:off_10051BC +
mov edi [ebp-0E0h] +
and dword ptr [ebp-6Ch] 0 +
and dword ptr [ebp-68h] 0 +
and eax 0FFFFFFFh +
mov [ebp-60h] eax +
mov eax ebx +
and edi 0FFFFFFFh +
add edi ebx +
sub eax ecx +
mov [ebp-0F8h] eax +
jnz loc_100B505  +
xor ebx ebx +
cmp [ebp-60h] ebx +
jbe loc_100B77A  +
mov esi 3EC41EC2h +
mov ecx 7FFFFFFFh +
movzx eax byte ptr [edi+ebx] +
add eax esi +
add [ebp-6Ch] eax +
add eax [ebp-68h] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-6Ch] eax +
inc ebx  +
mov [ebp-68h] eax +
cmp ebx [ebp-60h] +
jb loc_100B48E  +
jmp loc_100B77A  +
mov eax ds:dword_1021358 +
imul eax [ebp-64h] +
lea eax Address[eax] +
mov [ebp-5Ch] eax +
jmp loc_100B2E5  +
***
mov [ebp-5Ch] eax +
jmp loc_100B32D  +
***
mov eax [ebp-60h] +
add eax edi +
mov ecx edi +
mov edx ds:dword_100003C +
lea edx dword_10000A0[edx] +
mov [ebp-74h] eax +
mov eax [edx] +
mov edx [edx+4] +
add eax ebx +
mov [ebp-7Ch] edx +
sub ecx ebx +
mov edx ecx +
mov esi ecx +
mov ebx 0FFFFF000h +
and edx ebx +
sub esi edx +
mov [ebp-78h] esi +
mov esi [ebp-60h] +
add ecx esi +
mov esi ecx +
and esi ebx +
mov ebx eax +
sub ecx esi +
mov [ebp-0F0h] ecx +
mov ecx [ebp-7Ch] +
mov [ebp-0F4h] esi +
add ecx eax +
mov [ebp-0ECh] ecx +
cmp eax ecx +
jz loc_100B56A  +
cmp [ebx] edx +
jnb loc_100B56A  +
add ebx [ebx+4] +
cmp ebx ecx +
jnz loc_100B55F  +
xor eax eax +
cmp ebx ecx +
jz loc_100B596  +
cmp [ebx] edx +
jnz loc_100B596  +
mov ecx [ebx+4] +
sub ecx 8 +
shr ecx 1 +
jz loc_100B596  +
lea edx [ebx+8] +
movzx esi word ptr [edx] +
and esi 0FFFh +
cmp esi [ebp-78h] +
jnb loc_100B596  +
inc eax  +
inc edx  +
inc edx  +
cmp eax ecx +
jnz loc_100B581  +
mov esi 3EC41EC2h +
mov ecx 7FFFFFFFh +
jmp loc_100B5A8  +
mov eax [ebp-0E4h] +
cmp ebx [ebp-0ECh] +
jz loc_100B71B  +
mov edx [ebp-0F4h] +
cmp [ebx] edx +
ja loc_100B71B  +
mov edx [ebx+4] +
add edx 0FFFFFFF8h +
shr edx 1 +
cmp eax edx +
jnz loc_100B5EF  +
add ebx [ebx+4] +
cmp ebx [ebp-0ECh] +
jz loc_100B71B  +
mov eax [ebp-0F4h] +
cmp [ebx] eax +
ja loc_100B71B  +
xor eax eax +
jmp loc_100B5C2  +
***
mov edx [ebp-0F4h] +
cmp [ebx] edx +
jnz loc_100B610  +
movzx edx word ptr [ebx+eax*2+8] +
and edx 0FFFh +
cmp edx [ebp-0F0h] +
jnb loc_100B71B  +
mov edx eax +
inc eax  +
mov [ebp-0E4h] eax +
mov eax 0F000h +
test [ebx+edx*2+8] ax +
jz loc_100B5A2  +
movzx eax word ptr [ebx+edx*2+8] +
mov edx [ebx] +
and dword ptr [ebp-60h] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-78h] eax +
sub [ebp-78h] edi +
mov [ebp-7Ch] eax +
jz loc_100B6A9  +
mov eax [ebp-60h] +
movzx eax byte ptr [edi+eax] +
add eax esi +
add [ebp-6Ch] eax +
add eax [ebp-68h] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-6Ch] eax +
inc dword ptr [ebp-60h]  +
mov [ebp-68h] eax +
mov eax [ebp-60h] +
cmp eax [ebp-78h] +
jb loc_100B64B  +
mov eax [ebp-7Ch] +
mov eax [eax] +
sub eax [ebp-0F8h] +
mov [ebp-0FCh] eax +
xor edi edi +
movzx eax byte ptr [ebp+edi-0FCh] +
add eax esi +
add [ebp-6Ch] eax +
add eax [ebp-68h] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-6Ch] eax +
mov [ebp-68h] eax +
inc edi  +
cmp edi 4 +
jb loc_100B6B9  +
mov edi [ebp-7Ch] +
add edi 4 +
jmp loc_100B5A2  +
***
mov eax [ebp-74h] +
xor ebx ebx +
sub eax edi +
mov [ebp-74h] eax +
jz loc_100B77A  +
movzx eax byte ptr [edi+ebx] +
add eax esi +
add [ebp-6Ch] eax +
add eax [ebp-68h] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-6Ch] eax +
inc ebx  +
mov [ebp-68h] eax +
cmp ebx [ebp-74h] +
jb loc_100B727  +
xor edi edi +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-6Ch] +
mov [ebp+eax-54h] cl +
inc eax  +
cmp eax 10h +
jb loc_100B77E  +
mov eax 3551C473h +
mov edx [ebp-4Ch] +
mov ecx [ebp-50h] +
mov eax [ebp-54h] +
mov esi [ebp-48h] +
mov [ebp-138h] eax +
mov [ebp-110h] eax +
mov eax ds:dword_1002168 +
mov [ebp-13Ch] eax +
mov eax ds:dword_100216C +
mov [ebp-128h] eax +
mov eax ds:dword_1002170 +
mov [ebp-114h] eax +
mov eax ds:dword_1002174 +
mov [ebp-100h] eax +
mov eax [ebp-5Ch] +
mov [ebp-134h] ecx +
mov [ebp-10Ch] ecx +
lea ecx [ebp-44h] +
sub eax ecx +
mov [ebp-78h] eax +
mov eax [ebp-0C8h] +
sub eax [ebp-5Ch] +
mov [ebp-130h] edx +
mov [ebp-12Ch] esi +
mov [ebp-108h] edx +
mov [ebp-104h] esi +
mov [ebp-124h] edi +
mov [ebp-120h] edi +
mov [ebp-11Ch] edi +
mov [ebp-118h] edi +
mov [ebp-74h] eax +
push 10h  +
lea edi [ebp-0C4h] +
lea esi [ebp-13Ch] +
pop ecx  +
movs   +
mov eax [ebp-0B4h] +
mov edx [ebp-94h] +
mov esi [ebp-0C4h] +
mov ecx [ebp-0A4h] +
mov dword ptr [ebp-7Ch] 3 +
mov ebx [ebp-0C0h] +
lea edi [esi+edx] +
rol edi 7 +
xor eax edi +
lea edi [esi+eax] +
rol edi 9 +
xor ecx edi +
lea edi [ecx+eax] +
rol edi 0Dh +
xor edx edi +
lea edi [ecx+edx] +
ror edi 0Eh +
xor esi edi +
mov edi [ebp-0B0h] +
add ebx edi +
rol ebx 7 +
xor [ebp-0A0h] ebx +
mov ebx [ebp-0A0h] +
add edi ebx +
rol edi 9 +
xor [ebp-90h] edi +
mov edi ebx +
mov ebx [ebp-90h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-90h] +
xor [ebp-0C0h] ebx +
mov ebx [ebp-0C0h] +
add edi ebx +
ror edi 0Eh +
mov ebx [ebp-9Ch] +
xor [ebp-0B0h] edi +
mov edi [ebp-0ACh] +
add edi ebx +
rol edi 7 +
xor [ebp-8Ch] edi +
mov edi ebx +
mov ebx [ebp-8Ch] +
add edi ebx +
rol edi 9 +
xor [ebp-0BCh] edi +
mov edi ebx +
mov ebx [ebp-0BCh] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0BCh] +
xor [ebp-0ACh] ebx +
mov ebx [ebp-0ACh] +
add edi ebx +
ror edi 0Eh +
mov ebx [ebp-88h] +
xor [ebp-9Ch] edi +
mov edi [ebp-98h] +
add edi ebx +
rol edi 7 +
xor [ebp-0B8h] edi +
mov edi ebx +
mov ebx [ebp-0B8h] +
add edi ebx +
rol edi 9 +
xor [ebp-0A8h] edi +
mov edi ebx +
mov ebx [ebp-0A8h] +
add ebx edi +
mov edi [ebp-0A8h] +
rol ebx 0Dh +
xor [ebp-98h] ebx +
mov ebx [ebp-98h] +
add edi ebx +
ror edi 0Eh +
xor [ebp-88h] edi +
mov edi [ebp-0B8h] +
add edi esi +
rol edi 7 +
xor [ebp-0C0h] edi +
mov edi [ebp-0C0h] +
add edi esi +
rol edi 9 +
xor [ebp-0BCh] edi +
mov edi [ebp-0C0h] +
mov ebx [ebp-0BCh] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0BCh] +
xor [ebp-0B8h] ebx +
mov ebx [ebp-0B8h] +
add ebx edi +
mov edi [ebp-0B0h] +
add edi eax +
ror ebx 0Eh +
xor esi ebx +
rol edi 7 +
xor [ebp-0ACh] edi +
mov ebx [ebp-0ACh] +
mov edi [ebp-0B0h] +
add ebx edi +
rol ebx 9 +
mov edi [ebp-0ACh] +
xor [ebp-0A8h] ebx +
mov ebx [ebp-0A8h] +
add ebx edi +
mov edi [ebp-0A8h] +
rol ebx 0Dh +
xor eax ebx +
add edi eax +
mov ebx [ebp-0A0h] +
ror edi 0Eh +
xor [ebp-0B0h] edi +
mov edi [ebp-9Ch] +
add edi ebx +
rol edi 7 +
xor [ebp-98h] edi +
mov ebx [ebp-98h] +
mov edi [ebp-9Ch] +
add ebx edi +
mov edi [ebp-98h] +
rol ebx 9 +
xor ecx ebx +
mov ebx [ebp-8Ch] +
add edi ecx +
rol edi 0Dh +
xor [ebp-0A0h] edi +
mov edi [ebp-0A0h] +
add edi ecx +
ror edi 0Eh +
xor [ebp-9Ch] edi +
mov edi [ebp-88h] +
add edi ebx +
rol edi 7 +
xor edx edi +
mov edi [ebp-88h] +
add edi edx +
rol edi 9 +
xor [ebp-90h] edi +
mov edi [ebp-90h] +
add edi edx +
rol edi 0Dh +
xor [ebp-8Ch] edi +
mov edi [ebp-90h] +
mov ebx [ebp-8Ch] +
add ebx edi +
ror ebx 0Eh +
xor [ebp-88h] ebx +
dec dword ptr [ebp-7Ch]  +
jnz loc_100B85D  +
mov [ebp-94h] edx +
xor edx edx +
push 40h  +
mov [ebp-0B4h] eax +
mov [ebp-0A4h] ecx +
xor eax eax +
mov [ebp-0C4h] esi +
pop ebx  +
mov ecx [ebp+eax-13Ch] +
add [ebp+eax-0C4h] ecx +
add eax 4 +
cmp eax ebx +
jl loc_100BACF  +
lea edi [ebp-44h] +
inc dword ptr [ebp-11Ch]  +
push 10h  +
lea esi [ebp-0C4h] +
pop ecx  +
movs   +
cmp [ebp-0CCh] ebx +
jbe loc_100BB36  +
mov eax [ebp-74h] +
mov esi [ebp-78h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
inc edx  +
mov [ecx+esi] al +
cmp edx ebx +
jb loc_100BB09  +
sub [ebp-0CCh] ebx +
add [ebp-80h] ebx +
add esi ebx +
add [ebp-84h] ebx +
mov [ebp-78h] esi +
jmp loc_100B82D  +
***
cmp [ebp-0CCh] edx +
jbe loc_100BB66  +
mov esi [ebp-84h] +
mov edi [ebp-80h] +
lea eax [ebp-44h] +
sub esi eax +
sub edi eax +
lea ecx [ebp+edx-44h] +
mov al [ecx+esi] +
xor al [ecx] +
xor [ebp-55h] al +
inc edx  +
mov [ecx+edi] al +
cmp edx [ebp-0CCh] +
jb loc_100BB4E  +
mov edi [ebp-0D0h] +
mov esi [ebp-0D8h] +
mov ebx offset __ImageBase +
movzx ecx byte ptr [ebp-55h] +
mov eax [ebp-70h] +
movzx eax byte ptr [eax+8] +
sub ecx eax +
jz loc_100BC15  +
call sub_100D9B4  +
and edi 0FFFFFFFCh +
lea ecx [edi+0FFFh] +
mov esi eax +
mov eax 0FFFFF000h +
mov edx 0FFFFh +
and esi eax +
and ecx eax +
mov eax [ebp-0D4h] +
mov dword ptr [eax+8] offset sub_1016D68 +
xor eax eax +
mov ebx dword_1042FC4 +
imul ebx ebx +
add ebx 269EC3h +
mov dword_1042FC4 ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100BBB7  +
mov ebx 0FFFFh +
div  ebx +
mov eax edi +
inc edx  +
cmp edi ecx +
mov [ebp-150h] esi +
mov [ebp-154h] edx +
mov dword ptr [ebp-74h] 0 +
jnb loc_100BC0B  +
mov edx [ebp-74h] +
mov [eax] edx +
add eax 4 +
cmp eax ecx +
jb loc_100BBFF  +
mov eax offset sub_1016D68 +
jmp loc_100BCEE  +
mov eax [ebp-0C8h] +
mov ecx ds:off_10051BC +
sub eax [ebp-5Ch] +
mov [ebp-0D0h] eax +
sub ebx ecx +
mov [ebp-70h] ebx +
jnz loc_100BC39  +
test eax eax +
jz loc_100BCE1  +
mov ecx ds:dword_1001168 +
mov ebx [ebp-5Ch] +
sub ebx [ebp-0C8h] +
mov edi [ebp-64h] +
lea eax [esi+edi] +
mov [ebp-74h] eax +
xor esi esi +
dec ecx  +
js loc_100BC7D  +
lea eax [ecx+esi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100116C[eax*4] +
and edx 0FFFFFFFh +
cmp edi edx +
jnb loc_100BC74  +
lea ecx [eax-1] +
jmp loc_100BC79  +
jbe loc_100BC81  +
lea esi [eax+1] +
cmp ecx esi +
jge loc_100BC56  +
mov edi esi +
jmp loc_100BCD9  +
mov edi eax +
jmp loc_100BCD9  +
mov eax ds:dword_100116C[edi*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-74h] +
jnb loc_100BCE1  +
lea esi __ImageBase[ecx+ebx] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_100BCC9  +
dec ecx  +
jz loc_100BCC1  +
dec ecx  +
jnz loc_100BCD2  +
mov edx [ebp-70h] +
jmp loc_100BCD2  +
mov edx [ebp-0D0h] +
jmp loc_100BCD2  +
mov edx [ebp-70h] +
sub edx [ebp-0D0h] +
dec eax  +
dec eax  +
jnz loc_100BCD8  +
add [esi] edx +
inc edi  +
cmp edi ds:dword_1001168 +
jb loc_100BC85  +
mov eax ds:dword_1021358 +
mov eax 703CAB05h +
mov eax [ebp-5Ch] +
mov ecx [ebp-0D4h] +
mov [ecx+8] eax +
mov esi [ebp-148h] +
mov eax [ebp-140h] +
mov ecx [ebp-154h] +
mov edx [ebp-150h] +
mov edi [ebp-144h] +
mov ebx [ebp-14Ch] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 50h +
mov [ebp-3Ch] eax +
mov [ebp-50h] ecx +
mov [ebp-4Ch] edx +
mov [ebp-48h] ebx +
mov [ebp-44h] esi +
mov [ebp-40h] edi +
lea edi [ebp+4] +
mov esi [edi+4] +
sub edi 4 +
push esi  +
mov [ebp-10h] esi +
mov eax esi +
mov eax 0FCEF3DDAh +
mov eax 0FFFFFFFh +
mov edx [esi+8] +
mov ebx ds:off_10051BC +
and dword ptr [ebp-24h] 0 +
and dword ptr [ebp-20h] 0 +
pop ecx  +
mov ecx [esi+4] +
and ecx eax +
and edx eax +
mov eax offset __ImageBase +
add ecx offset __ImageBase +
sub eax ebx +
mov [ebp-14h] eax +
jnz loc_100BDD0  +
and dword ptr [ebp-4] 0 +
test edx edx +
jbe loc_100BFDE  +
mov eax [ebp-4] +
movzx eax byte ptr [eax+ecx] +
sub eax 4016F92Bh +
add [ebp-24h] eax +
add eax [ebp-20h] +
imul eax eax +
ror eax 1Bh +
imul eax eax +
ror eax 1Bh +
mov ebx eax +
imul eax eax +
rol eax 5 +
ror ebx 5 +
xor eax ebx +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-20h] eax +
cmp [ebp-4] edx +
jb loc_100BD89  +
jmp loc_100BFDE  +
lea eax [ecx+edx] +
mov esi ds:dword_100003C +
mov [ebp-1Ch] eax +
mov eax ecx +
sub eax offset __ImageBase +
mov ebx eax +
and ebx 0FFFFF000h +
mov [ebp-4] ebx +
mov ebx eax +
sub ebx [ebp-4] +
add eax edx +
mov edx eax +
and edx 0FFFFF000h +
sub eax edx +
mov [ebp-34h] eax +
mov eax ds:dword_10000A0[esi] +
add eax offset __ImageBase +
mov esi ds:dword_10000A4[esi] +
add esi eax +
mov [ebp-38h] edx +
mov [ebp-30h] esi +
jmp loc_100BE27  +
mov edx [ebp-4] +
cmp [eax] edx +
jnb loc_100BE2B  +
add eax [eax+4] +
cmp eax esi +
jnz loc_100BE1D  +
and dword ptr [ebp-28h] 0 +
cmp eax esi +
jz loc_100BE6C  +
mov edx [ebp-4] +
cmp [eax] edx +
jnz loc_100BE6C  +
mov edx [eax+4] +
sub edx 8 +
shr edx 1 +
mov [ebp-8] edx +
jz loc_100BE6C  +
lea edx [eax+8] +
jmp loc_100BE4F  +
mov edx [ebp-0Ch] +
movzx esi word ptr [edx] +
and esi 0FFFh +
cmp esi ebx +
jnb loc_100BE6C  +
inc dword ptr [ebp-28h]  +
inc edx  +
inc edx  +
mov [ebp-0Ch] edx +
mov edx [ebp-28h] +
cmp edx [ebp-8] +
jnz loc_100BE4C  +
mov ebx 4016F92Bh +
cmp eax [ebp-30h] +
jz loc_100BF95  +
mov edx [ebp-38h] +
cmp [eax] edx +
ja loc_100BF95  +
mov esi [ebp-28h] +
mov edx [eax+4] +
add edx 0FFFFFFF8h +
shr edx 1 +
cmp esi edx +
jnz loc_100BEAF  +
add eax [eax+4] +
cmp eax [ebp-30h] +
jz loc_100BF95  +
mov edx [ebp-38h] +
cmp [eax] edx +
ja loc_100BF95  +
xor esi esi +
jmp loc_100BE88  +
***
mov edx [ebp-38h] +
cmp [eax] edx +
jnz loc_100BECA  +
movzx edx word ptr [eax+esi*2+8] +
and edx 0FFFh +
cmp edx [ebp-34h] +
jnb loc_100BF95  +
mov edx esi +
inc esi  +
mov [ebp-28h] esi +
mov esi 0F000h +
test [eax+edx*2+8] si +
jz loc_100BE71  +
mov esi [eax] +
movzx edx word ptr [eax+edx*2+8] +
and edx 0FFFh +
lea esi __ImageBase[edx+esi] +
mov [ebp-4] esi +
xor edx edx +
sub [ebp-4] ecx +
mov [ebp-0Ch] esi +
mov [ebp-8] edx +
jz loc_100BF42  +
movzx edx byte ptr [edx+ecx] +
sub edx ebx +
add [ebp-24h] edx +
add edx [ebp-20h] +
imul edx edx +
ror edx 1Bh +
imul edx edx +
ror edx 1Bh +
mov esi edx +
imul esi esi +
rol esi 5 +
ror edx 5 +
xor esi edx +
mov edx esi +
add [ebp-24h] edx +
mov edx [ebp-8] +
inc edx  +
mov [ebp-20h] esi +
mov [ebp-8] edx +
cmp edx [ebp-4] +
jb loc_100BF00  +
mov ecx [ebp-0Ch] +
mov ecx [ecx] +
sub ecx [ebp-14h] +
xor esi esi +
mov [ebp-18h] ecx +
movzx ecx byte ptr [ebp+esi-18h] +
sub ecx ebx +
add [ebp-24h] ecx +
add ecx [ebp-20h] +
imul ecx ecx +
ror ecx 1Bh +
imul ecx ecx +
ror ecx 1Bh +
mov edx ecx +
imul ecx ecx +
rol ecx 5 +
ror edx 5 +
xor ecx edx +
add [ebp-24h] ecx +
mov [ebp-20h] ecx +
inc esi  +
cmp esi 4 +
jb loc_100BF4F  +
mov ecx [ebp-0Ch] +
add ecx 4 +
jmp loc_100BE71  +
***
mov eax [ebp-1Ch] +
xor esi esi +
sub eax ecx +
mov [ebp-1Ch] eax +
jz loc_100BFDB  +
movzx eax byte ptr [esi+ecx] +
sub eax ebx +
add [ebp-24h] eax +
add eax [ebp-20h] +
imul eax eax +
ror eax 1Bh +
imul eax eax +
ror eax 1Bh +
mov edx eax +
imul eax eax +
rol eax 5 +
ror edx 5 +
xor eax edx +
add [ebp-24h] eax +
mov [ebp-20h] eax +
inc esi  +
cmp esi [ebp-1Ch] +
jb loc_100BFA1  +
mov esi [ebp-10h] +
add dword ptr [edi+8] 10h +
mov eax [esi+0Ch] +
mov edx [ebp-24h] +
and eax 0FFFFFFFh +
mov ecx [ebp-20h] +
sub edx ds:__ImageBase[eax] +
sbb ecx ds:dword_1000004[eax] +
mov eax edx +
or eax ecx +
jz loc_100C0B3  +
call sub_100D9B4  +
mov edx 0FFFFF000h +
and eax edx +
lea ecx [edi+0Ch] +
and ecx 0FFFFFFFCh +
mov [ebp-1Ch] eax +
lea eax [ecx+0FFFh] +
and eax edx +
mov edx 0FFFFh +
mov [ebp-10h] eax +
xor eax eax +
mov dword ptr [edi+8] offset sub_1016D68 +
mov ebx dword_1042FC4 +
imul ebx ebx +
add ebx 269EC3h +
mov dword_1042FC4 ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100C034  +
mov ebx 0FFFFh +
div  ebx +
inc edx  +
mov eax [ebp-1Ch] +
mov [ebp-4Ch] eax +
mov [ebp-50h] edx +
mov dword ptr [ebp-1Ch] 0 +
jmp loc_100C07D  +
mov eax [ebp-1Ch] +
mov [ecx] eax +
add ecx 4 +
cmp ecx [ebp-10h] +
jb loc_100C075  +
mov dword ptr [edi+8] offset sub_1016D68 +
mov eax [esi] +
mov ecx [ebp-50h] +
mov edx ecx +
shr eax 1 +
and eax 0FFFFFFFh +
shl edx 10h +
mov [ebp-40h] ecx +
add eax offset __ImageBase +
xor edx [eax] +
xor edx dword_1042E6C +
xor edx ecx +
and dword ptr [ebp-50h] 0 +
mov [ebp-44h] edx +
mov eax 938C3EDEh +
mov eax [ebp-3Ch] +
mov esi [ebp-44h] +
mov edx [ebp-4Ch] +
mov ecx [ebp-50h] +
mov edi [ebp-40h] +
mov ebx [ebp-48h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
and dword ptr [ebp-24h] 0 +
jmp loc_100C230  +
***
mov eax [ebp-24h] +
mov edx 0F000h +
inc dword ptr [ebp-24h]  +
test [ecx+eax*2+8] dx +
jz loc_100C21A  +
movzx eax word ptr [ecx+eax*2+8] +
mov edx [ecx] +
and dword ptr [ebp-4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-8] eax +
sub [ebp-8] edi +
mov [ebp-10h] eax +
jz loc_100C2E5  +
mov eax [ebp-4] +
movzx eax byte ptr [edi+eax] +
mov edx esi +
add eax esi +
add [ebp-20h] eax +
add eax [ebp-1Ch] +
mul  edx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
add [ebp-20h] eax +
inc dword ptr [ebp-4]  +
mov eax [ebp-4] +
mov [ebp-1Ch] edx +
cmp eax [ebp-8] +
jb loc_100C2AA  +
mov eax [ebp-10h] +
mov eax [eax] +
sub eax [ebp-14h] +
mov [ebp-8] eax +
xor edi edi +
movzx eax byte ptr [ebp+edi-8] +
mov edx esi +
add eax esi +
add [ebp-20h] eax +
add eax [ebp-1Ch] +
mul  edx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
add [ebp-20h] edx +
mov [ebp-1Ch] edx +
inc edi  +
cmp edi 4 +
jb loc_100C2EF  +
mov edi [ebp-10h] +
add edi 4 +
jmp loc_100C21A  +
***
pushf   +
pushf   +
push ebp  +
mov ebp esp +
sub esp 50h +
mov [ebp+var_3C] eax +
mov [ebp+var_50] ecx +
mov [ebp+var_4C] edx +
mov [ebp+var_48] ebx +
mov [ebp+var_44] esi +
mov [ebp+var_40] edi +
lea esi [ebp+arg_0] +
mov edi [esi+4] +
sub esi 4 +
push edi  +
mov [ebp+var_C] esi +
mov [ebp+var_14] edi +
mov eax edi +
mov eax 7DC74923h +
mov ebx [edi+4] +
mov edx ds:off_10051BC +
mov eax 0FFFFFFFh +
mov edi [edi+8] +
and [ebp+var_24] 0 +
and [ebp+var_20] 0 +
and edi eax +
and ebx eax +
pop ecx  +
mov eax offset __ImageBase +
mov ecx eax +
add edi eax +
sub ecx edx +
mov [ebp+var_18] ecx +
jnz loc_100C8D5  +
and [ebp+var_4] 0 +
test ebx ebx +
jbe loc_100CAC8  +
mov esi 0E7B61E7Ch +
mov ecx esi +
mov eax [ebp+var_4] +
movzx eax byte ptr [edi+eax] +
sub eax 1849E184h +
add [ebp+var_24] eax +
add eax [ebp+var_20] +
mul  ecx +
add eax edx +
mul  ecx +
add eax edx +
mov ecx eax +
imul ecx ecx +
rol ecx 0Ch +
ror eax 0Ch +
xor ecx eax +
add [ebp+var_24] ecx +
inc [ebp+var_4]  +
mov [ebp+var_20] ecx +
cmp [ebp+var_4] ebx +
jb loc_100C896  +
jmp loc_100CAC5  +
mov edx ds:dword_100003C +
lea ecx [ebx+edi] +
mov [ebp+var_1C] ecx +
mov ecx edi +
sub ecx eax +
mov esi ecx +
and esi 0FFFFF000h +
mov [ebp+var_4] esi +
mov esi ecx +
sub esi [ebp+var_4] +
add ecx ebx +
mov ebx ecx +
and ebx 0FFFFF000h +
sub ecx ebx +
mov [ebp+var_34] ecx +
mov ecx ds:dword_10000A0[edx] +
add ecx eax +
mov [ebp+var_38] ebx +
mov ebx ds:dword_10000A4[edx] +
add ebx ecx +
jmp loc_100C923  +
mov eax [ebp+var_4] +
cmp [ecx] eax +
jnb loc_100C927  +
add ecx [ecx+4] +
cmp ecx ebx +
jnz loc_100C919  +
and [ebp+var_28] 0 +
cmp ecx ebx +
jz loc_100C962  +
mov eax [ebp+var_4] +
cmp [ecx] eax +
jnz loc_100C962  +
mov eax [ecx+4] +
sub eax 8 +
shr eax 1 +
jz loc_100C962  +
lea edx [ecx+8] +
mov [ebp+var_4] edx +
mov edx [ebp+var_4] +
movzx edx word ptr [edx] +
and edx 0FFFh +
cmp edx esi +
jnb loc_100C962  +
inc [ebp+var_28]  +
add [ebp+var_4] 2 +
cmp [ebp+var_28] eax +
jnz loc_100C946  +
mov esi 0E7B61E7Ch +
cmp ecx ebx +
jz loc_100CA84  +
mov eax [ebp+var_38] +
cmp [ecx] eax +
ja loc_100CA84  +
mov eax [ecx+4] +
lea edx [eax-8] +
shr edx 1 +
mov eax [ebp+var_28] +
cmp eax edx +
jnz loc_100C9A5  +
add ecx [ecx+4] +
cmp ecx ebx +
jz loc_100CA84  +
mov eax [ebp+var_38] +
cmp [ecx] eax +
ja loc_100CA84  +
and [ebp+var_28] 0 +
jmp loc_100C97A  +
mov edx [ebp+var_38] +
cmp [ecx] edx +
jnz loc_100C9BF  +
movzx eax word ptr [ecx+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp+var_34] +
jnb loc_100CA84  +
mov edx 0F000h +
mov eax [ebp+var_28] +
inc [ebp+var_28]  +
test [ecx+eax*2+8] dx +
jz loc_100C967  +
movzx eax word ptr [ecx+eax*2+8] +
mov edx [ecx] +
and [ebp+var_4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp+var_8] eax +
sub [ebp+var_8] edi +
mov [ebp+var_10] eax +
jz loc_100CA37  +
mov edx esi +
mov eax [ebp+var_4] +
movzx eax byte ptr [edi+eax] +
sub eax 1849E184h +
add [ebp+var_24] eax +
add eax [ebp+var_20] +
mul  edx +
add eax edx +
mov edx esi +
mul  edx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 0Ch +
ror eax 0Ch +
xor edx eax +
mov eax edx +
add [ebp+var_24] eax +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
mov [ebp+var_20] edx +
cmp eax [ebp+var_8] +
jb loc_100C9F3  +
mov eax [ebp+var_10] +
mov eax [eax] +
sub eax [ebp+var_18] +
mov [ebp+var_8] eax +
xor edi edi +
movzx eax byte ptr [ebp+edi+var_8] +
mov edx esi +
sub eax 1849E184h +
add [ebp+var_24] eax +
add eax [ebp+var_20] +
mul  edx +
add eax edx +
mov edx esi +
mul  edx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 0Ch +
ror eax 0Ch +
xor edx eax +
add [ebp+var_24] edx +
mov [ebp+var_20] edx +
inc edi  +
cmp edi 4 +
jb loc_100CA41  +
mov edi [ebp+var_10] +
add edi 4 +
jmp loc_100C967  +
mov eax [ebp+var_1C] +
xor ebx ebx +
sub eax edi +
mov [ebp+var_1C] eax +
jz loc_100CAC5  +
movzx eax byte ptr [edi+ebx] +
sub eax 1849E184h +
add [ebp+var_24] eax +
mov ecx esi +
add eax [ebp+var_20] +
mul  ecx +
add eax edx +
mul  ecx +
add eax edx +
mov ecx eax +
imul ecx ecx +
rol ecx 0Ch +
ror eax 0Ch +
xor ecx eax +
add [ebp+var_24] ecx +
mov [ebp+var_20] ecx +
inc ebx  +
cmp ebx [ebp+var_1C] +
jb loc_100CA90  +
mov esi [ebp+var_C] +
add dword ptr [esi+8] 10h +
mov eax [ebp+var_14] +
mov ecx [ebp+var_24] +
mov eax [eax+0Ch] +
mov edx [ebp+var_20] +
and eax 0FFFFFFFh +
sub ecx ds:__ImageBase[eax] +
sbb edx ds:dword_1000004[eax] +
mov eax ecx +
or eax edx +
jz loc_100CBA1  +
call sub_100D9B4  +
mov edx 0FFFFF000h +
lea ecx [esi+0Ch] +
and ecx 0FFFFFFFCh +
lea edi [ecx+0FFFh] +
and eax edx +
and edi edx +
mov edx 0FFFFh +
mov [ebp+var_1C] eax +
mov dword ptr [esi+8] offset sub_1016D68 +
xor eax eax +
mov ebx dword_1042FC4 +
imul ebx ebx +
add ebx 269EC3h +
mov dword_1042FC4 ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100CB1E  +
mov ebx 0FFFFh +
div  ebx +
mov eax [ebp+var_1C] +
inc edx  +
cmp ecx edi +
mov [ebp+var_4C] eax +
mov eax ecx +
mov [ebp+var_50] edx +
mov [ebp+var_1C] 0 +
jnb loc_100CB6F  +
mov ecx [ebp+var_1C] +
mov [eax] ecx +
add eax 4 +
cmp eax edi +
jb loc_100CB63  +
mov eax [ebp+var_14] +
mov dword ptr [esi+8] offset sub_1016D68 +
mov ecx [ebp+var_50] +
mov edx ecx +
mov eax [eax] +
mov [ebp+var_40] ecx +
and eax 0FFFFFFFh +
shl edx 10h +
add eax offset __ImageBase +
xor edx [eax] +
xor edx dword_1042F3C +
xor edx ecx +
and [ebp+var_50] 0 +
mov [ebp+var_44] edx +
mov eax 333E0031h +
mov edx [ebp+var_4C] +
mov esi [ebp+var_44] +
mov ebx [ebp+var_48] +
mov eax [ebp+var_3C] +
mov ecx [ebp+var_50] +
mov edi [ebp+var_40] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+8] +
mov eax [eax+8] +
mov ecx [eax] +
shr ecx 1 +
and ecx 0FFFFFFFh +
add ecx offset __ImageBase +
push ebx  +
push esi  +
mov [ebp-4] ecx +
push edi  +
mov esi offset Address +
lea ecx [eax+4] +
lea edi [ecx-1] +
cmp edi esi +
jb loc_100CC25  +
mov edx ds:dword_1021358 +
mov eax ds:dword_10049B0 +
imul eax edx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_100CC25  +
mov ebx ds:dword_1021358 +
xor edx edx +
mov eax edi +
sub eax esi +
div  ebx +
mov edx ds:dword_1021358 +
imul edx eax +
lea ebx Address[edx] +
jmp loc_100CC27  +
xor ebx ebx +
test ebx ebx +
jnz loc_100CC33  +
and edi 0FFFF0000h +
mov ebx edi +
sub ecx ebx +
lea eax [ecx-40h] +
test eax eax +
jge loc_100CC3E  +
xor eax eax +
push 40h  +
pop ecx  +
add eax ebx +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100CC43  +
mov eax 0FB634D05h +
cmp ebx esi +
jb loc_100CC8A  +
mov ecx ds:dword_1021358 +
mov eax ds:dword_10049B0 +
imul eax ecx +
lea eax Address[eax] +
cmp ebx eax +
jnb loc_100CC8A  +
mov ecx ds:dword_1021358 +
mov eax ebx +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_1021358 +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_100CC8C  +
xor ecx ecx +
test ecx ecx +
jz loc_100CCB1  +
mov eax ebx +
mov ecx ds:dword_1021358 +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_10049B0 +
mov dword_10430D4[eax*4] 0B4C4h +
jmp loc_100CCCE  +
call ds:__imp_GetLastError  +
mov esi eax +
push 8000h  +
push 0  +
push ebx  +
call ds:VirtualFree  +
push esi  +
call ds:SetLastError  +
mov eax [ebp-4] +
mov ecx [ebp+8] +
pop edi  +
pop esi  +
mov [ecx+8] eax +
pop ebx  +
leave   +
retn 8  +
***
push ebp  +
mov edi edi +
mov ebp esp +
sub esp 14Ch +
mov eax dword_1043424 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [ebp-0F4h] eax +
add eax 0Ch +
push ebx  +
mov [ebp-0F0h] eax +
mov eax [eax] +
mov ebx [eax+4] +
mov edx [eax] +
push esi  +
mov esi [eax+8] +
mov [ebp-0C0h] ecx +
push edi  +
mov ecx 0FFFFFFFh +
and edx ecx +
add eax 0Ch +
mov [ebp-108h] edx +
mov edi offset __ImageBase +
lea edx [eax-1] +
and ebx ecx +
add ebx edi +
and esi ecx +
cmp edx offset Address +
mov [ebp-0CCh] ebx +
mov [ebp-0BCh] esi +
mov [ebp-70h] eax +
mov [ebp-74h] edx +
jb loc_100CD97  +
mov ecx ds:dword_10049B0 +
mov edx ds:dword_1021358 +
imul ecx edx +
lea ecx Address[ecx] +
mov edx [ebp-74h] +
cmp edx ecx +
jnb loc_100CD97  +
mov eax edx +
mov ecx ds:dword_1021358 +
sub eax offset Address +
xor edx edx +
div  ecx +
mov ecx ds:dword_1021358 +
mov edx [ebp-74h] +
imul ecx eax +
lea ecx Address[ecx] +
mov eax [ebp-70h] +
jmp loc_100CD99  +
xor ecx ecx +
test ecx ecx +
jnz loc_100CDA5  +
and edx 0FFFF0000h +
mov ecx edx +
sub eax ecx +
add eax 0FFFFFFC0h +
jns loc_100CDAE  +
xor eax eax +
push 40h  +
add eax ecx +
pop edx  +
mov byte ptr [eax] 0 +
inc eax  +
dec edx  +
jnz loc_100CDB3  +
lea eax [esi+ebx] +
mov [ebp-70h] eax +
mov eax ds:dword_1021358 +
sub eax esi +
mov [ebp-78h] ebx +
lea ebx [eax+1] +
sub [ebp-78h] edi +
xor eax eax +
mov [ebp-60h] ebx +
test ebx ebx +
jz loc_100CE03  +
mov edx dword_1042FC4 +
shr dword ptr [ebp-60h] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_1042FC4 edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp dword ptr [ebp-60h] 0 +
jnz loc_100CDD9  +
xor edx edx +
div  ebx +
push esi  +
lea ebx [edx+ecx] +
mov eax ebx +
push dword ptr [ebp-78h]  +
mov [ebp-0C4h] ebx +
mov eax 0F909A3BEh +
mov eax [ebp-70h] +
test esi esi +
pop ecx  +
pop ecx  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-0F8h] eax +
mov eax [ebp-0CCh] +
mov [ebp-74h] ebx +
mov [ebp-0FCh] ecx +
mov byte ptr [ebp-59h] 0 +
mov [ebp-0C8h] esi +
mov ebx 0FFFFF000h +
mov [ebp-0D8h] eax +
jz loc_100D53C  +
lea esi [ebp-0FCh] +
mov eax 873228EDh +
mov eax [ebp-0F8h] +
mov ecx 0FFFFFFFh +
and dword ptr [ebp-68h] 0 +
and dword ptr [ebp-64h] 0 +
and eax ecx +
mov [ebp-60h] eax +
mov eax [ebp-0FCh] +
and eax ecx +
add eax edi +
mov ecx ds:off_10051BC +
mov [ebp-6Ch] eax +
mov eax edi +
sub eax ecx +
mov [ebp-100h] eax +
jnz loc_100CEF9  +
xor edi edi +
cmp [ebp-60h] edi +
jbe loc_100D152  +
mov ecx 7FFFFFFFh +
mov esi 5737992h +
mov edx esi +
mov eax [ebp-6Ch] +
movzx eax byte ptr [edi+eax] +
add eax esi +
add [ebp-68h] eax +
add eax [ebp-64h] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
add [ebp-68h] edx +
mov [ebp-64h] edx +
inc edi  +
cmp edi [ebp-60h] +
jb loc_100CEAE  +
jmp loc_100D152  +
mov eax [ebp-60h] +
mov ecx [ebp-6Ch] +
add eax ecx +
mov edx ds:dword_100003C +
lea edx dword_10000A0[edx] +
mov esi [edx+4] +
sub ecx edi +
mov [ebp-0D4h] eax +
mov eax [edx] +
add eax edi +
mov edx ecx +
and edx ebx +
mov edi ecx +
sub edi edx +
mov [ebp-0D0h] edi +
mov edi [ebp-60h] +
add ecx edi +
mov edi ecx +
and edi ebx +
add esi eax +
mov ebx eax +
mov [ebp-0ECh] edi +
sub ecx edi +
cmp eax esi +
mov [ebp-0E8h] ecx +
mov [ebp-0E4h] esi +
jz loc_100CF5E  +
cmp [ebx] edx +
jnb loc_100CF5E  +
add ebx [ebx+4] +
cmp ebx [ebp-0E4h] +
jnz loc_100CF4F  +
and dword ptr [ebp-0DCh] 0 +
cmp ebx [ebp-0E4h] +
jz loc_100CF9F  +
cmp [ebx] edx +
jnz loc_100CF9F  +
mov ecx [ebx+4] +
sub ecx 8 +
shr ecx 1 +
jz loc_100CF9F  +
lea eax [ebx+8] +
movzx edx word ptr [eax] +
and edx 0FFFh +
cmp edx [ebp-0D0h] +
jnb loc_100CF9F  +
inc dword ptr [ebp-0DCh]  +
inc eax  +
inc eax  +
cmp [ebp-0DCh] ecx +
jnz loc_100CF7E  +
mov ecx 7FFFFFFFh +
mov esi 5737992h +
mov edx [ebp-0ECh] +
cmp ebx [ebp-0E4h] +
jz loc_100D100  +
cmp [ebx] edx +
ja loc_100D100  +
mov eax [ebx+4] +
lea edi [eax-8] +
shr edi 1 +
cmp [ebp-0DCh] edi +
jnz loc_100CFF2  +
add ebx eax +
cmp ebx [ebp-0E4h] +
jz loc_100D100  +
cmp [ebx] edx +
ja loc_100D100  +
and dword ptr [ebp-0DCh] 0 +
jmp loc_100CFC3  +
***
cmp [ebx] edx +
jnz loc_100D012  +
mov eax [ebp-0DCh] +
movzx eax word ptr [ebx+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp-0E8h] +
jnb loc_100D100  +
mov eax [ebp-0DCh] +
inc dword ptr [ebp-0DCh]  +
mov edi 0F000h +
test [ebx+eax*2+8] di +
jz loc_100CFAF  +
movzx eax word ptr [ebx+eax*2+8] +
mov edx [ebx] +
and eax 0FFFh +
xor edi edi +
lea eax __ImageBase[eax+edx] +
mov [ebp-60h] eax +
sub eax [ebp-6Ch] +
mov [ebp-0D0h] eax +
jz loc_100D098  +
mov eax [ebp-6Ch] +
movzx eax byte ptr [edi+eax] +
mov edx esi +
add eax esi +
add [ebp-68h] eax +
add eax [ebp-64h] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
add [ebp-68h] eax +
inc edi  +
mov [ebp-64h] edx +
cmp edi [ebp-0D0h] +
jb loc_100D04D  +
mov eax [ebp-60h] +
mov eax [eax] +
sub eax [ebp-100h] +
xor edi edi +
mov [ebp-104h] eax +
mov edx esi +
movzx eax byte ptr [ebp+edi-104h] +
add eax esi +
add [ebp-68h] eax +
add eax [ebp-64h] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
add [ebp-68h] edx +
inc edi  +
cmp edi 4 +
mov [ebp-64h] edx +
jb loc_100D0AB  +
mov eax [ebp-60h] +
add eax 4 +
mov [ebp-6Ch] eax +
jmp loc_100CFA9  +
***
mov ebx [ebp-0D4h] +
xor edi edi +
sub ebx [ebp-6Ch] +
jz loc_100D152  +
mov edx esi +
mov eax [ebp-6Ch] +
movzx eax byte ptr [edi+eax] +
add eax esi +
add [ebp-68h] eax +
add eax [ebp-64h] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
add [ebp-68h] edx +
mov [ebp-64h] edx +
inc edi  +
cmp edi ebx +
jb loc_100D10D  +
xor edi edi +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-68h] +
mov [ebp+eax-58h] cl +
inc eax  +
cmp eax 10h +
jb loc_100D156  +
mov eax 179B8F14h +
mov ecx [ebp-54h] +
mov eax [ebp-58h] +
mov esi [ebp-4Ch] +
mov edx [ebp-50h] +
mov [ebp-144h] eax +
mov [ebp-11Ch] eax +
mov eax ds:dword_1002168 +
mov [ebp-148h] eax +
mov eax ds:dword_100216C +
mov [ebp-134h] eax +
mov eax ds:dword_1002170 +
mov [ebp-120h] eax +
mov eax ds:dword_1002174 +
mov [ebp-10Ch] eax +
mov eax [ebp-0C4h] +
mov [ebp-140h] ecx +
mov [ebp-118h] ecx +
lea ecx [ebp-48h] +
sub eax ecx +
mov [ebp-6Ch] eax +
mov eax [ebp-0CCh] +
sub eax [ebp-0C4h] +
mov [ebp-13Ch] edx +
mov [ebp-138h] esi +
mov [ebp-114h] edx +
mov [ebp-110h] esi +
mov [ebp-130h] edi +
mov [ebp-12Ch] edi +
mov [ebp-128h] edi +
mov [ebp-124h] edi +
mov [ebp-0D4h] eax +
lea edi [ebp-0B8h] +
lea esi [ebp-148h] +
push 10h  +
pop ecx  +
movs   +
mov esi [ebp-0B8h] +
mov eax [ebp-0A8h] +
mov ecx [ebp-98h] +
mov edx [ebp-88h] +
mov dword ptr [ebp-60h] 2 +
mov ebx [ebp-0B4h] +
lea edi [esi+edx] +
rol edi 7 +
xor eax edi +
lea edi [esi+eax] +
rol edi 9 +
xor ecx edi +
lea edi [ecx+eax] +
rol edi 0Dh +
xor edx edi +
lea edi [ecx+edx] +
ror edi 0Eh +
xor esi edi +
mov edi [ebp-0A4h] +
add ebx edi +
rol ebx 7 +
xor [ebp-94h] ebx +
mov ebx [ebp-94h] +
add edi ebx +
rol edi 9 +
xor [ebp-84h] edi +
mov edi ebx +
mov ebx [ebp-84h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-84h] +
xor [ebp-0B4h] ebx +
mov ebx [ebp-0B4h] +
add edi ebx +
mov ebx [ebp-90h] +
ror edi 0Eh +
xor [ebp-0A4h] edi +
mov edi [ebp-0A0h] +
add edi ebx +
rol edi 7 +
xor [ebp-80h] edi +
mov edi ebx +
mov ebx [ebp-80h] +
add edi ebx +
rol edi 9 +
xor [ebp-0B0h] edi +
mov edi ebx +
mov ebx [ebp-0B0h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0B0h] +
xor [ebp-0A0h] ebx +
mov ebx [ebp-0A0h] +
add edi ebx +
ror edi 0Eh +
mov ebx [ebp-7Ch] +
xor [ebp-90h] edi +
mov edi [ebp-8Ch] +
add edi ebx +
rol edi 7 +
xor [ebp-0ACh] edi +
mov edi ebx +
mov ebx [ebp-0ACh] +
add edi ebx +
rol edi 9 +
xor [ebp-9Ch] edi +
mov edi ebx +
mov ebx [ebp-9Ch] +
add ebx edi +
mov edi [ebp-9Ch] +
rol ebx 0Dh +
xor [ebp-8Ch] ebx +
mov ebx [ebp-8Ch] +
add edi ebx +
ror edi 0Eh +
xor [ebp-7Ch] edi +
mov edi [ebp-0ACh] +
add edi esi +
rol edi 7 +
xor [ebp-0B4h] edi +
mov edi [ebp-0B4h] +
add edi esi +
rol edi 9 +
xor [ebp-0B0h] edi +
mov ebx [ebp-0B0h] +
mov edi [ebp-0B4h] +
add ebx edi +
mov edi [ebp-0B0h] +
rol ebx 0Dh +
xor [ebp-0ACh] ebx +
mov ebx [ebp-0ACh] +
add ebx edi +
mov edi [ebp-0A4h] +
add edi eax +
ror ebx 0Eh +
xor esi ebx +
rol edi 7 +
xor [ebp-0A0h] edi +
mov ebx [ebp-0A0h] +
mov edi [ebp-0A4h] +
add ebx edi +
mov edi [ebp-0A0h] +
rol ebx 9 +
xor [ebp-9Ch] ebx +
mov ebx [ebp-9Ch] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-9Ch] +
xor eax ebx +
mov ebx [ebp-94h] +
add edi eax +
ror edi 0Eh +
xor [ebp-0A4h] edi +
mov edi [ebp-90h] +
add edi ebx +
rol edi 7 +
xor [ebp-8Ch] edi +
mov edi [ebp-90h] +
mov ebx [ebp-8Ch] +
add ebx edi +
rol ebx 9 +
mov edi [ebp-8Ch] +
xor ecx ebx +
mov ebx [ebp-80h] +
add edi ecx +
rol edi 0Dh +
xor [ebp-94h] edi +
mov edi [ebp-94h] +
add edi ecx +
ror edi 0Eh +
xor [ebp-90h] edi +
mov edi [ebp-7Ch] +
add edi ebx +
rol edi 7 +
xor edx edi +
mov edi [ebp-7Ch] +
add edi edx +
rol edi 9 +
xor [ebp-84h] edi +
mov edi [ebp-84h] +
add edi edx +
rol edi 0Dh +
xor [ebp-80h] edi +
mov ebx [ebp-80h] +
mov edi [ebp-84h] +
add ebx edi +
ror ebx 0Eh +
xor [ebp-7Ch] ebx +
dec dword ptr [ebp-60h]  +
jnz loc_100D23E  +
mov [ebp-88h] edx +
push 40h  +
xor edx edx +
mov [ebp-0A8h] eax +
xor eax eax +
mov [ebp-98h] ecx +
mov [ebp-0B8h] esi +
pop ebx  +
mov ecx [ebp+eax-148h] +
add [ebp+eax-0B8h] ecx +
add eax 4 +
cmp eax ebx +
jl loc_100D492  +
inc dword ptr [ebp-128h]  +
lea esi [ebp-0B8h] +
push 10h  +
lea edi [ebp-48h] +
pop ecx  +
movs   +
cmp [ebp-0C8h] ebx +
jbe loc_100D4FC  +
mov esi [ebp-6Ch] +
mov eax [ebp-0D4h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-48h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-59h] al +
mov [ecx+esi] al +
inc edx  +
cmp edx ebx +
jb loc_100D4CF  +
sub [ebp-0C8h] ebx +
add [ebp-74h] ebx +
add esi ebx +
add [ebp-0D8h] ebx +
mov [ebp-6Ch] esi +
jmp loc_100D20E  +
***
cmp [ebp-0C8h] edx +
jbe loc_100D52C  +
lea eax [ebp-48h] +
mov esi [ebp-0D8h] +
mov edi [ebp-74h] +
sub esi eax +
sub edi eax +
lea ecx [ebp+edx-48h] +
mov al [ecx+esi] +
xor al [ecx] +
xor [ebp-59h] al +
inc edx  +
mov [ecx+edi] al +
cmp edx [ebp-0C8h] +
jb loc_100D514  +
mov ebx 0FFFFF000h +
mov esi [ebp-0BCh] +
mov edi offset __ImageBase +
movzx eax byte ptr [ebp-59h] +
mov ecx [ebp-70h] +
movzx ecx byte ptr [ecx+8] +
sub eax ecx +
jz loc_100D5E0  +
call sub_100D9B4  +
mov ecx [ebp-0F0h] +
mov edi eax +
mov edx 0FFFFh +
mov eax [ebp-0F4h] +
and ecx 0FFFFFFFCh +
mov dword ptr [eax+8] offset sub_1016D68 +
lea esi [ecx+0FFFh] +
and edi ebx +
and esi ebx +
xor eax eax +
mov ebx dword_1042FC4 +
imul ebx ebx +
add ebx 269EC3h +
mov dword_1042FC4 ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100D57D  +
mov ebx 0FFFFh +
div  ebx +
inc edx  +
cmp ecx esi +
mov eax [ebp-0C0h] +
mov [eax+4] edi +
mov [eax] edx +
mov eax ecx +
mov dword ptr [ebp-0C0h] 0 +
jnb loc_100D5D6  +
mov ecx [ebp-0C0h] +
mov [eax] ecx +
add eax 4 +
cmp eax esi +
jb loc_100D5C7  +
mov eax offset sub_1016D68 +
jmp loc_100D6D0  +
mov eax [ebp-0CCh] +
mov ecx ds:off_10051BC +
sub eax [ebp-0C4h] +
mov [ebp-0BCh] eax +
sub edi ecx +
mov [ebp-70h] edi +
jnz loc_100D607  +
test eax eax +
jz loc_100D6B8  +
mov edi [ebp-0C4h] +
mov eax [ebp-78h] +
mov ecx ds:dword_1001168 +
sub edi [ebp-0CCh] +
add eax esi +
mov [ebp-0C0h] eax +
xor esi esi +
dec ecx  +
js loc_100D651  +
lea eax [ecx+esi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100116C[eax*4] +
and edx 0FFFFFFFh +
cmp [ebp-78h] edx +
jnb loc_100D648  +
lea ecx [eax-1] +
jmp loc_100D64D  +
jbe loc_100D655  +
lea esi [eax+1] +
cmp ecx esi +
jge loc_100D629  +
mov ebx esi +
jmp loc_100D6B0  +
mov ebx eax +
jmp loc_100D6B0  +
mov eax ds:dword_100116C[ebx*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-0C0h] +
jnb loc_100D6B8  +
lea esi __ImageBase[ecx+edi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_100D6A0  +
dec ecx  +
jz loc_100D698  +
dec ecx  +
jnz loc_100D6A9  +
mov edx [ebp-70h] +
jmp loc_100D6A9  +
mov edx [ebp-0BCh] +
jmp loc_100D6A9  +
mov edx [ebp-70h] +
sub edx [ebp-0BCh] +
dec eax  +
dec eax  +
jnz loc_100D6AF  +
add [esi] edx +
inc ebx  +
cmp ebx ds:dword_1001168 +
jb loc_100D659  +
mov eax ds:dword_1021358 +
mov eax 0DB0C6F39h +
mov eax [ebp-0C4h] +
mov ecx [ebp-108h] +
add eax ecx +
mov ecx [ebp-0F4h] +
mov [ecx+8] eax +
mov ecx [ebp-4] +
mov eax [ebp-0F0h] +
add dword ptr [eax] 0Ch +
xor ecx ebp +
pop edi  +
pop esi  +
pop ebx  +
call sub_1026F89  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
mov ecx [eax] +
push ebx  +
shr ecx 2 +
and ecx 0FFFFFFFh +
add ecx offset __ImageBase +
push esi  +
mov esi offset Address +
mov [ebp-4] ecx +
push edi  +
lea ecx [eax+4] +
lea edi [ecx-1] +
cmp edi esi +
jb loc_100D75C  +
mov edx ds:dword_1021358 +
mov eax ds:dword_10049B0 +
imul eax edx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_100D75C  +
mov eax edi +
mov ebx ds:dword_1021358 +
xor edx edx +
sub eax esi +
div  ebx +
mov edx ds:dword_1021358 +
imul edx eax +
lea ebx Address[edx] +
jmp loc_100D75E  +
xor ebx ebx +
test ebx ebx +
jnz loc_100D76A  +
and edi 0FFFF0000h +
mov ebx edi +
sub ecx ebx +
lea eax [ecx-40h] +
test eax eax +
jge loc_100D775  +
xor eax eax +
add eax ebx +
push 40h  +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100D77A  +
mov eax 649B2082h +
cmp ebx esi +
jb loc_100D7C1  +
mov eax ds:dword_10049B0 +
mov ecx ds:dword_1021358 +
imul eax ecx +
lea eax Address[eax] +
cmp ebx eax +
jnb loc_100D7C1  +
mov eax ebx +
mov ecx ds:dword_1021358 +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_1021358 +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_100D7C3  +
xor ecx ecx +
test ecx ecx +
jz loc_100D7E8  +
mov ecx ds:dword_1021358 +
mov eax ebx +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_10049B0 +
mov dword_10430D4[eax*4] 0B4C4h +
jmp loc_100D805  +
call ds:__imp_GetLastError  +
push 8000h  +
push 0  +
mov esi eax +
push ebx  +
call ds:VirtualFree  +
push esi  +
call ds:SetLastError  +
mov eax [ebp+8] +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
mov [eax+8] ecx +
add dword ptr [eax+0Ch] 4 +
pop ebx  +
leave   +
retn 8  +
***
call sub_101B294  +
lea eax [ebp+4] +
mov edi edi +
add eax 4 +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax dword_10430F8 +
mov edi edi +
or eax dword_10430FC +
jz loc_100D9D7  +
xor eax eax +
jmp loc_100D9EF  +
push offset dword_10430F8  +
push dword ptr [ebp+8]  +
push offset sub_10193B6  +
push offset dword_1005170  +
call dword_1043100  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_8] +
push eax  +
push 0Ch  +
push offset dword_1005868  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_100DAC2  +
dec eax  +
jz loc_100DAB9  +
push 57h  +
pop eax  +
jmp loc_100DB30  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_100DAE8  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_100DB11  +
cmp dword ptr [esi+10h] 0 +
jz loc_100DB11  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_100DB2E  +
test cl 2 +
jz loc_100DB1F  +
mov esi [esi+10h] +
test esi esi +
jz loc_100DB1F  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
call sub_1027109  +
shr byte ptr [esi] 4 +
sar byte ptr [eax-172FFBCCh] 58h +
add [eax-58h] dh +
or al 0 +
push ebp  +
mov ebp esp +
and esp 0FFFFFFF8h +
sub esp 2Ch +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
mov [esp+24h] ebx +
mov [esp+28h] ebx +
mov [esp+30h] bl +
mov [esp+1Fh] bl +
call ds:HeapSetInformation  +
call sub_1027109  +
shr byte ptr [esi] 4 +
pusha   +
mov eax 0E8300434h +
pop eax  +
add [eax-58h] al +
or al 0 +
mov al 85h +
ror byte ptr [edi] 85h +
wait   +
mov [eax+8] ebx +
mov [eax+4] cl +
mov esi eax +
jmp loc_100DDA7  +
xor esi esi +
cmp esi ebx +
jnz loc_100DDCA  +
call sub_100C827  +
test al 34h +
add al 50h +
js loc_100DDDE  +
add [eax] dl +
call near ptr 0ADE0DE24h  +
xor al 4 +
push eax  +
mov edi 8007000Eh +
jmp loc_100DE98  +
call sub_1021510  +
cmp al 0 +
add [eax+500434CCh] ah +
sal byte ptr [esp+eax] 1 +
cmp byte ptr [eax+58h] 0 +
xor al ch +
inc ebx  +
jmp far ptr 0C004h:34B4FFFFh  +
***
add al ch +
aad  0E9h +
cmp edi ebx +
jl loc_100E0BF  +
call sub_100C827  +
mov ah 34h +
add al 40h +
dec eax  +
add al [eax] +
loopne loc_100DE4E  +
add gs:[eax-0FFBD13Ch] ah +
lea eax [esp+14h] +
push eax  +
call sub_1027C68  +
cmp eax [eax] +
add [eax-3FFEF131h] al +
call sub_100C462  +
sal byte ptr [esp+eax] 0A0h +
les esi [esp+eax] +
jo loc_100DF09  +
add al dl +
lods   +
xor al 4 +
and [ebx-72E7DBBCh] cl +
push eax  +
adc al 52h +
mov [esp+30h] ebx +
mov [esp+34h] ebx +
mov ecx [eax+0Ch] +
push dword ptr [eax+10h]  +
mov eax [esp+1Ch] +
push dword ptr [eax+8]  +
shr ecx 3 +
lea edx [esp+30h] +
call sub_1027C68  +
jl $+2  +
add [eax-0Dh] dl +
loope $+2  +
and al ch +
retf 135h  +
***
call sub_1027109  +
shr byte ptr [esi] 4 +
mov eax 0E8900434h +
pop eax  +
add [eax-58h] al +
or al 0 +
push eax  +
mov eax off_104200C +
cmp eax offset off_104200C +
jz loc_100E17E  +
call sub_100C827  +
mov ah 34h +
add al 50h +
dec eax  +
add al [eax] +
shl byte ptr [eax-3B7FFF9Bh] 1 +
add al 20h +
push edi  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100DA6B  +
call sub_100C827  +
mov ah 34h +
add al 0D0h +
dec eax  +
add al [eax] +
mov al ds:0C4E00065h +
add al 30h +
mov eax off_104200C +
cmp eax offset off_104200C +
jz loc_100E17E  +
call sub_100C827  +
test al 34h +
add al 0C0h +
js loc_100E159  +
add [eax-18h] dh +
add [bx+si] al +
lods   +
xor al 4 +
loopne loc_100E0C7  +
jmp loc_100E15B  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_100E159  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov esi [esi] +
cmp esi ebx +
jnz loc_100E13F  +
call sub_100C462  +
sal byte ptr [esp+eax] 50h +
les esi [esp+eax] +
inc eax  +
xor al 0 +
add [eax-4Ch] al +
pop eax  +
add [eax] dh +
mov off_104200C offset off_104200C +
push dword ptr [esp+18h]  +
call sub_1012176  +
call sub_1021510  +
cmp al 0 +
add [eax-6FFBCB34h] al +
sal byte ptr [esp+eax] 1 +
inc eax  +
js locret_100E1F2  +
add [eax-197918h] dh +
jmp fword ptr [eax+78600434h]  +
***
retn   +
***
mov edi edi +
jmp loc_1011576  +
dec dword_1042010  +
mov eax dword_1042010 +
imul eax eax +
add eax offset unk_10430A0 +
push eax  +
call esi  +
cmp dword_1042010 0 +
ja loc_1011560  +
cmp dword_1043420 0 +
jz loc_101158F  +
push offset CriticalSection  +
call esi  +
and dword_1043420 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp-4] ebx +
mov [ebp-0Ch] ebx +
call ds:GetProcessHeap  +
mov [ebp-10h] eax +
lea eax [ebp-4] +
push eax  +
push 20008h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_10115E9  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_10115E5  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1011664  +
push edi  +
mov edi ds:GetTokenInformation +
lea eax [ebp-8] +
push eax  +
push ebx  +
push ebx  +
push 1  +
push dword ptr [ebp-4]  +
call edi  +
mov esi ds:__imp_GetLastError +
cmp eax ebx +
jnz loc_101160E  +
call esi  +
cmp eax 7Ah +
jnz loc_101163C  +
push dword ptr [ebp-8]  +
push ebx  +
push dword ptr [ebp-10h]  +
call ds:HeapAlloc  +
mov [ebp-0Ch] eax +
cmp eax ebx +
jnz loc_1011629  +
mov esi 8007000Eh +
jmp loc_1011663  +
lea ecx [ebp-8] +
push ecx  +
push dword ptr [ebp-8]  +
push eax  +
push 1  +
push dword ptr [ebp-4]  +
call edi  +
test eax eax +
jnz loc_1011650  +
call esi  +
cmp eax ebx +
jle loc_101164C  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1011663  +
push dword ptr [ebp+8]  +
mov eax [ebp-0Ch] +
push dword ptr [eax]  +
call ConvertSidToStringSidW  +
test eax eax +
jz loc_101163C  +
xor esi esi +
pop edi  +
push dword ptr [ebp-0Ch]  +
push ebx  +
push dword ptr [ebp-10h]  +
call ds:HeapFree  +
cmp [ebp-4] ebx +
jz loc_101167F  +
push dword ptr [ebp-4]  +
call ds:CloseHandle  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx eax +
xor eax eax +
push esi  +
push edi  +
mov edi edx +
mov [ebp-8] eax +
cmp ecx eax +
jz loc_10117A5  +
cmp [ebp+8] eax +
jz loc_10117A5  +
cmp edi eax +
jz loc_10117A5  +
cmp ebx eax +
jz loc_10116C0  +
mov eax [edi] +
mov [ebp-0Ch] eax +
mov eax ecx +
push 6  +
shl eax 3 +
xor edx edx +
pop esi  +
div  esi +
mov esi eax +
add esi 3 +
and esi 0FFFFFFFCh +
mov [edi] esi +
cmp esi [ebp-0Ch] +
jbe loc_10116F0  +
neg ebx  +
sbb ebx ebx +
and ebx 8007007Ah +
mov [ebp-8] ebx +
jmp loc_10117AC  +
mov eax ecx +
push 3  +
xor edx edx +
pop edi  +
div  edi +
mov byte ptr [ebp-2] 0 +
mov byte ptr [ebp-3] 0 +
mov byte ptr [ebp-4] 40h +
mov byte ptr [ebp-1] 40h +
lea eax [ebx+esi*2-8] +
sub ecx edx +
add ecx [ebp+8] +
sub edx 0 +
mov edi ecx +
jz loc_1011798  +
dec edx  +
jz loc_101173C  +
dec edx  +
jnz loc_10117AC  +
mov dl [ebp-3] +
mov bl [ebp-1] +
mov cl [edi+1] +
mov [ebp-2] cl +
and cl 0Fh +
shl cl 2 +
shr dl 6 +
or cl dl +
jmp loc_1011741  +
mov cl [ebp-4] +
mov bl cl +
mov dl [edi] +
movzx esi dl +
shr esi 2 +
movsx si ds:byte_10057C0[esi] +
and dl 3 +
mov [eax] si +
movzx esi byte ptr [ebp-2] +
shl dl 4 +
movzx edx dl +
shr esi 4 +
or edx esi +
movsx dx ds:byte_10057C0[edx] +
movzx ecx cl +
mov [eax+2] dx +
movsx cx ds:byte_10057C0[ecx] +
mov [eax+4] cx +
movzx ecx bl +
movsx cx ds:byte_10057C0[ecx] +
mov [eax+6] cx +
cmp edi [ebp+8] +
jz loc_10117AC  +
sub eax 8 +
mov dl [edi-1] +
sub edi 3 +
mov bl dl +
and bl 3Fh +
jmp loc_1011729  +
***
mov dword ptr [ebp-8] 80070057h +
mov eax [ebp-8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp-4] +
push eax  +
lea eax [ebp-8] +
push eax  +
call sub_103578D  +
mov eax [ebp-4] +
cmp [ebx] eax +
jnb loc_1011E99  +
mov eax 80070057h +
jmp locret_1011EE0  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [eax+esi-1] 0 +
push dword ptr [ebp+8]  +
mov eax [ebp-4] +
mov ecx esi +
call sub_1011F42  +
test eax eax +
jz loc_1011EC0  +
jle locret_1011EE0  +
and eax 0FFFFh +
or eax 80070000h +
jmp locret_1011EE0  +
push esi  +
push esi  +
call loc_103573F  +
test eax eax +
jnz loc_1011ED2  +
mov eax 8007000Eh +
jmp locret_1011EE0  +
mov ecx [ebp-4] +
mov eax esi +
mov [ebx] ecx +
call sub_1011F29  +
xor eax eax +
leave   +
retn 8  +
***
lea ecx [eax+ecx-1] +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+hModule] +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [ebp+arg_4] +
sub edi [eax+0Ch] +
mov eax [eax+10h] +
mov ecx offset __ImageBase +
sub edi ecx +
sar edi 2 +
add esi ecx +
mov edx [esi] +
lea eax __ImageBase[eax+edi*4] +
add ebx ecx +
mov ecx [eax] +
mov [ebp+hModule] edx +
lea eax (__ImageBase+2)[ecx] +
test ecx ecx +
jns loc_1012041  +
movzx eax cx +
mov [ebp+lpProcName] eax +
test edx edx +
jnz loc_10120C0  +
push edx  +
push edx  +
push ebx  +
call LoadLibraryExA  +
mov edi eax +
mov [ebp+hModule] edi +
test edi edi +
jz loc_101209E  +
push 0  +
push edi  +
push esi  +
call InterlockedCompareExchange  +
mov esi eax +
test esi esi +
jnz loc_1012093  +
push 8  +
pop ecx  +
lea edi [ebp+var_28] +
stos   +
mov eax [ebp+hModule] +
mov [ebp+var_14] eax +
mov eax ds:dword_1002164 +
mov [ebp+var_2C] 24h +
mov [ebp+var_20] ebx +
test eax eax +
jz loc_10120C0  +
lea ecx [ebp+var_2C] +
push ecx  +
push 5  +
call eax  +
jmp loc_10120C0  +
push edi  +
call FreeLibrary  +
mov [ebp+hModule] esi +
jmp loc_10120C0  +
call GetLastError  +
cmp eax 7Eh +
jz loc_10120AF  +
cmp eax 0C1h +
jnz loc_1012102  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call InterlockedCompareExchange  +
test eax eax +
jz loc_10120C6  +
mov [ebp+hModule] eax +
cmp [ebp+hModule] 0FFFFFFFFh +
jnz loc_10120CF  +
mov [ebp+var_4] 1 +
jmp loc_1012102  +
cmp [ebp+hModule] 0 +
jz loc_1012102  +
push [ebp+lpProcName]  +
push [ebp+hModule]  +
call GetProcAddress  +
mov esi eax +
test esi esi +
jnz loc_10120F7  +
call GetLastError  +
cmp eax 7Fh +
jz loc_10120F7  +
cmp eax 0B6h +
jnz loc_10120FE  +
mov [ebp+var_4] 1 +
test esi esi +
jnz loc_101210D  +
push [ebp+lpProcName]  +
push ebx  +
call DelayLoadFailureHook  +
mov esi eax +
cmp [ebp+var_4] 0 +
jz loc_1012118  +
mov eax [ebp+arg_4] +
mov [eax] esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
jmp loc_1012136  +
push dword ptr [ebp+8]  +
call _callnewh  +
pop ecx  +
test eax eax +
jz loc_1012145  +
push dword ptr [ebp+8]  +
call malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_1012129  +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1012121  +
***
mov edi edi +
mov edi edi +
mov eax dword_1042F40 +
push offset dword_1042F2C  +
push dword_1042F38  +
mov dword_1042F2C eax +
push offset dword_1042ED4  +
push offset dword_1042EE0  +
push offset dword_1042ECC  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1042EE8 eax +
retn   +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1042F30 eax +
xor ebx ebx +
cmp dword_1042EE4 ebx +
jnz loc_1012345  +
push eax  +
call ds:_exit  +
***
mov eax 5A4Dh +
call sub_1012654  +
mov edi edi +
xor eax eax +
mov edi edi +
mov edi edi +
call sub_101B294  +
call ds:_controlfp  +
call sub_101B294  +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1043424 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1012686  +
test eax ebx +
jz loc_1012686  +
not eax  +
mov dword_1042E70 eax +
jmp loc_10126E1  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_10126CD  +
test dword_1043424 ebx +
jnz loc_10126D2  +
mov esi 0BB40E64Fh +
mov dword_1043424 esi +
not esi  +
mov dword_1042E70 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 54h +
mov [ebp-40h] eax +
mov [ebp-54h] ecx +
mov [ebp-50h] edx +
mov [ebp-4Ch] ebx +
mov [ebp-48h] esi +
lea esi [ebp+4] +
mov [ebp-44h] edi +
mov edi [esi+4] +
mov eax edi +
push edi  +
sub esi 4 +
mov [ebp-0Ch] esi +
mov [ebp-14h] edi +
mov eax 90E62216h +
mov ebx [edi+8] +
mov edx ds:off_10051BC +
mov edi [edi+0Ch] +
and dword ptr [ebp-28h] 0 +
mov eax 0FFFFFFFh +
and dword ptr [ebp-24h] 0 +
and edi eax +
and ebx eax +
pop ecx  +
mov eax offset __ImageBase +
mov ecx eax +
add edi eax +
sub ecx edx +
mov [ebp-18h] ecx +
jnz loc_10127BA  +
and dword ptr [ebp-4] 0 +
test ebx ebx +
jbe loc_1012A2A  +
mov ecx 7FFFFFFFh +
mov esi 0DC05B60Dh +
mov edx esi +
mov eax [ebp-4] +
movzx eax byte ptr [edi+eax] +
sub eax 23FA49F3h +
add [ebp-28h] eax +
add eax [ebp-24h] +
mul  edx +
add eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-28h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-24h] eax +
cmp [ebp-4] ebx +
jb loc_1012759  +
jmp loc_1012A27  +
lea ecx [ebx+edi] +
mov edx edi +
sub edx eax +
mov esi edx +
and esi 0FFFFF000h +
add ebx edx +
mov [ebp-4] esi +
mov esi edx +
mov edx ebx +
sub esi [ebp-4] +
and edx 0FFFFF000h +
mov [ebp-20h] ecx +
mov ecx ds:dword_100003C +
sub ebx edx +
mov [ebp-38h] ebx +
mov ebx ds:dword_10000A0[ecx] +
add ebx eax +
mov eax ds:dword_10000A4[ecx] +
add eax ebx +
mov [ebp-10h] esi +
mov [ebp-3Ch] edx +
mov [ebp-34h] eax +
jmp loc_101280E  +
mov ecx [ebp-4] +
cmp [ebx] ecx +
jnb loc_1012812  +
add ebx [ebx+4] +
cmp ebx eax +
jnz loc_1012804  +
and dword ptr [ebp-2Ch] 0 +
cmp ebx eax +
jz loc_1012858  +
mov ecx [ebp-4] +
cmp [ebx] ecx +
jnz loc_1012858  +
mov ecx [ebx+4] +
sub ecx 8 +
shr ecx 1 +
mov [ebp-8] ecx +
jz loc_1012858  +
lea ecx [ebx+8] +
mov [ebp-4] ecx +
jmp loc_1012839  +
mov esi [ebp-10h] +
mov ecx [ebp-4] +
movzx ecx word ptr [ecx] +
and ecx 0FFFh +
cmp ecx esi +
jnb loc_1012858  +
inc dword ptr [ebp-2Ch]  +
mov ecx [ebp-2Ch] +
add dword ptr [ebp-4] 2 +
cmp ecx [ebp-8] +
jnz loc_1012836  +
mov esi 0DC05B60Dh +
mov ecx 7FFFFFFFh +
jmp loc_101286A  +
mov edx [ebp-3Ch] +
mov eax [ebp-34h] +
cmp ebx eax +
jz loc_10129C4  +
cmp [ebx] edx +
ja loc_10129C4  +
mov eax [ebx+4] +
add eax 0FFFFFFF8h +
shr eax 1 +
cmp [ebp-2Ch] eax +
jnz loc_10128A4  +
add ebx [ebx+4] +
cmp ebx [ebp-34h] +
jz loc_10129C4  +
mov eax [ebp-3Ch] +
cmp [ebx] eax +
ja loc_10129C4  +
and dword ptr [ebp-2Ch] 0 +
jmp loc_101287A  +
***
mov eax [ebp-3Ch] +
cmp [ebx] eax +
jnz loc_10128C1  +
mov eax [ebp-2Ch] +
movzx eax word ptr [ebx+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp-38h] +
jnb loc_10129C4  +
mov eax [ebp-2Ch] +
inc dword ptr [ebp-2Ch]  +
mov edx 0F000h +
test [ebx+eax*2+8] dx +
jz loc_1012864  +
movzx eax word ptr [ebx+eax*2+8] +
mov edx [ebx] +
and dword ptr [ebp-4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-8] eax +
sub [ebp-8] edi +
mov [ebp-10h] eax +
jz loc_1012957  +
mov edx esi +
mov eax [ebp-4] +
movzx eax byte ptr [edi+eax] +
sub eax 23FA49F3h +
add [ebp-28h] eax +
add eax [ebp-24h] +
mul  edx +
add eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-28h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-24h] eax +
mov eax [ebp-4] +
cmp eax [ebp-8] +
jb loc_10128F5  +
mov eax [ebp-10h] +
mov eax [eax] +
sub eax [ebp-18h] +
mov [ebp-1Ch] eax +
xor edi edi +
mov edx esi +
movzx eax byte ptr [ebp+edi-1Ch] +
sub eax 23FA49F3h +
add [ebp-28h] eax +
add eax [ebp-24h] +
mul  edx +
add eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-28h] eax +
mov [ebp-24h] eax +
inc edi  +
cmp edi 4 +
jb loc_1012961  +
mov edi [ebp-10h] +
add edi 4 +
jmp loc_1012864  +
***
xor ebx ebx +
mov eax [ebp-20h] +
sub eax edi +
mov [ebp-20h] eax +
jz loc_1012A27  +
mov edx esi +
movzx eax byte ptr [edi+ebx] +
sub eax 23FA49F3h +
add [ebp-28h] eax +
add eax [ebp-24h] +
mul  edx +
add eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-28h] eax +
mov [ebp-24h] eax +
inc ebx  +
cmp ebx [ebp-20h] +
jb loc_10129D0  +
mov esi [ebp-0Ch] +
add dword ptr [esi+8] 10h +
mov eax [ebp-14h] +
mov eax [eax+4] +
mov ecx [ebp-28h] +
mov edx [ebp-24h] +
and eax 0FFFFFFFh +
sub ecx ds:__ImageBase[eax] +
sbb edx ds:dword_1000004[eax] +
mov eax ecx +
or eax edx +
jz loc_1012B05  +
call sub_100D9B4  +
lea ecx [esi+0Ch] +
mov edx 0FFFFF000h +
and ecx 0FFFFFFFCh +
lea edi [ecx+0FFFh] +
and eax edx +
and edi edx +
mov [ebp-20h] eax +
mov dword ptr [esi+8] offset sub_1016D68 +
xor eax eax +
mov edx 0FFFFh +
mov ebx dword_1042FC4 +
imul ebx ebx +
add ebx 269EC3h +
mov dword_1042FC4 ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_1012A80  +
mov ebx 0FFFFh +
div  ebx +
mov eax [ebp-20h] +
mov [ebp-50h] eax +
mov eax ecx +
inc edx  +
cmp ecx edi +
mov [ebp-54h] edx +
mov dword ptr [ebp-20h] 0 +
jnb loc_1012AD1  +
mov ecx [ebp-20h] +
mov [eax] ecx +
add eax 4 +
cmp eax edi +
jb loc_1012AC5  +
mov eax [ebp-14h] +
mov dword ptr [esi+8] offset sub_1016D68 +
mov eax [eax] +
shr eax 1 +
mov ecx [ebp-54h] +
mov edx ecx +
and eax 0FFFFFFFh +
mov [ebp-44h] ecx +
shl edx 10h +
add eax offset __ImageBase +
xor edx [eax] +
xor edx dword_1042F8C +
xor edx ecx +
and dword ptr [ebp-54h] 0 +
mov [ebp-48h] edx +
mov eax 0B00ACBCAh +
mov ebx [ebp-4Ch] +
mov esi [ebp-48h] +
mov edx [ebp-50h] +
mov ecx [ebp-54h] +
mov eax [ebp-40h] +
mov edi [ebp-44h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
mov eax offset __AddMachineCertToLicenseStore +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset msdrm_dll_import_table  +
call sub_1011FF7  +
pop edx  +
pop ecx  +
jmp eax  +
***
jmp __AddMachineCertToLicenseStore  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_4] +
push ebx  +
mov edx eax +
push esi  +
mov esi [ebp+arg_0] +
shl edx 4 +
push edi  +
mov edi esi +
shr edi 4 +
add edi edx +
sub esi eax +
mov edx edi +
shr edx 10h +
movzx edx dl +
mov ebx [edx+ecx-7Ch] +
mov edx [edx+ecx-78h] +
add eax 4A3E9798h +
mov [ebp+var_8] edx +
xor esi 165CCFAEh +
xor eax esi +
xor eax edi +
mov [ebp+var_C] ebx +
mov edx edi +
shr edx 8 +
movzx ebx dl +
movzx edx al +
xor edx 0D4h +
shr eax 8 +
mov [ebp+var_4] ebx +
mov ebx [ecx+ebx*8-318h] +
mov [ecx+edx*8] ebx +
mov ebx [ebp+var_4] +
mov ebx [ecx+ebx*8-314h] +
mov [ecx+edx*8+4] ebx +
mov edx [ebp+var_C] +
movzx eax al +
xor eax 0C8h +
mov [eax+ecx] edx +
mov edx [ebp+var_8] +
mov [eax+ecx+4] edx +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
lea eax [ecx+eax-1EC67E84h] +
xor eax edi +
sub eax 547C9011h +
xor ecx ecx +
xor esi 0AD80824Eh +
xor edx edx +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
sub eax eax +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
call sub_102E335  +
test eax eax +
jge loc_1017F68  +
mov esi eax +
call sub_1011555  +
mov eax esi +
pop esi  +
retn   +
mov eax ds:off_100570C +
call eax  +
jmp loc_1017F5D  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ecx eax +
sub ecx edx +
movzx esi cl +
mov ebx [edi+esi*8-160h] +
mov esi [edi+esi*8-15Ch] +
mov [ebp+var_4] esi +
lea esi [edx+eax-652BDBCAh] +
mov [ebp+arg_4] esi +
mov esi edx +
sub esi eax +
mov [ebp+var_8] ebx +
mov ebx edx +
add edx 0AF3D2D8Ah +
xor esi ecx +
xor esi 81F94B84h +
xor edx esi +
xor edx [ebp+arg_4] +
shr ebx 4 +
shl eax 4 +
add ebx eax +
xor ebx [ebp+arg_4] +
xor edx 61846C8Fh +
push edx  +
mov edx (offset loc_10047B7+1) +
mov eax edi +
xor ebx ecx +
call sub_1014CA2  +
mov eax ebx +
shr eax 8 +
add al 16h +
movzx ecx bl +
movzx eax al +
cdq   +
xor ebx ebx +
sub ecx 0A5h +
sub ecx eax +
sbb ebx edx +
add ecx [ebp+var_8] +
mov edx [ebp+arg_4] +
adc ebx [ebp+var_4] +
xor esi 0C7C3B722h +
mov [edi+1B8h] ecx +
mov [edi+1BCh] ebx +
xor eax eax +
pop edi  +
or eax esi +
add edx 90916D3Eh +
xor ecx ecx +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax ecx +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
and [ebp+arg_4] 0 +
and [ebp+arg_4] 0 +
lea edx [ebx+edi-4CEDEC56h] +
mov [ebp+var_10] edx +
mov [ebp+var_1C] edx +
lea ecx [ebx+edi+7A4EFEB1h] +
xor ecx edx +
mov [ebp+var_C] ecx +
movzx ecx cl +
movzx edx dl +
xor ecx 61h +
xor edx 3 +
mov edx [eax+edx*8] +
mov edx [edx+ecx] +
mov esi ebx +
xor esi edi +
lea ecx [esi+4A25AF74h] +
mov [ebp+arg_0] ecx +
mov ecx edx +
sub ecx [ebp+arg_0] +
mov [ebp+var_18] esi +
neg ecx  +
sbb cl cl +
inc cl  +
cmp [ebp+arg_0] edx +
mov [ebp+var_1] cl +
setnbe byte ptr [ebp+arg_4+3]  +
lea edx [edi+48CC742h] +
xor edx [ebp+var_C] +
lea ecx [ebx+edi-0BC323D6h] +
xor ecx esi +
xor ecx [ebp+var_10] +
xor edx esi +
lea esi [ebx-7364E2BEh] +
xor esi ecx +
xor esi [ebp+var_C] +
mov [ebp+var_14] ecx +
lea ecx [esi+4BCFCC2Bh] +
mov [ebp+var_8] edx +
push ecx  +
mov edx offset dword_10048C4 +
call sub_1014CA2  +
mov ecx [ebp+var_10] +
shl ebx 4 +
shr edi 4 +
add ebx edi +
xor ebx [ebp+var_8] +
mov edi [ebp+var_14] +
xor ebx edi +
mov edx ebx +
xor edx esi +
xor edx [ebp+var_18] +
xor ecx edx +
cmp byte ptr [ebp+arg_4+3] 1 +
jnz loc_101A48F  +
mov edx [ebp+var_8] +
add edi 0FC75F3FEh +
xor esi esi +
add edx 0C6710720h +
xor ebx ebx +
jmp loc_101A4AB  +
xor esi [ebp+var_8] +
xor edi edi +
xor esi [ebp+var_1C] +
xor ebx 0B85C0E8Dh +
xor esi 0AA65D76Fh +
sub esi 40BDA985h +
xor edx edx +
or esi edx +
or edi ebx +
cmp byte ptr [ebp+arg_4+3] 0 +
movzx ebx cl +
setnz dl  +
cmp [ebp+var_1] 0 +
mov [eax+ebx*8-4D0h] dl +
setnz dl  +
shr ecx 8 +
movzx ecx cl +
mov [ecx+eax-5] dl +
mov edx edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov eax [esp+8+arg_4] +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_4] +
mov ecx ebx +
sub ecx edi +
mov [ebp+var_C] ecx +
xor ecx 0E401F434h +
movzx eax cl +
xor eax 1Ch +
mov edx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_1C] eax +
mov eax ecx +
shr eax 8 +
movzx eax al +
xor eax 5Fh +
mov [ebp+var_20] edx +
mov edx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_24] eax +
mov eax ecx +
shr eax 10h +
movzx eax al +
xor eax 0DBh +
mov [ebp+var_28] edx +
mov edx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_2C] eax +
mov eax ecx +
shr eax 18h +
xor eax 9Ah +
mov eax [edx+eax*4] +
mov [ebp+var_38] eax +
lea eax [ebx+edi+691DCDD5h] +
lea ebx [edi-0CD9EE7Ch] +
xor ebx ecx +
mov [ebp+var_4] eax +
lea eax [ebx-20C07D8Bh] +
mov [ebp+var_30] edx +
push eax  +
mov edx offset dword_1004A94 +
mov eax esi +
mov [ebp+var_8] ecx +
call sub_1014CA2  +
mov ecx [ebp+var_C] +
lea eax [edi-5A4B2A5Ah] +
xor eax [ebp+var_4] +
add edi 0B86F8C4Bh +
xor eax [ebp+var_8] +
xor edi ebx +
xor edi [ebp+var_4] +
xor ecx eax +
xor ecx ebx +
xor ecx 4BF908D0h +
mov ebx ecx +
mov ecx [ebp+arg_0] +
mov [ebp+var_C] ebx +
xor ebx edi +
xor ebx [ebp+var_8] +
mov [ebp+var_14] eax +
add ecx 61E93C53h +
xor ecx edi +
xor ecx eax +
xor ebx 0CE04874Bh +
mov eax ebx +
shr eax 8 +
add al 62h +
movzx eax al +
cdq   +
mov [ebp+var_18] edi +
mov edi eax +
mov eax edx +
mov [ebp+var_10] ebx +
xor bl 0B6h +
mov [ebp+arg_4] eax +
movzx eax bl +
cdq   +
sub eax edi +
mov edi [ebp+arg_4] +
sbb edx edi +
add eax [ebp+var_20] +
mov edi ecx +
adc edx [ebp+var_1C] +
xor ecx [ebp+var_C] +
mov [ebp+arg_0] eax +
mov eax [ebp+var_C] +
xor ecx [ebp+var_4] +
xor eax 0B2E4B19h +
xor ecx [ebp+var_8] +
mov [ebp+arg_4] edx +
xor edx edx +
xor edi 6DAACB0Ch +
or edx edi +
mov edi [ebp+arg_0] +
mov [edi] edx +
mov edx [ebp+var_10] +
xor ebx ebx +
or eax ebx +
mov [edi+4] eax +
mov ebx [ebp+var_28] +
mov eax edx +
shr eax 10h +
movzx eax al +
xor eax 0F5h +
mov [esi+eax*8] ebx +
mov ebx [ebp+var_24] +
mov [esi+eax*8+4] ebx +
mov eax [ebp+var_38] +
shr edx 18h +
xor edx 97h +
mov [edx+esi] eax +
xor eax eax +
mov [edx+esi+4] eax +
mov edx [ebp+arg_4] +
movzx eax cl +
mov [eax+esi+50h] edx +
mov [eax+esi+4Ch] edi +
movzx eax byte ptr [ebp+var_4] +
sub eax 39h +
mov edx eax +
xor edi edi +
add edx [ebp+var_20] +
mov eax ecx +
adc edi [ebp+var_1C] +
shr eax 8 +
movzx eax al +
mov [eax+esi-60h] edx +
mov edx [ebp+var_14] +
mov [eax+esi-5Ch] edi +
shr ecx 10h +
movzx eax cl +
mov ecx [ebp+var_30] +
xor eax 0F6h +
mov [eax+esi] ecx +
mov ecx [ebp+var_2C] +
mov [eax+esi+4] ecx +
mov ecx [ebp+var_18] +
xor eax eax +
xor ecx 3B0C8CABh +
xor esi esi +
xor edx 4F7229CEh +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
xor ebx esi +
push edi  +
mov edi ecx +
movzx eax bl +
mov ecx [edi+eax*8-4D0h] +
mov eax [edi+eax*8-4CCh] +
mov [ebp+var_C] eax +
mov eax ebx +
xor eax 0EDC1B2BAh +
push eax  +
mov edx offset dword_1004AD4 +
mov eax edi +
mov [ebp+var_4] ebx +
mov [ebp+var_10] ecx +
call sub_1014CA2  +
mov eax ebx +
shr eax 10h +
xor eax 0B77Bh +
movzx eax ax +
cdq   +
mov ecx eax +
mov eax edx +
shr ebx 8 +
mov [ebp+var_8] eax +
xor bl 0DFh +
movzx eax bl +
cdq   +
sub eax ecx +
mov ecx [ebp+var_8] +
sbb edx ecx +
add eax [ebp+var_10] +
adc edx [ebp+var_C] +
mov [edi+1B8h] eax +
mov [edi+1BCh] edx +
mov edx [ebp+arg_0] +
sub edx esi +
sub esi [ebp+arg_0] +
xor edx [ebp+var_4] +
xor esi [ebp+var_4] +
xor eax eax +
xor esi [ebp+var_4] +
xor edx 0C1554FDh +
xor esi 9D76F0CCh +
pop edi  +
or eax esi +
sub edx 252B17EFh +
xor ecx ecx +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
and dword ptr [ebp-0D4h] 0 +
jmp loc_101DBAC  +
***
mov eax [ebp-0D4h] +
inc dword ptr [ebp-0D4h]  +
mov edi 0F000h +
test [ebx+eax*2+8] di +
jz loc_101DB98  +
movzx eax word ptr [ebx+eax*2+8] +
and eax 0FFFh +
xor edi edi +
mov edx [ebx] +
lea eax __ImageBase[eax+edx] +
mov [ebp-5Ch] eax +
sub eax [ebp-68h] +
mov [ebp-0D0h] eax +
jz loc_101DC81  +
mov edx esi +
mov eax [ebp-68h] +
movzx eax byte ptr [edi+eax] +
add eax esi +
add [ebp-64h] eax +
add eax [ebp-60h] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
add [ebp-64h] eax +
mov [ebp-60h] edx +
inc edi  +
cmp edi [ebp-0D0h] +
jb loc_101DC36  +
mov eax [ebp-5Ch] +
mov eax [eax] +
sub eax [ebp-100h] +
xor edi edi +
mov [ebp-0F8h] eax +
movzx eax byte ptr [ebp+edi-0F8h] +
add eax esi +
mov edx esi +
add [ebp-64h] eax +
add eax [ebp-60h] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
add [ebp-64h] edx +
inc edi  +
mov [ebp-60h] edx +
cmp edi 4 +
jb loc_101DC94  +
mov eax [ebp-5Ch] +
add eax 4 +
mov [ebp-68h] eax +
jmp loc_101DB92  +
***
mov eax [ebp-70h] +
mov esi [ebp-68h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
mov [ecx+esi] al +
inc edx  +
cmp edx ebx +
jb loc_101E0AF  +
sub [ebp-0C4h] ebx +
add [ebp-74h] ebx +
add esi ebx +
add [ebp-0CCh] ebx +
mov [ebp-68h] esi +
jmp loc_101DDF1  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi eax +
push edi  +
mov edi ecx +
mov ecx [ebp+arg_0] +
mov edx ecx +
shl edx 4 +
shr esi 4 +
add edx esi +
lea esi [ecx+eax] +
shl eax 4 +
shr ecx 4 +
add eax ecx +
lea ebx [esi+1CFF0B9Ch] +
mov [ebp+var_C] esi +
mov esi eax +
xor eax ebx +
xor eax edx +
mov [ebp+var_4] eax +
shr eax 8 +
sub al 55h +
movzx eax al +
movzx ecx dl +
xor esi edx +
cdq   +
mov [ebp+arg_4] ebx +
mov ebx [edi+ecx*8-538h] +
sub ebx eax +
mov eax [edi+ecx*8-534h] +
movzx ecx byte ptr [ebp+var_4] +
sbb eax edx +
xor edx edx +
sub ecx 0E2h +
add ebx ecx +
adc eax edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_C] +
add eax 2FBCF26h +
xor eax esi +
xor eax [ebp+arg_4] +
mov edx offset dword_1004BD4 +
xor eax 9ACB3327h +
push eax  +
mov eax edi +
call sub_1014CA2  +
mov eax [ebp+var_4] +
mov edx [ebp+arg_4] +
mov [edi+1BCh] eax +
xor esi 0F35648B9h +
mov [edi+1B8h] ebx +
xor eax eax +
pop edi  +
or eax esi +
add edx 0CB2F0CB1h +
xor ecx ecx +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
xor eax eax +
jmp loc_101FDB2  +
***
mov edx eax +
inc eax  +
mov [ebp-0E0h] eax +
mov eax 0F000h +
test [edi+edx*2+8] ax +
jz loc_101FD92  +
movzx eax word ptr [edi+edx*2+8] +
mov edx [edi] +
and dword ptr [ebp-64h] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-70h] eax +
sub [ebp-70h] ebx +
mov [ebp-74h] eax +
jz loc_101FE99  +
mov eax [ebp-64h] +
movzx eax byte ptr [eax+ebx] +
add eax esi +
add [ebp-60h] eax +
add eax [ebp-5Ch] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-60h] eax +
inc dword ptr [ebp-64h]  +
mov [ebp-5Ch] eax +
mov eax [ebp-64h] +
cmp eax [ebp-70h] +
jb loc_101FE3B  +
mov eax [ebp-74h] +
mov eax [eax] +
sub eax [ebp-0F4h] +
mov [ebp-0FCh] eax +
xor ebx ebx +
movzx eax byte ptr [ebp+ebx-0FCh] +
add eax esi +
add [ebp-60h] eax +
add eax [ebp-5Ch] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-60h] eax +
mov [ebp-5Ch] eax +
inc ebx  +
cmp ebx 4 +
jb loc_101FEA9  +
mov ebx [ebp-74h] +
add ebx 4 +
jmp loc_101FD92  +
***
mov eax [ebp-6Ch] +
mov esi [ebp-70h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
inc edx  +
cmp edx ebx +
mov [ecx+esi] al +
jb loc_10202F6  +
sub [ebp-68h] ebx +
add [ebp-80h] ebx +
add esi ebx +
add [ebp-0D0h] ebx +
mov [ebp-70h] esi +
jmp loc_102001D  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_4] +
mov eax ebx +
shr eax 4 +
mov edx edi +
shl edx 4 +
add eax edx +
mov [ebp+var_4] eax +
mov ecx edi +
sub ecx ebx +
movzx eax cl +
mov edx [eax+esi+30h] +
mov eax [eax+esi+34h] +
mov [ebp+var_20] eax +
mov eax ecx +
shr eax 8 +
movzx eax al +
xor eax 62h +
mov [ebp+var_24] edx +
mov edx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_8] ecx +
mov [ebp+var_18] eax +
shr ecx 18h +
xor eax eax +
mov [ebp+var_1C] edx +
sub ecx 0B9h +
inc eax  +
xor edx edx +
call sub_103580B  +
mov ecx [ebp+var_24] +
mov eax [eax+ecx] +
mov [ebp+var_3C] eax +
mov eax [ebp+var_8] +
shr eax 10h +
movzx eax al +
xor eax 4Dh +
mov ecx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_30] eax +
and [ebp+var_28] 0 +
mov [ebp+var_34] ecx +
mov ecx [ebp+var_4] +
lea eax [edi+5AB04F86h] +
xor eax [ebp+var_8] +
mov edi [ebp+var_4] +
xor ecx eax +
xor ecx [ebp+var_4] +
mov [ebp+var_14] eax +
mov eax ecx +
shr eax 8 +
sub al 75h +
movzx eax al +
mov [ebp+var_C] ecx +
cdq   +
movzx ecx cl +
sub ecx 8Bh +
mov [ebp+var_10] eax +
mov [ebp+var_2C] ecx +
mov eax ecx +
mov ecx [ebp+var_10] +
xor edi edi +
xor edi [ebp+var_8] +
sub eax ecx +
mov ecx [ebp+var_28] +
sbb ecx edx +
add eax [ebp+var_1C] +
adc ecx [ebp+var_18] +
mov [ebp+var_2C] eax +
lea eax [ebx-7873C5CAh] +
xor ebx [ebp+var_C] +
xor eax edi +
xor eax [ebp+var_14] +
xor ebx edi +
xor ebx [ebp+arg_4] +
mov [ebp+var_28] ecx +
mov [ebp+var_10] eax +
xor eax 0CE1EB862h +
mov [ebp+arg_4] ebx +
xor ecx ecx +
add ebx 52D3FBB8h +
xor edx edx +
or eax edx +
or ecx ebx +
mov ebx [ebp+var_2C] +
mov [ebx] ecx +
mov [ebx+4] eax +
mov eax [ebp+var_10] +
xor eax [ebp+var_C] +
mov edx offset dword_1004C54 +
xor eax [ebp+var_8] +
xor eax 0E954ABD6h +
mov [ebp+var_C] eax +
add eax 3C93C216h +
push eax  +
mov eax esi +
call sub_1014CA2  +
mov eax [ebp+arg_4] +
xor eax [ebp+var_10] +
mov edx [ebp+var_24] +
xor eax [ebp+var_4] +
xor eax [ebp+var_8] +
movzx ecx al +
mov [ecx+esi+0E5h] edx +
mov edx [ebp+var_20] +
mov [ecx+esi+0E9h] edx +
mov edx [ebp+var_3C] +
mov ecx eax +
shr ecx 8 +
movzx ecx cl +
xor ecx 0FEh +
mov [esi+ecx] edx +
xor edx edx +
mov [esi+ecx+4] edx +
mov edx [ebp+var_28] +
mov ecx eax +
shr ecx 10h +
movzx ecx cl +
xor ecx 0FDh +
mov [esi+ecx+4] edx +
mov [ecx+esi] ebx +
movzx ecx word ptr [ebp+var_4] +
sub ecx 41B8h +
xor edx edx +
add ecx [ebp+var_1C] +
adc edx [ebp+var_18] +
shr eax 18h +
xor eax 1Dh +
mov [eax+esi] ecx +
mov [eax+esi+4] edx +
mov edx [ebp+var_14] +
movzx eax byte ptr [ebp+var_4] +
movzx ecx dl +
xor eax ecx +
movzx ecx byte ptr [ebp+arg_4] +
xor eax ecx +
movzx ecx byte ptr [ebp+var_C] +
xor eax ecx +
mov ecx [ebp+var_34] +
xor eax 0E8h +
mov [esi+eax*8] ecx +
mov ecx [ebp+var_30] +
mov [esi+eax*8+4] ecx +
xor edi 0D9EF0D05h +
xor eax eax +
or eax edi +
pop edi  +
xor edx 0F4206F1Ch +
xor ecx ecx +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov edx [ebp+arg_0] +
push ebx  +
lea ebx [edx+1690333Dh] +
movzx eax bl +
xor eax 0C4h +
cmp byte ptr [ecx+eax] 0 +
mov eax ebx +
setnz [ebp+var_1]  +
shr eax 8 +
mov [ebp+var_10] ecx +
movzx eax al +
xor eax 0D6h +
cmp byte ptr [ecx+eax*8] 0 +
push esi  +
mov esi [ebp+arg_4] +
setnz byte ptr [ebp+arg_4+3]  +
and [ebp+var_14] 0 +
push edi  +
lea edi [edx+esi-50677E96h] +
lea ecx [esi-96BEAD0h] +
xor edi ecx +
mov [ebp+var_8] ecx +
mov ecx edx +
xor edi ebx +
shl ecx 4 +
lea eax [esi+3DF0389Bh] +
xor eax ebx +
mov ebx esi +
shr ebx 4 +
add ecx ebx +
xor ecx eax +
xor ecx [ebp+var_8] +
sub edx esi +
mov [ebp+var_C] eax +
mov esi [ebp+var_C] +
xor ecx 8C73D884h +
xor edx edi +
mov ebx ecx +
xor edx esi +
xor ecx ecx +
xor edx 5E049BBEh +
or ebx ecx +
mov ecx [ebp+var_14] +
add edx 2C414E20h +
lea eax [edi+2ECC345Bh] +
or ecx eax +
mov eax [ebp+var_10] +
push edx  +
mov edx offset dword_1004C60 +
mov [ebp+var_14] ecx +
call sub_1014CA2  +
cmp byte ptr [ebp+arg_4+3] 0 +
jnz loc_1021431  +
cmp [ebp+var_1] 0 +
jnz loc_1021431  +
mov eax [ebp+var_8] +
lea edx [eax-71BFB832h] +
xor eax eax +
add esi 3BDC15EFh +
xor ecx ecx +
or eax esi +
or edx ecx +
jmp loc_1021436  +
mov edx [ebp+var_14] +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
pushf   +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
lea ebx [eax+26765742h] +
push esi  +
mov esi [ebp+arg_0] +
xor esi eax +
mov eax ebx +
shr eax 10h +
add eax 4B4Eh +
movzx eax ax +
cdq   +
push edi  +
movzx edi bl +
mov edi [ecx+edi*8-678h] +
sub edi eax +
movzx eax bl +
mov eax [ecx+eax*8-674h] +
sbb eax edx +
mov [ebp+var_8] eax +
mov [ebp+var_4] ebx +
shr ebx 8 +
xor bl 6Ah +
movzx eax bl +
cdq   +
add edi eax +
mov eax [ebp+var_8] +
adc eax edx +
mov [ecx+1BCh] eax +
mov eax [ebp+arg_0] +
mov [ecx+1B8h] edi +
mov edi [ebp+arg_4] +
shr eax 4 +
mov edx edi +
shl edx 4 +
add eax edx +
xor eax esi +
xor eax [ebp+var_4] +
mov edx offset dword_1004D24 +
xor eax 0FCA770E6h +
push eax  +
mov eax ecx +
call sub_1014CA2  +
mov eax edi +
sub eax [ebp+arg_0] +
xor ecx ecx +
xor eax [ebp+var_4] +
xor esi 858DDC1Ah +
add eax 4C547910h +
xor edx edx +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx eax +
shr ecx 4 +
shl eax 4 +
shl ebx 4 +
add ebx ecx +
mov ecx [ebp+arg_0] +
shr ecx 4 +
add ecx eax +
mov [ebp+var_4] ecx +
mov eax ebx +
shr eax 10h +
xor al 63h +
movzx eax al +
cdq   +
movzx ecx bl +
push edi  +
mov edi [esi+ecx*8+110h] +
sub edi eax +
mov eax [esi+ecx*8+114h] +
sbb eax edx +
mov ecx ebx +
shr ecx 8 +
movzx ecx cl +
sub ecx 28h +
xor edx edx +
add edi ecx +
mov ecx [ebp+arg_0] +
adc eax edx +
mov [ebp+var_8] eax +
mov eax [ebp+arg_4] +
lea eax [ecx+eax+7951EBF1h] +
xor eax [ebp+var_4] +
mov edx (offset loc_1004D47+5) +
xor eax ebx +
xor eax 4CE82BF6h +
push eax  +
mov eax esi +
call sub_1014CA2  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_4] +
mov [esi+1BCh] eax +
mov eax ecx +
xor eax ebx +
mov [esi+1B8h] edi +
xor esi esi +
sub eax 0C98F172h +
pop edi  +
or eax esi +
xor edx edx +
add ecx 2080C05Dh +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov edx [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
lea ebx [ecx-295A8B45h] +
movzx eax bl +
xor eax 0D6h +
push edi  +
mov edi [esi+eax*8] +
mov eax [esi+eax*8+4] +
shl edx 4 +
shr ecx 4 +
mov [ebp+var_10] edi +
lea edi [ecx+edx] +
mov [ebp+var_C] eax +
mov eax edi +
xor eax 0D2153BA7h +
push eax  +
mov edx offset dword_1004E38 +
mov eax esi +
mov [ebp+var_8] ebx +
mov [ebp+var_4] edi +
call sub_1014CA2  +
mov ecx edi +
xor ecx ebx +
mov eax ecx +
shr eax 8 +
xor eax 0A8B6h +
movzx eax ax +
cdq   +
movzx edi cl +
xor ebx ebx +
sub edi 51h +
sub edi eax +
mov eax [ebp+arg_4] +
sbb ebx edx +
add edi [ebp+var_10] +
lea edx [eax+9FB49B8h] +
adc ebx [ebp+var_C] +
xor edx [ebp+var_4] +
mov [esi+1B8h] edi +
xor edx [ebp+var_8] +
mov [esi+1BCh] ebx +
mov esi [ebp+var_4] +
xor esi ecx +
xor esi [ebp+var_4] +
xor eax eax +
xor esi 0B2658D70h +
pop edi  +
or eax esi +
sub edx 2E867673h +
xor ecx ecx +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ebx +
xor esi eax +
push edi  +
lea eax [esi+73AB3B4Bh] +
mov edi ecx +
push eax  +
mov edx offset dword_1004F60 +
mov eax edi +
call sub_1014CA2  +
lea edx [ebx-3F6C2748h] +
mov eax ebx +
sub eax [ebp+arg_4] +
mov ecx edx +
mov [ebp+var_4] eax +
xor eax esi +
xor ecx 0AE604040h +
xor eax 45380108h +
mov [ebp+arg_4] ecx +
mov [ebp+var_C] eax +
mov [ebp+var_8] edx +
add bl 5Fh +
movzx eax al +
movzx edx dl +
movzx ecx bl +
xor ecx edx +
xor ecx eax +
mov eax [ebp+arg_4] +
xor ecx 45h +
and dword ptr [edi+ecx*8+4] 0 +
mov [edi+ecx*8] eax +
mov eax [ebp+var_4] +
xor eax [ebp+var_8] +
mov ecx [ebp+var_C] +
xor eax esi +
xor esi esi +
xor eax 0D3D350h +
pop edi  +
or eax esi +
xor edx edx +
add ecx 5CCA3113h +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
cmp ecx dword_1043424 +
mov edi edi +
mov edi edi +
pushf   +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
shr eax 4 +
mov edx esi +
shl edx 4 +
lea ebx [edx+eax] +
movzx edx bl +
xor edx 70h +
mov eax [ecx+edx*8+4] +
mov [ebp+var_4] eax +
lea eax [esi+5822B50Dh] +
push edi  +
mov edi [ecx+edx*8] +
mov [ebp+var_4] eax +
xor eax 2008A1E2h +
push eax  +
mov edx (offset loc_100511B+1) +
mov eax ecx +
call sub_1014CA2  +
mov edx [ebp+arg_4] +
lea ecx [esi+edx] +
xor esi [ebp+var_4] +
lea eax [ecx-3B0E43ABh] +
xor eax ebx +
xor esi ebx +
xor esi edx +
mov edx eax +
shr edx 8 +
movzx edx dl +
mov [ebp+arg_4] esi +
xor edx 79h +
xor esi 0E767C9CAh +
sub edx esi +
add ecx 0AF63B0F4h +
xor ecx eax +
xor ecx [ebp+var_4] +
movzx esi al +
xor edx [esi+edi-3Fh] +
movzx esi cl +
mov [esi+edi-8] edx +
mov edx ebx +
xor edx [ebp+arg_4] +
xor ebx ecx +
xor ebx [ebp+arg_4] +
xor edx eax +
xor ebx 26A0B3D3h +
pop edi  +
xor eax eax +
xor edx 8ED5C3CAh +
xor ecx ecx +
or eax ebx +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov eax ds:dword_1021358 +
imul eax edx +
lea eax Address[eax] +
mov [ebp-5Ch] eax +
jmp loc_1028D1A  +
***
mov [ebp-5Ch] eax +
jmp loc_1028D59  +
***
xor eax eax +
jmp loc_1028FD9  +
***
mov edx eax +
inc eax  +
mov [ebp-0E0h] eax +
mov eax 0F000h +
test [edi+edx*2+8] ax +
jz loc_1028FB9  +
movzx eax word ptr [edi+edx*2+8] +
mov edx [edi] +
and dword ptr [ebp-60h] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-70h] eax +
sub [ebp-70h] ebx +
mov [ebp-74h] eax +
jz loc_10290B2  +
mov edx esi +
mov eax [ebp-60h] +
movzx eax byte ptr [eax+ebx] +
add eax esi +
add [ebp-68h] eax +
add eax [ebp-64h] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
add [ebp-68h] eax +
inc dword ptr [ebp-60h]  +
mov eax [ebp-60h] +
mov [ebp-64h] edx +
cmp eax [ebp-70h] +
jb loc_1029062  +
mov eax [ebp-74h] +
mov eax [eax] +
sub eax [ebp-0F8h] +
mov [ebp-0F4h] eax +
xor ebx ebx +
mov edx esi +
movzx eax byte ptr [ebp+ebx-0F4h] +
add eax esi +
add [ebp-68h] eax +
add eax [ebp-64h] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
add [ebp-68h] edx +
inc ebx  +
mov [ebp-64h] edx +
cmp ebx 4 +
jb loc_10290C2  +
mov ebx [ebp-74h] +
add ebx 4 +
jmp loc_1028FB9  +
***
mov esi [ebp-70h] +
mov eax [ebp-6Ch] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
inc edx  +
cmp edx ebx +
mov [ecx+esi] al +
jb loc_10294F2  +
sub [ebp-0C8h] ebx +
add [ebp-78h] ebx +
add esi ebx +
add [ebp-7Ch] ebx +
mov [ebp-70h] esi +
jmp loc_1029216  +
***
mov edi edi +
mov edi edi +
sub esp 328h +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 78h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_20] ecx +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_0] +
lea esi [edi+eax-5904B67h] +
mov edx edi +
shl edx 4 +
mov ebx eax +
shr ebx 4 +
add edx ebx +
mov [ebp+var_1C] edx +
lea edx [eax-7F77CD7Ch] +
xor edx esi +
mov [ebp+var_C] edx +
mov edx esi +
shr edx 8 +
movzx edx dl +
mov ebx [edx+ecx+30h] +
mov edx [edx+ecx+34h] +
mov [ebp+var_24] edx +
mov edx esi +
shr edx 18h +
xor edx 86h +
mov [ebp+var_4] esi +
mov esi [edx+ecx] +
mov edx [edx+ecx+4] +
mov [ebp+var_64] edx +
movzx edx byte ptr [ebp+var_1C] +
xor edx 0A1h +
mov [ebp+var_68] esi +
mov esi eax +
sub esi edi +
xor edi [ebp+var_C] +
xor esi [ebp+var_1C] +
xor edi [ebp+var_1C] +
xor esi [ebp+var_4] +
mov [ebp+var_28] ebx +
mov ebx [ecx+edx*8] +
mov edx [ecx+edx*8+4] +
mov [ebp+var_4C] edx +
mov edx [ebp+var_24] +
mov [ebp+var_74] edx +
movzx edx byte ptr [ebp+var_4] +
xor edi eax +
mov [ebp+var_10] edi +
mov edi [edx+ecx-0F3h] +
mov edx [edx+ecx-0EFh] +
add eax 0EAEE4094h +
mov [ebp+var_8] esi +
xor eax [ebp+var_8] +
mov esi [ebp+var_28] +
xor eax [ebp+var_C] +
mov [ebp+var_44] edx +
mov edx [ebp+var_4] +
shr edx 10h +
movzx edx dl +
mov [ebp+var_14] eax +
xor eax eax +
push eax  +
mov ecx [edx+ecx+2Fh] +
movzx edx byte ptr [ebp+var_8] +
push ecx  +
mov [ebp+var_48] edi +
xor edi edi +
push edi  +
push dword ptr [edx+ebx-5Ah]  +
mov [ebp+var_40] ecx +
call sub_1035850  +
mov ecx [ebp+var_C] +
xor ecx 0E834B4B8h +
mov [ebp+var_6C] edx +
mov edx esi +
mov ecx [ecx+edx] +
xor edx edx +
add eax ecx +
mov ecx [ebp+var_6C] +
adc ecx edx +
mov [ebp+var_34] ecx +
mov ecx [ebp+var_8] +
shr ecx 8 +
movzx edx cl +
mov ecx esi +
mov edx [edx+ecx-66h] +
mov [ebp+var_60] edx +
mov edx [ebp+var_8] +
shr edx 10h +
movzx edx dl +
xor edx 8Ch +
mov [edx+ecx] eax +
mov ecx [ebp+var_8] +
xor eax eax +
push eax  +
push [ebp+var_40]  +
shr ecx 18h +
push edi  +
push dword ptr [ecx+ebx-50h]  +
mov [ebp+var_5C] edi +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_34] +
mov [ebp+var_2C] edx +
adc [ebp+var_2C] ecx +
add eax [ebp+var_60] +
mov edx [ebp+var_2C] +
adc edx ecx +
mov ecx [ebp+arg_4] +
add ecx 0D3FCAEFFh +
xor ecx [ebp+var_10] +
mov [ebp+var_5C] edx +
xor ecx [ebp+var_8] +
movzx edx byte ptr [ebp+var_10] +
xor edx 35h +
mov [ebp+arg_4] ecx +
mov ecx esi +
mov edx [edx+ecx] +
mov [ebp+var_58] edx +
mov edx [ebp+var_10] +
shr edx 8 +
movzx edx dl +
xor edx 6Fh +
mov [edx+ecx] eax +
mov eax [ebp+var_10] +
shr eax 10h +
movzx ecx al +
xor eax eax +
push eax  +
push [ebp+var_40]  +
mov [ebp+var_54] edi +
push edi  +
push dword ptr [ecx+ebx-90h]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_5C] +
mov [ebp+var_2C] edx +
adc [ebp+var_2C] ecx +
add eax [ebp+var_58] +
mov edx [ebp+var_2C] +
adc edx ecx +
mov ecx [ebp+var_10] +
shr ecx 18h +
xor ecx 0F2h +
mov [ebp+var_2C] edx +
mov edx esi +
mov ecx [ecx+edx] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_14] +
xor ecx [ebp+var_10] +
mov [ebp+var_6C] edi +
xor ecx [ebp+var_4] +
xor ecx 0F21F7583h +
mov [ebp+var_18] ecx +
movzx ecx byte ptr [ebp+var_14] +
xor ecx 79h +
mov [edx+ecx] eax +
mov eax [ebp+var_14] +
shr eax 8 +
movzx ecx al +
xor eax eax +
push eax  +
push [ebp+var_40]  +
push edi  +
push dword ptr [ecx+ebx-20h]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_14] +
shr ecx 10h +
movzx ecx cl +
mov ecx [ecx+esi-47h] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_14] +
shr ecx 18h +
mov [ecx+esi-10h] eax +
mov eax [ebp+arg_4] +
xor eax [ebp+var_14] +
movzx ecx byte ptr [ebp+arg_4] +
xor eax [ebp+var_1C] +
xor ecx 0Dh +
xor [ebp+var_4] eax +
xor eax eax +
push eax  +
push [ebp+var_40]  +
mov [ebp+var_24] edx +
push edi  +
push dword ptr [ecx+ebx]  +
mov [ebp+var_6C] edi +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+arg_4] +
shr ecx 8 +
movzx ecx cl +
mov ecx [ecx+esi-41h] +
mov [ebp+var_70] ecx +
mov ecx [ebp+arg_4] +
shr ecx 10h +
movzx ecx cl +
mov [ecx+esi-7Dh] eax +
mov eax [ebp+var_18] +
mov ecx eax +
xor ecx [ebp+arg_4] +
mov [ebp+var_2C] edx +
xor ecx [ebp+var_C] +
mov [ebp+var_6C] edi +
xor [ebp+var_1C] ecx +
xor ecx ecx +
push ecx  +
push [ebp+var_40]  +
push edi  +
push dword ptr [ebx+eax-36AD0A04h]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_18] +
xor ecx [ebp+var_8] +
mov [ebp+var_24] edx +
xor ecx [ebp+var_C] +
mov [ebp+var_6C] edi +
xor ecx [ebp+var_4] +
mov [ebp+var_C] ecx +
movzx ecx byte ptr [ebp+var_4] +
xor ecx 56h +
mov ecx [ecx+esi] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_4] +
shr ecx 8 +
movzx ecx cl +
mov [ecx+esi-1] eax +
mov eax [ebp+var_4] +
shr eax 10h +
movzx ecx al +
xor eax eax +
push eax  +
push [ebp+var_40]  +
push edi  +
push dword ptr [ecx+ebx-46h]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_4] +
shr ecx 18h +
mov ecx [ecx+esi-44h] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_10] +
xor ecx [ebp+var_8] +
mov [ebp+var_2C] edx +
xor ecx [ebp+var_1C] +
mov [ebp+var_6C] edi +
xor ecx [ebp+var_4] +
mov [ebp+var_8] ecx +
movzx ecx byte ptr [ebp+var_1C] +
xor ecx 8 +
mov [esi+ecx] eax +
mov eax [ebp+var_1C] +
shr eax 8 +
movzx ecx al +
xor eax eax +
push eax  +
push [ebp+var_40]  +
xor ecx 0AFh +
push edi  +
push dword ptr [ecx+ebx]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_1C] +
shr ecx 10h +
movzx ecx cl +
xor ecx 75h +
mov ecx [ecx+esi] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_1C] +
shr ecx 18h +
mov [ecx+esi+44h] eax +
mov eax [ebp+var_14] +
xor eax [ebp+var_10] +
movzx ecx byte ptr [ebp+var_C] +
xor eax [ebp+var_C] +
xor ecx 34h +
xor eax [ebp+var_1C] +
mov [ebp+var_24] edx +
mov [ebp+var_10] eax +
xor eax eax +
push eax  +
push [ebp+var_40]  +
mov [ebp+var_6C] edi +
push edi  +
push dword ptr [ecx+ebx]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov [ebp+var_2C] edx +
mov ecx [ebp+var_C] +
shr ecx 8 +
movzx ecx cl +
xor ecx 11h +
mov ecx [ecx+esi] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_C] +
shr ecx 10h +
movzx ecx cl +
xor ecx 8Bh +
mov [esi+ecx] eax +
mov ecx [ebp+var_C] +
xor eax eax +
push eax  +
push [ebp+var_40]  +
shr ecx 18h +
push edi  +
push dword ptr [ecx+ebx-0B2h]  +
mov [ebp+var_6C] edi +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+arg_4] +
xor ecx [ebp+var_14] +
mov [ebp+var_24] edx +
xor ecx [ebp+var_8] +
mov [ebp+var_6C] edi +
xor ecx [ebp+var_C] +
mov [ebp+var_14] ecx +
movzx ecx byte ptr [ebp+var_8] +
xor ecx 0EDh +
mov ecx [ecx+esi] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_8] +
shr ecx 8 +
movzx ecx cl +
xor ecx 57h +
mov [esi+ecx] eax +
mov eax [ebp+var_8] +
shr eax 10h +
movzx ecx al +
xor eax eax +
push eax  +
push [ebp+var_40]  +
push edi  +
push dword ptr [ecx+ebx-0BFh]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_8] +
shr ecx 18h +
xor ecx 86h +
mov [esi+ecx] eax +
mov eax [ebp+var_18] +
xor eax [ebp+arg_4] +
movzx ecx byte ptr [ebp+var_10] +
xor eax [ebp+var_10] +
xor ecx 48h +
xor eax [ebp+var_8] +
mov [ebp+var_2C] edx +
mov [ebp+arg_4] eax +
xor eax eax +
push eax  +
push [ebp+var_40]  +
push edi  +
push dword ptr [ecx+ebx]  +
call sub_1035850  +
mov ecx [ebp+var_10] +
shr ecx 8 +
mov [ebp+var_54] edx +
movzx ecx cl +
mov ecx [ecx+esi-15h] +
xor edx edx +
add eax ecx +
adc [ebp+var_54] edx +
mov edx [ebp+var_54] +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_6C] edi +
adc edx ecx +
mov ecx [ebp+var_10] +
shr ecx 10h +
movzx ecx cl +
mov ecx [ecx+esi+2Fh] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_10] +
shr ecx 18h +
mov [ecx+esi+20h] eax +
mov eax [ebp+var_18] +
xor eax [ebp+var_14] +
movzx ecx byte ptr [ebp+var_14] +
xor eax [ebp+var_10] +
xor ecx 0A1h +
xor eax [ebp+var_4] +
mov [ebp+var_24] edx +
mov [ebp+var_18] eax +
xor eax eax +
push eax  +
push [ebp+var_40]  +
push edi  +
push dword ptr [ecx+ebx]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_14] +
shr ecx 8 +
movzx ecx cl +
xor ecx 0CFh +
mov ecx [ecx+esi] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_14] +
shr ecx 10h +
movzx ecx cl +
mov [ecx+esi-7Eh] eax +
mov eax [ebp+arg_4] +
xor eax [ebp+var_14] +
mov ecx [ebp+arg_4] +
xor eax [ebp+var_1C] +
xor ecx 8BEE4DFCh +
xor [ebp+var_4] eax +
xor eax eax +
push eax  +
push [ebp+var_40]  +
mov [ebp+var_2C] edx +
push edi  +
push dword ptr [ecx+ebx]  +
mov [ebp+var_6C] edi +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_18] +
xor ecx [ebp+arg_4] +
mov [ebp+var_24] edx +
xor ecx [ebp+var_C] +
mov [ebp+var_6C] edi +
xor [ebp+var_1C] ecx +
movzx ecx byte ptr [ebp+var_18] +
mov ecx [ecx+esi-23h] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_18] +
shr ecx 8 +
movzx ecx cl +
mov [ecx+esi-55h] eax +
mov eax [ebp+var_18] +
shr eax 10h +
movzx ecx al +
xor eax eax +
push eax  +
push [ebp+var_40]  +
xor ecx 84h +
push edi  +
push dword ptr [ecx+ebx]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_18] +
mov [ebp+var_2C] edx +
mov edx ecx +
xor ecx [ebp+var_8] +
shr edx 18h +
xor ecx [ebp+var_C] +
xor edx 9Dh +
xor ecx [ebp+var_4] +
mov edx [edx+esi] +
mov [ebp+var_C] ecx +
movzx ecx byte ptr [ebp+var_4] +
xor ecx 63h +
mov [esi+ecx] eax +
mov eax [ebp+var_4] +
shr eax 8 +
movzx ecx al +
xor eax eax +
push eax  +
push [ebp+var_40]  +
mov [ebp+var_70] edx +
push edi  +
push dword ptr [ecx+ebx+0Ch]  +
mov [ebp+var_6C] edi +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_4] +
shr ecx 10h +
movzx ecx cl +
xor ecx 0D7h +
mov ecx [ecx+esi] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_4] +
shr ecx 18h +
mov [ecx+esi+10h] eax +
mov eax [ebp+var_10] +
xor eax [ebp+var_8] +
movzx ecx byte ptr [ebp+var_1C] +
xor eax [ebp+var_1C] +
mov [ebp+var_24] edx +
xor eax [ebp+var_4] +
mov [ebp+var_6C] edi +
mov [ebp+var_8] eax +
xor eax eax +
push eax  +
push [ebp+var_40]  +
push edi  +
push dword ptr [ecx+ebx+41h]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [esi] +
mov [ebp+var_2C] edx +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_1C] +
shr ecx 8 +
movzx ecx cx +
xor ecx 0E012h +
mov [esi+ecx] eax +
xor eax eax +
push eax  +
push [ebp+var_40]  +
mov [ebp+var_6C] edi +
push edi  +
push dword ptr [ebx]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_1C] +
shr ecx 18h +
mov ecx [ecx+esi-0ACh] +
mov [esi] eax +
mov eax [ebp+var_14] +
xor eax [ebp+var_10] +
mov [ebp+var_70] ecx +
xor eax [ebp+var_C] +
movzx ecx byte ptr [ebp+var_C] +
xor eax [ebp+var_1C] +
xor ecx 61h +
mov [ebp+var_10] eax +
xor eax eax +
push eax  +
push [ebp+var_40]  +
mov [ebp+var_24] edx +
push edi  +
push dword ptr [ecx+ebx]  +
mov [ebp+var_6C] edi +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_C] +
shr ecx 8 +
movzx ecx cl +
xor ecx 9Bh +
mov ecx [ecx+esi] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_C] +
shr ecx 10h +
movzx ecx cl +
xor ecx 3Fh +
mov [esi+ecx] eax +
mov ecx [ebp+var_C] +
xor eax eax +
push eax  +
push [ebp+var_40]  +
shr ecx 18h +
push edi  +
push dword ptr [ecx+ebx-0D1h]  +
mov [ebp+var_2C] edx +
mov [ebp+var_6C] edi +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+arg_4] +
xor ecx [ebp+var_14] +
mov [ebp+var_24] edx +
xor ecx [ebp+var_8] +
xor ecx [ebp+var_C] +
mov [ebp+var_14] ecx +
movzx ecx byte ptr [ebp+var_8] +
xor ecx 0C5h +
mov ecx [ecx+esi] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_8] +
shr ecx 8 +
movzx ecx cl +
xor ecx 58h +
mov [esi+ecx] eax +
mov eax [ebp+var_8] +
shr eax 10h +
movzx ecx al +
xor eax eax +
push eax  +
push [ebp+var_40]  +
mov [ebp+var_6C] edi +
push edi  +
push dword ptr [ecx+ebx-41h]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_8] +
shr ecx 18h +
xor ecx 6 +
mov ecx [ecx+esi] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_18] +
xor ecx [ebp+arg_4] +
mov [ebp+var_2C] edx +
xor ecx [ebp+var_10] +
mov [ebp+var_6C] edi +
xor ecx [ebp+var_8] +
mov [ebp+arg_4] ecx +
movzx ecx byte ptr [ebp+var_10] +
xor ecx 0EBh +
mov [esi+ecx] eax +
mov eax [ebp+var_10] +
shr eax 8 +
movzx ecx al +
xor eax eax +
push eax  +
push [ebp+var_40]  +
xor ecx 5Fh +
push edi  +
push dword ptr [ecx+ebx]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_10] +
shr ecx 10h +
movzx ecx cl +
mov ecx [ecx+esi-4] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_10] +
shr ecx 18h +
xor ecx 5Ah +
mov [esi+ecx] eax +
mov eax [ebp+var_18] +
xor eax [ebp+var_14] +
movzx ecx byte ptr [ebp+var_14] +
xor eax [ebp+var_10] +
mov [ebp+var_24] edx +
xor eax [ebp+var_4] +
sub ecx 0EFh +
mov [ebp+var_18] eax +
xor eax eax +
inc eax  +
xor edx edx +
mov [ebp+var_6C] edi +
call sub_103580B  +
xor ecx ecx +
push ecx  +
push [ebp+var_40]  +
push edi  +
push dword ptr [eax+ebx]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_14] +
shr ecx 8 +
movzx ecx cl +
mov [ecx+esi+0Fh] eax +
mov eax [ebp+var_14] +
shr eax 10h +
movzx ecx al +
xor eax eax +
push eax  +
push [ebp+var_40]  +
xor ecx 0E2h +
push edi  +
push dword ptr [ecx+ebx]  +
mov [ebp+var_2C] edx +
call sub_1035850  +
mov ecx [ebp+var_14] +
shr ecx 18h +
mov ecx [ecx+esi-33h] +
mov [ebp+var_54] edx +
xor edx edx +
add eax ecx +
adc [ebp+var_54] edx +
mov edx [ebp+var_54] +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_6C] edi +
adc edx ecx +
mov ecx [ebp+arg_4] +
xor ecx [ebp+var_14] +
mov [ebp+var_24] edx +
xor ecx [ebp+var_1C] +
xor [ebp+var_4] ecx +
movzx ecx byte ptr [ebp+arg_4] +
xor ecx 19h +
mov ecx [ecx+esi] +
mov [ebp+var_70] ecx +
mov ecx [ebp+arg_4] +
shr ecx 8 +
movzx ecx cl +
xor ecx 0CBh +
mov [esi+ecx] eax +
mov eax [ebp+arg_4] +
shr eax 10h +
movzx ecx al +
xor eax eax +
push eax  +
push [ebp+var_40]  +
xor ecx 0E3h +
push edi  +
push dword ptr [ecx+ebx]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+arg_4] +
shr ecx 18h +
mov ecx [ecx+esi-36h] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_18] +
xor ecx [ebp+arg_4] +
mov [ebp+var_2C] edx +
xor ecx [ebp+var_C] +
mov [ebp+var_6C] edi +
xor [ebp+var_1C] ecx +
movzx ecx byte ptr [ebp+var_18] +
mov [ecx+esi-9Eh] eax +
mov eax [ebp+var_18] +
shr eax 8 +
movzx ecx al +
xor eax eax +
push eax  +
push [ebp+var_40]  +
push edi  +
push dword ptr [ecx+ebx-0E3h]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_18] +
shr ecx 10h +
movzx ecx cl +
mov ecx [ecx+esi-6Dh] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_18] +
shr ecx 18h +
xor ecx 0A8h +
mov [esi+ecx] eax +
mov eax [ebp+var_18] +
xor eax [ebp+var_8] +
movzx ecx byte ptr [ebp+var_4] +
xor eax [ebp+var_C] +
mov [ebp+var_24] edx +
xor eax [ebp+var_4] +
mov [ebp+var_6C] edi +
mov [ebp+var_C] eax +
xor eax eax +
push eax  +
push [ebp+var_40]  +
push edi  +
push dword ptr [ecx+ebx-84h]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_4] +
shr ecx 8 +
movzx ecx cl +
mov ecx [ecx+esi-58h] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_4] +
shr ecx 10h +
mov [ecx+esi-9906h] eax +
mov eax [ebp+var_10] +
xor eax [ebp+var_8] +
movzx ecx byte ptr [ebp+var_1C] +
xor eax [ebp+var_1C] +
mov [ebp+var_2C] edx +
xor eax [ebp+var_4] +
mov [ebp+var_6C] edi +
mov [ebp+var_8] eax +
xor eax eax +
push eax  +
push [ebp+var_40]  +
push edi  +
push dword ptr [ecx+ebx-0D1h]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov [ebp+var_28] eax +
mov eax [ebp+var_54] +
adc eax ecx +
mov [ebp+var_24] eax +
mov eax [ebp+var_1C] +
shr eax 8 +
movzx ecx al +
xor eax eax +
sub ecx 0CBh +
inc eax  +
xor edx edx +
call sub_103580B  +
mov eax [eax+esi] +
mov ecx [ebp+var_28] +
mov [ebp+var_70] eax +
mov eax [ebp+var_1C] +
shr eax 10h +
movzx eax al +
mov [eax+esi-91h] ecx +
mov ecx [ebp+var_1C] +
xor eax eax +
push eax  +
push [ebp+var_40]  +
shr ecx 18h +
push edi  +
push dword ptr [ecx+ebx-0F7h]  +
mov [ebp+var_6C] edi +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov [ebp+var_6C] edi +
mov [ebp+var_30] eax +
mov eax [ebp+var_54] +
adc eax ecx +
mov [ebp+var_2C] eax +
mov eax [ebp+var_14] +
xor eax [ebp+var_10] +
xor edx edx +
xor eax [ebp+var_C] +
xor eax [ebp+var_1C] +
mov [ebp+var_10] eax +
movzx eax byte ptr [ebp+var_C] +
mov eax [eax+esi-0Eh] +
mov [ebp+var_70] eax +
mov eax [ebp+var_C] +
shr eax 8 +
movzx ecx al +
xor eax eax +
xor ecx 0BEh +
inc eax  +
call sub_103580B  +
mov ecx [ebp+var_30] +
mov [eax+esi] ecx +
mov eax [ebp+var_C] +
shr eax 10h +
movzx ecx al +
xor eax eax +
push eax  +
push [ebp+var_40]  +
push edi  +
push dword ptr [ecx+ebx-1]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_C] +
shr ecx 18h +
mov ecx [ecx+esi-66h] +
mov [ebp+var_70] ecx +
mov ecx [ebp+arg_4] +
xor ecx [ebp+var_14] +
mov [ebp+var_24] edx +
xor ecx [ebp+var_8] +
mov [ebp+var_6C] edi +
xor ecx [ebp+var_C] +
mov [ebp+var_14] ecx +
movzx ecx byte ptr [ebp+var_8] +
mov [ecx+esi+51h] eax +
mov eax [ebp+var_8] +
shr eax 8 +
movzx ecx ax +
xor eax eax +
push eax  +
push [ebp+var_40]  +
xor ecx 1636h +
push edi  +
push dword ptr [ecx+ebx]  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_18] +
xor ecx [ebp+arg_4] +
mov [ebp+var_30] eax +
xor ecx [ebp+var_10] +
mov eax [ebp+var_8] +
xor ecx [ebp+var_8] +
shr eax 18h +
mov eax [eax+esi-1Ah] +
mov [ebp+var_70] eax +
movzx eax byte ptr [ebp+var_10] +
mov [ebp+arg_4] ecx +
mov ecx [ebp+var_30] +
mov [eax+esi-9] ecx +
mov eax [ebp+var_10] +
shr eax 10h +
movzx eax al +
mov eax [eax+esi-0Eh] +
mov [ebp+var_30] eax +
mov eax [ebp+var_10] +
shr eax 8 +
movzx ecx al +
xor eax eax +
push eax  +
push [ebp+var_40]  +
xor ecx 63h +
push edi  +
push dword ptr [ecx+ebx]  +
mov [ebp+var_6C] edi +
mov [ebp+var_58] edx +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_70] +
mov ebx [ebp+var_1C] +
adc edx ecx +
add eax [ebp+var_58] +
mov ecx [ebp+var_48] +
mov ecx [ecx] +
adc edx edi +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_10] +
shr ecx 18h +
mov [ecx+esi-30h] eax +
mov eax [ebp+var_18] +
xor eax [ebp+var_14] +
and [ebp+var_54] edi +
xor eax [ebp+var_10] +
mov [ebp+var_6C] edi +
xor eax [ebp+var_4] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_4] +
xor eax [ebp+var_14] +
xor eax ebx +
xor [ebp+var_4] eax +
mov eax [ebp+var_14] +
xor eax 0C14E4861h +
mov ecx eax +
mov ecx [ebp+arg_4] +
xor eax eax +
add ecx 812F634Eh +
or eax ecx +
imul eax [ebp+var_30] +
mov ecx [ebp+var_54] +
mov [ebp+var_38] eax +
xor eax eax +
add edx [ebp+var_70] +
adc ecx eax +
mov [ebp+var_5C] ecx +
mov ecx [ebp+var_18] +
mov eax ecx +
xor eax [ebp+arg_4] +
xor eax [ebp+var_C] +
xor ebx eax +
mov eax [ebp+var_48] +
mov [eax] edx +
mov eax ecx +
xor eax [ebp+var_8] +
add ecx 31A23F9Fh +
xor eax [ebp+var_C] +
xor eax [ebp+var_4] +
mov [ebp+var_C] eax +
mov eax [ebp+var_10] +
xor eax [ebp+var_8] +
xor eax ebx +
xor eax [ebp+var_4] +
mov [ebp+var_8] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
push edi  +
push ecx  +
call sub_1035850  +
add eax [ebp+var_30] +
push edi  +
pop ecx  +
adc edx ecx +
mov cl 20h +
call sub_103582A  +
mov [ebp+var_40] eax +
movzx eax bl +
mov eax [eax+esi-0A0h] +
xor ecx ecx +
add [ebp+var_40] eax +
mov [ebp+var_3C] edx +
adc [ebp+var_3C] ecx +
mov ecx [ebp+var_4] +
xor eax eax +
push eax  +
push [ebp+var_38]  +
xor ecx 0F91DA68Eh +
push edi  +
push ecx  +
call sub_1035850  +
mov ecx [ebp+var_40] +
add ecx eax +
mov eax [ebp+var_3C] +
adc eax edx +
mov [ebp+var_28] ecx +
mov ecx [ebp+arg_4] +
xor ecx [ebp+var_14] +
mov edx [ebp+var_28] +
xor ecx [ebp+var_8] +
mov [ebp+var_24] eax +
xor ecx [ebp+var_C] +
mov eax [ebp+var_14] +
xor eax [ebp+var_10] +
and [ebp+var_3C] edi +
xor eax [ebp+var_C] +
mov [ebp+var_14] ecx +
movzx ecx byte ptr [ebp+var_8] +
xor ecx 37h +
mov [esi+ecx] edx +
mov ecx [ebp+var_18] +
xor ecx [ebp+arg_4] +
xor eax ebx +
xor ecx eax +
xor ecx [ebp+var_8] +
mov [ebp+var_10] eax +
mov [ebp+var_1C] eax +
mov eax [ebp+var_8] +
shr eax 8 +
movzx eax al +
mov eax [eax+esi-39h] +
mov [ebp+arg_4] ecx +
mov ecx [ebp+var_C] +
mov [ebp+var_40] eax +
xor ecx 0CA36C7F2h +
xor eax eax +
push eax  +
push [ebp+var_38]  +
push edi  +
push ecx  +
call sub_1035850  +
mov ecx [ebp+var_40] +
add ecx eax +
adc [ebp+var_3C] edx +
mov edx [ebp+var_3C] +
xor eax eax +
add ecx [ebp+var_24] +
adc edx eax +
mov eax [ebp+var_18] +
xor eax [ebp+var_14] +
and [ebp+var_3C] edi +
xor eax [ebp+var_10] +
mov [ebp+var_2C] edx +
xor eax [ebp+var_4] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_4] +
xor eax [ebp+var_14] +
xor eax ebx +
xor [ebp+var_4] eax +
movzx eax byte ptr [ebp+arg_4] +
xor eax 56h +
mov [eax+esi] ecx +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_14] +
shr eax 8 +
movzx eax ax +
mov eax [eax+esi-6529h] +
mov [ebp+var_40] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
xor ecx 8A0A7506h +
push edi  +
push ecx  +
call sub_1035850  +
mov ecx [ebp+var_40] +
add ecx eax +
adc [ebp+var_3C] edx +
mov edx [ebp+var_3C] +
xor eax eax +
add ecx [ebp+var_2C] +
adc edx eax +
mov eax [ebp+var_18] +
xor eax [ebp+arg_4] +
and [ebp+var_3C] edi +
xor eax [ebp+var_C] +
mov [ebp+var_24] edx +
xor ebx eax +
mov eax [ebp+var_18] +
xor eax [ebp+var_8] +
xor eax [ebp+var_C] +
xor eax [ebp+var_4] +
mov [ebp+var_C] eax +
movzx eax byte ptr [ebp+var_4] +
mov [eax+esi-0D2h] ecx +
mov eax [ebp+var_4] +
mov ecx [ebp+var_18] +
shr eax 8 +
movzx eax al +
mov eax [eax+esi-3Fh] +
mov [ebp+var_40] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
xor ecx 0DCD95C23h +
push edi  +
push ecx  +
call sub_1035850  +
mov ecx [ebp+var_40] +
add ecx eax +
adc [ebp+var_3C] edx +
mov edx [ebp+var_3C] +
xor eax eax +
add ecx [ebp+var_24] +
adc edx eax +
mov eax [ebp+var_10] +
xor eax [ebp+var_8] +
mov [ebp+var_2C] edx +
xor eax ebx +
xor eax [ebp+var_4] +
and [ebp+var_3C] edi +
mov [ebp+var_8] eax +
mov eax [ebp+var_14] +
xor eax [ebp+var_10] +
xor eax [ebp+var_C] +
xor eax ebx +
mov [ebp+var_10] eax +
movzx eax byte ptr [ebp+var_C] +
mov [eax+esi+5] ecx +
mov eax [ebp+var_C] +
shr eax 8 +
movzx eax al +
xor eax 8Bh +
mov eax [eax+esi] +
mov [ebp+var_40] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
lea ecx [ebx+4775F83Dh] +
push edi  +
push ecx  +
call sub_1035850  +
mov ecx [ebp+var_40] +
add ecx eax +
adc [ebp+var_3C] edx +
mov edx [ebp+var_3C] +
xor eax eax +
add ecx [ebp+var_2C] +
adc edx eax +
mov eax [ebp+arg_4] +
xor eax [ebp+var_14] +
mov [ebp+var_24] edx +
xor eax [ebp+var_8] +
mov edx [ebp+var_8] +
xor eax [ebp+var_C] +
and [ebp+var_3C] edi +
mov [ebp+var_14] eax +
mov eax [ebp+var_18] +
xor eax [ebp+arg_4] +
xor eax [ebp+var_10] +
xor eax edx +
mov [ebp+arg_4] eax +
movzx eax byte ptr [ebp+var_10] +
xor eax 1Ch +
mov [eax+esi] ecx +
mov eax [ebp+var_10] +
shr eax 8 +
movzx eax al +
mov eax [eax+esi-0B8h] +
mov [ebp+var_40] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
add edx 38D406FBh +
push edi  +
push edx  +
call sub_1035850  +
mov ecx eax +
mov eax [ebp+var_40] +
add eax ecx +
adc [ebp+var_3C] edx +
mov edx [ebp+var_3C] +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_6C] edi +
adc edx ecx +
mov ecx [ebp+var_10] +
shr ecx 10h +
movzx ecx cl +
mov ecx [ecx+esi+15h] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_10] +
shr ecx 18h +
xor ecx 0F8h +
mov [esi+ecx] eax +
mov eax [ebp+var_18] +
xor eax [ebp+var_14] +
mov [ebp+var_2C] edx +
xor eax [ebp+var_10] +
xor eax [ebp+var_4] +
mov ecx [ebp+var_14] +
mov [ebp+var_18] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
xor ecx 0C963E5A9h +
push edi  +
push ecx  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+arg_4] +
xor ecx [ebp+var_14] +
mov [ebp+var_24] edx +
xor ecx ebx +
xor [ebp+var_4] ecx +
movzx ecx byte ptr [ebp+arg_4] +
xor ecx 0A9h +
mov ecx [ecx+esi] +
mov [ebp+var_70] ecx +
mov ecx [ebp+arg_4] +
shr ecx 8 +
movzx ecx cl +
mov [ecx+esi-0B5h] eax +
mov eax [ebp+var_1C] +
lea ecx [eax+5A2F0E92h] +
xor eax eax +
push eax  +
push [ebp+var_38]  +
mov [ebp+var_6C] edi +
push edi  +
push ecx  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_18] +
xor ecx [ebp+arg_4] +
mov [ebp+var_4C] edx +
xor ecx [ebp+var_C] +
movzx edx byte ptr [ebp+var_4] +
mov [edx+esi-30h] eax +
mov eax [ebp+var_10] +
xor eax [ebp+var_8] +
xor ebx ecx +
mov ecx [ebp+var_18] +
xor ecx [ebp+var_8] +
xor eax ebx +
xor eax [ebp+var_4] +
xor ecx [ebp+var_C] +
mov [ebp+var_8] eax +
xor ecx [ebp+var_4] +
mov eax [ebp+var_14] +
xor eax [ebp+var_10] +
and [ebp+var_3C] edi +
xor eax ecx +
xor eax ebx +
mov [ebp+var_10] eax +
movzx eax cl +
mov eax [eax+esi-25h] +
mov [ebp+var_40] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
mov [ebp+var_C] ecx +
mov ecx [ebp+var_18] +
xor ecx 6A9141ECh +
push edi  +
push ecx  +
call sub_1035850  +
mov ecx eax +
mov eax [ebp+var_40] +
add eax ecx +
adc [ebp+var_3C] edx +
mov edx [ebp+var_3C] +
xor ecx ecx +
add eax [ebp+var_4C] +
mov [ebp+var_6C] edi +
adc edx ecx +
mov ecx [ebp+var_C] +
shr ecx 8 +
movzx ecx cl +
mov ecx [ecx+esi-3Ah] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_C] +
shr ecx 10h +
movzx ecx cl +
xor ecx 0E1h +
mov [esi+ecx] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
lea ecx [ebx+4432902Ah] +
push edi  +
push ecx  +
mov [ebp+var_2C] edx +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+arg_4] +
xor ecx [ebp+var_14] +
and [ebp+var_3C] edi +
xor ecx [ebp+var_8] +
mov [ebp+var_24] edx +
xor ecx [ebp+var_C] +
mov [ebp+var_14] ecx +
mov ecx [ebp+var_18] +
xor ecx [ebp+arg_4] +
xor ecx [ebp+var_10] +
xor ecx [ebp+var_8] +
mov [ebp+arg_4] ecx +
movzx ecx byte ptr [ebp+var_10] +
mov [ecx+esi-71h] eax +
mov eax [ebp+var_10] +
mov ecx [ebp+var_8] +
shr eax 8 +
movzx eax al +
mov eax [eax+esi] +
mov [ebp+var_40] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
xor ecx 0D39756B9h +
push edi  +
push ecx  +
call sub_1035850  +
mov ecx [ebp+var_40] +
add ecx eax +
adc [ebp+var_3C] edx +
mov edx [ebp+var_3C] +
xor eax eax +
add ecx [ebp+var_24] +
adc edx eax +
mov eax [ebp+var_18] +
xor eax [ebp+var_14] +
mov [ebp+var_2C] edx +
xor eax [ebp+var_10] +
xor eax [ebp+var_4] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_4] +
xor eax [ebp+var_14] +
xor eax ebx +
xor [ebp+var_4] eax +
movzx eax word ptr [ebp+arg_4] +
mov [eax+esi-34C9h] ecx +
mov eax [ebp+arg_4] +
shr eax 10h +
and [ebp+var_3C] edi +
movzx eax al +
xor eax 55h +
mov eax [eax+esi] +
mov [ebp+var_40] eax +
mov eax [ebp+var_14] +
lea ecx [eax+31EFF1E6h] +
xor eax eax +
push eax  +
push [ebp+var_38]  +
push edi  +
push ecx  +
call sub_1035850  +
mov ecx [ebp+var_40] +
add ecx eax +
adc [ebp+var_3C] edx +
mov edx [ebp+var_3C] +
xor eax eax +
add ecx [ebp+var_2C] +
adc edx eax +
mov [ebp+var_24] edx +
mov edx [ebp+var_18] +
mov eax edx +
xor eax [ebp+arg_4] +
and [ebp+var_3C] edi +
xor eax [ebp+var_C] +
xor ebx eax +
mov eax edx +
xor eax [ebp+var_8] +
add edx 0A96F7161h +
xor eax [ebp+var_C] +
mov [ebp+var_1C] ebx +
xor eax [ebp+var_4] +
mov [ebp+var_C] eax +
movzx eax word ptr [ebp+var_4] +
xor eax 0BE65h +
mov [eax+esi] ecx +
mov eax [ebp+var_4] +
shr eax 10h +
movzx eax al +
xor eax 0C0h +
mov eax [eax+esi] +
mov [ebp+var_40] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
push edi  +
push edx  +
call sub_1035850  +
mov ecx eax +
mov eax [ebp+var_40] +
add eax ecx +
adc [ebp+var_3C] edx +
mov edx [ebp+var_3C] +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_6C] edi +
adc edx ecx +
mov ecx [ebp+var_10] +
xor ecx [ebp+var_8] +
mov [ebp+var_2C] edx +
mov edx [ebp+arg_4] +
xor edx [ebp+var_14] +
xor ecx ebx +
xor ecx [ebp+var_4] +
mov [ebp+var_8] ecx +
xor edx [ebp+var_8] +
movzx ecx bx +
mov ecx [ecx+esi-3ACCh] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_14] +
xor ecx [ebp+var_10] +
xor ecx [ebp+var_C] +
xor ecx ebx +
mov ebx [ebp+var_C] +
xor edx ebx +
add ebx 0E98EB13Dh +
mov ebx [ebp+var_8] +
mov [ebp+var_14] edx +
mov [ebp+var_10] ecx +
xor edx edx +
add ebx 0CFF77234h +
or edx ebx +
mov [edx+esi] eax +
mov eax [ebp+var_18] +
mov edx eax +
xor eax [ebp+var_14] +
xor edx [ebp+arg_4] +
xor eax ecx +
xor eax [ebp+var_4] +
xor edx ecx +
xor edx [ebp+var_8] +
mov [ebp+var_18] eax +
mov eax [ebp+var_14] +
mov [ebp+arg_4] edx +
xor eax 80689E9h +
xor edx edx +
or edx eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
add ecx 26DE7147h +
xor ebx ebx +
or ecx ebx +
push ecx  +
push edx  +
call sub_1035850  +
mov ebx [ebp+var_1C] +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_6C] edi +
adc edx ecx +
add eax [ebp+var_70] +
adc edx ecx +
mov ecx [ebp+arg_4] +
xor ecx [ebp+var_14] +
mov [ebp+var_24] edx +
xor ecx ebx +
xor [ebp+var_4] ecx +
movzx ecx byte ptr [ebp+arg_4] +
mov ecx [ecx+esi-0D3h] +
mov [ebp+var_70] ecx +
mov ecx [ebp+arg_4] +
shr ecx 8 +
movzx ecx cl +
xor ecx 0FCh +
mov [esi+ecx] eax +
mov eax [ebp+var_18] +
mov ecx eax +
xor ecx [ebp+arg_4] +
xor ecx [ebp+var_C] +
xor ebx ecx +
lea ecx [eax+4ABCCB00h] +
xor eax eax +
push eax  +
push [ebp+var_38]  +
push edi  +
push ecx  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_18] +
xor ecx [ebp+var_8] +
mov [ebp+var_2C] edx +
movzx edx byte ptr [ebp+var_4] +
xor ecx [ebp+var_C] +
xor edx 0CBh +
mov edx [edx+esi] +
xor ecx [ebp+var_4] +
mov [ebp+var_70] edx +
mov edx [ebp+var_10] +
xor edx [ebp+var_8] +
mov [ebp+var_C] ecx +
xor edx ebx +
xor edx [ebp+var_4] +
mov [ebp+var_6C] edi +
mov [ebp+var_8] edx +
mov edx [ebp+var_14] +
xor edx [ebp+var_10] +
xor edx ecx +
movzx ecx cl +
xor ecx 0F2h +
mov [esi+ecx] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
lea ecx [ebx-6A2DA01h] +
push edi  +
xor edx ebx +
push ecx  +
mov [ebp+var_10] edx +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [esi] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_C] +
shr ecx 8 +
movzx ecx cl +
xor ecx 58h +
mov [esi+ecx] eax +
mov eax [ebp+arg_4] +
xor eax [ebp+var_14] +
mov ecx [ebp+var_8] +
xor eax [ebp+var_8] +
xor ecx 8BDBC3F1h +
xor eax [ebp+var_C] +
mov [ebp+var_24] edx +
mov [ebp+var_14] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
mov [ebp+var_6C] edi +
push edi  +
push ecx  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_18] +
mov [ebp+var_2C] edx +
mov edx ecx +
xor edx [ebp+arg_4] +
xor ecx [ebp+var_14] +
xor edx [ebp+var_10] +
and [ebp+var_3C] edi +
xor edx [ebp+var_8] +
mov [ebp+arg_4] edx +
mov edx [ebp+var_10] +
xor ecx edx +
xor ecx [ebp+var_4] +
add edx 0E519A9BDh +
mov [ebp+var_18] ecx +
movzx ecx word ptr [ebp+var_14] +
xor ecx 8FC8h +
mov [esi+ecx] eax +
mov eax [ebp+var_14] +
shr eax 10h +
movzx eax al +
xor eax 16h +
mov eax [eax+esi] +
mov [ebp+var_40] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
push edi  +
push edx  +
call sub_1035850  +
mov ecx eax +
mov eax [ebp+var_40] +
add eax ecx +
adc [ebp+var_3C] edx +
mov edx [ebp+var_3C] +
xor ecx ecx +
add eax [ebp+var_2C] +
adc edx ecx +
mov ecx [ebp+arg_4] +
xor ecx [ebp+var_14] +
mov [esi] eax +
mov eax [ebp+var_18] +
xor eax [ebp+arg_4] +
and [ebp+var_3C] edi +
xor eax [ebp+var_C] +
xor ecx ebx +
xor [ebp+var_4] ecx +
mov ecx [ebp+arg_4] +
xor ebx eax +
movzx eax byte ptr [ebp+var_18] +
mov eax [eax+esi+0Bh] +
mov [ebp+var_40] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
xor ecx 4B4B09Ch +
push edi  +
push ecx  +
mov [ebp+var_24] edx +
call sub_1035850  +
mov ecx [ebp+var_40] +
add ecx eax +
adc [ebp+var_3C] edx +
mov edx [ebp+var_3C] +
xor eax eax +
add ecx [ebp+var_24] +
mov [ebp+var_6C] edi +
adc edx eax +
mov eax [ebp+var_18] +
mov [ebp+var_2C] edx +
mov edx eax +
xor eax [ebp+var_8] +
shr edx 8 +
xor eax [ebp+var_C] +
movzx edx dl +
xor eax [ebp+var_4] +
mov edx [edx+esi-5Dh] +
mov [ebp+var_C] eax +
mov eax [ebp+var_10] +
xor eax [ebp+var_8] +
mov [ebp+var_70] edx +
xor eax ebx +
xor eax [ebp+var_4] +
mov [ebp+var_8] eax +
movzx eax bl +
xor eax 0Ch +
mov [eax+esi] ecx +
mov ecx [ebp+var_4] +
xor eax eax +
push eax  +
push [ebp+var_38]  +
xor ecx 0B6116DF4h +
push edi  +
push ecx  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_14] +
xor ecx [ebp+var_10] +
mov [ebp+var_24] edx +
xor ecx [ebp+var_C] +
mov edx [ebp+var_C] +
xor ecx ebx +
mov [ebp+var_10] ecx +
mov ecx [ebp+arg_4] +
xor ecx [ebp+var_14] +
xor ecx [ebp+var_8] +
xor ecx edx +
and [ebp+var_3C] edi +
mov [ebp+var_14] ecx +
movzx ecx byte ptr [ebp+var_8] +
mov [ecx+esi-0ACh] eax +
mov eax [ebp+var_8] +
shr eax 8 +
movzx eax al +
xor eax 0D2h +
mov eax [eax+esi] +
mov [ebp+var_40] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
add edx 1423942h +
push edi  +
push edx  +
call sub_1035850  +
mov ecx eax +
mov eax [ebp+var_40] +
add eax ecx +
adc [ebp+var_3C] edx +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_30] eax +
mov eax [ebp+var_3C] +
adc eax ecx +
mov [ebp+var_2C] eax +
mov eax [ebp+var_8] +
shr eax 10h +
movzx ecx al +
xor eax eax +
xor ecx 0D5h +
inc eax  +
xor edx edx +
call sub_103580B  +
mov eax [eax+esi] +
mov ecx [ebp+var_30] +
mov [ebp+var_70] eax +
mov eax [ebp+var_8] +
shr eax 18h +
mov [eax+esi-5Bh] ecx +
mov eax [ebp+var_18] +
mov ecx eax +
xor eax [ebp+var_14] +
xor ecx [ebp+arg_4] +
xor eax [ebp+var_10] +
xor ecx [ebp+var_10] +
xor eax [ebp+var_4] +
xor ecx [ebp+var_8] +
mov [ebp+var_18] eax +
mov eax [ebp+var_14] +
xor eax 38B760C5h +
push eax  +
mov eax [ebp+var_20] +
mov edx offset dword_1005250 +
mov [ebp+var_6C] edi +
mov [ebp+arg_4] ecx +
call sub_1014CA2  +
mov ecx [ebp+var_10] +
xor eax eax +
push eax  +
push [ebp+var_38]  +
xor ecx 1767AFAh +
push edi  +
push ecx  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+arg_4] +
xor ecx [ebp+var_14] +
mov [ebp+var_24] edx +
mov edx [ebp+var_18] +
xor ecx ebx +
xor [ebp+var_4] ecx +
mov ecx [ebp+arg_4] +
xor edx ecx +
xor edx [ebp+var_C] +
and [ebp+var_3C] edi +
xor ebx edx +
movzx edx word ptr [ebp+var_18] +
xor edx 30B0h +
mov [edx+esi] eax +
mov eax [ebp+var_18] +
shr eax 10h +
movzx eax al +
xor eax 99h +
mov eax [eax+esi] +
mov [ebp+var_40] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
add ecx 0E85F170h +
push edi  +
push ecx  +
call sub_1035850  +
mov ecx eax +
mov eax [ebp+var_40] +
add eax ecx +
adc [ebp+var_3C] edx +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_6C] edi +
mov [ebp+var_30] eax +
mov eax [ebp+var_3C] +
adc eax ecx +
mov [ebp+var_2C] eax +
mov eax [ebp+var_18] +
mov ecx eax +
xor eax [ebp+var_8] +
shr ecx 18h +
xor eax [ebp+var_C] +
xor ecx 0C2h +
mov ecx [ecx+esi] +
xor eax [ebp+var_4] +
mov [ebp+var_70] ecx +
movzx ecx byte ptr [ebp+var_4] +
mov [ebp+var_C] eax +
xor eax eax +
xor ecx 1Bh +
inc eax  +
xor edx edx +
call sub_103580B  +
mov ecx [ebp+var_30] +
mov [eax+esi] ecx +
mov eax [ebp+var_10] +
xor eax [ebp+var_8] +
mov ecx ebx +
xor eax ebx +
xor eax [ebp+var_4] +
xor ecx 0C10B4A8Ah +
mov [ebp+var_8] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
push edi  +
push ecx  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov [ebp+var_28] eax +
mov eax [ebp+var_54] +
adc eax ecx +
mov [ebp+var_24] eax +
mov eax [ebp+var_14] +
xor eax [ebp+var_10] +
xor eax [ebp+var_C] +
xor eax ebx +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
xor eax [ebp+var_14] +
xor eax [ebp+var_8] +
xor eax [ebp+var_C] +
mov [ebp+var_14] eax +
movzx ecx byte ptr [ebp+var_8] +
xor eax eax +
sub ecx 1Bh +
inc eax  +
xor edx edx +
call sub_103580B  +
mov ecx [ebp+var_28] +
mov [eax+esi] ecx +
mov eax [ebp+var_8] +
and [ebp+var_3C] edi +
shr eax 8 +
movzx eax ax +
mov eax [eax+esi-2FA1h] +
mov [ebp+var_40] eax +
mov eax [ebp+var_C] +
lea ecx [eax-6E097A84h] +
xor eax eax +
push eax  +
push [ebp+var_38]  +
push edi  +
push ecx  +
call sub_1035850  +
mov ecx eax +
mov eax [ebp+var_40] +
add eax ecx +
adc [ebp+var_3C] edx +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_50] eax +
mov eax [ebp+var_3C] +
adc eax ecx +
mov ecx [ebp+var_18] +
mov edx [ebp+var_50] +
mov [ebp+var_4C] eax +
mov eax ecx +
xor ecx [ebp+var_14] +
xor eax [ebp+arg_4] +
xor ecx [ebp+var_10] +
xor eax [ebp+var_10] +
xor ecx [ebp+var_4] +
xor eax [ebp+var_8] +
mov [ebp+var_18] ecx +
movzx ecx byte ptr [ebp+var_14] +
mov [ecx+esi-41h] edx +
mov ecx eax +
xor ecx [ebp+var_14] +
and [ebp+var_3C] edi +
xor ecx ebx +
xor [ebp+var_4] ecx +
mov ecx [ebp+var_18] +
xor ecx eax +
xor ecx [ebp+var_C] +
mov [ebp+arg_4] eax +
movzx eax byte ptr [ebp+var_18] +
xor eax 7 +
mov eax [eax+esi] +
mov [ebp+var_40] eax +
mov eax [ebp+var_10] +
xor ebx ecx +
lea ecx [eax-5AF314FAh] +
xor eax eax +
push eax  +
push [ebp+var_38]  +
push edi  +
push ecx  +
call sub_1035850  +
mov ecx eax +
mov eax [ebp+var_40] +
add eax ecx +
adc [ebp+var_3C] edx +
mov edx [ebp+var_3C] +
xor ecx ecx +
add eax [ebp+var_4C] +
adc edx ecx +
mov ecx [ebp+var_18] +
shr ecx 8 +
movzx ecx cl +
xor ecx 0A5h +
mov ecx [ecx+esi] +
mov [ebp+var_2C] edx +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_18] +
shr ecx 10h +
movzx ecx cl +
mov [ecx+esi-7Bh] eax +
mov ecx [ebp+arg_4] +
xor eax eax +
push eax  +
push [ebp+var_38]  +
xor ecx 0C417B5F5h +
push edi  +
push ecx  +
mov [ebp+var_6C] edi +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov [ebp+var_28] eax +
mov eax [ebp+var_54] +
adc eax ecx +
mov ecx [ebp+var_18] +
mov [ebp+var_24] eax +
shr ecx 18h +
xor eax eax +
xor ecx 0AFh +
inc eax  +
xor edx edx +
call sub_103580B  +
mov eax [eax+esi] +
mov ecx [ebp+var_28] +
mov [ebp+var_70] eax +
mov eax [ebp+var_18] +
xor eax [ebp+var_8] +
mov [ebp+var_6C] edi +
xor eax [ebp+var_C] +
xor eax [ebp+var_4] +
mov [ebp+var_C] eax +
movzx eax bl +
mov [eax+esi-7Bh] ecx +
mov ecx [ebp+var_4] +
xor eax eax +
push eax  +
push [ebp+var_38]  +
xor ecx 27909C20h +
push edi  +
push ecx  +
call sub_1035850  +
xor ecx ecx +
add eax [ebp+var_24] +
mov [ebp+var_54] edx +
adc [ebp+var_54] ecx +
add eax [ebp+var_70] +
mov edx [ebp+var_54] +
adc edx ecx +
mov ecx [ebp+var_10] +
xor ecx [ebp+var_8] +
and [ebp+var_4C] edi +
xor ecx ebx +
xor ecx [ebp+var_4] +
mov [ebp+var_2C] edx +
movzx edx cl +
mov [ebp+var_8] ecx +
mov [edx+esi+14h] eax +
shr ecx 8 +
movzx eax cl +
mov ecx [ebp+var_C] +
xor eax 0CCh +
mov eax [eax+esi] +
mov [ebp+var_50] eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
xor ecx 831F7169h +
push edi  +
push ecx  +
call sub_1035850  +
mov ecx [ebp+var_50] +
add ecx eax +
adc [ebp+var_4C] edx +
xor eax eax +
add ecx [ebp+var_2C] +
mov edx [ebp+var_4C] +
adc edx eax +
mov eax [ebp+var_14] +
xor eax [ebp+var_10] +
and [ebp+var_4C] edi +
xor eax [ebp+var_C] +
mov [ebp+var_24] edx +
xor eax ebx +
mov [ebp+var_1C] eax +
mov eax [ebp+var_8] +
xor eax [ebp+arg_4] +
xor eax [ebp+var_14] +
xor eax [ebp+var_C] +
movzx edx al +
mov [ebp+var_14] eax +
shr eax 8 +
movzx eax al +
xor eax 4Eh +
mov [edx+esi-9Eh] ecx +
mov eax [eax+esi] +
mov [ebp+var_50] eax +
mov eax [ebp+var_1C] +
lea ecx [eax-3ADDD3A9h] +
xor eax eax +
push eax  +
push [ebp+var_38]  +
push edi  +
push ecx  +
call sub_1035850  +
mov ecx edx +
mov edx [ebp+var_50] +
add edx eax +
adc [ebp+var_4C] ecx +
mov ecx [ebp+var_4C] +
xor eax eax +
add edx [ebp+var_24] +
adc ecx eax +
mov eax [ebp+var_1C] +
xor eax [ebp+var_8] +
mov [ebp+var_2C] ecx +
mov ecx [ebp+var_14] +
xor ecx [ebp+var_1C] +
xor eax [ebp+var_18] +
xor ecx [ebp+var_18] +
xor eax [ebp+arg_4] +
xor ecx [ebp+var_4] +
mov [ebp+var_10] eax +
mov [ebp+arg_4] ecx +
movzx ecx cx +
mov [ecx+esi-0F9ABh] edx +
mov ecx [ebp+var_14] +
shr ecx 10h +
movzx ecx cl +
xor eax 1AE01CBDh +
sub ecx eax +
xor eax eax +
push eax  +
push [ebp+var_38]  +
sub ecx 0C9h +
push edi  +
push ecx  +
call sub_1035850  +
mov ecx [ebp+arg_4] +
shr ecx 10h +
movzx ecx cl +
xor ecx 61h +
mov ecx [ecx+esi] +
mov [ebp+var_54] edx +
xor edx edx +
add eax ecx +
adc [ebp+var_54] edx +
mov edx [ebp+var_54] +
xor ecx ecx +
add eax [ebp+var_2C] +
mov [ebp+var_6C] edi +
adc edx ecx +
mov ecx [ebp+var_48] +
mov ecx [ecx] +
mov [ebp+var_70] ecx +
mov ecx [ebp+var_14] +
xor ecx [ebp+var_10] +
xor ecx ebx +
xor ecx [ebp+var_4] +
mov [esi+ecx+6F27C7AAh] eax +
xor eax eax +
mov [ebp+var_1C] ecx +
xor ecx ecx +
add edx [ebp+var_70] +
adc ecx eax +
mov eax edx +
mov edx [ebp+arg_4] +
xor edx [ebp+var_10] +
xor edx [ebp+var_C] +
xor edx ebx +
movzx edi dl +
xor edi 0A4h +
mov [edi+esi] eax +
mov esi [ebp+var_68] +
mov eax edx +
shr eax 8 +
movzx edi al +
xor edi 0B9h +
mov eax [edi+esi+4] +
mov ebx [edi+esi] +
mov edi [ebp+var_8] +
xor edi [ebp+var_1C] +
mov [ebp+var_74] eax +
mov eax [ebp+var_5C] +
xor edi [ebp+arg_4] +
add eax ecx +
mov ecx [ebp+var_48] +
xor edi [ebp+var_C] +
mov [ecx] eax +
mov eax edx +
shr eax 10h +
movzx eax al +
mov ecx [eax+esi-0ADh] +
mov eax [eax+esi-0A9h] +
mov [ebp+var_44] eax +
mov eax [esi] +
mov [ebp+var_60] eax +
mov eax [esi+4] +
mov [ebp+var_5C] eax +
mov eax edi +
movzx edi al +
mov [ebp+var_48] ecx +
mov ecx [ebp+var_20] +
mov [edi+ecx-18h] ebx +
mov ebx [ebp+var_74] +
mov [edi+ecx-14h] ebx +
mov ebx eax +
shr ebx 8 +
movzx edi bl +
mov ebx [ebp+var_48] +
xor edi 5Ah +
mov [ecx+edi] ebx +
mov ebx [ebp+var_44] +
mov [edi+ecx+4] ebx +
shr edx 18h +
sub edx 43h +
mov edi edx +
xor ebx ebx +
add edi esi +
adc ebx [ebp+var_64] +
shr eax 10h +
movzx edx al +
mov eax [ebp+var_60] +
xor edx 66h +
mov [ecx+edx*8] edi +
pop edi  +
mov [ecx+edx*8+4] ebx +
mov edx [ebp+var_5C] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
add dword ptr [edx+8] 10h +
mov eax [esi+8] +
lea ecx [ebp-18h] +
push ecx  +
push edx  +
and eax 0FFFFFFFh +
add eax offset __ImageBase +
call eax  +
mov ebx [ebp-10h] +
mov ecx [ebp-18h] +
mov edi [ebp-8] +
mov esi [ebp-0Ch] +
mov edx [ebp-14h] +
mov eax [ebp-4] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
shr eax 2 +
jmp loc_102C8E5  +
***
shr eax 0Ah +
jmp loc_102C8E5  +
***
shr eax 7 +
jmp loc_102C8E5  +
***
test al 40h +
jz loc_102C892  +
test al 4 +
jmp loc_102C88C  +
***
jmp loc_102C892  +
***
and al 4 +
xor ecx ecx +
cmp al 4 +
jmp loc_102C988  +
***
shr eax 4 +
jmp loc_102C8E7  +
***
jmp loc_102C892  +
***
mov ecx 800h +
and eax ecx +
sub eax ecx +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_102C8E9  +
***
mov ecx eax +
shr ecx 4 +
xor ecx eax +
shr ecx 7 +
not ecx  +
jmp loc_102CA0B  +
***
and al 80h +
xor ecx ecx +
cmp al 80h +
jmp loc_102C988  +
***
and al bl +
xor ecx ecx +
cmp al bl +
jmp loc_102C988  +
***
shr eax 6 +
jmp loc_102C8E5  +
***
and al 40h +
xor ecx ecx +
cmp al 40h +
jmp loc_102C988  +
***
test al bl +
jnz loc_102C892  +
test al 40h +
jmp loc_102C88C  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax ecx +
mov ecx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
shr ecx 4 +
mov edx ebx +
shl edx 4 +
add ecx edx +
mov [ebp+var_4] ecx +
movzx ecx cl +
push esi  +
mov esi [ecx+eax-0E0h] +
mov ecx [ecx+eax-0DCh] +
mov [ebp+var_8] ecx +
lea ecx [ebx+0FB78946h] +
mov [ebp+var_8] ecx +
add ecx 94F00415h +
push ecx  +
mov edx offset dword_1005268 +
call sub_1014CA2  +
mov ecx [ebp+var_4] +
mov edx [ebp+arg_4] +
shr ecx 8 +
movzx ecx cl +
mov esi [ecx+esi-81h] +
movzx ecx byte ptr [ebp+arg_0] +
sub ebx edx +
xor ebx [ebp+var_4] +
movzx edx dl +
xor ecx edx +
movzx edx byte ptr [ebp+var_8] +
xor ecx edx +
xor ebx 6D7BB58h +
movzx edx bl +
xor ecx edx +
xor ecx 0Ah +
and dword ptr [eax+ecx+4] 0 +
mov [eax+ecx] esi +
mov eax [ebp+var_4] +
xor eax [ebp+var_8] +
xor ecx ecx +
xor eax [ebp+var_4] +
add ebx 0FB51D359h +
xor eax 0AD0D645Fh +
xor edx edx +
or eax ecx +
pop esi  +
or edx ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [edi+122228A8h] +
mov eax edi +
sub eax ebx +
mov [ebp+arg_4] eax +
mov eax ecx +
shr eax 8 +
movzx eax al +
xor eax 0E5h +
mov edx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_20] eax +
mov eax ecx +
shr eax 10h +
movzx eax al +
xor eax 26h +
mov [ebp+var_24] edx +
mov edx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_28] eax +
mov eax ecx +
shr eax 18h +
xor eax 0AFh +
mov eax [edx+eax*4] +
mov [ebp+var_3C] eax +
movzx eax cl +
mov [ebp+var_2C] edx +
mov edx [eax+esi-0B8h] +
mov eax [eax+esi-0B4h] +
mov [ebp+var_30] eax +
lea eax [edi-74B41B3Ah] +
xor eax ecx +
mov [ebp+var_8] eax +
xor eax 31121A3Dh +
mov [ebp+var_34] edx +
push eax  +
mov edx offset dword_1005280 +
mov eax esi +
mov [ebp+var_4] ecx +
call sub_1014CA2  +
mov eax ebx +
shl eax 4 +
mov ecx edi +
shr ecx 4 +
add eax ecx +
mov edx eax +
xor edx [ebp+arg_4] +
xor eax [ebp+var_8] +
xor edx [ebp+var_4] +
xor eax [ebp+arg_4] +
lea ecx [ebx+edi+75FE17DDh] +
xor ecx edx +
xor ecx [ebp+var_8] +
sub ebx edi +
xor ebx eax +
mov [ebp+var_10] eax +
mov edi ecx +
xor edi eax +
xor edi [ebp+var_4] +
mov eax ecx +
shr eax 8 +
add al 2Eh +
xor ebx edx +
movzx eax al +
mov [ebp+var_14] ecx +
xor ebx 4F19C37Eh +
movzx ecx cl +
mov [ebp+var_1C] edx +
cdq   +
mov [ebp+var_C] ebx +
xor edi 0F0B36336h +
mov ebx eax +
sub ecx 31h +
xor eax eax +
mov [ebp+var_18] edi +
sub ecx ebx +
sbb eax edx +
add ecx [ebp+var_24] +
adc eax [ebp+var_20] +
xor edx edx +
mov [ebp+var_40] eax +
mov eax [ebp+var_C] +
add eax 3A79E9D0h +
xor edi 0A4C2620Fh +
or edx edi +
mov [ecx] edx +
mov edi [ebp+var_3C] +
xor ebx ebx +
or eax ebx +
mov [ecx+4] eax +
mov eax [ebp+var_C] +
xor eax [ebp+var_14] +
movzx ebx byte ptr [ebp+var_C] +
xor eax [ebp+arg_4] +
xor eax [ebp+var_4] +
movzx edx al +
xor edx 0A9h +
mov [edx+esi] edi +
xor edi edi +
mov [edx+esi+4] edi +
mov edi [ebp+var_2C] +
mov edx eax +
shr edx 8 +
movzx edx dl +
xor edx 4Ah +
mov [edx+esi] edi +
mov edi [ebp+var_28] +
mov [edx+esi+4] edi +
mov edx eax +
shr edx 10h +
movzx edx dl +
xor edx 0B4h +
mov [edx+esi] ecx +
mov ecx [ebp+var_40] +
mov [edx+esi+4] ecx +
mov ecx [ebp+var_34] +
shr eax 18h +
xor eax 2Ah +
mov [esi+eax*8] ecx +
mov ecx [ebp+var_30] +
mov [esi+eax*8+4] ecx +
movzx ecx byte ptr [ebp+arg_4] +
lea eax [ecx+8] +
mov edx eax +
movzx eax byte ptr [ebp+var_8] +
xor edi edi +
add edx [ebp+var_24] +
adc edi [ebp+var_20] +
xor eax ebx +
movzx ebx byte ptr [ebp+var_18] +
xor eax ebx +
xor eax ecx +
mov ecx [ebp+var_10] +
mov [eax+esi-0C5h] edx +
mov edx [ebp+var_1C] +
mov [eax+esi-0C1h] edi +
xor eax eax +
add ecx 39209909h +
xor esi esi +
xor edx 78300125h +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
and dword ptr [ebp-28h] 0 +
jmp loc_102D231  +
***
mov edx 0F000h +
mov eax [ebp-28h] +
inc dword ptr [ebp-28h]  +
test [ecx+eax*2+8] dx +
jz loc_102D21E  +
mov edx [ecx] +
movzx eax word ptr [ecx+eax*2+8] +
and dword ptr [ebp-4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-8] eax +
sub [ebp-8] edi +
mov [ebp-10h] eax +
jz loc_102D2EE  +
mov eax [ebp-4] +
mov edx esi +
movzx eax byte ptr [edi+eax] +
sub eax 24AB41F1h +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx esi +
mul  edx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 0Fh +
ror eax 0Fh +
xor edx eax +
mov eax edx +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov eax [ebp-4] +
mov [ebp-20h] edx +
cmp eax [ebp-8] +
jb loc_102D2AA  +
mov eax [ebp-10h] +
mov eax [eax] +
sub eax [ebp-18h] +
mov [ebp-8] eax +
xor edi edi +
movzx eax byte ptr [ebp+edi-8] +
mov edx esi +
sub eax 24AB41F1h +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx esi +
mul  edx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 0Fh +
ror eax 0Fh +
xor edx eax +
add [ebp-24h] edx +
mov [ebp-20h] edx +
inc edi  +
cmp edi 4 +
jb loc_102D2F8  +
mov edi [ebp-10h] +
add edi 4 +
jmp loc_102D21E  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
xor eax eax +
jmp loc_1030B3E  +
***
mov edx eax +
inc eax  +
mov [ebp-0E0h] eax +
mov eax 0F000h +
test [edi+edx*2+8] ax +
jz loc_1030B1E  +
movzx eax word ptr [edi+edx*2+8] +
mov edx [edi] +
and dword ptr [ebp-64h] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-70h] eax +
sub [ebp-70h] ebx +
mov [ebp-74h] eax +
jz loc_1030C17  +
mov edx esi +
mov eax [ebp-64h] +
movzx eax byte ptr [eax+ebx] +
add eax esi +
add [ebp-60h] eax +
add eax [ebp-5Ch] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
add [ebp-60h] eax +
inc dword ptr [ebp-64h]  +
mov eax [ebp-64h] +
mov [ebp-5Ch] edx +
cmp eax [ebp-70h] +
jb loc_1030BC7  +
mov eax [ebp-74h] +
mov eax [eax] +
sub eax [ebp-0F4h] +
mov [ebp-0FCh] eax +
xor ebx ebx +
movzx eax byte ptr [ebp+ebx-0FCh] +
mov edx esi +
add eax esi +
add [ebp-60h] eax +
add eax [ebp-5Ch] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
add [ebp-60h] edx +
mov [ebp-5Ch] edx +
inc ebx  +
cmp ebx 4 +
jb loc_1030C27  +
mov ebx [ebp-74h] +
add ebx 4 +
jmp loc_1030B1E  +
***
mov eax [ebp-6Ch] +
mov esi [ebp-70h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
mov [ecx+esi] al +
inc edx  +
cmp edx ebx +
jb loc_1031054  +
sub [ebp-68h] ebx +
add [ebp-80h] ebx +
add esi ebx +
add [ebp-0D0h] ebx +
mov [ebp-70h] esi +
jmp loc_1030D7B  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
lea eax [edi+ebx-5472F1BAh] +
mov [ebp+var_8] eax +
mov ecx edi +
xor ecx ebx +
mov eax edi +
xor eax ecx +
xor eax ebx +
mov [ebp+var_4] eax +
movzx eax cl +
xor eax 0D2h +
mov edx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_28] eax +
mov eax ecx +
shr eax 8 +
xor al 42h +
movzx eax al +
sub ebx edi +
xor ebx [ebp+var_8] +
mov [ebp+var_2C] edx +
cdq   +
xor ebx ecx +
mov [ebp+var_1C] eax +
lea eax [ebx+69FDBC78h] +
mov [ebp+var_18] edx +
push eax  +
mov edx offset dword_1005570 +
mov eax esi +
mov [ebp+var_10] ecx +
mov [ebp+var_14] ebx +
call sub_1014CA2  +
mov edx [ebp+var_8] +
lea ecx [edx+11466F76h] +
mov ecx [ebp+var_4] +
xor ecx 4B49593Eh +
xor eax eax +
or eax ecx +
mov ecx edi +
sub ecx [ebp+arg_4] +
mov [ebp+var_34] eax +
mov eax ecx +
xor eax [ebp+var_4] +
xor ecx ebx +
xor ecx [ebp+var_4] +
xor eax edx +
xor ecx 273A2804h +
mov [ebp+var_C] ecx +
xor eax 49E6694Eh +
and [ebp+var_20] 0 +
xor ecx ecx +
lea edx [eax-57B0381Ah] +
mov edx [ebp+var_C] +
add edx 387E7A63h +
or ecx edx +
mov edx [ebp+var_C] +
xor edi eax +
xor edx eax +
xor edx [ebp+var_10] +
xor edi ebx +
xor edi [ebp+arg_4] +
mov [ebp+var_3C] ecx +
lea ecx [edi-6F5A0E10h] +
xor edx 4C87331Fh +
mov [ebp+var_24] ecx +
mov ecx edi +
xor ecx [ebp+var_C] +
mov [ebp+arg_4] edx +
xor ecx [ebp+var_8] +
xor edx edi +
xor edx [ebp+var_4] +
xor ecx [ebp+var_10] +
xor edx [ebp+var_8] +
mov edi edx +
xor edi ecx +
xor edi eax +
mov eax [ebp+var_2C] +
xor ebx edi +
sub eax [ebp+var_1C] +
jz loc_1032228  +
mov eax [ebp+arg_4] +
lea edi [eax+30DFBBB6h] +
xor eax eax +
xor ecx 0EDB256DFh +
xor edx edx +
jmp loc_1032243  +
xor ecx [ebp+arg_4] +
xor edi edi +
xor ecx [ebp+var_14] +
xor edx 7906DC4Ch +
xor ecx [ebp+var_4] +
add ecx 446228C5h +
mov eax ecx +
xor ecx ecx +
or eax ecx +
or edi edx +
mov edx [ebp+var_34] +
movzx ecx bl +
mov [ecx+esi+3] edx +
xor edx edx +
mov [ecx+esi+7] edx +
mov edx [ebp+var_1C] +
mov ecx ebx +
shr ecx 8 +
movzx ecx cl +
mov [esi+ecx*8-5B0h] edx +
mov edx [ebp+var_18] +
mov [esi+ecx*8-5ACh] edx +
mov edx [ebp+var_3C] +
mov ecx ebx +
shr ecx 10h +
movzx ecx cl +
mov [esi+ecx*8-0A0h] edx +
xor edx edx +
mov [esi+ecx*8-9Ch] edx +
mov ecx [ebp+var_24] +
shr ebx 18h +
xor ebx 0BCh +
mov [esi+ebx*8] ecx +
mov ecx [ebp+var_20] +
mov edx edi +
pop edi  +
mov [esi+ebx*8+4] ecx +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
xor eax eax +
jmp loc_1032595  +
***
mov edx eax +
inc eax  +
mov [ebp-0ECh] eax +
mov eax 0F000h +
test [edi+edx*2+8] ax +
jz loc_1032575  +
movzx eax word ptr [edi+edx*2+8] +
mov edx [edi] +
and dword ptr [ebp-60h] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-70h] eax +
sub [ebp-70h] ebx +
mov [ebp-74h] eax +
jz loc_103267C  +
mov eax [ebp-60h] +
movzx eax byte ptr [eax+ebx] +
add eax esi +
add [ebp-68h] eax +
add eax [ebp-64h] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-68h] eax +
inc dword ptr [ebp-60h]  +
mov [ebp-64h] eax +
mov eax [ebp-60h] +
cmp eax [ebp-70h] +
jb loc_103261E  +
mov eax [ebp-74h] +
mov eax [eax] +
sub eax [ebp-100h] +
xor ebx ebx +
mov [ebp-108h] eax +
movzx eax byte ptr [ebp+ebx-108h] +
add eax esi +
add [ebp-68h] eax +
add eax [ebp-64h] +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 2 +
ror edx 2 +
xor eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-68h] eax +
mov [ebp-64h] eax +
inc ebx  +
cmp ebx 4 +
jb loc_103268C  +
mov ebx [ebp-74h] +
add ebx 4 +
jmp loc_1032575  +
***
mov eax [ebp-0C4h] +
mov esi [ebp-70h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-48h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-59h] al +
mov [ecx+esi] al +
inc edx  +
cmp edx ebx +
jb loc_1032AE8  +
sub [ebp-6Ch] ebx +
add [ebp-80h] ebx +
add esi ebx +
add [ebp-0D8h] ebx +
mov [ebp-70h] esi +
jmp loc_103280C  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_14] ecx +
mov edx [ebp+arg_0] +
mov eax edx +
mov esi [ebp+arg_4] +
mov ebx edx +
and [ebp+var_20] 0 +
and [ebp+var_18] 0 +
shl eax 4 +
mov edi esi +
shr edi 4 +
add eax edi +
shr edx 4 +
mov edi esi +
shl edi 4 +
add edx edi +
xor edx eax +
movzx edi al +
mov [ebp+var_8] edx +
xor edi 0E4h +
mov edi [ecx+edi*8] +
movzx edx dx +
mov edx [edi+edx-3CE0h] +
mov edi [ebp+arg_0] +
xor ebx esi +
add edi 0BC88FA3Fh +
xor edi ebx +
mov [ebp+var_24] edx +
xor edi eax +
mov [ebp+var_C] eax +
mov [ebp+var_10] eax +
lea edx [ebx+4CB6F0EAh] +
lea eax [edi-57EF8182h] +
mov [ebp+var_1C] edx +
push eax  +
mov edx offset dword_10055D8 +
mov eax ecx +
call sub_1014CA2  +
mov eax [ebp+var_24] +
mov edx [ebp+arg_0] +
mov ecx eax +
sub ecx [ebp+var_1C] +
neg ecx  +
sbb cl cl +
inc cl  +
cmp [ebp+var_1C] eax +
setnbe [ebp+var_1]  +
xor edx [ebp+var_8] +
xor edx ebx +
xor edx esi +
sub esi [ebp+arg_0] +
xor esi edi +
xor esi [ebp+var_8] +
mov [ebp+arg_4] esi +
mov esi [ebp+var_C] +
xor esi edx +
xor esi edi +
mov edi [ebp+arg_4] +
mov eax esi +
xor eax edi +
xor eax ebx +
mov ebx [ebp+var_C] +
xor ebx eax +
cmp [ebp+var_1] 1 +
jnz loc_103373F  +
xor edx 5DDCE41Bh +
xor eax eax +
add edi 0AD64387Eh +
xor esi esi +
jmp loc_1033756  +
xor edi edx +
xor edi [ebp+var_10] +
xor edx edx +
xor edi 0EFB5D837h +
mov eax edi +
add esi 304B1210h +
xor edi edi +
or eax edi +
or edx esi +
mov esi [ebp+var_14] +
test cl cl +
setnz cl  +
cmp [ebp+var_1] 0 +
movzx edi bl +
mov [edi+esi-48h] cl +
setnz cl  +
shr ebx 8 +
movzx edi bl +
xor edi 34h +
mov [esi+edi*8] cl +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push [ebp+arg_C]  +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov edx [ebp+arg_0] +
push ebx  +
mov ebx ecx +
push esi  +
mov esi [ebp+arg_4] +
lea ecx [edx+esi-3314B88Fh] +
movzx eax cl +
push edi  +
mov edi [ebx+eax*8-318h] +
mov eax [ebx+eax*8-314h] +
mov [ebp+arg_4] eax +
lea eax [edx+2B429A1Ah] +
mov [ebp+arg_4] eax +
mov [ebp+var_8] ebx +
mov ebx edx +
xor edx [ebp+arg_4] +
mov [ebp+var_4] ecx +
xor edx [ebp+var_4] +
mov eax esi +
shr eax 4 +
shl ebx 4 +
add ebx eax +
xor ebx ecx +
shr ecx 8 +
movzx eax cl +
mov ecx [ebp+arg_4] +
xor ecx 4E76B50Ah +
sub eax ecx +
sub eax 70h +
movzx ecx bl +
xor eax [ecx+edi-76h] +
mov ecx ebx +
shr ecx 8 +
movzx ecx cl +
mov [ecx+edi+1Ch] eax +
xor edx esi +
mov edi edx +
mov eax edi +
xor eax 91ABA9A4h +
push eax  +
mov eax [ebp+var_8] +
mov edx offset dword_10056CC +
call sub_1014CA2  +
lea edx [esi+5C840661h] +
add esi 0B04555AAh +
xor esi edi +
xor edx ebx +
xor edx [ebp+arg_4] +
xor esi ebx +
xor esi 71867018h +
xor eax eax +
pop edi  +
or eax esi +
xor edx 0D4125E70h +
xor ecx ecx +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1D0h +
mov eax dword_1043424 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
test byte ptr dword_1042F98 1 +
push edi  +
mov edi ecx +
jnz loc_1035619  +
or dword_1042F98 1 +
mov byte_1042F88 bl +
mov [ebp+var_5] 88h +
mov al [ebp+var_5] +
push 4  +
pop eax  +
call sub_1035895  +
mov eax edi +
not eax  +
and eax 1 +
add eax edi +
lea eax ds:38h[eax*8] +
call sub_1035884  +
mov eax esp +
lea esi [eax+0Fh] +
and esi 0FFFFFFF0h +
cmp edi ebx +
jz loc_103565E  +
mov ecx edi +
shl ecx 3 +
push ecx  +
push [ebp+arg_28]  +
add eax 28h +
push eax  +
call memcpy  +
add esp 0Ch +
xor eax eax +
mov [ebp+var_CC] eax +
mov [ebp+var_2C] eax +
mov ecx [ebp+arg_4] +
mov [ebp+var_D0] esi +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_30] esi +
mov edi esi +
stos   +
stos   +
mov eax [ebp+arg_8] +
mov [ebp+var_98] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_94] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_C0] eax +
mov eax [ebp+arg_14] +
mov [ebp+var_BC] eax +
mov eax [ebp+arg_18] +
mov [ebp+var_140] eax +
mov eax [ebp+arg_1C] +
mov [ebp+var_13C] eax +
mov eax [ebp+arg_20] +
mov [ebp+var_120] eax +
mov eax [ebp+arg_24] +
mov [ebp+var_11C] eax +
mov eax [ebp+arg_0] +
mov edi eax +
or eax ecx +
mov [ebp+var_C] ecx +
jz loc_103571C  +
mov eax [ebp+var_18] +
or eax [ebp+var_14] +
jz loc_10356FB  +
xor eax eax +
cmp [ebp+var_14] eax +
ja loc_10356FB  +
jb loc_10356E9  +
cmp [ebp+var_18] esi +
jnb loc_10356FB  +
mov eax esi +
sub eax [ebp+var_18] +
call sub_1035884  +
mov esi esp +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
push [ebp+var_C]  +
mov eax edi +
and eax 3FFh +
push edi  +
lea ecx [ebp+var_1D0] +
call ds:off_10035A0[eax*4]  +
mov edi eax +
or eax edx +
mov [ebp+var_C] edx +
jnz loc_10356D3  +
mov eax [ebp+var_D0] +
mov edx [ebp+var_CC] +
lea esp [ebp-1DCh] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1026F89  +
leave   +
retn 2Ch  +
***
inc ebx  +
xor eax 0E36D6F69h +
call near ptr 61B95F69h  +
dec sp  +
in al 79h +
in eax 49h +
push ebp  +
in al dx +
pop edx  +
mov al 2 +
mov [eax] dh +
xor dh bh +
fistp  dword ptr [eax+ecx] +
mov edi edi +
jmp ds:_stricmp  +
***
jmp ds:_snwprintf_s  +
***
cmp cl 40h +
cmp cl 40h +
jnb loc_1035844  +
cmp cl 20h +
jnb loc_103583A  +
shrd eax edx +
shr edx cl +
retn   +
mov eax edx +
xor edx edx +
and cl 1Fh +
shr eax cl +
retn   +
xor eax eax +
xor edx edx +
retn   +
***
mov eax [esp+arg_4] +
sub ecx eax +
sub ecx eax +
mov eax offset dword_1005710 +
mov eax offset dword_1005710 +
mov eax offset dword_1005710 +
shr eax 8 +
mov cl al +
xor cl 5Ch +
mov dl al +
xor dl 2Eh +
mov byte_1043400 cl +
mov byte_1043401 cl +
mov byte_1043402 dl +
mov byte_1043403 cl +
mov cl al +
mov dl al +
xor cl 53h +
xor dl 57h +
mov byte_1043404 cl +
mov byte_1043406 dl +
mov cl al +
mov dl al +
xor cl 49h +
xor dl 56h +
xor al 44h +
mov byte_1043405 cl +
mov byte_1043407 dl +
mov byte_1043408 cl +
mov byte_1043409 al +
retn   +
***
dec edx  +
retn 0C29Dh  +
***
and dword ptr [ebp-24h] 0 +
jmp loc_1035BA5  +
***
mov ebx 0F000h +
inc dword ptr [ebp-24h]  +
test [eax+edx*2+8] bx +
jz loc_1035B91  +
movzx edx word ptr [eax+edx*2+8] +
mov ebx [eax] +
and dword ptr [ebp-4] 0 +
and edx 0FFFh +
lea ebx __ImageBase[edx+ebx] +
mov [ebp-8] ebx +
sub [ebp-8] ecx +
mov [ebp-10h] ebx +
jz loc_1035C63  +
mov edx [ebp-4] +
movzx edx byte ptr [edx+ecx] +
add edx esi +
add [ebp-20h] edx +
add edx [ebp-1Ch] +
imul edx edx +
ror edx 7 +
mov ebx edx +
imul edx edx +
rol edx 7 +
ror ebx 7 +
xor edx ebx +
imul edx edx +
ror edx 7 +
add [ebp-20h] edx +
inc dword ptr [ebp-4]  +
mov [ebp-1Ch] edx +
mov edx [ebp-4] +
cmp edx [ebp-8] +
jb loc_1035C1E  +
mov ebx [ebp-10h] +
mov ecx [ebx] +
sub ecx [ebp-14h] +
and dword ptr [ebp-4] 0 +
mov [ebp-10h] ecx +
mov ecx [ebp-4] +
movzx ecx byte ptr [ebp+ecx-10h] +
add ecx esi +
add [ebp-20h] ecx +
add ecx [ebp-1Ch] +
imul ecx ecx +
ror ecx 7 +
mov edx ecx +
imul ecx ecx +
rol ecx 7 +
ror edx 7 +
xor ecx edx +
imul ecx ecx +
ror ecx 7 +
add [ebp-20h] ecx +
inc dword ptr [ebp-4]  +
cmp dword ptr [ebp-4] 4 +
mov [ebp-1Ch] ecx +
jb loc_1035C6F  +
lea ecx [ebx+4] +
jmp loc_1035B91  +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-10h] eax +
mov [ebp-24h] ecx +
mov [ebp-20h] edx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] esi +
mov [ebp-14h] edi +
mov edi offset Address +
lea esi [ebp+4] +
mov ecx [esi+8] +
mov eax [esi+4] +
mov [ebp-0Ch] ecx +
movzx ecx byte ptr [eax] +
sub esi 4 +
and ecx 0Fh +
mov [ebp-8] ecx +
lea ecx [eax+1] +
lea eax [ecx-1] +
mov [ebp-4] eax +
cmp eax edi +
jb loc_1035E90  +
mov ebx ds:dword_1021358 +
mov edx ds:dword_10049B0 +
imul edx ebx +
lea edx Address[edx] +
cmp eax edx +
jnb loc_1035E90  +
mov ebx ds:dword_1021358 +
sub eax edi +
xor edx edx +
div  ebx +
mov edx ds:dword_1021358 +
imul edx eax +
mov eax [ebp-4] +
lea ebx Address[edx] +
jmp loc_1035E92  +
xor ebx ebx +
test ebx ebx +
jnz loc_1035E9D  +
and eax 0FFFF0000h +
mov ebx eax +
sub ecx ebx +
lea eax [ecx-40h] +
test eax eax +
jge loc_1035EA8  +
xor eax eax +
add eax ebx +
push 40h  +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1035EAD  +
mov eax 0F36785BBh +
cmp ebx edi +
jb loc_1035EF4  +
mov eax ds:dword_10049B0 +
mov ecx ds:dword_1021358 +
imul eax ecx +
lea eax Address[eax] +
cmp ebx eax +
jnb loc_1035EF4  +
mov eax ebx +
sub eax edi +
mov ecx ds:dword_1021358 +
xor edx edx +
div  ecx +
mov ecx ds:dword_1021358 +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_1035EF6  +
xor ecx ecx +
test ecx ecx +
jz loc_1035F1B  +
mov eax ebx +
mov ecx ds:dword_1021358 +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_10049B0 +
mov dword_10430D4[eax*4] 0B4C4h +
jmp loc_1035F38  +
call ds:__imp_GetLastError  +
push 8000h  +
push 0  +
push ebx  +
mov edi eax +
call ds:VirtualFree  +
push edi  +
call ds:SetLastError  +
mov eax [ebp-8] +
mov eax ds:off_101D350[eax*4] +
mov [esi+8] eax +
mov eax [ebp-0Ch] +
mov [esi+0Ch] eax +
mov eax [ebp-10h] +
mov ebx [ebp-1Ch] +
mov ecx [ebp-24h] +
mov edx [ebp-20h] +
mov edi [ebp-14h] +
mov esi [ebp-18h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 50h +
mov [ebp-3Ch] eax +
mov [ebp-50h] ecx +
mov [ebp-4Ch] edx +
mov [ebp-48h] ebx +
mov [ebp-44h] esi +
mov [ebp-40h] edi +
lea esi [ebp+4] +
mov ebx [esi+4] +
sub esi 4 +
mov eax ebx +
push ebx  +
mov [ebp-0Ch] esi +
mov [ebp-14h] ebx +
mov eax 0D0953FEDh +
mov edi [ebx+8] +
mov edx ds:off_10051BC +
mov ebx [ebx] +
mov eax 0FFFFFFFh +
and dword ptr [ebp-24h] 0 +
and dword ptr [ebp-20h] 0 +
and ebx eax +
and edi eax +
mov eax offset __ImageBase +
pop ecx  +
add ebx eax +
mov ecx eax +
sub ecx edx +
mov [ebp-18h] ecx +
jnz loc_1036021  +
and dword ptr [ebp-4] 0 +
test edi edi +
jbe loc_1036249  +
mov esi 7FFFFFFFh +
mov ecx 399E580Ah +
mov edx ecx +
mov eax [ebp-4] +
movzx eax byte ptr [eax+ebx] +
add eax ecx +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax esi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax esi +
add eax edx +
imul eax eax +
ror eax 17h +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-20h] eax +
cmp [ebp-4] edi +
jb loc_1035FD5  +
jmp loc_1036246  +
mov edx ebx +
sub edx eax +
mov esi edx +
lea ecx [ebx+edi] +
and esi 0FFFFF000h +
mov [ebp-4] esi +
add edi edx +
mov esi edx +
mov edx edi +
sub esi [ebp-4] +
mov [ebp-1Ch] ecx +
mov ecx ds:dword_100003C +
and edx 0FFFFF000h +
sub edi edx +
mov [ebp-34h] edi +
mov edi ds:dword_10000A0[ecx] +
add edi eax +
mov eax ds:dword_10000A4[ecx] +
add eax edi +
mov [ebp-38h] edx +
mov [ebp-30h] eax +
jmp loc_1036072  +
mov ecx [ebp-4] +
cmp [edi] ecx +
jnb loc_1036076  +
add edi [edi+4] +
cmp edi eax +
jnz loc_1036068  +
and dword ptr [ebp-28h] 0 +
cmp edi eax +
jz loc_10360B7  +
mov ecx [ebp-4] +
cmp [edi] ecx +
jnz loc_10360B7  +
mov ecx [edi+4] +
sub ecx 8 +
shr ecx 1 +
mov [ebp-10h] ecx +
jz loc_10360B7  +
lea ecx [edi+8] +
mov [ebp-4] ecx +
mov ecx [ebp-4] +
movzx ecx word ptr [ecx] +
and ecx 0FFFh +
cmp ecx esi +
jnb loc_10360B7  +
inc dword ptr [ebp-28h]  +
mov ecx [ebp-10h] +
add dword ptr [ebp-4] 2 +
cmp [ebp-28h] ecx +
jnz loc_1036098  +
mov ecx 399E580Ah +
mov esi 7FFFFFFFh +
jmp loc_10360C9  +
mov eax [ebp-30h] +
mov edx [ebp-38h] +
cmp edi eax +
jz loc_10361F8  +
cmp [edi] edx +
ja loc_10361F8  +
mov eax [edi+4] +
lea edx [eax-8] +
shr edx 1 +
mov eax [ebp-28h] +
cmp eax edx +
jnz loc_1036105  +
add edi [edi+4] +
cmp edi [ebp-30h] +
jz loc_10361F8  +
mov eax [ebp-38h] +
cmp [edi] eax +
ja loc_10361F8  +
and dword ptr [ebp-28h] 0 +
jmp loc_10360D9  +
***
mov edx [ebp-38h] +
cmp [edi] edx +
jnz loc_103611F  +
movzx eax word ptr [edi+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp-34h] +
jnb loc_10361F8  +
mov edx 0F000h +
mov eax [ebp-28h] +
inc dword ptr [ebp-28h]  +
test [edi+eax*2+8] dx +
jz loc_10360C3  +
mov edx [edi] +
movzx eax word ptr [edi+eax*2+8] +
and dword ptr [ebp-4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-8] eax +
sub [ebp-8] ebx +
mov [ebp-10h] eax +
jz loc_10361A0  +
mov eax [ebp-4] +
mov edx ecx +
movzx eax byte ptr [eax+ebx] +
add eax ecx +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax esi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax esi +
add eax edx +
imul eax eax +
ror eax 17h +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-20h] eax +
mov eax [ebp-4] +
cmp eax [ebp-8] +
jb loc_1036153  +
mov eax [ebp-10h] +
mov eax [eax] +
sub eax [ebp-18h] +
xor ebx ebx +
mov [ebp-8] eax +
mov edx ecx +
movzx eax byte ptr [ebp+ebx-8] +
add eax ecx +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax esi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax esi +
add eax edx +
imul eax eax +
ror eax 17h +
add [ebp-24h] eax +
inc ebx  +
cmp ebx 4 +
mov [ebp-20h] eax +
jb loc_10361AA  +
mov ebx [ebp-10h] +
add ebx 4 +
jmp loc_10360C3  +
***
mov eax [ebp-1Ch] +
xor edi edi +
sub eax ebx +
mov [ebp-1Ch] eax +
jz loc_1036246  +
movzx eax byte ptr [edi+ebx] +
add eax ecx +
add [ebp-24h] eax +
add eax [ebp-20h] +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax esi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax esi +
add eax edx +
imul eax eax +
ror eax 17h +
add [ebp-24h] eax +
mov [ebp-20h] eax +
inc edi  +
cmp edi [ebp-1Ch] +
jb loc_1036204  +
mov esi [ebp-0Ch] +
add dword ptr [esi+8] 10h +
mov edx [ebp-20h] +
mov eax [ebp-14h] +
mov eax [eax+0Ch] +
and eax 0FFFFFFFh +
mov ecx [ebp-24h] +
sub ecx ds:__ImageBase[eax] +
sbb edx ds:dword_1000004[eax] +
mov eax ecx +
or eax edx +
jz loc_1036323  +
call sub_100D9B4  +
lea ecx [esi+0Ch] +
mov edx 0FFFFF000h +
and ecx 0FFFFFFFCh +
lea edi [ecx+0FFFh] +
and eax edx +
and edi edx +
mov edx 0FFFFh +
mov [ebp-1Ch] eax +
mov dword ptr [esi+8] offset sub_1016D68 +
xor eax eax +
mov ebx dword_1042FC4 +
imul ebx ebx +
add ebx 269EC3h +
mov dword_1042FC4 ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_103629F  +
mov ebx 0FFFFh +
div  ebx +
mov eax [ebp-1Ch] +
inc edx  +
mov [ebp-4Ch] eax +
cmp ecx edi +
mov [ebp-50h] edx +
mov eax ecx +
mov dword ptr [ebp-1Ch] 0 +
jnb loc_10362F0  +
mov ecx [ebp-1Ch] +
mov [eax] ecx +
add eax 4 +
cmp eax edi +
jb loc_10362E4  +
mov eax [ebp-14h] +
mov dword ptr [esi+8] offset sub_1016D68 +
mov eax [eax+4] +
and eax 0FFFFFFFh +
mov ecx [ebp-50h] +
mov edx ecx +
shl edx 10h +
mov [ebp-40h] ecx +
add eax offset __ImageBase +
xor edx [eax] +
xor edx dword_1042E64 +
xor edx ecx +
and dword ptr [ebp-50h] 0 +
mov [ebp-44h] edx +
mov eax 0B751F19Fh +
mov eax [ebp-3Ch] +
mov ecx [ebp-50h] +
mov esi [ebp-44h] +
mov edx [ebp-4Ch] +
mov edi [ebp-40h] +
mov ebx [ebp-48h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
mov ecx dword_10430FC +
mov eax dword_10430F8 +
mov edx eax +
or edx ecx +
jnz loc_1036353  +
xor eax eax +
retn   +
***
push ecx  +
push eax  +
call dword_1043494  +
and dword_10430F8 0 +
and dword_10430FC 0 +
retn   +
***
xor eax eax +
jmp loc_103663A  +
***
mov edx eax +
inc eax  +
mov [ebp-0E8h] eax +
mov eax 0F000h +
test [edi+edx*2+8] ax +
jz loc_103661A  +
movzx eax word ptr [edi+edx*2+8] +
mov edx [edi] +
and dword ptr [ebp-60h] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-70h] eax +
sub [ebp-70h] ebx +
mov [ebp-74h] eax +
jz loc_1036713  +
mov edx esi +
mov eax [ebp-60h] +
movzx eax byte ptr [eax+ebx] +
add eax esi +
add [ebp-68h] eax +
add eax [ebp-64h] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
mov eax edx +
add [ebp-68h] eax +
inc dword ptr [ebp-60h]  +
mov eax [ebp-60h] +
mov [ebp-64h] edx +
cmp eax [ebp-70h] +
jb loc_10366C3  +
mov eax [ebp-74h] +
mov eax [eax] +
sub eax [ebp-100h] +
mov [ebp-104h] eax +
xor ebx ebx +
mov edx esi +
movzx eax byte ptr [ebp+ebx-104h] +
add eax esi +
add [ebp-68h] eax +
add eax [ebp-64h] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 2 +
ror eax 2 +
xor edx eax +
add [ebp-68h] edx +
mov [ebp-64h] edx +
inc ebx  +
cmp ebx 4 +
jb loc_1036723  +
mov ebx [ebp-74h] +
add ebx 4 +
jmp loc_103661A  +
***
mov esi [ebp-70h] +
mov eax [ebp-0C4h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-48h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-59h] al +
mov [ecx+esi] al +
inc edx  +
cmp edx ebx +
jb loc_1036B5F  +
sub [ebp-6Ch] ebx +
add [ebp-80h] ebx +
add esi ebx +
add [ebp-0D8h] ebx +
mov [ebp-70h] esi +
jmp loc_1036883  +
***
