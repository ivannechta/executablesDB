mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 200h  +
push esi  +
call sub_1003508  +
mov dword ptr [esi+200h] 1 +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
mov [eax+200h] ecx +
mov [eax] cl +
mov [eax+210h] ecx +
mov [eax+214h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 14h  +
call ds:malloc  +
mov esi eax +
xor ebx ebx +
pop ecx  +
cmp esi ebx +
jz loc_100254A  +
push [ebp+arg_4]  +
mov edi ds:_strdup +
mov [esi] ebx +
mov [esi+4] ebx +
call edi  +
pop ecx  +
mov [esi] eax +
cmp eax ebx +
jz loc_100252B  +
cmp [ebp+arg_8] ebx +
jnz loc_100251E  +
mov [esi+4] ebx +
mov ecx [ebp+arg_0] +
or dword ptr [esi+8] 0FFFFFFFFh +
mov [esi+10h] ebx +
lea eax [ecx+4] +
mov edx [eax] +
mov [esi+0Ch] edx +
cmp [ecx] ebx +
jnz loc_1002568  +
mov [ecx] esi +
jmp loc_100256D  +
push [ebp+arg_8]  +
call edi  +
pop ecx  +
mov [esi+4] eax +
cmp eax ebx +
jnz loc_1002504  +
mov eax [esi] +
mov edi ds:free +
cmp eax ebx +
jz loc_100253B  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+4] +
cmp eax ebx +
jz loc_1002546  +
push eax  +
call edi  +
pop ecx  +
push esi  +
call edi  +
pop ecx  +
push offset aAddingAFile  +
push offset aS  +
push offset aOutOfMemory1  +
push [ebp+arg_C]  +
call sub_1002475  +
add esp 10h +
xor eax eax +
jmp loc_1002571  +
mov ecx [eax] +
mov [ecx+10h] esi +
mov [eax] esi +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 8  +
call ds:malloc  +
pop ecx  +
test eax eax +
jnz loc_10025AD  +
push offset aCreatingFileLi  +
push offset aS  +
push offset aOutOfMemory1  +
push [ebp+arg_0]  +
call sub_1002475  +
add esp 10h +
xor eax eax +
jmp loc_10025B4  +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+10h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
mov edi [esi] +
call ds:_strdup  +
pop ecx  +
mov [esi] eax +
test eax eax +
jnz loc_100261E  +
push offset aChangingSource  +
push offset aS  +
push offset aOutOfMemory1  +
push [ebp+arg_8]  +
call sub_1002475  +
add esp 10h +
xor eax eax +
jmp loc_100262D  +
test edi edi +
jz loc_100262A  +
push edi  +
call ds:free  +
pop ecx  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1002651  +
cmp [esi] al +
jz loc_100264D  +
inc esi  +
dec edx  +
jnz loc_1002645  +
test edx edx +
jnz loc_1002656  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1002667  +
test eax eax +
jl loc_1002664  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100269D  +
cmp [ebp+arg_4] eax +
jz loc_1002699  +
mov dl [ebx] +
test dl dl +
jz loc_1002699  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1002681  +
test esi esi +
jnz loc_10026A4  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10026B0  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov cl [eax] +
test cl cl +
jz loc_10026E6  +
cmp cl 5Ch +
jz loc_10026E6  +
cmp cl 2Fh +
jz loc_10026E6  +
cmp cl 3Ah +
jz loc_10026E6  +
inc eax  +
mov byte ptr [eax] 5Ch +
mov byte ptr [eax+1] 0 +
xor eax eax +
inc eax  +
jmp loc_10026E8  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpCurrentChar] +
mov cl [esi] +
push edi  +
mov eax esi +
mov edi esi +
jmp loc_1002722  +
cmp cl 2Fh +
jz loc_1002712  +
cmp cl 3Ah +
jz loc_1002712  +
cmp cl 5Ch +
jnz loc_1002715  +
lea edi [eax+1] +
push 0  +
push eax  +
push 0  +
call ds:CharNextExA  +
mov cl [eax] +
test cl cl +
jnz loc_1002703  +
cmp [edi] cl +
jnz loc_1002744  +
push esi  +
push offset aS  +
push offset aMissingFileNam  +
push [ebp+arg_4]  +
call sub_1002475  +
add esp 10h +
xor eax eax +
jmp loc_1002746  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax esi +
mov dword ptr [ebp+RootPathName] 5C3A78h +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1002767  +
sub eax ecx +
cmp eax 2 +
jb loc_1002799  +
movzx eax byte ptr [esi] +
push eax  +
call ds:isalpha  +
pop ecx  +
test eax eax +
jz loc_1002799  +
cmp byte ptr [esi+1] 3Ah +
jnz loc_1002799  +
movsx eax byte ptr [esi] +
push eax  +
call ds:toupper  +
pop ecx  +
sub al 40h +
jmp loc_100279F  +
call ds:_getdrive  +
mov ecx [ebp+arg_4] +
add al 40h +
mov [ecx] al +
mov [ebp+RootPathName] al +
lea eax [ebp+RootPathName] +
push eax  +
call ds:GetDriveTypeA  +
dec eax  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test ax ax +
jnz loc_10027D8  +
mov eax 80h +
jmp loc_10027DB  +
and eax 27h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test al al +
jns loc_10027F4  +
xor eax eax +
jmp loc_10027F7  +
and eax 27h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1002816  +
cmp edx 7FFFFFFFh +
jbe loc_100281B  +
mov eax 80070057h +
test eax eax +
jl loc_1002831  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100266D  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_1002855  +
cmp edx 7FFFFFFFh +
jbe loc_1002857  +
mov eax ecx +
test eax eax +
jl loc_100287E  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_100286E  +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov byte ptr [ecx] 0 +
jmp loc_100287E  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_100266D  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_10028A0  +
cmp edx esi +
jbe loc_10028A5  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_10028BD  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_1002638  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_10028BF  +
xor ecx ecx +
test eax eax +
jl loc_10028D5  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
add ecx ebx +
call sub_100266D  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10028F6  +
cmp ecx 7FFFFFFFh +
jbe loc_10028FB  +
mov eax 80070057h +
test eax eax +
jl loc_1002938  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100292B  +
cmp eax esi +
ja loc_100292B  +
jnz loc_1002933  +
mov [esi+edi] bl +
jmp loc_1002933  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov byte ptr [edi] 0 +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1002952  +
sub eax ecx +
mov esi eax +
jz loc_1002997  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
dec eax  +
push eax  +
push edi  +
call sub_1002800  +
test eax eax +
jge loc_100298D  +
push [ebp+arg_8]  +
push offset aS  +
push offset aFileNameTooLon  +
push [ebp+arg_14]  +
call sub_1002475  +
add esp 10h +
xor eax eax +
jmp loc_10029CE  +
lea eax [esi+edi-1] +
push eax  +
call sub_10026BC  +
mov esi [ebp+arg_C] +
cmp byte ptr [esi] 0 +
jnz loc_10029BA  +
mov eax [ebp+lpCurrentChar] +
test eax eax +
jz loc_10029CB  +
cmp byte ptr [eax] 0 +
jz loc_10029CB  +
push [ebp+arg_14]  +
push eax  +
call sub_10026F1  +
mov esi eax +
test esi esi +
jz loc_1002989  +
push esi  +
push [ebp+arg_4]  +
push edi  +
call sub_1002887  +
test eax eax +
jge loc_10029CB  +
push esi  +
jmp loc_1002974  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 11Ch +
mov eax dword_100D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx ds:CharNextExA +
push esi  +
push edi  +
mov edi [ebp+lpCurrentChar] +
mov cl [edi] +
mov [ebp+var_108] eax +
mov [ebp+var_11C] edi +
mov eax edi +
jmp loc_1002A34  +
cmp cl 5Ch +
jz loc_1002A38  +
cmp cl 2Fh +
jz loc_1002A38  +
cmp cl 3Ah +
jnz loc_1002A2B  +
mov cl [eax+1] +
cmp cl 5Ch +
jz loc_1002A2B  +
cmp cl 2Fh +
jnz loc_1002A38  +
push 0  +
push eax  +
push 0  +
call ebx  +
mov cl [eax] +
test cl cl +
jnz loc_1002A0F  +
mov [ebp+var_104] 0 +
cmp byte ptr [eax] 0 +
jnz loc_1002A4A  +
cmp [ebp+arg_4] 0 +
jnz loc_1002A4C  +
mov eax edi +
cmp byte ptr [eax] 0 +
jz loc_1002ADA  +
mov cl [eax] +
test cl cl +
jz loc_1002ADA  +
mov esi eax +
mov al cl +
cmp al 5Ch +
jz loc_1002A85  +
cmp al 2Fh +
jz loc_1002A85  +
cmp al 3Ah +
jnz loc_1002A76  +
mov al [esi+1] +
cmp al 5Ch +
jz loc_1002A76  +
cmp al 2Fh +
jnz loc_1002A85  +
push 0  +
push esi  +
push 0  +
call ebx  +
mov esi eax +
mov al [esi] +
test al al +
jnz loc_1002A5F  +
mov cl [esi] +
test cl cl +
jnz loc_1002A91  +
cmp [ebp+arg_4] 0 +
jnz loc_1002ACE  +
mov eax esi +
sub eax edi +
test eax eax +
jle loc_1002AA5  +
cmp cl 3Ah +
jz loc_1002AA4  +
cmp byte ptr [esi-1] 3Ah +
jnz loc_1002AA5  +
inc eax  +
push eax  +
push edi  +
push 100h  +
lea eax [ebp+var_104] +
push eax  +
call sub_100283A  +
test eax eax +
jl loc_1002C60  +
lea eax [ebp+var_104] +
push eax  +
call ds:_mkdir  +
pop ecx  +
cmp byte ptr [esi] 0 +
lea eax [esi+1] +
jnz loc_1002A55  +
lea eax [ebp+var_104] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1002AE3  +
sub eax edx +
jnz loc_1002B15  +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1002AF3  +
sub eax edx +
jz loc_1002B15  +
mov al [edi] +
cmp al 5Ch +
jz loc_1002B08  +
cmp al 2Fh +
jnz loc_1002B15  +
mov [ebp+var_104] al +
mov byte ptr [ebp-103h] 0 +
lea eax [ebp+var_104] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1002B1E  +
sub eax edx +
mov edx eax +
mov [ebp+var_114] edx +
test edx edx +
jle loc_1002B4E  +
cmp edx 0FEh +
ja loc_1002C60  +
lea eax [ebp+edx+var_108+3] +
push eax  +
call sub_10026BC  +
add edx eax +
and [ebp+var_110] 0 +
and [ebp+var_10C] 0 +
mov esi ds:_errno +
mov edi ds:__doserrno +
mov [ebp+var_118] 100h +
sub [ebp+var_118] edx +
lea ebx [ebp+edx+var_104] +
call ds:GetCurrentProcessId  +
add eax [ebp+var_10C] +
push eax  +
push offset aCab5_5d_tmp  +
push [ebp+var_118]  +
push ebx  +
call sub_10028E0  +
add esp 10h +
test eax eax +
jl loc_1002D16  +
push 180h  +
lea eax [ebp+var_104] +
push 502h  +
push eax  +
call ds:_open  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_1002D45  +
call esi  +
mov eax [eax] +
sub eax 0Dh +
jz loc_1002C7B  +
sub eax 4 +
jz loc_1002C8E  +
sub eax 5 +
jnz loc_1002CEA  +
call edi  +
cmp dword ptr [eax] 12Fh +
jz loc_1002C8E  +
call edi  +
mov ebx eax +
call esi  +
mov [ebp+var_11C] eax +
call ds:GetLastError  +
push eax  +
push dword ptr [ebx]  +
mov eax [ebp+var_11C] +
push dword ptr [eax]  +
lea eax [ebp+var_104] +
push eax  +
push offset aEnsuredirector  +
call ds:printf  +
mov eax [ebp+var_114] +
mov [ebp+eax+var_104] 0 +
call edi  +
mov edi eax +
call esi  +
push dword ptr [edi]  +
push dword ptr [eax]  +
lea eax [ebp+var_104] +
push eax  +
push offset aSDD  +
push offset aPathIsInvalid1  +
push [ebp+var_108]  +
call sub_1002475  +
add esp 2Ch +
jmp loc_1002CD7  +
push edi  +
push offset aS  +
push offset aFileNameTooLon  +
push [ebp+var_108]  +
call sub_1002475  +
add esp 10h +
jmp loc_1002CD7  +
inc [ebp+var_110]  +
cmp [ebp+var_110] 5 +
jge loc_1002D21  +
inc [ebp+var_10C]  +
cmp [ebp+var_10C] 3E7h +
jl loc_1002B7F  +
mov eax [ebp+var_114] +
mov [ebp+eax+var_104] 0 +
lea eax [ebp+var_104] +
push eax  +
push [ebp+var_10C]  +
push offset aDS  +
push offset aRanOutOfTempFi  +
push [ebp+var_108]  +
call sub_1002475  +
add esp 14h +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1005F1E  +
leave   +
retn 0Ch  +
dec eax  +
dec eax  +
jnz loc_1002BF8  +
mov eax [ebp+var_114] +
mov [ebp+eax+var_104] 0 +
lea eax [ebp+var_104] +
push eax  +
push offset aS  +
push offset aNoMoreFileHand  +
jmp loc_1002C6B  +
push [ebp+var_11C]  +
jmp loc_1002C61  +
mov eax [ebp+var_114] +
mov [ebp+eax+var_104] 0 +
lea eax [ebp+var_104] +
push eax  +
push offset aS  +
push offset aCouldNotCreate  +
jmp loc_1002C6B  +
push eax  +
call ds:_close  +
lea eax [ebp+var_104] +
push eax  +
call ds:_unlink  +
pop ecx  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_1002CD9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
lea eax [ebp+FileInformation] +
push eax  +
push 0  +
push [ebp+lpFileName]  +
call ds:GetFileAttributesExA  +
test eax eax +
jz loc_1002DBD  +
lea eax [ebp+LocalFileTime] +
push eax  +
lea eax [ebp+FileTime] +
push eax  +
call ds:FileTimeToLocalFileTime  +
test eax eax +
jz loc_1002DBD  +
mov esi [ebp+lpFatDate] +
lea eax [esi+2] +
push eax  +
push esi  +
lea eax [ebp+LocalFileTime] +
push eax  +
call ds:FileTimeToDosDateTime  +
test eax eax +
jz loc_1002DBD  +
push [ebp+FileInformation]  +
call sub_10027E4  +
mov [esi+4] ax +
xor eax eax +
inc eax  +
jmp loc_1002DD7  +
push [ebp+lpFileName]  +
push offset aS  +
push offset aCannotGetDateT  +
push [ebp+arg_8]  +
call sub_1002475  +
add esp 10h +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi ds:CreateFileA +
xor esi esi +
push esi  +
push esi  +
push 3  +
push esi  +
push esi  +
mov ebx 40000000h +
push ebx  +
push [ebp+lpFileName]  +
call edi  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1002E29  +
push 64h  +
call ds:Sleep  +
push esi  +
push esi  +
push 3  +
push esi  +
push esi  +
push ebx  +
push [ebp+lpFileName]  +
call edi  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jz loc_1002E9F  +
mov edi [ebp+arg_4] +
lea eax [ebp+LocalFileTime] +
push eax  +
movzx eax word ptr [edi+2] +
push eax  +
movzx eax word ptr [edi] +
push eax  +
call ds:DosDateTimeToFileTime  +
mov ebx eax +
lea eax [ebp+LastWriteTime] +
push eax  +
lea eax [ebp+LocalFileTime] +
push eax  +
call ds:LocalFileTimeToFileTime  +
or ebx eax +
lea eax [ebp+LastWriteTime] +
push eax  +
push esi  +
push esi  +
push [ebp+hObject]  +
call ds:SetFileTime  +
push [ebp+hObject]  +
or ebx eax +
call ds:CloseHandle  +
movzx eax word ptr [edi+4] +
push eax  +
call sub_10027C4  +
push eax  +
push [ebp+lpFileName]  +
call ds:SetFileAttributesA  +
or eax ebx +
jnz loc_1002E9F  +
push [ebp+lpFileName]  +
push offset aS  +
push offset aCannotSetDateT  +
push [ebp+arg_8]  +
call sub_1002475  +
add esp 10h +
xor eax eax +
jmp loc_1002EA2  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
push esi  +
mov esi ds:_open +
push edi  +
mov edi [ebp+arg_4] +
push 8000h  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
mov [ebp+var_8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1002EF6  +
push edi  +
push offset aS  +
push offset aCannotOpenFile  +
push [ebp+arg_18]  +
call sub_1002475  +
add esp 10h +
jmp loc_1003046  +
push ebx  +
mov ebx [ebp+arg_18] +
push ebx  +
push edi  +
lea eax [ebp+FatDate] +
push eax  +
call sub_1002D68  +
test eax eax +
jz loc_100302B  +
cmp [ebp+arg_10] 0 +
jz loc_1002F26  +
push ebx  +
push [ebp+arg_14]  +
lea eax [ebp+FatDate] +
push eax  +
call [ebp+arg_10]  +
test eax eax +
jz loc_100302B  +
cmp [ebp+arg_8] 0 +
jnz loc_1002F38  +
mov [ebp+var_C] 1 +
jmp loc_100302B  +
mov ecx [ebp+arg_C] +
xor edx edx +
inc edx  +
cmp ecx edx +
ja loc_1002F44  +
mov ecx edx +
mov eax 100000h +
cmp ecx eax +
jnb loc_1002F57  +
cmp [ebp+arg_C] edx +
ja loc_1002F5A  +
mov [ebp+arg_C] edx +
jmp loc_1002F5A  +
mov [ebp+arg_C] eax +
push [ebp+arg_C]  +
call ds:malloc  +
pop ecx  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_1002F87  +
push [ebp+lpFileName]  +
push edi  +
push offset aSS  +
push offset aCouldNotAllo_0  +
push ebx  +
call sub_1002475  +
add esp 14h +
jmp loc_100302B  +
push 180h  +
push 8301h  +
push [ebp+lpFileName]  +
call esi  +
mov edi eax +
add esp 0Ch +
cmp edi 0FFFFFFFFh +
jnz loc_1002FB8  +
push [ebp+lpFileName]  +
push offset aS  +
push offset aCannotOpenFile  +
push ebx  +
call sub_1002475  +
add esp 10h +
jmp loc_100301E  +
mov ebx ds:_eof +
jmp loc_1002FEF  +
push [ebp+arg_C]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call ds:_read  +
mov esi eax +
add esp 0Ch +
cmp esi 0FFFFFFFFh +
jz loc_100304F  +
test esi esi +
jz loc_1002FEF  +
push esi  +
push [ebp+var_4]  +
push edi  +
call ds:_write  +
add esp 0Ch +
cmp eax esi +
jnz loc_1003064  +
push [ebp+var_8]  +
call ebx  +
pop ecx  +
test eax eax +
jz loc_1002FC0  +
push edi  +
call ds:_close  +
pop ecx  +
push [ebp+arg_18]  +
lea eax [ebp+FatDate] +
push eax  +
push [ebp+lpFileName]  +
or edi 0FFFFFFFFh +
call sub_1002DE1  +
test eax eax +
jz loc_100302B  +
mov [ebp+var_C] 1 +
cmp edi 0FFFFFFFFh +
jz loc_100302B  +
push edi  +
call ds:_close  +
pop ecx  +
push [ebp+var_8]  +
call ds:_close  +
cmp [ebp+var_4] 0 +
pop ecx  +
pop ebx  +
jz loc_1003046  +
push [ebp+var_4]  +
call ds:free  +
pop ecx  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
leave   +
retn 1Ch  +
push [ebp+arg_4]  +
push offset aS  +
push offset aCannotReadFile  +
push [ebp+arg_18]  +
jmp loc_1002FAE  +
push [ebp+arg_4]  +
push offset aS  +
push offset aCannotWriteFil  +
jmp loc_100305C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movsx eax al +
lea ecx [eax-41h] +
cmp ecx 19h +
ja loc_100308B  +
add eax 20h +
movsx ecx [ebp+arg_0] +
lea edx [ecx-41h] +
cmp edx 19h +
ja loc_100309A  +
add ecx 20h +
xor edx edx +
cmp eax ecx +
setz dl  +
mov eax edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
jmp loc_10030E9  +
cmp al 2Ah +
jz loc_1003130  +
cmp al 3Fh +
jz loc_10030FF  +
mov al [edi] +
push ebx  +
call sub_1003078  +
test eax eax +
jnz loc_10030E2  +
cmp bl 2Eh +
jnz loc_1003110  +
cmp [edi] al +
jnz loc_1003110  +
cmp [ebp+arg_8] 1 +
jnz loc_1003110  +
and [ebp+arg_8] eax +
cmp byte ptr [edi] 0 +
jz loc_10030E8  +
inc edi  +
inc esi  +
mov bl [esi] +
mov al bl +
test al al +
jnz loc_10030BC  +
xor eax eax +
cmp [edi] al +
setz al  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
cmp byte ptr [edi] 0 +
jnz loc_10030E7  +
cmp [ebp+arg_8] 1 +
jnz loc_1003110  +
and [ebp+arg_8] 0 +
jmp loc_10030E8  +
xor eax eax +
jmp loc_10030F8  +
cmp al 3Fh +
jnz loc_100312C  +
cmp byte ptr [edi] 0 +
jnz loc_1003129  +
cmp [ebp+arg_8] 1 +
jnz loc_1003110  +
and [ebp+arg_8] 0 +
jmp loc_1003130  +
inc edi  +
jmp loc_1003130  +
cmp al 2Ah +
jnz loc_1003160  +
inc esi  +
mov al [esi] +
test al al +
jnz loc_1003114  +
xor eax eax +
inc eax  +
jmp loc_10030F8  +
movzx ecx byte ptr [esi] +
push ecx  +
call sub_1003078  +
cmp eax 1 +
jnz loc_100315F  +
push [ebp+arg_8]  +
lea eax [esi+1] +
push eax  +
lea eax [edi+1] +
push eax  +
call sub_10030AC  +
cmp eax 1 +
jz loc_1003137  +
inc edi  +
mov al [edi] +
test al al +
jnz loc_100313C  +
cmp byte ptr [esi] 2Eh +
jnz loc_1003110  +
cmp [ebp+arg_8] 1 +
jmp loc_1003173  +
cmp al 2Ah +
jnz loc_1003110  +
inc esi  +
mov al [esi] +
test al al +
jnz loc_1003171  +
jmp loc_1003137  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_100D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov esi offset asc_100140C +
push esi  +
push ebx  +
call ds:strspn  +
mov [ebp+var_1C] eax +
add eax ebx +
push esi  +
push eax  +
call ds:strpbrk  +
mov edi eax +
add esp 10h +
test edi edi +
jz loc_10031D4  +
push esi  +
push edi  +
call ds:strspn  +
mov esi [ebp+var_1C] +
pop ecx  +
sub edi ebx +
pop ecx  +
mov [ebp+var_24] eax +
sub edi esi +
jmp loc_10031ED  +
mov eax [ebp+var_1C] +
and [ebp+var_24] 0 +
lea edi [ebx+eax] +
lea eax [edi+1] +
mov cl [edi] +
inc edi  +
test cl cl +
jnz loc_10031E1  +
mov esi [ebp+var_1C] +
sub edi eax +
cmp edi 3 +
jle loc_1003291  +
lea eax [edi-1] +
cdq   +
push 3  +
pop ecx  +
idiv  ecx +
mov [ebp+var_20] eax +
add eax edi +
cmp eax [ebp+arg_4] +
jg loc_1003291  +
lea eax [edi+esi] +
cmp eax 14h +
jnb loc_1003291  +
push edi  +
lea eax [ebx+esi] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
call memcpy  +
add esp 0Ch +
test esi esi +
jle loc_1003234  +
cmp esi [ebp+var_20] +
jl loc_1003234  +
sub ebx [ebp+var_20] +
add ebx esi +
mov eax edi +
push 3  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi edx +
test esi esi +
jnz loc_1003244  +
push ecx  +
pop esi  +
push esi  +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
call memcpy  +
sub edi esi +
add esp 0Ch +
add ebx esi +
lea ecx [ebp+esi+var_18] +
test edi edi +
jle loc_100327D  +
push 3  +
xor edx edx +
lea eax [edi-1] +
pop esi  +
div  esi +
inc eax  +
mov byte ptr [ebx] 2Ch +
inc ebx  +
mov esi ecx +
mov edi ebx +
movs   +
add ebx 3 +
add ecx 3 +
dec eax  +
movs   +
jnz loc_1003269  +
mov eax [ebp+var_24] +
mov ecx [ebp+var_1C] +
add ecx eax +
mov eax [ebp+var_20] +
cmp ecx eax +
jg loc_1003293  +
mov byte ptr [ebx] 0 +
jmp loc_1003293  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1005F1E  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx] +
cmp eax 69h +
jg loc_10032E7  +
jz loc_100330D  +
cmp eax 45h +
jz loc_10032D9  +
cmp eax 47h +
jz loc_10032D9  +
cmp eax 58h +
jz loc_100330D  +
cmp eax 62h +
jle loc_10032FA  +
cmp eax 64h +
jle loc_100330D  +
cmp eax 67h +
jg loc_10032FA  +
xor eax eax +
cmp byte ptr [ecx-1] 4Ch +
setz al  +
add eax 5 +
jmp loc_100331F  +
sub eax 6Fh +
jz loc_100330D  +
sub eax 4 +
jz loc_10032FE  +
dec eax  +
dec eax  +
jz loc_100330D  +
sub eax 3 +
jz loc_100330D  +
xor eax eax +
jmp loc_100331F  +
cmp byte ptr [ecx-1] 46h +
jz loc_1003308  +
push 7  +
jmp loc_100330A  +
push 8  +
pop eax  +
jmp loc_100331F  +
mov cl [ecx-1] +
xor eax eax +
cmp cl 68h +
jz loc_100331E  +
cmp cl 6Ch +
setz al  +
inc eax  +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp [esi] bl +
jz loc_100337F  +
push edi  +
mov edi ds:isdigit +
cmp byte ptr [esi] 25h +
jnz loc_1003378  +
inc esi  +
movzx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
test eax eax +
jz loc_1003378  +
push esi  +
call ds:atoi  +
cmp eax ebx +
pop ecx  +
jle loc_100335E  +
mov ebx eax +
mov al [esi] +
test al al +
jz loc_100337E  +
movzx eax al +
push eax  +
call edi  +
pop ecx  +
test eax eax +
jz loc_1003379  +
inc esi  +
mov al [esi] +
test al al +
jnz loc_1003364  +
jmp loc_1003379  +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_100333F  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10033A2  +
cmp ecx 7FFFFFFFh +
jbe loc_10033A7  +
mov eax 80070057h +
test eax eax +
jl loc_10033E3  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_10033D6  +
cmp eax esi +
ja loc_10033D6  +
jnz loc_10033DE  +
mov [esi+edi] bl +
jmp loc_10033DE  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
xor edi edi +
cmp esi eax +
jb loc_1003437  +
mov ecx esi +
sub ecx eax +
cmp [ebp+arg_8] ecx +
jb loc_1003437  +
lea ecx [ebp+arg_14] +
push ecx  +
push [ebp+arg_10]  +
sub eax esi +
add eax [ebp+arg_8] +
push eax  +
push esi  +
call sub_100338C  +
test eax eax +
jl loc_1003437  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1003424  +
sub eax edx +
mov edi eax +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
jmp loc_1003440  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 1 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
cmp byte ptr [edi] 0 +
jz loc_10034F5  +
push esi  +
cmp [ebp+arg_4] 1 +
jle loc_10034F4  +
mov al [edi] +
cmp al 25h +
jnz loc_10034E4  +
inc edi  +
movzx eax byte ptr [edi] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_10034D4  +
push edi  +
call ds:atoi  +
pop ecx  +
mov esi eax +
jmp loc_100349E  +
movzx eax al +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_10034A4  +
inc edi  +
mov al [edi] +
test al al +
jnz loc_100348E  +
mov eax [ebp+arg_C] +
lea esi [eax+esi*4-4] +
push dword ptr [esi]  +
push [ebp+arg_4]  +
push ebx  +
call sub_1002800  +
mov eax [esi] +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10034BB  +
sub eax esi +
cmp eax [ebp+arg_4] +
jl loc_10034CD  +
mov eax [ebp+arg_4] +
dec eax  +
add ebx eax +
sub [ebp+arg_4] eax +
jmp loc_10034EB  +
mov byte ptr [ebx] 25h +
mov al [edi] +
inc ebx  +
dec [ebp+arg_4]  +
cmp al 25h +
jnz loc_10034E4  +
inc edi  +
jmp loc_10034EB  +
mov [ebx] al +
inc ebx  +
inc edi  +
dec [ebp+arg_4]  +
cmp byte ptr [edi] 0 +
jnz loc_1003462  +
pop esi  +
mov eax ebx +
sub eax [ebp+arg_0] +
pop edi  +
mov byte ptr [ebx] 0 +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 274h +
mov eax dword_100D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
push edi  +
mov edi [ebp+arg_10] +
mov [ebp+var_234] eax +
mov eax [ebp+arg_8] +
push eax  +
mov [ebp+var_24C] eax +
call sub_1003328  +
mov [ebp+var_248] eax +
test eax eax +
jle loc_1003778  +
and [ebp+var_238] 0 +
cmp [ebp+var_248] 0 +
lea esi [ebp+var_224] +
mov eax ebx +
jle loc_1003778  +
lea ebx [edi-4] +
add edi 0FFFFFFF8h +
mov [ebp+var_228] edi +
mov edi 200h +
jmp loc_1003581  +
mov eax [ebp+var_23C] +
cmp byte ptr [eax] 25h +
mov ecx [ebp+var_238] +
mov [ebp+ecx*4+var_274] esi +
mov [ebp+var_22C] eax +
jnz loc_10037A4  +
lea edx [eax+1] +
mov eax edx +
jmp loc_10035AA  +
cmp cl 25h +
jz loc_10035B6  +
inc eax  +
mov cl [eax] +
mov [ebp+var_23C] eax +
test cl cl +
jnz loc_10035A4  +
sub eax [ebp+var_22C] +
cmp eax 2 +
mov [ebp+var_230] eax +
jl loc_10037C2  +
cmp eax 20h +
jnb loc_10037C2  +
xor ecx ecx +
cmp byte ptr [edx] 2Ch +
setz cl  +
mov [ebp+var_240] ecx +
test ecx ecx +
jz loc_100360F  +
mov ecx [ebp+var_22C] +
mov dl [ecx] +
add eax 0FFFFFFFEh +
push eax  +
add ecx 2 +
push ecx  +
lea eax [ebp-23h] +
push eax  +
mov [ebp+var_24] dl +
call memcpy  +
mov eax [ebp+var_230] +
mov [ebp+eax+var_25] 0 +
jmp loc_100362A  +
push eax  +
push [ebp+var_22C]  +
lea eax [ebp+var_24] +
push eax  +
call memcpy  +
mov eax [ebp+var_230] +
mov [ebp+eax+var_24] 0 +
mov eax [ebp+var_23C] +
add esp 0Ch +
dec eax  +
push eax  +
call sub_10032A9  +
xor ecx ecx +
inc ecx  +
mov [ebp+var_244] eax +
mov [ebp+var_230] esi +
mov [ebp+var_22C] ecx +
cmp eax ecx +
jz loc_10036C8  +
cmp eax 2 +
jz loc_10036BC  +
cmp eax 3 +
jz loc_10036BC  +
push 4  +
pop ecx  +
cmp eax ecx +
jle loc_10037BB  +
cmp eax 6 +
jle loc_1003687  +
cmp eax 7 +
jz loc_100367B  +
cmp eax 8 +
jnz loc_10037BB  +
add [ebp+var_228] ecx +
add ebx ecx +
push dword ptr [ebx]  +
jmp loc_10036D6  +
add [ebp+var_228] 8 +
mov eax [ebp+var_228] +
fld  qword ptr [eax] +
push ecx  +
push ecx  +
fstp  [esp+288h+var_288] +
lea eax [ebp+var_24] +
push eax  +
push esi  +
push edi  +
lea eax [ebp+var_224] +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
add ebx 8 +
call sub_10033EC  +
add esp 1Ch +
jmp loc_10036F2  +
add [ebp+var_228] 4 +
add ebx 4 +
jmp loc_1003683  +
add [ebp+var_228] 4 +
add ebx 4 +
movzx eax word ptr [ebx] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push esi  +
push edi  +
lea eax [ebp+var_224] +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
call sub_10033EC  +
add esp 18h +
cmp [ebp+var_22C] 0 +
lea eax [esi+eax+1] +
jnz loc_10037B7  +
mov ecx eax +
mov [ebp+var_25] 0 +
lea esi [ecx+1] +
mov dl [ecx] +
inc ecx  +
test dl dl +
jnz loc_100370C  +
sub ecx esi +
cmp [ebp+var_240] 0 +
lea esi [eax+ecx+1] +
jz loc_1003760  +
mov eax [ebp+var_230] +
lea ecx [ebp+var_224] +
sub eax ecx +
cmp eax 1ECh +
jge loc_1003760  +
cmp [ebp+var_244] 0 +
jle loc_1003760  +
cmp [ebp+var_244] 3 +
jg loc_1003760  +
lea eax [ebp+var_24] +
sub eax [ebp+var_230] +
push eax  +
push [ebp+var_230]  +
call sub_1003183  +
add esi eax +
inc [ebp+var_238]  +
mov eax [ebp+var_238] +
cmp eax [ebp+var_248] +
jl loc_100357B  +
lea eax [ebp+var_274] +
push eax  +
push [ebp+var_24C]  +
push [ebp+arg_4]  +
push [ebp+var_234]  +
call sub_100344B  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1005F1E  +
leave   +
retn 14h  +
push offset aInterrFormatSp  +
push [ebp+arg_4]  +
push [ebp+var_234]  +
call sub_1002800  +
xor eax eax +
jmp loc_1003793  +
push offset aInterrFormat_0  +
jmp loc_10037A9  +
push offset aInterrFormat_1  +
jmp loc_10037A9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003508  +
pop ebp  +
retn   +
***
call ds:GetVersion  +
test eax eax +
jns loc_10037FC  +
xor eax eax +
retn   +
movzx eax al +
retn   +
***
call sub_10037EF  +
cmp eax 6 +
jb locret_1003838  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz locret_1003838  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz locret_1003838  +
push 0  +
push 0  +
push 1  +
push 0  +
call eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push edi  +
lea eax [ebp+var_2C] +
push eax  +
push [ebp+arg_4]  +
xor edi edi +
mov [ebp+var_4] edi +
mov [ebp+var_8] edi +
call ds:_stat  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_100386B  +
xor eax eax +
inc eax  +
jmp loc_100392F  +
push ebx  +
mov ebx [ebp+arg_0] +
cmp [ebx+0Ch] edi +
jnz loc_1003915  +
push esi  +
push [ebp+arg_4]  +
lea esi [ebx+150h] +
push offset aS  +
push offset aOverwrite1YesN  +
push 200h  +
push esi  +
call sub_10037CE  +
add esp 14h +
push 4  +
push esi  +
push esi  +
push edi  +
call ds:MessageBoxA  +
sub eax 6 +
neg eax  +
sbb al al +
and al 0F5h +
add al 59h +
movsx edi al +
push edi  +
call ds:toupper  +
mov esi ds:printf +
pop ecx  +
cmp eax 41h +
jz loc_10038E3  +
cmp eax 4Eh +
jz loc_10038DD  +
cmp eax 59h +
jnz loc_10038F6  +
mov [ebp+var_4] 1 +
and [ebp+var_8] 0 +
jmp loc_10038EC  +
and [ebp+var_4] 0 +
jmp loc_10038D7  +
xor eax eax +
inc eax  +
mov [ebp+var_4] eax +
mov [ebp+var_8] eax +
push edi  +
push offset aC  +
call esi  +
pop ecx  +
pop ecx  +
push offset asc_10014B8  +
call esi  +
cmp [ebp+var_4] 0 +
pop ecx  +
pop esi  +
jnz loc_100390F  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
xor eax eax +
jmp loc_100392E  +
mov eax [ebp+var_8] +
mov [ebx+0Ch] eax +
test byte ptr [ebp+var_2C.st_mode] 80h +
jnz loc_100392B  +
push 180h  +
push [ebp+arg_4]  +
call ds:_chmod  +
pop ecx  +
pop ecx  +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+4] +
cmp dword ptr [ecx+854h] 0 +
jnz loc_1003952  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
mov edx [eax] +
push esi  +
mov esi edx +
sub esi 0 +
jz loc_10039F9  +
dec esi  +
jz loc_10039C0  +
dec esi  +
jz loc_100397C  +
push edx  +
push offset aUnknownDecrypt  +
call ds:printf  +
pop ecx  +
pop ecx  +
or eax 0FFFFFFFFh +
jmp loc_1003A36  +
lea esi [ecx+150h] +
movzx ecx word ptr [eax+1Ch] +
push ecx  +
push dword ptr [eax+18h]  +
movzx ecx word ptr [eax+14h] +
push ecx  +
push dword ptr [eax+10h]  +
movzx ecx word ptr [eax+0Ch] +
push ecx  +
push dword ptr [eax+8]  +
push offset a08lxU08lxUDU  +
push offset aCryptDataR12B3  +
push 200h  +
push esi  +
call sub_10037CE  +
push esi  +
push offset aS_2  +
call ds:printf  +
add esp 30h +
jmp loc_1003A33  +
lea esi [ecx+150h] +
movzx ecx word ptr [eax+0Eh] +
push ecx  +
movzx ecx word ptr [eax+0Ch] +
push ecx  +
push dword ptr [eax+8]  +
push offset a08lxUD  +
push offset aCryptFolderR12  +
push 200h  +
push esi  +
call sub_10037CE  +
push esi  +
push offset aS_2  +
call ds:printf  +
add esp 24h +
jmp loc_1003A33  +
push dword ptr [eax+10h]  +
lea esi [ecx+150h] +
movzx ecx word ptr [eax+0Eh] +
push ecx  +
movzx ecx word ptr [eax+0Ch] +
push ecx  +
push dword ptr [eax+8]  +
push offset a08lxUXD  +
push offset aCryptHeaderR12  +
push 200h  +
push esi  +
call sub_10037CE  +
push esi  +
push offset aS_2  +
call ds:printf  +
add esp 28h +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1003939  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+lpCurrentChar]  +
call sub_10026F1  +
mov [ebp+var_4] eax +
test eax eax +
jz locret_1003ACE  +
push ebx  +
push esi  +
push edi  +
mov edi ds:strchr +
push 2Eh  +
push eax  +
call edi  +
pop ecx  +
mov esi eax +
mov eax [ebp+arg_0] +
neg esi  +
pop ecx  +
push dword ptr [eax+4]  +
sbb esi esi +
inc esi  +
call sub_10025BD  +
push eax  +
jmp loc_1003ABD  +
push [ebp+arg_8]  +
call sub_10025BD  +
mov ebx eax +
push 5Ch  +
push ebx  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1003AA5  +
mov eax [ebp+var_4] +
jmp loc_1003AAE  +
cmp byte ptr [ebx] 5Ch +
mov eax [ebp+lpCurrentChar] +
jnz loc_1003AAE  +
inc ebx  +
push esi  +
push ebx  +
push eax  +
call sub_10030AC  +
test eax eax +
jnz loc_1003AD2  +
push [ebp+arg_8]  +
call sub_10025D0  +
mov [ebp+arg_8] eax +
test eax eax +
jnz loc_1003A8B  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
xor eax eax +
inc eax  +
jmp loc_1003ACB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
inc esi  +
cmp [ebp+arg_0] esi +
jnb loc_1003AED  +
mov [ebp+arg_0] esi +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
test eax eax +
jnz loc_1003B04  +
mov ecx dword_100E900 +
mov [ecx+48h] esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:free  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+4] 0 +
jnz loc_1003B3B  +
push [ebp+arg_8]  +
call sub_100257D  +
mov [esi+4] eax +
test eax eax +
jz loc_1003B4B  +
push [ebp+arg_8]  +
push 0  +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call sub_10024CC  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1003BA5  +
cmp dword ptr [esi+10h] 0 +
push edi  +
mov edi ds:printf +
jz loc_1003B7B  +
push offset asc_10014B8  +
call edi  +
and dword ptr [esi+10h] 0 +
pop ecx  +
push [ebp+arg_4]  +
add esi 150h +
push offset aS  +
push offset aError1  +
push 200h  +
push esi  +
call sub_10037CE  +
push esi  +
push offset aS_2  +
call edi  +
add esp 1Ch +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_C] +
mov ecx eax +
mov edx eax +
shr eax 0Bh +
push esi  +
and ecx 1Fh +
shr edx 5 +
mov esi eax +
add ecx ecx +
and edx 3Fh +
cmp esi 0Ch +
push edi  +
jl loc_1003BDD  +
mov edi offset aP +
sub esi 0Ch +
jmp loc_1003BE2  +
mov edi offset aA +
test esi esi +
jnz loc_1003BE9  +
push 0Ch  +
pop esi  +
movzx eax [ebp+arg_8] +
push edi  +
push ecx  +
push edx  +
mov ecx eax +
push esi  +
shr ecx 9 +
add ecx 7BCh +
push ecx  +
mov ecx eax +
and ecx 1Fh +
push ecx  +
shr eax 5 +
and eax 0Fh +
push eax  +
push offset a02d02d02d2d02d  +
push offset a1234567  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10037CE  +
add esp 2Ch +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_C] +
mov eax [ecx] +
cmp eax 0Bh +
ja loc_1003D66  +
jmp ds:off_1003D85[eax*4]  +
push [ebp+arg_8]  +
push offset aS  +
push offset aCouldNotFindCa  +
push [ebp+arg_0]  +
call sub_1002475  +
add esp 10h +
jmp loc_1003D7F  +
push [ebp+arg_8]  +
push offset aS  +
push offset a1IsNotACabinet  +
jmp loc_1003C54  +
push dword ptr [ecx+4]  +
push [ebp+arg_8]  +
push offset aS04x  +
push offset aCabinetFile1Ha  +
jmp loc_1003D74  +
push [ebp+arg_8]  +
push offset aS  +
push offset aCabinetFile1Is  +
jmp loc_1003C54  +
push [ebp+arg_8]  +
push offset aS  +
push offset aOutOfMemoryWhi  +
jmp loc_1003C54  +
push [ebp+arg_8]  +
push offset aS  +
push offset aUnknownCompres  +
jmp loc_1003C54  +
mov ecx [ebp+arg_4] +
mov eax [ecx+48h] +
sub eax 0 +
jz loc_1003D06  +
dec eax  +
jz loc_1003C97  +
dec eax  +
jz loc_1003CF2  +
dec eax  +
jnz loc_1003D7F  +
push dword ptr [ecx+4Ch]  +
push offset byte_100E800  +
push [ebp+arg_8]  +
push offset aSSLd  +
push offset aNotEnoughSpace  +
push [ebp+arg_0]  +
call sub_1002475  +
add esp 18h +
jmp loc_1003D7F  +
push offset byte_100E800  +
push [ebp+arg_8]  +
push offset aSS  +
push offset aCouldNotCrea_0  +
jmp loc_1003D74  +
push [ebp+arg_8]  +
push offset aS  +
push offset aFailureDecompr  +
jmp loc_1003C54  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax 550h +
push eax  +
push offset aSS  +
push offset aErrorCreatingD  +
jmp loc_1003D74  +
push [ebp+arg_8]  +
push offset aS  +
push offset aReserveSizeMis  +
jmp loc_1003C54  +
push [ebp+arg_8]  +
push offset aS  +
push offset aWrongContinuat  +
jmp loc_1003C54  +
push [ebp+arg_8]  +
push offset aS  +
push offset aUserAbortedWhi  +
jmp loc_1003C54  +
push [ebp+arg_8]  +
push eax  +
push offset aDS  +
push offset aUnknownError1P  +
push [ebp+arg_0]  +
call sub_1002475  +
add esp 14h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
call ds:_close  +
or edi 0FFFFFFFFh +
pop ecx  +
mov [ebp+arg_0] eax +
cmp esi dword_100E7FC +
jnz loc_1003DEC  +
push offset byte_100E800  +
call ds:_unlink  +
pop ecx  +
mov dword_100E7FC edi +
mov eax dword_100E900 +
cmp dword ptr [eax+14h] 0 +
jz loc_1003E12  +
xor edx edx +
lea ecx [eax+20h] +
cmp [ecx] esi +
jz loc_1003E09  +
inc edx  +
add ecx 4 +
cmp edx 2 +
jl loc_1003DFC  +
cmp edx 2 +
jge loc_1003E12  +
mov [eax+edx*4+20h] edi +
cmp esi dword_100D000 +
jnz loc_1003E50  +
mov eax dword_100D004 +
mov ecx dword_100D344 +
mov dword_100D000 eax +
mov dword_100D34C ecx +
mov dword_100D004 edi +
cmp eax edi +
jnz loc_1003E5E  +
and dword_100D358 0 +
and dword_100D350 0 +
mov dword_100D348 edi +
jmp loc_1003E5E  +
cmp esi dword_100D004 +
jnz loc_1003E5E  +
mov dword_100D004 edi +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_100E900 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edx edx +
xor esi esi +
xor edi edi +
cmp [eax+14h] edx +
jz loc_1003EA9  +
lea ecx [eax+20h] +
cmp [ecx] ebx +
jz loc_1003E95  +
inc edx  +
add ecx 4 +
cmp edx 2 +
jl loc_1003E88  +
cmp edx 2 +
jge loc_1003EA9  +
cmp [ebp+arg_8] 0 +
mov esi [eax+18h] +
mov edi [eax+1Ch] +
jnz loc_1003EA9  +
add [ebp+arg_4] esi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ebx  +
call ds:_lseek  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_1003ECA  +
sub eax esi +
test edi edi +
jz loc_1003ECA  +
cmp eax edi +
jle loc_1003ECA  +
mov eax edi +
cmp ebx dword_100D000 +
jnz loc_1003ED9  +
mov dword_100D34C eax +
jmp loc_1003EE6  +
cmp ebx dword_100D004 +
jnz loc_1003EE6  +
mov dword_100D344 eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push 1  +
push 0  +
push dword ptr [ebp+8]  +
call ds:_lseek  +
push eax  +
push dword ptr [ebp+8]  +
call ds:_chsize  +
add esp 14h +
pop ebp  +
retn   +
***
call ds:getenv  +
pop ecx  +
test eax eax +
jz loc_1003F60  +
mov cl [eax] +
test cl cl +
jz loc_1003F60  +
cmp byte ptr [eax+1] 3Ah +
jnz loc_1003F60  +
movsx eax cl +
push eax  +
call ds:tolower  +
pop ecx  +
mov cl al +
sub cl 61h +
cmp cl 19h +
ja loc_1003F60  +
mov byte_100D008 al +
mov eax offset byte_100D008 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_100D358 +
sub esp 1Ch +
push edi  +
xor edi edi +
cmp ecx edi +
jbe loc_1003FE4  +
push esi  +
mov esi hDlg +
cmp esi edi +
jz loc_1003FE3  +
xor edx edx +
div  dword_100D354 +
cmp eax ecx +
jbe loc_1003F99  +
mov eax ecx +
imul eax eax +
xor edx edx +
div  ecx +
push ebx  +
mov ebx eax +
cmp ebx dword_100D348 +
jz loc_1003FE2  +
push edi  +
push ebx  +
push 402h  +
push 66h  +
push esi  +
call ds:SendDlgItemMessageA  +
mov esi ds:PeekMessageA +
jmp loc_1003FCD  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageA  +
push 1  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jnz loc_1003FC3  +
mov dword_100D348 ebx +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 110h +
jz loc_1003FFE  +
xor eax eax +
jmp loc_1004031  +
push 630000h  +
push 0  +
push 401h  +
push 66h  +
push [ebp+hWnd]  +
call ds:SendDlgItemMessageA  +
push 3  +
push 0F060h  +
push 0  +
push [ebp+hWnd]  +
call ds:GetSystemMenu  +
push eax  +
call ds:EnableMenuItem  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 130h +
mov eax dword_100D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi+4]  +
mov edi [ebp+arg_4] +
call sub_10025BD  +
mov ebx eax +
push ebx  +
call sub_10025BD  +
push ebx  +
mov [ebp+lpCurrentChar] eax +
call sub_10025D0  +
push eax  +
call sub_10025BD  +
mov ebx eax +
lea eax [ebp+var_130] +
push eax  +
push ebx  +
call ds:_stat  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_10040D1  +
test dword ptr [ebp+var_130.st_mode] 4000h +
jz loc_10040D1  +
push edi  +
push [ebp+lpCurrentChar]  +
call sub_10026F1  +
test eax eax +
jnz loc_10040B1  +
xor eax eax +
jmp loc_1004130  +
push edi  +
push 0  +
push eax  +
push ebx  +
push 100h  +
lea eax [ebp+var_104] +
push eax  +
call sub_100293F  +
test eax eax +
jz loc_10040AD  +
lea ebx [ebp+var_104] +
lea eax [ebp+var_10C] +
push eax  +
push edi  +
push ebx  +
push esi  +
call sub_100383E  +
test eax eax +
jnz loc_10040E7  +
inc eax  +
jmp loc_1004130  +
push ebx  +
push [ebp+lpCurrentChar]  +
add esi 150h +
push offset aSS  +
push offset aExtracting12  +
push 200h  +
push esi  +
call sub_10037CE  +
push esi  +
push offset aS_2  +
call ds:printf  +
add esp 20h +
push edi  +
push 0  +
push 0  +
push 8000h  +
push 1  +
push [ebp+lpCurrentChar]  +
push ebx  +
call sub_1002EAE  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1005F1E  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
lea eax [ebx+0B60h] +
mov esi eax +
lea edi [ebx+85Ch] +
mov ecx 0C1h +
movs   +
mov esi [ebp+arg_4] +
push dword ptr [esi+0Ch]  +
mov edi 100h +
push edi  +
push eax  +
call sub_1002800  +
push dword ptr [esi+4]  +
lea eax [ebx+0C60h] +
push edi  +
push eax  +
call sub_1002800  +
push dword ptr [esi+8]  +
lea eax [ebx+0D60h] +
push edi  +
push eax  +
call sub_1002800  +
mov ax [esi+1Eh] +
mov [ebx+0E60h] ax +
mov ax [esi+20h] +
pop edi  +
mov [ebx+0E62h] ax +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push offset asc_1001898  +
push [ebp+arg_4]  +
push esi  +
call sub_1002800  +
test eax eax +
jl loc_10041F9  +
mov al [ebp+arg_8] +
test al 20h +
jz loc_10041E1  +
mov byte ptr [esi] 41h +
test al 2 +
jz loc_10041E9  +
mov byte ptr [esi+1] 48h +
test al 1 +
jz loc_10041F1  +
mov byte ptr [esi+2] 52h +
test al 4 +
jz loc_10041F9  +
mov byte ptr [esi+3] 53h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
cmp byte ptr [edi] 2Ah +
jnz loc_100426F  +
mov byte_100E800 bl +
push offset aEsf  +
mov ebx edi +
call sub_1003F23  +
push eax  +
call ds:_tempnam  +
pop ecx  +
pop ecx  +
mov [ebp+arg_0] eax +
test eax eax +
jnz loc_100424B  +
mov eax dword_100E900 +
mov dword ptr [eax+48h] 2 +
or eax 0FFFFFFFFh +
jmp loc_100441B  +
push eax  +
push 100h  +
mov esi offset byte_100E800 +
push esi  +
call sub_1002800  +
push [ebp+arg_0]  +
call ds:free  +
pop ecx  +
mov [ebp+arg_4] 8102h +
jmp loc_1004271  +
mov esi edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call ds:_open  +
add esp 0Ch +
cmp byte ptr [edi] 2Ah +
mov esi eax +
jnz loc_1004302  +
or edi 0FFFFFFFFh +
cmp esi edi +
jnz loc_10042A2  +
mov eax dword_100E900 +
mov dword ptr [eax+48h] 2 +
mov eax edi +
jmp loc_100441B  +
mov dword_100E7FC esi +
mov eax [ebx+2] +
test eax eax +
jle loc_10042F7  +
push 0  +
dec eax  +
push eax  +
push esi  +
call sub_1003E6A  +
add esp 0Ch +
cmp eax edi +
jnz loc_10042E1  +
mov eax dword_100E900 +
mov dword ptr [eax+48h] 3 +
mov eax [ebx+2] +
mov ecx dword_100E900 +
push esi  +
mov [ecx+4Ch] eax +
call sub_1003DBA  +
pop ecx  +
jmp loc_100429B  +
push 1  +
push offset aB  +
push esi  +
call ds:_write  +
add esp 0Ch +
cmp eax 1 +
jnz loc_10042C0  +
mov eax dword_100E900 +
and dword ptr [eax+48h] 0 +
jmp loc_1004358  +
mov eax dword_100E900 +
cmp dword ptr [eax+14h] 0 +
jz loc_1004358  +
add eax 50h +
push eax  +
push edi  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1004358  +
mov eax dword_100E900 +
xor ecx ecx +
lea edx [eax+20h] +
cmp dword ptr [edx] 0FFFFFFFFh +
jz loc_1004336  +
inc ecx  +
add edx 4 +
cmp ecx 2 +
jl loc_1004328  +
cmp ecx 2 +
jl loc_1004347  +
push esi  +
call sub_1003DBA  +
pop ecx  +
jmp loc_1004243  +
push 0  +
push 0  +
push esi  +
mov [eax+ecx*4+20h] esi +
call sub_1003E6A  +
add esp 0Ch +
cmp [ebp+arg_4] 8000h +
jnz loc_1004419  +
cmp esi 0FFFFFFFFh +
jz loc_1004419  +
cmp dword_100D000 0FFFFFFFFh +
jnz loc_1004403  +
mov eax dword_100E900 +
xor edi edi +
mov dword_100D000 esi +
cmp [eax+14h] edi +
jz loc_1004392  +
mov eax [eax+1Ch] +
jmp loc_100439A  +
push esi  +
call ds:_filelength  +
pop ecx  +
xor ecx ecx +
mov dword_100D350 edi +
mov dword_100D34C edi +
inc ecx  +
mov edi 989680h +
mov dword_100D358 eax +
mov dword_100D354 ecx +
cmp eax edi +
jbe loc_10043D6  +
push 0Ah  +
imul ecx ecx +
xor edx edx +
pop ebx  +
div  ebx +
cmp eax edi +
ja loc_10043BD  +
mov dword_100D354 ecx +
mov dword_100D358 eax +
or dword_100D348 0FFFFFFFFh +
xor eax eax +
cmp hDlg eax +
jnz loc_1004419  +
push eax  +
push offset DialogFunc  +
push eax  +
push 65h  +
push hInstance  +
call ds:CreateDialogParamA  +
mov hDlg eax +
jmp loc_1004419  +
cmp dword_100D004 0FFFFFFFFh +
jnz loc_1004419  +
and dword_100D344 0 +
mov dword_100D004 esi +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call ds:_read  +
add esp 0Ch +
mov edi eax +
cmp esi dword_100D000 +
jnz loc_1004457  +
mov eax dword_100D34C +
add eax edi +
mov dword_100D34C eax +
jmp loc_100446B  +
cmp esi dword_100D004 +
jnz loc_100447D  +
mov eax dword_100D344 +
add eax edi +
mov dword_100D344 eax +
cmp eax dword_100D350 +
jbe loc_100447D  +
mov dword_100D350 eax +
call sub_1003F6B  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 138h +
mov eax dword_100D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
and [ebp+var_110] 0 +
mov [ebp+var_11C] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov [ebp+var_114] eax +
mov eax [ebp+arg_10] +
push esi  +
mov [ebp+var_118] eax +
mov eax [ebp+arg_24] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_108] eax +
mov ebx 200h +
push [ebp+var_108]  +
inc [ebp+var_110]  +
call sub_10024A5  +
push [ebp+var_108]  +
xor esi esi +
push esi  +
push [ebp+var_114]  +
lea eax [ebp+var_104] +
push [ebp+var_11C]  +
push 100h  +
push eax  +
call sub_100293F  +
test eax eax +
jz loc_1004748  +
cmp [ebp+arg_20] esi +
jnz loc_10045A3  +
push esi  +
lea eax [ebp+var_104] +
push 8000h  +
push eax  +
call sub_1004203  +
mov esi eax +
add esp 0Ch +
cmp esi 0FFFFFFFFh +
jnz loc_10045F1  +
lea eax [ebp+var_104] +
push eax  +
push offset aS  +
push offset aCannotOpenFile  +
push [ebp+var_108]  +
call sub_1002475  +
add esp 10h +
xor eax eax +
mov ecx [ebp+var_108] +
cmp dword ptr [ecx+200h] 0 +
jz loc_100475B  +
cmp [ebp+var_110] 1 +
jg loc_100457C  +
test eax eax +
jz loc_10045A3  +
push ecx  +
push offset aS  +
push offset aError1  +
lea esi [edi+150h] +
push ebx  +
push esi  +
call sub_10037CE  +
push esi  +
push offset aS_0  +
call ds:printf  +
add esp 1Ch +
lea eax [ebp-109h] +
push eax  +
lea eax [ebp+var_104] +
push eax  +
call sub_1002751  +
lea esi [edi+150h] +
test eax eax +
jz loc_1004673  +
movsx eax [ebp+var_109] +
push eax  +
push [ebp+var_118]  +
push [ebp+var_114]  +
push offset aSSC  +
push offset aExtractNeedsCa  +
push ebx  +
push esi  +
call sub_10037CE  +
add esp 1Ch +
jmp loc_1004693  +
lea eax [ebp+var_138] +
push eax  +
push esi  +
push dword ptr [edi+2Ch]  +
call sub_100682F  +
add esp 0Ch +
test eax eax +
jnz loc_100462B  +
mov eax [ebp+var_108] +
cmp dword ptr [eax+200h] 0 +
jnz loc_1004664  +
lea ecx [ebp+var_104] +
push ecx  +
push offset aS  +
push offset a1IsNotACabinet  +
push eax  +
jmp loc_100465C  +
mov ax [ebp+var_130] +
cmp ax [ebp+arg_14] +
jnz loc_1004645  +
mov ax [ebp+var_12E] +
cmp ax [ebp+arg_18] +
jz loc_1004664  +
lea eax [ebp+var_104] +
push eax  +
push offset aS  +
push offset aWrongContinuat  +
push [ebp+var_108]  +
call sub_1002475  +
add esp 10h +
push esi  +
call sub_1003DBA  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_100455C  +
push [ebp+var_118]  +
push [ebp+var_114]  +
push offset aSSC  +
push offset aExtractNeeds_0  +
push ebx  +
push esi  +
call sub_10037CE  +
add esp 18h +
push esi  +
push offset aS_2  +
call ds:printf  +
push ds:_iob  +
lea eax [ebp+var_104] +
push 0FFh  +
push eax  +
call ds:fgets  +
add esp 14h +
test eax eax +
jz loc_1004760  +
lea eax [ebp+var_104] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10046CB  +
sub eax edx +
test eax eax +
jle loc_10046E6  +
lea eax [ebp+eax+var_108+3] +
cmp byte ptr [eax] 0Ah +
jnz loc_10046E6  +
mov [eax] cl +
lea eax [ebp+var_104] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10046EF  +
sub eax edx +
jz loc_100473E  +
mov esi [ebp+var_11C] +
lea eax [ebp+var_104] +
push eax  +
push [ebp+arg_8]  +
push esi  +
call sub_1002800  +
mov eax esi +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1004715  +
sub eax ecx +
lea eax [esi+eax-1] +
push eax  +
call sub_10026BC  +
push esi  +
push 100h  +
lea eax [edi+750h] +
push eax  +
call sub_1002800  +
test eax eax +
jl loc_1004772  +
cmp [ebp+arg_1C] 0 +
jnz loc_10044D3  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1005F1E  +
leave   +
retn 28h  +
xor eax eax +
inc eax  +
jmp loc_100474A  +
push offset aCancelled  +
push [ebp+var_108]  +
call sub_1002475  +
pop ecx  +
pop ecx  +
or eax 0FFFFFFFFh +
jmp loc_100474A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_100D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [esi+10h] +
mov eax [edi+44h] +
push dword ptr [esi+4]  +
mov [ebp+var_108] eax +
mov ebx 100h +
push ebx  +
lea eax [edi+0F64h] +
push eax  +
call sub_1002800  +
xor eax eax +
inc eax  +
mov [edi+850h] eax +
mov [edi+858h] eax +
mov eax [esi+24h] +
test eax eax +
jnz loc_10047D9  +
and dword_100D360 eax +
jmp loc_100488F  +
inc dword_100D360  +
cmp eax 0Bh +
jz loc_1004826  +
push [ebp+var_108]  +
lea eax [ebp+var_104] +
push 0  +
push dword ptr [esi+8]  +
push dword ptr [esi+0Ch]  +
push ebx  +
push eax  +
call sub_100293F  +
test eax eax +
jnz loc_100480B  +
or eax 0FFFFFFFFh +
jmp loc_100488F  +
lea eax [edi+30h] +
push eax  +
lea eax [ebp+var_104] +
push eax  +
push edi  +
push [ebp+var_108]  +
call sub_1003C2D  +
and dword ptr [edi+30h] 0 +
cmp dword_100D360 1 +
jg loc_1004835  +
cmp dword ptr [esi+24h] 1 +
jz loc_100486B  +
push [ebp+var_108]  +
lea eax [edi+150h] +
push offset aS  +
push offset aError1  +
push 200h  +
push eax  +
call sub_10037CE  +
lea eax [edi+150h] +
push eax  +
push offset aS_0  +
call ds:printf  +
add esp 1Ch +
push [ebp+var_108]  +
movzx eax word ptr [esi+20h] +
push 1  +
push 0  +
push eax  +
movzx eax word ptr [esi+1Eh] +
push eax  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push ebx  +
push dword ptr [esi+0Ch]  +
push edi  +
call sub_1004488  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1005F1E  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2ACh +
mov eax dword_100D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push 100h  +
lea eax [ebp+Filename] +
push eax  +
xor esi esi +
push esi  +
call ds:GetModuleFileNameA  +
test eax eax +
jz loc_1004CAC  +
push edi  +
push esi  +
lea eax [ebp+Filename] +
push 8000h  +
push eax  +
call sub_1004203  +
mov edi eax +
add esp 0Ch +
mov [ebp+var_170] edi +
cmp edi 0FFFFFFFFh +
jz loc_1004CAB  +
push 40h  +
lea eax [ebp+var_16C] +
push eax  +
push edi  +
call sub_1004425  +
add esp 0Ch +
cmp eax 40h +
jnz loc_1004C9F  +
push esi  +
push [ebp+var_130]  +
push edi  +
call sub_1003E6A  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_1004C9F  +
mov esi 0F8h +
push esi  +
lea eax [ebp+var_2AC] +
push eax  +
push edi  +
call sub_1004425  +
add esp 0Ch +
cmp eax esi +
jnz loc_1004C9F  +
movzx eax [ebp+var_298] +
mov ecx [ebp+var_130] +
xor esi esi +
push esi  +
lea eax [eax+ecx+18h] +
push eax  +
push edi  +
call sub_1003E6A  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_1004C9F  +
movzx eax [ebp+var_2A6] +
mov [ebp+var_184] eax +
mov eax [ebp+var_200] +
mov [ebp+var_178] eax +
mov eax [ebp+var_270] +
mov [ebp+var_174] esi +
mov [ebp+var_17C] esi +
mov [ebp+var_188] eax +
cmp [ebp+var_2A6] si +
jz loc_1004B31  +
add [ebp+var_184] 0FFFFh +
push 28h  +
lea eax [ebp+var_12C] +
push eax  +
push [ebp+var_170]  +
call sub_1004425  +
add esp 0Ch +
cmp eax 28h +
jnz loc_1004C9F  +
push 2  +
pop ecx  +
mov edi offset aExt_cab1 +
lea esi [ebp+var_12C] +
xor eax eax +
cmps   +
jnz loc_1004A40  +
push eax  +
push [ebp+var_118]  +
push [ebp+var_170]  +
call sub_1003E6A  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_1004C9F  +
push 10h  +
lea eax [ebp+var_198] +
push eax  +
push [ebp+var_170]  +
call sub_1004425  +
add esp 0Ch +
cmp eax 10h +
jnz loc_1004C9F  +
cmp [ebp+var_198] 4E584653h +
jz loc_1004AA1  +
mov esi [ebp+var_118] +
mov ecx [ebp+var_11C] +
test esi esi +
jz loc_1004A65  +
test ecx ecx +
jz loc_1004A65  +
lea eax [ecx+esi] +
cmp [ebp+var_174] eax +
jge loc_1004A65  +
mov [ebp+var_174] eax +
cmp [ebp+var_178] 0 +
jz loc_1004A8E  +
mov edx [ebp+var_120] +
mov eax [ebp+var_204] +
cmp edx eax +
ja loc_1004A8E  +
add ecx edx +
cmp ecx eax +
jbe loc_1004A8E  +
sub eax edx +
add eax esi +
mov [ebp+var_17C] eax +
cmp word ptr [ebp+var_184] 0 +
jnz loc_10049B8  +
jmp loc_1004B31  +
mov eax [ebp+var_190] +
mov ecx [ebp+var_118] +
lea ecx [eax+ecx+10h] +
xor esi esi +
inc esi  +
mov [ebx+18h] ecx +
mov ecx [ebp+var_18C] +
mov [ebx+14h] esi +
mov [ebx+1Ch] ecx +
test eax eax +
jz loc_1004B31  +
push eax  +
call ds:malloc  +
pop ecx  +
mov [ebx+1068h] eax +
test eax eax +
jz loc_1004B31  +
push [ebp+var_190]  +
push eax  +
push [ebp+var_170]  +
call sub_1004425  +
add esp 0Ch +
cmp eax [ebp+var_190] +
jnz loc_1004B31  +
mov eax [ebx+1068h] +
mov [ebx+1064h] esi +
cmp dword ptr [eax+4] 0 +
jz loc_1004B31  +
mov eax [ebx+1068h] +
mov ecx [ebx+1064h] +
lea ecx [eax+ecx*4] +
add [ecx] eax +
inc dword ptr [ebx+1064h]  +
mov eax [ebx+1064h] +
mov ecx [ebx+1068h] +
cmp dword ptr [ecx+eax*4] 0 +
jnz loc_1004B08  +
xor eax eax +
cmp [ebx+14h] eax +
jnz loc_1004BB3  +
cmp [ebp+var_17C] eax +
jz loc_1004BB3  +
push eax  +
push [ebp+var_17C]  +
push [ebp+var_170]  +
call sub_1003E6A  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_1004C9F  +
push 1Ch  +
pop esi  +
jmp loc_1004BAB  +
push esi  +
lea eax [ebp+var_1B4] +
push eax  +
push [ebp+var_170]  +
call sub_1004425  +
add esp 0Ch +
cmp eax esi +
jnz loc_1004C9F  +
mov ecx [ebp+var_19C] +
test ecx ecx +
jz loc_1004BA5  +
mov eax [ebp+var_1A4] +
test eax eax +
jz loc_1004BA5  +
add eax ecx +
cmp [ebp+var_174] eax +
jge loc_1004BA5  +
mov [ebp+var_174] eax +
sub [ebp+var_178] esi +
cmp [ebp+var_178] esi +
jnb loc_1004B63  +
cmp dword ptr [ebx+14h] 0 +
jnz loc_1004C8A  +
push 2  +
push 0  +
push [ebp+var_170]  +
call sub_1003E6A  +
mov edi [ebp+var_174] +
mov esi eax +
add esp 0Ch +
cmp esi edi +
jle loc_1004C84  +
push 0  +
push edi  +
push [ebp+var_170]  +
call sub_1003E6A  +
add esp 0Ch +
cmp edi eax +
jnz loc_1004C1C  +
push 4  +
lea eax [ebp+var_180] +
push eax  +
push [ebp+var_170]  +
call sub_1004425  +
add esp 0Ch +
cmp eax 4 +
jnz loc_1004C1C  +
cmp [ebp+var_180] 4643534Dh +
jz loc_1004C75  +
mov ecx [ebp+var_188] +
xor edx edx +
mov eax edi +
div  ecx +
test edx edx +
jz loc_1004C84  +
lea edi [edi+ecx-1] +
mov eax edi +
xor edx edx +
div  ecx +
push 0  +
sub edi edx +
push edi  +
push [ebp+var_170]  +
call sub_1003E6A  +
add esp 0Ch +
cmp edi eax +
jnz loc_1004C84  +
push 4  +
lea eax [ebp+var_180] +
push eax  +
push [ebp+var_170]  +
call sub_1004425  +
add esp 0Ch +
cmp eax 4 +
jnz loc_1004C84  +
cmp [ebp+var_180] 4643534Dh +
jnz loc_1004C84  +
sub esi edi +
mov [ebx+1Ch] esi +
mov [ebx+18h] edi +
mov dword ptr [ebx+14h] 1 +
cmp dword ptr [ebx+14h] 0 +
jz loc_1004C9F  +
lea eax [ebp+Filename] +
push eax  +
push 100h  +
add ebx 50h +
push ebx  +
call sub_1002800  +
push [ebp+var_170]  +
call sub_1003DBA  +
pop ecx  +
pop edi  +
mov ecx [ebp+var_4] +
xor eax eax +
pop esi  +
xor ecx ebp +
inc eax  +
pop ebx  +
call sub_1005F1E  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100D00C +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
sub eax 0 +
push ebx  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi [esi+10h] +
mov ebx [edi+44h] +
jz loc_1004E05  +
dec eax  +
jz loc_1004DB5  +
dec eax  +
jz loc_1004D27  +
dec eax  +
dec eax  +
jz loc_1004D18  +
dec eax  +
jz loc_1004DB1  +
push dword ptr [ebp+8]  +
push offset aUnknownNotific  +
call ds:printf  +
pop ecx  +
pop ecx  +
jmp loc_1004DB1  +
push esi  +
push 4  +
call sub_100477C  +
pop ecx  +
pop ecx  +
jmp loc_1004E0C  +
push ebx  +
push dword ptr [esi+4]  +
push edi  +
call sub_1003A4E  +
test eax eax +
jnz loc_1004D44  +
mov eax [ebx+200h] +
neg eax  +
sbb eax eax +
jmp loc_1004E0C  +
movzx eax word ptr [esi+1Ah] +
push eax  +
movzx eax word ptr [esi+18h] +
push eax  +
push 200h  +
lea ebx [edi+150h] +
push ebx  +
call sub_1003BAF  +
movzx eax word ptr [esi+1Ch] +
push eax  +
push 0Ah  +
lea eax [ebp-10h] +
push eax  +
call sub_10041BC  +
push dword ptr [esi+4]  +
lea ecx [ebp-10h] +
push dword ptr [esi]  +
lea eax [edi+350h] +
push ecx  +
push ebx  +
push offset aSS13ldS  +
push offset a1234  +
push 100h  +
push eax  +
call sub_10037CE  +
lea eax [edi+350h] +
push eax  +
push offset aS_2  +
call ds:printf  +
add esp 28h +
inc dword ptr [edi+3Ch]  +
mov eax [esi] +
add [edi+40h] eax +
xor eax eax +
jmp loc_1004E0C  +
push ebx  +
push dword ptr [esi+4]  +
push edi  +
call sub_1003A4E  +
test eax eax +
jz loc_1004D35  +
cmp dword ptr [edi+850h] 0 +
jnz loc_1004DB1  +
push dword ptr [esi+0Ch]  +
add edi 150h +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push offset aSSS  +
push offset a1StartsInCabin  +
push 200h  +
push edi  +
call sub_10037CE  +
push edi  +
push offset aS_2  +
call ds:printf  +
add esp 24h +
jmp loc_1004DB1  +
***
push esi  +
push edi  +
call sub_1004146  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1005F1E  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
mov esi [edi+10h] +
mov ebx [esi+44h] +
xor ecx ecx +
sub eax ecx +
mov [ebp+0Ch] ebx +
mov [esi+48h] ecx +
jz loc_1005101  +
dec eax  +
jz loc_10050AA  +
dec eax  +
jz loc_1004F33  +
dec eax  +
jz loc_1004E85  +
dec eax  +
jz loc_1004E76  +
dec eax  +
jz loc_1004F48  +
push dword ptr [ebp+8]  +
push offset aUnknownNotific  +
call ds:printf  +
pop ecx  +
pop ecx  +
jmp loc_1004F48  +
push edi  +
push 4  +
call sub_100477C  +
pop ecx  +
pop ecx  +
jmp loc_1005108  +
push dword ptr [edi+14h]  +
call sub_1003DBA  +
lea eax [esi+650h] +
cmp byte ptr [eax] 0 +
pop ecx  +
jnz loc_1004E9C  +
mov eax [edi+4] +
lea ebx [esi+0E64h] +
cmp byte ptr [ebx] 0 +
mov [ebp+8] eax +
jz loc_1004EDB  +
mov eax ebx +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1004EAF  +
sub eax edx +
push eax  +
push ebx  +
push dword ptr [ebp+8]  +
call ds:strncmp  +
add esp 0Ch +
test eax eax +
jnz loc_1004EDB  +
mov eax ebx +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1004ECF  +
sub eax edx +
add [ebp+8] eax +
push dword ptr [ebp+0Ch]  +
lea ebx [esi+550h] +
push 0  +
push dword ptr [ebp+8]  +
add esi 450h +
push esi  +
push 100h  +
push ebx  +
call sub_100293F  +
test eax eax +
jz loc_1004F48  +
mov ax [edi+18h] +
push dword ptr [ebp+0Ch]  +
mov [ebp-8] ax +
mov ax [edi+1Ah] +
mov [ebp-6] ax +
mov ax [edi+1Ch] +
and ax 27h +
mov [ebp-4] ax +
lea eax [ebp-8] +
push eax  +
push ebx  +
call sub_1002DE1  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_1005108  +
cmp [esi+106Ch] ecx +
jz loc_1004F4F  +
mov ax [edi+22h] +
cmp ax [esi+1070h] +
jz loc_1004F4F  +
xor eax eax +
jmp loc_1005108  +
push ebx  +
push dword ptr [edi+4]  +
push esi  +
call sub_1003A4E  +
test eax eax +
jnz loc_1004F6C  +
mov eax [ebx+200h] +
neg eax  +
sbb eax eax +
jmp loc_1005108  +
lea eax [esi+650h] +
cmp byte ptr [eax] 0 +
jnz loc_1004F7A  +
mov eax [edi+4] +
lea ebx [esi+0E64h] +
cmp byte ptr [ebx] 0 +
mov [ebp+8] eax +
jz loc_1004FB9  +
mov eax ebx +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1004F8D  +
sub eax edx +
push eax  +
push ebx  +
push dword ptr [ebp+8]  +
call ds:strncmp  +
add esp 0Ch +
test eax eax +
jnz loc_1004FB9  +
mov eax ebx +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1004FAD  +
sub eax edx +
add [ebp+8] eax +
push dword ptr [ebp+0Ch]  +
lea eax [esi+450h] +
push 0  +
push dword ptr [ebp+8]  +
lea ebx [esi+550h] +
push eax  +
push 100h  +
push ebx  +
call sub_100293F  +
test eax eax +
jnz loc_1004FE5  +
or eax 0FFFFFFFFh +
jmp loc_1005108  +
push dword ptr [ebp+0Ch]  +
push 1  +
push ebx  +
call sub_10029D9  +
test eax eax +
jz loc_1004FDD  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
push ebx  +
push esi  +
call sub_100383E  +
test eax eax +
jnz loc_100500E  +
mov eax [ebp+0Ch] +
jmp loc_1005108  +
push 180h  +
push 8302h  +
push ebx  +
call sub_1004203  +
add esp 0Ch +
mov [ebp+0Ch] eax +
push ebx  +
cmp eax 0FFFFFFFFh +
jnz loc_1005041  +
push offset aS  +
push offset aCannotCreateFi  +
push dword ptr [esi+44h]  +
call sub_1002475  +
add esp 10h +
jmp loc_1004FDD  +
***
mov ecx [edi+4] +
lea eax [esi+150h] +
cmp [ebp+8] ecx +
jnz loc_1005069  +
push offset aS  +
push offset aExtracting1  +
push 200h  +
push eax  +
call sub_10037CE  +
add esp 14h +
jmp loc_1005082  +
push ecx  +
push offset aSS  +
push offset aExtracting12  +
push 200h  +
push eax  +
call sub_10037CE  +
add esp 18h +
lea eax [esi+150h] +
push eax  +
push offset aS_2  +
call ds:printf  +
inc dword ptr [esi+3Ch]  +
mov dword ptr [esi+10h] 1 +
mov eax [edi] +
add [esi+40h] eax +
pop ecx  +
pop ecx  +
jmp loc_1005006  +
***
push ebx  +
push dword ptr [edi+4]  +
push esi  +
call sub_1003A4E  +
test eax eax +
jz loc_1004F5D  +
cmp dword ptr [esi+850h] 0 +
jnz loc_1004F48  +
push dword ptr [edi+0Ch]  +
add esi 150h +
push dword ptr [edi+8]  +
push dword ptr [edi+4]  +
push offset aSSS  +
push offset a1StartsInCabin  +
push 200h  +
push esi  +
call sub_10037CE  +
push esi  +
push offset aS_2  +
call ds:printf  +
add esp 24h +
jmp loc_1004F48  +
***
push edi  +
push esi  +
call sub_1004146  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 2  +
pop ebx  +
push [ebp+arg_C]  +
mov [esi] ebx +
push [ebp+arg_8]  +
mov byte ptr [esi+450h] 0 +
push [ebp+arg_4]  +
or eax 0FFFFFFFFh +
lea edi [esi+20h] +
stos   +
push esi  +
stos   +
call sub_10048A3  +
test eax eax +
jnz loc_1005155  +
xor eax eax +
jmp loc_10053DD  +
cmp dword ptr [esi+14h] 0 +
jz loc_10051A7  +
cmp [ebp+arg_4] ebx +
jge loc_1005177  +
mov eax [esi+1064h] +
cmp eax 1 +
jle loc_1005177  +
mov [ebp+arg_4] eax +
mov eax [esi+1068h] +
mov [ebp+arg_8] eax +
push [ebp+arg_C]  +
lea edi [esi+50h] +
push edi  +
push esi  +
call sub_1003B1D  +
test eax eax +
jnz loc_10051A0  +
push edi  +
push offset aS  +
push offset aCouldNotAddFil  +
push [ebp+arg_C]  +
call sub_1002475  +
add esp 10h +
jmp loc_100514E  +
mov [ebp+var_8] 1 +
xor edx edx +
xor ebx ebx +
inc edx  +
inc ebx  +
cmp [ebp+arg_4] edx +
jle loc_1005329  +
mov edi [ebp+arg_8] +
mov eax [edi+ebx*4] +
mov cl [eax] +
cmp cl 2Fh +
jz loc_1005205  +
cmp cl 2Dh +
jz loc_1005205  +
cmp [ebp+var_4] edx +
jnz loc_10051EB  +
push eax  +
push 100h  +
lea eax [esi+450h] +
push eax  +
call sub_1002800  +
mov [ebp+var_4] 2 +
jmp loc_100531C  +
push [ebp+arg_C]  +
push eax  +
push esi  +
call sub_1003B1D  +
test eax eax +
jz loc_1005351  +
inc [ebp+var_8]  +
jmp loc_100531C  +
cmp [ebp+var_4] edx +
jz loc_1005359  +
lea edi [eax+1] +
mov al [edi] +
test al al +
jz loc_100531F  +
lea ecx [ebx+1] +
mov [ebp+arg_0] ecx +
movsx eax al +
push eax  +
call ds:toupper  +
cmp eax 45h +
pop ecx  +
jg loc_10052A1  +
jz loc_1005290  +
sub eax 23h +
jz loc_1005285  +
sub eax 1Ch +
jz loc_1005380  +
push 2  +
pop ecx  +
sub eax ecx +
jz loc_1005279  +
sub eax ecx +
jz loc_1005266  +
dec eax  +
jnz loc_1005387  +
cmp [esi] ecx +
jnz loc_100536D  +
mov dword ptr [esi] 3 +
jmp loc_1005311  +
cmp [esi] ecx +
jnz loc_100536D  +
mov dword ptr [esi] 5 +
jmp loc_1005311  +
mov dword ptr [esi+8] 1 +
jmp loc_1005311  +
inc dword ptr [esi+106Ch]  +
jmp loc_1005311  +
cmp dword ptr [esi] 2 +
jnz loc_100536D  +
mov dword ptr [esi] 4 +
jmp loc_1005311  +
sub eax 4Ch +
jz loc_1005300  +
sub eax 6 +
jz loc_10052F4  +
sub eax 7 +
jz loc_10052EB  +
dec eax  +
jnz loc_1005387  +
inc edi  +
cmp [edi] al +
jnz loc_10052D2  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jge loc_1005359  +
mov eax [ebp+arg_8] +
inc ebx  +
inc [ebp+arg_0]  +
mov edi [eax+ebx*4] +
push edi  +
push 100h  +
lea eax [esi+0E64h] +
push eax  +
call sub_1002800  +
mov edi offset asc_100140C +
jmp loc_1005311  +
mov dword ptr [esi+0Ch] 1 +
jmp loc_1005311  +
mov dword ptr [esi+854h] 1 +
jmp loc_1005311  +
cmp [ebp+var_4] 2 +
jz loc_100539C  +
mov [ebp+var_4] 1 +
inc edi  +
mov al [edi] +
test al al +
jnz loc_1005221  +
xor edx edx +
inc edx  +
inc ebx  +
cmp ebx [ebp+arg_4] +
jl loc_10051B6  +
lea eax [esi+106Ch] +
cmp dword ptr [eax] 3 +
jge loc_1005337  +
and dword ptr [eax] 0 +
mov ecx [esi+14h] +
test ecx ecx +
jz loc_1005341  +
and dword ptr [eax] 0 +
cmp [ebp+arg_4] edx +
jnz loc_10053A3  +
test ecx ecx +
jnz loc_10053A3  +
mov [esi] edx +
jmp loc_10053DB  +
push dword ptr [edi+ebx*4]  +
jmp loc_1005189  +
push offset aLocationMissin  +
push [ebp+arg_C]  +
call sub_1002475  +
pop ecx  +
pop ecx  +
jmp loc_100514E  +
movsx eax byte ptr [edi] +
push eax  +
push offset aC_0  +
push offset aConflictingSwi  +
jmp loc_1005193  +
xor eax eax +
inc eax  +
mov [esi] eax +
jmp loc_10053DD  +
mov eax [ebp+arg_8] +
push dword ptr [eax+ebx*4]  +
push offset aS  +
push offset aInvalidSwitch1  +
jmp loc_1005193  +
push offset aLocationSpecif  +
jmp loc_100535E  +
cmp [ebp+var_4] edx +
jz loc_1005359  +
mov eax [esi] +
cmp eax 5 +
jnz loc_10053BC  +
cmp [ebp+var_8] 2 +
jz loc_10053BC  +
push offset aBadParameters  +
jmp loc_100535E  +
cmp [ebp+var_8] 0 +
jnz loc_10053C9  +
push offset aMustSupplyACab  +
jmp loc_100535E  +
test ecx ecx +
jz loc_10053DB  +
mov [esi+8] edx +
cmp eax 2 +
jnz loc_10053DB  +
mov dword ptr [esi] 4 +
mov eax edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 134h +
mov eax dword_100D00C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push dword ptr [esi+4]  +
mov [ebp+var_108] edi +
call sub_10025BD  +
mov ebx eax +
push ebx  +
call sub_10025BD  +
push ebx  +
mov [ebp+lpCurrentChar] eax +
call sub_10025D0  +
mov [ebp+var_118] eax +
test eax eax +
jz loc_1005441  +
push eax  +
call sub_10025BD  +
mov [ebp+var_110] eax +
jmp loc_1005448  +
and [ebp+var_110] 0 +
or dword_100E7FC 0FFFFFFFFh +
push 800h  +
call sub_1003ADC  +
pop ecx  +
mov [ebp+var_114] eax +
test eax eax +
jnz loc_1005484  +
push [ebp+lpCurrentChar]  +
push offset aS  +
push offset aOutOfMemoryWhi  +
push edi  +
call sub_1002475  +
add esp 10h +
xor eax eax +
jmp loc_1005615  +
lea ebx [esi+30h] +
push ebx  +
push 0FFFFFFFFh  +
push offset sub_1003E6A  +
push offset sub_1003DBA  +
push offset loc_1003EF0  +
push offset sub_1004425  +
push offset sub_1004203  +
push offset sub_1003B0C  +
push offset sub_1003ADC  +
call sub_1006789  +
add esp 24h +
mov [esi+2Ch] eax +
test eax eax +
jnz loc_10054D8  +
push ebx  +
push [ebp+lpCurrentChar]  +
push esi  +
push edi  +
call sub_1003C2D  +
push [ebp+var_114]  +
call sub_1003B0C  +
pop ecx  +
jmp loc_100547D  +
push [ebp+var_114]  +
call sub_1003B0C  +
push 0  +
push 8000h  +
push [ebp+lpCurrentChar]  +
call sub_1004203  +
mov ebx eax +
add esp 10h +
cmp ebx 0FFFFFFFFh +
jnz loc_100551D  +
push [ebp+lpCurrentChar]  +
push offset aS  +
push offset aCannotOpenFile  +
push edi  +
call sub_1002475  +
add esp 10h +
jmp loc_10055E4  +
lea eax [ebp+var_134] +
push eax  +
push ebx  +
push dword ptr [esi+2Ch]  +
call sub_100682F  +
add esp 0Ch +
test eax eax +
jnz loc_100555E  +
cmp [edi+200h] eax +
jnz loc_100587A  +
push [ebp+lpCurrentChar]  +
push offset aS  +
push offset a1IsNotACabinet  +
push edi  +
call sub_1002475  +
add esp 10h +
jmp loc_100587A  +
push ebx  +
call sub_1003DBA  +
or [ebp+var_11C] 0FFFFFFFFh +
cmp dword ptr [esi] 2 +
lea eax [esi+650h] +
pop ecx  +
mov byte ptr [eax] 0 +
mov ebx 100h +
mov edi offset a_ +
jnz loc_1005638  +
xor ecx ecx +
inc ecx  +
cmp [ebp+var_12E] cx +
jnz loc_10055A6  +
cmp [ebp+var_124] 0 +
jnz loc_10055A6  +
cmp [ebp+var_120] 0 +
jz loc_10055A8  +
xor ecx ecx +
cmp [ebp+var_110] 0 +
jz loc_1005626  +
mov dword ptr [esi] 4 +
test ecx ecx +
jz loc_1005638  +
push [ebp+var_110]  +
push ebx  +
push eax  +
call sub_1002800  +
push [ebp+var_108]  +
push edi  +
push [ebp+var_118]  +
call sub_10025E4  +
test eax eax +
jnz loc_1005638  +
mov edi [ebp+var_108] +
push dword ptr [esi+2Ch]  +
call sub_100748D  +
pop ecx  +
test eax eax +
jnz loc_1005606  +
cmp [edi+200h] eax +
jnz loc_1005606  +
push offset aFdidestroyFail  +
push edi  +
call sub_1002475  +
pop ecx  +
pop ecx  +
and dword ptr [esi+44h] 0 +
xor eax eax +
cmp [edi+200h] eax +
setz al  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1005F1E  +
leave   +
retn 8  +
test ecx ecx +
jz loc_1005632  +
mov dword ptr [esi] 4 +
jmp loc_1005641  +
mov dword ptr [esi] 3 +
cmp [ebp+var_110] 0 +
jnz loc_1005670  +
push [ebp+var_108]  +
push edi  +
push esi  +
call sub_1003B1D  +
test eax eax +
jnz loc_1005670  +
push edi  +
push offset aS  +
push offset aCouldNotAddFil  +
push [ebp+var_108]  +
call sub_1002475  +
add esp 10h +
jmp loc_10055DE  +
mov eax [esi] +
mov [ebp+var_114] offset loc_1004E20 +
cmp eax 4 +
jz loc_100568B  +
mov [ebp+var_114] offset loc_1004CC4 +
cmp [ebp+var_128] 0 +
jz loc_10056B1  +
cmp eax 4 +
jnz loc_10056A5  +
mov [ebp+var_110] offset loc_1003A3E +
jmp loc_10056B8  +
mov [ebp+var_110] offset loc_1003939 +
jmp loc_10056B8  +
and [ebp+var_110] 0 +
push [ebp+var_108]  +
push [ebp+lpCurrentChar]  +
call sub_10026F1  +
mov edi eax +
test edi edi +
jz loc_10055DE  +
push edi  +
push ebx  +
lea eax [ebp+var_104] +
push eax  +
call sub_1002800  +
push [ebp+lpCurrentChar]  +
lea eax [esi+750h] +
push ebx  +
push eax  +
call sub_1002800  +
mov eax esi +
sub eax [ebp+lpCurrentChar] +
mov byte ptr [eax+edi+750h] 0 +
xor eax eax +
cmp [esi+106Ch] eax +
jz loc_1005739  +
cmp dword ptr [esi] 4 +
jnz loc_1005733  +
cmp [ebp+var_124] eax +
jnz loc_1005733  +
cmp [ebp+var_120] eax +
jnz loc_1005733  +
mov eax [ebp-130h] +
dec eax  +
mov [esi+1070h] ax +
jmp loc_1005739  +
mov [esi+106Ch] eax +
mov eax [ebp+var_108] +
mov [esi+44h] eax +
lea eax [ebp+var_104] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100574B  +
sub eax edx +
jz loc_10055DE  +
mov eax [ebp+var_108] +
cmp dword ptr [eax+200h] 0 +
jnz loc_10055DE  +
lea eax [ebp+var_104] +
push eax  +
push offset aS  +
push offset aCabinet1  +
lea edi [esi+150h] +
push 200h  +
push edi  +
call sub_10037CE  +
push edi  +
push offset aS_1  +
call ds:printf  +
add esp 1Ch +
lea eax [ebp+var_104] +
push eax  +
push ebx  +
lea edi [esi+0F64h] +
push edi  +
call sub_1002800  +
push esi  +
push [ebp+var_110]  +
lea eax [esi+750h] +
push [ebp+var_114]  +
push 0  +
push eax  +
lea eax [ebp+var_104] +
push eax  +
push dword ptr [esi+2Ch]  +
call sub_10079F1  +
add esp 1Ch +
test eax eax +
jnz loc_100580E  +
mov ecx [ebp+var_108] +
cmp [ecx+200h] eax +
jnz loc_1005856  +
lea eax [esi+30h] +
push eax  +
push edi  +
push esi  +
push ecx  +
call sub_1003C2D  +
cmp dword ptr [esi+30h] 8 +
jnz loc_1005856  +
lea eax [esi+550h] +
push eax  +
call ds:_unlink  +
pop ecx  +
jmp loc_1005856  +
xor eax eax +
cmp [esi+106Ch] eax +
jz loc_100588F  +
lea edi [esi+1070h] +
movzx eax word ptr [edi] +
test ax ax +
jz loc_1005842  +
push eax  +
push [ebp+lpCurrentChar]  +
push dword ptr [esi+2Ch]  +
call sub_1006BFD  +
mov eax 0FFFFh +
add esp 0Ch +
add [edi] ax +
jmp loc_1005856  +
push [ebp+lpCurrentChar]  +
call ds:_unlink  +
pop ecx  +
mov byte ptr [ebp+var_104] 0 +
lea eax [ebp+var_104] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100585F  +
sub eax edx +
jnz loc_100575A  +
mov ebx [ebp+var_11C] +
mov edi [ebp+var_108] +
cmp ebx 0FFFFFFFFh +
jz loc_10055E4  +
push ebx  +
call sub_1003DBA  +
pop ecx  +
jmp loc_10055E4  +
cmp [esi+8] eax +
jz loc_100584F  +
xor ecx ecx +
cmp [esi+858h] eax +
mov dword ptr [esi+850h] 1 +
setz cl  +
mov edi ecx +
imul edi edi +
add edi esi +
lea eax [edi+95Ch] +
push eax  +
push ebx  +
lea eax [ebp+var_104] +
push eax  +
call sub_1002800  +
lea eax [ebp+var_104] +
push eax  +
push ebx  +
lea eax [esi+0F64h] +
push eax  +
call sub_1002800  +
and dword ptr [esi+858h] 0 +
cmp byte ptr [ebp+var_104] 0 +
jz loc_1005856  +
push [ebp+var_108]  +
mov ax [edi+0B5Eh] +
push 0  +
inc ax  +
push 1  +
movzx eax ax +
push eax  +
movzx eax word ptr [edi+0B5Ch] +
push eax  +
add edi 0A5Ch +
push edi  +
lea eax [ebp+var_104] +
push eax  +
push ebx  +
lea eax [esi+750h] +
push eax  +
push esi  +
call sub_1004488  +
jmp loc_1005856  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_100D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_220] eax +
call sub_1003805  +
lea eax [ebp+var_21C] +
push eax  +
call sub_10024A5  +
xor ebx ebx +
push 1074h  +
mov [ebp+var_18] ebx +
mov byte_100E800 bl +
call ds:malloc  +
mov esi eax +
pop ecx  +
cmp esi ebx +
jnz loc_10059AB  +
lea eax [ebp+var_21C] +
push offset aCouldNotAlloca  +
push eax  +
call sub_1002475  +
pop ecx  +
pop ecx  +
lea eax [ebp+var_21C] +
push eax  +
push ebx  +
call sub_1003B55  +
push 1  +
call ds:exit  +
mov edi ds:printf +
mov dword_100E900 esi +
push offset aMicrosoftRCabi  +
mov [esi+0Ch] ebx +
mov [esi+8] ebx +
mov [esi+858h] ebx +
mov [esi+850h] ebx +
mov [esi+854h] ebx +
mov [esi+14h] ebx +
mov [esi+4] ebx +
mov [esi+2Ch] ebx +
mov [esi+10h] ebx +
mov [esi+3Ch] ebx +
mov [esi+40h] ebx +
mov [esi+48h] ebx +
mov [esi+0E64h] bl +
mov [esi+1064h] ebx +
mov [esi+106Ch] ebx +
call edi  +
pop ecx  +
lea eax [ebp+var_21C] +
push eax  +
push [ebp+var_220]  +
push [ebp+arg_0]  +
push esi  +
call sub_1005112  +
test eax eax +
jnz loc_1005A2D  +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call sub_1003B55  +
xor eax eax +
inc eax  +
jmp loc_1005AFC  +
mov eax [esi] +
cmp eax 1 +
jnz loc_1005A49  +
push offset asc_10014B8  +
call edi  +
mov [esp+230h+var_230] offset aExtractYADELDi +
call edi  +
jmp loc_1005AF9  +
cmp eax 5 +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
jnz loc_1005A65  +
call sub_100403A  +
test eax eax +
jnz loc_1005AFA  +
jmp loc_1005A18  +
call sub_10053E9  +
test eax eax +
jnz loc_1005A8E  +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call sub_1003B55  +
mov eax dword_100E7FC +
cmp eax 0FFFFFFFFh +
jz loc_1005A25  +
push eax  +
call sub_1003DBA  +
pop ecx  +
jmp loc_1005A25  +
mov eax [esi+3Ch] +
cmp eax ebx +
jnz loc_1005AB8  +
push offset aNoMatchingFile  +
lea ebx [esi+150h] +
push 200h  +
push ebx  +
call sub_10037CE  +
push ebx  +
push offset aS_2  +
call edi  +
add esp 14h +
jmp loc_1005AF2  +
cmp dword ptr [esi] 3 +
jnz loc_1005AF2  +
mov ecx offset a1File2Bytes +
cmp eax 1 +
jz loc_1005ACC  +
mov ecx offset a1Files2Bytes +
push dword ptr [esi+40h]  +
lea ebx [esi+150h] +
push eax  +
push offset a13ld13ld  +
push ecx  +
push 200h  +
push ebx  +
call sub_10037CE  +
push ebx  +
push offset aS_2  +
call edi  +
add esp 20h +
push esi  +
call ds:free  +
pop ecx  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1005F1E  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+hInstance] +
sub esp 0CCh +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
xor edi edi +
mov hInstance eax +
mov esi offset byte_1001409 +
cmp [ebp+lpCmdLine] ebx +
jnz loc_1005B37  +
mov [ebp+lpCmdLine] esi +
push [ebp+lpCmdLine]  +
call ds:_strdup  +
mov [ebp+var_CC] esi +
xor esi esi +
inc esi  +
pop ecx  +
mov [ebp+lpCmdLine] eax +
cmp eax ebx +
jnz loc_1005BB8  +
push offset aCouldNotAlloca  +
push offset aS_2  +
call ds:printf  +
xor eax eax +
pop ecx  +
inc eax  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
cmp esi 32h +
jge loc_1005BBC  +
mov ecx edi +
sub ecx ebx +
jz loc_1005B90  +
dec ecx  +
jz loc_1005B85  +
dec ecx  +
jnz loc_1005BB7  +
cmp byte ptr [eax] 22h +
jnz loc_1005BB7  +
jmp loc_1005B8A  +
cmp byte ptr [eax] 20h +
jg loc_1005BB7  +
mov [eax] bl +
xor edi edi +
jmp loc_1005BB7  +
mov cl [eax] +
cmp cl 20h +
jle loc_1005BB7  +
cmp cl 22h +
jnz loc_1005BAC  +
lea ecx [eax+1] +
push 2  +
mov [ebp+esi*4+var_CC] ecx +
inc esi  +
pop edi  +
jmp loc_1005BB7  +
mov [ebp+esi*4+var_CC] eax +
xor edi edi +
inc esi  +
inc edi  +
inc eax  +
cmp [eax] bl +
jnz loc_1005B6D  +
mov [ebp+esi*4+var_CC] ebx +
call ds:InitCommonControls  +
lea eax [ebp+var_CC] +
push eax  +
push esi  +
call sub_1005934  +
mov esi eax +
mov eax hDlg +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_1005BF0  +
push eax  +
call ds:DestroyWindow  +
mov hDlg ebx +
push [ebp+lpCmdLine]  +
call ds:free  +
mov eax esi +
jmp loc_1005B65  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1005C21  +
test eax eax +
jnz loc_1005C26  +
mov ecx [esi] +
test ecx ecx +
jz loc_1005C1E  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1005C12  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100D388 +
push offset dword_100D378  +
push dword_100D384  +
mov dword_100D378 eax +
push offset unk_100D368  +
push offset unk_100D36C  +
push offset unk_100D364  +
call ds:__getmainargs  +
add esp 14h +
mov dword_100D374 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1005CC6  +
cmp eax esi +
jnz loc_1005CB9  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_1005CC9  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1005CA0  +
xor esi esi +
inc esi  +
mov eax dword_100E90C +
cmp eax esi +
jnz loc_1005CDC  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1005D0B  +
mov eax dword_100E90C +
test eax eax +
jnz loc_1005D05  +
mov dword_100E90C esi +
push offset dword_1001194  +
push offset dword_1001188  +
call sub_1005C05  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005D0B  +
jmp loc_1005E33  +
mov dword_100D380 esi +
mov eax dword_100E90C +
cmp eax esi +
jnz loc_1005D2F  +
push offset dword_1001184  +
push offset dword_100117C  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100E90C 2 +
test ebx ebx +
jnz loc_1005D3B  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100E918 0 +
jz loc_1005D5F  +
push offset dword_100E918  +
call sub_1006319  +
pop ecx  +
test eax eax +
jz loc_1005D5F  +
push 0  +
push 2  +
push 0  +
call dword_100E918  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_1005D79  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_1005D89  +
cmp al 20h +
ja loc_1005D89  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1005D79  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1005D95  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_1005D98  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_100D37C eax +
cmp dword_100D370 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_1005DCA  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_1005DDD  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_1005D66  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_100D37C eax +
cmp dword_100D370 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_100D380 0 +
jnz loc_1005E1E  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100D37C +
jmp loc_1005E3F  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1005E5C  +
xor eax eax +
jmp loc_1005EA9  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1005E58  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1005E96  +
cmp ecx 20Bh +
jnz loc_1005E58  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1005E58  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1005EA4  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1005E58  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100D370 eax +
call sub_10064B2  +
push eax  +
call ds:__set_app_type  +
or dword_100E904 0FFFFFFFFh +
or dword_100E908 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100D390 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100D38C +
mov [eax] ecx +
call sub_1006444  +
cmp dword_100D028 0 +
jnz loc_1005F02  +
push offset sub_1006444  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100642C  +
xor eax eax +
retn   +
***
call sub_10064F1  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_100D00C +
jnz loc_1005F29  +
retn 0  +
jmp loc_1006587  +
***
push edi  +
mov ebp [ecx] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call __local_unwind4  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_10060D6  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_1006203  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_1006168  +
jmp loc_1006110  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_100613B  +
mov edx edi +
call @_EH4_CallFilterFunc@8  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_1006172  +
jg loc_100617B  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_1006110  +
cmp [ebp+var_1] 0 +
jz loc_1006168  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_100615A  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_1006148  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10061AF  +
cmp dword_100E914 0 +
jz loc_10061AF  +
push offset dword_100E914  +
call sub_1006319  +
add esp 4 +
test eax eax +
jz loc_10061AF  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_100E914  +
add esp 8 +
mov ecx [ebp+arg_C] +
call @_EH4_GlobalUnwind@4  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_10061D0  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call @_EH4_LocalUnwind@16  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_10061E8  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call @_EH4_TransferToHandler@8  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_1006168  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call @_EH4_LocalUnwind@16  +
jmp loc_1006148  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1006264  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1006264  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100625E  +
cmp eax 19930521h +
jz loc_100625E  +
cmp eax 19930522h +
jz loc_100625E  +
cmp eax 1994000h +
jnz loc_1006264  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1006224+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10062A6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10062A2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100630D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1006305  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100630F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10062F5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1006290  +
pop ecx  +
test eax eax +
jz loc_1006376  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_10062D0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006376  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100637F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1005F1E  +
push offset dword_100D00C  +
call sub_10060A0  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10064A5  +
cmp ecx 0FFFFFFFFh +
jz loc_10064A5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100649E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100649E  +
cmp edx 10000000h +
jnb loc_100649E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100649E  +
jmp loc_1006499  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10064E7  +
push eax  +
call sub_100644C  +
test eax eax +
jz loc_10064E7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10064DC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10064E7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100D00C +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1006523  +
test eax ebx +
jz loc_1006523  +
not eax  +
mov dword_100D010 eax +
jmp loc_100657E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100656A  +
test dword_100D00C ebx +
jnz loc_100656F  +
mov esi 0BB40E64Fh +
mov dword_100D00C esi +
not esi  +
mov dword_100D010 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100D498 eax +
mov dword_100D494 ecx +
mov dword_100D490 edx +
mov dword_100D48C ebx +
mov dword_100D488 esi +
mov dword_100D484 edi +
mov word_100D4B0 ss +
mov word_100D4A4 cs +
mov word_100D480 ds +
mov word_100D47C es +
mov word_100D478 fs +
mov word_100D474 gs +
pushf   +
pop dword_100D4A8  +
mov eax [ebp+0] +
mov dword_100D49C eax +
mov eax [ebp+4] +
mov dword_100D4A0 eax +
lea eax [ebp+8] +
mov dword_100D4AC eax +
mov eax [ebp-320h] +
mov dword_100D3E8 10001h +
mov eax dword_100D4A0 +
mov dword_100D3A4 eax +
mov dword_100D398 0C0000409h +
mov dword_100D39C 1 +
mov eax dword_100D00C +
mov [ebp-328h] eax +
mov eax dword_100D010 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push esi  +
mov eax [esp+14h] +
or eax eax +
jnz loc_10066A1  +
mov ecx [esp+10h] +
mov eax [esp+0Ch] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+8] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  dword ptr [esp+10h] +
mov ecx eax +
mov eax esi +
mul  dword ptr [esp+10h] +
add edx ecx +
jmp loc_10066E8  +
mov ecx eax +
mov ebx [esp+10h] +
mov edx [esp+0Ch] +
mov eax [esp+8] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_10066AF  +
div  ebx +
mov esi eax +
mul  dword ptr [esp+14h] +
mov ecx eax +
mov eax [esp+10h] +
mul  esi +
add edx ecx +
jb loc_10066DD  +
cmp edx [esp+0Ch] +
ja loc_10066DD  +
jb loc_10066E6  +
cmp eax [esp+8] +
jbe loc_10066E6  +
dec esi  +
sub eax [esp+10h] +
sbb edx [esp+14h] +
xor ebx ebx +
sub eax [esp+8] +
sbb edx [esp+0Ch] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov ebx offset unk_100D030 +
retn   +
***
mov eax [esp+8] +
mov ecx [esp+10h] +
or ecx eax +
mov ecx [esp+0Ch] +
jnz loc_1006769  +
mov eax [esp+4] +
mul  ecx +
retn 10h  +
***
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+8] +
mul  dword ptr [esp+14h] +
add ebx eax +
mov eax [esp+8] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_20] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_10067BA  +
mov ebx [ebp+arg_0] +
push 804h  +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+8] edi +
call ebx  +
pop ecx  +
cmp eax edi +
jnz loc_10067C1  +
push edi  +
push 5  +
push esi  +
call sub_1007C10  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
mov ecx [ebp+arg_4] +
or dword ptr [eax+88h] 0FFFFFFFFh +
or dword ptr [eax+84h] 0FFFFFFFFh +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_C] +
mov [eax+10h] ecx +
mov ecx [ebp+arg_10] +
mov [eax+14h] ecx +
mov ecx [ebp+arg_14] +
mov [eax+18h] ecx +
mov ecx [ebp+arg_18] +
mov [eax+1Ch] ecx +
mov ecx [ebp+arg_1C] +
mov [eax+20h] ecx +
push 0Fh  +
pop ecx  +
mov [eax+0B2h] cx +
mov ecx 0FFFFh +
mov [eax+8] ebx +
mov [eax] esi +
mov [eax+48h] edi +
mov [eax+44h] edi +
mov [eax+4Ch] edi +
mov [eax+0A0h] ecx +
mov [eax+0A8h] ecx +
mov [eax+0A4h] ecx +
jmp loc_10067BC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1006846  +
xor eax eax +
jmp loc_10068CA  +
push 24h  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+arg_4]  +
call dword ptr [esi+10h]  +
add esp 0Ch +
cmp eax 24h +
jnz loc_100683F  +
cmp [ebp+var_24] 4643534Dh +
jnz loc_100683F  +
mov eax 103h +
cmp [ebp+var_C] ax +
jz loc_100687E  +
movzx eax [ebp+var_C] +
push eax  +
push 3  +
push dword ptr [esi]  +
call sub_1007C10  +
jmp loc_100683F  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10068C7  +
mov ecx [ebp+var_1C] +
mov [eax] ecx +
mov cx [ebp+var_A] +
mov [eax+4] cx +
mov cx [ebp+var_8] +
mov [eax+6] cx +
mov cx [ebp+var_4] +
mov [eax+8] cx +
mov cx [ebp+var_2] +
mov [eax+0Ah] cx +
movzx ecx [ebp+var_6] +
mov edx ecx +
shr edx 2 +
and edx 1 +
mov [eax+0Ch] edx +
mov edx ecx +
and edx 1 +
and ecx 2 +
mov [eax+10h] edx +
mov [eax+14h] ecx +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
lea eax [esi+7BCh] +
lea ecx [esi+3B7h] +
mov [eax+4] ecx +
lea ecx [esi+4B8h] +
mov [eax+8] ecx +
lea ecx [esi+5B9h] +
mov [eax+0Ch] ecx +
mov ecx [esi+38h] +
mov [eax+10h] ecx +
mov cx [esi+70h] +
push edi  +
mov [eax+1Eh] cx +
mov cx [esi+72h] +
push eax  +
xor ebx ebx +
push ebx  +
lea edi [esi+7E4h] +
mov [eax+20h] cx +
call dword ptr [esi+24h]  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1006936  +
push ebx  +
push 0Bh  +
push dword ptr [esi]  +
call sub_1007C10  +
xor eax eax +
jmp loc_1006970  +
cmp [esi+28h] ebx +
jz loc_100696D  +
mov [edi] ebx +
mov eax [esi+38h] +
mov [edi+4] eax +
mov eax [esi+4Ch] +
mov [edi+8] eax +
mov ax [esi+0A0h] +
mov [edi+0Ch] ax +
mov ax [esi+70h] +
mov [edi+0Eh] ax +
movzx eax word ptr [esi+72h] +
push edi  +
mov [edi+10h] eax +
call dword ptr [esi+28h]  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1006928  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi+0A8h]  +
lea edi [esi+7E4h] +
push dword ptr [esi+48h]  +
push dword ptr [esi+84h]  +
call dword ptr [esi+10h]  +
add esp 0Ch +
cmp [esi+0A8h] eax +
jnz loc_1006AA3  +
mov eax [esi+48h] +
movzx eax word ptr [eax+4] +
mov ebx [ebp+arg_4] +
add eax ebx +
cmp eax [esi+98h] +
ja loc_1006AA3  +
mov eax [esi+48h] +
movzx eax word ptr [eax+4] +
push eax  +
mov eax [esi+3Ch] +
add eax ebx +
push eax  +
push dword ptr [esi+84h]  +
call dword ptr [esi+10h]  +
mov ecx [esi+48h] +
movzx ecx word ptr [ecx+4] +
add esp 0Ch +
cmp ecx eax +
jnz loc_1006AA3  +
mov eax [esi+48h] +
xor ecx ecx +
cmp [eax] ecx +
jz loc_1006A29  +
movzx eax word ptr [eax+4] +
push ecx  +
push eax  +
mov eax [esi+3Ch] +
add eax ebx +
push eax  +
call sub_1007C33  +
push eax  +
mov eax [esi+0A8h] +
sub eax 4 +
push eax  +
mov eax [esi+48h] +
add eax 4 +
push eax  +
call sub_1007C33  +
mov ecx [esi+48h] +
cmp eax [ecx] +
jnz loc_1006AA3  +
xor ecx ecx +
mov eax [esi+48h] +
add [eax+4] bx +
cmp ebx ecx +
ja loc_1006A41  +
mov eax [esi+48h] +
cmp [eax+6] cx +
jz loc_1006A41  +
xor edx edx +
jmp loc_1006A44  +
xor edx edx +
inc edx  +
cmp [esi+28h] ecx +
jz loc_1006A9E  +
mov dword ptr [edi] 2 +
mov eax [esi+38h] +
mov [edi+4] eax +
mov ax [esi+0A8h] +
sub ax 8 +
mov [edi+0Ch] ax +
jz loc_1006A71  +
mov eax [esi+48h] +
add eax 8 +
mov [edi+8] eax +
jmp loc_1006A74  +
mov [edi+8] ecx +
mov eax [esi+3Ch] +
add eax ebx +
mov [edi+10h] eax +
mov eax [esi+48h] +
mov ax [eax+4] +
push edi  +
mov [edi+14h] ax +
mov [edi+18h] edx +
mov [edi+1Ch] bx +
call dword ptr [esi+28h]  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1006A9E  +
push 0  +
push 0Bh  +
jmp loc_1006AA7  +
xor eax eax +
inc eax  +
jmp loc_1006AB0  +
push 0  +
push 4  +
push dword ptr [esi]  +
call sub_1007C10  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 1  +
push 0  +
push dword ptr [esi+88h]  +
call dword ptr [esi+1Ch]  +
mov ebx [ebp+arg_4] +
mov edi [ebp+arg_0] +
push ebx  +
push edi  +
push dword ptr [esi+88h]  +
mov [ebp+arg_8] eax +
call dword ptr [esi+10h]  +
add esp 18h +
test eax eax +
jg loc_1006AFE  +
push 0  +
push 4  +
push dword ptr [esi]  +
call sub_1007C10  +
xor eax eax +
jmp loc_1006B3E  +
mov cl [edi+ebx-1] +
mov eax edi +
mov byte ptr [edi+ebx-1] 0 +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1006B0C  +
sub eax edi +
lea edx [eax+1] +
cmp edx ebx +
jl loc_1006B20  +
test cl cl +
jnz loc_1006AEF  +
mov ecx [ebp+arg_8] +
push 0  +
lea eax [eax+ecx+1] +
push eax  +
push dword ptr [esi+88h]  +
call dword ptr [esi+1Ch]  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_1006AEF  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push 1  +
push 0  +
push dword ptr [esi+88h]  +
call dword ptr [esi+1Ch]  +
mov ebx eax +
add esp 0Ch +
cmp ebx 0FFFFFFFFh +
jnz loc_1006B7A  +
push 0  +
push 4  +
push dword ptr [esi]  +
call sub_1007C10  +
xor eax eax +
jmp loc_1006BF2  +
mov ax [esi+0ACh] +
push edi  +
mov [esi+7DEh] ax +
mov ax [esi+70h] +
lea edi [esi+7BCh] +
mov [esi+7DAh] ax +
mov eax [esi+38h] +
push edi  +
push 5  +
mov [edi] ebx +
mov [esi+7CCh] eax +
call dword ptr [esi+24h]  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1006BDF  +
movzx eax word ptr [esi+7DEh] +
mov [esi+0ACh] ax +
test ax ax +
jz loc_1006BEE  +
mov edi [edi] +
cmp edi ebx +
jz loc_1006BEE  +
push 0  +
push edi  +
push dword ptr [esi+88h]  +
call dword ptr [esi+1Ch]  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_1006BEE  +
push 0  +
push 0Bh  +
push dword ptr [esi]  +
call sub_1007C10  +
xor eax eax +
jmp loc_1006BF1  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1006C18  +
xor eax eax +
jmp loc_1006D42  +
push 0  +
push 8002h  +
push [ebp+arg_4]  +
call dword ptr [esi+0Ch]  +
add esp 0Ch +
mov [ebp+arg_0] eax +
cmp eax 0FFFFFFFFh +
jz loc_1006D3F  +
push 24h  +
lea ecx [ebp+var_34] +
push ecx  +
push eax  +
call dword ptr [esi+10h]  +
add esp 0Ch +
cmp eax 24h +
jnz loc_1006D38  +
cmp [ebp+var_34] 4643534Dh +
jnz loc_1006D38  +
mov eax 103h +
cmp [ebp+var_1C] ax +
jnz loc_1006D38  +
mov cx [ebp+arg_8] +
cmp [ebp+var_1A] cx +
jb loc_1006D38  +
movzx eax word ptr [esi+6Eh] +
test al 3 +
jnz loc_1006D38  +
push ebx  +
movzx ebx cx +
push edi  +
lea edi ds:24h[ebx*8] +
test al 4 +
jz loc_1006CB3  +
push 4  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call dword ptr [esi+10h]  +
add esp 0Ch +
cmp eax 4 +
jnz loc_1006D36  +
movzx eax byte ptr [ebp+var_8+2] +
imul eax ebx +
lea edi [edi+eax+4] +
xor ebx ebx +
push ebx  +
push edi  +
push [ebp+arg_0]  +
call dword ptr [esi+1Ch]  +
or edi 0FFFFFFFFh +
add esp 0Ch +
cmp eax edi +
jz loc_1006D36  +
push 8  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
call dword ptr [esi+10h]  +
add esp 0Ch +
cmp eax 8 +
jnz loc_1006D36  +
mov eax [ebp+var_10] +
push ebx  +
mov [ebp+var_2C] eax +
mov ax [ebp+arg_8] +
push ebx  +
push [ebp+arg_0]  +
mov [ebp+var_1A] ax +
call dword ptr [esi+1Ch]  +
add esp 0Ch +
cmp eax edi +
jz loc_1006D36  +
push 24h  +
lea eax [ebp+var_34] +
push eax  +
push [ebp+arg_0]  +
call dword ptr [esi+14h]  +
add esp 0Ch +
cmp eax 24h +
jnz loc_1006D36  +
push ebx  +
push [ebp+var_10]  +
push [ebp+arg_0]  +
call dword ptr [esi+1Ch]  +
add esp 0Ch +
cmp eax edi +
jz loc_1006D36  +
push ebx  +
lea eax [ebp+var_34] +
push eax  +
push [ebp+arg_0]  +
call dword ptr [esi+14h]  +
add esp 0Ch +
cmp eax edi +
jz loc_1006D36  +
mov [ebp+var_4] 1 +
pop edi  +
pop ebx  +
push [ebp+arg_0]  +
call dword ptr [esi+18h]  +
pop ecx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi+0B2h] +
push edi  +
and eax 0Fh +
xor edi edi +
sub eax edi +
jz loc_1006DA6  +
dec eax  +
jz loc_1006D8B  +
dec eax  +
jz loc_1006D81  +
dec eax  +
jz loc_1006D77  +
sub eax 0Ch +
jz loc_1006DB4  +
push edi  +
push 6  +
jmp loc_1006D9B  +
push dword ptr [esi+34h]  +
call sub_1008083  +
jmp loc_1006D93  +
push dword ptr [esi+34h]  +
call sub_1007ECB  +
jmp loc_1006D93  +
push dword ptr [esi+34h]  +
call sub_1007D8D  +
pop ecx  +
test eax eax +
jz loc_1006DA6  +
push edi  +
push 7  +
push dword ptr [esi]  +
call sub_1007C10  +
xor eax eax +
jmp loc_1006DB7  +
push dword ptr [esi+3Ch]  +
call dword ptr [esi+4]  +
push dword ptr [esi+40h]  +
call dword ptr [esi+4]  +
pop ecx  +
pop ecx  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
movzx ecx word ptr [esi+0B2h] +
mov eax ecx +
push edi  +
and eax 0Fh +
xor edi edi +
sub eax edi +
lea edx [esi+94h] +
mov dword ptr [edx] 8000h +
jz loc_1006E96  +
dec eax  +
jz loc_1006E81  +
dec eax  +
jz loc_1006E57  +
dec eax  +
jz loc_1006E25  +
sub eax 0Ch +
jz loc_1006F82  +
push 6  +
pop eax  +
push edi  +
push eax  +
push dword ptr [esi]  +
call sub_1007C10  +
push 0Fh  +
pop eax  +
mov [esi+0B2h] ax +
xor eax eax +
jmp loc_1006F85  +
push edi  +
push edi  +
push edi  +
push edi  +
xor eax eax +
push edi  +
shr ecx 8 +
inc eax  +
push edi  +
and ecx 1Fh +
shl eax cl +
lea ebx [esi+98h] +
push ebx  +
push edi  +
mov [ebp+var_10] eax +
push edi  +
lea eax [ebp+var_10] +
push eax  +
push edx  +
call sub_1007EF9  +
add esp 2Ch +
test eax eax +
jz loc_1006EA2  +
push 7  +
jmp loc_1006E0A  +
mov eax [esi+20h] +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
lea ebx [esi+98h] +
push ebx  +
push edi  +
mov [ebp+var_4] eax +
push edi  +
lea eax [ebp+var_8] +
shr ecx 8 +
push eax  +
and ecx 1Fh +
push edx  +
mov [ebp+var_8] ecx +
call sub_1007DC0  +
jmp loc_1006E4C  +
push edi  +
lea ebx [esi+98h] +
push ebx  +
push edi  +
push edi  +
push edx  +
call sub_1007CA4  +
add esp 14h +
jmp loc_1006E4F  +
lea ebx [esi+98h] +
mov dword ptr [ebx] 8000h +
push dword ptr [ebx]  +
call dword ptr [esi+8]  +
pop ecx  +
mov [esi+3Ch] eax +
cmp eax edi +
jnz loc_1006EB7  +
push edi  +
push 5  +
jmp loc_1006E0D  +
push dword ptr [esi+94h]  +
call dword ptr [esi+8]  +
pop ecx  +
mov [esi+40h] eax +
cmp eax edi +
jnz loc_1006ED1  +
push dword ptr [esi+3Ch]  +
call dword ptr [esi+4]  +
pop ecx  +
jmp loc_1006EAF  +
movzx eax word ptr [esi+0B2h] +
and eax 0Fh +
dec eax  +
jz loc_1006F43  +
dec eax  +
jz loc_1006F17  +
dec eax  +
jnz loc_1006F82  +
push dword ptr [esi+1Ch]  +
lea eax [esi+34h] +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
lea eax [ebp+var_10] +
push dword ptr [esi+8]  +
push eax  +
lea eax [esi+94h] +
push eax  +
call sub_1007EF9  +
add esp 2Ch +
jmp loc_1006F5D  +
push dword ptr [esi+1Ch]  +
lea eax [esi+34h] +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
lea eax [ebp+var_8] +
push dword ptr [esi+8]  +
push eax  +
lea eax [esi+94h] +
push eax  +
call sub_1007DC0  +
jmp loc_1006F12  +
lea eax [esi+34h] +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
lea eax [esi+94h] +
push dword ptr [esi+8]  +
push eax  +
call sub_1007CA4  +
add esp 14h +
cmp eax edi +
jz loc_1006F82  +
push dword ptr [esi+3Ch]  +
xor ebx ebx +
cmp eax 1 +
setnz bl  +
lea ebx [ebx+ebx+5] +
call dword ptr [esi+4]  +
push dword ptr [esi+40h]  +
call dword ptr [esi+4]  +
pop ecx  +
pop ecx  +
push edi  +
push ebx  +
jmp loc_1006E0D  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi+0B2h] +
push edi  +
and eax 0Fh +
xor edi edi +
sub eax edi +
jz loc_1006FED  +
dec eax  +
jz loc_1006FD2  +
dec eax  +
jz loc_1006FC8  +
dec eax  +
jz loc_1006FBE  +
sub eax 0Ch +
jz loc_1006FED  +
push edi  +
push 6  +
jmp loc_1006FE2  +
push dword ptr [esi+34h]  +
call sub_100805D  +
jmp loc_1006FDA  +
push dword ptr [esi+34h]  +
call sub_1007EA7  +
jmp loc_1006FDA  +
push dword ptr [esi+34h]  +
call sub_1007D70  +
pop ecx  +
test eax eax +
jz loc_1006FED  +
push edi  +
push 7  +
push dword ptr [esi]  +
call sub_1007C10  +
xor eax eax +
jmp loc_1006FF0  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi+0B2h] +
and eax 0Fh +
xor ebx ebx +
sub eax ebx +
push edi  +
jz loc_10070B9  +
dec eax  +
jz loc_1007083  +
dec eax  +
jz loc_1007050  +
dec eax  +
jz loc_100702B  +
push ebx  +
push 6  +
jmp loc_10070EB  +
mov edi [ebp+arg_4] +
movzx eax word ptr [edi] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
mov eax [esi+48h] +
push dword ptr [esi+40h]  +
movzx eax word ptr [eax+4] +
push eax  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+34h]  +
call sub_1007FF7  +
jmp loc_1007073  +
mov edi [ebp+arg_4] +
movzx eax word ptr [edi] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
mov eax [esi+48h] +
push dword ptr [esi+40h]  +
movzx eax word ptr [eax+4] +
push eax  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+34h]  +
call sub_1007E63  +
add esp 14h +
test eax eax +
jnz loc_10070E8  +
mov ax word ptr [ebp+arg_0] +
mov [edi] ax +
jmp loc_10070E3  +
mov eax [esi+94h] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
mov eax [esi+48h] +
push dword ptr [esi+40h]  +
movzx eax word ptr [eax+4] +
push eax  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+34h]  +
call sub_1007D1C  +
add esp 14h +
test eax eax +
jnz loc_10070E8  +
mov eax [ebp+arg_4] +
mov cx word ptr [ebp+arg_0] +
mov [eax] cx +
jmp loc_10070E3  +
mov eax [esi+48h] +
movzx eax word ptr [eax+4] +
movzx ecx ax +
cmp ecx [esi+94h] +
ja loc_10070E8  +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
movzx eax ax +
push eax  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+40h]  +
call memcpy  +
add esp 0Ch +
xor eax eax +
inc eax  +
jmp loc_10070F4  +
push ebx  +
push 7  +
push dword ptr [esi]  +
call sub_1007C10  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
lea eax [ebx+5B9h] +
push eax  +
mov esi 101h +
push esi  +
lea edi [ebx+6BAh] +
push edi  +
call sub_1002800  +
push [ebp+arg_4]  +
push esi  +
push edi  +
call sub_1002887  +
lea edi [esi+7Fh] +
push edi  +
mov esi 8000h +
lea eax [ebx+6BAh] +
push esi  +
push eax  +
call dword ptr [ebx+0Ch]  +
add esp 0Ch +
mov [ebx+88h] eax +
cmp eax 0FFFFFFFFh +
jz loc_10073D0  +
push edi  +
lea eax [ebx+6BAh] +
push esi  +
push eax  +
call dword ptr [ebx+0Ch]  +
add esp 0Ch +
mov [ebx+84h] eax +
cmp eax 0FFFFFFFFh +
jz loc_10073D0  +
push 24h  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [ebx+88h]  +
call dword ptr [ebx+10h]  +
add esp 0Ch +
cmp eax 24h +
jz loc_1007195  +
push 0  +
push 2  +
jmp loc_10073D4  +
cmp [ebp+var_24] 4643534Dh +
jnz loc_100718C  +
mov eax 103h +
cmp [ebp+var_C] ax +
jz loc_10071B5  +
movzx eax [ebp+var_C] +
push eax  +
push 3  +
jmp loc_10073D4  +
mov ax [ebp+arg_C] +
mov ecx 0FFFFh +
cmp ax cx +
jz loc_10071DC  +
mov cx [ebp+arg_8] +
cmp cx [ebp+var_4] +
jnz loc_10071D3  +
cmp ax [ebp+var_2] +
jz loc_10071DC  +
push 0  +
push 0Ah  +
jmp loc_10073D4  +
push 9  +
xor eax eax +
lea edi [ebx+50h] +
pop ecx  +
lea esi [ebp+var_24] +
movs   +
test byte ptr [ebx+6Eh] 4 +
mov word ptr [ebp+arg_0] ax +
mov byte ptr [ebp+arg_0+2] al +
mov byte ptr [ebp+arg_0+3] al +
jz loc_1007237  +
push 4  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [ebx+88h]  +
call dword ptr [ebx+10h]  +
add esp 0Ch +
cmp eax 4 +
jnz loc_100718C  +
mov eax 0EA60h +
cmp word ptr [ebp+arg_0] ax +
ja loc_100718C  +
cmp byte ptr [ebp+arg_0+2] 0FFh +
ja loc_100718C  +
cmp byte ptr [ebp+arg_0+3] 0FFh +
ja loc_100718C  +
movzx eax word ptr [ebp+arg_0] +
xor edi edi +
cmp [ebx+0A0h] eax +
jz loc_1007276  +
mov eax [ebx+4Ch] +
cmp eax edi +
jz loc_1007254  +
push eax  +
call dword ptr [ebx+4]  +
pop ecx  +
mov [ebx+4Ch] edi +
movzx eax word ptr [ebp+arg_0] +
mov [ebx+0A0h] eax +
cmp eax edi +
jbe loc_1007276  +
push eax  +
call dword ptr [ebx+8]  +
pop ecx  +
mov [ebx+4Ch] eax +
cmp eax edi +
jnz loc_1007276  +
push edi  +
push 5  +
jmp loc_10073D4  +
mov eax [ebx+0A0h] +
cmp eax edi +
jbe loc_100729E  +
push eax  +
push dword ptr [ebx+4Ch]  +
push dword ptr [ebx+88h]  +
call dword ptr [ebx+10h]  +
add esp 0Ch +
cmp [ebx+0A0h] eax +
jz loc_100729E  +
push edi  +
jmp loc_100718E  +
movzx eax byte ptr [ebp+arg_0+2] +
add eax 8 +
cmp [ebx+44h] edi +
jnz loc_10072EC  +
push eax  +
mov [ebx+0A4h] eax +
call dword ptr [ebx+8]  +
pop ecx  +
mov [ebx+44h] eax +
cmp eax edi +
jz loc_100726E  +
movzx eax byte ptr [ebp+arg_0+3] +
add eax 8 +
cmp [ebx+48h] edi +
jnz loc_10072FC  +
push eax  +
mov [ebx+0A8h] eax +
call dword ptr [ebx+8]  +
pop ecx  +
mov [ebx+48h] eax +
cmp eax edi +
jz loc_100726E  +
push dword ptr [ebx+0A8h]  +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_1007304  +
cmp eax [ebx+0A4h] +
jz loc_10072BC  +
push edi  +
push 9  +
jmp loc_10073D4  +
cmp eax [ebx+0A8h] +
jnz loc_10072F4  +
test byte ptr [ebx+6Eh] 1 +
mov esi 100h +
jz loc_100733C  +
push ebx  +
push esi  +
lea eax [ebx+1B5h] +
push eax  +
call sub_1006ABC  +
test eax eax +
jz loc_10073DB  +
push ebx  +
push esi  +
lea eax [ebx+2B6h] +
push eax  +
call sub_1006ABC  +
test eax eax +
jnz loc_100734A  +
jmp loc_10073DB  +
mov byte ptr [ebx+1B5h] 0 +
mov byte ptr [ebx+2B6h] 0 +
test byte ptr [ebx+6Eh] 2 +
jz loc_1007376  +
push ebx  +
push esi  +
lea eax [ebx+3B7h] +
push eax  +
call sub_1006ABC  +
test eax eax +
jz loc_10073DB  +
push ebx  +
push esi  +
lea eax [ebx+4B8h] +
push eax  +
call sub_1006ABC  +
test eax eax +
jnz loc_1007384  +
jmp loc_10073DB  +
mov byte ptr [ebx+3B7h] 0 +
mov byte ptr [ebx+4B8h] 0 +
push 1  +
push edi  +
push dword ptr [ebx+88h]  +
call dword ptr [ebx+1Ch]  +
add esp 0Ch +
mov [ebx+2Ch] eax +
push edi  +
cmp eax 0FFFFFFFFh +
jnz loc_10073A0  +
push 4  +
jmp loc_10073D4  +
push dword ptr [ebx+60h]  +
push dword ptr [ebx+88h]  +
call dword ptr [ebx+1Ch]  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_10073B7  +
push edi  +
jmp loc_100739C  +
mov ax [ebx+6Ch] +
push ebx  +
mov [ebx+0ACh] ax +
call sub_10068D2  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_10073DD  +
push 0  +
push 1  +
push dword ptr [ebx]  +
call sub_1007C10  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 10h  +
lea eax [esi+74h] +
push eax  +
push dword ptr [esi+88h]  +
call dword ptr [esi+10h]  +
add esp 0Ch +
cmp eax 10h +
jnz loc_1007424  +
push esi  +
push 100h  +
lea eax [esi+0B4h] +
push eax  +
call sub_1006ABC  +
test eax eax +
jz loc_1007424  +
xor eax eax +
inc eax  +
jmp loc_1007431  +
push 0  +
push 4  +
push dword ptr [esi]  +
call sub_1007C10  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov di [ebp+arg_0] +
cmp di [esi+0B2h] +
jnz loc_1007457  +
xor eax eax +
inc eax  +
jmp loc_1007482  +
push esi  +
call sub_1006D4A  +
test eax eax +
jnz loc_100746F  +
push eax  +
push 7  +
push dword ptr [esi]  +
call sub_1007C10  +
xor eax eax +
jmp loc_1007482  +
push esi  +
mov [esi+0B2h] di +
call sub_1006DC2  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100749E  +
xor eax eax +
jmp loc_10074F2  +
push esi  +
push 0Fh  +
call sub_100743B  +
mov eax [esi+4Ch] +
test eax eax +
jz loc_10074B2  +
push eax  +
call dword ptr [esi+4]  +
pop ecx  +
mov eax [esi+44h] +
test eax eax +
jz loc_10074BE  +
push eax  +
call dword ptr [esi+4]  +
pop ecx  +
mov eax [esi+48h] +
test eax eax +
jz loc_10074CA  +
push eax  +
call dword ptr [esi+4]  +
pop ecx  +
mov eax [esi+88h] +
cmp eax 0FFFFFFFFh +
jz loc_10074DA  +
push eax  +
call dword ptr [esi+18h]  +
pop ecx  +
mov eax [esi+84h] +
cmp eax 0FFFFFFFFh +
jz loc_10074EA  +
push eax  +
call dword ptr [esi+18h]  +
pop ecx  +
push esi  +
call dword ptr [esi+4]  +
xor eax eax +
pop ecx  +
inc eax  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+0A4h] +
imul eax ebx +
add eax [esi+2Ch] +
push edi  +
push 0  +
push eax  +
push dword ptr [esi+84h]  +
lea edi [esi+7E4h] +
mov [esi+90h] ebx +
call dword ptr [esi+1Ch]  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_10075EA  +
push dword ptr [esi+0A4h]  +
push dword ptr [esi+44h]  +
push dword ptr [esi+84h]  +
call dword ptr [esi+10h]  +
add esp 0Ch +
cmp [esi+0A4h] eax +
jnz loc_10075EA  +
mov eax [esi+44h] +
push 0  +
push dword ptr [eax]  +
push dword ptr [esi+84h]  +
call dword ptr [esi+1Ch]  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_10075EA  +
mov eax [esi+44h] +
mov cl [eax+6] +
and cl 0Fh +
cmp cl 0Fh +
jnz loc_1007585  +
push 0  +
push 6  +
jmp loc_10075EE  +
mov cx [eax+4] +
mov [esi+0B0h] cx +
movzx eax word ptr [eax+6] +
push esi  +
push eax  +
call sub_100743B  +
test eax eax +
jz loc_10075F5  +
cmp dword ptr [esi+28h] 0 +
jz loc_10075E5  +
mov dword ptr [edi] 1 +
mov eax [esi+38h] +
mov [edi+4] eax +
mov ax [esi+0A4h] +
sub ax 8 +
mov [edi+0Ch] ax +
jz loc_10075CD  +
mov eax [esi+44h] +
add eax 8 +
mov [edi+8] eax +
jmp loc_10075D1  +
and dword ptr [edi+8] 0 +
push edi  +
mov [edi+0Eh] bx +
call dword ptr [esi+28h]  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_10075E5  +
push 0  +
push 0Bh  +
jmp loc_10075EE  +
xor eax eax +
inc eax  +
jmp loc_10075F7  +
push 0  +
push 4  +
push dword ptr [esi]  +
call sub_1007C10  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov cx [esi+72h] +
movzx eax word ptr [esi+70h] +
push edi  +
lea edi [esi+7BCh] +
lea edx [esi+3B7h] +
mov [edi+4] edx +
lea edx [esi+4B8h] +
inc cx  +
mov [edi+8] edx +
lea edx [esi+5B9h] +
movzx ecx cx +
mov [edi+0Ch] edx +
mov edx [esi+38h] +
and dword ptr [edi+24h] 0 +
mov [ebp+var_8] eax +
mov [ebp+var_4] ecx +
mov [edi+10h] edx +
mov [edi+1Eh] ax +
mov [edi+20h] cx +
or ebx 0FFFFFFFFh +
mov eax [esi+88h] +
and [ebp+arg_0] 0 +
cmp eax ebx +
jz loc_1007676  +
push eax  +
call dword ptr [esi+18h]  +
pop ecx  +
test eax eax +
jnz loc_1007676  +
mov [esi+88h] ebx +
mov eax [esi+84h] +
cmp eax ebx +
jz loc_100768F  +
push eax  +
call dword ptr [esi+18h]  +
pop ecx  +
test eax eax +
jnz loc_100768F  +
mov [esi+84h] ebx +
cmp [esi+88h] ebx +
jnz loc_1007746  +
cmp [esi+84h] ebx +
jnz loc_1007746  +
push edi  +
push 4  +
call dword ptr [esi+24h]  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_1007740  +
push [ebp+var_4]  +
lea eax [esi+3B7h] +
push [ebp+var_8]  +
push eax  +
push esi  +
call sub_1007100  +
test eax eax +
jz loc_10076DA  +
push 0  +
push esi  +
call sub_10074FA  +
test eax eax +
jnz loc_10076E8  +
mov eax [esi] +
cmp dword ptr [eax] 0Bh +
jz loc_100775D  +
mov [ebp+arg_0] 1 +
cmp [ebp+arg_0] 0 +
mov eax [esi] +
mov eax [eax] +
mov [edi+24h] eax +
jnz loc_1007659  +
inc word ptr [esi+0AEh]  +
movzx eax word ptr [esi+0AEh] +
test ax ax +
jz loc_1007735  +
mov edi 0FFFFh +
mov eax edi +
add [esi+0ACh] ax +
add [esi+0AEh] ax +
push esi  +
call sub_10073E9  +
test eax eax +
jz loc_100775D  +
cmp word ptr [esi+0AEh] 0 +
jnz loc_1007711  +
xor eax eax +
inc eax  +
mov [esi+9Ch] eax +
jmp loc_100775F  +
push 0  +
push 0Bh  +
jmp loc_1007756  +
push 0  +
mov [esi+88h] ebx +
mov [esi+84h] ebx +
push 4  +
push dword ptr [esi]  +
call sub_1007C10  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+48h] +
movzx eax word ptr [eax+6] +
add [esi+30h] eax +
movzx eax word ptr [esi+0B0h] +
push edi  +
xor edi edi +
cmp ax di +
jbe loc_1007795  +
dec eax  +
mov [esi+0B0h] ax +
push edi  +
push esi  +
call sub_100697C  +
test eax eax +
jnz loc_10077C2  +
cmp [esi+0B0h] di +
jnz loc_10077B3  +
push esi  +
call sub_1007603  +
test eax eax +
jnz loc_10077B7  +
xor eax eax +
jmp loc_1007827  +
push edi  +
push esi  +
call sub_100697C  +
test eax eax +
jz loc_10077B3  +
mov eax [esi+48h] +
cmp [eax+6] di +
jnz loc_10077F3  +
push esi  +
call sub_1007603  +
test eax eax +
jz loc_10077B3  +
mov eax [esi+48h] +
movzx eax word ptr [eax+4] +
push eax  +
push esi  +
call sub_100697C  +
test eax eax +
jz loc_10077B3  +
mov eax 0FFFFh +
add [esi+0B0h] ax +
mov eax [esi+48h] +
movzx eax word ptr [eax+6] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
call sub_1006FFB  +
test eax eax +
jz loc_10077B3  +
mov eax [esi+48h] +
mov cx word ptr [ebp+arg_0] +
cmp cx [eax+6] +
jz loc_1007824  +
push edi  +
push 7  +
push dword ptr [esi]  +
call sub_1007C10  +
jmp loc_10077B3  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
cmp dword ptr [edi+9Ch] 0 +
jz loc_1007849  +
xor eax eax +
inc eax  +
jmp loc_100788E  +
push esi  +
mov esi [ebp+arg_4] +
mov eax 0FFFEh +
mov ecx esi +
and ecx eax +
cmp ecx eax +
jnz loc_100785F  +
movzx esi word ptr [edi+6Ah] +
dec esi  +
cmp [edi+90h] esi +
jz loc_100788A  +
push edi  +
call sub_1006F91  +
test eax eax +
jz loc_1007893  +
push esi  +
push edi  +
call sub_10074FA  +
test eax eax +
jz loc_1007893  +
push edi  +
call sub_100776B  +
test eax eax +
jz loc_1007893  +
and dword ptr [edi+30h] 0 +
xor eax eax +
inc eax  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_100788D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+74h] +
push edi  +
test eax eax +
jz loc_1007958  +
mov ebx [esi+78h] +
mov [ebp+arg_0] eax +
cmp ebx [esi+30h] +
jnb loc_10078C7  +
mov dword ptr [esi+90h] 0FFFFh +
movzx eax word ptr [esi+7Ch] +
push eax  +
push esi  +
call sub_1007832  +
jmp loc_10078DA  +
push esi  +
call sub_100776B  +
test eax eax +
jz loc_100793D  +
mov eax [esi+48h] +
movzx eax word ptr [eax+6] +
add eax [esi+30h] +
cmp ebx eax +
jnb loc_10078D4  +
cmp [ebp+arg_0] 0 +
jz loc_1007958  +
mov ecx [esi+48h] +
movzx edi word ptr [ecx+6] +
mov eax ebx +
sub eax [esi+30h] +
sub edi eax +
cmp edi [ebp+arg_0] +
jbe loc_1007908  +
mov edi [ebp+arg_0] +
mov ecx [esi+40h] +
push edi  +
add ecx eax +
push ecx  +
push dword ptr [esi+8Ch]  +
call dword ptr [esi+14h]  +
add esp 0Ch +
cmp edi eax +
jnz loc_1007932  +
add ebx edi +
sub [ebp+arg_0] edi +
jz loc_1007958  +
push esi  +
call sub_100776B  +
test eax eax +
jnz loc_10078F2  +
jmp loc_100793D  +
push 0  +
push 8  +
push dword ptr [esi]  +
call sub_1007C10  +
lea edi [esi+8Ch] +
mov eax [edi] +
cmp eax 0FFFFFFFFh +
jz loc_10079D6  +
push eax  +
call dword ptr [esi+18h]  +
or dword ptr [edi] 0FFFFFFFFh +
pop ecx  +
jmp loc_10079D6  +
lea eax [esi+7BCh] +
lea ecx [esi+0B4h] +
mov [eax+4] ecx +
mov ecx [esi+8Ch] +
mov [eax+14h] ecx +
mov cx [esi+7Eh] +
mov [eax+18h] cx +
mov cx [esi+80h] +
mov [eax+1Ah] cx +
mov cx [esi+82h] +
mov [eax+1Ch] cx +
mov ecx [esi+38h] +
mov [eax+10h] ecx +
mov cx [esi+7Ch] +
and dword ptr [eax] 0 +
mov [eax+22h] cx +
movzx ecx word ptr [eax+1Ch] +
xor edi edi +
inc edi  +
test cl 40h +
jz loc_10079B7  +
and ecx 0FFBFh +
mov [eax] edi +
mov [eax+1Ch] cx +
push eax  +
push 3  +
call dword ptr [esi+24h]  +
or dword ptr [esi+8Ch] 0FFFFFFFFh +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_10079DA  +
push 0  +
push 0Bh  +
push dword ptr [esi]  +
call sub_1007C10  +
xor eax eax +
jmp loc_10079E5  +
test eax eax +
jnz loc_10079E3  +
push eax  +
push 8  +
jmp loc_10079CF  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1007C06  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1007C06  +
mov ecx [ebp+arg_18] +
push ebx  +
mov [esi+24h] eax +
mov eax [ebp+arg_14] +
push edi  +
push [ebp+arg_8]  +
mov [esi+28h] eax +
xor eax eax +
mov [esi+0AEh] ax +
mov ebx 101h +
lea eax [esi+5B9h] +
push ebx  +
push eax  +
lea edi [esi+7BCh] +
mov [esi+38h] ecx +
call sub_1002800  +
push 0FFFFh  +
push 0  +
push [ebp+arg_4]  +
push esi  +
call sub_1007100  +
test eax eax +
jz loc_1007BD4  +
push [ebp+arg_8]  +
and dword ptr [esi+9Ch] 0 +
and dword ptr [esi+30h] 0 +
push ebx  +
lea eax [esi+5B9h] +
push eax  +
mov dword ptr [esi+90h] 0FFFFh +
call sub_1002800  +
push esi  +
call sub_1006B4A  +
test eax eax +
jz loc_1007BD4  +
xor ebx ebx +
jmp loc_1007BB4  +
mov eax 0FFFFh +
add [esi+0ACh] ax +
push esi  +
call sub_10073E9  +
test eax eax +
jz loc_1007BD4  +
lea eax [esi+0B4h] +
mov [edi+4] eax +
mov eax [esi+74h] +
mov [edi] eax +
lea eax [esi+1B5h] +
mov [edi+8] eax +
lea eax [esi+2B6h] +
mov [edi+0Ch] eax +
mov ax [esi+7Eh] +
mov [edi+18h] ax +
mov ax [esi+80h] +
mov [edi+1Ah] ax +
mov ax [esi+82h] +
mov [edi+1Ch] ax +
mov eax [esi+38h] +
mov [edi+10h] eax +
mov ax [esi+7Ch] +
mov [edi+22h] ax +
mov cx [esi+7Ch] +
mov eax 0FFFDh +
mov edx eax +
and cx dx +
cmp cx ax +
jnz loc_1007B59  +
push edi  +
cmp [esi+9Ch] ebx +
jz loc_1007B41  +
push 2  +
call [ebp+arg_10]  +
pop ecx  +
mov [esi+8Ch] eax +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1007B4D  +
cmp eax ebx +
jz loc_1007B78  +
push esi  +
call sub_100789C  +
test eax eax +
jz loc_1007BD4  +
jmp loc_1007B9D  +
push 1  +
call [ebp+arg_10]  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1007B9D  +
push ebx  +
push 0Bh  +
push dword ptr [esi]  +
call sub_1007C10  +
jmp loc_1007BD4  +
cmp [esi+9Ch] ebx +
jnz loc_1007B94  +
movzx eax word ptr [edi+22h] +
cmp ax [esi+6Ah] +
jb loc_1007B75  +
mov ecx 0FFFCh +
cmp ax cx +
jb loc_1007B9D  +
push edi  +
jmp loc_1007B1B  +
mov cx [esi+7Ch] +
mov eax 0FFFEh +
mov edx eax +
and cx dx +
cmp cx ax +
jnz loc_1007B9D  +
inc word ptr [esi+0AEh]  +
jmp loc_1007B9D  +
xor eax eax +
mov [esi+0ACh] ax +
cmp [esi+0ACh] bx +
jnz loc_1007A99  +
push esi  +
call sub_1006B4A  +
test eax eax +
jz loc_1007BD4  +
cmp [esi+0ACh] bx +
jnz loc_1007A99  +
mov eax 0FFFFh +
add [esi+0ACh] ax +
mov [ebp+var_4] 1 +
mov eax [esi+88h] +
or ebx 0FFFFFFFFh +
cmp eax ebx +
jz loc_1007BE6  +
push eax  +
call dword ptr [esi+18h]  +
pop ecx  +
lea edi [esi+84h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1007BF7  +
push eax  +
call dword ptr [esi+18h]  +
pop ecx  +
mov eax [ebp+var_4] +
mov [edi] ebx +
pop edi  +
mov [esi+88h] ebx +
pop ebx  +
jmp loc_1007C08  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
mov ecx [ebp+arg_8] +
mov [eax+4] ecx +
mov dword ptr [eax+8] 1 +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov eax esi +
shr eax 2 +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jle loc_1007C74  +
push ebx  +
movzx edx byte ptr [ecx] +
dec eax  +
inc ecx  +
movzx ebx byte ptr [ecx] +
shl ebx 8 +
or edx ebx +
inc ecx  +
movzx ebx byte ptr [ecx] +
shl ebx 10h +
or edx ebx +
inc ecx  +
movzx ebx byte ptr [ecx] +
shl ebx 18h +
or edx ebx +
inc ecx  +
xor edi edx +
test eax eax +
jg loc_1007C4D  +
pop ebx  +
and esi 3 +
xor eax eax +
dec esi  +
jz loc_1007C92  +
dec esi  +
jz loc_1007C89  +
dec esi  +
jnz loc_1007C97  +
movzx eax byte ptr [ecx] +
shl eax 10h +
inc ecx  +
movzx edx byte ptr [ecx] +
shl edx 8 +
or eax edx +
inc ecx  +
movzx ecx byte ptr [ecx] +
or eax ecx +
xor eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
mov ecx 8000h +
test eax eax +
jz loc_1007CBD  +
cmp eax ecx +
jbe loc_1007CBF  +
mov [edi] ecx +
mov eax [edi] +
mov ebx [ebp+arg_10] +
mov ecx [ebp+arg_C] +
add eax 0Ch +
mov [ecx] eax +
test ebx ebx +
jnz loc_1007CD4  +
xor eax eax +
jmp loc_1007D13  +
and dword ptr [ebx] 0 +
push esi  +
push 10h  +
call [ebp+arg_4]  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_1007CF8  +
push [ebp+arg_4]  +
call sub_1009003  +
mov [esi+0Ch] eax +
test eax eax +
jnz loc_1007CFD  +
push esi  +
call [ebp+arg_8]  +
pop ecx  +
xor eax eax +
inc eax  +
jmp loc_1007D12  +
mov eax [ebp+arg_8] +
mov [esi+4] eax +
mov eax [edi] +
mov [esi+8] eax +
mov dword ptr [esi] 4349444Dh +
mov [ebx] esi +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 4349444Dh +
jz loc_1007D31  +
push 2  +
jmp loc_1007D67  +
mov eax [esi+8] +
lea ecx [eax+0Ch] +
cmp [ebp+arg_8] ecx +
jbe loc_1007D40  +
push 3  +
jmp loc_1007D67  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [esi+0Ch]  +
call sub_1008F11  +
test eax eax +
jnz loc_1007D65  +
push [ebp+arg_10]  +
push dword ptr [esi+0Ch]  +
call sub_1008F68  +
test eax eax +
jz loc_1007D68  +
push 4  +
pop eax  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
sub eax 4349444Dh +
neg eax  +
sbb eax eax +
and eax 2 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 4349444Dh +
jz loc_1007DA3  +
push 2  +
pop eax  +
jmp loc_1007DB8  +
push dword ptr [esi+4]  +
and dword ptr [esi] 0 +
push dword ptr [esi+0Ch]  +
call sub_100904B  +
push esi  +
call dword ptr [esi+4]  +
pop ecx  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
mov eax [ebx] +
cmp eax 0Ah +
push esi  +
push edi  +
jl loc_1007E56  +
cmp eax 15h +
jg loc_1007E56  +
mov edi [ebp+arg_0] +
mov eax [edi] +
mov ecx 8000h +
test eax eax +
jz loc_1007DED  +
cmp eax ecx +
jbe loc_1007DEF  +
mov [edi] ecx +
mov eax [edi] +
mov ecx [ebp+arg_10] +
add eax 2800h +
mov [ecx] eax +
mov eax [ebp+arg_14] +
test eax eax +
jnz loc_1007E06  +
xor eax eax +
jmp loc_1007E59  +
and dword ptr [eax] 0 +
push 1400h  +
call [ebp+arg_8]  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_1007E1D  +
xor eax eax +
inc eax  +
jmp loc_1007E59  +
mov eax [ebp+arg_8] +
mov [esi+4] eax +
mov eax [ebp+arg_C] +
mov [esi+8] eax +
mov eax [edi] +
mov [esi+0Ch] eax +
mov eax [ebx+4] +
mov [esi+10h] eax +
mov dword ptr [esi] 43494451h +
movzx eax byte ptr [ebx] +
push eax  +
push esi  +
call sub_1009060  +
test eax eax +
jz loc_1007E4F  +
push esi  +
call [ebp+arg_C]  +
pop ecx  +
jmp loc_1007E18  +
mov eax [ebp+arg_14] +
mov [eax] esi +
jmp loc_1007E02  +
push 5  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 43494451h +
jz loc_1007E78  +
push 2  +
pop eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_10] +
mov eax [eax] +
cmp eax [ecx+0Ch] +
jbe loc_1007E86  +
push 3  +
jmp loc_1007E75  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
call sub_10091C9  +
movzx eax ax +
neg eax  +
sbb eax eax +
and eax 4 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 43494451h +
jz loc_1007EBC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
push eax  +
call sub_1009266  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 43494451h +
jz loc_1007EE1  +
push 2  +
pop eax  +
jmp loc_1007EF1  +
push esi  +
call sub_1009246  +
and dword ptr [esi] 0 +
push esi  +
call dword ptr [esi+8]  +
pop ecx  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jz loc_1007FEA  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1007FEA  +
mov ecx [ebp+arg_10] +
test ecx ecx +
jz loc_1007FEA  +
mov eax [eax] +
add eax 1804h +
cmp eax 1804h +
jnb loc_1007F38  +
push 3  +
jmp loc_1007FEC  +
mov [ecx] eax +
mov eax [ebp+arg_14] +
test eax eax +
jnz loc_1007F48  +
xor eax eax +
jmp loc_1007FED  +
mov ebx [ebp+arg_8] +
and dword ptr [eax] 0 +
push 2Ch  +
call ebx  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_1007F5F  +
inc eax  +
jmp loc_1007FED  +
push 2EFCh  +
call ebx  +
pop ecx  +
mov [ebp+var_4] eax +
mov [esi+28h] eax +
test eax eax +
jnz loc_1007F7D  +
xor edi edi +
inc edi  +
push esi  +
call [ebp+arg_C]  +
pop ecx  +
mov eax edi +
jmp loc_1007FED  +
push [ebp+arg_28]  +
mov eax [ebp+arg_C] +
push [ebp+arg_24]  +
mov edx [ebp+arg_1C] +
push [ebp+arg_20]  +
mov ecx [ebp+arg_18] +
mov [esi+8] eax +
mov eax [ebp+arg_20] +
mov [esi+14h] eax +
mov eax [ebp+arg_24] +
mov [esi+18h] eax +
mov eax [ebp+arg_28] +
push edx  +
mov [esi+1Ch] eax +
mov eax [ebp+arg_0] +
push ecx  +
push [ebp+arg_C]  +
mov [esi+4] ebx +
mov [esi+0Ch] ecx +
mov [esi+10h] edx +
mov eax [eax] +
mov [esi+20h] eax +
mov eax [edi+4] +
push ebx  +
mov [esi+24h] eax +
mov dword ptr [esi] 4349444Ch +
push dword ptr [edi]  +
push [ebp+var_4]  +
call sub_1009350  +
mov edi eax +
test edi edi +
jz loc_1007FE0  +
push dword ptr [esi+28h]  +
call [ebp+arg_C]  +
pop ecx  +
jmp loc_1007F74  +
mov eax [ebp+arg_14] +
mov [eax] esi +
jmp loc_1007F41  +
push 2  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
cmp dword ptr [eax] 4349444Ch +
jz loc_1008011  +
push 2  +
pop eax  +
leave   +
retn   +
mov edx [eax+20h] +
push esi  +
mov esi [ebp+arg_10] +
mov ecx [esi] +
cmp ecx edx +
jbe loc_1008022  +
push 3  +
jmp loc_100802F  +
add edx 1800h +
cmp [ebp+arg_8] edx +
jbe loc_1008032  +
push 4  +
pop eax  +
jmp loc_1008055  +
lea edx [ebp+var_4] +
push edx  +
push ecx  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
push dword ptr [eax+28h]  +
call sub_10092E0  +
mov ecx [ebp+var_4] +
neg eax  +
sbb eax eax +
mov [esi] ecx +
and eax 4 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 4349444Ch +
jz loc_1008072  +
push 2  +
pop eax  +
pop ebp  +
retn   +
push dword ptr [eax+28h]  +
call sub_10092B4  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 4349444Ch +
jz loc_1008099  +
push 2  +
pop eax  +
jmp loc_10080B2  +
push dword ptr [esi+28h]  +
call sub_10092A4  +
push dword ptr [esi+28h]  +
and dword ptr [esi] 0 +
call dword ptr [esi+8]  +
push esi  +
call dword ptr [esi+8]  +
pop ecx  +
pop ecx  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58Ch +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov edi 120h +
mov esi eax +
mov [ebp+var_3C] ebx +
cmp [ebp+arg_4] edi +
jbe loc_10080E1  +
push 2  +
pop eax  +
jmp loc_1008441  +
push 44h  +
lea eax [ebp+var_88] +
push ebx  +
push eax  +
call memset  +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_4] +
add esp 0Ch +
mov eax [ecx] +
lea eax [ebp+eax*4+var_88] +
inc dword ptr [eax]  +
add ecx 4 +
dec edx  +
jnz loc_10080F9  +
mov eax [ebp+arg_4] +
cmp [ebp+var_88] eax +
jnz loc_100811E  +
mov [esi] ebx +
xor eax eax +
jmp loc_1008441  +
mov eax [esi] +
xor ecx ecx +
mov [ebp+var_4] eax +
inc ecx  +
cmp [ebp+ecx*4+var_88] ebx +
jnz loc_1008135  +
inc ecx  +
cmp ecx 10h +
jbe loc_1008126  +
mov [ebp+var_8] ecx +
cmp eax ecx +
jnb loc_100813F  +
mov [ebp+var_4] ecx +
push 10h  +
pop eax  +
cmp [ebp+eax*4+var_88] ebx +
jnz loc_100814E  +
dec eax  +
jnz loc_1008142  +
mov [ebp+var_20] eax +
cmp [ebp+var_4] eax +
jbe loc_1008159  +
mov [ebp+var_4] eax +
mov edx [ebp+var_4] +
mov [esi] edx +
xor esi esi +
inc esi  +
shl esi cl +
jmp loc_1008175  +
sub esi [ebp+ecx*4+var_88] +
js loc_10080D9  +
inc ecx  +
add esi esi +
cmp ecx eax +
jb loc_1008165  +
lea ecx [ebp+eax*4+var_88] +
mov edx [ecx] +
sub esi edx +
mov [ebp+var_44] esi +
js loc_10080D9  +
add edx esi +
mov [ecx] edx +
xor ecx ecx +
dec eax  +
mov [ebp+var_C8] ebx +
jz loc_10081B2  +
xor edx edx +
add ecx [ebp+edx+var_84] +
add edx 4 +
dec eax  +
mov [ebp+edx+var_C8] ecx +
jnz loc_100819E  +
mov edx [ebp+arg_0] +
xor esi esi +
mov eax [edx] +
add edx 4 +
cmp eax ebx +
jz loc_10081E4  +
cmp eax 10h +
ja loc_10080D9  +
lea ecx [ebp+eax*4+var_CC] +
mov eax [ecx] +
cmp eax edi +
jnb loc_10080D9  +
mov [ebp+eax*4+var_58C] esi +
inc eax  +
mov [ecx] eax +
inc esi  +
cmp esi [ebp+arg_4] +
jb loc_10081B7  +
mov ebx [ebp+var_4] +
or [ebp+arg_0] 0FFFFFFFFh +
lea ecx [ebp+var_58C] +
xor eax eax +
mov [ebp+var_24] ecx +
mov ecx [ebp+var_8] +
xor edi edi +
neg ebx  +
cmp ecx [ebp+var_20] +
mov [ebp+var_18] eax +
mov [ebp+var_CC] eax +
mov [ebp+var_10C] eax +
mov [ebp+var_40] edi +
mov [ebp+var_38] eax +
jg loc_1008433  +
lea eax [ecx-1] +
mov [ebp+var_2C] eax +
lea eax [ebp+ecx*4+var_88] +
mov [ebp+var_1C] eax +
mov eax [ebp+var_1C] +
mov eax [eax] +
mov [ebp+var_14] eax +
test eax eax +
jz loc_100841B  +
inc eax  +
mov [ebp+var_34] eax +
mov eax [ebp+var_4] +
dec [ebp+var_14]  +
dec [ebp+var_34]  +
add eax ebx +
cmp [ebp+var_8] eax +
jle loc_100832A  +
mov [ebp+var_28] eax +
mov eax ebx +
sub eax [ebp+var_4] +
mov [ebp+var_30] eax +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 10h +
jge loc_10080D9  +
mov eax [ebp+var_4] +
movzx edx word ptr [ebp+var_20] +
add [ebp+var_30] eax +
add [ebp+var_28] eax +
add ebx eax +
sub edx ebx +
cmp edx eax +
jbe loc_1008289  +
movzx edx ax +
mov ecx [ebp+var_8] +
xor eax eax +
sub ecx ebx +
inc eax  +
shl eax cl +
cmp eax [ebp+var_34] +
jbe loc_10082B7  +
mov edi [ebp+var_1C] +
or esi 0FFFFFFFFh +
sub esi [ebp+var_14] +
add eax esi +
jmp loc_10082B2  +
add edi 4 +
mov esi [edi] +
add eax eax +
cmp eax esi +
jbe loc_10082B7  +
sub eax esi +
inc ecx  +
cmp ecx edx +
jb loc_10082A5  +
mov edx [ebp+var_3C] +
mov esi [ebp+arg_1C] +
xor eax eax +
inc eax  +
shl eax cl +
lea edi [esi+edx*8] +
mov [ebp+var_40] edi +
add edx eax +
mov [ebp+var_38] eax +
mov [ebp+var_3C] edx +
cmp edx [ebp+arg_20] +
ja loc_1008448  +
mov eax [ebp+arg_0] +
mov esi eax +
shl esi 2 +
lea edx [ebp+esi+var_10C] +
mov [edx] edi +
test eax eax +
jz loc_100831E  +
mov eax [ebp+var_18] +
mov [ebp+esi+var_CC] eax +
mov al byte ptr [ebp+var_4] +
add cl 10h +
mov byte ptr [ebp+var_10+1] al +
mov eax [ebp+var_18] +
mov byte ptr [ebp+var_10] cl +
mov ecx [ebp+var_30] +
shr eax cl +
mov ecx [edx-4] +
mov edx [ebp+var_10] +
mov esi edi +
mov [ecx+eax*8] edx +
mov [ebp+var_C] esi +
mov [ecx+eax*8+4] esi +
mov eax [ebp+var_28] +
cmp [ebp+var_8] eax +
jg loc_1008264  +
mov al byte ptr [ebp+var_8] +
mov ecx [ebp+var_24] +
sub al bl +
mov byte ptr [ebp+var_10+1] al +
mov eax [ebp+arg_4] +
lea eax [ebp+eax*4+var_58C] +
cmp ecx eax +
jnb loc_1008397  +
mov eax [ecx] +
mov edx [ebp+arg_8] +
cmp eax edx +
jnb loc_1008368  +
cmp eax 100h +
setb al  +
add al 0Fh +
mov byte ptr [ebp+var_10] al +
mov ax [ecx] +
add ecx 4 +
mov word ptr [ebp+var_C] ax +
mov [ebp+var_24] ecx +
jmp loc_100839B  +
mov ecx [ebp+arg_18] +
cmp [ebp+arg_10] ecx +
jnb loc_1008373  +
mov ecx [ebp+arg_10] +
add ecx edx +
cmp eax ecx +
jnb loc_1008397  +
mov ecx [ebp+arg_14] +
sub eax edx +
add eax eax +
mov cl [eax+ecx] +
add [ebp+var_24] 4 +
mov byte ptr [ebp+var_10] cl +
mov ecx [ebp+arg_C] +
mov ax [eax+ecx] +
mov word ptr [ebp+var_C] ax +
jmp loc_100839B  +
mov byte ptr [ebp+var_10] 63h +
mov ecx [ebp+var_8] +
mov esi [ebp+var_18] +
xor edx edx +
sub ecx ebx +
inc edx  +
shl edx cl +
mov eax esi +
mov ecx ebx +
shr eax cl +
cmp eax [ebp+var_38] +
jnb loc_10083D5  +
mov esi edx +
shl esi 3 +
lea ecx [edi+eax*8] +
mov edi [ebp+var_10] +
mov [ecx] edi +
mov edi [ebp+var_C] +
mov [ecx+4] edi +
add eax edx +
add ecx esi +
cmp eax [ebp+var_38] +
jb loc_10083BB  +
mov edi [ebp+var_40] +
mov esi [ebp+var_18] +
mov ecx [ebp+var_2C] +
xor eax eax +
inc eax  +
shl eax cl +
jmp loc_10083E3  +
xor esi eax +
shr eax 1 +
test eax esi +
jnz loc_10083DF  +
xor esi eax +
mov eax [ebp+arg_0] +
mov [ebp+var_18] esi +
jmp loc_10083FE  +
dec eax  +
mov [ebp+arg_0] eax +
js loc_10080D9  +
sub ebx [ebp+var_4] +
xor edx edx +
inc edx  +
mov ecx ebx +
shl edx cl +
dec edx  +
and edx esi +
cmp edx [ebp+eax*4+var_CC] +
jnz loc_10083F1  +
cmp [ebp+var_14] 0 +
jnz loc_1008245  +
inc [ebp+var_8]  +
add [ebp+var_1C] 4 +
mov eax [ebp+var_8] +
inc [ebp+var_2C]  +
cmp eax [ebp+var_20] +
jle loc_1008231  +
xor eax eax +
cmp [ebp+var_44] eax +
jz loc_1008441  +
cmp [ebp+var_20] 1 +
jz loc_1008441  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
push 3  +
jmp loc_10080DB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
sub esp 14h +
test eax eax +
jg loc_100846B  +
xor eax eax +
inc eax  +
jmp locret_10087ED  +
cmp [ebp+arg_10] 0 +
movzx eax ds:word_10021AC[eax*2] +
mov ecx [edx+24h] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_C] +
movzx eax ds:word_10021AC[eax*2] +
push ebx  +
mov ebx [edx+28h] +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov [ebp+var_8] ebx +
mov [ebp+var_10] eax +
jz loc_10084AC  +
cmp word ptr [edx+48h] 0 +
jz loc_10084AC  +
mov ecx [edx+4Ch] +
mov eax [edx+50h] +
jmp loc_1008777  +
cmp ebx [ebp+arg_8] +
jnb loc_10084E5  +
mov esi [edx+14h] +
mov ecx [edx+18h] +
cmp ecx esi +
jnb loc_10084C8  +
mov eax [edx+8] +
movzx eax byte ptr [eax+ecx] +
inc ecx  +
mov [edx+18h] ecx +
jmp loc_10084D3  +
jz loc_10084D1  +
mov dword ptr [edx+4] 1 +
xor eax eax +
movzx eax al +
mov ecx ebx +
shl eax cl +
add ebx 8 +
or [ebp+var_4] eax +
cmp ebx [ebp+arg_8] +
jb loc_10084B4  +
cmp dword ptr [edx+4] 0 +
jnz loc_10087AB  +
mov eax [ebp+var_C] +
mov ecx [ebp+arg_0] +
jmp loc_100855A  +
cmp edi 63h +
jz loc_10087AB  +
movzx ecx byte ptr [esi+1] +
movzx eax byte ptr [esi+1] +
shr [ebp+var_4] cl +
sub ebx eax +
sub edi 10h +
jmp loc_1008541  +
mov ecx [edx+18h] +
mov eax [edx+14h] +
cmp ecx eax +
jnb loc_1008529  +
mov eax [edx+8] +
movzx eax byte ptr [eax+ecx] +
inc ecx  +
mov [edx+18h] ecx +
jmp loc_1008534  +
jz loc_1008532  +
mov dword ptr [edx+4] 1 +
xor eax eax +
movzx eax al +
mov ecx ebx +
shl eax cl +
or [ebp+var_4] eax +
add ebx 8 +
cmp ebx edi +
jb loc_1008512  +
cmp dword ptr [edx+4] 0 +
jnz loc_10087AB  +
movzx eax ds:word_10021AC[edi*2] +
mov ecx [esi+4] +
and eax [ebp+var_4] +
lea esi [ecx+eax*8] +
movzx edi byte ptr [esi] +
cmp edi 10h +
ja loc_10084F7  +
movzx ecx byte ptr [esi+1] +
movzx eax byte ptr [esi+1] +
shr [ebp+var_4] cl +
sub ebx eax +
cmp edi 10h +
jnz loc_10085B1  +
mov cl [esi+4] +
mov eax [edx+0Ch] +
mov [eax] cl +
inc dword ptr [edx+0Ch]  +
dec dword ptr [edx+1Ch]  +
jnz loc_10084AC  +
xor eax eax +
mov [edx+48h] ax +
mov eax [ebp+arg_0] +
mov [edx+38h] eax +
mov eax [ebp+arg_4] +
mov [edx+3Ch] eax +
mov eax [ebp+arg_8] +
mov [edx+40h] eax +
mov eax [ebp+arg_C] +
mov [edx+44h] eax +
jmp loc_10087D8  +
cmp edi 0Fh +
jz loc_10087DF  +
jmp loc_10085EB  +
mov ecx [edx+18h] +
mov eax [edx+14h] +
cmp ecx eax +
jnb loc_10085D3  +
mov eax [edx+8] +
movzx eax byte ptr [eax+ecx] +
inc ecx  +
mov [edx+18h] ecx +
jmp loc_10085DE  +
jz loc_10085DC  +
mov dword ptr [edx+4] 1 +
xor eax eax +
movzx eax al +
mov ecx ebx +
shl eax cl +
or [ebp+var_4] eax +
add ebx 8 +
cmp ebx edi +
jb loc_10085BC  +
cmp dword ptr [edx+4] 0 +
jnz loc_10087AB  +
movzx eax ds:word_10021AC[edi*2] +
and eax [ebp+var_4] +
movzx ecx word ptr [esi+4] +
add eax ecx +
mov ecx edi +
shr [ebp+var_4] cl +
sub ebx edi +
cmp [ebp+arg_C] 0 +
mov [ebp+var_14] eax +
mov [ebp+var_8] ebx +
jle loc_10087AB  +
cmp ebx [ebp+arg_C] +
jnb loc_1008666  +
mov esi [edx+14h] +
mov ecx [edx+18h] +
cmp ecx esi +
jnb loc_1008643  +
mov edi [edx+8] +
movzx edi byte ptr [edi+ecx] +
mov ebx [ebp+var_8] +
inc ecx  +
mov dword ptr [ebp+arg_10] edi +
mov [edx+18h] ecx +
jmp loc_1008650  +
jz loc_100864C  +
mov dword ptr [edx+4] 1 +
and dword ptr [ebp+arg_10] 0 +
movzx edi byte ptr [ebp+arg_10] +
mov ecx ebx +
shl edi cl +
add ebx 8 +
mov [ebp+var_8] ebx +
or [ebp+var_4] edi +
cmp ebx [ebp+arg_C] +
jb loc_1008629  +
cmp dword ptr [edx+4] 0 +
jnz loc_10087AB  +
mov ecx [ebp+var_10] +
and ecx [ebp+var_4] +
mov esi [ebp+arg_4] +
lea ebx [esi+ecx*8] +
movzx edi byte ptr [ebx] +
cmp edi 10h +
jbe loc_10086FB  +
cmp edi 63h +
jz loc_10087AB  +
movzx ecx byte ptr [ebx+1] +
sub [ebp+var_8] ecx +
shr [ebp+var_4] cl +
sub edi 10h +
cmp [ebp+var_8] edi +
jnb loc_10086D5  +
mov eax [edx+14h] +
mov esi [edx+18h] +
cmp esi eax +
jnb loc_10086B6  +
mov ecx [edx+8] +
movzx ecx byte ptr [ecx+esi] +
inc esi  +
mov [edx+18h] esi +
jmp loc_10086C1  +
jz loc_10086BF  +
mov dword ptr [edx+4] 1 +
xor ecx ecx +
movzx esi cl +
mov ecx [ebp+var_8] +
add [ebp+var_8] 8 +
shl esi cl +
or [ebp+var_4] esi +
cmp [ebp+var_8] edi +
jb loc_10086A2  +
cmp dword ptr [edx+4] 0 +
jnz loc_10087AB  +
movzx eax ds:word_10021AC[edi*2] +
and eax [ebp+var_4] +
mov ecx [ebx+4] +
lea ebx [ecx+eax*8] +
movzx edi byte ptr [ebx] +
cmp edi 10h +
ja loc_1008684  +
mov eax [ebp+var_14] +
movzx ecx byte ptr [ebx+1] +
shr [ebp+var_4] cl +
movzx ecx byte ptr [ebx+1] +
sub [ebp+var_8] ecx +
jmp loc_100873C  +
mov esi [edx+18h] +
mov ecx [edx+14h] +
cmp esi ecx +
jnb loc_1008722  +
mov ecx [edx+8] +
movzx ecx byte ptr [ecx+esi] +
inc esi  +
mov [edx+18h] esi +
jmp loc_100872D  +
jz loc_100872B  +
mov dword ptr [edx+4] 1 +
xor ecx ecx +
movzx esi cl +
mov ecx [ebp+var_8] +
shl esi cl +
or [ebp+var_4] esi +
add [ebp+var_8] 8 +
cmp [ebp+var_8] edi +
jb loc_100870B  +
cmp dword ptr [edx+4] 0 +
jnz loc_10087AB  +
movzx esi ds:word_10021AC[edi*2] +
movzx ecx word ptr [ebx+4] +
and esi [ebp+var_4] +
sub [ebp+var_8] edi +
mov ebx [ebp+var_8] +
add esi ecx +
mov ecx edi +
shr [ebp+var_4] cl +
mov ecx [edx+0Ch] +
mov edi ecx +
sub edi [edx+10h] +
sub ecx esi +
cmp esi edi +
jbe loc_1008777  +
add ecx 8000h +
test eax eax +
jz loc_10084AC  +
mov esi [edx+0Ch] +
mov bl [ecx] +
dec eax  +
mov [esi] bl +
inc dword ptr [edx+0Ch]  +
mov esi [edx+10h] +
inc ecx  +
lea edi [esi+8000h] +
cmp ecx edi +
jnz loc_100879A  +
mov ecx esi +
dec dword ptr [edx+1Ch]  +
jz loc_10087B0  +
test eax eax +
jnz loc_100877F  +
mov ebx [ebp+var_8] +
jmp loc_10084AC  +
xor eax eax +
inc eax  +
jmp loc_10087EA  +
mov ebx [ebp+var_8] +
xor esi esi +
inc esi  +
mov [edx+48h] si +
mov esi [ebp+arg_0] +
mov [edx+38h] esi +
mov esi [ebp+arg_4] +
mov [edx+3Ch] esi +
mov esi [ebp+arg_8] +
mov [edx+40h] esi +
mov esi [ebp+arg_C] +
mov [edx+44h] esi +
mov [edx+4Ch] ecx +
mov [edx+50h] eax +
mov dword ptr [edx+2Ch] 2 +
mov eax [ebp+var_4] +
mov [edx+24h] eax +
mov [edx+28h] ebx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 510h +
push ebx  +
mov ebx [esi+28h] +
push edi  +
mov edi [esi+24h] +
push 5  +
pop edx  +
jmp loc_100883C  +
mov eax [esi+18h] +
mov ecx [esi+14h] +
cmp eax ecx +
jnb loc_1008825  +
mov ecx [esi+8] +
movzx ecx byte ptr [ecx+eax] +
inc eax  +
mov [esi+18h] eax +
jmp loc_1008830  +
jz loc_100882E  +
mov dword ptr [esi+4] 1 +
xor ecx ecx +
movzx eax cl +
mov ecx ebx +
shl eax cl +
or edi eax +
add ebx 8 +
cmp ebx edx +
jb loc_100880E  +
mov eax edi +
and eax 1Fh +
add eax 101h +
sub ebx edx +
shr edi 5 +
mov [ebp+var_14] eax +
cmp ebx edx +
jnb loc_1008889  +
mov edx [esi+14h] +
mov eax [esi+18h] +
cmp eax edx +
jnb loc_100886D  +
mov ecx [esi+8] +
movzx ecx byte ptr [ecx+eax] +
inc eax  +
mov [esi+18h] eax +
jmp loc_1008878  +
jz loc_1008876  +
mov dword ptr [esi+4] 1 +
xor ecx ecx +
movzx eax cl +
mov ecx ebx +
shl eax cl +
add ebx 8 +
or edi eax +
cmp ebx 5 +
jb loc_1008859  +
mov edx edi +
and edx 1Fh +
inc edx  +
shr edi 5 +
mov [ebp+var_1C] edx +
sub ebx 5 +
jmp loc_10088C8  +
mov eax [esi+18h] +
mov ecx [esi+14h] +
cmp eax ecx +
jnb loc_10088B1  +
mov ecx [esi+8] +
movzx ecx byte ptr [ecx+eax] +
inc eax  +
mov [esi+18h] eax +
jmp loc_10088BC  +
jz loc_10088BA  +
mov dword ptr [esi+4] 1 +
xor ecx ecx +
movzx eax cl +
mov ecx ebx +
shl eax cl +
or edi eax +
add ebx 8 +
cmp ebx 4 +
jb loc_100889A  +
mov eax edi +
and eax 0Fh +
shr edi 4 +
add eax 4 +
sub ebx 4 +
cmp dword ptr [esi+4] 0 +
mov [ebp+var_4] edi +
jnz loc_1008C53  +
cmp [ebp+var_14] 11Eh +
ja loc_1008C53  +
cmp edx 1Eh +
ja loc_1008C53  +
xor edx edx +
test eax eax +
ja loc_10089D6  +
mov eax ds:dword_1002068[edx*4] +
and [ebp+eax*4+var_510] 0 +
inc edx  +
cmp edx 13h +
jb loc_1008908  +
cmp dword ptr [esi+4] 0 +
jnz loc_1008C53  +
push 384h  +
lea eax [esi+54h] +
push eax  +
xor edi edi +
push edi  +
push edi  +
push edi  +
push edi  +
push 13h  +
push 13h  +
lea eax [ebp+var_510] +
push eax  +
lea eax [ebp+var_10] +
mov [ebp+var_10] 7 +
call sub_10080BA  +
cmp eax edi +
jnz loc_1008C56  +
mov ecx [ebp+var_10] +
cmp ecx edi +
jle loc_1008C53  +
mov eax [ebp+var_1C] +
mov edx [ebp+var_14] +
movzx ecx ds:word_10021AC[ecx*2] +
add eax edx +
mov [ebp+var_C] eax +
mov [ebp+var_20] ecx +
mov [ebp+var_18] edi +
mov [ebp+var_8] edi +
cmp eax edi +
jbe loc_1008BB9  +
cmp ebx [ebp+var_10] +
jnb loc_1008A21  +
mov edx [esi+14h] +
mov eax [esi+18h] +
cmp eax edx +
jnb loc_1008A00  +
mov ecx [esi+8] +
movzx ecx byte ptr [ecx+eax] +
inc eax  +
mov [esi+18h] eax +
jmp loc_1008A0B  +
mov edi [esi+18h] +
mov ecx [esi+14h] +
cmp edi ecx +
jnb loc_10089BE  +
mov ecx [esi+8] +
movzx ecx byte ptr [ecx+edi] +
inc edi  +
mov [esi+18h] edi +
jmp loc_10089C9  +
jz loc_10089C7  +
mov dword ptr [esi+4] 1 +
xor ecx ecx +
movzx edi cl +
mov ecx ebx +
shl edi cl +
or [ebp+var_4] edi +
add ebx 8 +
cmp ebx 3 +
jb loc_10089A7  +
mov ecx [ebp+var_4] +
mov edi ds:dword_1002068[edx*4] +
shr [ebp+var_4] 3 +
and ecx 7 +
sub ebx 3 +
inc edx  +
mov [ebp+edi*4+var_510] ecx +
cmp edx eax +
jb loc_10089D6  +
jmp loc_1008918  +
jz loc_1008A09  +
mov dword ptr [esi+4] 1 +
xor ecx ecx +
movzx eax cl +
mov ecx ebx +
shl eax cl +
add ebx 8 +
or [ebp+var_4] eax +
cmp ebx [ebp+var_10] +
jb loc_1008993  +
cmp dword ptr [esi+4] 0 +
jnz loc_1008C53  +
mov eax [ebp+var_20] +
and eax [ebp+var_4] +
lea edx [esi+eax*8+54h] +
movzx ecx byte ptr [edx+1] +
shr [ebp+var_4] cl +
sub ebx ecx +
movzx ecx word ptr [edx+4] +
cmp ecx 10h +
jnb loc_1008A57  +
mov eax [ebp+var_8] +
mov [ebp+eax*4+var_510] ecx +
mov [ebp+var_18] ecx +
inc eax  +
jmp loc_1008AD0  +
jnz loc_1008AD8  +
cmp ebx 2 +
jnb loc_1008A92  +
mov edx [esi+14h] +
mov eax [esi+18h] +
cmp eax edx +
jnb loc_1008A75  +
mov ecx [esi+8] +
movzx ecx byte ptr [ecx+eax] +
inc eax  +
mov [esi+18h] eax +
jmp loc_1008A80  +
jz loc_1008A7E  +
mov dword ptr [esi+4] 1 +
xor ecx ecx +
movzx eax cl +
mov ecx ebx +
shl eax cl +
add ebx 8 +
or [ebp+var_4] eax +
cmp ebx 2 +
jb loc_1008A61  +
cmp dword ptr [esi+4] 0 +
jnz loc_1008C53  +
mov ecx [ebp+var_4] +
shr [ebp+var_4] 2 +
mov eax [ebp+var_8] +
and ecx 3 +
add ecx 3 +
dec ebx  +
lea edx [eax+ecx] +
dec ebx  +
cmp edx [ebp+var_C] +
ja loc_1008BB2  +
test ecx ecx +
jz loc_1008BA7  +
lea edi [ebp+eax*4+var_510] +
mov eax [ebp+var_18] +
stos   +
mov eax edx +
mov [ebp+var_8] eax +
jmp loc_1008BA7  +
cmp ecx 11h +
jnz loc_1008B31  +
push 3  +
pop edi  +
cmp ebx edi +
jnb loc_1008B17  +
mov edx [esi+14h] +
mov eax [esi+18h] +
cmp eax edx +
jnb loc_1008AFB  +
mov ecx [esi+8] +
movzx ecx byte ptr [ecx+eax] +
inc eax  +
mov [esi+18h] eax +
jmp loc_1008B06  +
jz loc_1008B04  +
mov dword ptr [esi+4] 1 +
xor ecx ecx +
movzx eax cl +
mov ecx ebx +
shl eax cl +
add ebx 8 +
or [ebp+var_4] eax +
cmp ebx edi +
jb loc_1008AE7  +
cmp dword ptr [esi+4] 0 +
jnz loc_1008C53  +
mov ecx [ebp+var_4] +
shr [ebp+var_4] 3 +
and ecx 7 +
add ecx edi +
sub ebx edi +
jmp loc_1008B84  +
cmp ebx 7 +
jnb loc_1008B6A  +
mov edx [esi+14h] +
mov eax [esi+18h] +
cmp eax edx +
jnb loc_1008B4D  +
mov ecx [esi+8] +
movzx ecx byte ptr [ecx+eax] +
inc eax  +
mov [esi+18h] eax +
jmp loc_1008B58  +
jz loc_1008B56  +
mov dword ptr [esi+4] 1 +
xor ecx ecx +
movzx eax cl +
mov ecx ebx +
shl eax cl +
add ebx 8 +
or [ebp+var_4] eax +
cmp ebx 7 +
jb loc_1008B39  +
cmp dword ptr [esi+4] 0 +
jnz loc_1008C53  +
mov ecx [ebp+var_4] +
shr [ebp+var_4] 7 +
and ecx 7Fh +
add ecx 0Bh +
sub ebx 7 +
mov eax [ebp+var_8] +
lea edx [eax+ecx] +
cmp edx [ebp+var_C] +
ja loc_1008BB2  +
test ecx ecx +
jz loc_1008BA3  +
lea edi [ebp+eax*4+var_510] +
xor eax eax +
stos   +
mov eax edx +
mov [ebp+var_8] eax +
and [ebp+var_18] 0 +
cmp eax [ebp+var_C] +
jb loc_1008987  +
jmp loc_1008BB9  +
mov dword ptr [esi+4] 2 +
cmp dword ptr [esi+4] 0 +
jnz loc_1008C53  +
mov eax [ebp+var_4] +
push 384h  +
lea edi [esi+54h] +
push edi  +
push 1Fh  +
push offset dword_10020F4  +
push 1Fh  +
push offset dword_10020B4  +
push 101h  +
push [ebp+var_14]  +
mov [esi+24h] eax +
lea eax [ebp+var_510] +
push eax  +
lea eax [ebp+var_10] +
mov [esi+28h] ebx +
mov [ebp+var_10] 9 +
call sub_10080BA  +
test eax eax +
jnz loc_1008C56  +
push 0C8h  +
lea ebx [esi+1C74h] +
push ebx  +
push 1Eh  +
push offset dword_1002170  +
push 1Eh  +
push offset dword_1002134  +
push eax  +
push [ebp+var_1C]  +
mov eax [ebp+var_14] +
lea eax [ebp+eax*4+var_510] +
push eax  +
lea eax [ebp+var_C] +
mov [ebp+var_C] 6 +
call sub_10080BA  +
test eax eax +
jnz loc_1008C56  +
push eax  +
push [ebp+var_C]  +
mov edx esi +
push [ebp+var_10]  +
push ebx  +
push edi  +
call sub_1008454  +
jmp loc_1008C56  +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 484h +
push edi  +
push 8  +
pop eax  +
push 70h  +
mov ecx 90h +
lea edi [ebp+var_484] +
stos   +
pop ecx  +
push 9  +
pop edx  +
push 18h  +
mov eax edx +
lea edi [ebp+var_244] +
stos   +
pop ecx  +
push 7  +
pop eax  +
push 8  +
lea edi [ebp+var_84] +
stos   +
pop ecx  +
push ecx  +
pop eax  +
push 208h  +
push offset unk_100D7B8  +
push 1Fh  +
push offset dword_10020F4  +
push 1Fh  +
push offset dword_10020B4  +
push 101h  +
lea edi [ebp+var_24] +
stos   +
push 120h  +
lea eax [ebp+var_484] +
push eax  +
lea eax [ebp+var_4] +
mov [ebp+var_4] edx +
call sub_10080BA  +
test eax eax +
jnz loc_1008D1A  +
push 1Eh  +
pop edx  +
push 5  +
pop eax  +
push 20h  +
push offset unk_100D6B8  +
push edx  +
push offset dword_1002170  +
push edx  +
push offset dword_1002134  +
mov ecx edx +
push 0  +
lea edi [ebp+var_484] +
stos   +
mov [ebp+var_4] eax +
push edx  +
lea eax [ebp+var_484] +
push eax  +
lea eax [ebp+var_4] +
call sub_10080BA  +
cmp eax 1 +
jg loc_1008D1A  +
xor eax eax +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push edi  +
jz loc_1008D3F  +
mov ebx [esi+34h] +
mov edi [esi+30h] +
and dword ptr [esi+2Ch] 0 +
jmp loc_1008DEE  +
mov ebx [esi+28h] +
mov eax [esi+24h] +
mov ecx ebx +
and ecx 7 +
push 10h  +
shr eax cl +
sub ebx ecx +
pop edx  +
jmp loc_1008D81  +
mov edi [esi+18h] +
mov ecx [esi+14h] +
cmp edi ecx +
jnb loc_1008D6A  +
mov ecx [esi+8] +
movzx ecx byte ptr [ecx+edi] +
inc edi  +
mov [esi+18h] edi +
jmp loc_1008D75  +
jz loc_1008D73  +
mov dword ptr [esi+4] 1 +
xor ecx ecx +
movzx edi cl +
mov ecx ebx +
shl edi cl +
or eax edi +
add ebx 8 +
cmp ebx edx +
jb loc_1008D53  +
movzx edi ax +
sub ebx edx +
shr eax 10h +
cmp ebx edx +
jnb loc_1008DC4  +
mov ecx [esi+18h] +
mov edx [esi+14h] +
cmp ecx edx +
jnb loc_1008DA8  +
mov edx [esi+8] +
movzx edx byte ptr [edx+ecx] +
inc ecx  +
mov [esi+18h] ecx +
jmp loc_1008DB3  +
jz loc_1008DB1  +
mov dword ptr [esi+4] 1 +
xor edx edx +
movzx edx dl +
mov ecx ebx +
shl edx cl +
add ebx 8 +
or eax edx +
cmp ebx 10h +
jb loc_1008D91  +
not eax  +
and eax 0FFFFh +
cmp edi eax +
jnz loc_1008E38  +
xor eax eax +
cmp [esi+4] eax +
jnz loc_1008E38  +
add ebx 0FFFFFFF0h +
jnz loc_1008E38  +
mov ebx [esi+8] +
mov [esi+28h] eax +
mov [esi+24h] eax +
mov eax [esi+18h] +
add ebx eax +
add eax edi +
mov [esi+18h] eax +
mov eax [esi+1Ch] +
cmp edi eax +
ja loc_1008E0C  +
push edi  +
push ebx  +
push dword ptr [esi+0Ch]  +
sub eax edi +
mov [esi+1Ch] eax +
call memcpy  +
add esp 0Ch +
add [esi+0Ch] edi +
jmp loc_1008E34  +
push eax  +
push ebx  +
push dword ptr [esi+0Ch]  +
call memcpy  +
mov eax [esi+1Ch] +
add [esi+0Ch] eax +
sub edi eax +
add eax ebx +
add esp 0Ch +
and dword ptr [esi+1Ch] 0 +
mov dword ptr [esi+2Ch] 1 +
mov [esi+30h] edi +
mov [esi+34h] eax +
xor eax eax +
jmp loc_1008E3B  +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi eax +
mov ecx [esi+28h] +
xor eax eax +
push edi  +
mov edi [esi+24h] +
inc eax  +
jmp loc_1008E80  +
mov edx [esi+18h] +
mov ebx [esi+14h] +
cmp edx ebx +
jnb loc_1008E6F  +
mov ebx [esi+8] +
movzx ebx byte ptr [ebx+edx] +
inc edx  +
mov [esi+18h] edx +
jmp loc_1008E76  +
jz loc_1008E74  +
mov [esi+4] eax +
xor ebx ebx +
movzx edx bl +
shl edx cl +
or edi edx +
add ecx 8 +
cmp ecx eax +
jb loc_1008E58  +
mov edx edi +
and edx eax +
shr edi 1 +
mov [esi] edx +
dec ecx  +
jmp loc_1008EB7  +
mov edx [esi+18h] +
mov ebx [esi+14h] +
cmp edx ebx +
jnb loc_1008EA6  +
mov ebx [esi+8] +
movzx ebx byte ptr [ebx+edx] +
inc edx  +
mov [esi+18h] edx +
jmp loc_1008EAD  +
jz loc_1008EAB  +
mov [esi+4] eax +
xor ebx ebx +
movzx edx bl +
shl edx cl +
or edi edx +
add ecx 8 +
cmp ecx 2 +
jb loc_1008E8F  +
add ecx 0FFFFFFFEh +
mov edx edi +
mov [esi+28h] ecx +
shr edx 2 +
xor ecx ecx +
mov [esi+24h] edx +
cmp [esi+4] ecx +
jnz loc_1008F08  +
and edi 3 +
sub edi ecx +
jz loc_1008F02  +
dec edi  +
jz loc_1008EEA  +
dec edi  +
jz loc_1008EE3  +
push 2  +
pop eax  +
jmp loc_1008F08  +
call sub_10087F6  +
jmp loc_1008F08  +
push ecx  +
push 5  +
push 9  +
push offset unk_100D6B8  +
push offset unk_100D7B8  +
mov edx esi +
call sub_1008454  +
jmp loc_1008F08  +
push ecx  +
call sub_1008D22  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp byte ptr [eax] 43h +
jnz loc_1008F5C  +
cmp byte ptr [eax+1] 4Bh +
jnz loc_1008F5C  +
lea ecx [eax+2] +
mov eax [ebp+arg_0] +
mov [eax+8] ecx +
mov ecx [ebp+arg_8] +
add ecx 0FFFFFFFEh +
mov [eax+14h] ecx +
mov ecx [ebp+arg_C] +
xor edx edx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov ecx [ebp+arg_10] +
mov [eax+18h] edx +
mov [eax+28h] edx +
mov [eax+24h] edx +
mov [eax+20h] ecx +
mov [eax] edx +
mov [eax+4] edx +
mov [eax+2Ch] edx +
xor eax eax +
jmp loc_1008F5F  +
push 3  +
pop eax  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
mov eax [edx] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi+20h] +
push edi  +
mov [esi+1Ch] eax +
cmp eax ecx +
jbe loc_1008F85  +
mov [esi+1Ch] ecx +
mov edi [esi+1Ch] +
xor ebx ebx +
cmp edi ebx +
jbe loc_1008FDB  +
mov eax [esi+2Ch] +
sub eax ebx +
jz loc_1008FD7  +
dec eax  +
jz loc_1008FBE  +
dec eax  +
jz loc_1008FA7  +
dec eax  +
jz loc_1008FA3  +
push 3  +
pop eax  +
jmp loc_1008FE9  +
mov [edx] ebx +
jmp loc_1008FE7  +
push 1  +
push dword ptr [esi+44h]  +
mov edx esi +
push dword ptr [esi+40h]  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+38h]  +
call sub_1008454  +
jmp loc_1008FD7  +
push 1  +
call sub_1008D22  +
jmp loc_1008FD7  +
cmp [esi+1Ch] ebx +
jbe loc_1008FDB  +
mov eax esi +
call sub_1008E46  +
cmp eax ebx +
jnz loc_1008FF0  +
cmp [esi] ebx +
jz loc_1008FC7  +
sub di [esi+1Ch] +
mov ecx [ebp+arg_4] +
movzx eax di +
mov [ecx] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
xor ecx ecx +
cmp eax 3 +
setnz cl  +
inc ecx  +
inc ecx  +
mov eax ecx +
jmp loc_1008FE9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi 22B4h +
push esi  +
call [ebp+arg_0]  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_100903E  +
push esi  +
push 0  +
push edi  +
call memset  +
add esp 0Ch +
cmp dword_100E7F8 0 +
jnz loc_100903E  +
call sub_1008C5F  +
mov dword_100E7F8 1 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call [ebp+arg_4]  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
xor eax eax +
inc eax  +
mov cl bl +
shl eax cl +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi+150h] 0 +
and dword ptr [esi+16Ch] 0 +
lea ecx [eax-1] +
push eax  +
mov [esi+158h] eax +
mov [esi+154h] ecx +
mov [esi+168h] bl +
call dword ptr [esi+4]  +
pop ecx  +
mov [esi+144h] eax +
test eax eax +
jz loc_10090C5  +
mov ecx [esi+158h] +
push ebx  +
add ecx eax +
push esi  +
mov [esi+14Ch] eax +
mov [esi+148h] ecx +
call sub_10093DA  +
xor eax eax +
jmp loc_10090C8  +
xor eax eax +
inc eax  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx edx word ptr [ecx+15Ch] +
push esi  +
push edi  +
movsx edi [ebp+arg_0] +
movzx eax dx +
cmp eax edi +
jb loc_1009167  +
mov esi [ecx+150h] +
sub edx dword ptr [ebp+arg_0] +
mov eax esi +
sub eax [ebp+arg_4] +
mov [ecx+15Ch] dx +
and eax [ecx+154h] +
add eax [ecx+144h] +
add esi edi +
mov [ecx+150h] esi +
jmp loc_100915E  +
dec [ebp+arg_0]  +
mov dl [eax] +
mov esi [ecx+14Ch] +
mov [esi] dl +
mov esi [ecx+160h] +
mov [esi] dl +
inc dword ptr [ecx+160h]  +
mov edx [ecx+148h] +
inc eax  +
cmp eax edx +
jnz loc_1009144  +
mov eax [ecx+144h] +
inc dword ptr [ecx+14Ch]  +
cmp [ecx+14Ch] edx +
jnz loc_100915E  +
mov edx [ecx+144h] +
mov [ecx+14Ch] edx +
cmp [ebp+arg_0] 0 +
jnz loc_1009117  +
jmp loc_100917A  +
xor eax eax +
mov [ecx+15Ch] ax +
mov dword ptr [ecx+164h] 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax 0FFFFh +
add [ecx+15Ch] ax +
inc dword ptr [ecx+150h]  +
lea eax [ecx+160h] +
push esi  +
mov esi [eax] +
mov [esi] dl +
inc dword ptr [eax]  +
lea eax [ecx+14Ch] +
mov esi [eax] +
mov [esi] dl +
inc dword ptr [eax]  +
mov edx [eax] +
pop esi  +
cmp edx [ecx+148h] +
jnz locret_10091C3  +
mov ecx [ecx+144h] +
mov [eax] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ax [ebp+arg_10] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi+15Ch] ax +
mov eax [ebp+arg_C] +
mov [esi+160h] eax +
mov eax [ebp+arg_4] +
push edi  +
xor edi edi +
mov [esi+24h] eax +
mov eax [ebp+arg_8] +
push esi  +
mov [esi+164h] edi +
mov [esi+20h] eax +
mov [esi+1Ch] edi +
call sub_1009C47  +
jmp loc_1009211  +
cmp [esi+1Ch] edi +
jnz loc_100921A  +
push esi  +
call sub_1009672  +
cmp [esi+15Ch] di +
jnz loc_1009206  +
call nullsub_1  +
cmp [esi+1Ch] edi +
jnz loc_1009238  +
cmp [esi+164h] edi +
jnz loc_1009238  +
cmp [esi+16Ch] edi +
jnz loc_1009238  +
xor eax eax +
jmp loc_100923B  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+144h]  +
call dword ptr [eax+8]  +
pop ecx  +
call nullsub_1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call nullsub_1  +
mov eax [ebp+arg_0] +
mov ecx [eax+144h] +
and dword ptr [eax+150h] 0 +
and dword ptr [eax+16Ch] 0 +
mov [eax+14Ch] ecx +
movzx ecx byte ptr [eax+168h] +
push ecx  +
push eax  +
call sub_10093DA  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1009F10  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_1009F34  +
push esi  +
call sub_1009FBD  +
push esi  +
call sub_100A00C  +
and dword ptr [esi+2ECCh] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi+2B04h] eax +
lea eax [eax+ecx+4] +
mov [esi+2B08h] eax +
mov eax [ebp+arg_10] +
push esi  +
mov [esi+2B0Ch] eax +
call sub_100A3B0  +
push [ebp+arg_4]  +
push esi  +
call sub_100A105  +
lea ecx [esi+2ECCh] +
mov edx [ecx] +
cmp edx 8000h +
jnb loc_100932A  +
inc edx  +
mov [ecx] edx +
test eax eax +
jge loc_1009339  +
mov eax [ebp+arg_18] +
and dword ptr [eax] 0 +
xor eax eax +
inc eax  +
jmp loc_1009346  +
mov ecx [ebp+arg_18] +
mov [ecx] eax +
add [esi+2B10h] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi+2EE0h] eax +
mov eax [ebp+arg_C] +
mov [esi+2EE4h] eax +
mov eax [ebp+arg_10] +
mov [esi+2EE8h] eax +
mov eax [ebp+arg_14] +
mov [esi+2EECh] eax +
mov eax [ebp+arg_18] +
mov [esi+2EF0h] eax +
mov eax [ebp+arg_1C] +
mov [esi+2EF4h] eax +
mov eax [ebp+arg_20] +
mov [esi+2EF8h] eax +
mov eax [ebp+arg_4] +
lea ecx [eax-1] +
mov [esi+4] eax +
mov [esi+8] ecx +
test ecx eax +
jnz loc_10093CD  +
cmp eax 8000h +
jb loc_10093CD  +
cmp eax 200000h +
ja loc_10093CD  +
push esi  +
call sub_1009EB1  +
test eax eax +
jnz loc_10093C3  +
inc eax  +
jmp loc_10093D0  +
push esi  +
call sub_10092B4  +
xor eax eax +
jmp loc_10093D0  +
push 5  +
pop eax  +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov cl [ebp+arg_4] +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
inc ebx  +
shl ebx cl +
and [ebp+var_4] 0 +
push edi  +
push 4  +
mov [ebp+var_8] ebx +
mov dword ptr [ebp+arg_4] offset dword_10022D8 +
lea esi [eax+28h] +
pop edx  +
mov ecx [ebp+var_4] +
mov [esi] ecx +
mov ecx dword ptr [ebp+arg_4] +
mov ecx [ecx] +
xor edi edi +
inc edi  +
shl edi cl +
test edi edi +
jle loc_1009419  +
add [ebp+var_4] edi +
add dword ptr [ebp+arg_4] edx +
add esi edx +
cmp dword ptr [ebp+arg_4] offset dword_1002344 +
jl loc_1009403  +
xor ecx ecx +
xor edi edi +
inc ecx  +
mov [ebp+arg_0] ecx +
mov dword ptr [ebp+arg_4] offset dword_1002348 +
lea esi [eax+94h] +
mov [ebp+var_4] 2Ah +
jmp loc_1009448  +
mov ebx [ebp+var_8] +
cmp edi ebx +
jge loc_100946E  +
cmp edi 1000h +
mov [eax+0DD0h] ecx +
jge loc_1009460  +
mov [eax+0FE0h] ecx +
cmp edi 40000h +
jge loc_100946E  +
mov [eax+11F0h] ecx +
mov ecx dword ptr [ebp+arg_4] +
add dword ptr [ebp+arg_4] edx +
xor ebx ebx +
mov [esi] edi +
mov ecx [ecx] +
inc ebx  +
shl ebx cl +
mov ecx [ebp+arg_0] +
add esi edx +
add edi ebx +
inc ecx  +
dec [ebp+var_4]  +
mov [ebp+arg_0] ecx +
jnz loc_1009445  +
push 7  +
pop edi  +
mov [eax+170h] edi +
mov [eax+174h] edx +
xor esi esi +
lea ecx [eax+17Ch] +
mov ebx edi +
sub ebx esi +
mov [ecx] esi +
mov [ecx-4] ebx +
inc esi  +
add ecx 8 +
cmp esi edi +
jle loc_10094A4  +
push 40h  +
pop esi  +
mov [eax+9B0h] esi +
mov [eax+7A0h] esi +
mov [eax+590h] esi +
mov [eax+380h] esi +
mov [eax+9B4h] edx +
mov [eax+7A4h] edx +
mov [eax+594h] edx +
mov [eax+384h] edx +
xor edi edi +
lea ecx [eax+598h] +
mov ebx esi +
sub ebx edi +
mov [ecx-20Ch] edi +
mov [ecx+4] edi +
mov [ecx+214h] edi +
mov [ecx+424h] edi +
mov [ecx-210h] ebx +
mov [ecx] ebx +
mov [ecx+210h] ebx +
mov [ecx+420h] ebx +
inc edi  +
add ecx 8 +
cmp edi esi +
jle loc_10094F0  +
push 1Bh  +
pop edi  +
mov [eax+0BC0h] edi +
mov [eax+0BC4h] edx +
xor esi esi +
lea ecx [eax+0BCCh] +
mov ebx edi +
sub ebx esi +
mov [ecx] esi +
mov [ecx-4] ebx +
inc esi  +
add ecx 8 +
cmp esi edi +
jle loc_100953C  +
mov [eax+0DD4h] edx +
mov [eax+0FE4h] edx +
mov [eax+11F4h] edx +
xor edx edx +
lea ecx [eax+0FE8h] +
mov esi [eax+0DD0h] +
sub esi edx +
mov [ecx-210h] esi +
mov esi [eax+0FE0h] +
sub esi edx +
mov [ecx] esi +
mov esi [eax+11F0h] +
sub esi edx +
mov [ecx-20Ch] edx +
mov [ecx+4] edx +
mov [ecx+214h] edx +
mov [ecx+210h] esi +
inc edx  +
add ecx 8 +
cmp edx 2Ah +
jle loc_1009567  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 0Ch +
dec dword ptr [eax+4]  +
push esi  +
mov esi [eax] +
push edi  +
lea edx [eax+8] +
jnz loc_1009664  +
xor ecx ecx +
mov dword ptr [eax+4] 32h +
test esi esi +
jle loc_100964D  +
lea eax [edx+ecx*8] +
mov edi [eax] +
sub edi [edx+ecx*8+8] +
inc edi  +
shr edi 1 +
inc ecx  +
cmp ecx esi +
mov [eax] edi +
jl loc_10095D9  +
test esi esi +
jle loc_100964D  +
mov [ebp+arg_0] 1 +
mov eax edx +
mov [ebp+var_4] esi +
push ebx  +
cmp [ebp+arg_0] esi +
jge loc_1009636  +
mov edi esi +
sub edi [ebp+arg_0] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp ebx [eax] +
jbe loc_1009630  +
mov ebx [eax] +
mov [ebp+var_C] ebx +
mov ebx [eax+4] +
mov [ebp+var_8] ebx +
mov ebx [ecx] +
mov [eax] ebx +
mov ebx [ecx+4] +
mov [eax+4] ebx +
mov ebx [ebp+var_C] +
mov [ecx] ebx +
mov ebx [ebp+var_8] +
mov [ecx+4] ebx +
add ecx 8 +
dec edi  +
jnz loc_100960A  +
inc [ebp+arg_0]  +
add eax 8 +
dec [ebp+var_4]  +
jnz loc_10095FD  +
pop ebx  +
jmp loc_100964D  +
mov ecx [edx+esi*8+8] +
lea eax [edx+esi*8] +
add [eax] ecx +
dec esi  +
jns loc_1009644  +
jmp loc_1009667  +
mov ecx [edx+esi*8+8] +
lea eax [edx+esi*8] +
shr dword ptr [eax] 1 +
mov edi [eax] +
cmp edi ecx +
ja loc_1009664  +
inc ecx  +
mov [eax] ecx +
dec esi  +
jns loc_1009652  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx [ebp+arg_0] +
mov ax [ebx+178h] +
push esi  +
mov word ptr [ebp+var_8] ax +
mov edx [ebp+var_8] +
push edi  +
mov ecx ebx +
call sub_1009D53  +
and [ebp+arg_0] 0 +
lea ecx [ebx+180h] +
jmp loc_10096A7  +
inc [ebp+arg_0]  +
add ecx 8 +
cmp [ecx] eax +
ja loc_10096A1  +
mov eax [ebp+arg_0] +
mov ecx [ebx+eax*8+17Ch] +
mov [ebp+var_4] ecx +
mov cx [ebx+eax*8+178h] +
mov ax [ebx+eax*8+180h] +
mov word ptr [ebp+var_C+2] cx +
mov word ptr [ebp+var_C] ax +
lea esi [ebp+var_C] +
push ecx  +
push ecx  +
mov edi esp +
movs   +
mov ecx ebx +
movs   +
call sub_1009D88  +
push 8  +
lea eax [ebx+178h] +
pop esi  +
add [eax] esi +
mov ecx [ebp+arg_0] +
add eax esi +
dec [ebp+arg_0]  +
test ecx ecx +
jnz loc_10096EA  +
cmp dword ptr [ebx+178h] 0ED8h +
jbe loc_1009710  +
lea eax [ebx+170h] +
push eax  +
call sub_10095B1  +
mov eax [ebp+var_4] +
xor edi edi +
sub eax edi +
jz loc_1009BA4  +
dec eax  +
jz loc_1009B0C  +
dec eax  +
jz loc_1009A74  +
dec eax  +
jz loc_10099D9  +
dec eax  +
jz loc_100991A  +
dec eax  +
jz loc_1009883  +
dec eax  +
jnz loc_1009C3B  +
mov ax [ebx+0BC8h] +
mov word ptr [ebp+var_8] ax +
mov edx [ebp+var_8] +
mov ecx ebx +
call sub_1009D53  +
mov [ebp+arg_0] edi +
lea ecx [ebx+0BD0h] +
jmp loc_100976C  +
inc [ebp+arg_0]  +
add ecx esi +
cmp [ecx] eax +
ja loc_1009767  +
mov eax [ebp+arg_0] +
mov ecx [ebx+eax*8+0BCCh] +
mov [ebp+var_4] ecx +
mov cx [ebx+eax*8+0BC8h] +
mov ax [ebx+eax*8+0BD0h] +
mov word ptr [ebp+var_C+2] cx +
mov word ptr [ebp+var_C] ax +
lea esi [ebp+var_C] +
push ecx  +
push ecx  +
mov edi esp +
movs   +
mov ecx ebx +
movs   +
call sub_1009D88  +
lea eax [ebx+0BC8h] +
add dword ptr [eax] 8 +
mov ecx [ebp+arg_0] +
add eax 8 +
dec [ebp+arg_0]  +
test ecx ecx +
jnz loc_10097AC  +
cmp dword ptr [ebx+0BC8h] 0ED8h +
jbe loc_10097D4  +
lea eax [ebx+0BC0h] +
push eax  +
call sub_10095B1  +
mov esi [ebp+var_4] +
push ds:dword_10022D8[esi*4]  +
push ebx  +
call sub_1009CE1  +
add ax [ebx+esi*4+28h] +
mov ecx ebx +
add ax 5 +
mov word ptr [ebp+var_14] ax +
mov ax [ebx+0DD8h] +
mov word ptr [ebp+var_8] ax +
mov edx [ebp+var_8] +
call sub_1009D53  +
and [ebp+arg_0] 0 +
lea ecx [ebx+0DE0h] +
jmp loc_1009818  +
inc [ebp+arg_0]  +
add ecx 8 +
cmp [ecx] eax +
ja loc_1009812  +
mov eax [ebp+arg_0] +
mov ecx [ebx+eax*8+0DDCh] +
mov [ebp+var_4] ecx +
mov cx [ebx+eax*8+0DD8h] +
mov ax [ebx+eax*8+0DE0h] +
mov word ptr [ebp+var_C+2] cx +
mov word ptr [ebp+var_C] ax +
lea esi [ebp+var_C] +
push ecx  +
push ecx  +
mov edi esp +
movs   +
mov ecx ebx +
movs   +
call sub_1009D88  +
lea eax [ebx+0DD8h] +
add dword ptr [eax] 8 +
mov ecx [ebp+arg_0] +
add eax 8 +
dec [ebp+arg_0]  +
test ecx ecx +
jnz loc_1009858  +
cmp dword ptr [ebx+0DD8h] 0ED8h +
jbe loc_10099AE  +
lea eax [ebx+0DD0h] +
jmp loc_10099A8  +
push 4  +
pop eax  +
mov word ptr [ebp+var_14] ax +
mov ax [ebx+11F8h] +
mov word ptr [ebp+var_8] ax +
mov edx [ebp+var_8] +
mov ecx ebx +
call sub_1009D53  +
mov [ebp+arg_0] edi +
lea ecx [ebx+1200h] +
jmp loc_10098AF  +
inc [ebp+arg_0]  +
add ecx esi +
cmp [ecx] eax +
ja loc_10098AA  +
mov eax [ebp+arg_0] +
mov ecx [ebx+eax*8+11FCh] +
mov [ebp+var_4] ecx +
mov cx [ebx+eax*8+11F8h] +
mov ax [ebx+eax*8+1200h] +
mov word ptr [ebp+var_C+2] cx +
mov word ptr [ebp+var_C] ax +
lea esi [ebp+var_C] +
push ecx  +
push ecx  +
mov edi esp +
movs   +
mov ecx ebx +
movs   +
call sub_1009D88  +
lea eax [ebx+11F8h] +
add dword ptr [eax] 8 +
mov ecx [ebp+arg_0] +
add eax 8 +
dec [ebp+arg_0]  +
test ecx ecx +
jnz loc_10098EF  +
cmp dword ptr [ebx+11F8h] 0ED8h +
jbe loc_10099AE  +
lea eax [ebx+11F0h] +
jmp loc_10099A8  +
push 3  +
pop eax  +
mov word ptr [ebp+var_14] ax +
mov ax [ebx+0FE8h] +
mov word ptr [ebp+var_8] ax +
mov edx [ebp+var_8] +
mov ecx ebx +
call sub_1009D53  +
mov [ebp+arg_0] edi +
lea ecx [ebx+0FF0h] +
jmp loc_1009946  +
inc [ebp+arg_0]  +
add ecx esi +
cmp [ecx] eax +
ja loc_1009941  +
mov eax [ebp+arg_0] +
mov ecx [ebx+eax*8+0FECh] +
mov [ebp+var_4] ecx +
mov cx [ebx+eax*8+0FE8h] +
mov ax [ebx+eax*8+0FF0h] +
mov word ptr [ebp+var_C+2] cx +
mov word ptr [ebp+var_C] ax +
lea esi [ebp+var_C] +
push ecx  +
push ecx  +
mov edi esp +
movs   +
mov ecx ebx +
movs   +
call sub_1009D88  +
lea eax [ebx+0FE8h] +
add dword ptr [eax] 8 +
mov ecx [ebp+arg_0] +
add eax 8 +
dec [ebp+arg_0]  +
test ecx ecx +
jnz loc_1009986  +
cmp dword ptr [ebx+0FE8h] 0ED8h +
jbe loc_10099AE  +
lea eax [ebx+0FE0h] +
push eax  +
call sub_10095B1  +
mov esi [ebp+var_4] +
push ds:dword_1002348[esi*4]  +
push ebx  +
call sub_1009CE1  +
mov ecx [ebx+esi*4+94h] +
lea eax [eax+ecx+1] +
push eax  +
push [ebp+var_14]  +
mov ecx ebx +
call sub_10090D3  +
jmp loc_1009C3B  +
mov ax [ebx+9B8h] +
mov word ptr [ebp+var_8] ax +
mov edx [ebp+var_8] +
mov ecx ebx +
call sub_1009D53  +
mov [ebp+arg_0] edi +
lea ecx [ebx+9C0h] +
jmp loc_10099FE  +
inc [ebp+arg_0]  +
add ecx esi +
cmp [ecx] eax +
ja loc_10099F9  +
mov eax [ebp+arg_0] +
mov ecx [ebx+eax*8+9BCh] +
mov [ebp+var_4] ecx +
mov cx [ebx+eax*8+9B8h] +
mov ax [ebx+eax*8+9C0h] +
mov word ptr [ebp+var_C+2] cx +
mov word ptr [ebp+var_C] ax +
lea esi [ebp+var_C] +
push ecx  +
push ecx  +
mov edi esp +
movs   +
mov ecx ebx +
movs   +
call sub_1009D88  +
lea eax [ebx+9B8h] +
add dword ptr [eax] 8 +
mov ecx [ebp+arg_0] +
add eax 8 +
dec [ebp+arg_0]  +
test ecx ecx +
jnz loc_1009A3E  +
cmp dword ptr [ebx+9B8h] 0ED8h +
jbe loc_1009A66  +
lea eax [ebx+9B0h] +
push eax  +
call sub_10095B1  +
mov edx [ebp+var_4] +
add edx 0C0h +
jmp loc_1009C34  +
mov ax [ebx+7A8h] +
mov word ptr [ebp+var_8] ax +
mov edx [ebp+var_8] +
mov ecx ebx +
call sub_1009D53  +
mov [ebp+arg_0] edi +
lea ecx [ebx+7B0h] +
jmp loc_1009A99  +
inc [ebp+arg_0]  +
add ecx esi +
cmp [ecx] eax +
ja loc_1009A94  +
mov eax [ebp+arg_0] +
mov ecx [ebx+eax*8+7ACh] +
mov [ebp+var_4] ecx +
mov cx [ebx+eax*8+7A8h] +
mov ax [ebx+eax*8+7B0h] +
mov word ptr [ebp+var_C+2] cx +
mov word ptr [ebp+var_C] ax +
lea esi [ebp+var_C] +
push ecx  +
push ecx  +
mov edi esp +
movs   +
mov ecx ebx +
movs   +
call sub_1009D88  +
lea eax [ebx+7A8h] +
add dword ptr [eax] 8 +
mov ecx [ebp+arg_0] +
add eax 8 +
dec [ebp+arg_0]  +
test ecx ecx +
jnz loc_1009AD9  +
cmp dword ptr [ebx+7A8h] 0ED8h +
jbe loc_1009B01  +
lea eax [ebx+7A0h] +
push eax  +
call sub_10095B1  +
mov edx [ebp+var_4] +
sub edx 0FFFFFF80h +
jmp loc_1009C34  +
mov ax [ebx+598h] +
mov word ptr [ebp+var_8] ax +
mov edx [ebp+var_8] +
mov ecx ebx +
call sub_1009D53  +
mov [ebp+arg_0] edi +
lea ecx [ebx+5A0h] +
jmp loc_1009B31  +
inc [ebp+arg_0]  +
add ecx esi +
cmp [ecx] eax +
ja loc_1009B2C  +
mov eax [ebp+arg_0] +
mov ecx [ebx+eax*8+59Ch] +
mov [ebp+var_4] ecx +
mov cx [ebx+eax*8+598h] +
mov ax [ebx+eax*8+5A0h] +
mov word ptr [ebp+var_C+2] cx +
mov word ptr [ebp+var_C] ax +
lea esi [ebp+var_C] +
push ecx  +
push ecx  +
mov edi esp +
movs   +
mov ecx ebx +
movs   +
call sub_1009D88  +
lea eax [ebx+598h] +
add dword ptr [eax] 8 +
mov ecx [ebp+arg_0] +
add eax 8 +
dec [ebp+arg_0]  +
test ecx ecx +
jnz loc_1009B71  +
cmp dword ptr [ebx+598h] 0ED8h +
jbe loc_1009B99  +
lea eax [ebx+590h] +
push eax  +
call sub_10095B1  +
mov edx [ebp+var_4] +
add edx 40h +
jmp loc_1009C34  +
mov ax [ebx+388h] +
mov word ptr [ebp+var_8] ax +
mov edx [ebp+var_8] +
mov ecx ebx +
call sub_1009D53  +
mov [ebp+arg_0] edi +
lea ecx [ebx+390h] +
jmp loc_1009BC9  +
inc [ebp+arg_0]  +
add ecx esi +
cmp [ecx] eax +
ja loc_1009BC4  +
mov eax [ebp+arg_0] +
mov ecx [ebx+eax*8+38Ch] +
mov [ebp+var_4] ecx +
mov cx [ebx+eax*8+388h] +
mov ax [ebx+eax*8+390h] +
mov word ptr [ebp+var_C+2] cx +
mov word ptr [ebp+var_C] ax +
lea esi [ebp+var_C] +
push ecx  +
push ecx  +
mov edi esp +
movs   +
mov ecx ebx +
movs   +
call sub_1009D88  +
lea eax [ebx+388h] +
add dword ptr [eax] 8 +
mov ecx [ebp+arg_0] +
add eax 8 +
dec [ebp+arg_0]  +
test ecx ecx +
jnz loc_1009C09  +
cmp dword ptr [ebx+388h] 0ED8h +
jbe loc_1009C31  +
lea eax [ebx+380h] +
push eax  +
call sub_10095B1  +
mov edx [ebp+var_4] +
mov ecx ebx +
call sub_1009185  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+14h] 0 +
push ebx  +
mov [ebp+arg_0] 10h +
mov edx 100h +
push esi  +
shl word ptr [eax+140h] 1 +
mov ecx [eax+14h] +
movzx esi word ptr [eax+140h] +
test ecx ecx +
jz loc_1009C7C  +
dec ecx  +
mov [eax+14h] ecx +
jmp loc_1009C9B  +
mov ecx [eax+20h] +
test ecx ecx +
jz loc_1009CA5  +
dec ecx  +
mov [eax+20h] ecx +
mov ecx [eax+24h] +
mov dword ptr [eax+14h] 7 +
movsx ebx byte ptr [ecx] +
inc ecx  +
mov [eax+18h] ebx +
mov [eax+24h] ecx +
shl dword ptr [eax+18h] 1 +
mov ecx [eax+18h] +
and ecx edx +
jmp loc_1009CAE  +
mov dword ptr [eax+1Ch] 1 +
xor ecx ecx +
test ecx ecx +
jz loc_1009CBC  +
or esi 1 +
mov [eax+140h] si +
dec [ebp+arg_0]  +
jnz loc_1009C61  +
xor ecx ecx +
mov [eax+13Ch] cx +
mov ecx 0FFFFh +
pop esi  +
mov [eax+13Eh] cx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1009D4A  +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi 100h +
mov edx [ecx+14h] +
dec [ebp+arg_4]  +
add eax eax +
test edx edx +
jz loc_1009D09  +
dec edx  +
mov [ecx+14h] edx +
jmp loc_1009D28  +
mov edx [ecx+20h] +
test edx edx +
jz loc_1009D32  +
dec edx  +
mov [ecx+20h] edx +
mov edx [ecx+24h] +
mov dword ptr [ecx+14h] 7 +
movsx ebx byte ptr [edx] +
inc edx  +
mov [ecx+18h] ebx +
mov [ecx+24h] edx +
shl dword ptr [ecx+18h] 1 +
mov edx [ecx+18h] +
and edx esi +
jmp loc_1009D3B  +
mov dword ptr [ecx+1Ch] 1 +
xor edx edx +
test edx edx +
jz loc_1009D42  +
or eax 1 +
cmp [ebp+arg_4] 0 +
jnz loc_1009CF7  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
movzx eax word ptr [ecx+140h] +
push esi  +
movzx esi word ptr [ecx+13Ch] +
movzx ecx word ptr [ecx+13Eh] +
sub eax esi +
inc eax  +
movzx edx dx +
imul eax edx +
dec eax  +
sub ecx esi +
inc ecx  +
xor edx edx +
div  ecx +
pop esi  +
cwde   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
movzx ebx [ebp+arg_4] +
push esi  +
movzx esi word ptr [ecx+13Eh] +
push edi  +
movzx edi word ptr [ecx+13Ch] +
movzx eax di +
sub esi eax +
mov eax [ebp+arg_0] +
shr eax 10h +
inc esi  +
imul eax esi +
xor edx edx +
div  ebx +
xor edx edx +
lea eax [eax+edi-1] +
mov [ecx+13Eh] ax +
movzx eax word ptr [ebp+arg_0] +
imul eax esi +
div  ebx +
mov esi 100h +
add eax edi +
mov [ecx+13Ch] ax +
mov edi 4000h +
movzx edx word ptr [ecx+13Ch] +
movzx eax word ptr [ecx+13Eh] +
mov ebx edx +
xor ebx eax +
test ebx 8000h +
jz loc_1009E27  +
test edx edi +
jz loc_1009EA5  +
test eax edi +
jnz loc_1009EA5  +
mov ebx edi +
xor [ecx+140h] bx +
and edx 3FFFh +
or eax edi +
mov [ecx+13Ch] dx +
mov [ecx+13Eh] ax +
mov ax [ecx+13Eh] +
shl word ptr [ecx+140h] 1 +
shl word ptr [ecx+13Ch] 1 +
movzx edx word ptr [ecx+140h] +
xor ebx ebx +
add ax ax +
inc ebx  +
or ax bx +
mov [ecx+13Eh] ax +
mov eax [ecx+14h] +
test eax eax +
jz loc_1009E60  +
dec eax  +
mov [ecx+14h] eax +
jmp loc_1009E7F  +
mov eax [ecx+20h] +
test eax eax +
jz loc_1009E89  +
dec eax  +
mov [ecx+20h] eax +
mov eax [ecx+24h] +
mov dword ptr [ecx+14h] 7 +
movsx ebx byte ptr [eax] +
inc eax  +
mov [ecx+18h] ebx +
mov [ecx+24h] eax +
shl dword ptr [ecx+18h] 1 +
mov eax [ecx+18h] +
and eax esi +
jmp loc_1009E8E  +
mov [ecx+1Ch] ebx +
xor eax eax +
test eax eax +
jz loc_1009DDE  +
or edx 1 +
mov [ecx+140h] dx +
jmp loc_1009DDE  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov edx [esi+4] +
push edi  +
push 4  +
mov byte ptr [esi+2EB5h] 4 +
pop edi  +
mov al [esi+2EB5h] +
movzx ecx al +
mov cl ds:byte_10021D0[ecx] +
xor ebx ebx +
inc ebx  +
shl ebx cl +
add edi ebx +
inc al  +
mov [esi+2EB5h] al +
cmp edi edx +
jb loc_1009EC9  +
add edx 105h +
push edx  +
call dword ptr [esi+2EE0h]  +
pop ecx  +
xor ecx ecx +
test eax eax +
setnz cl  +
pop edi  +
mov [esi] eax +
pop esi  +
pop ebx  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
test eax eax +
jz loc_1009F2A  +
push eax  +
call dword ptr [esi+2EE4h]  +
and dword ptr [esi] 0 +
pop ecx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movzx eax byte ptr [esi+2EB5h] +
push edi  +
lea eax ds:100h[eax*8] +
mov edi 2A0h +
cmp eax edi +
jl loc_1009F57  +
mov eax edi +
push eax  +
lea eax [esi+0A18h] +
push 0  +
push eax  +
call memset  +
movzx eax byte ptr [esi+2EB5h] +
lea eax ds:100h[eax*8] +
add esp 0Ch +
cmp eax edi +
jl loc_1009F7D  +
mov eax edi +
push eax  +
lea eax [esi+2B14h] +
push 0  +
push eax  +
call memset  +
mov edi 0F9h +
push edi  +
lea eax [esi+0CB8h] +
push 0  +
push eax  +
call memset  +
push edi  +
push 0  +
add esi 2DB4h +
push esi  +
call memset  +
add esp 24h +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
inc ecx  +
xor edx edx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+2EC0h] edx +
mov [eax+2B10h] edx +
mov [eax+2EDCh] ecx +
mov [eax+2ED4h] edx +
mov [eax+2ED8h] edx +
mov [eax+2EB8h] ecx +
mov [eax+2EC4h] edx +
mov [eax+2EBCh] edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+2EC8h] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_8] +
cmp ebx 6 +
jg loc_100A050  +
add [ecx+2EC8h] ebx +
jmp loc_100A0F1  +
mov eax [ecx+2EC8h] +
add eax ebx +
cmp eax 0Ah +
jnb loc_100A068  +
mov [ecx+2EC8h] eax +
jmp loc_100A0F1  +
push esi  +
push edi  +
lea eax [edx+ebx] +
lea esi [eax-6] +
lea edi [ebp+var_C] +
movs   +
mov [ebp+var_10] eax +
movs   +
mov edi [ebp+var_10] +
add edi 0FFFFFFFAh +
mov eax 0E8E8E8E8h +
stos   +
stos   +
mov eax [ecx+2EC8h] +
lea ebx [eax+ebx-0Ah] +
mov [ebp+var_14] ebx +
jmp loc_100A09D  +
inc edx  +
inc dword ptr [ecx+2EC8h]  +
cmp byte ptr [edx] 0E8h +
jnz loc_100A096  +
mov edi [ecx+2EC8h] +
inc edx  +
cmp edi ebx +
jnb loc_100A0DA  +
mov eax [edx] +
mov esi [ecx+2EC4h] +
cmp eax esi +
jnb loc_100A0BF  +
sub eax edi +
mov [edx] eax +
jmp loc_100A0CB  +
mov ebx eax +
neg ebx  +
cmp ebx edi +
ja loc_100A0CB  +
add esi eax +
mov [edx] esi +
mov ebx [ebp+var_14] +
add edx 4 +
add dword ptr [ecx+2EC8h] 5 +
jmp loc_100A09D  +
mov edi [ebp+var_10] +
add ebx 0Ah +
add edi 0FFFFFFFAh +
mov [ecx+2EC8h] ebx +
lea esi [ebp+var_C] +
movs   +
movs   +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1005F1E  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
jmp loc_100A311  +
cmp dword ptr [ebx+2EDCh] 1 +
jnz loc_100A2DB  +
lea eax [ebx+2EB8h] +
cmp [eax] edi +
jz loc_100A165  +
push 1  +
push ebx  +
mov [eax] edi +
call sub_100A478  +
test eax eax +
jz loc_100A15F  +
push 10h  +
push ebx  +
call sub_100A478  +
push 10h  +
push ebx  +
mov esi eax +
call sub_100A478  +
shl esi 10h +
or eax esi +
mov [ebx+2EC4h] eax +
jmp loc_100A165  +
mov [ebx+2EC4h] edi +
cmp dword ptr [ebx+2ED8h] 3 +
jnz loc_100A19C  +
test byte ptr [ebx+2ED0h] 1 +
jz loc_100A190  +
lea eax [ebx+2B04h] +
inc dword ptr [eax]  +
mov eax [eax] +
add eax 4 +
cmp eax [ebx+2B08h] +
jnb loc_100A31A  +
push ebx  +
mov [ebx+2ED8h] edi +
call sub_100A350  +
push 3  +
push ebx  +
call sub_100A478  +
push 8  +
push ebx  +
mov [ebx+2ED8h] eax +
call sub_100A478  +
push 8  +
push ebx  +
mov esi eax +
call sub_100A478  +
push 8  +
push ebx  +
mov edi eax +
call sub_100A478  +
shl esi 8 +
add esi edi +
shl esi 8 +
add eax esi +
cmp dword ptr [ebx+2ED8h] 2 +
mov [ebx+2ED0h] eax +
mov [ebx+2ED4h] eax +
jnz loc_100A1EB  +
push ebx  +
call sub_100B865  +
mov eax [ebx+2ED8h] +
cmp eax 1 +
jz loc_100A212  +
cmp eax 2 +
jz loc_100A212  +
cmp eax 3 +
jnz loc_100A20A  +
push ebx  +
call sub_100A535  +
test eax eax +
jnz loc_100A25A  +
or eax 0FFFFFFFFh +
jmp loc_100A344  +
movzx ecx byte ptr [ebx+2EB5h] +
lea ecx ds:100h[ecx*8] +
mov eax 2A0h +
cmp ecx eax +
jge loc_100A22B  +
mov eax ecx +
push eax  +
lea eax [ebx+0A18h] +
push eax  +
lea eax [ebx+2B14h] +
push eax  +
call memcpy  +
add esp 0Ch +
push 3Eh  +
pop ecx  +
lea esi [ebx+0CB8h] +
lea edi [ebx+2DB4h] +
movs   +
push ebx  +
movs   +
call sub_100B79C  +
mov dword ptr [ebx+2EDCh] 2 +
xor edi edi +
jmp loc_100A2DB  +
cmp [ebp+arg_4] edi +
jle loc_100A2E3  +
mov esi [ebx+2ED4h] +
cmp esi [ebp+arg_4] +
jl loc_100A27B  +
mov esi [ebp+arg_4] +
cmp esi edi +
jz loc_100A20A  +
mov eax [ebx+2EC0h] +
mov edx [ebx+2ED8h] +
lea ecx [eax+esi] +
cmp ecx eax +
jl loc_100A2C4  +
cmp ecx [ebx+4] +
jg loc_100A2C4  +
cmp edx 2 +
jnz loc_100A2A6  +
push esi  +
push eax  +
push ebx  +
call sub_100B3FE  +
jmp loc_100A2C7  +
cmp edx 1 +
jnz loc_100A2B5  +
push esi  +
push eax  +
push ebx  +
call sub_100ABF6  +
jmp loc_100A2C7  +
cmp edx 3 +
jnz loc_100A2C4  +
push esi  +
push eax  +
push ebx  +
call sub_100A4A4  +
jmp loc_100A2C7  +
or eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_100A20A  +
sub [ebx+2ED4h] esi +
sub [ebp+arg_4] esi +
add [ebp+var_4] esi +
cmp [ebx+2ED4h] edi +
jg loc_100A268  +
cmp [ebx+2ED4h] edi +
jnz loc_100A2F5  +
mov dword ptr [ebx+2EDCh] 1 +
mov eax [ebx+2B04h] +
add eax 4 +
cmp eax [ebx+2B08h] +
jnb loc_100A31A  +
cmp [ebp+arg_4] edi +
jnz loc_100A314  +
push ebx  +
call sub_100A350  +
cmp [ebp+arg_4] edi +
jg loc_100A11B  +
mov eax [ebx+2EC0h] +
cmp eax edi +
jnz loc_100A327  +
mov eax [ebx+4] +
sub eax [ebp+var_4] +
mov ecx 9800h +
add eax [ebx] +
cmp [ebp+var_4] ecx +
jge loc_100A339  +
mov ecx [ebp+var_4] +
push eax  +
push ecx  +
push ebx  +
call sub_100B463  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+2ED8h] 3 +
jz loc_100A3A7  +
mov eax [ecx+2B04h] +
lea edx [eax+4] +
cmp edx [ecx+2B08h] +
ja loc_100A3A7  +
push esi  +
movzx esi byte ptr [eax+1] +
push edi  +
movzx edi byte ptr [eax] +
shl esi 8 +
or esi edi +
movzx edi byte ptr [eax+3] +
movzx eax byte ptr [eax+2] +
shl esi 8 +
or esi edi +
shl esi 8 +
or esi eax +
pop edi  +
mov [ecx+2EB0h] esi +
mov byte ptr [ecx+2EB4h] 10h +
mov [ecx+2B04h] edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_100A350  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
sub [eax+2EB4h] cl +
shl dword ptr [eax+2EB0h] cl +
push ebx  +
mov bl [eax+2EB4h] +
push esi  +
mov esi [eax+2EB0h] +
test bl bl +
jg loc_100A46D  +
mov edx [eax+2B04h] +
cmp edx [eax+2B08h] +
jb loc_100A407  +
mov dword ptr [eax+2EBCh] 1 +
jmp loc_100A46D  +
movzx ecx byte ptr [edx] +
push edi  +
movzx edi byte ptr [edx+1] +
shl edi 8 +
or edi ecx +
movsx ecx bl +
neg ecx  +
shl edi cl +
add bl 10h +
add edx 2 +
mov [eax+2B04h] edx +
or edi esi +
mov [eax+2EB0h] edi +
mov [eax+2EB4h] bl +
pop edi  +
test bl bl +
jg loc_100A46D  +
cmp edx [eax+2B08h] +
jnb loc_100A3FB  +
movzx esi byte ptr [edx+1] +
movzx ecx byte ptr [edx] +
shl esi 8 +
or esi ecx +
movsx ecx bl +
neg ecx  +
shl esi cl +
add edx 2 +
mov [eax+2B04h] edx +
or [eax+2EB0h] esi +
add bl 10h +
mov [eax+2EB4h] bl +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax+2EB0h] +
push 20h  +
pop ecx  +
push [ebp+arg_4]  +
sub ecx [ebp+arg_4] +
push eax  +
shr esi cl +
call sub_100A3C0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
mov edx [ecx+2B04h] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
lea edi [esi+eax] +
cmp esi edi +
mov ebx esi +
mov [ebp+arg_4] ebx +
jge loc_100A4EB  +
cmp edx [ecx+2B08h] +
jnb loc_100A502  +
mov eax [ecx+4] +
add eax 105h +
cmp esi eax +
jge loc_100A502  +
mov bl [edx] +
mov eax [ecx] +
mov [esi+eax] bl +
inc esi  +
inc edx  +
cmp esi edi +
jl loc_100A4C7  +
mov ebx [ebp+arg_4] +
mov eax 101h +
cmp edi eax +
mov [ecx+2B04h] edx +
mov [ebp+arg_4] eax +
jg loc_100A515  +
mov [ebp+arg_4] edi +
jmp loc_100A515  +
or eax 0FFFFFFFFh +
jmp loc_100A529  +
mov eax [ecx] +
mov edx [ecx+4] +
add edx eax +
mov al [eax+ebx] +
mov [edx+ebx] al +
inc ebx  +
cmp ebx [ebp+arg_4] +
jb loc_100A507  +
mov eax [ecx+8] +
and eax esi +
mov [ecx+2EC0h] eax +
mov eax esi +
sub eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add dword ptr [eax+2B04h] 0FFFFFFFEh +
mov ecx [eax+2B04h] +
add ecx 4 +
cmp ecx [eax+2B08h] +
jb loc_100A559  +
xor eax eax +
jmp loc_100A59B  +
push ebx  +
push esi  +
push edi  +
push 3  +
lea edx [eax+0Ch] +
pop esi  +
mov ecx [eax+2B04h] +
movzx edi byte ptr [ecx+3] +
movzx ebx byte ptr [ecx+2] +
shl edi 8 +
or edi ebx +
movzx ebx byte ptr [ecx+1] +
movzx ecx byte ptr [ecx] +
shl edi 8 +
or edi ebx +
shl edi 8 +
or edi ecx +
mov [edx] edi +
add dword ptr [eax+2B04h] 4 +
add edx 4 +
dec esi  +
jnz loc_100A562  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov al [edx+2EB4h] +
mov ecx [edx+2B08h] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_1] al +
mov eax [edx+2EB0h] +
mov [ebp+var_10] ecx +
mov ecx [ebp+arg_4] +
add ecx esi +
cmp esi ecx +
mov [ebp+var_8] eax +
mov eax [edx+2B04h] +
push edi  +
mov [ebp+var_C] eax +
mov [ebp+var_14] ecx +
jge loc_100A8A5  +
mov ecx [ebp+var_8] +
xor esi esi +
shr ecx 16h +
inc esi  +
cmp ecx 400h +
jnb loc_100A5FE  +
movsx ebx word ptr [edx+ecx*2+18h] +
jmp loc_100A606  +
mov [edx+2EBCh] esi +
xor ebx ebx +
test ebx ebx +
jge loc_100A651  +
mov ecx 200000h +
mov edi [ebp+var_8] +
neg ebx  +
test ecx edi +
jz loc_100A62E  +
lea edi [ebx+ebx+1] +
cmp edi 0A80h +
jnb loc_100A643  +
movsx ebx word ptr [edx+ebx*4+0E3Eh] +
jmp loc_100A64B  +
lea edi [ebx+ebx] +
cmp edi 0A80h +
jnb loc_100A643  +
movsx ebx word ptr [edx+ebx*4+0E3Ch] +
jmp loc_100A64B  +
mov [edx+2EBCh] esi +
xor ebx ebx +
shr ecx 1 +
test ebx ebx +
jl loc_100A60F  +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100A6A0  +
cmp eax [ebp+var_10] +
jnb loc_100A8C6  +
mov cl [ebx+edx+0A18h] +
shl [ebp+var_8] cl +
mov cl [ebp+var_1] +
sub cl [ebx+edx+0A18h] +
mov eax [ebp+var_C] +
mov [ebp+var_1] cl +
test cl cl +
jg loc_100A6A0  +
movzx esi byte ptr [eax+1] +
movzx edi byte ptr [eax] +
shl esi 8 +
movsx ecx cl +
or esi edi +
neg ecx  +
shl esi cl +
or [ebp+var_8] esi +
inc eax  +
inc eax  +
add [ebp+var_1] 10h +
mov [ebp+var_C] eax +
mov esi 100h +
sub ebx esi +
jns loc_100A6BF  +
mov esi [edx] +
mov ecx [ebp+arg_0] +
mov [ecx+esi] bl +
mov esi [edx+4] +
add esi [edx] +
mov [esi+ecx] bl +
inc ecx  +
jmp loc_100A897  +
mov edi ebx +
and edi 7 +
cmp edi 7 +
jnz loc_100A795  +
mov ecx [ebp+var_8] +
shr ecx 18h +
cmp ecx esi +
jnb loc_100A6E1  +
movsx edi word ptr [edx+ecx*2+818h] +
jmp loc_100A6ED  +
mov dword ptr [edx+2EBCh] 1 +
xor edi edi +
test edi edi +
jge loc_100A73A  +
mov ecx 800000h +
neg edi  +
test [ebp+var_8] ecx +
jz loc_100A713  +
lea esi [edi+edi+1] +
cmp esi 3E4h +
jnb loc_100A728  +
movsx edi word ptr [edx+edi*4+233Eh] +
jmp loc_100A734  +
lea esi [edi+edi] +
cmp esi 3E4h +
jnb loc_100A728  +
movsx edi word ptr [edx+edi*4+233Ch] +
jmp loc_100A734  +
mov dword ptr [edx+2EBCh] 1 +
xor edi edi +
shr ecx 1 +
test edi edi +
jl loc_100A6F6  +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100A785  +
cmp eax [ebp+var_10] +
jnb loc_100A8C6  +
mov al [ebp+var_1] +
mov cl [edi+edx+0CB8h] +
shl [ebp+var_8] cl +
sub al cl +
mov [ebp+var_1] al +
test al al +
mov eax [ebp+var_C] +
jg loc_100A785  +
movzx esi byte ptr [eax+1] +
movzx ecx byte ptr [eax] +
shl esi 8 +
or esi ecx +
movsx ecx [ebp+var_1] +
neg ecx  +
shl esi cl +
or [ebp+var_8] esi +
inc eax  +
inc eax  +
add [ebp+var_1] 10h +
mov [ebp+var_C] eax +
add edi 7 +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100A8C6  +
sar ebx 3 +
cmp bl 2 +
jle loc_100A844  +
cmp bl 3 +
jle loc_100A833  +
cmp bl 33h +
jnb loc_100A8C6  +
mov esi [ebp+var_8] +
movsx ecx bl +
movzx ebx ds:byte_10021D0[ecx] +
mov [ebp+arg_4] ecx +
push 20h  +
pop ecx  +
sub ecx ebx +
shr esi cl +
mov ecx ebx +
shl [ebp+var_8] cl +
mov ecx [ebp+arg_4] +
mov cl ds:byte_10021D0[ecx] +
sub [ebp+var_1] cl +
cmp [ebp+var_1] 0 +
jg loc_100A827  +
movzx ebx byte ptr [eax+1] +
movzx ecx byte ptr [eax] +
shl ebx 8 +
or ebx ecx +
movsx ecx [ebp+var_1] +
add [ebp+var_1] 10h +
neg ecx  +
shl ebx cl +
or [ebp+var_8] ebx +
inc eax  +
inc eax  +
cmp [ebp+var_1] 0 +
mov [ebp+var_C] eax +
jg loc_100A827  +
movzx ebx byte ptr [eax+1] +
movzx ecx byte ptr [eax] +
shl ebx 8 +
or ebx ecx +
movsx ecx [ebp+var_1] +
neg ecx  +
shl ebx cl +
or [ebp+var_8] ebx +
inc eax  +
inc eax  +
add [ebp+var_1] 10h +
mov [ebp+var_C] eax +
mov ecx [ebp+arg_4] +
add esi ds:dword_1002208[ecx*4] +
jmp loc_100A836  +
xor esi esi +
inc esi  +
mov ecx [edx+10h] +
mov [edx+14h] ecx +
mov ecx [edx+0Ch] +
mov [edx+10h] ecx +
jmp loc_100A856  +
movsx ecx bl +
lea ecx [edx+ecx*4+0Ch] +
mov esi [ecx] +
test bl bl +
jz loc_100A859  +
mov ebx [edx+0Ch] +
mov [ecx] ebx +
mov [edx+0Ch] esi +
mov ecx [ebp+arg_0] +
inc edi  +
mov ebx ecx +
inc edi  +
sub ebx esi +
mov [ebp+arg_0] ebx +
mov ebx [ebp+arg_0] +
and ebx [edx+8] +
cmp ecx 101h +
mov esi [edx] +
mov bl [ebx+esi] +
mov [esi+ecx] bl +
jge loc_100A88E  +
mov esi [edx] +
mov ebx [edx+4] +
mov [ebp+arg_4] eax +
mov al [esi+ecx] +
add ebx esi +
mov [ebx+ecx] al +
mov eax [ebp+arg_4] +
inc ecx  +
inc [ebp+arg_0]  +
dec edi  +
test edi edi +
jg loc_100A865  +
mov esi ecx +
cmp esi [ebp+var_14] +
mov [ebp+arg_0] ecx +
jl loc_100A5E6  +
mov cl [ebp+var_1] +
mov [edx+2EB4h] cl +
mov ecx [ebp+var_8] +
mov [edx+2B04h] eax +
mov [edx+2EB0h] ecx +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
or eax 0FFFFFFFFh +
jmp loc_100A8BF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov edx [ebp+arg_0] +
mov al [edx+2EB4h] +
mov ecx [edx+2EB0h] +
push ebx  +
mov ebx [edx+2B04h] +
mov byte ptr [ebp+arg_0+3] al +
mov eax [edx+2B08h] +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
add esi eax +
cmp eax esi +
push edi  +
mov [ebp+var_4] ecx +
mov [ebp+var_C] ebx +
mov [ebp+var_14] esi +
jge loc_100ABBF  +
xor esi esi +
inc esi  +
jmp loc_100A91D  +
mov ecx [ebp+var_4] +
mov eax ecx +
shr eax 16h +
cmp eax 400h +
jnb loc_100A930  +
movsx edi word ptr [edx+eax*2+18h] +
jmp loc_100A938  +
mov [edx+2EBCh] esi +
xor edi edi +
mov [ebp+var_8] edi +
test edi edi +
jge loc_100A988  +
mov [ebp+arg_8] 200000h +
neg edi  +
test [ebp+arg_8] ecx +
jz loc_100A962  +
lea eax [edi+edi+1] +
cmp eax 0A80h +
jnb loc_100A976  +
movsx edi word ptr [edx+edi*4+0E3Eh] +
jmp loc_100A97E  +
lea eax [edi+edi] +
cmp eax 0A80h +
jnb loc_100A976  +
movsx edi word ptr [edx+edi*4+0E3Ch] +
jmp loc_100A97E  +
mov [edx+2EBCh] esi +
xor edi edi +
shr [ebp+arg_8] 1 +
test edi edi +
jl loc_100A946  +
mov [ebp+var_8] edi +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100ABEC  +
cmp ebx [ebp+var_10] +
jnb loc_100ABEC  +
mov cl [edi+edx+0A18h] +
mov al byte ptr [ebp+arg_0+3] +
shl [ebp+var_4] cl +
sub al cl +
mov byte ptr [ebp+arg_8+3] cl +
mov byte ptr [ebp+arg_0+3] al +
test al al +
jg loc_100A9D7  +
movzx edi byte ptr [ebx+1] +
movzx ecx byte ptr [ebx] +
shl edi 8 +
or edi ecx +
movsx ecx al +
neg ecx  +
shl edi cl +
or [ebp+var_4] edi +
inc ebx  +
inc ebx  +
add al 10h +
mov [ebp+var_C] ebx +
mov byte ptr [ebp+arg_0+3] al +
sub [ebp+var_8] 100h +
jns loc_100A9F7  +
mov ecx [edx] +
mov eax [ebp+arg_4] +
mov [ebp+arg_8] edx +
mov dl byte ptr [ebp+var_8] +
mov [eax+ecx] dl +
mov edx [ebp+arg_8] +
inc eax  +
jmp loc_100ABB3  +
mov edi [ebp+var_8] +
and edi 7 +
cmp edi 7 +
jnz loc_100AAC8  +
mov ecx [ebp+var_4] +
shr ecx 18h +
cmp ecx 100h +
jnb loc_100AA1E  +
movsx edi word ptr [edx+ecx*2+818h] +
jmp loc_100AA26  +
mov [edx+2EBCh] esi +
xor edi edi +
test edi edi +
jge loc_100AA73  +
mov ecx 800000h +
neg edi  +
test [ebp+var_4] ecx +
jz loc_100AA4C  +
lea esi [edi+edi+1] +
cmp esi 3E4h +
jnb loc_100AA61  +
movsx edi word ptr [edx+edi*4+233Eh] +
jmp loc_100AA6D  +
lea esi [edi+edi] +
cmp esi 3E4h +
jnb loc_100AA61  +
movsx edi word ptr [edx+edi*4+233Ch] +
jmp loc_100AA6D  +
mov dword ptr [edx+2EBCh] 1 +
xor edi edi +
shr ecx 1 +
test edi edi +
jl loc_100AA2F  +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100AAB8  +
cmp ebx [ebp+var_10] +
jnb loc_100ABEC  +
mov cl [edi+edx+0CB8h] +
shl [ebp+var_4] cl +
sub al cl +
mov byte ptr [ebp+arg_0+3] al +
test al al +
jg loc_100AAB8  +
movzx esi byte ptr [ebx+1] +
movzx ecx byte ptr [ebx] +
shl esi 8 +
or esi ecx +
movsx ecx al +
neg ecx  +
shl esi cl +
or [ebp+var_4] esi +
inc ebx  +
inc ebx  +
add al 10h +
mov [ebp+var_C] ebx +
mov byte ptr [ebp+arg_0+3] al +
add edi 7 +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100ABEC  +
mov ecx [ebp+var_8] +
sar ecx 3 +
cmp cl 2 +
jle loc_100AB7D  +
cmp cl 3 +
jle loc_100AB69  +
cmp cl 33h +
jnb loc_100ABEC  +
mov esi [ebp+var_4] +
movsx eax cl +
mov [ebp+arg_8] eax +
movzx eax ds:byte_10021D0[eax] +
push 20h  +
pop ecx  +
sub ecx eax +
shr esi cl +
mov ecx eax +
mov eax [ebp+arg_8] +
mov al ds:byte_10021D0[eax] +
sub byte ptr [ebp+arg_0+3] al +
shl [ebp+var_4] cl +
cmp byte ptr [ebp+arg_0+3] 0 +
jg loc_100AB5D  +
movzx eax byte ptr [ebx+1] +
movzx ecx byte ptr [ebx] +
shl eax 8 +
or eax ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
add byte ptr [ebp+arg_0+3] 10h +
neg ecx  +
shl eax cl +
or [ebp+var_4] eax +
inc ebx  +
inc ebx  +
cmp byte ptr [ebp+arg_0+3] 0 +
mov [ebp+var_C] ebx +
jg loc_100AB5D  +
movzx eax byte ptr [ebx+1] +
movzx ecx byte ptr [ebx] +
shl eax 8 +
or eax ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
neg ecx  +
shl eax cl +
or [ebp+var_4] eax +
inc ebx  +
inc ebx  +
add byte ptr [ebp+arg_0+3] 10h +
mov [ebp+var_C] ebx +
mov eax [ebp+arg_8] +
add esi ds:dword_1002208[eax*4] +
jmp loc_100AB6F  +
mov esi ds:dword_1002214 +
mov eax [edx+10h] +
mov [edx+14h] eax +
mov eax [edx+0Ch] +
mov [edx+10h] eax +
jmp loc_100AB8F  +
movsx eax cl +
lea eax [edx+eax*4+0Ch] +
mov esi [eax] +
test cl cl +
jz loc_100AB92  +
mov ecx [edx+0Ch] +
mov [eax] ecx +
mov [edx+0Ch] esi +
mov eax [ebp+arg_4] +
inc edi  +
mov ecx eax +
sub ecx esi +
inc edi  +
and ecx [edx+8] +
mov esi [edx] +
mov bl [esi+ecx] +
mov [esi+eax] bl +
inc eax  +
inc ecx  +
dec edi  +
test edi edi +
jg loc_100AB9E  +
mov ebx [ebp+var_C] +
xor esi esi +
inc esi  +
cmp eax [ebp+var_14] +
mov [ebp+arg_4] eax +
jl loc_100A91A  +
mov cl byte ptr [ebp+arg_0+3] +
mov [edx+2EB4h] cl +
mov ecx [ebp+var_4] +
mov [edx+2EB0h] ecx +
mov ecx [edx+8] +
and ecx eax +
sub eax [ebp+var_14] +
mov [edx+2B04h] ebx +
mov [edx+2EC0h] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
or eax 0FFFFFFFFh +
jmp loc_100ABE5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov eax 101h +
cmp esi eax +
jge loc_100AC3D  +
sub eax esi +
cmp eax [ebp+arg_8] +
jl loc_100AC15  +
mov eax [ebp+arg_8] +
push eax  +
push esi  +
call sub_100A5A4  +
cmp eax esi +
jge loc_100AC25  +
or eax 0FFFFFFFFh +
jmp loc_100AC47  +
sub esi eax +
add [ebp+arg_8] esi +
cmp [ebp+arg_8] 0 +
mov esi eax +
mov [edx+2EC0h] eax +
jg loc_100AC3D  +
mov eax [ebp+arg_8] +
jmp loc_100AC47  +
push [ebp+arg_8]  +
push esi  +
push edx  +
call sub_100A8D0  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [edx+2B08h] +
mov ecx [ebp+arg_0] +
mov [ebp+var_C] eax +
mov eax [edx] +
push ebx  +
mov bl [edx+2EB4h] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi [edx+2EB0h] +
add eax ecx +
cmp ecx eax +
push edi  +
mov edi [edx+2B04h] +
mov [ebp+var_18] eax +
jge loc_100AFFD  +
mov eax esi +
shr eax 16h +
cmp eax 400h +
jnb loc_100ACA2  +
movsx eax word ptr [edx+eax*2+18h] +
jmp loc_100ACAE  +
mov dword ptr [edx+2EBCh] 1 +
xor eax eax +
test eax eax +
jge loc_100ACFE  +
mov [ebp+arg_4] 200000h +
neg eax  +
test [ebp+arg_4] esi +
jz loc_100ACD6  +
lea ecx [eax+eax+1] +
cmp ecx 0A80h +
jnb loc_100ACEB  +
movsx eax word ptr [edx+eax*4+0E3Eh] +
jmp loc_100ACF7  +
lea ecx [eax+eax] +
cmp ecx 0A80h +
jnb loc_100ACEB  +
movsx eax word ptr [edx+eax*4+0E3Ch] +
jmp loc_100ACF7  +
mov dword ptr [edx+2EBCh] 1 +
xor eax eax +
shr [ebp+arg_4] 1 +
test eax eax +
jl loc_100ACB9  +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100B018  +
cmp edi [ebp+var_C] +
jnb loc_100B018  +
mov cl [eax+edx+0A18h] +
shl esi cl +
sub bl cl +
mov byte ptr [ebp+arg_4+3] bl +
mov [ebp+var_4] esi +
test bl bl +
jg loc_100AD47  +
movzx esi byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl esi 8 +
or esi ecx +
movsx ecx bl +
neg ecx  +
shl esi cl +
or [ebp+var_4] esi +
inc edi  +
inc edi  +
add bl 10h +
mov byte ptr [ebp+arg_4+3] bl +
mov esi 100h +
sub eax esi +
jns loc_100AD6C  +
mov ecx [ebp+var_10] +
mov esi [ebp+arg_0] +
mov [ecx+esi] al +
mov esi [edx+4] +
add esi ecx +
mov ecx [ebp+arg_0] +
inc [ebp+arg_0]  +
mov [esi+ecx] al +
jmp loc_100AFEE  +
mov ecx eax +
and ecx 7 +
mov [ebp+var_8] ecx +
cmp ecx 7 +
jnz loc_100AE56  +
mov ecx [ebp+var_4] +
shr ecx 18h +
cmp ecx esi +
jnb loc_100AD91  +
movsx esi word ptr [edx+ecx*2+818h] +
jmp loc_100ADA2  +
and [ebp+var_8] 0 +
mov esi [ebp+var_8] +
mov dword ptr [edx+2EBCh] 1 +
test esi esi +
jge loc_100ADF9  +
mov ecx 800000h +
mov ebx [ebp+var_4] +
neg esi  +
test ecx ebx +
jz loc_100ADCA  +
lea ebx [esi+esi+1] +
cmp ebx 3E4h +
jnb loc_100ADE2  +
movsx esi word ptr [edx+esi*4+233Eh] +
jmp loc_100ADDD  +
lea ebx [esi+esi] +
cmp ebx 3E4h +
jnb loc_100ADE2  +
movsx esi word ptr [edx+esi*4+233Ch] +
mov [ebp+var_8] esi +
jmp loc_100ADF0  +
and [ebp+var_8] 0 +
mov dword ptr [edx+2EBCh] 1 +
mov esi [ebp+var_8] +
shr ecx 1 +
test esi esi +
jl loc_100ADAB  +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100AE43  +
cmp edi [ebp+var_C] +
jnb loc_100B018  +
mov cl [esi+edx+0CB8h] +
shl [ebp+var_4] cl +
mov cl byte ptr [ebp+arg_4+3] +
sub cl [esi+edx+0CB8h] +
mov byte ptr [ebp+arg_4+3] cl +
test cl cl +
jg loc_100AE43  +
movzx ebx byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl ebx 8 +
or ebx ecx +
movsx ecx byte ptr [ebp+arg_4+3] +
neg ecx  +
shl ebx cl +
or [ebp+var_4] ebx +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_4+3] 10h +
add esi 7 +
cmp dword ptr [edx+2EBCh] 0 +
mov [ebp+var_8] esi +
jnz loc_100B018  +
sar eax 3 +
cmp al 2 +
jle loc_100AF9E  +
cmp al 33h +
jnb loc_100B018  +
movsx eax al +
mov bl ds:byte_10021D0[eax] +
mov [ebp+var_14] eax +
cmp bl 3 +
jb loc_100AF3C  +
movzx eax bl +
lea ecx [eax-3] +
test ecx ecx +
jz loc_100AECD  +
mov esi [ebp+var_4] +
push 23h  +
pop ecx  +
sub ecx eax +
shr esi cl +
cmp edi [ebp+var_C] +
jnb loc_100B018  +
lea ecx [eax-3] +
shl [ebp+var_4] cl +
mov al 3 +
sub al bl +
add byte ptr [ebp+arg_4+3] al +
cmp byte ptr [ebp+arg_4+3] 0 +
jg loc_100AECF  +
movzx eax byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl eax 8 +
or eax ecx +
movsx ecx byte ptr [ebp+arg_4+3] +
neg ecx  +
shl eax cl +
or [ebp+var_4] eax +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_4+3] 10h +
jmp loc_100AECF  +
xor esi esi +
mov eax [ebp+var_14] +
mov eax ds:dword_1002208[eax*4] +
lea esi [eax+esi*8] +
mov eax [ebp+var_4] +
shr eax 19h +
cmp eax 80h +
jnb loc_100AF2C  +
movsx eax byte ptr [eax+edx+0DB4h] +
cmp edi [ebp+var_C] +
jnb loc_100B018  +
mov cl [eax+edx+0E34h] +
sub byte ptr [ebp+arg_4+3] cl +
shl [ebp+var_4] cl +
cmp byte ptr [ebp+arg_4+3] 0 +
jg loc_100AF38  +
movzx ebx byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl ebx 8 +
or ebx ecx +
movsx ecx byte ptr [ebp+arg_4+3] +
neg ecx  +
shl ebx cl +
or [ebp+var_4] ebx +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_4+3] 10h +
jmp loc_100AF38  +
xor eax eax +
mov dword ptr [edx+2EBCh] 1 +
add esi eax +
jmp loc_100AF90  +
test bl bl +
jz loc_100AF8D  +
mov esi [ebp+var_4] +
movzx eax bl +
push 20h  +
pop ecx  +
sub ecx eax +
shr esi cl +
cmp edi [ebp+var_C] +
jnb loc_100B018  +
sub byte ptr [ebp+arg_4+3] bl +
mov ecx eax +
shl [ebp+var_4] cl +
cmp byte ptr [ebp+arg_4+3] 0 +
jg loc_100AF81  +
movzx eax byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl eax 8 +
or eax ecx +
movsx ecx byte ptr [ebp+arg_4+3] +
neg ecx  +
shl eax cl +
or [ebp+var_4] eax +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_4+3] 10h +
mov eax [ebp+var_14] +
add esi ds:dword_1002208[eax*4] +
jmp loc_100AF90  +
xor esi esi +
inc esi  +
mov eax [edx+10h] +
mov [edx+14h] eax +
mov eax [edx+0Ch] +
mov [edx+10h] eax +
jmp loc_100AFB0  +
movsx ecx al +
lea ecx [edx+ecx*4+0Ch] +
mov esi [ecx] +
test al al +
jz loc_100AFB3  +
mov eax [edx+0Ch] +
mov [ecx] eax +
mov [edx+0Ch] esi +
mov ecx [ebp+arg_0] +
add [ebp+var_8] 2 +
mov ebx ecx +
sub ebx esi +
mov esi [ebp+var_10] +
mov eax ebx +
and eax [edx+8] +
cmp ecx 101h +
mov al [eax+esi] +
mov [esi+ecx] al +
jge loc_100AFDD  +
mov esi [edx+4] +
add esi [ebp+var_10] +
mov [esi+ecx] al +
inc ecx  +
inc ebx  +
dec [ebp+var_8]  +
cmp [ebp+var_8] 0 +
jg loc_100AFBE  +
mov bl byte ptr [ebp+arg_4+3] +
mov [ebp+arg_0] ecx +
mov ecx [ebp+arg_0] +
cmp ecx [ebp+var_18] +
mov esi [ebp+var_4] +
jl loc_100AC8F  +
mov [edx+2EB4h] bl +
mov [edx+2EB0h] esi +
mov [edx+2B04h] edi +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
or eax 0FFFFFFFFh +
jmp loc_100B011  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov edx [ebp+arg_0] +
mov al [edx+2EB4h] +
mov ecx [ebp+arg_8] +
mov byte ptr [ebp+arg_0+3] al +
mov eax [edx+2EB0h] +
mov [ebp+var_4] eax +
mov eax [edx+2B08h] +
mov [ebp+var_8] eax +
mov eax [edx] +
push ebx  +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
add ecx eax +
cmp eax ecx +
push esi  +
push edi  +
mov edi [edx+2B04h] +
mov [ebp+var_14] ecx +
jge loc_100B3C7  +
mov eax [ebp+var_4] +
xor ecx ecx +
shr eax 16h +
inc ecx  +
cmp eax 400h +
jnb loc_100B080  +
movsx eax word ptr [edx+eax*2+18h] +
jmp loc_100B088  +
mov [edx+2EBCh] ecx +
xor eax eax +
test eax eax +
jge loc_100B0D3  +
mov esi 200000h +
mov ebx [ebp+var_4] +
neg eax  +
test esi ebx +
jz loc_100B0B0  +
lea ebx [eax+eax+1] +
cmp ebx 0A80h +
jnb loc_100B0C5  +
movsx eax word ptr [edx+eax*4+0E3Eh] +
jmp loc_100B0CD  +
lea ebx [eax+eax] +
cmp ebx 0A80h +
jnb loc_100B0C5  +
movsx eax word ptr [edx+eax*4+0E3Ch] +
jmp loc_100B0CD  +
mov [edx+2EBCh] ecx +
xor eax eax +
shr esi 1 +
test eax eax +
jl loc_100B091  +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100B11D  +
cmp edi [ebp+var_8] +
jnb loc_100B3F4  +
mov cl [eax+edx+0A18h] +
shl [ebp+var_4] cl +
mov cl byte ptr [ebp+arg_0+3] +
sub cl [eax+edx+0A18h] +
mov byte ptr [ebp+arg_0+3] cl +
test cl cl +
jg loc_100B11D  +
movzx esi byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl esi 8 +
or esi ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
neg ecx  +
shl esi cl +
or [ebp+var_4] esi +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_0+3] 10h +
mov esi 100h +
sub eax esi +
jns loc_100B137  +
mov esi [ebp+arg_4] +
mov ecx [ebp+var_10] +
inc [ebp+arg_4]  +
mov [ecx+esi] al +
jmp loc_100B3BB  +
mov ebx eax +
and ebx 7 +
cmp ebx 7 +
jnz loc_100B214  +
mov ecx [ebp+var_4] +
shr ecx 18h +
cmp ecx esi +
jnb loc_100B159  +
movsx ebx word ptr [edx+ecx*2+818h] +
jmp loc_100B165  +
mov dword ptr [edx+2EBCh] 1 +
xor ebx ebx +
mov [ebp+arg_8] ebx +
test ebx ebx +
jge loc_100B1B8  +
mov ecx 800000h +
neg ebx  +
test [ebp+var_4] ecx +
jz loc_100B18E  +
lea esi [ebx+ebx+1] +
cmp esi 3E4h +
jnb loc_100B1A3  +
movsx ebx word ptr [edx+ebx*4+233Eh] +
jmp loc_100B1AF  +
lea esi [ebx+ebx] +
cmp esi 3E4h +
jnb loc_100B1A3  +
movsx ebx word ptr [edx+ebx*4+233Ch] +
jmp loc_100B1AF  +
mov dword ptr [edx+2EBCh] 1 +
xor ebx ebx +
shr ecx 1 +
test ebx ebx +
jl loc_100B171  +
mov [ebp+arg_8] ebx +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100B204  +
cmp edi [ebp+var_8] +
jnb loc_100B3F4  +
mov cl [ebx+edx+0CB8h] +
shl [ebp+var_4] cl +
mov cl byte ptr [ebp+arg_0+3] +
sub cl [ebx+edx+0CB8h] +
mov byte ptr [ebp+arg_0+3] cl +
test cl cl +
jg loc_100B201  +
movzx esi byte ptr [edi+1] +
movzx ebx byte ptr [edi] +
shl esi 8 +
movsx ecx cl +
or esi ebx +
neg ecx  +
shl esi cl +
or [ebp+var_4] esi +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_0+3] 10h +
mov ebx [ebp+arg_8] +
add ebx 7 +
cmp dword ptr [edx+2EBCh] 0 +
jnz loc_100B3F4  +
sar eax 3 +
cmp al 2 +
jle loc_100B37D  +
cmp al 33h +
jnb loc_100B3F4  +
movsx ecx al +
mov al ds:byte_10021D0[ecx] +
mov [ebp+var_C] ecx +
mov byte ptr [ebp+arg_8+3] al +
cmp al 3 +
jb loc_100B30E  +
movzx eax al +
lea esi [eax-3] +
test esi esi +
jz loc_100B2F7  +
mov esi [ebp+var_4] +
push 23h  +
pop ecx  +
sub ecx eax +
shr esi cl +
cmp edi [ebp+var_8] +
jnb loc_100B3F4  +
lea ecx [eax-3] +
shl [ebp+var_4] cl +
mov al 3 +
sub al byte ptr [ebp+arg_8+3] +
add byte ptr [ebp+arg_0+3] al +
cmp byte ptr [ebp+arg_0+3] 0 +
jg loc_100B290  +
movzx eax byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl eax 8 +
or eax ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
neg ecx  +
shl eax cl +
or [ebp+var_4] eax +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_0+3] 10h +
mov ecx [ebp+var_C] +
mov eax ds:dword_1002208[ecx*4] +
lea esi [eax+esi*8] +
mov eax [ebp+var_4] +
shr eax 19h +
cmp eax 80h +
jnb loc_100B2FB  +
movsx eax byte ptr [eax+edx+0DB4h] +
mov [ebp+arg_8] eax +
cmp edi [ebp+var_8] +
jnb loc_100B3F4  +
mov cl [eax+edx+0E34h] +
mov al [eax+edx+0E34h] +
sub byte ptr [ebp+arg_0+3] al +
shl [ebp+var_4] cl +
cmp byte ptr [ebp+arg_0+3] 0 +
jg loc_100B309  +
movzx eax byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl eax 8 +
or eax ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
neg ecx  +
shl eax cl +
or [ebp+var_4] eax +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_0+3] 10h +
jmp loc_100B309  +
xor esi esi +
jmp loc_100B293  +
and [ebp+arg_8] 0 +
mov dword ptr [edx+2EBCh] 1 +
add esi [ebp+arg_8] +
jmp loc_100B36F  +
test al al +
jz loc_100B368  +
mov esi [ebp+var_4] +
movzx eax al +
push 20h  +
pop ecx  +
sub ecx eax +
shr esi cl +
cmp edi [ebp+var_8] +
jnb loc_100B3F4  +
mov ecx eax +
mov eax [ebp+var_C] +
mov al ds:byte_10021D0[eax] +
sub byte ptr [ebp+arg_0+3] al +
shl [ebp+var_4] cl +
cmp byte ptr [ebp+arg_0+3] 0 +
jg loc_100B35C  +
movzx eax byte ptr [edi+1] +
movzx ecx byte ptr [edi] +
shl eax 8 +
or eax ecx +
movsx ecx byte ptr [ebp+arg_0+3] +
neg ecx  +
shl eax cl +
or [ebp+var_4] eax +
inc edi  +
inc edi  +
add byte ptr [ebp+arg_0+3] 10h +
mov eax [ebp+var_C] +
add esi ds:dword_1002208[eax*4] +
jmp loc_100B36F  +
mov esi ds:dword_1002208[ecx*4] +
mov eax [edx+10h] +
mov [edx+14h] eax +
mov eax [edx+0Ch] +
mov [edx+10h] eax +
jmp loc_100B38F  +
movsx ecx al +
lea ecx [edx+ecx*4+0Ch] +
mov esi [ecx] +
test al al +
jz loc_100B392  +
mov eax [edx+0Ch] +
mov [ecx] eax +
mov [edx+0Ch] esi +
mov ecx [ebp+arg_4] +
sub ecx esi +
and ecx [edx+8] +
mov esi [ebp+var_10] +
inc ebx  +
inc ebx  +
add ecx esi +
mov [ebp+arg_8] ecx +
mov al [ecx] +
mov ecx [ebp+arg_4] +
inc [ebp+arg_4]  +
mov [esi+ecx] al +
mov ecx [ebp+arg_8] +
inc ecx  +
dec ebx  +
mov [ebp+arg_8] ecx +
test ebx ebx +
jg loc_100B3A4  +
mov eax [ebp+arg_4] +
cmp eax [ebp+var_14] +
jl loc_100B069  +
mov cl byte ptr [ebp+arg_0+3] +
mov [edx+2EB4h] cl +
mov ecx [ebp+var_4] +
mov [edx+2EB0h] ecx +
mov ecx [edx+8] +
and ecx eax +
sub eax [ebp+var_14] +
mov [edx+2B04h] edi +
mov [edx+2EC0h] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
or eax 0FFFFFFFFh +
jmp loc_100B3ED  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov eax 101h +
cmp esi eax +
jge loc_100B44F  +
sub eax esi +
cmp eax [ebp+arg_8] +
jl loc_100B41D  +
mov eax [ebp+arg_8] +
push eax  +
push esi  +
call sub_100AC51  +
cmp eax 0FFFFFFFFh +
jnz loc_100B437  +
mov dword ptr [edx+2EBCh] 1 +
or eax eax +
jmp loc_100B459  +
sub esi eax +
add [ebp+arg_8] esi +
cmp [ebp+arg_8] 0 +
mov esi eax +
mov [edx+2EC0h] eax +
jg loc_100B44F  +
mov eax [ebp+arg_8] +
jmp loc_100B459  +
push [ebp+arg_8]  +
push esi  +
push edx  +
call sub_100B022  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+2B0Ch] +
test eax eax +
jz loc_100B4A9  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push eax  +
call memcpy  +
add esp 0Ch +
cmp dword ptr [esi+2EC4h] 0 +
jz loc_100B4A9  +
cmp dword ptr [esi+2ECCh] 8000h +
jnb loc_100B4A9  +
push [ebp+arg_4]  +
push dword ptr [esi+2B0Ch]  +
push esi  +
call sub_100A024  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2E8h +
mov eax dword_100D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_2DC] eax +
xor esi esi +
push 4  +
push ebx  +
call sub_100A478  +
mov byte ptr [ebp+esi+var_1C] al +
inc esi  +
cmp esi 14h +
jl loc_100B4D7  +
cmp [ebx+2EBCh] edi +
jz loc_100B4F8  +
xor eax eax +
jmp loc_100B787  +
lea eax [ebp+var_D8] +
push eax  +
lea eax [ebp+var_2D8] +
push eax  +
push 8  +
lea eax [ebp+var_1C] +
push eax  +
push 14h  +
push ebx  +
call sub_100B8B6  +
cmp [ebp+arg_0] edi +
jle loc_100B77C  +
mov eax [ebx+2EB0h] +
xor ecx ecx +
shr eax 18h +
inc ecx  +
cmp eax 100h +
jnb loc_100B53A  +
movzx esi word ptr [ebp+eax*2+var_2D8] +
jmp loc_100B542  +
mov [ebx+2EBCh] ecx +
xor esi esi +
test si si +
jge loc_100B58E  +
mov edx 800000h +
neg esi  +
movzx eax si +
cwde   +
test [ebx+2EB0h] edx +
jz loc_100B56D  +
lea esi [eax+eax+1] +
cmp esi 5Eh +
jnb loc_100B57F  +
movzx esi word ptr [ebp+eax*4+var_D8+2] +
jmp loc_100B587  +
lea esi [eax+eax] +
cmp esi 5Eh +
jnb loc_100B57F  +
movzx esi word ptr [ebp+eax*4+var_D8] +
jmp loc_100B587  +
mov [ebx+2EBCh] ecx +
xor esi esi +
shr edx 1 +
test si si +
jl loc_100B54C  +
cmp si 18h +
jnb loc_100B5BA  +
test si si +
jl loc_100B5BA  +
cmp dword ptr [ebx+2EBCh] 0 +
jnz loc_100B4F1  +
movsx eax si +
movzx eax byte ptr [ebp+eax+var_1C] +
push eax  +
push ebx  +
call sub_100A3C0  +
xor ecx ecx +
inc ecx  +
jmp loc_100B5C0  +
mov [ebx+2EBCh] ecx +
cmp dword ptr [ebx+2EBCh] 0 +
jnz loc_100B4F1  +
cmp si 11h +
jnz loc_100B5E3  +
push 4  +
push ebx  +
call sub_100A478  +
movzx esi al +
add esi 4 +
jmp loc_100B5F7  +
cmp si 12h +
jnz loc_100B627  +
push 5  +
push ebx  +
call sub_100A478  +
movzx esi al +
add esi 14h +
lea eax [esi+edi] +
cmp eax [ebp+arg_0] +
jl loc_100B604  +
mov esi [ebp+arg_0] +
sub esi edi +
test esi esi +
jle loc_100B751  +
mov eax [ebp+var_2DC] +
push esi  +
add eax edi +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
add edi esi +
jmp loc_100B751  +
cmp si 13h +
jnz loc_100B754  +
push ecx  +
push ebx  +
call sub_100A478  +
movzx ecx al +
mov eax [ebp+arg_0] +
add ecx 4 +
lea edx [ecx+edi] +
cmp edx eax +
mov [ebp+var_2E0] ecx +
jl loc_100B658  +
sub eax edi +
mov [ebp+var_2E0] eax +
mov ecx eax +
mov eax [ebx+2EB0h] +
xor edx edx +
shr eax 18h +
inc edx  +
cmp eax 100h +
jnb loc_100B675  +
movzx esi word ptr [ebp+eax*2+var_2D8] +
jmp loc_100B67D  +
mov [ebx+2EBCh] edx +
xor esi esi +
test si si +
jge loc_100B6E4  +
mov [ebp+var_2E4] 800000h +
neg esi  +
movzx eax si +
mov [ebp+var_2E8] eax +
mov eax [ebp+var_2E4] +
test [ebx+2EB0h] eax +
movsx eax word ptr [ebp+var_2E8] +
jz loc_100B6BF  +
lea esi [eax+eax+1] +
cmp esi 5Eh +
jnb loc_100B6D1  +
movzx esi word ptr [ebp+eax*4+var_D8+2] +
jmp loc_100B6D9  +
lea esi [eax+eax] +
cmp esi 5Eh +
jnb loc_100B6D1  +
movzx esi word ptr [ebp+eax*4+var_D8] +
jmp loc_100B6D9  +
mov [ebx+2EBCh] edx +
xor esi esi +
shr [ebp+var_2E4] 1 +
test si si +
jl loc_100B68C  +
cmp si 18h +
jnb loc_100B713  +
test si si +
jl loc_100B713  +
cmp dword ptr [ebx+2EBCh] 0 +
jnz loc_100B4F1  +
movsx eax si +
movzx eax byte ptr [ebp+eax+var_1C] +
push eax  +
push ebx  +
call sub_100A3C0  +
mov ecx [ebp+var_2E0] +
jmp loc_100B719  +
mov [ebx+2EBCh] edx +
cmp dword ptr [ebx+2EBCh] 0 +
jnz loc_100B4F1  +
mov eax [ebp+arg_4] +
movzx eax byte ptr [edi+eax] +
movsx edx si +
sub eax edx +
add eax 11h +
push 11h  +
cdq   +
pop esi  +
idiv  esi +
jmp loc_100B74D  +
dec ecx  +
cmp edi [ebp+arg_0] +
jge loc_100B751  +
mov eax [ebp+var_2DC] +
mov [eax+edi] dl +
inc edi  +
test ecx ecx +
jg loc_100B73D  +
dec edi  +
jmp loc_100B772  +
mov eax [ebp+arg_4] +
movzx eax byte ptr [edi+eax] +
movsx ecx si +
sub eax ecx +
add eax 11h +
cdq   +
push 11h  +
pop ecx  +
idiv  ecx +
mov eax [ebp+var_2DC] +
mov [eax+edi] dl +
inc edi  +
cmp edi [ebp+arg_0] +
jl loc_100B51D  +
xor eax eax +
cmp [ebx+2EBCh] eax +
setz al  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1005F1E  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
lea esi [ebx+0A18h] +
push esi  +
lea eax [ebx+2B14h] +
push eax  +
push 100h  +
call sub_100B4B3  +
test eax eax +
jnz loc_100B7C9  +
xor eax eax +
jmp loc_100B85A  +
lea eax [ebx+0B18h] +
push eax  +
lea eax [ebx+2C14h] +
push eax  +
movzx eax byte ptr [ebx+2EB5h] +
shl eax 3 +
push eax  +
call sub_100B4B3  +
test eax eax +
jz loc_100B7C2  +
movzx ecx byte ptr [ebx+2EB5h] +
lea ecx ds:100h[ecx*8] +
mov eax 2A0h +
cmp ecx eax +
jge loc_100B804  +
mov eax ecx +
lea ecx [ebx+0E3Ch] +
push ecx  +
lea ecx [ebx+18h] +
push ecx  +
push 0Ah  +
push esi  +
push eax  +
push ebx  +
call sub_100B8B6  +
test eax eax +
jz loc_100B7C2  +
push edi  +
lea edi [ebx+0CB8h] +
push edi  +
lea eax [ebx+2DB4h] +
push eax  +
mov esi 0F9h +
push esi  +
call sub_100B4B3  +
test eax eax +
jz loc_100B859  +
lea eax [ebx+233Ch] +
push eax  +
lea eax [ebx+818h] +
push eax  +
push 8  +
push edi  +
push esi  +
push ebx  +
call sub_100B8B6  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor ebx ebx +
lea edi [esi+0E34h] +
push 3  +
push esi  +
call sub_100A478  +
mov [edi+ebx] al +
inc ebx  +
cmp ebx 8 +
jl loc_100B878  +
cmp dword ptr [esi+2EBCh] 0 +
jz loc_100B896  +
xor eax eax +
jmp loc_100B8AA  +
lea eax [esi+0DB4h] +
push eax  +
push edi  +
push esi  +
call sub_100BABD  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A0h +
push esi  +
push edi  +
push 10h  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_9C] +
stos   +
xor esi esi +
xor ecx ecx +
cmp [ebp+arg_4] esi +
jbe loc_100B8F5  +
mov eax [ebp+arg_8] +
add eax ecx +
cmp byte ptr [eax] 10h +
ja loc_100B943  +
movzx eax byte ptr [eax] +
lea eax [ebp+eax*4+var_A0] +
inc dword ptr [eax]  +
inc ecx  +
cmp ecx [ebp+arg_4] +
jb loc_100B8D9  +
xor edx edx +
inc edx  +
mov [ebp+var_58] esi +
mov eax edx +
mov edi [ebp+eax*4+var_A0] +
push 10h  +
pop ecx  +
sub ecx eax +
shl edi cl +
add edi [ebp+eax*4+var_5C] +
inc eax  +
mov [ebp+eax*4+var_5C] edi +
cmp eax 10h +
jbe loc_100B8FD  +
cmp [ebp+var_18] 10000h +
jz loc_100B94A  +
cmp [ebp+var_18] esi +
jnz loc_100B943  +
mov cl [ebp+arg_C] +
shl edx cl +
add edx edx +
push edx  +
push esi  +
push [ebp+arg_10]  +
call memset  +
xor eax eax +
add esp 0Ch +
inc eax  +
jmp loc_100BAAE  +
xor eax eax +
jmp loc_100BAAE  +
movzx esi [ebp+arg_C] +
push ebx  +
mov bl 10h +
sub bl [ebp+arg_C] +
mov eax edx +
mov [ebp+var_10] esi +
cmp esi edx +
jb loc_100B982  +
lea edi [esi-1] +
movzx ecx bl +
lea edx [ebp+eax*4+var_5C] +
shr dword ptr [edx] cl +
xor edx edx +
inc edx  +
mov ecx edi +
shl edx cl +
inc eax  +
dec edi  +
mov [ebp+eax*4+var_A4] edx +
cmp eax esi +
jbe loc_100B960  +
cmp eax 10h +
ja loc_100B99A  +
push 10h  +
pop ecx  +
sub ecx eax +
xor edx edx +
inc edx  +
shl edx cl +
inc eax  +
dec ecx  +
mov [ebp+eax*4+var_A4] edx +
cmp eax 10h +
jbe loc_100B987  +
mov eax [ebp+esi*4+var_58] +
movzx ecx bl +
mov ebx [ebp+arg_10] +
shr eax cl +
mov [ebp+var_14] ecx +
cmp eax 10000h +
jz loc_100B9CA  +
xor edx edx +
inc edx  +
mov ecx esi +
shl edx cl +
sub edx eax +
add edx edx +
push edx  +
lea eax [ebx+eax*2] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov ecx [ebp+arg_4] +
xor eax eax +
mov [ebp+var_8] ecx +
mov [ebp+var_C] eax +
test ecx ecx +
jle loc_100BAAA  +
mov ecx [ebp+arg_8] +
mov al [eax+ecx] +
test al al +
jz loc_100BA9A  +
movzx ecx al +
shl ecx 2 +
mov edx [ebp+ecx+var_A0] +
lea esi [ebp+ecx+var_5C] +
mov edi [esi] +
add edx edi +
cmp al [ebp+arg_C] +
ja loc_100BA3F  +
mov ecx [ebp+var_10] +
xor eax eax +
inc eax  +
shl eax cl +
cmp edx eax +
ja loc_100BAB4  +
cmp edi edx +
jnb loc_100BA3B  +
mov eax [ebp+var_C] +
lea ebx [ebx+edi*2] +
mov ecx edx +
sub ecx edi +
mov edi ebx +
movzx ebx ax +
mov eax ebx +
shl ebx 10h +
or eax ebx +
mov ebx [ebp+arg_10] +
shr ecx 1 +
stos   +
adc ecx ecx +
stos   +
mov [esi] edx +
jmp loc_100BA9A  +
mov ecx [ebp+var_14] +
sub al [ebp+arg_C] +
mov [esi] edx +
mov edx edi +
shr edx cl +
mov ecx [ebp+var_10] +
mov [ebp+var_1] al +
shl edi cl +
lea edx [ebx+edx*2] +
cmp word ptr [edx] 0 +
mov eax [ebp+arg_14] +
jnz loc_100BA7B  +
mov ecx [ebp+var_8] +
shl ecx 2 +
xor esi esi +
mov [ecx+eax+2] si +
mov [ecx+eax] si +
mov ecx [ebp+var_8] +
neg ecx  +
inc [ebp+var_8]  +
mov [edx] cx +
movsx ecx word ptr [edx] +
shl ecx 2 +
sub eax ecx +
test di di +
jge loc_100BA8A  +
inc eax  +
inc eax  +
add edi edi +
dec [ebp+var_1]  +
mov edx eax +
jnz loc_100BA56  +
mov ax word ptr [ebp+var_C] +
mov [edx] ax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax [ebp+arg_4] +
mov [ebp+var_C] eax +
jl loc_100B9DD  +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 18h  +
xor eax eax +
jmp loc_100BAAD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax dword_100D00C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
mov [ebp+var_54] eax +
xor eax eax +
push edi  +
movzx edx ax +
push 8  +
mov eax edx +
shl edx 10h +
pop ecx  +
or eax edx +
lea edi [ebp+var_4A] +
push 10h  +
stos   +
mov [ebp+var_58] esi +
xor ecx ecx +
pop edx  +
movzx eax cx +
add eax esi +
cmp [eax] dl +
ja loc_100BBF9  +
movzx eax byte ptr [eax] +
lea eax [ebp+eax*2-4Ch] +
inc word ptr [eax]  +
inc ecx  +
cmp cx 8 +
jb loc_100BAF6  +
xor eax eax +
push 0Fh  +
mov [ebp+var_26] ax +
pop ecx  +
mov di word ptr [ebp+eax+var_4A] +
shl di cl +
add di [ebp+eax+var_26] +
dec ecx  +
mov [ebp+eax+var_24] di +
inc eax  +
inc eax  +
dec edx  +
jnz loc_100BB1D  +
xor eax eax +
cmp [ebp+var_6] ax +
jnz loc_100BBE9  +
push 6  +
pop ecx  +
push 7  +
pop edx  +
shr [ebp+eax+var_26] 9 +
xor edi edi +
inc edi  +
shl edi cl +
dec ecx  +
inc eax  +
inc eax  +
dec edx  +
mov [ebp+eax+var_4C] di +
jnz loc_100BB47  +
push 8  +
pop ecx  +
push 9  +
lea eax [ebp+var_3C] +
pop edx  +
xor edi edi +
inc edi  +
shl edi cl +
dec ecx  +
mov [eax] di +
inc eax  +
inc eax  +
dec edx  +
jnz loc_100BB66  +
push 80h  +
push edx  +
push [ebp+var_54]  +
call memset  +
add esp 0Ch +
mov byte ptr [ebp+var_50] 0 +
movzx eax byte ptr [ebp+var_50] +
mov al [eax+esi] +
test al al +
jz loc_100BBDD  +
movzx eax al +
add eax eax +
lea edi [ebp+eax-28h] +
movzx ecx word ptr [edi] +
mov ax [ebp+eax+var_4C] +
add ax cx +
movzx esi ax +
mov eax 80h +
cmp si ax +
ja loc_100BBF9  +
movzx ecx cx +
cmp cx si +
jnb loc_100BBD7  +
mov edx esi +
movzx eax cx +
add eax [ebp+var_54] +
sub edx ecx +
movzx ecx dx +
push ecx  +
push [ebp+var_50]  +
push eax  +
call memset  +
add esp 0Ch +
mov [edi] si +
mov esi [ebp+var_58] +
inc byte ptr [ebp+var_50]  +
cmp byte ptr [ebp+var_50] 8 +
jb loc_100BB89  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1005F1E  +
leave   +
retn 0Ch  +
xor eax eax +
jmp loc_100BBE9  +
***
