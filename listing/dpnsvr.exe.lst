mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jz loc_1001650  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov [eax+14h] ecx +
mov [eax+1Ch] ecx +
mov [eax+18h] ecx +
mov [eax+20h] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+28h] ecx +
mov [eax+24h] ecx +
mov [eax+2Ch] ecx +
mov [eax+10h] ecx +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+14h] +
call sub_1001657  +
xor eax eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+48h] eax +
mov [esi+44h] eax +
mov [esi+4Ch] eax +
mov [esi+50h] eax +
mov [esi+54h] eax +
mov [esi+5Ch] eax +
mov [esi+60h] eax +
mov [esi+64h] eax +
mov [esi+58h] eax +
mov [esi+68h] eax +
mov [esi+6Ch] eax +
mov [esi+70h] eax +
mov dword ptr [esi] 424F5344h +
lea eax [esi+78h] +
mov [eax] eax +
mov [eax+4] eax +
lea eax [esi+80h] +
mov [eax] eax +
mov [eax+4] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] 424F535Fh +
jz loc_10016FB  +
push esi  +
call sub_1001633  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1008018 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_8] +
cmp byte_1008000 bl +
jz loc_1001738  +
push offset dword_10011AC  +
call sub_1004E30  +
mov byte_1008000 bl +
push ebx  +
push offset ValueName  +
call ds:RegisterApplicationRestart  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call ds:HeapSetInformation  +
push ebx  +
call sub_10036A6  +
test eax eax +
jz loc_10017F2  +
call sub_1003789  +
test eax eax +
jl loc_10017F2  +
push ebx  +
call sub_1003803  +
test eax eax +
jl loc_10017F2  +
push esi  +
call ds:lstrlenW  +
test eax eax +
jle loc_10017B0  +
push 0FFFFFFFFh  +
push offset String2  +
push 0FFFFFFFFh  +
push esi  +
push 1  +
push 409h  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_10017F2  +
lea eax [ebp+pguid] +
push eax  +
call ds:CoCreateGuid  +
lea eax [ebp+pguid] +
push eax  +
call sub_1004083  +
jmp loc_10017F2  +
push 0A0h  +
call sub_1001615  +
pop ecx  +
cmp eax ebx +
jz loc_10017CA  +
mov ecx eax +
call sub_1001682  +
mov esi eax +
jmp loc_10017CC  +
xor esi esi +
cmp esi ebx +
jz loc_10017F2  +
mov ecx esi +
call sub_10019C1  +
test eax eax +
jl loc_10017E9  +
mov ecx esi +
call sub_1002581  +
mov ecx esi +
call sub_1002148  +
push 1  +
mov ecx esi +
call sub_10016E0  +
call CoUninitialize  +
call sub_10037B6  +
call sub_1003539  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_10030C4  +
leave   +
retn 10h  +
***
mov eax ecx +
and dword ptr [eax+38h] 0 +
mov dword ptr [eax+10h] 1 +
lea ecx [eax+8] +
mov dword ptr [eax+14h] 0 +
mov [eax] eax +
mov [eax+4] eax +
mov [ecx] ecx +
mov [ecx+4] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov eax ecx +
push 4  +
lea edi [eax+18h] +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
setz al  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov eax ecx +
push 4  +
lea edi [eax+28h] +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
setz al  +
pop esi  +
pop ebp  +
retn 4  +
***
push 400h  +
call ds:OpenProcess  +
test eax eax +
jnz loc_10018A9  +
call ds:GetLastError  +
cmp eax 5 +
jz loc_10018B0  +
xor eax eax +
retn   +
push eax  +
call ds:CloseHandle  +
xor eax eax +
inc eax  +
retn   +
***
mov dword ptr [ecx+14h] 1 +
push edi  +
xor eax eax +
lea edi [ecx+18h] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov [ecx+28h] eax +
mov dword ptr [ecx] offset off_1008004 +
mov [ecx+2Ch] eax +
mov [ecx+30h] eax +
mov [ecx+34h] eax +
mov [ecx+38h] eax +
mov [ecx+3Ch] eax +
lea eax [ecx+4] +
mov [eax] eax +
mov [eax+4] eax +
lea eax [ecx+0Ch] +
mov [eax] eax +
mov [eax+4] eax +
mov eax ecx +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
lea esi [ecx+18h] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
mov edx [ecx+2Ch] +
mov [eax+14h] edx +
mov edx [ecx+3Ch] +
mov [eax+24h] edx +
mov edx [ecx+30h] +
mov [eax+18h] edx +
mov edx [ecx+38h] +
mov [eax+20h] edx +
mov ecx [ecx+34h] +
and dword ptr [eax+10h] 0 +
pop edi  +
mov [eax+1Ch] ecx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+18h] 0 +
jz loc_1001950  +
call sub_1002A40  +
test [ebp+arg_0] 1 +
jz loc_100195D  +
push esi  +
call sub_1001633  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
lea ecx [eax+8] +
mov dword ptr [eax+10h] 1 +
mov [eax] eax +
mov [eax+4] eax +
mov [ecx] ecx +
mov [ecx+4] ecx +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+78h] +
mov ecx [eax] +
cmp ecx [eax+4] +
jnz loc_10019B7  +
cmp ecx eax +
jnz loc_10019B7  +
call ds:GetTickCount  +
sub eax [esi+74h] +
cmp eax 4E20h +
jbe loc_10019B7  +
xor eax eax +
pop esi  +
retn   +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+88h] +
xor ebx ebx +
push eax  +
mov [ebp+var_8] ebx +
call sub_10035B7  +
test eax eax +
jnz loc_10019EE  +
mov [ebp+var_4] 8007000Eh +
jmp loc_1001A9D  +
push offset Name  +
push ebx  +
push 1  +
call sub_1003304  +
mov edi ds:CreateEventW +
push eax  +
call edi  +
mov [esi+8] eax +
cmp eax ebx +
jz loc_1001A89  +
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_1001A21  +
mov [ebp+var_4] 80158190h +
jmp loc_1001A90  +
push offset aLocal0cba5850F  +
push ebx  +
push 1  +
call sub_1003304  +
push eax  +
call edi  +
mov [esi+0Ch] eax +
cmp eax ebx +
jz loc_1001A89  +
push ebx  +
push 10000h  +
push offset aSSpCabFZ  +
lea ecx [esi+14h] +
call sub_1004702  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_1001A90  +
push offset aLocal23ad69b4E  +
push ebx  +
mov [ebp+var_8] 1 +
call sub_1003304  +
mov edi ds:CreateMutexW +
push eax  +
call edi  +
mov [esi+44h] eax +
cmp eax ebx +
jz loc_1001A89  +
push offset aLocal9f84ffa46  +
push ebx  +
call sub_1003304  +
push eax  +
call edi  +
mov [esi+48h] eax +
cmp eax ebx +
jnz loc_1001AE6  +
mov [ebp+var_4] 8007000Eh +
lea eax [esi+88h] +
push eax  +
call ds:DeleteCriticalSection  +
mov eax [esi+8] +
mov edi ds:CloseHandle +
cmp eax ebx +
jz loc_1001AB0  +
push eax  +
call edi  +
mov [esi+8] ebx +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_1001ABD  +
push eax  +
call edi  +
mov [esi+0Ch] ebx +
cmp [ebp+var_8] ebx +
jz loc_1001ACA  +
lea ecx [esi+14h] +
call sub_1004969  +
mov eax [esi+44h] +
cmp eax ebx +
jz loc_1001AD7  +
push eax  +
call edi  +
mov [esi+44h] ebx +
mov eax [esi+48h] +
cmp eax ebx +
jz loc_1001B0D  +
push eax  +
call edi  +
mov [esi+48h] ebx +
jmp loc_1001B0D  +
mov edi ds:GetTickCount +
call edi  +
mov [esi+10h] eax +
call edi  +
push dword ptr [esi+8]  +
mov edi ds:SetEvent +
mov [esi+74h] eax +
mov dword ptr [esi+4] 1 +
call edi  +
push dword ptr [esi+0Ch]  +
call edi  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
lea ecx [esi+80h] +
mov eax [ecx] +
push edi  +
xor ebx ebx +
jmp loc_1001B35  +
mov eax [eax] +
inc ebx  +
cmp eax ecx +
jnz loc_1001B32  +
cmp ebx [esi+54h] +
ja loc_1001B46  +
test ebx ebx +
jnz loc_1001BD4  +
mov edi ebx +
imul edi edi +
push offset aLocalA7b81e49A  +
add edi 8 +
push edi  +
push 0  +
push 4  +
call sub_1003304  +
push eax  +
push 0FFFFFFFFh  +
call ds:CreateFileMappingW  +
mov [ebp+hObject] eax +
test eax eax +
jnz loc_1001B7A  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1001C2C  +
push edi  +
push 0  +
push 0  +
push 6  +
push eax  +
call ds:MapViewOfFile  +
mov edi eax +
test edi edi +
jnz loc_1001BA4  +
call ds:GetLastError  +
push [ebp+hObject]  +
mov esi eax +
call ds:CloseHandle  +
jmp loc_1001C2C  +
mov eax [esi+50h] +
test eax eax +
jz loc_1001BB6  +
push eax  +
call ds:UnmapViewOfFile  +
and dword ptr [esi+50h] 0 +
mov eax [esi+4Ch] +
test eax eax +
jz loc_1001BC8  +
push eax  +
call ds:CloseHandle  +
and dword ptr [esi+4Ch] 0 +
mov eax [ebp+hObject] +
mov [esi+50h] edi +
mov [esi+4Ch] eax +
mov [esi+54h] ebx +
mov edi [esi+50h] +
push 0FFFFFFFFh  +
push dword ptr [esi+48h]  +
lea eax [edi+8] +
mov [ebp+var_4] eax +
call ds:WaitForSingleObject  +
and [ebp+hObject] 0 +
mov [edi+4] ebx +
mov eax [esi+10h] +
mov [edi] eax +
mov edi [esi+80h] +
test ebx ebx +
jbe loc_1001C21  +
lea eax [esi+80h] +
cmp edi eax +
jz loc_1001C21  +
push [ebp+var_4]  +
lea ecx [edi-4] +
call sub_10018FD  +
add [ebp+var_4] 28h +
inc [ebp+hObject]  +
mov edi [edi] +
cmp [ebp+hObject] ebx +
jb loc_1001BFE  +
push dword ptr [esi+48h]  +
call ds:ReleaseMutex  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
push ebx  +
mov ebx ecx +
push esi  +
lea eax [ebx+80h] +
push edi  +
mov edi [eax] +
mov [ebp+dwNumberOfBytesToMap] 8 +
jmp loc_1001CD9  +
add [ebp+dwNumberOfBytesToMap] 14h +
lea eax [edi-4] +
mov edi [edi] +
add eax 0Ch +
mov esi [eax] +
mov [ebp+var_30] eax +
cmp esi eax +
jz loc_1001CD3  +
jmp loc_1001C73  +
mov esi [ebp+var_C] +
mov eax [esi] +
add [ebp+dwNumberOfBytesToMap] 14h +
mov [ebp+var_C] eax +
lea eax [esi+54h] +
push eax  +
mov [ebp+lpCriticalSection] eax +
call ds:EnterCriticalSection  +
lea eax [esi+8] +
mov esi [eax] +
mov [ebp+var_38] eax +
cmp esi eax +
jz loc_1001CC2  +
add [ebp+dwNumberOfBytesToMap] 24h +
lea edx [ebp+var_8] +
mov eax esi +
mov esi [esi] +
and [ebp+var_8] 0 +
mov eax [eax+1Ch] +
mov ecx [eax] +
push edx  +
push 0  +
push eax  +
call dword ptr [ecx+28h]  +
cmp eax 80158100h +
jnz loc_1001CBD  +
mov eax [ebp+var_8] +
add [ebp+dwNumberOfBytesToMap] eax +
cmp esi [ebp+var_38] +
jnz loc_1001C95  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
mov eax [ebp+var_30] +
cmp [ebp+var_C] eax +
jnz loc_1001C70  +
lea eax [ebx+80h] +
cmp edi eax +
jnz loc_1001C59  +
mov eax [ebp+dwNumberOfBytesToMap] +
xor esi esi +
cmp eax [ebx+60h] +
jbe loc_1001D75  +
push offset aLocal733a46d6B  +
push eax  +
push esi  +
push 4  +
call sub_1003304  +
push eax  +
push 0FFFFFFFFh  +
call ds:CreateFileMappingW  +
mov edi eax +
cmp edi esi +
jnz loc_1001D1A  +
call ds:GetLastError  +
mov [ebp+dwNumberOfBytesToMap] eax +
jmp loc_1001DD0  +
push [ebp+dwNumberOfBytesToMap]  +
push esi  +
push esi  +
push 6  +
push edi  +
call ds:MapViewOfFile  +
mov [ebp+var_38] eax +
cmp eax esi +
jnz loc_1001D44  +
call ds:GetLastError  +
push edi  +
mov [ebp+dwNumberOfBytesToMap] eax +
call ds:CloseHandle  +
jmp loc_1001DD0  +
mov eax [ebx+5Ch] +
cmp eax esi +
jz loc_1001D55  +
push eax  +
call ds:UnmapViewOfFile  +
mov [ebx+5Ch] esi +
mov eax [ebx+58h] +
cmp eax esi +
jz loc_1001D66  +
push eax  +
call ds:CloseHandle  +
mov [ebx+58h] esi +
mov eax [ebp+var_38] +
mov [ebx+5Ch] eax +
mov eax [ebp+dwNumberOfBytesToMap] +
mov [ebx+58h] edi +
mov [ebx+60h] eax +
push 0FFFFFFFFh  +
push dword ptr [ebx+48h]  +
call ds:WaitForSingleObject  +
push esi  +
push dword ptr [ebx+60h]  +
lea ecx [ebp+var_54] +
push dword ptr [ebx+5Ch]  +
call sub_1003B20  +
mov eax [ebp+var_50] +
push esi  +
push 8  +
push esi  +
lea ecx [ebp+var_54] +
mov [ebp+var_20] esi +
mov [ebp+var_3C] eax +
call sub_1003B7D  +
mov [ebp+dwNumberOfBytesToMap] eax +
cmp eax esi +
jnz loc_1001F76  +
lea ecx [ebx+80h] +
mov eax [ecx] +
cmp eax ecx +
jnz loc_1001DDB  +
mov eax [ebp+var_20] +
mov ecx [ebp+var_3C] +
mov [ecx+4] eax +
push dword ptr [ebx+48h]  +
call ds:ReleaseMutex  +
mov [ebp+dwNumberOfBytesToMap] esi +
mov eax [ebp+dwNumberOfBytesToMap] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov eax [ebp+var_38] +
inc [ebp+var_20]  +
lea edi [eax-4] +
mov eax [eax] +
push esi  +
mov [ebp+var_38] eax +
mov eax [ebp+var_50] +
push 14h  +
push esi  +
lea ecx [ebp+var_54] +
mov [ebp+var_30] edi +
mov [ebp+lpCriticalSection] eax +
call sub_1003B7D  +
mov [ebp+dwNumberOfBytesToMap] eax +
cmp eax esi +
jnz loc_1001F76  +
lea ecx [edi+0Ch] +
mov eax [ecx] +
mov [ebp+var_1C] esi +
cmp eax ecx +
jz loc_1001F43  +
jmp loc_1001E1D  +
mov eax [ebp+var_C] +
xor esi esi +
inc [ebp+var_1C]  +
mov edi eax +
mov eax [eax] +
push esi  +
mov [ebp+var_C] eax +
mov eax [ebp+var_50] +
push 14h  +
push esi  +
lea ecx [ebp+var_54] +
mov [ebp+var_14] edi +
mov [ebp+var_2C] eax +
call sub_1003B7D  +
mov [ebp+dwNumberOfBytesToMap] eax +
cmp eax esi +
jnz loc_1001F76  +
lea eax [edi+54h] +
push eax  +
mov [ebp+var_18] esi +
call ds:EnterCriticalSection  +
lea ecx [edi+8] +
mov eax [ecx] +
cmp eax ecx +
jz loc_1001F14  +
jmp loc_1001E68  +
mov eax [ebp+var_28] +
xor esi esi +
inc [ebp+var_18]  +
mov [ebp+var_24] eax +
mov eax [eax] +
push esi  +
mov [ebp+var_28] eax +
mov eax [ebp+var_50] +
push 24h  +
push esi  +
lea ecx [ebp+var_54] +
mov [ebp+var_10] eax +
call sub_1003B7D  +
mov [ebp+dwNumberOfBytesToMap] eax +
cmp eax esi +
jnz loc_1001F6C  +
mov eax [ebp+var_10] +
mov edi [ebp+var_24] +
mov [eax+20h] esi +
lea edx [ebp+var_8] +
push edx  +
mov [ebp+var_8] esi +
mov eax [edi+1Ch] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+28h]  +
cmp eax 80158100h +
jnz loc_1001EE2  +
push esi  +
push [ebp+var_8]  +
lea ecx [ebp+var_54] +
push esi  +
call sub_1003BE5  +
test eax eax +
jnz loc_1001EE2  +
mov eax [edi+1Ch] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push [ebp+var_4C]  +
push eax  +
call dword ptr [ecx+28h]  +
test eax eax +
jnz loc_1001EE2  +
mov eax [ebp+var_4C] +
sub eax [ebp+var_54] +
mov ecx [ebp+var_10] +
mov [ecx+20h] eax +
mov eax [edi+14h] +
mov edi [ebp+var_10] +
lea esi [eax+18h] +
mov eax [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi [eax+14h] +
mov edi [ebp+var_10] +
mov eax [ebp+var_14] +
add edi 10h +
add esi 28h +
movs   +
movs   +
movs   +
add eax 8 +
movs   +
mov edi [ebp+var_14] +
cmp [ebp+var_28] eax +
jnz loc_1001E63  +
lea eax [edi+54h] +
push eax  +
call ds:LeaveCriticalSection  +
mov eax [ebp+var_18] +
mov ecx [ebp+var_2C] +
lea esi [edi+1Ch] +
mov edi [ebp+var_2C] +
movs   +
movs   +
movs   +
movs   +
mov [ecx+10h] eax +
mov eax [ebp+var_30] +
add eax 0Ch +
cmp [ebp+var_C] eax +
jnz loc_1001E18  +
mov edi [ebp+var_30] +
mov eax [ebp+lpCriticalSection] +
mov ecx [ebp+var_1C] +
lea esi [edi+18h] +
mov edi [ebp+lpCriticalSection] +
movs   +
movs   +
movs   +
movs   +
mov [eax+10h] ecx +
lea eax [ebx+80h] +
xor esi esi +
cmp [ebp+var_38] eax +
jnz loc_1001DD8  +
jmp loc_1001DBB  +
add edi 54h +
push edi  +
call ds:LeaveCriticalSection  +
push dword ptr [ebx+48h]  +
call ds:ReleaseMutex  +
jmp loc_1001DD0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
lea edi [ecx+78h] +
mov esi [edi] +
mov ebx 80158180h +
jmp loc_1001FBB  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100183F  +
test eax eax +
jz loc_1001FB9  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1001863  +
test eax eax +
jnz loc_1001FC1  +
mov esi [esi] +
cmp esi edi +
jnz loc_1001F9D  +
jmp loc_1001FD2  +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedIncrement  +
mov eax [ebp+arg_8] +
mov [eax] esi +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea edi [ecx+80h] +
mov esi [edi] +
mov [ebp+var_4] 80158180h +
cmp esi edi +
jz loc_1002029  +
push ebx  +
push [ebp+arg_0]  +
lea ebx [esi-4] +
mov ecx ebx +
call sub_100183F  +
test eax eax +
jnz loc_1002015  +
mov esi [esi] +
cmp esi edi +
jnz loc_1001FFC  +
jmp loc_1002028  +
lea eax [ebx+14h] +
push eax  +
call ds:InterlockedIncrement  +
mov eax [ebp+arg_4] +
and [ebp+var_4] 0 +
mov [eax] ebx +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
dec eax  +
jz loc_1002064  +
dec eax  +
jz loc_1002059  +
dec eax  +
jz loc_1002052  +
mov eax 80070057h +
jmp loc_1002069  +
call sub_1001C38  +
jmp loc_1002069  +
mov dword ptr [ecx+4] 2 +
xor eax eax +
jmp loc_1002069  +
call sub_1001B1A  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push esi  +
lea ecx [ebp+var_3C] +
call sub_1001657  +
mov eax 10000h +
push eax  +
push eax  +
push [ebp+arg_0]  +
lea ecx [ebp+var_3C] +
call sub_1004702  +
mov esi eax +
test esi esi +
jnz loc_10020CE  +
mov eax [ebp+arg_8] +
push esi  +
push 2  +
mov [ebp+var_8] eax +
mov eax [ebp+arg_4] +
push 1388h  +
mov [ebp+var_4] eax +
push 0Ch  +
lea eax [ebp+var_C] +
push eax  +
lea ecx [ebp+var_3C] +
mov [ebp+var_C] 3 +
call sub_100449C  +
lea ecx [ebp+var_3C] +
mov esi eax +
call sub_1004969  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+14h] +
push eax  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_100210E  +
mov eax [esi+28h] +
test eax eax +
jz loc_1002107  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov eax [esi+28h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+28h] 0 +
push esi  +
call sub_1001633  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_1002141  +
mov ecx [esi+34h] +
test ecx ecx +
jz loc_1002138  +
call sub_10020DA  +
and dword ptr [esi+34h] 0 +
push 1  +
mov ecx esi +
call sub_100193D  +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+4] ebx +
jz loc_1002253  +
mov eax [esi+8] +
push edi  +
mov edi ds:CloseHandle +
cmp eax ebx +
jz loc_100216D  +
push eax  +
call edi  +
mov [esi+8] ebx +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_100217A  +
push eax  +
call edi  +
mov [esi+0Ch] ebx +
mov eax [esi+44h] +
cmp eax ebx +
jz loc_1002187  +
push eax  +
call edi  +
mov [esi+44h] ebx +
mov eax [esi+48h] +
cmp eax ebx +
jz loc_1002194  +
push eax  +
call edi  +
mov [esi+48h] ebx +
mov eax [esi+50h] +
cmp eax ebx +
jz loc_10021A5  +
push eax  +
call ds:UnmapViewOfFile  +
mov [esi+50h] ebx +
mov eax [esi+4Ch] +
cmp eax ebx +
jz loc_10021B2  +
push eax  +
call edi  +
mov [esi+4Ch] ebx +
mov eax [esi+5Ch] +
cmp eax ebx +
jz loc_10021C3  +
push eax  +
call ds:UnmapViewOfFile  +
mov [esi+5Ch] ebx +
mov eax [esi+58h] +
cmp eax ebx +
jz loc_10021D0  +
push eax  +
call edi  +
mov [esi+58h] ebx +
lea eax [esi+78h] +
mov ebx [eax] +
jmp loc_1002200  +
mov edi ebx +
mov ebx [ebx] +
mov ecx edi +
call sub_1002C45  +
mov eax [edi] +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov ecx [edi] +
mov eax [edi+4] +
mov [eax] ecx +
mov ecx edi +
mov [edi] edi +
mov [edi+4] edi +
call sub_1002C20  +
lea eax [esi+78h] +
cmp ebx eax +
jnz loc_10021D7  +
lea eax [esi+80h] +
mov edi [eax] +
jmp loc_1002235  +
lea ecx [edi-4] +
mov edi [edi] +
lea eax [ecx+4] +
mov edx [eax] +
mov ebx [eax+4] +
mov [edx+4] ebx +
mov edx [eax+4] +
mov ebx [eax] +
mov [edx] ebx +
mov [eax] eax +
mov [eax+4] eax +
call sub_10020DA  +
lea eax [esi+80h] +
cmp edi eax +
jnz loc_100220E  +
lea ecx [esi+14h] +
call sub_1004969  +
lea eax [esi+88h] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi+4] 0 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_1008018 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor eax eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_1C] eax +
mov [ebp+var_18] eax +
mov [ebp+var_20] eax +
mov [ebp+ppv] eax +
mov [ebp+var_30] eax +
mov [ebp+var_2C] eax +
lea eax [ebp+var_1C] +
push eax  +
lea edi [esi+8] +
push edi  +
lea ebx [esi+2Ch] +
push ebx  +
mov [ebp+var_28] ecx +
call sub_1001F89  +
test eax eax +
jz loc_10022E0  +
push 3Ch  +
call sub_1001615  +
pop ecx  +
test eax eax +
jz loc_10022B7  +
mov ecx eax +
call sub_1001818  +
mov [ebp+var_1C] eax +
jmp loc_10022BB  +
and [ebp+var_1C] 0 +
mov ecx [ebp+var_1C] +
test ecx ecx +
jnz loc_10022C9  +
mov ebx 8007000Eh +
jmp loc_100233A  +
push dword ptr [esi+18h]  +
push edi  +
push ebx  +
call sub_1002BF2  +
mov ebx eax +
test ebx ebx +
jnz loc_1002320  +
mov [ebp+var_30] 1 +
mov ecx [ebp+var_28] +
lea eax [ebp+var_18] +
push eax  +
lea edi [esi+1Ch] +
push edi  +
call sub_1001FE0  +
test eax eax +
jz loc_100237D  +
push 40h  +
call sub_1001615  +
pop ecx  +
test eax eax +
jz loc_1002310  +
mov ecx eax +
call sub_10018B9  +
mov [ebp+var_18] eax +
jmp loc_1002314  +
and [ebp+var_18] 0 +
mov ecx [ebp+var_18] +
test ecx ecx +
jnz loc_100236A  +
mov ebx 8007000Eh +
mov esi [ebp+var_1C] +
test esi esi +
jz loc_100232E  +
mov ecx esi +
call sub_1002C20  +
mov ecx [ebp+var_18] +
test ecx ecx +
jz loc_100233A  +
call sub_10020DA  +
mov ecx [ebp+var_20] +
test ecx ecx +
jz loc_100234A  +
call sub_1002115  +
and [ebp+var_20] 0 +
mov eax [ebp+ppv] +
test eax eax +
jz loc_1002357  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_10030C4  +
leave   +
retn 4  +
push edi  +
call sub_10027F1  +
mov ebx eax +
test ebx ebx +
jnz loc_1002320  +
mov [ebp+var_2C] 1 +
xor edi edi +
push edi  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 1  +
push edi  +
push offset rguid  +
call sub_1003AAB  +
mov ebx eax +
cmp ebx edi +
jl loc_1002320  +
mov eax [ebp+ppv] +
mov ecx [eax] +
add esi 40h +
push esi  +
push eax  +
call dword ptr [ecx+10h]  +
mov ebx eax +
cmp ebx edi +
jnz loc_1002320  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
push eax  +
call dword ptr [ecx+4Ch]  +
mov ebx eax +
cmp ebx edi +
jnz loc_10023F6  +
mov ecx [ebp+var_18] +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call sub_10028AA  +
mov ebx eax +
cmp ebx edi +
jz loc_10023F6  +
mov ecx [ebp+var_18] +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call sub_1002986  +
mov ebx eax +
cmp ebx edi +
jnz loc_1002320  +
mov eax [ebp+var_20] +
add eax 54h +
push eax  +
call ds:EnterCriticalSection  +
mov esi [ebp+var_1C] +
mov edx [ebp+var_20] +
lea ecx [esi+8] +
mov eax [ecx] +
jmp loc_1002417  +
cmp [eax+10h] edx +
jz loc_100243A  +
mov eax [eax] +
cmp eax ecx +
jnz loc_1002410  +
add edx 54h +
push edx  +
call ds:LeaveCriticalSection  +
push 20h  +
call sub_1001615  +
pop ecx  +
cmp eax edi +
jz loc_100244E  +
mov ecx eax +
call sub_1001969  +
jmp loc_1002450  +
add edx 54h +
push edx  +
call ds:LeaveCriticalSection  +
mov ebx 80158090h +
jmp loc_1002323  +
xor eax eax +
cmp eax edi +
jnz loc_100245E  +
mov ebx 8007000Eh +
jmp loc_1002323  +
push [ebp+ppv]  +
mov ecx eax +
push [ebp+var_20]  +
push esi  +
call sub_1002C95  +
cmp [ebp+var_30] edi +
mov edi ds:InterlockedIncrement +
jz loc_1002491  +
lea eax [esi+10h] +
push eax  +
call edi  +
mov eax [ebp+var_28] +
add eax 78h +
mov ecx [eax] +
mov [esi] ecx +
mov [esi+4] eax +
mov ecx [eax] +
mov [ecx+4] esi +
mov [eax] esi +
cmp [ebp+var_2C] 0 +
jz loc_1002323  +
mov eax [ebp+var_18] +
add eax 14h +
push eax  +
call edi  +
mov eax [ebp+var_28] +
mov ecx [ebp+var_18] +
sub eax 0FFFFFF80h +
mov edx [eax] +
add ecx 4 +
mov [ecx] edx +
mov [ecx+4] eax +
mov edx [eax] +
mov [edx+4] ecx +
mov [eax] ecx +
jmp loc_1002323  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_0] +
lea edx [eax+8] +
push edx  +
add eax 2Ch +
push eax  +
call sub_1001F89  +
mov edi eax +
test edi edi +
jz loc_10024FB  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_1002529  +
call sub_1002C20  +
jmp loc_1002529  +
push esi  +
mov esi [ebp+var_4] +
mov ecx esi +
call sub_1002C45  +
mov ecx esi +
call sub_1002C20  +
mov eax [esi] +
mov ecx [esi+4] +
mov [eax+4] ecx +
mov ecx [esi] +
mov eax [esi+4] +
mov [eax] ecx +
mov ecx esi +
mov [esi] esi +
mov [esi+4] esi +
call sub_1002C20  +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
lea ebx [ecx+78h] +
push edi  +
mov edi [ebx] +
cmp edi ebx +
jz loc_1002579  +
push esi  +
mov esi edi +
mov edi [edi] +
mov ecx esi +
call sub_1001887  +
test eax eax +
jnz loc_1002574  +
mov eax [esi] +
mov ecx [esi+4] +
mov [eax+4] ecx +
mov ecx [esi] +
mov eax [esi+4] +
mov [eax] ecx +
mov ecx esi +
mov [esi] esi +
mov [esi+4] esi +
call sub_1002C45  +
mov ecx esi +
call sub_1002C20  +
cmp edi ebx +
jnz loc_1002543  +
pop esi  +
pop edi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
cmp dword ptr [edi+4] 1 +
mov [ebp+var_8] esi +
jnz loc_1002680  +
push ebx  +
mov ebx ds:GetTickCount +
mov eax [edi+34h] +
push 1388h  +
push eax  +
call ds:WaitForSingleObject  +
cmp eax 102h +
jnz loc_10025DC  +
mov ecx edi +
call sub_1001990  +
test eax eax +
jnz loc_10025D0  +
mov dword ptr [edi+4] 2 +
jmp loc_100266A  +
mov ecx edi +
call sub_1002535  +
jmp loc_100266A  +
mov eax [ebp+var_8] +
mov [ebp+dwBytes] eax +
lea eax [ebp+dwBytes] +
push eax  +
push esi  +
lea eax [ebp+var_20] +
push eax  +
lea ecx [edi+14h] +
call sub_10049B2  +
cmp eax 80158100h +
jnz loc_100261C  +
test esi esi +
jz loc_1002605  +
push esi  +
call sub_1001633  +
pop ecx  +
push [ebp+dwBytes]  +
call sub_1001615  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_100267F  +
mov eax [ebp+dwBytes] +
mov [ebp+var_8] eax +
jmp loc_10025DC  +
test eax eax +
jl loc_1002674  +
cmp [ebp+dwBytes] 0 +
jz loc_10025DC  +
mov eax [esi] +
dec eax  +
jz loc_1002650  +
dec eax  +
jz loc_1002641  +
dec eax  +
dec eax  +
jnz loc_100266A  +
call ebx  +
push esi  +
mov ecx edi +
mov [edi+74h] eax +
call sub_1002037  +
jmp loc_100265D  +
call ebx  +
push esi  +
mov ecx edi +
mov [edi+74h] eax +
call sub_10024C8  +
jmp loc_100265D  +
call ebx  +
push esi  +
mov ecx edi +
mov [edi+74h] eax +
call sub_100225B  +
push dword ptr [esi+4]  +
push eax  +
lea eax [esi+8] +
push eax  +
call sub_1002072  +
cmp dword ptr [edi+4] 1 +
jz loc_10025A3  +
test esi esi +
jz loc_100267F  +
push esi  +
call sub_1001633  +
pop ecx  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edx ecx +
and dword ptr [edx+18h] 0 +
push edi  +
mov dword ptr [edx+10h] 1 +
mov dword ptr [edx+14h] 0 +
mov dword ptr [edx+2Ch] 80004005h +
mov [edx] edx +
mov [edx+4] edx +
lea eax [edx+8] +
mov [eax] eax +
mov [eax+4] eax +
xor eax eax +
lea edi [edx+1Ch] +
stos   +
stos   +
stos   +
stos   +
push 7  +
pop ecx  +
xor eax eax +
lea edi [edx+38h] +
stos   +
mov eax edx +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [ecx+30h]  +
mov [ecx+2Ch] eax +
call ds:SetEvent  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov eax ecx +
push 4  +
lea edi [eax+1Ch] +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
setz al  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push 4  +
pop ecx  +
mov edi (offset aSSpCabFZ+10h) +
xor eax eax +
cmps   +
jz loc_100273F  +
mov esi [ebp+arg_4] +
push 4  +
pop ecx  +
mov edi offset dword_1001450 +
xor eax eax +
cmps   +
jz loc_100273F  +
mov eax 80004002h +
jmp loc_1002749  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+10h]  +
mov ecx [eax+1Ch] +
call sub_10026CE  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+lpCriticalSection] +
and [ebp+var_C] 0 +
push ebx  +
push esi  +
mov esi [eax+0Ch] +
mov [ebp+var_8] eax +
lea eax [esi+54h] +
push edi  +
push eax  +
mov ebx ecx +
mov [ebp+lpCriticalSection] eax +
call ds:EnterCriticalSection  +
lea edi [esi+8] +
mov esi [edi] +
jmp loc_10027D6  +
mov eax [esi+1Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [esi+1Ch] +
mov [ebp+var_4] eax +
mov eax [ebx+28h] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push eax  +
call dword ptr [ecx+58h]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
mov esi [esi] +
cmp esi edi +
jnz loc_10027AB  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push eax  +
mov edi ecx +
lea esi [edi+28h] +
push esi  +
push offset stru_1001440  +
push 1  +
push eax  +
push [ebp+rguid]  +
mov [ebp+var_4] eax +
call sub_1003AAB  +
mov ebx eax +
test ebx ebx +
jl loc_1002873  +
mov eax [esi] +
and [ebp+var_8] 0 +
lea edx [ebp+var_C] +
push edx  +
mov [ebp+var_C] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
test ebx ebx +
jnz loc_1002873  +
push 30h  +
pop ebx  +
push ebx  +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
mov [ebp+var_4] 1 +
call memset  +
mov eax [esi] +
or [ebp+var_38] 0FFFFFFFFh +
add esp 0Ch +
lea edx [ebp+var_3C] +
push edx  +
mov [ebp+var_3C] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+40h]  +
mov ebx eax +
test ebx ebx +
jnz loc_1002873  +
test [ebp+var_18] 1 +
jnz loc_1002892  +
mov ebx 80004001h +
mov eax [esi] +
test eax eax +
jz loc_100289C  +
cmp [ebp+var_4] 0 +
jz loc_1002885  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
jmp loc_100289C  +
mov esi [ebp+rguid] +
add edi 18h +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
lea edi [ecx+0Ch] +
mov esi [edi] +
mov ebx 80158180h +
jmp loc_10028CE  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10026EB  +
test eax eax +
jnz loc_10028D4  +
mov esi [esi] +
cmp esi edi +
jnz loc_10028BE  +
jmp loc_10028E5  +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedIncrement  +
mov eax [ebp+arg_4] +
mov [eax] esi +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub eax 0 +
jz loc_100295F  +
dec eax  +
jz loc_1002952  +
dec eax  +
jz loc_100294A  +
dec eax  +
jz loc_1002942  +
dec eax  +
jz loc_1002927  +
dec eax  +
jz loc_100291F  +
dec eax  +
jnz loc_100295F  +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
call sub_100275F  +
jmp loc_1002961  +
mov eax [ebp+8] +
add eax 38h +
jmp loc_1002958  +
push esi  +
mov esi [ebp+8] +
lea eax [esi+34h] +
push eax  +
call ds:InterlockedIncrement  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_100277D  +
pop esi  +
jmp loc_1002961  +
mov eax [ebp+8] +
add eax 30h +
jmp loc_1002958  +
mov eax [ebp+8] +
add eax 2Ch +
jmp loc_1002958  +
mov eax [ebp+8] +
add eax 3Ch +
push eax  +
call ds:InterlockedIncrement  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+14h] +
test ecx ecx +
jz loc_100297B  +
call sub_1002115  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push 6Ch  +
mov ebx ecx +
call sub_1001615  +
pop ecx  +
test eax eax +
jz loc_10029A7  +
mov ecx eax +
call sub_1002689  +
mov esi eax +
jmp loc_10029A9  +
xor esi esi +
test esi esi +
jnz loc_10029B6  +
mov [ebp+var_4] 8007000Eh +
jmp loc_1002A09  +
mov ecx esi +
call sub_1002A17  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_10029FE  +
push [ebp+arg_0]  +
mov ecx esi +
push ebx  +
call sub_1002A50  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_10029FE  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_10029EA  +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedIncrement  +
mov [edi] esi +
lea eax [ebx+0Ch] +
mov ecx [eax] +
mov [esi] ecx +
mov [esi+4] eax +
mov ecx [eax] +
mov [ecx+4] esi +
mov [eax] esi +
xor esi esi +
pop edi  +
test esi esi +
jz loc_1002A09  +
mov ecx esi +
call sub_1002115  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+54h] +
push eax  +
call sub_10035B7  +
test eax eax +
jnz loc_1002A30  +
mov eax 8007000Eh +
pop esi  +
retn   +
mov dword ptr [esi+18h] 1 +
xor eax eax +
pop esi  +
retn   +
***
add ecx 54h +
push ecx  +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 0  +
mov ebx ecx +
lea esi [ebx+38h] +
push esi  +
push offset riid  +
push 1  +
push 0  +
push offset rguid  +
mov [ebp+var_8] 17B9h +
call sub_1003AAB  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1002B68  +
mov edi [ebp+arg_0] +
mov eax [esi] +
mov ecx [eax] +
lea edx [edi+18h] +
push edx  +
push eax  +
call dword ptr [ecx+34h]  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1002B68  +
mov eax [esi] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+50h]  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1002B68  +
mov esi [esi] +
mov eax [esi] +
push 2  +
push 4  +
lea ecx [ebp+var_8] +
push ecx  +
push offset aPort  +
push esi  +
call dword ptr [eax+48h]  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1002B68  +
xor esi esi +
push esi  +
push esi  +
push 1  +
push esi  +
call ds:CreateEventW  +
mov [ebx+30h] eax +
cmp eax esi +
jnz loc_1002AF4  +
mov [ebp+var_4] 8007000Eh +
jmp loc_1002B68  +
lea eax [edi+14h] +
push eax  +
call ds:InterlockedIncrement  +
mov esi [ebp+arg_4] +
mov [ebx+34h] edi +
lea edi [ebx+1Ch] +
movs   +
movs   +
movs   +
movs   +
mov esi ds:InterlockedIncrement +
lea edi [ebx+10h] +
push edi  +
mov dword ptr [ebx+3Ch] 20h +
call esi  +
push edi  +
mov [ebx+40h] ebx +
call esi  +
mov eax [ebp+arg_0] +
mov eax [eax+28h] +
mov edx [eax] +
lea ecx [ebx+38h] +
push ecx  +
push eax  +
call dword ptr [edx+1Ch]  +
mov [ebp+var_4] eax +
cmp eax 15800Eh +
jz loc_1002B4B  +
test eax eax +
jz loc_1002B4B  +
mov ecx ebx +
call sub_1002115  +
jmp loc_1002B68  +
push 0FFFFFFFFh  +
push dword ptr [ebx+30h]  +
call ds:WaitForSingleObject  +
mov eax [ebx+2Ch] +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1002B78  +
and dword ptr [ebx+48h] 0 +
and dword ptr [ebx+44h] 0 +
mov ecx [ebx+34h] +
test ecx ecx +
jz loc_1002B78  +
call sub_10020DA  +
and dword ptr [ebx+34h] 0 +
mov eax [ebx+30h] +
xor esi esi +
cmp eax esi +
jz loc_1002B8B  +
push eax  +
call ds:CloseHandle  +
mov [ebx+30h] esi +
mov eax [ebx+38h] +
cmp eax esi +
jz loc_1002B9B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebx+38h] esi +
mov ecx [ebx+40h] +
cmp ecx esi +
jz loc_1002BAA  +
call sub_1002115  +
mov [ebx+40h] esi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
mov ecx [esi+4] +
mov [eax+4] ecx +
mov ecx [esi] +
mov eax [esi+4] +
mov [eax] ecx +
mov ecx esi +
mov [esi] esi +
mov [esi+4] esi +
call sub_1002115  +
push dword ptr [esi+48h]  +
mov eax [esi+34h] +
mov eax [eax+28h] +
push dword ptr [esi+44h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2Ch]  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ecx+38h] eax +
lea edi [ecx+18h] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+arg_4] +
lea edi [ecx+28h] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_1002C3E  +
test esi esi +
jz loc_1002C3E  +
push esi  +
call sub_1001633  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
lea edi [ecx+8] +
mov esi [edi] +
cmp esi edi +
jz loc_1002C6B  +
push ebx  +
lea ebx [esi-8] +
mov esi [esi] +
mov ecx ebx +
call sub_1002D21  +
mov ecx ebx +
call sub_1002C20  +
cmp esi edi +
jnz loc_1002C53  +
pop ebx  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+14h] +
push eax  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_1002C8E  +
mov ecx esi +
pop esi  +
jmp loc_1002BB9  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi ds:InterlockedIncrement +
lea eax [ebx+14h] +
push eax  +
mov esi ecx +
call edi  +
lea eax [ebx+10h] +
push eax  +
call edi  +
mov [esi+14h] ebx +
mov ebx [ebp+arg_4] +
lea eax [ebx+14h] +
push eax  +
call edi  +
lea eax [ebx+10h] +
push eax  +
call edi  +
mov edi [ebp+arg_8] +
mov [esi+18h] ebx +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov [esi+1Ch] edi +
lea edi [ebx+54h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [esi+14h] +
add eax 8 +
lea ecx [esi+8] +
mov [ecx] eax +
mov edx [eax+4] +
mov [ecx+4] edx +
mov edx [eax+4] +
mov [edx] ecx +
mov [eax+4] ecx +
mov eax [esi+18h] +
add eax 8 +
mov [esi] eax +
mov ecx [eax+4] +
mov [esi+4] ecx +
mov ecx [eax+4] +
mov [ecx] esi +
push edi  +
mov [eax+4] esi +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
add eax 54h +
push eax  +
call ds:EnterCriticalSection  +
lea eax [esi+8] +
mov ecx [eax] +
mov edx [eax+4] +
mov [ecx+4] edx +
mov ecx [eax+4] +
mov edx [eax] +
mov [ecx] edx +
mov [eax] eax +
mov [eax+4] eax +
mov eax [esi] +
mov ecx [esi+4] +
mov [eax+4] ecx +
mov eax [esi+4] +
mov ecx [esi] +
mov [eax] ecx +
mov eax [esi+18h] +
add eax 54h +
push eax  +
mov [esi] esi +
mov [esi+4] esi +
call ds:LeaveCriticalSection  +
mov ecx [esi+18h] +
call sub_1002C73  +
mov ecx [esi+18h] +
call sub_1002115  +
mov eax [esi+14h] +
and dword ptr [esi+18h] 0 +
add eax 14h +
push eax  +
call ds:InterlockedDecrement  +
mov ecx [esi+14h] +
call sub_1002C20  +
mov eax [esi+1Ch] +
and dword ptr [esi+14h] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+1Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1002DC8  +
test eax eax +
jnz loc_1002DCD  +
mov ecx [esi] +
test ecx ecx +
jz loc_1002DC5  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1002DB9  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100805C +
push offset dword_100804C  +
push dword_1008058  +
mov dword_100804C eax +
push offset unk_100803C  +
push offset unk_1008040  +
push offset unk_1008038  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1008048 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1002E70  +
cmp eax esi +
jnz loc_1002E63  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1002E73  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1002E4A  +
xor esi esi +
inc esi  +
mov eax dword_1008578 +
cmp eax esi +
jnz loc_1002E86  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1002EB5  +
mov eax dword_1008578 +
test eax eax +
jnz loc_1002EAF  +
mov dword_1008578 esi +
push offset dword_100118C  +
push offset dword_1001180  +
call sub_1002DAC  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002EB5  +
jmp loc_1002FD9  +
mov dword_1008054 esi +
mov eax dword_1008578 +
cmp eax esi +
jnz loc_1002ED9  +
push offset dword_100117C  +
push offset dword_1001174  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1008578 2 +
cmp [ebp+var_20] ebx +
jnz loc_1002EE6  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1008580 ebx +
jz loc_1002F07  +
push offset dword_1008580  +
call sub_10031D9  +
pop ecx  +
test eax eax +
jz loc_1002F07  +
push ebx  +
push 2  +
push ebx  +
call dword_1008580  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_1002FD9  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_1002F2C  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_1002F41  +
cmp cx 20h +
ja loc_1002F41  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_1002F2C  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1002F4D  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_1002F50  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_1008050 eax +
cmp dword_1008044 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_1002F82  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_1002F16  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_1008050 eax +
xor ebx ebx +
cmp dword_1008044 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_1008054 ebx +
jnz loc_1002FC4  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1008050 +
jmp loc_1002FE5  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1003002  +
xor eax eax +
jmp loc_100304F  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1002FFE  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100303C  +
cmp ecx 20Bh +
jnz loc_1002FFE  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1002FFE  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100304A  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1002FFE  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1008044 eax +
call sub_1003372  +
push eax  +
call ds:__set_app_type  +
or dword_1008570 0FFFFFFFFh +
or dword_1008574 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1008064 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1008060 +
mov [eax] ecx +
call sub_1003304  +
cmp dword_1008028 0 +
jnz loc_10030A8  +
push offset sub_1003304  +
call ds:__setusermatherr  +
pop ecx  +
call sub_10032EC  +
xor eax eax +
retn   +
***
call sub_10033B1  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_1008018 +
jnz loc_10030CF  +
retn 0  +
jmp loc_1003447  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1003122  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1003122  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100311C  +
cmp eax 19930521h +
jz loc_100311C  +
cmp eax 19930522h +
jz loc_100311C  +
cmp eax 1994000h +
jnz loc_1003122  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_10030E4+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1003166  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1003162  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_10031CD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_10031C5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_10031CF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10031B5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1003150  +
pop ecx  +
test eax eax +
jz loc_1003236  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1003190  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003236  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100323F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10030C4  +
push offset dword_1008018  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1003365  +
cmp ecx 0FFFFFFFFh +
jz loc_1003365  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100335E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100335E  +
cmp edx 10000000h +
jnb loc_100335E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100335E  +
jmp loc_1003359  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10033A7  +
push eax  +
call sub_100330C  +
test eax eax +
jz loc_10033A7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100339C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10033A7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1008018 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_10033E3  +
test eax ebx +
jz loc_10033E3  +
not eax  +
mov dword_100801C eax +
jmp loc_100343E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100342A  +
test dword_1008018 ebx +
jnz loc_100342F  +
mov esi 0BB40E64Fh +
mov dword_1008018 esi +
not esi  +
mov dword_100801C esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1008168 eax +
mov dword_1008164 ecx +
mov dword_1008160 edx +
mov dword_100815C ebx +
mov dword_1008158 esi +
mov dword_1008154 edi +
mov word_1008180 ss +
mov word_1008174 cs +
mov word_1008150 ds +
mov word_100814C es +
mov word_1008148 fs +
mov word_1008144 gs +
pushf   +
pop dword_1008178  +
mov eax [ebp+0] +
mov dword_100816C eax +
mov eax [ebp+4] +
mov dword_1008170 eax +
lea eax [ebp+8] +
mov dword_100817C eax +
mov eax [ebp-320h] +
mov dword_10080B8 10001h +
mov eax dword_1008170 +
mov dword_1008074 eax +
mov dword_1008068 0C0000409h +
mov dword_100806C 1 +
mov eax dword_1008018 +
mov [ebp-328h] eax +
mov eax dword_100801C +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
test byte ptr dword_1008548 1 +
jz loc_100354C  +
mov ecx offset unk_10084E8 +
call sub_1003C8D  +
test byte ptr dword_1008548 2 +
jz loc_100355F  +
mov ecx offset unk_10083A8 +
call sub_1003C8D  +
test byte ptr dword_1008548 4 +
jz loc_1003572  +
mov ecx offset unk_1008510 +
call sub_1003C8D  +
mov eax hProv +
push esi  +
xor esi esi +
cmp eax esi +
jz loc_100358C  +
push esi  +
push eax  +
call ds:CryptReleaseContext  +
mov hProv esi +
mov eax lpMem +
cmp eax esi +
jz loc_10035AA  +
push eax  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov lpMem esi +
mov dword_1008548 esi +
pop esi  +
retn   +
***
call __SEH_prolog4  +
mov [ebp+var_1C] 1 +
and [ebp+ms_exc.disabled] 0 +
push 800003E8h  +
push [ebp+lpCriticalSection]  +
call ds:InitializeCriticalSectionAndSpinCount  +
mov [ebp+var_1C] eax +
jmp loc_10035EC  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-1Ch] 0 +
push 0FFFFFFFEh  +
pop esi  +
mov [ebp+ms_exc.disabled] esi +
mov [ebp+ms_exc.disabled] 1 +
cmp [ebp+var_1C] 0 +
jz loc_1003608  +
push [ebp+lpCriticalSection]  +
call ds:EnterCriticalSection  +
mov [ebp+ms_exc.disabled] esi +
jmp loc_1003628  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
push dword ptr [ebp+8]  +
call ds:DeleteCriticalSection  +
and [ebp+var_1C] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
cmp [ebp+var_1C] 0 +
jz loc_1003637  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100365D  +
cmp ecx 7FFFFFFFh +
jbe loc_1003662  +
mov eax 80070057h +
test eax eax +
jl loc_100369F  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100368F  +
cmp eax esi +
ja loc_100368F  +
jnz loc_100369A  +
jmp loc_1003694  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
push 114h  +
xor edi edi +
push edi  +
mov esi offset dword_10083D0 +
push esi  +
mov [ebp+var_4] 1 +
call memset  +
add esp 0Ch +
push esi  +
mov dword_10083D0 114h +
call ds:GetVersionExW  +
test eax eax +
jz loc_1003773  +
push edi  +
call ds:GetModuleHandleW  +
mov dword_10084E4 eax +
cmp eax edi +
jnz loc_10036FC  +
call ds:GetLastError  +
jmp loc_1003773  +
push edi  +
push edi  +
push edi  +
push edi  +
push 1Ch  +
mov ecx offset unk_10084E8 +
call sub_1003C53  +
test eax eax +
jz loc_1003773  +
or dword_1008548 1 +
push edi  +
push edi  +
push edi  +
push edi  +
push 0Ch  +
mov ecx offset unk_10083A8 +
call sub_1003C53  +
test eax eax +
jz loc_1003773  +
or dword_1008548 2 +
push edi  +
push edi  +
push edi  +
push edi  +
push 20h  +
mov ecx offset unk_1008510 +
call sub_1003C53  +
test eax eax +
jz loc_1003773  +
or dword_1008548 4 +
call ds:timeGetTime  +
push eax  +
call ds:srand  +
pop ecx  +
push 0F0000000h  +
push 1  +
push edi  +
push edi  +
push offset hProv  +
call ds:CryptAcquireContextW  +
test eax eax +
jnz loc_100377B  +
mov [ebp+var_4] edi +
call sub_1003539  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov eax offset dword_1008564 +
push offset CriticalSection  +
mov dword_1008564 eax +
mov dword_1008568 eax +
call sub_10035B7  +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
retn   +
***
mov edi edi +
push esi  +
mov esi dword_1008564 +
test esi esi +
jz loc_10037F1  +
push edi  +
cmp esi offset dword_1008564 +
jz loc_10037F0  +
lea edi [esi-224h] +
push dword ptr [edi]  +
mov esi [esi] +
call ds:FreeLibrary  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test esi esi +
jnz loc_10037C4  +
pop edi  +
push offset CriticalSection  +
call ds:DeleteCriticalSection  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+pvReserved]  +
call ds:CoInitializeEx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push esi  +
push edi  +
lea ecx [ebp+var_40] +
call sub_1003CD4  +
lea ecx [ebp+var_2C] +
call sub_1003CD4  +
lea ecx [ebp+var_18] +
call sub_1003CD4  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push 1  +
push offset SubKey  +
push 80000000h  +
lea ecx [ebp+var_40] +
mov [ebp+var_4] esi +
call sub_1003D9B  +
test eax eax +
jz loc_10038F7  +
push esi  +
push esi  +
push esi  +
push 1  +
push [ebp+rguid]  +
lea ecx [ebp+var_2C] +
push [ebp+var_34]  +
call sub_1003E35  +
test eax eax +
jz loc_10038F7  +
push esi  +
push esi  +
push esi  +
push 1  +
push offset aInprocserver32  +
push [ebp+hKey]  +
lea ecx [ebp+var_18] +
call sub_1003D9B  +
test eax eax +
jz loc_10038F7  +
lea ecx [ebp+var_2C] +
call sub_1003CE6  +
lea ecx [ebp+var_40] +
call sub_1003CE6  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
mov edi offset ValueName +
push edi  +
lea ecx [ebp+var_18] +
call sub_1003E8F  +
mov eax [ebp+var_4] +
cmp eax esi +
jz loc_10038F7  +
mov ecx [ebp+arg_8] +
cmp eax [ecx] +
mov [ecx] eax +
jbe loc_10038D7  +
mov esi 80158100h +
jmp loc_10038FC  +
cmp [ebp+arg_4] esi +
jnz loc_10038E3  +
mov esi 80070057h +
jmp loc_10038FC  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
lea ecx [ebp+var_18] +
push edi  +
call sub_1003E8F  +
test eax eax +
jnz loc_1003918  +
mov esi 80004005h +
lea ecx [ebp+var_18] +
call sub_1003D7E  +
lea ecx [ebp+var_2C] +
call sub_1003D7E  +
lea ecx [ebp+var_40] +
call sub_1003D7E  +
mov eax esi +
jmp loc_1003932  +
lea ecx [ebp+var_18] +
call sub_1003D7E  +
lea ecx [ebp+var_2C] +
call sub_1003D7E  +
lea ecx [ebp+var_40] +
call sub_1003D7E  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push offset CriticalSection  +
call ds:EnterCriticalSection  +
mov eax dword_1008564 +
jmp loc_1003976  +
lea edx [eax-224h] +
test edx edx +
jz loc_10039A4  +
mov edi [ebp+rguid] +
push 4  +
pop ecx  +
lea esi [edx+20Ch] +
xor ebx ebx +
cmps   +
jz loc_10039BB  +
mov eax [eax] +
cmp eax offset dword_1008564 +
jnz loc_1003958  +
mov esi 22Ch +
push esi  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_10039C4  +
mov [ebp+rguid] 8007000Eh +
jmp loc_1003A62  +
mov esi 80004005h +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
mov eax esi +
jmp loc_1003A9F  +
mov eax [ebp+arg_4] +
mov [eax] edx +
xor esi esi +
jmp loc_10039A9  +
push esi  +
push 0  +
push ebx  +
call memset  +
mov esi [ebp+rguid] +
lea edi [ebx+20Ch] +
movs   +
movs   +
movs   +
add esp 0Ch +
movs   +
lea eax [ebp+var_4] +
push eax  +
lea edi [ebx+4] +
push edi  +
push [ebp+rguid]  +
lea esi [ebx+224h] +
mov [esi] esi +
mov [esi+4] esi +
mov [ebp+var_4] 208h +
call sub_1003827  +
mov [ebp+rguid] eax +
test eax eax +
jl loc_1003A45  +
push edi  +
call ds:LoadLibraryW  +
mov [ebx] eax +
test eax eax +
jz loc_1003A3E  +
mov edi ds:GetProcAddress +
push offset ProcName  +
push eax  +
call edi  +
mov [ebx+21Ch] eax +
test eax eax +
jz loc_1003A3E  +
push offset aDllcanunloadno  +
push dword ptr [ebx]  +
call edi  +
mov [ebx+220h] eax +
test eax eax +
jnz loc_1003A72  +
mov [ebp+rguid] 80004005h +
mov eax [ebx] +
test eax eax +
jz loc_1003A52  +
push eax  +
call ds:FreeLibrary  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
mov eax [ebp+rguid] +
jmp loc_1003A9F  +
mov dword ptr [esi] offset dword_1008564 +
mov eax dword_1008568 +
mov [esi+4] eax +
mov eax dword_1008568 +
mov [eax] esi +
push offset CriticalSection  +
mov dword_1008568 esi +
call ds:LeaveCriticalSection  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+ppv]  +
push [ebp+riid]  +
push [ebp+dwClsContext]  +
push [ebp+pUnkOuter]  +
push [ebp+rguid]  +
call ds:CoCreateInstance  +
cmp eax 800401F0h +
jnz locret_1003B17  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+rguid]  +
call sub_100393D  +
test eax eax +
jl locret_1003B17  +
lea eax [ebp+dwClsContext] +
push eax  +
mov eax [ebp+var_4] +
push offset dword_1001480  +
push [ebp+rguid]  +
call dword ptr [eax+21Ch]  +
test eax eax +
jl locret_1003B17  +
mov eax [ebp+dwClsContext] +
mov ecx [eax] +
push esi  +
push [ebp+ppv]  +
push [ebp+riid]  +
push [ebp+pUnkOuter]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
mov eax [ebp+dwClsContext] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp edx edi +
jz loc_1003B5E  +
mov eax [ebp+arg_4] +
cmp eax edi +
jz loc_1003B5E  +
mov [ecx] edx +
mov [ecx+4] edx +
add edx eax +
mov [ecx+8] edx +
mov [ecx+0Ch] eax +
cmp [ebp+arg_8] edi +
jz loc_1003B59  +
push esi  +
mov esi eax +
and esi 3 +
sub eax esi +
sub edx esi +
mov [ecx+0Ch] eax +
mov [ecx+8] edx +
pop esi  +
mov [ecx+14h] edi +
jmp loc_1003B70  +
mov [ecx] edi +
mov [ecx+4] edi +
mov [ecx+8] edi +
mov [ecx+0Ch] edi +
mov dword ptr [ecx+14h] 1 +
mov [ecx+10h] edi +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
xor edx edx +
push edi  +
mov edi ecx +
cmp [ebp+arg_8] edx +
jz loc_1003B9E  +
mov eax ecx +
and eax 3 +
jz loc_1003B9E  +
sub edi eax +
add edi 4 +
add [esi+10h] edi +
cmp [esi+14h] edx +
jnz loc_1003BCE  +
cmp [esi+0Ch] edi +
jb loc_1003BC7  +
cmp [ebp+arg_0] edx +
jz loc_1003BBF  +
push ecx  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
call memcpy  +
add esp 0Ch +
add [esi+4] edi +
sub [esi+0Ch] edi +
jmp loc_1003BCE  +
mov dword ptr [esi+14h] 1 +
mov eax [esi+14h] +
neg eax  +
sbb eax eax +
pop edi  +
and eax 80158100h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
mov ecx edi +
jz loc_1003C05  +
mov eax edi +
and eax 3 +
jz loc_1003C05  +
sub ecx eax +
add ecx 4 +
add [esi+10h] ecx +
cmp dword ptr [esi+14h] 0 +
jnz loc_1003C3C  +
mov eax [esi+0Ch] +
cmp eax ecx +
jb loc_1003C35  +
sub [esi+8] ecx +
mov edx [esi+8] +
sub eax ecx +
cmp [ebp+arg_0] 0 +
mov [esi+0Ch] eax +
jz loc_1003C3C  +
push edi  +
push [ebp+arg_0]  +
push edx  +
call memcpy  +
add esp 0Ch +
jmp loc_1003C3C  +
mov dword ptr [esi+14h] 1 +
mov eax [esi+14h] +
neg eax  +
sbb eax eax +
pop edi  +
and eax 80158100h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
mov [ecx] edx +
mov edx [ebp+arg_8] +
mov [ecx+4] edx +
mov edx [ebp+arg_C] +
xor eax eax +
mov [ecx+8] edx +
mov edx [ebp+arg_10] +
mov [ecx+18h] eax +
mov [ecx+1Ch] eax +
mov [ecx+0Ch] edx +
mov edx [ebp+arg_0] +
mov [ecx+24h] eax +
inc eax  +
mov [ecx+10h] edx +
mov [ecx+20h] eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+20h] 0 +
jz loc_1003CCD  +
push ebx  +
push edi  +
lea ebx [esi+18h] +
jmp loc_1003CBC  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1003CAC  +
lea ecx [edi+8] +
push ecx  +
call eax  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push ebx  +
call sub_1003F30  +
mov edi eax +
test edi edi +
jnz loc_1003C9F  +
and [esi+20h] eax +
pop edi  +
pop ebx  +
pop esi  +
retn   +
***
mov eax ecx +
and dword ptr [eax+8] 0 +
mov dword ptr [eax] 47455256h +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jz loc_1003D01  +
push dword ptr [esi+0Ch]  +
call ds:RegCloseKey  +
test eax eax +
jnz loc_1003D06  +
and [esi+8] eax +
xor eax eax +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1003D25  +
cmp ecx 7FFFFFFFh +
jbe loc_1003D2A  +
mov eax 80070057h +
test eax eax +
jl loc_1003D75  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1003D65  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1003D60  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1003D60  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1003D48  +
pop edi  +
test esi esi +
jnz loc_1003D6C  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jz loc_1003D8E  +
call sub_1003CE6  +
mov dword ptr [esi] 4745525Fh +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp [ebp+lpSubKey] edi +
jz loc_1003E28  +
cmp [esi+8] edi +
jz loc_1003DB9  +
call sub_1003CE6  +
mov [esi+8] edi +
mov eax [ebp+arg_8] +
mov [esi+4] eax +
cmp [ebp+arg_C] edi +
jz loc_1003DEC  +
mov eax [ebp+arg_14] +
cmp [ebp+arg_10] edi +
jnz loc_1003DD1  +
mov eax 0F003Fh +
lea ecx [ebp+dwDisposition] +
push ecx  +
lea ecx [esi+0Ch] +
push ecx  +
push edi  +
push eax  +
push edi  +
push edi  +
push edi  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
jmp loc_1003E16  +
cmp eax edi +
jz loc_1003DF7  +
mov eax 20019h +
jmp loc_1003E04  +
mov eax [ebp+arg_14] +
cmp [ebp+arg_10] edi +
jnz loc_1003E04  +
mov eax 0F003Fh +
lea ecx [esi+0Ch] +
push ecx  +
push eax  +
push edi  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
cmp eax edi +
jnz loc_1003E28  +
mov ecx [ebp+hKey] +
xor eax eax +
inc eax  +
mov [esi+8] eax +
mov [esi+10h] ecx +
jmp loc_1003E2A  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
mov eax dword_1008018 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+rguid] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
push 27h  +
lea ecx [ebp+SubKey] +
push ecx  +
push eax  +
call ds:StringFromGUID2  +
test eax eax +
jz loc_1003E7A  +
push [ebp+arg_14]  +
lea eax [ebp+SubKey] +
push [ebp+arg_10]  +
mov ecx edi +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
push esi  +
call sub_1003D9B  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10030C4  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_1008018 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpValueName] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_4] +
test eax eax +
jz loc_1003F19  +
cmp dword ptr [ecx+8] 0 +
jz loc_1003F19  +
lea edx [ebp+cbData] +
push edx  +
lea edx [ebp+Data] +
push edx  +
lea edx [ebp+Type] +
push edx  +
push 0  +
push eax  +
push dword ptr [ecx+0Ch]  +
mov [ebp+cbData] 106h +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1003F19  +
mov eax [ebp+cbData] +
mov ecx [esi] +
shr eax 1 +
cmp eax ecx +
ja loc_1003F17  +
test edi edi +
jz loc_1003F17  +
lea eax [ebp+Data] +
push eax  +
push ecx  +
push edi  +
call sub_1003D0F  +
mov eax [ebp+cbData] +
shr eax 1 +
mov [esi] eax +
xor eax eax +
inc eax  +
jmp loc_1003F1B  +
mov [esi] eax +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10030C4  +
leave   +
retn 0Ch  +
***
mov ebp [esp+arg_0] +
mov edx [ebp+4] +
mov eax [ebp+0] +
or eax eax +
jz loc_1003F4C  +
lea ecx [edx-1] +
mov ebx [eax] +
cmpxchg8b qword ptr [ebp+0]  +
jnz loc_1003F3C  +
pop ebp  +
pop ebx  +
retn 4  +
***
push 100000h  +
call ds:OpenEventW  +
test eax eax +
jz loc_1003F77  +
push eax  +
call ds:CloseHandle  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
lea ecx [ebp+var_30] +
call sub_1001657  +
mov eax 10000h +
push eax  +
push eax  +
push offset aSSpCabFZ  +
lea ecx [ebp+var_30] +
call sub_1004702  +
mov esi eax +
test esi esi +
jnz loc_1003FCA  +
push eax  +
push 2  +
push 0BB8h  +
push [ebp+arg_4]  +
lea ecx [ebp+var_30] +
push [ebp+arg_0]  +
call sub_100449C  +
lea ecx [ebp+var_30] +
mov esi eax +
call sub_1004969  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+20h] +
push edi  +
push 1388h  +
xor ebx ebx +
push eax  +
mov [ebp+dwBytes] ebx +
call ds:WaitForSingleObject  +
cmp eax 102h +
jnz loc_1004006  +
mov edi 80158630h +
jmp loc_100406E  +
lea eax [ebp+dwBytes] +
push eax  +
push ebx  +
lea eax [ebp+var_1C] +
push eax  +
mov ecx esi +
call sub_10049B2  +
mov esi 80158100h +
jmp loc_1004048  +
test ebx ebx +
jz loc_1004028  +
push ebx  +
call sub_1001633  +
pop ecx  +
push [ebp+dwBytes]  +
call sub_1001615  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_1004077  +
mov ecx [ebp+arg_0] +
lea eax [ebp+dwBytes] +
push eax  +
push ebx  +
lea eax [ebp+var_1C] +
push eax  +
call sub_10049B2  +
mov edi eax +
cmp edi esi +
jz loc_100401D  +
test edi edi +
jnz loc_1004063  +
mov edi 80004005h +
test ebx ebx +
jz loc_100406E  +
cmp dword ptr [ebx] 3 +
jnz loc_1004063  +
mov edi [ebx+8] +
test ebx ebx +
jz loc_100406E  +
push ebx  +
call sub_1001633  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov edi 8007000Eh +
jmp loc_1004063  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax dword_1008018 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea ecx [ebp+var_58] +
call sub_1001657  +
call sub_1003F56  +
test eax eax +
jnz loc_10040B2  +
mov edi 80158300h +
jmp loc_1004107  +
push 0  +
push 10000h  +
push esi  +
lea ecx [ebp+var_58] +
call sub_1004702  +
mov edi eax +
test edi edi +
jnz loc_1004107  +
mov [ebp+var_28] 4 +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
and [ebp+var_C] eax +
and [ebp+var_8] eax +
push 24h  +
lea eax [ebp+var_28] +
push eax  +
mov [ebp+var_10] 2 +
call sub_1003F7F  +
mov edi eax +
test edi edi +
jnz loc_10040FF  +
lea eax [ebp+var_58] +
push eax  +
call sub_1003FD6  +
mov edi eax +
lea ecx [ebp+var_58] +
call sub_1004969  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10030C4  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_1004139  +
cmp [ebp+arg_0] eax +
jnz loc_100413D  +
cmp ecx eax +
jnz loc_1004142  +
jmp loc_100413D  +
cmp ecx eax +
jz loc_1004142  +
cmp ecx [ebp+arg_4] +
jbe loc_1004147  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_100417A  +
test [ebp+arg_8] 1000h +
jz loc_100417A  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_10041C2  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_10041AA  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_10041C2  +
test esi esi +
jbe loc_10041DB  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_10041DB  +
test [ebp+arg_8] 800h +
jz loc_10041DB  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwMilliseconds]  +
push dword ptr [ecx+1Ch]  +
call ds:WaitForSingleObject  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jb loc_100421F  +
sub eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100422A  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
xor ebx ebx +
push edi  +
cmp eax ebx +
jz loc_1004268  +
dec dword ptr [eax+14h]  +
mov eax [esi+8] +
cmp [eax+14h] ebx +
jnz loc_1004268  +
mov [eax] ebx +
mov eax [esi+8] +
mov [eax+4] ebx +
mov eax [esi+8] +
mov [eax+8] ebx +
mov eax [esi+8] +
mov [eax+10h] ebx +
mov eax [esi+8] +
mov [eax+0Ch] ebx +
mov eax [esi+1Ch] +
mov edi ds:CloseHandle +
cmp eax ebx +
jz loc_100427B  +
push eax  +
call edi  +
mov [esi+1Ch] ebx +
mov eax [esi+20h] +
cmp eax ebx +
jz loc_1004288  +
push eax  +
call edi  +
mov [esi+20h] ebx +
mov eax [esi+4] +
cmp eax ebx +
jz loc_1004299  +
push eax  +
call ds:UnmapViewOfFile  +
mov [esi+4] ebx +
mov eax [esi+14h] +
cmp eax ebx +
jz loc_10042A6  +
push eax  +
call edi  +
mov [esi+14h] ebx +
mov eax [esi+10h] +
cmp eax ebx +
jz loc_10042B3  +
push eax  +
call edi  +
mov [esi+10h] ebx +
pop edi  +
mov [esi+8] ebx +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [ecx+8] +
add eax 3 +
and eax 0FFFFFFFCh +
add [edx+4] eax +
mov edx [ecx+8] +
push esi  +
mov esi [edx+4] +
cmp esi [edx+10h] +
jb loc_10042E5  +
mov esi [edx+10h] +
sub [edx+4] esi +
mov edx [ecx+8] +
add [edx+0Ch] eax +
push 0  +
push 1  +
push dword ptr [ecx+1Ch]  +
call ds:ReleaseSemaphore  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [eax+10h] +
cmp ecx [eax+0Ch] +
jnz loc_1004320  +
mov eax 80158180h +
jmp loc_10043C0  +
cmp [ebp+arg_0] 0 +
jnz loc_1004330  +
mov eax 80158100h +
jmp loc_10043C0  +
mov ecx [ebp+arg_4] +
mov edx [eax+4] +
push ebx  +
push edi  +
lea edi [ecx+3] +
and edi 0FFFFFFFCh +
add edx edi +
cmp edx [eax+10h] +
jbe loc_10043A9  +
lea ecx [ebp+var_4] +
push ecx  +
push dword ptr [eax+4]  +
push dword ptr [eax+10h]  +
call sub_1004206  +
test eax eax +
jl loc_100437B  +
mov ebx [ebp+var_4] +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push edi  +
call sub_1004206  +
test eax eax +
jl loc_100437B  +
lea eax [ebp+arg_4] +
push eax  +
push ebx  +
push [ebp+arg_4]  +
call sub_1004206  +
test eax eax +
jge loc_1004382  +
mov eax 80004005h +
jmp loc_10043BE  +
mov eax [esi+8] +
mov eax [eax+4] +
add eax [esi+0Ch] +
mov edi [ebp+arg_0] +
push ebx  +
push eax  +
push edi  +
call memcpy  +
push [ebp+arg_4]  +
add ebx edi +
push dword ptr [esi+0Ch]  +
push ebx  +
call memcpy  +
add esp 18h +
jmp loc_10043BC  +
push ecx  +
mov ecx [esi+0Ch] +
add ecx [eax+4] +
push ecx  +
push [ebp+arg_0]  +
call memcpy  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
mov ebx [esi+8] +
push edi  +
lea edi [ecx+3] +
and edi 0FFFFFFFCh +
cmp edi [ebx+0Ch] +
jbe loc_10043F1  +
mov eax 80158100h +
jmp loc_1004490  +
mov eax ebx +
mov edx [eax+8] +
add edx edi +
cmp edx [eax+10h] +
jbe loc_100446F  +
lea ecx [ebp+var_4] +
push ecx  +
push dword ptr [eax+8]  +
push dword ptr [eax+10h]  +
call sub_1004206  +
test eax eax +
jl loc_1004434  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_4]  +
push edi  +
call sub_1004206  +
test eax eax +
jl loc_1004434  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+var_4]  +
push [ebp+arg_4]  +
call sub_1004206  +
test eax eax +
jge loc_100443B  +
mov eax 80004005h +
jmp loc_1004490  +
push [ebp+var_4]  +
mov eax [ebx+8] +
add eax [esi+0Ch] +
push [ebp+arg_0]  +
push eax  +
call memcpy  +
mov ecx [ebp+arg_0] +
push [ebp+arg_4]  +
mov eax [ebp+var_4] +
add eax ecx +
push eax  +
push dword ptr [esi+0Ch]  +
call memcpy  +
mov eax [esi+8] +
mov ecx [ebp+var_8] +
add esp 18h +
mov [eax+8] ecx +
jmp loc_1004488  +
mov eax [ebx+8] +
add eax [esi+0Ch] +
push ecx  +
push [ebp+arg_0]  +
push eax  +
call memcpy  +
mov eax [esi+8] +
add esp 0Ch +
add [eax+8] edi +
mov esi [esi+8] +
sub [esi+0Ch] edi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
lea edi [ebx+3] +
and edi 0FFFFFFFCh +
mov esi ecx +
mov [ebp+dwMilliseconds] eax +
mov eax [esi+8] +
add edi 18h +
cmp edi [eax+10h] +
ja loc_1004583  +
mov eax [esi+28h] +
and [ebp+var_8] 0 +
mov [ebp+var_10] eax +
mov eax [ebp+arg_C] +
and [ebp+arg_C] 0 +
mov [ebp+var_14] 1 +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_C] eax +
jmp loc_1004525  +
cmp [ebp+arg_8] 0FFFFFFFFh +
jz loc_10044F9  +
call ds:timeGetTime  +
mov [ebp+arg_4] eax +
push [ebp+dwMilliseconds]  +
mov ecx esi +
call sub_10041E7  +
test eax eax +
jz loc_100457C  +
cmp [ebp+arg_8] 0FFFFFFFFh +
jz loc_1004525  +
call ds:timeGetTime  +
mov ecx eax +
sub ecx [ebp+arg_4] +
cmp ecx [ebp+dwMilliseconds] +
ja loc_100457C  +
mov ecx [ebp+arg_4] +
sub ecx eax +
add [ebp+dwMilliseconds] ecx +
mov eax [esi+8] +
cmp edi [eax+0Ch] +
ja loc_10044EA  +
push 0FFFFFFFFh  +
push dword ptr [esi+18h]  +
call ds:WaitForSingleObject  +
mov eax [esi+8] +
cmp edi [eax+0Ch] +
ja loc_100456A  +
push 18h  +
lea eax [ebp+var_1C] +
push eax  +
mov ecx esi +
call sub_10043CA  +
push ebx  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10043CA  +
xor eax eax +
inc eax  +
push 0  +
push eax  +
push dword ptr [esi+20h]  +
mov [ebp+arg_C] eax +
call ds:ReleaseSemaphore  +
push dword ptr [esi+18h]  +
call ds:ReleaseMutex  +
xor eax eax +
cmp [ebp+arg_C] eax +
jz loc_1004525  +
jmp loc_1004588  +
mov eax 80158630h +
jmp loc_1004588  +
mov eax 80004005h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_14]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_100411E  +
mov esi eax +
xor edx edx +
cmp esi edx +
jl loc_1004635  +
test [ebp+arg_14] 100h +
push ebx  +
mov ebx ecx +
mov [ebp+arg_0] edi +
mov [ebp+arg_4] ebx +
jz loc_10045D5  +
cmp [ebp+arg_8] edx +
jnz loc_10045D5  +
mov [ebp+arg_8] offset ValueName +
xor esi esi +
test [ebp+arg_14] 0FFFFE000h +
jz loc_100463D  +
mov esi 80070057h +
cmp ecx edx +
jz loc_10045EE  +
xor eax eax +
mov [edi] ax +
test [ebp+arg_14] 1C00h +
jz loc_1004613  +
test ecx ecx +
jz loc_1004613  +
push [ebp+arg_14]  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+arg_4] +
xor ecx ecx +
call sub_1004150  +
mov ebx [ebp+arg_4] +
test esi esi +
jge loc_100461F  +
cmp esi 8007007Ah +
jnz loc_1004634  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100462B  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1004634  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
cmp ecx edx +
jnz loc_100465A  +
mov eax [ebp+arg_8] +
cmp [eax] dx +
jz loc_100461F  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_10045EE  +
mov ebx [ebp+arg_8] +
mov [ebp+arg_0] 7FFFFFFEh +
sub [ebp+arg_0] ecx +
sub ebx edi +
mov esi ecx +
mov eax edi +
mov [ebp+arg_4] edx +
mov [ebp+arg_8] ebx +
mov ebx [ebp+arg_0] +
add ebx esi +
jz loc_1004691  +
mov ebx [ebp+arg_8] +
movzx ebx word ptr [ebx+eax] +
test bx bx +
jz loc_1004691  +
mov [eax] bx +
inc eax  +
inc eax  +
dec esi  +
inc edx  +
test esi esi +
jnz loc_1004673  +
test esi esi +
jnz loc_100469F  +
dec eax  +
dec eax  +
dec edx  +
mov [ebp+arg_4] 8007007Ah +
xor esi esi +
mov [eax] si +
mov esi [ebp+arg_4] +
mov ebx ecx +
sub ebx edx +
lea eax [edi+edx*2] +
mov [ebp+arg_0] eax +
mov [ebp+arg_4] ebx +
test esi esi +
jl loc_10045EE  +
mov eax [ebp+arg_14] +
test eax 200h +
jz loc_100461F  +
cmp ebx 1 +
jbe loc_100461F  +
lea ecx [ebx+ebx] +
cmp ecx 2 +
jbe loc_100461F  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+arg_0] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_100461F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 90h +
mov eax dword_1008018 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push 40h  +
lea eax [ebp+Name] +
mov [ebp+lMaximumCount] eax +
pop eax  +
push 1000h  +
mov esi ecx +
lea ecx [ebp+var_90] +
push ecx  +
lea ecx [ebp+lMaximumCount] +
push ecx  +
push offset aLocal  +
push eax  +
mov [ebp+var_90] eax +
lea eax [ebp+Name] +
xor ebx ebx +
push eax  +
mov [ebp+var_8C] ebx +
call sub_1004594  +
movzx eax byte ptr [edi+0Fh] +
push eax  +
movzx eax byte ptr [edi+0Eh] +
push eax  +
movzx eax byte ptr [edi+0Dh] +
push eax  +
movzx eax byte ptr [edi+0Ch] +
push eax  +
movzx eax byte ptr [edi+0Bh] +
push eax  +
movzx eax byte ptr [edi+0Ah] +
push eax  +
movzx eax byte ptr [edi+9] +
push eax  +
movzx eax byte ptr [edi+8] +
push eax  +
movzx eax word ptr [edi+6] +
push eax  +
movzx eax word ptr [edi+4] +
push eax  +
push dword ptr [edi]  +
mov edi [ebp+lMaximumCount] +
push offset a08_8x04_4x04_4  +
push [ebp+var_90]  +
push edi  +
call sub_1003647  +
add esp 38h +
push 4Dh  +
pop eax  +
mov [edi] ax +
lea eax [ebp+Name] +
push eax  +
push ebx  +
call sub_1003304  +
push eax  +
call ds:CreateMutexW  +
mov [esi+18h] eax +
cmp eax ebx +
jz loc_10048D1  +
push 0FFFFFFFFh  +
push eax  +
call ds:WaitForSingleObject  +
cmp eax 80h +
jz loc_10047E8  +
cmp eax ebx +
jnz loc_1004826  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call ds:CreateEventW  +
mov [esi+10h] eax +
cmp eax ebx +
jz loc_10048D1  +
push 46h  +
pop eax  +
mov [edi] ax +
lea eax [ebp+Name] +
push eax  +
push [ebp+dwMaximumSizeLow]  +
push ebx  +
push 4  +
call sub_1003304  +
push eax  +
push 0FFFFFFFFh  +
call ds:CreateFileMappingW  +
mov [esi+14h] eax +
cmp eax ebx +
jnz loc_1004830  +
mov edi 80004005h +
jmp loc_10048D6  +
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_1004847  +
mov [ebp+var_8C] 1 +
test [ebp+arg_8] 10000h +
jz loc_100485F  +
cmp [ebp+var_8C] ebx +
jnz loc_100485F  +
mov edi 80158180h +
jmp loc_10048D6  +
push ebx  +
push ebx  +
push ebx  +
push 0F001Fh  +
push dword ptr [esi+14h]  +
call ds:MapViewOfFile  +
mov [esi+4] eax +
cmp eax ebx +
jz loc_10048D1  +
push 53h  +
pop eax  +
push 18h  +
pop ecx  +
mov [edi] ax +
mov eax [ebp+dwMaximumSizeLow] +
xor edx edx +
div  ecx +
lea ecx [ebp+Name] +
push ecx  +
inc eax  +
push eax  +
push ebx  +
mov [ebp+lMaximumCount] eax +
call sub_1003304  +
push eax  +
call ds:CreateSemaphoreW  +
mov [esi+20h] eax +
cmp eax ebx +
jz loc_10048D1  +
push 45h  +
pop eax  +
mov [edi] ax +
lea eax [ebp+Name] +
push eax  +
push [ebp+lMaximumCount]  +
push ebx  +
call sub_1003304  +
push eax  +
call ds:CreateSemaphoreW  +
mov [esi+1Ch] eax +
cmp eax ebx +
jnz loc_10048F9  +
mov edi 8007000Eh +
mov ecx esi +
call sub_1004233  +
mov eax [esi+18h] +
cmp eax ebx +
jz loc_1004951  +
push eax  +
call ds:ReleaseMutex  +
push dword ptr [esi+18h]  +
call ds:CloseHandle  +
mov [esi+18h] ebx +
jmp loc_1004951  +
mov eax [esi+4] +
mov [esi+8] eax +
cmp [ebp+var_8C] ebx +
jnz loc_1004934  +
movzx ecx word ptr [ebp+arg_8] +
mov [eax] ecx +
mov eax [esi+8] +
mov [eax+4] ebx +
mov eax [esi+8] +
mov [eax+8] ebx +
mov ecx [esi+8] +
mov eax [ebp+dwMaximumSizeLow] +
add eax 0FFFFFFE8h +
mov [ecx+10h] eax +
mov eax [esi+8] +
mov ecx [eax+10h] +
mov [eax+0Ch] ecx +
mov eax [esi+8] +
mov [eax+14h] ebx +
mov eax [esi+8] +
lea ecx [eax+18h] +
mov [esi+0Ch] ecx +
mov dword ptr [esi] 514D5344h +
inc dword ptr [eax+14h]  +
push dword ptr [esi+18h]  +
call ds:ReleaseMutex  +
xor edi edi +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10030C4  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
test eax eax +
jz loc_1004989  +
push 0FFFFFFFFh  +
push eax  +
call ds:WaitForSingleObject  +
cmp eax 80h +
jz loc_1004989  +
test eax eax +
jnz loc_10049AB  +
mov ecx esi +
call sub_1004233  +
mov eax [esi+18h] +
test eax eax +
jz loc_10049AB  +
push eax  +
call ds:ReleaseMutex  +
push dword ptr [esi+18h]  +
call ds:CloseHandle  +
and dword ptr [esi+18h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
push 0FFFFFFFFh  +
push dword ptr [edi+18h]  +
call ds:WaitForSingleObject  +
mov esi [ebp+arg_0] +
push 18h  +
pop ebx  +
push ebx  +
push esi  +
mov ecx edi +
call sub_1004302  +
cmp eax 80158180h +
jnz loc_1004A05  +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+14h] 0 +
mov [esi] ebx +
mov [esi+4] ebx +
mov dword ptr [esi+8] 4 +
mov dword ptr [esi+10h] 1 +
push dword ptr [edi+18h]  +
call ds:ReleaseMutex  +
xor eax eax +
jmp loc_1004A5C  +
mov esi [esi] +
mov eax [ebp+arg_8] +
cmp [eax] esi +
jb loc_1004A4C  +
cmp [ebp+arg_4] 0 +
jz loc_1004A4C  +
push ebx  +
mov ecx edi +
mov [eax] esi +
call sub_10042BF  +
test esi esi +
jnz loc_1004A2F  +
push dword ptr [edi+18h]  +
call ds:ReleaseMutex  +
mov eax esi +
jmp loc_1004A5C  +
push esi  +
push [ebp+arg_4]  +
mov ecx edi +
call sub_1004302  +
test eax eax +
jge loc_1004A42  +
mov esi eax +
jmp loc_1004A22  +
push esi  +
mov ecx edi +
call sub_10042BF  +
jmp loc_10049F8  +
mov [eax] esi +
push dword ptr [edi+18h]  +
call ds:ReleaseMutex  +
mov eax 80158100h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
push ebx  +
push esi  +
push edi  +
push 6  +
pop ecx  +
xor ebx ebx +
push ebx  +
xor eax eax +
lea edi [ebp+var_20] +
push 18h  +
stos   +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
push [ebp+hProcess]  +
mov [ebp+Buffer] ebx +
mov [ebp+lpBaseAddress] ebx +
call ds:NtQueryInformationProcess  +
cmp eax ebx +
jge loc_1004AB4  +
or eax 10000000h +
mov esi eax +
jmp loc_1004BB5  +
mov edi ds:ReadProcessMemory +
push ebx  +
push 4  +
lea eax [ebp+Buffer] +
push eax  +
mov eax [ebp+var_1C] +
add eax 0Ch +
push eax  +
push [ebp+hProcess]  +
call edi  +
test eax eax +
jnz loc_1004AE7  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1004AAD  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1004AAD  +
mov eax [ebp+Buffer] +
cmp eax ebx +
jnz loc_1004AF8  +
mov esi 80070006h +
jmp loc_1004BB5  +
push ebx  +
lea esi [eax+0Ch] +
push 4  +
lea eax [ebp+lpBaseAddress] +
push eax  +
push esi  +
push [ebp+hProcess]  +
call edi  +
test eax eax +
jz loc_1004AD1  +
cmp esi [ebp+lpBaseAddress] +
jnz loc_1004B1B  +
mov esi 8000FFFFh +
jmp loc_1004BB5  +
push ebx  +
push 78h  +
lea eax [ebp+var_98] +
push eax  +
push [ebp+lpBaseAddress]  +
push [ebp+hProcess]  +
call edi  +
test eax eax +
jz loc_1004AD1  +
movzx esi [ebp+var_74] +
mov eax large fs:18h +
mov eax [eax+30h] +
inc esi  +
inc esi  +
push esi  +
push 8  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov ebx eax +
test ebx ebx +
jnz loc_1004B59  +
mov esi 8007000Eh +
jmp loc_1004B9C  +
push 0  +
push esi  +
push ebx  +
push [ebp+var_70]  +
push [ebp+hProcess]  +
call edi  +
test eax eax +
jnz loc_1004B81  +
call ds:GetLastError  +
test eax eax +
jle loc_1004B7D  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1004B9C  +
mov eax [ebp+arg_4] +
shr esi 1 +
dec esi  +
mov [eax] si +
movzx eax si +
xor ecx ecx +
mov [ebx+eax*2] cx +
mov eax [ebp+arg_0] +
mov [eax] ebx +
xor ebx ebx +
xor esi esi +
test ebx ebx +
jz loc_1004BB5  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
call __SEH_prolog4_GS  +
mov eax [ebp+arg_0] +
mov [ebp+var_7C] eax +
mov ebx [ebp+arg_4] +
xor edi edi +
mov [ebp+lpBuffer] edi +
push 40h  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
call memset  +
mov esi 0F8h +
push esi  +
push edi  +
lea eax [ebp+var_17C] +
push eax  +
call memset  +
add esp 18h +
xor eax eax +
lea edi [ebp+var_78] +
stos   +
stos   +
push 0  +
push 80h  +
push 3  +
push 0  +
push 7  +
push 80000000h  +
push ebx  +
call ds:CreateFileW  +
mov edi eax +
mov [ebp+hObject] edi +
cmp edi 0FFFFFFFFh +
jz loc_1004C3B  +
lea eax [ebp+var_78] +
push eax  +
push edi  +
call ds:GetFileSizeEx  +
test eax eax +
jnz loc_1004C57  +
call ds:GetLastError  +
test eax eax +
jle loc_1004C4F  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_60] eax +
jmp loc_1004DEF  +
and [ebp+ms_exc.disabled] 0 +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 40h  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
mov ebx ds:ReadFile +
call ebx  +
test eax eax +
jnz loc_1004C90  +
call ds:GetLastError  +
test eax eax +
jle loc_1004C88  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_60] eax +
jmp loc_1004DE8  +
cmp [ebp+NumberOfBytesRead] 40h +
jz loc_1004CA2  +
mov [ebp+var_60] 800700C1h +
jmp loc_1004DE8  +
mov eax 5A4Dh +
cmp word ptr [ebp+Buffer] ax +
jnz loc_1004C96  +
mov eax [ebp+var_20] +
test eax eax +
jle loc_1004C96  +
cmp eax 10000000h +
jnb loc_1004C96  +
cdq   +
mov [ebp+var_84] eax +
mov [ebp+var_80] edx +
push 0  +
push 0  +
push edx  +
push eax  +
push edi  +
mov edi ds:SetFilePointerEx +
call edi  +
test eax eax +
jz loc_1004C96  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push esi  +
lea eax [ebp+var_17C] +
push eax  +
push [ebp+hObject]  +
call ebx  +
test eax eax +
jz loc_1004C74  +
cmp [ebp+NumberOfBytesRead] esi +
jnz loc_1004C96  +
cmp [ebp+var_17C] 4550h +
jnz loc_1004C96  +
movzx ecx [ebp+var_176] +
imul ecx ecx +
movzx eax [ebp+var_168] +
lea eax [ebp+eax+var_164] +
add eax ecx +
lea ecx [ebp+var_17C] +
cmp eax ecx +
jbe loc_1004C96  +
sub eax ecx +
mov [ebp+nNumberOfBytesToRead] eax +
cmp eax 0FFFFFFFFh +
ja loc_1004C96  +
mov eax large fs:18h +
push [ebp+nNumberOfBytesToRead]  +
push 8  +
mov eax [eax+30h] +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov [ebp+lpBuffer] eax +
xor esi esi +
cmp eax esi +
jnz loc_1004D62  +
mov [ebp+var_60] 8007000Eh +
jmp loc_1004DE8  +
push esi  +
push esi  +
push [ebp+var_80]  +
push [ebp+var_84]  +
push [ebp+hObject]  +
call edi  +
test eax eax +
jz loc_1004C96  +
push esi  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
mov edi [ebp+nNumberOfBytesToRead] +
push edi  +
push [ebp+lpBuffer]  +
push [ebp+hObject]  +
call ebx  +
test eax eax +
jnz loc_1004D9C  +
call ds:GetLastError  +
cmp eax esi +
jmp loc_1004C7C  +
cmp [ebp+NumberOfBytesRead] edi +
jnz loc_1004C96  +
mov eax [ebp+var_7C] +
lea ecx [eax+14h] +
push ecx  +
push eax  +
push [ebp+var_74]  +
push [ebp+var_78]  +
push [ebp+lpBuffer]  +
call sub_1004F9F  +
cmp eax esi +
jge loc_1004DC9  +
or eax 10000000h +
jmp loc_1004C88  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+var_60] esi +
jmp loc_1004DEF  +
push dword ptr [ebp-14h]  +
call sub_1005091  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-60h] 80070002h +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor esi esi +
cmp [ebp+lpBuffer] esi +
jz loc_1004E0C  +
push [ebp+lpBuffer]  +
push esi  +
mov eax large fs:18h +
mov eax [eax+30h] +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_1004E20  +
cmp [ebp+hObject] esi +
jz loc_1004E20  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax [ebp+var_60] +
call __SEH_epilog4_GS  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_1008018 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
push edi  +
push 18h  +
mov [ebp+var_24] eax +
lea eax [ebp+var_40] +
push eax  +
push edi  +
push 0FFFFFFFFh  +
mov [ebp+var_20] edi +
mov [ebp+var_28] edi +
call ds:NtQueryInformationProcess  +
cmp eax edi +
jge loc_1004E72  +
or eax 10000000h +
mov esi eax +
jmp loc_1004F09  +
push ebx  +
push [ebp+dwProcessId]  +
push edi  +
push 410h  +
call ds:OpenProcess  +
mov ebx eax +
cmp ebx edi +
jnz loc_1004EA0  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1004E9C  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1004EE2  +
push ebx  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
call sub_1004A73  +
mov esi eax +
cmp esi edi +
jnz loc_1004EE2  +
push [ebp+var_20]  +
lea eax [ebp+var_1C] +
push eax  +
call sub_1004BC3  +
mov esi eax +
cmp esi edi +
jl loc_1004EE2  +
push [ebp+var_24]  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+var_28]  +
push [ebp+var_20]  +
call PropertyLengthAsVariant  +
cmp eax edi +
jz loc_1004EE0  +
jg loc_1004E92  +
jmp loc_1004E9C  +
xor esi esi +
cmp ebx edi +
jz loc_1004EED  +
push ebx  +
call ds:CloseHandle  +
pop ebx  +
cmp [ebp+var_20] edi +
jz loc_1004F09  +
push [ebp+var_20]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push edi  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
cmp esi edi +
pop edi  +
pop esi  +
jge loc_1004F17  +
push [ebp+var_24]  +
call ?Allocate@CBufferAllocator@@UAEPAXK@Z  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10030C4  +
leave   +
retn 4  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_10030C4  +
jmp __SEH_epilog4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_1008018 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_10] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_0] +
push 5Bh  +
lea eax [ebp+var_60+1] +
push 0  +
push eax  +
mov [ebp+var_68] esi +
mov [ebp+var_6C] ebx +
mov byte ptr [ebp+var_60] 0 +
call memset  +
add esp 0Ch +
test edi edi +
jz loc_1005076  +
mov eax [ebp+arg_4] +
or eax [ebp+arg_8] +
jz loc_1005076  +
test esi esi +
jz loc_1005076  +
test ebx ebx +
jz loc_1005076  +
movzx eax word ptr [edi+6] +
movzx ecx word ptr [edi+14h] +
imul eax eax +
add eax edi +
lea ebx [ecx+eax+18h] +
movzx eax word ptr [edi+18h] +
cmp eax 10Bh +
jz loc_1005022  +
cmp eax 20Bh +
jnz loc_1005076  +
lea esi [edi+30h] +
lea eax [esi+8] +
jmp loc_1005028  +
lea esi [edi+34h] +
lea eax [esi+4] +
mov [ebp+var_64] eax +
lea eax [ebp+var_60] +
push eax  +
call sub_10050C0  +
sub esi edi +
push esi  +
push edi  +
lea eax [ebp+var_60] +
push eax  +
call sub_1005180  +
sub ebx [ebp+var_64] +
lea eax [ebp+var_60] +
push ebx  +
push [ebp+var_64]  +
push eax  +
call sub_1005180  +
push 8  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_60] +
push eax  +
call sub_1005180  +
push [ebp+var_68]  +
lea eax [ebp+var_60] +
push eax  +
call sub_1005290  +
mov eax [ebp+var_6C] +
mov byte ptr [eax] 1 +
xor eax eax +
jmp loc_100507B  +
mov eax 0C000000Dh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10030C4  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
xor ecx ecx +
cmp dword ptr [eax] 0C0000006h +
setz cl  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
cmp dword_100856C 0 +
push ebx  +
jnz loc_100513D  +
push eax  +
push ebx  +
push ecx  +
push edx  +
xor eax eax +
cpuid   +
xor eax eax +
xor ebx 756E6547h +
setz al  +
xor ebx ebx +
xor ecx 6C65746Eh +
setz bl  +
and eax ebx +
xor ecx ecx +
xor edx 49656E69h +
setz cl  +
and eax ecx +
mov [ebp+var_4] eax +
mov eax 1 +
cpuid   +
xor ecx ecx +
xor edx edx +
mov ebx 0FF0h +
and ebx eax +
mov [ebp+var_8] ebx +
pop edx  +
pop ecx  +
pop ebx  +
pop eax  +
cmp [ebp+var_4] 0 +
mov eax 1 +
jz loc_1005131  +
cmp [ebp+var_8] 660h +
jnb loc_1005131  +
xor eax eax +
mov eax off_100802C[eax*4] +
mov dword_100856C eax +
mov eax [ebp+arg_0] +
mov dword ptr [eax+54h] 0 +
mov dword ptr [eax+58h] 0 +
mov dword ptr [eax+40h] 67452301h +
mov dword ptr [eax+44h] 0EFCDAB89h +
mov dword ptr [eax+48h] 98BADCFEh +
mov dword ptr [eax+4Ch] 10325476h +
mov dword ptr [eax+50h] 0C3D2E1F0h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_0] +
mov ecx [edi+58h] +
mov eax ecx +
add ecx esi +
and eax 3Fh +
mov [ebp+var_4] eax +
mov [edi+58h] ecx +
cmp ecx esi +
jnb loc_10051A8  +
inc dword ptr [edi+54h]  +
test eax eax +
jbe loc_10051FB  +
lea ecx [eax+esi] +
mov [ebp+var_8] ecx +
cmp ecx 40h +
jb loc_10051FB  +
mov ebx [ebp+arg_4] +
mov ecx 40h +
sub ecx eax +
push ecx  +
add eax edi +
push ebx  +
push eax  +
call memcpy  +
mov eax [ebp+var_8] +
add esp 0Ch +
mov edx 40h +
sub edx [ebp+var_4] +
push edi  +
lea ecx [edi+40h] +
add eax 0FFFFFFC0h +
push ecx  +
add ebx edx +
mov [ebp+arg_8] eax +
call dword_100856C  +
mov esi [ebp+arg_8] +
mov [ebp+var_4] 0 +
mov eax [ebp+var_4] +
jmp loc_10051FE  +
mov ebx [ebp+arg_4] +
test bl 3 +
jz loc_100523C  +
cmp esi 40h +
jb loc_100526A  +
shr esi 6 +
mov [ebp+arg_4] esi +
mov edi edi +
mov eax [ebp+arg_0] +
push eax  +
add eax 40h +
mov ecx 10h +
mov esi ebx +
push eax  +
movs   +
call dword_100856C  +
sub [ebp+arg_8] 40h +
mov edi [ebp+arg_0] +
add ebx 40h +
sub [ebp+arg_4] 1 +
jnz loc_1005210  +
mov esi [ebp+arg_8] +
jmp loc_1005267  +
cmp esi 40h +
jb loc_100526A  +
mov eax esi +
shr eax 6 +
mov [ebp+arg_8] eax +
lea esp [esp+0] +
push ebx  +
lea eax [edi+40h] +
push eax  +
call dword_100856C  +
add ebx 40h +
sub esi 40h +
sub [ebp+arg_8] 1 +
jnz loc_1005250  +
mov eax [ebp+var_4] +
test esi esi +
jz loc_100527B  +
push esi  +
add eax edi +
push ebx  +
push eax  +
call memcpy  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+58h] +
push edi  +
and eax 3Fh +
mov edi 40h +
sub edi eax +
cmp edi 8 +
ja loc_10052B2  +
add edi 40h +
lea ecx [edi-8] +
push ecx  +
lea edx [ebp+var_50] +
push 0  +
push edx  +
call memset  +
mov ecx [esi+54h] +
mov eax [esi+58h] +
add ecx ecx +
mov edx eax +
add ecx ecx +
add ecx ecx +
shr edx 1Dh +
or ecx edx +
add esp 0Ch +
add eax eax +
mov [ebp+var_8] ecx +
push 2  +
lea ecx [ebp+var_8] +
add eax eax +
push ecx  +
lea edx [ebp+edi+var_58] +
add eax eax +
push edx  +
mov byte ptr [ebp+var_50] 80h +
mov [ebp+var_4] eax +
call sub_1007150  +
push edi  +
lea eax [ebp+var_50] +
push eax  +
push esi  +
call sub_1005180  +
mov edx [ebp+arg_4] +
push 5  +
lea ecx [esi+40h] +
push ecx  +
push edx  +
call sub_1007150  +
push 40h  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
push esi  +
call sub_10050C0  +
pop edi  +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push ebx  +
push ebp  +
mov edx [esp+arg_4] +
sub esp 140h +
mov esi 10h +
lea ecx [esp+140h+var_144] +
mov eax [edx] +
add ecx 4 +
add edx 4 +
bswap eax  +
mov [ecx] eax +
dec esi  +
jnz loc_1005357  +
mov ebp [esp+140h+arg_0] +
lea ecx [esp+140h+var_138] +
mov edx 20h +
xor eax eax +
xor ebx ebx +
mov eax [ecx-8] +
mov ebx [ecx-4] +
mov esi [ecx] +
mov edi [ecx+4] +
xor eax esi +
xor ebx edi +
mov esi [ecx+18h] +
mov edi [ecx+1Ch] +
xor eax esi +
xor ebx edi +
mov esi [ecx+2Ch] +
mov edi [ecx+30h] +
xor eax esi +
add ecx 8 +
rol eax 1 +
xor ebx edi +
rol ebx 1 +
mov [ecx+30h] eax +
dec edx  +
mov [ecx+34h] ebx +
jnz loc_100537A  +
mov eax [ebp+0] +
mov ebx [ebp+4] +
mov ecx [ebp+8] +
mov edx [ebp+0Ch] +
mov edi [ebp+10h] +
mov ebp ecx +
xor ebp edx +
and ebp ebx +
mov esi eax +
rol esi 5 +
add edi esi +
mov esi [esp+140h+var_140] +
ror ebx 1 +
xor ebp edx +
ror ebx 1 +
lea edi [esi+edi+5A827999h] +
add edi ebp +
mov esi ebx +
xor esi ecx +
mov ebp edi +
rol ebp 5 +
and esi eax +
add edx ebp +
ror eax 1 +
mov ebp [esp+140h+var_13C] +
ror eax 1 +
xor esi ecx +
lea edx [ebp+edx+5A827999h] +
mov ebp eax +
add edx esi +
xor ebp ebx +
and ebp edi +
mov esi edx +
rol esi 5 +
add ecx esi +
mov esi [esp+140h+var_138] +
ror edi 1 +
xor ebp ebx +
ror edi 1 +
lea ecx [esi+ecx+5A827999h] +
add ecx ebp +
mov esi edi +
xor esi eax +
mov ebp ecx +
rol ebp 5 +
and esi edx +
add ebx ebp +
ror edx 1 +
mov ebp [esp+140h+var_134] +
ror edx 1 +
xor esi eax +
lea ebx [ebp+ebx+5A827999h] +
mov ebp edx +
add ebx esi +
xor ebp edi +
and ebp ecx +
mov esi ebx +
rol esi 5 +
add eax esi +
mov esi [esp+140h+var_130] +
ror ecx 1 +
xor ebp edi +
ror ecx 1 +
lea eax [esi+eax+5A827999h] +
add eax ebp +
mov esi ecx +
xor esi edx +
mov ebp eax +
rol ebp 5 +
and esi ebx +
add edi ebp +
ror ebx 1 +
mov ebp [esp+140h+var_12C] +
ror ebx 1 +
xor esi edx +
lea edi [ebp+edi+5A827999h] +
mov ebp ebx +
add edi esi +
xor ebp ecx +
and ebp eax +
mov esi edi +
rol esi 5 +
add edx esi +
mov esi [esp+140h+var_128] +
ror eax 1 +
xor ebp ecx +
ror eax 1 +
lea edx [esi+edx+5A827999h] +
add edx ebp +
mov esi eax +
xor esi ebx +
mov ebp edx +
rol ebp 5 +
and esi edi +
add ecx ebp +
ror edi 1 +
mov ebp [esp+140h+var_124] +
ror edi 1 +
xor esi ebx +
lea ecx [ebp+ecx+5A827999h] +
mov ebp edi +
add ecx esi +
xor ebp eax +
and ebp edx +
mov esi ecx +
rol esi 5 +
add ebx esi +
mov esi [esp+140h+var_120] +
ror edx 1 +
xor ebp eax +
ror edx 1 +
lea ebx [esi+ebx+5A827999h] +
add ebx ebp +
mov esi edx +
xor esi edi +
mov ebp ebx +
rol ebp 5 +
and esi ecx +
add eax ebp +
ror ecx 1 +
mov ebp [esp+140h+var_11C] +
ror ecx 1 +
xor esi edi +
lea eax [ebp+eax+5A827999h] +
mov ebp ecx +
add eax esi +
xor ebp edx +
and ebp ebx +
mov esi eax +
rol esi 5 +
add edi esi +
mov esi [esp+140h+var_118] +
ror ebx 1 +
xor ebp edx +
ror ebx 1 +
lea edi [esi+edi+5A827999h] +
add edi ebp +
mov esi ebx +
xor esi ecx +
mov ebp edi +
rol ebp 5 +
and esi eax +
add edx ebp +
ror eax 1 +
mov ebp [esp+140h+var_114] +
ror eax 1 +
xor esi ecx +
lea edx [ebp+edx+5A827999h] +
mov ebp eax +
add edx esi +
xor ebp ebx +
and ebp edi +
mov esi edx +
rol esi 5 +
add ecx esi +
mov esi [esp+140h+var_110] +
ror edi 1 +
xor ebp ebx +
ror edi 1 +
lea ecx [esi+ecx+5A827999h] +
add ecx ebp +
mov esi edi +
xor esi eax +
mov ebp ecx +
rol ebp 5 +
and esi edx +
add ebx ebp +
ror edx 1 +
mov ebp [esp+140h+var_10C] +
ror edx 1 +
xor esi eax +
lea ebx [ebp+ebx+5A827999h] +
mov ebp edx +
add ebx esi +
xor ebp edi +
and ebp ecx +
mov esi ebx +
rol esi 5 +
add eax esi +
mov esi [esp+140h+var_108] +
ror ecx 1 +
xor ebp edi +
ror ecx 1 +
lea eax [esi+eax+5A827999h] +
add eax ebp +
mov esi ecx +
xor esi edx +
mov ebp eax +
rol ebp 5 +
and esi ebx +
add edi ebp +
ror ebx 1 +
mov ebp [esp+140h+var_104] +
ror ebx 1 +
xor esi edx +
lea edi [ebp+edi+5A827999h] +
mov ebp ebx +
add edi esi +
xor ebp ecx +
and ebp eax +
mov esi edi +
rol esi 5 +
add edx esi +
mov esi [esp+140h+var_100] +
ror eax 1 +
xor ebp ecx +
ror eax 1 +
lea edx [esi+edx+5A827999h] +
add edx ebp +
mov esi eax +
xor esi ebx +
mov ebp edx +
rol ebp 5 +
and esi edi +
add ecx ebp +
ror edi 1 +
mov ebp [esp+140h+var_FC] +
ror edi 1 +
xor esi ebx +
lea ecx [ebp+ecx+5A827999h] +
mov ebp edi +
add ecx esi +
xor ebp eax +
and ebp edx +
mov esi ecx +
rol esi 5 +
add ebx esi +
mov esi [esp+140h+var_F8] +
ror edx 1 +
xor ebp eax +
ror edx 1 +
lea ebx [esi+ebx+5A827999h] +
add ebx ebp +
mov esi edx +
xor esi edi +
mov ebp ebx +
rol ebp 5 +
and esi ecx +
add eax ebp +
ror ecx 1 +
mov ebp [esp+140h+var_F4] +
ror ecx 1 +
xor esi edi +
lea eax [ebp+eax+5A827999h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_F0] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_EC] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_E8] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_E4] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_E0] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_DC] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_D8] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_D4] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_D0] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_CC] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_C8] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_C4] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_C0] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_BC] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_B8] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_B4] +
lea edi [ebp+edi+6ED9EBA1h] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_B0] +
lea edx [ebp+edx+6ED9EBA1h] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_AC] +
lea ecx [ebp+ecx+6ED9EBA1h] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_A8] +
lea ebx [ebp+ebx+6ED9EBA1h] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_A4] +
lea eax [ebp+eax+6ED9EBA1h] +
mov ebp ecx +
add eax esi +
mov ebp ebx +
mov esi eax +
or ebp ecx +
rol esi 5 +
and ebp edx +
add edi esi +
mov esi [esp+140h+var_A0] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_9C] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_98] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_94] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_90] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ebx +
mov esi eax +
rol esi 5 +
or ebp ecx +
add edi esi +
and ebp edx +
mov esi [esp+140h+var_8C] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_88] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_84] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_80] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_7C] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ebx +
mov esi eax +
rol esi 5 +
or ebp ecx +
add edi esi +
and ebp edx +
mov esi [esp+140h+var_78] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_74] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_70] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_6C] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_68] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ebx +
mov esi eax +
rol esi 5 +
or ebp ecx +
add edi esi +
and ebp edx +
mov esi [esp+140h+var_64] +
add edi esi +
mov esi ebx +
and esi ecx +
add edi 8F1BBCDCh +
ror ebx 1 +
or esi ebp +
ror ebx 1 +
add edi esi +
mov ebp eax +
mov esi edi +
rol esi 5 +
or ebp ebx +
add edx esi +
and ebp ecx +
mov esi [esp+140h+var_60] +
add edx esi +
mov esi eax +
and esi ebx +
add edx 8F1BBCDCh +
ror eax 1 +
or esi ebp +
ror eax 1 +
add edx esi +
mov ebp edi +
mov esi edx +
rol esi 5 +
or ebp eax +
add ecx esi +
and ebp ebx +
mov esi [esp+140h+var_5C] +
add ecx esi +
mov esi edi +
and esi eax +
add ecx 8F1BBCDCh +
ror edi 1 +
or esi ebp +
ror edi 1 +
add ecx esi +
mov ebp edx +
mov esi ecx +
rol esi 5 +
or ebp edi +
add ebx esi +
and ebp eax +
mov esi [esp+140h+var_58] +
add ebx esi +
mov esi edx +
and esi edi +
add ebx 8F1BBCDCh +
ror edx 1 +
or esi ebp +
ror edx 1 +
add ebx esi +
mov ebp ecx +
mov esi ebx +
rol esi 5 +
or ebp edx +
add eax esi +
and ebp edi +
mov esi [esp+140h+var_54] +
add eax esi +
mov esi ecx +
and esi edx +
add eax 8F1BBCDCh +
ror ecx 1 +
or esi ebp +
ror ecx 1 +
add eax esi +
mov ebp ecx +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_50] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_4C] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_48] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_44] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_40] +
lea eax [ebp+eax-359D3E2Ah] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_3C] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_38] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_34] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_30] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_2C] +
lea eax [ebp+eax-359D3E2Ah] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_28] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_24] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_20] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_1C] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_18] +
lea eax [ebp+eax-359D3E2Ah] +
mov ebp ecx +
add eax esi +
xor ebp ebx +
xor ebp edx +
mov esi eax +
rol esi 5 +
ror ebx 1 +
add edi esi +
ror ebx 1 +
mov esi [esp+140h+var_14] +
lea edi [ebp+edi-359D3E2Ah] +
mov ebp ebx +
add edi esi +
xor ebp eax +
xor ebp ecx +
mov esi edi +
rol esi 5 +
ror eax 1 +
add edx esi +
ror eax 1 +
mov esi [esp+140h+var_10] +
lea edx [ebp+edx-359D3E2Ah] +
mov ebp eax +
add edx esi +
xor ebp edi +
xor ebp ebx +
mov esi edx +
rol esi 5 +
ror edi 1 +
add ecx esi +
ror edi 1 +
mov esi [esp+140h+var_C] +
lea ecx [ebp+ecx-359D3E2Ah] +
mov ebp edi +
add ecx esi +
xor ebp edx +
xor ebp eax +
mov esi ecx +
rol esi 5 +
ror edx 1 +
add ebx esi +
ror edx 1 +
mov esi [esp+140h+var_8] +
lea ebx [ebp+ebx-359D3E2Ah] +
mov ebp edx +
add ebx esi +
xor ebp ecx +
xor ebp edi +
mov esi ebx +
rol esi 5 +
ror ecx 1 +
add eax esi +
ror ecx 1 +
mov esi [esp+140h+var_4] +
add eax 0CA62C1D6h +
add esi ebp +
add eax esi +
mov esi [esp+140h+arg_0] +
add esp 140h +
mov ebp [esi] +
add eax ebp +
mov ebp [esi+4] +
add ebx ebp +
mov ebp [esi+8] +
add ecx ebp +
mov ebp [esi+0Ch] +
add edx ebp +
mov ebp [esi+10h] +
add edi ebp +
mov [esi] eax +
mov [esi+4] ebx +
mov [esi+8] ecx +
mov [esi+0Ch] edx +
mov [esi+10h] edi +
pop ebp  +
pop ebx  +
pop edi  +
pop esi  +
retn 8  +
***
push ebx  +
push ebp  +
sub esp 140h +
mov ebp [esp+140h+arg_0] +
mov eax [ebp+0] +
mov ebx [ebp+4] +
mov ecx [ebp+8] +
mov edx [ebp+0Ch] +
mov edi [ebp+10h] +
mov ebp [esp+140h+arg_4] +
mov esi [ebp+0] +
bswap esi  +
mov [esp+140h+var_140] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [ebp+4] +
bswap esi  +
mov [esp+140h+var_13C] esi +
add edx esi +
mov esi edi +
rol esi 5 +
lea edx [edx+esi+5A827999h] +
mov esi ebx +
xor esi ecx +
and esi eax +
xor esi ecx +
ror eax 2 +
add edx esi +
mov esi [ebp+8] +
bswap esi  +
mov [esp+140h+var_138] esi +
add ecx esi +
mov esi edx +
rol esi 5 +
lea ecx [ecx+esi+5A827999h] +
mov esi eax +
xor esi ebx +
and esi edi +
xor esi ebx +
ror edi 2 +
add ecx esi +
mov esi [ebp+0Ch] +
bswap esi  +
mov [esp+140h+var_134] esi +
add ebx esi +
mov esi ecx +
rol esi 5 +
lea ebx [ebx+esi+5A827999h] +
mov esi edi +
xor esi eax +
and esi edx +
xor esi eax +
ror edx 2 +
add ebx esi +
mov esi [ebp+10h] +
bswap esi  +
mov [esp+140h+var_130] esi +
add eax esi +
mov esi ebx +
rol esi 5 +
lea eax [eax+esi+5A827999h] +
mov esi edx +
xor esi edi +
and esi ecx +
xor esi edi +
ror ecx 2 +
add eax esi +
mov esi [ebp+14h] +
bswap esi  +
mov [esp+140h+var_12C] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [ebp+18h] +
bswap esi  +
mov [esp+140h+var_128] esi +
add edx esi +
mov esi edi +
rol esi 5 +
lea edx [edx+esi+5A827999h] +
mov esi ebx +
xor esi ecx +
and esi eax +
xor esi ecx +
ror eax 2 +
add edx esi +
mov esi [ebp+1Ch] +
bswap esi  +
mov [esp+140h+var_124] esi +
add ecx esi +
mov esi edx +
rol esi 5 +
lea ecx [ecx+esi+5A827999h] +
mov esi eax +
xor esi ebx +
and esi edi +
xor esi ebx +
ror edi 2 +
add ecx esi +
mov esi [ebp+20h] +
bswap esi  +
mov [esp+140h+var_120] esi +
add ebx esi +
mov esi ecx +
rol esi 5 +
lea ebx [ebx+esi+5A827999h] +
mov esi edi +
xor esi eax +
and esi edx +
xor esi eax +
ror edx 2 +
add ebx esi +
mov esi [ebp+24h] +
bswap esi  +
mov [esp+140h+var_11C] esi +
add eax esi +
mov esi ebx +
rol esi 5 +
lea eax [eax+esi+5A827999h] +
mov esi edx +
xor esi edi +
and esi ecx +
xor esi edi +
ror ecx 2 +
add eax esi +
mov esi [ebp+28h] +
bswap esi  +
mov [esp+140h+var_118] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [ebp+2Ch] +
bswap esi  +
mov [esp+140h+var_114] esi +
add edx esi +
mov esi edi +
rol esi 5 +
lea edx [edx+esi+5A827999h] +
mov esi ebx +
xor esi ecx +
and esi eax +
xor esi ecx +
ror eax 2 +
add edx esi +
mov esi [ebp+30h] +
bswap esi  +
mov [esp+140h+var_110] esi +
add ecx esi +
mov esi edx +
rol esi 5 +
lea ecx [ecx+esi+5A827999h] +
mov esi eax +
xor esi ebx +
and esi edi +
xor esi ebx +
ror edi 2 +
add ecx esi +
mov esi [ebp+34h] +
bswap esi  +
mov [esp+140h+var_10C] esi +
add ebx esi +
mov esi ecx +
rol esi 5 +
lea ebx [ebx+esi+5A827999h] +
mov esi edi +
xor esi eax +
and esi edx +
xor esi eax +
ror edx 2 +
add ebx esi +
mov esi [ebp+38h] +
bswap esi  +
mov [esp+140h+var_108] esi +
add eax esi +
mov esi ebx +
rol esi 5 +
lea eax [eax+esi+5A827999h] +
mov esi edx +
xor esi edi +
and esi ecx +
xor esi edi +
ror ecx 2 +
add eax esi +
mov esi [ebp+3Ch] +
bswap esi  +
mov [esp+140h+var_104] esi +
add edi esi +
mov esi eax +
rol esi 5 +
lea edi [edi+esi+5A827999h] +
mov esi ecx +
xor esi edx +
and esi ebx +
xor esi edx +
ror ebx 2 +
add edi esi +
mov esi [esp+140h+var_140] +
mov ebp [esp+140h+var_138] +
xor esi ebp +
mov ebp [esp+140h+var_120] +
xor esi ebp +
mov ebp [esp+140h+var_10C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_100] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+5A827999h] +
add edx esi +
mov ebp ebx +
xor ebp ecx +
and ebp eax +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_13C] +
mov ebp [esp+140h+var_134] +
xor esi ebp +
mov ebp [esp+140h+var_11C] +
xor esi ebp +
mov ebp [esp+140h+var_108] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_FC] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+5A827999h] +
add ecx esi +
mov ebp eax +
xor ebp ebx +
and ebp edi +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_138] +
mov ebp [esp+140h+var_130] +
xor esi ebp +
mov ebp [esp+140h+var_118] +
xor esi ebp +
mov ebp [esp+140h+var_104] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_F8] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+5A827999h] +
add ebx esi +
mov ebp edi +
xor ebp eax +
and ebp edx +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_134] +
mov ebp [esp+140h+var_12C] +
xor esi ebp +
mov ebp [esp+140h+var_114] +
xor esi ebp +
mov ebp [esp+140h+var_100] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_F4] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+5A827999h] +
add eax esi +
mov ebp edx +
xor ebp edi +
and ebp ecx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_130] +
mov ebp [esp+140h+var_128] +
xor esi ebp +
mov ebp [esp+140h+var_110] +
xor esi ebp +
mov ebp [esp+140h+var_FC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_F0] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_12C] +
mov ebp [esp+140h+var_124] +
xor esi ebp +
mov ebp [esp+140h+var_10C] +
xor esi ebp +
mov ebp [esp+140h+var_F8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_EC] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_128] +
mov ebp [esp+140h+var_120] +
xor esi ebp +
mov ebp [esp+140h+var_108] +
xor esi ebp +
mov ebp [esp+140h+var_F4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_E8] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_124] +
mov ebp [esp+140h+var_11C] +
xor esi ebp +
mov ebp [esp+140h+var_104] +
xor esi ebp +
mov ebp [esp+140h+var_F0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_E4] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_120] +
mov ebp [esp+140h+var_118] +
xor esi ebp +
mov ebp [esp+140h+var_100] +
xor esi ebp +
mov ebp [esp+140h+var_EC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_E0] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_11C] +
mov ebp [esp+140h+var_114] +
xor esi ebp +
mov ebp [esp+140h+var_FC] +
xor esi ebp +
mov ebp [esp+140h+var_E8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_DC] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_118] +
mov ebp [esp+140h+var_110] +
xor esi ebp +
mov ebp [esp+140h+var_F8] +
xor esi ebp +
mov ebp [esp+140h+var_E4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_D8] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_114] +
mov ebp [esp+140h+var_10C] +
xor esi ebp +
mov ebp [esp+140h+var_F4] +
xor esi ebp +
mov ebp [esp+140h+var_E0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_D4] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_110] +
mov ebp [esp+140h+var_108] +
xor esi ebp +
mov ebp [esp+140h+var_F0] +
xor esi ebp +
mov ebp [esp+140h+var_DC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_D0] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_10C] +
mov ebp [esp+140h+var_104] +
xor esi ebp +
mov ebp [esp+140h+var_EC] +
xor esi ebp +
mov ebp [esp+140h+var_D8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_CC] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_108] +
mov ebp [esp+140h+var_100] +
xor esi ebp +
mov ebp [esp+140h+var_E8] +
xor esi ebp +
mov ebp [esp+140h+var_D4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_C8] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_104] +
mov ebp [esp+140h+var_FC] +
xor esi ebp +
mov ebp [esp+140h+var_E4] +
xor esi ebp +
mov ebp [esp+140h+var_D0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_C4] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_100] +
mov ebp [esp+140h+var_F8] +
xor esi ebp +
mov ebp [esp+140h+var_E0] +
xor esi ebp +
mov ebp [esp+140h+var_CC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_C0] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_FC] +
mov ebp [esp+140h+var_F4] +
xor esi ebp +
mov ebp [esp+140h+var_DC] +
xor esi ebp +
mov ebp [esp+140h+var_C8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_BC] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_F8] +
mov ebp [esp+140h+var_F0] +
xor esi ebp +
mov ebp [esp+140h+var_D8] +
xor esi ebp +
mov ebp [esp+140h+var_C4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_B8] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_F4] +
mov ebp [esp+140h+var_EC] +
xor esi ebp +
mov ebp [esp+140h+var_D4] +
xor esi ebp +
mov ebp [esp+140h+var_C0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_B4] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp+6ED9EBA1h] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_F0] +
mov ebp [esp+140h+var_E8] +
xor esi ebp +
mov ebp [esp+140h+var_D0] +
xor esi ebp +
mov ebp [esp+140h+var_BC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_B0] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp+6ED9EBA1h] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_EC] +
mov ebp [esp+140h+var_E4] +
xor esi ebp +
mov ebp [esp+140h+var_CC] +
xor esi ebp +
mov ebp [esp+140h+var_B8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_AC] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp+6ED9EBA1h] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_E8] +
mov ebp [esp+140h+var_E0] +
xor esi ebp +
mov ebp [esp+140h+var_C8] +
xor esi ebp +
mov ebp [esp+140h+var_B4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_A8] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp+6ED9EBA1h] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_E4] +
mov ebp [esp+140h+var_DC] +
xor esi ebp +
mov ebp [esp+140h+var_C4] +
xor esi ebp +
mov ebp [esp+140h+var_B0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_A4] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp+6ED9EBA1h] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_E0] +
mov ebp [esp+140h+var_D8] +
xor esi ebp +
mov ebp [esp+140h+var_C0] +
xor esi ebp +
mov ebp [esp+140h+var_AC] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_A0] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_DC] +
mov ebp [esp+140h+var_D4] +
xor esi ebp +
mov ebp [esp+140h+var_BC] +
xor esi ebp +
mov ebp [esp+140h+var_A8] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_9C] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_D8] +
mov ebp [esp+140h+var_D0] +
xor esi ebp +
mov ebp [esp+140h+var_B8] +
xor esi ebp +
mov ebp [esp+140h+var_A4] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_98] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_D4] +
mov ebp [esp+140h+var_CC] +
xor esi ebp +
mov ebp [esp+140h+var_B4] +
xor esi ebp +
mov ebp [esp+140h+var_A0] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_94] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_D0] +
mov ebp [esp+140h+var_C8] +
xor esi ebp +
mov ebp [esp+140h+var_B0] +
xor esi ebp +
mov ebp [esp+140h+var_9C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_90] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_CC] +
mov ebp [esp+140h+var_C4] +
xor esi ebp +
mov ebp [esp+140h+var_AC] +
xor esi ebp +
mov ebp [esp+140h+var_98] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_8C] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_C8] +
mov ebp [esp+140h+var_C0] +
xor esi ebp +
mov ebp [esp+140h+var_A8] +
xor esi ebp +
mov ebp [esp+140h+var_94] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_88] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_C4] +
mov ebp [esp+140h+var_BC] +
xor esi ebp +
mov ebp [esp+140h+var_A4] +
xor esi ebp +
mov ebp [esp+140h+var_90] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_84] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_C0] +
mov ebp [esp+140h+var_B8] +
xor esi ebp +
mov ebp [esp+140h+var_A0] +
xor esi ebp +
mov ebp [esp+140h+var_8C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_80] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_BC] +
mov ebp [esp+140h+var_B4] +
xor esi ebp +
mov ebp [esp+140h+var_9C] +
xor esi ebp +
mov ebp [esp+140h+var_88] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_7C] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_B8] +
mov ebp [esp+140h+var_B0] +
xor esi ebp +
mov ebp [esp+140h+var_98] +
xor esi ebp +
mov ebp [esp+140h+var_84] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_78] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_B4] +
mov ebp [esp+140h+var_AC] +
xor esi ebp +
mov ebp [esp+140h+var_94] +
xor esi ebp +
mov ebp [esp+140h+var_80] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_74] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_B0] +
mov ebp [esp+140h+var_A8] +
xor esi ebp +
mov ebp [esp+140h+var_90] +
xor esi ebp +
mov ebp [esp+140h+var_7C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_70] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_AC] +
mov ebp [esp+140h+var_A4] +
xor esi ebp +
mov ebp [esp+140h+var_8C] +
xor esi ebp +
mov ebp [esp+140h+var_78] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_6C] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_A8] +
mov ebp [esp+140h+var_A0] +
xor esi ebp +
mov ebp [esp+140h+var_88] +
xor esi ebp +
mov ebp [esp+140h+var_74] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_68] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_A4] +
mov ebp [esp+140h+var_9C] +
xor esi ebp +
mov ebp [esp+140h+var_84] +
xor esi ebp +
mov ebp [esp+140h+var_70] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_64] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-70E44324h] +
add edi esi +
mov ebp ebx +
mov esi ebx +
and ebp ecx +
or esi ecx +
and esi edx +
or ebp esi +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_A0] +
mov ebp [esp+140h+var_98] +
xor esi ebp +
mov ebp [esp+140h+var_80] +
xor esi ebp +
mov ebp [esp+140h+var_6C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_60] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-70E44324h] +
add edx esi +
mov ebp eax +
mov esi eax +
and ebp ebx +
or esi ebx +
and esi ecx +
or ebp esi +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_9C] +
mov ebp [esp+140h+var_94] +
xor esi ebp +
mov ebp [esp+140h+var_7C] +
xor esi ebp +
mov ebp [esp+140h+var_68] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_5C] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-70E44324h] +
add ecx esi +
mov ebp edi +
mov esi edi +
and ebp eax +
or esi eax +
and esi ebx +
or ebp esi +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_98] +
mov ebp [esp+140h+var_90] +
xor esi ebp +
mov ebp [esp+140h+var_78] +
xor esi ebp +
mov ebp [esp+140h+var_64] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_58] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-70E44324h] +
add ebx esi +
mov ebp edx +
mov esi edx +
and ebp edi +
or esi edi +
and esi eax +
or ebp esi +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_94] +
mov ebp [esp+140h+var_8C] +
xor esi ebp +
mov ebp [esp+140h+var_74] +
xor esi ebp +
mov ebp [esp+140h+var_60] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_54] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-70E44324h] +
add eax esi +
mov ebp ecx +
mov esi ecx +
and ebp edx +
or esi edx +
and esi edi +
or ebp esi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_90] +
mov ebp [esp+140h+var_88] +
xor esi ebp +
mov ebp [esp+140h+var_70] +
xor esi ebp +
mov ebp [esp+140h+var_5C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_50] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_8C] +
mov ebp [esp+140h+var_84] +
xor esi ebp +
mov ebp [esp+140h+var_6C] +
xor esi ebp +
mov ebp [esp+140h+var_58] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_4C] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_88] +
mov ebp [esp+140h+var_80] +
xor esi ebp +
mov ebp [esp+140h+var_68] +
xor esi ebp +
mov ebp [esp+140h+var_54] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_48] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_84] +
mov ebp [esp+140h+var_7C] +
xor esi ebp +
mov ebp [esp+140h+var_64] +
xor esi ebp +
mov ebp [esp+140h+var_50] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_44] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_80] +
mov ebp [esp+140h+var_78] +
xor esi ebp +
mov ebp [esp+140h+var_60] +
xor esi ebp +
mov ebp [esp+140h+var_4C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_40] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_7C] +
mov ebp [esp+140h+var_74] +
xor esi ebp +
mov ebp [esp+140h+var_5C] +
xor esi ebp +
mov ebp [esp+140h+var_48] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_3C] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_78] +
mov ebp [esp+140h+var_70] +
xor esi ebp +
mov ebp [esp+140h+var_58] +
xor esi ebp +
mov ebp [esp+140h+var_44] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_38] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_74] +
mov ebp [esp+140h+var_6C] +
xor esi ebp +
mov ebp [esp+140h+var_54] +
xor esi ebp +
mov ebp [esp+140h+var_40] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_34] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_70] +
mov ebp [esp+140h+var_68] +
xor esi ebp +
mov ebp [esp+140h+var_50] +
xor esi ebp +
mov ebp [esp+140h+var_3C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_30] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_6C] +
mov ebp [esp+140h+var_64] +
xor esi ebp +
mov ebp [esp+140h+var_4C] +
xor esi ebp +
mov ebp [esp+140h+var_38] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_2C] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_68] +
mov ebp [esp+140h+var_60] +
xor esi ebp +
mov ebp [esp+140h+var_48] +
xor esi ebp +
mov ebp [esp+140h+var_34] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_28] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_64] +
mov ebp [esp+140h+var_5C] +
xor esi ebp +
mov ebp [esp+140h+var_44] +
xor esi ebp +
mov ebp [esp+140h+var_30] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_24] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_60] +
mov ebp [esp+140h+var_58] +
xor esi ebp +
mov ebp [esp+140h+var_40] +
xor esi ebp +
mov ebp [esp+140h+var_2C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_20] esi +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_5C] +
mov ebp [esp+140h+var_54] +
xor esi ebp +
mov ebp [esp+140h+var_3C] +
xor esi ebp +
mov ebp [esp+140h+var_28] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_1C] esi +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_58] +
mov ebp [esp+140h+var_50] +
xor esi ebp +
mov ebp [esp+140h+var_38] +
xor esi ebp +
mov ebp [esp+140h+var_24] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_18] esi +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+var_54] +
mov ebp [esp+140h+var_4C] +
xor esi ebp +
mov ebp [esp+140h+var_34] +
xor esi ebp +
mov ebp [esp+140h+var_20] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_14] esi +
mov ebp eax +
rol ebp 5 +
lea edi [edi+ebp-359D3E2Ah] +
add edi esi +
mov ebp ebx +
xor ebp ecx +
xor ebp edx +
ror ebx 2 +
add edi ebp +
mov esi [esp+140h+var_50] +
mov ebp [esp+140h+var_48] +
xor esi ebp +
mov ebp [esp+140h+var_30] +
xor esi ebp +
mov ebp [esp+140h+var_1C] +
xor esi ebp +
rol esi 1 +
mov [esp+140h+var_10] esi +
mov ebp edi +
rol ebp 5 +
lea edx [edx+ebp-359D3E2Ah] +
add edx esi +
mov ebp eax +
xor ebp ebx +
xor ebp ecx +
ror eax 2 +
add edx ebp +
mov esi [esp+140h+var_4C] +
mov ebp [esp+140h+var_44] +
xor esi ebp +
mov ebp [esp+140h+var_2C] +
xor esi ebp +
mov ebp [esp+140h+var_18] +
xor esi ebp +
rol esi 1 +
mov ebp edx +
rol ebp 5 +
lea ecx [ecx+ebp-359D3E2Ah] +
add ecx esi +
mov ebp edi +
xor ebp eax +
xor ebp ebx +
ror edi 2 +
add ecx ebp +
mov esi [esp+140h+var_48] +
mov ebp [esp+140h+var_40] +
xor esi ebp +
mov ebp [esp+140h+var_28] +
xor esi ebp +
mov ebp [esp+140h+var_14] +
xor esi ebp +
rol esi 1 +
mov ebp ecx +
rol ebp 5 +
lea ebx [ebx+ebp-359D3E2Ah] +
add ebx esi +
mov ebp edx +
xor ebp edi +
xor ebp eax +
ror edx 2 +
add ebx ebp +
mov esi [esp+140h+var_44] +
mov ebp [esp+140h+var_3C] +
xor esi ebp +
mov ebp [esp+140h+var_24] +
xor esi ebp +
mov ebp [esp+140h+var_10] +
xor esi ebp +
rol esi 1 +
mov ebp ebx +
rol ebp 5 +
lea eax [eax+ebp-359D3E2Ah] +
add eax esi +
mov ebp ecx +
xor ebp edx +
xor ebp edi +
ror ecx 2 +
add eax ebp +
mov esi [esp+140h+arg_0] +
add esp 140h +
mov ebp [esi] +
add eax ebp +
mov ebp [esi+4] +
add ebx ebp +
mov ebp [esi+8] +
add ecx ebp +
mov ebp [esi+0Ch] +
add edx ebp +
mov ebp [esi+10h] +
add edi ebp +
mov [esi] eax +
mov [esi+4] ebx +
mov [esi+8] ecx +
mov [esi+0Ch] edx +
mov [esi+10h] edi +
pop ebp  +
pop ebx  +
pop edi  +
pop esi  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
test edx edx +
jbe loc_1007175  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
sub ecx eax +
push esi  +
mov esi [ecx+eax] +
bswap esi  +
mov [eax] esi +
add eax 4 +
sub edx 1 +
jnz loc_1007165  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
retf   +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756EC0C9h  +
***
