retf 0  +
***
retn   +
***
retn 0  +
***
retf   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:LoadLibraryA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetModuleHandleA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:LoadLibraryW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetModuleHandleW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp dword_100E374 0 +
push ebx  +
mov ebx ds:GetVersion +
push esi  +
jnz loc_10050DF  +
call ebx  +
test eax eax +
jns loc_10050D5  +
push offset FileName  +
call ds:GetFileAttributesW  +
push offset ModuleName  +
call ds:GetModuleHandleA  +
mov hModule eax +
mov dword_100E374 1 +
mov eax hModule +
mov esi ds:GetProcAddress +
test eax eax +
jz loc_10050FB  +
push [ebp+lpProcName]  +
push eax  +
call esi  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_100512B  +
push edi  +
mov edi [ebp+arg_4] +
mov eax [edi] +
test eax eax +
jnz loc_1005121  +
call ebx  +
test eax eax +
mov eax [ebp+arg_0] +
jns loc_1005116  +
push dword ptr [eax+0Ch]  +
call dword ptr [eax+8]  +
jmp loc_100511B  +
push dword ptr [eax+4]  +
call dword ptr [eax]  +
test eax eax +
jz loc_100512A  +
mov [edi] eax +
push [ebp+lpProcName]  +
push eax  +
call esi  +
mov [ebp+var_4] eax +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpProcName]  +
push offset unk_100E378  +
push offset off_10015BC  +
call sub_1005099  +
pop ebp  +
retn 4  +
***
call ds:GetLastError  +
test eax eax +
jnz loc_100516A  +
mov eax 54Fh +
test eax eax +
jle locret_1005176  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1005197  +
cmp [esi] ax +
jz loc_1005193  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1005189  +
test edx edx +
jnz loc_100519C  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_10051AD  +
test eax eax +
jl loc_10051AA  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test ecx ecx +
jz loc_10051C3  +
cmp ecx [ebp+arg_0] +
jbe loc_10051C8  +
mov eax 80070057h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_10051F6  +
cmp [ebp+arg_0] eax +
jnz loc_10051EA  +
cmp ecx eax +
jnz loc_10051EF  +
cmp ecx [ebp+arg_4] +
jbe loc_10051FE  +
mov eax 80070057h +
jmp loc_10051FE  +
push [ebp+arg_4]  +
call sub_10051B3  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100523C  +
cmp [ebp+arg_4] eax +
jz loc_1005238  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1005238  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100521B  +
test esi esi +
jnz loc_1005244  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1005252  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:__imp__vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1005287  +
cmp eax esi +
ja loc_1005287  +
jz loc_100528C  +
jmp loc_1005294  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100529D  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ecx 2 +
jbe loc_10052CD  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+arg_0] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_1005302  +
test [ebp+arg_8] 1000h +
jz loc_1005302  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_100534A  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_1005332  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_100534A  +
test esi esi +
jbe loc_1005363  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_1005363  +
test [ebp+arg_8] 800h +
jz loc_1005363  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push 4  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
xor esi esi +
mov [ebp+var_10] offset unk_100E198 +
mov [ebp+var_C] offset unk_100E1F8 +
mov [ebp+var_8] offset unk_100E258 +
mov [ebp+var_4] offset unk_100E2B8 +
call sub_100A58D  +
test eax eax +
jge loc_10053AA  +
mov esi eax +
push 4  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_10] offset unk_100E018 +
mov [ebp+var_C] offset unk_100E078 +
mov [ebp+var_8] offset unk_100E0D8 +
mov [ebp+var_4] offset unk_100E138 +
call sub_100A5F8  +
test eax eax +
jge loc_10053DA  +
mov esi eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_0] +
mov [ebp+var_4] ecx +
xor eax eax +
lea ecx [ebp+var_8] +
push ecx  +
inc eax  +
push eax  +
push 73Ah  +
push 0  +
mov [ebp+var_8] eax +
call WinSqmAddToStream  +
xor eax eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi]  +
xor edi edi +
call ds:SysFreeString  +
push [ebp+arg_4]  +
call ds:SysAllocString  +
mov [esi] eax +
cmp [ebp+arg_4] edi +
jz loc_1005442  +
cmp eax edi +
jnz loc_1005442  +
mov edi 8007000Eh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+pvarg] +
push edi  +
push esi  +
xor edi edi +
call ds:VariantClear  +
push [ebp+arg_4]  +
call ds:SysAllocString  +
mov [esi+8] eax +
cmp [ebp+arg_4] edi +
jz loc_100547E  +
cmp eax edi +
jnz loc_100547E  +
mov edi 8007000Eh +
jmp loc_1005484  +
push 8  +
pop eax  +
mov [esi] ax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
and [ebp+var_4] 0 +
push esi  +
mov esi ds:VariantInit +
push edi  +
lea eax [ebp+pvarg] +
push eax  +
call esi  +
lea eax [ebp+var_24] +
push eax  +
call esi  +
lea eax [ebp+var_34] +
push eax  +
call esi  +
cmp dword_100E344 0 +
jnz loc_10054C7  +
mov edi 80004005h +
jmp loc_1005525  +
push [ebp+arg_0]  +
lea eax [ebp+var_24] +
push eax  +
call sub_100544F  +
mov edi eax +
test edi edi +
jl loc_1005525  +
push offset dword_10015F8  +
lea eax [ebp+var_34] +
push eax  +
call sub_100544F  +
mov edi eax +
test edi edi +
jl loc_1005525  +
mov eax dword_100E344 +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1001D6C  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
test edi edi +
jl loc_1005525  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+pvarg] +
push edx  +
push edx  +
lea edx [ebp+var_34] +
push edx  +
lea edx [ebp+pvarg] +
push edx  +
lea edx [ebp+var_24] +
push edx  +
push eax  +
call dword ptr [ecx+0D0h]  +
mov edi eax +
mov esi ds:VariantClear +
lea eax [ebp+pvarg] +
push eax  +
call esi  +
lea eax [ebp+var_24] +
push eax  +
call esi  +
lea eax [ebp+var_34] +
push eax  +
call esi  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100554A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
xor esi esi +
xor ebx ebx +
mov [ebp+hKey] esi +
mov [ebp+lpMem] esi +
cmp dword_100E358 esi +
jnz loc_1005621  +
push 800h  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax esi +
jnz loc_100559B  +
mov ebx 8007000Eh +
jmp loc_1005621  +
push edi  +
xor ecx ecx +
mov [eax] cx +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push esi  +
push offset SubKey  +
push 80000002h  +
call ds:RegOpenKeyExW  +
xor ecx ecx +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jz loc_10055D3  +
jle loc_10055D1  +
and eax edi +
or eax esi +
mov ecx eax +
mov ebx ecx +
test ecx ecx +
jl loc_100561E  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpMem]  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push offset ValueName  +
push [ebp+hKey]  +
mov [ebp+cbData] 800h +
call ds:RegQueryValueExW  +
xor ecx ecx +
test eax eax +
jz loc_1005609  +
jle loc_1005607  +
and eax edi +
or eax esi +
mov ecx eax +
mov ebx ecx +
test ecx ecx +
jl loc_100561E  +
push [ebp+lpMem]  +
push offset dword_100E358  +
call sub_1005415  +
mov ebx eax +
xor esi esi +
pop edi  +
cmp ebx esi +
jge loc_1005638  +
push offset aSystemSystemDi  +
push offset dword_100E358  +
call sub_1005415  +
mov ebx eax +
jmp loc_1005621  +
cmp [ebp+lpMem] esi +
jz loc_100564E  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+hKey] esi +
jz loc_100565C  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100E34C +
push ebx  +
xor ebx ebx +
dec eax  +
mov [ebp+hKey] ebx +
jz loc_100568F  +
dec eax  +
jz loc_1005686  +
inc ebx  +
jmp loc_10057A9  +
mov [ebp+lpValueName] offset aPerfmon +
jmp loc_1005696  +
mov [ebp+lpValueName] offset aResmon +
push esi  +
push edi  +
cmp [ebp+cbData] ebx +
jz loc_1005733  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
push lpSubKey  +
push 80000001h  +
call ds:RegOpenKeyExW  +
xor ecx ecx +
mov edi 0FFFFh +
mov esi 80070000h +
cmp eax ebx +
jz loc_10056D4  +
jle loc_10056D2  +
and eax edi +
or eax esi +
mov ecx eax +
mov ebx ecx +
test ecx ecx +
jl loc_1005798  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 10h +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
xor ecx ecx +
test eax eax +
jz loc_100570C  +
jle loc_100570A  +
and eax edi +
or eax esi +
mov ecx eax +
mov ebx ecx +
test ecx ecx +
jl loc_1005798  +
cmp [ebp+cbData] 10h +
jnz loc_100572E  +
mov eax [ebp+lpData] +
mov ecx [eax+8] +
cmp ecx [eax] +
jl loc_100572E  +
mov ecx [eax+0Ch] +
cmp ecx [eax+4] +
jge loc_1005798  +
xor ebx ebx +
inc ebx  +
jmp loc_1005798  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push ebx  +
push 20006h  +
push ebx  +
push ebx  +
push ebx  +
push lpSubKey  +
push 80000001h  +
call ds:RegCreateKeyExW  +
xor ecx ecx +
mov edi 0FFFFh +
mov esi 80070000h +
cmp eax ebx +
jz loc_100576D  +
jle loc_100576B  +
and eax edi +
or eax esi +
mov ecx eax +
mov ebx ecx +
test ecx ecx +
jl loc_1005798  +
push 10h  +
push [ebp+lpData]  +
push 3  +
push 0  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
xor ecx ecx +
test eax eax +
jz loc_1005796  +
jle loc_1005794  +
and eax edi +
or eax esi +
mov ecx eax +
mov ebx ecx +
cmp [ebp+hKey] 0 +
pop edi  +
pop esi  +
jz loc_10057A9  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push esi  +
lea eax [ebp+X] +
push eax  +
push [ebp+hWnd]  +
xor esi esi +
mov [ebp+var_4] esi +
call ds:GetWindowRect  +
mov ecx [ebp-14h] +
mov eax [ebp+X] +
push 2  +
push ecx  +
push eax  +
call ds:MonitorFromPoint  +
lea ecx [ebp+mi] +
push ecx  +
push eax  +
mov [ebp+mi.cbSize] 28h +
call ds:GetMonitorInfoW  +
test eax eax +
jz loc_10057FB  +
mov [ebp+var_8] esi +
jmp loc_100581A  +
call ds:GetLastError  +
cmp eax esi +
jle loc_100580F  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax esi +
mov [ebp+var_8] eax +
jl loc_10058D6  +
mov eax [ebp+mi.rcWork.right] +
sub eax [ebp+mi.rcWork.left] +
mov edx [ebp+mi.rcWork.bottom] +
sub edx [ebp+mi.rcWork.top] +
push ebx  +
mov ebx [ebp-0Ch] +
push edi  +
mov edi [ebp-10h] +
mov ecx edi +
sub ecx [ebp+X] +
mov esi ebx +
sub esi [ebp-14h] +
cmp ecx eax +
jle loc_100584D  +
mov edi [ebp+X] +
add edi eax +
mov ecx eax +
mov [ebp-10h] edi +
mov [ebp+var_4] 1 +
cmp esi edx +
jle loc_1005863  +
mov eax [ebp-14h] +
lea ebx [edx+eax] +
mov esi edx +
mov [ebp-0Ch] ebx +
mov [ebp+var_4] 1 +
mov eax [ebp+mi.rcWork.left] +
cmp [ebp+X] eax +
jge loc_1005870  +
lea edi [eax+ecx] +
jmp loc_100587B  +
mov eax [ebp+mi.rcWork.right] +
cmp edi eax +
jle loc_1005888  +
mov edi eax +
sub eax ecx +
mov [ebp+var_4] 1 +
mov [ebp+X] eax +
mov [ebp-10h] edi +
mov eax [ebp+mi.rcWork.top] +
cmp [ebp-14h] eax +
jge loc_100589B  +
lea ebx [eax+esi] +
mov [ebp-14h] eax +
mov [ebp-0Ch] ebx +
jmp loc_10058B9  +
mov eax [ebp+mi.rcWork.bottom] +
cmp ebx eax +
jle loc_10058B3  +
mov ebx eax +
sub eax esi +
mov [ebp-0Ch] ebx +
mov [ebp-14h] eax +
mov [ebp+var_4] 1 +
cmp [ebp+var_4] 0 +
jz loc_10058D4  +
sub ebx [ebp-14h] +
sub edi [ebp+X] +
push 4  +
push ebx  +
push edi  +
push dword ptr [ebp-14h]  +
push [ebp+X]  +
push 0  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
pop edi  +
pop ebx  +
mov eax [ebp+var_8] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_100E344 +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push esi  +
push edi  +
test eax eax +
jnz loc_1005908  +
mov esi 80004005h +
jmp loc_100599A  +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push offset dword_1001410  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_100597C  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+120h]  +
mov esi eax +
test esi esi +
jl loc_100597C  +
push 3  +
pop eax  +
mov word ptr [ebp+var_18] ax +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp [ebp+var_10] 0 +
jz loc_100596C  +
mov eax [ebp+var_4] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+2Ch]  +
mov esi eax +
test esi esi +
jl loc_100597C  +
dec [ebp+var_10]  +
jnz loc_100594C  +
mov eax [ebp+var_8] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+124h]  +
mov esi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100598D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
mov eax [ebp+var_8] +
test eax eax +
jz loc_100599A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 88h +
mov eax dword_100E318 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
xor edi edi +
mov [ebp+lpvObj] edi +
mov [ebp+var_68] edi +
cmp dword_100E344 edi +
jnz loc_10059D6  +
mov esi 80004005h +
jmp loc_1005AE0  +
push edi  +
lea eax [ebp+pvParam] +
push eax  +
push 5Ch  +
push 1Fh  +
call ds:SystemParametersInfoW  +
test eax eax +
jnz loc_1005A07  +
call ds:GetLastError  +
cmp eax edi +
jle loc_10059FD  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi edi +
jl loc_1005AC3  +
push ebx  +
call ds:GetDesktopWindow  +
push eax  +
call ds:GetDC  +
mov ebx eax +
push 5Ah  +
push ebx  +
call ds:GetDeviceCaps  +
mov ecx eax +
mov eax [ebp+pvParam] +
cmp eax edi +
jge loc_1005A2B  +
neg eax  +
lea edx [ebp+var_44] +
imul eax eax +
mov [ebp+FontDesc.lpstrName] edx +
mov dx [ebp+var_50] +
mov [ebp+FontDesc.sWeight] dx +
movzx dx [ebp+var_49] +
mov [ebp+FontDesc.sCharset] dx +
movzx edx [ebp+var_4C] +
mov [ebp+FontDesc.fItalic] edx +
movzx edx [ebp+var_4B] +
mov [ebp+FontDesc.fUnderline] edx +
movzx edx [ebp+var_4A] +
mov [ebp+FontDesc.fStrikethrough] edx +
cdq   +
idiv  ecx +
mov [ebp+FontDesc.cbSizeofstruct] 20h +
mov dword ptr [ebp+FontDesc.cySize+4] edi +
mov dword ptr [ebp+FontDesc.cySize] eax +
lea eax [ebp+lpvObj] +
push eax  +
push offset riid  +
lea eax [ebp+FontDesc] +
push eax  +
call ds:OleCreateFontIndirect  +
mov esi eax +
cmp esi edi +
jl loc_1005AB6  +
mov eax dword_100E344 +
mov ecx [eax] +
lea edx [ebp+var_68] +
push edx  +
push offset dword_1001410  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jl loc_1005AB6  +
mov eax [ebp+var_68] +
push [ebp+lpvObj]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov esi eax +
cmp ebx edi +
jz loc_1005AC2  +
push ebx  +
push edi  +
call ds:ReleaseDC  +
pop ebx  +
mov eax [ebp+lpvObj] +
cmp eax edi +
jz loc_1005AD3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+lpvObj] edi +
mov eax [ebp+var_68] +
cmp eax edi +
jz loc_1005AE0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_10091BD  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
xor edi edi +
push esi  +
mov [ebp+var_4] edi +
mov [ebp+var_C] edi +
mov [ebp+var_8] edi +
call dword ptr [eax+0FCh]  +
mov ebx eax +
cmp ebx edi +
jl loc_1005BCD  +
call sub_10058E3  +
mov ebx eax +
cmp ebx edi +
jl loc_1005BCD  +
mov eax [esi] +
push 0FFFFFFFFh  +
push esi  +
call dword ptr [eax+124h]  +
mov ebx eax +
cmp ebx edi +
jl loc_1005BCD  +
mov eax [esi] +
push 3  +
push 1  +
push esi  +
call dword ptr [eax+184h]  +
mov ebx eax +
cmp ebx edi +
jl loc_1005BCD  +
mov eax [esi] +
lea ecx [ebp+var_8] +
push ecx  +
push esi  +
call dword ptr [eax+120h]  +
mov ebx eax +
cmp ebx edi +
jl loc_1005BCD  +
mov edi [ebp+arg_4] +
jmp loc_1005BBA  +
cmp [ebp+var_4] 0 +
jz loc_1005B83  +
push [ebp+var_4]  +
call ds:SysFreeString  +
and [ebp+var_4] 0 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005415  +
mov ebx eax +
test ebx ebx +
jl loc_1005BCD  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push [ebp+var_4]  +
push eax  +
call dword ptr [ecx+28h]  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1005BA8  +
sub eax edx +
sar eax 1 +
lea edi [edi+eax*2+2] +
cmp word ptr [edi] 0 +
jnz loc_1005B70  +
mov eax [esi] +
push 2  +
push esi  +
call dword ptr [eax+124h]  +
mov ebx eax +
mov eax [esi] +
push 3  +
push 0  +
push esi  +
call dword ptr [eax+184h]  +
cmp [ebp+var_4] 0 +
jz loc_1005BE9  +
push [ebp+var_4]  +
call ds:SysFreeString  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1005BF6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
mov [ebp+Rect.left] esi +
lea edi [ebp+Rect.top] +
stos   +
stos   +
stos   +
xor edi edi +
inc edi  +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
cmp [ebp+arg_4] esi +
jz loc_1005C30  +
push 20h  +
xor eax eax +
pop ecx  +
jmp loc_1005C37  +
mov eax edi +
mov ecx 1022h +
lea edx [ebp+var_4] +
push edx  +
push esi  +
push eax  +
push 80h  +
push ecx  +
push [ebp+arg_0]  +
call ds:SHCreateStreamOnFileEx  +
test eax eax +
jl loc_1005CC9  +
mov eax dword_100E344 +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push offset dword_1001D9C  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
cmp edi esi +
jl loc_1005CC9  +
mov eax [ebp+var_8] +
mov ecx [eax] +
cmp [ebp+arg_4] esi +
jz loc_1005CBF  +
push [ebp+var_4]  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
lea eax [ebp+Rect] +
push eax  +
push hWnd  +
call ds:GetClientRect  +
test eax eax +
jz loc_1005CB7  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
mov ecx [ebp+Rect.right] +
sub ecx [ebp+Rect.left] +
movzx eax ax +
movzx ecx cx +
shl eax 10h +
or eax ecx +
push eax  +
push esi  +
push 5  +
push hWnd  +
call ds:SendMessageW  +
cmp edi esi +
jge loc_1005CC9  +
xor edi edi +
jmp loc_1005CC9  +
push esi  +
push [ebp+var_4]  +
push eax  +
call dword ptr [ecx+18h]  +
mov edi eax +
mov eax [ebp+var_4] +
cmp eax esi +
jz loc_1005CD9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] esi +
mov eax [ebp+var_8] +
cmp eax esi +
jz loc_1005CE6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_100E344 +
and [ebp+var_4] 0 +
mov ecx [eax] +
and [ebp+var_8] 0 +
push esi  +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1001560  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1005D55  +
push edi  +
push [ebp+arg_0]  +
lea eax [ebp+var_8] +
push eax  +
call sub_1005415  +
mov edi [ebp+var_8] +
mov esi eax +
test esi esi +
jl loc_1005D49  +
cmp [ebp+arg_4] 0 +
mov eax [ebp+var_4] +
mov ecx [eax] +
push edi  +
push eax  +
jz loc_1005D44  +
call dword ptr [ecx+1Ch]  +
jmp loc_1005D47  +
call dword ptr [ecx+20h]  +
mov esi eax +
test edi edi +
jz loc_1005D54  +
push edi  +
call ds:SysFreeString  +
pop edi  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1005D62  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+hWnd] +
cmp [esi] edi +
jz loc_1005DD1  +
push edi  +
call ds:IsIconic  +
test eax eax +
jnz loc_1005DD1  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push edi  +
call ds:GetClassNameW  +
mov ecx [esi+8] +
mov eax [esi+0Ch] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1005DC3  +
test dx dx +
jz loc_1005DBF  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1005DC3  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1005D9D  +
xor eax eax +
jmp loc_1005DC8  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1005DD1  +
mov [esi+4] edi +
jmp loc_1005DD4  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push edi  +
xor eax eax +
lea edi [ebp+lParam] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov edi [ebp+arg_0] +
xor ebx ebx +
push 800h  +
push ebx  +
mov [ebp+var_4] ebx +
mov [ebp+lParam] edi +
mov [ebp+var_20] offset aWdcperfmonwind +
mov [ebp+var_18] 400h +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jnz loc_1005E2F  +
mov [ebp+var_4] 8007000Eh +
jmp loc_1005EA2  +
xor ecx ecx +
mov [eax] cx +
lea eax [ebp+lParam] +
push eax  +
push offset EnumFunc  +
call ds:EnumWindows  +
cmp [ebp+hWnd] ebx +
jnz loc_1005E51  +
mov [ebp+var_4] 1 +
jmp loc_1005E8C  +
push esi  +
lea eax [ebp+X] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
mov eax [ebp-8] +
sub eax [ebp-10h] +
mov esi ds:SetWindowPos +
push 44h  +
push eax  +
mov eax [ebp-0Ch] +
sub eax [ebp+X] +
push eax  +
push dword ptr [ebp-10h]  +
push [ebp+X]  +
push ebx  +
push edi  +
call esi  +
push 13h  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
push [ebp+hWnd]  +
call esi  +
pop esi  +
cmp [ebp+lpMem] ebx +
jz loc_1005EA2  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_100E318 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
lea esi [ebp+arg_4] +
lea edi [ebp+rclsid] +
movs   +
movs   +
mov [ebp+hWnd] eax +
movs   +
lea eax [ebp+ppv] +
push eax  +
mov ebx offset stru_1001DBC +
push ebx  +
movs   +
xor edi edi +
push 15h  +
push edi  +
lea eax [ebp+rclsid] +
push eax  +
mov [ebp+ppv] edi +
mov [ebp+var_20] edi +
mov [ebp+var_18] edi +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi edi +
jl loc_1005F86  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+hWnd]  +
push [ebp+ppv]  +
call ds:AtlAxAttachControl  +
mov esi eax +
cmp esi edi +
jl loc_1005F86  +
mov eax [ebp+var_20] +
mov ecx [eax] +
lea edx [ebp+var_18] +
push edx  +
push offset dword_1001590  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jl loc_1005F86  +
mov eax [ebp+var_18] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1005F86  +
mov eax [ebp+var_18] +
mov esi [eax] +
push 5  +
call ds:GetSysColor  +
push eax  +
push [ebp+var_18]  +
call dword ptr [esi+24h]  +
mov esi eax +
cmp esi edi +
jl loc_1005F86  +
push [ebp+hWnd]  +
call ds:UpdateWindow  +
mov eax dword_100E344 +
cmp eax edi +
jz loc_1005F76  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov dword_100E344 edi +
mov eax [ebp+ppv] +
mov ecx [eax] +
push offset dword_100E344  +
push ebx  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov eax [ebp+var_18] +
cmp eax edi +
jz loc_1005F96  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_18] edi +
mov eax [ebp+var_20] +
cmp eax edi +
jz loc_1005FA6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_20] edi +
mov eax [ebp+ppv] +
cmp eax edi +
jz loc_1005FB3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10091BD  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_100E37C +
test eax eax +
jnz loc_1005FF3  +
push offset ProcName  +
call sub_1005139  +
test eax eax +
jnz loc_1005FEE  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
mov dword_100E37C eax +
pop ebp  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_100E380 +
test eax eax +
jnz loc_1006020  +
push offset aActivateactctx  +
call sub_1005139  +
test eax eax +
jnz loc_100601B  +
pop ebp  +
retn 8  +
mov dword_100E380 eax +
pop ebp  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_100E384 +
test eax eax +
jnz loc_100604D  +
push offset aDeactivateactc  +
call sub_1005139  +
test eax eax +
jnz loc_1006048  +
pop ebp  +
retn 8  +
mov dword_100E384 eax +
pop ebp  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_100E388 +
test eax eax +
jnz loc_100607A  +
push offset aFindactctxsect  +
call sub_1005139  +
test eax eax +
jnz loc_1006075  +
pop ebp  +
retn 14h  +
mov dword_100E388 eax +
pop ebp  +
jmp eax  +
***
call __SEH_prolog4_GS  +
call sub_1006028  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp dword_100E36C esi +
jz loc_1006270  +
push offset OutputString  +
call ds:OutputDebugStringA  +
cmp dword_100E364 esi +
jnz loc_100629B  +
cmp dword_100E36C esi +
jnz loc_1006289  +
call sub_1006082  +
test eax eax +
jz loc_10062A0  +
push [ebp+arg_0]  +
push dword_100E000  +
call sub_1005FFB  +
test eax eax +
jz loc_10062A0  +
xor esi esi +
inc esi  +
jmp loc_10062BF  +
call ds:GetLastError  +
cmp eax 7Fh +
jz loc_10062B5  +
cmp eax 7Eh +
jz loc_10062B5  +
cmp eax 78h +
jnz loc_10062BF  +
xor eax eax +
inc eax  +
mov dword_100E364 eax +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
cmp dword_100E364 edi +
jnz locret_1006357  +
xor eax eax +
cmp [ebp-1Ch] di +
setz al  +
mov esi eax +
cmp esi edi +
jz loc_1006341  +
call ds:GetLastError  +
mov ebx eax +
jmp loc_1006343  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_1006028  +
cmp esi edi +
jz locret_1006357  +
push ebx  +
call ds:SetLastError  +
retn   +
***
call __SEH_prolog4  +
cmp dword_100E364 edi +
jnz locret_1006405  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jz loc_10063EF  +
call ds:GetLastError  +
mov ebx eax +
jmp loc_10063F1  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_1006028  +
cmp esi edi +
jz locret_1006405  +
push ebx  +
call ds:SetLastError  +
retn   +
***
call __SEH_prolog4  +
cmp dword_100E364 edi +
jnz locret_10064A5  +
xor eax eax +
cmp dword ptr [ebp-1Ch] 0FFFFFFFFh +
setz al  +
mov esi eax +
cmp esi edi +
jz loc_100648F  +
call ds:GetLastError  +
mov ebx eax +
jmp loc_1006491  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_1006028  +
cmp esi edi +
jz locret_10064A5  +
push ebx  +
call ds:SetLastError  +
retn   +
***
call __SEH_prolog4  +
cmp dword_100E364 esi +
jnz locret_100653E  +
cmp [ebp-20h] esi +
jz locret_100653E  +
cmp [ebp-1Ch] esi +
jnz loc_1006527  +
call ds:GetLastError  +
mov edi eax +
jmp loc_1006529  +
xor edi edi +
push dword ptr [ebp-24h]  +
push esi  +
call sub_1006028  +
cmp [ebp-1Ch] esi +
jnz locret_100653E  +
push edi  +
call ds:SetLastError  +
retn   +
***
call __SEH_prolog4  +
cmp dword_100E364 esi +
jnz locret_10065D7  +
cmp [ebp-20h] esi +
jz locret_10065D7  +
cmp [ebp-1Ch] esi +
jnz loc_10065C0  +
call ds:GetLastError  +
mov edi eax +
jmp loc_10065C2  +
xor edi edi +
push dword ptr [ebp-24h]  +
push esi  +
call sub_1006028  +
cmp [ebp-1Ch] esi +
jnz locret_10065D7  +
push edi  +
call ds:SetLastError  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_10065F3  +
cmp edx 7FFFFFFFh +
jbe loc_10065F8  +
mov eax 80070057h +
test eax eax +
jl loc_100660E  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1005207  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_14]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_10051D1  +
mov esi eax +
xor eax eax +
cmp esi eax +
jl loc_100672B  +
test [ebp+arg_14] 100h +
push ebx  +
mov ebx ecx +
mov [ebp+arg_0] edi +
mov [ebp+var_4] ebx +
jz loc_100665D  +
cmp [ebp+arg_8] eax +
jnz loc_100665D  +
mov [ebp+arg_8] offset dword_10015F8 +
xor esi esi +
test [ebp+arg_14] 0FFFFE000h +
jz loc_1006678  +
mov esi 80070057h +
cmp ecx eax +
jz loc_10066E4  +
xor eax eax +
mov [edi] ax +
jmp loc_10066E4  +
cmp ecx eax +
jnz loc_1006699  +
mov edx [ebp+arg_8] +
cmp [edx] ax +
jz loc_1006715  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_10066E4  +
mov [ebp+arg_0] eax +
push 7FFFFFFEh  +
lea eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_8] +
mov edx ecx +
mov ecx edi +
call sub_1005207  +
mov esi eax +
mov eax [ebp+arg_0] +
sub ebx eax +
lea ecx [edi+eax*2] +
mov [ebp+arg_0] ecx +
mov [ebp+var_4] ebx +
test esi esi +
jl loc_10066E1  +
mov eax [ebp+arg_14] +
test eax 200h +
jz loc_1006715  +
cmp ebx 1 +
jbe loc_1006715  +
push [ebp+arg_0]  +
lea ecx [ebx+ebx] +
call sub_10052AA  +
jmp loc_1006715  +
mov ecx [ebp+arg_4] +
test [ebp+arg_14] 1C00h +
jz loc_1006709  +
test ecx ecx +
jz loc_1006709  +
push [ebp+arg_14]  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+var_4] +
xor ecx ecx +
call sub_10052D8  +
mov ebx [ebp+var_4] +
test esi esi +
jge loc_1006715  +
cmp esi 8007007Ah +
jnz loc_100672A  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1006721  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_100672A  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_1006751  +
cmp edx esi +
jbe loc_1006756  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_100676E  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_100517C  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_1006770  +
xor ecx ecx +
test eax eax +
jl loc_1006787  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
lea ecx [ebx+ecx*2] +
call sub_1005207  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_10067A7  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_10067AC  +
mov eax 80070057h +
test eax eax +
jl loc_10067C6  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_100525E  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_10]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_10051D1  +
mov esi eax +
xor eax eax +
cmp esi eax +
jl loc_10068DD  +
test [ebp+arg_10] 100h +
push ebx  +
mov ebx ecx +
mov [ebp+var_8] edi +
mov [ebp+var_4] ebx +
jz loc_1006814  +
cmp [ebp+arg_14] eax +
jnz loc_1006814  +
mov [ebp+arg_14] offset dword_10015F8 +
xor esi esi +
test [ebp+arg_10] 0FFFFE000h +
jz loc_100682F  +
mov esi 80070057h +
cmp ecx eax +
jz loc_1006896  +
xor eax eax +
mov [edi] ax +
jmp loc_1006896  +
cmp ecx eax +
jnz loc_1006850  +
mov edx [ebp+arg_14] +
cmp [edx] ax +
jz loc_10068C7  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_1006896  +
mov [ebp+var_8] eax +
lea eax [ebp+arg_18] +
push eax  +
push [ebp+arg_14]  +
lea eax [ebp+var_8] +
push eax  +
mov eax ecx +
call sub_100525E  +
mov esi eax +
mov eax [ebp+var_8] +
sub ebx eax +
lea edx [edi+eax*2] +
mov [ebp+var_8] edx +
mov [ebp+var_4] ebx +
test esi esi +
jl loc_1006893  +
mov eax [ebp+arg_10] +
test eax 200h +
jz loc_10068C7  +
cmp ebx 1 +
jbe loc_10068C7  +
lea ecx [ebx+ebx] +
push edx  +
call sub_10052AA  +
jmp loc_10068C7  +
mov ecx [ebp+arg_4] +
test [ebp+arg_10] 1C00h +
jz loc_10068BB  +
test ecx ecx +
jz loc_10068BB  +
push [ebp+arg_10]  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+var_4] +
xor ecx ecx +
call sub_10052D8  +
mov ebx [ebp+var_4] +
test esi esi +
jge loc_10068C7  +
cmp esi 8007007Ah +
jnz loc_10068DC  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10068D3  +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_10068DC  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push edi  +
xor ebx ebx +
push 800h  +
push ebx  +
mov [ebp+var_1C] offset a_pma +
mov [ebp+var_18] offset a_pmc +
mov [ebp+var_14] offset a_pml +
mov [ebp+var_10] offset a_pmr +
mov [ebp+var_C] offset a_pmw +
mov [ebp+var_4] ebx +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
cmp edi ebx +
jnz loc_100693C  +
mov [ebp+var_8] 8007000Eh +
jmp loc_10069B6  +
xor eax eax +
mov [edi] ax +
call ds:GetCommandLineW  +
push eax  +
push 400h  +
push edi  +
call sub_10065DD  +
cmp eax ebx +
mov [ebp+var_8] eax +
jl loc_10069A7  +
push esi  +
mov esi edi +
cmp [edi] bx +
jz loc_1006977  +
movzx eax word ptr [esi] +
push eax  +
call ds:towlower  +
mov [esi] ax +
inc esi  +
inc esi  +
pop ecx  +
cmp [esi] bx +
jnz loc_1006962  +
xor esi esi +
push edi  +
push [ebp+esi*4+var_1C]  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100698D  +
inc [ebp+var_4]  +
inc esi  +
cmp esi 5 +
jb loc_1006979  +
cmp [ebp+var_4] ebx +
pop esi  +
jle loc_10069A7  +
push [ebp+var_4]  +
push 3BCh  +
push ebx  +
call WinSqmIncrementDWORD  +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_8] +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 800h  +
push ebx  +
mov [ebp+var_4] ebx +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
cmp edi ebx +
jnz loc_10069F3  +
mov esi 8007000Eh +
jmp loc_1006AB9  +
xor eax eax +
mov [edi] ax +
cmp [ebp+arg_0] ebx +
jz loc_1006A18  +
cmp dword_100E240 ebx +
jz loc_1006A18  +
push dword_100E254  +
push 400h  +
push edi  +
call sub_10065DD  +
jmp loc_1006A3F  +
mov esi 400h +
push esi  +
push edi  +
push ebx  +
push 8000h  +
push offset dword_1001DDC  +
call SHGetFolderPathEx  +
test eax eax +
jl loc_1006AA8  +
push offset aPerfmon_perfmo  +
push esi  +
push edi  +
call sub_1006738  +
mov esi eax +
cmp esi ebx +
jl loc_1006AAA  +
cmp [ebp+arg_0] ebx +
jnz loc_1006A55  +
call sub_10058E3  +
mov esi eax +
cmp esi ebx +
jl loc_1006AAA  +
push [ebp+arg_0]  +
push edi  +
call sub_1005C04  +
mov esi eax +
cmp esi ebx +
jl loc_1006AAA  +
cmp [ebp+arg_0] ebx +
jz loc_1006AAA  +
cmp esi 1 +
jnz loc_1006A79  +
call sub_10059A5  +
mov esi eax +
cmp esi ebx +
jl loc_1006AAA  +
cmp dword_100E2A0 ebx +
jz loc_1006AAA  +
mov eax dword_100E344 +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1001410  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_1006AAA  +
push dword_100E2B4  +
push [ebp+var_4]  +
call sub_1005AF5  +
xor esi esi +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1006AC6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 800h  +
xor ebx ebx +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi ebx +
jnz loc_1006AFE  +
mov edi 8007000Eh +
jmp loc_1006B6E  +
xor eax eax +
mov [esi] ax +
cmp [ebp+arg_0] ebx +
jz loc_1006B23  +
cmp dword_100E240 ebx +
jz loc_1006B23  +
push dword_100E254  +
push 400h  +
push esi  +
call sub_10065DD  +
jmp loc_1006B4E  +
mov edi 400h +
push edi  +
push esi  +
push ebx  +
push 8000h  +
push offset dword_1001DDC  +
call SHGetFolderPathEx  +
test eax eax +
jge loc_1006B42  +
xor edi edi +
jmp loc_1006B5F  +
push offset aResmon_resmonc  +
push edi  +
push esi  +
call sub_1006738  +
mov edi eax +
cmp edi ebx +
jl loc_1006B5F  +
push [ebp+arg_0]  +
push esi  +
call sub_1005CF3  +
mov edi eax +
push esi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax dword_100E318 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
and dword ptr [ebp-2Ch] 0 +
sub eax 110h +
push esi  +
mov [ebp-34h] ecx +
jz loc_1006BD2  +
dec eax  +
jnz loc_1006CDA  +
xor esi esi +
inc esi  +
cmp [ebp+10h] si +
jz loc_1006BBE  +
cmp word ptr [ebp+10h] 2 +
jnz loc_1006CDA  +
movzx eax word ptr [ebp+10h] +
push eax  +
push ecx  +
call ds:EndDialog  +
mov [ebp-2Ch] esi +
jmp loc_1006CDA  +
push ebx  +
push edi  +
mov edi ds:GetProcessHeap +
push 208h  +
push 0  +
call edi  +
mov esi ds:HeapAlloc +
push eax  +
call esi  +
mov ebx eax +
test ebx ebx +
jz loc_1006CD8  +
xor eax eax +
push 208h  +
push eax  +
mov [ebx] ax +
call edi  +
push eax  +
call esi  +
mov [ebp-30h] eax +
test eax eax +
jz loc_1006CBA  +
mov esi 104h +
push esi  +
push eax  +
xor ecx ecx +
push 75h  +
mov [eax] cx +
push hInstance  +
call ds:LoadStringW  +
push 1DB1h  +
push 1  +
push 6  +
push offset aU_U_U  +
lea eax [ebp-28h] +
push 12h  +
push eax  +
call sub_1006792  +
add esp 18h +
test eax eax +
jl loc_1006CBA  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp-30h]  +
push esi  +
push ebx  +
call sub_1006792  +
add esp 10h +
test eax eax +
jl loc_1006CBA  +
push ebx  +
push 74h  +
push dword ptr [ebp-34h]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetWindowTextW  +
mov eax dword_100E34C +
dec eax  +
jz loc_1006C8D  +
dec eax  +
jz loc_1006C87  +
dec eax  +
jnz loc_1006C9D  +
push esi  +
push ebx  +
push 7Eh  +
jmp loc_1006C91  +
push esi  +
push ebx  +
push 6Eh  +
jmp loc_1006C91  +
push esi  +
push ebx  +
push 6Fh  +
push hInstance  +
call ds:LoadStringW  +
push ebx  +
push 8Eh  +
push dword ptr [ebp-34h]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetWindowTextW  +
mov dword ptr [ebp-2Ch] 1 +
push ebx  +
push 0  +
call edi  +
mov esi ds:HeapFree +
push eax  +
call esi  +
cmp dword ptr [ebp-30h] 0 +
jz loc_1006CD8  +
push dword ptr [ebp-30h]  +
push 0  +
call edi  +
push eax  +
call esi  +
pop edi  +
pop ebx  +
mov ecx [ebp-4] +
mov eax [ebp-2Ch] +
xor ecx ebp +
pop esi  +
call sub_10091BD  +
leave   +
retn 10h  +
***
call __SEH_prolog4  +
cmp dword_100E364 edi +
jnz locret_1006D78  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jz loc_1006D62  +
call ds:GetLastError  +
mov ebx eax +
jmp loc_1006D64  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_1006028  +
cmp esi edi +
jz locret_1006D78  +
push ebx  +
call ds:SetLastError  +
retn   +
***
call __SEH_prolog4  +
cmp dword_100E364 edi +
jnz locret_1006E1F  +
push dword ptr [ebp-20h]  +
push edi  +
call sub_1006028  +
retn   +
***
call __SEH_prolog4  +
cmp dword_100E364 edi +
jnz locret_1006EC8  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jz loc_1006EB2  +
call ds:GetLastError  +
mov ebx eax +
jmp loc_1006EB4  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_1006028  +
cmp esi edi +
jz locret_1006EC8  +
push ebx  +
call ds:SetLastError  +
retn   +
***
call __SEH_prolog4  +
cmp dword_100E364 edi +
jnz locret_1006F71  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jz loc_1006F5B  +
call ds:GetLastError  +
mov ebx eax +
jmp loc_1006F5D  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_1006028  +
cmp esi edi +
jz locret_1006F71  +
push ebx  +
call ds:SetLastError  +
retn   +
***
call __SEH_prolog4  +
cmp dword_100E364 edi +
jnz locret_1007015  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jz loc_1006FFF  +
call ds:GetLastError  +
mov ebx eax +
jmp loc_1007001  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_1006028  +
cmp esi edi +
jz locret_1007015  +
push ebx  +
call ds:SetLastError  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
push ebx  +
push esi  +
push edi  +
push 58h  +
pop esi  +
xor edi edi +
push esi  +
lea eax [ebp+var_5C] +
push edi  +
push eax  +
mov [ebp+lpMem] edi +
call memset  +
mov eax [ebp+arg_0] +
mov ebx ds:LoadStringW +
mov [ebp+var_58] eax +
mov eax hInstance +
mov [ebp+var_54] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_40] eax +
mov eax [ebp+arg_14] +
mov [ebp+var_20] eax +
mov eax [ebp+arg_10] +
add esp 0Ch +
mov [ebp+var_5C] esi +
mov [ebp+var_44] 1 +
mov [ebp+var_34] edi +
mov [ebp+var_28] 80804h +
mov [ebp+var_3C] eax +
mov esi 208h +
cmp [ebp+arg_4] edi +
jz loc_10070BC  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_10070A0  +
mov ebx 8007000Eh +
jmp loc_1007144  +
push 104h  +
push eax  +
push [ebp+arg_4]  +
xor ecx ecx +
mov [eax] cx +
push hInstance  +
call ebx  +
mov eax [ebp+lpMem] +
mov [ebp+var_2C] eax +
cmp [ebp+arg_8] edi +
jz loc_10070FB  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jz loc_1007096  +
xor eax eax +
push esi  +
push eax  +
push edi  +
mov [edi] ax +
call memset  +
add esp 0Ch +
push 104h  +
push edi  +
push [ebp+arg_8]  +
push hInstance  +
call ebx  +
mov [ebp+var_50] edi +
cmp [ebp+arg_18] 0 +
lea eax [ebp+var_5C] +
push eax  +
jz loc_100710C  +
call sub_1006E25  +
jmp loc_1007115  +
or [ebp+var_28] 2 +
call sub_1006ECE  +
test eax eax +
jz loc_100711D  +
xor ebx ebx +
jmp loc_1007144  +
call sub_1006F77  +
test eax eax +
jz loc_100713F  +
xor ecx ecx +
cmp eax 9 +
setz cl  +
dec ecx  +
and ecx 0FFF93FF7h +
add ecx 8007000Eh +
mov eax ecx +
jmp loc_1007142  +
xor eax eax +
inc eax  +
mov ebx eax +
cmp [ebp+lpMem] 0 +
mov esi ds:HeapFree +
jz loc_100715E  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
test edi edi +
jz loc_100716E  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor edi edi +
lea eax [ebp+arg_14] +
mov [ebp+var_4] eax +
cmp [ebp+lpLibFileName] edi +
jz loc_10071A4  +
push [ebp+lpLibFileName]  +
call sub_1006CF1  +
mov edi eax +
mov eax 0A00h +
test edi edi +
jnz loc_10071A9  +
mov eax 1200h +
mov ecx [ebp+arg_10] +
neg ecx  +
sbb ecx ecx +
lea edx [ebp+var_4] +
and ecx edx +
push ecx  +
push [ebp+nSize]  +
push [ebp+lpBuffer]  +
push 400h  +
push [ebp+dwMessageId]  +
push edi  +
push eax  +
call ds:FormatMessageW  +
test eax eax +
jbe loc_10071D4  +
xor esi esi +
jmp loc_10071EA  +
call ds:GetLastError  +
test eax eax +
jle loc_10071E8  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test edi edi +
jz loc_10071F5  +
push edi  +
call ds:FreeLibrary  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:GetProcessHeap +
push edi  +
push 800h  +
push 0  +
call esi  +
mov edi ds:HeapAlloc +
push eax  +
call edi  +
mov ebx eax +
test ebx ebx +
jnz loc_1007235  +
mov [ebp+var_4] 8007000Eh +
jmp loc_1007305  +
xor eax eax +
push 208h  +
push eax  +
mov [ebx] ax +
call esi  +
push eax  +
call edi  +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_1007258  +
mov [ebp+var_4] 8007000Eh +
jmp loc_10072E7  +
push 104h  +
push eax  +
xor ecx ecx +
push 7Eh  +
mov [eax] cx +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jg loc_1007290  +
call ds:GetLastError  +
test eax eax +
jle loc_1007289  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10072E7  +
push 0  +
mov edi 400h +
push edi  +
push ebx  +
push 0  +
push [ebp+dwMessageId]  +
call sub_100717C  +
add esp 14h +
mov [ebp+var_4] eax +
test eax eax +
jge loc_10072C8  +
push 0  +
push edi  +
push ebx  +
push offset aPdh_dll  +
push [ebp+dwMessageId]  +
call sub_100717C  +
add esp 14h +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10072E7  +
lea eax [ebp+var_C] +
push eax  +
push 0FFFEh  +
push 1  +
push 0  +
push ebx  +
push [ebp+lpMem]  +
push hInstance  +
push [ebp+arg_0]  +
call sub_1006D7E  +
push ebx  +
push 0  +
call esi  +
mov edi ds:HeapFree +
push eax  +
call edi  +
cmp [ebp+lpMem] 0 +
jz loc_1007305  +
push [ebp+lpMem]  +
push 0  +
call esi  +
push eax  +
call edi  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
xor edi edi +
push 800h  +
push edi  +
mov [ebp+hLibModule] edi +
mov [ebp+arg_10] esi +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
cmp ebx edi +
jnz loc_100734B  +
mov esi 8007000Eh +
jmp loc_10074D1  +
xor eax eax +
push edi  +
mov [ebx] ax +
lea eax [ebp+arg_10] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
push offset aResWdc_dllWait  +
push esi  +
push [ebp+arg_C]  +
call sub_1006617  +
mov esi eax +
cmp esi edi +
jl loc_10074B4  +
push edi  +
lea eax [ebp+arg_10] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
cmp [ebp+arg_0] edi +
jz loc_1007384  +
push [ebp+arg_0]  +
jmp loc_1007389  +
push offset asc_1001918  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1006617  +
mov esi eax +
cmp esi edi +
jl loc_10074B4  +
push edi  +
lea eax [ebp+arg_10] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
push offset asc_1001914  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1006617  +
mov esi eax +
cmp esi edi +
jl loc_10074B4  +
push offset aWdc_dll  +
call sub_1006CF1  +
mov [ebp+hLibModule] eax +
cmp eax edi +
jz loc_10073D7  +
cmp eax 0FFFFFFFFh +
jnz loc_10073FF  +
call ds:GetLastError  +
cmp eax edi +
jle loc_10073EB  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi edi +
jl loc_10074B4  +
mov esi 80004005h +
jmp loc_10074B4  +
mov ecx [ebp+arg_8] +
dec ecx  +
push 400h  +
push ebx  +
jz loc_100741C  +
dec ecx  +
jz loc_1007415  +
push 3EAh  +
jmp loc_1007455  +
push 3ECh  +
jmp loc_1007455  +
cmp dword_100E35C edi +
jbe loc_1007450  +
push 3EDh  +
push eax  +
call ds:LoadStringW  +
push dword_100E35C  +
lea eax [ebp+arg_10] +
push ebx  +
push edi  +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_10067CD  +
add esp 1Ch +
jmp loc_1007471  +
push 3EBh  +
push eax  +
call ds:LoadStringW  +
push edi  +
lea eax [ebp+arg_10] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
push ebx  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1006617  +
mov esi eax +
cmp esi edi +
jl loc_10074B4  +
cmp [ebp+arg_4] edi +
jz loc_10074B4  +
push edi  +
lea eax [ebp+arg_10] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
push offset asc_1001914  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1006617  +
mov esi eax +
cmp esi edi +
jl loc_10074B4  +
push edi  +
lea eax [ebp+arg_10] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1006617  +
mov esi eax +
push ebx  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+hLibModule] edi +
jz loc_10074D1  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
push edi  +
push 800h  +
mov esi 400h +
push 0  +
mov [ebp+nSize] esi +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jz loc_100757D  +
xor eax eax +
push eax  +
mov [edi] ax +
lea eax [ebp+nSize] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset aResPerfmon_exe  +
push esi  +
push edi  +
call sub_1006617  +
xor esi esi +
test eax eax +
jl loc_1007572  +
cmp [ebp+dwMessageId] esi +
jnz loc_100754B  +
push [ebp+nSize]  +
push [ebp+lpBuffer]  +
push 82h  +
push hInstance  +
call ds:LoadStringW  +
jmp loc_1007562  +
push esi  +
push [ebp+nSize]  +
push [ebp+lpBuffer]  +
push esi  +
push [ebp+dwMessageId]  +
call sub_100717C  +
add esp 14h +
test eax eax +
jl loc_1007572  +
push edi  +
push esi  +
push 7E8h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
push edi  +
push esi  +
call ebx  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100E344 +
and [ebp+var_4] 0 +
push esi  +
test eax eax +
jnz loc_10075A8  +
mov esi 80004005h +
jmp loc_10075DE  +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1001D6C  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_10075DE  +
lea edx [ebp+var_14] +
push edx  +
xor eax eax +
push edx  +
inc eax  +
push 0  +
mov word ptr [ebp+var_14] ax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push 6  +
push eax  +
call dword ptr [ecx+0D8h]  +
mov esi eax +
test esi esi +
jge loc_10075E7  +
push esi  +
push [ebp+arg_0]  +
call sub_1007200  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 800h  +
xor ebx ebx +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
cmp edi ebx +
jnz loc_100761D  +
mov esi 8007000Eh +
jmp loc_1007674  +
push ebx  +
push offset aHtml  +
push 400h  +
push edi  +
push 81h  +
push ebx  +
push [ebp+arg_0]  +
xor eax eax +
mov [edi] ax +
call sub_100701B  +
mov esi eax +
cmp esi ebx +
jl loc_1007674  +
cmp esi 1 +
jnz loc_100764B  +
xor esi esi +
jmp loc_100767D  +
push ebx  +
push edi  +
push [ebp+lpExistingFileName]  +
call ds:CopyFileW  +
test eax eax +
jnz loc_1007647  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100766E  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jge loc_100767D  +
push esi  +
push [ebp+arg_0]  +
call sub_1007200  +
cmp edi ebx +
jz loc_1007690  +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 800h  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jnz loc_10076C6  +
mov esi 8007000Eh +
jmp loc_1007742  +
xor eax eax +
mov [edi] ax +
mov eax dword_100E34C +
dec eax  +
jz loc_10076E9  +
dec eax  +
jz loc_10076DD  +
mov esi 80004005h +
jmp loc_1007742  +
mov eax 90h +
mov ecx offset aPerfmoncfg +
jmp loc_10076F3  +
mov eax 91h +
mov ecx offset aResmoncfg +
push [ebp+arg_4]  +
push ecx  +
push 400h  +
push edi  +
push eax  +
push 0  +
push [ebp+arg_0]  +
call sub_100701B  +
mov esi eax +
test esi esi +
jl loc_1007742  +
cmp esi 1 +
jnz loc_1007717  +
xor esi esi +
jmp loc_100774B  +
mov eax dword_100E34C +
dec eax  +
jz loc_1007733  +
dec eax  +
jnz loc_100773E  +
push [ebp+arg_4]  +
push edi  +
call sub_1005C04  +
mov esi eax +
test esi esi +
jl loc_1007742  +
jmp loc_100773E  +
push [ebp+arg_4]  +
push edi  +
call sub_1005CF3  +
mov esi eax +
test esi esi +
jge loc_100774B  +
push esi  +
push [ebp+arg_0]  +
call sub_1007200  +
test edi edi +
jz loc_100775F  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
xor esi esi +
push edi  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov [ebp+var_4] esi +
mov [ebp+var_18] esi +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
mov [ebp+var_8] esi +
mov [ebp+ppv] esi +
call ds:SHELL32_28  +
mov edi eax +
cmp edi esi +
jl loc_1007823  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push offset dword_1001DCC  +
push [ebp+var_4]  +
call ds:SHBindToParent  +
mov edi eax +
cmp edi esi +
jl loc_1007823  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+var_10]  +
call ds:SHGetIDListFromObject  +
mov edi eax +
cmp edi esi +
jl loc_1007823  +
lea eax [ebp+var_8] +
push eax  +
push offset dword_1001DAC  +
push esi  +
lea eax [ebp+var_14] +
push eax  +
push 1  +
push [ebp+var_18]  +
call ds:SHCreateDataObject  +
mov edi eax +
cmp edi esi +
jl loc_1007823  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001E0C  +
push 15h  +
push esi  +
push offset rclsid  +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi esi +
jl loc_1007823  +
push esi  +
push esi  +
push 9  +
push [ebp+var_8]  +
push [ebp+ppv]  +
call ds:SHLWAPI_186  +
mov edi eax +
cmp edi esi +
jge loc_100782C  +
push edi  +
push [ebp+arg_0]  +
call sub_1007200  +
cmp [ebp+var_4] esi +
jz loc_100783A  +
push [ebp+var_4]  +
call ds:SHELL32_155  +
mov eax [ebp+var_8] +
cmp eax esi +
jz loc_100784A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_8] esi +
mov eax [ebp+ppv] +
cmp eax esi +
jz loc_100785A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+ppv] esi +
mov eax [ebp+var_10] +
cmp eax esi +
jz loc_1007867  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov ebx 202h +
push offset aWdc_dll  +
mov [ebp+var_28] esi +
mov [ebp+lpBuffer] esi +
mov [ebp+var_10] esi +
mov [ebp+lpNameBuffer] esi +
mov [ebp+lpMem] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_8] esi +
mov [ebp+nSize] ebx +
call sub_1006CF1  +
mov [ebp+hLibModule] eax +
cmp eax esi +
jz loc_10078B4  +
cmp eax 0FFFFFFFFh +
jnz loc_10078DF  +
call ds:GetLastError  +
cmp eax esi +
jle loc_10078C8  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_1007A55  +
mov [ebp+var_4] 80004005h +
jmp loc_1007A55  +
mov edi 800h +
push edi  +
push esi  +
call ds:GetProcessHeap  +
mov esi ds:HeapAlloc +
push eax  +
call esi  +
mov [ebp+lpBuffer] eax +
test eax eax +
jnz loc_1007908  +
mov [ebp+var_4] 8007000Eh +
jmp loc_1007A55  +
xor ecx ecx +
push edi  +
mov edi ds:GetProcessHeap +
push ecx  +
mov [eax] cx +
call edi  +
push eax  +
call esi  +
mov [ebp+var_10] eax +
test eax eax +
jz loc_10078FC  +
xor ecx ecx +
mov [eax] cx +
mov eax [ebp+nSize] +
add eax eax +
push eax  +
push ecx  +
call edi  +
push eax  +
call esi  +
mov [ebp+lpNameBuffer] eax +
test eax eax +
jz loc_10078FC  +
xor ecx ecx +
push ebx  +
push ecx  +
mov [eax] cx +
call edi  +
push eax  +
call esi  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_10078FC  +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
mov esi ds:LoadStringW +
lea edi [ebp+var_3C] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov edi 400h +
push edi  +
push [ebp+lpBuffer]  +
push 7Eh  +
push ecx  +
call esi  +
push edi  +
push [ebp+var_10]  +
push 16h  +
push [ebp+hLibModule]  +
call esi  +
lea eax [ebp+nSize] +
push eax  +
push [ebp+lpNameBuffer]  +
push 2  +
call GetUserNameExW  +
mov esi 0FFFFh +
mov edi 80070000h +
test al al +
jnz loc_10079AF  +
call ds:GetLastError  +
test eax eax +
jle loc_10079A4  +
and eax esi +
or eax edi +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1007A55  +
mov eax [ebp+arg_0] +
mov [ebp+var_38] eax +
mov eax [ebp+lpBuffer] +
push 140082h  +
mov [ebp+var_30] eax +
mov eax [ebp+var_10] +
mov [ebp+var_34] eax +
lea eax [ebp+var_28] +
push eax  +
push 101h  +
push [ebp+lpMem]  +
mov [ebp+nSize] ebx +
push ebx  +
push [ebp+lpNameBuffer]  +
xor ebx ebx +
push ebx  +
push ebx  +
push offset dword_10015F8  +
lea eax [ebp+var_3C] +
push eax  +
mov [ebp+var_3C] 14h +
call ds:CredUIPromptForCredentialsW  +
xor ecx ecx +
cmp eax ebx +
jz loc_1007A01  +
jle loc_10079FF  +
and eax esi +
or eax edi +
mov ecx eax +
mov [ebp+var_4] ecx +
and ecx esi +
cmp ecx 4C7h +
jnz loc_1007A15  +
mov [ebp+var_4] 8007051Fh +
cmp [ebp+var_4] ebx +
jl loc_1007A55  +
push [ebp+lpNameBuffer]  +
lea eax [ebp+var_1C] +
push eax  +
call sub_1005415  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1007A55  +
push [ebp+lpMem]  +
lea eax [ebp+var_8] +
push eax  +
call sub_1005415  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1007A55  +
push [ebp+var_8]  +
mov eax [ebp+arg_4] +
push [ebp+var_1C]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0E8h]  +
mov [ebp+var_4] eax +
cmp [ebp+hLibModule] 0 +
jz loc_1007A64  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov edi [ebp+lpMem] +
mov esi ds:HeapFree +
test edi edi +
jz loc_1007AA2  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1007A76  +
sub eax edx +
sar eax 1 +
add eax eax +
xor ebx ebx +
mov ecx edi +
cmp eax ebx +
jz loc_1007A95  +
mov byte ptr [ecx] 0 +
inc ecx  +
dec eax  +
jnz loc_1007A8E  +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
jmp loc_1007AA4  +
xor ebx ebx +
mov edi ds:SysFreeString +
cmp [ebp+var_8] ebx +
jz loc_1007AD8  +
mov eax [ebp+var_8] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1007AB5  +
mov ecx [ebp+var_8] +
sub eax edx +
sar eax 1 +
add eax eax +
cmp eax ebx +
jz loc_1007AD3  +
mov byte ptr [ecx] 0 +
inc ecx  +
dec eax  +
jnz loc_1007ACC  +
push [ebp+var_8]  +
call edi  +
cmp [ebp+var_1C] ebx +
jz loc_1007AE2  +
push [ebp+var_1C]  +
call edi  +
cmp [ebp+lpNameBuffer] ebx +
jz loc_1007AF4  +
push [ebp+lpNameBuffer]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
cmp [ebp+var_10] ebx +
jz loc_1007B06  +
push [ebp+var_10]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
cmp [ebp+lpBuffer] ebx +
jz loc_1007B18  +
push [ebp+lpBuffer]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call esi  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
mov [ebp+lpMem] edi +
mov [ebp+var_C] edi +
mov [ebp+var_24] edi +
mov [ebp+var_28] edi +
mov [ebp+var_14] edi +
mov [ebp+var_18] edi +
mov [ebp+ppv] edi +
mov [ebp+var_1C] edi +
call ds:CoInitialize  +
test eax eax +
jl loc_1007B5E  +
mov [ebp+var_28] 1 +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001E1C  +
push 15h  +
push edi  +
push offset stru_1001E2C  +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
push 800h  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax edi +
jnz loc_1007BA3  +
mov esi 8007000Eh +
jmp loc_1007EF9  +
xor ecx ecx +
mov [eax] cx +
call sub_1005557  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push edi  +
push dword_100E358  +
push eax  +
call dword ptr [ecx+0ECh]  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_1C] +
push edx  +
push eax  +
call dword ptr [ecx+0E4h]  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
mov eax [ebp+var_1C] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
or eax 0FFFFFFFFh +
cmp ax word ptr [ebp+var_4] +
jz loc_1007C26  +
push edi  +
push [ebp+hWnd]  +
call sub_10074DF  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
jmp loc_1007EF5  +
mov eax [ebp+ppv] +
mov ecx [eax] +
mov ebx offset dword_100E35C +
push ebx  +
push eax  +
call dword ptr [ecx+68h]  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
cmp dword_100E35C edi +
jnz loc_1007C5B  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_18] +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
cmp [ebp+var_14] edi +
jnz loc_1007CA5  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
push eax  +
call dword ptr [ecx+50h]  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
push 400h  +
push [ebp+lpMem]  +
push 1  +
push [ebp+var_18]  +
push [ebp+var_14]  +
call sub_1007314  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
push [ebp+lpMem]  +
push edi  +
push 7E8h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+0F8h]  +
mov ebx 803000AAh +
jmp loc_1007D30  +
push 7  +
push offset aSystem  +
push dword_100E358  +
call ds:__imp__wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1007D61  +
cmp esi 8007051Fh +
jnz loc_1007D61  +
push [ebp+ppv]  +
push [ebp+hWnd]  +
call sub_1007874  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+0F8h]  +
mov esi eax +
cmp esi ebx +
jnz loc_1007CEB  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_20] +
push edx  +
push eax  +
call dword ptr [ecx+84h]  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
cmp [ebp+var_20] 1 +
jz loc_1007DF5  +
mov esi ebx +
jmp loc_1007EF9  +
cmp esi edi +
jl loc_1007EF9  +
jmp loc_1007DF5  +
cmp esi 1 +
jz loc_1007DFD  +
push 3E8h  +
call ds:Sleep  +
cmp dword_100E010 edi +
jz loc_1007EF5  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_20] +
push edx  +
push eax  +
call dword ptr [ecx+84h]  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
mov eax [ebp+var_20] +
sub eax edi +
jz loc_1007DF2  +
dec eax  +
dec eax  +
jnz loc_1007DF5  +
cmp [ebp+var_24] edi +
jnz loc_1007DF5  +
push 400h  +
push [ebp+lpMem]  +
mov [ebp+var_24] 1 +
push 2  +
push [ebp+var_18]  +
push [ebp+var_14]  +
call sub_1007314  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
push [ebp+lpMem]  +
push edi  +
push 7E8h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
jmp loc_1007DF5  +
xor esi esi +
inc esi  +
cmp esi edi +
jge loc_1007D6E  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push edi  +
push dword_100E358  +
push eax  +
call dword ptr [ecx+0ECh]  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
cmp [ebp+var_C] edi +
jz loc_1007E2B  +
push [ebp+var_C]  +
call ds:SysFreeString  +
mov [ebp+var_C] edi +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push eax  +
call dword ptr [ecx+48h]  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
cmp [ebp+var_C] edi +
jnz loc_1007E51  +
mov esi 80004005h +
jmp loc_1007EF9  +
push [ebp+var_C]  +
mov ebx 400h +
push ebx  +
push [ebp+lpMem]  +
call sub_10065DD  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
push offset asc_10019C0  +
push ebx  +
push [ebp+lpMem]  +
call sub_1006738  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
cmp [ebp+var_C] edi +
jz loc_1007E91  +
push [ebp+var_C]  +
call ds:SysFreeString  +
mov [ebp+var_C] edi +
mov eax [ebp+var_1C] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push eax  +
call dword ptr [ecx+58h]  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
cmp [ebp+var_C] edi +
jz loc_1007E47  +
push [ebp+var_C]  +
push ebx  +
push [ebp+lpMem]  +
call sub_1006738  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
push [ebp+lpMem]  +
push offset dword_100E354  +
call sub_1005415  +
mov esi eax +
cmp esi edi +
jl loc_1007EF9  +
push [ebp+lpMem]  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_1007EE3  +
mov esi 8030010Ch +
jmp loc_1007EF9  +
push [ebp+lpMem]  +
push edi  +
push 7E8h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
cmp esi edi +
jge loc_1007F02  +
push esi  +
push [ebp+hWnd]  +
call sub_10074DF  +
cmp [ebp+var_18] edi +
jz loc_1007F13  +
push [ebp+var_18]  +
call ds:SysFreeString  +
mov [ebp+var_18] edi +
cmp [ebp+var_14] edi +
jz loc_1007F24  +
push [ebp+var_14]  +
call ds:SysFreeString  +
mov [ebp+var_14] edi +
cmp [ebp+var_C] edi +
jz loc_1007F35  +
push [ebp+var_C]  +
call ds:SysFreeString  +
mov [ebp+var_C] edi +
mov eax [ebp+ppv] +
cmp eax edi +
jz loc_1007F45  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+ppv] edi +
mov eax [ebp+var_1C] +
cmp eax edi +
jz loc_1007F55  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_1C] edi +
cmp [ebp+lpMem] edi +
jz loc_1007F6B  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+var_28] edi +
jz loc_1007F76  +
call ds:CoUninitialize  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
and dword ptr [ebp+Data] 0 +
and [ebp+rcSrc.left] 0 +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp-0Ch] +
stos   +
stos   +
stos   +
push 0Ah  +
xor eax eax +
pop ecx  +
lea edi [ebp+rcSrc.top] +
stos   +
mov eax dword_100E34C +
dec eax  +
mov edi [ebp+arg_4] +
jz loc_1007FBE  +
dec eax  +
jnz loc_1007FCA  +
push edi  +
call sub_10069C2  +
jmp loc_1007FC4  +
push edi  +
call sub_1006AD4  +
mov esi eax +
test esi esi +
jl loc_1008023  +
test edi edi +
jnz loc_1007FE9  +
lea eax [ebp+rcSrc] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowPlacement  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp+Data] +
push eax  +
call ds:CopyRect  +
lea eax [ebp+Data] +
push eax  +
push edi  +
call sub_1005667  +
mov esi eax +
test esi esi +
jl loc_1008023  +
test edi edi +
jz loc_1008023  +
cmp esi 1 +
jz loc_1008023  +
mov eax [ebp-4] +
sub eax [ebp-0Ch] +
push 4  +
push eax  +
mov eax [ebp-8] +
sub eax dword ptr [ebp+Data] +
push eax  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp+Data]  +
push 0  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+0Ch] +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp-4] ebx +
cmp ecx 16h +
ja loc_1008120  +
jz loc_1008105  +
mov eax ecx +
dec eax  +
jz loc_10080D9  +
dec eax  +
jz loc_10080CD  +
sub eax 4 +
jz loc_1008088  +
sub eax 0Ah +
jnz loc_1008139  +
cmp dword_100E344 ebx +
jz loc_100807A  +
push ebx  +
push dword ptr [ebp+8]  +
call sub_1007F84  +
push dword ptr [ebp+8]  +
call ds:DestroyWindow  +
jmp loc_10084B5  +
xor eax eax +
cmp ax [ebp+10h] +
jnz loc_10080A0  +
call ds:GetFocus  +
mov dword_100E3A8 eax +
jmp loc_10084B5  +
mov eax dword_100E3A8 +
cmp eax ebx +
jz loc_10084C2  +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_10084B5  +
push dword_100E3A8  +
call ds:SetFocus  +
jmp loc_10084B5  +
push ebx  +
call ds:PostQuitMessage  +
jmp loc_10084B5  +
push 69h  +
push hInstance  +
call ds:LoadIconW  +
cmp eax ebx +
jz loc_10084B5  +
push eax  +
push 1  +
push 80h  +
push dword ptr [ebp+8]  +
call ds:SendMessageW  +
jmp loc_10084B5  +
cmp [ebp+10h] ebx +
jz loc_10084C2  +
push ebx  +
push ebx  +
push 10h  +
push dword ptr [ebp+8]  +
call ds:PostMessageW  +
jmp loc_10084B5  +
mov eax ecx +
sub eax 111h +
jz loc_1008260  +
sub eax 6 +
jz loc_100815B  +
sub eax 6D1h +
jz loc_100814E  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
push dword ptr [ebp+8]  +
call ds:DefWindowProcW  +
jmp loc_10084C4  +
push dword ptr [ebp+14h]  +
call sub_1005491  +
jmp loc_10084B5  +
mov eax dword_100E344 +
cmp eax ebx +
jz loc_10084C2  +
mov ecx dword_100E34C +
dec ecx  +
jz loc_10081D6  +
dec ecx  +
jz loc_10081AF  +
dec ecx  +
jnz loc_10084C2  +
push edi  +
cmp dword_100E354 ebx +
jnz loc_1008189  +
push 3  +
pop edi  +
jmp loc_100818B  +
xor edi edi +
mov esi ds:EnableMenuItem +
push edi  +
push 7Bh  +
push dword ptr [ebp+10h]  +
call esi  +
push edi  +
push 7Ah  +
push dword ptr [ebp+10h]  +
call esi  +
push edi  +
push 7Dh  +
push dword ptr [ebp+10h]  +
call esi  +
pop edi  +
jmp loc_10084B5  +
push ebx  +
push dword_100E00C  +
push 78h  +
push 76h  +
push dword ptr [ebp+10h]  +
call ds:CheckMenuRadioItem  +
test eax eax +
jnz loc_10084B5  +
call ds:GetLastError  +
jmp loc_10084B5  +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push offset dword_1001560  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_10084B5  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp+0Ch] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_10084B5  +
mov esi ds:EnableMenuItem +
cmp [ebp+0Ch] ebx +
jnz loc_1008218  +
push ebx  +
push 70h  +
push dword ptr [ebp+10h]  +
call esi  +
push 3  +
jmp loc_1008222  +
push 3  +
push 70h  +
push dword ptr [ebp+10h]  +
call esi  +
push ebx  +
push 71h  +
push dword ptr [ebp+10h]  +
call esi  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp+14h] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_10084B5  +
xor eax eax +
cmp word ptr [ebp+14h] 0FFFFh +
setnz al  +
dec eax  +
and eax 8 +
push eax  +
push 92h  +
push dword ptr [ebp+10h]  +
call ds:CheckMenuItem  +
jmp loc_10084B5  +
mov eax dword_100E344 +
movzx ecx word ptr [ebp+10h] +
cmp eax ebx +
jz loc_10084C2  +
cmp ecx 7Ah +
jg loc_1008384  +
jz loc_1008371  +
push 76h  +
pop esi  +
cmp ecx esi +
jg loc_1008314  +
jz loc_1008308  +
sub ecx 67h +
jz loc_10082ED  +
dec ecx  +
jz loc_100810E  +
sub ecx 8 +
jz loc_10082C9  +
dec ecx  +
jnz loc_10084C2  +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push offset dword_1001560  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_10084B5  +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
jmp loc_10084B5  +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push offset dword_1001560  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_10084B5  +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
jmp loc_10084B5  +
push ebx  +
push offset loc_1006B7C  +
push dword ptr [ebp+8]  +
push 65h  +
push hInstance  +
call sub_100640B  +
jmp loc_10084B5  +
push esi  +
call sub_10053E6  +
push 2  +
push 6Bh  +
jmp loc_1008349  +
push 77h  +
pop esi  +
sub ecx esi +
jz loc_1008362  +
dec ecx  +
jz loc_1008339  +
dec ecx  +
jnz loc_10084C2  +
push 79h  +
call sub_10053E6  +
push dword ptr [ebp+8]  +
call sub_1005DDF  +
jmp loc_10084B5  +
push 78h  +
pop esi  +
push esi  +
call sub_10053E6  +
push 3  +
push 0FFh  +
push 1FE01h  +
push dword ptr [ebp+8]  +
call ds:SetLayeredWindowAttributes  +
mov dword_100E00C esi +
jmp loc_10084B5  +
push esi  +
call sub_10053E6  +
push 3  +
push 0B7h  +
jmp loc_1008349  +
***
push dword_100E354  +
push dword ptr [ebp+8]  +
call sub_100776C  +
jmp loc_10084B5  +
mov edx 92h +
cmp ecx edx +
jg loc_1008452  +
jz loc_100840F  +
sub ecx 7Bh +
jz loc_10083F0  +
dec ecx  +
dec ecx  +
jz loc_10083E3  +
sub ecx 8 +
jz loc_10083B9  +
sub ecx 0Ah +
jnz loc_10084C2  +
push 1  +
push dword ptr [ebp+8]  +
call sub_100769E  +
jmp loc_10084B5  +
mov eax dword_100E34C +
dec eax  +
jz loc_10083DA  +
dec eax  +
jnz loc_10084C2  +
push ebx  +
push ebx  +
push offset aPerfmon_chmHtm  +
push ebx  +
call sub_1009A24  +
jmp loc_10084B5  +
push ebx  +
push ebx  +
push offset aResmon_chmHtml  +
jmp loc_10083CF  +
***
push dword ptr [ebp+8]  +
call sub_100758B  +
jmp loc_10084B5  +
cmp dword_100E34C 3 +
jz loc_10083FC  +
push ebx  +
jmp loc_10083AC  +
***
push dword_100E354  +
push dword ptr [ebp+8]  +
call sub_10075F3  +
jmp loc_10084B5  +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push offset dword_1001560  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_10084B5  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp+14h] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_10084B5  +
mov ecx [ebp-4] +
xor eax eax +
cmp [ebp+14h] bx +
setnz al  +
dec eax  +
movzx eax ax +
push eax  +
mov [ebp+14h] eax +
mov edx [ecx] +
push ecx  +
call dword ptr [edx+28h]  +
jmp loc_10084B5  +
sub ecx 76DBh +
jz loc_100849A  +
dec ecx  +
jz loc_100847D  +
dec ecx  +
jnz loc_10084C2  +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push offset dword_1001560  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_10084B5  +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
jmp loc_10084B5  +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push offset dword_1001560  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_10084B5  +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
jmp loc_10084B5  +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push offset dword_1001560  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_10084B5  +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2Ch]  +
mov eax [ebp-4] +
cmp eax ebx +
jz loc_10084C2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 38h  +
lea eax [ebp+ExecInfo.fMask] +
push ebx  +
push eax  +
mov [ebp+hObject] ebx +
mov [ebp+var_8] ebx +
mov [ebp+ExecInfo.cbSize] ebx +
call memset  +
add esp 0Ch +
lea eax [ebp+hObject] +
push eax  +
push 8  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
mov edi [ebp+arg_0] +
test eax eax +
jz loc_1008512  +
xor esi esi +
jmp loc_1008530  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1008526  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_10085B1  +
lea eax [ebp+var_8] +
push eax  +
push 2  +
push [ebp+hObject]  +
call sub_10098A5  +
cmp [ebp+var_8] ebx +
jz loc_10085AD  +
cmp dword_100E350 ebx +
jz loc_1008552  +
mov esi 800702E4h +
jmp loc_10085B1  +
mov eax dword_100E34C +
xor esi esi +
inc esi  +
dec eax  +
mov [ebp+ExecInfo.cbSize] 3Ch +
mov [ebp+ExecInfo.fMask] 600h +
mov [ebp+ExecInfo.lpVerb] offset aRunas +
mov [ebp+ExecInfo.lpFile] offset aSystemrootSyst +
mov [ebp+ExecInfo.nShow] esi +
mov [ebp+ExecInfo.hwnd] edi +
jz loc_1008593  +
dec eax  +
dec eax  +
jz loc_100858A  +
mov esi 80004005h +
jmp loc_10085B1  +
mov [ebp+ExecInfo.lpParameters] offset aNoelevReport +
jmp loc_100859A  +
mov [ebp+ExecInfo.lpParameters] offset aNoelevRes +
push 2  +
push edi  +
call ds:ShowWindow  +
lea eax [ebp+ExecInfo] +
push eax  +
call ds:ShellExecuteExW  +
cmp esi ebx +
jge loc_10085B8  +
push esi  +
push edi  +
call sub_1007200  +
cmp [ebp+hObject] ebx +
jz loc_10085CC  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_10085CC  +
push [ebp+hObject]  +
call ds:CloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
and [ebp+var_4] 0 +
and [ebp+ExecInfo.cbSize] 0 +
push esi  +
push edi  +
push 38h  +
lea eax [ebp+ExecInfo.fMask] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_4] +
push eax  +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsWow64Process  +
mov edi [ebp+arg_0] +
test eax eax +
jz loc_1008618  +
xor esi esi +
jmp loc_1008632  +
call ds:GetLastError  +
test eax eax +
jle loc_100862C  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test esi esi +
jl loc_100868A  +
cmp [ebp+var_4] 0 +
jz loc_1008686  +
mov eax dword_100E34C +
xor esi esi +
inc esi  +
dec eax  +
mov [ebp+ExecInfo.cbSize] 3Ch +
mov [ebp+ExecInfo.fMask] 600h +
mov [ebp+ExecInfo.lpVerb] offset aRunas +
mov [ebp+ExecInfo.lpFile] offset aSystemrootSysn +
mov [ebp+ExecInfo.nShow] esi +
mov [ebp+ExecInfo.hwnd] edi +
jz loc_100866C  +
mov esi 80004005h +
jmp loc_100868A  +
push 2  +
push edi  +
mov [ebp+ExecInfo.lpParameters] offset aRes +
call ds:ShowWindow  +
lea eax [ebp+ExecInfo] +
push eax  +
call ds:ShellExecuteExW  +
test esi esi +
jge loc_1008691  +
push esi  +
push edi  +
call sub_1007200  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 44h  +
lea eax [ebp+StartupInfo] +
push ebx  +
push eax  +
xor esi esi +
mov dword ptr [ebp+lpMem] ebx +
mov [ebp+lpCommandLine] ebx +
mov [ebp+var_C] ebx +
call memset  +
xor eax eax +
lea edi [ebp+hObject] +
stos   +
stos   +
stos   +
add esp 0Ch +
stos   +
call sub_10068E8  +
lea eax [ebp+pNumArgs] +
push eax  +
call ds:GetCommandLineW  +
push eax  +
call ds:CommandLineToArgvW  +
mov [ebp+hMem] eax +
cmp eax ebx +
jz loc_1008979  +
push eax  +
push [ebp+pNumArgs]  +
call sub_100A425  +
mov esi eax +
cmp esi ebx +
jl loc_1008969  +
lea eax [ebp+var_C] +
push eax  +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsWow64Process  +
test eax eax +
jnz loc_100871D  +
call ds:GetLastError  +
cmp dword_100E180 ebx +
jz loc_1008743  +
mov eax dword_100E194 +
cmp eax ebx +
jz loc_1008743  +
push eax  +
push offset dword_100E358  +
call sub_1005415  +
mov esi eax +
cmp esi ebx +
jl loc_1008969  +
xor eax eax +
inc eax  +
cmp dword_100E300 ebx +
jz loc_1008753  +
mov dword_100E060 eax +
cmp dword_100E1E0 ebx +
jz loc_1008760  +
mov dword_100E350 eax +
cmp dword_100E060 ebx +
jz loc_1008774  +
mov dword_100E34C 2 +
jmp loc_10087A9  +
cmp dword_100E0C0 ebx +
jz loc_1008783  +
mov dword_100E34C eax +
jmp loc_10087A9  +
cmp dword_100E120 ebx +
jz loc_1008797  +
mov dword_100E34C 4 +
jmp loc_10087A9  +
cmp dword_100E180 ebx +
jz loc_10087A9  +
mov dword_100E34C 3 +
mov eax dword_100E34C +
dec eax  +
push ebx  +
jz loc_10087BF  +
dec eax  +
jz loc_10087B8  +
push ebx  +
jmp loc_10087C4  +
push offset aSys  +
jmp loc_10087C4  +
push offset aRes  +
call ds:RegisterApplicationRestart  +
mov esi eax +
cmp esi ebx +
jl loc_1008969  +
mov eax dword_100E34C +
cmp eax ebx +
jz loc_10087E6  +
cmp eax 4 +
jnz loc_1008961  +
mov edi 800h +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
mov esi ds:HeapAlloc +
push eax  +
call esi  +
mov dword ptr [ebp+lpMem] eax +
cmp eax ebx +
jz loc_100881A  +
push edi  +
xor ecx ecx +
push ebx  +
mov [eax] cx +
call ds:GetProcessHeap  +
push eax  +
call esi  +
mov [ebp+lpCommandLine] eax +
cmp eax ebx +
jnz loc_1008824  +
mov esi 8007000Eh +
jmp loc_1008969  +
xor ecx ecx +
mov [eax] cx +
push 5  +
pop eax  +
mov [ebp+StartupInfo.wShowWindow] ax +
mov eax dword_100E34C +
mov [ebp+StartupInfo.cb] 44h +
mov [ebp+StartupInfo.dwFlags] 1 +
mov ebx 80070000h +
test eax eax +
jz loc_100889E  +
cmp eax 4 +
jnz loc_1008915  +
mov edi 400h +
push edi  +
push dword ptr [ebp+lpMem]  +
push offset Src  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
ja loc_1008888  +
call ds:GetLastError  +
test eax eax +
jle loc_100887E  +
and eax 0FFFFh +
or eax ebx +
mov esi eax +
test esi esi +
jl loc_1008967  +
push dword ptr [ebp+lpMem]  +
push offset aSNameMicrosoft  +
push edi  +
push [ebp+lpCommandLine]  +
call sub_1006792  +
add esp 10h +
jmp loc_100890F  +
mov edi 400h +
push edi  +
push dword ptr [ebp+lpMem]  +
push offset aSystemrootSy_1  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
ja loc_10088D1  +
call ds:GetLastError  +
test eax eax +
jle loc_10088C7  +
and eax 0FFFFh +
or eax ebx +
mov esi eax +
test esi esi +
jl loc_1008967  +
push edi  +
push [ebp+lpCommandLine]  +
push offset aSystemrootSy_2  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
ja loc_10088FB  +
call ds:GetLastError  +
test eax eax +
jle loc_10088F5  +
and eax 0FFFFh +
or eax ebx +
mov esi eax +
test esi esi +
jl loc_1008967  +
cmp [ebp+var_C] 0 +
jz loc_1008915  +
push offset a32  +
push edi  +
push [ebp+lpCommandLine]  +
call sub_1006738  +
mov esi eax +
test esi esi +
jl loc_1008967  +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
xor esi esi +
push esi  +
push esi  +
push 20h  +
push 1  +
push esi  +
push esi  +
push [ebp+lpCommandLine]  +
push dword ptr [ebp+lpMem]  +
call ds:CreateProcessW  +
test eax eax +
jnz loc_100894E  +
call ds:GetLastError  +
cmp eax esi +
jle loc_1008948  +
and eax 0FFFFh +
or eax ebx +
mov esi eax +
test esi esi +
jl loc_1008967  +
push 7530h  +
push [ebp+hObject]  +
call ds:WaitForInputIdle  +
xor esi esi +
inc esi  +
xor ebx ebx +
cmp esi ebx +
jge loc_1008970  +
jmp loc_1008969  +
xor ebx ebx +
push esi  +
push ebx  +
call sub_1007200  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov edi ds:CloseHandle +
cmp [ebp+hObject] ebx +
jz loc_1008992  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_1008992  +
push [ebp+hObject]  +
call edi  +
mov [ebp+hObject] ebx +
cmp [ebp-20h] ebx +
jz loc_10089A5  +
cmp dword ptr [ebp-20h] 0FFFFFFFFh +
jz loc_10089A5  +
push dword ptr [ebp-20h]  +
call edi  +
mov [ebp-20h] ebx +
mov edi ds:HeapFree +
cmp dword ptr [ebp+lpMem] ebx +
jz loc_10089BD  +
push dword ptr [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
cmp [ebp+lpCommandLine] ebx +
jz loc_10089CF  +
push [ebp+lpCommandLine]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
push esi  +
push edi  +
push 2Ch  +
xor ebx ebx +
lea eax [ebp-40h] +
push ebx  +
push eax  +
call memset  +
mov eax hInstance +
mov [ebp-30h] eax +
mov eax dword_100E34C +
mov ecx eax +
add esp 0Ch +
dec ecx  +
mov [ebp+dwExStyle] ebx +
mov [ebp+lpClassName] 30h +
mov dword ptr [ebp-40h] 3 +
mov dword ptr [ebp-3Ch] offset loc_1008030 +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
jz loc_1008A71  +
dec ecx  +
jz loc_1008A68  +
dec ecx  +
jnz loc_1008A78  +
mov dword ptr [ebp-20h] 7Ch +
mov dword ptr [ebp-1Ch] offset aWdcwindow +
lea eax [ebp+lpClassName] +
push eax  +
call sub_10062CB  +
push 800h  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpWindowName] eax +
cmp eax ebx +
jnz loc_1008A86  +
mov esi 8007000Eh +
jmp loc_1008CFB  +
mov dword ptr [ebp-20h] 72h +
jmp loc_1008A7D  +
mov dword ptr [ebp-20h] 73h +
cmp eax 2 +
jnz loc_1008A34  +
mov dword ptr [ebp-1Ch] offset aWdcperfmonwind +
jmp loc_1008A3B  +
xor ecx ecx +
mov [eax] cx +
mov ecx dword_100E34C +
dec ecx  +
jz loc_1008AC9  +
dec ecx  +
jz loc_1008AA4  +
dec ecx  +
jnz loc_1008ADD  +
push 400h  +
push eax  +
push 7Eh  +
jmp loc_1008AD1  +
push 400h  +
push eax  +
push 6Eh  +
push hInstance  +
call ds:LoadStringW  +
cmp dword_100E300 ebx +
jz loc_1008ADD  +
mov [ebp+dwExStyle] 80000h +
jmp loc_1008ADD  +
push 400h  +
push eax  +
push 6Fh  +
push hInstance  +
call ds:LoadStringW  +
lea eax [ebp+var_C] +
push eax  +
call ds:GetProcessDefaultLayout  +
test eax eax +
jnz loc_1008B03  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1008B01  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
jl loc_1008B10  +
test byte ptr [ebp+var_C] 1 +
jz loc_1008B10  +
or [ebp+dwExStyle] 2000h +
push ebx  +
call ds:GetDC  +
mov esi ds:GetDeviceCaps +
mov edi eax +
push 58h  +
push edi  +
call esi  +
push 5Ah  +
push edi  +
mov [ebp+var_10] eax +
call esi  +
push edi  +
push ebx  +
mov esi eax +
call ds:ReleaseDC  +
push ebx  +
push hInstance  +
mov eax esi +
imul eax eax +
push ebx  +
push ebx  +
push 60h  +
pop ecx  +
cdq   +
idiv  ecx +
push eax  +
mov eax [ebp+var_10] +
imul eax eax +
cdq   +
idiv  ecx +
push eax  +
mov eax 80000000h +
push eax  +
push eax  +
push 0CF0000h  +
push [ebp+lpWindowName]  +
push dword ptr [ebp-1Ch]  +
push [ebp+dwExStyle]  +
call sub_100635D  +
mov ebx eax +
xor edi edi +
cmp ebx edi +
jz loc_1008B82  +
cmp ebx 0FFFFFFFFh +
jnz loc_1008BAA  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1008B96  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi edi +
jl loc_1008CE9  +
mov esi 80004005h +
jmp loc_1008CE9  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
mov eax dword_100E34C +
dec eax  +
jz loc_1008BBB  +
dec eax  +
dec eax  +
jnz loc_1008BD0  +
push ebx  +
call sub_10084CF  +
mov esi eax +
cmp esi edi +
jl loc_1008CE9  +
cmp esi 1 +
jz loc_1008BED  +
mov eax dword_100E34C +
dec eax  +
jnz loc_1008BF5  +
push ebx  +
call sub_10085DA  +
mov esi eax +
cmp esi edi +
jl loc_1008CE9  +
cmp esi 1 +
jnz loc_1008BF5  +
xor esi esi +
inc esi  +
jmp loc_1008CE9  +
cmp dword_100E34C 2 +
jnz loc_1008C30  +
cmp dword_100E300 edi +
jz loc_1008C1B  +
push 2  +
push 0FFh  +
push 1FE01h  +
push ebx  +
call ds:SetLayeredWindowAttributes  +
jmp loc_1008C30  +
push ebx  +
call ds:GetMenu  +
push 400h  +
push 1  +
push eax  +
call ds:DeleteMenu  +
push edi  +
call ds:CoInitialize  +
mov esi eax +
cmp esi edi +
jl loc_1008CE9  +
push edi  +
call ds:OleInitialize  +
mov eax dword_100E34C +
dec eax  +
jz loc_1008CB7  +
dec eax  +
jz loc_1008CB0  +
dec eax  +
jnz loc_1008CD1  +
sub esp 10h +
mov edi esp +
mov esi offset dword_1001D7C +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call sub_1005EB0  +
mov esi eax +
test esi esi +
jl loc_1008CE9  +
lea eax [ebp+ThreadId] +
push eax  +
xor edi edi +
push edi  +
push ebx  +
push offset StartAddress  +
push edi  +
push edi  +
call ds:CreateThread  +
mov hHandle eax +
cmp eax edi +
jz loc_1008C93  +
cmp eax 0FFFFFFFFh +
jnz loc_1008CD1  +
call ds:GetLastError  +
test eax eax +
jle loc_1008CA7  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test esi esi +
jmp loc_1008B9A  +
mov esi offset dword_1001470 +
jmp loc_1008CBC  +
mov esi offset dword_1001540 +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call sub_1005EB0  +
mov esi eax +
test esi esi +
jl loc_1008CE9  +
push 1  +
push ebx  +
call sub_1007F84  +
push ebx  +
call sub_10057B5  +
push [ebp+nCmdShow]  +
push ebx  +
call ds:ShowWindow  +
push [ebp+lpWindowName]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
push 1  +
push esi  +
mov [ebp+var_4] esi +
call ds:HeapSetInformation  +
mov eax [ebp+arg_0] +
mov hInstance eax +
call sub_100869E  +
cmp eax esi +
mov [ebp+arg_0] eax +
jl loc_1008E30  +
cmp eax 1 +
jz loc_1008D5C  +
lea eax [ebp+nCmdShow] +
push eax  +
push [ebp+nCmdShow]  +
call sub_10089DB  +
cmp eax esi +
mov [ebp+arg_0] eax +
jl loc_1008E30  +
cmp eax 1 +
jnz loc_1008D64  +
mov [ebp+arg_0] esi +
jmp loc_1008E30  +
mov eax [ebp+nCmdShow] +
mov hWnd eax +
mov eax dword_100E344 +
cmp eax esi +
jz loc_1008D8D  +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1001DFC  +
push eax  +
call dword ptr [ecx]  +
cmp eax esi +
mov [ebp+arg_0] eax +
jge loc_1008D8D  +
mov [ebp+arg_0] esi +
push ebx  +
push 93h  +
push hInstance  +
call ds:LoadAcceleratorsW  +
mov edi ds:GetMessageW +
mov ebx eax +
jmp loc_1008DEF  +
mov eax [ebp+var_4] +
cmp eax esi +
jz loc_1008DCD  +
cmp [ebp+Msg.message] 102h +
jnz loc_1008DBF  +
cmp [ebp+Msg.wParam] 9 +
jz loc_1008DCD  +
mov ecx [eax] +
lea edx [ebp+Msg] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jz loc_1008DEF  +
lea eax [ebp+Msg] +
push eax  +
push ebx  +
push [ebp+nCmdShow]  +
call ds:TranslateAcceleratorW  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+Msg] +
push eax  +
call edi  +
test eax eax +
jnz loc_1008DA9  +
mov eax hHandle +
pop ebx  +
cmp eax esi +
jz loc_1008E30  +
push 0FFFFFFFFh  +
push eax  +
mov dword_100E010 esi +
call ds:WaitForSingleObject  +
mov eax hHandle +
cmp eax esi +
jz loc_1008E30  +
cmp eax 0FFFFFFFFh +
jz loc_1008E30  +
push eax  +
call ds:CloseHandle  +
mov hHandle esi +
mov eax dword_100E344 +
cmp eax esi +
jz loc_1008E45  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov dword_100E344 esi +
mov eax [ebp+var_4] +
cmp eax esi +
jz loc_1008E55  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] esi +
mov eax dword_100E358 +
mov edi ds:SysFreeString +
cmp eax esi +
jz loc_1008E6D  +
push eax  +
call edi  +
mov dword_100E358 esi +
mov eax dword_100E354 +
cmp eax esi +
jz loc_1008E7F  +
push eax  +
call edi  +
mov dword_100E354 esi +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1008EA9  +
test eax eax +
jnz loc_1008EAE  +
mov ecx [esi] +
test ecx ecx +
jz loc_1008EA6  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1008E9A  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100E3D0 +
push offset dword_100E3C0  +
push dword_100E3CC  +
mov dword_100E3C0 eax +
push offset unk_100E3B0  +
push offset unk_100E3B4  +
push offset unk_100E3AC  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_100E3BC eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1008F51  +
cmp eax esi +
jnz loc_1008F44  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1008F54  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1008F2B  +
xor esi esi +
inc esi  +
mov eax dword_100E74C +
cmp eax esi +
jnz loc_1008F67  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1008F96  +
mov eax dword_100E74C +
test eax eax +
jnz loc_1008F90  +
mov dword_100E74C esi +
push offset dword_1001334  +
push offset dword_1001328  +
call sub_1008E8D  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1008F96  +
jmp loc_10090BA  +
mov dword_100E3C8 esi +
mov eax dword_100E74C +
cmp eax esi +
jnz loc_1008FBA  +
push offset dword_1001324  +
push offset dword_10012FC  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100E74C 2 +
cmp [ebp+var_20] ebx +
jnz loc_1008FC7  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100E754 ebx +
jz loc_1008FE8  +
push offset dword_100E754  +
call sub_10093B9  +
pop ecx  +
test eax eax +
jz loc_1008FE8  +
push ebx  +
push 2  +
push ebx  +
call dword_100E754  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_10090BA  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_100900D  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_1009022  +
cmp cx 20h +
ja loc_1009022  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_100900D  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_100902E  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_1009031  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_100E3C4 eax +
cmp dword_100E3B8 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_1009063  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_1008FF7  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_100E3C4 eax +
xor ebx ebx +
cmp dword_100E3B8 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_100E3C8 ebx +
jnz loc_10090A5  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100E3C4 +
jmp loc_10090C6  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_10090E3  +
xor eax eax +
jmp loc_1009130  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_10090DF  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100911D  +
cmp ecx 20Bh +
jnz loc_10090DF  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10090DF  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100912B  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10090DF  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100E3B8 eax +
call sub_10094C7  +
push eax  +
call ds:__set_app_type  +
or dword_100E744 0FFFFFFFFh +
or dword_100E748 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100E3D8 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100E3D4 +
mov [eax] ecx +
call sub_1009459  +
cmp dword_100E328 0 +
jnz loc_1009189  +
push offset sub_1009459  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1009441  +
xor eax eax +
retn   +
***
call sub_1009506  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_100E318 +
jnz loc_10091C8  +
retn 0  +
jmp loc_100959C  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_10091BD  +
jmp __SEH_epilog4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10091BD  +
push offset dword_100E318  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1009302  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1009302  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_10092FC  +
cmp eax 19930521h +
jz loc_10092FC  +
cmp eax 19930522h +
jz loc_10092FC  +
cmp eax 1994000h +
jnz loc_1009302  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_10092C4+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1009346  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1009342  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_10093AD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_10093A5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_10093AF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1009395  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1009330  +
pop ecx  +
test eax eax +
jz loc_1009416  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1009370  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009416  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100941F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10094BA  +
cmp ecx 0FFFFFFFFh +
jz loc_10094BA  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10094B3  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10094B3  +
cmp edx 10000000h +
jnb loc_10094B3  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10094B3  +
jmp loc_10094AE  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10094FC  +
push eax  +
call sub_1009461  +
test eax eax +
jz loc_10094FC  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10094F1  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10094FC  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100E318 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1009538  +
test eax ebx +
jz loc_1009538  +
not eax  +
mov dword_100E31C eax +
jmp loc_1009593  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100957F  +
test dword_100E318 ebx +
jnz loc_1009584  +
mov esi 0BB40E64Fh +
mov dword_100E318 esi +
not esi  +
mov dword_100E31C esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100E4E0 eax +
mov dword_100E4DC ecx +
mov dword_100E4D8 edx +
mov dword_100E4D4 ebx +
mov dword_100E4D0 esi +
mov dword_100E4CC edi +
mov word_100E4F8 ss +
mov word_100E4EC cs +
mov word_100E4C8 ds +
mov word_100E4C4 es +
mov word_100E4C0 fs +
mov word_100E4BC gs +
pushf   +
pop dword_100E4F0  +
mov eax [ebp+0] +
mov dword_100E4E4 eax +
mov eax [ebp+4] +
mov dword_100E4E8 eax +
lea eax [ebp+8] +
mov dword_100E4F4 eax +
mov eax [ebp-320h] +
mov dword_100E430 10001h +
mov eax dword_100E4E8 +
mov dword_100E3EC eax +
mov dword_100E3E0 0C0000409h +
mov dword_100E3E4 1 +
mov eax dword_100E318 +
mov [ebp-328h] eax +
mov eax dword_100E31C +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov edi ds:NtQueryInformationToken +
xor esi esi +
inc esi  +
mov [ebx] esi +
and dword ptr [eax] 0 +
lea eax [ebp+arg_8] +
push eax  +
push 4  +
lea eax [ebp+var_4] +
push eax  +
push 12h  +
push [ebp+arg_0]  +
mov [ebp+var_4] esi +
call edi  +
test eax eax +
jl loc_1009717  +
cmp [ebp+var_4] 2 +
jz loc_1009712  +
cmp [ebp+var_4] esi +
jnz loc_1009717  +
and dword ptr [ebx] 0 +
lea eax [ebp+arg_8] +
push eax  +
push 4  +
lea eax [ebp+var_8] +
push eax  +
push 14h  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jl loc_1009717  +
cmp [ebp+var_8] 0 +
jz loc_1009717  +
mov ecx [ebp+arg_4] +
mov [ecx] esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
and dword ptr [esi] 0 +
push 4  +
pop eax  +
lea ecx [ebp+arg_4] +
push ecx  +
push eax  +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_0] +
push eax  +
push 1Ah  +
push [ebp+arg_0]  +
call ds:NtQueryInformationToken  +
test eax eax +
jl loc_1009757  +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
setnz cl  +
mov [esi] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push edi  +
mov [ebp+var_4] ebx +
cmp [ebp+arg_0] ebx +
jnz loc_10097A8  +
lea eax [ebp+arg_0] +
push eax  +
push ebx  +
push 8  +
push 0FFFFFFFEh  +
call ds:NtOpenThreadToken  +
mov edi eax +
cmp edi 0C000007Ch +
jnz loc_100979E  +
lea eax [ebp+arg_0] +
push eax  +
push 8  +
push 0FFFFFFFFh  +
call ds:NtOpenProcessToken  +
mov edi eax +
cmp edi ebx +
jl loc_100980D  +
mov eax [ebp+arg_0] +
mov [ebp+var_4] eax +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_10096B3  +
mov edi eax +
cmp edi ebx +
jl loc_10097FF  +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+var_8] ebx +
jz loc_10097CB  +
mov [esi] ebx +
jmp loc_10097D6  +
xor eax eax +
cmp [ebp+var_C] ebx +
setz al  +
inc eax  +
mov [esi] eax +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1009723  +
mov edi eax +
cmp edi ebx +
jl loc_10097FE  +
cmp [ebp+arg_4] ebx +
jz loc_10097FE  +
mov eax [esi] +
cmp eax 10h +
jb loc_10097F9  +
cmp eax 13h +
jb loc_10097FC  +
add eax 10h +
mov [esi] eax +
pop esi  +
cmp [ebp+var_4] ebx +
jz loc_100980D  +
push [ebp+var_4]  +
call ds:NtClose  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 2  +
pop eax  +
lea ecx [edi-10h] +
mov edx eax +
cmp edx ecx +
sbb ecx ecx +
inc ecx  +
lea edx [esi-10h] +
mov ebx eax +
cmp ebx edx +
sbb edx edx +
inc edx  +
cmp edi 3 +
jb loc_100984C  +
sub edi 10h +
cmp esi 3 +
jb loc_1009854  +
sub esi 10h +
mov ebx esi +
sub ebx 0 +
mov esi [ebp+arg_8] +
jz loc_1009885  +
dec ebx  +
jz loc_1009876  +
dec ebx  +
jz loc_100986D  +
mov [ebp+var_4] 0C00000BBh +
jmp loc_1009888  +
xor ebx ebx +
cmp edi eax +
setz bl  +
jmp loc_1009881  +
xor ebx ebx +
inc ebx  +
cmp edi ebx +
jz loc_1009881  +
cmp edi eax +
jnz loc_1009885  +
mov [esi] ebx +
jmp loc_1009888  +
and dword ptr [esi] 0 +
test ecx ecx +
jz loc_1009896  +
test edx edx +
jnz loc_1009896  +
mov dword ptr [esi] 1 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call sub_1009761  +
test eax eax +
jl loc_10098C8  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100981A  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10098E7  +
cmp ecx 7FFFFFFFh +
jbe loc_10098EC  +
mov eax 80070057h +
test eax eax +
jl loc_1009930  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1009923  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100991E  +
mov cl [edx+eax] +
test cl cl +
jz loc_100991E  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_100990A  +
pop edi  +
test esi esi +
jnz loc_1009929  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_100E318 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov [ebp+lpDst] eax +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor esi esi +
push esi  +
push offset aClsidAdb880a6D  +
push 80000000h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_1009A0E  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Src] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push esi  +
push [ebp+hKey]  +
mov edi 104h +
mov [ebp+cbData] edi +
mov [ebp+Type] 1 +
call ds:RegQueryValueExA  +
test eax eax +
jnz loc_10099FD  +
cmp [ebp+Type] 2 +
mov [ebp+var_5] al +
lea eax [ebp+Src] +
jnz loc_10099E7  +
push edi  +
push [ebp+lpDst]  +
push eax  +
call ds:ExpandEnvironmentStringsA  +
dec eax  +
lea ecx [edi-1] +
cmp ecx eax +
sbb esi esi +
inc esi  +
jmp loc_10099FD  +
push eax  +
push edi  +
push [ebp+lpDst]  +
call sub_10098D1  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov esi ecx +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax esi +
pop edi  +
jmp loc_1009A10  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10091BD  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_100E318 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx dword_100E708 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test ecx ecx +
jnz loc_1009AA3  +
cmp dword_100E704 ecx +
jnz loc_1009AA3  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_1009939  +
mov esi ds:LoadLibraryA +
test eax eax +
jz loc_1009A78  +
lea eax [ebp+LibFileName] +
push eax  +
call esi  +
mov dword_100E708 eax +
mov ecx dword_100E708 +
test ecx ecx +
jnz loc_1009AA3  +
push offset LibFileName  +
call esi  +
mov ecx eax +
mov dword_100E708 ecx +
test ecx ecx +
jnz loc_1009AA3  +
mov dword_100E704 1 +
xor eax eax +
jmp loc_1009AC8  +
mov eax dword_100E700 +
test eax eax +
jnz loc_1009ABE  +
push 0Fh  +
push ecx  +
call ds:GetProcAddress  +
mov dword_100E700 eax +
test eax eax +
jz loc_1009A95  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push ebx  +
push edi  +
call eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10091BD  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_10] +
xor edx edx +
push edi  +
mov [eax] edx +
push 2Dh  +
xor ebx ebx +
pop eax  +
cmp ax [ecx] +
mov [ebp+var_4] edx +
setz bl  +
mov eax ebx +
mov [esi] eax +
cmp eax edx +
jz loc_1009B18  +
add ecx 2 +
mov esi dword_100E714 +
mov [ebp+arg_0] ecx +
mov edi offset dword_100E714 +
jmp loc_1009B81  +
mov ecx [esi+24h] +
cmp ecx edx +
jz loc_1009B3E  +
cmp [ebp+arg_4] edx +
jnz loc_1009B39  +
cmp [esi+14h] edx +
jnz loc_1009B3E  +
xor eax eax +
inc eax  +
jmp loc_1009B40  +
xor eax eax +
cmp [esi+28h] edx +
jz loc_1009B4F  +
cmp [ebp+arg_4] edx +
jz loc_1009B4F  +
xor ebx ebx +
inc ebx  +
jmp loc_1009B51  +
xor ebx ebx +
cmp eax edx +
jz loc_1009B67  +
push ecx  +
push [ebp+arg_0]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009B91  +
xor edx edx +
cmp ebx edx +
jz loc_1009B7F  +
push dword ptr [esi+28h]  +
push [ebp+arg_0]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009B97  +
xor edx edx +
mov esi [esi] +
cmp esi edi +
jnz loc_1009B28  +
cmp [ebp+arg_4] edx +
jnz loc_1009BB8  +
mov eax dword_100E714 +
jmp loc_1009BB4  +
and dword ptr [esi+18h] 0 +
jmp loc_1009B9E  +
mov dword ptr [esi+18h] 1 +
mov eax [ebp+arg_8] +
mov [eax] esi +
jmp loc_1009BC4  +
cmp [eax+48h] edx +
jnz loc_1009BB2  +
xor ecx ecx +
inc ecx  +
test [eax+20h] ecx +
jnz loc_1009BCE  +
mov eax [eax] +
cmp eax edi +
jnz loc_1009BA5  +
mov eax [ebp+arg_8] +
mov [ebp+var_4] 1 +
mov [eax] edx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
mov esi [ebp+arg_8] +
mov [esi] eax +
mov eax [ebp+arg_C] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
jmp loc_1009BC2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi dword_100E714 +
cmp esi offset dword_100E714 +
jz loc_1009C92  +
push ebx  +
push edi  +
xor ebx ebx +
cmp [esi+48h] ebx +
jz loc_1009C82  +
cmp [esi+38h] ebx +
jnz loc_1009C2D  +
cmp dword ptr [esi+18h] 1 +
jnz loc_1009C16  +
mov eax [esi+28h] +
jmp loc_1009C19  +
mov eax [esi+24h] +
push eax  +
push 3C2Bh  +
push ebx  +
call sub_100AB99  +
add esp 0Ch +
mov eax 80070057h +
cmp [esi+58h] ebx +
jz loc_1009C82  +
xor edi edi +
cmp dword_100E730 ebx +
jbe loc_1009C82  +
mov ecx [esi+58h] +
lea ecx [ecx+edi*4] +
cmp [ecx] ebx +
jz loc_1009C79  +
mov ecx [ecx] +
cmp dword ptr [ecx+18h] 1 +
jnz loc_1009C53  +
mov ecx [ecx+28h] +
jmp loc_1009C56  +
mov ecx [ecx+24h] +
cmp dword ptr [esi+18h] 1 +
jnz loc_1009C61  +
mov eax [esi+28h] +
jmp loc_1009C64  +
mov eax [esi+24h] +
push ecx  +
push eax  +
push 3C28h  +
push ebx  +
call sub_100AB99  +
add esp 10h +
mov eax 80070057h +
inc edi  +
cmp edi dword_100E730 +
jb loc_1009C3C  +
mov esi [esi] +
cmp esi offset dword_100E714 +
jnz loc_1009C01  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_8] edi +
jmp loc_1009D78  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
push dword ptr [ebp+Arguments]  +
call sub_1009AE9  +
mov esi eax +
cmp esi edi +
jl loc_1009D97  +
mov esi [ebp+var_C] +
cmp esi edi +
jnz loc_1009CE6  +
push dword ptr [ebp+Arguments]  +
push 3C31h  +
jmp loc_1009D3F  +
mov eax [ebp+var_10] +
mov [esi+4Ch] eax +
cmp eax edi +
jz loc_1009D11  +
test dword ptr [esi+20h] 4 +
jnz loc_1009D11  +
push dword ptr [ebp+Arguments]  +
push 3C32h  +
push edi  +
call sub_100AB99  +
add esp 0Ch +
mov [ebp+var_8] 80070057h +
push [ebp+var_14]  +
push dword ptr [ebp+Arguments]  +
push dword ptr [esi+10h]  +
push esi  +
push ebx  +
call sub_100B118  +
cmp eax edi +
jge loc_1009D28  +
mov [ebp+var_8] eax +
mov eax [esi+48h] +
cmp eax edi +
jz loc_1009D55  +
mov ecx [esi+50h] +
cmp ecx [ebp+arg_4] +
jnz loc_1009D51  +
push dword ptr [ebp+Arguments]  +
push 3C33h  +
push edi  +
call sub_100AB99  +
add esp 0Ch +
mov [ebp+var_8] 80070057h +
jmp loc_1009D62  +
cmp eax edi +
jnz loc_1009D62  +
mov eax [ebp+arg_4] +
mov [esi+50h] eax +
mov dword ptr [esi+48h] 1 +
cmp dword ptr [ebp+Arguments] edi +
jz loc_1009D7B  +
push dword ptr [ebp+Arguments]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov dword ptr [ebp+Arguments] edi +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+Arguments] +
push eax  +
push ebx  +
call dword ptr [ebx]  +
mov esi eax +
cmp esi edi +
jl loc_1009D97  +
cmp esi 1 +
jnz loc_1009CB4  +
xor esi esi +
cmp dword ptr [ebp+Arguments] edi +
jz loc_1009DB0  +
push dword ptr [ebp+Arguments]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov dword ptr [ebp+Arguments] edi +
push ebx  +
call dword ptr [ebx+8]  +
cmp esi edi +
mov eax esi +
jl loc_1009DBD  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 7FFFFFFFh +
ja loc_1009DE1  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
jmp loc_1009DEC  +
mov eax [ebp+arg_4] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1009E13  +
mov eax [ebp+arg_0] +
jb loc_1009E0A  +
cmp eax 0FFFFFFFFh +
ja loc_1009E13  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1009E1E  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1009E41  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1009E4C  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
xor edi edi +
mov [ebp+var_4] ebx +
cmp dword_100E728 ebx +
jnz loc_1009EF9  +
push 208h  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
cmp edi ebx +
jnz loc_1009E93  +
mov [ebp+var_4] 8007000Eh +
jmp loc_1009F04  +
push 104h  +
push edi  +
xor eax eax +
push ebx  +
mov [edi] ax +
call ds:GetModuleFileNameW  +
test eax eax +
jnz loc_1009EBA  +
call ds:GetLastError  +
cmp eax ebx +
jnz loc_1009ED1  +
mov eax 80004005h +
jmp loc_1009EDD  +
push ebx  +
push 8  +
push edi  +
call sub_100BDE2  +
mov esi eax +
cmp esi ebx +
jnz loc_1009EE2  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1009EDD  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
jmp loc_1009F04  +
push ebx  +
push esi  +
push offset dword_100E728  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1009EF9  +
push esi  +
call sub_100BC91  +
mov eax [ebp+arg_0] +
mov ecx dword_100E728 +
mov [eax] ecx +
cmp edi ebx +
jz loc_1009F17  +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi offset dword_100E714 +
cmp dword_100E32C eax +
jz loc_1009F4D  +
mov dword_100E718 edi +
mov dword_100E714 edi +
mov dword_100E32C eax +
mov esi [ebp+arg_0] +
cmp esi eax +
jz loc_1009F83  +
push 38h  +
push eax  +
lea eax [esi+24h] +
push eax  +
call memset  +
mov eax dword_100E718 +
mov [esi] edi +
mov [esi+4] eax +
mov [eax] esi +
mov eax dword_100E730 +
mov dword_100E718 esi +
add esp 0Ch +
mov [esi+54h] eax +
inc dword_100E730  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_100E330 0 +
mov ecx offset dword_100E70C +
jz loc_1009FB4  +
and dword_100E330 0 +
mov dword_100E710 ecx +
mov dword_100E70C ecx +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1009FD0  +
mov edx dword_100E710 +
add eax 0Ch +
mov [eax] ecx +
mov [eax+4] edx +
mov [edx] eax +
mov dword_100E710 eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009FE8  +
lea ecx [ebp+dwBytes] +
push ecx  +
push 2  +
sub eax edx +
pop ecx  +
sar eax 1 +
mul  ecx +
push edx  +
push eax  +
call sub_1009DF5  +
test eax eax +
jl loc_100A043  +
lea eax [ebp+dwBytes] +
push eax  +
push 2  +
push [ebp+dwBytes]  +
call sub_1009E27  +
test eax eax +
jl loc_100A043  +
push [ebp+dwBytes]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_100A043  +
push [ebp+dwBytes]  +
push [ebp+arg_0]  +
push esi  +
call memcpy  +
add esp 0Ch +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+hInstance] 0 +
push esi  +
push edi  +
mov edi [ebp+nBufferMax] +
lea eax [ebp+nBufferMax] +
push eax  +
push edi  +
call sub_1009DC9  +
mov esi eax +
test esi esi +
jl loc_100A0BE  +
cmp [ebp+nBufferMax] edi +
jbe loc_100A07A  +
mov esi 80004005h +
jmp loc_100A0BE  +
lea eax [ebp+hInstance] +
push eax  +
call sub_1009E55  +
mov esi eax +
test esi esi +
jl loc_100A0BE  +
push [ebp+nBufferMax]  +
push [ebp+lpBuffer]  +
push [ebp+uID]  +
push [ebp+hInstance]  +
call ds:LoadStringW  +
test eax eax +
jnz loc_100A0BE  +
call ds:GetLastError  +
test eax eax +
jz loc_100A0B7  +
jle loc_100A0BC  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100A0BC  +
mov eax 80004005h +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 160h +
mov eax dword_100E318 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
push edi  +
mov edi 800h +
push edi  +
push 0  +
call ebx  +
mov esi ds:HeapAlloc +
push eax  +
call esi  +
mov [ebp+lpBuffer] eax +
test eax eax +
jnz loc_100A110  +
mov esi 8007000Eh +
jmp loc_100A401  +
xor ecx ecx +
push edi  +
push ecx  +
mov [eax] cx +
call ebx  +
push eax  +
call esi  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_100A419  +
xor ecx ecx +
mov [eax] cx +
mov edi dword_100E714 +
cmp edi offset dword_100E714 +
jz loc_100A3CF  +
mov ebx 400h +
push ebx  +
push [ebp+lpBuffer]  +
push dword ptr [edi+8]  +
call sub_100A04F  +
mov esi eax +
test esi esi +
jl loc_100A3D1  +
mov esi ds:wcstok +
push offset asc_1001EB8  +
push [ebp+lpBuffer]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100A412  +
push eax  +
call sub_1009FD9  +
mov [edi+24h] eax +
test eax eax +
jz loc_100A419  +
and dword ptr [edi+18h] 0 +
push offset asc_1001EB8  +
push 0  +
call esi  +
pop ecx  +
pop ecx  +
mov [ebp+var_160] eax +
test eax eax +
jz loc_100A412  +
xor ecx ecx +
cmp cx [eax] +
jz loc_100A1E9  +
push offset asc_1001EB4  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100A1E9  +
push [ebp+var_160]  +
call sub_1009FD9  +
mov [edi+28h] eax +
test eax eax +
jz loc_100A419  +
test dword ptr [edi+20h] 40h +
jnz loc_100A1E9  +
mov dword ptr [edi+18h] 1 +
push offset asc_1001EB8  +
push 0  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100A412  +
mov edx offset asc_1001EB4 +
mov ecx eax +
mov si [ecx] +
cmp si [edx] +
jnz loc_100A229  +
test si si +
jz loc_100A225  +
mov si [ecx+2] +
cmp si [edx+2] +
jnz loc_100A229  +
add ecx 4 +
add edx 4 +
test si si +
jnz loc_100A203  +
xor ecx ecx +
jmp loc_100A22E  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
test ecx ecx +
jz loc_100A238  +
push eax  +
jmp loc_100A395  +
mov eax [edi+1Ch] +
test eax eax +
jle loc_100A3A1  +
cmp eax 2 +
jle loc_100A25F  +
cmp eax 3 +
jz loc_100A371  +
cmp eax 4 +
jz loc_100A27A  +
cmp eax 5 +
jnz loc_100A3A1  +
test byte ptr [edi+20h] 80h +
push ebx  +
push [ebp+lpMem]  +
jz loc_100A37F  +
push 3BC5h  +
jmp loc_100A384  +
mov esi ds:GetLocaleInfoW +
push 50h  +
lea eax [ebp+LCData] +
push eax  +
push 1Fh  +
push ebx  +
call esi  +
test eax eax +
jnz loc_100A299  +
mov word ptr [ebp+LCData] ax +
push 50h  +
lea eax [ebp+var_B4] +
push eax  +
push 1003h  +
push ebx  +
call esi  +
test eax eax +
jnz loc_100A2B5  +
mov [ebp+var_B4] ax +
push 4  +
lea eax [ebp+var_14] +
push eax  +
push 28h  +
push ebx  +
call esi  +
test eax eax +
jnz loc_100A2C8  +
mov word ptr [ebp+var_14] ax +
push 4  +
lea eax [ebp+var_C] +
push eax  +
push 29h  +
push ebx  +
call esi  +
test eax eax +
jnz loc_100A2DB  +
mov word ptr [ebp+var_C] ax +
lea eax [ebp+var_B4] +
push 20h  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100A2F5  +
xor ecx ecx +
mov [eax] cx +
lea eax [ebp+var_14] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100A2FB  +
sub eax edx +
sar eax 1 +
jz loc_100A34D  +
lea eax [ebp+var_C] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100A311  +
sub eax edx +
sar eax 1 +
jz loc_100A34D  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_B4] +
push eax  +
lea eax [ebp+LCData] +
push eax  +
push offset aSSSS  +
push ebx  +
push [ebp+lpMem]  +
call sub_1006792  +
add esp 1Ch +
jmp loc_100A389  +
lea eax [ebp+var_B4] +
push eax  +
lea eax [ebp+LCData] +
push eax  +
push offset aSS  +
push ebx  +
push [ebp+lpMem]  +
call sub_1006792  +
add esp 14h +
jmp loc_100A389  +
push ebx  +
push [ebp+lpMem]  +
push 3BC6h  +
jmp loc_100A384  +
push 3BC4h  +
call sub_100A04F  +
mov esi eax +
test esi esi +
jl loc_100A3D1  +
push [ebp+lpMem]  +
call sub_1009FD9  +
mov [edi+2Ch] eax +
test eax eax +
jz loc_100A419  +
push offset asc_1001EB8  +
push 0  +
call ds:wcstok  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100A412  +
push eax  +
call sub_1009FD9  +
mov [edi+30h] eax +
test eax eax +
jz loc_100A419  +
mov edi [edi] +
cmp edi offset dword_100E714 +
jnz loc_100A146  +
xor esi esi +
mov edi ds:HeapFree +
xor ebx ebx +
cmp [ebp+lpMem] ebx +
jz loc_100A3F1  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
push [ebp+lpBuffer]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10091BD  +
leave   +
retn   +
mov esi 8000FFFFh +
jmp loc_100A3D1  +
mov esi 8007000Eh +
jmp loc_100A3D1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
push 50h  +
pop eax  +
xor edi edi +
push edi  +
mov word_100E724 ax +
call sub_1009F26  +
push edi  +
call sub_1009F8E  +
call sub_100A0CB  +
test eax eax +
jl loc_100A487  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B36D  +
test eax eax +
jl loc_100A487  +
push 1  +
push [ebp+var_4]  +
call sub_1009C9C  +
test eax eax +
jge loc_100A46F  +
mov edi eax +
push 0  +
call sub_100536F  +
push eax  +
call sub_1009BE2  +
test eax eax +
jl loc_100A487  +
cmp eax 1 +
jz loc_100A487  +
mov eax edi +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+58h] 0 +
push edi  +
jnz loc_100A4DB  +
mov edi dword_100E730 +
shl edi 2 +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [esi+58h] eax +
test eax eax +
jnz loc_100A4CF  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100A4E7  +
push edi  +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov eax [ebp+arg_4] +
mov ecx [eax+54h] +
mov edx [esi+58h] +
mov [edx+ecx*4] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_8] +
xor edx edx +
push ebx  +
lea ecx [eax-1] +
push esi  +
push edi  +
mov [ebp+var_8] edx +
mov [ebp+var_C] edx +
mov [ebp+var_4] edx +
cmp ecx edx +
jbe loc_100A579  +
mov ebx [ebp+arg_4] +
mov ecx [ebx] +
cmp [ecx+48h] edx +
jz loc_100A566  +
mov edi [ebp+var_4] +
inc edi  +
cmp edi eax +
jnb loc_100A566  +
mov esi [ebx] +
mov ecx [ebp+arg_4] +
mov ecx [ecx+edi*4] +
mov edx esi +
cmp edx ecx +
jz loc_100A55F  +
cmp dword ptr [ecx+48h] 0 +
jz loc_100A55F  +
mov eax [edx+54h] +
cmp eax [ecx+54h] +
jbe loc_100A547  +
mov edx ecx +
mov ecx esi +
push ecx  +
push edx  +
call sub_100A491  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_100A57E  +
mov eax [ebp+arg_8] +
mov [ebp+var_C] 80070057h +
inc edi  +
cmp edi eax +
jb loc_100A527  +
xor edx edx +
inc [ebp+var_4]  +
lea ecx [eax-1] +
add ebx 4 +
cmp [ebp+var_4] ecx +
jb loc_100A518  +
cmp [ebp+var_8] edx +
jl loc_100A57E  +
mov eax [ebp+var_C] +
jmp loc_100A581  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_8] eax +
jbe loc_100A5AC  +
mov ecx [ebp+arg_4] +
mov ecx [ecx+eax*4] +
inc eax  +
mov dword ptr [ecx+38h] 1 +
cmp eax [ebp+arg_8] +
jb loc_100A599  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
jz loc_100A5EF  +
inc dword_100E71C  +
cmp [ebp+arg_8] ecx +
jbe loc_100A5EF  +
push esi  +
mov eax [ebp+arg_4] +
mov esi [ebp+arg_C] +
lea eax [eax+ecx*4] +
mov edx [eax] +
mov [edx+40h] esi +
mov eax [eax] +
mov edx dword_100E71C +
inc ecx  +
mov [eax+44h] edx +
cmp ecx [ebp+arg_8] +
jb loc_100A5CF  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100A5B7  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100A4F5  +
push [ebp+arg_8]  +
mov edx eax +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100A58D  +
test edx edx +
jge loc_100A631  +
mov eax edx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea ecx [eax-20h] +
cmp cx 5Eh +
ja loc_100A652  +
xor eax eax +
jmp loc_100A797  +
lea ecx [eax-3000h] +
cmp cx 36h +
ja loc_100A666  +
xor eax eax +
inc eax  +
jmp loc_100A797  +
lea ecx [eax-3041h] +
cmp cx 53h +
jbe loc_100A65E  +
lea ecx [eax-30A1h] +
cmp cx 5Dh +
jbe loc_100A65E  +
lea ecx [eax-3105h] +
cmp cx 27h +
jbe loc_100A65E  +
lea ecx [eax-3131h] +
cmp cx 5Dh +
jbe loc_100A65E  +
lea ecx [eax-3200h] +
mov edx 0FFh +
cmp cx dx +
jbe loc_100A65E  +
lea ecx [eax-3300h] +
dec edx  +
cmp cx dx +
jbe loc_100A65E  +
lea ecx [eax+5400h] +
mov edx 2BA3h +
cmp cx dx +
jbe loc_100A65E  +
lea ecx [eax+2000h] +
mov edx 18FFh +
cmp cx dx +
jbe loc_100A65E  +
lea ecx [eax+0FFh] +
cmp cx 5Dh +
jbe loc_100A65E  +
lea ecx [eax+9Fh] +
cmp cx 3Eh +
jbe loc_100A64B  +
mov ecx 0FFA0h +
cmp cx ax +
ja loc_100A704  +
add ecx 1Eh +
cmp ax cx +
jbe loc_100A64B  +
mov ecx 0FFC2h +
cmp cx ax +
ja loc_100A71A  +
add ecx 5 +
cmp ax cx +
jbe loc_100A64B  +
mov ecx 0FFCAh +
cmp cx ax +
ja loc_100A730  +
add ecx 5 +
cmp ax cx +
jbe loc_100A64B  +
mov ecx 0FFD2h +
cmp cx ax +
ja loc_100A746  +
add ecx 5 +
cmp ax cx +
jbe loc_100A64B  +
lea ecx [eax+26h] +
cmp cx 2 +
jbe loc_100A64B  +
lea ecx [eax+20h] +
cmp cx 6 +
jbe loc_100A65E  +
lea ecx [eax-4E00h] +
mov edx 51A5h +
cmp cx dx +
jbe loc_100A65E  +
lea ecx [eax+700h] +
mov edx 12Dh +
cmp cx dx +
jbe loc_100A65E  +
add eax 1D0h +
mov cx 1Fh +
cmp cx ax +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
call ds:GetConsoleOutputCP  +
cmp eax 3A4h +
jz loc_100A7C5  +
cmp eax 3A8h +
jz loc_100A7C5  +
cmp eax 3B4h +
jbe loc_100A7C2  +
cmp eax 3B6h +
jbe loc_100A7C5  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+NumberOfCharsWritten] +
push edi  +
mov edi [ebp+arg_8] +
mov eax edi +
cmp edi 2000h +
jb loc_100A7EA  +
mov eax 2000h +
push 0  +
lea ecx [ebp+NumberOfCharsWritten] +
push ecx  +
push eax  +
push esi  +
push [ebp+hConsoleOutput]  +
call ds:WriteConsoleW  +
test eax eax +
jz loc_100A803  +
xor eax eax +
jmp loc_100A824  +
call ds:GetLastError  +
test eax eax +
jz loc_100A81B  +
jle loc_100A820  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100A820  +
mov eax 80004005h +
test eax eax +
jl loc_100A832  +
mov ecx [ebp+NumberOfCharsWritten] +
cmp ecx edi +
ja loc_100A832  +
sub edi ecx +
lea esi [esi+ecx*2] +
jnz loc_100A7DB  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
test ecx ecx +
jz loc_100A888  +
mov eax [ebp+arg_4] +
cmp eax 7FFFFFFFh +
ja loc_100A888  +
push edi  +
xor edi edi +
mov edx eax +
test eax eax +
jz loc_100A86D  +
cmp byte ptr [ecx] 0 +
jz loc_100A869  +
inc ecx  +
dec edx  +
jnz loc_100A860  +
test edx edx +
jnz loc_100A872  +
mov edi 80070057h +
test esi esi +
jz loc_100A883  +
test edi edi +
jl loc_100A880  +
sub eax edx +
mov [esi] eax +
jmp loc_100A883  +
and dword ptr [esi] 0 +
mov eax edi +
pop edi  +
jmp loc_100A88D  +
mov eax 80070057h +
test eax eax +
jge loc_100A898  +
test esi esi +
jz loc_100A898  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
test ecx ecx +
jz loc_100A8EE  +
mov eax [ebp+arg_4] +
cmp eax 7FFFFFFFh +
ja loc_100A8EE  +
push edi  +
xor edi edi +
mov edx eax +
test eax eax +
jz loc_100A8D3  +
cmp [ecx] di +
jz loc_100A8CF  +
inc ecx  +
inc ecx  +
dec edx  +
jnz loc_100A8C5  +
test edx edx +
jnz loc_100A8D8  +
mov edi 80070057h +
test esi esi +
jz loc_100A8E9  +
test edi edi +
jl loc_100A8E6  +
sub eax edx +
mov [esi] eax +
jmp loc_100A8E9  +
and dword ptr [esi] 0 +
mov eax edi +
pop edi  +
jmp loc_100A8F3  +
mov eax 80070057h +
test eax eax +
jge loc_100A8FE  +
test esi esi +
jz loc_100A8FE  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
cmp esi edi +
jnz loc_100A925  +
mov [ebp+arg_0] 1 +
jmp loc_100A96A  +
lea eax [ebp+var_4] +
push eax  +
push 7FFFFFFFh  +
push esi  +
call sub_100A8A2  +
cmp eax edi +
mov [ebp+arg_0] eax +
jl loc_100A96A  +
push ebx  +
mov ebx [ebp+var_4] +
cmp [ebp+arg_4] edi +
jz loc_100A94D  +
call sub_100A7A0  +
test eax eax +
jnz loc_100A981  +
and [ebp+arg_0] 0 +
mov edi ebx +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100A95C  +
mov [eax] edi +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100A969  +
and [ebp+arg_0] 0 +
mov [eax] ebx +
pop ebx  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
push eax  +
call sub_100A63A  +
inc edi  +
test eax eax +
jz loc_100A97F  +
inc edi  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_100A973  +
jmp loc_100A953  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push 0FFFFFFF5h  +
mov [ebp+var_4] edi +
call ds:GetStdHandle  +
mov ebx eax +
mov [ebp+hFile] ebx +
cmp ebx 0FFFFFFFFh +
jz loc_100AAD9  +
cmp ebx edi +
jz loc_100AAD9  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+dwBytes]  +
push [ebp+NumberOfCharsWritten]  +
call sub_100A908  +
mov esi eax +
test esi esi +
jl loc_100AB07  +
push ebx  +
call sub_100B3D2  +
test eax eax +
jz loc_100AA1C  +
push [ebp+var_4]  +
push [ebp+NumberOfCharsWritten]  +
push ebx  +
call sub_100A7CE  +
test eax eax +
jz loc_100A9F8  +
xor esi esi +
jmp loc_100AB07  +
call ds:GetLastError  +
test eax eax +
jz loc_100AA10  +
jle loc_100AA15  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100AA15  +
mov eax 80004005h +
mov esi eax +
jmp loc_100AB07  +
lea eax [ebp+dwBytes] +
push eax  +
mov eax [ebp+var_4] +
push 2  +
pop ecx  +
inc eax  +
mul  ecx +
push edx  +
push eax  +
call sub_1009DF5  +
mov esi eax +
test esi esi +
jl loc_100AB07  +
push [ebp+dwBytes]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jnz loc_100AA5C  +
mov esi 8007000Eh +
jmp loc_100AAF3  +
push edi  +
push [ebp+NumberOfCharsWritten]  +
mov byte ptr [edi] 0 +
call ds:CharToOemW  +
mov ebx 80070000h +
test eax eax +
jnz loc_100AA92  +
call ds:GetLastError  +
test eax eax +
jz loc_100AA87  +
jle loc_100AA8C  +
and eax 0FFFFh +
or eax ebx +
jmp loc_100AA8C  +
mov eax 80004005h +
mov esi eax +
test eax eax +
jl loc_100AAF3  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push [ebp+dwBytes]  +
push edi  +
call sub_100A83D  +
mov esi eax +
test esi esi +
jl loc_100AAF3  +
xor esi esi +
push esi  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+NumberOfCharsWritten]  +
push edi  +
push [ebp+hFile]  +
call ds:WriteFile  +
test eax eax +
jnz loc_100AAF3  +
call ds:GetLastError  +
cmp eax esi +
jz loc_100AAD2  +
jle loc_100AAF1  +
and eax 0FFFFh +
or eax ebx +
jmp loc_100AAF1  +
mov eax 80004005h +
jmp loc_100AAF1  +
call ds:GetLastError  +
cmp eax edi +
jle loc_100AA15  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test edi edi +
jz loc_100AB07  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+NumberOfCharsWritten] 0 +
push esi  +
push edi  +
lea eax [ebp+Arguments] +
push eax  +
push 400h  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 0  +
push 0  +
push [ebp+lpSource]  +
push 500h  +
call ds:FormatMessageW  +
mov esi [ebp+arg_8] +
mov [ebp+lpSource] eax +
test eax eax +
jnz loc_100AB69  +
call ds:GetLastError  +
test eax eax +
jz loc_100AB62  +
jle loc_100AB72  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100AB72  +
mov eax 80004005h +
jmp loc_100AB72  +
push [ebp+NumberOfCharsWritten]  +
push esi  +
call sub_100A990  +
mov edi eax +
test esi esi +
jz loc_100AB7D  +
mov eax [ebp+lpSource] +
mov [esi] eax +
cmp [ebp+NumberOfCharsWritten] 0 +
jz loc_100AB8C  +
push [ebp+NumberOfCharsWritten]  +
call ds:LocalFree  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 804h +
mov eax dword_100E318 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push 400h  +
lea eax [ebp+Source] +
push eax  +
push [ebp+uID]  +
call sub_100A04F  +
test eax eax +
jl loc_100ABDB  +
push esi  +
lea eax [ebp+Arguments] +
push eax  +
lea eax [ebp+Source] +
push eax  +
call sub_100AB15  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10091BD  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
and dword ptr [edx] 0 +
mov ecx [ebp+arg_0] +
jmp loc_100AC07  +
cmp ax [ebp+arg_4] +
jnz loc_100AC05  +
inc dword ptr [edx]  +
inc ecx  +
inc ecx  +
movzx eax word ptr [ecx] +
test ax ax +
jnz loc_100ABFD  +
xor eax eax +
cmp eax [edx] +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+pvarg] +
push eax  +
xor esi esi +
call ds:VariantInit  +
cmp [ebp+arg_0] esi +
jnz loc_100AC40  +
mov eax [ebp+arg_4] +
and [eax] esi +
jmp loc_100AC7B  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
test eax eax +
jnz loc_100AC57  +
mov esi 8007000Eh +
jmp loc_100AC7B  +
push 8  +
pop eax  +
push 13h  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
push 0  +
lea eax [ebp+pvarg] +
push eax  +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
test esi esi +
jl loc_100AC7B  +
mov eax [ebp+arg_4] +
mov ecx dword ptr [ebp+pvarg.anonymous_0+8] +
mov [eax] ecx +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_100E318 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_4] +
push ebx  +
push edi  +
mov [ebp+var_20] eax +
mov dword ptr [ebp+var_14] 3Ah +
xor eax eax +
lea edi [ebp+var_10] +
stos   +
stos   +
push 800h  +
push 0  +
stos   +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_100ACE6  +
mov [ebp+var_1C] 8007000Eh +
jmp loc_100ADCB  +
push esi  +
push 8  +
push ebx  +
push 1Eh  +
xor eax eax +
mov esi 400h +
push esi  +
mov [ebx] ax +
call ds:GetLocaleInfoW  +
cmp eax 1 +
jle loc_100AD19  +
push ebx  +
push 8  +
lea eax [ebp+var_14] +
push eax  +
call sub_10065DD  +
mov [ebp+var_1C] eax +
test eax eax +
jl loc_100ADBA  +
push [ebp+var_18]  +
push esi  +
push ebx  +
call sub_10065DD  +
mov [ebp+var_1C] eax +
test eax eax +
jl loc_100ADBA  +
mov esi ds:wcstok +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
call esi  +
and [ebp+var_18] 0 +
pop ecx  +
pop ecx  +
lea edi [ebp+var_2C] +
test eax eax +
jz loc_100AD6C  +
push edi  +
push eax  +
call sub_100AC1F  +
inc [ebp+var_18]  +
add edi 4 +
mov [ebp+var_1C] eax +
test eax eax +
jl loc_100ADBA  +
lea eax [ebp+var_14] +
push eax  +
push 0  +
call esi  +
cmp [ebp+var_18] 3 +
pop ecx  +
pop ecx  +
jb loc_100AD44  +
mov eax [ebp+var_18] +
dec eax  +
jz loc_100ADAF  +
dec eax  +
jz loc_100AD9A  +
dec eax  +
jz loc_100AD81  +
mov [ebp+var_1C] 80070057h +
jmp loc_100ADBA  +
mov cx word ptr [ebp+var_2C] +
mov eax [ebp+var_20] +
mov [eax+64h] cx +
mov cx [ebp+var_28] +
mov [eax+66h] cx +
mov cx [ebp+var_24] +
jmp loc_100ADA9  +
mov cx word ptr [ebp+var_2C] +
mov eax [ebp+var_20] +
mov [eax+66h] cx +
mov cx [ebp+var_28] +
mov [eax+68h] cx +
jmp loc_100ADBA  +
mov ax word ptr [ebp+var_2C] +
mov ecx [ebp+var_20] +
mov [ecx+68h] ax +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_1C] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_10091BD  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+lpMem] 0 +
push ebx  +
push edi  +
push 800h  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_100AE15  +
mov edi 8007000Eh +
jmp loc_100AEA1  +
push esi  +
push [ebp+arg_4]  +
mov esi 400h +
push esi  +
xor eax eax +
push ebx  +
mov [ebx] ax +
call sub_10065DD  +
mov edi eax +
test edi edi +
jl loc_100AE90  +
lea eax [ebp+lpMem] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword ptr [eax+4]  +
mov edi eax +
test edi edi +
jl loc_100AE90  +
jnz loc_100AE65  +
push offset asc_1001E88  +
push esi  +
push ebx  +
call sub_1006738  +
mov edi eax +
test edi edi +
jl loc_100AE90  +
push [ebp+lpMem]  +
push esi  +
push ebx  +
call sub_1006738  +
mov edi eax +
test edi edi +
jl loc_100AE90  +
lea eax [ebp+pdateOut] +
push eax  +
push 0  +
push esi  +
push ebx  +
call ds:VarDateFromStr  +
mov edi eax +
test edi edi +
jl loc_100AE90  +
mov eax [ebp+arg_8] +
fld  [ebp+pdateOut] +
add eax 5Ch +
push eax  +
push ecx  +
push ecx  +
fstp  [esp+2Ch+var_2C] +
call ds:VariantTimeToSystemTime  +
mov edi eax +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
cmp [ebp+lpMem] 0 +
jz loc_100AEB9  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
xor edi edi +
mov [ebp+var_4] edi +
mov [ebp+lpMem] edi +
call sub_1009FD9  +
mov esi [ebp+arg_4] +
lea ebx [esi+5Ch] +
mov [ebx] eax +
cmp eax edi +
jnz loc_100AEF8  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100AF96  +
mov eax [esi+20h] +
test al 20h +
jz loc_100AF70  +
push 800h  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax edi +
jnz loc_100AF22  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100AF7E  +
xor ecx ecx +
mov [eax] cx +
push dword ptr [esi+2Ch]  +
push 400h  +
push eax  +
call sub_10065DD  +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_100AF7E  +
mov esi ds:wcstok +
mov edi offset asc_1001E84 +
push edi  +
push [ebp+lpMem]  +
jmp loc_100AF5F  +
push eax  +
push dword ptr [ebx]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100AF7E  +
push edi  +
push 0  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100AF4D  +
mov [ebp+var_4] 80070057h +
jmp loc_100AF7E  +
test al al +
jns loc_100AF96  +
push edi  +
push ebx  +
call sub_100B436  +
mov [ebp+var_4] eax +
cmp [ebp+lpMem] 0 +
jz loc_100AF96  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+lpMem] 0 +
and [ebp+var_C] 0 +
push ebx  +
push esi  +
push [ebp+arg_4]  +
call sub_1009FD9  +
mov esi ds:GetProcessHeap +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_100AFD6  +
mov ebx 8007000Eh +
jmp loc_100B0F7  +
push edi  +
mov edi [ebp+arg_8] +
test dword ptr [edi+20h] 8 +
jnz loc_100B004  +
push 1000h  +
xor ebx ebx +
push ebx  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+arg_8] eax +
cmp eax ebx +
jz loc_100B01B  +
mov [ebp+arg_4] 800h +
jmp loc_100B03F  +
push 800h  +
push 0  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+arg_8] eax +
test eax eax +
jnz loc_100B025  +
mov ebx 8007000Eh +
jmp loc_100B0E2  +
lea eax [ebp+var_C] +
push eax  +
push 20h  +
push dword ptr [edi+2Ch]  +
mov [ebp+arg_4] 400h +
call sub_100ABED  +
inc [ebp+var_C]  +
xor ebx ebx +
mov eax [ebp+arg_8] +
mov [ebp+var_8] eax +
mov [ebp+var_10] ebx +
jmp loc_100B04C  +
xor ebx ebx +
push ebx  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+lpMem]  +
push [ebp+arg_4]  +
push [ebp+var_8]  +
call sub_1006617  +
cmp eax ebx +
jge loc_100B06A  +
mov [ebp+var_10] eax +
cmp [ebp+arg_4] ebx +
jnz loc_100B078  +
mov [ebp+var_10] 8007007Ah +
jmp loc_100B087  +
add [ebp+var_8] 2 +
mov ecx [ebp+var_8] +
xor eax eax +
dec [ebp+arg_4]  +
mov [ecx] ax +
test byte ptr [edi+20h] 8 +
jz loc_100B092  +
dec [ebp+var_C]  +
jz loc_100B0BD  +
cmp [ebp+lpMem] ebx +
jz loc_100B0A7  +
push [ebp+lpMem]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp+lpMem] ebx +
lea eax [ebp+lpMem] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword ptr [eax+4]  +
mov ebx eax +
test ebx ebx +
jl loc_100B0E2  +
cmp ebx 1 +
jnz loc_100B04A  +
mov ebx [ebp+var_10] +
test ebx ebx +
jl loc_100B0E2  +
mov ecx [ebp+arg_8] +
and [ebp+arg_8] 0 +
lea eax [edi+5Ch] +
xor ebx ebx +
test byte ptr [edi+20h] 80h +
mov [eax] ecx +
jz loc_100B0F6  +
push 1  +
push eax  +
call sub_100B436  +
mov ebx eax +
cmp [ebp+arg_8] 0 +
jz loc_100B0F6  +
push [ebp+arg_8]  +
push 0  +
call esi  +
push eax  +
call ds:HeapFree  +
pop edi  +
cmp [ebp+lpMem] 0 +
jz loc_100B10B  +
push [ebp+lpMem]  +
push 0  +
call esi  +
push eax  +
call ds:HeapFree  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
cmp [ebp+arg_8] 5Ch +
mov [ebp+lpMem] esi +
jnb loc_100B134  +
mov eax 80070057h +
jmp loc_100B273  +
push edi  +
mov edi [ebp+arg_4] +
test byte ptr [edi+20h] 10h +
jz loc_100B149  +
xor eax eax +
inc eax  +
mov [edi+38h] eax +
mov dword_100E720 eax +
cmp [edi+1Ch] esi +
jz loc_100B270  +
cmp [edi+4Ch] esi +
jz loc_100B164  +
test dword ptr [edi+20h] 100h +
jnz loc_100B270  +
push ebx  +
mov ebx [ebp+arg_0] +
cmp [ebp+arg_10] esi +
jz loc_100B186  +
push [ebp+arg_C]  +
call sub_1009FD9  +
mov [ebp+lpMem] eax +
cmp eax esi +
jnz loc_100B1CE  +
mov esi 8007000Eh +
jmp loc_100B253  +
lea eax [ebp+lpMem] +
push eax  +
push ebx  +
call dword ptr [ebx+4]  +
mov esi eax +
test esi esi +
jl loc_100B253  +
cmp esi 1 +
jnz loc_100B1CE  +
test byte ptr [edi+20h] 2 +
jnz loc_100B251  +
cmp [edi+18h] eax +
jnz loc_100B1B1  +
mov edi [edi+28h] +
jmp loc_100B1B4  +
mov edi [edi+24h] +
push edi  +
push 3C34h  +
push 0  +
call sub_100AB99  +
add esp 0Ch +
mov esi 80070057h +
jmp loc_100B253  +
mov eax [edi+1Ch] +
dec eax  +
jz loc_100B23C  +
dec eax  +
jz loc_100B22A  +
dec eax  +
jz loc_100B219  +
dec eax  +
jz loc_100B207  +
dec eax  +
jnz loc_100B251  +
cmp [ebp+arg_8] 60h +
jz loc_100B1ED  +
mov esi 80004005h +
jmp loc_100B253  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+lpMem]  +
call sub_100AC1F  +
mov esi eax +
test esi esi +
jl loc_100B253  +
mov eax [ebp+arg_8] +
mov [edi+5Ch] eax +
jmp loc_100B251  +
cmp [ebp+arg_8] 6Ch +
jnz loc_100B1E6  +
push edi  +
push [ebp+lpMem]  +
push ebx  +
call sub_100ADE3  +
jmp loc_100B24B  +
cmp [ebp+arg_8] 6Ch +
jnz loc_100B1E6  +
push edi  +
push [ebp+lpMem]  +
call sub_100AC91  +
jmp loc_100B24B  +
cmp [ebp+arg_8] 60h +
jnz loc_100B1E6  +
push edi  +
push [ebp+lpMem]  +
push ebx  +
call sub_100AFA5  +
jmp loc_100B24B  +
cmp [ebp+arg_8] 60h +
jnz loc_100B1E6  +
push edi  +
push [ebp+lpMem]  +
call sub_100AEC6  +
mov esi eax +
test esi esi +
jl loc_100B253  +
xor esi esi +
cmp [ebp+lpMem] 0 +
pop ebx  +
jz loc_100B26C  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax esi +
jmp loc_100B272  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
mov eax [edi+0Ch] +
cmp eax [edi+10h] +
jge loc_100B2DC  +
test eax eax +
jl loc_100B2DC  +
mov ecx [edi+14h] +
push esi  +
mov esi [ecx+eax*4] +
movzx eax word ptr [esi] +
push eax  +
push offset asc_1001EBC  +
call ds:wcschr  +
neg eax  +
pop ecx  +
sbb eax eax +
pop ecx  +
mov ecx [ebp+10h] +
neg eax  +
mov [ecx] eax +
push 0  +
pop eax  +
setnz al  +
lea eax [esi+eax*2] +
push eax  +
call sub_1009FD9  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
pop esi  +
test eax eax +
jnz loc_100B2D5  +
mov eax 8007000Eh +
jmp loc_100B2DF  +
inc dword ptr [edi+0Ch]  +
xor eax eax +
jmp loc_100B2DF  +
xor eax eax +
inc eax  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+0Ch] +
cmp eax [esi+10h] +
jge loc_100B33A  +
mov ecx [esi+14h] +
mov eax [ecx+eax*4] +
movzx eax word ptr [eax] +
push eax  +
push offset asc_1001EBC  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100B33A  +
mov eax [esi+0Ch] +
mov ecx [esi+14h] +
push dword ptr [ecx+eax*4]  +
call sub_1009FD9  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
test eax eax +
jnz loc_100B333  +
mov eax 8007000Eh +
jmp loc_100B33D  +
inc dword ptr [esi+0Ch]  +
xor eax eax +
jmp loc_100B33D  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_100B364  +
push dword ptr [ebp+8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 18h  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edx eax +
test edx edx +
jnz loc_100B390  +
mov eax 8007000Eh +
jmp loc_100B3C9  +
push edi  +
xor eax eax +
push 6  +
pop ecx  +
mov edi edx +
stos   +
mov eax [ebp+arg_0] +
mov [edx+10h] eax +
mov eax [ebp+arg_4] +
mov [edx+14h] eax +
mov eax [ebp+arg_8] +
mov dword ptr [edx] offset loc_100B27D +
mov dword ptr [edx+4] offset loc_100B2E9 +
mov dword ptr [edx+8] offset loc_100B347 +
mov dword ptr [edx+0Ch] 1 +
mov [eax] edx +
xor eax eax +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+hConsoleHandle]  +
call ds:GetFileType  +
and eax 0FFFF7FFFh +
mov [ebp+Mode] eax +
cmp eax 2 +
jz loc_100B3F2  +
xor eax eax +
jmp locret_100B42D  +
lea eax [ebp+Mode] +
push eax  +
push [ebp+hConsoleHandle]  +
call ds:GetConsoleMode  +
test eax eax +
jz loc_100B407  +
xor eax eax +
jmp loc_100B424  +
call ds:GetLastError  +
test eax eax +
jz loc_100B41F  +
jle loc_100B424  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100B424  +
mov eax 80004005h +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A7Ch +
mov eax dword_100E318 +
xor eax ebp +
mov [ebp+var_4] eax +
or [ebp+hFindFile] 0FFFFFFFFh +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
push 800h  +
push edi  +
mov [ebp+var_A70] 1 +
mov [ebp+var_A6C] 400h +
mov [ebp+var_A74] edi +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax edi +
jnz loc_100B49F  +
mov [ebp+var_A70] 8007000Eh +
jmp loc_100B74B  +
xor ecx ecx +
push esi  +
mov [eax] cx +
mov esi [ebx] +
mov [ebp+var_A68] eax +
jmp loc_100B6BF  +
mov eax 100h +
push eax  +
lea ecx [ebp+var_814] +
push ecx  +
push eax  +
lea ecx [ebp+var_614] +
push ecx  +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
push 3  +
lea eax [ebp+var_C] +
push eax  +
push esi  +
call _wsplitpath_s  +
add esp 24h +
lea eax [ebp+FindFileData] +
push eax  +
push esi  +
call ds:FindFirstFileW  +
mov [ebp+hFindFile] eax +
cmp eax 0FFFFFFFFh +
jz loc_100B627  +
mov ecx offset a_ +
lea eax [ebp+FindFileData.cFileName] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100B52C  +
cmp dx di +
jz loc_100B528  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100B52C  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_100B506  +
xor eax eax +
jmp loc_100B531  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jz loc_100B60A  +
mov ecx offset a__ +
lea eax [ebp+FindFileData.cFileName] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100B56A  +
cmp dx di +
jz loc_100B566  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100B56A  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_100B544  +
xor eax eax +
jmp loc_100B56F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jz loc_100B60A  +
push offset dword_10015F8  +
lea eax [ebp+FindFileData.cFileName] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_414] +
push 104h  +
push eax  +
call _wmakepath_s  +
add esp 18h +
push edi  +
lea eax [ebp+var_A6C] +
push eax  +
lea eax [ebp+var_A68] +
push eax  +
lea eax [ebp+var_414] +
push eax  +
push [ebp+var_A6C]  +
push [ebp+var_A68]  +
call sub_1006617  +
cmp eax edi +
mov [ebp+var_A70] eax +
jl loc_100B719  +
cmp [ebp+var_A6C] edi +
jz loc_100B6F7  +
inc [ebp+var_A74]  +
cmp [ebp+arg_4] edi +
jz loc_100B6C8  +
add [ebp+var_A68] 2 +
mov ecx [ebp+var_A68] +
xor eax eax +
dec [ebp+var_A6C]  +
mov [ecx] ax +
lea eax [ebp+FindFileData] +
push eax  +
push [ebp+hFindFile]  +
call ds:FindNextFileW  +
test eax eax +
jnz loc_100B4FB  +
jmp loc_100B6A3  +
push 2Ah  +
push esi  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100B6A3  +
push 3Fh  +
push esi  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100B6A3  +
push edi  +
lea eax [ebp+var_A6C] +
push eax  +
lea eax [ebp+var_A68] +
push eax  +
push esi  +
push [ebp+var_A6C]  +
push [ebp+var_A68]  +
call sub_1006617  +
cmp eax edi +
mov [ebp+var_A70] eax +
jl loc_100B72E  +
cmp [ebp+var_A6C] edi +
jz loc_100B703  +
inc [ebp+var_A74]  +
cmp [ebp+arg_4] edi +
jz loc_100B6C8  +
add [ebp+var_A68] 2 +
mov ecx [ebp+var_A68] +
xor eax eax +
dec [ebp+var_A6C]  +
mov [ecx] ax +
cmp [ebp+arg_4] edi +
jz loc_100B6C8  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_100B6AD  +
sub eax edx +
sar eax 1 +
lea esi [esi+eax*2+2] +
cmp [esi] di +
jnz loc_100B4B2  +
mov eax [ebx] +
cmp eax edi +
jz loc_100B6DF  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebx] edi +
cmp [ebp+var_A74] edi +
jz loc_100B70F  +
mov eax [ebp+lpMem] +
mov [ebx] eax +
mov [ebp+lpMem] edi +
jmp loc_100B719  +
mov [ebp+var_A70] 8007007Ah +
jmp loc_100B719  +
mov [ebp+var_A70] 8007007Ah +
jmp loc_100B72E  +
mov [ebp+var_A70] 80070002h +
cmp [ebp+hFindFile] 0FFFFFFFFh +
jz loc_100B72E  +
push [ebp+hFindFile]  +
call ds:FindClose  +
pop esi  +
cmp [ebp+lpMem] edi +
jz loc_100B74B  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_A70] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_10091BD  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call _vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100B7C5  +
cmp eax esi +
ja loc_100B7C5  +
jz loc_100B7CA  +
jmp loc_100B7D2  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100B7DB  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+wLanguage]  +
push 1  +
push offset Type  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+hModule]  +
call sub_100B7E8  +
test eax eax +
jz loc_100B826  +
push eax  +
push [ebp+hModule]  +
call ds:LoadResource  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hModule] 0 +
push esi  +
jz loc_100B884  +
cmp [ebp+arg_4] 0 +
jz loc_100B884  +
push [ebp+hModule]  +
call sub_100B809  +
push [ebp+arg_4]  +
mov esi eax +
call sub_100B809  +
test esi esi +
jz loc_100B87C  +
test eax eax +
jz loc_100B87C  +
mov ecx 0FECDFECDh +
cmp [esi] ecx +
jnz loc_100B884  +
cmp [eax] ecx +
jnz loc_100B884  +
push edi  +
push 4  +
lea edi [eax+1Ch] +
add esi 1Ch +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
jnz loc_100B884  +
inc eax  +
jmp loc_100B886  +
push 0Dh  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+lpLibFileName] esi +
jnz loc_100B8A3  +
xor eax eax +
jmp loc_100B911  +
cmp [ebp+arg_4] esi +
jz loc_100B8FE  +
push esi  +
push esi  +
push 3  +
push esi  +
push 5  +
push 80000000h  +
push [ebp+lpLibFileName]  +
call ds:CreateFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_100B89F  +
push esi  +
push esi  +
push esi  +
push 8  +
push esi  +
push edi  +
call ds:CreateFileMappingW  +
push edi  +
mov edi ds:CloseHandle +
mov ebx eax +
call edi  +
cmp ebx esi +
jz loc_100B89F  +
push esi  +
push esi  +
push esi  +
push 1  +
push ebx  +
call ds:MapViewOfFile  +
push ebx  +
mov [ebp+lpLibFileName] eax +
call edi  +
mov eax [ebp+lpLibFileName] +
cmp eax esi +
jz loc_100B89F  +
or eax 1 +
jmp loc_100B911  +
xor eax eax +
cmp [ebp+arg_8] esi +
setnz al  +
push eax  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_100E318 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp dword_100E738 edi +
jnz loc_100BA39  +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
mov esi ds:GetVersionExW +
push eax  +
call esi  +
test eax eax +
jnz loc_100B984  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call esi  +
mov eax [ebp+VersionInformation.dwPlatformId] +
dec eax  +
mov dword_100E738 edi +
pop esi  +
jz loc_100BA0C  +
dec eax  +
jnz loc_100BA39  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jnz loc_100B9F9  +
mov eax [ebp+VersionInformation.dwMinorVersion] +
sub eax edi +
jz loc_100B9ED  +
dec eax  +
jz loc_100B9DA  +
dec eax  +
jz loc_100B9C0  +
mov dword_100E738 14h +
jmp loc_100BA39  +
cmp [ebp+var_C] 1 +
jb loc_100B9D1  +
mov dword_100E738 10h +
or dword_100E738 4 +
jmp loc_100BA39  +
cmp [ebp+var_C] 2 +
jb loc_100B9D1  +
mov dword_100E738 8 +
jmp loc_100B9D1  +
mov dword_100E738 4 +
jmp loc_100BA39  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_100BA4B  +
mov dword_100E738 2 +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jnz loc_100BA39  +
cmp [ebp+VersionInformation.dwMinorVersion] edi +
jz loc_100BA2F  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jz loc_100BA2F  +
cmp [ebp+VersionInformation.dwMinorVersion] 5Ah +
jnz loc_100BA39  +
mov dword_100E738 1 +
mov ecx [ebp+var_4] +
mov eax dword_100E738 +
xor ecx ebp +
pop edi  +
call sub_10091BD  +
leave   +
retn   +
mov dword_100E738 20h +
jmp loc_100BA39  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_100E318 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20h  +
lea eax [ebp+LCData] +
push eax  +
push 8  +
push 404h  +
mov esi 0C04h +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_100BAB0  +
push 3  +
lea eax [ebp+LCData] +
push offset word_10023C8  +
push eax  +
call wcsncmp  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 0FFFFF800h +
add esi 0C04h +
mov ecx [ebp+var_4] +
mov ax si +
xor ecx ebp +
pop esi  +
call sub_10091BD  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100E318 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
cmp ax word_100E73C +
jnz loc_100BB60  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor esi esi +
push esi  +
push offset aSoftwareMicr_0  +
push 80000002h  +
mov [ebp+cbData] 6 +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100BB5F  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push esi  +
push offset aLocale  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi esi +
pop edi  +
jnz loc_100BB5F  +
push 3  +
push ds:off_1002148[esi*8]  +
lea eax [ebp+Data] +
push eax  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_100BB51  +
inc esi  +
cmp esi 1Ch +
jb loc_100BB30  +
jmp loc_100BB5F  +
mov ax ds:word_100214C[esi*8] +
mov word_100E73C ax +
pop esi  +
mov ecx [ebp+var_4] +
mov ax word_100E73C +
xor ecx ebp +
call sub_10091BD  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_100BC35  +
cmp [ebp+arg_0] ebx +
jz loc_100BC35  +
cmp [ebp+arg_4] ebx +
jz loc_100BC35  +
push esi  +
movzx eax word ptr [edi] +
lea ecx [eax-61h] +
cmp cx 19h +
ja loc_100BBB1  +
movzx eax ax +
sub eax 61h +
jmp loc_100BBC0  +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_100BBEA  +
movzx eax ax +
sub eax 41h +
cmp eax 1Ah +
jnb loc_100BBEA  +
mov esi ds:dword_1002290[eax*4] +
test esi esi +
jz loc_100BBEA  +
jmp loc_100BBE2  +
push eax  +
push edi  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100BBF5  +
add esi 8 +
mov eax [esi] +
cmp word ptr [eax] 0 +
jnz loc_100BBD2  +
mov edi [ebp+arg_0] +
inc ebx  +
cmp ebx 2 +
jl loc_100BB9D  +
jmp loc_100BC34  +
mov esi [esi+4] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100BBFD  +
sub eax edx +
sar eax 1 +
cmp eax 55h +
jnb loc_100BC34  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100BC15  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call memcpy  +
add esp 0Ch +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test esi esi +
jz loc_100BC86  +
cmp [ebp+arg_4] 0 +
jz loc_100BC86  +
push 2  +
push 55h  +
push esi  +
push [ebp+arg_0]  +
call sub_100C6D4  +
test eax eax +
jz loc_100BC86  +
push 2  +
push 55h  +
push [ebp+arg_4]  +
push esi  +
call sub_100C77A  +
test edi edi +
jz loc_100BC81  +
xor eax eax +
push edi  +
push [ebp+arg_4]  +
mov [edi] ax +
mov eax esi +
call sub_100BB77  +
xor eax eax +
inc eax  +
jmp loc_100BC88  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:FreeLibrary  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100BCB7  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_100BCBC  +
mov eax 80070057h +
test eax eax +
jl loc_100BCD5  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_100B79D  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_100E318 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_100BCFF  +
xor eax eax +
jmp loc_100BD6A  +
push ebx  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push 104h  +
push eax  +
xor ebx ebx +
call sub_100BCA2  +
test eax eax +
jl loc_100BD67  +
push esi  +
call sub_100B91D  +
mov esi eax +
and esi 26h +
call sub_100B91D  +
and eax 38h +
push esi  +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_100B890  +
mov ebx eax +
pop esi  +
test ebx ebx +
jz loc_100BD67  +
push ebx  +
push edi  +
call sub_100B82F  +
test eax eax +
jnz loc_100BD67  +
push ebx  +
test bl 1 +
jz loc_100BD5F  +
call ds:UnmapViewOfFile  +
jmp loc_100BD65  +
call ds:FreeLibrary  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_10091BD  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test eax eax +
jz loc_100BDD7  +
test ecx ecx +
jz loc_100BDD7  +
cmp dword ptr [ebp+arg_0] 0 +
push eax  +
jz loc_100BDBB  +
test edx edx +
jz loc_100BDA8  +
push edx  +
push dword ptr [ebp+arg_0]  +
push offset aSSS_mui  +
push ecx  +
call sub_100BCDE  +
add esp 14h +
jmp loc_100BDD9  +
push dword ptr [ebp+arg_0]  +
push offset aSS_mui  +
push ecx  +
call sub_100BCDE  +
add esp 10h +
jmp loc_100BDD9  +
test edx edx +
jz loc_100BDC7  +
push edx  +
push offset a_SS_mui  +
jmp loc_100BDB0  +
push offset a_S_mui  +
push ecx  +
call sub_100BCDE  +
add esp 0Ch +
jmp loc_100BDD9  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_100E318 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+lpLibFileName] esi +
mov [ebp+FilePart] ebx +
cmp esi ebx +
jnz loc_100BE15  +
xor eax eax +
jmp loc_100C56E  +
test [ebp+arg_4] 0FFFFFFE3h +
jnz loc_100BE0E  +
push edi  +
mov edi dword ptr [ebp+wLanguage] +
cmp di bx +
jnz loc_100BE31  +
test byte ptr [ebp+arg_4] 10h +
jnz loc_100C49B  +
call sub_100B91D  +
mov dword_100E740 eax +
movzx eax al +
and eax 20h +
or eax 2 +
push eax  +
push 0  +
push esi  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
test eax eax +
jz loc_100C49B  +
test byte ptr dword_100E740 20h +
jnz loc_100C56D  +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
push 104h  +
push 0  +
push esi  +
push 0  +
call ds:SearchPathW  +
test eax eax +
jz loc_100C48F  +
mov eax [ebp+FilePart] +
test eax eax +
jnz loc_100BEAD  +
and dword ptr [ebp+var_41C] ebx +
lea eax [ebp+LibFileName] +
mov [ebp+FilePart] eax +
jmp loc_100BEBF  +
lea ecx [ebp+LibFileName] +
mov dword ptr [ebp+var_41C] ecx +
xor ecx ecx +
mov [eax-2] cx +
push 0  +
push [ebp+hModule]  +
call sub_100B7E8  +
test eax eax +
jz loc_100C477  +
test di di +
jnz loc_100C44F  +
mov al byte ptr dword_100E740 +
test al 4 +
jz loc_100C25E  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
mov ecx 404h +
mov [ebp+var_420] eax +
cmp ax cx +
jnz loc_100BF11  +
call sub_100BA5C  +
movzx eax ax +
mov [ebp+var_420] eax +
mov eax [ebp+arg_4] +
and eax 8 +
mov [ebp+var_424] eax +
cmp [ebp+var_424] 0 +
jz loc_100BFE7  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_100BC40  +
test eax eax +
jz loc_100C4DB  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
cmp word ptr [ebp+var_208] ax +
jz loc_100BFC6  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jnz loc_100C192  +
mov [ebp+var_420] 404h +
jmp loc_100BF1D  +
movzx eax word ptr [ebp+var_420] +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1006792  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_100BC40  +
test eax eax +
jz loc_100C099  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_100C5E9  +
movzx eax ax +
test ax ax +
jz loc_100C099  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1006792  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jz loc_100BFD8  +
call ds:GetSystemDefaultUILanguage  +
movzx esi ax +
mov [ebp+var_424] esi +
cmp si word ptr [ebp+var_420] +
jz loc_100C176  +
movzx eax si +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1006792  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
lea eax [ebp+var_15C] +
push eax  +
push esi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_100BC40  +
test eax eax +
jz loc_100C170  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_100C5E9  +
movzx eax ax +
test ax ax +
jz loc_100C170  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1006792  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
mov esi [ebp+var_424] +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_100C427  +
cmp ax si +
jmp loc_100C3FF  +
call ds:GetSystemDefaultUILanguage  +
movzx eax ax +
mov [ebp+var_424] eax +
cmp ax word ptr [ebp+var_420] +
jz loc_100C245  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_100BC40  +
test eax eax +
jz loc_100C477  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
cmp word ptr [ebp+var_208] ax +
jz loc_100C245  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_100C427  +
jmp loc_100C31C  +
test al 3 +
jz loc_100C477  +
call sub_100BAC5  +
test byte ptr [ebp+arg_4] 8 +
movzx eax ax +
mov [ebp+var_424] eax +
jz loc_100C345  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_100BC40  +
test eax eax +
jz loc_100C477  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
cmp word ptr [ebp+var_208] ax +
jz loc_100C315  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_424] +
jz loc_100C427  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_100BC40  +
mov edx esi +
jmp loc_100C406  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1006792  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_424]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_100BC40  +
test eax eax +
jz loc_100C3F3  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_100C5E9  +
movzx eax ax +
test ax ax +
jz loc_100C3F3  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1006792  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
mov eax 409h +
cmp ax word ptr [ebp+var_424] +
jz loc_100C427  +
mov edx offset aMui0409 +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
xor edx edx +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jnz loc_100C4DF  +
jmp loc_100C4DB  +
test byte ptr dword_100E740 7 +
jz loc_100C477  +
test byte ptr [ebp+arg_4] 8 +
jz loc_100C4A2  +
lea eax [ebp+var_15C] +
push eax  +
push edi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_100BC40  +
test eax eax +
jnz loc_100C4BC  +
test byte ptr [ebp+arg_4] 10h +
jz loc_100C4EF  +
push dword ptr [ebp+wLanguage]  +
push [ebp+hModule]  +
call sub_100B7E8  +
test eax eax +
jnz loc_100C4EF  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
xor eax eax +
jmp loc_100C56D  +
movzx eax di +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1006792  +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_B0] +
call sub_100BD7C  +
mov ebx eax +
test ebx ebx +
jz loc_100C477  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
mov eax ebx +
jmp loc_100C56D  +
test byte ptr [ebp+hModule] 1 +
jz loc_100C567  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
call sub_100B91D  +
test al 38h +
jz loc_100C544  +
push [ebp+FilePart]  +
lea eax [ebp+LibFileName] +
push dword ptr [ebp+var_41C]  +
push offset aSS_0  +
push 104h  +
push eax  +
call sub_1006792  +
add esp 14h +
push 0  +
push 1  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_100B890  +
jmp loc_100C561  +
call sub_100B91D  +
push 0  +
and eax 26h +
pop eax  +
setnz al  +
push eax  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
mov eax [ebp+hModule] +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10091BD  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
movzx eax word ptr [eax] +
movzx ecx word ptr [ecx] +
cmp cx ax +
jnz loc_100C59D  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
and eax 2 +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 68h +
jnz loc_100C5DE  +
cmp word ptr [eax] 7Fh +
jz loc_100C5DE  +
xor eax eax +
inc eax  +
jmp loc_100C5E0  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100C63E  +
test [ebp+arg_4] 0FFFFFFFDh +
jnz loc_100C63E  +
push offset sub_100C5AA  +
push 8  +
push 163h  +
push offset off_10044B8  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
test eax eax +
jz loc_100C63E  +
mov ecx [eax+4] +
imul ecx ecx +
add ecx offset dword_1003408 +
test byte ptr [ebp+arg_4] 2 +
jnz loc_100C639  +
push ecx  +
call sub_100C5C5  +
test eax eax +
jnz loc_100C63E  +
mov ax [ecx] +
jmp loc_100C648  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov edx 80070057h +
test ecx ecx +
jz loc_100C66C  +
cmp ecx 7FFFFFFFh +
jbe loc_100C66E  +
mov eax edx +
test eax eax +
jl loc_100C6CB  +
push edi  +
mov edi [ebp+arg_C] +
cmp edi 7FFFFFFEh +
jbe loc_100C68A  +
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_100C6CA  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_100C6BA  +
mov edx [ebp+arg_8] +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100C6B6  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_100C6B6  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_100C69E  +
test esi esi +
jnz loc_100C6C1  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
push edi  +
jl loc_100C765  +
cmp [ebp+arg_4] 0 +
jnz loc_100C6F1  +
cmp [ebp+arg_8] 0 +
jnz loc_100C765  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_100C765  +
push offset sub_100C583  +
push 0Ch  +
push 164h  +
lea eax [ebp+arg_0] +
push offset dword_1003408  +
push eax  +
call bsearch  +
mov ecx eax +
add esp 14h +
test ecx ecx +
jz loc_100C765  +
test byte ptr [ebp+arg_C] 2 +
jnz loc_100C72D  +
push ecx  +
call sub_100C5C5  +
test eax eax +
jnz loc_100C765  +
mov edi [ecx+4] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C735  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_4] 0 +
lea esi [eax+1] +
jz loc_100C761  +
push esi  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100C651  +
test eax eax +
jge loc_100C761  +
push 7Ah  +
jmp loc_100C767  +
mov eax esi +
jmp loc_100C76F  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_100C828  +
cmp [ebp+arg_8] edi +
jle loc_100C79D  +
cmp [ebp+arg_4] edi +
jz loc_100C828  +
cmp [ebp+arg_8] edi +
jl loc_100C828  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_100C828  +
push offset sub_100C5AA  +
push 8  +
push 163h  +
push offset off_10044B8  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
cmp eax edi +
jz loc_100C828  +
mov ecx [eax+4] +
imul ecx ecx +
mov edx offset dword_1003408 +
add ecx edx +
test byte ptr [ebp+arg_C] 2 +
jnz loc_100C7E9  +
push ecx  +
call sub_100C5C5  +
test eax eax +
jnz loc_100C828  +
mov eax [ecx+8] +
imul eax eax +
add eax edx +
mov eax [eax+4] +
mov ecx eax +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
cmp si di +
jnz loc_100C7F9  +
sub ecx edx +
sar ecx 1 +
lea esi [ecx+1] +
cmp [ebp+arg_4] edi +
jz loc_100C824  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100C651  +
test eax eax +
jge loc_100C824  +
push 7Ah  +
jmp loc_100C82A  +
mov eax esi +
jmp loc_100C832  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
push offset unk_100E018  +
call sub_1009F26  +
retn   +
***
push offset unk_100E078  +
call sub_1009F26  +
retn   +
***
push offset unk_100E0D8  +
call sub_1009F26  +
retn   +
***
push offset unk_100E138  +
call sub_1009F26  +
mov dword_100E148 60h +
retn   +
***
push offset unk_100E198  +
call sub_1009F26  +
retn   +
***
push offset unk_100E1F8  +
call sub_1009F26  +
mov dword_100E208 60h +
retn   +
***
push offset unk_100E258  +
call sub_1009F26  +
mov dword_100E268 60h +
retn   +
***
push offset unk_100E2B8  +
call sub_1009F26  +
retn   +
***
retf 0D5h  +
***
add gs:[eax] al +
retf   +
***
retf   +
***
jmp near ptr 756F206Fh  +
***
