mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+var_20] 1 +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_2] bl +
mov [ebp+var_1] bl +
mov [ebp+hObject] ebx +
mov eax off_101F0C0 +
mov esi offset off_101F0C0 +
cmp eax esi +
jz loc_10014DC  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100759C  +
mov eax [ebp+hInstance] +
mov [edi+8] eax +
mov [edi+4] eax +
mov ecx edi +
mov [ebp+Msg.wParam] 1 +
mov dword_101F0F8 edi +
call sub_1004EF5  +
mov ecx edi +
call sub_1004E96  +
test al al +
jnz loc_10075B3  +
push 2  +
push ebx  +
call CoInitializeEx  +
cmp eax ebx +
jnz loc_10075F7  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_100152C  +
test byte ptr [eax+1Ch] 4 +
jnz loc_10075EE  +
mov [ebp+var_1] 1 +
push 66h  +
call sub_100198C  +
mov esi ds:LoadIconW +
push eax  +
call esi  +
mov [edi+400h] eax +
cmp eax ebx +
jz loc_1007666  +
push ebx  +
push 32h  +
call ds:GetSystemMetrics  +
push eax  +
push 31h  +
call ds:GetSystemMetrics  +
push eax  +
push 1  +
push 66h  +
call sub_100198C  +
push eax  +
call ds:LoadImageW  +
mov [edi+404h] eax +
cmp eax ebx +
jz loc_1007679  +
push 67h  +
call sub_100198C  +
push eax  +
call esi  +
mov [edi+408h] eax +
cmp eax ebx +
jz loc_100768C  +
push dword ptr [edi+408h]  +
mov ecx offset unk_101F238 +
call sub_1003E57  +
push ebx  +
push [ebp+hInstance]  +
mov ecx offset dword_101F128 +
push ebx  +
call sub_10042DD  +
call sub_100198C  +
push eax  +
push offset Target  +
call ds:InterlockedExchange  +
push ebx  +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
call GdiplusStartup  +
call sub_10043F0  +
push [ebp+wParam]  +
mov ecx edi +
push [ebp+hInstance]  +
mov [edi+410h] eax +
call sub_1004022  +
test eax eax +
jz loc_1005A49  +
push offset Name  +
push ebx  +
push ebx  +
push ebx  +
call ds:CreateEventW  +
mov esi ds:PeekMessageW +
mov [ebp+hObject] eax +
mov [ebp+var_2] 1 +
mov [ebp+pHandles] eax +
mov [ebp+Msg.message] ebx +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
push 1  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jnz loc_1001731  +
push ebx  +
push 4FFh  +
push 0FFFFFFFFh  +
lea eax [ebp+pHandles] +
push eax  +
push 1  +
call ds:MsgWaitForMultipleObjectsEx  +
cmp eax 1 +
jz loc_1001620  +
jmp loc_10076D0  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax off_101F0C0 +
mov ebx offset off_101F0C0 +
cmp eax ebx +
jz loc_10016A3  +
test byte ptr [eax+1Ch] 4 +
jnz loc_10072D8  +
mov edi [ebp+arg_4] +
xor edx edx +
mov ecx 4FFh +
mov [ebp-4] edx +
cmp edi ecx +
ja loc_10019FA  +
jz loc_1003CCA  +
mov ecx edi +
dec ecx  +
jz loc_1004070  +
dec ecx  +
jz loc_1007334  +
sub ecx 0Eh +
jz loc_100730B  +
sub ecx 103h +
jz loc_1001776  +
cmp edi [esi+3C8h] +
jz loc_10073AD  +
cmp eax ebx +
jz loc_10016FD  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100745B  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push edi  +
push [ebp+hInstance]  +
call ds:DefWindowProcW  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_101F0F8 +
pop ebp  +
jmp loc_1001680  +
cmp [ebp+Msg.message] 12h +
jz loc_1005A33  +
cmp [ebp+Msg.message] 10h +
jz loc_100769F  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
jmp loc_1001620  +
***
mov eax off_101F0C0 +
cmp eax ebx +
jz loc_1001771  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1007578  +
mov eax [ebp-4] +
jmp loc_100170D  +
cmp eax ebx +
jz loc_1001784  +
test byte ptr [eax+1Ch] 4 +
jnz loc_10072F4  +
push [ebp+wParam]  +
mov ecx esi +
call sub_1001798  +
mov [ebp-4] eax +
jmp loc_100175E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax off_101F0C0 +
mov edi offset off_101F0C0 +
cmp eax edi +
jz loc_10017BB  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1006761  +
mov ecx [ebp+arg_0] +
xor ebx ebx +
dec ecx  +
mov [ebp+var_4] ebx +
jnz loc_100181C  +
cmp [esi+3E6h] bl +
jnz loc_100677D  +
cmp [esi+3ECh] ebx +
jnz loc_100679D  +
jmp loc_10067F5  +
push dword ptr [ecx+24h]  +
call ds:SetEvent  +
push dword ptr [esi+3F4h]  +
call ds:EnterCriticalSection  +
mov eax [esi+3F4h] +
cmp [eax+1Ch] ebx +
jnz loc_10067AD  +
push eax  +
call ds:LeaveCriticalSection  +
cmp [ebp+var_4] ebx +
jl loc_10067B9  +
mov eax off_101F0C0 +
cmp eax edi +
pop edi  +
pop esi  +
pop ebx  +
jz loc_100182D  +
test byte ptr [eax+1Ch] 4 +
jnz loc_10067DB  +
mov eax [ebp+var_4] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1005F37  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov ecx [ebp+arg_0] +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
lea eax [ecx+0Ch] +
or edx 0FFFFFFFFh +
xadd [eax] edx +
dec edx  +
test edx edx +
jle loc_100262C  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
ja loc_100351E  +
mov ecx [esi+0Ch] +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
cmp ecx edi +
jnz loc_1003052  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+8] 0 +
mov ecx esi +
jnz loc_10030BF  +
call sub_10018E9  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101F0C4 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx dword_101F0F8 +
retn   +
***
cmp ecx dword_101F0C4 +
jnz loc_101A93C  +
retn   +
***
cmp dword ptr [esi+3E8h] 0 +
jz loc_1001763  +
push edi  +
mov ecx esi +
call sub_1002435  +
lea eax [esi+3E8h] +
cmp dword ptr [eax] 0 +
jnz loc_10074CF  +
jmp loc_100175E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:__imp_free  +
***
mov ecx edi +
sub ecx 0DC4h +
jz loc_1007517  +
dec ecx  +
dec ecx  +
jz loc_10074DA  +
dec ecx  +
jnz loc_10016E3  +
cmp eax ebx +
jz loc_10040AC  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1007472  +
jmp loc_10040AC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1001A59  +
test [ebp+arg_0] 1 +
jz loc_1001A4D  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea edi [esi+24h] +
push edi  +
call sub_1001915  +
lea eax [esi+40h] +
cmp dword ptr [eax] 0 +
mov byte ptr [esi+3Ch] 0 +
jz loc_1001A89  +
push eax  +
call sub_1002F76  +
mov ecx edi +
call sub_10018E9  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_1001ABA  +
cmp eax 0FFFFFFFFh +
ja loc_1001ABA  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_1001AB6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1005F20  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1001AD9  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_1005F22  +
mov edx [ecx] +
cmp eax [edx-8] +
jg loc_1005F22  +
mov [edx-0Ch] eax +
mov ecx [ecx] +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
lea ecx [edx+eax] +
lea esi [ecx-1] +
cmp esi edx +
pop esi  +
jl loc_100797A  +
dec eax  +
not eax  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ecx ecx +
sub eax 10h +
inc ecx  +
sub ecx [eax+0Ch] +
mov eax [eax+8] +
sub eax [ebp+arg_0] +
or ecx eax +
jge loc_1001B92  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1001B9E  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov edx [eax-0Ch] +
sub eax 10h +
push esi  +
mov esi [ebp+arg_0] +
cmp edx esi +
jg loc_100602B  +
cmp dword ptr [eax+0Ch] 1 +
jle loc_1002C7E  +
push esi  +
call sub_1001BD1  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ecx] +
mov ebx [esi-0Ch] +
sub esi 10h +
mov [ebp+var_8] ecx +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
mov [ebp+var_4] ebx +
call dword ptr [eax+10h]  +
mov edx [eax] +
push 2  +
push [ebp+arg_0]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jz loc_1005F6A  +
mov eax [ebp+arg_0] +
cmp ebx eax +
jge loc_1001C0E  +
mov eax ebx +
inc eax  +
push eax  +
lea ecx [esi+10h] +
push ecx  +
push eax  +
lea ebx [edi+10h] +
push ebx  +
call sub_1001C3F  +
mov eax [ebp+var_4] +
add esp 10h +
mov ecx esi +
mov [edi+4] eax +
call sub_10018D0  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_1001B41  +
push dword ptr [ebp+0Ch]  +
mov edi eax +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_1001A9B  +
test eax eax +
jl loc_1001CD4  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push 10h  +
push eax  +
call sub_1001CDD  +
test eax eax +
jl loc_1001CD4  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_1001CD4  +
dec edi  +
and dword ptr [eax+4] 0 +
mov [eax] esi +
mov dword ptr [eax+0Ch] 1 +
mov [eax+8] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
xor eax eax +
jmp loc_1001CCE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ecx +
jb loc_1005F2D  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
dec eax  +
jz loc_1003AB5  +
dec eax  +
jnz loc_1003EE4  +
push offset aProbation  +
mov ecx [ebp+arg_4] +
call sub_1001D49  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1001AC6  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1001D6F  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
mov ebx ecx +
jz loc_100644C  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1006456  +
mov eax [ebx] +
push edi  +
push [ebp+arg_4]  +
mov edi [eax-0Ch] +
sub esi eax +
sar esi 1 +
call sub_1001B6B  +
cmp esi edi +
pop edi  +
push [ebp+arg_4]  +
jbe loc_1006460  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push eax  +
call sub_1001C3F  +
add esp 10h +
push [ebp+arg_4]  +
mov ecx ebx +
call sub_1001AEE  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+24h] +
push 0Ah  +
mov ecx edi +
call sub_10018A1  +
xor eax eax +
mov ecx edi +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov [esi+14h] eax +
mov [esi+18h] eax +
mov [esi+40h] eax +
mov [esi+1Ch] al +
mov dword ptr [esi+20h] 0Ah +
mov [esi+3Ch] al +
call sub_10018E9  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:malloc +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
test eax eax +
jz loc_10079B4  +
pop esi  +
leave   +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101F0C4 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
call sub_1001939  +
mov eax off_101F0C0 +
mov esi offset off_101F0C0 +
cmp eax esi +
jz loc_1001ECA  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1006845  +
mov edi offset sub_1004108 +
mov ebx [ebp+8] +
mov eax [ebx+24h] +
and dword ptr [ebp-10h] 0 +
push 0  +
mov [ebp-18h] eax +
call CoInitialize  +
mov edx eax +
mov [ebp+8] edx +
test edx edx +
jnz loc_1006862  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1001F04  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100685D  +
mov dword ptr [ebp-10h] 1 +
mov edi ds:LeaveCriticalSection +
and dword ptr [ebp-14h] 0 +
push 2710h  +
push dword ptr [ebp-18h]  +
call ds:WaitForSingleObject  +
test eax eax +
jnz loc_10068C9  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1001F3E  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1006928  +
push 44h  +
call sub_1001E13  +
pop ecx  +
mov [ebp+8] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_1001FD7  +
mov ecx eax +
call sub_1001DCF  +
mov [ebp+8] eax +
mov eax [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-14h] eax +
test eax eax +
jz loc_10069D4  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1001F84  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100693F  +
mov ecx [ebp+8] +
call sub_1001FE2  +
push ebx  +
call ds:EnterCriticalSection  +
cmp dword ptr [ebx+18h] 0 +
jnz loc_1006990  +
push 0  +
push dword ptr [ebp+8]  +
push 0DC7h  +
push dword ptr [ebx+20h]  +
call ds:PostMessageW  +
push ebx  +
test eax eax +
jz loc_10069AB  +
call edi  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1001F11  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001F11  +
jmp loc_1006956  +
and dword ptr [ebp+8] 0 +
jmp loc_1001F5F  +
***
call sub_1001E69  +
xor esi esi +
mov [ebp-30h] ecx +
mov [ebp-68h] esi +
mov [ebp-50h] esi +
mov [ebp-40h] esi +
mov [ebp-3Ch] esi +
mov [ebp-54h] esi +
mov eax off_101F0C0 +
mov edi offset off_101F0C0 +
mov ebx offset dword_1001E34 +
cmp eax edi +
jz loc_100201F  +
test byte ptr [eax+1Ch] 4 +
jnz sub_1006186  +
mov eax [ebp-30h] +
mov byte ptr [eax+1Ch] 0 +
lea eax [ebp-50h] +
push eax  +
push offset riid  +
push 1  +
push esi  +
push offset rclsid  +
call CoCreateInstance  +
cmp eax esi +
mov [ebp-24h] eax +
jl loc_1003BEB  +
cmp [ebp-50h] esi +
jz loc_1003BEB  +
lea eax [ebp-40h] +
push eax  +
push offset stru_1002410  +
push 4  +
push esi  +
push offset stru_1002420  +
call CoCreateInstance  +
cmp eax esi +
mov [ebp-24h] eax +
jl loc_1003BD9  +
cmp [ebp-40h] esi +
jz loc_1003BD9  +
mov eax [ebp-50h] +
lea edx [ebp-68h] +
push edx  +
lea edx [ebp-38h] +
push edx  +
mov [ebp-38h] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax esi +
mov [ebp-24h] eax +
jl loc_1003BC7  +
mov eax [ebp-38h] +
cmp eax esi +
jz loc_1003BC7  +
mov edx [eax+4] +
mov ecx [ebp-30h] +
mov [ecx] edx +
mov eax [eax+8] +
mov [ecx+4] eax +
push offset dword_101F10C  +
lea ecx [ebp-44h] +
call sub_1001865  +
lea eax [ebp-44h] +
push eax  +
mov eax [ebp-38h] +
push dword ptr [eax]  +
mov [ebp-4] esi +
call sub_1001D07  +
mov eax [ebp-38h] +
cmp [eax+10h] esi +
jz loc_1003AE0  +
cmp [eax+0Ch] si +
jz loc_1003AE0  +
mov ecx off_101F0C0 +
cmp ecx edi +
jz loc_10020FC  +
test byte ptr [ecx+1Ch] 4 +
jnz loc_1006199  +
mov edi [ebp-30h] +
add edi 40h +
cmp [edi] esi +
jnz loc_10061CC  +
mov ecx [ebp-30h] +
mov [edi] eax +
lea eax [ecx+24h] +
push eax  +
mov [ebp-38h] esi +
call sub_1001915  +
mov eax [ebp-30h] +
lea edx [ebp-48h] +
push edx  +
mov byte ptr [eax+3Ch] 0 +
mov eax [ebp-40h] +
lea edx [ebp-3Ch] +
push edx  +
mov [ebp-28h] esi +
mov [ebp-48h] esi +
mov [ebp-2Ch] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp eax esi +
jl loc_1003B7B  +
cmp [ebp-48h] esi +
jz loc_1003B7B  +
mov eax off_101F0C0 +
mov edi offset off_101F0C0 +
cmp eax edi +
jz loc_1002165  +
test byte ptr [eax+1Ch] 4 +
jnz loc_10061DA  +
movzx eax word ptr [ebp-3Ch] +
shl eax 2 +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-54h] eax +
cmp eax esi +
jz loc_10061F2  +
mov eax [ebp-50h] +
mov ecx [eax] +
lea edx [ebp-2Ch] +
push edx  +
lea edx [ebp-28h] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
cmp eax esi +
mov [ebp-24h] eax +
jl loc_1003BB5  +
cmp [ebp-2Ch] esi +
jz loc_1003BB5  +
xor eax eax +
cmp ax [ebp-28h] +
jnb loc_1003BB5  +
mov eax off_101F0C0 +
cmp eax edi +
jz loc_10021CB  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1006223  +
mov eax [ebp-40h] +
lea edx [ebp-5Ch] +
push edx  +
lea edx [ebp-60h] +
push edx  +
mov [ebp-60h] esi +
mov [ebp-5Ch] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax esi +
mov [ebp-24h] eax +
jl loc_1003BA3  +
xor eax eax +
mov [ebp-20h] esi +
lea edi [ebp-1Ch] +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp-58h] esi +
mov [ebp-64h] esi +
cmp ax [ebp-28h] +
jnb loc_1002345  +
mov [ebp-4Ch] esi +
mov esi off_101F0C0 +
push dword ptr [ebp-5Ch]  +
mov eax [ebp-2Ch] +
mov ecx [ebp-4Ch] +
push dword ptr [ebp-60h]  +
lea edi [ecx+eax] +
mov eax [edi] +
push eax  +
mov [ebp-34h] eax +
call sub_1003483  +
test al al +
jz loc_10062C0  +
movzx ecx word ptr [ebp-3Ch] +
xor eax eax +
test ecx ecx +
jbe loc_1006244  +
mov edx [ebp-48h] +
mov edx [edx+eax*4] +
cmp edx [ebp-34h] +
jnz loc_100623B  +
mov ecx [ebp-54h] +
mov dword ptr [ecx+eax*4] 1 +
mov eax [ebp-2Ch] +
mov ecx [ebp-4Ch] +
lea esi [ecx+eax+24h] +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
push 58h  +
movs   +
call sub_1001E13  +
pop ecx  +
mov ecx eax +
mov [ebp-34h] ecx +
mov edi [ebp-4Ch] +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_1003B9C  +
lea eax [ebp-20h] +
push eax  +
mov eax [ebp-2Ch] +
push dword ptr [edi+eax]  +
call sub_1003847  +
mov esi eax +
mov byte ptr [ebp-4] 0 +
mov [ebp-34h] esi +
test esi esi +
jz loc_1006320  +
mov ecx [ebp-30h] +
lea eax [ebp-34h] +
push eax  +
add ecx 24h +
call sub_1003614  +
mov eax [ebp-40h] +
mov ecx [eax] +
lea edx [ebp-58h] +
push edx  +
mov edx [ebp-2Ch] +
push dword ptr [edi+edx]  +
push eax  +
call dword ptr [ecx+18h]  +
mov [ebp-24h] eax +
test eax eax +
jl loc_100628A  +
mov ecx [ebp-58h] +
test ecx ecx +
jz loc_1002315  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_10022F3  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1006265  +
add ecx 10h +
push ecx  +
mov ecx esi +
call sub_10038EE  +
mov eax [ebp-58h] +
add eax 4 +
push eax  +
mov ecx esi +
call sub_10036C0  +
lea eax [ebp-58h] +
push eax  +
call sub_10039B1  +
mov esi off_101F0C0 +
cmp word ptr [ebp-28h] 0 +
jz loc_100232F  +
mov eax [ebp-30h] +
mov byte ptr [eax+1Ch] 1 +
mov esi off_101F0C0 +
movzx eax word ptr [ebp-28h] +
inc dword ptr [ebp-64h]  +
add dword ptr [ebp-4Ch] 50h +
cmp [ebp-64h] eax +
jb loc_1002213  +
xor esi esi +
push dword ptr [ebp-5Ch]  +
call CoTaskMemFree  +
mov [ebp-5Ch] esi +
mov [ebp-60h] esi +
xor eax eax +
xor edi edi +
cmp ax [ebp-3Ch] +
jnb loc_1002373  +
mov eax [ebp-54h] +
cmp [eax+edi*4] esi +
jz loc_1006387  +
movzx eax word ptr [ebp-3Ch] +
inc edi  +
cmp edi eax +
jb loc_100235E  +
lea eax [ebp-2Ch] +
push eax  +
movzx eax word ptr [ebp-28h] +
push eax  +
call sub_1003575  +
mov [ebp-2Ch] esi +
mov [ebp-28h] esi +
cmp [ebp-48h] esi +
jz loc_1002395  +
lea eax [ebp-48h] +
push eax  +
call sub_1002F25  +
mov ecx [ebp-44h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov edi [ebp-30h] +
mov ecx edi +
call loc_1002CF1  +
push dword ptr [ebp-24h]  +
push edi  +
call sub_1002DC9  +
mov [edi+20h] eax +
mov eax [ebp-50h] +
cmp eax esi +
jz loc_10023CA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-50h] esi +
mov eax [ebp-40h] +
cmp eax esi +
jz loc_10023DA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-40h] esi +
cmp [ebp-54h] esi +
jz loc_10023F0  +
push dword ptr [ebp-54h]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1002406  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1006433  +
mov eax [ebp-24h] +
call sub_1002F11  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax off_101F0C0 +
mov ebx offset off_101F0C0 +
cmp eax ebx +
jz loc_1002457  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100672E  +
mov edi [ebp+wParam] +
test edi edi +
jz loc_1002483  +
push edi  +
mov ecx esi +
call sub_1002B83  +
add esi 3E0h +
mov ecx [esi] +
test ecx ecx +
jz loc_100247C  +
push 1  +
call sub_1001A33  +
and dword ptr [esi] 0 +
mov [esi] edi +
mov eax off_101F0C0 +
pop edi  +
pop esi  +
cmp eax ebx +
pop ebx  +
jz loc_1002494  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100674A  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov esi ecx +
mov ebx [ebp+8] +
test ebx ebx +
jz loc_1007206  +
push offset dword_101F10C  +
lea ecx [ebp-18h] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
push offset aNull  +
lea ecx [ebp-1Ch] +
call sub_1002AAB  +
lea eax [ebp-18h] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_1002A98  +
push eax  +
call sub_1001D07  +
lea eax [ebp-28h] +
push eax  +
mov ecx ebx +
call sub_10028C7  +
mov ecx [eax] +
mov edi [ebp+0Ch] +
mov [esi+414h] ecx +
mov eax [eax+4] +
mov [esi+418h] eax +
test edi edi +
jz loc_1004342  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx edi +
call sub_1002A98  +
push eax  +
call sub_1001D07  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1002537  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100720D  +
push edi  +
push ebx  +
mov ecx esi +
call sub_1002955  +
and dword ptr [ebp+0Ch] 0 +
mov [ebp+8] eax +
test edi edi +
jz loc_1002555  +
mov ecx edi +
call sub_1002B7A  +
mov [ebp+0Ch] eax +
push dword ptr [ebp+8]  +
mov ecx esi +
push edi  +
push ebx  +
call sub_1002A1B  +
push edi  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
mov [ebp-14h] eax +
call sub_10028E2  +
push dword ptr [ebp+8]  +
mov ecx esi +
push edi  +
push ebx  +
mov [ebp-20h] eax +
call sub_1002B29  +
mov [ebp-24h] eax +
lea eax [esi+3DCh] +
mov cl [eax] +
mov [ebp-0Dh] cl +
mov byte ptr [eax] 0 +
test edi edi +
jz loc_1004361  +
cmp dword ptr [esi+3D0h] 3 +
mov byte ptr [ebp+0Fh] 0 +
jz loc_1003C12  +
mov byte ptr [ebp+0Bh] 0 +
mov ecx ebx +
call sub_1002B7A  +
cmp eax 0Ah +
jz loc_1003FDB  +
cmp eax 0Bh +
jz loc_1003FDB  +
cmp byte ptr [ebp+0Bh] 0 +
jnz loc_1003C25  +
and dword ptr [esi+3D8h] 0 +
cmp byte ptr [ebp+0Bh] 0 +
jnz loc_1003C5C  +
cmp byte ptr [ebp+0Fh] 0 +
jnz loc_1003C69  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_10029DA  +
push dword ptr [ebp-20h]  +
mov ecx esi +
call sub_1002790  +
push dword ptr [ebp-24h]  +
mov ecx esi +
call sub_10027BD  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov al 1 +
call __EH_epilog3  +
retn 8  +
***
mov eax [ecx] +
mov edx [eax] +
push ecx  +
mov ecx eax +
call dword ptr [edx+4]  +
jmp locret_10018E3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_1002659  +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4]  +
***
mov edx [ebp+8] +
xor eax eax +
cmp edx eax +
jz loc_10027AB  +
dec edx  +
mov ecx 61A8h +
mov [ebp+8] eax +
jz loc_1006F45  +
dec edx  +
jz loc_1006F34  +
dec edx  +
jz loc_1006F23  +
dec edx  +
jz loc_1003F60  +
dec edx  +
jnz loc_1006EF7  +
mov eax 3AC5h +
mov dword ptr [ebp+8] 3ACBh +
mov [esi+32Ch] ecx +
push 40h  +
lea ecx [esi+330h] +
push ecx  +
push eax  +
mov dword ptr [esi+3B0h] 24h +
mov dword ptr [esi+18h] 12h +
call sub_100198C  +
mov edi ds:LoadStringW +
push eax  +
call edi  +
mov ebx 100h +
push ebx  +
lea eax [esi+12Ch] +
push eax  +
push dword ptr [ebp+8]  +
call sub_100198C  +
push eax  +
call edi  +
cmp dword ptr [ebp+8] 3ACBh +
jnz loc_1003F76  +
mov edi offset dword_101F10C +
push edi  +
lea ecx [ebp-10h] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
push edi  +
lea ecx [ebp+8] +
call sub_1001865  +
lea eax [ebp+8] +
push eax  +
lea eax [esi+414h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_100323D  +
push dword ptr [ebp+8]  +
lea edi [esi+12Ch] +
lea eax [ebp-10h] +
push edi  +
push eax  +
call sub_10031AA  +
add esp 0Ch +
lea ecx [ebp-10h] +
call sub_1003A2D  +
push eax  +
push ebx  +
push edi  +
call wcscpy_s  +
mov ecx [ebp+8] +
add esp 0Ch +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
lea eax [esi+0Ch] +
push eax  +
push 1  +
call Shell_NotifyIconW  +
mov byte ptr [esi+3D5h] 1 +
jmp loc_10027AB  +
***
call sub_1001939  +
mov esi ecx +
cmp byte ptr [esi+3E6h] 0 +
jz loc_1006EE5  +
call __EH_epilog3  +
retn 4  +
***
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov edi ecx +
cmp byte ptr [edi+3E6h] 0 +
jz loc_1006F56  +
call __EH_epilog3  +
retn 4  +
***
mov eax [ebp+8] +
test eax eax +
jz loc_10027D8  +
xor esi esi +
dec eax  +
jz loc_1003B71  +
dec eax  +
jz loc_1003B67  +
dec eax  +
jz loc_1003B5D  +
dec eax  +
jz loc_1003B42  +
dec eax  +
jnz loc_1006F68  +
mov esi 3AD1h +
mov ebx 80h +
push ebx  +
lea eax [edi+24h] +
push eax  +
push esi  +
mov dword ptr [edi+18h] 4 +
call sub_100198C  +
push eax  +
call ds:LoadStringW  +
cmp esi 3AD1h +
jnz loc_1003B4C  +
mov esi offset dword_101F10C +
push esi  +
lea ecx [ebp-10h] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp+8] +
call sub_1001865  +
lea eax [ebp+8] +
push eax  +
lea eax [edi+414h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_100323D  +
push dword ptr [ebp+8]  +
lea esi [edi+24h] +
lea eax [ebp-10h] +
push esi  +
push eax  +
call sub_10031AA  +
add esp 0Ch +
lea ecx [ebp-10h] +
call sub_1003A2D  +
push eax  +
push ebx  +
push esi  +
call wcscpy_s  +
mov ecx [ebp+8] +
add esp 0Ch +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
add edi 0Ch +
push edi  +
push 1  +
call Shell_NotifyIconW  +
jmp loc_10027D8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx] +
mov eax [ebp+arg_0] +
mov ecx [ecx+4] +
mov [eax] edx +
mov [eax+4] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
lea eax [ebx-1] +
push esi  +
push edi  +
mov [ebp+var_8] ecx +
mov [ebp+var_1] 0 +
cmp eax 8 +
ja loc_100429D  +
jmp ds:off_1002EE8[eax*4]  +
push 5  +
pop esi  +
mov edi [ebp+var_8] +
mov ecx [edi+3FCh] +
cmp esi ecx +
jnz loc_1003E83  +
xor esi esi +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1002935  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1002ECF  +
test esi esi +
jnz loc_1003E9C  +
cmp [ebp+var_1] 0 +
jnz loc_1003E9C  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_100658E  +
push ebx  +
push edi  +
mov ecx esi +
xor ebx ebx +
call sub_1002A98  +
mov ecx esi +
mov edi eax +
call sub_1002B7A  +
cmp eax 0Ah +
jz loc_10042BB  +
cmp eax 0Bh +
jz loc_10042BB  +
cmp edi 3 +
jz loc_10065B9  +
cmp edi 1 +
jz loc_1003B3B  +
cmp edi 2 +
jnz loc_1006689  +
push 1  +
mov ecx esi +
call sub_1003819  +
test eax eax +
ja loc_1006627  +
push 2  +
mov ecx esi +
call sub_1003819  +
test eax eax +
jbe loc_100662E  +
push 5  +
pop ebx  +
mov eax ebx +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp byte ptr [esi+3E6h] 0 +
jz sub_1006B4E  +
jmp loc_1006B41  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_1002A12  +
test [ebp+arg_0] 0FFFF0000h +
jz loc_1006ED4  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
xor edi edi +
cmp ecx edi +
jz loc_1006B87  +
push ebx  +
call sub_1002A98  +
mov ebx eax +
cmp [ebp+arg_4] edi +
jz loc_100431A  +
mov ecx [ebp+arg_4] +
call sub_1002A98  +
cmp ebx eax +
jnz loc_1003EA7  +
mov eax [esi+3D0h] +
cmp eax 4 +
jz loc_1003EA7  +
push 4  +
pop edi  +
cmp ebx 2 +
jnz loc_1003C04  +
cmp [ebp+arg_8] 7 +
jz loc_1003E71  +
cmp [ebp+arg_8] 8 +
jz loc_1003E71  +
cmp eax 1 +
jnz loc_1003E69  +
mov eax edi +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax [ecx+40h] +
test eax eax +
jz loc_1003ECA  +
mov eax [eax] +
retn   +
***
call sub_1001939  +
mov esi ecx +
mov [ebp-10h] esi +
push offset dword_101F10C  +
call sub_1001865  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_10029F9  +
test al al +
jnz loc_1002AE2  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1002AF1  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002B0D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1001D49  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1006563  +
mov eax [ebp+arg_8] +
dec eax  +
push esi  +
jz loc_1003B2C  +
dec eax  +
jz loc_1003B25  +
dec eax  +
jz loc_1003B1E  +
dec eax  +
jz loc_1003B09  +
dec eax  +
jnz loc_1004286  +
push 5  +
pop esi  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_1002B6E  +
call sub_1002B7A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp [ebp+wParam] edi +
jz loc_1002BAA  +
push esi  +
push edi  +
push offset aQuarui_details  +
push edi  +
push edi  +
call ds:FindWindowExW  +
mov esi eax +
cmp esi edi +
jnz loc_100670A  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jz loc_100795F  +
cmp [ebp+0Ch] eax +
jz loc_100796B  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_1001B41  +
push dword ptr [ebp+10h]  +
mov edi eax +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1001A9B  +
test eax eax +
jl loc_1002C7A  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push 10h  +
push eax  +
call sub_1001CDD  +
test eax eax +
jl loc_1002C7A  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_1002C7A  +
dec edi  +
mov [eax+8] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
jmp loc_1002C74  +
***
mov eax [eax+8] +
cmp eax esi +
jge loc_1001BC7  +
mov edx eax +
mov eax 400h +
cmp edx eax +
jg loc_1006032  +
add edx edx +
cmp edx esi +
jl loc_1003BFD  +
push edx  +
call sub_1002CB2  +
jmp loc_1001BC7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp [eax+8] edx +
mov ecx [eax] +
jge loc_1002CE6  +
test edx edx +
jle loc_1002CE6  +
push edi  +
mov edi [ecx] +
push 2  +
push edx  +
push eax  +
call dword ptr [edi+8]  +
pop edi  +
test eax eax +
jz loc_1002CE6  +
add eax 10h +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
call sub_100B34B  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
xor ecx ecx +
mov [esi+8] ecx +
mov [esi+0Ch] ecx +
mov [esi+10h] ecx +
mov [esi+14h] ecx +
mov [esi+18h] ecx +
cmp [esi+2Ch] ecx +
jz loc_1002DC1  +
push ebx  +
lea ebx [esi+24h] +
mov eax [ebx] +
push edi  +
mov [ebp+var_4] eax +
cmp eax ecx +
jz loc_1002D6A  +
lea eax [ebp+var_4] +
push eax  +
mov ecx ebx +
call sub_10035D6  +
mov edi [eax] +
test edi edi +
jz loc_1002D64  +
mov ecx edi +
call sub_1003508  +
test al al +
jnz loc_1005F74  +
mov ecx edi +
call sub_1003510  +
test eax eax +
jz loc_1005F7C  +
mov ecx edi +
call sub_1003510  +
cmp eax 2 +
jnz loc_1005F84  +
inc dword ptr [esi+14h]  +
cmp [ebp+var_4] 0 +
jnz loc_1002D22  +
mov eax off_101F0C0 +
mov ebx offset off_101F0C0 +
cmp eax ebx +
jz loc_1002DBF  +
test byte ptr [eax+1Ch] 4 +
mov edi offset dword_1001E34 +
jnz loc_1005F9E  +
cmp eax ebx +
jz loc_1002DBF  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1005FB9  +
cmp eax ebx +
jz loc_1002DBF  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1005FD4  +
cmp eax ebx +
jz loc_1002DBF  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1005FEF  +
cmp eax ebx +
jz loc_1002DBF  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100600A  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
call sub_1001939  +
mov esi [ebp+8] +
push 0Ah  +
pop edi  +
mov [ebp-10h] edi +
test esi esi +
jz loc_1006039  +
cmp dword ptr [ebp+0Ch] 0 +
jl loc_1006064  +
mov ecx esi +
call sub_1002A98  +
push 3  +
pop edi  +
mov [ebp+8] eax +
mov ebx offset off_101F0C0 +
cmp eax edi +
jz loc_100608D  +
cmp eax 1 +
jz loc_1003AFD  +
cmp eax 2 +
jnz loc_1002E3F  +
push 1  +
mov ecx esi +
call sub_1003819  +
test eax eax +
ja loc_10060FC  +
push 2  +
call sub_1003819  +
test eax eax +
jbe loc_1006108  +
mov dword ptr [ebp-10h] 5 +
push offset dword_101F10C  +
lea ecx [ebp+0Ch] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1001D07  +
mov eax off_101F0C0 +
cmp eax ebx +
jz loc_1002E6F  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100615F  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov eax [ebp-10h] +
call __EH_epilog3  +
retn 8  +
***
xor esi esi +
inc esi  +
jmp loc_100290C  +
push 2  +
jmp loc_100290B  +
push 3  +
jmp loc_100290B  +
cmp [ebp+arg_C] 0 +
push 7  +
pop esi  +
jz loc_100290C  +
mov ecx [ebp+arg_8] +
call sub_1002A98  +
mov ecx [ebp+arg_C] +
mov edi eax +
call sub_1002A98  +
jmp loc_10042A4  +
push 6  +
jmp loc_100290B  +
mov [ebp+var_1] 1 +
jmp loc_100429D  +
push esi  +
push ecx  +
push offset sub_1004108  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B125  +
jmp loc_1002935  +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_10019B3  +
jmp __EH_epilog3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1002F42  +
mov eax [esi] +
test eax eax +
jz loc_1002F3F  +
push eax  +
call CoTaskMemFree  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push esi  +
mov esi [ebp+arg_0] +
mov [esi] ax +
mov eax [esi+4] +
test eax eax +
jz loc_1002F68  +
push eax  +
call CoTaskMemFree  +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_1002FC3  +
and [ebp+var_8] 0 +
push esi  +
mov esi [ebx] +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
mov [ebp+arg_0] esi +
test esi esi +
jz loc_1002FC1  +
lea eax [esi+0Ch] +
push eax  +
call sub_1002F4C  +
mov eax [ebp+var_8] +
mov [esi+4] eax +
mov eax [ebp+var_4] +
mov [esi+8] eax +
lea eax [ebp+arg_0] +
push eax  +
mov dword ptr [esi] 3 +
call sub_1002F25  +
and dword ptr [ebx] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push offset dword_101F10C  +
mov esi ecx +
call sub_1001865  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+4] +
test eax eax +
jz loc_1003000  +
push eax  +
call sub_10019EE  +
and dword ptr [esi+4] 0 +
pop ecx  +
xor eax eax +
mov [esi] ax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1006476  +
push esi  +
mov esi [edi] +
test esi esi +
jnz loc_100307B  +
xor al al +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+10h] +
mov eax [ebp+arg_0] +
mov [eax] edx +
dec dword ptr [ecx+8]  +
mov [ecx+10h] eax +
jnz loc_100304E  +
call sub_10018E9  +
pop ebp  +
retn 4  +
***
call sub_1003064  +
mov [esi+0Ch] edi +
jmp loc_100190D  +
***
test ecx ecx +
jz locret_100307A  +
push esi  +
mov esi [ecx] +
push ecx  +
call ds:__imp_free  +
pop ecx  +
mov ecx esi +
test esi esi +
jnz loc_1003069  +
pop esi  +
retn   +
***
lea eax [esi+8] +
push eax  +
call sub_1002FE5  +
push esi  +
call sub_10019EE  +
and dword ptr [edi] 0 +
pop ecx  +
mov al 1 +
jmp loc_1003029  +
***
mov edx [ecx] +
test edx edx +
jz loc_10077BE  +
mov eax [edx] +
push esi  +
mov esi [edx+8] +
mov [ecx] eax +
test eax eax +
jnz loc_10077C8  +
and dword ptr [ecx+4] 0 +
push edx  +
call sub_1003034  +
mov eax esi +
pop esi  +
retn   +
***
call sub_1003097  +
test eax eax +
jz loc_100191E  +
push 1  +
mov ecx eax +
call sub_10030DF  +
jmp loc_100191E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003105  +
test [ebp+arg_0] 1 +
jz loc_10030F9  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov esi ecx +
mov [ebp-10h] esi +
lea eax [esi+1Ch] +
push eax  +
mov dword ptr [ebp-4] 4 +
call sub_100300F  +
lea eax [esi+20h] +
push eax  +
mov ecx esi +
call sub_1002FE5  +
lea eax [esi+28h] +
push eax  +
mov ecx esi +
call sub_1003189  +
lea eax [esi+34h] +
push eax  +
mov ecx esi +
call sub_1003189  +
mov ecx [esi+50h] +
sub ecx 10h +
call sub_10018D0  +
mov ecx [esi+4Ch] +
sub ecx 10h +
call sub_10018D0  +
mov ecx [esi+48h] +
sub ecx 10h +
call sub_10018D0  +
mov ecx [esi+44h] +
sub ecx 10h +
call sub_10018D0  +
mov ecx [esi+40h] +
sub ecx 10h +
call sub_10018D0  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi+8] +
test ecx ecx +
jnz loc_1006488  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
call sub_1003A55  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push eax  +
push 3  +
call ds:MultiByteToWideChar  +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi] +
mov esi [eax-0Ch] +
lea ebx [esi+1] +
push ebx  +
call sub_1001B6B  +
mov cx [ebp+arg_0] +
mov [eax+esi*2] cx +
push ebx  +
mov ecx edi +
call sub_1001AEE  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:malloc +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
test eax eax +
jz loc_1007A04  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100338F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10033AB  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1001AC6  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10033D1  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
mov eax [ebx] +
push edi  +
mov edi [eax-0Ch] +
sub esi eax +
mov eax [ebp+arg_4] +
add eax edi +
push eax  +
sar esi 1 +
mov [ebp+var_4] eax +
call sub_1001B6B  +
cmp esi edi +
lea esi [eax+esi*2] +
jbe loc_1003400  +
mov esi [ebp+arg_0] +
push [ebp+arg_4]  +
lea eax [eax+edi*2] +
push esi  +
push [ebp+arg_4]  +
push eax  +
call sub_1001C3F  +
add esp 10h +
push [ebp+var_4]  +
mov ecx ebx +
call sub_1001AEE  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMultiByteStr] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_100345A  +
push [ebp+lpMultiByteStr]  +
call sub_10031C5  +
pop ecx  +
mov esi eax +
mov ecx edi +
test esi esi +
jg loc_1007752  +
call sub_1003463  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
xor esi esi +
jmp loc_1003443  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
sub ecx 10h +
xor eax eax +
push edi  +
mov edi [ecx] +
cmp [ecx+4] eax +
jnz loc_1005F42  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor ecx ecx +
xor eax eax +
push esi  +
cmp cx [ebp+arg_4] +
jnb loc_10034AC  +
mov edx [ebp+arg_8] +
mov esi [ebp+arg_0] +
movzx ecx ax +
cmp esi [edx+ecx*4] +
jnz loc_1005F10  +
mov al 1 +
pop esi  +
pop ebp  +
retn 0Ch  +
xor al al +
jmp loc_10034A7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+var_4] 0 +
push [ebp+arg_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_1001A9B  +
test eax eax +
jl loc_10034FF  +
push 4  +
push [ebp+var_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_1001CDD  +
test eax eax +
jl loc_10034FF  +
push [ebp+var_4]  +
call ds:malloc  +
pop ecx  +
test eax eax +
jz loc_10034FF  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov [eax] edx +
mov [ecx] eax +
leave   +
retn 0Ch  +
xor eax eax +
jmp locret_10034FB  +
***
retn   +
***
mov eax [ecx+1Ch] +
test eax eax +
jz loc_1006472  +
mov eax [eax] +
retn   +
***
mov eax [esi] +
cmp eax edi +
jz loc_100647D  +
mov ecx [eax] +
mov [esi] ecx +
push eax  +
mov ecx esi +
call sub_1003034  +
jmp loc_10018F1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100367C  +
mov eax [esi+10h] +
mov ecx [eax] +
test eax eax +
jz loc_100355A  +
mov edx [ebp+arg_0] +
mov [eax+8] edx +
mov [esi+10h] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax] ecx +
inc dword ptr [esi+8]  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_10035CC  +
push edi  +
mov edi [ebx] +
test edi edi +
jz loc_10035CB  +
mov eax [ebp+arg_0] +
test eax eax +
jbe loc_10035C1  +
push esi  +
lea esi [edi+0Ch] +
mov [ebp+arg_4] eax +
lea eax [esi-8] +
push eax  +
call sub_1002F4C  +
push esi  +
call sub_1002F4C  +
lea eax [esi+10h] +
push eax  +
call sub_1002F4C  +
lea eax [esi+8] +
push eax  +
call sub_1002F4C  +
add esi 50h +
dec [ebp+arg_4]  +
jnz loc_1003597  +
pop esi  +
push edi  +
call CoTaskMemFree  +
and dword ptr [ebx] 0 +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
test eax eax +
jz loc_10077A8  +
mov edx [eax] +
mov [ecx] edx +
add eax 8 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10077B3  +
add eax 8 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_1003643  +
mov ecx [esi+4] +
test ecx ecx +
jnz loc_100617F  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100367C  +
mov eax [esi+10h] +
mov ecx [eax] +
test eax eax +
jz loc_1003661  +
mov edx [ebp+arg_0] +
mov edx [edx] +
mov [eax+8] edx +
mov [esi+10h] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax] ecx +
inc dword ptr [esi+8]  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+10h] 0 +
jnz loc_10036B9  +
push 0Ch  +
push dword ptr [esi+14h]  +
lea eax [esi+0Ch] +
push eax  +
call sub_10034B5  +
test eax eax +
jz loc_1006020  +
mov ecx [esi+14h] +
mov edx ecx +
imul edx edx +
lea eax [edx+eax-8] +
dec ecx  +
js loc_10036B9  +
mov edx [esi+10h] +
mov [eax] edx +
mov [esi+10h] eax +
sub eax 0Ch +
jmp loc_10036A9  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
lea eax [ecx+20h] +
push eax  +
call sub_10036DA  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov edi [ebp+0Ch] +
test edi edi +
jz loc_10037AB  +
mov esi [ebp+8] +
push esi  +
call sub_1002FE5  +
movzx ebx word ptr [edi] +
test bx bx +
jz loc_10037AB  +
cmp dword ptr [edi+4] 0 +
jz loc_10037AB  +
push 0Ah  +
lea ecx [ebp-24h] +
call sub_10018A1  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp+0Ch] 0 +
xor eax eax +
cmp ax bx +
jnb loc_100374C  +
mov eax [edi+4] +
mov ecx [ebp+0Ch] +
mov ebx [eax+ecx*4] +
push 0  +
push ebx  +
lea ecx [ebp-24h] +
call sub_10037F2  +
test eax eax +
jz loc_10037B3  +
movzx eax word ptr [edi] +
inc dword ptr [ebp+0Ch]  +
cmp [ebp+0Ch] eax +
jl loc_1003729  +
movzx eax word ptr [ebp-1Ch] +
movzx edi word ptr [ebp-1Ch] +
xor ecx ecx +
push 4  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1003218  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_10037A3  +
mov eax [ebp-24h] +
mov [esi] di +
mov [ebp+0Ch] eax +
xor edi edi +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-24h] +
call sub_10035F8  +
mov ecx [esi+4] +
mov eax [eax] +
mov [edi+ecx] eax +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-24h] +
add edi 4 +
call sub_10035D6  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_100377B  +
lea ecx [ebp-24h] +
call sub_10018E9  +
call __EH_epilog3  +
retn 8  +
push ebx  +
lea ecx [ebp-24h] +
call sub_10037C3  +
jmp loc_1003741  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_100353E  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_10037E9  +
mov [ecx] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
mov [esi] eax +
jmp loc_10037E1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_1003810  +
mov eax [ecx] +
test eax eax +
jz loc_100380C  +
mov ecx [eax+8] +
cmp ecx [ebp+arg_0] +
jnz loc_1003810  +
pop ebp  +
retn 8  +
mov eax [eax] +
jmp loc_1003800  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
xor eax eax +
sub edx eax +
jz loc_100383D  +
dec edx  +
jz loc_1003838  +
dec edx  +
jnz loc_1005EF6  +
mov eax [ecx+14h] +
pop ebp  +
retn 4  +
mov eax [ecx+10h] +
jmp loc_1003834  +
mov eax [ecx+0Ch] +
jmp loc_1003834  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebx+40h] +
call sub_1002FCD  +
lea ecx [ebx+44h] +
call sub_1002FCD  +
lea ecx [ebx+48h] +
call sub_1002FCD  +
lea ecx [ebx+4Ch] +
call sub_1002FCD  +
lea ecx [ebx+50h] +
call sub_1002FCD  +
mov ecx ebx +
call sub_100389E  +
mov eax [ebp+arg_0] +
mov esi [ebp+arg_4] +
mov [ebx+4] eax +
lea edi [ebx+8] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
xor eax eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor ebx ebx +
mov [esi] bl +
mov [esi+1] bl +
mov [esi+4] ebx +
mov [esi+1Ch] ebx +
lea edi [esi+8] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [esi+20h] +
stos   +
stos   +
xor eax eax +
lea edi [esi+28h] +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [esi+34h] +
stos   +
stos   +
stos   +
call ds:GetUserDefaultUILanguage  +
pop edi  +
mov [esi+54h] ebx +
mov [esi+18h] ax +
mov [esi+2Ch] ax +
mov [esi+38h] ax +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_4] ecx +
test esi esi +
jz loc_1003995  +
push ebx  +
lea ebx [ecx+1Ch] +
push ebx  +
call sub_100300F  +
push 14h  +
call sub_1001E13  +
pop ecx  +
mov [ebx] eax +
test eax eax +
jz loc_1003994  +
push edi  +
mov edi eax +
push 5  +
pop ecx  +
movs   +
mov eax [ebx] +
and dword ptr [eax+0Ch] 0 +
mov eax [ebx] +
xor ecx ecx +
mov [eax+8] cx +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
add eax 8 +
push eax  +
mov eax [ebx] +
add eax 8 +
push eax  +
call sub_10036DA  +
mov eax off_101F0C0 +
mov esi offset off_101F0C0 +
mov edi offset loc_100399C +
cmp eax esi +
jz loc_1003963  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1006498  +
mov ecx [ebx] +
cmp dword ptr [ecx+0Ch] 0 +
jz loc_1003993  +
and [ebp+arg_0] 0 +
xor edx edx +
cmp dx [ecx+8] +
jnb loc_1003993  +
cmp eax esi +
jz loc_1003985  +
test byte ptr [eax+1Ch] 4 +
jnz loc_10064BE  +
mov ecx [ebx] +
movzx ecx word ptr [ecx+8] +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] ecx +
jb loc_1003977  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_10039E3  +
mov eax [esi] +
test eax eax +
jz loc_10039E3  +
add eax 4 +
push eax  +
call sub_1003A07  +
mov eax [esi] +
add eax 10h +
push eax  +
call sub_10039ED  +
push dword ptr [esi]  +
call CoTaskMemFree  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax 8 +
push eax  +
call sub_1003A07  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
lea eax [esi+4] +
cmp dword ptr [eax] 0 +
jz loc_1003A1E  +
push eax  +
call sub_1002F25  +
xor eax eax +
mov [esi] ax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp dword ptr [eax+0Ch] 1 +
jg loc_1006EB6  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_1006EC3  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:_vscwprintf  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi 0FFFFFFFFh +
jz loc_1006ECD  +
push esi  +
mov ecx edi +
call sub_1001B6B  +
push [ebp+arg_4]  +
lea ecx [esi+1] +
push [ebp+arg_0]  +
push ecx  +
push eax  +
call vswprintf_s  +
add esp 10h +
push esi  +
mov ecx edi +
call sub_1001AEE  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
push offset aNotQuarantined  +
jmp loc_1001D22  +
***
mov ecx off_101F0C0 +
cmp ecx edi +
jz loc_10020FC  +
test byte ptr [ecx+1Ch] 4 +
jz loc_10020FC  +
jmp loc_10061B1  +
***
mov dword ptr [ebp-10h] 4 +
jmp loc_1002E3F  +
***
push 4  +
jmp loc_1002B61  +
push 7  +
jmp loc_1002B61  +
push 6  +
jmp loc_1002B61  +
push 3  +
jmp loc_1002B61  +
push 2  +
jmp loc_1002B61  +
xor esi esi +
inc esi  +
jmp loc_1002B62  +
***
push 4  +
jmp loc_100290B  +
***
push 4  +
jmp loc_10029CB  +
***
mov esi 3AD0h +
jmp loc_1002811  +
cmp esi 3AD2h +
jnz loc_10028A6  +
jmp loc_100283B  +
mov esi 3ACFh +
jmp loc_1002811  +
mov esi 3ACEh +
jmp loc_1002811  +
mov esi 3ACDh +
jmp loc_1002811  +
***
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_1002387  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1002387  +
jmp loc_10063D6  +
xor esi esi +
jmp loc_100229A  +
mov eax off_101F0C0 +
cmp eax edi +
jnz loc_100633D  +
jmp loc_1002345  +
mov eax off_101F0C0 +
cmp eax edi +
jnz loc_1006362  +
jmp loc_1002354  +
mov eax off_101F0C0 +
cmp eax edi +
jnz loc_10063EF  +
jmp loc_10023A4  +
mov eax off_101F0C0 +
cmp eax edi +
jnz loc_1006401  +
jmp loc_10023A4  +
mov eax off_101F0C0 +
cmp eax edi +
jnz loc_1006413  +
jmp loc_10023A4  +
***
mov edx esi +
jmp loc_1002CA2  +
***
cmp ebx 3 +
jnz loc_1002A8A  +
jmp loc_1006C74  +
***
cmp dword ptr [ebp-14h] 4 +
mov byte ptr [ebp+0Bh] 1 +
jz loc_10025B0  +
jmp loc_10025AC  +
mov cl [esi+3D4h] +
test cl cl +
jz loc_1007278  +
lea eax [esi+3D8h] +
inc dword ptr [eax]  +
mov eax [eax] +
test cl cl +
jz loc_1003C4A  +
cmp eax 4 +
jnb loc_1003FDB  +
cmp byte ptr [esi+3D5h] 0 +
jz loc_10025DA  +
jmp loc_1003FE4  +
cmp byte ptr [esi+3D4h] 0 +
jnz loc_10025E4  +
cmp byte ptr [esi+3D6h] 0 +
jnz loc_10025EE  +
mov ecx esi +
xor bl bl +
call sub_1003FF3  +
test al al +
jnz loc_1003CBB  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1003C99  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1007289  +
cmp byte ptr [esi+3E6h] 0 +
jnz loc_10072A0  +
push dword ptr [esi+3CCh]  +
mov ecx esi +
call sub_1003F8D  +
push 0  +
call ds:PostQuitMessage  +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_100260C  +
jmp loc_10072B4  +
***
cmp eax ebx +
jz loc_1003CD8  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1007396  +
push [ebp+lParam]  +
mov ecx esi +
push [ebp+hInstance]  +
call sub_1003CEF  +
jmp loc_100175E  +
***
call sub_1001939  +
mov edi ecx +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1003D13  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1006F86  +
mov eax [ebp+0Ch] +
sub eax 7Bh +
jz loc_1006FEC  +
sub eax 187h +
jz loc_1006FCE  +
sub eax 3 +
jz loc_1006FEC  +
sub eax 1FDh +
jnz loc_1003D66  +
mov byte ptr [edi+3D4h] 1 +
mov byte ptr [edi+3D5h] 0 +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1003D5E  +
test byte ptr [eax+1Ch] 4 +
jnz loc_10071EF  +
call __EH_epilog3  +
retn 8  +
dec eax  +
jz loc_1003D70  +
dec eax  +
jnz loc_1006F9D  +
xor ebx ebx +
mov [edi+3D4h] bl +
mov [edi+3D5h] bl +
jmp loc_1003D48  +
***
push edi  +
cmp ebx 6 +
jz loc_1003F25  +
cmp ebx 5 +
jz loc_1003F25  +
mov eax [esi+3CCh] +
lea edi [esi+0Ch] +
push ebx  +
mov dword ptr [edi] 3BCh +
mov [esi+10h] eax +
mov dword ptr [esi+14h] 1 +
mov dword ptr [esi+18h] 3 +
mov dword ptr [esi+1Ch] 4FFh +
call sub_1003E07  +
cmp byte ptr [esi+40Ch] 0 +
mov eax [esi+404h] +
mov [esi+20h] eax +
mov eax [esi+408h] +
mov [esi+3C4h] eax +
push edi  +
jnz loc_1003F10  +
push 0  +
call Shell_NotifyIconW  +
test eax eax +
jz loc_1003DFC  +
mov byte ptr [esi+40Ch] 1 +
mov [esi+3D0h] ebx +
pop edi  +
jmp loc_1006B81  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 3 +
push esi  +
mov esi ecx +
jz loc_1003F37  +
cmp [ebp+arg_0] 0 +
jz loc_100655C  +
cmp [ebp+arg_0] 1 +
jnz loc_1003E4D  +
push 69h  +
pop eax  +
movzx eax ax +
push eax  +
call sub_100198C  +
push eax  +
call ds:LoadIconW  +
push eax  +
mov ecx offset unk_101F238 +
mov [esi+408h] eax +
call sub_1003E57  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+204h] eax +
pop ebp  +
retn 4  +
***
xor edi edi +
inc edi  +
jmp loc_1002A8A  +
push 6  +
pop ebx  +
mov ecx esi +
cmp eax ebx +
jnz loc_1006C2D  +
jmp loc_1006C45  +
***
cmp [ebp+arg_4] 7 +
jz loc_10042AD  +
cmp [ebp+arg_4] 8 +
jnz loc_100291F  +
jmp loc_10042AD  +
mov [edi+3FCh] esi +
jmp loc_1002947  +
***
dec ebx  +
jz loc_1003F3E  +
dec ebx  +
jnz loc_1006C8B  +
cmp [ebp+arg_8] 7 +
jz loc_1006CC3  +
cmp [ebp+arg_8] 8 +
jnz loc_1003E69  +
jmp loc_1006CC3  +
***
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1003EE0  +
test byte ptr [eax+1Ch] 1 +
jnz loc_1005EDF  +
push 3  +
pop eax  +
retn   +
***
dec eax  +
jnz loc_1001D2A  +
push offset aQuarantined  +
jmp loc_1001D22  +
***
push 1  +
call Shell_NotifyIconW  +
test eax eax +
jnz loc_1003DF6  +
jmp loc_1003DFC  +
cmp byte ptr [esi+3E4h] 0 +
jz loc_1006B5D  +
jmp loc_1003D93  +
***
push 67h  +
jmp loc_1003E2B  +
***
mov ecx [ebp+arg_4] +
call sub_1002B7A  +
cmp eax 7 +
jz loc_1006CED  +
cmp eax 8 +
jz loc_1006CED  +
push 3  +
pop edi  +
jmp loc_1002A8A  +
***
mov eax 3AC4h +
mov dword ptr [ebp+8] 3ACAh +
mov ecx 3A98h +
jmp loc_10026B4  +
cmp dword ptr [ebp+8] 3ACCh +
jnz loc_1002776  +
jmp loc_1002708  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1003FD6  +
cmp byte ptr [esi+40Ch] 0 +
jz loc_1003FD6  +
lea eax [esi+0Ch] +
push eax  +
push 2  +
mov dword ptr [eax] 3BCh +
mov [esi+10h] ecx +
mov dword ptr [esi+14h] 1 +
call Shell_NotifyIconW  +
test eax eax +
jz loc_1003FD6  +
mov byte ptr [esi+40Ch] 0 +
mov dword ptr [esi+3D0h] 4 +
pop esi  +
pop ebp  +
retn 4  +
***
mov byte ptr [ebp+0Fh] 1 +
jmp loc_10025DA  +
cmp eax 5 +
jnb loc_1003FDB  +
jmp loc_10025DA  +
***
push 0  +
push 0  +
call ds:FindWindowExW  +
test eax eax +
jz sub_1004012  +
jmp loc_10066F8  +
***
cmp dword_101F834 0 +
setnz al  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+hInstance]  +
call sub_1004378  +
xor esi esi +
push esi  +
push [ebp+hInstance]  +
mov eax 80000000h +
push esi  +
push esi  +
push esi  +
push eax  +
push esi  +
push eax  +
push 0CF0000h  +
push offset WindowName  +
push lpClassName  +
push esi  +
call ds:CreateWindowExW  +
cmp eax esi +
jz loc_100758F  +
push esi  +
push eax  +
call ds:ShowWindow  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
cmp eax ebx +
jz loc_100407E  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100736A  +
mov eax [ebp+hInstance] +
mov ecx esi +
mov [esi+3CCh] eax +
call sub_10040C1  +
mov ecx esi +
call sub_100411D  +
mov [ebp-4] eax +
lea eax [esi+3E8h] +
cmp dword ptr [eax] 0 +
jz loc_100175E  +
jmp loc_1007381  +
mov edi [ebp+wParam] +
test edi edi +
jnz loc_100748E  +
jmp loc_10074A1  +
***
call sub_1001939  +
mov edi ecx +
push 44h  +
call sub_1001E13  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor esi esi +
mov [ebp-4] esi +
cmp ecx esi +
jz loc_10040EC  +
call sub_1001DCF  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0Bh  +
mov ecx esi +
call sub_1004277  +
push esi  +
mov ecx edi +
call sub_1002435  +
call __EH_epilog3  +
retn   +
***
pop ds  +
aaa   +
xchg dh [eax+3Bh] +
mov bh 67h +
mov ds:2A8584A0h al +
test ah cl +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax off_101F0C0 +
mov edi offset off_101F0C0 +
cmp eax edi +
jz loc_100413C  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1006D03  +
mov eax [esi+3F8h] +
xor ebx ebx +
cmp eax ebx +
jbe loc_1004158  +
push ebx  +
push eax  +
push 1  +
push dword ptr [esi+3CCh]  +
call ds:SetTimer  +
push 28h  +
call sub_1001E13  +
pop ecx  +
cmp eax ebx +
jz loc_1004217  +
mov ecx eax +
call sub_1004223  +
mov [esi+3F4h] eax +
cmp eax ebx +
jz loc_1006D1A  +
push ebx  +
push 1  +
push ebx  +
push ebx  +
call ds:CreateEventW  +
mov ecx [esi+3F4h] +
mov [ecx+24h] eax +
mov eax [esi+3F4h] +
cmp [eax+24h] ebx +
jz loc_1006D4A  +
mov [eax+18h] ebx +
mov eax [esi+3F4h] +
mov ecx [esi+3CCh] +
mov [eax+20h] ecx +
cmp [esi+3E6h] bl +
jnz loc_1006D81  +
mov eax off_101F0C0 +
cmp eax edi +
jz loc_10041D1  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1006DB1  +
push ebx  +
push ebx  +
push dword ptr [esi+3F4h]  +
push offset StartAddress  +
push ebx  +
push ebx  +
call ds:CreateThread  +
mov [esi+3F0h] eax +
cmp eax ebx +
jz loc_1006DC8  +
mov dword ptr [esi+3ECh] 1 +
mov eax off_101F0C0 +
cmp eax edi +
jz loc_1004211  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1006E46  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
xor eax eax +
jmp loc_100416F  +
***
mov edi edi +
push esi  +
mov esi ecx +
xor eax eax +
push esi  +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
mov [esi+20h] eax +
mov [esi+24h] eax +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+20h] eax +
pop ebp  +
retn 4  +
***
dec eax  +
jz loc_1003B17  +
sub eax 3 +
jz loc_1003B10  +
xor esi esi +
jmp loc_1002B62  +
***
xor esi esi +
jmp loc_100290C  +
cmp edi eax +
jz loc_100429D  +
jmp loc_100290C  +
cmp ebx 4 +
jz loc_100291D  +
jmp loc_100291F  +
***
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_10042D1  +
test byte ptr [eax+1Ch] 4 +
jnz loc_10066BC  +
xor eax eax +
jmp loc_10029CE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_1006AC4  +
mov eax [ebp+arg_0] +
cmp eax 0FFFFFFFFh +
jz loc_1004301  +
mov [ecx+2Ch] eax +
test eax eax +
jnz loc_1006AD4  +
mov esi dword_101F1AC +
cmp esi dword_101F1B0 +
jb loc_1006AF2  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
dec ebx  +
jz loc_1006BF0  +
dec ebx  +
jz loc_1006BB5  +
dec ebx  +
jnz loc_1006B8F  +
cmp [ebp+arg_8] 1 +
jz loc_1002A8A  +
cmp [ebp+arg_8] 9 +
jmp loc_1002A84  +
***
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1002537  +
test byte ptr [eax+1Ch] 4 +
jz loc_1002537  +
jmp loc_100724B  +
cmp byte ptr [esi+3E4h] 1 +
jz loc_10025EE  +
jmp loc_100259B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax [ebp+arg_0] +
and [ebp+var_30.cbClsExtra] 0 +
and [ebp+var_30.cbWndExtra] 0 +
push 66h  +
mov [ebp+var_30.cbSize] 30h +
mov [ebp+var_30.style] 3 +
mov [ebp+var_30.lpfnWndProc] offset loc_1001720 +
mov [ebp+var_30.hInstance] eax +
call sub_100198C  +
push eax  +
call ds:LoadIconW  +
push 7F00h  +
push 0  +
mov [ebp+var_30.hIcon] eax +
call ds:LoadCursorW  +
and [ebp+var_30.lpszMenuName] 0 +
mov [ebp+var_30.hCursor] eax +
mov eax lpClassName +
mov [ebp+var_30.lpszClassName] eax +
mov eax [ebp+var_30.hIcon] +
mov [ebp+var_30.hIconSm] eax +
lea eax [ebp+var_30] +
push eax  +
mov [ebp+var_30.hbrBackground] 6 +
call ds:RegisterClassExW  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [ebp+var_10] ebx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_100445E  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jz loc_100774A  +
push [ebp+pSid]  +
call ds:FreeSid  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_10] +
xor ecx ebp +
pop ebx  +
call sub_10019B3  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1004499  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
test byte ptr [ebp-40h] 1 +
jnz loc_1007AA2  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push offset __ImageBase  +
call sub_1004908  +
mov dword_101F0E8 eax +
cmp dword_101F0DC ebx +
jnz loc_1007AEB  +
push eax  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 424h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+var_424] eax +
mov esi offset unk_101F178 +
push esi  +
call sub_1004E6E  +
push offset aMicrosoftNapst  +
mov dword_101F0D4 offset dword_10049EC +
mov off_101F0C0 esi +
call sub_1005088  +
xor eax eax +
push eax  +
push eax  +
push 1  +
push eax  +
call ds:HeapSetInformation  +
mov edi offset off_101F0C0 +
test eax eax +
jz loc_10064E1  +
mov eax off_101F0C0 +
cmp eax edi +
jz loc_100497E  +
test byte ptr [eax+1Ch] 4 +
jnz loc_100651B  +
mov esi offset CriticalSection +
push esi  +
call ds:InitializeCriticalSection  +
lea ecx [ebp+var_420] +
call sub_1005186  +
push [ebp+wParam]  +
lea ecx [ebp+var_420] +
push [ebp+var_424]  +
push ebx  +
call sub_1001499  +
push esi  +
mov ebx eax +
call ds:DeleteCriticalSection  +
mov eax off_101F0C0 +
cmp eax edi +
jz loc_10049C6  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1006532  +
call sub_10059F4  +
lea ecx [ebp+var_420] +
call sub_10058C9  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_10019B3  +
leave   +
retn 10h  +
***
call sub_1001939  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax ds:DefWindowProcW +
xor ebx ebx +
mov [esi+4] ebx +
mov [esi+14h] ebx +
mov [esi+18h] ebx +
mov [esi+1Ch] ebx +
mov [esi+20h] eax +
lea ecx [esi+24h] +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_1004A24 +
call sub_1004FAF  +
lea ecx [esi+0D4h] +
mov byte ptr [ebp-4] 1 +
call sub_1005283  +
lea eax [esi+164h] +
mov [eax] ebx +
mov [eax+10h] ebx +
mov [eax+24h] ebx +
lea eax [esi+18Ch] +
mov [eax] ebx +
mov [eax+10h] ebx +
mov [eax+24h] ebx +
lea eax [esi+1B4h] +
mov [eax] ebx +
mov [eax+10h] ebx +
mov [eax+24h] ebx +
lea eax [esi+1DCh] +
mov [eax] ebx +
mov [eax+10h] ebx +
lea ecx [esi+210h] +
mov [eax+24h] ebx +
call sub_1002FCD  +
lea ecx [esi+214h] +
call sub_1002FCD  +
fld1   +
lea eax [esi+218h] +
mov [eax] ebx +
mov [eax+10h] ebx +
mov [eax+24h] ebx +
lea eax [esi+240h] +
mov [eax] ebx +
mov [eax+10h] ebx +
mov [eax+24h] ebx +
lea eax [esi+268h] +
mov [eax] ebx +
mov [eax+10h] ebx +
mov [eax+24h] ebx +
fst  dword ptr [esi+29Ch] +
fstp  dword ptr [esi+2A0h] +
mov [esi+15Ch] bl +
mov dword ptr [esi+160h] 0Ah +
mov [esi+2ACh] ebx +
mov [esi+204h] ebx +
mov [esi+294h] ebx +
mov [esi+298h] ebx +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call sub_1004E24  +
and dword ptr [ebp-4] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and dword ptr [ebp-1Ch] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
call sub_1004C2C  +
retn   +
***
mov ecx [ebp-10h] +
call sub_1004E24  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
lea eax [ebp-6Ch] +
push eax  +
call ds:GetStartupInfoW  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp-4] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp-20h] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:__imp_InterlockedCompareExchange  +
cmp eax ebx +
jnz loc_1007A54  +
xor esi esi +
inc esi  +
mov eax dword_101F0EC +
cmp eax esi +
jz loc_1007A73  +
mov eax dword_101F0EC +
test eax eax +
jnz loc_100505B  +
mov dword_101F0EC esi +
push offset dword_1004D6C  +
push offset dword_1004D60  +
call sub_1005419  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1007B0E  +
mov eax dword_101F0EC +
cmp eax esi +
jnz loc_1004CEE  +
push offset dword_1004D5C  +
push offset dword_1004D34  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_101F0EC 2 +
cmp [ebp-20h] ebx +
jnz loc_1004CFB  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_101FB10 ebx +
jnz loc_1007A80  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_1007B0E  +
mov eax [eax] +
mov [ebp-24h] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
jbe loc_100504C  +
cmp cx 22h +
jz loc_1007AAB  +
inc eax  +
inc eax  +
jmp loc_1004D16  +
***
mov ecx offset unk_101F238 +
call sub_1004AD6  +
push offset loc_1005B5C  +
call sub_1004DB8  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1004DD4  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call sub_1004E24  +
mov eax dword_101F0F4 +
mov [ebp-1Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1007B57  +
push dword ptr [ebp+8]  +
call ds:_onexit  +
pop ecx  +
call sub_1004C2C  +
retn   +
***
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_101F0C4 +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push offset aLocalQuar_qcli  +
push 1  +
push 0  +
mov esi ecx +
call ds:CreateMutexW  +
mov [esi] eax +
call ds:__imp_GetLastError  +
sub eax 0B7h +
neg eax  +
sbb eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
lea eax [ebp+pNumArgs] +
xor ebx ebx +
push eax  +
mov [ebp+hWnd] ecx +
mov [ebp+pNumArgs] ebx +
call ds:GetCommandLineW  +
push eax  +
call CommandLineToArgvW  +
mov [ebp+hMem] eax +
cmp eax ebx +
jz loc_1004F86  +
cmp [ebp+pNumArgs] ebx +
jle loc_1004F7D  +
push esi  +
push edi  +
mov edi StrCmpW +
mov eax [ebp+hMem] +
lea esi [eax+ebx*4] +
push dword ptr [esi]  +
push offset psz1  +
call edi  +
test eax eax +
jz loc_10066E9  +
push dword ptr [esi]  +
push offset aB_0  +
call edi  +
test eax eax +
jz loc_10066E9  +
push dword ptr [esi]  +
push offset aS  +
call edi  +
test eax eax +
jz loc_10066D3  +
push dword ptr [esi]  +
push offset aS_0  +
call edi  +
test eax eax +
jz loc_10066D3  +
inc ebx  +
cmp ebx [ebp+pNumArgs] +
jl loc_1004F2B  +
pop edi  +
pop esi  +
push [ebp+hMem]  +
call ds:GlobalFree  +
pop ebx  +
leave   +
retn   +
***
fldz   +
mov eax ds:DefWindowProcW +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
mov [esi+4] ebx +
mov [esi+14h] ebx +
mov [esi+18h] ebx +
mov [esi+1Ch] ebx +
mov [esi+20h] eax +
mov dword ptr [esi] offset off_1004770 +
fst  dword ptr [esi+2Ch] +
fst  dword ptr [esi+30h] +
lea ecx [esi+50h] +
fst  dword ptr [esi+34h] +
fst  dword ptr [esi+38h] +
fst  dword ptr [esi+3Ch] +
fstp  dword ptr [esi+40h] +
call sub_1002FCD  +
lea ecx [esi+54h] +
call sub_1002FCD  +
lea ecx [esi+58h] +
call sub_1002FCD  +
lea eax [esi+5Ch] +
mov [eax] ebx +
mov [eax+10h] ebx +
mov [eax+24h] ebx +
lea eax [esi+84h] +
mov [eax] ebx +
mov [eax+10h] ebx +
mov [eax+24h] ebx +
mov [esi+28h] ebx +
mov [esi+48h] ebx +
mov [esi+4Ch] ebx +
mov [esi+0ACh] bl +
mov dword ptr [esi+24h] 214h +
mov dword ptr [esi+44h] 58h +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
push offset String  +
call ds:RegisterWindowMessageW  +
mov dword_101F0D8 eax +
retn   +
***
cmp cx bx +
jz loc_1005066  +
cmp [ebp-1Ch] ebx +
jz loc_1005066  +
jmp loc_1004D26  +
mov dword_10207E4 esi +
jmp loc_1004CCA  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_10048D1  +
cmp cx 20h +
ja loc_10048D1  +
inc eax  +
inc eax  +
mov [ebp-24h] eax +
jmp loc_1005066  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_101F0C0 +
push edi  +
mov edi offset dword_101F0D4 +
test esi esi +
jz loc_10050CA  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_100C791  +
add edi 4 +
mov [ebp+var_8] eax +
call EtwRegisterTraceGuidsW  +
mov esi [esi] +
jmp loc_100509C  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor ebx ebx +
push offset String  +
mov [esi] ebx +
call ds:RegisterWindowMessageW  +
push 3BCh  +
lea edi [esi+0Ch] +
push ebx  +
push edi  +
mov [esi+3C8h] eax +
mov [esi+3D4h] bl +
mov [esi+3D5h] bl +
mov [esi+3D6h] bl +
mov dword ptr [esi+3D0h] 4 +
mov [esi+8] ebx +
mov [esi+4] ebx +
mov byte ptr [esi+3DCh] 1 +
mov byte ptr [esi+3E4h] 1 +
mov [esi+3E5h] bl +
mov [esi+3E6h] bl +
mov [esi+3E7h] bl +
mov [esi+3E8h] ebx +
mov [esi+3ECh] ebx +
mov [esi+3F0h] ebx +
mov [esi+3F4h] ebx +
call memset  +
add esp 0Ch +
mov dword ptr [edi] 3BCh +
pop edi  +
mov [esi+3E0h] ebx +
mov [esi+400h] ebx +
mov [esi+404h] ebx +
mov [esi+408h] ebx +
mov [esi+410h] ebx +
mov [esi+3FCh] ebx +
mov [esi+40Ch] bl +
mov [esi+3D8h] ebx +
mov dword ptr [esi+32Ch] 4 +
mov dword ptr [esi+3F8h] 1F40h +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call sub_1001939  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax ds:DefWindowProcW +
xor edi edi +
mov [esi+4] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+20h] eax +
lea ecx [esi+24h] +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_10050D4 +
call sub_10052CE  +
mov [esi+70h] edi +
mov [esi+74h] edi +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov eax ds:DefWindowProcW +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
mov [esi+4] ebx +
mov [esi+14h] ebx +
push 0Ah  +
lea ecx [esi+24h] +
mov [esi+18h] ebx +
mov [esi+1Ch] ebx +
mov [esi+20h] eax +
mov dword ptr [esi] offset off_1004824 +
call sub_10018A1  +
mov [esi+3Ch] bl +
mov [esi+3Dh] bl +
mov [esi+44h] bl +
mov dword ptr [esi+40h] 0Ah +
mov dword ptr [esi+48h] 5 +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi offset dword_101F128 +
mov ecx esi +
call sub_100534A  +
push offset loc_1005949  +
mov dword_101F128 offset off_100462C +
mov dword_101F0D0 esi +
call sub_1004DB8  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
xor eax eax +
lea edx [esi+10h] +
push 6  +
pop ecx  +
mov edi edx +
stos   +
mov [esi+4] eax +
mov [esi+0Ch] eax +
mov [esi+8] eax +
mov dword_101F0CC esi +
mov ecx edx +
mov [esi+28h] eax +
call sub_1004BE3  +
test eax eax +
jl loc_1006E5D  +
mov dword ptr [esi+4] 24h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov eax dword_101FBA0 +
push offset dword_101F0E4  +
push dword_101FB9C  +
mov dword_101F0E4 eax +
push offset unk_101F19C  +
push offset unk_101F1A0  +
push offset unk_101F198  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_101F0E0 eax +
retn   +
***
push offset loc_101A6D0  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
call ds:GetProcessHeap  +
push offset loc_1005D4D  +
mov dword_101F100 offset off_100184C +
mov dword_101F104 eax +
mov byte_101F108 0 +
call sub_1004DB8  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi [ebp+arg_4] +
jnb loc_100543A  +
test eax eax +
jnz loc_100543A  +
mov ecx [esi] +
test ecx ecx +
jz loc_1005435  +
call ecx  +
add esi 4 +
jmp loc_1005424  +
pop esi  +
pop ebp  +
retn   +
***
call sub_1005451  +
jmp sub_1004C40  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101F0C4 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_1007BDB  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jnz loc_1007BEF  +
jmp loc_10054D2  +
mov dword_101F0C4 esi +
not esi  +
mov dword_101F0C8 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
mov esi 0BB40E64Fh +
jmp loc_10054BF  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_10054FF  +
xor eax eax +
mov [esi+20h] eax +
mov [esi+24h] eax +
mov [esi+28h] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push edi  +
mov edx ecx +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov eax edx +
pop edi  +
retn   +
***
mov ecx offset unk_101F1CC +
call sub_1005531  +
push offset loc_1005CD5  +
call sub_1004DB8  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10054DE  +
push esi  +
mov dword ptr [esi] 2Ch +
call sub_1005558  +
test eax eax +
jl loc_1007915  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1005579  +
cmp dword ptr [eax] 2Ch +
jnz loc_1005579  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_1004BE3  +
pop ebp  +
retn 4  +
mov eax 80070057h +
jmp loc_1005575  +
***
mov ecx offset unk_101F1F8 +
call sub_10055A0  +
push offset loc_1005B1A  +
call sub_1004DB8  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
call sub_1005671  +
mov eax offset __ImageBase +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_1005642  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jb loc_1005615  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_100565C +
call sub_1004BE3  +
test eax eax +
jl loc_100793C  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_10019B3  +
leave   +
retn   +
cmp [ebp+VersionInformation.dwPlatformId] 1 +
jz loc_1007924  +
jmp loc_1005615  +
***
cmp [ebp+VersionInformation.dwMinorVersion] 0 +
jbe loc_1005615  +
jmp loc_1005611  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_10054FF  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
or al ch +
mov ah 0FFh +
inc dword ptr [ebx+1FB983Dh]  +
add [eax] eax +
jz loc_1007B46  +
call sub_100573C  +
xor eax eax +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1005782  +
push eax  +
call sub_100578C  +
test eax eax +
jz loc_1005782  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1007BCC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
***
mov eax [ebp+8] +
pop ebp  +
retn   +
***
call sub_1004E24  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_10057DB  +
cmp ecx 0FFFFFFFFh +
jz loc_10057DB  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10057D4  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10057D4  +
cmp edx 10000000h +
jnb loc_10057D4  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jnz loc_1007BC2  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1004C2C  +
retn 4  +
***
push offset dword_101F100  +
mov ecx offset dword_101F10C +
call sub_1005829  +
push offset loc_1005962  +
call sub_1004DB8  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_1001834 +
xor ecx ecx +
mov dword ptr [eax+14h] 2 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] cx +
mov [eax+1Ah] cx +
mov [eax+8] eax +
pop ebp  +
retn 4  +
***
mov ecx offset unk_101F1A4 +
call sub_100587A  +
push offset loc_1005D6F  +
call sub_1004DB8  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+10h] +
mov ecx edi +
call sub_10054FF  +
and dword ptr [esi] 0 +
mov ecx edi +
mov dword ptr [esi+4] offset __ImageBase +
mov dword ptr [esi+8] offset dword_10058C0 +
mov dword ptr [esi+0Ch] offset dword_10058C0 +
call sub_1004BE3  +
test eax eax +
jl loc_10079A8  +
mov dword ptr [esi] 28h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
test eax eax +
jz loc_10058DD  +
push eax  +
call ds:__imp_FreeLibrary  +
lea esi [edi+3E0h] +
mov ecx [esi] +
test ecx ecx +
jz loc_10058F3  +
push 1  +
call sub_1001A33  +
and dword ptr [esi] 0 +
mov ecx edi +
pop edi  +
pop esi  +
jmp loc_100599D  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101F0C4 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov dword_101F128 offset off_100462C +
mov ecx offset dword_101F128 +
jmp sub_1005AE2  +
***
mov dword_101F10C offset off_1001834 +
retn   +
***
push eax  +
call ds:EnterCriticalSection  +
mov eax [esi+3F4h] +
cmp [eax+1Ch] ebx +
jnz loc_1006B18  +
mov dword ptr [eax+18h] 1 +
push dword ptr [esi+3F4h]  +
call ds:LeaveCriticalSection  +
jmp loc_10059D7  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ebx ebx +
cmp eax ebx +
jz loc_10059B4  +
push eax  +
call ds:CloseHandle  +
mov [esi] ebx +
push edi  +
lea edi [esi+404h] +
mov eax [edi] +
cmp eax ebx +
jz loc_10059CA  +
push eax  +
call ds:DestroyIcon  +
mov [edi] ebx +
pop edi  +
cmp [esi+3ECh] ebx +
jnz loc_1006B05  +
add esi 3F0h +
mov eax [esi] +
cmp eax ebx +
jz loc_10059EC  +
push eax  +
call ds:CloseHandle  +
mov [esi] ebx +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi off_101F0C0 +
push edi  +
mov edi offset off_101F0C0 +
cmp esi edi +
jz loc_1005A30  +
test esi esi +
jz loc_1005A2A  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_1005A26  +
push ecx  +
push eax  +
call EtwUnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
jmp loc_1005A07  +
mov off_101F0C0 edi +
pop edi  +
pop esi  +
retn   +
***
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1005A49  +
test byte ptr [eax+1Ch] 4 +
jnz loc_10076E9  +
push [ebp+var_C]  +
call GdiplusShutdown  +
cmp [ebp+var_2] bl +
jz loc_1005A68  +
mov eax [edi+3CCh] +
cmp eax ebx +
jz loc_1005A68  +
push eax  +
mov ecx edi +
call sub_1003F8D  +
cmp [ebp+hObject] ebx +
jz loc_1005A76  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+var_1] bl +
jz loc_1005A81  +
call CoUninitialize  +
mov esi offset off_101F0C0 +
mov ecx offset dword_101F128 +
call sub_1005AB2  +
mov eax off_101F0C0 +
pop edi  +
cmp eax esi +
pop esi  +
pop ebx  +
jz loc_1005AA6  +
test byte ptr [eax+1Ch] 4 +
jnz loc_1007700  +
mov eax [ebp+Msg.wParam] +
leave   +
retn 0Ch  +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
cmp dword ptr [edi] 0 +
jz loc_1005B12  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_1006E69  +
mov eax [esi+28h] +
test eax eax +
jnz loc_1006E78  +
add esi 10h +
push esi  +
call ds:DeleteCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_10078E1  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov ecx offset unk_101F238 +
jmp sub_1005B68  +
***
call sub_1001939  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1004A24 +
mov eax [esi+278h] +
mov dword ptr [ebp-4] 0Ah +
test eax eax +
jnz loc_1007889  +
mov eax [esi+250h] +
mov byte ptr [ebp-4] 9 +
test eax eax +
jnz loc_1007894  +
mov eax [esi+228h] +
mov byte ptr [ebp-4] 8 +
test eax eax +
jnz loc_100789F  +
mov ecx [esi+214h] +
sub ecx 10h +
call sub_10018D0  +
mov ecx [esi+210h] +
sub ecx 10h +
call sub_10018D0  +
mov eax [esi+1ECh] +
mov byte ptr [ebp-4] 5 +
test eax eax +
jnz loc_10078AA  +
mov eax [esi+1C4h] +
mov byte ptr [ebp-4] 4 +
test eax eax +
jnz loc_10078B5  +
mov eax [esi+19Ch] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jnz loc_10078C0  +
mov eax [esi+174h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jnz loc_10078CB  +
lea ecx [esi+0D4h] +
mov byte ptr [ebp-4] 1 +
call sub_1005DA7  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 0 +
call sub_1005C51  +
mov esi [esi+14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jnz loc_10078D6  +
call __EH_epilog3  +
retn   +
***
call sub_1001939  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1004770 +
mov eax [esi+58h] +
mov ecx [eax-0Ch] +
mov dword ptr [ebp-4] 4 +
test ecx ecx +
jg loc_100777B  +
mov eax [esi+94h] +
test eax eax +
jnz loc_1007787  +
mov eax [esi+6Ch] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jnz loc_1007792  +
mov ecx [esi+58h] +
sub ecx 10h +
call sub_10018D0  +
mov ecx [esi+54h] +
sub ecx 10h +
call sub_10018D0  +
mov ecx [esi+50h] +
sub ecx 10h +
call sub_10018D0  +
mov esi [esi+14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jnz loc_100779D  +
call __EH_epilog3  +
retn   +
***
mov ecx offset unk_101F1CC +
jmp loc_1005CE1  +
mov edi edi +
push esi  +
push hInstance  +
mov esi ecx +
push esi  +
call sub_1005D00  +
lea ecx [esi+20h] +
pop esi  +
jmp sub_1005B3E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_1005D41  +
mov eax [esi] +
cmp eax edi +
jz loc_1005D39  +
cmp eax 2Ch +
jnz loc_1005D41  +
cmp [esi+24h] edi +
jg sub_10078F0  +
lea ecx [esi+20h] +
call sub_1005B3E  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax 80070057h +
jmp loc_1005D3B  +
***
mov ecx offset dword_101F100 +
jmp sub_1005D59  +
***
cmp byte ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_100184C +
jnz loc_1007948  +
retn   +
***
mov ecx offset unk_101F1A4 +
jmp loc_1005D7B  +
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1005DA0  +
push ebx  +
mov ebx [esi+8] +
cmp ebx [esi+0Ch] +
jb loc_1007982  +
lea eax [esi+10h] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
pop ebx  +
pop esi  +
retn   +
***
call sub_1001939  +
jmp loc_1007862  +
***
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 0 +
call sub_1005DDE  +
mov esi [esi+14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jnz loc_100787E  +
call __EH_epilog3  +
retn   +
***
call sub_1005901  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1004824 +
and dword ptr [ebp-4] 0 +
lea eax [esi+24h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_1005E28  +
lea ecx [esi+24h] +
call sub_10018E9  +
mov esi [esi+14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jnz loc_1007857  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
sub ecx eax +
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push offset dword_1001E34  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1003EE0  +
***
dec edx  +
jz loc_1005F08  +
dec edx  +
jnz loc_1003834  +
mov eax [ecx+8] +
jmp loc_1003834  +
mov eax [ecx+18h] +
jmp loc_1003834  +
***
inc eax  +
cmp ax [ebp+arg_4] +
jnb loc_10034AC  +
jmp loc_1003493  +
***
pop ebp  +
retn   +
***
push 80070057h  +
call loc_1008FB2  +
int 3  +
mov eax 80070057h +
jmp loc_1001CFE  +
***
push 80004005h  +
call loc_1008FB2  +
int 3  +
cmp [ecx+0Ch] eax +
jge loc_1005F54  +
push eax  +
mov ecx esi +
call sub_1001AEE  +
jmp loc_100347B  +
call sub_10018D0  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
jmp loc_100347B  +
***
call sub_100B34B  +
int 3  +
nop   +
nop   +
nop   +
nop   +
inc dword ptr [esi+18h]  +
jmp loc_1002D64  +
***
inc dword ptr [esi+0Ch]  +
jmp loc_1002D64  +
inc dword ptr [esi+10h]  +
mov ecx edi +
call sub_100B6F7  +
cmp al 65h +
jnz loc_1002D64  +
inc dword ptr [esi+8]  +
jmp loc_1002D64  +
push dword ptr [esi+0Ch]  +
push edi  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
mov eax off_101F0C0 +
jmp loc_1002D87  +
push dword ptr [esi+10h]  +
push edi  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
mov eax off_101F0C0 +
jmp loc_1002D95  +
push dword ptr [esi+14h]  +
push edi  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
mov eax off_101F0C0 +
jmp loc_1002DA3  +
push dword ptr [esi+8]  +
push edi  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
mov eax off_101F0C0 +
jmp loc_1002DB1  +
push dword ptr [esi+18h]  +
push edi  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
jmp loc_1002DBF  +
***
push 8007000Eh  +
call loc_1008FB2  +
int 3  +
***
mov esi edx +
jmp loc_1001BB7  +
add edx eax +
jmp loc_1002C9A  +
***
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100605D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100605D  +
push offset dword_1001E34  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax edi +
jmp loc_1002E7D  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100605D  +
test byte ptr [eax+1Ch] 4 +
jz loc_100605D  +
push dword ptr [ebp+0Ch]  +
push offset dword_1001E34  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
jmp loc_100605D  +
push 1  +
mov ecx esi +
call sub_1003819  +
test eax eax +
jbe loc_10060A6  +
mov dword ptr [ebp-10h] 1 +
jmp loc_1002E3F  +
push 2  +
call sub_1003819  +
test eax eax +
jbe loc_10060BD  +
mov dword ptr [ebp-10h] 2 +
jmp loc_1002E3F  +
push edi  +
call sub_1003819  +
test eax eax +
ja loc_10060F4  +
cmp dword ptr [esi+2Ch] 0 +
jz loc_10060F4  +
mov dword ptr [ebp-10h] 9 +
mov eax off_101F0C0 +
cmp eax ebx +
jz loc_1002E3F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1002E3F  +
push offset dword_1001E34  +
push 2Fh  +
jmp loc_1006143  +
mov [ebp-10h] edi +
jmp loc_1002E3F  +
mov dword ptr [ebp-10h] 7 +
jmp loc_1002E3F  +
push edi  +
call sub_1003819  +
test eax eax +
ja loc_1006153  +
mov eax [esi+2Ch] +
test eax eax +
jz loc_1006153  +
cmp [esi+0Ch] eax +
jnz loc_1006125  +
mov dword ptr [ebp-10h] 8 +
mov eax off_101F0C0 +
cmp eax ebx +
jz loc_1002E3F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1002E3F  +
push offset dword_1001E34  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1002E3F  +
mov dword ptr [ebp-10h] 6 +
jmp loc_1002E3F  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-10h]  +
push offset dword_1001E34  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B1CA  +
jmp loc_1002E6F  +
***
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_100201F  +
***
push dword ptr [eax]  +
push dword ptr [ebp-44h]  +
push dword ptr [eax+10h]  +
push ebx  +
push 11h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AFE5  +
jmp loc_10061C4  +
push dword ptr [eax]  +
push dword ptr [ebp-44h]  +
push ebx  +
push 12h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100B0B2  +
mov eax [ebp-38h] +
jmp loc_10020FC  +
push edi  +
call sub_1002F76  +
mov eax [ebp-38h] +
jmp loc_100210A  +
movzx ecx word ptr [ebp-3Ch] +
push ecx  +
push ebx  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
jmp loc_1002165  +
mov dword ptr [ebp-24h] 8007000Eh +
mov eax off_101F0C0 +
cmp eax edi +
jz loc_1002395  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002395  +
push ebx  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1002395  +
movzx ecx word ptr [ebp-28h] +
push ecx  +
push ebx  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
jmp loc_10021CB  +
inc eax  +
cmp eax ecx +
jb loc_1002243  +
cmp esi offset off_101F0C0 +
jz loc_100232F  +
test byte ptr [esi+1Ch] 4 +
jz loc_100232F  +
push dword ptr [ebp-34h]  +
push ebx  +
push 16h  +
jmp loc_1006310  +
movzx edx word ptr [ecx+18h] +
push edx  +
movzx edx byte ptr [ecx+14h] +
push edx  +
push dword ptr [ecx+10h]  +
push dword ptr [ecx]  +
push ebx  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B243  +
mov ecx [ebp-58h] +
jmp loc_10022F3  +
mov esi off_101F0C0 +
cmp esi offset off_101F0C0 +
jz loc_100231B  +
test byte ptr [esi+1Ch] 1 +
jz loc_100231B  +
push eax  +
mov eax [ebp-2Ch] +
push dword ptr [edi+eax]  +
push ebx  +
push 18h  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_100B125  +
jmp loc_1002315  +
mov edi [edi+8] +
test edi edi +
jz loc_10062F4  +
cmp esi offset off_101F0C0 +
jz loc_100232F  +
test byte ptr [esi+1Ch] 4 +
jz loc_100232F  +
push edi  +
push dword ptr [ebp-34h]  +
push ebx  +
push 19h  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_100B157  +
jmp loc_1002329  +
cmp esi offset off_101F0C0 +
jz loc_100232F  +
test byte ptr [esi+1Ch] 4 +
jz loc_100232F  +
push dword ptr [ebp-34h]  +
push ebx  +
push 1Ah  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_100AF4C  +
jmp loc_1002329  +
mov ecx [ebp-44h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
mov dword ptr [ebp-24h] 8007000Eh +
call sub_10018D0  +
xor esi esi +
jmp loc_10023A4  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002345  +
movzx ecx word ptr [ebp-60h] +
push ecx  +
push dword ptr [ebp-24h]  +
push ebx  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B125  +
jmp loc_1002345  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002354  +
movzx ecx word ptr [ebp-28h] +
push ecx  +
push dword ptr [ebp-24h]  +
push ebx  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B125  +
jmp loc_1002354  +
push 58h  +
call sub_1001E13  +
pop ecx  +
mov [ebp-64h] eax +
mov byte ptr [ebp-4] 2 +
cmp eax esi +
jz loc_10063A9  +
mov ecx [ebp-48h] +
push dword ptr [ecx+edi*4]  +
mov ecx eax +
call sub_100B92C  +
jmp loc_10063AB  +
xor eax eax +
mov byte ptr [ebp-4] 0 +
mov [ebp-34h] eax +
cmp eax esi +
jz loc_10063CA  +
mov ecx [ebp-30h] +
lea eax [ebp-34h] +
push eax  +
add ecx 24h +
call sub_1003614  +
jmp loc_100236A  +
mov dword ptr [ebp-24h] 8007000Eh +
jmp loc_1002395  +
movzx edx word ptr [ebp-3Ch] +
push edx  +
push eax  +
push ebx  +
push 1Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100B125  +
jmp loc_1002387  +
test byte ptr [eax+1Ch] 1 +
jz loc_10023A4  +
push dword ptr [ebp-24h]  +
push ebx  +
push 1Eh  +
jmp loc_1006423  +
test byte ptr [eax+1Ch] 1 +
jz loc_10023A4  +
push dword ptr [ebp-24h]  +
push ebx  +
push 1Fh  +
jmp loc_1006423  +
test byte ptr [eax+1Ch] 1 +
jz loc_10023A4  +
push dword ptr [ebp-24h]  +
push ebx  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
jmp loc_10023A4  +
push dword ptr [edi+2Ch]  +
push dword ptr [ebp-24h]  +
push ebx  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B125  +
jmp loc_1002406  +
***
call sub_1003463  +
jmp loc_1001DC5  +
push 80070057h  +
call loc_1008FB2  +
lea ecx [eax+esi*2] +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call sub_100B2FA  +
jmp loc_1001DB7  +
***
push 2  +
pop eax  +
retn   +
***
xor al al +
jmp loc_100302A  +
***
push 80004005h  +
call loc_1008FB2  +
int 3  +
***
push 3  +
call sub_100B978  +
and dword ptr [esi+8] 0 +
jmp loc_100319D  +
***
mov ecx [ebx] +
movzx edx word ptr [ecx+8] +
push edx  +
movzx edx byte ptr [ecx+4] +
push edx  +
push dword ptr [ecx]  +
push edi  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B621  +
mov eax off_101F0C0 +
jmp loc_1003963  +
mov ecx [ebx] +
mov ecx [ecx+0Ch] +
mov edx [ebp+arg_0] +
push dword ptr [ecx+edx*4]  +
push edi  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
mov eax off_101F0C0 +
jmp loc_1003985  +
***
mov eax off_101F0C0 +
cmp eax edi +
jz loc_100497E  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004970  +
call ds:__imp_GetLastError  +
push eax  +
mov eax off_101F0C0 +
push offset dword_100654C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
jmp loc_100496B  +
push offset dword_100654C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_100497E  +
push offset dword_100654C  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_10049C6  +
***
push 68h  +
jmp loc_1003E2B  +
***
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1006587  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006587  +
push offset sub_1004108  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
xor eax eax +
jmp loc_1002B71  +
***
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_10065B2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10065B2  +
push offset sub_1004108  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
xor eax eax +
jmp loc_10029D0  +
inc ebx  +
push ebx  +
mov ecx esi +
call sub_1003819  +
test eax eax +
ja loc_10029CC  +
push 2  +
pop ebx  +
push ebx  +
mov ecx esi +
call sub_1003819  +
test eax eax +
ja loc_10029CC  +
push edi  +
pop ebx  +
push ebx  +
mov ecx esi +
call sub_1003819  +
test eax eax +
ja loc_10029CC  +
mov ecx esi +
call sub_100B35B  +
test eax eax +
jz loc_10029CC  +
push 9  +
pop ebx  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_10029CC  +
test byte ptr [eax+1Ch] 4 +
jz loc_10029CC  +
push offset sub_1004108  +
push 28h  +
jmp loc_10066AC  +
push 7  +
jmp loc_10029CB  +
push 3  +
mov ecx esi +
call sub_1003819  +
test eax eax +
ja loc_1006682  +
mov ecx esi +
call sub_100B35B  +
test eax eax +
jz loc_1006682  +
push 0  +
mov ecx esi +
call sub_1003819  +
mov ecx esi +
mov edi eax +
call sub_100B35B  +
cmp edi eax +
jnz loc_100665F  +
push 8  +
pop ebx  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_10029CC  +
test byte ptr [eax+1Ch] 4 +
jz loc_10029CC  +
push offset sub_1004108  +
push 29h  +
jmp loc_10066AC  +
push 6  +
jmp loc_10029CB  +
xor ebx ebx +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_10029CC  +
test byte ptr [eax+1Ch] 4 +
jz loc_10029CC  +
push offset sub_1004108  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_10029CC  +
push offset sub_1004108  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_10042D1  +
***
mov eax [ebp+hWnd] +
mov byte ptr [eax+3E6h] 1 +
mov byte ptr [eax+3E7h] 0 +
jmp loc_1004F75  +
mov eax [ebp+hWnd] +
mov byte ptr [eax+3E4h] 0 +
jmp loc_1004F75  +
***
push eax  +
call ds:IsWindow  +
test eax eax +
jz sub_1004012  +
mov al 1 +
retn   +
***
push esi  +
call ds:IsWindow  +
test eax eax +
jz loc_1002BA9  +
push edi  +
push [ebp+wParam]  +
push 979h  +
push esi  +
call ds:SendMessageW  +
jmp loc_1002BA9  +
***
push offset sub_1004108  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax off_101F0C0 +
jmp loc_1002457  +
push offset sub_1004108  +
push 36h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1002494  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_1004BFE  +
***
mov edi offset sub_1004108 +
push edi  +
push 44h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1001ECF  +
push edi  +
push 45h  +
jmp loc_1006881  +
cmp edx 1 +
jnz loc_1006891  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1001F04  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001F04  +
push edi  +
push 46h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1001F04  +
mov ecx 80010106h +
cmp edx ecx +
jnz loc_1006A9B  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1001F0B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001F0B  +
push ecx  +
push edi  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
jmp loc_1001F0B  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_10068EA  +
test byte ptr [eax+1Ch] 4 +
jz loc_10068EA  +
push offset sub_1004108  +
push 49h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
push ebx  +
call ds:EnterCriticalSection  +
cmp dword ptr [ebx+18h] 0 +
push ebx  +
jnz loc_100695F  +
call edi  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1001F11  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001F11  +
push offset sub_1004108  +
push 4Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1001F11  +
push offset sub_1004108  +
push 4Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1001F3E  +
push offset sub_1004108  +
push 4Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1001F84  +
push offset sub_1004108  +
push 50h  +
jmp loc_1006918  +
call edi  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1006982  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006982  +
push offset sub_1004108  +
push 4Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
push 1  +
mov ecx ebx +
call sub_100C937  +
jmp loc_1006A52  +
push ebx  +
call edi  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1006982  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006982  +
push offset sub_1004108  +
push 4Eh  +
jmp loc_1006977  +
mov dword ptr [ebx+1Ch] 1 +
call edi  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1006A57  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006A57  +
push offset sub_1004108  +
push 4Fh  +
jmp loc_1006A47  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_10069F5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10069F5  +
push offset sub_1004108  +
push 51h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
push ebx  +
call ds:EnterCriticalSection  +
cmp dword ptr [ebx+18h] 0 +
push ebx  +
jz loc_1006A28  +
call edi  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1006982  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006982  +
push offset sub_1004108  +
push 52h  +
jmp loc_1006977  +
mov dword ptr [ebx+1Ch] 1 +
call edi  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1006A57  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006A57  +
push offset sub_1004108  +
push 53h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax off_101F0C0 +
cmp dword ptr [ebp-10h] 0 +
jz loc_1006A68  +
call CoUninitialize  +
mov eax off_101F0C0 +
mov ecx [ebp-14h] +
test ecx ecx +
jz loc_1006A7B  +
push 1  +
call sub_1001A33  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1006A97  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006A97  +
push offset sub_1004108  +
push 54h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
xor eax eax +
jmp loc_1006ABC  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1006AB9  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006AB9  +
push edx  +
push edi  +
push 48h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 4  +
***
push edi  +
mov edi offset unk_101F4E8 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
jmp loc_10042EE  +
cmp dword ptr [eax] 0 +
mov esi eax +
jz loc_1004301  +
push 1  +
call dword ptr [esi+20h]  +
add esi 24h +
cmp dword ptr [esi] 0 +
jz loc_1004301  +
jmp loc_1006ADF  +
mov eax [esi] +
test eax eax +
jz loc_1006AFD  +
push 1  +
call dword ptr [eax+20h]  +
add esi 4 +
jmp loc_1004307  +
***
mov eax [esi+3F4h] +
cmp eax ebx +
jnz loc_100596D  +
jmp loc_10059D7  +
push eax  +
call ds:LeaveCriticalSection  +
mov ecx [esi+3F4h] +
cmp ecx ebx +
jz loc_1006B30  +
push 1  +
call sub_100C937  +
mov [esi+3F4h] ebx +
mov [esi+3ECh] ebx +
jmp loc_10059D7  +
***
cmp ebx 4 +
jnz loc_1003D80  +
jmp loc_1006B81  +
lea edi [esi+3D0h] +
mov eax [edi] +
cmp eax 6 +
jz loc_1006B7A  +
cmp eax 5 +
jz loc_1006B7A  +
push dword ptr [esi+3CCh]  +
call sub_1003F8D  +
mov [edi] ebx +
jmp loc_1003DFC  +
pop ebx  +
jmp loc_10027B3  +
***
push 4  +
pop eax  +
jmp loc_1002A8D  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1002A8A  +
test byte ptr [eax+1Ch] 4 +
jz loc_1002A8A  +
push offset sub_1004108  +
push 21h  +
jmp loc_1006CB3  +
cmp [ebp+arg_8] 7 +
jz loc_1006BC5  +
cmp [ebp+arg_8] 8 +
jnz loc_1003E69  +
cmp byte ptr [esi+3E6h] 0 +
mov byte ptr [esi+3DCh] 0 +
jz loc_1006BE0  +
and [esi+3D0h] edi +
jmp loc_1002A8A  +
push 6  +
pop ebx  +
mov edi ebx +
mov [esi+3D0h] ebx +
jmp loc_1002A8A  +
cmp byte ptr [esi+3E4h] 0 +
jnz loc_1003F58  +
lea eax [esi+3DCh] +
cmp byte ptr [eax] 0 +
jz loc_1003F58  +
cmp byte ptr [esi+3E6h] 0 +
jnz loc_1003F58  +
mov byte ptr [eax] 0 +
push 4  +
mov dword ptr [esi+3D0h] 3 +
jmp loc_1003F5A  +
call sub_1003FF3  +
test al al +
jnz loc_1006C3D  +
mov edi ebx +
jmp loc_1002A8A  +
cmp [esi+3D0h] ebx +
jmp loc_1006C6D  +
call sub_1003FF3  +
test al al +
jnz loc_1006C66  +
cmp [esi+3E6h] al +
jz loc_1002A8A  +
cmp [esi+3E7h] al +
jnz loc_1002A8A  +
cmp dword ptr [esi+3D0h] 0 +
jnz loc_1006C84  +
jmp loc_1002A8A  +
cmp [ebp+arg_8] 1 +
jz loc_1006C84  +
cmp [ebp+arg_8] 9 +
jnz loc_1003E69  +
xor edi edi +
jmp loc_1002A8A  +
dec ebx  +
jz loc_100432F  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1002A8A  +
test byte ptr [eax+1Ch] 4 +
jz loc_1002A8A  +
push offset sub_1004108  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1002A8A  +
mov ecx esi +
call sub_1003FF3  +
test al al +
jnz loc_1002A8A  +
cmp [esi+3E6h] al +
jz loc_1006CE6  +
cmp [esi+3E7h] al +
jz loc_1002A8A  +
push 6  +
jmp loc_1003F5A  +
mov ecx esi +
call sub_1003FF3  +
test al al +
jnz loc_1003F58  +
push 5  +
jmp loc_1003F5A  +
***
push offset sub_1004108  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_100413C  +
mov eax off_101F0C0 +
cmp eax edi +
jz loc_1006D40  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006D40  +
push offset sub_1004108  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax off_101F0C0 +
mov ebx 8007000Eh +
jmp loc_1006E05  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1006D5E  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
mov eax off_101F0C0 +
cmp eax edi +
jz loc_1006E05  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006E05  +
push ebx  +
push offset sub_1004108  +
push 39h  +
jmp loc_1006DF5  +
mov eax off_101F0C0 +
cmp eax edi +
jz loc_1006DA2  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006DA2  +
push offset sub_1004108  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov dword ptr [esi+3E8h] 1 +
jmp loc_10041BE  +
push offset sub_1004108  +
push 3Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_10041D1  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1006DDC  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
mov eax off_101F0C0 +
cmp eax edi +
jz loc_1006E05  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006E05  +
push ebx  +
push offset sub_1004108  +
push 3Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
mov eax off_101F0C0 +
mov ecx [esi+3F4h] +
test ecx ecx +
jz loc_1006E22  +
push 1  +
call sub_100C937  +
and dword ptr [esi+3F4h] 0 +
mov eax off_101F0C0 +
cmp eax edi +
jz loc_1006E3F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1006E3F  +
push ebx  +
push offset sub_1004108  +
push 3Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
mov eax ebx +
jmp loc_1004213  +
push offset sub_1004108  +
push 3Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1004211  +
***
mov byte_1020778 1 +
jmp loc_1005384  +
***
push edi  +
call sub_100CCF6  +
and dword ptr [esi+0Ch] 0 +
jmp loc_1005AFA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1005B05  +
***
mov eax [esi+10h] +
cmp eax edi +
jz loc_1006E90  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push edi  +
mov [esi+10h] edi +
call dword ptr [esi+20h]  +
add esi 24h +
cmp [esi] edi +
jz loc_1005AC6  +
jmp loc_1006E83  +
mov eax [esi] +
cmp eax edi +
jz loc_1006EAE  +
push edi  +
call dword ptr [eax+20h]  +
add esi 4 +
jmp loc_1005ACC  +
***
push dword ptr [eax+4]  +
call sub_1001BD1  +
jmp loc_1003A41  +
***
push 80070057h  +
call loc_1008FB2  +
push 8007000Eh  +
jmp loc_1006EC8  +
***
movzx eax word ptr [ebp+arg_0] +
push eax  +
call sub_100EB9E  +
mov al 1 +
jmp loc_1002A12  +
***
cmp byte ptr [esi+40Ch] 0 +
jnz loc_1002670  +
jmp loc_10027AB  +
dec edx  +
jz loc_1006F12  +
dec edx  +
jnz loc_10026B4  +
mov eax 3AF3h +
mov dword ptr [ebp+8] 3AF4h +
jmp loc_1003F6C  +
mov eax 3AC6h +
mov dword ptr [ebp+8] 3ACCh +
jmp loc_10026B4  +
mov eax 3AC3h +
mov dword ptr [ebp+8] 3AC9h +
jmp loc_10026B4  +
mov eax 3AC2h +
mov dword ptr [ebp+8] 3AC8h +
jmp loc_10026B4  +
mov eax 3AC1h +
mov dword ptr [ebp+8] 3AC7h +
jmp loc_1003F6C  +
***
cmp byte ptr [edi+40Ch] 0 +
jnz loc_10027E0  +
jmp loc_10027D8  +
dec eax  +
jz loc_1006F7C  +
dec eax  +
jnz loc_1002811  +
mov esi 3AF2h +
jmp loc_1002811  +
mov esi 3AD2h +
jmp loc_1002811  +
***
push offset sub_1004108  +
push 42h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1003D13  +
dec eax  +
jnz loc_1003D48  +
lea eax [edi+3D4h] +
xor ebx ebx +
cmp [eax] bl +
jz loc_1003D48  +
push dword ptr [edi+3CCh]  +
mov ecx edi +
mov [eax] bl +
mov [edi+3D5h] bl +
call sub_100F2F2  +
jmp loc_1003D48  +
push dword ptr [edi+3CCh]  +
mov ecx edi +
call sub_100F2F2  +
push hWnd  +
call ds:SetForegroundWindow  +
jmp loc_1003D48  +
mov esi offset dword_101F10C +
push esi  +
lea ecx [ebp-20h] +
call sub_1001865  +
xor ebx ebx +
push esi  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call sub_1001865  +
push esi  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 1 +
call sub_1001865  +
push esi  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
mov [ebp+0Fh] bl +
call sub_1001865  +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 3 +
mov byte ptr [edi+3D6h] 1 +
call ds:GetCursorPos  +
push dword ptr [ebp+8]  +
call ds:SetForegroundWindow  +
push 3AAEh  +
call sub_100198C  +
push eax  +
lea ecx [ebp-20h] +
call sub_100B9CE  +
push 3AAFh  +
call sub_100198C  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_100B9CE  +
push 3AB0h  +
call sub_100198C  +
push eax  +
lea ecx [ebp-18h] +
call sub_100B9CE  +
mov ecx [edi+3E0h] +
cmp ecx ebx +
jz loc_100709B  +
lea eax [ebp-14h] +
push eax  +
call sub_100B4C4  +
mov eax [ebp-14h] +
cmp [eax-0Ch] ebx +
jle loc_100709B  +
mov byte ptr [ebp+0Fh] 1 +
call ds:CreatePopupMenu  +
push dword ptr [ebp-20h]  +
mov esi ds:AppendMenuW +
push 65h  +
push ebx  +
push eax  +
mov [ebp-10h] eax +
call esi  +
push dword ptr [ebp-1Ch]  +
push 66h  +
push ebx  +
push dword ptr [ebp-10h]  +
call esi  +
cmp [ebp+0Fh] bl +
jz loc_10070CE  +
push dword ptr [ebp-18h]  +
push 67h  +
push ebx  +
push dword ptr [ebp-10h]  +
call esi  +
call sub_100FBEB  +
test al al +
jz loc_100712A  +
push 2Ch  +
lea eax [ebp-54h] +
push ebx  +
push eax  +
call memset  +
mov esi ds:SetMenuItemInfoW +
add esp 0Ch +
lea eax [ebp-58h] +
push eax  +
push ebx  +
push 65h  +
push dword ptr [ebp-10h]  +
mov dword ptr [ebp-58h] 30h +
mov dword ptr [ebp-54h] 100h +
mov dword ptr [ebp-50h] 2000h +
call esi  +
lea eax [ebp-58h] +
push eax  +
push ebx  +
push 66h  +
push dword ptr [ebp-10h]  +
call esi  +
cmp [ebp+0Fh] bl +
jz loc_100712A  +
lea eax [ebp-58h] +
push eax  +
push ebx  +
push 67h  +
push dword ptr [ebp-10h]  +
call esi  +
push 1  +
push ebx  +
push dword ptr [ebp-10h]  +
call ds:SetMenuDefaultItem  +
push ebx  +
push dword ptr [ebp+8]  +
push ebx  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-28h]  +
push 180h  +
push dword ptr [ebp-10h]  +
call ds:TrackPopupMenu  +
push dword ptr [ebp-10h]  +
mov esi eax +
call ds:DestroyMenu  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
call ds:PostMessageW  +
mov eax esi +
sub eax 65h +
jz loc_1007193  +
dec eax  +
jz loc_100718A  +
dec eax  +
jnz loc_10071B8  +
cmp [ebp+0Fh] bl +
jz loc_10071B8  +
push 1  +
lea ecx [ebp-14h] +
call sub_1003A2D  +
push eax  +
call sub_100ADC4  +
jmp loc_10071B8  +
mov ecx edi +
call sub_100C95D  +
jmp loc_10071B8  +
push dword ptr [edi+3CCh]  +
mov ecx edi +
call sub_100F2F2  +
push hWnd  +
call ds:BringWindowToTop  +
push hWnd  +
call ds:SetForegroundWindow  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
mov [edi+3D6h] bl +
call sub_10018D0  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
jmp loc_1003D48  +
push offset sub_1004108  +
push 43h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1003D5E  +
***
xor al al +
jmp loc_1002624  +
mov eax [ebp-18h] +
mov [ebp+8] eax +
mov eax [ebp-1Ch] +
mov ecx ebx +
mov [ebp+0Ch] eax +
call sub_1002A98  +
push eax  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_1002A98  +
push eax  +
push dword ptr [ebp+0Ch]  +
mov eax off_101F0C0 +
push offset sub_1004108  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100C837  +
jmp loc_1002537  +
mov eax [ebp-18h] +
mov ecx ebx +
mov [ebp+8] eax +
call sub_1002A98  +
push eax  +
push dword ptr [ebp+8]  +
mov eax off_101F0C0 +
push offset sub_1004108  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B0B2  +
jmp loc_1002537  +
cmp [esi+3D5h] cl +
jnz loc_1003C33  +
jmp loc_10025D3  +
push offset sub_1004108  +
push 34h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1003C99  +
cmp byte ptr [esi+3E7h] 0 +
jnz loc_1003CA6  +
mov bl 1 +
jmp loc_1003CBB  +
cmp byte ptr [esi+40Ch] 0 +
jnz loc_100260C  +
test bl bl +
jz loc_100260C  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_10029DA  +
jmp loc_100260C  +
***
push offset sub_1004108  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax off_101F0C0 +
jmp loc_10016A3  +
push offset sub_1004108  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1001784  +
cmp eax ebx +
jz loc_1007327  +
test byte ptr [eax+1Ch] 4 +
jz loc_1007327  +
push offset sub_1004108  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
push 0  +
call ds:PostQuitMessage  +
jmp loc_100175E  +
cmp eax ebx +
jz loc_1007350  +
test byte ptr [eax+1Ch] 4 +
jz loc_1007350  +
push offset sub_1004108  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
push 1  +
push dword ptr [esi+3CCh]  +
call ds:KillTimer  +
push [ebp+hInstance]  +
mov ecx esi +
call sub_1003F8D  +
jmp loc_1007327  +
push offset sub_1004108  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_100407E  +
push dword ptr [esi+3CCh]  +
and dword ptr [eax] 0 +
mov ecx esi +
call sub_100F2F2  +
jmp loc_100175E  +
push offset sub_1004108  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1003CD8  +
cmp eax ebx +
jz loc_10073C9  +
test byte ptr [eax+1Ch] 4 +
jz loc_10073C9  +
push offset sub_1004108  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
cmp dword ptr [esi+3ECh] 0 +
mov dword ptr [esi+3D0h] 4 +
mov byte ptr [esi+3D4h] 0 +
mov byte ptr [esi+3D5h] 0 +
jz loc_100744F  +
mov eax [esi+3F4h] +
test eax eax +
jz loc_100744F  +
push dword ptr [eax+24h]  +
call ds:SetEvent  +
push dword ptr [esi+3F4h]  +
call ds:EnterCriticalSection  +
mov eax [esi+3F4h] +
xor edi edi +
cmp [eax+1Ch] edi +
jz loc_100741D  +
mov dword ptr [ebp-4] 80004005h +
push eax  +
call ds:LeaveCriticalSection  +
cmp [ebp-4] edi +
jge loc_100175E  +
mov ecx [esi+3F4h] +
cmp ecx edi +
jz loc_100743E  +
push 1  +
call sub_100C937  +
mov [esi+3F4h] edi +
mov [esi+3ECh] edi +
jmp loc_100175E  +
mov dword ptr [ebp-4] 80004005h +
jmp loc_100175E  +
push offset sub_1004108  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_10016FD  +
push offset sub_1004108  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax off_101F0C0 +
jmp loc_10040AC  +
push dword ptr [esi+3E0h]  +
mov ecx esi +
push edi  +
call sub_100249D  +
mov eax off_101F0C0 +
mov ecx [esi+3E0h] +
test ecx ecx +
jz loc_10019C0  +
test edi edi +
jz loc_10019C0  +
push edi  +
call sub_100B364  +
test eax eax +
jnz loc_10019CD  +
mov eax off_101F0C0 +
jmp loc_10019C0  +
push dword ptr [esi+3CCh]  +
jmp loc_1007387  +
cmp [ebp+wParam] edx +
setnz cl  +
mov [esi+3E6h] cl +
mov eax off_101F0C0 +
cmp eax ebx +
jz loc_100750B  +
test byte ptr [eax+1Ch] 4 +
jz loc_100750B  +
movzx ecx cl +
push ecx  +
push offset sub_1004108  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
mov byte ptr [esi+3E7h] 0 +
jmp loc_100175E  +
cmp [ebp+wParam] edx +
setnz cl  +
mov [esi+3E4h] cl +
mov eax off_101F0C0 +
cmp eax ebx +
jz loc_100754D  +
test byte ptr [eax+1Ch] 4 +
jz loc_100754D  +
movzx ecx cl +
push ecx  +
push offset sub_1004108  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
mov eax off_101F0C0 +
cmp byte ptr [esi+3E4h] 0 +
jz loc_1001763  +
call sub_1004012  +
test al al +
jz loc_1007568  +
call sub_1008F9B  +
push hWnd  +
call sub_100FF18  +
jmp loc_100175E  +
push offset sub_1004108  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1001771  +
***
call ds:__imp_GetLastError  +
xor eax eax +
jmp loc_100406B  +
***
push offset sub_1004108  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_10014DC  +
mov ecx edi +
call sub_100CB3E  +
mov ecx edi +
call sub_100CBDA  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_10075E2  +
test byte ptr [eax+1Ch] 4 +
jz loc_10075E2  +
push offset sub_1004108  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov [ebp+Msg.wParam] 2 +
jmp loc_1005A86  +
push offset sub_1004108  +
push 0Dh  +
jmp loc_100761A  +
cmp eax 1 +
jnz loc_100762A  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_100152C  +
test byte ptr [eax+1Ch] 4 +
jz loc_100152C  +
push offset sub_1004108  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_100152C  +
mov ecx 80010106h +
cmp eax ecx +
jnz loc_1007717  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_1001530  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001530  +
push ecx  +
push offset sub_1004108  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
jmp loc_1001530  +
push 7F00h  +
push ebx  +
call esi  +
mov [edi+400h] eax +
jmp loc_100154E  +
push 7F00h  +
push ebx  +
call esi  +
mov [edi+404h] eax +
jmp loc_100157F  +
push 7F00h  +
push ebx  +
call esi  +
mov [edi+408h] eax +
jmp loc_1001597  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1001745  +
test byte ptr [eax+1Ch] 4 +
jz loc_1001745  +
push offset sub_1004108  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1001745  +
push dword ptr [edi+3CCh]  +
mov ecx edi +
call sub_1003F8D  +
push ebx  +
call ds:PostQuitMessage  +
jmp loc_1001620  +
push offset sub_1004108  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1005A49  +
push offset sub_1004108  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1005AA6  +
mov ecx off_101F0C0 +
cmp ecx esi +
jz loc_1005A86  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1005A86  +
push eax  +
push offset sub_1004108  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AF4C  +
jmp loc_1005A86  +
***
xor eax eax +
retn   +
***
mov [ebp+var_10] ebx +
jmp loc_1004455  +
***
push esi  +
call sub_1001B6B  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push esi  +
push eax  +
call sub_10101AD  +
add esp 10h +
push esi  +
mov ecx edi +
call sub_1001AEE  +
jmp loc_1003452  +
***
mov edi eax +
jmp loc_10032DF  +
***
push eax  +
call ds:DeleteFileW  +
jmp loc_1005C7D  +
push eax  +
call sub_101A206  +
jmp loc_1005C8B  +
push eax  +
call sub_101A206  +
jmp loc_1005C9A  +
push esi  +
call sub_101A206  +
jmp loc_1005CCA  +
***
push 80004005h  +
call loc_1008FB2  +
int 3  +
push 80004005h  +
call loc_1008FB2  +
int 3  +
***
push 80004005h  +
call loc_1008FB2  +
and dword ptr [eax+4] 0 +
jmp loc_10030B5  +
***
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1007849  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007849  +
push offset dword_1008188  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax offset loc_100784F +
retn   +
mov esi [ebp-14h] +
jmp loc_1005E06  +
***
push esi  +
call sub_101A206  +
jmp loc_1005E1D  +
***
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10050D4 +
mov dword ptr [ebp-4] 1 +
call sub_1016A3F  +
jmp loc_1005DB8  +
push esi  +
call sub_101A206  +
jmp loc_1005DD3  +
***
push eax  +
call sub_101A206  +
jmp loc_1005B94  +
push eax  +
call sub_101A206  +
jmp loc_1005BA6  +
push eax  +
call sub_101A206  +
jmp loc_1005BB8  +
push eax  +
call sub_101A206  +
jmp loc_1005BE6  +
push eax  +
call sub_101A206  +
jmp loc_1005BF8  +
push eax  +
call sub_101A206  +
jmp loc_1005C0A  +
push eax  +
call sub_101A206  +
jmp loc_1005C1C  +
push esi  +
call sub_101A206  +
jmp loc_1005C46  +
***
push edi  +
mov ecx ebx +
call sub_1019F51  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_10078F4  +
pop ebx  +
jmp loc_1005D24  +
***
mov byte_1020778 1 +
and dword ptr [esi] 0 +
jmp loc_100554F  +
***
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_1005611  +
jz loc_1005651  +
jmp loc_1005615  +
mov byte_1020778 1 +
jmp loc_1005633  +
***
mov ecx [ecx+4] +
test ecx ecx +
jz locret_1005D69  +
push ecx  +
call ds:HeapDestroy  +
jmp locret_1005D69  +
***
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_1002C16  +
***
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_1002C16  +
***
mov eax [ebp+arg_8] +
jmp loc_1001B62  +
***
push edi  +
mov edi [ebx] +
test edi edi +
jz loc_100799A  +
mov eax [edi+10h] +
test eax eax +
jz loc_1007996  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [edi+10h] 0 +
add ebx 4 +
cmp ebx [esi+0Ch] +
jb loc_1007983  +
pop edi  +
jmp loc_1005D92  +
***
mov byte_1020778 1 +
jmp loc_10058B7  +
***
push [ebp+arg_0]  +
call _callnewh  +
pop ecx  +
test eax eax +
jnz loc_1001E22  +
test byte ptr dword_10207CC 1 +
mov esi offset dword_10207C0 +
jnz loc_10079EC  +
or dword_10207CC 1 +
mov ecx esi +
call sub_101A2BB  +
push offset loc_101C7D9  +
call sub_1004DB8  +
pop ecx  +
push esi  +
lea ecx [ebp+var_C] +
call sub_101A2F8  +
push offset dword_101CEC4  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
push [ebp+arg_0]  +
call _callnewh  +
pop ecx  +
test eax eax +
jnz loc_1003227  +
test byte ptr dword_10207DC 1 +
mov esi offset dword_10207D0 +
jnz loc_1007A3C  +
or dword_10207DC 1 +
mov ecx esi +
call sub_101A2BB  +
push offset loc_101C7F2  +
call sub_1004DB8  +
pop ecx  +
push esi  +
lea ecx [ebp+var_C] +
call sub_101A2F8  +
push offset dword_101CEC4  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_101F0E8 eax +
xor ebx ebx +
cmp dword_101F0DC ebx +
jnz loc_1007AEB  +
push eax  +
call ds:_exit  +
***
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax 0FFh +
call sub_1004C2C  +
retn   +
***
push (offset dword_10053E0+4)  +
call ds:__setusermatherr  +
pop ecx  +
jmp loc_100572B  +
***
push 8  +
call _lock  +
pop ecx  +
and dword ptr [ebp-4] 0 +
mov eax dword_101F0F4 +
mov [ebp-1Ch] eax +
mov eax dword_101F0F0 +
mov [ebp-20h] eax +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
call __dllonexit  +
add esp 0Ch +
mov [ebp-24h] eax +
mov eax [ebp-1Ch] +
mov dword_101F0F4 eax +
mov eax [ebp-20h] +
mov dword_101F0F0 eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1007BB2  +
mov eax [ebp-24h] +
jmp loc_1004DFB  +
***
pop ecx  +
xor eax eax +
mov [ebp-1Ch] eax +
jmp loc_10057D4  +
***
cmp ax 3 +
jnz loc_1005782  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
test eax ebx +
jz loc_100547A  +
not eax  +
mov dword_101F0C8 eax +
jmp loc_10054CE  +
test dword_101F0C4 ebx +
jz loc_10054D2  +
jmp loc_10054BF  +
***
add [eax-6F6F6F70h] dl +
push dword ptr [ecx]  +
call SysFreeString  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push esi  +
mov esi ecx +
jz loc_1008F57  +
push edi  +
push offset loc_1008F16  +
lea edi [esi-4] +
push dword ptr [edi]  +
push 0Ch  +
push esi  +
call sub_101A411  +
test [ebp+arg_0] 1 +
jz loc_1008F52  +
push edi  +
call sub_10019EE  +
pop ecx  +
mov eax edi +
pop edi  +
jmp loc_1008F6E  +
push dword ptr [esi]  +
call SysFreeString  +
test [ebp+arg_0] 1 +
jz loc_1008F6C  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax dword_101F834 +
test eax eax +
jz loc_1008F93  +
push 0  +
push 0  +
push 10h  +
push dword ptr [eax+4]  +
call ds:SendMessageW  +
mov al 1 +
retn   +
xor al al +
retn   +
***
mov eax dword_101F834 +
test eax eax +
jz locret_1008FAC  +
push dword ptr [eax+4]  +
call sub_100FF18  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ebp+8] eax +
push offset dword_1008FCC  +
lea eax [ebp+8] +
push eax  +
call _CxxThrowException  +
int 3  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov [ecx+4] eax +
mov eax [ebp+arg_0] +
sub eax ecx +
push 0Dh  +
sub eax 0Dh +
push ecx  +
mov dword ptr [ecx] 42444C7h +
mov byte ptr [ecx+8] 0E9h +
mov [ecx+9] eax +
call ds:GetCurrentProcess  +
push eax  +
call ds:FlushInstructionCache  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_1009035  +
call sub_101A216  +
mov [esi] eax +
test eax eax +
jz loc_1009053  +
cmp [ebp+arg_0] 0 +
jnz loc_1009046  +
cmp [ebp+arg_4] 0 +
jnz loc_1009046  +
xor eax eax +
inc eax  +
jmp loc_1009053  +
push [ebp+arg_4]  +
mov ecx [esi] +
push [ebp+arg_0]  +
call sub_1008FE1  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push offset loc_100907C  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call swprintf_s  +
add esp 10h +
pop ebp  +
retn 0Ch  +
inc ecx  +
add [eax+eax+4Ch] dl +
add [edx] bh +
add large ds:7000h ah +
add [ebx-0E74A901h] cl +
push dword ptr [esi]  +
call ds:LeaveCriticalSection  +
mov byte ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp [ebp+arg_0] eax +
jz loc_1009111  +
push eax  +
call SysFreeString  +
cmp [ebp+arg_0] 0 +
jz loc_100910E  +
push [ebp+arg_0]  +
call SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_1009111  +
push 8007000Eh  +
call loc_1008FB2  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov ecx [ebp+arg_0] +
lea eax [eax+ecx*2] +
test eax eax +
jz loc_1009137  +
mov ecx [ebp+arg_4] +
mov cx [ecx] +
mov [eax] cx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+24h] 0 +
jz loc_1009184  +
push edi  +
push [ebp+arg_0]  +
lea edi [esi+28h] +
mov ecx edi +
call sub_10090D9  +
push dword ptr [edi]  +
push dword ptr [esi+4]  +
call ds:SetWindowTextW  +
mov esi [esi+24h] +
push [ebp+arg_0]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+18h]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ecx ecx +
cmp edi ecx +
jnz loc_10091AE  +
push ecx  +
push ecx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebp+arg_4] +
cmp esi ecx +
jz loc_100919F  +
mov eax [ebp+arg_8] +
cmp eax ecx +
jz loc_100919F  +
mov [esi] eax +
call ds:GetCurrentThreadId  +
lea ebx [edi+4] +
push ebx  +
mov [esi+4] eax +
call ds:EnterCriticalSection  +
mov eax [edi+1Ch] +
mov [esi+8] eax +
push ebx  +
mov [edi+1Ch] esi +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_10091FE  +
xor eax eax +
jmp loc_100924D  +
and [ebp+arg_0] 0 +
push ebx  +
push esi  +
lea ebx [edi+4] +
push ebx  +
call ds:EnterCriticalSection  +
mov esi [edi+1Ch] +
test esi esi +
jz loc_1009241  +
call ds:GetCurrentThreadId  +
xor ecx ecx +
cmp [esi+4] eax +
jz loc_100922D  +
mov ecx esi +
mov esi [esi+8] +
test esi esi +
jz loc_1009241  +
jmp loc_100921D  +
mov eax [esi+8] +
test ecx ecx +
jnz loc_1009239  +
mov [edi+1Ch] eax +
jmp loc_100923C  +
mov [ecx+8] eax +
mov eax [esi] +
mov [ebp+arg_0] eax +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [esi+8] +
push edi  +
cmp eax ecx +
jnz loc_1009299  +
test ecx ecx +
jnz loc_1009273  +
xor edi edi +
inc edi  +
jmp loc_1009282  +
lea edi [eax+eax] +
test edi edi +
jl loc_10092B2  +
cmp edi 3FFFFFFFh +
ja loc_10092B2  +
push 2  +
push edi  +
push dword ptr [esi]  +
call off_1020774  +
add esp 0Ch +
test eax eax +
jz loc_10092B2  +
mov [esi+8] edi +
mov [esi] eax +
push [ebp+arg_0]  +
mov ecx esi +
push dword ptr [esi+4]  +
call sub_100911D  +
inc dword ptr [esi+4]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_10092AC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_10092F0  +
cmp [ebp+arg_4] 0 +
jz loc_10092F0  +
push esi  +
push [ebp+arg_4]  +
call ds:RegisterClassExW  +
movzx esi ax +
lea eax [ebp+arg_4] +
push eax  +
lea ecx [edi+20h] +
mov [ebp+arg_4] esi +
call sub_1009257  +
mov ax si +
pop esi  +
jmp loc_10092F2  +
xor eax eax +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset unk_101F1CC  +
call sub_10091ED  +
mov esi eax +
test esi esi +
jz loc_1009347  +
mov eax [esi] +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov ecx esi +
mov [esi+4] ebx +
call dword ptr [eax+8]  +
push esi  +
lea edi [esi+14h] +
push eax  +
mov ecx edi +
call sub_100901D  +
mov edi [edi] +
push edi  +
push 0FFFFFFFCh  +
push ebx  +
call ds:SetWindowLongW  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ebx  +
call edi  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
push 0  +
lea ecx [esi+14h] +
call sub_100901D  +
test eax eax +
jnz loc_1009375  +
push 0Eh  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10093E2  +
cmp [ebp+arg_18] 0 +
jz loc_1009371  +
push esi  +
lea eax [esi+8] +
push eax  +
push offset unk_101F1CC  +
call sub_100918E  +
cmp [ebp+hMenu] 0 +
jnz loc_100939D  +
test [ebp+dwStyle] 40000000h +
jz loc_100939D  +
mov [ebp+hMenu] esi +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_10093AC  +
mov eax offset unk_101FBAC +
mov [ebp+arg_4] eax +
push [ebp+lpParam]  +
mov ecx [eax+4] +
push hInstance  +
mov esi [eax+0Ch] +
push [ebp+hMenu]  +
mov edx [eax] +
push [ebp+hWndParent]  +
mov eax [eax+8] +
sub esi ecx +
push esi  +
sub eax edx +
push eax  +
movzx eax [ebp+arg_18] +
push ecx  +
push edx  +
push [ebp+dwStyle]  +
push [ebp+lpWindowName]  +
push eax  +
push [ebp+dwExStyle]  +
call ds:CreateWindowExW  +
pop esi  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
cmp edi esi +
jz loc_100947B  +
mov eax [ebp+arg_4] +
cmp eax esi +
jz loc_100947B  +
mov ebx [ebp+arg_8] +
cmp ebx esi +
jz loc_100947B  +
cmp [ebp+arg_C] esi +
jz loc_100947B  +
cmp [ebx+40h] si +
jnz loc_100951D  +
add eax 4 +
push eax  +
mov [ebp+lpCriticalSection] eax +
call ds:EnterCriticalSection  +
cmp [ebx+40h] si +
jnz loc_1009512  +
mov eax [ebx+30h] +
cmp eax esi +
jz loc_10094A5  +
mov ecx [ebx+28h] +
mov [ebp+arg_8] ecx +
mov ecx [ebx+8] +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_3C] +
push ecx  +
push eax  +
push esi  +
mov esi ds:GetClassInfoExW +
mov [ebp+var_3C.cbSize] 30h +
call esi  +
test eax eax +
jnz loc_1009484  +
mov eax [ebx+30h] +
mov ecx [edi+4] +
lea edx [ebp+var_3C] +
push edx  +
push eax  +
push ecx  +
call esi  +
test eax eax +
jnz loc_1009484  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
push 0Ch  +
pop ecx  +
lea esi [ebp+var_3C] +
mov edi ebx +
movs   +
mov eax [ebx+8] +
mov edi [ebp+arg_0] +
mov [ebx+34h] eax +
mov eax [ebp+arg_8] +
mov [ebx+28h] eax +
mov eax [ebp+var_4] +
mov [ebx+8] eax +
jmp loc_10094BE  +
cmp [ebx+3Ch] esi +
jz loc_10094AE  +
xor eax eax +
jmp loc_10094B1  +
mov eax [edi+8] +
push dword ptr [ebx+38h]  +
push eax  +
call ds:LoadCursorW  +
mov [ebx+1Ch] eax +
mov eax [edi+4] +
and dword ptr [ebx+4] 0FFFFBFFFh +
cmp dword ptr [ebx+28h] 0 +
mov [ebx+14h] eax +
jnz loc_10094E0  +
push ebx  +
push 25h  +
lea esi [ebx+42h] +
push esi  +
call sub_100905D  +
mov [ebx+28h] esi +
mov eax [ebx+28h] +
push 0Ch  +
pop ecx  +
lea edx [ebp+var_6C] +
push edx  +
mov esi ebx +
lea edi [ebp+var_6C] +
movs   +
mov ecx [ebx+14h] +
push eax  +
push ecx  +
call ds:GetClassInfoExW  +
mov [ebx+40h] ax +
test ax ax +
jnz loc_1009512  +
push ebx  +
push [ebp+arg_4]  +
call sub_10092BB  +
mov [ebx+40h] ax +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
xor esi esi +
cmp [ebx+30h] esi +
jz loc_100952A  +
mov eax [ebx+34h] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
mov ax [ebx+40h] +
jmp loc_100947D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push [ebp+arg_0]  +
push ecx  +
push offset unk_101F1CC  +
push offset unk_101F1F8  +
call sub_10093EC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_101FC10 0 +
push esi  +
mov esi ecx +
jnz loc_1009574  +
and dword_101FC10 0 +
lea eax [esi+20h] +
push eax  +
mov ecx offset unk_101FBE0 +
call sub_1009538  +
cmp [ebp+lpWindowName] 0 +
movzx eax ax +
jnz loc_100958F  +
and [ebp+lpWindowName] 0 +
push [ebp+lpParam]  +
mov ecx esi +
push eax  +
push [ebp+hMenu]  +
push [ebp+dwExStyle]  +
push [ebp+dwStyle]  +
push [ebp+lpWindowName]  +
push [ebp+arg_4]  +
push [ebp+hWndParent]  +
call sub_1009351  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
call sub_1001939  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax ds:DefWindowProcW +
xor edi edi +
mov [esi+4] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+20h] eax +
push dword ptr [ebp+8]  +
lea ebx [esi+28h] +
mov ecx ebx +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_1007CE0 +
mov [esi+24h] edi +
call sub_10090A2  +
mov eax 80000000h +
mov byte ptr [ebp-4] 1 +
mov [ebp-24h] eax +
mov [ebp-20h] eax +
mov dword ptr [ebp-1Ch] 800002BCh +
mov dword ptr [ebp-18h] 800001F4h +
mov dword ptr [ebp+8] 50100h +
call sub_100FBEB  +
test al al +
jz loc_100962A  +
mov dword ptr [ebp+8] 550100h +
push edi  +
push ecx  +
mov eax esp +
mov [ebp-14h] esp +
push dword ptr [ebp+8]  +
mov [eax] edi +
push 0CF0000h  +
push edi  +
push ecx  +
mov eax esp +
lea ecx [ebp-24h] +
mov [eax] ecx +
mov ecx dword_101F0F8 +
mov [ebp+8] esp +
call sub_100C92B  +
push eax  +
mov ecx esi +
call sub_100955C  +
push dword ptr [ebx]  +
push dword ptr [esi+4]  +
call ds:SetWindowTextW  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_10] +
mov [eax+20h] ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov [eax+0Ch] ecx +
xor ecx ecx +
mov dword ptr [eax+1Ch] 24h +
mov [eax+10h] ecx +
mov [eax+18h] ecx +
mov [eax+14h] ecx +
pop ebp  +
retn 14h  +
***
mov edx ds:DefWindowProcW +
mov eax ecx +
xor ecx ecx +
mov [eax+38h] ecx +
mov [eax+4] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] edx +
mov [eax+3Ch] ecx +
mov dword ptr [eax+40h] 70h +
mov [eax+44h] ecx +
mov [eax+48h] ecx +
mov [eax+4Ch] ecx +
mov dword ptr [eax+50h] 1 +
mov [eax+54h] ecx +
mov [eax+58h] ecx +
mov [eax+5Ch] ecx +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+5Ch] +
test eax eax +
jz loc_1009712  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+58h] +
test eax eax +
jz loc_100971F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+54h] +
test eax eax +
jz loc_100972C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi+14h] +
test esi esi +
jz loc_1009739  +
push esi  +
call sub_101A206  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10096BB  +
mov dword ptr [esi] offset off_1009874 +
mov dword ptr [esi+24h] offset off_1009854 +
mov dword ptr [esi+28h] offset off_100982C +
mov dword ptr [esi+2Ch] offset off_10097EC +
mov dword ptr [esi+30h] offset off_100979C +
mov dword ptr [esi+34h] offset off_1009784 +
mov dword ptr [esi+40h] 790h +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_10098C3  +
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_10098C3  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_10098C3  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_10098C3  +
xor eax eax +
inc eax  +
jmp loc_10098C5  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
xor eax eax +
cmp [ecx+0Ch] eax +
setnz al  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
mov dword ptr [eax] 14h +
mov ecx [ecx+18h] +
mov [eax+4] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax 80004001h +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
add eax 0FFFFFFF4h +
mov ecx [eax] +
push offset dword_1009934  +
push eax  +
call dword ptr [ecx]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax 80004001h +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
xor eax eax +
cmp [ecx+1Ch] eax +
setz al  +
pop ebp  +
retn 20h  +
***
xor eax eax +
retn 20h  +
***
mov eax 80004001h +
retn 4  +
***
mov eax 80004001h +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax-28h] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov dword ptr [eax+20h] 1 +
xor eax eax +
pop ebp  +
retn 4  +
***
mov eax 80004001h +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
and dword ptr [eax+20h] 0 +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_10099FF  +
mov eax 80004003h +
jmp loc_1009A07  +
mov dword ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1009A39  +
xor eax eax +
jmp loc_1009A5C  +
mov eax [ebp+arg_4] +
push edi  +
mov edi [esi] +
and dword ptr [esi] 0 +
test eax eax +
jz loc_1009A4F  +
mov ecx [eax] +
push esi  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx]  +
test edi edi +
jz loc_1009A59  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax [esi] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_0] +
cmp eax edi +
jz loc_1009A81  +
push eax  +
call SysFreeString  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
or dword ptr [eax+8] 0FFFFFFFFh +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1009AB2  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_1009A10  +
cmp dword ptr [esi] 0 +
jnz loc_1009AA6  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_1009AD5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset dword_1009AFC  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
call dword ptr [eax+8]  +
push esi  +
lea edi [esi+14h] +
push eax  +
mov ecx edi +
call sub_100901D  +
test eax eax +
jnz loc_1009B33  +
xor eax eax +
jmp loc_1009B4E  +
push dword ptr [edi]  +
mov edi [ebp+hWnd] +
push 0FFFFFFFCh  +
push edi  +
call ds:SetWindowLongW  +
test eax eax +
jz loc_1009B2F  +
mov [esi+20h] eax +
xor eax eax +
mov [esi+4] edi +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
mov eax [esi+4] +
mov edi [esi+14h] +
push 0FFFFFFFCh  +
push eax  +
call ds:GetWindowLongW  +
mov ecx eax +
xor eax eax +
cmp [ebp+arg_0] eax +
jnz loc_1009B7E  +
cmp edi ecx +
jnz loc_1009BA1  +
mov eax [esi+20h] +
mov ecx [esi+4] +
push eax  +
push 0FFFFFFFCh  +
push ecx  +
call ds:SetWindowLongW  +
test eax eax +
jz loc_1009BA1  +
mov eax ds:DefWindowProcW +
mov [esi+20h] eax +
mov eax [esi+4] +
and dword ptr [esi+4] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
cmp dword ptr [esi+54h] 0 +
jz loc_1009BE2  +
cmp dword ptr [esi+4Ch] 0 +
jz loc_1009BE2  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
mov esi [esi+58h] +
test esi esi +
jz loc_1009BE2  +
mov eax [esi] +
lea ecx [ebp+Rect] +
push ecx  +
push ecx  +
push esi  +
call dword ptr [eax+1Ch]  +
xor eax eax +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:GetClientRect +
push edi  +
push dword ptr [ebp+14h]  +
mov edi [ebp+8] +
push dword ptr [edi-28h]  +
call esi  +
push dword ptr [ebp+18h]  +
push dword ptr [edi-28h]  +
call esi  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
cmp eax [ebp+arg_0] +
jz loc_1009C35  +
push offset dword_1009C3C  +
push [ebp+arg_0]  +
push ecx  +
call sub_1009A28  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
cmp eax [ebp+arg_0] +
jz loc_1009C6B  +
push offset dword_1009C70  +
push [ebp+arg_0]  +
push ecx  +
call sub_1009A28  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
cmp eax [ebp+arg_0] +
jz loc_1009C9F  +
push offset nullsub_1  +
push [ebp+arg_0]  +
push ecx  +
call sub_1009A28  +
pop ebp  +
retn 4  +
***
call sub_1005901  +
mov ebx ecx +
mov [ebp-18h] ebx +
mov edi [ebp+8] +
mov eax [edi] +
lea ecx [ebp-24h] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
xor ecx ecx +
cmp eax ecx +
jl loc_1009E27  +
mov eax [ebp-24h] +
movzx eax word ptr [eax+2Ch] +
mov esi eax +
mov [ebp-1Ch] ecx +
mov [ebx+18h] eax +
mov [ebx+14h] ecx +
cmp esi ecx +
jz loc_1009D7B  +
push 0Ch  +
pop edx  +
mul  edx +
mov [ebp-4] ecx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call sub_1003218  +
pop ecx  +
mov [ebp-20h] eax +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1009D42  +
push offset loc_1008F16  +
push offset loc_1009A8C  +
push esi  +
lea edi [eax+4] +
push 0Ch  +
push edi  +
mov [eax] esi +
call sub_101A57A  +
jmp loc_1009D44  +
xor edi edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-1Ch] edi +
jmp loc_1009D5A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1009D57 +
retn   +
mov ebx [ebp-18h] +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_1009D76  +
mov eax [ebp+8] +
push dword ptr [ebp-24h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax 8007000Eh +
jmp loc_1009E29  +
mov edi [ebp+8] +
xor ecx ecx +
cmp [ebx+18h] ecx +
mov [ebp-18h] ecx +
jle loc_1009E18  +
mov esi [ebp-1Ch] +
add esi 8 +
jmp loc_1009D91  +
xor ecx ecx +
mov [esi-4] ecx +
mov [esi] ecx +
mov eax [edi] +
lea ecx [ebp-20h] +
push ecx  +
push dword ptr [ebp-18h]  +
push edi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_1009E06  +
xor eax eax +
mov [ebp-14h] eax +
mov ecx [edi] +
push eax  +
push eax  +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov eax [ebp-20h] +
push dword ptr [eax]  +
mov dword ptr [ebp-4] 3 +
push edi  +
call dword ptr [ecx+30h]  +
test eax eax +
jl loc_1009DF0  +
mov eax [ebp-14h] +
and dword ptr [ebp-14h] 0 +
lea edi [esi-8] +
push eax  +
mov ecx edi +
call sub_1009A66  +
push dword ptr [edi]  +
call SysStringLen  +
mov edi [ebp+8] +
mov [esi-4] eax +
mov eax [ebp-20h] +
mov eax [eax] +
mov [esi] eax +
push dword ptr [ebp-20h]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+50h]  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call SysFreeString  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
add esi 0Ch +
cmp eax [ebx+18h] +
jl loc_1009D8F  +
mov eax [ebp-1Ch] +
push dword ptr [ebp-24h]  +
mov [ebx+14h] eax +
mov eax [edi] +
push edi  +
call dword ptr [eax+4Ch]  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
test esi esi +
jz loc_1009E66  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1009E50  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [esi+14h] +
and dword ptr [esi+0Ch] 0 +
test ecx ecx +
jz loc_1009E62  +
push 3  +
call sub_1008F24  +
and dword ptr [esi+14h] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
test eax eax +
jz locret_1009E7C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx] +
push edi  +
test eax eax +
jnz loc_1009E99  +
cmp [ebp+arg_0] eax +
jnz loc_1009EE9  +
mov al 1 +
jmp loc_1009EEB  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1009EE9  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
mov ecx [eax] +
push esi  +
lea edx [ebp+var_4] +
push edx  +
mov esi offset dword_1009EF0 +
push esi  +
push eax  +
call dword ptr [ecx]  +
mov eax [edi] +
lea ecx [ebp+var_8] +
push ecx  +
push esi  +
push edi  +
call dword ptr [eax]  +
mov eax [ebp+var_8] +
cmp [ebp+var_4] eax +
pop esi  +
setz byte ptr [ebp+arg_0+3]  +
test eax eax +
jz loc_1009ED7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1009EE4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al byte ptr [ebp+arg_0+3] +
jmp loc_1009EEB  +
xor al al +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 40h +
push edi  +
mov edi [eax+54h] +
test edi edi +
jz loc_1009F88  +
cmp [ebp+arg_4] 0 +
jz loc_1009F88  +
push esi  +
mov esi VariantInit +
lea eax [ebp+pvarg] +
push eax  +
call esi  +
lea eax [ebp+var_30] +
push eax  +
call esi  +
lea eax [ebp+var_20] +
push eax  +
call esi  +
lea eax [ebp+var_10] +
push eax  +
call esi  +
push [ebp+arg_4]  +
lea ecx [ebp+arg_0] +
call sub_10090A2  +
mov ecx [edi] +
lea edx [ebp+pvarg] +
push edx  +
lea edx [ebp+var_30] +
push edx  +
lea edx [ebp+var_20] +
push edx  +
lea edx [ebp+var_10] +
push edx  +
push dword ptr [eax]  +
push edi  +
call dword ptr [ecx+2Ch]  +
push [ebp+arg_0]  +
call SysFreeString  +
mov esi VariantClear +
lea eax [ebp+var_10] +
push eax  +
call esi  +
lea eax [ebp+var_20] +
push eax  +
call esi  +
lea eax [ebp+var_30] +
push eax  +
call esi  +
lea eax [ebp+pvarg] +
push eax  +
call esi  +
pop esi  +
xor eax eax +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
cmp dword ptr [ebp+0Ch] 0FFFFEA78h +
jz loc_1009FAC  +
mov eax 8002801Dh +
jmp locret_1009FD6  +
push esi  +
push edi  +
mov edi [ebp+20h] +
push 3  +
pop eax  +
mov [ebp-10h] ax +
mov eax [ebp+8] +
mov eax [eax+1Ch] +
mov [ebp-8] eax +
lea esi [ebp-10h] +
movs   +
movs   +
movs   +
lea eax [ebp-10h] +
push eax  +
movs   +
call VariantClear  +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_1009FFC  +
mov ecx [eax] +
push esi  +
push offset stru_10081E4  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_100A025  +
mov ecx [eax] +
push esi  +
push offset dword_100A02C  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100A055  +
mov eax 80070057h +
jmp locret_100A0B6  +
mov ecx [eax] +
and [ebp+var_4] 0 +
and [ebp+arg_0] 0 +
push esi  +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1007D64  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_100A099  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_100A099  +
push [ebp+arg_C]  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100A0A6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100A0B3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100A0D3  +
mov eax 80070057h +
jmp locret_100A131  +
mov ecx [eax] +
and [ebp+var_4] 0 +
and [ebp+arg_0] 0 +
push esi  +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1007D64  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_100A114  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_100A114  +
mov eax [ebp+arg_0] +
push [ebp+arg_8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100A121  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100A12E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
call sub_1005901  +
mov edi [ebp+8] +
test edi edi +
jnz loc_100A154  +
mov eax 80070057h +
jmp loc_100A1AD  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
push 0Ch  +
call sub_1001E13  +
pop ecx  +
mov esi eax +
jmp loc_100A174  +
mov eax offset loc_100A16E +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jnz loc_100A181  +
mov dword ptr [ebp+8] 8007000Eh +
jmp loc_100A1AA  +
mov eax [ebp+0Ch] +
mov [esi] eax +
mov eax [ebp+10h] +
mov [esi+4] eax +
lea ebx [edi+0Ch] +
push ebx  +
call ds:EnterCriticalSection  +
mov eax [edi+8] +
and dword ptr [ebp+8] 0 +
mov [esi+8] eax +
push ebx  +
mov [edi+8] esi +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi]  +
mov edi ecx +
call sub_1009E82  +
test al al +
jnz loc_100A1E1  +
mov esi [esi] +
push offset dword_100A1EC  +
push esi  +
push edi  +
call sub_1009A28  +
jmp loc_100A1E3  +
mov eax [edi] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push [ebp+hWnd]  +
mov ecx edi +
call sub_1009B11  +
lea eax [ebp+hWnd] +
push eax  +
push offset stru_10081E4  +
push 3  +
xor ebx ebx +
push ebx  +
push offset stru_100A3B8  +
mov [ebp+hWnd] ebx +
call CoCreateInstance  +
mov esi eax +
cmp esi ebx +
jge loc_100A24F  +
mov eax [ebp+hWnd] +
cmp eax ebx +
jz loc_100A248  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_100A3AE  +
mov esi edi +
neg esi  +
lea eax [edi+28h] +
sbb esi esi +
and esi eax +
mov eax [ebp+hWnd] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jz loc_100A280  +
mov eax [ebp+hWnd] +
cmp eax ebx +
jz loc_100A278  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
jmp loc_100A3AE  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [edi+4]  +
call ds:GetClientRect  +
mov eax [ebp+hWnd] +
mov ecx [eax] +
lea edx [ebp+Rect] +
push edx  +
push dword ptr [edi+4]  +
lea edx [ebp+var_6C] +
push ebx  +
push esi  +
push edx  +
push 0FFFFFFFBh  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_100A23B  +
push [ebp+hWnd]  +
lea esi [edi+54h] +
mov ecx esi +
call sub_1009C1B  +
mov eax [esi] +
cmp eax ebx +
jnz loc_100A2D5  +
mov eax [ebp+hWnd] +
cmp eax ebx +
jz loc_100A2CB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 80004005h +
jmp loc_100A3AE  +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+0BCh]  +
mov eax [esi] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+110h]  +
mov eax [esi] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+0C4h]  +
lea eax [edi+44h] +
push eax  +
push offset dword_10081D4  +
lea eax [edi+24h] +
push eax  +
push dword ptr [esi]  +
call sub_100A041  +
push dword ptr [esi]  +
lea ebx [edi+58h] +
mov ecx ebx +
call sub_1009C51  +
mov ebx [ebx] +
test ebx ebx +
jz loc_100A32B  +
mov eax [ebx] +
lea ecx [ebp+Rect] +
push ecx  +
push ecx  +
push ebx  +
call dword ptr [eax+1Ch]  +
push dword ptr [esi]  +
lea ecx [edi+5Ch] +
call sub_1009C85  +
mov edi VariantInit +
mov esi [esi] +
lea eax [ebp+pvarg] +
push eax  +
call edi  +
lea eax [ebp+var_40] +
push eax  +
call edi  +
lea eax [ebp+var_30] +
push eax  +
call edi  +
lea eax [ebp+var_20] +
push eax  +
call edi  +
push [ebp+arg_8]  +
lea ecx [ebp+arg_0] +
call sub_10090A2  +
mov ecx [esi] +
lea edx [ebp+pvarg] +
push edx  +
lea edx [ebp+var_40] +
push edx  +
lea edx [ebp+var_30] +
push edx  +
lea edx [ebp+var_20] +
push edx  +
push dword ptr [eax]  +
push esi  +
call dword ptr [ecx+2Ch]  +
push [ebp+arg_0]  +
call SysFreeString  +
mov esi VariantClear +
lea eax [ebp+var_20] +
push eax  +
call esi  +
lea eax [ebp+var_30] +
push eax  +
call esi  +
lea eax [ebp+var_40] +
push eax  +
call esi  +
lea eax [ebp+pvarg] +
push eax  +
call esi  +
mov eax [ebp+hWnd] +
test eax eax +
jz loc_100A3AC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+44h] +
test eax eax +
jz loc_100A3EF  +
push eax  +
push offset dword_10081D4  +
push dword ptr [esi+54h]  +
call sub_100A0BF  +
and dword ptr [esi+44h] 0 +
push dword ptr [esi+54h]  +
lea ecx [ebp+arg_0] +
call sub_1009FDF  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp dword ptr [esi+4] 0 +
jz loc_100A414  +
push 0  +
mov ecx esi +
call sub_1009B59  +
mov eax [ebp+arg_0] +
pop esi  +
test eax eax +
jz loc_100A422  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov esi ecx +
mov eax [ebp+0Ch] +
cmp eax 1Bh +
jnz loc_100A459  +
xor ebx ebx +
push ebx  +
push ebx  +
push 10h  +
push dword ptr [esi+4]  +
call ds:PostMessageW  +
xor eax eax +
jmp loc_100A511  +
mov ecx [ebp+8] +
push dword ptr [esi+54h]  +
mov [ebp-30h] eax +
mov eax [ebp+10h] +
mov [ebp-34h] ecx +
lea ecx [ebp+8] +
mov [ebp-2Ch] eax +
call sub_1009FDF  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [esi+4]  +
xor ebx ebx +
mov [ebp-4] ebx +
call ds:GetClientRect  +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push dword ptr [esi+4]  +
lea edx [esi+28h] +
push ebx  +
push edx  +
push ebx  +
push 0FFFFFFFCh  +
push eax  +
call dword ptr [ecx+2Ch]  +
push dword ptr [esi+54h]  +
lea ecx [ebp+0Ch] +
call sub_100A008  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
lea edx [ebp-38h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+14h]  +
mov [ebp-4] bl +
test eax eax +
jnz loc_100A4F0  +
mov eax [ebp+14h] +
mov dword ptr [eax] 1 +
mov eax [ebp+0Ch] +
cmp eax ebx +
jz loc_100A4D6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_100A452  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100A452  +
mov eax [ebp+0Ch] +
cmp eax ebx +
jz loc_100A4FD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_100A50E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax ecx +
push [ebp+arg_0]  +
add ecx 4 +
neg eax  +
sbb eax eax +
and eax ecx +
push eax  +
call sub_100A13A  +
pop ebp  +
retn 8  +
***
call sub_1001E69  +
mov esi ecx +
xor ebx ebx +
cmp [esi+0Ch] ebx +
jz loc_100A567  +
cmp [esi+14h] ebx +
jz loc_100A567  +
xor eax eax +
jmp loc_100A752  +
mov eax dword_101F0CC +
add eax 10h +
mov [ebp-234h] eax +
push eax  +
mov [ebp-4] ebx +
call ds:EnterCriticalSection  +
mov byte ptr [ebp-230h] 1 +
mov dword ptr [ebp-21Ch] 80004005h +
cmp [esi+0Ch] ebx +
jnz loc_100A720  +
mov edi [esi+4] +
push edi  +
push offset unk_101F4E8  +
mov [ebp-22Ch] ebx +
call sub_1009895  +
test eax eax +
jz loc_100A61A  +
mov eax 0FFFFh +
mov ecx eax +
cmp [esi+8] cx +
jnz loc_100A61A  +
cmp [esi+0Ah] ax +
jnz loc_100A61A  +
mov edi 104h +
push edi  +
lea eax [ebp-218h] +
push eax  +
push hInstance  +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jz loc_100A726  +
cmp eax edi +
jz loc_100A726  +
lea eax [ebp-22Ch] +
push eax  +
lea eax [ebp-218h] +
push eax  +
mov [ebp-220h] ebx +
call LoadTypeLib  +
lea ecx [ebp-220h] +
mov [ebp-21Ch] eax +
call sub_1009A9F  +
jmp loc_100A63B  +
lea eax [ebp-22Ch] +
push eax  +
push dword ptr [ebp+8]  +
movzx eax word ptr [esi+0Ah] +
push eax  +
movzx eax word ptr [esi+8] +
push eax  +
push edi  +
call LoadRegTypeLib  +
mov [ebp-21Ch] eax +
cmp [ebp-21Ch] ebx +
jl loc_100A726  +
mov [ebp-224h] ebx +
mov eax [ebp-22Ch] +
mov ecx [eax] +
lea edx [ebp-224h] +
push edx  +
push dword ptr [esi]  +
mov byte ptr [ebp-4] 1 +
push eax  +
call dword ptr [ecx+18h]  +
cmp eax ebx +
mov [ebp-21Ch] eax +
jl loc_100A6FF  +
push dword ptr [ebp-224h]  +
lea ecx [ebp-228h] +
call sub_1009ABE  +
mov [ebp-220h] ebx +
lea eax [ebp-220h] +
push eax  +
push dword ptr [ebp-224h]  +
mov byte ptr [ebp-4] 3 +
call sub_1009AE1  +
test eax eax +
jl loc_100A6B7  +
lea eax [ebp-220h] +
push eax  +
lea ecx [ebp-228h] +
call sub_100A1BA  +
mov eax [ebp-228h] +
push esi  +
mov [esi+0Ch] eax +
mov ecx dword_101F0CC +
push offset loc_1009E36  +
mov [ebp-228h] ebx +
call sub_100A51E  +
mov eax [ebp-220h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_100A6EB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-228h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_100A6FF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-22Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-224h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_100A726  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100A726  +
mov [ebp-21Ch] ebx +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_100A740  +
cmp [esi+14h] ebx +
jnz loc_100A740  +
push eax  +
mov ecx esi +
call sub_1009CB9  +
mov [ebp-21Ch] eax +
push dword ptr [ebp-234h]  +
call ds:LeaveCriticalSection  +
mov eax [ebp-21Ch] +
call sub_1002F11  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_100A7D8  +
mov eax 100h +
cmp [ebp+0Ch] eax +
jnz loc_100A79B  +
lea edx [ebp+0Ch] +
push edx  +
push dword ptr [ebp+14h]  +
mov dword ptr [ebp+0Ch] 1 +
push dword ptr [ebp+10h]  +
push eax  +
call sub_100A42D  +
cmp dword ptr [ebp+0Ch] 0 +
mov ecx [ebp+18h] +
mov [ecx] eax +
jz loc_100A7D8  +
xor eax eax +
inc eax  +
jmp loc_100A7DA  +
cmp dword ptr [ebp+0Ch] 82h +
jnz loc_100A7BA  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+14h]  +
push 0  +
call ds:PostQuitMessage  +
mov eax [ebp+18h] +
and dword ptr [eax] 0 +
jmp loc_100A796  +
***
cmp dword ptr [ebp+0Ch] 5 +
jnz loc_100A7D8  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 5  +
call sub_1009BAC  +
mov ecx [ebp+18h] +
mov [ecx] eax +
jmp loc_100A796  +
***
xor eax eax +
pop ebp  +
retn 18h  +
***
call sub_1001939  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1007CE0 +
mov eax [esi+24h] +
mov dword ptr [ebp-4] 1 +
test eax eax +
jz loc_100A81A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov eax [esi+24h] +
add eax 24h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [esi+28h]  +
and dword ptr [esi+4] 0 +
call SysFreeString  +
mov esi [esi+14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_100A838  +
push esi  +
call sub_101A206  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100A7E3  +
test byte ptr [ebp+8] 1 +
jz loc_100A85D  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1009740  +
mov dword ptr [esi] offset off_1007EC8 +
mov dword ptr [esi+24h] offset off_1007E94 +
mov dword ptr [esi+28h] offset off_1007E58 +
mov dword ptr [esi+2Ch] offset off_1007E04 +
mov dword ptr [esi+30h] offset off_1007DA4 +
mov dword ptr [esi+34h] offset off_1007D78 +
mov ecx dword_101F0CC +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_100A8DC  +
cmp dword ptr [eax+4] 0 +
jnz loc_100A8DC  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_100A8DC  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_100A8DC  +
xor eax eax +
inc eax  +
jmp loc_100A8DE  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_100A97C  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_100A97C  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jnz loc_100A90E  +
mov eax 80004003h +
jmp loc_100A981  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_100A8B2  +
test eax eax +
jz loc_100A96E  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_100A981  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_100A94C  +
push [ebp+arg_8]  +
push eax  +
call sub_1009895  +
test eax eax +
jz loc_100A96B  +
cmp edi 1 +
jz loc_100A91D  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_100A981  +
cmp [ebp+arg_4] 0 +
jnz loc_100A96B  +
test eax eax +
jl loc_100A981  +
add esi 0Ch +
mov edi [esi+8] +
test edi edi +
jnz loc_100A92F  +
mov eax 80004002h +
jmp loc_100A981  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_100A9A8  +
push ecx  +
call sub_100A8E7  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+14h]  +
mov eax [eax+14h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
dec dword ptr [eax+14h]  +
push esi  +
mov esi [eax+14h] +
jnz loc_100AA37  +
lea ecx [eax-24h] +
test ecx ecx +
jz loc_100AA37  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFDCh +
call sub_100A98D  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100AA43  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_100AA01  +
***
sub dword ptr [esp+4] 8 +
jmp loc_100AA43  +
***
sub dword ptr [esp+4] 10h +
jmp loc_100AA01  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_100AA43  +
***
sub dword ptr [esp+4] 10h +
jmp loc_100AA43  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100AA18  +
***
sub dword ptr [esp+4] 8 +
jmp loc_100AA18  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_100AA18  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100AA01  +
***
sub dword ptr [esp+4] 10h +
jmp loc_100AA18  +
***
sub dword ptr [esp+4] 8 +
jmp loc_100AA01  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1007EC8 +
mov dword ptr [esi+24h] offset off_1007E94 +
mov dword ptr [esi+28h] offset off_1007E58 +
mov dword ptr [esi+2Ch] offset off_1007E04 +
mov dword ptr [esi+30h] offset off_1007DA4 +
mov dword ptr [esi+34h] offset off_1007D78 +
mov dword ptr [esi+38h] 0C0000001h +
mov ecx dword_101F0CC +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp sub_1009700  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100AB07  +
test byte ptr [ebp+8] 1 +
jz loc_100AB6E  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
test edi edi +
jnz loc_100AB91  +
mov eax 80004003h +
jmp loc_100ABB6  +
xor eax eax +
cmp [esi+0Ch] eax +
jnz loc_100ABA0  +
push [ebp+arg_0]  +
call sub_100A543  +
mov ecx [esi+0Ch] +
mov [edi] ecx +
cmp dword ptr [esi+0Ch] 0 +
jz loc_100ABB6  +
mov esi [esi+0Ch] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+0Ch] eax +
jz loc_100ABD2  +
cmp [ecx+14h] eax +
jnz loc_100ABD8  +
pop ebp  +
jmp sub_100A543  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100ABF3  +
mov eax 8002000Bh +
jmp loc_100ABFE  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100AB7A  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push [ebp+arg_C]  +
mov ebx ecx +
call sub_100ABC1  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_100AC9E  +
cmp dword ptr [ebx+14h] 0 +
push esi  +
push edi  +
jz loc_100AC8A  +
cmp [ebp+arg_8] 1 +
jnz loc_100AC8A  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
call ds:lstrlenW  +
mov edx [ebx+18h] +
dec edx  +
mov [ebp+var_8] eax +
js loc_100AC8A  +
mov ecx [ebx+14h] +
mov eax edx +
imul eax eax +
mov [ebp+var_C] ecx +
lea ecx [eax+ecx+4] +
mov [ebp+arg_C] eax +
mov [ebp+var_4] ecx +
mov eax [ebp+var_8] +
cmp eax [ecx] +
jnz loc_100AC78  +
mov ecx [ebp+arg_C] +
mov eax [ebx+14h] +
mov esi [ebp+arg_4] +
mov edi [esi] +
add eax ecx +
mov ecx [eax+4] +
mov esi [eax] +
add ecx ecx +
xor eax eax +
cmps   +
jz loc_100ACA3  +
mov ecx [ebp+var_4] +
sub [ebp+arg_C] 0Ch +
dec edx  +
sub ecx 0Ch +
mov [ebp+var_4] ecx +
test edx edx +
jge loc_100AC57  +
push [ebp+arg_10]  +
mov ebx [ebx+0Ch] +
push [ebp+arg_8]  +
mov eax [ebx] +
push [ebp+arg_4]  +
push ebx  +
call dword ptr [eax+28h]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
mov eax [ebp+var_C] +
imul edx edx +
mov eax [edx+eax+8] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
xor eax eax +
jmp loc_100AC9C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1009700  +
test byte ptr [ebp+8] 1 +
jz loc_100ACD5  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx dword_101F0F8 +
call sub_100CC45  +
push eax  +
push 0  +
push 80h  +
push dword ptr [esi+4]  +
call ds:PostMessageW  +
push 60h  +
call sub_1001E13  +
pop ecx  +
test eax eax +
jz loc_100AD19  +
push 0  +
mov ecx eax +
call sub_100A869  +
jmp loc_100AD1B  +
xor eax eax +
mov [esi+24h] eax +
test eax eax +
jz loc_100AD3A  +
add eax 24h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
push dword ptr [esi+28h]  +
mov eax [esi+24h] +
push dword ptr [esi+4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
xor eax eax +
pop esi  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx offset off_101F814 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100ABE1  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_101F814 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100AC07  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_100ADB9  +
cmp dword ptr [ebp+0Ch] 1 +
jnz loc_100ADB9  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 1  +
call sub_100ACE1  +
mov ecx [ebp+18h] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_100ADBB  +
xor eax eax +
pop ebp  +
retn 18h  +
***
call sub_1001939  +
xor ebx ebx +
cmp [ebp+8] ebx +
jz loc_100AF19  +
mov esi offset CriticalSection +
push esi  +
call ds:EnterCriticalSection  +
mov ecx dword_101F834 +
cmp ecx ebx +
jz loc_100AE12  +
push dword ptr [ebp+8]  +
call sub_1009150  +
mov eax dword_101F834 +
push dword ptr [eax+4]  +
call sub_100FF18  +
push esi  +
call ds:LeaveCriticalSection  +
jmp loc_100AF19  +
push 2Ch  +
call sub_1001E13  +
pop ecx  +
mov [ebp-10h] eax +
mov [ebp-4] ebx +
cmp eax ebx +
jz loc_100AE30  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_10095B6  +
jmp loc_100AE32  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword_101F834 eax +
push esi  +
cmp eax ebx +
jz loc_100AEB1  +
call ds:LeaveCriticalSection  +
push dword ptr [ebp+0Ch]  +
mov eax dword_101F834 +
push dword ptr [eax+4]  +
call ds:ShowWindow  +
mov eax dword_101F834 +
push dword ptr [eax+4]  +
call ds:UpdateWindow  +
mov edi ds:GetMessageW +
jmp loc_100AEA2  +
lea eax [ebp-2Ch] +
push eax  +
call ds:TranslateMessage  +
mov eax 100h +
cmp [ebp-28h] eax +
jnz loc_100AE98  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push eax  +
mov eax dword_101F834 +
push dword ptr [eax+4]  +
call ds:SendMessageW  +
jmp loc_100AEA2  +
lea eax [ebp-2Ch] +
push eax  +
call ds:DispatchMessageW  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp-2Ch] +
push eax  +
call edi  +
test eax eax +
jz loc_100AEB7  +
jmp loc_100AE6D  +
call ds:LeaveCriticalSection  +
push esi  +
call ds:EnterCriticalSection  +
mov ecx dword_101F834 +
cmp ecx ebx +
jz loc_100AED5  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov dword_101F834 ebx +
push esi  +
call ds:LeaveCriticalSection  +
push ebx  +
push offset aQuarui_details  +
push ebx  +
push ebx  +
call ds:FindWindowExW  +
mov ecx dword_101F0F8 +
mov esi eax +
call sub_100CB29  +
test al al +
jnz loc_100AF03  +
cmp byte_1020779 bl +
jz loc_100AF19  +
cmp esi ebx +
jz loc_100AF12  +
push esi  +
call ds:IsWindow  +
test eax eax +
jnz loc_100AF19  +
push ebx  +
call ds:PostQuitMessage  +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_100AFA9  +
cmp word ptr [edx] 0 +
jnz loc_100AF8E  +
push 0Eh  +
jmp loc_100AFAB  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100AF94  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_100AFAC  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_100AFBD  +
cmp word ptr [edx] 0 +
jnz loc_100AFC2  +
mov edx offset aNull_0 +
jmp loc_100AFC2  +
mov edx offset aNull +
push 0  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_100B01F  +
cmp word ptr [edx] 0 +
jnz loc_100B003  +
mov [ebp+arg_14] 0Eh +
jmp loc_100B026  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B008  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_14] eax +
jmp loc_100B026  +
mov [ebp+arg_14] 0Ah +
mov ebx offset aNull +
test edx edx +
jz loc_100B03C  +
cmp word ptr [edx] 0 +
jnz loc_100B03E  +
mov edx offset aNull_0 +
jmp loc_100B03E  +
mov edx ebx +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_100B068  +
cmp word ptr [edi] 0 +
jnz loc_100B04F  +
push 0Eh  +
jmp loc_100B06A  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B054  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_100B06B  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_100B080  +
cmp word ptr [edi] 0 +
jnz loc_100B07C  +
mov eax offset aNull_0 +
jmp loc_100B082  +
mov eax edi +
jmp loc_100B082  +
mov eax ebx +
push 0  +
push 4  +
lea esi [ebp+arg_18] +
push esi  +
push [ebp+arg_14]  +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_100B0E3  +
cmp word ptr [edx] 0 +
jnz loc_100B0C8  +
push 0Eh  +
jmp loc_100B0E5  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B0CE  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_100B0E6  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_100B0F7  +
cmp word ptr [edx] 0 +
jnz loc_100B0FC  +
mov edx offset aNull_0 +
jmp loc_100B0FC  +
mov edx offset aNull +
push 0  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
test edx edx +
jz loc_100B188  +
cmp word ptr [edx] 0 +
jnz loc_100B16D  +
push 0Eh  +
jmp loc_100B18A  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B173  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_100B18B  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_100B19C  +
cmp word ptr [edx] 0 +
jnz loc_100B1A1  +
mov edx offset aNull_0 +
jmp loc_100B1A1  +
mov edx offset aNull +
push 0  +
push eax  +
push edx  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
test edx edx +
jz loc_100B1FB  +
cmp word ptr [edx] 0 +
jnz loc_100B1E0  +
push 0Eh  +
jmp loc_100B1FD  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B1E6  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_100B1FE  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_100B20F  +
cmp word ptr [edx] 0 +
jnz loc_100B214  +
mov edx offset aNull_0 +
jmp loc_100B214  +
mov edx offset aNull +
push 0  +
push 4  +
lea ecx [ebp+arg_18] +
push ecx  +
push eax  +
push edx  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
pop eax  +
push eax  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
lea ecx [ebp+arg_18] +
push ecx  +
push eax  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 38h +
pop ebp  +
retn 20h  +
***
test ecx ecx +
jz loc_100B2E2  +
test eax eax +
jz loc_100B2E2  +
mov edx [ecx] +
cmp edx [eax] +
jnz loc_100B2DF  +
mov edx [ecx+8] +
cmp edx [eax+8] +
jnz loc_100B2DF  +
mov edx [ecx+4] +
cmp edx [eax+4] +
jnz loc_100B2DF  +
mov dx [ecx+0Ch] +
cmp dx [eax+0Ch] +
jnz loc_100B2DF  +
mov eax [eax+10h] +
mov ecx [ecx+10h] +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_100B2D4  +
test dx dx +
jz loc_100B2D0  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_100B2D4  +
add ecx 4 +
add eax 4 +
test dx dx +
jnz loc_100B2AE  +
xor eax eax +
jmp loc_100B2D9  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100B2DF  +
inc eax  +
retn   +
xor eax eax +
retn   +
xor edx edx +
cmp ecx eax +
setz dl  +
mov eax edx +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
cmp edx [ecx+8] +
jb loc_100B331  +
xor eax eax +
jmp loc_100B342  +
mov ecx [ecx] +
test ecx ecx +
jz loc_100B32D  +
mov eax ecx +
test edx edx +
jbe loc_100B342  +
dec edx  +
mov eax [eax] +
jnz loc_100B33D  +
pop ebp  +
retn 4  +
***
int 3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
cmp eax [edi+8] +
jnz loc_100B41B  +
mov eax [esi+0Ch] +
cmp eax [edi+0Ch] +
jnz loc_100B41B  +
mov eax [esi+10h] +
cmp eax [edi+10h] +
jnz loc_100B41B  +
mov eax [esi+14h] +
cmp eax [edi+14h] +
jnz loc_100B41B  +
mov eax [esi+18h] +
cmp eax [edi+18h] +
jnz loc_100B41B  +
mov eax [esi+20h] +
cmp eax [edi+20h] +
jnz loc_100B41B  +
mov eax [esi+2Ch] +
cmp eax [edi+2Ch] +
jnz loc_100B41B  +
mov eax [edi+40h] +
mov ecx [esi+40h] +
call sub_100B280  +
test eax eax +
jz loc_100B41B  +
add esi 24h +
mov eax [esi] +
add edi 24h +
mov ecx [edi] +
mov [ebp+arg_0] eax +
mov [ebp+var_4] ecx +
test eax eax +
jz loc_100B411  +
cmp [ebp+var_4] 0 +
jz loc_100B40B  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_10035D6  +
mov ebx [eax] +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
call sub_10035D6  +
push dword ptr [eax]  +
mov ecx ebx +
call sub_100B659  +
test eax eax +
jnz loc_100B41B  +
cmp [ebp+arg_0] eax +
jz loc_100B411  +
jmp loc_100B3D9  +
cmp [ebp+arg_0] 0 +
jnz loc_100B41B  +
cmp [ebp+var_4] 0 +
jnz loc_100B41B  +
xor eax eax +
jmp loc_100B41E  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+2Ch] +
push edi  +
xor edi edi +
test eax eax +
jnz loc_100B461  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100B45D  +
test byte ptr [eax+1Ch] 4 +
jz loc_100B45D  +
push offset dword_1001E34  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
xor eax eax +
jmp loc_100B4AB  +
push esi  +
cmp eax [ebp+arg_0] +
jbe loc_100B484  +
push [ebp+arg_0]  +
lea esi [ecx+24h] +
mov ecx esi +
call sub_100B320  +
test eax eax +
jz loc_100B4A8  +
push eax  +
mov ecx esi +
call sub_10035F8  +
mov edi [eax] +
jmp loc_100B4A8  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100B4A8  +
test byte ptr [eax+1Ch] 4 +
jz loc_100B4A8  +
push offset dword_1001E34  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov ecx [ecx] +
sub ecx 10h +
jmp sub_10018D0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+40h] +
push esi  +
test eax eax +
jz loc_100B533  +
mov eax [eax+10h] +
test eax eax +
jz loc_100B50B  +
mov esi [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1002AF1  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100B564  +
test byte ptr [eax+1Ch] 4 +
jz loc_100B564  +
push dword ptr [esi]  +
push offset dword_1001E34  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF78  +
jmp loc_100B564  +
mov ecx [ebp+arg_0] +
push offset WindowName  +
call sub_1001D49  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100B564  +
test byte ptr [eax+1Ch] 4 +
jz loc_100B564  +
push offset dword_1001E34  +
push 26h  +
jmp loc_100B559  +
mov ecx [ebp+arg_0] +
push offset WindowName  +
call sub_1001D49  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100B564  +
test byte ptr [eax+1Ch] 4 +
jz loc_100B564  +
push offset dword_1001E34  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov esi ecx +
xor edi edi +
call sub_1002A98  +
push offset dword_101F10C  +
lea ecx [ebp-10h] +
mov ebx eax +
call sub_1001865  +
and [ebp-4] edi +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_100B4C4  +
mov eax [ebp-10h] +
cmp ebx 3 +
jnz loc_100B5B3  +
xor ecx ecx +
cmp [eax-0Ch] ecx +
setle cl  +
inc ecx  +
mov edi ecx +
lea ecx [eax-10h] +
call sub_10018D0  +
mov eax edi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
mov edi ecx +
cmp dword ptr [edi+2Ch] 0 +
jnz loc_100B5DC  +
xor al al +
jmp loc_100B619  +
push ebx  +
push esi  +
lea esi [edi+24h] +
mov ebx [esi] +
mov [ebp+var_4] ebx +
call sub_100B56E  +
mov [ebp+var_8] eax +
test ebx ebx +
jz loc_100B611  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10035D6  +
mov ecx [eax] +
test ecx ecx +
jz loc_100B60B  +
push [ebp+var_8]  +
call sub_100C771  +
cmp [ebp+var_4] 0 +
jnz loc_100B5F2  +
pop esi  +
mov byte ptr [edi+3Ch] 1 +
mov al 1 +
pop ebx  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_18] +
push eax  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push ebx  +
mov eax ecx +
mov ecx [eax+1Ch] +
push esi  +
push edi  +
test ecx ecx +
jz loc_100B6DA  +
mov esi [edx+1Ch] +
test esi esi +
jz loc_100B6DA  +
mov bl [eax] +
cmp bl [edx] +
jnz loc_100B6D5  +
mov edi [eax+4] +
cmp edi [edx+4] +
jnz loc_100B6D5  +
mov edi [ecx] +
cmp edi [esi] +
jnz loc_100B6D5  +
mov bl [ecx+4] +
cmp bl [esi+4] +
jnz loc_100B6D5  +
mov di [ecx+8] +
cmp di [esi+8] +
jnz loc_100B6D5  +
mov ecx [ecx+10h] +
cmp ecx [esi+10h] +
jnz loc_100B6D5  +
movzx ecx word ptr [eax+20h] +
cmp cx [edx+20h] +
jnz loc_100B6D5  +
mov ebx [eax+1Ch] +
movzx ecx word ptr [ebx+8] +
mov edi [esi+0Ch] +
mov esi [ebx+0Ch] +
shl ecx 2 +
xor ebx ebx +
cmps   +
jnz loc_100B6D5  +
movzx ecx word ptr [eax+20h] +
mov esi [eax+24h] +
mov edi [edx+24h] +
shl ecx 2 +
xor eax eax +
cmps   +
jz loc_100B6E2  +
xor eax eax +
inc eax  +
jmp loc_100B6E2  +
xor eax eax +
cmp ecx [edx+1Ch] +
setnz al  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
retn   +
***
mov eax [ecx+1Ch] +
test eax eax +
jz loc_100B702  +
mov al [eax+4] +
retn   +
xor al al +
retn   +
***
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
movzx esi word ptr [ecx+20h] +
xor al al +
cmp esi edx +
pop esi  +
jbe loc_100B73E  +
mov eax [ecx+24h] +
mov eax [eax+edx*4] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov al 1 +
pop ebp  +
retn 8  +
***
mov eax [ecx+1Ch] +
test eax eax +
jz loc_100B753  +
movzx eax word ptr [eax+8] +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor bl bl +
call sub_100B747  +
mov edx [ebp+arg_0] +
cmp edx eax +
jnb loc_100B783  +
mov eax [ecx+1Ch] +
test eax eax +
jz loc_100B783  +
mov eax [eax+0Ch] +
mov eax [eax+edx*4] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
inc bl  +
mov al bl +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100B7C7  +
cmp eax 0Ch +
jz loc_100B7C0  +
cmp eax 16h +
jz loc_100B7B9  +
cmp eax 22h +
jz loc_100B7B9  +
cmp eax 50h +
jz loc_100B7C7  +
push 80004005h  +
call loc_1008FB2  +
push 80070057h  +
jmp loc_100B7B4  +
push 8007000Eh  +
jmp loc_100B7B4  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001C3F  +
add esp 10h +
push eax  +
call sub_100B78F  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:LoadResource  +
test eax eax +
jz loc_100B84F  +
push esi  +
push eax  +
call ds:LockResource  +
mov esi eax +
test esi esi +
jz loc_100B841  +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:SizeofResource  +
mov ecx [ebp+arg_8] +
add eax esi +
and ecx 0Fh +
jbe loc_100B83D  +
cmp esi eax +
jnb loc_100B841  +
dec ecx  +
movzx edx word ptr [esi] +
lea esi [esi+edx*2+2] +
jnz loc_100B82F  +
cmp esi eax +
jb loc_100B845  +
xor eax eax +
jmp loc_100B84E  +
movzx eax word ptr [esi] +
neg eax  +
sbb eax eax +
and eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
shr eax 4 +
inc eax  +
movzx eax ax +
push 6  +
push eax  +
push [ebp+hModule]  +
call ds:FindResourceW  +
test eax eax +
jz loc_100B883  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_100B7F6  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax 0FFFFFFFFh +
jnz loc_100B8AE  +
mov eax [ebp+arg_8] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100B89F  +
sub eax ecx +
sar eax 1 +
inc eax  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B7D0  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+10h]  +
lea edx [esi+0Ch] +
cmp dword ptr [edx] 0 +
jl loc_100B8EF  +
cmp eax [esi] +
jnz loc_100B8EF  +
xor eax eax +
mov edi esi +
inc eax  +
xadd [edx] eax +
jmp loc_100B921  +
mov edx [eax] +
push 2  +
push dword ptr [esi+4]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_100B905  +
call sub_100B34B  +
mov eax [esi+4] +
mov [edi+4] eax +
mov eax [esi+4] +
inc eax  +
push eax  +
add esi 10h +
push esi  +
push eax  +
lea eax [edi+10h] +
push eax  +
call sub_1001C3F  +
add esp 10h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+40h] +
call sub_1002FCD  +
lea ecx [esi+44h] +
call sub_1002FCD  +
lea ecx [esi+48h] +
call sub_1002FCD  +
lea ecx [esi+4Ch] +
call sub_1002FCD  +
lea ecx [esi+50h] +
call sub_1002FCD  +
mov ecx esi +
call sub_100389E  +
mov eax [ebp+arg_0] +
mov [esi+4] eax +
mov byte ptr [esi] 1 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push esi  +
mov esi ecx +
jz loc_100B9AB  +
push edi  +
push offset loc_100B4B5  +
lea edi [esi-4] +
push dword ptr [edi]  +
push 4  +
push esi  +
call sub_101A411  +
test [ebp+arg_0] 1 +
jz loc_100B9A6  +
push edi  +
call sub_10019EE  +
pop ecx  +
mov eax edi +
pop edi  +
jmp loc_100B9C4  +
mov ecx [esi] +
sub ecx 10h +
call sub_10018D0  +
test [ebp+arg_0] 1 +
jz loc_100B9C2  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_4]  +
mov ebx ecx +
push [ebp+hModule]  +
call sub_100B858  +
mov esi eax +
test esi esi +
jz loc_100BA12  +
push edi  +
movzx edi word ptr [esi] +
push edi  +
mov ecx ebx +
call sub_1001B6B  +
movzx ecx word ptr [esi] +
push ecx  +
add esi 2 +
push esi  +
push edi  +
push eax  +
call sub_100B88C  +
add esp 10h +
push edi  +
mov ecx ebx +
call sub_1001AEE  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
lea ecx [eax-10h] +
sub esi 10h +
cmp ecx esi +
jz loc_100BA67  +
cmp dword ptr [esi+0Ch] 0 +
jl loc_100BA5C  +
mov edx [ecx] +
cmp edx [esi] +
jnz loc_100BA5C  +
push ebx  +
push ecx  +
call sub_100B8C7  +
pop ecx  +
mov ecx esi +
mov ebx eax +
call sub_10018D0  +
add ebx 10h +
mov [edi] ebx +
pop ebx  +
jmp loc_100BA67  +
push dword ptr [eax-0Ch]  +
mov ecx edi +
push eax  +
call sub_1001D6F  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push dword ptr [eax-0Ch]  +
push eax  +
call sub_10033D1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100BA1D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100BA74  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
xor al al +
cmp [ecx+28h] edx +
jbe loc_100BAE8  +
mov eax [ecx+30h] +
mov ecx [ebp+arg_4] +
lea eax [eax+edx*4] +
push eax  +
call sub_100BA90  +
mov al 1 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
xor al al +
cmp [ecx+34h] edx +
jbe loc_100BB11  +
mov eax [ecx+3Ch] +
mov ecx [ebp+arg_4] +
lea eax [eax+edx*4] +
push eax  +
call sub_100BA90  +
mov al 1 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 48h +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_100BA90  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 44h +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_100BA90  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 40h +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_100BA90  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 4Ch +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_100BA90  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea eax [esi+50h] +
mov ecx [eax] +
cmp dword ptr [ecx-0Ch] 0 +
jz loc_100BBB2  +
mov ecx [ebp+arg_0] +
push eax  +
call sub_100BA90  +
mov eax [esi+54h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov al 1 +
jmp loc_100BBB4  +
xor al al +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100BAAC  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jz loc_100BD62  +
lea edi [esi+28h] +
push edi  +
call sub_1003189  +
movzx eax word ptr [esi+20h] +
test ax ax +
jz loc_100BD86  +
and dword ptr [edi] 0 +
mov cx [esi+18h] +
movzx edi ax +
mov [esi+2Ch] cx +
xor ecx ecx +
push 4  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call sub_1003218  +
pop ecx  +
test eax eax +
jz loc_100BC58  +
push offset loc_100B4B5  +
push offset sub_1002FCD  +
push edi  +
lea ebx [eax+4] +
push 4  +
push ebx  +
mov [eax] edi +
call sub_101A57A  +
mov eax ebx +
jmp loc_100BC5A  +
xor eax eax +
mov [esi+30h] eax +
test eax eax +
jz loc_100BD86  +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
xor eax eax +
cmp ax [esi+20h] +
jnb loc_100BD86  +
mov ebx offset loc_100399C +
mov edi [ebp+var_4] +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
mov edx [esi+24h] +
shl edi 2 +
push dword ptr [edi+edx]  +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jl loc_100BD28  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push [ebp+var_8]  +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_100BCF7  +
mov ecx [ebp+var_C] +
test ecx ecx +
jz loc_100BCF7  +
cmp dword ptr [ecx+4] 0 +
jz loc_100BCD2  +
push dword ptr [ecx+4]  +
mov ecx [esi+30h] +
add ecx edi +
call sub_1002AF1  +
inc dword ptr [esi+28h]  +
jmp loc_100BD1D  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100BD1D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BD1D  +
push [ebp+var_8]  +
push ebx  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
jmp loc_100BD1D  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100BD1D  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100BD1D  +
push [ebp+var_8]  +
push eax  +
push ebx  +
push 13h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100B125  +
lea eax [ebp+var_C] +
push eax  +
call sub_100FBAB  +
jmp loc_100BD51  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100BD51  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100BD51  +
mov edx [esi+24h] +
push dword ptr [edi+edx]  +
push eax  +
push ebx  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100B125  +
movzx eax word ptr [esi+20h] +
inc [ebp+var_4]  +
cmp [ebp+var_4] eax +
jnb loc_100BD86  +
jmp loc_100BC7E  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100BD86  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BD86  +
push offset loc_100399C  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
pop edi  +
pop esi  +
xor al al +
pop ebx  +
leave   +
retn 4  +
***
call sub_1001939  +
mov esi ecx +
mov eax [esi+1Ch] +
mov byte ptr [ebp-0Dh] 0 +
test eax eax +
jz loc_100C023  +
cmp dword ptr [ebp+8] 0 +
jz loc_100C01F  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100BDDF  +
test byte ptr [eax+1Ch] 4 +
jz loc_100BDDF  +
push offset loc_100399C  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax [esi+1Ch] +
movzx edi word ptr [eax+8] +
lea ebx [esi+34h] +
push ebx  +
mov ecx esi +
inc edi  +
call sub_1003189  +
mov ax [esi+18h] +
and dword ptr [ebx] 0 +
mov [esi+38h] ax +
xor ecx ecx +
push 4  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call sub_1003218  +
pop ecx  +
test eax eax +
jz loc_100BE44  +
push offset loc_100B4B5  +
push offset sub_1002FCD  +
push edi  +
mov [eax] edi +
add eax 4 +
push 4  +
push eax  +
mov [ebp-1Ch] eax +
call sub_101A57A  +
mov eax [ebp-1Ch] +
jmp loc_100BE46  +
xor eax eax +
mov [esi+3Ch] eax +
test eax eax +
jz loc_100C004  +
and dword ptr [ebp-14h] 0 +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
mov edx [esi+1Ch] +
push dword ptr [edx+10h]  +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_100BE80  +
mov ecx [ebp-14h] +
test ecx ecx +
jz loc_100BE80  +
push dword ptr [ecx+4]  +
mov ecx [esi+3Ch] +
call sub_1002AF1  +
jmp loc_100BEA7  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100BEA7  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100BEA7  +
push eax  +
push offset loc_100399C  +
push 17h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AF4C  +
inc dword ptr [ebx]  +
lea eax [ebp-14h] +
push eax  +
call sub_100FBAB  +
push 0Ah  +
lea ecx [ebp-34h] +
call sub_10018A1  +
mov eax [esi+1Ch] +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-1Ch] 0 +
xor ecx ecx +
cmp cx [eax+8] +
jnb loc_100BFF6  +
mov edi [ebp-1Ch] +
mov eax [esi+1Ch] +
mov eax [eax+0Ch] +
shl edi 2 +
mov ebx [edi+eax] +
push 0  +
push ebx  +
lea ecx [ebp-34h] +
call sub_10037F2  +
test eax eax +
jnz loc_100BFE3  +
push ebx  +
lea ecx [ebp-34h] +
call sub_10037C3  +
and dword ptr [ebp-18h] 0 +
mov ebx [ebp+8] +
mov eax [ebx] +
lea ecx [ebp-18h] +
push ecx  +
mov ecx [esi+1Ch] +
mov ecx [ecx+0Ch] +
push dword ptr [ecx+edi]  +
push ebx  +
call dword ptr [eax+20h]  +
test eax eax +
jl loc_100BFAA  +
mov eax [ebx] +
lea ecx [ebp-14h] +
push ecx  +
push dword ptr [ebp-18h]  +
push ebx  +
call dword ptr [eax+24h]  +
test eax eax +
jl loc_100BF7E  +
mov ecx [ebp-14h] +
test ecx ecx +
jz loc_100BF7E  +
cmp dword ptr [ecx+4] 0 +
jz loc_100BF55  +
mov eax [esi+3Ch] +
push dword ptr [ecx+4]  +
lea ecx [edi+eax+4] +
call sub_1002AF1  +
inc dword ptr [esi+34h]  +
jmp loc_100BFDA  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100BFDA  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BFDA  +
push dword ptr [ebp-18h]  +
push offset loc_100399C  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
jmp loc_100BFDA  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100BFDA  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100BFDA  +
push dword ptr [ebp-18h]  +
push eax  +
push offset loc_100399C  +
push 19h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100B125  +
jmp loc_100BFDA  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100BFDA  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100BFDA  +
mov edx [esi+1Ch] +
mov edx [edx+0Ch] +
push dword ptr [edi+edx]  +
push eax  +
push offset loc_100399C  +
push 1Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100B125  +
lea eax [ebp-14h] +
push eax  +
call sub_100FBAB  +
mov eax [esi+1Ch] +
movzx eax word ptr [eax+8] +
inc dword ptr [ebp-1Ch]  +
cmp [ebp-1Ch] eax +
jb loc_100BED3  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-0Dh] 1 +
call sub_10018E9  +
jmp loc_100C071  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100C071  +
test byte ptr [eax+1Ch] 4 +
jz loc_100C071  +
push offset loc_100399C  +
push 1Bh  +
jmp loc_100C066  +
test eax eax +
jnz loc_100C047  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100C04C  +
test byte ptr [eax+1Ch] 4 +
jz loc_100C04C  +
push offset loc_100399C  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax off_101F0C0 +
cmp dword ptr [ebp+8] 0 +
jnz loc_100C071  +
cmp eax offset off_101F0C0 +
jz loc_100C071  +
test byte ptr [eax+1Ch] 4 +
jz loc_100C071  +
push offset loc_100399C  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov al [ebp-0Dh] +
call __EH_epilog3  +
retn 4  +
***
call sub_1001939  +
mov edi ecx +
cmp byte ptr [edi] 0 +
mov byte ptr [ebp-0Dh] 0 +
jnz loc_100C33D  +
mov esi [ebp+8] +
test esi esi +
jz loc_100C33D  +
mov eax [esi] +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp+0Ch] 0 +
lea ecx [ebp-14h] +
push ecx  +
push esi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_100C11A  +
mov eax [esi] +
lea ecx [ebp+0Ch] +
push ecx  +
push dword ptr [ebp-14h]  +
push esi  +
call dword ptr [eax+24h]  +
test eax eax +
jl loc_100C0F0  +
mov ecx [ebp+0Ch] +
test ecx ecx +
jz loc_100C0F0  +
push dword ptr [ecx+4]  +
lea ecx [edi+48h] +
call sub_1002AF1  +
mov ebx offset loc_100399C +
lea eax [ebp+0Ch] +
push eax  +
call sub_100FBAB  +
jmp loc_100C146  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100C0E0  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100C0E0  +
push eax  +
mov ebx offset loc_100399C +
push ebx  +
push 1Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AF4C  +
jmp loc_100C0E5  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100C141  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100C141  +
push eax  +
push offset loc_100399C  +
push 1Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AF4C  +
mov ebx offset loc_100399C +
mov eax [esi] +
lea ecx [ebp-14h] +
push ecx  +
push esi  +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_100C1A7  +
mov eax [esi] +
lea ecx [ebp+0Ch] +
push ecx  +
push dword ptr [ebp-14h]  +
push esi  +
call dword ptr [eax+24h]  +
test eax eax +
jl loc_100C179  +
mov ecx [ebp+0Ch] +
test ecx ecx +
jz loc_100C179  +
push dword ptr [ecx+4]  +
lea ecx [edi+44h] +
call sub_1002AF1  +
jmp loc_100C19C  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100C19C  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100C19C  +
push eax  +
push ebx  +
push 20h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AF4C  +
lea eax [ebp+0Ch] +
push eax  +
call sub_100FBAB  +
jmp loc_100C1CA  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100C1CA  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100C1CA  +
push eax  +
push ebx  +
push 21h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AF4C  +
mov eax [esi] +
lea ecx [ebp-14h] +
push ecx  +
push esi  +
call dword ptr [eax+10h]  +
test eax eax +
jl loc_100C22B  +
mov eax [esi] +
lea ecx [ebp+0Ch] +
push ecx  +
push dword ptr [ebp-14h]  +
push esi  +
call dword ptr [eax+24h]  +
test eax eax +
jl loc_100C1FD  +
mov ecx [ebp+0Ch] +
test ecx ecx +
jz loc_100C1FD  +
push dword ptr [ecx+4]  +
lea ecx [edi+4Ch] +
call sub_1002AF1  +
jmp loc_100C220  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100C220  +
test byte ptr [ecx+1Ch] 4 +
jz loc_100C220  +
push eax  +
push ebx  +
push 22h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AF4C  +
lea eax [ebp+0Ch] +
push eax  +
call sub_100FBAB  +
jmp loc_100C24E  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100C24E  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100C24E  +
push eax  +
push ebx  +
push 23h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AF4C  +
mov eax [esi] +
lea ecx [ebp-14h] +
push ecx  +
push esi  +
call dword ptr [eax+18h]  +
test eax eax +
jl loc_100C2AF  +
mov eax [esi] +
lea ecx [ebp+0Ch] +
push ecx  +
push dword ptr [ebp-14h]  +
push esi  +
call dword ptr [eax+24h]  +
test eax eax +
jl loc_100C281  +
mov ecx [ebp+0Ch] +
test ecx ecx +
jz loc_100C281  +
push dword ptr [ecx+4]  +
lea ecx [edi+40h] +
call sub_1002AF1  +
jmp loc_100C2A4  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100C2A4  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100C2A4  +
push eax  +
push ebx  +
push 24h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AF4C  +
lea eax [ebp+0Ch] +
push eax  +
call sub_100FBAB  +
jmp loc_100C2D2  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100C2D2  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100C2D2  +
push eax  +
push ebx  +
push 25h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AF4C  +
mov eax [esi] +
and dword ptr [ebp-28h] 0 +
and dword ptr [ebp-20h] 0 +
lea ecx [ebp-28h] +
push ecx  +
lea ecx [ebp-20h] +
push ecx  +
push esi  +
call dword ptr [eax+1Ch]  +
test eax eax +
jl loc_100C30C  +
mov ecx [ebp-20h] +
test ecx ecx +
jz loc_100C30C  +
cmp dword ptr [ecx+4] 0 +
jz loc_100C30C  +
push dword ptr [ecx+4]  +
lea ecx [edi+50h] +
call sub_1002AF1  +
mov eax [ebp-28h] +
mov [edi+54h] eax +
jmp loc_100C32F  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100C32F  +
test byte ptr [ecx+1Ch] 4 +
jz loc_100C32F  +
push eax  +
push ebx  +
push 26h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AF4C  +
lea eax [ebp-20h] +
push eax  +
call sub_100FBAB  +
jmp loc_100C591  +
mov esi offset dword_101F10C +
push esi  +
lea ecx [ebp+8] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
push 3AEBh  +
call sub_100198C  +
push eax  +
lea ecx [ebp+8] +
call sub_100B9CE  +
lea eax [ebp+8] +
push eax  +
lea ebx [edi+44h] +
push ebx  +
call sub_1010A15  +
lea ecx [ebp+8] +
call sub_1003463  +
push 3AECh  +
call sub_100198C  +
push eax  +
lea ecx [ebp+8] +
call sub_100B9CE  +
lea ecx [ebp+8] +
lea eax [edi+40h] +
push ecx  +
push eax  +
mov [ebp-20h] eax +
call sub_1010A15  +
lea ecx [ebp+8] +
call sub_1003463  +
push 3AEDh  +
call sub_100198C  +
push eax  +
lea ecx [ebp+8] +
call sub_100B9CE  +
lea ecx [ebp+8] +
lea eax [edi+48h] +
push ecx  +
push eax  +
mov [ebp-28h] eax +
call sub_1010A15  +
lea ecx [ebp+8] +
call sub_1003463  +
push 3AF1h  +
call sub_100198C  +
push eax  +
lea ecx [ebp+8] +
call sub_100B9CE  +
push esi  +
lea ecx [ebp-14h] +
call sub_1001865  +
mov eax [ebp+0Ch] +
dec eax  +
mov byte ptr [ebp-4] 1 +
jz loc_100C3FD  +
dec eax  +
jnz loc_100C410  +
push 3AF5h  +
jmp loc_100C402  +
push 3AE3h  +
call sub_100198C  +
push eax  +
lea ecx [ebp-14h] +
call sub_100B9CE  +
mov eax [ebp-14h] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp+8] +
push eax  +
call sub_10033D1  +
lea ecx [ebp+8] +
lea eax [edi+4Ch] +
push ecx  +
push eax  +
mov [ebp+0Ch] eax +
call sub_1010A15  +
lea ecx [ebp+8] +
call sub_1003463  +
lea ecx [ebp-14h] +
call sub_1003463  +
cmp byte ptr [edi] 0 +
jnz loc_100C553  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100C46C  +
test byte ptr [eax+1Ch] 4 +
jz loc_100C46C  +
push offset loc_100399C  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
lea eax [ebp-24h] +
push eax  +
push offset riid  +
xor esi esi +
push 1  +
push esi  +
push offset rclsid  +
mov [ebp-24h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
call CoCreateInstance  +
test eax eax +
jl loc_100C546  +
mov eax [ebp-24h] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
lea edx [ebp-1Ch] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_100C546  +
mov eax [ebp-18h] +
cmp eax esi +
jz loc_100C546  +
xor ecx ecx +
cmp cx [ebp-1Ch] +
jnb loc_100C546  +
movzx edx word ptr [ebp-1Ch] +
test edx edx +
jbe loc_100C530  +
mov edi [edi+4] +
mov ecx eax +
cmp [ecx] edi +
jz loc_100C4E1  +
inc esi  +
add ecx 50h +
cmp esi edx +
jnb loc_100C530  +
jmp loc_100C4D3  +
imul esi esi +
mov ecx [esi+eax+8] +
test ecx ecx +
jz loc_100C4F7  +
push ecx  +
mov ecx ebx +
call sub_1002AF1  +
mov eax [ebp-18h] +
mov ecx [esi+eax+10h] +
test ecx ecx +
jz loc_100C50B  +
push ecx  +
mov ecx [ebp+0Ch] +
call sub_1002AF1  +
mov eax [ebp-18h] +
mov ecx [esi+eax+20h] +
test ecx ecx +
jz loc_100C51F  +
push ecx  +
mov ecx [ebp-28h] +
call sub_1002AF1  +
mov eax [ebp-18h] +
mov eax [esi+eax+18h] +
test eax eax +
jz loc_100C530  +
mov ecx [ebp-20h] +
push eax  +
call sub_1002AF1  +
lea eax [ebp-18h] +
push eax  +
movzx eax word ptr [ebp-1Ch] +
push eax  +
call sub_1003575  +
and dword ptr [ebp-18h] 0 +
and dword ptr [ebp-1Ch] 0 +
mov eax [ebp-24h] +
test eax eax +
jz loc_100C553  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov byte ptr [ebp-0Dh] 1 +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100C57B  +
test byte ptr [eax+1Ch] 4 +
jz loc_100C57B  +
push offset loc_100399C  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov al [ebp-0Dh] +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+ppv] 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
cmp byte ptr [ebx] 0 +
lea eax [ebx+8] +
mov esi eax +
lea edi [ebp+rclsid] +
movs   +
movs   +
movs   +
movs   +
jnz loc_100C6BB  +
push 4  +
pop ecx  +
mov edi offset dword_100C74C +
lea esi [ebp+rclsid] +
xor edx edx +
cmps   +
mov esi eax +
lea edi [ebp+rclsid] +
movs   +
movs   +
lea eax [ebp+ppv] +
movs   +
push eax  +
push offset stru_100C75C  +
lea eax [ebp+rclsid] +
movs   +
jnz loc_100C66D  +
push 1  +
push edx  +
push eax  +
call CoCreateInstance  +
test eax eax +
jl loc_100C639  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100C6DF  +
test byte ptr [eax+1Ch] 4 +
jz loc_100C6DF  +
push dword ptr [ebx+4]  +
push offset loc_100399C  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
jmp loc_100C6DF  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100C6DF  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100C6DF  +
push eax  +
push dword ptr [ebx+4]  +
push offset loc_100399C  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100B125  +
jmp loc_100C6DF  +
push 4  +
push 0  +
push eax  +
call CoCreateInstance  +
test eax eax +
jl loc_100C69A  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100C6DF  +
test byte ptr [eax+1Ch] 4 +
jz loc_100C6DF  +
push dword ptr [ebx+4]  +
push offset loc_100399C  +
push 0Eh  +
jmp loc_100C629  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_100C6DF  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100C6DF  +
push eax  +
push dword ptr [ebx+4]  +
push offset loc_100399C  +
push 0Fh  +
jmp loc_100C660  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100C6DF  +
test byte ptr [eax+1Ch] 4 +
jz loc_100C6DF  +
push offset loc_100399C  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
push [ebp+ppv]  +
mov ecx ebx +
call sub_100BBDA  +
push [ebp+ppv]  +
mov ecx ebx +
call sub_100BD94  +
push [ebp+arg_0]  +
mov ecx ebx +
push [ebp+ppv]  +
call sub_100C081  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_100C738  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+ppv] 0 +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100C738  +
test byte ptr [eax+1Ch] 4 +
jz loc_100C738  +
push dword ptr [ebx+4]  +
push offset loc_100399C  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
xor al al +
pop ebx  +
call sub_10019B3  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100C5A1  +
mov byte ptr [esi+1] 1 +
mov al 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_100C7C0  +
dec eax  +
jz loc_100C7B7  +
push 57h  +
pop eax  +
jmp loc_100C82B  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_100C7E3  +
push dword ptr [ebp+14h]  +
call EtwGetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call EtwGetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call EtwGetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_100C80C  +
cmp dword ptr [esi+10h] 0 +
jz loc_100C80C  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_100C829  +
test cl 2 +
jz loc_100C81A  +
mov esi [esi+10h] +
test esi esi +
jz loc_100C81A  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_18] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_100C871  +
cmp word ptr [edx] 0 +
jnz loc_100C855  +
mov [ebp+arg_18] 0Eh +
jmp loc_100C878  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C85A  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_18] eax +
jmp loc_100C878  +
mov [ebp+arg_18] 0Ah +
mov ebx offset aNull +
test edx edx +
jz loc_100C88E  +
cmp word ptr [edx] 0 +
jnz loc_100C890  +
mov edx offset aNull_0 +
jmp loc_100C890  +
mov edx ebx +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_100C8BA  +
cmp word ptr [edi] 0 +
jnz loc_100C8A1  +
push 0Eh  +
jmp loc_100C8BC  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C8A6  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_100C8BD  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_100C8D2  +
cmp word ptr [edi] 0 +
jnz loc_100C8CE  +
mov eax offset aNull_0 +
jmp loc_100C8D4  +
mov eax edi +
jmp loc_100C8D4  +
mov eax ebx +
push 0  +
push 4  +
lea esi [ebp+arg_1C] +
push esi  +
push [ebp+arg_18]  +
push edx  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 38h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push esi  +
mov esi ecx +
push esi  +
call ds:DeleteCriticalSection  +
mov esi [esi+24h] +
test esi esi +
jz loc_100C924  +
push esi  +
call ds:CloseHandle  +
pop esi  +
retn   +
***
mov eax [ecx+3CCh] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100C90A  +
test [ebp+arg_0] 1 +
jz loc_100C951  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4A8h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
push 0Eh  +
pop ecx  +
mov esi offset a1Control_exeNc +
lea edi [ebp+Source] +
xor eax eax +
movs   +
mov ebx 206h +
push ebx  +
mov [ebp+CurrentDirectory] ax +
xor esi esi +
lea eax [ebp-242h] +
push esi  +
push eax  +
call memset  +
xor eax eax +
mov [ebp+hObject] esi +
lea edi [ebp-460h] +
stos   +
stos   +
push 40h  +
stos   +
lea eax [ebp+StartupInfo.lpReserved] +
push esi  +
push eax  +
call memset  +
add esp 18h +
lea eax [ebp+CurrentDirectory] +
push eax  +
push esi  +
push esi  +
push 25h  +
push esi  +
mov [ebp+StartupInfo.cb] 44h +
call SHGetFolderPathW  +
test eax eax +
jl loc_100CACF  +
xor eax eax +
push ebx  +
mov [ebp+CommandLine] ax +
lea eax [ebp-44Ah] +
push esi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+CurrentDirectory] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 104h  +
lea eax [ebp+CommandLine] +
push eax  +
push esi  +
push esi  +
lea eax [ebp+Source] +
push eax  +
push 2400h  +
mov [ebp+var_450] offset WindowName +
call ds:FormatMessageW  +
test eax eax +
jz loc_100CACF  +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
lea eax [ebp+CurrentDirectory] +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+CommandLine] +
push eax  +
push esi  +
call ds:CreateProcessW  +
test eax eax +
jnz loc_100CA95  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100CACF  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CACF  +
push offset sub_1004108  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_100CACF  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100CAB9  +
test byte ptr [eax+1Ch] 4 +
jz loc_100CAB9  +
push offset sub_1004108  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
push dword ptr [ebp-460h]  +
mov esi ds:CloseHandle +
call esi  +
push [ebp+hObject]  +
call esi  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10019B3  +
leave   +
retn   +
***
mov al [ecx+3E4h] +
retn   +
***
mov al [ecx+3E6h] +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor esi esi +
push esi  +
push lpClassName  +
mov [ebp+var_4] ecx +
push esi  +
push esi  +
call ds:FindWindowExW  +
mov ebx eax +
cmp ebx esi +
jz loc_100CBD1  +
push ebx  +
call ds:IsWindow  +
test eax eax +
jz loc_100CBD1  +
push edi  +
mov eax off_101F0C0 +
mov esi offset off_101F0C0 +
mov edi offset sub_1004108 +
cmp eax esi +
jz loc_100CB93  +
test byte ptr [eax+1Ch] 4 +
jz loc_100CB93  +
push edi  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
push ebx  +
call ds:SetForegroundWindow  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_100CBB7  +
test byte ptr [eax+1Ch] 4 +
jz loc_100CBB7  +
push edi  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax [ebp+var_4] +
movzx eax byte ptr [eax+3E4h] +
push 0  +
push eax  +
push 0DC4h  +
push ebx  +
call ds:SendMessageW  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push 0  +
push lpClassName  +
mov esi ecx +
push 0  +
push 0  +
call ds:FindWindowExW  +
mov ebx eax +
test ebx ebx +
jz loc_100CC3D  +
push ebx  +
call ds:IsWindow  +
test eax eax +
jz loc_100CC3D  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100CC27  +
test byte ptr [eax+1Ch] 4 +
jz loc_100CC27  +
push offset sub_1004108  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
movzx eax byte ptr [esi+3E6h] +
push 0  +
push eax  +
push 0DC6h  +
push ebx  +
call ds:SendMessageW  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ecx+400h] +
retn   +
***
mov eax [ecx+410h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [ebp+wLanguage]  +
shr eax 4 +
inc eax  +
movzx eax ax +
push eax  +
push 6  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
test eax eax +
jz loc_100CC8B  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_100B7F6  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi offset unk_101F1F8 +
push 0  +
mov ecx esi +
call sub_1019FB3  +
xor ebx ebx +
inc ebx  +
jmp loc_100CCC8  +
push dword ptr [ebp+wLanguage]  +
push [ebp+arg_0]  +
push edi  +
call sub_100CC5D  +
test eax eax +
jnz loc_100CCD5  +
push ebx  +
mov ecx esi +
call sub_1019FB3  +
inc ebx  +
mov edi eax +
test edi edi +
jnz loc_100CCAF  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov eax edi +
jmp loc_100CCCE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_100CC94  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpArguments] +
push esi  +
test ebx ebx +
jnz loc_100CD13  +
push ebx  +
push ebx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebx+8] +
test esi esi +
jz loc_100CD31  +
push edi  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call sub_10019EE  +
pop ecx  +
mov esi edi +
test edi edi +
jnz loc_100CD1B  +
pop edi  +
and dword ptr [ebx+8] 0 +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100CD51  +
mov eax 56000000h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+cb] 0 +
push [ebp+arg_0]  +
lea eax [ebp+cb] +
push eax  +
call sub_1001A9B  +
test eax eax +
jge loc_100CD7B  +
xor eax eax +
jmp locret_100CD84  +
push [ebp+cb]  +
call CoTaskMemAlloc  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+cb] 0 +
push [ebp+arg_4]  +
lea eax [ebp+cb] +
push eax  +
call sub_1001A9B  +
test eax eax +
jge loc_100CDAE  +
xor eax eax +
jmp locret_100CDBA  +
push [ebp+cb]  +
push [ebp+pv]  +
call CoTaskMemRealloc  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpString]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
push eax  +
call sub_100B78F  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_100B78F  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004BE3  +
test eax eax +
jl loc_100CE6E  +
mov byte ptr [esi+18h] 1 +
pop esi  +
retn   +
***
call ds:__imp_GetLastError  +
test eax eax +
jle locret_100CE89  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jle loc_100CEA5  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
add ecx 8 +
push ecx  +
call ds:InterlockedIncrement  +
retn   +
***
add ecx 8 +
push ecx  +
call ds:InterlockedDecrement  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_100CEE5  +
mov eax 80004003h +
jmp loc_100CF16  +
push esi  +
lea esi [ecx+28h] +
cmp [esi] edi +
jnz loc_100CF07  +
push esi  +
push offset stru_100CF2C  +
push 1  +
push edi  +
push offset stru_100CF1C  +
call CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_100CF13  +
mov eax [esi] +
mov [ebx] eax +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_100CF8F  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebx-1] +
xor eax eax +
test edi edi +
jbe loc_100CF87  +
mov edx [ebp+arg_8] +
movzx ecx word ptr [edx] +
test cx cx +
jz loc_100CF87  +
mov [esi+eax*2] cx +
cmp word ptr [edx] 27h +
jnz loc_100CF80  +
lea ecx [ebx-2] +
cmp eax ecx +
jnb loc_100CF80  +
push 27h  +
inc eax  +
pop ecx  +
mov [esi+eax*2] cx +
inc edx  +
inc edx  +
inc eax  +
cmp eax edi +
jb loc_100CF5F  +
xor ecx ecx +
pop edi  +
mov [esi+eax*2] cx +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov eax 80004005h +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_100CFF8  +
cmp dword ptr [esi+8] 0 +
jnz loc_100CFF8  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_100CFDA  +
push offset ProcName  +
push eax  +
call ds:__imp_GetProcAddress  +
mov [esi+4] eax +
jmp loc_100CFF8  +
push offset LibFileName  +
call ds:LoadLibraryW  +
test eax eax +
jz loc_100CFF8  +
push offset aRegdeletekeyw  +
push eax  +
call ds:__imp_GetProcAddress  +
mov [esi+8] eax +
mov eax [esi+4] +
test eax eax +
jz loc_100D00C  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_100D022  +
mov eax [esi+8] +
test eax eax +
jz loc_100D01C  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_100D022  +
call ds:__imp_GetLastError  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_100D0D6  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_100D118  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_100D128  +
mov ecx esi +
call sub_100D0BF  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100D164  +
mov ecx esi +
call sub_100D0BF  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jnz loc_100D1A9  +
push 80004005h  +
call loc_1008FB2  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpData] +
push edi  +
mov ebx ecx +
test esi esi +
jnz loc_100D1EF  +
push 80004005h  +
call loc_1008FB2  +
xor edi edi +
push esi  +
call ds:lstrlenW  +
inc eax  +
lea ecx [eax+eax] +
add esi ecx +
add edi ecx +
cmp eax 1 +
jnz loc_100D1F1  +
push edi  +
push [ebp+lpData]  +
push 7  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ebx]  +
call ds:RegSetValueExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
neg eax  +
sbb al al +
inc al  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_100D261  +
push eax  +
call ds:CharNextW  +
push 27h  +
pop ecx  +
cmp cx [eax] +
jz loc_100D261  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 64h +
push esi  +
mov esi ecx +
jge loc_100D27E  +
mov eax 3E8h +
and dword ptr [esi] 0 +
push 2  +
push eax  +
mov [esi+4] eax +
call sub_100CD5A  +
mov [esi+8] eax +
test eax eax +
jz loc_100D298  +
xor ecx ecx +
mov [eax] cx +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset CoTaskMemFree +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov eax [esi] +
lea ecx [eax+ebx+1] +
cmp ecx eax +
push edi  +
jle loc_100D338  +
cmp ecx ebx +
jle loc_100D338  +
mov edi [esi+4] +
cmp ecx edi +
jl loc_100D2F8  +
cmp edi 3FFFFFFFh +
jg loc_100D338  +
add edi edi +
cmp ecx edi +
jge loc_100D2D5  +
push 2  +
push edi  +
push dword ptr [esi+8]  +
call sub_100CD8D  +
test eax eax +
jz loc_100D338  +
mov [esi+8] eax +
mov [esi+4] edi +
mov eax [esi] +
test eax eax +
jl loc_100D338  +
mov edx [esi+4] +
cmp eax edx +
jge loc_100D338  +
mov ecx edx +
sub ecx eax +
cmp ecx edx +
jg loc_100D338  +
lea edx [ebx+ebx] +
push edx  +
push [ebp+arg_0]  +
add ecx ecx +
push ecx  +
mov ecx [esi+8] +
lea eax [ecx+eax*2] +
push eax  +
call sub_100CE10  +
add [esi] ebx +
mov eax [esi] +
mov ecx [esi+8] +
xor edx edx +
mov [ecx+eax*2] dx +
xor eax eax +
add esp 10h +
inc eax  +
jmp loc_100D33A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
add bh bh +
adc eax offset DeleteCriticalSection +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_102079C 1 +
jnz loc_100D3C0  +
or dword_102079C 1 +
push 8  +
pop eax  +
mov word_1020780 ax +
mov eax 4008h +
push 13h  +
mov word_1020788 ax +
pop eax  +
push 11h  +
mov word_1020790 ax +
pop eax  +
mov lpString2 offset dword_100D404 +
mov dword_1020784 offset dword_100D400 +
mov dword_102078C offset dword_100D3FC +
mov dword_1020794 offset dword_100D3F8 +
mov word_1020798 ax +
push esi  +
xor esi esi +
push lpString2[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_100D3E4  +
inc esi  +
cmp esi 4 +
jb loc_100D3C3  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov ax word_1020780[esi*8] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
xor eax eax +
inc eax  +
jmp loc_100D3DF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 30h +
jl loc_100D441  +
cmp eax 39h +
jle loc_100D43C  +
cmp eax 40h +
jle loc_100D441  +
cmp eax 46h +
jle loc_100D437  +
lea ecx [eax-61h] +
cmp ecx 5 +
ja loc_100D441  +
add eax 0FFFFFFA9h +
jmp loc_100D443  +
add eax 0FFFFFFC9h +
jmp loc_100D443  +
add eax 0FFFFFFD0h +
jmp loc_100D443  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_100D480[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_100D475  +
inc esi  +
cmp esi 0Eh +
jb loc_100D454  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax ds:dword_100D484[esi*8] +
jmp loc_100D470  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
test eax eax +
jz loc_100D521  +
jmp loc_100D513  +
cmp cx [ebp+arg_4] +
jz loc_100D51D  +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_100D51F  +
jmp loc_100D506  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 9 +
jl loc_100D54D  +
cmp eax 0Ah +
jle loc_100D548  +
cmp eax 0Dh +
jz loc_100D548  +
cmp eax 20h +
jnz loc_100D54D  +
xor eax eax +
inc eax  +
jmp loc_100D54F  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_100D56B  +
push dword ptr [esi]  +
call ds:CharNextW  +
mov [esi] eax +
mov ecx esi +
mov eax [esi] +
movzx eax word ptr [eax] +
push eax  +
call sub_100D52B  +
test eax eax +
jnz loc_100D55F  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_100D558  +
mov eax [esi] +
movzx ecx word ptr [eax] +
xor edx edx +
cmp dx cx +
jnz loc_100D5A5  +
mov eax 80020009h +
jmp loc_100D685  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push 27h  +
pop edx  +
mov [ebp+var_4] edi +
cmp dx cx +
jnz loc_100D633  +
mov ebx ds:CharNextW +
push eax  +
call ebx  +
mov [esi] eax +
jmp loc_100D616  +
mov ecx esi +
call sub_100D244  +
test eax eax +
jnz loc_100D61D  +
mov eax [esi] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_100D5DC  +
push eax  +
call ebx  +
mov [esi] eax +
mov eax [esi] +
push eax  +
mov [ebp+arg_0] eax +
call ebx  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax [ebp+arg_0] +
add edx 2000h +
sar eax 1 +
lea ecx [edi+eax*2+2] +
cmp ecx edx +
jnb loc_100D68A  +
test eax eax +
jle loc_100D614  +
mov ecx [ebp+arg_0] +
mov dx [ecx] +
mov [edi] dx +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
dec eax  +
jnz loc_100D607  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_100D5C2  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_100D68A  +
xor eax eax +
mov [edi] ax +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
jmp loc_100D681  +
mov ebx [esi] +
movzx eax word ptr [ebx] +
push eax  +
mov ecx esi +
call sub_100D52B  +
test eax eax +
jnz loc_100D67C  +
push ebx  +
call ds:CharNextW  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax ebx +
sar eax 1 +
lea ecx [edi+eax*2+2] +
add edx 2000h +
cmp ecx edx +
jnb loc_100D68A  +
test eax eax +
jle loc_100D673  +
mov cx [ebx] +
mov [edi] cx +
inc edi  +
inc edi  +
inc ebx  +
inc ebx  +
dec eax  +
jnz loc_100D666  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_100D633  +
xor eax eax +
mov [edi] ax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov eax 80020009h +
jmp loc_100D683  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset off_100D6C8 +
push dword ptr [esi]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_100D6C3  +
add esi 4 +
cmp esi offset dword_100D6F8 +
jl loc_100D6A1  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_100D6BE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+cSubKeys] +
push ecx  +
push eax  +
push eax  +
push eax  +
push [ebp+hKey]  +
mov [ebp+cSubKeys] eax +
call ds:RegQueryInfoKeyW  +
test eax eax +
jz loc_100D727  +
xor eax eax +
jmp locret_100D730  +
xor eax eax +
cmp eax [ebp+cSubKeys] +
sbb eax eax +
neg eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call __alloca_probe  +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 3Dh +
push edi  +
mov edi ecx +
jnz loc_100D78E  +
push esi  +
call sub_100D581  +
test eax eax +
jl loc_100D790  +
mov ecx edi +
call sub_100D558  +
lea eax [ebp+var_2004] +
push eax  +
mov ecx edi +
call sub_100D581  +
test eax eax +
jl loc_100D790  +
push esi  +
mov ecx edi +
call sub_100D581  +
test eax eax +
jl loc_100D790  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10019B3  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi ds:__imp_free +
test eax eax +
jz loc_100D7BE  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_100D7CD  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
and dword ptr [esi+8] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_100D865  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
mov eax [esi] +
push dword ptr [eax+edi*4]  +
call sub_100D224  +
test al al +
jnz loc_100D86E  +
inc edi  +
cmp edi [esi+8] +
jl loc_100D84C  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax edi +
jmp loc_100D868  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100CDC3  +
test eax eax +
jnz loc_100D8A2  +
push 8007000Eh  +
call loc_1008FB2  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_1001A9B  +
test eax eax +
jge loc_100D8CC  +
push eax  +
call loc_1008FB2  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax ecx +
mov ecx [ebp+lpSubKey] +
push 2001Fh  +
push ecx  +
push dword ptr [eax]  +
xor esi esi +
mov [ebp+var_21C] ecx +
lea ecx [ebp+var_214] +
mov [ebp+var_218] eax +
mov [ebp+var_214] esi +
mov [ebp+var_210] esi +
mov [ebp+var_20C] esi +
call sub_100D132  +
mov edi eax +
cmp edi esi +
jz loc_100D94A  +
lea ecx [ebp+var_214] +
call sub_100D0BF  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10019B3  +
leave   +
retn 4  +
mov edi ds:RegEnumKeyExW +
jmp loc_100D968  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_214] +
call sub_100D8D8  +
cmp eax esi +
jnz loc_100D9B3  +
lea eax [ebp+var_224] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_208] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+var_214]  +
mov [ebp+var_208] 100h +
call edi  +
test eax eax +
jz loc_100D952  +
lea ecx [ebp+var_214] +
call sub_100D0BF  +
push [ebp+var_21C]  +
mov ecx [ebp+var_218] +
call sub_100CFA6  +
lea ecx [ebp+var_214] +
mov esi eax +
call sub_100D0BF  +
mov eax esi +
jmp loc_100D93A  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_100D9FF  +
push edi  +
mov ecx esi +
call sub_100D7D9  +
push dword ptr [eax]  +
call sub_10019EE  +
pop ecx  +
push edi  +
mov ecx esi +
call sub_100D80A  +
push dword ptr [eax]  +
call sub_10019EE  +
inc edi  +
cmp edi [esi+8] +
pop ecx  +
jl loc_100D9D9  +
mov ecx esi +
call sub_100D7A5  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
call sub_1001939  +
mov esi ecx +
xor eax eax +
cmp [ebp+8] eax +
jz loc_100DA4B  +
mov [ebp-10h] eax +
push dword ptr [ebp+8]  +
mov [ebp-4] eax +
call ds:lstrlenW  +
push eax  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_100D2B3  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1009A9F  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea ecx [esi+4] +
call sub_100D9CC  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset WindowName  +
push offset aAppid  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100D83C  +
cmp eax 0FFFFFFFFh +
jnz loc_100DAD2  +
xor eax eax +
jmp loc_100DADC  +
push eax  +
mov ecx esi +
call sub_100D80A  +
mov eax [eax] +
pop esi  +
pop ebp  +
retn 4  +
***
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call sub_10019EE  +
and dword ptr [esi] 0 +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx] +
shl edx 2 +
add eax edx +
jz loc_100DB28  +
push esi  +
mov esi [ebp+arg_4] +
mov esi [esi] +
mov [eax] esi +
pop esi  +
mov eax [ecx+4] +
add eax edx +
jz loc_100DB36  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 400h +
push esi  +
mov esi ecx +
jbe loc_100DB5A  +
push [ebp+arg_0]  +
call sub_100D884  +
jmp loc_100DB5F  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 100h +
push esi  +
mov esi ecx +
jbe loc_100DB86  +
push [ebp+arg_0]  +
call sub_100D884  +
jmp loc_100DB8B  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100462C +
call sub_1005AE2  +
test byte ptr [ebp+8] 1 +
jz loc_100DBB7  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
call sub_100D9CC  +
mov ecx [ebp-10h] +
call sub_100D7A5  +
call __EH_epilog3  +
retn   +
***
call sub_1001939  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1008054 +
push esi  +
mov dword ptr [ebp-4] 1 +
call sub_100DA58  +
lea eax [esi+10h] +
cmp byte ptr [eax+18h] 0 +
jz loc_100DC26  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_100DBC3  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jz loc_100DC4C  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
inc eax  +
retn 4  +
***
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1_Locimp@locale@std@@MAE@XZ  +
test [ebp+arg_0] 1 +
jz loc_100DC89  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+4] +
call sub_100DAB9  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001E69  +
mov edi [ebp+8] +
mov ebx [ebp+0Ch] +
mov esi ecx +
mov [ebp-64h] ebx +
test edi edi +
jz loc_100DDFB  +
test ebx ebx +
jz loc_100DDFB  +
and dword ptr [ebx] 0 +
push edi  +
call ds:lstrlenW  +
add eax eax +
push eax  +
lea ecx [ebp-60h] +
call sub_100D269  +
xor ecx ecx +
mov [ebp-4] ecx +
cmp [ebp-58h] ecx +
jnz loc_100DD21  +
push ecx  +
call CoTaskMemFree  +
mov eax 8007000Eh +
jmp loc_100DE00  +
mov [esi] edi +
mov [ebp-54h] ecx +
cmp [edi] cx +
jz loc_100DDCA  +
mov ebx ds:CharNextW +
mov eax [esi] +
cmp word ptr [eax] 25h +
jnz loc_100DDA6  +
push eax  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 25h +
jz loc_100DDA6  +
push 25h  +
push eax  +
call sub_100D4F5  +
mov edi eax +
test edi edi +
jz loc_100DDE0  +
mov ecx [esi] +
sub eax ecx +
sar eax 1 +
cmp eax 1Fh +
jg loc_100DDE9  +
push eax  +
push ecx  +
lea eax [ebp-50h] +
push 20h  +
push eax  +
call sub_100CE36  +
mov ecx [esi+4] +
add esp 10h +
lea eax [ebp-50h] +
push eax  +
call sub_100DC95  +
test eax eax +
jz loc_100DDE0  +
push eax  +
lea ecx [ebp-60h] +
call sub_100DA10  +
test eax eax +
jz loc_100DDF2  +
cmp [esi] edi +
jz loc_100DDB5  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp eax edi +
jz loc_100DDB5  +
jmp loc_100DD9A  +
push 1  +
push eax  +
lea ecx [ebp-60h] +
call sub_100D2B3  +
test eax eax +
jz loc_100DDF2  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 0 +
jnz loc_100DD35  +
mov ebx [ebp-64h] +
xor ecx ecx +
mov eax [ebp-58h] +
mov [ebp-58h] ecx +
mov [ebx] eax +
push dword ptr [ebp-58h]  +
call CoTaskMemFree  +
mov eax [ebp-54h] +
jmp loc_100DE00  +
mov dword ptr [ebp-54h] 80020009h +
jmp loc_100DDD2  +
mov dword ptr [ebp-54h] 80004005h +
jmp loc_100DDD2  +
mov dword ptr [ebp-54h] 8007000Eh +
jmp loc_100DDD2  +
mov eax 80004003h +
call sub_1002F11  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi off_1020774 +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_100DE32  +
xor eax eax +
jmp loc_100DE60  +
mov [esi] eax +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_100DE2E  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
mov [esi+4] eax +
push dword ptr [esi+8]  +
call sub_100DB0E  +
inc dword ptr [esi+8]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100D8AE  +
push eax  +
mov ecx esi +
call sub_100DB3F  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100D8AE  +
push eax  +
mov ecx esi +
call sub_100DB6B  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100D8AE  +
push eax  +
mov ecx esi +
call sub_100DB6B  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1005901  +
mov [ebp-30h] ecx +
xor edi edi +
cmp [ebp+8] edi +
jz loc_100E004  +
cmp [ebp+0Ch] edi +
jz loc_100E004  +
push dword ptr [ebp+8]  +
mov [ebp-1Ch] edi +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
xor ecx ecx +
push 2  +
pop edx  +
mov [ebp-20h] eax +
mul  edx +
seto cl  +
mov [ebp-14h] edi +
mov [ebp-4] edi +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1003218  +
pop ecx  +
mov [ebp-14h] eax +
jmp loc_100DF35  +
mov eax offset loc_100DF33 +
retn   +
xor edi edi +
mov eax [ebp-14h] +
push 2  +
pop esi  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] esi +
mov [ebp-2Ch] eax +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
xor ecx ecx +
mov [ebp-24h] eax +
mov edx esi +
mul  edx +
seto cl  +
mov [ebp-18h] edi +
mov byte ptr [ebp-4] 3 +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1003218  +
pop ecx  +
mov [ebp-18h] eax +
mov [ebp-4] esi +
jmp loc_100DF83  +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_100DF81 +
retn   +
xor edi edi +
mov esi [ebp-18h] +
mov byte ptr [ebp-4] 5 +
mov [ebp-28h] esi +
cmp [ebp-14h] edi +
jz loc_100DFCD  +
cmp esi edi +
jz loc_100DFCD  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-14h]  +
call sub_100CE10  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-24h]  +
push esi  +
call sub_100CE10  +
mov ecx [ebp-30h] +
add esp 20h +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_100DE0D  +
test eax eax +
jnz loc_100DFD6  +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_100DFDC  +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
push dword ptr [ebp-28h]  +
xor eax eax +
cmp [ebp-1Ch] edi +
mov byte ptr [ebp-4] 2 +
setnl al  +
mov esi eax +
call sub_10019EE  +
push dword ptr [ebp-2Ch]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_10019EE  +
pop ecx  +
pop ecx  +
mov eax esi +
jmp loc_100E006  +
xor eax eax +
call __EH_epilog3  +
retn 8  +
***
call sub_1001939  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100E071  +
cmp dword ptr [ebp+10h] 0 +
jz loc_100E071  +
mov esi [ebp+8] +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
and dword ptr [ebp+8] 0 +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+4] +
call sub_100DED7  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
lea ecx [ebp+8] +
call sub_1009A9F  +
mov eax esi +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
jmp loc_100E076  +
mov eax 80070057h +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset byte_101B5BB  +
mov eax large fs:0 +
push eax  +
push ecx  +
mov eax 2120h +
call __alloca_probe  +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_14] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_0] +
mov ebx [ebp+arg_4] +
mov [ebp+var_212C] eax +
lea eax [ebp+String] +
xor edi edi +
push eax  +
mov [ebp+var_2128] ecx +
mov [ebp+var_2124] esi +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_211C] edi +
call sub_100D581  +
cmp eax edi +
jl loc_100E3B5  +
lea eax [ebp+var_211C] +
push eax  +
lea eax [ebp+String] +
push eax  +
call sub_100D35D  +
test eax eax +
jnz loc_100E119  +
mov eax 80020009h +
jmp loc_100E3B5  +
mov ecx [ebp+var_2128] +
call sub_100D558  +
mov ecx [ebp+var_2128] +
lea eax [ebp+String] +
push eax  +
call sub_100D581  +
cmp eax edi +
jl loc_100E3B5  +
movzx eax word ptr [ebp+var_211C] +
sub eax 8 +
jz loc_100E37F  +
sub eax 9 +
jz loc_100E277  +
dec eax  +
dec eax  +
jz loc_100E23B  +
sub eax 3FF5h +
jnz loc_100E39E  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
inc eax  +
inc eax  +
mov [ebp+lpData] edi +
mov [ebp+var_4] edi +
push eax  +
lea ecx [ebp+lpData] +
mov byte ptr [ebp+var_4] 1 +
call sub_100DE8F  +
mov [ebp+var_4] edi +
jmp loc_100E1A3  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_100E1A1 +
retn   +
xor edi edi +
mov esi [ebp+lpData] +
cmp esi edi +
jz loc_100E216  +
cmp word ptr [ebp+String] 0 +
lea edi [ebp+String] +
jz loc_100E1F0  +
mov ebx ds:CharNextW +
push edi  +
call ebx  +
movzx ecx word ptr [edi] +
cmp cx 5Ch +
jnz loc_100E1E3  +
cmp word ptr [eax] 30h +
jnz loc_100E1E3  +
xor ecx ecx +
mov [esi] cx +
inc esi  +
push eax  +
inc esi  +
call ebx  +
mov edi eax +
jmp loc_100E1EA  +
mov [esi] cx +
inc esi  +
inc esi  +
inc edi  +
inc edi  +
cmp word ptr [edi] 0 +
jnz loc_100E1C3  +
mov ecx [ebp+var_2124] +
xor eax eax +
mov [esi] ax +
mov [esi+2] ax +
push [ebp+lpData]  +
push dword ptr [ebp+Data]  +
call sub_100D1D4  +
mov esi eax +
xor edi edi +
jmp loc_100E219  +
push 0Eh  +
pop esi  +
lea eax [ebp+var_2114] +
cmp [ebp+lpData] eax +
jz loc_100E392  +
lea ecx [ebp+lpData] +
call sub_100D877  +
jmp loc_100E392  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
lea eax [ebp+String] +
push eax  +
mov [ebp+var_2124] edi +
call VarUI4FromStr  +
push dword ptr [ebp+Data]  +
mov ecx esi +
push ebx  +
call sub_100D16E  +
lea ecx [ebp+var_2124] +
mov esi eax +
call sub_1009A9F  +
jmp loc_100E392  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
mov [ebp+var_211C] eax +
test al 1 +
jz loc_100E298  +
mov eax 80004005h +
jmp loc_100E3B5  +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
mov [ebp+var_2130] ebx +
mov [ebp+lpData] edi +
mov [ebp+var_4] 3 +
push ebx  +
lea ecx [ebp+lpData] +
mov byte ptr [ebp+var_4] 4 +
call sub_100DEB3  +
jmp loc_100E2D2  +
mov eax offset loc_100E2CA +
retn   +
mov ebx [ebp-2130h] +
xor edi edi +
cmp [ebp+lpData] edi +
jnz loc_100E2F1  +
lea eax [ebp+var_2114] +
test eax eax +
jz loc_100E28E  +
lea ecx [ebp+lpData] +
call sub_100D877  +
jmp loc_100E28E  +
push ebx  +
push edi  +
push [ebp+lpData]  +
call memset  +
add esp 0Ch +
cmp [ebp+var_211C] edi +
jle loc_100E343  +
mov ecx [ebp+lpData] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
movzx eax word ptr [ebp+edi*2+String] +
push eax  +
call sub_100D40D  +
mov edx edi +
and edx 1 +
shl edx 2 +
push 4  +
pop ecx  +
sub ecx edx +
shl al cl +
or [esi] al +
inc edi  +
cmp edi [ebp+var_211C] +
jl loc_100E309  +
xor edi edi +
mov eax [ebp+var_2124] +
mov eax [eax] +
push ebx  +
push [ebp+lpData]  +
push 3  +
push edi  +
push dword ptr [ebp+Data]  +
push eax  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp+var_2114] +
cmp [ebp+lpData] eax +
jz loc_100E392  +
lea ecx [ebp+lpData] +
call sub_100D877  +
jmp loc_100E392  +
push 1  +
lea eax [ebp+String] +
push eax  +
push ebx  +
mov ecx esi +
call sub_100D191  +
mov esi eax +
cmp esi edi +
jz loc_100E39E  +
push esi  +
call sub_100CE8F  +
jmp loc_100E3B5  +
push [ebp+var_212C]  +
mov ecx [ebp+var_2128] +
call sub_100D581  +
cmp eax edi +
jl loc_100E3B5  +
xor eax eax +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_14] +
xor ecx ebp +
call sub_10019B3  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset byte_101B623  +
mov eax large fs:0 +
push eax  +
mov eax 225Ch +
call __alloca_probe  +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_221C] ecx +
mov [ebp+var_2220] eax +
mov [ebp+var_222C] ebx +
mov [ebp+var_2228] ebx +
mov [ebp+var_2224] ebx +
mov eax [ebp+arg_C] +
push edi  +
mov [ebp+var_4] ebx +
mov [ebp+var_2264] eax +
call sub_100D581  +
mov esi eax +
cmp esi ebx +
jmp loc_100E953  +
mov esi ds:lstrcmpiW +
push offset String2  +
push edi  +
mov [ebp+var_2230] 1 +
call esi  +
mov ebx eax +
neg ebx  +
push offset aForceremove  +
sbb ebx ebx +
push edi  +
inc ebx  +
call esi  +
test eax eax +
jz loc_100E47E  +
test ebx ebx +
jz loc_100E53B  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100D581  +
mov esi eax +
test esi esi +
jl loc_100E9BC  +
cmp [ebp+arg_8] 0 +
jz loc_100E53B  +
xor esi esi +
push 5Ch  +
push edi  +
mov [ebp+var_223C] esi +
mov [ebp+var_2238] esi +
mov [ebp+var_2234] esi +
call sub_100D4F5  +
test eax eax +
jnz loc_100E960  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100D696  +
test eax eax +
jz loc_100E4F0  +
mov eax [ebp+var_2220] +
push edi  +
lea ecx [ebp+var_223C] +
mov [ebp+var_223C] eax +
call sub_100D8D8  +
mov [ebp+var_223C] esi +
cmp ebx esi +
jz loc_100E530  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100D581  +
mov esi eax +
test esi esi +
jl loc_100E972  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100D739  +
lea ecx [ebp+var_223C] +
mov esi eax +
call sub_100D0BF  +
test esi esi +
jge loc_100E90E  +
jmp loc_100E9BC  +
lea ecx [ebp+var_223C] +
call sub_100D0BF  +
push offset aNoremove  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_100E567  +
mov ecx [ebp+var_221C] +
and [ebp+var_2230] eax +
push edi  +
call sub_100D581  +
mov esi eax +
test esi esi +
jl loc_100E9BC  +
push offset aVal  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_100E68C  +
mov ecx [ebp+var_221C] +
lea eax [ebp+ValueName] +
push eax  +
call sub_100D581  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
jl loc_100E9BC  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100D581  +
mov esi eax +
cmp esi ebx +
jl loc_100E9BC  +
cmp word ptr [edi] 3Dh +
jnz loc_100E96B  +
cmp [ebp+arg_8] ebx +
jz loc_100E612  +
mov [ebp+var_2250] ebx +
mov [ebp+var_224C] ebx +
mov eax [ebp+var_2220] +
mov ecx [ebp+var_221C] +
mov [ebp+var_2254] eax +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
lea eax [ebp+var_2254] +
push eax  +
mov byte ptr [ebp+var_4] 1 +
call sub_100E083  +
mov esi eax +
cmp esi ebx +
mov [ebp+var_2254] ebx +
lea ecx [ebp+var_2254] +
jl loc_100E9B7  +
mov byte ptr [ebp+var_4] bl +
jmp loc_100E909  +
cmp [ebp+arg_C] ebx +
jnz loc_100E67B  +
cmp [ebp+var_2230] ebx +
jz loc_100E67B  +
push 20006h  +
push ebx  +
push [ebp+var_2220]  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] ebx +
mov [ebp+var_2244] ebx +
mov [ebp+var_2240] ebx +
call sub_100D132  +
cmp eax ebx +
jnz loc_100E97A  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax ebx +
jz loc_100E670  +
cmp eax 2 +
jnz loc_100E97A  +
lea ecx [ebp+hKey] +
call sub_100D0BF  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100D739  +
jmp loc_100E442  +
push 5Ch  +
push edi  +
call sub_100D4F5  +
test eax eax +
jnz loc_100E96B  +
cmp [ebp+arg_8] eax +
jz loc_100E73B  +
mov esi 2001Fh +
push esi  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_100D132  +
test eax eax +
jz loc_100E6FF  +
push 20019h  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_100D132  +
test eax eax +
jz loc_100E6FF  +
xor ebx ebx +
push ebx  +
push ebx  +
push esi  +
push ebx  +
push ebx  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_100D0DD  +
mov esi eax +
cmp esi ebx +
jnz loc_100E988  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100D581  +
mov esi eax +
test esi esi +
jl loc_100E9BC  +
cmp word ptr [edi] 3Dh +
jnz loc_100E90E  +
mov ecx [ebp+var_221C] +
push edi  +
push 0  +
lea eax [ebp+var_222C] +
push eax  +
call sub_100E083  +
mov esi eax +
jmp loc_100E523  +
cmp [ebp+arg_C] 0 +
jnz loc_100E75C  +
push 20019h  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_100D132  +
mov ebx eax +
jmp loc_100E75F  +
push 2  +
pop ebx  +
test ebx ebx +
jz loc_100E76A  +
mov [ebp+arg_C] 1 +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+SubKey] +
push 104h  +
push eax  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_100B78F  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100D581  +
mov esi eax +
test esi esi +
jl loc_100E9BC  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100D739  +
mov esi eax +
test esi esi +
jl loc_100E9BC  +
cmp word ptr [edi] 7Bh +
jnz loc_100E802  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_100E802  +
push [ebp+arg_C]  +
mov ecx [ebp+var_221C] +
push 0  +
push [ebp+var_222C]  +
push edi  +
call sub_100E3D6  +
mov esi eax +
test esi esi +
jge loc_100E7EC  +
cmp [ebp+arg_C] 0 +
jz loc_100E9BC  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100D581  +
mov esi eax +
test esi esi +
jl loc_100E9BC  +
mov eax [ebp+var_2264] +
mov [ebp+arg_C] eax +
cmp ebx 2 +
jz loc_100E955  +
test ebx ebx +
jz loc_100E82D  +
test eax eax +
jnz loc_100E955  +
push ebx  +
call sub_100CE8F  +
mov esi eax +
jmp loc_100E9BC  +
test eax eax +
jz loc_100E884  +
push [ebp+var_222C]  +
mov ecx [ebp+var_221C] +
call sub_100D6FD  +
test eax eax +
jz loc_100E884  +
mov ecx [ebp+var_221C] +
lea eax [ebp+SubKey] +
push eax  +
call sub_100D696  +
test eax eax +
jz loc_100E955  +
cmp [ebp+var_2230] 0 +
jz loc_100E955  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_222C] +
call sub_100D8D8  +
jmp loc_100E955  +
push [ebp+var_222C]  +
mov ecx [ebp+var_221C] +
call sub_100D6FD  +
lea ecx [ebp+var_222C] +
mov [ebp+var_2268] eax +
call sub_100D0BF  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_100E99B  +
cmp [ebp+var_2230] eax +
jz loc_100E955  +
cmp [ebp+var_2268] eax +
jnz loc_100E955  +
mov [ebp+var_225C] eax +
mov [ebp+var_2258] eax +
mov eax [ebp+var_2220] +
mov [ebp+var_2260] eax +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2260] +
call sub_100CFA6  +
and [ebp+var_2260] 0 +
test eax eax +
jnz loc_100E9A9  +
lea ecx [ebp+var_2260] +
call sub_100D0BF  +
cmp [ebp+arg_8] 0 +
jz loc_100E955  +
cmp word ptr [edi] 7Bh +
jnz loc_100E955  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_100E955  +
mov ecx [ebp+var_221C] +
push 0  +
push [ebp+arg_8]  +
push [ebp+var_222C]  +
push edi  +
call sub_100E3D6  +
mov esi eax +
test esi esi +
jl loc_100E9BC  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_100D581  +
mov esi eax +
test esi esi +
jl loc_100E9BC  +
cmp word ptr [edi] 7Dh +
jz loc_100E9BC  +
jmp loc_100E44B  +
lea ecx [ebp+var_223C] +
call sub_100D0BF  +
mov esi 80020009h +
jmp loc_100E9BC  +
lea ecx [ebp+var_223C] +
jmp loc_100E9B7  +
push eax  +
call sub_100CE8F  +
lea ecx [ebp+hKey] +
jmp loc_100E9B5  +
lea ecx [ebp+var_222C] +
call sub_100D0BF  +
push esi  +
call sub_100CE8F  +
jmp loc_100E9C9  +
lea ecx [ebp+var_222C] +
call sub_100D0BF  +
push ebx  +
jmp loc_100E994  +
push eax  +
call sub_100CE8F  +
lea ecx [ebp+var_2260] +
mov esi eax +
call sub_100D0BF  +
lea ecx [ebp+var_222C] +
call sub_100D0BF  +
mov eax esi +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_10019B3  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov edx ecx +
push edi  +
mov dword ptr [edx] offset off_1008054 +
and dword ptr [edx+4] 0 +
and dword ptr [edx+8] 0 +
and dword ptr [edx+0Ch] 0 +
lea esi [edx+10h] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 200Ch +
call __alloca_probe  +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+pv] 0 +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+pv] +
push ecx  +
push eax  +
mov ecx esi +
call sub_100DCCA  +
mov edi eax +
test edi edi +
jl loc_100EB59  +
mov eax [ebp+pv] +
xor ecx ecx +
mov [esi] eax +
cmp cx [eax] +
jz loc_100EB4B  +
push ebx  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_100D581  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jl loc_100EB4A  +
lea eax [ebp+String1] +
push eax  +
call sub_100D44C  +
mov [ebp+var_200C] eax +
cmp eax ebx +
jz loc_100EB92  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_100D581  +
mov edi eax +
cmp edi ebx +
jl loc_100EB4A  +
push 7Bh  +
pop eax  +
cmp ax [ebp+String1] +
jnz loc_100EB92  +
lea eax [ebp+String1] +
mov ecx esi +
cmp [ebp+arg_4] ebx +
jz loc_100EB69  +
mov ebx [esi] +
push 0  +
push [ebp+arg_4]  +
push [ebp+var_200C]  +
push eax  +
call sub_100E3D6  +
mov edi eax +
test edi edi +
jge loc_100EB7D  +
push 0  +
push 0  +
push [ebp+var_200C]  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
mov [esi] ebx +
call sub_100E3D6  +
pop ebx  +
push [ebp+pv]  +
call CoTaskMemFree  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10019B3  +
leave   +
retn 8  +
push ebx  +
push ebx  +
push [ebp+var_200C]  +
push eax  +
call sub_100E3D6  +
mov edi eax +
cmp edi ebx +
jl loc_100EB4A  +
mov ecx esi +
call sub_100D558  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_100EB4A  +
jmp loc_100EAB6  +
mov edi 80020009h +
jmp loc_100EB4A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100CCDE  +
test eax eax +
jz loc_100EBBD  +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_100B9CE  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_101A510  +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
mov ebx [ebp+10h] +
xor esi esi +
mov [ebp-424h] esi +
mov [ebp-4] esi +
mov [ebp-42Ch] ecx +
mov [ebp-430h] esi +
mov [ebp-418h] esi +
push 2  +
push esi  +
push eax  +
mov byte ptr [ebp-4] 1 +
call ds:LoadLibraryExW  +
mov [ebp-41Ch] eax +
cmp eax esi +
jnz loc_100EC20  +
call sub_100CE75  +
mov esi eax +
jmp loc_100ED29  +
push ebx  +
push edi  +
push eax  +
call ds:FindResourceW  +
mov edi eax +
cmp edi esi +
jnz loc_100EC39  +
call sub_100CE75  +
jmp loc_100ED1B  +
push edi  +
push dword ptr [ebp-41Ch]  +
call ds:LoadResource  +
mov [ebp-428h] eax +
cmp eax esi +
jz loc_100EC2F  +
push edi  +
push dword ptr [ebp-41Ch]  +
call ds:SizeofResource  +
mov edi eax +
lea eax [edi+1] +
mov [ebp-420h] edi +
cmp eax edi +
jnb loc_100EC9F  +
lea eax [ebp-414h] +
cmp [ebp-418h] eax +
jz loc_100EC85  +
lea ecx [ebp-418h] +
call sub_100D877  +
mov esi 8007000Eh +
lea ecx [ebp-424h] +
call sub_1009A9F  +
mov eax esi +
call sub_101A550  +
retn 10h  +
push eax  +
lea ecx [ebp-418h] +
mov byte ptr [ebp-4] 2 +
call sub_100DE6B  +
mov dword ptr [ebp-4] 1 +
jmp loc_100ECCD  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_100ECC5 +
retn   +
mov edi [ebp-420h] +
xor esi esi +
cmp [ebp-418h] esi +
jnz loc_100ECDC  +
mov esi 8007000Eh +
jmp loc_100ED1D  +
push edi  +
push dword ptr [ebp-418h]  +
push edi  +
push dword ptr [ebp-428h]  +
push esi  +
push 3  +
call ds:MultiByteToWideChar  +
cmp eax esi +
jz loc_100EC2F  +
mov edx [ebp-418h] +
push dword ptr [ebp+14h]  +
xor ecx ecx +
mov [edx+eax*2] cx +
push dword ptr [ebp-418h]  +
lea ecx [ebp-430h] +
call sub_100EA62  +
mov esi eax +
push dword ptr [ebp-41Ch]  +
call ds:__imp_FreeLibrary  +
lea eax [ebp-414h] +
cmp [ebp-418h] eax +
jz loc_100EC8A  +
lea ecx [ebp-418h] +
call sub_100D877  +
jmp loc_100EC8A  +
***
call sub_1001939  +
and dword ptr [ebp-10h] 0 +
movzx eax word ptr [ebp+10h] +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push 1  +
push dword ptr [ebp+14h]  +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_100EBC7  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1009A9F  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
call sub_1001939  +
xor eax eax +
mov [ebp-10h] eax +
mov [ebp-4] eax +
cmp [ebp+10h] eax +
jz loc_100EDD1  +
cmp [ebp+14h] eax +
jz loc_100EDD1  +
mov ecx [ebp+8] +
push 1  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100EBC7  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1009A9F  +
mov eax esi +
jmp loc_100EDDE  +
lea ecx [ebp-10h] +
call sub_1009A9F  +
mov eax 80070057h +
call __EH_epilog3  +
retn 10h  +
***
call sub_1001939  +
xor eax eax +
mov [ebp-10h] eax +
mov ecx [ebp+8] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp-4] eax +
movzx eax word ptr [ebp+10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_100EBC7  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1009A9F  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
call sub_1001939  +
xor eax eax +
mov [ebp-10h] eax +
mov [ebp-4] eax +
cmp [ebp+10h] eax +
jz loc_100EE6A  +
cmp [ebp+14h] eax +
jz loc_100EE6A  +
mov ecx [ebp+8] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100EBC7  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1009A9F  +
mov eax esi +
jmp loc_100EE77  +
lea ecx [ebp-10h] +
call sub_1009A9F  +
mov eax 80070057h +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A68h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_0] +
lea ecx [ebp+var_A68] +
mov [ebp+var_A3C] eax +
call sub_100EA31  +
lea ecx [ebp+var_A58] +
call sub_100CE5C  +
mov ebx eax +
test ebx ebx +
jge loc_100EEE5  +
lea ecx [ebp+var_A68] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10019B3  +
leave   +
retn 10h  +
test esi esi +
jnz loc_100EEFE  +
jmp loc_100EF04  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp+var_A68] +
push eax  +
call sub_100E013  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_100EEEB  +
mov eax [edi] +
lea ecx [ebp+var_A68] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp eax ebx +
jge loc_100EF29  +
mov esi eax +
lea ecx [ebp+var_A68] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax esi +
jmp loc_100EED4  +
mov edi hInstance +
mov esi 104h +
push esi  +
lea eax [ebp+Filename] +
push eax  +
push edi  +
mov [ebp+var_A38] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_100EF61  +
call sub_100CE75  +
mov esi eax +
lea ecx [ebp+var_A38] +
call sub_1009A9F  +
jmp loc_100EF1A  +
cmp eax esi +
jnz loc_100EF77  +
lea ecx [ebp+var_A38] +
call sub_1009A9F  +
mov esi 8007007Ah +
jmp loc_100EF1A  +
lea eax [ebp+Filename] +
push eax  +
push 208h  +
lea eax [ebp+var_A34] +
push eax  +
call sub_100CF41  +
cmp edi ebx +
jz loc_100EFA6  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_100EFA6  +
lea eax [ebp+var_A34] +
jmp loc_100F00B  +
push 22h  +
pop eax  +
mov [ebp+String] ax +
lea eax [ebp+var_A34] +
push eax  +
push 20Bh  +
lea eax [ebp-622h] +
push eax  +
call sub_100CDDB  +
test al al +
jnz loc_100EFE1  +
lea ecx [ebp+var_A38] +
call sub_1009A9F  +
mov esi 80004005h +
jmp loc_100EF1A  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov [ebp+eax+String] cx +
xor ecx ecx +
mov [ebp+eax-622h] cx +
lea eax [ebp+String] +
push eax  +
push offset aModule  +
lea eax [ebp+var_A68] +
push eax  +
call sub_100E013  +
mov esi eax +
cmp esi ebx +
jl loc_100EF54  +
lea eax [ebp+var_A34] +
push eax  +
push offset aModule_raw  +
lea eax [ebp+var_A68] +
push eax  +
call sub_100E013  +
mov esi eax +
cmp esi ebx +
jl loc_100EF54  +
push offset aRegistry  +
push [ebp+var_A3C]  +
lea eax [ebp+Filename] +
push eax  +
lea eax [ebp+var_A68] +
push eax  +
cmp [ebp+arg_8] ebx +
jz loc_100F071  +
call sub_100ED92  +
jmp loc_100EF52  +
call sub_100EE2C  +
jmp loc_100EF52  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A64h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_0] +
lea ecx [ebp+var_A64] +
call sub_100EA31  +
lea ecx [ebp+var_A54] +
call sub_100CE5C  +
mov ebx eax +
test ebx ebx +
jge loc_100F0D8  +
lea ecx [ebp+var_A64] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10019B3  +
leave   +
retn 10h  +
test esi esi +
jnz loc_100F0F1  +
jmp loc_100F0F7  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp+var_A64] +
push eax  +
call sub_100E013  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_100F0DE  +
mov eax [edi] +
lea ecx [ebp+var_A64] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp eax ebx +
jge loc_100F11C  +
mov esi eax +
lea ecx [ebp+var_A64] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax esi +
jmp loc_100F0C7  +
mov edi hInstance +
mov esi 104h +
push esi  +
lea eax [ebp+Filename] +
push eax  +
push edi  +
mov [ebp+var_A38] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_100F154  +
call sub_100CE75  +
mov esi eax +
lea ecx [ebp+var_A38] +
call sub_1009A9F  +
jmp loc_100F10D  +
cmp eax esi +
jnz loc_100F16A  +
lea ecx [ebp+var_A38] +
call sub_1009A9F  +
mov esi 8007007Ah +
jmp loc_100F10D  +
lea eax [ebp+Filename] +
push eax  +
push 208h  +
lea eax [ebp+var_A34] +
push eax  +
call sub_100CF41  +
cmp edi ebx +
jz loc_100F199  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_100F199  +
lea eax [ebp+var_A34] +
jmp loc_100F1FE  +
push 22h  +
pop eax  +
mov [ebp+String] ax +
lea eax [ebp+var_A34] +
push eax  +
push 20Bh  +
lea eax [ebp-622h] +
push eax  +
call sub_100CDDB  +
test al al +
jnz loc_100F1D4  +
lea ecx [ebp+var_A38] +
call sub_1009A9F  +
mov esi 80004005h +
jmp loc_100F10D  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov [ebp+eax+String] cx +
xor ecx ecx +
mov [ebp+eax-622h] cx +
lea eax [ebp+String] +
push eax  +
push offset aModule  +
lea eax [ebp+var_A64] +
push eax  +
call sub_100E013  +
mov esi eax +
cmp esi ebx +
jl loc_100F147  +
lea eax [ebp+var_A34] +
push eax  +
push offset aModule_raw  +
lea eax [ebp+var_A64] +
push eax  +
call sub_100E013  +
mov esi eax +
cmp esi ebx +
jl loc_100F147  +
push offset aRegistry  +
push [ebp+arg_4]  +
lea eax [ebp+Filename] +
push eax  +
lea eax [ebp+var_A64] +
push eax  +
cmp [ebp+arg_8] ebx +
jz loc_100F261  +
call sub_100ED50  +
jmp loc_100F145  +
call sub_100EDEB  +
jmp loc_100F145  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_100EE84  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_100F080  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10200B0 0 +
push esi  +
push edi  +
mov esi ecx +
jnz loc_100F2A9  +
and dword_10200B0 0 +
lea eax [esi+20h] +
push eax  +
mov ecx offset a0 +
call sub_1009538  +
push [ebp+arg_C]  +
movzx edi ax +
call sub_100CD40  +
cmp [ebp+lpWindowName] 0 +
jnz loc_100F2CC  +
and [ebp+lpWindowName] 0 +
push [ebp+lpParam]  +
mov ecx esi +
push edi  +
push [ebp+hMenu]  +
push [ebp+dwExStyle]  +
push eax  +
push [ebp+lpWindowName]  +
push [ebp+arg_4]  +
push [ebp+hWndParent]  +
call sub_1009351  +
pop edi  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
call sub_1001939  +
mov ebx ecx +
mov al [ebx+3E6h] +
test al al +
jz loc_100F311  +
mov byte ptr [ebx+3E7h] 1 +
push offset aQuarui_details  +
call sub_100FFBD  +
test al al +
jnz loc_100F522  +
xor eax eax +
mov [ebp-28h] eax +
mov [ebp-24h] eax +
mov [ebp-20h] eax +
mov [ebp-1Ch] eax +
lea eax [ebp-48h] +
push eax  +
call sub_100FC53  +
fld1   +
mov esi eax +
fst  dword ptr [ebp-10h] +
lea edi [ebp-38h] +
fstp  dword ptr [ebp-14h] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp-30h] +
sub esi [ebp-38h] +
mov edi [ebp-2Ch] +
sub edi [ebp-34h] +
inc esi  +
push 0  +
inc edi  +
call ds:GetDC  +
mov [ebp-18h] eax +
test eax eax +
jz loc_100F3A5  +
push 58h  +
push eax  +
call ds:GetDeviceCaps  +
mov [ebp-14h] eax +
fild  dword ptr [ebp-14h] +
push 5Ah  +
push dword ptr [ebp-18h]  +
fdiv  ds:dbl_100F540 +
fstp  dword ptr [ebp-10h] +
call ds:GetDeviceCaps  +
mov [ebp-14h] eax +
fild  dword ptr [ebp-14h] +
push dword ptr [ebp-18h]  +
push 0  +
fdiv  ds:dbl_100F540 +
fstp  dword ptr [ebp-14h] +
call ds:ReleaseDC  +
fld  dword ptr [ebp-14h] +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
mov ecx offset unk_101F238 +
fld  dword ptr [ebp-10h] +
fstp  [esp+0Ch+var_C] +
call sub_10178EF  +
fld  dword ptr [ebp-10h] +
fmul  ds:dbl_100F538 +
call _ftol2_sse  +
cmp eax esi +
mov [ebp-10h] eax +
jl loc_100F3D6  +
mov [ebp-10h] esi +
fld  dword ptr [ebp-14h] +
fmul  ds:dbl_100F530 +
call _ftol2_sse  +
cmp eax edi +
mov [ebp-14h] eax +
jl loc_100F3EE  +
mov [ebp-14h] edi +
push dword ptr [ebp-14h]  +
mov ecx offset unk_101F238 +
push dword ptr [ebp-10h]  +
call sub_101790F  +
mov eax [ebp-10h] +
cmp eax esi +
mov [ebp-10h] eax +
jl loc_100F40B  +
mov [ebp-10h] esi +
mov eax [ebp-14h] +
cmp eax edi +
mov [ebp-18h] eax +
jl loc_100F418  +
mov [ebp-18h] edi +
mov eax esi +
sub eax [ebp-10h] +
mov esi [ebp-18h] +
cdq   +
sub eax edx +
mov ecx eax +
mov eax edi +
sub eax esi +
cdq   +
sub eax edx +
mov edx [ebp-10h] +
sar eax 1 +
add eax [ebp-34h] +
sar ecx 1 +
add ecx [ebp-38h] +
mov [ebp-24h] eax +
add eax esi +
mov esi ds:SendMessageW +
mov [ebp-28h] ecx +
add ecx edx +
mov [ebp-1Ch] eax +
lea eax [ebx+404h] +
mov [ebp-20h] ecx +
mov ecx [eax] +
mov dword_1020098 ecx +
push dword ptr [eax]  +
mov edi 80h +
push 0  +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
push dword ptr [ebx+400h]  +
push 1  +
push edi  +
push dword ptr [ebp+8]  +
call esi  +
push offset dword_101F10C  +
lea ecx [ebp+8] +
call sub_1001865  +
xor edi edi +
push 3A99h  +
mov [ebp-4] edi +
call sub_100198C  +
push eax  +
lea ecx [ebp+8] +
call sub_100B9CE  +
mov esi 50100h +
call sub_100FBEB  +
test al al +
jz loc_100F4B2  +
mov esi 550100h +
cmp [ebx+3E0h] edi +
jnz loc_100F4DE  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100F4DE  +
test byte ptr [eax+1Ch] 4 +
jz loc_100F4DE  +
push offset sub_1004108  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
push dword ptr [ebx+3E0h]  +
push ecx  +
mov eax esp +
mov [ebp-18h] esp +
push esi  +
mov esi [ebp+8] +
push 16CF0000h  +
push esi  +
push ecx  +
mov [eax] edi +
mov eax esp +
lea ecx [ebp-28h] +
mov [ebp-18h] esp +
mov [eax] ecx +
push edi  +
mov ecx offset unk_101F238 +
call sub_100F290  +
push 1  +
push hWnd  +
call ds:ShowWindow  +
lea ecx [esi-10h] +
call sub_10018D0  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 0 +
jz loc_100F57E  +
dec eax  +
jz loc_100F57A  +
dec eax  +
jz loc_100F576  +
dec eax  +
jz loc_100F572  +
dec eax  +
jz loc_100F56E  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
jmp loc_100F58B  +
push 15h  +
jmp loc_100F580  +
push 0Eh  +
jmp loc_100F580  +
push 2  +
jmp loc_100F580  +
push 8  +
jmp loc_100F580  +
push 5  +
call ds:GetSysColor  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov edx 80070057h +
test ecx ecx +
jz loc_100F5AF  +
cmp ecx 7FFFFFFFh +
jbe loc_100F5B1  +
mov eax edx +
test eax eax +
jl loc_100F60E  +
push edi  +
mov edi [ebp+arg_C] +
cmp edi 7FFFFFFEh +
jbe loc_100F5CD  +
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_100F60D  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_100F5FD  +
mov edx [ebp+arg_8] +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100F5F9  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_100F5F9  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_100F5E1  +
test esi esi +
jnz loc_100F604  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
call sub_1001E69  +
mov edi [ebp+8] +
push edi  +
mov [ebp-26Ch] edi +
call ds:SaveDC  +
push 2  +
push edi  +
call ds:SetGraphicsMode  +
push 1  +
xor ebx ebx +
push ebx  +
push edi  +
call ds:ModifyWorldTransform  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
call ds:SetViewportOrgEx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
call ds:SetWindowOrgEx  +
mov esi ds:GetDeviceCaps +
cmp [ebp+24h] ebx +
jz loc_100F694  +
push 58h  +
push edi  +
call esi  +
mov [ebp-268h] eax +
fild  dword ptr [ebp-268h] +
push 5Ah  +
push edi  +
fstp  dword ptr [ebp-270h] +
call esi  +
mov [ebp-268h] eax +
fild  dword ptr [ebp-268h] +
jmp loc_100F702  +
push 8  +
push edi  +
call esi  +
mov [ebp-268h] eax +
fild  dword ptr [ebp-268h] +
push 4  +
push edi  +
fmul  ds:dbl_100F918 +
fstp  qword ptr [ebp-274h] +
call esi  +
mov [ebp-268h] eax +
fild  dword ptr [ebp-268h] +
push 0Ah  +
push edi  +
fdivr  qword ptr [ebp-274h] +
fstp  dword ptr [ebp-270h] +
call esi  +
mov [ebp-268h] eax +
fild  dword ptr [ebp-268h] +
push 6  +
push edi  +
fmul  ds:dbl_100F918 +
fstp  qword ptr [ebp-284h] +
call esi  +
mov [ebp-268h] eax +
fild  dword ptr [ebp-268h] +
fdivr  qword ptr [ebp-284h] +
fstp  dword ptr [ebp-268h] +
fild  dword ptr [ebp+10h] +
fmul  dword ptr [ebp-270h] +
fld  ds:dbl_100F910 +
fdiv st(1) st +
fxch  st(1) +
call _ftol2_sse  +
fild  dword ptr [ebp+0Ch] +
mov [ebp-27Ch] eax +
fmul  dword ptr [ebp-268h] +
fdivrp st(1) st +
call _ftol2_sse  +
mov [ebp-278h] eax +
push 1  +
lea eax [ebp-27Ch] +
push eax  +
push edi  +
call ds:DPtoLP  +
push 1F4h  +
lea eax [ebp-260h] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
push ebx  +
lea ecx [ebp-264h] +
mov eax 1F8h +
push ecx  +
push eax  +
push 29h  +
mov [ebp-264h] eax +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_100F797  +
push 17h  +
pop ecx  +
lea esi [ebp-24Ch] +
lea edi [ebp-6Ch] +
movs   +
mov edi [ebp-26Ch] +
jmp loc_100F814  +
push offset dword_101F10C  +
lea ecx [ebp-268h] +
call sub_1001865  +
push 3AB1h  +
lea ecx [ebp-268h] +
mov [ebp-4] ebx +
call sub_100EB9E  +
push 40h  +
lea eax [ebp-50h] +
push ebx  +
push eax  +
call memset  +
mov esi [ebp-268h] +
mov eax [esi-0Ch] +
add esp 0Ch +
cmp eax 1Fh +
jbe loc_100F7DA  +
push 1Fh  +
pop eax  +
push eax  +
push esi  +
push 20h  +
lea eax [ebp-50h] +
push eax  +
call sub_100F594  +
mov [ebp-68h] ebx +
mov [ebp-64h] ebx +
mov [ebp-60h] ebx +
mov byte ptr [ebp-55h] 1 +
mov [ebp-54h] bl +
mov [ebp-53h] bl +
call sub_100FCC4  +
test al al +
setnz al  +
add al 4 +
lea ecx [esi-10h] +
mov [ebp-52h] al +
mov [ebp-51h] bl +
call sub_10018D0  +
fild  dword ptr [ebp-278h] +
fabs   +
fstp  dword ptr [ebp-26Ch] +
fld  dword ptr [ebp-26Ch] +
fdiv  ds:dbl_10080C8 +
fadd  ds:dbl_10080C0 +
call _ftol2_sse  +
neg eax  +
mov [ebp-6Ch] eax +
mov eax [ebp+14h] +
mov esi ds:CreateFontIndirectW +
neg eax  +
sbb eax eax +
and eax 2BCh +
cmp [ebp+18h] ebx +
mov [ebp-5Ch] eax +
setnz al  +
cmp [ebp+1Ch] ebx +
mov [ebp-58h] al +
setnz al  +
cmp [ebp+20h] ebx +
mov [ebp-57h] al +
setnz al  +
mov [ebp-56h] al +
lea eax [ebp-6Ch] +
push eax  +
call esi  +
mov [ebp-270h] eax +
cmp [ebp+10h] ebx +
jz loc_100F8F5  +
mov ebx ds:SelectObject +
push eax  +
push edi  +
call ebx  +
mov [ebp-270h] eax +
lea eax [ebp-2C0h] +
push eax  +
push edi  +
call ds:GetTextMetricsW  +
push dword ptr [ebp-270h]  +
push edi  +
call ebx  +
push eax  +
call ds:DeleteObject  +
fild  dword ptr [ebp-27Ch] +
fabs   +
fstp  dword ptr [ebp-26Ch] +
fld  dword ptr [ebp-26Ch] +
fimul  dword ptr [ebp-2ACh] +
fild  dword ptr [ebp-278h] +
fabs   +
fstp  dword ptr [ebp-26Ch] +
fdiv  dword ptr [ebp-26Ch] +
fadd  ds:dbl_10080C0 +
call _ftol2_sse  +
mov [ebp-68h] eax +
lea eax [ebp-6Ch] +
push eax  +
call esi  +
mov [ebp-270h] eax +
push 0FFFFFFFFh  +
push edi  +
call ds:RestoreDC  +
mov eax [ebp-270h] +
call sub_1002F11  +
retn 20h  +
***
call sub_1001939  +
mov esi offset dword_101F10C +
push esi  +
lea ecx [ebp-10h] +
call sub_1001865  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
call sub_100198C  +
push eax  +
lea ecx [ebp-10h] +
call sub_100B9CE  +
mov edi [ebp-10h] +
push edi  +
call ds:_wtof  +
fstp  dword ptr [ebp+0Ch] +
fldz   +
pop ecx  +
fcomp  dword ptr [ebp+0Ch] +
fnstsw  ax +
test ah 44h +
jp loc_100F9A2  +
push esi  +
lea ecx [ebp+0Ch] +
call sub_1001865  +
push 3AB2h  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 1 +
call sub_100EB9E  +
mov esi [ebp+0Ch] +
push esi  +
call ds:_wtof  +
fstp  dword ptr [ebp+0Ch] +
pop ecx  +
lea ecx [esi-10h] +
mov byte ptr [ebp-4] 0 +
call sub_10018D0  +
fld  dword ptr [ebp+0Ch] +
push 1  +
push dword ptr [ebp+1Ch]  +
fmul  ds:dbl_10080C8 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 0  +
call _ftol2_sse  +
push eax  +
push dword ptr [ebp+8]  +
call sub_100F617  +
lea ecx [edi-10h] +
mov esi eax +
call sub_10018D0  +
mov eax esi +
call __EH_epilog3  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
sub ecx eax +
push eax  +
push eax  +
push eax  +
jz loc_100FA1C  +
dec ecx  +
jz loc_100FA13  +
dec ecx  +
jz loc_100FA0B  +
dec ecx  +
jz loc_100FA03  +
dec ecx  +
jnz loc_100FA1C  +
push 1  +
jmp loc_100FA1D  +
push eax  +
push 3AC0h  +
jmp loc_100FA22  +
push eax  +
push 3ABEh  +
jmp loc_100FA22  +
push 1  +
push 3AB4h  +
jmp loc_100FA22  +
push eax  +
push 3AB2h  +
push [ebp+arg_0]  +
call sub_100F925  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor esi esi +
push esi  +
push [ebp+hKey]  +
mov [ebp+var_8] esi +
push [ebp+cbData]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100FB07  +
push ebx  +
mov ebx ds:RegQueryValueExW +
push edi  +
lea eax [ebp+cbData] +
push eax  +
push esi  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push [ebp+lpValueName]  +
xor edi edi +
push [ebp+hKey]  +
inc edi  +
mov [ebp+cbData] esi +
mov [ebp+Type] edi +
call ebx  +
test eax eax +
jnz loc_100FAFC  +
cmp [ebp+Type] edi +
jnz loc_100FAFC  +
mov esi [ebp+arg_C] +
test esi esi +
jz loc_100FB0F  +
mov edi [ebp+cbData] +
shr edi 1 +
cmp edi 104h +
ja loc_100FAFC  +
push offset unk_10207E0  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_101A654  +
pop ecx  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_100FAFC  +
lea ecx [edi+edi] +
push ecx  +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+cbData] +
push eax  +
push dword ptr [esi]  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ebx  +
test eax eax +
jnz loc_100FAF1  +
mov [ebp+var_8] 1 +
jmp loc_100FB12  +
push dword ptr [esi]  +
call sub_10019EE  +
and dword ptr [esi] 0 +
pop ecx  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop edi  +
pop ebx  +
mov eax [ebp+var_8] +
pop esi  +
leave   +
retn 14h  +
mov [ebp+var_8] edi +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_100FAFC  +
mov ecx [ebp+hKey] +
mov [eax] ecx +
jmp loc_100FB05  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor ebx ebx +
push ebx  +
push [ebp+hKey]  +
push [ebp+Type]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100FB9F  +
and dword ptr [ebp+Data] ebx +
push esi  +
push 4  +
pop esi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpValueName]  +
mov [ebp+cbData] esi +
push [ebp+hKey]  +
mov [ebp+Type] esi +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100FB95  +
cmp [ebp+Type] esi +
jnz loc_100FB95  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100FB84  +
mov ecx dword ptr [ebp+Data] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
xor ebx ebx +
inc ebx  +
test eax eax +
jz loc_100FB95  +
mov ecx [ebp+hKey] +
mov [eax] ecx +
jmp loc_100FB9E  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_100FBE1  +
push esi  +
mov esi [ebx] +
test esi esi +
jz loc_100FBE0  +
xor eax eax +
mov [esi] ax +
mov eax [esi+4] +
push edi  +
mov edi CoTaskMemFree +
test eax eax +
jz loc_100FBD9  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
push esi  +
call edi  +
and dword ptr [ebx] 0 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
call ds:GetUserDefaultUILanguage  +
movzx edx ax +
test dx dx +
jz loc_100FC40  +
push edi  +
push 7  +
xor eax eax +
pop ecx  +
mov [ebp+LCData] ax +
lea edi [ebp-22h] +
stos   +
stos   +
push 10h  +
lea eax [ebp+LCData] +
push eax  +
movzx eax dx +
push 58h  +
push eax  +
call ds:GetLocaleInfoW  +
pop edi  +
test eax eax +
jz loc_100FC40  +
test [ebp+var_16] 800h +
jz loc_100FC40  +
mov al 1 +
jmp loc_100FC42  +
xor al al +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10019B3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push esi  +
mov esi [ebp+pvParam] +
push eax  +
push esi  +
push eax  +
push 30h  +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
call ds:SystemParametersInfoW  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
xor eax eax +
cmp byte_10207A0 al +
jnz loc_100FCAA  +
push eax  +
push offset pvParam  +
push eax  +
push 42h  +
mov pvParam 0Ch +
call ds:SystemParametersInfoW  +
mov byte_10207A0 1 +
mov al byte_10207A8 +
and al 1 +
retn   +
***
mov byte_10207A0 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ds:SystemParametersInfoW +
push edi  +
xor edi edi +
push edi  +
lea eax [ebp+pvParam] +
push eax  +
push edi  +
push 4Ah  +
mov [ebp+pvParam] edi +
call esi  +
cmp [ebp+pvParam] edi +
jz loc_100FD05  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
push 200Ah  +
mov [ebp+var_8] 1 +
call esi  +
cmp [ebp+var_8] 2 +
jnz loc_100FD05  +
mov al 1 +
jmp loc_100FD07  +
xor al al +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
xor ecx ecx +
cmp eax ecx +
jz loc_100FD23  +
cmp [eax] cx +
jnz loc_100FD25  +
xor eax eax +
push esi  +
push 1  +
push ecx  +
push eax  +
push [ebp+lpFile]  +
push ecx  +
push [ebp+hwnd]  +
call ShellExecuteW  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov esi eax +
call ds:GetCurrentProcess  +
push eax  +
call ds:SetProcessWorkingSetSize  +
push 20h  +
pop eax  +
cmp eax esi +
sbb eax eax +
neg eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
lea eax [ebp+Points] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
push 2  +
lea eax [ebp+Points] +
push eax  +
push [ebp+hWnd]  +
push 0  +
call ds:MapWindowPoints  +
push [ebp+hWnd]  +
call ds:GetDC  +
mov esi eax +
mov [ebp+hDC] esi +
test esi esi +
jz loc_100FE7B  +
push ebx  +
push esi  +
call ds:CreateCompatibleDC  +
mov ebx eax +
test ebx ebx +
jz loc_100FE6E  +
mov eax [ebp-0Ch] +
sub eax [ebp-14h] +
push edi  +
push eax  +
mov eax [ebp-10h] +
sub eax [ebp+Points] +
push eax  +
push esi  +
call ds:CreateCompatibleBitmap  +
mov edi ds:DeleteObject +
mov [ebp+var_8] eax +
test eax eax +
jz loc_100FE6A  +
mov esi ds:SelectObject +
push eax  +
push ebx  +
call esi  +
cmp byte ptr [ebp+hbr] 0 +
jz loc_100FE2D  +
push [ebp+arg_8]  +
call ds:CreateSolidBrush  +
mov [ebp+hbr] eax +
test eax eax +
jz loc_100FE2D  +
push eax  +
push ebx  +
call esi  +
push [ebp+hbr]  +
and [ebp+rc.left] 0 +
and [ebp+rc.top] 0 +
mov [ebp+arg_8] eax +
mov eax [ebp-10h] +
sub eax [ebp+Points] +
mov [ebp+rc.right] eax +
mov eax [ebp-0Ch] +
sub eax [ebp-14h] +
mov [ebp+rc.bottom] eax +
lea eax [ebp+rc] +
push eax  +
push ebx  +
call ds:FillRect  +
push [ebp+arg_8]  +
push ebx  +
call esi  +
push [ebp+hbr]  +
call edi  +
push 16h  +
push ebx  +
push 317h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
mov eax [ebp-0Ch] +
sub eax [ebp-14h] +
push 0CC0020h  +
push 0  +
push 0  +
push ebx  +
push eax  +
mov eax [ebp-10h] +
sub eax [ebp+Points] +
push eax  +
push dword ptr [ebp-14h]  +
push [ebp+Points]  +
push [ebp+hDC]  +
call ds:BitBlt  +
push [ebp+var_8]  +
call edi  +
push ebx  +
call edi  +
pop edi  +
push [ebp+hDC]  +
push [ebp+hWnd]  +
call ds:ReleaseDC  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov edx [eax+4] +
mov ecx [ebp+arg_8] +
mov [ecx+4] edx +
mov edx [eax+0Ch] +
mov [ecx+0Ch] edx +
mov edx [ebp+arg_0] +
push esi  +
mov esi edx +
sub esi [eax+8] +
mov [ecx] esi +
sub edx [eax] +
pop esi  +
mov [ecx+8] edx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+hWnd] +
jmp loc_100FED9  +
push 0  +
push 0  +
push 5  +
push esi  +
call ds:PostMessageW  +
push 1  +
push esi  +
call ds:GetAncestor  +
mov esi eax +
test esi esi +
jnz loc_100FEC1  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+hWnd] +
jmp loc_100FF0A  +
push 0  +
push 0  +
push 5  +
push esi  +
call ds:SendMessageW  +
push 1  +
push esi  +
call ds:GetAncestor  +
mov esi eax +
test esi esi +
jnz loc_100FEF2  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+hWnd] +
push edi  +
call ds:IsWindow  +
test eax eax +
jz loc_100FFA3  +
push edi  +
call ds:IsIconic  +
test eax eax +
jz loc_100FF5B  +
push 9  +
push edi  +
call ds:ShowWindow  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_100FFA3  +
test byte ptr [eax+1Ch] 4 +
jz loc_100FFA3  +
push offset dword_100FFA8  +
push 0Ah  +
jmp loc_100FF98  +
push ebx  +
push esi  +
mov esi ds:BringWindowToTop +
push edi  +
call esi  +
push edi  +
call ds:GetLastActivePopup  +
mov ebx eax +
cmp ebx edi +
jz loc_100FF76  +
push ebx  +
call esi  +
push ebx  +
call ds:SetForegroundWindow  +
mov eax off_101F0C0 +
pop esi  +
pop ebx  +
cmp eax offset off_101F0C0 +
jz loc_100FFA3  +
test byte ptr [eax+1Ch] 4 +
jz loc_100FFA3  +
push offset dword_100FFA8  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
jz loc_101000A  +
push 0  +
push [ebp+arg_0]  +
push 0  +
push 0  +
call ds:FindWindowExW  +
mov esi eax +
test esi esi +
jz loc_101000A  +
push esi  +
call ds:IsWindow  +
test eax eax +
jz loc_101000A  +
push esi  +
call ds:IsIconic  +
test eax eax +
jz loc_100FFFF  +
push 9  +
push esi  +
call ds:ShowWindow  +
jmp loc_1010006  +
push esi  +
call ds:SetForegroundWindow  +
mov al 1 +
jmp loc_101000C  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
xor esi esi +
push 4  +
push esi  +
push esi  +
mov [ebp+var_4] esi +
call OpenSCManagerW  +
mov ebx eax +
cmp ebx esi +
jz loc_1010071  +
push edi  +
push 4  +
push [ebp+lpServiceName]  +
push ebx  +
call OpenServiceW  +
mov edi eax +
cmp edi esi +
mov esi CloseServiceHandle +
jz loc_101006D  +
lea eax [ebp+ServiceStatus] +
push eax  +
push edi  +
call QueryServiceStatus  +
test eax eax +
jz loc_101006A  +
cmp [ebp+ServiceStatus.dwCurrentState] 4 +
jnz loc_101006A  +
mov [ebp+var_4] 1 +
push edi  +
call esi  +
push ebx  +
call esi  +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_4] eax +
mov [ebp+var_8] eax +
cmp edi eax +
jz loc_1010154  +
push esi  +
mov esi [ebp+arg_4] +
cmp esi eax +
jz loc_1010153  +
push ebx  +
mov ebx ds:GetUserPreferredUILanguages +
lea ecx [ebp+var_8] +
push ecx  +
mov [edi] eax +
push eax  +
mov [esi] eax +
lea eax [ebp+var_4] +
push eax  +
push 4  +
call ebx  +
test eax eax +
jz loc_1010152  +
mov eax [ebp+var_8] +
xor ecx ecx +
push 2  +
inc eax  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1003218  +
pop ecx  +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
mov [ebp+arg_0] eax +
lea eax [ebp+var_4] +
push eax  +
push 4  +
call ebx  +
test eax eax +
jz loc_1010143  +
mov eax [ebp+var_4] +
xor ecx ecx +
push 4  +
pop edx  +
mov [esi] eax +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1003218  +
mov esi [ebp+arg_0] +
xor ebx ebx +
pop ecx  +
mov [edi] eax +
cmp [ebp+var_4] ebx +
jbe loc_1010143  +
and [ebp+arg_4] 0 +
push 10h  +
lea eax [ebp+arg_4] +
push eax  +
push esi  +
call ds:wcstol  +
mov ecx [edi] +
mov [ecx+ebx*4] eax +
mov eax [ebp+arg_4] +
sub eax esi +
sar eax 1 +
add esp 0Ch +
inc ebx  +
lea esi [esi+eax*2+2] +
cmp ebx [ebp+var_4] +
jb loc_1010119  +
cmp [ebp+arg_0] 0 +
jz loc_1010152  +
push [ebp+arg_0]  +
call sub_10019EE  +
pop ecx  +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call ds:CheckElevationEnabled  +
test eax eax +
jz loc_101017D  +
mov [ebp+var_4] 1 +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
push eax  +
call sub_100B78F  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 0  +
push 3  +
call ds:MultiByteToWideChar  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10101EE  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10101DE  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpFile] 0 +
jz loc_1010211  +
push 0  +
push [ebp+lpFile]  +
push [ebp+hwnd]  +
call sub_100FD10  +
jmp loc_1010213  +
xor al al +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
test ecx ecx +
jl loc_101024B  +
mov eax [esi] +
cmp ecx [eax-0Ch] +
jge loc_101024B  +
push dword ptr [ebp+arg_0]  +
lea eax [eax+ecx*2] +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101024B  +
sub eax [esi] +
sar eax 1 +
jmp loc_101024E  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1001865  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call GdipClosePathFigure  +
push eax  +
mov ecx esi +
call sub_1010D2F  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call GdipAddPathLineI  +
push eax  +
mov ecx esi +
call sub_1010D2F  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_14] +
push esi  +
push ecx  +
push ecx  +
fstp  [esp+0Ch+var_8] +
mov esi ecx +
fld  [ebp+arg_10] +
fstp  [esp+0Ch+var_C] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call GdipAddPathArcI  +
push eax  +
mov ecx esi +
call sub_1010D2F  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_101030E  +
cmp ecx 7FFFFFFFh +
jbe loc_1010313  +
mov eax 80070057h +
test eax eax +
jl loc_101035E  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_101034E  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1010349  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1010349  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1010331  +
pop edi  +
test esi esi +
jnz loc_1010355  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
add edi edi +
cmp [ebp+arg_C] 0 +
jz loc_10103CD  +
fld  ds:flt_1010454 +
push ecx  +
push ecx  +
fstp  [esp+14h+var_10] +
mov ecx ebx +
fld  ds:flt_10080D0 +
fstp  [esp+14h+var_14] +
push edi  +
push edi  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call sub_10102BC  +
fld  ds:flt_1010454 +
mov eax [esi+8] +
push ecx  +
push ecx  +
fstp  [esp+14h+var_10] +
sub eax edi +
fld  ds:flt_1010450 +
dec eax  +
fstp  [esp+14h+var_14] +
push edi  +
push edi  +
push dword ptr [esi+4]  +
mov ecx ebx +
push eax  +
call sub_10102BC  +
jmp loc_10103E0  +
mov eax [esi+4] +
mov ecx [esi+8] +
push eax  +
dec ecx  +
push ecx  +
push eax  +
push dword ptr [esi]  +
mov ecx ebx +
call sub_101028F  +
cmp [ebp+arg_10] 0 +
mov eax [esi+0Ch] +
jz loc_1010431  +
fld  ds:flt_1010454 +
push ecx  +
push ecx  +
fstp  [esp+14h+var_10] +
sub eax edi +
fldz   +
dec eax  +
fstp  [esp+14h+var_14] +
mov ecx ebx +
push edi  +
push edi  +
push eax  +
mov eax [esi+8] +
sub eax edi +
dec eax  +
push eax  +
call sub_10102BC  +
fld  ds:flt_1010454 +
mov eax [esi+0Ch] +
push ecx  +
push ecx  +
fst  [esp+14h+var_10] +
sub eax edi +
fstp  [esp+14h+var_14] +
push edi  +
push edi  +
dec eax  +
push eax  +
push dword ptr [esi]  +
mov ecx ebx +
call sub_10102BC  +
jmp loc_1010442  +
dec eax  +
push eax  +
push dword ptr [esi]  +
mov ecx ebx +
push eax  +
mov eax [esi+8] +
dec eax  +
push eax  +
call sub_101028F  +
mov ecx ebx +
call sub_1010274  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
mov eax [ecx] +
mov ecx [eax-10h] +
test ecx ecx +
jz loc_1010498  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
jmp loc_101049A  +
xor eax eax +
test eax eax +
jnz locret_10104AB  +
mov ecx offset dword_101F10C +
mov eax dword_101F10C +
jmp dword ptr [eax+10h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
sub eax 10h +
push eax  +
mov esi ecx +
call sub_100B8C7  +
add eax 10h +
mov [esi] eax +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 0  +
push 26h  +
mov ecx esi +
call sub_101021C  +
xor edx edx +
test eax eax +
jl loc_1010513  +
lea ecx [eax+1] +
mov eax [esi] +
cmp ecx [eax-0Ch] +
jge loc_1010513  +
push ecx  +
mov ecx esi +
call sub_101045D  +
movzx eax ax +
push eax  +
call ds:towupper  +
pop ecx  +
movzx edx ax +
mov ax dx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10104B1  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov [ebp+var_18] esi +
call sub_10101CF  +
pop ecx  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_101068C  +
push edi  +
push [ebp+arg_4]  +
call sub_10101CF  +
mov esi [esi] +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
mov eax [esi-0Ch] +
lea edi [esi+eax*2] +
pop ecx  +
cmp esi edi +
jnb loc_1010688  +
push ebx  +
mov ebx ds:wcsstr +
jmp loc_1010591  +
mov ecx [ebp+var_C] +
inc [ebp+var_4]  +
lea esi [eax+ecx*2] +
push [ebp+arg_0]  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1010588  +
push esi  +
call sub_10101CF  +
lea esi [esi+eax*2+2] +
pop ecx  +
cmp esi edi +
jb loc_1010591  +
cmp [ebp+var_4] 0 +
jle loc_1010687  +
mov esi [ebp+var_8] +
sub esi [ebp+var_C] +
mov eax [ebp+var_18] +
imul esi [ebp+var_4] +
mov eax [eax] +
mov edi [eax-0Ch] +
add esi edi +
cmp esi edi +
mov [ebp+var_14] edi +
mov [ebp+var_20] esi +
mov eax esi +
jg loc_10105D8  +
mov eax edi +
mov ecx [ebp+var_18] +
push eax  +
call sub_1001B6B  +
lea ecx [eax+edi*2] +
mov [ebp+var_1C] eax +
mov [ebp+var_24] ecx +
cmp eax ecx +
jmp loc_1010675  +
push [ebp+arg_0]  +
push [ebp+var_10]  +
call ebx  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1010664  +
mov esi [ebp+var_14] +
mov edx [ebp+var_C] +
mov eax edi +
sub eax [ebp+var_1C] +
sar eax 1 +
sub esi eax +
mov eax [ebp+var_8] +
sub esi edx +
lea ecx [esi+esi] +
push ecx  +
lea edx [edi+edx*2] +
push edx  +
add eax eax +
add eax edi +
push ecx  +
push eax  +
mov [ebp+var_10] eax +
call sub_1010187  +
mov eax [ebp+var_8] +
add eax eax +
push eax  +
push [ebp+arg_4]  +
push eax  +
push edi  +
call sub_100CE10  +
mov ecx [ebp+var_8] +
mov eax [ebp+var_10] +
push [ebp+arg_0]  +
add esi ecx +
sub ecx [ebp+var_C] +
xor edx edx +
add [ebp+var_14] ecx +
push eax  +
mov [ebp+var_10] eax +
mov [edi+esi*2] dx +
call ebx  +
mov edi eax +
add esp 28h +
test edi edi +
jnz loc_1010601  +
mov esi [ebp+var_20] +
mov edi [ebp+var_10] +
push edi  +
call sub_10101CF  +
lea eax [edi+eax*2+2] +
cmp eax [ebp+var_24] +
pop ecx  +
mov [ebp+var_10] eax +
jb loc_10105F1  +
mov ecx [ebp+var_18] +
push esi  +
call sub_1001AEE  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_10] +
lea ebx [esi+edi] +
push ebx  +
call sub_1001B6B  +
push esi  +
push [ebp+arg_4]  +
mov [ebp+arg_8] eax +
push esi  +
push eax  +
call sub_1001C3F  +
mov eax [ebp+arg_8] +
push edi  +
push [ebp+arg_C]  +
lea eax [eax+esi*2] +
push edi  +
push eax  +
call sub_1001C3F  +
mov ecx [ebp+arg_0] +
add esp 20h +
push ebx  +
call sub_1001AEE  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebx  +
mov ebx ds:iswspace +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
jmp loc_10106F8  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
push eax  +
call ebx  +
pop ecx  +
test eax eax +
jnz loc_10106F6  +
mov eax [edi] +
cmp esi eax +
jz loc_101073B  +
push dword ptr [eax-0Ch]  +
sub esi eax +
sar esi 1 +
mov ecx edi +
mov ebx esi +
call sub_1001B6B  +
mov ecx [edi] +
mov esi [ecx-0Ch] +
sub esi ebx +
lea ecx [esi+esi+2] +
push ecx  +
lea edx [eax+ebx*2] +
push edx  +
push ecx  +
push eax  +
call sub_1010187  +
add esp 10h +
push esi  +
mov ecx edi +
call sub_1001AEE  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1001B6B  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1001AEE  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov esi [ebp+0Ch] +
and dword ptr [ebp-10h] 0 +
mov ecx esi +
call sub_1010488  +
mov ecx [ebp+8] +
push eax  +
call sub_1010258  +
mov eax [ebp+10h] +
mov eax [eax] +
mov edx [eax-0Ch] +
mov ecx [esi] +
mov esi [ecx-0Ch] +
and dword ptr [ebp-4] 0 +
push edx  +
push eax  +
push esi  +
push ecx  +
push dword ptr [ebp+8]  +
mov dword ptr [ebp-10h] 1 +
call sub_1010696  +
mov eax [ebp+8] +
add esp 14h +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebx  +
push esi  +
mov ebx ecx +
mov esi [ebx] +
movzx eax word ptr [esi] +
push edi  +
xor edi edi +
test ax ax +
jz loc_101080A  +
movzx eax ax +
push eax  +
call ds:iswspace  +
pop ecx  +
test eax eax +
jz loc_10107EE  +
test edi edi +
jnz loc_10107F0  +
mov edi esi +
jmp loc_10107F0  +
xor edi edi +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_10107D7  +
test edi edi +
jz loc_101080A  +
sub edi [ebx] +
mov ecx ebx +
sar edi 1 +
push edi  +
call sub_1010746  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
call sub_1001939  +
mov esi offset dword_101F10C +
push esi  +
lea ecx [ebp-14h] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp-10h] +
call sub_1001865  +
push 3A99h  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
call sub_100EB9E  +
push 3AF8h  +
lea ecx [ebp-10h] +
call sub_100EB9E  +
push 0  +
push 0FFFEh  +
push 1  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-10h] +
call sub_1003A2D  +
push eax  +
lea ecx [ebp-14h] +
call sub_1003A2D  +
push eax  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+0Ch]  +
call ds:COMCTL32_344  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi offset WindowName +
push esi  +
push offset dword_10080D4  +
call sub_101053C  +
mov ecx [ebp+arg_0] +
push esi  +
push offset loc_10108E4  +
call sub_101053C  +
mov ecx [ebp+arg_0] +
call sub_10107C4  +
mov ecx eax +
call sub_10106E5  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov esi offset dword_101F10C +
push esi  +
lea ecx [ebp-10h] +
call sub_1001865  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push offset a0x08lx  +
push eax  +
call sub_10031AA  +
add esp 0Ch +
call sub_100FBEB  +
test al al +
jz loc_1010993  +
push esi  +
lea ecx [ebp+8] +
call sub_1001865  +
mov esi [ebp+0Ch] +
mov eax [esi] +
cmp dword ptr [eax-0Ch] 0 +
mov byte ptr [ebp-4] 1 +
jnz loc_101094E  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp+8] +
call sub_100BA1D  +
jmp loc_1010968  +
lea ecx [ebp-10h] +
call sub_1003A2D  +
push eax  +
lea eax [ebp+8] +
push offset a15s  +
push eax  +
call sub_10031AA  +
add esp 0Ch +
lea eax [ebp+8] +
push eax  +
push esi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_101076A  +
mov ecx [ebp+10h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100BA90  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp+8] +
jmp loc_10109CD  +
lea ecx [ebp-10h] +
call sub_1003A2D  +
push eax  +
lea eax [ebp-10h] +
push offset a15s_0  +
push eax  +
call sub_10031AA  +
add esp 0Ch +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
call sub_101076A  +
mov ecx [ebp+10h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_100BA90  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40Ch +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor eax eax +
push 400h  +
push eax  +
mov word ptr [ebp+var_408] ax +
lea eax [ebp+var_408+2] +
push eax  +
mov [ebp+var_40C] ebx +
call memset  +
mov eax [edi] +
mov esi [eax-0Ch] +
add esp 0Ch +
test esi esi +
jle loc_1010AEB  +
mov ebx 200h +
cmp esi ebx +
jge loc_1010A91  +
mov ecx edi +
call sub_1003A2D  +
push eax  +
push ebx  +
lea eax [ebp+var_408] +
push eax  +
call sub_10102F8  +
mov ecx [ebp+var_40C] +
lea eax [ebp+var_408] +
push eax  +
jmp loc_1010AF2  +
xor ecx ecx +
push 2  +
pop edx  +
lea eax [esi+1] +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1003218  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_1010AE3  +
lea eax [esi+esi+2] +
push eax  +
push 0  +
push ebx  +
call memset  +
add esp 0Ch +
mov ecx edi +
call sub_1003A2D  +
push eax  +
push esi  +
push ebx  +
call sub_10102F8  +
mov ecx [ebp+var_40C] +
push ebx  +
call sub_1002AF1  +
push ebx  +
call sub_10019EE  +
pop ecx  +
jmp loc_1010AF7  +
mov ecx [ebp+var_40C] +
jmp loc_1010AED  +
mov ecx ebx +
push offset WindowName  +
call sub_1001D49  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10019B3  +
leave   +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+48h] +
xor ebx ebx +
push edi  +
mov edi ds:DeleteObject +
cmp eax ebx +
jz loc_1010B35  +
push eax  +
call edi  +
mov [esi+48h] ebx +
mov eax [esi+4Ch] +
cmp eax ebx +
jz loc_1010B42  +
push eax  +
call edi  +
mov [esi+4Ch] ebx +
mov eax [ebp+arg_C] +
mov [esi+28h] ebx +
mov [esi+0ACh] bl +
pop edi  +
mov [eax] ebx +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_C] +
xor eax eax +
inc eax  +
cmp [ebp+arg_4] 0 +
mov [ecx] eax +
jz loc_1010B92  +
push eax  +
push [ebp+arg_4]  +
call ds:SetBkMode  +
lea eax [ebp+arg_C] +
push eax  +
push 3  +
call sub_100F54D  +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
call ds:SetTextColor  +
push 5  +
call ds:GetStockObject  +
pop ebp  +
retn 10h  +
***
mov al [ecx+0ACh] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcscpy_s  +
add esp 0Ch +
push eax  +
call sub_100B78F  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcscat_s  +
add esp 0Ch +
push eax  +
call sub_100B78F  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+nMaxCount]  +
push [ebp+lpString]  +
push dword ptr [ecx]  +
call ds:GetWindowTextW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push eax  +
push [ebp+wParam]  +
push 30h  +
push dword ptr [ecx]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+4] +
push esi  +
mov esi [eax] +
push edi  +
push [ebp+bRepaint]  +
mov edi [eax+0Ch] +
mov eax [eax+8] +
sub edi edx +
push edi  +
sub eax esi +
push eax  +
push edx  +
push esi  +
push dword ptr [ecx]  +
call ds:MoveWindow  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
movzx ecx [ebp+arg_4] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+arg_8] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+arg_C] +
shl eax 8 +
or eax ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1010CA2  +
mov [ecx+8] eax +
jmp loc_1010CA4  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_10080DC +
call GdipDeleteBrush  +
test byte ptr [ebp+8] 1 +
jz loc_1010CCF  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call GdipDeleteBrush  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call GdipCreateStringFormat  +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1010D40  +
mov [ecx+4] eax +
jmp loc_1010D42  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipGetImageWidth  +
push eax  +
mov ecx esi +
call sub_1010C91  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipGetImageHeight  +
push eax  +
mov ecx esi +
call sub_1010C91  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1010DE5  +
cmp [ebp+arg_4] eax +
jz loc_1010DE1  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1010DE1  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1010DC4  +
test esi esi +
jnz loc_1010DED  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1010DFB  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_1001CDD  +
test eax eax +
jge loc_1010E25  +
push eax  +
call loc_1008FB2  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+Paint] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call ds:BeginPaint  +
lea eax [ebp+Paint] +
push eax  +
push dword ptr [esi+4]  +
call ds:EndPaint  +
mov ecx [ebp+var_4] +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_10019B3  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+48h] +
push edi  +
mov edi ds:DeleteObject +
test eax eax +
jz loc_1010EA7  +
push eax  +
call edi  +
and dword ptr [esi+48h] 0 +
mov eax [esi+4Ch] +
test eax eax +
jz loc_1010EB5  +
push eax  +
call edi  +
and dword ptr [esi+4Ch] 0 +
push dword ptr [esi+4]  +
call ds:GetDC  +
mov edi eax +
test edi edi +
jz loc_1010F02  +
push 2  +
push edi  +
call sub_100F9E2  +
push 3  +
push edi  +
mov [esi+48h] eax +
call sub_100F9E2  +
push 1  +
push edi  +
mov [esi+4Ch] eax +
call ds:SetBkMode  +
lea eax [ebp+var_4] +
push eax  +
push 3  +
call sub_100F54D  +
push [ebp+var_4]  +
push edi  +
call ds:SetTextColor  +
push edi  +
push dword ptr [esi+4]  +
call ds:ReleaseDC  +
mov eax [esi+48h] +
test eax eax +
jz loc_1010F14  +
push 1  +
push eax  +
lea ecx [esi+5Ch] +
call sub_1010C11  +
mov eax [esi+4Ch] +
test eax eax +
jz loc_1010F29  +
push 1  +
push eax  +
lea ecx [esi+84h] +
call sub_1010C11  +
push 1  +
push 0  +
push dword ptr [esi+4]  +
call ds:InvalidateRect  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx ecx +
push dword ptr [ebx]  +
call ds:GetDC  +
mov [ebp+hDC] eax +
test eax eax +
jz loc_1010FB7  +
push esi  +
push edi  +
push 0  +
push 0  +
push 31h  +
push dword ptr [ebx]  +
call ds:SendMessageW  +
push eax  +
push [ebp+hDC]  +
call ds:SelectObject  +
mov esi [ebp+arg_8] +
lea edi [ebp+Rect] +
movs   +
push 510h  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+nCount]  +
movs   +
push [ebp+lpString]  +
movs   +
push [ebp+hDC]  +
movs   +
call ds:DrawTextW  +
cmp [ebp+arg_C] 0 +
mov ecx [ebp+Rect.bottom] +
mov eax [ebp+arg_8] +
pop edi  +
mov [eax+0Ch] ecx +
pop esi  +
jz loc_1010FAC  +
mov ecx [ebp+Rect.right] +
mov [eax+8] ecx +
push [ebp+hDC]  +
push dword ptr [ebx]  +
call ds:ReleaseDC  +
pop ebx  +
leave   +
retn 10h  +
***
call __SEH_prolog4_GS  +
mov [ebp+var_1D] 1 +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov [ebp+var_24] ebx +
push 2000h  +
push [ebp+arg_0]  +
lea eax [ebp+var_24] +
push eax  +
call sub_1001CDD  +
cmp eax ebx +
jge loc_1010FF3  +
mov [ebp+var_1D] bl +
jmp loc_1011020  +
mov eax [ebp+var_24] +
call sub_1005EC9  +
mov [ebp+ms_exc.old_esp] esp +
jmp loc_1011020  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C00000FDh +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov byte ptr [ebp-1Dh] 0 +
call _resetstkoflw  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov al [ebp+var_1D] +
lea esp [ebp-34h] +
call __SEH_epilog4_GS  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_10080FC +
call GdipDisposeImage  +
test byte ptr [ebp+8] 1 +
jz loc_101107B  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
and [ebp+var_4] 0 +
push esi  +
lea edx [ebp+var_4] +
push edx  +
mov esi ecx +
mov ecx [ebp+arg_4] +
push 0  +
push [ebp+arg_C]  +
mov dword ptr [esi+8] 6 +
mov dword ptr [esi] offset off_100811C +
mov eax [eax] +
mov ecx [ecx] +
push eax  +
push ecx  +
push [ebp+arg_0]  +
call GdipCreateLineBrushFromRectI  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call GdipCreateFromHDC  +
mov [esi+4] eax +
mov eax [ebp+var_4] +
mov [esi] eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipSetSmoothingMode  +
push eax  +
mov ecx esi +
call sub_1010D2F  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax+4]  +
push dword ptr [esi]  +
call GdipFillRectangleI  +
push eax  +
mov ecx esi +
call sub_1010D2F  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
mov esi ecx +
xor ecx ecx +
cmp eax ecx +
jz loc_101116C  +
mov eax [eax] +
jmp loc_101116E  +
xor eax eax +
push ecx  +
push ecx  +
push [ebp+arg_10]  +
push ecx  +
push [ebp+arg_C]  +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call GdipMeasureString  +
push eax  +
mov ecx esi +
call sub_1010D2F  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
push esi  +
mov esi ecx +
test eax eax +
jz loc_10111AA  +
mov eax [eax] +
jmp loc_10111AC  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10111B8  +
mov ecx [ecx+4] +
jmp loc_10111BA  +
xor ecx ecx +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push eax  +
push [ebp+arg_18]  +
mov eax [ebp+arg_4] +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push ecx  +
push dword ptr [esi]  +
call GdipDrawImageRectRectI  +
push eax  +
mov ecx esi +
call sub_1010D2F  +
pop esi  +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
and [ebp+var_44] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test eax eax +
jz loc_101123D  +
lea ecx [ebp+var_40] +
push ecx  +
push 3Ch  +
push eax  +
call ds:GetObjectA  +
test eax eax +
lea eax [ebp+var_44] +
push eax  +
jz loc_1011241  +
lea eax [ebp+var_40] +
push eax  +
push edi  +
call GdipCreateFontFromLogfontA  +
jmp loc_1011247  +
lea eax [ebp+var_44] +
push eax  +
push edi  +
call GdipCreateFontFromDC  +
mov ecx [ebp+var_4] +
mov [esi+4] eax +
mov eax [ebp+var_44] +
mov [esi] eax +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_10019B3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push edi  +
mov ebx 7FFFFFFFh +
test edx edx +
jz loc_101127F  +
cmp edx ebx +
jbe loc_1011284  +
mov eax 80070057h +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_10112BB  +
and [ebp+arg_4] 0 +
xor ecx ecx +
push esi  +
mov esi edx +
mov eax edi +
cmp edx ecx +
jz loc_10112A8  +
cmp [eax] cx +
jz loc_10112A4  +
inc eax  +
inc eax  +
dec esi  +
jnz loc_101129A  +
cmp esi ecx +
jnz loc_10112B1  +
mov [ebp+arg_4] 80070057h +
jmp loc_10112B5  +
mov ecx edx +
sub ecx esi +
mov eax [ebp+arg_4] +
pop esi  +
jmp loc_10112BD  +
xor ecx ecx +
test eax eax +
jl loc_10112D1  +
mov eax [ebp+arg_8] +
push ebx  +
sub edx ecx +
push 0  +
lea ecx [edi+ecx*2] +
call sub_1010DB0  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 8  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1010E07  +
push eax  +
call sub_100CDC3  +
test eax eax +
jz loc_1011301  +
mov ecx [esi] +
mov [eax] ecx +
mov [esi] eax +
add eax 8 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jnz loc_1011323  +
push dword ptr [esi]  +
call sub_1001AC6  +
pop ecx  +
push eax  +
mov ecx esi +
call sub_1001AEE  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipCloneBrush  +
push eax  +
mov ecx esi +
call sub_1010C91  +
push 0Ch  +
call GdipAlloc  +
test eax eax +
jz loc_1011377  +
mov ecx [esi+8] +
mov edx [ebp-4] +
mov dword ptr [eax] offset off_10080DC +
mov [eax+8] ecx +
mov [eax+4] edx +
mov esi eax +
jmp loc_1011379  +
xor esi esi +
test esi esi +
jnz loc_1011385  +
push dword ptr [ebp-4]  +
call GdipDeleteBrush  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipCloneImage  +
push eax  +
mov ecx esi +
call sub_1010C91  +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_10113CF  +
mov ecx [esi+8] +
mov edx [ebp-4] +
mov dword ptr [eax] offset off_10080FC +
mov [eax+4] edx +
mov [eax+8] ecx +
jmp loc_10113D1  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
call sub_1001939  +
mov edi ecx +
xor ebx ebx +
cmp [ebp+8] ebx +
jz loc_101158B  +
lea eax [ebp-6Ch] +
push eax  +
push dword ptr [edi+4]  +
call ds:GetClientRect  +
push dword ptr [ebp+8]  +
lea ecx [ebp-20h] +
call sub_10110D3  +
mov eax [ebp-1Ch] +
mov [ebp-4] ebx +
mov [ebp-1Ch] ebx +
cmp eax ebx +
jnz loc_1011583  +
push 3  +
lea ecx [ebp-20h] +
call sub_1011100  +
lea eax [ebp-10h] +
push eax  +
push 4  +
call sub_100F54D  +
lea eax [ebp+8] +
push eax  +
push 4  +
call sub_100F54D  +
mov ecx [edi+44h] +
push 0FFFFFFFEh  +
pop eax  +
mov [ebp-4Ch] eax +
mov [ebp-48h] eax +
mov eax [ebp-64h] +
add eax 2 +
mov [ebp-44h] eax +
mov eax [ebp+8] +
shr eax 10h +
push eax  +
mov eax [ebp+8] +
shr eax 8 +
push eax  +
push dword ptr [ebp+8]  +
inc ecx  +
inc ecx  +
mov esi 0FFh +
push esi  +
mov [ebp-40h] ecx +
call sub_1010C64  +
mov [ebp-14h] eax +
mov eax [ebp-10h] +
shr eax 10h +
push eax  +
mov eax [ebp-10h] +
shr eax 8 +
push eax  +
push dword ptr [ebp-10h]  +
push esi  +
call sub_1010C64  +
mov [ebp-18h] eax +
push 1  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1011087  +
mov eax [ebp-24h] +
mov [ebp-24h] ebx +
cmp eax ebx +
jnz loc_10114D9  +
push dword ptr [ebp-40h]  +
lea eax [ebp-2Ch] +
push dword ptr [ebp-44h]  +
lea ecx [ebp-20h] +
push dword ptr [ebp-48h]  +
push dword ptr [ebp-4Ch]  +
push eax  +
call sub_1011124  +
mov eax [edi+58h] +
cmp [eax-0Ch] ebx +
jz loc_101157B  +
lea ecx [ebp-38h] +
push ecx  +
push eax  +
mov dword ptr [ebp-3Ch] offset off_10080FC +
mov [ebp-38h] ebx +
call GdipLoadImageFromFile  +
mov [ebp-34h] ebx +
cmp eax ebx +
jnz loc_101156C  +
lea ecx [ebp-3Ch] +
call sub_1010D58  +
push 40h  +
pop esi  +
cmp eax esi +
jnb loc_101151C  +
lea ecx [ebp-3Ch] +
call sub_1010D58  +
mov [ebp-14h] eax +
jmp loc_101151F  +
mov [ebp-14h] esi +
lea ecx [ebp-3Ch] +
call sub_1010D84  +
cmp eax esi +
jnb loc_1011535  +
lea ecx [ebp-3Ch] +
call sub_1010D84  +
mov esi eax +
fld  dword ptr [edi+3Ch] +
call _ftol2_sse  +
push ebx  +
mov [ebp-5Ch] eax +
mov eax [edi+44h] +
push ebx  +
push ebx  +
sub eax esi +
push 2  +
shr eax 1 +
push esi  +
mov [ebp-58h] eax +
mov eax [ebp-14h] +
push eax  +
push ebx  +
mov [ebp-54h] eax +
push ebx  +
lea eax [ebp-5Ch] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
lea ecx [ebp-20h] +
mov [ebp-50h] esi +
call sub_1011197  +
push dword ptr [ebp-38h]  +
mov dword ptr [ebp-3Ch] offset off_10080FC +
call GdipDisposeImage  +
push dword ptr [ebp-28h]  +
call GdipDeleteBrush  +
push dword ptr [ebp-20h]  +
call GdipDeleteGraphics  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005C51  +
test byte ptr [ebp+8] 1 +
jz loc_10115B2  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+wParam]  +
mov esi ecx +
call sub_10113EC  +
push [ebp+lParam]  +
mov ecx esi +
push [ebp+wParam]  +
push [ebp+Msg]  +
call sub_10126DB  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi]  +
call ds:GetWindowTextLengthW  +
mov ecx [ebp+arg_0] +
lea edi [eax+1] +
push edi  +
call sub_1001B6B  +
push edi  +
push eax  +
mov ecx esi +
call sub_1010BF5  +
mov ecx [ebp+arg_0] +
mov esi eax +
push esi  +
call sub_101130B  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov esi ecx +
push 0FFFFFFF0h  +
push dword ptr [esi]  +
call ds:GetWindowLongW  +
test al 0Eh +
jz loc_1011676  +
push 0  +
push 0  +
push 173h  +
push dword ptr [esi]  +
call ds:SendMessageW  +
test eax eax +
jz loc_10116AE  +
lea ecx [ebp-28h] +
push ecx  +
push 18h  +
push eax  +
call ds:GetObjectW  +
test eax eax +
jz loc_10116AE  +
mov eax [ebp+8] +
mov ecx [eax+4] +
add ecx [ebp-20h] +
mov [eax+0Ch] ecx +
jmp loc_10116AE  +
push offset dword_101F10C  +
lea ecx [ebp-10h] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_10115E8  +
push dword ptr [ebp+0Ch]  +
mov edi [ebp-10h] +
push dword ptr [ebp+8]  +
mov ecx esi +
push dword ptr [edi-0Ch]  +
push edi  +
call sub_1010F3F  +
lea ecx [edi-10h] +
call sub_10018D0  +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpParam]  +
mov eax ds:DefWindowProcW +
push [ebp+hMenu]  +
mov [ecx+18h] eax +
push [ebp+dwExStyle]  +
mov eax [ebp+arg_0] +
push [ebp+arg_14]  +
mov [ecx+1Ch] eax +
push [ebp+lpWindowName]  +
mov eax [ebp+arg_4] +
push [ebp+arg_C]  +
mov dword ptr [ecx+14h] offset aStatic +
push [ebp+hWndParent]  +
mov [ecx+20h] eax +
call sub_10187D7  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 50h +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_100BA90  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 54h +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_100BA90  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov esi ecx +
push dword ptr [esi+4]  +
xor ebx ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov dword ptr [esi+24h] 214h +
call ds:GetDC  +
mov edi eax +
cmp edi ebx +
jz loc_10117B3  +
push 2  +
push edi  +
call sub_100F9E2  +
push 3  +
push edi  +
mov [esi+48h] eax +
call sub_100F9E2  +
push 1  +
push edi  +
mov [esi+4Ch] eax +
call ds:SetBkMode  +
lea eax [ebp-14h] +
push eax  +
push 3  +
call sub_100F54D  +
push dword ptr [ebp-14h]  +
push edi  +
call ds:SetTextColor  +
push edi  +
push dword ptr [esi+4]  +
call ds:ReleaseDC  +
mov eax [esi+44h] +
mov [esi+28h] eax +
mov dword ptr [ebp-10h] 20h +
call sub_100FBEB  +
test al al +
jz loc_10117D0  +
mov dword ptr [ebp-10h] 400020h +
push ebx  +
push ecx  +
mov eax esp +
mov [ebp-18h] esp +
push dword ptr [ebp-10h]  +
mov ebx 56000000h +
push ebx  +
mov edi offset WindowName +
push edi  +
push ecx  +
mov dword ptr [eax] 46h +
mov eax esp +
mov [ebp-18h] esp +
lea ecx [ebp-28h] +
mov [eax] ecx +
push dword ptr [esi+4]  +
lea ecx [esi+5Ch] +
push 1  +
push esi  +
call sub_10116BB  +
push 0  +
push ecx  +
mov eax esp +
mov [ebp-18h] esp +
push dword ptr [ebp-10h]  +
mov dword ptr [eax] 47h +
push ebx  +
push edi  +
push ecx  +
mov eax esp +
mov [ebp-18h] esp +
lea ecx [ebp-28h] +
mov [eax] ecx +
push dword ptr [esi+4]  +
lea edi [esi+84h] +
push 1  +
push esi  +
mov ecx edi +
call sub_10116BB  +
mov eax [esi+48h] +
test eax eax +
jz loc_1011848  +
push 1  +
push eax  +
lea ecx [esi+5Ch] +
call sub_1010C11  +
mov eax [esi+4Ch] +
test eax eax +
jz loc_1011859  +
push 1  +
push eax  +
mov ecx edi +
call sub_1010C11  +
push offset dword_101F10C  +
lea ecx [ebp-10h] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_101170F  +
push dword ptr [ebp-10h]  +
mov ebx ds:SetWindowTextW +
push dword ptr [esi+5Ch]  +
call ebx  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_1011729  +
push dword ptr [ebp-10h]  +
push dword ptr [edi]  +
call ebx  +
mov ebx ds:ShowWindow +
push 5  +
push dword ptr [esi+5Ch]  +
call ebx  +
push 5  +
push dword ptr [edi]  +
call ebx  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
mov byte ptr [esi+0ACh] 1 +
call sub_10018D0  +
xor eax eax +
call __EH_epilog3  +
retn 10h  +
***
call sub_1001939  +
mov esi ecx +
push dword ptr [esi+4]  +
call ds:GetDC  +
mov edi eax +
xor ebx ebx +
mov [ebp-70h] edi +
cmp edi ebx +
jz loc_1011BB9  +
cmp [esi+48h] ebx +
jz loc_1011BB9  +
cmp [esi+4Ch] ebx +
jz loc_1011BB9  +
lea eax [ebp-80h] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
push edi  +
lea ecx [ebp-24h] +
call sub_10110D3  +
mov eax [ebp-78h] +
mov [ebp-14h] eax +
mov eax [ebp-20h] +
mov [ebp-4] ebx +
mov [ebp-20h] ebx +
cmp eax ebx +
jnz loc_1011B0B  +
push dword ptr [esi+48h]  +
lea ecx [ebp-88h] +
push edi  +
call sub_10111F8  +
push dword ptr [esi+4Ch]  +
lea ecx [ebp-5Ch] +
push edi  +
call sub_10111F8  +
mov byte ptr [ebp-4] 2 +
cmp [ebp-84h] ebx +
jnz loc_1011AF5  +
cmp [ebp-58h] ebx +
jnz loc_1011AF5  +
mov edi offset dword_101F10C +
push edi  +
lea ecx [ebp-18h] +
call sub_1001865  +
push edi  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1001865  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_101170F  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call sub_1011729  +
mov eax [esi+58h] +
cmp [eax-0Ch] ebx +
mov eax [ebp-78h] +
jz loc_10119AA  +
add eax 0FFFFFF9Fh +
jmp loc_10119AD  +
add eax 0FFFFFFEBh +
fldz   +
mov [ebp-14h] eax +
fst  dword ptr [ebp-44h] +
push ebx  +
fst  dword ptr [ebp-40h] +
push ebx  +
fild  dword ptr [ebp-14h] +
lea ecx [ebp-90h] +
fstp  dword ptr [ebp-3Ch] +
fstp  dword ptr [ebp-38h] +
call sub_1010CEF  +
fldz   +
lea eax [ebp-54h] +
fst  dword ptr [ebp-48h] +
push eax  +
fst  dword ptr [ebp-4Ch] +
lea eax [ebp-44h] +
fst  dword ptr [ebp-50h] +
push eax  +
fstp  dword ptr [ebp-54h] +
lea eax [ebp-88h] +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call sub_1011157  +
fldz   +
lea eax [ebp-6Ch] +
fst  dword ptr [ebp-60h] +
push eax  +
fst  dword ptr [ebp-64h] +
lea eax [ebp-44h] +
fst  dword ptr [ebp-68h] +
push eax  +
fstp  dword ptr [ebp-6Ch] +
lea eax [ebp-5Ch] +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-24h] +
call sub_1011157  +
fld  dword ptr [ebp-60h] +
fadd  dword ptr [ebp-48h] +
fadd  ds:dbl_1011BE0 +
call _ftol2_sse  +
cmp eax [esi+44h] +
jle loc_1011A3F  +
mov [esi+44h] eax +
mov [esi+28h] eax +
call sub_100FBEB  +
fld  ds:flt_1011BDC +
test al al +
jnz loc_1011A6B  +
mov eax [ebp-78h] +
fld  ds:flt_1011BD8 +
fst  dword ptr [esi+2Ch] +
add eax 0FFFFFFB4h +
fstp  dword ptr [esi+34h] +
mov [ebp-10h] eax +
fild  dword ptr [ebp-10h] +
fstp  dword ptr [esi+3Ch] +
jmp loc_1011A9F  +
fld  dword ptr [ebp-4Ch] +
call _ftol2_sse  +
mov edi [ebp-78h] +
mov ecx edi +
sub ecx eax +
sub ecx 15h +
mov [ebp-10h] ecx +
fild  dword ptr [ebp-10h] +
fstp  dword ptr [esi+2Ch] +
fld  dword ptr [ebp-64h] +
call _ftol2_sse  +
sub edi eax +
sub edi 15h +
mov [ebp-10h] edi +
fild  dword ptr [ebp-10h] +
fstp  dword ptr [esi+34h] +
fst  dword ptr [esi+3Ch] +
fild  dword ptr [esi+44h] +
push dword ptr [ebp-90h]  +
fld  dword ptr [ebp-60h] +
fadd  dword ptr [ebp-48h] +
fsubp st(1) st +
fmul  ds:dbl_10080C0 +
fst  dword ptr [ebp-10h] +
fld  dword ptr [ebp-10h] +
fsub  ds:dbl_1011BD0 +
fstp  dword ptr [esi+30h] +
fadd  dword ptr [ebp-48h] +
fstp  dword ptr [ebp-10h] +
fld  dword ptr [ebp-10h] +
fsub  ds:dbl_1011BC8 +
fstp  dword ptr [esi+38h] +
fstp  dword ptr [esi+40h] +
call GdipDeleteStringFormat  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
push dword ptr [ebp-5Ch]  +
call GdipDeleteFont  +
push dword ptr [ebp-88h]  +
mov [ebp-4] bl +
call GdipDeleteFont  +
xor eax eax +
lea edi [ebp-30h] +
stos   +
stos   +
stos   +
mov eax [ebp-14h] +
mov [ebp-2Ch] eax +
push ebx  +
lea eax [ebp-34h] +
lea edi [esi+5Ch] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-30h] 0Eh +
mov dword ptr [ebp-34h] 15h +
call sub_1011626  +
call sub_100FBEB  +
test al al +
jnz loc_1011B44  +
lea eax [ebp-34h] +
jmp loc_1011B57  +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
push dword ptr [ebp-78h]  +
call sub_100FE85  +
lea eax [ebp-44h] +
push ebx  +
push eax  +
mov ecx edi +
call sub_1010C31  +
mov eax [ebp-28h] +
add eax 4 +
mov [ebp-30h] eax +
push ebx  +
lea eax [ebp-34h] +
lea edi [esi+84h] +
push eax  +
mov ecx edi +
call sub_1011626  +
call sub_100FBEB  +
test al al +
jnz loc_1011B89  +
lea eax [ebp-34h] +
jmp loc_1011B9C  +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
push dword ptr [ebp-78h]  +
call sub_100FE85  +
lea eax [ebp-44h] +
push ebx  +
push eax  +
mov ecx edi +
call sub_1010C31  +
push dword ptr [ebp-70h]  +
push dword ptr [esi+4]  +
call ds:ReleaseDC  +
push dword ptr [ebp-24h]  +
call GdipDeleteGraphics  +
xor eax eax +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 640h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_638] ecx +
mov [ebp+lpBuffer] edx +
cmp eax edi +
jz loc_1011C4B  +
mov edx [eax+4] +
mov [ebp+hObject] edx +
cmp edx edi +
jz loc_1011C4B  +
xor edx edx +
cmp dx [eax] +
jnb loc_1011C4B  +
push [ebp+hObject]  +
add ecx 50h +
call sub_1002AF1  +
mov ecx [ebp+var_638] +
cmp esi edi +
jz loc_1011C66  +
mov eax [esi+4] +
cmp eax edi +
jz loc_1011C66  +
xor edx edx +
cmp dx [esi] +
jnb loc_1011C66  +
push eax  +
add ecx 54h +
call sub_1002AF1  +
cmp [ebp+nNumberOfBytesToWrite] edi +
jz loc_1011E76  +
cmp [ebp+lpBuffer] edi +
jz loc_1011E76  +
cmp ebx edi +
jz loc_1011E76  +
cmp [ebx+4] edi +
jz loc_1011E76  +
xor eax eax +
cmp ax [ebx] +
jnb loc_1011E76  +
mov esi 208h +
push esi  +
mov [ebp+PathName] ax +
lea eax [ebp-62Eh] +
push edi  +
push eax  +
call memset  +
mov eax ds:dword_1011E88 +
mov dword ptr [ebp+PrefixString] eax +
mov eax ds:dword_1011E8C +
mov [ebp+var_8] eax +
xor eax eax +
push esi  +
mov [ebp+ExistingFileName] ax +
lea eax [ebp-422h] +
push edi  +
push eax  +
call memset  +
xor eax eax +
push esi  +
mov [ebp+FileName] ax +
lea eax [ebp-216h] +
push edi  +
push eax  +
call memset  +
add esp 24h +
lea eax [ebp+PathName] +
push eax  +
mov esi 104h +
push esi  +
mov [ebp+NumberOfBytesWritten] edi +
call ds:GetTempPathW  +
test eax eax +
jbe loc_1011E76  +
lea eax [ebp+ExistingFileName] +
push eax  +
push edi  +
lea eax [ebp+PrefixString] +
push eax  +
lea eax [ebp+PathName] +
push eax  +
call ds:GetTempFileNameW  +
test eax eax +
jz loc_1011E76  +
push edi  +
push 80h  +
push 2  +
push edi  +
push edi  +
push 0C0000000h  +
lea eax [ebp+ExistingFileName] +
push eax  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jz loc_1011E50  +
push edi  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+lpBuffer]  +
push eax  +
call ds:WriteFile  +
test eax eax +
jz loc_1011E37  +
push [ebp+hObject]  +
call ds:CloseHandle  +
or [ebp+hObject] 0FFFFFFFFh +
lea eax [ebp+ExistingFileName] +
push eax  +
push esi  +
lea eax [ebp+FileName] +
push eax  +
call sub_10102F8  +
mov esi ds:lstrlenW +
lea eax [ebp+FileName] +
push eax  +
call esi  +
mov edi eax +
cmp edi 5 +
jle loc_1011E4E  +
push dword ptr [ebx+4]  +
xor eax eax +
mov [ebp+edi*2+var_21E] ax +
call esi  +
sub eax 3 +
test eax eax +
jle loc_1011E4E  +
mov ecx [ebx+4] +
lea eax [ecx+eax*2] +
push eax  +
mov eax 101h +
sub eax edi +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call sub_1011266  +
test eax eax +
jl loc_1011E4E  +
push 1  +
lea eax [ebp+FileName] +
push eax  +
lea eax [ebp+ExistingFileName] +
push eax  +
call ds:MoveFileExW  +
test eax eax +
jz loc_1011E4E  +
mov esi [ebp+var_638] +
add esi 58h +
mov eax [esi] +
cmp dword ptr [eax-0Ch] 0 +
jle loc_1011E27  +
push eax  +
call ds:DeleteFileW  +
lea eax [ebp+FileName] +
push eax  +
mov ecx esi +
call sub_1001D49  +
xor edi edi +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_1011E50  +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_1011E50  +
xor edi edi +
mov eax [ebp+var_638] +
mov eax [eax+58h] +
cmp [eax-0Ch] edi +
jnz loc_1011E76  +
mov esi ds:DeleteFileW +
lea eax [ebp+FileName] +
push eax  +
call esi  +
lea eax [ebp+ExistingFileName] +
push eax  +
call esi  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10019B3  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+1Ch] +
sub eax 0 +
push esi  +
jz loc_1011ED8  +
dec eax  +
jnz loc_1011F1E  +
cmp dword ptr [ebp+0Ch] 14h +
jnz loc_1011EB4  +
xor esi esi +
inc esi  +
jmp loc_1011F77  +
cmp dword ptr [ebp+0Ch] 0Fh +
jnz loc_1011F1E  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 0Fh  +
push dword ptr [ebp+8]  +
call sub_1014CCB  +
mov ecx [ebp+18h] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_1011F20  +
mov edx [ebp+0Ch] +
xor esi esi +
inc esi  +
cmp edx esi +
jnz loc_1011EFB  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push esi  +
call sub_1011743  +
mov ecx [ebp+18h] +
mov [ecx] eax +
mov eax esi +
jmp loc_1011F20  +
cmp edx 2 +
jnz loc_1011F25  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp+0Ch] esi +
push dword ptr [ebp+10h]  +
push edx  +
call sub_1010B16  +
cmp dword ptr [ebp+0Ch] 0 +
mov ecx [ebp+18h] +
mov [ecx] eax +
jnz loc_1011EF7  +
xor eax eax +
pop esi  +
pop ebp  +
retn 18h  +
***
cmp edx 0Fh +
jnz loc_1011F3C  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push edx  +
call sub_1010E44  +
jmp loc_1011EF2  +
***
mov eax 317h +
cmp edx eax +
jnz loc_1011F57  +
lea edx [ebp+0Ch] +
push edx  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10115BE  +
jmp loc_1011EF2  +
***
mov eax 318h +
cmp edx eax +
jnz loc_1011F72  +
lea edx [ebp+0Ch] +
push edx  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10115BE  +
jmp loc_1011EF2  +
***
cmp edx 14h +
jnz loc_1011F81  +
mov eax [ebp+18h] +
mov [eax] esi +
jmp loc_1011EF7  +
***
cmp edx 5 +
jnz loc_1011F9B  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push edx  +
call sub_10118C9  +
jmp loc_1011EF2  +
***
mov eax 138h +
cmp edx eax +
jnz loc_1011F1E  +
lea edx [ebp+0Ch] +
push edx  +
push dword ptr [ebp+14h]  +
mov [ebp+0Ch] esi +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1010B5E  +
jmp loc_1011F13  +
***
call sub_1001939  +
mov edi ecx +
xor ebx ebx +
push offset dword_101F10C  +
lea ecx [ebp-14h] +
mov [ebp-0Dh] bl +
mov [ebp-1Ch] ebx +
call sub_1001865  +
lea ecx [edi+50h] +
mov esi offset WindowName +
push esi  +
mov [ebp-4] ebx +
mov [ebp-54h] ebx +
mov [ebp-20h] ebx +
mov [ebp-24h] ebx +
mov [ebp-3Ch] ebx +
mov [ebp-40h] ebx +
mov [ebp-5Ch] ecx +
call sub_1001D49  +
lea ecx [edi+54h] +
push esi  +
mov [ebp-58h] ecx +
call sub_1001D49  +
lea ecx [edi+58h] +
mov eax [ecx] +
cmp [eax-0Ch] ebx +
mov [ebp-4Ch] ecx +
jle loc_101202E  +
push eax  +
call ds:DeleteFileW  +
mov ecx [ebp-4Ch] +
push esi  +
call sub_1001D49  +
lea eax [ebp-18h] +
push eax  +
push offset stru_101250C  +
push 1  +
push ebx  +
push offset stru_101251C  +
mov [ebp-18h] ebx +
mov [ebp-28h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-30h] ebx +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
mov [ebp-44h] ebx +
mov [ebp-48h] ebx +
call CoCreateInstance  +
test eax eax +
jl loc_1012139  +
mov eax [ebp-18h] +
mov ecx [eax] +
push 3  +
push 80000002h  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax ebx +
mov [ebp-50h] eax +
jl loc_1012285  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-44h] +
push eax  +
call sub_101007F  +
xor esi esi +
cmp [ebp-48h] ebx +
jbe loc_10120E4  +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
lea edx [ebp-34h] +
push edx  +
lea edx [ebp-38h] +
push edx  +
lea edx [ebp-2Ch] +
push edx  +
lea edx [ebp-28h] +
push edx  +
mov edx [ebp-44h] +
movzx edx word ptr [edx+esi*4] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
cmp eax ebx +
mov [ebp-50h] eax +
jge loc_10120CE  +
inc esi  +
cmp esi [ebp-48h] +
jnb loc_10120E4  +
jmp loc_101209A  +
push dword ptr [ebp-34h]  +
mov ecx edi +
push dword ptr [ebp-38h]  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp-28h]  +
call sub_1011BED  +
cmp [ebp-50h] ebx +
jge loc_1012285  +
mov eax [ebp-18h] +
mov esi [eax] +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-28h] +
push eax  +
call ds:GetSystemDefaultLangID  +
movzx eax ax +
push eax  +
push dword ptr [ebp-18h]  +
call dword ptr [esi+20h]  +
test eax eax +
jl loc_1012285  +
push dword ptr [ebp-34h]  +
mov ecx edi +
push dword ptr [ebp-38h]  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp-28h]  +
call sub_1011BED  +
jmp loc_1012285  +
push ebx  +
lea eax [ebp-54h] +
push eax  +
push offset ValueName  +
push offset hKey  +
mov esi 80000002h +
push esi  +
call sub_100FB25  +
test eax eax +
jz loc_1012285  +
cmp [ebp-54h] ebx +
setnz al  +
cmp al bl +
jz loc_1012285  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
push eax  +
lea eax [ebp-14h] +
push offset aSoftwareMicr_0  +
push eax  +
call sub_10031AA  +
mov edi ds:RegOpenKeyExW +
add esp 0Ch +
lea eax [ebp-1Ch] +
push eax  +
push 20019h  +
push ebx  +
push dword ptr [ebp-14h]  +
push esi  +
call edi  +
test eax eax +
jz loc_10121E7  +
push ebx  +
lea eax [ebp-40h] +
push eax  +
push offset aDefaultbrandin  +
push offset hKey  +
push esi  +
call sub_100FA33  +
test eax eax +
jz loc_1012285  +
push dword ptr [ebp-40h]  +
lea eax [ebp-14h] +
push offset aSoftwareMicr_1  +
push eax  +
call sub_10031AA  +
add esp 0Ch +
lea eax [ebp-1Ch] +
push eax  +
push 20019h  +
push ebx  +
push dword ptr [ebp-14h]  +
push esi  +
call edi  +
test eax eax +
jnz loc_1012285  +
push dword ptr [ebp-1Ch]  +
call ds:RegCloseKey  +
push ebx  +
lea eax [ebp-20h] +
push eax  +
push offset aLargetext  +
push dword ptr [ebp-14h]  +
mov [ebp-1Ch] ebx +
push esi  +
call sub_100FA33  +
mov edi ds:lstrlenW +
test eax eax +
jz loc_101222E  +
push dword ptr [ebp-20h]  +
call edi  +
cmp eax 28h +
jle loc_1012223  +
mov ecx [ebp-20h] +
xor eax eax +
mov [ecx+4Eh] ax +
push dword ptr [ebp-20h]  +
mov ecx [ebp-5Ch] +
call sub_1002AF1  +
push ebx  +
lea eax [ebp-24h] +
push eax  +
push offset aSmalltext  +
push dword ptr [ebp-14h]  +
push esi  +
call sub_100FA33  +
test eax eax +
jz loc_1012263  +
push dword ptr [ebp-24h]  +
call edi  +
cmp eax 37h +
jle loc_1012258  +
mov ecx [ebp-24h] +
xor eax eax +
mov [ecx+6Ch] ax +
push dword ptr [ebp-24h]  +
mov ecx [ebp-58h] +
call sub_1002AF1  +
push ebx  +
lea eax [ebp-3Ch] +
push eax  +
push offset aPicture  +
push dword ptr [ebp-14h]  +
push esi  +
call sub_100FA33  +
test eax eax +
jz loc_1012285  +
push dword ptr [ebp-3Ch]  +
mov ecx [ebp-4Ch] +
call sub_1002AF1  +
mov eax [ebp-4Ch] +
mov eax [eax] +
cmp [eax-0Ch] ebx +
jg loc_10122A3  +
mov eax [ebp-58h] +
mov eax [eax] +
cmp [eax-0Ch] ebx +
jg loc_10122A3  +
mov eax [ebp-5Ch] +
mov eax [eax] +
cmp [eax-0Ch] ebx +
jle loc_10122A7  +
mov byte ptr [ebp-0Dh] 1 +
cmp [ebp-20h] ebx +
jz loc_10122B5  +
push dword ptr [ebp-20h]  +
call sub_10019EE  +
pop ecx  +
cmp [ebp-24h] ebx +
jz loc_10122C3  +
push dword ptr [ebp-24h]  +
call sub_10019EE  +
pop ecx  +
cmp [ebp-3Ch] ebx +
jz loc_10122D1  +
push dword ptr [ebp-3Ch]  +
call sub_10019EE  +
pop ecx  +
cmp [ebp-40h] ebx +
jz loc_10122DF  +
push dword ptr [ebp-40h]  +
call sub_10019EE  +
pop ecx  +
cmp [ebp-44h] ebx +
jz loc_10122ED  +
push dword ptr [ebp-44h]  +
call sub_10019EE  +
pop ecx  +
mov eax [ebp-18h] +
cmp eax ebx +
jz loc_10122FD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-18h] ebx +
lea eax [ebp-28h] +
push eax  +
call sub_100FBAB  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100FBAB  +
lea eax [ebp-30h] +
push eax  +
call sub_100FBAB  +
lea eax [ebp-34h] +
push eax  +
call sub_1002F25  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov al [ebp-0Dh] +
call __EH_epilog3  +
retn   +
***
xor eax eax +
mov [ecx+138h] eax +
mov [ecx+14Ch] al +
mov byte ptr [ecx+14Dh] 1 +
mov [ecx+160h] eax +
mov [ecx+164h] eax +
mov [ecx+11Ch] eax +
mov [ecx+120h] eax +
mov [ecx+16Ch] eax +
mov [ecx+124h] eax +
mov [ecx+174h] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
xor edi edi +
inc edi  +
mov esi ecx +
mov [eax] edi +
test ebx ebx +
jz loc_10125D7  +
push edi  +
push ebx  +
call ds:SetBkMode  +
call sub_100FC80  +
test al al +
jz loc_10125AE  +
push 8  +
call ds:GetSysColor  +
mov [ebp+arg_C] eax +
push eax  +
jmp loc_10125D0  +
mov eax [ebp+arg_8] +
cmp eax [esi+0F4h] +
jz loc_10125C3  +
cmp eax [esi+50h] +
jz loc_10125C3  +
cmp eax [esi+24h] +
jnz loc_10125D7  +
lea eax [ebp+arg_C] +
push eax  +
push edi  +
call sub_100F54D  +
push [ebp+arg_C]  +
push ebx  +
call ds:SetTextColor  +
push 5  +
call ds:GetStockObject  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
push dword ptr [ecx+4]  +
mov byte ptr [ecx+14Dh] 1 +
call sub_100FD5D  +
xor eax eax +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
xor ecx ecx +
cmp eax ecx +
jz locret_101266C  +
push esi  +
mov esi [ebp+arg_4] +
cmp esi ecx +
jz loc_101266B  +
lea edx [ebp+lParam] +
push edx  +
push ecx  +
push 1601h  +
push dword ptr [eax]  +
mov [ebp+lParam] ecx +
mov [ebp+var_4] ecx +
call ds:SendMessageW  +
mov eax [ebp+lParam] +
cmp eax 4Ah +
jge loc_1012643  +
push 4Ah  +
pop eax  +
mov ecx [esi+8] +
add eax 28h +
sub ecx eax +
mov eax dword_1020194 +
mov [esi] ecx +
mov ecx [ebp+var_4] +
cmp eax ecx +
jle loc_101265D  +
mov ecx eax +
jmp loc_1012663  +
mov dword_1020194 ecx +
mov eax [esi+4] +
add eax ecx +
mov [esi+0Ch] eax +
pop esi  +
leave   +
retn 8  +
***
retn   +
***
mov eax [ecx+168h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+168h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+124h] +
mov eax [esi] +
test eax eax +
jz loc_10126BD  +
push eax  +
call ds:DestroyIcon  +
and dword ptr [esi] 0 +
lea esi [edi+16Ch] +
mov eax [esi] +
test eax eax +
jz loc_10126D3  +
push eax  +
call ds:__imp_FreeLibrary  +
and dword ptr [esi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push dword ptr [ecx+4]  +
push dword ptr [ecx+20h]  +
call ds:CallWindowProcW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpPoint] +
push esi  +
mov esi ds:ScreenToClient +
push edi  +
mov edi ecx +
push ebx  +
push dword ptr [edi]  +
call esi  +
test eax eax +
jz loc_1012722  +
add ebx 8 +
push ebx  +
push dword ptr [edi]  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ecx]  +
call ds:GetParent  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101277C  +
test dx dx +
jz loc_1012778  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101277C  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1012756  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
sbb eax 0FFFFFFFFh +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
fld  [ebp+arg_4] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
mov eax [eax] +
push esi  +
push 0  +
push ecx  +
fstp  [esp+10h+var_10] +
push eax  +
call GdipCreatePen1  +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
push esi  +
push [ebp+arg_0]  +
call GdipCreatePath  +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
add esp edi +
add byte ptr [eax] 1 +
call GdipDisposeImage  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
mov dword ptr [esi] offset off_101283C +
call GdipCreateBitmapFromHICON  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:DeleteObject +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+11Ch] +
mov eax [edi] +
test eax eax +
jz loc_101286B  +
push eax  +
call ebx  +
and dword ptr [edi] 0 +
lea edi [esi+120h] +
mov eax [edi] +
test eax eax +
jz loc_101287D  +
push eax  +
call ebx  +
and dword ptr [edi] 0 +
lea edi [esi+160h] +
mov eax [edi] +
test eax eax +
jz loc_101288F  +
push eax  +
call ebx  +
and dword ptr [edi] 0 +
lea edi [esi+164h] +
mov eax [edi] +
test eax eax +
jz loc_10128A5  +
push eax  +
call ds:DeleteDC  +
and dword ptr [edi] 0 +
mov ecx esi +
call sub_10126A1  +
mov ecx esi +
call sub_1012531  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call GdipDeleteGraphics  +
test [ebp+arg_0] 1 +
jz loc_10128E2  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+Point] +
mov esi ecx +
push eax  +
push dword ptr [esi+24h]  +
call ds:GetWindowRect  +
lea eax [ebp+Point] +
push eax  +
lea ecx [esi+4] +
call sub_10126FE  +
mov eax [ebp-4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+Point] +
mov esi ecx +
push eax  +
push dword ptr [esi+50h]  +
call ds:GetWindowRect  +
lea eax [ebp+Point] +
push eax  +
lea ecx [esi+4] +
call sub_10126FE  +
mov eax [ebp-4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 44Ah  +
push dword ptr [ecx+4]  +
call ds:PostMessageW  +
mov eax [ebp+arg_10] +
and dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov eax [ecx+4] +
test eax eax +
jnz locret_1012988  +
push eax  +
push eax  +
push 31h  +
push dword ptr [ecx]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_10129A3  +
push 80004005h  +
call loc_1008FB2  +
push [ebp+arg_0]  +
push dword ptr [ecx]  +
call sub_101274B  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx ecx +
push dword ptr [ebx]  +
call ds:GetDC  +
mov [ebp+hDC] eax +
test eax eax +
jz loc_1012A2A  +
push esi  +
push edi  +
push 0  +
push 0  +
push 31h  +
push dword ptr [ebx]  +
call ds:SendMessageW  +
push eax  +
push [ebp+hDC]  +
call ds:SelectObject  +
mov esi [ebp+arg_8] +
lea edi [ebp+Rect] +
movs   +
push 520h  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+nCount]  +
movs   +
push [ebp+lpString]  +
movs   +
push [ebp+hDC]  +
movs   +
call ds:DrawTextW  +
mov ecx [ebp+Rect.right] +
mov eax [ebp+arg_8] +
push [ebp+hDC]  +
mov [eax+8] ecx +
mov ecx [ebp+Rect.bottom] +
mov [eax+0Ch] ecx +
push dword ptr [ebx]  +
call ds:ReleaseDC  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_1012A69  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jl loc_1012A69  +
mov eax [esi] +
cmp ecx [eax-0Ch] +
jg loc_1012A69  +
push [ebp+arg_0]  +
lea eax [eax+ecx*2] +
push eax  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1012A69  +
sub eax [esi] +
sar eax 1 +
jmp loc_1012A6C  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_8] +
push edi  +
test ecx ecx +
jnz loc_1012A90  +
push 80004005h  +
call loc_1008FB2  +
cmp [ebp+arg_0] 0 +
mov edi [ebp+arg_4] +
jnz loc_1012AA4  +
test edi edi +
jz loc_1012AA4  +
push 80070057h  +
jmp loc_1012A8B  +
mov eax [ecx] +
push 2  +
push edi  +
call dword ptr [eax]  +
test eax eax +
jnz loc_1012AB4  +
call sub_100B34B  +
add eax 10h +
push edi  +
mov ecx esi +
mov [esi] eax +
call sub_1001AEE  +
push edi  +
push [ebp+arg_0]  +
push edi  +
push dword ptr [esi]  +
call sub_1001C3F  +
add esp 10h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
lea ecx [ebp+var_4] +
mov dword ptr [esi+8] 6 +
mov dword ptr [esi] offset off_1012B1C +
mov eax [eax] +
push ecx  +
push eax  +
call GdipCreateSolidFill  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
fld  [ebp+arg_C] +
and [ebp+var_4] 0 +
push esi  +
lea edx [ebp+var_4] +
push edx  +
push 0  +
push [ebp+arg_10]  +
mov esi ecx +
mov ecx [ebp+arg_4] +
mov dword ptr [esi+8] 6 +
mov dword ptr [esi] offset off_100811C +
mov ecx [ecx] +
mov eax [eax] +
push ecx  +
fstp  [esp+18h+var_18] +
push eax  +
push ecx  +
push [ebp+arg_0]  +
call GdipCreateLineBrushFromRectWithAngleI  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push dword ptr [eax]  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipFillPath  +
push eax  +
mov ecx esi +
call sub_1010D2F  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
test eax eax +
jz loc_1012BBC  +
mov eax [eax+4] +
jmp loc_1012BBE  +
xor eax eax +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
push dword ptr [esi]  +
call GdipDrawImageRectI  +
push eax  +
mov ecx esi +
call sub_1010D2F  +
pop esi  +
pop ebp  +
retn 14h  +
***
call sub_1001939  +
mov ebx ecx +
cmp dword ptr [ebp+8] 0 +
jz loc_1012FFB  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebx+4]  +
call ds:GetClientRect  +
cmp byte ptr [ebx+14Dh] 0 +
jnz loc_1012C3F  +
mov eax [ebp-24h] +
cmp eax [ebx+158h] +
jnz loc_1012C2B  +
mov eax [ebp-20h] +
cmp eax [ebx+15Ch] +
jz loc_1012C32  +
mov byte ptr [ebx+14Dh] 1 +
cmp byte ptr [ebx+14Dh] 0 +
jz loc_1012FD7  +
mov eax [ebx+160h] +
test eax eax +
jz loc_1012C50  +
push eax  +
call ds:DeleteObject  +
mov eax [ebx+164h] +
test eax eax +
jz loc_1012C61  +
push eax  +
call ds:DeleteDC  +
push dword ptr [ebp+8]  +
call ds:CreateCompatibleDC  +
mov [ebx+164h] eax +
test eax eax +
jz loc_1012FD7  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp+8]  +
call ds:CreateCompatibleBitmap  +
mov [ebx+160h] eax +
test eax eax +
jz loc_1012FD7  +
push eax  +
push dword ptr [ebx+164h]  +
call ds:SelectObject  +
mov edx [ebp-28h] +
mov eax [ebp-20h] +
mov ecx [ebp-24h] +
lea edi [ebx+150h] +
lea esi [ebp-2Ch] +
movs   +
movs   +
movs   +
sub eax edx +
movs   +
mov esi [ebp-2Ch] +
mov [ebp-80h] eax +
lea eax [ebp-5Ch] +
push eax  +
sub ecx esi +
xor edi edi +
push edi  +
mov byte ptr [ebx+14Dh] 0 +
mov [ebp-8Ch] esi +
mov [ebp-88h] edx +
mov [ebp-84h] ecx +
call sub_100F54D  +
push dword ptr [ebp-5Ch]  +
call ds:CreateSolidBrush  +
mov esi eax +
cmp esi edi +
jz loc_1012D2D  +
push esi  +
push dword ptr [ebx+164h]  +
call ds:SelectObject  +
mov [ebp-10h] eax +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebx+164h]  +
call ds:FillRect  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx+164h]  +
call ds:SelectObject  +
push esi  +
call ds:DeleteObject  +
push 8  +
call GdipAlloc  +
cmp eax edi +
jz loc_1012D4A  +
push dword ptr [ebx+164h]  +
mov ecx eax +
call sub_10110D3  +
mov [ebp-14h] eax +
jmp loc_1012D4F  +
mov [ebp-14h] edi +
mov eax edi +
cmp eax edi +
jz loc_1012FB8  +
mov ecx [eax+4] +
mov [eax+4] edi +
cmp ecx edi +
jnz loc_1012FB8  +
push 4  +
mov ecx eax +
call sub_1011100  +
lea eax [ebp-30h] +
push eax  +
push 1  +
call sub_100F54D  +
lea eax [ebp-34h] +
push eax  +
push edi  +
call sub_100F54D  +
lea eax [ebp-18h] +
push eax  +
push edi  +
call sub_100F54D  +
call sub_100FBEB  +
test al al +
jz loc_1012D9E  +
fld  ds:flt_10080D0 +
jmp loc_1012DA0  +
fldz   +
mov eax [ebp-18h] +
fstp  dword ptr [ebp-10h] +
shr eax 10h +
push eax  +
mov eax [ebp-18h] +
shr eax 8 +
push eax  +
push dword ptr [ebp-18h]  +
mov esi 0FFh +
push esi  +
call sub_1010C64  +
mov [ebp-58h] eax +
mov eax [ebp-34h] +
shr eax 10h +
push eax  +
mov eax [ebp-34h] +
shr eax 8 +
push eax  +
push dword ptr [ebp-34h]  +
push esi  +
call sub_1010C64  +
fld  dword ptr [ebp-10h] +
push edi  +
push ecx  +
mov [ebp-1Ch] eax +
fstp  [esp+10h+var_10] +
lea eax [ebp-58h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-8Ch] +
push eax  +
lea ecx [ebp-68h] +
call sub_1012B29  +
mov eax [ebp-18h] +
shr eax 10h +
push eax  +
mov eax [ebp-18h] +
shr eax 8 +
push eax  +
push dword ptr [ebp-18h]  +
mov [ebp-4] edi +
push esi  +
call sub_1010C64  +
mov [ebp-1Ch] eax +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-74h] +
call sub_1012ADD  +
mov eax [ebp-30h] +
shr eax 10h +
push eax  +
mov eax [ebp-30h] +
shr eax 8 +
push eax  +
push dword ptr [ebp-30h]  +
push esi  +
call sub_1010C64  +
fld1   +
push ecx  +
fstp  [esp+0Ch+var_C] +
mov [ebp-1Ch] eax +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-7Ch] +
call sub_1012788  +
push edi  +
lea ecx [ebp-54h] +
call sub_10127C4  +
push edi  +
lea ecx [ebp-4Ch] +
call sub_10127C4  +
lea esi [ebp-2Ch] +
lea edi [ebp-9Ch] +
mov byte ptr [ebp-4] 4 +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_10128EE  +
xor esi esi +
inc esi  +
push esi  +
push esi  +
mov [ebp-90h] eax +
push 5  +
lea eax [ebp-9Ch] +
push eax  +
lea eax [ebp-54h] +
push eax  +
call sub_1010367  +
push esi  +
push esi  +
push 5  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
call sub_1010367  +
call sub_100FC80  +
test al al +
jnz loc_1012EE7  +
mov eax [ebp-6Ch] +
and dword ptr [ebp-6Ch] 0 +
test eax eax +
jnz loc_1012ECC  +
mov ecx [ebp-14h] +
lea eax [ebp-4Ch] +
push eax  +
lea eax [ebp-74h] +
push eax  +
call sub_1012B7C  +
mov eax [ebp-60h] +
and dword ptr [ebp-60h] 0 +
test eax eax +
jnz loc_1012EE7  +
mov ecx [ebp-14h] +
lea eax [ebp-54h] +
push eax  +
lea eax [ebp-68h] +
push eax  +
call sub_1012B7C  +
and dword ptr [ebp-78h] 0 +
call sub_100FC80  +
test al al +
jnz loc_1012F87  +
mov eax [ebx+124h] +
test eax eax +
jz loc_1012F87  +
push eax  +
lea ecx [ebp-44h] +
call sub_1012808  +
mov eax [ebp-3Ch] +
and dword ptr [ebp-3Ch] 0 +
mov byte ptr [ebp-4] 5 +
test eax eax +
jnz loc_1012F7F  +
lea ecx [ebp-44h] +
call sub_1010D58  +
push 10h  +
pop edi  +
cmp eax edi +
ja loc_1012F37  +
lea ecx [ebp-44h] +
call sub_1010D58  +
mov edi eax +
lea ecx [ebp-44h] +
call sub_1010D84  +
push 10h  +
pop ecx  +
cmp eax ecx +
jbe loc_1012F4B  +
mov [ebp-10h] ecx +
jmp loc_1012F56  +
lea ecx [ebp-44h] +
call sub_1010D84  +
mov [ebp-10h] eax +
call sub_100FBEB  +
test al al +
jnz loc_1012F64  +
push 4  +
pop eax  +
jmp loc_1012F6C  +
mov eax [ebp-24h] +
sub eax edi +
sub eax 4 +
push dword ptr [ebp-10h]  +
mov ecx [ebp-14h] +
push edi  +
push 0  +
push eax  +
lea eax [ebp-44h] +
push eax  +
call sub_1012BA8  +
push dword ptr [ebp-40h]  +
call GdipDisposeImage  +
mov ecx [ebp-14h] +
push esi  +
call sub_10128C7  +
push dword ptr [ebp-4Ch]  +
call GdipDeletePath  +
push dword ptr [ebp-54h]  +
call GdipDeletePath  +
push dword ptr [ebp-7Ch]  +
call GdipDeletePen  +
push dword ptr [ebp-70h]  +
call GdipDeleteBrush  +
push dword ptr [ebp-64h]  +
call GdipDeleteBrush  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_1012FD7  +
push 16h  +
push dword ptr [ebx+164h]  +
push 317h  +
push dword ptr [ebx+4]  +
push dword ptr [ebx+20h]  +
call ds:CallWindowProcW  +
push 0CC0020h  +
push 0  +
push 0  +
push dword ptr [ebx+164h]  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-28h]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp+8]  +
call ds:BitBlt  +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
push 2  +
mov byte ptr [esi+14Dh] 1 +
call sub_100F54D  +
mov eax [ebp+var_4] +
mov [esi+0E4h] eax +
lea eax [ebp+var_4] +
push eax  +
push 1  +
mov byte ptr [esi+0E9h] 1 +
call sub_100F54D  +
mov eax [ebp+var_4] +
mov edi ds:DeleteObject +
mov byte ptr [esi+0E8h] 1 +
mov [esi+0E0h] eax +
mov eax [esi+11Ch] +
test eax eax +
jz loc_1013069  +
push eax  +
call edi  +
and dword ptr [esi+11Ch] 0 +
mov eax [esi+120h] +
test eax eax +
jz loc_101307D  +
push eax  +
call edi  +
and dword ptr [esi+120h] 0 +
push dword ptr [esi+4]  +
call ds:GetDC  +
mov edi eax +
test edi edi +
jz loc_10130B2  +
push 4  +
push edi  +
call sub_100F9E2  +
push 0  +
push edi  +
mov [esi+11Ch] eax +
call sub_100F9E2  +
push edi  +
push dword ptr [esi+4]  +
mov [esi+120h] eax +
call ds:ReleaseDC  +
mov eax [esi+11Ch] +
test eax eax +
jz loc_10130DA  +
push 1  +
push eax  +
lea ecx [esi+24h] +
call sub_1010C11  +
push 1  +
push dword ptr [esi+11Ch]  +
lea ecx [esi+0F4h] +
call sub_1010C11  +
mov eax [esi+120h] +
test eax eax +
jz loc_10130F2  +
push 1  +
lea ecx [esi+50h] +
push eax  +
mov [ecx+4] eax +
call sub_1010C11  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
mov ecx [ebp+arg_0] +
call sub_101298E  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1012A76  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push [ebp+wParam]  +
mov esi ecx +
call sub_1012BE4  +
push [ebp+lParam]  +
mov ecx esi +
push [ebp+wParam]  +
push [ebp+Msg]  +
call sub_10126DB  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov ecx ds:DefWindowProcW +
mov [eax+24h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
test ebx ebx +
jge loc_10131A2  +
xor ebx ebx +
mov edi [ecx] +
mov esi [edi-0Ch] +
test esi esi +
jge loc_10131AD  +
xor esi esi +
cmp ebx esi +
jl loc_10131BC  +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_1010520  +
jmp loc_10131D1  +
call sub_1010488  +
mov ecx [ebp+arg_0] +
push eax  +
sub esi ebx +
push ebx  +
lea eax [edi+esi*2] +
push eax  +
call sub_101311C  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jge loc_10131F5  +
xor edi edi +
mov esi [ecx] +
cmp edi [esi-0Ch] +
jl loc_1013207  +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_1010520  +
jmp loc_1013217  +
call sub_1010488  +
mov ecx [ebp+arg_0] +
push eax  +
push edi  +
push esi  +
call sub_101311C  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+30h] +
mov dword ptr [esi] offset off_100813C +
test eax eax +
jz loc_101323E  +
push eax  +
call ds:DeleteObject  +
mov esi [esi+18h] +
test esi esi +
jz loc_101324B  +
push esi  +
call sub_101A206  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+0A5h] 0 +
mov eax [ebp+arg_C] +
jz loc_1013274  +
mov byte ptr [ecx+0A6h] 1 +
mov dword ptr [eax] 1 +
xor eax eax +
jmp loc_101327A  +
and dword ptr [eax] 0 +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push dword ptr [ecx+4]  +
push dword ptr [ecx+24h]  +
call ds:CallWindowProcW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 703h  +
push dword ptr [ecx]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 700h  +
push dword ptr [ecx]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push esi  +
mov esi ecx +
cmp byte ptr [esi+90h] 0 +
jz loc_1013323  +
lea eax [ebp+Paint] +
push eax  +
push dword ptr [esi+4]  +
call ds:BeginPaint  +
lea eax [ebp+Paint] +
push eax  +
push dword ptr [esi+4]  +
call ds:EndPaint  +
jmp loc_1013326  +
and dword ptr [eax] 0 +
mov ecx [ebp+var_4] +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_10019B3  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push esi  +
mov esi [ebp+arg_4] +
cmp [ecx+0A4h] al +
jz loc_1013384  +
cmp esi 26h +
jz loc_1013363  +
cmp esi 28h +
jz loc_1013363  +
cmp esi 25h +
jz loc_1013363  +
cmp esi 27h +
jnz loc_1013384  +
lea eax [ebp+arg_C] +
push eax  +
add ecx 4 +
call sub_101272E  +
push [ebp+lParam]  +
push esi  +
push 100h  +
push dword ptr [eax]  +
call ds:PostMessageW  +
xor eax eax +
jmp loc_10133A4  +
cmp esi 20h +
jnz loc_101339C  +
cmp [ecx+0A5h] al +
jz loc_101339C  +
mov eax [ebp+arg_C] +
mov dword ptr [eax] 1 +
jmp loc_1013380  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+0A4h] 0 +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
jz loc_10133CF  +
call sub_1013283  +
or eax 1 +
jmp loc_10133D4  +
call sub_1013283  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp byte ptr [ecx+90h] 0 +
jz loc_101340F  +
push esi  +
lea esi [ecx+4] +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101272E  +
push dword ptr [esi]  +
push 0  +
push 44Ah  +
push dword ptr [eax]  +
call ds:PostMessageW  +
pop esi  +
leave   +
retn   +
push 0  +
push 0  +
push dword ptr [ecx+4]  +
call ds:InvalidateRect  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+0Ch] +
push 1  +
push dword ptr [ebp+14h]  +
lea ecx [ebp-28h] +
push dword ptr [ebp+10h]  +
push edi  +
push dword ptr [esi+4]  +
call sub_100967C  +
mov eax [esi+1Ch] +
push 0  +
lea ecx [ebp+8] +
push ecx  +
push dword ptr [ebp+14h]  +
mov [ebp+0Ch] eax +
push dword ptr [ebp+10h]  +
lea eax [ebp-28h] +
push edi  +
push dword ptr [esi+4]  +
mov [esi+1Ch] eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
test eax eax +
jnz loc_10134D7  +
push ebx  +
mov ebx 82h +
cmp edi ebx +
jz loc_101348A  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push edi  +
call sub_1013283  +
mov [ebp+8] eax +
jmp loc_10134D6  +
mov eax [esi+4] +
mov edi ds:GetWindowLongW +
push 0FFFFFFFCh  +
push eax  +
call edi  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
mov [ebp-4] eax +
push ebx  +
call sub_1013283  +
mov [ebp+8] eax +
mov eax [esi+24h] +
cmp eax ds:DefWindowProcW +
jz loc_10134D2  +
mov eax [esi+4] +
push 0FFFFFFFCh  +
push eax  +
call edi  +
cmp eax [ebp-4] +
jnz loc_10134D2  +
push dword ptr [esi+24h]  +
push 0FFFFFFFCh  +
push dword ptr [esi+4]  +
call ds:SetWindowLongW  +
or dword ptr [esi+20h] 1 +
pop ebx  +
mov eax [esi+20h] +
test al 1 +
jz loc_10134FE  +
xor edx edx +
cmp [ebp+0Ch] edx +
jnz loc_10134FE  +
mov ecx [esi+4] +
and eax 0FFFFFFFEh +
mov [esi+20h] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
mov [esi+4] edx +
mov [esi+1Ch] edx +
call dword ptr [eax+0Ch]  +
jmp loc_1013504  +
mov eax [ebp+0Ch] +
mov [esi+1Ch] eax +
mov eax [ebp+8] +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
mov eax [esi+8] +
mov ebx ecx +
mov ecx [ebp+arg_C] +
push edi  +
mov [ebp+var_64] esi +
cmp eax 0FFFFFFF4h +
jnz loc_1013668  +
mov eax [esi+0Ch] +
dec eax  +
jz loc_1013663  +
sub eax 10000h +
jnz loc_1013682  +
cmp dword ptr [esi+24h] 0FFFFFFFFh +
jz loc_101362D  +
lea edi [ebx+4] +
push dword ptr [edi]  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_1013581  +
cmp byte ptr [ebx+9Dh] 0 +
jz loc_101357D  +
push dword ptr [ebx+98h]  +
jmp loc_101358A  +
push 2  +
jmp loc_1013583  +
push 11h  +
call ds:GetSysColor  +
push eax  +
push dword ptr [esi+10h]  +
call ds:SetTextColor  +
mov eax [ebx+28h] +
cmp eax [esi+24h] +
jz loc_1013682  +
cmp byte ptr [ebx+91h] 0 +
jnz loc_1013682  +
mov ecx edi +
call sub_1012975  +
test eax eax +
jnz loc_10135D0  +
lea eax [ebp+var_68] +
push eax  +
mov ecx edi +
call sub_101272E  +
push 0  +
push 0  +
push 31h  +
push dword ptr [eax]  +
call ds:SendMessageW  +
lea ecx [ebp+var_60] +
push ecx  +
push 5Ch  +
push eax  +
call ds:GetObjectW  +
mov eax [ebx+30h] +
test eax eax +
jz loc_10135FE  +
push 17h  +
pop ecx  +
lea edi [ebx+34h] +
lea esi [ebp+var_60] +
xor edx edx +
cmps   +
jz loc_101361A  +
test eax eax +
jz loc_10135FE  +
push eax  +
call ds:DeleteObject  +
lea eax [ebp+var_60] +
push eax  +
mov [ebp+var_60.lfUnderline] 0 +
call ds:CreateFontIndirectW  +
push 17h  +
lea edi [ebx+34h] +
pop ecx  +
lea esi [ebp+var_60] +
mov [ebx+30h] eax +
movs   +
push dword ptr [ebx+30h]  +
mov eax [ebp+var_64] +
push dword ptr [eax+10h]  +
call ds:SelectObject  +
push 2  +
jmp loc_1013665  +
push dword ptr [ebx+4]  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_101364F  +
cmp byte ptr [ebx+9Ch] 0 +
jz loc_101364B  +
push dword ptr [ebx+94h]  +
jmp loc_1013658  +
push 8  +
jmp loc_1013651  +
push 11h  +
call ds:GetSysColor  +
push eax  +
push dword ptr [esi+10h]  +
call ds:SetTextColor  +
jmp loc_1013682  +
push 20h  +
pop eax  +
jmp loc_1013684  +
cmp eax 0FFFFFFFAh +
jz loc_101367C  +
cmp eax 0FFFFFFFEh +
jz loc_101367C  +
cmp eax 0FFFFFFFBh +
jz loc_101367C  +
cmp eax 0FFFFFFFCh +
jnz loc_101367F  +
and dword ptr [ecx] 0 +
and dword ptr [ecx] 0 +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10019B3  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 10D4h +
call __alloca_probe  +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
cmp byte ptr [esi+2Ch] 0 +
push edi  +
mov edi [ebp+arg_C] +
jnz loc_10136EE  +
mov eax [esi+4] +
mov [ebp+EventTrack.hwndTrack] eax +
lea eax [ebp+EventTrack] +
push eax  +
mov byte ptr [esi+2Ch] 1 +
mov [ebp+EventTrack.cbSize] 10h +
mov [ebp+EventTrack.dwFlags] 2 +
call ds:TrackMouseEvent  +
mov eax [ebp+arg_8] +
movzx ecx ax +
shr eax 10h +
mov [ebp+var_10C0] eax +
lea eax [ebp+lParam] +
mov [ebp+lParam] ecx +
push eax  +
lea ecx [esi+4] +
call sub_10132C6  +
test eax eax +
jz loc_1013726  +
mov eax [ebp+var_10B8] +
cmp eax [esi+28h] +
jz loc_1013737  +
mov [esi+28h] eax +
jmp loc_1013730  +
cmp dword ptr [esi+28h] 0FFFFFFFFh +
jz loc_1013737  +
or dword ptr [esi+28h] 0FFFFFFFFh +
mov ecx esi +
call sub_10133DD  +
and dword ptr [edi] 0 +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_10019B3  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
cmp dword ptr [ecx+28h] 0FFFFFFFFh +
mov byte ptr [ecx+2Ch] 0 +
jz loc_101376F  +
or dword ptr [ecx+28h] 0FFFFFFFFh +
call sub_10133DD  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
cmp byte ptr [esi+9Eh] 0 +
jz loc_10137B2  +
lea eax [ebp+wParam] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetWindowRect  +
push 0  +
lea eax [ebp+wParam] +
push eax  +
push 44Bh  +
push dword ptr [esi+0A0h]  +
call ds:SendMessageW  +
cmp byte ptr [esi+90h] 0 +
jz loc_10137C2  +
mov ecx esi +
call sub_10133DD  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
xor eax eax +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+90h] 0 +
jz loc_10137E7  +
call sub_10133DD  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov eax (offset dword_1013420+3) +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1013225  +
test byte ptr [ebp+8] 1 +
jz loc_101381D  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1008164 +
mov dword ptr [ebp-4] 2 +
call sub_10126A1  +
mov ecx [esi+170h] +
sub ecx 10h +
call sub_10018D0  +
mov ecx [esi+148h] +
sub ecx 10h +
call sub_10018D0  +
mov ecx [esi+144h] +
sub ecx 10h +
call sub_10018D0  +
mov ecx [esi+140h] +
sub ecx 10h +
call sub_10018D0  +
mov ecx [esi+13Ch] +
sub ecx 10h +
call sub_10018D0  +
mov eax [esi+104h] +
test eax eax +
jz loc_10138A2  +
push eax  +
call sub_101A206  +
lea ecx [esi+4Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1013225  +
mov eax [esi+34h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_10138BF  +
push eax  +
call sub_101A206  +
mov esi [esi+14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_10138D0  +
push esi  +
call sub_101A206  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+nIDDlgItem]  +
push dword ptr [ecx]  +
call ds:GetDlgItem  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi 4Eh +
ja loc_1013969  +
jz loc_1013965  +
cmp edi 2Bh +
jz loc_101395C  +
cmp edi 2Ch +
jz loc_1013950  +
cmp edi 2Dh +
jz loc_1013947  +
jbe loc_10139C2  +
cmp edi 2Fh +
jbe loc_10139BC  +
cmp edi 39h +
jnz loc_10139C2  +
test ebx ebx +
jz loc_10139C2  +
mov eax [esi+8] +
jmp loc_10139BE  +
test ebx ebx +
jz loc_10139C2  +
mov eax [esi+0Ch] +
jmp loc_10139BE  +
test ebx ebx +
jz loc_10139C2  +
push dword ptr [esi+4]  +
lea eax [ebp+arg_0] +
jmp loc_10139AB  +
test ebx ebx +
jz loc_10139C2  +
mov eax [esi+14h] +
jmp loc_10139BE  +
mov eax [esi] +
jmp loc_10139BE  +
cmp edi 111h +
jz loc_10139B8  +
cmp edi 113h +
jbe loc_10139C2  +
cmp edi 115h +
jbe loc_10139BC  +
cmp edi 131h +
jbe loc_10139C2  +
cmp edi 138h +
jbe loc_10139BC  +
cmp edi 210h +
jnz loc_10139C2  +
movzx eax bx +
dec eax  +
cmp eax 1 +
jbe loc_10139BC  +
mov eax ebx +
shr eax 10h +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
add ecx 4 +
call sub_10138DB  +
mov eax [eax] +
jmp loc_10139BE  +
test esi esi +
jz loc_10139C2  +
mov eax esi +
test eax eax +
jnz loc_10139CD  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
xor eax eax +
inc eax  +
jmp loc_10139DD  +
push esi  +
push ebx  +
add edi 2000h +
push edi  +
push eax  +
call ds:SendMessageW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+0Ch] +
push 1  +
push dword ptr [ebp+14h]  +
lea ecx [ebp-28h] +
push dword ptr [ebp+10h]  +
push edi  +
push dword ptr [esi+4]  +
call sub_100967C  +
mov eax [esi+18h] +
push 0  +
lea ecx [ebp+8] +
push ecx  +
push dword ptr [ebp+14h]  +
mov [ebp+0Ch] eax +
push dword ptr [ebp+10h]  +
lea eax [ebp-28h] +
push edi  +
push dword ptr [esi+4]  +
mov [esi+18h] eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
test eax eax +
jnz loc_1013A9D  +
push ebx  +
mov ebx 82h +
cmp edi ebx +
jz loc_1013A50  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push edi  +
call sub_10126DB  +
mov [ebp+8] eax +
jmp loc_1013A9C  +
mov eax [esi+4] +
mov edi ds:GetWindowLongW +
push 0FFFFFFFCh  +
push eax  +
call edi  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
mov [ebp-4] eax +
push ebx  +
call sub_10126DB  +
mov [ebp+8] eax +
mov eax [esi+20h] +
cmp eax ds:DefWindowProcW +
jz loc_1013A98  +
mov eax [esi+4] +
push 0FFFFFFFCh  +
push eax  +
call edi  +
cmp eax [ebp-4] +
jnz loc_1013A98  +
push dword ptr [esi+20h]  +
push 0FFFFFFFCh  +
push dword ptr [esi+4]  +
call ds:SetWindowLongW  +
or dword ptr [esi+1Ch] 1 +
pop ebx  +
mov eax [esi+1Ch] +
test al 1 +
jz loc_1013AC4  +
xor edx edx +
cmp [ebp+0Ch] edx +
jnz loc_1013AC4  +
mov ecx [esi+4] +
and eax 0FFFFFFFEh +
mov [esi+1Ch] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
mov [esi+4] edx +
mov [esi+18h] edx +
call dword ptr [eax+0Ch]  +
jmp loc_1013ACA  +
mov eax [ebp+0Ch] +
mov [esi+18h] eax +
mov eax [ebp+8] +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov eax (offset byte_10139E8+1) +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
add ecx 13Ch +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_1010520  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
add ecx 148h +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_1010520  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
add ecx 140h +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_1010520  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push offset unk_101F1CC  +
call sub_10091ED  +
mov esi eax +
test esi esi +
jz loc_1013B9D  +
mov eax [esi] +
push ebx  +
mov ebx [ebp+8] +
push edi  +
mov ecx esi +
mov [esi+4] ebx +
call dword ptr [eax+8]  +
push esi  +
lea edi [esi+18h] +
push eax  +
mov ecx edi +
call sub_100901D  +
mov edi [edi] +
push edi  +
push 0FFFFFFFCh  +
push ebx  +
call ds:SetWindowLongW  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call edi  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
push 0  +
lea ecx [esi+18h] +
call sub_100901D  +
test eax eax +
jnz loc_1013BCB  +
push 0Eh  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1013C38  +
cmp [ebp+arg_18] 0 +
jz loc_1013BC7  +
push esi  +
lea eax [esi+0Ch] +
push eax  +
push offset unk_101F1CC  +
call sub_100918E  +
cmp [ebp+hMenu] 0 +
jnz loc_1013BF3  +
test [ebp+dwStyle] 40000000h +
jz loc_1013BF3  +
mov [ebp+hMenu] esi +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_1013C02  +
mov eax offset unk_101FBAC +
mov [ebp+arg_4] eax +
push [ebp+lpParam]  +
mov ecx [eax+4] +
push hInstance  +
mov esi [eax+0Ch] +
push [ebp+hMenu]  +
mov edx [eax] +
push [ebp+hWndParent]  +
mov eax [eax+8] +
sub esi ecx +
push esi  +
sub eax edx +
push eax  +
movzx eax [ebp+arg_18] +
push ecx  +
push edx  +
push [ebp+dwStyle]  +
push [ebp+lpWindowName]  +
push eax  +
push [ebp+dwExStyle]  +
call ds:CreateWindowExW  +
pop esi  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
call sub_101316A  +
or dword ptr [esi+28h] 0FFFFFFFFh +
xor ebx ebx +
push 5Ch  +
lea eax [esi+34h] +
push ebx  +
push eax  +
mov dword ptr [esi] offset off_100813C +
mov [esi+2Ch] bl +
mov [esi+90h] bl +
mov [esi+30h] ebx +
mov byte ptr [esi+91h] 1 +
call memset  +
add esp 0Ch +
mov [esi+94h] ebx +
mov [esi+9Ch] bl +
mov [esi+98h] ebx +
mov [esi+9Dh] bl +
mov [esi+9Eh] bl +
mov [esi+0A0h] ebx +
mov [esi+0A4h] bl +
mov [esi+0A5h] bl +
mov [esi+0A6h] bl +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov eax ds:DefWindowProcW +
push esi  +
mov esi ecx +
push edi  +
xor edi edi +
mov [esi+4] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+20h] eax +
mov dword ptr [esi] offset off_1008164 +
mov [esi+24h] edi +
mov [esi+34h] edi +
lea ecx [esi+4Ch] +
mov [esi+48h] edi +
call sub_1013C42  +
lea eax [esi+0F4h] +
mov [eax] edi +
mov [eax+10h] edi +
lea ecx [esi+13Ch] +
mov [eax+24h] edi +
call sub_1002FCD  +
lea ecx [esi+140h] +
call sub_1002FCD  +
lea ecx [esi+144h] +
call sub_1002FCD  +
lea ecx [esi+148h] +
call sub_1002FCD  +
lea ecx [esi+170h] +
call sub_1002FCD  +
mov ecx esi +
call sub_1012531  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1013829  +
test byte ptr [ebp+8] 1 +
jz loc_1013D5C  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
lea eax [esi+138h] +
cmp ecx [eax] +
jz loc_1013E01  +
cmp byte ptr [esi+14Ch] 0 +
mov [eax] ecx +
jz loc_1013E01  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1013AE3  +
push dword ptr [eax]  +
mov edi ds:SetWindowTextW +
push dword ptr [esi+24h]  +
call edi  +
mov ecx [ebp+arg_0] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1013B2D  +
push dword ptr [eax]  +
push dword ptr [esi+50h]  +
call edi  +
mov ecx [ebp+arg_0] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1013B08  +
push dword ptr [eax]  +
push dword ptr [esi+0F4h]  +
call edi  +
mov ecx [ebp+arg_0] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
push 5  +
push dword ptr [esi+50h]  +
call ds:ShowWindow  +
push dword ptr [esi+4]  +
call sub_100FEB6  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov edi ecx +
push offset dword_101F10C  +
lea ecx [ebp-10h] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_10115E8  +
push dword ptr [ebp+8]  +
mov esi [ebp-10h] +
push dword ptr [esi-0Ch]  +
mov ecx edi +
push esi  +
call sub_10129B8  +
lea ecx [esi-10h] +
call sub_10018D0  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1020458 0 +
push esi  +
push edi  +
mov esi ecx +
jnz loc_1013E77  +
mov dword_1020458 offset aSyslink +
lea eax [esi+24h] +
push eax  +
mov ecx offset a0_0 +
call sub_1009538  +
push [ebp+arg_C]  +
movzx edi ax +
call sub_100CD40  +
cmp [ebp+lpWindowName] 0 +
jnz loc_1013E9A  +
and [ebp+lpWindowName] 0 +
push [ebp+lpParam]  +
mov ecx esi +
push edi  +
push [ebp+hMenu]  +
push [ebp+dwExStyle]  +
push eax  +
push [ebp+lpWindowName]  +
push [ebp+arg_4]  +
push [ebp+hWndParent]  +
call sub_1013BA7  +
pop edi  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
call sub_1001939  +
mov esi ecx +
lea ebx [esi+4] +
push dword ptr [ebx]  +
call ds:GetDC  +
xor edi edi +
mov [ebp-10h] eax +
cmp eax edi +
jz loc_1013F1B  +
push 4  +
push eax  +
call sub_100F9E2  +
push edi  +
push dword ptr [ebp-10h]  +
mov [esi+11Ch] eax +
call sub_100F9E2  +
push dword ptr [ebp-10h]  +
mov [esi+120h] eax +
push dword ptr [ebx]  +
call ds:ReleaseDC  +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call ds:SetRect  +
mov dword ptr [ebp-10h] 20h +
call sub_100FBEB  +
test al al +
jz loc_1013F40  +
mov dword ptr [ebp-10h] 400020h +
push edi  +
push ecx  +
mov eax esp +
mov [ebp-24h] esp +
push dword ptr [ebp-10h]  +
mov dword ptr [eax] 24h +
push 56000000h  +
push edi  +
push ecx  +
mov eax esp +
mov [ebp-24h] esp +
lea ecx [ebp-34h] +
mov [eax] ecx +
push dword ptr [ebx]  +
lea ecx [esi+24h] +
push 1  +
push esi  +
call sub_10116BB  +
push edi  +
push ecx  +
mov eax esp +
mov [ebp-24h] esp +
push dword ptr [ebp-10h]  +
mov dword ptr [eax] 25h +
push 46010000h  +
push edi  +
push ecx  +
mov eax esp +
lea ecx [ebp-34h] +
mov [eax] ecx +
mov [ebp-24h] esp +
push dword ptr [ebx]  +
lea edi [esi+4Ch] +
mov ecx edi +
call sub_1013E5B  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
mov byte ptr [esi+0DCh] 1 +
mov byte ptr [esi+0EAh] 1 +
call sub_101272E  +
mov ecx eax +
call sub_101272E  +
mov eax [eax] +
mov [esi+0ECh] eax +
lea eax [ebp-14h] +
push eax  +
push 2  +
mov byte ptr [esi+0F0h] 1 +
call sub_100F54D  +
mov eax [ebp-14h] +
mov [edi+98h] eax +
lea eax [ebp-14h] +
push eax  +
push 1  +
mov byte ptr [edi+9Dh] 1 +
call sub_100F54D  +
mov eax [ebp-14h] +
push 0  +
push ecx  +
mov [ebp-24h] esp +
mov [edi+94h] eax +
mov eax esp +
push dword ptr [ebp-10h]  +
mov byte ptr [edi+9Ch] 1 +
push 56000000h  +
push 0  +
push ecx  +
mov dword ptr [eax] 27h +
mov eax esp +
mov [ebp-24h] esp +
lea ecx [ebp-34h] +
mov [eax] ecx +
push dword ptr [ebx]  +
lea ecx [esi+0F4h] +
push 1  +
push esi  +
call sub_10116BB  +
mov edi offset dword_101F10C +
push edi  +
lea ecx [ebp-24h] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
push edi  +
lea ecx [ebp-20h] +
call sub_1001865  +
push edi  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1001865  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_1013AE3  +
push dword ptr [eax]  +
mov edi ds:SetWindowTextW +
push dword ptr [esi+24h]  +
call edi  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
push dword ptr [esi+140h]  +
push dword ptr [esi+50h]  +
call edi  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_1013B08  +
push dword ptr [eax]  +
push dword ptr [esi+0F4h]  +
call edi  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov eax [esi+11Ch] +
test eax eax +
jz loc_10140D9  +
push 1  +
push eax  +
lea ecx [esi+24h] +
call sub_1010C11  +
push 1  +
push dword ptr [esi+11Ch]  +
lea ecx [esi+0F4h] +
call sub_1010C11  +
mov eax [esi+120h] +
test eax eax +
jz loc_10140F1  +
push 1  +
lea ecx [esi+50h] +
push eax  +
mov [ecx+4] eax +
call sub_1010C11  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
call sub_1013AE3  +
push dword ptr [eax]  +
push dword ptr [ebx]  +
call edi  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
push 5  +
push dword ptr [esi+50h]  +
call ds:ShowWindow  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [esi+14Ch] 1 +
call sub_10018D0  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
xor eax eax +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+13Ch] +
call sub_100BA90  +
cmp byte ptr [esi+14Ch] 0 +
jz loc_101418F  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1013AE3  +
push dword ptr [eax]  +
push dword ptr [esi+24h]  +
call ds:SetWindowTextW  +
mov ecx [ebp+arg_0] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
push [ebp+arg_0]  +
lea edi [esi+140h] +
mov ecx edi +
call sub_100BA90  +
cmp byte ptr [esi+14Ch] 0 +
jz loc_10141CE  +
push dword ptr [edi]  +
push dword ptr [esi+50h]  +
call ds:SetWindowTextW  +
push dword ptr [esi+4]  +
call sub_100FEB6  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
push [ebp+arg_0]  +
lea edi [esi+148h] +
mov ecx edi +
call sub_100BA90  +
cmp byte ptr [esi+14Ch] 0 +
jz loc_1014209  +
push dword ptr [edi]  +
push dword ptr [esi+0F4h]  +
call ds:SetWindowTextW  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+170h] +
push edi  +
push [ebp+arg_0]  +
call sub_10130FB  +
mov ebx [ebp+arg_4] +
test al al +
jnz loc_1014240  +
cmp ebx [esi+174h] +
jz loc_10142EB  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_100BA90  +
mov ecx esi +
mov [esi+174h] ebx +
call sub_10126A1  +
push dword ptr [edi]  +
call ds:LoadLibraryW  +
mov [esi+16Ch] eax +
test eax eax +
jz loc_10142C5  +
movzx ecx word ptr [esi+174h] +
push 0  +
push 10h  +
push 10h  +
push 1  +
push ecx  +
push eax  +
call ds:LoadImageW  +
mov [esi+124h] eax +
test eax eax +
jnz loc_10142EB  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_10142EB  +
test byte ptr [eax+1Ch] 4 +
jz loc_10142EB  +
push dword ptr [esi+174h]  +
mov edi [edi] +
push edi  +
call ds:__imp_GetLastError  +
push eax  +
mov eax off_101F0C0 +
push offset dword_10142F4  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B1CA  +
jmp loc_10142EB  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_10142EB  +
test byte ptr [eax+1Ch] 4 +
jz loc_10142EB  +
push dword ptr [edi]  +
push offset dword_10142F4  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF78  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset dword_101BD58  +
mov eax large fs:0 +
push eax  +
mov eax 10C0h +
call __alloca_probe  +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov edi [ebp+arg_C] +
mov esi ecx +
xor ebx ebx +
cmp [esi+0A5h] bl +
jz loc_10143FA  +
cmp [esi+0A6h] bl +
jz loc_10143FA  +
push offset dword_101F10C  +
lea ecx [ebp+var_10CC] +
call sub_1001865  +
push 10B4h  +
lea eax [ebp+var_10C4] +
push ebx  +
push eax  +
mov [ebp+var_4] ebx +
call memset  +
mov eax [esi+28h] +
mov [ebp+var_10C4] eax +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
lea ecx [esi+4] +
mov [ebp+lParam] 9 +
mov [esi+0A6h] bl +
call sub_10132A6  +
lea eax [ebp+var_1058] +
push eax  +
lea ecx [ebp+var_10CC] +
call sub_1001D49  +
mov eax [ebp+var_10CC] +
cmp [eax-0Ch] ebx +
jz loc_10143F2  +
xor esi esi +
inc esi  +
push esi  +
lea ecx [ebp+var_10CC] +
call sub_1003A2D  +
push eax  +
call sub_100ADC4  +
mov ecx [ebp+var_10CC] +
add ecx 0FFFFFFF0h +
mov [edi] esi +
call sub_10018D0  +
xor eax eax +
jmp loc_10143FF  +
lea ecx [eax-10h] +
call sub_10018D0  +
xor eax eax +
mov [edi] ebx +
inc eax  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_10019B3  +
leave   +
retn 10h  +
***
call sub_1001939  +
xor edi edi +
mov [ebp-14h] edi +
mov esi [ebp+8] +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
mov [ebp-4] edi +
call sub_1010520  +
mov [ebp-4] edi +
xor ebx ebx +
mov edi offset dword_101F10C +
inc ebx  +
push edi  +
lea ecx [ebp-10h] +
mov [ebp-14h] ebx +
call sub_1001865  +
push edi  +
lea ecx [ebp+0Ch] +
mov [ebp-4] ebx +
call sub_1001865  +
mov byte ptr [ebp-4] 2 +
push 0  +
push offset aA  +
mov ecx esi +
call sub_1012A34  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_1014496  +
push 0  +
push offset aA_0  +
mov ecx esi +
call sub_1012A34  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_10145C6  +
push edi  +
push 3Eh  +
mov ecx esi +
call sub_101021C  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_10145C6  +
push edi  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
call sub_10131E0  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_100BA1D  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 2 +
call sub_10018D0  +
mov eax [esi] +
mov eax [eax-0Ch] +
sub eax ebx +
dec eax  +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call sub_101318C  +
push eax  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 4 +
call sub_100BA1D  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 2 +
call sub_10018D0  +
push 0  +
push offset aA_1  +
lea ecx [ebp+0Ch] +
call sub_1012A34  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_1014533  +
push 0  +
push offset aA_2  +
lea ecx [ebp+0Ch] +
call sub_1012A34  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_10145C6  +
push edi  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_10131E0  +
mov eax [eax] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp-10h] +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_10033D1  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 2 +
call sub_10018D0  +
mov eax [ebp+0Ch] +
mov eax [eax-0Ch] +
sub eax edi +
sub eax 4 +
push eax  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_101318C  +
push eax  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 6 +
call sub_100BA1D  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 2 +
call sub_10018D0  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
call sub_101076A  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 7 +
call sub_100BA90  +
mov ecx [ebp-28h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 2 +
call sub_10018D0  +
jmp loc_1014468  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+1Ch] edi +
jnz loc_10147BC  +
mov edx [ebp+0Ch] +
mov eax 204Eh +
cmp edx eax +
jnz loc_101465C  +
lea edx [ebp+1Ch] +
push edx  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push eax  +
mov [ebp+1Ch] esi +
call sub_1013512  +
mov ecx [ebp+18h] +
mov [ecx] eax +
cmp [ebp+1Ch] edi +
jz loc_10147BC  +
mov eax esi +
jmp loc_10147BE  +
cmp edx 14h +
jnz loc_101466B  +
mov eax [ebp+18h] +
xor esi esi +
inc esi  +
mov [eax] esi +
jmp loc_1014655  +
***
cmp edx 0Fh +
jnz loc_1014688  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push edx  +
mov [ebp+1Ch] esi +
call sub_10132E6  +
jmp loc_1014647  +
***
mov eax 200h +
cmp edx eax +
jnz loc_10146A9  +
lea edx [ebp+1Ch] +
push edx  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push eax  +
mov [ebp+1Ch] esi +
call sub_101369A  +
jmp loc_1014647  +
***
mov eax 2A3h +
cmp edx eax +
jnz loc_10146CD  +
lea edx [ebp+1Ch] +
push edx  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push eax  +
mov [ebp+1Ch] esi +
call sub_1013751  +
jmp loc_1014647  +
***
cmp edx 7 +
jnz loc_10146ED  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push edx  +
mov [ebp+1Ch] esi +
call sub_101377A  +
jmp loc_1014647  +
***
cmp edx 8 +
jnz loc_101470D  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push edx  +
mov [ebp+1Ch] esi +
call sub_10137D4  +
jmp loc_1014647  +
***
cmp edx 0Ah +
jnz loc_101472D  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push edx  +
mov [ebp+1Ch] esi +
call sub_10137D4  +
jmp loc_1014647  +
***
mov eax 100h +
cmp edx eax +
jnz loc_1014751  +
lea edx [ebp+1Ch] +
push edx  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push eax  +
mov [ebp+1Ch] esi +
call sub_101333C  +
jmp loc_1014647  +
***
mov eax 87h +
cmp edx eax +
jnz loc_1014774  +
lea edx [ebp+1Ch] +
push edx  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10133AE  +
mov ecx [ebp+18h] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_10147BE  +
mov eax 201h +
cmp edx eax +
jnz loc_1014798  +
lea edx [ebp+1Ch] +
push edx  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push eax  +
mov [ebp+1Ch] esi +
call sub_1013252  +
jmp loc_1014647  +
***
mov eax 202h +
cmp edx eax +
jnz loc_10147BC  +
lea edx [ebp+1Ch] +
push edx  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push eax  +
mov [ebp+1Ch] esi +
call sub_1014309  +
jmp loc_1014647  +
***
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
call sub_1001939  +
mov ebx ecx +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
call sub_1002AAB  +
and dword ptr [ebp-4] 0 +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_1014420  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
push dword ptr [ebx]  +
call ds:GetDC  +
mov [ebp+8] eax +
test eax eax +
jz loc_1014863  +
mov ecx ebx +
call sub_1012975  +
push eax  +
push dword ptr [ebp+8]  +
call ds:SelectObject  +
mov esi [ebp+10h] +
lea edi [ebp-20h] +
movs   +
movs   +
push 510h  +
movs   +
lea eax [ebp-20h] +
push eax  +
mov eax [ebp-10h] +
movs   +
push dword ptr [eax-0Ch]  +
push eax  +
push dword ptr [ebp+8]  +
call ds:DrawTextW  +
cmp dword ptr [ebp+14h] 0 +
mov ecx [ebp-14h] +
mov eax [ebp+10h] +
mov [eax+0Ch] ecx +
jz loc_1014858  +
mov ecx [ebp-20h] +
mov [eax] ecx +
mov ecx [ebp-18h] +
mov [eax+8] ecx +
push dword ptr [ebp+8]  +
push dword ptr [ebx]  +
call ds:ReleaseDC  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
call __EH_epilog3  +
retn 10h  +
***
call sub_1001939  +
mov edi ecx +
push offset dword_101F10C  +
lea ecx [ebp-10h] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_10115E8  +
push dword ptr [ebp+0Ch]  +
mov esi [ebp-10h] +
push dword ptr [ebp+8]  +
mov ecx edi +
push dword ptr [esi-0Ch]  +
push esi  +
call sub_10147C9  +
lea ecx [esi-10h] +
call sub_10018D0  +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+Rect] +
mov ebx ecx +
push eax  +
push dword ptr [ebx+4]  +
call ds:GetClientRect  +
lea esi [ebp+Rect] +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
lea esi [ebp+Rect] +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
lea eax [ebp+var_20] +
lea esi [ebx+0F4h] +
push eax  +
mov ecx esi +
call sub_1013E0B  +
mov eax [ebp+var_18] +
sub eax [ebp+var_20] +
mov ecx [ebp+Rect.right] +
sub ecx eax +
sub ecx 1Eh +
mov [ebp+var_20] ecx +
add ecx eax +
mov [ebp+var_18] ecx +
call sub_100FBEB  +
test al al +
jnz loc_101493C  +
xor edi edi +
push edi  +
lea eax [ebp+var_20] +
push eax  +
mov ecx esi +
call sub_1010C31  +
jmp loc_101495B  +
lea eax [ebp+var_50] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+Rect.right]  +
call sub_100FE85  +
push 0  +
lea eax [ebp+var_50] +
push eax  +
mov ecx esi +
call sub_1010C31  +
xor edi edi +
mov eax [ebp+var_20] +
add eax 0FFFFFFE5h +
mov [ebp+var_8] eax +
mov eax [ebx+13Ch] +
mov [ebp+var_10] 1Eh +
cmp [eax-0Ch] edi +
jle loc_1014985  +
push edi  +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebx+24h] +
call sub_1011626  +
jmp loc_101498E  +
mov eax [ebp+var_C] +
add eax 10h +
mov [ebp+var_4] eax +
push edi  +
lea eax [ebp+var_10] +
lea esi [ebx+24h] +
push eax  +
mov ecx esi +
call sub_1010C31  +
call sub_100FBEB  +
test al al +
jnz loc_10149AB  +
lea eax [ebp+var_10] +
jmp loc_10149BE  +
lea eax [ebp+var_50] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+Rect.right]  +
call sub_100FE85  +
lea eax [ebp+var_50] +
push edi  +
push eax  +
mov ecx esi +
call sub_1010C31  +
lea esi [ebp+var_10] +
lea edi [ebp+var_40] +
movs   +
movs   +
movs   +
movs   +
mov ecx ebx +
mov [ebp+var_40] 1Eh +
call sub_10128EE  +
mov [ebp+var_3C] eax +
mov eax [ebp+Rect.right] +
add eax 0FFFFFFF6h +
mov [ebp+var_38] eax +
xor esi esi +
push esi  +
lea eax [ebp+var_40] +
add ebx 50h +
push eax  +
mov ecx ebx +
call sub_101487B  +
call sub_100FBEB  +
test al al +
jnz loc_1014A0A  +
lea eax [ebp+var_40] +
jmp loc_1014A1D  +
lea eax [ebp+var_50] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
push [ebp+Rect.right]  +
call sub_100FE85  +
lea eax [ebp+var_50] +
push esi  +
push eax  +
mov ecx ebx +
call sub_1010C31  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+1Ch] +
sub eax 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jz loc_1014AD8  +
dec eax  +
jnz loc_1014B43  +
mov eax [ebp+0Ch] +
cmp eax 14h +
jnz loc_1014A64  +
mov eax [ebp+18h] +
xor esi esi +
inc esi  +
jmp loc_1014BC1  +
cmp eax 0Fh +
jnz loc_1014A8A  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 0Fh  +
push dword ptr [ebp+8]  +
call sub_1014CCB  +
mov ecx [ebp+18h] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_1014B45  +
cmp eax 8 +
jnz loc_1014AB3  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push 8  +
push dword ptr [ebp+8]  +
mov [ebp+1Ch] esi +
call sub_101294C  +
mov ecx [ebp+18h] +
mov [ecx] eax +
jmp loc_1014B3D  +
cmp eax 7 +
jnz loc_1014B43  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push 7  +
push dword ptr [ebp+8]  +
mov [ebp+1Ch] esi +
call sub_101294C  +
jmp loc_1014AA9  +
***
mov ecx [ebp+0Ch] +
xor esi esi +
inc esi  +
cmp ecx esi +
jnz loc_1014AFD  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push esi  +
call sub_1013ED1  +
mov ecx [ebp+18h] +
mov [ecx] eax +
mov eax esi +
jmp loc_1014B45  +
mov edi [ebp+18h] +
cmp ecx 2 +
jnz loc_1014B4C  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
mov [ebp+1Ch] esi +
push 2  +
call sub_1012849  +
cmp dword ptr [ebp+1Ch] 0 +
mov [edi] eax +
jnz loc_1014AF9  +
mov ecx [ebp+0Ch] +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp+1Ch] esi +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_10138FB  +
mov [edi] eax +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_1014AF9  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
cmp ecx 5 +
jnz loc_1014B67  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_10148CE  +
mov ecx edi +
jmp loc_1014AF7  +
***
cmp ecx 0Fh +
jnz loc_1014B80  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_1010E44  +
jmp loc_1014B63  +
***
mov eax 318h +
cmp ecx eax +
jnz loc_1014B9D  +
lea ecx [ebp+1Ch] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push eax  +
call sub_101313E  +
jmp loc_1014B63  +
***
cmp ecx 317h +
jnz loc_1014BBA  +
push esi  +
push dword ptr [ebp+10h]  +
mov ecx ebx +
call sub_1012BE4  +
mov eax edi +
and dword ptr [eax] 0 +
jmp loc_1014AF9  +
***
cmp ecx 14h +
jnz loc_1014BC8  +
mov eax edi +
mov [eax] esi +
jmp loc_1014AF9  +
***
mov eax 138h +
cmp ecx eax +
jnz loc_1014BEB  +
lea ecx [ebp+1Ch] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
mov [ebp+1Ch] esi +
push eax  +
call sub_1012576  +
jmp loc_1014B1B  +
***
mov eax 135h +
cmp ecx eax +
jnz loc_1014C0E  +
lea ecx [ebp+1Ch] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
mov [ebp+1Ch] esi +
push eax  +
call sub_1014C9D  +
jmp loc_1014B1B  +
***
mov eax 44Ah +
cmp ecx eax +
jnz loc_1014C2E  +
lea ecx [ebp+1Ch] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10125EB  +
jmp loc_1014B63  +
***
cmp ecx 111h +
jz loc_1014BB0  +
cmp ecx 4Eh +
jnz loc_1014C59  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp+1Ch] esi +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_1014D0D  +
jmp loc_1014B1B  +
***
cmp ecx 87h +
jz loc_1014BBF  +
cmp ecx 128h +
jnz loc_1014C74  +
mov [edi] esi +
jmp loc_1014B26  +
***
mov eax 202h +
cmp ecx eax +
jnz loc_1014B26  +
lea ecx [ebp+1Ch] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1014F9E  +
jmp loc_1014B63  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_C] +
xor eax eax +
inc eax  +
cmp [ebp+arg_4] 0 +
mov [ecx] eax +
jz loc_1014CBA  +
push eax  +
push [ebp+arg_4]  +
call ds:SetBkMode  +
push 5  +
call ds:GetStockObject  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+hWnd] +
lea eax [ebp+Paint] +
push eax  +
push esi  +
call ds:BeginPaint  +
lea eax [ebp+Paint] +
push eax  +
push esi  +
call ds:EndPaint  +
mov ecx [ebp+var_4] +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_10019B3  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov edx [eax+8] +
cmp edx 0FFFFFFFCh +
jz loc_1014D2A  +
cmp edx 0FFFFFFFEh +
jz loc_1014D2A  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
jmp loc_1014D36  +
add eax 7Ch +
push eax  +
push dword ptr [ecx+4]  +
call sub_10101F7  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
cmp edx [ecx+40h] +
jnz loc_1014D55  +
xor al al +
cmp [ecx+44h] al +
jnz loc_1014D57  +
mov al 1 +
mov byte ptr [ecx+44h] 1 +
mov [ecx+40h] edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1014D78  +
mov eax 54000000h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1014D90  +
push 20h  +
pop eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push edi  +
mov edi [ebp+hbr] +
test edi edi +
jz loc_1014E05  +
lea eax [ebp+rc] +
push eax  +
push dword ptr [ecx+4]  +
call ds:GetClientRect  +
call sub_100FC80  +
test al al +
jz loc_1014E05  +
push 5  +
call ds:GetSysColor  +
push eax  +
call ds:CreateSolidBrush  +
mov [ebp+hbr] eax +
test eax eax +
jz loc_1014E05  +
push esi  +
mov esi ds:SelectObject +
lea eax [ebp+hbr] +
push eax  +
push edi  +
call esi  +
push [ebp+hbr]  +
mov [ebp+var_4] eax +
lea eax [ebp+rc] +
push eax  +
push edi  +
call ds:FillRect  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
call esi  +
push [ebp+hbr]  +
call ds:DeleteObject  +
pop esi  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [eax+8] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_8] eax +
push 0  +
lea eax [ebp+var_10] +
mov [ebp+var_10] ecx +
lea edi [ebx+4] +
push eax  +
mov ecx edi +
mov [ebp+var_C] esi +
call sub_1010C31  +
mov ecx ebx +
call sub_101291D  +
add esi eax +
push 0  +
lea eax [ebp+var_10] +
push eax  +
mov ecx edi +
mov [ebp+var_4] esi +
call sub_1010C31  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
cmp byte ptr [esi+3Ch] 0 +
jnz loc_1014E7E  +
push 8  +
pop eax  +
jmp loc_1014ED5  +
and [ebp+Point.x] 0 +
push edi  +
xor eax eax +
lea edi [ebp+Point.y] +
stos   +
stos   +
stos   +
mov eax [esi+2Ch] +
test eax eax +
jz loc_1014ED1  +
dec eax  +
lea edi [esi+24h] +
push eax  +
mov ecx edi +
call sub_100B320  +
test eax eax +
jz loc_1014ED1  +
push eax  +
mov ecx edi +
call sub_10035F8  +
mov eax [eax] +
test eax eax +
jz loc_1014ED1  +
lea ecx [ebp+Point] +
push ecx  +
push dword ptr [eax+4]  +
call ds:GetWindowRect  +
lea eax [ebp+Point] +
push eax  +
lea ecx [esi+4] +
call sub_10126FE  +
mov eax [ebp-4] +
add eax 8 +
jmp loc_1014ED4  +
push 5  +
pop eax  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea esi [ecx+24h] +
mov eax [esi] +
mov [ebp-4] eax +
test eax eax +
jz loc_1014F0C  +
lea eax [ebp-4] +
push eax  +
mov ecx esi +
call sub_10035D6  +
mov ecx [eax] +
test ecx ecx +
jz loc_1014F06  +
call sub_1013008  +
cmp dword ptr [ebp-4] 0 +
jnz loc_1014EF0  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp [esi+8] eax +
jbe loc_1014F3F  +
push eax  +
mov ecx esi +
call sub_100B320  +
test eax eax +
jz loc_1014F3F  +
push eax  +
mov ecx esi +
call sub_10035F8  +
mov eax [eax] +
test eax eax +
jnz loc_1014F41  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword ptr [ecx+2Ch] 0 +
jbe loc_1014F76  +
push 0  +
lea eax [ecx+24h] +
push eax  +
call sub_1014F14  +
test eax eax +
jz loc_1014F93  +
mov ecx eax +
call sub_1012675  +
push eax  +
call ds:SetFocus  +
jmp loc_1014F93  +
lea eax [ebp+var_4] +
push eax  +
add ecx 4 +
call sub_101272E  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push dword ptr [eax]  +
call ds:PostMessageW  +
xor eax eax +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
add ecx 4 +
call sub_101272E  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push dword ptr [eax]  +
call ds:PostMessageW  +
xor eax eax +
inc eax  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+wParam]  +
mov esi ecx +
call sub_1014D99  +
push [ebp+lParam]  +
mov ecx esi +
push [ebp+wParam]  +
push [ebp+Msg]  +
call sub_10126DB  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp [ebp+arg_4] 1 +
push esi  +
mov esi ecx +
jz loc_101506D  +
cmp byte ptr [esi+3Dh] 0 +
jz loc_1015014  +
mov byte ptr [esi+3Dh] 0 +
jmp loc_101506D  +
push ebx  +
push edi  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
lea edi [esi+24h] +
mov eax [edi] +
push 5  +
pop ebx  +
mov byte ptr [ebp+arg_4+3] 1 +
mov [ebp+var_4] eax +
test eax eax +
jz loc_101506B  +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
call sub_10035D6  +
mov eax [eax] +
test eax eax +
jz loc_1015065  +
cmp byte ptr [ebp+arg_4+3] 0 +
jz loc_1015053  +
mov byte ptr [ebp+arg_4+3] 0 +
jmp loc_1015056  +
add ebx 8 +
push eax  +
lea eax [ebp+Rect] +
push eax  +
push ebx  +
mov ecx esi +
call sub_1014E0F  +
mov ebx eax +
cmp [ebp+var_4] 0 +
jnz loc_1015036  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_101508F  +
push 80004005h  +
call loc_1008FB2  +
push esi  +
cmp eax [ecx] +
jnz loc_101509A  +
mov edx [eax] +
mov [ecx] edx +
jmp loc_10150A1  +
mov edx [eax+4] +
mov esi [eax] +
mov [edx] esi +
cmp eax [ecx+4] +
jnz loc_10150AE  +
mov edx [eax+4] +
mov [ecx+4] edx +
jmp loc_10150B6  +
mov edx [eax] +
mov esi [eax+4] +
mov [edx+4] esi +
push eax  +
call sub_1003034  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005DDE  +
test byte ptr [ebp+8] 1 +
jz loc_10150E0  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov esi [ebp+0Ch] +
and dword ptr [ebp-10h] 0 +
mov ecx esi +
call sub_1010488  +
mov ecx [ebp+8] +
push eax  +
call sub_1010258  +
mov esi [esi] +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
mov edi [esi-0Ch] +
mov dword ptr [ebp-10h] 1 +
call sub_1001AC6  +
push eax  +
push dword ptr [ebp+10h]  +
push edi  +
push esi  +
push dword ptr [ebp+8]  +
call sub_1010696  +
mov eax [ebp+8] +
add esp 18h +
call __EH_epilog3  +
retn 0Ch  +
***
call sub_1001939  +
mov esi ecx +
mov [ebp-10h] esi +
push offset dword_101F10C  +
call sub_1001865  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_10029F9  +
test al al +
jnz loc_101517F  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1003429  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10204E8 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_10151A8  +
and dword_10204E8 0 +
lea eax [esi+20h] +
push eax  +
mov ecx offset unk_10204B8 +
call sub_1009538  +
push [ebp+arg_C]  +
movzx edi ax +
call sub_1014D67  +
push [ebp+arg_10]  +
mov ebx eax +
call sub_1014D81  +
cmp [ebp+lpWindowName] 0 +
jnz loc_10151D5  +
and [ebp+lpWindowName] 0 +
push [ebp+lpParam]  +
mov ecx esi +
push edi  +
push [ebp+hMenu]  +
push eax  +
push ebx  +
push [ebp+lpWindowName]  +
push [ebp+arg_4]  +
push [ebp+hWndParent]  +
call sub_1009351  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
call sub_1001939  +
mov edi [ebp+8] +
test edi edi +
jz loc_1015924  +
mov ecx edi +
call sub_100B6EE  +
test al al +
jnz loc_1015226  +
push dword ptr [ebp+10h]  +
mov ecx edi +
call sub_100C771  +
mov esi offset dword_101F10C +
push esi  +
lea ecx [ebp-38h] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp-34h] +
call sub_1001865  +
push esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1001865  +
push esi  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 2 +
call sub_1001865  +
push esi  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 3 +
call sub_1001865  +
push esi  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 4 +
call sub_1001865  +
push esi  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call sub_1001865  +
push esi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 6 +
call sub_1001865  +
push esi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 7 +
call sub_1001865  +
push esi  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 8 +
call sub_1001865  +
push esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 9 +
call sub_1001865  +
push esi  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 0Ah +
call sub_1001865  +
push esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 0Bh +
call sub_1001865  +
push esi  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 0Ch +
call sub_1001865  +
mov ecx dword_101F0F8 +
and dword ptr [ebp-30h] 0 +
mov byte ptr [ebp-4] 0Dh +
mov byte ptr [ebp+13h] 0 +
test ecx ecx +
jz loc_10152FB  +
call sub_100CB1D  +
mov [ebp+13h] al +
mov ecx edi +
call sub_100B714  +
xor ebx ebx +
inc ebx  +
mov edi offset dword_10080D4 +
cmp eax ebx +
jbe loc_10153E4  +
push 3AFAh  +
call sub_100198C  +
push eax  +
lea ecx [ebp-10h] +
call sub_100B9CE  +
mov eax [ebp-10h] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp-18h] +
push eax  +
call sub_10033D1  +
mov ecx [ebp+8] +
call sub_100B714  +
cmp eax ebx +
jbe loc_1015408  +
mov ecx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
push ebx  +
call sub_100BAF1  +
test al al +
jz loc_10153D2  +
lea eax [ebp-14h] +
push eax  +
call sub_10108A7  +
push edi  +
lea ecx [ebp-18h] +
call sub_10033AB  +
cmp byte ptr [ebp+13h] 0 +
jz loc_10153BA  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
lea eax [ebx-1] +
push eax  +
call sub_100B75B  +
push esi  +
lea ecx [ebp-3Ch] +
call sub_1001865  +
lea eax [ebp-3Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-30h]  +
mov byte ptr [ebp-4] 0Eh +
call sub_10108ED  +
mov eax [ebp-3Ch] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp-18h] +
push eax  +
call sub_10033D1  +
mov ecx [ebp-3Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0Dh +
call sub_10018D0  +
jmp loc_10153C9  +
mov eax [ebp-14h] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp-18h] +
push eax  +
call sub_10033D1  +
push edi  +
lea ecx [ebp-18h] +
call sub_10033AB  +
mov ecx [ebp+8] +
inc ebx  +
call sub_100B714  +
cmp ebx eax +
jnb loc_1015408  +
jmp loc_1015344  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1015408  +
test byte ptr [eax+1Ch] 4 +
jz loc_1015408  +
push offset dword_1008188  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
cmp byte ptr [ebp+13h] 0 +
jz loc_1015500  +
mov ecx [ebp+8] +
call sub_100B70A  +
test eax eax +
jbe loc_10154DC  +
push 3AF9h  +
call sub_100198C  +
push eax  +
lea ecx [ebp-10h] +
call sub_100B9CE  +
mov eax [ebp-10h] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp-20h] +
push eax  +
call sub_10033D1  +
mov ecx [ebp+8] +
xor ebx ebx +
call sub_1010B0D  +
test eax eax +
jbe loc_1015500  +
mov ecx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
push ebx  +
call sub_100BAC8  +
test al al +
jz loc_10154CA  +
lea eax [ebp-14h] +
push eax  +
call sub_10108A7  +
push edi  +
lea ecx [ebp-20h] +
call sub_10033AB  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
push ebx  +
call sub_100B71D  +
push esi  +
lea ecx [ebp-3Ch] +
call sub_1001865  +
lea eax [ebp-3Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-30h]  +
mov byte ptr [ebp-4] 0Fh +
call sub_10108ED  +
mov eax [ebp-3Ch] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp-20h] +
push eax  +
call sub_10033D1  +
push edi  +
lea ecx [ebp-20h] +
call sub_10033AB  +
mov ecx [ebp-3Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0Dh +
call sub_10018D0  +
mov ecx [ebp+8] +
inc ebx  +
call sub_1010B0D  +
cmp ebx eax +
jnb loc_1015500  +
jmp loc_1015456  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1015500  +
test byte ptr [eax+1Ch] 4 +
jz loc_1015500  +
push offset dword_1008188  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov ebx [ebp+8] +
mov ecx ebx +
call sub_100B714  +
test eax eax +
jbe loc_101553A  +
lea eax [ebp-10h] +
push eax  +
push 0  +
mov ecx ebx +
call sub_100BAF1  +
lea eax [ebp-10h] +
push eax  +
call sub_10108A7  +
mov eax [ebp-10h] +
cmp dword ptr [eax-0Ch] 0 +
jz loc_101553A  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
call sub_1010A15  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
call sub_100BB1A  +
lea eax [ebp-10h] +
push eax  +
call sub_10108A7  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_1010A15  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
call sub_100BB52  +
lea eax [ebp-10h] +
push eax  +
call sub_10108A7  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_1010A15  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
call sub_100BB6E  +
lea eax [ebp-10h] +
push eax  +
call sub_10108A7  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_1010A15  +
mov eax [ebp-34h] +
cmp dword ptr [eax-0Ch] 0 +
jle loc_10155E3  +
push 3AE9h  +
call sub_100198C  +
push eax  +
lea ecx [ebp-10h] +
call sub_100B9CE  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_1010A15  +
mov esi [ebp-24h] +
mov ecx ebx +
call sub_10019AA  +
push eax  +
push dword ptr [ebp-34h]  +
lea eax [ebp-1Ch] +
push esi  +
push eax  +
call sub_10031AA  +
add esp 10h +
jmp loc_101561B  +
push 3AEAh  +
call sub_100198C  +
push eax  +
lea ecx [ebp-10h] +
call sub_100B9CE  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_1010A15  +
mov esi [ebp-24h] +
mov ecx ebx +
call sub_10019AA  +
push eax  +
lea eax [ebp-1Ch] +
push esi  +
push eax  +
call sub_10031AA  +
add esp 0Ch +
mov eax [ebp-38h] +
mov esi [ebp+0Ch] +
xor bl bl +
cmp dword ptr [eax-0Ch] 0 +
jle loc_1015636  +
lea eax [ebp-38h] +
push eax  +
mov ecx esi +
call sub_100BA1D  +
inc bl  +
mov eax [ebp-2Ch] +
cmp dword ptr [eax-0Ch] 0 +
jle loc_10156A7  +
test bl bl +
jz loc_101567C  +
push edi  +
push esi  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10150EC  +
lea ecx [ebp-2Ch] +
push ecx  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 10h +
call sub_101076A  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 11h +
call sub_100BA90  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-3Ch] +
jmp loc_1015699  +
lea eax [ebp-2Ch] +
push eax  +
push esi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_101076A  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 12h +
call sub_100BA90  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0Dh +
call sub_10018D0  +
mov bl 1 +
mov eax [ebp-1Ch] +
cmp dword ptr [eax-0Ch] 0 +
jle loc_1015745  +
test bl bl +
jz loc_1015700  +
push edi  +
push esi  +
lea eax [ebp-40h] +
push eax  +
call sub_10150EC  +
lea ecx [ebp-1Ch] +
push ecx  +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
mov byte ptr [ebp-4] 13h +
call sub_101076A  +
push edi  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 14h +
call sub_10150EC  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 15h +
call sub_100BA90  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-3Ch] +
jmp loc_101572C  +
lea eax [ebp-1Ch] +
push eax  +
push esi  +
lea eax [ebp-40h] +
push eax  +
call sub_101076A  +
push edi  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 16h +
call sub_10150EC  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 17h +
call sub_100BA90  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-40h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0Dh +
call sub_10018D0  +
mov bl 1 +
mov eax [ebp-28h] +
cmp dword ptr [eax-0Ch] 0 +
jle loc_10157EE  +
test bl bl +
jz loc_10157A9  +
push edi  +
push esi  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10150EC  +
lea ecx [ebp-28h] +
push ecx  +
push eax  +
lea eax [ebp-40h] +
push eax  +
mov byte ptr [ebp-4] 18h +
call sub_101076A  +
push edi  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 19h +
call sub_10150EC  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1Ah +
call sub_100BA90  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-40h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-3Ch] +
jmp loc_10157E0  +
lea eax [ebp-28h] +
push eax  +
push esi  +
lea eax [ebp-40h] +
push eax  +
call sub_101076A  +
push edi  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 1Bh +
call sub_10150EC  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1Ch +
call sub_100BA90  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-40h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0Dh +
call sub_10018D0  +
mov bl 1 +
mov ecx [ebp+8] +
call sub_100B714  +
cmp eax 1 +
setnbe byte ptr [ebp+0Fh]  +
test bl bl +
jz loc_1015809  +
push edi  +
mov ecx esi +
call sub_10033AB  +
cmp byte ptr [ebp+13h] 0 +
mov ebx [ebp-20h] +
jz loc_1015862  +
mov ecx [ebp+8] +
call sub_1010B0D  +
test eax eax +
setnbe byte ptr [ebp+0Bh]  +
cmp byte ptr [ebp+0Fh] 0 +
jz loc_101584F  +
push edi  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp+10h] +
push eax  +
call sub_10150EC  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1Dh +
call sub_100BBBE  +
mov ecx [ebp+10h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0Dh +
call sub_10018D0  +
cmp byte ptr [ebp+0Bh] 0 +
jz loc_101588D  +
push dword ptr [ebx-0Ch]  +
mov ecx esi +
push ebx  +
call sub_10033D1  +
jmp loc_101588D  +
cmp byte ptr [ebp+0Fh] 0 +
jz loc_101588D  +
lea eax [ebp-18h] +
push eax  +
push esi  +
lea eax [ebp+8] +
push eax  +
call sub_101076A  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1Eh +
call sub_100BA90  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-44h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-48h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-4Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-28h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
lea ecx [ebx-10h] +
call sub_10018D0  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-50h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-2Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-34h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-38h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
call __EH_epilog3  +
retn 0Ch  +
***
call sub_1001939  +
mov [ebp-28h] ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-2Ch] 0 +
mov esi offset dword_101F10C +
push esi  +
lea ecx [ebp-18h] +
call sub_1001865  +
xor edi edi +
inc edi  +
push esi  +
lea ecx [ebp-14h] +
mov [ebp-4] edi +
call sub_1001865  +
push esi  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_1001865  +
mov ebx [ebp+8] +
mov ecx ebx +
mov byte ptr [ebp-4] 3 +
call sub_1002FCD  +
mov ecx [ebp-28h] +
add ecx 24h +
mov eax [ecx] +
mov [ebp-2Ch] edi +
mov [ebp-30h] ecx +
mov [ebp-28h] eax +
test eax eax +
jz loc_1015B50  +
mov esi offset loc_1015B7C +
jmp loc_10159A3  +
mov ecx [ebp-30h] +
lea eax [ebp-28h] +
push eax  +
call sub_10035D6  +
mov edi [eax] +
test edi edi +
jz loc_1015B46  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call sub_1013AE3  +
push eax  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 4 +
call sub_100BA1D  +
mov ecx [ebp-34h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 3 +
call sub_10018D0  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx edi +
call sub_1013B2D  +
push eax  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_1014420  +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 6 +
call sub_100BA1D  +
mov ecx [ebp-38h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-3Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 3 +
call sub_10018D0  +
lea eax [ebp-40h] +
push eax  +
mov ecx edi +
call sub_1013B08  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 7 +
call sub_100BA1D  +
mov ecx [ebp-40h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 3 +
call sub_10018D0  +
push esi  +
lea ecx [ebp-24h] +
call sub_1015148  +
push esi  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 8 +
call sub_1015148  +
push esi  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 9 +
call sub_1015148  +
lea eax [ebp-18h] +
push eax  +
push ebx  +
lea eax [ebp-58h] +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call sub_101076A  +
lea ecx [ebp-1Ch] +
push ecx  +
push eax  +
lea eax [ebp-54h] +
push eax  +
mov byte ptr [ebp-4] 0Bh +
call sub_101076A  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 0Ch +
push ecx  +
push eax  +
lea eax [ebp-50h] +
push eax  +
call sub_101076A  +
lea ecx [ebp-20h] +
push ecx  +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
mov byte ptr [ebp-4] 0Dh +
call sub_101076A  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
lea eax [ebp-48h] +
push eax  +
mov byte ptr [ebp-4] 0Eh +
call sub_101076A  +
lea ecx [ebp-24h] +
push ecx  +
push eax  +
lea eax [ebp-44h] +
push eax  +
mov byte ptr [ebp-4] 0Fh +
call sub_101076A  +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 10h +
call sub_100BA90  +
mov ecx [ebp-44h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-48h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-4Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-50h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-54h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-58h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 3 +
call sub_10018D0  +
cmp dword ptr [ebp-28h] 0 +
jnz loc_10159A0  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov eax ebx +
call __EH_epilog3  +
retn 4  +
***
call sub_1001939  +
mov [ebp-24h] ecx +
mov eax off_101F0C0 +
mov esi offset off_101F0C0 +
cmp eax esi +
jz loc_1015BBD  +
test byte ptr [eax+1Ch] 4 +
jz loc_1015BBD  +
push offset dword_1008188  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax off_101F0C0 +
mov ebx [ebp+8] +
test ebx ebx +
jz loc_1015D9A  +
mov edi [ebp+0Ch] +
test edi edi +
jz loc_1015D9A  +
mov esi offset dword_101F10C +
push esi  +
lea ecx [ebp-14h] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp-10h] +
call sub_1001865  +
push esi  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1001865  +
push esi  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 2 +
call sub_1001865  +
push esi  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 3 +
call sub_1001865  +
and dword ptr [ebp-20h] 0 +
mov ecx edi +
mov byte ptr [ebp-4] 4 +
call sub_1003510  +
mov ecx edi +
mov esi eax +
call sub_10019AA  +
push eax  +
mov ecx ebx +
call sub_101268A  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_100BB36  +
lea eax [ebp-14h] +
push eax  +
call sub_10108A7  +
lea eax [ebp-14h] +
push eax  +
mov ecx ebx +
call sub_101414F  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-24h] +
lea eax [ebp-1Ch] +
push eax  +
push edi  +
call sub_10151FA  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx ebx +
call sub_1014199  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_100BB8A  +
test al al +
jz loc_1015C92  +
push dword ptr [ebp-20h]  +
lea eax [ebp-18h] +
push eax  +
mov ecx ebx +
call sub_1014214  +
jmp loc_1015CB6  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1015CB6  +
test byte ptr [eax+1Ch] 4 +
jz loc_1015CB6  +
push offset dword_1008188  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov ecx ebx +
test esi esi +
jnz loc_1015CC9  +
push esi  +
call sub_1013D68  +
push 3AE5h  +
jmp loc_1015D22  +
cmp esi 1 +
jnz loc_1015D16  +
push esi  +
call sub_1013D68  +
mov ecx edi +
call sub_100B6F7  +
cmp al 65h +
jnz loc_1015CE6  +
push 3AE7h  +
jmp loc_1015D22  +
push 3AE6h  +
call sub_100198C  +
push eax  +
lea ecx [ebp-10h] +
call sub_100B9CE  +
mov esi [ebp-10h] +
mov ecx edi +
call sub_100B6F7  +
movzx eax al +
push eax  +
lea eax [ebp-10h] +
push esi  +
push eax  +
call sub_10031AA  +
add esp 0Ch +
jmp loc_1015D30  +
push 2  +
call sub_1013D68  +
push 3AE8h  +
call sub_100198C  +
push eax  +
lea ecx [ebp-10h] +
call sub_100B9CE  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
call sub_10141D9  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1015D5F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1015D5F  +
push offset dword_1008188  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov al 1 +
jmp loc_1015DB8  +
cmp eax esi +
jz loc_1015DB6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015DB6  +
push offset dword_1008188  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
xor al al +
call __EH_epilog3  +
retn 0Ch  +
***
call sub_1001939  +
mov [ebp-38h] ecx +
mov eax off_101F0C0 +
mov ebx offset off_101F0C0 +
mov edi offset dword_1008188 +
cmp eax ebx +
jz loc_1015DFB  +
test byte ptr [eax+1Ch] 4 +
jz loc_1015DFB  +
push edi  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov esi offset dword_101F10C +
push esi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-0Dh] 0 +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp-2Ch] +
call sub_1001865  +
push esi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call sub_1001865  +
push esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_1001865  +
mov esi [ebp+0Ch] +
and dword ptr [ebp-1Ch] 0 +
mov byte ptr [ebp-4] 3 +
test esi esi +
jnz loc_1015E98  +
mov eax off_101F0C0 +
cmp eax ebx +
jz loc_1015E60  +
test byte ptr [eax+1Ch] 4 +
jz loc_1015E60  +
push edi  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
xor bl bl +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-28h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-2Ch] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-30h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov al bl +
call __EH_epilog3  +
retn 8  +
mov ecx esi +
call sub_100B2F1  +
test al al +
jnz loc_1015EAA  +
mov ecx esi +
call sub_100B5C8  +
mov eax off_101F0C0 +
cmp eax ebx +
jz loc_1015EDA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1015EDA  +
mov eax [ebp+8] +
push dword ptr [eax+8]  +
mov ecx esi +
call sub_100B35B  +
push eax  +
mov eax off_101F0C0 +
push edi  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B125  +
mov ecx esi +
call sub_100B56E  +
mov [ebp-34h] eax +
mov eax [ebp+8] +
mov eax [eax] +
mov [ebp-20h] eax +
test eax eax +
jz loc_1016019  +
and dword ptr [ebp-14h] 0 +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-18h] 0 +
call sub_100B35B  +
test eax eax +
jbe loc_1016006  +
mov eax off_101F0C0 +
cmp eax ebx +
jz loc_1015F2F  +
test byte ptr [eax+1Ch] 4 +
jz loc_1015F2F  +
push dword ptr [ebp-1Ch]  +
push edi  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
inc dword ptr [ebp-1Ch]  +
push dword ptr [ebp-18h]  +
mov ecx [ebp+0Ch] +
call sub_100B42A  +
mov esi eax +
test esi esi +
jz loc_1015FB1  +
mov ecx esi +
call sub_1003510  +
cmp dword ptr [ebp-14h] 0 +
jnz loc_1015F52  +
cmp eax 2 +
jz loc_1015F67  +
cmp dword ptr [ebp-14h] 1 +
jnz loc_1015F5D  +
cmp eax 1 +
jz loc_1015F67  +
cmp dword ptr [ebp-14h] 2 +
jnz loc_1015FD4  +
test eax eax +
jnz loc_1015FD4  +
cmp dword ptr [ebp-20h] 0 +
jz loc_1015FE9  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call sub_10035D6  +
mov eax [eax] +
test eax eax +
jz loc_1015F92  +
push dword ptr [ebp-34h]  +
mov ecx [ebp-38h] +
push esi  +
push eax  +
call sub_1015B83  +
mov byte ptr [ebp-0Dh] 1 +
jmp loc_1015FD4  +
mov eax off_101F0C0 +
cmp eax ebx +
jz loc_1015FD4  +
test byte ptr [eax+1Ch] 4 +
jz loc_1015FD4  +
push edi  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
jmp loc_1015FD4  +
mov eax off_101F0C0 +
cmp eax ebx +
jz loc_1015FD4  +
test byte ptr [eax+1Ch] 4 +
jz loc_1015FD4  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push edi  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B125  +
mov ecx [ebp+0Ch] +
inc dword ptr [ebp-18h]  +
call sub_100B35B  +
cmp [ebp-18h] eax +
jnb loc_1016006  +
jmp loc_1015F0C  +
mov eax off_101F0C0 +
cmp eax ebx +
jz loc_101600B  +
test byte ptr [eax+1Ch] 4 +
jz loc_101600B  +
push edi  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax off_101F0C0 +
inc dword ptr [ebp-14h]  +
cmp dword ptr [ebp-14h] 3 +
jnb loc_101603B  +
jmp loc_1015EF8  +
mov eax off_101F0C0 +
cmp eax ebx +
jz loc_1016067  +
test byte ptr [eax+1Ch] 4 +
jz loc_101603B  +
push edi  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax off_101F0C0 +
cmp eax ebx +
jz loc_1016067  +
test byte ptr [eax+1Ch] 4 +
jz loc_1016067  +
mov eax [ebp+8] +
push dword ptr [eax+8]  +
mov ecx [ebp+0Ch] +
call sub_100B35B  +
push eax  +
mov eax off_101F0C0 +
push edi  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B125  +
mov bl [ebp-0Dh] +
jmp loc_1015E62  +
***
call sub_1001939  +
mov ebx ecx +
mov edi [ebp+0Ch] +
xor esi esi +
cmp edi esi +
jnz loc_10160B6  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_10160AF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10160AF  +
push offset dword_1008188  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
xor al al +
jmp loc_1016447  +
mov eax [ebp+8] +
mov eax [eax+8] +
mov ecx edi +
mov [ebp-44h] esi +
mov [ebp-40h] esi +
mov [ebp-3Ch] esi +
mov [ebp-38h] esi +
mov [ebp-24h] eax +
call sub_100B35B  +
mov [ebp-10h] eax +
mov [ebp-28h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
cmp eax esi +
jz loc_10160F4  +
mov ecx edi +
call sub_100B2F1  +
test al al +
jnz loc_10160F4  +
mov ecx edi +
call sub_100B5C8  +
mov eax off_101F0C0 +
mov edi offset off_101F0C0 +
cmp eax edi +
jz loc_1016120  +
test byte ptr [eax+1Ch] 4 +
jz loc_1016120  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-24h]  +
push offset dword_1008188  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B125  +
mov eax [ebp-10h] +
xor ecx ecx +
push 4  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_1003218  +
pop ecx  +
mov [ebp-2Ch] eax +
test eax eax +
jnz loc_1016162  +
mov eax off_101F0C0 +
cmp eax edi +
jz loc_10160AF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10160AF  +
push offset dword_1008188  +
push 1Ah  +
jmp loc_10160A4  +
mov esi [ebp-10h] +
mov ecx esi +
shl ecx 2 +
push ecx  +
push 0  +
push eax  +
call memset  +
mov ecx [ebp+0Ch] +
add esp 0Ch +
call sub_100B56E  +
and dword ptr [ebp-14h] 0 +
mov [ebp-34h] eax +
test esi esi +
jbe loc_101626F  +
push dword ptr [ebp-14h]  +
mov ecx [ebp+0Ch] +
call sub_100B42A  +
mov [ebp-30h] eax +
test eax eax +
jz loc_10161E1  +
and dword ptr [ebp-20h] 0 +
cmp dword ptr [ebp-24h] 0 +
jbe loc_10161E1  +
push dword ptr [ebp-20h]  +
mov ecx ebx +
push dword ptr [ebp+8]  +
call sub_1014F14  +
mov esi eax +
test esi esi +
jz loc_10161D6  +
mov ecx esi +
call sub_101267E  +
mov ecx [ebp-30h] +
mov edi eax +
call sub_10019AA  +
cmp eax edi +
jz loc_1016226  +
mov edi offset off_101F0C0 +
inc dword ptr [ebp-20h]  +
mov eax [ebp-20h] +
cmp eax [ebp-24h] +
jb loc_10161A9  +
mov edx [ebp-1Ch] +
mov eax [ebp-14h] +
mov ecx [ebp-2Ch] +
inc dword ptr [ebp-1Ch]  +
mov [ecx+edx*4] eax +
mov eax off_101F0C0 +
cmp eax edi +
jz loc_1016216  +
test byte ptr [eax+1Ch] 4 +
jz loc_1016216  +
push offset dword_1008188  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax off_101F0C0 +
inc dword ptr [ebp-14h]  +
mov ecx [ebp-14h] +
cmp ecx [ebp-10h] +
jnb loc_1016274  +
jmp loc_101618D  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1016257  +
test byte ptr [eax+1Ch] 4 +
jz loc_1016257  +
mov ecx esi +
call sub_101267E  +
push eax  +
mov eax off_101F0C0 +
push offset dword_1008188  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
push dword ptr [ebp-34h]  +
mov ecx ebx +
push dword ptr [ebp-30h]  +
push esi  +
call sub_1015B83  +
inc dword ptr [ebp-28h]  +
mov edi offset off_101F0C0 +
jmp loc_1016211  +
mov eax off_101F0C0 +
mov esi [ebp-24h] +
cmp [ebp-28h] esi +
jnb loc_1016385  +
cmp eax edi +
jz loc_101629C  +
test byte ptr [eax+1Ch] 4 +
jz loc_101629C  +
push offset dword_1008188  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
test esi esi +
jbe loc_1016385  +
mov [ebp-30h] esi +
push dword ptr [ebp-18h]  +
mov ecx ebx +
push dword ptr [ebp+8]  +
call sub_1014F14  +
mov [ebp-14h] eax +
test eax eax +
jz loc_101637C  +
xor edi edi +
cmp [ebp-10h] edi +
jbe loc_10162F8  +
mov ecx [ebp+0Ch] +
push edi  +
call sub_100B42A  +
mov esi eax +
test esi esi +
jz loc_10162F2  +
mov ecx [ebp-14h] +
call sub_101267E  +
mov ecx esi +
mov [ebp-28h] eax +
call sub_10019AA  +
mov ecx [ebp-28h] +
cmp eax ecx +
jz loc_1016379  +
inc edi  +
cmp edi [ebp-10h] +
jb loc_10162C6  +
push dword ptr [ebp-18h]  +
mov ecx [ebp+8] +
call sub_100B320  +
test eax eax +
jz loc_1016350  +
mov ecx [ebp+8] +
push eax  +
call sub_1015079  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1016342  +
test byte ptr [eax+1Ch] 4 +
jz loc_1016342  +
mov ecx [ebp-14h] +
call sub_101267E  +
push eax  +
mov eax off_101F0C0 +
push offset dword_1008188  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
mov eax [ebp-14h] +
push dword ptr [eax+4]  +
call ds:DestroyWindow  +
jmp loc_101637C  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_101637C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101637C  +
push dword ptr [ebp-18h]  +
push offset dword_1008188  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
jmp loc_101637C  +
inc dword ptr [ebp-18h]  +
dec dword ptr [ebp-30h]  +
jnz loc_10162A7  +
xor edi edi +
mov [ebp+8] edi +
cmp [ebp-1Ch] edi +
jbe loc_101643C  +
push 178h  +
call sub_1001E13  +
pop ecx  +
mov [ebp-30h] eax +
xor esi esi +
mov [ebp-4] esi +
cmp eax esi +
jz loc_10163B3  +
mov ecx eax +
call sub_1013CBB  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-14h] esi +
test esi esi +
jz loc_101642C  +
mov eax [ebp-2Ch] +
push dword ptr [eax+edi*4]  +
mov ecx [ebp+0Ch] +
call sub_100B42A  +
mov edi eax +
test edi edi +
jz loc_1016423  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebx+24h] +
call sub_1003614  +
mov eax [ebx+48h] +
push 0  +
push ecx  +
mov ecx esp +
mov [ebp-30h] esp +
push 10020h  +
push 54000000h  +
push offset WindowName  +
push ecx  +
add eax 14h +
mov [ecx] eax +
mov eax esp +
lea ecx [ebp-44h] +
mov [eax] ecx +
mov [ebp-30h] esp +
push dword ptr [ebx+4]  +
mov ecx esi +
call sub_101518E  +
push dword ptr [ebp-34h]  +
inc dword ptr [ebx+48h]  +
push edi  +
push esi  +
mov ecx ebx +
call sub_1015B83  +
jmp loc_101642C  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
mov edi [ebp+8] +
inc edi  +
mov [ebp+8] edi +
cmp edi [ebp-1Ch] +
jb loc_1016393  +
push dword ptr [ebp-2Ch]  +
call sub_10019EE  +
pop ecx  +
mov al 1 +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax off_101F0C0 +
mov esi offset off_101F0C0 +
cmp eax esi +
jz loc_1016484  +
test byte ptr [eax+1Ch] 4 +
jz loc_1016484  +
push offset dword_1008188  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_10164E8  +
mov ecx ebx +
call sub_1002B7A  +
mov ecx ebx +
mov [ebp+arg_0] eax +
call sub_100B2F1  +
test al al +
jnz loc_10164A7  +
mov ecx ebx +
call sub_100B5C8  +
push ebx  +
lea eax [edi+24h] +
push eax  +
mov ecx edi +
call sub_1016074  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1014D41  +
mov ecx offset unk_101F238 +
call sub_1017970  +
mov eax off_101F0C0 +
cmp eax esi +
jz loc_10164E8  +
test byte ptr [eax+1Ch] 4 +
jz loc_10164E8  +
push offset dword_1008188  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_1001939  +
mov esi ecx +
mov eax off_101F0C0 +
mov edi offset off_101F0C0 +
cmp eax edi +
jz loc_101652D  +
test byte ptr [eax+1Ch] 4 +
jz loc_101652D  +
push offset dword_1008188  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax off_101F0C0 +
mov ecx [ebp+10h] +
xor ebx ebx +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
mov [ebp-10h] ebx +
cmp ecx ebx +
jz loc_101654E  +
mov ecx [ecx] +
mov [ebp-10h] ecx +
cmp ecx ebx +
jnz loc_101656A  +
cmp eax edi +
jz loc_101656A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101656A  +
push offset dword_1008188  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
call sub_100FBEB  +
lea edi [esi+24h] +
push edi  +
mov ecx esi +
call sub_1005E28  +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_10165D3  +
mov [ebp+10h] ebx +
call sub_100B35B  +
test eax eax +
jbe loc_10165D3  +
push 178h  +
call sub_1001E13  +
pop ecx  +
mov ecx eax +
mov [ebp-14h] ecx +
mov [ebp-4] ebx +
cmp ecx ebx +
jz loc_10165AB  +
call sub_1013CBB  +
jmp loc_10165AD  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-14h] eax +
cmp eax ebx +
jz loc_10165C3  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_1003614  +
mov ecx [ebp-10h] +
inc dword ptr [ebp+10h]  +
call sub_100B35B  +
cmp [ebp+10h] eax +
jb loc_101658D  +
mov eax [edi] +
mov [ebp+10h] eax +
cmp eax ebx +
jz loc_1016626  +
lea eax [ebp+10h] +
push eax  +
mov ecx edi +
call sub_10035D6  +
mov ecx [eax] +
cmp ecx ebx +
jz loc_1016621  +
mov eax [esi+48h] +
push ebx  +
push ecx  +
mov edx esp +
mov [ebp-14h] esp +
push 10020h  +
push 54000000h  +
push offset WindowName  +
add eax 14h +
mov [edx] eax +
push ecx  +
mov eax esp +
lea edx [ebp-24h] +
mov [ebp-14h] esp +
mov [eax] edx +
push dword ptr [esi+4]  +
call sub_101518E  +
inc dword ptr [esi+48h]  +
cmp [ebp+10h] ebx +
jnz loc_10165DC  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push edi  +
call sub_1015DC5  +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_1016645  +
call sub_1002B7A  +
push eax  +
mov ecx esi +
call sub_1014D41  +
mov eax off_101F0C0 +
mov edi offset off_101F0C0 +
cmp eax edi +
jz loc_101666B  +
test byte ptr [eax+1Ch] 4 +
jz loc_101666B  +
push offset dword_1008188  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov ecx offset unk_101F238 +
call sub_1017970  +
mov byte ptr [esi+3Ch] 1 +
mov eax off_101F0C0 +
cmp eax edi +
jz loc_101669A  +
test byte ptr [eax+1Ch] 4 +
jz loc_101669A  +
push offset dword_1008188  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
xor eax eax +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+1Ch] +
sub eax 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jz loc_10166FE  +
dec eax  +
jnz loc_10167C0  +
cmp dword ptr [ebp+0Ch] 14h +
jnz loc_10166D3  +
mov eax [ebp+18h] +
xor esi esi +
inc esi  +
jmp loc_1016772  +
cmp dword ptr [ebp+0Ch] 0Fh +
jnz loc_10167C0  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 0Fh  +
push dword ptr [ebp+8]  +
call sub_1014CCB  +
mov ecx [ebp+18h] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_10167C2  +
mov ecx [ebp+0Ch] +
xor esi esi +
inc esi  +
cmp ecx esi +
jnz loc_1016726  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push esi  +
call sub_10164F4  +
mov ecx [ebp+18h] +
mov [ecx] eax +
mov eax esi +
jmp loc_10167C2  +
mov edi [ebp+18h] +
cmp ecx 2 +
jnz loc_1016737  +
mov byte ptr [ebx+3Ch] 0 +
and dword ptr [edi] 0 +
jmp loc_101679F  +
cmp ecx 0Fh +
jnz loc_1016752  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_1010E44  +
mov ecx edi +
jmp loc_101671D  +
***
cmp ecx 5 +
jnz loc_101676B  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_1014FF7  +
jmp loc_101674E  +
***
cmp ecx 14h +
jnz loc_1016776  +
mov eax edi +
mov [eax] esi +
jmp loc_101671F  +
***
mov eax 138h +
cmp ecx eax +
jnz loc_10167C9  +
lea ecx [ebp+18h] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
mov [ebp+18h] esi +
push eax  +
call sub_1014C9D  +
cmp dword ptr [ebp+18h] 0 +
mov [edi] eax +
jnz loc_101671F  +
mov ecx [ebp+0Ch] +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp+18h] esi +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_10138FB  +
cmp dword ptr [ebp+18h] 0 +
mov [edi] eax +
jnz loc_101671F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov eax 318h +
cmp ecx eax +
jnz loc_10167E9  +
lea ecx [ebp+18h] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1014FCD  +
jmp loc_101674E  +
***
mov eax 317h +
cmp ecx eax +
jnz loc_1016809  +
lea ecx [ebp+18h] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1014FCD  +
jmp loc_101674E  +
***
cmp ecx 87h +
jz loc_1016770  +
cmp ecx 7 +
jnz loc_1016831  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_1014F4B  +
jmp loc_101674E  +
***
mov eax 44Ah +
cmp ecx eax +
jnz loc_1016851  +
lea ecx [ebp+18h] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1016994  +
jmp loc_101674E  +
***
cmp ecx 4Eh +
jnz loc_1016870  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp+18h] esi +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_1014D0D  +
jmp loc_1016794  +
***
mov eax 202h +
cmp ecx eax +
jnz loc_101679F  +
lea ecx [ebp+18h] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1014F9E  +
jmp loc_101674E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [ecx+70h] +
mov ecx [ecx+74h] +
push esi  +
push edi  +
lea esi [ebp+arg_4] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
sub [eax] edx +
sub [eax+8] edx +
sub [eax+4] ecx +
sub [eax+0Ch] ecx +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax 26h +
jnz loc_10168EC  +
push 0  +
push 0  +
push 115h  +
push dword ptr [ecx+4]  +
call ds:PostMessageW  +
xor eax eax +
inc eax  +
jmp loc_1016955  +
cmp eax 28h +
jnz loc_10168F7  +
push 0  +
push 1  +
jmp loc_10168D9  +
cmp eax 27h +
jnz loc_1016907  +
push 0  +
push 7  +
push 114h  +
jmp loc_10168DE  +
cmp eax 25h +
jnz loc_1016912  +
push 0  +
push 6  +
jmp loc_1016900  +
cmp eax 21h +
jnz loc_101691D  +
push 0  +
push 2  +
jmp loc_10168D9  +
cmp eax 22h +
jnz loc_1016928  +
push 0  +
push 3  +
jmp loc_10168D9  +
cmp eax 24h +
jnz loc_1016933  +
push 0  +
push 6  +
jmp loc_10168D9  +
cmp eax 23h +
jnz loc_101693E  +
push 0  +
push 7  +
jmp loc_10168D9  +
cmp eax 9 +
jnz loc_101694D  +
mov ecx offset unk_101F238 +
call sub_1017F4C  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add ecx 24h +
mov dword ptr [eax] 64h +
call sub_1014E68  +
mov ecx [ebp+arg_4] +
add eax 17h +
mov [ecx] eax +
mov al 1 +
pop ebp  +
retn 8  +
***
add ecx 24h +
jmp loc_1014EDD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
mov esi ecx +
call sub_100F54D  +
push [ebp+var_4]  +
push 1  +
push dword ptr [esi+4]  +
call sub_100FD5D  +
xor eax eax +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+ppv] 0 +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_10081F4  +
push 15h  +
push 0  +
push offset stru_1008204  +
mov ebx ecx +
call CoCreateInstance  +
mov esi eax +
test esi esi +
jl loc_1016A33  +
push 3  +
pop eax  +
sub esp 10h +
mov edi esp +
mov word ptr [ebp+var_14] ax +
mov [ebp+var_C] 2Ah +
mov eax [ebp+ppv] +
lea esi [ebp+var_14] +
movs   +
movs   +
mov ecx [eax] +
movs   +
sub esp 10h +
movs   +
mov edi esp +
mov esi offset dword_1008214 +
movs   +
movs   +
push 0  +
push 0FFFFFFFCh  +
push dword ptr [ebx+4]  +
movs   +
push eax  +
movs   +
call dword ptr [ecx+18h]  +
mov esi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi offset dword_1008234 +
lea edi [ebp+var_34] +
movs   +
movs   +
movs   +
movs   +
mov esi offset dword_1008214 +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi offset dword_1008224 +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
lea eax [ebp+ppv] +
push eax  +
push offset stru_10081F4  +
movs   +
push 15h  +
xor edi edi +
push edi  +
push offset stru_1008204  +
mov ebx ecx +
mov [ebp+ppv] edi +
call CoCreateInstance  +
mov esi eax +
cmp esi edi +
jl loc_1016ABC  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 3  +
lea edx [ebp+var_34] +
push edx  +
push edi  +
push 0FFFFFFFCh  +
push dword ptr [ebx+4]  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10019B3  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
lea esi [edi+4] +
push esi  +
call ds:InterlockedDecrement  +
mov eax [esi] +
test eax eax +
jnz loc_1016B10  +
push edi  +
call sub_10019EE  +
pop ecx  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_1016B78 +
xor eax eax +
cmps   +
jz loc_1016B51  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_1016B68 +
xor eax eax +
cmps   +
jz loc_1016B51  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
mov eax 80004002h +
jmp loc_1016B61  +
mov eax [ebp+8] +
mov ecx [ebp+10h] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push dword ptr [ecx]  +
call ds:SendMessageW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+24h] +
call sub_1016454  +
push 0  +
push 0  +
push 44Ah  +
push dword ptr [esi+28h]  +
call ds:PostMessageW  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
call sub_10126DB  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea eax [ebx+78h] +
push eax  +
push dword ptr [ebx+4]  +
call ds:GetClientRect  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
xor esi esi +
push eax  +
mov ecx ebx +
mov [ebp+var_4] esi +
call sub_101695E  +
lea eax [ebx+80h] +
mov ecx [eax] +
cmp ecx [ebp+var_4] +
jg loc_1016C35  +
mov ecx [ebp+var_4] +
push esi  +
mov [eax] ecx +
mov [ebp+var_14] esi +
mov [ebp+var_C] esi +
sub esp 10h +
add ecx 0FFFFFFFDh +
mov [ebp+var_10] ecx +
mov [ebp+var_18] 3 +
mov edi esp +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
lea eax [ebp+var_28] +
push eax  +
mov ecx ebx +
movs   +
call sub_1016899  +
push eax  +
lea ecx [ebx+28h] +
call sub_1010C31  +
lea ecx [ebx+24h] +
call sub_1014E68  +
push 0  +
mov [ebp+var_C] eax +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
lea eax [ebp+var_28] +
push eax  +
mov ecx ebx +
movs   +
call sub_1016899  +
push eax  +
lea ecx [ebx+28h] +
call sub_1010C31  +
mov eax [ebp+var_C] +
pop edi  +
mov [ebx+84h] eax +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
push 6  +
pop ecx  +
push 1Ch  +
pop edx  +
push 6  +
xor eax eax +
lea edi [ebp+var_4C.fMask] +
stos   +
pop ecx  +
push 6  +
lea edi [ebp+var_68.fMask] +
stos   +
pop ecx  +
push 7  +
lea edi [ebp+var_30.fMask] +
stos   +
mov edi ds:GetScrollInfo +
pop eax  +
mov [ebp+var_30.fMask] eax +
mov [ebp+var_4C.fMask] eax +
mov [ebp+var_68.fMask] eax +
lea eax [ebp+var_4C] +
push eax  +
xor ebx ebx +
push ebx  +
push dword ptr [esi+4]  +
mov [ebp+var_4C.cbSize] edx +
mov [ebp+var_68.cbSize] edx +
mov [ebp+var_30.cbSize] edx +
mov [ebp+var_30.nMin] ebx +
call edi  +
lea eax [ebp+var_68] +
push eax  +
push 1  +
push dword ptr [esi+4]  +
call edi  +
cmp [ebp+var_4C.nPage] ebx +
jnz loc_1016D28  +
mov [ebp+var_1] bl +
cmp [ebp+var_4C.nMax] ebx +
jz loc_1016D2C  +
mov [ebp+var_1] 1 +
cmp [ebp+var_68.nPage] ebx +
jnz loc_1016D39  +
mov [ebp+var_2] bl +
cmp [ebp+var_68.nMax] ebx +
jz loc_1016D3D  +
mov [ebp+var_2] 1 +
mov edi ds:GetSystemMetrics +
mov eax [esi+80h] +
cmp [ebp+var_1] bl +
jz loc_1016D5C  +
cmp eax [ebp+Rect.right] +
jg loc_1016D68  +
push 3  +
call edi  +
add [ebp+Rect.bottom] eax +
jmp loc_1016D68  +
cmp eax [ebp+Rect.right] +
jle loc_1016D68  +
push 3  +
call edi  +
sub [ebp+Rect.bottom] eax +
mov eax [ebp+Rect.bottom] +
cmp [ebp+var_2] bl +
jz loc_1016D81  +
cmp [esi+84h] eax +
jg loc_1016D90  +
push 2  +
call edi  +
add [ebp+Rect.right] eax +
jmp loc_1016D90  +
cmp [esi+84h] eax +
jle loc_1016D90  +
push 2  +
call edi  +
sub [ebp+Rect.right] eax +
mov eax [esi+80h] +
mov edx [ebp+Rect.right] +
cmp eax edx +
mov edi ds:SetScrollInfo +
jle loc_1016DD1  +
mov ecx [ebp+var_4C.nPos] +
dec eax  +
mov [ebp+var_30.nMax] eax +
sub eax edx +
dec eax  +
cmp ecx eax +
mov [ebp+var_30.nPage] edx +
mov [ebp+var_30.nPos] ecx +
jle loc_1016DE2  +
push dword ptr [esi+4]  +
mov [ebp+var_4C.nPos] eax +
mov [esi+70h] eax +
call sub_100FEE7  +
mov ecx offset unk_101F238 +
call sub_1017CDD  +
jmp loc_1016DE2  +
cmp [ebp+var_1] bl +
jz loc_1016DEE  +
mov [ebp+var_30.nPos] ebx +
mov [esi+70h] ebx +
mov [ebp+var_30.nPage] ebx +
mov [ebp+var_30.nMax] ebx +
push 1  +
lea eax [ebp+var_30] +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
call edi  +
mov eax [esi+84h] +
mov edx [ebp+Rect.bottom] +
cmp eax edx +
jle loc_1016E29  +
mov ecx [ebp+var_68.nPos] +
dec eax  +
mov [ebp+var_30.nMax] eax +
sub eax edx +
dec eax  +
cmp ecx eax +
mov [ebp+var_30.nPage] edx +
mov [ebp+var_30.nPos] ecx +
jle loc_1016E3A  +
push dword ptr [esi+4]  +
mov [ebp+var_68.nPos] eax +
mov [esi+74h] eax +
call sub_100FEE7  +
mov ecx offset unk_101F238 +
call sub_1017CDD  +
jmp loc_1016E3A  +
cmp [ebp+var_2] bl +
jz loc_1016E47  +
mov [ebp+var_30.nPos] ebx +
mov [esi+74h] ebx +
mov [ebp+var_30.nPage] ebx +
mov [ebp+var_30.nMax] ebx +
push 1  +
lea eax [ebp+var_30] +
push eax  +
push 1  +
push dword ptr [esi+4]  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
push 7  +
pop edx  +
mov esi ecx +
xor eax eax +
mov ecx edx +
lea edi [ebp+var_20] +
stos   +
lea eax [ebp+var_20] +
push eax  +
xor edi edi +
push edi  +
push dword ptr [esi+4]  +
mov [ebp+var_20.cbSize] 1Ch +
mov [ebp+var_20.fMask] edx +
call ds:GetScrollInfo  +
mov ebx [ebp+var_20.nPage] +
cmp ebx edi +
jz loc_1016F35  +
mov eax [ebp+var_20.nMax] +
movzx edx [ebp+arg_4] +
mov ecx [ebp+var_20.nPos] +
sub eax ebx +
inc eax  +
sub edx edi +
mov [esi+70h] ecx +
jz loc_1016EDF  +
dec edx  +
jz loc_1016ED3  +
dec edx  +
jz loc_1016EC8  +
dec edx  +
jz loc_1016EC3  +
dec edx  +
dec edx  +
jz loc_1016EBB  +
dec edx  +
jz loc_1016EE9  +
dec edx  +
jnz loc_1016EEC  +
mov [esi+70h] eax +
jmp loc_1016EEC  +
mov eax dword ptr [ebp+arg_4] +
shr eax 10h +
jmp loc_1016EB6  +
lea edx [ecx+ebx] +
jmp loc_1016ED6  +
mov eax ecx +
sub eax ebx +
mov [esi+70h] eax +
js loc_1016EE9  +
jmp loc_1016EEC  +
lea edx [ecx+0Ah] +
cmp edx eax +
mov [esi+70h] edx +
jg loc_1016EB6  +
jmp loc_1016EEC  +
lea eax [ecx-0Ah] +
cmp eax edi +
mov [esi+70h] eax +
jge loc_1016EEC  +
mov [esi+70h] edi +
mov eax [esi+70h] +
sub ecx eax +
push 1  +
mov [ebp+var_20.nPos] eax +
lea eax [ebp+var_20] +
push eax  +
push edi  +
push dword ptr [esi+4]  +
mov ebx ecx +
mov [ebp+var_20.fMask] 4 +
call ds:SetScrollInfo  +
push 1  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push ebx  +
push dword ptr [esi+4]  +
call ds:ScrollWindowEx  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
call sub_100F54D  +
push [ebp+var_4]  +
push 1  +
push dword ptr [esi+4]  +
call sub_100FD5D  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
push 7  +
pop edx  +
mov esi ecx +
xor eax eax +
mov ecx edx +
lea edi [ebp+var_20] +
stos   +
lea eax [ebp+var_20] +
push eax  +
push 1  +
push dword ptr [esi+4]  +
mov [ebp+var_20.cbSize] 1Ch +
mov [ebp+var_20.fMask] edx +
call ds:GetScrollInfo  +
mov edi [ebp+var_20.nPage] +
xor ebx ebx +
cmp edi ebx +
jz loc_101702D  +
mov eax [ebp+var_20.nMax] +
movzx edx word ptr [ebp+dy] +
mov ecx [ebp+var_20.nPos] +
sub eax edi +
inc eax  +
sub edx ebx +
mov [esi+74h] ecx +
jz loc_1016FD4  +
dec edx  +
jz loc_1016FC8  +
dec edx  +
jz loc_1016FBD  +
dec edx  +
jz loc_1016FB8  +
dec edx  +
dec edx  +
jz loc_1016FB0  +
dec edx  +
jz loc_1016FDE  +
dec edx  +
jnz loc_1016FE1  +
mov [esi+74h] eax +
jmp loc_1016FE1  +
mov eax [ebp+dy] +
shr eax 10h +
jmp loc_1016FAB  +
lea edx [ecx+edi] +
jmp loc_1016FCB  +
mov eax ecx +
sub eax edi +
mov [esi+74h] eax +
js loc_1016FDE  +
jmp loc_1016FE1  +
lea edx [ecx+0Ah] +
cmp edx eax +
mov [esi+74h] edx +
jg loc_1016FAB  +
jmp loc_1016FE1  +
lea eax [ecx-0Ah] +
cmp eax ebx +
mov [esi+74h] eax +
jge loc_1016FE1  +
mov [esi+74h] ebx +
mov eax [esi+74h] +
xor edi edi +
sub ecx eax +
inc edi  +
push edi  +
mov [ebp+var_20.nPos] eax +
lea eax [ebp+var_20] +
push eax  +
push edi  +
push dword ptr [esi+4]  +
mov [ebp+dy] ecx +
mov [ebp+var_20.fMask] 4 +
call ds:SetScrollInfo  +
push edi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+dy]  +
push ebx  +
push dword ptr [esi+4]  +
call ds:ScrollWindowEx  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
call sub_100F54D  +
push [ebp+var_4]  +
push edi  +
push dword ptr [esi+4]  +
call sub_100FD5D  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
add ecx 4 +
call sub_101272E  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 104h  +
push dword ptr [eax]  +
call ds:PostMessageW  +
xor eax eax +
inc eax  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
call ds:SetFocus  +
mov eax [esi+4] +
mov ecx [ebp+arg_C] +
mov dword_101F4E4 eax +
xor eax eax +
inc eax  +
mov [ecx] eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
shr eax 10h +
push 0  +
test ax ax +
jge loc_10170AD  +
push 1  +
jmp loc_10170AF  +
push 0  +
push 115h  +
push dword ptr [ecx+4]  +
call ds:SendMessageW  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebp+Point] +
movs   +
movs   +
movs   +
movs   +
lea esi [ecx+4] +
lea eax [ebp+Point] +
mov [ebp+var_8] ecx +
push eax  +
mov ecx esi +
call sub_10126FE  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi]  +
call ds:GetClientRect  +
xor edx edx +
mov [ebp+var_4] edx +
mov [ebp+arg_0] edx +
cmp [ebp+arg_4] edx +
jnz loc_1017127  +
mov ecx [ebp+Point.x] +
cmp ecx edx +
jge loc_1017113  +
mov [ebp+var_4] ecx +
jmp loc_1017127  +
mov eax [ebp+var_10] +
cmp eax [ebp+Rect.right] +
jle loc_1017127  +
sub eax [ebp+Rect.right] +
sub ecx eax +
test ecx ecx +
jle loc_1017127  +
mov [ebp+var_4] eax +
mov ecx [ebp+Point.y] +
cmp ecx edx +
jge loc_1017133  +
mov [ebp+arg_0] ecx +
jmp loc_1017147  +
mov eax [ebp+var_C] +
cmp eax [ebp+Rect.bottom] +
jle loc_1017147  +
sub eax [ebp+Rect.bottom] +
sub ecx eax +
test ecx ecx +
jle loc_1017147  +
mov [ebp+arg_0] eax +
mov edi ds:GetScrollPos +
mov ebx ds:SetScrollPos +
cmp [ebp+var_4] edx +
jnz loc_101715F  +
cmp [ebp+arg_0] edx +
jnz loc_1017178  +
jmp loc_10171C4  +
push edx  +
push dword ptr [esi]  +
call edi  +
add eax [ebp+var_4] +
mov ecx [ebp+var_8] +
push 0  +
push eax  +
push 0  +
push dword ptr [esi]  +
mov [ecx+70h] eax +
call ebx  +
xor edx edx +
cmp [ebp+arg_0] edx +
jz loc_1017197  +
push 1  +
push dword ptr [esi]  +
call edi  +
add eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
push 0  +
push eax  +
push 1  +
push dword ptr [esi]  +
mov [ecx+74h] eax +
call ebx  +
xor edx edx +
mov eax [ebp+arg_0] +
push edx  +
push edx  +
neg eax  +
push eax  +
mov eax [ebp+var_4] +
neg eax  +
push eax  +
push dword ptr [esi]  +
call ds:ScrollWindow  +
lea eax [ebp+arg_4] +
push eax  +
push 0  +
call sub_100F54D  +
push [ebp+arg_4]  +
push 1  +
push dword ptr [esi]  +
call sub_100FD5D  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov eax [ecx] +
push dword ptr [eax-0Ch]  +
push eax  +
call SysAllocStringLen  +
test eax eax +
jz sub_100B34B  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+Paint] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call ds:BeginPaint  +
lea eax [ebp+Paint] +
push eax  +
push dword ptr [esi+4]  +
call ds:EndPaint  +
mov ecx esi +
call sub_1016CAF  +
mov ecx [ebp+var_4] +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_10019B3  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax+8] ecx +
mov ecx [ebp+arg_4] +
mov dword ptr [eax] offset off_1017260 +
mov dword ptr [eax+4] 1 +
mov [eax+0Ch] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
add ecx 24h +
call sub_1015931  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov edx 111h +
xor eax eax +
cmp esi edx +
ja loc_10172CA  +
jz loc_10172F2  +
cmp esi 2Bh +
jb loc_10172C0  +
cmp esi 2Fh +
jbe loc_10172F2  +
cmp esi 39h +
jz loc_10172F2  +
cmp esi 4Eh +
jz loc_10172F2  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
pop esi  +
pop ebp  +
retn 10h  +
cmp esi 114h +
jb loc_10172C0  +
cmp esi 115h +
jbe loc_10172F2  +
cmp esi 131h +
jbe loc_10172C0  +
cmp esi 138h +
jbe loc_10172F2  +
cmp esi 210h +
jnz loc_10172C0  +
push [ebp+lParam]  +
lea eax [ebp+arg_0] +
push [ebp+wParam]  +
add ecx 4 +
push esi  +
push eax  +
call sub_101272E  +
mov ecx eax +
call sub_1016B8D  +
jmp loc_10172C5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi offset dword_1008234 +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi offset dword_1008224 +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
lea eax [ebp+ppv] +
push eax  +
push offset stru_10081F4  +
movs   +
push 15h  +
xor esi esi +
push esi  +
push offset stru_1008204  +
mov ebx ecx +
mov [ebp+ppv] esi +
call CoCreateInstance  +
mov edi eax +
cmp edi esi +
jl loc_10173B6  +
push 10h  +
call sub_1001E13  +
pop ecx  +
cmp eax esi +
jz loc_101737D  +
push ebx  +
push dword ptr [ebx+4]  +
mov ecx eax +
call sub_1017236  +
mov esi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
test esi esi +
jnz loc_1017391  +
push eax  +
call dword ptr [ecx+8]  +
mov edi 8007000Eh +
jmp loc_10173B6  +
push 0  +
push esi  +
push 2  +
lea edx [ebp+var_24] +
push edx  +
push 0  +
push 0FFFFFFFCh  +
push dword ptr [ebx+4]  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10019B3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005DA7  +
test byte ptr [ebp+8] 1 +
jz loc_10173E6  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10205C0 0 +
push esi  +
push edi  +
mov esi ecx +
jnz loc_101740B  +
and dword_10205C0 0 +
lea eax [esi+20h] +
push eax  +
mov ecx offset a0_1 +
call sub_1009538  +
push [ebp+arg_C]  +
movzx edi ax +
call sub_100CD40  +
cmp [ebp+lpWindowName] 0 +
jnz loc_101742E  +
and [ebp+lpWindowName] 0 +
push [ebp+lpParam]  +
mov ecx esi +
push edi  +
push [ebp+hMenu]  +
push [ebp+dwExStyle]  +
push eax  +
push [ebp+lpWindowName]  +
push [ebp+arg_4]  +
push [ebp+hWndParent]  +
call sub_1009351  +
pop edi  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor ebx ebx +
mov esi ecx +
mov [ebp+var_10] edi +
mov [ebp+var_C] edi +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
cmp eax edi +
jz loc_101747E  +
mov ebx [eax] +
cmp ebx edi +
jnz loc_10174A2  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_10174A2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10174A2  +
push offset dword_1017530  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
push ebx  +
push ecx  +
mov eax esp +
push 20h  +
push 56000000h  +
push offset WindowName  +
push ecx  +
mov [eax] edi +
mov eax esp +
lea ecx [ebp+var_10] +
mov [eax] ecx +
push dword ptr [esi+4]  +
lea ecx [esi+24h] +
call sub_10173F2  +
mov ecx esi +
call sub_10169C1  +
test eax eax +
jge loc_10174F6  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_10174F6  +
test byte ptr [eax+1Ch] 1 +
jz loc_10174F6  +
push offset dword_1017530  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov ecx esi +
call sub_1017313  +
test eax eax +
jge loc_1017525  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1017525  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017525  +
push offset dword_1017530  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
push ebx  +
mov ebx [ebp+24h] +
push esi  +
push edi  +
lea esi [ebp+14h] +
lea edi [ebp-14h] +
movs   +
movs   +
movs   +
xor ecx ecx +
mov [ebp-18h] eax +
mov eax [ebp+28h] +
and dword ptr [eax] 0 +
movs   +
mov [ebx] cx +
push 4  +
pop ecx  +
mov edi offset dword_1008234 +
lea esi [ebp-14h] +
xor edx edx +
cmps   +
mov [ebp-20h] eax +
jnz loc_10175E3  +
push offset dword_101F10C  +
lea ecx [ebp-1Ch] +
call sub_1001865  +
lea eax [ebp-18h] +
push eax  +
mov eax [ebp-18h] +
mov ecx [eax+0Ch] +
call sub_1017275  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_100BA1D  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
lea ecx [ebp-1Ch] +
call sub_10171D0  +
mov ecx [ebp-1Ch] +
mov [ebx+8] eax +
push 8  +
pop eax  +
mov [ebx] ax +
mov eax [ebp-20h] +
add ecx 0FFFFFFF0h +
mov dword ptr [eax] 1 +
call sub_10018D0  +
jmp loc_101761F  +
push 4  +
pop ecx  +
mov edi offset dword_1008224 +
lea esi [ebp-14h] +
xor edx edx +
cmps   +
jnz loc_101761F  +
push 3  +
pop ecx  +
mov [ebx] cx +
mov ecx [ebp-18h] +
mov dword ptr [ebx+8] 100040h +
mov ecx [ecx+0Ch] +
mov edx dword_101F4E4 +
cmp edx [ecx+4] +
jnz loc_1017619  +
mov dword ptr [ebx+8] 100044h +
mov dword ptr [eax] 1 +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_10019B3  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov [ebp-4] ecx +
cmp [ebp+1Ch] eax +
jnz loc_1017780  +
mov ebx [ebp+0Ch] +
xor esi esi +
inc esi  +
cmp ebx esi +
jnz loc_1017674  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push esi  +
call sub_1017454  +
mov ecx [ebp+18h] +
mov [ecx] eax +
mov eax esi +
jmp loc_1017782  +
cmp ebx 2 +
jz loc_1017668  +
cmp ebx 0Fh +
jnz loc_1017690  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ebx  +
call sub_10171EA  +
jmp loc_1017668  +
***
cmp ebx 5 +
jnz loc_10176A7  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ebx  +
call sub_1016BF7  +
jmp loc_1017668  +
***
cmp ebx 14h +
jnz loc_10176B3  +
mov eax [ebp+18h] +
mov [eax] esi +
jmp loc_101766D  +
***
cmp ebx 138h +
jz loc_1017668  +
mov eax 318h +
cmp ebx eax +
jnz loc_10176D6  +
lea edx [ebp+18h] +
push edx  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1016BDB  +
jmp loc_1017668  +
***
mov eax 317h +
cmp ebx eax +
jnz loc_10176F4  +
lea edx [ebp+18h] +
push edx  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1016BDB  +
jmp loc_1017668  +
***
mov eax 114h +
cmp ebx eax +
jnz loc_1017712  +
lea edx [ebp+18h] +
push edx  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1016E51  +
jmp loc_1017668  +
***
mov eax 115h +
cmp ebx eax +
jnz loc_1017730  +
lea edx [ebp+18h] +
push edx  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1016F45  +
jmp loc_1017668  +
***
mov edi [ebp+18h] +
mov eax 100h +
cmp ebx eax +
jnz loc_1017789  +
lea ecx [ebp+18h] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx [ebp-4] +
push dword ptr [ebp+10h]  +
mov [ebp+18h] esi +
push eax  +
call sub_10168C8  +
cmp dword ptr [ebp+18h] 0 +
mov [edi] eax +
jnz loc_101766D  +
mov ecx [ebp-4] +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp+18h] esi +
push dword ptr [ebp+10h]  +
push ebx  +
call sub_1017296  +
cmp dword ptr [ebp+18h] 0 +
mov [edi] eax +
jnz loc_101766D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov eax 104h +
cmp ebx eax +
jnz loc_10177AC  +
lea ecx [ebp+18h] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx [ebp-4] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_101703B  +
mov ecx edi +
jmp loc_101766B  +
***
mov eax 20Ah +
cmp ebx eax +
jnz loc_10177CA  +
lea ecx [ebp+18h] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx [ebp-4] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1017097  +
jmp loc_10177A5  +
***
cmp ebx 44Bh +
jnz loc_10177E7  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
call sub_10170C8  +
mov eax edi +
and dword ptr [eax] 0 +
jmp loc_101766D  +
***
cmp ebx 87h +
jnz loc_10177F6  +
mov eax edi +
jmp loc_10176AF  +
***
mov eax 44Ah +
cmp ebx eax +
jnz loc_1017814  +
lea ecx [ebp+18h] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx [ebp-4] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1016994  +
jmp loc_10177A5  +
***
mov eax 202h +
cmp ebx eax +
jnz loc_101775E  +
lea ecx [ebp+18h] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx [ebp-4] +
push dword ptr [ebp+10h]  +
mov [ebp+18h] esi +
push eax  +
call sub_101706C  +
jmp loc_1017752  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
add ecx 160h +
cmp edx [ecx] +
mov [ecx] edx +
setnz al  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx+160h] 0Ah +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:DeleteObject +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+208h] +
mov eax [edi] +
mov dword ptr [esi+160h] 0Ah +
test eax eax +
jz loc_101789D  +
push eax  +
call ebx  +
and dword ptr [edi] 0 +
lea edi [esi+20Ch] +
mov eax [edi] +
test eax eax +
jz loc_10178AF  +
push eax  +
call ebx  +
and dword ptr [edi] 0 +
mov eax [ebp+arg_C] +
and dword ptr [esi+2ACh] 0 +
and dword ptr [eax] 0 +
call sub_1004012  +
pop edi  +
pop esi  +
pop ebx  +
test al al +
jz loc_10178CD  +
call sub_1008F78  +
mov ecx dword_101F0F8 +
call sub_100CB29  +
test al al +
jz loc_10178E4  +
push 0  +
call ds:PostQuitMessage  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_0] +
fstp  dword ptr [ecx+29Ch] +
fld  [ebp+arg_4] +
fstp  dword ptr [ecx+2A0h] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+294h] eax +
mov eax [ebp+arg_4] +
mov [ecx+298h] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
push 1  +
push [ebp+arg_4]  +
mov dword ptr [eax] 1 +
call ds:SetBkMode  +
lea eax [ebp+arg_C] +
push eax  +
push 1  +
call sub_100F54D  +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
call ds:SetTextColor  +
push 5  +
call ds:GetStockObject  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push dword ptr [esi+0D8h]  +
call ds:IsWindow  +
test eax eax +
jz loc_10179BA  +
push dword ptr [esi+0D8h]  +
call sub_100FEE7  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
call sub_100F54D  +
push [ebp+var_4]  +
push 1  +
push dword ptr [esi+0D8h]  +
call sub_100FD5D  +
lea ecx [esi+0D4h] +
call sub_1016CAF  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_4] +
xor ecx ecx +
inc ecx  +
cmp cx [eax] +
jnz loc_10179EF  +
movzx ecx word ptr [eax+2] +
test cl 1 +
jz loc_10179EF  +
movzx ecx cx +
and ecx 0FFFFFFFEh +
shl ecx 10h +
or ecx 1 +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 104h  +
push dword ptr [ecx+4]  +
call ds:PostMessageW  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push dword ptr [ecx]  +
push dword ptr [ecx+18h]  +
call ds:CallWindowProcW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ecx+4]  +
call ds:DestroyWindow  +
mov eax [ebp+arg_C] +
mov dword ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 1 +
mov eax [ebp+arg_C] +
mov dword ptr [eax] 1 +
jz loc_1017A7F  +
cmp [ebp+arg_4] 2 +
jnz loc_1017ABB  +
mov eax [ecx+2ACh] +
test eax eax +
jz loc_1017ABB  +
mov edx [ecx+240h] +
cmp edx eax +
jnz loc_1017A96  +
push edx  +
jmp loc_1017AB5  +
mov edx [ecx+268h] +
cmp edx eax +
jz loc_1017A93  +
mov edx [ecx+218h] +
cmp edx eax +
jz loc_1017A93  +
mov ecx [ecx+0D8h] +
cmp ecx eax +
jnz loc_1017ABB  +
push ecx  +
call ds:SetFocus  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea eax [ebp+Paint] +
push eax  +
lea edi [esi+4] +
push dword ptr [edi]  +
mov [ebp+var_6C] esi +
call ds:BeginPaint  +
mov [ebp+var_4C] eax +
test eax eax +
jz loc_1017C1A  +
lea eax [ebp+Point] +
push eax  +
push dword ptr [edi]  +
call ds:GetWindowRect  +
lea eax [ebp+Point] +
push eax  +
mov ecx edi +
call sub_10126FE  +
call sub_100FBEB  +
test al al +
jnz loc_1017B23  +
mov eax [ebp-5Ch] +
sub eax [ebp+Point.x] +
jmp loc_1017B29  +
mov eax [ebp+Point.x] +
sub eax [ebp-5Ch] +
mov [ebp+var_48] eax +
mov eax [ebp-58h] +
sub eax [ebp+Point.y] +
mov [ebp+var_68] eax +
lea eax [ebp+var_7C] +
push eax  +
push dword ptr [edi]  +
call ds:GetClientRect  +
mov eax [ebp+var_74] +
sub eax [ebp+var_7C] +
mov ecx [ebp+var_70] +
sub ecx [ebp+var_78] +
mov [ebp+var_54] eax +
mov [ebp+var_50] ecx +
jnz loc_1017B5D  +
test eax eax +
jz loc_1017C1A  +
push [ebp+var_4C]  +
call ds:CreateCompatibleDC  +
mov ebx eax +
test ebx ebx +
jz loc_1017C1A  +
mov esi ds:GetDeviceCaps +
push 0  +
push 0Ch  +
push ebx  +
call esi  +
movzx eax al +
push eax  +
push 0Eh  +
push ebx  +
call esi  +
movzx eax al +
push eax  +
push [ebp+var_68]  +
push [ebp+var_48]  +
call ds:CreateBitmap  +
mov esi ds:SetLayout +
push 0  +
push ebx  +
mov [ebp+var_48] eax +
call esi  +
cmp [ebp+var_48] 0 +
jz loc_1017C10  +
push [ebp+var_48]  +
push ebx  +
call ds:SelectObject  +
push 16h  +
push ebx  +
push 317h  +
push dword ptr [edi]  +
call ds:SendMessageW  +
call sub_100FBEB  +
test al al +
jnz loc_1017BDD  +
mov eax [ebp+Point.y] +
neg eax  +
push 0CC0020h  +
push eax  +
mov eax [ebp+Point.x] +
jmp loc_1017BF0  +
push 1  +
push ebx  +
call esi  +
mov eax [ebp+Point.y] +
neg eax  +
push 0CC0020h  +
push eax  +
mov eax [ebp-5Ch] +
neg eax  +
push eax  +
push ebx  +
push [ebp+var_50]  +
push [ebp+var_54]  +
push 0  +
push 0  +
push [ebp+var_4C]  +
call ds:BitBlt  +
push [ebp+var_48]  +
call ds:DeleteObject  +
push ebx  +
call ds:DeleteObject  +
mov esi [ebp+var_6C] +
lea eax [ebp+Paint] +
push eax  +
push dword ptr [edi]  +
call ds:EndPaint  +
lea ebx [esi+204h] +
cmp dword ptr [ebx] 0 +
jz loc_1017C55  +
push dword ptr [esi+1B4h]  +
call ds:GetDC  +
push dword ptr [ebx]  +
mov esi eax +
push 0  +
push 0  +
push esi  +
call ds:DrawIcon  +
push esi  +
push dword ptr [edi]  +
call ds:ReleaseDC  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_10019B3  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
cmp [ebp+Rect.right] 0 +
jnz loc_1017C96  +
cmp [ebp+Rect.bottom] 0 +
jnz loc_1017C96  +
xor eax eax +
inc eax  +
jmp loc_1017CAD  +
mov ecx [esi+294h] +
mov eax [ebp+arg_8] +
mov [eax+18h] ecx +
mov ecx [esi+298h] +
mov [eax+1Ch] ecx +
xor eax eax +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ds:ShowWindow +
push edi  +
mov edi ecx +
push 0  +
push dword ptr [edi+4]  +
call esi  +
push 1  +
push dword ptr [edi+4]  +
call esi  +
pop edi  +
xor eax eax +
pop esi  +
retn 10h  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+24h] +
mov ecx edi +
call sub_1010BA3  +
test al al +
jz loc_1017CF9  +
mov ecx edi +
call sub_1010E89  +
lea ecx [esi+0D4h] +
call sub_1016987  +
mov eax [esi+208h] +
mov ebx ds:DeleteObject +
xor edi edi +
cmp eax edi +
jz loc_1017D1F  +
push eax  +
call ebx  +
mov [esi+208h] edi +
mov eax [esi+20Ch] +
cmp eax edi +
jz loc_1017D32  +
push eax  +
call ebx  +
mov [esi+20Ch] edi +
push dword ptr [esi+4]  +
call ds:GetDC  +
mov ebx eax +
cmp ebx edi +
jz loc_1017D66  +
push 4  +
push ebx  +
call sub_100F9E2  +
push edi  +
push ebx  +
mov [esi+208h] eax +
call sub_100F9E2  +
push ebx  +
push dword ptr [esi+4]  +
mov [esi+20Ch] eax +
call ds:ReleaseDC  +
mov eax [esi+208h] +
xor ebx ebx +
inc ebx  +
cmp eax edi +
jz loc_1017D80  +
push ebx  +
push eax  +
lea ecx [esi+164h] +
call sub_1010C11  +
mov eax [esi+20Ch] +
cmp eax edi +
jz loc_1017DDF  +
push ebx  +
push eax  +
lea ecx [esi+18Ch] +
call sub_1010C11  +
push ebx  +
push dword ptr [esi+20Ch]  +
lea ecx [esi+1DCh] +
call sub_1010C11  +
push ebx  +
push dword ptr [esi+20Ch]  +
lea ecx [esi+218h] +
call sub_1010C11  +
push ebx  +
push dword ptr [esi+20Ch]  +
lea ecx [esi+240h] +
call sub_1010C11  +
push ebx  +
push dword ptr [esi+20Ch]  +
lea ecx [esi+268h] +
call sub_1010C11  +
push ebx  +
push edi  +
push dword ptr [esi+164h]  +
mov edi ds:InvalidateRect +
call edi  +
push ebx  +
push 0  +
push dword ptr [esi+18Ch]  +
call edi  +
push ebx  +
push 0  +
push dword ptr [esi+218h]  +
call edi  +
push ebx  +
push 0  +
push dword ptr [esi+240h]  +
call edi  +
push ebx  +
push 0  +
push dword ptr [esi+268h]  +
call edi  +
push ebx  +
push 0  +
push dword ptr [esi+4]  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+2ACh] +
test eax eax +
jz loc_1017E6F  +
mov ecx [esi+240h] +
cmp ecx eax +
jz loc_1017E59  +
mov ecx [esi+268h] +
cmp ecx eax +
jz loc_1017E59  +
mov ecx [esi+218h] +
cmp ecx eax +
jnz loc_1017E5C  +
push ecx  +
jmp loc_1017E67  +
mov esi [esi+0D8h] +
cmp esi eax +
jnz loc_1017E87  +
push esi  +
call ds:SetFocus  +
jmp loc_1017E87  +
push edi  +
lea edi [esi+218h] +
push dword ptr [edi]  +
call ds:SetFocus  +
mov eax [edi] +
mov [esi+2ACh] eax +
pop edi  +
xor eax eax +
pop esi  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
cmp [ebp+arg_4] 4Bh +
jnz loc_1017EA8  +
call sub_1017CDD  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+arg_4] 73h +
push esi  +
mov esi ecx +
jnz loc_1017ECB  +
push 0  +
call ds:PostQuitMessage  +
jmp loc_1017F3F  +
test [ebp+arg_8] 20000000h +
jz loc_1017F3F  +
push ebx  +
push edi  +
push dword ptr [ebp+arg_4]  +
call ds:towupper  +
mov edi ds:IsWindowVisible +
pop ecx  +
push dword ptr [esi+268h]  +
movzx ebx ax +
call edi  +
test eax eax +
jz loc_1017F11  +
movzx eax word ptr [esi+292h] +
cmp ebx eax +
jnz loc_1017F11  +
push 0  +
push 0  +
push 0F5h  +
push dword ptr [esi+268h]  +
jmp loc_1017F37  +
push dword ptr [esi+240h]  +
call edi  +
test eax eax +
jz loc_1017F3D  +
movzx eax word ptr [esi+290h] +
cmp ebx eax +
jnz loc_1017F3D  +
push 0  +
push 0  +
push 0F5h  +
push dword ptr [esi+240h]  +
call ds:SendNotifyMessageW  +
pop edi  +
pop ebx  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ds:GetFocus  +
push 10h  +
mov edi eax +
call ds:GetKeyState  +
xor ecx ecx +
cmp cx ax +
mov eax [esi+218h] +
setnle dl  +
cmp eax edi +
jnz loc_1017FEE  +
test dl dl +
jz loc_1017FD9  +
push dword ptr [esi+240h]  +
mov edi ds:IsWindowVisible +
call edi  +
test eax eax +
jz loc_1017FA8  +
lea ebx [esi+268h] +
push dword ptr [ebx]  +
call edi  +
test eax eax +
jz loc_1017FA8  +
push dword ptr [ebx]  +
call ds:SetFocus  +
mov eax [ebx] +
jmp loc_1018079  +
push dword ptr [esi+240h]  +
call edi  +
test eax eax +
jz loc_1017FCB  +
push dword ptr [esi+240h]  +
call ds:SetFocus  +
mov eax [esi+240h] +
jmp loc_1018079  +
lea ebx [esi+268h] +
push dword ptr [ebx]  +
call edi  +
test eax eax +
jnz loc_1017F99  +
lea edi [esi+0D8h] +
push dword ptr [edi]  +
call ds:SetFocus  +
mov eax [edi] +
jmp loc_1018079  +
mov ecx [esi+240h] +
cmp ecx edi +
jnz loc_1018016  +
test dl dl +
jnz loc_1017FD9  +
lea edi [esi+268h] +
push dword ptr [edi]  +
call ds:IsWindowVisible  +
test eax eax +
jnz loc_1017FDF  +
push dword ptr [esi+218h]  +
jmp loc_101806D  +
cmp [esi+268h] edi +
jnz loc_101802F  +
test dl dl +
jz loc_101806C  +
push ecx  +
call ds:IsWindowVisible  +
test eax eax +
jnz loc_1017FB4  +
jmp loc_1017FD9  +
cmp [esi+0D8h] edi +
jnz loc_101806C  +
test dl dl +
jnz loc_101806C  +
mov edi ds:IsWindowVisible +
push ecx  +
call edi  +
test eax eax +
jnz loc_1017FB4  +
push dword ptr [esi+268h]  +
call edi  +
test eax eax +
jz loc_101800E  +
push dword ptr [esi+268h]  +
call ds:SetFocus  +
mov eax [esi+268h] +
jmp loc_1018079  +
push eax  +
call ds:SetFocus  +
mov eax [esi+218h] +
pop edi  +
mov [esi+2ACh] eax +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
dec eax  +
push esi  +
mov esi ecx +
jnz loc_10180B6  +
push 1  +
push dword ptr [esi+240h]  +
call ds:EnableWindow  +
push 1  +
push dword ptr [esi+4]  +
call ds:KillTimer  +
mov ecx esi +
call sub_1017F4C  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
mov esi [ebp+8] +
test esi esi +
jz loc_1018197  +
mov eax [esi] +
test eax eax +
jz loc_1018197  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_1018197  +
push edi  +
push 1  +
push dword ptr [ebp+14h]  +
lea ecx [ebp-24h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100967C  +
push dword ptr [esi+20h]  +
mov edi [esi+24h] +
mov ecx [esi+1Ch] +
lea edx [ebp+8] +
push edx  +
push dword ptr [ebp+14h]  +
lea eax [ebp-24h] +
push dword ptr [ebp+10h]  +
mov [esi+24h] eax +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
push dword ptr [esi]  +
call dword ptr [eax]  +
mov [esi+24h] edi +
test eax eax +
jnz loc_1018191  +
push ebx  +
mov ebx 82h +
cmp [ebp+0Ch] ebx +
jz loc_1018148  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1017A1F  +
mov [ebp+8] eax +
jmp loc_1018190  +
mov eax [esi] +
mov edi ds:GetWindowLongW +
push 0FFFFFFFCh  +
push eax  +
call edi  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
mov [ebp+0Ch] eax +
push ebx  +
call sub_1017A1F  +
mov [ebp+8] eax +
mov eax [esi+18h] +
cmp eax ds:DefWindowProcW +
jz loc_101818D  +
mov eax [esi] +
push 0FFFFFFFCh  +
push eax  +
call edi  +
cmp eax [ebp+0Ch] +
jnz loc_101818D  +
push dword ptr [esi+18h]  +
push 0FFFFFFFCh  +
push dword ptr [esi]  +
call ds:SetWindowLongW  +
and dword ptr [esi] 0 +
pop ebx  +
mov eax [ebp+8] +
pop edi  +
jmp loc_1018199  +
xor eax eax +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
test eax eax +
jz loc_10181B6  +
mov ecx [eax] +
jmp loc_10181B8  +
xor ecx ecx +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10181C3  +
mov eax [eax] +
jmp loc_10181C5  +
xor eax eax +
push ecx  +
push eax  +
push dword ptr [esi]  +
call GdipDrawPath  +
push eax  +
mov ecx esi +
call sub_1010D2F  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10181F6  +
cmp ecx 7FFFFFFFh +
jbe loc_10181FB  +
mov eax 80070057h +
test eax eax +
jl loc_1018238  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1018228  +
cmp eax esi +
ja loc_1018228  +
jz loc_101822D  +
jmp loc_1018233  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2E8h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
mov eax [ebp+rguid] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_C] +
and dword ptr [esi] 0 +
mov [ebp+riid] ecx +
push 32h  +
lea ecx [ebp+sz] +
push ecx  +
push eax  +
call StringFromGUID2  +
test eax eax +
jnz loc_1018283  +
mov eax 8007000Eh +
jmp loc_10182E8  +
lea eax [ebp+sz] +
push eax  +
push offset aElevationAdmin  +
lea eax [ebp+pszName] +
push 12Ch  +
push eax  +
call sub_10181E0  +
add esp 10h +
test eax eax +
jl loc_10182E8  +
push edi  +
push 9  +
pop ecx  +
xor eax eax +
push esi  +
push [ebp+riid]  +
lea edi [ebp+pBindOptions] +
stos   +
lea eax [ebp+pBindOptions] +
push eax  +
lea eax [ebp+pszName] +
push eax  +
mov [ebp+pBindOptions.cbStruct] 24h +
mov [ebp+var_2C8] ebx +
mov [ebp+var_2D4] 4 +
call CoGetObject  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10019B3  +
leave   +
retn 10h  +
***
call sub_1001939  +
mov ebx ecx +
cmp dword ptr [ebp+8] 0 +
jz loc_1018552  +
lea eax [ebp-4Ch] +
push eax  +
push dword ptr [ebx+4]  +
call ds:GetClientRect  +
lea esi [ebp-4Ch] +
lea edi [ebp-3Ch] +
movs   +
movs   +
movs   +
lea ecx [ebx+24h] +
movs   +
call sub_1010B0D  +
xor edi edi +
cmp eax edi +
mov [ebp-38h] eax +
jge loc_101837E  +
mov [ebp-38h] edi +
mov eax [ebp-44h] +
mov [ebp-34h] eax +
lea eax [ebp-18h] +
push eax  +
push edi  +
mov [ebp-3Ch] edi +
call sub_100F54D  +
push dword ptr [ebp-18h]  +
call ds:CreateSolidBrush  +
mov [ebp-10h] eax +
cmp eax edi +
jz loc_10183D1  +
mov esi ds:SelectObject +
push eax  +
push dword ptr [ebp+8]  +
call esi  +
push dword ptr [ebp-10h]  +
mov [ebp-1Ch] eax +
lea eax [ebp-3Ch] +
push eax  +
push dword ptr [ebp+8]  +
call ds:FillRect  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+8]  +
call esi  +
push dword ptr [ebp-10h]  +
call ds:DeleteObject  +
push dword ptr [ebp+8]  +
lea ecx [ebp-24h] +
call sub_10110D3  +
mov eax [ebp-20h] +
mov [ebp-4] edi +
mov [ebp-20h] edi +
cmp eax edi +
jnz loc_101854A  +
push 3  +
lea ecx [ebp-24h] +
call sub_1011100  +
lea eax [ebp+8] +
push eax  +
push 4  +
call sub_100F54D  +
mov eax [ebp+8] +
shr eax 10h +
push eax  +
mov eax [ebp+8] +
shr eax 8 +
push eax  +
push dword ptr [ebp+8]  +
push 0FFh  +
call sub_1010C64  +
fld1   +
push ecx  +
fstp  [esp+8+var_8] +
mov [ebp-1Ch] eax +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1012788  +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 1 +
mov [ebp-28h] edi +
cmp eax edi +
jnz loc_1018542  +
mov [ebp-6Ch] edi +
xor eax eax +
lea edi [ebp-68h] +
stos   +
stos   +
stos   +
lea eax [ebp-6Ch] +
push eax  +
push dword ptr [ebx+0D8h]  +
call ds:GetWindowRect  +
lea eax [ebp-6Ch] +
push eax  +
lea ecx [ebx+4] +
call sub_10126FE  +
fild  dword ptr [ebp-68h] +
fld  dword ptr [ebx+2A0h] +
fadd st st +
fsubp st(1) st +
call _ftol2_sse  +
mov [ebp-1Ch] eax +
lea eax [ebp-7Ch] +
push eax  +
push dword ptr [ebx+1DCh]  +
call ds:GetClientRect  +
fld  dword ptr [ebx+2A0h] +
fmul  ds:dbl_10081B0 +
call _ftol2_sse  +
fld  dword ptr [ebx+2A0h] +
fmul  ds:dbl_10081A8 +
mov esi eax +
call _ftol2_sse  +
sub esi eax +
sub esi [ebp-70h] +
xor eax eax +
add esi [ebp-40h] +
lea edi [ebp-58h] +
stos   +
stos   +
add ebx 29Ch +
stos   +
fld  dword ptr [ebx] +
mov eax [ebp-1Ch] +
fmul  ds:dbl_1018568 +
inc esi  +
mov [ebp-58h] eax +
mov [ebp-50h] esi +
call _ftol2_sse  +
mov ecx [ebp-4Ch] +
fld  dword ptr [ebx] +
sub ecx eax +
fmul  ds:dbl_1018560 +
mov [ebp-5Ch] ecx +
call _ftol2_sse  +
mov ecx [ebp-44h] +
sub ecx eax +
mov [ebp-54h] ecx +
push 0  +
lea ecx [ebp-14h] +
call sub_10127C4  +
push 1  +
push 1  +
push 3  +
lea eax [ebp-5Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_1010367  +
mov eax [ebp-10h] +
and dword ptr [ebp-10h] 0 +
test eax eax +
jnz loc_101853A  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-24h] +
call sub_10181A3  +
push dword ptr [ebp-14h]  +
call GdipDeletePath  +
push dword ptr [ebp-2Ch]  +
call GdipDeletePen  +
push dword ptr [ebp-24h]  +
call GdipDeleteGraphics  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
push esi  +
mov esi ecx +
call sub_100FCB7  +
mov ecx esi +
call sub_1017CDD  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 9 +
mov eax [ebp+arg_10] +
push esi  +
mov esi ecx +
mov dword ptr [eax] 1 +
jnz loc_10185B9  +
call sub_1017F4C  +
jmp loc_1018605  +
cmp [ebp+arg_8] 0Dh +
jz loc_10185C5  +
cmp [ebp+arg_8] 20h +
jnz loc_1018605  +
call ds:GetFocus  +
mov ecx [esi+218h] +
cmp ecx eax +
jnz loc_10185E1  +
push 0  +
push 0  +
push 0F5h  +
push ecx  +
jmp loc_10185FF  +
mov ecx [esi+240h] +
cmp ecx eax +
jz loc_10185D5  +
mov esi [esi+268h] +
cmp esi eax +
jnz loc_1018605  +
push 0  +
push 0  +
push 0F5h  +
push esi  +
call ds:SendNotifyMessageW  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+wParam]  +
mov esi ecx +
call sub_101833B  +
push [ebp+lParam]  +
mov ecx esi +
push [ebp+wParam]  +
push [ebp+Msg]  +
call sub_10126DB  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005B68  +
test byte ptr [ebp+8] 1 +
jz loc_1018656  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset unk_101F1CC  +
call sub_10091ED  +
test eax eax +
jz loc_10186A6  +
push esi  +
push edi  +
mov edi [ebp+8] +
lea esi [eax+10h] +
push eax  +
push offset loc_10180C2  +
mov ecx esi +
mov [eax] edi +
call sub_100901D  +
mov esi [esi] +
push esi  +
push 0FFFFFFFCh  +
push edi  +
call ds:SetWindowLongW  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call esi  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
call sub_1001E69  +
mov esi ecx +
and dword ptr [ebp-14h] 0 +
mov eax [esi+14h] +
and dword ptr [ebp-4] 0 +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10186CB  +
sub eax ecx +
sar eax 1 +
lea ebx [eax+0Eh] +
lea edi [ebx+ebx] +
cmp edi 400h +
ja loc_10186FD  +
push edi  +
call sub_1010FC1  +
test al al +
jz loc_10186FD  +
mov eax edi +
call sub_1005EC9  +
mov [ebp-18h] esp +
jmp loc_1018709  +
push edi  +
lea ecx [ebp-14h] +
call sub_10112DC  +
mov [ebp-18h] eax +
mov edi ds:GetClassInfoExW +
lea eax [ebp-48h] +
push eax  +
push dword ptr [esi+14h]  +
mov dword ptr [ebp-48h] 30h +
push 0  +
call edi  +
test eax eax +
jnz loc_1018744  +
lea eax [ebp-48h] +
push eax  +
push dword ptr [esi+14h]  +
push hInstance  +
call edi  +
test eax eax +
jnz loc_1018744  +
lea ecx [ebp-14h] +
call sub_1009A9F  +
xor eax eax +
jmp loc_10187B9  +
mov eax [ebp-40h] +
push offset aAtl  +
push ebx  +
push dword ptr [ebp-18h]  +
mov [esi+18h] eax +
call sub_1010BAF  +
push dword ptr [esi+14h]  +
push ebx  +
mov ebx [ebp-18h] +
push ebx  +
call sub_1010BD2  +
add esp 18h +
lea eax [ebp-78h] +
push eax  +
push ebx  +
push hInstance  +
mov dword ptr [ebp-78h] 30h +
call edi  +
movzx esi ax +
test si si +
jnz loc_10187AE  +
mov eax hInstance +
and dword ptr [ebp-44h] 0FFFFBFFFh +
mov [ebp-34h] eax +
lea eax [ebp-48h] +
push eax  +
push offset unk_101F1CC  +
mov [ebp-20h] ebx +
mov dword ptr [ebp-40h] offset loc_1018662 +
call sub_10092BB  +
movzx esi ax +
lea ecx [ebp-14h] +
call sub_1009A9F  +
mov ax si +
lea esp [ebp-88h] +
call sub_1002F11  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_10186AF  +
movzx edi ax +
test di di +
jnz loc_10187F4  +
xor eax eax +
jmp loc_1018879  +
push 0  +
push 0  +
lea ecx [esi+10h] +
call sub_100901D  +
test eax eax +
jnz loc_101880E  +
push 0Eh  +
call ds:SetLastError  +
jmp loc_10187ED  +
push esi  +
lea eax [esi+4] +
push eax  +
push offset unk_101F1CC  +
call sub_100918E  +
cmp [ebp+hMenu] 0 +
jnz loc_101882F  +
test [ebp+arg_C] 40000000h +
jz loc_101882F  +
mov [ebp+hMenu] esi +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_101883E  +
mov eax offset unk_101FBAC +
mov [ebp+arg_4] eax +
push [ebp+lpParam]  +
mov ecx [eax+4] +
push hInstance  +
mov esi [eax+0Ch] +
push [ebp+hMenu]  +
mov edx [eax] +
push [ebp+hWndParent]  +
mov eax [eax+8] +
sub esi ecx +
push esi  +
sub eax edx +
push eax  +
push ecx  +
push edx  +
push [ebp+arg_C]  +
call sub_100CD40  +
push eax  +
push [ebp+lpWindowName]  +
movzx eax di +
push eax  +
push [ebp+dwExStyle]  +
call ds:CreateWindowExW  +
pop edi  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
cmp [ebp+arg_4] 1 +
push ebx  +
mov ebx ecx +
jz loc_1018C3A  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+4]  +
call ds:GetClientRect  +
cmp [ebp+Rect.right] 0 +
jnz loc_10188B6  +
cmp [ebp+Rect.bottom] 0 +
jz loc_1018C3A  +
push esi  +
push edi  +
lea esi [ebp+Rect] +
lea edi [ebp+var_50] +
movs   +
movs   +
movs   +
movs   +
lea esi [ebx+24h] +
mov ecx esi +
call sub_1010B0D  +
mov ecx esi +
mov [ebp+var_44] eax +
call sub_1010BA3  +
test al al +
jz loc_10188E8  +
push 0  +
lea eax [ebp+var_50] +
push eax  +
lea ecx [ebx+28h] +
call sub_1010C31  +
mov ecx esi +
call sub_1010B0D  +
fld  dword ptr [ebx+2A0h] +
fmul  ds:dbl_1018C80 +
mov esi eax +
call _ftol2_sse  +
push 0Bh  +
sub esi eax +
call ds:GetSystemMetrics  +
push 0Ch  +
mov edi eax +
call ds:GetSystemMetrics  +
fld  dword ptr [ebx+29Ch] +
fmul  ds:dbl_1018C78 +
mov [ebp+arg_4] eax +
mov [ebp+var_2C] esi +
call _ftol2_sse  +
fld  dword ptr [ebx+29Ch] +
fmul  ds:dbl_1018C70 +
mov [ebp+var_30] eax +
call _ftol2_sse  +
mov ecx edi +
sub ecx eax +
mov eax [ebp+arg_4] +
add esi eax +
push 1  +
lea eax [ebp+var_30] +
mov [ebp+var_28] ecx +
push eax  +
lea ecx [ebx+1B4h] +
mov [ebp+arg_4] esi +
mov [ebp+var_24] esi +
call sub_1010C31  +
lea ecx [ebx+24h] +
call sub_1010B0D  +
fld  dword ptr [ebx+2A0h] +
fmul  ds:dbl_1018C80 +
mov esi eax +
call _ftol2_sse  +
fld  dword ptr [ebx+29Ch] +
fmul  ds:dbl_1018C68 +
sub esi eax +
mov [ebp+var_1C] esi +
call _ftol2_sse  +
fld  dword ptr [ebx+29Ch] +
fmul  ds:dbl_1018C78 +
sub edi eax +
mov [ebp+var_20] edi +
call _ftol2_sse  +
mov ecx [ebp+Rect.right] +
sub ecx eax +
xor edi edi +
push edi  +
lea eax [ebp+var_20] +
mov [ebp+var_18] ecx +
lea esi [ebx+164h] +
push eax  +
mov ecx esi +
call sub_1011626  +
push edi  +
lea eax [ebp+var_20] +
push eax  +
mov ecx esi +
call sub_1010C31  +
fld  dword ptr [ebx+2A0h] +
fmul  ds:dbl_1018C60 +
call _ftol2_sse  +
mov ecx [ebp+var_14] +
sub ecx eax +
push edi  +
lea eax [ebp+var_20] +
mov [ebp+var_1C] ecx +
lea esi [ebx+18Ch] +
push eax  +
mov ecx esi +
call sub_1011626  +
push edi  +
lea eax [ebp+var_20] +
push eax  +
mov ecx esi +
call sub_1010C31  +
fld  dword ptr [ebx+29Ch] +
mov edi [ebp+var_14] +
fmul  ds:dbl_1018C70 +
sub edi [ebp+var_1C] +
call _ftol2_sse  +
fld  dword ptr [ebx+29Ch] +
mov esi [ebp+var_50] +
fmul  ds:dbl_1018C78 +
sub esi eax +
mov [ebp+var_50] esi +
call _ftol2_sse  +
mov ecx [ebp+Rect.right] +
and [ebp+var_2C] 0 +
sub ecx eax +
push 0  +
lea eax [ebp+var_30] +
mov [ebp+var_48] ecx +
mov [ebp+var_28] ecx +
lea ecx [ebx+1DCh] +
push eax  +
mov [ebp+var_30] esi +
call sub_1011626  +
mov eax [ebp+var_14] +
cmp eax [ebp+arg_4] +
jg loc_1018A68  +
mov eax [ebp+arg_4] +
fld  dword ptr [ebx+2A0h] +
add eax edi +
fmul  ds:dbl_10081B0 +
mov [ebp+var_4C] eax +
call _ftol2_sse  +
fld  dword ptr [ebx+2A0h] +
fmul  ds:dbl_10081A8 +
mov esi eax +
call _ftol2_sse  +
mov edi [ebp+var_24] +
sub esi eax +
sub esi edi +
add esi [ebp+Rect.bottom] +
push 0  +
lea eax [ebp+var_50] +
push eax  +
lea ecx [ebx+0D8h] +
mov [ebp+var_44] esi +
call sub_1010C31  +
fld  dword ptr [ebx+2A0h] +
fmul  ds:dbl_10081B0 +
call _ftol2_sse  +
sub esi eax +
add [ebp+var_2C] esi +
add edi [ebp+var_2C] +
push 0  +
lea eax [ebp+var_30] +
push eax  +
lea ecx [ebx+1DCh] +
mov [ebp+var_24] edi +
call sub_1010C31  +
fld  dword ptr [ebx+2A0h] +
fmul  ds:dbl_1018C80 +
call _ftol2_sse  +
fld  dword ptr [ebx+2A0h] +
fmul  ds:dbl_1018C58 +
sub edi eax +
mov esi edi +
mov [ebp+var_C] esi +
call _ftol2_sse  +
fld  dword ptr [ebx+29Ch] +
fmul  ds:dbl_1018C50 +
sub esi eax +
mov [ebp+var_4] esi +
call _ftol2_sse  +
fld  dword ptr [ebx+29Ch] +
mov esi [ebp+Rect.right] +
fmul  ds:dbl_1018C78 +
mov ecx esi +
sub ecx eax +
mov [ebp+var_10] ecx +
call _ftol2_sse  +
sub esi eax +
lea eax [ebp+var_10] +
mov [ebp+var_8] esi +
push eax  +
lea esi [ebx+218h] +
push esi  +
call sub_1012608  +
push 1  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call sub_1010C31  +
mov eax [ebx+210h] +
cmp dword ptr [eax-0Ch] 0 +
mov edi [ebx+160h] +
jle loc_1018BD3  +
cmp edi 1 +
jz loc_1018C38  +
cmp edi 7 +
jz loc_1018BD3  +
cmp edi 4 +
jz loc_1018BD3  +
cmp edi 0Ah +
jz loc_1018BD3  +
cmp edi 0Bh +
jz loc_1018BD3  +
fld  dword ptr [ebx+29Ch] +
fmul  ds:dbl_1018C48 +
call _ftol2_sse  +
fld  dword ptr [ebx+29Ch] +
mov esi [ebp+var_10] +
fmul  ds:dbl_1018C50 +
sub esi eax +
mov [ebp+var_8] esi +
call _ftol2_sse  +
sub esi eax +
lea eax [ebp+var_10] +
mov [ebp+var_10] esi +
push eax  +
lea esi [ebx+268h] +
push esi  +
call sub_1012608  +
push 1  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call sub_1010C31  +
cmp edi 1 +
jz loc_1018C38  +
cmp edi 7 +
jz loc_1018C38  +
cmp edi 4 +
jz loc_1018C38  +
cmp edi 0Ah +
jz loc_1018C38  +
cmp edi 0Bh +
jz loc_1018C38  +
fld  dword ptr [ebx+29Ch] +
fmul  ds:dbl_1018C48 +
call _ftol2_sse  +
fld  dword ptr [ebx+29Ch] +
mov esi [ebp+var_10] +
fmul  ds:dbl_1018C50 +
sub esi eax +
mov [ebp+var_8] esi +
call _ftol2_sse  +
sub esi eax +
lea eax [ebp+var_10] +
push eax  +
add ebx 240h +
push ebx  +
mov [ebp+var_10] esi +
call sub_1012608  +
push 1  +
lea eax [ebp+var_10] +
push eax  +
mov ecx ebx +
call sub_1010C31  +
pop edi  +
pop esi  +
xor eax eax +
inc eax  +
pop ebx  +
leave   +
retn 10h  +
***
call sub_1001939  +
mov esi ecx +
mov eax [ebp+10h] +
cmp eax [esi+218h] +
jnz loc_1018CBA  +
xor edi edi +
push edi  +
push edi  +
push 10h  +
push dword ptr [esi+4]  +
call ds:PostMessageW  +
jmp loc_1018E51  +
cmp eax [esi+240h] +
jnz loc_1018E26  +
mov ecx dword_101F0F8 +
xor edi edi +
xor ebx ebx +
cmp ecx edi +
jz loc_1018CEE  +
call sub_100CB35  +
mov ecx dword_101F0F8 +
mov ebx eax +
cmp ecx edi +
jz loc_1018CEE  +
call sub_100CC51  +
test eax eax +
jnz loc_1018CFB  +
call sub_101015E  +
test eax eax +
jz loc_1018DE2  +
lea eax [ebp-10h] +
push eax  +
push offset dword_1018E5C  +
push offset rguid  +
push dword ptr [esi+4]  +
mov [ebp-10h] edi +
call sub_101823F  +
cmp eax edi +
mov [ebp-14h] eax +
jl loc_1018D71  +
mov eax [ebp-10h] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax edi +
jge loc_1018D51  +
mov ecx off_101F0C0 +
cmp ecx offset off_101F0C0 +
jz loc_1018D51  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1018D51  +
push eax  +
push offset dword_1008198  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100AF4C  +
push edi  +
push dword ptr [esi+240h]  +
call ds:EnableWindow  +
push edi  +
push 0BB8h  +
push 1  +
push dword ptr [esi+4]  +
call ds:SetTimer  +
jmp loc_1018DD3  +
cmp eax 800704C7h +
jz loc_1018DD3  +
push edi  +
push edi  +
lea ecx [ebp+10h] +
push ecx  +
push 400h  +
push eax  +
push edi  +
push 1100h  +
mov [ebp+10h] edi +
call ds:FormatMessageW  +
test eax eax +
jz loc_1018DAC  +
push dword ptr [ebp+10h]  +
push dword ptr [esi+4]  +
push ebx  +
call sub_1010815  +
push dword ptr [ebp+10h]  +
call ds:LocalFree  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1018DD3  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018DD3  +
push dword ptr [ebp-14h]  +
push offset dword_1008198  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF4C  +
mov eax [ebp-10h] +
cmp eax edi +
jz loc_1018E1C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1018E1C  +
push offset dword_101F10C  +
lea ecx [ebp+10h] +
call sub_1001865  +
push 3AF7h  +
lea ecx [ebp+10h] +
mov [ebp-4] edi +
call sub_100EB9E  +
lea ecx [ebp+10h] +
call sub_1003A2D  +
push eax  +
push dword ptr [esi+4]  +
push ebx  +
call sub_1010815  +
mov ecx [ebp+10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp+14h] +
xor eax eax +
inc eax  +
mov [ecx] eax +
jmp loc_1018E54  +
cmp eax [esi+268h] +
jnz loc_1018E4B  +
lea ecx [esi+210h] +
mov eax [ecx] +
cmp dword ptr [eax-0Ch] 0 +
jle loc_1018E1C  +
push 1  +
call sub_1003A2D  +
push eax  +
call sub_100ADC4  +
jmp loc_1018E1C  +
mov eax [ebp+14h] +
and dword ptr [eax] 0 +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn 10h  +
***
call sub_1001939  +
mov edi ecx +
lea eax [ebp-1Ch] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi offset dword_101F10C +
push esi  +
lea ecx [ebp-10h] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_100323D  +
push esi  +
lea ecx [ebp-14h] +
call sub_1001865  +
push dword ptr [ebp-10h]  +
lea eax [ebp-14h] +
push dword ptr [edi+214h]  +
mov byte ptr [ebp-4] 1 +
push eax  +
call sub_10031AA  +
mov esi [ebp-14h] +
add esp 0Ch +
push esi  +
push dword ptr [edi+1DCh]  +
call ds:SetWindowTextW  +
lea ecx [esi-10h] +
call sub_10018D0  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1020650 0 +
push esi  +
push edi  +
mov esi ecx +
jnz loc_1018F21  +
and dword_1020650 0 +
lea eax [esi+20h] +
push eax  +
mov ecx offset unk_1020620 +
call sub_1009538  +
push [ebp+arg_C]  +
movzx edi ax +
call sub_100CD40  +
cmp [ebp+lpWindowName] 0 +
jnz loc_1018F44  +
and [ebp+lpWindowName] 0 +
push [ebp+lpParam]  +
mov ecx esi +
push edi  +
push [ebp+hMenu]  +
push [ebp+dwExStyle]  +
push eax  +
push [ebp+lpWindowName]  +
push [ebp+arg_4]  +
push [ebp+hWndParent]  +
call sub_1009351  +
pop edi  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10206E0 0 +
push esi  +
push edi  +
mov esi ecx +
jnz loc_1018F83  +
and dword_10206E0 0 +
lea eax [esi+20h] +
push eax  +
mov ecx offset unk_10206B0 +
call sub_1009538  +
push [ebp+arg_C]  +
movzx edi ax +
call sub_100CD40  +
cmp [ebp+lpWindowName] 0 +
jnz loc_1018FA6  +
and [ebp+lpWindowName] 0 +
push [ebp+lpParam]  +
mov ecx esi +
push edi  +
push [ebp+hMenu]  +
push [ebp+dwExStyle]  +
push eax  +
push [ebp+lpWindowName]  +
push [ebp+arg_4]  +
push [ebp+hWndParent]  +
call sub_1009351  +
pop edi  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpParam]  +
mov eax ds:DefWindowProcW +
push [ebp+hMenu]  +
mov [ecx+18h] eax +
push [ebp+dwExStyle]  +
mov eax [ebp+arg_0] +
push [ebp+arg_14]  +
mov [ecx+1Ch] eax +
push [ebp+lpWindowName]  +
mov eax [ebp+arg_4] +
push [ebp+arg_C]  +
mov dword ptr [ecx+14h] offset aButton +
push [ebp+hWndParent]  +
mov [ecx+20h] eax +
call sub_10187D7  +
pop ebp  +
retn 24h  +
***
call sub_1001939  +
mov edi ecx +
mov ebx [ebp+8] +
mov esi offset dword_101F10C +
cmp ebx 1 +
jnz loc_101909B  +
push 3AD8h  +
call sub_100198C  +
mov ecx [ebp+10h] +
push eax  +
call sub_100B9CE  +
xor al al +
mov ecx [edi+210h] +
cmp dword ptr [ecx-0Ch] 0 +
mov byte ptr [ebp+0Bh] 0 +
jle loc_1019067  +
test al al +
jz loc_1019067  +
mov byte ptr [ebp+0Bh] 1 +
xor bl bl +
test al al +
jz loc_101906F  +
inc bl  +
push esi  +
lea ecx [ebp-10h] +
call sub_1001865  +
mov dword ptr [ebp-4] 2 +
test bl bl +
jz loc_10191E6  +
cmp byte ptr [ebp+0Bh] 0 +
jz loc_10191DF  +
push 3AE2h  +
jmp loc_10191F1  +
cmp ebx 2 +
jnz loc_10190B8  +
push 3AD9h  +
call sub_100198C  +
mov ecx [ebp+10h] +
push eax  +
call sub_100B9CE  +
jmp loc_1019181  +
cmp ebx 3 +
jnz loc_10190C4  +
push 3ADAh  +
jmp loc_10190A5  +
cmp ebx 9 +
jnz loc_10190D0  +
push 3ADBh  +
jmp loc_10190A5  +
cmp ebx 4 +
jnz loc_10190DF  +
push 3ADCh  +
jmp loc_101903F  +
cmp ebx 7 +
jnz loc_10190EE  +
push 3ADDh  +
jmp loc_101903F  +
cmp ebx 5 +
jnz loc_1019188  +
push 3ADEh  +
call sub_100198C  +
mov ecx [ebp+10h] +
push eax  +
call sub_100B9CE  +
push esi  +
lea ecx [ebp-14h] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-14h] +
push eax  +
lea eax [edi+2A4h] +
push eax  +
call sub_100323D  +
push esi  +
lea ecx [ebp+8] +
call sub_1001865  +
push dword ptr [ebp-14h]  +
mov eax [ebp+10h] +
mov eax [eax] +
push eax  +
lea eax [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_10031AA  +
mov ecx [ebp+10h] +
add esp 0Ch +
lea eax [ebp+8] +
push eax  +
call sub_100BA1D  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
mov ecx [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
cmp ebx 0Ah +
jz loc_101904D  +
cmp ebx 0Bh +
jz loc_101904D  +
mov al 1 +
jmp loc_101904F  +
cmp ebx 6 +
jnz loc_1019197  +
push 3ADFh  +
jmp loc_10190FC  +
cmp ebx 8 +
jnz loc_10191A6  +
push 3AE0h  +
jmp loc_10190FC  +
cmp ebx 0Bh +
jnz loc_10191B5  +
push 3AFBh  +
jmp loc_101903F  +
push offset ServiceName  +
call sub_1010016  +
test eax eax +
jz loc_10191CA  +
push 3AE1h  +
jmp loc_10191CF  +
push 3AF6h  +
call sub_100198C  +
mov ecx [ebp+10h] +
push eax  +
call sub_100B9CE  +
jmp loc_101916F  +
push 3AE4h  +
jmp loc_10191F1  +
cmp byte ptr [ebp+0Bh] 0 +
jz loc_10191FF  +
push 3AE3h  +
call sub_100198C  +
push eax  +
lea ecx [ebp-10h] +
call sub_100B9CE  +
mov esi [ebp-10h] +
push dword ptr [esi-0Ch]  +
mov ecx [ebp+10h] +
push esi  +
call sub_10033D1  +
lea ecx [esi-10h] +
call sub_10018D0  +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 0 +
mov edx [ecx+160h] +
jz loc_1019278  +
dec eax  +
jz loc_101926B  +
dec eax  +
jz loc_1019264  +
dec eax  +
jz loc_101925D  +
dec eax  +
jnz loc_10192CD  +
push 3AF0h  +
jmp loc_10192BF  +
push 3AEFh  +
jmp loc_10192BF  +
push 3A9Ch  +
jmp loc_10192BF  +
push [ebp+arg_4]  +
push 1  +
push edx  +
call sub_101901F  +
jmp loc_10192CD  +
cmp edx 4 +
jnz loc_1019284  +
push 3AD4h  +
jmp loc_10192BF  +
cmp edx 1 +
jz loc_10192BA  +
cmp edx 2 +
jz loc_10192BA  +
cmp edx 3 +
jz loc_10192BA  +
cmp edx 9 +
jz loc_10192BA  +
cmp edx 7 +
jz loc_10192B3  +
cmp edx 5 +
jz loc_10192B3  +
cmp edx 6 +
jz loc_10192B3  +
cmp edx 8 +
jz loc_10192B3  +
push 3AD7h  +
jmp loc_10192BF  +
push 3AD5h  +
jmp loc_10192BF  +
push 3AD3h  +
call sub_100198C  +
mov ecx [ebp+arg_4] +
push eax  +
call sub_100B9CE  +
pop ebp  +
retn 8  +
***
call sub_1001939  +
mov esi ecx +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1019308  +
test byte ptr [eax+1Ch] 4 +
jz loc_1019308  +
push offset dword_1008198  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov edi offset dword_101F10C +
push edi  +
lea ecx [ebp-14h] +
call sub_1001865  +
and dword ptr [ebp-4] 0 +
push edi  +
lea ecx [ebp-10h] +
call sub_1001865  +
lea eax [ebp-14h] +
push eax  +
push 0  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_1019237  +
mov ebx [ebp-14h] +
mov edi ds:SetWindowTextW +
push ebx  +
push dword ptr [esi+164h]  +
call edi  +
mov eax [esi+160h] +
lea ecx [ebp-10h] +
push ecx  +
push 1  +
push eax  +
mov ecx esi +
call sub_101901F  +
push dword ptr [ebp-10h]  +
push dword ptr [esi+18Ch]  +
call edi  +
mov ecx esi +
call sub_1018E81  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
lea ecx [ebx-10h] +
call sub_10018D0  +
call __EH_epilog3  +
retn   +
***
call sub_1001939  +
mov esi ecx +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_10193BC  +
test byte ptr [eax+1Ch] 4 +
jz loc_10193BC  +
push offset dword_1008198  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov ecx esi +
call sub_1018E81  +
cmp dword ptr [ebp+8] 0 +
jz loc_1019557  +
mov ecx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
call sub_10028C7  +
mov ecx [eax] +
mov [esi+2A4h] ecx +
mov eax [eax+4] +
mov ecx [ebp+8] +
mov [esi+2A8h] eax +
call sub_1002B7A  +
mov ecx [ebp+8] +
mov ebx eax +
lea edi [esi+210h] +
push edi  +
mov [ebp-10h] ebx +
call sub_100B4C4  +
mov eax [edi] +
mov eax [eax-0Ch] +
test eax eax +
jle loc_1019432  +
cmp ebx 1 +
jz loc_1019432  +
cmp ebx 7 +
jz loc_1019432  +
cmp ebx 4 +
jz loc_1019432  +
cmp ebx 0Ah +
jz loc_1019432  +
cmp ebx 0Bh +
jz loc_1019432  +
push 5  +
push dword ptr [esi+268h]  +
jmp loc_101945F  +
call ds:GetFocus  +
lea edi [esi+268h] +
cmp [edi] eax +
jnz loc_101945B  +
lea ebx [esi+218h] +
push dword ptr [ebx]  +
call ds:SetFocus  +
mov eax [ebx] +
mov ebx [ebp-10h] +
mov [esi+2ACh] eax +
push 0  +
push dword ptr [edi]  +
call ds:ShowWindow  +
push ebx  +
mov ecx esi +
call sub_1017841  +
test al al +
jz loc_101947A  +
mov ecx esi +
call sub_10192D6  +
jmp loc_10194BB  +
push offset dword_101F10C  +
lea ecx [ebp-10h] +
call sub_1001865  +
mov eax [esi+160h] +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
push ecx  +
push 1  +
push eax  +
mov ecx esi +
call sub_101901F  +
mov edi [ebp-10h] +
push edi  +
push dword ptr [esi+18Ch]  +
call ds:SetWindowTextW  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [edi-10h] +
call sub_10018D0  +
cmp ebx 1 +
jz loc_10194DE  +
cmp ebx 7 +
jz loc_10194DE  +
cmp ebx 4 +
jz loc_10194DE  +
cmp ebx 0Ah +
jz loc_10194DE  +
cmp ebx 0Bh +
jz loc_10194DE  +
push 5  +
push dword ptr [esi+240h]  +
jmp loc_1019508  +
call ds:GetFocus  +
lea edi [esi+240h] +
cmp [edi] eax +
jnz loc_1019504  +
lea ebx [esi+218h] +
push dword ptr [ebx]  +
call ds:SetFocus  +
mov eax [ebx] +
mov [esi+2ACh] eax +
push 0  +
push dword ptr [edi]  +
call ds:ShowWindow  +
push dword ptr [ebp+8]  +
lea ecx [esi+0D4h] +
call sub_1016BAC  +
lea eax [ebp+8] +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
mov ecx esi +
call sub_1018884  +
mov ecx esi +
call sub_1017CDD  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1019557  +
test byte ptr [eax+1Ch] 4 +
jz loc_1019557  +
push offset dword_1008198  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
call __EH_epilog3  +
retn 4  +
***
call sub_1001939  +
mov esi ecx +
mov eax off_101F0C0 +
mov edi offset off_101F0C0 +
cmp eax edi +
jz loc_101959D  +
test byte ptr [eax+1Ch] 4 +
jz loc_101959D  +
push offset dword_1008198  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov eax off_101F0C0 +
mov ecx [ebp+10h] +
xor ebx ebx +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
mov [ebp-14h] ebx +
cmp ecx ebx +
jz loc_10195BE  +
mov ecx [ecx] +
mov [ebp-14h] ecx +
cmp ecx ebx +
jnz loc_10195DA  +
cmp eax edi +
jz loc_10195DA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10195DA  +
push offset dword_1008198  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
push dword ptr [esi+4]  +
call ds:GetDC  +
mov edi eax +
cmp edi ebx +
jz loc_101960E  +
push 4  +
push edi  +
call sub_100F9E2  +
push ebx  +
push edi  +
mov [esi+208h] eax +
call sub_100F9E2  +
push edi  +
push dword ptr [esi+4]  +
mov [esi+20Ch] eax +
call ds:ReleaseDC  +
lea ecx [esi+24h] +
call sub_1011FC5  +
mov edi offset WindowName +
test al al +
jz loc_1019649  +
push ebx  +
push ecx  +
mov eax esp +
mov [ebp+10h] esp +
push 10020h  +
push 56000000h  +
push edi  +
push ecx  +
mov [eax] ebx +
mov eax esp +
lea ecx [ebp-2Ch] +
mov [eax] ecx +
mov [ebp+10h] esp +
push dword ptr [esi+4]  +
lea ecx [esi+24h] +
call sub_1018F08  +
mov dword ptr [ebp+10h] 20h +
call sub_100FBEB  +
test al al +
jz loc_1019660  +
mov dword ptr [ebp+10h] 4020h +
push dword ptr [ebp-14h]  +
push ecx  +
mov eax esp +
mov [ebp-1Ch] esp +
push dword ptr [ebp+10h]  +
mov dword ptr [eax] 5Ah +
push 56310000h  +
push edi  +
push ecx  +
mov eax esp +
lea ecx [ebp-2Ch] +
mov [eax] ecx +
mov [ebp+10h] esp +
push dword ptr [esi+4]  +
lea ecx [esi+0D4h] +
call sub_1018F6A  +
push 20h  +
pop ecx  +
push ebx  +
push ecx  +
mov eax esp +
mov [ebp-1Ch] esp +
push ecx  +
push 50000003h  +
push offset aShieldicon  +
push ecx  +
mov dword ptr [eax] 60h +
mov eax esp +
mov [ebp+10h] ecx +
mov [ebp-1Ch] esp +
lea ecx [ebp-2Ch] +
mov [eax] ecx +
push dword ptr [esi+4]  +
lea ecx [esi+1B4h] +
push 1  +
push esi  +
call sub_10116BB  +
call sub_100FBEB  +
test al al +
jz loc_10196DB  +
mov dword ptr [ebp+10h] 400020h +
push ebx  +
push ecx  +
mov eax esp +
mov [ebp-1Ch] esp +
push dword ptr [ebp+10h]  +
mov dword ptr [eax] 5Bh +
push 56000000h  +
push edi  +
push ecx  +
mov eax esp +
mov [ebp-1Ch] esp +
lea ecx [ebp-2Ch] +
mov [eax] ecx +
push dword ptr [esi+4]  +
lea ecx [esi+164h] +
push 1  +
push esi  +
call sub_10116BB  +
push ebx  +
push ecx  +
mov eax esp +
mov [ebp-1Ch] esp +
push dword ptr [ebp+10h]  +
mov dword ptr [eax] 5Ch +
push 56000000h  +
push edi  +
push ecx  +
mov eax esp +
mov [ebp-1Ch] esp +
lea ecx [ebp-2Ch] +
mov [eax] ecx +
push dword ptr [esi+4]  +
lea ecx [esi+18Ch] +
push 1  +
push esi  +
call sub_10116BB  +
push ebx  +
push ecx  +
mov eax esp +
mov [ebp-1Ch] esp +
push dword ptr [ebp+10h]  +
mov dword ptr [eax] 61h +
push 56000000h  +
push edi  +
push ecx  +
mov eax esp +
mov [ebp+10h] esp +
lea ecx [ebp-2Ch] +
mov [eax] ecx +
push dword ptr [esi+4]  +
lea ecx [esi+1DCh] +
push 1  +
push esi  +
call sub_10116BB  +
push 3AFCh  +
call sub_100198C  +
push eax  +
lea ecx [esi+214h] +
call sub_100B9CE  +
mov [ebp+10h] ebx +
call sub_100FBEB  +
test al al +
jz loc_101979A  +
mov dword ptr [ebp+10h] 400000h +
push ebx  +
push ecx  +
mov eax esp +
mov [ebp-1Ch] esp +
push dword ptr [ebp+10h]  +
mov dword ptr [eax] 5Dh +
push 46010001h  +
push ebx  +
push ecx  +
mov eax esp +
mov [ebp-1Ch] esp +
lea ecx [ebp-2Ch] +
mov [eax] ecx +
push dword ptr [esi+4]  +
lea ecx [esi+218h] +
push 2  +
push esi  +
call sub_1018FCC  +
push ebx  +
push ecx  +
mov eax esp +
mov [ebp-1Ch] esp +
push dword ptr [ebp+10h]  +
mov edi 46010000h +
push edi  +
push ebx  +
push ecx  +
mov dword ptr [eax] 5Eh +
mov eax esp +
mov [ebp-1Ch] esp +
lea ecx [ebp-2Ch] +
mov [eax] ecx +
push dword ptr [esi+4]  +
lea ecx [esi+240h] +
push 2  +
push esi  +
call sub_1018FCC  +
push ebx  +
push ecx  +
mov eax esp +
mov [ebp-1Ch] esp +
push dword ptr [ebp+10h]  +
mov dword ptr [eax] 5Fh +
push edi  +
push ebx  +
push ecx  +
mov eax esp +
mov [ebp+10h] esp +
lea ecx [ebp-2Ch] +
mov [eax] ecx +
push dword ptr [esi+4]  +
lea ecx [esi+268h] +
push 2  +
push esi  +
mov [ebp+10h] ecx +
call sub_1018FCC  +
push offset dword_101F10C  +
lea ecx [ebp-10h] +
call sub_1001865  +
push 3A9Ch  +
mov [ebp-4] ebx +
call sub_100198C  +
push eax  +
lea ecx [ebp-10h] +
call sub_100B9CE  +
push dword ptr [ebp-10h]  +
mov edi ds:SetWindowTextW +
push dword ptr [esi+218h]  +
call edi  +
push 3AEFh  +
call sub_100198C  +
push eax  +
lea ecx [ebp-10h] +
call sub_100B9CE  +
push dword ptr [ebp-10h]  +
push dword ptr [esi+240h]  +
call edi  +
lea eax [ebp-10h] +
push eax  +
call sub_10104D9  +
push 1  +
push ebx  +
push 160Ch  +
push dword ptr [esi+240h]  +
mov [esi+290h] ax +
call ds:SendMessageW  +
push 3AF0h  +
call sub_100198C  +
push eax  +
lea ecx [ebp-10h] +
call sub_100B9CE  +
push dword ptr [ebp-10h]  +
mov eax [ebp+10h] +
push dword ptr [eax]  +
call edi  +
lea eax [ebp-10h] +
push eax  +
call sub_10104D9  +
mov [esi+292h] ax +
mov eax [esi+208h] +
cmp eax ebx +
jz loc_10198EB  +
push 1  +
push eax  +
lea ecx [esi+164h] +
call sub_1010C11  +
mov eax [esi+20Ch] +
cmp eax ebx +
jz loc_101994A  +
xor edi edi +
inc edi  +
push edi  +
push eax  +
lea ecx [esi+18Ch] +
call sub_1010C11  +
push edi  +
push dword ptr [esi+20Ch]  +
lea ecx [esi+1DCh] +
call sub_1010C11  +
push edi  +
push dword ptr [esi+20Ch]  +
lea ecx [esi+218h] +
call sub_1010C11  +
push edi  +
push dword ptr [esi+20Ch]  +
lea ecx [esi+240h] +
call sub_1010C11  +
mov ecx [ebp+10h] +
push edi  +
push dword ptr [esi+20Ch]  +
call sub_1010C11  +
cmp [ebp-14h] ebx +
jz loc_1019960  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_101938A  +
mov ecx esi +
call sub_10192D6  +
mov edi ds:ShowWindow +
lea eax [esi+218h] +
push 5  +
push dword ptr [eax]  +
mov [ebp-1Ch] eax +
call edi  +
mov eax [esi+160h] +
mov [ebp-18h] eax +
cmp eax 1 +
jz loc_101999B  +
cmp eax 7 +
jz loc_101999B  +
cmp eax 4 +
jz loc_101999B  +
cmp eax 0Ah +
jz loc_101999B  +
cmp eax 0Bh +
jz loc_101999B  +
push 5  +
jmp loc_101999C  +
push ebx  +
lea eax [esi+240h] +
push dword ptr [eax]  +
mov [ebp-14h] eax +
call edi  +
mov eax [esi+210h] +
cmp [eax-0Ch] ebx +
jle loc_10199D4  +
mov eax [ebp-18h] +
cmp eax 1 +
jz loc_10199D4  +
cmp eax 7 +
jz loc_10199D4  +
cmp eax 4 +
jz loc_10199D4  +
cmp eax 0Ah +
jz loc_10199D4  +
cmp eax 0Bh +
jz loc_10199D4  +
push 5  +
jmp loc_10199D5  +
push ebx  +
mov eax [ebp+10h] +
push dword ptr [eax]  +
call edi  +
mov eax [ebp+10h] +
push ebx  +
mov edi 10002h +
push edi  +
mov esi 127h +
push esi  +
push dword ptr [eax]  +
call ds:SendMessageW  +
mov eax [ebp-14h] +
push ebx  +
push edi  +
push esi  +
push dword ptr [eax]  +
call ds:SendMessageW  +
mov eax [ebp-1Ch] +
push ebx  +
push edi  +
push esi  +
push dword ptr [eax]  +
call ds:SendMessageW  +
mov eax off_101F0C0 +
cmp eax offset off_101F0C0 +
jz loc_1019A34  +
test byte ptr [eax+1Ch] 4 +
jz loc_1019A34  +
push offset dword_1008198  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AF26  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_10018D0  +
xor eax eax +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
mov eax [ebp+arg_C] +
mov dword ptr [eax] 1 +
jz loc_1019A83  +
push [ebp+arg_4]  +
call sub_101938A  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+1Ch] +
sub eax 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jz loc_1019B36  +
dec eax  +
jz loc_1019B05  +
dec eax  +
jnz loc_1019D5C  +
cmp dword ptr [ebp+0Ch] 14h +
jz loc_1019B0B  +
mov eax 100h +
cmp [ebp+0Ch] eax +
jnz loc_1019AE3  +
lea ecx [ebp+1Ch] +
push ecx  +
push dword ptr [ebp+14h]  +
xor esi esi +
push dword ptr [ebp+10h]  +
inc esi  +
push eax  +
push dword ptr [ebp+8]  +
mov ecx ebx +
mov [ebp+1Ch] esi +
call sub_101859B  +
mov ecx [ebp+18h] +
mov [ecx] eax +
jmp loc_1019D9F  +
mov ecx 104h +
cmp [ebp+0Ch] ecx +
jnz loc_1019D5C  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_10179FA  +
jmp loc_1019B54  +
cmp dword ptr [ebp+0Ch] 14h +
jnz loc_1019B16  +
mov eax [ebp+18h] +
xor esi esi +
inc esi  +
jmp loc_1019C68  +
cmp dword ptr [ebp+0Ch] 0Fh +
jnz loc_1019D5C  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 0Fh  +
push dword ptr [ebp+8]  +
call sub_1014CCB  +
jmp loc_1019B54  +
mov eax [ebp+0Ch] +
mov ecx 113h +
cmp eax ecx +
jnz loc_1019B61  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_1018088  +
mov ecx [ebp+18h] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_1019D5E  +
xor esi esi +
inc esi  +
cmp eax esi +
jnz loc_1019B86  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push esi  +
call sub_1019564  +
mov ecx [ebp+18h] +
mov [ecx] eax +
mov eax esi +
jmp loc_1019D5E  +
mov edi [ebp+18h] +
cmp eax 2 +
jnz loc_1019BD1  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
mov [ebp+1Ch] esi +
push 2  +
call sub_1017871  +
cmp dword ptr [ebp+1Ch] 0 +
mov [edi] eax +
jnz loc_1019B7F  +
mov eax [ebp+0Ch] +
cmp eax dword_101F0D8 +
jnz loc_1019D4D  +
lea ecx [ebp+1Ch] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1017CB7  +
mov [edi] eax +
jmp loc_1019B7F  +
***
cmp eax 6 +
jnz loc_1019BEE  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
mov [ebp+1Ch] esi +
push 6  +
call sub_1017A63  +
jmp loc_1019BA4  +
***
cmp eax 5 +
jnz loc_1019C0D  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push 5  +
call sub_1018884  +
mov ecx edi +
jmp loc_1019B7D  +
***
cmp eax 0Fh +
jnz loc_1019C27  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push 0Fh  +
call sub_1017AC7  +
jmp loc_1019C06  +
***
mov ecx 317h +
cmp eax ecx +
jnz loc_1019C44  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_1018612  +
jmp loc_1019C06  +
***
mov ecx 318h +
cmp eax ecx +
jnz loc_1019C61  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_1018612  +
jmp loc_1019C06  +
***
cmp eax 14h +
jnz loc_1019C6F  +
mov eax edi +
mov [eax] esi +
jmp loc_1019B7F  +
***
cmp eax 24h +
jnz loc_1019C8C  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push 24h  +
call sub_1017C6D  +
jmp loc_1019C06  +
***
mov ecx 138h +
cmp eax ecx +
jnz loc_1019CAF  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp+1Ch] esi +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_101792F  +
jmp loc_1019BA4  +
***
mov ecx 135h +
cmp eax ecx +
jnz loc_1019CD2  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp+1Ch] esi +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_1014C9D  +
jmp loc_1019BA4  +
***
cmp eax 15h +
jnz loc_1019CF2  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
mov [ebp+1Ch] esi +
push 15h  +
call sub_1018575  +
jmp loc_1019BA4  +
***
mov ecx 464h +
cmp eax ecx +
jnz loc_1019D15  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp+1Ch] esi +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_1017A41  +
jmp loc_1019BA4  +
***
mov ecx 111h +
cmp eax ecx +
jnz loc_1019D38  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp+1Ch] esi +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_1018C8D  +
jmp loc_1019BA4  +
***
cmp eax 400h +
jnz loc_1019BAF  +
mov eax edi +
and dword ptr [eax] 0 +
jmp loc_1019B7F  +
***
cmp eax 7Eh +
jnz loc_1019D65  +
mov ecx ebx +
call sub_1017CDD  +
and dword ptr [edi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
cmp eax 7 +
jnz loc_1019D82  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push 7  +
call sub_1017E2C  +
jmp loc_1019BCD  +
***
cmp eax 1Ah +
jnz loc_1019DAB  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
mov [ebp+1Ch] esi +
push 1Ah  +
call sub_1017E92  +
mov [edi] eax +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_1019B7F  +
jmp loc_1019D5C  +
***
mov ecx 979h +
cmp eax ecx +
jnz loc_1019DCB  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp+1Ch] esi +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_1019A67  +
jmp loc_1019D9D  +
***
cmp eax 128h +
jz loc_1019D59  +
mov ecx 127h +
cmp eax ecx +
jnz loc_1019DF3  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
lea eax [ebp+10h] +
push eax  +
push ecx  +
mov ecx ebx +
mov [ebp+1Ch] esi +
call sub_10179C2  +
jmp loc_1019D9D  +
***
mov ecx 104h +
cmp eax ecx +
jnz loc_1019D5C  +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_1017EB3  +
jmp loc_1019BCD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+hModule] +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [ebp+arg_4] +
sub edi [eax+0Ch] +
mov eax [eax+10h] +
mov ecx offset __ImageBase +
sub edi ecx +
sar edi 2 +
add esi ecx +
mov edx [esi] +
lea eax __ImageBase[eax+edi*4] +
add ebx ecx +
mov ecx [eax] +
mov [ebp+hModule] edx +
lea eax (__ImageBase+2)[ecx] +
test ecx ecx +
jns loc_1019E66  +
movzx eax cx +
mov [ebp+lpProcName] eax +
test edx edx +
jnz loc_1019EE5  +
push edx  +
push edx  +
push ebx  +
call LoadLibraryExA  +
mov edi eax +
mov [ebp+hModule] edi +
test edi edi +
jz loc_1019EC3  +
push 0  +
push edi  +
push esi  +
call InterlockedCompareExchange  +
mov esi eax +
test esi esi +
jnz loc_1019EB8  +
push 8  +
pop ecx  +
lea edi [ebp+var_28] +
stos   +
mov eax [ebp+hModule] +
mov [ebp+var_14] eax +
mov eax ds:dword_1019F48 +
mov [ebp+var_2C] 24h +
mov [ebp+var_20] ebx +
test eax eax +
jz loc_1019EE5  +
lea ecx [ebp+var_2C] +
push ecx  +
push 5  +
call eax  +
jmp loc_1019EE5  +
push edi  +
call FreeLibrary  +
mov [ebp+hModule] esi +
jmp loc_1019EE5  +
call GetLastError  +
cmp eax 7Eh +
jz loc_1019ED4  +
cmp eax 0C1h +
jnz loc_1019F27  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call InterlockedCompareExchange  +
test eax eax +
jz loc_1019EEB  +
mov [ebp+hModule] eax +
cmp [ebp+hModule] 0FFFFFFFFh +
jnz loc_1019EF4  +
mov [ebp+var_4] 1 +
jmp loc_1019F27  +
cmp [ebp+hModule] 0 +
jz loc_1019F27  +
push [ebp+lpProcName]  +
push [ebp+hModule]  +
call GetProcAddress  +
mov esi eax +
test esi esi +
jnz loc_1019F1C  +
call GetLastError  +
cmp eax 7Fh +
jz loc_1019F1C  +
cmp eax 0B6h +
jnz loc_1019F23  +
mov [ebp+var_4] 1 +
test esi esi +
jnz loc_1019F32  +
push [ebp+lpProcName]  +
push ebx  +
call DelayLoadFailureHook  +
mov esi eax +
cmp [ebp+var_4] 0 +
jz loc_1019F3D  +
mov eax [ebp+arg_4] +
mov [eax] esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+18h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [esi+34h] +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jg loc_1019FF3  +
test ecx ecx +
jl loc_1019FF3  +
cmp ecx eax +
jnz loc_1019FE6  +
mov esi [esi+8] +
push edi  +
call ds:LeaveCriticalSection  +
mov eax esi +
jmp loc_1019FFC  +
push ecx  +
lea ecx [esi+30h] +
call sub_1019F82  +
mov esi [eax] +
jmp loc_1019FDB  +
push edi  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005D59  +
test byte ptr [ebp+8] 1 +
jz loc_101A03D  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001834 +
jz loc_101A064  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10207B0 +
push [ebp+lpMem]  +
cmp eax 1 +
jnz loc_101A093  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_101A09A  +
push eax  +
call dword_10207B4  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push edi  +
push offset aKernel32_dll  +
call ds:LoadLibraryA  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jnz loc_101A0C1  +
xor eax eax +
jmp loc_101A181  +
push esi  +
mov esi ds:__imp_GetProcAddress +
push offset aIsprocessorfea  +
push edi  +
call esi  +
cmp eax ebx +
jz loc_101A0DA  +
push 0Ch  +
call eax  +
jmp loc_101A0DC  +
xor eax eax +
cmp eax ebx +
jnz loc_101A0ED  +
xor eax eax +
inc eax  +
mov dword_10207B0 eax +
jmp loc_101A180  +
push offset aInterlockedpop  +
push edi  +
call esi  +
push offset aInterlockedpus  +
push edi  +
mov dword_10207B8 eax +
call esi  +
push offset aInterlockedcom  +
push edi  +
mov dword_10207B4 eax +
call esi  +
mov dword_10207BC eax +
cmp dword_10207B4 ebx +
jz loc_101A17E  +
cmp dword_10207B8 ebx +
jz loc_101A17E  +
cmp eax ebx +
jz loc_101A17E  +
mov eax large fs:18h +
mov esi [eax+30h] +
add esi 34h +
mov eax [esi] +
cmp eax ebx +
jnz loc_101A174  +
push 8  +
push ebx  +
mov ebx ds:GetProcessHeap +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
xor eax eax +
cmp edi eax +
jz loc_101A17E  +
push eax  +
push edi  +
push esi  +
mov [edi] eax +
mov [edi+4] eax +
call dword_10207BC  +
test eax eax +
jz loc_101A172  +
push edi  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
mov eax [esi] +
mov dword_10207B0 eax +
xor eax eax +
inc eax  +
jmp loc_101A180  +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_101A070  +
***
cmp dword_10207B0 0 +
push esi  +
jnz loc_101A229  +
call sub_101A0A3  +
test eax eax +
jz loc_101A26C  +
mov eax dword_10207B0 +
cmp eax 1 +
jnz loc_101A24A  +
push 0Dh  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_101A26C  +
pop esi  +
retn   +
push eax  +
call dword_10207B8  +
test eax eax +
jnz loc_101A2B4  +
push 40h  +
mov eax 1000h +
push eax  +
push eax  +
push 0  +
call ds:VirtualAlloc  +
mov esi eax +
test esi esi +
jnz loc_101A270  +
xor eax eax +
pop esi  +
retn   +
mov eax [esi] +
push edi  +
push dword_10207B0  +
call dword_10207B8  +
mov edi eax +
test edi edi +
jz loc_101A295  +
push 8000h  +
push 0  +
push esi  +
call ds:VirtualFree  +
jmp loc_101A2B1  +
mov edi esi +
add esi 0FF0h +
push edi  +
push dword_10207B0  +
call dword_10207B4  +
add edi 10h +
cmp edi esi +
jb loc_101A29D  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0exception@@QAE@XZ  +
cmp dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_10081C8 +
jnz loc_101A2DF  +
cmp dword ptr [esi+8] 0 +
jnz loc_101A2DF  +
mov eax off_102073C +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
mov dword ptr [ecx] offset off_10081C8 +
jmp ??1exception@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ??0exception@@QAE@ABV0@@Z  +
mov dword ptr [esi] offset off_10081C8 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ecx  +
lea ecx [ebp-0Ch] +
call sub_101A2F8  +
push offset dword_101CEC4  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10081C8 +
call ??1exception@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_101A37E  +
push esi  +
call sub_10019EE  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1004E24  +
and dword ptr [ebp-4] 0 +
dec dword ptr [ebp+10h]  +
js loc_101A3DA  +
mov ecx [ebp+8] +
sub ecx [ebp+0Ch] +
mov [ebp+8] ecx +
call dword ptr [ebp+14h]  +
jmp loc_101A39A  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_101A3D1  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
call ds:?terminate@@YAXXZ  +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1004C2C  +
retn 10h  +
***
call sub_1004E24  +
and dword ptr [ebp-1Ch] 0 +
mov esi [ebp+0Ch] +
mov eax esi +
imul eax [ebp+10h] +
add [ebp+8] eax +
and dword ptr [ebp-4] 0 +
dec dword ptr [ebp+10h]  +
js loc_101A441  +
sub [ebp+8] esi +
mov ecx [ebp+8] +
call dword ptr [ebp+14h]  +
jmp loc_101A431  +
mov dword ptr [ebp-1Ch] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_101A461  +
call sub_1004C2C  +
retn 10h  +
***
cmp dword ptr [ebp-1Ch] 0 +
jnz locret_101A478  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101A38A  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp ecx esi +
jbe loc_101A4EE  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax [ebp+arg_8] +
jnb loc_101A4EE  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 0Ch +
call sub_101A926  +
add esp 14h +
xor eax eax +
jmp loc_101A4FD  +
imul ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_0]  +
call realloc  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101F0C4 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_10019B3  +
jmp __EH_epilog3  +
***
jmp ds:_purecall  +
***
call sub_1004E24  +
xor eax eax +
mov [ebp-20h] eax +
mov [ebp-4] eax +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
cmp eax [ebp+10h] +
jge loc_101A5AC  +
mov esi [ebp+8] +
mov ecx esi +
call dword ptr [ebp+14h]  +
add esi [ebp+0Ch] +
mov [ebp+8] esi +
inc dword ptr [ebp-1Ch]  +
jmp loc_101A591  +
mov dword ptr [ebp-20h] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_101A5CC  +
call sub_1004C2C  +
retn 14h  +
***
cmp dword ptr [ebp-20h] 0 +
jnz locret_101A5E3  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101A38A  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10019B3  +
push offset dword_101F0C4  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ??2@YAPAXIABUnothrow_t@std@@@Z  +
***
jmp ds:?what@exception@@UBEPBDXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_101A70D  +
cmp dword ptr [eax+10h] 3 +
jnz loc_101A70D  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_101A707  +
cmp eax 19930521h +
jz loc_101A707  +
cmp eax 19930522h +
jz loc_101A707  +
cmp eax 1994000h +
jnz loc_101A70D  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_101A739  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_101A735  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_101A79A  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_101A792  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_101A79C  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_101A782  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_1004E24  +
and dword ptr [ebp-4] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_101A723  +
pop ecx  +
test eax eax +
jz loc_101A803  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_101A75D  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101A803  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_101A80C  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_1004C2C  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_101F0C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10019B3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_101A84F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_101F5F8 eax +
mov dword_101F5F4 ecx +
mov dword_101F5F0 edx +
mov dword_101F5EC ebx +
mov dword_101F5E8 esi +
mov dword_101F5E4 edi +
mov word_101F610 ss +
mov word_101F604 cs +
mov word_101F5E0 ds +
mov word_101F5DC es +
mov word_101F5D8 fs +
mov word_101F5D4 gs +
pushf   +
pop dword_101F608  +
mov eax [ebp+0] +
mov dword_101F5FC eax +
mov eax [ebp+4] +
mov dword_101F600 eax +
lea eax [ebp+8] +
mov dword_101F60C eax +
mov eax [ebp-320h] +
mov dword_101F548 10001h +
mov eax dword_101F600 +
mov dword_101F504 eax +
mov dword_101F4F8 0C0000409h +
mov dword_101F4FC 1 +
mov eax dword_101F0C4 +
mov [ebp-328h] eax +
mov eax dword_101F0C8 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
and dword ptr [ebp-14h] 0 +
mov eax offset $LN7 +
retn   +
***
mov eax offset QueryServiceStatus +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset dword_101CF14  +
call sub_1019E1C  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset CloseServiceHandle +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset dword_101CF34  +
call sub_1019E1C  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset OpenServiceW +
jmp loc_101AAE1  +
***
mov eax offset OpenSCManagerW +
jmp loc_101AAE1  +
***
mov eax offset SHGetFolderPathW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset SHELL32_dll_import_table  +
call sub_1019E1C  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset CommandLineToArgvW +
jmp loc_101AB07  +
***
mov eax offset Shell_NotifyIconW +
jmp loc_101AB07  +
***
mov eax offset ShellExecuteW +
jmp loc_101AB07  +
***
mov eax offset SysFreeString +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset OLEAUT32_dll_import_table  +
call sub_1019E1C  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset SysAllocString +
jmp loc_101ACAA  +
***
mov eax offset VariantInit +
jmp loc_101ACAA  +
***
mov eax offset VariantClear +
jmp loc_101ACAA  +
***
mov eax offset SysStringLen +
jmp loc_101ACAA  +
***
mov eax offset LoadRegTypeLib +
jmp loc_101ACAA  +
***
mov eax offset LoadTypeLib +
jmp loc_101ACAA  +
***
mov eax offset VarUI4FromStr +
jmp loc_101ACAA  +
***
mov eax offset SysAllocStringLen +
jmp loc_101ACAA  +
***
mov eax offset StrCmpW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset SHLWAPI_dll_import_table  +
call sub_1019E1C  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset CoCreateInstance +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset ole32_dll_import_table  +
call sub_1019E1C  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset CoTaskMemFree +
jmp loc_101AD12  +
***
mov eax offset CoUninitialize +
jmp loc_101AD12  +
***
mov eax offset CoInitialize +
jmp loc_101AD12  +
***
mov eax offset CoTaskMemAlloc +
jmp loc_101AD12  +
***
mov eax offset CoTaskMemRealloc +
jmp loc_101AD12  +
***
mov eax offset CoInitializeEx +
jmp loc_101AD12  +
***
mov eax offset CoGetObject +
jmp loc_101AD12  +
***
mov eax offset StringFromGUID2 +
jmp loc_101AD12  +
***
retn   +
***
stc   +
fdivp st(7) st +
jmp dword ptr [edx]  +
***
popf   +
fdivp st(7) st +
jmp dword ptr [edx]  +
***
dec ecx  +
fdivp st(7) st +
jmp dword ptr [edx]  +
***
mov dword_10207C0 offset off_10081C8 +
mov ecx offset dword_10207C0 +
jmp ??1exception@@UAE@XZ  +
***
mov dword_10207D0 offset off_10081C8 +
mov ecx offset dword_10207D0 +
jmp ??1exception@@UAE@XZ  +
***
