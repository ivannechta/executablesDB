sahf   +
add [eax+16B800h] ah +
add [eax+0B200h] esi +
push ss  +
add [ecx] al +
retn 0C400h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_1001C4E  +
dec eax  +
jz loc_1001C45  +
push 57h  +
pop eax  +
jmp loc_1001CBC  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_1001C74  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_1001C9D  +
cmp dword ptr [esi+10h] 0 +
jz loc_1001C9D  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_1001CBA  +
test cl 2 +
jz loc_1001CAB  +
mov esi [esi+10h] +
test esi esi +
jz loc_1001CAB  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_1006000 +
push edi  +
mov edi offset dword_1006078 +
jmp loc_1001D07  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_1001C1F  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_1001CDE  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi off_1006000 +
push edi  +
mov edi offset off_1006000 +
cmp esi edi +
jz loc_1001D53  +
jmp loc_1001D49  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_1001D47  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_1001D2B  +
mov off_1006000 edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jle loc_1001D73  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl loc_1001D7A  +
mov eax 80004005h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1006004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
xor eax eax +
mov [ebp+Value] ax +
lea eax [ebp+Value] +
push eax  +
push 1  +
push 0  +
push 1Ch  +
push 0  +
call SHGetFolderPathW  +
mov esi eax +
test esi esi +
jge loc_1001DD9  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1001E26  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001E26  +
push esi  +
push offset dword_1001268  +
push 0Ah  +
jmp loc_1001E17  +
lea eax [ebp+Value] +
push eax  +
push offset Name  +
call ds:SetEnvironmentVariableW  +
test eax eax +
jnz loc_1001E24  +
call ds:__imp_GetLastError  +
push eax  +
call sub_1001D5B  +
mov esi eax +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1001E26  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001E26  +
push esi  +
push offset dword_1001268  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
jmp loc_1001E26  +
xor esi esi +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1002D9E  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor esi esi +
inc esi  +
push 2  +
mov [ebp+var_4] esi +
call ds:SetErrorMode  +
xor edi edi +
push edi  +
push edi  +
push esi  +
push edi  +
call ds:HeapSetInformation  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFFDh +
cmp eax 0Ch +
ja loc_1001F63  +
call ds:GetCurrentProcess  +
push eax  +
call sub_100406C  +
mov esi eax +
push esi  +
push offset aWerfaultsecure  +
call DbgPrint  +
pop ecx  +
pop ecx  +
cmp esi edi +
jz loc_1001F87  +
mov esi offset unk_1006058 +
push esi  +
call sub_1001BF7  +
push offset aMicrosoftWindo  +
mov dword_1006078 offset dword_1001258 +
mov off_1006000 esi +
call sub_1001CC8  +
call sub_1001D83  +
mov edi [ebp+arg_4] +
lea ebx [edi+4] +
mov esi [ebx] +
mov ecx offset aU +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1001EEE  +
test dx dx +
jz loc_1001EEA  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1001EEE  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1001EC8  +
xor eax eax +
jmp loc_1001EF3  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1001F02  +
push edi  +
push [ebp+arg_0]  +
call sub_10040CA  +
jmp loc_1001F43  +
mov ecx offset asc_1001284 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1001F2F  +
test dx dx +
jz loc_1001F2B  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1001F2F  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1001F09  +
xor eax eax +
jmp loc_1001F34  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1001F48  +
mov eax [ebp+arg_0] +
push ebx  +
dec eax  +
push eax  +
call sub_1002809  +
mov [ebp+var_4] eax +
jmp loc_1001F87  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1001F87  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001F87  +
push offset dword_1001268  +
push 0Dh  +
jmp loc_1001F7C  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1001F87  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001F87  +
push offset dword_1001268  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
call sub_1001D16  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push [ebp+lpString2]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov ecx [ebp+arg_8] +
xor eax eax +
mov [ecx] eax +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
mov ecx [ebp+arg_14] +
or dword ptr [ecx] 0FFFFFFFFh +
mov ecx [ebp+arg_18] +
or dword ptr [ecx] 0FFFFFFFFh +
cmp [ebp+arg_0] eax +
mov ecx [ebp+arg_1C] +
push ebx  +
push esi  +
push edi  +
mov [ecx] eax +
mov [ebp+var_8] 80070057h +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
mov [ebp+var_4] eax +
jle loc_100219B  +
mov edi [ebp+arg_4] +
mov esi [ebp+var_4] +
shl esi 2 +
push offset String2  +
lea ebx [esi+edi] +
push dword ptr [ebx]  +
call sub_1001FCB  +
cmp eax 2 +
jnz loc_100205D  +
mov eax [ebp+arg_0] +
dec eax  +
cmp [ebp+var_4] eax +
jge loc_10021EB  +
push [ebp+arg_8]  +
jmp loc_10020A1  +
push offset aTid  +
push dword ptr [ebx]  +
call sub_1001FCB  +
cmp eax 2 +
jnz loc_1002080  +
mov eax [ebp+arg_0] +
dec eax  +
cmp [ebp+var_4] eax +
jge loc_100221C  +
push [ebp+arg_C]  +
jmp loc_10020A1  +
push offset aType  +
push dword ptr [ebx]  +
call sub_1001FCB  +
cmp eax 2 +
jnz loc_10020DC  +
mov eax [ebp+arg_0] +
dec eax  +
cmp [ebp+var_4] eax +
jge loc_100223F  +
push [ebp+piRet]  +
push 0  +
push dword ptr [esi+edi+4]  +
call StrToIntExW  +
test eax eax +
jnz loc_100218C  +
mov ecx [ebp+arg_C] +
xor eax eax +
mov [ecx] eax +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov ecx [ebp+arg_14] +
or dword ptr [ecx] 0FFFFFFFFh +
mov ecx [ebp+arg_18] +
or dword ptr [ecx] 0FFFFFFFFh +
mov ecx [ebp+arg_1C] +
mov [ecx] eax +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
push offset aFile  +
push dword ptr [ebx]  +
call sub_1001FCB  +
cmp eax 2 +
jnz loc_1002113  +
mov eax [ebp+arg_0] +
dec eax  +
cmp [ebp+var_4] eax +
jge loc_1002262  +
lea eax [ebp+var_10] +
push eax  +
push 0  +
push dword ptr [esi+edi+4]  +
call StrToInt64ExW  +
test eax eax +
jz loc_10020B5  +
mov ecx [ebp+arg_14] +
jmp loc_1002187  +
push offset aEncfile  +
push dword ptr [ebx]  +
call sub_1001FCB  +
cmp eax 2 +
jnz loc_100214E  +
mov eax [ebp+arg_0] +
dec eax  +
cmp [ebp+var_4] eax +
jge loc_1002285  +
lea eax [ebp+var_10] +
push eax  +
push 0  +
push dword ptr [esi+edi+4]  +
call StrToInt64ExW  +
test eax eax +
jz loc_10020B5  +
mov ecx [ebp+arg_18] +
jmp loc_1002187  +
push offset aCancel  +
push dword ptr [ebx]  +
call sub_1001FCB  +
cmp eax 2 +
jnz loc_100218C  +
mov eax [ebp+arg_0] +
dec eax  +
cmp [ebp+var_4] eax +
jge loc_10022AB  +
lea eax [ebp+var_10] +
push eax  +
push 0  +
push dword ptr [esi+edi+4]  +
call StrToInt64ExW  +
test eax eax +
jz loc_10020B5  +
mov ecx [ebp+arg_1C] +
mov eax [ebp+var_10] +
mov [ecx] eax +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_0] +
jl loc_1002031  +
mov eax [ebp+arg_8] +
xor ecx ecx +
cmp [eax] ecx +
jz loc_10020B5  +
mov eax [ebp+piRet] +
mov eax [eax] +
cmp eax ecx +
jz loc_10020B5  +
mov edx [ebp+arg_1C] +
cmp [edx] ecx +
jz loc_10020B5  +
mov edx [ebp+arg_14] +
cmp dword ptr [edx] 0FFFFFFFFh +
jz loc_10020B5  +
mov edx [ebp+arg_18] +
cmp dword ptr [edx] 0FFFFFFFFh +
jz loc_10020B5  +
test eax 0FFF80000h +
jnz loc_10020B5  +
mov [ebp+var_8] ecx +
jmp loc_10020D2  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_10020B5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10020B5  +
push offset dword_1001330  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
jmp loc_10020B5  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_10020B5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10020B5  +
push offset dword_1001330  +
push 0Bh  +
jmp loc_100220C  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_10020B5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10020B5  +
push offset dword_1001330  +
push 0Ch  +
jmp loc_100220C  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_10020B5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10020B5  +
push offset dword_1001330  +
push 0Dh  +
jmp loc_100220C  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_10020B5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10020B5  +
push offset dword_1001330  +
push 0Eh  +
jmp loc_100220C  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_10020B5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10020B5  +
push offset dword_1001330  +
push 0Fh  +
jmp loc_100220C  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_1003344  +
or dword ptr [esi+740h] 0FFFFFFFFh +
or dword ptr [esi+744h] 0FFFFFFFFh +
xor eax eax +
push esi  +
mov [esi+734h] eax +
mov [esi+738h] eax +
mov [esi+748h] eax +
mov [esi+74Ch] eax +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push esi  +
call ds:EnterCriticalSection  +
mov eax [esi+74Ch] +
test eax eax +
jz loc_100233C  +
push 0  +
push 0  +
push eax  +
call ds:SetThreadpoolWait  +
lea ecx [esi+18h] +
call sub_10033B8  +
push esi  +
call ds:LeaveCriticalSection  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
call sub_100231B  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov esi ecx +
push esi  +
call ds:EnterCriticalSection  +
mov eax [esi+74Ch] +
xor edi edi +
cmp eax edi +
jz loc_1002390  +
push edi  +
push edi  +
push eax  +
call ds:SetThreadpoolWait  +
lea eax [esi+748h] +
mov ecx [eax] +
mov [ebp+hObject] ecx +
mov [eax] edi +
lea eax [esi+740h] +
mov ecx [eax] +
or dword ptr [eax] 0FFFFFFFFh +
mov [ebp+var_8] ecx +
lea ecx [esi+744h] +
mov edx [ecx] +
or dword ptr [ecx] 0FFFFFFFFh +
push ebx  +
mov ebx [esi+74Ch] +
lea ecx [esi+18h] +
mov [esi+74Ch] edi +
mov [ebp+var_C] edx +
mov [esi+734h] edi +
mov [esi+738h] edi +
call sub_10033DC  +
push esi  +
call ds:LeaveCriticalSection  +
cmp ebx edi +
jz loc_10023FE  +
push edi  +
push edi  +
push ebx  +
call ds:SetThreadpoolWait  +
push 1  +
push ebx  +
call ds:WaitForThreadpoolWaitCallbacks  +
push ebx  +
call ds:CloseThreadpoolWait  +
mov esi ds:CloseHandle +
pop ebx  +
cmp [ebp+hObject] edi +
jz loc_100240F  +
push [ebp+hObject]  +
call esi  +
cmp [ebp+var_8] 0FFFFFFFFh +
jz loc_100241A  +
push [ebp+var_8]  +
call esi  +
cmp [ebp+var_C] 0FFFFFFFFh +
jz loc_1002425  +
push [ebp+var_C]  +
call esi  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1002444  +
cmp ecx 7FFFFFFFh +
jbe loc_1002449  +
mov eax 80070057h +
test eax eax +
jl loc_1002486  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1002476  +
cmp eax esi +
ja loc_1002476  +
jnz loc_1002481  +
jmp loc_100247B  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
call sub_1002368  +
push esi  +
call ds:DeleteCriticalSection  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+18h] +
call sub_1003699  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 418h +
mov eax dword_1006004 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+hLibModule] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi 104h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetSystemDirectoryW  +
test eax eax +
jz loc_1002614  +
cmp eax esi +
ja loc_1002614  +
lea eax [ebp+Buffer] +
push eax  +
push offset aSEncdump_dll  +
lea eax [ebp+LibFileName] +
push esi  +
push eax  +
call sub_100242E  +
mov esi eax +
add esp 10h +
test esi esi +
jge loc_1002561  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1002664  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002664  +
push esi  +
push offset dword_1001330  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
jmp loc_1002664  +
lea eax [ebp+LibFileName] +
push eax  +
call ds:LoadLibraryW  +
mov [ebp+hLibModule] eax +
test eax eax +
jnz loc_10025A0  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_100259C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100259C  +
push offset dword_1001330  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
push 7Eh  +
jmp loc_10025D6  +
push offset ProcName  +
push eax  +
call ds:__imp_GetProcAddress  +
test eax eax +
jnz loc_10025DF  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_10025D4  +
test byte ptr [eax+1Ch] 1 +
jz loc_10025D4  +
push offset dword_1001330  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
push 7Fh  +
call sub_1001D5B  +
mov esi eax +
jmp loc_100264F  +
push ebx  +
push edi  +
call eax  +
mov esi eax +
test esi esi +
jge loc_1002610  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_100264F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100264F  +
push esi  +
push offset dword_1001330  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
jmp loc_100264F  +
xor esi esi +
jmp loc_100264F  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1002628  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1002664  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002664  +
push esi  +
push offset dword_1001330  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
cmp [ebp+hLibModule] 0 +
jz loc_1002664  +
push [ebp+hLibModule]  +
call ds:__imp_FreeLibrary  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002D9E  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push esi  +
call ds:EnterCriticalSection  +
mov eax [ebp+arg_8] +
mov edi [ebp+arg_0] +
mov ebx [ebp+arg_4] +
mov [esi+73Ch] eax +
mov eax [ebp+arg_C] +
mov [esi+740h] eax +
mov eax [ebp+arg_10] +
mov [esi+744h] eax +
mov eax [ebp+hHandle] +
push 0  +
push eax  +
mov [esi+734h] edi +
mov [esi+738h] ebx +
mov [esi+748h] eax +
call ds:WaitForSingleObject  +
test eax eax +
jnz loc_10026D4  +
xor edi edi +
jmp loc_100274F  +
push 0  +
push esi  +
push offset loc_1002352  +
call ds:CreateThreadpoolWait  +
mov [esi+74Ch] eax +
test eax eax +
jnz loc_1002729  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1002700  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1002744  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002744  +
push edi  +
push offset dword_1001330  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
jmp loc_1002744  +
push 0  +
push dword ptr [esi+748h]  +
push eax  +
call ds:SetThreadpoolWait  +
push ebx  +
push edi  +
lea ecx [esi+18h] +
call sub_10036B1  +
mov edi eax +
test edi edi +
jge loc_100274F  +
mov ecx esi +
call sub_1002368  +
push esi  +
call ds:LeaveCriticalSection  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push esi  +
call ds:EnterCriticalSection  +
mov eax [esi+738h] +
neg eax  +
sbb eax eax +
and eax 0F0000000h +
add eax 0DFFFFFFFh +
push eax  +
push dword ptr [esi+740h]  +
lea ecx [esi+18h] +
push dword ptr [esi+73Ch]  +
call sub_1003B9C  +
mov edi eax +
test edi edi +
jge loc_10027BC  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_10027F8  +
test byte ptr [eax+1Ch] 1 +
jz loc_10027F8  +
push edi  +
push offset dword_1001330  +
push 19h  +
jmp loc_10027ED  +
push dword ptr [esi+744h]  +
push dword ptr [esi+740h]  +
call sub_10024C5  +
mov edi eax +
test edi edi +
jge loc_10027F8  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_10027F8  +
test byte ptr [eax+1Ch] 1 +
jz loc_10027F8  +
push edi  +
push offset dword_1001330  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
push esi  +
call ds:LeaveCriticalSection  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
call __EH_prolog3_GS  +
mov esi [ebp+0Ch] +
and dword ptr [ebp-764h] 0 +
and dword ptr [ebp-76Ch] 0 +
or dword ptr [ebp-768h] 0FFFFFFFFh +
or dword ptr [ebp-770h] 0FFFFFFFFh +
and dword ptr [ebp-774h] 0 +
lea ecx [ebp-760h] +
call sub_10022D6  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-774h] +
push eax  +
lea eax [ebp-770h] +
push eax  +
lea eax [ebp-768h] +
push eax  +
lea eax [ebp-778h] +
push eax  +
lea eax [ebp-76Ch] +
push eax  +
lea eax [ebp-764h] +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
call sub_1001FED  +
mov esi eax +
test esi esi +
jge loc_10028B7  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_100294F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100294F  +
push offset dword_1001330  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
jmp loc_100294F  +
push dword ptr [ebp-774h]  +
lea ecx [ebp-760h] +
push dword ptr [ebp-770h]  +
push dword ptr [ebp-768h]  +
push dword ptr [ebp-778h]  +
push dword ptr [ebp-76Ch]  +
push dword ptr [ebp-764h]  +
call sub_100267C  +
mov esi eax +
test esi esi +
jge loc_1002913  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_100294F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100294F  +
push esi  +
push offset dword_1001330  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
jmp loc_100294F  +
lea ecx [ebp-760h] +
call sub_1002764  +
mov esi eax +
test esi esi +
jge loc_100294F  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_100294F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100294F  +
push esi  +
push dword ptr [ebp-764h]  +
push offset dword_1001330  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001F99  +
lea ecx [ebp-760h] +
call sub_1002368  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-760h] +
call sub_100248D  +
mov eax esi +
call sub_1002E86  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+hModule] +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [ebp+arg_4] +
sub edi [eax+0Ch] +
mov eax [eax+10h] +
mov ecx offset __ImageBase +
sub edi ecx +
sar edi 2 +
add esi ecx +
mov edx [esi] +
lea eax __ImageBase[eax+edi*4] +
add ebx ecx +
mov ecx [eax] +
mov [ebp+hModule] edx +
lea eax (__ImageBase+2)[ecx] +
test ecx ecx +
jns loc_10029C2  +
movzx eax cx +
mov [ebp+lpProcName] eax +
test edx edx +
jnz loc_1002A41  +
push edx  +
push edx  +
push ebx  +
call LoadLibraryExA  +
mov edi eax +
mov [ebp+hModule] edi +
test edi edi +
jz loc_1002A1F  +
push 0  +
push edi  +
push esi  +
call InterlockedCompareExchange  +
mov esi eax +
test esi esi +
jnz loc_1002A14  +
push 8  +
pop ecx  +
lea edi [ebp+var_28] +
stos   +
mov eax [ebp+hModule] +
mov [ebp+var_14] eax +
mov eax ds:dword_10013C4 +
mov [ebp+var_2C] 24h +
mov [ebp+var_20] ebx +
test eax eax +
jz loc_1002A41  +
lea ecx [ebp+var_2C] +
push ecx  +
push 5  +
call eax  +
jmp loc_1002A41  +
push edi  +
call FreeLibrary  +
mov [ebp+hModule] esi +
jmp loc_1002A41  +
call GetLastError  +
cmp eax 7Eh +
jz loc_1002A30  +
cmp eax 0C1h +
jnz loc_1002A83  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call InterlockedCompareExchange  +
test eax eax +
jz loc_1002A47  +
mov [ebp+hModule] eax +
cmp [ebp+hModule] 0FFFFFFFFh +
jnz loc_1002A50  +
mov [ebp+var_4] 1 +
jmp loc_1002A83  +
cmp [ebp+hModule] 0 +
jz loc_1002A83  +
push [ebp+lpProcName]  +
push [ebp+hModule]  +
call GetProcAddress  +
mov esi eax +
test esi esi +
jnz loc_1002A78  +
call GetLastError  +
cmp eax 7Fh +
jz loc_1002A78  +
cmp eax 0B6h +
jnz loc_1002A7F  +
mov [ebp+var_4] 1 +
test esi esi +
jnz loc_1002A8E  +
push [ebp+lpProcName]  +
push ebx  +
call DelayLoadFailureHook  +
mov esi eax +
cmp [ebp+var_4] 0 +
jz loc_1002A99  +
mov eax [ebp+arg_4] +
mov [eax] esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1002B17  +
test eax eax +
jnz loc_1002B1C  +
mov ecx [esi] +
test ecx ecx +
jz loc_1002B14  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1002B08  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_10060A4 +
push offset dword_1006094  +
push dword_10060A0  +
mov dword_1006094 eax +
push offset dword_1006084  +
push offset dword_1006088  +
push offset dword_1006080  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1006090 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:__imp_InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1002BA4  +
cmp eax esi +
jnz loc_1002B97  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_1002BA7  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1002B7E  +
xor esi esi +
inc esi  +
mov eax dword_10063F4 +
cmp eax esi +
jnz loc_1002BBA  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1002BF5  +
mov eax dword_10063F4 +
test eax eax +
jnz loc_1002BEF  +
mov dword_10063F4 esi +
push offset dword_100117C  +
push offset dword_1001170  +
call sub_1002AFB  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002BF5  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_1002CBF  +
mov dword_100609C esi +
mov eax dword_10063F4 +
cmp eax esi +
jnz loc_1002C19  +
push offset dword_100116C  +
push offset dword_1001164  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10063F4 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1002C26  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10063FC ebx +
jz loc_1002C47  +
push offset dword_10063FC  +
call sub_1002F99  +
pop ecx  +
test eax eax +
jz loc_1002C47  +
push ebx  +
push 2  +
push ebx  +
call dword_10063FC  +
push dword_1006084  +
push dword_1006088  +
push dword_1006080  +
call sub_1001E3A  +
add esp 0Ch +
mov dword_1006098 eax +
cmp dword_100608C ebx +
jnz loc_1002CA5  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1006098 eax +
xor ebx ebx +
cmp dword_100608C ebx +
jnz loc_1002CA5  +
push eax  +
call ds:_exit  +
cmp dword_100609C ebx +
jnz loc_1002CB3  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1006098 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp word ptr ds:__ImageBase ax +
jz loc_1002CDC  +
xor eax eax +
jmp loc_1002D29  +
mov eax ds:dword_100003C +
lea eax __ImageBase[eax] +
cmp dword ptr [eax] 4550h +
jnz loc_1002CD8  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1002D16  +
cmp ecx 20Bh +
jnz loc_1002CD8  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1002CD8  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1002D24  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1002CD8  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_100608C eax +
call sub_1003132  +
push eax  +
call ds:__set_app_type  +
or dword_10063EC 0FFFFFFFFh +
or dword_10063F0 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10060AC +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_10060A8 +
mov [eax] ecx +
call sub_10030C4  +
cmp dword_1006014 0 +
jnz loc_1002D82  +
push offset sub_10030C4  +
call ds:__setusermatherr  +
pop ecx  +
call sub_10030AC  +
xor eax eax +
retn   +
***
call sub_1003171  +
jmp sub_1002B5C  +
***
cmp ecx dword_1006004 +
jnz loc_1002DA9  +
retn 0  +
jmp loc_1003207  +
***
jmp ds:__CxxFrameHandler3  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1006004 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1006004 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1006004 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_1002D9E  +
jmp __EH_epilog3  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1002ED7  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1002ED7  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1002ED1  +
cmp eax 19930521h +
jz loc_1002ED1  +
cmp eax 19930522h +
jz loc_1002ED1  +
cmp eax 1994000h +
jnz loc_1002ED7  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1002E98+2)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1002F26  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1002F22  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1002F8D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1002F85  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1002F8F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1002F75  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_1002F10  +
pop ecx  +
test eax eax +
jz loc_1002FF6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1002F50  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002FF6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1002FFF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1002D9E  +
push offset dword_1006004  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1003125  +
cmp ecx 0FFFFFFFFh +
jz loc_1003125  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100311E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100311E  +
cmp edx 10000000h +
jnb loc_100311E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100311E  +
jmp loc_1003119  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1003167  +
push eax  +
call sub_10030CC  +
test eax eax +
jz loc_1003167  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100315C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1003167  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1006004 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_10031A3  +
test eax ebx +
jz loc_10031A3  +
not eax  +
mov dword_1006008 eax +
jmp loc_10031FE  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_10031EA  +
test dword_1006004 ebx +
jnz loc_10031EF  +
mov esi 0BB40E64Fh +
mov dword_1006004 esi +
not esi  +
mov dword_1006008 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10061B0 eax +
mov dword_10061AC ecx +
mov dword_10061A8 edx +
mov dword_10061A4 ebx +
mov dword_10061A0 esi +
mov dword_100619C edi +
mov word_10061C8 ss +
mov word_10061BC cs +
mov word_1006198 ds +
mov word_1006194 es +
mov word_1006190 fs +
mov word_100618C gs +
pushf   +
pop dword_10061C0  +
mov eax [ebp+0] +
mov dword_10061B4 eax +
mov eax [ebp+4] +
mov dword_10061B8 eax +
lea eax [ebp+8] +
mov dword_10061C4 eax +
mov eax [ebp-320h] +
mov dword_1006100 10001h +
mov eax dword_10061B8 +
mov dword_10060BC eax +
mov dword_10060B0 0C0000409h +
mov dword_10060B4 1 +
mov eax dword_1006004 +
mov [ebp-328h] eax +
mov eax dword_1006008 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov eax offset SHGetFolderPathW +
jmp $+5  +
push ecx  +
push edx  +
push eax  +
push offset SHELL32_dll_import_table  +
call sub_1002978  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset StrToInt64ExW +
jmp $+5  +
push ecx  +
push edx  +
push eax  +
push offset SHLWAPI_dll_import_table  +
call sub_1002978  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset StrToIntExW +
jmp loc_1003324  +
***
xor eax eax +
push esi  +
mov esi ecx +
or dword ptr [esi+42Ch] 0FFFFFFFFh +
push 2CCh  +
push eax  +
mov [esi+438h] eax +
mov [esi+43Ch] eax +
mov [esi+430h] eax +
mov [esi+434h] eax +
mov [esi+714h] eax +
mov [esi+718h] eax +
mov [esi+428h] eax +
mov [esi+440h] eax +
mov [esi+444h] eax +
xor ecx ecx +
lea eax [esi+448h] +
push eax  +
mov [esi+18h] cx +
mov [esi+220h] cx +
call memset  +
add esp 0Ch +
push esi  +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push esi  +
call ds:EnterCriticalSection  +
push esi  +
mov dword ptr [esi+428h] 1 +
call ds:LeaveCriticalSection  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push esi  +
call ds:EnterCriticalSection  +
mov eax [esi+440h] +
test eax eax +
jz loc_1003403  +
mov edi [eax+0Ch] +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
test edi edi +
jnz loc_10033F3  +
mov eax [esi+718h] +
test eax eax +
jz loc_100341D  +
mov edi [eax+4] +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
test edi edi +
jnz loc_100340D  +
and dword ptr [esi+440h] 0 +
and dword ptr [esi+434h] 0 +
and dword ptr [esi+718h] 0 +
lea edi [esi+430h] +
mov eax [edi] +
test eax eax +
jz loc_1003448  +
push eax  +
call ds:CloseHandle  +
and dword ptr [edi] 0 +
push esi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100346D  +
cmp ecx 7FFFFFFFh +
jbe loc_1003472  +
mov eax 80070057h +
test eax eax +
jl loc_10034BD  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_10034AD  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_10034A8  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_10034A8  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1003490  +
pop edi  +
test esi esi +
jnz loc_10034B4  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
cmp dword ptr [esi+718h] 0 +
jz loc_10034E1  +
xor eax eax +
jmp loc_1003691  +
and dword ptr [esi+714h] 0 +
push ebx  +
push edi  +
push dword ptr [esi+438h]  +
push 4  +
call CreateToolhelp32Snapshot  +
mov ebx eax +
mov [ebp+hObject] ebx +
cmp ebx 0FFFFFFFFh +
jnz loc_1003549  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1003515  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1003668  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003668  +
push ebx  +
push offset dword_10013EC  +
push 3Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
jmp loc_1003668  +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp+te] +
stos   +
lea eax [ebp+te] +
push eax  +
push ebx  +
mov [ebp+te.dwSize] 1Ch +
call Thread32First  +
test eax eax +
jnz loc_10035A5  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100357C  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_100365F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100365F  +
push ebx  +
push offset dword_10013EC  +
push 3Ch  +
jmp loc_1003625  +
mov eax [ebp+te.th32OwnerProcessID] +
cmp eax [esi+438h] +
jnz loc_10035DE  +
push 8  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
test ecx ecx +
jz loc_1003632  +
xor eax eax +
mov edi ecx +
stos   +
stos   +
mov eax [ebp+te.th32ThreadID] +
mov [ecx] eax +
mov eax [esi+718h] +
mov [ecx+4] eax +
inc dword ptr [esi+714h]  +
mov [esi+718h] ecx +
lea eax [ebp+te] +
push eax  +
push ebx  +
call Thread32Next  +
test eax eax +
jnz loc_10035A5  +
mov edi ds:__imp_GetLastError +
call edi  +
cmp eax 12h +
jz loc_100365D  +
call edi  +
test eax eax +
jle loc_1003609  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_100365F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100365F  +
push ebx  +
push offset dword_10013EC  +
push 3Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
jmp loc_100365F  +
mov ebx 8007000Eh +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_100365F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100365F  +
push offset dword_10013EC  +
push 3Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
jmp loc_100365F  +
xor ebx ebx +
push [ebp+hObject]  +
call ds:CloseHandle  +
test ebx ebx +
jge loc_100368D  +
mov eax [esi+718h] +
test eax eax +
jz loc_1003686  +
mov edi [eax+4] +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
test edi edi +
jnz loc_1003676  +
and dword ptr [esi+718h] 0 +
pop edi  +
mov eax ebx +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10033DC  +
push esi  +
call ds:DeleteCriticalSection  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+430h] 0 +
push edi  +
jnz loc_100379E  +
lea edi [esi+18h] +
cmp word ptr [edi] 0 +
jnz loc_100379E  +
push esi  +
call ds:EnterCriticalSection  +
mov eax [ebp+dwProcessId] +
mov ecx [ebp+arg_4] +
push eax  +
push 0  +
push 100450h  +
mov [esi+438h] eax +
mov [esi+43Ch] ecx +
call ds:OpenProcess  +
mov [esi+430h] eax +
test eax eax +
jnz loc_1003737  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1003719  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1003788  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003788  +
push edi  +
push offset dword_10013EC  +
push 23h  +
jmp loc_1003779  +
push 104h  +
push edi  +
push 0  +
push eax  +
call K32GetModuleFileNameExW  +
test eax eax +
jnz loc_1003786  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100375D  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1003788  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003788  +
push edi  +
push offset dword_10013EC  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
jmp loc_1003788  +
xor edi edi +
test edi edi +
jge loc_1003793  +
mov ecx esi +
call sub_10033DC  +
push esi  +
call ds:LeaveCriticalSection  +
mov eax edi +
jmp loc_10037C7  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_10037C2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10037C2  +
push offset dword_10013EC  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_1006004 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_230] 0 +
and [ebp+lpString2] 0 +
push esi  +
mov esi [ebp+lptstrFilename] +
push edi  +
lea eax [ebp+dwHandle] +
push eax  +
push esi  +
call GetFileVersionInfoSizeW  +
mov edi eax +
test edi edi +
jnz loc_1003855  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1003821  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx eax +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1003A6F  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003A6F  +
push ecx  +
push offset dword_10013EC  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
jmp loc_1003A6F  +
push ebx  +
push edi  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
mov [ebp+pBlock] ebx +
test ebx ebx +
jnz loc_100388F  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1003A59  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003A59  +
push offset dword_10013EC  +
push 26h  +
jmp loc_1003A1A  +
push ebx  +
push edi  +
push 0  +
push esi  +
call GetFileVersionInfoW  +
test eax eax +
jnz loc_10038E5  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10038B1  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx eax +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1003A59  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003A59  +
push ecx  +
push offset dword_10013EC  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
jmp loc_1003A59  +
xor eax eax +
mov word ptr [ebp+lpBuffer] ax +
mov word ptr [ebp+lpBuffer+2] ax +
mov eax 409h +
mov ecx eax +
mov [ebp+var_228] cx +
mov ecx 4B0h +
mov [ebp+var_226] cx +
mov ecx eax +
mov [ebp+var_220] ax +
xor eax eax +
mov [ebp+var_21E] ax +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
mov [ebp+var_224] cx +
push offset SubBlock  +
mov ecx 4E4h +
push ebx  +
mov [ebp+var_222] cx +
call VerQueryValueW  +
test eax eax +
jnz loc_100395F  +
mov word ptr [ebp+lpBuffer] ax +
mov word ptr [ebp+lpBuffer+2] ax +
mov eax off_1006000 +
xor esi esi +
mov edi offset off_1006000 +
mov ebx offset dword_10013EC +
movzx ecx word ptr [ebp+esi*4+lpBuffer] +
test cx cx +
jnz loc_1003987  +
cmp word ptr [ebp+esi*4+lpBuffer+2] cx +
jz loc_10039FE  +
movzx eax word ptr [ebp+esi*4+lpBuffer+2] +
push eax  +
movzx eax cx +
push eax  +
push offset aStringfileinfo  +
lea eax [ebp+SubBlock] +
push 100h  +
push eax  +
call sub_100242E  +
add esp 14h +
test eax eax +
jl loc_10039DC  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpString2] +
push eax  +
lea eax [ebp+SubBlock] +
push eax  +
push [ebp+pBlock]  +
call VerQueryValueW  +
test eax eax +
mov eax off_1006000 +
jnz loc_1003A08  +
jmp loc_10039FE  +
mov eax off_1006000 +
cmp eax edi +
jz loc_10039FE  +
test byte ptr [eax+1Ch] 2 +
jz loc_10039FE  +
push ebx  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
mov eax off_1006000 +
inc esi  +
cmp esi 4 +
jb loc_1003970  +
cmp esi 4 +
jnz loc_1003A27  +
cmp eax edi +
jz loc_1003A59  +
test byte ptr [eax+1Ch] 4 +
jz loc_1003A59  +
push ebx  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
jmp loc_1003A59  +
push 5  +
pop ecx  +
push 9  +
push [ebp+lpString2]  +
mov esi offset aMicrosoft +
lea edi [ebp+String1] +
movs   +
push 9  +
lea eax [ebp+String1] +
push eax  +
xor esi esi +
inc esi  +
push esi  +
push 7Fh  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_1003A59  +
mov [ebp+var_230] esi +
cmp [ebp+pBlock] 0 +
pop ebx  +
jz loc_1003A6F  +
push [ebp+pBlock]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_230] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002D9E  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
push esi  +
call ds:EnterCriticalSection  +
mov ecx [ebp+arg_0] +
mov eax [ecx+8] +
xor edx edx +
inc edx  +
sub eax 0 +
mov ebx edx +
jz loc_1003B0E  +
dec eax  +
jz loc_1003B29  +
dec eax  +
jz loc_1003B29  +
dec eax  +
jz loc_1003B29  +
dec eax  +
jz loc_1003B29  +
dec eax  +
jz loc_1003AD3  +
dec eax  +
jz loc_1003AC0  +
xor ebx ebx +
jmp loc_1003B29  +
mov eax [ebp+arg_4] +
mov [eax] edx +
cmp dword ptr [esi+428h] 0 +
jz loc_1003B29  +
mov [eax+4] edx +
jmp loc_1003B29  +
mov ecx [esi+440h] +
test ecx ecx +
jz loc_1003ABC  +
mov edx [ecx] +
mov eax [ebp+arg_4] +
mov [eax] edx +
mov ecx [ecx+4] +
mov [eax+4] ecx +
mov ecx [esi+440h] +
mov ecx [ecx+8] +
mov [eax+8] ecx +
mov eax [esi+440h] +
mov ecx [eax+0Ch] +
push eax  +
mov [esi+440h] ecx +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1003B29  +
push edi  +
mov edi [ebp+arg_4] +
test byte ptr [edi] 40h +
jz loc_1003B28  +
push dword ptr [ecx+0Ch]  +
mov ecx esi +
call sub_10037D2  +
test eax eax +
jz loc_1003B28  +
and dword ptr [edi] 0FFFFFFBFh +
pop edi  +
push esi  +
call ds:LeaveCriticalSection  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1003A8A  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10034C6  +
mov eax [esi+718h] +
pop esi  +
test eax eax +
jnz loc_1003B7E  +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov eax 80004005h +
jmp loc_1003B93  +
mov eax [eax] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 348h +
mov eax dword_1006004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
push esi  +
mov [ebp+var_2D4] 80004005h +
mov [ebp+hObject] edi +
call ds:EnterCriticalSection  +
mov eax [ebp+arg_4] +
mov [esi+42Ch] eax +
mov eax [esi+43Ch] +
mov [ebp+nPriority] eax +
cmp eax edi +
jnz loc_1003C28  +
lea eax [ebp+nPriority] +
push eax  +
mov ecx esi +
call sub_1003B59  +
cmp eax edi +
mov [ebp+var_2D4] eax +
jge loc_1003C28  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1003F38  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003F38  +
push [ebp+var_2D4]  +
push offset dword_10013EC  +
push 2Ah  +
jmp loc_1003C7C  +
push [ebp+nPriority]  +
push edi  +
push 48h  +
call ds:OpenThread  +
cmp eax edi +
jnz loc_1003C8C  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_1003C4F  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_2D4] eax +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1003F38  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003F38  +
push [ebp+var_2D4]  +
push offset dword_10013EC  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
jmp loc_1003F38  +
push ebx  +
lea ebx [esi+448h] +
push ebx  +
push eax  +
mov dword ptr [ebx] 1003Fh +
call ds:GetThreadContext  +
test eax eax +
jnz loc_1003CEB  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_1003CB9  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_2D4] eax +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1003F37  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003F37  +
push [ebp+var_2D4]  +
push offset dword_10013EC  +
push 2Ch  +
jmp loc_1003E43  +
mov eax [ebp+arg_8] +
mov [ebp+var_348] eax +
mov eax [esi+500h] +
mov [ebp+var_340] edi +
mov edi 2CCh +
push edi  +
mov [ebp+var_33C] eax +
lea eax [ebp+Source2] +
push 0  +
push eax  +
mov [ebp+var_344] 1 +
call memset  +
add esp 0Ch +
push edi  +
lea eax [ebp+Source2] +
push eax  +
push ebx  +
mov [ebp+Source2] 1003Fh +
call ds:RtlCompareMemory  +
cmp eax edi +
jnz loc_1003D81  +
push 0  +
push 780Ah  +
call ShipAssert  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1003F37  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003F37  +
push offset dword_10013EC  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
jmp loc_1003F37  +
xor edi edi +
push 3Ch  +
lea eax [ebp+var_334] +
push edi  +
push eax  +
mov [ebp+var_338] edi +
call memset  +
add esp 0Ch +
lea eax [ebp+var_348] +
mov [ebp+var_2E4] eax +
mov eax [ebp+nPriority] +
push 2  +
mov [ebp+var_2F8] eax +
lea eax [ebp+var_2E4] +
push edi  +
mov [ebp+var_2F4] eax +
push edi  +
lea eax [ebp+hObject] +
mov [ebp+var_2E0] ebx +
mov ebx ds:GetCurrentProcess +
push eax  +
mov [ebp+var_2F0] edi +
mov [ebp+var_2EC] offset loc_1003B3D +
mov [ebp+var_2E8] esi +
call ebx  +
push eax  +
push dword ptr [esi+430h]  +
call ebx  +
push eax  +
call ds:DuplicateHandle  +
test eax eax +
jnz loc_1003E53  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_1003E16  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_2D4] eax +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1003F37  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003F37  +
push [ebp+var_2D4]  +
push offset dword_10013EC  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
jmp loc_1003F37  +
push esi  +
call ds:LeaveCriticalSection  +
mov ebx ds:GetCurrentThread +
call ebx  +
push eax  +
call ds:GetThreadPriority  +
mov edi 7FFFFFFFh +
mov [ebp+nPriority] eax +
cmp eax edi +
jz loc_1003E83  +
push 0FFFFFFFFh  +
call ebx  +
push eax  +
call ds:SetThreadPriority  +
lea eax [ebp+var_2EC] +
push eax  +
push 0  +
lea eax [ebp+var_2F8] +
push eax  +
push [ebp+arg_0]  +
push dword ptr [esi+42Ch]  +
push dword ptr [esi+438h]  +
push [ebp+hObject]  +
call MiniDumpWriteDump  +
mov [ebp+var_2D4] eax +
cmp [ebp+nPriority] edi +
jz loc_1003ECA  +
push [ebp+nPriority]  +
call ebx  +
push eax  +
call ds:SetThreadPriority  +
push esi  +
call ds:EnterCriticalSection  +
cmp [ebp+var_2D4] 0 +
jnz loc_1003F30  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1003EEE  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_2D4] eax +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1003F1E  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003F1E  +
push [ebp+var_2D4]  +
push offset dword_10013EC  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
push [ebp+var_2D4]  +
push 7802h  +
call ShipAssert  +
jmp loc_1003F37  +
and [ebp+var_2D4] 0 +
pop ebx  +
or dword ptr [esi+42Ch] 0FFFFFFFFh +
cmp [ebp+hObject] 0 +
jz loc_1003F5B  +
push [ebp+hObject]  +
call ds:CloseHandle  +
and [ebp+hObject] 0 +
push esi  +
call ds:LeaveCriticalSection  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_2D4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002D9E  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1003F93  +
cmp ecx 7FFFFFFFh +
jbe loc_1003F98  +
mov eax 80070057h +
test eax eax +
jl loc_1003FD3  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call _vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1003FC6  +
cmp eax esi +
ja loc_1003FC6  +
jnz loc_1003FCE  +
mov [esi+edi] bl +
jmp loc_1003FCE  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_1006004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
sub eax 0 +
jz loc_1004017  +
dec eax  +
jz loc_1004010  +
dec eax  +
jz loc_1004009  +
dec eax  +
jz loc_1004010  +
mov eax offset aPrint +
jmp loc_100401C  +
mov eax offset aInfo +
jmp loc_100401C  +
mov eax offset aWarning +
jmp loc_100401C  +
mov eax offset OutputString +
push eax  +
call OutputDebugStringA  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_204] +
push 200h  +
push eax  +
call sub_1003F7D  +
test eax eax +
jl loc_1004047  +
lea eax [ebp+var_204] +
push eax  +
jmp loc_100404C  +
push offset aErrorInLogging  +
call OutputDebugStringA  +
push offset asc_1001828  +
call OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002D9E  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
xor esi esi +
push 7  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_1C] +
mov [ebp+var_20] esi +
stos   +
cmp [ebp+arg_0] esi +
jnz loc_100408E  +
xor eax eax +
jmp loc_10040BF  +
push 20h  +
pop eax  +
push esi  +
push eax  +
mov [ebp+var_20] eax +
lea eax [ebp+var_20] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call ds:NtQueryInformationProcess  +
cmp eax esi +
jge loc_10040B9  +
push eax  +
push offset aNtqueryinforma  +
push esi  +
call sub_1003FDC  +
add esp 0Ch +
jmp loc_100408A  +
mov eax [ebp+var_4] +
and eax 1 +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
xor eax eax +
cmp [ebp+arg_0] 6 +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
mov [ebp+dwProcessId] eax +
mov [ebp+var_4] 80004005h +
jz loc_100411B  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1004111  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004111  +
push [ebp+arg_0]  +
push offset dword_10018A0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
mov eax 80070057h +
jmp locret_100424E  +
push ebx  +
push esi  +
push edi  +
push offset aWaitonstart  +
call sub_100443E  +
mov esi [ebp+arg_4] +
xor edi edi +
inc edi  +
lea ebx [esi+edi*4] +
push offset aS  +
push dword ptr [ebx]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100417D  +
push dword ptr [esi+edi*4+4]  +
call _wtoi64  +
mov [ebp+var_10] eax +
or eax edx +
pop ecx  +
mov [ebp+var_C] edx +
jnz loc_10041A0  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1004241  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004241  +
push offset dword_10018A0  +
push 0Bh  +
jmp loc_1004236  +
push offset aP  +
push dword ptr [ebx]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10041A0  +
push dword ptr [esi+edi*4+4]  +
call _wtoi  +
pop ecx  +
mov [ebp+dwProcessId] eax +
test eax eax +
jz loc_10041F1  +
inc edi  +
cmp edi 5 +
jl loc_100412E  +
mov eax [ebp+var_10] +
or eax [ebp+var_C] +
jz loc_100421D  +
xor esi esi +
cmp [ebp+dwProcessId] esi +
jz loc_100421D  +
push [ebp+dwProcessId]  +
push esi  +
push 1FFFFFh  +
call ds:OpenProcess  +
cmp eax esi +
jnz loc_100420C  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1004248  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004248  +
push [ebp+dwProcessId]  +
push offset dword_10018A0  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
jmp loc_1004248  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1004241  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004241  +
push offset dword_10018A0  +
push 0Ch  +
jmp loc_1004236  +
push esi  +
push esi  +
push esi  +
push [ebp+var_10]  +
push eax  +
call WerpInitiateCrashReporting  +
mov [ebp+var_4] eax +
jmp loc_1004248  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1004241  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004241  +
push offset dword_10018A0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
mov [ebp+var_4] 80070057h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push offset loc_1003082  +
push large dword ptr fs:0  +
mov eax [esp+10h] +
mov [esp+10h] ebp +
lea ebp [esp+10h] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1006004 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1002D9E  +
jmp __SEH_epilog4  +
***
mov eax offset __imp_MiniDumpWriteDump +
jmp $+5  +
push ecx  +
push edx  +
push eax  +
push offset dbghelp_dll_import_table  +
call sub_1002978  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset __imp_VerQueryValueW +
jmp $+5  +
push ecx  +
push edx  +
push eax  +
push offset VERSION_dll_import_table  +
call sub_1002978  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset __imp_GetFileVersionInfoW +
jmp loc_100437A  +
***
mov eax offset __imp_GetFileVersionInfoSizeW +
jmp loc_100437A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_1004402  +
cmp word ptr [edx] 0 +
jnz loc_10043E7  +
push 0Eh  +
jmp loc_1004404  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10043ED  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1004405  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1004416  +
cmp word ptr [edx] 0 +
jnz loc_100441B  +
mov edx offset aNull +
jmp loc_100441B  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
call __EH_prolog3  +
lea ecx [ebp-3Ch] +
call sub_10047CB  +
xor edi edi +
mov [ebp-4] edi +
mov esi offset aSoftwareMicros +
jmp loc_10044B0  +
push 100h  +
push 80000002h  +
lea ecx [ebp-3Ch] +
call sub_1004883  +
test eax eax +
jl loc_10044C2  +
lea ecx [ebp-3Ch] +
call sub_1004859  +
cmp eax edi +
jbe loc_10044C2  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_10044A5  +
test byte ptr [eax+1Ch] 4 +
jz loc_10044A5  +
push esi  +
push offset dword_100190C  +
push 68h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10043D1  +
push 0BB8h  +
call ds:Sleep  +
push edi  +
push dword ptr [ebp+8]  +
lea ecx [ebp-3Ch] +
push esi  +
push edi  +
call sub_1004710  +
test eax eax +
jge loc_100445E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
call sub_100480C  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_10044F5  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1004500  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_100452F  +
cmp [ebp+arg_0] edi +
jz loc_100452A  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] edi +
jmp loc_100452F  +
xor ecx ecx +
mov [eax] cx +
mov [esi+8] edi +
cmp [ebp+arg_0] edi +
jz loc_100453A  +
mov [esi+4] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+8] ecx +
mov [eax+4] ecx +
retn   +
***
retn   +
***
retn   +
***
retn   +
***
xor eax eax +
cmp [ecx] eax +
jz loc_1004580  +
cmp [ecx+8] eax +
jnz locret_1004583  +
xor eax eax +
inc eax  +
retn   +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-18h] esi +
mov eax [ebp+8] +
xor edi edi +
mov [ebp-14h] edi +
cmp eax edi +
jnz loc_10045B2  +
push 1  +
call sub_1004509  +
jmp loc_1004701  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_10045B5  +
sub eax edx +
sar eax 1 +
mov ebx eax +
mov [ebp-1Ch] ebx +
cmp ebx 10000h +
jbe loc_10045FF  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_10045F5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10045F5  +
push ebx  +
push offset dword_1001A00  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
mov eax 80070057h +
jmp loc_1004703  +
lea eax [ebp-14h] +
push eax  +
push 1  +
push ebx  +
call sub_10044DB  +
test eax eax +
jge loc_1004645  +
mov edi 80070216h +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1004701  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004701  +
push offset dword_1001A00  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
jmp loc_1004701  +
mov edi [ebp-14h] +
cmp edi [esi+4] +
ja loc_1004652  +
cmp dword ptr [esi] 0 +
jnz loc_10046C2  +
push 1  +
mov ecx esi +
call sub_1004509  +
and dword ptr [ebp-4] 0 +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [esi] eax +
jmp loc_1004689  +
mov eax offset loc_1004680 +
retn   +
mov esi [ebp-18h] +
mov ebx [ebp-1Ch] +
mov edi [ebp-14h] +
mov eax [esi] +
test eax eax +
jnz loc_10046BA  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_10046B3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10046B3  +
push offset dword_1001A00  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
mov edi 8007000Eh +
jmp loc_1004701  +
xor ecx ecx +
mov [eax] cx +
mov [esi+4] edi +
push dword ptr [ebp+8]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call sub_1003457  +
mov edi eax +
test edi edi +
jge loc_10046FC  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1004701  +
test byte ptr [eax+1Ch] 1 +
jz loc_1004701  +
push edi  +
push offset dword_1001A00  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BCB  +
jmp loc_1004701  +
mov [esi+8] ebx +
xor edi edi +
mov eax edi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
lea ecx [esi+14h] +
call sub_1004589  +
test eax eax +
jl loc_1004762  +
push [ebp+arg_8]  +
lea ecx [esi+20h] +
call sub_1004589  +
test eax eax +
jl loc_1004762  +
mov eax [ebp+arg_0] +
mov [esi+0Ch] eax +
mov eax [ebp+arg_C] +
mov [esi+2Ch] eax +
mov eax [esi+8] +
test eax eax +
jz loc_1004757  +
push eax  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+8] 0 +
and dword ptr [esi] 0 +
pop ecx  +
mov dword ptr [esi+4] 1 +
xor eax eax +
jmp loc_1004767  +
mov eax 80004005h +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
mov ecx ds:dword_1001A34[eax*8] +
cmp ecx [ebp+arg_0] +
jz loc_1004791  +
inc eax  +
cmp eax 0Bh +
jb loc_1004778  +
push 9  +
pop eax  +
pop ebp  +
retn 4  +
mov eax ds:dword_1001A30[eax*8] +
jmp loc_100478D  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
xor edi edi +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
mov [esi+2Ch] edi +
cmp eax edi +
jz loc_10047C3  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi+8] edi +
pop edi  +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+14h] +
call sub_1004545  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+20h] +
call sub_1004545  +
and dword ptr [esi+8] 0 +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_100479F  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [esi+8] +
mov dword ptr [ebp-4] 1 +
test eax eax +
jz loc_1004836  +
push eax  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+8] 0 +
pop ecx  +
lea ecx [esi+20h] +
mov byte ptr [ebp-4] 0 +
call sub_1004557  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+14h] +
call sub_1004557  +
call __EH_epilog3  +
retn   +
***
cmp dword ptr [ecx] 0 +
jz loc_100487A  +
mov eax [ecx+0Ch] +
test eax eax +
jnz loc_100486B  +
mov eax [ecx+8] +
mov eax [eax] +
retn   +
cmp eax 1 +
jnz loc_100487A  +
push dword ptr [ecx+8]  +
call _wtoi  +
pop ecx  +
retn   +
mov eax [ecx+2Ch] +
retn   +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-20h] esi +
mov edi [ebp+8] +
xor ebx ebx +
mov [ebp-14h] edi +
mov [ebp+8] ebx +
mov [ebp-1Ch] ebx +
cmp edi ebx +
jnz loc_10048D4  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_10048CA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10048CA  +
push offset dword_1001A20  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
mov eax 80070057h +
jmp loc_1004A88  +
lea ecx [esi+20h] +
call sub_1004575  +
test eax eax +
jz loc_10048EA  +
mov eax 0E0000000h +
jmp loc_1004A88  +
cmp [esi+4] ebx +
jz loc_1004A75  +
cmp [esi] ebx +
jnz loc_1004A75  +
lea ebx [esi+14h] +
mov ecx ebx +
call sub_100456C  +
test eax eax +
jnz loc_1004923  +
xor ebx ebx +
cmp [ebp-14h] ebx +
jz loc_1004958  +
cmp [ebp-14h] edi +
jz loc_1004958  +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
mov [ebp-14h] edi +
jmp loc_1004958  +
lea eax [ebp-14h] +
push eax  +
mov eax [ebp+0Ch] +
or eax 20019h +
push eax  +
push 0  +
mov ecx ebx +
call sub_1004564  +
push eax  +
push edi  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_100494F  +
mov esi 80004005h +
jmp loc_1004A86  +
mov dword ptr [ebp-1Ch] 1 +
xor ebx ebx +
lea eax [ebp+8] +
push eax  +
push ebx  +
lea eax [ebp-18h] +
push eax  +
push ebx  +
lea ecx [esi+20h] +
call sub_1004564  +
push eax  +
push dword ptr [ebp-14h]  +
call ds:RegQueryValueExW  +
cmp eax ebx +
jz loc_1004982  +
mov esi 80004005h +
jmp loc_1004A77  +
mov eax [ebp-18h] +
xor edx edx +
inc edx  +
cmp eax edx +
jz loc_100499C  +
cmp eax 2 +
jz loc_100499C  +
cmp eax 7 +
jnz loc_100499F  +
add dword ptr [ebp+8] 2 +
jmp loc_100499F  +
inc dword ptr [ebp+8]  +
push eax  +
call sub_1004771  +
mov ecx [esi+0Ch] +
cmp ecx eax +
jz loc_10049F0  +
cmp ecx 9 +
jz loc_10049F0  +
cmp ecx 5 +
jnz loc_10049BA  +
cmp eax edx +
jz loc_10049F0  +
cmp ecx edx +
jnz loc_10049C3  +
cmp eax 5 +
jz loc_10049F0  +
cmp ecx ebx +
jnz loc_10049CB  +
cmp eax edx +
jz loc_10049F0  +
mov eax off_1006000 +
cmp eax offset off_1006000 +
jz loc_1004978  +
test [eax+1Ch] dl +
jz loc_1004978  +
push offset dword_1001A20  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1001BA5  +
jmp loc_1004978  +
mov [esi+0Ch] eax +
mov eax [esi+8] +
cmp eax ebx +
jz loc_1004A04  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi+8] ebx +
push dword ptr [ebp+8]  +
mov [ebp-4] ebx +
call ??2@YAPAXI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov [esi+8] eax +
jmp loc_1004A28  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1004A23 +
retn   +
mov esi [ebp-20h] +
xor ebx ebx +
mov eax [esi+8] +
cmp eax ebx +
jnz loc_1004A36  +
mov esi 8007000Eh +
jmp loc_1004A77  +
push dword ptr [ebp+8]  +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+8] +
push eax  +
push dword ptr [esi+8]  +
lea eax [ebp-18h] +
push eax  +
push ebx  +
lea ecx [esi+20h] +
call sub_1004564  +
push eax  +
push dword ptr [ebp-14h]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1004978  +
mov eax [ebp+8] +
mov dword ptr [esi] 1 +
mov [esi+10h] eax +
xor esi esi +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_1004A86  +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
***
mov eax [esp+8] +
mov ecx [esp+10h] +
or ecx eax +
mov ecx [esp+0Ch] +
jnz loc_1004AB9  +
mov eax [esp+4] +
mul  ecx +
retn 10h  +
***
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+8] +
mul  dword ptr [esp+14h] +
add ebx eax +
mov eax [esp+8] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
push ebx  +
push esi  +
mov eax [esp+18h] +
or eax eax +
jnz loc_1004B02  +
mov ecx [esp+14h] +
mov eax [esp+10h] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+0Ch] +
div  ecx +
mov edx ebx +
jmp loc_1004B43  +
mov ecx eax +
mov ebx [esp+14h] +
mov edx [esp+10h] +
mov eax [esp+0Ch] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_1004B10  +
div  ebx +
mov esi eax +
mul  dword ptr [esp+18h] +
mov ecx eax +
mov eax [esp+14h] +
mul  esi +
add edx ecx +
jb loc_1004B3E  +
cmp edx [esp+10h] +
ja loc_1004B3E  +
jb loc_1004B3F  +
cmp eax [esp+0Ch] +
jbe loc_1004B3F  +
dec esi  +
xor edx edx +
mov eax esi +
pop esi  +
pop ebx  +
retn 10h  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1002D9E  +
mov eax offset dword_1004C60 +
jmp loc_1002DB4  +
***
fdivr st st(7) +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov al [eax+edi*8-37CC0001h] +
call sub_1002D9E  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1002D9E  +
mov eax offset dword_1004C8C +
jmp loc_1002DB4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_1002D9E  +
mov eax offset dword_1004D14 +
jmp loc_1002DB4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1002D9E  +
mov eax offset dword_1004D6C +
jmp loc_1002DB4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1002D9E  +
mov eax offset dword_1004DA0 +
jmp loc_1002DB4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1002D9E  +
mov eax offset dword_1004DF8 +
jmp loc_1002DB4  +
***
