mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+49h] 0 +
jz loc_10060CA  +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jz loc_10060D2  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_1001512  +
mov [ecx+8] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
mov [ecx] eax +
jmp loc_1001508  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1006109  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 1Ch +
jb loc_1006110  +
imul ecx ecx +
push ecx  +
call sub_1004829  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+dwBytes] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1006129  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 1 +
jb loc_1006130  +
push ecx  +
call sub_1004829  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
call sub_1004A29  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_1001A79  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1001DE7  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_10062E4  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 8 +
jb loc_100160B  +
mov ecx [ecx+4] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 4  +
add ecx 4 +
jmp loc_1001602  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 8 +
jb loc_1001632  +
mov eax [ecx+4] +
mov ecx [ecx+14h] +
lea ecx [eax+ecx*2] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 4  +
lea eax [ecx+4] +
jmp loc_1001623  +
***
and [ebp+arg_8] ecx +
jmp loc_10027AE  +
xor eax eax +
jmp loc_10027C8  +
xor eax eax +
jmp loc_10027E9  +
xor eax eax +
jmp loc_1002816  +
***
mov eax [esi+8] +
sub eax ecx +
jmp loc_1002F75  +
mov eax [esi+8] +
sub eax ecx +
jmp loc_1002F8C  +
mov eax [esi+8] +
sub eax ecx +
jmp loc_1002FB8  +
mov ecx [esi+8] +
sub ecx eax +
jmp loc_100300B  +
***
xor eax eax +
jmp loc_1001EAA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea eax [ebp+arg_C] +
push [ebp+arg_0]  +
mov edi ecx +
push eax  +
call sub_1001F78  +
mov esi [ebp+arg_C] +
cmp esi [edi+0Ch] +
jnz loc_10070D4  +
mov eax [ebp+arg_10] +
mov byte ptr [eax] 0 +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_10028A8  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_100728C  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1007295  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 4 +
jb loc_100729C  +
mov eax ecx +
shl eax 2 +
push eax  +
call sub_1004829  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+4] +
test eax eax +
jz loc_1001739  +
mov ecx [ecx+8] +
sub ecx eax +
jz loc_1001739  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1001735  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx] +
mov [ebp+var_4] eax +
cmp eax ecx +
jnz loc_10073AD  +
mov ecx esi +
call sub_1004E02  +
pop esi  +
leave   +
retn   +
***
push offset dword_102901C  +
push dword_1029448  +
mov dword_102901C eax +
push offset dword_1029074  +
push offset dword_1029078  +
push offset dword_1029070  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1029018 eax +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1029008 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1029008 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_1007AE4  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1001883  +
test dword_1029008 ebx +
jz loc_1001883  +
mov dword_1029008 esi +
not esi  +
mov dword_102900C esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
mov esi 0BB40E64Fh +
jmp loc_1001870  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_10018E1  +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jnz loc_1007B64  +
cmp ecx eax +
jz loc_100190E  +
cmp ecx [ebp+arg_4] +
ja loc_100190E  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_100190A  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:MultiByteToWideChar +
push edi  +
xor edi edi +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push dword ptr [ebp+8]  +
push edi  +
push dword ptr [ebp+0Ch]  +
call esi  +
cmp eax edi +
jz loc_1007CF6  +
push ebx  +
mov ebx [ebp+10h] +
push edi  +
push eax  +
mov ecx ebx +
call sub_1001E91  +
mov ecx [ebx+4] +
cmp ecx edi +
jz loc_1007D28  +
mov eax [ebx+8] +
sub eax ecx +
sar eax 1 +
push eax  +
push ecx  +
push 0FFFFFFFFh  +
push dword ptr [ebp+8]  +
push edi  +
push dword ptr [ebp+0Ch]  +
call esi  +
push edi  +
mov ecx ebx +
cmp eax edi +
jz loc_1007D2F  +
push eax  +
call sub_1001E91  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
push esi  +
call ds:InitializeCriticalSectionAndSpinCount  +
test eax eax +
jz loc_1007D5B  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov esi [esi+8] +
jmp loc_10019C9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
cmp byte ptr [esi+49h] 0 +
jnz loc_10019E7  +
push [ebp+arg_0]  +
lea eax [esi+0Ch] +
push eax  +
mov ecx edi +
call sub_1001CA5  +
test al al +
jnz loc_10019AD  +
mov ebx esi +
mov esi [esi] +
jmp loc_10019C9  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jb loc_10061A1  +
mov eax [esi+14h] +
sub eax edi +
cmp eax [ebp+arg_4] +
jb loc_10061AB  +
cmp [ebp+arg_4] 0 +
jbe loc_1001A67  +
mov ecx [esi+18h] +
push ebx  +
lea edx [esi+4] +
cmp ecx 8 +
jb loc_1001A6F  +
mov ebx [edx] +
mov [ebp+arg_0] ebx +
cmp ecx 8 +
jb loc_1001A37  +
mov edx [edx] +
mov ebx [ebp+arg_4] +
sub eax ebx +
push eax  +
mov [ebp+var_4] edx +
mov edx [ebp+arg_0] +
lea eax [edi+ebx] +
lea eax [edx+eax*2] +
push eax  +
mov eax [ebp+var_4] +
sub ecx edi +
push ecx  +
lea eax [eax+edi*2] +
push eax  +
call sub_1004639  +
mov eax [esi+14h] +
sub eax ebx +
push eax  +
mov ecx esi +
call sub_1001A79  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
mov [ebp+arg_0] edx +
jmp loc_1001A30  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 8 +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
jnb loc_1001A97  +
add ecx 4 +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
mov ecx [ecx+4] +
jmp loc_1001A8D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1001AC7  +
test byte ptr [ebp+8] 1 +
jz loc_1001ABB  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+0D8h] +
mov dword ptr [ebp-4] 6 +
call sub_1004D62  +
lea ecx [esi+0C8h] +
call sub_10043CC  +
xor ebx ebx +
push ebx  +
push 1  +
lea ecx [esi+94h] +
call sub_1001B47  +
push ebx  +
push 1  +
lea ecx [esi+78h] +
call sub_1001B47  +
push ebx  +
push 1  +
lea ecx [esi+5Ch] +
call sub_1001B47  +
push ebx  +
push 1  +
lea ecx [esi+38h] +
call sub_1001B47  +
push ebx  +
push 1  +
lea ecx [esi+1Ch] +
call sub_1001B47  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_10049CD  +
call sub_1002052  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_1001B5B  +
cmp dword ptr [esi+18h] 8 +
jnb loc_1001B71  +
push [ebp+arg_4]  +
mov ecx esi +
mov dword ptr [esi+18h] 7 +
call sub_1001A79  +
pop esi  +
pop ebp  +
retn 8  +
cmp [ebp+arg_4] 0 +
lea eax [esi+4] +
push edi  +
mov edi [eax] +
ja loc_1006190  +
push edi  +
call sub_1001B90  +
pop ecx  +
pop edi  +
jmp loc_1001B5B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn   +
***
push edi  +
mov ecx esi +
call sub_1001A79  +
jmp loc_1001BE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 7FFFFFFEh +
ja loc_100621F  +
cmp [esi+18h] edi +
jb loc_1001BF1  +
cmp [ebp+arg_4] 0 +
jnz loc_1006229  +
test edi edi +
jz loc_1001BA9  +
xor eax eax +
cmp eax edi +
sbb eax eax +
pop edi  +
neg eax  +
pop esi  +
pop ebp  +
retn 8  +
push dword ptr [esi+14h]  +
mov ecx esi +
push edi  +
call sub_1001C03  +
jmp loc_1001BE3  +
***
call sub_10053E2  +
mov edi ecx +
mov [ebp-18h] edi +
mov esi [ebp+8] +
or esi 7 +
cmp esi 7FFFFFFEh +
ja loc_10061B3  +
xor edx edx +
push 3  +
mov eax esi +
pop ebx  +
div  ebx +
mov ecx [edi+18h] +
mov [ebp-14h] ecx +
shr dword ptr [ebp-14h] 1 +
mov edx [ebp-14h] +
cmp eax edx +
jb loc_10061BB  +
and dword ptr [ebp-4] 0 +
push 0  +
lea eax [esi+1] +
push eax  +
call sub_10047F3  +
mov ebx eax +
cmp dword ptr [ebp+0Ch] 0 +
ja loc_1001C7D  +
push 0  +
push 1  +
mov ecx edi +
call sub_1001B47  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
mov [edi+4] ebx +
mov [edi+18h] esi +
call sub_1001A79  +
call sub_1002052  +
retn 8  +
cmp dword ptr [edi+18h] 8 +
jb loc_1001C96  +
mov eax [edi+4] +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [esi+1] +
push eax  +
push ebx  +
call sub_100477B  +
jmp loc_1001C5A  +
lea eax [edi+4] +
jmp loc_1001C86  +
***
mov eax [eax+4] +
jmp loc_1001CC2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+18h] 8 +
jnb loc_1001CD7  +
lea ecx [eax+4] +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+18h] 8 +
jnb loc_1001C9B  +
add eax 4 +
push ecx  +
push eax  +
call ds:lstrcmpiW  +
xor ecx ecx +
test eax eax +
setnle cl  +
mov al cl +
pop ebp  +
retn 8  +
mov ecx [eax+4] +
jmp loc_1001CB6  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+1Ch] +
call sub_10039B9  +
lea ecx [esi+38h] +
call sub_10039B9  +
lea ecx [esi+54h] +
call sub_10039B9  +
push offset aSystem  +
push offset aSoftware  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_1001D39  +
mov byte ptr [esi+70h] 0 +
mov eax esi +
call sub_1002052  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1001DE7  +
push [ebp+arg_4]  +
lea ecx [esi+1Ch] +
call sub_1001DE7  +
push [ebp+arg_0]  +
lea edi [esi+54h] +
mov ecx edi +
call sub_1001DE7  +
push offset aMicrosoftWindo  +
mov ecx edi +
call sub_10046D1  +
push offset aSystem  +
push [ebp+arg_4]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100797E  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1001DF3  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_0]  +
call sub_1001E14  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_10031B5  +
test al al +
jnz loc_100629A  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1001BB8  +
test al al +
jz loc_1001E5E  +
mov ecx [esi+18h] +
cmp ecx 8 +
jnb loc_1001E66  +
lea eax [esi+4] +
push [ebp+arg_4]  +
push edi  +
push ecx  +
push eax  +
call sub_100477B  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1001A79  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax [esi+4] +
jmp loc_1001E49  +
***
test esi esi +
jz loc_1001ECC  +
mov edi [ecx+8] +
mov eax edi +
sub eax esi +
sar eax 1 +
cmp edx eax +
jnb loc_1001ECC  +
lea eax [esi+edx*2] +
push edi  +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
call sub_1005058  +
jmp loc_1001ECC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+4] +
push edi  +
test esi esi +
jz loc_100167C  +
mov eax [ecx+8] +
sub eax esi +
sar eax 1 +
mov edx [ebp+arg_0] +
cmp eax edx +
jnb loc_1001E6B  +
test esi esi +
jz loc_1001ED2  +
mov eax [ecx+8] +
sub eax esi +
sar eax 1 +
mov esi [ecx+8] +
lea edi [ebp+arg_4] +
push edi  +
sub edx eax +
push edx  +
push esi  +
call sub_1002786  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_1001EBC  +
***
mov edi edi +
push esi  +
push 0  +
push offset dword_1001F20  +
mov esi ecx +
call sub_1001F29  +
test al al +
jnz loc_1001F09  +
push offset aHelp  +
push offset dword_1001F10  +
mov ecx esi +
call sub_1001F29  +
test al al +
jnz loc_1001F09  +
xor eax eax +
pop esi  +
retn   +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push ebx  +
push [ebp+arg_0]  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call sub_1001F78  +
mov eax [eax] +
cmp eax [esi+0Ch] +
jnz loc_10062C9  +
cmp [ebp+arg_4] ebx +
jz loc_1001F6B  +
push ebx  +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_1001F78  +
mov eax [eax] +
cmp eax [esi+0Ch] +
jnz loc_10062D9  +
xor al al +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov esi ecx +
lea ecx [ebp+var_1C] +
call sub_100159C  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+arg_4] +
lea edi [esi+8] +
push eax  +
mov ecx edi +
call sub_1002447  +
push 0  +
push 1  +
lea ecx [ebp+var_1C] +
call sub_1001B47  +
mov ecx [ebp+arg_4] +
cmp ecx [esi+0Ch] +
jnz loc_1001FE9  +
cmp [ebp+arg_8] 0 +
jz loc_1001FE9  +
push [ebp+arg_8]  +
lea ecx [ebp+var_1C] +
call sub_100159C  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1002447  +
push 0  +
push 1  +
lea ecx [ebp+var_1C] +
call sub_1001B47  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_1001FE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea esi [ecx+14h] +
mov ecx esi +
call sub_1002028  +
cmp eax [ebp+arg_0] +
jl loc_1006F4F  +
mov ecx esi +
call sub_1002028  +
cmp eax [ebp+arg_4] +
pop esi  +
jg loc_1006F5C  +
pop ebp  +
retn 8  +
***
mov edx [ecx+4] +
test edx edx +
jz loc_100203B  +
mov eax [ecx+8] +
sub eax edx +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
xor eax eax +
retn   +
***
mov ecx [ebp-10h] +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
push eax  +
lea ecx [ebp-48h] +
call sub_100159C  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebx+14h] +
mov byte ptr [ebp-4] 3 +
call sub_1003406  +
push 0  +
push 1  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 1 +
call sub_1001B47  +
jmp loc_100213C  +
xor bl bl +
jmp loc_10020F0  +
cmp esi edx +
jz loc_1007259  +
mov eax [edi] +
mov ecx esi +
sub ecx eax +
dec ecx  +
dec ecx  +
sar ecx 1 +
push ecx  +
add eax 2 +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1001E14  +
cmp dword ptr [ebp-14h] 8 +
mov edi [ebx+0Ch] +
mov eax [ebp-28h] +
jnb loc_10020C6  +
lea eax [ebp-28h] +
push 0  +
push eax  +
lea eax [ebp-78h] +
push eax  +
mov ecx ebx +
call sub_1001F78  +
cmp [eax] edi +
jnz loc_1007268  +
cmp word ptr [esi] 3Ah +
jnz loc_1002094  +
add esi 2 +
push esi  +
lea ecx [ebp-68h] +
mov bl 1 +
call sub_1001DE7  +
lea ecx [ebp-48h] +
call sub_10039B9  +
push 0FFFFFFFFh  +
push 0  +
lea eax [ebp-68h] +
push eax  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-4Ch] bl +
call sub_10024F0  +
mov ecx [ebp-6Ch] +
lea eax [ebp-4Ch] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
add ecx 8 +
call sub_100305A  +
mov ecx eax +
call sub_10055C3  +
push 0  +
push 1  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 1 +
call sub_1001B47  +
mov ebx [ebp-6Ch] +
mov eax [ebp-70h] +
inc eax  +
cmp eax [ebp+8] +
mov [ebp-70h] eax +
jl loc_10021A7  +
push 0  +
push 1  +
lea ecx [ebp-68h] +
call sub_1001B47  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
call sub_1002043  +
retn 8  +
***
call sub_10021E6  +
mov eax [ebp+0Ch] +
mov ebx ecx +
lea ecx [ebp-2Ch] +
mov [ebp-6Ch] ebx +
mov [ebp-74h] eax +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-68h] +
call sub_10039B9  +
xor eax eax +
inc eax  +
cmp [ebp+8] eax +
mov byte ptr [ebp-4] 1 +
mov [ebp-70h] eax +
jle loc_1002148  +
mov ecx [ebp-74h] +
lea edi [ecx+eax*4] +
mov eax [edi] +
movzx ecx word ptr [eax] +
cmp cx 2Dh +
jz loc_10021C2  +
cmp cx 2Fh +
jnz loc_1002066  +
lea edx [eax+2] +
mov esi edx +
movzx ecx word ptr [esi] +
cmp cx 3Ah +
jz loc_1002098  +
test cx cx +
jz loc_1002098  +
inc esi  +
inc esi  +
jmp loc_10021C7  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1029008 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ecx+0Ch] +
push esi  +
mov esi [eax] +
mov [ebp+var_C] ecx +
mov [ebp+var_8] esi +
cmp esi eax +
jz loc_10023C2  +
push ebx  +
push edi  +
push 8  +
pop ebx  +
mov edi [ebp+arg_0] +
mov [ebp+var_1] 0 +
test edi edi +
jz loc_1002276  +
mov ecx [edi] +
test ecx ecx +
jz loc_1002276  +
cmp [esi+24h] ebx +
jnb loc_1006F76  +
lea eax [esi+10h] +
push eax  +
push ecx  +
call sub_10023CC  +
cmp eax 2 +
jz loc_1002272  +
add edi 4 +
jmp loc_100224F  +
mov [ebp+var_1] 1 +
cmp [esi+24h] ebx +
jnb loc_1006F7E  +
lea eax [esi+10h] +
push eax  +
push offset String1  +
call sub_10023CC  +
push 2  +
pop edi  +
cmp eax edi +
jz loc_10023A9  +
cmp [esi+24h] ebx +
jnb loc_1006F86  +
lea eax [esi+10h] +
push eax  +
push offset aUnicode  +
call sub_10023CC  +
cmp eax edi +
jz loc_10023A9  +
cmp [esi+24h] ebx +
jnb loc_1006F8E  +
lea eax [esi+10h] +
push eax  +
push offset dword_1001378  +
call sub_10023CC  +
cmp eax edi +
jz loc_10023A9  +
cmp [esi+24h] ebx +
jnb loc_1006F96  +
lea eax [esi+10h] +
push eax  +
push offset aRemote  +
call sub_10023CC  +
cmp eax edi +
jz loc_10023A9  +
cmp [esi+24h] ebx +
jnb loc_1006F9E  +
lea eax [esi+10h] +
push eax  +
push offset dword_100138C  +
call sub_10023CC  +
cmp eax edi +
jz loc_10023A9  +
cmp [esi+24h] ebx +
jnb loc_1006FA6  +
lea eax [esi+10h] +
push eax  +
push offset aUsername  +
call sub_10023CC  +
cmp eax edi +
jz loc_10023A9  +
cmp [esi+24h] ebx +
jnb loc_1006FAE  +
lea eax [esi+10h] +
push eax  +
push offset dword_1001360  +
call sub_10023CC  +
cmp eax edi +
jz loc_10023A9  +
cmp [esi+24h] ebx +
jnb loc_1006FB6  +
lea eax [esi+10h] +
push eax  +
push offset aPassword  +
call sub_10023CC  +
cmp eax edi +
jz loc_10023A9  +
cmp [esi+24h] ebx +
jnb loc_1006FBE  +
lea eax [esi+10h] +
push eax  +
push offset aAuthentication  +
call sub_10023CC  +
cmp eax edi +
jz loc_10023A9  +
cmp [esi+24h] ebx +
jnb loc_1006FC6  +
lea eax [esi+10h] +
push eax  +
push offset dword_100133C  +
call sub_10023CC  +
cmp eax edi +
jz loc_1006FCE  +
cmp [ebp+var_1] 0 +
jz loc_1006FD7  +
lea ecx [ebp+var_8] +
call sub_10023EE  +
mov esi [ebp+var_8] +
mov eax [ebp+var_C] +
cmp esi [eax+0Ch] +
jnz loc_1002244  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push [ebp+lpString2]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+49h] dl +
jnz loc_10060DA  +
mov ecx [eax+8] +
cmp [ecx+49h] dl +
jz loc_100241B  +
mov eax [eax+4] +
cmp [eax+49h] dl +
jnz loc_1002421  +
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_1002421  +
mov [esi] eax +
jmp loc_1002408  +
push ecx  +
call sub_100242A  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
cmp byte ptr [ecx+49h] 0 +
jz loc_100243E  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_1002432  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_10019B7  +
mov [ebp+var_4] eax +
cmp eax [esi+4] +
jz loc_1002472  +
add eax 0Ch +
push eax  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1001CA5  +
test al al +
jz loc_1002487  +
mov eax [esi+4] +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
lea eax [ebp+var_4] +
jmp loc_100247B  +
***
test esi esi +
jz loc_10024D2  +
mov edi [ecx+8] +
mov edx edi +
sub edx esi +
cmp eax edx +
jnb loc_10024D2  +
jmp loc_1006DDC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+4] +
push edi  +
test esi esi +
jnz loc_10024D8  +
xor edx edx +
mov eax [ebp+arg_0] +
cmp edx eax +
jnb loc_100248C  +
test esi esi +
jnz loc_10024DF  +
xor edx edx +
mov esi [ecx+8] +
lea edi [ebp+dwBytes] +
push edi  +
sub eax edx +
push eax  +
push esi  +
call sub_1002F40  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov edx [ecx+8] +
sub edx esi +
jmp loc_10024B5  +
mov edx [ecx+8] +
sub edx esi +
jmp loc_10024C2  +
***
mov edi [edi+4] +
jmp loc_1002539  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
cmp [edi+14h] eax +
jb loc_100626D  +
mov esi [edi+14h] +
mov eax [ebp+arg_4] +
sub esi eax +
cmp [ebp+arg_8] esi +
jb loc_1006277  +
mov ecx ebx +
cmp ebx edi +
jz loc_100627F  +
push 0  +
push esi  +
call sub_1001BB8  +
test al al +
jz loc_100255B  +
cmp dword ptr [edi+18h] 8 +
jnb loc_10024E6  +
add edi 4 +
mov ecx [ebx+18h] +
cmp ecx 8 +
jnb loc_1002564  +
lea eax [ebx+4] +
mov edx [ebp+arg_4] +
push esi  +
lea edx [edi+edx*2] +
push edx  +
push ecx  +
push eax  +
call sub_100477B  +
push esi  +
mov ecx ebx +
call sub_1001A79  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax [ebx+4] +
jmp loc_1002544  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_100258D  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10025A0  +
push dword ptr [esi+4]  +
call sub_1001B90  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10025BF  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jz loc_10025D8  +
push esi  +
call sub_1004B37  +
add esi 1Ch +
jmp loc_10025C8  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_10025EC  +
xor eax eax +
retn   +
mov eax [ecx+0Ch] +
sub eax edx +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002623  +
mov eax [ebp+arg_4] +
imul eax eax +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002651  +
pop edi  +
leave   +
retn 10h  +
***
call sub_10053E2  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_1002681  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_10033A4  +
dec dword ptr [ebp+0Ch]  +
add dword ptr [ebp+8] 1Ch +
jmp loc_1002667  +
call sub_1002052  +
retn 18h  +
***
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
push 2  +
push 2  +
call sub_1001FF5  +
mov ecx [esi+8] +
push offset off_1029618  +
call sub_1002223  +
mov ecx [esi+8] +
push 1  +
call sub_10031F1  +
push eax  +
lea ecx [esi+1Ch] +
call sub_1001DE7  +
mov ecx [esi+8] +
lea eax [ebp-1] +
push eax  +
push 0  +
push 0  +
push offset aXml  +
call sub_1002709  +
mov ecx [esi+8] +
mov [esi+38h] al +
lea eax [ebp-1] +
push eax  +
push 0  +
push offset aLf  +
push offset aLogfile  +
call sub_1002709  +
mov [esi+39h] al +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
mov edi ecx +
push eax  +
call sub_1001F78  +
mov esi [ebp+arg_4] +
cmp esi [edi+0Ch] +
jnz loc_1002738  +
mov eax [ebp+arg_C] +
mov byte ptr [eax] 0 +
mov al [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
cmp byte ptr [esi+28h] 0 +
jz loc_100707B  +
cmp dword ptr [esi+44h] 8 +
jnb loc_1007088  +
lea eax [esi+30h] +
push offset aTrue  +
push eax  +
call sub_10023CC  +
cmp eax 2 +
jnz loc_1007090  +
mov al 1 +
mov ecx [ebp+arg_C] +
mov byte ptr [ecx] 1 +
jmp loc_1002732  +
***
xor eax eax +
jmp loc_100282C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
movzx eax word ptr [eax] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
push edi  +
mov [ebp+var_4] eax +
test ecx ecx +
jz loc_1001637  +
mov eax [esi+0Ch] +
sub eax ecx +
sar eax 1 +
mov [ebp+arg_8] eax +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1002893  +
test ecx ecx +
jz loc_100163F  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push ebx  +
mov edx 7FFFFFFFh +
mov ebx edx +
sub ebx eax +
cmp ebx edi +
jb loc_1006C9B  +
test ecx ecx +
jz loc_1001646  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
add eax edi +
cmp [ebp+arg_8] eax +
jnb loc_1006CA9  +
mov eax [ebp+arg_8] +
shr eax 1 +
sub edx eax +
cmp edx [ebp+arg_8] +
jb loc_1006CA0  +
add [ebp+arg_8] eax +
test ecx ecx +
jz loc_100164D  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
add eax edi +
cmp [ebp+arg_8] eax +
jnb loc_1002831  +
test ecx ecx +
jz loc_100277A  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
add eax edi +
mov [ebp+arg_8] eax +
push 0  +
push [ebp+arg_8]  +
call sub_10047F3  +
push esi  +
mov ebx eax +
mov eax [esi+4] +
push ebx  +
push [ebp+arg_0]  +
push eax  +
call sub_1004EC0  +
lea ecx [ebp+var_4] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_1004F17  +
push esi  +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_1004EC0  +
mov eax [esi+4] +
test eax eax +
jz loc_1002899  +
mov ecx [esi+8] +
sub ecx eax +
sar ecx 1 +
add edi ecx +
test eax eax +
jz loc_1002880  +
push eax  +
call sub_1001B90  +
pop ecx  +
mov eax [ebp+arg_8] +
lea eax [ebx+eax*2] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*2] +
mov [esi+8] eax +
mov [esi+4] ebx +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
xor ecx ecx +
jmp loc_1002873  +
***
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_1002903  +
mov [eax+8] ebx +
jmp loc_1002903  +
***
call sub_1003100  +
mov edi ecx +
cmp dword ptr [edi+8] 4444443h +
jnb loc_100713F  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_10054A9  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jz loc_10016BF  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_100289D  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jz loc_100716A  +
mov esi ebx +
lea eax [ebx+4] +
mov ecx [eax] +
cmp byte ptr [ecx+48h] 0 +
jz loc_1002927  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+48h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1002052  +
retn 10h  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jz loc_1007171  +
mov edx [edx] +
cmp byte ptr [edx+48h] 0 +
jz loc_10071AC  +
cmp esi [ecx] +
jnz loc_100294E  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_10014CD  +
mov eax [esi+4] +
mov byte ptr [eax+48h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+48h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1002976  +
lea eax [esi+4] +
jmp loc_1002908  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+49h] 0 +
jz loc_10060AC  +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_10060B4  +
mov [ecx+4] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
call sub_10053E2  +
mov eax [ebp+0Ch] +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_10029CE  +
mov esi [ebp+8] +
sub eax ecx +
sar eax 1 +
push ebx  +
add eax 14h +
mov ecx esi +
push eax  +
call sub_1001E91  +
mov ecx [esi+4] +
cmp ecx ebx +
jz loc_1007C49  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push dword ptr [ebp+10h]  +
lea edx [ebp-14h] +
push dword ptr [ebp+0Ch]  +
push ebx  +
push ebx  +
push edx  +
push eax  +
push ecx  +
call sub_1002B5A  +
mov edi eax +
cmp edi 8007007Ah +
jnz loc_1002A74  +
mov ecx [esi+4] +
cmp ecx ebx +
jz loc_1002A96  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
cmp eax 7FFFFFFFh +
jnb loc_1007C5A  +
cmp ecx ebx +
jz loc_1002A96  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
cmp eax 7FFFFFFFh +
jnb loc_1007C5A  +
cmp ecx ebx +
jz loc_1002A96  +
mov edi [esi+8] +
sub edi ecx +
sar edi 1 +
push ebx  +
push ebx  +
mov ecx esi +
call sub_1001E91  +
push ebx  +
mov ecx esi +
cmp edi 3FFFFFFFh +
jnb loc_1007C50  +
lea eax [edi+edi] +
jmp loc_10029E5  +
cmp edi ebx +
jl loc_1007C5A  +
mov eax [ebp-14h] +
sub eax [esi+4] +
push ebx  +
sar eax 1 +
inc eax  +
push eax  +
mov ecx esi +
call sub_1001E91  +
mov eax edi +
call sub_1002052  +
retn   +
xor edi edi +
jmp loc_1002A54  +
***
cmp byte ptr [eax+28h] 0 +
push 8  +
pop edx  +
jz loc_1002B32  +
cmp [eax+44h] edx +
jnb loc_1006FF3  +
lea ecx [eax+30h] +
***
test ecx ecx +
jz loc_1002B32  +
cmp [eax+44h] edx +
jnb loc_1006FFB  +
lea ecx [eax+30h] +
cmp word ptr [ecx] 0 +
jz loc_1002B32  +
mov ecx [ebp+arg_C] +
mov byte ptr [ecx] 1 +
cmp [eax+44h] edx +
jnb loc_1007003  +
add eax 30h +
lea ecx [ebp+arg_C] +
push ecx  +
push offset aI  +
push eax  +
call ds:swscanf  +
add esp 0Ch +
cmp eax 1 +
jnz loc_100700B  +
mov eax [ebp+arg_C] +
jmp loc_1002B2E  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push dword ptr [ebp+8]  +
mov esi ecx +
push eax  +
call sub_1001F78  +
mov eax [ebp+0Ch] +
cmp eax [esi+0Ch] +
pop esi  +
jnz loc_1002A9A  +
mov eax [ebp+14h] +
mov byte ptr [eax] 0 +
mov eax [ebp+10h] +
***
pop ebp  +
retn 10h  +
cmp [eax+24h] edx +
jnb loc_100701C  +
jmp loc_1007021  +
***
cmp eax ebx +
ja loc_1002BD2  +
jz loc_1002BD9  +
mov ebx eax +
jmp loc_1002BDF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov ecx [ebp+arg_4] +
push edi  +
push [ebp+arg_10]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_10018ED  +
xor edx edx +
cmp eax edx +
mov [ebp+arg_0] eax +
jl loc_1002C2E  +
test [ebp+arg_10] 100h +
push esi  +
mov esi ecx +
mov [ebp+var_4] edi +
mov [ebp+var_C] esi +
jnz loc_1007B7A  +
test [ebp+arg_10] 0FFFFE000h +
push ebx  +
mov [ebp+arg_0] edx +
jnz loc_1007B8F  +
cmp ecx edx +
jz loc_1007BA8  +
push [ebp+arg_18]  +
lea ebx [ecx-1] +
push [ebp+arg_14]  +
mov [ebp+var_8] edx +
push ebx  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jge loc_1002B40  +
mov [ebp+var_8] 8007007Ah +
xor eax eax +
mov [edi+ebx*2] ax +
mov eax [ebp+var_8] +
mov [ebp+arg_0] eax +
sub esi ebx +
cmp [ebp+var_8] 0 +
lea eax [edi+ebx*2] +
mov [ebp+var_4] eax +
mov [ebp+var_C] esi +
jge loc_1002C36  +
mov ecx [ebp+arg_4] +
test [ebp+arg_10] 1C00h +
jnz loc_1007BFD  +
cmp [ebp+arg_0] 0 +
jge loc_1002C15  +
cmp [ebp+arg_0] 8007007Ah +
jnz loc_1002C2C  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1002C21  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jnz loc_1007C22  +
pop ebx  +
pop esi  +
mov eax [ebp+arg_0] +
pop edi  +
leave   +
retn 1Ch  +
mov eax [ebp+arg_10] +
test eax 200h +
jz loc_1002C15  +
jmp loc_1007BCA  +
***
call sub_1003100  +
mov ecx [ebp+8] +
push 0  +
call sub_10031F1  +
push offset aEp  +
mov esi eax +
push offset String2  +
push esi  +
call sub_1002DDF  +
test al al +
jnz loc_100637E  +
push offset aGp  +
push offset aGetPublisher  +
push esi  +
call sub_1002DDF  +
test al al +
jnz loc_100639A  +
push offset aGl  +
push offset aGetLog  +
push esi  +
call sub_1002DDF  +
test al al +
jnz loc_10063BD  +
push offset aSl  +
push offset aSetLog  +
push esi  +
call sub_1002DDF  +
test al al +
jnz loc_10063E3  +
push offset aEl  +
push offset aEnumLogs  +
push esi  +
call sub_1002DDF  +
test al al +
jnz loc_10063FF  +
push offset aQe  +
push offset aQueryEvents  +
push esi  +
call sub_1002DDF  +
test al al +
jz loc_100641B  +
push 0E4h  +
call sub_1004829  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov dword ptr [ebp-4] 2 +
test ecx ecx +
jz loc_1002D1A  +
call sub_1003914  +
call sub_1002052  +
retn 4  +
xor eax eax +
jmp loc_1002D12  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call sub_10023CC  +
cmp eax 2 +
jz loc_1002E10  +
cmp [ebp+arg_8] 0 +
jz loc_1002E0A  +
push [ebp+arg_8]  +
push [ebp+lpString1]  +
call sub_10023CC  +
cmp eax 2 +
jz loc_1002E10  +
xor al al +
pop ebp  +
retn 0Ch  +
mov al 1 +
jmp loc_1002E0C  +
***
call sub_10053E2  +
mov esi offset unk_1029050 +
push esi  +
call sub_10014A5  +
push offset aMicrosoftWevtu  +
mov dword_1029010 offset dword_1002EAC +
mov off_1029004 esi +
call sub_1003163  +
xor ebx ebx +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call ds:HeapSetInformation  +
mov esi ds:setlocale +
mov edi offset a_ocp +
push edi  +
push 1  +
call esi  +
push edi  +
push 2  +
call esi  +
push edi  +
push 3  +
call esi  +
push edi  +
push 5  +
call esi  +
add esp 20h +
push ebx  +
call ds:SetThreadUILanguage  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
push dword ptr [ebp+0Ch]  +
mov [ebp-18h] eax +
push dword ptr [ebp+8]  +
mov [ebp-14h] ebx +
mov [ebp-4] ebx +
call sub_10040F3  +
call sub_1002EEF  +
xor eax eax +
call sub_1002052  +
retn   +
***
mov edi edi +
push esi  +
mov esi off_1029004 +
push edi  +
mov edi offset off_1029004 +
cmp esi edi +
jz loc_1002F2C  +
test esi esi +
jz loc_1002F26  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_1002F22  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
jmp loc_1002F02  +
mov off_1029004 edi +
pop edi  +
pop esi  +
retn   +
***
push eax  +
call sub_1001B90  +
pop ecx  +
jmp loc_1003015  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+dwBytes] +
mov al [eax] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
push edi  +
mov byte ptr [ebp+var_4] al +
test ecx ecx +
jnz loc_100302D  +
and [ebp+dwBytes] ecx +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1003027  +
test ecx ecx +
jnz loc_1001654  +
xor eax eax +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx edi +
jb loc_1006D36  +
test ecx ecx +
jnz loc_100165E  +
xor eax eax +
add eax edi +
push ebx  +
cmp [ebp+dwBytes] eax +
jnb loc_1006D44  +
mov eax [ebp+dwBytes] +
shr eax 1 +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx [ebp+dwBytes] +
jb loc_1006D3B  +
add [ebp+dwBytes] eax +
test ecx ecx +
jnz loc_1001668  +
xor eax eax +
add eax edi +
cmp [ebp+dwBytes] eax +
jnb loc_1002FCA  +
test ecx ecx +
jnz loc_100303A  +
xor eax eax +
add eax edi +
mov [ebp+dwBytes] eax +
push 0  +
push [ebp+dwBytes]  +
call sub_1001551  +
push esi  +
mov ebx eax +
mov eax [esi+4] +
push ebx  +
push [ebp+arg_0]  +
push eax  +
call sub_100348B  +
lea ecx [ebp+var_4] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_1004FBB  +
push esi  +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_100348B  +
mov eax [esi+4] +
test eax eax +
jnz loc_1001672  +
xor ecx ecx +
add edi ecx +
test eax eax +
jnz loc_1002F2F  +
mov eax [ebp+dwBytes] +
add eax ebx +
mov [esi+0Ch] eax +
lea eax [edi+ebx] +
mov [esi+8] eax +
mov [esi+4] ebx +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
mov eax [esi+0Ch] +
sub eax ecx +
mov [ebp+dwBytes] eax +
jmp loc_1002F60  +
mov eax [esi+8] +
sub eax ecx +
jmp loc_1002FC5  +
***
lea eax [esi+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_1001CA5  +
test al al +
jnz loc_1003077  +
jmp loc_10030B9  +
***
call sub_1003100  +
mov edi ecx +
push dword ptr [ebp+8]  +
call sub_10019B7  +
mov esi eax +
cmp esi [edi+4] +
jnz loc_1003041  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-30h] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-6Ch] +
call sub_10030C9  +
push eax  +
push esi  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_10034FE  +
mov esi [eax] +
lea ecx [ebp-6Ch] +
call sub_1004D3F  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
lea eax [esi+28h] +
call sub_1002052  +
retn 4  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_10033D6  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+1Ch] +
call sub_100559C  +
mov eax esi +
call sub_1002052  +
retn 8  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1029008 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi [ebp+arg_4] +
jnb loc_100315B  +
test eax eax +
jnz loc_100315B  +
mov ecx [esi] +
test ecx ecx +
jz loc_1003156  +
call ecx  +
add esi 4 +
jmp loc_1003145  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_1029004 +
push edi  +
mov edi offset dword_1029010 +
test esi esi +
jz loc_10031A6  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_1008D54  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsW  +
mov esi [esi] +
jmp loc_1003177  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edx [eax] +
jmp loc_10031C8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+18h] +
lea eax [ecx+4] +
cmp esi 8 +
jnb loc_10031AC  +
mov edx eax +
cmp [ebp+arg_0] edx +
jb loc_10031E1  +
cmp esi 8 +
jnb loc_10031E8  +
mov ecx [ecx+14h] +
lea eax [eax+ecx*2] +
cmp eax [ebp+arg_0] +
ja loc_1006189  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
mov eax [eax] +
jmp loc_10031D2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jl loc_1006F69  +
lea ecx [edi+14h] +
call sub_1002028  +
cmp esi eax +
jge loc_1006F69  +
imul esi esi +
add esi [edi+18h] +
cmp dword ptr [esi+18h] 8 +
jb loc_100322A  +
mov eax [esi+4] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
lea eax [esi+4] +
jmp loc_1003224  +
***
call sub_10017A2  +
mov eax [ebp+10h] +
mov esi ecx +
push eax  +
lea ecx [ebp-30h] +
mov [ebp-3Ch] esi +
call sub_10033D6  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_10025E2  +
mov edi [ebp+0Ch] +
mov ebx eax +
test edi edi +
jz loc_100331D  +
mov ecx esi +
call sub_1002028  +
mov ecx 9249249h +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_100689A  +
add eax edi +
cmp ebx eax +
jnb loc_10068C6  +
mov edx ebx +
shr edx 1 +
sub ecx edx +
cmp ecx ebx +
jb loc_100689F  +
add ebx edx +
cmp ebx eax +
jnb loc_10032A1  +
mov ebx eax +
push 0  +
push ebx  +
call sub_100151B  +
mov ecx [esi+4] +
push esi  +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-34h] eax +
push ecx  +
mov [ebp-38h] eax +
mov byte ptr [ebp-4] 1 +
call sub_1003336  +
lea ecx [ebp-30h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
mov [ebp-38h] eax +
call sub_10025FD  +
push esi  +
mov [ebp-38h] eax +
push dword ptr [ebp-38h]  +
mov eax [esi+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1003336  +
mov ecx esi +
call sub_1002028  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_1003307  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10025A0  +
push dword ptr [esi+4]  +
call sub_1001B90  +
pop ecx  +
mov eax [ebp-34h] +
imul ebx ebx +
imul edi edi +
add ebx eax +
add edi eax +
mov [esi+0Ch] ebx +
mov [esi+8] edi +
mov [esi+4] eax +
push 0  +
push 1  +
lea ecx [ebp-30h] +
call sub_1001B47  +
call sub_1004E54  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003364  +
pop edi  +
leave   +
retn 10h  +
***
call sub_10053E2  +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov esi [ebp+8] +
mov [ebp-14h] eax +
cmp esi [ebp+0Ch] +
jnz loc_100338D  +
mov eax [ebp+10h] +
call sub_1002052  +
retn 18h  +
push esi  +
push dword ptr [ebp+10h]  +
call sub_10033A4  +
add dword ptr [ebp+10h] 1Ch +
add esi 1Ch +
jmp loc_100337D  +
***
call sub_1003100  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10033C9  +
push dword ptr [ebp+0Ch]  +
call sub_10033D6  +
call sub_1002052  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_1001A79  +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10024F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_1002028  +
mov ecx esi +
mov edi eax +
call sub_10025E2  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jb loc_1006C64  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1003442  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_1002028  +
test eax eax +
jnz loc_1003476  +
xor esi esi +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_1003234  +
imul esi esi +
add esi [edi+4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
mov eax [ebp+arg_4] +
sub eax [edi+4] +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi eax +
jmp loc_1003456  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10034B9  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
push esi  +
lea esi [eax+ecx] +
jnz loc_10034D4  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
push eax  +
push [ebp+arg_0]  +
push eax  +
push ecx  +
call memmove_s  +
add esp 10h +
jmp loc_10034CD  +
***
push [ebp+arg_8]  +
push dword ptr [esi+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_10028B2  +
mov eax [ebp+arg_0] +
jmp loc_1003554  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jz loc_10034E4  +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
push ebx  +
push edi  +
mov edi [ebp+arg_8] +
cmp ecx [eax] +
jz loc_10071C7  +
cmp ecx eax +
jnz loc_1003559  +
mov eax [eax+8] +
add eax 0Ch +
push edi  +
push eax  +
mov ecx esi +
call sub_1001CA5  +
test al al +
jz loc_1007241  +
mov eax [esi+4] +
push edi  +
push dword ptr [eax+8]  +
mov ecx esi +
push 0  +
push [ebp+arg_0]  +
call sub_10028B2  +
mov eax [ebp+arg_0] +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
add ecx 0Ch +
push ecx  +
push edi  +
mov ecx esi +
call sub_1001CA5  +
test al al +
jz loc_10071E5  +
mov eax [ebp+arg_4] +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] eax +
call sub_10035AE  +
mov ebx [ebp+arg_8] +
push edi  +
lea eax [ebx+0Ch] +
push eax  +
mov ecx esi +
call sub_1001CA5  +
test al al +
jz loc_10071E5  +
mov eax [ebx+8] +
cmp byte ptr [eax+49h] 0 +
push edi  +
mov ecx esi +
jnz loc_10071E2  +
push [ebp+arg_4]  +
push 1  +
jmp loc_1003547  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+49h] dl +
jnz loc_1006F35  +
mov ecx [eax] +
cmp [ecx+49h] dl +
jz loc_1006F3D  +
mov eax [eax+4] +
cmp [eax+49h] dl +
jnz loc_10035DD  +
mov ecx [esi] +
cmp ecx [eax] +
jz loc_1006F48  +
mov ecx [esi] +
cmp [ecx+49h] dl +
jnz loc_10035E6  +
mov [esi] eax +
pop esi  +
retn   +
***
call sub_1001800  +
push 10h  +
push offset dword_1003700  +
call sub_100585C  +
xor ebx ebx +
mov [ebp-4] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp-1Ch] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jnz loc_1007987  +
xor esi esi +
inc esi  +
mov eax dword_102902C +
cmp eax esi +
jz loc_10079A6  +
mov eax dword_102902C +
test eax eax +
jnz loc_10036D0  +
mov dword_102902C esi +
push offset dword_10036FC  +
push offset dword_10036F0  +
call sub_100313A  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10079B3  +
mov eax dword_102902C +
cmp eax esi +
jnz loc_1003685  +
push offset dword_10036EC  +
push offset dword_10036D8  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_102902C 2 +
cmp [ebp-1Ch] ebx +
jnz loc_1003692  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1029458 ebx +
jnz loc_10079C1  +
push dword_1029074  +
push dword_1029078  +
push dword_1029070  +
call sub_1002E19  +
add esp 0Ch +
mov dword_1029020 eax +
cmp dword_1029014 ebx +
jnz loc_1007A13  +
push eax  +
call ds:exit  +
mov dword_1029700 esi +
jmp loc_1003661  +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jnz loc_10037C2  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_10037C2  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jnz loc_1007A33  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10037C2  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_1029014 eax +
call sub_10057AB  +
push eax  +
call ds:__set_app_type  +
or dword_1029024 0FFFFFFFFh +
or dword_1029028 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1029454 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1029450 +
mov [eax] ecx +
call sub_1004631  +
cmp dword_1029444 0 +
jz loc_1007A59  +
call sub_10037CB  +
xor eax eax +
retn   +
***
xor eax eax +
jmp loc_1003769  +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
jmp loc_10037EF  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp-4] +
push eax  +
mov ecx esi +
call sub_1003823  +
push dword ptr [esi+4]  +
call sub_1001B90  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_1003851  +
cmp [ebp+arg_8] eax +
jnz loc_1003851  +
mov ecx esi +
call sub_1003860  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_1003847  +
jmp loc_1007B3F  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_100388D  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+45h] 0 +
mov ebx ecx +
mov esi edi +
jz loc_1007B18  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push offset loc_10038CD  +
call sub_10056FD  +
pop ecx  +
retn   +
***
mov ecx offset unk_1029090 +
jmp loc_10038D9  +
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+54h] +
call sub_1001B47  +
push 0  +
push 1  +
lea ecx [esi+38h] +
call sub_1001B47  +
push 0  +
push 1  +
lea ecx [esi+1Ch] +
call sub_1001B47  +
push 0  +
push 1  +
mov ecx esi +
call sub_1001B47  +
pop esi  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100497C  +
xor ebx ebx +
lea ecx [esi+1Ch] +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_10039A8 +
call sub_10039B9  +
lea ecx [esi+38h] +
call sub_10039B9  +
lea ecx [esi+5Ch] +
mov [esi+54h] bl +
mov [esi+55h] bl +
call sub_10039B9  +
lea ecx [esi+78h] +
call sub_10039B9  +
lea ecx [esi+94h] +
call sub_10039B9  +
lea eax [esi+0C8h] +
mov [esi+0BCh] ebx +
mov [esi+0C0h] ebx +
mov [esi+0C4h] ebx +
mov [eax+4] ebx +
mov [eax+8] ebx +
mov [eax+0Ch] ebx +
lea ecx [esi+0D8h] +
mov byte ptr [ebp-4] 6 +
call sub_10048E7  +
mov dword ptr [esi+0Ch] 2Fh +
mov eax esi +
call sub_1002052  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_1001A79  +
mov eax esi +
pop esi  +
retn   +
***
jmp dword ptr [eax]  +
***
adc al 0 +
add edi eax +
test [edi+edi*8-1] esi +
jmp fword ptr [eax]  +
***
push ebx  +
push offset aRd  +
push offset aReversedirecti  +
call sub_1002709  +
mov ecx [esi+8] +
mov [esi+0B0h] al +
lea eax [ebp-2Dh] +
push eax  +
push offset dword_1001338  +
push offset aQ  +
mov edi offset aQuery +
push edi  +
call sub_1003D75  +
lea ecx [esi+38h] +
push eax  +
call sub_1001DE7  +
mov ecx [esi+8] +
lea eax [ebp-2Dh] +
push eax  +
push ebx  +
push offset aLf  +
push offset aLogfile  +
call sub_1002709  +
mov ecx [esi+8] +
mov [esi+54h] al +
lea eax [ebp-2Dh] +
push eax  +
push ebx  +
push offset aSq  +
push offset aStructuredquer  +
call sub_1002709  +
mov ecx [esi+8] +
mov [esi+55h] al +
lea eax [ebp-2Dh] +
push eax  +
push ebx  +
push offset off_1029424  +
push offset dword_10013F8  +
push offset aFormat  +
call sub_1001688  +
mov [esi+0BCh] eax +
cmp eax 1 +
jz loc_100743C  +
cmp [esi+55h] bl +
jz loc_1003C6B  +
mov ecx [esi+8] +
push offset aQ  +
push edi  +
call sub_10040C8  +
test al al +
jnz loc_100744C  +
cmp [esi+54h] bl +
jnz loc_1007459  +
lea edi [esi+1Ch] +
cmp dword ptr [edi+18h] 8 +
jb loc_1003CCF  +
mov ecx [edi+4] +
lea eax [esi+38h] +
push eax  +
push ecx  +
call sub_1004333  +
mov ecx edi +
call sub_10043F2  +
mov ecx [esi+8] +
mov edi offset aBm +
push edi  +
push (offset dword_1001470+8)  +
call sub_10040C8  +
test al al +
jnz loc_1007471  +
mov ecx [esi+8] +
lea eax [ebp-2Dh] +
push eax  +
push ebx  +
push offset dword_1001470  +
push offset aLocale  +
call sub_1003D75  +
mov edi eax +
cmp edi ebx +
jnz loc_10074BF  +
call ds:GetThreadLocale  +
mov [esi+0B8h] eax +
mov [ebp-4] bl +
cmp [ebp-38h] bl +
jnz loc_1003CBE  +
call dword ptr [ebp-34h]  +
lea ecx [ebp-0A4h] +
call sub_10043CC  +
call sub_1002043  +
retn   +
***
lea ecx [edi+4] +
jmp loc_1003C5A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
mov esi ecx +
push eax  +
call sub_1001F78  +
mov eax [ebp+arg_4] +
cmp eax [esi+0Ch] +
pop esi  +
jnz loc_1007035  +
mov eax [ebp+arg_C] +
mov byte ptr [eax] 0 +
mov eax [ebp+arg_8] +
pop ebp  +
retn 10h  +
***
fcos   +
dec dword ptr [ecx+0C486h]  +
add [ebx] bh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp byte ptr [eax] 0 +
jnz loc_1004010  +
push dword ptr [eax+8]  +
call dword ptr [eax+4]  +
pop ebp  +
retn 4  +
***
call sub_10021E6  +
mov eax [ebp+8] +
mov edi ecx +
lea esi [edi+8] +
push eax  +
mov ecx esi +
mov [ebp-50h] edi +
call sub_1004E7A  +
mov ecx [esi] +
lea eax [ebp-49h] +
push eax  +
push 0  +
push offset String1  +
push offset aUnicode  +
call sub_1002709  +
mov byte_1029000 al +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+4]  +
cmp byte_1029000 0 +
jnz loc_1006987  +
mov ecx [esi] +
mov ebx offset aUsername +
push ebx  +
push offset dword_100138C  +
call sub_10040C8  +
mov ecx [esi] +
test al al +
jnz loc_1006994  +
push offset aPassword  +
push offset dword_1001360  +
call sub_10040C8  +
test al al +
jnz loc_10069B3  +
mov ecx [esi] +
push offset aRemote  +
push offset dword_1001378  +
call sub_10040C8  +
test al al +
jnz loc_10069C7  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+8]  +
call sub_1002043  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi [ecx+0Ch] +
push [ebp+arg_0]  +
lea eax [ebp+arg_4] +
push eax  +
call sub_1001F78  +
xor ecx ecx +
cmp [eax] esi +
pop esi  +
setnz cl  +
mov al cl +
pop ebp  +
retn 8  +
***
call sub_1003100  +
push 24h  +
call sub_1004829  +
pop ecx  +
mov [ebp-10h] eax +
xor esi esi +
mov [ebp-4] esi +
cmp eax esi +
jz loc_10041F0  +
mov ecx eax +
call sub_1004B76  +
push eax  +
lea ecx [ebp-10h] +
call sub_10018C6  +
mov ebx [ebp-10h] +
mov dword ptr [ebp-4] 1 +
cmp ebx esi +
jz loc_100662C  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
push dword ptr [ebp+8]  +
call sub_100216D  +
lea ecx [ebx+14h] +
call sub_1002028  +
test eax eax +
jle loc_1006638  +
push ebx  +
call sub_1002C4A  +
push eax  +
lea ecx [ebp+0Ch] +
call sub_10018C6  +
mov ecx ebx +
mov byte ptr [ebp-4] 2 +
call sub_1001EDB  +
test al al +
jnz loc_1006658  +
mov esi offset Name +
push esi  +
call sub_1004A11  +
push esi  +
mov edi offset loc_1001584 +
push edi  +
lea eax [ebp-28h] +
push eax  +
call sub_1004AE6  +
mov esi offset aSebackupprivil +
push esi  +
call sub_1004A11  +
push esi  +
push edi  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1004AE6  +
mov esi [ebp+0Ch] +
push ebx  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_1004019  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1003FFD  +
lea eax [ebp-28h] +
push eax  +
call sub_1003FFD  +
mov byte ptr [ebp-4] 1 +
test esi esi +
jz loc_10041D9  +
mov ecx esi +
call sub_1004249  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test ebx ebx +
jz loc_10041E8  +
mov ecx ebx +
call sub_1004249  +
call sub_1002052  +
retn 8  +
xor eax eax +
jmp loc_100411E  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_100426B  +
test esi esi +
jz loc_100426B  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
mov ecx [esi+4] +
push edi  +
xor edi edi +
test ecx ecx +
jnz loc_1004310  +
xor eax eax +
push [ebp+arg_10]  +
lea edx [ebp+arg_C] +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
mov [ebp+arg_C] eax +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EvtRender  +
test eax eax +
jnz loc_10042FB  +
mov ebx ds:GetLastError +
call ebx  +
mov edi eax +
cmp edi 7Ah +
jnz loc_100431A  +
xor edi edi +
push edi  +
push [ebp+arg_C]  +
mov ecx esi +
call sub_10024A5  +
mov ecx [esi+4] +
cmp ecx edi +
jz loc_1006DEE  +
mov eax [esi+8] +
sub eax ecx +
push [ebp+arg_10]  +
lea edx [ebp+arg_C] +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
mov [ebp+arg_C] eax +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EvtRender  +
test eax eax +
jz loc_1006DF5  +
push 0  +
push [ebp+arg_C]  +
mov ecx esi +
call sub_10024A5  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
mov eax [esi+8] +
sub eax ecx +
jmp loc_100428F  +
test edi edi +
jz loc_10042FB  +
jmp loc_1006DFE  +
***
call sub_1003100  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-4] ebx +
call sub_10050E5  +
mov eax [ebp-1Ch] +
cmp eax ebx +
jz loc_1004373  +
mov ecx [ebp-18h] +
sub ecx eax +
cmp ecx 2 +
jb loc_1004373  +
cmp byte ptr [eax] 0FFh +
jz loc_1006EFB  +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
lea eax [ebp-0Dh] +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
mov [ebp-0Dh] bl +
call sub_100541F  +
lea eax [ebp-30h] +
push eax  +
push ebx  +
push dword ptr [ebp-1Ch]  +
call near ptr dword_1001918+2  +
cmp eax ebx +
jnz loc_1006F2D  +
push dword ptr [ebp-2Ch]  +
mov ecx [ebp+0Ch] +
call sub_1001DE7  +
lea ecx [ebp-30h] +
call sub_10043CC  +
lea ecx [ebp-20h] +
call sub_10043CC  +
call sub_1002052  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_10043DF  +
push eax  +
call sub_1001B90  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_1001615  +
mov edi eax +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_10015F4  +
push dword ptr [edi]  +
mov ecx esi +
push dword ptr [eax]  +
lea eax [ebp+var_C] +
push eax  +
call sub_100442C  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_10015F4  +
push dword ptr [eax]  +
push [ebp+arg_4]  +
call sub_1004483  +
push [ebp+arg_4]  +
mov edi eax +
push [ebp+arg_8]  +
call sub_1004483  +
add esp 10h +
push eax  +
push edi  +
mov ecx esi +
call sub_10019F5  +
cmp dword ptr [esi+18h] 8 +
jb loc_1004479  +
mov esi [esi+4] +
mov eax [ebp+arg_0] +
lea ecx [esi+edi*2] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
add esi 4 +
jmp loc_100446B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1006860  +
sub eax [ebp+arg_4] +
sar eax 1 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
mov eax [eax] +
push esi  +
push edi  +
mov esi ecx +
mov [ebp+var_4] eax +
call sub_10016D4  +
mov edi [ebp+arg_4] +
mov [ebp+arg_8] eax +
test edi edi +
jz loc_100455E  +
mov ecx esi +
call sub_1004604  +
mov ecx 3FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_1007301  +
add eax edi +
push ebx  +
cmp [ebp+arg_8] eax +
jnb loc_100731B  +
mov edx [ebp+arg_8] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp+arg_8] +
jb loc_1007306  +
add [ebp+arg_8] edx +
cmp [ebp+arg_8] eax +
jnb loc_1004503  +
mov [ebp+arg_8] eax +
push 0  +
push [ebp+arg_8]  +
call sub_10016E7  +
push esi  +
mov ebx eax +
mov eax [esi+4] +
push ebx  +
push [ebp+arg_0]  +
push eax  +
call sub_1004569  +
lea ecx [ebp+var_4] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_100564C  +
push esi  +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_1004569  +
mov ecx esi +
call sub_1004604  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jnz loc_100730F  +
mov eax [ebp+arg_8] +
lea eax [ebx+eax*4] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*4] +
mov [esi+8] eax +
mov [esi+4] ebx +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004597  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
sar eax 2 +
mov ecx eax +
shl ecx 2 +
push esi  +
lea esi [edx+ecx] +
test eax eax +
ja loc_10072B5  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_1004604  +
mov edi [ebp+8] +
mov ecx esi +
cmp eax edi +
jnb loc_10073D0  +
push ebx  +
mov ebx [esi+8] +
lea eax [ebp+0Ch] +
push eax  +
call sub_1004604  +
sub edi eax +
push edi  +
push ebx  +
mov ecx esi +
call sub_100449F  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_1007283  +
xor eax eax +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100465B  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100467D  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10046A0  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_10046DD  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_0]  +
call sub_10046FE  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push ebx  +
mov esi ecx +
call sub_10031B5  +
test al al +
jnz loc_10072D8  +
or eax 0FFFFFFFFh +
sub eax [esi+14h] +
cmp eax [ebp+arg_4] +
jbe loc_10072FB  +
cmp [ebp+arg_4] 0 +
jbe loc_1004769  +
push edi  +
mov edi [esi+14h] +
add edi [ebp+arg_4] +
push 0  +
push edi  +
mov ecx esi +
call sub_1001BB8  +
test al al +
jz loc_1004768  +
mov eax [esi+18h] +
cmp eax 8 +
jb loc_1004771  +
mov edx [esi+4] +
push [ebp+arg_4]  +
mov ecx [esi+14h] +
push ebx  +
sub eax ecx +
push eax  +
lea eax [edx+ecx*2] +
push eax  +
call sub_100477B  +
push edi  +
mov ecx esi +
call sub_1001A79  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
lea edx [esi+4] +
jmp loc_100474D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100479D  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10047BF  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_10060E9  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 2 +
jb loc_10060F0  +
lea eax [ecx+ecx] +
push eax  +
call sub_1004829  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push [ebp+dwBytes]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_1006021  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100487E  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+49h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_10048B1  +
cmp eax ebx +
jz loc_1004891  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_100489A  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_10048A3  +
mov [ecx] ebx +
mov [eax+49h] bl +
mov byte ptr [eax+48h] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1006149  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 4Ch +
jb loc_1006150  +
imul ecx ecx +
push ecx  +
call sub_1004829  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004913  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+2Dh] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_1004946  +
cmp eax ebx +
jz loc_1004926  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_100492F  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_1004938  +
mov [ecx] ebx +
mov [eax+2Dh] bl +
mov byte ptr [eax+2Ch] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1006169  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 30h +
jb loc_1006170  +
imul ecx ecx +
push ecx  +
call sub_1004829  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1004A08 +
push edi  +
mov edi ds:GetStdHandle +
mov dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_10049BC +
and dword ptr [esi+8] 0 +
and dword ptr [esi+18h] 0 +
push 0FFFFFFF5h  +
call edi  +
push 0FFFFFFF4h  +
mov [esi+10h] eax +
call edi  +
and dword ptr [esi+0Ch] 0 +
mov [esi+14h] eax +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10049BC +
mov eax [esi+18h] +
and dword ptr [ebp-4] 0 +
test eax eax +
jnz loc_1006214  +
lea ecx [esi+8] +
call sub_1004EA6  +
mov dword ptr [esi] offset off_1004A08 +
call sub_1002052  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+lpName]  +
call sub_1004A29  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
lea eax [ebp+TokenHandle] +
push eax  +
xor ebx ebx +
push 20h  +
mov [ebp+TokenHandle] ebx +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_1006256  +
push edi  +
push [ebp+TokenHandle]  +
lea eax [ebp+var_18] +
push ds:CloseHandle  +
push eax  +
call sub_1004AE6  +
xor eax eax +
mov [ebp+Luid.LowPart] ebx +
lea edi [ebp+Luid.HighPart] +
stos   +
lea eax [ebp+Luid] +
push eax  +
push [ebp+lpName]  +
push ebx  +
call ds:LookupPrivilegeValueW  +
test eax eax +
jz loc_100625D  +
xor eax eax +
lea edi [ebp+NewState.Privileges] +
stos   +
stos   +
stos   +
movzx eax [ebp+arg_4] +
neg eax  +
sbb eax eax +
and eax 2 +
mov [ebp+NewState.Privileges.Attributes] eax +
mov eax [ebp+Luid.LowPart] +
push ebx  +
mov [ebp+NewState.Privileges.Luid.LowPart] eax +
mov eax [ebp+Luid.HighPart] +
push ebx  +
push ebx  +
mov [ebp+NewState.Privileges.Luid.HighPart] eax +
lea eax [ebp+NewState] +
push eax  +
push ebx  +
push [ebp+TokenHandle]  +
mov [ebp+NewState.PrivilegeCount] 1 +
call ds:AdjustTokenPrivileges  +
test eax eax +
jz loc_1004AD0  +
call ds:GetLastError  +
cmp eax 514h +
setnz bl  +
lea eax [ebp+var_18] +
push eax  +
call sub_1003FFD  +
mov al bl +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+var_4] 0 +
push [ebp+arg_4]  +
push 1  +
push [ebp+arg_0]  +
call sub_1004B0C  +
mov eax [ebp+arg_0] +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
mov eax [ebp+arg_0] +
setz cl  +
mov [eax] cl +
mov ecx [ebp+arg_8] +
mov [eax+4] ecx +
mov ecx [ebp+arg_C] +
mov [eax+8] ecx +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1004B4F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 1  +
mov esi ecx +
call sub_1001B47  +
test [ebp+arg_0] 1 +
jnz loc_100624A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1004A08 +
mov dword ptr [esi+4] 0 +
and dword ptr [ebp-4] 0 +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_1004BBC +
call sub_1004852  +
push 0  +
lea ecx [esi+14h] +
mov byte ptr [ebp-4] 1 +
call sub_10015C8  +
mov eax esi +
call sub_1002052  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004BEB  +
test byte ptr [ebp+8] 1 +
jz loc_1004BDF  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+14h] +
call sub_100256E  +
lea ecx [esi+8] +
call sub_1004C21  +
mov dword ptr [esi] offset off_1004A08 +
call sub_1002052  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1004C55  +
push dword ptr [esi+4]  +
call sub_1001B90  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_1004C83  +
cmp [ebp+arg_8] eax +
jnz loc_1004C83  +
mov ecx esi +
call sub_1004C92  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_1004C79  +
jmp loc_1006359  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_1004CBF  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+49h] 0 +
mov ebx ecx +
mov esi edi +
jnz loc_1004CF5  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_1004CBF  +
mov esi [esi] +
push edi  +
call sub_1004D01  +
push edi  +
call sub_1001B90  +
cmp byte ptr [esi+49h] 0 +
pop ecx  +
mov edi esi +
jz loc_1004CD4  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1004D19  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_1004D3F  +
test [ebp+arg_0] 1 +
jnz loc_10062BD  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+20h] +
call sub_1001B47  +
push 0  +
push 1  +
mov ecx esi +
call sub_1001B47  +
pop esi  +
retn   +
***
call sub_1003100  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
call sub_1001742  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1004D91  +
call sub_1002052  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1004DC5  +
push dword ptr [esi+4]  +
call sub_1001B90  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_1004DF3  +
cmp [ebp+arg_8] eax +
jnz loc_1004DF3  +
mov ecx esi +
call sub_1004E02  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_1004DE9  +
jmp loc_1006334  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_1004E2F  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+2Dh] 0 +
mov ebx ecx +
mov esi edi +
jz loc_100630D  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_1004E68  +
jmp sub_1002052  +
***
cmp ecx dword_1029008 +
jnz loc_1012849  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004EA6  +
mov eax [ebp+arg_0] +
mov [esi] eax +
test eax eax +
jz loc_1004E9A  +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_1004EB6  +
call sub_1004249  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004EEE  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
sar eax 1 +
lea eax [eax+eax] +
push esi  +
lea esi [eax+ecx] +
jnz loc_1006C74  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_1004F3D  +
lea eax [edi+esi*2] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004F5C  +
add esp 0Ch +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004F85  +
add esp 10h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_1004FB4  +
mov eax [ebp+arg_0] +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov ecx [ebp+arg_8] +
mov cx [ecx] +
dec [ebp+arg_4]  +
mov [eax] cx +
inc eax  +
inc eax  +
cmp [ebp+arg_4] 0 +
ja loc_1004FA0  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_1004FE1  +
lea eax [esi+edi] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1005000  +
add esp 0Ch +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1005029  +
add esp 10h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_1005051  +
mov eax [ebp+arg_0] +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov ecx [ebp+arg_8] +
mov cl [ecx] +
dec [ebp+arg_4]  +
mov [eax] cl +
inc eax  +
cmp [ebp+arg_4] 0 +
ja loc_1005040  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_1005084  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_1005093  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10050C5  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_8] +
jnz loc_1006C87  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
call sub_1003100  +
xor esi esi +
push esi  +
push esi  +
push 3  +
push esi  +
push 1  +
push 80000000h  +
push dword ptr [ebp+8]  +
call ds:CreateFileW  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_1006EE9  +
push ebx  +
push ds:CloseHandle  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1004AE6  +
push esi  +
push ebx  +
mov [ebp-4] esi +
call ds:GetFileSize  +
mov [ebp-10h] eax +
cmp eax 0FFFFFFFFh +
jz loc_1006EE9  +
mov edi [ebp+0Ch] +
mov ecx edi +
call sub_1005180  +
push esi  +
push dword ptr [ebp-10h]  +
mov ecx edi +
call sub_10024A5  +
mov edi [edi+4] +
push esi  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp-10h]  +
push edi  +
push ebx  +
call ds:ReadFile  +
test eax eax +
jz loc_1006EE9  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1003FFD  +
call sub_1002052  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_100519E  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1007C29  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov eax offset byte_1023D2D +
call sub_10053E2  +
mov eax [ecx+0BCh] +
and dword ptr [ebp-4] 0 +
sub eax 0 +
jnz loc_10074F4  +
push dword ptr [ebp+8]  +
call sub_10051F6  +
call sub_1002052  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
lea eax [ebp+var_4] +
push eax  +
lea edi [esi+0C8h] +
push edi  +
push 1  +
push [ebp+arg_0]  +
push 0  +
call sub_1004275  +
test eax eax +
jnz loc_10072C8  +
push edi  +
call sub_100171F  +
push eax  +
push offset aS  +
push esi  +
call sub_100523F  +
add esp 0Ch +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
push dword ptr [eax+10h]  +
call sub_1005260  +
add esp 0Ch +
pop ebp  +
retn   +
***
call sub_1003100  +
xor esi esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov [ebp-10h] esi +
push dword ptr [ebp+10h]  +
lea eax [ebp-1Ch] +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] esi +
push eax  +
call sub_10029B7  +
add esp 0Ch +
cmp eax esi +
jnz loc_100529D  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp+8]  +
call sub_10052B4  +
pop ecx  +
pop ecx  +
lea ecx [ebp-1Ch] +
mov esi eax +
call sub_10043CC  +
mov eax esi +
call sub_1002052  +
retn   +
***
call sub_1003100  +
mov eax [ebp+0Ch] +
xor ebx ebx +
cmp eax ebx +
jz loc_1005358  +
cmp [eax] bx +
jz loc_1005358  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10052D9  +
mov esi [ebp+8] +
sub eax edx +
sar eax 1 +
push esi  +
mov edi eax +
call ds:GetFileType  +
cmp eax 2 +
jz loc_1006E0A  +
cmp byte_1029000 bl +
jnz loc_1006EAD  +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
lea eax [ebp-28h] +
push eax  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] ebx +
call sub_1005365  +
cmp eax ebx +
jl loc_1006E86  +
mov eax [ebp-24h] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_100532F  +
push ebx  +
lea ecx [ebp-14h] +
push ecx  +
sub eax edx +
push eax  +
push dword ptr [ebp-24h]  +
push esi  +
call ds:WriteFile  +
test eax eax +
jz loc_1006E97  +
lea ecx [ebp-28h] +
call sub_10043CC  +
xor eax eax +
call sub_1002052  +
retn   +
***
call sub_10053E2  +
mov esi ds:WideCharToMultiByte +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push dword ptr [ebp+8]  +
push ebx  +
push dword ptr [ebp+0Ch]  +
call esi  +
mov [ebp-14h] ebx +
mov [ebp-4] ebx +
push ebx  +
cmp eax ebx +
jz loc_1007C97  +
mov edi [ebp+10h] +
push eax  +
mov ecx edi +
call sub_10024A5  +
mov ecx [edi+4] +
cmp ecx ebx +
jz loc_1007CC5  +
mov eax [edi+8] +
sub eax ecx +
push ebx  +
push ebx  +
push eax  +
push ecx  +
push 0FFFFFFFFh  +
push dword ptr [ebp+8]  +
push ebx  +
push dword ptr [ebp+0Ch]  +
call esi  +
push ebx  +
mov ecx edi +
cmp eax ebx +
jz loc_1007CCC  +
push eax  +
call sub_10024A5  +
mov eax [ebp-14h] +
call sub_1002052  +
retn 0Ch  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1029008 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov edx [esi+4] +
test edx edx +
jz loc_1006ECA  +
mov ecx [esi+8] +
sub ecx edx +
test edx edx +
jz loc_1005448  +
mov eax [esi+0Ch] +
sub eax edx +
cmp ecx eax +
jb loc_1006ED1  +
push [ebp+dwBytes]  +
mov eax [esi+8] +
push eax  +
lea eax [ebp+dwBytes] +
push eax  +
mov ecx esi +
call sub_1005464  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
test eax eax +
jz loc_10054A0  +
mov ecx [esi+8] +
sub ecx eax +
jz loc_10054A0  +
mov edi [ebp+arg_4] +
sub edi eax +
push [ebp+dwBytes]  +
mov ecx esi +
push 1  +
push [ebp+arg_4]  +
call sub_1002F40  +
mov ecx [esi+4] +
mov eax [ebp+arg_0] +
add ecx edi +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
xor edi edi +
jmp loc_1005481  +
***
call sub_10053E2  +
mov esi ecx +
push 0  +
push 1  +
call sub_10048B1  +
push dword ptr [ebp+18h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
mov [ebp-14h] eax +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_10054EE  +
mov eax [ebp-14h] +
call sub_1002052  +
retn 14h  +
***
call sub_1003100  +
mov ecx [ebp+8] +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_100551C  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1005529  +
call sub_1002052  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+0Ch] +
mov [esi+8] eax +
call sub_1005563  +
mov al [ebp+arg_10] +
mov [esi+48h] al +
mov byte ptr [esi+49h] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call sub_10033D6  +
and dword ptr [ebp-4] 0 +
add edi 1Ch +
push edi  +
lea ecx [esi+1Ch] +
call sub_100559C  +
mov eax esi +
call sub_1002052  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov cl [eax] +
add eax 4 +
mov [esi] cl +
push eax  +
lea ecx [esi+4] +
call sub_10033D6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov cl [eax] +
add eax 4 +
mov [esi] cl +
push eax  +
lea ecx [esi+4] +
call sub_10055EA  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
call sub_10024F0  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+var_4] 0 +
push 1  +
push [ebp+arg_0]  +
call sub_1005627  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
mov eax [ebp+arg_0] +
setz cl  +
mov [eax] cl +
mov ecx [ebp+arg_8] +
mov [eax+4] ecx +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_1005672  +
lea eax [edi+esi*4] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1005691  +
add esp 0Ch +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10056BA  +
add esp 10h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_10056DB  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
dec [ebp+arg_4]  +
mov [eax] ecx +
add eax 4 +
cmp [ebp+arg_4] 0 +
ja loc_10056C8  +
pop ebp  +
retn   +
***
mov ecx offset unk_1029080 +
call sub_10058A6  +
push (offset dword_10037E0+3)  +
call sub_10056FD  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1005719  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call sub_100585C  +
mov eax dword_1029028 +
mov [ebp-1Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1007A6A  +
push dword ptr [ebp+8]  +
call ds:_onexit  +
pop ecx  +
call sub_1005764  +
retn   +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
jmp fword ptr (byte_10289FF-1028A65h)[eax]  +
***
push edi  +
add [ecx] al +
call sub_10056FD  +
pop ecx  +
retn   +
***
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10057DF  +
push eax  +
call sub_10057E9  +
test eax eax +
jz loc_10057DF  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jz loc_1007ADF  +
cmp ax 3 +
jnz loc_10057DF  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
call sub_100585C  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1005838  +
cmp ecx 0FFFFFFFFh +
jz loc_1005838  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1005831  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1005831  +
cmp edx 10000000h +
jnb loc_1005831  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jnz loc_1007AD5  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1005764  +
retn 4  +
***
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1029008 +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10058D2  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+45h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_1005905  +
cmp eax ebx +
jz loc_10058E5  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_10058EE  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_10058F7  +
mov [ecx] ebx +
mov [eax+45h] bl +
mov byte ptr [eax+44h] 1 +
pop ebx  +
retn   +
***
mov edi edi +
mov eax [esp+arg_4] +
cmp cl 40h +
cmp cl 40h +
mov eax [esp+arg_0] +
push ebx  +
mov ecx [esp+4+arg_4] +
push esi  +
push edi  +
mov edx [eax+4] +
push ebp  +
mov esi [eax+8] +
mov edi [eax+0Ch] +
mov ebp [ecx] +
mov ebx edi +
xor ebx esi +
and ebx edx +
xor ebx edi +
add ebx ebp +
mov ebp [eax] +
lea ebx [ebp+ebx-28955B88h] +
rol ebx 7 +
mov eax esi +
add ebx edx +
xor eax edx +
and eax ebx +
mov ebp [ecx+4] +
xor eax esi +
add edi ebp +
add eax 0E8C7B756h +
add edi eax +
rol edi 0Ch +
mov eax edx +
add edi ebx +
xor eax ebx +
and eax edi +
mov ebp [ecx+8] +
xor eax edx +
add esi ebp +
add eax 242070DBh +
add esi eax +
rol esi 11h +
mov eax edi +
add esi edi +
xor eax ebx +
and eax esi +
mov ebp [ecx+0Ch] +
xor eax ebx +
add edx ebp +
add eax 0C1BDCEEEh +
add edx eax +
rol edx 16h +
mov eax edi +
add edx esi +
xor eax esi +
and eax edx +
mov ebp [ecx+10h] +
xor eax edi +
add ebx ebp +
add eax 0F57C0FAFh +
add ebx eax +
rol ebx 7 +
mov eax esi +
add ebx edx +
xor eax edx +
and eax ebx +
mov ebp [ecx+14h] +
xor eax esi +
add edi ebp +
add eax 4787C62Ah +
add edi eax +
rol edi 0Ch +
mov eax edx +
add edi ebx +
xor eax ebx +
and eax edi +
mov ebp [ecx+18h] +
xor eax edx +
add esi ebp +
add eax 0A8304613h +
add esi eax +
rol esi 11h +
mov eax edi +
add esi edi +
xor eax ebx +
and eax esi +
mov ebp [ecx+1Ch] +
xor eax ebx +
add edx ebp +
add eax 0FD469501h +
add edx eax +
rol edx 16h +
mov eax edi +
add edx esi +
xor eax esi +
and eax edx +
mov ebp [ecx+20h] +
xor eax edi +
add ebx ebp +
add eax 698098D8h +
add ebx eax +
rol ebx 7 +
mov eax esi +
add ebx edx +
xor eax edx +
and eax ebx +
mov ebp [ecx+24h] +
xor eax esi +
add edi ebp +
add eax 8B44F7AFh +
add edi eax +
rol edi 0Ch +
mov eax edx +
add edi ebx +
xor eax ebx +
and eax edi +
mov ebp [ecx+28h] +
xor eax edx +
add esi ebp +
add eax 0FFFF5BB1h +
add esi eax +
rol esi 11h +
mov eax edi +
add esi edi +
xor eax ebx +
and eax esi +
mov ebp [ecx+2Ch] +
xor eax ebx +
add edx ebp +
add eax 895CD7BEh +
add edx eax +
rol edx 16h +
mov eax edi +
add edx esi +
xor eax esi +
and eax edx +
mov ebp [ecx+30h] +
xor eax edi +
add ebx ebp +
add eax 6B901122h +
add ebx eax +
rol ebx 7 +
mov eax esi +
add ebx edx +
xor eax edx +
and eax ebx +
mov ebp [ecx+34h] +
xor eax esi +
add edi ebp +
add eax 0FD987193h +
add edi eax +
rol edi 0Ch +
mov eax edx +
add edi ebx +
xor eax ebx +
and eax edi +
mov ebp [ecx+38h] +
xor eax edx +
add esi ebp +
add eax 0A679438Eh +
add esi eax +
rol esi 11h +
mov eax edi +
add esi edi +
xor eax ebx +
and eax esi +
mov ebp [ecx+3Ch] +
xor eax ebx +
add edx ebp +
add eax 49B40821h +
add edx eax +
rol edx 16h +
mov eax esi +
add edx esi +
mov ebp [ecx+4] +
xor eax edx +
and eax edi +
xor eax esi +
add ebx ebp +
add eax 0F61E2562h +
add ebx eax +
mov eax edx +
rol ebx 5 +
mov ebp [ecx+18h] +
add ebx edx +
xor eax ebx +
and eax esi +
xor eax edx +
add edi ebp +
add eax 0C040B340h +
add edi eax +
mov ebp [ecx+2Ch] +
rol edi 9 +
add edi ebx +
mov eax edi +
xor eax ebx +
and eax edx +
xor eax ebx +
add esi ebp +
add eax 265E5A51h +
add esi eax +
mov eax edi +
rol esi 0Eh +
mov ebp [ecx] +
add esi edi +
xor eax esi +
and eax ebx +
xor eax edi +
add edx ebp +
add eax 0E9B6C7AAh +
add edx eax +
mov eax esi +
rol edx 14h +
mov ebp [ecx+14h] +
add edx esi +
xor eax edx +
and eax edi +
xor eax esi +
add ebx ebp +
add eax 0D62F105Dh +
add ebx eax +
mov eax edx +
rol ebx 5 +
mov ebp [ecx+28h] +
add ebx edx +
xor eax ebx +
and eax esi +
xor eax edx +
add edi ebp +
add eax 2441453h +
add edi eax +
rol edi 9 +
add edi ebx +
mov ebp [ecx+3Ch] +
mov eax edi +
xor eax ebx +
and eax edx +
xor eax ebx +
add esi ebp +
add eax 0D8A1E681h +
add esi eax +
mov eax edi +
rol esi 0Eh +
mov ebp [ecx+10h] +
add esi edi +
xor eax esi +
and eax ebx +
xor eax edi +
add edx ebp +
add eax 0E7D3FBC8h +
add edx eax +
mov eax esi +
rol edx 14h +
mov ebp [ecx+24h] +
add edx esi +
xor eax edx +
and eax edi +
xor eax esi +
add ebx ebp +
add eax 21E1CDE6h +
add ebx eax +
mov eax edx +
rol ebx 5 +
mov ebp [ecx+38h] +
add ebx edx +
xor eax ebx +
and eax esi +
xor eax edx +
add edi ebp +
add eax 0C33707D6h +
add edi eax +
mov ebp [ecx+0Ch] +
rol edi 9 +
add edi ebx +
mov eax edi +
xor eax ebx +
and eax edx +
xor eax ebx +
add esi ebp +
add eax 0F4D50D87h +
add esi eax +
mov eax edi +
rol esi 0Eh +
mov ebp [ecx+20h] +
add esi edi +
xor eax esi +
and eax ebx +
xor eax edi +
add edx ebp +
add eax 455A14EDh +
add edx eax +
rol edx 14h +
add edx esi +
mov eax esi +
mov ebp [ecx+34h] +
xor eax edx +
and eax edi +
xor eax esi +
add ebx ebp +
add eax 0A9E3E905h +
add ebx eax +
mov eax edx +
rol ebx 5 +
mov ebp [ecx+8] +
add ebx edx +
xor eax ebx +
and eax esi +
xor eax edx +
add edi ebp +
add eax 0FCEFA3F8h +
add edi eax +
mov ebp [ecx+1Ch] +
rol edi 9 +
add edi ebx +
mov eax edi +
xor eax ebx +
and eax edx +
xor eax ebx +
add esi ebp +
add eax 676F02D9h +
add esi eax +
mov eax edi +
rol esi 0Eh +
add esi edi +
xor eax esi +
mov ebp eax +
and ebp ebx +
xor ebp edi +
mov eax [ecx+30h] +
add edx ebp +
add eax 8D2A4C8Ah +
add edx eax +
rol edx 14h +
mov eax edi +
add edx esi +
xor eax esi +
mov ebp [ecx+14h] +
xor eax edx +
add ebx ebp +
add eax 0FFFA3942h +
add ebx eax +
rol ebx 4 +
mov eax esi +
add ebx edx +
xor eax edx +
mov ebp [ecx+20h] +
xor eax ebx +
add edi ebp +
add eax 8771F681h +
add edi eax +
rol edi 0Bh +
mov ebp [ecx+2Ch] +
add esi ebp +
add edi ebx +
mov eax edi +
add esi 6D9D6122h +
xor eax edx +
xor eax ebx +
add esi eax +
rol esi 10h +
mov eax edi +
add esi edi +
xor eax esi +
mov ebp [ecx+38h] +
add edx ebp +
mov ebp ebx +
xor ebp eax +
add edx 0FDE5380Ch +
add edx ebp +
rol edx 17h +
mov ebp [ecx+4] +
add ebx ebp +
add edx esi +
mov ebp edx +
add ebx 0A4BEEA44h +
xor ebp eax +
add ebx ebp +
rol ebx 4 +
mov eax esi +
add ebx edx +
xor eax edx +
mov ebp [ecx+10h] +
xor eax ebx +
add edi ebp +
add eax 4BDECFA9h +
add edi eax +
rol edi 0Bh +
mov ebp [ecx+1Ch] +
add esi ebp +
add edi ebx +
mov eax edi +
add esi 0F6BB4B60h +
xor eax edx +
xor eax ebx +
add esi eax +
rol esi 10h +
mov eax edi +
add esi edi +
mov ebp [ecx+28h] +
add edx ebp +
mov ebp ebx +
xor eax esi +
add edx 0BEBFBC70h +
xor ebp eax +
add edx ebp +
rol edx 17h +
mov ebp [ecx+34h] +
add ebx ebp +
add edx esi +
mov ebp edx +
add ebx 289B7EC6h +
xor ebp eax +
add ebx ebp +
rol ebx 4 +
mov eax esi +
add ebx edx +
xor eax edx +
mov ebp [ecx] +
xor eax ebx +
add edi ebp +
add eax 0EAA127FAh +
add edi eax +
rol edi 0Bh +
mov ebp [ecx+0Ch] +
add esi ebp +
add edi ebx +
mov eax edi +
add esi 0D4EF3085h +
xor eax edx +
xor eax ebx +
add esi eax +
rol esi 10h +
mov eax edi +
add esi edi +
mov ebp [ecx+18h] +
add edx ebp +
mov ebp ebx +
xor eax esi +
add edx 4881D05h +
xor ebp eax +
add edx ebp +
rol edx 17h +
add edx esi +
mov ebp edx +
xor ebp eax +
mov eax [ecx+24h] +
add ebx ebp +
add eax 0D9D4D039h +
add ebx eax +
rol ebx 4 +
mov eax esi +
add ebx edx +
xor eax edx +
mov ebp [ecx+30h] +
xor eax ebx +
add eax 0E6DB99E5h +
add edi ebp +
add edi eax +
rol edi 0Bh +
mov ebp [ecx+3Ch] +
add edi ebx +
add esi ebp +
mov eax edi +
add esi 1FA27CF8h +
xor eax edx +
xor eax ebx +
add esi eax +
rol esi 10h +
mov eax edi +
add esi edi +
mov ebp [ecx+8] +
xor eax esi +
add edx ebp +
xor eax ebx +
add edx 0C4AC5665h +
add edx eax +
rol edx 17h +
mov eax edi +
xor eax 0FFFFFFFFh +
add edx esi +
mov ebp [ecx] +
or eax edx +
xor eax esi +
add ebx ebp +
add eax 0F4292244h +
add ebx eax +
rol ebx 6 +
mov eax esi +
xor eax 0FFFFFFFFh +
add ebx edx +
mov ebp [ecx+1Ch] +
or eax ebx +
xor eax edx +
add edi ebp +
add eax 432AFF97h +
add edi eax +
rol edi 0Ah +
mov eax edx +
xor eax 0FFFFFFFFh +
add edi ebx +
mov ebp [ecx+38h] +
or eax edi +
xor eax ebx +
add esi ebp +
add eax 0AB9423A7h +
add esi eax +
rol esi 0Fh +
mov eax ebx +
xor eax 0FFFFFFFFh +
add esi edi +
mov ebp [ecx+14h] +
or eax esi +
xor eax edi +
add edx ebp +
add edx 0FC93A039h +
add edx eax +
rol edx 15h +
mov eax edi +
xor eax 0FFFFFFFFh +
add edx esi +
mov ebp [ecx+30h] +
or eax edx +
xor eax esi +
add ebx ebp +
add eax 655B59C3h +
add ebx eax +
rol ebx 6 +
mov eax esi +
xor eax 0FFFFFFFFh +
add ebx edx +
mov ebp [ecx+0Ch] +
or eax ebx +
xor eax edx +
add edi ebp +
add eax 8F0CCC92h +
add edi eax +
rol edi 0Ah +
mov eax edx +
xor eax 0FFFFFFFFh +
add edi ebx +
mov ebp [ecx+28h] +
or eax edi +
xor eax ebx +
add esi ebp +
add eax 0FFEFF47Dh +
add esi eax +
rol esi 0Fh +
mov eax ebx +
xor eax 0FFFFFFFFh +
add esi edi +
mov ebp [ecx+4] +
or eax esi +
xor eax edi +
add edx ebp +
add eax 85845DD1h +
add edx eax +
rol edx 15h +
mov eax edi +
xor eax 0FFFFFFFFh +
add edx esi +
mov ebp [ecx+20h] +
or eax edx +
xor eax esi +
add ebx ebp +
add eax 6FA87E4Fh +
add ebx eax +
rol ebx 6 +
mov eax esi +
xor eax 0FFFFFFFFh +
add ebx edx +
mov ebp [ecx+3Ch] +
or eax ebx +
xor eax edx +
add edi ebp +
add eax 0FE2CE6E0h +
add edi eax +
rol edi 0Ah +
mov eax edx +
xor eax 0FFFFFFFFh +
add edi ebx +
mov ebp [ecx+18h] +
or eax edi +
xor eax ebx +
add esi ebp +
add eax 0A3014314h +
add esi eax +
rol esi 0Fh +
mov eax ebx +
xor eax 0FFFFFFFFh +
add esi edi +
mov ebp [ecx+34h] +
or eax esi +
xor eax edi +
add edx ebp +
add eax 4E0811A1h +
add edx eax +
rol edx 15h +
mov eax edi +
xor eax 0FFFFFFFFh +
add edx esi +
mov ebp [ecx+10h] +
or eax edx +
xor eax esi +
add ebx ebp +
add eax 0F7537E82h +
add ebx eax +
rol ebx 6 +
mov eax esi +
xor eax 0FFFFFFFFh +
add ebx edx +
mov ebp [ecx+2Ch] +
or eax ebx +
xor eax edx +
add edi ebp +
add eax 0BD3AF235h +
add edi eax +
rol edi 0Ah +
mov eax edx +
xor eax 0FFFFFFFFh +
add edi ebx +
mov ebp [ecx+8] +
or eax edi +
xor eax ebx +
add esi ebp +
add eax 2AD7D2BBh +
add esi eax +
rol esi 0Fh +
mov eax ebx +
xor eax 0FFFFFFFFh +
add esi edi +
mov ebp [ecx+24h] +
or eax esi +
xor eax edi +
add edx ebp +
add eax 0EB86D391h +
add edx eax +
rol edx 15h +
mov eax [esp+10h+arg_0] +
add edx esi +
mov ecx [eax] +
add ebx ecx +
mov ecx [eax+4] +
add edx ecx +
mov [eax] ebx +
mov ecx [eax+8] +
mov [eax+4] edx +
add esi ecx +
pop ebp  +
mov ecx [eax+0Ch] +
mov [eax+8] esi +
add edi ecx +
mov [eax+0Ch] edi +
pop edi  +
pop esi  +
pop ebx  +
retn 8  +
***
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_100604D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100604D  +
cmp byte ptr [eax+19h] 2 +
jb loc_100604D  +
push 0Eh  +
push offset loc_100606C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0Dh  +
push offset aDW7rtmAdminWmi  +
push 0Eh  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
hlt   +
xor [ebx+76h] eax +
jmp near ptr aDW7rtmAdminWmi+28h  +
***
mov [esi+4] edx +
jmp loc_1002993  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_10060C2  +
mov [ecx] eax +
jmp loc_10029A9  +
mov [ecx+8] eax +
jmp loc_10029A9  +
***
mov [esi+4] edx +
jmp loc_10014EA  +
mov [ecx+4] eax +
jmp loc_1001508  +
***
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_101267A  +
add esp 14h +
pop esi  +
retn   +
***
xor ecx ecx +
jmp loc_1004816  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1008DFD  +
push offset dword_1026440  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
xor ecx ecx +
jmp loc_100153E  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1008DFD  +
push offset dword_1026440  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
xor ecx ecx +
jmp loc_1001574  +
***
push 0  +
lea ecx [ebp+var_C] +
call sub_1008DFD  +
push offset dword_1026440  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
xor ecx ecx +
jmp loc_10048D4  +
***
push 0  +
lea ecx [ebp+var_C] +
call sub_1008DFD  +
push offset dword_1026440  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
xor ecx ecx +
jmp loc_1004969  +
***
push 0  +
lea ecx [ebp+var_C] +
call sub_1008DFD  +
push offset dword_1026440  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
mov al 1 +
jmp loc_10031E3  +
***
push [ebp+arg_4]  +
push edi  +
push 8  +
push eax  +
call sub_100477B  +
jmp loc_1001B81  +
***
call loc_10124D5  +
jmp loc_1001A0B  +
mov [ebp+arg_4] eax +
jmp loc_1001A19  +
***
mov eax [ebp+8] +
mov ecx [ebp-18h] +
xor esi esi +
push esi  +
push 1  +
call sub_1001B47  +
push esi  +
push esi  +
call _CxxThrowException  +
int 3  +
***
push eax  +
call EvtClose  +
jmp loc_10049F3  +
***
call loc_1012485  +
jmp loc_1001BD0  +
cmp edi 8 +
jnb loc_1001BDF  +
mov eax [esi+14h] +
cmp edi eax +
jnb loc_100623B  +
mov eax edi +
push eax  +
push 1  +
mov ecx esi +
call sub_1001B47  +
jmp loc_1001BE3  +
***
push esi  +
call sub_1001B90  +
pop ecx  +
jmp loc_1004B6A  +
***
xor al al +
jmp loc_1004ADC  +
lea eax [ebp+var_18] +
push eax  +
call sub_1003FFD  +
xor al al +
jmp loc_1004ADB  +
***
call loc_10124D5  +
jmp loc_1002509  +
mov esi [ebp+arg_8] +
jmp loc_100251A  +
push 0FFFFFFFFh  +
add esi eax +
push esi  +
call sub_10019F5  +
push [ebp+arg_4]  +
mov ecx ebx +
push 0  +
call sub_10019F5  +
jmp loc_100255B  +
***
cmp dword ptr [esi+18h] 8 +
jb loc_10062A5  +
mov eax [esi+4] +
jmp loc_10062A8  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub edi eax +
sar edi 1 +
push edi  +
push esi  +
mov ecx esi +
call sub_10024F0  +
jmp loc_1001E60  +
***
push esi  +
call sub_1001B90  +
pop ecx  +
jmp loc_1004D33  +
***
cmp [eax+28h] bl +
jnz loc_1001F4C  +
mov al 1 +
jmp loc_1001F6D  +
cmp [eax+28h] bl +
jnz loc_1001F6B  +
jmp loc_10062D2  +
***
cmp edi 9249249h +
jbe loc_10062F1  +
call loc_1009AFB  +
push eax  +
push edi  +
call sub_100151B  +
imul edi edi +
add edi eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov al 1 +
jmp loc_10015E9  +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_1004E2F  +
mov esi [esi] +
push edi  +
call sub_1009A35  +
push edi  +
call sub_1001B90  +
cmp byte ptr [esi+2Dh] 0 +
pop ecx  +
mov edi esi +
jnz loc_1004E48  +
jmp loc_100630D  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1008FD6  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1009B98  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1006335  +
pop edi  +
jmp loc_1004DE9  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_10023EE  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1009E0E  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_100635A  +
pop edi  +
jmp loc_1004C79  +
***
push 1Ch  +
call sub_1004829  +
pop ecx  +
test eax eax +
jz loc_1002D1A  +
mov ecx eax +
call sub_1009325  +
jmp loc_1002D12  +
push 58h  +
call sub_1004829  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1002D1A  +
call sub_100A126  +
jmp loc_1002D12  +
push 58h  +
call sub_1004829  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov dword ptr [ebp-4] 1 +
test ecx ecx +
jz loc_1002D1A  +
call sub_100A1E1  +
jmp loc_1002D12  +
push 54h  +
call sub_1004829  +
pop ecx  +
test eax eax +
jz loc_1002D1A  +
mov ecx eax +
call sub_10093C7  +
jmp loc_1002D12  +
push 1Ch  +
call sub_1004829  +
pop ecx  +
test eax eax +
jz loc_1002D1A  +
mov ecx eax +
call sub_10092F6  +
jmp loc_1002D12  +
push offset aGli  +
push offset aGetLoginfo  +
push esi  +
call sub_1002DDF  +
test al al +
jz loc_1006455  +
push 58h  +
call sub_1004829  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov dword ptr [ebp-4] 3 +
test ecx ecx +
jz loc_1002D1A  +
call sub_100A185  +
jmp loc_1002D12  +
push offset aCl  +
push offset aClearLog  +
push esi  +
call sub_1002DDF  +
test al al +
jz loc_1006485  +
push 54h  +
call sub_1004829  +
pop ecx  +
test eax eax +
jz loc_1002D1A  +
mov ecx eax +
call sub_1009455  +
jmp loc_1002D12  +
push offset aEpl  +
push offset aExportLog  +
push esi  +
call sub_1002DDF  +
test al al +
jz loc_10064B5  +
push 74h  +
call sub_1004829  +
pop ecx  +
test eax eax +
jz loc_1002D1A  +
mov ecx eax +
call sub_1009491  +
jmp loc_1002D12  +
push offset aAl  +
push offset aArchiveLog  +
push esi  +
call sub_1002DDF  +
test al al +
jz loc_10064E5  +
push 40h  +
call sub_1004829  +
pop ecx  +
test eax eax +
jz loc_1002D1A  +
mov ecx eax +
call sub_1009513  +
jmp loc_1002D12  +
push offset aIm  +
push offset aInstallManifes  +
push esi  +
call sub_1002DDF  +
test al al +
jz loc_100651A  +
push 90h  +
call sub_1004829  +
pop ecx  +
test eax eax +
jz loc_1002D1A  +
push 1  +
mov ecx eax +
call sub_1009567  +
jmp loc_1002D12  +
push offset aUm  +
push offset aUninstallManif  +
push esi  +
call sub_1002DDF  +
test al al +
jz loc_1006545  +
push 90h  +
call sub_1004829  +
pop ecx  +
test eax eax +
jz loc_1002D1A  +
push 0  +
jmp loc_100650E  +
push esi  +
push 6  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
***
mov eax [ebp-20h] +
cmp dword ptr [eax+1Ch] 8 +
mov edi [eax] +
mov [ebp-1Ch] edi +
jb loc_100667D  +
mov ecx [eax+8] +
jmp loc_1006680  +
lea ecx [eax+8] +
xor ebx ebx +
cmp ecx ebx +
jz loc_10066BF  +
cmp [ecx] bx +
jz loc_10066AE  +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_1006690  +
sub eax esi +
sar eax 1 +
cmp word ptr [ecx+eax*2-2] 0Ah +
jnz loc_10066AE  +
push ecx  +
push offset aS_0  +
jmp loc_10066B4  +
push ecx  +
push offset aS_3  +
push dword ptr [ebp-18h]  +
call sub_100BC27  +
add esp 0Ch +
cmp edi ebx +
jle loc_1006710  +
push ebx  +
push 1  +
lea eax [ebp-14h] +
push eax  +
push ebx  +
push edi  +
push ebx  +
push 1300h  +
call ds:FormatMessageW  +
test eax eax +
jz loc_1006710  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push ds:LocalFree  +
push eax  +
call sub_1004AE6  +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 2 +
push offset aS_0  +
push dword ptr [ebp-18h]  +
call sub_100BC27  +
add esp 0Ch +
lea eax [ebp-34h] +
push eax  +
call sub_1003FFD  +
jmp loc_1006721  +
push edi  +
push offset aError0xX_  +
push dword ptr [ebp-18h]  +
call sub_100BC27  +
add esp 0Ch +
mov eax offset loc_100680B +
retn   +
mov eax [ebp-24h] +
mov esi [eax] +
xor ebx ebx +
push ebx  +
push 1  +
lea eax [ebp-14h] +
push eax  +
push ebx  +
push esi  +
push ebx  +
push 1300h  +
mov [ebp-1Ch] esi +
call ds:FormatMessageW  +
test eax eax +
jz loc_100677E  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push ds:LocalFree  +
push eax  +
call sub_1004AE6  +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 3 +
push offset aS_0  +
push dword ptr [ebp-18h]  +
call sub_100BC27  +
add esp 0Ch +
lea eax [ebp-34h] +
push eax  +
call sub_1003FFD  +
jmp loc_100678F  +
push esi  +
push offset aError0xX__0  +
push dword ptr [ebp-18h]  +
call sub_100BC27  +
add esp 0Ch +
mov eax offset loc_100680B +
retn   +
mov ecx [ebp-28h] +
mov eax [ecx] +
call dword ptr [eax]  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
mov [ebp-1Ch] esi +
jle loc_10067F4  +
push ebx  +
push 1  +
lea eax [ebp-14h] +
push eax  +
push ebx  +
push esi  +
push ebx  +
push 1300h  +
call ds:FormatMessageW  +
test eax eax +
jz loc_10067F4  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push ds:LocalFree  +
push eax  +
call sub_1004AE6  +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 4 +
push offset aS_0  +
push dword ptr [ebp-18h]  +
call sub_100BC27  +
add esp 0Ch +
lea eax [ebp-34h] +
push eax  +
call sub_1003FFD  +
jmp loc_1006805  +
push esi  +
push offset aError0xX_  +
push dword ptr [ebp-18h]  +
call sub_100BC27  +
add esp 0Ch +
mov eax offset loc_100680B +
retn   +
mov eax [ebp-1Ch] +
jmp loc_1002EA3  +
***
mov esi [ebp-14h] +
jmp loc_1006870  +
push esi  +
call sub_1004B37  +
add esi 1Ch +
cmp esi [ebp+10h] +
jnz loc_1006867  +
push 0  +
push 0  +
call _CxxThrowException  +
mov esi [ebp-14h] +
jmp loc_100688C  +
push esi  +
call sub_1004B37  +
add esi 1Ch +
cmp esi [ebp+8] +
jnz loc_1006883  +
push 0  +
push 0  +
call _CxxThrowException  +
***
push dword ptr [ebp-34h]  +
call sub_10025A0  +
push dword ptr [ebp-34h]  +
call sub_1001B90  +
pop ecx  +
***
push 0  +
push 0  +
call _CxxThrowException  +
***
mov eax [ebp+0Ch] +
mov ecx [ebp-3Ch] +
imul eax eax +
push ecx  +
mov ecx [ecx+8] +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
add eax ecx +
push eax  +
call sub_10025A0  +
jmp loc_10068BD  +
***
imul edi edi +
push ecx  +
mov ebx ecx +
push ecx  +
sub ebx edi +
push ebx  +
call sub_1003336  +
push dword ptr [ebp-34h]  +
mov [esi+8] eax +
push ebx  +
push dword ptr [ebp+8]  +
call sub_100ABE9  +
lea eax [ebp-30h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_100ABC4  +
add esp 18h +
jmp loc_100331D  +
***
push dword ptr [edi+10h]  +
call sub_100BB8B  +
jmp loc_1004068  +
push offset aRemote  +
push offset dword_1001378  +
call sub_10040C8  +
test al al +
jnz loc_100409B  +
push offset aRemote  +
push ebx  +
jmp loc_10069B9  +
push ebx  +
push offset aPassword  +
push 43h  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 10h +
and dword ptr [ebp-44h] 0 +
mov ecx [esi] +
xor eax eax +
lea edi [ebp-40h] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp-46h] +
push eax  +
xor edi edi +
push edi  +
push offset aRemote  +
push offset dword_1001378  +
call sub_1003D75  +
mov ecx [esi] +
mov [ebp-44h] eax +
lea eax [ebp-4Bh] +
push eax  +
push edi  +
push ebx  +
push offset dword_100138C  +
call sub_1003D75  +
mov ecx [esi] +
mov [ebp-40h] eax +
lea eax [ebp-48h] +
push eax  +
push edi  +
push offset aPassword  +
push offset dword_1001360  +
mov [ebp-3Ch] edi +
call sub_1003D75  +
mov ecx [esi] +
mov [ebp-38h] eax +
lea eax [ebp-47h] +
push eax  +
push edi  +
mov edi offset aAuthentication +
push edi  +
push offset dword_100133C  +
call sub_1003D75  +
mov [ebp-30h] eax +
cmp dword ptr [ebp-30h] 0 +
mov eax offset aDefault +
jnz loc_1006A48  +
mov [ebp-30h] eax +
push eax  +
push dword ptr [ebp-30h]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006A5E  +
and dword ptr [ebp-34h] 0 +
jmp loc_1006AC4  +
push offset aNegotiate  +
push dword ptr [ebp-30h]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006A7B  +
mov dword ptr [ebp-34h] 1 +
jmp loc_1006AC4  +
push offset aKerberos  +
push dword ptr [ebp-30h]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006A98  +
mov dword ptr [ebp-34h] 2 +
jmp loc_1006AC4  +
push offset aNtlm  +
push dword ptr [ebp-30h]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006AB5  +
mov dword ptr [ebp-34h] 3 +
jmp loc_1006AC4  +
push edi  +
push 23h  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
xor edi edi +
cmp [ebp-40h] edi +
jz loc_1006ADB  +
mov eax [ebp-40h] +
cmp [eax] di +
jnz loc_1006AD6  +
mov [ebp-40h] edi +
cmp [ebp-40h] edi +
jnz loc_1006ADE  +
mov [ebp-38h] edi +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
mov [ebp-4] edi +
cmp [ebp-40h] edi +
jz loc_1006B22  +
push 5Ch  +
push dword ptr [ebp-40h]  +
call ds:wcschr  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1006B22  +
push edi  +
push dword ptr [ebp-40h]  +
lea ecx [ebp-2Ch] +
call sub_100AB87  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1006B19  +
lea eax [ebp-28h] +
add edi 2 +
mov [ebp-3Ch] eax +
mov [ebp-40h] edi +
xor edi edi +
mov [ebp-5Ch] edi +
mov [ebp-58h] edi +
mov [ebp-54h] edi +
mov byte ptr [ebp-4] 1 +
cmp [ebp-40h] edi +
jz loc_1006BB1  +
mov eax [ebp-38h] +
cmp eax edi +
jz loc_1006B71  +
mov ecx offset dword_1001338 +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1006B68  +
cmp dx di +
jz loc_1006B64  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1006B68  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_1006B42  +
xor eax eax +
jmp loc_1006B6D  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_1006BB1  +
mov ecx [esi] +
lea eax [ebp-45h] +
push eax  +
mov edi offset dword_1001334 +
push edi  +
push ebx  +
push offset dword_100138C  +
call sub_1003D75  +
mov esi [esi] +
lea ecx [ebp-60h] +
push ecx  +
push eax  +
lea eax [ebp-4Ah] +
push eax  +
push edi  +
push offset aRemote  +
push offset dword_1001378  +
mov ecx esi +
call sub_1003D75  +
push eax  +
call sub_100BD3D  +
mov eax [ebp-5Ch] +
mov [ebp-38h] eax +
xor edi edi +
push edi  +
push edi  +
lea eax [ebp-44h] +
push eax  +
push 1  +
call EvtOpenSession  +
mov esi [ebp-50h] +
mov [esi+18h] eax +
call ds:GetLastError  +
mov edx [ebp-5Ch] +
cmp edx edi +
jnz loc_1006BD7  +
xor ecx ecx +
jmp loc_1006BDE  +
mov ecx [ebp-58h] +
sub ecx edx +
sar ecx 1 +
add ecx ecx +
cmp ecx edi +
jz loc_1006BEB  +
mov byte ptr [edx] 0 +
inc edx  +
dec ecx  +
jnz loc_1006BE4  +
cmp [esi+18h] edi +
jnz loc_1006C00  +
push dword ptr [ebp-44h]  +
push 12h  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
lea ecx [ebp-60h] +
call sub_10043CC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push edi  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
mov edi esi +
jmp loc_10040B4  +
***
push 1  +
push eax  +
call sub_10025FD  +
mov [esi+8] eax +
jmp loc_1003437  +
***
push eax  +
push [ebp+arg_0]  +
push eax  +
push ecx  +
call memmove_s  +
add esp 10h +
jmp loc_1004F0B  +
***
mov cx [eax] +
mov edx [ebp+arg_C] +
mov [edx] cx +
add [ebp+arg_C] 2 +
inc eax  +
inc eax  +
jmp loc_10050CD  +
***
call loc_1009AFB  +
and [ebp+arg_8] 0 +
jmp loc_1002807  +
mov eax [esi+8] +
mov ecx [ebp+arg_0] +
mov edx eax +
sub edx ecx +
sar edx 1 +
mov [ebp+arg_8] eax +
push esi  +
cmp edx edi +
jnb loc_1006D01  +
lea ebx [edi+edi] +
lea edx [ebx+ecx] +
push edx  +
push eax  +
push ecx  +
call sub_1004EC0  +
mov eax [esi+8] +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx eax +
sub ecx [ebp+arg_0] +
sar ecx 1 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_1004F17  +
add [esi+8] ebx +
mov esi [esi+8] +
lea eax [ebp+var_4] +
push eax  +
sub esi ebx +
push esi  +
push [ebp+arg_0]  +
call sub_100ADCF  +
add esp 0Ch +
jmp loc_1002892  +
push eax  +
mov ebx eax +
add edi edi +
push eax  +
sub ebx edi +
push ebx  +
call sub_1004EC0  +
push [ebp+arg_8]  +
mov [esi+8] eax +
push ebx  +
push [ebp+arg_0]  +
call sub_100AE82  +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_0] +
add edi eax +
push edi  +
push eax  +
call sub_100ADCF  +
add esp 18h +
jmp loc_1002892  +
***
call loc_1009AFB  +
and [ebp+dwBytes] 0 +
jmp loc_1002FAE  +
mov ebx [esi+8] +
mov eax [ebp+arg_0] +
mov ecx ebx +
sub ecx eax +
push esi  +
cmp ecx edi +
jnb loc_1006D9D  +
lea ecx [edi+eax] +
push ecx  +
push ebx  +
push eax  +
call sub_100348B  +
mov eax [esi+8] +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx [ebp+arg_0] +
sub ecx eax +
add ecx edi +
push ecx  +
push eax  +
mov ecx esi +
call sub_1004FBB  +
add [esi+8] edi +
mov esi [esi+8] +
sub esi edi +
cmp [ebp+arg_0] esi +
jz loc_1003026  +
sub esi [ebp+arg_0] +
push esi  +
push [ebp+var_4]  +
push [ebp+arg_0]  +
call memset  +
add esp 0Ch +
jmp loc_1003026  +
push ebx  +
mov [ebp+dwBytes] ebx +
sub [ebp+dwBytes] edi +
push ebx  +
push [ebp+dwBytes]  +
call sub_100348B  +
push ebx  +
push [ebp+dwBytes]  +
mov [esi+8] eax +
push [ebp+arg_0]  +
call sub_100AEAE  +
mov eax [ebp+arg_0] +
add esp 0Ch +
lea ecx [edi+eax] +
jmp loc_1006DD2  +
mov cl byte ptr [ebp+var_4] +
mov [eax] cl +
mov ecx [ebp+arg_0] +
inc eax  +
add ecx edi +
cmp eax ecx +
jz loc_1003026  +
jmp loc_1006DC7  +
***
add eax esi +
push edi  +
push eax  +
lea eax [ebp+dwBytes] +
push eax  +
call sub_100519E  +
jmp loc_10024D2  +
***
xor eax eax +
jmp loc_10042D9  +
call ebx  +
mov edi eax +
jmp loc_100431A  +
mov ecx esi +
call sub_1005180  +
jmp loc_1004307  +
***
lea eax [ebp-18h] +
push eax  +
push esi  +
call ds:GetConsoleMode  +
test eax eax +
jz loc_10052FC  +
cmp edi ebx +
jbe loc_1005358  +
mov eax [ebp+0Ch] +
mov [ebp-10h] ebx +
mov [ebp+0Ch] eax +
mov esi 1000h +
mov eax edi +
sub eax [ebp-10h] +
cmp eax esi +
jbe loc_1006E3E  +
mov eax esi +
push ebx  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:WriteConsoleW  +
test eax eax +
jz loc_1006E69  +
add [ebp-10h] esi +
add dword ptr [ebp+0Ch] 2000h +
cmp [ebp-10h] edi +
jnb loc_1005358  +
jmp loc_1006E33  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100535A  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100535A  +
lea ecx [ebp-28h] +
mov esi eax +
call sub_10043CC  +
mov eax esi +
jmp loc_100535A  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1006E86  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1006E86  +
push ebx  +
lea eax [ebp-14h] +
push eax  +
lea eax [edi+edi] +
push eax  +
push dword ptr [ebp+0Ch]  +
push esi  +
call ds:WriteFile  +
test eax eax +
jnz loc_1005358  +
jmp loc_1006E69  +
***
xor ecx ecx +
jmp loc_1005437  +
push [ebp+dwBytes]  +
mov eax [esi+8] +
push 1  +
push eax  +
mov ecx esi +
call sub_1004FBB  +
mov [esi+8] eax +
jmp loc_100545A  +
***
push dword ptr [ebp+8]  +
push 41h  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
int 3  +
***
cmp byte ptr [eax+1] 0FEh +
jnz loc_1004373  +
test cl 1 +
jz loc_1006F16  +
push dword ptr [ebp+8]  +
push 41h  +
push 0Dh  +
call sub_100BC45  +
add ecx 0FFFFFFFEh +
shr ecx 1 +
push ecx  +
mov ecx [ebp+0Ch] +
add eax 2 +
push eax  +
call sub_1001E14  +
jmp loc_10043B7  +
push dword ptr [ebp+8]  +
push 41h  +
push eax  +
jmp loc_1006F11  +
***
mov eax [eax+8] +
jmp loc_10035E4  +
push ecx  +
call sub_1008EE3  +
jmp loc_10035E4  +
mov [esi] eax +
jmp loc_10035CB  +
***
push 10h  +
push 57h  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
push 0Fh  +
push 57h  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
push 11h  +
push 57h  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
mov eax [esi+10h] +
jmp loc_1002261  +
***
mov eax [esi+10h] +
jmp loc_1002282  +
mov eax [esi+10h] +
jmp loc_10022A4  +
mov eax [esi+10h] +
jmp loc_10022C3  +
mov eax [esi+10h] +
jmp loc_10022E2  +
mov eax [esi+10h] +
jmp loc_1002301  +
mov eax [esi+10h] +
jmp loc_1002320  +
mov eax [esi+10h] +
jmp loc_100233B  +
mov eax [esi+10h] +
jmp loc_1002356  +
mov eax [esi+10h] +
jmp loc_1002371  +
mov eax [esi+10h] +
jmp loc_100238C  +
mov [ebp+var_1] 1 +
jmp loc_100239F  +
cmp [esi+24h] ebx +
jb loc_1006FE1  +
mov esi [esi+10h] +
jmp loc_1006FE4  +
add esi 10h +
push esi  +
push 0Ch  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov ecx [eax+30h] +
jmp loc_1002AB3  +
mov ecx [eax+30h] +
jmp loc_1002AC3  +
mov eax [eax+30h] +
jmp loc_1002ADB  +
push [ebp+arg_0]  +
push 23h  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov eax [eax+10h] +
jmp loc_1007024  +
add eax 10h +
push eax  +
push 9  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
xor eax eax +
***
cmp byte ptr [eax+28h] 0 +
jnz loc_100705F  +
cmp dword ptr [eax+24h] 8 +
jb loc_1007046  +
mov eax [eax+10h] +
jmp loc_1007049  +
add eax 10h +
push eax  +
push 0Ah  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov eax offset dword_1001334 +
jmp loc_1007073  +
mov ecx [ebp+arg_C] +
mov byte ptr [ecx] 1 +
cmp dword ptr [eax+44h] 8 +
jb loc_1007073  +
mov eax [eax+30h] +
jmp loc_1003DA2  +
add eax 30h +
jmp loc_1003DA2  +
***
mov eax [ebp+arg_C] +
mov byte ptr [eax] 1 +
mov al 1 +
jmp loc_1002732  +
mov eax [esi+30h] +
jmp loc_100274F  +
cmp dword ptr [esi+44h] 8 +
jb loc_100709B  +
mov eax [esi+30h] +
jmp loc_100709E  +
lea eax [esi+30h] +
push offset aFalse  +
push eax  +
call sub_10023CC  +
cmp eax 2 +
jnz loc_10070B5  +
xor al al +
jmp loc_1002765  +
cmp dword ptr [esi+24h] 8 +
jb loc_10070C0  +
mov esi [esi+10h] +
jmp loc_10070C3  +
add esi 10h +
push esi  +
push 0Bh  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
xor al al +
***
cmp byte ptr [esi+28h] 0 +
jnz loc_10070ED  +
cmp dword ptr [esi+24h] 8 +
jb loc_10070E5  +
mov esi [esi+10h] +
jmp loc_10070E8  +
add esi 10h +
push esi  +
push 0Ah  +
jmp loc_1007120  +
cmp dword ptr [esi+44h] 8 +
jb loc_10070F8  +
mov eax [esi+30h] +
jmp loc_10070FB  +
lea eax [esi+30h] +
push eax  +
push [ebp+arg_8]  +
call sub_1020699  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jnz loc_10016B6  +
cmp dword ptr [esi+24h] 8 +
jb loc_100711A  +
mov esi [esi+10h] +
jmp loc_100711D  +
add esi 10h +
push esi  +
push 0Dh  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push [ebp+lpMem]  +
call sub_1001B90  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
push offset aMapSetTTooLong  +
lea ecx [ebp+var_28] +
call sub_1009A4D  +
and [ebp+var_4] 0 +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_50] +
call sub_100991A  +
push offset dword_1026570  +
lea eax [ebp+var_50] +
push eax  +
call _CxxThrowException  +
mov [eax] ebx +
jmp loc_1002903  +
***
mov edx [edx+8] +
cmp byte ptr [edx+48h] 0 +
jz loc_10071AC  +
cmp esi [ecx+8] +
jnz loc_1007189  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1002976  +
mov eax [esi+4] +
mov byte ptr [eax+48h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+48h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_10014CD  +
jmp loc_100296C  +
mov byte ptr [ecx+48h] 1 +
mov byte ptr [edx+48h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+48h] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_100296C  +
***
add ecx 0Ch +
push ecx  +
push edi  +
mov ecx esi +
call sub_1001CA5  +
test al al +
jz loc_1007241  +
push edi  +
push [ebp+arg_4]  +
mov ecx esi +
jmp loc_10035A5  +
push ebx  +
jmp loc_1007234  +
mov eax [ebp+arg_4] +
push edi  +
add eax 0Ch +
push eax  +
mov ecx esi +
call sub_1001CA5  +
test al al +
jz loc_1007241  +
mov eax [ebp+arg_4] +
mov [ebp+arg_8] eax +
mov eax [esi+4] +
lea ecx [ebp+arg_8] +
mov [ebp+var_4] eax +
call sub_10023EE  +
mov ebx [ebp+arg_8] +
cmp ebx [ebp+var_4] +
jz loc_1007224  +
lea eax [ebx+0Ch] +
push eax  +
push edi  +
mov ecx esi +
call sub_1001CA5  +
test al al +
jz loc_1007241  +
mov eax [ebp+arg_4] +
mov ecx [eax+8] +
cmp byte ptr [ecx+49h] 0 +
push edi  +
mov ecx esi +
jz loc_100723B  +
push eax  +
push 0  +
jmp loc_1003547  +
push ebx  +
jmp loc_10035A5  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_100C418  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_1003552  +
***
push eax  +
push 7  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1007274  +
lea eax [ebp-28h] +
push eax  +
push 8  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov eax [ecx+8] +
sub eax edx +
sar eax 2 +
retn   +
***
mov eax [ecx+0Ch] +
sub eax edx +
sar eax 2 +
retn   +
***
xor ecx ecx +
jmp loc_100170A  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1008DFD  +
push offset dword_1026440  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push edx  +
call memmove_s  +
add esp 10h +
jmp loc_10045B9  +
***
push [ebp+arg_0]  +
push 1Bh  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
***
cmp dword ptr [esi+18h] 8 +
jb loc_10072E3  +
mov eax [esi+4] +
jmp loc_10072E6  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub ebx eax +
sar ebx 1 +
push ebx  +
push esi  +
mov ecx esi +
call sub_100FC2B  +
jmp loc_100476B  +
call loc_1012485  +
int 3  +
***
call loc_1009AFB  +
and [ebp+arg_8] 0 +
jmp loc_10044FB  +
push eax  +
call sub_1001B90  +
pop ecx  +
jmp loc_100454B  +
mov eax [esi+8] +
mov ecx [ebp+arg_0] +
mov edx eax +
sub edx ecx +
sar edx 2 +
mov [ebp+arg_8] eax +
push esi  +
cmp edx edi +
jnb loc_1007377  +
mov ebx edi +
shl ebx 2 +
lea edx [ebx+ecx] +
push edx  +
push eax  +
push ecx  +
call sub_1004569  +
mov eax [esi+8] +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx eax +
sub ecx [ebp+arg_0] +
sar ecx 2 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_100564C  +
add [esi+8] ebx +
mov esi [esi+8] +
lea eax [ebp+var_4] +
push eax  +
sub esi ebx +
push esi  +
push [ebp+arg_0]  +
call sub_100FA00  +
add esp 0Ch +
jmp loc_100455D  +
push eax  +
mov ebx eax +
shl edi 2 +
push eax  +
sub ebx edi +
push ebx  +
call sub_1004569  +
push [ebp+arg_8]  +
mov [esi+8] eax +
push ebx  +
push [ebp+arg_0]  +
call sub_100FB4D  +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_0] +
add edi eax +
push edi  +
push eax  +
call sub_100FA00  +
add esp 18h +
jmp loc_100455D  +
***
mov eax [eax+28h] +
test eax eax +
jz loc_10073BA  +
push eax  +
call EvtClose  +
lea ecx [ebp+var_4] +
call sub_1008FD6  +
mov eax [ebp+var_4] +
cmp eax [esi+4] +
jz loc_100175B  +
jmp loc_10073AD  +
***
call sub_1004604  +
cmp edi eax +
jnb loc_10045F9  +
mov eax [esi+8] +
mov ecx [esi+4] +
push eax  +
lea ecx [ecx+edi*4] +
push ecx  +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
call sub_100FD9E  +
jmp loc_10045F9  +
***
dec esi  +
or [eax+74h] ch +
adc al 0 +
add [edi-18h] edx +
mov ds:84FFFFCCh eax +
ror byte ptr [edi] 84h +
pop esp  +
mov edi 236A57FFh +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
lea ecx [esi+94h] +
call sub_10043F2  +
jmp loc_1003C2A  +
***
push 30h  +
push 57h  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
push offset aLogfile  +
push offset aStructuredquer  +
push 0Eh  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 10h +
mov ecx [esi+8] +
lea eax [ebp-2Dh] +
push eax  +
push offset dword_1001334  +
push edi  +
push (offset dword_1001470+8)  +
call sub_1003D75  +
push eax  +
lea ecx [ebp-2Ch] +
call sub_100159C  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 2 +
jnb loc_10074A1  +
lea eax [ebp-28h] +
lea ecx [esi+5Ch] +
push ecx  +
push eax  +
call sub_1004333  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1001B47  +
jmp loc_1003C86  +
***
cmp [edi] bx +
jz loc_1003CA7  +
push ebx  +
push edi  +
call ds:LocaleNameToLCID  +
mov [esi+0B8h] eax +
cmp eax ebx +
jnz loc_1003CB3  +
push edi  +
push 24h  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
jmp loc_1007500  +
dec eax  +
jz loc_100750B  +
dec eax  +
jnz loc_10051E9  +
or al ch +
stc   +
mov es word ptr [eax] +
add cl ch +
fcompp st(4) st +
push dword ptr [ebp+8]  +
call sub_10104F9  +
jmp loc_10051E9  +
***
mov eax [ebp-14h] +
cmp dword ptr [eax+1Ch] 8 +
mov edi [eax] +
jb loc_1007528  +
mov esi [eax+8] +
jmp loc_100752B  +
lea esi [eax+8] +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
test esi esi +
jz loc_100754F  +
cmp word ptr [esi] 0 +
jz loc_100754F  +
push edi  +
push esi  +
push offset aS_ErrorD  +
push eax  +
call sub_100BC27  +
add esp 10h +
jmp loc_100755E  +
push edi  +
push offset aFailedToRender  +
push eax  +
call sub_100BC27  +
add esp 0Ch +
mov eax offset loc_10051E9 +
retn   +
***
lea ecx [ebp-2Ch] +
call sub_10039B9  +
mov [ebp-4] ebx +
call ds:GetLastError  +
mov edi eax +
lea eax [ebp-2Ch] +
push eax  +
call sub_100B742  +
cmp eax ebx +
jnz loc_100761E  +
cmp [ebp-18h] ebx +
jbe loc_100761E  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
cmp dword ptr [ebp-14h] 8 +
mov ecx [ebp-28h] +
jnb loc_100760F  +
lea ecx [ebp-28h] +
push ecx  +
push offset aS_4  +
push eax  +
call sub_100BC27  +
add esp 0Ch +
push 31h  +
push edi  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
lea eax [esi+94h] +
cmp dword ptr [eax+18h] 8 +
jb loc_1007646  +
mov eax [eax+4] +
jmp loc_1007649  +
add eax 4 +
push eax  +
push offset aS_5  +
push esi  +
call sub_100523F  +
add esp 0Ch +
jmp near ptr dword_1003E18+37h  +
***
cmp dword ptr [esi+74h] 8 +
jb loc_1007668  +
mov eax [esi+60h] +
jmp loc_100766B  +
lea eax [esi+60h] +
push eax  +
call EvtCreateBookmark  +
mov [ebp-30h] eax +
cmp eax ebx +
jnz loc_100768A  +
push 32h  +
call ds:GetLastError  +
push eax  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
push 4  +
push ebx  +
push dword ptr [ebp-30h]  +
push ebx  +
push 1  +
push dword ptr [ebp-34h]  +
call EvtSeek  +
test eax eax +
jnz near ptr dword_1003E18+53h  +
push 32h  +
call ds:GetLastError  +
push eax  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_10076C6  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10076F1  +
test byte ptr [eax+1Ch] 1 +
jz loc_10076F1  +
cmp byte ptr [eax+19h] 2 +
jb loc_10076F1  +
push esi  +
push offset dword_1007928  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 96h  +
jmp loc_1007739  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_1007709  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1007734  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007734  +
cmp byte ptr [eax+19h] 2 +
jb loc_1007734  +
push esi  +
push offset dword_1007928  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 8Eh  +
push offset aDW7rtmAdminW_8  +
push esi  +
lea ecx [ebp-70h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-70h] +
push eax  +
call _CxxThrowException  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_1007766  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1007791  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007791  +
cmp byte ptr [eax+19h] 2 +
jb loc_1007791  +
push esi  +
push offset dword_1007928  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 9Dh  +
jmp loc_1007739  +
***
mov esi eax +
cmp esi ebx +
jnz loc_10077EF  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_100781A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100781A  +
cmp byte ptr [eax+19h] 2 +
jb loc_100781A  +
push esi  +
push offset dword_1007928  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0AFh  +
jmp loc_1007739  +
***
adc eax offset CreateFileW +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_10078D5  +
cmp dword ptr [esi+90h] 8 +
jb loc_10078BE  +
mov esi [esi+7Ch] +
jmp loc_10078C1  +
add esi 7Ch +
push esi  +
push 35h  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push edi  +
push ds:CloseHandle  +
lea eax [ebp-88h] +
push eax  +
call sub_1004AE6  +
mov byte ptr [ebp-4] 8 +
cmp byte_1029000 bl +
jz loc_10078FA  +
push edi  +
call sub_100BB8B  +
lea eax [ebp-60h] +
push eax  +
call sub_100171F  +
push eax  +
push edi  +
call sub_10052B4  +
pop ecx  +
pop ecx  +
lea eax [ebp-88h] +
push eax  +
call sub_1003FFD  +
lea ecx [ebp-60h] +
call sub_10043CC  +
jmp near ptr dword_1003EC4+9Dh  +
***
mov byte ptr [esi+70h] 1 +
jmp loc_1001D86  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1029020 eax +
xor ebx ebx +
cmp dword_1029014 ebx +
jnz loc_1007A13  +
push eax  +
call ds:_exit  +
***
cmp dword_1029700 ebx +
jnz loc_1007A21  +
call ds:_cexit  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax dword_1029020 +
call sub_1005764  +
retn   +
***
cmp ecx 20Bh +
jnz loc_10037C2  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10037C2  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1003764  +
***
push offset sub_1004631  +
call ds:__setusermatherr  +
pop ecx  +
jmp loc_10037BA  +
***
push 8  +
call _lock  +
pop ecx  +
and dword ptr [ebp-4] 0 +
mov eax dword_1029028 +
mov [ebp-1Ch] eax +
mov eax dword_1029024 +
mov [ebp-20h] eax +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
call __dllonexit  +
add esp 0Ch +
mov [ebp-24h] eax +
mov eax [ebp-1Ch] +
mov dword_1029028 eax +
mov eax [ebp-20h] +
mov dword_1029024 eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1007AC5  +
mov eax [ebp-24h] +
jmp loc_1005740  +
***
pop ecx  +
xor eax eax +
mov [ebp-1Ch] eax +
jmp loc_1005831  +
***
push 2  +
pop eax  +
pop ebp  +
retn   +
***
test eax ebx +
jz loc_1001829  +
not eax  +
mov dword_102900C eax +
jmp loc_100187F  +
***
xor ecx ecx +
jmp loc_1005928  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1008DFD  +
push offset dword_1026440  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_100388D  +
mov esi [esi] +
push edi  +
call sub_10152E8  +
push edi  +
call sub_1001B90  +
cmp byte ptr [esi+45h] 0 +
pop ecx  +
mov edi esi +
jnz loc_10038A6  +
jmp loc_1007B18  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1013572  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1015785  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1007B40  +
pop edi  +
jmp loc_1003847  +
***
cmp [ebp+arg_0] eax +
jnz loc_1001905  +
cmp ecx eax +
jz loc_1001905  +
jmp loc_100190E  +
***
cmp [ebp+arg_14] edx +
jnz loc_1002B9A  +
mov [ebp+arg_14] offset dword_1001334 +
jmp loc_1002B9A  +
mov [ebp+arg_0] 80070057h +
cmp ecx edx +
jz loc_1002BF9  +
xor eax eax +
mov [edi] ax +
jmp loc_1002BF9  +
mov eax [ebp+arg_14] +
cmp [eax] dx +
jz loc_1002C15  +
mov eax edi +
neg eax  +
sbb eax eax +
and eax 23h +
add eax 80070057h +
mov [ebp+arg_0] eax +
jmp loc_1002BF9  +
cmp esi 1 +
jbe loc_1002C15  +
lea ecx [esi+esi] +
cmp ecx 2 +
jbe loc_1002C15  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+var_4] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_1002C15  +
test ecx ecx +
jz loc_1002C06  +
push [ebp+arg_10]  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+var_C] +
xor ecx ecx +
call sub_101FF27  +
mov esi [ebp+var_C] +
jmp loc_1002C06  +
mov [eax] esi +
jmp loc_1002C2C  +
***
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_102010D  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
jmp loc_10051B3  +
***
mov ecx [ebp-18h] +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jle loc_1007C86  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-14h] eax +
mov eax offset loc_1007C8F +
retn   +
mov edi [ebp-14h] +
jmp loc_1002A8E  +
***
mov ecx [ebp-18h] +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jle loc_1007CED  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-14h] eax +
mov eax offset loc_10053D2 +
retn   +
***
mov esi [ebp+10h] +
push edi  +
push 1  +
mov ecx esi +
call sub_1001E91  +
mov eax [esi+4] +
xor ecx ecx +
mov [eax] cx +
call ds:GetLastError  +
cmp eax edi +
jle loc_100197E  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100197E  +
***
xor eax eax +
jmp loc_100195D  +
***
push 1  +
call sub_1001E91  +
mov eax [ebx+4] +
xor ecx ecx +
mov [eax] cx +
call ds:GetLastError  +
cmp eax edi +
jle loc_100197D  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100197D  +
***
lea ecx [ebp-20h] +
call sub_10228D6  +
push offset dword_1007D74  +
lea eax [ebp-20h] +
push eax  +
call _CxxThrowException  +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1001B90  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
or dword ptr [eax+0Ch] 0FFFFFFFFh +
or dword ptr [eax+10h] 0FFFFFFFFh +
mov [eax+8] ecx +
mov ecx [ebp+arg_8] +
mov [eax+18h] ecx +
mov ecx [ebp+arg_4] +
mov byte ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1004614 +
mov [eax+1Ch] ecx +
pop ebp  +
retn 0Ch  +
***
mov eax [ecx+8] +
retn   +
***
mov eax [ecx+0Ch] +
retn   +
***
mov eax [ecx+10h] +
retn   +
***
mov eax [ecx+18h] +
retn   +
***
mov eax [ecx+1Ch] +
retn   +
***
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
mov dword ptr [eax] offset off_1007D84 +
mov cl [ecx+4] +
mov [eax+4] cl +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_1007D84 +
mov dl [ecx+4] +
mov [eax+4] dl +
mov dword ptr [eax] offset off_1004614 +
mov edx [ecx+8] +
mov [eax+8] edx +
mov edx [ecx+0Ch] +
mov [eax+0Ch] edx +
mov edx [ecx+10h] +
mov [eax+10h] edx +
mov dl [ecx+14h] +
mov [eax+14h] dl +
mov edx [ecx+18h] +
mov [eax+18h] edx +
mov ecx [ecx+1Ch] +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1004829  +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
call sub_100BB75  +
jmp $+2  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_1008D83  +
dec eax  +
jz loc_1008D7A  +
push 57h  +
pop eax  +
jmp loc_1008DF1  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_1008DA9  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_1008DD2  +
cmp dword ptr [esi+10h] 0 +
jz loc_1008DD2  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_1008DEF  +
test cl 2 +
jz loc_1008DE0  +
mov esi [esi+10h] +
test esi esi +
jz loc_1008DE0  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call ??0exception@@QAE@ABQBD@Z  +
mov dword ptr [esi] offset off_1007D9C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1007D9C +
jmp ??1exception@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1007D9C +
call ??1exception@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1008E50  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ??0exception@@QAE@ABV0@@Z  +
mov dword ptr [esi] offset off_1007D9C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memmove_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1008EEF  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+49h] 0 +
jz loc_1008EED  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+2Dh] 0 +
jnz loc_1008F1D  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1008F31  +
mov [ecx+4] eax +
jmp loc_1008F3F  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_1008F3C  +
mov [ecx] eax +
jmp loc_1008F3F  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1008F59  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+2Dh] 0 +
jz loc_1008F57  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1008F77  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+2Dh] 0 +
jz loc_1008F75  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+2Dh] 0 +
jnz loc_1008FA4  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1008FB8  +
mov [ecx+4] eax +
jmp loc_1008FC7  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_1008FC5  +
mov [ecx+8] eax +
jmp loc_1008FC7  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+2Dh] dl +
jz loc_1008FF3  +
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_101267A  +
add esp 14h +
pop esi  +
retn   +
mov ecx [eax+8] +
cmp [ecx+2Dh] dl +
jnz loc_100900C  +
push ecx  +
call sub_1008F6B  +
jmp loc_1009014  +
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_1009014  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+2Dh] dl +
jz loc_1009003  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1004A08 +
jz loc_1009038  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+18h] +
lea eax [ecx+4] +
cmp esi 10h +
jb loc_1009059  +
mov edx [eax] +
jmp loc_100905B  +
mov edx eax +
cmp [ebp+arg_0] edx +
jb loc_1009075  +
cmp esi 10h +
jb loc_1009067  +
mov eax [eax] +
mov ecx [ecx+14h] +
add ecx eax +
cmp ecx [ebp+arg_0] +
jbe loc_1009075  +
mov al 1 +
jmp loc_1009077  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1008E9D  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1008EC0  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 10h +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
jb loc_1009100  +
mov ecx [ecx+4] +
jmp loc_1009103  +
add ecx 4 +
mov byte ptr [ecx+eax] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1009081  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10090A3  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_1009188  +
cmp dword ptr [esi+18h] 10h +
jb loc_1009188  +
cmp [ebp+arg_4] 0 +
lea eax [esi+4] +
push edi  +
mov edi [eax] +
jbe loc_1009180  +
push [ebp+arg_4]  +
push edi  +
push 10h  +
push eax  +
call sub_1009110  +
push edi  +
call sub_1001B90  +
pop ecx  +
pop edi  +
push [ebp+arg_4]  +
mov ecx esi +
mov dword ptr [esi+18h] 0Fh +
call sub_10090EA  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jnb loc_10091B9  +
call loc_10124D5  +
mov eax [esi+14h] +
sub eax edi +
cmp eax [ebp+arg_4] +
jnb loc_10091C6  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] 0 +
jbe loc_1009209  +
mov ecx [esi+18h] +
push ebx  +
lea edx [esi+4] +
cmp ecx 10h +
jb loc_10091DC  +
mov ebx [edx] +
jmp loc_10091DE  +
mov ebx edx +
cmp ecx 10h +
jb loc_10091E5  +
mov edx [edx] +
sub eax [ebp+arg_4] +
add ebx edi +
add ebx [ebp+arg_4] +
push eax  +
push ebx  +
sub ecx edi +
push ecx  +
add edx edi +
push edx  +
call sub_1009132  +
mov eax [esi+14h] +
sub eax [ebp+arg_4] +
mov ecx esi +
push eax  +
call sub_10090EA  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_10053E2  +
mov ecx [ebp-18h] +
mov edi edi +
push esi  +
mov esi ecx +
call sub_100497C  +
mov dword ptr [esi] offset off_1009314 +
mov dword ptr [esi+0Ch] 28h +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100497C  +
mov dword ptr [esi] offset off_1009340 +
mov dword ptr [esi+0Ch] 2Dh +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 0FFFFFFFEh +
jbe loc_1009376  +
call loc_1012485  +
cmp [esi+18h] edi +
jnb loc_1009388  +
push dword ptr [esi+14h]  +
mov ecx esi +
push edi  +
call sub_1009216  +
jmp loc_10093B4  +
cmp [ebp+arg_4] 0 +
jz loc_10093A8  +
cmp edi 10h +
jnb loc_10093A8  +
mov eax [esi+14h] +
cmp edi eax +
jnb loc_100939C  +
mov eax edi +
push eax  +
push 1  +
mov ecx esi +
call sub_1009154  +
jmp loc_10093B4  +
test edi edi +
jnz loc_10093B4  +
push edi  +
mov ecx esi +
call sub_10090EA  +
xor eax eax +
cmp eax edi +
sbb eax eax +
pop edi  +
neg eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100497C  +
lea ecx [esi+1Ch] +
mov dword ptr [esi] offset off_10093F4 +
call sub_10039B9  +
lea ecx [esi+38h] +
call sub_10039B9  +
mov dword ptr [esi+0Ch] 2Ch +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+38h] +
call sub_1001B47  +
push 0  +
push 1  +
lea ecx [esi+1Ch] +
call sub_1001B47  +
mov ecx esi +
pop esi  +
jmp sub_10049CD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10049CD  +
test byte ptr [ebp+8] 1 +
jz loc_1009449  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100497C  +
lea ecx [esi+1Ch] +
mov dword ptr [esi] offset off_1009480 +
call sub_10039B9  +
lea ecx [esi+38h] +
call sub_10039B9  +
mov dword ptr [esi+0Ch] 37h +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100497C  +
lea ecx [esi+1Ch] +
mov dword ptr [esi] offset off_10094CC +
call sub_10039B9  +
lea ecx [esi+38h] +
call sub_10039B9  +
lea ecx [esi+54h] +
call sub_10039B9  +
mov byte ptr [esi+70h] 0 +
mov byte ptr [esi+71h] 0 +
mov dword ptr [esi+0Ch] 39h +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+54h] +
call sub_1001B47  +
push 0  +
push 1  +
lea ecx [esi+38h] +
call sub_1001B47  +
push 0  +
push 1  +
lea ecx [esi+1Ch] +
call sub_1001B47  +
mov ecx esi +
pop esi  +
jmp sub_10049CD  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100497C  +
lea ecx [esi+1Ch] +
mov dword ptr [esi] offset off_1009538 +
call sub_10039B9  +
mov dword ptr [esi+0Ch] 3Bh +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+1Ch] +
call sub_1001B47  +
mov ecx esi +
pop esi  +
jmp sub_10049CD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100497C  +
lea ecx [esi+1Ch] +
mov dword ptr [esi] offset off_10095C8 +
call sub_10039B9  +
lea ecx [esi+38h] +
call sub_10039B9  +
lea ecx [esi+54h] +
call sub_10039B9  +
lea ecx [esi+70h] +
call sub_10039B9  +
mov al [ebp+arg_0] +
xor ecx ecx +
test al al +
setz cl  +
mov [esi+8Ch] al +
mov byte ptr [esi+8Dh] 0 +
mov byte ptr [esi+8Eh] 0 +
mov eax esi +
lea ecx [ecx+ecx+3Dh] +
mov [esi+0Ch] ecx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+70h] +
call sub_1001B47  +
push 0  +
push 1  +
lea ecx [esi+54h] +
call sub_1001B47  +
push 0  +
push 1  +
lea ecx [esi+38h] +
call sub_1001B47  +
push 0  +
push 1  +
lea ecx [esi+1Ch] +
call sub_1001B47  +
mov ecx esi +
pop esi  +
jmp sub_10049CD  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_1007DA8 +
call sub_1009154  +
mov ecx esi +
pop esi  +
jmp ??1exception@@UAE@XZ  +
***
cmp dword ptr [ecx+24h] 10h +
jb loc_1009649  +
mov eax [ecx+10h] +
retn   +
***
lea eax [ecx+10h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100961B  +
test byte ptr [ebp+8] 1 +
jz loc_100966C  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
cmp [edi+14h] eax +
jnb loc_1009692  +
call loc_10124D5  +
mov esi [edi+14h] +
mov eax [ebp+arg_4] +
sub esi eax +
cmp [ebp+arg_8] esi +
jnb loc_10096A2  +
mov esi [ebp+arg_8] +
mov ecx ebx +
cmp ebx edi +
jnz loc_10096C0  +
push 0FFFFFFFFh  +
add esi eax +
push esi  +
call sub_10091A3  +
push [ebp+arg_4]  +
mov ecx ebx +
push 0  +
call sub_10091A3  +
jmp loc_1009700  +
push 0  +
push esi  +
call sub_1009360  +
test al al +
jz loc_1009700  +
cmp dword ptr [edi+18h] 10h +
jb loc_10096D7  +
mov edi [edi+4] +
jmp loc_10096DA  +
add edi 4 +
mov ecx [ebx+18h] +
cmp ecx 10h +
jb loc_10096E7  +
mov eax [ebx+4] +
jmp loc_10096EA  +
lea eax [ebx+4] +
mov edx [ebp+arg_4] +
push esi  +
add edi edx +
push edi  +
push ecx  +
push eax  +
call sub_1009110  +
push esi  +
mov ecx ebx +
call sub_10090EA  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1009044  +
test al al +
jz loc_1009742  +
cmp dword ptr [esi+18h] 10h +
jb loc_100972F  +
mov eax [esi+4] +
jmp loc_1009732  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub edi eax +
push edi  +
push esi  +
mov ecx esi +
call sub_1009678  +
jmp loc_1009779  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1009360  +
test al al +
jz loc_1009777  +
mov ecx [esi+18h] +
cmp ecx 10h +
jb loc_100975F  +
mov eax [esi+4] +
jmp loc_1009762  +
lea eax [esi+4] +
push [ebp+arg_4]  +
push edi  +
push ecx  +
push eax  +
call sub_1009110  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_10090EA  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1009405  +
test byte ptr [ebp+8] 1 +
jz loc_100979E  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10094DD  +
test byte ptr [ebp+8] 1 +
jz loc_10097C4  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1009549  +
test byte ptr [ebp+8] 1 +
jz loc_10097EA  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10095D9  +
test byte ptr [ebp+8] 1 +
jz loc_1009810  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
call sub_1001B47  +
test [ebp+arg_0] 1 +
jz loc_100983D  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_10090EA  +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1009678  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+1] +
push ebx  +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_1009885  +
sub eax edx +
push eax  +
push [ebp+arg_0]  +
call sub_100970E  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0exception@@QAE@XZ  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_1007DA8 +
call sub_1009849  +
mov eax esi +
call sub_1002052  +
retn 4  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call ??0exception@@QAE@ABV0@@Z  +
and dword ptr [ebp-4] 0 +
add edi 0Ch +
push edi  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_1007DA8 +
call sub_1009849  +
mov eax esi +
call sub_1002052  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10098A1  +
mov dword ptr [esi] offset off_1007DB4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1007DB4 +
jmp sub_100961B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1007DB4 +
call sub_100961B  +
test byte ptr [ebp+8] 1 +
jz loc_100996C  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10098DB  +
mov dword ptr [esi] offset off_1007DB4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_100961B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1007DC0 +
call sub_100961B  +
test byte ptr [ebp+8] 1 +
jz loc_10099E9  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10098DB  +
mov dword ptr [esi] offset off_1007DC0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_100981C  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_10090EA  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1009879  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_10098DB  +
push offset dword_1009A9C  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1009978  +
push offset dword_1026570  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_10099F5  +
push offset dword_1026590  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
push 44h  +
mov eax offset dword_10254D8 +
call sub_1003100  +
push offset aVectorTTooLong  +
lea ecx [ebp-28h] +
call sub_1009A4D  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_100991A  +
push offset dword_1026570  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_1009B6B  +
xor al al +
jmp loc_1009B8D  +
cmp edi 7FFFFFFFh +
jbe loc_1009B78  +
call loc_1009AFB  +
push eax  +
push edi  +
call sub_10047F3  +
mov [esi+4] eax +
mov [esi+8] eax +
lea eax [eax+edi*2] +
mov [esi+0Ch] eax +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003100  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+2Dh] 0 +
jz loc_1009BE2  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_1009A4D  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_10098A1  +
push offset dword_1026590  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_1007DC0 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_1008FD6  +
mov edx [edi] +
cmp byte ptr [edx+2Dh] 0 +
jz loc_1009BF7  +
mov ebx [edi+8] +
jmp loc_1009C10  +
mov eax [edi+8] +
cmp byte ptr [eax+2Dh] 0 +
jz loc_1009C04  +
mov ebx edx +
jmp loc_1009C10  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_1009C79  +
cmp byte ptr [ebx+2Dh] 0 +
mov esi [edi+4] +
jnz loc_1009C1C  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_1009C2C  +
mov [eax+4] ebx +
jmp loc_1009C37  +
cmp [esi] edi +
jnz loc_1009C34  +
mov [esi] ebx +
jmp loc_1009C37  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_1009C56  +
cmp byte ptr [ebx+2Dh] 0 +
jz loc_1009C48  +
mov eax esi +
jmp loc_1009C51  +
push ebx  +
call sub_1008F6B  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_1009CD5  +
cmp byte ptr [ebx+2Dh] 0 +
jz loc_1009C68  +
mov eax esi +
jmp loc_1009C71  +
push ebx  +
call sub_1008F4D  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_1009CD5  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_1009C89  +
mov esi eax +
jmp loc_1009CA2  +
cmp byte ptr [ebx+2Dh] 0 +
mov esi [eax+4] +
jnz loc_1009C95  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_1009CB2  +
mov [ecx+4] eax +
jmp loc_1009CC0  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_1009CBD  +
mov [ecx] eax +
jmp loc_1009CC0  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+2Ch] +
mov dl [edi+2Ch] +
mov [eax+2Ch] dl +
mov [edi+2Ch] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+2Ch] 1 +
jz loc_1009D99  +
jmp loc_1009DDE  +
cmp byte ptr [ebx+2Ch] 1 +
jnz loc_1009DDA  +
mov eax [esi] +
cmp ebx eax +
jnz loc_1009D60  +
mov eax [esi+8] +
cmp byte ptr [eax+2Ch] 0 +
jnz loc_1009D11  +
mov byte ptr [eax+2Ch] 1 +
push esi  +
mov byte ptr [esi+2Ch] 0 +
call sub_1008F01  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+2Dh] 0 +
jnz loc_1009D94  +
mov edx [eax] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_1009D28  +
mov edx [eax+8] +
cmp byte ptr [edx+2Ch] 1 +
jz loc_1009D90  +
mov edx [eax+8] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_1009D47  +
mov edx [eax] +
mov byte ptr [edx+2Ch] 1 +
push eax  +
mov byte ptr [eax+2Ch] 0 +
call sub_1008F88  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+2Ch] +
mov [eax+2Ch] dl +
mov byte ptr [esi+2Ch] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+2Ch] 1 +
call sub_1008F01  +
jmp loc_1009DDA  +
cmp byte ptr [eax+2Ch] 0 +
jnz loc_1009D79  +
mov byte ptr [eax+2Ch] 1 +
push esi  +
mov byte ptr [esi+2Ch] 0 +
call sub_1008F88  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+2Dh] 0 +
jnz loc_1009D94  +
mov edx [eax+8] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_1009DA6  +
mov edx [eax] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_1009DA6  +
mov byte ptr [eax+2Ch] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_1009DDA  +
jmp loc_1009CE4  +
mov edx [eax] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_1009DC4  +
mov edx [eax+8] +
mov byte ptr [edx+2Ch] 1 +
push eax  +
mov byte ptr [eax+2Ch] 0 +
call sub_1008F01  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+2Ch] +
mov [eax+2Ch] dl +
mov byte ptr [esi+2Ch] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+2Ch] 1 +
call sub_1008F88  +
mov byte ptr [ebx+2Ch] 1 +
push edi  +
call sub_1009A35  +
push edi  +
call sub_1001B90  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_1009DF9  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1002052  +
retn 8  +
***
call sub_1003100  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+49h] 0 +
jz loc_1009E58  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_1009A4D  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_10098A1  +
push offset dword_1026590  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_1007DC0 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_10023EE  +
mov edx [edi] +
cmp byte ptr [edx+49h] 0 +
jz loc_1009E6D  +
mov ebx [edi+8] +
jmp loc_1009E86  +
mov eax [edi+8] +
cmp byte ptr [eax+49h] 0 +
jz loc_1009E7A  +
mov ebx edx +
jmp loc_1009E86  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_1009EEF  +
cmp byte ptr [ebx+49h] 0 +
mov esi [edi+4] +
jnz loc_1009E92  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_1009EA2  +
mov [eax+4] ebx +
jmp loc_1009EAD  +
cmp [esi] edi +
jnz loc_1009EAA  +
mov [esi] ebx +
jmp loc_1009EAD  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_1009ECC  +
cmp byte ptr [ebx+49h] 0 +
jz loc_1009EBE  +
mov eax esi +
jmp loc_1009EC7  +
push ebx  +
call sub_100242A  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_1009F4B  +
cmp byte ptr [ebx+49h] 0 +
jz loc_1009EDE  +
mov eax esi +
jmp loc_1009EE7  +
push ebx  +
call sub_1008EE3  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_1009F4B  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_1009EFF  +
mov esi eax +
jmp loc_1009F18  +
cmp byte ptr [ebx+49h] 0 +
mov esi [eax+4] +
jnz loc_1009F0B  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_1009F28  +
mov [ecx+4] eax +
jmp loc_1009F36  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_1009F33  +
mov [ecx] eax +
jmp loc_1009F36  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+48h] +
mov dl [edi+48h] +
mov [eax+48h] dl +
mov [edi+48h] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+48h] 1 +
jz loc_100A00F  +
jmp loc_100A054  +
cmp byte ptr [ebx+48h] 1 +
jnz loc_100A050  +
mov eax [esi] +
cmp ebx eax +
jnz loc_1009FD6  +
mov eax [esi+8] +
cmp byte ptr [eax+48h] 0 +
jnz loc_1009F87  +
mov byte ptr [eax+48h] 1 +
push esi  +
mov byte ptr [esi+48h] 0 +
call sub_1002976  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+49h] 0 +
jnz loc_100A00A  +
mov edx [eax] +
cmp byte ptr [edx+48h] 1 +
jnz loc_1009F9E  +
mov edx [eax+8] +
cmp byte ptr [edx+48h] 1 +
jz loc_100A006  +
mov edx [eax+8] +
cmp byte ptr [edx+48h] 1 +
jnz loc_1009FBD  +
mov edx [eax] +
mov byte ptr [edx+48h] 1 +
push eax  +
mov byte ptr [eax+48h] 0 +
call sub_10014CD  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+48h] +
mov [eax+48h] dl +
mov byte ptr [esi+48h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+48h] 1 +
call sub_1002976  +
jmp loc_100A050  +
cmp byte ptr [eax+48h] 0 +
jnz loc_1009FEF  +
mov byte ptr [eax+48h] 1 +
push esi  +
mov byte ptr [esi+48h] 0 +
call sub_10014CD  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+49h] 0 +
jnz loc_100A00A  +
mov edx [eax+8] +
cmp byte ptr [edx+48h] 1 +
jnz loc_100A01C  +
mov edx [eax] +
cmp byte ptr [edx+48h] 1 +
jnz loc_100A01C  +
mov byte ptr [eax+48h] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_100A050  +
jmp loc_1009F5A  +
mov edx [eax] +
cmp byte ptr [edx+48h] 1 +
jnz loc_100A03A  +
mov edx [eax+8] +
mov byte ptr [edx+48h] 1 +
push eax  +
mov byte ptr [eax+48h] 0 +
call sub_1002976  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+48h] +
mov [eax+48h] dl +
mov byte ptr [esi+48h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+48h] 1 +
call sub_10014CD  +
mov byte ptr [ebx+48h] 1 +
push edi  +
call sub_1004D01  +
push edi  +
call sub_1001B90  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_100A06F  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1002052  +
retn 8  +
***
call sub_1003100  +
mov esi ds:GetStdHandle +
push 0FFFFFFF5h  +
call esi  +
push 0FFFFFFF4h  +
mov edi eax +
call esi  +
mov esi eax +
xor eax eax +
mov [ebp-18h] eax +
mov [ebp-14h] eax +
mov [ebp-10h] eax +
mov [ebp-4] eax +
cmp [ebp+8] eax +
jz loc_100A0D2  +
push dword ptr [ebp+8]  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1020677  +
push dword ptr [ebp-18h]  +
push offset aS  +
push esi  +
call sub_100BC27  +
add esp 0Ch +
push 26h  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1020677  +
push dword ptr [ebp-18h]  +
push offset aS_0  +
push edi  +
call sub_100BC27  +
add esp 0Ch +
lea ecx [ebp-1Ch] +
call sub_10043CC  +
call sub_1002052  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
or dword ptr [esi] 0FFFFFFFFh +
push 0  +
lea ecx [esi+8] +
mov byte ptr [esi+4] 0 +
call sub_10015C8  +
mov byte ptr [esi+18h] 0 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100497C  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+1Ch] +
mov dword ptr [esi] offset off_100A174 +
call sub_10039B9  +
lea ecx [esi+3Ch] +
mov byte ptr [ebp-4] 1 +
mov byte ptr [esi+38h] 0 +
mov byte ptr [esi+39h] 0 +
call sub_100A103  +
mov dword ptr [esi+0Ch] 2Eh +
mov eax esi +
call sub_1002052  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100497C  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+1Ch] +
mov dword ptr [esi] offset off_100A1D0 +
call sub_10039B9  +
lea ecx [esi+3Ch] +
mov byte ptr [ebp-4] 1 +
mov byte ptr [esi+38h] 0 +
mov byte ptr [esi+39h] 0 +
call sub_100A103  +
mov dword ptr [esi+0Ch] 36h +
mov eax esi +
call sub_1002052  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100497C  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+1Ch] +
mov dword ptr [esi] offset off_100A228 +
call sub_10039B9  +
lea ecx [esi+3Ch] +
mov byte ptr [ebp-4] 1 +
mov byte ptr [esi+38h] 0 +
call sub_100A103  +
mov dword ptr [esi+0Ch] 2Bh +
mov eax esi +
call sub_1002052  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+44h] +
call sub_100256E  +
push 0  +
push 1  +
lea ecx [esi+1Ch] +
call sub_1001B47  +
mov ecx esi +
pop esi  +
jmp sub_10049CD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100A239  +
test byte ptr [ebp+8] 1 +
jz loc_100A279  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push dword ptr [ecx+10h]  +
call sub_10052B4  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jnz loc_100A303  +
jmp loc_100A30B  +
movzx ecx ax +
sub ecx 0Ah +
jz loc_100A2F3  +
sub ecx 3 +
jz loc_100A2EC  +
sub ecx 19h +
jz loc_100A2E5  +
sub ecx 16h +
jz loc_100A2DE  +
dec ecx  +
dec ecx  +
jz loc_100A2D7  +
push eax  +
push dword ptr [edi]  +
call sub_100BBC8  +
jmp loc_100A2FF  +
push offset aGt  +
jmp loc_100A2F8  +
push offset aLt  +
jmp loc_100A2F8  +
push offset aAmp  +
jmp loc_100A2F8  +
push offset aXd  +
jmp loc_100A2F8  +
push offset aXa  +
push dword ptr [edi]  +
call sub_10052B4  +
pop ecx  +
inc esi  +
pop ecx  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_100A2B2  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jnz loc_100A392  +
jmp loc_100A39A  +
movzx ecx ax +
sub ecx 22h +
jz loc_100A382  +
sub ecx 4 +
jz loc_100A37B  +
dec ecx  +
jz loc_100A374  +
sub ecx 15h +
jz loc_100A36D  +
dec ecx  +
dec ecx  +
jz loc_100A366  +
push eax  +
push dword ptr [edi]  +
call sub_100BBC8  +
jmp loc_100A38E  +
push offset aGt  +
jmp loc_100A387  +
push offset aLt  +
jmp loc_100A387  +
push offset aApos  +
jmp loc_100A387  +
push offset aAmp  +
jmp loc_100A387  +
push offset aQuot  +
push dword ptr [edi]  +
call sub_10052B4  +
pop ecx  +
inc esi  +
pop ecx  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_100A343  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov al [ebp+0Ch] +
mov edx [ebp+8] +
mov [ecx] edx +
mov [ecx+4] al +
mov byte ptr [ecx+18h] 0 +
test al al +
jz loc_100A3F8  +
cmp byte_1029000 0 +
jnz loc_100A3EB  +
push offset a?xmlVersion1_0  +
jmp loc_100A3F0  +
push offset a?xmlVersion1_1  +
push edx  +
call sub_10052B4  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
jz loc_100A4C8  +
push offset asc_100A4D0  +
push dword ptr [esi]  +
call sub_10052B4  +
pop ecx  +
pop ecx  +
mov byte ptr [esi+18h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp byte ptr [esi+4] 0 +
jz loc_100A53B  +
push offset dword_100A574  +
push dword ptr [esi]  +
call sub_10052B4  +
push dword ptr [ebp+8]  +
push dword ptr [esi]  +
call sub_10052B4  +
push offset asc_100A56C  +
push dword ptr [esi]  +
call sub_10052B4  +
add esp 18h +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_100A331  +
push offset dword_100A568  +
push dword ptr [esi]  +
call sub_10052B4  +
pop ecx  +
pop ecx  +
jmp loc_100A562  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+8] +
push dword ptr [ebp+8]  +
push offset dword_1001334  +
call sub_1002028  +
lea eax [eax+eax-2] +
push eax  +
push offset aSSS  +
push dword ptr [esi]  +
call sub_100BC27  +
add esp 18h +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp byte ptr [esi+4] 0 +
lea ecx [esi+8] +
jz loc_100A5CB  +
push dword ptr [ebp+8]  +
push offset dword_1001334  +
call sub_1002028  +
add eax eax +
push eax  +
push offset aSS  +
push dword ptr [esi]  +
call sub_100BC27  +
add esp 14h +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_100A2A0  +
push dword ptr [ebp+8]  +
push offset aS_1  +
push dword ptr [esi]  +
call sub_100BC27  +
add esp 0Ch +
jmp loc_100A5EF  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset dword_1001334  +
call sub_1002028  +
lea eax [eax+eax-2] +
push eax  +
push offset aSSS  +
push dword ptr [esi]  +
call sub_100BC27  +
add esp 18h +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+18h] 0 +
jz loc_100A61A  +
pop ebp  +
jmp loc_100A4EE  +
***
pop ebp  +
jmp loc_100A57D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
cmp [edi+14h] esi +
jb loc_100A643  +
mov eax [ebp+arg_8] +
mov eax [eax+14h] +
cmp eax [ebp+arg_C] +
jnb loc_100A648  +
call loc_10124D5  +
mov ecx [edi+14h] +
mov eax ecx +
sub eax esi +
cmp eax [ebp+arg_4] +
jnb loc_100A657  +
mov [ebp+arg_4] eax +
mov eax [ebp+arg_8] +
mov eax [eax+14h] +
sub eax [ebp+arg_C] +
mov ebx [ebp+arg_10] +
cmp eax ebx +
jnb loc_100A669  +
mov ebx eax +
sub ecx [ebp+arg_4] +
or eax 0FFFFFFFFh +
sub eax ebx +
cmp eax ecx +
ja loc_100A67A  +
call loc_1012485  +
mov ecx [edi+14h] +
mov eax ecx +
sub eax [ebp+arg_4] +
mov edx ecx +
sub edx esi +
sub edx [ebp+arg_4] +
add eax ebx +
mov [ebp+arg_0] edx +
mov [ebp+var_4] eax +
cmp ecx eax +
jnb loc_100A6A2  +
push 0  +
push eax  +
mov ecx edi +
call sub_1001BB8  +
mov edx [ebp+arg_0] +
cmp edi [ebp+arg_8] +
jz loc_100A725  +
mov eax [edi+18h] +
cmp eax 8 +
jb loc_100A6B4  +
mov ecx [edi+4] +
jmp loc_100A6B7  +
lea ecx [edi+4] +
mov [ebp+arg_0] ecx +
cmp eax 8 +
jb loc_100A6C4  +
mov ecx [edi+4] +
jmp loc_100A6C7  +
lea ecx [edi+4] +
mov [ebp+arg_10] ecx +
mov ecx [ebp+arg_4] +
push edx  +
mov edx [ebp+arg_0] +
add ecx esi +
sub eax esi +
lea ecx [edx+ecx*2] +
push ecx  +
mov ecx [ebp+arg_10] +
sub eax ebx +
push eax  +
lea eax [esi+ebx] +
lea eax [ecx+eax*2] +
push eax  +
call sub_1004639  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax+18h] 8 +
jb loc_100A6F9  +
mov edx [eax+4] +
jmp loc_100A6FC  +
lea edx [eax+4] +
mov eax [edi+18h] +
cmp eax 8 +
jb loc_100A709  +
mov ecx [edi+4] +
jmp loc_100A70C  +
lea ecx [edi+4] +
push ebx  +
mov ebx [ebp+arg_C] +
lea edx [edx+ebx*2] +
push edx  +
sub eax esi +
push eax  +
lea eax [ecx+esi*2] +
push eax  +
call sub_100477B  +
jmp loc_100A95A  +
mov eax [ebp+arg_4] +
cmp ebx eax +
ja loc_100A7A1  +
mov eax [edi+18h] +
cmp eax 8 +
jb loc_100A739  +
mov ecx [edi+4] +
jmp loc_100A73C  +
lea ecx [edi+4] +
cmp eax 8 +
jb loc_100A746  +
mov edx [edi+4] +
jmp loc_100A749  +
lea edx [edi+4] +
mov [ebp+arg_8] edx +
mov edx [ebp+arg_C] +
push ebx  +
lea ecx [ecx+edx*2] +
sub eax esi +
push ecx  +
push eax  +
mov eax [ebp+arg_8] +
lea eax [eax+esi*2] +
push eax  +
call sub_1004639  +
mov eax [edi+18h] +
cmp eax 8 +
jb loc_100A770  +
mov ecx [edi+4] +
jmp loc_100A773  +
lea ecx [edi+4] +
cmp eax 8 +
jb loc_100A77D  +
mov edx [edi+4] +
jmp loc_100A780  +
lea edx [edi+4] +
push [ebp+arg_0]  +
mov [ebp+arg_C] edx +
mov edx [ebp+arg_4] +
add edx esi +
sub eax esi +
sub eax ebx +
lea ecx [ecx+edx*2] +
push ecx  +
push eax  +
mov eax [ebp+arg_C] +
add esi ebx +
lea eax [eax+esi*2] +
jmp loc_100A954  +
cmp [ebp+arg_C] esi +
ja loc_100A81A  +
mov eax [edi+18h] +
cmp eax 8 +
jb loc_100A7B3  +
mov ecx [edi+4] +
jmp loc_100A7B6  +
lea ecx [edi+4] +
mov [ebp+arg_8] ecx +
cmp eax 8 +
jb loc_100A7C3  +
mov ecx [edi+4] +
jmp loc_100A7C6  +
lea ecx [edi+4] +
mov [ebp+arg_0] ecx +
mov ecx [ebp+arg_4] +
push edx  +
mov edx [ebp+arg_8] +
add ecx esi +
sub eax esi +
lea ecx [edx+ecx*2] +
push ecx  +
mov ecx [ebp+arg_0] +
sub eax ebx +
push eax  +
lea eax [esi+ebx] +
lea eax [ecx+eax*2] +
push eax  +
call sub_1004639  +
mov eax [edi+18h] +
cmp eax 8 +
jb loc_100A7F7  +
mov edx [edi+4] +
jmp loc_100A7FA  +
lea edx [edi+4] +
cmp eax 8 +
jb loc_100A804  +
mov ecx [edi+4] +
jmp loc_100A807  +
lea ecx [edi+4] +
push ebx  +
mov ebx [ebp+arg_C] +
lea edx [edx+ebx*2] +
sub eax esi +
push edx  +
push eax  +
lea eax [ecx+esi*2] +
jmp loc_100A954  +
add eax esi +
cmp eax [ebp+arg_C] +
mov [ebp+arg_10] eax +
mov eax [edi+18h] +
ja loc_100A89D  +
cmp eax 8 +
jb loc_100A831  +
mov ecx [edi+4] +
jmp loc_100A834  +
lea ecx [edi+4] +
cmp eax 8 +
jb loc_100A83E  +
mov edx [edi+4] +
jmp loc_100A841  +
lea edx [edi+4] +
push [ebp+arg_0]  +
mov [ebp+arg_8] edx +
mov edx [ebp+arg_10] +
sub eax esi +
lea ecx [ecx+edx*2] +
push ecx  +
mov ecx [ebp+arg_8] +
sub eax ebx +
push eax  +
lea eax [esi+ebx] +
lea eax [ecx+eax*2] +
push eax  +
call sub_1004639  +
mov eax [edi+18h] +
cmp eax 8 +
jb loc_100A86F  +
mov ecx [edi+4] +
jmp loc_100A872  +
lea ecx [edi+4] +
mov [ebp+arg_8] ecx +
cmp eax 8 +
jb loc_100A87F  +
mov edx [edi+4] +
jmp loc_100A882  +
lea edx [edi+4] +
mov ecx [ebp+arg_C] +
sub ecx [ebp+arg_4] +
push ebx  +
add ecx ebx +
mov ebx [ebp+arg_8] +
lea ecx [ebx+ecx*2] +
sub eax esi +
push ecx  +
push eax  +
lea eax [edx+esi*2] +
jmp loc_100A954  +
cmp eax 8 +
jb loc_100A8A7  +
mov edx [edi+4] +
jmp loc_100A8AA  +
lea edx [edi+4] +
cmp eax 8 +
jb loc_100A8B4  +
mov ecx [edi+4] +
jmp loc_100A8B7  +
lea ecx [edi+4] +
push [ebp+arg_4]  +
mov [ebp+arg_8] ecx +
mov ecx [ebp+arg_C] +
lea ecx [edx+ecx*2] +
sub eax esi +
push ecx  +
push eax  +
mov eax [ebp+arg_8] +
lea eax [eax+esi*2] +
push eax  +
call sub_1004639  +
mov eax [edi+18h] +
cmp eax 8 +
jb loc_100A8E0  +
mov edx [edi+4] +
jmp loc_100A8E3  +
lea edx [edi+4] +
cmp eax 8 +
jb loc_100A8ED  +
mov ecx [edi+4] +
jmp loc_100A8F0  +
lea ecx [edi+4] +
push [ebp+arg_0]  +
mov [ebp+arg_8] ecx +
mov ecx [ebp+arg_4] +
add ecx esi +
add ecx ecx +
mov [ebp+arg_10] ecx +
sub eax esi +
add ecx edx +
push ecx  +
mov ecx [ebp+arg_8] +
sub eax ebx +
push eax  +
lea eax [esi+ebx] +
lea eax [ecx+eax*2] +
push eax  +
call sub_1004639  +
mov eax [edi+18h] +
cmp eax 8 +
jb loc_100A924  +
mov ecx [edi+4] +
jmp loc_100A927  +
lea ecx [edi+4] +
mov [ebp+arg_8] ecx +
cmp eax 8 +
jb loc_100A934  +
mov ecx [edi+4] +
jmp loc_100A937  +
lea ecx [edi+4] +
mov edx ebx +
sub edx [ebp+arg_4] +
sub eax esi +
sub eax [ebp+arg_4] +
push edx  +
mov edx [ebp+arg_C] +
add edx ebx +
mov ebx [ebp+arg_8] +
lea edx [ebx+edx*2] +
push edx  +
push eax  +
mov eax [ebp+arg_10] +
add eax ecx +
push eax  +
call sub_1004639  +
push [ebp+var_4]  +
mov ecx edi +
call sub_1001A79  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
push edi  +
mov esi ecx +
call sub_10031B5  +
test al al +
jz loc_100A9B2  +
cmp dword ptr [esi+18h] 8 +
jb loc_100A994  +
mov eax [esi+4] +
jmp loc_100A997  +
lea eax [esi+4] +
push [ebp+arg_C]  +
sub edi eax +
sar edi 1 +
push edi  +
push esi  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_100A625  +
jmp loc_100AACB  +
mov edi [ebp+arg_0] +
cmp [esi+14h] edi +
jnb loc_100A9BF  +
call loc_10124D5  +
mov eax [esi+14h] +
mov ecx eax +
sub ecx edi +
cmp ecx [ebp+arg_4] +
jnb loc_100A9CE  +
mov [ebp+arg_4] ecx +
sub eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_C] +
or ecx 0FFFFFFFFh +
sub ecx ebx +
cmp ecx eax +
ja loc_100A9E3  +
call loc_1012485  +
mov ecx [esi+14h] +
sub ecx edi +
sub ecx [ebp+arg_4] +
mov [ebp+var_4] ecx +
cmp ebx [ebp+arg_4] +
jnb loc_100AA37  +
mov eax [esi+18h] +
cmp eax 8 +
jb loc_100AA00  +
mov edx [esi+4] +
jmp loc_100AA03  +
lea edx [esi+4] +
mov [ebp+arg_0] edx +
cmp eax 8 +
jb loc_100AA10  +
mov edx [esi+4] +
jmp loc_100AA13  +
lea edx [esi+4] +
push ecx  +
mov ecx [ebp+arg_4] +
mov [ebp+arg_C] edx +
mov edx [ebp+arg_0] +
add ecx edi +
sub eax edi +
lea ecx [edx+ecx*2] +
push ecx  +
mov ecx [ebp+arg_C] +
sub eax ebx +
push eax  +
lea eax [edi+ebx] +
lea eax [ecx+eax*2] +
push eax  +
call sub_1004639  +
test ebx ebx +
ja loc_100AA45  +
cmp [ebp+arg_4] 0 +
jbe loc_100AAC8  +
mov eax [esi+14h] +
sub eax [ebp+arg_4] +
push 0  +
add eax ebx +
push eax  +
mov ecx esi +
mov [ebp+arg_C] eax +
call sub_1001BB8  +
test al al +
jz loc_100AAC8  +
cmp [ebp+arg_4] ebx +
jnb loc_100AA9E  +
mov eax [esi+18h] +
lea ecx [esi+4] +
cmp eax 8 +
jb loc_100AA72  +
mov edx [ecx] +
jmp loc_100AA74  +
mov edx ecx +
cmp eax 8 +
jb loc_100AA7B  +
mov ecx [ecx] +
push [ebp+var_4]  +
mov [ebp+arg_0] ecx +
mov ecx [ebp+arg_4] +
add ecx edi +
sub eax edi +
lea ecx [edx+ecx*2] +
push ecx  +
mov ecx [ebp+arg_0] +
sub eax ebx +
push eax  +
lea eax [edi+ebx] +
lea eax [ecx+eax*2] +
push eax  +
call sub_1004639  +
mov eax [esi+18h] +
cmp eax 8 +
jb loc_100AAAB  +
mov ecx [esi+4] +
jmp loc_100AAAE  +
lea ecx [esi+4] +
push ebx  +
push [ebp+arg_8]  +
sub eax edi +
push eax  +
lea eax [ecx+edi*2] +
push eax  +
call sub_100477B  +
push [ebp+arg_C]  +
mov ecx esi +
call sub_1001A79  +
mov eax esi +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
mov ebx ecx +
cmp [ebp+arg_8] esi +
jnz loc_100AB15  +
lea eax [ebp+arg_8] +
push eax  +
call sub_10015F4  +
push [ebp+arg_0]  +
mov esi [eax] +
push [ebp+arg_4]  +
call sub_1004483  +
pop ecx  +
pop ecx  +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_1004483  +
pop ecx  +
pop ecx  +
push eax  +
mov ecx ebx +
call sub_10019F5  +
jmp loc_100AB4C  +
push edi  +
lea eax [ebp+arg_C] +
push eax  +
call sub_10015F4  +
sub esi [ebp+arg_8] +
mov edi [eax] +
sar esi 1 +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_1004483  +
pop ecx  +
pop ecx  +
push eax  +
push edi  +
push [ebp+arg_0]  +
call sub_1004483  +
pop ecx  +
pop ecx  +
push eax  +
mov ecx ebx +
call sub_100A972  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] esi +
jz loc_100AB7C  +
sub [ebp+arg_8] 1Ch +
mov ecx [ebp+arg_8] +
sub esi 1Ch +
push esi  +
call sub_10055EA  +
cmp esi [ebp+arg_0] +
jnz loc_100AB67  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_1001615  +
mov edi eax +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_10015F4  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
push dword ptr [edi]  +
push dword ptr [eax]  +
call sub_100AAD6  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_100ABDC  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_10055EA  +
add esi 1Ch +
cmp esi [ebp+arg_4] +
jnz loc_100ABCF  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100AB59  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
call sub_1003100  +
mov esi ecx +
xor eax eax +
mov [ebp-18h] eax +
mov [ebp-14h] eax +
mov [ebp-10h] eax +
push dword ptr [ebp+8]  +
mov [ebp-4] eax +
lea eax [ebp-1Ch] +
push eax  +
call sub_1020677  +
push dword ptr [ebp-18h]  +
mov ecx esi +
call sub_100A285  +
lea ecx [ebp-1Ch] +
call sub_10043CC  +
call sub_1002052  +
retn 4  +
***
mov eax offset dword_1022E7C +
call sub_1003100  +
mov esi ecx +
cmp byte ptr [esi+4] 0 +
lea edi [esi+8] +
mov ecx edi +
jz loc_100AD4A  +
push dword ptr [ebp+8]  +
push offset dword_1001334  +
call sub_1002028  +
add eax eax +
push eax  +
push offset aSS_1  +
jmp loc_100AD6C  +
call sub_1002028  +
test eax eax +
jbe loc_100AD76  +
push dword ptr [ebp+8]  +
mov ecx edi +
push offset dword_1001334  +
call sub_1002028  +
lea eax [eax+eax-2] +
push eax  +
push offset aSS_2  +
push dword ptr [esi]  +
call sub_100BC27  +
add esp 14h +
push dword ptr [ebp+8]  +
lea ecx [ebp-28h] +
mov byte ptr [esi+18h] 1 +
call sub_100159C  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_1003406  +
push 0  +
push 1  +
lea ecx [ebp-28h] +
call sub_1001B47  +
call sub_1002052  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_100ADE4  +
mov ecx [ebp+arg_8] +
mov cx [ecx] +
mov [eax] cx +
inc eax  +
inc eax  +
cmp eax [ebp+arg_4] +
jnz loc_100ADD9  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
sar eax 1 +
lea ecx [eax+eax] +
sub esi ecx +
test eax eax +
jle loc_100AE18  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push esi  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
sub esi eax +
test eax eax +
jle loc_100AE45  +
push eax  +
push [ebp+arg_0]  +
push eax  +
push esi  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
sar eax 1 +
lea ecx [eax+eax] +
push esi  +
lea esi [edx+ecx] +
test eax eax +
jle loc_100AE78  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push edx  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100ADF0  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100AE22  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100AE4F  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
push ecx  +
call sub_1003FFD  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
jmp loc_100AF29  +
mov cl [eax] +
mov edx [ebp+arg_C] +
mov [edx] cl +
inc [ebp+arg_C]  +
inc eax  +
cmp eax [ebp+arg_8] +
jnz loc_100AF1E  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
sub edi [ebp+arg_4] +
mov esi ecx +
mov ecx [esi+4] +
sar edi 1 +
test ecx ecx +
jnz loc_100AF5B  +
and [ebp+var_4] ecx +
jmp loc_100AF65  +
mov eax [esi+0Ch] +
sub eax ecx +
sar eax 1 +
mov [ebp+var_4] eax +
test edi edi +
jz loc_100B0CA  +
test ecx ecx +
jnz loc_100AF75  +
xor eax eax +
jmp loc_100AF7C  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push ebx  +
mov edx 7FFFFFFFh +
mov ebx edx +
sub ebx eax +
cmp ebx edi +
jnb loc_100AF8F  +
call loc_1009AFB  +
test ecx ecx +
jnz loc_100AF97  +
xor eax eax +
jmp loc_100AF9E  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
add eax edi +
cmp [ebp+var_4] eax +
jnb loc_100B04F  +
mov eax [ebp+var_4] +
shr eax 1 +
sub edx eax +
cmp edx [ebp+var_4] +
jnb loc_100AFBB  +
and [ebp+var_4] 0 +
jmp loc_100AFBE  +
add [ebp+var_4] eax +
test ecx ecx +
jnz loc_100AFC6  +
xor eax eax +
jmp loc_100AFCD  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
add eax edi +
cmp [ebp+var_4] eax +
jnb loc_100AFE8  +
test ecx ecx +
jnz loc_100AFDC  +
xor eax eax +
jmp loc_100AFE3  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
add eax edi +
mov [ebp+var_4] eax +
push 0  +
push [ebp+var_4]  +
call sub_10047F3  +
push esi  +
mov ebx eax +
mov eax [esi+4] +
push ebx  +
push [ebp+arg_0]  +
push eax  +
call sub_1004EC0  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1004EC0  +
push esi  +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_1004EC0  +
mov eax [esi+4] +
test eax eax +
jnz loc_100B027  +
xor ecx ecx +
jmp loc_100B02E  +
mov ecx [esi+8] +
sub ecx eax +
sar ecx 1 +
add edi ecx +
test eax eax +
jz loc_100B03B  +
push eax  +
call sub_1001B90  +
pop ecx  +
mov eax [ebp+var_4] +
lea eax [ebx+eax*2] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*2] +
mov [esi+8] eax +
mov [esi+4] ebx +
jmp loc_100B0C9  +
mov ebx [esi+8] +
mov eax [ebp+arg_0] +
mov ecx ebx +
sub ecx eax +
sar ecx 1 +
push esi  +
cmp ecx edi +
jnb loc_100B09C  +
add edi edi +
lea ecx [edi+eax] +
push ecx  +
push ebx  +
push eax  +
call sub_1004EC0  +
mov eax [esi+8] +
mov edx [ebp+arg_4] +
mov ecx eax +
sub ecx [ebp+arg_0] +
push esi  +
push eax  +
push [ebp+arg_8]  +
sar ecx 1 +
lea ebx [edx+ecx*2] +
push ebx  +
call sub_1004EC0  +
push [ebp+arg_0]  +
add [esi+8] edi +
push ebx  +
push [ebp+arg_4]  +
call sub_100AEDA  +
add esp 0Ch +
jmp loc_100B0C9  +
lea eax [edi+edi] +
push ebx  +
mov edi ebx +
sub edi eax +
push ebx  +
push edi  +
call sub_1004EC0  +
push ebx  +
push edi  +
push [ebp+arg_0]  +
mov [esi+8] eax +
call sub_100AE82  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100AEDA  +
add esp 18h +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100AF3D  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1009B4C  +
test al al +
jz loc_100B11C  +
push [ebp+arg_4]  +
mov eax [esi+4] +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_1004F17  +
mov [esi+8] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
test eax eax +
jz loc_100B140  +
mov ecx [edi+8] +
sub ecx eax +
sar ecx 1 +
jnz loc_100B144  +
xor esi esi +
jmp loc_100B14B  +
mov esi [ebp+arg_4] +
sub esi eax +
sar esi 1 +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_1002786  +
mov eax [edi+4] +
lea ecx [eax+esi*2] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [esi+4] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1005058  +
push [ebp+arg_4]  +
mov eax [esi+4] +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_100B0D5  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100B0F4  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov edx [esi+4] +
test edx edx +
jnz loc_100B1DF  +
xor ecx ecx +
jmp loc_100B1E6  +
mov ecx [esi+8] +
sub ecx edx +
sar ecx 1 +
test edx edx +
jz loc_100B20A  +
mov eax [esi+0Ch] +
sub eax edx +
sar eax 1 +
cmp ecx eax +
jnb loc_100B20A  +
push [ebp+arg_0]  +
mov eax [esi+8] +
push 1  +
push eax  +
mov ecx esi +
call sub_1004F17  +
mov [esi+8] eax +
jmp loc_100B21C  +
push [ebp+arg_0]  +
mov eax [esi+8] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_100B126  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B170  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+0Ch] +
xor ebx ebx +
push ebx  +
push 80h  +
mov ecx esi +
call sub_1001E91  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_100B266  +
xor eax eax +
jmp loc_100B26D  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
lea edx [ebp+0Ch] +
push edx  +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp+0Ch] eax +
call EvtNextChannelPath  +
test eax eax +
jnz loc_100B2BB  +
push edi  +
mov edi ds:GetLastError +
call edi  +
mov ebx eax +
cmp ebx 7Ah +
jnz loc_100B2BA  +
xor ebx ebx +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_1001E91  +
mov esi [esi+4] +
lea eax [ebp+0Ch] +
push eax  +
push esi  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call EvtNextChannelPath  +
test eax eax +
jnz loc_100B2BA  +
call edi  +
mov ebx eax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
xor edi edi +
push edi  +
push 10h  +
mov ecx esi +
xor ebx ebx +
call sub_10024A5  +
mov ecx [esi+4] +
cmp ecx edi +
jnz loc_100B2EC  +
xor eax eax +
jmp loc_100B2F1  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+arg_8] +
push edx  +
push ecx  +
push eax  +
push edi  +
push [ebp+arg_4]  +
mov [ebp+arg_8] eax +
push [ebp+arg_0]  +
call EvtGetPublisherMetadataProperty  +
test eax eax +
jnz loc_100B359  +
call ds:GetLastError  +
mov ebx eax +
cmp ebx 7Ah +
jnz loc_100B355  +
push edi  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_10024A5  +
mov ecx [esi+4] +
cmp ecx edi +
jnz loc_100B32D  +
xor eax eax +
jmp loc_100B332  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+arg_8] +
push edx  +
push ecx  +
push eax  +
push edi  +
push [ebp+arg_4]  +
mov [ebp+arg_8] eax +
push [ebp+arg_0]  +
xor ebx ebx +
call EvtGetPublisherMetadataProperty  +
test eax eax +
jnz loc_100B359  +
call ds:GetLastError  +
mov ebx eax +
cmp ebx edi +
jnz loc_100B363  +
mov eax [esi+4] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
jmp loc_100B368  +
mov eax [ebp+arg_C] +
mov [eax] edi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+10h] +
push edi  +
xor ebx ebx +
push ebx  +
push 10h  +
mov ecx esi +
call sub_10024A5  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_100B398  +
xor eax eax +
jmp loc_100B39D  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+10h] +
push edx  +
push ecx  +
push eax  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov [ebp+10h] eax +
push dword ptr [ebp+8]  +
xor edi edi +
call EvtGetEventMetadataProperty  +
test eax eax +
jnz loc_100B407  +
call ds:GetLastError  +
mov edi eax +
cmp edi 7Ah +
jnz loc_100B403  +
push ebx  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_10024A5  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_100B3DB  +
xor eax eax +
jmp loc_100B3E0  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+10h] +
push edx  +
push ecx  +
push eax  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov [ebp+10h] eax +
push dword ptr [ebp+8]  +
xor edi edi +
call EvtGetEventMetadataProperty  +
test eax eax +
jnz loc_100B407  +
call ds:GetLastError  +
mov edi eax +
cmp edi ebx +
jnz loc_100B411  +
mov eax [esi+4] +
mov ecx [ebp+14h] +
mov [ecx] eax +
jmp loc_100B416  +
mov eax [ebp+14h] +
mov [eax] ebx +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
xor ebx ebx +
push ebx  +
push 10h  +
mov ecx esi +
call sub_10024A5  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_100B446  +
xor eax eax +
jmp loc_100B44B  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+arg_8] +
push edx  +
push ecx  +
push eax  +
push ebx  +
push [ebp+arg_4]  +
mov [ebp+arg_8] eax +
push [ebp+arg_0]  +
xor edi edi +
call EvtGetChannelConfigProperty  +
test eax eax +
jnz loc_100B4B5  +
call ds:GetLastError  +
mov edi eax +
cmp edi 7Ah +
jnz loc_100B4B1  +
push ebx  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_10024A5  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_100B489  +
xor eax eax +
jmp loc_100B48E  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+arg_8] +
push edx  +
push ecx  +
push eax  +
push ebx  +
push [ebp+arg_4]  +
mov [ebp+arg_8] eax +
push [ebp+arg_0]  +
xor edi edi +
call EvtGetChannelConfigProperty  +
test eax eax +
jnz loc_100B4B5  +
call ds:GetLastError  +
mov edi eax +
cmp edi ebx +
jnz loc_100B4BF  +
mov eax [esi+4] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
jmp loc_100B4C4  +
mov eax [ebp+arg_C] +
mov [eax] ebx +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+14h] +
xor ebx ebx +
push ebx  +
push 10h  +
mov ecx edi +
call sub_10024A5  +
mov ecx [edi+4] +
cmp ecx ebx +
jnz loc_100B4F4  +
xor eax eax +
jmp loc_100B4F9  +
mov eax [edi+8] +
sub eax ecx +
lea edx [ebp+14h] +
push edx  +
push ecx  +
push eax  +
push ebx  +
push dword ptr [ebp+10h]  +
mov [ebp+14h] eax +
push dword ptr [ebp+0Ch]  +
xor esi esi +
push dword ptr [ebp+8]  +
call EvtGetObjectArrayProperty  +
test eax eax +
jnz loc_100B569  +
call ds:GetLastError  +
mov esi eax +
cmp esi 7Ah +
jnz loc_100B565  +
push ebx  +
push dword ptr [ebp+14h]  +
mov ecx edi +
call sub_10024A5  +
mov ecx [edi+4] +
cmp ecx ebx +
jnz loc_100B53A  +
xor eax eax +
jmp loc_100B53F  +
mov eax [edi+8] +
sub eax ecx +
lea edx [ebp+14h] +
push edx  +
push ecx  +
push eax  +
push ebx  +
push dword ptr [ebp+10h]  +
mov [ebp+14h] eax +
push dword ptr [ebp+0Ch]  +
xor esi esi +
push dword ptr [ebp+8]  +
call EvtGetObjectArrayProperty  +
test eax eax +
jnz loc_100B569  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_100B573  +
mov eax [edi+4] +
mov ecx [ebp+18h] +
mov [ecx] eax +
jmp loc_100B578  +
mov eax [ebp+18h] +
mov [eax] ebx +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+10h] +
push edi  +
xor edi edi +
push edi  +
push 10h  +
mov ecx esi +
call sub_10024A5  +
mov ecx [esi+4] +
cmp ecx edi +
jnz loc_100B5A8  +
xor eax eax +
jmp loc_100B5AD  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+10h] +
push edx  +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
mov [ebp+10h] eax +
push dword ptr [ebp+8]  +
call EvtGetLogInfo  +
test eax eax +
jnz loc_100B611  +
mov ebx ds:GetLastError +
call ebx  +
mov edi eax +
cmp edi 7Ah +
jnz loc_100B60D  +
xor edi edi +
push edi  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_10024A5  +
mov ecx [esi+4] +
cmp ecx edi +
jnz loc_100B5EC  +
xor eax eax +
jmp loc_100B5F1  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+10h] +
push edx  +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
mov [ebp+10h] eax +
push dword ptr [ebp+8]  +
call EvtGetLogInfo  +
test eax eax +
jnz loc_100B611  +
call ebx  +
mov edi eax +
test edi edi +
jnz loc_100B61B  +
mov eax [esi+4] +
mov ecx [ebp+14h] +
mov [ecx] eax +
jmp loc_100B621  +
mov eax [ebp+14h] +
and dword ptr [eax] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_18] +
mov ecx [esi+4] +
push edi  +
xor edi edi +
test ecx ecx +
jnz loc_100B647  +
xor eax eax +
jmp loc_100B64C  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+arg_18] +
push edx  +
push ecx  +
shr eax 1 +
push eax  +
push [ebp+arg_14]  +
mov [ebp+arg_18] eax +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EvtFormatMessage  +
test eax eax +
jnz loc_100B6E9  +
mov ebx ds:GetLastError +
call ebx  +
mov edi eax +
cmp edi 7Ah +
jnz loc_100B6E5  +
mov eax [ebp+arg_18] +
xor edi edi +
push edi  +
add eax eax +
push eax  +
mov ecx esi +
call sub_10024A5  +
mov ecx [esi+4] +
cmp ecx edi +
jnz loc_100B69C  +
xor eax eax +
jmp loc_100B6A1  +
mov eax [esi+8] +
sub eax ecx +
lea edx [ebp+arg_18] +
push edx  +
push ecx  +
shr eax 1 +
push eax  +
push [ebp+arg_14]  +
mov [ebp+arg_18] eax +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EvtFormatMessage  +
test eax eax +
jnz loc_100B6E9  +
call ebx  +
mov edi eax +
cmp edi 3AB5h +
jz loc_100B6E3  +
cmp edi 3AB6h +
jz loc_100B6E3  +
cmp edi 3AB7h +
jnz loc_100B6E5  +
xor edi edi +
test edi edi +
jnz loc_100B72D  +
mov eax [ebp+arg_18] +
push 0  +
add eax eax +
push eax  +
mov ecx esi +
call sub_10024A5  +
cmp [ebp+arg_14] 5 +
jnz loc_100B734  +
mov ecx [ebp+arg_18] +
cmp ecx 2 +
jbe loc_100B734  +
mov esi [esi+4] +
lea edx [ecx-2] +
xor eax eax +
test edx edx +
jbe loc_100B734  +
cmp word ptr [esi+eax*2] 0 +
jnz loc_100B723  +
push 2Ch  +
pop ecx  +
mov [esi+eax*2] cx +
mov ecx [ebp+arg_18] +
inc eax  +
lea edx [ecx-2] +
cmp eax edx +
jnb loc_100B734  +
jmp loc_100B712  +
mov ecx esi +
call sub_1005180  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
call sub_1003100  +
push 80h  +
lea ecx [ebp-20h] +
call sub_100B1A7  +
mov edi [ebp-1Ch] +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
test edi edi +
jnz loc_100B76E  +
xor eax eax +
jmp loc_100B775  +
mov eax [ebp-18h] +
sub eax edi +
sar eax 1 +
lea ecx [ebp-10h] +
push ecx  +
push edi  +
push eax  +
call EvtGetExtendedStatus  +
mov esi eax +
cmp esi 7Ah +
jnz loc_100B7B3  +
push 0  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-20h] +
call sub_1001E91  +
mov edi [ebp-1Ch] +
test edi edi +
jnz loc_100B79F  +
xor eax eax +
jmp loc_100B7A6  +
mov eax [ebp-18h] +
sub eax edi +
sar eax 1 +
lea ecx [ebp-10h] +
push ecx  +
push edi  +
push eax  +
call EvtGetExtendedStatus  +
mov esi eax +
mov ecx [ebp+8] +
test esi esi +
jnz loc_100B7BD  +
push edi  +
jmp loc_100B7C2  +
push offset dword_1001334  +
call sub_1001DE7  +
lea ecx [ebp-20h] +
call sub_10043CC  +
mov eax esi +
call sub_1002052  +
retn 4  +
***
mov eax offset dword_1022F2C +
call sub_1003100  +
mov eax [ebp+10h] +
mov ecx [eax+0Ch] +
cmp ecx 0Dh +
ja loc_100B8D1  +
jz loc_100B89C  +
cmp ecx 1 +
jz loc_100B85A  +
cmp ecx 6 +
jbe loc_100B87B  +
cmp ecx 8 +
jbe loc_100B838  +
cmp ecx 0Ah +
ja loc_100B87B  +
cmp dword ptr [ebp+0Ch] 0 +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
jnz loc_100B825  +
push offset aI64u  +
jmp loc_100B828  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_102063B  +
add esp 10h +
jmp loc_100B979  +
cmp dword ptr [ebp+0Ch] 0 +
push dword ptr [eax]  +
jnz loc_100B847  +
push offset aU  +
jmp loc_100B84A  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_102063B  +
add esp 0Ch +
jmp loc_100B979  +
mov ecx [eax] +
test ecx ecx +
jz loc_100B87B  +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100B865  +
sub eax esi +
sar eax 1 +
lea eax [ecx+eax*2+2] +
push eax  +
push ecx  +
jmp loc_100B8C4  +
mov ecx [ebp+8] +
push 0  +
push 0  +
call sub_1001E91  +
mov ecx [ebp+8] +
and dword ptr [ebp+10h] 0 +
lea eax [ebp+10h] +
push eax  +
call sub_100B1CC  +
jmp loc_100B979  +
cmp dword ptr [eax] 0 +
mov edx offset aTrue +
jnz loc_100B8AB  +
mov edx offset aFalse +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B8B0  +
sub eax esi +
sar eax 1 +
lea eax [edx+eax*2+2] +
push eax  +
push edx  +
mov ecx [ebp+8] +
call sub_100B226  +
jmp loc_100B979  +
sub ecx 0Fh +
jz loc_100B91A  +
dec ecx  +
dec ecx  +
jnz loc_100B87B  +
lea ecx [ebp-28h] +
push ecx  +
push eax  +
call ds:FileTimeToSystemTime  +
movzx eax word ptr [ebp-1Ah] +
push eax  +
movzx eax word ptr [ebp-1Ch] +
push eax  +
movzx eax word ptr [ebp-1Eh] +
push eax  +
movzx eax word ptr [ebp-20h] +
push eax  +
movzx eax word ptr [ebp-22h] +
push eax  +
movzx eax word ptr [ebp-26h] +
push eax  +
movzx eax word ptr [ebp-28h] +
push eax  +
push offset a4_4hd2_2hd2__0  +
push dword ptr [ebp+8]  +
call sub_102063B  +
add esp 24h +
jmp loc_100B979  +
and dword ptr [ebp+0Ch] 0 +
lea ecx [ebp+0Ch] +
push ecx  +
push dword ptr [eax]  +
call ds:UuidToStringW  +
test eax eax +
jz loc_100B935  +
push eax  +
call near ptr dword_1008D38+2  +
pop ecx  +
lea eax [ebp+0Ch] +
push eax  +
push ds:RpcStringFreeW  +
lea eax [ebp-18h] +
push eax  +
call sub_1004AE6  +
mov edx [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B954  +
mov ecx [ebp+8] +
sub eax esi +
sar eax 1 +
lea eax [edx+eax*2+2] +
push eax  +
push edx  +
call sub_100B226  +
lea eax [ebp-18h] +
push eax  +
call sub_1003FFD  +
call sub_1002052  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_100BA1B  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100BA0F  +
sub eax edx +
inc eax  +
jmp loc_100BA1E  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_100BA29  +
mov ecx offset aNull +
push 0  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
add eax 4 +
mov [esi] ecx +
push eax  +
lea ecx [esi+4] +
call sub_10033D6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+4] +
mov ecx edi +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100BABB  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1001DE7  +
mov eax [ebp+8] +
mov [esi] eax +
mov eax esi +
call sub_1002052  +
retn 8  +
***
push 44h  +
mov eax offset dword_1022FDC +
call sub_10021E6  +
mov eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-30h] +
call sub_100BA8C  +
and dword ptr [ebp-4] 0 +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_100BB20  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BB20  +
cmp byte ptr [eax+19h] 2 +
jb loc_100BB20  +
push dword ptr [ebp-30h]  +
push offset aWevtutilexcept  +
push offset loc_100BB3C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B9FD  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-50h] +
call sub_100BA65  +
push offset dword_100BB60  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
and eax 0FE3F61F0h +
dec esp  +
fcomp  dword ptr [esi-3Eh] +
int 0AEh  +
sub [ebp-19h] bl +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 2  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+NumberOfBytesWritten]  +
mov [ebp+Buffer] 0FEFFh +
call ds:WriteFile  +
test eax eax +
jnz locret_100BBBF  +
call ds:GetLastError  +
push 0  +
push eax  +
call sub_100BB75  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ax word ptr [ebp+arg_4] +
mov word ptr [ebp+arg_4] ax +
xor eax eax +
mov word ptr [ebp+arg_4+2] ax +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
call sub_10052B4  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
call sub_1003100  +
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1005260  +
add esp 0Ch +
pop ebp  +
retn   +
***
call sub_1003100  +
xor ebx ebx +
push ebx  +
call ds:GetModuleHandleW  +
push 40h  +
lea ecx [ebp-24h] +
mov [ebp-14h] eax +
call sub_100B1A7  +
mov [ebp-4] ebx +
mov edi [ebp-20h] +
mov esi [ebp-1Ch] +
lea eax [ebp+10h] +
mov [ebp-10h] eax +
cmp edi ebx +
jnz loc_100BC7E  +
xor eax eax +
jmp loc_100BC84  +
mov eax esi +
sub eax edi +
sar eax 1 +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
push edi  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-14h]  +
push 800h  +
call ds:FormatMessageW  +
mov [ebp-10h] ebx +
test eax eax +
jnz loc_100BCDE  +
call ds:GetLastError  +
cmp eax ebx +
jz loc_100BCB2  +
cmp eax 7Ah +
jnz loc_100BCE7  +
cmp edi ebx +
jz loc_100BCCD  +
sub esi edi +
sar esi 1 +
mov eax 10000h +
cmp esi eax +
jnb loc_100BCE7  +
cmp esi 8000h +
jnb loc_100BCD2  +
jmp loc_100BCCF  +
xor esi esi +
lea eax [esi+esi] +
push ebx  +
push eax  +
lea ecx [ebp-24h] +
call sub_1001E91  +
jmp loc_100BC6A  +
push edi  +
push dword ptr [ebp+8]  +
call loc_100BACF  +
push offset aErrorMessageCa  +
jmp loc_100BCDF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_4] ebx +
cmp eax ebx +
jz loc_100BDCD  +
cmp [eax] bx +
jz loc_100BDCD  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100BD5A  +
sub eax edx +
sar eax 1 +
cmp eax 201h +
ja loc_100BDCD  +
cmp [ebp+arg_0] ebx +
jnz loc_100BD7B  +
mov [ebp+arg_0] offset dword_1001334 +
mov edi [ebp+arg_8] +
push ebx  +
mov esi 101h +
push esi  +
mov ecx edi +
call sub_1001E91  +
mov eax [ebp+arg_4] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100BD92  +
push 4020Ah  +
sub eax ecx +
mov ecx [edi+4] +
lea edx [ebp+var_4] +
push edx  +
push esi  +
push ecx  +
sar eax 1 +
inc eax  +
push eax  +
push [ebp+arg_4]  +
push ebx  +
push ebx  +
push [ebp+arg_0]  +
call ds:CredUICmdLinePromptForCredentialsW  +
pop edi  +
pop esi  +
cmp eax ebx +
pop ebx  +
jz locret_100BDD6  +
push 13h  +
push eax  +
call sub_100BBF0  +
push 13h  +
push 89Ah  +
jmp loc_100BDC8  +
leave   +
retn 0Ch  +
***
call sub_10053E2  +
xor esi esi +
mov [ebp-20h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
lea eax [ebp+0Ch] +
mov [ebp-14h] eax +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp-24h] +
push eax  +
mov [ebp-4] esi +
push esi  +
mov byte ptr [ebp-4] 1 +
call ds:GetModuleHandleW  +
push eax  +
call sub_10204A3  +
push dword ptr [ebp-20h]  +
push offset aS_0  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
push eax  +
call sub_100BC27  +
add esp 0Ch +
jmp loc_100BE3E  +
mov eax offset loc_100BE3C +
retn   +
***
xor esi esi +
lea ecx [ebp-24h] +
mov [ebp-14h] esi +
call sub_10043CC  +
call sub_1002052  +
retn   +
***
cmp dword ptr [edi+7B362933h] 0EB211D2h +
add al al +
dec edi  +
cwde   +
pusha   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
mov eax [ecx] +
mov ecx [eax] +
push offset loc_100BEA4  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 4  +
***
xchg bh [edi+7B362933h] +
rcl byte ptr [ecx] cl +
mov dl 0Eh +
add al al +
dec edi  +
cwde   +
pusha   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ebp+8] eax +
push offset dword_100BED4  +
lea eax [ebp+8] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
adc eax offset SysFreeString +
retn   +
***
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp [ebp+arg_0] eax +
jz loc_100BF78  +
push eax  +
call ds:SysFreeString  +
cmp [ebp+arg_0] 0 +
jz loc_100BF75  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_100BF78  +
push 8007000Eh  +
call loc_100BEB9  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset VariantClear +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push esi  +
call ds:VariantClear  +
push 8  +
pop eax  +
push [ebp+arg_0]  +
mov [esi] ax +
call ds:SysAllocString  +
mov [esi+8] eax +
test eax eax +
jnz loc_100BFD1  +
cmp [ebp+arg_0] eax +
jz loc_100BFD1  +
push 0Ah  +
pop eax  +
mov [esi] ax +
mov eax 8007000Eh +
push eax  +
mov [esi+8] eax +
call loc_100BEB9  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003100  +
and dword ptr [ebp-10h] 0 +
mov eax [ebp+8] +
mov ecx [eax] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+0F0h]  +
and dword ptr [ebp+8] 0 +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_100C061  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
test eax eax +
jl loc_100C061  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
test eax eax +
jl loc_100C061  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp+0Ch]  +
push offset aSDErrorFailedT  +
push eax  +
call sub_100BC27  +
add esp 1Ch +
push dword ptr [ebp+8]  +
call ds:SysFreeString  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_100C07B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1002052  +
retn 8  +
***
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_100C1FD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1002052  +
retn 8  +
***
call sub_1003100  +
xor ecx ecx +
mov [ebp-10h] ecx +
mov eax [ebp+0Ch] +
mov [ebp-4] ecx +
cmp eax ecx +
jz loc_100C26C  +
cmp [eax] cx +
jz loc_100C26C  +
push eax  +
lea ecx [ebp-10h] +
call sub_100BF40  +
mov esi [ebp-10h] +
push esi  +
call ds:SysStringLen  +
test eax eax +
jnz loc_100C24F  +
push esi  +
call ds:SysFreeString  +
mov eax 8007000Eh +
jmp loc_100C278  +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+94h]  +
push esi  +
mov edi eax +
call ds:SysFreeString  +
mov eax edi +
jmp loc_100C278  +
push ecx  +
call ds:SysFreeString  +
mov eax 80070057h +
call sub_1002052  +
retn 0Ch  +
***
call sub_1003100  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100C20A  +
mov esi eax +
test esi esi +
jnz loc_100C2BB  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-10h] +
call loc_100BE89  +
mov esi eax +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_100C2CC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_1002052  +
retn 0Ch  +
***
call sub_1003100  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100C20A  +
mov esi eax +
mov eax [ebp-10h] +
test esi esi +
jnz loc_100C315  +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+68h]  +
mov esi eax +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_100C323  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_1002052  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
xor eax eax +
mov [esi] ax +
call sub_100BF93  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push dword ptr [ebp+8]  +
mov esi ecx +
push eax  +
call sub_1001F78  +
mov eax [ebp+0Ch] +
cmp eax [esi+0Ch] +
pop esi  +
jnz loc_100C384  +
mov eax [ebp+18h] +
mov byte ptr [eax] 0 +
mov eax [ebp+10h] +
mov edx [ebp+14h] +
jmp loc_100C40F  +
cmp byte ptr [eax+28h] 0 +
push 8  +
pop edx  +
jz loc_100C3EF  +
cmp [eax+44h] edx +
jb loc_100C397  +
mov ecx [eax+30h] +
jmp loc_100C39A  +
lea ecx [eax+30h] +
test ecx ecx +
jz loc_100C3EF  +
cmp [eax+44h] edx +
jb loc_100C3A8  +
mov ecx [eax+30h] +
jmp loc_100C3AB  +
lea ecx [eax+30h] +
cmp word ptr [ecx] 0 +
jz loc_100C3EF  +
mov ecx [ebp+18h] +
mov byte ptr [ecx] 1 +
cmp [eax+44h] edx +
jb loc_100C3C1  +
mov eax [eax+30h] +
jmp loc_100C3C4  +
add eax 30h +
lea ecx [ebp+10h] +
push ecx  +
push offset aI64i  +
push eax  +
call ds:swscanf  +
add esp 0Ch +
cmp eax 1 +
jz loc_100C379  +
push dword ptr [ebp+8]  +
push 23h  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
jmp near ptr loc_100C379+2  +
***
cmp [eax+24h] edx +
jb loc_100C3F9  +
mov eax [eax+10h] +
jmp loc_100C3FC  +
add eax 10h +
push eax  +
push 9  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
xor eax eax +
xor edx edx +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
jmp loc_100C451  +
lea eax [esi+0Ch] +
push eax  +
push [ebp+arg_4]  +
mov ecx edi +
mov ebx esi +
call sub_1001CA5  +
mov byte ptr [ebp+var_8] al +
test al al +
jz loc_100C44E  +
mov esi [esi] +
jmp loc_100C451  +
mov esi [esi+8] +
cmp byte ptr [esi+49h] 0 +
jz loc_100C433  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_100C490  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_100C485  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_10028B2  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
jmp loc_100C4B4  +
lea ecx [ebp+var_4] +
call sub_10035AE  +
mov esi [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [esi+0Ch] +
push eax  +
mov ecx edi +
call sub_1001CA5  +
test al al +
jz loc_100C4AB  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_100C46D  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jbe loc_100C4E2  +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100C4E6  +
inc eax  +
inc eax  +
inc ecx  +
inc ecx  +
dec [ebp+arg_8]  +
jnz loc_100C4D1  +
xor eax eax +
pop ebp  +
retn   +
movzx eax word ptr [eax] +
cmp ax [ecx] +
sbb eax eax +
and eax 0FFFFFFFEh +
inc eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jnb loc_100C510  +
call loc_10124D5  +
mov eax [esi+14h] +
mov ebx [ebp+arg_4] +
sub eax edi +
cmp eax ebx +
jnb loc_100C51E  +
mov ebx eax +
mov eax [ebp+arg_C] +
cmp ebx eax +
jnb loc_100C527  +
mov eax ebx +
cmp dword ptr [esi+18h] 8 +
jb loc_100C532  +
mov esi [esi+4] +
jmp loc_100C535  +
add esi 4 +
push eax  +
push [ebp+arg_8]  +
lea eax [esi+edi*2] +
push eax  +
call sub_100C4C0  +
add esp 0Ch +
test eax eax +
jnz loc_100C55B  +
cmp ebx [ebp+arg_C] +
jnb loc_100C553  +
or eax 0FFFFFFFFh +
jmp loc_100C55B  +
xor eax eax +
cmp ebx [ebp+arg_C] +
setnz al  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+18h] 8 +
mov edx [eax+14h] +
jb loc_100C57D  +
mov eax [eax+4] +
jmp loc_100C580  +
add eax 4 +
push edx  +
push eax  +
push dword ptr [ecx+14h]  +
push 0  +
call sub_100C4F9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_100C567  +
xor ecx ecx +
test eax eax +
setl cl  +
mov al cl +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1029008 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
lea edx [ecx+4] +
mov esi edx +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
lea ebx [eax+4] +
mov edi edx +
mov esi ebx +
movs   +
movs   +
movs   +
movs   +
mov edi ebx +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov edx [ecx+14h] +
mov esi [eax+14h] +
mov [ecx+14h] esi +
mov esi [eax+18h] +
mov [eax+14h] edx +
mov edx [ecx+18h] +
mov [ecx+18h] esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
mov [eax+18h] edx +
pop ebx  +
call sub_1004E68  +
leave   +
retn 4  +
***
call sub_1003100  +
mov ebx [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
lea eax [ebx-1] +
cdq   +
sub eax edx +
mov esi eax +
sar esi 1 +
jmp loc_100C672  +
mov eax [ebp+8] +
mov edi esi +
imul edi edi +
lea ecx [ebp+14h] +
add eax edi +
push ecx  +
push eax  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jz loc_100C677  +
mov eax [ebp+8] +
mov ecx ebx +
imul ecx ecx +
add edi eax +
push edi  +
add ecx eax +
call sub_10055EA  +
lea eax [esi-1] +
cdq   +
sub eax edx +
sar eax 1 +
mov ebx esi +
mov esi eax +
cmp [ebp+10h] ebx +
jl loc_100C63A  +
mov ecx ebx +
imul ecx ecx +
add ecx [ebp+8] +
push 0FFFFFFFFh  +
push 0  +
lea eax [ebp+14h] +
push eax  +
call sub_10024F0  +
push 0  +
push 1  +
lea ecx [ebp+14h] +
call sub_1001B47  +
call sub_1002052  +
retn 28h  +
***
call sub_10021E6  +
mov eax [ebp+0Ch] +
sub eax [ebp+8] +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi eax +
mov eax [ebp+10h] +
sub eax [ebp+8] +
mov [ebp-38h] esi +
cdq   +
idiv  ecx +
mov ecx esi +
mov edi eax +
mov [ebp-30h] edi +
test esi esi +
jz loc_100C6E5  +
mov eax [ebp-30h] +
cdq   +
idiv  ecx +
mov [ebp-30h] ecx +
mov ecx edx +
test edx edx +
jnz loc_100C6D6  +
mov ebx [ebp-30h] +
cmp ebx edi +
jge loc_100C79D  +
test ebx ebx +
jle loc_100C79D  +
imul esi esi +
imul ebx ebx +
mov [ebp-3Ch] esi +
jmp loc_100C706  +
mov esi [ebp-3Ch] +
mov eax [ebp+8] +
lea edi [ebx+eax] +
push edi  +
lea ecx [ebp-2Ch] +
mov [ebp-34h] edi +
call sub_10033D6  +
and dword ptr [ebp-4] 0 +
lea eax [esi+edi] +
cmp eax [ebp+10h] +
jnz loc_100C729  +
lea eax [ebp+8] +
jmp loc_100C768  +
mov [ebp-48h] eax +
lea eax [ebp-48h] +
jmp loc_100C768  +
push esi  +
call sub_10055EA  +
mov eax [ebp+10h] +
sub eax esi +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
mov [ebp-34h] esi +
cmp [ebp-38h] eax +
jge loc_100C757  +
mov eax [ebp-3Ch] +
add eax esi +
mov [ebp-40h] eax +
lea eax [ebp-40h] +
jmp loc_100C768  +
mov ecx [ebp-38h] +
sub ecx eax +
imul ecx ecx +
add ecx [ebp+8] +
lea eax [ebp-44h] +
mov [ebp-44h] ecx +
mov esi [eax] +
mov ecx [ebp-34h] +
cmp esi edi +
jnz loc_100C731  +
push 0FFFFFFFFh  +
xor esi esi +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
call sub_10024F0  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push esi  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
dec dword ptr [ebp-30h]  +
sub ebx 1Ch +
cmp [ebp-30h] esi +
jg loc_100C703  +
call sub_1002043  +
retn 14h  +
***
call sub_1003100  +
mov edi [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov ebx [ebp+10h] +
mov [ebp+0Ch] edi +
lea esi [edi+edi+2] +
jmp loc_100C800  +
mov ecx [ebp+8] +
mov eax esi +
imul eax eax +
add eax ecx +
lea ecx [eax-1Ch] +
push ecx  +
push eax  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jz loc_100C7E4  +
dec esi  +
mov eax esi +
imul eax eax +
add eax [ebp+8] +
mov ecx edi +
imul ecx ecx +
add ecx [ebp+8] +
push eax  +
call sub_10055EA  +
mov edi esi +
lea esi [esi+esi+2] +
cmp esi ebx +
jl loc_100C7C9  +
jnz loc_100C822  +
mov eax [ebp+8] +
mov ecx ebx +
imul ecx ecx +
lea ecx [ecx+eax-1Ch] +
push ecx  +
mov ecx edi +
imul ecx ecx +
add ecx eax +
call sub_10055EA  +
lea edi [ebx-1] +
sub esp 1Ch +
lea eax [ebp+14h] +
mov ecx esp +
mov [ebp+10h] esp +
push eax  +
call sub_10033D6  +
push dword ptr [ebp+0Ch]  +
push edi  +
push dword ptr [ebp+8]  +
call sub_100C61B  +
push 0  +
push 1  +
lea ecx [ebp+14h] +
call sub_1001B47  +
call sub_1002052  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100C6A5  +
pop ebp  +
retn 10h  +
***
call sub_1003100  +
push dword ptr [ebp+8]  +
mov ecx [ebp+10h] +
and dword ptr [ebp-4] 0 +
call sub_10055EA  +
sub esp 1Ch +
lea eax [ebp+14h] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_10033D6  +
mov eax [ebp+0Ch] +
sub eax [ebp+8] +
push 1Ch  +
pop ecx  +
cdq   +
idiv  ecx +
push eax  +
push 0  +
push dword ptr [ebp+8]  +
call sub_100C7AA  +
push 0  +
push 1  +
lea ecx [ebp+14h] +
call sub_1001B47  +
call sub_1002052  +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
cdq   +
push 1Ch  +
pop ecx  +
idiv  ecx +
mov ebx eax +
cdq   +
sub eax edx +
mov esi eax +
sar esi 1 +
test esi esi +
jle loc_100C920  +
mov edi esi +
imul edi edi +
mov eax [ebp+arg_0] +
sub esp 1Ch +
sub edi 1Ch +
add eax edi +
mov ecx esp +
mov [ebp+var_4] esp +
push eax  +
dec esi  +
call sub_10033D6  +
push ebx  +
push esi  +
push [ebp+arg_0]  +
call sub_100C7AA  +
test esi esi +
jg loc_100C8FB  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp [ebp+arg_0] eax +
jz loc_100C94D  +
cmp eax [ebp+arg_8] +
jz loc_100C94D  +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_0]  +
call sub_100C858  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jz loc_100C977  +
push [ebp+arg_0]  +
mov ecx [ebp+arg_4] +
call sub_100C5B5  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jz loc_100C993  +
push [ebp+arg_4]  +
mov ecx [ebp+arg_8] +
call sub_100C5B5  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jz loc_100C9AF  +
push [ebp+arg_0]  +
mov ecx [ebp+arg_4] +
call sub_100C5B5  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
push 0  +
sub esp 1Ch +
add eax 0FFFFFFE4h +
mov ecx esp +
mov [ebp+var_4] esp +
push eax  +
call sub_10033D6  +
mov eax [ebp+arg_4] +
add eax 0FFFFFFE4h +
push eax  +
push eax  +
push [ebp+arg_0]  +
call sub_100C878  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
cmp eax 1 +
jle loc_100CA12  +
push 0  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100C8D4  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_100CA8B  +
push esi  +
lea esi [eax+1Ch] +
cmp esi [ebp+arg_4] +
jz loc_100CA8A  +
push ebx  +
push edi  +
jmp loc_100CA38  +
mov eax [ebp+arg_0] +
push eax  +
push esi  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jz loc_100CA4F  +
lea eax [esi+1Ch] +
push eax  +
push esi  +
push [ebp+arg_0]  +
jmp loc_100CA7B  +
lea edi [esi-1Ch] +
push edi  +
push esi  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jz loc_100CA80  +
mov ebx edi +
sub edi 1Ch +
push edi  +
push esi  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_100CA5F  +
cmp ebx esi +
jz loc_100CA80  +
lea eax [esi+1Ch] +
push eax  +
push esi  +
push ebx  +
call sub_100C92C  +
add esi 1Ch +
cmp esi [ebp+arg_4] +
jnz loc_100CA35  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push esi  +
sub eax ecx +
push 1Ch  +
cdq   +
pop esi  +
idiv  esi +
cmp eax 28h +
jle loc_100CB0D  +
inc eax  +
cdq   +
and edx 7 +
add eax edx +
push edi  +
sar eax 3 +
mov edi eax +
mov esi eax +
imul edi edi +
imul esi esi +
lea edx [edi+ecx] +
push edx  +
lea eax [esi+ecx] +
push eax  +
push ecx  +
call sub_100C956  +
mov ecx [ebp+arg_4] +
lea edx [esi+ecx] +
push edx  +
mov eax ecx +
sub eax esi +
push ecx  +
push eax  +
call sub_100C956  +
mov eax [ebp+arg_8] +
push [ebp+arg_8]  +
mov ecx [ebp+arg_8] +
sub eax esi +
sub ecx edi +
push eax  +
push ecx  +
call sub_100C956  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
sub eax esi +
push eax  +
push [ebp+arg_4]  +
add ecx esi +
push ecx  +
call sub_100C956  +
pop edi  +
jmp loc_100CB19  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
call sub_100C956  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
cmp eax 1 +
jle loc_100CB46  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100C9B8  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
push 1Ch  +
mov eax ecx +
sub eax [ebp+arg_4] +
pop edi  +
cdq   +
mov esi edi +
idiv  esi +
cdq   +
sub eax edx +
mov esi eax +
sar esi 1 +
imul esi esi +
add esi [ebp+arg_4] +
lea eax [ecx-1Ch] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call sub_100CA94  +
lea ebx [esi+1Ch] +
jmp loc_100CBAE  +
lea eax [esi-1Ch] +
push esi  +
push eax  +
mov [ebp+var_C] eax +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_100CBD1  +
push [ebp+var_C]  +
push esi  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_100CBD1  +
mov esi [ebp+var_C] +
cmp [ebp+arg_4] esi +
jnb loc_100CBD1  +
jmp loc_100CB89  +
push esi  +
push ebx  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_100CBD6  +
push ebx  +
push esi  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_100CBD6  +
add ebx edi +
cmp ebx [ebp+arg_8] +
jb loc_100CBB5  +
mov [ebp+var_4] ebx +
mov [ebp+var_8] esi +
mov eax [ebp+arg_8] +
cmp [ebp+var_4] eax +
jnb loc_100CC19  +
push [ebp+var_4]  +
push esi  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_100CC0E  +
push esi  +
push [ebp+var_4]  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_100CC19  +
push [ebp+var_4]  +
mov ecx ebx +
add ebx edi +
call sub_100C5B5  +
add [ebp+var_4] edi +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_8] +
jb loc_100CBE4  +
mov eax [ebp+var_8] +
cmp [ebp+arg_4] eax +
jnb loc_100CC5F  +
add eax 0FFFFFFE4h +
mov [ebp+var_C] eax +
push esi  +
push [ebp+var_C]  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_100CC51  +
push [ebp+var_C]  +
push esi  +
call sub_100C595  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_100CC5F  +
push [ebp+var_C]  +
sub esi edi +
mov ecx esi +
call sub_100C5B5  +
mov eax [ebp+arg_4] +
sub [ebp+var_8] edi +
sub [ebp+var_C] edi +
cmp eax [ebp+var_8] +
jb loc_100CC27  +
mov eax [ebp+var_8] +
cmp eax [ebp+arg_4] +
jnz loc_100CC89  +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_8] +
jz loc_100CCBD  +
cmp ebx eax +
jz loc_100CC7B  +
push ebx  +
mov ecx esi +
call sub_100C5B5  +
mov eax [ebp+var_4] +
add [ebp+var_4] edi +
add ebx edi +
mov ecx esi +
add esi edi +
jmp loc_100CCB2  +
mov edx [ebp+var_4] +
sub eax edi +
mov [ebp+var_8] eax +
cmp edx [ebp+arg_8] +
jnz loc_100CCAB  +
sub esi edi +
cmp eax esi +
jz loc_100CCA4  +
push esi  +
mov ecx eax +
call sub_100C5B5  +
sub ebx edi +
push ebx  +
mov ecx esi +
jmp loc_100CCB3  +
mov ecx edx +
add edx edi +
mov [ebp+var_4] edx +
push eax  +
call sub_100C5B5  +
jmp loc_100CBDC  +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] esi +
pop esi  +
mov [eax+4] ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
jmp loc_100CCE7  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100CB23  +
sub [ebp+arg_4] 1Ch +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
cmp eax 1 +
jg loc_100CCD8  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
cmp eax 20h +
jle loc_100CDB8  +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jle loc_100CD99  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push [ebp+arg_0]  +
push eax  +
call sub_100CB4F  +
mov eax esi +
cdq   +
sub eax edx +
sar eax 1 +
mov esi eax +
cdq   +
sub eax edx +
sar eax 1 +
add esi eax +
mov eax [ebp+arg_4] +
sub eax [ebp+var_4] +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
push 1Ch  +
pop ebx  +
push esi  +
mov ecx eax +
mov eax [ebp+var_8] +
sub eax [ebp+arg_0] +
cdq   +
idiv  ebx +
cmp eax ecx +
jge loc_100CD77  +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call sub_100CD01  +
mov eax [ebp+var_4] +
mov [ebp+arg_0] eax +
jmp loc_100CD88  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
call sub_100CD01  +
mov eax [ebp+var_8] +
mov [ebp+arg_4] eax +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
cmp eax 20h +
jg loc_100CD22  +
cmp eax 20h +
pop esi  +
pop ebx  +
jle loc_100CDB8  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100C9ED  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100CCD1  +
jmp locret_100CDC8  +
cmp eax 1 +
jle locret_100CDC8  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100CA1B  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub eax [ebp+8] +
push 1Ch  +
pop ecx  +
cdq   +
idiv  ecx +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100CD01  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
push 2  +
push 2  +
call sub_1001FF5  +
mov ecx [esi+8] +
push offset off_1029588  +
call sub_1002223  +
mov ecx [esi+8] +
push 1  +
call sub_10031F1  +
push eax  +
lea ecx [esi+1Ch] +
call sub_1001DE7  +
mov ecx [esi+8] +
lea eax [ebp-1] +
push eax  +
push 0  +
push offset off_1029570  +
push offset dword_10013F8  +
push offset aFormat  +
call sub_1001688  +
test eax eax +
setnz al  +
mov [esi+38h] al +
pop esi  +
leave   +
retn   +
***
call sub_1003100  +
mov edi ecx +
xor esi esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+10h]  +
mov [ebp-4] esi +
push dword ptr [ebp+0Ch]  +
mov [ebp-10h] esi +
call sub_100B424  +
mov ebx [ebp+8] +
cmp eax esi +
jz loc_100D07B  +
push ebx  +
push 4  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov eax [ebp-10h] +
mov ecx [eax+0Ch] +
cmp ecx esi +
jz loc_100D10D  +
cmp ecx 8 +
jz loc_100D0A0  +
push ebx  +
push 4  +
push 0Dh  +
call sub_100BC45  +
jmp $+2  +
mov eax [ebp-10h] +
add esp 0Ch +
mov ecx [ebp+10h] +
dec ecx  +
jz loc_100D0D4  +
dec ecx  +
jnz loc_100D10D  +
mov eax [eax] +
sub eax esi +
jz loc_100D0CD  +
dec eax  +
jz loc_100D0C6  +
dec eax  +
jz loc_100D0BF  +
dec eax  +
jnz loc_100D0E0  +
push offset aDebug  +
jmp loc_100D104  +
push offset aAnalytic  +
jmp loc_100D104  +
push offset aOperational  +
jmp loc_100D104  +
push offset aAdmin  +
jmp loc_100D104  +
mov eax [eax] +
sub eax esi +
jz loc_100D0FF  +
dec eax  +
jz loc_100D0F8  +
dec eax  +
jz loc_100D0F1  +
push ebx  +
push 4  +
push 0Dh  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
jmp loc_100D10D  +
push offset aCustom  +
jmp loc_100D104  +
push offset aSystem  +
jmp loc_100D104  +
push offset aApplication  +
push ebx  +
lea ecx [edi+3Ch] +
call near ptr byte_100A608+1  +
lea ecx [ebp-20h] +
call sub_10043CC  +
call sub_1002052  +
retn 0Ch  +
***
push 20h  +
mov eax offset byte_102363D +
call sub_1003100  +
mov esi ecx +
cmp dword ptr [esi+34h] 8 +
jb loc_100D13B  +
mov eax [esi+20h] +
jmp loc_100D13E  +
lea eax [esi+20h] +
xor ebx ebx +
push ebx  +
push eax  +
push dword ptr [esi+18h]  +
call EvtOpenChannelConfig  +
mov [ebp-10h] eax +
cmp eax ebx +
jnz loc_100D173  +
cmp dword ptr [esi+34h] 8 +
jb loc_100D15C  +
mov eax [esi+20h] +
jmp loc_100D15F  +
lea eax [esi+20h] +
push eax  +
push 1Dh  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push dword ptr [ebp-10h]  +
lea eax [ebp-1Ch] +
push offset EvtClose  +
push eax  +
call sub_1004AE6  +
mov [ebp-4] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
movzx eax byte ptr [esi+38h] +
push eax  +
push dword ptr [esi+10h]  +
lea edi [esi+3Ch] +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call near ptr dword_100A3C0+3  +
push offset aChannel  +
mov ecx edi +
call near ptr dword_100AD18+2  +
cmp dword ptr [esi+34h] 8 +
jb loc_100D1BD  +
mov eax [esi+20h] +
jmp loc_100D1C0  +
lea eax [esi+20h] +
push eax  +
push offset aName  +
mov ecx edi +
call near ptr byte_100A608+1  +
push ebx  +
push 0Dh  +
push ebx  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aEnabled_0  +
call near ptr dword_100CF74+2  +
push 2  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aType_0  +
call sub_100D034  +
push ebx  +
push 1  +
push 3  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aOwningpublis_0  +
call near ptr dword_100CF74+2  +
push 1  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aIsolation_0  +
call sub_100D034  +
push ebx  +
push 1  +
push 5  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aChannelacces_0  +
call near ptr dword_100CF74+2  +
cmp [esi+40h] bl +
jz loc_100D240  +
push offset aHttpSchemas_mi  +
push offset aXmlns  +
mov ecx edi +
call near ptr byte_100A608+1  +
mov ecx edi +
call near ptr dword_100A4AC+3  +
push offset aLogging  +
mov ecx edi +
call near ptr dword_100AD18+2  +
mov ecx edi +
call near ptr dword_100A4AC+3  +
push ebx  +
push 1  +
push 9  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aLogfilename  +
call near ptr dword_100CF74+2  +
push ebx  +
push 0Dh  +
push 6  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aRetention_0  +
call near ptr dword_100CF74+2  +
push ebx  +
push 0Dh  +
push 7  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aAutobackup_0  +
call near ptr dword_100CF74+2  +
push ebx  +
push 0Ah  +
push 8  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aMaxsize_0  +
call near ptr dword_100CF74+2  +
mov ecx edi +
call near ptr byte_100AC3C  +
push offset aPublishing  +
mov ecx edi +
call near ptr dword_100AD18+2  +
mov ecx edi +
call near ptr dword_100A4AC+3  +
push ebx  +
push 8  +
push 14h  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aFilemax_0  +
call near ptr dword_100CF74+2  +
push ebx  +
push 8  +
push 0Ah  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aLevel_1  +
call near ptr dword_100CF74+2  +
push offset a0xI64x  +
push 0Ah  +
push 0Bh  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aKeywords_0  +
call near ptr dword_100CF74+2  +
push ebx  +
push 0Fh  +
push 0Ch  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aControlguid_0  +
call near ptr dword_100CF74+2  +
mov ecx edi +
call near ptr byte_100AC3C  +
mov ecx edi +
call near ptr byte_100AC3C  +
mov ecx edi +
call near ptr dword_100A4D8+5  +
lea ecx [ebp-2Ch] +
call sub_10043CC  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1003FFD  +
call sub_1002052  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
xor ebx ebx +
mov [ebp+var_4] ebx +
cmp edi 1 +
jnz loc_100D3C3  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx] ax +
mov [ebp+var_4] 8007007Ah +
jmp loc_100D407  +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_100D3EF  +
push ds:_iob  +
call fgetwc  +
movzx eax ax +
pop ecx  +
mov ecx 0FFFFh +
cmp ax cx +
jz loc_100D3F6  +
cmp ax 0Ah +
jz loc_100D401  +
mov [esi] ax +
inc esi  +
inc esi  +
dec edi  +
inc ebx  +
cmp edi 1 +
jbe loc_100D401  +
jmp loc_100D3C9  +
test ebx ebx +
jnz loc_100D401  +
mov [ebp+var_4] 80070026h +
xor eax eax +
mov [esi] ax +
pop esi  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100D410  +
mov [eax] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100C2DB  +
cmp eax 1 +
jnz loc_100D43A  +
xor al al +
jmp loc_100D450  +
test eax eax +
jge loc_100D44E  +
push dword ptr [ebp+0Ch]  +
push 21h  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov al 1 +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+0Ch] eax +
jz loc_100D46E  +
cmp dword ptr [ebp+0Ch] 7FFFFFFFh +
jbe loc_100D473  +
mov eax 80070057h +
test eax eax +
jl loc_100D484  +
push 0  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100D39D  +
pop ebp  +
retn 8  +
***
adc eax offset SysStringLen +
test eax eax +
jbe loc_100D516  +
lea eax [ebp-24h] +
push eax  +
push offset aI  +
push dword ptr [ebp-14h]  +
call ds:swscanf  +
add esp 0Ch +
cmp eax 1 +
jz loc_100D51E  +
push dword ptr [ebp+8]  +
push 23h  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
jmp loc_100D51E  +
mov [ebp-24h] ebx +
jmp loc_100D51E  +
mov [ebp-24h] eax +
lea eax [ebp-24h] +
push eax  +
push ebx  +
push dword ptr [ebp+20h]  +
mov dword ptr [ebp-18h] 8 +
push dword ptr [ebp+0Ch]  +
call EvtSetChannelConfigProperty  +
test eax eax +
jnz loc_100D54F  +
push dword ptr [ebp+8]  +
push 5  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
call sub_1002052  +
retn 1Ch  +
***
call ds:SysStringLen  +
test eax eax +
jbe loc_100D5EF  +
lea eax [ebp-24h] +
push eax  +
push offset aI64i  +
push dword ptr [ebp-14h]  +
call ds:swscanf  +
add esp 0Ch +
cmp eax 1 +
jz loc_100D5FD  +
push dword ptr [ebp+8]  +
push 23h  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
jmp loc_100D5FD  +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
jmp loc_100D5FD  +
mov [ebp-24h] eax +
mov [ebp-20h] edx +
lea eax [ebp-24h] +
push eax  +
push ebx  +
push dword ptr [ebp+20h]  +
mov dword ptr [ebp-18h] 0Ah +
push dword ptr [ebp+0Ch]  +
call EvtSetChannelConfigProperty  +
test eax eax +
jnz loc_100D62E  +
push dword ptr [ebp+8]  +
push 5  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
call sub_1002052  +
retn 1Ch  +
***
lea ecx [ebp-20h] +
mov [ebp-48h] ecx +
cmp eax ebx +
jz loc_100D6DA  +
push dword ptr [ebp-2Ch]  +
push 5  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
lea eax [ebp-48h] +
push eax  +
push ebx  +
push dword ptr [ebp+20h]  +
mov dword ptr [ebp-3Ch] 0Fh +
push dword ptr [ebp-34h]  +
call EvtSetChannelConfigProperty  +
test eax eax +
jnz loc_100D70B  +
push dword ptr [ebp-2Ch]  +
push 5  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push dword ptr [ebp-28h]  +
call ds:SysFreeString  +
call sub_1002043  +
retn 1Ch  +
***
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
call sub_1002052  +
retn 1Ch  +
***
push offset aApplication  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100D83F  +
mov [ebp-24h] ebx +
jmp loc_100D87C  +
push offset aSystem  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100D856  +
mov dword ptr [ebp-24h] 1 +
jmp loc_100D87C  +
push offset aCustom  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100D86D  +
mov dword ptr [ebp-24h] 2 +
jmp loc_100D87C  +
push edi  +
push 27h  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
lea eax [ebp-24h] +
push eax  +
push ebx  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+0Ch]  +
call EvtSetChannelConfigProperty  +
test eax eax +
jnz loc_100D8A6  +
push dword ptr [ebp+8]  +
push 5  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
call sub_1002052  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
cmp byte ptr [eax] 0 +
jnz loc_100D8CC  +
call dword ptr [eax+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov ecx [esi+8] +
push offset off_1029598  +
call sub_1002223  +
mov ecx [esi+8] +
mov ebx offset dword_1008070 +
push ebx  +
mov edi offset aConfig +
push edi  +
call sub_10040C8  +
mov ecx [esi+8] +
test al al +
jz loc_100D937  +
push 1  +
push 1  +
call sub_1001FF5  +
mov ecx [esi+8] +
lea eax [ebp-1] +
push eax  +
push offset dword_1001334  +
push ebx  +
push edi  +
call sub_1003D75  +
lea ecx [esi+38h] +
jmp loc_100D94D  +
push 2  +
push 2  +
call sub_1001FF5  +
mov ecx [esi+8] +
push 1  +
call sub_10031F1  +
lea ecx [esi+1Ch] +
push eax  +
call sub_1001DE7  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov cx [eax] +
cmp cx [edx] +
jnz loc_100DA15  +
cmp cx di +
jz loc_100DA11  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_100DA15  +
add eax 4 +
add edx 4 +
cmp cx di +
jnz loc_100D9EF  +
xor eax eax +
jmp loc_100DA1A  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jz loc_100DA2E  +
push 25h  +
push 80070057h  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
mov eax [esi] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
call dword ptr [ecx+9Ch]  +
mov esi eax +
cmp esi edi +
jge loc_100DA4F  +
push 2  +
push esi  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
cmp esi 1 +
jz loc_100DA98  +
push dword ptr [ebp+8]  +
call ds:SysStringLen  +
test eax eax +
jz loc_100DA98  +
mov eax [ebp+8] +
mov ecx offset aHttpSchemas_mi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100DA8F  +
cmp dx di +
jz loc_100DA8B  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100DA8F  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_100DA69  +
xor eax eax +
jmp loc_100DA94  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jz loc_100DAA8  +
push 25h  +
push 80070057h  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
push dword ptr [ebp+8]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-10h]  +
call esi  +
lea ecx [ebp-24h] +
call sub_10043CC  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jz loc_100DAD1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1002052  +
retn 8  +
***
fmul  qword ptr [ebx+124035h] +
add edi edi +
setalc   +
test eax eax +
jbe loc_100DBA2  +
push offset aTrue  +
push dword ptr [ebp-24h]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100DB99  +
push offset dword_1008160  +
push dword ptr [ebp-24h]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100DBA2  +
mov dword ptr [ebp-58h] 1 +
jmp loc_100DBED  +
push dword ptr [ebp-24h]  +
call esi  +
test eax eax +
jbe loc_100DBD0  +
push offset aFalse  +
push dword ptr [ebp-24h]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100DBCB  +
push offset dword_100815C  +
push dword ptr [ebp-24h]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100DBD0  +
mov [ebp-58h] ebx +
jmp loc_100DBED  +
push dword ptr [ebp-28h]  +
push 23h  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
jmp loc_100DBED  +
xor ecx ecx +
cmp al bl +
setnz cl  +
mov [ebp-58h] ecx +
mov dword ptr [ebp-4Ch] 0Dh +
cmp [ebp+20h] ebx +
jnz loc_100DCD8  +
cmp dword ptr [ebp-58h] 1 +
jnz loc_100DCD8  +
mov eax [ebp-34h] +
mov ecx [eax+8] +
lea eax [ebp-1Dh] +
push eax  +
push ebx  +
push offset aQ_0  +
push offset aQuiet  +
call sub_1002709  +
test al al +
jnz loc_100DCD8  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-68h] +
push eax  +
push 2  +
push dword ptr [ebp-2Ch]  +
call sub_100B424  +
cmp eax ebx +
jz loc_100DC4F  +
push dword ptr [ebp-28h]  +
push 4  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov eax [ebp-30h] +
mov eax [eax] +
cmp eax 2 +
jz loc_100DC5E  +
cmp eax 3 +
jnz loc_100DCD8  +
push 44h  +
lea eax [ebp-48h] +
push eax  +
call sub_1020677  +
push dword ptr [ebp-44h]  +
push offset aS_0  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
push eax  +
call sub_100BC27  +
mov eax ds:_iob +
mov esi ds:fflush +
add eax 20h +
push eax  +
call esi  +
push ds:_iob  +
call esi  +
add esp 14h +
push 5  +
lea eax [ebp-1Ch] +
push eax  +
call near ptr byte_100D458+1  +
lea eax [ebp-1Ch] +
push offset aYes  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100DCD8  +
lea eax [ebp-1Ch] +
push offset aY  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100DCD8  +
push dword ptr [ebp-28h]  +
push 5  +
push ebx  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
lea eax [ebp-58h] +
push eax  +
push ebx  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp-2Ch]  +
call EvtSetChannelConfigProperty  +
test eax eax +
jnz loc_100DD02  +
push dword ptr [ebp-28h]  +
push 5  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
lea ecx [ebp-48h] +
call sub_10043CC  +
lea ecx [ebp-68h] +
call sub_10043CC  +
push dword ptr [ebp-24h]  +
call ds:SysFreeString  +
call sub_1002043  +
retn 1Ch  +
***
call ds:SysFreeString  +
call sub_1002052  +
retn 8  +
***
push 3Ch  +
mov eax offset byte_1023889 +
call sub_10021E6  +
xor ebx ebx +
push ebx  +
mov esi ecx +
call ds:CoInitialize  +
cmp eax ebx +
jge loc_100E0B6  +
push 3  +
push eax  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
push ds:CoUninitialize  +
lea eax [ebp-3Ch] +
push eax  +
call sub_1005604  +
mov [ebp-4] ebx +
mov [ebp-30h] ebx +
mov ecx [esi+8] +
push offset dword_1008070  +
push offset aConfig  +
mov byte ptr [ebp-4] 1 +
call sub_10040C8  +
test al al +
jz loc_100E15C  +
cmp dword ptr [esi+50h] 8 +
jb loc_100E0F0  +
mov eax [esi+3Ch] +
jmp loc_100E0F3  +
lea eax [esi+3Ch] +
lea ecx [ebp-30h] +
push ecx  +
push eax  +
mov ecx esi +
call near ptr dword_100D958+5  +
mov [ebp-34h] ebx +
lea eax [ebp-34h] +
push eax  +
mov edi offset a@name +
push edi  +
push dword ptr [ebp-30h]  +
mov byte ptr [ebp-4] 2 +
call sub_100C2DB  +
mov ebx eax +
test ebx ebx +
jnz loc_100E12D  +
push dword ptr [ebp-34h]  +
call ds:SysStringLen  +
test eax eax +
jnz loc_100E142  +
test ebx ebx +
jl loc_100E134  +
mov ebx 80070057h +
push edi  +
push 21h  +
push ebx  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push dword ptr [ebp-34h]  +
lea ecx [esi+1Ch] +
call sub_1001DE7  +
push dword ptr [ebp-34h]  +
mov byte ptr [ebp-4] 1 +
call ds:SysFreeString  +
xor ebx ebx +
cmp dword ptr [esi+34h] 8 +
jb loc_100E167  +
mov eax [esi+20h] +
jmp loc_100E16A  +
lea eax [esi+20h] +
push ebx  +
push eax  +
push dword ptr [esi+18h]  +
call EvtOpenChannelConfig  +
mov edi eax +
cmp edi ebx +
mov ebx ds:GetLastError +
jnz loc_100E19E  +
cmp dword ptr [esi+34h] 8 +
jb loc_100E18B  +
mov eax [esi+20h] +
jmp loc_100E18E  +
lea eax [esi+20h] +
push eax  +
push 1Dh  +
call ebx  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push edi  +
push offset EvtClose  +
lea eax [ebp-48h] +
push eax  +
call sub_1004AE6  +
push dword ptr [ebp-30h]  +
mov ecx esi +
push edi  +
mov byte ptr [ebp-4] 3 +
call near ptr dword_100DD40+5  +
push 0  +
push edi  +
call EvtSaveChannelConfig  +
test eax eax +
jnz loc_100E235  +
call ebx  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
lea eax [ebp-2Ch] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_100B742  +
test eax eax +
jnz loc_100E20B  +
cmp [ebp-18h] eax +
jbe loc_100E20B  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
cmp dword ptr [ebp-14h] 8 +
mov ecx [ebp-28h] +
jnb loc_100E1FC  +
lea ecx [ebp-28h] +
push ecx  +
push offset aS_4  +
push eax  +
call sub_100BC27  +
add esp 0Ch +
cmp dword ptr [esi+34h] 8 +
jb loc_100E216  +
mov esi [esi+20h] +
jmp loc_100E219  +
add esi 20h +
push esi  +
push 1Eh  +
call ebx  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
lea eax [ebp-48h] +
push eax  +
call sub_1003FFD  +
mov eax [ebp-30h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_100E24F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp byte ptr [ebp-3Ch] 0 +
jnz loc_100E25C  +
call dword ptr [ebp-38h]  +
call sub_1002043  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
push 1  +
push 1  +
call sub_1001FF5  +
mov ecx [esi+8] +
push 0  +
call sub_1002223  +
pop esi  +
retn   +
***
push 50h  +
mov eax offset byte_10238F9 +
call sub_10021E6  +
mov eax ecx +
xor edi edi +
push edi  +
push dword ptr [eax+18h]  +
call EvtOpenPublisherEnum  +
mov ebx eax +
cmp ebx edi +
jnz loc_100E2C8  +
push 16h  +
call ds:GetLastError  +
push eax  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
push ebx  +
push offset EvtClose  +
lea eax [ebp-5Ch] +
push eax  +
call sub_1004AE6  +
mov [ebp-4] edi +
mov [ebp-3Ch] edi +
mov [ebp-38h] edi +
mov [ebp-34h] edi +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
mov [ebp-4Ch] edi +
mov [ebp-48h] edi +
mov [ebp-44h] edi +
push edi  +
push 200h  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call sub_1001E91  +
mov esi [ebp-3Ch] +
cmp esi edi +
jnz loc_100E311  +
xor eax eax +
jmp loc_100E318  +
mov eax [ebp-38h] +
sub eax esi +
sar eax 1 +
lea ecx [ebp-30h] +
push ecx  +
push esi  +
push eax  +
push ebx  +
mov [ebp-30h] eax +
call EvtNextPublisherId  +
test eax eax +
jnz loc_100E380  +
call ds:GetLastError  +
mov edi eax +
cmp edi 7Ah +
jnz loc_100E372  +
push 0  +
push dword ptr [ebp-30h]  +
lea ecx [ebp-40h] +
call sub_1001E91  +
mov esi [ebp-3Ch] +
test esi esi +
jnz loc_100E350  +
xor eax eax +
jmp loc_100E357  +
mov eax [ebp-38h] +
sub eax esi +
sar eax 1 +
lea ecx [ebp-30h] +
push ecx  +
push esi  +
push eax  +
push ebx  +
mov [ebp-30h] eax +
call EvtNextPublisherId  +
test eax eax +
jnz loc_100E37E  +
call ds:GetLastError  +
mov edi eax +
cmp edi 103h +
jz loc_100E39A  +
test edi edi +
jnz loc_100E39C  +
xor edi edi +
push esi  +
lea ecx [ebp-2Ch] +
call sub_1001DE7  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-50h] +
call sub_1003406  +
jmp loc_100E309  +
***
xor edi edi +
push dword ptr [ebp-48h]  +
mov esi [ebp-4Ch] +
push esi  +
call near ptr byte_100CDD0+1  +
cmp esi [ebp-48h] +
jz loc_100E3D5  +
add esi 4 +
cmp dword ptr [esi+14h] 8 +
jb loc_100E3BA  +
mov eax [esi] +
jmp loc_100E3BC  +
mov eax esi +
push eax  +
push offset aS_4  +
call ds:wprintf  +
add esi 1Ch +
lea eax [esi-4] +
pop ecx  +
pop ecx  +
cmp eax [ebp-48h] +
jnz loc_100E3B0  +
test edi edi +
jz loc_100E3E5  +
push 17h  +
push edi  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
lea ecx [ebp-50h] +
call sub_100256E  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
lea ecx [ebp-40h] +
call sub_10043CC  +
lea eax [ebp-5Ch] +
push eax  +
call sub_1003FFD  +
call sub_1002043  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
cmp eax 0Fh +
jz loc_100E43F  +
cmp eax 14h +
jz loc_100E43F  +
cmp eax 18h +
jz loc_100E43F  +
cmp eax 1Ch +
jz loc_100E43F  +
cmp eax 5 +
jz loc_100E43F  +
cmp eax 0Bh +
jz loc_100E43F  +
xor al al +
jmp loc_100E441  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
push 2  +
push 2  +
call sub_1001FF5  +
mov ecx [esi+8] +
push offset off_10295FC  +
call sub_1002223  +
mov ecx [esi+8] +
push 1  +
call sub_10031F1  +
push eax  +
lea ecx [esi+1Ch] +
call sub_1001DE7  +
mov ecx [esi+8] +
lea eax [ebp-1] +
push eax  +
push 0  +
push offset off_1029570  +
push offset dword_10013F8  +
push offset aFormat  +
call sub_1001688  +
mov ecx [esi+8] +
test eax eax +
setnz al  +
mov [esi+38h] al +
lea eax [ebp-1] +
push eax  +
push 0  +
push offset aGe  +
push offset aGetevents  +
call sub_1002709  +
mov ecx [esi+8] +
mov [esi+39h] al +
lea eax [ebp-1] +
push eax  +
push 0  +
push offset aGm  +
push offset aGetmessage  +
call sub_1002709  +
mov [esi+3Ah] al +
pop esi  +
leave   +
retn   +
***
or [ebp-4717C3B2h] cl +
sar bh 0FFh +
jmp loc_100E5D6  +
lea ecx [ebp-2Ch] +
call sub_10043CC  +
call sub_1002052  +
retn 0Ch  +
***
call sub_1003100  +
xor esi esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+10h]  +
mov [ebp-4] esi +
push dword ptr [ebp+0Ch]  +
mov [ebp-10h] esi +
call sub_100B2C8  +
cmp eax esi +
jz loc_100E7D5  +
push dword ptr [ebp+8]  +
push 4  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov eax [ebp-10h] +
mov eax [eax+0Ch] +
cmp eax esi +
jnz loc_100E7F1  +
lea ecx [ebp-20h] +
call sub_10043CC  +
mov eax esi +
call sub_1002052  +
retn 10h  +
***
cmp eax 20h +
jz loc_100E807  +
push dword ptr [ebp+8]  +
push 4  +
push 0Dh  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push dword ptr [ebp+14h]  +
mov eax [ebp-10h] +
push dword ptr [eax]  +
call EvtGetObjectArraySize  +
test eax eax +
jnz loc_100E83A  +
call ds:GetLastError  +
mov esi eax +
mov eax [ebp-10h] +
push dword ptr [eax]  +
call EvtClose  +
push dword ptr [ebp+8]  +
push 4  +
push esi  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov eax [ebp-10h] +
mov esi [eax] +
jmp loc_100E7DF  +
***
xor ds:byte_1023A11[eax] bh +
call sub_1003100  +
mov esi ecx +
xor edi edi +
push edi  +
push dword ptr [ebp+8]  +
call EvtOpenEventMetadataEnum  +
mov [ebp-14h] eax +
mov [ebp-38h] edi +
mov [ebp-34h] edi +
mov [ebp-30h] edi +
mov [ebp-4] edi +
cmp eax edi +
jnz loc_100EAA1  +
cmp dword ptr [esi+34h] 8 +
jb loc_100EA8A  +
mov eax [esi+20h] +
jmp loc_100EA8D  +
lea eax [esi+20h] +
push eax  +
push 19h  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push dword ptr [ebp-14h]  +
mov ebx offset EvtClose +
push ebx  +
lea eax [ebp-2Ch] +
push eax  +
call sub_1004AE6  +
push edi  +
push ebx  +
lea eax [ebp-20h] +
push eax  +
call sub_1004AE6  +
lea ebx [esi+3Ch] +
push offset aEvents  +
mov ecx ebx +
mov byte ptr [ebp-4] 2 +
mov [ebp-10h] ebx +
call near ptr dword_100AD18+2  +
mov ecx ebx +
call near ptr dword_100A4AC+3  +
jmp loc_100EBAE  +
mov ecx [ebp-10h] +
push offset aEvent  +
call near ptr dword_100AD18+2  +
push edi  +
push 8  +
push edi  +
push ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
push offset aValue  +
call near ptr dword_100E5F4+0CAh  +
push edi  +
push 8  +
push 1  +
push ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
push offset aVersion  +
call near ptr dword_100E5F4+0CAh  +
push edi  +
push 8  +
push 4  +
push ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
push offset aOpcode_0  +
call near ptr dword_100E5F4+0CAh  +
push edi  +
push 8  +
push 2  +
push ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
push offset aChannel  +
call near ptr dword_100E5F4+0CAh  +
push edi  +
push 8  +
push 3  +
push ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
push offset aLevel_1  +
call near ptr dword_100E5F4+0CAh  +
push edi  +
push 8  +
push 5  +
push ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
push offset aTask_0  +
call near ptr dword_100E5F4+0CAh  +
push offset a0xI64x  +
push 0Ah  +
push 6  +
push ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
push offset aKeywords_0  +
call near ptr dword_100E5F4+0CAh  +
push edi  +
push 8  +
push 7  +
push ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
push offset aMessage  +
call near ptr dword_100E5F4+0CAh  +
mov ecx [ebp-10h] +
call near ptr dword_100A4AC+3  +
mov ecx [ebp-10h] +
call near ptr byte_100AC3C  +
push ebx  +
call EvtClose  +
push edi  +
push dword ptr [ebp-14h]  +
call EvtNextEventMetadata  +
mov ebx eax +
cmp ebx edi +
jnz loc_100EAE0  +
call ds:GetLastError  +
cmp eax 103h +
jnz loc_100EBD0  +
xor eax eax +
cmp eax edi +
jz loc_100EBF0  +
cmp dword ptr [esi+34h] 8 +
jb loc_100EBDF  +
mov esi [esi+20h] +
jmp loc_100EBE2  +
add esi 20h +
push esi  +
push 1Ah  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov ecx [ebp-10h] +
call near ptr byte_100AC3C  +
lea eax [ebp-20h] +
push eax  +
call sub_1003FFD  +
lea eax [ebp-2Ch] +
push eax  +
call sub_1003FFD  +
lea ecx [ebp-3Ch] +
call sub_10043CC  +
call sub_1002052  +
retn 4  +
***
push 38h  +
mov eax offset byte_1023A8D +
call sub_1003100  +
mov esi ecx +
cmp dword ptr [esi+34h] 8 +
jb loc_100EC64  +
mov eax [esi+20h] +
jmp loc_100EC67  +
lea eax [esi+20h] +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push dword ptr [esi+18h]  +
call EvtOpenPublisherMetadata  +
mov [ebp-10h] eax +
cmp eax ebx +
jnz loc_100EC9E  +
cmp dword ptr [esi+34h] 8 +
jb loc_100EC87  +
mov eax [esi+20h] +
jmp loc_100EC8A  +
lea eax [esi+20h] +
push eax  +
push 15h  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push dword ptr [ebp-10h]  +
lea eax [ebp-34h] +
push offset EvtClose  +
push eax  +
call sub_1004AE6  +
mov [ebp-4] ebx +
mov [ebp-40h] ebx +
mov [ebp-3Ch] ebx +
mov [ebp-38h] ebx +
movzx eax byte ptr [esi+38h] +
push eax  +
push dword ptr [esi+10h]  +
lea edi [esi+3Ch] +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call near ptr dword_100A3C0+3  +
push offset aProvider  +
mov ecx edi +
call near ptr dword_100AD18+2  +
cmp dword ptr [esi+34h] 8 +
jb loc_100ECE8  +
mov eax [esi+20h] +
jmp loc_100ECEB  +
lea eax [esi+20h] +
push eax  +
push offset aName  +
mov ecx edi +
call near ptr byte_100A608+1  +
push ebx  +
push 0Fh  +
push ebx  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aGuid  +
call near ptr dword_100E5E8+3  +
push ebx  +
push 1  +
push 4  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aHelplink  +
call near ptr dword_100E5E8+3  +
push ebx  +
push 1  +
push 1  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aResourcefilena  +
call near ptr dword_100E5E8+3  +
push ebx  +
push 1  +
push 2  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aParameterfilen  +
call near ptr dword_100E5E8+3  +
push ebx  +
push 1  +
push 3  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aMessagefilenam  +
call near ptr dword_100E5E8+3  +
push ebx  +
push 8  +
push 5  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aMessage  +
call near ptr dword_100E5E8+3  +
cmp [esi+40h] bl +
jz loc_100ED85  +
push offset aHttpSchemas_mi  +
push offset aXmlns  +
mov ecx edi +
call near ptr byte_100A608+1  +
mov ecx edi +
call near ptr dword_100A4AC+3  +
lea eax [ebp-14h] +
push eax  +
push 6  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aChannels_1  +
call near ptr dword_100E6C8+0C9h  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jz loc_100EE83  +
push eax  +
push offset EvtClose  +
lea eax [ebp-28h] +
push eax  +
call sub_1004AE6  +
push offset aChannels_1  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call near ptr dword_100AD18+2  +
mov ecx edi +
call near ptr dword_100A4AC+3  +
mov [ebp-18h] ebx +
cmp [ebp-14h] ebx +
jbe loc_100EE6F  +
push offset aChannel  +
mov ecx edi +
call near ptr dword_100AD18+2  +
push ebx  +
push 1  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 7  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aName  +
call near ptr dword_100E844+2  +
push ebx  +
push 8  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 9  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aId_0  +
call near ptr dword_100E844+2  +
push ebx  +
push 8  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 0Ah  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aFlags_0  +
call near ptr dword_100E844+2  +
push ebx  +
push 8  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 0Bh  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aMessage  +
call near ptr dword_100E844+2  +
mov ecx edi +
call near ptr dword_100A4AC+3  +
mov ecx edi +
call near ptr byte_100AC3C  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
cmp eax [ebp-14h] +
jb loc_100EDDE  +
mov ecx edi +
call near ptr byte_100AC3C  +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1003FFD  +
lea eax [ebp-14h] +
push eax  +
push 0Ch  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aLevels  +
call near ptr dword_100E6C8+0C9h  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jz loc_100EF58  +
push eax  +
push offset EvtClose  +
lea eax [ebp-28h] +
push eax  +
call sub_1004AE6  +
push offset aLevels  +
mov ecx edi +
mov byte ptr [ebp-4] 3 +
call near ptr dword_100AD18+2  +
mov ecx edi +
call near ptr dword_100A4AC+3  +
mov [ebp-18h] ebx +
cmp [ebp-14h] ebx +
jbe loc_100EF44  +
push offset aLevel_1  +
mov ecx edi +
call near ptr dword_100AD18+2  +
push ebx  +
push 1  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 0Dh  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aName  +
call near ptr dword_100E844+2  +
push ebx  +
push 8  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 0Eh  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aValue  +
call near ptr dword_100E844+2  +
push ebx  +
push 8  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 0Fh  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aMessage  +
call near ptr dword_100E844+2  +
mov ecx edi +
call near ptr dword_100A4AC+3  +
mov ecx edi +
call near ptr byte_100AC3C  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
cmp eax [ebp-14h] +
jb loc_100EED1  +
mov ecx edi +
call near ptr byte_100AC3C  +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1003FFD  +
lea eax [ebp-14h] +
push eax  +
push 15h  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aOpcodes  +
call near ptr dword_100E6C8+0C9h  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jz loc_100F02A  +
push eax  +
push offset EvtClose  +
lea eax [ebp-28h] +
push eax  +
call sub_1004AE6  +
push offset aOpcodes  +
mov ecx edi +
mov byte ptr [ebp-4] 4 +
call near ptr dword_100AD18+2  +
mov ecx edi +
call near ptr dword_100A4AC+3  +
mov [ebp-18h] ebx +
cmp [ebp-14h] ebx +
jbe loc_100F016  +
push offset aOpcode_0  +
mov ecx edi +
call near ptr dword_100AD18+2  +
push ebx  +
push 1  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 16h  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aName  +
call near ptr dword_100E844+2  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 17h  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aValue  +
call near ptr dword_100E850+0D2h  +
push ebx  +
push 8  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 18h  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aMessage  +
call near ptr dword_100E844+2  +
mov ecx edi +
call near ptr dword_100A4AC+3  +
mov ecx edi +
call near ptr byte_100AC3C  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
cmp eax [ebp-14h] +
jb loc_100EFA6  +
mov ecx edi +
call near ptr byte_100AC3C  +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1003FFD  +
lea eax [ebp-14h] +
push eax  +
push 10h  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aTasks  +
call near ptr dword_100E6C8+0C9h  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jz loc_100F121  +
push eax  +
push offset EvtClose  +
lea eax [ebp-28h] +
push eax  +
call sub_1004AE6  +
push offset aTasks  +
mov ecx edi +
mov byte ptr [ebp-4] 5 +
call near ptr dword_100AD18+2  +
mov ecx edi +
call near ptr dword_100A4AC+3  +
mov [ebp-18h] ebx +
cmp [ebp-14h] ebx +
jbe loc_100F10D  +
push offset aTask_0  +
mov ecx edi +
call near ptr dword_100AD18+2  +
push ebx  +
push 1  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 11h  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aName  +
call near ptr dword_100E844+2  +
push ebx  +
push 8  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 13h  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aValue  +
call near ptr dword_100E844+2  +
push ebx  +
push 0Fh  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 12h  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aEventguid  +
call near ptr dword_100E844+2  +
push ebx  +
push 8  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 14h  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aMessage  +
call near ptr dword_100E844+2  +
mov ecx edi +
call near ptr dword_100A4AC+3  +
mov ecx edi +
call near ptr byte_100AC3C  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
cmp eax [ebp-14h] +
jb loc_100F07C  +
mov ecx edi +
call near ptr byte_100AC3C  +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1003FFD  +
lea eax [ebp-14h] +
push eax  +
push 19h  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push offset aKeywords_0  +
call near ptr dword_100E6C8+0C9h  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jz loc_100F1FA  +
push eax  +
push offset EvtClose  +
lea eax [ebp-28h] +
push eax  +
call sub_1004AE6  +
push offset aKeywords_0  +
mov ecx edi +
mov byte ptr [ebp-4] 6 +
call near ptr dword_100AD18+2  +
mov ecx edi +
call near ptr dword_100A4AC+3  +
mov [ebp-18h] ebx +
cmp [ebp-14h] ebx +
jbe loc_100F1E6  +
push offset aKeyword_0  +
mov ecx edi +
call near ptr dword_100AD18+2  +
push ebx  +
push 1  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 1Ah  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aName  +
call near ptr dword_100E844+2  +
push offset aI64x  +
push 0Ah  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 1Bh  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aMask  +
call near ptr dword_100E844+2  +
push ebx  +
push 8  +
push dword ptr [ebp-18h]  +
mov ecx esi +
push 1Ch  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-10h]  +
push offset aMessage  +
call near ptr dword_100E844+2  +
mov ecx edi +
call near ptr dword_100A4AC+3  +
mov ecx edi +
call near ptr byte_100AC3C  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
cmp eax [ebp-14h] +
jb loc_100F16F  +
mov ecx edi +
call near ptr byte_100AC3C  +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1003FFD  +
cmp [esi+39h] bl +
jz loc_100F209  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call near ptr dword_100EA50+3  +
mov ecx edi +
call near ptr byte_100AC3C  +
mov ecx edi +
call near ptr dword_100A4D8+5  +
lea ecx [ebp-44h] +
call sub_10043CC  +
lea eax [ebp-34h] +
push eax  +
call sub_1003FFD  +
call sub_1002052  +
retn   +
***
push 20h  +
mov eax offset byte_102363D +
call sub_1003100  +
mov esi ecx +
cmp dword ptr [esi+34h] 8 +
jb loc_100F386  +
mov eax [esi+20h] +
jmp loc_100F389  +
lea eax [esi+20h] +
xor ecx ecx +
xor ebx ebx +
cmp [esi+39h] bl +
setnz cl  +
inc ecx  +
push ecx  +
push eax  +
push dword ptr [esi+18h]  +
call EvtOpenLog  +
mov edi eax +
cmp edi ebx +
jnz loc_100F3C6  +
cmp dword ptr [esi+34h] 8 +
jb loc_100F3AF  +
mov eax [esi+20h] +
jmp loc_100F3B2  +
lea eax [esi+20h] +
push eax  +
push 1Fh  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push edi  +
push offset EvtClose  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1004AE6  +
mov [ebp-4] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
movzx eax byte ptr [esi+38h] +
push eax  +
push dword ptr [esi+10h]  +
lea ecx [esi+3Ch] +
mov byte ptr [ebp-4] 1 +
mov [ebp-10h] ecx +
call near ptr dword_100A3C0+3  +
mov ecx [ebp-10h] +
push offset aLog  +
call near ptr dword_100AD18+2  +
push ebx  +
push 11h  +
push ebx  +
push edi  +
push offset aCreationtime  +
mov ecx esi +
call near ptr dword_100F2AC+3  +
push ebx  +
push 11h  +
push 1  +
push edi  +
push offset aLastaccesstime  +
mov ecx esi +
call near ptr dword_100F2AC+3  +
push ebx  +
push 11h  +
push 2  +
push edi  +
push offset aLastwritetime  +
mov ecx esi +
call near ptr dword_100F2AC+3  +
push ebx  +
push 0Ah  +
push 3  +
push edi  +
push offset aFilesize  +
mov ecx esi +
call near ptr dword_100F2AC+3  +
push ebx  +
push 8  +
push 4  +
push edi  +
push offset aAttributes  +
mov ecx esi +
call near ptr dword_100F2AC+3  +
push ebx  +
push 0Ah  +
push 5  +
push edi  +
push offset aNumberoflogrec  +
mov ecx esi +
call near ptr dword_100F2AC+3  +
push ebx  +
push 0Ah  +
push 6  +
push edi  +
push offset aOldestrecordnu  +
mov ecx esi +
call near ptr dword_100F2AC+3  +
mov ecx [ebp-10h] +
call near ptr dword_100A4AC+3  +
mov ecx [ebp-10h] +
call near ptr byte_100AC3C  +
mov ecx [ebp-10h] +
call near ptr dword_100A4D8+5  +
lea ecx [ebp-2Ch] +
call sub_10043CC  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1003FFD  +
call sub_1002052  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4Ch] 0 +
jbe loc_100F5B0  +
cmp dword ptr [esi+50h] 8 +
jb loc_100F5AB  +
mov ecx [esi+3Ch] +
jmp loc_100F5B2  +
lea ecx [esi+3Ch] +
jmp loc_100F5B2  +
xor ecx ecx +
cmp dword ptr [esi+34h] 8 +
jb loc_100F5BD  +
mov eax [esi+20h] +
jmp loc_100F5C0  +
lea eax [esi+20h] +
push 0  +
push ecx  +
push eax  +
push dword ptr [esi+18h]  +
call EvtClearLog  +
test eax eax +
jnz loc_100F5F2  +
cmp dword ptr [esi+34h] 8 +
jb loc_100F5DB  +
mov esi [esi+20h] +
jmp loc_100F5DE  +
add esi 20h +
push esi  +
push 38h  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
push 2  +
push 2  +
call sub_1001FF5  +
mov ecx [esi+8] +
push offset off_1029624  +
call sub_1002223  +
mov ecx [esi+8] +
push 1  +
call sub_10031F1  +
push eax  +
lea ecx [esi+1Ch] +
call sub_1001DE7  +
mov ecx [esi+8] +
lea eax [ebp-1] +
push eax  +
push offset dword_1001334  +
push offset aBu  +
push offset aBackup  +
call sub_1003D75  +
push eax  +
lea ecx [esi+38h] +
call sub_1001DE7  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
xor ecx ecx +
cmp [esi+70h] cl +
setnz bl  +
inc ebx  +
cmp [esi+72h] cl +
jz loc_100F68F  +
or ebx 2000h +
cmp [esi+68h] ecx +
jbe loc_100F6A4  +
cmp dword ptr [esi+6Ch] 8 +
jb loc_100F69F  +
mov edx [esi+58h] +
jmp loc_100F6A6  +
lea edx [esi+58h] +
jmp loc_100F6A6  +
xor edx edx +
cmp [esi+4Ch] ecx +
jbe loc_100F6B9  +
cmp dword ptr [esi+50h] 8 +
jb loc_100F6B6  +
mov ecx [esi+3Ch] +
jmp loc_100F6B9  +
lea ecx [esi+3Ch] +
cmp dword ptr [esi+34h] 8 +
jb loc_100F6C4  +
mov eax [esi+20h] +
jmp loc_100F6C7  +
lea eax [esi+20h] +
push ebx  +
push edx  +
push ecx  +
push eax  +
push dword ptr [esi+18h]  +
call EvtExportLog  +
test eax eax +
jnz loc_100F6F9  +
cmp dword ptr [esi+34h] 8 +
jb loc_100F6E2  +
mov esi [esi+20h] +
jmp loc_100F6E5  +
add esi 20h +
push esi  +
push 3Ah  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
pop esi  +
pop ebx  +
retn   +
***
push 14h  +
mov eax offset dword_1023AE4 +
call sub_1003100  +
mov esi ecx +
push 0  +
call ds:CoInitialize  +
test eax eax +
jge loc_100F727  +
push 3  +
push eax  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
push ds:CoUninitialize  +
lea eax [ebp-20h] +
push eax  +
call sub_1005604  +
mov ecx [esi+8] +
and dword ptr [ebp-4] 0 +
push 3  +
push 3  +
call sub_1001FF5  +
mov ecx [esi+8] +
push offset off_1029630  +
call sub_1002223  +
mov ecx [esi+8] +
push 1  +
call sub_10031F1  +
lea ecx [esi+1Ch] +
push eax  +
mov [ebp-14h] ecx +
call sub_1001DE7  +
mov ecx [esi+8] +
push 2  +
call sub_10031F1  +
push eax  +
lea ecx [esi+54h] +
call sub_1001DE7  +
mov ecx [esi+8] +
lea eax [ebp-0Dh] +
push eax  +
push offset dword_1001338  +
mov ebx offset aQ +
push ebx  +
mov edi offset aQuery +
push edi  +
call sub_1003D75  +
lea ecx [esi+38h] +
push eax  +
mov [ebp-18h] ecx +
call sub_1001DE7  +
mov ecx [esi+8] +
lea eax [ebp-0Dh] +
push eax  +
push 0  +
push offset aLf  +
push offset aLogfile  +
call sub_1002709  +
mov ecx [esi+8] +
mov [esi+70h] al +
lea eax [ebp-0Dh] +
push eax  +
push 0  +
push offset aSq  +
push offset aStructuredquer  +
call sub_1002709  +
mov ecx [esi+8] +
mov [esi+71h] al +
lea eax [ebp-0Dh] +
push eax  +
push 0  +
push offset aOw  +
push offset aOverwrite  +
call sub_1002709  +
cmp byte ptr [esi+71h] 0 +
mov [esi+72h] al +
jz loc_100F856  +
mov ecx [esi+8] +
push ebx  +
push edi  +
call sub_10040C8  +
test al al +
jz loc_100F817  +
push 30h  +
push 57h  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
cmp byte ptr [esi+70h] 0 +
jz loc_100F835  +
push offset aLogfile  +
push offset aStructuredquer  +
push 0Eh  +
push 57h  +
call sub_100BC45  +
jmp $+2  +
add esp 10h +
mov esi [ebp-14h] +
cmp dword ptr [esi+18h] 8 +
jb loc_100F843  +
mov eax [esi+4] +
jmp loc_100F846  +
lea eax [esi+4] +
push dword ptr [ebp-18h]  +
push eax  +
call sub_1004333  +
mov ecx esi +
call sub_10043F2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp byte ptr [ebp-20h] 0 +
jnz loc_100F863  +
call dword ptr [ebp-1Ch]  +
call sub_1002052  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+34h] 8 +
jb loc_100F89B  +
mov eax [esi+20h] +
jmp loc_100F89E  +
lea eax [esi+20h] +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+38h]  +
push eax  +
push dword ptr [esi+18h]  +
call EvtArchiveExportedLog  +
test eax eax +
jnz loc_100F8D3  +
cmp dword ptr [esi+34h] 8 +
jb loc_100F8BC  +
mov esi [esi+20h] +
jmp loc_100F8BF  +
add esi 20h +
push esi  +
push 3Ch  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
mov ecx [esi+8] +
push 2  +
push 2  +
call sub_1001FF5  +
mov ecx [esi+8] +
push offset off_1029654  +
call sub_1002223  +
mov ecx [esi+8] +
push 1  +
call sub_10031F1  +
push eax  +
lea ecx [esi+1Ch] +
call sub_1001DE7  +
mov ecx [esi+8] +
lea eax [ebp-1] +
push eax  +
push 0  +
push offset dword_1001470  +
push offset aLocale  +
call sub_1003D75  +
mov edi eax +
test edi edi +
jz loc_100F95A  +
cmp word ptr [edi] 0 +
jz loc_100F95A  +
push 0  +
push edi  +
call ds:LocaleNameToLCID  +
mov [esi+38h] eax +
test eax eax +
jnz loc_100F963  +
push edi  +
push 24h  +
call ds:GetLastError  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
jmp loc_100F963  +
call ds:GetThreadLocale  +
mov [esi+38h] eax +
and dword ptr [esi+3Ch] 0 +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
test ecx ecx +
jbe loc_100F997  +
mov eax [ebp+arg_4] +
movzx edx ax +
mov eax edx +
shl edx 10h +
push edi  +
mov edi [ebp+arg_0] +
or eax edx +
shr ecx 1 +
stos   +
adc ecx ecx +
stos   +
pop edi  +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_100F970  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+2Dh] dl +
jz loc_100F9D1  +
mov eax [eax+8] +
jmp loc_100F9F7  +
mov ecx [eax] +
cmp [ecx+2Dh] dl +
jnz loc_100F9E8  +
push ecx  +
call sub_1008F4D  +
jmp loc_100F9F7  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_100F9F0  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+2Dh] dl +
jz loc_100F9E0  +
mov ecx [esi] +
cmp [ecx+2Dh] dl +
jnz loc_100F9F9  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_100FA14  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
add eax 4 +
cmp eax [ebp+arg_4] +
jnz loc_100FA0A  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
sar eax 2 +
mov ecx eax +
shl ecx 2 +
sub esi ecx +
test eax eax +
jle loc_100FA4B  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push esi  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi ecx +
push offset aS_2  +
push edi  +
call sub_100523F  +
add esp 0Ch +
cmp [ebp+arg_8] 1 +
mov ebx offset asc_1008274 +
jnz loc_100FA84  +
push ebx  +
push edi  +
call sub_100523F  +
pop ecx  +
pop ecx  +
lea esi [edi+0C8h] +
push esi  +
push [ebp+arg_8]  +
push 0  +
push 0  +
push 0FFFFFFFFh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B62F  +
test eax eax +
jz loc_100FAAA  +
push offset aNA  +
jmp loc_100FAB9  +
mov eax [esi+4] +
test eax eax +
jz loc_100FAB8  +
mov ecx [esi+8] +
sub ecx eax +
jnz loc_100FAC3  +
push ebx  +
push edi  +
call sub_100523F  +
pop ecx  +
pop ecx  +
jmp loc_100FAD7  +
push dword ptr [edi+0CCh]  +
push offset aS  +
push edi  +
call sub_100523F  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 1 +
jnz loc_100FB21  +
cmp dword ptr [ecx+18h] 8 +
jb loc_100FB11  +
mov ecx [ecx+4] +
jmp loc_100FB14  +
add ecx 4 +
mov eax [ebp+arg_0] +
mov dx [ebp+arg_8] +
mov [ecx+eax*2] dx +
jmp loc_100FB44  +
cmp dword ptr [ecx+18h] 8 +
jb loc_100FB2C  +
mov ecx [ecx+4] +
jmp loc_100FB2F  +
add ecx 4 +
push dword ptr [ebp+arg_8]  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
lea eax [ecx+eax*2] +
push eax  +
call sub_100F9A1  +
add esp 0Ch +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100FA20  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+18h] 8 +
jb loc_100FB8C  +
mov ecx [eax+4] +
jmp loc_100FB8F  +
lea ecx [eax+4] +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+18h] 8 +
jb loc_100FB9D  +
mov eax [eax+4] +
jmp loc_100FBA0  +
add eax 4 +
push ecx  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
xor ecx ecx +
test eax eax +
setl cl  +
mov al cl +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
jmp loc_100FBEB  +
push [ebp+arg_0]  +
lea eax [esi+0Ch] +
push eax  +
mov ecx edi +
call sub_100FB79  +
test al al +
jz loc_100FBE7  +
mov esi [esi+8] +
jmp loc_100FBEB  +
mov ebx esi +
mov esi [esi] +
cmp byte ptr [esi+2Dh] 0 +
jz loc_100FBD0  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
jmp loc_100FC17  +
mov ecx [eax] +
mov edx [ebp+arg_C] +
mov [edx] ecx +
add [ebp+arg_C] 4 +
add eax 4 +
cmp eax [ebp+arg_8] +
jnz loc_100FC09  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [edi+14h] ebx +
jnb loc_100FC45  +
call loc_10124D5  +
mov eax [edi+14h] +
sub eax ebx +
cmp eax [ebp+arg_8] +
jnb loc_100FC52  +
mov [ebp+arg_8] eax +
or eax 0FFFFFFFFh +
sub eax [esi+14h] +
cmp eax [ebp+arg_8] +
ja loc_100FC62  +
call loc_1012485  +
cmp [ebp+arg_8] 0 +
jbe loc_100FCBD  +
mov eax [esi+14h] +
add eax [ebp+arg_8] +
push 0  +
push eax  +
mov ecx esi +
mov [ebp+arg_0] eax +
call sub_1001BB8  +
test al al +
jz loc_100FCBD  +
cmp dword ptr [edi+18h] 8 +
jb loc_100FC8A  +
mov edi [edi+4] +
jmp loc_100FC8D  +
add edi 4 +
mov eax [esi+18h] +
cmp eax 8 +
jb loc_100FC9A  +
mov edx [esi+4] +
jmp loc_100FC9D  +
lea edx [esi+4] +
push [ebp+arg_8]  +
mov ecx [esi+14h] +
lea edi [edi+ebx*2] +
push edi  +
sub eax ecx +
push eax  +
lea eax [edx+ecx*2] +
push eax  +
call sub_100477B  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1001A79  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100FBFF  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_100FBBC  +
mov [ebp+var_4] eax +
cmp eax [esi+4] +
jz loc_100FD2D  +
add eax 0Ch +
push eax  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_100FB79  +
test al al +
jnz loc_100FD2D  +
lea eax [ebp+var_4] +
jmp loc_100FD36  +
mov eax [esi+4] +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
or eax 0FFFFFFFFh +
mov edi ecx +
sub eax [edi+14h] +
cmp eax ebx +
ja loc_100FD62  +
call loc_1012485  +
test ebx ebx +
jbe loc_100FD91  +
push esi  +
mov esi [edi+14h] +
push 0  +
add esi ebx +
push esi  +
mov ecx edi +
call sub_1001BB8  +
test al al +
jz loc_100FD90  +
push [ebp+arg_4]  +
mov ecx edi +
push ebx  +
push dword ptr [edi+14h]  +
call sub_100FAFB  +
push esi  +
mov ecx edi +
call sub_1001A79  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_100FDCA  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_100FCCB  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_10033D6  +
mov eax [edi+1Ch] +
mov [esi+1Ch] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call sub_100FCFD  +
mov eax [eax] +
cmp eax [esi+4] +
pop esi  +
jnz loc_100FE1E  +
xor eax eax +
jmp loc_100FE21  +
mov eax [eax+28h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call sub_100FCFD  +
mov eax [eax] +
xor ecx ecx +
cmp eax [esi+4] +
pop esi  +
setnz cl  +
mov al cl +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10033D6  +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov [esi+1Ch] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+0Ch] +
mov [esi+8] eax +
call sub_100FDD9  +
mov al [ebp+arg_10] +
mov [esi+2Ch] al +
mov byte ptr [esi+2Dh] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
call sub_1003100  +
mov ecx [ebp+8] +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_100FEE0  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100FE78  +
call sub_1002052  +
retn 18h  +
***
call sub_10053E2  +
pop ecx  +
call sub_1003100  +
mov edi ecx +
cmp dword ptr [edi+8] 7FFFFFEh +
jb loc_100FF87  +
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_1009A4D  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_100991A  +
push offset dword_1026570  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_100FEED  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_100FFB3  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_100FFD1  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_100FFC6  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_100FFD4  +
mov [eax] ebx +
jmp loc_100FFD4  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_100FFD4  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
jmp loc_101006E  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_101001F  +
mov edx [edx+8] +
cmp byte ptr [edx+2Ch] 0 +
jz loc_1010027  +
cmp esi [ecx+8] +
jnz loc_100FFFF  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1008F01  +
mov eax [esi+4] +
mov byte ptr [eax+2Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+2Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1008F88  +
jmp loc_101006B  +
mov edx [edx] +
cmp byte ptr [edx+2Ch] 0 +
jnz loc_101003F  +
mov byte ptr [ecx+2Ch] 1 +
mov byte ptr [edx+2Ch] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+2Ch] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_101006B  +
cmp esi [ecx] +
jnz loc_101004D  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1008F88  +
mov eax [esi+4] +
mov byte ptr [eax+2Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+2Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1008F01  +
lea eax [esi+4] +
mov ecx [eax] +
cmp byte ptr [ecx+2Ch] 0 +
jz loc_100FFDE  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+2Ch] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1002052  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
jmp loc_10100CF  +
lea eax [esi+0Ch] +
push eax  +
push [ebp+arg_4]  +
mov ecx edi +
mov ebx esi +
call sub_100FB79  +
mov byte ptr [ebp+var_8] al +
test al al +
jz loc_10100CC  +
mov esi [esi] +
jmp loc_10100CF  +
mov esi [esi+8] +
cmp byte ptr [esi+2Dh] 0 +
jz loc_10100B1  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_101010E  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_1010103  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_100FF45  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
jmp loc_1010132  +
lea ecx [ebp+var_4] +
call sub_100F9BE  +
mov esi [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [esi+0Ch] +
push eax  +
mov ecx edi +
call sub_100FB79  +
test al al +
jz loc_1010129  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_10100EB  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jnz loc_1010166  +
push [ebp+arg_8]  +
push dword ptr [esi+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_100FF45  +
mov eax [ebp+arg_0] +
jmp loc_101027C  +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
push ebx  +
push edi  +
mov edi [ebp+arg_8] +
cmp ecx [eax] +
jnz loc_1010194  +
add ecx 0Ch +
push ecx  +
push edi  +
mov ecx esi +
call sub_100FB79  +
test al al +
jz loc_1010267  +
push edi  +
push [ebp+arg_4]  +
mov ecx esi +
jmp loc_1010258  +
cmp ecx eax +
jnz loc_10101BF  +
mov eax [eax+8] +
add eax 0Ch +
push edi  +
push eax  +
mov ecx esi +
call sub_100FB79  +
test al al +
jz loc_1010267  +
mov eax [esi+4] +
push edi  +
push dword ptr [eax+8]  +
mov ecx esi +
push 0  +
jmp loc_101025A  +
add ecx 0Ch +
push ecx  +
push edi  +
mov ecx esi +
call sub_100FB79  +
test al al +
jz loc_1010204  +
mov eax [ebp+arg_4] +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] eax +
call sub_100F9BE  +
mov ebx [ebp+arg_8] +
push edi  +
lea eax [ebx+0Ch] +
push eax  +
mov ecx esi +
call sub_100FB79  +
test al al +
jz loc_1010204  +
mov eax [ebx+8] +
cmp byte ptr [eax+2Dh] 0 +
push edi  +
mov ecx esi +
jz loc_10101FF  +
push ebx  +
jmp loc_1010253  +
push [ebp+arg_4]  +
jmp loc_1010258  +
mov eax [ebp+arg_4] +
push edi  +
add eax 0Ch +
push eax  +
mov ecx esi +
call sub_100FB79  +
test al al +
jz loc_1010267  +
mov eax [ebp+arg_4] +
mov [ebp+arg_8] eax +
mov eax [esi+4] +
lea ecx [ebp+arg_8] +
mov [ebp+var_4] eax +
call sub_1008FD6  +
mov ebx [ebp+arg_8] +
cmp ebx [ebp+var_4] +
jz loc_1010243  +
lea eax [ebx+0Ch] +
push eax  +
push edi  +
mov ecx esi +
call sub_100FB79  +
test al al +
jz loc_1010267  +
mov eax [ebp+arg_4] +
mov ecx [eax+8] +
cmp byte ptr [ecx+2Dh] 0 +
push edi  +
mov ecx esi +
jz loc_1010257  +
push eax  +
push 0  +
jmp loc_101025A  +
push ebx  +
push 1  +
push [ebp+arg_0]  +
call sub_100FF45  +
mov eax [ebp+arg_0] +
jmp loc_101027A  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1010096  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
call sub_1003100  +
mov edi ecx +
push dword ptr [ebp+8]  +
call sub_100FBBC  +
mov esi eax +
cmp esi [edi+4] +
jz loc_10102B5  +
lea eax [esi+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_100FB79  +
test al al +
jz loc_10102E7  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-30h] +
call sub_100FE54  +
and dword ptr [ebp-4] 0 +
push eax  +
push esi  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
call sub_101013E  +
mov esi [eax] +
push 0  +
push 1  +
lea ecx [ebp-30h] +
call sub_1001B47  +
lea eax [esi+28h] +
call sub_1002052  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_0]  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_100FCFD  +
mov eax [ebp+var_4] +
cmp eax [esi+4] +
jnz loc_1010325  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1010286  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
jmp loc_1010338  +
mov ecx [eax+28h] +
mov edx [ebp+arg_4] +
mov [eax+28h] edx +
test ecx ecx +
jz loc_1010338  +
push ecx  +
call EvtClose  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push esi  +
mov [ebp+var_4] ecx +
call sub_100FDFE  +
mov edi eax +
test edi edi +
jnz loc_10103F2  +
cmp [esi+14h] eax +
jz loc_10103F2  +
mov ecx [ebp+var_4] +
push esi  +
call sub_100FE2A  +
test al al +
jnz loc_10103F2  +
push ebx  +
call ds:GetThreadLocale  +
push [ebp+Locale]  +
mov edi ds:SetThreadLocale +
mov ebx eax +
call edi  +
test eax eax +
jz loc_10103C6  +
push ebx  +
push edi  +
lea eax [ebp+var_10] +
push eax  +
call sub_1004AE6  +
cmp dword ptr [esi+18h] 8 +
jb loc_10103A6  +
mov eax [esi+4] +
jmp loc_10103A9  +
lea eax [esi+4] +
push 0  +
push 0  +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_0]  +
call EvtOpenPublisherMetadata  +
mov edi eax +
lea eax [ebp+var_10] +
push eax  +
call sub_1003FFD  +
jmp loc_10103E7  +
cmp dword ptr [esi+18h] 8 +
jb loc_10103D1  +
mov eax [esi+4] +
jmp loc_10103D4  +
lea eax [esi+4] +
push 0  +
push [ebp+Locale]  +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_0]  +
call EvtOpenPublisherMetadata  +
mov edi eax +
mov ecx [ebp+var_4] +
push edi  +
push esi  +
call sub_10102F7  +
pop ebx  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
call sub_10021E6  +
mov edi [ebp+8] +
mov esi ecx +
lea ecx [ebp-30h] +
push ecx  +
lea eax [esi+0C8h] +
push eax  +
xor ebx ebx +
push ebx  +
push edi  +
push dword ptr [esi+0C4h]  +
call sub_1004275  +
cmp eax ebx +
jz loc_101043C  +
push edi  +
push 1Bh  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
cmp dword ptr [ebp-30h] 1 +
jz loc_1010451  +
push edi  +
push 1Bh  +
push 0Dh  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
mov eax [esi+0CCh] +
cmp dword ptr [eax+0Ch] 1 +
mov [ebp-4] ebx +
jnz loc_1010477  +
mov eax [eax] +
cmp eax ebx +
jz loc_1010477  +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1001DE7  +
cmp [esi+54h] bl +
jz loc_101048C  +
cmp dword ptr [esi+34h] 8 +
jb loc_1010487  +
mov eax [esi+20h] +
jmp loc_101048E  +
lea eax [esi+20h] +
jmp loc_101048E  +
xor eax eax +
push dword ptr [esi+0B8h]  +
lea ecx [esi+0D8h] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [esi+18h]  +
call sub_1010342  +
lea ecx [esi+0C8h] +
push ecx  +
push 9  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push edi  +
push eax  +
call sub_100B62F  +
cmp eax ebx +
jz loc_10104CD  +
push edi  +
push 1Bh  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push dword ptr [esi+0CCh]  +
push offset aS  +
push esi  +
call sub_100523F  +
add esp 0Ch +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
call sub_1002043  +
retn 4  +
***
call sub_10021E6  +
mov eax dword_10296FC +
mov ebx [ebp+8] +
inc dword_10296FC  +
push eax  +
mov edi ecx +
push offset aEventD  +
push edi  +
mov [ebp-0BCh] ebx +
call sub_100523F  +
add esp 0Ch +
lea eax [ebp-0F8h] +
push eax  +
lea eax [edi+0C8h] +
push eax  +
push 0  +
push ebx  +
push dword ptr [edi+0C0h]  +
call sub_1004275  +
test eax eax +
jz loc_101055B  +
push ebx  +
push 1Bh  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
cmp dword ptr [ebp-0F8h] 11h +
mov esi [edi+0CCh] +
jnb loc_1010579  +
push ebx  +
push 1Bh  +
push 0Dh  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
lea ecx [ebp-48h] +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [esi+0Ch] 1 +
jnz loc_101059A  +
mov eax [esi] +
test eax eax +
jz loc_101059A  +
push eax  +
lea ecx [ebp-48h] +
call sub_1001DE7  +
mov ebx offset aNA_0 +
push ebx  +
lea ecx [ebp-64h] +
call sub_100159C  +
cmp dword ptr [esi+0ECh] 1 +
mov byte ptr [ebp-4] 1 +
jnz loc_10105C8  +
mov eax [esi+0E0h] +
test eax eax +
jz loc_10105C8  +
push eax  +
lea ecx [ebp-64h] +
call sub_1001DE7  +
and dword ptr [ebp-0ECh] 0 +
cmp dword ptr [esi+2Ch] 6 +
jnz loc_10105DF  +
movzx eax word ptr [esi+20h] +
mov [ebp-0ECh] eax +
push ebx  +
lea ecx [ebp-80h] +
call sub_100159C  +
cmp dword ptr [esi+8Ch] 11h +
mov byte ptr [ebp-4] 2 +
jnz loc_101061D  +
mov eax [esi+80h] +
mov ecx [esi+84h] +
mov [ebp-0F4h] eax +
lea eax [ebp-80h] +
push eax  +
lea eax [ebp-0F4h] +
push eax  +
mov [ebp-0F0h] ecx +
call sub_10208D7  +
push ebx  +
lea ecx [ebp-9Ch] +
call sub_100159C  +
cmp dword ptr [esi+0FCh] 1 +
mov byte ptr [ebp-4] 3 +
jnz loc_101064C  +
mov eax [esi+0F0h] +
test eax eax +
jz loc_101064C  +
push eax  +
lea ecx [ebp-9Ch] +
call sub_1001DE7  +
push ebx  +
lea ecx [ebp-0B8h] +
call sub_100159C  +
and dword ptr [ebp-0C8h] 0 +
cmp dword ptr [esi+10Ch] 13h +
mov byte ptr [ebp-4] 4 +
jnz loc_10106A4  +
mov eax [esi+100h] +
test eax eax +
jz loc_10106A4  +
lea ecx [ebp-0C8h] +
push ecx  +
push eax  +
call ConvertSidToStringSidW  +
test eax eax +
jz loc_10106A4  +
push dword ptr [ebp-0C8h]  +
lea ecx [ebp-0B8h] +
call sub_1001DE7  +
push dword ptr [ebp-0C8h]  +
call ds:LocalFree  +
push ebx  +
lea ecx [ebp-2Ch] +
call sub_100159C  +
xor ebx ebx +
cmp dword ptr [esi+10Ch] 13h +
mov byte ptr [ebp-4] 5 +
jnz loc_1010855  +
cmp [esi+100h] ebx +
jz loc_1010855  +
mov [ebp-0D4h] ebx +
mov [ebp-0D0h] ebx +
mov [ebp-0CCh] ebx +
mov [ebp-0E4h] ebx +
mov [ebp-0E0h] ebx +
mov [ebp-0DCh] ebx +
push ebx  +
push 40h  +
lea ecx [ebp-0D8h] +
mov byte ptr [ebp-4] 7 +
call sub_1001E91  +
push ebx  +
push 40h  +
lea ecx [ebp-0E8h] +
call sub_1001E91  +
cmp [ebp-0D4h] ebx +
jnz loc_1010720  +
mov [ebp-0C4h] ebx +
jmp loc_1010734  +
mov eax [ebp-0D0h] +
sub eax [ebp-0D4h] +
sar eax 1 +
mov [ebp-0C4h] eax +
cmp [ebp-0E4h] ebx +
jnz loc_1010744  +
mov [ebp-0C0h] ebx +
jmp loc_1010758  +
mov eax [ebp-0E0h] +
sub eax [ebp-0E4h] +
sar eax 1 +
mov [ebp-0C0h] eax +
lea eax [ebp-0F0h] +
push eax  +
lea eax [ebp-0C0h] +
push eax  +
push dword ptr [ebp-0E4h]  +
lea eax [ebp-0C4h] +
push eax  +
push dword ptr [ebp-0D4h]  +
push dword ptr [esi+100h]  +
push ebx  +
call ds:LookupAccountSidW  +
test eax eax +
jnz loc_10107F5  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_10107F1  +
push ebx  +
push dword ptr [ebp-0C4h]  +
lea ecx [ebp-0D8h] +
call sub_1001E91  +
push ebx  +
push dword ptr [ebp-0C0h]  +
lea ecx [ebp-0E8h] +
call sub_1001E91  +
lea eax [ebp-0F0h] +
push eax  +
lea eax [ebp-0C0h] +
push eax  +
push dword ptr [ebp-0E4h]  +
lea eax [ebp-0C4h] +
push eax  +
push dword ptr [ebp-0D4h]  +
push dword ptr [esi+100h]  +
push ebx  +
call ds:LookupAccountSidW  +
test eax eax +
jnz loc_10107F5  +
call ds:GetLastError  +
cmp eax ebx +
jnz loc_101083B  +
cmp [ebp-0C0h] ebx +
jbe loc_101082D  +
mov eax [ebp-0E4h] +
cmp [eax] bx +
jz loc_101082D  +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1001DE7  +
push 5Ch  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100FD47  +
push dword ptr [ebp-0D4h]  +
lea ecx [ebp-2Ch] +
call sub_10046D1  +
jmp loc_101083B  +
push dword ptr [ebp-0D4h]  +
lea ecx [ebp-2Ch] +
call sub_1001DE7  +
lea ecx [ebp-0E8h] +
call sub_10043CC  +
lea ecx [ebp-0D8h] +
mov byte ptr [ebp-4] 5 +
call sub_10043CC  +
cmp byte ptr [edi+54h] 0 +
jz loc_101086B  +
cmp dword ptr [edi+34h] 8 +
jb loc_1010866  +
mov eax [edi+20h] +
jmp loc_101086D  +
lea eax [edi+20h] +
jmp loc_101086D  +
xor eax eax +
push dword ptr [edi+0B8h]  +
lea ecx [edi+0D8h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
push dword ptr [edi+18h]  +
call sub_1010342  +
mov esi eax +
cmp [ebp-50h] ebx +
jz loc_10108AA  +
cmp dword ptr [ebp-4Ch] 8 +
mov eax [ebp-60h] +
jnb loc_1010899  +
lea eax [ebp-60h] +
push eax  +
push offset aLogNameS  +
push edi  +
call sub_100523F  +
add esp 0Ch +
jmp loc_10108BF  +
push offset aLogName  +
push 6  +
push dword ptr [ebp-0BCh]  +
mov ecx edi +
push ebx  +
call sub_100FA55  +
cmp [ebp-34h] ebx +
jz loc_10108E1  +
cmp dword ptr [ebp-30h] 8 +
mov eax [ebp-44h] +
jnb loc_10108D0  +
lea eax [ebp-44h] +
push eax  +
push offset aSourceS  +
push edi  +
call sub_100523F  +
add esp 0Ch +
jmp loc_10108F6  +
push offset aSource  +
push 7  +
push dword ptr [ebp-0BCh]  +
mov ecx edi +
push ebx  +
call sub_100FA55  +
cmp dword ptr [ebp-68h] 8 +
mov eax [ebp-7Ch] +
jnb loc_1010902  +
lea eax [ebp-7Ch] +
push eax  +
push offset aDateS  +
push edi  +
call sub_100523F  +
push dword ptr [ebp-0ECh]  +
push offset aEventIdD  +
push edi  +
call sub_100523F  +
add esp 18h +
push offset aTask  +
push 3  +
push dword ptr [ebp-0BCh]  +
mov ecx edi +
push esi  +
call sub_100FA55  +
push offset aLevel_0  +
push 2  +
push dword ptr [ebp-0BCh]  +
mov ecx edi +
push esi  +
call sub_100FA55  +
push offset aOpcode  +
push 4  +
push dword ptr [ebp-0BCh]  +
mov ecx edi +
push esi  +
call sub_100FA55  +
push offset aKeyword  +
push 5  +
push dword ptr [ebp-0BCh]  +
mov ecx edi +
push esi  +
call sub_100FA55  +
cmp dword ptr [ebp-0A0h] 8 +
mov eax [ebp-0B4h] +
jnb loc_101098B  +
lea eax [ebp-0B4h] +
push eax  +
push offset aUserS  +
push edi  +
call sub_100523F  +
mov eax [ebp-28h] +
add esp 0Ch +
cmp dword ptr [ebp-14h] 8 +
jnb loc_10109A6  +
lea eax [ebp-28h] +
push eax  +
push offset aUserNameS  +
push edi  +
call sub_100523F  +
mov eax [ebp-98h] +
add esp 0Ch +
cmp dword ptr [ebp-84h] 8 +
jnb loc_10109CA  +
lea eax [ebp-98h] +
push eax  +
push offset aComputerS  +
push edi  +
call sub_100523F  +
add esp 0Ch +
push offset aDescription  +
push 1  +
push dword ptr [ebp-0BCh]  +
mov ecx edi +
push esi  +
call sub_100FA55  +
push offset asc_1008274  +
push edi  +
call sub_100523F  +
pop ecx  +
pop ecx  +
xor esi esi +
push ebx  +
inc esi  +
push esi  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
push ebx  +
push esi  +
lea ecx [ebp-0B8h] +
call sub_1001B47  +
push ebx  +
push esi  +
lea ecx [ebp-9Ch] +
call sub_1001B47  +
push ebx  +
push esi  +
lea ecx [ebp-80h] +
call sub_1001B47  +
push ebx  +
push esi  +
lea ecx [ebp-64h] +
call sub_1001B47  +
push ebx  +
push esi  +
lea ecx [ebp-48h] +
call sub_1001B47  +
call sub_1002043  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1010BFB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_1010C21  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
mov dword ptr [esi] offset off_1004A08 +
xor eax eax +
mov [esi+4] eax +
mov dword ptr [esi] offset off_1010C60 +
mov [esi+8] eax +
lea ecx [esi+10h] +
mov [esi+0Ch] eax +
call sub_1011EE7  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003100  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
mov eax [ebp+8] +
mov ecx [eax] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+0F0h]  +
test eax eax +
mov eax [ebp-10h] +
jl loc_1010D22  +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
test eax eax +
mov eax [ebp-10h] +
jl loc_1010D22  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
test eax eax +
jl loc_1010D1F  +
and dword ptr [ebp+8] 0 +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_1010D16  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
push dword ptr [ebp+8]  +
test eax eax +
jl loc_1010D19  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push offset aSDError0xXAtCo  +
push dword ptr [edi+14h]  +
call sub_100BC27  +
add esp 1Ch +
push dword ptr [ebp+8]  +
call ds:SysFreeString  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1010D30  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1002052  +
retn 8  +
***
adc eax offset SysFreeString +
xor edi edi +
cmp esi edi +
jge loc_1010E0F  +
cmp dword ptr [ebx+34h] 8 +
jb loc_1010DFE  +
mov eax [ebx+20h] +
jmp loc_1010E01  +
lea eax [ebx+20h] +
push eax  +
push 22h  +
push esi  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push dword ptr [ebp+0Ch]  +
mov esi [ebp+8] +
push offset aEventsInstrume  +
push esi  +
call near ptr dword_100C280+5  +
cmp eax edi +
jz loc_10110C8  +
mov [ebp-18h] edi +
mov eax [esi] +
lea ecx [ebp-18h] +
push ecx  +
push esi  +
mov byte ptr [ebp-4] 2 +
call dword ptr [eax+0B4h]  +
mov esi eax +
cmp esi edi +
jge loc_1010E60  +
cmp dword ptr [ebx+34h] 8 +
jb loc_1010E4D  +
mov eax [ebx+20h] +
jmp loc_1010E50  +
lea eax [ebx+20h] +
push eax  +
push 22h  +
push esi  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
cmp esi edi +
jz loc_1010E82  +
cmp dword ptr [ebx+34h] 8 +
jb loc_1010E6D  +
mov eax [ebx+20h] +
jmp loc_1010E70  +
lea eax [ebx+20h] +
push eax  +
push 22h  +
push 490h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov [ebp-14h] edi +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 3 +
call dword ptr [ecx+0A4h]  +
cmp eax edi +
jge loc_1010EB9  +
cmp dword ptr [ebx+34h] 8 +
jb loc_1010EA8  +
mov ecx [ebx+20h] +
jmp loc_1010EAB  +
lea ecx [ebx+20h] +
push ecx  +
push 22h  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov eax [ebp-14h] +
mov edx offset aAssembly +
mov cx [eax] +
cmp cx [edx] +
jnz loc_1010EE7  +
cmp cx di +
jz loc_1010EE3  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_1010EE7  +
add eax 4 +
add edx 4 +
cmp cx di +
jnz loc_1010EC1  +
xor eax eax +
jmp loc_1010EEC  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jz loc_1010F10  +
cmp dword ptr [ebx+34h] 8 +
jb loc_1010EFB  +
mov eax [ebx+20h] +
jmp loc_1010EFE  +
lea eax [ebx+20h] +
push eax  +
push 22h  +
push 490h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov [ebp-10h] edi +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 4 +
call dword ptr [ecx+34h]  +
cmp eax edi +
jge loc_1010F44  +
cmp dword ptr [ebx+34h] 8 +
jb loc_1010F33  +
mov ecx [ebx+20h] +
jmp loc_1010F36  +
lea ecx [ebx+20h] +
push ecx  +
push 22h  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
mov eax [ebp-10h] +
lea edx [ebp-14h] +
push edx  +
mov [ebp-14h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A4h]  +
cmp eax edi +
jge loc_1010F80  +
cmp dword ptr [ebx+34h] 8 +
jb loc_1010F6F  +
mov ecx [ebx+20h] +
jmp loc_1010F72  +
lea ecx [ebx+20h] +
push ecx  +
push 22h  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov eax [ebp-14h] +
cmp eax edi +
jz loc_1010FF5  +
mov ecx offset aInstrumentatio +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1010FB2  +
cmp dx di +
jz loc_1010FAE  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1010FB2  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_1010F8C  +
xor eax eax +
jmp loc_1010FB7  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_1010FF5  +
push dword ptr [ebp+0Ch]  +
push offset aEventsEvents  +
push dword ptr [ebp-10h]  +
call near ptr dword_100C280+5  +
mov esi eax +
cmp esi edi +
jge loc_1010FEF  +
cmp dword ptr [ebx+34h] 8 +
jb loc_1010FDC  +
mov eax [ebx+20h] +
jmp loc_1010FDF  +
lea eax [ebx+20h] +
push eax  +
push 22h  +
push esi  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
cmp esi edi +
jz loc_101109D  +
mov [ebp+8] edi +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 5 +
call dword ptr [ecx+40h]  +
mov esi eax +
cmp esi edi +
jge loc_101102D  +
cmp dword ptr [ebx+34h] 8 +
jb loc_101101A  +
mov eax [ebx+20h] +
jmp loc_101101D  +
lea eax [ebx+20h] +
push eax  +
push 22h  +
push esi  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
cmp esi edi +
mov ecx [ebp+8] +
jnz loc_101106F  +
cmp ecx edi +
jz loc_101106F  +
mov eax [ebp-10h] +
cmp eax edi +
jz loc_1011049  +
mov [ebp-10h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+8] +
push ecx  +
lea ecx [ebp-10h] +
mov [ebp+8] edi +
call near ptr dword_1010BE4+3  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 4 +
cmp eax edi +
jz loc_1010F44  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1010F44  +
***
mov byte ptr [ebp-4] 4 +
cmp ecx edi +
jz loc_101107D  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
cmp dword ptr [ebx+34h] 8 +
jb loc_1011088  +
mov ebx [ebx+20h] +
jmp loc_101108B  +
add ebx 20h +
push ebx  +
push 22h  +
push 490h  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 3 +
cmp eax edi +
jz loc_10110AE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 0 +
cmp eax edi +
jz loc_10110C8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-2Ch] +
push eax  +
call ds:VariantClear  +
call sub_1002052  +
retn 8  +
***
push dword ptr [ebp-10h]  +
mov byte ptr [ebp-4] 5 +
call sub_1001D39  +
push offset unk_10290E4  +
mov ecx ebx +
call sub_10055EA  +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+14h] +
push eax  +
lea ecx [esi+40h] +
mov [esi+3Ch] edi +
call sub_10024F0  +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+30h] +
push eax  +
lea ecx [esi+5Ch] +
call sub_10024F0  +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+4Ch] +
push eax  +
lea ecx [esi+78h] +
call sub_10024F0  +
push edi  +
push 1  +
lea ecx [ebp+14h] +
call sub_1001B47  +
push edi  +
push 1  +
lea ecx [ebp+30h] +
call sub_1001B47  +
push edi  +
push 1  +
lea ecx [ebp+4Ch] +
call sub_1001B47  +
mov eax esi +
call sub_1002052  +
retn 64h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
mov ecx [esi+8] +
push 2  +
push 2  +
call sub_1001FF5  +
mov ecx [esi+8] +
push offset off_1029660  +
call sub_1002223  +
mov ecx [esi+8] +
push 1  +
call sub_10031F1  +
push eax  +
lea ecx [esi+1Ch] +
call sub_1001DE7  +
mov ecx [esi+8] +
lea eax [ebp-1] +
push eax  +
xor edi edi +
push edi  +
push edi  +
push offset aFromwow64  +
call sub_1002709  +
mov ecx [esi+8] +
mov [esi+8Dh] al +
lea eax [ebp-1] +
push eax  +
push edi  +
push edi  +
push offset aOffline  +
call sub_1002709  +
mov ecx [esi+8] +
mov [esi+8Eh] al +
lea eax [ebp-1] +
push eax  +
mov edi offset dword_1001334 +
push edi  +
push offset aRf  +
push offset aResourcefilepa  +
call sub_1003D75  +
push eax  +
lea ecx [esi+38h] +
call sub_1001DE7  +
mov ecx [esi+8] +
lea eax [ebp-1] +
push eax  +
push edi  +
push offset aMf  +
push offset aMessagefilepat  +
call sub_1003D75  +
push eax  +
lea ecx [esi+54h] +
call sub_1001DE7  +
mov ecx [esi+8] +
lea eax [ebp-1] +
push eax  +
push edi  +
push offset aPf  +
push offset aParameterfilep  +
call sub_1003D75  +
push eax  +
lea ecx [esi+70h] +
call sub_1001DE7  +
pop edi  +
pop esi  +
leave   +
retn   +
***
call ds:GetCommandLineW  +
push eax  +
lea ecx [ebp-4Ch] +
call sub_100159C  +
push offset aFromwow64_0  +
lea ecx [ebp-4Ch] +
mov [ebp-4] esi +
call sub_10046D1  +
xor eax eax +
mov [ebp-140h] esi +
lea edi [ebp-13Ch] +
stos   +
stos   +
stos   +
lea eax [ebp-0ECh] +
push eax  +
call ds:Wow64DisableWow64FsRedirection  +
test eax eax +
jnz loc_1011621  +
call ds:GetLastError  +
mov edi eax +
cmp edi esi +
jnz loc_10115CF  +
mov edi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10115FA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10115FA  +
cmp byte ptr [eax+19h] 2 +
jb loc_10115FA  +
push edi  +
push offset dword_1011D60  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 86h  +
push offset aDW7rtmAdmin_10  +
push edi  +
lea ecx [ebp-238h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-238h] +
push eax  +
call _CxxThrowException  +
push dword ptr [ebp-0ECh]  +
lea eax [ebp-110h] +
push ds:Wow64RevertWow64FsRedirection  +
push eax  +
call sub_1004AE6  +
mov [ebp-12Ch] esi +
mov [ebp-128h] esi +
mov [ebp-124h] esi +
lea eax [ebp-130h] +
push eax  +
push offset aSystemrootSy_0  +
mov byte ptr [ebp-4] 2 +
call sub_1020301  +
push 44h  +
pop edi  +
push edi  +
lea eax [ebp-1B8h] +
push esi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp-1B8h] +
push eax  +
mov [ebp-1B8h] edi +
call ds:GetStartupInfoW  +
cmp dword ptr [ebp-34h] 8 +
push 4  +
pop eax  +
mov [ebp-188h] ax +
mov eax [ebp-48h] +
mov dword ptr [ebp-18Ch] 80h +
jnb loc_10116A7  +
lea eax [ebp-48h] +
lea ecx [ebp-140h] +
push ecx  +
lea ecx [ebp-1B8h] +
push ecx  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push eax  +
push dword ptr [ebp-12Ch]  +
call ds:CreateProcessW  +
test eax eax +
jnz loc_101172E  +
call ds:GetLastError  +
mov edi eax +
cmp edi esi +
jnz loc_10116DD  +
mov edi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1011708  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011708  +
cmp byte ptr [eax+19h] 2 +
jb loc_1011708  +
push edi  +
push offset dword_1011D60  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 9Eh  +
push offset aDW7rtmAdmin_10  +
push edi  +
lea ecx [ebp-218h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-218h] +
jmp loc_101161B  +
***
push dword ptr [ebp-13Ch]  +
mov edi ds:CloseHandle +
push edi  +
lea eax [ebp-174h] +
push eax  +
call sub_1004AE6  +
push dword ptr [ebp-140h]  +
lea eax [ebp-120h] +
push edi  +
push eax  +
call sub_1004AE6  +
push 0FFFFFFFFh  +
push dword ptr [ebp-140h]  +
mov byte ptr [ebp-4] 4 +
call ds:WaitForSingleObject  +
cmp eax 0FFFFFFFFh +
jnz loc_10117D3  +
call ds:GetLastError  +
mov edi eax +
cmp edi esi +
jnz loc_1011782  +
mov edi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10117AD  +
test byte ptr [eax+1Ch] 1 +
jz loc_10117AD  +
cmp byte ptr [eax+19h] 2 +
jb loc_10117AD  +
push edi  +
push offset dword_1011D60  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0A3h  +
push offset aDW7rtmAdmin_10  +
push edi  +
lea ecx [ebp-1F8h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-1F8h] +
jmp loc_101161B  +
***
lea eax [ebp-120h] +
push eax  +
call sub_1003FFD  +
lea eax [ebp-174h] +
push eax  +
call sub_1003FFD  +
lea ecx [ebp-130h] +
call sub_10043CC  +
lea eax [ebp-110h] +
push eax  +
call sub_1003FFD  +
push esi  +
push 1  +
lea ecx [ebp-4Ch] +
call sub_1001B47  +
jmp loc_1011D5A  +
push 1  +
push esi  +
push offset dword_100839C  +
mov byte ptr [ebp-4] 6 +
call ds:CoCreateInstance  +
cmp eax esi +
mov [ebp-0E8h] eax +
jge loc_10118A1  +
cmp dword ptr [ebx+34h] 8 +
jb loc_101188B  +
mov eax [ebx+20h] +
jmp loc_101188E  +
lea eax [ebx+20h] +
push eax  +
push 20h  +
push dword ptr [ebp-0E8h]  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov [ebp-0F8h] esi +
cmp dword ptr [ebx+34h] 8 +
mov byte ptr [ebp-4] 7 +
jb loc_10118B6  +
mov eax [ebx+20h] +
jmp loc_10118B9  +
lea eax [ebx+20h] +
mov edi ds:GetFullPathNameW +
push esi  +
push esi  +
push esi  +
push eax  +
call edi  +
mov [ebp-0E4h] eax +
cmp eax esi +
jbe loc_101195C  +
push eax  +
push esi  +
call ds:SysAllocStringLen  +
mov [ebp-0F8h] eax +
cmp eax esi +
jnz loc_1011938  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1011911  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011911  +
cmp byte ptr [eax+19h] 2 +
jb loc_1011911  +
push 0Eh  +
push offset dword_1011D60  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0C5h  +
push offset aDW7rtmAdmin_10  +
push 0Eh  +
lea ecx [ebp-1D8h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-1D8h] +
jmp loc_101161B  +
***
cmp dword ptr [ebx+34h] 8 +
jb loc_1011943  +
mov eax [ebx+20h] +
jmp loc_1011946  +
lea eax [ebx+20h] +
push esi  +
push dword ptr [ebp-0F8h]  +
push dword ptr [ebp-0E4h]  +
push eax  +
call edi  +
mov [ebp-0E4h] eax +
cmp [ebp-0E4h] esi +
jnz loc_1011985  +
cmp dword ptr [ebx+34h] 8 +
jb loc_101196F  +
mov eax [ebx+20h] +
jmp loc_1011972  +
lea eax [ebx+20h] +
push eax  +
push 20h  +
push dword ptr [ebp-0E8h]  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
push dword ptr [ebp-0F8h]  +
lea ecx [ebp-168h] +
call near ptr dword_100C330+2  +
mov eax [ebp-0F0h] +
mov ecx [eax] +
lea edx [ebp-0FCh] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp-168h] +
movs   +
movs   +
movs   +
push eax  +
mov byte ptr [ebp-4] 8 +
movs   +
call dword ptr [ecx+0E8h]  +
mov esi eax +
xor edi edi +
test esi esi +
jl loc_10119D0  +
cmp [ebp-0FCh] di +
jnz loc_1011A08  +
cmp dword ptr [ebx+34h] 8 +
jb loc_10119DB  +
mov eax [ebx+20h] +
jmp loc_10119DE  +
lea eax [ebx+20h] +
push eax  +
push dword ptr [ebp-0F0h]  +
mov ecx ebx +
call near ptr dword_1010C7C+5  +
cmp dword ptr [ebx+34h] 8 +
jb loc_10119F7  +
mov eax [ebx+20h] +
jmp loc_10119FA  +
lea eax [ebx+20h] +
push eax  +
push 20h  +
push esi  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov [ebp-104h] edi +
lea eax [ebp-104h] +
push eax  +
push dword ptr [ebp-0F0h]  +
mov ecx ebx +
mov byte ptr [ebp-4] 9 +
call near ptr dword_1010D84+5  +
push dword ptr [ebp-104h]  +
lea ecx [ebp-158h] +
call near ptr byte_1010C2C+1  +
push edi  +
sub esp 1Ch +
lea eax [ebx+70h] +
mov ecx esp +
mov [ebp-0ECh] esp +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call sub_10033D6  +
sub esp 1Ch +
lea eax [ebx+54h] +
mov ecx esp +
mov [ebp-0E8h] esp +
push eax  +
mov byte ptr [ebp-4] 0Bh +
call sub_10033D6  +
sub esp 1Ch +
lea eax [ebx+38h] +
mov ecx esp +
mov [ebp-0F4h] esp +
push eax  +
mov byte ptr [ebp-4] 0Ch +
call sub_10033D6  +
cmp byte ptr [ebx+8Eh] 0 +
lea ecx [ebp-0E0h] +
setz al  +
movzx eax al +
push eax  +
push offset aSystem  +
push offset aSoftware  +
mov byte ptr [ebp-4] 0Ah +
call near ptr dword_1011268+81h  +
cmp byte ptr [ebx+8Ch] 0 +
push edi  +
lea eax [ebp-158h] +
mov byte ptr [ebp-4] 0Dh +
lea ecx [ebp-0E0h] +
push eax  +
jz loc_1011CE5  +
mov byte ptr [ebp-4] 0Eh +
call sub_101D304  +
cmp [ebp-0A4h] edi +
jz loc_1011AE8  +
push 3Eh  +
push dword ptr [ebp-0A4h]  +
call sub_100BBF0  +
jmp $+2  +
pop ecx  +
pop ecx  +
mov dword ptr [ebp-4] 0Dh +
lea eax [ebp-0E8h] +
push eax  +
lea ecx [ebp-158h] +
xor edi edi +
call sub_1012050  +
mov [ebp-0E4h] edi +
mov byte ptr [ebp-4] 11h +
mov ecx [ebp-0E8h] +
mov eax [ecx] +
lea edx [ebp-0ECh] +
push edx  +
call dword ptr [eax+4]  +
push dword ptr [eax]  +
lea ecx [ebp-0E4h] +
mov byte ptr [ebp-4] 12h +
call sub_1004E7A  +
mov ecx [ebp-0ECh] +
mov esi [eax] +
mov byte ptr [ebp-4] 11h +
cmp ecx edi +
jz loc_1011B45  +
call sub_1004249  +
mov ecx [ebp-0E4h] +
mov [ebp-0ECh] edi +
cmp esi edi +
jz loc_1011CB7  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx offset aProvider +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_1011BBD  +
cmp dx di +
jz loc_1011B85  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_1011BBD  +
add ecx 4 +
add eax 4 +
cmp dx di +
jnz loc_1011B63  +
xor eax eax +
jmp loc_1011BC2  +
mov esi [ebp-144h] +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+8]  +
push eax  +
call sub_101FFC2  +
push eax  +
mov eax [esi] +
push 42h  +
mov ecx esi +
call dword ptr [eax]  +
push eax  +
call sub_100BC45  +
jmp $+2  +
add esp 0Ch +
mov dword ptr [ebp-4] 0Dh +
mov eax offset loc_1011AEF +
retn   +
***
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_1011B0D  +
mov ecx [ebp-0E4h] +
mov eax [ecx] +
push offset aName  +
lea edx [ebp-0F4h] +
push edx  +
call dword ptr [eax+18h]  +
mov ecx [ebp-0F4h] +
mov byte ptr [ebp-4] 13h +
cmp ecx edi +
jz loc_1011C9F  +
mov eax [ecx] +
call dword ptr [eax+8]  +
push eax  +
lea ecx [ebp-30h] +
call sub_100159C  +
cmp [ebp-1Ch] edi +
jbe loc_1011C8E  +
cmp dword ptr [ebp-18h] 8 +
mov eax [ebp-2Ch] +
jnb loc_1011C16  +
lea eax [ebp-2Ch] +
push edi  +
push edi  +
push edi  +
push eax  +
push edi  +
call EvtOpenPublisherMetadata  +
test eax eax +
jnz loc_1011C8E  +
mov [ebp-110h] edi +
mov [ebp-10Ch] edi +
mov [ebp-108h] edi +
cmp dword ptr [ebp-18h] 8 +
mov eax [ebp-2Ch] +
mov byte ptr [ebp-4] 15h +
jnb loc_1011C46  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-114h] +
push 45h  +
push eax  +
call sub_1020610  +
add esp 0Ch +
push dword ptr [ebp-110h]  +
push offset aS_4  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
push eax  +
call sub_100BC27  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call ds:fflush  +
add esp 10h +
lea ecx [ebp-114h] +
call sub_10043CC  +
push edi  +
push 1  +
lea ecx [ebp-30h] +
call sub_1001B47  +
mov ecx [ebp-0F4h] +
mov byte ptr [ebp-4] 11h +
cmp ecx edi +
jz loc_1011CAC  +
call sub_1004249  +
mov [ebp-0F4h] edi +
jmp loc_1011B0D  +
***
mov byte ptr [ebp-4] 10h +
cmp ecx edi +
jz loc_1011CC4  +
call sub_1004249  +
mov ecx [ebp-0E8h] +
mov [ebp-0E4h] edi +
mov byte ptr [ebp-4] 0Dh +
cmp ecx edi +
jz loc_1011CDD  +
call sub_1004249  +
mov [ebp-0E8h] edi +
jmp loc_1011CEC  +
call sub_101C895  +
xor edi edi +
lea ecx [ebp-0E0h] +
call near ptr dword_1011268+55h  +
lea ecx [ebp-158h] +
mov byte ptr [ebp-4] 9 +
call sub_1011FF9  +
mov eax [ebp-104h] +
mov byte ptr [ebp-4] 8 +
cmp eax edi +
jz loc_1011D1A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-168h] +
push eax  +
call ds:VariantClear  +
push dword ptr [ebp-0F8h]  +
call ds:SysFreeString  +
mov eax [ebp-0F0h] +
mov byte ptr [ebp-4] 5 +
cmp eax edi +
jz loc_1011D47  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp byte ptr [ebp-11Ch] 0 +
jnz loc_1011D5A  +
call dword ptr [ebp-118h]  +
call sub_1004E54  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
or dword ptr [eax+0Ch] 0FFFFFFFFh +
or dword ptr [eax+10h] 0FFFFFFFFh +
or dword ptr [eax+18h] 0FFFFFFFFh +
mov byte ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1004614 +
mov [eax+8] ecx +
mov dword ptr [eax+1Ch] offset dword_1008398 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+8] +
push dword ptr [esi]  +
call ds:SysFreeString  +
and dword ptr [esi] 0 +
mov edi [edi+10h] +
mov eax [edi] +
push esi  +
push edi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jge loc_1011E92  +
push eax  +
lea ecx [ebp+var_20] +
call sub_1011E1D  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
mov eax [esi] +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+0Ch] +
push dword ptr [esi]  +
call ds:SysFreeString  +
and dword ptr [esi] 0 +
mov edi [edi+10h] +
mov eax [edi] +
push esi  +
push edi  +
call dword ptr [eax+68h]  +
test eax eax +
jge loc_1011EDC  +
push eax  +
lea ecx [ebp+var_20] +
call sub_1011E1D  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
mov eax [esi] +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1010C0A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
call sub_1010C0A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov dword ptr [esi] offset off_1004A08 +
lea ecx [esi+8] +
mov dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1011F50 +
call sub_1011EE7  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
test eax eax +
jz loc_1011F6F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov dword ptr [esi] offset off_1004A08 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1011F5D  +
test byte ptr [ebp+8] 1 +
jz loc_1011F96  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1004A08 +
mov dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1011FE8 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
lea eax [ebp+8] +
push eax  +
lea ecx [esi+10h] +
call sub_1011F03  +
mov eax [ebp+8] +
test eax eax +
jz loc_1011FDE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+10h] +
push edi  +
test eax eax +
jz loc_101200C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [esi+0Ch]  +
mov edi ds:SysFreeString +
call edi  +
push dword ptr [esi+8]  +
call edi  +
pop edi  +
mov dword ptr [esi] offset off_1004A08 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1011FF9  +
test byte ptr [ebp+8] 1 +
jz loc_1012044  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003100  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-10h] 0 +
mov eax [ecx+10h] +
mov ecx [eax] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
test eax eax +
jge loc_1012090  +
push eax  +
lea ecx [ebp-30h] +
call sub_1011E1D  +
push offset dword_10263EC  +
lea eax [ebp-30h] +
push eax  +
call _CxxThrowException  +
push 0Ch  +
call sub_1004829  +
pop ecx  +
test eax eax +
jz loc_10120A8  +
push dword ptr [ebp-10h]  +
mov ecx eax +
call sub_1011F21  +
jmp loc_10120AA  +
xor eax eax +
mov ecx [ebp+8] +
push eax  +
call sub_10018C6  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10120C4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
call sub_1002052  +
retn 4  +
***
call sub_1003100  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
mov [ebp-18h] ebx +
mov [ebp-10h] ebx +
mov [ebp-14h] ebx +
mov eax [ecx+10h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 3 +
call dword ptr [ecx+30h]  +
cmp eax ebx +
jge loc_1012120  +
push eax  +
lea ecx [ebp-3Ch] +
call sub_1011E1D  +
push offset dword_10263EC  +
lea eax [ebp-3Ch] +
push eax  +
call _CxxThrowException  +
mov esi ds:SysFreeString +
mov eax [ebp-18h] +
cmp eax ebx +
jz loc_1012136  +
mov [ebp-18h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
cmp eax ebx +
jl loc_1012109  +
jnz loc_10121B9  +
mov eax [ebp-10h] +
cmp eax ebx +
jz loc_1012159  +
mov [ebp-10h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push (offset dword_100839C+10h)  +
push eax  +
call dword ptr [ecx]  +
cmp eax 80004002h +
jz loc_1012126  +
push dword ptr [ebp-14h]  +
call esi  +
mov eax [ebp-10h] +
lea edx [ebp-14h] +
push edx  +
mov [ebp-14h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A4h]  +
cmp eax ebx +
jl loc_1012109  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp+0Ch]  +
call ds:lstrcmpW  +
test eax eax +
jnz loc_1012126  +
push 14h  +
call sub_1004829  +
pop ecx  +
cmp eax ebx +
jz loc_10121F9  +
push dword ptr [ebp-10h]  +
mov ecx eax +
call near ptr byte_1010C2C+1  +
***
jmp loc_10121FB  +
mov edi [ebp+8] +
push dword ptr [ebp-14h]  +
mov [edi] ebx +
call esi  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_10121D4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_10121E4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_10121F5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
jmp loc_101223E  +
xor eax eax +
mov ecx [ebp+8] +
push eax  +
call sub_10018C6  +
push dword ptr [ebp-14h]  +
call esi  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_101221A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_101222A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_101223B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
call sub_1002052  +
retn 8  +
***
call ds:SysFreeString  +
cmp esi ebx +
jge loc_10122AD  +
push esi  +
lea ecx [ebp-34h] +
call sub_1011E1D  +
push offset dword_10263EC  +
lea eax [ebp-34h] +
push eax  +
call _CxxThrowException  +
jz loc_10122C9  +
mov eax [ebp-10h] +
mov esi [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi] ebx +
cmp eax ebx +
jz loc_10122C5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_1012314  +
push 14h  +
call sub_1004829  +
pop ecx  +
mov [ebp+0Ch] eax +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_10122F5  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp-14h] esp +
push eax  +
call sub_1011F03  +
mov ecx [ebp+0Ch] +
call near ptr dword_1011FA0+2  +
jmp loc_10122F7  +
xor eax eax +
mov ecx [ebp+8] +
push eax  +
call sub_10018C6  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1012311  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
call sub_1002052  +
retn 8  +
***
push 28h  +
mov eax offset byte_10241B5 +
call sub_1003100  +
mov edi ecx +
xor ebx ebx +
mov [ebp-14h] ebx +
mov [ebp-14h] ebx +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
mov eax [edi+8] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+24h]  +
cmp eax ebx +
jl loc_1012386  +
mov eax [ebp-10h] +
jnz loc_101239D  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push (offset dword_100839C+10h)  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1012377  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp esi 80004002h +
jz loc_101233A  +
cmp esi ebx +
jge loc_10123C4  +
push esi  +
jmp loc_1012387  +
push eax  +
lea ecx [ebp-34h] +
call sub_1011E1D  +
push offset dword_10263EC  +
lea eax [ebp-34h] +
push eax  +
call _CxxThrowException  +
mov esi [ebp+8] +
mov [esi] ebx +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_10123AF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_10123C0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_10123FB  +
push 14h  +
call sub_1004829  +
pop ecx  +
cmp eax ebx +
jz loc_10123DC  +
push dword ptr [ebp-14h]  +
mov ecx eax +
call near ptr byte_1010C2C+1  +
jmp loc_10123DE  +
xor eax eax +
mov ecx [ebp+8] +
push eax  +
call sub_10018C6  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_10123F8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
call sub_1002052  +
retn 4  +
***
push 24h  +
mov eax offset dword_102420C +
call sub_1003100  +
mov eax ecx +
and dword ptr [ebp-10h] 0 +
mov esi [ebp+8] +
and dword ptr [ebp-10h] 0 +
mov eax [eax+10h] +
mov ecx [eax] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+68h]  +
test eax eax +
jge loc_101244D  +
push eax  +
lea ecx [ebp-30h] +
call sub_1011E1D  +
push offset dword_10263EC  +
lea eax [ebp-30h] +
push eax  +
call _CxxThrowException  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_100159C  +
push dword ptr [ebp-10h]  +
call ds:SysFreeString  +
mov eax esi +
call sub_1002052  +
retn 4  +
***
push 44h  +
mov eax offset dword_10254D8 +
call sub_1003100  +
push offset aStringTooLong  +
lea ecx [ebp-28h] +
call sub_1009A4D  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_100991A  +
push offset dword_1026570  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
push 44h  +
mov eax offset dword_10254D8 +
call sub_1003100  +
push offset aInvalidStringP  +
lea ecx [ebp-28h] +
call sub_1009A4D  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_10098A1  +
push offset dword_1026590  +
lea eax [ebp-50h] +
push eax  +
mov dword ptr [ebp-50h] offset off_1007DC0 +
call _CxxThrowException  +
int 3  +
jmp ds:_purecall  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1012562  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp ds:?what@exception@@UBEPBDXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_1029008 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1004E68  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10125A1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10126F3  +
cmp dword ptr [eax+10h] 3 +
jnz loc_10126F3  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_10126ED  +
cmp eax 19930521h +
jz loc_10126ED  +
cmp eax 19930522h +
jz loc_10126ED  +
cmp eax 1994000h +
jnz loc_10126F3  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_101271F  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_101271B  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1012780  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1012778  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1012782  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1012768  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_100585C  +
and dword ptr [ebp-4] 0 +
mov esi 1000000h +
push esi  +
call sub_1012709  +
pop ecx  +
test eax eax +
jz loc_10127E9  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_1012743  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10127E9  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_10127F2  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_1005764  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1004E68  +
push offset dword_1029008  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1029208 eax +
mov dword_1029204 ecx +
mov dword_1029200 edx +
mov dword_10291FC ebx +
mov dword_10291F8 esi +
mov dword_10291F4 edi +
mov word_1029220 ss +
mov word_1029214 cs +
mov word_10291F0 ds +
mov word_10291EC es +
mov word_10291E8 fs +
mov word_10291E4 gs +
pushf   +
pop dword_1029218  +
mov eax [ebp+0] +
mov dword_102920C eax +
mov eax [ebp+4] +
mov dword_1029210 eax +
lea eax [ebp+8] +
mov dword_102921C eax +
mov eax [ebp-320h] +
mov dword_1029158 10001h +
mov eax dword_1029210 +
mov dword_1029114 eax +
mov dword_1029108 0C0000409h +
mov dword_102910C 1 +
mov eax dword_1029008 +
mov [ebp-328h] eax +
mov eax dword_102900C +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
jmp ds:EvtOpenChannelEnum  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_1012A92  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1012A86  +
sub eax edx +
inc eax  +
jmp loc_1012A95  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_1012AA0  +
mov ecx offset aNull +
push 0  +
push 4  +
lea edx [ebp+arg_18] +
push edx  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1012AE5  +
push eax  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1012AD0  +
mov eax [ebp+arg_0] +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
or dword ptr [eax+18h] 0FFFFFFFFh +
mov [eax+8] ecx +
mov ecx [ebp+arg_4] +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_8] +
mov byte ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1004614 +
mov [eax+10h] ecx +
mov dword ptr [eax+1Ch] offset dword_1008398 +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 2 +
jz loc_1012B56  +
cmp [ebp+arg_0] 3 +
jz loc_1012B56  +
xor eax eax +
jmp loc_1012B59  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push 3AAFh  +
push 57h  +
call sub_1012B0A  +
mov dword ptr [esi] offset off_1004614 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push 3AAFh  +
push [ebp+arg_0]  +
call sub_1012B0A  +
mov dword ptr [esi] offset off_1004614 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_1004A08 +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1012BDC +
mov [eax+8] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call sub_1012AD0  +
mov dword ptr [esi] offset off_1004A08 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 1 +
cmp byte ptr [ecx+8Dh] 0 +
jz loc_1012C1A  +
xor al al +
jmp loc_1012C2E  +
mov ecx [ecx+8] +
push eax  +
push offset aFilemax  +
push ecx  +
call sub_1020A00  +
test al al +
setnz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
cmp byte ptr [ecx+8Dh] 0 +
jz loc_1012C4F  +
xor al al +
jmp loc_1012C63  +
mov ecx [ecx+8] +
push eax  +
push offset aFilecounter  +
push ecx  +
call sub_1020A00  +
test al al +
setnz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+8Dh] 0 +
jz loc_1012C7E  +
xor al al +
jmp loc_1012CA2  +
mov ecx [ecx+8] +
push esi  +
mov esi [ebp+lpData] +
push esi  +
push offset aBuffersize  +
push ecx  +
call sub_1020A00  +
test al al +
jz loc_1012C99  +
mov al 1 +
jmp loc_1012CA1  +
mov dword ptr [esi] 40h +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+8Dh] 0 +
jz loc_1012CBD  +
xor al al +
jmp loc_1012CDE  +
mov ecx [ecx+8] +
push esi  +
mov esi [ebp+lpData] +
push esi  +
push offset aMinbuffers  +
push ecx  +
call sub_1020A00  +
test al al +
jz loc_1012CD8  +
mov al 1 +
jmp loc_1012CDD  +
and dword ptr [esi] 0 +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+8Dh] 0 +
jz loc_1012CF9  +
xor al al +
jmp loc_1012D1D  +
mov ecx [ecx+8] +
push esi  +
mov esi [ebp+lpData] +
push esi  +
push offset aMaxbuffers  +
push ecx  +
call sub_1020A00  +
test al al +
jz loc_1012D14  +
mov al 1 +
jmp loc_1012D1C  +
mov dword ptr [esi] 40h +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+8Dh] 0 +
jz loc_1012D38  +
xor al al +
jmp loc_1012D5C  +
mov ecx [ecx+8] +
push esi  +
mov esi [ebp+lpData] +
push esi  +
push offset aLatency  +
push ecx  +
call sub_1020A00  +
test al al +
jz loc_1012D53  +
mov al 1 +
jmp loc_1012D5B  +
mov dword ptr [esi] 3E8h +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp byte ptr [ecx+8Dh] 0 +
jnz loc_1012D99  +
mov ecx [ecx+8] +
lea eax [ebp+Data] +
push eax  +
push offset aClocktype  +
push ecx  +
call sub_1020A00  +
test al al +
mov eax [ebp+arg_0] +
jz loc_1012D96  +
mov ecx dword ptr [ebp+Data] +
mov [eax] ecx +
mov al 1 +
jmp locret_1012D9B  +
and dword ptr [eax] 0 +
xor al al +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp byte ptr [ecx+8Dh] 0 +
jnz loc_1012DDB  +
mov ecx [ecx+8] +
lea eax [ebp+Data] +
push eax  +
push offset aSidtype  +
push ecx  +
call sub_1020A00  +
test al al +
mov eax [ebp+arg_0] +
jz loc_1012DD5  +
mov ecx dword ptr [ebp+Data] +
mov [eax] ecx +
mov al 1 +
jmp locret_1012DDD  +
mov dword ptr [eax] 1 +
xor al al +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+8Dh] 0 +
jz loc_1012DF8  +
xor al al +
jmp loc_1012E19  +
mov ecx [ecx+8] +
push esi  +
mov esi [ebp+lpData] +
push esi  +
push offset aLevel  +
push ecx  +
call sub_1020A00  +
test al al +
jz loc_1012E13  +
mov al 1 +
jmp loc_1012E18  +
and dword ptr [esi] 0 +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+8Dh] bl +
jz loc_1012E3C  +
xor al al +
jmp loc_1012E90  +
mov eax [esi+8] +
lea ecx [ebp+Data] +
push ecx  +
push offset aKeywordslower  +
push eax  +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_8] ebx +
call sub_1020A00  +
mov [ebp+var_1] al +
lea eax [ebp+var_8] +
push eax  +
push offset aKeywordsupper  +
push dword ptr [esi+8]  +
call sub_1020A00  +
cmp [ebp+var_1] bl +
jz loc_1012E85  +
mov eax dword ptr [ebp+Data] +
mov edx [ebp+var_8] +
xor ecx ecx +
or ecx eax +
mov eax [ebp+arg_0] +
xor esi esi +
or edx esi +
mov [eax] ecx +
mov [eax+4] edx +
jmp loc_1012E8D  +
mov eax [ebp+arg_0] +
mov [eax] ebx +
mov [eax+4] ebx +
mov al [ebp+var_1] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov eax ecx +
push edi  +
push 40h  +
pop edx  +
mov [eax+8] edx +
mov [eax+10h] edx +
xor ecx ecx +
xor edx edx +
mov dword ptr [eax] offset off_10085F0 +
mov [eax+4] cl +
mov [eax+0Ch] ecx +
mov dword ptr [eax+14h] 3E8h +
inc edx  +
mov [eax+18h] edx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] edx +
mov [eax+28h] ecx +
mov [eax+30h] ecx +
mov [eax+34h] ecx +
lea edi [eax+38h] +
mov esi offset dword_1008988 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
push esi  +
push edi  +
push [ebp+arg_4]  +
xor eax eax +
xor ecx ecx +
mov [ebx+1Ch] eax +
mov [ebx+28h] eax +
mov [ebx+30h] eax +
mov [ebx+34h] eax +
inc ecx  +
cmp [ebp+arg_8] ecx +
mov [ebx+18h] ecx +
mov dword ptr [ebx] offset off_10085F0 +
lea edi [ebx+38h] +
mov esi offset dword_1008988 +
movs   +
movs   +
movs   +
setz al  +
movs   +
mov [ebx+4] al +
call sub_1012B41  +
test al al +
jz loc_1012F52  +
xor eax eax +
mov dword ptr [ebx+8] 4 +
mov [ebx+0Ch] eax +
mov dword ptr [ebx+10h] 0Ah +
mov [ebx+20h] eax +
mov [ebx+24h] eax +
mov dword ptr [ebx+14h] 1388h +
jmp loc_1012FA7  +
mov esi ds:_wcsicmp +
push offset aSystem  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1012F83  +
push offset aSecurity  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1012F83  +
push 40h  +
pop eax  +
mov [ebx+8] eax +
mov [ebx+10h] eax +
jmp loc_1012F91  +
mov dword ptr [ebx+8] 40h +
mov dword ptr [ebx+10h] 10h +
and dword ptr [ebx+0Ch] 0 +
and dword ptr [ebx+20h] 0 +
mov dword ptr [ebx+24h] 1 +
mov dword ptr [ebx+14h] 3E8h +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov al [ecx+4] +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test byte ptr [eax+ecx+0D0h] 3 +
jnz loc_1012FE0  +
xor eax eax +
jmp loc_1012FE3  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push offset aI64i1s  +
push [ebp+arg_0]  +
call ds:swscanf  +
add esp 10h +
cmp eax 1 +
jz loc_1013061  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1013042  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013042  +
cmp byte ptr [eax+19h] 2 +
jb loc_1013042  +
push 57h  +
push offset dword_1008514  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 47h  +
push offset aDW7rtmAdminW_0  +
push 57h  +
lea ecx [ebp+var_28] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_28] +
push eax  +
call _CxxThrowException  +
mov eax [ebp+var_8] +
mov edx [ebp+var_4] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push offset aI1s  +
push [ebp+arg_0]  +
call ds:swscanf  +
add esp 10h +
cmp eax 1 +
jz loc_10130F4  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10130D5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10130D5  +
cmp byte ptr [eax+19h] 2 +
jb loc_10130D5  +
push 57h  +
push offset dword_1008514  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 51h  +
push offset aDW7rtmAdminW_0  +
push 57h  +
lea ecx [ebp+var_24] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_24] +
push eax  +
call _CxxThrowException  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1013194  +
cmp word ptr [edi] 0 +
jz loc_1013194  +
mov esi ds:_wcsicmp +
push offset aSystemtime  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1013194  +
push offset aQpc  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1013149  +
inc eax  +
jmp loc_1013196  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1013175  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013175  +
cmp byte ptr [eax+19h] 2 +
jb loc_1013175  +
push 57h  +
push offset dword_1008514  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 5Ch  +
push offset aDW7rtmAdminW_0  +
push 57h  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1013246  +
cmp word ptr [edi] 0 +
jz loc_1013246  +
mov esi ds:_wcsicmp +
push offset aNone  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1013246  +
push offset aPublishing  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10131FB  +
inc eax  +
jmp loc_1013248  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1013227  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013227  +
cmp byte ptr [eax+19h] 2 +
jb loc_1013227  +
push 57h  +
push offset dword_1008514  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 66h  +
push offset aDW7rtmAdminW_0  +
push 57h  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push off_10296AC[esi*8]  +
push [ebp+arg_0]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101328A  +
inc esi  +
cmp esi 3 +
jl loc_1013267  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
lea eax off_10296AC[esi*8] +
jmp loc_1013285  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jz loc_10132AA  +
mov eax offset aOBagSydA0xf000 +
jmp loc_10132BA  +
cmp [ebp+arg_0] 1 +
mov eax offset aOBagSydA0xf0_0 +
jz loc_10132BA  +
mov eax offset aOBagSydA0xf0_1 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
push [ebp+arg_0]  +
lea edi [esi+8] +
mov ecx edi +
call sub_1012AEC  +
lea eax [esi+0Ch] +
push eax  +
push offset aSelectors  +
push dword ptr [edi]  +
call sub_10212DB  +
add esi 1Ch +
push esi  +
push offset aSuppressors  +
push dword ptr [edi]  +
call sub_10212DB  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
add ecx 8 +
call sub_10214C3  +
mov esi eax +
test esi esi +
jz loc_10133F5  +
cmp esi 103h +
jz loc_10133F1  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10133D0  +
test byte ptr [eax+1Ch] 1 +
jz loc_10133D0  +
cmp byte ptr [eax+19h] 2 +
jb loc_10133D0  +
push esi  +
push offset dword_1008514  +
push 62h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0A87h  +
push offset aDW7rtmAdminW_0  +
push esi  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
xor al al +
jmp loc_10133F7  +
mov al 1 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
add ecx 8 +
call sub_1021285  +
mov esi eax +
test esi esi +
jz loc_101346E  +
cmp esi 103h +
jz loc_101346A  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1013449  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013449  +
cmp byte ptr [eax+19h] 2 +
jb loc_1013449  +
push esi  +
push offset dword_1008514  +
push 63h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0A99h  +
push offset aDW7rtmAdminW_0  +
push esi  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
xor al al +
jmp loc_1013470  +
mov al 1 +
pop esi  +
leave   +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_1013482  +
xor eax eax +
retn   +
mov eax [ecx+8] +
sub eax edx +
push 28h  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_101349D  +
xor eax eax +
retn   +
mov eax [ecx+0Ch] +
sub eax edx +
push 28h  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+45h] 0 +
jnz loc_10134CA  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_10134DE  +
mov [ecx+4] eax +
jmp loc_10134ED  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_10134EB  +
mov [ecx+8] eax +
jmp loc_10134ED  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1013508  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+29h] 0 +
jz loc_1013506  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1013526  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+29h] 0 +
jz loc_1013524  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1013543  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+45h] 0 +
jz loc_1013541  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1013561  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+45h] 0 +
jz loc_101355F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+45h] dl +
jz loc_101358F  +
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_101267A  +
add esp 14h +
pop esi  +
retn   +
mov ecx [eax+8] +
cmp [ecx+45h] dl +
jnz loc_10135A8  +
push ecx  +
call sub_1013555  +
jmp loc_10135B0  +
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_10135B0  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+45h] dl +
jz loc_101359F  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+29h] dl +
jz loc_10135D6  +
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_101267A  +
add esp 14h +
pop esi  +
retn   +
mov ecx [eax+8] +
cmp [ecx+29h] dl +
jnz loc_10135EF  +
push ecx  +
call sub_101351A  +
jmp loc_10135F7  +
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_10135F7  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+29h] dl +
jz loc_10135E6  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_101365F  +
cmp ecx 7FFFFFFFh +
jbe loc_1013664  +
mov eax 80070057h +
test eax eax +
jl loc_10136AF  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_101369F  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_101369A  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_101369A  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1013682  +
pop edi  +
test esi esi +
jnz loc_10136A6  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+8] +
sub esp 20h +
push esi  +
push [ebp+lpValueName]  +
push ecx  +
call ds:RegDeleteValueW  +
mov esi eax +
test esi esi +
jnz loc_10136DB  +
mov al 1 +
pop esi  +
leave   +
retn 4  +
cmp esi 2 +
jnz loc_10136E4  +
xor al al +
jmp loc_10136D6  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1013719  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013719  +
cmp byte ptr [eax+19h] 2 +
jb loc_1013719  +
push esi  +
push 186h  +
push offset aDW7rtmAdminW_1  +
push offset dword_1008504  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1012A74  +
push esi  +
lea ecx [ebp+var_20] +
call sub_1011E1D  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1012BE5  +
test byte ptr [ebp+lpValueName] 1 +
jz loc_1013750  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
cmp byte ptr [esi+8Dh] 0 +
jz loc_101377A  +
mov eax [ebp+lpData] +
and dword ptr [eax] 0 +
mov al 1 +
jmp loc_10137F8  +
mov eax [esi+8] +
push edi  +
mov edi [ebp+lpData] +
push edi  +
push offset aType  +
push eax  +
call sub_1020A00  +
cmp al 1 +
jnz loc_10137E4  +
cmp dword ptr [edi] 3 +
jle loc_10137F7  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10137CC  +
test byte ptr [eax+1Ch] 1 +
jz loc_10137CC  +
cmp byte ptr [eax+19h] 2 +
jb loc_10137CC  +
push 0Dh  +
push 35Ch  +
push offset aDW7rtmAdminW_1  +
push offset dword_1008504  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1012A74  +
push 0Dh  +
lea ecx [ebp+var_20] +
call sub_1011E1D  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
test al al +
jnz loc_10137F7  +
cmp dword ptr [esi+0Ch] 1 +
jnz loc_10137F5  +
and dword ptr [edi] 0 +
inc al  +
jmp loc_10137F7  +
xor al al +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+Data] +
push eax  +
mov dword ptr [ebp+Data] 1 +
call sub_101375C  +
mov eax dword ptr [ebp+Data] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
mov eax dword_1029008 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+StringUuid] +
cmp word ptr [eax] 7Bh +
push esi  +
mov esi [ebp+Uuid] +
jz loc_101389C  +
push esi  +
push eax  +
call ds:UuidFromStringW  +
mov esi eax +
test esi esi +
jz loc_10138F1  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101387E  +
test byte ptr [eax+1Ch] 1 +
jz loc_101387E  +
cmp byte ptr [eax+19h] 2 +
jb loc_101387E  +
push esi  +
push offset dword_1008514  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 36h  +
push offset aDW7rtmAdminW_0  +
push esi  +
lea ecx [ebp+var_74] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_74] +
push eax  +
call _CxxThrowException  +
add eax 2 +
push eax  +
push 28h  +
lea eax [ebp+var_54] +
push eax  +
call sub_1013649  +
xor eax eax +
mov [ebp+var_C] ax +
push esi  +
lea eax [ebp+var_54] +
push eax  +
call ds:UuidFromStringW  +
mov esi eax +
test esi esi +
jz loc_10138F1  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10138ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10138ED  +
cmp byte ptr [eax+19h] 2 +
jb loc_10138ED  +
push esi  +
push offset dword_1008514  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 3Dh  +
jmp loc_1013880  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1004E68  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1008CE1  +
mov dword ptr [esi] offset off_1004614 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+Uuid]  +
push dword ptr [ecx+20h]  +
call sub_1013822  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+29h] 0 +
jnz loc_101396A  +
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp [ecx+10h] edx +
jge loc_1013960  +
mov ecx [ecx+8] +
jmp loc_1013964  +
mov eax ecx +
mov ecx [ecx] +
cmp byte ptr [ecx+29h] 0 +
jz loc_1013956  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+45h] 0 +
jnz loc_101398F  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_10139A3  +
mov [ecx+4] eax +
jmp loc_10139B1  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_10139AE  +
mov [ecx] eax +
jmp loc_10139B1  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+29h] 0 +
jnz loc_10139DB  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_10139EF  +
mov [ecx+4] eax +
jmp loc_10139FD  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_10139FA  +
mov [ecx] eax +
jmp loc_10139FD  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+29h] 0 +
jnz loc_1013A27  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1013A3B  +
mov [ecx+4] eax +
jmp loc_1013A4A  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_1013A48  +
mov [ecx+8] eax +
jmp loc_1013A4A  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+4Ch] 0 +
jnz loc_1013A65  +
mov eax offset aEventlog +
retn   +
cmp dword ptr [ecx+50h] 8 +
jb loc_1013A6F  +
mov eax [ecx+3Ch] +
retn   +
lea eax [ecx+3Ch] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+48h] 8 +
push edi  +
jb loc_1013AA2  +
mov eax [esi+34h] +
jmp loc_1013AA5  +
lea eax [esi+34h] +
mov edi ds:_wcsicmp +
push offset aSystem  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1013AC1  +
mov ecx [ebp+arg_0] +
inc eax  +
mov [ecx] eax +
jmp loc_1013B19  +
cmp byte ptr [esi+8Dh] 0 +
jz loc_1013AF4  +
cmp dword ptr [esi+48h] 8 +
jb loc_1013AD5  +
mov esi [esi+34h] +
jmp loc_1013AD8  +
add esi 34h +
push offset aSecurity  +
push esi  +
call edi  +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFEh +
pop ecx  +
inc eax  +
pop ecx  +
mov ecx [ebp+arg_0] +
inc eax  +
mov [ecx] eax +
mov al 1 +
jmp loc_1013B19  +
mov esi [esi+8] +
lea eax [ebp+Data] +
push eax  +
push offset aIsolation  +
push esi  +
call sub_1020A00  +
test al al +
mov eax [ebp+arg_0] +
jz loc_1013B14  +
mov ecx dword ptr [ebp+Data] +
mov [eax] ecx +
jmp loc_1013AF0  +
and dword ptr [eax] 0 +
xor al al +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_1013A8D  +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+1Ch] +
call sub_1001B47  +
push 0  +
push 1  +
mov ecx esi +
call sub_1001B47  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+29h] 0 +
mov ebx ecx +
mov esi edi +
jnz loc_1013B94  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_1013B64  +
mov esi [esi] +
push edi  +
call sub_1001B90  +
cmp byte ptr [esi+29h] 0 +
pop ecx  +
mov edi esi +
jz loc_1013B79  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_1004946  +
cmp eax ebx +
jz loc_1013BB3  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_1013BBC  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_1013BC5  +
mov [ecx] ebx +
mov [eax+29h] bl +
mov byte ptr [eax+28h] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_10039B9  +
lea edi [ebx+1Ch] +
mov esi offset dword_1008988 +
movs   +
movs   +
movs   +
lea ecx [ebx+2Ch] +
movs   +
call sub_10039B9  +
pop edi  +
pop esi  +
mov byte ptr [ebx+48h] 0 +
mov eax ebx +
pop ebx  +
retn   +
***
call sub_10021E6  +
mov edi [ebp+8] +
mov esi ecx +
cmp byte ptr [esi+8Dh] 0 +
jz loc_1013C26  +
xor al al +
call sub_1002043  +
retn 4  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
mov esi [esi+8] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
push offset aOwningpublishe  +
push esi  +
call sub_102165D  +
test al al +
jnz loc_1013C5A  +
xor bl bl +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
mov al bl +
jmp loc_1013C1E  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1013C66  +
lea eax [ebp-28h] +
push edi  +
push eax  +
call sub_1013822  +
mov bl 1 +
jmp loc_1013C4A  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+30h] +
call sub_1004EA6  +
push 0  +
push 1  +
lea ecx [esi+14h] +
call sub_1001B47  +
call sub_1002052  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1004A08 +
mov dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
lea ecx [esi+1Ch] +
mov dword ptr [esi] offset off_10086A8 +
call sub_10039B9  +
lea ecx [esi+38h] +
call sub_10039B9  +
lea ecx [esi+54h] +
call sub_10039B9  +
and dword ptr [esi+74h] 0 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
push 0  +
push 1  +
lea ecx [esi+30h] +
call sub_1001B47  +
lea ecx [esi+8] +
call sub_10211C5  +
mov dword ptr [esi] offset off_1004A08 +
call sub_1002052  +
retn   +
***
call sub_10021E6  +
mov edi [ebp+8] +
mov esi ecx +
cmp byte ptr [esi+8Dh] 0 +
jz loc_1013D49  +
xor al al +
call sub_1002043  +
retn 4  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
mov esi [esi+8] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
push offset aControlguid  +
push esi  +
call sub_102165D  +
test al al +
jnz loc_1013D7D  +
xor bl bl +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
mov al bl +
jmp loc_1013D41  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1013D89  +
lea eax [ebp-28h] +
push edi  +
push eax  +
call sub_1013822  +
mov bl 1 +
jmp loc_1013D6D  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+8] +
call sub_1013C76  +
mov dword ptr [esi] offset off_1004A08 +
call sub_1002052  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+2Ch] +
call sub_1001B47  +
push 0  +
push 1  +
mov ecx esi +
call sub_1001B47  +
pop esi  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+48h] +
call sub_1013C76  +
lea ecx [esi+80h] +
call sub_1013DC7  +
call sub_1002052  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+74h] +
mov dword ptr [esi] offset off_10086A8 +
test eax eax +
jz loc_1013E35  +
push eax  +
call nullsub_1  +
push 0  +
push 1  +
lea ecx [esi+54h] +
call sub_1001B47  +
push 0  +
push 1  +
lea ecx [esi+38h] +
call sub_1001B47  +
push 0  +
push 1  +
lea ecx [esi+1Ch] +
call sub_1001B47  +
mov ecx esi +
pop esi  +
jmp sub_1012BE5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
cmp byte ptr [edi+0A5h] 0 +
jnz loc_1013E84  +
mov ecx [edi+98h] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_1013EBC  +
push esi  +
mov esi [edi+94h] +
jmp loc_1013EAE  +
cmp dword ptr [esi+18h] 8 +
jb loc_1013E98  +
mov eax [esi+4] +
jmp loc_1013E9B  +
lea eax [esi+4] +
push [ebp+arg_4]  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1013EB6  +
add esi 28h +
cmp esi [edi+98h] +
jnz loc_1013E8D  +
mov eax [ebp+arg_0] +
mov [eax] esi +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_1013B64  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_1013940  +
mov esi [esi+4] +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_1013F2B  +
mov ecx [edi] +
cmp ecx [eax+10h] +
jl loc_1013F2B  +
lea eax [ebp+arg_4] +
jmp loc_1013F31  +
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1013BA0  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+29h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_1013B41  +
test [ebp+arg_0] 1 +
jz loc_1013F8C  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+20h] +
call sub_1013F02  +
mov eax [ebp+var_4] +
cmp eax [esi+24h] +
pop esi  +
jz loc_1013FBF  +
add eax 18h +
jmp locret_1013FC1  +
xor eax eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp dword ptr [esi+0Ch] 1 +
mov dword ptr [ebp+Data] ebx +
jz loc_101402C  +
cmp [esi+8Dh] bl +
jnz loc_101402C  +
cmp [esi+8Ch] bl +
jz loc_1014008  +
push ebx  +
lea ecx [esi+4Ch] +
call sub_1013F98  +
cmp eax ebx +
jz loc_1014008  +
cmp [eax] ebx +
mov ecx [ebp+arg_0] +
setnz al  +
mov [ecx] al +
jmp loc_1014032  +
mov esi [esi+8] +
lea eax [ebp+Data] +
push eax  +
push offset aEnabled  +
push esi  +
call sub_1020A00  +
test al al +
jz loc_1014023  +
cmp dword ptr [ebp+Data] ebx +
jmp loc_1013FFE  +
mov eax [ebp+arg_0] +
mov [eax] bl +
xor al al +
jmp loc_1014034  +
mov eax [ebp+arg_0] +
mov byte ptr [eax] 1 +
mov al 1 +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 1 +
jz loc_10140A1  +
xor ebx ebx +
cmp [esi+8Dh] bl +
jnz loc_10140A1  +
mov dword ptr [ebp+Data] ebx +
cmp [esi+8Ch] bl +
jz loc_101407D  +
push ebx  +
lea ecx [esi+4Ch] +
call sub_1013F98  +
cmp eax ebx +
jz loc_101407D  +
cmp [eax] ebx +
mov ecx [ebp+arg_0] +
setnz al  +
mov [ecx] al +
jmp loc_10140A7  +
mov esi [esi+8] +
lea eax [ebp+Data] +
push eax  +
push offset aEnabled  +
push esi  +
call sub_1020A00  +
test al al +
jz loc_1014098  +
cmp dword ptr [ebp+Data] ebx +
jmp loc_1014073  +
mov eax [ebp+arg_0] +
mov [eax] bl +
xor al al +
jmp loc_10140A9  +
mov eax [ebp+arg_0] +
mov byte ptr [eax] 1 +
mov al 1 +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push edi  +
mov edi ecx +
xor ebx ebx +
cmp [edi+8Dh] bl +
jz loc_10140D1  +
xor al al +
jmp loc_101418A  +
push esi  +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_1] bl +
cmp [edi+8Ch] bl +
jz loc_101410F  +
push 8  +
lea ecx [edi+4Ch] +
call sub_1013F98  +
cmp eax ebx +
jz loc_101410F  +
push ebx  +
push 400h  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_1005936  +
mov esi [ebp+arg_0] +
mov [esi] eax +
mov [esi+4] edx +
mov [ebp+var_1] 1 +
jmp loc_101416E  +
mov eax [edi+8] +
lea ecx [ebp+Data] +
push ecx  +
push offset aMaxsize  +
push eax  +
call sub_1020A00  +
mov esi [ebp+arg_0] +
cmp al 1 +
jnz loc_1014134  +
mov eax dword ptr [ebp+Data] +
mov [ebp+var_1] 1 +
mov [esi] eax +
mov [esi+4] ebx +
mov edi [edi+8] +
lea eax [ebp+var_C] +
push eax  +
push offset aMaxsizeupper  +
push edi  +
call sub_1020A00  +
cmp al 1 +
jnz loc_1014160  +
mov edx dword ptr [ebp+Data] +
mov ecx [ebp+var_C] +
mov [ebp+var_1] al +
xor eax eax +
xor edi edi +
or eax edx +
or ecx edi +
mov [esi] eax +
mov [esi+4] ecx +
cmp [ebp+var_1] bl +
jnz loc_101416E  +
mov dword ptr [esi] 101000h +
mov [esi+4] ebx +
cmp [esi+4] ebx +
ja loc_1014186  +
jb loc_101417D  +
cmp dword ptr [esi] 101000h +
jnb loc_1014186  +
mov dword ptr [esi] 101000h +
mov [esi+4] ebx +
mov al [ebp+var_1] +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp byte ptr [esi+8Dh] 0 +
jnz loc_1014207  +
and dword ptr [ebp+Data] 0 +
cmp byte ptr [esi+8Ch] 0 +
jz loc_10141D1  +
push 6  +
lea ecx [esi+4Ch] +
call sub_1013F98  +
test eax eax +
jz loc_10141D1  +
cmp dword ptr [eax] 0 +
setnz al  +
mov ecx [ebp+arg_0] +
mov [ecx] al +
mov al 1 +
jmp loc_1014209  +
mov eax [esi+8] +
lea ecx [ebp+Data] +
push ecx  +
push offset aRetention  +
push eax  +
call sub_1020A00  +
test al al +
jz loc_10141F0  +
cmp dword ptr [ebp+Data] 0FFFFFFFFh +
setz al  +
jmp loc_10141C8  +
mov ecx esi +
call sub_1013802  +
push eax  +
call sub_1012B41  +
mov ecx [ebp+arg_0] +
test al al +
setnz al  +
mov [ecx] al +
xor al al +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+8Dh] bl +
jnz loc_101426E  +
mov dword ptr [ebp+Data] ebx +
cmp [esi+8Ch] bl +
jz loc_101424E  +
push 7  +
lea ecx [esi+4Ch] +
call sub_1013F98  +
cmp eax ebx +
jz loc_101424E  +
cmp [eax] ebx +
mov ecx [ebp+arg_0] +
setnz al  +
mov [ecx] al +
mov al 1 +
jmp loc_1014270  +
mov esi [esi+8] +
lea eax [ebp+Data] +
push eax  +
push offset aAutobackuplogf  +
push esi  +
call sub_1020A00  +
test al al +
jz loc_1014269  +
cmp dword ptr [ebp+Data] ebx +
jmp loc_1014242  +
mov eax [ebp+arg_0] +
mov [eax] bl +
xor al al +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1004A08 +
mov dword ptr [esi+4] 0 +
mov edi [ebp+8] +
and dword ptr [ebp-4] 0 +
cmp dword ptr [edi+48h] 8 +
mov eax [edi+0Ch] +
jb loc_10142AE  +
mov ecx [edi+34h] +
jmp loc_10142B1  +
lea ecx [edi+34h] +
mov [ebp+8] ecx +
push eax  +
mov ecx edi +
lea ebx [esi+8] +
call sub_1013802  +
push eax  +
push dword ptr [ebp+8]  +
mov ecx ebx +
call sub_1012EEB  +
lea eax [esi+0Ch] +
push eax  +
mov ecx edi +
mov dword ptr [esi] offset off_1004A08 +
mov dword ptr [ebx] offset off_10085F0 +
call sub_1013FCA  +
lea eax [esi+20h] +
push eax  +
mov ecx edi +
call sub_1012BFF  +
lea eax [esi+24h] +
push eax  +
mov ecx edi +
call sub_1012C37  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_1012C6C  +
test al al +
jz loc_1014310  +
mov eax [ebp-10h] +
test eax eax +
jz loc_1014310  +
mov [esi+10h] eax +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_1012CAB  +
test al al +
jz loc_1014329  +
mov eax [ebp-10h] +
test eax eax +
jz loc_1014329  +
mov [esi+14h] eax +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_1012CE7  +
test al al +
jz loc_1014342  +
mov eax [ebp-10h] +
test eax eax +
jz loc_1014342  +
mov [esi+18h] eax +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_1012D26  +
test al al +
jz loc_101435E  +
mov eax [ebp-10h] +
cmp eax 3E8h +
jbe loc_101435E  +
mov [esi+1Ch] eax +
lea eax [esi+28h] +
push eax  +
mov ecx edi +
call sub_1012D65  +
cmp dword ptr [edi+48h] 8 +
jb loc_1014374  +
mov eax [edi+34h] +
jmp loc_1014377  +
lea eax [edi+34h] +
push eax  +
call sub_101325F  +
xor ebx ebx +
inc ebx  +
test eax eax +
jz loc_1014389  +
mov [esi+2Ch] ebx +
jmp loc_1014394  +
lea eax [esi+2Ch] +
push eax  +
mov ecx edi +
call sub_1012DA4  +
lea eax [esi+30h] +
push eax  +
mov ecx edi +
call sub_1012DE6  +
mov ecx edi +
call sub_1013802  +
cmp eax ebx +
jz loc_10143B9  +
test eax eax +
jz loc_10143B9  +
lea eax [esi+38h] +
push eax  +
mov ecx edi +
call sub_1012E22  +
lea eax [esi+40h] +
push eax  +
mov ecx edi +
call sub_1013D25  +
mov eax esi +
call sub_1002052  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1013E1D  +
test byte ptr [ebp+8] 1 +
jz loc_10143ED  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
cmp dword ptr [edi+48h] 8 +
jb loc_1014411  +
mov eax [edi+34h] +
jmp loc_1014414  +
lea eax [edi+34h] +
push eax  +
call sub_101325F  +
test eax eax +
setnz [ebp+var_2]  +
xor ebx ebx +
cmp dword ptr [edi+0Ch] 1 +
jnz loc_1014431  +
mov [ebp+var_3] 1 +
cmp [ebp+var_2] bl +
jz loc_1014434  +
mov [ebp+var_3] bl +
mov esi [edi+158h] +
push esi  +
call sub_1012B41  +
lea ecx [edi+90h] +
push 4  +
mov [ebp+var_4] al +
call sub_1012FCA  +
test al al +
jz loc_10144AA  +
push 4  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B9FD  +
lea eax [ebp+var_2C] +
push eax  +
lea ecx [ebp+var_4C] +
call sub_1013905  +
push offset dword_101529C  +
lea eax [ebp+var_4C] +
push eax  +
call _CxxThrowException  +
push 3  +
lea ecx [edi+90h] +
call sub_1012FCA  +
test al al +
jz loc_10144EE  +
push 3  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 1Eh  +
jmp loc_1014485  +
push 2  +
lea ecx [edi+90h] +
call sub_1012FCA  +
test al al +
jz loc_1014603  +
cmp [ebp+var_2] bl +
jnz loc_10145C1  +
cmp [ebp+var_3] bl +
jnz loc_10145C1  +
cmp [ebp+arg_0] bl +
jz loc_101457F  +
cmp esi ebx +
jz loc_1014603  +
cmp esi 1 +
jz loc_1014603  +
cmp esi 2 +
jz loc_1014603  +
cmp esi 3 +
jz loc_1014603  +
push 2  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 20h  +
jmp loc_1014485  +
push 2  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 21h  +
jmp loc_1014485  +
push 2  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 1Fh  +
jmp loc_1014485  +
lea eax [ebp-1] +
push eax  +
mov ecx edi +
call sub_101403F  +
lea esi [edi+90h] +
push ebx  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_1014673  +
cmp [ebp+var_2] bl +
jnz loc_1014632  +
cmp [ebp+var_3] bl +
jnz loc_1014632  +
mov al [edi+0DCh] +
jmp loc_1014676  +
push ebx  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 22h  +
jmp loc_1014485  +
mov al [ebp+var_1] +
cmp [ebp+arg_0] bl +
jnz loc_101468D  +
cmp [ebp+var_4] bl +
jz loc_101468D  +
cmp [ebp+var_1] bl +
jz loc_101468D  +
mov [ebp+var_1] 1 +
cmp al bl +
jnz loc_1014690  +
mov [ebp+var_1] bl +
push 1  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_10147A1  +
cmp [ebp+var_2] bl +
jnz loc_101475F  +
cmp [ebp+var_3] bl +
jnz loc_101475F  +
mov eax [edi+15Ch] +
cmp eax ebx +
jz loc_1014709  +
cmp eax 1 +
jz loc_1014709  +
cmp eax 2 +
jz loc_1014709  +
push 1  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 24h  +
jmp loc_1014485  +
cmp [ebp+var_1] bl +
jz loc_10147A1  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_1014742  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014742  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014742  +
push esi  +
push offset dword_1008514  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 37Eh  +
push offset aDW7rtmAdminW_0  +
push esi  +
lea ecx [ebp+var_4C] +
call sub_1008C61  +
push offset dword_10263EC  +
jmp loc_10144A1  +
push 1  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 23h  +
jmp loc_1014485  +
push 5  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_101487D  +
cmp [edi+150h] ebx +
jbe loc_101483E  +
lea eax [edi+13Ch] +
cmp dword ptr [eax+18h] 8 +
mov [ebp+hMem] ebx +
mov [ebp+var_C] ebx +
jb loc_10147D5  +
mov eax [eax+4] +
jmp loc_10147D8  +
add eax 4 +
lea ecx [ebp+var_C] +
push ecx  +
lea ecx [ebp+hMem] +
push ecx  +
push 1  +
push eax  +
call ConvertStringSecurityDescriptorToSecurityDescriptorW  +
test eax eax +
jnz loc_1014835  +
push 5  +
call ds:GetLastError  +
push eax  +
lea ecx [ebp+var_2C] +
call sub_1012B8B  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 26h  +
jmp loc_1014485  +
push [ebp+hMem]  +
call ds:LocalFree  +
cmp [ebp+var_1] bl +
jz loc_101487D  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_1014873  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014873  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014873  +
push esi  +
push offset dword_1008514  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 3A4h  +
jmp loc_1014747  +
push 6  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_1014979  +
cmp [ebp+arg_0] bl +
jz loc_10148DF  +
cmp [ebp+var_2] bl +
jnz loc_101489D  +
cmp [ebp+var_3] bl +
jz loc_10148DF  +
push 6  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 28h  +
jmp loc_1014485  +
cmp [edi+0E8h] bl +
jz loc_10148F0  +
test byte ptr [edi+166h] 2 +
jz loc_101493A  +
cmp [edi+0E9h] bl +
jz loc_101493A  +
push 6  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 29h  +
jmp loc_1014485  +
cmp [ebp+var_1] bl +
jz loc_1014979  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_101496F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101496F  +
cmp byte ptr [eax+19h] 2 +
jb loc_101496F  +
push esi  +
push offset dword_1008514  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 3BEh  +
jmp loc_1014747  +
push 7  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_1014A32  +
cmp [ebp+arg_0] bl +
jz loc_1014999  +
cmp [ebp+var_2] bl +
jnz loc_101499E  +
cmp [ebp+var_3] bl +
jnz loc_101499E  +
cmp [ebp+var_4] bl +
jz loc_10149E0  +
push 7  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 2Bh  +
jmp loc_1014485  +
cmp [edi+0E8h] bl +
jnz loc_1014A32  +
cmp [edi+0E9h] bl +
jz loc_1014A32  +
push 7  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 2Ch  +
jmp loc_1014485  +
push 8  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_1014AD3  +
cmp [ebp+arg_0] bl +
jz loc_1014A94  +
cmp [ebp+var_2] bl +
jnz loc_1014A52  +
cmp [ebp+var_3] bl +
jz loc_1014A94  +
push 8  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 2Dh  +
jmp loc_1014485  +
cmp [ebp+var_1] bl +
jz loc_1014AD3  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_1014AC9  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014AC9  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014AC9  +
push esi  +
push offset dword_1008514  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 3E3h  +
jmp loc_1014747  +
push 9  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_1014B74  +
cmp [ebp+arg_0] bl +
jz loc_1014B35  +
cmp [ebp+var_2] bl +
jnz loc_1014AF3  +
cmp [ebp+var_3] bl +
jz loc_1014B35  +
push 9  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 2Fh  +
jmp loc_1014485  +
cmp [ebp+var_1] bl +
jz loc_1014B74  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_1014B6A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014B6A  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014B6A  +
push esi  +
push offset dword_1008514  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 3F7h  +
jmp loc_1014747  +
test byte ptr [edi+174h] 1 +
jz loc_1014C6C  +
cmp [ebp+var_2] bl +
jnz loc_1014C2A  +
cmp [ebp+var_3] bl +
jnz loc_1014C2A  +
cmp [ebp+var_4] bl +
jz loc_1014C2A  +
cmp [ebp+var_1] bl +
jz loc_1014BDB  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_1014BD1  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014BD1  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014BD1  +
push esi  +
push offset dword_1008514  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 408h  +
jmp loc_1014747  +
cmp dword ptr [edi+0A8h] 10h +
jbe loc_1014C6C  +
push 14h  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 33h  +
jmp loc_1014485  +
push 14h  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 31h  +
jmp loc_1014485  +
push 0Ah  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_1014D0D  +
cmp [ebp+var_2] bl +
jnz loc_1014CCB  +
cmp [ebp+var_3] bl +
jnz loc_1014CCB  +
cmp [ebp+var_4] bl +
jz loc_1014CCB  +
cmp [ebp+var_1] bl +
jz loc_1014D0D  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_1014CC1  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014CC1  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014CC1  +
push esi  +
push offset dword_1008514  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 41Eh  +
jmp loc_1014747  +
push 0Ah  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 34h  +
jmp loc_1014485  +
push 0Bh  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_1014DAE  +
cmp [ebp+var_2] bl +
jnz loc_1014D6C  +
cmp [ebp+var_3] bl +
jnz loc_1014D6C  +
cmp [ebp+var_4] bl +
jz loc_1014D6C  +
cmp [ebp+var_1] bl +
jz loc_1014DAE  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_1014D62  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014D62  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014D62  +
push esi  +
push offset dword_1008514  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 42Fh  +
jmp loc_1014747  +
push 0Bh  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 36h  +
jmp loc_1014485  +
push 0Ch  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_1014E4E  +
cmp [ebp+arg_0] bl +
jz loc_1014E0C  +
cmp dword ptr [edi+158h] 3 +
jnz loc_1014E0C  +
cmp [ebp+var_1] bl +
jz loc_1014E4E  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_1014E02  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014E02  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014E02  +
push esi  +
push offset dword_1008514  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 440h  +
jmp loc_1014747  +
push 0Ch  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 38h  +
jmp loc_1014485  +
push 0Dh  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_1014EE5  +
cmp [ebp+var_4] bl +
jnz loc_1014EA6  +
push 0Dh  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 3Ah  +
jmp loc_1014485  +
cmp [ebp+var_1] bl +
jz loc_1014EE5  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_1014EDB  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014EDB  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014EDB  +
push esi  +
push offset dword_1008514  +
push 3Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 451h  +
jmp loc_1014747  +
push 0Eh  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_1014F7C  +
cmp [ebp+var_4] bl +
jnz loc_1014F3D  +
push 0Eh  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 3Ch  +
jmp loc_1014485  +
cmp [ebp+var_1] bl +
jz loc_1014F7C  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_1014F72  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014F72  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014F72  +
push esi  +
push offset dword_1008514  +
push 3Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 462h  +
jmp loc_1014747  +
push 0Fh  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_1015013  +
cmp [ebp+var_4] bl +
jnz loc_1014FD4  +
push 0Fh  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 3Eh  +
jmp loc_1014485  +
cmp [ebp+var_1] bl +
jz loc_1015013  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_1015009  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015009  +
cmp byte ptr [eax+19h] 2 +
jb loc_1015009  +
push esi  +
push offset dword_1008514  +
push 3Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 473h  +
jmp loc_1014747  +
push 10h  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_10150AA  +
cmp [ebp+var_4] bl +
jnz loc_101506B  +
push 10h  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 40h  +
jmp loc_1014485  +
cmp [ebp+var_1] bl +
jz loc_10150AA  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_10150A0  +
test byte ptr [eax+1Ch] 1 +
jz loc_10150A0  +
cmp byte ptr [eax+19h] 2 +
jb loc_10150A0  +
push esi  +
push offset dword_1008514  +
push 41h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 484h  +
jmp loc_1014747  +
push 11h  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_1015192  +
cmp [ebp+var_4] bl +
jnz loc_1015102  +
push 11h  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 42h  +
jmp loc_1014485  +
mov eax [edi+0B0h] +
cmp eax ebx +
jz loc_1015153  +
cmp eax 1 +
jz loc_1015153  +
push 11h  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 43h  +
jmp loc_1014485  +
cmp [ebp+var_1] bl +
jz loc_1015192  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_1015188  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015188  +
cmp byte ptr [eax+19h] 2 +
jb loc_1015188  +
push esi  +
push offset dword_1008514  +
push 44h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 49Bh  +
jmp loc_1014747  +
push 12h  +
mov ecx esi +
call sub_1012FCA  +
test al al +
jz loc_101527A  +
cmp [ebp+var_4] bl +
jnz loc_10151EA  +
push 12h  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 45h  +
jmp loc_1014485  +
mov eax [edi+0B4h] +
cmp eax ebx +
jz loc_101523B  +
cmp eax 1 +
jz loc_101523B  +
push 12h  +
lea ecx [ebp+var_2C] +
call sub_1012B62  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1014490  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014490  +
cmp byte ptr [eax+19h] 2 +
jb loc_1014490  +
push [ebp+var_24]  +
push offset aChannelconfige  +
push offset dword_1008514  +
push 46h  +
jmp loc_1014485  +
cmp [ebp+var_1] bl +
jz loc_101527A  +
mov eax off_1029004 +
mov esi 3AAEh +
cmp eax offset off_1029004 +
jz loc_1015270  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015270  +
cmp byte ptr [eax+19h] 2 +
jb loc_1015270  +
push esi  +
push offset dword_1008514  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 4B2h  +
jmp loc_1014747  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+14h] +
cmp edi eax +
ja loc_10152DD  +
cmp [esi+18h] eax +
jz loc_10152DD  +
push 1  +
push eax  +
call sub_1001BB8  +
test al al +
jz loc_10152DD  +
push edi  +
mov ecx esi +
call sub_1001A79  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1013F6F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10043F2  +
and dword ptr [esi+1Ch] 0 +
lea ecx [esi+20h] +
call sub_1013ED5  +
lea ecx [esi+2Ch] +
mov eax [ecx] +
push 0  +
call dword ptr [eax+10h]  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_10033D6  +
mov eax [edi+1Ch] +
mov [esi+1Ch] eax +
mov eax [edi+20h] +
mov [esi+20h] eax +
mov eax [edi+24h] +
mov [esi+24h] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003100  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-2Ch] +
call sub_10033D6  +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
push 1  +
mov ecx eax +
call sub_100FD47  +
mov ecx [ebp+8] +
push eax  +
call sub_10033D6  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
mov eax [ebp+8] +
call sub_1002052  +
retn   +
***
call sub_1003100  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10153CB  +
push dword ptr [ebp+0Ch]  +
call sub_1015327  +
call sub_1002052  +
retn 8  +
***
push 20h  +
mov eax offset dword_1024264 +
call sub_10021E6  +
mov esi ecx +
cmp dword ptr [esi+4Ch] 2 +
jz loc_1015437  +
push 5Ch  +
lea eax [esi+30h] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_1015358  +
add esp 0Ch +
and dword ptr [ebp-4] 0 +
push offset aChannels_2  +
lea ecx [ebp-2Ch] +
call sub_10046D1  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101541B  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [esi+2Ch]  +
lea ecx [esi+8] +
call sub_1020E0A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
mov ecx esi +
call sub_1013386  +
test al al +
jz loc_101544D  +
mov dword ptr [esi+4Ch] 2 +
mov al 1 +
jmp loc_101544F  +
xor al al +
call sub_1002043  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push 30h  +
call sub_10152B1  +
push dword ptr [esi+20h]  +
mov ecx [ebp+arg_0] +
call sub_10046D1  +
pop esi  +
pop ebp  +
retn 4  +
***
push 44h  +
mov eax offset dword_10254D8 +
call sub_1003100  +
push offset aInvalidVectorT  +
lea ecx [ebp-28h] +
call sub_1009A4D  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_10098A1  +
push offset dword_1026590  +
lea eax [ebp-50h] +
push eax  +
mov dword ptr [ebp-50h] offset off_1007DC0 +
call _CxxThrowException  +
int 3  +
nop   +
call sub_1003100  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+29h] 0 +
jz loc_101555F  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_1009A4D  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_10098A1  +
push offset dword_1026590  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_1007DC0 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_10135B9  +
mov edx [edi] +
cmp byte ptr [edx+29h] 0 +
jz loc_1015574  +
mov ebx [edi+8] +
jmp loc_101558D  +
mov eax [edi+8] +
cmp byte ptr [eax+29h] 0 +
jz loc_1015581  +
mov ebx edx +
jmp loc_101558D  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_10155F6  +
cmp byte ptr [ebx+29h] 0 +
mov esi [edi+4] +
jnz loc_1015599  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_10155A9  +
mov [eax+4] ebx +
jmp loc_10155B4  +
cmp [esi] edi +
jnz loc_10155B1  +
mov [esi] ebx +
jmp loc_10155B4  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_10155D3  +
cmp byte ptr [ebx+29h] 0 +
jz loc_10155C5  +
mov eax esi +
jmp loc_10155CE  +
push ebx  +
call sub_101351A  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_1015652  +
cmp byte ptr [ebx+29h] 0 +
jz loc_10155E5  +
mov eax esi +
jmp loc_10155EE  +
push ebx  +
call sub_10134FC  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_1015652  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_1015606  +
mov esi eax +
jmp loc_101561F  +
cmp byte ptr [ebx+29h] 0 +
mov esi [eax+4] +
jnz loc_1015612  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_101562F  +
mov [ecx+4] eax +
jmp loc_101563D  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101563A  +
mov [ecx] eax +
jmp loc_101563D  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+28h] +
mov dl [edi+28h] +
mov [eax+28h] dl +
mov [edi+28h] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+28h] 1 +
jz loc_1015716  +
jmp loc_101575B  +
cmp byte ptr [ebx+28h] 1 +
jnz loc_1015757  +
mov eax [esi] +
cmp ebx eax +
jnz loc_10156DD  +
mov eax [esi+8] +
cmp byte ptr [eax+28h] 0 +
jnz loc_101568E  +
mov byte ptr [eax+28h] 1 +
push esi  +
mov byte ptr [esi+28h] 0 +
call sub_10139BF  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+29h] 0 +
jnz loc_1015711  +
mov edx [eax] +
cmp byte ptr [edx+28h] 1 +
jnz loc_10156A5  +
mov edx [eax+8] +
cmp byte ptr [edx+28h] 1 +
jz loc_101570D  +
mov edx [eax+8] +
cmp byte ptr [edx+28h] 1 +
jnz loc_10156C4  +
mov edx [eax] +
mov byte ptr [edx+28h] 1 +
push eax  +
mov byte ptr [eax+28h] 0 +
call sub_1013A0B  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+28h] +
mov [eax+28h] dl +
mov byte ptr [esi+28h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+28h] 1 +
call sub_10139BF  +
jmp loc_1015757  +
cmp byte ptr [eax+28h] 0 +
jnz loc_10156F6  +
mov byte ptr [eax+28h] 1 +
push esi  +
mov byte ptr [esi+28h] 0 +
call sub_1013A0B  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+29h] 0 +
jnz loc_1015711  +
mov edx [eax+8] +
cmp byte ptr [edx+28h] 1 +
jnz loc_1015723  +
mov edx [eax] +
cmp byte ptr [edx+28h] 1 +
jnz loc_1015723  +
mov byte ptr [eax+28h] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_1015757  +
jmp loc_1015661  +
mov edx [eax] +
cmp byte ptr [edx+28h] 1 +
jnz loc_1015741  +
mov edx [eax+8] +
mov byte ptr [edx+28h] 1 +
push eax  +
mov byte ptr [eax+28h] 0 +
call sub_10139BF  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+28h] +
mov [eax+28h] dl +
mov byte ptr [esi+28h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+28h] 1 +
call sub_1013A0B  +
mov byte ptr [ebx+28h] 1 +
push edi  +
call sub_1001B90  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_1015770  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1002052  +
retn 8  +
***
call sub_1003100  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+45h] 0 +
jz loc_10157CF  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_1009A4D  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_10098A1  +
push offset dword_1026590  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_1007DC0 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_1013572  +
mov edx [edi] +
cmp byte ptr [edx+45h] 0 +
jz loc_10157E4  +
mov ebx [edi+8] +
jmp loc_10157FD  +
mov eax [edi+8] +
cmp byte ptr [eax+45h] 0 +
jz loc_10157F1  +
mov ebx edx +
jmp loc_10157FD  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_1015866  +
cmp byte ptr [ebx+45h] 0 +
mov esi [edi+4] +
jnz loc_1015809  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_1015819  +
mov [eax+4] ebx +
jmp loc_1015824  +
cmp [esi] edi +
jnz loc_1015821  +
mov [esi] ebx +
jmp loc_1015824  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_1015843  +
cmp byte ptr [ebx+45h] 0 +
jz loc_1015835  +
mov eax esi +
jmp loc_101583E  +
push ebx  +
call sub_1013555  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_10158C2  +
cmp byte ptr [ebx+45h] 0 +
jz loc_1015855  +
mov eax esi +
jmp loc_101585E  +
push ebx  +
call sub_1013537  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_10158C2  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_1015876  +
mov esi eax +
jmp loc_101588F  +
cmp byte ptr [ebx+45h] 0 +
mov esi [eax+4] +
jnz loc_1015882  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_101589F  +
mov [ecx+4] eax +
jmp loc_10158AD  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_10158AA  +
mov [ecx] eax +
jmp loc_10158AD  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+44h] +
mov dl [edi+44h] +
mov [eax+44h] dl +
mov [edi+44h] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+44h] 1 +
jz loc_1015986  +
jmp loc_10159CB  +
cmp byte ptr [ebx+44h] 1 +
jnz loc_10159C7  +
mov eax [esi] +
cmp ebx eax +
jnz loc_101594D  +
mov eax [esi+8] +
cmp byte ptr [eax+44h] 0 +
jnz loc_10158FE  +
mov byte ptr [eax+44h] 1 +
push esi  +
mov byte ptr [esi+44h] 0 +
call sub_1013973  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+45h] 0 +
jnz loc_1015981  +
mov edx [eax] +
cmp byte ptr [edx+44h] 1 +
jnz loc_1015915  +
mov edx [eax+8] +
cmp byte ptr [edx+44h] 1 +
jz loc_101597D  +
mov edx [eax+8] +
cmp byte ptr [edx+44h] 1 +
jnz loc_1015934  +
mov edx [eax] +
mov byte ptr [edx+44h] 1 +
push eax  +
mov byte ptr [eax+44h] 0 +
call sub_10134AE  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+44h] +
mov [eax+44h] dl +
mov byte ptr [esi+44h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+44h] 1 +
call sub_1013973  +
jmp loc_10159C7  +
cmp byte ptr [eax+44h] 0 +
jnz loc_1015966  +
mov byte ptr [eax+44h] 1 +
push esi  +
mov byte ptr [esi+44h] 0 +
call sub_10134AE  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+45h] 0 +
jnz loc_1015981  +
mov edx [eax+8] +
cmp byte ptr [edx+44h] 1 +
jnz loc_1015993  +
mov edx [eax] +
cmp byte ptr [edx+44h] 1 +
jnz loc_1015993  +
mov byte ptr [eax+44h] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_10159C7  +
jmp loc_10158D1  +
mov edx [eax] +
cmp byte ptr [edx+44h] 1 +
jnz loc_10159B1  +
mov edx [eax+8] +
mov byte ptr [edx+44h] 1 +
push eax  +
mov byte ptr [eax+44h] 0 +
call sub_1013973  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+44h] +
mov [eax+44h] dl +
mov byte ptr [esi+44h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+44h] 1 +
call sub_10134AE  +
mov byte ptr [ebx+44h] 1 +
push edi  +
call sub_10152E8  +
push edi  +
call sub_1001B90  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_10159E6  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1002052  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_10055EA  +
mov eax [edi+1Ch] +
mov [esi+1Ch] eax +
mov eax [edi+20h] +
mov [esi+20h] eax +
mov eax [edi+24h] +
mov [esi+24h] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
jmp loc_1015A44  +
push esi  +
call sub_10159FB  +
add [ebp+arg_C] 28h +
add esi 28h +
mov ecx [ebp+arg_C] +
cmp esi [ebp+arg_8] +
jnz loc_1015A37  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_1015A6D  +
push esi  +
call sub_1004B37  +
add esi 28h +
cmp esi [ebp+arg_4] +
jnz loc_1015A64  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] esi +
jz loc_1015A9F  +
sub [ebp+arg_8] 28h +
mov ecx [ebp+arg_8] +
sub esi 28h +
push esi  +
call sub_10159FB  +
cmp esi [ebp+arg_0] +
jnz loc_1015A8A  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
call sub_10053E2  +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov esi [ebp+8] +
mov [ebp-14h] eax +
cmp esi [ebp+0Ch] +
jz loc_1015AF6  +
push esi  +
push dword ptr [ebp+10h]  +
call sub_10153A6  +
add dword ptr [ebp+10h] 28h +
add esi 28h +
jmp loc_1015AC3  +
mov esi [ebp-14h] +
jmp loc_1015AE8  +
push esi  +
call sub_1004B37  +
add esi 28h +
cmp esi [ebp+10h] +
jnz loc_1015ADF  +
push 0  +
push 0  +
call _CxxThrowException  +
mov eax [ebp+10h] +
call sub_1002052  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 54h +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_10055EA  +
mov ecx [ebp+arg_0] +
push offset aPublishers  +
call sub_10046D1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
lea eax [esi+1Ch] +
push eax  +
call sub_10055EA  +
cmp byte ptr [esi+70h] 0 +
mov ecx [ebp+arg_0] +
pop esi  +
jz loc_1015B6A  +
push offset aControlset001S  +
jmp loc_1015B6F  +
push offset aCurrentcontrol  +
call sub_10046D1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_4] +
lea eax [esi+1Ch] +
push eax  +
mov ecx edi +
call sub_10055EA  +
cmp byte ptr [esi+70h] 0 +
mov ecx edi +
jz loc_1015C35  +
push offset aControlset00_0  +
jmp loc_1015C3A  +
push offset aCurrentcontr_0  +
call sub_10046D1  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_10046D1  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp byte ptr [esi+8Dh] 0 +
jz loc_1015D02  +
xor al al +
jmp loc_1015D90  +
cmp byte ptr [esi+8Ch] 0 +
jz loc_1015D2A  +
push 5  +
lea ecx [esi+4Ch] +
call sub_1013F98  +
test eax eax +
jz loc_1015D2A  +
push dword ptr [eax+8]  +
mov ecx [ebp+arg_0] +
push dword ptr [eax]  +
call sub_1001E14  +
mov al 1 +
jmp loc_1015D90  +
cmp dword ptr [esi+0Ch] 1 +
mov eax [esi+8] +
push ebx  +
push [ebp+arg_0]  +
jnz loc_1015D3E  +
push offset aCustomsd  +
jmp loc_1015D43  +
push offset aChannelaccess  +
push eax  +
call sub_102165D  +
mov bl al +
test bl bl +
jnz loc_1015D8D  +
cmp dword ptr [esi+48h] 8 +
jb loc_1015D5A  +
mov eax [esi+34h] +
jmp loc_1015D5D  +
lea eax [esi+34h] +
push eax  +
push offset aSecurity  +
call ds:_wcsicmp  +
neg eax  +
sbb al al +
pop ecx  +
inc al  +
pop ecx  +
mov byte ptr [ebp+var_4] al +
push [ebp+var_4]  +
mov ecx esi +
call sub_1013B24  +
push eax  +
call sub_1013298  +
mov ecx [ebp+arg_0] +
push eax  +
call sub_1001DE7  +
mov al bl +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
call sub_1003100  +
mov ebx ecx +
mov [ebp-10h] ebx +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
lea edi [ebx+1Ch] +
mov esi offset dword_1008988 +
movs   +
movs   +
movs   +
push offset aOBagSydA0xf0_1  +
lea ecx [ebx+2Ch] +
movs   +
call sub_100159C  +
and dword ptr [ebx+4Ch] 0 +
mov dword ptr [ebx+48h] 1 +
mov eax ebx +
call sub_1002052  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1004A08 +
mov dword ptr [esi+4] 0 +
push dword ptr [ebp+0Ch]  +
mov edi [ebp+8] +
and dword ptr [ebp-4] 0 +
push edi  +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_100876C +
call sub_1021400  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+30h] +
mov byte ptr [ebp-4] 1 +
mov [esi+2Ch] edi +
call sub_100159C  +
mov eax esi +
call sub_1002052  +
retn 8  +
***
add ecx 8 +
jmp sub_1020F21  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1013CEB  +
test byte ptr [ebp+8] 1 +
jz loc_1015E64  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003100  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
call ds:UuidToStringW  +
mov esi eax +
test esi esi +
jz loc_1015EDC  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1015EBE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015EBE  +
cmp byte ptr [eax+19h] 2 +
jb loc_1015EBE  +
push esi  +
push offset dword_1008514  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 26h  +
push offset aDW7rtmAdminW_0  +
push esi  +
lea ecx [ebp-3Ch] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-3Ch] +
push eax  +
call _CxxThrowException  +
lea eax [ebp-10h] +
push eax  +
push ds:RpcStringFreeW  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1004AE6  +
mov eax [ebp-10h] +
and dword ptr [ebp-4] 0 +
cmp word ptr [eax] 7Bh +
mov ecx [ebp+0Ch] +
jnz loc_1015F07  +
push eax  +
call sub_1001DE7  +
jmp loc_1015F29  +
push offset dword_1015F40  +
call sub_1001DE7  +
push dword ptr [ebp-10h]  +
mov ecx [ebp+0Ch] +
call sub_10046D1  +
mov ecx [ebp+0Ch] +
push offset dword_1015F3C  +
call sub_10046D1  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1003FFD  +
call sub_1002052  +
retn 8  +
***
call sub_10021E6  +
mov edi [ebp+8] +
mov esi [ebp+0Ch] +
mov ebx [ebp+10h] +
mov ecx offset unk_1029090 +
call sub_1013A59  +
push eax  +
mov ecx esi +
call sub_1001DE7  +
push edi  +
mov ecx esi +
call sub_10046D1  +
xor edi edi +
cmp [esi+14h] edi +
jbe loc_1015FAF  +
push edi  +
mov ecx esi +
call sub_1021029  +
cmp word ptr [eax] 2Fh +
jz loc_1015F9B  +
push edi  +
mov ecx esi +
call sub_1021029  +
cmp word ptr [eax] 5Ch +
jnz loc_1015FA9  +
push edi  +
mov ecx esi +
call sub_1021029  +
push 2Dh  +
pop ecx  +
mov [eax] cx +
inc edi  +
cmp edi [esi+14h] +
jb loc_1015F7F  +
push esi  +
lea ecx [ebp-2Ch] +
call sub_10033D6  +
xor esi esi +
mov [ebp-4] esi +
cmp [ebp-18h] esi +
jbe loc_1015FEB  +
push esi  +
lea ecx [ebp-2Ch] +
call sub_1021029  +
movzx eax word ptr [eax] +
push eax  +
call ds:towupper  +
pop ecx  +
push esi  +
lea ecx [ebp-2Ch] +
mov di ax +
call sub_1021029  +
inc esi  +
mov [eax] di +
cmp esi [ebp-18h] +
jb loc_1015FC2  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1015FF7  +
lea eax [ebp-28h] +
mov ecx [ebp-18h] +
push ebx  +
add ecx ecx +
push ecx  +
push eax  +
call sub_1021856  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
call sub_1002043  +
retn 0Ch  +
***
call sub_10021E6  +
cmp byte_1029704 0 +
mov ebx [ebp+10h] +
mov esi [ebp+8] +
mov ecx ebx +
jz loc_1016041  +
push offset a_  +
jmp loc_1016046  +
push offset aSystemrootSyst  +
call sub_1001DE7  +
push esi  +
lea ecx [ebp-2Ch] +
call sub_100159C  +
xor eax eax +
mov [ebp-4] eax +
mov [ebp-30h] eax +
cmp [ebp-18h] eax +
jbe loc_10160BC  +
mov edi offset a? +
push dword ptr [ebp-30h]  +
lea ecx [ebp-2Ch] +
call sub_1021029  +
movzx eax word ptr [eax] +
push eax  +
push edi  +
call ds:wcschr  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jnz loc_1016095  +
push dword ptr [ebp-30h]  +
lea ecx [ebp-2Ch] +
call sub_1021029  +
movzx eax word ptr [eax] +
push eax  +
jmp loc_10160A8  +
push 25h  +
push 1  +
mov ecx ebx +
call sub_100FD47  +
sub esi edi +
sar esi 1 +
add esi 30h +
push esi  +
push 1  +
mov ecx ebx +
call sub_100FD47  +
inc dword ptr [ebp-30h]  +
mov eax [ebp-30h] +
cmp eax [ebp-18h] +
jb loc_1016066  +
push dword ptr [ebp+0Ch]  +
call sub_1012B41  +
mov ecx ebx +
test al al +
jz loc_10160D1  +
push offset a_etl  +
jmp loc_10160D6  +
push offset a_evtx  +
call sub_10046D1  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
call sub_1002043  +
retn 0Ch  +
***
call sub_10021E6  +
mov esi ecx +
mov al [esi+175h] +
test al 2 +
jz loc_101619A  +
push offset aOwningpublishe  +
call sub_10136B8  +
jmp loc_10161DC  +
test al 1 +
jz loc_10161DC  +
lea ecx [ebp-48h] +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-48h] +
push eax  +
lea eax [esi+12Ch] +
push eax  +
call sub_1015E70  +
mov eax [esi+8] +
lea ecx [ebp-48h] +
push ecx  +
push offset aOwningpublishe  +
push eax  +
call sub_102104B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0  +
push 1  +
lea ecx [ebp-48h] +
call sub_1001B47  +
mov al [esi+174h] +
mov edi offset aFilemax +
mov ebx offset aFilecounter +
test al 2 +
jz loc_1016202  +
push edi  +
mov ecx esi +
call sub_10136B8  +
push ebx  +
mov ecx esi +
call sub_10136B8  +
jmp loc_1016217  +
test al 1 +
jz loc_1016217  +
mov eax [esi+0A8h] +
mov ecx [esi+8] +
push eax  +
push edi  +
push ecx  +
call sub_1020B9A  +
mov eax [esi+8] +
lea ecx [ebp-8Ch] +
push ecx  +
push edi  +
push eax  +
call sub_1020A00  +
push dword ptr [esi+158h]  +
mov [ebp-75h] al +
call sub_1012B41  +
test al al +
jz loc_101629C  +
cmp byte ptr [ebp-75h] 0 +
jz loc_101629C  +
lea eax [ebp-75h] +
push eax  +
mov ecx esi +
call sub_101403F  +
cmp byte ptr [ebp-75h] 0 +
mov al [esi+0DCh] +
jnz loc_101625B  +
cmp al 1 +
jz loc_1016267  +
cmp byte ptr [ebp-75h] 1 +
jnz loc_101629C  +
cmp byte ptr [ebp+8] 0 +
jz loc_101629C  +
mov eax [esi+8] +
and dword ptr [ebp-7Ch] 0 +
lea ecx [ebp-7Ch] +
push ecx  +
push ebx  +
push eax  +
call sub_1020A00  +
test al al +
jz loc_1016288  +
mov eax [ebp-7Ch] +
cmp eax [ebp-8Ch] +
jb loc_101628C  +
and dword ptr [ebp-7Ch] 0 +
inc dword ptr [ebp-7Ch]  +
push dword ptr [ebp-7Ch]  +
mov eax [esi+8] +
push ebx  +
push eax  +
call sub_1020B9A  +
mov al [esi+160h] +
test al 2 +
jz loc_10162B4  +
push offset aEnabled  +
mov ecx esi +
call sub_10136B8  +
jmp loc_10162D2  +
test al 1 +
jz loc_10162D2  +
mov eax [esi+8] +
xor ecx ecx +
cmp [esi+94h] cl +
setnz cl  +
push ecx  +
push offset aEnabled  +
push eax  +
call sub_1020B9A  +
mov al [esi+161h] +
test al 2 +
jz loc_10162EA  +
push offset aIsolation  +
mov ecx esi +
call sub_10136B8  +
jmp loc_1016303  +
test al 1 +
jz loc_1016303  +
mov eax [esi+15Ch] +
mov ecx [esi+8] +
push eax  +
push offset aIsolation  +
push ecx  +
call sub_1020B9A  +
mov al [esi+165h] +
test al 2 +
jnz loc_1016342  +
and al 1 +
jz loc_101631A  +
cmp dword ptr [esi+150h] 0 +
jz loc_1016342  +
test al al +
jz loc_101635B  +
cmp dword ptr [esi+0Ch] 1 +
mov eax [esi+8] +
lea ecx [esi+13Ch] +
push ecx  +
jnz loc_1016335  +
push offset aCustomsd  +
jmp loc_101633A  +
push offset aChannelaccess  +
push eax  +
call sub_102104B  +
jmp loc_101635B  +
cmp dword ptr [esi+0Ch] 1 +
mov ecx esi +
jnz loc_1016351  +
push offset aCustomsd  +
jmp loc_1016356  +
push offset aChannelaccess  +
call sub_10136B8  +
mov al [esi+168h] +
test al 2 +
jz loc_101637F  +
push offset aMaxsize  +
mov ecx esi +
call sub_10136B8  +
push offset aMaxsizeupper  +
mov ecx esi +
call sub_10136B8  +
jmp loc_10163B5  +
test al 1 +
jz loc_10163B5  +
mov ecx [esi+8] +
lea edi [esi+0E0h] +
mov eax [edi] +
push eax  +
push offset aMaxsize  +
push ecx  +
call sub_1020B9A  +
mov eax [edi] +
mov edx [edi+4] +
mov cl 20h +
call sub_100596A  +
mov ecx [esi+8] +
push eax  +
push offset aMaxsizeupper  +
push ecx  +
call sub_1020B9A  +
mov eax [esi+8] +
and dword ptr [ebp-84h] 0 +
lea ecx [ebp-84h] +
push ecx  +
mov edi offset aFlags +
push edi  +
push eax  +
call sub_1020A00  +
mov bl al +
mov al [esi+169h] +
test al 2 +
jz loc_10163FF  +
push offset aFile  +
mov ecx esi +
call sub_10136B8  +
test bl bl +
jz loc_1016432  +
cmp dword ptr [esi+0Ch] 1 +
jnz loc_1016432  +
mov eax [ebp-84h] +
and eax 0FFFFFFFEh +
jmp loc_1016427  +
test al 1 +
jz loc_1016432  +
mov eax [esi+8] +
lea ecx [esi+0ECh] +
push ecx  +
push offset aFile  +
push eax  +
call sub_10210DA  +
cmp dword ptr [esi+0Ch] 1 +
jnz loc_1016432  +
mov eax [ebp-84h] +
or eax 1 +
mov ecx [esi+8] +
push eax  +
push edi  +
push ecx  +
call sub_1020B9A  +
mov al [esi+166h] +
test al 2 +
jz loc_101644A  +
push offset aRetention  +
mov ecx esi +
call sub_10136B8  +
jmp loc_1016469  +
test al 1 +
jz loc_1016469  +
mov eax [esi+8] +
xor ecx ecx +
cmp [esi+0E8h] cl +
setz cl  +
dec ecx  +
push ecx  +
push offset aRetention  +
push eax  +
call sub_1020B9A  +
mov al [esi+167h] +
test al 2 +
jz loc_1016481  +
push offset aAutobackuplogf  +
mov ecx esi +
call sub_10136B8  +
jmp loc_101649B  +
test al 1 +
jz loc_101649B  +
movzx eax byte ptr [esi+0E9h] +
mov ecx [esi+8] +
push eax  +
push offset aAutobackuplogf  +
push ecx  +
call sub_1020B9A  +
mov al [esi+162h] +
test al 2 +
jz loc_10164B3  +
push offset aType  +
mov ecx esi +
call sub_10136B8  +
jmp loc_10164CC  +
test al 1 +
jz loc_10164CC  +
mov eax [esi+158h] +
mov ecx [esi+8] +
push eax  +
push offset aType  +
push ecx  +
call sub_1020B9A  +
lea edi [esi+16Dh] +
test byte ptr [edi] 2 +
mov ebx offset aBuffersize +
jz loc_10164E4  +
push ebx  +
mov ecx esi +
call sub_10136B8  +
test byte ptr [edi] 1 +
jz loc_10164FA  +
mov eax [esi+98h] +
mov ecx [esi+8] +
push eax  +
push ebx  +
push ecx  +
call sub_1020B9A  +
lea edi [esi+16Eh] +
test byte ptr [edi] 2 +
mov ebx offset aMinbuffers +
jz loc_1016512  +
push ebx  +
mov ecx esi +
call sub_10136B8  +
test byte ptr [edi] 1 +
jz loc_1016528  +
mov eax [esi+9Ch] +
mov ecx [esi+8] +
push eax  +
push ebx  +
push ecx  +
call sub_1020B9A  +
lea edi [esi+16Fh] +
test byte ptr [edi] 2 +
mov ebx offset aMaxbuffers +
jz loc_1016540  +
push ebx  +
mov ecx esi +
call sub_10136B8  +
test byte ptr [edi] 1 +
jz loc_1016556  +
mov eax [esi+0A0h] +
mov ecx [esi+8] +
push eax  +
push ebx  +
push ecx  +
call sub_1020B9A  +
lea edi [esi+170h] +
test byte ptr [edi] 2 +
mov ebx offset aLatency +
jz loc_101656E  +
push ebx  +
mov ecx esi +
call sub_10136B8  +
test byte ptr [edi] 1 +
jz loc_1016584  +
mov eax [esi+0A4h] +
mov ecx [esi+8] +
push eax  +
push ebx  +
push ecx  +
call sub_1020B9A  +
lea edi [esi+171h] +
test byte ptr [edi] 2 +
mov ebx offset aClocktype +
jz loc_101659C  +
push ebx  +
mov ecx esi +
call sub_10136B8  +
test byte ptr [edi] 1 +
jz loc_10165B2  +
mov eax [esi+0B0h] +
mov ecx [esi+8] +
push eax  +
push ebx  +
push ecx  +
call sub_1020B9A  +
lea edi [esi+172h] +
test byte ptr [edi] 2 +
mov ebx offset aSidtype +
jz loc_10165CA  +
push ebx  +
mov ecx esi +
call sub_10136B8  +
test byte ptr [edi] 1 +
jz loc_10165E0  +
mov eax [esi+0B4h] +
mov ecx [esi+8] +
push eax  +
push ebx  +
push ecx  +
call sub_1020B9A  +
mov al [esi+16Ah] +
test al 2 +
jz loc_10165F8  +
push offset aLevel  +
mov ecx esi +
call sub_10136B8  +
jmp loc_1016611  +
test al 1 +
jz loc_1016611  +
mov eax [esi+0B8h] +
mov ecx [esi+8] +
push eax  +
push offset aLevel  +
push ecx  +
call sub_1020B9A  +
mov al [esi+16Bh] +
test al 2 +
jz loc_1016635  +
push offset aKeywordslower  +
mov ecx esi +
call sub_10136B8  +
push offset aKeywordsupper  +
mov ecx esi +
call sub_10136B8  +
jmp loc_101666B  +
test al 1 +
jz loc_101666B  +
mov ecx [esi+8] +
lea edi [esi+0C0h] +
mov eax [edi] +
push eax  +
push offset aKeywordslower  +
push ecx  +
call sub_1020B9A  +
mov eax [edi] +
mov edx [edi+4] +
mov cl 20h +
call sub_100596A  +
mov ecx [esi+8] +
push eax  +
push offset aKeywordsupper  +
push ecx  +
call sub_1020B9A  +
mov al [esi+16Ch] +
test al 2 +
jz loc_1016683  +
push offset aControlguid  +
mov ecx esi +
call sub_10136B8  +
jmp loc_10166C6  +
test al 1 +
jz loc_10166C6  +
lea ecx [ebp-48h] +
call sub_10039B9  +
lea eax [ebp-48h] +
push eax  +
xor edi edi +
lea eax [esi+0C8h] +
inc edi  +
push eax  +
mov [ebp-4] edi +
call sub_1015E70  +
mov eax [esi+8] +
lea ecx [ebp-48h] +
push ecx  +
push offset aControlguid  +
push eax  +
call sub_102104B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0  +
push edi  +
lea ecx [ebp-48h] +
call sub_1001B47  +
test byte ptr [esi+176h] 1 +
jz loc_1016968  +
lea ecx [ebp-48h] +
call sub_10039B9  +
lea eax [esi+14h] +
push eax  +
lea ecx [ebp-2Ch] +
mov dword ptr [ebp-4] 2 +
call sub_10033D6  +
push 5Ch  +
push 1  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call sub_100FD47  +
push offset aFilters  +
lea ecx [ebp-2Ch] +
call sub_10046D1  +
push 5Ch  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100FD47  +
mov eax [esi+8] +
lea ecx [ebp-48h] +
push ecx  +
mov edi offset aFilterid +
push edi  +
push eax  +
call sub_102165D  +
xor ebx ebx +
mov [ebp-75h] al +
test al al +
jz loc_1016779  +
push 0FFFFFFFFh  +
push ebx  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_100FC2B  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101674E  +
lea eax [ebp-28h] +
lea ecx [ebp-80h] +
push ecx  +
push 2001Fh  +
push ebx  +
push eax  +
push dword ptr [esi+10h]  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jnz loc_1016779  +
push dword ptr [ebp-80h]  +
mov ecx [esi+108h] +
call sub_1013345  +
jmp loc_1016952  +
lea eax [ebp-74h] +
push eax  +
call ds:UuidCreate  +
mov [ebp-7Ch] eax +
cmp eax ebx +
jz loc_10167E0  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10167B7  +
test byte ptr [eax+1Ch] 1 +
jz loc_10167B7  +
cmp byte ptr [eax+19h] 2 +
jb loc_10167B7  +
push dword ptr [ebp-7Ch]  +
push offset dword_1008514  +
push 48h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 5E8h  +
push offset aDW7rtmAdminW_0  +
push dword ptr [ebp-7Ch]  +
lea ecx [ebp-0B8h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-0B8h] +
push eax  +
call _CxxThrowException  +
lea ecx [ebp-64h] +
call sub_10039B9  +
lea eax [ebp-64h] +
push eax  +
lea eax [ebp-74h] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_1015E70  +
push 0FFFFFFFFh  +
push ebx  +
lea eax [ebp-64h] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_100FC2B  +
cmp byte ptr [ebp-75h] 0 +
jnz loc_101684D  +
cmp dword ptr [ebp-4Ch] 8 +
mov eax [ebp-60h] +
jnb loc_101681A  +
lea eax [ebp-60h] +
push eax  +
lea ecx [ebp-0B4h] +
call sub_100159C  +
mov eax [esi+8] +
lea ecx [ebp-0B4h] +
push ecx  +
push edi  +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_102104B  +
push ebx  +
push 1  +
lea ecx [ebp-0B4h] +
mov byte ptr [ebp-4] 4 +
call sub_1001B47  +
mov eax [esi+8] +
lea ecx [ebp-88h] +
push ecx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
push eax  +
call ds:GetSecurityInfo  +
mov edi eax +
cmp edi ebx +
jz loc_10168A6  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1016896  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016896  +
cmp byte ptr [eax+19h] 2 +
jb loc_1016896  +
push edi  +
push offset dword_1008514  +
push 49h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 602h  +
push offset aDW7rtmAdminW_0  +
push edi  +
jmp loc_10167C4  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-88h] +
mov [ebp-94h] eax +
mov eax [ebp-28h] +
mov dword ptr [ebp-98h] 0Ch +
mov [ebp-90h] ebx +
jnb loc_10168CE  +
lea eax [ebp-28h] +
lea ecx [ebp-0BCh] +
push ecx  +
lea ecx [ebp-80h] +
push ecx  +
lea ecx [ebp-98h] +
push ecx  +
push 2001Fh  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push dword ptr [esi+10h]  +
call ds:RegCreateKeyExW  +
push dword ptr [ebp-88h]  +
mov edi eax +
call ds:LocalFree  +
cmp edi ebx +
jz loc_1016939  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101692F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101692F  +
cmp byte ptr [eax+19h] 2 +
jb loc_101692F  +
push edi  +
push offset dword_1008514  +
push 4Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 619h  +
jmp loc_101689B  +
push dword ptr [ebp-80h]  +
mov ecx [esi+108h] +
call sub_1013345  +
push ebx  +
push 1  +
lea ecx [ebp-64h] +
call sub_1001B47  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
push ebx  +
push 1  +
lea ecx [ebp-48h] +
call sub_1001B47  +
call sub_1002043  +
retn 4  +
***
call sub_10021E6  +
mov eax [ebp+0Ch] +
mov esi [ebp+8] +
mov [ebp-38h] eax +
mov eax [ebp+10h] +
mov ebx ecx +
mov [ebp-34h] eax +
xor eax eax +
mov dword ptr [ebx] offset off_1004A08 +
mov [ebx+4] eax +
mov [ebp-3Ch] ebx +
mov [ebp-30h] esi +
mov [ebx+8] eax +
mov dword ptr [ebx] offset off_10086A8 +
lea edi [ebx+0Ch] +
movs   +
movs   +
movs   +
movs   +
lea edi [ebx+1Ch] +
mov ecx edi +
mov [ebp-4] eax +
call sub_10039B9  +
lea ecx [ebx+38h] +
call sub_10039B9  +
lea ecx [ebx+54h] +
call sub_10039B9  +
lea eax [ebx+0Ch] +
lea esi [ebx+74h] +
and dword ptr [esi] 0 +
push eax  +
mov byte ptr [ebp-4] 3 +
mov byte ptr [ebx+70h] 0 +
call sub_101D429  +
mov [esi] eax +
test eax eax +
jz loc_1016A0A  +
push dword ptr [eax+64h]  +
lea ecx [ebx+38h] +
call sub_1001DE7  +
mov eax [esi] +
add eax 14h +
push eax  +
mov ecx edi +
call sub_1001DE7  +
jmp loc_1016B75  +
push edi  +
push dword ptr [ebp-30h]  +
call sub_1015E70  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
push 30h  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call sub_10152B1  +
push dword ptr [ebp-34h]  +
lea ecx [ebp-2Ch] +
call sub_1001DE7  +
push 5Ch  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100FD47  +
push offset aPublishers_0  +
lea ecx [ebp-2Ch] +
call sub_10046D1  +
push 5Ch  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100FD47  +
push 0FFFFFFFFh  +
push 0  +
push edi  +
lea ecx [ebp-2Ch] +
call sub_100FC2B  +
cmp dword ptr [ebp-14h] 8 +
mov ecx [ebp-28h] +
jnb loc_1016A72  +
lea ecx [ebp-28h] +
lea eax [ebx+8] +
push eax  +
push 20019h  +
push 0  +
push ecx  +
push dword ptr [ebp-38h]  +
call ds:RegOpenKeyExW  +
mov [ebp-30h] eax +
test eax eax +
jz loc_1016ADE  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1016ABB  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016ABB  +
cmp byte ptr [eax+19h] 2 +
jb loc_1016ABB  +
push dword ptr [ebp-30h]  +
push offset dword_1008514  +
push 4Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 654h  +
push offset aDW7rtmAdminW_0  +
push dword ptr [ebp-30h]  +
lea ecx [ebp-5Ch] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-5Ch] +
push eax  +
call _CxxThrowException  +
mov ecx [ebx+8] +
lea eax [ebx+38h] +
push eax  +
push offset dword_1001334  +
push ecx  +
call sub_102165D  +
test al al +
jnz loc_1016B5C  +
cmp dword ptr [edi+18h] 8 +
jb loc_1016AFF  +
mov edi [edi+4] +
jmp loc_1016B02  +
add edi 4 +
push edi  +
push 50h  +
call near ptr dword_100BDDC+3  +
pop ecx  +
pop ecx  +
mov eax off_1029004 +
mov esi 54Fh +
cmp eax offset off_1029004 +
jz loc_1016B3C  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016B3C  +
cmp byte ptr [eax+19h] 2 +
jb loc_1016B3C  +
push esi  +
push offset dword_1008514  +
push 4Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 65Bh  +
push offset aDW7rtmAdminW_0  +
push esi  +
lea ecx [ebp-7Ch] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-7Ch] +
jmp loc_1016AD8  +
push esi  +
push dword ptr [ebx+8]  +
lea eax [ebx+0Ch] +
push eax  +
call sub_101D41F  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
mov eax ebx +
call sub_1002043  +
retn 0Ch  +
***
call sub_1003100  +
mov ebx ecx +
mov [ebp-10h] ebx +
xor eax eax +
mov dword ptr [ebx] offset off_1004A08 +
mov [ebx+4] eax +
mov [ebx+8] eax +
mov esi [ebp+8] +
mov dword ptr [ebx] offset off_10086A8 +
lea edi [ebx+0Ch] +
movs   +
movs   +
movs   +
movs   +
lea edi [ebx+1Ch] +
mov ecx edi +
mov [ebp-4] eax +
call sub_10039B9  +
lea ecx [ebx+38h] +
call sub_10039B9  +
lea ecx [ebx+54h] +
call sub_10039B9  +
lea eax [ebx+0Ch] +
lea esi [ebx+74h] +
and dword ptr [esi] 0 +
push eax  +
mov byte ptr [ebp-4] 3 +
mov byte ptr [ebx+70h] 0 +
call sub_101D429  +
mov [esi] eax +
test eax eax +
jz loc_1016C0A  +
push dword ptr [eax+64h]  +
lea ecx [ebx+38h] +
call sub_1001DE7  +
mov eax [esi] +
add eax 14h +
push eax  +
mov ecx edi +
call sub_1001DE7  +
jmp loc_1016D18  +
push edi  +
push dword ptr [ebp+8]  +
call sub_1015E70  +
cmp dword ptr [edi+18h] 8 +
jb loc_1016C1E  +
mov eax [edi+4] +
jmp loc_1016C21  +
lea eax [edi+4] +
lea ecx [ebx+8] +
push ecx  +
push 20019h  +
push 0  +
push eax  +
push dword ptr [ebp+0Ch]  +
call ds:RegOpenKeyExW  +
mov [ebp+8] eax +
test eax eax +
jz loc_1016C8D  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1016C6A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016C6A  +
cmp byte ptr [eax+19h] 2 +
jb loc_1016C6A  +
push dword ptr [ebp+8]  +
push offset dword_1008514  +
push 51h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 739h  +
push offset aDW7rtmAdminW_0  +
push dword ptr [ebp+8]  +
lea ecx [ebp-30h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-30h] +
push eax  +
call _CxxThrowException  +
mov ecx [ebx+8] +
lea eax [ebx+38h] +
push eax  +
push offset dword_1001334  +
push ecx  +
call sub_102165D  +
test al al +
jnz loc_1016D0B  +
cmp dword ptr [edi+18h] 8 +
jb loc_1016CAE  +
mov edi [edi+4] +
jmp loc_1016CB1  +
add edi 4 +
push edi  +
push 50h  +
call near ptr dword_100BDDC+3  +
pop ecx  +
pop ecx  +
mov eax off_1029004 +
mov esi 54Fh +
cmp eax offset off_1029004 +
jz loc_1016CEB  +
test byte ptr [eax+1Ch] 1 +
jz loc_1016CEB  +
cmp byte ptr [eax+19h] 2 +
jb loc_1016CEB  +
push esi  +
push offset dword_1008514  +
push 52h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 740h  +
push offset aDW7rtmAdminW_0  +
push esi  +
lea ecx [ebp-50h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-50h] +
jmp loc_1016C87  +
push esi  +
push dword ptr [ebx+8]  +
lea eax [ebx+0Ch] +
push eax  +
call sub_101D41F  +
mov eax ebx +
call sub_1002052  +
retn 8  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1015DE5  +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+4Ch] 0 +
lea ecx [esi+50h] +
mov dword ptr [esi] offset off_1016D64 +
call sub_102139A  +
mov eax esi +
call sub_1002052  +
retn 8  +
***
mov eax [ecx+4Ch] +
cmp eax 2 +
jz loc_1016D8E  +
cmp eax 1 +
jz loc_1016D8E  +
add ecx 50h +
jmp loc_1020E94  +
***
add ecx 8 +
jmp loc_1020E94  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+50h] +
call sub_10211C5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1013CEB  +
call sub_1002052  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1016D9B  +
test byte ptr [ebp+8] 1 +
jz loc_1016DE8  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 20h  +
mov eax offset dword_1024264 +
call sub_10021E6  +
mov esi ecx +
cmp dword ptr [esi+4Ch] 1 +
jz loc_1016E4C  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
mov ecx offset unk_1029090 +
call sub_1015B45  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1016E2E  +
lea eax [ebp-28h] +
push eax  +
push 80000002h  +
lea ecx [esi+8] +
call sub_1020E0A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
mov ecx esi +
call sub_1013386  +
test al al +
jz loc_1016E62  +
mov dword ptr [esi+4Ch] 1 +
mov al 1 +
jmp loc_1016E64  +
xor al al +
call sub_1002043  +
retn   +
***
jmp loc_1016DF4  +
***
call sub_10021E6  +
mov edi [ebp+8] +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+4]  +
test al al +
jz loc_1016EEC  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call sub_101548D  +
cmp dword ptr [edi+18h] 8 +
jb loc_1016EB2  +
mov eax [edi+4] +
jmp loc_1016EB5  +
lea eax [edi+4] +
cmp dword ptr [ebp-14h] 8 +
mov ecx [ebp-28h] +
jnb loc_1016EC1  +
lea ecx [ebp-28h] +
push eax  +
push ecx  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1016EF6  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
mov bl al +
call sub_1001B47  +
test bl bl +
jnz loc_1016E90  +
xor al al +
call sub_1002043  +
retn 4  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
mov al 1 +
jmp loc_1016EEE  +
***
call sub_10021E6  +
mov eax [ebp+8] +
mov esi ecx +
mov ecx [ebp+0Ch] +
push ecx  +
push eax  +
mov ecx esi +
mov [ebp-30h] esi +
call sub_1015DE5  +
and dword ptr [ebp-4] 0 +
push 5Ch  +
lea eax [esi+30h] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
mov dword ptr [esi] offset off_100876C +
call sub_1015358  +
add esp 0Ch +
push offset aPublishers_0  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call sub_10046D1  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1016F64  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [esi+2Ch]  +
lea ecx [esi+8] +
call sub_1020E0A  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
mov eax esi +
call sub_1002043  +
retn 8  +
***
call sub_10021E6  +
mov esi [ebp+8] +
xor eax eax +
mov [ebp-24h] eax +
mov ebx ecx +
mov [ebp-28h] esi +
mov [esi] eax +
lea ecx [ebp-20h] +
mov [ebp-4] eax +
mov eax [ebx+20h] +
xor edi edi +
push ecx  +
inc edi  +
push eax  +
mov [ebp-24h] edi +
call sub_1013822  +
push 78h  +
call sub_1004829  +
pop ecx  +
mov [ebp-2Ch] eax +
mov [ebp-4] edi +
test eax eax +
jz loc_1016FDE  +
push dword ptr [ebx+8]  +
lea ecx [ebp-20h] +
push ecx  +
mov ecx eax +
call sub_1016B84  +
jmp loc_1016FE0  +
xor eax eax +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0 +
call sub_1004E7A  +
mov eax esi +
call sub_1002043  +
retn 4  +
***
call sub_10021E6  +
mov esi [ebp+8] +
mov ebx ecx +
lea ecx [ebp-3Ch] +
mov [ebp-40h] esi +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-3Ch] +
push eax  +
push esi  +
call sub_1015E70  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+4]  +
jmp loc_1017052  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
call sub_1013927  +
mov esi [ebp-40h] +
push 4  +
pop ecx  +
lea edi [ebp-20h] +
xor eax eax +
cmps   +
jz loc_101705A  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+8]  +
test al al +
jnz loc_1017031  +
xor bl bl +
jmp loc_101705C  +
mov bl 1 +
push 0  +
push 1  +
lea ecx [ebp-3Ch] +
call sub_1001B47  +
mov al bl +
call sub_1002043  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1013478  +
mov ecx [ebp+arg_0] +
cmp eax ecx +
ja loc_1017090  +
call loc_10154B4  +
imul ecx ecx +
add ecx [esi+4] +
pop esi  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_10170C1  +
xor al al +
jmp loc_10170E5  +
cmp edi 6666666h +
jbe loc_10170CE  +
call loc_1009AFB  +
push eax  +
push edi  +
call sub_1013600  +
imul edi edi +
add edi eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_1017116  +
cmp [ebp+arg_8] eax +
jnz loc_1017116  +
mov ecx esi +
call sub_1013ED5  +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_101713B  +
cmp ecx [ebp+arg_8] +
jz loc_101713B  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_10135B9  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1015515  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_101711C  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1015A2C  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1015A59  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10171B3  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_10159FB  +
add esi 28h +
cmp esi [ebp+arg_4] +
jnz loc_10171A6  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1015A7C  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
call sub_10053E2  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_1017238  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_10153A6  +
dec dword ptr [ebp+0Ch]  +
add dword ptr [ebp+8] 28h +
jmp loc_1017202  +
mov esi [ebp-14h] +
jmp loc_101722A  +
push esi  +
call sub_1004B37  +
add esi 28h +
cmp esi [ebp+8] +
jnz loc_1017221  +
push 0  +
push 0  +
call _CxxThrowException  +
call sub_1002052  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1015AAA  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
cmp byte ptr [esi+8Dh] 0 +
jz loc_101728D  +
xor al al +
jmp loc_101730F  +
cmp byte ptr [esi+8Ch] 0 +
jz loc_10172B5  +
push 9  +
lea ecx [esi+4Ch] +
call sub_1013F98  +
test eax eax +
jz loc_10172B5  +
push dword ptr [eax+8]  +
mov ecx [ebp+arg_0] +
push dword ptr [eax]  +
call sub_1001E14  +
mov al 1 +
jmp loc_101730F  +
push [ebp+arg_0]  +
mov eax [esi+8] +
push offset aFile  +
push eax  +
call sub_102165D  +
mov [ebp+var_1] al +
test al al +
jz loc_101730C  +
cmp dword ptr [esi+0Ch] 1 +
jnz loc_101730C  +
mov eax [esi+8] +
and dword ptr [ebp+Data] 0 +
lea ecx [ebp+Data] +
push ecx  +
push offset aFlags  +
push eax  +
call sub_1020A00  +
test al al +
jz loc_10172F3  +
test [ebp+Data] 1 +
jnz loc_101730C  +
cmp dword ptr [esi+48h] 8 +
jb loc_10172FE  +
mov esi [esi+34h] +
jmp loc_1017301  +
add esi 34h +
push [ebp+arg_0]  +
push 0  +
push esi  +
call sub_101601D  +
mov al [ebp+var_1] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
mov edi ds:_wcsicmp +
mov ebx offset aSecurity +
push ebx  +
push [ebp+arg_0]  +
mov esi ecx +
mov byte ptr [esi+48h] 1 +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101734C  +
lea edi [esi+1Ch] +
push edi  +
push esi  +
push ebx  +
jmp loc_10173F7  +
mov ebx offset aApplication +
push ebx  +
push [ebp+arg_0]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1017341  +
mov ebx offset aSystem +
push ebx  +
push [ebp+arg_0]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1017341  +
cmp [ebp+arg_8] 2 +
jz loc_10173EF  +
push [ebp+arg_4]  +
call sub_1012B41  +
test al al +
jnz loc_10173EF  +
xor eax eax +
cmp [ebp+arg_8] eax +
jnz loc_1017396  +
lea edi [esi+1Ch] +
push edi  +
push esi  +
mov [esi+48h] al +
push offset aApplication  +
jmp loc_10173F7  +
cmp [ebp+arg_8] 1 +
jnz loc_10173A1  +
mov [esi+48h] al +
jmp loc_1017341  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10173CD  +
test byte ptr [eax+1Ch] 1 +
jz loc_10173CD  +
cmp byte ptr [eax+19h] 2 +
jb loc_10173CD  +
push 57h  +
push offset dword_1008514  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0A0h  +
push offset aDW7rtmAdminW_0  +
push 57h  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
lea edi [esi+1Ch] +
push edi  +
push esi  +
push [ebp+arg_0]  +
call sub_1015F49  +
add esi 2Ch +
push esi  +
push edi  +
call sub_1015E70  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10170F0  +
push dword ptr [esi+4]  +
call sub_1001B90  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_1017465  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_101717C  +
push dword ptr [esi+4]  +
call sub_1001B90  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_10174B0  +
push edi  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_101714A  +
mov edi [eax] +
add esp 10h +
push esi  +
push dword ptr [esi+8]  +
push edi  +
call sub_101717C  +
mov ecx [ebp+arg_4] +
mov [esi+8] edi +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10171EC  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10174BF  +
mov eax [ebp+arg_4] +
imul eax eax +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
call sub_10017A2  +
mov eax [ebp+10h] +
mov esi ecx +
push eax  +
lea ecx [ebp-3Ch] +
mov [ebp-48h] esi +
call sub_1015327  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1013493  +
mov edi [ebp+0Ch] +
mov ebx eax +
test edi edi +
jz loc_10176DB  +
mov ecx esi +
call sub_1013478  +
mov ecx 6666666h +
mov edx ecx +
sub edx eax +
cmp edx edi +
jnb loc_1017561  +
call loc_1009AFB  +
add eax edi +
cmp ebx eax +
jnb loc_1017622  +
mov edx ebx +
shr edx 1 +
sub ecx edx +
cmp ecx ebx +
jnb loc_1017579  +
xor ebx ebx +
jmp loc_101757B  +
add ebx edx +
cmp ebx eax +
jnb loc_1017581  +
mov ebx eax +
push 0  +
push ebx  +
call sub_1013600  +
mov ecx [esi+4] +
push esi  +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-40h] eax +
push ecx  +
mov [ebp-44h] eax +
mov byte ptr [ebp-4] 1 +
call sub_1017245  +
lea ecx [ebp-3Ch] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
mov [ebp-44h] eax +
call sub_10174ED  +
push esi  +
mov [ebp-44h] eax +
push dword ptr [ebp-44h]  +
mov eax [esi+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1017245  +
mov ecx esi +
call sub_1013478  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_10175E7  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_101717C  +
push dword ptr [esi+4]  +
call sub_1001B90  +
pop ecx  +
mov eax [ebp-40h] +
imul ebx ebx +
imul edi edi +
add ebx eax +
add edi eax +
mov [esi+0Ch] ebx +
mov [esi+8] edi +
mov [esi+4] eax +
jmp loc_10176DB  +
push dword ptr [ebp-48h]  +
push dword ptr [ebp-44h]  +
push dword ptr [ebp-40h]  +
call sub_101717C  +
push dword ptr [ebp-40h]  +
call sub_1001B90  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
mov ecx [esi+8] +
mov eax ecx +
sub eax [ebp+8] +
push 28h  +
cdq   +
pop ebx  +
idiv  ebx +
mov [ebp-40h] ecx +
push esi  +
cmp eax edi +
jnb loc_10176AA  +
mov eax [ebp+8] +
mov ebx edi +
imul ebx ebx +
lea edx [ebx+eax] +
push edx  +
push ecx  +
push eax  +
call sub_1017245  +
mov eax [esi+8] +
sub eax [ebp+8] +
lea ecx [ebp-3Ch] +
push ecx  +
push 28h  +
pop ecx  +
cdq   +
idiv  ecx +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
sub edi eax +
push edi  +
push dword ptr [esi+8]  +
call sub_10174ED  +
add [esi+8] ebx +
mov esi [esi+8] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-3Ch] +
push eax  +
sub esi ebx +
push esi  +
push dword ptr [ebp+8]  +
call sub_101719B  +
add esp 0Ch +
jmp loc_10176DB  +
mov eax [ebp+0Ch] +
mov ecx [ebp-48h] +
imul eax eax +
push ecx  +
mov ecx [ecx+8] +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
add eax ecx +
push eax  +
call sub_101717C  +
jmp loc_1017619  +
imul edi edi +
push ecx  +
mov ebx ecx +
push ecx  +
sub ebx edi +
push ebx  +
call sub_1017245  +
push dword ptr [ebp-40h]  +
mov [esi+8] eax +
push ebx  +
push dword ptr [ebp+8]  +
call sub_10171C0  +
lea eax [ebp-3Ch] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_101719B  +
add esp 18h +
push 0  +
push 1  +
lea ecx [ebp-3Ch] +
call sub_1001B47  +
call sub_1004E54  +
retn 0Ch  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+1Ch] +
call sub_10039B9  +
lea ecx [esi+38h] +
call sub_10039B9  +
lea ecx [esi+54h] +
call sub_10039B9  +
lea ecx [esi+70h] +
call sub_10039B9  +
push 0  +
lea ecx [esi+90h] +
mov byte ptr [ebp-4] 4 +
call sub_10170A2  +
mov eax esi +
call sub_1002052  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
lea ecx [esi+90h] +
call sub_1017446  +
xor ebx ebx +
push ebx  +
push 1  +
lea ecx [esi+70h] +
call sub_1001B47  +
push ebx  +
push 1  +
lea ecx [esi+54h] +
call sub_1001B47  +
push ebx  +
push 1  +
lea ecx [esi+38h] +
call sub_1001B47  +
push ebx  +
push 1  +
lea ecx [esi+1Ch] +
call sub_1001B47  +
push ebx  +
push 1  +
mov ecx esi +
call sub_1001B47  +
pop esi  +
pop ebx  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
push 0  +
call sub_10015C8  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [esi+10h] +
call sub_10015C8  +
mov eax esi +
call sub_1002052  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+10h] +
call sub_100256E  +
mov ecx esi +
pop esi  +
jmp sub_100256E  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1012BB5  +
and dword ptr [ebp-4] 0 +
lea edi [esi+0Ch] +
mov ecx edi +
mov dword ptr [esi] offset off_100877C +
call sub_101779D  +
push edi  +
push offset aSelectors  +
push dword ptr [esi+8]  +
mov byte ptr [ebp-4] 1 +
call sub_1021734  +
lea ebx [esi+1Ch] +
push ebx  +
push offset aSuppressors  +
push dword ptr [esi+8]  +
call sub_1021734  +
mov ecx ebx +
call sub_1002028  +
test eax eax +
jnz loc_1017899  +
mov ecx edi +
call sub_1002028  +
cmp eax 1 +
jnz loc_1017899  +
mov eax [esi+10h] +
cmp dword ptr [eax+18h] 8 +
jb loc_101785F  +
mov eax [eax+4] +
jmp loc_1017862  +
add eax 4 +
mov ecx offset dword_1001338 +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101788D  +
test dx dx +
jz loc_1017889  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101788D  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1017867  +
xor eax eax +
jmp loc_1017892  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1017899  +
inc eax  +
jmp loc_101789B  +
xor eax eax +
mov [esi+2Ch] al +
mov eax esi +
call sub_1002052  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_10177D0  +
mov ecx esi +
pop esi  +
jmp sub_1012BE5  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+138h] +
mov dword ptr [esi] offset off_1008780 +
test eax eax +
jz loc_10178E3  +
push eax  +
call ds:FreeLibrary  +
lea ecx [esi+78h] +
call sub_101774C  +
mov ecx esi +
pop esi  +
jmp sub_1013E1D  +
***
call sub_1003100  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
call sub_1013478  +
mov ecx [ebp+8] +
cmp ecx eax +
jbe loc_101792A  +
mov edx [esi+8] +
lea edi [ebp+0Ch] +
push edi  +
sub ecx eax +
push ecx  +
push edx  +
mov ecx esi +
call sub_1017513  +
jmp loc_1017942  +
jnb loc_1017942  +
mov eax [esi+8] +
imul ecx ecx +
add ecx [esi+4] +
push eax  +
push ecx  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_1017478  +
push 0  +
push 1  +
lea ecx [ebp+0Ch] +
call sub_1001B47  +
call sub_1002052  +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_1013478  +
test eax eax +
jnz loc_1017971  +
xor esi esi +
jmp loc_101797F  +
mov eax [ebp+arg_4] +
sub eax [edi+4] +
push 28h  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi eax +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_1017513  +
imul esi esi +
add esi [edi+4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+20h] +
call sub_1013F43  +
push 1  +
push 0  +
push 0  +
lea ecx [esi+2Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1021AF5  +
mov eax esi +
call sub_1002052  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+2Ch] +
mov dword ptr [ebp-4] 1 +
call sub_10218D8  +
lea ecx [esi+20h] +
mov byte ptr [ebp-4] 0 +
call sub_1017412  +
push 0  +
push 1  +
mov ecx esi +
call sub_1001B47  +
call sub_1002052  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+4Ch] +
mov dword ptr [ebp-4] 2 +
call sub_10179E5  +
push 0  +
push 1  +
lea ecx [esi+30h] +
call sub_1001B47  +
push 0  +
push 1  +
lea ecx [esi+14h] +
call sub_1001B47  +
mov ecx esi +
call sub_1012BE5  +
call sub_1002052  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10176F4  +
xor al al +
mov [esi+0A0h] al +
mov [esi+0A1h] al +
mov [esi+0A2h] al +
mov [esi+0A3h] al +
mov [esi+0A4h] al +
mov [esi+0A5h] al +
mov [esi+0A6h] al +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10178AD  +
test byte ptr [ebp+8] 1 +
jz loc_1017ACA  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10021E6  +
mov eax [ebp+0Ch] +
mov edi [ebp+8] +
mov esi ecx +
xor ebx ebx +
mov [ebp-30h] eax +
mov eax [ebp+10h] +
mov dword ptr [esi] offset off_1004A08 +
mov [esi+4] ebx +
mov [ebp-3Ch] esi +
mov [ebp-34h] eax +
mov [esi+8] ebx +
lea ecx [esi+14h] +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_1008784 +
call sub_10039B9  +
lea ecx [esi+30h] +
call sub_10039B9  +
lea ecx [esi+4Ch] +
mov byte ptr [ebp-4] 2 +
call sub_10179A4  +
mov [esi+8Dh] bl +
cmp dword ptr [edi+18h] 8 +
mov byte ptr [ebp-4] 3 +
jb loc_1017B3E  +
mov eax [edi+4] +
jmp loc_1017B41  +
lea eax [edi+4] +
push eax  +
call sub_1021E45  +
mov eax [ebp-30h] +
push dword ptr [ebp-34h]  +
lea ecx [esi+14h] +
mov [esi+10h] eax +
call sub_1001DE7  +
push edi  +
lea ecx [esi+30h] +
call sub_10055EA  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
lea ecx [esi+4Ch] +
mov byte ptr [ebp-4] 4 +
mov [esi+8Ch] bl +
call sub_1015300  +
push 80h  +
lea ecx [ebp-2Ch] +
call sub_10152B1  +
cmp dword ptr [edi+18h] 8 +
jb loc_1017B93  +
mov eax [edi+4] +
jmp loc_1017B96  +
lea eax [edi+4] +
lea ecx [ebp-2Ch] +
push ecx  +
push eax  +
mov ecx offset unk_1029090 +
call sub_1015C0F  +
cmp dword ptr [ebp-14h] 8 +
mov ecx [ebp-28h] +
jnb loc_1017BB1  +
lea ecx [ebp-28h] +
lea eax [esi+8] +
push eax  +
push 20019h  +
push ebx  +
push ecx  +
push 80000002h  +
call ds:RegOpenKeyExW  +
mov ecx eax +
mov [ebp-38h] ecx +
cmp ecx ebx +
jnz loc_1017BDD  +
xor eax eax +
inc eax  +
push ebx  +
mov [esi+0Ch] eax +
push eax  +
jmp loc_1017CF8  +
cmp ecx 2 +
jz loc_1017C30  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1017C0D  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017C0D  +
cmp byte ptr [eax+19h] 2 +
jb loc_1017C0D  +
push ecx  +
push offset dword_1008514  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 145h  +
push offset aDW7rtmAdminW_0  +
push dword ptr [ebp-38h]  +
lea ecx [ebp-5Ch] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-5Ch] +
push eax  +
call _CxxThrowException  +
push dword ptr [ebp-34h]  +
lea ecx [ebp-2Ch] +
call sub_1001DE7  +
push 5Ch  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100FD47  +
push offset aChannels_2  +
lea ecx [ebp-2Ch] +
call sub_10046D1  +
push 5Ch  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100FD47  +
push 0FFFFFFFFh  +
push ebx  +
push edi  +
lea ecx [ebp-2Ch] +
call sub_100FC2B  +
cmp dword ptr [ebp-14h] 8 +
mov ecx [ebp-28h] +
push 2  +
pop edi  +
mov [esi+0Ch] edi +
jnb loc_1017C7E  +
lea ecx [ebp-28h] +
lea eax [esi+8] +
push eax  +
push 20019h  +
push ebx  +
push ecx  +
push dword ptr [ebp-30h]  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jz loc_1017CF5  +
cmp eax edi +
jnz loc_1017C9F  +
mov eax 3A9Fh +
mov esi eax +
cmp eax ebx +
jnz loc_1017CAA  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1017CD5  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017CD5  +
cmp byte ptr [eax+19h] 2 +
jb loc_1017CD5  +
push esi  +
push offset dword_1008514  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 161h  +
push offset aDW7rtmAdminW_0  +
push esi  +
lea ecx [ebp-7Ch] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-7Ch] +
jmp loc_1017C2A  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
mov eax esi +
call sub_1002043  +
retn 0Ch  +
***
call sub_10021E6  +
mov eax [ebp+10h] +
mov esi [ebp+8] +
mov [ebp-160h] eax +
mov eax [ebp+14h] +
mov [ebp-164h] eax +
mov eax [ebp+18h] +
mov [ebp-170h] eax +
mov eax [ebp+1Ch] +
mov ebx ecx +
mov [ebp-174h] ebx +
mov [ebp-16Ch] eax +
call sub_1013CAA  +
and dword ptr [ebp-4] 0 +
lea ecx [ebx+78h] +
mov dword ptr [ebx] offset off_1008780 +
call sub_1017A71  +
lea ecx [ebp-48h] +
call sub_10039B9  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
lea eax [ebp-48h] +
push eax  +
push esi  +
mov byte ptr [ebp-4] 3 +
call sub_1015E70  +
lea edi [ebx+124h] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp-16Ch] +
lea eax [ebp-15Ch] +
xor esi esi +
push eax  +
mov [ebx+134h] edi +
mov [ebx+120h] esi +
mov [ebx+138h] esi +
mov dword ptr [ebp-15Ch] 114h +
call ds:RtlGetVersion  +
test eax eax +
jl loc_1017DE3  +
cmp dword ptr [ebp-158h] 7 +
jnb loc_1017DDC  +
cmp dword ptr [ebp-158h] 6 +
jnz loc_1017DE3  +
cmp dword ptr [ebp-154h] 1 +
jb loc_1017DE3  +
or dword ptr [ebp+0Ch] 100h +
push 30h  +
lea ecx [ebp-2Ch] +
call sub_10152B1  +
push dword ptr [ebp-170h]  +
lea ecx [ebp-2Ch] +
call sub_1001DE7  +
push 5Ch  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100FD47  +
push offset aPublishers_0  +
lea ecx [ebp-2Ch] +
call sub_10046D1  +
push 5Ch  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100FD47  +
push 0FFFFFFFFh  +
push esi  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_100FC2B  +
cmp dword ptr [ebx+134h] 0FFFFFFFFh +
jz loc_1017F4C  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov [ebx+138h] eax +
cmp eax esi +
jnz loc_1017EB4  +
call ds:GetLastError  +
mov edi eax +
cmp edi esi +
jnz loc_1017E62  +
mov edi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1017E8D  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017E8D  +
cmp byte ptr [eax+19h] 2 +
jb loc_1017E8D  +
push edi  +
push offset dword_1008514  +
push 5Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 997h  +
push offset aDW7rtmAdminW_0  +
push edi  +
lea ecx [ebp-194h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-194h] +
push eax  +
call _CxxThrowException  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
mov [ebx+120h] eax +
cmp eax esi +
jnz loc_1017F1C  +
call ds:GetLastError  +
push dword ptr [ebx+138h]  +
mov edi eax +
call ds:FreeLibrary  +
cmp edi esi +
jnz loc_1017EE7  +
mov edi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1017F12  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017F12  +
cmp byte ptr [eax+19h] 2 +
jb loc_1017F12  +
push edi  +
push offset dword_1008514  +
push 5Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 9A2h  +
jmp loc_1017E92  +
cmp dword ptr [ebp-14h] 8 +
mov ecx [ebp-28h] +
jnb loc_1017F28  +
lea ecx [ebp-28h] +
push esi  +
push edi  +
lea edx [ebp-168h] +
push edx  +
lea edx [ebx+8] +
push edx  +
push dword ptr [ebp-160h]  +
push dword ptr [ebp+0Ch]  +
push esi  +
push esi  +
push esi  +
push ecx  +
push dword ptr [ebp-164h]  +
call eax  +
jmp loc_1017F7C  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1017F58  +
lea eax [ebp-28h] +
lea ecx [ebp-168h] +
push ecx  +
lea ecx [ebx+8] +
push ecx  +
push dword ptr [ebp-160h]  +
push dword ptr [ebp+0Ch]  +
push esi  +
push esi  +
push esi  +
push eax  +
push dword ptr [ebp-164h]  +
call ds:RegCreateKeyExW  +
mov edi eax +
cmp edi esi +
jz loc_1017FC3  +
push dword ptr [ebx+138h]  +
call ds:FreeLibrary  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1017FB9  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017FB9  +
cmp byte ptr [eax+19h] 2 +
jb loc_1017FB9  +
push edi  +
push offset dword_1008514  +
push 5Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 9C1h  +
jmp loc_1017E92  +
push esi  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
push esi  +
push 1  +
lea ecx [ebp-48h] +
call sub_1001B47  +
mov eax ebx +
call sub_1002043  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10178C7  +
test byte ptr [ebp+8] 1 +
jz loc_1018035  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
sub esp 28h +
mov esi ecx +
mov ecx esp +
mov [ebp+var_4] esp +
call sub_10039B9  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10178F8  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_1013478  +
mov ecx esi +
mov edi eax +
call sub_1013493  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jnb loc_101809B  +
push 1  +
push eax  +
call sub_10174ED  +
mov [esi+8] eax +
jmp loc_10180A5  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_101795B  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
xor ebx ebx +
mov dword ptr [esi] offset off_1004A08 +
mov [esi+4] ebx +
mov [esi+8] ebx +
lea ecx [esi+14h] +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_1008784 +
mov [esi+10h] ebx +
call sub_10039B9  +
lea ecx [esi+30h] +
call sub_10039B9  +
lea ecx [esi+4Ch] +
mov byte ptr [ebp-4] 2 +
call sub_10179A4  +
mov [esi+8Ch] bl +
mov [esi+8Dh] bl +
mov eax esi +
call sub_1002052  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+0Ch]  +
call sub_1012BB5  +
mov eax [ebp+10h] +
push dword ptr [ebp+18h]  +
and dword ptr [ebp-4] 0 +
mov [esi+0Ch] eax +
mov eax [ebp+14h] +
lea ecx [esi+14h] +
mov dword ptr [esi] offset off_1008784 +
mov [esi+10h] eax +
call sub_100159C  +
mov edi [ebp+8] +
push edi  +
lea ecx [esi+30h] +
mov byte ptr [ebp-4] 1 +
call sub_10033D6  +
lea ecx [esi+4Ch] +
mov byte ptr [ebp-4] 2 +
call sub_10179A4  +
mov byte ptr [esi+8Ch] 0 +
mov byte ptr [esi+8Dh] 0 +
cmp dword ptr [edi+18h] 8 +
mov byte ptr [ebp-4] 3 +
jb loc_1018183  +
mov edi [edi+4] +
jmp loc_1018186  +
add edi 4 +
push edi  +
call sub_1021E45  +
mov eax esi +
call sub_1002052  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1017A27  +
test byte ptr [ebp+8] 1 +
jz loc_10181B5  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1004A08 +
mov dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [ebp-4] 0 +
lea edi [esi+0Ch] +
mov ecx edi +
mov dword ptr [esi] offset off_100877C +
call sub_101779D  +
push offset dword_1001338  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
mov byte ptr [esi+2Ch] 1 +
call sub_100159C  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_1003406  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
mov eax esi +
call sub_1002052  +
retn   +
***
call sub_10021E6  +
mov eax [ebp+8] +
xor ebx ebx +
mov [ebp-58h] ebx +
mov esi ecx +
mov [ebp-54h] eax +
mov [eax] ebx +
xor edi edi +
inc edi  +
lea ecx [ebp-48h] +
mov [ebp-58h] edi +
call sub_10039B9  +
mov [ebp-4] edi +
mov [ebp-49h] bl +
cmp [esi+8Dh] bl +
jnz loc_1018280  +
mov eax [esi+8] +
lea ecx [ebp-48h] +
push ecx  +
push offset aFilterid  +
push eax  +
call sub_102165D  +
mov [ebp-49h] al +
cmp dword ptr [esi+48h] 8 +
jb loc_101828B  +
mov eax [esi+34h] +
jmp loc_101828E  +
lea eax [esi+34h] +
push offset aSecurity  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10182A3  +
mov [ebp-49h] bl +
cmp [ebp-49h] bl +
jz loc_10183AC  +
lea eax [esi+14h] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_10033D6  +
push 5Ch  +
push edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call sub_100FD47  +
push offset aFilters  +
lea ecx [ebp-2Ch] +
call sub_10046D1  +
push 5Ch  +
push edi  +
lea ecx [ebp-2Ch] +
call sub_100FD47  +
push 0FFFFFFFFh  +
push ebx  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_100FC2B  +
mov [ebp-50h] ebx +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 3 +
jnb loc_1018301  +
lea eax [ebp-28h] +
lea ecx [ebp-50h] +
push ecx  +
push 20019h  +
push ebx  +
push eax  +
push dword ptr [esi+10h]  +
call ds:RegOpenKeyExW  +
mov esi eax +
cmp esi ebx +
jz loc_1018367  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1018346  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018346  +
cmp byte ptr [eax+19h] 2 +
jb loc_1018346  +
push esi  +
push offset dword_1008514  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 19Ah  +
push offset aDW7rtmAdminW_0  +
push esi  +
lea ecx [ebp-7Ch] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-7Ch] +
push eax  +
call _CxxThrowException  +
push 30h  +
call sub_1004829  +
pop ecx  +
mov [ebp-5Ch] eax +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_1018386  +
push dword ptr [ebp-50h]  +
mov ecx eax +
call sub_10177EA  +
jmp loc_1018388  +
xor eax eax +
mov ecx [ebp-54h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_1004E7A  +
lea ecx [ebp-50h] +
mov [ebp-50h] ebx +
call sub_1012AD0  +
push ebx  +
push edi  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
jmp loc_10183D7  +
push 30h  +
call sub_1004829  +
pop ecx  +
mov [ebp-5Ch] eax +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_10183C8  +
mov ecx eax +
call sub_10181C1  +
jmp loc_10183CA  +
xor eax eax +
mov ecx [ebp-54h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1004E7A  +
push ebx  +
push edi  +
lea ecx [ebp-48h] +
call sub_1001B47  +
mov eax [ebp-54h] +
call sub_1002043  +
retn 4  +
***
call sub_10021E6  +
mov eax [ebp+8] +
mov esi ecx +
xor ebx ebx +
mov [ebp-50h] esi +
mov [ebp-64h] eax +
cmp [esi+70h] bl +
jz loc_1018416  +
xor al al +
jmp loc_10186BA  +
mov [ebp-54h] ebx +
lea ecx [ebp-4Ch] +
mov [ebp-4] ebx +
call sub_10039B9  +
lea eax [ebp-4Ch] +
push eax  +
mov ecx offset unk_1029090 +
mov byte ptr [ebp-4] 1 +
call sub_1015B06  +
mov edi offset dword_1018858 +
push edi  +
lea ecx [ebp-4Ch] +
call sub_10046D1  +
push 0FFFFFFFFh  +
lea eax [esi+1Ch] +
push ebx  +
push eax  +
lea ecx [ebp-4Ch] +
call sub_100FC2B  +
push edi  +
lea ecx [ebp-4Ch] +
call sub_10046D1  +
push offset SubKey  +
lea ecx [ebp-4Ch] +
call sub_10046D1  +
cmp dword ptr [ebp-34h] 8 +
mov eax [ebp-48h] +
jnb loc_1018475  +
lea eax [ebp-48h] +
lea ecx [ebp-54h] +
push ecx  +
push 20019h  +
push ebx  +
push eax  +
push 80000002h  +
call ds:RegOpenKeyExW  +
mov edi eax +
cmp edi 2 +
jnz loc_10184AA  +
push ebx  +
push 1  +
lea ecx [ebp-4Ch] +
call sub_1001B47  +
lea ecx [ebp-54h] +
call sub_1012AD0  +
jmp loc_101840F  +
cmp edi ebx +
jz loc_10184FA  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10184D9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10184D9  +
cmp byte ptr [eax+19h] 2 +
jb loc_10184D9  +
push edi  +
push offset dword_1008514  +
push 55h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 8ABh  +
push offset aDW7rtmAdminW_0  +
push edi  +
lea ecx [ebp-30h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-30h] +
push eax  +
call _CxxThrowException  +
lea eax [ebp-58h] +
push eax  +
push offset aCount_0  +
push dword ptr [ebp-54h]  +
mov [ebp-58h] ebx +
call sub_1020A00  +
test al al +
jz loc_1018492  +
cmp dword ptr [ebp-58h] 8 +
jbe loc_1018583  +
cmp dword ptr [esi+34h] 8 +
jb loc_1018523  +
mov eax [esi+20h] +
jmp loc_1018526  +
lea eax [esi+20h] +
cmp dword ptr [esi+50h] 8 +
jb loc_1018531  +
mov esi [esi+3Ch] +
jmp loc_1018534  +
add esi 3Ch +
push dword ptr [ebp-58h]  +
push eax  +
push esi  +
push 51h  +
call near ptr dword_100BDDC+3  +
add esp 10h +
mov eax off_1029004 +
mov esi 3AA2h +
cmp eax offset off_1029004 +
jz loc_1018573  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018573  +
cmp byte ptr [eax+19h] 2 +
jb loc_1018573  +
push esi  +
push offset dword_1008514  +
push 56h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 8B8h  +
push offset aDW7rtmAdminW_0  +
push esi  +
jmp loc_10184E4  +
push dword ptr [ebp-58h]  +
mov ecx [ebp-64h] +
call sub_1018041  +
xor edi edi +
cmp [ebp-58h] ebx +
jbe loc_1018663  +
mov ecx [ebp-64h] +
push edi  +
call sub_1017077  +
push 8  +
mov esi eax +
push 8  +
lea eax [ebp-20h] +
push eax  +
push edi  +
mov [esi+20h] edi +
call _itow_s  +
add esp 10h +
mov [ebp-60h] ebx +
lea eax [ebp-60h] +
push eax  +
push 20019h  +
push ebx  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-54h]  +
mov byte ptr [ebp-4] 2 +
call ds:RegOpenKeyExW  +
mov ecx eax +
mov [ebp-68h] ecx +
cmp ecx 2 +
jz loc_10186C2  +
cmp ecx ebx +
jnz loc_1018749  +
push esi  +
push offset dword_1001334  +
push dword ptr [ebp-60h]  +
call sub_102165D  +
test al al +
jz loc_1018783  +
cmp dword ptr [esi+18h] 8 +
jb loc_101860D  +
mov eax [esi+4] +
jmp loc_1018610  +
lea eax [esi+4] +
push eax  +
call sub_1021E45  +
lea eax [ebp-5Ch] +
push eax  +
push offset aFlags  +
push dword ptr [ebp-60h]  +
mov [ebp-5Ch] ebx +
call sub_1020A00  +
mov eax [ebp-5Ch] +
mov [esi+24h] eax +
lea eax [ebp-5Ch] +
push eax  +
push offset aId  +
push dword ptr [ebp-60h]  +
mov [ebp-5Ch] ebx +
call sub_1020A00  +
mov eax [ebp-5Ch] +
lea ecx [ebp-60h] +
mov [esi+1Ch] eax +
mov byte ptr [ebp-4] 1 +
call sub_1012AD0  +
inc edi  +
cmp edi [ebp-58h] +
jb loc_1018599  +
mov esi [ebp-50h] +
mov edi [ebp-64h] +
mov ecx edi +
mov [ebp-50h] ebx +
call sub_1013478  +
test eax eax +
jbe loc_1018695  +
mov edi [edi+4] +
add edi 14h +
cmp [edi] ebx +
jz loc_10187EF  +
mov ecx [ebp-64h] +
inc dword ptr [ebp-50h]  +
add edi 28h +
call sub_1013478  +
cmp [ebp-50h] eax +
jb loc_101867A  +
mov esi [esi+74h] +
cmp esi ebx +
jz loc_10186A5  +
push esi  +
push dword ptr [ebp-54h]  +
call sub_101D43B  +
push ebx  +
push 1  +
lea ecx [ebp-4Ch] +
call sub_1001B47  +
lea ecx [ebp-54h] +
call sub_1012AD0  +
mov al 1 +
call sub_1002043  +
retn 4  +
mov eax [ebp-50h] +
add eax 1Ch +
cmp dword ptr [eax+18h] 8 +
jb loc_10186D3  +
mov eax [eax+4] +
jmp loc_10186D6  +
add eax 4 +
mov ecx [ebp-50h] +
cmp dword ptr [ecx+50h] 8 +
jb loc_10186E4  +
mov ecx [ecx+3Ch] +
jmp loc_10186E7  +
add ecx 3Ch +
push eax  +
push ecx  +
push 52h  +
call near ptr dword_100BDDC+3  +
add esp 0Ch +
mov eax off_1029004 +
mov esi 3AA2h +
cmp eax offset off_1029004 +
jz loc_1018723  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018723  +
cmp byte ptr [eax+19h] 2 +
jb loc_1018723  +
push esi  +
push offset dword_1008514  +
push 57h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 8D2h  +
push offset aDW7rtmAdminW_0  +
push esi  +
lea ecx [ebp-88h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-88h] +
jmp loc_10184F4  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1018774  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018774  +
cmp byte ptr [eax+19h] 2 +
jb loc_1018774  +
push ecx  +
push offset dword_1008514  +
push 58h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 8D6h  +
push offset aDW7rtmAdminW_0  +
push dword ptr [ebp-68h]  +
jmp loc_101872E  +
mov eax [ebp-50h] +
add eax 1Ch +
cmp dword ptr [eax+18h] 8 +
jb loc_1018794  +
mov eax [eax+4] +
jmp loc_1018797  +
add eax 4 +
mov ecx [ebp-50h] +
cmp dword ptr [ecx+50h] 8 +
jb loc_10187A5  +
mov ecx [ecx+3Ch] +
jmp loc_10187A8  +
add ecx 3Ch +
push edi  +
push eax  +
push ecx  +
push 53h  +
call near ptr dword_100BDDC+3  +
add esp 10h +
mov eax off_1029004 +
mov esi 3AA2h +
cmp eax offset off_1029004 +
jz loc_10187E5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10187E5  +
cmp byte ptr [eax+19h] 2 +
jb loc_10187E5  +
push esi  +
push offset dword_1008514  +
push 59h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 8DFh  +
jmp loc_1018728  +
cmp dword ptr [esi+34h] 8 +
jb loc_10187FA  +
mov eax [esi+20h] +
jmp loc_10187FD  +
lea eax [esi+20h] +
cmp dword ptr [esi+50h] 8 +
jb loc_1018808  +
mov esi [esi+3Ch] +
jmp loc_101880B  +
add esi 3Ch +
push dword ptr [ebp-50h]  +
push eax  +
push esi  +
push 54h  +
call near ptr dword_100BDDC+3  +
add esp 10h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1018846  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018846  +
cmp byte ptr [eax+19h] 2 +
jb loc_1018846  +
push 0Dh  +
push offset dword_1008514  +
push 5Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 8FFh  +
push offset aDW7rtmAdminW_0  +
push 0Dh  +
jmp loc_101872E  +
***
call sub_10021E6  +
mov edi [ebp+8] +
push edi  +
lea eax [ebp-3Ch] +
push eax  +
mov esi ecx +
call sub_1013E66  +
mov eax [esi+98h] +
cmp eax [ebp-3Ch] +
jz loc_10188D8  +
mov eax off_1029004 +
mov esi 0B7h +
cmp eax offset off_1029004 +
jz loc_10188B7  +
test byte ptr [eax+1Ch] 1 +
jz loc_10188B7  +
cmp byte ptr [eax+19h] 2 +
jb loc_10188B7  +
push esi  +
push offset dword_1008514  +
push 5Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 93Eh  +
push offset aDW7rtmAdminW_0  +
push esi  +
lea ecx [ebp-5Ch] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-5Ch] +
push eax  +
call _CxxThrowException  +
lea ecx [ebp-38h] +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
push edi  +
lea ecx [ebp-38h] +
call sub_1001DE7  +
mov eax [ebp+0Ch] +
lea edi [esi+90h] +
mov ecx edi +
mov [ebp-1Ch] eax +
call sub_1013478  +
mov [ebp-18h] eax +
mov eax [ebp+10h] +
mov [ebp-14h] eax +
lea eax [ebp-38h] +
push eax  +
mov ecx edi +
call sub_101806B  +
push 0  +
push 1  +
lea ecx [ebp-38h] +
mov byte ptr [esi+0A5h] 1 +
call sub_1001B47  +
call sub_1002043  +
retn 0Ch  +
***
call sub_10021E6  +
mov esi ecx +
xor ebx ebx +
cmp [esi+118h] bl +
jz loc_1018964  +
mov eax [esi+8] +
lea ecx [esi+0E8h] +
push ecx  +
push offset dword_1001334  +
push eax  +
call sub_102104B  +
cmp [esi+119h] bl +
jz loc_101897E  +
mov eax [esi+8] +
lea ecx [esi+78h] +
push ecx  +
push offset aResourcefile_0  +
push eax  +
call sub_10210DA  +
cmp [esi+11Ah] bl +
jz loc_101899B  +
mov eax [esi+8] +
lea ecx [esi+94h] +
push ecx  +
push offset aMessagefilen_0  +
push eax  +
call sub_10210DA  +
cmp [esi+11Bh] bl +
jz loc_10189B8  +
mov eax [esi+8] +
lea ecx [esi+0B0h] +
push ecx  +
push offset aParameterfil_0  +
push eax  +
call sub_10210DA  +
cmp [esi+11Ch] bl +
jz loc_10189D5  +
mov eax [esi+8] +
lea ecx [esi+0CCh] +
push ecx  +
push offset aHelplink_0  +
push eax  +
call sub_102104B  +
cmp [esi+11Eh] bl +
jz loc_10189F7  +
mov eax [esi+8] +
xor ecx ecx +
cmp [esi+104h] bl +
setnz cl  +
push ecx  +
push offset aEnabled  +
push eax  +
call sub_1020B9A  +
cmp [esi+11Dh] bl +
jz loc_1018C8D  +
mov [ebp-34h] ebx +
mov eax [esi+134h] +
mov [ebp-4] ebx +
push ebx  +
cmp eax 0FFFFFFFFh +
jz loc_1018A35  +
mov ecx [esi+8] +
push eax  +
push ebx  +
lea eax [ebp-34h] +
push eax  +
push ebx  +
push 3001Fh  +
push ebx  +
push ebx  +
push ebx  +
push offset SubKey  +
push ecx  +
call dword ptr [esi+120h]  +
jmp loc_1018A51  +
mov eax [esi+8] +
lea ecx [ebp-34h] +
push ecx  +
push ebx  +
push 3001Fh  +
push ebx  +
push ebx  +
push ebx  +
push offset SubKey  +
push eax  +
call ds:RegCreateKeyExW  +
mov edi eax +
cmp edi ebx +
jz loc_1018AA9  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1018A82  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018A82  +
cmp byte ptr [eax+19h] 2 +
jb loc_1018A82  +
push edi  +
push offset dword_1008514  +
push 60h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0A14h  +
push offset aDW7rtmAdminW_0  +
push edi  +
lea ecx [ebp-98h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-98h] +
push eax  +
call _CxxThrowException  +
push ebx  +
push offset aCount_0  +
push dword ptr [ebp-34h]  +
call sub_1020B9A  +
mov [ebp-50h] ebx +
mov [ebp-4Ch] ebx +
mov [ebp-48h] ebx +
push dword ptr [ebp-34h]  +
lea ecx [ebp-78h] +
mov byte ptr [ebp-4] 1 +
call sub_10213BD  +
lea ecx [ebp-78h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-34h] ebx +
call sub_10214C3  +
jmp loc_1018B12  +
push dword ptr [ebp-60h]  +
lea ecx [ebp-2Ch] +
call sub_100159C  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 3 +
call sub_1003406  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1001B47  +
lea ecx [ebp-78h] +
call sub_1021285  +
cmp eax ebx +
jz loc_1018AE0  +
lea ecx [ebp-54h] +
call sub_1002028  +
cmp eax ebx +
jbe loc_1018B4B  +
mov edi [ebp-50h] +
add edi 4 +
mov [ebp-30h] eax +
cmp dword ptr [edi+14h] 8 +
jb loc_1018B35  +
mov eax [edi] +
jmp loc_1018B37  +
mov eax edi +
push ebx  +
push ebx  +
push eax  +
push dword ptr [ebp-78h]  +
call ds:RegDeleteKeyExW  +
add edi 1Ch +
dec dword ptr [ebp-30h]  +
jnz loc_1018B2B  +
lea ecx [esi+108h] +
mov [ebp-30h] ebx +
mov [ebp-44h] ecx +
call sub_1013478  +
test eax eax +
jbe loc_1018C5B  +
mov [ebp-40h] ebx +
mov edi [esi+10Ch] +
add edi [ebp-40h] +
mov [ebp-38h] ebx +
push 0Ah  +
push 8  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [edi+20h]  +
mov byte ptr [ebp-4] 4 +
call _itow_s  +
mov eax [esi+134h] +
add esp 10h +
push ebx  +
cmp eax 0FFFFFFFFh +
jz loc_1018BB1  +
push eax  +
push ebx  +
lea eax [ebp-38h] +
push eax  +
push ebx  +
push 2  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-78h]  +
call dword ptr [esi+120h]  +
jmp loc_1018BC8  +
lea eax [ebp-38h] +
push eax  +
push ebx  +
push 2  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-78h]  +
call ds:RegCreateKeyExW  +
mov [ebp-3Ch] eax +
cmp eax ebx +
jnz loc_1018C93  +
cmp dword ptr [edi+18h] 8 +
jb loc_1018BDE  +
mov eax [edi+4] +
jmp loc_1018BE1  +
lea eax [edi+4] +
push eax  +
lea ecx [ebp-94h] +
call sub_100159C  +
lea eax [ebp-94h] +
push eax  +
push offset dword_1001334  +
push dword ptr [ebp-38h]  +
mov byte ptr [ebp-4] 5 +
call sub_102104B  +
push ebx  +
push 1  +
lea ecx [ebp-94h] +
mov byte ptr [ebp-4] 4 +
call sub_1001B47  +
push dword ptr [edi+1Ch]  +
push offset aId  +
push dword ptr [ebp-38h]  +
call sub_1020B9A  +
push dword ptr [edi+24h]  +
push offset aFlags  +
push dword ptr [ebp-38h]  +
call sub_1020B9A  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call sub_1012AD0  +
mov ecx [ebp-44h] +
inc dword ptr [ebp-30h]  +
add dword ptr [ebp-40h] 28h +
call sub_1013478  +
cmp [ebp-30h] eax +
jb loc_1018B67  +
mov ecx [ebp-44h] +
call sub_1013478  +
push eax  +
push offset aCount_0  +
push dword ptr [ebp-78h]  +
call sub_1020B9A  +
lea ecx [ebp-78h] +
mov byte ptr [ebp-4] 1 +
call sub_10211C5  +
lea ecx [ebp-54h] +
call sub_100256E  +
lea ecx [ebp-34h] +
call sub_1012AD0  +
call sub_1002043  +
retn   +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1018CC0  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018CC0  +
cmp byte ptr [eax+19h] 2 +
jb loc_1018CC0  +
push dword ptr [ebp-3Ch]  +
push offset dword_1008514  +
push 61h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0A5Dh  +
push offset aDW7rtmAdminW_0  +
push dword ptr [ebp-3Ch]  +
jmp loc_1018A8D  +
***
call sub_10021E6  +
mov edi [ebp+8] +
and dword ptr [ebp-38h] 0 +
and dword ptr [edi] 0 +
mov esi ecx +
mov [ebp-3Ch] edi +
xor ebx ebx +
inc ebx  +
lea ecx [ebp-2Ch] +
mov [ebp-38h] ebx +
call sub_10039B9  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
mov [ebp-4] ebx +
call sub_101548D  +
push 90h  +
call sub_1004829  +
pop ecx  +
mov [ebp-34h] eax +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_1018DD6  +
cmp dword ptr [esi+48h] 8 +
jb loc_1018DAB  +
mov eax [esi+34h] +
jmp loc_1018DAE  +
lea eax [esi+34h] +
push 20019h  +
lea ecx [esi+8] +
mov [ebp-30h] eax +
call sub_1020FAD  +
push dword ptr [ebp-30h]  +
mov ecx [ebp-34h] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+4Ch]  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_1018110  +
jmp loc_1018DD8  +
xor eax eax +
push eax  +
mov ecx edi +
mov [ebp-4] bl +
call sub_1004E7A  +
push 0  +
push ebx  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
mov eax edi +
call sub_1002043  +
retn 4  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
xor ebx ebx +
lea ecx [esi+14h] +
mov dword ptr [esi] offset off_10085F0 +
mov [esi+4] bl +
mov dword ptr [esi+8] 101000h +
mov [esi+0Ch] ebx +
mov [esi+10h] bl +
mov [esi+11h] bl +
call sub_10039B9  +
push 30h  +
mov [ebp-4] ebx +
call sub_1004829  +
pop ecx  +
mov ecx eax +
mov [ebp-14h] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx ebx +
jz loc_1018E50  +
call sub_10181C1  +
jmp loc_1018E52  +
xor eax eax +
push eax  +
lea ecx [esi+30h] +
call sub_10018C6  +
mov eax esi +
call sub_1002052  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
cmp dword ptr [ebp+0Ch] 1 +
push dword ptr [ebp+8]  +
setz al  +
and dword ptr [esi+0Ch] 0 +
mov dword ptr [esi] offset off_10085F0 +
mov [esi+4] al +
mov dword ptr [esi+8] 101000h +
call sub_1012B41  +
lea ecx [esi+14h] +
mov [esi+10h] al +
mov byte ptr [esi+11h] 0 +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
push 30h  +
call sub_1004829  +
pop ecx  +
mov ecx eax +
mov [ebp+0Ch] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_1018ECB  +
call sub_10181C1  +
jmp loc_1018ECD  +
xor eax eax +
push eax  +
lea ecx [esi+30h] +
call sub_10018C6  +
mov eax esi +
call sub_1002052  +
retn 8  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+80h] +
call sub_1015D9A  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1012E9B  +
lea edi [esi+48h] +
mov ecx edi +
call sub_1018DFD  +
mov dword ptr [edi] offset off_10085F0 +
xor eax eax +
mov dword ptr [esi] offset off_10085F0 +
lea edi [esi+0D0h] +
stos   +
stos   +
stos   +
stos   +
stos   +
stos   +
and byte ptr [esi+0E6h] 0FCh +
and byte ptr [esi+0E5h] 0FCh +
mov eax esi +
call sub_1002052  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-18h] esi +
mov dword ptr [esi] offset off_1004A08 +
mov dword ptr [esi+4] 0 +
mov edi [ebp+8] +
mov eax [edi+0Ch] +
and dword ptr [ebp-4] 0 +
push eax  +
mov ecx edi +
lea ebx [esi+8] +
call sub_1013802  +
push eax  +
mov ecx ebx +
call sub_1018E68  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_1019050 +
mov dword ptr [ebx] offset off_10085F0 +
mov dword ptr [ebp-10h] 1 +
call sub_101375C  +
push dword ptr [ebp-10h]  +
lea ebx [esi+18h] +
call sub_1012B41  +
mov [ebx] al +
lea eax [esi+0Ch] +
push eax  +
mov ecx edi +
call sub_101403F  +
lea eax [esi+10h] +
push eax  +
mov ecx edi +
call sub_10140B4  +
push ebx  +
mov ecx edi +
call sub_1014195  +
lea eax [esi+19h] +
push eax  +
mov ecx edi +
call sub_1014213  +
lea ebx [esi+1Ch] +
push ebx  +
mov ecx edi +
call sub_1017273  +
cmp dword ptr [esi+30h] 0 +
jz loc_1018FF8  +
cmp byte_1029704 0 +
jz loc_101901A  +
cmp dword ptr [edi+48h] 8 +
jb loc_1019003  +
mov eax [edi+34h] +
jmp loc_1019006  +
lea eax [edi+34h] +
push ebx  +
mov ecx edi +
mov [ebp+8] eax +
call sub_1013802  +
push eax  +
push dword ptr [ebp+8]  +
call sub_101601D  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_1018234  +
push dword ptr [eax]  +
lea ecx [esi+38h] +
mov byte ptr [ebp-4] 2 +
call sub_1004E7A  +
mov ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_1019043  +
call sub_1004249  +
mov eax esi +
call sub_1002052  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1013D99  +
test byte ptr [ebp+8] 1 +
jz loc_1019073  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10021E6  +
mov esi [ebp+8] +
mov ebx ecx +
xor edi edi +
mov dword ptr [ebx] offset off_1004A08 +
mov [ebp-40h] ebx +
mov [ebp-34h] esi +
mov [ebx+4] edi +
push esi  +
lea ecx [ebx+8] +
mov [ebp-4] edi +
mov dword ptr [ebx] offset off_1019330 +
call sub_101427B  +
push esi  +
lea ecx [ebx+58h] +
mov byte ptr [ebp-4] 1 +
call sub_1018F4B  +
lea ecx [ebx+0A0h] +
mov [ebx+98h] edi +
mov dword ptr [ebx+9Ch] 1 +
call sub_10039B9  +
lea ecx [ebx+0BCh] +
call sub_10039B9  +
lea edi [ebx+0D8h] +
mov esi offset dword_1008988 +
movs   +
movs   +
movs   +
lea ecx [ebx+0E8h] +
movs   +
call sub_1013BD3  +
mov edi [ebp-34h] +
lea eax [ebx+98h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 5 +
call sub_1013A8D  +
lea eax [ebx+9Ch] +
push eax  +
mov ecx edi +
call sub_101375C  +
cmp dword ptr [edi+48h] 8 +
jb loc_101912E  +
mov eax [edi+34h] +
jmp loc_1019131  +
lea eax [edi+34h] +
lea esi [ebx+0BCh] +
push eax  +
mov ecx esi +
call sub_1001DE7  +
lea eax [ebx+0D8h] +
push eax  +
mov ecx edi +
call sub_1013C02  +
cmp dword ptr [esi+18h] 8 +
jb loc_1019158  +
mov eax [esi+4] +
jmp loc_101915B  +
lea eax [esi+4] +
push dword ptr [ebx+98h]  +
lea ecx [ebx+0E8h] +
push dword ptr [ebx+9Ch]  +
push eax  +
call sub_1017319  +
lea eax [ebx+0A0h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-34h] 0 +
call sub_1015CE9  +
test al al +
jnz loc_101927B  +
cmp dword ptr [esi+18h] 8 +
jb loc_1019198  +
mov eax [esi+4] +
jmp loc_101919B  +
lea eax [esi+4] +
mov edi ds:_wcsicmp +
push offset aSecurity  +
push eax  +
call edi  +
neg eax  +
sbb al al +
inc al  +
cmp dword ptr [esi+18h] 8 +
pop ecx  +
pop ecx  +
mov [ebp-34h] al +
jb loc_10191BF  +
mov esi [esi+4] +
jmp loc_10191C2  +
add esi 4 +
push offset aSystem  +
push esi  +
call edi  +
neg eax  +
pop ecx  +
sbb al al +
pop ecx  +
inc al  +
lea ecx [ebp-2Ch] +
mov [ebp-2Dh] al +
call sub_10039B9  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx offset unk_1029090 +
mov byte ptr [ebp-4] 6 +
call sub_1015B45  +
cmp byte ptr [ebp-34h] 0 +
jz loc_10191FC  +
push offset aSecurity_0  +
jmp loc_1019217  +
cmp dword ptr [ebx+98h] 1 +
jz loc_1019212  +
cmp byte ptr [ebp-2Dh] 0 +
jnz loc_1019212  +
push offset aApplication_0  +
jmp loc_1019217  +
push offset aSystem_0  +
lea ecx [ebp-2Ch] +
call sub_10046D1  +
xor edi edi +
mov [ebp-38h] edi +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 7 +
jnb loc_1019234  +
lea eax [ebp-28h] +
lea ecx [ebp-38h] +
push ecx  +
push 20019h  +
push edi  +
push eax  +
push 80000002h  +
call ds:RegOpenKeyExW  +
cmp eax edi +
jnz loc_1019262  +
lea eax [ebx+0A0h] +
push eax  +
push offset aCustomsd  +
push dword ptr [ebp-38h]  +
call sub_102165D  +
lea ecx [ebp-38h] +
call sub_1012AD0  +
push edi  +
push 1  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call sub_1001B47  +
jmp loc_101927D  +
xor edi edi +
cmp [ebx+0B4h] edi +
jbe loc_10192CA  +
lea esi [ebx+0A0h] +
cmp dword ptr [esi+18h] 8 +
mov [ebp-3Ch] edi +
jb loc_1019299  +
mov eax [esi+4] +
jmp loc_101929C  +
lea eax [esi+4] +
push edi  +
lea ecx [ebp-3Ch] +
push ecx  +
push 1  +
push eax  +
call ConvertStringSecurityDescriptorToSecurityDescriptorW  +
test eax eax +
jnz loc_10192BF  +
push dword ptr [ebp-34h]  +
push dword ptr [ebx+98h]  +
call sub_1013298  +
mov ecx esi +
jmp loc_10192DE  +
push dword ptr [ebp-3Ch]  +
call ds:LocalFree  +
jmp loc_10192E4  +
push dword ptr [ebp-34h]  +
push dword ptr [ebx+98h]  +
call sub_1013298  +
lea ecx [ebx+0A0h] +
push eax  +
call sub_1001DE7  +
mov eax ebx +
call sub_1002043  +
retn 4  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+0E8h] +
mov dword ptr [ebp-4] 1 +
call sub_1013DC7  +
push 0  +
push 1  +
lea ecx [esi+0BCh] +
call sub_1001B47  +
push 0  +
push 1  +
lea ecx [esi+0A0h] +
call sub_1001B47  +
lea ecx [esi+58h] +
call sub_1013D99  +
mov eax offset off_1004A08 +
mov [esi+8] eax +
mov [esi] eax +
call sub_1002052  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1019339  +
test byte ptr [ebp+8] 1 +
jz loc_10193B1  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10021E6  +
mov eax [ebp+14h] +
mov ebx [ebp+18h] +
mov edi [ebp+8] +
mov [ebp-40h] eax +
mov eax [ebp+1Ch] +
mov esi ecx +
mov [ebp-44h] esi +
mov [ebp-3Ch] ebx +
mov [ebp-38h] eax +
call sub_10180B0  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+90h] +
mov dword ptr [esi] offset off_1019784 +
call sub_1018EE5  +
cmp dword ptr [edi+18h] 8 +
mov byte ptr [ebp-4] 1 +
jb loc_101940F  +
mov eax [edi+4] +
jmp loc_1019412  +
lea eax [edi+4] +
push eax  +
call sub_1021E45  +
push dword ptr [ebp-38h]  +
lea ecx [esi+14h] +
mov [esi+10h] ebx +
call sub_1001DE7  +
push edi  +
lea ecx [esi+30h] +
call sub_10055EA  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
push 80h  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call sub_10152B1  +
cmp dword ptr [edi+18h] 8 +
jb loc_1019453  +
mov eax [edi+4] +
jmp loc_1019456  +
lea eax [edi+4] +
lea ecx [ebp-2Ch] +
push ecx  +
push eax  +
mov ecx offset unk_1029090 +
call sub_1015C0F  +
and dword ptr [ebp-30h] 0 +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1019475  +
lea eax [ebp-28h] +
mov ebx ds:RegOpenKeyExW +
lea ecx [ebp-34h] +
push ecx  +
push 20019h  +
push 0  +
push eax  +
push 80000002h  +
call ebx  +
test eax eax +
jnz loc_1019505  +
push dword ptr [ebp-34h]  +
xor edi edi +
inc edi  +
mov [esi+0Ch] edi +
call ds:RegCloseKey  +
cmp dword ptr [ebp+10h] 3 +
jz loc_10194B7  +
cmp dword ptr [ebp+10h] 2 +
jz loc_10194B7  +
mov [ebp-30h] edi +
xor edi edi +
jmp loc_101957D  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10194E3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10194E3  +
cmp byte ptr [eax+19h] 2 +
jb loc_10194E3  +
push 57h  +
push offset dword_1008514  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2B6h  +
push offset aDW7rtmAdminW_0  +
push 57h  +
lea ecx [ebp-68h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-68h] +
push eax  +
call _CxxThrowException  +
push dword ptr [ebp-38h]  +
lea ecx [ebp-2Ch] +
call sub_1001DE7  +
push 5Ch  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100FD47  +
push offset aChannels_2  +
lea ecx [ebp-2Ch] +
call sub_10046D1  +
push 5Ch  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100FD47  +
push 0FFFFFFFFh  +
push 0  +
push edi  +
lea ecx [ebp-2Ch] +
call sub_100FC2B  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
mov dword ptr [esi+0Ch] 2 +
jnb loc_1019555  +
lea eax [ebp-28h] +
lea ecx [ebp-34h] +
push ecx  +
push 20019h  +
xor edi edi +
push edi  +
push eax  +
push 80000002h  +
call ebx  +
test eax eax +
jnz loc_101957D  +
push dword ptr [ebp-34h]  +
call ds:RegCloseKey  +
mov dword ptr [ebp-30h] 1 +
mov eax [ebp+10h] +
sub eax edi +
jz loc_1019702  +
dec eax  +
jz loc_10196AA  +
dec eax  +
jz loc_101962E  +
dec eax  +
jz loc_10195CF  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10195C5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10195C5  +
cmp byte ptr [eax+19h] 2 +
jb loc_10195C5  +
push 57h  +
push offset dword_1008514  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2F0h  +
jmp loc_10194E8  +
cmp [ebp-30h] edi +
jz loc_1019702  +
mov eax off_1029004 +
mov esi 0B7h +
cmp eax offset off_1029004 +
jz loc_1019608  +
test byte ptr [eax+1Ch] 1 +
jz loc_1019608  +
cmp byte ptr [eax+19h] 2 +
jb loc_1019608  +
push esi  +
push offset dword_1008514  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2D7h  +
push offset aDW7rtmAdminW_0  +
push esi  +
lea ecx [ebp-0A8h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-0A8h] +
jmp loc_10194FF  +
cmp [ebp-30h] edi +
jz loc_1019702  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1019643  +
lea eax [ebp-28h] +
push edi  +
push edi  +
push eax  +
push dword ptr [ebp-3Ch]  +
call ds:RegDeleteKeyExW  +
mov ebx eax +
cmp ebx edi +
jz loc_1019702  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1019684  +
test byte ptr [eax+1Ch] 1 +
jz loc_1019684  +
cmp byte ptr [eax+19h] 2 +
jb loc_1019684  +
push ebx  +
push offset dword_1008514  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2E4h  +
push offset aDW7rtmAdminW_0  +
push ebx  +
lea ecx [ebp-0C8h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-0C8h] +
jmp loc_10194FF  +
cmp [ebp-30h] edi +
jnz loc_1019702  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10196DB  +
test byte ptr [eax+1Ch] 1 +
jz loc_10196DB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10196DB  +
push 2  +
push offset dword_1008514  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2ECh  +
push offset aDW7rtmAdminW_0  +
push 2  +
lea ecx [ebp-88h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-88h] +
jmp loc_10194FF  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101970E  +
lea eax [ebp-28h] +
lea ecx [ebp-48h] +
push ecx  +
lea ecx [esi+8] +
push ecx  +
push dword ptr [ebp-40h]  +
push 2001Fh  +
push edi  +
push edi  +
push edi  +
push eax  +
push dword ptr [ebp-3Ch]  +
call ds:RegCreateKeyExW  +
mov ebx eax +
cmp ebx edi +
jz loc_101976C  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101975C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101975C  +
cmp byte ptr [eax+19h] 2 +
jb loc_101975C  +
push ebx  +
push offset dword_1008514  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2FFh  +
push offset aDW7rtmAdminW_0  +
push ebx  +
jmp loc_10196E7  +
push edi  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
mov eax esi +
call sub_1002043  +
retn 18h  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+90h] +
call sub_1013DEA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1017A27  +
call sub_1002052  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101978D  +
test byte ptr [ebp+8] 1 +
jz loc_10197DD  +
push esi  +
call sub_1001B90  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1019803  +
cmp eax 0FFFFFFFFh +
jz loc_1019803  +
push eax  +
call ds:CloseHandle  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10197E9  +
mov eax [ebp+arg_0] +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ecx+9Ch] +
movs   +
movs   +
lea eax [ecx+0E5h] +
mov cl [eax] +
xor cl [ebp+arg_4] +
movs   +
movs   +
and cl 1 +
xor [eax] cl +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+30h] eax +
mov eax [ebp+arg_4] +
mov [ecx+34h] eax +
lea eax [ecx+0DBh] +
mov cl [eax] +
xor cl [ebp+arg_8] +
and cl 1 +
xor [eax] cl +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ecx+38h] +
movs   +
movs   +
lea eax [ecx+0DCh] +
mov cl [eax] +
xor cl [ebp+arg_4] +
movs   +
movs   +
and cl 1 +
xor [eax] cl +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov [ecx+50h] edx +
mov eax [eax+4] +
mov [ecx+54h] eax +
lea eax [ecx+0D8h] +
mov cl [eax] +
xor cl [ebp+arg_4] +
and cl 1 +
xor [eax] cl +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1019989  +
cmp word ptr [edi] 0 +
jz loc_1019989  +
mov esi ds:_wcsicmp +
push offset aTrue  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1019985  +
push offset dword_1008160  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1019985  +
push offset aFalse  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1019981  +
push offset dword_100815C  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1019981  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1019962  +
test byte ptr [eax+1Ch] 1 +
jz loc_1019962  +
cmp byte ptr [eax+19h] 2 +
jb loc_1019962  +
push 0Dh  +
push offset dword_10087C0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 1Eh  +
push offset aDW7rtmAdminW_2  +
push 0Dh  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
xor al al +
jmp loc_101998C  +
mov al 1 +
jmp loc_101998C  +
mov al [ebp+arg_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
call sub_1003100  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
push 20019h  +
push 0  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:RegOpenKeyExW  +
mov edi eax +
cmp edi 2 +
jnz loc_10199D5  +
lea ecx [ebp-10h] +
call sub_1012AD0  +
xor al al +
jmp loc_1019A2C  +
test edi edi +
jz loc_1019A22  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1019A04  +
test byte ptr [eax+1Ch] 1 +
jz loc_1019A04  +
cmp byte ptr [eax+19h] 2 +
jb loc_1019A04  +
push edi  +
push offset dword_10087C0  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2Eh  +
push offset aDW7rtmAdminW_2  +
push edi  +
lea ecx [ebp-30h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-30h] +
push eax  +
call _CxxThrowException  +
lea ecx [ebp-10h] +
call sub_1012AD0  +
mov al 1 +
call sub_1002052  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aCommittransact  +
push [ebp+hModule]  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1019A55  +
push [ebp+arg_4]  +
call eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1019A7F  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+11h] 0 +
jz loc_1019A7D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_1019A9D  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+11h] 0 +
jz loc_1019A9B  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov ecx [ecx] +
mov [eax+0Ch] ecx +
mov cl [ebp+arg_10] +
mov [eax+10h] cl +
mov byte ptr [eax+11h] 0 +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+11h] dl +
jz loc_1019AFE  +
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_101267A  +
add esp 14h +
pop esi  +
retn   +
mov ecx [eax+8] +
cmp [ecx+11h] dl +
jnz loc_1019B17  +
push ecx  +
call sub_1019A91  +
jmp loc_1019B1F  +
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_1019B1F  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+11h] dl +
jz loc_1019B0E  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+11h] 0 +
jnz loc_1019B9B  +
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp [ecx+0Ch] edx +
jnb loc_1019B91  +
mov ecx [ecx+8] +
jmp loc_1019B95  +
mov eax ecx +
mov ecx [ecx] +
cmp byte ptr [ecx+11h] 0 +
jz loc_1019B87  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+11h] 0 +
jnz loc_1019BC0  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1019BD4  +
mov [ecx+4] eax +
jmp loc_1019BE2  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_1019BDF  +
mov [ecx] eax +
jmp loc_1019BE2  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+11h] 0 +
jnz loc_1019C0C  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1019C20  +
mov [ecx+4] eax +
jmp loc_1019C2F  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_1019C2D  +
mov [ecx+8] eax +
jmp loc_1019C2F  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1019C5E  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1019AAE  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+11h] dl +
jz loc_1019C7A  +
mov eax [eax+8] +
jmp loc_1019CA0  +
mov ecx [eax] +
cmp [ecx+11h] dl +
jnz loc_1019C91  +
push ecx  +
call sub_1019A73  +
jmp loc_1019CA0  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_1019C99  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+11h] dl +
jz loc_1019C89  +
mov ecx [esi] +
cmp [ecx+11h] dl +
jnz loc_1019CA2  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+hModule] esi +
jnz loc_1019CBB  +
or eax 0FFFFFFFFh +
jmp loc_1019CE7  +
push offset aCreatetransact  +
push [ebp+hModule]  +
call ds:GetProcAddress  +
cmp eax esi +
jz loc_1019CB6  +
mov ecx [ebp+arg_4] +
cmp dword ptr [ecx+18h] 8 +
jb loc_1019CDB  +
mov ecx [ecx+4] +
jmp loc_1019CDE  +
add ecx 4 +
push ecx  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0  +
push 1  +
mov edi ecx +
call sub_1019B28  +
push [ebp+arg_10]  +
mov esi eax +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_1019C3E  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_1019B28  +
cmp eax ebx +
jz loc_1019D4E  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_1019D57  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_1019D60  +
mov [ecx] ebx +
mov [eax+11h] bl +
mov byte ptr [eax+10h] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+11h] 0 +
mov ebx ecx +
mov esi edi +
jnz loc_1019D9E  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_1019D6E  +
mov esi [esi] +
push edi  +
call sub_1001B90  +
cmp byte ptr [esi+11h] 0 +
pop ecx  +
mov edi esi +
jz loc_1019D83  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_10021E6  +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
mov esi [ebp+10h] +
lea edx [ebp-34h] +
mov [ebp-28h] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+10h]  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-2Ch] 0 +
push 4  +
mov byte ptr [ebp-4] 1 +
pop edi  +
mov ecx [ebp-34h] +
mov eax [ecx] +
lea edx [ebp-30h] +
push edx  +
call dword ptr [eax+4]  +
push dword ptr [eax]  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1004E7A  +
cmp dword ptr [eax] 0 +
mov ecx [ebp-30h] +
setnz bl  +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_1019E0A  +
call sub_1004249  +
and dword ptr [ebp-30h] 0 +
mov ecx [ebp-2Ch] +
test bl bl +
jz loc_101A1ED  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx [ebp-2Ch] +
mov ebx eax +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov [ebp-24h] eax +
mov ecx offset aLevel_1 +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019E56  +
test dx dx +
jz loc_1019E52  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019E56  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_1019E32  +
xor eax eax +
jmp loc_1019E5B  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1019E8A  +
mov ecx [ebp-28h] +
lea eax [ebp-4Ch] +
push eax  +
call sub_1012DE6  +
test al al +
jnz loc_1019DDA  +
push dword ptr [ebp-24h]  +
call sub_1013083  +
or byte ptr [esi+0DAh] 1 +
mov [esi+28h] eax +
jmp loc_1019DDA  +
mov ecx offset aKeywords_0 +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019EB5  +
test dx dx +
jz loc_1019EB1  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019EB5  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_1019E91  +
xor eax eax +
jmp loc_1019EBA  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1019EEA  +
mov ecx [ebp-28h] +
lea eax [ebp-3Ch] +
push eax  +
call sub_1012E22  +
test al al +
jnz loc_1019DDA  +
push 1  +
push dword ptr [ebp-24h]  +
call sub_1012FF0  +
push edx  +
push eax  +
mov ecx esi +
call sub_1019857  +
jmp loc_1019DDA  +
mov ecx offset aControlguid_0 +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019F15  +
test dx dx +
jz loc_1019F11  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019F15  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_1019EF1  +
xor eax eax +
jmp loc_1019F1A  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1019F50  +
mov ecx [ebp-28h] +
lea eax [ebp-20h] +
push eax  +
call sub_1013D25  +
test al al +
jnz loc_1019DDA  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-24h]  +
call sub_1013822  +
push 1  +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
call sub_1019881  +
jmp loc_1019DDA  +
mov ecx offset aBuffersize_0 +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019F7B  +
test dx dx +
jz loc_1019F77  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019F7B  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_1019F57  +
xor eax eax +
jmp loc_1019F80  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1019FAF  +
mov ecx [ebp-28h] +
lea eax [ebp-40h] +
push eax  +
call sub_1012C6C  +
test al al +
jnz loc_1019DDA  +
push dword ptr [ebp-24h]  +
call sub_1013083  +
or byte ptr [esi+0DDh] 1 +
mov [esi+8] eax +
jmp loc_1019DDA  +
mov ecx offset aFilemax_0 +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019FDA  +
test dx dx +
jz loc_1019FD6  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019FDA  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_1019FB6  +
xor eax eax +
jmp loc_1019FDF  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A00E  +
mov ecx [ebp-28h] +
lea eax [ebp-54h] +
push eax  +
call sub_1012BFF  +
test al al +
jnz loc_1019DDA  +
push dword ptr [ebp-24h]  +
call sub_1013083  +
or byte ptr [esi+0E4h] 1 +
mov [esi+18h] eax +
jmp loc_1019DDA  +
mov ecx offset aMinbuffers_0 +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A039  +
test dx dx +
jz loc_101A035  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A039  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_101A015  +
xor eax eax +
jmp loc_101A03E  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A06D  +
mov ecx [ebp-28h] +
lea eax [ebp-48h] +
push eax  +
call sub_1012CAB  +
test al al +
jnz loc_1019DDA  +
push dword ptr [ebp-24h]  +
call sub_1013083  +
or byte ptr [esi+0DEh] 1 +
mov [esi+0Ch] eax +
jmp loc_1019DDA  +
mov ecx offset aMaxbuffers_0 +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A098  +
test dx dx +
jz loc_101A094  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A098  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_101A074  +
xor eax eax +
jmp loc_101A09D  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A0CC  +
mov ecx [ebp-28h] +
lea eax [ebp-50h] +
push eax  +
call sub_1012CE7  +
test al al +
jnz loc_1019DDA  +
push dword ptr [ebp-24h]  +
call sub_1013083  +
or byte ptr [esi+0DFh] 1 +
mov [esi+10h] eax +
jmp loc_1019DDA  +
mov ecx offset aLatency_0 +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A0F7  +
test dx dx +
jz loc_101A0F3  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A0F7  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_101A0D3  +
xor eax eax +
jmp loc_101A0FC  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A12B  +
mov ecx [ebp-28h] +
lea eax [ebp-44h] +
push eax  +
call sub_1012D26  +
test al al +
jnz loc_1019DDA  +
push dword ptr [ebp-24h]  +
call sub_1013083  +
or byte ptr [esi+0E0h] 1 +
mov [esi+14h] eax +
jmp loc_1019DDA  +
mov ecx offset aClocktype_0 +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A156  +
test dx dx +
jz loc_101A152  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A156  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_101A132  +
xor eax eax +
jmp loc_101A15B  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A18A  +
mov ecx [ebp-28h] +
lea eax [ebp-38h] +
push eax  +
call sub_1012D65  +
test al al +
jnz loc_1019DDA  +
push dword ptr [ebp-24h]  +
call sub_101310D  +
or byte ptr [esi+0E1h] 1 +
mov [esi+20h] eax +
jmp loc_1019DDA  +
mov ecx offset aSidtype_0 +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A1B5  +
test dx dx +
jz loc_101A1B1  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A1B5  +
add eax edi +
add ecx edi +
test dx dx +
jnz loc_101A191  +
xor eax eax +
jmp loc_101A1BA  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1019DDA  +
mov ecx [ebp-28h] +
lea eax [ebp-38h] +
push eax  +
call sub_1012DA4  +
test al al +
jnz loc_1019DDA  +
push dword ptr [ebp-24h]  +
call sub_10131BF  +
or byte ptr [esi+0E2h] 1 +
mov [esi+24h] eax +
jmp loc_1019DDA  +
mov byte ptr [ebp-4] 0 +
test ecx ecx +
jz loc_101A1FA  +
call sub_1004249  +
mov ecx [ebp-34h] +
and dword ptr [ebp-2Ch] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
test ecx ecx +
jz loc_101A20E  +
call sub_1004249  +
call sub_1002043  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_1019B71  +
mov esi [esi+4] +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_101A2C0  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_101A2C0  +
lea eax [ebp+arg_4] +
jmp loc_101A2C6  +
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1019D3B  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+11h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_1019D6E  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
call sub_1003100  +
push offset aWevtapi_dll  +
call ds:LoadLibraryW  +
mov esi eax +
test esi esi +
jnz loc_101A3A8  +
call ds:GetLastError  +
mov esi eax +
test esi esi +
jnz loc_101A35F  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101A38A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101A38A  +
cmp byte ptr [eax+19h] 2 +
jb loc_101A38A  +
push esi  +
push offset dword_10087C0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 5Fh  +
push offset aDW7rtmAdminW_2  +
push esi  +
lea ecx [ebp-38h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-38h] +
push eax  +
call _CxxThrowException  +
push esi  +
push ds:FreeLibrary  +
lea eax [ebp-18h] +
push eax  +
call sub_1004AE6  +
and dword ptr [ebp-4] 0 +
push offset aEvtintassertco  +
push esi  +
call ds:GetProcAddress  +
test eax eax +
jnz loc_101A422  +
call ds:GetLastError  +
mov esi eax +
test esi esi +
jnz loc_101A3DD  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101A408  +
test byte ptr [eax+1Ch] 1 +
jz loc_101A408  +
cmp byte ptr [eax+19h] 2 +
jb loc_101A408  +
push esi  +
push offset dword_10087C0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 68h  +
push offset aDW7rtmAdminW_2  +
push esi  +
lea ecx [ebp-58h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-58h] +
jmp loc_101A3A2  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 0  +
call eax  +
test eax eax +
jnz loc_101A445  +
call ds:GetLastError  +
mov esi eax +
lea eax [ebp-18h] +
push eax  +
call sub_1003FFD  +
mov eax esi +
jmp loc_101A450  +
lea eax [ebp-18h] +
push eax  +
call sub_1003FFD  +
xor eax eax +
call sub_1002052  +
retn 8  +
***
call sub_1003100  +
push offset aWevtapi_dll  +
call ds:LoadLibraryW  +
mov esi eax +
test esi esi +
jnz loc_101A4E7  +
call ds:GetLastError  +
mov esi eax +
test esi esi +
jnz loc_101A49E  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101A4C9  +
test byte ptr [eax+1Ch] 1 +
jz loc_101A4C9  +
cmp byte ptr [eax+19h] 2 +
jb loc_101A4C9  +
push esi  +
push offset dword_10087C0  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 75h  +
push offset aDW7rtmAdminW_2  +
push esi  +
lea ecx [ebp-38h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-38h] +
push eax  +
call _CxxThrowException  +
push esi  +
push ds:FreeLibrary  +
lea eax [ebp-18h] +
push eax  +
call sub_1004AE6  +
and dword ptr [ebp-4] 0 +
push offset aEvtintretractc  +
push esi  +
call ds:GetProcAddress  +
test eax eax +
jnz loc_101A561  +
call ds:GetLastError  +
mov esi eax +
test esi esi +
jnz loc_101A51C  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101A547  +
test byte ptr [eax+1Ch] 1 +
jz loc_101A547  +
cmp byte ptr [eax+19h] 2 +
jb loc_101A547  +
push esi  +
push offset dword_10087C0  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 7Eh  +
push offset aDW7rtmAdminW_2  +
push esi  +
lea ecx [ebp-58h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-58h] +
jmp loc_101A4E1  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 0  +
call eax  +
test eax eax +
jnz loc_101A584  +
call ds:GetLastError  +
mov esi eax +
lea eax [ebp-18h] +
push eax  +
call sub_1003FFD  +
mov eax esi +
jmp loc_101A58F  +
lea eax [ebp-18h] +
push eax  +
call sub_1003FFD  +
xor eax eax +
call sub_1002052  +
retn 8  +
***
call sub_10021E6  +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
mov esi [ebp+10h] +
lea edx [ebp-4Ch] +
mov [ebp-38h] eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+10h]  +
xor edi edi +
mov [ebp-4] edi +
mov [ebp-34h] edi +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-4Ch] +
mov eax [ecx] +
lea edx [ebp-48h] +
push edx  +
call dword ptr [eax+4]  +
push dword ptr [eax]  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call sub_1004E7A  +
cmp [eax] edi +
mov ecx [ebp-48h] +
setnz bl  +
mov byte ptr [ebp-4] 1 +
cmp ecx edi +
jz loc_101A60D  +
call sub_1004249  +
mov ecx [ebp-34h] +
mov [ebp-48h] edi +
test bl bl +
jz loc_101A7C5  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx [ebp-34h] +
mov ebx eax +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov [ebp-3Ch] eax +
mov ecx offset aRetention_0 +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A65A  +
cmp dx di +
jz loc_101A656  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A65A  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_101A634  +
xor eax eax +
jmp loc_101A65F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_101A68F  +
mov ecx [ebp-38h] +
lea eax [ebp-2Dh] +
push eax  +
call sub_1014195  +
test al al +
jnz loc_101A5DE  +
push edi  +
push dword ptr [ebp-3Ch]  +
call sub_10198D9  +
or byte ptr [esi+0D6h] 1 +
mov [esi+58h] al +
jmp loc_101A5DE  +
mov ecx offset aMaxsize_0 +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A6BC  +
cmp dx di +
jz loc_101A6B8  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A6BC  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_101A696  +
xor eax eax +
jmp loc_101A6C1  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_101A70D  +
push dword ptr [ebp-3Ch]  +
call sub_1012FF0  +
mov ecx [ebp-38h] +
mov [ebp-44h] eax +
lea eax [ebp-54h] +
push eax  +
mov [ebp-40h] edx +
call sub_10140B4  +
test al al +
jz loc_101A6FB  +
mov ecx [ebp-50h] +
cmp ecx [ebp-40h] +
jb loc_101A6FB  +
mov eax [ebp-54h] +
ja loc_101A6F5  +
cmp eax [ebp-44h] +
jbe loc_101A6FB  +
mov [ebp-44h] eax +
mov [ebp-40h] ecx +
push 1  +
lea eax [ebp-44h] +
push eax  +
mov ecx esi +
call sub_10198AD  +
jmp loc_101A5DE  +
mov ecx offset aFilter +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A73A  +
cmp dx di +
jz loc_101A736  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A73A  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_101A714  +
xor eax eax +
jmp loc_101A73F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_101A75F  +
mov ecx [ebp-34h] +
mov eax [ecx] +
lea edx [ebp-2Ch] +
push edx  +
call dword ptr [eax+4]  +
push edi  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
jmp loc_101A5DE  +
mov ecx offset aAutobackup_0 +
mov eax ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A78C  +
cmp dx di +
jz loc_101A788  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A78C  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_101A766  +
xor eax eax +
jmp loc_101A791  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_101A5DE  +
mov ecx [ebp-38h] +
lea eax [ebp-2Dh] +
push eax  +
call sub_1014213  +
test al al +
jnz loc_101A5DE  +
push edi  +
push dword ptr [ebp-3Ch]  +
call sub_10198D9  +
or byte ptr [esi+0D7h] 1 +
mov [esi+59h] al +
jmp loc_101A5DE  +
mov byte ptr [ebp-4] 0 +
cmp ecx edi +
jz loc_101A7D2  +
call sub_1004249  +
mov ecx [ebp-4Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-34h] edi +
cmp ecx edi +
jz loc_101A7E5  +
call sub_1004249  +
call sub_1002043  +
retn 0Ch  +
***
call sub_1003100  +
mov edi ecx +
cmp dword ptr [edi+8] 3FFFFFFEh +
jb loc_101A845  +
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_1009A4D  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_100991A  +
push offset dword_1026570  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_1019D03  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_101A871  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_101A88F  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_101A884  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_101A892  +
mov [eax] ebx +
jmp loc_101A892  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_101A892  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
jmp loc_101A92C  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_101A8DD  +
mov edx [edx+8] +
cmp byte ptr [edx+10h] 0 +
jz loc_101A8E5  +
cmp esi [ecx+8] +
jnz loc_101A8BD  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1019BA4  +
mov eax [esi+4] +
mov byte ptr [eax+10h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+10h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1019BF0  +
jmp loc_101A929  +
mov edx [edx] +
cmp byte ptr [edx+10h] 0 +
jnz loc_101A8FD  +
mov byte ptr [ecx+10h] 1 +
mov byte ptr [edx+10h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+10h] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_101A929  +
cmp esi [ecx] +
jnz loc_101A90B  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1019BF0  +
mov eax [esi+4] +
mov byte ptr [eax+10h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+10h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1019BA4  +
lea eax [esi+4] +
mov ecx [eax] +
cmp byte ptr [ecx+10h] 0 +
jz loc_101A89C  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+10h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1002052  +
retn 10h  +
***
call sub_1003100  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+11h] 0 +
jz loc_101A99E  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_1009A4D  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_10098A1  +
push offset dword_1026590  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_1007DC0 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_1019AE1  +
mov edx [edi] +
cmp byte ptr [edx+11h] 0 +
jz loc_101A9B3  +
mov ebx [edi+8] +
jmp loc_101A9CC  +
mov eax [edi+8] +
cmp byte ptr [eax+11h] 0 +
jz loc_101A9C0  +
mov ebx edx +
jmp loc_101A9CC  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_101AA35  +
cmp byte ptr [ebx+11h] 0 +
mov esi [edi+4] +
jnz loc_101A9D8  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_101A9E8  +
mov [eax+4] ebx +
jmp loc_101A9F3  +
cmp [esi] edi +
jnz loc_101A9F0  +
mov [esi] ebx +
jmp loc_101A9F3  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_101AA12  +
cmp byte ptr [ebx+11h] 0 +
jz loc_101AA04  +
mov eax esi +
jmp loc_101AA0D  +
push ebx  +
call sub_1019A91  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_101AA91  +
cmp byte ptr [ebx+11h] 0 +
jz loc_101AA24  +
mov eax esi +
jmp loc_101AA2D  +
push ebx  +
call sub_1019A73  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_101AA91  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_101AA45  +
mov esi eax +
jmp loc_101AA5E  +
cmp byte ptr [ebx+11h] 0 +
mov esi [eax+4] +
jnz loc_101AA51  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_101AA6E  +
mov [ecx+4] eax +
jmp loc_101AA7C  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101AA79  +
mov [ecx] eax +
jmp loc_101AA7C  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+10h] +
mov dl [edi+10h] +
mov [eax+10h] dl +
mov [edi+10h] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+10h] 1 +
jz loc_101AB55  +
jmp loc_101AB9A  +
cmp byte ptr [ebx+10h] 1 +
jnz loc_101AB96  +
mov eax [esi] +
cmp ebx eax +
jnz loc_101AB1C  +
mov eax [esi+8] +
cmp byte ptr [eax+10h] 0 +
jnz loc_101AACD  +
mov byte ptr [eax+10h] 1 +
push esi  +
mov byte ptr [esi+10h] 0 +
call sub_1019BA4  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+11h] 0 +
jnz loc_101AB50  +
mov edx [eax] +
cmp byte ptr [edx+10h] 1 +
jnz loc_101AAE4  +
mov edx [eax+8] +
cmp byte ptr [edx+10h] 1 +
jz loc_101AB4C  +
mov edx [eax+8] +
cmp byte ptr [edx+10h] 1 +
jnz loc_101AB03  +
mov edx [eax] +
mov byte ptr [edx+10h] 1 +
push eax  +
mov byte ptr [eax+10h] 0 +
call sub_1019BF0  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+10h] +
mov [eax+10h] dl +
mov byte ptr [esi+10h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+10h] 1 +
call sub_1019BA4  +
jmp loc_101AB96  +
cmp byte ptr [eax+10h] 0 +
jnz loc_101AB35  +
mov byte ptr [eax+10h] 1 +
push esi  +
mov byte ptr [esi+10h] 0 +
call sub_1019BF0  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+11h] 0 +
jnz loc_101AB50  +
mov edx [eax+8] +
cmp byte ptr [edx+10h] 1 +
jnz loc_101AB62  +
mov edx [eax] +
cmp byte ptr [edx+10h] 1 +
jnz loc_101AB62  +
mov byte ptr [eax+10h] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_101AB96  +
jmp loc_101AAA0  +
mov edx [eax] +
cmp byte ptr [edx+10h] 1 +
jnz loc_101AB80  +
mov edx [eax+8] +
mov byte ptr [edx+10h] 1 +
push eax  +
mov byte ptr [eax+10h] 0 +
call sub_1019BA4  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+10h] +
mov [eax+10h] dl +
mov byte ptr [esi+10h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+10h] 1 +
call sub_1019BF0  +
mov byte ptr [ebx+10h] 1 +
push edi  +
call sub_1001B90  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_101ABAF  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1002052  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 54h +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_10055EA  +
mov ecx [ebp+arg_0] +
push offset aChannels  +
call sub_10046D1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+0ACh] +
call sub_1001DE7  +
lea eax [esi+0D5h] +
mov cl [eax] +
xor cl [ebp+arg_4] +
pop esi  +
and cl 1 +
xor [eax] cl +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1021E60  +
push [ebp+arg_0]  +
lea ecx [esi+70h] +
call sub_1001DE7  +
mov byte ptr [esi+0A0h] 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1001DE7  +
mov byte ptr [esi+0A1h] 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+1Ch] +
call sub_1001DE7  +
mov byte ptr [esi+0A2h] 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+38h] +
call sub_1001DE7  +
mov byte ptr [esi+0A3h] 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+54h] +
call sub_1001DE7  +
mov byte ptr [esi+0A4h] 1 +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10021E6  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
mov ecx offset unk_1029090 +
call sub_101ABC4  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101AD1C  +
lea eax [ebp-28h] +
push eax  +
push 80000002h  +
call sub_1019997  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
mov bl al +
call sub_1001B47  +
mov al bl +
call sub_1002043  +
retn   +
***
call sub_10021E6  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
mov ecx offset unk_1029090 +
call sub_1015B06  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101AD74  +
lea eax [ebp-28h] +
push eax  +
push 80000002h  +
call sub_1019997  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
mov bl al +
call sub_1001B47  +
mov al bl +
call sub_1002043  +
retn   +
***
call sub_10021E6  +
mov eax [ebp+0Ch] +
mov esi [ebp+8] +
xor ebx ebx +
mov edi ecx +
mov [ebp-188h] eax +
mov [ebp-180h] ebx +
lea ecx [ebp-64h] +
mov [ebp-4] ebx +
call sub_10039B9  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
mov eax [esi] +
push offset aName  +
lea ecx [ebp-184h] +
push ecx  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
mov dword ptr [ebp-17Ch] 20006h +
call dword ptr [eax+18h]  +
mov ecx [ebp-184h] +
mov byte ptr [ebp-4] 3 +
cmp ecx ebx +
jnz loc_101AE6D  +
cmp dword ptr [edi+38h] 8 +
jb loc_101AE0C  +
mov edi [edi+24h] +
jmp loc_101AE0F  +
add edi 24h +
push edi  +
push 47h  +
call near ptr dword_100BDDC+3  +
pop ecx  +
pop ecx  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101AE45  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AE45  +
cmp byte ptr [eax+19h] 2 +
jb loc_101AE45  +
push 0Dh  +
push offset dword_10087C0  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 182h  +
push offset aDW7rtmAdminW_2  +
push 0Dh  +
lea ecx [ebp-1ACh] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-1ACh] +
push eax  +
call _CxxThrowException  +
mov eax [ecx] +
call dword ptr [eax+8]  +
push eax  +
lea ecx [ebp-48h] +
call sub_100159C  +
cmp dword ptr [ebp-30h] 8 +
mov eax [ebp-44h] +
mov byte ptr [ebp-4] 4 +
jnb loc_101AE8B  +
lea eax [ebp-44h] +
push eax  +
call sub_101325F  +
test eax eax +
setnz al  +
cmp al bl +
jz loc_101B0AB  +
cmp dword ptr [ebp-30h] 8 +
mov eax [ebp-44h] +
jnb loc_101AEAA  +
lea eax [ebp-44h] +
lea ecx [ebp-64h] +
push ecx  +
push eax  +
mov ecx offset unk_1029090 +
call sub_1015C0F  +
lea eax [ebp-178h] +
push eax  +
mov dword ptr [ebp-178h] 114h +
call ds:RtlGetVersion  +
test eax eax +
jl loc_101AEF9  +
cmp dword ptr [ebp-174h] 7 +
jnb loc_101AEEF  +
cmp dword ptr [ebp-174h] 6 +
jnz loc_101AEF9  +
cmp dword ptr [ebp-170h] 1 +
jb loc_101AEF9  +
mov dword ptr [ebp-17Ch] 20106h +
push 30h  +
lea ecx [ebp-2Ch] +
call sub_10152B1  +
push 0FFFFFFFFh  +
push ebx  +
lea eax [ebp-64h] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_10024F0  +
push 5Ch  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100FD47  +
push 0FFFFFFFFh  +
push ebx  +
lea esi [edi+20h] +
push esi  +
lea ecx [ebp-2Ch] +
call sub_100FC2B  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101AF39  +
lea eax [ebp-28h] +
lea ecx [ebp-18Ch] +
push ecx  +
lea ecx [ebp-180h] +
push ecx  +
push ebx  +
push dword ptr [ebp-17Ch]  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push 80000002h  +
call ds:RegCreateKeyExW  +
mov [ebp-17Ch] eax +
cmp eax ebx +
jz loc_101AFAC  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101AF97  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AF97  +
cmp byte ptr [eax+19h] 2 +
jb loc_101AF97  +
push dword ptr [ebp-17Ch]  +
push offset dword_10087C0  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 1B2h  +
push offset aDW7rtmAdminW_2  +
push dword ptr [ebp-17Ch]  +
jmp loc_101AE51  +
cmp dword ptr [esi+18h] 8 +
jb loc_101AFB7  +
mov esi [esi+4] +
jmp loc_101AFBA  +
add esi 4 +
push offset aNtfs  +
push esi  +
call ds:_wcsicmp  +
mov esi ds:RegSetValueExW +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101B043  +
mov eax [ebp-188h] +
cmp dword ptr [eax+18h] 8 +
mov ecx [eax+14h] +
jb loc_101AFE6  +
mov eax [eax+4] +
jmp loc_101AFE9  +
add eax 4 +
lea ecx [ecx+ecx+2] +
push ecx  +
push eax  +
push 1  +
push ebx  +
push offset ValueName  +
push dword ptr [ebp-180h]  +
call esi  +
mov [ebp-17Ch] eax +
cmp eax ebx +
jz loc_101B043  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101B039  +
test byte ptr [eax+1Ch] 1 +
jz loc_101B039  +
cmp byte ptr [eax+19h] 2 +
jb loc_101B039  +
push dword ptr [ebp-17Ch]  +
push offset dword_10087C0  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 1C6h  +
jmp loc_101AF9C  +
cmp dword ptr [edi+74h] 8 +
mov eax [edi+70h] +
jb loc_101B051  +
mov edi [edi+60h] +
jmp loc_101B054  +
add edi 60h +
lea eax [eax+eax+2] +
push eax  +
push edi  +
push 2  +
push ebx  +
push offset aEventmessagefi  +
push dword ptr [ebp-180h]  +
call esi  +
mov esi eax +
cmp esi ebx +
jz loc_101B0AB  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101B09B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101B09B  +
cmp byte ptr [eax+19h] 2 +
jb loc_101B09B  +
push esi  +
push offset dword_10087C0  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 1D2h  +
push offset aDW7rtmAdminW_2  +
push esi  +
jmp loc_101AE51  +
push ebx  +
push 1  +
lea ecx [ebp-48h] +
call sub_1001B47  +
mov ecx [ebp-184h] +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_101B0C9  +
call sub_1004249  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
mov [ebp-184h] ebx +
call sub_1001B47  +
push ebx  +
push 1  +
lea ecx [ebp-64h] +
call sub_1001B47  +
lea ecx [ebp-180h] +
call sub_1012AD0  +
call sub_1002043  +
retn 8  +
***
call sub_10021E6  +
mov esi [ebp+8] +
mov edi [ebp+0Ch] +
mov ebx ecx +
lea ecx [ebp-2Ch] +
mov [ebp-80h] ebx +
mov [ebp-68h] esi +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
push esi  +
call sub_1015E70  +
mov eax [edi] +
push offset aName  +
lea ecx [ebp-78h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+18h]  +
mov ecx [ebp-78h] +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jnz loc_101B1FF  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101B1A1  +
lea eax [ebp-28h] +
push eax  +
push 47h  +
call near ptr dword_100BDDC+3  +
pop ecx  +
pop ecx  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101B1D7  +
test byte ptr [eax+1Ch] 1 +
jz loc_101B1D7  +
cmp byte ptr [eax+19h] 2 +
jb loc_101B1D7  +
push 0Dh  +
push offset dword_10087C0  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 1E5h  +
push offset aDW7rtmAdminW_2  +
push 0Dh  +
lea ecx [ebp-0A0h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-0A0h] +
push eax  +
call _CxxThrowException  +
mov eax [ecx] +
call dword ptr [eax+8]  +
push eax  +
lea ecx [ebp-48h] +
call sub_100159C  +
push 178h  +
mov byte ptr [ebp-4] 2 +
call sub_1004829  +
pop ecx  +
mov [ebp-74h] eax +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_101B24E  +
cmp dword ptr [ebx+1Ch] 8 +
jb loc_101B232  +
mov ebx [ebx+8] +
jmp loc_101B235  +
add ebx 8 +
push ebx  +
push 80000002h  +
push 0  +
push 0  +
push 2  +
lea ecx [ebp-48h] +
push ecx  +
mov ecx eax +
call sub_10193BD  +
jmp loc_101B250  +
xor eax eax +
push eax  +
lea ecx [ebp-70h] +
call sub_10018C6  +
mov ebx [ebp-70h] +
push 1  +
push dword ptr [ebp-68h]  +
lea esi [ebx+90h] +
mov ecx esi +
call sub_1019828  +
and dword ptr [ebp-6Ch] 0 +
and dword ptr [ebp-74h] 0 +
mov eax [edi] +
push offset aEnabled_0  +
lea ecx [ebp-68h] +
push ecx  +
mov ecx edi +
mov byte ptr [ebp-4] 6 +
call dword ptr [eax+18h]  +
push dword ptr [eax]  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 7 +
call sub_1004E7A  +
mov ecx [ebp-68h] +
mov byte ptr [ebp-4] 6 +
test ecx ecx +
jz loc_101B2A8  +
call sub_1004249  +
and dword ptr [ebp-68h] 0 +
lea eax [ebp-79h] +
push eax  +
mov ecx ebx +
call sub_1013FCA  +
test al al +
jnz loc_101B2E1  +
mov ecx [ebp-6Ch] +
test ecx ecx +
jz loc_101B2CA  +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov [ebp-68h] eax +
push 0  +
push dword ptr [ebp-68h]  +
call sub_10198D9  +
or byte ptr [esi+0D0h] 1 +
mov [esi+4Ch] al +
mov [esi+4] al +
mov eax [edi] +
push offset aType_0  +
lea ecx [ebp-68h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+18h]  +
push dword ptr [eax]  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 8 +
call sub_1004E7A  +
mov ecx [ebp-68h] +
mov byte ptr [ebp-4] 6 +
test ecx ecx +
jz loc_101B30F  +
call sub_1004249  +
mov ecx [ebp-6Ch] +
test ecx ecx +
jnz loc_101B370  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101B322  +
lea eax [ebp-28h] +
sub esp 1Ch +
push 7  +
pop ecx  +
mov edi esp +
push eax  +
lea esi [ebp-48h] +
push 48h  +
movs   +
call near ptr dword_100BDDC+3  +
add esp 24h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101B366  +
test byte ptr [eax+1Ch] 1 +
jz loc_101B366  +
cmp byte ptr [eax+19h] 2 +
jb loc_101B366  +
push 0Dh  +
push offset dword_10087C0  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 21Ah  +
jmp loc_101B1DC  +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ebx ds:_wcsicmp +
push offset aAdmin  +
push eax  +
mov [ebp-68h] eax +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101B3CA  +
push offset aOperational  +
push dword ptr [ebp-68h]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101B39F  +
inc eax  +
jmp loc_101B3CA  +
push offset aAnalytic  +
push dword ptr [ebp-68h]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101B3B3  +
push 2  +
jmp loc_101B3C9  +
push offset aDebug  +
push dword ptr [ebp-68h]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101B64C  +
push 3  +
pop eax  +
or byte ptr [esi+0D2h] 1 +
push offset aIsolation_0  +
lea ecx [ebp-68h] +
mov [esi+0C8h] eax +
mov eax [edi] +
push ecx  +
mov ecx edi +
call dword ptr [eax+18h]  +
push dword ptr [eax]  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 9 +
call sub_1004E7A  +
mov ecx [ebp-68h] +
mov byte ptr [ebp-4] 6 +
test ecx ecx +
jz loc_101B405  +
call sub_1004249  +
mov ecx [ebp-6Ch] +
test ecx ecx +
jz loc_101B4C3  +
mov eax [ecx] +
call dword ptr [eax+8]  +
push offset aSystem  +
push eax  +
mov [ebp-68h] eax +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101B43A  +
xor ebx ebx +
inc ebx  +
or [esi+0D1h] bl +
mov [esi+0CCh] ebx +
jmp loc_101B4D4  +
push offset aApplication  +
push dword ptr [ebp-68h]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101B4C3  +
push offset aCustom  +
push dword ptr [ebp-68h]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101B466  +
mov dword ptr [esi+0CCh] 2 +
jmp loc_101B4CA  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101B472  +
lea eax [ebp-28h] +
push dword ptr [ebp-68h]  +
lea esi [ebp-48h] +
sub esp 1Ch +
push 7  +
pop ecx  +
mov edi esp +
push eax  +
push 4Bh  +
movs   +
call near ptr dword_100BDDC+3  +
add esp 28h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101B4B9  +
test byte ptr [eax+1Ch] 1 +
jz loc_101B4B9  +
cmp byte ptr [eax+19h] 2 +
jb loc_101B4B9  +
push 0Dh  +
push offset dword_10087C0  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 251h  +
jmp loc_101B1DC  +
and dword ptr [esi+0CCh] 0 +
or byte ptr [esi+0D1h] 1 +
xor ebx ebx +
inc ebx  +
mov eax [edi] +
push offset aAccess  +
lea ecx [ebp-68h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+18h]  +
push dword ptr [eax]  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 0Ah +
call sub_1004E7A  +
mov ecx [ebp-68h] +
mov byte ptr [ebp-4] 6 +
test ecx ecx +
jz loc_101B502  +
call sub_1004249  +
lea ecx [ebp-64h] +
call sub_10039B9  +
mov ecx [ebp-70h] +
lea eax [ebp-64h] +
push eax  +
mov byte ptr [ebp-4] 0Bh +
call sub_1015CE9  +
test al al +
jnz loc_101B54B  +
mov ecx [ebp-6Ch] +
push ebx  +
test ecx ecx +
jz loc_101B52E  +
mov eax [ecx] +
call dword ptr [eax+8]  +
push eax  +
jmp loc_101B544  +
mov eax [esi+0CCh] +
cmp eax ebx +
jnz loc_101B53F  +
push offset aOBagSydA0xf0_0  +
jmp loc_101B544  +
push offset aOBagSydA0xf0_1  +
mov ecx esi +
call sub_101AC01  +
mov eax [edi] +
push offset aPublishing  +
lea ecx [ebp-68h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
push dword ptr [eax]  +
lea ecx [ebp-74h] +
mov byte ptr [ebp-4] 0Ch +
call sub_1004E7A  +
mov ecx [ebp-68h] +
mov byte ptr [ebp-4] 0Bh +
test ecx ecx +
jz loc_101B579  +
call sub_1004249  +
cmp dword ptr [ebp-74h] 0 +
jz loc_101B58E  +
mov ecx [ebp-80h] +
push esi  +
push dword ptr [ebp-70h]  +
push dword ptr [ebp-74h]  +
call sub_1019DAA  +
mov eax [edi] +
push offset aLogging  +
lea ecx [ebp-68h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
push dword ptr [eax]  +
lea ecx [ebp-74h] +
mov byte ptr [ebp-4] 0Dh +
call sub_1004E7A  +
mov ecx [ebp-68h] +
mov byte ptr [ebp-4] 0Bh +
test ecx ecx +
jz loc_101B5BC  +
call sub_1004249  +
mov edi [ebp-74h] +
test edi edi +
jz loc_101B5D0  +
mov ecx [ebp-80h] +
push esi  +
push dword ptr [ebp-70h]  +
push edi  +
call sub_101A5B1  +
mov ecx [ebp-70h] +
push ebx  +
call sub_10143F9  +
mov ecx [ebp-70h] +
push ebx  +
call sub_1016173  +
xor esi esi +
push esi  +
push ebx  +
lea ecx [ebp-64h] +
call sub_1001B47  +
mov byte ptr [ebp-4] 5 +
cmp edi esi +
jz loc_101B5FD  +
mov ecx edi +
call sub_1004249  +
mov ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 4 +
cmp ecx esi +
jz loc_101B60D  +
call sub_1004249  +
mov ecx [ebp-70h] +
mov byte ptr [ebp-4] 2 +
cmp ecx esi +
jz loc_101B61D  +
call sub_1004249  +
push esi  +
push ebx  +
lea ecx [ebp-48h] +
call sub_1001B47  +
mov ecx [ebp-78h] +
mov byte ptr [ebp-4] 0 +
cmp ecx esi +
jz loc_101B637  +
call sub_1004249  +
push esi  +
push ebx  +
lea ecx [ebp-2Ch] +
mov [ebp-78h] esi +
call sub_1001B47  +
call sub_1002043  +
retn 8  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101B658  +
lea eax [ebp-28h] +
push dword ptr [ebp-68h]  +
lea esi [ebp-48h] +
sub esp 1Ch +
push 7  +
pop ecx  +
mov edi esp +
push eax  +
push 4Ah  +
movs   +
call near ptr dword_100BDDC+3  +
add esp 28h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101B69F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101B69F  +
cmp byte ptr [eax+19h] 2 +
jb loc_101B69F  +
push 0Dh  +
push offset dword_10087C0  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 235h  +
jmp loc_101B1DC  +
***
call sub_10021E6  +
mov ebx [ebp+8] +
mov esi [ebp+0Ch] +
mov [ebp-40h] ecx +
lea ecx [ebp-2Ch] +
mov [ebp-44h] ebx +
call sub_10039B9  +
lea eax [ebp-2Ch] +
push eax  +
xor edi edi +
push ebx  +
mov [ebp-4] edi +
call sub_1015E70  +
mov eax [esi] +
lea ecx [ebp-38h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+10h]  +
mov [ebp-30h] edi +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-38h] +
mov eax [ecx] +
lea edx [ebp-3Ch] +
push edx  +
call dword ptr [eax+4]  +
push dword ptr [eax]  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call sub_1004E7A  +
cmp [eax] edi +
mov ecx [ebp-3Ch] +
setnz bl  +
mov byte ptr [ebp-4] 2 +
cmp ecx edi +
jz loc_101B72F  +
call sub_1004249  +
mov ecx [ebp-30h] +
mov [ebp-3Ch] edi +
test bl bl +
jz loc_101B899  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov edx eax +
mov ecx offset aChannel +
mov si [ecx] +
cmp si [edx] +
jnz loc_101B76F  +
cmp si di +
jz loc_101B76B  +
mov si [ecx+2] +
cmp si [edx+2] +
jnz loc_101B76F  +
add ecx 4 +
add edx 4 +
cmp si di +
jnz loc_101B749  +
xor ecx ecx +
jmp loc_101B774  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
cmp ecx edi +
jnz loc_101B7B8  +
mov ecx [ebp-30h] +
mov eax [ecx] +
push offset aName  +
lea edx [ebp-34h] +
push edx  +
call dword ptr [eax+18h]  +
mov byte ptr [ebp-4] 4 +
cmp [ebp-34h] edi +
jz loc_101B802  +
push dword ptr [ebp-30h]  +
mov ecx [ebp-40h] +
push dword ptr [ebp-44h]  +
call sub_101B147  +
mov ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
cmp ecx edi +
jz loc_101B7B0  +
call sub_1004249  +
mov [ebp-34h] edi +
jmp loc_101B700  +
mov ecx eax +
mov eax offset aImportchannel +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101B7E5  +
cmp dx di +
jz loc_101B7E1  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101B7E5  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_101B7BF  +
xor eax eax +
jmp loc_101B7EA  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_101B866  +
mov ecx [ebp-40h] +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp-30h]  +
call sub_101AD9A  +
jmp loc_101B700  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101B80E  +
lea eax [ebp-28h] +
push eax  +
push 47h  +
call near ptr dword_100BDDC+3  +
pop ecx  +
pop ecx  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101B844  +
test byte ptr [eax+1Ch] 1 +
jz loc_101B844  +
cmp byte ptr [eax+19h] 2 +
jb loc_101B844  +
push 0Dh  +
push offset dword_10087C0  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2E8h  +
push offset aDW7rtmAdminW_2  +
push 0Dh  +
lea ecx [ebp-64h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-64h] +
push eax  +
call _CxxThrowException  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101B892  +
test byte ptr [eax+1Ch] 1 +
jz loc_101B892  +
cmp byte ptr [eax+19h] 2 +
jb loc_101B892  +
push 0Dh  +
push offset dword_10087C0  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2F3h  +
jmp loc_101B849  +
mov byte ptr [ebp-4] 1 +
cmp ecx edi +
jz loc_101B8A6  +
call sub_1004249  +
mov ecx [ebp-38h] +
mov [ebp-30h] edi +
mov byte ptr [ebp-4] 0 +
cmp ecx edi +
jz loc_101B8B9  +
call sub_1004249  +
push edi  +
push 1  +
lea ecx [ebp-2Ch] +
mov [ebp-38h] edi +
call sub_1001B47  +
call sub_1002043  +
retn 8  +
***
call sub_10017A2  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+4] +
cmp byte ptr [eax+11h] 0 +
push edi  +
mov edi ecx +
mov byte ptr [ebp+var_4] 1 +
jnz loc_101BB01  +
mov ecx [ebx] +
cmp ecx [eax+0Ch] +
mov edi eax +
setb byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jz loc_101BAF8  +
mov eax [eax] +
jmp loc_101BAFB  +
mov eax [eax+8] +
cmp byte ptr [eax+11h] 0 +
jz loc_101BAE5  +
cmp byte ptr [ebp+var_4] 0 +
mov ecx edi +
mov [ebp+arg_4] ecx +
jz loc_101BB38  +
mov eax [esi+4] +
cmp edi [eax] +
jnz loc_101BB2D  +
push ebx  +
push edi  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_101A803  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
jmp loc_101BB4D  +
lea ecx [ebp+arg_4] +
call sub_1019C67  +
mov ecx [ebp+arg_4] +
mov eax [ecx+0Ch] +
cmp eax [ebx] +
jnb loc_101BB46  +
push ebx  +
push edi  +
push [ebp+var_4]  +
jmp loc_101BB17  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_101BB81  +
cmp [ebp+arg_8] eax +
jnz loc_101BB81  +
mov ecx esi +
call sub_101A304  +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_101BBA6  +
cmp ecx [ebp+arg_8] +
jz loc_101BBA6  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1019AE1  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101A954  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_101BB87  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101BB5B  +
push dword ptr [esi+4]  +
call sub_1001B90  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
call sub_1003100  +
mov esi [ebp+0Ch] +
mov eax [esi] +
lea ecx [ebp-18h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+10h]  +
xor edi edi +
lea ecx [ebp-38h] +
mov [ebp-4] edi +
call sub_101A2D8  +
mov [ebp+0Ch] edi +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-18h] +
mov eax [ecx] +
lea edx [ebp-20h] +
push edx  +
call dword ptr [eax+4]  +
push dword ptr [eax]  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1004E7A  +
cmp [eax] edi +
mov ecx [ebp-20h] +
setnz bl  +
mov byte ptr [ebp-4] 2 +
cmp ecx edi +
jz loc_101BC46  +
call sub_1004249  +
mov [ebp-20h] edi +
test bl bl +
jz loc_101BD12  +
mov ecx [ebp+0Ch] +
mov eax [ecx] +
push offset aValue  +
lea edx [ebp-14h] +
push edx  +
call dword ptr [eax+18h]  +
mov ecx [ebp-14h] +
mov byte ptr [ebp-4] 4 +
cmp ecx edi +
jz loc_101BCA7  +
mov eax [ecx] +
call dword ptr [eax+8]  +
push eax  +
call ds:_wtoi  +
pop ecx  +
mov [ebp-1Ch] eax +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-38h] +
call sub_101A297  +
mov eax [eax] +
cmp eax [ebp-34h] +
jnz loc_101BCBC  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-38h] +
call sub_101BAC3  +
mov ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
cmp ecx edi +
jz loc_101BCB4  +
call sub_1004249  +
mov [ebp-14h] edi +
jmp loc_101BC17  +
push 4Eh  +
call near ptr dword_100BDDC+3  +
pop ecx  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101BCF0  +
test byte ptr [eax+1Ch] 1 +
jz loc_101BCF0  +
cmp byte ptr [eax+19h] 2 +
jb loc_101BCF0  +
push 0Dh  +
push offset dword_10087C0  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 30Ch  +
push offset aDW7rtmAdminW_2  +
push 0Dh  +
lea ecx [ebp-58h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-58h] +
push eax  +
call _CxxThrowException  +
mov eax [esi] +
lea ecx [ebp-24h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+10h]  +
push dword ptr [eax]  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 5 +
call sub_1004E7A  +
mov ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
cmp ecx edi +
jz loc_101BD3B  +
call sub_1004249  +
mov dword ptr [ebp-10h] 10h +
mov ecx [ebp-18h] +
mov eax [ecx] +
lea edx [ebp-24h] +
push edx  +
call dword ptr [eax+4]  +
push dword ptr [eax]  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 6 +
call sub_1004E7A  +
cmp [eax] edi +
mov ecx [ebp-24h] +
setnz bl  +
mov byte ptr [ebp-4] 2 +
cmp ecx edi +
jz loc_101BD71  +
call sub_1004249  +
mov ecx [ebp+0Ch] +
mov [ebp-24h] edi +
test bl bl +
jz loc_101BF16  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx [ebp+0Ch] +
push offset aName  +
lea edx [ebp-14h] +
mov ebx eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+18h]  +
mov byte ptr [ebp-4] 7 +
cmp [ebp-14h] edi +
jz loc_101BED2  +
mov ecx [ebp+0Ch] +
mov eax [ecx] +
push offset aValue  +
lea edx [ebp-20h] +
push edx  +
call dword ptr [eax+18h]  +
mov ecx [ebp-14h] +
mov eax [ecx] +
mov byte ptr [ebp-4] 8 +
call dword ptr [eax+8]  +
push eax  +
call sub_101325F  +
cmp eax edi +
jz loc_101BDD0  +
mov eax [eax+4] +
jmp loc_101BE24  +
mov ecx [ebp-20h] +
cmp ecx edi +
jz loc_101BDE6  +
mov eax [ecx] +
call dword ptr [eax+8]  +
push eax  +
call ds:_wtoi  +
pop ecx  +
jmp loc_101BE24  +
mov eax [ebp-10h] +
mov [ebp-1Ch] eax +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-38h] +
call sub_101A297  +
mov esi [ebp-34h] +
jmp loc_101BE1A  +
inc dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
mov [ebp-1Ch] eax +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-38h] +
call sub_101A297  +
cmp [eax] esi +
jnz loc_101BE01  +
mov eax [ebp-10h] +
inc dword ptr [ebp-10h]  +
mov edx ebx +
mov ecx offset aImportchannel +
mov si [ecx] +
cmp si [edx] +
jnz loc_101BE51  +
cmp si di +
jz loc_101BE4D  +
mov si [ecx+2] +
cmp si [edx+2] +
jnz loc_101BE51  +
add ecx 4 +
add edx 4 +
cmp si di +
jnz loc_101BE2B  +
xor ecx ecx +
jmp loc_101BE56  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
cmp ecx edi +
jnz loc_101BE5E  +
push 1  +
jmp loc_101BE95  +
mov edx ebx +
mov ecx offset aChannel +
mov si [ecx] +
cmp si [edx] +
jnz loc_101BE8B  +
cmp si di +
jz loc_101BE87  +
mov si [ecx+2] +
cmp si [edx+2] +
jnz loc_101BE8B  +
add ecx 4 +
add edx 4 +
cmp si di +
jnz loc_101BE65  +
xor ecx ecx +
jmp loc_101BE90  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
cmp ecx edi +
jnz loc_101BEA7  +
push edi  +
mov ecx [ebp-14h] +
push eax  +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx [ebp+8] +
push eax  +
call sub_1018861  +
mov ecx [ebp-20h] +
mov byte ptr [ebp-4] 7 +
cmp ecx edi +
jz loc_101BEB7  +
call sub_1004249  +
mov ecx [ebp-14h] +
mov [ebp-20h] edi +
mov byte ptr [ebp-4] 2 +
cmp ecx edi +
jz loc_101BECA  +
call sub_1004249  +
mov [ebp-14h] edi +
jmp loc_101BD42  +
push offset aUnknown_0  +
push 47h  +
call near ptr dword_100BDDC+3  +
pop ecx  +
pop ecx  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101BF0C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101BF0C  +
cmp byte ptr [eax+19h] 2 +
jb loc_101BF0C  +
push 0Dh  +
push offset dword_10087C0  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 31Fh  +
jmp loc_101BCF5  +
mov byte ptr [ebp-4] 1 +
cmp ecx edi +
jz loc_101BF23  +
call sub_1004249  +
lea ecx [ebp-38h] +
mov [ebp+0Ch] edi +
mov byte ptr [ebp-4] 0 +
call sub_101BBB5  +
mov ecx [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp ecx edi +
jz loc_101BF42  +
call sub_1004249  +
call sub_1002052  +
retn 8  +
***
call sub_10021E6  +
mov eax [ebp+0Ch] +
mov ebx ecx +
mov [ebp-70h] ebx +
mov [ebp-74h] eax +
call sub_101AD42  +
test al al +
jz loc_101BFD4  +
cmp dword ptr [ebx+38h] 8 +
jb loc_101BF93  +
mov eax [ebx+24h] +
jmp loc_101BF96  +
lea eax [ebx+24h] +
push eax  +
call sub_1021E60  +
cmp dword ptr [ebx+1Ch] 8 +
jb loc_101BFA7  +
mov eax [ebx+8] +
jmp loc_101BFAA  +
lea eax [ebx+8] +
push eax  +
push 80000002h  +
lea ecx [ebp-5Ch] +
call sub_1016F0B  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-5Ch] +
call sub_1013386  +
test al al +
jnz loc_101BFDF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-5Ch] +
call sub_1013CEB  +
call sub_1002043  +
retn 8  +
mov ebx [ebp-70h] +
lea eax [ebp-60h] +
push eax  +
lea ecx [ebp-5Ch] +
call sub_1016F8B  +
mov eax [ebp-60h] +
lea esi [eax+0Ch] +
lea edi [ebp-94h] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+8] +
push 4  +
pop ecx  +
lea esi [ebp-94h] +
xor edx edx +
cmps   +
mov byte ptr [ebp-4] 1 +
jnz loc_101C03D  +
cmp [ebx+1] dl +
jnz loc_101C02E  +
cmp dword ptr [eax+34h] 8 +
jb loc_101C021  +
mov eax [eax+20h] +
jmp loc_101C024  +
add eax 20h +
push eax  +
push 46h  +
call near ptr dword_100BDDC+3  +
pop ecx  +
pop ecx  +
lea ecx [ebp-5Ch] +
call sub_10133FF  +
mov bl al +
jmp loc_101C143  +
push 8  +
pop esi  +
cmp [ebx+38h] esi +
jb loc_101C04A  +
mov ecx [ebx+24h] +
jmp loc_101C04D  +
lea ecx [ebx+24h] +
cmp [eax+50h] esi +
jb loc_101C057  +
mov eax [eax+3Ch] +
jmp loc_101C05A  +
add eax 3Ch +
push ecx  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101C164  +
mov ebx [ebp-74h] +
mov ecx ebx +
call sub_1002028  +
test eax eax +
jz loc_101C02E  +
xor esi esi +
mov [ebp-80h] esi +
mov [ebp-7Ch] esi +
mov [ebp-78h] esi +
mov ecx [ebp-60h] +
lea eax [ebp-84h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_10183F1  +
lea ecx [ebp-84h] +
mov [ebp-68h] esi +
call sub_1013478  +
test eax eax +
jbe loc_101C12E  +
mov [ebp-64h] esi +
jmp loc_101C0B5  +
xor esi esi +
mov eax [ebp-80h] +
mov ecx [ebp-64h] +
lea edi [ecx+eax] +
test byte ptr [edi+24h] 1 +
jnz loc_101C117  +
mov ecx ebx +
call sub_1002028  +
test eax eax +
jbe loc_101C117  +
and dword ptr [ebp-6Ch] 0 +
mov eax [ebx+4] +
add eax [ebp-6Ch] +
cmp dword ptr [eax+18h] 8 +
jb loc_101C0E4  +
mov eax [eax+4] +
jmp loc_101C0E7  +
add eax 4 +
cmp dword ptr [edi+18h] 8 +
jb loc_101C0F2  +
mov ecx [edi+4] +
jmp loc_101C0F5  +
lea ecx [edi+4] +
push eax  +
push ecx  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101C1E4  +
add dword ptr [ebp-6Ch] 1Ch +
mov ecx ebx +
inc esi  +
call sub_1002028  +
cmp esi eax +
jb loc_101C0D3  +
inc dword ptr [ebp-68h]  +
add dword ptr [ebp-64h] 28h +
lea ecx [ebp-84h] +
call sub_1013478  +
cmp [ebp-68h] eax +
jb loc_101C0B3  +
lea ecx [ebp-5Ch] +
call sub_10133FF  +
lea ecx [ebp-84h] +
mov bl al +
call sub_1017446  +
mov ecx [ebp-60h] +
mov byte ptr [ebp-4] 0 +
test ecx ecx +
jz loc_101C153  +
call sub_1004249  +
and dword ptr [ebp-60h] 0 +
test bl bl +
jz loc_101BFC8  +
jmp loc_101BFDC  +
mov eax [ebp-60h] +
cmp [eax+34h] esi +
jb loc_101C171  +
mov eax [eax+20h] +
jmp loc_101C174  +
add eax 20h +
cmp [ebx+38h] esi +
jb loc_101C17E  +
mov ecx [ebx+24h] +
jmp loc_101C181  +
lea ecx [ebx+24h] +
push eax  +
push ecx  +
push 4Ch  +
call near ptr dword_100BDDC+3  +
add esp 0Ch +
mov eax off_1029004 +
mov esi 3AA2h +
cmp eax offset off_1029004 +
jz loc_101C1BD  +
test byte ptr [eax+1Ch] 1 +
jz loc_101C1BD  +
cmp byte ptr [eax+19h] 2 +
jb loc_101C1BD  +
push esi  +
push offset dword_10087C0  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2AAh  +
push offset aDW7rtmAdminW_2  +
push esi  +
lea ecx [ebp-0A4h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-0A4h] +
push eax  +
call _CxxThrowException  +
mov eax [ebp-60h] +
cmp dword ptr [eax+34h] 8 +
jb loc_101C1F2  +
mov ecx [eax+20h] +
jmp loc_101C1F5  +
lea ecx [eax+20h] +
cmp dword ptr [eax+50h] 8 +
jb loc_101C200  +
mov eax [eax+3Ch] +
jmp loc_101C203  +
add eax 3Ch +
imul esi esi +
add esi [ebx+4] +
cmp dword ptr [esi+18h] 8 +
jb loc_101C214  +
mov esi [esi+4] +
jmp loc_101C217  +
add esi 4 +
push ecx  +
push eax  +
push esi  +
push 4Dh  +
call near ptr dword_100BDDC+3  +
add esp 10h +
mov eax off_1029004 +
mov esi 3AA2h +
cmp eax offset off_1029004 +
jz loc_101C254  +
test byte ptr [eax+1Ch] 1 +
jz loc_101C254  +
cmp byte ptr [eax+19h] 2 +
jb loc_101C254  +
push esi  +
push offset dword_10087C0  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2C4h  +
jmp loc_101C1C2  +
***
call sub_10021E6  +
mov eax ecx +
cmp dword ptr [eax+1Ch] 8 +
mov ecx [ebp+8] +
mov [ebp-90h] ecx +
jb loc_101C288  +
mov eax [eax+8] +
jmp loc_101C28B  +
add eax 8 +
push eax  +
push 80000002h  +
push ecx  +
lea ecx [ebp-88h] +
call sub_1016975  +
mov eax [ebp-4Ch] +
xor esi esi +
cmp dword ptr [ebp-38h] 8 +
mov [ebp-4] esi +
jnb loc_101C2AE  +
lea eax [ebp-4Ch] +
push offset aMicrosoftWin_0  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101C2DE  +
push offset aApplication  +
call sub_101FE61  +
push offset aSystem  +
call sub_101FE61  +
push offset aSecurity  +
call sub_101FE61  +
mov [ebp-9Ch] esi +
mov [ebp-98h] esi +
mov [ebp-94h] esi +
lea eax [ebp-0A0h] +
push eax  +
lea ecx [ebp-88h] +
mov byte ptr [ebp-4] 1 +
call sub_10183F1  +
lea ecx [ebp-0A0h] +
mov [ebp-8Ch] esi +
call sub_1013478  +
test eax eax +
jbe loc_101C383  +
xor ebx ebx +
mov eax [ebp-9Ch] +
add eax ebx +
test byte ptr [eax+24h] 1 +
jnz loc_101C341  +
cmp dword ptr [eax+18h] 8 +
jb loc_101C336  +
mov eax [eax+4] +
jmp loc_101C339  +
add eax 4 +
push eax  +
call sub_101FE61  +
jmp loc_101C367  +
cmp dword ptr [eax+18h] 8 +
jb loc_101C34C  +
mov ecx [eax+4] +
jmp loc_101C34F  +
lea ecx [eax+4] +
push dword ptr [eax+20h]  +
mov esi [ebp-90h] +
push ecx  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_101F063  +
inc dword ptr [ebp-8Ch]  +
lea ecx [ebp-0A0h] +
add ebx 28h +
call sub_1013478  +
cmp [ebp-8Ch] eax +
jb loc_101C31D  +
lea ecx [ebp-0A0h] +
call sub_1017446  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-88h] +
call sub_1013E1D  +
call sub_1002043  +
retn 4  +
***
call sub_10021E6  +
mov eax [ebp+0Ch] +
mov esi [ebp+8] +
mov edi ecx +
mov [ebp-0F0h] edi +
mov [ebp-100h] esi +
mov [ebp-108h] eax +
call sub_101AD42  +
test al al +
jz loc_101C888  +
and dword ptr [ebp-0F4h] 0 +
and dword ptr [ebp-4] 0 +
cmp dword ptr [edi+1Ch] 8 +
jb loc_101C42F  +
mov eax [edi+8] +
jmp loc_101C432  +
lea eax [edi+8] +
push eax  +
mov ebx 80000002h +
push ebx  +
lea ecx [ebp-6Ch] +
call sub_1016F0B  +
mov eax [esi] +
push offset aGuid  +
lea ecx [ebp-0E4h] +
push ecx  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+18h]  +
push dword ptr [eax]  +
lea ecx [ebp-0F4h] +
mov byte ptr [ebp-4] 2 +
call sub_1004E7A  +
mov ecx [ebp-0E4h] +
xor esi esi +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_101C47E  +
call sub_1004249  +
mov ecx [ebp-0F4h] +
cmp ecx esi +
jnz loc_101C4E4  +
push 4Fh  +
call near ptr dword_100BDDC+3  +
pop ecx  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101C4BC  +
test byte ptr [eax+1Ch] 1 +
jz loc_101C4BC  +
cmp byte ptr [eax+19h] 2 +
jb loc_101C4BC  +
push 0Dh  +
push offset dword_10087C0  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 4AFh  +
push offset aDW7rtmAdminW_2  +
push 0Dh  +
lea ecx [ebp-138h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-138h] +
push eax  +
call _CxxThrowException  +
lea eax [ebp-20h] +
push eax  +
mov eax [ecx] +
call dword ptr [eax+8]  +
push eax  +
call sub_1013822  +
mov [ebp-104h] esi +
mov [ebp-114h] esi +
mov [ebp-110h] esi +
mov [ebp-10Ch] esi +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 4 +
call sub_1016FFE  +
test al al +
jz loc_101C57D  +
lea eax [ebp-0E4h] +
push eax  +
lea ecx [ebp-6Ch] +
call sub_1016F8B  +
push dword ptr [eax]  +
lea ecx [ebp-104h] +
mov byte ptr [ebp-4] 5 +
call sub_1004E7A  +
mov ecx [ebp-0E4h] +
mov byte ptr [ebp-4] 4 +
cmp ecx esi +
jz loc_101C552  +
call sub_1004249  +
mov esi [ebp-104h] +
cmp dword ptr [esi+50h] 8 +
jb loc_101C563  +
mov eax [esi+3Ch] +
jmp loc_101C566  +
lea eax [esi+3Ch] +
push eax  +
lea ecx [edi+20h] +
call sub_1001DE7  +
lea eax [ebp-118h] +
push eax  +
mov ecx esi +
call sub_10183F1  +
sub esp 10h +
mov edi esp +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
movs   +
call sub_101DC85  +
call sub_101ACEA  +
test al al +
jz loc_101C81E  +
mov eax [ebp-0F0h] +
cmp dword ptr [eax+1Ch] 8 +
jb loc_101C5AC  +
mov eax [eax+8] +
jmp loc_101C5AF  +
add eax 8 +
push eax  +
push ebx  +
lea ecx [ebp-0E0h] +
call sub_1016D27  +
lea ecx [ebp-118h] +
mov byte ptr [ebp-4] 6 +
xor edi edi +
xor ebx ebx +
call sub_1013478  +
test eax eax +
jbe loc_101C624  +
xor esi esi +
mov eax [ebp-114h] +
add eax esi +
cmp dword ptr [eax+18h] 8 +
jb loc_101C5E8  +
mov ecx [eax+4] +
jmp loc_101C5EB  +
lea ecx [eax+4] +
mov al [eax+24h] +
push dword ptr [ebp-108h]  +
and al 1 +
movzx eax al +
push eax  +
push ecx  +
mov ecx [ebp-0F0h] +
lea eax [ebp-0E0h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_101B8D4  +
lea ecx [ebp-118h] +
inc ebx  +
add esi 28h +
call sub_1013478  +
cmp ebx eax +
jb loc_101C5D5  +
mov [ebp-0FCh] edi +
mov ecx [ebp-100h] +
mov eax [ecx] +
push offset aChannels_1  +
lea edx [ebp-100h] +
push edx  +
mov byte ptr [ebp-4] 7 +
call dword ptr [eax+14h]  +
push dword ptr [eax]  +
lea ecx [ebp-0FCh] +
mov byte ptr [ebp-4] 8 +
call sub_1004E7A  +
mov ecx [ebp-100h] +
mov byte ptr [ebp-4] 7 +
cmp ecx edi +
jz loc_101C669  +
call sub_1004249  +
mov esi [ebp-0FCh] +
cmp esi edi +
jz loc_101C7FE  +
mov eax [esi] +
lea ecx [ebp-0F8h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+10h]  +
mov [ebp-0ECh] edi +
mov byte ptr [ebp-4] 0Ah +
mov ecx [ebp-0F8h] +
mov eax [ecx] +
lea edx [ebp-0E4h] +
push edx  +
call dword ptr [eax+4]  +
push dword ptr [eax]  +
lea ecx [ebp-0ECh] +
mov byte ptr [ebp-4] 0Bh +
call sub_1004E7A  +
cmp [eax] edi +
mov ecx [ebp-0E4h] +
setnz bl  +
mov byte ptr [ebp-4] 0Ah +
cmp ecx edi +
jz loc_101C6CA  +
call sub_1004249  +
mov ecx [ebp-0ECh] +
mov [ebp-0E4h] edi +
test bl bl +
jz loc_101C7D2  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx [ebp-0ECh] +
push offset aName  +
lea edx [ebp-0E8h] +
mov ebx eax +
mov eax [ecx] +
push edx  +
call dword ptr [eax+18h]  +
mov ecx [ebp-0E8h] +
mov byte ptr [ebp-4] 0Ch +
cmp ecx edi +
jnz loc_101C715  +
mov [ebp-0E8h] edi +
jmp loc_101C68B  +
mov edx ebx +
mov eax offset aImportchannel +
mov si [eax] +
cmp si [edx] +
jnz loc_101C742  +
cmp si di +
jz loc_101C73E  +
mov si [eax+2] +
cmp si [edx+2] +
jnz loc_101C742  +
add eax 4 +
add edx 4 +
cmp si di +
jnz loc_101C71C  +
xor eax eax +
jmp loc_101C747  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_101C755  +
push dword ptr [ebp-108h]  +
push 1  +
jmp loc_101C792  +
mov edx ebx +
mov eax offset aChannel +
mov si [eax] +
cmp si [edx] +
jnz loc_101C782  +
cmp si di +
jz loc_101C77E  +
mov si [eax+2] +
cmp si [edx+2] +
jnz loc_101C782  +
add eax 4 +
add edx 4 +
cmp si di +
jnz loc_101C75C  +
xor eax eax +
jmp loc_101C787  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_101C7B4  +
push dword ptr [ebp-108h]  +
push edi  +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx [ebp-0F0h] +
push eax  +
lea eax [ebp-0E0h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_101B8D4  +
mov ecx [ebp-0E8h] +
mov byte ptr [ebp-4] 0Ah +
cmp ecx edi +
jz loc_101C7C1  +
call sub_1004249  +
mov esi [ebp-0FCh] +
mov [ebp-0E8h] edi +
jmp loc_101C68F  +
mov byte ptr [ebp-4] 9 +
cmp ecx edi +
jz loc_101C7DF  +
call sub_1004249  +
mov ecx [ebp-0F8h] +
mov [ebp-0ECh] edi +
mov byte ptr [ebp-4] 7 +
cmp ecx edi +
jz loc_101C7F8  +
call sub_1004249  +
mov [ebp-0F8h] edi +
mov byte ptr [ebp-4] 6 +
cmp esi edi +
jz loc_101C80D  +
mov ecx esi +
call sub_1004249  +
lea ecx [ebp-0E0h] +
mov byte ptr [ebp-4] 4 +
call sub_1016D9B  +
jmp loc_101C820  +
xor edi edi +
mov esi [ebp-104h] +
cmp esi edi +
jz loc_101C853  +
mov eax [ebp-0F0h] +
cmp byte ptr [eax] 0 +
jz loc_101C84B  +
cmp dword ptr [esi+34h] 8 +
jb loc_101C840  +
mov eax [esi+20h] +
jmp loc_101C843  +
lea eax [esi+20h] +
push 1  +
push eax  +
call sub_101A470  +
lea ecx [ebp-64h] +
call sub_1020F21  +
lea ecx [ebp-118h] +
call sub_1017446  +
mov byte ptr [ebp-4] 1 +
cmp esi edi +
jz loc_101C86D  +
mov ecx esi +
call sub_1004249  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 0 +
call sub_1013CEB  +
mov ecx [ebp-0F4h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1004249  +
call sub_1002043  +
retn 8  +
***
call sub_1003100  +
mov [ebp-38h] ecx +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
mov [ebp-44h] ebx +
mov [ebp-40h] ebx +
mov [ebp-3Ch] ebx +
mov ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_101CAEC  +
mov eax [ecx] +
lea edx [ebp+0Ch] +
push edx  +
call dword ptr [eax+10h]  +
push dword ptr [eax]  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1004E7A  +
mov ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_101C8EE  +
call sub_1004249  +
mov ecx [ebp-1Ch] +
mov eax [ecx] +
lea edx [ebp-20h] +
push edx  +
call dword ptr [eax+4]  +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 4 +
call sub_1004E7A  +
cmp [eax] ebx +
mov ecx [ebp-20h] +
setnz byte ptr [ebp+0Fh]  +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_101C91E  +
call sub_1004249  +
mov [ebp-20h] ebx +
cmp [ebp+0Fh] bl +
jz loc_101CAEC  +
mov ecx [ebp-10h] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx offset aProvider +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_101C95D  +
cmp dx bx +
jz loc_101C959  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_101C95D  +
add ecx 4 +
add eax 4 +
cmp dx bx +
jnz loc_101C937  +
xor eax eax +
jmp loc_101C962  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101C8EE  +
mov [ebp-28h] ebx +
mov ecx [ebp-10h] +
mov eax [ecx] +
push offset aChannels_1  +
lea edx [ebp-24h] +
push edx  +
mov byte ptr [ebp-4] 5 +
call dword ptr [eax+14h]  +
push dword ptr [eax]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 6 +
call sub_1004E7A  +
mov ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
cmp ecx ebx +
jz loc_101C99C  +
call sub_1004249  +
mov edi [ebp-28h] +
mov [ebp-24h] ebx +
cmp edi ebx +
jnz loc_101C9AF  +
mov byte ptr [ebp-4] 2 +
jmp loc_101C8EE  +
mov [ebp-30h] ebx +
mov [ebp-14h] ebx +
mov eax [edi] +
lea ecx [ebp-2Ch] +
push ecx  +
mov ecx edi +
mov byte ptr [ebp-4] 8 +
call dword ptr [eax+10h]  +
push dword ptr [eax]  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 9 +
call sub_1004E7A  +
mov ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 8 +
cmp ecx ebx +
jz loc_101C9E2  +
call sub_1004249  +
mov esi [ebp-30h] +
mov [ebp-2Ch] ebx +
mov eax [esi] +
lea ecx [ebp-34h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
push dword ptr [eax]  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 0Ah +
call sub_1004E7A  +
cmp [eax] ebx +
mov ecx [ebp-34h] +
setnz byte ptr [ebp+0Fh]  +
mov byte ptr [ebp-4] 8 +
cmp ecx ebx +
jz loc_101CA17  +
call sub_1004249  +
mov ecx [ebp-14h] +
mov [ebp-34h] ebx +
cmp [ebp+0Fh] bl +
jz loc_101CAC2  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx offset aChannel +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_101CA56  +
cmp dx bx +
jz loc_101CA52  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_101CA56  +
add ecx 4 +
add eax 4 +
cmp dx bx +
jnz loc_101CA30  +
xor eax eax +
jmp loc_101CA5B  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101C9E8  +
mov ecx [ebp-14h] +
mov eax [ecx] +
push offset aName  +
lea edx [ebp-18h] +
push edx  +
call dword ptr [eax+18h]  +
mov ecx [ebp-18h] +
mov byte ptr [ebp-4] 0Bh +
cmp ecx ebx +
jnz loc_101CA81  +
mov byte ptr [ebp-4] 8 +
jmp loc_101CABA  +
mov eax [ecx] +
call dword ptr [eax+8]  +
push eax  +
lea ecx [ebp-64h] +
call sub_100159C  +
lea eax [ebp-64h] +
push eax  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 0Ch +
call sub_1003406  +
push ebx  +
push 1  +
lea ecx [ebp-64h] +
call sub_1001B47  +
mov ecx [ebp-18h] +
mov byte ptr [ebp-4] 8 +
cmp ecx ebx +
jz loc_101CABA  +
call sub_1004249  +
mov [ebp-18h] ebx +
jmp loc_101C9E8  +
mov byte ptr [ebp-4] 7 +
cmp ecx ebx +
jz loc_101CACF  +
call sub_1004249  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 5 +
cmp esi ebx +
jz loc_101CAE1  +
mov ecx esi +
call sub_1004249  +
mov byte ptr [ebp-4] 2 +
mov ecx edi +
jmp loc_101C8E9  +
mov ecx [ebp+8] +
mov eax [ecx] +
lea edx [ebp+0Ch] +
push edx  +
call dword ptr [eax+10h]  +
push dword ptr [eax]  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 0Dh +
call sub_1004E7A  +
mov ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_101CB16  +
call sub_1004249  +
mov esi [ebp-1Ch] +
mov eax [esi] +
lea ecx [ebp+8] +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 0Eh +
call sub_1004E7A  +
cmp [eax] ebx +
mov ecx [ebp+8] +
setnz byte ptr [ebp+0Fh]  +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_101CB48  +
call sub_1004249  +
mov [ebp+8] ebx +
cmp [ebp+0Fh] bl +
jz loc_101CBA0  +
mov ecx [ebp-10h] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx offset aProvider +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_101CB83  +
cmp dx bx +
jz loc_101CB7F  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_101CB83  +
add ecx 4 +
add eax 4 +
cmp dx bx +
jnz loc_101CB5D  +
xor eax eax +
jmp loc_101CB88  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101CB19  +
mov ecx [ebp-38h] +
lea eax [ebp-48h] +
push eax  +
push dword ptr [ebp-10h]  +
call sub_101C3E3  +
jmp loc_101CB19  +
lea ecx [ebp-48h] +
call sub_100256E  +
mov ecx [ebp-10h] +
mov [ebp-4] bl +
cmp ecx ebx +
jz loc_101CBB7  +
call sub_1004249  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-10h] ebx +
cmp esi ebx +
jz loc_101CBC9  +
mov ecx esi +
call sub_1004249  +
call sub_1002052  +
retn 8  +
***
call sub_10021E6  +
mov ebx [ebp+0Ch] +
mov esi [ebp+8] +
and dword ptr [ebp-44h] 0 +
mov edi ecx +
mov [ebp-70h] ebx +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
or dword ptr [ebp-50h] 0FFFFFFFFh +
mov eax [esi] +
push offset aGuid  +
lea ecx [ebp-40h] +
push ecx  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call dword ptr [eax+18h]  +
push dword ptr [eax]  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 3 +
call sub_1004E7A  +
mov ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_101CC36  +
call sub_1004249  +
mov ecx [ebp-44h] +
test ecx ecx +
jnz loc_101CC99  +
push 4Fh  +
call near ptr dword_100BDDC+3  +
pop ecx  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101CC71  +
test byte ptr [eax+1Ch] 1 +
jz loc_101CC71  +
cmp byte ptr [eax+19h] 2 +
jb loc_101CC71  +
push 0Dh  +
push offset dword_10087C0  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 377h  +
push offset aDW7rtmAdminW_2  +
push 0Dh  +
lea ecx [ebp-90h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-90h] +
push eax  +
call _CxxThrowException  +
mov eax [ecx] +
call dword ptr [eax+8]  +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1001DE7  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101CCB3  +
lea eax [ebp-28h] +
lea ecx [ebp-3Ch] +
push ecx  +
push eax  +
call sub_1013822  +
cmp byte ptr [edi] 0 +
jz loc_101CCD5  +
lea eax [ebp-2Ch] +
push eax  +
push ebx  +
call sub_1019CA9  +
push eax  +
lea ecx [ebp-50h] +
call sub_101980A  +
mov eax [esi] +
push offset aName  +
lea ecx [ebp-40h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+18h]  +
push dword ptr [eax]  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 4 +
call sub_1004E7A  +
mov ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_101CD03  +
call sub_1004249  +
mov ecx [ebp-44h] +
test ecx ecx +
jnz loc_101CD56  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101CD16  +
lea eax [ebp-28h] +
push eax  +
push 47h  +
call near ptr dword_100BDDC+3  +
pop ecx  +
pop ecx  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101CD4C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101CD4C  +
cmp byte ptr [eax+19h] 2 +
jb loc_101CD4C  +
push 0Dh  +
push offset dword_10087C0  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 387h  +
jmp loc_101CC76  +
mov eax [ecx] +
call dword ptr [eax+8]  +
lea ebx [edi+20h] +
push eax  +
mov ecx ebx +
mov [ebp-58h] ebx +
call sub_1001DE7  +
and dword ptr [ebp-4Ch] 0 +
mov eax [esi] +
push offset aChannels_1  +
lea ecx [ebp-40h] +
push ecx  +
mov ecx esi +
mov byte ptr [ebp-4] 5 +
call dword ptr [eax+14h]  +
push dword ptr [eax]  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 6 +
call sub_1004E7A  +
mov ecx [ebp-40h] +
mov byte ptr [ebp-4] 5 +
test ecx ecx +
jz loc_101CD9F  +
call sub_1004249  +
xor eax eax +
mov [ebp-68h] eax +
mov [ebp-64h] eax +
mov [ebp-60h] eax +
mov byte ptr [ebp-4] 7 +
cmp [ebp-4Ch] eax +
jz loc_101CF2E  +
mov ecx [ebp-4Ch] +
mov eax [ecx] +
lea edx [ebp-40h] +
push edx  +
call dword ptr [eax+10h]  +
and dword ptr [ebp-48h] 0 +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp-40h] +
mov eax [ecx] +
lea edx [ebp-5Ch] +
push edx  +
call dword ptr [eax+4]  +
push dword ptr [eax]  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 0Ah +
call sub_1004E7A  +
cmp dword ptr [eax] 0 +
mov ecx [ebp-5Ch] +
setnz bl  +
mov byte ptr [ebp-4] 9 +
test ecx ecx +
jz loc_101CDFB  +
call sub_1004249  +
and dword ptr [ebp-5Ch] 0 +
mov ecx [ebp-48h] +
test bl bl +
jz loc_101CF0A  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx offset aChannel +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_101CE3A  +
test dx dx +
jz loc_101CE36  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_101CE3A  +
add ecx 4 +
add eax 4 +
test dx dx +
jnz loc_101CE14  +
xor eax eax +
jmp loc_101CE3F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101CDCB  +
mov ecx [ebp-48h] +
mov eax [ecx] +
push offset aName  +
lea edx [ebp-54h] +
push edx  +
call dword ptr [eax+18h]  +
mov ecx [ebp-54h] +
mov byte ptr [ebp-4] 0Bh +
test ecx ecx +
jz loc_101CEAB  +
mov eax [ecx] +
call dword ptr [eax+8]  +
push eax  +
lea ecx [ebp-8Ch] +
call sub_100159C  +
lea eax [ebp-8Ch] +
push eax  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 0Ch +
call sub_1003406  +
push 0  +
push 1  +
lea ecx [ebp-8Ch] +
call sub_1001B47  +
mov ecx [ebp-54h] +
mov byte ptr [ebp-4] 9 +
test ecx ecx +
jz loc_101CEA2  +
call sub_1004249  +
and dword ptr [ebp-54h] 0 +
jmp loc_101CDCB  +
mov eax [ebp-58h] +
cmp dword ptr [eax+18h] 8 +
jb loc_101CEB9  +
mov eax [eax+4] +
jmp loc_101CEBC  +
add eax 4 +
cmp dword ptr [ebp-14h] 8 +
mov ecx [ebp-28h] +
jnb loc_101CEC8  +
lea ecx [ebp-28h] +
push eax  +
push ecx  +
push 49h  +
call near ptr dword_100BDDC+3  +
add esp 0Ch +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101CF00  +
test byte ptr [eax+1Ch] 1 +
jz loc_101CF00  +
cmp byte ptr [eax+19h] 2 +
jb loc_101CF00  +
push 0Dh  +
push offset dword_10087C0  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 3A8h  +
jmp loc_101CC76  +
mov byte ptr [ebp-4] 8 +
test ecx ecx +
jz loc_101CF17  +
call sub_1004249  +
mov ecx [ebp-40h] +
and dword ptr [ebp-48h] 0 +
mov byte ptr [ebp-4] 7 +
test ecx ecx +
jz loc_101CF2B  +
call sub_1004249  +
mov ebx [ebp-58h] +
lea eax [ebp-6Ch] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx edi +
call sub_101BF65  +
lea eax [ebp-6Ch] +
push eax  +
push esi  +
mov ecx edi +
call sub_101C3E3  +
cmp dword ptr [edi+70h] 0 +
jnz loc_101CF92  +
mov eax [esi] +
push offset aMessagefilenam  +
lea ecx [ebp-40h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+18h]  +
push dword ptr [eax]  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 0Dh +
call sub_1004E7A  +
mov ecx [ebp-40h] +
mov byte ptr [ebp-4] 7 +
test ecx ecx +
jz loc_101CF7D  +
call sub_1004249  +
mov ecx [ebp-44h] +
test ecx ecx +
jz loc_101CF92  +
mov eax [ecx] +
call dword ptr [eax+8]  +
push eax  +
lea ecx [edi+5Ch] +
call sub_1001DE7  +
cmp dword ptr [ebp-4Ch] 0 +
jz loc_101CFA6  +
push dword ptr [ebp-4Ch]  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx edi +
call sub_101B6BF  +
push 13Ch  +
call sub_1004829  +
pop ecx  +
mov ecx eax +
mov [ebp-40h] ecx +
mov byte ptr [ebp-4] 0Eh +
test ecx ecx +
jz loc_101CFE7  +
cmp dword ptr [edi+1Ch] 8 +
jb loc_101CFC9  +
mov eax [edi+8] +
jmp loc_101CFCC  +
lea eax [edi+8] +
push dword ptr [ebp-50h]  +
push eax  +
push 80000002h  +
push 0  +
push 20006h  +
lea eax [ebp-3Ch] +
push eax  +
call sub_1017D0F  +
jmp loc_101CFE9  +
xor eax eax +
push eax  +
lea ecx [ebp-48h] +
call sub_10018C6  +
mov eax [ebp-48h] +
add eax 78h +
cmp dword ptr [ebx+18h] 8 +
mov byte ptr [ebp-4] 0Fh +
mov [ebp-40h] eax +
jb loc_101D00A  +
mov eax [ebx+4] +
jmp loc_101D00D  +
lea eax [ebx+4] +
mov ebx [ebp-40h] +
push eax  +
mov ecx ebx +
call sub_101AC31  +
cmp dword ptr [edi+54h] 0 +
jz loc_101D02E  +
cmp dword ptr [edi+58h] 8 +
jb loc_101D029  +
mov eax [edi+44h] +
jmp loc_101D068  +
lea eax [edi+44h] +
jmp loc_101D068  +
mov eax [esi] +
push offset aResourcefilena  +
lea ecx [ebp-40h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+18h]  +
push dword ptr [eax]  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 10h +
call sub_1004E7A  +
mov ecx [ebp-40h] +
mov byte ptr [ebp-4] 0Fh +
test ecx ecx +
jz loc_101D05C  +
call sub_1004249  +
mov ecx [ebp-44h] +
test ecx ecx +
jz loc_101D070  +
mov eax [ecx] +
call dword ptr [eax+8]  +
push eax  +
mov ecx ebx +
call sub_101AC5D  +
cmp dword ptr [edi+70h] 0 +
jz loc_101D08E  +
cmp dword ptr [edi+74h] 8 +
jb loc_101D081  +
mov eax [edi+60h] +
jmp loc_101D084  +
lea eax [edi+60h] +
push eax  +
mov ecx ebx +
call sub_101AC7E  +
jmp loc_101D0E6  +
mov eax [esi] +
push offset aMessagefilenam  +
lea ecx [ebp-40h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+18h]  +
push dword ptr [eax]  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 11h +
call sub_1004E7A  +
mov ecx [ebp-40h] +
mov byte ptr [ebp-4] 0Fh +
test ecx ecx +
jz loc_101D0BC  +
call sub_1004249  +
mov ebx [ebp-44h] +
test ebx ebx +
jz loc_101D0E6  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+8]  +
mov ecx [ebp-48h] +
push eax  +
add ecx 78h +
call sub_101AC7E  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+8]  +
push eax  +
lea ecx [edi+5Ch] +
call sub_1001DE7  +
cmp dword ptr [edi+8Ch] 0 +
jz loc_101D102  +
cmp dword ptr [edi+90h] 8 +
jb loc_101D0FD  +
mov eax [edi+7Ch] +
jmp loc_101D13C  +
lea eax [edi+7Ch] +
jmp loc_101D13C  +
mov eax [esi] +
push offset aParameterfilen  +
lea ecx [ebp-40h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+18h]  +
push dword ptr [eax]  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 12h +
call sub_1004E7A  +
mov ecx [ebp-40h] +
mov byte ptr [ebp-4] 0Fh +
test ecx ecx +
jz loc_101D130  +
call sub_1004249  +
mov ecx [ebp-44h] +
test ecx ecx +
jz loc_101D148  +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx [ebp-48h] +
push eax  +
add ecx 78h +
call sub_101ACA2  +
mov eax [esi] +
push offset aHelplink  +
lea ecx [ebp-40h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+18h]  +
push dword ptr [eax]  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 13h +
call sub_1004E7A  +
mov ecx [ebp-40h] +
mov byte ptr [ebp-4] 0Fh +
test ecx ecx +
jz loc_101D176  +
call sub_1004249  +
mov ebx [ebp-44h] +
test ebx ebx +
jz loc_101D190  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+8]  +
mov ecx [ebp-48h] +
push eax  +
add ecx 78h +
call sub_101ACC6  +
mov eax [esi] +
push offset aChannels_1  +
lea ecx [ebp-40h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+14h]  +
push dword ptr [eax]  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 14h +
call sub_1004E7A  +
mov ecx [ebp-40h] +
mov byte ptr [ebp-4] 0Fh +
test ecx ecx +
jz loc_101D1BE  +
call sub_1004249  +
mov esi [ebp-4Ch] +
test esi esi +
jz loc_101D1D4  +
mov eax [ebp-48h] +
push esi  +
add eax 78h +
push eax  +
mov ecx edi +
call sub_101BBE9  +
mov ecx [ebp-48h] +
call sub_1018934  +
cmp dword ptr [ebp-50h] 0FFFFFFFFh +
jz loc_101D23D  +
push dword ptr [ebp-50h]  +
push dword ptr [ebp-70h]  +
call sub_1019A39  +
test eax eax +
jnz loc_101D23D  +
call ds:GetLastError  +
mov esi eax +
test esi esi +
jnz loc_101D202  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101D22D  +
test byte ptr [eax+1Ch] 1 +
jz loc_101D22D  +
cmp byte ptr [eax+19h] 2 +
jb loc_101D22D  +
push esi  +
push offset dword_10087C0  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 410h  +
push offset aDW7rtmAdminW_2  +
push esi  +
jmp loc_101CC7D  +
test esi esi +
jz loc_101D24C  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx edi +
call sub_101C263  +
cmp byte ptr [edi] 0 +
jz loc_101D2AC  +
test esi esi +
jz loc_101D28F  +
lea ecx [ebp-6Ch] +
call sub_1002028  +
test eax eax +
jbe loc_101D28F  +
mov esi [ebp-68h] +
add esi 4 +
mov ebx eax +
cmp dword ptr [esi+14h] 8 +
jb loc_101D273  +
mov eax [esi] +
jmp loc_101D275  +
mov eax esi +
push 0  +
push eax  +
call sub_101A331  +
cmp dword ptr [edi+3Ch] 0 +
jnz loc_101D286  +
mov [edi+3Ch] eax +
add esi 1Ch +
dec ebx  +
jnz loc_101D269  +
mov ebx [ebp-44h] +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101D29B  +
lea eax [ebp-28h] +
push 1  +
push eax  +
call sub_101A331  +
cmp dword ptr [edi+3Ch] 0 +
jnz loc_101D2AC  +
mov [edi+3Ch] eax +
mov ecx [ebp-48h] +
mov byte ptr [ebp-4] 7 +
test ecx ecx +
jz loc_101D2BC  +
call sub_1004249  +
lea ecx [ebp-6Ch] +
call sub_100256E  +
mov ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_101D2D4  +
call sub_1004249  +
lea ecx [ebp-50h] +
call sub_10197E9  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test ebx ebx +
jz loc_101D2F7  +
mov ecx ebx +
call sub_1004249  +
call sub_1002043  +
retn 8  +
***
call sub_1003100  +
mov [ebp-18h] ecx +
push offset aKtmw32_dll  +
call ds:LoadLibraryW  +
mov edi eax +
push edi  +
push ds:FreeLibrary  +
lea eax [ebp-24h] +
push eax  +
call sub_1004AE6  +
xor esi esi +
mov [ebp-4] esi +
cmp edi esi +
jnz loc_101D33D  +
mov byte ptr [ebp-24h] 1 +
mov ecx [ebp+8] +
mov eax [ecx] +
lea edx [ebp-14h] +
push edx  +
call dword ptr [eax+10h]  +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-14h] +
mov eax [ecx] +
lea edx [ebp+8] +
push edx  +
call dword ptr [eax+4]  +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_1004E7A  +
cmp [eax] esi +
mov ecx [ebp+8] +
setnz bl  +
mov byte ptr [ebp-4] 2 +
cmp ecx esi +
jz loc_101D37F  +
call sub_1004249  +
mov ecx [ebp-10h] +
mov [ebp+8] esi +
test bl bl +
jz loc_101D3D0  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx offset aProvider +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_101D3B9  +
cmp dx si +
jz loc_101D3B5  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_101D3B9  +
add ecx 4 +
add eax 4 +
cmp dx si +
jnz loc_101D393  +
xor eax eax +
jmp loc_101D3BE  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax esi +
jnz loc_101D350  +
mov ecx [ebp-18h] +
push edi  +
push dword ptr [ebp-10h]  +
call sub_101CBD6  +
jmp loc_101D350  +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_101D3DD  +
call sub_1004249  +
mov ecx [ebp-14h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
cmp ecx esi +
jz loc_101D3F0  +
call sub_1004249  +
lea eax [ebp-24h] +
push eax  +
mov [ebp-14h] esi +
call sub_1003FFD  +
call sub_1002052  +
retn 8  +
***
retn 0Ch  +
***
retn 4  +
***
retn 8  +
***
push ebp  +
mov ebp esp +
mov edx [ebp+18h] +
test edx edx +
jz loc_101D476  +
cmp word ptr [edx] 0 +
jnz loc_101D45B  +
push 0Eh  +
jmp loc_101D478  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101D461  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_101D479  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_101D48A  +
cmp word ptr [edx] 0 +
jnz loc_101D48F  +
mov edx offset aNull_0 +
jmp loc_101D48F  +
mov edx offset aNull_1 +
push 0  +
push 4  +
lea ecx [ebp+1Ch] +
push ecx  +
push eax  +
push edx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+14h]  +
push 2Bh  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_101D4DD  +
xor eax eax +
retn   +
mov eax [ecx+8] +
sub eax edx +
sar eax 4 +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_101D4F5  +
xor eax eax +
retn   +
mov eax [ecx+0Ch] +
sub eax edx +
sar eax 4 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_101D525  +
push esi  +
push edi  +
mov esi [ebp+arg_8] +
mov edi eax +
movs   +
movs   +
movs   +
add eax 10h +
movs   +
cmp eax [ebp+arg_4] +
jnz loc_101D512  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp [ebp+arg_0] eax +
jz loc_101D59B  +
push esi  +
push edi  +
sub [ebp+arg_8] 10h +
mov edi [ebp+arg_8] +
sub eax 10h +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
cmp eax [ebp+arg_0] +
jnz loc_101D584  +
pop edi  +
pop esi  +
mov eax [ebp+arg_8] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_101D5BB  +
push esi  +
mov esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101D575  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_101D60C  +
push esi  +
push [ebp+arg_8]  +
call sub_101D5A5  +
add [ebp+arg_8] 10h +
add esi 10h +
cmp esi [ebp+arg_4] +
jnz loc_101D5FC  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn 18h  +
***
lea eax [ecx+0BCh] +
cmp dword ptr [eax+18h] 8 +
jb loc_101D62E  +
mov eax [eax+4] +
retn   +
add eax 4 +
retn   +
***
cmp dword ptr [ecx+0B4h] 0 +
jnz loc_101D643  +
xor eax eax +
retn   +
lea eax [ecx+0A0h] +
cmp dword ptr [eax+18h] 8 +
jb loc_101D653  +
mov eax [eax+4] +
retn   +
add eax 4 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_1029008 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push 78h  +
pop edi  +
mov esi ecx +
mov eax [esi] +
mov eax [eax+9Ch] +
push edi  +
push 0  +
push ebx  +
mov [ebp+var_1C] esi +
mov [ebp+var_20] eax +
call memset  +
mov [ebx] edi +
mov dword ptr [ebx+2Ch] 20000h +
mov eax [esi] +
add eax 0E8h +
lea esi [eax+1Ch] +
lea edi [ebx+18h] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_1C] +
mov eax [esi] +
mov eax [eax+30h] +
add esp 0Ch +
dec eax  +
jz loc_101D6C1  +
mov dword ptr [ebx+28h] 2 +
jmp loc_101D6C8  +
mov dword ptr [ebx+28h] 1 +
and dword ptr [ebx+34h] 0 +
push 40h  +
pop edi  +
push [ebp+var_20]  +
mov [ebx+30h] edi +
mov [ebx+38h] edi +
call sub_1012B41  +
mov [ebp+var_15] al +
test al al +
jnz loc_101D724  +
mov ecx [esi] +
push offset aSystem  +
call sub_101D61E  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101D716  +
mov ecx [esi] +
push offset aSecurity  +
call sub_101D61E  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101D724  +
and dword ptr [ebx+34h] 0 +
mov [ebx+30h] edi +
mov dword ptr [ebx+38h] 10h +
mov eax [esi] +
mov eax [eax+18h] +
test eax eax +
jz loc_101D730  +
mov [ebx+30h] eax +
mov eax [esi] +
mov eax [eax+1Ch] +
test eax eax +
jz loc_101D73C  +
mov [ebx+34h] eax +
mov eax [esi] +
mov eax [eax+20h] +
test eax eax +
jz loc_101D748  +
mov [ebx+38h] eax +
mov eax [esi] +
mov eax [eax+24h] +
xor edx edx +
mov ecx 3E8h +
div  ecx +
test eax eax +
ja loc_101D75D  +
xor eax eax +
inc eax  +
cmp [ebp+var_15] 0 +
mov [ebx+44h] eax +
jz loc_101D77F  +
mov ecx [esi] +
mov eax [ecx+68h] +
mov ecx [ecx+6Ch] +
shrd eax ecx +
shr ecx 14h +
test eax eax +
jnz loc_101D77C  +
push 2  +
pop eax  +
mov [ebx+3Ch] eax +
cmp [ebp+var_15] 0 +
mov dword ptr [ebx+4Ch] 1 +
mov ecx [esi] +
jnz loc_101D7CA  +
push offset aSystem  +
mov [ebp+var_1C] 10000100h +
call sub_101D61E  +
mov edi ds:_wcsicmp +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101D7D6  +
mov ecx [esi] +
push offset aSecurity  +
call sub_101D61E  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101D7D6  +
mov eax 11000100h +
jmp loc_101D7D9  +
xor eax eax +
cmp [ecx+70h] al +
setz al  +
inc eax  +
mov [ebp+var_1C] eax +
mov eax [ebp+var_1C] +
test al 3 +
jz loc_101D7E2  +
or eax 1200h +
mov esi [esi] +
add esi 48h +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
push 4  +
pop ecx  +
mov edi offset dword_1008988 +
lea esi [ebp+var_14] +
xor edx edx +
cmps   +
jnz loc_101D804  +
or eax 80h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov [ebx+40h] eax +
xor ecx ebp +
pop ebx  +
call sub_1004E68  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_8] +
jz loc_101D843  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
add [ebp+arg_C] 10h +
add eax 10h +
cmp eax [ebp+arg_8] +
jnz loc_101D82C  +
pop edi  +
pop esi  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
jmp loc_101D86B  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_101D5A5  +
dec [ebp+arg_4]  +
add [ebp+arg_0] 10h +
cmp [ebp+arg_4] 0 +
ja loc_101D859  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101D5F1  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101D81D  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101D852  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_1001A79  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10024F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101D8DA  +
mov eax [ebp+arg_4] +
shl eax 4 +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_101D98C  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_101D8A8  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 54h +
push ecx  +
mov ecx [ebp+arg_4] +
call sub_10055EA  +
mov ecx [ebp+arg_4] +
push offset aChannels_0  +
call sub_10046D1  +
push [ebp+arg_0]  +
mov ecx [ebp+arg_4] +
call sub_10046D1  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
lea eax [esi+1Ch] +
push eax  +
call sub_10055EA  +
cmp byte ptr [esi+70h] 0 +
mov ecx [ebp+arg_0] +
pop esi  +
jz loc_101DA08  +
push offset aControlset001C  +
jmp loc_101DA0D  +
push offset aCurrentcontr_1  +
call sub_10046D1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_4] +
lea eax [esi+1Ch] +
push eax  +
mov ecx edi +
call sub_10055EA  +
cmp byte ptr [esi+70h] 0 +
mov ecx edi +
jz loc_101DAE7  +
push offset aControlset00_1  +
jmp loc_101DAEC  +
push offset aCurrentcontr_2  +
call sub_10046D1  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_10046D1  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
lea eax [esi+1Ch] +
push eax  +
call sub_10055EA  +
cmp byte ptr [esi+70h] 0 +
mov ecx [ebp+arg_0] +
pop esi  +
jz loc_101DBD8  +
push offset aControlset00_2  +
jmp loc_101DBDD  +
push offset aCurrentcontr_3  +
call sub_10046D1  +
pop ebp  +
retn 4  +
***
call sub_10021E6  +
lea esi [ebp+8] +
lea edi [ebp-58h] +
movs   +
movs   +
movs   +
lea ecx [ebp-48h] +
movs   +
call sub_10039B9  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-58h] +
xor edi edi +
push eax  +
mov [ebp-4] edi +
call sub_1015E70  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
lea eax [ebp-2Ch] +
mov esi offset unk_1029090 +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_101D9E3  +
mov [ebp-5Ch] edi +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 2 +
jnb loc_101DCE7  +
lea eax [ebp-28h] +
lea ecx [ebp-5Ch] +
push ecx  +
push 20019h  +
push edi  +
push eax  +
push 80000002h  +
call ds:RegOpenKeyExW  +
mov ebx eax +
cmp ebx 2 +
jz loc_101DE00  +
cmp ebx edi +
jz loc_101DD5E  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101DD37  +
test byte ptr [eax+1Ch] 1 +
jz loc_101DD37  +
cmp byte ptr [eax+19h] 2 +
jb loc_101DD37  +
push ebx  +
push offset dword_1008834  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 28Dh  +
push offset aDW7rtmAdminW_9  +
push ebx  +
lea ecx [ebp-0A4h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-0A4h] +
push eax  +
call _CxxThrowException  +
mov eax [ebp-5Ch] +
push eax  +
lea ecx [ebp-84h] +
mov [ebp-5Ch] edi +
call sub_10213BD  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_1013A59  +
mov ebx eax +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_101DD80  +
sub eax ecx +
sar eax 1 +
lea ecx [ebp-84h] +
mov esi eax +
call sub_10214C3  +
jmp loc_101DDED  +
push esi  +
push ebx  +
push dword ptr [ebp-6Ch]  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_101DDE2  +
push 20019h  +
lea ecx [ebp-84h] +
call sub_1020FAD  +
cmp dword ptr [ebp-30h] 8 +
mov [ebp-60h] eax +
mov eax [ebp-44h] +
jnb loc_101DDCE  +
lea eax [ebp-44h] +
push edi  +
push edi  +
push eax  +
push dword ptr [ebp-60h]  +
call ds:RegDeleteKeyExW  +
lea ecx [ebp-60h] +
call sub_1012AD0  +
lea ecx [ebp-84h] +
call sub_1021285  +
cmp eax edi +
jz loc_101DD9D  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 2 +
call sub_10211C5  +
lea ecx [ebp-5Ch] +
call sub_1012AD0  +
push edi  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
push edi  +
push 1  +
lea ecx [ebp-48h] +
call sub_1001B47  +
call sub_1002043  +
retn 10h  +
***
call sub_10021E6  +
mov eax [ebp+8] +
lea esi [ebp+0Ch] +
lea edi [ebp-94h] +
movs   +
movs   +
movs   +
lea ecx [ebp-84h] +
mov [ebp-0A4h] eax +
movs   +
call sub_10039B9  +
lea eax [ebp-84h] +
push eax  +
lea eax [ebp-94h] +
xor ebx ebx +
push eax  +
mov [ebp-4] ebx +
call sub_1015E70  +
mov [ebp-98h] ebx +
lea ecx [ebp-68h] +
call sub_10039B9  +
lea eax [ebp-68h] +
push eax  +
mov ecx offset unk_1029090 +
mov byte ptr [ebp-4] 2 +
call sub_101DBB3  +
cmp dword ptr [ebp-50h] 8 +
mov eax [ebp-64h] +
jnb loc_101DE9F  +
lea eax [ebp-64h] +
mov esi ds:RegOpenKeyExW +
lea ecx [ebp-98h] +
push ecx  +
push 20006h  +
push ebx  +
push eax  +
mov edi 80000002h +
push edi  +
call esi  +
mov ecx eax +
mov [ebp-9Ch] ecx +
cmp ecx ebx +
jz loc_101DF21  +
cmp ecx 2 +
jz loc_101DFC8  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101DEFB  +
test byte ptr [eax+1Ch] 1 +
jz loc_101DEFB  +
cmp byte ptr [eax+19h] 2 +
jb loc_101DEFB  +
push ecx  +
push offset dword_1008834  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2BAh  +
push offset aDW7rtmAdminW_9  +
push dword ptr [ebp-9Ch]  +
lea ecx [ebp-30h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-30h] +
push eax  +
call _CxxThrowException  +
mov eax [ebp-70h] +
add eax 0FFFFFFFEh +
push eax  +
push 1  +
lea eax [ebp-84h] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_101D908  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 3 +
jnb loc_101DF49  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp-98h]  +
call ds:RegDeleteValueW  +
mov ecx eax +
mov [ebp-9Ch] ecx +
cmp ecx ebx +
jz loc_101DFBD  +
cmp ecx 2 +
jz loc_101DFBD  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101DF92  +
test byte ptr [eax+1Ch] 1 +
jz loc_101DF92  +
cmp byte ptr [eax+19h] 2 +
jb loc_101DF92  +
push ecx  +
push offset dword_1008834  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2C1h  +
push offset aDW7rtmAdminW_9  +
push dword ptr [ebp-9Ch]  +
lea ecx [ebp-0C4h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-0C4h] +
jmp loc_101DF1B  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
mov [ebp-0A0h] ebx +
lea ecx [ebp-4Ch] +
call sub_10039B9  +
lea eax [ebp-4Ch] +
push eax  +
mov ecx offset unk_1029090 +
mov byte ptr [ebp-4] 5 +
call sub_101D9E3  +
cmp dword ptr [ebp-34h] 8 +
mov eax [ebp-48h] +
jnb loc_101DFF4  +
lea eax [ebp-48h] +
lea ecx [ebp-0A0h] +
push ecx  +
push 2001Fh  +
push ebx  +
push eax  +
push edi  +
call esi  +
mov esi eax +
cmp esi ebx +
jz loc_101E04F  +
cmp esi 2 +
jz loc_101E09D  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101E03F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101E03F  +
cmp byte ptr [eax+19h] 2 +
jb loc_101E03F  +
push esi  +
push offset dword_1008834  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2D2h  +
push offset aDW7rtmAdminW_9  +
push esi  +
jmp loc_101DFA2  +
push dword ptr [ebp-0A4h]  +
push dword ptr [ebp-0A0h]  +
call sub_1020929  +
mov esi eax +
cmp esi ebx +
jz loc_101E09D  +
cmp esi 2 +
jz loc_101E09D  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101E096  +
test byte ptr [eax+1Ch] 1 +
jz loc_101E096  +
cmp byte ptr [eax+19h] 2 +
jb loc_101E096  +
push esi  +
push offset dword_1008834  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2D8h  +
jmp loc_101E044  +
push ebx  +
push 1  +
lea ecx [ebp-4Ch] +
call sub_1001B47  +
lea ecx [ebp-0A0h] +
call sub_1012AD0  +
push ebx  +
push 1  +
lea ecx [ebp-68h] +
call sub_1001B47  +
lea ecx [ebp-98h] +
call sub_1012AD0  +
push ebx  +
push 1  +
lea ecx [ebp-84h] +
call sub_1001B47  +
call sub_1002043  +
retn 14h  +
***
call sub_10021E6  +
mov ebx [ebp+18h] +
lea esi [ebp+8] +
lea edi [ebp-74h] +
movs   +
movs   +
movs   +
push offset aSecurity  +
mov ecx ebx +
movs   +
call sub_101D61E  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101E54A  +
cmp dword ptr [ebp+1Ch] 8 +
jbe loc_101E177  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101E14F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101E14F  +
cmp byte ptr [eax+19h] 2 +
jb loc_101E14F  +
push 0Dh  +
push offset dword_1008834  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 357h  +
push offset aDW7rtmAdminW_9  +
push 0Dh  +
lea ecx [ebp-0BCh] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-0BCh] +
push eax  +
call _CxxThrowException  +
lea eax [ebx+0E8h] +
cmp dword ptr [eax+18h] 8 +
jb loc_101E188  +
mov eax [eax+4] +
jmp loc_101E18B  +
add eax 4 +
lea esi [ebx+48h] +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
movs   +
mov [ebp-90h] eax +
push 4  +
xor eax eax +
pop ecx  +
lea edi [ebp-20h] +
lea esi [ebp-74h] +
cmps   +
setz al  +
lea ecx [ebp-48h] +
mov [ebp-7Ch] eax +
call sub_10039B9  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-74h] +
xor esi esi +
push eax  +
mov [ebp-4] esi +
call sub_1015E70  +
lea ecx [ebp-64h] +
call sub_10039B9  +
lea eax [ebp-64h] +
push eax  +
push dword ptr [ebp-90h]  +
mov ecx offset unk_1029090 +
mov byte ptr [ebp-4] 1 +
call sub_101DAC1  +
mov [ebp-84h] esi +
cmp dword ptr [ebp-4Ch] 8 +
mov eax [ebp-60h] +
mov byte ptr [ebp-4] 2 +
jnb loc_101E1FE  +
lea eax [ebp-60h] +
lea ecx [ebp-84h] +
push ecx  +
mov edi 2001Fh +
push edi  +
push esi  +
push eax  +
push 80000002h  +
call ds:RegOpenKeyExW  +
mov ecx eax +
mov [ebp-94h] ecx +
cmp ecx 2 +
jz loc_101E529  +
cmp ecx esi +
jz loc_101E26D  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101E258  +
test byte ptr [eax+1Ch] 1 +
jz loc_101E258  +
cmp byte ptr [eax+19h] 2 +
jb loc_101E258  +
push ecx  +
push offset dword_1008834  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 372h  +
push offset aDW7rtmAdminW_9  +
push dword ptr [ebp-94h]  +
jmp loc_101E15B  +
mov [ebp-78h] esi +
cmp dword ptr [ebp-30h] 8 +
mov eax [ebp-44h] +
mov byte ptr [ebp-4] 3 +
jnb loc_101E280  +
lea eax [ebp-44h] +
push esi  +
lea ecx [ebp-78h] +
push ecx  +
push esi  +
push edi  +
push esi  +
push esi  +
push esi  +
push eax  +
push dword ptr [ebp-84h]  +
call ds:RegCreateKeyExW  +
mov edi eax +
cmp edi esi +
jz loc_101E2D8  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101E2C8  +
test byte ptr [eax+1Ch] 1 +
jz loc_101E2C8  +
cmp byte ptr [eax+19h] 2 +
jb loc_101E2C8  +
push edi  +
push offset dword_1008834  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 37Fh  +
push offset aDW7rtmAdminW_9  +
push edi  +
jmp loc_101E15B  +
xor edi edi +
inc edi  +
push edi  +
push offset aEnabled  +
push dword ptr [ebp-78h]  +
call sub_1020B9A  +
push dword ptr [ebx+38h]  +
push offset aEnablelevel  +
push dword ptr [ebp-78h]  +
call sub_1020B9A  +
push dword ptr [ebp-90h]  +
lea ecx [ebp-2Ch] +
call sub_100159C  +
lea eax [ebp-2Ch] +
push eax  +
push offset aLoggername  +
push dword ptr [ebp-78h]  +
mov byte ptr [ebp-4] 4 +
call sub_102104B  +
push esi  +
push edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1001B47  +
cmp [ebp-7Ch] esi +
jz loc_101E344  +
push dword ptr [ebx+40h]  +
push offset aEnableflags  +
push dword ptr [ebp-78h]  +
call sub_1020B9A  +
jmp loc_101E521  +
push dword ptr [ebx+9Ch]  +
call sub_1012B41  +
test al al +
jnz loc_101E362  +
cmp dword ptr [ebx+98h] 2 +
mov [ebp-94h] esi +
jnz loc_101E368  +
mov [ebp-94h] edi +
push 3Fh  +
pop ecx  +
sub ecx [ebp+1Ch] +
mov eax edi +
xor edx edx +
call sub_1005989  +
mov edi eax +
mov eax [ebx+40h] +
mov [ebp-9Ch] eax +
mov eax [ebx+44h] +
mov [ebp-14h] edx +
mov [ebp-98h] eax +
mov [ebp-80h] esi +
mov [ebp-7Ch] esi +
mov [ebp-8Ch] esi +
mov [ebp-88h] esi +
cmp [ebp-94h] esi +
jz loc_101E3DC  +
lea ecx [ebx+10h] +
mov eax [ecx] +
call dword ptr [eax]  +
test al al +
jz loc_101E430  +
cmp byte ptr [ebp+20h] 0 +
jz loc_101E430  +
mov eax [ebp-9Ch] +
mov [ebp-80h] eax +
mov eax [ebp-98h] +
mov [ebp-7Ch] eax +
mov eax [ebp-14h] +
mov [ebp-8Ch] edi +
mov [ebp-88h] eax +
jmp loc_101E430  +
lea eax [ebp-80h] +
push eax  +
push offset aMatchanykeywor  +
push dword ptr [ebp-78h]  +
call sub_1020ACD  +
lea ecx [ebx+10h] +
mov eax [ecx] +
mov [ebp-8Ch] esi +
mov [ebp-88h] esi +
call dword ptr [eax]  +
test al al +
jz loc_101E417  +
cmp byte ptr [ebp+20h] 0 +
jz loc_101E417  +
mov eax [ebp-80h] +
or eax edi +
mov eax [ebp-14h] +
or [ebp-7Ch] eax +
jmp loc_101E426  +
mov eax [ebp-14h] +
mov ecx [ebp-80h] +
not edi  +
not eax  +
and ecx edi +
and [ebp-7Ch] eax +
and dword ptr [ebp-7Ch] 0FF000000h +
mov [ebp-80h] esi +
mov eax [ebp-80h] +
or eax [ebp-7Ch] +
jnz loc_101E4B1  +
mov eax [ebp-8Ch] +
or eax [ebp-88h] +
jnz loc_101E4B1  +
lea ecx [ebp-78h] +
call sub_1012AD0  +
cmp dword ptr [ebp-30h] 8 +
mov eax [ebp-44h] +
jnb loc_101E45A  +
lea eax [ebp-44h] +
push esi  +
push esi  +
push eax  +
push dword ptr [ebp-84h]  +
call ds:RegDeleteKeyExW  +
mov edi eax +
cmp edi esi +
jz loc_101E521  +
cmp edi 2 +
jz loc_101E521  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101E4A7  +
test byte ptr [eax+1Ch] 1 +
jz loc_101E4A7  +
cmp byte ptr [eax+19h] 2 +
jb loc_101E4A7  +
push edi  +
push offset dword_1008834  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 3C2h  +
jmp loc_101E2CD  +
push dword ptr [ebp-7Ch]  +
push dword ptr [ebp-80h]  +
push offset aMatchanykeywor  +
push dword ptr [ebp-78h]  +
call sub_1020C15  +
push dword ptr [ebp-88h]  +
push dword ptr [ebp-8Ch]  +
push offset aMatchallkeywor  +
push dword ptr [ebp-78h]  +
call sub_1020C15  +
xor eax eax +
cmp [ebx+34h] esi +
jz loc_101E4E5  +
inc eax  +
push eax  +
push offset aEnableproperty  +
push dword ptr [ebp-78h]  +
call sub_1020B9A  +
push dword ptr [ebp-90h]  +
lea ecx [ebp-2Ch] +
call sub_100159C  +
lea eax [ebp-2Ch] +
push eax  +
push offset aLoggername  +
push dword ptr [ebp-78h]  +
mov byte ptr [ebp-4] 5 +
call sub_102104B  +
push esi  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
lea ecx [ebp-78h] +
call sub_1012AD0  +
lea ecx [ebp-84h] +
call sub_1012AD0  +
push esi  +
push 1  +
lea ecx [ebp-64h] +
call sub_1001B47  +
push esi  +
push 1  +
lea ecx [ebp-48h] +
call sub_1001B47  +
call sub_1002043  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_101D960  +
leave   +
retn   +
***
call sub_10017A2  +
mov esi [ebp+10h] +
lea edi [ebp-24h] +
movs   +
movs   +
movs   +
mov ebx ecx +
movs   +
call sub_101D4EB  +
mov esi [ebp+0Ch] +
mov edi eax +
test esi esi +
jz loc_101E7A5  +
mov ecx ebx +
call sub_101D4D3  +
mov ecx 0FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx esi +
jnb loc_101E662  +
call loc_1009AFB  +
add eax esi +
cmp edi eax +
jnb loc_101E70E  +
mov edx edi +
shr edx 1 +
sub ecx edx +
cmp ecx edi +
jnb loc_101E67A  +
xor edi edi +
jmp loc_101E67C  +
add edi edx +
cmp edi eax +
jnb loc_101E682  +
mov edi eax +
push 0  +
push edi  +
call sub_101D52C  +
and dword ptr [ebp-4] 0 +
push ebx  +
mov [ebp-28h] eax +
push dword ptr [ebp-28h]  +
mov eax [ebx+4] +
push dword ptr [ebp+8]  +
push eax  +
call sub_101D87A  +
lea ecx [ebp-24h] +
push ecx  +
push esi  +
push eax  +
mov ecx ebx +
call sub_101D93A  +
mov ecx [ebx+8] +
push ebx  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
call sub_101D87A  +
mov ecx ebx +
call sub_101D4D3  +
add esi eax +
mov eax [ebx+4] +
test eax eax +
jz loc_101E6E1  +
mov ecx [ebx+8] +
jmp loc_101E6D4  +
add eax 10h +
cmp eax ecx +
jnz loc_101E6D1  +
push dword ptr [ebx+4]  +
call sub_1001B90  +
pop ecx  +
mov eax [ebp-28h] +
shl edi 4 +
add edi eax +
shl esi 4 +
add esi eax +
mov [ebx+0Ch] edi +
mov [ebx+8] esi +
mov [ebx+4] eax +
jmp loc_101E7A5  +
push dword ptr [ebp-28h]  +
call sub_1001B90  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
mov edi [ebx+8] +
mov ecx [ebp+8] +
mov eax edi +
sub eax ecx +
sar eax 4 +
push ebx  +
cmp eax esi +
jnb loc_101E770  +
mov eax esi +
shl eax 4 +
mov [ebp-28h] eax +
add eax ecx +
push eax  +
push edi  +
push ecx  +
call sub_101D87A  +
mov eax [ebx+8] +
lea ecx [ebp-24h] +
push ecx  +
mov ecx eax +
sub ecx [ebp+8] +
mov dword ptr [ebp-4] 2 +
sar ecx 4 +
sub esi ecx +
push esi  +
push eax  +
mov ecx ebx +
call sub_101D93A  +
mov eax [ebp-28h] +
add [ebx+8] eax +
mov ebx [ebx+8] +
lea ecx [ebp-24h] +
push ecx  +
sub ebx eax +
push ebx  +
push dword ptr [ebp+8]  +
call sub_101D503  +
add esp 0Ch +
jmp loc_101E7A5  +
push edi  +
shl esi 4 +
mov [ebp-28h] edi +
sub [ebp-28h] esi +
push edi  +
push dword ptr [ebp-28h]  +
call sub_101D87A  +
push edi  +
push dword ptr [ebp-28h]  +
mov [ebx+8] eax +
push dword ptr [ebp+8]  +
call sub_101D5C5  +
lea eax [ebp-24h] +
push eax  +
mov eax [ebp+8] +
add esi eax +
push esi  +
push eax  +
call sub_101D503  +
add esp 18h +
call sub_1004E54  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_101D4D3  +
test eax eax +
jnz loc_101E7C8  +
xor esi esi +
jmp loc_101E7D1  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 4 +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_101E61F  +
mov eax [ebp+arg_0] +
shl esi 4 +
add esi [edi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_10021E6  +
mov eax [ebp+8] +
xor ebx ebx +
mov [ebp-7Ch] eax +
mov [ebp-6Ch] ebx +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call sub_10039B9  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx offset unk_1029090 +
mov byte ptr [ebp-4] 1 +
call sub_101DBB3  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101E839  +
lea eax [ebp-28h] +
lea ecx [ebp-6Ch] +
push ecx  +
mov edi 20006h +
push edi  +
push ebx  +
push eax  +
mov esi 80000002h +
push esi  +
call ds:RegOpenKeyExW  +
mov [ebp-68h] eax +
cmp eax 2 +
jnz loc_101E87D  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101E865  +
lea eax [ebp-28h] +
lea ecx [ebp-70h] +
push ecx  +
lea ecx [ebp-6Ch] +
push ecx  +
push ebx  +
push edi  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push esi  +
call ds:RegCreateKeyExW  +
mov [ebp-68h] eax +
cmp [ebp-68h] ebx +
jz loc_101E8D8  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101E8AF  +
test byte ptr [eax+1Ch] 1 +
jz loc_101E8AF  +
cmp byte ptr [eax+19h] 2 +
jb loc_101E8AF  +
push dword ptr [ebp-68h]  +
push offset dword_1008834  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2FCh  +
push offset aDW7rtmAdminW_9  +
push dword ptr [ebp-68h]  +
lea ecx [ebp-0ACh] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-0ACh] +
push eax  +
call _CxxThrowException  +
lea ecx [ebp-48h] +
call sub_10039B9  +
mov ebx [ebp-7Ch] +
lea esi [ebx+104h] +
lea edi [ebp-9Ch] +
movs   +
movs   +
lea eax [ebp-48h] +
movs   +
push eax  +
lea eax [ebp-9Ch] +
push eax  +
mov byte ptr [ebp-4] 2 +
movs   +
call sub_1015E70  +
mov eax [ebp-34h] +
add eax 0FFFFFFFEh +
push eax  +
push 1  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-64h] +
call sub_101D908  +
push offset aSecurity  +
mov ecx ebx +
mov byte ptr [ebp-4] 3 +
call sub_101D61E  +
push eax  +
call ds:_wcsicmp  +
mov esi [ebp-7Ch] +
mov ebx eax +
neg ebx  +
pop ecx  +
sbb bl bl +
pop ecx  +
inc bl  +
mov ecx esi +
mov [ebp-70h] bl +
call sub_101D637  +
xor edi edi +
cmp eax edi +
jnz loc_101E95F  +
push dword ptr [ebp-70h]  +
mov esi [esi+98h] +
push esi  +
call sub_1013298  +
mov [ebp-88h] edi +
mov [ebp-84h] edi +
mov [ebp-80h] edi +
cmp byte ptr [ebp+0Ch] 0 +
mov byte ptr [ebp-4] 4 +
mov [ebp-74h] edi +
mov [ebp-78h] edi +
mov dword ptr [ebp-68h] offset aOBagBadA0xffff +
jz loc_101E98C  +
mov dword ptr [ebp-68h] offset aOBagBadA0xff_0 +
test bl bl +
jz loc_101E997  +
mov dword ptr [ebp-68h] offset aOBagBadA0xff_1 +
push edi  +
lea ecx [ebp-74h] +
push ecx  +
xor ebx ebx +
inc ebx  +
push ebx  +
push eax  +
call ConvertStringSecurityDescriptorToSecurityDescriptorW  +
test eax eax +
jnz loc_101E9F6  +
call ds:GetLastError  +
mov esi eax +
cmp esi edi +
jnz loc_101E9BB  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101E9E6  +
test byte ptr [eax+1Ch] 1 +
jz loc_101E9E6  +
cmp byte ptr [eax+19h] 2 +
jb loc_101E9E6  +
push esi  +
push offset dword_1008834  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 32Bh  +
push offset aDW7rtmAdminW_9  +
push esi  +
jmp loc_101E8BC  +
push dword ptr [ebp-74h]  +
mov esi ds:LocalFree +
push esi  +
lea eax [ebp-98h] +
push eax  +
call sub_1004AE6  +
push edi  +
lea eax [ebp-78h] +
push eax  +
push ebx  +
push dword ptr [ebp-68h]  +
mov byte ptr [ebp-4] 5 +
call ConvertStringSecurityDescriptorToSecurityDescriptorW  +
test eax eax +
jnz loc_101EA84  +
call ds:GetLastError  +
mov esi eax +
cmp esi edi +
jnz loc_101EA33  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101EA5E  +
test byte ptr [eax+1Ch] 1 +
jz loc_101EA5E  +
cmp byte ptr [eax+19h] 2 +
jb loc_101EA5E  +
push esi  +
push offset dword_1008834  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 335h  +
push offset aDW7rtmAdminW_9  +
push esi  +
lea ecx [ebp-0D8h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-0D8h] +
jmp loc_101E8D2  +
push dword ptr [ebp-78h]  +
lea eax [ebp-0B8h] +
push esi  +
push eax  +
call sub_1004AE6  +
push dword ptr [ebp-70h]  +
lea eax [ebp-8Ch] +
push eax  +
push dword ptr [ebp-78h]  +
mov byte ptr [ebp-4] 6 +
push offset dword_101EB80  +
push offset unk_10296C4  +
push dword ptr [ebp-74h]  +
call sub_1021F74  +
cmp [ebp-88h] edi +
jnz loc_101EAC3  +
xor eax eax +
jmp loc_101EACF  +
mov eax [ebp-84h] +
sub eax [ebp-88h] +
cmp dword ptr [ebp-4Ch] 8 +
mov ecx [ebp-60h] +
jnb loc_101EADB  +
lea ecx [ebp-60h] +
push eax  +
push dword ptr [ebp-88h]  +
push 3  +
push edi  +
push ecx  +
push dword ptr [ebp-6Ch]  +
call ds:RegSetValueExW  +
mov esi eax +
cmp esi edi +
jz loc_101EB2A  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101EB20  +
test byte ptr [eax+1Ch] 1 +
jz loc_101EB20  +
cmp byte ptr [eax+19h] 2 +
jb loc_101EB20  +
push esi  +
push offset dword_1008834  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 348h  +
jmp loc_101EA63  +
lea eax [ebp-0B8h] +
push eax  +
call sub_1003FFD  +
lea eax [ebp-98h] +
push eax  +
call sub_1003FFD  +
lea ecx [ebp-8Ch] +
call sub_10043CC  +
push edi  +
push ebx  +
lea ecx [ebp-64h] +
call sub_1001B47  +
push edi  +
push ebx  +
lea ecx [ebp-48h] +
call sub_1001B47  +
push edi  +
push ebx  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
lea ecx [ebp-6Ch] +
call sub_1012AD0  +
call sub_1002043  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_101D4D3  +
mov ecx esi +
mov edi eax +
call sub_101D4EB  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jnb loc_101EEE1  +
push 1  +
push eax  +
call sub_101D93A  +
mov [esi+8] eax +
jmp loc_101EEEB  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_101E7B2  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10021E6  +
mov ecx [ebp+8] +
mov [ebp-0BCh] ecx +
call sub_101E601  +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
lea eax [ebp-2Ch] +
xor ebx ebx +
push eax  +
mov ecx offset unk_1029090 +
mov [ebp-4] ebx +
call sub_1015B06  +
mov [ebp-0B8h] ebx +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 1 +
jnb loc_101EF44  +
lea eax [ebp-28h] +
lea ecx [ebp-0B8h] +
push ecx  +
push 20019h  +
push ebx  +
push eax  +
mov esi 80000002h +
push esi  +
call ds:RegOpenKeyExW  +
mov edi eax +
cmp edi 2 +
jz loc_101F040  +
cmp edi ebx +
jz loc_101EFB9  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101EF98  +
test byte ptr [eax+1Ch] 1 +
jz loc_101EF98  +
cmp byte ptr [eax+19h] 2 +
jb loc_101EF98  +
push edi  +
push offset dword_1008834  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 101h  +
push offset aDW7rtmAdminW_9  +
push edi  +
lea ecx [ebp-68h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-68h] +
push eax  +
call _CxxThrowException  +
lea ecx [ebp-48h] +
call sub_10039B9  +
push 0FFFFFFFFh  +
push ebx  +
push offset unk_10290E4  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call sub_10024F0  +
cmp dword ptr [ebp-30h] 8 +
mov eax [ebp-44h] +
jnb loc_101EFE1  +
lea eax [ebp-44h] +
push eax  +
push esi  +
lea ecx [ebp-0B4h] +
call sub_1016F0B  +
lea ecx [ebp-0B4h] +
mov byte ptr [ebp-4] 3 +
call sub_1013386  +
jmp loc_101F022  +
lea eax [ebp-58h] +
push eax  +
call sub_1013927  +
mov ecx [ebp-0BCh] +
lea eax [ebp-58h] +
push eax  +
call sub_101EEB1  +
lea ecx [ebp-0B4h] +
call sub_10133FF  +
lea ecx [ebp-0B4h] +
cmp al bl +
jnz loc_101EFFF  +
mov byte ptr [ebp-4] 2 +
call sub_1013CEB  +
push ebx  +
push 1  +
lea ecx [ebp-48h] +
call sub_1001B47  +
lea ecx [ebp-0B8h] +
call sub_1012AD0  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
call sub_1002043  +
retn 4  +
***
call sub_10017A2  +
lea esi [ebp+8] +
lea edi [ebp-40h] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+18h] +
push offset aSecurity  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101F1D7  +
lea ecx [ebp-30h] +
call sub_10039B9  +
push 0FFFFFFFFh  +
xor edi edi +
push edi  +
push offset unk_10290E4  +
lea ecx [ebp-30h] +
mov [ebp-4] edi +
call sub_10024F0  +
mov [ebp-0D4h] edi +
push esi  +
lea ecx [ebp-0F8h] +
mov byte ptr [ebp-4] 2 +
call sub_100159C  +
cmp dword ptr [ebp-18h] 8 +
mov eax [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
jnb loc_101F0D8  +
lea eax [ebp-2Ch] +
push eax  +
push 80000002h  +
lea eax [ebp-0F8h] +
push eax  +
lea ecx [ebp-0D0h] +
call sub_1017AD6  +
xor ebx ebx +
push edi  +
inc ebx  +
push ebx  +
lea ecx [ebp-0F8h] +
mov byte ptr [ebp-4] 5 +
call sub_1001B47  +
push 138h  +
call sub_1004829  +
pop ecx  +
mov ecx eax +
mov [ebp-0D8h] ecx +
mov byte ptr [ebp-4] 6 +
cmp ecx edi +
jz loc_101F12D  +
lea eax [ebp-0D0h] +
push eax  +
call sub_101907F  +
jmp loc_101F12F  +
xor eax eax +
push eax  +
lea ecx [ebp-0D4h] +
mov byte ptr [ebp-4] 5 +
call sub_1004E7A  +
lea ecx [ebp-0D0h] +
mov byte ptr [ebp-4] 2 +
call sub_1017A27  +
push ebx  +
push dword ptr [ebp+1Ch]  +
lea esi [ebp-40h] +
push dword ptr [ebp-0D4h]  +
mov [ebp-4] ebx +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_101E0E4  +
mov ecx [ebp-0D4h] +
mov byte ptr [ebp-4] 0 +
test ecx ecx +
jz loc_101F17F  +
call sub_1004249  +
push 0  +
push ebx  +
jmp loc_101F1CF  +
mov esi [ebp-0DCh] +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
cmp eax 2 +
jz loc_101F1AB  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
cmp eax 3A9Fh +
jz loc_101F1AB  +
push 0  +
push 0  +
call _CxxThrowException  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_101F1B8 +
retn   +
mov ecx [ebp-0D4h] +
mov byte ptr [ebp-4] 0 +
test ecx ecx +
jz loc_101F1CB  +
call sub_1004249  +
push 0  +
push 1  +
lea ecx [ebp-30h] +
call sub_1001B47  +
call sub_1004E54  +
retn 18h  +
***
call sub_10017A2  +
mov ecx [ebp+8] +
mov [ebp-0DCh] ecx +
call sub_101D61E  +
mov esi ds:_wcsicmp +
mov edi eax +
push offset aSecurity  +
push edi  +
mov [ebp-0F0h] edi +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101F559  +
lea ecx [ebp-30h] +
call sub_10039B9  +
push 0FFFFFFFFh  +
xor ebx ebx +
push ebx  +
push offset unk_10290E4  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call sub_10024F0  +
mov [ebp-0FCh] ebx +
mov [ebp-0F8h] ebx +
mov [ebp-0F4h] ebx +
lea eax [ebp-100h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101EEF6  +
push offset aApplication  +
push edi  +
mov [ebp-0C1h] bl +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101F282  +
push offset aSystem  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101F289  +
mov byte ptr [ebp-0C1h] 1 +
mov [ebp-0C8h] ebx +
mov ecx [ebp-0FCh] +
cmp ecx ebx +
jz loc_101F543  +
mov eax [ebp-0F8h] +
sub eax ecx +
sar eax 4 +
cmp [ebp-0C8h] eax +
jnb loc_101F543  +
mov [ebp-0E8h] ebx +
mov [ebp-0E4h] ebx +
mov [ebp-0E0h] ebx +
mov eax [ebp-0C8h] +
shl eax 4 +
add eax ecx +
cmp dword ptr [ebp-18h] 8 +
mov ecx [ebp-2Ch] +
mov [ebp-0D4h] eax +
mov byte ptr [ebp-4] 3 +
jnb loc_101F2E7  +
lea ecx [ebp-2Ch] +
push ecx  +
push 80000002h  +
push eax  +
lea ecx [ebp-0A8h] +
call sub_1016975  +
lea eax [ebp-0ECh] +
push eax  +
lea ecx [ebp-0A8h] +
mov byte ptr [ebp-4] 4 +
call sub_10183F1  +
lea ecx [ebp-0A8h] +
mov byte ptr [ebp-4] 3 +
call sub_1013E1D  +
mov dword ptr [ebp-4] 2 +
mov [ebp-0CCh] ebx +
lea ecx [ebp-0ECh] +
call sub_1013478  +
cmp [ebp-0CCh] eax +
jnb loc_101F527  +
mov esi [ebp-0CCh] +
imul esi esi +
add esi [ebp-0E8h] +
cmp dword ptr [esi+18h] 8 +
jb loc_101F35C  +
mov eax [esi+4] +
jmp loc_101F35F  +
lea eax [esi+4] +
push dword ptr [ebp-0F0h]  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101F397  +
push dword ptr [ebp+0Ch]  +
push dword ptr [esi+20h]  +
mov esi [ebp-0D4h] +
push dword ptr [ebp-0DCh]  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_101E0E4  +
jmp loc_101F4A9  +
cmp byte ptr [ebp-0C1h] 0 +
jz loc_101F4A9  +
mov [ebp-0D0h] ebx +
cmp dword ptr [ebp-18h] 8 +
mov eax [ebp-2Ch] +
mov byte ptr [ebp-4] 7 +
jnb loc_101F3BA  +
lea eax [ebp-2Ch] +
push eax  +
push 80000002h  +
push esi  +
lea ecx [ebp-0C0h] +
call sub_1017AD6  +
push 138h  +
mov byte ptr [ebp-4] 8 +
call sub_1004829  +
pop ecx  +
mov ecx eax +
mov [ebp-108h] ecx +
mov byte ptr [ebp-4] 9 +
cmp ecx ebx +
jz loc_101F3F9  +
lea eax [ebp-0C0h] +
push eax  +
call sub_101907F  +
jmp loc_101F3FB  +
xor eax eax +
push eax  +
lea ecx [ebp-0D0h] +
mov byte ptr [ebp-4] 8 +
call sub_1004E7A  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 7 +
call sub_1017A27  +
mov eax [ebp-0DCh] +
add eax 0E8h +
cmp dword ptr [eax+18h] 8 +
mov dword ptr [ebp-4] 6 +
jb loc_101F437  +
mov eax [eax+4] +
jmp loc_101F43A  +
add eax 4 +
mov ebx [ebp-0D0h] +
lea ecx [ebx+0E8h] +
cmp dword ptr [ecx+18h] 8 +
jb loc_101F451  +
mov ecx [ecx+4] +
jmp loc_101F454  +
add ecx 4 +
push eax  +
push ecx  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101F47D  +
push dword ptr [ebp+0Ch]  +
push dword ptr [esi+20h]  +
mov esi [ebp-0D4h] +
push ebx  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_101E0E4  +
mov byte ptr [ebp-4] 2 +
test ebx ebx +
jz loc_101F4A9  +
mov ecx ebx +
jmp loc_101F4A4  +
mov dword ptr [ebp-4] 6 +
mov eax offset loc_101F496 +
retn   +
mov ecx [ebp-0D0h] +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_101F4A9  +
call sub_1004249  +
inc dword ptr [ebp-0CCh]  +
xor ebx ebx +
jmp loc_101F32B  +
call ds:RpcStringFreeW  +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_101F527 +
retn   +
lea ecx [ebp-0ECh] +
mov byte ptr [ebp-4] 1 +
call sub_1017446  +
inc dword ptr [ebp-0C8h]  +
xor ebx ebx +
jmp loc_101F28F  +
lea ecx [ebp-100h] +
call sub_10043CC  +
push ebx  +
push 1  +
lea ecx [ebp-30h] +
call sub_1001B47  +
call sub_1004E54  +
retn 8  +
***
call sub_10017A2  +
call sub_10021E6  +
mov ebx [ebp+8] +
mov al [ebx+130h] +
test al al +
jnz loc_101F7BA  +
push 1  +
push ebx  +
call sub_101F1E4  +
jmp loc_101FD7A  +
xor edi edi +
mov [ebp-138h] edi +
mov [ebp-4] edi +
mov [ebp-140h] edi +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
lea ecx [ebp-48h] +
call sub_10039B9  +
cmp dword ptr [ebx+100h] 8 +
mov byte ptr [ebp-4] 3 +
jb loc_101F7F0  +
mov eax [ebx+0ECh] +
jmp loc_101F7F6  +
lea eax [ebx+0ECh] +
lea ecx [ebp-2Ch] +
push ecx  +
mov esi offset unk_1029090 +
push eax  +
mov ecx esi +
call sub_101DAC1  +
lea eax [ebp-48h] +
push eax  +
mov ecx ebx +
call sub_101D61E  +
push eax  +
mov ecx esi +
call sub_101D99B  +
lea ecx [ebx+60h] +
mov eax [ecx] +
call dword ptr [eax]  +
test al al +
jnz loc_101F9B6  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_101F835  +
lea eax [ebp-28h] +
mov esi ds:RegOpenKeyExW +
lea ecx [ebp-138h] +
push ecx  +
push 20019h  +
push edi  +
push eax  +
mov edi 80000002h +
push edi  +
call esi  +
mov ecx eax +
mov [ebp-14Ch] ecx +
test ecx ecx +
jz loc_101F8BD  +
cmp ecx 2 +
jz loc_101F91E  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101F891  +
test byte ptr [eax+1Ch] 1 +
jz loc_101F891  +
cmp byte ptr [eax+19h] 2 +
jb loc_101F891  +
push ecx  +
push offset dword_1008834  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 144h  +
push offset aDW7rtmAdminW_9  +
push dword ptr [ebp-14Ch]  +
lea ecx [ebp-170h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-170h] +
push eax  +
call _CxxThrowException  +
cmp dword ptr [ebp-30h] 8 +
mov eax [ebp-44h] +
jnb loc_101F8C9  +
lea eax [ebp-44h] +
lea ecx [ebp-140h] +
push ecx  +
push 2001Fh  +
push 0  +
push eax  +
push edi  +
call esi  +
mov esi eax +
test esi esi +
jz loc_101F95F  +
cmp esi 2 +
jz loc_101F91E  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101F911  +
test byte ptr [eax+1Ch] 1 +
jz loc_101F911  +
cmp byte ptr [eax+19h] 2 +
jb loc_101F911  +
push esi  +
push offset dword_1008834  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 152h  +
push offset aDW7rtmAdminW_9  +
push esi  +
jmp loc_101F8A1  +
cmp dword ptr [ebx+100h] 8 +
lea esi [ebx+104h] +
jb loc_101F935  +
mov ebx [ebx+0ECh] +
jmp loc_101F93B  +
add ebx 0ECh +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call sub_101DE2B  +
push 0  +
push 1  +
lea ecx [ebp-48h] +
call sub_1001B47  +
push 0  +
push 1  +
jmp loc_101FD5C  +
lea eax [ebp-150h] +
push eax  +
mov esi offset aFilecounter +
push esi  +
push dword ptr [ebp-138h]  +
call sub_1020A00  +
test al al +
jz loc_101F91E  +
lea eax [ebp-144h] +
push eax  +
push esi  +
push dword ptr [ebp-140h]  +
call sub_1020A00  +
test al al +
jz loc_101F91E  +
mov eax [ebp-150h] +
cmp eax [ebp-144h] +
jz loc_101F91E  +
push eax  +
push esi  +
push dword ptr [ebp-140h]  +
call sub_1020B9A  +
jmp loc_101F91E  +
lea eax [ebp-124h] +
push eax  +
lea ecx [ebp-144h] +
mov [ebp-144h] ebx +
call sub_101D65C  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebx+9Ch] +
lea esi [ebx+48h] +
lea edi [ebp-74h] +
movs   +
movs   +
movs   +
mov [ebp-144h] eax +
mov eax [ebp-28h] +
movs   +
jnb loc_101F9F0  +
lea eax [ebp-28h] +
lea ecx [ebp-148h] +
push ecx  +
lea ecx [ebp-138h] +
push ecx  +
xor edi edi +
push edi  +
push 2001Fh  +
push edi  +
push edi  +
push edi  +
push eax  +
push 80000002h  +
call ds:RegCreateKeyExW  +
mov esi eax +
cmp esi edi +
jz loc_101FA50  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_101FA46  +
test byte ptr [eax+1Ch] 1 +
jz loc_101FA46  +
cmp byte ptr [eax+19h] 2 +
jb loc_101FA46  +
push esi  +
push offset dword_1008834  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 182h  +
jmp loc_101F916  +
push 1  +
push offset aStart  +
push dword ptr [ebp-138h]  +
call sub_1020B9A  +
push dword ptr [ebp-0F4h]  +
push offset aBuffersize  +
push dword ptr [ebp-138h]  +
call sub_1020B9A  +
push dword ptr [ebp-0F0h]  +
push offset aMinimumbuffers  +
push dword ptr [ebp-138h]  +
call sub_1020B9A  +
push dword ptr [ebp-0ECh]  +
push offset aMaximumbuffers  +
push dword ptr [ebp-138h]  +
call sub_1020B9A  +
push dword ptr [ebp-0E0h]  +
push offset aFlushtimer  +
push dword ptr [ebp-138h]  +
call sub_1020B9A  +
push dword ptr [ebp-144h]  +
call sub_1012B41  +
test al al +
jz loc_101FB8E  +
push dword ptr [ebp-0E8h]  +
push offset aMaxfilesize  +
push dword ptr [ebp-138h]  +
call sub_1020B9A  +
cmp dword ptr [ebx+8Ch] 8 +
jb loc_101FAF1  +
mov eax [ebx+78h] +
jmp loc_101FAF4  +
lea eax [ebx+78h] +
push eax  +
lea ecx [ebp-90h] +
call sub_100159C  +
cmp dword ptr [ebp-78h] 8 +
mov eax [ebp-8Ch] +
mov byte ptr [ebp-4] 4 +
jnb loc_101FB16  +
lea eax [ebp-8Ch] +
push eax  +
lea ecx [ebp-16Ch] +
call sub_100159C  +
lea eax [ebp-16Ch] +
push eax  +
push offset aFilename  +
push dword ptr [ebp-138h]  +
mov byte ptr [ebp-4] 5 +
call sub_102104B  +
push edi  +
push 1  +
lea ecx [ebp-16Ch] +
mov byte ptr [ebp-4] 4 +
call sub_1001B47  +
mov eax [ebx+28h] +
mov esi [ebx+2Ch] +
cmp eax 1 +
jbe loc_101FB7C  +
push eax  +
push offset aFilemax  +
push dword ptr [ebp-138h]  +
call sub_1020B9A  +
push esi  +
push offset aFilecounter  +
push dword ptr [ebp-138h]  +
call sub_1020B9A  +
push edi  +
push 1  +
lea ecx [ebp-90h] +
mov byte ptr [ebp-4] 3 +
call sub_1001B47  +
push dword ptr [ebp-0D8h]  +
push offset aAge  +
push dword ptr [ebp-138h]  +
call sub_1020B9A  +
lea ecx [ebp-64h] +
call sub_10039B9  +
lea eax [ebp-134h] +
push eax  +
lea eax [ebp-64h] +
push eax  +
push offset aSecurity  +
mov byte ptr [ebp-4] 6 +
call sub_1015F49  +
cmp dword ptr [ebp-4Ch] 8 +
mov ecx [ebp-60h] +
jnb loc_101FBD1  +
lea ecx [ebp-60h] +
cmp dword ptr [ebx+100h] 8 +
jb loc_101FBE2  +
mov eax [ebx+0ECh] +
jmp loc_101FBE8  +
lea eax [ebx+0ECh] +
push ecx  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101FC02  +
mov eax [ebp-0E4h] +
or eax 40h +
push eax  +
jmp loc_101FC08  +
push dword ptr [ebp-0E4h]  +
push offset aLogfilemode  +
push dword ptr [ebp-138h]  +
call sub_1020B9A  +
push dword ptr [ebp-0FCh]  +
push offset aClocktype  +
push dword ptr [ebp-138h]  +
call sub_1020B9A  +
lea eax [ebx+114h] +
cmp dword ptr [eax+18h] 8 +
jb loc_101FC3F  +
mov eax [eax+4] +
jmp loc_101FC42  +
add eax 4 +
push eax  +
lea ecx [ebp-0ACh] +
call sub_100159C  +
lea eax [ebp-0ACh] +
push eax  +
push offset aGuid_0  +
push dword ptr [ebp-138h]  +
mov byte ptr [ebp-4] 7 +
call sub_102104B  +
push 4  +
pop ecx  +
mov edi offset dword_1008988 +
lea esi [ebp-74h] +
xor eax eax +
cmps   +
jz loc_101FC8F  +
push 1  +
push eax  +
push ebx  +
sub esp 10h +
mov edi esp +
lea esi [ebp-74h] +
movs   +
movs   +
movs   +
movs   +
call sub_101E0E4  +
mov ecx ebx +
call sub_101D61E  +
push eax  +
lea ecx [ebp-16Ch] +
call sub_100159C  +
lea eax [ebp-16Ch] +
push eax  +
push offset aOwningchannel  +
push dword ptr [ebp-138h]  +
mov byte ptr [ebp-4] 8 +
call sub_102104B  +
xor edi edi +
push 0  +
inc edi  +
push edi  +
lea ecx [ebp-16Ch] +
mov byte ptr [ebp-4] 7 +
call sub_1001B47  +
push offset aApplication  +
mov ecx ebx +
mov byte ptr [ebp-139h] 0 +
call sub_101D61E  +
mov esi ds:_wcsicmp +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101FD09  +
push offset aSystem  +
mov ecx ebx +
call sub_101D61E  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101FD10  +
mov byte ptr [ebp-139h] 1 +
cmp dword ptr [ebp-148h] 2 +
jnz loc_101FD22  +
cmp byte ptr [ebp-139h] 0 +
jnz loc_101FD29  +
push edi  +
push ebx  +
call sub_101F1E4  +
movzx eax byte_1029704 +
push eax  +
push ebx  +
call sub_101E7F6  +
xor esi esi +
push esi  +
push edi  +
lea ecx [ebp-0ACh] +
call sub_1001B47  +
push esi  +
push edi  +
lea ecx [ebp-64h] +
call sub_1001B47  +
push esi  +
push edi  +
lea ecx [ebp-48h] +
call sub_1001B47  +
push esi  +
push edi  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
lea ecx [ebp-140h] +
call sub_1012AD0  +
lea ecx [ebp-138h] +
call sub_1012AD0  +
call sub_1002043  +
retn 4  +
***
call sub_10021E6  +
mov esi [ebp+8] +
lea ecx [ebp-2Ch] +
call sub_10039B9  +
and dword ptr [ebp-4] 0 +
push 0FFFFFFFFh  +
push 0  +
push offset unk_10290E4  +
lea ecx [ebp-2Ch] +
call sub_10024F0  +
push esi  +
lea ecx [ebp-48h] +
call sub_100159C  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 1 +
jnb loc_101FEA9  +
lea eax [ebp-28h] +
push eax  +
push 80000002h  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-0D8h] +
call sub_1017AD6  +
lea eax [ebp-0D8h] +
push eax  +
lea ecx [ebp-210h] +
mov byte ptr [ebp-4] 2 +
call sub_101907F  +
lea eax [ebp-210h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_101F791  +
lea ecx [ebp-210h] +
mov byte ptr [ebp-4] 2 +
call sub_1019339  +
lea ecx [ebp-0D8h] +
mov byte ptr [ebp-4] 1 +
call sub_1017A27  +
push 0  +
push 1  +
lea ecx [ebp-48h] +
call sub_1001B47  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_1001B47  +
call sub_1002043  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_101FF51  +
test [ebp+arg_8] 1000h +
jz loc_101FF51  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_101FF99  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_101FF81  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_101FF99  +
test esi esi +
jbe loc_101FFB2  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_101FFB2  +
test [ebp+arg_8] 800h +
jz loc_101FFB2  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 14h +
ja loc_1020062  +
jmp ds:off_102006B[eax*4]  +
mov eax offset aEnabled +
jmp loc_1020067  +
mov eax offset aIsolation +
jmp loc_1020067  +
mov eax offset aType +
jmp loc_1020067  +
mov eax offset aClassiceventlo +
jmp loc_1020067  +
mov eax offset aChannelaccess +
jmp loc_1020067  +
mov eax offset aRetention +
jmp loc_1020067  +
mov eax offset aAutobackup +
jmp loc_1020067  +
mov eax offset aMaxsize +
jmp loc_1020067  +
mov eax offset aLogfilepath +
jmp loc_1020067  +
mov eax offset aLevel +
jmp loc_1020067  +
mov eax offset aKeywords +
jmp loc_1020067  +
mov eax offset aControlguid +
jmp loc_1020067  +
mov eax offset aBuffersize +
jmp loc_1020067  +
mov eax offset aMinbuffers +
jmp loc_1020067  +
mov eax offset aMaxbuffers +
jmp loc_1020067  +
mov eax offset aLatency +
jmp loc_1020067  +
mov eax offset aClocktype +
jmp loc_1020067  +
mov eax offset aSidtype +
jmp loc_1020067  +
mov eax offset aFilemax +
jmp loc_1020067  +
mov eax offset aUnknown +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100AF14  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005058  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
xor ebx ebx +
cmp edi ebx +
jz loc_10202DE  +
cmp [edi] bx +
jz loc_10202DE  +
mov esi [ebp+0Ch] +
push ebx  +
push 104h  +
mov ecx esi +
call sub_1001E91  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_1020199  +
xor eax eax +
jmp loc_10201A0  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push ebx  +
push ecx  +
push eax  +
push edi  +
mov edi ds:GetFullPathNameW +
call edi  +
cmp eax ebx +
jnz loc_102020A  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_10201C1  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10201EC  +
test byte ptr [eax+1Ch] 1 +
jz loc_10201EC  +
cmp byte ptr [eax+19h] 2 +
jb loc_10201EC  +
push esi  +
push offset aILsO2_ywtBYdW7  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 18h  +
push (offset aILsO2_ywtBYdW7+10h)  +
push esi  +
lea ecx [ebp-20h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-20h] +
push eax  +
call _CxxThrowException  +
mov edx [esi+4] +
cmp edx ebx +
jnz loc_1020215  +
xor ecx ecx +
jmp loc_102021C  +
mov ecx [esi+8] +
sub ecx edx +
sar ecx 1 +
cmp eax ecx +
jbe loc_10202F5  +
push ebx  +
push eax  +
mov ecx esi +
call sub_1001E91  +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_1020238  +
xor eax eax +
jmp loc_102023F  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push ebx  +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
call edi  +
cmp eax ebx +
jnz loc_102028E  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_102025C  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020287  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020287  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020287  +
push esi  +
push offset aILsO2_ywtBYdW7  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 1Dh  +
jmp loc_10201EE  +
***
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_1020299  +
xor esi esi +
jmp loc_10202A0  +
mov esi [esi+8] +
sub esi ecx +
sar esi 1 +
cmp eax esi +
jbe loc_10202F5  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10202D0  +
test byte ptr [eax+1Ch] 1 +
jz loc_10202D0  +
cmp byte ptr [eax+19h] 2 +
jb loc_10202D0  +
push 7Ah  +
push offset aILsO2_ywtBYdW7  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 20h  +
push (offset aILsO2_ywtBYdW7+10h)  +
push 7Ah  +
jmp loc_10201F4  +
***
mov ecx [ebp+0Ch] +
call sub_102013F  +
mov ecx [ebp+0Ch] +
lea eax [ebp+8] +
push eax  +
mov [ebp+8] ebx +
call sub_100B1CC  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov edi [ebp+lpSrc] +
test edi edi +
jz loc_1020480  +
cmp word ptr [edi] 0 +
jz loc_1020480  +
mov esi [ebp+arg_4] +
push 0  +
push 104h  +
mov ecx esi +
call sub_1001E91  +
mov ecx [esi+4] +
test ecx ecx +
jnz loc_102033C  +
xor eax eax +
jmp loc_1020343  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push eax  +
push ecx  +
push edi  +
mov edi ds:ExpandEnvironmentStringsW +
call edi  +
test eax eax +
jnz loc_10203AC  +
call ds:GetLastError  +
mov esi eax +
test esi esi +
jnz loc_1020363  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_102038E  +
test byte ptr [eax+1Ch] 1 +
jz loc_102038E  +
cmp byte ptr [eax+19h] 2 +
jb loc_102038E  +
push esi  +
push offset aILsO2_ywtBYdW7  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 2Eh  +
push (offset aILsO2_ywtBYdW7+10h)  +
push esi  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
mov edx [esi+4] +
test edx edx +
jnz loc_10203B7  +
xor ecx ecx +
jmp loc_10203BE  +
mov ecx [esi+8] +
sub ecx edx +
sar ecx 1 +
cmp eax ecx +
jbe loc_1020498  +
push 0  +
push eax  +
mov ecx esi +
call sub_1001E91  +
mov ecx [esi+4] +
test ecx ecx +
jnz loc_10203DB  +
xor eax eax +
jmp loc_10203E2  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push eax  +
push ecx  +
push [ebp+lpSrc]  +
call edi  +
test eax eax +
jnz loc_1020430  +
call ds:GetLastError  +
mov esi eax +
test esi esi +
jnz loc_10203FE  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020429  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020429  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020429  +
push esi  +
push offset aILsO2_ywtBYdW7  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 33h  +
jmp loc_1020390  +
mov ecx [esi+4] +
test ecx ecx +
jnz loc_102043B  +
xor esi esi +
jmp loc_1020442  +
mov esi [esi+8] +
sub esi ecx +
sar esi 1 +
cmp eax esi +
jbe loc_1020498  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020472  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020472  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020472  +
push 7Ah  +
push offset aILsO2_ywtBYdW7  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 36h  +
push (offset aILsO2_ywtBYdW7+10h)  +
push 7Ah  +
jmp loc_1020396  +
mov ecx [ebp+arg_4] +
call sub_102013F  +
mov ecx [ebp+arg_4] +
and [ebp+lpSrc] 0 +
lea eax [ebp+lpSrc] +
push eax  +
call sub_100B1CC  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+dwFlags] 800h +
cmp [ebp+arg_C] ebx +
jnz loc_10204C3  +
mov [ebp+dwFlags] 0A00h +
mov esi [ebp+Arguments] +
mov ecx [esi+4] +
cmp ecx ebx +
jz loc_10204D9  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
cmp eax 40h +
jnb loc_10204E3  +
push ebx  +
push 40h  +
mov ecx esi +
call sub_1001E91  +
mov eax [ebp+arg_C] +
cmp eax ebx +
jz loc_10204EF  +
mov eax [eax] +
mov [ebp+Arguments] eax +
mov ecx [esi+4] +
cmp ecx ebx +
jnz loc_10204FA  +
xor eax eax +
jmp loc_1020501  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
lea edx [ebp+Arguments] +
push edx  +
push eax  +
push ecx  +
push ebx  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
push [ebp+dwFlags]  +
call ds:FormatMessageW  +
test eax eax +
jnz loc_1020604  +
call ds:GetLastError  +
mov edi eax +
cmp edi ebx +
jz loc_1020530  +
cmp edi 7Ah +
jnz loc_102057E  +
mov ecx [esi+4] +
cmp ecx ebx +
jz loc_102056A  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
cmp eax 10000h +
jnb loc_10205CA  +
cmp ecx ebx +
jz loc_102056A  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
cmp eax 8000h +
jb loc_1020566  +
push ebx  +
push 10000h  +
jmp loc_10204DC  +
cmp ecx ebx +
jnz loc_102056E  +
xor eax eax +
jmp loc_1020575  +
mov eax [esi+8] +
sub eax ecx +
sar eax 1 +
push ebx  +
add eax eax +
push eax  +
jmp loc_10204DC  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10205A9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10205A9  +
cmp byte ptr [eax+19h] 2 +
jb loc_10205A9  +
push edi  +
push offset aILsO2_ywtBYdW7  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0F8h  +
push (offset aILsO2_ywtBYdW7+10h)  +
push edi  +
lea ecx [ebp+var_24] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_24] +
push eax  +
call _CxxThrowException  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10205F6  +
test byte ptr [eax+1Ch] 1 +
jz loc_10205F6  +
cmp byte ptr [eax+19h] 2 +
jb loc_10205F6  +
push 0Dh  +
push offset aILsO2_ywtBYdW7  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0FAh  +
push (offset aILsO2_ywtBYdW7+10h)  +
push 0Dh  +
jmp loc_10205B4  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+arg_8] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
push [ebp+dwMessageId]  +
push [ebp+Arguments]  +
push 0  +
call ds:GetModuleHandleW  +
push eax  +
call sub_10204A3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10029B7  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+dwMessageId]  +
push [ebp+Arguments]  +
push [ebp+lpSource]  +
call sub_10204A3  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwMessageId]  +
push [ebp+Arguments]  +
push 0  +
call ds:GetModuleHandleW  +
push eax  +
call sub_1020659  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10206B7  +
push [ebp+arg_4]  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10206C5  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_10206A4  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 8  +
mov eax [esi+4] +
jmp loc_10206C0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10206E5  +
cmp ecx 7FFFFFFFh +
jbe loc_10206EA  +
mov eax 80070057h +
test eax eax +
jl loc_1020727  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1020717  +
cmp eax esi +
ja loc_1020717  +
jz loc_102071C  +
jmp loc_1020722  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebp+UniversalTime] +
movs   +
movs   +
lea eax [ebp+LocalTime] +
push eax  +
movs   +
lea eax [ebp+UniversalTime] +
push eax  +
push 0  +
movs   +
call ds:SystemTimeToTzSpecificLocalTime  +
test eax eax +
jnz loc_10207B0  +
call ds:GetLastError  +
mov esi eax +
test esi esi +
jnz loc_1020767  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020792  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020792  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020792  +
push esi  +
push offset dword_1020830  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 46h  +
push offset aDW7rtmAdminW_3  +
push esi  +
lea ecx [ebp+var_40] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_40] +
push eax  +
call _CxxThrowException  +
movzx eax [ebp+LocalTime.wMilliseconds] +
push eax  +
movzx eax [ebp+LocalTime.wSecond] +
push eax  +
movzx eax [ebp+LocalTime.wMinute] +
push eax  +
movzx eax [ebp+LocalTime.wHour] +
push eax  +
movzx eax [ebp+LocalTime.wDay] +
push eax  +
movzx eax [ebp+LocalTime.wMonth] +
push eax  +
movzx eax [ebp+LocalTime.wYear] +
push eax  +
push offset a4_4hd2_2hd2_2h  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10206CF  +
add esp 28h +
pop edi  +
pop esi  +
test eax eax +
jge loc_1020826  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020818  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020818  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020818  +
push 0Dh  +
push offset dword_1020830  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 58h  +
push offset aDW7rtmAdminW_3  +
push 0Dh  +
jmp loc_102079A  +
mov eax [ebp+arg_4] +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
mov eax dword_1029008 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileTime] +
push esi  +
mov esi [ebp+arg_4] +
lea ecx [ebp+SystemTime] +
push ecx  +
push eax  +
call ds:FileTimeToSystemTime  +
push 20h  +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+SystemTime] +
push eax  +
call sub_102072E  +
lea eax [ebp+var_44] +
push eax  +
mov ecx esi +
call sub_1001DE7  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1004E68  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_1029008 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpSubKey] +
push ebx  +
mov ebx [ebp+hKey] +
push esi  +
lea ecx [ebp+phkResult] +
push ecx  +
push 2001Fh  +
push 0  +
push eax  +
push ebx  +
mov [ebp+var_214] eax +
call ds:RegOpenKeyExW  +
mov esi eax +
test esi esi +
jnz loc_10209B0  +
push 104h  +
lea eax [ebp+SubKey] +
push eax  +
push 0  +
push [ebp+phkResult]  +
call ds:RegEnumKeyW  +
mov esi eax +
test esi esi +
jnz loc_10209A0  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+phkResult]  +
call sub_1020929  +
mov esi eax +
test esi esi +
jz loc_1020968  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
test esi esi +
jz loc_10209B8  +
cmp esi 103h +
jnz loc_10209CB  +
push 0  +
push 0  +
push [ebp+var_214]  +
push ebx  +
call ds:RegDeleteKeyExW  +
mov esi eax +
mov ecx [ebp+var_4] +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004E68  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10209F7  +
mov ecx [ebp+arg_4] +
mov cx [ecx] +
mov [eax] cx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push edi  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+lpData] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov edi eax +
cmp edi 2 +
jnz loc_1020A37  +
xor al al +
jmp loc_1020AC3  +
test edi edi +
jz loc_1020A84  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020A66  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020A66  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020A66  +
push edi  +
push offset dword_10088B4  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 1Bh  +
push offset aDW7rtmAdminW_4  +
push edi  +
lea ecx [ebp+var_24] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_24] +
push eax  +
call _CxxThrowException  +
cmp [ebp+lpData] 4 +
jz loc_1020AC1  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020AB6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020AB6  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020AB6  +
push 0Dh  +
push offset dword_10088B4  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 1Eh  +
push offset aDW7rtmAdminW_4  +
push 0Dh  +
jmp loc_1020A6E  +
mov al 1 +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+lpData] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 8 +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov esi eax +
cmp esi 2 +
jnz loc_1020B04  +
xor al al +
jmp loc_1020B90  +
test esi esi +
jz loc_1020B51  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020B33  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020B33  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020B33  +
push esi  +
push offset dword_10088B4  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 36h  +
push offset aDW7rtmAdminW_4  +
push esi  +
lea ecx [ebp+var_24] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_24] +
push eax  +
call _CxxThrowException  +
cmp [ebp+lpData] 0Bh +
jz loc_1020B8E  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020B83  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020B83  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020B83  +
push 0Dh  +
push offset dword_10088B4  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 39h  +
push offset aDW7rtmAdminW_4  +
push 0Dh  +
jmp loc_1020B3B  +
mov al 1 +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
mov esi eax +
test esi esi +
jz loc_1020C0B  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020BEA  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020BEA  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020BEA  +
push esi  +
push offset dword_10088B4  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0B2h  +
push offset aDW7rtmAdminW_4  +
push esi  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push 8  +
lea eax [ebp+Data] +
push eax  +
push 0Bh  +
push 0  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
mov esi eax +
test esi esi +
jz loc_1020C86  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020C65  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020C65  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020C65  +
push esi  +
push offset dword_10088B4  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0C3h  +
push offset aDW7rtmAdminW_4  +
push esi  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push [ebp+cbData]  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
mov esi eax +
test esi esi +
jz loc_1020D02  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020CE1  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020CE1  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020CE1  +
push esi  +
push offset dword_10088B4  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 112h  +
push offset aDW7rtmAdminW_4  +
push esi  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
lea edi [ecx+20h] +
push edi  +
add ecx 1Ch +
push ecx  +
push esi  +
push esi  +
push esi  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
mov ebx eax +
cmp ebx esi +
jz loc_1020D85  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020D64  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020D64  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020D64  +
push ebx  +
push offset dword_10088B4  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 15Ah  +
push offset aDW7rtmAdminW_4  +
push ebx  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
inc dword ptr [edi]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1020E02  +
push edi  +
push eax  +
call ds:RegCloseKey  +
mov edi eax +
test edi edi +
jz loc_1020DFE  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020DDD  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020DDD  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020DDD  +
push edi  +
push offset dword_10088B4  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 193h  +
push offset aDW7rtmAdminW_4  +
push edi  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
and dword ptr [esi] 0 +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov esi ecx +
call sub_1020D93  +
and dword ptr [esi+4] 0 +
push esi  +
push 20019h  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
mov edi eax +
test edi edi +
jz loc_1020E85  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020E64  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020E64  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020E64  +
push edi  +
push offset dword_10088B4  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 1C4h  +
push offset aDW7rtmAdminW_4  +
push edi  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
push dword ptr [esi]  +
mov ecx esi +
call sub_1020D0C  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_1020F17  +
mov eax [esi+18h] +
test eax eax +
jz loc_1020F17  +
push ebx  +
push 0  +
push 0  +
push eax  +
push ecx  +
call ds:RegDeleteKeyExW  +
mov ebx eax +
test ebx ebx +
jz loc_1020F0B  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020EEA  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020EEA  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020EEA  +
push ebx  +
push offset dword_10088B4  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 207h  +
push offset aDW7rtmAdminW_4  +
push ebx  +
lea ecx [ebp-20h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-20h] +
push eax  +
call _CxxThrowException  +
and dword ptr [esi+18h] 0 +
dec dword ptr [esi+4]  +
mov al 1 +
pop ebx  +
jmp loc_1020F19  +
xor al al +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_1020F9F  +
mov eax [esi+18h] +
test eax eax +
jz loc_1020F9F  +
push edi  +
push eax  +
push ecx  +
call sub_1020929  +
mov edi eax +
test edi edi +
jz loc_1020F93  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020F72  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020F72  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020F72  +
push edi  +
push offset dword_10088B4  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 21Ch  +
push offset aDW7rtmAdminW_4  +
push edi  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
and dword ptr [esi+18h] 0 +
dec dword ptr [esi+4]  +
mov al 1 +
pop edi  +
jmp loc_1020FA1  +
xor al al +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+phkResult]  +
push 0  +
push dword ptr [ecx+18h]  +
push dword ptr [ecx]  +
call ds:RegOpenKeyExW  +
mov esi eax +
test esi esi +
jz loc_102101C  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1020FFB  +
test byte ptr [eax+1Ch] 1 +
jz loc_1020FFB  +
cmp byte ptr [eax+19h] 2 +
jb loc_1020FFB  +
push esi  +
push offset dword_10088B4  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 231h  +
push offset aDW7rtmAdminW_4  +
push esi  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
mov eax [ebp+phkResult] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 8 +
jb loc_1021039  +
mov eax [ecx+4] +
jmp loc_102103C  +
lea eax [ecx+4] +
mov ecx [ebp+arg_0] +
lea eax [eax+ecx*2] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov ecx [eax+14h] +
sub esp 20h +
cmp dword ptr [eax+18h] 8 +
jb loc_1021064  +
mov eax [eax+4] +
jmp loc_1021067  +
add eax 4 +
push esi  +
lea ecx [ecx+ecx+2] +
push ecx  +
push eax  +
push 1  +
push 0  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
mov esi eax +
test esi esi +
jz loc_10210D0  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10210AF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10210AF  +
cmp byte ptr [eax+19h] 2 +
jb loc_10210AF  +
push esi  +
push offset dword_10088B4  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0D4h  +
push offset aDW7rtmAdminW_4  +
push esi  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov ecx [eax+14h] +
sub esp 20h +
cmp dword ptr [eax+18h] 8 +
jb loc_10210F3  +
mov eax [eax+4] +
jmp loc_10210F6  +
add eax 4 +
push esi  +
lea ecx [ecx+ecx+2] +
push ecx  +
push eax  +
push 2  +
push 0  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
mov esi eax +
test esi esi +
jz loc_102115F  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_102113E  +
test byte ptr [eax+1Ch] 1 +
jz loc_102113E  +
cmp byte ptr [eax+19h] 2 +
jb loc_102113E  +
push esi  +
push offset dword_10088B4  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0E5h  +
push offset aDW7rtmAdminW_4  +
push esi  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
jmp loc_1021183  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
call sub_10209E2  +
add [ebp+arg_8] 2 +
add [ebp+arg_0] 2 +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnz loc_1021170  +
mov eax [ebp+arg_8] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1021169  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10211D7  +
push eax  +
call ds:RegCloseKey  +
lea ecx [esi+8] +
pop esi  +
jmp sub_10043CC  +
***
call sub_10053E2  +
pop ecx  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push edi  +
push dword ptr [esi+20h]  +
lea ecx [esi+8] +
call sub_10211E5  +
mov eax [esi+20h] +
mov edi [esi+0Ch] +
push 0  +
push 0  +
push 0  +
push 0  +
mov [ebp+cbName] eax +
lea eax [ebp+cbName] +
push eax  +
push edi  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:RegEnumKeyExW  +
mov ecx 103h +
cmp eax ecx +
jnz loc_10212C8  +
mov eax ecx +
jmp loc_10212D2  +
test eax eax +
jnz loc_10212D2  +
inc dword ptr [esi+4]  +
mov [esi+18h] edi +
pop edi  +
pop esi  +
leave   +
retn   +
***
call sub_1003100  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
mov edi [ebp+10h] +
mov ecx edi +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
call sub_1002028  +
test eax eax +
jbe loc_1021352  +
mov [ebp+10h] ebx +
xor esi esi +
mov eax [edi+4] +
add eax esi +
cmp dword ptr [eax+14h] 0 +
jbe loc_1021332  +
push ebx  +
mov ecx eax +
call sub_1021029  +
push eax  +
lea ecx [ebp-20h] +
call sub_100B1CC  +
mov eax [edi+4] +
inc ebx  +
add eax esi +
cmp ebx [eax+14h] +
jb loc_1021316  +
lea eax [ebp+10h] +
push eax  +
lea ecx [ebp-20h] +
call sub_100B1CC  +
inc dword ptr [ebp-10h]  +
mov ecx edi +
add esi 1Ch +
call sub_1002028  +
xor ebx ebx +
cmp [ebp-10h] eax +
jb loc_102130B  +
lea eax [ebp+10h] +
push eax  +
lea ecx [ebp-20h] +
mov [ebp+10h] ebx +
call sub_100B1CC  +
cmp [ebp-1Ch] ebx +
jnz loc_102136A  +
xor eax eax +
jmp loc_1021372  +
mov eax [ebp-18h] +
sub eax [ebp-1Ch] +
sar eax 1 +
push 7  +
add eax eax +
push eax  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1020C90  +
lea ecx [ebp-20h] +
call sub_10043CC  +
call sub_1002052  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
push 0  +
lea ecx [esi+8] +
call sub_1009B4C  +
and dword ptr [esi+18h] 0 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
and dword ptr [esi+4] 0 +
lea ecx [esi+8] +
push 0  +
mov [esi] edi +
call sub_1009B4C  +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+18h] 0 +
push edi  +
mov ecx esi +
call sub_1020D0C  +
mov eax esi +
call sub_1002052  +
retn 4  +
***
call sub_1003100  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+4] 0 +
lea ecx [esi+8] +
push 0  +
call sub_1009B4C  +
and dword ptr [ebp-4] 0 +
push esi  +
push 20019h  +
push 0  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:RegOpenKeyExW  +
mov ebx eax +
test ebx ebx +
jz loc_1021489  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1021468  +
test byte ptr [eax+1Ch] 1 +
jz loc_1021468  +
cmp byte ptr [eax+19h] 2 +
jb loc_1021468  +
push ebx  +
push offset dword_10088B4  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 17Eh  +
push offset aDW7rtmAdminW_4  +
push ebx  +
lea ecx [ebp-3Ch] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-3Ch] +
push eax  +
call _CxxThrowException  +
push dword ptr [esi]  +
lea eax [ebp-1Ch] +
push ds:RegCloseKey  +
push eax  +
call sub_1004AE6  +
push dword ptr [esi]  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_1020D0C  +
lea eax [ebp-1Ch] +
push eax  +
mov byte ptr [ebp-1Ch] 1 +
call sub_1003FFD  +
mov eax esi +
call sub_1002052  +
retn 8  +
***
and dword ptr [ecx+4] 0 +
jmp sub_1021285  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_1029008 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+lpType] +
mov eax [ebp+lpValueName] +
push ebx  +
mov ebx [ebp+hKey] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi ds:RegQueryValueExW +
lea edx [ebp+cbData] +
push edx  +
lea edx [ebp+Data] +
push edx  +
push ecx  +
push 0  +
push eax  +
push ebx  +
mov [ebp+var_214] eax +
mov [ebp+var_218] ecx +
mov [ebp+cbData] 208h +
call edi  +
mov ecx eax +
mov [ebp+var_21C] ecx +
cmp ecx 2 +
jz loc_1021645  +
test ecx ecx +
jnz loc_1021566  +
push eax  +
push [ebp+cbData]  +
mov ecx esi +
call sub_10024A5  +
push [ebp+cbData]  +
lea eax [ebp+Data] +
push eax  +
push dword ptr [esi+4]  +
call memcpy  +
add esp 0Ch +
jmp loc_1021604  +
cmp ecx 0EAh +
jnz loc_1021608  +
push 0  +
push [ebp+cbData]  +
mov ecx esi +
call sub_10024A5  +
mov eax [esi+4] +
lea ecx [ebp+cbData] +
push ecx  +
push eax  +
push [ebp+var_218]  +
push 0  +
push [ebp+var_214]  +
push ebx  +
call edi  +
mov edi eax +
test edi edi +
jz loc_10215F5  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10215CE  +
test byte ptr [eax+1Ch] 1 +
jz loc_10215CE  +
cmp byte ptr [eax+19h] 2 +
jb loc_10215CE  +
push edi  +
push offset dword_10088B4  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 98h  +
push offset aDW7rtmAdminW_4  +
push edi  +
lea ecx [ebp+var_23C] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_23C] +
push eax  +
call _CxxThrowException  +
push 0  +
push [ebp+cbData]  +
mov ecx esi +
call sub_10024A5  +
mov al 1 +
jmp loc_1021647  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1021633  +
test byte ptr [eax+1Ch] 1 +
jz loc_1021633  +
cmp byte ptr [eax+19h] 2 +
jb loc_1021633  +
push ecx  +
push offset dword_10088B4  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 9Dh  +
push offset aDW7rtmAdminW_4  +
push [ebp+var_21C]  +
jmp loc_10215D9  +
xor al al +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004E68  +
leave   +
retn 10h  +
***
call sub_1003100  +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp+8] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] ebx +
push dword ptr [ebp+8]  +
call sub_10214D1  +
test al al +
jnz loc_102169D  +
lea ecx [ebp-1Ch] +
call sub_10043CC  +
xor al al +
jmp loc_1021727  +
cmp dword ptr [ebp+8] 1 +
jz loc_10216F4  +
cmp dword ptr [ebp+8] 2 +
jz loc_10216F4  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10216D5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10216D5  +
cmp byte ptr [eax+19h] 2 +
jb loc_10216D5  +
push 0Dh  +
push offset dword_10088B4  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 4Ah  +
push offset aDW7rtmAdminW_4  +
push 0Dh  +
lea ecx [ebp-3Ch] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-3Ch] +
push eax  +
call _CxxThrowException  +
lea eax [ebp+0Fh] +
push eax  +
lea ecx [ebp-1Ch] +
mov [ebp+0Fh] bl +
call sub_100541F  +
lea eax [ebp+0Fh] +
push eax  +
lea ecx [ebp-1Ch] +
mov [ebp+0Fh] bl +
call sub_100541F  +
push dword ptr [ebp-18h]  +
mov ecx [ebp+10h] +
call sub_1001DE7  +
lea ecx [ebp-1Ch] +
call sub_10043CC  +
mov al 1 +
call sub_1002052  +
retn 0Ch  +
***
call sub_10021E6  +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov edi [ebp+10h] +
xor ebx ebx +
mov [ebp-40h] ebx +
mov [ebp-3Ch] ebx +
mov [ebp-38h] ebx +
lea edx [ebp-44h] +
push edx  +
lea edx [ebp-48h] +
push edx  +
push ecx  +
push eax  +
mov [ebp-4] ebx +
call sub_10214D1  +
test al al +
jnz loc_1021779  +
lea ecx [ebp-44h] +
call sub_10043CC  +
xor al al +
jmp loc_1021849  +
cmp dword ptr [ebp-48h] 7 +
jz loc_10217CA  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10217AB  +
test byte ptr [eax+1Ch] 1 +
jz loc_10217AB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10217AB  +
push 0Dh  +
push offset dword_10088B4  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 62h  +
push offset aDW7rtmAdminW_4  +
push 0Dh  +
lea ecx [ebp-30h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-30h] +
push eax  +
call _CxxThrowException  +
lea eax [ebp-31h] +
push eax  +
lea ecx [ebp-44h] +
mov [ebp-31h] bl +
call sub_100541F  +
lea eax [ebp-31h] +
push eax  +
lea ecx [ebp-44h] +
mov [ebp-31h] bl +
call sub_100541F  +
lea eax [ebp-31h] +
push eax  +
lea ecx [ebp-44h] +
mov [ebp-31h] bl +
call sub_100541F  +
lea eax [ebp-31h] +
push eax  +
lea ecx [ebp-44h] +
mov [ebp-31h] bl +
call sub_100541F  +
mov esi [ebp-40h] +
jmp loc_1021838  +
push esi  +
lea ecx [ebp-2Ch] +
call sub_100159C  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_1003406  +
mov eax [ebp-18h] +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
lea esi [esi+eax*2+2] +
mov [ebp-4] bl +
call sub_1001B47  +
xor eax eax +
cmp ax [esi] +
jnz loc_102180B  +
lea ecx [ebp-44h] +
call sub_10043CC  +
mov al 1 +
call sub_1002043  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_1029008 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
lea eax [ebp+var_6C] +
push eax  +
call sub_10226F4  +
push [ebp+arg_4]  +
lea eax [ebp+var_6C] +
push esi  +
push eax  +
call sub_102272E  +
lea eax [ebp+var_6C] +
push eax  +
call sub_1022847  +
mov ecx [ebp+var_4] +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1004E68  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+4] 0 +
jz loc_10218CD  +
cmp [ebp+arg_0] 10000000h +
ja loc_10218CD  +
mov eax [ecx] +
sub eax [ecx+8] +
cmp [ebp+arg_0] eax +
ja loc_10218CD  +
mov al 1 +
jmp loc_10218CF  +
xor al al +
pop ebp  +
retn 4  +
***
cmp byte ptr [ecx+10h] 0 +
mov dword ptr [ecx] offset off_1008900 +
jz locret_10218ED  +
push dword ptr [ecx+8]  +
call sub_1008C51  +
pop ecx  +
retn   +
***
mov eax [ecx+4] +
retn   +
***
mov eax [ecx+0Ch] +
add eax [ecx+8] +
retn   +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_0] +
push edi  +
cmp ecx eax +
jbe loc_1021A48  +
cmp ecx 10000000h +
jbe loc_10219CF  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10219B0  +
test byte ptr [eax+1Ch] 1 +
jz loc_10219B0  +
cmp byte ptr [eax+19h] 2 +
jb loc_10219B0  +
push 0Dh  +
push offset dword_10088F0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 71h  +
push offset aDW7rtmAdminW_5  +
push 0Dh  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
lea ebx [eax+eax] +
cmp ebx ecx +
ja loc_10219DC  +
lea ebx [ecx+100h] +
push ebx  +
call sub_1008D2A  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_1021A20  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1021A15  +
test byte ptr [eax+1Ch] 1 +
jz loc_1021A15  +
cmp byte ptr [eax+19h] 2 +
jb loc_1021A15  +
push 0Eh  +
push offset dword_10088F0  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 79h  +
push offset aDW7rtmAdminW_5  +
push 0Eh  +
jmp loc_10219B9  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push edi  +
call memcpy  +
add esp 0Ch +
cmp byte ptr [esi+10h] 0 +
jz loc_1021A3E  +
push dword ptr [esi+8]  +
call sub_1008C51  +
pop ecx  +
mov [esi+4] ebx +
mov [esi+8] edi +
mov byte ptr [esi+10h] 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+4] +
jbe loc_1021AEC  +
push eax  +
call sub_1021961  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_8] +
push esi  +
mov esi ecx +
xor ecx ecx +
mov dword ptr [esi] offset off_1008900 +
mov [esi+4] ecx +
mov [esi+8] ecx +
mov [esi+0Ch] ecx +
mov [esi+10h] al +
cmp al cl +
jnz loc_1021B26  +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
jmp loc_1021B45  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov ecx esi +
call sub_1021AD9  +
push edi  +
push [ebp+arg_0]  +
push dword ptr [esi+8]  +
call memcpy  +
add esp 0Ch +
mov [esi+4] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 4 +
pop ebp  +
jmp loc_1021A9C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
push edi  +
mov edi [ebp+0Ch] +
lea ecx [edi+eax] +
cmp ecx eax +
jnb loc_1021BC8  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1021BA9  +
test byte ptr [eax+1Ch] 1 +
jz loc_1021BA9  +
cmp byte ptr [eax+19h] 2 +
jb loc_1021BA9  +
push 0Dh  +
push offset dword_10088F0  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 56h  +
push offset aDW7rtmAdminW_5  +
push 0Dh  +
lea ecx [ebp-20h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-20h] +
push eax  +
call _CxxThrowException  +
push ecx  +
mov ecx esi +
call sub_1021AD9  +
mov eax [esi+8] +
add eax [esi+0Ch] +
push edi  +
push dword ptr [ebp+8]  +
push eax  +
call memcpy  +
add esp 0Ch +
add [esi+0Ch] edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call sub_1021AD9  +
push dword ptr [ebp+8]  +
lea ecx [esi+4] +
call sub_1021A54  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
push edi  +
mov edi [ebp+8] +
lea ecx [edi+eax] +
cmp ecx eax +
jnb loc_1021C7A  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1021C5B  +
test byte ptr [eax+1Ch] 1 +
jz loc_1021C5B  +
cmp byte ptr [eax+19h] 2 +
jb loc_1021C5B  +
push 0Dh  +
push offset dword_10088F0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 66h  +
push offset aDW7rtmAdminW_5  +
push 0Dh  +
lea ecx [ebp-20h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-20h] +
push eax  +
call _CxxThrowException  +
add eax edi +
push eax  +
mov ecx esi +
call sub_1021AD9  +
push edi  +
lea ecx [esi+4] +
call sub_1021A72  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 20h +
test ecx ecx +
jz loc_1021DC6  +
movzx eax word ptr [ecx] +
test ax ax +
jz loc_1021DC6  +
xor edx edx +
cmp ax 1Fh +
jbe loc_1021D8B  +
cmp ax 3Eh +
jz loc_1021D8B  +
cmp ax 3Ch +
jz loc_1021D8B  +
cmp ax 26h +
jz loc_1021D8B  +
cmp ax 7Ch +
jz loc_1021D8B  +
cmp ax 5Ch +
jz loc_1021D8B  +
cmp ax 22h +
jz loc_1021D8B  +
cmp ax 3Ah +
jz loc_1021D8B  +
cmp ax 27h +
jz loc_1021D8B  +
cmp ax 2Ah +
jz loc_1021D8B  +
cmp ax 3Fh +
jz loc_1021D8B  +
inc ecx  +
inc ecx  +
inc edx  +
inc edx  +
mov eax edx +
sar eax 1 +
cmp eax 0FFh +
ja loc_1021D36  +
movzx eax word ptr [ecx] +
test ax ax +
jnz loc_1021CB9  +
leave   +
retn 8  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_1021D42  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1021D6D  +
test byte ptr [eax+1Ch] 1 +
jz loc_1021D6D  +
cmp byte ptr [eax+19h] 2 +
jb loc_1021D6D  +
push esi  +
push offset dword_1021E04  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 1Ch  +
push offset aDW7rtmAdminW_6  +
push esi  +
lea ecx [ebp+var_20] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_1021D97  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1021DC2  +
test byte ptr [eax+1Ch] 1 +
jz loc_1021DC2  +
cmp byte ptr [eax+19h] 2 +
jb loc_1021DC2  +
push esi  +
push offset dword_1021E04  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 16h  +
jmp loc_1021D6F  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_1021DD2  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1021DFD  +
test byte ptr [eax+1Ch] 1 +
jz loc_1021DFD  +
cmp byte ptr [eax+19h] 2 +
jb loc_1021DFD  +
push esi  +
push offset dword_1021E04  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0Bh  +
jmp loc_1021D6F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 3A98h  +
push [ebp+arg_0]  +
call sub_1021C98  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 3A9Ch  +
push [ebp+arg_0]  +
call sub_1021C98  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push edi  +
mov edi dword ptr [ebp+pControl] +
push edi  +
call ds:IsValidSecurityDescriptor  +
test eax eax +
jnz loc_1021EDD  +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1021EBE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1021EBE  +
cmp byte ptr [eax+19h] 2 +
jb loc_1021EBE  +
push 0Dh  +
push offset dword_100894C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0Dh  +
push offset aDW7rtmAdminW_7  +
push 0Dh  +
lea ecx [ebp+var_24] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp+var_24] +
push eax  +
call _CxxThrowException  +
push esi  +
lea eax [ebp+dwRevision] +
push eax  +
lea eax [ebp+pControl] +
push eax  +
push edi  +
call ds:GetSecurityDescriptorControl  +
test eax eax +
jnz loc_1021F37  +
call ds:GetLastError  +
mov esi eax +
test esi esi +
jnz loc_1021F02  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1021F2D  +
test byte ptr [eax+1Ch] 1 +
jz loc_1021F2D  +
cmp byte ptr [eax+19h] 2 +
jb loc_1021F2D  +
push esi  +
push offset dword_100894C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 15h  +
push offset aDW7rtmAdminW_7  +
push esi  +
jmp loc_1021EC7  +
push edi  +
call ds:GetSecurityDescriptorLength  +
mov esi [ebp+arg_4] +
push 0  +
push eax  +
mov ecx esi +
call sub_10024A5  +
mov ecx [esi+4] +
test ecx ecx +
jnz loc_1021F56  +
xor eax eax +
jmp loc_1021F5B  +
mov eax [esi+8] +
sub eax ecx +
push eax  +
push edi  +
push ecx  +
call memcpy  +
mov eax [esi+4] +
add esp 0Ch +
pop esi  +
pop edi  +
leave   +
retn 8  +
***
call sub_1003100  +
xor ebx ebx +
mov [ebp-98h] ebx +
mov [ebp-94h] ebx +
mov [ebp-90h] ebx +
lea eax [ebp-9Ch] +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-4] ebx +
call sub_1021E7B  +
mov esi ds:GetSecurityDescriptorDacl +
lea ecx [ebp-6Ch] +
push ecx  +
lea ecx [ebp-10h] +
push ecx  +
lea ecx [ebp-70h] +
push ecx  +
push eax  +
mov [ebp+8] ebx +
mov [ebp-10h] ebx +
call esi  +
test eax eax +
jnz loc_1022022  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_1021FD9  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1022004  +
test byte ptr [eax+1Ch] 1 +
jz loc_1022004  +
cmp byte ptr [eax+19h] 2 +
jb loc_1022004  +
push esi  +
push offset dword_100894C  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 40h  +
push offset aDW7rtmAdminW_7  +
push esi  +
lea ecx [ebp-68h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-68h] +
push eax  +
call _CxxThrowException  +
cmp [ebp+14h] ebx +
jz loc_102207C  +
lea eax [ebp-6Ch] +
push eax  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-70h] +
push eax  +
push dword ptr [ebp+14h]  +
call esi  +
test eax eax +
jnz loc_102207C  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_102204D  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1022078  +
test byte ptr [eax+1Ch] 1 +
jz loc_1022078  +
cmp byte ptr [eax+19h] 2 +
jb loc_1022078  +
push esi  +
push offset dword_100894C  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 4Ah  +
jmp loc_1022006  +
mov esi ds:GetAclInformation +
xor eax eax +
lea edi [ebp-8Ch] +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [ebp-80h] +
stos   +
stos   +
stos   +
cmp [ebp-10h] ebx +
jz loc_10220EE  +
push 2  +
push 0Ch  +
lea eax [ebp-80h] +
push eax  +
push dword ptr [ebp-10h]  +
call esi  +
test eax eax +
jnz loc_10220EE  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_10220BC  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10220E7  +
test byte ptr [eax+1Ch] 1 +
jz loc_10220E7  +
cmp byte ptr [eax+19h] 2 +
jb loc_10220E7  +
push esi  +
push offset dword_100894C  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 5Bh  +
jmp loc_1022006  +
cmp [ebp+8] ebx +
jz loc_102214A  +
push 2  +
push 0Ch  +
lea eax [ebp-8Ch] +
push eax  +
push dword ptr [ebp+8]  +
call esi  +
test eax eax +
jnz loc_102214A  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_1022118  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1022143  +
test byte ptr [eax+1Ch] 1 +
jz loc_1022143  +
cmp byte ptr [eax+19h] 2 +
jb loc_1022143  +
push esi  +
push offset dword_100894C  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 66h  +
jmp loc_1022006  +
mov [ebp-54h] ebx +
mov [ebp-50h] ebx +
mov [ebp-4Ch] ebx +
mov eax [ebp-88h] +
mov ecx [ebp-7Ch] +
add ecx eax +
push ebx  +
push ecx  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 1 +
call sub_10024A5  +
mov esi [ebp-50h] +
cmp [ebp-54h] ebx +
jnz loc_1022178  +
xor eax eax +
jmp loc_102217D  +
mov eax esi +
sub eax [ebp-54h] +
push 2  +
push eax  +
push dword ptr [ebp-54h]  +
call ds:InitializeAcl  +
test eax eax +
jnz loc_10221E6  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_102219E  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10221C9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10221C9  +
cmp byte ptr [eax+19h] 2 +
jb loc_10221C9  +
push esi  +
push offset dword_100894C  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 79h  +
push offset aDW7rtmAdminW_7  +
push esi  +
lea ecx [ebp-48h] +
call sub_1008C61  +
push offset dword_10263EC  +
lea eax [ebp-48h] +
jmp loc_102201C  +
mov [ebp-14h] ebx +
cmp [ebp-80h] ebx +
jbe loc_1022281  +
cmp [ebp+1Ch] bl +
jnz loc_1022281  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-10h]  +
call ds:GetAce  +
test eax eax +
jz loc_10222F3  +
mov esi [ebp-28h] +
add esi 4 +
cmp [ebp+0Ch] ebx +
jz loc_1022228  +
push dword ptr [ebp+0Ch]  +
push esi  +
call ds:MapGenericMask  +
mov edx [esi] +
xor eax eax +
mov dword ptr [ebp-20h] 1 +
xor ecx ecx +
mov edi [ebp-20h] +
test edx edi +
jz loc_1022242  +
mov edi [ebp+10h] +
or eax [edi+ecx*4] +
shl dword ptr [ebp-20h] 1 +
inc ecx  +
cmp ecx 20h +
jl loc_1022235  +
cmp eax ebx +
jz loc_102226F  +
mov [esi] eax +
mov eax [ebp-28h] +
movzx ecx word ptr [eax+2] +
push ecx  +
push eax  +
push 0FFFFFFFFh  +
push 2  +
push dword ptr [ebp-54h]  +
call ds:AddAce  +
test eax eax +
jz loc_1022339  +
inc dword ptr [ebp-14h]  +
mov eax [ebp-14h] +
mov esi [ebp-50h] +
cmp eax [ebp-80h] +
jb loc_10221F2  +
cmp [ebp+8] ebx +
jz loc_10223E3  +
cmp dword ptr [ebp-88h] 8 +
jbe loc_10223E3  +
lea eax [ebp+1Ch] +
push eax  +
push ebx  +
push dword ptr [ebp+8]  +
call ds:GetAce  +
test eax eax +
jnz loc_102237F  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_10222BE  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10222E9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10222E9  +
cmp byte ptr [eax+19h] 2 +
jb loc_10222E9  +
push esi  +
push offset dword_100894C  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0B2h  +
jmp loc_10221CB  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_1022304  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_102232F  +
test byte ptr [eax+1Ch] 1 +
jz loc_102232F  +
cmp byte ptr [eax+19h] 2 +
jb loc_102232F  +
push esi  +
push offset dword_100894C  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 83h  +
jmp loc_10221CB  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_102234A  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1022375  +
test byte ptr [eax+1Ch] 1 +
jz loc_1022375  +
cmp byte ptr [eax+19h] 2 +
jb loc_1022375  +
push esi  +
push offset dword_100894C  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0A4h  +
jmp loc_10221CB  +
mov eax [ebp-88h] +
add eax 0FFFFFFF8h +
push eax  +
push dword ptr [ebp+1Ch]  +
push 0FFFFFFFFh  +
push 2  +
push dword ptr [ebp-54h]  +
call ds:AddAce  +
test eax eax +
jnz loc_10223E3  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_10223AE  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10223D9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10223D9  +
cmp byte ptr [eax+19h] 2 +
jb loc_10223D9  +
push esi  +
push offset dword_100894C  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0BAh  +
jmp loc_10221CB  +
mov [ebp-24h] ebx +
mov [ebp-18h] ebx +
cmp [ebp+14h] ebx +
jz loc_10224A8  +
lea eax [ebp-74h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp+14h]  +
call ds:GetSecurityDescriptorOwner  +
test eax eax +
jnz loc_102244D  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_1022418  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_1022443  +
test byte ptr [eax+1Ch] 1 +
jz loc_1022443  +
cmp byte ptr [eax+19h] 2 +
jb loc_1022443  +
push esi  +
push offset dword_100894C  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0CCh  +
jmp loc_10221CB  +
lea eax [ebp-74h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+14h]  +
call ds:GetSecurityDescriptorGroup  +
test eax eax +
jnz loc_10224A8  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_1022473  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_102249E  +
test byte ptr [eax+1Ch] 1 +
jz loc_102249E  +
cmp byte ptr [eax+19h] 2 +
jb loc_102249E  +
push esi  +
push offset dword_100894C  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0D3h  +
jmp loc_10221CB  +
push 1  +
lea eax [ebp-0B0h] +
push eax  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jnz loc_1022501  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_10224CC  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10224F7  +
test byte ptr [eax+1Ch] 1 +
jz loc_10224F7  +
cmp byte ptr [eax+19h] 2 +
jb loc_10224F7  +
push esi  +
push offset dword_100894C  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0DBh  +
jmp loc_10221CB  +
cmp [ebp-54h] ebx +
jz loc_1022568  +
sub esi [ebp-54h] +
jz loc_1022568  +
push ebx  +
push dword ptr [ebp-54h]  +
lea eax [ebp-0B0h] +
push 1  +
push eax  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jnz loc_1022568  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_1022533  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_102255E  +
test byte ptr [eax+1Ch] 1 +
jz loc_102255E  +
cmp byte ptr [eax+19h] 2 +
jb loc_102255E  +
push esi  +
push offset dword_100894C  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0E6h  +
jmp loc_10221CB  +
cmp [ebp-24h] ebx +
jz loc_10225C8  +
push ebx  +
push dword ptr [ebp-24h]  +
lea eax [ebp-0B0h] +
push eax  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jnz loc_10225C8  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_1022593  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_10225BE  +
test byte ptr [eax+1Ch] 1 +
jz loc_10225BE  +
cmp byte ptr [eax+19h] 2 +
jb loc_10225BE  +
push esi  +
push offset dword_100894C  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0F0h  +
jmp loc_10221CB  +
cmp [ebp-18h] ebx +
jz loc_1022628  +
push ebx  +
push dword ptr [ebp-18h]  +
lea eax [ebp-0B0h] +
push eax  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jnz loc_1022628  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_10225F3  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_102261E  +
test byte ptr [eax+1Ch] 1 +
jz loc_102261E  +
cmp byte ptr [eax+19h] 2 +
jb loc_102261E  +
push esi  +
push offset dword_100894C  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 0FAh  +
jmp loc_10221CB  +
mov esi ds:MakeSelfRelativeSD +
lea eax [ebp-1Ch] +
push eax  +
push ebx  +
lea eax [ebp-0B0h] +
push eax  +
mov [ebp-1Ch] ebx +
call esi  +
mov edi [ebp+18h] +
push ebx  +
push dword ptr [ebp-1Ch]  +
mov ecx edi +
call sub_10024A5  +
mov edi [edi+4] +
lea eax [ebp-1Ch] +
push eax  +
push edi  +
lea eax [ebp-0B0h] +
push eax  +
call esi  +
test eax eax +
jnz loc_10226A8  +
call ds:GetLastError  +
mov esi eax +
cmp esi ebx +
jnz loc_1022673  +
mov esi 507h +
mov eax off_1029004 +
cmp eax offset off_1029004 +
jz loc_102269E  +
test byte ptr [eax+1Ch] 1 +
jz loc_102269E  +
cmp byte ptr [eax+19h] 2 +
jb loc_102269E  +
push esi  +
push offset dword_100894C  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008C25  +
push 10Ch  +
jmp loc_10221CB  +
lea ecx [ebp-58h] +
call sub_10043CC  +
lea ecx [ebp-9Ch] +
call sub_10043CC  +
call sub_1002052  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 0 +
mov dword ptr [eax+4] 0 +
mov dword ptr [eax+8] 67452301h +
mov dword ptr [eax+0Ch] 0EFCDAB89h +
mov dword ptr [eax+10h] 98BADCFEh +
mov dword ptr [eax+14h] 10325476h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
mov esi eax +
shr esi 3 +
lea eax [eax+ebx*8] +
and esi 3Fh +
lea ecx ds:0[ebx*8] +
mov [ebp+var_4] esi +
mov [edi] eax +
cmp eax ecx +
jnb loc_102275D  +
inc dword ptr [edi+4]  +
mov edx ebx +
shr edx 1Dh +
add [edi+4] edx +
test esi esi +
jbe loc_10227B6  +
lea eax [esi+ebx] +
mov [ebp+arg_8] eax +
cmp eax 40h +
jb loc_10227B6  +
mov ebx [ebp+arg_4] +
mov eax 40h +
sub eax esi +
push eax  +
lea ecx [esi+edi+18h] +
push ebx  +
push ecx  +
call memcpy  +
mov edx 40h +
sub edx esi +
add ebx edx +
add esp 0Ch +
lea eax [edi+18h] +
mov [ebp+arg_4] ebx +
mov ebx [ebp+arg_8] +
push eax  +
lea ecx [edi+8] +
push ecx  +
add ebx 0FFFFFFC0h +
call sub_10059A8  +
mov [ebp+var_4] 0 +
mov esi [ebp+var_4] +
test byte ptr [ebp+arg_4] 3 +
jz loc_10227FA  +
cmp ebx 40h +
jb loc_1022823  +
mov eax ebx +
shr eax 6 +
mov [ebp+arg_8] eax +
mov esi [ebp+arg_4] +
lea eax [edi+18h] +
mov edi eax +
push eax  +
mov eax [ebp+arg_0] +
add eax 8 +
mov ecx 10h +
push eax  +
movs   +
call sub_10059A8  +
add [ebp+arg_4] 40h +
mov edi [ebp+arg_0] +
sub ebx 40h +
sub [ebp+arg_8] 1 +
jnz loc_10227C9  +
mov esi [ebp+var_4] +
jmp loc_1022823  +
cmp ebx 40h +
jb loc_1022823  +
mov eax ebx +
shr eax 6 +
mov [ebp+arg_0] eax +
mov edi edi +
mov edx [ebp+arg_4] +
push edx  +
lea eax [edi+8] +
push eax  +
call sub_10059A8  +
add [ebp+arg_4] 40h +
sub ebx 40h +
sub [ebp+arg_0] 1 +
jnz loc_1022809  +
test ebx ebx +
jz loc_1022839  +
mov eax [ebp+arg_4] +
push ebx  +
push eax  +
lea ecx [esi+edi+18h] +
push ecx  +
call memcpy  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
lea ebx [esi+58h] +
mov [ebx] eax +
shr eax 3 +
and eax 3Fh +
push edi  +
mov [esi+5Ch] ecx +
mov edi 38h +
cmp eax 38h +
jb loc_1022877  +
mov edi 78h +
sub edi eax +
push edi  +
lea edx [ebp+var_48] +
push 0  +
push edx  +
call memset  +
add esp 0Ch +
push edi  +
lea eax [ebp+var_48] +
push eax  +
push esi  +
mov byte ptr [ebp+var_48] 80h +
call sub_102272E  +
push 8  +
push ebx  +
push esi  +
call sub_102272E  +
mov ecx [esi+8] +
mov eax [esi+10h] +
mov edx [esi+0Ch] +
mov [ebx] ecx +
mov ecx [esi+14h] +
mov [esi+60h] eax +
pop edi  +
mov [esi+64h] ecx +
mov [esi+5Ch] edx +
lea eax [esi+18h] +
pop esi  +
mov ecx 40h +
pop ebx  +
mov byte ptr [eax] 0 +
inc eax  +
sub ecx 1 +
jnz loc_10228C2  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 0Eh  +
mov esi ecx +
call sub_1011E1D  +
mov dword ptr [esi] offset off_1004614 +
mov eax esi +
pop esi  +
retn   +
***
retn   +
***
cmp dl 0FEh +
jmp dword ptr [edx]  +
***
retn 0FEF3h  +
***
jmp dword ptr [edx]  +
***
jmp loc_1023AFC  +
***
jmp loc_1023B58  +
***
pop edx  +
loop loc_102442D  +
jmp dword ptr [edx]  +
***
retn 0FEE0h  +
***
jmp dword ptr [edx]  +
***
xchg eax esi +
fdiv st(6) st +
jmp dword ptr [edx]  +
***
pop ecx  +
retn   +
***
pop ecx  +
retn   +
***
pop ecx  +
retn   +
***
xchg eax esi +
retf 0FFFEh  +
***
retn   +
***
retf 0FEC4h  +
***
jmp dword ptr [edx]  +
***
retn   +
***
retn   +
***
