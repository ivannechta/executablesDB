mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1001F84  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10F52D8 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
cmp ecx dword_10F52D8 +
jnz loc_10C846F  +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_100256F  +
xor eax eax +
retn   +
mov eax [ecx+8] +
sub eax edx +
sar eax 3 +
retn   +
***
retn   +
***
call ?AfxGetThread@@YGPAVCWinThread@@XZ  +
test eax eax +
jz loc_1057AAD  +
mov edx [eax] +
mov ecx eax +
jmp dword ptr [edx+7Ch]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi 111h +
push edi  +
mov edi [ebp+arg_8] +
mov ebx ecx +
cmp [ebp+arg_0] esi +
jz loc_105ECCF  +
push edi  +
push [ebp+wParam]  +
mov ecx ebx +
push [ebp+arg_0]  +
call ?WindowProc@CWnd@@MAEJIIJ@Z  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi ecx +
cmp ebx 2Bh +
jb loc_1006E8C  +
cmp ebx 2Fh +
jbe loc_100A499  +
cmp ebx 39h +
jz loc_100A499  +
cmp ebx 4Eh +
jz loc_100A499  +
mov esi 111h +
cmp ebx esi +
jz loc_105F31F  +
push [ebp+lParam]  +
mov ecx edi +
push [ebp+wParam]  +
push ebx  +
call ?WindowProc@CWnd@@MAEJIIJ@Z  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
retn   +
***
mov eax ds:?messageMap@CWnd@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
mov eax [ebp+8] +
mov [esi+40h] eax +
pop esi  +
pop ebp  +
retn 8  +
***
retn   +
***
retn   +
***
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
call sub_100A00D  +
test eax 10000000h +
jz loc_1008111  +
push esi  +
mov ecx edi +
call sub_100991D  +
mov esi eax +
test esi esi +
jz loc_10080F5  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0B8h]  +
test eax eax +
jnz loc_10080FE  +
mov ecx edi +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
mov esi eax +
test esi esi +
jz loc_1008110  +
push dword ptr [ebp+8]  +
mov eax [edi] +
push esi  +
mov ecx edi +
call dword ptr [eax+0C8h]  +
pop esi  +
xor eax eax +
pop edi  +
pop ebp  +
retn 8  +
***
retn   +
***
mov eax ds:?messageMap@CToolBarCtrl@@1UAFX_MSGMAP@@B +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 55h +
push esi  +
mov esi ecx +
jz loc_1034860  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+hWnd]  +
push [ebp+arg_0]  +
call ?WindowProc@CWnd@@MAEJIIJ@Z  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
mov eax ds:?messageMap@CView@@1UAFX_MSGMAP@@B +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 417h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
push offset off_10F6C88  +
push 0  +
push dword ptr [ecx+20h]  +
call __RTDynamicCast  +
add esp 14h +
retn   +
***
retn   +
***
mov eax ds:?messageMap@CListView@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
mov eax [ecx+24h] +
test eax eax +
jnz loc_100992D  +
push dword ptr [ecx+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
retn   +
***
retn   +
***
retn   +
***
retn   +
***
mov eax ds:?messageMap@CWinApp@@1UAFX_MSGMAP@@B +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+Msg] +
mov esi ecx +
inc dword ptr [esi+0F8h]  +
push eax  +
call ds:PeekMessageW  +
cmp [ebp+Msg.message] 10h +
jz loc_1057D94  +
mov ecx esi +
call ?PumpMessage@CWinThread@@UAEHXZ  +
mov edi eax +
cmp [esi+0F6h] bl +
jnz loc_1051115  +
dec dword ptr [esi+0F8h]  +
mov eax edi +
pop edi  +
mov [esi+0F7h] bl +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
test eax eax +
jnz loc_1064E28  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor eax eax +
cmp [edi+15Ch] eax +
jnz loc_1009BC7  +
cmp [edi+13Ch] al +
jnz loc_10580AB  +
mov eax [edi+134h] +
mov esi [eax] +
cmp esi eax +
jnz loc_10580C7  +
call sub_10067E8  +
test eax eax +
jz loc_1009BB4  +
mov eax [eax+20h] +
push [ebp+lpMsg]  +
lea ecx [edi+128h] +
push eax  +
call sub_1009B50  +
test al al +
jnz loc_1009BD8  +
push [ebp+lpMsg]  +
mov ecx edi +
call ?PreTranslateMessage@CWinThread@@UAEHPAUtagMSG@@@Z  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
xor eax eax +
inc eax  +
jmp loc_1009BD1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:SendMessageW +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp dword ptr [edi+4] 104h +
mov esi ecx +
jz loc_1060746  +
push edi  +
mov ecx esi +
call sub_1009C40  +
test eax eax +
jnz loc_1060769  +
mov eax [edi+4] +
cmp eax 100h +
jb loc_1009C32  +
cmp eax 109h +
jbe loc_1060771  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call ?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z  +
test eax eax +
jnz loc_105ED37  +
mov eax [edi+4] +
cmp eax 100h +
jb loc_1009C6F  +
cmp eax 109h +
jbe loc_105ED3F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp byte ptr [esi+16Ah] 0 +
jz loc_1009CE7  +
mov ecx [esi+150h] +
add ecx 44h +
jz loc_1009CB2  +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+98h]  +
test eax eax +
jnz loc_1009CEE  +
lea eax [esi+0D8h] +
cmp dword ptr [eax] 0 +
jz loc_1009CD0  +
mov eax [eax] +
push [ebp+arg_0]  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+98h]  +
test eax eax +
jnz loc_1009CEE  +
cmp byte ptr [esi+168h] 0 +
jnz loc_1009CE7  +
push [ebp+arg_0]  +
mov ecx esi +
call ?PreTranslateMessage@CMDIFrameWnd@@UAEHPAUtagMSG@@@Z  +
test eax eax +
jnz loc_1009CEE  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
inc eax  +
jmp loc_1009CE9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp dword ptr [ebp+0Ch] 1 +
push esi  +
mov esi ecx +
jnz loc_1009D1C  +
cmp [ebp+8] esi +
jz loc_105A618  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
leave   +
retn 0Ch  +
***
inc eax  +
retn 8  +
***
call sub_1001F95  +
test byte ptr dword_10F536C 1 +
mov esi offset unk_10F5700 +
jz loc_1037BDE  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov eax [eax] +
push esi  +
push edi  +
mov esi ecx +
cmp eax 6 +
jz loc_100F2F4  +
cmp eax 1Ch +
jz loc_100F2F4  +
cmp eax 1Fh +
jz loc_100F2F4  +
cmp eax 112h +
jz loc_104F38E  +
cmp eax 36Eh +
jz loc_100F2F4  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
push 8  +
mov eax offset dword_10DEC9C +
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
push dword ptr [ebp+14h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1009D38  +
mov ecx eax +
call sub_1009DFB  +
mov ecx [ebp-10h] +
mov edx [ebp-14h] +
mov [ecx+4] edx +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
lea eax [ebp+hWnd] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ebx ecx +
call sub_1009F6E  +
mov esi [ebp+var_8] +
mov eax [esi+1Ch] +
add esi 10h +
mov byte ptr [ebp+var_1] 1 +
cmp dword ptr [esi+8] 0 +
mov [ebp+lpPrevWndFunc] eax +
jz loc_1063BE9  +
mov eax [esi+4] +
push edi  +
mov edi [eax] +
cmp edi eax +
jz loc_1009E77  +
cmp byte ptr [ebp+var_1] 0 +
jz loc_1009E77  +
inc dword ptr [edi+10h]  +
mov ecx esi +
call sub_1009EBE  +
cmp byte ptr [edi+14h] 0 +
jnz loc_1009E6D  +
mov ecx [edi+8] +
mov eax [ecx] +
lea edx [ebp+var_1] +
push edx  +
lea edx [ebp+lParam] +
push edx  +
lea edx [ebp+wParam] +
push edx  +
lea edx [ebp+Msg] +
push edx  +
lea edx [ebp+hWnd] +
push edx  +
call dword ptr [eax+4]  +
mov [ebp+var_8] eax +
dec dword ptr [edi+10h]  +
mov edi [edi] +
cmp edi [esi+4] +
jnz loc_1009E38  +
mov ecx esi +
call sub_1009EBE  +
pop edi  +
mov esi lpDst +
cmp [ebp+Msg] 82h +
jz loc_1053FB4  +
cmp byte ptr [ebp+var_1] 0 +
pop esi  +
pop ebx  +
jz loc_1009EB2  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push [ebp+hWnd]  +
push [ebp+lpPrevWndFunc]  +
call ds:CallWindowProcW  +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
leave   +
retn 10h  +
***
call sub_1001F95  +
mov esi ecx +
mov eax [esi+18h] +
test eax eax +
jnz loc_10636B6  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_1009FAF  +
mov esi [esi+4] +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_1051CC1  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_1051CC1  +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+2Dh] 0 +
jnz loc_1009FD8  +
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp [ecx+0Ch] edx +
jb loc_1063565  +
mov eax ecx +
mov ecx [ecx] +
cmp byte ptr [ecx+2Dh] 0 +
jz loc_1009FC5  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 412h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
push 439h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
call sub_1001F95  +
mov ebx ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov edi [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-10h] 1 +
test edi edi +
jz loc_105FDD6  +
mov ecx ebx +
call sub_1002565  +
mov [edi] eax +
***
mov eax [ebp+arg_0] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
jmp ds:?OnIdle@CDocTemplate@@UAEXXZ  +
***
and eax offset ?GetFirstDocTemplatePosition@CDocManager@@UBEPAU__POSITION@@XZ +
nop   +
nop   +
nop   +
nop   +
nop   +
jmp ds:?GetNextDocTemplate@CDocManager@@UBEPAVCDocTemplate@@AAPAU__POSITION@@@Z  +
***
mov ecx esi +
call sub_100942E  +
cmp eax edi +
jz loc_100A0DB  +
mov ecx eax +
call sub_100A1A3  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
call sub_100A025  +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1057DF9  +
cmp [ebp+8] edi +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
jg loc_102AB71  +
xor eax eax +
cmp [ebp+8] eax +
setnle al  +
mov [ebp-10h] eax +
test eax eax +
jnz loc_100A17B  +
cmp [esi+0FCh] al +
jnz loc_100A17B  +
jmp loc_1057DAF  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea ebx [esi+108h] +
mov [ebp-4] edi +
mov dword ptr [ebp-10h] 1 +
cmp ebx edi +
jz loc_1057DF9  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?OnIdle@CWinApp@@UAEHJ@Z  +
mov [ebp-10h] eax +
cmp eax edi +
jz loc_100A0C9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-10h] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
push esi  +
mov esi ecx +
mov ecx [esi+94h] +
test ecx ecx +
jz loc_100A200  +
cmp dword_10F55CC 3 +
jnz sub_106096D  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+var_40] +
call ??0CCmdUI@@QAE@XZ  +
mov eax [esi] +
xor edi edi +
push edi  +
push edi  +
push 418h  +
mov ecx esi +
mov [ebp+var_40] offset off_100A2B8 +
mov [ebp+var_2C] esi +
call dword ptr [eax+0A8h]  +
mov [ebp+var_20] eax +
mov [ebp+wParam] edi +
cmp eax edi +
jbe loc_100A298  +
xor eax eax +
lea edi [ebp+lParam] +
stos   +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
mov ecx esi +
call sub_100940C  +
test [ebp+var_F] 1 +
mov eax [ebp+var_14] +
mov [ebp+var_3C] eax +
jnz loc_100A28D  +
push 0  +
lea ecx [ebp+var_40] +
push ecx  +
push 0FFFFFFFFh  +
push eax  +
mov ecx esi +
call ?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z  +
test eax eax +
jz loc_105ECFF  +
inc [ebp+wParam]  +
mov eax [ebp+wParam] +
cmp eax [ebp+var_20] +
jb loc_100A251  +
push [ebp+arg_4]  +
mov ecx esi +
push ebx  +
call ?UpdateDialogControls@CWnd@@QAEXPAVCCmdTarget@@H@Z  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 8  +
***
add [eax-6F6F6F70h] dl +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+14h] +
push dword ptr [esi+4]  +
mov ecx edi +
mov dword ptr [esi+18h] 1 +
call sub_1009FEC  +
cmp dword ptr [ebp+8] 0 +
jz loc_105ED2D  +
or eax 4 +
push eax  +
push dword ptr [esi+4]  +
mov ecx edi +
call sub_100A38A  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push eax  +
push [ebp+wParam]  +
push 411h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
neg eax  +
sbb eax eax +
not eax  +
and eax [ebp+arg_8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+arg_0] +
leave   +
retn 0Ch  +
***
mov eax ds:?messageMap@CMDIFrameWnd@@1UAFX_MSGMAP@@B +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_100A479  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+11h] 0 +
mov ebx ecx +
mov esi edi +
jz loc_1015A46  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov ecx [ebp-10h] +
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_10F52D8 +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100A584  +
cmp [ebp+arg_4] eax +
jz loc_100A56B  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_100A56B  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100A54E  +
test esi esi +
jz loc_100A584  +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100A57D  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
jmp loc_100A56F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_100A5C3  +
cmp edx 7FFFFFFFh +
ja loc_100A5C3  +
test eax eax +
jl loc_100A5BF  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100A53A  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_100A5A9  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_10594CF  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_10595CB  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10F52D8 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_100A690  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_105FE8B  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+10h] 0 +
jnz loc_1065A6C  +
mov eax [esi+4] +
push edi  +
mov edi offset unk_10F5BBC +
cmp eax edi +
jz loc_100A71A  +
push eax  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov [esi+4] edi +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+8] 0 +
pop edi  +
pop esi  +
retn   +
***
mov dword ptr [ecx] offset off_100A72C +
jmp sub_100A6F0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
test ebx ebx +
jz loc_100A7FE  +
cmp byte ptr [esi+8] 0 +
jnz loc_100A7B5  +
push ebx  +
call sub_100A80C  +
test al al +
jz loc_100A7FE  +
sub ebx 10h +
mov eax [esi+4] +
push edi  +
mov edi ds:GetProcessHeap +
test eax eax +
jz loc_10653FF  +
push ebx  +
push 0  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_100A7FD  +
push esi  +
call ds:InterlockedDecrement  +
mov ebx eax +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_100A7F6  +
cmp byte ptr [ecx+19h] 5 +
jnb loc_1065406  +
mov [ebp+var_4] 1 +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_100A4F0  +
mov ebx ecx +
mov [ebp-20h] ebx +
mov byte ptr [ebp-19h] 0 +
cmp byte ptr [ebx+8] 0 +
jnz loc_1065209  +
xor edi edi +
mov [ebp-4] edi +
mov esi [ebp+8] +
add esi 0FFFFFFF0h +
cmp dword ptr [esi] 0BB000000h +
jnz loc_1065212  +
cmp dword ptr [esi+0Ch] 0EEh +
jnz loc_106526A  +
mov eax [ebx+4] +
cmp eax edi +
jz loc_106529B  +
cmp eax [esi+4] +
jnz loc_10652A6  +
mov edi [esi+8] +
add edi [ebp+8] +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
jnz loc_10652DA  +
mov byte ptr [ebp-19h] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov al [ebp-19h] +
call sub_100A4DC  +
retn 4  +
***
jmp ?GetClassInfoPtr@Button@DirectUI@@SGPAUIClassInfo@2@XZ  +
***
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [ebp+0Ch] +
sub edi [eax+0Ch] +
mov eax [eax+10h] +
mov ecx offset __ImageBase +
sub edi ecx +
sar edi 2 +
add esi ecx +
mov edx [esi] +
lea eax __ImageBase[eax+edi*4] +
add ebx ecx +
mov ecx [eax] +
mov [ebp+8] edx +
lea eax (__ImageBase+2)[ecx] +
test ecx ecx +
js loc_10121E0  +
mov [ebp-8] eax +
test edx edx +
jz loc_102F76B  +
cmp dword ptr [ebp+8] 0FFFFFFFFh +
jz loc_1064E92  +
cmp dword ptr [ebp+8] 0 +
jz loc_1064EAE  +
push dword ptr [ebp-8]  +
push dword ptr [ebp+8]  +
call GetProcAddress  +
mov esi eax +
test esi esi +
jz loc_1064E9B  +
mov dword ptr [ebp-4] 1 +
test esi esi +
jz loc_1064EAE  +
cmp dword ptr [ebp-4] 0 +
jz loc_100A960  +
mov eax [ebp+0Ch] +
mov [eax] esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_105A6EA  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 14h +
jb loc_105A6F1  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
call sub_100A60E  +
call sub_10067E8  +
xor ecx ecx +
push ecx  +
push offset off_10F6C9C  +
push offset off_10F6C88  +
push ecx  +
push eax  +
mov [ebp-4] ecx +
call __RTDynamicCast  +
add esp 14h +
mov [ebp-14h] eax +
mov eax [ebp-14h] +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
mov ecx offset dword_10F5414 +
call sub_100AC0D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp ebx 1 +
jb loc_100AC9B  +
cmp byte ptr [esi+8] 0 +
jnz loc_100AC3A  +
or eax 0FFFFFFFFh +
sub eax ebx +
cmp eax 20h +
jb loc_106533B  +
add ebx 20h +
mov eax [esi+4] +
push edi  +
mov edi ds:GetProcessHeap +
test eax eax +
jz loc_1065383  +
push ebx  +
push [ebp+dwFlags]  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10653B2  +
push esi  +
call ds:InterlockedIncrement  +
mov ebx eax +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_100AC83  +
cmp byte ptr [ecx+19h] 5 +
jnb loc_106538A  +
cmp byte ptr [esi+8] 0 +
jnz loc_100AC9A  +
push [ebp+arg_0]  +
mov ecx esi +
push [ebp+var_4]  +
call sub_100ACA9  +
add [ebp+var_4] 10h +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov esi offset dword_100ACE4 +
mov edi ebx +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+arg_4] +
mov [ebx+8] esi +
mov eax [ecx+4] +
test eax eax +
jz loc_10651A2  +
lea edi [ebx+esi+10h] +
mov [ebx+4] eax +
mov esi ebx +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_100AD2C  +
cmp [esi] ax +
jnz loc_100AD25  +
test edx edx +
jz loc_100AD2C  +
pop esi  +
test edi edi +
jz nullsub_6  +
test eax eax +
jl loc_105E10B  +
sub ecx edx +
mov [edi] ecx +
retn   +
inc esi  +
inc esi  +
dec edx  +
jz loc_100AD0B  +
jmp loc_100AD06  +
mov eax 80070057h +
jmp loc_100AD0F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
cmp eax offset unk_10F5BBC +
jnz loc_1041D0F  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_100A72C +
mov dword ptr [eax+4] offset unk_10F5BBC +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [ebp+arg_0] +
push edi  +
mov edi 7FFFFFFFh +
xor edx edx +
sub edi eax +
mov [ebp+var_4] edx +
cmp ecx edi +
jnb loc_10659C2  +
lea edi [eax+ecx] +
cmp [esi+10h] edx +
jnz loc_10659FB  +
cmp edi [esi+0Ch] +
jbe loc_100ADF5  +
push ebx  +
push edx  +
lea eax [edi+edi+2] +
mov ebx offset dword_10F5414 +
push eax  +
mov ecx ebx +
call sub_100AC0D  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_1065A33  +
mov ecx [esi+8] +
lea ecx [ecx+ecx+2] +
push ecx  +
push dword ptr [esi+4]  +
push eax  +
call memcpy  +
mov eax [esi+4] +
add esp 0Ch +
cmp eax offset unk_10F5BBC +
jnz loc_1024376  +
mov eax [ebp+arg_0] +
mov [esi+4] eax +
mov [esi+0Ch] edi +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
xor ebx ebx +
cmp edi [esi+4] +
jz loc_10660AE  +
push edi  +
call sub_100AD38  +
test eax eax +
jnz loc_10660DF  +
mov ecx esi +
call sub_100A6F0  +
push edi  +
mov ecx esi +
call sub_100AE5B  +
mov ebx eax +
test ebx ebx +
jl loc_1066107  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
test ebx ebx +
jz loc_1065FC9  +
mov eax ebx +
push esi  +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100AE73  +
sub eax esi +
sar eax 1 +
mov esi eax +
push esi  +
push ebx  +
call sub_100AEA2  +
mov edi eax +
test edi edi +
jl loc_1066000  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov esi ecx +
jz loc_1065DC2  +
push [ebp+arg_0]  +
call sub_100AD38  +
test eax eax +
jnz loc_1065DFA  +
push ebx  +
mov ebx [ebp+arg_4] +
push ebx  +
mov ecx esi +
call sub_100AD76  +
mov edi eax +
test edi edi +
jl loc_1065E25  +
and [ebp+arg_4] 0 +
push 1000h  +
push 0  +
lea eax [ebp+arg_4] +
push eax  +
mov eax [esi+0Ch] +
push ebx  +
push [ebp+arg_0]  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call sub_100AF1E  +
mov edi eax +
test edi edi +
jl loc_1065E4A  +
mov eax [ebp+arg_4] +
sub eax [esi+4] +
sar eax 1 +
mov [esi+8] eax +
pop ebx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
sub esp 10h +
test [ebp+arg_18] 100h +
push esi  +
push edi  +
mov esi 7FFFFFFFh +
jnz loc_1065C90  +
xor eax eax +
test edx edx +
jz loc_103B353  +
cmp edx esi +
ja loc_103B353  +
test eax eax +
jl loc_103B34A  +
mov eax [ebp+arg_0] +
lea edi [ebp+var_8] +
call sub_100ACF9  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100B017  +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_0] +
mov edi [ebp+arg_4] +
push ebx  +
push [ebp+arg_18]  +
lea ebx [ecx+eax*2] +
sub edi eax +
push esi  +
lea ecx [ebp+arg_C] +
lea edx [ebp+arg_8] +
mov [ebp+var_C] ebx +
mov [ebp+var_10] edi +
call sub_100B025  +
xor ecx ecx +
cmp eax ecx +
mov [ebp+var_4] eax +
mov esi 8007007Ah +
jl loc_103B35D  +
test [ebp+arg_18] 0FFFFE000h +
jnz loc_1065CC4  +
cmp edi 1 +
jbe loc_103B33C  +
push [ebp+arg_C]  +
lea eax [ebp+var_10] +
mov [ebp+var_10] ecx +
push eax  +
mov eax [ebp+arg_8] +
mov edx edi +
mov ecx ebx +
call sub_100A53A  +
mov [ebp+var_4] eax +
mov eax [ebp+var_10] +
sub edi eax +
cmp [ebp+var_4] 0 +
lea ebx [ebx+eax*2] +
mov [ebp+var_C] ebx +
mov [ebp+var_10] edi +
jl loc_103B35D  +
mov eax [ebp+arg_18] +
test eax 200h +
jnz loc_1065CD8  +
cmp [ebp+var_4] 0 +
jl loc_103B35D  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_100B00B  +
mov [eax] ebx +
mov eax [ebp+arg_14] +
test eax eax +
jnz loc_1065D23  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp ecx eax +
jz loc_100B03D  +
push esi  +
mov esi [ecx] +
cmp esi [ebp+arg_0] +
pop esi  +
jnb loc_1065989  +
test [ebp+arg_4] 100h +
jnz loc_1065993  +
pop ebp  +
retn 8  +
***
mov edi edi +
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_10F52D8 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
call sub_100B068  +
xor edi edi +
mov [ebp-22Ch] edi +
cmp dword_10F6C64 edi +
jnz loc_100B0E1  +
cmp dword_10F52C8 0FFFFFFFFh +
jz loc_101DA64  +
xor edi edi +
inc edi  +
mov eax edi +
call sub_100B10C  +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1002492  +
jmp sub_100A4DC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp dword_10F6C68 esi +
jnz loc_105D394  +
cmp dword_10F6C64 esi +
jnz loc_100B15F  +
cmp dword_10F6C68 esi +
jnz loc_100B14D  +
call sub_100B0B5  +
test eax eax +
jz loc_100B169  +
push [ebp+arg_0]  +
push dword_10F52C8  +
call sub_100B179  +
test eax eax +
jz loc_100B169  +
xor esi esi +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
call ds:__imp_GetLastError  +
jmp loc_105D3A4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10F5328 +
test eax eax +
jz loc_10409CD  +
pop ebp  +
jmp eax  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_100B698  +
push eax  +
call ds:DestroyAcceleratorTable  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_8] +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push edi  +
xor edi edi +
mov [esi] edx +
mov [esi+44h] eax +
mov [esi+48h] ecx +
cmp eax edi +
jz loc_102F846  +
cmp [eax] di +
jz loc_102F846  +
cmp ecx edi +
jz loc_102F852  +
cmp [ecx] di +
jz loc_102F852  +
push edx  +
call ds:?GetSnapinName@BookKeeping@@SGPBGH@Z  +
cmp eax edi +
jz loc_102F83C  +
cmp [eax] di +
jz loc_102F83C  +
push eax  +
push 20h  +
lea edi [esi+4] +
push edi  +
call sub_100A593  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100B717  +
cmp byte ptr [eax+19h] 5 +
jnb loc_10683F2  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
xor ebx ebx +
cmp eax ebx +
jz loc_10680E1  +
push dword ptr [esi+8]  +
lea ecx [ebp+var_50] +
push offset aEmpty  +
push eax  +
call sub_100B69F  +
cmp [esi+4] ebx +
jnz loc_10680F9  +
cmp [esi+30h] bl +
jnz loc_1068104  +
push ebx  +
lea ecx [ebp+var_50] +
mov [esi+4] ebx +
mov [esi+10h] ebx +
mov [esi+0Ch] ebx +
mov [esi+8] ebx +
mov [esi+2Ch] ebx +
call sub_100B7A1  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jl loc_103F835  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100B7C6  +
cmp byte ptr [eax+19h] 5 +
jnb loc_10683AE  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
push edi  +
mov dword ptr [esi] offset off_100B7EC +
mov edi offset word_100A5FC +
test eax eax +
jz loc_1068343  +
push dword ptr [esi+8]  +
lea ecx [ebp+var_50] +
push offset aDtor  +
push eax  +
call sub_100B69F  +
cmp dword ptr [esi+0Ch] 1 +
jg loc_106834A  +
mov ecx esi +
call sub_100B724  +
push 0  +
lea ecx [ebp+var_50] +
call sub_100B7A1  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+4] eax +
and dword ptr [esi+8] 0 +
cmp ecx [esi+4] +
jnz loc_100B90A  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100B8AF  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop esi  +
retn   +
***
push edi  +
mov edi [ecx] +
push ecx  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx edi +
cmp edi [esi+4] +
jnz loc_100B90B  +
pop edi  +
jmp loc_100B8CA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_100BCB4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_100BCE0  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_101BDE3  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
mov [ebp-4] ecx +
call sub_100ABA9  +
test eax eax +
jz locret_100BD64  +
mov eax [eax+0D8h] +
test eax eax +
jz locret_100BD64  +
push esi  +
mov ecx eax +
call sub_100DFF3  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_100BD63  +
mov ecx [ebp-4] +
push edi  +
call sub_100DFD0  +
mov edi eax +
lea eax [edi-1] +
cmp esi eax +
jz loc_100BD62  +
mov dword ptr [ebp-68h] 64h +
mov dword ptr [ebp-64h] 1 +
inc esi  +
cmp esi edi +
jge loc_100BD62  +
mov ecx [ebp-4] +
lea eax [ebp-68h] +
push eax  +
push esi  +
call sub_100E055  +
test eax eax +
jz loc_100BD3C  +
test byte ptr [ebp-60h] 8 +
jnz loc_100BD3C  +
test byte ptr [ebp-60h] 1 +
jz loc_105ED17  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
mov eax [ebp+10h] +
push 1  +
add eax 0FFFFFFFAh +
push eax  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+44h] +
push 0  +
push 0  +
call ?MoveWindow@CWnd@@QAEXHHHHH@Z  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push eax  +
push 0Eh  +
push eax  +
call ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBG0@Z  +
push eax  +
call ds:LoadIconW  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10025A8 +
and dword ptr [ebp-4] 0 +
call ?DestroyMenu@CMenu@@QAEHXZ  +
mov dword ptr [esi] offset off_100257C +
call sub_1001FCF  +
retn   +
***
mov ch 6Eh +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
test eax eax +
jnz loc_105985F  +
test byte ptr [ebp+pUnknown] 14h +
jnz loc_105986A  +
push esi  +
push offset riid  +
push [ebp+pUnknown]  +
push [ebp+pUnkOuter]  +
push [ebp+rclsid]  +
call ds:CoCreateInstance  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_100BFF4  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call sub_100A4F0  +
mov eax dword_10F53FC +
mov [ebp-1Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10650F4  +
push dword ptr [ebp+8]  +
call ds:_onexit  +
pop ecx  +
call sub_100A4DC  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 64h +
mov eax [ebp+arg_4] +
jz loc_1057C3C  +
add eax 24h +
pop ebp  +
retn 8  +
***
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push 80h  +
mov ecx eax +
call sub_100BEE5  +
retn   +
***
test byte ptr [ebp-40h] 1 +
jz loc_103FCC3  +
movzx ecx word ptr [ebp-3Ch] +
push ecx  +
push eax  +
push ebx  +
push offset __ImageBase  +
call sub_103FF1E  +
mov dword_10F53A0 eax +
cmp dword_10F5394 ebx +
jnz loc_1065072  +
push eax  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov ecx [ebp+var_4] +
mov edx 1 +
mov eax [ecx] +
cmpxchg [ecx] edx +
jnz loc_100C137  +
test eax eax +
jnz loc_1065450  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] ecx +
mov ecx [ebp+var_4] +
mov edx 0 +
mov eax [ecx] +
cmpxchg [ecx] edx +
jnz loc_100C15F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+0D8h] +
sub esp 1Ch +
test ecx ecx +
jz loc_1059C50  +
push ebx  +
lea eax [ebp+var_1C] +
push eax  +
call sub_100C205  +
cmp dword ptr [eax+14h] 0 +
push 0  +
push 1  +
lea ecx [ebp+var_1C] +
setnz bl  +
call sub_100CD3C  +
mov al bl +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
add ecx 0Ch +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_100CF0B  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-18h] 0 +
call sub_100C1C8  +
test al al +
jz loc_1059C54  +
mov eax [esi+0D8h] +
add eax 0Ch +
cmp dword ptr [eax+18h] 8 +
jb loc_100C26C  +
mov eax [eax+4] +
mov ecx [ebp+8] +
push eax  +
call ??0CString@@QAE@PBG@Z  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
add eax 4 +
jmp loc_100C258  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCchildframeOnu  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx esi +
call ?GetStyle@CWnd@@QBEKXZ  +
test eax 8000h +
jz loc_100C370  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0C4h]  +
cmp [ebp+8] ebx +
jz loc_100C35C  +
cmp eax ebx +
jz loc_100C35C  +
push 8000FFFFh  +
push dword ptr [esi+228h]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call edi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_100C370  +
mov ecx [esi+228h] +
push 80070057h  +
call sub_101D1D9  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_100C370  +
mov ecx [esi+228h] +
call sub_101D1D9  +
push eax  +
push dword ptr [esi+20h]  +
call ?AfxSetWindowText@@YGXPAUHWND__@@PBG@Z  +
mov ecx esi +
call ?GetMDIFrame@CMDIChildWnd@@QAEPAVCMDIFrameWnd@@XZ  +
push dword ptr [ebp+8]  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+0E8h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-10h] edi +
mov dword ptr [edi] offset off_100B7D0 +
mov eax [edi+8] +
mov esi [eax] +
and dword ptr [ebp-4] 0 +
cmp esi eax +
jz loc_100C401  +
mov ecx [esi+8] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+4]  +
mov esi [esi] +
cmp esi [edi+8] +
jnz loc_100C3F1  +
lea ecx [edi+4] +
call sub_100B8F1  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+48h] eax +
pop ebp  +
retn 4  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100CAC6  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1064E19  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10F52D8 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_1002492  +
jmp sub_1001FCF  +
***
mov eax ds:?messageMap@CTreeView@@1UAFX_MSGMAP@@B +
retn   +
***
cmp dword ptr [ecx+270h] 0 +
jnz loc_10440C8  +
xor eax eax +
inc eax  +
retn   +
***
mov eax ds:?messageMap@CMDIChildWnd@@1UAFX_MSGMAP@@B +
retn   +
***
mov eax [ecx+178h] +
test eax eax +
jz loc_105A31A  +
cmp dword ptr [eax+58h] 0 +
setnz al  +
retn   +
***
push 110Ah  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
mov [ebp+var_4] eax +
cmp [ebp+arg_4] eax +
jz loc_100C5C7  +
cmp [ebp+arg_8] eax +
jz loc_100C5C7  +
mov ecx [ebp+arg_0] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+arg_0] +
leave   +
retn 10h  +
mov eax [ebp+arg_C] +
jmp loc_100C5B6  +
***
push 110Ah  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
jmp ds:?GetMessageMap@CCmdTarget@@MBEPBUAFX_MSGMAP@@XZ  +
***
retn   +
***
mov eax ds:?messageMap@CDocument@@1UAFX_MSGMAP@@B +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100C777  +
push eax  +
call sub_100C77E  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_105A6C6  +
pop ebp  +
jmp ds:CoTaskMemFree  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 4  +
push 110Ah  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx] +
mov cx [eax] +
cmp cx [edx] +
jnz loc_100C7F7  +
test cx cx +
jz loc_100C7F1  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_100C7F7  +
add eax 4 +
add edx 4 +
test cx cx +
jnz loc_100C7CF  +
xor eax eax +
pop ebp  +
retn 4  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
jmp loc_100C7F3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 3  +
push 110Ah  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
push 8  +
mov eax offset dword_10DEC9C +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+164h] +
call ??4CString@@QAEABV0@PBG@Z  +
lea ecx [esi-0C8h] +
call sub_100C885  +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 362h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 40Ah  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
call sub_100A4F0  +
xor eax eax +
mov [ebp-20h] eax +
mov [ebp-4] eax +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
cmp eax [ebp+10h] +
jge loc_100C934  +
mov esi [ebp+8] +
mov ecx esi +
call dword ptr [ebp+14h]  +
add esi [ebp+0Ch] +
mov [ebp+8] esi +
inc dword ptr [ebp-1Ch]  +
jmp loc_100C8F6  +
mov dword ptr [ebp-20h] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100C954  +
call sub_100A4DC  +
retn 14h  +
***
cmp dword ptr [ebp-20h] 0 +
jz loc_1065158  +
retn   +
***
call sub_100A4F0  +
and dword ptr [ebp-1Ch] 0 +
mov esi [ebp+0Ch] +
mov eax esi +
imul eax [ebp+10h] +
add [ebp+8] eax +
and dword ptr [ebp-4] 0 +
dec dword ptr [ebp+10h]  +
js loc_100C9B4  +
sub [ebp+8] esi +
mov ecx [ebp+8] +
call dword ptr [ebp+14h]  +
jmp loc_100C984  +
mov dword ptr [ebp-1Ch] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100C9D4  +
call sub_100A4DC  +
retn 10h  +
***
cmp dword ptr [ebp-1Ch] 0 +
jz loc_10650DE  +
retn   +
***
call ?Default@CWnd@@IAEJXZ  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp dword ptr [ebp+8] 0E001h +
jnz loc_100CA12  +
mov [ebp+8] eax +
cmp [ebp+0Ch] eax +
jnz loc_100CA12  +
mov edx [ecx+22Ch] +
mov [ebp+0Ch] edx +
cmp [ecx+230h] al +
jnz loc_10518B5  +
pop ebp  +
jmp loc_1022DED  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_10594DE  +
mov eax [ebp+arg_0] +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1057C35  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_100CABC  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jnz loc_100C464  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
push 8  +
mov eax offset dword_10DEC9C +
call sub_1001F95  +
mov esi ecx +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100CB3F  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105ACD3  +
mov ecx [esi+130h] +
call sub_100C573  +
test eax eax +
jz loc_100CB5A  +
mov ecx [esi+130h] +
push eax  +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx [ebp-10h] +
mov edx [ebp-14h] +
mov [ecx+4] edx +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
mov [ebp+var_4] eax +
cmp [ebp+arg_4] eax +
jz loc_100CB99  +
cmp [ebp+arg_8] eax +
jz loc_100CB99  +
cmp [ebp+arg_C] eax +
jz loc_100CB99  +
mov ecx [ebp+arg_0] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+arg_0] +
leave   +
retn 14h  +
mov eax [ebp+arg_10] +
jmp loc_100CB88  +
***
mov edi edi +
push esi  +
mov esi ecx +
xor eax eax +
cmp [esi+1B1h] al +
jnz loc_101D438  +
cmp [esi+1B0h] al +
jnz loc_101D438  +
cmp [esi+1B3h] al +
jz loc_101D438  +
lea ecx [esi+0D0h] +
call sub_1016562  +
mov byte ptr [esi+1B2h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1057D6A  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 2 +
jb loc_1057D71  +
lea eax [ecx+ecx] +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_100CC36  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 7FFFFFFEh +
ja loc_1058133  +
cmp [esi+18h] edi +
jb loc_100CC7F  +
cmp [ebp+arg_4] 0 +
jnz loc_105813D  +
test edi edi +
jz loc_1022C76  +
xor eax eax +
cmp eax edi +
sbb eax eax +
pop edi  +
neg eax  +
pop esi  +
pop ebp  +
retn 8  +
push dword ptr [esi+14h]  +
mov ecx esi +
push edi  +
call sub_100CC91  +
jmp loc_100CC71  +
***
call sub_100A60E  +
mov edi ecx +
mov [ebp-18h] edi +
mov esi [ebp+8] +
or esi 7 +
cmp esi 7FFFFFFEh +
ja loc_1058061  +
xor edx edx +
push 3  +
mov eax esi +
pop ebx  +
div  ebx +
mov ecx [edi+18h] +
mov [ebp-14h] ecx +
shr dword ptr [ebp-14h] 1 +
mov edx [ebp-14h] +
cmp eax edx +
jb loc_102D860  +
and dword ptr [ebp-4] 0 +
push 0  +
lea eax [esi+1] +
push eax  +
call sub_100CBE7  +
mov ebx eax +
cmp dword ptr [ebp+0Ch] 0 +
ja loc_102D87C  +
push 0  +
push 1  +
mov ecx edi +
call sub_100CD3C  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
mov [edi+4] ebx +
mov [edi+18h] esi +
call sub_100CD14  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 8 +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
jnb loc_100CD32  +
add ecx 4 +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
mov ecx [ecx+4] +
jmp loc_100CD28  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_100CD50  +
cmp dword ptr [esi+18h] 8 +
jnb loc_100CD66  +
push [ebp+arg_4]  +
mov ecx esi +
mov dword ptr [esi+18h] 7 +
call sub_100CD14  +
pop esi  +
pop ebp  +
retn 8  +
cmp [ebp+arg_4] 0 +
lea eax [esi+4] +
push edi  +
mov edi [eax] +
ja loc_1058050  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
jmp loc_100CD50  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_100CD14  +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100CE12  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
cmp [edi+14h] eax +
jb loc_105845F  +
mov esi [edi+14h] +
mov eax [ebp+arg_4] +
sub esi eax +
cmp [ebp+arg_8] esi +
jb loc_1058469  +
mov ecx ebx +
cmp ebx edi +
jz loc_1058471  +
push 0  +
push esi  +
call sub_100CC42  +
test al al +
jz loc_100CE85  +
cmp dword ptr [edi+18h] 8 +
jb loc_102332C  +
mov edi [edi+4] +
mov ecx [ebx+18h] +
cmp ecx 8 +
jb loc_1023334  +
mov eax [ebx+4] +
mov edx [ebp+arg_4] +
push esi  +
lea edx [edi+edx*2] +
push edx  +
push ecx  +
push eax  +
call sub_100CE93  +
push esi  +
mov ecx ebx +
call sub_100CD14  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100CEB5  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100CED7  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100CDE2  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
add ecx 0D4h +
call sub_100CF5E  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+0Ch] +
and eax 0FFFDFFFFh +
dec eax  +
jz loc_100D04E  +
dec eax  +
jz loc_100CF8D  +
sub eax 0FFFFh +
jnz loc_105F72A  +
push edx  +
call sub_1023BBD  +
pop ebp  +
retn 4  +
push edx  +
call sub_100CF9A  +
jmp loc_100CF89  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax lpDst +
mov esi offset lpDst +
mov ebx offset loc_100CFE8 +
cmp eax esi +
jz loc_100CFBE  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105F51F  +
dec dword ptr [edi+24h]  +
jnz loc_100CFDD  +
mov eax lpDst +
cmp eax esi +
jz loc_100CFD6  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105F536  +
mov ecx edi +
call sub_100D2F2  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
retn 4  +
***
rcl eax 0E0h +
and esp ebx +
mov bh 72h +
push cs  +
sti   +
popf   +
rcr byte ptr [eax+73h] cl +
adc dh [ebp+46h] +
add cl dh +
retn   +
***
retn   +
***
push edx  +
call sub_100D05E  +
jmp loc_100CF89  +
***
mov edi edi +
push esi  +
mov esi ecx +
inc dword ptr [esi+24h]  +
mov ecx [esi+24h] +
push edi  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100D080  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105F458  +
mov eax [esi] +
push 10h  +
pop edi  +
mov ecx esi +
call dword ptr [eax+4]  +
test al al +
jz loc_100D091  +
push 30h  +
pop edi  +
mov eax edi +
pop edi  +
pop esi  +
retn 4  +
***
call sub_1001F95  +
mov ebx ecx +
push 0  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewOnnoti  +
lea ecx [ebp-2Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-3Ch] +
push esi  +
push eax  +
call sub_100C5A1  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105BE9A  +
mov ecx [ebp+10h] +
mov dword ptr [ecx] 1 +
mov eax [esi+8] +
cmp eax 0FFFFFE34h +
jz loc_105C161  +
cmp eax 0FFFFFE35h +
jz loc_105C115  +
cmp eax 0FFFFFE64h +
jz loc_105C0F0  +
mov edx 0FFFFFEB9h +
cmp eax edx +
jz loc_105C010  +
cmp eax 0FFFFFEBBh +
jz loc_105C010  +
cmp eax 0FFFFFEC9h +
jz loc_105C002  +
lea ecx [edx+14h] +
cmp eax ecx +
jz loc_105C010  +
cmp byte ptr [ebx+0DDh] 0 +
jnz loc_105BEA8  +
mov edi [ebx+178h] +
test edi edi +
jz loc_100D1D2  +
cmp dword ptr [edi+4Ch] 0 +
jz loc_100D1D2  +
cmp dword ptr [edi+1A4h] 0 +
jnz loc_100D1D2  +
mov ecx ebx +
call sub_100C52C  +
test al al +
jz loc_100D1D2  +
mov eax [edi+4Ch] +
test eax eax +
jz loc_105579C  +
mov eax [eax+20h] +
cmp eax [esi] +
jz loc_101CF46  +
mov ecx [edi+4Ch] +
call sub_100E4E1  +
test eax eax +
jz loc_100D1D2  +
mov eax [ebx+178h] +
mov ecx [eax+4Ch] +
call sub_100E4E1  +
mov eax [eax+20h] +
cmp eax [esi] +
jz loc_1055764  +
push dword ptr [ebp+10h]  +
push esi  +
push dword ptr [ebp+8]  +
mov ecx ebx +
call ?OnNotify@CWnd@@MAEHIJPAJ@Z  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100D240  +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
mov [eax] edx +
mov ecx [ecx+4] +
mov [eax+4] ecx +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
mov eax [ebp+0Ch] +
cmp eax [ebp+10h] +
jnz loc_105F4D2  +
mov ecx [ebp+8] +
lea eax [ebp+14h] +
push eax  +
call sub_100CC1D  +
mov eax [ebp+14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_100D286  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea esi [ecx+20h] +
cmp dword ptr [esi] 0 +
jz loc_101D3A4  +
mov eax [esi] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100D2CF  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_100D2E6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
call sub_100D296  +
push ecx  +
mov ecx esp +
mov [ebp+var_8] esp +
push eax  +
call sub_100D2B3  +
mov eax [esi+8] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
call sub_100D249  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100D32A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+4] +
call sub_100A44C  +
lea ecx [esi+10h] +
call sub_100D342  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_100D36F  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+15h] 0 +
mov ebx ecx +
mov esi edi +
jz loc_100D38B  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_100D36F  +
mov esi [esi] +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+15h] 0 +
pop ecx  +
mov edi esi +
jnz loc_100D384  +
jmp loc_100D38B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push 0  +
mov esi ecx +
call ?MDIGetActive@CMDIFrameWnd@@QBEPAVCMDIChildWnd@@PAH@Z  +
test eax eax +
jz loc_1010C06  +
mov ecx dword_10F5304 +
test ecx ecx +
jz loc_1010C06  +
push [ebp+arg_0]  +
call sub_100C227  +
mov eax [ebp+arg_0] +
pop esi  +
leave   +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
lea eax [ebp-10h] +
push eax  +
call sub_100D3AD  +
push dword ptr [eax]  +
and dword ptr [ebp-4] 0 +
push dword ptr [esi+20h]  +
call ?AfxSetWindowText@@YGXPAUHWND__@@PBG@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_100D481  +
mov esi [esi+4] +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_1023DB6  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_1023DB6  +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+15h] 0 +
jnz loc_100D4AA  +
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp [ecx+0Ch] edx +
jb loc_100E94C  +
mov eax ecx +
mov ecx [ecx] +
cmp byte ptr [ecx+15h] 0 +
jz loc_100D497  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
mov [ebp+var_4] eax +
cmp [ebp+arg_4] eax +
jz loc_100D4E3  +
cmp [ebp+arg_8] eax +
jz loc_100D4E3  +
cmp [ebp+arg_C] eax +
jz loc_100D4E3  +
cmp [ebp+arg_10] eax +
jz loc_100D4E3  +
mov ecx [ebp+arg_0] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+arg_0] +
leave   +
retn 18h  +
mov eax [ebp+arg_14] +
jmp loc_100D4D2  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCdirectuiren_3  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-2Ch] +
push dword ptr [ebp+8]  +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-1Ch] +
call esi  +
cmp eax ebx +
jl loc_1069D85  +
push ebx  +
push ebx  +
push dword ptr [ebp+10h]  +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
call ?AccNameProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push 2  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call esi  +
cmp eax ebx +
jl loc_1069DAE  +
cmp [ebp+14h] ebx +
jz loc_100D5C0  +
push ebx  +
push ebx  +
push dword ptr [ebp+14h]  +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
call ?AccDefActionProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push 2  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call esi  +
cmp eax ebx +
jl loc_1069DD4  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+0Ch] +
push eax  +
push ebx  +
push dword ptr [ebp+8]  +
call ?AccRoleProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push 1  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call esi  +
cmp eax ebx +
jl loc_1069DFA  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+13h] +
push eax  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp+13h] 1 +
call ?AccessibleProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push ebx  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call esi  +
cmp eax ebx +
jl loc_1069E20  +
lea ecx [ebp-1Ch] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
push 80070057h  +
push dword ptr [ebp+14h]  +
lea eax [ebp-70h] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_100CB6E  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call edi  +
lea ecx [ebp-70h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_100D798  +
mov eax [ebp+14h] +
movzx eax byte ptr [eax] +
push eax  +
call ?CreateBool@Value@DirectUI@@SGPAV12@_N@Z  +
jmp loc_100D795  +
***
call sub_1001F95  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCdirectuiren_2  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+8] +
sub eax ebx +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
mov [ebp-10h] ebx +
jz loc_100D6B3  +
dec eax  +
jz loc_100D86A  +
dec eax  +
jnz loc_1044DD3  +
push 80070057h  +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-50h] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_100CB6E  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-50h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_100D798  +
push ebx  +
push dword ptr [ebp+1Ch]  +
call ?CreateString@Value@DirectUI@@SGPAV12@PBGPAUHINSTANCE__@@@Z  +
mov [ebp-10h] eax +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jl loc_1069C6B  +
push 8007000Eh  +
push dword ptr [ebp-10h]  +
lea eax [ebp-80h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 6 +
call edi  +
lea ecx [ebp-80h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jl loc_1069C91  +
push dword ptr [ebp-10h]  +
mov ecx [ebp+10h] +
push 1  +
push dword ptr [ebp+0Ch]  +
call ?SetValue@Element@DirectUI@@QAEJPBUPropertyInfo@2@HPAVValue@2@@Z  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jl loc_1069CB7  +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_100D80E  +
call ?Release@Value@DirectUI@@QAEXXZ  +
lea ecx [ebp-20h] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 20h  +
push 80070057h  +
push dword ptr [ebp+18h]  +
lea eax [ebp-60h] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_100CB6E  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-60h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_100D798  +
mov eax [ebp+18h] +
push dword ptr [eax]  +
call ?CreateInt@Value@DirectUI@@SGPAV12@H@Z  +
jmp loc_100D795  +
***
call sub_1001F95  +
mov ebx ecx +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewLayout  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 8000FFFFh  +
push dword ptr [ebx+18Ch]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_100D977  +
mov eax [ebx+1F8h] +
shr eax 6 +
test al 1 +
jz loc_100D940  +
mov ecx [ebx+18Ch] +
cmp byte ptr [ecx+80h] 0 +
jnz loc_105A78A  +
mov esi offset unk_10F5720 +
lea edi [ebp-30h] +
movs   +
movs   +
movs   +
mov byte ptr [ebp-0Dh] 0 +
movs   +
xor eax eax +
cmp [ebp-0Dh] al +
mov ecx [ebp+8] +
setz al  +
push 0  +
dec eax  +
and eax 0FFFFFFC0h +
sub eax 0FFFFFF80h +
or eax 14h +
push eax  +
lea eax [ebp-30h] +
push eax  +
push dword ptr [ebx+18Ch]  +
call sub_100DBE1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
lea edi [ebp+rc] +
movs   +
movs   +
mov ebx ecx +
mov eax [ebx+1F8h] +
movs   +
shr eax 3 +
movs   +
test al 1 +
jnz loc_10455AA  +
mov eax 94h +
mov ecx [ebp+arg_0] +
push 0  +
push eax  +
lea eax [ebp+rc] +
push eax  +
add ebx 0F8h +
push ebx  +
call sub_100DBE1  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100DA50  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105ADA9  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
lea eax [ebp-24h] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_100DAB3  +
push eax  +
push 0Ah  +
lea ecx [ebp-14h] +
call sub_100DF2B  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_100DAE8  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_100DC54  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_100DDB8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call sub_100DABE  +
call sub_1001FCF  +
retn   +
***
cmp dword ptr [ecx] 0 +
jnz loc_100DAC8  +
jmp nullsub_7  +
mov eax [ecx] +
and dword ptr [ecx] 0 +
test eax eax +
jz loc_1064E45  +
push eax  +
call ds:EndDeferWindowPos  +
neg eax  +
sbb eax eax +
neg eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx ecx +
mov cl [ebx+1F8h] +
xor eax eax +
and cl 1 +
push esi  +
mov [ebp+var_1] cl +
mov ecx [ebp+arg_4] +
push edi  +
jz loc_100DB52  +
mov esi [ecx+8] +
mov eax [ebx+194h] +
sub esi [ecx] +
cmp eax 0FFFFFFFFh +
jz loc_1031A7E  +
mov edx [ebx+1F8h] +
mov edi [ebx+1ACh] +
shr edx 7 +
add edi 3 +
test dl 1 +
jz loc_104EF30  +
mov edx [ebx+1BCh] +
add edx 3 +
sub esi edx +
sub esi edi +
cmp eax esi +
jg loc_105A783  +
mov [ebx+194h] eax +
mov esi ecx +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov edx [ebp+var_14] +
add eax edx +
cmp [ebp+var_1] 0 +
mov [ebp+var_C] eax +
jz loc_104EF1C  +
mov edx [ebp+var_10] +
lea esi [ebx+2F0h] +
mov [esi] eax +
mov [ebx+2F4h] edx +
mov edx [ebp+var_8] +
add eax 3 +
mov [ebx+2F8h] eax +
mov [ebx+2FCh] edx +
push 2Dh  +
mov [ecx] eax +
call ds:GetSystemMetrics  +
push 0  +
push eax  +
push esi  +
call ds:InflateRect  +
mov al [ebx+1F8h] +
push 0  +
and al 1 +
push 0  +
pop eax  +
setz al  +
mov ecx ebx +
dec eax  +
and eax 0FFFFFFC0h +
sub eax 0FFFFFF80h +
or eax 14h +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push 0  +
call sub_100DD70  +
mov ecx [ebp+arg_0] +
push eax  +
call sub_100DBE1  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+hWndInsertAfter] +
push edi  +
mov edi ecx +
test ebx ebx +
jnz loc_100DBF5  +
or [ebp+uFlags] 4 +
cmp dword ptr [edi] 0 +
jz loc_1064E49  +
mov eax [ebp+arg_4] +
mov edx [eax+4] +
mov ecx [eax+0Ch] +
push esi  +
mov esi [eax] +
mov eax [eax+8] +
sub ecx edx +
sub eax esi +
test ebx ebx +
jnz loc_100DC47  +
and [ebp+hWndInsertAfter] ebx +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_100DC22  +
mov ebx [ebx+20h] +
push [ebp+uFlags]  +
push ecx  +
push eax  +
push edx  +
push esi  +
push [ebp+hWndInsertAfter]  +
push ebx  +
push dword ptr [edi]  +
call ds:DeferWindowPos  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [edi] eax +
mov al cl +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov ebx [ebx+20h] +
mov [ebp+hWndInsertAfter] ebx +
jmp loc_100DC18  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
mov ebx ecx +
mov eax [ebx+1F8h] +
shr eax 7 +
push esi  +
xor ecx ecx +
push edi  +
test al 1 +
jz loc_104EF37  +
cmp [ebx+33Ch] cl +
jnz loc_104EF37  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetClientRect  +
mov eax [ebp+Rect.right] +
mov ecx [ebx+1B4h] +
sub eax [ebp+Rect.left] +
test ecx ecx +
jl loc_1031A9C  +
cmp ecx eax +
jg loc_1031A9C  +
mov edx [ebp+arg_4] +
mov eax [edx+8] +
sub eax [ebx+1ACh] +
sub eax [edx] +
sub eax 3 +
cmp ecx eax +
jg loc_104E8BD  +
mov [ebx+1B4h] ecx +
mov eax [edx+8] +
mov esi edx +
lea edi [ebp+var_10] +
movs   +
movs   +
sub eax ecx +
mov ecx [ebx+1F8h] +
movs   +
shr ecx 7 +
movs   +
mov [ebp+var_10] eax +
test cl 1 +
jz loc_104EF3F  +
cmp byte ptr [ebx+33Ch] 0 +
jnz loc_104EF3F  +
mov edi [ebp+var_C] +
lea ecx [eax-3] +
mov [ebx+308h] eax +
mov eax [ebp+var_4] +
lea esi [ebx+300h] +
mov [esi] ecx +
mov [ebx+304h] edi +
mov [ebx+30Ch] eax +
push 2Dh  +
mov [edx+8] ecx +
call ds:GetSystemMetrics  +
push 0  +
push eax  +
push esi  +
call ds:InflateRect  +
mov eax [ebx+1F8h] +
shr eax 7 +
push 0  +
and al 1 +
push 0  +
pop eax  +
setz al  +
mov ecx ebx +
dec eax  +
and eax 0FFFFFFC0h +
sub eax 0FFFFFF80h +
or eax 14h +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push 2  +
call sub_100DD70  +
mov ecx [ebp+arg_0] +
push eax  +
call sub_100DBE1  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov eax lpDst +
mov esi offset lpDst +
mov edi offset dword_100C4B0 +
cmp eax esi +
jz loc_100DD97  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105A442  +
mov ecx [ebp+arg_0] +
cmp ecx 3 +
ja loc_105A45A  +
add ecx 19h +
shl ecx 4 +
mov eax [ecx+ebx] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push esi  +
push [ebp+arg_0]  +
mov ebx ecx +
call sub_100D9DD  +
push esi  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_100D8B9  +
push [ebp+arg_4]  +
lea edi [ebx+2E0h] +
push [ebp+arg_0]  +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_100DE1B  +
lea ecx [ebx+2E0h] +
mov eax [ecx+8] +
sub eax [ecx] +
mov [ebx+1A4h] eax +
mov ebx [ebx+1ACh] +
cmp eax ebx +
jl loc_105AC9E  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewLayo_0  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100DE5C  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105A79F  +
push 1  +
mov ecx esi +
call sub_100DD70  +
mov edi eax +
mov eax [esi+184h] +
cmp eax ebx +
jnz loc_105A7B6  +
cmp byte ptr [esi+1DFh] 0 +
jnz loc_100DEA2  +
push dword ptr [ebp+0Ch]  +
call ds:IsRectEmpty  +
mov ecx [ebp+8] +
neg eax  +
sbb eax eax +
and eax 40h +
add eax 40h +
push ebx  +
or eax 14h +
push eax  +
push dword ptr [ebp+0Ch]  +
push edi  +
call sub_100DBE1  +
mov ecx esi +
call sub_100C52C  +
test al al +
jz loc_100DED8  +
mov ecx esi +
call sub_100C558  +
test al al +
jnz loc_105A7E3  +
cmp byte ptr [esi+1DFh] 0 +
push 20h  +
mov ecx edi +
jnz loc_105A872  +
push 200h  +
push ebx  +
call ?ModifyStyleEx@CWnd@@QAEHKKI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_4] +
push esi  +
push [ebp+nNumWindows]  +
mov esi ecx +
and dword ptr [esi] 0 +
mov [esi+4] al +
call sub_100DF50  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+nNumWindows]  +
mov esi ecx +
call ds:BeginDeferWindowPos  +
xor ecx ecx +
test eax eax +
mov [esi] eax +
setnz cl  +
mov al cl +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 0Ch  +
***
push 43Ah  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 40Bh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
push 40Ch  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
push esi  +
mov esi ecx +
mov ecx [esi+48h] +
mov [ebp+lParam] 64h +
mov [ebp+var_60] 10h +
test ecx ecx +
jz loc_105ECF7  +
push ebx  +
push edi  +
call sub_100DFD0  +
mov ebx eax +
xor edi edi +
test ebx ebx +
jle loc_100E048  +
mov ecx [esi+48h] +
lea eax [ebp+lParam] +
push eax  +
push edi  +
call sub_100E055  +
test eax eax +
jz loc_100E043  +
mov eax [ebp+var_44] +
cmp eax [esi+20h] +
jz loc_1015925  +
inc edi  +
cmp edi ebx +
jl loc_100E026  +
or eax 0FFFFFFFFh +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 41Ch  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push esi  +
mov esi ecx +
jle loc_100E0A3  +
push [ebp+arg_4]  +
call sub_1011517  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0C0h] 0 +
jz loc_1031CA2  +
lea eax [esi+0A0h] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+15h] 0 +
jz loc_106448D  +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jz loc_1041DD7  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_100E54D  +
mov [ecx] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
mov [ecx+8] eax +
jmp loc_100E544  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
sub esp 18h +
cmp [ebp+arg_0] eax +
jz locret_100E5B7  +
push edi  +
push 6  +
pop ecx  +
lea edi [ebp+var_18] +
stos   +
lea eax [ebp+var_18] +
push eax  +
push 18h  +
push [ebp+arg_0]  +
call ds:GetObjectW  +
pop edi  +
test eax eax +
jz loc_100E5BB  +
push 2000h  +
push [ebp+var_10]  +
push [ebp+var_14]  +
push 0  +
push [ebp+arg_0]  +
call ds:CopyImage  +
test eax eax +
jz loc_1068410  +
leave   +
retn 4  +
xor eax eax +
jmp locret_100E5B7  +
***
mov eax [ecx] +
test eax eax +
jz locret_100E77E  +
dec dword ptr [eax+10h]  +
mov ecx [ecx] +
cmp dword ptr [ecx+10h] 0 +
jz loc_100E77F  +
retn   +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
mov eax [ecx] +
cmp eax ecx +
jz loc_100E7A2  +
cmp byte ptr [eax+0Ch] 0 +
jnz loc_1019C95  +
mov eax [eax] +
cmp eax [esi+8] +
jnz loc_100E791  +
pop esi  +
leave   +
retn   +
***
mov eax [ecx] +
jmp dword ptr [eax+4]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_100E87B  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_105439F  +
cmp [ebp+arg_8] eax +
jnz loc_105439F  +
mov ecx esi +
call sub_100D342  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov ecx [ecx+8] +
jmp loc_100D4A4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 1102h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_100EB60  +
xor ecx ecx +
test al al +
setz cl  +
mov al cl +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jnz loc_10594C0  +
xor eax eax +
cmp [esi] eax +
pop esi  +
setz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+uCmd]  +
push dword ptr [ecx+20h]  +
call ds:GetWindow  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp byte_10F52C1 0 +
jnz loc_103B37D  +
mov ecx [ebp+var_4] +
mov al byte_10F52C6 +
xor ecx ebp +
call sub_1002492  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jnz loc_1012409  +
pop esi  +
retn   +
***
mov eax 0FFFh +
cmp [ecx] ax +
jz loc_1057BFD  +
push ecx  +
call VariantClear  +
retn   +
***
xor eax eax +
test byte ptr [ecx+238h] 10h +
jnz locret_100EC20  +
cmp [ecx+1DCh] al +
jnz locret_100EC20  +
inc eax  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100EC4A  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1059772  +
lea edi [esi+0E4h] +
xor ebx ebx +
push ebx  +
mov ecx edi +
call sub_100EB41  +
test al al +
jz loc_102B593  +
mov ecx edi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax 1 +
jz loc_102B593  +
xor eax eax +
inc eax  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100ECDB  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [eax] +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+4] eax +
and dword ptr [esi+8] 0 +
cmp edi [esi+4] +
jnz sub_1059D92  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+arg_0] +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov [ebp+arg_4] ecx +
cmp eax [esi+4] +
jz loc_100ED52  +
mov ecx [eax+4] +
mov edx [eax] +
mov [ecx] edx +
mov ecx [eax] +
mov edx [eax+4] +
push eax  +
mov [ecx+4] edx +
call ??3@YAXPAX@Z  +
dec dword ptr [esi+8]  +
pop ecx  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 80h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jz loc_1022F77  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jz loc_100F697  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_1013227  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1013227  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jz loc_1057C08  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_100EDA6  +
test eax eax +
jnz loc_100EE2F  +
mov edi [esi+8] +
test edi edi +
jz loc_1013210  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_100EE26  +
push [ebp+arg_8]  +
push eax  +
call sub_100ED86  +
test eax eax +
jnz loc_100EE26  +
add esi 0Ch +
jmp loc_100EDF9  +
cmp edi 1 +
jnz loc_1057C12  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov ecx [esi+8] +
cmp dword ptr [ecx+4] 0 +
jz loc_1009DA2  +
jmp loc_1063DA5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:free  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:malloc +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
test eax eax +
jz loc_1064FA4  +
pop esi  +
leave   +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [esi+74h] +
mov dword ptr [ebp-4] 2 +
test eax eax +
jnz loc_10456A4  +
push 0  +
push 1  +
lea ecx [esi+44h] +
call sub_100CD3C  +
push 0  +
push 1  +
lea ecx [esi+28h] +
call sub_100CD3C  +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
call sub_100CD3C  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+70h] +
mov eax [ecx] +
push esi  +
mov esi [ebp+arg_0] +
mov edx esi +
push 3  +
shl edx 2 +
push edx  +
call dword ptr [eax]  +
test eax eax +
jz loc_100F412  +
test esi esi +
jbe loc_100F412  +
mov ecx eax +
test ecx ecx +
jz loc_100F40C  +
and dword ptr [ecx] 0 +
add ecx 4 +
dec esi  +
jnz loc_100F405  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+14h] 0 +
dec eax  +
push 1  +
pop edx  +
jnz loc_10656FC  +
mov [esi+30h] edx +
mov dword ptr [esi+34h] 3 +
mov dword ptr [esi+38h] 8 +
mov dword ptr [esi+3Ch] 7 +
mov eax [esi+3Ch] +
push ebx  +
lea ecx [eax+eax] +
or ecx edx +
push edi  +
mov edi [ebp+arg_4] +
mov [esi+4Ch] ecx +
mov ecx [esi+34h] +
mov ebx edi +
shr ebx cl +
mov [esi+48h] eax +
mov [esi+58h] ecx +
mov [esi+64h] edi +
mov [ebp+arg_0] ebx +
cmp ebx edx +
ja loc_1065744  +
mov eax [esi+48h] +
lea ecx [eax+eax] +
and eax edi +
push 8  +
or ecx edx +
pop edi  +
mov [esi+4Ch] ecx +
mov [esi+50h] eax +
cmp [ebp+arg_0] edi +
ja loc_106575A  +
push edi  +
mov ecx esi +
call sub_100F3E3  +
mov [esi+54h] eax +
test eax eax +
jz loc_100F504  +
mov ecx [esi+64h] +
mov eax [esi+38h] +
mov [esi+5Ch] edi +
lea edi [eax+ecx-1] +
mov ecx [esi+34h] +
shr edi cl +
xor ebx ebx +
test edi edi +
jbe loc_100F4ED  +
mov ecx esi +
call sub_100F512  +
test eax eax +
jz loc_106578F  +
mov ecx [esi+54h] +
mov [ecx+ebx*4] eax +
inc ebx  +
cmp ebx edi +
jb loc_100F4D3  +
mov ecx [esi+14h] +
xor edx edx +
pop edi  +
pop ebx  +
cmp ecx edx +
jnz loc_106579F  +
mov eax [esi+14h] +
pop esi  +
pop ebp  +
retn 8  +
mov dword ptr [esi+14h] 0FFFFFF9Eh +
jmp loc_100F4ED  +
***
mov eax [ecx+30h] +
dec eax  +
jnz loc_10655C6  +
mov ecx [ecx+70h] +
mov eax [ecx] +
push 0  +
push 200h  +
call dword ptr [eax]  +
test eax eax +
jz loc_10655FE  +
mov ecx eax +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_100F563  +
push 6  +
lea edi [esi+40h] +
pop ebx  +
mov ecx edi +
call sub_100F563  +
add edi 40h +
dec ebx  +
jns loc_100F54B  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] 0 +
call sub_100F57F  +
mov eax esi +
pop esi  +
retn   +
***
and dword ptr [ecx+1Ch] 0 +
push 6  +
pop eax  +
and dword ptr [ecx+eax*4+20h] 0 +
mov dword ptr [ecx+eax*4] 1E3603Bh +
dec eax  +
jns loc_100F586  +
retn   +
***
call sub_100A60E  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_100F678 +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-20h] +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
mov dword ptr [ebp-4] 1 +
mov byte ptr [ebp-4] 0 +
call ?AfxTryCleanup@@YGXXZ  +
mov dword ptr [esi] offset off_100257C +
call sub_1001FCF  +
retn   +
***
cmp dword ptr [eax+4] 0 +
jnz loc_100EDB7  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_100EDB7  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_100EDB7  +
xor eax eax +
inc eax  +
jmp loc_100EDB9  +
***
call sub_1001F95  +
mov ebx ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCeventsource_1  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-14h] ebx +
test ebx ebx +
jz loc_100F939  +
inc dword ptr [ebx+10h]  +
mov eax [ebx+8] +
mov esi [eax] +
mov byte ptr [ebp-4] 2 +
cmp esi eax +
jz loc_100F9D0  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
cmp byte ptr [esi+0Ch] 0 +
jnz loc_100F9C9  +
push 8000FFFFh  +
push dword ptr [esi+8]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105B619  +
push dword ptr [ebp+1Ch]  +
mov ecx [esi+8] +
push dword ptr [ebp+18h]  +
lea eax [ebp-44h] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
call dword ptr [ebp+0Ch]  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_100F9D0  +
mov esi [esi] +
cmp esi [ebx+8] +
jnz loc_100F950  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-14h] +
mov dword ptr [ebp-10h] 1 +
call sub_100E76D  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call ds:BeginDeferWindowPos  +
mov [esi+8] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+8]  +
call ds:EndDeferWindowPos  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
lea eax [ebp+Rect] +
mov edi ecx +
push eax  +
push dword ptr [edi+20h]  +
call ds:GetClientRect  +
lea esi [edi+120h] +
mov eax [esi] +
push 5  +
mov ecx esi +
call dword ptr [eax]  +
mov eax [esi] +
lea ecx [ebp+Rect] +
push ecx  +
push dword ptr [edi+0C0h]  +
mov ecx esi +
call dword ptr [eax+8]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jz loc_1021867  +
mov eax [ecx+8] +
sub eax edx +
push 6  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 415h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
call sub_100C4D0  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmenubarAddstr  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+8] +
mov eax [edi] +
cmp [eax-8] ebx +
jz loc_1037B07  +
mov ebx [esi+8Ch] +
mov eax [esi+88h] +
push edi  +
push ebx  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-14h] +
push eax  +
call sub_1018DC2  +
mov eax [ebp-14h] +
cmp eax ebx +
jz loc_102AA95  +
sub eax [ebp-18h] +
sar eax 2 +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
lea esp [ebp-38h] +
call sub_100C50D  +
retn 4  +
***
call sub_1001F95  +
mov ebx ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCeventsourceSc  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-14h] ebx +
test ebx ebx +
jz loc_100FBB1  +
inc dword ptr [ebx+10h]  +
mov eax [ebx+8] +
mov esi [eax] +
mov byte ptr [ebp-4] 2 +
cmp esi eax +
jz loc_100FC3B  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
cmp byte ptr [esi+0Ch] 0 +
jnz loc_100FC34  +
push 8000FFFFh  +
push dword ptr [esi+8]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1064967  +
push dword ptr [ebp+10h]  +
mov ecx [esi+8] +
lea eax [ebp-44h] +
push eax  +
call dword ptr [ebp+0Ch]  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_100FC3B  +
mov esi [esi] +
cmp esi [ebx+8] +
jnz loc_100FBC4  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-14h] +
mov dword ptr [ebp-10h] 1 +
call sub_100E76D  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+15h] 0 +
jnz loc_100FD03  +
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp [ecx+0Ch] edx +
jge loc_100FD07  +
mov ecx [ecx+8] +
cmp byte ptr [ecx+15h] 0 +
jz loc_100FCF5  +
pop ebp  +
retn 4  +
mov eax ecx +
mov ecx [ecx] +
jmp loc_100FCFD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
xor eax eax +
mov bl 1 +
movzx edx word ptr [ecx] +
test dx dx +
jz loc_100FD31  +
cmp dx 26h +
jz loc_100FD37  +
inc ecx  +
inc ecx  +
jmp loc_100FD1F  +
cmp word ptr [ecx] 26h +
jnz loc_100FD5B  +
inc ecx  +
inc ecx  +
movzx edx word ptr [ecx] +
test edx edx +
jz loc_106072C  +
cmp edx 26h +
jz loc_1060725  +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_1060733  +
movzx eax word ptr [ecx] +
pop ebx  +
pop ebp  +
retn 8  +
***
test bl bl +
jz loc_100FD5B  +
jmp loc_100FD1F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov ebx [eax] +
xor esi esi +
cmp ebx esi +
jz loc_100FE3B  +
mov eax [ebp+0Ch] +
mov ecx [eax+0Ch] +
push eax  +
lea eax [ebp-38h] +
push eax  +
mov [ebp-28h] esi +
mov [ebp-24h] esi +
mov [ebp-20h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov [ebp-4] esi +
mov [ebp-8] ecx +
call ds:CopyRect  +
add edi 8 +
mov [ebp-10h] edi +
mov ecx [ebx] +
mov eax ebx +
mov ebx [eax+8] +
mov eax [ebp-4] +
mov [ebp-0Ch] ecx +
cmp [ebx+0Ch] esi +
jz loc_100FDCB  +
mov eax [ebp-8] +
lea ecx [ebp-18h] +
push ecx  +
push dword ptr [ebp+0Ch]  +
mov [ebp-14h] eax +
push dword ptr [ebp-10h]  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax]  +
lea esi [ebp-38h] +
lea edi [ebp-28h] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+0Ch] +
push esi  +
lea ecx [ebp-28h] +
call ?DeflateRect@CRect@@QAEXPBUtagRECT@@@Z  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_100FE42  +
mov eax [ebp-24h] +
sub eax [ebp-1Ch] +
add [ebp-8] eax +
cmp dword ptr [ebp-0Ch] 0 +
lea edi [ebp-38h] +
movs   +
movs   +
movs   +
movs   +
jnz loc_100FE4D  +
mov eax [ebp-34h] +
mov ecx [ebp-2Ch] +
push 14h  +
sub ecx eax +
push ecx  +
mov ecx [ebp-30h] +
sub ecx [ebp-38h] +
push ecx  +
mov ecx [ebp-4] +
add eax ecx +
push eax  +
push dword ptr [ebp-38h]  +
mov eax [ebp-10h] +
push 0  +
push dword ptr [ebp+8]  +
push dword ptr [eax]  +
call ds:DeferWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
add [ebp-4] eax +
jmp loc_100FE03  +
***
mov ebx [ebp-0Ch] +
xor esi esi +
jmp loc_100FDB6  +
***
mov eax [ebp-10h] +
sub eax edi +
add esi eax +
mov [ebp-4] esi +
jmp loc_100FF43  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
xor edx edx +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp dword ptr [ecx+20h] 1 +
mov [ebp-0Ch] ecx +
mov [ebp-1Ch] edx +
mov [ebp-18h] edi +
mov [ebp-14h] edx +
mov [ebp-10h] edx +
mov [ebp-2Ch] edx +
mov [ebp-28h] edx +
mov [ebp-24h] edx +
mov [ebp-20h] edx +
jnz loc_100FF4A  +
mov eax [ecx+4] +
mov ecx [ebp+10h] +
mov eax [eax] +
mov ecx [ecx+4] +
mov [ebp-4] ecx +
cmp eax edx +
jz loc_100FF4A  +
mov ebx [eax+8] +
mov ecx [eax] +
mov [ebp-8] ecx +
cmp ebx edx +
jz loc_100FF45  +
cmp [ebx+40h] edx +
jz loc_100FF45  +
mov esi [ebp+0Ch] +
mov eax [ebx] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
lea ecx [ebp-3Ch] +
push ecx  +
mov ecx ebx +
movs   +
call dword ptr [eax+0C0h]  +
mov esi eax +
lea edi [ebp-2Ch] +
movs   +
movs   +
movs   +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-1Ch] +
movs   +
call ?InflateRect@CRect@@QAEXPBUtagRECT@@@Z  +
mov edi [ebp-0Ch] +
cmp dword ptr [edi+0Ch] 1 +
jnz loc_100FF5A  +
mov eax [ebp+10h] +
mov esi [eax+4] +
sub esi [ebp-10h] +
add esi [ebp-18h] +
mov [ebp-4] esi +
mov eax [ebp-20h] +
sub eax [ebp-28h] +
push 14h  +
push eax  +
mov eax [ebp+0Ch] +
mov ecx [eax+8] +
sub ecx [eax] +
mov eax [ebp+8] +
push ecx  +
push esi  +
push 0  +
push 0  +
push dword ptr [ebx+20h]  +
push dword ptr [eax]  +
call ds:DeferWindowPos  +
cmp dword ptr [edi+0Ch] 0 +
mov edi [ebp-18h] +
jz loc_100FE57  +
xor edx edx +
cmp [ebp-8] edx +
jnz loc_100FF5F  +
sub edi [ebp-10h] +
mov eax [ebp+0Ch] +
add [eax+0Ch] edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov esi [ebp-4] +
jmp loc_100FF11  +
***
mov eax [ebp-8] +
jmp loc_100FEB5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov ebx [ebp+8] +
test ebx ebx +
jz loc_1037B0F  +
mov ecx [ebx+4] +
lea eax [esi+0A0h] +
cmp ecx [eax] +
jz loc_101015E  +
mov [eax] ecx +
push 1  +
mov ecx esi +
call sub_1018D4E  +
test eax eax +
jnz loc_100FFF2  +
lea ecx [esi+0A4h] +
call sub_100B681  +
lea ecx [esi+0BCh] +
call ?Empty@CString@@QAEXXZ  +
test ebx ebx +
jz loc_1010150  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0D4h] +
call sub_100BC96  +
lea ecx [esi+0E4h] +
call sub_100BC96  +
push dword ptr [ebx+4]  +
call ds:GetMenuItemCount  +
lea edi [esi+0C8h] +
mov ecx edi +
mov [ebp-20h] eax +
call sub_100A44C  +
mov dword ptr [ebp-10h] 5409h +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_10194ED  +
inc dword ptr [ebp-10h]  +
cmp dword ptr [ebp-10h] 5426h +
jl loc_101005F  +
and dword ptr [ebp-10h] 0 +
cmp dword ptr [ebp-20h] 0 +
jle loc_101012E  +
push 400h  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_101957E  +
mov eax [ebp-14h] +
cmp dword ptr [eax-8] 0 +
jz loc_101011F  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_1010BE0  +
and dword ptr [ebp-1Ch] 0 +
mov edi eax +
mov byte ptr [ebp-18h] 0 +
test edi edi +
jnz loc_1018DF8  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_10280FF  +
mov ecx eax +
sub ecx 33B6h +
jz loc_1028128  +
dec ecx  +
jz loc_102811E  +
dec ecx  +
jz loc_1028114  +
dec ecx  +
jnz loc_1060D64  +
mov ebx 5408h +
mov byte ptr [ebp-18h] 8 +
push eax  +
mov ecx esi +
call sub_102842D  +
test al al +
jz loc_1028132  +
push 10h  +
push dword ptr [ebp-18h]  +
lea eax [ebp-14h] +
push dword ptr [ebp-1Ch]  +
mov ecx esi +
push ebx  +
push eax  +
push 0FFFFFFFFh  +
call sub_101016B  +
mov ebx [ebp+8] +
inc dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
cmp eax [ebp-20h] +
jl loc_1010088  +
lea eax [esi+0E4h] +
push eax  +
push 0  +
push 5404h  +
push 2Dh  +
pop eax  +
call sub_1019050  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
mov ecx esi +
call sub_10159B1  +
mov ecx esi +
call sub_1018D6F  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov [ebp+var_14] eax +
mov al [ebp+arg_10] +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
mov [ebp+lParam] ebx +
test al 8 +
jnz loc_101019A  +
or al 4 +
mov [ebp+var_10] al +
mov al [ebp+arg_14] +
or al 8 +
mov [ebp+var_F] al +
mov eax [ebp+arg_C] +
push edi  +
mov [ebp+var_C] eax +
call sub_100FAC6  +
mov [ebp+var_8] eax +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
mov ecx esi +
call sub_100FAA4  +
mov [ebp+var_1C] eax +
test eax eax +
jz loc_1010230  +
mov edi [edi] +
push 0  +
push edi  +
call sub_100FD12  +
movzx edi ax +
test di di +
jz loc_1010226  +
lea eax [esi+0D4h] +
push eax  +
push 10h  +
push [ebp+arg_8]  +
mov eax edi +
lea ebx [esi+0E4h] +
call sub_1019050  +
push ebx  +
push 0  +
push [ebp+arg_8]  +
mov eax edi +
call sub_1019050  +
movzx edi di +
push edi  +
lea ebx [esi+0BCh] +
call ds:CharLowerW  +
push eax  +
mov ecx ebx +
call ??YCString@@QAEABV0@G@Z  +
push edi  +
call ds:CharUpperW  +
push eax  +
mov ecx ebx +
call ??YCString@@QAEABV0@G@Z  +
mov ecx esi +
call sub_1010246  +
mov eax [ebp+var_1C] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+0D4h] +
call sub_100FA88  +
push eax  +
push dword ptr [esi+0D8h]  +
lea ecx [esi+0A4h] +
call sub_101028C  +
lea ecx [esi+0E4h] +
call sub_100FA88  +
push eax  +
push dword ptr [esi+0E8h]  +
lea ecx [esi+0ACh] +
call sub_101028C  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B681  +
cmp [ebp+arg_0] 0 +
jz loc_10102AE  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:CreateAcceleratorTableW  +
mov [esi+4] eax +
xor eax eax +
cmp [esi+4] eax +
pop esi  +
setnz al  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
xor eax eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov [ebx] eax +
mov [ebx+4] eax +
mov [ebx+8] eax +
mov [ebx+0Ch] eax +
cmp [ecx+40h] eax +
jz loc_1010B3D  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+Rect] +
push eax  +
add ecx 44h +
movs   +
call sub_1010B4B  +
mov esi eax +
mov edi ebx +
movs   +
movs   +
movs   +
movs   +
add dword ptr [ebx+0Ch] 6 +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpRect] +
push esi  +
call sub_1010B6F  +
mov eax [ebp+arg_C] +
sub eax [ebp+arg_4] +
mov [esi+8] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpRect]  +
push dword ptr [ecx+20h]  +
call ds:GetClientRect  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 64h +
push esi  +
mov esi ecx +
mov eax [esi+48h] +
test eax eax +
jz loc_1010BC1  +
push dword ptr [eax+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_1010BC1  +
cmp dword ptr [ebp+8] 0 +
mov ecx esi +
jz loc_1053781  +
call sub_1010BCB  +
test al al +
jz loc_1039DF3  +
pop esi  +
leave   +
retn 8  +
***
call sub_100DFF3  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
mov al cl +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+nPos]  +
push dword ptr [ecx+4]  +
call ds:GetSubMenu  +
push eax  +
call ?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z  +
pop ebp  +
retn 4  +
***
mov ecx [ebp+arg_0] +
add esi 16Ch +
push esi  +
call ??0CString@@QAE@ABV0@@Z  +
jmp loc_100D3DF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
cmp byte ptr [ecx+15h] 0 +
jz loc_1056E20  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi] +
cmp edi eax +
jz loc_1010F37  +
mov [esi] eax +
test eax eax +
jnz loc_1030566  +
test edi edi +
jz loc_1010F37  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
push 1  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
pop esi  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi] +
mov [ebp+var_8] esi +
test eax eax +
jnz loc_1010FC6  +
call ds:GetCurrentThreadId  +
and eax 0FFFFFFFDh +
or eax 1 +
mov [ebp+var_4] eax +
mov ecx [ebp+var_8] +
mov edx [ebp+var_4] +
mov eax 0 +
cmpxchg [ecx] edx +
test eax eax +
setz al  +
test al al +
jz loc_1065432  +
pop esi  +
leave   +
retn   +
xor al al +
jmp loc_1010FBB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx] +
dec eax  +
mov [ebp+var_8] ecx +
mov [ebp+var_4] eax +
test al 3 +
jnz loc_1010FE7  +
and [ebp+var_4] 0 +
mov ecx [ebp+var_8] +
mov edx [ebp+var_4] +
mov eax [ecx] +
cmpxchg [ecx] edx +
jnz loc_1010FEF  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 1  +
call sub_101118C  +
mov esi eax +
test esi esi +
jz loc_1011168  +
mov eax [ebp+arg_0] +
mov [esi] eax +
lea eax [esi+4] +
test eax eax +
jz loc_1011174  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
push [ebp+arg_8]  +
lea eax [esi+8] +
push eax  +
call sub_100D227  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1057EDD  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 10h +
jb loc_1057EE4  +
shl ecx 4 +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea edi [eax+4] +
push dword ptr [edi]  +
mov ebx ecx +
push eax  +
call sub_101114E  +
push 1  +
mov ecx ebx +
mov esi eax +
call sub_10111FB  +
mov [edi] esi +
mov eax [esi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov eax [ecx+8] +
mov edx [ebp+8] +
mov esi 1FFFFFFFh +
sub esi eax +
cmp esi edx +
jb loc_1058F88  +
add eax edx +
mov [ecx+8] eax +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi ecx +
test esi esi +
jz loc_105EB5B  +
call sub_101125C  +
mov ecx edi +
mov [esi+18h] eax +
call ?Default@CWnd@@IAEJXZ  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax dword_10F530C +
cmp eax 1 +
jl loc_1037750  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_10113DC  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp [ecx+8] eax +
jnz loc_10434DF  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
mov esi ecx +
mov [ebp-8] esi +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101140E  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105ADC0  +
push ebx  +
push edi  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [esi+20h]  +
xor ebx ebx +
mov [ebp-4] ebx +
call ds:GetClientRect  +
lea edi [esi+1E4h] +
push edi  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_1031ABA  +
mov ebx [ebp-10h] +
sub ebx [edi+8] +
lea esi [ebp-18h] +
sub ebx [ebp-18h] +
add ebx [edi] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp-8] +
mov [ebp-4] ebx +
xor edi edi +
inc edi  +
cmp [ebp+8] edi +
jz loc_101145F  +
test ebx ebx +
jnz loc_101AF29  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
cmp [ebp+8] edi +
pop edi  +
pop ebx  +
jz loc_1011474  +
mov ecx esi +
call sub_100DA2C  +
pop esi  +
leave   +
retn 0Ch  +
***
mov eax dword_10F5304 +
test eax eax +
jz locret_101148E  +
mov byte ptr [eax+123h] 1 +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
push 5  +
mov ecx esi +
call sub_100EB83  +
mov edi eax +
test edi edi +
jz loc_10114E1  +
add esi 0DCh +
mov eax [esi] +
push 5  +
mov ecx esi +
call dword ptr [eax]  +
mov eax [esi] +
lea ecx [ebp+Rect] +
push ecx  +
push dword ptr [edi+20h]  +
mov ecx esi +
call dword ptr [eax+8]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push esi  +
mov esi [ebp+lpRect] +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp [ecx+40h] eax +
jz loc_101150B  +
push esi  +
call sub_1010B6F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
push esi  +
mov esi ecx +
mov eax [esi+44h] +
cmp eax 10h +
jg loc_10115B2  +
cmp eax 1 +
jl loc_10115B2  +
push ebx  +
push edi  +
xor edi edi +
push 3Ch  +
lea eax [ebp+var_48] +
push edi  +
push eax  +
mov [ebp+var_4C] edi +
call memset  +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
push edi  +
push 407h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
mov ebx [esi+44h] +
mov eax [ebp+arg_0] +
sub eax [ebp+var_8] +
mov edx [esi+48h] +
lea ecx [ebx-1] +
mov edi ecx +
imul edi edi +
mov [ebp+ecx*4+var_4C] eax +
mov edi [edi+edx] +
add edi [ebp+var_4] +
sub eax edi +
dec ecx  +
js loc_101159D  +
mov edi ecx +
imul edi edi +
add edi edx +
test eax eax +
jl loc_101158E  +
mov [ebp+ecx*4+var_4C] eax +
mov edx [edi] +
add edx [ebp+var_4] +
sub edi 0Ch +
sub eax edx +
dec ecx  +
test ecx ecx +
jge loc_1011586  +
lea eax [ebp+var_4C] +
push eax  +
push ebx  +
push 404h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
push dword ptr [ebp+10h]  +
mov ebx ecx +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100E08D  +
lea eax [ebp-30h] +
push eax  +
push 0  +
mov ecx ebx +
call sub_100C8BD  +
lea eax [ebp-10h] +
push eax  +
push 1  +
mov ecx ebx +
call sub_100C8BD  +
lea eax [ebp-20h] +
push eax  +
push 2  +
mov ecx ebx +
call sub_100C8BD  +
mov esi ds:InflateRect +
push 0FFFFFFFEh  +
pop edi  +
push edi  +
push edi  +
lea eax [ebp-10h] +
push eax  +
call esi  +
push edi  +
push edi  +
lea eax [ebp-20h] +
push eax  +
call esi  +
mov esi [ebp-28h] +
mov edi [ebp-8] +
sub esi [ebp-30h] +
sub edi [ebp-10h] +
lea eax [ebx+4Ch] +
test eax eax +
jz loc_101162D  +
mov eax [eax+20h] +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_1011655  +
mov eax [ebp-4] +
sub eax [ebp-0Ch] +
push 224h  +
push eax  +
push edi  +
push 4  +
lea eax [esi+4] +
push eax  +
push 0  +
lea ecx [ebx+4Ch] +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
add ebx 94h +
jz loc_1062854  +
mov eax [ebx+20h] +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_1011692  +
mov eax [ebp-14h] +
sub eax [ebp-1Ch] +
push 224h  +
push eax  +
mov eax [ebp-18h] +
sub eax [ebp-20h] +
mov ecx ebx +
push eax  +
push 4  +
lea eax [edi+esi+8] +
push eax  +
push 0  +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
or eax 80000h +
push eax  +
push 0FFFFFFF0h  +
push dword ptr [esi+20h]  +
call ds:SetWindowLongW  +
cmp edi 1 +
jnz loc_101170C  +
jmp loc_1011713  +
push 20h  +
mov eax offset byte_10D7A1B +
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCchildframeOns  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
mov edi [ebp+8] +
push 0FFFFFFF0h  +
push dword ptr [esi+20h]  +
call ds:GetWindowLongW  +
cmp edi 2 +
jnz loc_1011699  +
and eax 0FFF7FFFFh +
push eax  +
push 0FFFFFFF0h  +
push dword ptr [esi+20h]  +
call ds:SetWindowLongW  +
mov ecx esi +
call sub_1011496  +
mov ecx esi +
call ?GetMDIFrame@CMDIChildWnd@@QAEPAVCMDIFrameWnd@@XZ  +
test eax eax +
jz loc_101172A  +
mov edx [eax] +
push 1  +
mov ecx eax +
call dword ptr [edx+0E8h]  +
movzx ecx byte ptr [esi+231h] +
xor eax eax +
cmp edi 1 +
setz al  +
cmp ecx eax +
jnz loc_105EB35  +
mov ecx [esi+228h] +
test ecx ecx +
jz loc_101177F  +
push dword ptr [ebp+10h]  +
lea eax [ebp-2Ch] +
push dword ptr [ebp+0Ch]  +
push edi  +
push eax  +
call sub_10117C1  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
xor ebx ebx +
inc ebx  +
push offset aCamcviewSconsi  +
mov [ebp-10h] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx esi +
call sub_100EC0C  +
test al al +
jz loc_1011812  +
mov eax [esi+40h] +
test eax eax +
jz loc_1011812  +
mov [eax+123h] bl +
push dword ptr [ebp+14h]  +
lea eax [ebp-20h] +
push dword ptr [ebp+10h]  +
lea ecx [esi+5Ch] +
push dword ptr [ebp+0Ch]  +
push esi  +
push offset loc_101187F  +
push eax  +
call sub_100F8FD  +
mov ecx [ebp+8] +
push eax  +
mov [ebp-4] ebx +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
mov eax [ecx] +
jmp dword ptr [eax+0Ch]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
and dword ptr [eax] 0 +
push ecx  +
mov ecx esi +
call sub_101194E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi eax +
jz loc_101196D  +
test eax eax +
jz loc_101196D  +
lea ecx [eax+4] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10119AE  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_104F67E  +
cmp [ebp+arg_8] eax +
jnz loc_104F67E  +
mov ecx esi +
call sub_10119E9  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_1011A16  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+1Dh] 0 +
mov ebx ecx +
mov esi edi +
jz loc_105186D  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
mov eax [esi+134h] +
mov [ebp-0Ch] eax +
lea eax [ebp-10h] +
push eax  +
lea ecx [esi+0D0h] +
call sub_1011A7A  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_1011A9F  +
cmp dword ptr [esi+28h] 0 +
jz loc_1034540  +
push 1  +
push [ebp+arg_0]  +
lea ecx [esi+8] +
call sub_1011AA9  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+4] +
push esi  +
mov esi [eax] +
push edi  +
push [ebp+arg_4]  +
mov edi [eax+0Ch] +
mov eax [eax+8] +
sub edi edx +
push edi  +
sub eax esi +
push eax  +
push edx  +
push esi  +
call ?MoveWindow@CWnd@@QAEXHHHHH@Z  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_1011AF7  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1060FDA  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jb loc_105804A  +
mov eax [esi+14h] +
sub eax edi +
cmp eax [ebp+arg_4] +
jnb loc_1011BE0  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] 0 +
ja loc_10124B0  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
movzx eax cx +
jmp loc_100A912  +
***
cmp eax 0B6h +
jz loc_100A946  +
jmp loc_100A94D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
call ?Empty@CString@@QAEXXZ  +
mov edi ds:?GetStringModule@@YGPAUHINSTANCE__@@XZ +
mov esi 100h +
push esi  +
push offset Buffer  +
push [ebp+uID]  +
call edi  +
mov ebx ds:LoadStringW +
push eax  +
call ebx  +
mov ecx esi +
sub ecx eax +
mov [ebp+var_8] eax +
cmp ecx 1 +
jbe loc_1062B98  +
xor ecx ecx +
mov Buffer[eax*2] cx +
mov ecx [ebp+arg_0] +
push offset Buffer  +
call ??4CString@@QAEABV0@PBG@Z  +
xor eax eax +
cmp [ebp+var_8] eax +
pop edi  +
pop esi  +
setnle al  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jbe loc_1012337  +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10127B5  +
inc eax  +
inc eax  +
inc ecx  +
inc ecx  +
dec [ebp+arg_8]  +
jnz loc_1012322  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+18h] 8 +
mov edx [eax+14h] +
jb loc_1012364  +
mov eax [eax+4] +
push edx  +
push eax  +
push dword ptr [ecx+14h]  +
push 0  +
call sub_101236E  +
pop ebp  +
retn 4  +
add eax 4 +
jmp loc_1012354  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jb loc_10594FB  +
mov eax [esi+14h] +
mov ebx [ebp+arg_4] +
sub eax edi +
cmp eax ebx +
jb loc_1059505  +
mov eax [ebp+arg_C] +
cmp ebx eax +
jb loc_101D441  +
cmp dword ptr [esi+18h] 8 +
jb loc_10376EB  +
mov esi [esi+4] +
push eax  +
push [ebp+arg_8]  +
lea eax [esi+edi*2] +
push eax  +
call sub_1012311  +
add esp 0Ch +
test eax eax +
jz loc_10123C7  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
cmp ebx [ebp+arg_C] +
jb loc_103755C  +
xor eax eax +
cmp ebx [ebp+arg_C] +
setnz al  +
jmp loc_10123C0  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_1012407  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
dec dword ptr [ecx+4]  +
jz loc_105429F  +
and dword ptr [esi] 0 +
jmp loc_100EBEA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1012446  +
test esi esi +
jz loc_1012446  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+30h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx [esi+18h] +
push ebx  +
lea edx [esi+4] +
cmp ecx 8 +
jb loc_104F367  +
mov ebx [edx] +
mov [ebp+arg_0] ebx +
cmp ecx 8 +
jb loc_10124CC  +
mov edx [edx] +
mov ebx [ebp+arg_4] +
sub eax ebx +
push eax  +
mov [ebp+var_4] edx +
mov edx [ebp+arg_0] +
lea eax [edi+ebx] +
lea eax [edx+eax*2] +
push eax  +
mov eax [ebp+var_4] +
sub ecx edi +
push ecx  +
lea eax [eax+edi*2] +
push eax  +
call sub_1012506  +
mov eax [esi+14h] +
sub eax ebx +
push eax  +
mov ecx esi +
call sub_100CD14  +
pop ebx  +
jmp loc_1011BEA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1012528  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101254A  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101256D  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10123F1  +
add esi 4 +
push esi  +
push [ebp+rguid]  +
call sub_10125B6  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_58] 0 +
mov eax [ebp+rguid] +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_106866F  +
push edi  +
push 27h  +
lea ecx [ebp+sz] +
push ecx  +
push eax  +
call ds:StringFromGUID2  +
test eax eax +
jz loc_106869D  +
lea eax [ebp+var_58] +
push eax  +
lea eax [ebp+sz] +
push eax  +
call sub_1012624  +
mov edi eax +
test edi edi +
jl loc_10686D3  +
mov eax [ebp+var_58] +
mov [esi] eax +
mov eax edi +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 8  +
***
call sub_100C4D0  +
mov eax [ebp+0Ch] +
mov esi [ebp+8] +
xor ebx ebx +
mov [ebp-74h] eax +
cmp eax ebx +
jz loc_10684A1  +
mov [eax] ebx +
lea eax [ebp-70h] +
push eax  +
push esi  +
call ds:CLSIDFromString  +
mov edi eax +
test edi edi +
jl loc_10684CF  +
push 27h  +
lea eax [ebp-60h] +
push eax  +
lea eax [ebp-70h] +
push eax  +
call ds:StringFromGUID2  +
test eax eax +
jz loc_1068502  +
push 44h  +
call sub_100ABF0  +
mov [ebp-78h] eax +
xor ebx ebx +
mov [ebp-4] ebx +
cmp eax ebx +
jz loc_101268E  +
mov ecx eax +
call sub_10126FD  +
mov ebx eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test ebx ebx +
jz loc_1068538  +
lea edi [ebx+34h] +
lea esi [ebp-70h] +
movs   +
movs   +
movs   +
lea eax [ebp-60h] +
push eax  +
mov ecx ebx +
movs   +
call sub_10126D6  +
mov edi eax +
test edi edi +
jl loc_1068563  +
mov eax [ebp-74h] +
mov [eax] ebx +
test ebx ebx +
jz loc_10126C7  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax]  +
mov eax edi +
call sub_100C50D  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
add ecx 8 +
call sub_100AE0E  +
mov esi eax +
test esi esi +
jl loc_106846C  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_1012726  +
mov dword ptr [ebx] offset off_100BDA8 +
lea edi [ebx+34h] +
mov esi offset dword_100CA88 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_1011B70 +
call sub_100AD56  +
and dword ptr [esi+20h] 0 +
lea ecx [esi+24h] +
call sub_1012752  +
mov eax esi +
pop esi  +
retn   +
***
mov eax ecx +
and dword ptr [eax] 0 +
xor ecx ecx +
mov [eax+4] cx +
mov [eax+6] cx +
mov [eax+8] cx +
mov [eax+0Ah] cx +
mov [eax+0Ch] cx +
mov [eax+0Eh] cx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100BDA8 +
call sub_10127A7  +
test byte ptr [ebp+8] 1 +
jz loc_101279B  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1011B70 +
add ecx 8 +
jmp sub_100A77D  +
***
movzx eax word ptr [eax] +
cmp ax [ecx] +
sbb eax eax +
and eax 0FFFFFFFEh +
inc eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+rguid] 0 +
jnz loc_10127DA  +
mov [ebp+rguid] offset rguid +
push [ebp+rguid]  +
mov ecx [ebp+arg_4] +
call sub_1012593  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_1012340  +
xor ecx ecx +
test eax eax +
setl cl  +
mov al cl +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
mov esi ecx +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+34h] +
call sub_100D440  +
mov eax [ebp+var_4] +
cmp eax [esi+38h] +
jz loc_1062DEA  +
mov ecx [eax+10h] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+0Ch] +
mov eax [ecx+0Ch] +
mov cx [eax] +
cmp cx [edx] +
jnz loc_1012884  +
test cx cx +
jz loc_1012875  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_1012884  +
add eax 4 +
add edx 4 +
test cx cx +
jnz loc_1012853  +
xor eax eax +
xor ecx ecx +
test eax eax +
setl cl  +
mov eax ecx +
pop ebp  +
retn 4  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
jmp loc_1012877  +
***
mov edi esi +
mov esi [esi] +
jmp loc_10128A5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push esi  +
mov esi [eax+4] +
push edi  +
mov edi eax +
cmp byte ptr [esi+2Dh] 0 +
jnz loc_10128C2  +
push [ebp+arg_0]  +
lea eax [esi+0Ch] +
push eax  +
call sub_10127EE  +
pop ecx  +
pop ecx  +
test al al +
jz loc_101288B  +
mov esi [esi+8] +
jmp loc_10128A5  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push esi  +
mov esi [eax+4] +
push edi  +
mov edi eax +
cmp byte ptr [esi+59h] 0 +
jnz loc_10128FD  +
push [ebp+arg_0]  +
lea ecx [esi+0Ch] +
call sub_1012B08  +
test al al +
jnz loc_1062C8B  +
mov edi esi +
mov esi [esi] +
jmp loc_10128DE  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_101292D  +
mov esi [esi] +
push edi  +
call sub_1012C29  +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+2Dh] 0 +
pop ecx  +
mov edi esi +
jnz loc_1012942  +
jmp loc_1012905  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+2Dh] 0 +
mov ebx ecx +
mov esi edi +
jz loc_1012905  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_1012973  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+4] +
mov eax [ecx] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
cmp eax ecx +
jz loc_10129E2  +
mov ecx [esi] +
mov edi [eax+8] +
cmp ecx edi +
jb loc_101299C  +
cmp ecx [eax+0Ch] +
jbe loc_1051C5E  +
mov edx [esi+4] +
cmp edx edi +
jb loc_10129AC  +
cmp edx [eax+0Ch] +
jbe loc_1051C5E  +
lea ebx [edi-1] +
cmp edx ebx +
jz loc_1051C56  +
mov ebx [eax+0Ch] +
inc ebx  +
cmp ecx ebx +
jnz loc_106307A  +
mov esi [esi+4] +
mov ecx [ebp+arg_0] +
lea edx [eax+0Ch] +
mov [edx] esi +
mov eax [eax] +
cmp eax [ecx+4] +
jnz loc_1063095  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov ecx [ebp+arg_0] +
push esi  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10129F7  +
jmp loc_10129D9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10111C2  +
mov eax [ebp+arg_4] +
mov ecx [eax+4] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1012454 +
call sub_1012A41  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10123F1  +
mov eax [ebp+arg_0] +
mov [esi+4] eax +
pop esi  +
test eax eax +
jz loc_1012A5E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
push dword ptr [ebp+8]  +
lea ecx [ebp-14h] +
call sub_1012A1B  +
and dword ptr [ebp-4] 0 +
push eax  +
lea eax [ebp+8] +
push eax  +
lea ecx [esi+54h] +
call sub_1012AC0  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
mov dword ptr [ebp-14h] offset off_1012454 +
call sub_10123F1  +
mov eax [ebp+8] +
cmp eax [esi+58h] +
jz loc_1062DE3  +
add eax 14h +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_10128CF  +
mov [ebp+var_4] eax +
cmp eax [esi+4] +
jz loc_1012AF8  +
mov ecx [ebp+arg_4] +
add eax 0Ch +
push eax  +
call sub_1012B08  +
test al al +
jnz loc_1012AF8  +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
mov eax [esi+4] +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
jmp loc_1012AEC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov edx [edx+4] +
xor eax eax +
cmp edx eax +
jz loc_1012B32  +
cmp [ecx+4] eax +
jz loc_1012B37  +
mov ecx [ecx+4] +
mov eax [ecx] +
push edx  +
call dword ptr [eax+10h]  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
pop ebp  +
retn 4  +
cmp [ecx+4] eax +
jnz loc_1012B2E  +
cmp edx eax +
jz loc_1012B2E  +
jmp loc_1062C66  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+8] +
call sub_1012B7E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
mov dword ptr [esi] offset off_1012454 +
call sub_10123F1  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100BAC0 +
lea ecx [esi+34h] +
mov dword ptr [ebp-4] 2 +
call sub_100E847  +
lea ecx [esi+28h] +
mov byte ptr [ebp-4] 1 +
call sub_1012C6B  +
lea ecx [esi+1Ch] +
call sub_1012BCF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+8] +
call sub_100A77D  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1012BED  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [eax] +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+4] eax +
and dword ptr [esi+8] 0 +
cmp edi [esi+4] +
jz loc_1012C21  +
push ebx  +
mov ebx [edi] +
push edi  +
call sub_1012C29  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov edi ebx +
cmp ebx [esi+4] +
jnz loc_1012C0A  +
pop ebx  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1012C41  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
call sub_100CD3C  +
test [ebp+arg_0] 1 +
jnz loc_1062E71  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1012C9F  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_1012CCD  +
cmp [ebp+arg_8] eax +
jnz loc_1012CCD  +
mov ecx esi +
call sub_1012CDC  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_1012CC3  +
jmp loc_1062FCF  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_101292D  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_1012D36  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+59h] 0 +
mov ebx ecx +
mov esi edi +
jz loc_1053EDE  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov eax 80004002h +
jmp loc_100EE3F  +
test eax eax +
jge loc_100EE21  +
jmp loc_100EE3F  +
mov eax 80070057h +
jmp loc_100EE3F  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+1Ch] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_105193D  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset off_10146AC +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+10h] +
call sub_101197A  +
mov ecx esi +
call sub_100B8F1  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0FFFFFFFFh +
jz loc_10132E8  +
push edi  +
lea edi [esi+4] +
push 0  +
mov ecx edi +
call sub_100EB41  +
test al al +
jz loc_1066403  +
mov ecx edi +
call sub_100A5CF  +
mov ecx [eax] +
push 0  +
push dword ptr [esi+8]  +
push eax  +
call dword ptr [ecx+18h]  +
or dword ptr [esi+8] 0FFFFFFFFh +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 1Ch +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10143FD  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1014418  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
add [eax-6F6F6F70h] dl +
mov edi edi +
push esi  +
push dword ptr [ecx+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov esi eax +
test esi esi +
jz loc_1014666  +
push dword ptr [esi+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_1014666  +
mov ecx esi +
call sub_101466F  +
pop esi  +
retn 8  +
***
mov edi edi +
push esi  +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
mov esi eax +
test esi esi +
jz loc_10146A9  +
push offset off_100A418  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
mov ecx esi +
test eax eax +
jnz loc_105F2DB  +
push offset off_10146AC  +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_10146A9  +
mov ecx esi +
pop esi  +
jmp sub_100FA40  +
pop esi  +
retn   +
***
mov eax ds:?classCMDIFrameWnd@CMDIFrameWnd@@2UCRuntimeClass@@B +
retn   +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewtoolba  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1063F24  +
test [esi+68h] bl +
jnz loc_1027AD8  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
push ebp  +
mov ebp esp +
mov eax [ecx+34h] +
mov ecx [ecx+38h] +
cmp eax ecx +
jz loc_1015750  +
mov edx [eax+18h] +
cmp edx [ebp+8] +
jnz loc_101574B  +
mov edx [eax] +
cmp edx [ebp+0Ch] +
jz loc_1015752  +
add eax 54h +
jmp loc_1015738  +
***
xor eax eax +
pop ebp  +
retn 8  +
***
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
lea eax [ebp-2Ch] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
push 418h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov eax edi +
jmp loc_100E04B  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+11h] dl +
jnz loc_106070F  +
mov ecx [eax+8] +
cmp [ecx+11h] dl +
jz loc_10197D6  +
mov eax [eax+4] +
cmp [eax+11h] dl +
jnz loc_1015962  +
mov ecx [esi] +
cmp ecx [eax+8] +
jz loc_106071E  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_104EF84  +
cmp [ebp+arg_8] eax +
jnz loc_104EF84  +
mov ecx esi +
call sub_100A44C  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
call sub_1015912  +
mov ebx eax +
dec ebx  +
js loc_10159DD  +
lea eax [ebp+var_10] +
push eax  +
push ebx  +
mov ecx edi +
call sub_1015A29  +
test eax eax +
jz loc_10159C7  +
mov esi [ebp+var_8] +
cmp [edi+4Ch] esi +
jz loc_1015A1F  +
mov ecx edi +
mov [edi+4Ch] esi +
mov [ebp+lParam] 64h +
mov [ebp+var_70] 60h +
mov [ebp+var_48] esi +
mov [ebp+var_50] esi +
call sub_100DF96  +
shr eax 10h +
mov ecx edi +
mov [ebp+var_4C] eax +
call sub_100DFF3  +
cmp eax 0FFFFFFFFh +
jz loc_1015A1F  +
lea ecx [ebp+lParam] +
push ecx  +
mov ecx [edi+48h] +
push eax  +
call sub_100DFAE  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 41Dh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_100A479  +
mov esi [esi] +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+11h] 0 +
pop ecx  +
mov edi esi +
jnz loc_100A492  +
jmp loc_1015A46  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101596B  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?OnCmdMsg@CView@@MAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z  +
test eax eax +
jnz loc_106441D  +
lea eax [esi+0A4h] +
cmp dword ptr [eax] 0 +
jz loc_1064422  +
mov ecx [eax] +
mov eax [ecx] +
pop esi  +
pop ebp  +
jmp dword ptr [eax+14h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push eax  +
push [ebp+wParam]  +
push 404h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
inc esi  +
cmp esi [ebp+var_30] +
jge loc_1015B20  +
mov ecx [ebp+var_34] +
lea eax [ebp+lParam] +
push eax  +
push esi  +
call sub_100940C  +
test [ebp+var_F] 1 +
jnz loc_1028FAB  +
test [ebp+var_10] 8 +
jnz loc_1015AFD  +
cmp edi 0FFFFFFFFh +
jz loc_1015B38  +
cmp [ebp+wParam] 0FFFFFFFFh +
jz loc_1015B38  +
mov ecx [ebp+var_34] +
push 0  +
push [ebp+wParam]  +
call sub_1015ADE  +
cmp esi [ebp+var_30] +
jz loc_1015BF1  +
cmp ebx 0FFFFFFFFh +
jz loc_1015BF1  +
mov ecx [ebp+var_34] +
push 0  +
push ebx  +
call sub_1015ADE  +
jmp loc_1015BF1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push [ebp+arg_0]  +
mov ebx ecx +
mov [ebp+var_34] ebx +
call sub_1015C07  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_1015BF2  +
push edi  +
mov ecx ebx +
call sub_1015912  +
cmp [ebp+arg_4] 0 +
mov [ebp+var_30] eax +
lea edi [esi-1] +
jz loc_10290DF  +
test edi edi +
jl loc_1015BB8  +
lea eax [ebp+var_2C] +
push eax  +
push edi  +
mov ecx ebx +
call sub_100940C  +
test [ebp+var_24] 8 +
jz loc_1015BB8  +
dec edi  +
jns loc_1015BA3  +
inc esi  +
cmp esi [ebp+var_30] +
jge loc_1015BD0  +
lea eax [ebp+lParam] +
push eax  +
push esi  +
mov ecx ebx +
call sub_100940C  +
test [ebp+var_10] 8 +
jnz loc_1015BB8  +
cmp edi 0FFFFFFFFh +
jz loc_1015C23  +
cmp esi [ebp+var_30] +
jz loc_1027AB5  +
test [ebp+var_23] 1 +
jnz loc_1027AC9  +
cmp esi [ebp+var_30] +
jz loc_1027AB5  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 419h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
cmp esi [ebp+var_30] +
jz loc_1015BF1  +
test [ebp+var_F] 1 +
jz loc_1015BF1  +
push 1  +
push [ebp+var_14]  +
mov ecx ebx +
jmp loc_1015B50  +
***
mov eax dword_10F53E4 +
retn   +
***
jmp ?IsValidProperty@ClassInfoBase@DirectUI@@UBE_NPBUPropertyInfo@2@@Z  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
xor edi edi +
cmp eax edi +
jnz loc_1016005  +
mov ecx [esi+14h] +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [esi+8] edi +
mov [esi+4] edi +
call ?FreeDataChain@CPlex@@QAEXXZ  +
mov [esi+14h] edi +
pop edi  +
pop esi  +
retn   +
***
jmp ?HandleUiaDestroyListener@Element@DirectUI@@UAEXXZ  +
***
jmp ?OnUnHosted@Element@DirectUI@@MAEXPAV12@@Z  +
***
jmp ?MessageCallback@Element@DirectUI@@UAEIPAUtagGMSG@@@Z  +
***
mov eax [eax] +
jmp loc_1015FAE  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+8] +
test esi esi +
jnz loc_1069AC0  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101605C  +
test byte ptr [ebp+8] 1 +
jz loc_1016050  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1008500 +
mov dword ptr [ebp-4] 3 +
call sub_101600E  +
mov eax [esi+20h] +
test eax eax +
jz loc_101608D  +
push eax  +
call ds:DestroyIcon  +
lea ecx [esi+38h] +
mov byte ptr [ebp-4] 2 +
call sub_100A77D  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 1 +
call sub_100A77D  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 0 +
call sub_10160C2  +
mov dword ptr [esi] offset off_100257C +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1008438 +
and dword ptr [ebp-4] 0 +
call sub_1015FA3  +
mov dword ptr [esi] offset off_100257C +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100CD84 +
mov dword ptr [ebp-4] 3 +
call sub_100D2F2  +
mov eax [esi+20h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_1016127  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+1Ch] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1016138  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+10h] +
mov byte ptr [ebp-4] 0 +
call sub_100E847  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_1015A6C  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1015DAC +
call ??1Element@DirectUI@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jnz loc_106A776  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp ?OnDestroy@Element@DirectUI@@UAEXXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10161B3  +
test byte ptr [ebp+8] 1 +
jnz loc_106A71D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1015C44 +
jmp ??1Button@DirectUI@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10161E7  +
test byte ptr [ebp+8] 1 +
jnz loc_106A7B9  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1015E9C +
jmp ??1Element@DirectUI@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov [esi+3Ch] ebx +
mov [esi+48h] ebx +
mov [esi+44h] ebx +
mov [esi+40h] bl +
mov [ebp+var_4] eax +
mov [ebp+var_8] ebx +
cmp eax ebx +
jz loc_101623A  +
mov ecx [eax] +
mov [ebp+var_4] ecx +
mov ecx [eax+8] +
mov [ebp+var_8] ecx +
cmp ecx ebx +
jz loc_101623A  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov eax [ebp+var_4] +
jmp loc_101621B  +
lea ecx [esi+4] +
call sub_1015FA3  +
mov eax [esi+2Ch] +
neg eax  +
sbb eax eax +
mov [ebp+var_4] eax +
mov [ebp+var_C] 0FFFFh +
cmp eax ebx +
jz loc_1016282  +
push edi  +
lea edi [esi+20h] +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
call ?GetNextAssoc@CMapWordToPtr@@QBEXAAPAU__POSITION@@AAGAAPAX@Z  +
mov ecx [ebp+var_8] +
cmp ecx ebx +
jz loc_101627C  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
cmp [ebp+var_4] ebx +
jnz loc_101625B  +
pop edi  +
lea ecx [esi+20h] +
call ?RemoveAll@CMapWordToPtr@@QAEXXZ  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10162B2  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jz loc_10162CB  +
push esi  +
call sub_10162D5  +
add esi 54h +
jmp loc_10162BB  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_10162ED  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1016310  +
test [ebp+arg_0] 1 +
jnz loc_105BAFA  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+38h] +
call sub_100CD3C  +
push 0  +
push 1  +
lea ecx [esi+1Ch] +
call sub_100CD3C  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100AD38  +
test eax eax +
jnz loc_1065F61  +
mov ecx esi +
call sub_100A6F0  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_100AEA2  +
mov esi eax +
test esi esi +
jl loc_1065F97  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionpanesec  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [esi+34h] edi +
jnz loc_10179FD  +
lea ecx [ebp-20h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCdirectuiren_0  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [esi+28h] +
test ecx ecx +
jz loc_101647F  +
push 1  +
call ?DestroyAll@Element@DirectUI@@QAEJ_N@Z  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_101648C  +
call ?FlushWorkingSet@HWNDElement@DirectUI@@QAEXXZ  +
lea ecx [ebp-1Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
cmp byte ptr [esi+4] 0 +
jz loc_101654D  +
push dword ptr [esi+8]  +
mov ecx [esi+24h] +
call ?EndDefer@Element@DirectUI@@QAEXK@Z  +
call EnableAnimations  +
mov byte ptr [esi+4] 0 +
jmp loc_101654D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_1016501  +
cmp byte ptr [esi+4] 0 +
jnz loc_101654D  +
mov byte ptr [esi+4] 1 +
call DisableAnimations  +
mov ecx [esi+24h] +
lea eax [esi+8] +
push eax  +
call ?StartDefer@Element@DirectUI@@QAEXPAK@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionpaneRen  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx [esi+4] +
push 8000FFFFh  +
push dword ptr [esi+50h]  +
lea eax [ebp-30h] +
push dword ptr [esi+4Ch]  +
mov [ebp-10h] ebx +
push dword ptr [esi+48h]  +
push ebx  +
push eax  +
call sub_100D4B3  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-20h] +
call edi  +
test eax eax +
jl loc_1068DE7  +
mov ecx [esi+48h] +
call sub_1016387  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call edi  +
test eax eax +
jl loc_1068E10  +
mov ecx [esi+4Ch] +
call sub_1016387  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call edi  +
test eax eax +
jl loc_1068E39  +
mov ecx [esi+50h] +
call sub_1016387  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call edi  +
test eax eax +
jl loc_1068E62  +
push 1  +
mov ecx ebx +
call sub_1016523  +
mov ecx ebx +
call sub_101643B  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call edi  +
mov ebx offset dword_1016330 +
test eax eax +
jl loc_1068E8B  +
mov ecx [esi+48h] +
call sub_1016719  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call edi  +
test eax eax +
jl loc_1068EBB  +
mov ecx [esi+4Ch] +
call sub_1016719  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call edi  +
test eax eax +
jl loc_1068EDD  +
mov ecx [esi+50h] +
call sub_1016719  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call edi  +
test eax eax +
jl loc_1068EFF  +
mov ecx [ebp-10h] +
test ecx ecx +
jz loc_10166CD  +
push 0  +
call sub_1016523  +
lea ecx [ebp-20h] +
call edi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-3Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionpanes_0  +
lea ecx [ebp-3Ch] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov al [esi+30h] +
mov ebx ds:?ToHr@SC@mmcerror@@QBEJXZ +
mov [esi+34h] edi +
test al al +
jz loc_1069431  +
mov eax [esi+2Ch] +
mov eax [eax-8] +
cmp eax edi +
mov byte ptr [ebp-0Dh] 1 +
jg loc_101676A  +
mov byte ptr [ebp-0Dh] 0 +
cmp byte ptr [esi+31h] 0 +
jnz loc_101752C  +
cmp byte ptr [ebp-0Dh] 0 +
jnz loc_101752C  +
lea ecx [ebp-3Ch] +
call ebx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
dec eax  +
jnz loc_10188D9  +
mov esi [ecx+48h] +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ecx+2Ch] +
push ebx  +
xor ebx ebx +
neg eax  +
sbb eax eax +
mov [ebp+var_C] 0FFFFh +
mov [ebp+var_4] ebx +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_101687F  +
push esi  +
lea esi [ecx+20h] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call ?GetNextAssoc@CMapWordToPtr@@QBEXAAPAU__POSITION@@AAGAAPAX@Z  +
mov ecx [ebp+var_4] +
cmp ecx ebx +
jz loc_1016879  +
call sub_1044DCF  +
test al al +
jnz loc_1044D9F  +
cmp [ebp+var_8] ebx +
jnz loc_1016852  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn   +
***
mov eax offset off_1017504 +
retn   +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCdirectuiren_1  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
movzx eax word ptr [edi+34h] +
mov ecx [ebp+8] +
push eax  +
mov [ebp-18h] ebx +
mov [ebp-10h] ebx +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jl loc_106A1E8  +
push 80070057h  +
push dword ptr [edi+18h]  +
lea eax [ebp-3Ch] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_100CB6E  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jl loc_106A21C  +
mov ecx [edi+18h] +
lea eax [ebp-10h] +
push eax  +
push ebx  +
push dword ptr [ebp-14h]  +
push ebx  +
push off_10F8D84  +
call ?CreateElement@DUIXmlParser@DirectUI@@QAEJPBGPAVElement@2@1PAKPAPAV32@@Z  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jl loc_106A242  +
mov eax [edi+40h] +
cmp eax ebx +
jz loc_106A268  +
push dword ptr [edi+44h]  +
mov ecx [ebp-10h] +
push eax  +
call sub_1017877  +
movzx eax word ptr [edi+36h] +
mov ecx [ebp-10h] +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov [ebp+8] eax +
cmp eax ebx +
jz loc_106A299  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea ecx [ebp+14h] +
push ecx  +
push eax  +
call ?VisibleProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push ebx  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jl loc_106A2AC  +
cmp [edi+0Ch] bl +
jnz loc_106A2D5  +
movzx eax word ptr [edi+2Ch] +
mov ecx [ebp-10h] +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
cmp eax ebx +
jz loc_106A299  +
push ebx  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push ebx  +
push ebx  +
push eax  +
call ?ContentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push 2  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jl loc_106A331  +
mov eax [ebp+18h] +
and eax 20h +
mov [ebp-1Ch] eax +
jnz loc_106A35A  +
lea ecx [ebp-50h] +
call sub_100AD56  +
push 0FFh  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 3 +
call sub_1016345  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jl loc_106A419  +
mov eax [ebp-1Ch] +
neg eax  +
sbb eax eax +
not eax  +
and eax [ebp-4Ch] +
mov ecx edi +
push eax  +
push dword ptr [ebp-4Ch]  +
xor eax eax +
cmp [ebp+14h] bl +
setz al  +
dec eax  +
and eax 0FFFFFFE0h +
add eax 2Bh +
push eax  +
push dword ptr [ebp-10h]  +
call sub_100D4ED  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jl loc_106A44D  +
mov ecx [ebp+18h] +
mov eax ecx +
shr eax 5 +
and eax 1 +
mov [ebp+14h] ecx +
and dword ptr [ebp+14h] 40h +
jnz loc_1016BCA  +
test cl cl +
js loc_1016BCA  +
xor ecx ecx +
or eax ecx +
mov [ebp+0Ch] eax +
jnz loc_106A473  +
movzx eax word ptr [edi+2Eh] +
mov ecx [ebp-10h] +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
push 80070057h  +
push eax  +
mov [ebp+0Ch] eax +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jl loc_106A4CE  +
cmp [ebp+14h] ebx +
jnz loc_106A52E  +
test byte ptr [ebp+18h] 80h +
jnz loc_106A534  +
cmp [ebp+10h] ebx +
jz loc_1016B7E  +
push ebx  +
push dword ptr [ebp+10h]  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [ebp+0Ch]  +
call ?ContentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push 3  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_106A4F7  +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jl loc_106A505  +
push dword ptr [ebp-10h]  +
mov ecx [ebp-14h] +
call ?Add@Element@DirectUI@@QAEJPAV12@@Z  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jl loc_106A600  +
mov eax [ebp-10h] +
mov [ebp-18h] eax +
lea ecx [ebp-50h] +
mov [ebp-4] bl +
call sub_100A77D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
call sub_1001FCF  +
retn 14h  +
push 10h  +
pop ecx  +
jmp loc_1016AD1  +
***
mov eax dword_10F53E8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-4] +
push eax  +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
test eax eax +
jz loc_1016C88  +
test dword ptr [eax] 0FFFFFFFh +
jbe loc_1016C88  +
push esi  +
push edi  +
push 0  +
mov ecx eax +
call sub_10170E8  +
mov esi [eax] +
mov ecx esi +
call ?GetDesiredSize@Element@DirectUI@@QAEPBUtagSIZE@@XZ  +
mov edi eax +
test esi esi +
jz loc_1016C86  +
mov eax [ebp+0Ch] +
sub eax [edi+4] +
mov ecx esi +
push eax  +
push 0  +
call ?_UpdateLayoutPosition@Element@DirectUI@@QAEXHH@Z  +
push dword ptr [edi+4]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call ?_UpdateLayoutSize@Element@DirectUI@@QAEXHH@Z  +
pop edi  +
pop esi  +
mov ecx [ebp-4] +
test ecx ecx +
jz locret_1016C95  +
call ?Release@Value@DirectUI@@QAEXXZ  +
leave   +
retn 8  +
***
mov eax dword_10F53EC +
retn   +
***
jmp ?OnPropertyChanging@Element@DirectUI@@UAE_NPBUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ?OnGroupChanged@Element@DirectUI@@UAEXH_N@Z  +
***
jmp ?Add@Element@DirectUI@@UAEJPAPAV12@I@Z  +
***
jmp ?Insert@Element@DirectUI@@UAEJPAPAV12@II@Z  +
***
jmp ?OnHosted@Element@DirectUI@@MAEXPAV12@@Z  +
***
jmp ?HandleUiaPropertyListener@Element@DirectUI@@UAEXPBUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ?HandleUiaPropertyChangingListener@Element@DirectUI@@UAEXPBUPropertyInfo@2@@Z  +
***
jmp ?IsSubclassOf@ClassInfoBase@DirectUI@@UBE_NPAUIClassInfo@2@@Z  +
***
jmp ?OnPropertyChanged@Element@DirectUI@@UAEXPBUPropertyInfo@2@HPAVValue@2@1@Z  +
***
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1016D2F  +
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+10h] +
and dword ptr [edi] 0 +
call sub_10178F0  +
mov esi eax +
test esi esi +
jz loc_1016D6A  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_1016D76  +
mov ebx eax +
test ebx ebx +
jl loc_106A75A  +
mov [edi] esi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov ebx 8007000Eh +
jmp loc_1016D61  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
call ?Initialize@Button@DirectUI@@QAEJIPAVElement@2@PAK@Z  +
pop ebp  +
retn 8  +
***
mov ecx [ebp-14h] +
push 0  +
push 1  +
push dword ptr [ebp-18h]  +
call sub_1016E41  +
push eax  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-3Ch] +
call ebx  +
test eax eax +
jl loc_1069555  +
cmp byte ptr [esi+24h] 0 +
jnz loc_1016DE3  +
push 0  +
lea ecx [ebp-3Ch] +
call ds:??8SC@mmcerror@@QBE_NJ@Z  +
test al al +
jz loc_1016DE3  +
mov byte ptr [esi+24h] 1 +
jmp loc_1016DE3  +
mov eax [ebp+edi*4-28h] +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
lea ecx [esi+4] +
call ?Lookup@CMapWordToPtr@@QBEHGAAPAX@Z  +
test eax eax +
jnz loc_1016D8D  +
inc edi  +
cmp edi 3 +
jl loc_1016DCE  +
xor edi edi +
mov eax [ebp+edi*4-28h] +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
lea ecx [esi+4] +
call ?Lookup@CMapWordToPtr@@QBEHGAAPAX@Z  +
test eax eax +
jnz loc_1016E0B  +
inc edi  +
cmp edi 3 +
jl loc_1016DEB  +
jmp loc_101677E  +
mov ecx [ebp-14h] +
push 1  +
push 0  +
push dword ptr [ebp-18h]  +
call sub_1016E41  +
push eax  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-3Ch] +
call ebx  +
test eax eax +
jl loc_10695A5  +
cmp byte ptr [esi+24h] 0 +
jnz loc_1016E00  +
jmp loc_1069589  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionpanezon  +
lea ecx [ebp-28h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+8]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jl loc_1068F7E  +
mov eax [ebp-10h] +
mov ebx 8000FFFFh +
push ebx  +
push dword ptr [eax+44h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jl loc_1068FA7  +
mov eax [ebp-10h] +
mov eax [eax+3Ch] +
push ebx  +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jl loc_1068FD0  +
mov eax [ebp-10h] +
mov ecx [eax+44h] +
call sub_10174DF  +
push ebx  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jl loc_1068FF9  +
and dword ptr [ebp-14h] 0 +
cmp byte ptr [ebp+0Ch] 0 +
mov ebx [ebp-10h] +
jz loc_1016FD0  +
mov esi [ebx+8] +
test esi esi +
jz loc_1016FD0  +
mov eax esi +
mov ecx [eax+8] +
mov esi [esi] +
mov [ebp-14h] ecx +
test ecx ecx +
jz loc_1016FD0  +
push dword ptr [ebp+8]  +
call sub_101710C  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jl loc_106901F  +
mov byte ptr [ebx+40h] 1 +
jmp loc_1016F69  +
cmp byte ptr [ebp+10h] 0 +
jz loc_1017028  +
mov ecx ebx +
call sub_101682B  +
test al al +
jz loc_1017028  +
xor esi esi +
cmp dword_10F9940 esi +
jbe loc_1017028  +
lea eax unk_10F5C88[esi*4] +
cmp dword ptr [eax] 0 +
jz loc_1044E26  +
movzx eax word ptr [eax] +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
lea ecx [ebx+20h] +
call ?Lookup@CMapWordToPtr@@QBEHGAAPAX@Z  +
test eax eax +
jz loc_101701F  +
mov ecx [ebp-14h] +
call sub_1044DCF  +
test al al +
jnz loc_1044DA6  +
inc esi  +
cmp esi dword_10F9940 +
jb loc_1016FEB  +
lea ecx [ebp-28h] +
call edi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi [ebp+8] +
xor ebx ebx +
lea eax [ebp-4] +
push eax  +
mov [ebp-4] ebx +
mov [esi] ebx +
mov [esi+4] ebx +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
cmp eax ebx +
jz loc_10170CE  +
test dword ptr [eax] 0FFFFFFFh +
jbe loc_10170CE  +
push edi  +
push ebx  +
mov ecx eax +
call sub_10170E8  +
mov eax [eax] +
mov edi [ebp+0Ch] +
cmp [ebp+14h] ebx +
jz loc_10170B9  +
cmp eax ebx +
jz loc_10170B9  +
push dword ptr [ebp+14h]  +
lea ecx [ebp-0Ch] +
push 7FFFFFFFh  +
push edi  +
push ecx  +
mov ecx eax +
call ?_UpdateDesiredSize@Element@DirectUI@@QAE?AUtagSIZE@@HHPAVSurface@2@@Z  +
mov ecx [eax] +
mov eax [eax+4] +
mov [esi] ecx +
mov [esi+4] eax +
cmp [esi] edi +
jg loc_106A79D  +
mov eax [ebp+10h] +
cmp [esi+4] eax +
pop edi  +
jg loc_106A7A4  +
mov ecx [ebp-4] +
cmp ecx ebx +
jz loc_10170DB  +
call ?Release@Value@DirectUI@@QAEXXZ  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test dword ptr [ecx] 10000000h +
jz loc_1017102  +
mov eax [ecx+4] +
mov ecx [ebp+arg_0] +
lea eax [eax+ecx*4] +
pop ebp  +
retn 4  +
lea eax [ecx+4] +
jmp loc_10170F8  +
***
call sub_1001F95  +
mov ebx ecx +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionpanetas  +
lea ecx [ebp-28h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+8]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jl loc_10698BC  +
push 8000FFFFh  +
push dword ptr [ebx+74h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jl loc_10698E5  +
mov ecx [ebx+74h] +
call sub_1016822  +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jl loc_106990E  +
mov ecx [ebp-14h] +
call sub_10174DF  +
push 8000FFFFh  +
push eax  +
mov [ebp-10h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jl loc_1069937  +
cmp byte ptr [ebx+4Ch] 0 +
jnz loc_1044E52  +
mov eax [ebx+5Ch] +
mov ecx eax +
shr ecx 8 +
test cl 1 +
jnz loc_1069960  +
mov ecx eax +
shr ecx 1 +
test cl 1 +
jnz loc_1017314  +
cmp byte ptr [ebx+68h] 0 +
jnz loc_1017314  +
xor cl cl +
mov edx [ebx+28h] +
push eax  +
push ecx  +
mov ecx ebx +
mov [ebp-14h] edx +
call sub_10174C8  +
mov ecx [ebp-10h] +
push eax  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp+8]  +
call sub_1016894  +
push 8000FFFFh  +
push eax  +
mov [ebp+8] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jl loc_1069973  +
mov eax [ebp+8] +
mov [ebx+50h] eax +
mov eax [ebx+5Ch] +
shr eax 8 +
test al 1 +
jnz loc_106999C  +
lea ecx [ebp-28h] +
call edi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
xor ecx ecx +
inc ecx  +
jmp loc_101725D  +
***
mov eax [edi+4] +
and eax 3 +
cmp eax [ebp+0Ch] +
jnz loc_1017373  +
cmp byte ptr [esi+78h] 0 +
jz loc_1017373  +
jmp loc_106A821  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push dword ptr [ebp+14h]  +
mov edi [ebp+8] +
push dword ptr [ebp+10h]  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
push edi  +
call ?OnPropertyChanged@Element@DirectUI@@UAEXPBUPropertyInfo@2@HPAVValue@2@1@Z  +
push ?SelectedProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push edi  +
call sub_10178D5  +
test al al +
jnz loc_1017379  +
push ?ExtentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push edi  +
call sub_10178D5  +
test al al +
jnz loc_101731C  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov eax [edi+4] +
and eax 3 +
cmp eax [ebp+0Ch] +
jnz loc_1017363  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
test eax eax +
jnz loc_106A7D4  +
mov ecx [ebp+0Ch] +
test ecx ecx +
jz loc_1017373  +
call ?Release@Value@DirectUI@@QAEXXZ  +
jmp loc_1017373  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10173B9  +
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+10h] +
and dword ptr [edi] 0 +
call sub_101794F  +
mov esi eax +
test esi esi +
jz loc_10173F4  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_1017400  +
mov ebx eax +
test ebx ebx +
jl loc_106A78E  +
mov [edi] esi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov ebx 8007000Eh +
jmp loc_10173EB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 2  +
call ?Initialize@Element@DirectUI@@QAEJIPAV12@PAK@Z  +
mov edi eax +
test edi edi +
jl loc_1017439  +
mov eax 80h +
push eax  +
push eax  +
mov ecx esi +
call ?GetDisplayNode@Element@DirectUI@@QAEPAUHGADGET__@@XZ  +
push eax  +
call ds:SetGadgetStyle  +
test eax eax +
jz loc_1017439  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1017453  +
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+10h] +
and dword ptr [edi] 0 +
call sub_10179A0  +
mov esi eax +
test esi esi +
jz loc_101748E  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_101749A  +
mov ebx eax +
test ebx ebx +
jl loc_106A7C5  +
mov [edi] esi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov ebx 8007000Eh +
jmp loc_1017485  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
push 0  +
call ?Initialize@Element@DirectUI@@QAEJIPAV12@PAK@Z  +
test eax eax +
jl loc_10174BE  +
push 1  +
mov ecx esi +
call ?SetSelected@Element@DirectUI@@QAEJ_N@Z  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax [ecx+20h] +
test eax eax +
jz loc_10174D7  +
push eax  +
call ds:CopyIcon  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push esi  +
mov esi [ecx+4] +
test esi esi +
jz loc_10174FD  +
push offset off_1017504  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_1068964  +
mov eax esi +
pop esi  +
retn   +
***
push 8000FFFFh  +
push dword ptr [esi+28h]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ebx  +
test eax eax +
jl loc_1069475  +
mov ecx [esi+28h] +
call sub_10174DF  +
push 8000FFFFh  +
push eax  +
mov [ebp-1Ch] eax +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ebx  +
test eax eax +
jl loc_106949E  +
movzx ecx byte ptr [esi+32h] +
mov eax [esi+20h] +
push ecx  +
mov ecx [ebp-1Ch] +
push eax  +
call sub_1017621  +
push 8000FFFFh  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ebx  +
test eax eax +
jl loc_10694C7  +
cmp byte ptr [ebp-0Dh] 0 +
mov eax [ebp-18h] +
mov [esi+34h] eax +
jnz loc_10694F0  +
and dword ptr [ebp-14h] 0 +
mov dword ptr [ebp-28h] 1 +
mov dword ptr [ebp-24h] 3 +
mov dword ptr [ebp-20h] 4 +
xor edi edi +
jmp loc_1016DCE  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCdirectuiren_4  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [esi+18h]  +
lea eax [ebp-38h] +
push dword ptr [ebp+8]  +
mov [ebp-14h] ebx +
push dword ptr [esi+24h]  +
mov [ebp-10h] ebx +
push eax  +
call sub_100CB6E  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-28h] +
call edi  +
cmp eax ebx +
jl loc_1069FFF  +
cmp [esi+28h] ebx +
jz loc_104245A  +
mov ecx [esi+18h] +
lea eax [ebp-10h] +
push eax  +
push ebx  +
push dword ptr [esi+28h]  +
push ebx  +
push off_10F8D80  +
call ?CreateElement@DUIXmlParser@DirectUI@@QAEJPBGPAVElement@2@1PAKPAPAV32@@Z  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call edi  +
cmp eax ebx +
jl loc_106A06D  +
mov eax [esi+3Ch] +
cmp eax ebx +
jz loc_106A093  +
push dword ptr [esi+44h]  +
mov ecx [ebp-10h] +
push eax  +
call sub_1017877  +
movzx eax word ptr [esi+2Ch] +
mov ecx [ebp-10h] +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov [ebp-18h] eax +
cmp eax ebx +
jz loc_106A0C4  +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
push ebx  +
push ebx  +
push eax  +
call ?ContentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push 2  +
mov ecx esi +
call sub_100D704  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call edi  +
cmp eax ebx +
jl loc_106A0D7  +
mov ecx [ebp-18h] +
call ?GetParent@Element@DirectUI@@QAEPAV12@XZ  +
mov [ebp-18h] eax +
cmp eax ebx +
jz loc_106A152  +
push dword ptr [ebp+8]  +
mov ecx esi +
push dword ptr [ebp+8]  +
push 40h  +
push eax  +
call sub_100D4ED  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call edi  +
cmp eax ebx +
jl loc_106A100  +
xor eax eax +
cmp [ebp+0Ch] bl +
push ebx  +
setz al  +
push ebx  +
push ebx  +
dec eax  +
and eax 0FFFFFE00h +
add eax 400h +
mov [ebp+8] eax +
lea eax [ebp+8] +
push eax  +
push ebx  +
push dword ptr [ebp-18h]  +
call ?AccStateProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push 1  +
mov ecx esi +
call sub_100D704  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call edi  +
cmp eax ebx +
jl loc_106A129  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp-10h]  +
call ?SelectedProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push ebx  +
mov ecx esi +
call sub_100D704  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call edi  +
cmp eax ebx +
jl loc_106A196  +
push dword ptr [ebp-10h]  +
mov ecx [esi+28h] +
call ?Add@Element@DirectUI@@QAEJPAV12@@Z  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call edi  +
cmp eax ebx +
jl loc_106A1BF  +
mov eax [ebp-10h] +
mov [ebp-14h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-14h] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+7Ch] eax +
mov eax [ebp+arg_4] +
mov [ecx+80h] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push dword ptr [ebp+14h]  +
mov edi [ebp+8] +
push dword ptr [ebp+10h]  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
push edi  +
call ?OnPropertyChanged@Button@DirectUI@@UAEXPBUPropertyInfo@2@HPAVValue@2@1@Z  +
cmp dword ptr [ebp+14h] 0 +
jz loc_10178CA  +
push ?MouseWithinProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push edi  +
call sub_10178D5  +
test al al +
jnz loc_106A729  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call [ebp+arg_4]  +
xor ecx ecx +
cmp [ebp+arg_0] eax +
setz cl  +
mov al cl +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
push 84h  +
call sub_100D68D  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_101791D  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_101792A  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0Button@DirectUI@@QAE@XZ  +
and dword ptr [esi+7Ch] 0 +
and dword ptr [esi+80h] 0 +
mov dword ptr [esi] offset off_1015C44 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
push 78h  +
call sub_100D68D  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_1017979  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1017986  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0Element@DirectUI@@QAE@XZ  +
mov dword ptr [esi] offset off_1015DAC +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
push 84h  +
call sub_100D68D  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_10179CD  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_10179DA  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0Element@DirectUI@@QAE@XZ  +
xor eax eax +
mov [esi+78h] al +
mov [esi+7Ch] eax +
mov [esi+80h] eax +
mov dword ptr [esi] offset off_1015E9C +
mov eax esi +
pop esi  +
retn   +
***
mov ebx 8000FFFFh +
push ebx  +
push dword ptr [esi+28h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call edi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
test eax eax +
jl loc_106971F  +
mov ecx [esi+28h] +
call sub_10174DF  +
push ebx  +
push eax  +
mov [ebp-10h] eax +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
test eax eax +
jl loc_1069753  +
mov ecx [ebp-10h] +
lea eax [esi+32h] +
push eax  +
push dword ptr [esi+34h]  +
call sub_1017A94  +
jmp loc_10163BB  +
***
call sub_1001F95  +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCdirectuiren_5  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+8]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-1Ch] +
call esi  +
test eax eax +
jl loc_1069B96  +
mov ecx [ebp+8] +
push 0  +
push 1  +
push ?SelectedProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
call ?GetValue@Element@DirectUI@@QAEPAVValue@2@P6GPBUPropertyInfo@2@XZHPAUUpdateCache@2@@Z  +
mov edi eax +
test edi edi +
jz loc_1069BCA  +
mov ecx edi +
call ?GetBool@Value@DirectUI@@QAE_NXZ  +
mov ecx [ebp+0Ch] +
mov [ecx] al +
mov ecx edi +
call ?Release@Value@DirectUI@@QAEXXZ  +
lea ecx [ebp-1Ch] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push edi  +
mov edi ecx +
lea eax [edi+4] +
mov ebx [eax] +
dec ebx  +
mov [ebp+var_C] edi +
mov [ebp+var_4] ebx +
test bl 3 +
jnz loc_1017BBD  +
xor ebx ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] eax +
mov ecx [ebp+var_8] +
mov edx [ebp+var_4] +
mov eax [ecx] +
cmpxchg [ecx] edx +
jnz loc_1017BC8  +
test ebx ebx +
jnz loc_1017BFA  +
push esi  +
pause   +
mov esi [edi] +
lea eax [esi-10000h] +
and eax 0FFFF0000h +
mov [ebp+var_8] esi +
mov [ebp+var_4] eax +
mov ecx [ebp+var_C] +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
cmpxchg [ecx] edx +
cmp esi eax +
jnz loc_1017BD3  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
lea ebx [edi+4] +
mov eax [ebx] +
mov [ebp+var_C] edi +
test eax eax +
jnz loc_1017C6B  +
mov esi [edi] +
mov eax 0FFFFh +
mov [ebp+var_4] esi +
test esi eax +
jnz loc_1017C6B  +
lea ecx [esi+10000h] +
or ecx eax +
mov [ebp+var_8] ecx +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
cmpxchg [ecx] edx +
cmp esi eax +
jnz loc_1017C6B  +
call ds:GetCurrentThreadId  +
and eax 0FFFFFFFDh +
or eax 1 +
mov [ebp+var_C] eax +
mov [ebp+var_8] ebx +
mov ecx [ebp+var_8] +
mov edx [ebp+var_C] +
mov eax [ecx] +
cmpxchg [ecx] edx +
jnz loc_1017C60  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov ecx edi +
call sub_106F635  +
jmp loc_105701C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+2Ch] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_1019CDB  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_1017D03  +
***
call sub_1001F95  +
mov edi ecx +
cmp dword ptr [edi+8] 3FFFFFFEh +
jnb loc_105C1B3  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_1017D73  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jz loc_1017CA2  +
cmp byte ptr [ebp+0Ch] 0 +
jnz loc_104FE0B  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_1017D06  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
mov ecx [eax] +
cmp byte ptr [ecx+10h] 0 +
jnz loc_1017D57  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jz loc_105C1DE  +
mov edx [edx] +
cmp byte ptr [edx+10h] 0 +
jz loc_1018B7A  +
cmp esi [ecx] +
jz loc_105C21D  +
mov eax [esi+4] +
mov byte ptr [eax+10h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+10h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1019199  +
lea eax [esi+4] +
jmp loc_1017D0B  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+10h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0  +
push 1  +
mov edi ecx +
call sub_100AB46  +
push [ebp+arg_10]  +
mov esi eax +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_1017DAB  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1017DCB  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1017DD4  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov ecx [ecx] +
mov [eax+0Ch] ecx +
mov cl [ebp+arg_10] +
mov [eax+10h] cl +
mov byte ptr [eax+11h] 0 +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_105AD7E  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset stru_100BB94  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jl loc_105AD77  +
push [ebp+arg_0]  +
call sub_100CA34  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx+8] +
mov ecx [ecx] +
cmp ecx eax +
jz loc_10183B8  +
xor edx edx +
cmp [ecx] eax +
setz dl  +
mov eax edx +
retn   +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamctreeviewOn  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
inc dword ptr [eax+14h]  +
push dword ptr [ebp+8]  +
lea eax [ebp-34h] +
push offset loc_101187F  +
push eax  +
lea ecx [esi+4Ch] +
mov byte ptr [ebp-4] 1 +
call sub_100FB75  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10649CA  +
cmp [esi+84h] ebx +
jz loc_1017F4F  +
lea edi [esi+94h] +
push edi  +
lea ecx [ebp+8] +
call sub_10183E9  +
mov byte ptr [ebp-4] 3 +
cmp [ebp+8] ebx +
jz loc_1017F3E  +
lea ecx [ebp+8] +
mov [ebp-14h] ebx +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
call dword ptr [ecx+54h]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
cmp [ebp-14h] ebx +
jz loc_1017F3E  +
mov ecx edi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov ecx edi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+68h]  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1017F4F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-0Dh] +
mov [ebp-4] bl +
call ds:??1?$CEventLock@UAppEvents@@@@QAE@XZ  +
mov [esi+84h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+30h] +
dec eax  +
jnz loc_106545D  +
push 0  +
mov ecx [ecx+70h] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ds:free  +
pop ecx  +
mov al 1 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi] ebx +
jz loc_101801C  +
cmp [esi+4] ebx +
jbe loc_101801C  +
push edi  +
mov eax [esi] +
mov edi [eax+ebx*4] +
test edi edi +
jnz loc_101803A  +
inc ebx  +
cmp ebx [esi+4] +
jb loc_101800A  +
xor ebx ebx +
pop edi  +
push dword ptr [esi]  +
call sub_100F30B  +
pop ecx  +
mov ecx [esi+10h] +
mov [esi] ebx +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
call ?FreeDataChain@CPlex@@QAEXXZ  +
mov [esi+10h] ebx +
pop esi  +
pop ebx  +
retn   +
push 1  +
lea eax [edi+8] +
push eax  +
call sub_101804E  +
mov edi [edi] +
jmp loc_101800F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
jle loc_101806D  +
mov eax [ebp+arg_0] +
push dword ptr [eax+esi*4]  +
call ??3@YAXPAX@Z  +
inc esi  +
cmp esi [ebp+arg_4] +
pop ecx  +
jl loc_101805B  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
jz loc_101808F  +
mov eax [esi] +
cmp dword ptr [eax+28h] 1 +
jz loc_105F906  +
xor bl bl +
mov eax [esi+8] +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_10180C8  +
xor eax eax +
push eax  +
push 0FFFFFFFFh  +
mov ecx esi +
call sub_10180D7  +
test bl bl +
jnz loc_105F917  +
mov ecx esi +
call sub_1017E4C  +
test eax eax +
jz loc_10180CD  +
xor eax eax +
push eax  +
push 1  +
mov ecx esi +
call sub_10180D7  +
pop esi  +
pop ebx  +
retn   +
xor eax eax +
inc eax  +
jmp loc_101809C  +
xor eax eax +
inc eax  +
jmp loc_10180BB  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aChistorylistUp  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+10h] +
cmp eax ebx +
jz loc_105F8A5  +
mov ecx [eax+32Ch] +
cmp ecx ebx +
jz loc_105F8A5  +
cmp dword ptr [ebp+8] 0FFFFFFFFh +
jz loc_10181B2  +
cmp [ebp+8] ebx +
jz loc_105F8B8  +
cmp dword ptr [ebp+8] 1 +
jnz loc_1018166  +
cmp [ebp+0Ch] ebx +
setnz al  +
movzx eax al +
push eax  +
push 3451h  +
lea eax [ebp-2Ch] +
push eax  +
call sub_10181E2  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
cmp [ebp+0Ch] ebx +
setnz al  +
movzx eax al +
push eax  +
push 3450h  +
lea eax [ebp-4Ch] +
push eax  +
call sub_10181E2  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-4Ch] +
jmp loc_101815D  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
cmp dword ptr [esi+14h] 0 +
mov [ebp-4] ebx +
jz loc_106288C  +
movzx edx byte ptr [ebp+10h] +
mov ecx [esi+14h] +
mov eax [ecx] +
push edx  +
push 4  +
push dword ptr [ebp+0Ch]  +
lea edx [ebp-30h] +
push esi  +
push edx  +
call dword ptr [eax+14h]  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+88h] +
cmp [esi] esi +
jnz sub_1054A1F  +
and dword ptr [edi+94h] 0 +
lea ecx [edi+8] +
pop edi  +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+75h] 0 +
jz loc_10182B0  +
lea ecx [esi+18h] +
call sub_1017C03  +
push 1  +
mov ecx esi +
call sub_10182D1  +
cmp byte ptr [esi+75h] 0 +
jz loc_1057058  +
lea ecx [esi+18h] +
pop esi  +
jmp sub_1017B9B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+14h] ebx +
jnz loc_1018362  +
push edi  +
lea eax [esi+60h] +
push ebx  +
push eax  +
call ds:InterlockedExchangeAdd  +
test eax eax +
jnz loc_1065832  +
xor edi edi +
cmp [esi+64h] ebx +
jbe loc_1018328  +
mov ecx [esi+34h] +
mov eax edi +
shr eax cl +
mov ecx [esi+54h] +
push dword ptr [ecx+eax*4]  +
mov ecx esi +
call sub_1017FB7  +
mov ecx [esi+34h] +
mov eax edi +
shr eax cl +
mov ecx [esi+54h] +
mov [ecx+eax*4] ebx +
add edi [esi+38h] +
cmp edi [esi+64h] +
jb loc_10182FF  +
mov ecx esi +
call sub_101836D  +
xor ecx ecx +
push 3  +
inc ecx  +
cmp [ebp+arg_0] 0 +
pop edx  +
mov [esi+50h] ebx +
mov [esi+64h] ebx +
mov [esi+58h] ebx +
mov [esi+48h] ecx +
mov [esi+4Ch] edx +
pop edi  +
jz loc_1018362  +
mov eax [esi+30h] +
cmp eax ecx +
jnz loc_1065926  +
push 8  +
pop ebx  +
push ebx  +
push eax  +
mov ecx esi +
call sub_100F434  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+70h] +
mov eax [ecx] +
push 3  +
push dword ptr [esi+54h]  +
call dword ptr [eax+4]  +
and dword ptr [esi+54h] 0 +
and dword ptr [esi+5Ch] 0 +
mov al 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_10183B1  +
push eax  +
call sub_1017E07  +
test eax eax +
jl loc_105E7ED  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [eax] +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+4] eax +
and dword ptr [esi+8] 0 +
cmp edi [esi+4] +
jnz sub_1028E63  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_101840A  +
push eax  +
call sub_1018416  +
test eax eax +
jl loc_105AE0E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 0 +
push esi  +
jz loc_105AD96  +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx ebx +
test esi esi +
jl loc_105AD8F  +
push [ebp+arg_0]  +
call sub_100CA34  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push 4Ch  +
mov eax offset byte_10D7DE9 +
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-24h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewSconit  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi-74h] +
mov [ebp-14h] ecx +
call sub_101857B  +
cmp [ebp+0Ch] edi +
jz loc_10434F2  +
mov esi [esi+64h] +
push 9  +
xor eax eax +
pop ecx  +
lea edi [ebp-58h] +
stos   +
xor edi edi +
mov [ebp-58h] ebx +
mov [ebp-50h] edi +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10184D2  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105C18B  +
mov ecx [ebp-14h] +
lea eax [ebp-58h] +
push eax  +
push edi  +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push esi  +
push eax  +
call sub_101864F  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105C1A5  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewDesele  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea edi [esi+318h] +
mov eax [edi] +
cmp eax ebx +
jnz sub_105B894  +
mov eax [esi+0D8h] +
mov [ebp-10h] eax +
cmp [ebp+8] ebx +
jz loc_10185F9  +
mov ecx esi +
call sub_100C52C  +
test al al +
jnz loc_1054B17  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_10449C9  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScnoti  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi 80070057h +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105B64B  +
mov ebx [ebp+1Ch] +
test ebx ebx +
jz loc_105B660  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10186DE  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105B680  +
xor eax eax +
cmp [ebx+14h] eax +
jnz loc_10186FB  +
cmp [ebp+14h] al +
jnz loc_10187CB  +
cmp [ebx+4] eax +
jnz loc_10186FB  +
cmp [ebx] eax +
jz loc_10187CB  +
movzx ecx byte ptr [ebp+18h] +
mov edi [ebp+0Ch] +
mov eax [edi] +
push ebx  +
push ecx  +
xor ecx ecx +
cmp [ebp+14h] cl +
setz cl  +
dec ecx  +
and ecx 0FFFFFFF7h +
add ecx 9017h +
push ecx  +
push dword ptr [ebp+10h]  +
push edi  +
call dword ptr [eax+78h]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
cmp byte ptr [ebp+14h] 0 +
mov byte ptr [ebp-4] 3 +
jnz loc_1018746  +
cmp dword ptr [ebx+4] 0 +
jnz loc_1018785  +
cmp byte ptr [ebp+18h] 1 +
jz loc_1018746  +
cmp dword ptr [ebx+14h] 0 +
jnz loc_1018785  +
push ebx  +
push esi  +
push offset loc_1018B6B  +
lea eax [ebp-40h] +
push eax  +
lea ecx [esi+5Ch] +
call sub_1018BA4  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105B6D4  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
cmp [esi+17Ch] eax +
jz loc_10186FB  +
jmp loc_105B6A2  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [eax] +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+4] eax +
and dword ptr [esi+8] 0 +
cmp edi [esi+4] +
jnz sub_105F83D  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
mov edi ecx +
cmp dword ptr [edi+0Ch] 0 +
jz loc_101887D  +
mov eax [edi+8] +
push ebx  +
push esi  +
mov esi [eax] +
cmp esi eax +
jz loc_1018865  +
mov eax [esi] +
mov [ebp+var_4] eax +
cmp eax [edi+8] +
jnz loc_105F9DB  +
mov ebx [edi+0Ch] +
mov eax [edi+8] +
mov ecx [eax] +
sub ebx 64h +
mov [ebp+var_4] ecx +
test ebx ebx +
jg loc_105FA62  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn   +
***
cmp esi [edi+8] +
jz loc_1018865  +
jmp loc_1018857  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_10188B9  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+39h] 0 +
mov ebx ecx +
mov esi edi +
jz loc_105C47C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
dec eax  +
jz loc_10188EB  +
dec eax  +
jnz loc_1068933  +
mov esi [ecx+50h] +
jmp loc_1016816  +
mov esi [ecx+4Ch] +
jmp loc_1016816  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionpaneCle  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1016801  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
mov edi eax +
test edi edi +
jz loc_1068F2F  +
mov ecx edi +
call sub_101899D  +
lea ecx [ebp-1Ch] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ecx +
push offset word_100A5FC  +
lea ecx [esi+20h] +
call ??4CString@@QAEABV0@PBG@Z  +
push eax  +
lea ecx [esi+2Ch] +
call ??4CString@@QAEABV0@ABV0@@Z  +
mov eax [esi+10h] +
xor ebx ebx +
neg eax  +
sbb eax eax +
mov [ebp+var_4] ebx +
mov [ebp+var_8] eax +
mov [ebp+var_C] ebx +
cmp eax ebx +
jnz loc_102909B  +
mov [esi+24h] bl +
mov [esi+31h] bl +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push 50h  +
mov eax offset word_10D289A +
call sub_1001F95  +
mov ebx ecx +
mov [ebp-1Ch] ebx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-3Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCamcappSconres  +
lea ecx [ebp-3Ch] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10586DC  +
mov eax [ebx+24h] +
push 4  +
pop ebx  +
test eax eax +
jnz loc_10586F1  +
push edi  +
lea ecx [ebp-5Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov byte ptr [ebp-4] 3 +
mov dword ptr [ebp-10h] 2 +
push eax  +
lea ecx [ebp-3Ch] +
call esi  +
test byte ptr [ebp-10h] 8 +
mov [ebp-4] ebx +
jnz loc_105871E  +
mov dword ptr [ebp-4] 3 +
test [ebp-10h] bl +
jnz loc_1058730  +
test byte ptr [ebp-10h] 2 +
mov [ebp-4] edi +
jz loc_1018AB7  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-5Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1018AF3  +
push edi  +
lea ecx [ebp-5Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 6 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-5Ch] +
mov bl al +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jz loc_105874A  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-10h] edi +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov eax [ecx] +
jmp dword ptr [eax+24h]  +
***
mov eax [ecx] +
jmp dword ptr [eax+8]  +
***
mov byte ptr [ecx+10h] 1 +
mov byte ptr [edx+10h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+10h] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_1017D52  +
***
mov eax [ecx] +
jmp dword ptr [eax+18h]  +
***
call sub_1001F95  +
mov ebx ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCeventsource_0  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-14h] ebx +
test ebx ebx +
jz loc_1018BE0  +
inc dword ptr [ebx+10h]  +
mov eax [ebx+8] +
mov esi [eax] +
mov byte ptr [ebp-4] 2 +
cmp esi eax +
jz loc_1018C71  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
cmp byte ptr [esi+0Ch] 0 +
jnz loc_1018C6A  +
push 8000FFFFh  +
push dword ptr [esi+8]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105EC72  +
push dword ptr [ebp+14h]  +
mov ecx [esi+8] +
push dword ptr [ebp+10h]  +
lea eax [ebp-44h] +
push eax  +
call dword ptr [ebp+0Ch]  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1018C71  +
mov esi [esi] +
cmp esi [ebx+8] +
jnz loc_1018BF7  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-14h] +
mov dword ptr [ebp-10h] 1 +
call sub_100E76D  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call ?Default@CWnd@@IAEJXZ  +
mov eax dword_10F5304 +
test eax eax +
jz locret_1018D18  +
mov byte ptr [eax+123h] 1 +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor eax eax +
mov edi ecx +
stos   +
stos   +
mov ax [ebp+arg_0] +
mov [ecx+2] ax +
mov ax [ebp+arg_4] +
mov [ecx+4] ax +
mov al [ebp+arg_8] +
mov [ecx] al +
mov eax ecx +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 416h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
push 421h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jz loc_102A1A8  +
mov eax [ecx+0Ch] +
sub eax edx +
push 6  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1018DB8  +
push esi  +
mov esi [ebp+arg_4] +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp esi [ebp+arg_8] +
jz loc_1018DEE  +
mov eax [ebp+arg_C] +
push edi  +
mov edi [eax] +
push edi  +
mov ecx esi +
call sub_100C7C5  +
test eax eax +
jz loc_1018DED  +
add esi 4 +
mov [ebp+arg_4] esi +
cmp esi [ebp+arg_8] +
jnz loc_1018DD6  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov eax [esi+0CCh] +
mov eax [eax] +
mov ebx [eax+0Ch] +
push eax  +
lea eax [ebp-24h] +
push eax  +
lea ecx [esi+0C8h] +
call sub_10191ED  +
mov eax [edi+4] +
mov [ebp-1Ch] eax +
jmp loc_1010106  +
***
mov [ebx+4] esi +
jmp loc_101922D  +
***
push 24h  +
mov eax offset byte_10D4E75 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCstandardtoo_3  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi 8000h +
cmp edi 8000h +
jz loc_1018EAB  +
cmp edi 8005h +
jz loc_1018EAB  +
push dword ptr [ebp+0Ch]  +
mov eax [esi] +
push edi  +
lea ecx [ebp-30h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_106292F  +
inc edi  +
cmp edi 8008h +
jle loc_1018E61  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 24h  +
mov eax offset byte_10E4FB1 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCstandardtoo_4  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [esi+10h] 0 +
jz loc_1062941  +
mov ecx [esi+10h] +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
add esi 0FFFFFFFCh +
push esi  +
lea edx [ebp-30h] +
push edx  +
call dword ptr [eax+24h]  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+arg_0] +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
movzx esi ax +
push edi  +
push esi  +
call ds:CharLowerW  +
push esi  +
movzx edi ax +
call ds:CharUpperW  +
push [ebp+arg_4]  +
movzx esi ax +
push [ebp+arg_0]  +
mov eax [ebp+arg_8] +
push edi  +
lea ecx [ebp+var_A] +
mov [ebp+var_4] eax +
call sub_1018D20  +
push eax  +
lea ecx [ebp+var_4] +
call sub_10190BD  +
cmp si di +
jz loc_10190B2  +
push [ebp+arg_4]  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
lea ecx [ebp+var_A] +
push esi  +
mov [ebp+var_4] eax +
call sub_1018D20  +
push eax  +
lea ecx [ebp+var_4] +
call sub_10190BD  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov ecx [esi] +
call sub_10190DB  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_100FA88  +
mov ecx esi +
mov edi eax +
call sub_1018D87  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jnb loc_102A775  +
push 1  +
push eax  +
call sub_1019118  +
mov [esi+8] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101913E  +
mov eax [ebp+arg_4] +
imul eax eax +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101916C  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_101918B  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1018DA3  +
dec [ebp+arg_4]  +
add [ebp+arg_0] 6 +
jmp loc_1019171  +
pop ebp  +
retn 18h  +
***
mov [ecx+4] eax +
jmp loc_10191CF  +
***
mov edi edi +
mov ecx [ebp-10h] +
jmp loc_1019255  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+11h] 0 +
jnz loc_1060E32  +
lea ecx [ebp+0Ch] +
call sub_1015931  +
mov edx [edi] +
cmp byte ptr [edx+11h] 0 +
jz loc_1060E64  +
mov ebx [edi+8] +
cmp byte ptr [ebx+11h] 0 +
mov esi [edi+4] +
jz loc_1018E1E  +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jz loc_1060E86  +
cmp [esi] edi +
jnz loc_102A22C  +
mov [esi] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_101925A  +
cmp byte ptr [ebx+11h] 0 +
jz sub_10191DD  +
mov eax esi +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jz loc_1060E8E  +
cmp byte ptr [edi+10h] 1 +
jnz loc_10192DB  +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_10192D7  +
cmp byte ptr [ebx+10h] 1 +
jnz loc_10192D7  +
mov eax [esi] +
cmp ebx eax +
jnz loc_1060F28  +
mov eax [esi+8] +
cmp byte ptr [eax+10h] 0 +
jz loc_102A213  +
cmp byte ptr [eax+11h] 0 +
jnz loc_10192AC  +
mov edx [eax] +
cmp byte ptr [edx+10h] 1 +
jnz loc_10192B3  +
mov edx [eax+8] +
cmp byte ptr [edx+10h] 1 +
jnz loc_10192B3  +
mov byte ptr [eax+10h] 0 +
mov ebx esi +
mov esi [esi+4] +
jmp loc_101926C  +
mov edx [eax+8] +
cmp byte ptr [edx+10h] 1 +
jz loc_1060F0D  +
mov dl [esi+10h] +
mov [eax+10h] dl +
mov byte ptr [esi+10h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+10h] 1 +
call sub_1019199  +
mov byte ptr [ebx+10h] 1 +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_10192F0  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1001FCF  +
retn 8  +
***
push 34h  +
mov eax offset dword_10E37A4 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewtool_1  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [esi+70h] 0 +
jnz loc_1051DA0  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1064274  +
push 8000FFFFh  +
push dword ptr [esi+68h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1064274  +
mov ebx [esi+30h] +
cmp ebx [esi+34h] +
jz loc_101948E  +
push 8000FFFFh  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10194BC  +
mov eax [ebp+0Ch] +
cmp [ebx+18h] eax +
jnz loc_1019453  +
test byte ptr [ebx+16h] 1 +
jz loc_1019453  +
xor ecx ecx +
cmp [ebp+10h] ecx +
jz loc_1028FC2  +
test byte ptr [ebx+14h] 8 +
jnz loc_1028FC2  +
mov eax [ebx+4] +
push ecx  +
mov ecx [esi+68h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
call sub_1027937  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10194BC  +
add ebx 54h +
jmp loc_10193BB  +
***
xor ebx ebx +
cmp [ebp+10h] ebx +
lea edi [esi-4] +
setz al  +
movzx eax al +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_10283A0  +
cmp [ebp+10h] ebx +
jz loc_1064286  +
push 1  +
push 1  +
mov ecx [esi+68h] +
call near ptr byte_1010B88+1  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+4] +
cmp byte ptr [eax+11h] 0 +
push edi  +
mov edi ecx +
mov byte ptr [ebp+var_4] 1 +
jnz loc_101952B  +
mov ecx [ebx] +
cmp ecx [eax+0Ch] +
mov edi eax +
setl byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jnz loc_1060B51  +
mov eax [eax+8] +
cmp byte ptr [eax+11h] 0 +
jz loc_101950F  +
cmp byte ptr [ebp+var_4] 0 +
mov ecx edi +
mov [ebp+arg_4] ecx +
jnz loc_101955F  +
mov eax [ecx+0Ch] +
cmp eax [ebx] +
jge loc_1019570  +
push ebx  +
push edi  +
push [ebp+var_4]  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_1017CB4  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
mov eax [esi+4] +
cmp edi [eax] +
jnz loc_1060B58  +
push ebx  +
push edi  +
push 1  +
jmp loc_1019542  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
jmp loc_1019556  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+uFlag]  +
mov eax 100h +
push eax  +
mov esi ecx +
mov ecx [ebp+arg_4] +
push eax  +
call ?GetBuffer@CString@@QAEPAGH@Z  +
push eax  +
push [ebp+uIDItem]  +
push dword ptr [esi+4]  +
call ds:GetMenuStringW  +
mov ecx [ebp+arg_4] +
push 0FFFFFFFFh  +
mov esi eax +
call ?ReleaseBuffer@CString@@QAEXH@Z  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
***
xor eax eax +
cmp dword_10F55CC 3 +
push esi  +
mov esi ecx +
ja loc_10196EA  +
push dword ptr [esi+20h]  +
call ds:GetMenu  +
push eax  +
call ?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z  +
test eax eax +
jz loc_10196EA  +
mov ecx [eax+4] +
mov [esi+164h] ecx +
mov ecx [esi+0D8h] +
test ecx ecx +
jz loc_10196E8  +
push eax  +
call sub_100FFC6  +
push 0  +
push dword ptr [esi+20h]  +
call ds:SetMenu  +
pop esi  +
retn   +
xor ecx ecx +
jmp loc_10196C7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx dword_10F5304 +
push edi  +
test ecx ecx +
jz loc_1019736  +
call sub_100C1C8  +
test al al +
jz loc_1019736  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
push 0Ch  +
call ?DefWindowProcW@CWnd@@MAEJIIJ@Z  +
mov edi eax +
movzx eax byte ptr [esi+16Ah] +
push eax  +
push esi  +
call sub_1019744  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
jmp loc_101971E  +
***
call sub_100C4D0  +
mov esi [ebp+8] +
call sub_100EBA3  +
test al al +
jz loc_105DD49  +
xor al al +
call sub_100C50D  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
jz loc_101978C  +
call sub_100FA40  +
mov ecx esi +
call sub_10197C0  +
mov eax dword_10F5304 +
test eax eax +
jz loc_101979C  +
mov byte ptr [eax+123h] 1 +
xor ecx ecx +
cmp dword ptr [ebp+8] 1 +
lea eax [esi+169h] +
movzx edx byte ptr [eax] +
setz cl  +
cmp edx ecx +
jnz loc_106046C  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push 228h  +
push dword ptr [ecx+0C0h]  +
call ds:SendMessageW  +
retn   +
***
push ecx  +
call sub_10197E6  +
jmp loc_1015962  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
cmp byte ptr [ecx+11h] 0 +
jz loc_10197FA  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_10197EE  +
***
push 2Ch  +
mov eax offset word_10E1B8A +
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCstandardtoo_5  +
lea ecx [ebp-28h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [esi+10h] ebx +
jz loc_1062996  +
mov ebx [ebp+10h] +
test ebx ebx +
jz loc_10629B6  +
mov eax [ebp+0Ch] +
cmp eax 8000h +
jz loc_104FFC2  +
cmp eax 8005h +
jz loc_104FFC2  +
mov [ebp+10h] eax +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [esi+18h] +
call sub_1019919  +
mov ecx [esi+1Ch] +
mov eax [ebp-18h] +
cmp ecx eax +
jz loc_10629B6  +
mov edi [eax+10h] +
mov eax [ebx] +
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-14h] +
push ecx  +
push 4  +
push dword ptr [ebp+0Ch]  +
mov [ebp+10h] edi +
push ebx  +
call dword ptr [eax+0Ch]  +
push dword ptr [ebp-14h]  +
mov ecx [esi+10h] +
mov edx [ecx] +
push 8  +
lea eax [esi-4] +
push edi  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call dword ptr [edx+14h]  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10198E8  +
cmp dword ptr [ebp-14h] 0 +
jz loc_10629C9  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_100FCDF  +
mov esi [esi+4] +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_101994D  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jl loc_101994D  +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
jmp loc_1019940  +
***
push 28h  +
mov eax offset byte_10D9399 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCstandardtoo_5  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [esi+10h] 0 +
jz loc_1062A14  +
mov eax [ebp+0Ch] +
mov [ebp+0Ch] eax +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea ecx [esi+18h] +
call sub_1019919  +
mov ecx [esi+1Ch] +
mov eax [ebp-14h] +
cmp ecx eax +
jz loc_1062A34  +
push dword ptr [ebp+14h]  +
mov eax [eax+10h] +
push dword ptr [ebp+10h]  +
mov ecx [esi+10h] +
mov edx [ecx] +
push eax  +
add esi 0FFFFFFFCh +
push esi  +
lea eax [ebp-34h] +
push eax  +
call dword ptr [edx+14h]  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1019A99  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jz loc_1019AB2  +
push esi  +
call sub_1019C5F  +
add esi 4 +
jmp loc_1019AA2  +
pop esi  +
pop ebp  +
retn 10h  +
***
cmp eax offset ??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call edi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1019BBA  +
cmp [ebp+8] ebx +
jz loc_10518BB  +
mov ecx [ebp+10h] +
cmp ecx ebx +
jnz loc_105EC84  +
mov byte ptr [ebp+10h] 1 +
push dword ptr [ebp+10h]  +
mov eax [esi+228h] +
push eax  +
push offset loc_101D071  +
lea ecx [ebp-2Ch] +
push ecx  +
lea ecx [eax+5Ch] +
call sub_1018BA4  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax dword_10F5304 +
cmp eax ebx +
jz loc_105EC9C  +
mov byte ptr [eax+123h] 1 +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1019BBA  +
push ebx  +
push dword ptr [ebp+8]  +
mov ecx esi +
push 9001h  +
call sub_1019C0B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+228h] 0 +
jz loc_1019C53  +
mov eax [esi+228h] +
lea ecx [eax+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
test eax eax +
jz loc_1019C53  +
mov ecx [esi+228h] +
mov ecx [ecx+0D8h] +
test ecx ecx +
jz loc_1019C53  +
push [ebp+arg_8]  +
mov edx [ecx] +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
push ecx  +
call dword ptr [edx+78h]  +
pop esi  +
pop ebp  +
retn 0Ch  +
mov eax 80004005h +
jmp loc_1019C4E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1019C77  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CString@@QAE@XZ  +
test [ebp+arg_0] 1 +
jnz loc_106073A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+4] +
call sub_100ED24  +
jmp loc_100E79B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push edi  +
mov edi [esi] +
cmp ecx edi +
jz loc_1019CD3  +
mov [esi] ecx +
test ecx ecx +
jnz loc_105AB02  +
test edi edi +
jz loc_1019CD3  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
test esi esi +
jz loc_1017C9A  +
lea ecx [esi+4] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_1017C9A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_1019D36  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_1016293  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+78h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1019D6C  +
test esi esi +
jz loc_1019D6C  +
lea ecx [esi+8] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [ebp+var_4] edi +
cmp [ebp+arg_4] edi +
jnz loc_1019DA0  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1019DA0  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105D2F0  +
cmp [esi+48h] edi +
jz loc_1019DA8  +
mov [esi+48h] edi +
mov ecx [ebp+arg_0] +
push edi  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+4Ch] +
jnz loc_1019DD7  +
mov dword ptr [ecx+1A4h] 1 +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+48h] +
call sub_100B83A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+14h] +
call sub_100B83A  +
call sub_1001FCF  +
retn   +
***
mov dword ptr [ecx] offset off_100AB7C +
mov dword ptr [ecx+10h] offset off_100B8D0 +
add ecx 4 +
jmp sub_100B8F1  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1010D40 +
and dword ptr [ebp-4] 0 +
inc dword ptr [esi+10h]  +
mov [ebp-10h] esi +
mov eax [esi+8] +
mov edi [eax] +
mov byte ptr [ebp-4] 2 +
cmp edi eax +
jz loc_1019E76  +
cmp byte ptr [edi+0Ch] 0 +
jnz loc_1019E6F  +
mov ecx [edi+8] +
test ecx ecx +
jz loc_1019E6F  +
push esi  +
call sub_101B028  +
mov edi [edi] +
cmp edi [esi+8] +
jnz loc_1019E5C  +
lea ecx [ebp-10h] +
call sub_100E76D  +
lea edi [esi+4] +
mov ecx edi +
call sub_100B8AF  +
mov ecx edi +
call sub_100B8F1  +
mov dword ptr [esi] offset off_101AA40 +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1010D60 +
and dword ptr [ebp-4] 0 +
inc dword ptr [esi+10h]  +
mov [ebp-10h] esi +
mov eax [esi+8] +
mov edi [eax] +
mov byte ptr [ebp-4] 2 +
cmp edi eax +
jz loc_1019EE8  +
cmp byte ptr [edi+0Ch] 0 +
jnz loc_1019EE1  +
mov ecx [edi+8] +
test ecx ecx +
jz loc_1019EE1  +
push esi  +
call sub_101B028  +
mov edi [edi] +
cmp edi [esi+8] +
jnz loc_1019ECE  +
lea ecx [ebp-10h] +
call sub_100E76D  +
lea edi [esi+4] +
mov ecx edi +
call sub_100B8AF  +
mov ecx edi +
call sub_100B8F1  +
mov dword ptr [esi] offset off_101AA40 +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1019F3A  +
lea ecx [esi-8] +
test ecx ecx +
jz loc_1019F3A  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_100BC00 +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_1019F5B  +
push 1  +
call sub_101A450  +
retn   +
***
push 4  +
mov eax offset dword_10E6DD0 +
call sub_1001F95  +
mov edi ecx +
xor esi esi +
mov [ebp-10h] esi +
mov ecx [ebp+8] +
push esi  +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aCamcviewtool_2  +
mov [ebp-4] esi +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+8] +
mov [edi+68h] esi +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov ebx ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCeventsource_2  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-14h] ebx +
test ebx ebx +
jz loc_101A031  +
inc dword ptr [ebx+10h]  +
mov eax [ebx+8] +
mov esi [eax] +
mov byte ptr [ebp-4] 2 +
cmp esi eax +
jz loc_101A0B8  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
cmp byte ptr [esi+0Ch] 0 +
jnz loc_101A0B1  +
push 8000FFFFh  +
push dword ptr [esi+8]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1063FA4  +
mov ecx [esi+8] +
lea eax [ebp-44h] +
push eax  +
call dword ptr [ebp+0Ch]  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_101A0B8  +
mov esi [esi] +
cmp esi [ebx+8] +
jnz loc_101A044  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-14h] +
mov dword ptr [ebp-10h] 1 +
call sub_100E76D  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_101A16A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101A198  +
cmp byte ptr [eax+19h] 5 +
jnb loc_106444F  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
mov eax [esi+80h] +
test eax eax +
jnz loc_1064466  +
pop esi  +
leave   +
retn 4  +
***
sbb ds:byte_10E3F96[eax] bh +
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamctreeviewDe  +
lea ecx [ebp-24h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
xor ebx ebx +
inc ebx  +
mov ecx esi +
mov [esi+9Ch] ebx +
call sub_100C5D1  +
test eax eax +
jz loc_101A1FF  +
push ebx  +
push eax  +
mov ecx esi +
call sub_1052963  +
lea edi [esi+94h] +
push edi  +
lea ecx [ebp-10h] +
call sub_10183E9  +
mov [ebp-4] bl +
mov ebx [ebp-10h] +
test ebx ebx +
jz loc_101A242  +
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
call dword ptr [ecx+54h]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
cmp dword ptr [ebp-14h] 0 +
jnz loc_1054DAB  +
and dword ptr [esi+9Ch] 0 +
mov byte ptr [ebp-4] 0 +
test ebx ebx +
jz loc_101A257  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+1Ch] +
mov dword ptr [ebp-4] 1 +
call sub_100E847  +
lea ecx [esi+10h] +
mov byte ptr [ebp-4] 0 +
call sub_100E847  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_100C3CD  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
push offset word_100A5FC  +
lea ecx [esi+20h] +
call ??4CString@@QAEABV0@PBG@Z  +
push eax  +
lea ecx [esi+2Ch] +
call ??4CString@@QAEABV0@ABV0@@Z  +
and [ebp+var_4] 0 +
mov eax [esi+10h] +
neg eax  +
sbb eax eax +
and [ebp+var_C] 0 +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1052BF9  +
lea ecx [esi+4] +
call ?RemoveAll@CMapWordToPtr@@QAEXXZ  +
mov byte ptr [esi+24h] 0 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp-4] ecx +
test ecx ecx +
jz loc_101A3FD  +
inc dword ptr [ecx+10h]  +
mov edx [ecx+8] +
mov eax [edx] +
cmp eax edx +
jz loc_101A41C  +
cmp byte ptr [eax+0Ch] 0 +
jnz loc_101A428  +
mov edx [eax+8] +
cmp edx [ebp+8] +
jnz loc_101A428  +
and dword ptr [eax+8] 0 +
mov byte ptr [eax+0Ch] 1 +
lea ecx [ebp-4] +
call sub_100E76D  +
leave   +
retn 4  +
***
mov eax [eax] +
cmp eax [ecx+8] +
jnz loc_101A406  +
jmp loc_101A41C  +
***
mov dword ptr [ecx] offset off_100BBA8 +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_101A44A  +
push 1  +
call sub_101A450  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A47A  +
test [ebp+arg_0] 1 +
jz loc_101A46E  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
xor edi edi +
cmp eax edi +
jnz loc_101A4A1  +
mov ecx [esi+10h] +
mov [esi+8] edi +
mov [esi+0Ch] edi +
mov [esi+4] edi +
mov [esi] edi +
call ?FreeDataChain@CPlex@@QAEXXZ  +
mov [esi+10h] edi +
pop edi  +
pop esi  +
retn   +
mov eax [eax] +
jmp loc_101A484  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A4D0  +
test byte ptr [ebp+8] 1 +
jz loc_101A4C4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov edi edi +
mov eax ecx +
mov ecx [eax+4] +
mov dword ptr [eax] offset off_101A538 +
test ecx ecx +
jz locret_101A531  +
push eax  +
call sub_101A545  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
call sub_10113C1  +
mov eax [eax] +
cmp eax [esi+8] +
jz loc_101A576  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+4] +
call sub_100ED24  +
pop esi  +
leave   +
retn 4  +
***
cmp dword ptr [ebp+8] 0 +
jz loc_101A615  +
push offset loc_101D071  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [esi+4Ch] +
call sub_1019FF5  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_101A615  +
jmp loc_1064ACD  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamctreeview_2  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
mov edi [ebp+10h] +
cmp eax offset lpDst +
jz loc_101A60C  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1064AAF  +
cmp [ebp+0Ch] edi +
jnz loc_101A57B  +
push edi  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call ?OnActivateView@CView@@MAEXHPAV1@0@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A6AC  +
test [ebp+arg_0] 1 +
jz loc_101A6A0  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+24h] +
call sub_100CD3C  +
lea ecx [esi+4] +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push esi  +
mov esi ecx +
call sub_10183C1  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop esi  +
retn   +
***
sub ecx 4 +
jmp loc_101A6EE  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A714  +
test byte ptr [ebp+8] 1 +
jz loc_101A708  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+4] +
lea ebx [esi+1Ch] +
mov dword ptr [esi] offset off_100F12C +
mov dword ptr [edi] offset off_1010E1C +
mov dword ptr [ebx] offset off_1010E00 +
mov eax [esi+58h] +
mov dword ptr [ebp-4] 0Bh +
test eax eax +
jnz loc_105E813  +
lea ecx [esi+1A8h] +
call sub_101AC79  +
mov eax [esi+18Ch] +
mov byte ptr [ebp-4] 0Ah +
test eax eax +
jnz loc_105E83E  +
mov eax [esi+188h] +
mov byte ptr [ebp-4] 9 +
test eax eax +
jnz loc_105E849  +
mov eax [esi+184h] +
mov byte ptr [ebp-4] 8 +
test eax eax +
jnz loc_105E854  +
lea ecx [esi+158h] +
mov byte ptr [ebp-4] 7 +
call sub_10160F3  +
lea ecx [esi+0D0h] +
mov byte ptr [ebp-4] 6 +
call sub_1019DE0  +
lea ecx [esi+0C0h] +
mov byte ptr [ebp-4] 5 +
call ??1CImageList@@UAE@XZ  +
lea ecx [esi+0A8h] +
mov byte ptr [ebp-4] 4 +
call sub_1017FF8  +
lea ecx [esi+0A0h] +
mov byte ptr [ebp-4] 3 +
call ??1CImageList@@UAE@XZ  +
lea ecx [esi+98h] +
mov byte ptr [ebp-4] 2 +
call ??1CImageList@@UAE@XZ  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_101AE41  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call sub_1019EA0  +
lea ecx [esi+2Ch] +
call sub_101A846  +
call sub_1001FCF  +
retn   +
***
lea eax [ecx+4] +
cmp byte ptr [eax+18h] 0 +
jz locret_101A85A  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
retn   +
***
sub ecx 8 +
jmp loc_101A86A  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A890  +
test byte ptr [ebp+8] 1 +
jz loc_101A884  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1011338 +
mov dword ptr [ecx+4] offset off_100E4A0 +
mov dword ptr [ecx+8] offset off_100E648 +
mov dword ptr [ecx+18h] offset off_1011318 +
jmp sub_101A8B2  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-18h] esi +
lea edi [esi+18h] +
lea ebx [esi+8] +
mov dword ptr [esi] offset off_10112F0 +
mov dword ptr [esi+4] offset off_100E460 +
mov dword ptr [ebx] offset off_100E5F8 +
mov [ebp-14h] edi +
mov dword ptr [edi] offset off_10112D0 +
mov eax [esi+44h] +
mov ecx [eax] +
mov dword ptr [ebp-4] 5 +
mov [ebp-10h] ecx +
cmp ecx eax +
jz loc_101A974  +
mov edi [ecx+0Ch] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-28h] +
push eax  +
call sub_100A3AE  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 6 +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_101A9BC  +
mov eax [edi] +
lea ecx [ebp-38h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+4]  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 7 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 6 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_101A9BC  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-10h] +
call sub_1051C93  +
mov eax [esi+44h] +
mov ecx [ebp-10h] +
cmp ecx eax +
jnz loc_101A8F8  +
mov edi [ebp-14h] +
lea ecx [esi+58h] +
mov byte ptr [ebp-4] 4 +
call sub_1015A6C  +
lea ecx [esi+4Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1015A6C  +
lea ecx [esi+40h] +
mov byte ptr [ebp-4] 2 +
call sub_101197A  +
lea ecx [esi+30h] +
call sub_1019D17  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call sub_101A9CC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx ebx +
call sub_100C3CD  +
call sub_1001FCF  +
retn   +
lea ecx [ebp-28h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_101A952  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_10112B0 +
and dword ptr [ebp-4] 0 +
inc dword ptr [esi+10h]  +
mov [ebp-10h] esi +
mov eax [esi+8] +
mov edi [eax] +
mov byte ptr [ebp-4] 2 +
cmp edi eax +
jz loc_101AA14  +
cmp byte ptr [edi+0Ch] 0 +
jnz loc_101AA0D  +
mov ecx [edi+8] +
test ecx ecx +
jz loc_101AA0D  +
push esi  +
call sub_101B028  +
mov edi [edi] +
cmp edi [esi+8] +
jnz loc_101A9FA  +
lea ecx [ebp-10h] +
call sub_100E76D  +
lea edi [esi+4] +
mov ecx edi +
call sub_100B8AF  +
mov ecx edi +
call sub_100B8F1  +
mov dword ptr [esi] offset off_101AA40 +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+0E0h] +
call sub_101A47A  +
mov byte ptr [esi+230h] 1 +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
jmp ds:?OnDestroy@CMDIChildWnd@@IAEXXZ  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+60h] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+58h] +
pop esi  +
jmp ?DeleteObject@CGdiObject@@QAEHXZ  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+8] +
push eax  +
mov dword ptr [esi] offset off_100680C +
call ds:DeleteCriticalSection  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
jmp ds:??1CSyncObject@@UAE@XZ  +
***
sub ecx 4 +
jmp loc_101AAEA  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101AB10  +
test byte ptr [ebp+8] 1 +
jz loc_101AB04  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+4] +
mov dword ptr [esi] offset off_10113A0 +
mov dword ptr [edi] offset off_1010770 +
push 0  +
lea ecx [ebp-20h] +
mov dword ptr [ebp-4] 1 +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCstandardtoolb  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [esi+14h] +
test ecx ecx +
jnz loc_1062B54  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [esi+1Ch] +
mov byte ptr [ebp-4] 0 +
call sub_100E847  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx edi +
call sub_100C3CD  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101AC23  +
cmp byte ptr [eax+19h] 5 +
jnb loc_10647B5  +
xor edi edi +
push edi  +
lea ecx [esi+88h] +
mov dword ptr [esi+9Ch] 1 +
call sub_1010F11  +
push edi  +
lea ecx [esi+90h] +
call sub_1010F11  +
push edi  +
lea ecx [esi+94h] +
call sub_1010F11  +
push edi  +
lea ecx [esi+98h] +
call sub_1010F11  +
push edi  +
lea ecx [esi+8Ch] +
call sub_1010F11  +
mov [esi+9Ch] edi +
pop edi  +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1010FFC +
and dword ptr [ebp-4] 0 +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101ACAA  +
cmp byte ptr [eax+19h] 2 +
jnb loc_1057061  +
mov ecx esi +
call sub_1018278  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+8] +
call sub_101ACC8  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+75h] 0 +
jz loc_101ACDB  +
lea ecx [esi+18h] +
call sub_1017C03  +
push 0  +
mov ecx esi +
call sub_10182D1  +
cmp byte ptr [esi+75h] 0 +
jz loc_101ACF2  +
lea ecx [esi+18h] +
call sub_1017B9B  +
mov ecx esi +
call sub_101AD0D  +
mov dword ptr [esi] 784C4B4Ch +
mov dword ptr [esi+14h] 0FFFFFF9Dh +
pop esi  +
retn   +
***
cmp dword ptr [ecx+6Ch] 0 +
jnz locret_101AD21  +
add ecx 78h +
push ecx  +
mov ecx offset dword_10F542C +
call sub_101AD27  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1010F85  +
push [ebp+arg_0]  +
call sub_101AD4D  +
mov ecx esi +
call sub_1010FCF  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+4] +
mov ecx [ecx] +
test eax eax +
jz loc_101AD67  +
test ecx ecx +
jz loc_101AD67  +
mov [eax] ecx +
mov [ecx+4] eax +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1010E3C +
push 0  +
lea ecx [ebp-20h] +
mov dword ptr [ebp-4] 1 +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCviewdroptarge  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+14h] +
test eax eax +
jz loc_101ADC3  +
push eax  +
call ds:RevokeDragDrop  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [esi+10h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_101ADE1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101AE41  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100BC58 +
and dword ptr [ebp-4] 0 +
call sub_101AE74  +
lea ecx [esi+4] +
call sub_100B8F1  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+8] +
mov esi [eax] +
cmp esi eax +
jnz loc_1059916  +
pop edi  +
pop esi  +
retn   +
***
push 8  +
mov eax offset byte_10D4D41 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp+0Ch] +
call ??0CString@@QAE@PBG@Z  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [esi+0B4h] +
mov byte ptr [ebp-4] 1 +
call sub_101AF01  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
push dword ptr [ebx]  +
lea edi [esi+54h] +
mov ecx edi +
call sub_100C7C5  +
test eax eax +
jnz sub_105ED6A  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push 0  +
push edi  +
lea eax [ebp-4] +
push eax  +
push edi  +
mov ecx esi +
call sub_101AF5B  +
cmp dword ptr [ebp-4] 0 +
jz loc_101145F  +
push edi  +
lea eax [esi+1E4h] +
push eax  +
mov ecx esi +
call sub_1011AA9  +
jmp loc_101145F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_C] 0 +
push esi  +
push edi  +
jnz loc_101AF72  +
cmp [ebp+arg_8] 1 +
jg loc_105A600  +
mov edi [ebp+arg_4] +
mov eax [edi] +
test eax eax +
jz loc_101AFAB  +
mov edx [ebp+arg_0] +
shl edx 4 +
add ecx edx +
mov edx [ecx+19Ch] +
mov esi [ecx+194h] +
test eax eax +
jg loc_101AFA1  +
cmp edx esi +
jge loc_101AFAB  +
sub edx esi +
cmp edx eax +
jg loc_104E8B6  +
add esi eax +
mov [ecx+194h] esi +
sub [edi] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1010C84 +
and dword ptr [ebp-4] 0 +
inc dword ptr [esi+10h]  +
mov [ebp-10h] esi +
mov eax [esi+8] +
mov edi [eax] +
mov byte ptr [ebp-4] 2 +
cmp edi eax +
jz loc_101AFFE  +
cmp byte ptr [edi+0Ch] 0 +
jnz loc_101AFF7  +
mov ecx [edi+8] +
test ecx ecx +
jz loc_101AFF7  +
push esi  +
call sub_101B028  +
mov edi [edi] +
cmp edi [esi+8] +
jnz loc_101AFE4  +
lea ecx [ebp-10h] +
call sub_100E76D  +
lea edi [esi+4] +
mov ecx edi +
call sub_100B8AF  +
mov ecx edi +
call sub_100B8F1  +
mov dword ptr [esi] offset off_101AA40 +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCobserverbaseU  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+8] +
mov [ebp-10h] eax +
mov eax [esi+8] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
push ecx  +
lea eax [ebp+8] +
push eax  +
call sub_10113C1  +
mov eax [esi+8] +
cmp [ebp+8] eax +
jz loc_105992A  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push eax  +
lea ecx [esi+4] +
call sub_100ED24  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+70h] +
mov dword ptr [ebp-4] 7 +
call sub_100F341  +
mov eax [esi+5Ch] +
mov byte ptr [ebp-4] 6 +
test eax eax +
jnz loc_105C45F  +
mov eax [esi+58h] +
mov byte ptr [ebp-4] 5 +
test eax eax +
jnz loc_105C46A  +
mov eax [esi+54h] +
mov byte ptr [ebp-4] 4 +
test eax eax +
jz loc_101B260  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+50h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_101B271  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+4Ch] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_101B282  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+48h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_101B293  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+44h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_101B2A4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+14h] +
call sub_101B2BB  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_10110C4 +
and dword ptr [ebp-4] 0 +
inc dword ptr [esi+10h]  +
mov [ebp-10h] esi +
mov eax [esi+8] +
mov edi [eax] +
mov byte ptr [ebp-4] 2 +
cmp edi eax +
jnz loc_105B62B  +
lea ecx [ebp-10h] +
call sub_100E76D  +
lea edi [esi+4] +
mov ecx edi +
call sub_100B8AF  +
mov ecx edi +
call sub_100B8F1  +
mov dword ptr [esi] offset off_101AA40 +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101B34B  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_101B379  +
cmp [ebp+arg_8] eax +
jnz loc_101B379  +
mov ecx esi +
call sub_101888C  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_101B36F  +
jmp loc_105C4A3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101B3AE  +
test byte ptr [ebp+8] 1 +
jz loc_101B3A2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1002D84 +
mov dword ptr [esi+44h] offset off_100C5EC +
mov dword ptr [esi+48h] offset off_1010D24 +
mov dword ptr [esi+58h] offset off_100B974 +
mov dword ptr [esi+5Ch] offset off_1010D04 +
mov dword ptr [esi+74h] offset off_100E5C4 +
mov dword ptr [esi+84h] offset off_1010CE4 +
mov dword ptr [esi+94h] offset off_1010CC4 +
mov dword ptr [esi+0A4h] offset off_1010CA4 +
mov dword ptr [esi+0B4h] offset off_100F394 +
mov dword ptr [ebp-4] 13h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101B42D  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105C80B  +
lea edi [esi+178h] +
mov eax [edi] +
xor ebx ebx +
mov [esi+174h] ebx +
cmp eax ebx +
jz loc_101B449  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
lea edi [esi+23Ch] +
push ebx  +
mov ecx edi +
mov [esi+188h] ebx +
mov [esi+18Ch] ebx +
call sub_100EB41  +
test al al +
jz loc_101B47E  +
mov ecx edi +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [esi+1F8h] +
push edx  +
push eax  +
call dword ptr [ecx+80h]  +
mov ecx [esi+310h] +
cmp ecx ebx +
jz loc_101B48F  +
push 1  +
call sub_101A682  +
push ebx  +
lea ecx [esi+250h] +
call sub_1010F11  +
lea ecx [esi+324h] +
push ebx  +
mov [esi+32Ch] ebx +
call sub_1019CAC  +
lea eax [ebp-10h] +
lea edi [esi+328h] +
push eax  +
mov ecx edi +
mov [ebp-10h] ebx +
call sub_101192A  +
mov eax [ebp-10h] +
cmp eax ebx +
jnz loc_105C822  +
lea ecx [esi+330h] +
mov byte ptr [ebp-4] 12h +
call sub_101B317  +
mov edi [edi] +
mov byte ptr [ebp-4] 11h +
cmp edi ebx +
jnz loc_105C830  +
mov ecx [esi+324h] +
mov byte ptr [ebp-4] 10h +
cmp ecx ebx +
jnz loc_105C83E  +
mov eax [esi+320h] +
mov byte ptr [ebp-4] 0Fh +
cmp eax ebx +
jnz loc_105C848  +
mov eax [esi+31Ch] +
mov byte ptr [ebp-4] 0Eh +
cmp eax ebx +
jnz loc_105C853  +
mov eax [esi+318h] +
mov byte ptr [ebp-4] 0Dh +
cmp eax ebx +
jnz loc_105C85E  +
lea ecx [esi+1F8h] +
mov byte ptr [ebp-4] 0Ch +
call sub_101B211  +
lea ecx [esi+1F4h] +
mov byte ptr [ebp-4] 0Bh +
call ??1CString@@QAE@XZ  +
lea ecx [esi+0F8h] +
mov byte ptr [ebp-4] 0Ah +
call sub_101B618  +
mov eax [esi+0D8h] +
mov byte ptr [ebp-4] 9 +
cmp eax ebx +
jz loc_101B572  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+0D4h] +
mov byte ptr [ebp-4] 8 +
cmp eax ebx +
jz loc_101B586  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+0C4h] +
mov byte ptr [ebp-4] 7 +
cmp eax ebx +
jnz loc_105C869  +
lea ecx [esi+0B4h] +
mov byte ptr [ebp-4] 6 +
call sub_100C3CD  +
lea ecx [esi+0A4h] +
mov byte ptr [ebp-4] 5 +
call sub_100C3CD  +
lea ecx [esi+94h] +
mov byte ptr [ebp-4] 4 +
call sub_100C3CD  +
lea ecx [esi+84h] +
mov byte ptr [ebp-4] 3 +
call sub_100C3CD  +
lea ecx [esi+74h] +
mov byte ptr [ebp-4] 2 +
call sub_100C3CD  +
lea ecx [esi+5Ch] +
mov byte ptr [ebp-4] 1 +
call sub_101AFB6  +
lea ecx [esi+48h] +
mov [ebp-4] bl +
call sub_101AE41  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CView@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ebx [esi+40h] +
mov dword ptr [esi] offset off_1003804 +
mov dword ptr [ebx] offset off_100E738 +
lea ecx [esi+60h] +
mov edi offset off_10083D0 +
mov dword ptr [ebp-4] 4 +
mov [ecx] edi +
call sub_100F62A  +
lea ecx [esi+58h] +
mov byte ptr [ebp-4] 3 +
mov [ecx] edi +
call sub_100F62A  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+50h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
mov ecx ebx +
mov byte ptr [ebp-4] 0 +
call sub_100C3CD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CStatic@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101B6CA  +
test byte ptr [ebp+8] 1 +
jz loc_101B6BE  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ebx [esi+44h] +
mov dword ptr [esi] offset off_1002F8C +
mov dword ptr [ebx] offset off_100E698 +
mov dword ptr [esi+54h] offset off_1011380 +
mov dword ptr [esi+6Ch] offset off_100E808 +
mov dword ptr [esi+7Ch] offset off_100FF6C +
lea edi [esi+12Ch] +
mov dword ptr [ebp-4] 0Dh +
test edi edi +
jz loc_101B71D  +
cmp dword ptr [edi+4] 0 +
jz loc_101B71D  +
mov ecx edi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push 0  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
call sub_1019D76  +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [esi+19Ch] +
mov byte ptr [ebp-4] 0Ch +
call sub_100A77D  +
lea ecx [esi+188h] +
mov byte ptr [ebp-4] 0Bh +
call sub_100A77D  +
lea ecx [esi+174h] +
mov byte ptr [ebp-4] 0Ah +
call sub_100A77D  +
lea ecx [esi+160h] +
mov byte ptr [ebp-4] 9 +
call sub_100A77D  +
lea ecx [esi+14Ch] +
mov byte ptr [ebp-4] 8 +
call sub_100A77D  +
lea ecx [esi+138h] +
mov byte ptr [ebp-4] 7 +
call sub_100A77D  +
mov ecx edi +
mov byte ptr [ebp-4] 6 +
mov dword ptr [edi] offset off_10083D0 +
call sub_100F62A  +
lea ecx [esi+0D0h] +
mov byte ptr [ebp-4] 5 +
call sub_101B85D  +
lea ecx [esi+90h] +
mov byte ptr [ebp-4] 4 +
call ??1CStatic@@UAE@XZ  +
lea ecx [esi+7Ch] +
mov byte ptr [ebp-4] 3 +
call sub_100C3CD  +
lea ecx [esi+6Ch] +
mov byte ptr [ebp-4] 2 +
call sub_100C3CD  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 1 +
call sub_101B801  +
mov ecx ebx +
mov byte ptr [ebp-4] 0 +
call sub_100C3CD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CView@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1011360 +
and dword ptr [ebp-4] 0 +
inc dword ptr [esi+10h]  +
mov [ebp-10h] esi +
mov eax [esi+8] +
mov edi [eax] +
mov byte ptr [ebp-4] 2 +
cmp edi eax +
jnz loc_105DB10  +
lea ecx [ebp-10h] +
call sub_100E76D  +
lea edi [esi+4] +
mov ecx edi +
call sub_100B8AF  +
mov ecx edi +
call sub_100B8F1  +
mov dword ptr [esi] offset off_101AA40 +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1007D24 +
mov dword ptr [ebp-4] 2 +
call sub_101C076  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 1 +
call ??1CImageList@@UAE@XZ  +
lea ecx [esi+8] +
mov byte ptr [ebp-4] 0 +
call ??1CWnd@@UAE@XZ  +
mov dword ptr [esi] offset off_100257C +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101B8DA  +
test byte ptr [ebp+8] 1 +
jz loc_101B8CE  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+54h] +
lea ebx [esi+6Ch] +
mov dword ptr [esi] offset off_100316C +
mov dword ptr [esi+4Ch] offset off_1010DE0 +
mov dword ptr [esi+50h] offset off_1010DC4 +
mov dword ptr [edi] offset off_1010DA0 +
mov dword ptr [ebx] offset off_1010D80 +
mov eax [esi+9Ch] +
mov dword ptr [ebp-4] 5 +
test eax eax +
jz loc_101B991  +
mov eax [eax+178h] +
test eax eax +
jz loc_101B934  +
push esi  +
mov ecx eax +
call sub_1019DC0  +
cmp dword ptr [esi+0C0h] 0 +
jnz loc_105E803  +
lea ecx [esi+0E4h] +
call sub_1019E14  +
lea ecx [esi+0A0h] +
mov byte ptr [ebp-4] 3 +
call ??1CHeaderCtrl@@UAE@XZ  +
lea ecx [esi+88h] +
mov byte ptr [ebp-4] 2 +
call sub_100A77D  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_1019E2E  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call sub_101AD70  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101B99A  +
call sub_1001FCF  +
retn   +
xor eax eax +
jmp loc_101B928  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+44h] +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CView@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call ?OnNcActivate@CMDIChildWnd@@IAEHH@Z  +
cmp dword ptr [ebp+8] 0 +
mov edi eax +
setnz al  +
mov [esi+232h] al +
push eax  +
push esi  +
call sub_1019744  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101BA32  +
test byte ptr [ebp+8] 1 +
jz loc_101BA26  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+0CCh] +
mov dword ptr [esi] offset off_10033BC +
mov dword ptr [esi+0C8h] offset off_100C8A0 +
mov dword ptr [edi] offset off_100E6E8 +
mov eax [esi+23Ch] +
mov dword ptr [ebp-4] 6 +
test eax eax +
jnz loc_105EBFC  +
mov ecx [esi+238h] +
mov byte ptr [ebp-4] 5 +
test ecx ecx +
jz loc_101BA89  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+1Ch]  +
lea ecx [esi+22Ch] +
mov byte ptr [ebp-4] 4 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+10Ch] +
mov byte ptr [ebp-4] 3 +
call sub_101BAF1  +
lea ecx [esi+0E8h] +
mov byte ptr [ebp-4] 2 +
call sub_1019F47  +
lea ecx [esi+0DCh] +
mov byte ptr [ebp-4] 1 +
call sub_101A436  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call sub_100C3CD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CFrameWnd@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_10051CC +
push 0  +
lea ebx [esi+0F0h] +
push ebx  +
lea ecx [ebp-20h] +
mov dword ptr [ebp-4] 5 +
call ??0CSingleLock@@QAE@PAVCSyncObject@@H@Z  +
mov eax [esi+0D8h] +
mov byte ptr [ebp-4] 6 +
mov [ebp-10h] eax +
test eax eax +
jnz loc_106285B  +
lea edi [esi+0D4h] +
mov ecx edi +
call ?RemoveAll@CPtrList@@QAEXXZ  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call ?Unlock@CSingleLock@@QAEHXZ  +
lea ecx [esi+114h] +
mov byte ptr [ebp-4] 4 +
mov dword ptr [ecx] offset off_10083D0 +
call sub_100F62A  +
mov ecx ebx +
mov byte ptr [ebp-4] 3 +
call sub_101AAB8  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call ??1CPtrList@@UAE@XZ  +
lea ecx [esi+94h] +
mov byte ptr [ebp-4] 1 +
call ??1CStatic@@UAE@XZ  +
lea ecx [esi+4Ch] +
mov byte ptr [ebp-4] 0 +
call ??1CProgressCtrl@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101BBAA  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1003D14 +
mov ecx [esi+48h] +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_101BBD3  +
push 3  +
call sub_101BBEF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
mov dword ptr [esi] offset off_1003AC4 +
call ??1CWnd@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push esi  +
mov esi ecx +
jz loc_105F2FC  +
push edi  +
push offset loc_101BC2E  +
lea edi [esi-4] +
push dword ptr [edi]  +
push 0Ch  +
push esi  +
call sub_100C964  +
test [ebp+arg_0] 1 +
jz loc_101BC21  +
push edi  +
call sub_100F30B  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
add ecx 8 +
jmp ??1CString@@QAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101BC61  +
test byte ptr [ebp+8] 1 +
jz loc_101BC55  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ebx [esi+44h] +
mov dword ptr [esi] offset off_10043B4 +
mov dword ptr [ebx] offset off_1010E80 +
mov eax [esi+94h] +
mov dword ptr [ebp-4] 4 +
test eax eax +
jnz loc_105F89A  +
lea ecx [esi+74h] +
mov edi offset off_10083D0 +
mov byte ptr [ebp-4] 3 +
mov [ecx] edi +
call sub_100F62A  +
lea ecx [esi+6Ch] +
mov byte ptr [ebp-4] 2 +
mov [ecx] edi +
call sub_100F62A  +
lea ecx [esi+5Ch] +
mov byte ptr [ebp-4] 1 +
call sub_101BCE4  +
mov ecx ebx +
mov byte ptr [ebp-4] 0 +
call sub_101AE41  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CView@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1018813  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_101BD1A  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+20h] +
call sub_100F341  +
test [ebp+arg_0] 1 +
jnz loc_105F935  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call ?OnNcActivate@CFrameWnd@@IAEHH@Z  +
mov edi eax +
movzx eax byte ptr [esi+16Ah] +
push eax  +
push esi  +
call sub_1019744  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
mov eax lpDst +
mov edi [ebp+8] +
cmp eax offset lpDst +
jz loc_101BD9B  +
cmp byte ptr [eax+19h] 5 +
jnb loc_106017D  +
test edi edi +
setnz al  +
mov [esi+16Ah] al +
test al al +
jz loc_1051984  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
mov dword_10F5364 1 +
push edi  +
call ?OnActivate@CFrameWnd@@IAEXIPAVCWnd@@H@Z  +
and dword_10F5364 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101BE15  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_8] +
jnz loc_106084E  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101BE5B  +
test byte ptr [ebp+8] 1 +
jz loc_101BE4F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1011888 +
xor edi edi +
inc edi  +
lea ecx [esi+0Ch] +
mov [ebp-4] edi +
call sub_1011AD9  +
lea ecx [esi+1Ch] +
mov byte ptr [ebp-4] 2 +
call sub_100A44C  +
mov [ebp-4] edi +
lea ecx [esi+1Ch] +
mov byte ptr [ebp-4] 0 +
call sub_1015A6C  +
lea ecx [esi+0Ch] +
call sub_101BEAE  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jnz loc_1060FC2  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101BEFB  +
test byte ptr [ebp+8] 1 +
jz loc_101BEEF  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+4Ch] +
lea ebx [esi+64h] +
mov dword ptr [esi] offset off_100565C +
mov dword ptr [edi] offset off_1010EE0 +
mov dword ptr [ebx] offset off_1010EBC +
mov eax [esi+7Ch] +
mov dword ptr [ebp-4] 0Bh +
test eax eax +
jz loc_101BF3F  +
and dword ptr [eax+4] 0 +
mov eax [esi+7Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [esi+104h] +
mov byte ptr [ebp-4] 0Ah +
test ecx ecx +
jnz loc_1064DA5  +
lea ecx [esi+100h] +
mov byte ptr [ebp-4] 9 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+0D4h] +
mov byte ptr [ebp-4] 8 +
call sub_10160F3  +
lea ecx [esi+0A8h] +
mov byte ptr [ebp-4] 7 +
call sub_101A2AD  +
mov eax [esi+98h] +
mov byte ptr [ebp-4] 6 +
test eax eax +
jnz loc_1064DB1  +
mov eax [esi+94h] +
mov byte ptr [ebp-4] 5 +
test eax eax +
jnz loc_1064DBC  +
mov eax [esi+90h] +
mov byte ptr [ebp-4] 4 +
test eax eax +
jnz loc_1064DC7  +
mov eax [esi+8Ch] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jnz loc_1064DD2  +
mov eax [esi+88h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jnz loc_1064DDD  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_101AD70  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call sub_101C004  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101B99A  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1010E9C +
and dword ptr [ebp-4] 0 +
inc dword ptr [esi+10h]  +
mov [ebp-10h] esi +
mov eax [esi+8] +
mov edi [eax] +
mov byte ptr [ebp-4] 2 +
cmp edi eax +
jz loc_101C04C  +
cmp byte ptr [edi+0Ch] 0 +
jnz loc_101C045  +
mov ecx [edi+8] +
test ecx ecx +
jz loc_101C045  +
push esi  +
call sub_101B028  +
mov edi [edi] +
cmp edi [esi+8] +
jnz loc_101C032  +
lea ecx [ebp-10h] +
call sub_100E76D  +
lea edi [esi+4] +
mov ecx edi +
call sub_100B8AF  +
mov ecx edi +
call sub_100B8F1  +
mov dword ptr [esi] offset off_101AA40 +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+28h] edi +
jz loc_101C08B  +
lea ecx [esi+8] +
call ?Detach@CWnd@@QAEPAUHWND__@@XZ  +
mov ecx [esi+4] +
cmp ecx edi +
jz loc_101C09C  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov [esi+4] edi +
mov ecx [esi+48h] +
cmp ecx edi +
jz loc_101C0AD  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov [esi+48h] edi +
mov ecx [esi+4Ch] +
cmp ecx edi +
jz loc_101C0BE  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov [esi+4Ch] edi +
mov ecx [esi+50h] +
cmp ecx edi +
jz loc_101C0CF  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov [esi+50h] edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101C10C  +
test byte ptr [ebp+8] 1 +
jz loc_101C100  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1007D88 +
mov dword ptr [ebp-4] 3 +
call sub_101A37E  +
lea ecx [esi+2Ch] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+20h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 0 +
call ??1CMapWordToPtr@@UAE@XZ  +
mov dword ptr [esi] offset off_100257C +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101C199  +
test byte ptr [ebp+8] 1 +
jz loc_101C18D  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100836C +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCdirectuirende  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101C1E7  +
cmp byte ptr [eax+19h] 4 +
jnb loc_1069B72  +
cmp [esi+4] bl +
jnz loc_1069B89  +
movzx eax word ptr [esi+2Ch] +
mov edi ds:DeleteAtom +
cmp ax bx +
jz loc_101C202  +
push eax  +
call edi  +
movzx eax word ptr [esi+2Eh] +
cmp ax bx +
jz loc_101C20E  +
push eax  +
call edi  +
movzx eax word ptr [esi+30h] +
cmp ax bx +
jz loc_101C21A  +
push eax  +
call edi  +
movzx eax word ptr [esi+32h] +
cmp ax bx +
jz loc_101C226  +
push eax  +
call edi  +
movzx eax word ptr [esi+34h] +
cmp ax bx +
jz loc_101C232  +
push eax  +
call edi  +
movzx eax word ptr [esi+36h] +
cmp ax bx +
jz loc_101C23E  +
push eax  +
call edi  +
movzx eax word ptr [esi+38h] +
cmp ax bx +
jz loc_101C24A  +
push eax  +
call edi  +
movzx eax word ptr [esi+3Ah] +
cmp ax bx +
jz loc_101C256  +
push eax  +
call edi  +
mov ecx [esi+1Ch] +
cmp ecx ebx +
jz loc_101C263  +
call ?Destroy@NativeHWNDHost@DirectUI@@QAEXXZ  +
mov ecx [esi+18h] +
cmp ecx ebx +
jz loc_101C270  +
call ?Destroy@DUIXmlParser@DirectUI@@QAEXXZ  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov dword ptr [esi] offset off_100257C +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
mov esi ecx +
call sub_101C39F  +
test eax eax +
jnz loc_101C312  +
cmp [esi] eax +
jz loc_101CC54  +
mov ecx esi +
call sub_101C320  +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov [eax+8] edi +
mov edx [esi] +
shl ecx 2 +
mov edx [ecx+edx] +
mov [eax] edx +
mov edx [esi] +
mov [ecx+edx] eax +
pop edi  +
add eax 0Ch +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
push edi  +
jz loc_101C346  +
mov ecx [esi+0Ch] +
mov eax [ecx] +
inc dword ptr [esi+8]  +
mov [esi+0Ch] eax +
xor eax eax +
lea edi [ecx+8] +
stos   +
lea edi [ecx+0Ch] +
stos   +
pop edi  +
mov eax ecx +
pop esi  +
retn   +
push 10h  +
push dword ptr [esi+14h]  +
lea eax [esi+10h] +
push eax  +
call ?Create@CPlex@@SGPAU1@AAPAU1@II@Z  +
mov ecx [esi+14h] +
mov edx ecx +
add eax 4 +
shl edx 4 +
dec ecx  +
lea eax [eax+edx-10h] +
js loc_101C32C  +
mov edx [esi+0Ch] +
mov [eax] edx +
mov [esi+0Ch] eax +
dec ecx  +
sub eax 10h +
test ecx ecx +
jge loc_101C366  +
jmp loc_101C32C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call sub_101C39F  +
test eax eax +
jnz loc_1056E93  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
movzx eax word ptr [edx+4] +
mov edx [edx] +
shl edx 10h +
or eax edx +
xor edx edx +
div  dword ptr [ecx+4] +
mov eax [ebp+arg_4] +
mov [eax] edx +
mov ecx [ecx] +
test ecx ecx +
jz loc_101CC4D  +
push esi  +
mov esi [ecx+edx*4] +
test esi esi +
jnz loc_1056FA5  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
push 1004h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
mov ecx esi +
call sub_101C418  +
test al al +
jnz loc_105E3FB  +
pop esi  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call sub_100E4E1  +
mov ecx esi +
mov edi eax +
call sub_101C3DE  +
test eax eax +
jg loc_101C443  +
test edi edi +
jz loc_101C443  +
mov ecx edi +
call sub_101C44D  +
test eax eax +
jg loc_105E128  +
xor eax eax +
pop edi  +
pop esi  +
retn   +
***
push 1200h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+15h] 0 +
jz loc_1056E27  +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jz loc_10218BD  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_1056E2F  +
mov [ecx+8] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push ebx  +
push esi  +
push 2000h  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push dword_10F565C  +
call ds:LoadImageW  +
mov esi eax +
cmp esi ebx +
jz loc_105DFED  +
mov ecx [ebp+arg_0] +
push esi  +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
test eax eax +
jz loc_105E040  +
mov bl 1 +
pop esi  +
mov al bl +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
xor ebx ebx +
push edi  +
mov edi offset word_100A5FC +
test eax eax +
jz loc_106831C  +
push dword ptr [esi+8]  +
lea ecx [ebp+var_50] +
push offset aAssignNull  +
push eax  +
call sub_100B69F  +
cmp [ebp+arg_0] ebx +
jnz loc_1068323  +
mov ecx esi +
call sub_100B724  +
push ebx  +
lea ecx [ebp+var_50] +
call sub_100B7A1  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 4  +
***
call sub_100A4F0  +
or dword ptr [ebp-1Ch] 0FFFFFFFFh +
mov esi dword_10F533C +
xor edi edi +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_101C5C3  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_105E084  +
mov [ebp-4] edi +
cmp esi edi +
jz loc_1037769  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_101C619  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 0Ch  +
***
cmp dword_10F6C64 edi +
jnz locret_101C647  +
xor eax eax +
cmp dword ptr [ebp-1Ch] 0FFFFFFFFh +
setz al  +
mov esi eax +
cmp esi edi +
jnz loc_105E093  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jnz loc_105E0A0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ebx ebx +
push edi  +
cmp eax ebx +
jnz loc_105E255  +
mov edi [ebp+arg_0] +
cmp [ebp+arg_4] ebx +
jz loc_101C6AB  +
lea eax [ebp+arg_4] +
push eax  +
push 4  +
pop ecx  +
mov eax edi +
mul  ecx +
push edx  +
push eax  +
call sub_101C6BF  +
test eax eax +
jl loc_101C6B5  +
xor ecx ecx +
push 4  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_100F31C  +
pop ecx  +
mov [esi] eax +
cmp eax ebx +
jz loc_101C6B5  +
push [ebp+arg_4]  +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
mov [esi+4] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov [esi+4] ebx +
jmp loc_101C6AE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_105A72A  +
mov eax [ebp+arg_0] +
jb loc_101C6DC  +
cmp eax 0FFFFFFFFh +
ja loc_105A72A  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
lea ecx [ebp+var_30] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistviewctr  +
lea ecx [ebp+var_30] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+arg_10] ebx +
jl loc_105E585  +
mov edi 80070057h +
push edi  +
push [ebp+arg_C]  +
lea eax [ebp+var_10] +
push [ebp+arg_8]  +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp+var_30] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_30] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E58F  +
mov esi ds:GetObjectW +
lea eax [ebp+var_60] +
push eax  +
push 18h  +
push [ebp+arg_8]  +
call esi  +
test eax eax +
jz loc_105E597  +
lea eax [ebp+var_48] +
push eax  +
push 18h  +
push [ebp+arg_C]  +
call esi  +
test eax eax +
jz loc_105E597  +
cmp [ebp+var_58] 10h +
jnz loc_101C966  +
cmp [ebp+var_40] 20h +
jnz loc_101C966  +
mov eax [ebp+var_5C] +
mov ecx eax +
and ecx 8000000Fh +
js loc_105E5A5  +
jnz loc_101C966  +
mov ecx [ebp+var_44] +
and ecx 8000001Fh +
js loc_105E5AF  +
jnz loc_101C966  +
cdq   +
and edx 0Fh +
add eax edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_44] +
sar [ebp+var_4] 4 +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
cmp [ebp+var_4] eax +
jnz loc_101C966  +
push [ebp+arg_8]  +
mov esi offset off_1008170 +
mov [ebp+var_1C] ebx +
mov [ebp+var_20] esi +
mov [ebp+var_14] ebx +
mov [ebp+var_18] esi +
call sub_100E56D  +
push eax  +
lea ecx [ebp+var_20] +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
push [ebp+arg_C]  +
call sub_100E56D  +
push eax  +
lea ecx [ebp+var_18] +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
cmp [ebp+var_1C] ebx +
jz loc_101C951  +
cmp [ebp+var_14] ebx +
jz loc_101C951  +
push [ebp+arg_14]  +
mov edi [ebp+arg_0] +
lea eax [ebp+var_20] +
push eax  +
lea eax [edi+98h] +
push eax  +
call sub_101CBD7  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_101C951  +
push [ebp+arg_14]  +
lea eax [ebp+var_18] +
push eax  +
lea eax [edi+0A0h] +
push eax  +
call sub_101CBD7  +
mov [ebp+arg_C] eax +
cmp eax 0FFFFFFFFh +
jz loc_105E5B9  +
cmp ebx eax +
jnz loc_105E602  +
cmp [ebp+var_4] 0 +
jle loc_101C91E  +
mov eax [ebp+var_4] +
add edi 0A8h +
mov [ebp+arg_8] edi +
mov edi [ebp+arg_10] +
sub edi ebx +
mov [ebp+arg_14] edi +
mov [ebp+arg_C] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [ebp+var_8] eax +
lea eax [ebp+arg_10] +
push eax  +
lea eax [ebp+var_8] +
add edi ebx +
push eax  +
mov [ebp+var_4] edi +
call sub_101C37D  +
test eax eax +
jnz loc_105E63B  +
push 8  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_101C95F  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
mov [eax+4] edi +
mov ecx [ebp+arg_8] +
push eax  +
call sub_101C2D1  +
mov [eax] ebx +
inc ebx  +
dec [ebp+arg_C]  +
jz loc_101C91E  +
mov edi [ebp+arg_14] +
jmp loc_101C88F  +
lea ecx [ebp+var_30] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_18] +
mov edi eax +
mov [ebp+var_18] esi +
call sub_100F62A  +
lea ecx [ebp+var_20] +
mov [ebp+var_20] esi +
call sub_100F62A  +
lea ecx [ebp+var_30] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
lea ecx [ebp+var_30] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
jmp loc_105E5DE  +
xor eax eax +
jmp loc_101C8CA  +
push edi  +
jmp loc_105E643  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-3Ch] +
mov [ebp-1Ch] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistviewc_2  +
lea ecx [ebp-3Ch] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+4Ch] +
lea ecx [esi+98h] +
mov [ebp-18h] eax +
cmp ecx ebx +
jz loc_101C9BC  +
cmp [ecx+4] ebx +
jnz loc_101CAEB  +
push 0Ah  +
push 14h  +
push 21h  +
push 10h  +
push 10h  +
call ?Create@CImageList@@QAEHHHIHH@Z  +
test eax eax +
jz loc_105E45C  +
push 0Ah  +
push 14h  +
push 21h  +
push 20h  +
push 20h  +
lea ecx [esi+0A0h] +
call ?Create@CImageList@@QAEHHHIHH@Z  +
test eax eax +
jz loc_105E45C  +
mov edi offset off_1008170 +
mov [ebp-28h] ebx +
mov [ebp-2Ch] edi +
mov [ebp-20h] ebx +
mov [ebp-24h] edi +
push 9Eh  +
lea eax [ebp-2Ch] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_101C4B3  +
test al al +
jz loc_105E43E  +
push 9Fh  +
lea eax [ebp-24h] +
push eax  +
call sub_101C4B3  +
test al al +
jz loc_105E43E  +
mov eax [esi] +
push 0FFFF00FFh  +
push ebx  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-28h]  +
push 3951589h  +
push esi  +
call dword ptr [eax+58h]  +
push eax  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E43E  +
mov eax [esi+9Ch] +
lea ecx [ebp-10h] +
push ecx  +
lea ecx [ebp-14h] +
push ecx  +
push 10h  +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
mov ebx ds:?LoadStandardOverlays@@YGJPAU_IMAGELIST@@HPAH1@Z +
push eax  +
call ebx  +
push eax  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-3Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
test eax eax +
jl loc_105E417  +
mov eax [esi+0A4h] +
lea ecx [ebp-10h] +
push ecx  +
lea ecx [ebp-14h] +
push ecx  +
push 20h  +
push eax  +
call ebx  +
push eax  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-3Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
test eax eax +
jl loc_105E4BC  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-24h] edi +
call sub_100F62A  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
mov [ebp-2Ch] edi +
call sub_100F62A  +
xor ebx ebx +
mov ecx [ebp-18h] +
xor edi edi +
inc edi  +
push edi  +
lea eax [esi+98h] +
push eax  +
call sub_101CBA7  +
mov ecx [ebp-18h] +
push ebx  +
lea eax [esi+0A0h] +
push eax  +
call sub_101CBA7  +
mov ecx [esi+4Ch] +
call sub_100E4E1  +
cmp eax ebx +
jz loc_101CB31  +
mov esi [esi+0C4h] +
mov eax [eax+20h] +
push esi  +
push ebx  +
push 1208h  +
push eax  +
call ds:SendMessageW  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-1Ch] edi +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101CBB6  +
mov eax [eax+4] +
push eax  +
push [ebp+wParam]  +
push 1003h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
push eax  +
call ?FromHandle@CImageList@@SGPAV1@PAU_IMAGELIST@@@Z  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
test [ebp+arg_8] 0FF000000h +
mov ecx [ebp+arg_0] +
push edi  +
jz loc_105E0DB  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
mov esi offset off_1008170 +
mov [ebp+var_8] esi +
call sub_101CC22  +
lea ecx [ebp+var_8] +
mov edi eax +
mov [ebp+var_8] esi +
call sub_100F62A  +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_105E0D4  +
mov edx [eax+4] +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101CC3F  +
mov eax [eax+4] +
push edx  +
push eax  +
push dword ptr [ecx+4]  +
call sub_101C58F  +
pop ebp  +
retn 8  +
***
xor eax eax +
jmp loc_101C3D5  +
***
push 1  +
push dword ptr [esi+4]  +
mov ecx esi +
call sub_101C64D  +
jmp loc_101C2F3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
lea ecx [ebp+var_14] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistviewc_0  +
lea ecx [ebp+var_14] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_0] +
cmp [esi+8Ch] edi +
mov ebx [esi+4Ch] +
setnle byte ptr [ebp+arg_0+3]  +
cmp byte ptr [ebp+arg_0+3] 0 +
mov [ebp+var_4] ebx +
jnz loc_1054A79  +
lea ecx [esi+1A8h] +
call sub_1018278  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_101CCCD  +
cmp byte ptr [ebp+arg_0+3] al +
jnz loc_1054CCD  +
lea ecx [ebp+var_14] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_14] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistviewc_1  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push 3951589h  +
push esi  +
call dword ptr [eax+30h]  +
lea ecx [esi+0A8h] +
call sub_1017FF8  +
lea ecx [esi+98h] +
call ?DeleteImageList@CImageList@@QAEHXZ  +
lea ecx [esi+0A0h] +
call ?DeleteImageList@CImageList@@QAEHXZ  +
lea eax [ebp+var_20] +
push eax  +
mov ecx esi +
call sub_101C971  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp+var_10] +
call edi  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_101CE0F  +
mov eax [esi] +
push ebx  +
push esi  +
call dword ptr [eax+2Ch]  +
test eax eax +
jge loc_101CDB6  +
mov ecx [esi+4Ch] +
cmp ecx ebx +
jz loc_101CDE0  +
lea eax [ebp+var_20] +
push eax  +
call sub_101CE6A  +
push eax  +
lea ecx [ebp+var_10] +
call edi  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E666  +
push ebx  +
lea ecx [esi+0E4h] +
mov [esi+0D4h] ebx +
call sub_101C50A  +
push ebx  +
lea ecx [esi+118h] +
call sub_101C50A  +
lea ecx [ebp+var_10] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push offset aCamclistviewSc  +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [esi+0E8h] +
mov byte ptr [esi+0F9h] 1 +
call sub_100B8AF  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jl loc_101CF3A  +
mov esi [ebp+arg_0] +
cmp edi [esi+94h] +
jl loc_1054C4F  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push dword ptr [ebp+10h]  +
mov ecx ebx +
push esi  +
call sub_101CF67  +
cmp eax 1 +
jnz loc_100D1D2  +
xor esi esi +
inc esi  +
jmp loc_100D1E2  +
***
call sub_100C4D0  +
mov esi ecx +
push 0  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewDispat  +
lea ecx [ebp-34h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101CFA8  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105BB06  +
mov edi [ebp+8] +
mov ecx [edi+8] +
xor ebx ebx +
inc ebx  +
mov [ebp-18h] ebx +
cmp ecx 0FFFFFF8Fh +
jbe loc_1054FA1  +
cmp ecx 0FFFFFF98h +
jz loc_101D076  +
cmp ecx 0FFFFFF9Bh +
jz loc_105BE87  +
cmp ecx 0FFFFFFF4h +
jz loc_1056F79  +
cmp ecx 0FFFFFFFBh +
jz loc_105BE35  +
cmp ecx 0FFFFFFFDh +
jz loc_105BE29  +
cmp ecx 0FFFFFFFEh +
jz loc_105BE39  +
and dword ptr [ebp-18h] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-34h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
lea esp [ebp-64h] +
call sub_100C50D  +
retn 8  +
mov eax [ecx] +
jmp dword ptr [eax+14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-34h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax ebx +
jmp loc_101D007  +
***
mov edi edi +
push esi  +
push 0  +
push offset off_10F6DC0  +
push offset off_10F6DDC  +
push 0  +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
push eax  +
call __RTDynamicCast  +
mov esi eax +
add esp 14h +
test esi esi +
jz loc_101D0C5  +
push offset off_100A418  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_101D0C5  +
mov eax esi +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov eax offset off_100A418 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_101D0F0  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_0]  +
call sub_101D111  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_101D168  +
test al al +
jnz loc_105848C  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_100CC42  +
test al al +
jz loc_101D15B  +
mov ecx [esi+18h] +
cmp ecx 8 +
jb loc_101D1A3  +
mov eax [esi+4] +
push [ebp+arg_4]  +
push edi  +
push ecx  +
push eax  +
call sub_100CE93  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_100CD14  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+18h] +
lea eax [ecx+4] +
cmp esi 8 +
jnb loc_102BC07  +
mov edx eax +
cmp [ebp+arg_0] edx +
jb loc_101D19C  +
cmp esi 8 +
jnb loc_103AD1C  +
mov ecx [ecx+14h] +
lea eax [eax+ecx*2] +
cmp eax [ebp+arg_0] +
ja loc_1057F0D  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
lea eax [esi+4] +
jmp loc_101D146  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_100CD14  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_101D0E4  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100C4D0  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101D1FD  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105B478  +
mov eax [esi+238h] +
shr eax 3 +
xor edi edi +
test al 1 +
jnz loc_105B48F  +
mov ecx [esi+174h] +
cmp ecx edi +
jz loc_105B524  +
call sub_100C573  +
lea edi [esi+1F4h] +
push edi  +
push eax  +
push dword ptr [esi+174h]  +
call sub_101D2D4  +
mov eax [edi] +
call sub_100C50D  +
retn   +
***
mov eax [ecx+0A4h] +
mov eax [eax+0D8h] +
retn   +
***
push edi  +
push ebx  +
mov ecx esi +
call sub_100C803  +
push eax  +
push esi  +
call sub_101D2D4  +
mov eax [edi] +
cmp dword ptr [eax-8] 0 +
jg loc_105B462  +
push ebx  +
mov ecx esi +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx esi +
mov [ebp-30h] eax +
call sub_101D243  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-2Ch] +
mov esi eax +
mov dword ptr [ebp-14h] 7 +
call sub_100CD14  +
mov eax [esi] +
lea ecx [ebp-2Ch] +
push ecx  +
push dword ptr [ebp-30h]  +
mov [ebp-4] ebx +
push esi  +
call dword ptr [eax+14h]  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jb loc_105B470  +
push eax  +
mov ecx edi +
call ??YCString@@QAEABV0@PBG@Z  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100CD3C  +
jmp loc_101D313  +
***
call sub_100C4D0  +
mov esi [ebp+8] +
mov ebx [ebp+0Ch] +
mov edi [ebp+10h] +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101D2FF  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105B44B  +
test ebx ebx +
jnz loc_101D25B  +
push offset word_100A5FC  +
mov ecx edi +
call ??4CString@@QAEABV0@PBG@Z  +
call sub_100C50D  +
retn 0Ch  +
***
mov edi edi +
push esi  +
lea esi [ecx+1Ch] +
cmp dword ptr [esi] 0 +
jnz loc_101D33B  +
push 1  +
push 0  +
push offset stru_101D340  +
mov ecx esi +
call sub_101D355  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
test eax eax +
jnz loc_105F47A  +
test byte ptr [ebp+pUnknown] 14h +
jnz loc_105F485  +
push esi  +
push offset stru_101D394  +
push [ebp+pUnknown]  +
push [ebp+pUnkOuter]  +
push [ebp+rclsid]  +
call ds:CoCreateInstance  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_101D320  +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101D3C1  +
jmp loc_100D2A9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101D3E5  +
test eax eax +
jl loc_105F509  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_105F4F8  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset loc_101D428  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jl loc_105F4F1  +
push [ebp+arg_0]  +
call sub_100CA34  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
inc ecx  +
xor al 9Fh +
xor eax 11D0BD4Ah +
mov cl 88h +
add [edx+69C93800h] ch +
***
mov byte ptr [esi+1B2h] 1 +
pop esi  +
retn   +
***
mov eax ebx +
jmp loc_101239F  +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_1002492  +
jmp sub_1001FCF  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_10F52D8 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_100B9EC +
call sub_101D4D8  +
mov eax [ebp+arg_0] +
mov [esi+4] eax +
mov byte ptr [esi+14h] 1 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101D4F2  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_101D510  +
test eax eax +
jz loc_101D501  +
mov [eax] eax +
lea ecx [eax+4] +
test ecx ecx +
jz locret_101D50A  +
mov [ecx] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1059DAF  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 3Ch +
jb loc_1059DB6  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [esi+4] +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_101D568  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_101D578  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi esi +
jz loc_101D5A3  +
call sub_100EBDB  +
mov eax [edi] +
mov [esi] eax +
test eax eax +
jz loc_101D5A3  +
inc dword ptr [eax+4]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+10h] ebx +
jnz loc_1065A9A  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi ebx +
jle loc_1065ACB  +
cmp edi [esi+0Ch] +
jbe loc_101D6DA  +
mov eax [esi+8] +
mov ecx edi +
sub ecx eax +
push ecx  +
mov ecx esi +
call sub_100AD76  +
test eax eax +
jl loc_1065AFC  +
mov ebx [esi+4] +
mov dword ptr [esi+10h] 1 +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+10h] 0 +
jz loc_1065B31  +
mov ecx [esi+0Ch] +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi ecx +
mov ebx offset dword_101D758 +
jg loc_1065B62  +
mov eax [esi+4] +
xor edx edx +
mov [eax+ecx*2] dx +
mov eax [esi+4] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101D728  +
sub eax ecx +
sar eax 1 +
test edi edi +
jge loc_103F80A  +
mov edi eax +
mov eax [esi+4] +
xor ecx ecx +
mov [esi+8] edi +
mov [eax+edi*2] cx +
and [esi+10h] ecx +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp dword_10F5320 0 +
push ebx  +
mov ebx ds:GetVersion +
push esi  +
jz loc_103F24B  +
mov eax dword_10F981C +
mov esi ds:__imp_GetProcAddress +
test eax eax +
jnz loc_105D2BD  +
push edi  +
mov edi [ebp+arg_4] +
mov eax [edi] +
test eax eax +
jz loc_103F274  +
push [ebp+lpProcName]  +
push eax  +
call esi  +
mov [ebp+var_4] eax +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
cmp dword_10F6C64 esi +
jnz locret_101D9D4  +
cmp [ebp-20h] esi +
jz locret_101D9D4  +
cmp [ebp-1Ch] esi +
jz loc_105D40B  +
xor edi edi +
push dword ptr [ebp-24h]  +
push esi  +
call sub_100B053  +
cmp [ebp-1Ch] esi +
jz loc_105D418  +
retn   +
***
call sub_100A4F0  +
xor esi esi +
mov [ebp-1Ch] esi +
mov [ebp-20h] esi +
mov [ebp-24h] esi +
mov [ebp-4] esi +
cmp dword_10F6C64 esi +
jnz loc_101DA0C  +
lea eax [ebp-24h] +
push eax  +
call sub_100B120  +
mov [ebp-20h] eax +
cmp eax esi +
jz loc_101DA21  +
push dword ptr [ebp+8]  +
push offset unk_10F5618  +
push offset off_101DA38  +
call sub_101D952  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_101D9AA  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 4  +
***
mov eax dword_10F5334 +
cmp eax edi +
jnz loc_101DA84  +
push offset aQueryactctxw  +
call sub_104098F  +
cmp eax edi +
jz loc_100B0E4  +
mov dword_10F5334 eax +
push edi  +
push 8  +
lea ecx [ebp-238h] +
push ecx  +
push 1  +
push edi  +
mov esi offset dword_10F52C8 +
push esi  +
push 80000010h  +
call eax  +
cmp eax edi +
jz loc_100B0E4  +
mov eax [ebp-238h] +
cmp eax edi +
jnz loc_101DB69  +
push offset aGetmodulehandl  +
call sub_104098F  +
cmp eax edi +
jz loc_100B0E4  +
lea ecx [ebp-230h] +
push ecx  +
push esi  +
push 6  +
call eax  +
test eax eax +
jz loc_100B0E4  +
xor eax eax +
mov [ebp-1Eh] ax +
mov [ebp-20h] ax +
push 105h  +
lea eax [ebp-228h] +
push eax  +
push dword ptr [ebp-230h]  +
call ds:GetModuleFileNameW  +
cmp eax edi +
jz loc_100B0E4  +
cmp [ebp-20h] di +
jnz loc_105D34D  +
mov dword ptr [ebp-258h] 20h +
mov dword ptr [ebp-254h] 88h +
lea eax [ebp-228h] +
mov [ebp-250h] eax +
mov dword ptr [ebp-244h] 3 +
mov eax [ebp-230h] +
mov [ebp-23Ch] eax +
lea eax [ebp-258h] +
push eax  +
call sub_1040951  +
mov [ebp-238h] eax +
cmp eax 0FFFFFFFFh +
jz loc_105D35A  +
mov dword_10F52E4 1 +
mov dword_10F52C8 eax +
lea ecx [ebp-22Ch] +
push ecx  +
push eax  +
call sub_100B179  +
test eax eax +
jz loc_100B0E1  +
mov [ebp-4] edi +
mov dword ptr [ebp-278h] 40h +
lea eax [ebp-278h] +
push eax  +
mov esi offset aComctl32_dll +
push esi  +
push 2  +
push edi  +
push edi  +
call sub_103F2B6  +
test eax eax +
jz loc_101DBB1  +
push esi  +
call ds:LoadLibraryW  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_103F2FE  +
jmp loc_100B0E1  +
***
call sub_100A4F0  +
or dword ptr [ebp-1Ch] 0FFFFFFFFh +
mov esi dword_10F5344 +
xor edi edi +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_101DC58  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_105E278  +
mov [ebp-4] edi +
cmp esi edi +
jz loc_101DCD8  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_101DCA9  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 0Ch  +
***
cmp dword_10F6C64 edi +
jnz locret_101DCD7  +
xor eax eax +
cmp dword ptr [ebp-1Ch] 0FFFFFFFFh +
setz al  +
mov esi eax +
cmp esi edi +
jnz loc_105E287  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jnz loc_105E294  +
retn   +
***
push offset aImagelist_repl  +
call sub_101D9DA  +
mov esi eax +
cmp esi edi +
jz loc_101DC6D  +
mov dword_10F5344 esi +
jmp loc_101DC5F  +
***
mov ecx offset dword_10F56EC +
jmp ??1CString@@QAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call SysAllocString  +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
xor eax eax +
mov [esi] eax +
push eax  +
lea ecx [esi+4] +
mov [ebp-4] eax +
call sub_101E2B5  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call SysFreeString  +
push [ebp+arg_0]  +
call SysAllocString  +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
push [ebp+arg_0]  +
push ecx  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi] 0 +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
push esi  +
call sub_100CA9D  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
push 3  +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-1Ch] edi +
mov [ebp-18h] ebx +
push offset aCxmlelementcol  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi] +
push 80004002h  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-18h] ebx +
jnz loc_10666CC  +
mov esi [esi] +
push dword ptr [ebp+8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+20h]  +
mov [ebp-1Ch] edi +
mov [ebp-18h] eax +
cmp eax ebx +
jnz loc_10666F1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] ebx +
push offset aCpersistorPers  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [esi+0Ch] bl +
jz loc_104D583  +
mov [ebp-10h] ebx +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [esi+8] +
mov byte ptr [ebp-4] 1 +
call sub_1021B0D  +
cmp al bl +
jz loc_102908C  +
push dword ptr [ebp-10h]  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_1021DBA  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] ebx +
jnz loc_10674F0  +
push dword ptr [ebp-10h]  +
call SysFreeString  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-18h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-28h] 3 +
mov [ebp-24h] ebx +
xor esi esi +
inc esi  +
push offset aCpersistorGete  +
lea ecx [ebp-28h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+8] +
push ebx  +
call sub_101E2B5  +
push ebx  +
lea ecx [ebp-14h] +
mov [ebp-18h] esi +
call sub_101DDF6  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea ecx [edi+8] +
mov byte ptr [ebp-4] 2 +
call sub_101E68B  +
mov [ebp-10h] ebx +
cmp [ebp-14h] ebx +
jz loc_1067781  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-14h] +
call sub_101DE26  +
cmp [ebp-10h] ebx +
jz loc_1067781  +
mov eax [ebp+14h] +
xor esi esi +
cmp eax ebx +
jge loc_103B566  +
cmp esi [ebp-10h] +
jge loc_101E0D9  +
push ebx  +
lea ecx [ebp+0Ch] +
call sub_101E2B5  +
lea eax [ebp+0Ch] +
push eax  +
push esi  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call sub_101E13F  +
cmp [ebp+0Ch] ebx +
jz loc_103B571  +
cmp [ebp+10h] ebx +
jnz sub_1021FB7  +
mov ecx [ebp+8] +
lea eax [ebp+0Ch] +
push eax  +
call sub_101E823  +
mov eax [ebp+0Ch] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_101E0D9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [ebp+8] +
cmp [esi] ebx +
jz loc_1067794  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_101E0F5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-28h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] ebx +
push offset aCxmlelementc_0  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] ebx +
jnz loc_1066D02  +
push ebx  +
lea ecx [ebp-14h] +
call sub_101E2B5  +
mov ecx [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_101E823  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jnz loc_1066D28  +
mov eax [edi] +
push 80004002h  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] ebx +
jnz loc_1066D33  +
mov [ebp-10h] ebx +
mov eax [edi] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 4 +
push eax  +
call dword ptr [ecx+1Ch]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_1066D59  +
push dword ptr [ebp-10h]  +
lea ecx [ebp+8] +
call sub_101E2B5  +
mov ecx [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_101E823  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_101E252  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_101E262  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi] 0 +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
call sub_101E2E4  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset loc_101E2FC  +
push [ebp+arg_0]  +
push ecx  +
call sub_101E311  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_10594E9  +
mov eax [ebp+arg_4] +
push edi  +
mov edi [esi] +
and dword ptr [esi] 0 +
test eax eax +
jnz loc_101E33F  +
test edi edi +
jnz loc_10594F0  +
mov eax [esi] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
mov ecx [eax] +
push esi  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx]  +
jmp loc_101E32F  +
***
push 84h  +
mov eax offset byte_10D4B53 +
call sub_100C4D0  +
mov esi [ebp+8] +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-38h] +
mov [ebp-28h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcdocPersist  +
lea ecx [ebp-38h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [edi+7Ch] ebx +
jz loc_104D3BA  +
mov ecx [edi+78h] +
mov eax [edi+70h] +
push 80004003h  +
neg eax  +
push ecx  +
push dword ptr [edi+0B0h]  +
sbb eax eax +
and eax offset dword_10F54B0 +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_100CB6E  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_101E588  +
lea ecx [ebp-60h] +
call sub_100AD56  +
cmp byte ptr [esi+0Ch] 0 +
mov byte ptr [ebp-4] 2 +
jz loc_104D2D7  +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [ebp-60h] +
mov [eax+4] ecx +
mov [ebp-48h] esp +
mov dword ptr [eax] 9 +
push ds:off_101E584  +
mov ecx esi +
call sub_101DF07  +
mov al [esi+0Ch] +
test al al +
jz loc_101E497  +
mov eax [ebp-5Ch] +
mov esi ds:wcstol +
push 0Ah  +
lea ecx [ebp-24h] +
push ecx  +
push eax  +
mov ebx eax +
mov [ebp-24h] eax +
call esi  +
mov ecx [ebp-24h] +
mov [ebp-3Ch] eax +
add esp 0Ch +
xor eax eax +
cmp ecx ebx +
jz loc_101E467  +
cmp word ptr [ecx] 2Eh +
jnz loc_101E459  +
push 0Ah  +
lea eax [ebp-24h] +
lea ebx [ecx+2] +
push eax  +
push ebx  +
call esi  +
mov ecx [ebp-24h] +
add esp 0Ch +
cmp ecx ebx +
jz loc_101E467  +
cmp word ptr [ecx] 2Eh +
jz loc_101E5BA  +
movzx ecx byte ptr [ebp-3Ch] +
shl ecx 8 +
movzx eax al +
or ecx eax +
shl ecx 8 +
cmp ecx 20000h +
mov [edi+0A4h] ecx +
jl loc_101E5CE  +
cmp ecx 30000h +
jg loc_101E5CE  +
mov esi [ebp-28h] +
cmp byte ptr [esi+0Ch] 0 +
mov ecx esi +
jz loc_104D3B0  +
call sub_103B57F  +
lea ecx [edi+7Ch] +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+48h]  +
mov ebx eax +
neg ebx  +
sbb bl bl +
lea ecx [edi+7Ch] +
inc bl  +
call sub_100A5CF  +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+4Ch]  +
mov esi [ebp-28h] +
mov al [esi+0Ch] +
xor ecx ecx +
test al al +
setnz cl  +
lea ecx ds:1[ecx*8] +
mov [ebp-24h] ecx +
xor edx edx +
test al al +
jz loc_104AF4A  +
cmp dword ptr [ebp-24h] 1 +
setnl dl  +
xor ecx ecx +
cmp edx ecx +
jz loc_101EFA7  +
mov edx [ebp-24h] +
dec edx  +
mov [ebp-48h] edx +
cmp edx 8 +
ja loc_101E54E  +
jmp ds:off_101E662[edx*4]  +
mov eax [edi+70h] +
push ecx  +
push offset off_10F87D8  +
push offset off_10F8820  +
push ecx  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
mov [ebp-40h] eax +
test eax eax +
jz loc_101E627  +
mov eax [ebp-40h] +
mov ecx eax +
push 0  +
add eax 4 +
neg ecx  +
sbb ecx ecx +
and ecx eax +
push ecx  +
mov ecx esi +
call sub_101EA69  +
mov al [esi+0Ch] +
test al al +
jz loc_104AF56  +
mov ecx [ebp-48h] +
jmp loc_101E4E2  +
***
lea ecx [ebp-38h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101E3DD  +
***
mov eax [eax+4] +
jmp loc_104D2F4  +
***
lea ecx [ebp-38h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104D32A  +
***
lea ecx [ebp-38h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104D34F  +
***
push 0Ah  +
lea eax [ebp-24h] +
add ecx 2 +
push eax  +
push ecx  +
call esi  +
add esp 0Ch +
jmp loc_101E467  +
***
push 8000FFFFh  +
lea ecx [ebp-38h] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp loc_101E494  +
***
lea ecx [ebp-38h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101E54E  +
***
lea ecx [ebp-38h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102BD14  +
***
lea ecx [ebp-38h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102BD59  +
***
lea ecx [ebp-38h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102BD8D  +
***
lea ecx [ebp-38h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102BDC6  +
***
push 8000FFFFh  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-38h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101E536  +
***
mov esi [ebp-28h] +
movzx ecx byte ptr [esi+0Ch] +
push ecx  +
push offset dword_106BA10  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_101EFF0  +
***
call sub_1001F95  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] ebx +
push offset aCxmlelementGet  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] ebx +
jnz loc_1066974  +
push ebx  +
lea ecx [ebp-14h] +
call sub_101DDF6  +
mov ecx [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_101E823  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jnz loc_106699A  +
mov eax [edi] +
push 80004002h  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] ebx +
jnz loc_10669A5  +
mov [ebp-10h] ebx +
push dword ptr [ebp+8]  +
mov esi [edi] +
lea ecx [ebp+8] +
call sub_101DD5D  +
mov eax [eax] +
mov ecx [esi] +
lea edx [ebp-10h] +
push edx  +
push eax  +
push esi  +
mov byte ptr [ebp-4] 5 +
call dword ptr [ecx+90h]  +
push 3  +
pop esi  +
push dword ptr [ebp+8]  +
mov [ebp-24h] esi +
mov [ebp-20h] eax +
mov byte ptr [ebp-4] 4 +
call SysFreeString  +
cmp [ebp-20h] ebx +
jnz loc_10669CB  +
push dword ptr [ebp-10h]  +
lea ecx [ebp+8] +
call sub_101DDF6  +
mov ecx [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_101E823  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_101E7B9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_101E7C9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
push esi  +
call sub_100CA9D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ds:off_101E8B4 +
retn   +
***
push ecx  +
mov eax esp +
lea ecx [esi+4] +
mov [eax+4] ecx +
mov [ebp+8] esp +
mov dword ptr [eax] 1 +
push ds:off_101E984  +
mov ecx edi +
call sub_101DF07  +
cmp [edi+0Ch] bl +
jz loc_104AF3F  +
push ebx  +
push ds:off_1021A80  +
mov ecx edi +
call sub_10226DF  +
cmp al bl +
jnz loc_1059DE2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-10h] edi +
xor ebx ebx +
push ebx  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcdocPersi_1  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
add edi 0A4h +
mov [ebp-14h] edi +
mov [ebp-18h] edi +
mov [edi] bl +
mov esi [ebp+8] +
mov byte ptr [ebp-4] 1 +
cmp [esi+0Ch] bl +
jz sub_104CAEC  +
push ds:off_102BAFC  +
lea ecx [ebp-60h] +
call sub_103D327  +
push ebx  +
lea eax [ebp-60h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_101EA69  +
mov esi [ebp-58h] +
cmp esi [ebp-54h] +
jnz loc_1022522  +
lea ecx [ebp-5Ch] +
mov byte ptr [ebp-4] 1 +
call sub_10293F2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
mov byte ptr [edi] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-2Ch] 3 +
mov [ebp-28h] ebx +
push offset aCpersistorPe_0  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+8]  +
test al al +
jnz loc_102D494  +
push dword ptr [ebp+0Ch]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
push eax  +
push edi  +
lea ecx [ebp-68h] +
call sub_101ECB0  +
mov eax [esi] +
lea ecx [ebp-68h] +
push ecx  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+4]  +
lea ecx [ebp-68h] +
mov [ebp-4] bl +
call sub_101EB25  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [esi+8] +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_101EB47  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101D546  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_101DD84  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [esi+8] +
call sub_101E2B5  +
push ecx  +
mov ecx esp +
mov [ebp-14h] esp +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 1 +
mov byte ptr [esi+0Ch] 0 +
mov byte ptr [esi+0Dh] 0 +
mov dword ptr [esi+10h] 1 +
call sub_101ED6F  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_101EBC1  +
mov al [ebp+10h] +
mov [esi+0Dh] al +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
inc dword ptr [eax]  +
mov [ebp-4] ebx +
mov dword ptr [ebp-1Ch] 3 +
mov [ebp-18h] ebx +
push offset aCpersistorBeco  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [esi+8] +
call sub_101E823  +
mov edi [ebp+8] +
push edi  +
mov ecx esi +
mov [esi+0Dh] bl +
call sub_101EC83  +
mov al [edi+0Ch] +
mov [esi+0Ch] al +
mov eax [edi+10h] +
lea ecx [ebp-1Ch] +
mov [esi+10h] eax +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+0Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_101EC40  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push dword ptr [edi]  +
mov esi ecx +
push esi  +
call sub_100CA9D  +
add edi 4 +
push edi  +
lea ecx [esi+4] +
call sub_101E823  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
call sub_101DD84  +
xor ebx ebx +
push ebx  +
lea ecx [esi+8] +
mov [ebp-4] ebx +
call sub_101E2B5  +
push ebx  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
mov [esi+0Ch] bl +
mov [esi+0Dh] bl +
mov dword ptr [esi+10h] 1 +
call sub_101E2B5  +
mov edi [ebp+8] +
mov byte ptr [ebp-4] 2 +
lea eax [ebp+10h] +
mov ecx edi +
cmp [edi+0Ch] bl +
jz loc_104BCB3  +
cmp [edi+0Dh] bl +
jnz loc_103E2AA  +
push 0FFFFFFFFh  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_101DFF7  +
mov byte ptr [ebp-4] 5 +
push eax  +
lea ecx [ebp-10h] +
call sub_101E823  +
mov eax [ebp+10h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_101ED38  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push ecx  +
lea eax [ebp-10h] +
mov ecx esp +
mov [ebp+10h] esp +
push eax  +
call sub_101ED6F  +
push edi  +
mov ecx esi +
call sub_101EBC1  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_101ED60  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi] 0 +
mov eax [ebp+8] +
push dword ptr [eax]  +
and dword ptr [ebp-4] 0 +
push esi  +
call sub_100CA9D  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+38h] 0 +
mov [esi+30h] eax +
mov eax [ebp+arg_4] +
push edi  +
mov [esi+34h] eax +
mov dword ptr [esi] 44h +
xor eax eax +
lea edi [esi+3Ch] +
stos   +
push 2Ch  +
stos   +
lea edi [esi+4] +
push 0  +
push edi  +
call memset  +
add esp 0Ch +
mov dword ptr [edi] 2Ch +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
lea ecx [edi+7Ch] +
call sub_100A5CF  +
mov ecx [eax] +
movzx edx bl +
push edx  +
push eax  +
call dword ptr [ecx+4Ch]  +
lea esi [edi-64h] +
mov eax [esi] +
push 0  +
mov ecx esi +
call dword ptr [eax+64h]  +
mov eax [esi] +
mov ecx esi +
mov byte ptr [edi+0BFh] 0 +
call dword ptr [eax+60h]  +
test eax eax +
jz loc_101EFED  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101EFED  +
cmp byte ptr [eax+19h] 3 +
jnb loc_101E643  +
mov esi [ebp-28h] +
cmp byte ptr [esi+0Ch] 0 +
jz loc_104C7E0  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 0 +
call sub_100A77D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-38h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_100C50D  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+174h] +
call sub_100C573  +
mov [esi+1D8h] eax +
pop esi  +
retn   +
***
push 54h  +
mov eax offset byte_10D5EA5 +
call sub_1001F95  +
mov esi ecx +
mov eax [esi+4] +
mov edi [ebp+8] +
add eax 4 +
mov [ebp-18h] eax +
lea eax [ebp-18h] +
push eax  +
push ds:off_101F160  +
mov ecx edi +
mov dword ptr [ebp-14h] offset unk_10F5BE8 +
mov dword ptr [ebp-10h] 3 +
call sub_101F3ED  +
mov eax [esi+4] +
xor ebx ebx +
push ebx  +
push ecx  +
push ecx  +
add eax 8 +
mov [ebp-24h] eax +
mov eax esp +
mov dword ptr [ebp-28h] offset off_101E844 +
mov dword ptr [ebp-20h] offset unk_10F5D10 +
mov dword ptr [ebp-1Ch] 0Ch +
lea ecx [ebp-28h] +
mov [eax+4] ecx +
mov [ebp+8] esp +
mov dword ptr [eax] 0Eh +
push ds:off_101F15C  +
mov ecx edi +
call sub_101DF07  +
mov eax [esi+4] +
add eax 0Ch +
push eax  +
push ds:off_101F154  +
lea ecx [ebp-44h] +
call sub_101F169  +
push ebx  +
push eax  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_101EA69  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call sub_100A77D  +
mov eax [esi+4] +
add eax 14h +
push eax  +
push ds:off_101F150  +
lea ecx [ebp-44h] +
call sub_101F169  +
push ebx  +
push eax  +
mov ecx edi +
mov dword ptr [ebp-4] 1 +
call sub_101EA69  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call sub_100A77D  +
mov eax [esi+4] +
add eax 1Ch +
push eax  +
push ds:off_101F158  +
lea ecx [ebp-60h] +
call sub_101FD65  +
push ebx  +
push eax  +
mov ecx edi +
mov dword ptr [ebp-4] 2 +
call sub_101EA69  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-5Ch] +
call sub_100A77D  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+4] +
mov ecx edi +
mov dword ptr [esi] offset off_101F1B4 +
call sub_100AD56  +
mov eax [ebp+0Ch] +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
mov ecx edi +
mov [esi+18h] eax +
call sub_100AE0E  +
test eax eax +
jl loc_1066478  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi [ebp+0Ch] +
xor ebx ebx +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
mov [ebp-10h] esp +
push 8  +
pop edi  +
lea ecx [esi+48h] +
mov [eax+4] ecx +
mov ecx [ebp+8] +
mov [eax] edi +
push ds:off_101E89C  +
call sub_101DF07  +
mov ecx [ebp+8] +
push ebx  +
lea eax [ebp-18h] +
push eax  +
mov dword ptr [ebp-18h] offset off_101D81C +
mov [ebp-14h] esi +
call sub_101EA69  +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [esi+34h] +
mov [eax+4] ecx +
mov ecx [ebp+8] +
mov [ebp+0Ch] esp +
mov [eax] edi +
push ds:off_101F3CC  +
call sub_101DF07  +
push 1  +
push ecx  +
push ecx  +
mov ecx esp +
lea eax [esi+5Ch] +
or dword ptr [eax] 0FFFFFFFFh +
mov [ecx] edi +
mov [ecx+4] eax +
mov ecx [ebp+8] +
mov [ebp+0Ch] esp +
push ds:off_101F3D0  +
call sub_101DF07  +
mov eax [ebp+8] +
cmp [eax+0Ch] bl +
jz loc_101F2B9  +
push 64h  +
pop ecx  +
mov dword ptr [esi+38h] 1 +
mov [esi+2Ch] ebx +
mov [esi+30h] ecx +
mov [esi+58h] ecx +
push ebx  +
push ds:off_101F3C8  +
lea ecx [ebp-54h] +
push eax  +
call sub_101ECB0  +
push ebx  +
push ecx  +
push ecx  +
lea eax [esi+3Ch] +
mov [ebp-3Ch] eax +
mov eax esp +
mov dword ptr [ebp-40h] offset off_101E844 +
mov dword ptr [ebp-38h] offset unk_10F5C60 +
mov dword ptr [ebp-34h] 5 +
lea ecx [ebp-40h] +
mov [eax+4] ecx +
mov [ebp+8] esp +
mov dword ptr [eax] 0Eh +
push ds:off_101EF38  +
lea ecx [ebp-54h] +
mov [ebp-4] ebx +
call sub_101DF07  +
lea eax [esi+40h] +
mov [ebp-24h] eax +
lea eax [ebp-24h] +
push eax  +
push ds:off_101F3E4  +
lea ecx [ebp-54h] +
mov dword ptr [ebp-20h] offset unk_10F5DD8 +
mov dword ptr [ebp-1Ch] 0Eh +
call sub_101F3ED  +
lea eax [esi+44h] +
mov [ebp-30h] eax +
lea eax [ebp-30h] +
push eax  +
push ds:off_101F3E0  +
lea ecx [ebp-54h] +
mov dword ptr [ebp-2Ch] offset unk_10F5D70 +
mov dword ptr [ebp-28h] 0Dh +
call sub_101F3ED  +
lea ecx [esi+4Ch] +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
mov [eax+4] ecx +
mov [ebp+8] esp +
mov dword ptr [eax] 5 +
push ds:off_101F3D4  +
lea ecx [ebp-54h] +
call sub_101DF07  +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [esi+50h] +
mov [eax+4] ecx +
mov [ebp+8] esp +
mov [eax] edi +
push ds:off_101F3D8  +
lea ecx [ebp-54h] +
call sub_101DF07  +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
add esi 54h +
mov [ebp+8] esp +
mov [eax] edi +
mov [eax+4] esi +
push ds:off_101F3DC  +
lea ecx [ebp-54h] +
call sub_101DF07  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-54h] +
call sub_101EB25  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
mov ecx [ebp+arg_4] +
call sub_101F407  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_4] +
cmp byte ptr [ebx+0Ch] 0 +
push esi  +
push edi  +
mov esi ecx +
jz loc_104B346  +
and [ebp+var_4] 0 +
xor eax eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
cmp [esi+8] eax +
jbe loc_101F495  +
mov ecx [ebp+var_8] +
mov eax [esi+4] +
shl ecx 3 +
mov edi [ecx+eax] +
test edi edi +
jz loc_101F48A  +
mov eax edi +
and eax [ebp+var_4] +
mov byte ptr [ebp+arg_4+3] 0 +
cmp eax edi +
jz loc_104B352  +
cmp byte ptr [ebx+0Ch] 0 +
jz loc_104B362  +
push 1  +
push ecx  +
push ecx  +
mov eax esp +
lea edx [ebp+arg_4+3] +
mov dword ptr [eax] 6 +
mov [eax+4] edx +
mov eax [esi+4] +
push dword ptr [eax+ecx+4]  +
mov ecx ebx +
call sub_101DF07  +
movzx eax byte ptr [ebp+arg_4+3] +
neg eax  +
sbb eax eax +
and eax edi +
or [ebp+var_C] eax +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [esi+8] +
jb loc_101F432  +
cmp byte ptr [ebx+0Ch] 0 +
mov eax [ebp+var_4] +
mov [ebp+var_10] eax +
jz loc_104B371  +
push 1  +
push ecx  +
push ecx  +
mov eax esp +
push [ebp+arg_0]  +
lea ecx [ebp+var_10] +
mov [eax+4] ecx +
mov ecx ebx +
mov dword ptr [eax] 7 +
call sub_101DF07  +
mov eax [ebp+var_10] +
cmp byte ptr [ebx+0Ch] 0 +
jz loc_101F4D1  +
or eax [ebp+var_C] +
mov ecx [esi] +
mov [ecx] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov [esi+74h] eax +
mov [esi+1D0h] eax +
jl loc_101F615  +
inc eax  +
mov dword_10F52D0 eax +
cmp [ebp-4Ch] edi +
mov ecx ebx +
setnz al  +
movzx eax al +
push eax  +
call sub_1028B9A  +
push 2Ch  +
pop ebx  +
push ebx  +
lea eax [ebp-104h] +
push edi  +
push eax  +
call memset  +
mov ecx [ebp-14h] +
add esp 0Ch +
lea eax [ebp-104h] +
push eax  +
mov [ebp-104h] ebx +
call ?GetWindowPlacement@CWnd@@QBEHPAUtagWINDOWPLACEMENT@@@Z  +
test eax eax +
jz loc_101F668  +
mov eax [ebp-0F0h] +
mov [ebp-84h] eax +
mov eax [ebp-0ECh] +
mov [ebp-80h] eax +
call sub_101125C  +
mov ecx [ebp-74h] +
sub ecx [ebp-7Ch] +
cmp ecx eax +
jl loc_105C6E9  +
mov ebx [ebp-54h] +
mov al bl +
and al 1 +
mov [ebp-28h] al +
push dword ptr [ebp-28h]  +
lea edi [esi+1A0h] +
push 1  +
mov ecx edi +
call sub_1023016  +
shr ebx 0Eh +
and bl 1 +
movzx eax bl +
push eax  +
mov ecx edi +
call loc_1022FFB  +
mov ecx [ebp-14h] +
lea eax [ebp-98h] +
push eax  +
call ?SetWindowPlacement@CWnd@@QAEHPBUtagWINDOWPLACEMENT@@@Z  +
test eax eax +
jz loc_105C6F4  +
mov ecx [ebp-54h] +
test cl 20h +
jnz loc_105C707  +
test ecx 2000h +
jnz loc_105C713  +
test cl 40h +
jnz loc_105C71F  +
test cl cl +
js loc_105C72B  +
mov eax ecx +
shr eax 9 +
not al  +
and al 1 +
mov [esi+84h] al +
test ecx 1000h +
jnz loc_105C737  +
mov al [esi+1E0h] +
not al  +
test al 1 +
jz loc_105C746  +
push dword ptr [ebp-68h]  +
lea ebx [esi-58h] +
push dword ptr [ebp-64h]  +
mov ecx ebx +
push 0  +
call sub_1028B43  +
mov al [edi] +
and al 1 +
mov [ebp-28h] al +
push 0  +
push dword ptr [ebp-28h]  +
lea eax [ebp-38h] +
push eax  +
mov ecx ebx +
call sub_10254E2  +
mov byte ptr [ebp-4] 4 +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
call ebx  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105C75F  +
mov eax [esi+1E0h] +
shr eax 5 +
not al  +
lea ecx [esi-58h] +
test al 1 +
jz loc_105C76D  +
push dword ptr [ebp-40h]  +
push dword ptr [ebp-3Ch]  +
push 2  +
call sub_1028B43  +
mov eax [edi] +
shr eax 7 +
push 1  +
and al 1 +
mov [ebp-28h] al +
push 0  +
push dword ptr [ebp-28h]  +
lea eax [ebp-38h] +
push eax  +
lea ecx [esi-58h] +
call sub_102502E  +
mov byte ptr [ebp-4] 6 +
push eax  +
lea ecx [ebp-24h] +
call ebx  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105C785  +
xor ebx ebx +
push ebx  +
push 1  +
lea ecx [esi-58h] +
call sub_102583F  +
mov eax [ebp-58h] +
mov [esi+88h] eax +
mov eax [ebp-54h] +
test al 2 +
jnz loc_101F7F0  +
inc ebx  +
test al 4 +
jnz loc_101F7F7  +
or ebx 2 +
test al 8 +
jnz loc_101F7FE  +
or ebx 4 +
test al 10h +
jnz loc_101F805  +
or ebx 8 +
test eax 100h +
jnz loc_101F812  +
or ebx 80000000h +
mov eax [esi+204h] +
xor eax ebx +
test eax eax +
js loc_105C793  +
mov eax [esi+204h] +
xor eax ebx +
test al 0Fh +
jnz loc_105C7C8  +
lea eax [ebp-38h] +
lea edi [esi-58h] +
push eax  +
mov ecx edi +
call sub_1028CB1  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 8 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105C7E3  +
mov byte ptr [edi+1D5h] 0 +
mov byte ptr [edi+264h] 0 +
mov ecx [esi+2B8h] +
call sub_1025A65  +
lea ebx [esi-58h] +
mov ecx ebx +
call sub_101F020  +
mov eax [ebp+8] +
cmp byte ptr [eax+0Ch] 0 +
jz loc_101F94B  +
xor edi edi +
push edi  +
lea ecx [ebp-38h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [esi-18h] +
mov byte ptr [ebp-4] 9 +
cmp eax edi +
jz loc_105C7F1  +
mov eax [eax+0E0h] +
cmp eax edi +
jz loc_105C7F1  +
lea edx [ebp-0Dh] +
push edx  +
lea edx [ebp-14h] +
push edx  +
lea edx [ebp-0B0h] +
push edx  +
mov [ebp-14h] edi +
mov byte ptr [ebp-0Dh] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+38h]  +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105C7FF  +
push edi  +
push dword ptr [ebp-14h]  +
lea ecx [esi-14h] +
mov eax [ecx] +
lea edx [ebp-0D8h] +
push edx  +
call dword ptr [eax+34h]  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0Ah +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-0D8h] +
mov byte ptr [ebp-4] 9 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-38h] +
test al al +
jnz loc_104AF71  +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
cmp byte ptr [eax+0Ch] 0 +
jz loc_104AF5E  +
mov esi offset off_100B9EC +
lea ecx [ebp-0A8h] +
mov [ebp-0B0h] esi +
call sub_100ECBD  +
lea ecx [ebp-0C0h] +
mov [ebp-0C8h] esi +
call sub_100ECBD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
push esi  +
lea ecx [edi-64h] +
call sub_101F9DA  +
jmp loc_101E54E  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcdocPersi_0  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [esi+10Ch]  +
lea edi [esi+104h] +
push dword ptr [edi]  +
lea ecx [ebp-88h] +
call sub_101FB65  +
call sub_100ABA9  +
push 8000FFFFh  +
push eax  +
mov [ebp-10h] eax +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10597AC  +
mov ebx [ebp+8] +
cmp byte ptr [ebx+0Ch] 0 +
jz loc_104AEAC  +
push 0  +
lea eax [ebp-88h] +
push eax  +
mov ecx ebx +
call sub_101EA69  +
push 0  +
push ecx  +
push ecx  +
mov eax esp +
mov dword ptr [ebp-30h] offset off_101E844 +
mov [ebp-2Ch] edi +
mov dword ptr [ebp-28h] offset unk_10F5C1C +
mov dword ptr [ebp-24h] 4 +
lea ecx [ebp-30h] +
mov [eax+4] ecx +
mov [ebp+8] esp +
mov dword ptr [eax] 0Eh +
push ds:off_101DD1C  +
mov ecx ebx +
call sub_101DF07  +
cmp byte ptr [ebx+0Ch] 0 +
jz loc_101FB1D  +
push 1  +
mov ecx offset dword_10F54B0 +
call sub_1020835  +
mov edi [ebp-10h] +
mov ecx edi +
call sub_1028EFF  +
mov eax dword_10F55CC +
mov [esi+100h] eax +
mov eax [ebp-50h] +
mov [esi+10Ch] eax +
lea eax [ebp-80h] +
push eax  +
call sub_1029573  +
cmp byte_10F55A5 0 +
jz loc_10597D9  +
mov eax [ebp-78h] +
and dword ptr [ebp-78h] 0 +
mov dword_10F5528 eax +
lea eax [ebp-80h] +
push eax  +
mov ecx edi +
call ?SetWindowPlacement@CWnd@@QAEHPBUtagWINDOWPLACEMENT@@@Z  +
test eax eax +
jz loc_10597F4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
lea ecx [esi+4] +
call sub_101EF63  +
mov dword ptr [esi] offset off_101FB8C +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax ds:off_101FC48 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
mov ecx [ebp+8] +
lea eax [esi+8] +
mov [ebp-4] eax +
push 0  +
lea eax [ebp-8] +
push eax  +
mov dword ptr [ebp-8] offset off_101D81C +
call sub_101EA69  +
test byte ptr dword_10F5308 1 +
push 4  +
pop eax  +
jnz loc_101FCE9  +
mov ecx ds:off_101FD14 +
or dword_10F5308 1 +
mov dword_10F5C40 ecx +
mov ecx ds:off_101FD18 +
mov dword_10F5C48 ecx +
mov ecx ds:off_101FD1C +
mov dword_10F5C50 ecx +
mov ecx ds:off_101FD20 +
mov dword_10F5C44 2 +
mov dword_10F5C4C eax +
mov dword_10F5C54 8 +
mov dword_10F5C58 ecx +
mov ecx [ebp+8] +
mov [ebp-0Ch] eax +
lea eax [ebp-14h] +
push eax  +
push ds:off_101FD10  +
add esi 38h +
mov [ebp-14h] esi +
mov dword ptr [ebp-10h] offset unk_10F5C3C +
call sub_101F3ED  +
pop esi  +
leave   +
retn 4  +
***
mov eax ds:off_101FD3C +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+4] +
mov ecx edi +
mov dword ptr [esi] offset off_101FDB0 +
call sub_100AD56  +
mov eax [ebp+0Ch] +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
mov ecx edi +
mov [esi+18h] eax +
call sub_100AE0E  +
test eax eax +
jl loc_10664AC  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov eax ds:off_101FE18 +
retn   +
***
push 10h  +
mov eax offset byte_10E0300 +
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-1Ch] 3 +
mov [ebp-18h] ebx +
push offset aXmlpointPersis  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+8] +
cmp [edi+0Ch] bl +
jz loc_104DD9A  +
mov ecx [esi+18h] +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
mov [eax+4] ecx +
mov [ebp+8] esp +
mov [eax] ebx +
push ds:off_101FEC4  +
mov ecx edi +
call sub_101DF07  +
mov eax [esi+18h] +
push ebx  +
push ecx  +
push ecx  +
mov ecx esp +
add eax 4 +
mov [ecx] ebx +
mov [ecx+4] eax +
mov [ebp+8] esp +
push ds:off_101FEC8  +
mov ecx edi +
call sub_101DF07  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov eax ds:off_101FF00 +
retn   +
***
push 10h  +
mov eax offset byte_10E0300 +
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-1Ch] 3 +
mov [ebp-18h] ebx +
push offset aXmlrectPersist  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+8] +
cmp [edi+0Ch] bl +
jz loc_104B337  +
mov eax [esi+18h] +
push ebx  +
push ecx  +
push ecx  +
mov ecx esp +
add eax 4 +
mov [ecx] ebx +
mov [ecx+4] eax +
mov [ebp+8] esp +
push ds:off_1020000  +
mov ecx edi +
call sub_101DF07  +
mov eax [esi+18h] +
push ebx  +
push ecx  +
push ecx  +
mov ecx esp +
add eax 0Ch +
mov [ecx] ebx +
mov [ecx+4] eax +
mov [ebp+8] esp +
push ds:off_101FFF4  +
mov ecx edi +
call sub_101DF07  +
mov ecx [esi+18h] +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
mov [eax+4] ecx +
mov [ebp+8] esp +
mov [eax] ebx +
push ds:off_101FFF8  +
mov ecx edi +
call sub_101DF07  +
mov esi [esi+18h] +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
add esi 8 +
mov [ebp+8] esp +
mov [eax] ebx +
mov [eax+4] esi +
push ds:off_101FFFC  +
mov ecx edi +
call sub_101DF07  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_100A60E  +
lea ecx [ebp-1Ch] +
call ??0AFX_EXCEPTION_LINK@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
mov byte ptr [ebp-4] 1 +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov ecx [eax+4] +
call ?EndWaitCursor@CCmdTarget@@QAEXXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ?AfxTryCleanup@@YGXXZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
lea ecx [ebp-0B4h] +
call sub_1040356  +
xor ebx ebx +
mov [ebp-4] ebx +
mov edi offset unk_10F5638 +
push edi  +
call sub_103F1D5  +
push offset aMicrosoftMmcCo  +
mov dword_10F5BC0 offset dword_1020598 +
mov lpDst edi +
call sub_103FE4F  +
push ebx  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcappInitins  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call sub_1041955  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105815E  +
call sub_104193D  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10581B3  +
call sub_102F91C  +
call sub_1041621  +
test al al +
jz loc_1058191  +
push 3  +
push ebx  +
call sub_103F859  +
test eax eax +
jz loc_10581D8  +
mov ecx esi +
mov dword ptr [ebp-28h] 1 +
call sub_103F1FD  +
test eax eax +
jz loc_1058191  +
lea eax [ebp-38h] +
push eax  +
lea ecx [esi+100h] +
call sub_103F4BC  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058429  +
push ebx  +
push dword ptr [esi+6Ch]  +
mov ecx offset unk_10F5658 +
push offset off_10F5CC8  +
call sub_103FCD0  +
mov ecx esi +
call ?Unregister@CWinApp@@QAEHXZ  +
mov eax lpDst +
mov edi offset lpDst +
cmp eax edi +
jz loc_10201E5  +
cmp byte ptr [eax+19h] 5 +
jnb loc_10581E8  +
mov eax ds:__wargv +
push dword ptr [eax]  +
mov eax ds:__argc +
push dword ptr [eax]  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-0B4h] +
call sub_103FF36  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10581FF  +
push offset aMicrosoft  +
mov ecx esi +
call ?SetRegistryKey@CWinApp@@IAEXPBG@Z  +
push ebx  +
mov ecx esi +
call sub_103F222  +
cmp [ebp-88h] bl +
jnz loc_1020579  +
mov eax [ebp-0A0h] +
cmp [eax-8] ebx +
jz loc_1020579  +
xor eax eax +
mov [esi+0F4h] al +
cmp [ebp-7Ch] ebx +
jnz loc_105821E  +
cmp dword ptr [ebp-8Ch] 1 +
jz loc_1020284  +
call sub_102F90C  +
test al al +
jnz loc_1058234  +
lea ecx [ebp-0B4h] +
call sub_103F07D  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10582AD  +
push ebx  +
call ?AfxEnableControlContainer@@YAXPAVCOccManager@@@Z  +
pop ecx  +
mov ecx esi +
call ?Enable3dControls@CWinApp@@IAEHXZ  +
push 4  +
mov ecx esi +
call ?LoadStdProfileSettings@CWinApp@@IAEXI@Z  +
push 20h  +
call sub_100ABF0  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_1020581  +
mov ecx eax +
call sub_104052A  +
push 90h  +
mov byte ptr [ebp-4] 1 +
mov [esi+84h] eax +
call sub_100ABF0  +
mov edi eax +
mov [ebp-10h] edi +
mov byte ptr [ebp-4] 5 +
cmp edi ebx +
jz loc_1020588  +
push offset off_102F270  +
push offset off_100A418  +
push offset off_102F7E0  +
push 81h  +
mov ecx edi +
call ??0CMultiDocTemplate@@QAE@IPAUCRuntimeClass@@00@Z  +
mov dword ptr [edi] (offset loc_10205AB+1) +
push edi  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call ?AddDocTemplate@CWinApp@@QAEXPAVCDocTemplate@@@Z  +
cmp [ebp-87h] bl +
jnz loc_10582CF  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10581FF  +
lea eax [ebp-10h] +
push eax  +
mov [ebp-10h] ebx +
call sub_102F58E  +
push 180h  +
mov byte ptr [ebp-4] 6 +
call sub_100ABF0  +
mov [ebp-3Ch] eax +
mov byte ptr [ebp-4] 7 +
cmp eax ebx +
jz loc_102058F  +
mov ecx eax +
call sub_1040CCC  +
mov edi eax +
mov eax [edi] +
push ebx  +
push ebx  +
push 0CF8000h  +
push 80h  +
mov ecx edi +
mov byte ptr [ebp-4] 6 +
call dword ptr [eax+0C0h]  +
push dword ptr [ebp-10h]  +
test eax eax +
jz loc_105830A  +
mov byte ptr [ebp-4] 1 +
call sub_102F464  +
mov [esi+20h] edi +
push dword ptr [edi+20h]  +
call ds:?SetHWnd@SC@mmcerror@@SGXPAUHWND__@@@Z  +
call ds:GetCurrentThreadId  +
push eax  +
call ds:?SetMainThreadID@SC@mmcerror@@SGXK@Z  +
mov ecx esi +
mov [esi+0FDh] bl +
call ?RunEmbedded@CWinApp@@QAEHXZ  +
test eax eax +
jnz loc_1058314  +
mov ecx esi +
call ?RunAutomated@CWinApp@@QAEHXZ  +
test eax eax +
jnz loc_1058314  +
cmp [ebp-87h] bl +
jnz loc_1058354  +
mov ecx esi +
call ?EnableShellOpen@CWinApp@@IAEXXZ  +
cmp [ebp-87h] bl +
jnz loc_10583E1  +
push dword ptr [ebp-0A0h]  +
lea ecx [ebp-21h] +
call sub_102F8C7  +
lea eax [ebp-0B4h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 9 +
call ?ProcessShellCommand@CWinApp@@QAEHAAVCCommandLineInfo@@@Z  +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10583F7  +
cmp [ebp-21h] bl +
jnz loc_105840B  +
lea eax [ebp-38h] +
push eax  +
mov ecx esi +
call sub_10287CF  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0Ah +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058429  +
cmp [esi+11Ch] ebx +
jz loc_1058416  +
cmp [esi+0FDh] bl +
jnz loc_10204DB  +
mov edi dword_10F5304 +
cmp edi ebx +
jz loc_1058422  +
mov eax [edi] +
mov ecx edi +
mov [edi+123h] bl +
call dword ptr [eax+0A8h]  +
mov ecx esi +
call sub_100942E  +
mov ecx eax +
mov [ebp-10h] ecx +
cmp ecx ebx +
jz loc_10204D5  +
push dword ptr [esi+78h]  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0A8h]  +
mov eax [ebp-10h] +
push dword ptr [eax+20h]  +
call ds:UpdateWindow  +
mov [edi+123h] bl +
lea eax [esi+0E4h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
call ds:?ScSetConsoleEventDispatcher@CConsoleEventDispatcherProvider@@SG?AVSC@mmcerror@@PAVCConsoleEventDispatcher@@@Z  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0Bh +
call edi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058429  +
lea eax [ebp-38h] +
push eax  +
mov ecx esi +
mov [esi+0F5h] bl +
call sub_102ADD6  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0Ch +
call edi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058429  +
mov esi [ebp-28h] +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0B4h] +
call sub_102B012  +
mov eax esi +
call sub_1001FCF  +
retn   +
xor eax eax +
inc eax  +
jmp loc_102025F  +
xor eax eax +
jmp loc_10202DE  +
xor edi edi +
jmp loc_1020324  +
xor edi edi +
jmp loc_102037F  +
***
push ss  +
jnp loc_10205A5  +
pop eax  +
push esp  +
add al 4 +
add [esi] esp +
jz loc_10205BB  +
add ebx edi +
or al ds:89FD01h +
add [eax+3] ebp +
pop es  +
add ebp edi +
mov [eax] eax +
add ds:310100C7h edx +
jz near ptr loc_10205D2+1  +
add [esp+esi*2] edi +
or al 1 +
inc edi  +
jz near ptr loc_10205DA+1  +
add [edx+74h] edx +
or al 1 +
pop ebp  +
jz near ptr loc_10205E2+1  +
add [eax+74h] ebp +
or al 1 +
and bh al +
add [ecx] al +
jnb near ptr aCamcappInitins+2  +
or al 1 +
jle near ptr aCamcappInitins+6  +
or al 1 +
mov [esp+ecx+1] esi +
xchg eax esp +
jz near ptr loc_10205F7+4  +
add [edi-55FEF38Ch] ebx +
jz loc_1020603  +
add [ebp-3FFEF38Ch] esi +
jz near ptr loc_1020608+3  +
add ebx ecx +
jz loc_102060F  +
add [edi-0Ah] ebp +
add eax [ecx] +
add [eax+eax+944D01h] edx +
add [ecx+7Dh] esi +
add eax [ecx] +
fistp  dword ptr ds:7D7C0105h +
add eax [ecx] +
xchg edi [ebp+3] +
add [edx-25FEFC83h] edx +
dec ebx  +
add eax [ecx] +
inc esp  +
cmp [ecx+eax] al +
pusha   +
adc eax ds:531A901h +
add [edx] ecx +
adc [edx] al +
add esi edx +
jz near ptr aMicrosoft+7  +
mov edi edi +
push esi  +
mov esi ecx +
call sub_10206DD  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+11h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_100AB46  +
cmp eax ebx +
jz loc_10206F0  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_10206F9  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_1020702  +
mov [ecx] ebx +
mov [eax+11h] bl +
mov byte ptr [eax+10h] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1057EBD  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 0Ch +
jb loc_1057EC4  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push esi  +
push eax  +
push 4  +
push eax  +
mov esi ecx +
call ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBG0@Z  +
push eax  +
call ds:LoadMenuW  +
push eax  +
mov ecx esi +
call ?Attach@CMenu@@QAEHPAUHMENU__@@@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
push 0  +
push offset off_10F6DC0  +
push offset off_10F6DDC  +
push 0  +
call dword ptr [eax+0C8h]  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
test eax eax +
jz nullsub_8  +
push esi  +
mov esi [eax+228h] +
test esi esi +
jz loc_103F46E  +
push dword ptr [esi+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_103F46E  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
test esi esi +
jz loc_10602BF  +
call sub_10207B9  +
test eax eax +
jz loc_102082B  +
call sub_101125C  +
mov [esi+18h] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp byte ptr [esi+0F4h] 0 +
jnz loc_10208EB  +
push ebx  +
push edi  +
lea edi [esi+120h] +
mov ecx edi +
call ?DestroyMenu@CMenu@@QAEHXZ  +
lea ebx [esi+128h] +
mov ecx ebx +
call sub_100B681  +
mov eax [esi+11Ch] +
push ds:dword_10208FC[eax*8]  +
mov ecx edi +
call sub_1020746  +
mov eax [esi+11Ch] +
push ds:dword_10208FC[eax*8]  +
mov ecx ebx +
call sub_1020921  +
cmp [ebp+arg_0] 0 +
jz loc_10208E9  +
mov ecx esi +
call sub_100942E  +
mov ecx eax +
xor ebx ebx +
mov dword ptr [ebp+arg_0] ecx +
cmp ecx ebx +
jz loc_10208AE  +
push ebx  +
call ?MDIGetActive@CMDIFrameWnd@@QBEPAVCMDIChildWnd@@PAH@Z  +
mov ebx eax +
test ebx ebx +
jz loc_10208F0  +
test edi edi +
jz loc_10208B9  +
mov edi [edi+4] +
mov eax [ebx] +
push edi  +
push ebx  +
push 1  +
mov ecx ebx +
call dword ptr [eax+100h]  +
cmp dword ptr [esi+11Ch] 3 +
jnz loc_10208DB  +
test ebx ebx +
jz loc_10208DB  +
mov ecx ebx +
call sub_10287A1  +
mov ecx dword ptr [ebp+arg_0] +
test ecx ecx +
jz loc_10208E9  +
push 1  +
call sub_1029D8E  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
mov ecx dword ptr [ebp+arg_0] +
test ecx ecx +
jz loc_10208C7  +
jmp loc_1057EA8  +
***
retn 0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push eax  +
call sub_1020939  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 9  +
push [ebp+lpTableName]  +
mov esi ecx +
call ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBG0@Z  +
push [ebp+lpTableName]  +
mov ecx esi +
push eax  +
call sub_1020960  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B681  +
push [ebp+lpTableName]  +
push [ebp+hInstance]  +
call ds:LoadAcceleratorsW  +
xor ecx ecx +
test eax eax +
mov [esi+4] eax +
setnz cl  +
mov al cl +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+254h] +
test eax eax +
jnz loc_105A87D  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi offset dword_100CA88 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-18h] 0 +
push 0  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcviewShowre  +
lea ecx [ebp-2Ch] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
mov edi offset lpDst +
cmp eax edi +
jz loc_1020A28  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105AE24  +
mov ecx [ebp-14h] +
push esi  +
call sub_100DD70  +
mov ecx [ebp-14h] +
mov ebx eax +
call sub_101D08C  +
mov ecx eax +
mov [ebp-1Ch] ecx +
test ecx ecx +
jz loc_105AE3B  +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
cmp eax ebx +
setz byte ptr [ebp-0Dh]  +
cmp [ebp+0Ch] ebx +
jz loc_1020A90  +
test ebx ebx +
jnz loc_10478C8  +
xor edi edi +
push edi  +
call ds:IsWindow  +
test eax eax +
jnz loc_10478D0  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-14h] +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_1041A24  +
mov ecx [ebp-14h] +
call sub_100DA2C  +
test ebx ebx +
jnz loc_10478E7  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-18h] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
mov dword ptr [esi] offset off_101D7BC +
mov al [edi+4] +
mov [esi+4] al +
mov al [edi+5] +
mov [esi+5] al +
mov eax [edi+8] +
mov [esi+8] eax +
lea eax [edi+0Ch] +
push eax  +
lea ecx [esi+0Ch] +
call sub_100CDE2  +
and dword ptr [ebp-4] 0 +
lea eax [edi+28h] +
push eax  +
lea ecx [esi+28h] +
call sub_100CDE2  +
lea eax [edi+44h] +
push eax  +
lea ecx [esi+44h] +
mov byte ptr [ebp-4] 1 +
call sub_100CDE2  +
mov eax [edi+60h] +
mov [esi+60h] eax +
mov eax [edi+64h] +
mov [esi+64h] eax +
mov eax [edi+68h] +
mov [esi+68h] eax +
mov eax [edi+6Ch] +
mov [esi+6Ch] eax +
mov eax [edi+70h] +
add edi 74h +
push edi  +
lea ecx [esi+74h] +
mov byte ptr [ebp-4] 2 +
mov [esi+70h] eax +
call sub_100CC1D  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov al [edi+4] +
mov esi ecx +
mov [esi+4] al +
mov al [edi+5] +
mov [esi+5] al +
mov eax [edi+8] +
mov [esi+8] eax +
lea eax [edi+0Ch] +
push eax  +
lea ecx [esi+0Ch] +
call sub_1022C88  +
lea eax [edi+28h] +
push eax  +
lea ecx [esi+28h] +
call sub_1022C88  +
lea eax [edi+44h] +
push eax  +
lea ecx [esi+44h] +
call sub_1022C88  +
mov eax [edi+60h] +
mov [esi+60h] eax +
mov eax [edi+64h] +
mov [esi+64h] eax +
mov eax [edi+68h] +
mov [esi+68h] eax +
mov eax [edi+6Ch] +
mov [esi+6Ch] eax +
mov eax [edi+70h] +
mov [esi+70h] eax +
push dword ptr [edi+74h]  +
lea eax [esi+74h] +
push eax  +
call sub_100CA9D  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+8Ch] +
xor ebx ebx +
push edi  +
cmp eax ebx +
jz loc_1020C22  +
push eax  +
call ds:IsWindowVisible  +
test eax eax +
jnz loc_105F731  +
xor edi edi +
cmp [ebp+arg_0] ebx +
jnz loc_105F739  +
mov eax [esi+8Ch] +
cmp eax ebx +
jz loc_1020C3F  +
push ebx  +
push eax  +
call ds:ShowWindow  +
cmp edi ebx +
jnz loc_105F78D  +
mov [esi+90h] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
mov eax [ebx+60h] +
push esi  +
mov esi [eax] +
push edi  +
xor edi edi +
cmp esi eax +
jnz loc_105F7DE  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
and dword ptr [ebp-28h] 0 +
mov ebx ecx +
mov [ebp-24h] eax +
xor esi esi +
inc esi  +
push 0  +
lea ecx [ebp-38h] +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewSetres  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp+10h] +
push eax  +
lea ecx [ebx+268h] +
call sub_1020B84  +
cmp dword ptr [ebp+18h] 0 +
jnz loc_1047578  +
mov ecx ebx +
call sub_102136E  +
mov ecx ebx +
call sub_102155B  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
call sub_10213A6  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105C874  +
mov ecx [ebx+32Ch] +
test ecx ecx +
jz loc_1020D67  +
push esi  +
lea eax [ebp-20h] +
push eax  +
call sub_1026632  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 6 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1020DF6  +
cmp byte ptr [ebp+8Ch] 0 +
jnz loc_1020DD3  +
mov esi offset dword_100CA88 +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
movs   +
call sub_10209B2  +
mov ecx [ebx+310h] +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebx+1D0h]  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
call sub_1020E61  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 7 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105C89A  +
xor esi esi +
inc esi  +
lea edi [ebx+23Ch] +
cmp dword ptr [edi] 0 +
jz loc_1020DF6  +
push esi  +
mov ecx ebx +
call sub_1024C0D  +
mov ecx edi +
mov ebx eax +
call sub_100A5CF  +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+50h]  +
lea eax [ebp-38h] +
mov ecx [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-28h] esi +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+10h] +
mov byte ptr [ebp-4] 0 +
call sub_100F341  +
mov eax [ebp-24h] +
call sub_100C50D  +
retn 88h  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
and dword ptr [ebp-14Ch] 0 +
mov [ebp-148h] eax +
mov eax [ebp+14h] +
mov ebx ecx +
push 0  +
lea ecx [ebp-15Ch] +
mov [ebp-168h] edi +
mov [ebp-164h] eax +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aChistorylistSc  +
lea ecx [ebp-15Ch] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebx+14h] 0 +
jnz loc_105FB57  +
xor eax eax +
cmp [edi+8] esi +
setz al  +
mov [ebp-160h] eax +
mov eax [ebx+10h] +
lea ecx [eax+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov [ebp-170h] eax +
test eax eax +
jnz loc_1026A45  +
mov ecx [ebp-148h] +
lea eax [ebp-15Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14Ch] esi +
lea ecx [ebp-15Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-148h] +
call sub_100C50D  +
retn 10h  +
***
mov byte ptr [ebp-141h] 1 +
jmp loc_1026A94  +
***
call sub_1001F95  +
mov esi ecx +
mov ecx [esi+8Ch] +
xor edi edi +
cmp ecx edi +
jz loc_1020F99  +
mov eax [esi+58h] +
push 6  +
lea edx [eax+4] +
push edx  +
lea eax [eax+eax+8] +
push eax  +
push edi  +
push edi  +
push edi  +
push ecx  +
call ds:SetWindowPos  +
mov ecx [esi+60h] +
mov eax [ecx] +
cmp eax ecx +
jnz loc_105F7FB  +
push esi  +
lea ecx [ebp-20h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
lea eax [esi+74h] +
push eax  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
mov ebx eax +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
call sub_1020C59  +
cmp eax [esi+84h] +
jg loc_105F80E  +
push edi  +
mov ecx esi +
call sub_1020BFD  +
push ebx  +
lea ecx [ebp-20h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ??1CClientDC@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov eax offset dword_10D2F18 +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-38h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcmultidocte  +
lea ecx [ebp-38h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi dword_10F5304 +
cmp esi ebx +
jnz loc_1058DA1  +
***
call sub_100ABA9  +
mov ecx eax +
mov [ebp-14h] ecx +
cmp ecx ebx +
jz loc_1021056  +
call sub_103831F  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+74h]  +
mov esi eax +
cmp esi ebx +
jz loc_1058DD7  +
mov ecx esi +
call sub_1039709  +
cmp eax ebx +
jnz loc_1058E0D  +
mov eax [esi+4Ch] +
push ebx  +
mov [ebp-18h] eax +
mov [esi+4Ch] ebx +
mov eax [edi] +
push esi  +
mov ecx edi +
call dword ptr [eax+78h]  +
mov ecx [ebp-18h] +
mov [ebp-10h] eax +
mov [esi+4Ch] ecx +
cmp eax ebx +
jz loc_1058E5D  +
cmp [ebp+8] ebx +
jz loc_1058E78  +
lea ecx [ebp+0Bh] +
call sub_102BBF1  +
push dword ptr [ebp+8]  +
mov eax [esi] +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call dword ptr [eax+7Ch]  +
test eax eax +
jz loc_1058F3C  +
mov eax [esi] +
push 1  +
push dword ptr [ebp+8]  +
mov ecx esi +
call dword ptr [eax+5Ch]  +
mov ecx [ebp-10h] +
mov eax [ecx] +
call dword ptr [eax+60h]  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+64h]  +
lea ecx [ebp+0Bh] +
mov [esi+123h] bl +
mov [ebp-4] bl +
call sub_1020056  +
push 8000FFFFh  +
push offset dword_10F54B0  +
lea eax [ebp-28h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-28h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1021168  +
xor eax eax +
cmp [ebp+8] ebx +
mov ecx offset dword_10F54B0 +
setnz al  +
push eax  +
push esi  +
lea eax [ebp-28h] +
push eax  +
call sub_1028A0B  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-28h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058F7A  +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1021174  +
call sub_1029466  +
cmp esi ebx +
jz loc_1021182  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0A8h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-38h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 1  +
call sub_1020710  +
mov esi eax +
test esi esi +
jz loc_102120D  +
mov eax [ebp+arg_0] +
mov [esi] eax +
lea eax [esi+4] +
test eax eax +
jz loc_1021219  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
push [ebp+arg_8]  +
lea eax [esi+8] +
push eax  +
call sub_1021231  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1021244  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
lea ecx [esi+4] +
mov eax [ecx+4] +
lea edx [ebp+var_8] +
push edx  +
push eax  +
mov [ebp+var_8] edi +
mov [ebp+var_4] 0 +
call sub_10111C2  +
push esi  +
mov ecx edi +
call sub_1021285  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add ecx 4 +
lea edx [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov eax [ecx+4] +
push edx  +
push eax  +
call sub_10212A9  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea edi [eax+4] +
push dword ptr [edi]  +
mov ebx ecx +
push eax  +
call sub_10211F3  +
push 1  +
mov ecx ebx +
mov esi eax +
call sub_10212E2  +
mov [edi] esi +
mov eax [esi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov eax [ecx+8] +
mov edx [ebp+8] +
mov esi 3FFFFFFFh +
sub esi eax +
cmp esi edx +
jb loc_1058D76  +
add eax edx +
mov [ecx+8] eax +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jnz loc_10376DC  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+bRevert]  +
push dword ptr [ecx+20h]  +
call ds:GetSystemMenu  +
push eax  +
call ?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 410h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+178h] 0 +
jz loc_105A37D  +
mov eax [esi+178h] +
mov ecx [eax] +
push edi  +
mov edi [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
and eax 0FFFF7FFFh +
push eax  +
push dword ptr [esi+178h]  +
call dword ptr [edi+10h]  +
pop edi  +
pop esi  +
retn   +
***
call sub_100C4D0  +
mov eax [ebp+8] +
and dword ptr [ebp-28h] 0 +
mov esi ecx +
push 0  +
lea ecx [ebp-38h] +
mov [ebp-24h] eax +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScatta  +
lea ecx [ebp-38h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
call sub_10209B2  +
push 8000FFFFh  +
push dword ptr [esi+178h]  +
lea eax [ebp-48h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105AF3F  +
mov eax [esi+178h] +
mov eax [eax+4Ch] +
push 0  +
push eax  +
lea eax [ebp-48h] +
push eax  +
mov ecx esi +
call sub_10209DE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp-24h] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-28h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-24h] +
call sub_100C50D  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+4Ch] +
test eax eax +
jz loc_10214F7  +
mov eax [eax+20h] +
push 0FFFFFFF0h  +
push eax  +
call ds:GetWindowLongW  +
and eax 0FFFFh +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_10214E5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+4Ch] +
test eax eax +
jz loc_1021552  +
mov ebx [eax+20h] +
test ebx ebx +
jz loc_105E13D  +
push esi  +
push 0FFFFFFF0h  +
push ebx  +
call ds:GetWindowLongW  +
mov ecx [ebp+arg_4] +
mov esi eax +
xor eax [ebp+arg_4] +
shr ecx 10h +
and eax 0EFBFh +
xor eax esi +
and ecx 1 +
mov [edi+198h] ecx +
cmp esi eax +
jnz loc_105E147  +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
xor ebx ebx +
jmp loc_1021514  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+178h] 0 +
jz loc_105ABCC  +
mov eax [esi+40h] +
mov [ebp+var_4] eax +
test eax eax +
jz loc_105ABFD  +
mov eax [esi+2D0h] +
xor ecx ecx +
and al 4 +
cmp al 4 +
setz cl  +
push ebx  +
push edi  +
push ecx  +
mov ecx esi +
call sub_10215ED  +
mov ebx [esi+2D0h] +
shr ebx 1 +
and bl 1 +
lea edi [esi+1F8h] +
cmp dword ptr [edi+78h] 0 +
mov ecx [edi] +
setz al  +
shr ecx 4 +
and al cl +
and al 1 +
mov byte ptr [ebp+var_8] bl +
cmp al bl +
jnz loc_105AC2E  +
test byte ptr [esi+2D0h] 8 +
pop edi  +
pop ebx  +
jnz loc_10215E5  +
mov eax [esi+178h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
cmp eax 4 +
jz loc_105AC8B  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+178h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp [ebp+arg_0] 0 +
jnz loc_102161C  +
or eax 4 +
mov ecx [esi+178h] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+10h]  +
pop esi  +
pop ebp  +
retn 4  +
and eax 0FFFFFFFBh +
jmp loc_102160A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
and [ebp+var_4] 0 +
test eax eax +
jz loc_1065BAA  +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
push edi  +
mov esi 200h +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
mov ebx esi +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_1065C06  +
push ebx  +
push edi  +
push [ebp+uID]  +
push [ebp+hInstance]  +
call ds:LoadStringW  +
test eax eax +
jz loc_1065C3E  +
lea ecx [ebx-1] +
cmp eax ecx +
jge loc_1065BE2  +
mov eax [ebp+arg_8] +
mov [eax] edi +
pop edi  +
pop esi  +
pop ebx  +
mov eax [ebp+var_4] +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10216B8  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_10216D6  +
test eax eax +
jz loc_10216C7  +
mov [eax] eax +
lea ecx [eax+4] +
test ecx ecx +
jz locret_10216D0  +
mov [ecx] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_1062C93  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 1Ch +
jb loc_1062C9A  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1021730 +
call sub_102169E  +
mov dword ptr [esi] offset off_1021748 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_102170C  +
mov dword ptr [esi+10h] offset off_102179C +
mov dword ptr [esi] offset off_100AB7C +
mov dword ptr [esi+10h] offset off_100B8D0 +
mov eax esi +
pop esi  +
retn   +
***
push 0  +
mov eax offset dword_10DC3C4 +
call sub_1001F95  +
mov ecx dword_10F5304 +
xor eax eax +
cmp ecx eax +
jz loc_10377CC  +
cmp [ecx+0BCh] eax +
jz loc_10377CC  +
cmp dword ptr [ebp+8] 1 +
push eax  +
push eax  +
setz al  +
movzx eax al +
push eax  +
call sub_1021952  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_10666AC  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 4 +
jb loc_10666B3  +
mov eax ecx +
shl eax 2 +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edx [ecx+4] +
test edx edx +
jz loc_102184C  +
mov eax [ecx+8] +
sub eax edx +
sar eax 2 +
retn   +
xor eax eax +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jz loc_1021864  +
mov eax [ecx+0Ch] +
sub eax edx +
sar eax 2 +
retn   +
xor eax eax +
retn   +
***
xor eax eax +
retn   +
***
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_1022AF3  +
mov [eax] ebx +
jmp loc_1022AF3  +
mov edx [edx+8] +
cmp byte ptr [edx+14h] 0 +
jz loc_1023190  +
cmp esi [ecx+8] +
jnz loc_102189A  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_100E50B  +
mov eax [esi+4] +
mov byte ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_101C465  +
jmp loc_10231A6  +
***
mov [ecx+4] eax +
jmp loc_101C4A4  +
***
mov [esi] eax +
jmp loc_10218E7  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+15h] dl +
jnz loc_105E0F9  +
mov ecx [eax] +
cmp [ecx+15h] dl +
jz loc_1021900  +
mov eax [eax+4] +
cmp [eax+15h] dl +
jnz loc_10218F5  +
mov ecx [esi] +
cmp ecx [eax] +
jz loc_10218C5  +
mov ecx [esi] +
cmp [ecx+15h] dl +
jnz loc_10218FE  +
mov [esi] eax +
pop esi  +
retn   +
push ecx  +
call sub_1010C2A  +
jmp loc_10218FC  +
***
call sub_1001F95  +
mov esi ecx +
mov edi [ebp+8] +
xor ebx ebx +
mov [ebp-10h] ebx +
cmp edi 10h +
jnz loc_102193F  +
add esi 20h +
push esi  +
mov ecx [ebp+0Ch] +
call sub_101D583  +
mov eax [ebp-10h] +
call sub_1001FCF  +
retn 8  +
cmp edi 20h +
jnz loc_1067F3B  +
add esi 24h +
jmp loc_102192B  +
***
call sub_100C4D0  +
mov esi [ebp+0Ch] +
mov ebx [ebp+10h] +
mov edi ecx +
push 0  +
lea ecx [ebp-44h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcdocScgetcu  +
lea ecx [ebp-44h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
test esi esi +
jnz loc_1059CF0  +
test ebx ebx +
jnz loc_1059CF0  +
and dword ptr [ebp-34h] 0 +
lea eax [ebp-34h] +
push eax  +
xor eax eax +
cmp [ebp+8] al +
lea ecx [edi+0A8h] +
setz al  +
mov byte ptr [ebp-4] 2 +
dec eax  +
and eax 10h +
add eax 10h +
push eax  +
call sub_102190D  +
push eax  +
lea ecx [ebp-44h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1059D3D  +
lea ecx [ebp-34h] +
call sub_1021A3B  +
mov esi eax +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call sub_100EBDB  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-44h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_100C50D  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_1021A50  +
call sub_1021A57  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 1 +
push edi  +
jz loc_10680B6  +
push dword ptr [esi]  +
call ds:CopyIcon  +
mov edi eax +
dec dword ptr [esi+4]  +
jz loc_10680C0  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+18h] +
call sub_101EB25  +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_100B9EC +
call sub_100ECBD  +
call sub_1001FCF  +
retn   +
***
mov ecx [esi+8] +
mov edx [ebp-10h] +
mov eax [esi+4] +
mov ecx [ecx+edx*8] +
mov [eax] ecx +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
push 3  +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
pop esi  +
mov [ebp-20h] esi +
mov [ebp-1Ch] ebx +
push offset aCxmlelementG_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-10h] ebx +
mov edi [edi] +
push offset loc_101DD48  +
push edi  +
lea eax [ebp-10h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101E311  +
push 80004002h  +
push dword ptr [ebp-10h]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] ebx +
jnz loc_1066788  +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
call sub_101DD5D  +
xor eax eax +
lea edi [ebp-30h] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp-30h] ax +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 4 +
push eax  +
call dword ptr [ecx+0B0h]  +
mov [ebp-20h] esi +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1023630  +
lea ecx [ebp-20h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
cmp eax 1 +
jz loc_1023640  +
cmp word ptr [ebp-30h] 8 +
jnz loc_10667BB  +
push dword ptr [ebp-28h]  +
mov ecx [ebp+0Ch] +
call sub_101DDB2  +
lea ecx [ebp-30h] +
call sub_100EBF1  +
push dword ptr [ebp+8]  +
call SysFreeString  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1021C19  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov bl 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov al bl +
call sub_1001FCF  +
retn 8  +
***
push dword ptr [ebp+0Ch]  +
mov esi [esi+4] +
mov eax [esi] +
lea ecx [ebp-40h] +
push ecx  +
mov ecx esi +
call dword ptr [eax]  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] edi +
jz loc_1021E2C  +
jmp loc_1021D45  +
mov eax offset word_100A5FC +
jmp loc_1021E03  +
push 0Ah  +
push edi  +
push eax  +
call ds:wcstol  +
add esp 0Ch +
jmp loc_1029147  +
push 0Ah  +
push edi  +
push eax  +
call ds:wcstol  +
mov ecx [esi+4] +
add esp 0Ch +
mov [ecx] ax +
jmp loc_1021E2C  +
setl al  +
test al al +
jz loc_1021E2C  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1021D13  +
cmp byte ptr [eax+19h] 2 +
jb loc_1021D13  +
lea ecx [ebp-20h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
push eax  +
mov eax lpDst +
push offset dword_106D960  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1021E39  +
push dword ptr [esi+4]  +
push eax  +
call ds:CLSIDFromString  +
mov [ebp-20h] ebx +
mov [ebp-1Ch] eax +
cmp eax edi +
jz loc_1021E2C  +
setl al  +
jmp loc_1021E2C  +
cmp [ebp-20h] ebx +
jnz loc_1021D4F  +
cmp [ebp-1Ch] edi +
jmp loc_1021D3D  +
mov al 1 +
jmp loc_1021E2C  +
mov [ebp-20h] ebx +
mov dword ptr [ebp-1Ch] 80004001h +
jmp loc_1021E2C  +
***
push 0Ah  +
push edi  +
push eax  +
call ds:wcstol  +
add esp 0Ch +
mov ecx [esi+4] +
mov [ecx] eax +
jmp loc_1021E2C  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
inc dword ptr [eax]  +
pop ebx  +
mov [ebp-20h] ebx +
mov [ebp-1Ch] edi +
push offset aCxmlvalueScrea  +
lea ecx [ebp-20h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+0Ch] +
cmp eax edi +
jz loc_1021CA1  +
mov ecx [esi] +
cmp ecx 0Eh +
ja loc_1021D56  +
jmp ds:off_1021D65[ecx*4]  +
mov ecx [esi+4] +
push eax  +
call sub_100AE0E  +
mov [ebp-20h] ebx +
mov [ebp-1Ch] eax +
cmp eax edi +
jnz loc_1021CD5  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
push 0Ah  +
push edi  +
push eax  +
call ds:wcstoul  +
jmp loc_1021DAB  +
***
add ecx 4 +
add eax 4 +
cmp dx di +
jnz loc_1021F2F  +
xor eax eax +
cmp eax edi +
jz loc_1021AD2  +
inc dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
add dword ptr [ebp-14h] 8 +
cmp eax [esi+0Ch] +
jb loc_1021F27  +
jmp loc_106650A  +
***
push eax  +
push edi  +
lea ecx [ebp-50h] +
call sub_101EB5D  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 4 +
call sub_100AD56  +
lea eax [ebp-3Ch] +
push eax  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 5 +
call sub_102285F  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-3Ch] +
call sub_101DDD9  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-3Ch] +
test eax eax +
jnz loc_102200D  +
call sub_100A77D  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 3 +
call sub_101EB25  +
jmp loc_101E0BC  +
call sub_100A77D  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 3 +
call sub_101EB25  +
mov eax [ebp+0Ch] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_102202F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc esi  +
jmp loc_101E08B  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcdocOnopend  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+8]  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx edi +
call sub_1022145  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A26C  +
push edi  +
push offset loc_100E83D  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [edi+6Ch] +
call sub_100FB75  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10220F9  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+60h]  +
test eax eax +
jz loc_10220F6  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10220F6  +
cmp byte ptr [eax+19h] 3 +
jnb loc_105A2AA  +
xor ebx ebx +
inc ebx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-18h] 0 +
push 0  +
lea ecx [ebp-3Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocSconope  +
lea ecx [ebp-3Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
inc dword ptr [eax+14h]  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_1037B1B  +
lea ecx [ebp-4Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-70h] +
mov byte ptr [ebp-0Eh] 0 +
call sub_100AD56  +
lea eax [ebp-70h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-4Ch] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 3 +
call sub_103AD28  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
lea ecx [ebp-3Ch] +
test al al +
jnz loc_1059EA3  +
push 0  +
call ds:??8SC@mmcerror@@QBE_NJ@Z  +
test al al +
jz loc_10221FD  +
mov [ebp-0Eh] bl +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_105A24C  +
cmp word ptr [eax] 0 +
jz loc_105A24C  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+60h]  +
mov ecx edi +
call sub_103AF79  +
push 8000FFFFh  +
test al al +
jz loc_1059EAE  +
lea eax [edi+12Ch] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1059EC6  +
lea eax [edi+138h] +
push eax  +
push 0  +
lea eax [edi+130h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-4Ch] +
push eax  +
call sub_103AE49  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1059EC6  +
cmp [ebp-0Eh] al +
jz loc_10222B5  +
mov [ebp-10h] bl +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-0Fh] 0 +
call sub_101DD84  +
and dword ptr [ebp-14h] 0 +
cmp byte ptr [ebp-0Eh] 0 +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-14h] +
jz loc_1059ECB  +
mov eax [ebp-6Ch] +
mov [ebp-1Ch] eax +
call sub_100A5E6  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-0Fh] +
push eax  +
push dword ptr [ebp-1Ch]  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [edi+84h] +
call sub_103E4F3  +
mov byte ptr [ebp-4] 9 +
push eax  +
lea ecx [ebp-3Ch] +
call esi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 8 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1022377  +
cmp byte ptr [ebp-0Fh] 0 +
jz loc_1059EFF  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [edi+64h] +
call sub_102240D  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0Bh +
call esi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 8 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1022377  +
mov eax [edi] +
push 0  +
mov ecx edi +
call dword ptr [eax+64h]  +
mov al [ebp-10h] +
mov byte ptr [edi+123h] 0 +
mov [edi+122h] al +
lea eax [ebp-3Ch] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-18h] ebx +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 7 +
test eax eax +
jnz loc_1059EF4  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call sub_101D546  +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 2 +
call sub_100A77D  +
lea ecx [ebp-0Dh] +
mov [ebp-4] bl +
call ds:??1?$CEventLock@UAppEvents@@@@QAE@XZ  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_100A60E  +
mov edi ecx +
xor esi esi +
mov [ebp-18h] esi +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-24h] esi +
mov [ebp-20h] esi +
inc dword ptr [eax]  +
mov dword ptr [ebp-2Ch] 3 +
mov [ebp-28h] esi +
xor ebx ebx +
inc ebx  +
push offset aCxmlobjectSc_0  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+0Ch] +
lea eax [ebp-14h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_102C3AF  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
call sub_101ED6F  +
push eax  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 4 +
call sub_102C353  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 6 +
cmp eax esi +
jz loc_102248C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 7 +
cmp eax esi +
jz loc_102249D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push esi  +
push edi  +
lea ecx [ebp-50h] +
mov [ebp-44h] bl +
call sub_101EA69  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 2 +
call sub_101EB25  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-18h] ebx +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov ecx [esi] +
lea eax [esi+1Ch] +
lea edx [eax-18h] +
push edx  +
push ecx  +
mov ecx [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_1022572  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A2CD  +
add esi 30h +
jmp loc_101EA08  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-28h] +
mov [ebp-14h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocSccre_0  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [esi+0E0h] +
mov [esi+0ECh] edi +
mov [ebp-18h] edi +
mov byte ptr [ebp-0Dh] 0 +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-0Dh] +
push edx  +
lea edx [ebp-18h] +
push edx  +
push dword ptr [ebp+14h]  +
push eax  +
call dword ptr [ecx+38h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1059E57  +
mov eax [ebp-18h] +
mov [esi+0ECh] eax +
cmp eax edi +
jz loc_1059E69  +
mov eax [ebp+10h] +
push ebx  +
push ebx  +
mov ecx esi +
mov [esi+0F0h] eax +
call sub_10228FD  +
and dword ptr [esi+0F0h] 0 +
mov edi eax +
push 80004005h  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1022678  +
push dword ptr [ebp+0Ch]  +
lea ecx [edi+58h] +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov ecx edi +
call sub_101F020  +
mov byte ptr [edi+1D5h] 0 +
mov byte ptr [edi+264h] 0 +
mov eax [esi] +
push 0  +
mov ecx esi +
mov [esi+0ECh] ebx +
call dword ptr [eax+64h]  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] ebx +
push offset aCpersistorHase  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea esi [edi+8] +
cmp [esi] ebx +
jz loc_10677A7  +
push ebx  +
lea ecx [ebp-10h] +
call sub_101DDF6  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_101E68B  +
cmp [ebp-10h] ebx +
jz loc_10677BA  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-10h] +
mov [ebp-14h] ebx +
call sub_101DE26  +
cmp [ebp-14h] ebx +
jz loc_1022805  +
xor esi esi +
cmp [ebp-14h] ebx +
jle loc_1022805  +
push ebx  +
lea ecx [ebp+8] +
call sub_101E2B5  +
lea eax [ebp+8] +
push eax  +
push esi  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_101E13F  +
cmp [ebp+8] ebx +
jz loc_103C03F  +
cmp [ebp+0Ch] ebx +
jz loc_103C048  +
push ebx  +
lea eax [ebp+8] +
push eax  +
push edi  +
lea ecx [ebp-4Ch] +
call sub_101EB5D  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call sub_100AD56  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 4 +
call sub_102285F  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-38h] +
call sub_101DDD9  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-38h] +
test eax eax +
jz loc_103C02C  +
call sub_100A77D  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 2 +
call sub_101EB25  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_10227FB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc esi  +
cmp esi [ebp-14h] +
jl loc_1022769  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1022815  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov al bl +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ecx ecx +
mov [ebp-18h] ecx +
mov [ebp-14h] ecx +
inc dword ptr [eax]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] ecx +
mov [ebp-4] ecx +
push offset aCpersistorGetn  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 1  +
push ecx  +
push ecx  +
mov ecx [ebp+8] +
mov eax esp +
mov [eax+4] ecx +
mov [ebp-10h] esp +
mov dword ptr [eax] 9 +
push ds:off_101DD38  +
mov ecx esi +
call sub_101DF07  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcdocCreaten  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_102293E  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1059DF9  +
mov edi [esi+28h] +
mov eax [edi] +
push ebx  +
push esi  +
mov ecx edi +
call dword ptr [eax+78h]  +
mov ebx eax +
test ebx ebx +
jz loc_1059E10  +
cmp byte ptr [ebp+8] 0 +
jz loc_1059E24  +
mov eax [edi] +
push 1  +
push esi  +
push ebx  +
mov ecx edi +
call dword ptr [eax+7Ch]  +
cmp byte ptr [ebp+8] 0 +
jz loc_1059E35  +
push 105h  +
push 0  +
push 0  +
push dword ptr [ebx+20h]  +
call ds:RedrawWindow  +
test byte ptr [esi+11Ch] 10h +
mov ebx [ebx+228h] +
jnz loc_102299D  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+64h]  +
test ebx ebx +
jz loc_1022A20  +
lea eax [ebx+0A4h] +
push eax  +
lea ecx [esi+6Ch] +
call sub_102124D  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_1022A20  +
push 8000FFFFh  +
mov edi offset dword_10F54B0 +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1022A20  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_102889F  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax ebx +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_106004A  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 18h +
jb loc_1060051  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
cmp dword ptr [edi+8] 1FFFFFFEh +
jnb loc_105E88A  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_1022B2D  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jz loc_1022B1B  +
cmp byte ptr [ebp+0Ch] 0 +
jnz loc_102186A  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_1022AF3  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
mov ecx [eax] +
cmp byte ptr [ecx+14h] 0 +
jz loc_102317B  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+14h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1001FCF  +
retn 10h  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_1022AF0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0  +
push 1  +
mov edi ecx +
call sub_1022A6B  +
push [ebp+arg_10]  +
mov esi eax +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_1022B65  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1022B85  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1022B8E  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov edx [ecx] +
mov [eax+0Ch] edx +
mov ecx [ecx+4] +
mov [eax+10h] ecx +
mov cl [ebp+arg_10] +
mov [eax+14h] cl +
mov byte ptr [eax+15h] 0 +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
call sub_100D481  +
cmp eax [edi+4] +
jnz loc_1054F55  +
mov ecx [esi] +
and [ebp+var_4] 0 +
mov [ebp+var_8] ecx +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx edi +
call sub_1022C0D  +
mov eax [eax] +
pop edi  +
add eax 10h +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+8] 0 +
jz loc_1022C61  +
mov eax [ebx+4] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_4] eax +
cmp edi [eax] +
jz loc_1056E36  +
cmp edi eax +
jnz loc_1054F65  +
mov eax [eax+8] +
mov ecx [eax+0Ch] +
cmp ecx [esi] +
jnb loc_1064D43  +
push esi  +
push eax  +
push 0  +
mov ecx ebx +
push [ebp+arg_0]  +
call sub_1022AA1  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
push [ebp+arg_8]  +
push dword ptr [ebx+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_1022AA1  +
mov eax [ebp+arg_0] +
jmp loc_1022C5C  +
***
push edi  +
mov ecx esi +
call sub_100CD14  +
jmp loc_100CC71  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
call sub_100CE12  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?OnCmdMsg@CView@@MAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z  +
test eax eax +
jnz loc_105E0ED  +
lea eax [esi+9Ch] +
cmp dword ptr [eax] 0 +
jz loc_103495E  +
mov ecx [eax] +
mov eax [ecx] +
pop esi  +
pop ebp  +
jmp dword ptr [eax+14h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax [ebp+arg_0] +
mov [ebp+var_24] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_8] eax +
lea eax [ebp+lParam] +
push eax  +
mov [ebp+lParam] 50h +
call sub_1022D4F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 113Fh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 312h +
jnz loc_1022D8D  +
pop ebp  +
retn 0Ch  +
***
cmp [ebp+arg_4] 314h +
jz loc_1022D7E  +
pop ebp  +
jmp ?OnUpdate@CView@@MAEXPAV1@JPAVCObject@@@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax lpDst +
mov edi [ebp+arg_8] +
mov ebx [ebp+arg_4] +
cmp eax offset lpDst +
jz loc_1022DC7  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1023FA4  +
***
lea eax [ebx-312h] +
cmp eax 7 +
ja loc_1022DE1  +
jmp ds:off_1024041[eax*4]  +
push edi  +
mov ecx esi +
call sub_1027628  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
jmp ds:?OnSetMessageString@CFrameWnd@@IAEJIJ@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
call sub_1022E1C  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
lea ecx [edi+4Ch] +
push ebx  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
push offset ??1CString@@QAE@XZ  +
push offset ??0CString@@QAE@XZ  +
push 3  +
push 4  +
lea eax [ebp-24h] +
push eax  +
call sub_100C8DF  +
mov [ebp-4] ebx +
cmp [ebp+8] ebx +
jz loc_1022E6F  +
push dword ptr [ebp+8]  +
lea ecx [ebp-24h] +
call ??4CString@@QAEABV0@PBG@Z  +
lea ecx [ebp-24h] +
call ?TrimLeft@CString@@QAEXXZ  +
lea ecx [ebp-24h] +
call ?TrimRight@CString@@QAEXXZ  +
mov eax [ebp-24h] +
cmp [eax-8] ebx +
jnz loc_104685C  +
mov [edi+110h] ebx +
xor esi esi +
push 1  +
push ebx  +
push esi  +
mov ecx edi +
call sub_1022ECE  +
inc esi  +
cmp esi 3 +
jl loc_1022E83  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push offset ??1CString@@QAE@XZ  +
push 3  +
push 4  +
lea eax [ebp-24h] +
push eax  +
call sub_100C964  +
call sub_1001FCF  +
retn 4  +
***
lea eax [ecx+10Ch] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi ecx +
cmp ebx [edi+44h] +
jge loc_1022F2C  +
test ebx ebx +
jl loc_1022F2C  +
mov eax [edi+48h] +
push esi  +
push [ebp+arg_4]  +
mov esi ebx +
imul esi esi +
lea ecx [eax+esi+8] +
call ??4CString@@QAEABV0@PBG@Z  +
mov eax [edi+48h] +
push dword ptr [eax+esi+4]  +
mov ecx edi +
push ebx  +
call sub_1022F37  +
cmp [ebp+arg_8] 1 +
pop esi  +
jnz loc_1022F2C  +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
mov ecx edi +
call sub_100C8BD  +
push 1  +
lea eax [ebp+lParam] +
push eax  +
push dword ptr [edi+20h]  +
call ds:InvalidateRect  +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
cmp edx [ecx+44h] +
jge loc_1022F73  +
test edx edx +
jl loc_1022F73  +
mov eax edx +
imul eax eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ecx+48h] +
mov [edi+eax+4] esi +
mov edi [ecx+48h] +
push dword ptr [edi+eax+8]  +
or edx esi +
push edx  +
push 40Bh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_100ED9B  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_100ED9B  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_100ED9B  +
xor eax eax +
inc eax  +
jmp loc_100ED9D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 0Bh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1022FEF  +
mov eax [ecx+238h] +
shr eax 5 +
not al  +
test al 1 +
jz loc_105A73A  +
add ecx 1F8h +
pop ebp  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+arg_0]  +
push 80h  +
call sub_1023016  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
mov eax [ebp+arg_0] +
jz loc_1054EF8  +
or [ecx] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 2Ch +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+194h] 0 +
jnz loc_105E18D  +
mov eax [eax+4Ch] +
test eax eax +
jz loc_102307D  +
mov eax [eax+20h] +
push 0FFFFFFF0h  +
push eax  +
call ds:GetWindowLongW  +
and eax 3 +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_102306D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_105F8E6  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 0A0h +
jb loc_105F8ED  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_101D7BC +
mov [esi+4] bl +
mov [esi+5] bl +
mov [esi+8] ebx +
call sub_1023117  +
lea ecx [esi+28h] +
call sub_1023117  +
lea ecx [esi+44h] +
call sub_1023117  +
mov [esi+60h] ebx +
mov [esi+64h] ebx +
mov [esi+68h] ebx +
mov [esi+6Ch] ebx +
mov [esi+70h] ebx +
mov [esi+74h] ebx +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_100CD14  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jz loc_102187E  +
mov edx [edx] +
cmp byte ptr [edx+14h] 0 +
jnz loc_10231AE  +
mov byte ptr [ecx+14h] 1 +
mov byte ptr [edx+14h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+14h] 0 +
mov eax [eax] +
mov esi [eax+4] +
lea eax [esi+4] +
jmp loc_1022AF8  +
cmp esi [ecx] +
jz loc_1054F46  +
mov eax [esi+4] +
mov byte ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_100E50B  +
jmp loc_10231A6  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_102ADA8  +
pop esi  +
retn   +
***
add [eax-6F6F6F70h] dl +
push 8  +
mov eax offset dword_10DEC9C +
call sub_1001F95  +
mov esi ecx +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
add esi 0FFFFFFBCh +
xor edi edi +
mov ecx esi +
mov [ebp-4] edi +
call sub_101D08C  +
cmp eax edi +
jz loc_10232FC  +
mov ecx eax +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
mov ebx eax +
push edi  +
mov ecx esi +
call sub_100DD70  +
cmp eax ebx +
jz loc_10233BC  +
inc edi  +
cmp edi 3 +
jle loc_10232E6  +
or eax 0FFFFFFFFh +
mov ecx [ebp-10h] +
mov edx [ebp-14h] +
mov [ecx+4] edx +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+11h] 0 +
jz loc_1027C4F  +
pop ebp  +
retn 4  +
***
add edi 4 +
jmp loc_100CE5F  +
lea eax [ebx+4] +
jmp loc_100CE6E  +
***
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+8] +
push eax  +
mov esi ecx +
lea eax [ebp-4] +
push eax  +
lea ecx [esi+58h] +
call sub_1023388  +
mov ecx [esi+5Ch] +
xor edx edx +
cmp ecx [eax] +
pop esi  +
setnz dl  +
mov al dl +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_1023313  +
mov esi [esi+4] +
mov [ebp+arg_4] eax +
cmp eax esi +
jnz loc_102A36A  +
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov eax edi +
jmp loc_10232FF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10233EE  +
test byte ptr [ebp+8] 1 +
jz loc_10233E2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_102321C +
movzx eax word ptr [esi+10h] +
and dword ptr [ebp-4] 0 +
push eax  +
call ds:DeleteAtom  +
lea ecx [esi+4] +
call sub_1015A6C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1023432  +
call sub_1001FCF  +
retn   +
***
mov dword ptr [ecx] offset off_10231DC +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
test byte ptr [esi+1F8h] 1 +
jz loc_1023466  +
push 0Fh  +
call sub_1023561  +
mov ecx [ebp+arg_0] +
push eax  +
lea eax [esi+2F0h] +
push eax  +
call sub_102353C  +
mov eax [esi+1F8h] +
shr eax 7 +
test al 1 +
jz loc_102348A  +
push 0Fh  +
call sub_1023561  +
mov ecx [ebp+arg_0] +
push eax  +
add esi 300h +
push esi  +
call sub_102353C  +
pop esi  +
pop ebp  +
retn 4  +
***
cmp byte ptr [ecx+40h] 0 +
jz loc_10234A2  +
call ?Default@CWnd@@IAEJXZ  +
retn 4  +
***
xor eax eax +
inc eax  +
jmp locret_102349F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
xor ebx ebx +
mov esi ecx +
mov [ebp-4] esi +
cmp edi ebx +
jz loc_10234F3  +
push dword ptr [edi]  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp eax esi +
jnz loc_106086B  +
mov eax [edi+0Ch] +
dec eax  +
jz loc_10234FA  +
sub eax 10000h +
jnz loc_10234F3  +
cmp dword ptr [edi+24h] 5404h +
jz loc_106089C  +
mov eax [ebp+0Ch] +
mov [eax] ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov eax [ebp+0Ch] +
mov dword ptr [eax] 20h +
jmp loc_10234F3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_102354B  +
mov eax [eax+4] +
push eax  +
push [ebp+lprc]  +
push dword ptr [ecx+4]  +
call ds:FillRect  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+nIndex]  +
call ds:GetSysColorBrush  +
push eax  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
xor ebx ebx +
push edi  +
mov [ebp+var_8] eax +
mov [ebp+var_4] ebx +
cmp eax ebx +
jz loc_10235B4  +
mov ecx [eax] +
mov [ebp+var_8] ecx +
mov ecx [eax+8] +
mov [ebp+var_4] ecx +
cmp ecx ebx +
jz loc_10235B4  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov eax [ebp+var_8] +
jmp loc_1023595  +
lea ecx [esi+4] +
call sub_1015FA3  +
lea eax [ebp+var_4] +
push eax  +
lea edi [esi+20h] +
push 800Dh  +
mov ecx edi +
mov [esi+4Ch] ebx +
call ?Lookup@CMapWordToPtr@@QBEHGAAPAX@Z  +
test eax eax +
jz loc_10235EA  +
mov ecx [ebp+var_4] +
push ebx  +
call sub_1046539  +
push dword ptr [esi+50h]  +
mov ecx [ebp+var_4] +
call sub_102459D  +
cmp [ebp+arg_0] bl +
jz loc_1023629  +
mov esi [esi+2Ch] +
neg esi  +
sbb esi esi +
mov [ebp+var_8] esi +
mov dword ptr [ebp+arg_0] 0FFFFh +
cmp esi ebx +
jz loc_1023629  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx edi +
call ?GetNextAssoc@CMapWordToPtr@@QBEXAAPAU__POSITION@@AAGAAPAX@Z  +
mov ecx [ebp+var_4] +
cmp ecx ebx +
jz loc_1023624  +
push ebx  +
call sub_104671F  +
cmp [ebp+var_8] ebx +
jnz loc_1023604  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
setl al  +
cmp al bl +
jz loc_1021BD0  +
jmp loc_10667AD  +
lea ecx [ebp-30h] +
call sub_100EBF1  +
push dword ptr [ebp+8]  +
call SysFreeString  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1021C1B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1021C1B  +
***
jmp ?Paint@Element@DirectUI@@UAEXPAUHDC__@@PBUtagRECT@@1PAU4@2@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
dec ecx  +
jnz loc_1046990  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+24h] +
call sub_1002565  +
cmp eax 1 +
jnz loc_10236C3  +
mov eax [esi+28h] +
mov eax [eax] +
cmp eax [esi+20h] +
jnz loc_10236C3  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
retn 4  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_105F471  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_4] +
lea edi [esi+10h] +
push eax  +
mov ecx edi +
call sub_100D440  +
mov eax [eax] +
cmp eax [esi+14h] +
jz loc_1023D7C  +
mov eax [eax+10h] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov al 1 +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_105FDB6  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 8 +
jb loc_105FDBD  +
mov eax ecx +
shl eax 3 +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
push 40h  +
mov eax offset word_10E3DB6 +
call sub_100C4D0  +
mov eax [ebp+0Ch] +
mov esi [ebp+8] +
mov ebx ecx +
mov ecx [ebx+0A4h] +
mov edi [ecx+0D8h] +
mov [ebp-3Ch] eax +
mov eax [esi+30h] +
mov [ebp-30h] eax +
test eax eax +
jz loc_1023851  +
test byte ptr [esi+0Ch] 1 +
jz loc_1023825  +
push 0  +
lea ecx [ebp-2Ch] +
mov dword ptr [ebp-14h] 7 +
call sub_100CD14  +
mov eax [edi] +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-2Ch] +
push ecx  +
push dword ptr [ebp-30h]  +
push edi  +
call dword ptr [eax+14h]  +
test eax eax +
jnz loc_106498B  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jb loc_1054F36  +
push eax  +
push dword ptr [esi+20h]  +
push dword ptr [esi+1Ch]  +
call sub_100A593  +
mov eax [esi+20h] +
mov ecx [esi+1Ch] +
xor edx edx +
mov [ecx+eax*2-2] dx +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jb loc_1054F3E  +
lea ecx [ebx+100h] +
push eax  +
call sub_100C7C5  +
test eax eax +
jz loc_1023815  +
mov ecx ebx +
call sub_100C573  +
cmp eax [esi+10h] +
jz loc_1029E2E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100CD3C  +
mov eax [edi] +
lea ecx [ebp-34h] +
push ecx  +
lea ecx [ebp-38h] +
push ecx  +
push dword ptr [ebp-30h]  +
push edi  +
call dword ptr [eax+10h]  +
mov eax [esi+0Ch] +
test al 2 +
jnz loc_1023EBF  +
test al 20h +
jnz loc_1023ECA  +
test al 40h +
jnz loc_1023D43  +
mov eax [ebp-3Ch] +
and dword ptr [eax] 0 +
call sub_100C50D  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_102388A  +
lea eax [edi+esi*8] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10238B8  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_10238D7  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_100D227  +
dec [ebp+arg_4]  +
add [ebp+arg_0] 8 +
jmp loc_10238BD  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_10] +
push eax  +
push dword ptr [esi+20h]  +
mov [ebp+var_4] ecx +
push dword ptr [esi]  +
call sub_10236E9  +
test al al +
jz loc_1023980  +
mov ecx [ebp+var_4] +
push ebx  +
call sub_100D296  +
mov ebx eax +
test ebx ebx +
jz loc_105F633  +
cmp dword ptr [esi+1Ch] 8 +
jb loc_1054F2E  +
mov eax [esi+8] +
mov [ebp+arg_0] eax +
mov eax [esi+18h] +
push edi  +
xor edi edi +
mov [ebp+var_8] eax +
test eax eax +
jle loc_102397C  +
mov eax [ebx] +
lea ecx [ebp+var_14] +
push ecx  +
lea ecx [ebp+var_C] +
push ecx  +
mov ecx [ebp+var_8] +
push 0  +
sub ecx edi +
push ecx  +
mov ecx [ebp+arg_0] +
lea ecx [ecx+edi*2] +
push ecx  +
push ebx  +
call dword ptr [eax+10h]  +
test eax eax +
jl loc_105F679  +
mov eax [ebp+var_C] +
test [ebp+var_10] eax +
jz loc_105F63A  +
mov eax [esi+20h] +
mov [ebp+var_18] eax +
lea eax [ebp+var_18] +
push eax  +
lea ecx [esi+24h] +
call sub_102398A  +
add edi [ebp+var_14] +
cmp edi [ebp+var_8] +
jl loc_1023931  +
mov al 1 +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_1002565  +
mov ecx esi +
mov edi eax +
call sub_10236D6  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jb loc_105F623  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10239C6  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_1002565  +
test eax eax +
jnz loc_10239FA  +
xor esi esi +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_1023A0A  +
mov eax [edi+4] +
lea ecx [eax+esi*8] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 3 +
jmp loc_10239DA  +
***
call sub_100A60E  +
mov esi ecx +
mov eax [ebp+10h] +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-18h] ecx +
mov ecx esi +
mov [ebp-14h] eax +
call sub_10236D6  +
mov edi [ebp+0Ch] +
mov [ebp+10h] eax +
test edi edi +
jz loc_1023ADB  +
mov ecx esi +
call sub_1002565  +
mov ecx 1FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_105F54A  +
add eax edi +
cmp [ebp+10h] eax +
jnb loc_105F584  +
mov edx [ebp+10h] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp+10h] +
jb loc_105F54F  +
add [ebp+10h] edx +
cmp [ebp+10h] eax +
jnb loc_1023A79  +
mov [ebp+10h] eax +
push 0  +
push dword ptr [ebp+10h]  +
call sub_1023725  +
and dword ptr [ebp-4] 0 +
mov ebx eax +
mov eax [esi+4] +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp+0Ch] ebx +
push eax  +
call sub_1023AE8  +
lea ecx [ebp-18h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_1023864  +
mov ecx [esi+8] +
push esi  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
call sub_1023AE8  +
mov ecx esi +
call sub_1002565  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jnz loc_105F558  +
mov eax [ebp+10h] +
lea eax [ebx+eax*8] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*8] +
mov [esi+8] eax +
mov [esi+4] ebx +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1023B16  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jnz loc_105E263  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn 18h  +
***
call sub_1001F95  +
mov edi [ebp+8] +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [esi+4] +
mov [esi] edi +
call sub_100CDE2  +
push edi  +
mov byte ptr [ebp-4] 1 +
call sub_1023B8D  +
push 0  +
lea ecx [esi+24h] +
mov [esi+20h] eax +
call sub_100A6A3  +
push 0  +
push 1  +
lea ecx [ebp+0Ch] +
call sub_100CD3C  +
mov eax esi +
call sub_1001FCF  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0Dh  +
call ds:GetStockObject  +
mov esi ds:SelectObject +
push eax  +
push [ebp+arg_0]  +
call esi  +
mov edi eax +
push edi  +
push [ebp+arg_0]  +
call esi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100C4D0  +
mov esi [ebp+8] +
mov edi ecx +
push 0  +
lea ecx [ebp-54h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCfontlinkerOnc  +
lea ecx [ebp-54h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [edi] +
push esi  +
mov ecx edi +
call dword ptr [eax+8]  +
test al al +
jz loc_105F688  +
mov eax [edi] +
sub esp 1Ch +
mov ecx esp +
mov [ebp-58h] esp +
push esi  +
push ecx  +
mov ecx edi +
call dword ptr [eax+10h]  +
push dword ptr [esi+10h]  +
lea ecx [ebp-44h] +
call sub_1023B35  +
lea eax [ebp-44h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_10238E0  +
test al al +
jz loc_105F69C  +
lea ecx [ebp-44h] +
call sub_10236A2  +
test al al +
jz loc_105F6E3  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1023C54  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105F6CB  +
xor esi esi +
lea ecx [ebp-44h] +
call sub_1023CCB  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-54h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_100C50D  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+24h] +
call sub_100A67D  +
push 0  +
push 1  +
lea ecx [esi+4] +
call sub_100CD3C  +
pop esi  +
retn   +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
mov eax [ebp+0Ch] +
mov eax [eax+24h] +
mov ecx [ecx+28h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
call ?GetItemText@CTreeCtrl@@QBE?AVCString@@PAU_TREEITEM@@@Z  +
push dword ptr [eax]  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
mov [ebp-4] esi +
call sub_101D1AD  +
lea ecx [ebp+0Ch] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push dword ptr [ebp-30h]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8Ch]  +
dec eax  +
neg eax  +
sbb eax eax +
neg eax  +
push eax  +
push dword ptr [esi+10h]  +
mov ecx ebx +
mov [esi+2Ch] eax +
call sub_1022D22  +
jmp loc_1023851  +
***
mov ecx esi +
call sub_100D296  +
test eax eax +
jz loc_1023DAF  +
mov esi [ebp+arg_8] +
mov ecx [eax] +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+1Ch]  +
test eax eax +
jl loc_1023DAF  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_1022BC7  +
mov ecx [esi] +
mov [eax] ecx +
jmp loc_1023718  +
xor al al +
jmp loc_102371A  +
***
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
jmp loc_100D46F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 110Ah  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov ecx [edi+174h] +
push 1  +
push esi  +
call sub_1023DC6  +
mov esi eax +
jmp loc_10242F1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
mov edi ecx +
cmp dword ptr [edi+134h] 1 +
jl loc_105D5FD  +
push ebx  +
push esi  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [edi+20h]  +
call ds:GetClientRect  +
mov eax [edi+134h] +
mov esi [ebp+8] +
mov ebx ds:GetSysColor +
mov [ebp-4] eax +
mov eax [esi] +
push 0Fh  +
mov [ebp+8] eax +
call ebx  +
push eax  +
mov eax [ebp+8] +
mov ecx esi +
call dword ptr [eax+34h]  +
mov eax [esi] +
push 12h  +
mov [ebp+8] eax +
call ebx  +
push eax  +
mov eax [ebp+8] +
mov ecx esi +
call dword ptr [eax+38h]  +
xor ebx ebx +
lea eax [edi+12Ch] +
cmp eax ebx +
jz loc_1023E75  +
cmp [eax+4] ebx +
jz loc_1023E75  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+30h]  +
mov ebx eax +
push 280Ah  +
push 6  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [esi+4]  +
call ds:DrawEdge  +
mov eax [esi] +
add dword ptr [ebp-10h] 5 +
push 8024h  +
lea ecx [ebp-10h] +
push ecx  +
push dword ptr [edi+17Ch]  +
mov ecx esi +
push dword ptr [edi+178h]  +
call dword ptr [eax+70h]  +
test ebx ebx +
jz loc_1023EB5  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+30h]  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop edi  +
leave   +
retn 4  +
***
mov ecx [ebp-38h] +
mov [esi+24h] ecx +
jmp loc_1023841  +
***
mov ecx [ebp-34h] +
mov [esi+28h] ecx +
jmp loc_1023849  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1023EF9  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105AFA1  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_105AFB8  +
and dword ptr [eax] 0 +
mov ecx [edi+174h] +
push ebx  +
call sub_100C5D1  +
mov ebx eax +
test ebx ebx +
jz loc_102414F  +
mov ecx [edi+174h] +
push ebx  +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push ecx  +
mov ecx edi +
mov [ebp+arg_0] edx +
call sub_1024223  +
cmp eax 2 +
jnz loc_1023F9E  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1024155  +
test ebx ebx +
jz loc_1023F82  +
mov eax esi +
mov eax [eax+8] +
mov esi [esi] +
push ebx  +
push eax  +
mov ecx edi +
call sub_10242CF  +
mov ebx eax +
mov [ebp+var_4] ebx +
test ebx ebx +
jz loc_1023F7E  +
mov ecx [edi+174h] +
push ebx  +
call sub_100C799  +
mov ebx eax +
test esi esi +
jnz loc_1023F53  +
test esi esi +
jnz loc_1024155  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1024155  +
mov ecx [ebp+arg_4] +
push 2  +
mov [ecx] eax +
pop eax  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 8  +
push edi  +
push ebx  +
push [ebp+arg_0]  +
push offset dword_100C4B0  +
push 6Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10C9315  +
jmp loc_1022DC7  +
push edi  +
mov ecx esi +
call sub_108BF5B  +
jmp loc_1022DE1  +
push edi  +
mov ecx esi +
call sub_108BE33  +
jmp loc_1022DE1  +
push edi  +
mov ecx esi +
call sub_108BCF7  +
jmp loc_1022DE1  +
push edi  +
mov ecx esi +
call sub_1089CC5  +
jmp loc_1022DE1  +
lea edi [esi+250h] +
push 0  +
mov ecx edi +
call sub_100EB41  +
test al al +
jz loc_1024014  +
mov ecx edi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ecx [esi+174h] +
mov eax [ecx] +
lea edx [ebp+var_10] +
push edx  +
call dword ptr [eax+118h]  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1022DE1  +
push edi  +
mov ecx esi +
call sub_107F055  +
jmp loc_1022DE1  +
push 58h  +
mov eax offset word_10DED7A +
call sub_1001F95  +
mov [ebp+var_18] ecx +
xor ebx ebx +
mov [ebp+var_10] ebx +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_24] +
call MFC42u_6466  +
xor edi edi +
inc edi  +
push ebx  +
lea ecx [ebp+var_34] +
mov [ebp+var_4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmainframeScup  +
lea ecx [ebp+var_34] +
mov byte ptr [ebp+var_4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi dword_10F5304 +
cmp esi ebx +
jz loc_106031E  +
mov eax 315h +
cmp [ebp+arg_4] eax +
jz loc_1060330  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push ebx  +
call loc_1024149  +
lea eax [ebp+var_34] +
mov ecx [ebp+arg_0] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp+var_34] +
mov [ebp+var_10] edi +
mov byte ptr [ebp+var_4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+var_20] +
mov ecx [ebp+var_24] +
mov [eax+4] ecx +
mov eax [ebp+arg_0] +
call sub_1001FCF  +
retn 0Ch  +
jmp ds:?UpdateAllViews@CDocument@@QAEXPAVCView@@JPAVCObject@@@Z  +
inc eax  +
jmp loc_1023F9E  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
xor eax eax +
inc eax  +
jmp loc_1023F9D  +
***
call sub_1001F95  +
mov eax [ecx+0A4h] +
mov esi [eax+0D8h] +
xor eax eax +
mov [ebp-10h] eax +
mov edi [ebp+0Ch] +
mov [ebp-4] eax +
mov [ebp-14h] eax +
cmp [ebp+8] eax +
jz loc_106452A  +
cmp edi eax +
jz loc_106452A  +
cmp esi eax +
jz loc_1064495  +
mov ebx [esi] +
lea ecx [ebp-10h] +
call sub_100A5E6  +
push eax  +
push offset dword_1023D6C  +
push esi  +
call dword ptr [ebx]  +
mov esi eax +
test esi esi +
jl loc_10644C3  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+130h]  +
mov esi eax +
test esi esi +
jl loc_10644F5  +
mov eax [edi+8] +
mov ecx [ebp-14h] +
or dword ptr [edi] 8 +
and eax 0FFFFF0FFh +
shl ecx 8 +
or eax ecx +
or dword ptr [edi+0Ch] 0F00h +
mov [edi+8] eax +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1024214  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov eax lpDst +
mov edi offset lpDst +
cmp eax edi +
jz loc_1024249  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105AF51  +
xor ebx ebx +
mov [ebp-10h] ebx +
lea ecx [esi+0D8h] +
mov [ebp-4] ebx +
mov [ebp-14h] ebx +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
lea edx [ebp-10h] +
push edx  +
push dword ptr [ebp+10h]  +
push eax  +
call dword ptr [ecx+80h]  +
mov esi eax +
cmp esi ebx +
jl loc_105AF68  +
mov eax [ebp+0Ch] +
xor edx edx +
cmp [eax] ebx +
jz loc_10242BA  +
cmp edx [ebp-14h] +
jge loc_10242A1  +
mov ecx [eax] +
mov esi [ecx] +
mov [eax] esi +
mov ecx [ecx+8] +
mov esi [ebp-10h] +
cmp ecx [esi+edx*4] +
jnz loc_10242C5  +
inc edx  +
cmp [eax] ebx +
jnz loc_1024286  +
cmp [eax] ebx +
jz loc_10242BA  +
push 2  +
pop esi  +
lea ecx [ebp-10h] +
call sub_100C763  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
cmp [ebp-14h] edx +
jge loc_105AF9A  +
jmp loc_10242A5  +
xor esi esi +
inc esi  +
jmp loc_10242A8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10242EE  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105A8E1  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1024306  +
push esi  +
mov ecx edi +
call sub_1024313  +
cmp [ebp+arg_0] eax +
jnz loc_1023DE3  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax lpDst +
mov edi offset lpDst +
mov ebx offset dword_100C4B0 +
cmp eax edi +
jz loc_102433B  +
cmp byte ptr [eax+19h] 5 +
jnb sub_105A8A2  +
push [ebp+arg_0]  +
mov ecx [esi+174h] +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
lea ecx [esi+0D8h] +
mov [ebp+arg_0] eax +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+7Ch]  +
test eax eax +
jl loc_105A8B5  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
push eax  +
mov ecx ebx +
call sub_100A78D  +
jmp loc_100ADEB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp byte ptr [ecx+30h] 0 +
jz loc_10696E9  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
add ecx 4 +
call ?Lookup@CMapWordToPtr@@QBEHGAAPAX@Z  +
mov eax [ebp+var_4] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_10697C0  +
push edi  +
push [ebp+arg_0]  +
lea edi [esi+24h] +
mov ecx edi +
call sub_100AE0E  +
test eax eax +
jl loc_10697F1  +
mov eax [esi+2Ch] +
inc eax  +
push eax  +
mov ecx edi +
call sub_101D69E  +
mov esi eax +
test esi esi +
jz loc_1069814  +
push esi  +
call ds:SHStripMneumonicW  +
push 9  +
push esi  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1069845  +
push 0FFFFFFFFh  +
mov ecx edi +
call sub_101D6F2  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
cmp [ebp+10h] ecx +
jnz loc_10244D3  +
xor eax eax +
inc eax  +
jmp loc_10244D5  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionpanet_0  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [esi+60h] 0 +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
jnz loc_106984F  +
push 80070057h  +
push dword ptr [ebp+8]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ebx  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call edi  +
xor ecx ecx +
cmp eax ecx +
jl loc_1069862  +
mov eax [ebp+8] +
mov [esi+74h] eax +
mov eax [ebp+18h] +
mov [esi+5Ch] eax +
mov al [ebp+1Ch] +
mov [esi+68h] al +
mov al [ebp+20h] +
mov [esi+69h] al +
mov eax [ebp+24h] +
mov [esi+64h] eax +
cmp [ebp+0Ch] ecx +
jz loc_102441E  +
xor eax eax +
mov [esi+4Ch] al +
test al al +
jnz loc_1024534  +
cmp [ebp+0Ch] ecx +
jz loc_10244EB  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_1045ED9  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call ebx  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call edi  +
test eax eax +
jl loc_1069896  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_10243B7  +
push dword ptr [ebp+14h]  +
mov ecx esi +
call sub_102459D  +
lea ecx [ebp-1Ch] +
call edi  +
test eax eax +
setnl al  +
lea ecx [ebp-1Ch] +
mov [esi+60h] al +
call edi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1069779  +
push eax  +
add ecx 38h +
call sub_100AE0E  +
test eax eax +
jl loc_1069783  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+10h] 0 +
push edi  +
jz loc_10245FA  +
mov ecx [esi+10h] +
mov eax [ecx] +
mov [esi+10h] eax +
mov eax [ebp+arg_0] +
mov [ecx+4] eax +
mov eax [ebp+arg_4] +
mov [ecx] eax +
inc dword ptr [esi+0Ch]  +
xor eax eax +
lea edi [ecx+8] +
stos   +
pop edi  +
mov eax ecx +
pop esi  +
pop ebp  +
retn 8  +
push 0Ch  +
push dword ptr [esi+18h]  +
lea eax [esi+14h] +
push eax  +
call ?Create@CPlex@@SGPAU1@AAPAU1@II@Z  +
mov ecx [esi+18h] +
mov edx ecx +
imul edx edx +
add eax 4 +
dec ecx  +
lea eax [eax+edx-0Ch] +
js loc_10245D6  +
mov edx [esi+10h] +
mov [eax] edx +
mov [esi+10h] eax +
dec ecx  +
sub eax 0Ch +
test ecx ecx +
jge loc_102461A  +
jmp loc_10245D6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
push dword ptr [esi+8]  +
call sub_10245C7  +
mov ecx [ebp+arg_0] +
mov [eax+8] ecx +
mov ecx [esi+8] +
test ecx ecx +
jz loc_102465A  +
mov [ecx] eax +
mov [esi+8] eax +
pop esi  +
pop ebp  +
retn 4  +
mov [esi+4] eax +
jmp loc_1024652  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionpaneAdd  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi 80070057h +
push edi  +
push dword ptr [ebp+20h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jl loc_1068C6A  +
push dword ptr [ebp+8]  +
mov ecx [ebp-10h] +
call sub_1016801  +
mov [ebp+8] eax +
cmp eax ebx +
jz loc_1068C9E  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_1024388  +
mov [ebp-10h] eax +
cmp eax ebx +
jz loc_1054F01  +
mov eax [ebp+20h] +
cmp [eax] ebx +
jnz loc_1068D23  +
push 78h  +
call sub_100ABF0  +
mov ecx eax +
mov [ebp+0Ch] ecx +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_1054F27  +
call sub_1024921  +
mov edi [ebp+20h] +
mov [ebp-4] bl +
mov [edi] eax +
cmp eax ebx +
jz loc_1068D63  +
mov ecx [ebp-10h] +
push 0FFFFFFFFh  +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+24h]  +
push dword ptr [edi]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
call sub_10247C9  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1068DA7  +
lea ecx [ebp-20h] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 24h  +
***
call sub_1001F95  +
mov ebx ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionpanez_0  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+18h]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-1Ch] +
call esi  +
test eax eax +
jl loc_106919B  +
push dword ptr [ebp+20h]  +
mov ecx [ebp+18h] +
push 0  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push ebx  +
call sub_1024434  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call esi  +
test eax eax +
jl loc_10691CF  +
cmp dword ptr [ebp+24h] 0FFFFFFFFh +
jnz loc_104A72C  +
push dword ptr [ebp+18h]  +
lea ecx [ebx+4] +
call sub_1024631  +
push 8007000Eh  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call esi  +
test eax eax +
jl loc_10691F5  +
mov ecx [ebx+3Ch] +
call sub_1024917  +
lea ecx [ebp-1Ch] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 20h  +
***
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
xor ebx ebx +
push 0Ah  +
lea ecx [esi+4] +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_1008500 +
call sub_1024996  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 1 +
mov [esi+20h] ebx +
call sub_100AD56  +
lea ecx [esi+38h] +
mov byte ptr [ebp-4] 2 +
call sub_100AD56  +
or dword ptr [esi+58h] 0FFFFFFFFh +
or dword ptr [esi+6Ch] 0FFFFFFFFh +
mov [esi+4Ch] bl +
mov [esi+50h] ebx +
mov [esi+54h] ebx +
mov [esi+5Ch] ebx +
mov [esi+60h] bl +
mov [esi+64h] ebx +
mov [esi+68h] bl +
mov [esi+69h] bl +
mov byte ptr [esi+70h] 1 +
mov [esi+74h] ebx +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+8] ecx +
mov [eax+4] ecx +
mov [eax+14h] ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_1008438 +
mov [eax+18h] ecx +
pop ebp  +
retn 4  +
***
call sub_100A4F0  +
mov edi ecx +
mov [ebp-30h] edi +
mov eax lpDst +
mov esi offset lpDst +
cmp eax esi +
jz loc_10249EC  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1064ADB  +
mov ecx [edi+0A4h] +
mov ecx [ecx+40h] +
xor ebx ebx +
cmp ecx ebx +
jz loc_1064AF7  +
mov ecx [ecx+0E0h] +
mov [ebp-24h] ecx +
cmp [ebp-24h] ebx +
jz loc_1064AFF  +
cmp [edi+0A0h] ebx +
jnz loc_1027865  +
push dword ptr [ebp+8]  +
mov ecx edi +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov [ebp-2Ch] eax +
mov ecx [edi+0A4h] +
mov esi [ecx+0D8h] +
mov [ebp-28h] esi +
mov ecx [esi] +
lea edx [ebp-34h] +
push edx  +
push eax  +
push esi  +
call dword ptr [ecx+7Ch]  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1024A6B  +
mov eax [esi] +
push ebx  +
push ebx  +
mov ebx 9009h +
push ebx  +
push dword ptr [ebp-2Ch]  +
push esi  +
call dword ptr [eax+78h]  +
mov [ebp-1Ch] eax +
xor eax eax +
inc eax  +
cmp [ebp-1Ch] eax +
jz loc_102777F  +
xor eax eax +
cmp [ebp-1Ch] eax +
setnl al  +
call sub_100A4DC  +
retn 4  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
mov esi [ebp+0Ch] +
and dword ptr [ebp-2Ch] 0 +
mov [ebp-40h] ecx +
push 0  +
lea ecx [ebp-3Ch] +
mov [ebp-28h] eax +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewtool_3  +
lea ecx [ebp-3Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push esi  +
lea eax [ebp-54h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-54h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1063F67  +
mov ecx [ebp-40h] +
test [ecx+68h] bl +
jnz loc_10282BC  +
mov ecx [ebp-28h] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov [ebp-2Ch] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-28h] +
call sub_100C50D  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1024BC5  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1024BE0  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1024C2B  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105AE97  +
cmp [ebp+arg_0] 3 +
ja loc_1047B4B  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100DD70  +
test eax eax +
jz loc_1024C46  +
mov eax [eax+20h] +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_1047B4B  +
mov ecx [esi+270h] +
cmp ecx 1 +
jz loc_105AEAE  +
test ecx ecx +
jnz loc_1047B28  +
lea eax [esi+178h] +
cmp [eax] ecx +
jz loc_1047B28  +
push eax  +
lea ecx [ebp+arg_0] +
call sub_1018390  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1024C90  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+4] +
cmp byte ptr [eax+11h] 0 +
push edi  +
mov edi ecx +
mov byte ptr [ebp+var_4] 1 +
jnz loc_1024CDA  +
mov ecx [ebx] +
cmp ecx [eax+0Ch] +
mov edi eax +
setb byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jnz loc_104FE1F  +
mov eax [eax+8] +
cmp byte ptr [eax+11h] 0 +
jz loc_1024CBE  +
cmp byte ptr [ebp+var_4] 0 +
mov ecx edi +
mov [ebp+arg_4] ecx +
jz loc_10264BE  +
mov eax [esi+4] +
cmp edi [eax] +
jnz loc_105C41C  +
push ebx  +
push edi  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_1017CB4  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1024D38  +
cmp byte ptr [eax+19h] 5 +
jnb loc_10649DB  +
cmp dword ptr [esi+9Ch] 1 +
jz loc_1024D54  +
mov eax [ebp+arg_0] +
push dword ptr [eax+34h]  +
mov ecx esi +
call sub_1017E68  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
sal byte ptr [ebp+3Bh] 83h +
retn   +
***
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov eax [ecx] +
jmp dword ptr [eax+2Ch]  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewIsowni  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
add esi 0D8h +
mov eax [esi] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A73E  +
mov ecx esi +
mov [ebp-0Dh] bl +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-0Dh] +
push edx  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+14Ch]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1024F72  +
mov bl [ebp-0Dh] +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov al bl +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov al [ebp+arg_C] +
and [ebp+var_4] 0 +
mov [ecx+16Fh] al +
test al al +
jz loc_1025017  +
cmp byte ptr [ecx+16Eh] 0 +
jnz loc_104355B  +
mov ecx [ebp+arg_0] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+arg_0] +
leave   +
retn 14h  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
mov [ebp-14h] esi +
mov ecx [ebp+8] +
push esi  +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
mov [ebp-4] esi +
inc esi  +
push offset aCamcviewScsh_0  +
mov [ebp-14h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1022FD1  +
mov ebx [edi+32Ch] +
push 8000FFFFh  +
push ebx  +
lea eax [ebp-24h] +
push eax  +
mov [ebp-10h] ebx +
call sub_100A3AE  +
mov ecx [ebp+8] +
mov [ebp-4] esi +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_102523E  +
lea ecx [edi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push eax  +
mov ecx edi +
call sub_1024ED1  +
cmp byte ptr [ebp+0Ch] 0 +
mov [edi+33Ch] al +
jz loc_104FDF9  +
mov byte ptr [ebp+0Ch] 1 +
test al al +
jnz loc_104FDF9  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-24h] +
push eax  +
mov ecx ebx +
call sub_1025287  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
push 3  +
pop ebx  +
test al al +
jnz loc_105B6E2  +
mov ecx edi +
call sub_100DA2C  +
cmp byte ptr [ebp+14h] 0 +
jz loc_102512E  +
mov byte ptr [edi+1D5h] 1 +
push dword ptr [ebp+10h]  +
lea eax [ebp-24h] +
push dword ptr [ebp+0Ch]  +
lea ecx [edi+5Ch] +
push 3478h  +
push edi  +
push offset loc_1024EC7  +
push eax  +
call sub_100F8FD  +
mov ecx [ebp+8] +
push eax  +
mov [ebp-4] ebx +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
mov ebx ds:?ToHr@SC@mmcerror@@QBEJXZ +
call ebx  +
test eax eax +
jl loc_105B712  +
mov eax [edi+40h] +
push 8000FFFFh  +
push eax  +
mov [ebp+14h] eax +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call ebx  +
test eax eax +
jl loc_105B738  +
mov eax [edi+238h] +
shr eax 5 +
not al  +
test al 1 +
jz loc_104FE02  +
mov eax [ebp+14h] +
mov eax [eax+10Ch] +
shr eax 3 +
not al  +
test al 1 +
jz loc_104FE02  +
cmp byte ptr [edi+33Ch] 0 +
mov byte ptr [ebp+14h] 1 +
jnz loc_104FE02  +
push dword ptr [ebp+14h]  +
mov ecx [ebp-10h] +
lea eax [ebp-24h] +
push eax  +
call sub_1025313  +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp byte ptr [ebp+14h] 0 +
jz loc_1025231  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-10h] +
lea eax [ebp-24h] +
push eax  +
call sub_1025287  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call ebx  +
test eax eax +
jl loc_105B75E  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
cmp dword ptr [esi+14h] 0 +
mov [ebp-4] ebx +
jz loc_10628C6  +
movzx edx byte ptr [ebp+0Ch] +
mov ecx [esi+14h] +
mov eax [ecx] +
push edx  +
push ebx  +
push 3478h  +
push esi  +
lea edx [ebp-30h] +
push edx  +
call dword ptr [eax+14h]  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+var_4] 0 +
push 3478h  +
push [ebp+arg_0]  +
call sub_1025339  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCstandardtoo_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 8000FFFFh  +
push dword ptr [esi+14h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1062961  +
mov ecx [esi+14h] +
mov eax [ecx] +
xor edx edx +
cmp [ebp+10h] dl +
setz dl  +
push edx  +
push 8  +
push dword ptr [ebp+0Ch]  +
lea edx [ebp-30h] +
push esi  +
push edx  +
call dword ptr [eax+14h]  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call edi  +
xor ebx ebx +
inc ebx  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_102541F  +
movzx edx byte ptr [ebp+10h] +
mov ecx [esi+14h] +
mov eax [ecx] +
push edx  +
push 4  +
push dword ptr [ebp+0Ch]  +
lea edx [ebp-30h] +
push esi  +
push edx  +
call dword ptr [eax+14h]  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
lea eax [ecx+108h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ax [ecx+10h] +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov [ecx] ax +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+8] +
leave   +
retn 8  +
***
mov eax ecx +
mov dword ptr [eax] offset off_10231DC +
retn   +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScshow  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [ebp+10h] 0 +
jnz loc_1043DAC  +
mov al [edi+1F8h] +
and al bl +
cmp al [ebp+0Ch] +
jnz loc_1043DAC  +
mov eax [edi+32Ch] +
push 8000FFFFh  +
push eax  +
mov [ebp+10h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10255FF  +
mov eax [edi+40h] +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10255FF  +
mov al [edi+238h] +
not al  +
test al bl +
jz loc_105AF08  +
mov eax [ebp-14h] +
mov eax [eax+10Ch] +
shr eax 3 +
not al  +
test al bl +
jz loc_105AF08  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+10h] +
lea eax [ebp-34h] +
push eax  +
call sub_1025661  +
mov byte ptr [ebp-4] 4 +
push eax  +
lea ecx [ebp-24h] +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
cmp dword ptr [esi+14h] 0 +
mov [ebp-4] ebx +
jz loc_10628A9  +
movzx edx byte ptr [ebp+0Ch] +
mov ecx [esi+14h] +
mov eax [ecx] +
push edx  +
push ebx  +
push 344Bh  +
push esi  +
lea edx [ebp-30h] +
push edx  +
call dword ptr [eax+14h]  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10254D4  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_102321C +
call sub_10206B1  +
push offset String  +
mov byte ptr [ebp-4] 1 +
call ds:AddAtomW  +
push 0  +
lea ecx [ebp-20h] +
mov [esi+10h] ax +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewCdef_0  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1025801  +
test al al +
jz loc_105C526  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
test eax eax +
jz loc_105C475  +
mov esi [eax+20h] +
mov [ebp+arg_0] esi +
test esi esi +
jz loc_102582E  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
add ecx 4 +
call sub_1024C9C  +
xor eax eax +
test esi esi +
setnz al  +
pop esi  +
leave   +
retn 4  +
***
call sub_100A60E  +
mov edi ecx +
mov [ebp-14h] edi +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewDeferr  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+8] bl +
jz loc_105C5AF  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_102588C  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105C541  +
mov ecx offset dword_10F54B0 +
mov byte ptr [ebp-4] 1 +
call sub_102549D  +
mov [ebp+0Ch] eax +
cmp eax ebx +
jz loc_105C558  +
push 14h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_1025938  +
push edi  +
call sub_10256ED  +
mov esi eax +
mov [ebp+8] esi +
mov byte ptr [ebp-4] 3 +
cmp esi ebx +
jz loc_105C573  +
mov ecx [ebp+0Ch] +
push 1  +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_1025941  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
cmp al bl +
jnz loc_105C58E  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [edi+20h]  +
mov [ebp+8] ebx +
call ds:PostMessageW  +
lea ecx [ebp+8] +
call sub_1023205  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
xor esi esi +
jmp loc_10258C2  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-14h] edi +
mov ecx [ebp+8] +
push edi  +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ebx [ebp+0Ch] +
xor esi esi +
inc esi  +
mov [ebp-4] edi +
mov [ebp-14h] esi +
cmp ebx edi +
jz loc_105FFE2  +
cmp dword ptr [ebp+10h] 2 +
ja loc_105FFF1  +
mov eax [ebx] +
lea ecx [ebp-18h] +
push ecx  +
lea ecx [ebp-28h] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+8]  +
mov ecx [ebp+8] +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
mov [ebp-4] esi +
call edi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105FFFF  +
mov esi [ebp-10h] +
mov ecx esi +
call sub_1002565  +
test eax eax +
jz loc_1043E56  +
mov eax [ebp-10h] +
mov eax [eax+8] +
mov esi [esi+4] +
mov [ebp+0Ch] eax +
mov ecx [ebp+8] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1043E56  +
push dword ptr [ebp-18h]  +
mov ecx [ebp-10h] +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-1Ch] +
push esi  +
push eax  +
call sub_1029CD9  +
mov esi [eax] +
cmp esi [ebp+0Ch] +
jz loc_1043E56  +
mov ecx [esi] +
mov eax [ecx] +
push ebx  +
lea edx [ebp-38h] +
push edx  +
call dword ptr [eax+0Ch]  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
push 0  +
call ds:??8SC@mmcerror@@QBE_NJ@Z  +
test al al +
jz loc_105FFE9  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax]  +
mov ecx [ebp+8] +
push 1  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1025A84  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105FB03  +
mov eax [esi+8] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+4] +
call sub_1025AAD  +
mov eax [esi+8] +
mov eax [eax] +
mov ecx esi +
mov [esi] eax +
call sub_1018077  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
cmp eax [ecx] +
jnz loc_1025AD9  +
cmp [ebp+arg_8] ecx +
jnz loc_1025AD9  +
mov ecx esi +
call sub_10183C1  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp eax [ebp+arg_8] +
jz loc_1025ACC  +
jmp loc_105FADA  +
***
call sub_101D46C  +
mov eax [ebp+8] +
and dword ptr [ebp-0C4h] 0 +
mov [ebp-0B0h] eax +
mov eax [ebp+0Ch] +
mov ebx ecx +
mov [ebp-0D4h] eax +
mov eax [ebp+10h] +
push 0  +
lea ecx [ebp-0C0h] +
mov [ebp-0E0h] ebx +
mov [ebp-0DCh] eax +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewSconse  +
lea ecx [ebp-0C0h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebx+0D8h] +
mov esi offset dword_100CA88 +
lea edi [ebp-34h] +
movs   +
movs   +
movs   +
movs   +
mov edi 8000FFFFh +
push edi  +
push eax  +
mov [ebp-0C8h] eax +
lea eax [ebp-24h] +
push eax  +
mov dword ptr [ebp-0D8h] 1 +
mov byte ptr [ebp-0CCh] 0 +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CCE6  +
mov eax [ebx+310h] +
push edi  +
push eax  +
mov [ebp-0D0h] eax +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CD08  +
lea ecx [ebp-0ACh] +
call sub_10230CC  +
mov ecx [ebp-0D0h] +
xor edi edi +
inc edi  +
mov byte ptr [ebp-4] 4 +
cmp [ecx+14h] edi +
jz loc_105CD1D  +
mov eax [ebp-0C8h] +
mov ecx [eax] +
mov esi offset dword_100CA88 +
lea edi [ebp-24h] +
movs   +
movs   +
lea edx [ebp-24h] +
push edx  +
lea edx [ebp-0ACh] +
push edx  +
push dword ptr [ebp-0D4h]  +
movs   +
push eax  +
movs   +
call dword ptr [ecx+24h]  +
push eax  +
lea ecx [ebp-0C0h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CE00  +
cmp byte ptr [ebp-0CCh] 0 +
jnz loc_105CE22  +
lea esi [ebp-24h] +
lea edi [ebp-34h] +
movs   +
movs   +
movs   +
movs   +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push dword ptr [ebp-0CCh]  +
lea eax [ebp-0ACh] +
push dword ptr [ebp-0D8h]  +
sub esp 78h +
mov ecx esp +
mov [ebp-0D0h] esp +
push eax  +
call sub_1020AEF  +
push dword ptr [ebp-0D4h]  +
lea eax [ebp-24h] +
push eax  +
mov ecx ebx +
call sub_1020C8B  +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CE00  +
push 0  +
call ds:CoTaskMemFree  +
xor edi edi +
inc edi  +
push edi  +
mov ecx ebx +
call sub_1024C0D  +
cmp dword ptr [ebp-0A4h] 0 +
mov [ebp-0CCh] eax +
jz loc_1055230  +
push 9  +
xor eax eax +
pop ecx  +
lea edi [ebp-104h] +
stos   +
mov eax [ebp-0CCh] +
xor edi edi +
inc edi  +
mov [ebp-104h] edi +
mov [ebp-0FCh] eax +
cmp [ebp-0A4h] edi +
jz loc_105CE46  +
cmp dword ptr [ebp-0A4h] 2 +
jnz loc_1025D50  +
mov [ebp-0ECh] edi +
mov dword ptr [ebp-0F8h] 0FFFFFFFDh +
inc dword ptr [ebx+0C8h]  +
mov eax [ebx+0C8h] +
mov [ebp-0D0h] eax +
lea eax [ebp-34h] +
push eax  +
push dword ptr [ebp-0D4h]  +
lea eax [ebp-24h] +
push eax  +
mov ecx ebx +
call sub_1026747  +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 0Ah +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1025F08  +
mov ecx [ebx+17Ch] +
test ecx ecx +
jz loc_1025DCF  +
lea eax [ebp-104h] +
push eax  +
push dword ptr [ebp-0D4h]  +
lea eax [ebp-24h] +
push ebx  +
push eax  +
call sub_1025F87  +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea eax [ebp-104h] +
push eax  +
push edi  +
push 0  +
push dword ptr [ebp-0D4h]  +
lea eax [ebp-24h] +
push dword ptr [ebp-0C8h]  +
mov ecx ebx +
push eax  +
mov byte ptr [ebp-4] 0Bh +
call sub_101864F  +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 0Ch +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0Bh +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CE5B  +
mov eax [ebp-0D0h] +
xor ecx ecx +
cmp eax [ebx+0C8h] +
mov dword ptr [ebp-4] 4 +
setz cl  +
cmp eax edi +
jnz loc_1025E45  +
and dword ptr [ebx+0C8h] 0 +
test ecx ecx +
jz loc_105CE6C  +
cmp dword ptr [ebp-0A4h] 0 +
jz loc_1056512  +
lea eax [ebp-24h] +
push eax  +
mov ecx ebx +
call sub_10285EC  +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 12h +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1025F08  +
lea eax [ebp-24h] +
push eax  +
mov ecx ebx +
call sub_1027EDB  +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 13h +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CFEF  +
push dword ptr [ebp-0D4h]  +
lea eax [ebp-24h] +
push ebx  +
push offset loc_1027ED1  +
push eax  +
lea ecx [ebx+5Ch] +
call sub_1018BA4  +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 14h +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
mov ecx [ebp-0B0h] +
lea eax [ebp-0C0h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-0C4h] edi +
lea ecx [ebp-0ACh] +
mov byte ptr [ebp-4] 1 +
call sub_100F341  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-0B0h] +
call sub_101D44D  +
retn 0Ch  +
***
call sub_100C4D0  +
mov edi [ebp+8] +
mov eax [ebp+10h] +
xor ebx ebx +
mov esi ecx +
push ebx  +
mov ecx edi +
mov [ebp-4] ebx +
mov [ebp-30h] esi +
mov [ebp-40h] edi +
mov [ebp-34h] eax +
mov [ebp-3Ch] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov [ebp-4] ebx +
inc ebx  +
push offset aCactionspanevi  +
mov ecx edi +
mov [ebp-3Ch] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
add esi 0D0h +
push 2  +
mov ecx esi +
call sub_10188F8  +
push 3  +
mov ecx esi +
call sub_10188F8  +
mov eax [ebp-30h] +
mov eax [eax+8Ch] +
test eax eax +
jz loc_105D955  +
mov eax [eax+0D8h] +
push 8000FFFFh  +
push eax  +
mov [ebp-38h] eax +
lea eax [ebp-50h] +
push eax  +
call sub_100A3AE  +
push eax  +
mov ecx edi +
mov [ebp-4] ebx +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
mov ecx edi +
call esi  +
test eax eax +
jl loc_105D986  +
push 0  +
lea ecx [ebp-2Ch] +
mov dword ptr [ebp-14h] 7 +
call sub_100CD14  +
mov eax [ebp-38h] +
mov ecx [eax] +
lea edx [ebp-2Ch] +
push edx  +
push dword ptr [ebp-34h]  +
mov dword ptr [ebp-4] 2 +
push eax  +
call dword ptr [ecx+14h]  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jb loc_105D9BA  +
mov ecx [ebp-30h] +
push eax  +
push ebx  +
add ecx 0D0h +
call sub_1026BFF  +
push eax  +
mov ecx edi +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx edi +
call esi  +
test eax eax +
jl loc_105D9C2  +
mov eax [ebp-38h] +
mov eax [eax] +
mov [ebp-34h] eax +
mov eax [ebp-30h] +
mov eax [eax+8Ch] +
lea ecx [eax+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov ecx [ebp-38h] +
push eax  +
mov eax [ebp-34h] +
call dword ptr [eax+58h]  +
test eax eax +
jnz loc_10260EA  +
mov ecx [ebp-30h] +
push ebx  +
push ebx  +
lea eax [ebp-50h] +
push eax  +
call sub_1054DE9  +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx edi +
call esi  +
test eax eax +
jl loc_105D9E8  +
push 0  +
push ebx  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call sub_100CD3C  +
mov ecx [ebp-30h] +
call sub_100CBA3  +
push eax  +
mov ecx edi +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105DA1C  +
mov eax edi +
call sub_100C50D  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10261AE  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1064BBC  +
cmp dword ptr [esi+9Ch] 1 +
jz loc_10262AA  +
mov eax [esi+0A4h] +
push ebx  +
lea ecx [eax+44h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+70h]  +
push dword ptr [esi+20h]  +
mov [ebp+var_4] eax +
call ds:UpdateWindow  +
mov edi [ebp+arg_0] +
push dword ptr [edi+5Ch]  +
mov ecx esi +
push dword ptr [edi+3Ch]  +
call sub_10262BF  +
mov ebx eax +
test ebx ebx +
jnz loc_10262AF  +
mov eax [esi+0A4h] +
mov ebx [eax+32Ch] +
test ebx ebx +
jz loc_1026249  +
mov ecx esi +
call sub_100C5D1  +
cmp eax [edi+3Ch] +
mov ecx ebx +
setnz al  +
movzx eax al +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call sub_102829B  +
lea ecx [ebp+var_14] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [esi+0A4h] +
call sub_100C52C  +
movzx eax al +
push eax  +
lea eax [ebp+var_24] +
push eax  +
mov ecx ebx +
call sub_1028275  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
mov edx [ebp+var_4] +
cmp edx 0FFFFFFFFh +
jz loc_102628D  +
test edx edx +
jnz loc_1064BEA  +
mov ecx esi +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
mov edi eax +
test edi edi +
jz loc_102627B  +
mov ecx edi +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
cmp eax esi +
jnz loc_1064C39  +
call ds:GetFocus  +
cmp eax [esi+20h] +
jz loc_102628D  +
mov ecx esi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
mov esi [esi+0A4h] +
lea ecx [esi+44h] +
mov eax [ecx] +
lea edx [ebp+var_24] +
push edx  +
call dword ptr [eax+4Ch]  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
cmp ebx 1 +
jnz loc_1064BD3  +
jmp loc_10262A8  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamctreeview_0  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+8] ebx +
jz loc_1064B4A  +
cmp [ebp+0Ch] ebx +
jz loc_1064B70  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_10249C3  +
mov ecx [esi+0A4h] +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
mov [ebp-10h] ebx +
call sub_1025AE8  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1056D34  +
mov eax [esi+0A4h] +
xor ecx ecx +
cmp [eax+270h] ebx +
setz cl  +
mov eax ecx +
mov [esi+84h] eax +
cmp [ebp-10h] ebx +
jnz loc_1056CF0  +
cmp [esi+84h] ebx +
jnz loc_1056D1D  +
mov eax [esi+0A4h] +
mov eax [eax+0D8h] +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1056D34  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_100C799  +
mov [ebp+8] eax +
cmp eax ebx +
jz loc_10283C1  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
cmp eax ebx +
jz loc_10263EF  +
mov ecx [ebp-14h] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+0A0h]  +
push 1  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1023DC6  +
jmp loc_10263C9  +
***
push 24h  +
mov eax offset dword_10E4058 +
call sub_1001F95  +
mov esi ecx +
mov eax [ebp+0Ch] +
xor ebx ebx +
mov [ebp-10h] ebx +
mov [eax] ebx +
mov ecx [esi+104h] +
cmp ecx ebx +
jnz loc_1064CC2  +
mov edi [ebp+8] +
cmp dword ptr [edi+0Ch] 2 +
mov ecx esi +
setz al  +
movzx eax al +
push eax  +
call sub_1041FCA  +
mov ecx [esi+104h] +
cmp ecx ebx +
jnz loc_1064CD9  +
xor bl bl +
or dword ptr [ebp-4] 0FFFFFFFFh +
test byte ptr [ebp-10h] 1 +
jnz loc_1064D04  +
test bl bl +
jnz loc_10264A3  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push edi  +
call sub_102618D  +
call sub_1001FCF  +
retn 8  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_105A6A2  +
xor eax eax +
retn   +
***
mov eax [ecx+0Ch] +
cmp eax [ebx] +
jb loc_105C42C  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
jmp loc_1024D0C  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-24h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScappl  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+0Ch] +
mov al [esi+1DFh] +
mov byte ptr [esi+1DFh] 0 +
cmp ecx edi +
jnz loc_105C8C6  +
test al al +
jnz loc_105C99F  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+64h] +
lea ecx [esi+5Ch] +
call sub_1018813  +
or dword ptr [esi+68h] 0FFFFFFFFh +
push 1  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
mov ecx esi +
call sub_1020F67  +
cmp edi 1 +
jge loc_105F85A  +
cmp byte ptr [esi+81h] 0 +
jnz loc_105F87A  +
pop edi  +
pop esi  +
leave   +
retn   +
***
cmp dword ptr [ecx+0Ch] 0 +
jnz loc_10265FB  +
mov eax [ecx] +
mov edx [eax] +
mov eax [ecx+8] +
mov eax [eax] +
cmp eax edx +
jnz loc_1026604  +
xor eax eax +
retn   +
mov eax [ecx] +
cmp eax [ecx+8] +
jnz loc_10265EB  +
jmp loc_10265F8  +
cmp dword ptr [eax+28h] 1 +
jnz loc_10265F2  +
jmp loc_105F931  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi ecx +
mov ecx [edi+8] +
mov eax [edi] +
cmp eax ecx +
jnz loc_105F96C  +
pop edi  +
leave   +
retn   +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
mov [ebp-4] edi +
cmp [esi+14h] ebx +
jz loc_10628E3  +
cmp byte ptr [ebp+0Ch] 0 +
mov ecx [esi+14h] +
mov eax [ecx] +
push 2  +
pop ebx  +
push esi  +
jz loc_1062903  +
lea edx [ebp-40h] +
push edx  +
call dword ptr [eax+18h]  +
mov [ebp-4] bl +
mov [ebp-10h] ebx +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
test byte ptr [ebp-10h] 4 +
mov [ebp-4] ebx +
jnz loc_106291D  +
mov [ebp-4] edi +
test [ebp-10h] bl +
jz loc_10266AA  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-40h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-10h] edi +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_1026721  +
mov esi [esi+4] +
mov [ebp+var_4] eax +
cmp eax esi +
jnz loc_105B5FD  +
mov [ebp+arg_4] esi +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push esi  +
mov esi [eax+4] +
push edi  +
mov edi eax +
cmp byte ptr [esi+39h] 0 +
jz loc_105ADD7  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
and dword ptr [ebp-48h] 0 +
mov [ebp-30h] eax +
mov eax [ebp+0Ch] +
mov [ebp-44h] eax +
mov eax [ebp+10h] +
mov esi ecx +
push 0  +
lea ecx [ebp-40h] +
mov [ebp-4Ch] eax +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScaddf  +
lea ecx [ebp-40h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi 8000FFFFh +
push edi  +
push dword ptr [esi+18Ch]  +
lea eax [ebp-20h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-40h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CAC6  +
lea ecx [esi+330h] +
call sub_101888C  +
mov ecx [esi+18Ch] +
call sub_1026597  +
mov ebx [esi+0D8h] +
push edi  +
push dword ptr [esi+18Ch]  +
lea eax [ebp-20h] +
push ebx  +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-40h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CADB  +
and dword ptr [ebp-58h] 0 +
and dword ptr [ebp-54h] 0 +
and dword ptr [ebp-50h] 0 +
mov edx [ebx] +
xor ecx ecx +
push ecx  +
lea eax [ebp-5Ch] +
push eax  +
push dword ptr [ebp-44h]  +
mov byte ptr [ebp-4] 4 +
push ebx  +
call dword ptr [edx+0E4h]  +
push eax  +
lea ecx [ebp-40h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-40h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CAF4  +
lea ecx [ebp-5Ch] +
call sub_10264B0  +
test eax eax +
jnz loc_105CB0A  +
mov eax [esi+18Ch] +
mov byte ptr [eax+80h] 0 +
push dword ptr [ebp-4Ch]  +
lea eax [ebp-44h] +
push eax  +
lea ecx [esi+330h] +
call sub_10266EB  +
mov ecx [esi+334h] +
mov eax [ebp-44h] +
cmp eax ecx +
jnz loc_105CC31  +
xor eax eax +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
call sub_10264DA  +
push eax  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 9 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-40h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CC47  +
mov ecx esi +
call sub_100DA2C  +
mov ecx [ebp-30h] +
lea eax [ebp-40h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-5Ch] +
mov dword ptr [ebp-48h] 1 +
call sub_1026951  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-30h] +
call sub_100C50D  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jnz loc_105C4C8  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
call sub_100A60E  +
push 0  +
push 1  +
call sub_1023086  +
and dword ptr [ebp-4] 0 +
mov esi eax +
mov [ebp-14h] esi +
test esi esi +
jz loc_102699B  +
mov eax [ebp+8] +
mov [esi] eax +
lea eax [esi+4] +
test eax eax +
jz loc_10269A7  +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
push dword ptr [ebp+10h]  +
lea eax [esi+8] +
push eax  +
call sub_10269C2  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10269E7  +
push dword ptr [ebp+0Ch]  +
call sub_10269F4  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx ecx +
mov ecx [eax] +
push esi  +
mov [ebx] ecx +
mov ecx [eax+4] +
push edi  +
mov [ebx+4] ecx +
lea esi [eax+8] +
lea edi [ebx+8] +
movs   +
movs   +
movs   +
add eax 18h +
push eax  +
lea ecx [ebx+18h] +
movs   +
call sub_1020AEF  +
mov eax [ebp+arg_0] +
mov ecx [eax+90h] +
mov [ebx+90h] ecx +
mov eax [eax+94h] +
pop edi  +
mov [ebx+94h] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov eax [ebx+0Ch] +
test eax eax +
jnz loc_105FC0D  +
mov byte ptr [ebp-142h] 0 +
test eax eax +
jnz loc_105FC24  +
mov byte ptr [ebp-143h] 0 +
mov ecx ebx +
call sub_10265E5  +
cmp byte ptr [ebp-142h] 0 +
mov [ebp-16Ch] eax +
mov byte ptr [ebp-141h] 0 +
jnz loc_1020F21  +
cmp dword ptr [ebp-160h] 0 +
jnz loc_105FC3D  +
mov ecx ebx +
call sub_1026614  +
lea ecx [ebp-128h] +
call sub_10230CC  +
push 98h  +
lea eax [ebp-140h] +
push 0  +
push eax  +
mov byte ptr [ebp-4] 3 +
call memset  +
add esp 0Ch +
lea ecx [ebx+4] +
mov eax [ecx+4] +
lea edx [ebp-140h] +
push edx  +
push eax  +
call sub_1026B93  +
mov eax [ebx+8] +
mov ecx [ebp+10h] +
mov esi [ebp-164h] +
mov [ebx] eax +
mov eax [eax+4] +
mov [ebx] eax +
mov [eax+8] ecx +
mov edi [ebx] +
mov ecx [ebp-170h] +
add edi 10h +
movs   +
movs   +
movs   +
movs   +
mov eax [ebx] +
mov esi [ebp-168h] +
mov [eax+0Ch] ecx +
mov ecx [ebx] +
push esi  +
add ecx 20h +
call sub_1020B84  +
cmp dword ptr [ebp-160h] 0 +
jnz loc_105FC56  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1026B31  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105FC77  +
cmp dword ptr [ebp-160h] 0 +
mov byte ptr [ebx+21h] 0 +
jnz loc_105FCBC  +
cmp byte ptr [ebp-141h] 0 +
jnz loc_105FD54  +
mov ecx ebx +
call sub_101883B  +
mov ecx ebx +
call sub_1018077  +
mov ecx [ebp-148h] +
lea eax [ebp-15Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-128h] +
mov dword ptr [ebp-14Ch] 1 +
mov byte ptr [ebp-4] 1 +
call sub_100F341  +
jmp loc_1020F03  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea edi [eax+4] +
push dword ptr [edi]  +
mov ebx ecx +
push eax  +
call sub_1026974  +
push 1  +
mov ecx ebx +
mov esi eax +
call sub_1026BCC  +
mov [edi] esi +
mov eax [esi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov eax [ecx+8] +
mov edx [ebp+8] +
mov esi 1AF286Bh +
sub esi eax +
cmp esi edx +
jb loc_105F941  +
add eax edx +
mov [ecx+8] eax +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionpaneCre  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_1068BAD  +
push dword ptr [ebp+8]  +
mov ecx [ebp-10h] +
call sub_1016801  +
mov edi eax +
test edi edi +
jz loc_1068BE1  +
mov ecx edi +
call sub_10266E2  +
mov ecx edi +
test al al +
jz loc_1068C22  +
call sub_101899D  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1026CFB  +
lea ecx [ebp-20h] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 20h +
pop ebp  +
jmp ??4CString@@QAEABV0@PBG@Z  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewOninit  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx esi +
call ?OnInitialUpdate@CView@@UAEXXZ  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call sub_1026DC9  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-30h] +
mov [ebp-14h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewSccomp  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+40h] +
cmp eax edi +
jz loc_1026E07  +
mov edi [eax+0E0h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CA34  +
mov eax [edi] +
add eax 10h +
lea ecx [esi+0D4h] +
mov [ebp-20h] eax +
call sub_100A5E6  +
push eax  +
mov eax [ebp-20h] +
push edi  +
call dword ptr [eax]  +
mov eax [edi] +
add eax 14h +
lea ecx [esi+0D8h] +
mov [ebp-20h] eax +
call sub_100A5E6  +
push eax  +
mov eax [ebp-20h] +
push edi  +
call dword ptr [eax]  +
mov eax [esi+0D8h] +
lea ecx [esi+24Ch] +
push eax  +
call sub_1010F11  +
mov eax [esi+24Ch] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1027191  +
mov eax [esi+40h] +
push 8000FFFFh  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1027191  +
lea ecx [esi+0D0h] +
cmp dword ptr [ecx] 0 +
jnz loc_1026F38  +
mov eax [ebp-18h] +
mov eax [eax+0ECh] +
mov edx [edi] +
push ecx  +
push eax  +
push edi  +
call dword ptr [edx+28h]  +
test eax eax +
jl loc_105CA46  +
cmp dword ptr [esi+0D0h] 0 +
jz loc_105CA46  +
mov ecx [esi+328h] +
push esi  +
lea eax [ebp-40h] +
push eax  +
call sub_104356D  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1027191  +
lea ecx [esi+0D4h] +
call sub_100A5CF  +
push dword ptr [esi+0D0h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
lea eax [esi+238h] +
mov cl [eax] +
mov eax [eax] +
shr eax 5 +
not al  +
and al bl +
not cl  +
mov [ebp-0Dh] al +
mov eax [ebp-18h] +
mov eax [eax+0F0h] +
and cl bl +
mov [ebp-20h] cl +
mov ecx esi +
mov [esi+228h] eax +
mov [esi+0CCh] eax +
call sub_102B3E0  +
and dword ptr [ebp-1Ch] 0 +
mov ecx [edi] +
lea edx [ebp-1Ch] +
push edx  +
push ebx  +
lea eax [esi+1F8h] +
push eax  +
push dword ptr [esi+0D0h]  +
push edi  +
call dword ptr [ecx+18h]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1027191  +
push 8000FFFFh  +
push dword ptr [ebp-1Ch]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 6 +
call edi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1027191  +
mov ecx [esi+174h] +
push 0FFFF0002h  +
push dword ptr [ebp-1Ch]  +
push 0FFFF0000h  +
call sub_10273A1  +
mov ecx [esi+174h] +
push 2  +
push eax  +
mov [esi+1D8h] eax +
call sub_100E959  +
push ebx  +
push dword ptr [ebp-20h]  +
lea eax [ebp-40h] +
push eax  +
mov ecx esi +
call sub_10254E2  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 7 +
call edi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1027191  +
cmp [ebp-0Dh] al +
jz loc_10271B9  +
mov eax [esi+1F8h] +
shr eax 7 +
and al bl +
mov [ebp-20h] al +
push ebx  +
push ebx  +
push dword ptr [ebp-20h]  +
lea eax [ebp-40h] +
push eax  +
mov ecx esi +
call sub_102502E  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 8 +
call edi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1027191  +
push ebx  +
mov ecx esi +
call sub_1024C0D  +
mov ecx [esi+174h] +
add ecx 88h +
mov edi eax +
call sub_100A5CF  +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+50h]  +
xor edi edi +
push edi  +
push ebx  +
mov ecx esi +
call sub_102583F  +
mov ecx [esi+310h] +
call sub_1025A65  +
mov ecx esi +
call sub_1043509  +
mov ecx [esi+174h] +
call sub_100C5D1  +
mov ecx [esi+174h] +
push eax  +
call sub_1027213  +
mov eax [ebp-18h] +
cmp [eax+0BCh] edi +
jz loc_1027183  +
mov ecx esi +
call sub_101D08C  +
mov [ebp-20h] eax +
cmp eax edi +
jz loc_105CA59  +
mov ecx [ebp-18h] +
push ebx  +
push edi  +
push edi  +
push ebx  +
call sub_1021952  +
mov ecx [ebp-20h] +
push eax  +
call sub_100ED64  +
mov ecx [ebp-18h] +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1021952  +
mov ecx [ebp-20h] +
push eax  +
call sub_100ED64  +
mov byte ptr [esi+1D5h] 0 +
mov byte ptr [esi+264h] 0 +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
mov byte ptr [ebp-20h] 0 +
jmp loc_10270AF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 9  +
push 110Bh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+arg_0] +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 1132h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov eax offset byte_10E40C5 +
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtreeviewmap_1  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
mov esi 80070057h +
push esi  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1064D80  +
cmp dword ptr [ebp+10h] 0 +
jz loc_102735D  +
cmp dword ptr [ebp+14h] 0 +
jz loc_102735D  +
push 0Ch  +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_1064D92  +
mov eax [edi+2Ch] +
mov ecx [ebp+14h] +
lea edi [esi+8] +
mov [edi] eax +
mov eax [ebp+10h] +
mov [esi] eax +
lea eax [esi+4] +
mov [eax] ecx +
mov ecx [ebp-14h] +
push eax  +
add ecx 1Ch +
call sub_1022BC7  +
mov ecx [ebp-14h] +
push edi  +
add ecx 10h +
mov [eax] esi +
call sub_1022BC7  +
mov [eax] esi +
lea eax [ebp-24h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
push esi  +
jmp loc_1064D97  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamctreeviewIn  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 44h  +
lea eax [ebp-74h] +
push esi  +
push eax  +
call memset  +
mov eax [ebp+8] +
mov ebx [ebp+0Ch] +
or dword ptr [ebp-5Ch] 0FFFFFFFFh +
add esp 0Ch +
mov [ebp-74h] eax +
mov eax [ebp+10h] +
lea ecx [ebp-50h] +
push ecx  +
mov [ebp-70h] eax +
mov eax [edi+0A4h] +
lea ecx [ebp-54h] +
push ecx  +
mov dword ptr [ebp-6Ch] 67h +
mov [ebp-48h] ebx +
mov esi [eax+0D8h] +
or dword ptr [ebp-4Ch] 0FFFFFFFFh +
mov eax [esi] +
push ebx  +
push esi  +
call dword ptr [eax+10h]  +
lea eax [ebp-6Ch] +
push eax  +
push ebx  +
mov ecx edi +
call sub_1024168  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
lea eax [ebp-74h] +
push eax  +
mov ecx edi +
call sub_1027255  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-10h] +
push ecx  +
push ebx  +
mov [ebp+10h] eax +
mov eax [esi] +
push esi  +
call dword ptr [eax+7Ch]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10649AE  +
push dword ptr [ebp-10h]  +
lea eax [ebp-74h] +
push dword ptr [ebp+10h]  +
lea ecx [edi+4Ch] +
push eax  +
push offset loc_100E83D  +
lea eax [ebp-30h] +
push eax  +
call sub_102751F  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10649BC  +
cmp dword ptr [ebp+8] 0FFFF0000h +
jz loc_10274D0  +
cmp dword ptr [ebp+10h] 0 +
jz loc_10274D0  +
push 1  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_1022D22  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+10h] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov ebx ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCeventsource_1  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-14h] ebx +
test ebx ebx +
jz loc_102755B  +
inc dword ptr [ebx+10h]  +
mov eax [ebx+8] +
mov esi [eax] +
mov byte ptr [ebp-4] 2 +
cmp esi eax +
jz loc_10275EF  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
cmp byte ptr [esi+0Ch] 0 +
jnz loc_10275E8  +
push 8000FFFFh  +
push dword ptr [esi+8]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1064979  +
push dword ptr [ebp+18h]  +
mov ecx [esi+8] +
push dword ptr [ebp+14h]  +
lea eax [ebp-44h] +
push dword ptr [ebp+10h]  +
push eax  +
call dword ptr [ebp+0Ch]  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10275EF  +
mov esi [esi] +
cmp esi [ebx+8] +
jnz loc_1027572  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-14h] +
mov dword ptr [ebp-10h] 1 +
call sub_100E76D  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
call sub_1001F95  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_102764C  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105AFBE  +
mov ebx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
push ebx  +
mov ecx esi +
call sub_1023EDA  +
cmp eax 2 +
jnz loc_10276C2  +
xor edi edi +
cmp [ebp-10h] edi +
jz loc_10276C2  +
push dword ptr [ebp-10h]  +
mov ecx [esi+174h] +
call sub_100C799  +
push dword ptr [ebp-10h]  +
mov ecx [esi+174h] +
neg eax  +
sbb al al +
inc al  +
mov [ebp+0Bh] al +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
lea ecx [esi+0D8h] +
mov [ebp-30h] eax +
call sub_100A5CF  +
mov ecx [eax] +
push edi  +
push edi  +
push 9009h  +
push dword ptr [ebp-30h]  +
push eax  +
call dword ptr [ecx+78h]  +
cmp eax 1 +
jnz loc_1046744  +
mov ecx [esi+174h] +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1022D22  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx ecx +
push esi  +
mov [ebp-4] ebx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10276F2  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1064B33  +
mov esi [ebp+8] +
and dword ptr [ebp+8] 0 +
cmp dword ptr [esi+0Ch] 2 +
push edi  +
jnz loc_1027739  +
mov edi ds:LoadCursorW +
push 7F02h  +
push 0  +
call edi  +
mov ebx ds:SetCursor +
push eax  +
call ebx  +
push dword ptr [esi+3Ch]  +
mov ecx [ebp-4] +
call sub_10249C3  +
push 7F00h  +
push 0  +
mov dword ptr [ebp+8] 1 +
call edi  +
push eax  +
call ebx  +
mov ebx [ebp-4] +
mov eax [ebx+0A4h] +
push dword ptr [esi+3Ch]  +
mov edi [eax+0D8h] +
mov ecx ebx +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx [edi] +
push 0  +
push dword ptr [ebp+8]  +
push 902Ch  +
push eax  +
push edi  +
call dword ptr [ecx+78h]  +
push dword ptr [esi+3Ch]  +
mov ecx ebx +
call sub_100C799  +
pop edi  +
test eax eax +
jz loc_1049C74  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
and dword ptr [ebp-4] 0 +
mov [edi+0A0h] eax +
mov ecx [esi] +
push 0  +
push eax  +
push ebx  +
push dword ptr [ebp-2Ch]  +
push esi  +
call dword ptr [ecx+78h]  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_102785D  +
cmp dword ptr [ebp-1Ch] 0 +
jl loc_1024A6B  +
mov eax [edi+0A4h] +
mov ebx [eax+0D4h] +
mov eax [ebx] +
push dword ptr [ebp-34h]  +
push ebx  +
call dword ptr [eax+0Ch]  +
mov [ebp-1Ch] eax +
mov eax [ebx] +
lea ecx [ebp-20h] +
push ecx  +
push ebx  +
call dword ptr [eax+1Ch]  +
test eax eax +
jnz loc_1027841  +
cmp [ebp-20h] eax +
jz loc_1027841  +
mov eax [ebx] +
push dword ptr [ebp-20h]  +
push ebx  +
call dword ptr [eax+0Ch]  +
test eax eax +
jnz loc_1027841  +
mov eax [ebp-20h] +
mov [ebp-28h] eax +
mov eax [ebp-24h] +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
push 0  +
mov edx [edi+0A4h] +
add edx 1F8h +
push edx  +
push dword ptr [ebp-28h]  +
push eax  +
call dword ptr [ecx+18h]  +
push 0FFFF0001h  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_10273A1  +
mov eax [esi] +
push dword ptr [ebp-30h]  +
push esi  +
call dword ptr [eax+0A0h]  +
mov eax [ebx] +
lea ecx [ebp-28h] +
push ecx  +
push ebx  +
call dword ptr [eax+14h]  +
mov [ebp-1Ch] eax +
test eax eax +
jl loc_1027865  +
cmp dword ptr [ebp-28h] 0 +
jnz loc_10277ED  +
mov eax [esi] +
push 0  +
push 0  +
push 900Ah  +
push dword ptr [ebp-2Ch]  +
push esi  +
call dword ptr [eax+78h]  +
jmp loc_1024A6B  +
***
and dword ptr [edi+0A0h] 0 +
retn   +
***
xor eax eax +
jmp loc_1024A73  +
***
push 20h  +
mov eax offset byte_10E3BA7 +
call sub_1001F95  +
mov edi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamctreeview_4  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
push 80070057h  +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10278E0  +
cmp dword ptr [esi+0Ch] 1 +
jz loc_106455C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
and dword ptr [ebp-30h] 0 +
mov [ebp-2Ch] ecx +
mov [ebp-28h] eax +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-38h] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push 0  +
lea ecx [ebp-48h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmctoolbarSch  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-2Ch] +
call sub_1015C07  +
lea ecx [ebp-24h] +
push ecx  +
mov ecx [ebp-2Ch] +
push eax  +
call sub_100940C  +
neg eax  +
sbb eax eax +
mov edi 7FFFBFFBh +
and eax edi +
mov esi 80004005h +
add eax esi +
push eax  +
lea ecx [ebp-48h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-48h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1063EB6  +
test [ebp-1Bh] bl +
jnz sub_1028FB3  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-2Ch] +
push dword ptr [ebp+0Ch]  +
call sub_1015ADE  +
neg eax  +
sbb eax eax +
and eax edi +
add eax esi +
push eax  +
lea ecx [ebp-48h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-48h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1027A13  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-2Ch] +
push dword ptr [ebp+0Ch]  +
call sub_1015B5F  +
mov ecx [ebp-2Ch] +
push ebx  +
call sub_1027A7D  +
lea eax [ebp-48h] +
mov ecx [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-48h] +
mov [ebp-30h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-34h] +
mov ecx [ebp-38h] +
mov [eax+4] ecx +
mov eax [ebp-28h] +
call sub_100C50D  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_1063E21  +
mov eax dword_10F537C +
push 0  +
push eax  +
push eax  +
push dword ptr [esi+20h]  +
lea eax [ebp+Msg] +
push eax  +
call ds:PeekMessageW  +
test eax eax +
jz loc_102A234  +
pop esi  +
leave   +
retn 4  +
***
test [ebp+var_23] 1 +
jz loc_1015BF1  +
push 1  +
push [ebp+var_28]  +
jmp loc_1015C33  +
test [ebp+var_F] 1 +
jz loc_1015BE8  +
jmp loc_1015C2E  +
***
test [edi+16h] bl +
jz loc_10156A8  +
movzx eax byte ptr [ebp+10h] +
mov ecx [edi+4] +
xor edi edi +
dec eax  +
mov [ebp+0Ch] ecx +
jz loc_1029DF9  +
dec eax  +
jz loc_1063F56  +
dec eax  +
dec eax  +
jz loc_1029110  +
sub eax 4 +
jnz loc_1063F36  +
push ecx  +
mov ecx [esi+6Ch] +
call sub_1015C07  +
cmp eax 0FFFFFFFFh +
jz loc_1027B3C  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+6Ch] +
call sub_1027B60  +
neg eax  +
sbb eax eax +
xor ecx ecx +
inc eax  +
cmp [ebp+14h] ecx +
setz cl  +
cmp eax ecx +
jnz loc_104EF53  +
mov edi ebx +
neg edi  +
sbb edi edi +
and edi 7FFFBFFBh +
add edi 80004005h +
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10156A8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 40Ch  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
call sub_1027BB3  +
push [ebp+arg_4]  +
mov ecx edi +
mov esi eax +
call sub_1023313  +
mov ecx [ebp+arg_0] +
pop edi  +
mov [ecx] eax +
mov [ecx+4] esi +
mov eax ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+11h] 0 +
jz loc_104F123  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push [ebp+arg_0]  +
lea eax [ebp+var_8] +
push eax  +
mov esi ecx +
call sub_1027B81  +
and [ebp+arg_0] 0 +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call sub_1027C1B  +
add esp 0Ch +
push [ebp+var_4]  +
lea eax [ebp+var_4] +
push [ebp+var_8]  +
mov ecx esi +
push eax  +
call sub_101596B  +
mov eax [ebp+arg_0] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1027C3C  +
add esp 10h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnz loc_104F3C7  +
pop ebp  +
retn   +
***
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp [ecx+0Ch] edx +
jb loc_1063E75  +
mov eax ecx +
mov ecx [ecx] +
cmp byte ptr [ecx+11h] 0 +
jnz loc_1023328  +
jmp loc_1027C54  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1027C8D  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1064438  +
mov ecx esi +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
test eax eax +
jz loc_1027CA2  +
push 1  +
push esi  +
mov ecx eax +
call ?SetActiveView@CFrameWnd@@QAEXPAVCView@@H@Z  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
retn 4  +
***
sub ecx eax +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb loc_1027D01  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp loc_1027CF3  +
***
push 50h  +
mov eax offset word_10D289A +
call sub_1001F95  +
mov ebx ecx +
mov [ebp-1Ch] ebx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-3Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCamcappSconvie  +
lea ecx [ebp-3Ch] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058510  +
mov eax [ebx+24h] +
push 4  +
pop ebx  +
test eax eax +
jnz loc_1058525  +
push edi  +
lea ecx [ebp-5Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov byte ptr [ebp-4] 3 +
mov dword ptr [ebp-10h] 2 +
push eax  +
lea ecx [ebp-3Ch] +
call esi  +
test byte ptr [ebp-10h] 8 +
mov [ebp-4] ebx +
jnz loc_1058552  +
mov dword ptr [ebp-4] 3 +
test [ebp-10h] bl +
jnz loc_1058564  +
test byte ptr [ebp-10h] 2 +
mov [ebp-4] edi +
jz loc_1027DDE  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-5Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1027E1A  +
push edi  +
lea ecx [ebp-5Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 6 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-5Ch] +
mov bl al +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jz loc_105857E  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-10h] edi +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
push 8  +
mov eax offset dword_10DEC9C +
call sub_1001F95  +
mov edi ecx +
xor esi esi +
mov [ebp-10h] esi +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
push esi  +
push esi  +
push dword_10F5318  +
mov [ebp-4] esi +
push dword ptr [edi-24h]  +
call ds:PostMessageW  +
mov ecx [ebp+8] +
push esi  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov eax [ecx] +
jmp dword ptr [eax+20h]  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScupda  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx esi +
call sub_101D08C  +
mov edi 8007054Fh +
push edi  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A76A  +
mov ecx [ebp-14h] +
call ?GetMDIFrame@CMDIChildWnd@@QAEPAVCMDIFrameWnd@@XZ  +
push edi  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1027FDF  +
mov ecx [ebp-14h] +
push 0E900h  +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
push edi  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1027FDF  +
mov eax [ebp-14h] +
push 0  +
push 0  +
push 234h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push 18h  +
mov eax offset dword_10D5048 +
call sub_1001F95  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
mov ecx [ebp+8] +
push edi  +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScon_0  +
mov [ebp-4] edi +
mov [ebp-10h] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+184h] +
shr eax 7 +
push edi  +
and al bl +
mov [ebp-14h] al +
push ebx  +
push dword ptr [ebp-14h]  +
lea eax [ebp-24h] +
push eax  +
lea ecx [esi-74h] +
call sub_102502E  +
mov ecx [ebp+8] +
push eax  +
mov [ebp-4] ebx +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+nPos]  +
push dword ptr [ecx+4]  +
call ds:GetMenuItemID  +
pop ebp  +
retn 4  +
***
mov ebx 5407h +
jmp loc_10100F6  +
mov ebx 5406h +
jmp loc_10100F6  +
mov ebx 5405h +
jmp loc_10100F6  +
or byte ptr [ebp-18h] 8 +
jmp loc_1010106  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push 0  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmenubuttons_1  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+4] +
test eax eax +
jz loc_1060E15  +
cmp byte ptr [eax+234h] 0 +
jz loc_1060E15  +
mov eax [eax+228h] +
test eax eax +
jz loc_1028203  +
add eax 1F8h +
mov [ebp-14h] eax +
jz loc_1028203  +
mov eax [esi+8] +
test eax eax +
jz loc_1028203  +
mov eax [eax+0D8h] +
mov [esi+28h] eax +
test eax eax +
jz loc_1060DA8  +
mov eax [esi+10h] +
cmp eax [esi+14h] +
jnz loc_1060DAF  +
lea eax [ebp-2Ch] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
push 8000FFFFh  +
jmp loc_1060D9A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+var_4] 0 +
push 3456h  +
push [ebp+arg_0]  +
call sub_1025339  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+var_4] 0 +
push 344Ah  +
push [ebp+arg_0]  +
call sub_1025339  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
test [esi+16h] bl +
jnz loc_1024B24  +
push dword ptr [esi+18h]  +
call sub_102A382  +
test al al +
jz loc_1024B24  +
mov eax [ebp-40h] +
mov eax [eax+6Ch] +
push 8000FFFFh  +
push eax  +
mov [ebp-44h] eax +
lea eax [ebp-54h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-54h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1024B24  +
xor eax eax +
push dword ptr [esi+18h]  +
mov ecx [ebp-40h] +
lea edi [ebp-24h] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov eax [esi+4] +
mov [ebp-20h] eax +
mov al [esi+15h] +
mov [ebp-1Bh] al +
mov eax [esi+8] +
mov [ebp-24h] eax +
mov al [esi+14h] +
mov [ebp-1Ch] al +
call near ptr byte_1023358+1  +
test al al +
jnz loc_1063F79  +
mov ecx [ebp-44h] +
lea eax [ebp-24h] +
push eax  +
push 0FFFFFFFFh  +
call sub_100FAA4  +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
push eax  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1024B24  +
or [esi+16h] bl +
test byte ptr [ebp-1Ch] 8 +
jnz loc_102A3AC  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_1024B24  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+arg_0] +
add ecx 58h +
cmp [ebp+arg_4] 0 +
push eax  +
jnz loc_106411D  +
call sub_1027BD1  +
leave   +
retn 8  +
***
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push offset loc_1018B9A  +
push eax  +
lea ecx [esi+4Ch] +
call sub_100FB75  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax ebx +
call sub_1001FCF  +
retn 8  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov al 1 +
jmp loc_1028557  +
xor bl bl +
jmp loc_1028548  +
***
call sub_1001F95  +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCmenubarIsstan  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+8] +
cmp eax 33B9h +
jz loc_102840D  +
cmp eax 33B8h +
jz loc_1028479  +
cmp eax 33B6h +
jz loc_1028479  +
cmp eax 33B7h +
jnz loc_106081B  +
call sub_100ABA9  +
mov ebx eax +
mov edi 8000FFFFh +
push edi  +
push ebx  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1028421  +
mov ecx ebx +
call sub_10207B9  +
mov ebx eax +
push edi  +
push ebx  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1028421  +
push edi  +
add ebx 1F8h +
push ebx  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1028421  +
test byte ptr [ebx+64h] 1 +
jz loc_1028421  +
cmp dword ptr [ebp+8] 33B8h +
jz loc_10285A0  +
mov bl 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov al bl +
call sub_1001FCF  +
retn 4  +
cmp dword_10F55CC 0 +
setz al  +
test al al +
jnz loc_10285CD  +
mov ecx dword_10F5304 +
test ecx ecx +
jz loc_10285CD  +
mov ecx [ecx+0DCh] +
test ecx ecx +
jz loc_10285CD  +
call sub_10285D9  +
neg al  +
sbb al al +
inc al  +
mov bl al +
jmp loc_1028548  +
***
mov eax [ecx+20h] +
xor ecx ecx +
cmp [eax+0Ch] ecx +
setz cl  +
mov al cl +
retn   +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScup_0  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx edi +
call sub_101D08C  +
push 80070057h  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105B792  +
mov ecx [ebp-14h] +
test ecx ecx +
jz loc_1028673  +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+0E8h]  +
push edi  +
push offset loc_1028705  +
lea eax [ebp-34h] +
push eax  +
lea ecx [edi+5Ch] +
call sub_100FB75  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov eax [ecx] +
jmp dword ptr [eax+10h]  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 0  +
push dword ptr [esi+20h]  +
push 225h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
pop esi  +
retn   +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcappScproce  +
lea ecx [ebp-30h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 2 +
cmp [edi+11Ch] ebx +
jz sub_1057F14  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call sub_1021315  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcappSconn_0  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10588A5  +
mov eax [edi+0E8h] +
push 4  +
pop ebx  +
test eax eax +
jnz loc_10588BA  +
push 1  +
lea ecx [ebp-54h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov byte ptr [ebp-4] 3 +
mov dword ptr [ebp-10h] 2 +
push eax  +
lea ecx [ebp-34h] +
call esi  +
test byte ptr [ebp-10h] 8 +
mov [ebp-4] ebx +
jnz loc_10588E7  +
mov dword ptr [ebp-4] 3 +
test [ebp-10h] bl +
jnz loc_10588F9  +
xor ebx ebx +
inc ebx  +
test byte ptr [ebp-10h] 2 +
mov [ebp-4] ebx +
jz loc_1028971  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-54h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058913  +
push ebx  +
lea ecx [ebp-54h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 6 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-54h] +
mov bl al +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jz loc_1058928  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or dword ptr [ebp-10h] 1 +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-18h] edi +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcappSconnew  +
lea ecx [ebp-34h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [edi+0E8h] +
push 3  +
pop edi  +
test eax eax +
jnz loc_1058BD1  +
push esi  +
lea ecx [ebp-54h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push 2  +
pop ebx  +
mov [ebp-4] bl +
mov [ebp-10h] esi +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
call esi  +
test byte ptr [ebp-10h] 4 +
mov [ebp-4] edi +
jnz loc_1058C01  +
mov [ebp-4] ebx +
test [ebp-10h] bl +
jnz loc_1058C13  +
xor edi edi +
inc edi  +
test byte ptr [ebp-10h] 1 +
mov [ebp-4] edi +
jz loc_1028AA1  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
lea ecx [ebp-54h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058C2D  +
push edi  +
lea ecx [ebp-54h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 5 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-54h] +
mov bl al +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jz loc_1058C3F  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or dword ptr [ebp-10h] 8 +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov eax lpDst +
mov esi offset lpDst +
mov edi offset dword_100C4B0 +
cmp eax esi +
jz loc_1028B6A  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105A405  +
mov ecx [ebp+arg_0] +
cmp ecx 3 +
ja loc_105A41D  +
shl ecx 4 +
lea eax [ecx+ebx] +
mov ecx [ebp+arg_4] +
mov [eax+194h] ecx +
mov ecx [ebp+arg_8] +
mov [eax+19Ch] ecx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 1F8h +
push 8  +
call sub_1023016  +
pop ebp  +
retn 4  +
***
push 24h  +
mov eax offset dword_10D558C +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScdocu  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A8F8  +
mov eax [ebp+0Ch] +
mov eax [eax+10Ch] +
shr eax 3 +
not al  +
test al bl +
jz loc_105A90A  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScup_1  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call sub_100ABA9  +
mov edi eax +
push 8000FFFFh  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A9CA  +
mov ecx edi +
call sub_10207B9  +
mov ecx [ebp-14h] +
cmp ecx eax +
jnz loc_105A9DC  +
mov al [ecx+25Ch] +
and al bl +
mov [ebp-14h] al +
push dword ptr [ebp-14h]  +
lea ecx [edi+0C4h] +
mov eax [ecx] +
lea edx [ebp-34h] +
push edx  +
call dword ptr [eax+14h]  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
lea eax [ebp-24h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and dword ptr [ebp-4] 0 +
push ebx  +
push esi  +
push 0  +
push offset off_10F9980  +
push offset off_10F9968  +
push 0  +
push dword ptr [ebp+0Ch]  +
mov ebx ecx +
call __RTDynamicCast  +
mov esi [eax+8] +
mov eax [esi] +
add esp 14h +
mov [ebp+0Ch] eax +
cmp eax esi +
jz loc_1028E30  +
add ebx 4 +
add eax 0Ch +
push eax  +
lea eax [ebp-8] +
push eax  +
mov ecx ebx +
call sub_1024C9C  +
lea ecx [ebp+0Ch] +
call sub_1015931  +
mov eax [ebp+0Ch] +
cmp eax esi +
jnz loc_1028E12  +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+8] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push edi  +
call sub_101BD02  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov edi ebx +
cmp ebx [esi+4] +
jnz loc_1028E64  +
pop ebx  +
jmp loc_10183E1  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
movzx eax byte ptr [esi+16Ah] +
push eax  +
push esi  +
call sub_1019744  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
push esi  +
mov esi [ecx+150h] +
push 64h  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
add esi 44h +
call memset  +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
push 1001h  +
mov ecx esi +
mov [ebp+lParam] 64h +
mov [ebp+var_60] 1 +
call sub_102134D  +
push eax  +
mov ecx esi +
call sub_100E055  +
mov eax [ebp+var_5C] +
shr eax 3 +
not eax  +
and eax 1 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_10F55CC +
push ebx  +
push esi  +
xor ebx ebx +
push ebx  +
mov [ebp+var_4] eax +
call ?MDIGetActive@CMDIFrameWnd@@QBEPAVCMDIChildWnd@@PAH@Z  +
mov esi eax +
cmp esi ebx +
jz loc_1028F78  +
push edi  +
push ebx  +
mov ecx esi +
call sub_102132D  +
mov edi eax +
cmp edi ebx +
jz loc_1028F68  +
cmp [ebp+var_4] ebx +
jz loc_1028F68  +
push ebx  +
push offset off_10F6DC0  +
push offset off_10F6C88  +
push ebx  +
push esi  +
call __RTDynamicCast  +
mov eax [eax+228h] +
add esp 14h +
cmp eax ebx +
jz loc_1028F68  +
cmp [eax+0DCh] bl +
jz loc_1028F68  +
push 1  +
push 0F060h  +
push dword ptr [edi+4]  +
call ds:EnableMenuItem  +
push 2  +
mov ecx esi +
call sub_100EB83  +
mov esi eax +
cmp esi ebx +
jnz loc_1028F1E  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push eax  +
push [ebp+wParam]  +
push 401h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1027A16  +
***
xor ecx ecx +
inc ecx  +
jmp loc_101941E  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_100C573  +
mov [ebp-44h] eax +
mov [ebp-6Ch] eax +
test eax eax +
jz loc_1029030  +
push eax  +
mov ecx esi +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov [ebp-24h] eax +
mov [ebp-4Ch] eax +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-80h] +
push eax  +
mov ecx esi +
call sub_1024D1A  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-80h] +
push eax  +
mov ecx esi +
call sub_102618D  +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov ecx [esi+4] +
mov [ecx] edi +
mov ecx ds:off_101EF50 +
cmp ecx edi +
jz loc_1021E2C  +
push ecx  +
push eax  +
call ds:_wcsicmp  +
neg eax  +
pop ecx  +
sbb eax eax +
pop ecx  +
inc eax  +
jmp loc_1021DAE  +
***
cmp dword ptr [ebp+14h] 1 +
jz loc_101DF99  +
jmp loc_1067507  +
***
push edi  +
lea edi [esi+4] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx edi +
call ?GetNextAssoc@CMapWordToPtr@@QBEXAAPAU__POSITION@@AAGAAPAX@Z  +
mov ecx [ebp+var_4] +
cmp ecx ebx +
jz loc_10290C0  +
push 1  +
call sub_102357E  +
cmp [ebp+var_8] ebx +
jnz loc_102909F  +
pop edi  +
jmp loc_10189D9  +
***
or [ebp+wParam] 0FFFFFFFFh +
test edi edi +
jl loc_1029103  +
lea eax [ebp+lParam] +
push eax  +
push edi  +
mov ecx ebx +
call sub_100940C  +
test [ebp+var_F] 1 +
jnz loc_1028FA0  +
test [ebp+var_10] 8 +
jnz loc_102910B  +
or ebx 0FFFFFFFFh +
jmp loc_1015AFD  +
dec edi  +
jns loc_10290E7  +
jmp loc_1029103  +
***
push dword ptr [ebp+14h]  +
push ecx  +
mov ecx [esi+6Ch] +
call sub_1028F81  +
mov edi eax +
jmp loc_1027B3C  +
***
mov ecx [esi+4] +
mov byte ptr [ecx] 0 +
mov ecx ds:off_101EF50 +
cmp ecx edi +
jz loc_1021E2C  +
push ecx  +
push eax  +
call ds:_wcsicmp  +
neg eax  +
pop ecx  +
sbb al al +
pop ecx  +
inc al  +
mov ecx [esi+4] +
mov [ecx] al +
jmp loc_1021E2C  +
***
push 2Ch  +
mov eax offset byte_10D5805 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push 0  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmainframeScsh  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [esi+14h] 0 +
jz loc_10602A2  +
lea ecx [esi-0C4h] +
call sub_1028EA4  +
test al al +
jz loc_10602A2  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+14h] +
lea eax [ebp-38h] +
push eax  +
call sub_102924B  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_100C4D0  +
mov edi [ebp+8] +
xor esi esi +
mov ebx ecx +
push esi  +
mov ecx edi +
mov [ebp-4] esi +
mov [ebp-34h] edi +
mov [ebp-30h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmenubarScshow  +
mov ecx edi +
mov [ebp-4] esi +
mov dword ptr [ebp-30h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx ebx +
call sub_1015912  +
cmp eax esi +
mov [ebp-2Ch] eax +
mov [ebp-28h] esi +
jle loc_10292CB  +
mov esi 5407h +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp-28h]  +
mov ecx ebx +
call sub_100940C  +
mov eax [ebp-20h] +
cmp eax esi +
jz loc_102930A  +
cmp eax 5405h +
jz loc_102930A  +
cmp eax 5406h +
jz loc_102930A  +
inc dword ptr [ebp-28h]  +
mov eax [ebp-28h] +
cmp eax [ebp-2Ch] +
jl loc_102929D  +
mov eax edi +
call sub_100C50D  +
retn 8  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_1029314  +
cmp eax esi +
jz loc_1029329  +
xor eax eax +
cmp [ebp+0Ch] al +
mov ecx ebx +
setz al  +
push eax  +
push dword ptr [ebp-20h]  +
call sub_1015ADE  +
jmp loc_10292C0  +
push 33B8h  +
mov ecx ebx +
call sub_102842D  +
test al al +
jz loc_10292C0  +
jmp loc_1029314  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1029371  +
test al al +
jnz loc_1029367  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?OnActivateView@CView@@MAEXHPAV1@0@Z  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
jz loc_10293D7  +
call sub_101D08C  +
mov ebx eax +
test ebx ebx +
jz loc_10293D7  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_105AB98  +
cmp eax edi +
jnz loc_105ABA4  +
test byte ptr [edi+1F8h] 1 +
jz loc_10293E1  +
push 0  +
mov ecx edi +
call sub_100DD70  +
mov esi eax +
test esi esi +
jz loc_10293E1  +
push dword ptr [esi+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_10293E1  +
push 1  +
push esi  +
mov ecx ebx +
call ?SetActiveView@CFrameWnd@@QAEXPAVCView@@H@Z  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
xor al al +
jmp loc_10293D0  +
test eax eax +
jnz loc_1029397  +
jmp loc_102939F  +
mov ecx edi +
call sub_108206C  +
jmp loc_105ABAC  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_1029411  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_1029424  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1029443  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jz loc_102945C  +
push esi  +
call sub_1029632  +
add esi 30h +
jmp loc_102944C  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebx  +
mov ebx ecx +
push esi  +
mov esi [ebx+174h] +
cmp esi [ebx+178h] +
jz loc_10294BB  +
push edi  +
mov edi [esi] +
test edi edi +
jz loc_10294AF  +
push edi  +
call ds:IsWindow  +
test eax eax +
jz loc_10294AF  +
push edi  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov edi eax +
push 1  +
mov ecx edi +
call sub_1022FA8  +
push 585h  +
push 0  +
push 0  +
push dword ptr [edi+20h]  +
call ds:RedrawWindow  +
add esi 4 +
cmp esi [ebx+178h] +
jnz loc_102947B  +
pop edi  +
pop esi  +
lea ecx [ebx+170h] +
pop ebx  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp-4] +
push eax  +
call sub_10294E6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_1029512  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_1029521  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1029553  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_8] +
jnz loc_10602F0  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
lea esi [eax+1Ch] +
mov eax [eax+20h] +
mov ecx [esi] +
push 2  +
push eax  +
push ecx  +
call ds:MonitorFromPoint  +
mov edx eax +
push 9  +
xor eax eax +
pop ecx  +
lea edi [ebp+rcSrc.top] +
mov [ebp+rcSrc.left] 28h +
stos   +
xor edi edi +
cmp edx edi +
jz loc_1059545  +
lea eax [ebp+rcSrc] +
push eax  +
push edx  +
call ds:GetMonitorInfoW  +
test eax eax +
jz loc_1059545  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp+rc] +
push eax  +
call ds:CopyRect  +
push 3  +
push esi  +
lea eax [ebp+rc] +
push eax  +
call sub_10295E7  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov ebx [esi] +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
cmp ebx eax +
jl loc_1046DBA  +
mov ecx [esi+8] +
cmp ecx [edi+8] +
jg loc_1046DBA  +
mov ecx [esi+4] +
cmp ecx [edi+4] +
jl loc_1046DBA  +
mov ecx [esi+0Ch] +
cmp ecx [edi+0Ch] +
jg loc_1046DBA  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_102964A  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_1021AA1  +
test [ebp+arg_0] 1 +
jnz loc_105A2C1  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 34h  +
mov eax offset byte_10D7191 +
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-20h] +
call MFC42u_6466  +
push ebx  +
lea ecx [ebp-30h] +
mov dword ptr [ebp-4] 1 +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewScse_2  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi-4] +
cmp eax ebx +
jz loc_10296C1  +
mov ebx [eax+0E0h] +
push 8000FFFFh  +
push dword ptr [esi+130h]  +
lea eax [ebp-40h] +
push ebx  +
push eax  +
call sub_100C5A1  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105B536  +
and dword ptr [ebp-18h] 0 +
and dword ptr [ebp-14h] 0 +
mov eax [ebx] +
lea ecx [ebp-18h] +
push ecx  +
lea ecx [ebp-14h] +
push ecx  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 4 +
push ebx  +
call dword ptr [eax+44h]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105B54F  +
xor ebx ebx +
inc ebx  +
cmp [ebp-18h] ebx +
jl loc_105B5DD  +
cmp dword ptr [ebp-14h] 0 +
jz loc_105B5DD  +
push dword ptr [ebp+10h]  +
mov ecx [esi+130h] +
push dword ptr [ebp-18h]  +
lea eax [ebp-40h] +
push dword ptr [ebp-14h]  +
push eax  +
call sub_1029833  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp byte ptr [ebp+10h] 0 +
jnz loc_105B568  +
mov byte ptr [ebp+13h] 0 +
test byte ptr [ebp-10h] 2 +
mov dword ptr [ebp-4] 4 +
jnz loc_105B591  +
cmp byte ptr [ebp+13h] 0 +
jnz loc_105B5A3  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-30h] +
push eax  +
jnz loc_10297C5  +
mov byte ptr [esi+191h] 1 +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-10h] ebx +
lea ecx [ebp-14h] +
call sub_100C763  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-1Ch] +
mov ecx [ebp-20h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov [ebp+13h] bl +
test al al +
jnz loc_102978F  +
jmp loc_102978B  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-1Ch] edi +
and dword ptr [ebp-18h] 0 +
push 0  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamctreeview_5  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1064628  +
cmp dword ptr [edi+0A0h] 0 +
jnz loc_10299DC  +
mov ecx edi +
call sub_100C5D1  +
mov edi 8000FFFFh +
push edi  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10299DC  +
mov eax [ebp+0Ch] +
cmp [eax] ebx +
jnz loc_106463A  +
mov eax [ebp-1Ch] +
mov eax [eax+0A4h] +
mov eax [eax+0D8h] +
push edi  +
push eax  +
mov [ebp-24h] eax +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10299DC  +
mov edi [ebp-1Ch] +
push dword ptr [ebp-14h]  +
and dword ptr [ebp-20h] 0 +
mov ecx edi +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx [ebp-24h] +
mov edx [ecx] +
lea esi [ebp-20h] +
push esi  +
push eax  +
push ecx  +
call dword ptr [edx+48h]  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10299DC  +
xor esi esi +
cmp [ebp+10h] esi +
mov [ebp-0Dh] al +
jle loc_1029993  +
mov eax [ebp+0Ch] +
mov eax [eax+esi*4] +
cmp eax [ebp-20h] +
jz loc_1029993  +
inc esi  +
cmp esi [ebp+10h] +
jl loc_1029982  +
inc esi  +
cmp esi [ebp+10h] +
jl loc_106464D  +
cmp [ebp+10h] esi +
jnz loc_10299A5  +
mov [ebp-0Dh] bl +
cmp dword ptr [ebp-14h] 0 +
jz loc_10299DC  +
cmp byte ptr [ebp+14h] 0 +
jnz loc_1064684  +
mov ecx edi +
call sub_100C573  +
cmp eax [ebp-14h] +
jnz loc_10646A1  +
mov eax [edi] +
lea ecx [ebp-44h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+118h]  +
lea ecx [ebp-44h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea eax [ebp-34h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
mov [ebp-14h] eax +
test eax eax +
jz loc_102999D  +
jmp loc_1029993  +
***
push 24h  +
mov eax offset byte_10D7C27 +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScontr  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [edi+7Ch] ebx +
jz loc_105BA0F  +
mov esi lpDst +
cmp esi offset lpDst +
jz loc_1029A9D  +
cmp byte ptr [esi+19h] 5 +
jnb loc_105BA21  +
cmp dword ptr [edi+7Ch] 2 +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
jz loc_105BA62  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
lea ecx [edi-74h] +
mov [edi+7Ch] ebx +
call sub_1029B4D  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewSctree  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 8000FFFFh  +
push dword ptr [esi+174h]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105B9C8  +
push 9  +
xor eax eax +
pop ecx  +
lea edi [ebp-58h] +
stos   +
mov eax [esi+270h] +
xor edi edi +
mov [ebp-58h] ebx +
mov [ebp-50h] edi +
mov [ebp-44h] ebx +
cmp eax 2 +
jnz loc_1056E5A  +
mov [ebp-40h] ebx +
mov dword ptr [ebp-4Ch] 0FFFFFFFDh +
mov ecx [esi+174h] +
call sub_100C573  +
mov [ebp-14h] eax +
cmp eax edi +
jz loc_1029C0B  +
mov ecx [esi+174h] +
push eax  +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov edi eax +
mov ecx esi +
call sub_101D08C  +
test edi edi +
jz loc_1056E67  +
mov eax [esi+0D8h] +
lea ecx [ebp-58h] +
push ecx  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push 0  +
push edi  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_101864F  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ax word ptr [ebp+arg_C] +
mov word ptr [ebp+arg_C+2] ax +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1029D03  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_8] +
jz loc_1029D26  +
push [ebp+arg_E]  +
lea ecx [ebp+14h] +
push [ebp+arg_4]  +
call sub_1029D37  +
test al al +
jz loc_105FE36  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
pop ebp  +
retn 10h  +
***
call sub_1001F95  +
mov eax [ebp+8] +
mov ecx [eax] +
mov eax [ecx] +
lea edx [ebp+8] +
push edx  +
lea edx [ebp-1Ch] +
push edx  +
call dword ptr [eax+8]  +
xor ebx ebx +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1029D72  +
mov ax [ebp+8] +
cmp ax [ebp+0Ch] +
setz bl  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov al bl +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
movzx ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+150h] +
push ebx  +
add esi 44h +
push 1001h  +
mov ecx esi +
call sub_102134D  +
push eax  +
mov ecx esi +
call sub_1029DDC  +
cmp [ebp+arg_0] 0 +
jz loc_1029DD0  +
mov eax [edi+150h] +
cmp dword ptr [eax+40h] 0 +
jz loc_1060252  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 423h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
push dword ptr [ebp+14h]  +
push ecx  +
mov ecx [esi+6Ch] +
call sub_1029E0F  +
jmp loc_102911C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push eax  +
push [ebp+wParam]  +
push 402h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jb loc_1064998  +
push eax  +
lea ecx [ebx+100h] +
call ??4CString@@QAEABV0@PBG@Z  +
push dword ptr [ebx+100h]  +
lea eax [ebp-4Ch] +
push offset loc_1028705  +
push eax  +
lea ecx [ebx+4Ch] +
call sub_100FB75  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10649A0  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1023815  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
lea eax [ebp+arg_C] +
mov [ebp+Arguments] eax +
lea eax [ebp+lpSource] +
push eax  +
push [ebp+uID]  +
xor edi edi +
push [ebp+hInstance]  +
mov [ebp+hMem] edi +
mov [ebp+lpSource] edi +
call sub_1021626  +
mov esi eax +
cmp esi edi +
jl loc_10661D9  +
lea eax [ebp+Arguments] +
push eax  +
push edi  +
lea eax [ebp+hMem] +
push eax  +
push edi  +
push [ebp+uID]  +
push [ebp+lpSource]  +
push 500h  +
call ds:FormatMessageW  +
test eax eax +
jz loc_1029F16  +
cmp [ebp+hMem] edi +
jz loc_1029F16  +
push [ebp+hMem]  +
mov ecx [ebp+arg_0] +
call sub_100AE0E  +
mov esi eax +
cmp esi edi +
jl loc_106620E  +
cmp [ebp+hMem] edi +
jz loc_1029F02  +
push [ebp+hMem]  +
call ds:LocalFree  +
cmp [ebp+lpSource] edi +
jz loc_1029F10  +
push [ebp+lpSource]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
call ds:__imp_GetLastError  +
jmp loc_1066232  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push [ebp+arg_4]  +
and [ebp+var_4] 0 +
push 1  +
push 0  +
lea eax [ebp+var_14] +
push eax  +
add ecx 0FFFFFF94h +
call sub_1029F85  +
lea ecx [ebp+var_14] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+arg_0] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
mov [ebp-10h] esi +
mov ebx [ebp+8] +
push esi  +
mov ecx ebx +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov [ebp-4] esi +
inc esi  +
push offset aCactionspane_0  +
mov ecx ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+10h] esi +
jnz loc_105D564  +
push dword ptr [ebp+10h]  +
mov ecx edi +
call sub_1023685  +
push eax  +
lea ecx [edi+0D0h] +
call sub_1016801  +
push 8000FFFFh  +
push eax  +
mov [ebp+10h] eax +
lea eax [ebp-20h] +
push eax  +
call sub_100A3AE  +
push eax  +
mov ecx ebx +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx ebx +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
test eax eax +
jl loc_105D573  +
push dword ptr [ebp+14h]  +
mov ecx [ebp+10h] +
call sub_1026CFB  +
mov ecx edi +
call sub_100CBA3  +
push eax  +
mov ecx ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx ebx +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105D5A7  +
mov eax ebx +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
push edi  +
push [ebp+arg_4]  +
lea edi [esi+10h] +
mov ecx edi +
call sub_100C7C5  +
test eax eax +
jz loc_102A0F3  +
push [ebp+arg_4]  +
mov ecx edi +
call ??4CString@@QAEABV0@PBG@Z  +
lea ecx [esi-40h] +
call sub_102A10C  +
push 1  +
push 0  +
push dword ptr [esi-20h]  +
call ds:InvalidateRect  +
mov ecx [ebp+arg_0] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
lea ecx [ebp-20h] +
call sub_100AD56  +
push dword ptr [esi+54h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [esi+50h]  +
push 0E801h  +
call ds:?GetStringModule@@YGPAUHINSTANCE__@@XZ  +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_1029E8A  +
add esp 14h +
push dword ptr [ebp-1Ch]  +
mov ecx esi +
mov edi eax +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call sub_100A77D  +
mov eax edi +
call sub_1001FCF  +
retn   +
***
retn   +
***
mov [ecx] eax +
jmp loc_10191CF  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
mov edi eax +
movzx eax byte ptr [esi+232h] +
push eax  +
push esi  +
call sub_1019744  +
mov eax edi +
pop edi  +
pop esi  +
retn 8  +
***
xor eax eax +
retn   +
***
call sub_1001F95  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_102A1D5  +
push dword ptr [ebp+0Ch]  +
call ??0CString@@QAE@ABV0@@Z  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_106082E  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 6 +
jb loc_1060835  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov byte ptr [eax+10h] 1 +
push esi  +
mov byte ptr [esi+10h] 0 +
call sub_1019199  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
jmp loc_1019291  +
mov [esi+8] ebx +
jmp loc_1019246  +
***
push eax  +
push eax  +
push dword_10F537C  +
push dword ptr [esi+20h]  +
call ds:PostMessageW  +
jmp loc_1027AB0  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_102A25E  +
mov eax [eax+4] +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100DF76  +
push eax  +
call ?FromHandle@CImageList@@SGPAV1@PAU_IMAGELIST@@@Z  +
pop ebp  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmctoolbarSco  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jnz loc_1063E62  +
mov [esi+10h] edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_10233A9  +
lea eax [ebp+arg_4] +
jmp loc_10233AF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+4Ch] +
call sub_1023388  +
mov ecx [esi+50h] +
xor edx edx +
cmp ecx [eax] +
pop esi  +
setnz dl  +
mov al dl +
leave   +
retn 4  +
***
mov ecx [ebp-44h] +
push ebx  +
push dword ptr [ebp-20h]  +
lea eax [ebp-54h] +
push eax  +
call sub_1027937  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-54h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_102838D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102A40E  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jz loc_102A42E  +
push esi  +
push [ebp+arg_8]  +
call sub_1018DA3  +
add [ebp+arg_8] 6 +
add esi 6 +
jmp loc_102A417  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi eax +
jmp loc_102A49E  +
***
call sub_100A60E  +
mov ebx ecx +
mov esi [ebp+10h] +
lea edi [ebp-18h] +
movs   +
movs   +
call sub_1018D87  +
mov esi [ebp+0Ch] +
mov edi eax +
test esi esi +
jz loc_102A513  +
mov ecx ebx +
call sub_100FA88  +
mov ecx 2AAAAAAAh +
mov edx ecx +
sub edx eax +
cmp edx esi +
jb loc_1060A93  +
add eax esi +
cmp edi eax +
jnb loc_1060AB1  +
mov edx edi +
shr edx 1 +
sub ecx edx +
cmp ecx edi +
jb loc_1060A98  +
add edi edx +
cmp edi eax +
jb loc_102A436  +
push 0  +
push edi  +
call sub_102A1E2  +
and dword ptr [ebp-4] 0 +
push ebx  +
mov [ebp+10h] eax +
push dword ptr [ebp+10h]  +
mov eax [ebx+4] +
push dword ptr [ebp+8]  +
push eax  +
call sub_102A3E0  +
lea ecx [ebp-18h] +
push ecx  +
push esi  +
push eax  +
mov ecx ebx +
call sub_1019118  +
mov ecx [ebx+8] +
push ebx  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
call sub_102A3E0  +
mov ecx ebx +
call sub_100FA88  +
add esi eax +
mov eax [ebx+4] +
test eax eax +
jz loc_102A4FD  +
mov ecx [ebx+8] +
cmp eax ecx +
jz loc_102A4F4  +
add eax 6 +
jmp loc_102A4EB  +
push dword ptr [ebx+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+10h] +
imul edi edi +
imul esi esi +
add edi eax +
add esi eax +
mov [ebx+0Ch] edi +
mov [ebx+8] esi +
mov [ebx+4] eax +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102A54E  +
pop edi  +
leave   +
retn 10h  +
***
call sub_100A60E  +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov esi [ebp+8] +
mov [ebp-14h] eax +
cmp esi [ebp+0Ch] +
jz loc_102A57E  +
push esi  +
push dword ptr [ebp+10h]  +
call sub_102A1B0  +
add dword ptr [ebp+10h] 4 +
add esi 4 +
jmp loc_102A567  +
mov eax [ebp+10h] +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_102183C  +
mov ecx esi +
mov edi eax +
call sub_1021854  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jb loc_102A5C1  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_102AA56  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
push 1  +
push eax  +
call sub_102A5D3  +
mov [esi+8] eax +
jmp loc_102A5BB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_102A5F9  +
lea eax [edi+esi*4] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102A627  +
pop edi  +
leave   +
retn 10h  +
***
call sub_100A60E  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_102A657  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_102A1B0  +
dec dword ptr [ebp+0Ch]  +
add dword ptr [ebp+8] 4 +
jmp loc_102A63D  +
call sub_1001FCF  +
retn 18h  +
***
call sub_100A60E  +
mov esi ecx +
mov [ebp-1Ch] esi +
push dword ptr [ebp+10h]  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@ABV0@@Z  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1021854  +
mov edi [ebp+0Ch] +
mov [ebp+10h] eax +
test edi edi +
jz loc_102A759  +
mov ecx esi +
call sub_102183C  +
mov ecx 3FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_1060C58  +
add eax edi +
cmp [ebp+10h] eax +
jnb loc_1060C86  +
mov edx [ebp+10h] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp+10h] +
jb loc_1060C5D  +
add [ebp+10h] edx +
cmp [ebp+10h] eax +
jb loc_102A76D  +
push 0  +
push dword ptr [ebp+10h]  +
call sub_1021804  +
mov ebx eax +
mov eax [esi+4] +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp-18h] ebx +
push eax  +
mov [ebp+0Ch] ebx +
mov byte ptr [ebp-4] 1 +
call sub_102A520  +
lea ecx [ebp-14h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
mov [ebp+0Ch] eax +
call sub_102A5D3  +
push esi  +
mov [ebp+0Ch] eax +
push dword ptr [ebp+0Ch]  +
mov eax [esi+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_102A520  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_102183C  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_102A747  +
mov ecx [esi+8] +
push esi  +
push ecx  +
push eax  +
call sub_1019A7A  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+10h] +
lea eax [ebx+eax*4] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*4] +
mov [esi+8] eax +
mov [esi+4] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
mov [ebp+10h] eax +
jmp loc_102A6D8  +
***
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_102A789  +
jmp loc_101910D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_100FA88  +
test eax eax +
jz loc_102A7C9  +
mov eax [ebp+arg_4] +
sub eax [edi+4] +
push 6  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi eax +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_102A43F  +
imul esi esi +
add esi [edi+4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
xor esi esi +
jmp loc_102A7A9  +
***
lea ecx [ebp-30h] +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
mov ecx [esi+6Ch] +
test ecx ecx +
jz loc_1063E3A  +
push ebx  +
push edi  +
call sub_1015912  +
mov ebx eax +
xor edi edi +
test ebx ebx +
jle loc_102AA24  +
mov ecx [esi+6Ch] +
lea eax [ebp+lParam] +
push eax  +
push edi  +
call sub_100940C  +
test eax eax +
jz loc_102AA1F  +
test [ebp+var_10] 8 +
jnz loc_102AA1F  +
mov al 1 +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn   +
inc edi  +
cmp edi ebx +
jl loc_102A9F7  +
xor al al +
jmp loc_102AA10  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0FFFFFFFFh +
jnz loc_102AA45  +
cmp byte ptr [ecx+233h] 0 +
jz loc_105EB1D  +
pop ebp  +
nop   +
nop   +
nop   +
nop   +
nop   +
jmp ds:?ActivateFrame@CMDIChildWnd@@UAEXH@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_102183C  +
test eax eax +
jz loc_102AA91  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 2 +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_102A664  +
mov eax [edi+4] +
lea ecx [eax+esi*4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
xor esi esi +
jmp loc_102AA71  +
***
push edi  +
lea ecx [esi+84h] +
call sub_102A58E  +
mov ebx [edi] +
mov eax [ebx-8] +
inc eax  +
lea edi [eax+eax] +
mov [ebp-18h] eax +
lea eax [edi+2] +
call sub_1027CCC  +
mov [ebp-14h] esp +
push ebx  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-14h]  +
call sub_100A593  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1037B07  +
mov eax [ebp-14h] +
xor ecx ecx +
mov [edi+eax] cx +
push eax  +
mov ecx esi +
call sub_102AAFA  +
jmp loc_100FB2B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 44Dh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+178h] +
push edi  +
mov edi [eax+4Ch] +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+70h]  +
cmp eax 1 +
jz loc_105A9AB  +
pop edi  +
xor eax eax +
pop esi  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
and eax 0FFFFFFF8h +
cmp eax 8 +
jg loc_105FE76  +
pop ebp  +
retn 0Ch  +
***
call sub_10159B1  +
xor eax eax +
retn 8  +
***
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
call sub_102ABDF  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1057DA0  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-40h] +
push eax  +
mov ecx ebx +
call sub_100A025  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-20h] +
test al al +
jnz loc_1057DA7  +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_100A113  +
***
call sub_1001F95  +
mov ebx ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCidletaskque_1  +
lea ecx [ebp-24h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx ebx +
call sub_1002565  +
test eax eax +
jz loc_105FF8B  +
mov eax [ebx+4] +
mov esi [eax] +
mov [ebp-14h] esi +
mov byte ptr [ebp-4] 2 +
test esi esi +
jz loc_105FFA0  +
mov ecx ebx +
call sub_102ACE9  +
mov eax [esi] +
lea ecx [ebp-34h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
lea eax [ebp-24h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-14h] +
mov [ebp-10h] edi +
call sub_1023205  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
movzx edx byte ptr [esi+10h] +
mov eax [esi+8] +
mov ecx [esi+4] +
push edx  +
push eax  +
push ecx  +
call sub_102AB47  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push esi  +
mov esi ecx +
call sub_1002565  +
test eax eax +
jz loc_102AD1A  +
add dword ptr [esi+8] 0FFFFFFF8h +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp-4] ebx +
push edi  +
mov edi [ecx+8] +
mov eax [edi] +
mov [ebp-4] eax +
cmp eax edi +
jz loc_102AD8A  +
push esi  +
push dword ptr [eax+0Ch]  +
call ?FromHandlePermanent@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push ebx  +
push offset off_10F6CCC  +
push offset off_10F6C88  +
push ebx  +
push eax  +
call __RTDynamicCast  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jz loc_102AD7A  +
mov ecx esi +
call sub_100DA2C  +
push 1  +
push ebx  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
push dword ptr [esi+20h]  +
call ds:UpdateWindow  +
lea ecx [ebp-4] +
call sub_1015931  +
mov eax [ebp-4] +
cmp eax edi +
jnz loc_102AD3B  +
pop esi  +
mov ecx [ebp+8] +
push ebx  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+8] +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
push eax  +
call sub_102ADBB  +
and dword ptr [esi] 0 +
jmp loc_1023214  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_102ADCD  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
call sub_100C4D0  +
mov edi [ebp+8] +
xor ebx ebx +
push ebx  +
lea ecx [ebp-10Ch] +
mov [ebp-110h] edi +
mov [ebp-0ECh] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcappSccheck  +
lea ecx [ebp-10Ch] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-0E4h] +
push eax  +
push 20019h  +
push ebx  +
push offset aSoftwareMicros  +
push 80000002h  +
mov [ebp-0DCh] ebx +
mov [ebp-0E4h] ebx +
mov [ebp-0F0h] ebx +
mov [ebp-0E0h] ebx +
mov [ebp-0E8h] ebx +
mov [ebp-0F4h] ebx +
mov [ebp-0F8h] ebx +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1057AC8  +
lea eax [ebp-0FCh] +
push eax  +
lea eax [ebp-0D8h] +
push eax  +
lea eax [ebp-0F0h] +
push eax  +
push ebx  +
push offset ValueName  +
push dword ptr [ebp-0E4h]  +
mov dword ptr [ebp-0FCh] 0C8h +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_102AF01  +
lea eax [ebp-0D8h] +
push eax  +
call ds:lstrlenW  +
test eax eax +
jle loc_102AF01  +
lea eax [ebp-0F8h] +
push eax  +
lea eax [ebp-0F4h] +
push eax  +
lea eax [ebp-0E8h] +
push eax  +
lea eax [ebp-0E0h] +
push eax  +
lea eax [ebp-0D8h] +
push offset aD_D_D_D  +
push eax  +
call ds:swscanf  +
add esp 18h +
cmp eax 2 +
jl loc_102AF01  +
cmp dword ptr [ebp-0E0h] 6 +
jb loc_102AEF4  +
mov [ebp-0DCh] esi +
cmp dword ptr [ebp-0E0h] 5 +
jz loc_1057AB0  +
push dword ptr [ebp-0E4h]  +
call ds:RegCloseKey  +
cmp [ebp-0DCh] ebx +
jz loc_1057AC8  +
lea eax [ebp-10Ch] +
push eax  +
mov ecx edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-10Ch] +
mov [ebp-0ECh] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
call sub_100C50D  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+58h] +
mov dword ptr [ebp-4] 2 +
call sub_100A77D  +
lea ecx [esi+44h] +
mov byte ptr [ebp-4] 1 +
call sub_100A77D  +
lea ecx [esi+30h] +
mov byte ptr [ebp-4] 0 +
call sub_100A77D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CCommandLineInfo@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
adc ds:byte_10E0300[eax] bh +
call sub_1001F95  +
mov edi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCdirectuire_11  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call sub_1034765  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ebx ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-1Ch] +
call ebx  +
test eax eax +
jl loc_1069AF2  +
call sub_1034671  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call ebx  +
test eax eax +
jl loc_1069B26  +
call sub_103457C  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call ebx  +
test eax eax +
jl loc_1069B4C  +
mov esi ds:AddAtomW +
push offset aTitle  +
call esi  +
push offset aIcon_0  +
mov [edi+2Ch] ax +
call esi  +
push offset aBullet  +
mov [edi+2Eh] ax +
call esi  +
push offset aCheckmark  +
mov [edi+30h] ax +
call esi  +
push offset aTasklist  +
mov [edi+32h] ax +
call esi  +
push offset aNorgie  +
mov [edi+34h] ax +
call esi  +
push offset aDescription  +
mov [edi+36h] ax +
call esi  +
push offset aSepsection  +
mov [edi+38h] ax +
call esi  +
mov [edi+3Ah] ax +
lea ecx [ebp-1Ch] +
call ebx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102B26A  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [esi] eax +
pop esi  +
mov eax ecx +
pop ebp  +
retn 14h  +
***
call sub_100A4F0  +
xor edi edi +
mov [ebp-1Ch] edi +
mov esi dword_10F5358 +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_102B299  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_102B2C7  +
mov [ebp-4] edi +
cmp esi edi +
jz loc_103789A  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_102B2F1  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 14h  +
***
cmp dword_10F6C64 edi +
jnz locret_102B31E  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jnz loc_105F40B  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jnz loc_105F418  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+uCmd]  +
mov ecx [ecx+20h] +
push ecx  +
call ds:GetWindow  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push esi  +
call sub_102B386  +
test al al +
jnz loc_102B370  +
push 0FFFFFFFFh  +
push 0  +
mov ecx esi +
call sub_1011BBD  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_101D0E4  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
push esi  +
lea eax [ebp+var_4] +
push eax  +
call sub_102B3C0  +
mov esi [ebp+arg_4] +
cmp esi [eax] +
jb loc_102B3B4  +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_0] +
push eax  +
call sub_1041B65  +
cmp esi [eax] +
jbe loc_1060D92  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 8 +
jnb loc_102BFC3  +
add ecx 4 +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 4  +
***
mov eax [ecx+0CCh] +
test eax eax +
jz loc_105A5DE  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+174h] +
call sub_100C5D1  +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
push eax  +
call sub_102B41D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_102B43B  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105A88B  +
cmp [ebp+arg_0] 0 +
jz loc_102B484  +
cmp [ebp+arg_4] 0 +
jz loc_102B484  +
push ebx  +
push esi  +
push [ebp+arg_0]  +
lea esi [edi+174h] +
mov ecx [esi] +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
push [ebp+arg_4]  +
mov ecx [esi] +
mov ebx eax +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
lea ecx [edi+0D8h] +
mov esi eax +
call sub_100A5CF  +
push [ebp+arg_8]  +
mov ecx [eax] +
push esi  +
push ebx  +
push eax  +
call dword ptr [ecx+50h]  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 0Ch  +
mov eax 80004005h +
jmp loc_102B47F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
and dword ptr [edi] 0 +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+68h]  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_102B4DE  +
push 0  +
push offset off_10F6CCC  +
push offset off_10F6CB8  +
push 0  +
lea ecx [ebp+arg_0] +
mov [ebp+var_4] eax +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+6Ch]  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
test eax eax +
jz loc_1058FB3  +
mov eax [ebp+var_4] +
mov [edi] eax +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 0 +
push edi  +
mov edi ecx +
jz loc_1058FBB  +
push ebx  +
mov ebx offset off_10F6CB8 +
cmp dword ptr [esi] 0 +
jz loc_102B567  +
mov eax [edi] +
push esi  +
mov ecx edi +
call dword ptr [eax+6Ch]  +
push 0  +
push offset off_10F6CCC  +
push ebx  +
push 0  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
mov [ebp+var_4] eax +
test eax eax +
jz loc_102B50B  +
cmp dword ptr [esi] 0 +
jz loc_102B567  +
mov eax [esi] +
push 0  +
push offset off_10F6CCC  +
push ebx  +
push 0  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov eax [edi] +
push ecx  +
mov ecx edi +
call dword ptr [eax+6Ch]  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
test eax eax +
jnz loc_102B567  +
mov eax [ebp+arg_0] +
mov [esi] eax +
test eax eax +
jnz loc_102B537  +
mov eax [ebp+var_4] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_10595D6  +
mov ecx [ebp+arg_4] +
push 0  +
call sub_100EB41  +
pop ebp  +
retn 8  +
***
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_102B490  +
cmp [ebp-14h] ebx +
jz loc_102B5C2  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_102B4EB  +
cmp eax ebx +
jz loc_102B59E  +
mov ecx eax +
call sub_102B889  +
test al al +
jz loc_102B59E  +
jmp loc_100EC78  +
lea edi [esi+110h] +
push edi  +
push ebx  +
call sub_102B576  +
test al al +
jz loc_102B5E8  +
mov ecx edi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jz loc_100EC78  +
mov [ebp-10h] ebx +
lea ecx [ebp-10h] +
mov [ebp-4] ebx +
call sub_100A5E6  +
push eax  +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
call sub_102B677  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_102B64B  +
cmp [ebp-10h] ebx +
jz loc_102B64B  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push ebx  +
lea ecx [ebp-24h] +
call ds:??8SC@mmcerror@@QBE_NJ@Z  +
lea ecx [ebp-24h] +
test al al +
jnz loc_1059789  +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov esi [esi+48h] +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_102B66B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_100EC7B  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScgetvi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10595E5  +
add edi 0E0h +
mov eax [edi] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10595FA  +
and dword ptr [ebp-10h] 0 +
mov ecx edi +
mov byte ptr [ebp-4] 4 +
call sub_100A5CF  +
mov edi [eax] +
lea ecx [ebp-10h] +
mov [ebp-18h] eax +
add edi 14h +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp-18h]  +
call dword ptr [edi]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_102B7F2  +
mov edi 8000FFFFh +
push edi  +
push dword ptr [ebp-10h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_102B7F2  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+118h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_102B7F2  +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-10h] +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
test eax eax +
jz loc_102B812  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
xor al al +
push ebx  +
cmp [ecx+1D5h] al +
jnz loc_102B8C7  +
cmp [ecx+264h] al +
jnz loc_102B8C7  +
xor bl bl +
cmp [ecx+1DCh] al +
jnz loc_102B8AD  +
call sub_102B8D0  +
mov bl al +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_102B8C3  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105AB7D  +
mov al bl +
pop ebx  +
retn   +
mov bl 1 +
jmp loc_102B8AD  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+174h] +
call sub_100C573  +
xor ecx ecx +
cmp eax [esi+1D8h] +
pop esi  +
setnz cl  +
mov al cl +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+2Dh] 0 +
jz loc_106354E  +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jz loc_104E8EB  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_104E8F3  +
mov [ecx+8] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov ecx [eax+4] +
call ?BeginWaitCursor@CCmdTarget@@QAEXXZ  +
mov eax esi +
pop esi  +
retn   +
***
mov edx [eax] +
jmp loc_101D17F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101D1AD  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
push esi  +
lea ecx [edi-64h] +
call sub_101E99B  +
jmp loc_101E54E  +
***
test al al +
jz loc_101E54E  +
push ecx  +
push ecx  +
push ecx  +
lea eax [ebp-4Ch] +
mov [ebp-1Ch] eax +
mov eax esp +
mov dword ptr [ebp-20h] offset off_101E844 +
mov dword ptr [ebp-18h] offset unk_10F5C1C +
mov dword ptr [ebp-14h] 4 +
lea ecx [ebp-20h] +
mov [eax+4] ecx +
mov [ebp-40h] esp +
mov dword ptr [eax] 0Eh +
push ds:off_101DD1C  +
mov ecx esi +
call sub_101DF07  +
push dword ptr [ebp-4Ch]  +
mov ecx offset dword_10F54B0 +
call sub_102F745  +
jmp loc_101E54E  +
***
mov eax [edi+78h] +
push ecx  +
mov ecx eax +
add eax 18h +
jmp loc_101E540  +
***
lea ecx [edi+7Ch] +
call sub_100A5CF  +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+54h]  +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_101E54E  +
jmp loc_101E5E1  +
***
mov [ebp-44h] ecx +
lea ecx [edi+7Ch] +
mov byte ptr [ebp-4] 5 +
call sub_100A5CF  +
mov esi [eax] +
lea ecx [ebp-44h] +
mov [ebp-40h] eax +
add esi 14h +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp-40h]  +
call dword ptr [esi]  +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_101E5EF  +
push 8000FFFFh  +
push dword ptr [ebp-44h]  +
lea eax [ebp-84h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_101E5FD  +
and dword ptr [ebp-3Ch] 0 +
lea ecx [ebp-44h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-3Ch] +
push edx  +
push eax  +
call dword ptr [ecx+114h]  +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_101E60B  +
push 8000FFFFh  +
push dword ptr [ebp-3Ch]  +
lea eax [ebp-70h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_101E619  +
mov ecx [ebp-28h] +
push 0  +
push dword ptr [ebp-3Ch]  +
call sub_101EA69  +
mov eax [ebp-44h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_102BDE4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [ebp-28h] +
jmp loc_101E54E  +
***
push ecx  +
push dword ptr [edi+0B0h]  +
jmp loc_101E547  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call sub_100CC1D  +
and dword ptr [ebp-4] 0 +
add edi 4 +
push edi  +
lea ecx [esi+4] +
call sub_101ED6F  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
push 20h  +
mov eax offset byte_10D7A1B +
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCfavoritesPers  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80004003h  +
push dword ptr [esi+8]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105F377  +
mov ecx [ebp+8] +
push 0  +
push dword ptr [esi+8]  +
call sub_101EA69  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCfavoritexmlli  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+8] +
cmp [edi+0Ch] bl +
jz loc_102BF33  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax]  +
push eax  +
mov ecx edi +
call sub_10226DF  +
test al al +
jz loc_102BF3E  +
push ebx  +
push esi  +
mov ecx edi +
call sub_101EA69  +
mov bl 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov al bl +
call sub_1001FCF  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push esi  +
push edi  +
mov edi [ebp+8] +
cmp byte ptr [edi+0Ch] 0 +
jz loc_104AF87  +
and dword ptr [eax] 0 +
push edi  +
call sub_103BA08  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx [ecx+4] +
jmp loc_102B3D2  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+59h] dl +
jnz loc_1062C24  +
mov ecx [eax+8] +
cmp [ecx+59h] dl +
jz loc_1062C33  +
mov eax [eax+4] +
cmp [eax+59h] dl +
jz loc_102BFFA  +
mov [esi] eax +
pop esi  +
retn   +
mov ecx [esi] +
cmp ecx [eax+8] +
jz loc_1062C3E  +
jmp loc_102BFF6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
cmp byte ptr [ebx+0Ch] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_104AF9E  +
lea ecx [edi+4] +
call sub_1012D09  +
push ebx  +
mov ecx edi +
call sub_103C075  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
push 3  +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-1Ch] edi +
mov [ebp-18h] ebx +
push offset aCxmlelementG_2  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi] +
push 80004002h  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-18h] ebx +
jnz loc_10667CE  +
mov esi [esi] +
push dword ptr [ebp+8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+28h]  +
mov [ebp-1Ch] edi +
mov [ebp-18h] eax +
cmp eax ebx +
jnz loc_10667F3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
push 3  +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-1Ch] edi +
mov [ebp-18h] ebx +
push offset aCxmlelementG_3  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi] +
push 80004002h  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-18h] ebx +
jnz loc_106680C  +
mov edi [ebp+8] +
push dword ptr [edi]  +
call SysFreeString  +
mov [edi] ebx +
mov esi [esi] +
mov eax [esi] +
push edi  +
push esi  +
call dword ptr [eax+68h]  +
mov dword ptr [ebp-1Ch] 3 +
mov [ebp-18h] eax +
cmp eax ebx +
jnz loc_1066831  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] ebx +
push offset aCxmldocumentGe  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+8]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] ebx +
jnz loc_1066A2E  +
push ebx  +
lea ecx [ebp-14h] +
call sub_101E2B5  +
mov ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_101E823  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jnz loc_1066A54  +
mov eax [edi] +
push 80004002h  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] ebx +
jnz loc_1066A5F  +
mov [ebp-10h] ebx +
mov eax [edi] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 4 +
call dword ptr [ecx+0B4h]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_1066A85  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-14h] +
call sub_101E2B5  +
mov ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_101E823  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_102C2F8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_102C308  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_101DD84  +
and dword ptr [ebp-4] 0 +
lea edi [esi+8] +
push 0  +
mov ecx edi +
call sub_101E2B5  +
push dword ptr [ebp+8]  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
mov byte ptr [esi+0Ch] 0 +
mov byte ptr [esi+0Dh] 0 +
mov dword ptr [esi+10h] 1 +
call sub_101EC83  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_101E823  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push dword ptr [ecx]  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
call sub_101E2B5  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
add ecx 4 +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_101ED6F  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] ebx +
push offset aCxmlelementG_1  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+8]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] ebx +
jnz loc_1066DB0  +
push ebx  +
lea ecx [ebp-14h] +
call sub_101DDF6  +
mov ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_101E823  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jnz loc_1066DD6  +
mov eax [edi] +
push 80004002h  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] ebx +
jnz loc_1066DE1  +
mov [ebp-10h] ebx +
mov eax [edi] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 4 +
call dword ptr [ecx+30h]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_1066E07  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-14h] +
call sub_101DDF6  +
mov ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_101E823  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_102C501  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_102C511  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_101D46C  +
mov eax [ebp+8] +
mov edi ecx +
xor ecx ecx +
mov [ebp-5Ch] ecx +
mov [ebp-58h] eax +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov [ebp-64h] ecx +
mov [ebp-60h] ecx +
inc dword ptr [eax]  +
pop esi  +
mov [ebp-78h] edi +
mov [ebp-6Ch] esi +
mov [ebp-68h] ecx +
xor ebx ebx +
inc ebx  +
push offset aCxmldocumentSc  +
lea ecx [ebp-6Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [edi] 0 +
jnz loc_1066E20  +
push edi  +
push offset stru_102C670  +
push ebx  +
push 0  +
push offset rclsid  +
call ds:CoCreateInstance  +
mov [ebp-6Ch] esi +
mov [ebp-68h] eax +
test eax eax +
jnz loc_104DBDB  +
mov eax [edi] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+120h]  +
push dword ptr [edi]  +
lea ecx [ebp-74h] +
mov byte ptr [ebp-4] 2 +
call sub_101E2B5  +
cmp byte ptr [ebp+0Ch] 0 +
mov byte ptr [ebp-4] 3 +
jnz loc_104DB48  +
mov eax [ebp-74h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_102C60F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-4] ebx +
mov ecx [ebp-58h] +
lea eax [ebp-6Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-5Ch] ebx +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-58h] +
call sub_101D44D  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-24h] edi +
mov [ebp-20h] ebx +
xor esi esi +
inc esi  +
push offset aCxml_istreamSc  +
lea ecx [ebp-24h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp-14h] +
add ecx 4 +
push ebx  +
call sub_100EB41  +
test al al +
mov eax [ebp+0Ch] +
jz loc_104B291  +
mov ecx [ebp+8] +
mov [eax] bl +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_102E210  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push 1  +
call sub_102C7BE  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
or eax 0FFFFFFFFh +
mov edi ecx +
sub eax [edi+14h] +
cmp eax ebx +
jbe loc_10623C9  +
test ebx ebx +
jbe loc_102C807  +
push esi  +
mov esi [edi+14h] +
push 0  +
add esi ebx +
push esi  +
mov ecx edi +
call sub_100CC42  +
test al al +
jz loc_102C806  +
push [ebp+arg_4]  +
mov ecx edi +
push ebx  +
push dword ptr [edi+14h]  +
call sub_102C814  +
push esi  +
mov ecx edi +
call sub_100CD14  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 1 +
jz loc_102C845  +
cmp dword ptr [ecx+18h] 8 +
jnb loc_104AF96  +
add ecx 4 +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
lea eax [ecx+eax*2] +
push eax  +
call sub_104D786  +
add esp 0Ch +
pop ebp  +
retn 0Ch  +
cmp dword ptr [ecx+18h] 8 +
jnb loc_102C85B  +
add ecx 4 +
mov eax [ebp+arg_0] +
mov dx word ptr [ebp+arg_8] +
mov [ecx+eax*2] dx +
jmp loc_102C841  +
mov ecx [ecx+4] +
jmp loc_102C84E  +
***
call sub_1001F95  +
xor ebx ebx +
mov [ebp-10h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-3Ch] 3 +
mov [ebp-38h] ebx +
xor edi edi +
inc edi  +
push offset aScreaddatafrom  +
lea ecx [ebp-3Ch] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-38h] ebx +
jnz loc_1067102  +
push ebx  +
push 80h  +
push 3  +
push ebx  +
push edi  +
push 80000000h  +
push dword ptr [ebp+0Ch]  +
call ds:CreateFileW  +
mov [ebp-14h] eax +
cmp eax 0FFFFFFFFh +
jz loc_106712C  +
lea ecx [ebp-28h] +
push ecx  +
push eax  +
call ds:GetFileSize  +
mov [ebp-2Ch] eax +
cmp [ebp-28h] ebx +
jnz loc_10671B1  +
cmp eax ebx +
jl loc_10671B1  +
jz loc_102C9F7  +
mov ecx [ebp+10h] +
push ebx  +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_102E7B5  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-38h] ebx +
jnz loc_106713D  +
mov eax [ebp+10h] +
mov [ebp+0Ch] ebx +
mov [ebp-1Ch] bl +
mov [ebp-18h] eax +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 4 +
mov [ebp+10h] ebx +
call sub_102DE75  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-38h] ebx +
jnz loc_1067155  +
push 8007000Eh  +
push dword ptr [ebp+10h]  +
lea eax [ebp-4Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-38h] ebx +
jnz loc_1067179  +
push ebx  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-14h]  +
call ds:ReadFile  +
cmp eax ebx +
jz loc_1067193  +
mov eax [ebp+0Ch] +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
cmp eax [ebp-2Ch] +
jnz loc_106719E  +
call sub_102CA5B  +
push dword ptr [ebp-14h]  +
call ds:CloseHandle  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov [ebp-10h] edi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
cmp al bl +
jnz loc_102C9F7  +
jmp loc_102C94F  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-1Ch] 3 +
mov [ebp-18h] ebx +
push offset aCxmlbinarylo_0  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [esi] bl +
jnz loc_102CAF0  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call sub_102CB28  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-18h] ebx +
jz loc_102CA97  +
jmp loc_1066C9C  +
***
call sub_1001F95  +
mov esi ecx +
xor ecx ecx +
mov [ebp-10h] ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov [ebp-18h] ecx +
mov [ebp-14h] ecx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-20h] edi +
mov [ebp-1Ch] ecx +
xor ebx ebx +
inc ebx  +
push offset aScunlock  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [esi] 0 +
jz loc_1066667  +
mov ecx [esi+4] +
lea eax [ebp-30h] +
push eax  +
call sub_102CBE7  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_1066683  +
mov byte ptr [esi] 0 +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
test al al +
jnz loc_102CBA1  +
jmp loc_102CB9E  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] ebx +
xor edi edi +
inc edi  +
push offset aCxmlbinaryScun  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [esi+8] ebx +
jz loc_106659B  +
mov eax [esi] +
cmp eax ebx +
jz loc_106659B  +
push eax  +
call ds:GlobalUnlock  +
mov ecx [ebp+8] +
dec dword ptr [esi+8]  +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_100C4D0  +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov edi [ebp+8] +
xor ebx ebx +
mov [ebp-60h] ebx +
mov [ebp-5Ch] ebx +
inc dword ptr [eax]  +
mov esi ecx +
mov dword ptr [ebp-68h] 3 +
mov [ebp-64h] ebx +
push offset aCxmlpersistabl  +
lea ecx [ebp-68h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+4] +
push ebx  +
push ecx  +
push ecx  +
mov ecx esp +
add eax 1Ch +
mov dword ptr [ecx] 8 +
mov [ecx+4] eax +
mov [ebp-6Ch] esp +
push ds:off_102CE38  +
mov ecx edi +
call sub_101DF07  +
lea ecx [ebp-80h] +
call sub_100AD56  +
mov eax [esi+4] +
cmp dword ptr [eax+18h] 8 +
mov byte ptr [ebp-4] 1 +
jnb loc_104B552  +
add eax 4 +
push eax  +
lea ecx [ebp-80h] +
call sub_100AE0E  +
lea ecx [ebp-68h] +
mov dword ptr [ebp-68h] 3 +
mov [ebp-64h] eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
cmp eax ebx +
jl loc_1067D34  +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [ebp-80h] +
mov [eax+4] ecx +
mov [ebp-6Ch] esp +
mov dword ptr [eax] 9 +
push ds:off_102CE34  +
mov ecx edi +
call sub_101DF07  +
push dword ptr [ebp-7Ch]  +
mov ecx [esi+4] +
call sub_102B350  +
push ds:off_102CE2C  +
lea ecx [ebp-58h] +
call sub_102D6CF  +
push ds:off_102CE30  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call sub_102D6CF  +
mov byte ptr [ebp-4] 3 +
cmp [edi+0Ch] bl +
jz loc_104CFA5  +
push ds:off_102CE24  +
lea eax [ebp-58h] +
push eax  +
mov ecx edi +
call sub_101EA69  +
push ds:off_102CE28  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call sub_101EA69  +
push edi  +
mov ecx esi +
call sub_102D637  +
cmp [edi+0Ch] bl +
jz loc_102CDEC  +
mov ecx [esi+4] +
lea eax [ebp-54h] +
push eax  +
add ecx 24h +
call sub_101D583  +
mov ecx [esi+4] +
lea eax [ebp-30h] +
push eax  +
add ecx 20h +
call sub_101D583  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call sub_102CE7B  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 1 +
call sub_102CE7B  +
lea ecx [ebp-80h] +
mov [ebp-4] bl +
call sub_100A77D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-68h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_100C50D  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+8] +
call sub_100CD3C  +
lea ecx [esi+4] +
pop esi  +
jmp sub_100EBDB  +
***
call sub_1001F95  +
mov esi ecx +
push 0Dh  +
pop eax  +
push dword ptr [ebp+10h]  +
cmp [ebp+8] eax +
jz loc_106785E  +
lea ecx [ebp+8] +
call sub_102CF00  +
push eax  +
push esi  +
lea ecx [ebp-2Ch] +
call sub_101ECB0  +
and dword ptr [ebp-4] 0 +
push ecx  +
push ecx  +
mov ecx [ebp+8] +
mov eax esp +
mov [eax] ecx +
mov ecx [ebp+0Ch] +
mov [eax+4] ecx +
lea ecx [ebp-2Ch] +
mov [ebp+10h] esp +
call sub_102F021  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call sub_101EB25  +
call sub_1001FCF  +
retn 0Ch  +
***
mov eax [ecx] +
cmp eax 0Eh +
ja loc_102CF5E  +
jmp ds:off_102CF64[eax*4]  +
mov ecx [ecx+4] +
mov eax [ecx] +
jmp dword ptr [eax+8]  +
mov eax ds:off_102CFB8 +
retn   +
mov eax ds:off_102CFC4 +
retn   +
mov eax ds:off_102CFA4 +
retn   +
mov eax ds:off_102CFBC +
retn   +
mov eax ds:off_102CFAC +
retn   +
mov eax ds:off_102CFA0 +
retn   +
mov eax ds:off_102CFC0 +
retn   +
mov eax ds:off_102CFB4 +
retn   +
mov eax ds:off_102CFA8 +
retn   +
mov eax ds:off_102CFCC +
retn   +
mov eax ds:off_102CFB0 +
retn   +
mov eax ds:off_106D908 +
retn   +
mov eax ds:off_102CFC8 +
retn   +
***
mov eax offset aGuid +
retn   +
***
xor ds:byte_10E7237[eax] bh +
call sub_100A60E  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
push 3  +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
inc dword ptr [eax]  +
pop esi  +
mov [ebp-2Ch] esi +
mov [ebp-28h] ebx +
push offset aCxmliconPersis  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+8] +
mov [ebp-18h] ebx +
mov dword ptr [ebp-1Ch] offset off_102D084 +
mov byte ptr [ebp-4] 1 +
cmp [eax+0Ch] bl +
jz loc_104CFE7  +
push dword ptr [ebp+8]  +
lea ecx [ebp-1Ch] +
call sub_102D0BD  +
mov eax [ebp+8] +
cmp [eax+0Ch] bl +
jz loc_102D062  +
push ebx  +
push ebx  +
push dword ptr [ebp-18h]  +
call sub_1041D22  +
push eax  +
lea ecx [edi+4] +
call sub_103E9BF  +
lea ecx [ebp-18h] +
call sub_102F105  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_100C4D0  +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov esi [ebp+8] +
xor ebx ebx +
mov [ebp-0A8h] ebx +
mov [ebp-0A4h] ebx +
inc dword ptr [eax]  +
mov [ebp-0B4h] ecx +
mov dword ptr [ebp-0B0h] 3 +
mov [ebp-0ACh] ebx +
push offset aCxmlimagelistP  +
lea ecx [ebp-0B0h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [ebp-9Ch] +
call sub_102F1DC  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
mov byte ptr [ebp-4] 1 +
cmp [esi+0Ch] bl +
jz loc_104CC95  +
push esi  +
lea ecx [ebp-9Ch] +
call sub_102EEC3  +
cmp [esi+0Ch] bl +
jz loc_102D1DA  +
mov esi [ebp-0B4h] +
add esi 4 +
mov ecx esi +
call sub_102F105  +
mov [ebp-0A0h] ebx +
lea ecx [ebp-0A0h] +
mov byte ptr [ebp-4] 4 +
call sub_100A5E6  +
push eax  +
lea eax [ebp-0C4h] +
push eax  +
lea ecx [ebp-9Ch] +
call sub_102D23B  +
push eax  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-0C4h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-0ACh] ebx +
jnz loc_10688BC  +
push esi  +
push dword ptr [ebp-0A0h]  +
call sub_103C84D  +
mov dword ptr [ebp-0B0h] 3 +
mov [ebp-0ACh] eax +
cmp eax ebx +
jnz loc_10688EB  +
mov eax [ebp-0A0h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_102D1DA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-98h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_102D1ED  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0B0h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_100C50D  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
xor ecx ecx +
mov [ebp-14h] ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-1Ch] ecx +
mov [ebp-18h] ecx +
inc dword ptr [eax]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] ecx +
xor ebx ebx +
inc ebx  +
push offset aCxml_istream_1  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor ecx ecx +
cmp [ebp-20h] ecx +
jnz loc_106708D  +
mov eax [ebp+0Ch] +
mov [eax] ecx +
lea eax [ebp-0Dh] +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call near ptr dword_102C690+5  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp dword ptr [ebp-20h] 0 +
jnz loc_10670B7  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call sub_102D3CB  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp dword ptr [ebp-20h] 0 +
jnz loc_10670D0  +
mov eax [edi+4] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp dword ptr [ebp-20h] 0 +
jnz loc_10670E9  +
mov eax [edi+4] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
test al al +
jz loc_102D2E5  +
jmp loc_102D350  +
test al al +
jz loc_102D310  +
jmp loc_102D350  +
test al al +
jnz loc_102D350  +
jmp loc_102D342  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
inc dword ptr [eax]  +
pop esi  +
mov [ebp-24h] esi +
mov [ebp-20h] ebx +
xor edi edi +
inc edi  +
push offset aCxml_istream_0  +
lea ecx [ebp-24h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp-14h] +
add ecx 4 +
call sub_100A5CF  +
mov edx [eax] +
push ebx  +
push ebx  +
xor ecx ecx +
push ecx  +
push ecx  +
push eax  +
call dword ptr [edx+14h]  +
mov [ebp-24h] esi +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_1066C01  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] edi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
test byte ptr [edi+10h] 1 +
jz loc_101EAB3  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_102C3CF  +
mov byte ptr [ebp-4] 2 +
cmp [ebp-14h] ebx +
jz loc_106784B  +
push ebx  +
lea ecx [ebp-10h] +
call sub_101DDF6  +
lea eax [ebp-10h] +
push eax  +
push ds:off_102D620  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call sub_101E68B  +
mov [ebp-18h] ebx +
cmp [ebp-10h] ebx +
jz loc_102D4E9  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-10h] +
call sub_101DE26  +
mov eax [ebp-18h] +
push dword ptr [ebp+0Ch]  +
mov [ebp-1Ch] eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
push eax  +
push edi  +
lea ecx [ebp-68h] +
call sub_101ECB0  +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov [ebp+0Ch] esp +
mov dword ptr [eax] 8 +
push ds:off_102D61C  +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 4 +
call sub_101DF07  +
push ebx  +
lea eax [ebp-14h] +
push eax  +
push edi  +
lea ecx [ebp-54h] +
call sub_101EB5D  +
push ebx  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 5 +
call sub_101E2B5  +
mov eax [esi] +
mov byte ptr [ebp-4] 6 +
mov ecx esi +
cmp [edi+0Ch] bl +
jz loc_104B37E  +
push dword ptr [ebp-1Ch]  +
call dword ptr [eax+0Ch]  +
push eax  +
push ds:off_102D620  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_101DFF7  +
mov byte ptr [ebp-4] 7 +
push eax  +
lea ecx [ebp+8] +
call sub_101E823  +
mov eax [ebp+0Ch] +
mov byte ptr [ebp-4] 6 +
cmp eax ebx +
jz loc_102D58B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push ebx  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-54h] +
push eax  +
lea ecx [ebp-40h] +
call sub_101EB5D  +
mov byte ptr [ebp-4] 9 +
cmp [edi+0Ch] bl +
jz loc_104E046  +
mov eax [esi] +
lea ecx [ebp-40h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
cmp [edi+0Ch] bl +
jz loc_104B39D  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 6 +
call sub_101EB25  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_102D5DA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 4 +
call sub_101EB25  +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 3 +
call sub_101EB25  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_102D603  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_101EAE0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101EAE0  +
***
call sub_100C4D0  +
push ds:off_102D6B0  +
mov esi [ebp+8] +
mov edi ecx +
lea ecx [ebp-34h] +
call sub_102D6CF  +
and dword ptr [ebp-4] 0 +
cmp byte ptr [esi+0Ch] 0 +
jz loc_104B3CE  +
push ds:off_102D6B4  +
mov ecx esi +
push ds:off_102EAF4  +
call sub_10226DF  +
test al al +
jz loc_102D69B  +
push ds:off_102D6B4  +
lea eax [ebp-34h] +
push eax  +
mov ecx esi +
call sub_101EA69  +
mov ecx [edi+4] +
lea eax [ebp-30h] +
push eax  +
add ecx 28h +
call sub_101D583  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-34h] +
call sub_102CE7B  +
call sub_100C50D  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+4] 0 +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_102D710 +
test eax eax +
jz loc_106734F  +
***
push eax  +
lea ecx [esi+8] +
call sub_102BC13  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov eax 7FFFFFFEh +
sub eax edx +
cmp ecx eax +
ja loc_100CCD1  +
lea esi [edx+ecx] +
jmp loc_100CCD1  +
lea eax [edi+4] +
jmp loc_102D885  +
cmp dword ptr [edi+18h] 8 +
jb loc_102D877  +
mov eax [edi+4] +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [esi+1] +
push eax  +
push ebx  +
call sub_100CE93  +
jmp loc_100CCEC  +
***
mov eax ds:off_102D8A4 +
retn   +
***
mov eax ds:off_102D8B4 +
retn   +
***
mov eax ds:off_102D8E0 +
retn   +
***
push esi  +
lea ecx [edi-64h] +
call sub_102D917  +
jmp loc_101E54E  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
push ds:off_102DA1C  +
lea ecx [ebp-28h] +
push dword ptr [ebp+8]  +
call sub_101ECB0  +
mov [ebp-4] ebx +
cmp [ebp-1Ch] bl +
jz loc_104D2C3  +
push ds:off_102DA20  +
lea ecx [ebp-28h] +
push ds:off_102E540  +
call sub_10226DF  +
test al al +
jz loc_104D2AF  +
mov eax [esi+0D8h] +
cmp eax ebx +
jz loc_102D97A  +
push eax  +
push ds:off_102DA20  +
lea ecx [ebp-28h] +
call sub_102DA4B  +
lea eax [esi+0A8h] +
mov dword ptr [ebp-14h] offset off_102DA0C +
mov [ebp-10h] eax +
cmp [ebp-1Ch] bl +
jz loc_104D29E  +
push ebx  +
push ds:off_102D8A4  +
lea ecx [ebp-28h] +
call sub_10226DF  +
test al al +
jz loc_104D2B9  +
push ebx  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-28h] +
call sub_101EA69  +
cmp [ebp-1Ch] bl +
jz loc_102D9F3  +
call sub_10067E8  +
mov edi eax +
cmp edi ebx +
jz loc_1059D44  +
push 1  +
push ebx  +
push ebx  +
push 1  +
mov ecx esi +
call sub_1021952  +
push eax  +
mov ecx edi +
call sub_100ED64  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov ecx esi +
call sub_1021952  +
push eax  +
mov ecx edi +
call sub_100ED64  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call sub_101EB25  +
call sub_1001FCF  +
retn 4  +
***
call sub_100C4D0  +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov edi [ebp+8] +
mov esi [ebp+0Ch] +
xor ebx ebx +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
inc dword ptr [eax]  +
mov [ebp-30h] ecx +
mov dword ptr [ebp-40h] 3 +
mov [ebp-3Ch] ebx +
push offset aCpersistorPe_2  +
lea ecx [ebp-40h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push edi  +
push ds:off_102E540  +
mov edi [ebp-30h] +
push edi  +
lea ecx [ebp-60h] +
call sub_101ECB0  +
mov byte ptr [ebp-4] 1 +
cmp [ebp-54h] bl +
jz loc_104E078  +
push 0FFFFFFFFh  +
lea ecx [esi+0Ch] +
lea edi [esi+8] +
or dword ptr [edi] 0FFFFFFFFh +
push ebx  +
mov [ebp-30h] ecx +
call sub_1011BBD  +
xor ecx ecx +
inc ecx  +
push ecx  +
push ecx  +
push ecx  +
mov eax esp +
mov [eax] ecx +
mov [ebp-48h] esp +
mov [eax+4] edi +
push ds:off_102DC34  +
lea ecx [ebp-60h] +
call sub_101DF07  +
cmp dword ptr [edi] 0FFFFFFFFh +
jz loc_106790E  +
add esi 4 +
push 80070057h  +
mov [ebp-48h] esi +
mov esi [esi] +
push esi  +
lea eax [ebp-70h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-3Ch] ebx +
jnz loc_1067890  +
mov ecx [ebp-48h] +
mov [ebp-44h] ebx +
call sub_100A5CF  +
mov ecx [eax] +
push ebx  +
lea edx [ebp-44h] +
push edx  +
push dword ptr [edi]  +
push eax  +
call dword ptr [ecx+14h]  +
mov dword ptr [ebp-40h] 3 +
mov [ebp-3Ch] eax +
cmp eax ebx +
jnz loc_10678B6  +
inc dword ptr [ebp-44h]  +
mov eax [ebp-44h] +
push offset unk_10F56E1  +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_103C2DA  +
pop ecx  +
pop ecx  +
mov [ebp-4Ch] eax +
push 8007000Eh  +
push eax  +
lea eax [ebp-70h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-3Ch] ebx +
jnz loc_10678CF  +
mov ecx [ebp-48h] +
call sub_100A5CF  +
mov ecx [eax] +
push ebx  +
push ebx  +
push dword ptr [ebp-4Ch]  +
push dword ptr [ebp-44h]  +
push dword ptr [edi]  +
push eax  +
call dword ptr [ecx+10h]  +
mov dword ptr [ebp-40h] 3 +
mov [ebp-3Ch] eax +
cmp eax ebx +
jnz loc_10678F5  +
push dword ptr [ebp-4Ch]  +
mov ecx [ebp-30h] +
call sub_102B350  +
push dword ptr [ebp-4Ch]  +
call ??3@YAXPAX@Z  +
pop ecx  +
lea ecx [ebp-60h] +
mov [ebp-4] bl +
call sub_101EB25  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_100C50D  +
retn 8  +
***
call sub_1001F95  +
xor ebx ebx +
mov [ebp-14h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-40h] edi +
mov [ebp-3Ch] ebx +
xor esi esi +
inc esi  +
push offset aCconsolefile_1  +
lea ecx [ebp-40h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
lea eax [ebp-30h] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-24h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_102C865  +
push eax  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-3Ch] ebx +
jnz loc_106728A  +
mov [ebp-10h] ebx +
mov eax [ebp-30h] +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 4 +
mov [ebp+10h] eax +
call sub_100A5E6  +
push eax  +
push esi  +
push dword ptr [ebp+10h]  +
call ds:CreateStreamOnHGlobal  +
mov [ebp-40h] edi +
mov [ebp-3Ch] eax +
cmp eax ebx +
jnz loc_10672B6  +
mov eax [ebp-2Ch] +
push 8000FFFFh  +
push dword ptr [ebp-10h]  +
mov [ebp-1Ch] eax +
lea eax [ebp-60h] +
push eax  +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-3Ch] ebx +
jnz loc_10672D6  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov edx [eax] +
xor ecx ecx +
push ecx  +
push dword ptr [ebp-1Ch]  +
push eax  +
call dword ptr [edx+18h]  +
mov [ebp-40h] edi +
mov [ebp-3Ch] eax +
cmp eax ebx +
jnz loc_10672EF  +
push dword ptr [ebp+14h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp-10h]  +
lea eax [ebp-50h] +
push eax  +
call sub_102E93B  +
mov byte ptr [ebp-4] 6 +
cmp [ebp-4Ch] ebx +
jnz loc_10672FC  +
lea eax [ebp-40h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-50h] +
mov [ebp-14h] esi +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_102DD9A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call sub_102DE27  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
lea eax [ebp-20h] +
push eax  +
call sub_102E8A5  +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_102DE63  +
call sub_1001FCF  +
retn   +
***
mov eax [ecx] +
xor edx edx +
mov [ecx] edx +
mov [ecx+4] edx +
mov [ecx+8] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+var_4] 0 +
push [ebp+arg_0]  +
call sub_102DE96  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
xor ecx ecx +
mov [ebp-10h] ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov [ebp-18h] ecx +
mov [ebp-14h] ecx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-20h] edi +
mov [ebp-1Ch] ecx +
xor ebx ebx +
inc ebx  +
push offset aCxmlbinarylock  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [esi] 0 +
jnz loc_1066CC2  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
lea eax [ebp-30h] +
push eax  +
call sub_102DF7F  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_1066CDE  +
mov [esi] bl +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
test al al +
jnz loc_102DF11  +
jmp loc_102DF0F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+var_4] 0 +
push [ebp+arg_0]  +
call sub_102DFA0  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
inc dword ptr [eax]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] edi +
xor ebx ebx +
inc ebx  +
push offset aCxmlbinarySclo  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] edi +
jnz loc_106661C  +
mov eax [ebp+0Ch] +
mov [eax] edi +
mov eax [esi] +
cmp eax edi +
jz loc_1066646  +
push eax  +
call ds:GlobalLock  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
cmp eax edi +
jz loc_1066659  +
inc dword ptr [esi+8]  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov eax ds:off_102E188 +
retn   +
***
mov eax ds:off_102E1AC +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102E1E3  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_102E1EF  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_0]  +
call sub_102E210  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push ebx  +
mov esi ecx +
call sub_101D168  +
test al al +
jnz loc_10623A0  +
or eax 0FFFFFFFFh +
sub eax [esi+14h] +
cmp eax [ebp+arg_4] +
jbe loc_10623C3  +
cmp [ebp+arg_4] 0 +
jbe loc_102E27B  +
push edi  +
mov edi [esi+14h] +
add edi [ebp+arg_4] +
push 0  +
push edi  +
mov ecx esi +
call sub_100CC42  +
test al al +
jz loc_102E27A  +
mov eax [esi+18h] +
cmp eax 8 +
jb loc_102E283  +
mov edx [esi+4] +
push [ebp+arg_4]  +
mov ecx [esi+14h] +
push ebx  +
sub eax ecx +
push eax  +
lea eax [edx+ecx*2] +
push eax  +
call sub_100CE93  +
push edi  +
mov ecx esi +
call sub_100CD14  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
lea edx [esi+4] +
jmp loc_102E25F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0  +
push ecx  +
push ecx  +
mov esi ecx +
mov eax esp +
xor edi edi +
lea ecx [esi+20h] +
inc edi  +
mov [eax+4] ecx +
mov ecx [ebp+8] +
mov [eax] edi +
push ds:off_102DC34  +
call sub_101DF07  +
push 0  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [esi+24h] +
mov [eax+4] ecx +
mov ecx [ebp+8] +
mov [eax] edi +
push ds:off_102E2F0  +
call sub_101DF07  +
push ecx  +
push ecx  +
mov ecx [ebp+8] +
mov eax esp +
add esi 4 +
mov dword ptr [eax] 0Ah +
mov [eax+4] esi +
call sub_102F021  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
dec eax  +
mov eax offset word_10E271A +
call sub_1001F95  +
mov [ebp-18h] ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-44h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmasterstrin_0  +
lea ecx [ebp-44h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax dword_10F5304 +
mov edi 8000FFFFh +
push edi  +
push eax  +
mov [ebp-20h] eax +
lea eax [ebp-54h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-54h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1063290  +
mov eax [ebp-20h] +
mov eax [eax+0E0h] +
push edi  +
push eax  +
mov [ebp-20h] eax +
lea eax [ebp-54h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-54h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10632A5  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_102E4B7  +
mov edi [ebp-1Ch] +
mov byte ptr [ebp-4] 4 +
test edi edi +
jz loc_10632B4  +
and dword ptr [ebp-30h] 0 +
mov esi offset off_1012454 +
mov [ebp-34h] esi +
push offset rguid  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 5 +
call sub_1012593  +
push eax  +
lea ecx [ebp-44h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10632E8  +
mov eax [ebp-18h] +
mov eax [eax+58h] +
mov ecx [eax] +
mov [ebp-10h] ecx +
cmp ecx eax +
jnz loc_104D7CF  +
mov ecx [ebp+8] +
lea eax [ebp-44h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 4 +
mov [ebp-34h] esi +
call sub_10123F1  +
mov eax [edi] +
push edi  +
mov [ebp-4] bl +
call dword ptr [eax+8]  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_102E4D8  +
push eax  +
call sub_102E4E4  +
test eax eax +
jl loc_1062DCD  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_1062CBA  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_102E524  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jl loc_1062CB3  +
push [ebp+arg_0]  +
call sub_100CA34  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ds:off_102E540 +
retn   +
***
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0  +
push ecx  +
push ecx  +
mov esi ecx +
mov eax esp +
xor edi edi +
lea ecx [esi+1Ch] +
inc edi  +
mov [eax+4] ecx +
mov ecx [ebp+8] +
mov [eax] edi +
push ds:off_102E5F4  +
call sub_101DF07  +
push 0  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [esi+20h] +
mov [eax+4] ecx +
mov ecx [ebp+8] +
mov [eax] edi +
push ds:off_102E5F0  +
call sub_101DF07  +
push 0  +
push ecx  +
push ecx  +
mov ecx [ebp+8] +
mov eax esp +
add esi 24h +
mov [eax] edi +
mov [eax+4] esi +
push ds:off_102E5F8  +
call sub_101DF07  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_102E64E  +
cmp byte ptr [edi+0Ch] 0 +
jz loc_102E643  +
mov eax [esi+20h] +
mov ecx [eax] +
push eax  +
push ecx  +
mov ecx esi +
call sub_103BE28  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
cmp byte ptr [ebx+0Ch] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_104CC69  +
mov ecx [edi+4] +
call sub_1012BED  +
push ebx  +
mov ecx edi +
call sub_103BA08  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
adc eax offset ??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10633E7  +
push ebx  +
mov ebx [ebp+8] +
lea edi [esi+24h] +
push edi  +
mov ecx ebx +
call sub_101EA69  +
push ebx  +
push edi  +
lea ecx [esi+4Ch] +
call sub_102E76D  +
cmp byte ptr [ebx+0Ch] 0 +
jz loc_102E71A  +
mov ecx [ebp-10h] +
lea eax [ebp-30h] +
push eax  +
call sub_103C633  +
lea ecx [ebp-30h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push 0  +
mov [ecx+10h] eax +
push ecx  +
mov ecx [ebp+arg_4] +
call sub_101EA69  +
pop ebp  +
retn 8  +
***
mov eax ds:off_102E794 +
retn   +
***
call sub_1001F95  +
mov esi ecx +
xor ecx ecx +
mov [ebp-10h] ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov [ebp-18h] ecx +
mov [ebp-14h] ecx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-20h] edi +
mov [ebp-1Ch] ecx +
xor ebx ebx +
inc ebx  +
push offset aCxmlbinaryScal  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1066C44  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_102E8A5  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_1066C60  +
cmp byte ptr [ebp+10h] 0 +
push 2  +
pop eax  +
jnz loc_1066C86  +
mov edi [ebp+0Ch] +
push edi  +
push eax  +
call ds:GlobalAlloc  +
mov [esi] eax +
test eax eax +
jz loc_1066C8E  +
mov [esi+4] edi +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov esi [ebp+8] +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
inc dword ptr [eax]  +
mov dword ptr [esi] 3 +
mov [esi+4] ebx +
push offset aCxmlbinaryScfr  +
mov ecx esi +
mov [ebp-4] ebx +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [edi+8] ebx +
jnz loc_10665BB  +
mov eax [edi] +
cmp eax ebx +
jnz loc_1066610  +
mov [edi] ebx +
mov [edi+4] ebx +
mov [edi+8] ebx +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-14h] edi +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-1Ch] edi +
mov [ebp-18h] edi +
inc dword ptr [eax]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] edi +
xor ebx ebx +
inc ebx  +
push offset aCxmldocument_0  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] edi +
jnz loc_106720E  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-10h] +
call sub_102EA6B  +
push 8000FFFFh  +
push dword ptr [ebp-10h]  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] edi +
jnz loc_106723B  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov ecx ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
inc dword ptr [ecx]  +
mov dword ptr [ebp-34h] 3 +
mov [ebp-30h] eax +
mov byte ptr [ebp-4] 5 +
cmp eax edi +
jnz loc_1067268  +
lea eax [ebp-24h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax edi +
jz loc_102EA4E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_102EA8C  +
push eax  +
call sub_102EA98  +
test eax eax +
jl loc_10671DC  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_10671CB  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset loc_102EAD8  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jl loc_10671C4  +
push [ebp+arg_0]  +
call sub_100CA34  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
and byte ptr [ebx] 0D5h +
jg near ptr loc_102EAE1+3  +
dec esi  +
sbb edx [eax] +
scas   +
sub eax 2E2B0008h +
mov dword ptr [ebx] 90909090h +
nop   +
mov eax ds:off_102EAF4 +
retn   +
***
call sub_100C4D0  +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
xor ebx ebx +
mov [ebp-220h] ebx +
mov [ebp-21Ch] eax +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-22Ch] ebx +
mov [ebp-228h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-234h] 3 +
mov [ebp-230h] ebx +
xor esi esi +
inc esi  +
push offset aCconsolefilepe  +
lea ecx [ebp-234h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 0FFFFFFFFh  +
push ebx  +
mov ecx edi +
call sub_1011BBD  +
mov eax ds:?s_hWnd@SC@mmcerror@@0PAUHWND__@@A +
push dword ptr [eax]  +
call ds:IsWindowVisible  +
test eax eax +
jnz loc_104B325  +
mov [ebp-224h] ebx +
xor eax eax +
push 206h  +
mov [ebp-218h] ax +
lea eax [ebp-216h] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
push esi  +
push 1Ah  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [ebp-224h]  +
call SHGetSpecialFolderPathW  +
cmp eax ebx +
jz loc_106742A  +
lea eax [ebp-218h] +
push eax  +
mov ecx edi +
call sub_102B350  +
push 5Ch  +
mov ecx edi +
call sub_102C7A0  +
push ds:off_102EC24  +
mov ecx edi +
call sub_102E1C7  +
mov ecx [ebp-21Ch] +
lea eax [ebp-234h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-234h] +
mov [ebp-220h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-21Ch] +
call sub_100C50D  +
retn 8  +
***
call sub_1001F95  +
xor ebx ebx +
mov [ebp-14h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] ebx +
push offset aCconsolefile_2  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi 80070057h +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] ebx +
jnz loc_1067456  +
mov ecx [ebp+10h] +
push 0FFFFFFFFh  +
push ebx  +
call sub_1011BBD  +
push 5Ch  +
push dword ptr [ebp+0Ch]  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
mov [ebp-10h] eax +
cmp eax ebx +
jz loc_1067480  +
add dword ptr [ebp-10h] 2 +
mov eax [ebp-10h] +
movzx eax word ptr [eax] +
cmp ax bx +
jz loc_10674A3  +
push eax  +
call ds:iswspace  +
pop ecx  +
test eax eax +
jnz loc_106748B  +
mov eax [ebp-10h] +
cmp [eax] bx +
jz loc_10674A3  +
mov edi [ebp+10h] +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_102EB09  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] ebx +
jnz loc_10674B2  +
cmp dword ptr [edi+18h] 8 +
lea esi [edi+4] +
jb loc_102EE55  +
mov eax [esi] +
push eax  +
call ds:GetFileAttributesW  +
test al 10h +
jz loc_10674CA  +
cmp eax 0FFFFFFFFh +
jz loc_10674CA  +
mov eax [ebp-10h] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_102EDC2  +
mov ecx ds:off_102EE5C +
sub eax edx +
sar eax 1 +
mov edi eax +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_102EDDD  +
sub eax esi +
sar eax 1 +
cmp edi eax +
jle loc_102EE0A  +
mov esi edi +
sub esi eax +
mov eax [ebp-10h] +
lea eax [eax+esi*2] +
push eax  +
push ecx  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_102EE0A  +
lea edi [esi+1] +
mov ecx [ebp+10h] +
push 5Ch  +
call sub_102C7A0  +
mov ecx [ebp+10h] +
push edi  +
push dword ptr [ebp-10h]  +
call sub_102C74F  +
lea eax [ebp-24h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-14h] 1 +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
cmp al bl +
jz loc_102ED95  +
jmp loc_102EE20  +
mov eax esi +
jmp loc_102EDA4  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
xor ebx ebx +
mov [ebp-6Ch] eax +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov edi ecx +
mov [ebp-60h] ebx +
mov [ebp-5Ch] ebx +
inc dword ptr [eax]  +
pop esi  +
mov [ebp-70h] edi +
mov [ebp-68h] esi +
mov [ebp-64h] ebx +
push offset aCxml_istreamPe  +
lea ecx [ebp-68h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp-6Ch] +
cmp [ecx+0Ch] bl +
jz loc_104DE70  +
mov [ebp-80h] ebx +
mov [ebp-7Ch] ebx +
mov [ebp-78h] ebx +
push ecx  +
push ecx  +
mov eax esp +
lea edx [ebp-80h] +
mov byte ptr [ebp-4] 4 +
mov [ebp-90h] esp +
mov dword ptr [eax] 0Dh +
mov [eax+4] edx +
call sub_102F021  +
mov eax [ebp-7Ch] +
mov [ebp-94h] eax +
mov eax [ebp-80h] +
add edi 4 +
mov ecx edi +
mov [ebp-6Ch] eax +
call sub_100A5E6  +
push eax  +
push 1  +
push dword ptr [ebp-6Ch]  +
call ds:CreateStreamOnHGlobal  +
mov [ebp-68h] esi +
mov [ebp-64h] eax +
cmp eax ebx +
jnz loc_106763C  +
mov ecx edi +
mov [ebp-80h] ebx +
mov [ebp-7Ch] ebx +
mov [ebp-78h] ebx +
call sub_100A5CF  +
mov edx [eax] +
xor ecx ecx +
push ecx  +
push dword ptr [ebp-94h]  +
push eax  +
call dword ptr [edx+18h]  +
mov [ebp-68h] esi +
mov [ebp-64h] eax +
cmp eax ebx +
jnz loc_1067655  +
mov ecx [ebp-70h] +
lea eax [ebp-0ACh] +
push eax  +
call sub_102D3CB  +
push eax  +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-0ACh] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-64h] ebx +
jnz loc_106766E  +
lea ecx [ebp-80h] +
mov [ebp-4] bl +
call sub_102DE27  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-68h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_100C50D  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] ebx +
push offset aCpersistorPe_1  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-10h] ebx +
cmp [esi+0Ch] bl +
jz loc_104D94A  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_103B3E5  +
push dword ptr [ebp-10h]  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp+8] +
call sub_1021DBA  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] ebx +
jnz loc_1067566  +
push dword ptr [ebp-10h]  +
call SysFreeString  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_103B745  +
push eax  +
call sub_102F128  +
test eax eax +
jz loc_102F121  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
call sub_100A4F0  +
xor edi edi +
mov [ebp-1Ch] edi +
mov esi dword_10F53DC +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_102F157  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_102F179  +
mov [ebp-4] edi +
cmp esi edi +
jz loc_103B694  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_102F1A9  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 4  +
***
cmp dword_10F6C64 edi +
jnz locret_102F1D6  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jnz loc_106809D  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jnz loc_10680AA  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_102F210 +
and dword ptr [esi+4] 0 +
and dword ptr [ebp-4] 0 +
lea ecx [esi+8] +
call near ptr dword_102C76C+2  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+4] ecx +
mov [eax] ecx +
mov [eax+10h] ecx +
mov ecx [ebp+arg_0] +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_100B7D0 +
call sub_102F30F  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_102F329  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_1020710  +
test eax eax +
jz loc_102F338  +
mov [eax] eax +
lea ecx [eax+4] +
test ecx ecx +
jz locret_102F341  +
mov [ecx] eax +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
push 18h  +
mov esi ecx +
call sub_100ABF0  +
test eax eax +
jz loc_102F3DE  +
push 0Ah  +
mov ecx eax +
call sub_102F296  +
mov [esi+4] eax +
mov eax [ebp+8] +
mov [esi+0Ch] eax +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
xor eax eax +
jmp loc_102F3CD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
setnz al  +
cmp dword ptr [ecx+40h] 0 +
setnz dl  +
cmp al dl +
jnz loc_105F2E1  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
mov ecx [ecx+4] +
call sub_102F4F4  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov eax dword_10F53F0 +
test eax eax +
jz loc_104198A  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_106A84F  +
pop ebp  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 0  +
call ds:DeactivateActCtx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
and edi 1 +
cmp edi [ecx+20h] +
jz loc_102F4CB  +
mov eax [ecx+4] +
test eax eax +
jz loc_102F4CB  +
push esi  +
mov [ecx+20h] edi +
mov esi [eax] +
test esi esi +
jz loc_102F4CA  +
mov eax esi +
mov ecx [eax+8] +
mov esi [esi] +
test ecx ecx +
jz loc_102F4B0  +
mov eax [ecx] +
push edi  +
call dword ptr [eax+0C8h]  +
jmp loc_102F4B0  +
***
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
mov ecx [ecx+4] +
call sub_102F4F4  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
push dword ptr [esi+4]  +
call sub_102F526  +
mov ecx [ebp+arg_0] +
mov [eax+8] ecx +
mov ecx [esi+4] +
test ecx ecx +
jnz loc_105F370  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
push edi  +
jnz loc_102F565  +
push 0Ch  +
push dword ptr [esi+14h]  +
lea eax [esi+10h] +
push eax  +
call ?Create@CPlex@@SGPAU1@AAPAU1@II@Z  +
mov ecx [esi+14h] +
mov edx ecx +
imul edx edx +
add eax 4 +
dec ecx  +
lea eax [eax+edx-0Ch] +
js loc_102F565  +
mov edx [esi+0Ch] +
mov [eax] edx +
mov [esi+0Ch] eax +
dec ecx  +
sub eax 0Ch +
test ecx ecx +
jge loc_102F555  +
mov ecx [esi+0Ch] +
mov eax [ecx] +
mov [esi+0Ch] eax +
mov eax [ebp+arg_0] +
mov [ecx+4] eax +
mov eax [ebp+arg_4] +
mov [ecx] eax +
inc dword ptr [esi+8]  +
xor eax eax +
lea edi [ecx+8] +
stos   +
pop edi  +
mov eax ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi] 0 +
cmp Destination 0FFFFFFFFh +
jz loc_106A86A  +
push esi  +
push Destination  +
call sub_102F5BD  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
push eax  +
push [ebp+arg_0]  +
call ds:ActivateActCtx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_100BC58 +
call sub_102F30F  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 18h  +
mov dword ptr [esi] offset off_100BBA8 +
call sub_100ABF0  +
test eax eax +
jz loc_102F62C  +
push 0Ah  +
mov ecx eax +
call sub_102F296  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
xor eax eax +
jmp loc_102F621  +
***
mov eax esi +
pop esi  +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_100BC00 +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+4] ecx +
mov [eax+0Ch] ecx +
mov [eax+20h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_C] +
mov eax ecx +
push esi  +
mov esi [ebp+arg_0] +
mov [eax+8] edx +
mov edx [ebp+arg_8] +
push edi  +
xor ecx ecx +
mov dword ptr [eax] offset off_100B7EC +
mov [eax+4] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
shl edx 2 +
mov [eax+14h] edx +
mov edx [ebp+arg_4] +
lea edi [eax+18h] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
mov [eax+28h] edx +
mov [eax+2Ch] ecx +
mov [eax+30h] cl +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
push [ebp+arg_C]  +
add eax 3 +
push eax  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_102F677  +
mov dword ptr [esi] offset off_102F6F0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+0F4h] 0 +
jnz loc_102F75C  +
mov eax [ebp+arg_0] +
mov [ecx+11Ch] eax +
pop ebp  +
retn 4  +
***
push edx  +
push edx  +
push ebx  +
call LoadLibraryExA  +
mov edi eax +
mov [ebp+8] edi +
test edi edi +
jz loc_1064E6B  +
push 0  +
push edi  +
push esi  +
call InterlockedCompareExchange  +
mov esi eax +
test esi esi +
jnz loc_1064E5D  +
push 8  +
pop ecx  +
lea edi [ebp-28h] +
stos   +
mov eax [ebp+8] +
mov [ebp-14h] eax +
mov eax ds:dword_102F7C0 +
mov dword ptr [ebp-2Ch] 24h +
mov [ebp-20h] ebx +
test eax eax +
jz loc_100A91D  +
jmp loc_1064E50  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?LoadFrame@CMDIFrameWnd@@UAEHIKPAVCWnd@@PAUCCreateContext@@@Z  +
test eax eax +
jz loc_102F837  +
lea eax [esi+0B0h] +
push eax  +
lea ecx [esi+16Ch] +
call ??4CString@@QAEABV0@ABV0@@Z  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov eax offset aUnknownSnapin +
jmp loc_100B6F5  +
mov dword ptr [esi+44h] offset aUnknownMethod +
jmp loc_100B6CC  +
mov dword ptr [esi+48h] offset aUnknownInterfa +
jmp loc_100B6DD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102F8EA  +
test eax eax +
setnz al  +
mov [esi] al +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor bl bl +
call sub_102F90C  +
test al al +
jnz loc_1057A2A  +
movzx eax bl +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_102F91C  +
mov al byte_10F985F +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp byte_10F985E 0 +
jnz locret_102F9CA  +
push ebx  +
push esi  +
push edi  +
xor eax eax +
mov esi offset word_10F62B0 +
push esi  +
push eax  +
push eax  +
push 25h  +
push eax  +
mov word_10F66B0 ax +
mov word_10F62B0 ax +
call SHGetFolderPathW  +
mov eax lpDst +
mov edi offset lpDst +
mov ebx offset dword_102F7D0 +
cmp eax edi +
jz loc_102F96E  +
cmp byte ptr [eax+19h] 4 +
jnb loc_10578D5  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_10578E9  +
push offset ProcName  +
push eax  +
call ds:__imp_GetProcAddress  +
test eax eax +
jz loc_105791C  +
mov esi 200h +
push esi  +
push offset word_10F66B0  +
call eax  +
mov [ebp+var_4] eax +
call ds:__imp_GetLastError  +
cmp eax 78h +
jnz loc_1057962  +
mov eax lpDst +
cmp eax edi +
jz loc_102F9C7  +
cmp byte ptr [eax+19h] 2 +
jnb loc_105795D  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
mov dword ptr [esi] offset off_102FB84 +
mov eax esi +
pop esi  +
retn   +
***
mov [esi+15Ch] eax +
cmp eax ebx +
jnz loc_102FD4C  +
call ds:__imp_GetLastError  +
push 18h  +
call sub_100ABF0  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_102FD8C  +
push esi  +
call sub_103A868  +
mov [esi+154h] eax +
or edi 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov [ebp-4] edi +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
xor eax eax +
jmp loc_102FD66  +
***
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov edi ecx +
push dword ptr [ebp+14h]  +
mov esi [ebp+8] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_10300E9  +
test eax eax +
jz loc_10300D5  +
push 58h  +
mov [edi+94h] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+10h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_10300DD  +
mov ecx eax +
call sub_103799E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp+14h] eax +
lea eax [ebp+14h] +
lea esi [edi+80h] +
push eax  +
mov ecx esi +
call sub_103A1E9  +
mov ecx [ebp+14h] +
test ecx ecx +
jnz loc_1060D58  +
mov ecx [esi] +
mov eax [ecx] +
push 0  +
push 2001h  +
push edi  +
push offset unk_10F5720  +
push 4000001Bh  +
push 0  +
push 0  +
call dword ptr [eax+5Ch]  +
mov ecx [esi] +
push edi  +
call sub_10379E3  +
push 64h  +
lea eax [ebp-70h] +
push 0  +
push eax  +
call memset  +
mov eax [esi] +
mov ecx [edi+9Ch] +
mov dword ptr [ebp-70h] 64h +
mov dword ptr [ebp-6Ch] 111h +
mov dword ptr [ebp-68h] 0Ah +
mov eax [eax+20h] +
mov [ebp-50h] eax +
add esp 0Ch +
lea eax [ebp-70h] +
push eax  +
mov dword ptr [ebp-3Ch] 2001h +
call sub_1039E63  +
mov ecx edi +
call sub_103A234  +
mov ecx [esi] +
push 0  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
xor eax eax +
inc eax  +
call sub_1001FCF  +
retn 10h  +
***
xor eax eax +
jmp loc_1030037  +
***
call sub_1001F95  +
mov esi ecx +
mov eax [ebp+10h] +
xor edi edi +
push edi  +
push dword ptr [ebp+14h]  +
or eax 1000h +
push dword ptr [ebp+0Ch]  +
push offset unk_10F5720  +
push eax  +
push edi  +
call sub_10301AA  +
test eax eax +
jz loc_103019D  +
push edi  +
push 30001h  +
push 127h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
push edi  +
lea ecx [ebp+14h] +
call ??0CString@@QAE@PBG@Z  +
push edi  +
push edi  +
push edi  +
mov ebx 5404h +
push ebx  +
lea eax [ebp+14h] +
push eax  +
push edi  +
mov ecx esi +
mov [ebp-4] edi +
call sub_101016B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+14h] +
call ??1CString@@QAE@XZ  +
push 31h  +
mov dword ptr [ebp-2Ch] 20h +
mov dword ptr [ebp-28h] 44h +
mov byte ptr [ebp-1Ch] 8 +
call ds:GetSystemMetrics  +
mov [ebp-1Ah] ax +
lea eax [ebp-2Ch] +
push eax  +
push ebx  +
mov ecx esi +
call sub_1037A02  +
mov ecx esi +
call sub_1037A2A  +
mov eax [ebp+0Ch] +
add eax 44h +
mov [esi+9Ch] eax +
xor eax eax +
inc eax  +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
xor ebx ebx +
mov esi ecx +
test edi edi +
jz loc_103022B  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_8] 8 +
mov [ebp+var_4] 4 +
call sub_1030259  +
test eax eax +
jz loc_103022B  +
mov eax [ebp+arg_4] +
push ebx  +
push [ebp+arg_10]  +
or eax 46000844h +
push edi  +
push [ebp+arg_8]  +
mov ecx esi +
push eax  +
push [ebp+arg_0]  +
push offset aToolbarwindow3  +
push 84h  +
call ?CreateEx@CWnd@@QAEHKPBG0KABUtagRECT@@PAV1@IPAX@Z  +
test eax eax +
jz loc_103022B  +
mov ecx esi +
inc ebx  +
call ?GetExStyle@CWnd@@QBEKXZ  +
shr eax 16h +
and al 1 +
push 14h  +
mov ecx esi +
mov [esi+50h] al +
call sub_1037839  +
push 1  +
mov ecx esi +
call sub_103785A  +
add edi 44h +
mov [esi+48h] edi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 18h  +
***
call sub_100A4F0  +
xor edi edi +
mov [ebp-1Ch] edi +
mov esi dword_10F5354 +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_1030288  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_10302AA  +
mov [ebp-4] edi +
cmp esi edi +
jz loc_103F32C  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10302D9  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 4  +
***
cmp dword_10F6C64 edi +
jnz locret_1030306  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jnz loc_105ED92  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jnz loc_105ED9F  +
retn   +
***
mov dword ptr [edi] offset off_100BFB8 +
mov [esi+68h] ebx +
mov [esi+6Ch] ebx +
push ebx  +
lea ecx [esi+70h] +
mov byte ptr [ebp-4] 3 +
call sub_1030363  +
mov [esi+64h] bl +
mov [esi+65h] bl +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_105EE63  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push esi  +
push edi  +
xor esi esi +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
mov edi eax +
test edi edi +
jz loc_1030553  +
push offset off_100A418  +
mov ecx edi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_1030553  +
push esi  +
push offset off_10F6CCC  +
push offset off_10F6C88  +
push esi  +
push 0E900h  +
mov ecx edi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
push eax  +
call __RTDynamicCast  +
mov esi eax +
add esp 14h +
test esi esi +
jz loc_1030553  +
push offset off_102F270  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_105A31D  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset off_102F270 +
retn   +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_1010F2D  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_102F2F3  +
mov dword ptr [esi] offset off_1030590 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_102F2F3  +
mov dword ptr [esi] offset off_10305CC +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:CreateFontIndirectW  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_103062C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
push ebx  +
push esi  +
mov esi [ebp+18h] +
push edi  +
xor edi edi +
mov ebx ecx +
cmp esi edi +
jnz loc_1030735  +
call ?AfxGetThread@@YGPAVCWinThread@@XZ  +
cmp eax edi +
jz loc_1030843  +
push edi  +
push offset off_10F720C  +
push offset off_10F6C88  +
push edi  +
push dword ptr [eax+20h]  +
call __RTDynamicCast  +
mov esi eax +
add esp 14h +
cmp esi edi +
jz loc_1030843  +
mov eax [ebp+8] +
mov [ebp-3Ch] eax +
mov eax [ebp+0Ch] +
mov [ebp-40h] eax +
mov eax [ebp+10h] +
mov [ebp-38h] edi +
mov [ebp-44h] eax +
call sub_101125C  +
mov edi eax +
lea eax [ebp-10h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetClientRect  +
mov eax [ebp-8] +
sub eax [ebp-10h] +
push 6  +
imul eax eax +
cdq   +
pop ecx  +
idiv  ecx +
mov ecx [ebp+14h] +
mov edx [ecx] +
mov [ebp-48h] edx +
mov edx [ecx+4] +
mov [ebp-4Ch] edx +
cmp eax edi +
mov [ebp-50h] eax +
jle loc_105EB8C  +
mov eax [ecx+0Ch] +
sub eax edx +
mov [ebp-54h] eax +
mov eax [esi+20h] +
and dword ptr [ebp-5Ch] 0 +
mov [ebp-58h] eax +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
mov [ebp-60h] eax +
mov eax [ebp+1Ch] +
lea ecx [ebp-64h] +
mov [ebp-64h] eax +
mov eax [ebx] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+64h]  +
test eax eax +
jz loc_105EB94  +
mov eax [ebp-3Ch] +
mov [ebp-34h] eax +
mov eax [ebp-40h] +
mov [ebp-30h] eax +
mov eax [ebp-60h] +
mov [ebp-2Ch] eax +
mov eax [ebp-48h] +
mov [ebp-28h] eax +
mov eax [ebp-4Ch] +
mov [ebp-24h] eax +
mov eax [ebp-50h] +
mov [ebp-20h] eax +
mov eax [ebp-54h] +
mov [ebp-1Ch] eax +
mov eax [ebp-44h] +
and eax 0EEFFFFFFh +
mov [ebp-18h] eax +
mov eax [ebp-64h] +
push ebx  +
mov [ebp-14h] eax +
call ?AfxHookWindowCreate@@YGXPAVCWnd@@@Z  +
mov edi ds:SendMessageW +
lea eax [ebp-34h] +
push eax  +
push 0  +
push 220h  +
push dword ptr [esi+0C0h]  +
call edi  +
mov [ebp+18h] eax +
call ?AfxUnhookWindowCreate@@YGHXZ  +
test eax eax +
jz loc_105EBA3  +
cmp dword ptr [ebp+18h] 0 +
jz loc_1030843  +
test dword ptr [ebp-44h] 10000000h +
jnz loc_105EBB2  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
xor eax eax +
jmp loc_103083C  +
***
cmp eax offset ??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105EC39  +
mov ecx [ebx] +
push esi  +
push dword ptr [ebp+8]  +
lea eax [ebp-34h] +
push eax  +
call sub_103207E  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105EC6A  +
mov edi [ebp-10h] +
lea ecx [edi+44h] +
call sub_100A5CF  +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+7Ch]  +
push 3  +
push esi  +
call sub_1033CDF  +
mov ecx esi +
call sub_1011496  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
push 0A8h  +
mov eax offset dword_10D945C +
call sub_100C4D0  +
mov edi [ebp+8] +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-98h] +
mov [ebp-0A0h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewOncrea  +
lea ecx [ebp-98h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push edi  +
mov ecx esi +
call ?OnCreate@CView@@IAEHPAUtagCREATESTRUCTW@@@Z  +
or edi 0FFFFFFFFh +
cmp eax edi +
jz loc_105D0C8  +
mov ecx esi +
call sub_101D08C  +
mov [ebp-9Ch] eax +
cmp eax ebx +
jz loc_105D0C8  +
push 31F7h  +
mov [eax+228h] esi +
push esi  +
add eax 0C8h +
push offset unk_10F5720  +
mov [esi+1FCh] eax +
push 40000000h  +
lea eax [esi+44h] +
push ebx  +
lea ecx [esi+0F8h] +
mov [esi+200h] eax +
call ?Create@CStatic@@QAEHPBGKABUtagRECT@@PAVCWnd@@I@Z  +
mov eax [ebp-0A0h] +
mov eax [eax] +
mov edi [esi+40h] +
mov [ebp-0A4h] eax +
mov eax [edi+11Ch] +
mov [esi+238h] eax +
test al 1 +
jnz loc_105D0EF  +
test byte ptr [esi+238h] 20h +
jnz loc_105D0FC  +
mov al [edi+121h] +
mov [ebp-0A0h] al +
push dword ptr [ebp-0A0h]  +
mov ecx esi +
call sub_1022FD1  +
push 31F1h  +
mov ecx esi +
call sub_1030E23  +
test al al +
jz loc_105D12F  +
mov eax [esi+174h] +
cmp eax ebx +
jz loc_105D12F  +
push ebx  +
push eax  +
push ebx  +
mov ecx esi +
call sub_1041A24  +
mov eax [esi+238h] +
shr eax 1 +
not al  +
test al 1 +
jz loc_105D10B  +
push dword ptr [ebp-0A4h]  +
mov ecx esi +
push 31F2h  +
call sub_103104F  +
test eax eax +
jz loc_105D12F  +
push 31FCh  +
mov ecx esi +
call sub_1030E23  +
test al al +
jz loc_105D12F  +
mov eax [esi+17Ch] +
cmp eax ebx +
jz loc_105D12F  +
push ebx  +
push eax  +
push 2  +
mov ecx esi +
call sub_1041A24  +
mov ecx esi +
call sub_1032E2B  +
test al al +
jz loc_105D12F  +
lea ecx [ebp-88h] +
call sub_10230CC  +
push ebx  +
push 1  +
sub esp 78h +
lea eax [ebp-88h] +
mov ecx esp +
mov [ebp-0A4h] esp +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1020AEF  +
push ebx  +
lea eax [ebp-0B4h] +
push eax  +
mov ecx esi +
call sub_1020C8B  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-98h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-0B4h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-98h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov [ebp-4] bl +
lea ecx [ebp-88h] +
test al al +
jnz loc_105D117  +
call sub_100F341  +
lea eax [ebp-0B4h] +
push eax  +
mov ecx esi +
call sub_1032382  +
push eax  +
lea ecx [ebp-98h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-0B4h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-98h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105D140  +
mov eax [esi+174h] +
add eax 88h +
mov [esi+228h] ebx +
push dword ptr [eax]  +
lea ecx [esi+23Ch] +
call sub_1010F11  +
push ebx  +
mov ecx eax +
call sub_100EB41  +
mov eax [esi+174h] +
add eax 94h +
push dword ptr [eax]  +
lea ecx [esi+240h] +
call sub_1010F11  +
push ebx  +
mov ecx eax +
call sub_100EB41  +
mov eax [esi+174h] +
add eax 98h +
push dword ptr [eax]  +
lea ecx [esi+244h] +
call sub_1010F11  +
push ebx  +
mov ecx eax +
call sub_100EB41  +
mov eax [esi+20h] +
mov [esi+22Ch] eax +
mov eax [esi+178h] +
mov eax [eax+4Ch] +
cmp eax ebx +
jz loc_1030DF1  +
mov eax [eax+20h] +
mov ecx [ebp-9Ch] +
mov [esi+234h] eax +
mov eax [esi+40h] +
add eax 0F4h +
mov [esi+224h] eax +
mov [esi+258h] ebx +
call ?GetMDIFrame@CMDIChildWnd@@QAEPAVCMDIFrameWnd@@XZ  +
cmp eax ebx +
jz loc_1030D7C  +
push 5  +
mov ecx eax +
call sub_100EB83  +
lea ecx [esi+5Ch] +
push offset unk_10F5574  +
mov [ebp-9Ch] ecx +
call sub_102124D  +
mov ecx [ebp-9Ch] +
push esi  +
push offset loc_100E83D  +
lea eax [ebp-0B4h] +
push eax  +
call sub_100FB75  +
push eax  +
lea ecx [ebp-98h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-0B4h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-98h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105D11E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-98h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
***
call sub_100C50D  +
retn 4  +
***
xor eax eax +
jmp loc_1030D4A  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewCreate  +
lea ecx [ebp-24h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [esi+174h] +
mov [ebp-6Ch] eax +
lea eax [esi+188h] +
mov [ebp-5Ch] eax +
mov eax offset off_10304B0 +
mov [ebp-50h] eax +
mov [ebp-40h] eax +
lea eax [esi+184h] +
mov [ebp-3Ch] eax +
lea ecx [esi+180h] +
lea eax [esi+17Ch] +
mov dword ptr [ebp-74h] 31F1h +
mov dword ptr [ebp-70h] offset off_1030488 +
mov [ebp-68h] edi +
mov dword ptr [ebp-64h] 31F5h +
mov dword ptr [ebp-60h] offset off_1030460 +
mov [ebp-58h] edi +
mov dword ptr [ebp-54h] 31F4h +
mov [ebp-4Ch] ecx +
mov dword ptr [ebp-48h] 3 +
mov dword ptr [ebp-44h] 31FBh +
mov dword ptr [ebp-38h] 4000000h +
mov dword ptr [ebp-34h] 31FCh +
mov dword ptr [ebp-30h] offset off_1030410 +
mov [ebp-2Ch] eax +
mov [ebp-28h] edi +
mov byte ptr [ebp-0Dh] 0 +
mov [ebp-14h] edi +
lea ebx [ebp-70h] +
mov ecx [ebp+8] +
cmp [ebx-4] ecx +
jz loc_1030F3A  +
inc dword ptr [ebp-14h]  +
add ebx 10h +
cmp dword ptr [ebp-14h] 5 +
jb loc_1030EE2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov al [ebp-0Dh] +
call sub_1001FCF  +
retn 4  +
push dword ptr [ebx+8]  +
xor eax eax +
lea edi [ebp-88h] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov eax [esi+40h] +
mov edi [ebx+4] +
mov [ebp-84h] eax +
mov eax [ebx] +
mov [ebp-88h] eax +
push ecx  +
lea eax [ebp-88h] +
push eax  +
mov ecx esi +
call sub_1030FF1  +
push 8000FFFFh  +
push eax  +
mov [edi] eax +
lea eax [ebp-98h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-98h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
test eax eax +
jl loc_105C4E0  +
mov eax [ebp+8] +
sub eax 31F1h +
mov byte ptr [ebp-0Dh] 1 +
jz loc_1034928  +
sub eax 3 +
jz loc_104834A  +
dec eax  +
jz loc_1048330  +
sub eax 7 +
jnz loc_1030EEA  +
mov ecx [esi+17Ch] +
push esi  +
call sub_1031B08  +
jmp loc_1030EEA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
mov ecx [edi] +
call ?CreateObject@CRuntimeClass@@QAEPAVCObject@@XZ  +
mov esi eax +
test esi esi +
jz loc_105A328  +
mov ecx [ebp+arg_8] +
mov eax [esi] +
push edi  +
push [ebp+arg_4]  +
or ecx 50800000h +
push ebx  +
push offset unk_10F5720  +
push ecx  +
push 0  +
push 0  +
mov ecx esi +
call dword ptr [eax+5Ch]  +
test eax eax +
jz loc_105A357  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1031070  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105ABB5  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_1035771  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10310E2  +
mov [esi+178h] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
push [ebp+arg_4]  +
mov ecx [esi+178h] +
push [ebp+arg_0]  +
push esi  +
push offset unk_10F5720  +
push 50000000h  +
call sub_10310EB  +
test eax eax +
jz loc_10310E2  +
mov eax [esi+178h] +
push dword ptr [esi+1D0h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov ecx [esi+178h] +
lea eax [ebp+var_14] +
push eax  +
call sub_1031CF5  +
lea ecx [ebp+var_14] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 8  +
xor eax eax +
jmp loc_10310DD  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistviewc_3  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-10h] edi +
mov edi [ebp+8] +
test edi 1000h +
jnz loc_105E674  +
mov ebx [esi+50h] +
push dword ptr [ebp+18h]  +
mov eax [ebx] +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
push 0  +
push 0  +
call dword ptr [eax+5Ch]  +
test eax eax +
jz loc_103119B  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_101C971  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E67C  +
mov ecx [ebp+10h] +
xor eax eax +
inc eax  +
shr edi 0Ch +
and edi eax +
mov [esi+190h] edi +
mov [esi+4Ch] ebx +
mov [esi+88h] ecx +
mov [ebp-10h] eax +
mov esi [esi+4Ch] +
test esi esi +
jz loc_10311A5  +
mov esi [esi+20h] +
push 0  +
push 0  +
push 1027h  +
push esi  +
call ds:SendMessageW  +
mov esi [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_103121F  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_101118C  +
test eax eax +
jz loc_103122E  +
mov [eax] eax +
lea ecx [eax+4] +
test ecx ecx +
jz locret_1031237  +
mov [ecx] eax +
retn   +
***
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105EB04  +
mov eax [esi+9Ch] +
cmp eax ebx +
jz loc_103131D  +
add eax 84h +
push eax  +
lea ecx [esi+6Ch] +
call sub_102124D  +
lea ecx [ebp-1Ch] +
mov [ebp-4] edi +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
xor eax eax +
jmp loc_10312FE  +
***
sub ds:byte_10DD332[eax] bh +
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-24h] +
mov [ebp-14h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcviewdropta  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+0Ch] edi +
jz loc_105F296  +
lea ecx [esi+10h] +
push edi  +
call sub_100EB41  +
test al al +
jnz loc_105F2B6  +
mov [ebp-10h] edi +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_100A5E6  +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov ecx esi +
call sub_10314CF  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1031453  +
push 8000FFFFh  +
push dword ptr [ebp-10h]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1031453  +
push dword ptr [ebp-10h]  +
mov edi [ebp+0Ch] +
push edi  +
call ds:RegisterDragDrop  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1031453  +
mov eax [ebp-10h] +
and dword ptr [ebp-10h] 0 +
push eax  +
lea ecx [esi+10h] +
call sub_100CA34  +
mov [esi+14h] edi +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
mov [ebp-14h] ebx +
test eax eax +
jnz loc_105F2D0  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcviewdrop_0  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105F25B  +
and dword ptr [edi] 0 +
and dword ptr [ebp+0Ch] 0 +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_103163B  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105F26D  +
push 8000FFFFh  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
jnz loc_105F270  +
mov eax [ebp+0Ch] +
and dword ptr [ebp+0Ch] 0 +
mov [edi] eax +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
xor esi esi +
push esi  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtiedcomobject  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
cmp [edi] esi +
jnz loc_10316E2  +
lea eax [ebp+10h] +
push eax  +
mov [ebp+10h] esi +
call sub_103178D  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105F236  +
cmp [ebp+10h] esi +
jz loc_105F248  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10318F9  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10316E2  +
lea eax [ebp+10h] +
push eax  +
mov ecx edi +
call sub_103170F  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1031733  +
test eax eax +
jl loc_105F1DB  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_105F1CA  +
lea edx [ebp+arg_0] +
push edx  +
add eax 8 +
mov ecx [eax] +
push offset dword_1031778  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jl loc_105F1C3  +
push [ebp+arg_0]  +
call sub_100CA34  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jz loc_105F1FC  +
push 34h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10317FB  +
push esi  +
mov ecx eax +
call sub_1031809  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
test esi esi +
jz loc_10317FF  +
lea ecx [esi+10h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_105F21B  +
xor ebx ebx +
test ebx ebx +
jnz loc_105F21B  +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
xor eax eax +
jmp loc_10317C9  +
mov ebx [ebp-18h] +
jmp loc_10317EF  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1031836  +
push offset Addend  +
mov dword ptr [esi] offset off_1010E60 +
mov dword ptr [esi+8] offset off_100E9D0 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
lea ecx [esi+0Ch] +
call sub_1041A02  +
mov dword ptr [esi] offset off_1031880 +
mov dword ptr [esi+8] offset off_1031860 +
and dword ptr [esi+2Ch] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFF8h +
call sub_10318C0  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10318DC  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aSccreateconnec  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
push esi  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_1031995  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jnz loc_105F22B  +
mov [esi+4] edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCtiedobjectSca  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+0Ch] ebx +
jz loc_1059D75  +
lea ecx [edi+4] +
mov eax [ecx+4] +
lea edx [ebp+0Ch] +
push edx  +
push eax  +
call sub_10212A9  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov eax esi +
cdq   +
and edx 3 +
add eax edx +
mov edx [ebx+19Ch] +
sar eax 2 +
cmp edx eax +
jle loc_100DB1C  +
jmp loc_105A77C  +
***
mov ecx [ebx+1BCh] +
cdq   +
and edx 3 +
add eax edx +
sar eax 2 +
cmp ecx eax +
jg loc_100DCA9  +
mov ecx eax +
jmp loc_100DCA9  +
***
push edi  +
mov ecx esi +
call sub_1010B6F  +
jmp loc_101144F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_105C436  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
add ecx 78h +
push ecx  +
call ds:InterlockedIncrement  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionspane_1  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+8]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ebx  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-1Ch] +
call edi  +
test eax eax +
jl loc_105DC85  +
cmp dword ptr [esi+8Ch] 0 +
jnz loc_105DCB9  +
mov ecx [ebp+8] +
lea eax [esi+44h] +
push eax  +
add ecx 5Ch +
call sub_102124D  +
mov eax [ebp+8] +
mov [esi+8Ch] eax +
mov eax [eax+174h] +
push 80070057h  +
push eax  +
mov [ebp+8] eax +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call ebx  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call edi  +
test eax eax +
jl loc_105DCFA  +
mov ecx [ebp+8] +
lea eax [esi+6Ch] +
push eax  +
add ecx 4Ch +
call sub_102124D  +
mov eax [esi+8Ch] +
mov eax [eax+178h] +
push 80070057h  +
push eax  +
mov [ebp+8] eax +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
call ebx  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call edi  +
test eax eax +
jl loc_105DD20  +
mov ecx [ebp+8] +
add esi 7Ch +
push esi  +
add ecx 4 +
call sub_102124D  +
lea ecx [ebp-1Ch] +
call edi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
push 0  +
push 0  +
push 101Fh  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
test eax eax +
jz loc_105E0F5  +
add esi 0A0h +
push eax  +
mov ecx esi +
call ?SubclassWindow@CWnd@@QAEHPAUHWND__@@@Z  +
mov eax esi +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push dword ptr [ebp+0Ch]  +
push 1036h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistviewc_4  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [edi+4Ch] +
mov esi [eax+9Ch] +
push 80004005h  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105EB0B  +
mov eax esi +
add esi 0B4h +
neg eax  +
sbb eax eax +
and eax esi +
push eax  +
lea ecx [edi+4] +
call sub_102124D  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi ecx +
test esi esi +
jz loc_1031E0A  +
push esi  +
call ds:IsWindow  +
test eax eax +
jz loc_1031E0A  +
mov [edi+230h] esi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
xor eax eax +
push eax  +
push [ebp+arg_8]  +
mov [ebp+var_10] eax +
push [ebp+arg_0]  +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebp+arg_4] +
or eax 400004Ah +
push eax  +
push offset aReady  +
push offset aMsctls_statusb  +
call ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z  +
xor eax eax +
inc eax  +
leave   +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
mov ebx [ebp+0Ch] +
lea eax [ebx-1] +
cmp eax 0Fh +
ja loc_1031F8C  +
xor edi edi +
push 3Ch  +
lea eax [ebp-68h] +
push edi  +
push eax  +
mov [ebp-6Ch] edi +
call memset  +
add esp 0Ch +
push esi  +
lea ecx [ebp-2Ch] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
cmp ebx edi +
mov [ebp-4] edi +
mov [esi+44h] ebx +
mov [ebp-10h] edi +
jle loc_1031F5E  +
mov ebx [ebp+8] +
lea eax [ebp-6Ch] +
sub eax ebx +
mov [ebp+8] eax +
lea ecx [ebp+0Ch] +
call ??0CString@@QAE@XZ  +
mov eax [ebx] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1031F30  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
call sub_101220E  +
mov eax [ebp+0Ch] +
mov ecx [eax-8] +
lea edx [ebp-18h] +
push edx  +
push ecx  +
push eax  +
push dword ptr [ebp-28h]  +
call ds:GetTextExtentPoint32W  +
mov eax [ebp-18h] +
mov ecx [esi+48h] +
add eax 3 +
mov [edi+ecx] eax +
mov eax [esi+48h] +
mov eax [edi+eax] +
mov ecx [ebp+8] +
mov [ecx+ebx] eax +
and dword ptr [ebp-18h] 0 +
push offset word_100A5FC  +
lea ecx [ebp+0Ch] +
call ??4CString@@QAEABV0@PBG@Z  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
inc dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
add edi 0Ch +
add ebx 4 +
cmp eax [esi+44h] +
jl loc_1031EE7  +
mov eax [esi+44h] +
lea ecx [ebp-6Ch] +
push ecx  +
push eax  +
push 404h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
mov esi eax +
call ??1CClientDC@@UAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
xor eax eax +
jmp loc_1031F84  +
***
call sub_100C4D0  +
push 0  +
lea eax [ebp-6Ch] +
push eax  +
push 5Ch  +
push 1Fh  +
mov esi ecx +
call ds:SystemParametersInfoW  +
lea eax [ebp-6Ch] +
lea edi [esi+6Ch] +
push eax  +
mov ecx edi +
call sub_10305F1  +
push 0  +
lea ecx [ebp-80h] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
push edi  +
lea ecx [ebp-80h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
mov edi eax +
lea eax [ebp-0BCh] +
push eax  +
push dword ptr [ebp-78h]  +
call ds:GetTextMetricsW  +
mov eax [ebp-0BCh] +
push edi  +
lea ecx [ebp-80h] +
mov [esi+58h] eax +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
lea eax [ebp-6Ch] +
push eax  +
lea ecx [esi+74h] +
mov dword ptr [ebp-5Ch] 2BCh +
call sub_10305F1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-80h] +
call ??1CClientDC@@UAE@XZ  +
call sub_100C50D  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
mov esi ecx +
mov [esi+84h] eax +
mov eax [ebp+10h] +
mov [esi+88h] eax +
call ?Default@CWnd@@IAEJXZ  +
cmp dword ptr [ebp+8] 1 +
jz loc_1032055  +
mov ecx esi +
call sub_1020F67  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+14h] 0 +
jnz loc_1032075  +
mov eax [ecx] +
cmp eax [ecx+8] +
jnz loc_105F926  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCmenubuttons_2  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+10h] +
test ecx ecx +
jz loc_1060D75  +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_1060D75  +
mov [esi+8] eax +
lea eax [ebp-20h] +
mov [esi+4] ecx +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_102F2F3  +
mov dword ptr [esi] offset off_103214C +
mov eax esi +
pop esi  +
retn   +
***
push [ebp+arg_8]  +
push dword ptr [ebx+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_1022AA1  +
mov eax [ebp+arg_0] +
jmp loc_103233D  +
mov eax [esi] +
cmp [edi+0Ch] eax +
jl loc_1062B09  +
jmp loc_1062B3C  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
xor ebx ebx +
push 0Ah  +
lea ecx [esi+4] +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_1007D88 +
call ??0CMapWordToPtr@@QAE@H@Z  +
lea ecx [esi+20h] +
mov byte ptr [ebp-4] 1 +
call ??0CString@@QAE@XZ  +
lea ecx [esi+2Ch] +
mov byte ptr [ebp-4] 2 +
mov [esi+24h] bl +
mov [esi+28h] ebx +
call ??0CString@@QAE@XZ  +
mov [esi+30h] bl +
mov [esi+31h] bl +
mov byte ptr [esi+32h] 1 +
mov [esi+34h] ebx +
mov eax esi +
call sub_1001FCF  +
retn   +
***
add [ebx+eax*4+0] ch +
add [eax+48880448h] ecx +
or al 89h +
dec eax  +
adc [ecx+48891448h] cl +
sbb [ecx+48891C48h] cl +
and [ecx+48892448h] cl +
sub [esi-77h] ah +
dec eax  +
sub al 66h +
mov [eax+2Eh] ecx +
mov [eax+30h] cx +
mov [eax+32h] cx +
mov [eax+34h] cx +
mov [eax+36h] cx +
mov [eax+38h] cx +
mov [eax+3Ah] cx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_102F58E  +
test eax eax +
jz locret_10322B5  +
push esi  +
call sub_102F448  +
push [ebp+lpParam]  +
push [ebp+hInstance]  +
push [ebp+hMenu]  +
push [ebp+hWndParent]  +
push [ebp+nHeight]  +
push [ebp+nWidth]  +
push [ebp+Y]  +
push [ebp+X]  +
push [ebp+dwStyle]  +
push [ebp+lpWindowName]  +
push [ebp+lpClassName]  +
push 0  +
call ds:CreateWindowExW  +
push [ebp+var_4]  +
mov esi eax +
call sub_102F464  +
mov eax esi +
pop esi  +
leave   +
retn 2Ch  +
***
mov eax [esi] +
cmp eax [edi+0Ch] +
jge loc_1062B3C  +
push esi  +
push edi  +
push 1  +
jmp loc_1032330  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+8] 0 +
jz loc_1032160  +
mov eax [ebx+4] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_4] eax +
cmp edi [eax] +
jz loc_10322B9  +
cmp edi eax +
jz loc_1062AFC  +
mov eax [esi] +
cmp eax [edi+0Ch] +
jge loc_1032178  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] edi +
call sub_10218CE  +
mov ecx [ebp+arg_8] +
mov eax [esi] +
cmp [ecx+0Ch] eax +
jge loc_1032178  +
mov eax [ecx+8] +
cmp byte ptr [eax+15h] 0 +
push esi  +
jnz loc_1032342  +
push edi  +
push 1  +
mov ecx ebx +
push [ebp+arg_0]  +
call sub_1022AA1  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
push ecx  +
push 0  +
jmp loc_103232E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
test ecx ecx +
jz loc_1068907  +
pop ebp  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+3Ch] eax +
mov eax [ebp+arg_4] +
mov [ecx+40h] eax +
mov eax [ebp+arg_8] +
mov [ecx+44h] eax +
pop ebp  +
retn 0Ch  +
***
call sub_1001F95  +
mov ebx ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewSccr_0  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call sub_100ABA9  +
mov esi eax +
push 8000FFFFh  +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105D077  +
mov esi [esi+0DCh] +
push 8007000Eh  +
push esi  +
lea eax [ebp-34h] +
push eax  +
mov [ebp-14h] esi +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10325CA  +
lea esi [ebx+324h] +
mov ecx esi +
call sub_103308F  +
mov eax [esi] +
push 80004005h  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10325CA  +
mov ecx [esi] +
push ebx  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push eax  +
mov [ebx+208h] ecx +
call sub_10332D9  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10325CA  +
mov eax [esi] +
mov ecx eax +
add eax 8 +
neg ecx  +
sbb ecx ecx +
and ecx eax +
push ecx  +
lea ecx [ebx+5Ch] +
call sub_102124D  +
mov ecx [ebp-14h] +
mov eax [esi] +
mov edx ecx +
sub ecx 0FFFFFF80h +
neg edx  +
sbb edx edx +
and edx ecx +
push edx  +
lea ecx [eax+18h] +
call sub_102124D  +
mov esi [esi] +
push offset unk_10F5584  +
lea ecx [esi+18h] +
call sub_102124D  +
push 28h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov byte ptr [ebp-4] 6 +
test eax eax +
jz loc_10325F6  +
mov ecx eax +
call sub_103264F  +
mov esi 8007000Eh +
push esi  +
push eax  +
mov [ebx+32Ch] eax +
lea eax [ebp-34h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 7 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10325CA  +
mov eax [ebx+32Ch] +
mov [ebp-14h] eax +
lea eax [ebp-14h] +
lea ecx [ebx+328h] +
push eax  +
call sub_101192A  +
mov eax [ebp-14h] +
test eax eax +
jnz loc_105D089  +
mov eax [ebx+328h] +
push esi  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 8 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10325CA  +
lea ecx [ebx+20Ch] +
test ecx ecx +
jz loc_10325CA  +
mov ebx [ebx+32Ch] +
test ebx ebx +
jz loc_10325FD  +
lea eax [ebx+4] +
push eax  +
call sub_102124D  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
xor eax eax +
jmp loc_1032517  +
xor eax eax +
jmp loc_10325C4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
lea edi [esi+4] +
mov ecx edi +
mov dword ptr [esi] offset off_1032764 +
call sub_1032131  +
xor eax eax +
mov dword ptr [edi] offset off_1010770 +
lea edi [esi+1Ch] +
mov ecx edi +
mov [ebp-4] eax +
mov dword ptr [esi] offset off_10113A0 +
mov [esi+14h] eax +
mov [esi+18h] eax +
call sub_1041C89  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ebp-10h] 8008h +
call sub_1032771  +
mov dword ptr [eax] 3445h +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 8008h +
call sub_1032771  +
mov dword ptr [eax] 3445h +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 8001h +
call sub_1032771  +
mov dword ptr [eax] 3446h +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 8002h +
call sub_1032771  +
mov dword ptr [eax] 3447h +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 8003h +
call sub_1032771  +
mov dword ptr [eax] 3448h +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 8004h +
call sub_1032771  +
mov dword ptr [eax] 3449h +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 8007h +
call sub_1032771  +
mov dword ptr [eax] 344Dh +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 8006h +
call sub_1032771  +
mov dword ptr [eax] 344Ch +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
call sub_100FCDF  +
cmp eax [edi+4] +
jz loc_1032791  +
mov ecx [esi] +
cmp ecx [eax+0Ch] +
jge loc_10327AC  +
mov ecx [esi] +
and [ebp+var_4] 0 +
mov [ebp+var_8] ecx +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx edi +
call sub_10322CF  +
mov eax [eax] +
pop edi  +
add eax 10h +
pop esi  +
leave   +
retn 4  +
***
push 14h  +
mov eax offset dword_10E5C40 +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionspane_6  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
or dword ptr [ebp-10h] 0FFFFFFFFh +
push ebx  +
push ebx  +
mov ecx edi +
call sub_10334DC  +
push ebx  +
push 2000000h  +
push ebx  +
mov ecx edi +
call ?ModifyStyle@CWnd@@QAEHKKI@Z  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
push 82h  +
push eax  +
lea ecx [edi+138h] +
call sub_10329CF  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jl loc_105DB30  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
push 86h  +
push eax  +
lea ecx [edi+14Ch] +
call sub_10329CF  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jl loc_105DB64  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
push 84h  +
push eax  +
lea ecx [edi+160h] +
call sub_10329CF  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jl loc_105DB8A  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
push 83h  +
push eax  +
lea ecx [edi+174h] +
call sub_10329CF  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jl loc_105DBB0  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
push 85h  +
push eax  +
lea ecx [edi+188h] +
call sub_10329CF  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jl loc_105DBD9  +
push 347Dh  +
call ds:?GetStringModule@@YGPAUHINSTANCE__@@XZ  +
push eax  +
lea ecx [edi+19Ch] +
call sub_10329CF  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jl loc_105DC02  +
push dword ptr [ebp+8]  +
mov ecx edi +
call ?OnCreate@CView@@IAEHPAUtagCREATESTRUCTW@@@Z  +
cmp eax 0FFFFFFFFh +
jz loc_105DC2B  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
push edi  +
lea ecx [edi+0D0h] +
push eax  +
mov [ebp+8] ecx +
call sub_1032A30  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jl loc_105DC5C  +
mov ecx [ebp+8] +
push edi  +
push offset loc_1095FA9  +
push offset loc_1097AD9  +
call sub_103234C  +
mov [ebp-10h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-10h] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+uID] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_1066139  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+uID]  +
push [ebp+hInstance]  +
call sub_1021626  +
mov esi eax +
test esi esi +
jl loc_106616F  +
push [ebp+var_4]  +
mov ecx edi +
call sub_100AE0E  +
mov esi eax +
test esi esi +
jl loc_10661A7  +
cmp [ebp+var_4] 0 +
jz loc_1032A23  +
push [ebp+var_4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionpaneIni  +
lea ecx [ebp-34h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx ds:?ToHr@SC@mmcerror@@QBEJXZ +
cmp [esi+4] edi +
jnz loc_106896B  +
cmp [esi+48h] edi +
jnz loc_106896B  +
cmp [esi+4Ch] edi +
jnz loc_106896B  +
cmp [esi+50h] edi +
jnz loc_106896B  +
push 48h  +
call sub_100ABF0  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 1 +
cmp eax edi +
jz loc_1032CCC  +
mov ecx eax +
call near ptr dword_1032214+3  +
mov [ebp-10h] eax +
push 38h  +
mov byte ptr [ebp-4] 0 +
call sub_100ABF0  +
mov [ebp-14h] eax +
mov byte ptr [ebp-4] 2 +
cmp eax edi +
jz loc_1032CD4  +
mov ecx eax +
call near ptr dword_10321B4+5  +
push 38h  +
mov byte ptr [ebp-4] 0 +
mov [esi+48h] eax +
call sub_100ABF0  +
mov [ebp-14h] eax +
mov byte ptr [ebp-4] 3 +
cmp eax edi +
jz loc_1032CDB  +
mov ecx eax +
call near ptr dword_10321B4+5  +
push 38h  +
mov byte ptr [ebp-4] 0 +
mov [esi+4Ch] eax +
call sub_100ABF0  +
mov [ebp-14h] eax +
mov byte ptr [ebp-4] 4 +
cmp eax edi +
jz loc_1032CE2  +
mov ecx eax +
call near ptr dword_10321B4+5  +
mov ecx [ebp-10h] +
push 8007000Eh  +
push eax  +
push dword ptr [esi+4Ch]  +
mov [esi+50h] eax +
push dword ptr [esi+48h]  +
lea eax [ebp-44h] +
push ecx  +
push eax  +
mov byte ptr [ebp-4] 0 +
mov [esi+4] ecx +
call sub_100D4B3  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ebx  +
cmp eax edi +
jl loc_10689BA  +
mov ecx [esi+48h] +
push esi  +
call sub_1032D41  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ebx  +
cmp eax edi +
jl loc_10689E0  +
mov ecx [esi+4Ch] +
push esi  +
call sub_1032D41  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ebx  +
cmp eax edi +
jl loc_1068A06  +
mov ecx [esi+50h] +
push esi  +
call sub_1032D41  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ebx  +
cmp eax edi +
jl loc_1068A2F  +
mov eax [ebp+0Ch] +
cmp eax edi +
jz loc_1068A58  +
mov eax [eax+20h] +
mov ecx [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
push offset aActionspanevie  +
call sub_103412D  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ebx  +
test eax eax +
jl loc_1068A5F  +
push 0Ah  +
push 14h  +
push 21h  +
push 10h  +
lea ecx [esi+54h] +
push 10h  +
mov [ebp+8] ecx +
call ?Create@CImageList@@QAEHHHIHH@Z  +
test eax eax +
jz loc_1068A8F  +
mov esi offset off_1008170 +
mov [ebp-18h] edi +
mov [ebp-1Ch] esi +
mov ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 6 +
call ?GetExStyle@CWnd@@QBEKXZ  +
mov edi eax +
and edi 400000h +
or edi 32800000h +
shr edi 16h +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+0Ch] +
push 2000h  +
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
movzx ecx di +
push ecx  +
push eax  +
call ds:LoadImageW  +
mov edi eax +
test edi edi +
jz loc_1068AD3  +
push edi  +
lea ecx [ebp-1Ch] +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
test eax eax +
jz loc_1068B1D  +
and dword ptr [ebp-20h] 0 +
mov [ebp-24h] esi +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov byte ptr [ebp-4] 7 +
call sub_101CC22  +
cmp eax 0FFFFFFFFh +
jz loc_1068B5E  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 6 +
mov [ebp-24h] esi +
call sub_100F62A  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 0 +
mov [ebp-1Ch] esi +
call sub_100F62A  +
lea ecx [ebp-34h] +
call ebx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-34h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
mov [ebp-10h] edi +
jmp loc_1032AA5  +
xor eax eax +
jmp loc_1032AC6  +
xor eax eax +
jmp loc_1032AEA  +
xor eax eax +
jmp loc_1032B0E  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionpanes_2  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [esi+30h] 0 +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
jnz loc_10693BC  +
mov ebx [ebp+8] +
push 80070057h  +
push ebx  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call edi  +
test eax eax +
jl loc_106940B  +
push 1  +
push 0Ch  +
lea ecx [esi+4] +
call ?InitHashTable@CMapWordToPtr@@QAEXIH@Z  +
mov [esi+28h] ebx +
mov byte ptr [esi+30h] 1 +
lea ecx [ebp-1Ch] +
call edi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push esi  +
push 0  +
push 31FAh  +
mov esi ecx +
mov ecx [esi+18Ch] +
mov eax [ecx] +
push esi  +
push offset unk_10F5720  +
push 50000000h  +
call dword ptr [eax+110h]  +
test eax eax +
jz loc_105A324  +
push dword ptr [esi+18Ch]  +
mov ecx [esi+40h] +
call ?AddView@CDocument@@QAEXPAVCView@@@Z  +
mov al 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp-10h] +
push eax  +
mov esi ecx +
call sub_1032EA8  +
lea ecx [ebp-10h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
leave   +
retn 8  +
***
call sub_1001F95  +
xor ebx ebx +
mov [ebp-14h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCamcviewScenfo  +
mov [ebp-4] ebx +
mov [ebp-14h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call sub_100ABA9  +
push 8000FFFFh  +
push eax  +
mov [ebp-10h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
mov [ebp-4] esi +
call edi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
call esi  +
cmp eax ebx +
jl loc_105A9EC  +
mov eax [ebp-10h] +
push dword ptr [eax+20h]  +
call ds:IsIconic  +
test eax eax +
jnz loc_105AA18  +
call sub_101125C  +
mov ecx [ebp-10h] +
mov [ebp-18h] eax +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_1032FED  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
cmp eax ebx +
jl loc_105AA4C  +
mov edx [ebp-20h] +
mov eax [ebp-28h] +
mov ecx [ebp-18h] +
sub edx eax +
cmp edx ecx +
jl loc_105AA75  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push offset aCmainframeScge  +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1033075  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpRect]  +
push dword ptr [ecx+20h]  +
call ds:GetWindowRect  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jnz loc_105D06A  +
call sub_10330BD  +
mov [esi] eax +
pop esi  +
test eax eax +
jz loc_105D074  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+8]  +
mov al 1 +
retn   +
***
call sub_1001F95  +
push 7Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10330E4  +
call sub_10330EF  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1033121  +
and dword ptr [esi+78h] 0 +
mov dword ptr [esi] offset off_1011338 +
mov dword ptr [esi+4] offset off_100E4A0 +
mov dword ptr [esi+8] offset off_100E648 +
mov dword ptr [esi+18h] offset off_1011318 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+8] +
mov dword ptr [esi] offset off_10331C0 +
mov ecx edi +
mov dword ptr [esi+4] offset off_10331CC +
call near ptr dword_102F344+3  +
and dword ptr [ebp-4] 0 +
lea ebx [esi+18h] +
mov ecx ebx +
call sub_1033258  +
mov dword ptr [edi] offset off_100E5F8 +
xor edi edi +
lea ecx [esi+30h] +
push edi  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_10112F0 +
mov dword ptr [esi+4] offset off_100E460 +
mov dword ptr [ebx] offset off_10112D0 +
call sub_1031ACC  +
lea ecx [esi+40h] +
mov byte ptr [ebp-4] 2 +
call sub_10331F9  +
lea ecx [esi+4Ch] +
mov byte ptr [ebp-4] 3 +
call sub_10206B1  +
lea ecx [esi+58h] +
mov byte ptr [ebp-4] 4 +
call sub_10206B1  +
mov [esi+64h] edi +
and byte ptr [esi+68h] 0FEh +
mov [esi+6Ch] edi +
mov [esi+70h] edi +
mov byte ptr [esi+74h] 0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1033225  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+1Dh] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_1041B2F  +
cmp eax ebx +
jz loc_1033238  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_1033241  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_103324A  +
mov [ecx] ebx +
mov [eax+1Dh] bl +
mov byte ptr [eax+1Ch] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_103327D  +
mov dword ptr [esi] offset off_1033270 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10332A5  +
mov dword ptr [esi] offset off_1033298 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_10112B0 +
call sub_1031205  +
and dword ptr [esi+10h] 0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push 0  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewtool_6  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
push 80070057h  +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-38h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1063EC8  +
mov eax [ebp+0Ch] +
mov [esi+6Ch] eax +
mov [esi+70h] edi +
add esi 64h +
cmp dword ptr [esi] 0 +
jnz loc_1063EDA  +
push 0Ah  +
push 14h  +
push 21h  +
push 10h  +
push 10h  +
mov ecx esi +
call sub_102B239  +
test eax eax +
jz loc_1063EED  +
push 0FFFFFFFFh  +
push dword ptr [esi]  +
call sub_10333FB  +
lea eax [ebp-28h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_100A4F0  +
xor edi edi +
mov [ebp-1Ch] edi +
mov esi dword_10F5378 +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_103342A  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_1033461  +
mov [ebp-4] edi +
cmp esi edi +
jnz loc_1033447  +
push offset aImagelist_setb  +
call sub_101D9DA  +
mov esi eax +
cmp esi edi +
jz loc_1033452  +
mov dword_10F5378 esi +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10334A9  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 8  +
***
cmp dword_10F6C64 edi +
jnz locret_10334D6  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jnz loc_1063E8B  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jnz loc_1063E98  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov esi 1F8h +
push esi  +
lea eax [ebp+pvParam] +
push 0  +
push eax  +
mov edi ecx +
call memset  +
add esp 0Ch +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 29h  +
mov [ebp+pvParam] esi +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_105D5C0  +
mov eax [ebp+var_1E8] +
lea esi [edi+134h] +
cmp [esi] eax +
jz loc_1033569  +
mov [esi] eax +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [edi+20h]  +
call ds:GetClientRect  +
mov eax [esi] +
mov [ebp+Rect.top] eax +
lea eax [ebp+Rect] +
push eax  +
lea ecx [edi+0D0h] +
call sub_1011A7A  +
lea esi [edi+12Ch] +
mov [ebp+var_64.lfWeight] 2BCh +
test esi esi +
jz loc_1033584  +
cmp dword ptr [esi+4] 0 +
jnz loc_105D5B4  +
lea eax [ebp+var_64] +
push eax  +
mov ecx esi +
call sub_10305F1  +
lea ecx [edi+0D0h] +
call sub_10335B6  +
mov ecx edi +
call sub_100CBA3  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 8  +
***
mov ecx [ecx+4] +
test ecx ecx +
jnz loc_10D0398  +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1011360 +
call sub_1031205  +
and dword ptr [esi+10h] 0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
push 4  +
mov eax offset dword_10E7528 +
call sub_1001F95  +
push 1B4h  +
call sub_100ABF0  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1033672  +
call sub_103367D  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call near ptr dword_1030A58+3  +
lea edi [esi+44h] +
xor ebx ebx +
mov ecx edi +
mov [ebp-4] ebx +
call near ptr dword_102F344+3  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 1 +
call near ptr dword_10335C4+3  +
lea ecx [esi+6Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1030576  +
lea ecx [esi+7Ch] +
mov byte ptr [ebp-4] 3 +
call sub_10305B1  +
lea ecx [esi+90h] +
mov byte ptr [ebp-4] 4 +
mov dword ptr [esi] offset off_1002F8C +
mov dword ptr [edi] offset off_100E698 +
mov dword ptr [esi+54h] offset off_1011380 +
mov dword ptr [esi+6Ch] offset off_100E808 +
mov dword ptr [esi+7Ch] offset off_100FF6C +
mov [esi+8Ch] ebx +
call sub_1030614  +
lea ecx [esi+0D0h] +
mov byte ptr [ebp-4] 5 +
call sub_103379F  +
lea eax [esi+12Ch] +
mov [eax+4] ebx +
mov dword ptr [eax] offset off_10083D0 +
lea ecx [esi+138h] +
mov byte ptr [ebp-4] 7 +
mov [esi+134h] ebx +
call sub_100AD56  +
lea ecx [esi+14Ch] +
mov byte ptr [ebp-4] 8 +
call sub_100AD56  +
lea ecx [esi+160h] +
mov byte ptr [ebp-4] 9 +
call sub_100AD56  +
lea ecx [esi+174h] +
mov byte ptr [ebp-4] 0Ah +
call sub_100AD56  +
lea ecx [esi+188h] +
mov byte ptr [ebp-4] 0Bh +
call sub_100AD56  +
lea ecx [esi+19Ch] +
mov byte ptr [ebp-4] 0Ch +
call sub_100AD56  +
mov [esi+1B0h] bl +
mov [esi+1B1h] bl +
mov [esi+1B2h] bl +
mov [esi+1B3h] bl +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
lea ecx [esi+8] +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_1007D24 +
mov [esi+4] edi +
call ??0CWnd@@QAE@XZ  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 1 +
mov [esi+48h] edi +
mov [esi+4Ch] edi +
mov [esi+50h] edi +
call ??0CImageList@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+4Ch] +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
mov [ebp+arg_0] eax +
jl loc_105E195  +
push edi  +
push offset off_10F6CCC  +
push offset off_10F6C88  +
push edi  +
push dword ptr [esi+88h]  +
call __RTDynamicCast  +
add esp 14h +
cmp eax edi +
jz loc_103382F  +
push [ebp+arg_4]  +
mov ecx [eax+310h] +
call sub_103205F  +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_4] 4 +
jz loc_105E1A9  +
cmp [ebp+arg_4] 2 +
jz loc_105E1B2  +
mov ecx [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
push 3  +
call ?ModifyStyle@CWnd@@QAEHKKI@Z  +
mov ecx [esi+4Ch] +
call sub_100E4E1  +
cmp ebx [esi+194h] +
jnz loc_105E1C3  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
mov ecx [eax] +
and dword ptr [eax] 0 +
push ecx  +
mov ecx esi +
call sub_10338A5  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi ecx +
jz loc_10338BF  +
test ecx ecx +
jnz loc_105EB29  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
sub esp 28h +
push ebx  +
push esi  +
xor ebx ebx +
mov esi ecx +
push edi  +
mov [esi+54h] eax +
cmp dword_10F5360 ebx +
jnz loc_1033942  +
push 0Ah  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_28] +
stos   +
mov eax ds:DefWindowProcW +
mov [ebp+var_24] eax +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
push 7F00h  +
push ebx  +
mov [ebp+var_18] eax +
call ds:LoadCursorW  +
mov [ebp+var_10] eax +
mov eax off_10F9860 +
mov [ebp+var_4] eax +
lea eax [ebp+var_28] +
push eax  +
mov [ebp+var_C] 10h +
mov [ebp+var_8] ebx +
call ?AfxRegisterClass@@YGHPAUtagWNDCLASSW@@@Z  +
test eax eax +
jz loc_10339C7  +
mov dword_10F5360 1 +
push ebx  +
push [ebp+arg_C]  +
mov ecx esi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push ebx  +
push off_10F9860  +
push ebx  +
call ?CreateEx@CWnd@@QAEHKPBG0KABUtagRECT@@PAV1@IPAX@Z  +
test eax eax +
jz loc_10339C7  +
mov ecx esi +
call sub_1031F95  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
push ebx  +
push eax  +
push ebx  +
push dword ptr [esi+20h]  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 40000000h  +
push ebx  +
push offset ClassName  +
call sub_1032262  +
mov edi eax +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
mov ecx [esi+58h] +
push ebx  +
push ebx  +
push ebx  +
push edi  +
push eax  +
push 1  +
push dword ptr [esi+20h]  +
lea eax [ecx+4] +
push eax  +
lea eax [ecx+ecx+8] +
push eax  +
push ebx  +
push ebx  +
push 40800042h  +
call sub_10339DB  +
mov [esi+8Ch] eax +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
xor eax eax +
jmp loc_10339C0  +
***
call sub_100A4F0  +
xor edi edi +
mov [ebp-1Ch] edi +
mov esi dword_10F535C +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_1033A0A  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_1033A5F  +
mov [ebp-4] edi +
cmp esi edi +
jnz loc_1033A27  +
push offset aCreateupdownco  +
call sub_101D9DA  +
mov esi eax +
cmp esi edi +
jz loc_1033A50  +
mov dword_10F535C esi +
push dword ptr [ebp+34h]  +
push dword ptr [ebp+30h]  +
push dword ptr [ebp+2Ch]  +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1033AA1  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 30h  +
***
cmp dword_10F6C64 edi +
jnz locret_1033ACE  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jnz loc_105F7C5  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jnz loc_105F7D2  +
retn   +
***
push 4  +
mov eax offset byte_10DFF83 +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
xor ebx ebx +
lea edi [esi+0Ch] +
push ebx  +
mov ecx edi +
mov dword ptr [esi] offset off_1011888 +
mov [esi+4] ebx +
mov [esi+8] ebx +
call sub_1033B2E  +
mov [ebp-4] ebx +
lea ebx [esi+1Ch] +
mov ecx ebx +
call sub_10206B1  +
and dword ptr [esi+28h] 0 +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_1011AD9  +
mov ecx ebx +
call sub_100A44C  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_1060F99  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
cmp eax 0FFFFFFFFh +
jz loc_1062885  +
push ebx  +
push edi  +
push 1000h  +
push esi  +
lea eax [ebp-10h] +
xor ebx ebx +
push eax  +
lea edi [esi+4Ch] +
push 54000001h  +
mov ecx edi +
mov [ebp-10h] ebx +
mov [ebp-0Ch] ebx +
mov [ebp-8] ebx +
mov [ebp-4] ebx +
call ?Create@CProgressCtrl@@QAEHKABUtagRECT@@PAVCWnd@@I@Z  +
push 1001h  +
push esi  +
lea eax [ebp-10h] +
push eax  +
push 5400000Bh  +
push offset word_100A5FC  +
lea ecx [esi+94h] +
call ?Create@CStatic@@QAEHPBGKABUtagRECT@@PAVCWnd@@I@Z  +
push 0A0h  +
push ebx  +
push 20000h  +
mov ecx edi +
call ?ModifyStyleEx@CWnd@@QAEHKKI@Z  +
mov ecx esi +
call sub_1033BE2  +
pop edi  +
xor eax eax +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1FCh +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+114h] +
mov ecx edi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 29h  +
mov [ebp+pvParam] 1F8h +
call ds:SystemParametersInfoW  +
lea eax [ebp+var_C0] +
push eax  +
mov ecx edi +
call sub_10305F1  +
push 0  +
push edi  +
lea ecx [esi+94h] +
call sub_1033C54  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1033C63  +
mov eax [eax+4] +
push [ebp+lParam]  +
push eax  +
push 30h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
call sub_1033CB4  +
mov edi eax +
mov eax [edi+4] +
mov esi [eax] +
cmp esi eax +
jz loc_1033CAB  +
push dword ptr [esi+8]  +
call ds:IsWindow  +
test eax eax +
jz loc_1063D22  +
mov esi [esi] +
cmp esi [edi+4] +
jnz loc_1033C93  +
pop edi  +
pop esi  +
leave   +
retn   +
***
call sub_1001F95  +
test byte ptr dword_10F5370 1 +
mov esi offset unk_10F5408 +
jz loc_1037C00  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aAppendtosystem  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov dword ptr [ebp-14h] offset off_10025A8 +
mov [ebp-10h] ebx +
push 0A2h  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
call sub_1020746  +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp-14h] +
test al al +
jnz loc_1063D78  +
push dword ptr [ebp+0Ch]  +
call sub_1010BE0  +
mov esi eax +
push 8000FFFFh  +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1063D94  +
push ebx  +
push esi  +
push dword ptr [ebp+8]  +
call sub_1033DC7  +
mov esi eax +
lea ecx [ebp-14h] +
mov [ebp-4] bl +
call sub_100BF07  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
call sub_100C4D0  +
mov edi [ebp+8] +
mov ebx [ebp+0Ch] +
mov esi [ebp+10h] +
push 0  +
lea ecx [ebp-0A8h] +
mov [ebp-94h] edi +
mov [ebp-0ACh] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aAppendtosystem  +
lea ecx [ebp-0A8h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push ebx  +
push edi  +
lea eax [ebp-0F0h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-0A8h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-0F0h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0A8h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1063D61  +
push dword ptr [edi+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_1063D50  +
push dword ptr [ebx+4]  +
call ds:IsMenu  +
test eax eax +
jz loc_1063D50  +
test esi esi +
jnz loc_1033E8E  +
push esi  +
mov ecx edi +
call sub_102132D  +
mov esi eax +
test esi esi +
jz loc_1063D61  +
call sub_1033C7B  +
call sub_1033CB4  +
mov ecx [ebp-94h] +
mov ebx eax +
mov edi [ebx+4] +
mov eax [edi] +
add ecx 20h +
push ecx  +
push edi  +
push eax  +
lea eax [ebp-98h] +
push eax  +
call sub_10113C1  +
cmp [eax] edi +
jnz loc_103403D  +
mov eax [ebp-94h] +
add eax 20h +
push eax  +
mov ecx ebx +
call sub_1034113  +
mov ecx [ebp-94h] +
call ?GetStyle@CWnd@@QBEKXZ  +
mov ebx 7FFFBFFBh +
mov edi 80004005h +
test eax 40000000h +
jz loc_103400A  +
push 0  +
push 0F040h  +
push dword ptr [esi+4]  +
call ds:GetMenuState  +
cmp eax 0FFFFFFFFh +
jnz loc_103400A  +
lea ecx [ebp-98h] +
call ??0CString@@QAE@XZ  +
push 343Fh  +
lea eax [ebp-98h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_101220E  +
push dword ptr [ebp-98h]  +
mov eax 0F060h +
push eax  +
push 0  +
push eax  +
push dword ptr [esi+4]  +
call ds:ModifyMenuW  +
neg eax  +
sbb eax eax +
and eax ebx +
add eax edi +
push eax  +
lea ecx [ebp-0A8h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-0A8h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
push 0  +
push 0  +
push 800h  +
push dword ptr [esi+4]  +
call ds:AppendMenuW  +
neg eax  +
sbb eax eax +
and eax ebx +
add eax edi +
push eax  +
lea ecx [ebp-0A8h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-0A8h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
lea ecx [ebp-0B0h] +
call ??0CString@@QAE@XZ  +
push 3440h  +
lea eax [ebp-0B0h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_101220E  +
push dword ptr [ebp-0B0h]  +
push 0F040h  +
push 0  +
push dword ptr [esi+4]  +
call ds:AppendMenuW  +
neg eax  +
sbb eax eax +
and eax ebx +
add eax edi +
push eax  +
lea ecx [ebp-0A8h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-0A8h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-98h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
push 0  +
push 0  +
push 800h  +
push dword ptr [esi+4]  +
call ds:AppendMenuW  +
neg eax  +
sbb eax eax +
and eax ebx +
add eax edi +
push eax  +
lea ecx [ebp-0A8h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-0A8h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov edi [ebp-0ACh] +
push dword ptr [edi+4]  +
xor ebx ebx +
mov [ebp-94h] ebx +
call ds:GetMenuItemCount  +
lea ecx [ebp-90h] +
mov [ebp-0ACh] eax +
mov dword ptr [ebp-0E0h] 30h +
mov dword ptr [ebp-0DCh] 16h +
mov [ebp-0BCh] ecx +
test eax eax +
jle loc_10340F0  +
lea eax [ebp-0E0h] +
push eax  +
push 1  +
push ebx  +
push dword ptr [edi+4]  +
mov dword ptr [ebp-0B8h] 40h +
call ds:GetMenuItemInfoW  +
test eax eax +
jz loc_1063D37  +
test dword ptr [ebp-0D8h] 800h +
jnz loc_10340C5  +
push 0  +
push dword ptr [ebp-0D0h]  +
push dword ptr [esi+4]  +
call ds:GetMenuState  +
cmp eax 0FFFFFFFFh +
jnz loc_10340E7  +
lea eax [ebp-90h] +
push eax  +
push dword ptr [ebp-0D0h]  +
push dword ptr [ebp-0D8h]  +
push dword ptr [esi+4]  +
call ds:AppendMenuW  +
inc dword ptr [ebp-94h]  +
inc ebx  +
cmp ebx [ebp-0ACh] +
jl loc_103407E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0A8h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-94h] +
call sub_100C50D  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax [ecx+4] +
push eax  +
call sub_10212A9  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCdirectuire_12  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-30h] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_100CB6E  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ebx  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_1069E54  +
mov eax [ebp+0Ch] +
mov [edi+10h] eax +
mov eax [ebp+10h] +
mov ecx edi +
mov [edi+14h] eax +
call near ptr dword_102B068+3  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_1069E88  +
mov ecx edi +
call sub_1034429  +
push 8000FFFFh  +
push eax  +
mov [edi+18h] eax +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ebx  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call esi  +
xor ecx ecx +
cmp eax ecx +
jl loc_1069EAE  +
lea eax [edi+1Ch] +
push eax  +
push 2  +
push 40000000h  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push dword ptr [edi+14h]  +
push dword ptr [ebp+8]  +
call ?Create@NativeHWNDHost@DirectUI@@SGJPBGPAUHWND__@@PAUHICON__@@HHHHHHIPAPAV12@@Z  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_1069ED4  +
push 8000FFFFh  +
push dword ptr [edi+1Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call ebx  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_1069EFD  +
mov ecx [edi+1Ch] +
lea ebx [edi+20h] +
push ebx  +
lea eax [ebp-10h] +
push eax  +
push 0  +
push 0  +
push 1  +
call ?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ?Create@HWNDElement@DirectUI@@SGJPAUHWND__@@_NIPAVElement@2@PAKPAPAV42@@Z  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_1069F26  +
push 8000FFFFh  +
push dword ptr [ebx]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_1069F4F  +
push dword ptr [ebp-10h]  +
mov ecx [ebx] +
call ?EndDefer@Element@DirectUI@@QAEXK@Z  +
push 0  +
push offset aActions  +
push 10h  +
push dword ptr [ebx]  +
mov ecx edi +
call sub_100D4ED  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_1069F78  +
mov ecx [edi+18h] +
lea eax [edi+24h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push 0  +
push dword ptr [ebx]  +
push dword ptr [ebp+8]  +
call ?CreateElement@DUIXmlParser@DirectUI@@QAEJPBGPAVElement@2@1PAKPAPAV32@@Z  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_1069FA1  +
push 8000FFFFh  +
push dword ptr [edi+24h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_1069FCA  +
push dword ptr [ebp-10h]  +
mov ecx [edi+24h] +
call ?EndDefer@Element@DirectUI@@QAEXK@Z  +
push dword ptr [ebx]  +
mov ecx [edi+1Ch] +
call ?Host@NativeHWNDHost@DirectUI@@QAEXPAVElement@2@@Z  +
mov ecx [ebx] +
push 1  +
call ?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [edi+1Ch] +
push 1  +
call ?ShowWindow@NativeHWNDHost@DirectUI@@QAEXH@Z  +
push 0FFFFFFECh  +
push dword ptr [ebp+10h]  +
call ds:GetWindowLongW  +
test eax 400000h +
jnz loc_1069FF3  +
lea ecx [ebp-20h] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCdirectuiren_7  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push ebx  +
push offset loc_10D01C3  +
push ebx  +
push ebx  +
lea eax [ebp-10h] +
push eax  +
mov [ebp-10h] ebx +
call ?Create@DUIXmlParser@DirectUI@@SGJPAPAV12@P6GPAVValue@2@PBGPAX@Z2P6GX11H2@Z2@Z  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-24h] +
call esi  +
cmp eax ebx +
jl loc_1069CEB  +
mov edi 8000FFFFh +
push edi  +
push dword ptr [ebp-10h]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call esi  +
cmp eax ebx +
jl loc_1069D11  +
mov eax [ebp-14h] +
mov ecx [ebp-10h] +
push offset __ImageBase  +
push dword ptr [eax+10h]  +
push 1770h  +
call ?SetXMLFromResource@DUIXmlParser@DirectUI@@QAEJIPAUHINSTANCE__@@0@Z  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call esi  +
test eax eax +
jl loc_1069D37  +
mov esi [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov eax [esi+4] +
test eax eax +
jz loc_1011A9F  +
mov eax [eax+1Ch] +
test eax eax +
jz loc_1034568  +
mov ecx eax +
call ?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
lea ecx [esi+8] +
call ?Attach@CWnd@@QAEHPAUHWND__@@@Z  +
jmp loc_1011A92  +
xor eax eax +
jmp loc_103455A  +
***
xor eax eax +
push eax  +
push eax  +
push eax  +
push offset aTaskbutton  +
push offset __ImageBase  +
call sub_10345AF  +
retn   +
***
call sub_1001F95  +
mov esi ?GetClassInfoPtr@Button@DirectUI@@SGPAUIClassInfo@2@XZ +
xor edi edi +
call esi  +
test eax eax +
jz loc_106A769  +
call esi  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx]  +
test edi edi +
jl loc_1034662  +
call ?GetFactoryLock@Element@DirectUI@@SGPAU_RTL_CRITICAL_SECTION@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call ??0CritSecLock@DirectUI@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z  +
and dword ptr [ebp-4] 0 +
call esi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ebp+14h]  +
lea eax [ebp-10h] +
push dword ptr [ebp+10h]  +
push eax  +
call ?ClassExist@ClassInfoBase@DirectUI@@SG_NPAPAUIClassInfo@2@PBQBUPropertyInfo@2@IPAU32@PAUHINSTANCE__@@PBG_N@Z  +
test al al +
jnz loc_10438B2  +
and dword_10F53E4 0 +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1038806  +
mov edi eax +
test edi edi +
jl loc_1034655  +
mov esi [ebp+14h] +
mov ecx esi +
call ?Register@ClassInfoBase@DirectUI@@QAEJXZ  +
mov edi eax +
test edi edi +
jl loc_10438C1  +
mov dword_10F53E4 esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CritSecLock@DirectUI@@QAE@XZ  +
mov eax edi +
call sub_1001FCF  +
retn 14h  +
***
xor eax eax +
push eax  +
push eax  +
push eax  +
push offset aActclipper  +
push offset __ImageBase  +
call sub_10346A3  +
retn   +
***
call sub_1001F95  +
mov esi ?GetClassInfoPtr@Element@DirectUI@@SGPAUIClassInfo@2@XZ +
xor edi edi +
call esi  +
test eax eax +
jz loc_106A7AC  +
call esi  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx]  +
test edi edi +
jl loc_1034756  +
call ?GetFactoryLock@Element@DirectUI@@SGPAU_RTL_CRITICAL_SECTION@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call ??0CritSecLock@DirectUI@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z  +
and dword ptr [ebp-4] 0 +
call esi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ebp+14h]  +
lea eax [ebp-10h] +
push dword ptr [ebp+10h]  +
push eax  +
call ?ClassExist@ClassInfoBase@DirectUI@@SG_NPAPAUIClassInfo@2@PBQBUPropertyInfo@2@IPAU32@PAUHINSTANCE__@@PBG_N@Z  +
test al al +
jnz loc_10438CD  +
and dword_10F53E8 0 +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_103AA7E  +
mov edi eax +
test edi edi +
jl loc_1034749  +
mov esi [ebp+14h] +
mov ecx esi +
call ?Register@ClassInfoBase@DirectUI@@QAEJXZ  +
mov edi eax +
test edi edi +
jl loc_10438DC  +
mov dword_10F53E8 esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CritSecLock@DirectUI@@QAE@XZ  +
mov eax edi +
call sub_1001FCF  +
retn 14h  +
***
xor eax eax +
push eax  +
push eax  +
push eax  +
push offset aActexpando  +
push offset __ImageBase  +
call sub_1034797  +
retn   +
***
call sub_1001F95  +
mov esi ?GetClassInfoPtr@Element@DirectUI@@SGPAUIClassInfo@2@XZ +
xor edi edi +
call esi  +
test eax eax +
jz loc_106A842  +
call esi  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx]  +
test edi edi +
jl loc_103484A  +
call ?GetFactoryLock@Element@DirectUI@@SGPAU_RTL_CRITICAL_SECTION@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call ??0CritSecLock@DirectUI@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z  +
and dword ptr [ebp-4] 0 +
call esi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ebp+14h]  +
lea eax [ebp-10h] +
push dword ptr [ebp+10h]  +
push eax  +
call ?ClassExist@ClassInfoBase@DirectUI@@SG_NPAPAUIClassInfo@2@PBQBUPropertyInfo@2@IPAU32@PAUHINSTANCE__@@PBG_N@Z  +
test al al +
jnz loc_10438E8  +
and dword_10F53EC 0 +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_103ABC5  +
mov edi eax +
test edi edi +
jl loc_103483D  +
mov esi [ebp+14h] +
mov ecx esi +
call ?Register@ClassInfoBase@DirectUI@@QAEJXZ  +
mov edi eax +
test edi edi +
jl loc_10438F7  +
mov dword_10F53EC esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CritSecLock@DirectUI@@QAE@XZ  +
mov eax edi +
call sub_1001FCF  +
retn 14h  +
***
push [ebp+hWnd]  +
call ds:GetDlgCtrlID  +
cmp eax 31F2h +
jnz loc_1008B4B  +
push 2  +
pop eax  +
jmp loc_1008B5B  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_10110C4 +
call sub_1031205  +
and dword ptr [esi+10h] 0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
lea edi [esi+174h] +
mov ecx [edi] +
lea eax [esi+74h] +
add ecx 4Ch +
push eax  +
call sub_102124D  +
mov ecx [edi] +
add ecx 4Ch +
lea eax [esi+0F8h] +
neg eax  +
lea edx [esi+138h] +
sbb eax eax +
and eax edx +
push eax  +
call sub_102124D  +
jmp loc_1030EEA  +
***
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1010D60 +
call sub_1031205  +
and dword ptr [esi+10h] 0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
or dword ptr [eax+20h] 400428Dh +
or dword ptr [eax+2Ch] 20000h +
push eax  +
call ?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1030614  +
lea edi [esi+40h] +
xor ebx ebx +
mov ecx edi +
mov [ebp-4] ebx +
call sub_1030576  +
lea ecx [esi+50h] +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_1003804 +
mov dword ptr [edi] offset off_100E738 +
call ??0CString@@QAE@XZ  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 2 +
call ??0CString@@QAE@XZ  +
mov [esi+5Ch] ebx +
mov eax offset off_10083D0 +
mov [esi+58h] eax +
mov [esi+60h] eax +
mov [esi+64h] ebx +
mov [esi+68h] ebx +
mov [esi+6Ch] ebx +
mov dword ptr [esi+70h] 18h +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_102F5E6  +
mov dword ptr [esi] offset off_1010E3C +
and dword ptr [esi+10h] 0 +
and dword ptr [esi+14h] 0 +
mov eax esi +
pop esi  +
retn   +
***
push offset aSystreeview32  +
mov esi ecx +
call ??0CCtrlView@@QAE@PBGK@Z  +
mov dword ptr [esi] offset off_1034A7C +
mov eax esi +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
and dword ptr [esi] 0 +
push dword ptr [ebp+8]  +
call sub_100BF49  +
test eax eax +
jl loc_10647E3  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
jmp ds:?OnCreate@CMDIChildWnd@@IAEHPAUtagCREATESTRUCTW@@@Z  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
cmp eax 0FFFFFFFFh +
jz loc_105ED63  +
mov ecx esi +
call sub_1034C62  +
xor eax eax +
pop esi  +
retn 4  +
***
call sub_100C4D0  +
mov edi ds:SystemParametersInfoW +
xor ebx ebx +
push ebx  +
lea eax [ebp-6Ch] +
push eax  +
push 5Ch  +
mov esi ecx +
push 1Fh  +
mov dword ptr [esi+70h] 18h +
call edi  +
lea eax [ebp-6Ch] +
push eax  +
lea ecx [esi+60h] +
call sub_10305F1  +
push ebx  +
lea eax [ebp-6Ch] +
push eax  +
push 5Ch  +
push 1Fh  +
call edi  +
lea eax [ebp-6Ch] +
lea edi [esi+58h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-5Ch] 2BCh +
call sub_10305F1  +
push esi  +
lea ecx [ebp-94h] +
mov dword ptr [ebp-70h] 30h +
call ??0CWindowDC@@QAE@PAVCWnd@@@Z  +
push edi  +
lea ecx [ebp-94h] +
mov [ebp-4] ebx +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
mov edi eax +
push 1  +
lea eax [ebp-70h] +
push eax  +
lea eax [ebp-9Ch] +
push eax  +
lea ecx [ebp-94h] +
call sub_1034D8B  +
mov eax [eax+4] +
mov [esi+6Ch] eax +
push 1  +
lea eax [ebp-70h] +
push eax  +
lea eax [ebp-9Ch] +
push eax  +
lea ecx [ebp-94h] +
mov dword ptr [ebp-70h] 20h +
call sub_1034D8B  +
mov eax [eax] +
add eax eax +
push 2Eh  +
mov [esi+68h] eax +
call ds:GetSystemMetrics  +
mov ecx [esi+6Ch] +
lea eax [ecx+eax*2] +
mov ecx esi +
mov [ebp-80h] ebx +
mov [ebp-7Ch] ebx +
mov [ebp-78h] ebx +
mov [ebp-74h] eax +
call ?GetExStyle@CWnd@@QBEKXZ  +
push eax  +
push ebx  +
mov ecx esi +
call ?GetStyle@CWnd@@QBEKXZ  +
push eax  +
lea eax [ebp-80h] +
push eax  +
call ds:AdjustWindowRectEx  +
mov eax [ebp-74h] +
sub eax [ebp-7Ch] +
cmp eax [esi+70h] +
jg loc_105ECEF  +
push edi  +
lea ecx [ebp-94h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-94h] +
call ??1CWindowDC@@UAE@XZ  +
call sub_100C50D  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [ecx+8]  +
call ds:GetTextExtentPoint32W  +
mov ecx [ebp+var_8._cx] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+var_8.cy] +
mov [eax+4] ecx +
leave   +
retn 0Ch  +
***
mov eax esi +
pop esi  +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_1034EDC +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CImageList@@QAE@XZ  +
movzx ecx word ptr [ebp+0Ch] +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
push 2  +
push ecx  +
push eax  +
mov dword ptr [esi] offset off_10350E8 +
mov [esi+8] eax +
call ds:FindResourceW  +
mov ecx esi +
mov [esi+0Ch] eax +
call sub_10367B1  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ??0CPtrList@@QAE@H@Z  +
mov dword ptr [esi] offset off_10351A8 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_1035264 +
mov eax esi +
pop esi  +
retn   +
***
push 4  +
mov eax offset dword_10E7528 +
call sub_1001F95  +
push 108h  +
call sub_100ABF0  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10353A6  +
call sub_10353B1  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call near ptr dword_1034A54+4  +
xor edi edi +
lea ecx [esi+4Ch] +
mov [ebp-4] edi +
call sub_10372BD  +
lea ebx [esi+64h] +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_1034A37  +
mov dword ptr [esi] offset off_100565C +
mov dword ptr [esi+4Ch] offset off_1010EE0 +
mov dword ptr [ebx] offset off_1010EBC +
mov [esi+88h] edi +
mov [esi+8Ch] edi +
mov [esi+90h] edi +
mov [esi+94h] edi +
mov [esi+98h] edi +
lea ebx [esi+0A8h] +
mov ecx ebx +
mov byte ptr [ebp-4] 7 +
call sub_1037341  +
push esi  +
lea ecx [esi+0D4h] +
mov byte ptr [ebp-4] 8 +
call sub_1036D59  +
lea ecx [esi+100h] +
mov byte ptr [ebp-4] 9 +
call ??0CString@@QAE@XZ  +
mov [esi+104h] edi +
push 0Ch  +
mov byte ptr [ebp-4] 0Bh +
mov [esi+9Ch] edi +
mov [esi+0A0h] edi +
mov [esi+0A4h] edi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_10354AF  +
mov dword ptr [eax] offset off_10354B8 +
mov [eax+4] edi +
mov [eax+8] edi +
mov [esi+7Ch] eax +
cmp eax edi +
jz loc_1064DE8  +
mov [eax+4] esi +
mov eax [esi+7Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
push ebx  +
lea ecx [esi+4Ch] +
mov dword ptr [esi+84h] 1 +
mov [esi+80h] edi +
call sub_102124D  +
mov eax esi +
call sub_1001FCF  +
retn   +
xor eax eax +
jmp loc_1035477  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  ds:dbl_1034858 +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push edi  +
push edi  +
push 1  +
push ecx  +
push ecx  +
mov esi ecx +
fstp  [esp+24h+var_24] +
push offset aNumber  +
lea ecx [esi+8] +
call sub_10355D0  +
mov ecx [ebp+arg_0] +
lea eax [esi+88h] +
mov dword ptr [esi] offset off_1010FFC +
mov [eax+4] eax +
mov [eax] eax +
push 0Ah  +
pop edx  +
lea eax [esi+90h] +
mov [eax] ecx +
mov [esi+94h] edi +
mov [esi+98h] edi +
mov [esi+9Ch] edi +
cmp ecx edx +
jb loc_105705A  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
fld  [ebp+arg_4] +
push [ebp+arg_1C]  +
mov esi ecx +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push ecx  +
push ecx  +
fstp  [esp+20h+var_20] +
push offset nullsub_1  +
push offset loc_106F6AB  +
push offset loc_10544CB  +
push offset loc_10544A2  +
push [ebp+arg_0]  +
call sub_1035617  +
mov eax esi +
pop esi  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_2C] +
push esi  +
mov esi ecx +
xor ecx ecx +
mov [esi+18h] ecx +
mov [esi+1Ch] ecx +
mov byte ptr [esi+6Ah] 7 +
mov byte ptr [esi+6Bh] 6 +
mov [esi+6Ch] ecx +
cmp eax ecx +
jnz loc_103563E  +
mov eax offset off_10F56E8 +
push [ebp+arg_1C]  +
fld  [ebp+arg_14] +
cmp [ebp+arg_28] cl +
push ecx  +
push ecx  +
fstp  [esp+10h+var_10] +
push [ebp+arg_0]  +
mov [esi+70h] eax +
push [ebp+arg_10]  +
mov al [ebp+arg_24] +
push [ebp+arg_C]  +
mov [esi+74h] al +
push [ebp+arg_8]  +
setz al  +
push [ebp+arg_4]  +
mov ecx esi +
mov [esi+75h] al +
call sub_10373F5  +
mov ecx esi +
call sub_1035684  +
mov eax esi +
pop esi  +
pop ebp  +
retn 30h  +
***
cmp dword ptr [ecx+6Ch] 0 +
jnz locret_1035698  +
add ecx 78h +
push ecx  +
mov ecx offset dword_10F542C +
call sub_103569E  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1010F85  +
mov ecx [ebp+arg_0] +
lea eax [esi+4] +
mov [ecx+4] eax +
mov edx [eax] +
mov [ecx] edx +
mov [edx+4] ecx +
mov [eax] ecx +
mov ecx esi +
call sub_1010FCF  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+20h] +
and eax 0FF7FFFFFh +
push edi  +
or eax 2000000h +
push esi  +
mov [esi+20h] eax +
call ?PreCreateWindow@CView@@MAEHAAUtagCREATESTRUCTW@@@Z  +
cmp byte_10F52C2 0 +
mov edi ds:off_103574C +
mov ebx eax +
jnz loc_103573F  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
lea ecx [ebp+WndClass] +
push ecx  +
push dword ptr [esi+28h]  +
push eax  +
call ds:GetClassInfoW  +
test eax eax +
jz loc_1035736  +
and [ebp+WndClass.style] 0FFFFFFFCh +
lea eax [ebp+WndClass] +
push eax  +
mov [ebp+WndClass.lpszClassName] edi +
call ?AfxRegisterClass@@YGHPAUtagWNDCLASSW@@@Z  +
test eax eax +
setnz byte_10F52C2  +
cmp byte_10F52C2 0 +
jz loc_1035742  +
mov [esi+28h] edi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jz loc_105AB0C  +
push 248h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_10357B9  +
push esi  +
call sub_10357F3  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_10357E9  +
lea ecx [esi+30h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_105AB2B  +
xor ebx ebx +
test ebx ebx +
jnz loc_105AB2B  +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
mov ebx [ebp-18h] +
jmp loc_10357DD  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1035827  +
push offset Addend  +
mov dword ptr [esi] offset off_100EE4C +
mov dword ptr [esi+4] offset off_1010C64 +
mov dword ptr [esi+1Ch] offset off_1010C48 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+2Ch] +
call sub_1041A02  +
lea ebx [esi+4] +
xor edi edi +
mov ecx ebx +
mov [ebp-4] edi +
call sub_10368DD  +
lea ecx [esi+1Ch] +
mov byte ptr [ebp-4] 1 +
call sub_102F5E6  +
lea ecx [esi+98h] +
mov byte ptr [ebp-4] 2 +
mov dword ptr [esi] offset off_100F12C +
mov dword ptr [ebx] offset off_1010E1C +
mov dword ptr [esi+1Ch] offset off_1010E00 +
mov [esi+8Ch] edi +
mov [esi+90h] edi +
mov [esi+94h] edi +
call ??0CImageList@@QAE@XZ  +
lea ecx [esi+0A0h] +
mov byte ptr [ebp-4] 3 +
call ??0CImageList@@QAE@XZ  +
lea ecx [esi+0A8h] +
mov byte ptr [ebp-4] 4 +
call sub_1036624  +
mov byte ptr [ebp-4] 5 +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+0Ch] +
push 0A8h  +
push eax  +
lea ecx [esi+0C0h] +
call sub_1035099  +
lea ebx [esi+0D0h] +
mov ecx ebx +
mov byte ptr [ebp-4] 6 +
call sub_1036701  +
push esi  +
lea ecx [esi+158h] +
mov byte ptr [ebp-4] 7 +
call sub_1036323  +
mov [esi+184h] edi +
mov [esi+188h] edi +
mov [esi+18Ch] edi +
push 0C8h  +
lea ecx [esi+1A8h] +
mov byte ptr [ebp-4] 0Bh +
mov [esi+1A4h] edi +
call sub_103555A  +
lea ecx [esi+0E4h] +
push edi  +
mov byte ptr [ebp-4] 0Ch +
mov dword ptr [ebx] 1 +
mov [esi+0D8h] edi +
mov [esi+0E0h] esi +
call sub_101C50A  +
lea ecx [esi+118h] +
push edi  +
call sub_101C50A  +
push 0FCh  +
mov [esi+150h] edi +
mov [esi+0D4h] edi +
mov [esi+154h] edi +
mov [esi+190h] edi +
mov [esi+194h] edi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov byte ptr [ebp-4] 0Dh +
cmp eax edi +
jz loc_10359B8  +
mov ecx eax +
call sub_10359C1  +
push 2Ch  +
mov [esi+50h] eax +
lea eax [esi+5Ch] +
push edi  +
push eax  +
mov [esi+54h] edi +
mov [esi+198h] edi +
mov [esi+19Ch] edi +
mov [esi+1A0h] edi +
mov [esi+58h] edi +
call memset  +
mov eax [esi+50h] +
mov [esi+4Ch] eax +
add esp 0Ch +
mov eax esi +
call sub_1001FCF  +
retn   +
xor eax eax +
jmp loc_1035980  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10364BF  +
and dword ptr [ebp-4] 0 +
lea edi [esi+54h] +
mov dword ptr [esi+4Ch] offset off_1030440 +
mov ecx edi +
mov dword ptr [esi+50h] offset off_1035A8C +
call sub_1034A37  +
lea ebx [esi+6Ch] +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_103685A  +
lea ecx [esi+88h] +
mov byte ptr [ebp-4] 2 +
mov dword ptr [esi] offset off_100316C +
mov dword ptr [esi+4Ch] offset off_1010DE0 +
mov dword ptr [esi+50h] offset off_1010DC4 +
mov dword ptr [edi] offset off_1010DA0 +
mov dword ptr [ebx] offset off_1010D80 +
mov byte ptr [esi+84h] 0 +
mov byte ptr [esi+85h] 0 +
mov byte ptr [esi+86h] 0 +
call sub_100AD56  +
and dword ptr [esi+9Ch] 0 +
lea ecx [esi+0A0h] +
mov byte ptr [ebp-4] 3 +
call sub_1035A95  +
or dword ptr [esi+0E0h] 0FFFFFFFFh +
lea ecx [esi+0E4h] +
mov byte ptr [ebp-4] 4 +
call sub_1021775  +
mov byte ptr [esi+0F8h] 0 +
mov byte ptr [esi+0F9h] 1 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1034EBD  +
mov dword ptr [esi] offset off_1035AB4 +
mov eax esi +
pop esi  +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1010C84 +
call sub_1031205  +
and dword ptr [esi+10h] 0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
push 4  +
mov eax offset dword_10E0D20 +
call sub_1001F95  +
push 340h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1035DD7  +
call sub_1035DE2  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov ebx ecx +
mov [ebp-10h] ebx +
call near ptr dword_1030A58+3  +
lea edi [ebx+48h] +
xor esi esi +
mov ecx edi +
mov [ebp-4] esi +
mov dword ptr [ebx+44h] offset off_10360DC +
call sub_102F5E6  +
lea ecx [ebx+5Ch] +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ebx+58h] offset off_101D76C +
call near ptr dword_1035BD0+64h  +
lea ecx [ebx+74h] +
mov byte ptr [ebp-4] 2 +
call sub_1030576  +
lea ecx [ebx+84h] +
mov byte ptr [ebp-4] 3 +
call near ptr dword_10348B0+5  +
lea ecx [ebx+94h] +
mov byte ptr [ebp-4] 4 +
call near ptr dword_10348D8+5  +
lea ecx [ebx+0A4h] +
mov byte ptr [ebp-4] 5 +
call near ptr dword_1034900+5  +
lea ecx [ebx+0B4h] +
mov byte ptr [ebp-4] 6 +
call sub_10305B1  +
mov dword ptr [ebx] offset off_1002D84 +
mov dword ptr [ebx+44h] offset off_100C5EC +
mov dword ptr [edi] offset off_1010D24 +
mov dword ptr [ebx+58h] offset off_100B974 +
mov dword ptr [ebx+5Ch] offset off_1010D04 +
mov dword ptr [ebx+74h] offset off_100E5C4 +
mov dword ptr [ebx+84h] offset off_1010CE4 +
mov dword ptr [ebx+94h] offset off_1010CC4 +
mov dword ptr [ebx+0A4h] offset off_1010CA4 +
mov dword ptr [ebx+0B4h] offset off_100F394 +
mov [ebx+0C4h] esi +
mov [ebx+0D4h] esi +
mov [ebx+0D8h] esi +
lea ecx [ebx+0F8h] +
mov byte ptr [ebp-4] 0Ah +
call near ptr dword_10349C0+3  +
push 98h  +
mov byte ptr [ebp-4] 0Bh +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
mov byte ptr [ebp-4] 0Ch +
cmp eax esi +
jz loc_10360C8  +
push ebx  +
mov ecx eax +
call sub_1036218  +
lea ecx [ebx+1F4h] +
mov byte ptr [ebp-4] 0Bh +
mov [ebx+18Ch] eax +
call ??0CString@@QAE@XZ  +
lea ecx [ebx+1F8h] +
mov byte ptr [ebp-4] 0Dh +
call near ptr dword_1035CB0+5  +
mov [ebx+318h] esi +
mov [ebx+31Ch] esi +
mov [ebx+320h] esi +
mov [ebx+324h] esi +
mov [ebx+328h] esi +
lea ecx [ebx+330h] +
mov byte ptr [ebp-4] 13h +
call near ptr dword_1035BD0+5  +
mov byte ptr [ebp-4] 14h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1035F6B  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105CAAF  +
or dword ptr [ebx+194h] 0FFFFFFFFh +
or dword ptr [ebx+1A4h] 0FFFFFFFFh +
or dword ptr [ebx+1B4h] 0FFFFFFFFh +
mov [ebx+32Ch] esi +
mov [ebx+0CCh] esi +
mov [ebx+174h] esi +
mov [ebx+178h] esi +
mov [ebx+17Ch] esi +
mov [ebx+180h] esi +
mov [ebx+184h] esi +
mov [ebx+188h] esi +
mov [ebx+0C8h] esi +
mov [ebx+190h] esi +
mov [ebx+1A0h] esi +
mov [ebx+1B0h] esi +
mov [ebx+314h] esi +
mov dword ptr [ebx+1D0h] 1 +
push 64h  +
pop eax  +
mov [ebx+19Ch] eax +
mov [ebx+1ACh] eax +
mov [ebx+1BCh] eax +
mov eax offset unk_10F5720 +
mov esi eax +
lea edi [ebx+2E0h] +
movs   +
movs   +
movs   +
movs   +
mov esi eax +
lea edi [ebx+2F0h] +
movs   +
movs   +
movs   +
movs   +
mov esi eax +
lea edi [ebx+300h] +
movs   +
movs   +
movs   +
movs   +
xor esi esi +
push 40h  +
mov [ebx+0D0h] esi +
mov dword ptr [ebx+0E4h] 0C8h +
mov [ebx+0E8h] esi +
mov [ebx+0E0h] esi +
mov byte ptr [ebx+0F4h] 0 +
mov [ebx+1E0h] esi +
mov [ebx+170h] esi +
mov [ebx+1D8h] esi +
mov byte ptr [ebx+0ECh] 0 +
mov [ebx+0F0h] esi +
mov byte ptr [ebx+1DCh] 0 +
mov byte ptr [ebx+1DDh] 0 +
mov byte ptr [ebx+1DEh] 0 +
mov byte ptr [ebx+1D5h] 0 +
mov byte ptr [ebx+1DFh] 0 +
mov byte ptr [ebx+33Ch] 0 +
mov byte ptr [ebx+33Dh] 0 +
call sub_100ABF0  +
mov [ebp-14h] eax +
mov byte ptr [ebp-4] 15h +
cmp eax esi +
jz loc_10360CF  +
push ebx  +
mov ecx eax +
call sub_1036191  +
mov [ebx+310h] eax +
mov [ebx+16Ch] esi +
cmp dword_10F55CC esi +
setz al  +
mov [ebx+0DCh] al +
mov eax ebx +
call sub_1001FCF  +
retn   +
xor eax eax +
jmp loc_1035F00  +
xor eax eax +
jmp loc_10360A5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
lea ecx [esi+4] +
mov [esi] ebx +
call sub_10361E0  +
lea ecx [esi+24h] +
mov [esi+18h] ebx +
mov [esi+1Ch] bl +
mov [esi+1Dh] bl +
mov [esi+1Eh] bl +
mov [esi+1Fh] bl +
mov [esi+20h] bl +
mov [esi+21h] bl +
call sub_1023117  +
mov eax [ebp+arg_0] +
mov [esi+10h] eax +
mov eax [esi+8] +
mov eax [eax] +
mov [esi] eax +
mov [esi+14h] ebx +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10361FA  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_1023086  +
test eax eax +
jz loc_1036209  +
mov [eax] eax +
lea ecx [eax+4] +
test ecx ecx +
jz locret_1036212  +
mov [ecx] eax +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call near ptr dword_1030A58+3  +
xor ebx ebx +
lea edi [esi+44h] +
mov ecx edi +
mov [ebp-4] ebx +
mov [esi+54h] ebx +
mov [esi+58h] ebx +
call sub_102F5E6  +
lea ecx [esi+5Ch] +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_10043B4 +
mov dword ptr [edi] offset off_1010E80 +
call sub_10362B5  +
mov [esi+70h] ebx +
mov eax offset off_10083D0 +
mov [esi+6Ch] eax +
mov [esi+74h] eax +
mov eax [ebp+8] +
mov [esi+78h] ebx +
mov [esi+7Ch] eax +
mov [esi+80h] bl +
mov [esi+94h] ebx +
or dword ptr [esi+68h] 0FFFFFFFFh +
mov [esi+54h] ebx +
mov [esi+58h] ebx +
mov [esi+84h] ebx +
mov [esi+88h] ebx +
mov [esi+8Ch] ebx +
mov [esi+90h] ebx +
mov [esi+81h] bl +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10362CF  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_10362ED  +
test eax eax +
jz loc_10362DE  +
mov [eax] eax +
lea ecx [eax+4] +
test ecx ecx +
jz locret_10362E7  +
mov [ecx] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_105F79E  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 5Ch +
jb loc_105F7A5  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1041C45  +
mov eax [ebp+arg_0] +
mov [esi+28h] eax +
mov dword ptr [esi] offset off_1036348 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
or dword ptr [eax+20h] 680024Dh +
push eax  +
call ?PreCreateWindow@CListView@@UAEHAAUtagCREATESTRUCTW@@@Z  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push 1  +
push ds:off_1036418  +
push offset dword_1036408  +
call sub_102F6C1  +
mov dword ptr [esi] offset off_1036404 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push 1  +
push ds:off_103648C  +
push offset dword_103647C  +
call sub_102F6C1  +
mov dword ptr [esi] offset off_1036478 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 50800000h  +
push offset aSyslistview32  +
mov esi ecx +
call ??0CCtrlView@@QAE@PBGK@Z  +
mov dword ptr [esi] offset off_10364E4 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push 0Ah  +
call sub_103665B  +
and dword ptr [ebp-4] 0 +
push 1  +
push 0DFh  +
mov ecx esi +
call sub_101C64D  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax+4] 11h +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_10363D6  +
mov dword ptr [esi] offset off_10366A0 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+14h] +
call sub_1036685  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+48h] +
call sub_1036733  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_1036447  +
mov dword ptr [esi] offset off_1036750 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
xor eax eax +
mov edi offset off_1008170 +
mov [ebp-10h] eax +
mov [ebp-14h] edi +
push eax  +
push dword ptr [esi+0Ch]  +
mov [ebp-4] eax +
push dword ptr [esi+8]  +
call ?AfxLoadSysColorBitmap@@YGPAUHBITMAP__@@PAUHINSTANCE__@@PAUHRSRC__@@H@Z  +
push eax  +
lea ecx [ebp-14h] +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
lea eax [ebp-2Ch] +
push eax  +
push 18h  +
push dword ptr [ebp-10h]  +
call ds:GetObjectW  +
mov eax [ebp-28h] +
cdq   +
idiv  dword ptr [ebp-24h] +
push 2  +
mov ecx esi +
push eax  +
push 0FEh  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-24h]  +
call ?Create@CImageList@@QAEHHHIHH@Z  +
push 0FFFFFFFFh  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_1036836  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
mov [ebp-14h] edi +
call sub_100F62A  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1036845  +
mov eax [eax+4] +
push [ebp+arg_4]  +
push eax  +
push dword ptr [ecx+4]  +
call sub_1041B8B  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1036881  +
mov dword ptr [esi] offset off_1036874 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10368A9  +
mov dword ptr [esi] offset off_103689C +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1010D40 +
call sub_1031205  +
and dword ptr [esi+10h] 0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1036905  +
mov dword ptr [esi] offset off_10368F8 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_103496A  +
mov dword ptr [esi] offset off_1036920 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
xor ebx ebx +
call ?PreCreateWindow@CMDIChildWnd@@UAEHAAUtagCREATESTRUCTW@@@Z  +
test eax eax +
jz loc_10369C8  +
and dword ptr [esi+2Ch] 0FFFFFDFFh +
push edi  +
mov edi ds:off_10369D0 +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
lea ecx [ebp+WndClass] +
push ecx  +
push dword ptr [esi+28h]  +
push eax  +
call ds:GetClassInfoW  +
test eax eax +
jz loc_10369AB  +
and [ebp+WndClass.style] 0FFFFFFFCh +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push 81h  +
mov ecx eax +
call sub_100BEE5  +
mov [ebp+WndClass.hIcon] eax +
lea eax [ebp+WndClass] +
push eax  +
mov [ebp+WndClass.lpszClassName] edi +
call ?AfxRegisterClass@@YGHPAUtagWNDCLASSW@@@Z  +
mov ebx eax +
mov [esi+28h] edi +
cmp dword_10F55CC 3 +
pop edi  +
jnz loc_10369BF  +
or dword ptr [esi+20h] offset __ImageBase +
or dword ptr [esi+20h] 2000000h +
mov eax ebx +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
push 4  +
mov eax offset dword_10E0D20 +
call sub_1001F95  +
push 240h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1036A1B  +
call sub_1036A26  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call near ptr dword_1034C24+3  +
xor ebx ebx +
lea edi [esi+0C8h] +
lea ecx [esi+0CCh] +
mov [ebp-4] ebx +
mov dword ptr [edi] offset off_1036AE8 +
call near ptr dword_102F344+3  +
lea ecx [esi+0DCh] +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_10033BC +
mov dword ptr [edi] offset off_100C8A0 +
mov dword ptr [esi+0CCh] offset off_100E6E8 +
call sub_102F602  +
lea ecx [esi+0E8h] +
mov byte ptr [ebp-4] 2 +
call sub_102F652  +
lea ecx [esi+10Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1036AF1  +
lea ecx [esi+22Ch] +
mov byte ptr [ebp-4] 4 +
call ??0CString@@QAE@XZ  +
mov [esi+238h] ebx +
mov [esi+23Ch] ebx +
mov [esi+228h] ebx +
mov [esi+230h] bl +
mov [esi+231h] bl +
mov [esi+232h] bl +
mov byte ptr [esi+233h] 1 +
mov [esi+235h] bl +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1036B95  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4Ch] +
mov dword ptr [esi] offset off_10051CC +
call sub_1036C17  +
lea ecx [esi+94h] +
mov byte ptr [ebp-4] 1 +
call sub_1030614  +
push 0Ah  +
lea ecx [esi+0D4h] +
mov byte ptr [ebp-4] 2 +
call sub_1035186  +
lea ecx [esi+0F0h] +
mov byte ptr [ebp-4] 3 +
call sub_1036B65  +
lea eax [esi+114h] +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_10083D0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call ??0CSyncObject@@QAE@PBG@Z  +
lea eax [esi+8] +
push eax  +
mov dword ptr [esi] offset off_100680C +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call near ptr dword_102F630+5  +
push 10h  +
pop edi  +
xor ebx ebx +
push 0C4h  +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_1003D14 +
mov [esi+44h] edi +
call sub_100F31C  +
pop ecx  +
mov [ebp-14h] eax +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1036BEA  +
push offset loc_101BC2E  +
push offset loc_1036BFA  +
push edi  +
lea ebx [eax+4] +
push 0Ch  +
push ebx  +
mov [eax] edi +
call sub_100C8DF  +
mov [esi+48h] ebx +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call ??0CString@@QAE@XZ  +
and dword ptr [esi+4] 0 +
or dword ptr [esi] 0FFFFFFFFh +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1035246  +
and dword ptr [esi+40h] 0 +
mov dword ptr [esi] offset off_1036C3C +
mov dword ptr [esi+44h] 64h +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1041C45  +
mov eax [ebp+arg_0] +
mov [esi+28h] eax +
mov dword ptr [esi] offset off_1036D80 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
or dword ptr [eax+2Ch] 200h +
or dword ptr [eax+20h] 2000029h +
push eax  +
call ?PreCreateWindow@CTreeView@@UAEHAAUtagCREATESTRUCTW@@@Z  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call sub_1036E39  +
test eax eax +
jl loc_10647F9  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 0 +
push esi  +
jz loc_10646B7  +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_1036E80  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx ebx +
test esi esi +
jl loc_10646B0  +
push [ebp+arg_0]  +
call sub_100CA34  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call sub_1036EB9  +
test eax eax +
jl loc_106480F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 0 +
push esi  +
jz loc_105AD64  +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset loc_1036F00  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx ebx +
test esi esi +
jl loc_105AD5D  +
push [ebp+arg_0]  +
call sub_100CA34  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1036F39  +
test eax eax +
jl loc_1064825  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 0 +
push esi  +
jz loc_10646D1  +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_1036F80  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx ebx +
test esi esi +
jl loc_10646CA  +
push [ebp+arg_0]  +
call sub_100CA34  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
retn   +
***
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1064948  +
mov ecx esi +
call sub_103715F  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_106495F  +
xor esi esi +
lea ecx [ebp-1Ch] +
mov [ebp-4] bl +
mov dword ptr [ebp-1Ch] offset off_1008170 +
call sub_100F62A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1037183  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1064876  +
lea edi [esi+8Ch] +
xor ebx ebx +
cmp [edi] ebx +
jnz loc_1037230  +
push 3  +
push ebx  +
push offset sub_100BF34  +
lea ecx [ebp-10h] +
call near ptr byte_1034BAC+1  +
mov [ebp-4] ebx +
cmp [ebp-10h] ebx +
jz loc_106488D  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call near ptr byte_1036E14+1  +
lea eax [ebp-10h] +
lea edi [esi+90h] +
push eax  +
mov ecx edi +
call near ptr byte_1036E94+1  +
cmp [edi] ebx +
jz loc_10371E0  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov edi [edi] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+0Ch]  +
lea eax [ebp-10h] +
push eax  +
lea ecx [esi+94h] +
call sub_1036F15  +
lea eax [ebp-10h] +
push eax  +
lea ecx [esi+98h] +
call sub_103723D  +
push dword ptr [ebp-10h]  +
lea ecx [esi+88h] +
call sub_1010F11  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov ecx [eax] +
push 3951589h  +
push eax  +
call dword ptr [ecx+60h]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1037230  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1037261  +
test eax eax +
jl loc_106483B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 0 +
push esi  +
jz loc_10646EB  +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset loc_10372A8  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx ebx +
test esi esi +
jl loc_10646E4  +
push [ebp+arg_0]  +
call sub_100CA34  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10372E5  +
mov dword ptr [esi] offset off_10372D8 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_103730D  +
mov dword ptr [esi] offset off_1037300 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1010E9C +
call sub_1031205  +
and dword ptr [esi+10h] 0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1030576  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+10h] +
mov dword ptr [esi] offset off_1037384 +
call sub_1041C89  +
lea ecx [esi+1Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1041C89  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  ds:dbl_1034858 +
push ebx  +
push esi  +
mov esi ecx +
mov eax 0FFFFh +
fstp  qword ptr [esi+40h] +
mov [esi+68h] ax +
mov eax [ebp+arg_0] +
push edi  +
mov [esi+20h] eax +
mov eax [ebp+arg_4] +
push 2  +
mov [esi+24h] eax +
mov eax [ebp+arg_8] +
xor ebx ebx +
pop edi  +
push [ebp+arg_10]  +
mov [esi+28h] eax +
mov eax [ebp+arg_C] +
mov [esi+2Ch] eax +
push 10h  +
lea eax [esi+4] +
push eax  +
mov dword ptr [esi] 484C4B4Ch +
mov [esi+48h] ebx +
mov [esi+4Ch] ebx +
mov [esi+50h] ebx +
mov [esi+54h] ebx +
mov [esi+30h] edi +
mov [esi+34h] ebx +
mov [esi+38h] ebx +
mov [esi+3Ch] ebx +
mov dword ptr [esi+14h] 0FFFFFF9Dh +
mov [esi+58h] ebx +
mov [esi+5Ch] ebx +
mov [esi+60h] ebx +
mov [esi+64h] ebx +
call sub_10374F5  +
cmp byte_10F53A4 bl +
jz loc_10657BE  +
cmp [esi+20h] ebx +
jz loc_10374DD  +
cmp [esi+24h] ebx +
jz loc_10374DD  +
cmp [esi+28h] ebx +
jz loc_10374DD  +
cmp [esi+2Ch] ebx +
jz loc_10374DD  +
fld1   +
fcomp  [ebp+arg_14] +
fnstsw  ax +
test ah 1 +
jz loc_10657C2  +
fld  [ebp+arg_14] +
fst  qword ptr [esi+40h] +
fld  ds:dbl_10374E8 +
fcom  st(1) +
fnstsw  ax +
test ah 41h +
jnz loc_10374D9  +
fstp  st +
mov ecx [ebp+arg_1C] +
fstp  qword ptr [esi+40h] +
cmp ecx 1 +
jnz loc_10657CD  +
xor eax eax +
push 8  +
inc eax  +
pop ecx  +
push ecx  +
push eax  +
mov ecx esi +
call sub_100F434  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 20h  +
fstp  st(1) +
jmp loc_10374B4  +
push 0FFFFFFA1h  +
jmp loc_1065829  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_103754D  +
cmp ecx 7FFFFFFFh +
ja loc_103754D  +
test eax eax +
jl loc_1037549  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1037554  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_103753D  +
mov cl [edx+eax] +
test cl cl +
jz loc_103753D  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_1037529  +
pop edi  +
test esi esi +
jz loc_1037554  +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_103750B  +
dec eax  +
mov ebx 8007007Ah +
jmp loc_1037542  +
***
or eax 0FFFFFFFFh +
jmp loc_10123C0  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1037595  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+2Dh] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_10375C8  +
cmp eax ebx +
jz loc_10375A8  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_10375B1  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_10375BA  +
mov [ecx] ebx +
mov [eax+2Dh] bl +
mov byte ptr [eax+2Ch] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_106358E  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 30h +
jb loc_1063595  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
jmp loc_1021326  +
***
add esi 4 +
jmp loc_10123AC  +
***
mov eax dword_10F5304 +
mov eax [eax+0D4h] +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp-1] +
push eax  +
mov esi ecx +
call sub_1041B11  +
mov byte ptr [esi+1Ch] 0 +
mov eax esi +
pop esi  +
leave   +
retn   +
***
push 20h  +
call ds:GetSystemMetrics  +
lea eax [eax+eax+132h] +
mov dword_10F530C eax +
jmp locret_101126A  +
***
push offset aImagelist_add  +
call sub_101D9DA  +
mov esi eax +
cmp esi edi +
jz loc_101C5DC  +
mov dword_10F533C esi +
jmp loc_101C5CE  +
***
push offset aImagelist_addm  +
call sub_101D9DA  +
mov esi eax +
cmp esi edi +
jz loc_1041BD8  +
mov dword_10F5340 esi +
jmp loc_1041BCA  +
***
mov esi [ebp+8] +
mov edi ds:GetSystemMetrics +
mov eax esi +
dec eax  +
neg eax  +
sbb eax eax +
and eax 26h +
add eax 0Bh +
push eax  +
call edi  +
dec esi  +
neg esi  +
sbb esi esi +
and esi 26h +
add esi 0Ch +
push esi  +
mov ebx eax +
call edi  +
test byte ptr dword_10F5350 1 +
mov esi eax +
jnz loc_103782A  +
or dword_10F5350 1 +
and dword ptr [ebp-4] 0 +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+0Ch] +
push 0  +
push esi  +
push ebx  +
push 1  +
push 81h  +
push eax  +
call ds:LoadImageW  +
mov dword_10F534C eax +
mov eax dword_10F534C +
jmp loc_10217F7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 41Eh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 43Ch  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+0Ch] +
cmp ecx [ebp+10h] +
jnz loc_105EDDE  +
mov eax [ebp+8] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
push offset aImagelist_crea  +
call sub_101D9DA  +
mov esi eax +
cmp esi edi +
jz loc_102B2B8  +
mov dword_10F5358 esi +
jmp loc_102B2A4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_10378F0 +
call sub_102F30F  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+160h] +
push edi  +
mov edi ds:SendMessageTimeoutW +
mov ebx 308h +
test eax eax +
jnz loc_1060195  +
mov eax [esi+15Ch] +
test eax eax +
jnz loc_10601C8  +
mov edi dword_10F5304 +
test edi edi +
jnz loc_10601F4  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ?GetStyle@CWnd@@QBEKXZ  +
mov ebx eax +
test bl 10h +
jz loc_1037990  +
mov esi ds:GetSystemMetrics +
push 36h  +
call esi  +
push 37h  +
mov edi eax +
call esi  +
mov ecx [ebp+8] +
and dword ptr [ecx+10h] 0 +
and ebx 0Fh +
mov [ecx+14h] eax +
jz loc_1037989  +
test bl 1 +
jz loc_1037985  +
add [ecx+10h] edi +
shr ebx 1 +
jnz loc_103797D  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
jmp loc_1037989  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CWnd@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea edi [esi+40h] +
mov ecx edi +
call sub_102F5E6  +
mov dword ptr [esi] offset off_1004844 +
mov dword ptr [edi] offset off_1012EB4 +
and dword ptr [esi+50h] 0 +
and dword ptr [esi+54h] 0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10379F9  +
mov eax [eax+20h] +
mov [ecx+24h] eax +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_10379F2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 440h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
call sub_100C4D0  +
mov esi ecx +
lea edi [esi+0B4h] +
mov ecx edi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
xor ebx ebx +
push ebx  +
lea eax [ebp-208h] +
push eax  +
push ebx  +
push 29h  +
mov dword ptr [ebp-208h] 1F8h +
call ds:SystemParametersInfoW  +
lea eax [ebp-128h] +
push eax  +
mov ecx edi +
call sub_10305F1  +
push ebx  +
push edi  +
mov ecx esi +
call sub_1033C54  +
push esi  +
lea ecx [ebp-224h] +
call ??0CWindowDC@@QAE@PAVCWnd@@@Z  +
push edi  +
lea ecx [ebp-224h] +
mov [ebp-4] ebx +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
mov edi eax +
lea eax [ebp-260h] +
push eax  +
push dword ptr [ebp-21Ch]  +
call ds:GetTextMetricsW  +
push edi  +
lea ecx [ebp-224h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
push 31h  +
call ds:GetSystemMetrics  +
mov [ebp-20Ch] eax +
mov eax [ebp-260h] +
cmp eax [ebp-20Ch] +
mov [ebp-210h] eax +
lea eax [ebp-20Ch] +
jge loc_1060810  +
mov eax [eax] +
mov edx [esi] +
push eax  +
push ebx  +
mov ecx esi +
call dword ptr [edx+0C4h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-224h] +
call ??1CWindowDC@@UAE@XZ  +
call sub_100C50D  +
retn   +
***
or esi 0FFFFFFFFh +
jmp loc_100FB2D  +
***
xor ecx ecx +
jmp loc_100FFE2  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-14h] 0 +
xor ebx ebx +
inc ebx  +
mov [ebp-4] ebx +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-14h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test eax eax +
jnz loc_1061168  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 1  +
call sub_1022A6B  +
mov esi eax +
test esi esi +
jz loc_1037B99  +
mov eax [ebp+arg_0] +
mov [esi] eax +
lea eax [esi+4] +
test eax eax +
jz loc_1037BA5  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
push [ebp+arg_8]  +
lea eax [esi+8] +
push eax  +
call sub_1038423  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
lea ecx [esi+4] +
mov [esi] eax +
call sub_103A75B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
or dword_10F536C 1 +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1037569  +
push offset loc_1050917  +
call sub_100BFD5  +
pop ecx  +
jmp loc_1009D56  +
***
or dword_10F5370 1 +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_102F329  +
and dword_10F5410 0 +
push offset loc_1050773  +
mov dword_10F540C eax +
call sub_100BFD5  +
pop ecx  +
jmp loc_1033CD2  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push edi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmctoolbarSci  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1063E41  +
mov eax [esi] +
push edi  +
push 1002h  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push offset unk_10F5720  +
push 10000100h  +
push edi  +
call dword ptr [eax+0C0h]  +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
mov edi 80004005h +
add eax edi +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1037D13  +
push 0  +
push 5  +
push 2007h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
cmp eax 0FFFFFFFFh +
jz loc_1063E53  +
lea eax [ebp-28h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
jmp ds:?GetDocString@CDocTemplate@@UBEHAAVCString@@W4DocStringIndex@1@@Z  +
***
and eax offset ?MatchDocType@CDocTemplate@@UAE?AW4Confidence@1@PBGAAPAVCDocument@@@Z +
nop   +
nop   +
nop   +
nop   +
nop   +
jmp ds:?CreateNewDocument@CDocTemplate@@UAEPAVCDocument@@XZ  +
***
mov ah 2Ah +
std   +
call dword ptr [eax-6F6F6F70h]  +
jmp ?GetName@ClassInfoBase@DirectUI@@UBEPBGXZ  +
***
sub bh ch +
call dword ptr [eax-6F6F6F70h]  +
jmp ?IsGlobal@ClassInfoBase@DirectUI@@UBE_NXZ  +
***
push 20h  +
mov eax offset byte_10D7A1B +
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmctoolbarc_3  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?OnCreate@CToolBarCtrl@@IAEHPAUtagCREATESTRUCTW@@@Z  +
cmp eax 0FFFFFFFFh +
jz loc_105F1AE  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call sub_1037FFD  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105F1B5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmctoolbarc_4  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea edi [esi+68h] +
cmp dword ptr [edi] 0 +
jnz loc_105F118  +
push edi  +
push offset stru_103761C  +
push 17h  +
push 0  +
push offset stru_10375FC  +
call ds:CoCreateInstance  +
push eax  +
lea ecx [ebp-38h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105F12D  +
mov edi [edi] +
mov ebx 8000FFFFh +
push ebx  +
push edi  +
lea eax [ebp-48h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10381E0  +
lea eax [esi+6Ch] +
push eax  +
push esi  +
lea eax [ebp-48h] +
push eax  +
call sub_1039FD9  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10381E0  +
mov eax [esi+6Ch] +
push ebx  +
push eax  +
lea eax [ebp-48h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10381E0  +
mov eax [esi] +
lea ebx [esi+70h] +
push ebx  +
lea ecx [ebp-48h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+0DCh]  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 6 +
call edi  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10381E0  +
mov eax [esi+78h] +
mov ecx [esi+74h] +
push eax  +
push ecx  +
call sub_10389B6  +
mov edi [esi+78h] +
mov eax [esi+74h] +
push edi  +
push eax  +
lea eax [ebp-18h] +
push eax  +
call sub_1038385  +
push edi  +
push dword ptr [eax]  +
lea eax [ebp-14h] +
push eax  +
mov ecx ebx +
call near ptr dword_1037878+3  +
and dword ptr [ebp-18h] 0 +
mov ecx ebx +
call sub_1038273  +
test eax eax +
jbe loc_10381E0  +
and dword ptr [ebp-14h] 0 +
mov edx [esi+6Ch] +
mov eax [esi+74h] +
add eax [ebp-14h] +
mov ecx [esi+68h] +
mov edi [ecx] +
push 1  +
push edx  +
push 1  +
push eax  +
push 0  +
push 0FFFFFFFCh  +
push dword ptr [esi+20h]  +
push ecx  +
call dword ptr [edi+20h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105F175  +
inc dword ptr [ebp-18h]  +
add dword ptr [ebp-14h] 10h +
mov ecx ebx +
call sub_1038273  +
cmp [ebp-18h] eax +
jb loc_1038193  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edx [ecx+4] +
test edx edx +
jz loc_1038283  +
mov eax [ecx+8] +
sub eax edx +
sar eax 4 +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10382B1  +
mov eax [ebp+arg_4] +
shl eax 4 +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10382DF  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_10382FE  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1038423  +
dec [ebp+arg_4]  +
add [ebp+arg_0] 10h +
jmp loc_10382E4  +
pop ebp  +
retn 18h  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_1038311  +
xor eax eax +
retn   +
mov eax [ecx+0Ch] +
sub eax edx +
sar eax 4 +
retn   +
***
call sub_100A60E  +
mov esi ecx +
lea edi [esi+170h] +
mov ecx edi +
call sub_102183C  +
test eax eax +
jnz loc_103837A  +
push 5  +
mov ecx esi +
call sub_100EB83  +
mov esi eax +
test esi esi +
jz loc_103837A  +
mov eax [esi+20h] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_1038786  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0  +
mov ecx esi +
call sub_1022FA8  +
push 2  +
mov ecx esi +
call sub_102B324  +
jmp loc_1038347  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
cmp eax edx +
jz loc_10383A0  +
add [ebp+arg_4] 10h +
cmp [ebp+arg_4] edx +
jnz loc_10383AC  +
mov eax [ebp+arg_0] +
mov [eax] edx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov edi [ebp+arg_4] +
push 4  +
pop ecx  +
mov esi eax +
xor ebx ebx +
cmps   +
jz loc_105EDC8  +
mov eax [ebp+arg_4] +
jmp loc_1038397  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10383F6  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jnz loc_103840C  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn 18h  +
push esi  +
push [ebp+arg_8]  +
call sub_1038423  +
add [ebp+arg_8] 10h +
add esi 10h +
jmp loc_10383FF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1038439  +
push esi  +
mov esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
call sub_101D46C  +
mov esi [ebp+10h] +
lea edi [ebp-24h] +
movs   +
movs   +
movs   +
mov ebx ecx +
movs   +
call sub_1038307  +
mov esi [ebp+0Ch] +
mov edi eax +
test esi esi +
jz loc_1038505  +
mov ecx ebx +
call sub_1038273  +
mov ecx 0FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx esi +
jb loc_105EE8C  +
add eax esi +
cmp edi eax +
jnb loc_105EEAA  +
mov edx edi +
shr edx 1 +
sub ecx edx +
cmp ecx edi +
jb loc_105EE91  +
add edi edx +
cmp edi eax +
jnb loc_10384A5  +
mov edi eax +
push 0  +
push edi  +
call sub_101118C  +
and dword ptr [ebp-4] 0 +
push ebx  +
mov [ebp-28h] eax +
push dword ptr [ebp-28h]  +
mov eax [ebx+4] +
push dword ptr [ebp+8]  +
push eax  +
call sub_10383C8  +
lea ecx [ebp-24h] +
push ecx  +
push esi  +
push eax  +
mov ecx ebx +
call sub_103828B  +
mov ecx [ebx+8] +
push ebx  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
call sub_10383C8  +
mov ecx ebx +
call sub_1038273  +
add esi eax +
mov eax [ebx+4] +
test eax eax +
jnz loc_103850D  +
mov eax [ebp-28h] +
shl edi 4 +
add edi eax +
shl esi 4 +
add esi eax +
mov [ebx+0Ch] edi +
mov [ebx+8] esi +
mov [ebx+4] eax +
call sub_101D44D  +
retn 0Ch  +
mov ecx [ebx+8] +
cmp eax ecx +
jz loc_1038519  +
add eax 10h +
jmp loc_1038510  +
push dword ptr [ebx+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_10384EF  +
***
call sub_1001F95  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push offset aCmmctoolbarc_2  +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+0Ch] +
push offset dword_1012D58  +
call sub_10385D1  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_1038273  +
mov ecx esi +
mov edi eax +
call sub_1038307  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jb loc_105F091  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_103860D  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_1038273  +
test eax eax +
jnz loc_1038641  +
xor esi esi +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_1038443  +
mov eax [ebp+arg_0] +
shl esi 4 +
add esi [edi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 4 +
jmp loc_1038621  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
mov eax [eax] +
push esi  +
push edi  +
mov esi ecx +
mov [ebp+var_4] eax +
call sub_1021854  +
mov edi [ebp+arg_4] +
mov [ebp+arg_8] eax +
test edi edi +
jz loc_1038713  +
mov ecx esi +
call sub_102183C  +
mov ecx 3FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_1060BB8  +
add eax edi +
push ebx  +
cmp [ebp+arg_8] eax +
jnb loc_1060BC6  +
mov edx [ebp+arg_8] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp+arg_8] +
jb loc_1060BBD  +
add [ebp+arg_8] edx +
cmp [ebp+arg_8] eax +
jnb loc_10386B5  +
mov [ebp+arg_8] eax +
push 0  +
push [ebp+arg_8]  +
call sub_1021804  +
push esi  +
mov ebx eax +
mov eax [esi+4] +
push ebx  +
push [ebp+arg_0]  +
push eax  +
call sub_103871E  +
lea ecx [ebp+var_4] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_103A153  +
push esi  +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_103871E  +
mov ecx esi +
call sub_102183C  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_1038700  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+arg_8] +
lea eax [ebx+eax*4] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*4] +
mov [esi+8] eax +
mov [esi+4] ebx +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103874C  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
sar eax 2 +
mov ecx eax +
shl ecx 2 +
push esi  +
lea esi [edx+ecx] +
test eax eax +
ja loc_1038771  +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push edx  +
call memmove_s  +
add esp 10h +
jmp loc_103876A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_102183C  +
mov ecx esi +
mov edi eax +
call sub_1021854  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jb loc_106049C  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10387C2  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_102183C  +
test eax eax +
jnz loc_10387F6  +
xor esi esi +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_1038651  +
mov eax [edi+4] +
lea ecx [eax+esi*4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 2 +
jmp loc_10387D6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_14] +
and dword ptr [edi] 0 +
call sub_103885B  +
mov esi eax +
test esi esi +
jz loc_103884F  +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@ClassInfoBase@DirectUI@@QAEJPAUHINSTANCE__@@PBG_NPBQBUPropertyInfo@2@I@Z  +
mov ebx eax +
test ebx ebx +
jl loc_1038847  +
mov [edi] esi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 18h  +
push esi  +
call sub_1050BCE  +
jmp loc_103883E  +
mov ebx 8007000Eh +
jmp loc_103883E  +
***
call sub_1001F95  +
push 8  +
call sub_100D68D  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_1038885  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1038892  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0ClassInfoBase@DirectUI@@QAE@XZ  +
mov dword ptr [esi] offset off_10388AC +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
sar eax 4 +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10389D9  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
sar eax 4 +
cmp eax 20h +
jg sub_105EF49  +
cmp eax 1 +
jle locret_1038A02  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1038A0B  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
cmp edi [ebp+arg_4] +
jz loc_1038A4E  +
push esi  +
lea esi [edi+10h] +
cmp esi [ebp+arg_4] +
jz loc_1038A4D  +
push ebx  +
push edi  +
push esi  +
call sub_1038A5D  +
test al al +
jnz loc_105EDFE  +
lea edi [esi-10h] +
push edi  +
push esi  +
call sub_1038A5D  +
test al al +
jnz loc_105EE06  +
add esi 10h +
cmp esi [ebp+arg_4] +
jnz loc_1038A53  +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
mov edi [ebp+arg_0] +
jmp loc_1038A23  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
mov ecx [eax] +
push esi  +
mov esi [edx] +
cmp ecx esi +
jz loc_105AB3B  +
setb al  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov al [ebp+8] +
xor ebx ebx +
mov edi offset word_100A5FC +
push edi  +
lea ecx [ebp-2Ch] +
mov dword ptr [esi] offset off_100BA50 +
mov [esi+4] ebx +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov [esi+10h] al +
call sub_101D1AD  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [esi+14h] +
mov [ebp-4] ebx +
call sub_1038B15  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call sub_100CD3C  +
push edi  +
lea ecx [ebp-48h] +
call sub_101D1AD  +
lea eax [ebp-48h] +
push eax  +
lea ecx [esi+3Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1038B15  +
push ebx  +
push 1  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 5 +
call sub_100CD3C  +
lea ecx [esi+64h] +
call sub_1038B83  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10376F8  +
push eax  +
mov ecx esi +
call sub_1038B3F  +
mov dword ptr [esi] offset off_101350C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1012ED0 +
call sub_100D2CF  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
or dword ptr [esi+8] 0FFFFFFFFh +
lea ecx [esi+0Ch] +
call sub_100CF0B  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi+4] offset off_101D76C +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_1038BE4 +
mov dword ptr [esi+4] offset off_1038BD0 +
call sub_10392E6  +
and dword ptr [ebp-4] 0 +
push 0FFFFFFFFh  +
lea ecx [esi+0A8h] +
call sub_101D4AC  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov dword ptr [esi+54h] offset off_1038CA4 +
mov dword ptr [edi] offset off_1038C90 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_103A3C5  +
mov dword ptr [esi] offset off_1038EA4 +
mov eax esi +
pop esi  +
retn   +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jz loc_10598B7  +
push 64h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_1038F6E  +
push esi  +
call sub_1038FA8  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1038F9E  +
lea ecx [esi+0Ch] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10598D6  +
xor ebx ebx +
test ebx ebx +
jnz loc_10598D6  +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
mov ebx [ebp-18h] +
jmp loc_1038F92  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1038FD5  +
push offset Addend  +
mov dword ptr [esi] offset off_100E8BC +
mov dword ptr [esi+4] offset off_100B924 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+8] +
call sub_1041A02  +
and dword ptr [ebp-4] 0 +
push 0FFFFh  +
mov dword ptr [esi+4] offset off_101D76C +
push 1  +
lea ecx [esi+28h] +
mov dword ptr [esi] offset off_101227C +
mov dword ptr [esi+4] offset off_100B9C4 +
call sub_103A424  +
lea ecx [esi+50h] +
mov byte ptr [ebp-4] 1 +
call sub_103902E  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call near ptr dword_1038E64+5  +
mov dword ptr [esi] offset off_1039048 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
mov ebx ecx +
push esi  +
mov dword ptr [ebx+4] offset off_101D76C +
push edi  +
lea ecx [ebx+8] +
mov dword ptr [ebx] offset off_1039354 +
mov dword ptr [ebx+4] offset off_1039340 +
call sub_10230CC  +
xor eax eax +
mov [ebx+80h] eax +
lea edi [ebx+84h] +
mov esi offset dword_100CA88 +
movs   +
movs   +
movs   +
movs   +
or dword ptr [ebx+98h] 0FFFFFFFFh +
pop edi  +
mov [ebx+94h] eax +
mov [ebx+9Ch] eax +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call sub_10393D3  +
mov dword ptr [esi] offset off_101350C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1012ED0 +
call sub_100D2CF  +
or dword ptr [esi+8] 0FFFFFFFFh +
lea eax [ebp+arg_0+3] +
push eax  +
lea ecx [esi+0Ch] +
call sub_1041B11  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
lea edi [esi+4] +
mov ecx edi +
mov dword ptr [esi] offset off_10394C4 +
call sub_10378D2  +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+14h] offset off_102179C +
mov dword ptr [esi+18h] offset off_101D76C +
mov dword ptr [esi] offset off_1012E74 +
mov dword ptr [edi] offset off_1012E54 +
mov dword ptr [esi+14h] offset off_100BF8C +
mov dword ptr [esi+18h] offset off_100B99C +
and dword ptr [esi+1Ch] 0 +
and dword ptr [esi+20h] 0 +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
push 0BBh  +
lea eax [ebp-10h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101220E  +
push 124h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-18h] ecx +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_10394BC  +
push 1  +
call sub_1038A82  +
push dword ptr [ebp-10h]  +
lea ecx [eax+14h] +
mov byte ptr [ebp-4] 1 +
mov [esi+20h] eax +
call sub_10394ED  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn   +
xor eax eax +
jmp loc_1039496  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1039509  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
push dword ptr [ebp+8]  +
lea ecx [ebp-28h] +
call sub_101D1AD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_103954E  +
push 0  +
push 1  +
lea ecx [ebp-28h] +
mov esi eax +
call sub_100CD3C  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
lea edi [esi+0Ch] +
push edi  +
call sub_1039587  +
pop ecx  +
pop ecx  +
test al al +
jz loc_103957A  +
mov ecx esi +
call sub_10132B1  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1041CE8  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10395A9  +
pop ecx  +
pop ecx  +
xor ecx ecx +
test al al +
setz cl  +
mov al cl +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_1012340  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10395E1  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10395FC  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
test eax eax +
jnz loc_1059807  +
test byte ptr [ebp+pUnknown] 14h +
jnz loc_1059812  +
push esi  +
push offset stru_1039674  +
push [ebp+pUnknown]  +
push [ebp+pUnkOuter]  +
push [ebp+rclsid]  +
call ds:CoCreateInstance  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10396AD  +
test eax eax +
jl loc_1059900  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 0 +
push esi  +
jz loc_10598ED  +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_10396F4  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx ebx +
test esi esi +
jl loc_10598E6  +
push [ebp+arg_0]  +
call sub_100CA34  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcdocInitnod  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103974A  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105993D  +
mov eax [esi+0D4h] +
push 80004005h  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1059954  +
push 24h  +
call sub_100ABF0  +
mov [ebp-14h] eax +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_103999C  +
mov ecx eax +
call sub_1039408  +
push 8007000Eh  +
push eax  +
mov [esi+0DCh] eax +
lea eax [ebp-34h] +
push eax  +
mov byte ptr [ebp-4] 0 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1059954  +
mov [ebp-10h] ebx +
push 3  +
push ebx  +
push offset sub_100BF34  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 4 +
call sub_100BF49  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1059964  +
push 8000FFFFh  +
push dword ptr [ebp-10h]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1059964  +
push 3  +
push 0  +
lea ebx [esi+0E0h] +
push offset stru_10399E0  +
mov ecx ebx +
call sub_1039635  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10399A3  +
mov eax [ebx] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 6 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10399A3  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov ecx [ebx] +
mov edx [eax] +
push ecx  +
push eax  +
call dword ptr [edx+70h]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10399A3  +
call sub_10067E8  +
mov edi eax +
test edi edi +
jz loc_1059979  +
mov ecx ebx +
call sub_100A5CF  +
mov ecx [esi+0D4h] +
mov edx [eax] +
push ecx  +
push dword ptr [edi+20h]  +
push eax  +
call dword ptr [edx+0Ch]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10399A3  +
push ebx  +
lea ecx [esi+0E4h] +
call sub_1039689  +
push dword ptr [ebx]  +
lea ecx [esi+0F4h] +
call sub_10399F5  +
call sub_100ABA9  +
test eax eax +
jz loc_105999B  +
mov ecx [eax+20h] +
mov [esi+0F8h] ecx +
mov ecx eax +
add eax 0C4h +
neg ecx  +
sbb ecx ecx +
and ecx eax +
mov [esi+0FCh] ecx +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
mov eax [ebp-10h] +
test eax eax +
mov byte ptr [ebp-4] 0 +
jz loc_1039987  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn   +
xor eax eax +
jmp loc_10397AA  +
mov ecx esi +
call sub_10517E3  +
jmp loc_103996B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1010F11  +
mov ecx esi +
call sub_100A5CF  +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+50h]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp-1] +
push eax  +
mov esi ecx +
call sub_1041B11  +
or dword ptr [esi+1Ch] 0FFFFFFFFh +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1011270 +
call sub_1031205  +
and dword ptr [esi+10h] 0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
push 4  +
mov eax offset dword_10E0D20 +
call sub_1001F95  +
push 148h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1039B07  +
call sub_1039B12  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
call near ptr byte_1037DC8+1  +
lea edi [esi+54h] +
xor ebx ebx +
mov ecx edi +
mov [ebp-4] ebx +
call sub_102F5E6  +
mov dword ptr [esi+64h] offset off_101D76C +
lea ecx [esi+84h] +
mov dword ptr [esi+68h] offset off_1039D2C +
call near ptr byte_1037734+1  +
lea ecx [esi+6Ch] +
mov byte ptr [ebp-4] 2 +
call near ptr dword_1039A58+3  +
lea ecx [esi+0A8h] +
mov dword ptr [esi] offset off_10069EC +
mov dword ptr [edi] offset off_1012D90 +
mov dword ptr [esi+64h] offset off_100B94C +
mov dword ptr [esi+68h] offset off_1012D6C +
mov dword ptr [esi+6Ch] offset off_1011290 +
mov byte ptr [esi+0A4h] 1 +
call near ptr dword_1039A18+5  +
lea edi [esi+0D4h] +
mov [edi] ebx +
mov [esi+0DCh] ebx +
mov [esi+0E0h] ebx +
mov [esi+0E4h] ebx +
mov [esi+0E8h] ebx +
lea ecx [esi+0F4h] +
mov dword ptr [esi+0ECh] 1 +
mov [esi+0F0h] ebx +
call near ptr dword_1037704+5  +
mov [esi+11Ch] ebx +
mov [esi+120h] bl +
mov [esi+122h] bl +
mov [esi+123h] bl +
mov dword ptr [esi+124h] 1 +
mov [esi+140h] ebx +
mov [esi+144h] ebx +
mov byte ptr [ebp-4] 0Bh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1039C12  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1059A1E  +
push ebx  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcdocCamcdoc  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0Ch +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-10h] +
push eax  +
call near ptr dword_1038F24+5  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1059A35  +
cmp [ebp-10h] ebx +
jz loc_1059A35  +
push dword ptr [ebp-10h]  +
push edi  +
call sub_100CA9D  +
cmp [edi] ebx +
jz loc_1059A51  +
push 28h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
mov byte ptr [ebp-4] 0Dh +
cmp eax ebx +
jz loc_1039D20  +
push dword ptr [edi]  +
mov ecx eax +
call near ptr byte_10393B0+1  +
mov byte ptr [ebp-4] 0Ch +
mov [esi+0D8h] eax +
cmp eax ebx +
jz loc_1059A7B  +
mov ecx dword_10F5304 +
cmp ecx ebx +
jnz loc_1059A97  +
or dword ptr [esi+128h] 1 +
push ebx  +
lea eax [esi+68h] +
push 20019h  +
mov dword_10F5304 esi +
mov [esi+118h] eax +
push ds:lpSubKey  +
lea ecx [ebp-20h] +
push 80000002h  +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
call sub_1039D5F  +
test eax eax +
jnz loc_1039CF7  +
lea ecx [ebp-20h] +
mov byte ptr [esi+120h] 1 +
call sub_1021315  +
mov al [esi+120h] +
lea ecx [ebp-20h] +
mov [esi+121h] al +
call sub_1021315  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0Bh +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn   +
xor eax eax +
jmp loc_1039C8C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push [ebp+ulOptions]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1039D92  +
mov ecx esi +
call sub_1021315  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1039DCC  +
test eax eax +
jz loc_1039DC2  +
mov eax [ebp+arg_0] +
mov [esi+40h] eax +
mov eax [ebp+arg_4] +
mov [esi+44h] eax +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
movzx edx [ebp+arg_0] +
shl eax 10h +
or eax edx +
push eax  +
push 0  +
push 420h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
push 64h  +
lea eax [ebp-64h] +
push 0  +
push eax  +
call memset  +
mov eax [esi+20h] +
add esp 0Ch +
push 0FFFFFFF4h  +
push eax  +
mov dword ptr [ebp-64h] 64h +
mov dword ptr [ebp-60h] 171h +
mov [ebp-44h] eax +
call ds:GetWindowLongW  +
mov [ebp-30h] eax +
mov eax [esi+4Ch] +
mov ecx esi +
mov [ebp-38h] eax +
mov [ebp-40h] eax +
call sub_100DF96  +
shr eax 10h +
cmp byte ptr [ebp+0Ch] 0 +
mov [ebp-3Ch] eax +
mov dword ptr [ebp-5Ch] 100h +
jz loc_1039E4D  +
mov dword ptr [ebp-5Ch] 101h +
mov ecx [esi+48h] +
lea eax [ebp-64h] +
push eax  +
call sub_1039E63  +
jmp loc_1010BC1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0FFFFFFFFh  +
push 40Ah  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jz loc_105F0C4  +
push 3Ch  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_1039EC9  +
push esi  +
call sub_1039F03  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1039EF9  +
lea ecx [esi+20h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_105F0E3  +
xor ebx ebx +
test ebx ebx +
jnz loc_105F0E3  +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
mov ebx [ebp-18h] +
jmp loc_1039EED  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1039F37  +
push offset Addend  +
mov dword ptr [esi] offset off_10143B8 +
mov dword ptr [esi+4] offset off_1012E34 +
mov dword ptr [esi+14h] offset off_1014308 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+1Ch] +
call sub_1041A02  +
and dword ptr [ebp-4] 0 +
lea edi [esi+4] +
mov ecx edi +
call sub_1039FB1  +
and dword ptr [esi+18h] 0 +
mov dword ptr [esi+14h] offset off_101423C +
mov byte ptr [ebp-4] 2 +
mov dword ptr [esi] offset off_1012E0C +
mov dword ptr [edi] offset off_1012DEC +
mov dword ptr [esi+14h] offset off_1014294 +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1039F96  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105F0AC  +
call ds:?GetComObjectEventSource@@YGAAV?$CEventSource@VCComObjectObserver@@VCVoid@@V2@V2@V2@@@XZ  +
push edi  +
mov ecx eax +
call sub_102124D  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_102F2F3  +
mov dword ptr [esi] offset off_1039FCC +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
xor esi esi +
push esi  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtiedcomobject  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
cmp [edi] esi +
jnz loc_103A07E  +
lea eax [ebp+10h] +
push eax  +
mov [ebp+10h] esi +
call sub_1039E84  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105F0F3  +
cmp [ebp+10h] esi +
jz loc_105F105  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_103A0AB  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_103A07E  +
push dword ptr [ebp+10h]  +
push edi  +
call sub_100CA9D  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aSccreateconnec  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov eax esi +
neg eax  +
sbb eax eax +
lea ecx [esi+14h] +
and eax ecx +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [edi+54h] +
call sub_1031995  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jnz loc_105F0A1  +
mov [esi+18h] edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_103A179  +
lea eax [edi+esi*4] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103A198  +
add esp 0Ch +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103A1C1  +
add esp 10h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_103A1E2  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
dec [ebp+arg_4]  +
mov [eax] ecx +
add eax 4 +
cmp [ebp+arg_4] 0 +
ja loc_103A1CF  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
and dword ptr [eax] 0 +
push ecx  +
mov ecx esi +
call sub_103A20D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi ecx +
jz loc_103A227  +
test ecx ecx +
jnz loc_1060703  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
push esi  +
mov esi ecx +
mov ecx [esi+80h] +
test ecx ecx +
jz loc_103A2B7  +
push 16h  +
push 0Ah  +
push 0Ah  +
push 0  +
push 0  +
push 0  +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
lea eax [ebp+Rect] +
push eax  +
mov eax [esi+80h] +
push dword ptr [eax+20h]  +
call ds:GetClientRect  +
push 64h  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
add esp 0Ch +
mov [ebp+var_48] eax +
mov [ebp+var_50] eax +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
mov ecx esi +
mov [ebp+var_4C] eax +
lea eax [ebp+lParam] +
push eax  +
mov [ebp+lParam] 64h +
mov [ebp+var_70] 60h +
call sub_103A2BF  +
mov ecx [esi+9Ch] +
push eax  +
call sub_100DFAE  +
pop esi  +
leave   +
retn   +
***
mov ecx [ecx+9Ch] +
push 2001h  +
call sub_102134D  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmenubarScinse  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_1038529  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1060D46  +
mov ecx [ebp+0Ch] +
push offset dword_103A3B0  +
call sub_10385D1  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_103A3F1  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+59h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_10362ED  +
cmp eax ebx +
jz loc_103A404  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_103A40D  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_103A416  +
mov [ecx] ebx +
mov [eax+59h] bl +
mov byte ptr [eax+58h] 1 +
pop ebx  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+4] +
mov ecx edi +
mov dword ptr [esi] offset off_103A48C +
call sub_1031205  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+10h] +
call sub_1031205  +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [esi+20h] ecx +
mov [esi+1Ch] eax +
mov [esi+24h] eax +
mov [ebp-18h] eax +
mov eax [edi+4] +
mov eax [eax] +
mov [ebp-14h] ecx +
lea ecx [ebp-18h] +
push ecx  +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_10111C2  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_103A520  +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+0Ch] 0 +
lea ecx [esi+10h] +
call sub_10331F9  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_103A53A  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_1022A6B  +
test eax eax +
jz loc_103A549  +
mov [eax] eax +
lea ecx [eax+4] +
test ecx ecx +
jz locret_103A552  +
mov [ecx] eax +
retn   +
***
call sub_1001F95  +
mov edi ecx +
mov ebx [ebp+8] +
push ebx  +
call sub_1009FAF  +
mov esi eax +
cmp esi [edi+4] +
jnz loc_103A5C2  +
lea ecx [ebp-28h] +
call sub_103A4ED  +
and dword ptr [ebp-4] 0 +
push eax  +
push ebx  +
lea ecx [ebp-48h] +
call sub_1037BBD  +
push eax  +
push esi  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_103A5D0  +
mov esi [eax] +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 0 +
call sub_101326C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call sub_101326C  +
lea eax [esi+10h] +
call sub_1001FCF  +
retn 4  +
mov eax [ebx] +
cmp eax [esi+0Ch] +
jb loc_103A576  +
jmp loc_103A5B7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+8] 0 +
jnz loc_1063ABA  +
push [ebp+arg_8]  +
push dword ptr [ebx+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_103A601  +
mov eax [ebp+arg_0] +
pop ebx  +
leave   +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
cmp dword ptr [edi+8] 7FFFFFEh +
jnb loc_10639CC  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_103A67A  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_10639F7  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
mov ecx [eax] +
cmp byte ptr [ecx+2Ch] 0 +
jz loc_1063A25  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+2Ch] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1001FCF  +
retn 10h  +
***
call sub_100A60E  +
mov esi ecx +
push 0  +
push 1  +
call sub_10375C8  +
push dword ptr [ebp+18h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
mov [ebp-14h] eax +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_103A6BF  +
mov eax [ebp-14h] +
call sub_1001FCF  +
retn 14h  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_103A6ED  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_103A6FA  +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+0Ch] +
mov [esi+8] eax +
call sub_103A734  +
mov al [ebp+arg_10] +
mov [esi+2Ch] al +
mov byte ptr [esi+2Dh] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
add eax 4 +
mov [esi] ecx +
push eax  +
lea ecx [esi+4] +
call sub_103A75B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call sub_103A9EC  +
mov eax [edi+0Ch] +
and dword ptr [ebp-4] 0 +
add edi 10h +
push edi  +
lea ecx [esi+10h] +
mov [esi+0Ch] eax +
call sub_103A79A  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_103A7B6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov esi ecx +
mov [ebp-14h] esi +
call sub_10331F9  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_103A7E9  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx+4] +
push esi  +
push edi  +
mov esi ecx +
mov edi [esi+4] +
add eax 4 +
push edi  +
push dword ptr [eax]  +
call sub_103A834  +
mov [edi+4] eax +
mov eax [ebx+8] +
mov edi [esi+4] +
mov [esi+8] eax +
mov eax [edi+4] +
cmp byte ptr [eax+1Dh] 0 +
jz loc_1063609  +
mov [edi] edi +
mov esi [esi+4] +
mov [esi+8] esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov edi ecx +
mov [ebp-18h] edi +
mov esi [ebp+8] +
cmp byte ptr [esi+1Dh] 0 +
mov eax [edi+4] +
mov [ebp-14h] eax +
jz loc_10635AE  +
mov eax [ebp-14h] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+4] 0 +
push esi  +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_1007DEC +
call sub_103A8A6  +
mov byte ptr [esi+14h] 0 +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_1009EE4 +
test eax eax +
jz loc_103A8CB  +
mov eax [eax+20h] +
mov ecx [ebp+8] +
push esi  +
push eax  +
mov [esi+4] eax +
mov [esi+8] ecx +
call sub_1009D38  +
mov ecx eax +
call sub_103A8F1  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_4] +
and [ebp+var_8] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_10] eax +
lea eax [ebp+arg_0] +
push eax  +
mov [ebp+var_C] edi +
mov [ebp+var_4] 0 +
call sub_103A558  +
mov esi eax +
cmp dword ptr [esi+0Ch] 0 +
mov ebx offset lpDst +
jnz loc_1063BAB  +
push offset loc_1009DAF  +
push 0FFFFFFFCh  +
push edi  +
call ds:SetWindowLongW  +
mov [esi+0Ch] eax +
mov eax lpDst +
cmp eax ebx +
jz loc_103A94E  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1063B79  +
mov eax [esi+4] +
mov eax [eax] +
lea ecx [ebp+var_10] +
push ecx  +
push eax  +
mov ecx esi +
call sub_103A980  +
mov eax lpDst +
cmp eax ebx +
jz loc_103A972  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1063B91  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea edi [eax+4] +
push dword ptr [edi]  +
mov ebx ecx +
push eax  +
call sub_1037B7F  +
push 1  +
mov ecx ebx +
mov esi eax +
call sub_103A9B9  +
mov [edi] esi +
mov eax [esi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov eax [ecx+8] +
mov edx [ebp+8] +
mov esi 0FFFFFFFh +
sub esi eax +
cmp esi edx +
jb loc_1063624  +
add eax edx +
mov [ecx+8] eax +
call sub_1001FCF  +
retn 4  +
***
call sub_100A60E  +
mov esi ecx +
mov [ebp-14h] esi +
call sub_103A53A  +
and dword ptr [esi+8] 0 +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [esi+4] eax +
mov ecx [ecx+4] +
mov edx [ecx] +
mov eax [eax] +
push ecx  +
push edx  +
push eax  +
mov ecx esi +
call sub_103AA30  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103AA4F  +
pop ebp  +
retn 0Ch  +
***
call sub_100A60E  +
mov [ebp-14h] ecx +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov [ebp-18h] eax +
cmp eax [ebp+10h] +
jnz loc_1063661  +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_14] +
and dword ptr [edi] 0 +
call sub_103AAD3  +
mov esi eax +
test esi esi +
jz loc_103AAC7  +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@ClassInfoBase@DirectUI@@QAEJPAUHINSTANCE__@@PBG_NPBQBUPropertyInfo@2@I@Z  +
mov ebx eax +
test ebx ebx +
jl loc_103AABF  +
mov [edi] esi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 18h  +
push esi  +
call sub_1050BCE  +
jmp loc_103AAB6  +
mov ebx 8007000Eh +
jmp loc_103AAB6  +
***
call sub_1001F95  +
push 8  +
call sub_100D68D  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_103AAFD  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_103AB0A  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0ClassInfoBase@DirectUI@@QAE@XZ  +
mov dword ptr [esi] offset off_103AB24 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_14] +
and dword ptr [edi] 0 +
call sub_103AC1A  +
mov esi eax +
test esi esi +
jz loc_103AC0E  +
push [ebp+arg_10]  +
mov ecx esi +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?Initialize@ClassInfoBase@DirectUI@@QAEJPAUHINSTANCE__@@PBG_NPBQBUPropertyInfo@2@I@Z  +
mov ebx eax +
test ebx ebx +
jl loc_103AC06  +
mov [edi] esi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 18h  +
push esi  +
call sub_1050BCE  +
jmp loc_103ABFD  +
mov ebx 8007000Eh +
jmp loc_103ABFD  +
***
call sub_1001F95  +
push 8  +
call sub_100D68D  +
mov esi eax +
mov [ebp-10h] esi +
test esi esi +
jz loc_103AC44  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_103AC51  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0ClassInfoBase@DirectUI@@QAE@XZ  +
mov dword ptr [esi] offset off_103AC6C +
mov eax esi +
pop esi  +
retn   +
***
mov eax [eax] +
jmp loc_101D18D  +
***
call sub_1001F95  +
xor esi esi +
mov [ebp-18h] esi +
mov ecx [ebp+8] +
push esi  +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aCamcdocScgetmu  +
mov [ebp-4] esi +
mov dword ptr [ebp-18h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx [ebp+0Ch] +
mov [ebp-10h] esi +
cmp ebx esi +
jz loc_1059065  +
xor eax eax +
cmp ax [ebx] +
jz loc_1059065  +
mov edi ds:GetFileMUIPath +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
push esi  +
lea eax [ebp-14h] +
push eax  +
push esi  +
push ebx  +
push esi  +
mov [ebp-14h] esi +
mov [ebp+0Ch] esi +
mov [ebp-20h] esi +
mov [ebp-1Ch] esi +
call edi  +
test eax eax +
jz loc_1058FC2  +
mov eax [ebp+0Ch] +
push esi  +
add eax eax +
push eax  +
mov ecx offset dword_10F5414 +
call sub_100AC0D  +
mov [ebp-10h] eax +
cmp eax esi +
jz loc_1059010  +
lea ecx [ebp-20h] +
push ecx  +
lea ecx [ebp+0Ch] +
push ecx  +
push eax  +
lea eax [ebp-14h] +
push eax  +
push esi  +
push ebx  +
push esi  +
mov [ebp-14h] esi +
call edi  +
test eax eax +
jz loc_1059023  +
push dword ptr [ebp-10h]  +
mov ecx [ebp+10h] +
call sub_100AE0E  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
cmp [ebp-10h] esi +
jz loc_103AE0C  +
push dword ptr [ebp-10h]  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
mov [ebp-14h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aScgetfileprope  +
lea ecx [ebp-24h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-34h] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105959A  +
mov esi ds:CreateFileW +
push ebx  +
mov edi 80h +
push edi  +
push 3  +
push ebx  +
push ebx  +
push 40000000h  +
push dword ptr [ebp+0Ch]  +
call esi  +
mov edx [ebp+10h] +
cmp eax 0FFFFFFFFh +
setz cl  +
mov [ebp-10h] eax +
mov [edx] cl +
cmp eax 0FFFFFFFFh +
jnz loc_103AEFE  +
push ebx  +
push edi  +
push 3  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [ebp+0Ch]  +
call esi  +
mov [ebp-10h] eax +
cmp eax 0FFFFFFFFh +
jz loc_10595AF  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-10h]  +
call ds:GetFileTime  +
test eax eax +
jz loc_10595BD  +
push dword ptr [ebp-10h]  +
call ds:CloseHandle  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-14h] 1 +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
lea ecx [esi+0E0h] +
call sub_100EB41  +
test al al +
jz loc_103AFA5  +
push 0  +
lea ecx [esi+0E4h] +
call sub_100EB41  +
test al al +
jz loc_103AFA5  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_1059CC7  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx+14h] +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_105A6AE  +
xor eax eax +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_105A6BA  +
xor eax eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_103B01E  +
push eax  +
call sub_100F30B  +
and dword ptr [esi] 0 +
pop ecx  +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
push esi  +
push dword ptr [ebp+0Ch]  +
mov esi ecx +
lea ecx [esi+4] +
mov [esi] eax +
call sub_103D512  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
push offset aImagelist_geti  +
call sub_101D9DA  +
mov esi eax +
cmp esi edi +
jz loc_1041D6A  +
mov dword_10F5338 esi +
jmp loc_1041D5C  +
***
mov eax [ecx+4] +
jmp loc_1041B77  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+2Dh] dl +
jnz loc_1062C45  +
mov ecx [eax] +
cmp [ecx+2Dh] dl +
jz loc_1062C4D  +
mov eax [eax+4] +
cmp [eax+2Dh] dl +
jnz loc_103B0B6  +
mov ecx [esi] +
cmp ecx [eax] +
jz loc_1062C58  +
mov ecx [esi] +
cmp [ecx+2Dh] dl +
jnz loc_103B0BF  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+2Dh] 0 +
jz loc_1062C6D  +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1062C75  +
mov [ecx+4] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+rguid]  +
mov edi offset off_1012454 +
mov [ebp+var_8] edi +
call sub_10127C8  +
mov esi eax +
test esi esi +
jl loc_1062CCB  +
push [ebp+var_4]  +
mov eax [ebp+arg_0] +
push [ebp+arg_10]  +
mov ecx [eax] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+4Ch]  +
mov esi eax +
test esi esi +
jl loc_1062CEF  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
call sub_10123F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+rguid]  +
mov edi offset off_1012454 +
mov [ebp+var_8] edi +
call sub_10127C8  +
mov esi eax +
test esi esi +
jl loc_1062D21  +
push [ebp+var_4]  +
mov eax [ebp+arg_0] +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+54h]  +
mov esi eax +
test esi esi +
jl loc_1062D45  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
call sub_10123F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_101D8DC +
call sub_1023117  +
and dword ptr [esi+20h] 0 +
and dword ptr [esi+24h] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx [ebp+arg_0] +
call sub_1012A67  +
test eax eax +
jz loc_1062DF2  +
push [ebp+arg_10]  +
mov ecx [eax] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+18h]  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx [ebp+arg_0] +
call sub_1012A67  +
test eax eax +
jz loc_1062DFC  +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+1Ch]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+10h] 0 +
jz loc_103B2A5  +
cmp dword ptr [ebp+14h] 0 +
jz loc_103B2A5  +
push esi  +
push dword ptr [ebp+0Ch]  +
mov esi [ebp+8] +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_101280E  +
mov eax [ebp+0Ch] +
cmp eax [esi+20h] +
jz loc_1062E38  +
cmp dword ptr [eax+24h] 8 +
jb loc_103B2AC  +
mov eax [eax+10h] +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+14h]  +
call sub_100A593  +
mov edx [ebp+18h] +
test edx edx +
jnz loc_1062E42  +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
mov eax 80070057h +
jmp loc_103B2A1  +
***
add eax 10h +
jmp loc_103B287  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+10h] +
test edi edi +
jz loc_1062E5D  +
push esi  +
push dword ptr [ebp+0Ch]  +
mov esi [ebp+8] +
lea eax [ebp+10h] +
push eax  +
mov ecx esi +
call sub_101280E  +
mov eax [ebp+10h] +
cmp eax [esi+20h] +
pop esi  +
jz loc_1062E67  +
mov eax [eax+20h] +
mov [edi] eax +
xor eax eax +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_103B882  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
add eax 0Ch +
push eax  +
lea ecx [esi+28h] +
call sub_103B978  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov eax [ebp+arg_0] +
add eax 28h +
push eax  +
lea ecx [esi+34h] +
call sub_1022BC7  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 4  +
***
cmp [ebp+arg_C] ecx +
jz loc_100AFF8  +
jmp loc_1065CB3  +
and [ebp+var_8] 0 +
jmp loc_100AF62  +
mov eax 80070057h +
jmp loc_100AF4F  +
test [ebp+arg_18] 1C00h +
jnz loc_1065CEF  +
jmp loc_1065D14  +
cmp [ebp+var_4] esi +
jz loc_100B002  +
jmp loc_100B016  +
***
lea eax [ebp+VersionInformation] +
push eax  +
mov byte_10F52C1 0 +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_103B3BD  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jbe loc_1066282  +
mov byte_10F52C6 1 +
jmp loc_100EBC5  +
mov byte_10F52C6 0 +
jmp loc_100EBC5  +
***
cmp dword_10F6C64 edi +
jnz locret_103B3DF  +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-30h] 3 +
mov [ebp-2Ch] ebx +
push offset aCpersistorGett  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+8] +
push offset word_100A5FC  +
call sub_101DDB2  +
push ebx  +
lea ecx [ebp-18h] +
call sub_101E2B5  +
push ebx  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call sub_101DDF6  +
lea eax [ebp-10h] +
push eax  +
lea ecx [esi+8] +
mov byte ptr [ebp-4] 2 +
call sub_102C3F1  +
mov [ebp-1Ch] ebx +
cmp [ebp-10h] ebx +
jz loc_103B4DD  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-10h] +
call sub_101DE26  +
cmp [ebp-1Ch] ebx +
jz loc_103B4DD  +
xor esi esi +
cmp [ebp-1Ch] ebx +
jle loc_103B4CD  +
push ebx  +
lea ecx [ebp-14h] +
call sub_101E2B5  +
lea eax [ebp-14h] +
push eax  +
push esi  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_101E13F  +
cmp [ebp-14h] ebx +
jz loc_1066F55  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-14h] +
mov [ebp-20h] ebx +
call sub_102C03F  +
cmp dword ptr [ebp-20h] 3 +
jnz loc_1066F55  +
push dword ptr [ebp-14h]  +
lea eax [ebp-18h] +
push eax  +
call sub_100CA9D  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_103B4CD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp-18h] ebx +
jz loc_103B4DD  +
push dword ptr [ebp+8]  +
lea ecx [ebp-18h] +
call sub_102C109  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_103B4EE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_103B4FE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
inc esi  +
cmp esi [ebp-1Ch] +
jl loc_103B474  +
jmp loc_103B4CD  +
***
mov esi [esi+4] +
push eax  +
mov ecx esi +
call sub_101D0E4  +
jmp loc_1021E2C  +
***
mov esi eax +
inc eax  +
mov [ebp-10h] eax +
jmp loc_101E08B  +
mov byte ptr [ebp-4] 2 +
jmp loc_102202F  +
***
call sub_1001F95  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] ebx +
push offset aCxmldocumentLo  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea esi [edi+4] +
cmp [esi] ebx +
jnz loc_1067C6C  +
push ebx  +
lea ecx [ebp-10h] +
call sub_101E2B5  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_102C1E5  +
lea eax [ebp-10h] +
push eax  +
push edi  +
lea ecx [ebp-34h] +
call sub_102C353  +
push ebx  +
push ds:off_102BAA8  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
mov byte ptr [ebp-28h] 1 +
call sub_101ECB0  +
lea eax [ebp-40h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_101E823  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call sub_101EB25  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call sub_101EB25  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_103B639  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
push offset aImagelist_dest  +
call sub_101D9DA  +
mov esi eax +
cmp esi edi +
jz loc_102F16A  +
mov dword_10F53DC esi +
jmp loc_102F162  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_103B6E4  +
cmp word ptr [eax] 7Bh +
jnz loc_103B6E4  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_103B6E0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 0FFh +
cmp [ebp+arg_0] al +
ja loc_103B70A  +
movzx eax [ebp+arg_0] +
movzx eax byte_10F5E48[eax] +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 100h  +
push 0FFFFFFFFh  +
push offset byte_10F5E48  +
mov esi ecx +
call memset  +
add esp 0Ch +
xor eax eax +
movzx ecx byte_10F9A28[eax] +
mov byte_10F5E48[ecx] al +
inc eax  +
cmp eax 40h +
jb loc_103B72E  +
mov eax esi +
pop esi  +
retn   +
***
pop esi  +
retn   +
***
or dword_10F53E0 1 +
mov ecx esi +
call sub_103B713  +
jmp loc_103B7B7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
test byte ptr dword_10F53E0 1 +
push esi  +
push edi  +
mov [ebp+var_8] bl +
mov [ebp-7] bl +
mov [ebp+var_6] bl +
mov [ebp+var_5] bl +
mov [ebp+var_4] ebx +
mov esi offset unk_10F56E0 +
jz loc_103B779  +
mov edi [ebp+arg_0] +
mov eax [edi] +
cmp [eax] bx +
jz loc_103B7EF  +
mov eax [edi] +
cmp word ptr [eax] 3Dh +
jz loc_103B7EF  +
cmp [ebp+var_4] 4 +
jge loc_103B7EF  +
movzx ecx byte ptr [eax] +
add eax 2 +
push ecx  +
mov ecx esi +
mov [edi] eax +
call sub_103B6F0  +
cmp al 0FFh +
jz loc_103B7BA  +
mov ecx [ebp+var_4] +
inc [ebp+var_4]  +
mov [ebp+ecx+var_8] al +
jmp loc_103B7BA  +
mov edi [ebp+arg_4] +
push dword ptr [edi]  +
lea eax [ebp+var_8] +
push [ebp+var_4]  +
mov ecx esi +
push eax  +
call sub_103B819  +
add [edi] eax +
xor eax eax +
cmp [ebp+var_4] 4 +
pop edi  +
pop esi  +
setz al  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov dl [ecx+1] +
mov al [ecx] +
push ebx  +
shl al 2 +
mov bl dl +
shr bl 4 +
or al bl +
mov [ecx] al +
mov al [ecx+2] +
mov bl al +
push esi  +
shl dl 4 +
shr bl 2 +
push edi  +
mov edi [ebp+arg_4] +
or bl dl +
shl al 6 +
or al [ecx+3] +
lea edx [edi-1] +
xor esi esi +
mov [ecx+1] bl +
mov [ecx+2] al +
test edx edx +
jle loc_103B868  +
mov eax [ebp+arg_8] +
mov bl [esi+ecx] +
mov [eax] bl +
inc eax  +
inc esi  +
cmp esi edx +
jl loc_103B85D  +
mov eax edi +
neg eax  +
pop edi  +
sbb eax eax +
pop esi  +
and eax edx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_103B8DD  +
mov [eax+8] ebx +
jmp loc_103B8DD  +
***
call sub_1001F95  +
mov edi ecx +
cmp dword ptr [edi+8] 7FFFFFEh +
jnb loc_10630B5  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_103D6EB  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jz loc_103B2F2  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_103B877  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jz loc_103EA24  +
mov esi ebx +
lea eax [ebx+4] +
mov ecx [eax] +
cmp byte ptr [ecx+2Ch] 0 +
jz loc_103B901  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+2Ch] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1001FCF  +
retn 10h  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jz loc_103EA2B  +
mov edx [edx] +
cmp byte ptr [edx+2Ch] 0 +
jz loc_103B947  +
cmp esi [ecx] +
jnz loc_103B924  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_102B8F4  +
mov eax [esi+4] +
mov byte ptr [eax+2Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+2Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_103B0C6  +
lea eax [esi+4] +
jmp loc_103B8E2  +
mov byte ptr [ecx+2Ch] 1 +
mov byte ptr [edx+2Ch] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+2Ch] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_103B942  +
***
lea eax [esi+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
call sub_10127EE  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_103B995  +
jmp loc_103B9C7  +
***
call sub_1001F95  +
mov edi ecx +
push dword ptr [ebp+8]  +
call sub_1012896  +
mov esi eax +
cmp esi [edi+4] +
jnz loc_103B95F  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-30h] +
call sub_103B9D7  +
and dword ptr [ebp-4] 0 +
push eax  +
push esi  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
call sub_103BCCA  +
mov esi [eax] +
push 0  +
push 1  +
lea ecx [ebp-30h] +
call sub_100CD3C  +
lea eax [esi+28h] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100CDE2  +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov [esi+1Ch] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_103BA08  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-2Ch] 3 +
mov [ebp-28h] ebx +
push offset aXmllistcollect  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push ebx  +
lea ecx [ebp-10h] +
call sub_101DDF6  +
mov edi [ebp+8] +
lea eax [ebp-10h] +
push eax  +
lea ecx [edi+8] +
mov byte ptr [ebp-4] 1 +
call sub_102C3F1  +
cmp [ebp-10h] ebx +
jz loc_103BADE  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-10h] +
mov [ebp-18h] ebx +
call sub_101DE26  +
cmp [ebp-18h] ebx +
mov [ebp-14h] ebx +
jle loc_103BACE  +
push ebx  +
lea ecx [ebp+8] +
call sub_101E2B5  +
lea eax [ebp+8] +
push eax  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_101E13F  +
cmp [ebp+8] ebx +
jz loc_103BAB2  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp+8] +
mov [ebp-1Ch] ebx +
call sub_102C03F  +
cmp dword ptr [ebp-1Ch] 1 +
jz loc_103BB32  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_103BAC3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-14h]  +
mov eax [ebp-14h] +
cmp eax [ebp-18h] +
jl loc_103BA78  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_103BADE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
push 1  +
lea eax [ebp+8] +
push eax  +
push edi  +
lea ecx [ebp-40h] +
call sub_101EB5D  +
mov eax [esi] +
lea ecx [ebp-40h] +
push ecx  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call dword ptr [eax+10h]  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call sub_101EB25  +
jmp loc_103BAB2  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [ebp+8] +
lea edi [esi+8] +
mov ecx edi +
mov dword ptr [esi] offset off_103BBAC +
mov [esi+4] eax +
call sub_100AD56  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
mov ecx edi +
call sub_100AE0E  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+8] +
inc eax  +
push eax  +
call sub_103BBFB  +
mov eax [esi+4] +
mov eax [eax+4] +
mov eax [eax+4] +
mov ecx [ebp+8] +
push 0  +
add eax 8 +
push eax  +
call sub_101EA69  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
sub esp 28h +
mov esi ecx +
mov ecx esp +
mov [ebp+var_4] esp +
call sub_103B1CB  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_103BC25  +
pop esi  +
leave   +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov eax [esi+8] +
mov edi [ebp+8] +
and dword ptr [ebp-4] 0 +
cmp edi eax +
jbe loc_103BC67  +
mov ecx [esi+4] +
lea edx [ebp+0Ch] +
push edx  +
sub edi eax +
push edi  +
push ecx  +
mov ecx esi +
call sub_103BC73  +
push 0  +
push 1  +
lea ecx [ebp+10h] +
call sub_100CD3C  +
call sub_1001FCF  +
retn 2Ch  +
jnb loc_103BC53  +
jmp loc_1063193  +
***
call sub_100A60E  +
mov [ebp-14h] ecx +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov [ebp-18h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_103BCA5  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-14h] +
push dword ptr [ebp+8]  +
call sub_103D9C7  +
dec dword ptr [ebp+0Ch]  +
jmp loc_103BC8C  +
call sub_1001FCF  +
retn 0Ch  +
***
push [ebp+arg_8]  +
push dword ptr [esi+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_103B88C  +
mov eax [ebp+arg_0] +
jmp loc_103BD4C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jz loc_103BCAD  +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
push ebx  +
push edi  +
mov edi [ebp+arg_8] +
cmp ecx [eax] +
jz loc_103EA3D  +
cmp ecx eax +
jz loc_103BD51  +
add ecx 0Ch +
push ecx  +
push edi  +
call sub_10127EE  +
pop ecx  +
pop ecx  +
test al al +
jz loc_1063212  +
mov eax [ebp+arg_4] +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] eax +
call sub_103B087  +
mov ebx [ebp+arg_8] +
lea eax [ebx+0Ch] +
push edi  +
push eax  +
call sub_10127EE  +
pop ecx  +
pop ecx  +
test al al +
jz loc_1063212  +
mov eax [ebx+8] +
cmp byte ptr [eax+2Dh] 0 +
push edi  +
mov ecx esi +
jnz sub_106320F  +
push [ebp+arg_4]  +
push 1  +
push [ebp+arg_0]  +
call sub_103B88C  +
mov eax [ebp+arg_0] +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
mov eax [eax+8] +
add eax 0Ch +
push edi  +
push eax  +
call sub_10127EE  +
pop ecx  +
pop ecx  +
test al al +
jz loc_106326C  +
mov eax [esi+4] +
push edi  +
push dword ptr [eax+8]  +
mov ecx esi +
push 0  +
jmp loc_103BD3F  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_103DCB5  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+8] +
call sub_103BDB1  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push ds:off_103AD08  +
lea ebx [esi+1Ch] +
push ebx  +
call sub_103BB66  +
mov edi [ebp+8] +
and dword ptr [ebp-4] 0 +
lea eax [edi+1Ch] +
push eax  +
mov ecx ebx +
mov dword ptr [esi] offset off_100BAC0 +
call sub_103BE54  +
lea ecx [esi+28h] +
mov byte ptr [ebp-4] 1 +
call sub_1037569  +
lea ecx [esi+34h] +
mov byte ptr [ebp-4] 2 +
call sub_1041C89  +
mov eax [edi+40h] +
mov [esi+40h] eax +
mov eax [esi+20h] +
mov ecx [eax] +
push eax  +
push ecx  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_103BE28  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp eax [ebp+arg_4] +
jz loc_103BE4A  +
push eax  +
mov ecx esi +
call sub_103B307  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov [ebp+arg_0] eax +
jmp loc_103BE33  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_100A60E  +
mov esi ecx +
mov [ebp-14h] esi +
call sub_103D6CD  +
and dword ptr [esi+8] 0 +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [esi+4] eax +
mov ecx [ecx+4] +
mov edx [ecx] +
mov eax [eax] +
push ecx  +
push edx  +
push eax  +
mov ecx esi +
call sub_103BE98  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103BEB7  +
pop ebp  +
retn 0Ch  +
***
call sub_100A60E  +
mov [ebp-14h] ecx +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov [ebp-18h] eax +
cmp eax [ebp+10h] +
jz loc_103BEEE  +
mov ecx [ebp-14h] +
add eax 8 +
push eax  +
push dword ptr [ebp+8]  +
call sub_103D9C7  +
mov eax [ebp+0Ch] +
mov eax [eax] +
mov [ebp+0Ch] eax +
jmp loc_103BED0  +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_103BF21  +
lea eax [edi+esi*4] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103BF4F  +
pop edi  +
leave   +
retn 10h  +
***
call sub_100A60E  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_103BF7F  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_103CB5E  +
dec dword ptr [ebp+0Ch]  +
add dword ptr [ebp+8] 4 +
jmp loc_103BF65  +
call sub_1001FCF  +
retn 18h  +
***
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call sub_103BFBD  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_103BFA3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_103BFDC  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_103BFEF  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103C00E  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jz loc_103C027  +
push esi  +
call sub_103E26D  +
add esi 4 +
jmp loc_103C017  +
pop esi  +
pop ebp  +
retn 10h  +
***
call sub_100A77D  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 2 +
call sub_101EB25  +
jmp loc_103C048  +
mov byte ptr [ebp-4] 1 +
jmp loc_10227FB  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_103C059  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_103C069  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov bl 1 +
jmp loc_1022815  +
***
call sub_1001F95  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-40h] 3 +
mov [ebp-3Ch] ebx +
push offset aXmlmapcollecti  +
lea ecx [ebp-40h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push ebx  +
lea ecx [ebp-14h] +
call sub_101DDF6  +
mov ecx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
add ecx 8 +
mov byte ptr [ebp-4] 1 +
call sub_102C3F1  +
cmp [ebp-14h] ebx +
jz loc_103BFA3  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-14h] +
mov [ebp-18h] ebx +
call sub_101DE26  +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
xor esi esi +
cmp [ebp-18h] ebx +
mov byte ptr [ebp-4] 2 +
jle loc_103C144  +
push ebx  +
lea ecx [ebp-10h] +
call sub_101E2B5  +
lea eax [ebp-10h] +
push eax  +
push esi  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call sub_101E13F  +
cmp [ebp-10h] ebx +
jz loc_103C12D  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-10h] +
mov [ebp-1Ch] ebx +
call sub_102C03F  +
cmp dword ptr [ebp-1Ch] 1 +
jz loc_103C244  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_103C13E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc esi  +
cmp esi [ebp-18h] +
jl loc_103C0F5  +
mov esi [ebp-2Ch] +
mov dword ptr [ebp-10h] 1 +
cmp [ebp-2Ch] ebx +
jz loc_103BF87  +
mov eax [ebp-28h] +
sub eax [ebp-2Ch] +
sar eax 2 +
cmp [ebp-10h] eax +
jnb loc_103BF87  +
push esi  +
lea ecx [ebp-20h] +
call sub_101ED6F  +
lea eax [esi+4] +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 4 +
call sub_101ED6F  +
push 1  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 5 +
call sub_101EB5D  +
push 1  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 6 +
call sub_101EB5D  +
mov eax [edi] +
lea ecx [ebp-54h] +
push ecx  +
lea ecx [ebp-68h] +
push ecx  +
mov ecx edi +
mov byte ptr [ebp-4] 7 +
call dword ptr [eax+10h]  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 6 +
call sub_101EB25  +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 5 +
call sub_101EB25  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_103C1E8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_103C1F9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
add dword ptr [ebp-10h] 2 +
add esi 8 +
jmp loc_103C14E  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-30h] +
call sub_103C25A  +
jmp loc_103C12D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_102183C  +
mov ecx esi +
mov edi eax +
call sub_1021854  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jb loc_1067C49  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_103C296  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_102183C  +
test eax eax +
jnz loc_103C2CA  +
xor esi esi +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_103C9DE  +
mov eax [edi+4] +
lea ecx [eax+esi*4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 2 +
jmp loc_103C2AA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_103C2E7  +
push 8  +
mov eax offset byte_10E7FB5 +
call sub_100A60E  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103C337  +
mov eax [ebp+arg_4] +
imul eax eax +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103C365  +
pop edi  +
leave   +
retn 10h  +
***
call sub_100A60E  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_103C395  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_103D4B9  +
dec dword ptr [ebp+0Ch]  +
add dword ptr [ebp+8] 30h +
jmp loc_103C37B  +
call sub_1001FCF  +
retn 18h  +
***
call sub_100A60E  +
mov esi ecx +
mov [ebp-14h] esi +
call sub_103121F  +
and dword ptr [esi+8] 0 +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [esi+4] eax +
mov ecx [ecx+4] +
mov edx [ecx] +
mov eax [eax] +
push ecx  +
push edx  +
push eax  +
mov ecx esi +
call sub_103C3E6  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103C405  +
pop ebp  +
retn 0Ch  +
***
call sub_100A60E  +
mov [ebp-14h] ecx +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov [ebp-18h] eax +
cmp eax [ebp+10h] +
jz loc_103C43C  +
mov ecx [ebp-14h] +
add eax 8 +
push eax  +
push dword ptr [ebp+8]  +
call sub_10111C2  +
mov eax [ebp+0Ch] +
mov eax [eax] +
mov [ebp+0Ch] eax +
jmp loc_103C41E  +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-44h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCidentifierpoo  +
lea ecx [ebp-44h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [edi+4] +
mov [ebp-18h] ecx +
call sub_100B8AF  +
lea ecx [edi+10h] +
mov [ebp-14h] ecx +
call sub_100B8AF  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-34h] +
call sub_103C3A2  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_103D881  +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10631A5  +
mov ecx [ebp-30h] +
mov esi [ecx] +
cmp esi ecx +
jz loc_103C4F9  +
mov eax [edi+24h] +
cmp eax [esi+8] +
jb loc_103C54C  +
cmp eax [esi+0Ch] +
ja loc_103C54C  +
cmp eax [esi+8] +
jnz loc_10631B7  +
push dword ptr [ebp-14h]  +
mov eax [ecx] +
push esi  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
call sub_103C597  +
push dword ptr [ebp-18h]  +
lea eax [ebp+0Ch] +
push dword ptr [ebp-30h]  +
push esi  +
push eax  +
call sub_103C597  +
mov ecx [ebp+8] +
add esp 20h +
lea eax [ebp-44h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-10h] ebx +
call sub_100B8F1  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
mov esi [esi] +
cmp esi ecx +
jnz loc_103C4E6  +
jmp loc_103C4F9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103C5C9  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_8] +
jnz loc_103C5E0  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
add eax 8 +
push eax  +
lea ecx [ebp+arg_C] +
call sub_103C5FB  +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov [ebp+arg_4] eax +
jmp loc_103C5D1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov ecx [esi] +
call sub_103C619  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax [ecx+4] +
push eax  +
call sub_10111C2  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCmasterstringt  +
lea ecx [ebp-30h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [ebp-20h] +
call sub_103121F  +
mov [ebp-1Ch] eax +
mov [ebp-18h] ebx +
mov eax [esi+58h] +
mov ecx [eax] +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
mov byte ptr [ebp-4] 2 +
mov [ebp-14h] ecx +
cmp ecx eax +
jnz loc_103C73A  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
lea ecx [esi+28h] +
call sub_103C449  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call ebx  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
call sub_100B8F1  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-40h] +
add ecx 14h +
push eax  +
call sub_103C78A  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call ebx  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10631E1  +
lea ecx [ebp-14h] +
call sub_102BFD0  +
mov eax [esi+58h] +
mov ecx [ebp-14h] +
jmp loc_103C684  +
***
call sub_1001F95  +
mov ebx ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCstringtableSc  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebx+20h] +
mov esi [eax] +
cmp esi eax +
jz loc_103C7DE  +
push dword ptr [esi+28h]  +
push dword ptr [ebp+0Ch]  +
call sub_101294E  +
test al al +
jz loc_1063176  +
mov esi [esi] +
cmp esi [ebx+20h] +
jnz loc_103C7C4  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [esi] edi +
call sub_100EBA3  +
test al al +
jz sub_106634F  +
and [ebp+pclsid.Data1] edi +
xor eax eax +
lea edi [ebp+pclsid.Data2] +
stos   +
stos   +
stos   +
lea eax [ebp+pclsid] +
push eax  +
push offset sz  +
call ds:CLSIDFromString  +
test eax eax +
jl loc_103C8C1  +
and [ebp+var_18] 0 +
lea ecx [ebp+var_18] +
call sub_100A5E6  +
push eax  +
lea eax [ebp+pclsid] +
push eax  +
push ebx  +
push 1  +
call sub_103C92B  +
mov edi eax +
mov eax [ebp+var_18] +
test edi edi +
jl loc_106633C  +
mov [esi] eax +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 8  +
***
call sub_100A4F0  +
xor edi edi +
mov [ebp-1Ch] edi +
mov esi dword_10F53D4 +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_103C95E  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_10662E8  +
mov [ebp-4] edi +
cmp esi edi +
jz loc_103C9AC  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_103B3CE  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 10h  +
push offset aImagelist_read  +
call sub_101D9DA  +
mov esi eax +
cmp esi edi +
jz loc_10662F2  +
mov dword_10F53D4 esi +
jmp loc_103C965  +
***
call sub_100A60E  +
mov esi ecx +
mov [ebp-1Ch] esi +
push dword ptr [ebp+10h]  +
lea ecx [ebp-14h] +
call sub_101ED6F  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1021854  +
mov edi [ebp+0Ch] +
mov [ebp+10h] eax +
test edi edi +
jz loc_103CAD2  +
mov ecx esi +
call sub_102183C  +
mov ecx 3FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_1067693  +
add eax edi +
cmp [ebp+10h] eax +
jnb loc_10676C1  +
mov edx [ebp+10h] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp+10h] +
jb loc_1067698  +
add [ebp+10h] edx +
cmp [ebp+10h] eax +
jnb loc_103CA51  +
mov [ebp+10h] eax +
push 0  +
push dword ptr [ebp+10h]  +
call sub_1021804  +
mov ebx eax +
mov eax [esi+4] +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp-18h] ebx +
push eax  +
mov [ebp+0Ch] ebx +
mov byte ptr [ebp-4] 1 +
call sub_103CAF0  +
lea ecx [ebp-14h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
mov [ebp+0Ch] eax +
call sub_103BEFB  +
push esi  +
mov [ebp+0Ch] eax +
push dword ptr [ebp+0Ch]  +
mov eax [esi+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_103CAF0  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_102183C  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_103CAC0  +
mov ecx [esi+8] +
push esi  +
push ecx  +
push eax  +
call sub_103BFEF  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+10h] +
lea eax [ebx+eax*4] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*4] +
mov [esi+8] eax +
mov [esi+4] ebx +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_103CAE3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103CB1E  +
pop edi  +
leave   +
retn 10h  +
***
call sub_100A60E  +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov esi [ebp+8] +
mov [ebp-14h] eax +
cmp esi [ebp+0Ch] +
jnz loc_103CB47  +
mov eax [ebp+10h] +
call sub_1001FCF  +
retn 18h  +
push esi  +
push dword ptr [ebp+10h]  +
call sub_103CB5E  +
add dword ptr [ebp+10h] 4 +
add esi 4 +
jmp loc_103CB37  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_103CB83  +
push dword ptr [ebp+0Ch]  +
call sub_101ED6F  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_1068857  +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
not eax  +
mov ecx 0FFh +
cmp edi 8 +
jb loc_103CC59  +
mov esi edi +
shr esi 3 +
push ebx  +
movzx ebx byte ptr [edx] +
xor ebx eax +
and ebx ecx +
shr eax 8 +
xor eax ds:dword_103CC70[ebx*4] +
inc edx  +
movzx ebx byte ptr [edx] +
xor ebx eax +
and ebx ecx +
shr eax 8 +
xor eax ds:dword_103CC70[ebx*4] +
inc edx  +
movzx ebx byte ptr [edx] +
xor ebx eax +
and ebx ecx +
shr eax 8 +
xor eax ds:dword_103CC70[ebx*4] +
inc edx  +
movzx ebx byte ptr [edx] +
xor ebx eax +
and ebx ecx +
shr eax 8 +
xor eax ds:dword_103CC70[ebx*4] +
inc edx  +
movzx ebx byte ptr [edx] +
xor ebx eax +
and ebx ecx +
shr eax 8 +
xor eax ds:dword_103CC70[ebx*4] +
inc edx  +
movzx ebx byte ptr [edx] +
xor ebx eax +
and ebx ecx +
shr eax 8 +
xor eax ds:dword_103CC70[ebx*4] +
inc edx  +
movzx ebx byte ptr [edx] +
xor ebx eax +
and ebx ecx +
shr eax 8 +
xor eax ds:dword_103CC70[ebx*4] +
inc edx  +
movzx ebx byte ptr [edx] +
xor ebx eax +
and ebx ecx +
shr eax 8 +
xor eax ds:dword_103CC70[ebx*4] +
inc edx  +
sub edi 8 +
dec esi  +
jnz loc_103CBBE  +
pop ebx  +
test edi edi +
jnz loc_103EA5C  +
pop edi  +
not eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_100ECBD  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_103AFF6  +
mov ecx esi +
mov edi eax +
call sub_103AFE3  +
push dword ptr [ebp+8]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jb loc_105D28D  +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_103D194  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_103AFF6  +
test eax eax +
jnz loc_105D27A  +
xor esi esi +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_103D1D1  +
imul esi esi +
add esi [edi+4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_100A60E  +
mov esi ecx +
mov [ebp-14h] esi +
push dword ptr [ebp+10h]  +
lea ecx [ebp-44h] +
call sub_103D4EB  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_103AFE3  +
mov edi [ebp+0Ch] +
mov ebx eax +
test edi edi +
jz loc_103D2AE  +
mov ecx esi +
call sub_103AFF6  +
mov ecx 5555555h +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_105D174  +
add eax edi +
cmp ebx eax +
jnb loc_105D1B9  +
mov edx ebx +
shr edx 1 +
sub ecx edx +
cmp ecx ebx +
jb loc_105D179  +
add ebx edx +
cmp ebx eax +
jnb loc_103D23D  +
mov ebx eax +
push 0  +
push ebx  +
call sub_10375C8  +
mov ecx [esi+4] +
push esi  +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp+10h] eax +
push ecx  +
mov [ebp+0Ch] eax +
mov byte ptr [ebp-4] 1 +
call sub_103D2C7  +
lea ecx [ebp-44h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
mov [ebp+0Ch] eax +
call sub_103C311  +
push esi  +
mov [ebp+0Ch] eax +
push dword ptr [ebp+0Ch]  +
mov eax [esi+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_103D2C7  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_103AFF6  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jnz loc_105D180  +
mov eax [ebp+10h] +
imul ebx ebx +
imul edi edi +
add ebx eax +
add edi eax +
mov [esi+0Ch] ebx +
mov [esi+8] edi +
mov [esi+4] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call sub_1021AA1  +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103D2F5  +
pop edi  +
leave   +
retn 10h  +
***
call sub_100A60E  +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov esi [ebp+8] +
mov [ebp-14h] eax +
cmp esi [ebp+0Ch] +
jnz loc_105D097  +
mov eax [ebp+10h] +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_103D350 +
call sub_103AFAE  +
mov eax [ebp+arg_0] +
mov [esi+14h] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_103D3F0  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+18h] +
call sub_103D54B  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_0] +
mov dword ptr [esi] offset off_100B9EC +
mov eax [edi+4] +
mov [esi+4] eax +
lea eax [edi+8] +
push eax  +
lea ecx [esi+8] +
call sub_103D427  +
mov al [edi+14h] +
mov [esi+14h] al +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov esi ecx +
mov [ebp-14h] esi +
call sub_101D4F2  +
and dword ptr [esi+8] 0 +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [esi+4] eax +
mov ecx [ecx+4] +
mov edx [ecx] +
mov eax [eax] +
push ecx  +
push edx  +
push eax  +
mov ecx esi +
call sub_103D46B  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_103D48A  +
pop ebp  +
retn 0Ch  +
***
call sub_100A60E  +
mov [ebp-14h] ecx +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov [ebp-18h] eax +
cmp eax [ebp+10h] +
jnz loc_105CA6C  +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_103D4DE  +
push dword ptr [ebp+0Ch]  +
call sub_103D4EB  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
add eax 4 +
mov [esi] ecx +
push eax  +
lea ecx [esi+4] +
call sub_103D512  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call sub_103D3F0  +
and dword ptr [ebp-4] 0 +
add edi 18h +
push edi  +
lea ecx [esi+18h] +
call sub_103D54B  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call sub_102BDFD  +
and dword ptr [ebp-4] 0 +
lea eax [edi+8] +
push eax  +
lea ecx [esi+8] +
call sub_101ED6F  +
mov al [edi+0Ch] +
mov [esi+0Ch] al +
mov al [edi+0Dh] +
mov [esi+0Dh] al +
mov eax [edi+10h] +
mov [esi+10h] eax +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
call sub_103D5CF  +
mov ecx ds:?s_CallDepth@SC@mmcerror@@0IA +
mov edx eax +
mov eax [ebp+8] +
and dword ptr [eax+8] 0 +
and dword ptr [eax+0Ch] 0 +
inc dword ptr [ecx]  +
mov dword ptr [eax] 3 +
mov [eax+4] edx +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10123F1  +
add esi 4 +
push esi  +
push [ebp+arg_0]  +
call sub_103D5F2  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_10685A0  +
and dword ptr [ebx] 0 +
cmp [ebp+arg_0] 0 +
push esi  +
jz loc_10685CE  +
push edi  +
mov esi offset off_10F5BD4 +
mov edi offset unk_10F5BE4 +
push [ebp+arg_0]  +
call dword ptr [esi]  +
test eax eax +
jz loc_103D647  +
cmp esi edi +
pop edi  +
jz loc_1068604  +
push ebx  +
push [ebp+arg_0]  +
call dword ptr [esi+4]  +
mov esi eax +
test esi esi +
jl loc_106863D  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
add esi 8 +
cmp esi edi +
jnb loc_103D625  +
jmp loc_103D61C  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push ds:off_103AD08  +
lea edi [esi+1Ch] +
push edi  +
call sub_103BB66  +
and dword ptr [ebp-4] 0 +
mov ecx edi +
mov dword ptr [esi] offset off_100BAC0 +
call sub_103D6B3  +
lea ecx [esi+28h] +
mov byte ptr [ebp-4] 1 +
call sub_1037569  +
lea ecx [esi+34h] +
mov byte ptr [ebp-4] 2 +
call sub_1041C89  +
mov eax [ebp+8] +
mov [esi+40h] eax +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_103D6CD  +
and dword ptr [esi+8] 0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_10375C8  +
test eax eax +
jz loc_103D6DC  +
mov [eax] eax +
lea ecx [eax+4] +
test ecx ecx +
jz locret_103D6E5  +
mov [ecx] eax +
retn   +
***
call sub_100A60E  +
mov esi ecx +
push 0  +
push 1  +
call sub_10375C8  +
push dword ptr [ebp+18h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
mov [ebp-14h] eax +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_103D730  +
mov eax [ebp-14h] +
call sub_1001FCF  +
retn 14h  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_103D75E  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_103D76B  +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+0Ch] +
mov [esi+8] eax +
call sub_103D7A5  +
mov al [ebp+arg_10] +
mov [esi+2Ch] al +
mov byte ptr [esi+2Dh] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_100CDE2  +
mov eax [edi+1Ch] +
mov [esi+1Ch] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
push 0  +
push 1  +
call sub_10375C8  +
and dword ptr [ebp-4] 0 +
mov esi eax +
mov [ebp-14h] esi +
test esi esi +
jz loc_103D7F1  +
mov eax [ebp+8] +
mov [esi] eax +
lea eax [esi+4] +
test eax eax +
jz loc_103D7FD  +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
push dword ptr [ebp+10h]  +
lea eax [esi+8] +
push eax  +
call sub_103D818  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_103D83D  +
push dword ptr [ebp+0Ch]  +
call sub_103D84A  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
lea eax [edi+4] +
push eax  +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_101D8DC +
call sub_100CDE2  +
mov eax [edi+20h] +
mov [esi+20h] eax +
mov eax [edi+24h] +
mov [esi+24h] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-34h] +
mov [ebp-14h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCidentifierp_0  +
lea ecx [ebp-34h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
cmp [esi+8] ebx +
jz loc_1063007  +
mov ecx [esi+4] +
mov edx [ecx] +
mov eax [edi+1Ch] +
cmp [edx+8] eax +
mov [ebp-1Ch] ebx +
setnbe byte ptr [ebp+0Fh]  +
mov [ebp-18h] ebx +
cmp [ebp+0Fh] bl +
jnz loc_1063036  +
mov eax [ecx+4] +
mov edi [edi+20h] +
cmp [eax+0Ch] edi +
mov [ebp-24h] ebx +
setb byte ptr [ebp-0Dh]  +
mov [ebp-20h] ebx +
cmp [ebp-0Dh] bl +
jz loc_103D8FF  +
mov eax [eax+0Ch] +
inc eax  +
mov [ebp-24h] eax +
mov [ebp-20h] edi +
mov eax ecx +
mov edx [eax] +
mov eax edx +
mov eax [eax] +
cmp eax ecx +
jnz loc_1063047  +
mov ecx esi +
call sub_103D9AB  +
cmp [ebp+0Fh] bl +
jnz loc_1063064  +
cmp [ebp-0Dh] bl +
jz loc_103D933  +
mov eax [esi+4] +
lea ecx [ebp-24h] +
push ecx  +
push eax  +
mov ecx esi +
call sub_10111C2  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-34h] +
mov dword ptr [ebp-14h] 1 +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+4] +
push dword ptr [eax+4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_100ED24  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea edi [eax+4] +
push dword ptr [edi]  +
mov ebx ecx +
push eax  +
call sub_103D7CA  +
push 1  +
mov ecx ebx +
mov esi eax +
call sub_103DA00  +
mov [edi] esi +
mov eax [esi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov eax [ecx+8] +
mov edx [ebp+8] +
mov esi 6666666h +
sub esi eax +
cmp esi edx +
jb loc_1062E7D  +
add eax edx +
mov [ecx+8] eax +
call sub_1001FCF  +
retn 4  +
***
push 0A0h  +
mov eax offset dword_10E27C0 +
call sub_1001F95  +
mov edi ecx +
mov esi offset off_1012454 +
xor ebx ebx +
mov [ebp-14h] esi +
mov [ebp-10h] ebx +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [ebp-14h] +
mov [eax+4] ecx +
mov ecx [ebp+8] +
mov [ebp-4] ebx +
mov [ebp-18h] esp +
mov dword ptr [eax] 0Eh +
call sub_102CE9A  +
push dword ptr [edi+10h]  +
lea ecx [ebp-60h] +
call sub_103D655  +
mov ecx [ebp+0Ch] +
push ebx  +
lea eax [ebp-60h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101EA69  +
lea eax [ebp-60h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-0ACh] +
call sub_103BD7A  +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [edi+4] +
mov byte ptr [ebp-4] 2 +
call sub_103DAE6  +
lea ecx [ebp-0ACh] +
mov byte ptr [ebp-4] 1 +
call sub_1012B45  +
lea ecx [ebp-60h] +
mov [ebp-4] bl +
call sub_1012B7E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
mov [ebp-14h] esi +
call sub_10123F1  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
cmp byte ptr [esi+59h] 0 +
jz loc_10634F6  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_1063525  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_106351A  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_103DB49  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
cmp dword ptr [edi+8] 35E50D6h +
jnb loc_1063408  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_103DBC2  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_1063433  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
mov ecx [eax] +
cmp byte ptr [ecx+58h] 0 +
jz loc_1063461  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+58h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1001FCF  +
retn 10h  +
***
call sub_100A60E  +
mov esi ecx +
push 0  +
push 1  +
call sub_10362ED  +
push dword ptr [ebp+18h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
mov [ebp-14h] eax +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_103DC07  +
mov eax [ebp-14h] +
call sub_1001FCF  +
retn 14h  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_103DC35  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_103DC42  +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+0Ch] +
mov [esi+8] eax +
call sub_103DC7C  +
mov al [ebp+arg_10] +
mov [esi+58h] al +
mov byte ptr [esi+59h] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call sub_103DCB5  +
and dword ptr [ebp-4] 0 +
add edi 8 +
push edi  +
lea ecx [esi+8] +
call sub_103BDB1  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1012454 +
push dword ptr [eax+4]  +
call sub_1012A41  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100C4D0  +
mov eax [ebp+0Ch] +
mov esi [ebp+8] +
xor edi edi +
mov [ebp-44h] edi +
mov [ebp-3Ch] eax +
mov eax [ebp+10h] +
mov [ebp-60h] eax +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-4Ch] edi +
mov [ebp-48h] edi +
inc dword ptr [eax]  +
mov [ebp-68h] esi +
mov dword ptr [ebp-54h] 3 +
mov [ebp-50h] edi +
xor ebx ebx +
inc ebx  +
push offset aScgetconsolefi  +
lea ecx [ebp-54h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp-3Ch]  +
lea eax [ebp-78h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-78h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-50h] edi +
jnz loc_106739D  +
mov ecx [ebp-60h] +
push 0FFFFFFFFh  +
push edi  +
call sub_1011BBD  +
push edi  +
push edi  +
push 3  +
push edi  +
push ebx  +
push 80000000h  +
push dword ptr [ebp-3Ch]  +
call ds:CreateFileW  +
mov [ebp-40h] eax +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_103DECF  +
test al al +
jz loc_10673C9  +
lea eax [ebp-64h] +
push eax  +
push dword ptr [ebp-40h]  +
mov [ebp-64h] edi +
call ds:GetFileSize  +
mov [ebp-5Ch] eax +
cmp [ebp-64h] edi +
jnz loc_10673E3  +
push eax  +
call sub_100F31C  +
pop ecx  +
mov [ebp-3Ch] eax +
mov byte ptr [ebp-4] 4 +
cmp eax edi +
jz loc_10673F6  +
push edi  +
lea ecx [ebp-58h] +
push ecx  +
push dword ptr [ebp-5Ch]  +
mov [ebp-58h] edi +
push eax  +
push dword ptr [ebp-40h]  +
call ds:ReadFile  +
cmp eax ebx +
jnz loc_1067409  +
mov eax [ebp-5Ch] +
cmp [ebp-58h] eax +
jnz loc_1067417  +
push eax  +
push dword ptr [ebp-3Ch]  +
push edi  +
call sub_103CB90  +
mov edx eax +
push 9  +
xor eax eax +
pop ecx  +
mov [ebp-38h] ax +
lea edi [ebp-36h] +
stos   +
stos   +
push 0Ah  +
lea eax [ebp-38h] +
push eax  +
push edx  +
call ds:_ultow  +
mov ecx [ebp-60h] +
add esp 0Ch +
push eax  +
call sub_102B350  +
lea eax [ebp-54h] +
push eax  +
mov ecx esi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov [ebp-44h] ebx +
call sub_103B009  +
lea ecx [ebp-40h] +
call sub_103DE93  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_100C50D  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_103DEA7  +
push eax  +
call sub_103DEAE  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_103DECF  +
test al al +
jz loc_1066474  +
pop ebp  +
jmp ds:CloseHandle  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_103DEE2  +
cmp [ebp+arg_0] 0FFFFFFFFh +
jz loc_103DEE2  +
inc eax  +
pop ebp  +
retn 4  +
***
push eax  +
lea ecx [ebp+0Ch] +
call sub_101DD5D  +
push dword ptr [esi+4]  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-30h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_103DF34  +
push eax  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 1 +
call SysFreeString  +
jmp loc_1021C93  +
***
call sub_1001F95  +
xor ebx ebx +
mov [ebp-10h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-3Ch] 3 +
mov [ebp-38h] ebx +
push offset aScdecodebinary  +
lea ecx [ebp-3Ch] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+0Ch] +
mov eax [eax] +
cmp eax ebx +
jz loc_1066F6F  +
push eax  +
call SysStringLen  +
mov edi [ebp+10h] +
imul eax eax +
add eax 7 +
shr eax 3 +
push 80070057h  +
mov [ebp-18h] eax +
push edi  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-38h] ebx +
jnz loc_1066F76  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx edi +
call sub_102E8A5  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-38h] ebx +
jnz loc_1066FA7  +
cmp [ebp-18h] ebx +
jz loc_1066FCD  +
push ebx  +
push dword ptr [ebp-18h]  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx edi +
call sub_102E7B5  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-38h] ebx +
jnz loc_1066FDC  +
mov [ebp-24h] bl +
mov [ebp-20h] edi +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
mov [ebp-14h] ebx +
call sub_102DE75  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-38h] ebx +
jnz loc_1066FF6  +
push 8000FFFFh  +
push dword ptr [ebp-14h]  +
lea eax [ebp-4Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-38h] ebx +
jnz loc_106700E  +
mov eax [ebp+0Ch] +
mov eax [eax] +
mov edi [ebp-14h] +
mov [ebp-1Ch] eax +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_103B78E  +
test al al +
jnz loc_103E0A5  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-24h] +
call sub_102CB28  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-38h] ebx +
jnz loc_1067026  +
mov eax [ebp-14h] +
sub eax edi +
cmp eax [ebp-18h] +
jz loc_103E122  +
mov ecx [ebp+10h] +
cmp eax ebx +
jz loc_106704C  +
push ebx  +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
call sub_103E18F  +
mov byte ptr [ebp-4] 0Ah +
push eax  +
lea ecx [ebp-3Ch] +
call esi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-38h] ebx +
jnz loc_106705E  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 1 +
call sub_102CA5B  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
cmp al bl +
jz loc_103E069  +
jmp loc_103E122  +
cmp al bl +
jnz loc_103E122  +
jmp loc_103E09A  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] ebx +
xor esi esi +
inc esi  +
push offset aCxmlbinaryScre  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+0Ch] ebx +
jz loc_106655A  +
cmp [edi+4] ebx +
jz loc_106657A  +
mov eax [edi] +
cmp eax ebx +
jz loc_106657A  +
movzx ecx byte ptr [ebp+10h] +
neg ecx  +
sbb ecx ecx +
and ecx 40h +
push ecx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:GlobalReAlloc  +
cmp eax ebx +
jz loc_106658D  +
mov [edi] eax +
mov eax [ebp+0Ch] +
mov [edi+4] eax +
mov [edi+8] ebx +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_103E285  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_103E299  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test [ebp+arg_0] 1 +
jnz loc_1066CF6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_103E2C4  +
mov byte ptr [ebp-4] 4 +
jmp loc_101ED1E  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-14h] edi +
xor ebx ebx +
mov [ebp-10h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] ebx +
xor esi esi +
inc esi  +
push offset aCpersistorChec  +
lea ecx [ebp-24h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
add edi 8 +
push edi  +
mov edi [ebp+8] +
mov ecx edi +
call sub_101ED6F  +
mov [ebp-10h] esi +
mov esi ds:?Throw@SC@mmcerror@@QAEXJ@Z +
cmp [edi] ebx +
jz loc_10677CE  +
lea ecx [ebp-4Ch] +
call sub_100AD56  +
lea eax [ebp-4Ch] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_103E3C5  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-4Ch] +
call sub_101DDD9  +
test eax eax +
jnz loc_10677DD  +
cmp [ebp+10h] ebx +
jnz loc_10677EC  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 1 +
call sub_100A77D  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
push 3  +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-24h] edi +
mov [ebp-20h] ebx +
push offset aCxmlelementG_4  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-10h] ebx +
mov esi [esi] +
push offset loc_101DD48  +
push esi  +
lea eax [ebp-10h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101E311  +
push 80004002h  +
push dword ptr [ebp-10h]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?Throw@SC@mmcerror@@QAEXXZ +
cmp [ebp-20h] ebx +
jnz loc_106670A  +
mov [ebp-14h] ebx +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 3 +
call dword ptr [ecx+0ACh]  +
mov [ebp-24h] edi +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_106672B  +
push dword ptr [ebp-14h]  +
mov ecx [ebp+8] +
call sub_100AE0E  +
mov [ebp-24h] edi +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_1066740  +
push dword ptr [ebp-14h]  +
call SysFreeString  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_103E4A6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_101D46C  +
mov eax [ebp+8] +
mov esi [ebp+0Ch] +
mov [ebp-50h] eax +
mov eax [ebp+10h] +
mov [ebp-94h] eax +
mov eax [ebp+14h] +
xor ebx ebx +
mov [ebp-68h] ebx +
mov [ebp-8Ch] eax +
mov eax [ebp+18h] +
mov [ebp-90h] eax +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-5Ch] ebx +
mov [ebp-58h] ebx +
inc dword ptr [eax]  +
mov [ebp-9Ch] ecx +
mov [ebp-74h] esi +
mov dword ptr [ebp-64h] 3 +
mov [ebp-60h] ebx +
xor edi edi +
inc edi  +
push offset aCconsolefile_0  +
lea ecx [ebp-64h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp-90h]  +
lea eax [ebp-84h] +
push esi  +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-60h] ebx +
jnz loc_1067D68  +
mov eax [ebp-94h] +
mov [eax] bl +
mov eax [ebp-90h] +
lea ecx [ebp-70h] +
mov [eax] ebx +
call sub_101DD84  +
push ebx  +
lea eax [ebp-84h] +
push eax  +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 3 +
call sub_102C561  +
push eax  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-60h] ebx +
jnz loc_1067D95  +
push edi  +
push dword ptr [ebp-74h]  +
lea eax [ebp-70h] +
push eax  +
lea eax [ebp-84h] +
push eax  +
mov [ebp-51h] bl +
call sub_102DC3D  +
push eax  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-64h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_103E631  +
mov byte ptr [ebp-51h] 1 +
mov dword ptr [ebp-64h] 3 +
mov [ebp-60h] ebx +
cmp [ebp-51h] bl +
jz loc_103E702  +
lea eax [ebp-98h] +
push eax  +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 6 +
call sub_102C3AF  +
lea eax [ebp-98h] +
push eax  +
lea ecx [ebp-0A0h] +
mov byte ptr [ebp-4] 7 +
call sub_101ED6F  +
push eax  +
lea eax [ebp-70h] +
push eax  +
lea ecx [ebp-88h] +
mov byte ptr [ebp-4] 8 +
call sub_102C353  +
mov eax [ebp-0A0h] +
mov byte ptr [ebp-4] 0Ah +
cmp eax ebx +
jz loc_103E695  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-98h] +
mov byte ptr [ebp-4] 0Bh +
cmp eax ebx +
jz loc_103E6A9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push ebx  +
push ds:off_102D8E0  +
lea eax [ebp-88h] +
push eax  +
lea ecx [ebp-0B4h] +
mov byte ptr [ebp-7Ch] 1 +
call sub_101ECB0  +
push ebx  +
push ds:off_102BAC8  +
lea ecx [ebp-0B4h] +
mov byte ptr [ebp-4] 0Ch +
call sub_10226DF  +
cmp al bl +
jnz loc_1067DC2  +
lea ecx [ebp-0B4h] +
mov byte ptr [ebp-4] 0Bh +
call sub_101EB25  +
lea ecx [ebp-88h] +
mov byte ptr [ebp-4] 6 +
call sub_101EB25  +
push ebx  +
lea ecx [ebp-30h] +
mov dword ptr [ebp-4] 3 +
mov dword ptr [ebp-18h] 7 +
call sub_100CD14  +
lea eax [ebp-30h] +
push eax  +
push dword ptr [ebp-74h]  +
lea eax [ebp-84h] +
push eax  +
mov byte ptr [ebp-4] 0Fh +
call sub_103DCDE  +
push eax  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 10h +
call esi  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 0Fh +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-60h] ebx +
jnz loc_1067E03  +
mov ecx [ebp-9Ch] +
lea eax [ebp-30h] +
push eax  +
call sub_1041CE8  +
mov eax [ebp-9Ch] +
push ebx  +
lea ecx [ebp-4Ch] +
mov byte ptr [eax+1Ch] 1 +
mov dword ptr [ebp-34h] 7 +
call sub_100CD14  +
lea eax [ebp-4Ch] +
push eax  +
push dword ptr [ebp-74h]  +
lea eax [ebp-84h] +
push eax  +
mov byte ptr [ebp-4] 11h +
call sub_102ECA1  +
push eax  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 12h +
call esi  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 11h +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-60h] ebx +
jnz loc_1067E84  +
push dword ptr [ebp-8Ch]  +
lea eax [ebp-52h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
lea eax [ebp-84h] +
push eax  +
mov [ebp-52h] bl +
call sub_103E8BF  +
push eax  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 13h +
call esi  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 11h +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-60h] ebx +
jnz loc_1067EAA  +
cmp [ebp-52h] bl +
jnz loc_104ED0D  +
cmp [ebp-51h] bl +
jz loc_1067EEB  +
mov eax [ebp-94h] +
mov ecx [ebp-8Ch] +
mov byte ptr [eax] 1 +
lea eax [ebp-70h] +
push eax  +
call sub_101EC83  +
mov ecx [ebp-50h] +
lea eax [ebp-64h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
push ebx  +
push edi  +
lea ecx [ebp-4Ch] +
mov [ebp-68h] edi +
call sub_100CD3C  +
push ebx  +
push edi  +
lea ecx [ebp-30h] +
call sub_100CD3C  +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 1 +
call sub_101D546  +
mov [ebp-4] bl +
lea ecx [ebp-64h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-50h] +
call sub_101D44D  +
retn 14h  +
***
call sub_101D46C  +
mov eax [ebp+8] +
mov edi [ebp+14h] +
mov esi [ebp+0Ch] +
mov [ebp-34h] eax +
mov eax [ebp+10h] +
xor ebx ebx +
mov [ebp-3Ch] ebx +
mov [ebp-60h] eax +
mov eax [ebp+18h] +
mov [ebp-5Ch] eax +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-44h] ebx +
mov [ebp-40h] ebx +
inc dword ptr [eax]  +
mov [ebp-68h] edi +
mov dword ptr [ebp-4Ch] 3 +
mov [ebp-48h] ebx +
push offset aCconsolefile_3  +
lea ecx [ebp-4Ch] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [edi] bl +
cmp dword ptr [esi+18h] 8 +
lea eax [esi+4] +
mov [ebp-38h] eax +
jb loc_103E92A  +
mov eax [eax] +
push eax  +
call ds:GetFileAttributesW  +
shr eax 4 +
not al  +
and al 1 +
jnz loc_104EB58  +
mov ecx [ebp-34h] +
lea eax [ebp-4Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-3Ch] 1 +
mov [ebp-4] bl +
lea ecx [ebp-4Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-34h] +
call sub_101D44D  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
test eax eax +
jnz loc_10680CE  +
xor eax eax +
mov edi [ebp+arg_0] +
cmp eax edi +
jz loc_103E9F4  +
call sub_100EBDB  +
test edi edi +
jz loc_103E9F4  +
push edi  +
call sub_103E9FF  +
mov [esi] eax +
test eax eax +
jz loc_10680D5  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 8  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_103EA20  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov dword ptr [eax+4] 1 +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_103EA1C  +
***
mov [eax] ebx +
jmp loc_103B8DD  +
mov edx [edx+8] +
cmp byte ptr [edx+2Ch] 0 +
jnz loc_10630E0  +
jmp loc_103B947  +
***
add ecx 0Ch +
push ecx  +
push edi  +
call sub_10127EE  +
pop ecx  +
pop ecx  +
test al al +
jz loc_106326C  +
push edi  +
push [ebp+arg_4]  +
mov ecx esi +
jmp loc_103BD3D  +
***
movzx esi byte ptr [edx] +
xor esi eax +
and esi ecx +
shr eax 8 +
xor eax ds:dword_103CC70[esi*4] +
inc edx  +
dec edi  +
jnz loc_103EA5C  +
jmp loc_103CC61  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push 2  +
pop eax  +
lea ecx [esi+58h] +
mov [esi+24h] eax +
mov [esi+28h] eax +
mov [esi+2Ch] bl +
mov [esi+2Dh] bl +
mov [esi+6Ch] bl +
mov [esi+6Dh] bl +
mov [esi+6Eh] bl +
mov [esi+6Fh] bl +
mov [esi+70h] ebx +
mov [esi+74h] ebx +
call sub_100A6F0  +
lea ecx [esi+30h] +
call sub_100A6F0  +
lea ecx [esi+44h] +
call sub_100A6F0  +
lea ecx [esi+14h] +
call ?Empty@CString@@QAEXXZ  +
lea ecx [esi+18h] +
mov [esi+4] ebx +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
call ?Empty@CString@@QAEXXZ  +
lea ecx [esi+1Ch] +
call ?Empty@CString@@QAEXXZ  +
lea ecx [esi+20h] +
pop esi  +
pop ebx  +
jmp ?Empty@CString@@QAEXXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+58h] +
call sub_100AE0E  +
test eax eax +
setnl cl  +
mov [esi+6Ch] cl +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
xor ebx ebx +
inc edi  +
cmp [esi+6Ch] bl +
jz loc_1057343  +
push dword ptr [esi+5Ch]  +
lea eax [esi+14h] +
push eax  +
call sub_1040794  +
mov edi eax +
cmp edi ebx +
jl loc_1057410  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp [esi+6Ch] bl +
jnz loc_103F092  +
jmp loc_103F0A8  +
***
call sub_102F91C  +
mov eax offset word_10F66B0 +
retn   +
***
call sub_1001F95  +
xor ebx ebx +
inc ebx  +
mov esi offset unk_10F5620 +
test byte ptr dword_10F52F4 bl +
jnz loc_103F106  +
or dword_10F52F4 ebx +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_100AD56  +
push offset loc_1050754  +
call sub_100BFD5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
cmp dword_10F5628 0 +
mov [ebp-10h] ebx +
jnz loc_103F14B  +
mov eax 105h +
mov ebx eax +
push eax  +
mov ecx esi +
call sub_101D69E  +
test eax eax +
jz loc_10579B1  +
push eax  +
push ebx  +
call ds:GetCurrentDirectoryW  +
mov edi eax +
mov ecx esi +
test edi edi +
jz loc_10579E9  +
cmp edi ebx +
ja loc_10579A2  +
push edi  +
call sub_101D6F2  +
mov eax [ebp+8] +
mov ecx dword_10F5624 +
mov [eax] ecx +
mov eax [ebp-10h] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov ebx [ebp+8] +
mov byte ptr [ebp-0Dh] 0 +
test ebx ebx +
jz loc_103F1C5  +
mov eax lpDst +
mov edi offset lpDst +
mov esi offset dword_102F7D0 +
cmp eax edi +
jz loc_103F19A  +
cmp byte ptr [eax+19h] 4 +
jnb sub_1057A51  +
push ebx  +
lea ecx [ebp+0Bh] +
call sub_102F8C7  +
push ebx  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_1057A65  +
mov byte ptr [ebp-0Dh] 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp byte ptr [ebp+0Bh] 0 +
jnz loc_1057AA1  +
mov al [ebp-0Dh] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call ds:OleInitialize  +
test eax eax +
jl loc_1057B5D  +
xor eax eax +
inc eax  +
mov [esi+0ECh] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_102F745  +
push 0  +
call sub_1020835  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:LoadLibraryW  +
***
call ebx  +
test eax eax +
js loc_105D29D  +
mov dword_10F5320 1 +
jmp loc_101D971  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_101D984  +
jmp loc_101D99C  +
call ebx  +
test eax eax +
mov eax [ebp+arg_0] +
js loc_105D2C8  +
push dword ptr [eax+4]  +
call dword ptr [eax]  +
test eax eax +
jz loc_101D99B  +
mov [edi] eax +
jmp loc_101D992  +
***
push offset aDeactivateactc  +
call sub_104098F  +
test eax eax +
jz loc_105D345  +
mov dword_10F532C eax +
jmp loc_100B065  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10F5330 +
test eax eax +
jnz loc_103F2DB  +
push offset aFindactctxsect  +
call sub_104098F  +
test eax eax +
jz loc_105D349  +
mov dword_10F5330 eax +
pop ebp  +
jmp eax  +
***
call sub_100B053  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 415h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
push offset aInitcommoncont  +
call sub_101D9DA  +
mov esi eax +
cmp esi edi +
jz loc_103029B  +
mov dword_10F5354 esi +
jmp loc_1030293  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
push offset unk_10F5720  +
push [ebp+arg_4]  +
push eax  +
push eax  +
call ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
xor ebx ebx +
call ?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
lea ecx [ebp+WndClass] +
push ecx  +
push dword ptr [esi+28h]  +
push eax  +
call ds:GetClassInfoW  +
mov edi offset aSizeablerebar +
test eax eax +
jz loc_103F3EE  +
and [ebp+WndClass.style] 0FFFFFFFCh +
mov [ebp+WndClass.lpszClassName] edi +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push 7F00h  +
push ebx  +
call ds:LoadCursorW  +
mov [ebp+WndClass.hCursor] eax +
lea eax [ebp+WndClass] +
push eax  +
mov [ebp+WndClass.hbrBackground] 10h +
call ?AfxRegisterClass@@YGHPAUtagWNDCLASSW@@@Z  +
mov ebx eax +
mov [esi+28h] edi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
cmp eax 0FFFFFFFFh +
jz loc_105F318  +
push 1000h  +
push esi  +
push offset unk_10F5720  +
lea ecx [esi+44h] +
mov eax [ecx] +
push 50002000h  +
push 0  +
call dword ptr [eax+0C0h]  +
neg eax  +
sbb eax eax +
neg eax  +
dec eax  +
pop esi  +
retn 4  +
***
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_100472C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_1060B91  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-18h] edi +
xor ebx ebx +
mov [ebp-14h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCmmcprotocolre  +
mov [ebp-4] ebx +
mov [ebp-14h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [edi] bl +
jnz loc_103F5E4  +
mov [ebp-10h] ebx +
push ebx  +
lea ecx [ebp-10h] +
mov [ebp-4] esi +
call sub_100A5E6  +
push eax  +
push ebx  +
call CoInternetGetSession  +
mov esi [ebp+8] +
push eax  +
mov ecx esi +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx esi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_103F5D4  +
push 80004003h  +
push dword ptr [ebp-10h]  +
lea eax [ebp-28h] +
push eax  +
call sub_100A3AE  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx esi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_103F5D4  +
add edi 4 +
mov ecx edi +
call sub_100A5E6  +
push eax  +
push offset stru_103F644  +
push ebx  +
push 17h  +
mov esi offset stru_103F634 +
push esi  +
call ds:CoGetClassObject  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_103F5D4  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov edi [edi] +
mov ecx [eax] +
push ebx  +
push ebx  +
push ebx  +
push offset aMmc  +
push esi  +
push edi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_103F5D4  +
mov eax [ebp-18h] +
mov byte ptr [eax] 1 +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_103F5E4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push offset dword_10F539C  +
push dword_10F9C08  +
mov dword_10F539C eax +
push offset unk_10F56F8  +
push offset unk_10F56FC  +
push offset unk_10F56F4  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_10F5398 eax +
retn   +
***
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_10F52D8 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_106518E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_103F7F8  +
test dword_10F52D8 ebx +
jz loc_103F7F8  +
mov dword_10F52D8 esi +
not esi  +
mov dword_10F52DC esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
mov esi 0BB40E64Fh +
jmp loc_103F7E5  +
***
cmp eax edi +
jge loc_101D740  +
mov edi eax +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_101D740  +
cmp byte ptr [ecx+19h] 3 +
jb loc_101D740  +
jmp loc_1065B8E  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100B7C6  +
jmp loc_10683C4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp Destination 0FFFFFFFFh +
push esi  +
mov esi [ebp+arg_0] +
jnz loc_103F915  +
and [ebp+var_22C] 0 +
push edi  +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_228] +
stos   +
pop edi  +
test esi esi +
jnz loc_103F8A2  +
push eax  +
call ds:GetModuleHandleW  +
mov esi eax +
push 104h  +
lea eax [ebp+Filename] +
push eax  +
push esi  +
call ds:GetModuleFileNameW  +
lea eax [ebp+Filename] +
mov [ebp+var_224] eax +
movzx eax [ebp+arg_4] +
mov [ebp+var_218] eax +
lea eax [ebp+var_22C] +
push eax  +
mov [ebp+var_22C] 20h +
mov [ebp+var_228] 88h +
mov [ebp+var_210] esi +
call ds:CreateActCtxW  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_103F915  +
push 0FFFFFFFFh  +
push esi  +
push offset Destination  +
call ds:__imp_InterlockedCompareExchange  +
cmp eax 0FFFFFFFFh +
jnz loc_106A853  +
call sub_102F448  +
mov ecx [ebp+var_4] +
xor eax eax +
cmp Destination 0FFFFFFFFh +
pop esi  +
setnz al  +
xor ecx ebp +
call sub_1002492  +
leave   +
retn 8  +
***
xor [eax-6F6F0004h] dh +
nop   +
nop   +
nop   +
push offset aCamcviewShowwe  +
call ds:RegisterWindowMessageW  +
mov dword_10F5310 eax +
retn   +
***
call ds:RegisterWindowMessageW  +
mov dword_10F5318 eax +
retn   +
***
call ds:RegisterWindowMessageW  +
mov wMsgFilterMin eax +
retn   +
***
push edi  +
push 2Eh  +
call esi  +
push 2Dh  +
mov edi eax +
call esi  +
mov dword_10F5404 edi +
pop edi  +
mov dword_10F5400 eax +
pop esi  +
retn   +
***
call ds:RegisterWindowMessageW  +
mov dword_10F537C eax +
retn   +
***
push offset loc_105078A  +
mov dword_10F542C 0 +
mov dword_10F5434 eax +
mov dword_10F5430 eax +
call sub_100BFD5  +
pop ecx  +
retn   +
***
push offset loc_1050782  +
mov dword_10F5420 0 +
mov dword_10F5428 eax +
mov dword_10F5424 eax +
call sub_100BFD5  +
pop ecx  +
retn   +
***
call sub_100BFD5  +
pop ecx  +
retn   +
***
call sub_103F775  +
push 5Ch  +
push offset dword_103FC80  +
call sub_100A4F0  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
lea eax [ebp-6Ch] +
push eax  +
call ds:GetStartupInfoW  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp-4] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp-20h] ebx +
mov edi offset dword_10F561C +
push ebx  +
push esi  +
push edi  +
call ds:__imp_InterlockedCompareExchange  +
cmp eax ebx +
jnz loc_1064FF4  +
xor esi esi +
inc esi  +
mov eax dword_10F53F4 +
cmp eax esi +
jz loc_1065013  +
mov eax dword_10F53F4 +
test eax eax +
jnz loc_103FCB8  +
mov dword_10F53F4 esi +
push offset dword_103FC7C  +
push offset dword_103FC70  +
call sub_103FDFB  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1065095  +
mov eax dword_10F53F4 +
cmp eax esi +
jnz loc_103FBC1  +
push offset dword_103FC6C  +
push offset dword_103FC08  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10F53F4 2 +
cmp [ebp-20h] ebx +
jnz loc_103FBCE  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10F9C18 ebx +
jnz loc_1065020  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_1065095  +
mov eax [eax] +
mov [ebp-24h] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
jbe loc_103FE1F  +
cmp cx 22h +
jz loc_103FCA8  +
inc eax  +
inc eax  +
jmp loc_103FBE9  +
xor ecx ecx +
cmp [ebp-1Ch] ebx +
setz cl  +
mov [ebp-1Ch] ecx +
jmp loc_103FC03  +
mov dword_10FD6EC esi +
jmp loc_103FB9D  +
***
push 0Ah  +
pop ecx  +
jmp loc_100C0FA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov dword ptr [ecx+70h] offset unk_10F570C +
push [ebp+arg_0]  +
mov dword_10F52E8 ecx +
push ecx  +
mov dword ptr [ecx] 84h +
mov dword ptr [ecx+64h] 300h +
call sub_103FD17  +
test eax eax +
jl loc_103FD0E  +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_1057EFD  +
***
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_100A4F0  +
mov esi [ebp+8] +
xor ebx ebx +
cmp esi ebx +
jz loc_1057C44  +
mov eax [ebp+0Ch] +
mov [esi+10h] eax +
mov eax [ebp+10h] +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+4] eax +
mov [esi+14h] ebx +
mov [esi+18h] ebx +
mov [ebp-4] ebx +
lea eax [esi+1Ch] +
push eax  +
mov edi ds:InitializeCriticalSection +
call edi  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp-4] 1 +
lea eax [esi+34h] +
push eax  +
call edi  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp-4] 2 +
lea eax [esi+4Ch] +
push eax  +
call edi  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [esi+68h] ebx +
mov byte ptr [esi+6Ch] 1 +
mov [esi+74h] ebx +
mov [esi+7Ch] ebx +
mov [esi+78h] ebx +
mov [esi+80h] ebx +
mov edi [esi+10h] +
cmp edi ebx +
jz loc_103FDEC  +
cmp [edi] ebx +
jz loc_103FDEC  +
push 1  +
call dword ptr [edi+20h]  +
push edi  +
push esi  +
call sub_100C081  +
mov edi eax +
jmp loc_103FDA3  +
xor eax eax +
call sub_100A4DC  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi [ebp+arg_4] +
jnb loc_103FE1C  +
test eax eax +
jnz loc_103FE1C  +
mov ecx [esi] +
test ecx ecx +
jz loc_103FE17  +
call ecx  +
add esi 4 +
jmp loc_103FE06  +
pop esi  +
pop ebp  +
retn   +
***
cmp cx bx +
jz loc_103FE2D  +
cmp [ebp-1Ch] ebx +
jnz loc_103FBF9  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_100C0EC  +
cmp cx 20h +
ja loc_100C0EC  +
inc eax  +
inc eax  +
mov [ebp-24h] eax +
jmp loc_103FE2D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi lpDst +
push edi  +
mov edi offset dword_10F5BC0 +
test esi esi +
jz loc_103FE91  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_1070415  +
add edi 4 +
mov [ebp+var_8] eax +
call EtwRegisterTraceGuidsW  +
mov esi [esi] +
jmp loc_103FE63  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
xor eax eax +
mov dword_10F5414 eax +
mov dword_10F5418 eax +
mov byte_10F541C al +
mov byte_10F541D 1 +
mov ecx offset dword_10F5414 +
jmp loc_103FEC0  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
lea eax [ebp-24h] +
push eax  +
mov esi ecx +
call ds:GetSystemInfo  +
push 0  +
push 0  +
push 0  +
call ds:HeapCreate  +
mov [esi+4] eax +
pop esi  +
test eax eax +
jz loc_10651CC  +
mov ecx lpDst +
cmp ecx offset lpDst +
jnz loc_10651AD  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_103FF2B  +
jmp ds:?AfxWinMain@@YGHPAUHINSTANCE__@@0PAGH@Z  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
call sub_103EFE7  +
lea eax [esi+74h] +
push eax  +
call sub_103F0CA  +
mov ebx eax +
test ebx ebx +
jl loc_10577A3  +
xor eax eax +
inc eax  +
cmp [ebp+0Ch] eax +
jle loc_103FFB0  +
mov ecx [ebp+10h] +
mov edi [ecx+eax*4] +
xor ecx ecx +
inc eax  +
xor edx edx +
cmp eax [ebp+0Ch] +
mov [ebp-10h] eax +
movzx eax word ptr [edi] +
setz dl  +
cmp ax 2Dh +
jz loc_104001B  +
cmp ax 2Fh +
jz loc_104001B  +
mov eax [esi] +
push edx  +
push ecx  +
push edi  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov ebx [esi+70h] +
test ebx ebx +
jl loc_10577D5  +
mov eax [ebp-10h] +
cmp eax [ebp+0Ch] +
jl loc_103FF68  +
test ebx ebx +
jl loc_1040006  +
lea edi [esi+14h] +
mov eax [edi] +
cmp dword ptr [eax-8] 0 +
jz loc_103FFFC  +
push eax  +
lea ecx [ebp+0Fh] +
call sub_102F8C7  +
xor ebx ebx +
push edi  +
mov [ebp-4] ebx +
call sub_10406FA  +
cmp eax ebx +
jl loc_1057808  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp byte ptr [ebp+0Fh] 0 +
jnz loc_105783F  +
push dword ptr [edi]  +
mov ecx esi +
call sub_104002A  +
mov ebx eax +
test ebx ebx +
jl loc_105784A  +
cmp dword ptr [esi+38h] 0 +
jnz loc_1057871  +
mov ecx [ebp+8] +
push ebx  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
xor ecx ecx +
inc ecx  +
inc edi  +
inc edi  +
jmp loc_103FF93  +
***
call sub_1001F95  +
mov esi ecx +
mov edi [ebp+8] +
xor ebx ebx +
push edi  +
inc ebx  +
call ds:PathFindFileNameW  +
cmp eax edi +
setnz al  +
test al al +
jz loc_105760C  +
push edi  +
mov ecx esi +
call sub_1040073  +
mov ebx eax +
test ebx ebx +
jl loc_10575E5  +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
lea ecx [ebp-2Ch] +
mov [ebp-14h] edi +
call sub_100AD56  +
lea ecx [ebp-40h] +
mov [ebp-4] edi +
call sub_100AD56  +
mov eax 400h +
mov byte ptr [ebp-4] 1 +
mov ebx eax +
mov byte ptr [esi+6Ch] 0 +
mov [ebp-18h] edi +
push eax  +
lea ecx [ebp-2Ch] +
call sub_101D69E  +
mov edi eax +
test edi edi +
jz loc_1057467  +
push dword ptr [ebp+8]  +
lea ecx [ebp-0Dh] +
call sub_102F8C7  +
lea eax [ebp-18h] +
push eax  +
push edi  +
push ebx  +
push dword ptr [ebp+8]  +
call ds:GetFullPathNameW  +
cmp byte ptr [ebp-0Dh] 0 +
mov edi eax +
jnz loc_1057445  +
cmp edi ebx +
ja loc_1057451  +
test edi edi +
jz loc_1057494  +
push edi  +
lea ecx [ebp-2Ch] +
call sub_101D6F2  +
cmp dword ptr [ebp-14h] 0 +
jl loc_10401DA  +
push dword ptr [ebp-28h]  +
call sub_103F166  +
test al al +
jz loc_10401DA  +
push dword ptr [ebp-28h]  +
mov ecx esi +
call sub_103F058  +
mov [ebp-14h] eax +
test eax eax +
jl loc_10574D9  +
call sub_1040209  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1040134  +
sub eax edx +
sar eax 1 +
mov ebx eax +
call sub_103F0BA  +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_104014C  +
sub eax ecx +
mov ecx [esi+60h] +
sar eax 1 +
lea edi [ecx+2] +
cmp ebx eax +
jbe loc_10401FD  +
add edi ebx +
push edi  +
lea ecx [ebp-40h] +
call sub_101D69E  +
mov ebx eax +
test ebx ebx +
jz loc_105750D  +
mov eax [esi+5Ch] +
push edi  +
push ebx  +
push eax  +
call ds:GetLongPathNameW  +
test eax eax +
jz loc_1057545  +
cmp eax edi +
ja loc_10401D0  +
push ebx  +
call ds:PathFindFileNameW  +
cmp eax ebx +
jz loc_10401A7  +
dec eax  +
dec eax  +
xor ecx ecx +
mov [eax] cx +
mov byte ptr [esi+6Fh] 0 +
mov byte ptr [esi+6Dh] 0 +
mov byte ptr [esi+6Eh] 0 +
call sub_1040209  +
mov edi ds:_wcsicmp +
push eax  +
push ebx  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10575C4  +
mov byte ptr [esi+6Dh] 1 +
push 0  +
lea ecx [ebp-40h] +
call sub_101D6F2  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 0 +
call sub_100A77D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call sub_100A77D  +
mov eax [ebp-14h] +
call sub_1001FCF  +
retn 4  +
add edi eax +
jmp loc_104016A  +
***
call sub_102F91C  +
mov eax offset word_10F62B0 +
retn   +
***
mov dword ptr [esi+54h] offset off_100C064 +
mov [ebp-4] ebx +
mov [esi+80h] ebx +
lea ecx [esi+84h] +
push ebx  +
mov byte ptr [ebp-4] 1 +
call sub_103F490  +
push ebx  +
lea ecx [esi+0A4h] +
mov byte ptr [ebp-4] 2 +
call sub_1040935  +
push ebx  +
lea ecx [esi+0ACh] +
mov byte ptr [ebp-4] 3 +
call sub_1040935  +
lea eax [esi+0B4h] +
mov [eax+4] ebx +
mov dword ptr [eax] offset off_10083D0 +
lea ecx [esi+0BCh] +
mov byte ptr [ebp-4] 5 +
call ??0CString@@QAE@XZ  +
lea edi [esi+0C8h] +
mov ecx edi +
mov byte ptr [ebp-4] 6 +
call sub_10206B1  +
lea ecx [esi+0D4h] +
push ebx  +
mov byte ptr [ebp-4] 7 +
call sub_104032A  +
lea ecx [esi+0E4h] +
push ebx  +
mov byte ptr [ebp-4] 8 +
call sub_104032A  +
mov ecx edi +
mov byte ptr [ebp-4] 9 +
mov [esi+94h] ebx +
mov [esi+98h] ebx +
mov [esi+9Ch] ebx +
mov [esi+0A0h] ebx +
mov [esi+0C0h] ebx +
mov [esi+0C4h] bl +
mov [esi+0C5h] bl +
mov [esi+0C6h] bl +
call sub_100A44C  +
lea ecx [esi+0D4h] +
call sub_100BC96  +
lea ecx [esi+0E4h] +
call sub_100BC96  +
mov [esi+0C7h] bl +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_1060B68  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CCommandLineInfo@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+30h] +
mov dword ptr [esi] offset off_10403B0 +
call sub_100AD56  +
lea ecx [esi+44h] +
mov byte ptr [ebp-4] 1 +
call sub_100AD56  +
lea ecx [esi+58h] +
mov byte ptr [ebp-4] 2 +
call sub_100AD56  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_103EFE7  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CDocManager@@QAE@XZ  +
mov dword ptr [esi] offset off_1040544 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push 1  +
push ds:off_104063C  +
push offset dword_1040648  +
call sub_102F6C1  +
mov dword ptr [esi] offset off_1040644 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
cmp [ebp+arg_4] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
jnz loc_105712C  +
push [ebp+arg_8]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
push ebx  +
call ?ParseParam@CCommandLineInfo@@UAEXPBGHH@Z  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov [ecx+70h] eax +
pop ebx  +
leave   +
retn 0Ch  +
***
call sub_1001F95  +
mov edi [ebp+8] +
push 25h  +
mov ecx edi +
call ?Find@CString@@QBEHG@Z  +
cmp eax 0FFFFFFFFh +
jnz loc_1057294  +
mov eax [edi] +
mov eax [eax-8] +
lea ecx [ebp-20h] +
lea esi [eax+eax] +
call sub_100AD56  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp-20h] +
call sub_101D69E  +
test eax eax +
jz loc_10572B2  +
mov ecx [edi] +
push esi  +
push eax  +
push ecx  +
call ds:ExpandEnvironmentStringsW  +
mov ebx eax +
test ebx ebx +
jbe loc_105729C  +
cmp ebx esi +
ja loc_105729C  +
push ebx  +
lea ecx [ebp-20h] +
call sub_101D6F2  +
push dword ptr [ebp-1Ch]  +
push edi  +
call sub_1040794  +
mov esi eax +
test esi esi +
jl loc_10572BE  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call sub_100A77D  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
call sub_100A4F0  +
xor esi esi +
mov [ebp-4] esi +
mov ecx [ebp+8] +
cmp [ebp+0Ch] esi +
jz loc_1057111  +
push dword ptr [ebp+0Ch]  +
call ??4CString@@QAEABV0@PBG@Z  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax esi +
call sub_100A4DC  +
retn 8  +
***
mov ecx offset dword_10F54B0 +
call sub_104080C  +
push offset loc_105082D  +
call sub_100BFD5  +
pop ecx  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
xor ebx ebx +
push ebx  +
call near ptr byte_103F6DC+1  +
lea edi [esi+0C4h] +
mov ecx edi +
mov [ebp-4] ebx +
call near ptr dword_102F344+3  +
lea ecx [esi+0D4h] +
mov byte ptr [ebp-4] 1 +
call near ptr dword_102FA04+3  +
lea eax [esi+0E4h] +
mov dword ptr [eax] offset off_104092C +
mov dword ptr [esi] offset off_10024A4 +
mov dword ptr [edi] offset off_100AA34 +
mov dword ptr [esi+0D4h] offset off_100B658 +
mov dword ptr [eax] offset off_100C0D4 +
mov [esi+0E8h] ebx +
lea eax [esi+100h] +
mov [esi+0ECh] ebx +
mov [esi+0F0h] ebx +
mov [esi+0F4h] bl +
mov byte ptr [esi+0F5h] 1 +
mov [esi+0F6h] bl +
mov [esi+0F7h] bl +
mov [esi+0F8h] ebx +
mov byte ptr [esi+0FCh] 1 +
mov [esi+0FDh] bl +
mov [eax] bl +
mov [eax+4] ebx +
lea ecx [esi+108h] +
mov byte ptr [ebp-4] 4 +
call near ptr dword_103F458+5  +
or dword ptr [esi+11Ch] 0FFFFFFFFh +
lea eax [esi+120h] +
mov dword ptr [eax] offset off_10025A8 +
mov [eax+4] ebx +
push ebx  +
lea ecx [esi+128h] +
mov byte ptr [ebp-4] 6 +
call sub_1040935  +
lea ecx [esi+130h] +
mov byte ptr [ebp-4] 7 +
call sub_102F30F  +
lea ecx [esi+148h] +
mov byte ptr [ebp-4] 8 +
mov [esi+13Ch] bl +
mov [esi+140h] ebx +
mov [esi+144h] ebx +
call sub_100AD56  +
mov [esi+15Ch] ebx +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_1002614 +
mov [eax+4] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10F5324 +
test eax eax +
jnz loc_1040976  +
push offset aCreateactctxw  +
call sub_104098F  +
test eax eax +
jz loc_105D33A  +
mov dword_10F5324 eax +
pop ebp  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpProcName]  +
push offset unk_10F5614  +
push offset off_10409AC  +
call sub_101D952  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetModuleHandleW  +
***
push offset aActivateactctx  +
call sub_104098F  +
test eax eax +
jz loc_105D341  +
mov dword_10F5328 eax +
jmp loc_100B18B  +
***
mov edi edi +
push edi  +
mov edi ecx +
call ?Default@CWnd@@IAEJXZ  +
cmp eax 0FFFFFFFFh +
jz loc_105ED10  +
push esi  +
mov esi ds:GetSysColor +
push 12h  +
call esi  +
push eax  +
mov ecx edi +
call sub_103F310  +
push 0Fh  +
call esi  +
push eax  +
mov ecx edi +
call sub_1040A3E  +
xor eax eax +
pop esi  +
pop edi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 413h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
mov esi ecx +
xor edi edi +
mov [ebp+var_8] 8 +
mov [ebp+var_4] 400h +
call sub_1030259  +
test eax eax +
jz loc_1040AD4  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_10]  +
or eax 800648h +
push [ebp+arg_C]  +
mov ecx esi +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_0]  +
push offset aRebarwindow32  +
push 80h  +
call ?CreateEx@CWnd@@QAEHKPBG0KABUtagRECT@@PAV1@IPAX@Z  +
test eax eax +
jz loc_1040AD2  +
lea eax [ebp+lParam] +
push eax  +
mov ecx esi +
mov [ebp+lParam] 0Ch +
mov [ebp+var_10] edi +
mov [ebp+var_C] edi +
call sub_1040AFD  +
test eax eax +
jz loc_1040AD2  +
xor edi edi +
inc edi  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 404h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
call sub_1040B5A  +
mov byte ptr [esi+88h] 0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_10036E4 +
mov byte ptr [esi+40h] 1 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCmainframePrec  +
lea ecx [ebp-24h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+8]  +
mov ecx [ebp-10h] +
call ?PreCreateWindow@CMDIFrameWnd@@UAEHAAUtagCREATESTRUCTW@@@Z  +
test eax eax +
jz loc_1060303  +
cmp byte_10F52C0 0 +
mov esi offset unk_10F5C00 +
jz loc_1040BF3  +
push offset aMmcmainframe  +
push 0Dh  +
push esi  +
call sub_100A593  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1060317  +
mov byte_10F52C0 0 +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov ebx [eax+8] +
mov edi ds:GetClassInfoW +
lea eax [ebp-4Ch] +
push eax  +
push esi  +
push ebx  +
call edi  +
mov [ebp-14h] eax +
test eax eax +
jnz loc_1040C3F  +
lea eax [ebp-4Ch] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+28h]  +
push ebx  +
call edi  +
test eax eax +
jz loc_1040C4C  +
mov ecx [ebp-10h] +
mov [ebp-28h] esi +
call sub_100C0A1  +
mov [ebp-38h] eax +
lea eax [ebp-4Ch] +
push eax  +
call ?AfxRegisterClass@@YGHPAUtagWNDCLASSW@@@Z  +
mov [ebp-14h] eax +
test eax eax +
jz loc_1040C4C  +
mov eax [ebp+8] +
and dword ptr [eax+20h] 0FFFF3FFFh +
mov [eax+28h] esi +
mov esi [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CMDIFrameWnd@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea ebx [esi+0C8h] +
lea edi [esi+0C4h] +
mov ecx ebx +
mov dword ptr [edi] offset off_1040D8C +
call sub_102F5E6  +
lea ecx [esi+0E0h] +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_100457C +
mov dword ptr [edi] offset off_100A64C +
mov dword ptr [ebx] offset off_100C048 +
call sub_103F477  +
lea ecx [esi+120h] +
mov byte ptr [ebp-4] 2 +
call sub_102F602  +
lea ecx [esi+12Ch] +
mov byte ptr [ebp-4] 3 +
call sub_102F652  +
xor edi edi +
lea ecx [esi+16Ch] +
mov byte ptr [ebp-4] 4 +
mov [esi+15Ch] edi +
mov [esi+160h] edi +
mov byte ptr [esi+169h] 0 +
mov byte ptr [esi+16Ah] 0 +
call ??0CString@@QAE@XZ  +
push edi  +
lea ecx [esi+170h] +
mov byte ptr [ebp-4] 5 +
call sub_103F490  +
mov ecx esi +
call sub_1040DA9  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
xor eax eax +
mov [ecx+150h] eax +
mov [ecx+0D8h] eax +
mov [ecx+0DCh] eax +
mov [ecx+158h] eax +
mov [ecx+164h] eax +
mov [ecx+154h] eax +
mov [ecx+168h] al +
retn   +
***
cmp eax offset unk_10F9BA0 +
add [edi] cl +
test [ecx+42h] bl +
add al [eax] +
call sub_1040E85  +
xor eax eax +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
push 600h  +
push 0  +
call sub_1040EB4  +
mov byte_10F52C7 al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov cl [ebp+arg_0] +
mov [eax+14h] cl +
mov ecx [ebp+arg_4] +
mov [eax+2040h] ecx +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov eax ds:off_1040F04 +
mov dword_10F5C20 eax +
mov eax ds:off_1040F08 +
mov dword_10F5C28 eax +
mov eax ds:off_1040F0C +
mov dword_10F5C30 eax +
mov eax ds:off_1040F10 +
mov dword_10F5C38 eax +
retn   +
***
push offset aCamcviewOnproc  +
call ds:RegisterWindowMessageW  +
mov dword_10F5314 eax +
retn   +
***
mov eax ds:off_103EF84 +
mov dword_10F5C64 eax +
mov eax ds:off_103EFB0 +
mov dword_10F5C6C eax +
mov eax ds:off_103EF88 +
mov dword_10F5C74 eax +
mov eax ds:off_103EFA0 +
mov dword_10F5C7C eax +
mov eax ds:off_1040FCC +
mov dword_10F5C84 eax +
retn   +
***
mov eax ds:off_1041074 +
mov dword_10F5DDC eax +
mov eax ds:off_1041078 +
mov dword_10F5DE4 eax +
mov eax ds:off_104107C +
mov dword_10F5DEC eax +
mov eax ds:off_1041080 +
mov dword_10F5DF4 eax +
mov eax ds:off_1041084 +
mov dword_10F5DFC eax +
mov eax ds:off_1041088 +
mov dword_10F5E04 eax +
mov eax ds:off_104108C +
mov dword_10F5E0C eax +
mov eax ds:off_1041090 +
mov dword_10F5E14 eax +
mov eax ds:off_1041094 +
mov dword_10F5E1C eax +
mov eax ds:off_1041098 +
mov dword_10F5E24 eax +
mov eax ds:off_104109C +
mov dword_10F5E2C eax +
mov eax ds:off_10410A0 +
mov dword_10F5E34 eax +
mov eax ds:off_10410A4 +
mov dword_10F5E3C eax +
mov eax ds:off_10410A8 +
mov dword_10F5E44 eax +
retn   +
***
mov eax ds:off_1041158 +
mov dword_10F5D74 eax +
mov eax ds:off_1041160 +
mov dword_10F5D7C eax +
mov eax ds:off_1041164 +
mov dword_10F5D84 eax +
mov eax ds:off_1041168 +
mov dword_10F5D8C eax +
mov eax ds:off_104116C +
mov dword_10F5D94 eax +
mov eax ds:off_1041170 +
mov dword_10F5D9C eax +
mov eax ds:off_1041178 +
mov dword_10F5DA4 eax +
mov eax ds:off_104117C +
mov dword_10F5DAC eax +
mov eax ds:off_1041180 +
mov dword_10F5DB4 eax +
mov eax ds:off_1041184 +
mov dword_10F5DBC eax +
mov eax ds:off_1041188 +
mov dword_10F5DC4 eax +
mov eax ds:off_1041174 +
mov dword_10F5DCC eax +
mov eax ds:off_104115C +
mov dword_10F5DD4 eax +
retn   +
***
mov eax ds:off_1041228 +
mov dword_10F5D14 eax +
mov eax ds:off_104122C +
mov dword_10F5D1C eax +
mov eax ds:off_1041230 +
mov dword_10F5D24 eax +
mov eax ds:off_1041234 +
mov dword_10F5D2C eax +
mov eax ds:off_1041238 +
mov dword_10F5D34 eax +
mov eax ds:off_104123C +
mov dword_10F5D3C eax +
mov eax ds:off_1041240 +
mov dword_10F5D44 eax +
mov eax ds:off_1041244 +
mov dword_10F5D4C eax +
mov eax ds:off_1041248 +
mov dword_10F5D54 eax +
mov eax ds:off_104124C +
mov dword_10F5D5C eax +
mov eax ds:off_1041250 +
mov dword_10F5D64 eax +
mov eax ds:off_1041254 +
mov dword_10F5D6C eax +
retn   +
***
mov eax ds:off_10412A0 +
mov dword_10F5BEC eax +
mov eax ds:off_10412A4 +
mov dword_10F5BF4 eax +
mov eax ds:off_10412A8 +
mov dword_10F5BFC eax +
retn   +
***
push offset aCamclistview_7  +
call ds:RegisterWindowMessageW  +
mov dword_10F5348 eax +
retn   +
***
push 34h  +
mov eax offset dword_10E716C +
call sub_1001F95  +
push 0  +
push 0  +
lea ecx [ebp-40h] +
call loc_104178E  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-40h] +
push eax  +
mov ecx offset dword_10F5798 +
call sub_104139F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call sub_100B83A  +
push offset loc_10507AB  +
call sub_100BFD5  +
pop ecx  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10418C1  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_10413D2  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov eax [edi+28h] +
mov ecx [esi+8] +
test eax eax +
jz loc_1068798  +
push ecx  +
push offset aTsnapininterfa  +
push eax  +
lea ecx [ebp+var_50] +
call sub_100B69F  +
push esi  +
mov ecx edi +
call sub_1041499  +
mov esi eax +
push esi  +
lea ecx [ebp+var_50] +
call sub_100B7A1  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov eax [edi+28h] +
mov ecx [esi+8] +
test eax eax +
jz loc_1068392  +
push ecx  +
push offset aSnapininterfac  +
push eax  +
lea ecx [ebp+var_50] +
call sub_100B69F  +
mov ecx edi +
xor ebx ebx +
call sub_100B724  +
mov eax [esi+4] +
test eax eax +
jnz loc_106839C  +
push ebx  +
lea ecx [ebp+var_50] +
call sub_100B7A1  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 4  +
***
mov ecx offset unk_10F5778 +
call sub_104155E  +
push offset loc_10507FE  +
call sub_100BFD5  +
pop ecx  +
retn   +
***
mov eax ecx +
and dword ptr [eax+1Ch] 0 +
mov dword ptr [eax] offset off_100C16C +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_104159E  +
push eax  +
call sub_10415A8  +
test eax eax +
jz loc_104159E  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_106517F  +
push 2  +
pop eax  +
pop ebp  +
retn   +
***
mov eax [ebp+8] +
pop ebp  +
retn   +
***
call sub_100A4F0  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_10415F7  +
cmp ecx 0FFFFFFFFh +
jz loc_10415F7  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10415F0  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10415F0  +
cmp edx 10000000h +
jnb loc_10415F0  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jnz loc_1065175  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100A4DC  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi offset unk_10F53AC +
xor ebx ebx +
mov ecx esi +
inc ebx  +
call sub_100C124  +
inc dword_10F53A8  +
cmp dword_10F53A8 ebx +
jnz loc_1041652  +
call sub_1041663  +
test eax eax +
setnz bl  +
mov byte_10F53A4 bl +
mov ecx esi +
call sub_100C14C  +
pop esi  +
mov al bl +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
xor esi esi +
cmp dword_10F5610 esi +
jnz loc_1041717  +
push ebx  +
mov ebx offset unk_10F53C4 +
mov ecx ebx +
call sub_100C124  +
cmp dword_10F5610 esi +
jnz loc_104170F  +
push edi  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
mov edi eax +
cmp edi esi +
jz loc_10416CE  +
mov esi ds:__imp_GetProcAddress +
push offset sub_1041750  +
push edi  +
call esi  +
push offset aTryentercritic  +
push edi  +
mov dword_10F53B4 eax +
call esi  +
push offset aSetcriticalsec  +
push edi  +
mov dword_10F53B8 eax +
call esi  +
mov dword_10F53BC eax +
xor esi esi +
pop edi  +
cmp dword_10F53B4 esi +
jz loc_1065945  +
cmp dword_10F53B8 esi +
jz loc_1065954  +
cmp dword_10F53BC esi +
jz loc_1065963  +
call sub_1041764  +
mov dword_10F53C0 eax +
mov ecx offset dword_10F5610 +
mov edx 1 +
mov eax [ecx] +
cmpxchg [ecx] edx +
jnz loc_1041709  +
mov ecx ebx +
call sub_100C14C  +
pop ebx  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
jz loc_10417B8  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10F53B0 +
sub esp 24h +
test eax eax +
jnz locret_1041787  +
lea eax [ebp+SystemInfo] +
push eax  +
call ds:GetSystemInfo  +
mov eax [ebp+SystemInfo.dwNumberOfProcessors] +
mov dword_10F53B0 eax +
leave   +
retn   +
***
push 4  +
mov eax offset dword_10E70BC +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push 0  +
push 3  +
push offset aIunknown  +
push offset stru_100BB94  +
call sub_102F677  +
push dword ptr [ebp+0Ch]  +
add bh bh +
jnz loc_10417C4  +
mov ecx esi +
mov dword ptr [esi] offset off_102F6F0 +
call sub_10417EB  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
push edi  +
mov edi [ebp+arg_0] +
test eax eax +
jz loc_1068312  +
push [ebp+arg_4]  +
lea ecx [ebp+var_50] +
push offset aSnapininterfac  +
push eax  +
call sub_100B69F  +
push [ebp+arg_4]  +
mov ecx esi +
push edi  +
call sub_104184D  +
mov esi eax +
push esi  +
lea ecx [ebp+var_50] +
call sub_100B7A1  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 8  +
***
call sub_100A4F0  +
mov esi ecx +
mov [ebp-24h] esi +
xor ebx ebx +
mov [ebp-20h] ebx +
call sub_100B724  +
mov eax [ebp+0Ch] +
mov [esi+8] eax +
mov eax [ebp+8] +
cmp eax ebx +
jnz loc_1068121  +
mov eax lpDst +
cmp eax offset lpDst +
jnz loc_10682BD  +
mov dword ptr [ebp-1Ch] 80004003h +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 8  +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_1040612  +
mov dword ptr [esi] offset off_10418DC +
mov eax esi +
pop esi  +
retn   +
***
retn   +
***
call sub_1041964  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push 1  +
push offset __ImageBase  +
push [ebp+arg_0]  +
call InitProcessPriv  +
pop ebp  +
retn 8  +
***
push esi  +
mov esi offset aComctl32_dll_0 +
push esi  +
call sub_10419CB  +
mov dword_10F53F0 eax +
test eax eax +
jz loc_106A8A0  +
pop esi  +
jmp loc_102F455  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_102F58E  +
test eax eax +
jz locret_10419F9  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryW  +
push [ebp+var_4]  +
mov esi eax +
call sub_102F464  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edx ecx +
and dword ptr [edx] 0 +
lea esi [edx+4] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov [ebp+var_4] ecx +
mov eax lpDst +
mov edi offset lpDst +
cmp eax edi +
jz loc_1041A46  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105A479  +
cmp [ebp+arg_0] 3 +
ja loc_105A495  +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1041AA0  +
push dword ptr [esi+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_105A4BE  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
push 43h  +
push 0  +
push 0  +
add eax 19h +
push 0  +
shl eax 4 +
mov [eax+ecx] esi +
push 0  +
push ds:?wndTop@CWnd@@2V1@B  +
mov ecx esi +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
push 5  +
push dword ptr [esi+20h]  +
call ds:ShowWindow  +
pop esi  +
pop edi  +
leave   +
retn 0Ch  +
cmp eax edi +
jnz loc_105A4C8  +
jmp loc_1041A9A  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1041AC8  +
test eax eax +
jl loc_1041AC1  +
mov byte ptr [esi+18h] 1 +
pop esi  +
retn   +
***
call sub_100A4F0  +
xor esi esi +
mov [ebp-4] esi +
push ecx  +
call ds:InitializeCriticalSection  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax esi +
call sub_100A4DC  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_100CD14  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_105A70A  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 20h +
jb loc_105A711  +
shl ecx 5 +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 8 +
jnb loc_103B07A  +
lea eax [ecx+4] +
mov ecx [ecx+14h] +
lea ecx [eax+ecx*2] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 4  +
***
call sub_100A4F0  +
or dword ptr [ebp-1Ch] 0FFFFFFFFh +
mov esi dword_10F5340 +
xor edi edi +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_1041BBF  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_105E0AC  +
mov [ebp-4] edi +
cmp esi edi +
jz loc_1037796  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1041C11  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 0Ch  +
***
cmp dword_10F6C64 edi +
jnz locret_1041C3F  +
xor eax eax +
cmp dword ptr [ebp-1Ch] 0FFFFFFFFh +
setz al  +
mov esi eax +
cmp esi edi +
jnz loc_105E0BB  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jnz loc_105E0C8  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_100CD84 +
call sub_10206B1  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+10h] +
call sub_1041C89  +
and dword ptr [esi+1Ch] 0 +
and dword ptr [esi+20h] 0 +
and dword ptr [esi+24h] 0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1041CB5  +
lea ecx [esi+4] +
mov [ecx] eax +
mov byte ptr [eax+15h] 1 +
mov eax [ecx] +
mov [eax+4] eax +
mov eax [ecx] +
mov [eax] eax +
mov ecx [ecx] +
mov [ecx+8] ecx +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 1  +
call sub_1022A6B  +
cmp eax ebx +
jz loc_1041CC8  +
mov [eax] ebx +
lea ecx [eax+4] +
cmp ecx ebx +
jz loc_1041CD1  +
mov [ecx] ebx +
lea ecx [eax+8] +
cmp ecx ebx +
jz loc_1041CDA  +
mov [ecx] ebx +
mov [eax+15h] bl +
mov byte ptr [eax+14h] 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp esi [ebp+arg_0] +
jz loc_1041CFE  +
push 0FFFFFFFFh  +
push 0  +
call sub_1011BBD  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1022C88  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
cmp [ebp+arg_0] eax +
jb loc_100AD4B  +
jmp loc_1065972  +
***
call sub_100A4F0  +
xor edi edi +
mov [ebp-1Ch] edi +
mov esi dword_10F5338 +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_1041D51  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_1041D79  +
mov [ebp-4] edi +
cmp esi edi +
jz loc_103B046  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1041DA9  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 0Ch  +
***
cmp dword_10F6C64 edi +
jnz locret_1041DD6  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jnz loc_105D66B  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jnz loc_105D678  +
retn   +
***
mov [ecx+4] eax +
jmp loc_100E544  +
***
push edi  +
mov ecx esi +
call sub_1041DF1  +
jmp loc_1022DE1  +
***
call sub_1001F95  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1041E15  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105B2D7  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1023EDA  +
cmp eax 2 +
jnz loc_1041E6E  +
mov edi [ebp-10h] +
test edi edi +
jz loc_1041E6E  +
mov ecx [esi+174h] +
push edi  +
call sub_1041E9C  +
mov ecx [esi+174h] +
call sub_100C573  +
test eax eax +
jnz loc_104418C  +
mov ecx [esi+174h] +
push edi  +
call sub_100C803  +
push eax  +
mov ecx esi +
call sub_1041E7B  +
test eax eax +
jnz loc_105B2EE  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp [ebp+arg_0] edi +
jnz sub_104672E  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
sub esp 28h +
push esi  +
mov esi ecx +
test edx edx +
jz loc_1041F05  +
push edi  +
push 0Ah  +
pop ecx  +
xor eax eax +
lea edi [ebp+lParam] +
stos   +
or eax 0FFFFFFFFh +
push edx  +
mov ecx esi +
mov [ebp+var_24] edx +
mov [ebp+lParam] 7Fh +
mov [ebp+var_18] eax +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov [ebp+var_4] eax +
pop edi  +
test eax eax +
jz loc_1064732  +
lea ecx [ebp+lParam] +
push ecx  +
push eax  +
mov ecx esi +
call sub_1024168  +
test eax eax +
jl loc_10646FE  +
lea eax [ebp+lParam] +
push eax  +
mov ecx esi +
call sub_1022D4F  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+1Dh] 0 +
jnz loc_1041F37  +
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp edx [ecx+0Ch] +
jb loc_104EFB2  +
mov ecx [ecx+8] +
cmp byte ptr [ecx+1Dh] 0 +
jz loc_1041F25  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
call sub_1041F0F  +
push [ebp+arg_4]  +
mov ecx edi +
mov esi eax +
call sub_1041F72  +
mov ecx [ebp+arg_0] +
pop edi  +
mov [ecx] eax +
mov [ecx+4] esi +
mov eax ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+1Dh] 0 +
jnz loc_1041F9B  +
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp [ecx+0Ch] edx +
jb loc_1063E6D  +
mov eax ecx +
mov ecx [ecx] +
cmp byte ptr [ecx+1Dh] 0 +
jz loc_1041F88  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
cmp dword ptr [ecx+104h] 0 +
jnz loc_1041FC1  +
push eax  +
push dword ptr [ebp+8]  +
call sub_1024D1A  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
lea esi [edi+104h] +
mov eax [esi] +
test eax eax +
setnz al  +
cmp [ebp+8] al +
jnz loc_1064763  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
xor ebx ebx +
push 0Ah  +
lea ecx [esi+4] +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_100849C +
call sub_1024996  +
push 0Ah  +
lea ecx [esi+20h] +
mov byte ptr [ebp-4] 1 +
call ??0CMapWordToPtr@@QAE@H@Z  +
lea ecx [esi+50h] +
mov byte ptr [ebp-4] 2 +
mov [esi+3Ch] ebx +
mov [esi+40h] bl +
mov [esi+44h] ebx +
mov [esi+48h] ebx +
mov [esi+4Ch] ebx +
call ??0CString@@QAE@XZ  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 3 +
call ??0CString@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionpanez_1  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx 80070057h +
push ebx  +
push dword ptr [ebp+8]  +
lea eax [ebp-2Ch] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-1Ch] +
call edi  +
test eax eax +
jl loc_10690AD  +
mov ecx esi +
call sub_10161F8  +
cmp dword ptr [ebp+0Ch] 0 +
jle loc_10690D6  +
cmp dword ptr [ebp+0Ch] 4 +
jg loc_10690D6  +
mov eax dword_10F99A8 +
imul eax eax +
push 1  +
push eax  +
lea ecx [esi+20h] +
call ?InitHashTable@CMapWordToPtr@@QAEXIH@Z  +
mov eax [ebp+8] +
mov [esi+3Ch] eax +
mov eax [ebp+0Ch] +
mov [esi+48h] eax +
mov eax [ebp+10h] +
push 3489h  +
lea ecx [esi+50h] +
mov [esi+44h] eax +
call ?LoadStringW@CString@@QAEHI@Z  +
mov ebx 8000FFFFh +
test eax eax +
jz loc_1069113  +
push 3492h  +
lea ecx [esi+54h] +
call ?LoadStringW@CString@@QAEHI@Z  +
test eax eax +
jz loc_1069150  +
lea ecx [ebp-1Ch] +
call edi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionpanes_1  +
lea ecx [ebp-28h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov al [edi+30h] +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
mov ebx 8000FFFFh +
test al al +
jz sub_10695D9  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [edi+4] +
mov [ebp-14h] ecx +
call ?Lookup@CMapWordToPtr@@QBEHGAAPAX@Z  +
test eax eax +
jnz sub_1069624  +
push 58h  +
call sub_100ABF0  +
mov [ebp-18h] eax +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1042287  +
mov ecx eax +
call sub_1041FFE  +
mov byte ptr [ebp-4] 0 +
mov [ebp-10h] eax +
test eax eax +
jz loc_1069661  +
push dword ptr [edi+28h]  +
mov ecx [ebp-10h] +
push dword ptr [ebp+8]  +
push edi  +
call sub_1042066  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call esi  +
test eax eax +
jl loc_10696A5  +
push dword ptr [ebp+8]  +
mov ecx [ebp-14h] +
call ??ACMapWordToPtr@@QAEAAPAXG@Z  +
mov ecx [ebp-10h] +
mov [eax] ecx +
lea ecx [ebp-28h] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
xor eax eax +
jmp loc_1042224  +
***
push off_10F99AC  +
call StrToID  +
mov ecx [esi+24h] +
movzx eax ax +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
push 8000FFFFh  +
push eax  +
mov [esi+28h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
cmp eax ebx +
jge loc_101769F  +
jmp loc_106A033  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
jbe loc_105A6CA  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 54h +
jb loc_105A6D1  +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
***
cmp ecx 5000h +
jz loc_1063E07  +
mov eax ecx +
inc ecx  +
mov dword_10F52D4 ecx +
retn   +
***
push 28h  +
mov eax offset byte_10E2FA5 +
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-24h] +
mov [ebp-14h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewtool_7  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+10h] edi +
mov [ebp-10h] edi +
jle loc_104259D  +
mov edi [ebp+14h] +
mov eax [esi] +
push edi  +
push 0FFFFFFFFh  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-34h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+8]  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1063E0F  +
inc dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
add edi 14h +
cmp eax [ebp+10h] +
jl loc_1042553  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
mov edx [ecx+4] +
test edx edx +
jz loc_10437DA  +
mov eax [ecx+0Ch] +
sub eax edx +
push 54h  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jz loc_10437DD  +
mov eax [ecx+8] +
sub eax edx +
push 54h  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
push 24h  +
mov eax offset byte_10D4E75 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewtool_8  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
jnz loc_1063E2B  +
mov eax esi +
add esi 4 +
neg eax  +
sbb eax eax +
and eax esi +
mov [edi] eax +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
and byte ptr [esi+16h] 0FEh +
mov [esi] eax +
mov eax [ebp+0Ch] +
mov [esi+4] eax +
mov eax [ebp+14h] +
mov [esi+8] eax +
mov eax [ebp+10h] +
mov [esi+0Ch] eax +
mov al [ebp+18h] +
mov [esi+14h] al +
mov al [ebp+1Ch] +
mov [esi+15h] al +
mov eax [ebp+20h] +
mov [esi+18h] eax +
lea eax [ebp+1Bh] +
push eax  +
lea ecx [esi+1Ch] +
call sub_1041B11  +
lea eax [ebp+1Bh] +
push eax  +
lea ecx [esi+38h] +
call sub_1041B11  +
mov eax esi +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jnz loc_10640EF  +
pop esi  +
pop ebp  +
retn   +
***
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
adc eax offset ??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
lea ecx [ebp-0F8h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0D4h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
lea eax [ebp-0D4h] +
mov ecx [ebp-0BCh] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-64h] +
mov dword ptr [ebp-0C0h] 1 +
call sub_1016310  +
lea ecx [ebp-0D4h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-0BCh] +
call sub_100C50D  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_1042627  +
test eax eax +
jz loc_1043838  +
mov eax [ebp+arg_4] +
sub eax [edi+4] +
push 54h  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi eax +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_1042C42  +
imul esi esi +
add esi [edi+4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_101D46C  +
mov eax [ebp+10h] +
mov esi ecx +
push eax  +
lea ecx [ebp-68h] +
mov [ebp-74h] esi +
call sub_1043447  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_104260B  +
mov edi [ebp+0Ch] +
mov ebx eax +
test edi edi +
jz loc_1042CFF  +
mov ecx esi +
call sub_1042627  +
mov ecx 30C30C3h +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_10642BE  +
add eax edi +
cmp ebx eax +
jb loc_1042D0F  +
mov ecx [esi+8] +
mov eax ecx +
sub eax [ebp+8] +
push 54h  +
cdq   +
pop ebx  +
idiv  ebx +
mov [ebp-6Ch] ecx +
push esi  +
cmp eax edi +
jnb loc_1064307  +
mov eax [ebp+8] +
mov ebx edi +
imul ebx ebx +
lea edx [ebx+eax] +
push edx  +
push ecx  +
push eax  +
call sub_1042DAD  +
mov eax [esi+8] +
sub eax [ebp+8] +
lea ecx [ebp-68h] +
push ecx  +
push 54h  +
pop ecx  +
cdq   +
idiv  ecx +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
sub edi eax +
push edi  +
push dword ptr [esi+8]  +
call sub_1042E1B  +
add [esi+8] ebx +
mov esi [esi+8] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-68h] +
push eax  +
sub esi ebx +
push esi  +
push dword ptr [ebp+8]  +
call sub_104278A  +
add esp 0Ch +
lea ecx [ebp-68h] +
call sub_1016310  +
call sub_101D44D  +
retn 0Ch  +
mov edx ebx +
shr edx 1 +
sub ecx edx +
cmp ecx ebx +
jb loc_10642C3  +
add ebx edx +
cmp ebx eax +
jb loc_1043831  +
push 0  +
push ebx  +
call sub_10424C0  +
mov ecx [esi+4] +
push esi  +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-6Ch] eax +
push ecx  +
mov [ebp-70h] eax +
mov byte ptr [ebp-4] 1 +
call sub_1042DAD  +
lea ecx [ebp-68h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
mov [ebp-70h] eax +
call sub_1042E1B  +
push esi  +
mov [ebp-70h] eax +
push dword ptr [ebp-70h]  +
mov eax [esi+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1042DAD  +
mov ecx esi +
call sub_1042627  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_1042D8D  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_1016293  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp-6Ch] +
imul ebx ebx +
imul edi edi +
add ebx eax +
add edi eax +
mov [esi+0Ch] ebx +
mov [esi+8] edi +
mov [esi+4] eax +
jmp loc_1042CFF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1042DDB  +
pop edi  +
leave   +
retn 10h  +
***
call sub_100A60E  +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov esi [ebp+8] +
mov [ebp-14h] eax +
cmp esi [ebp+0Ch] +
jz loc_1042E0B  +
push esi  +
push dword ptr [ebp+10h]  +
call sub_1043415  +
add dword ptr [ebp+10h] 54h +
add esi 54h +
jmp loc_1042DF4  +
mov eax [ebp+10h] +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1042E41  +
mov eax [ebp+arg_4] +
imul eax eax +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1042E6F  +
pop edi  +
leave   +
retn 10h  +
***
call sub_100A60E  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_1042E9F  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_1043415  +
dec dword ptr [ebp+0Ch]  +
add dword ptr [ebp+8] 54h +
jmp loc_1042E85  +
call sub_1001FCF  +
retn 18h  +
***
push 20h  +
mov eax offset dword_10E3088 +
call sub_1001F95  +
mov [ebp-14h] ecx +
xor edi edi +
mov [ebp-10h] edi +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push edi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewtoo_11  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+10h] +
cmp esi edi +
jz loc_1063F07  +
cmp [ebp+0Ch] ebx +
jl loc_1063F07  +
cmp [ebp+0Ch] edi +
mov [ebp+10h] edi +
jle loc_1042F57  +
add esi 9 +
mov eax [ebp-14h] +
push dword ptr [eax+64h]  +
call sub_10431E9  +
mov ecx [esi-9] +
cmp ecx eax +
jg loc_1063EF4  +
mov al [esi] +
and al bl +
jnz loc_1042F3D  +
cmp [esi+3] edi +
jz loc_1063EF4  +
cmp [esi+7] edi +
jz loc_1063EF4  +
test al al +
jnz loc_1042FCE  +
and byte ptr [esi-1] 0DFh +
inc dword ptr [ebp+10h]  +
mov eax [ebp+10h] +
add esi 14h +
cmp eax [ebp+0Ch] +
jl loc_1042F0F  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
cmp ecx edi +
jle loc_1042F45  +
jmp loc_1063EF4  +
***
push 48h  +
mov eax offset word_10E361A +
call sub_1001F95  +
mov ebx ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-20h] +
call MFC42u_6466  +
xor edi edi +
inc edi  +
push 0  +
lea ecx [ebp-54h] +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewtoo_12  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+14h]  +
lea eax [ebp-44h] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-54h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_106412B  +
and dword ptr [ebp-14h] 0 +
mov dword ptr [ebp-18h] offset off_1008170 +
push dword ptr [ebp+14h]  +
mov byte ptr [ebp-4] 4 +
call sub_100E56D  +
push eax  +
lea ecx [ebp-18h] +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
cmp dword ptr [ebp-14h] 0 +
jz loc_1064140  +
push 8000FFFFh  +
push dword ptr [ebx+60h]  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-54h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_106415B  +
push dword ptr [ebx+60h]  +
call sub_10431E9  +
test dword ptr [ebp+18h] 0FF000000h +
mov [ebp+14h] eax +
jz loc_105001A  +
push 0  +
push dword ptr [ebp-14h]  +
push dword ptr [ebx+60h]  +
call sub_101C58F  +
push dword ptr [ebx+60h]  +
mov [ebp-34h] eax +
call sub_10431E9  +
sub eax [ebp+14h] +
cmp dword ptr [ebp-34h] 0FFFFFFFFh +
mov [ebp-30h] eax +
jz loc_1064160  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-28h] +
lea ecx [ebx+3Ch] +
push eax  +
call sub_1041F40  +
and dword ptr [ebp-2Ch] 0 +
mov eax [ebp-28h] +
lea edi [ebp-40h] +
cmp eax [ebp-24h] +
jnz loc_1064170  +
mov eax [ebp+0Ch] +
mov [ebp-44h] eax +
lea esi [ebp-34h] +
movs   +
lea eax [ebp-44h] +
movs   +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebx+3Ch] +
movs   +
call sub_104329C  +
push dword ptr [ebx+60h]  +
call sub_10431E9  +
mov ecx [ebp+10h] +
mov edx [ebp+14h] +
add edx ecx +
cmp edx eax +
jg loc_1064193  +
mov ecx [ebp+8] +
lea eax [ebp-54h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 2 +
mov dword ptr [ebp-18h] offset off_1008170 +
call sub_100F62A  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-1Ch] +
mov ecx [ebp-20h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
call sub_100A4F0  +
xor edi edi +
mov [ebp-1Ch] edi +
mov esi dword_10F5374 +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_1043218  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_104323A  +
mov [ebp-4] edi +
cmp esi edi +
jz loc_10437E0  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1043269  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 4  +
***
cmp dword_10F6C64 edi +
jnz locret_1043296  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jnz loc_1043818  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jnz loc_1043825  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_10432BF  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ecx+4] +
mov eax [edx+4] +
cmp byte ptr [eax+1Dh] 0 +
push edi  +
mov edi edx +
mov edx [ebp+arg_4] +
mov byte ptr [ebp+var_4] 1 +
jz loc_104FFF5  +
push edx  +
push edi  +
push [ebp+var_4]  +
lea eax [ebp+arg_4] +
push eax  +
call sub_1043302  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
pop edi  +
leave   +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
cmp dword ptr [edi+8] 0FFFFFFEh +
jnb loc_1063FFF  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_104337B  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_104FFD7  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
mov ecx [eax] +
cmp byte ptr [ecx+1Ch] 0 +
jz loc_106403E  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+1Ch] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 0  +
push 1  +
mov edi ecx +
call sub_1041B2F  +
push [ebp+arg_10]  +
mov esi eax +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_10433B3  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10433D3  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10433DC  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov cl [ebp+arg_10] +
lea edi [eax+0Ch] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
mov [eax+1Ch] cl +
mov byte ptr [eax+1Dh] 0 +
pop esi  +
pop ebp  +
retn 14h  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_104343A  +
push dword ptr [ebp+0Ch]  +
call sub_1043447  +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
mov eax [edi] +
mov [esi] eax +
mov eax [edi+4] +
mov [esi+4] eax +
mov eax [edi+8] +
mov [esi+8] eax +
mov eax [edi+0Ch] +
mov [esi+0Ch] eax +
mov eax [edi+10h] +
mov [esi+10h] eax +
mov al [edi+14h] +
mov [esi+14h] al +
mov al [edi+15h] +
mov [esi+15h] al +
mov al [edi+16h] +
xor al [esi+16h] +
lea ecx [esi+1Ch] +
and al 1 +
xor [esi+16h] al +
mov eax [edi+18h] +
mov [esi+18h] eax +
lea eax [edi+1Ch] +
push eax  +
call sub_100CF0B  +
and dword ptr [ebp-4] 0 +
add edi 38h +
push edi  +
lea ecx [esi+38h] +
call sub_100CF0B  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
les edi [edx-14h] +
cmp [eax-9] esi +
scas   +
jnp loc_10434DF  +
cmps   +
lods   +
dec eax  +
and edi eax +
sbb byte ptr [eax+edx*4-6F6F6F70h] 6Ah +
add [edx+1] ch +
call sub_100CD3C  +
retn   +
***
mov ecx [ecx] +
mov [ebp+arg_4] ecx +
cmp ecx [ebp+arg_8] +
jz loc_10113DC  +
jmp loc_10113D3  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1018520  +
***
call sub_1001F95  +
mov esi ecx +
push 0FFFFFFFFh  +
lea ecx [ebp-24h] +
call sub_101D4AC  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
call sub_102B3F4  +
test eax eax +
setnz al  +
lea ecx [ebp-1Ch] +
mov [esi+1DCh] al +
mov dword ptr [ebp-24h] offset off_100B9EC +
call sub_100ECBD  +
call sub_1001FCF  +
retn   +
***
mov eax ds:?classCView@CView@@2UCRuntimeClass@@B +
retn   +
***
add ecx 0FFFFFFBCh +
call sub_100CBA3  +
jmp loc_1025017  +
***
call sub_1001F95  +
mov ebx ecx +
mov [ebp-14h] ebx +
xor esi esi +
push esi  +
lea ecx [ebp-30h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCstandardtoo_1  +
lea ecx [ebp-30h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+0Ch] +
cmp eax esi +
jz loc_1062A47  +
mov [ebx+18h] eax +
add eax 1F8h +
mov [ebp-18h] eax +
cmp eax esi +
jz loc_1062A67  +
mov ecx [eax+10h] +
cmp ecx esi +
jz loc_1062A67  +
mov eax [ecx] +
add ebx 14h +
push ebx  +
lea edx [ebp-40h] +
push edx  +
call dword ptr [eax]  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1062A75  +
mov [ebp-1Ch] esi +
mov esi offset off_1008170 +
mov [ebp-20h] esi +
mov ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 3 +
call ?GetExStyle@CWnd@@QBEKXZ  +
and eax 400000h +
or eax 32800000h +
shr eax 16h +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_101C4B3  +
test al al +
jz loc_1062A84  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [ebp-68h] +
stos   +
lea eax [ebp-68h] +
push eax  +
push 18h  +
push dword ptr [ebp-1Ch]  +
call ds:GetObjectW  +
test eax eax +
jz loc_1062AA7  +
mov eax [ebp-64h] +
mov ecx [ebx] +
cdq   +
push 0FFFF00FFh  +
push dword ptr [ebp-1Ch]  +
and edx 0Fh +
add eax edx +
mov edx [ecx] +
sar eax 4 +
push eax  +
push dword ptr [ebp-14h]  +
lea eax [ebp-40h] +
push eax  +
call dword ptr [edx+4]  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1062AB5  +
mov ecx [ebp-14h] +
push offset unk_10F5F48  +
push 12h  +
lea eax [ebp-40h] +
push eax  +
call sub_104394C  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1062AB5  +
mov eax [ebp-18h] +
mov eax [eax+64h] +
mov ebx [ebx] +
push dword ptr [ebp-14h]  +
shr eax 1 +
and al 1 +
mov eax [ebx] +
jz loc_1062ACE  +
lea ecx [ebp-50h] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+18h]  +
mov byte ptr [ebp-4] 6 +
mov dword ptr [ebp-10h] 2 +
push eax  +
lea ecx [ebp-30h] +
call edi  +
test byte ptr [ebp-10h] 4 +
mov dword ptr [ebp-4] 6 +
jnz loc_1062AEA  +
test byte ptr [ebp-10h] 2 +
mov dword ptr [ebp-4] 3 +
jz loc_1043741  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-50h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or dword ptr [ebp-10h] 1 +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
mov [ebp-20h] esi +
call sub_100F62A  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
xor eax eax +
retn   +
***
xor eax eax +
retn   +
***
push offset aImagelist_ge_0  +
call sub_101D9DA  +
mov esi eax +
cmp esi edi +
jz loc_104322B  +
mov dword_10F5374 esi +
jmp loc_1043223  +
***
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_1043285  +
push ebx  +
call ds:SetLastError  +
jmp locret_1043296  +
***
mov ebx eax +
jmp loc_1042D27  +
***
xor esi esi +
jmp loc_1042C1D  +
***
jmp ds:?InitialUpdateFrame@CDocTemplate@@UAEXPAVCFrameWnd@@PAVCDocument@@H@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi+4]  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1065BA2  +
sub eax [esi+4] +
sar eax 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
push edi  +
cmp ebx eax +
ja loc_1066071  +
mov eax [esi+4] +
push ebx  +
push eax  +
call sub_1016345  +
mov edi eax +
test edi edi +
jl loc_1066078  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax [ebp-10h] +
mov dword_10F53E4 eax +
xor edi edi +
jmp loc_1034655  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+2Ch]  +
jmp loc_1034655  +
***
mov eax [ebp-10h] +
mov dword_10F53E8 eax +
xor edi edi +
jmp loc_1034749  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+2Ch]  +
jmp loc_1034749  +
***
mov eax [ebp-10h] +
mov dword_10F53EC eax +
xor edi edi +
jmp loc_103483D  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+2Ch]  +
jmp loc_103483D  +
***
jmp ?AddRef@ClassInfoBase@DirectUI@@UAEXXZ  +
***
mov ecx [eax] +
jmp loc_1043A45  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
and dword ptr [ebp-40Ch] 0 +
mov [ebp-404h] eax +
mov eax [ebp+10h] +
mov [ebp-42Ch] ecx +
push 0  +
lea ecx [ebp-424h] +
mov [ebp-414h] eax +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCstandardtoo_2  +
lea ecx [ebp-424h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi (offset loc_10434CE+7) +
push esi  +
mov edi offset sub_1023117 +
push edi  +
push 12h  +
push 1Ch  +
lea eax [ebp-400h] +
push eax  +
call sub_100C8DF  +
push esi  +
push edi  +
push 12h  +
push 1Ch  +
lea eax [ebp-208h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100C8DF  +
mov byte ptr [ebp-4] 3 +
call ds:?GetStringModule@@YGPAUHINSTANCE__@@XZ  +
xor edi edi +
cmp [ebp+0Ch] edi +
mov [ebp-428h] eax +
mov [ebp-410h] edi +
jle loc_1043A81  +
mov eax [ebp-414h] +
add eax 4 +
mov [ebp-408h] eax +
mov eax [ebp-408h] +
mov eax [eax] +
cmp eax 9 +
jle loc_1043A66  +
lea ecx [ebp+edi-208h] +
push ecx  +
lea ecx [ebp+edi-400h] +
push ecx  +
push eax  +
push dword ptr [ebp-428h]  +
call sub_1043EED  +
test al al +
jz loc_1062973  +
lea eax [ebp+edi-3FCh] +
cmp dword ptr [eax+14h] 8 +
jnb loc_1043940  +
mov ecx eax +
cmp dword ptr [ebp+edi-1F0h] 8 +
mov eax [ebp-408h] +
mov [eax+8] ecx +
jnb loc_1043B7C  +
lea ecx [ebp+edi-204h] +
mov [eax+0Ch] ecx +
inc dword ptr [ebp-410h]  +
mov eax [ebp-410h] +
add dword ptr [ebp-408h] 14h +
add edi 1Ch +
cmp eax [ebp+0Ch] +
jl loc_1043A01  +
push dword ptr [ebp-414h]  +
mov eax [ebp-42Ch] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax+14h] +
mov edx [ecx] +
push eax  +
lea eax [ebp-43Ch] +
push eax  +
call dword ptr [edx]  +
push eax  +
lea ecx [ebp-424h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-43Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-424h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp-404h] +
test al al +
lea eax [ebp-424h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
push esi  +
push 12h  +
push 1Ch  +
lea eax [ebp-208h] +
push eax  +
mov [ebp-40Ch] ebx +
mov byte ptr [ebp-4] 2 +
call sub_100C964  +
push esi  +
push 12h  +
push 1Ch  +
lea eax [ebp-400h] +
push eax  +
mov [ebp-4] bl +
call sub_100C964  +
lea ecx [ebp-424h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-404h] +
call sub_100C50D  +
retn 0Ch  +
mov ecx [ebp+edi-204h] +
jmp loc_1043A63  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push esi  +
push edi  +
call sub_1043BB3  +
lea eax [edi+esi*8] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1043BE1  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jbe loc_1043C00  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1043E05  +
dec [ebp+arg_4]  +
add [ebp+arg_0] 8 +
jmp loc_1043BE6  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_1002565  +
mov ecx esi +
mov edi eax +
call sub_10236D6  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jb loc_105FFD2  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1043C45  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_1002565  +
test eax eax +
jnz loc_1043C79  +
xor esi esi +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_1043C89  +
mov eax [edi+4] +
lea ecx [eax+esi*8] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
mov esi [ebp+arg_4] +
sub esi [edi+4] +
sar esi 3 +
jmp loc_1043C59  +
***
call sub_100A60E  +
mov esi ecx +
push dword ptr [ebp+10h]  +
lea ecx [ebp-18h] +
call sub_1043E22  +
mov ecx esi +
call sub_10236D6  +
mov edi [ebp+0Ch] +
mov [ebp+10h] eax +
test edi edi +
jz loc_1043D57  +
mov ecx esi +
call sub_1002565  +
mov ecx 1FFFFFFFh +
mov edx ecx +
sub edx eax +
cmp edx edi +
jb loc_105FEB2  +
add eax edi +
cmp [ebp+10h] eax +
jnb loc_105FEEC  +
mov edx [ebp+10h] +
shr edx 1 +
sub ecx edx +
cmp ecx [ebp+10h] +
jb loc_105FEB7  +
add [ebp+10h] edx +
cmp [ebp+10h] eax +
jnb loc_1043CF5  +
mov [ebp+10h] eax +
push 0  +
push dword ptr [ebp+10h]  +
call sub_1023725  +
and dword ptr [ebp-4] 0 +
mov ebx eax +
mov eax [esi+4] +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp+0Ch] ebx +
push eax  +
call sub_1043D64  +
lea ecx [ebp-18h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
call sub_1043B8D  +
mov ecx [esi+8] +
push esi  +
push eax  +
push ecx  +
push dword ptr [ebp+8]  +
call sub_1043D64  +
mov ecx esi +
call sub_1002565  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jnz loc_105FEC0  +
mov eax [ebp+10h] +
lea eax [ebx+eax*8] +
mov [esi+0Ch] eax +
lea eax [ebx+edi*8] +
mov [esi+8] eax +
mov [esi+4] ebx +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1043D92  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jnz loc_105FE61  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn 18h  +
***
cmp byte ptr [ebp+0Ch] 0 +
jz loc_105AEDF  +
mov al [edi+238h] +
not al  +
test al bl +
jz loc_105AEC2  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1043DE7  +
mov ecx edi +
call sub_100DA2C  +
mov [edi+1D5h] bl +
jmp loc_102552E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 1F8h +
push 1  +
call sub_1023016  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1043E19  +
push [ebp+arg_4]  +
call sub_1043E22  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1043E3E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov [eax] edx +
mov ecx [ecx+4] +
mov [eax+4] ecx +
pop ebp  +
retn 4  +
***
mov eax [ebp+10h] +
mov ecx [ebp-10h] +
mov [ebp-1Ch] eax +
lea eax [ebp-20h] +
push eax  +
mov [ebp-20h] ebx +
call sub_1043E75  +
jmp loc_1025A55  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1043C09  +
movzx edx byte ptr [esi+10h] +
mov eax [esi+8] +
mov ecx [esi+4] +
push edx  +
push eax  +
push ecx  +
call sub_1043EA1  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_1043EC2  +
sub [ebp+arg_4] 8 +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call sub_1043ECB  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
sub esi [ebp+arg_0] +
sar esi 3 +
test esi esi +
jg loc_105FE3F  +
pop esi  +
leave   +
retn 14h  +
***
call sub_1001F95  +
lea ecx [ebp-20h] +
call sub_100AD56  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+8]  +
lea ecx [ebp-20h] +
call sub_10329CF  +
cmp dword ptr [ebp-18h] 0 +
jz loc_1066387  +
push 0Ah  +
lea ecx [ebp-20h] +
call sub_104384F  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_10663E8  +
lea ecx [ebp-48h] +
call sub_100AD56  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call sub_100AD56  +
push edi  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call sub_104387C  +
mov esi offset sub_10434C0 +
mov ebx offset lpDst +
test eax eax +
jl loc_106638E  +
mov eax [ebp-18h] +
sub eax edi +
dec eax  +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-34h] +
call sub_1043FCF  +
test eax eax +
jl loc_10663BB  +
push dword ptr [ebp-44h]  +
mov ecx [ebp+10h] +
call sub_101D0E4  +
push dword ptr [ebp-30h]  +
mov ecx [ebp+14h] +
call sub_101D0E4  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call sub_100A77D  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 0 +
call sub_100A77D  +
mov bl 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call sub_100A77D  +
mov al bl +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
push edi  +
mov edi [ebp+arg_4] +
cmp edi eax +
ja loc_1066034  +
mov edx [esi+4] +
sub eax edi +
push edi  +
lea eax [edx+eax*2] +
push eax  +
call sub_1016345  +
mov ebx eax +
test ebx ebx +
jl loc_106603B  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
retn   +
***
call sub_100C558  +
test al al +
jnz loc_100C539  +
xor eax eax +
retn   +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-14h] edi +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCocxhostviewPr  +
lea ecx [ebp-24h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
mov eax [esi+4] +
cmp eax 100h +
jb loc_1044123  +
cmp eax 109h +
jbe loc_1061419  +
mov ecx [ebp-14h] +
push esi  +
call ?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
cmp eax edi +
jnz loc_1046AE0  +
mov ecx esi +
call sub_101D08C  +
test eax eax +
jz loc_1041E52  +
mov edx [eax] +
push 1  +
mov ecx eax +
call dword ptr [edx+0E8h]  +
jmp loc_1041E52  +
***
lea eax [ebp+arg_14] +
push eax  +
push [ebp+lParam]  +
mov ecx ebx +
push [ebp+wParam]  +
mov [ebp+arg_14] esi +
push edx  +
call sub_10441E2  +
jmp loc_1044365  +
mov [edi] esi +
cmp eax ecx +
jnz loc_1044974  +
jmp loc_10443C8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+60h] edi +
jz loc_106163E  +
test byte ptr [esi+88h] 8 +
jnz loc_106169F  +
mov [eax] edi +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 10h  +
***
push 14h  +
mov eax offset byte_10E0D75 +
call sub_100C4D0  +
mov eax [ebp+0Ch] +
dec eax  +
jz loc_1061F75  +
sub eax 81h +
jz loc_1061F55  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:DefWindowProcW  +
lea esp [ebp-30h] +
call sub_100C50D  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 0 +
push esi  +
jnz loc_1044297  +
xor esi esi +
inc esi  +
cmp [ebp+0Ch] esi +
jz loc_1049A50  +
mov eax 82h +
cmp [ebp+0Ch] eax +
jz loc_104E862  +
xor eax eax +
pop esi  +
pop ebp  +
retn 18h  +
***
cmp edi 111h +
jz loc_1044313  +
cmp edi 113h +
jbe loc_1044355  +
cmp edi 115h +
jbe loc_10442E3  +
cmp edi 131h +
jbe loc_1044355  +
cmp edi 138h +
jbe loc_10442E3  +
cmp edi 210h +
jnz loc_1044355  +
movzx eax bx +
dec eax  +
cmp eax 1 +
ja loc_10615B5  +
mov eax esi +
test eax eax +
jz loc_1044355  +
push esi  +
push ebx  +
add edi 2000h +
push edi  +
push eax  +
call ds:SendMessageW  +
jmp loc_104435E  +
test ebx ebx +
jnz loc_10615A8  +
jmp loc_1044355  +
test ebx ebx +
jnz loc_10615AD  +
jmp loc_1044355  +
mov eax [esi] +
jmp loc_10442E5  +
test esi esi +
jnz loc_10442E3  +
jmp loc_1044355  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi 4Eh +
ja loc_104429E  +
jz loc_104430F  +
cmp edi 2Bh +
jz loc_1044305  +
cmp edi 2Ch +
jz loc_10442FB  +
cmp edi 2Dh +
jz loc_10442FB  +
jbe loc_1044355  +
cmp edi 2Fh +
jbe loc_10442E3  +
cmp edi 39h +
jz loc_10442FB  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
cmp [ebp+arg_14] 0 +
mov [edi] eax +
jnz loc_1044974  +
mov edx [ebp+arg_4] +
jmp loc_10443C8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
xor ecx ecx +
push esi  +
push edi  +
cmp [ebp+arg_14] ecx +
jnz loc_1044452  +
mov edx [ebp+arg_4] +
mov edi [ebp+arg_10] +
xor esi esi +
inc esi  +
cmp edx 14h +
jz loc_1061867  +
cmp edx 0Fh +
jz loc_10441B4  +
cmp edx 5 +
jz loc_104484D  +
cmp edx 7 +
jz loc_1061923  +
cmp edx 8 +
jz loc_106193D  +
mov eax [ebx+88h] +
test al 8 +
jnz loc_1061879  +
mov eax [ebx+88h] +
mov ecx eax +
shr ecx 2 +
and ecx eax +
test cl 8 +
jnz loc_10618FC  +
cmp edx 2 +
jz loc_104E4E7  +
test byte ptr [ebx+88h] 8 +
jnz loc_104442D  +
test byte ptr [ebx+0B4h] 8 +
jz loc_104442D  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+lParam]  +
mov ecx ebx +
push [ebp+wParam]  +
mov [ebp+arg_14] esi +
push [ebp+arg_4]  +
call sub_104431E  +
cmp [ebp+arg_14] 0 +
mov [edi] eax +
jnz loc_1044974  +
mov edx [ebp+arg_4] +
cmp edx Msg +
jz loc_1048509  +
cmp edx dword_10F52F0 +
jz loc_1061ACE  +
mov eax 37Fh +
cmp edx eax +
jz loc_1061ADE  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
inc edi  +
cmp dword ptr [ebp+1Ch] 0 +
mov ebx ecx +
mov [ebp-4] edi +
jnz loc_10444CB  +
cmp dword ptr [ebp+0Ch] 7 +
mov esi [ebp+18h] +
jz loc_1061DA0  +
push 0  +
push esi  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_104437B  +
test eax eax +
jnz loc_104497B  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov ecx [ebp+0Ch] +
push ebx  +
mov ebx [ebp+10h] +
push esi  +
mov esi [ebp+8] +
mov eax [esi+4] +
mov [ebp-18h] ecx +
mov ecx [ebp+14h] +
push edi  +
mov edi [esi+18h] +
mov [ebp-10h] ecx +
xor ecx ecx +
push ecx  +
mov [ebp-0Ch] ecx +
mov [ebp-8] ecx +
mov [ebp-4] ecx +
lea ecx [ebp+8] +
push ecx  +
push dword ptr [ebp+14h]  +
lea edx [ebp-1Ch] +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov [esi+18h] edx +
mov edx [esi] +
push eax  +
mov ecx esi +
mov [ebp-1Ch] eax +
mov [ebp-14h] ebx +
call dword ptr [edx]  +
mov [esi+18h] edi +
test eax eax +
jnz loc_104454B  +
cmp dword ptr [ebp+0Ch] 82h +
jz loc_104E230  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push ebx  +
push dword ptr [ebp+0Ch]  +
call sub_104455A  +
mov [ebp+8] eax +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push dword ptr [ecx+4]  +
push dword ptr [ecx+1Ch]  +
call ds:CallWindowProcW  +
pop ebp  +
retn 0Ch  +
***
mov ecx [ecx+64h] +
push 0  +
push offset off_10F962C  +
push offset off_10F788C  +
push 0  +
push ecx  +
call __RTDynamicCast  +
add esp 14h +
test eax eax +
jz nullsub_11  +
mov eax [eax+24h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
cmp dword ptr [ebp+8] 1 +
jz loc_1044715  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+110h]  +
test eax eax +
jz loc_1044715  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+110h]  +
xor ecx ecx +
push ecx  +
push dword ptr [ebp+10h]  +
add eax 4 +
push dword ptr [ebp+0Ch]  +
push ecx  +
push ecx  +
push dword ptr [eax]  +
call ds:MoveWindow  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
lea eax [ecx+48h] +
retn   +
***
sub dword ptr [esp+4] 28h +
jmp loc_10447DD  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+2Ch]  +
mov eax [eax+2Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
dec dword ptr [eax+2Ch]  +
push esi  +
mov esi [eax+2Ch] +
jz loc_104E2F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
lea eax [ebp+arg_14] +
push eax  +
push [ebp+lParam]  +
mov ecx ebx +
push [ebp+wParam]  +
mov [ebp+arg_14] esi +
push edx  +
call sub_104486C  +
jmp loc_1044365  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_8] +
mov edx [esi+0A4h] +
push edi  +
mov edi [esi+0A8h] +
movzx eax cx +
shr ecx 10h +
add ecx edi +
mov [esi+0B0h] ecx +
sub ecx edi +
add eax edx +
lea edi [esi+94h] +
mov [esi+0ACh] eax +
lea ebx [esi+9Ch] +
push edi  +
sub eax edx +
push ebx  +
mov [ebx] eax +
mov [esi+0A0h] ecx +
call sub_1044900  +
mov eax [esi+54h] +
test eax eax +
jz loc_10448CA  +
mov ecx [eax] +
push edi  +
push 1  +
push eax  +
call dword ptr [ecx+44h]  +
mov eax [esi+64h] +
test eax eax +
jz loc_10448DF  +
mov edx [eax] +
lea ecx [esi+0A4h] +
push ecx  +
push ecx  +
push eax  +
call dword ptr [edx+1Ch]  +
test byte ptr [esi+88h] 8 +
jnz loc_106162C  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 0  +
call ds:GetDC  +
mov edi eax +
test edi edi +
jz loc_104496C  +
mov esi ds:GetDeviceCaps +
push 58h  +
push edi  +
call esi  +
push 5Ah  +
push edi  +
mov [ebp+var_4] eax +
call esi  +
push edi  +
push 0  +
mov ebx eax +
call ds:ReleaseDC  +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
mov edx [ebp+var_4] +
imul eax eax +
sar edx 1 +
add eax edx +
cdq   +
idiv  [ebp+var_4] +
mov esi [ebp+arg_4] +
pop edi  +
mov [esi] eax +
mov eax [ecx+4] +
imul eax eax +
mov ecx ebx +
sar ecx 1 +
add eax ecx +
cdq   +
idiv  ebx +
mov [esi+4] eax +
pop esi  +
pop ebx  +
leave   +
retn 8  +
xor ebx ebx +
inc ebx  +
mov [ebp+var_4] ebx +
jmp loc_1044935  +
***
mov eax esi +
jmp loc_1044454  +
***
mov eax edi +
jmp loc_10444CD  +
***
cmp dword ptr [ebp-4] 0 +
mov [esi] eax +
jnz loc_104497B  +
jmp loc_10444AD  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScspec  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [esi+1DEh] 0 +
jnz loc_105B7A4  +
lea ecx [esi+44h] +
mov eax [ecx] +
mov [esi+1DEh] bl +
call dword ptr [eax+78h]  +
mov edx eax +
push 9  +
xor eax eax +
pop ecx  +
lea edi [ebp-54h] +
stos   +
mov eax [esi+270h] +
mov ecx [esi+0D8h] +
xor edi edi +
mov [ebp-54h] edi +
mov [ebp-40h] ebx +
mov [ebp-50h] edi +
cmp eax 2 +
jnz loc_1044AB6  +
mov [ebp-3Ch] ebx +
mov dword ptr [ebp-48h] 0FFFFFFFDh +
lea eax [ebp-54h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push edi  +
push edx  +
push ecx  +
push eax  +
mov ecx esi +
call sub_101864F  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105B7E9  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
mov byte ptr [esi+1DEh] 0 +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
cmp eax ebx +
jnz loc_1044A87  +
jmp loc_105B7DA  +
***
sub dword ptr [esp+4] 20h +
jmp loc_1044831  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1044831  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_104E510  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov eax [esi+88h] +
test al 40h +
jnz loc_1044D0A  +
or eax 40h +
mov [esi+88h] eax +
mov eax [esi+60h] +
xor edi edi +
cmp eax edi +
jnz loc_104E10E  +
mov ecx [esi+84h] +
cmp ecx 0CDCDCDCDh +
jnz loc_1061278  +
mov eax [esi+54h] +
cmp eax edi +
jnz loc_104E11D  +
mov eax [esi+50h] +
cmp eax edi +
jnz loc_104E143  +
mov eax [esi+60h] +
cmp eax edi +
jnz loc_104E173  +
mov [esi+80h] edi +
mov eax [esi+64h] +
cmp eax edi +
jnz loc_10612AF  +
mov eax [esi+54h] +
cmp eax edi +
jnz loc_104E181  +
mov eax [esi+50h] +
cmp eax edi +
jnz loc_104E18F  +
mov eax [esi+5Ch] +
cmp eax edi +
jnz loc_104E19D  +
mov eax [esi+58h] +
cmp eax edi +
jnz loc_104E1AB  +
and dword ptr [esi+88h] 0FFFFFFA4h +
call sub_1001FCF  +
retn   +
***
sub dword ptr [esp+4] 28h +
jmp loc_1044831  +
***
cmp dword ptr [ebp+0Ch] 0 +
mov ecx [ebp+18h] +
mov [ecx] eax +
jz loc_1044297  +
mov eax esi +
jmp loc_1044299  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1044D62  +
lea ecx [esi-20h] +
test ecx ecx +
jz loc_1044D62  +
push 1  +
call sub_104E60C  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1044D97  +
lea ecx [esi-20h] +
test ecx ecx +
jz loc_1044D97  +
push 1  +
call sub_104E6C6  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov bl 1 +
jmp loc_101687E  +
***
push dword ptr [ebp+8]  +
mov ecx [ebp-14h] +
call sub_101710C  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jl loc_1069079  +
jmp loc_1044E49  +
***
retn   +
***
dec eax  +
jnz loc_1069C0B  +
push 80070057h  +
push dword ptr [ebp+20h]  +
lea eax [ebp-40h] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_100CB6E  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_100D798  +
push ebx  +
push ebx  +
push 1  +
push dword ptr [ebp+20h]  +
call ?CreateGraphic@Value@DirectUI@@SGPAV12@PAUHICON__@@_N11@Z  +
jmp loc_100D795  +
***
push dword ptr [ebp+8]  +
mov ecx [ebp-18h] +
call sub_1044E71  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jge loc_1044E49  +
jmp loc_1069053  +
mov byte ptr [ebx+40h] 1 +
jmp loc_101701F  +
***
push dword ptr [ebp+8]  +
mov ecx [ebp-10h] +
call sub_1044E71  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10172C5  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
push edi  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCdirectuiren_6  +
lea ecx [ebp-2Ch] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx 80070057h +
push ebx  +
push dword ptr [esi+18h]  +
lea eax [ebp-3Ch] +
push dword ptr [ebp+8]  +
mov [ebp-14h] edi +
push eax  +
mov [ebp-18h] edi +
call sub_100C5A1  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-2Ch] +
call esi  +
test eax eax +
jl loc_106A630  +
mov eax [ebp-10h] +
movzx eax word ptr [eax+34h] +
mov ecx [ebp+8] +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov [ebp+8] eax +
test eax eax +
jz loc_106A664  +
mov ecx [ebp+8] +
lea eax [ebp-18h] +
push eax  +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
test eax eax +
jz loc_1045048  +
mov edx [eax] +
and edx 0FFFFFFFh +
cmp edx 1 +
jb loc_1045048  +
dec edx  +
push edx  +
mov ecx eax +
call sub_10170E8  +
mov eax [eax] +
push ebx  +
push eax  +
mov [ebp-1Ch] eax +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call esi  +
test eax eax +
jl loc_106A6A5  +
mov ecx [ebp-1Ch] +
call ?GetID@Element@DirectUI@@QAEGXZ  +
mov ecx [ebp-10h] +
cmp [ecx+3Ah] ax +
jz loc_1045048  +
mov ecx [ecx+18h] +
lea eax [ebp-14h] +
push eax  +
push 0  +
push dword ptr [ebp+8]  +
push 0  +
push off_10F9944  +
call ?CreateElement@DUIXmlParser@DirectUI@@QAEJPBGPAVElement@2@1PAKPAPAV32@@Z  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call esi  +
test eax eax +
jl loc_106A6CB  +
push dword ptr [ebp-14h]  +
mov ecx [ebp+8] +
call ?Add@Element@DirectUI@@QAEJPAV12@@Z  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call esi  +
test eax eax +
jl loc_106A6F4  +
mov ecx [ebp-18h] +
test ecx ecx +
jz loc_1044FE0  +
call ?Release@Value@DirectUI@@QAEXXZ  +
lea ecx [ebp-2Ch] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
push 1  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1044FD3  +
***
push 14h  +
mov eax offset dword_10D4DA4 +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCamcviewOnacti  +
mov [ebp-4] ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [edi+138h] +
cmp ecx ebx +
jz loc_105A51A  +
push dword ptr [ebp+18h]  +
lea eax [ebp-20h] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1045129  +
mov ecx [ebp+8] +
push eax  +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
call sub_1001F95  +
mov [ebp-18h] ecx +
xor esi esi +
mov [ebp-24h] esi +
mov ebx [ebp+8] +
push esi  +
mov ecx ebx +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov [ebp-4] esi +
inc esi  +
push offset aCactionspane_7  +
mov ecx ebx +
mov [ebp-24h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebp+10h] 2 +
mov byte ptr [ebp-0Dh] 0 +
jz loc_1045313  +
mov eax [ebp+18h] +
push 80070057h  +
push dword ptr [eax]  +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_100C5A1  +
mov [ebp-4] esi +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
mov ecx ebx +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
mov ecx ebx +
call edi  +
test eax eax +
jl loc_105DA29  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-18h] +
call sub_1046172  +
push 8000FFFFh  +
push eax  +
mov [ebp-20h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx ebx +
call edi  +
test eax eax +
jl loc_105DA5D  +
and dword ptr [ebp-14h] 0 +
cmp dword ptr [ebp+14h] 0 +
jle loc_1045313  +
mov ecx [ebp-14h] +
mov eax [ebp+18h] +
lea eax [eax+ecx*4] +
push 80070057h  +
push dword ptr [eax]  +
mov [ebp-1Ch] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx ebx +
call edi  +
test eax eax +
jl loc_105DA83  +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov eax [eax+4Ch] +
push 80070057h  +
push eax  +
mov [ebp-28h] eax +
lea eax [ebp-48h] +
push eax  +
call sub_100A3AE  +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx ebx +
call edi  +
test eax eax +
jl loc_105DAA9  +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov ecx [eax+8] +
test cl 10h +
jnz loc_10464CF  +
mov edx [ebp-28h] +
cmp dword ptr [edx+4Ch] 0 +
jnz loc_10452DD  +
test cl 8 +
jnz loc_10452DD  +
mov ecx [ebp-18h] +
push eax  +
push dword ptr [ebp-20h]  +
lea eax [ebp-58h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1045F5D  +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx ebx +
call edi  +
test eax eax +
jl loc_105DACF  +
mov byte ptr [ebp-0Dh] 1 +
inc dword ptr [ebp-14h]  +
mov eax [ebp-14h] +
cmp eax [ebp+14h] +
jl loc_10451FF  +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_1045313  +
mov ecx [ebp-18h] +
call sub_100CBA3  +
push eax  +
mov ecx ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx ebx +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105DB03  +
mov eax ebx +
call sub_1001FCF  +
retn 14h  +
***
push 14h  +
mov eax offset dword_10D4DA4 +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCamcviewOnac_0  +
mov [ebp-4] ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [edi+138h] +
cmp ecx ebx +
jz loc_105A57C  +
push dword ptr [ebp+18h]  +
lea eax [ebp-20h] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_104545F  +
mov ecx [ebp+8] +
push eax  +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
xor ebx ebx +
mov [ebp-14h] ebx +
mov edi [ebp+8] +
push ebx  +
mov ecx edi +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCactionspan_12  +
mov ecx edi +
mov [ebp-4] ebx +
mov [ebp-14h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebp+10h] 2 +
jz loc_104552D  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-10h] +
call sub_1046172  +
push 8000FFFFh  +
push eax  +
mov [ebp+10h] eax +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
push eax  +
mov ecx edi +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
mov ecx edi +
call esi  +
cmp eax ebx +
jl loc_105D72C  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+10h] +
push dword ptr [ebp+14h]  +
call sub_1046561  +
push eax  +
mov ecx edi +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx edi +
call esi  +
cmp eax ebx +
jl loc_105D752  +
mov ecx [ebp-10h] +
call sub_100CBA3  +
push eax  +
mov ecx edi +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105D786  +
mov eax edi +
call sub_1001FCF  +
retn 14h  +
***
lea eax [ebp+rc] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_100DA05  +
mov eax [ebx+168h] +
add eax [ebp-0Ch] +
mov ecx [ebp+arg_4] +
push 54h  +
mov [ebp-4] eax +
mov [ecx+4] eax +
pop eax  +
jmp loc_100DA0A  +
***
push 14h  +
mov eax offset dword_10D4DA4 +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCamcviewOnac_1  +
mov [ebp-4] ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [edi+138h] +
cmp ecx ebx +
jz loc_105A4E9  +
push dword ptr [ebp+14h]  +
lea eax [ebp-20h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_104571D  +
mov ecx [ebp+8] +
push eax  +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100F364  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
test ecx ecx +
jz loc_106892F  +
pop ebp  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+20h] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_10456F4  +
push edi  +
push edi  +
push edi  +
push edi  +
lea ecx [ebp+arg_0] +
push ecx  +
push eax  +
call ?EnabledProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push edi  +
mov ecx esi +
call sub_100D704  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
lea edi [esi+0D0h] +
push 2  +
mov ecx edi +
call sub_10188F8  +
push 3  +
mov ecx edi +
call sub_10188F8  +
mov byte ptr [ebp-0Dh] 1 +
jmp loc_1045761  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
mov [ebp-14h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aCactionspan_13  +
mov [ebp-4] ebx +
mov dword ptr [ebp-14h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebp+10h] 4 +
mov [ebp-0Eh] bl +
mov [ebp-0Dh] bl +
jz loc_10456FA  +
lea eax [ebp-0Eh] +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
call sub_104588E  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
cmp eax ebx +
jl loc_105D793  +
cmp [ebp-0Dh] bl +
jnz loc_10457A2  +
cmp [ebp-0Eh] bl +
jnz loc_10457A2  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
mov ecx esi +
call sub_100CBA3  +
jmp loc_1045797  +
***
mov edi 8000FFFFh +
push edi  +
push dword ptr [esi+8Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ebx  +
test eax eax +
jl loc_105D684  +
cmp dword ptr [ebp+8] 4 +
jz loc_105D6B8  +
cmp dword ptr [ebp+8] 3 +
jnz loc_10458D1  +
cmp dword_10F55CC 3 +
mov dword ptr [ebp+8] 1 +
mov dword ptr [ebp+0Ch] 9 +
jnz loc_105D6EE  +
mov eax [ebp-10h] +
mov eax [eax+8Ch] +
cmp dword ptr [eax+270h] 0 +
jz loc_105D6FA  +
push dword ptr [ebp+8]  +
mov ecx [ebp-10h] +
call sub_1046172  +
push edi  +
push eax  +
mov [ebp+8] eax +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ebx  +
test eax eax +
jl loc_105D703  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_1049F6F  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax [ebp+10h] +
mov byte ptr [eax] 1 +
jmp loc_10458D1  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionspan_13  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+10h] +
mov ebx ds:?ToHr@SC@mmcerror@@QBEJXZ +
mov byte ptr [eax] 0 +
cmp [ebp+0Ch] edi +
jnz loc_10457AB  +
lea ecx [ebp-20h] +
call ebx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
push 14h  +
mov eax offset dword_10D4DA4 +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCamcviewOnac_2  +
mov [ebp-4] ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [edi+138h] +
cmp ecx ebx +
jz loc_105A5AD  +
push dword ptr [ebp+10h]  +
lea eax [ebp-20h] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1045A43  +
mov ecx [ebp+8] +
push eax  +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aCactionspan_14  +
mov [ebp-4] ebx +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+10h] ebx +
mov ecx esi +
setnz al  +
movzx eax al +
push eax  +
lea eax [esi+1B0h] +
push eax  +
call sub_1045B3B  +
cmp [ebp+10h] ebx +
jnz loc_1045AA7  +
cmp [esi+1B2h] bl +
jz loc_1045AA7  +
mov ecx esi +
call sub_100CBA3  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
call sub_1045B7D  +
mov ecx [ebp+arg_0] +
mov bl al +
mov al [ebp+arg_4] +
mov [ecx] al +
mov ecx esi +
call sub_1045B7D  +
cmp al bl +
jz loc_1045B72  +
test al al +
setz al  +
movzx eax al +
push eax  +
lea ecx [esi+0D0h] +
call sub_10456B4  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
xor eax eax +
cmp [ecx+1B1h] al +
jnz loc_1045B8F  +
cmp [ecx+1B0h] al +
jz locret_1045B92  +
xor eax eax +
inc eax  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
push 3  +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-1Ch] edi +
mov [ebp-18h] ebx +
push offset aCxmlelementPut  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi] +
push 80004002h  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-18h] ebx +
jnz loc_10669F0  +
mov esi [esi] +
push dword ptr [ebp+8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+6Ch]  +
mov [ebp-1Ch] edi +
mov [ebp-18h] eax +
cmp eax ebx +
jnz loc_1066A15  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
call sub_102C3AF  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-14h] +
call sub_101ED6F  +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call sub_102C353  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_1045CCA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 4 +
test eax eax +
jz loc_1045CDB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push 0  +
push ds:off_102D8E0  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-1Ch] 1 +
call sub_101ECB0  +
push 0  +
push ds:off_102BAA8  +
lea eax [ebp-50h] +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 5 +
call sub_101ECB0  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-34h] +
push ds:off_102D620  +
mov byte ptr [ebp-4] 6 +
call sub_101E68B  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 5 +
call sub_101EB25  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 4 +
call sub_101EB25  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call sub_101EB25  +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-14h] edi +
mov esi [ebp+8] +
push edi  +
mov ecx esi +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov [ebp-4] edi +
inc edi  +
push offset aCactionspan_11  +
mov ecx esi +
mov [ebp-14h] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx 8000FFFFh +
push ebx  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
mov [ebp-4] edi +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
mov ecx esi +
call edi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx esi +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
call esi  +
test eax eax +
jl loc_105D499  +
mov eax [ebp-10h] +
push ebx  +
push dword ptr [eax+8Ch]  +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jl loc_105D4BF  +
mov eax [ebp-10h] +
mov eax [eax+8Ch] +
mov eax [eax+0D8h] +
push ebx  +
push eax  +
mov [ebp-10h] eax +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
mov ebx [ebp+8] +
push eax  +
mov ecx ebx +
mov dword ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx ebx +
call esi  +
test eax eax +
jl loc_105D4E5  +
push dword ptr [ebp+14h]  +
mov eax [ebp-10h] +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+74h]  +
push eax  +
mov ecx ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx ebx +
call esi  +
test eax eax +
jl loc_105D50B  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
mov eax 8001h +
jmp loc_1045F37  +
mov eax 8008h +
jmp loc_1045F37  +
mov eax 8004h +
jmp loc_1045F37  +
mov eax 8005h +
jmp loc_1045F37  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+20h] +
test eax eax +
jnz loc_10697B4  +
mov eax [ebp+arg_0] +
mov [esi+20h] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx+5Ch] +
shr eax 8 +
and al 1 +
retn   +
***
mov eax 8002h +
jmp loc_1045F37  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
or eax 0FFFFFFFFh +
cmp ecx 10h +
ja loc_1045F3B  +
jz loc_1045EC6  +
dec ecx  +
jz loc_1045EBF  +
dec ecx  +
jz loc_1045EB8  +
dec ecx  +
dec ecx  +
jz loc_1045F05  +
sub ecx 4 +
jnz loc_1045F37  +
mov eax 8003h +
pop ebp  +
retn 4  +
sub ecx 20h +
jz loc_1045ECD  +
sub ecx 20h +
jz loc_1045F51  +
sub ecx 40h +
jnz loc_1045F37  +
mov eax 8007h +
jmp loc_1045F37  +
mov eax 8006h +
jmp loc_1045F37  +
***
call sub_1001F95  +
mov ebx ecx +
xor esi esi +
mov [ebp-14h] esi +
mov ecx [ebp+8] +
push esi  +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor edi edi +
inc edi  +
push offset aCactionspane_8  +
mov [ebp-4] esi +
mov [ebp-14h] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+18h] +
push 80070057h  +
push dword ptr [ebp+14h]  +
lea eax [ebp-24h] +
push esi  +
push eax  +
call sub_100C5A1  +
mov ecx [ebp+8] +
push eax  +
mov [ebp-4] edi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
call edi  +
test eax eax +
jl loc_105D868  +
push dword ptr [ebp+10h]  +
and dword ptr [ebp+14h] 0 +
mov ecx ebx +
call sub_1023685  +
mov [ebp-10h] eax +
mov eax [esi+8] +
test al 1 +
jnz loc_10460CA  +
and dword ptr [ebp+18h] 0 +
test al 0C0h +
jnz loc_1046019  +
mov eax [esi+4] +
cmp eax 0FFFFFFFFh +
jle loc_1046019  +
lea ecx [ebp+18h] +
push ecx  +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx ebx +
call sub_10462DD  +
test al al +
jz loc_105D8C2  +
mov eax [esi] +
mov ecx [esi+8] +
mov edx [esi+14h] +
push eax  +
push 0  +
lea eax [ebp+14h] +
push eax  +
push ecx  +
push dword ptr [esi+3Ch]  +
lea ecx [ebx+0D0h] +
push edx  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-10h]  +
call sub_1024664  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call edi  +
test eax eax +
jl loc_105D924  +
mov ecx [ebp+14h] +
test ecx ecx +
jz loc_105D924  +
call sub_1045EFC  +
test al al +
jnz loc_105D907  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
mov esi [esi] +
lea eax [ebp+14h] +
push eax  +
push esi  +
push dword ptr [ebp+10h]  +
lea ecx [ebx+0D0h] +
push dword ptr [ebp-10h]  +
call sub_1046103  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call edi  +
test eax eax +
jge loc_1046070  +
jmp loc_105D89C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
xor eax eax +
push eax  +
push [ebp+arg_C]  +
push 1  +
push eax  +
push eax  +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1024664  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+48h] +
xor eax eax +
test ecx ecx +
jz loc_104614C  +
push [ebp+arg_0]  +
call sub_1024388  +
test eax eax +
jz loc_104614C  +
pop esi  +
pop ebp  +
retn 4  +
mov ecx [esi+4Ch] +
test ecx ecx +
jz loc_104615F  +
push [ebp+arg_0]  +
call sub_1024388  +
test eax eax +
jnz loc_1046147  +
mov ecx [esi+50h] +
test ecx ecx +
jz loc_1046147  +
pop esi  +
pop ebp  +
jmp sub_1024388  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionspane_9  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx [ebp+8] +
mov [ebp-10h] edi +
lea edi [esi+0D0h] +
push ebx  +
mov ecx edi +
call sub_104612A  +
test eax eax +
jz loc_1046214  +
mov [ebp-10h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-10h] +
call sub_1001FCF  +
retn 4  +
push ebx  +
mov ecx esi +
call sub_1023685  +
push eax  +
mov ecx edi +
call sub_1016801  +
mov edi eax +
push 8000FFFFh  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_105D604  +
push ebx  +
mov ecx edi +
call sub_10421AC  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_105D63B  +
push ebx  +
mov ecx edi +
call sub_1024388  +
jmp loc_10461B5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+8Ch] +
xor al al +
test ecx ecx +
jz loc_10462C9  +
mov eax [ecx+174h] +
push esi  +
mov esi [ebp+arg_0] +
push dword ptr [eax+0D0h]  +
mov ecx esi +
call ?Attach@CImageList@@QAEHPAU_IMAGELIST@@@Z  +
test esi esi +
jz loc_10462C3  +
mov esi [esi+4] +
test esi esi +
setnz al  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
push 0  +
lea ecx [ebp-38h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionspan_10  +
lea ecx [ebp-38h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
or dword ptr [ebp-18h] 0FFFFFFFFh +
mov ebx 8000FFFFh +
push ebx  +
push dword ptr [ebp+10h]  +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-0Dh] 0 +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-38h] +
call edi  +
test eax eax +
jl loc_105D7C7  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
mov eax [ebp-14h] +
push ebx  +
push dword ptr [eax+8Ch]  +
lea eax [ebp-28h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call edi  +
test eax eax +
jl loc_105D7FB  +
cmp dword ptr [ebp+8] 4 +
jz loc_105D821  +
mov eax [ebp-14h] +
mov eax [eax+8Ch] +
lea ecx [eax+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov [ebp+8] eax +
push ebx  +
push dword ptr [ebp+8]  +
lea eax [ebp-28h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call edi  +
test eax eax +
jl loc_105D834  +
mov ecx [ebp-14h] +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-48h] +
push dword ptr [ebp+8]  +
push eax  +
call sub_1045D51  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 4 +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105D85A  +
cmp dword ptr [ebp-18h] 0FFFFFFFFh +
jle loc_104645A  +
lea ecx [ebp-20h] +
call ??0CImageList@@QAE@XZ  +
mov ecx [ebp-14h] +
lea eax [ebp-20h] +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_1046294  +
test al al +
jz loc_104644E  +
push 0  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
call sub_1041D22  +
lea ecx [ebp-20h] +
mov esi eax +
call ?Detach@CImageList@@QAEPAU_IMAGELIST@@XZ  +
mov eax [ebp+10h] +
test esi esi +
mov [eax] esi +
setnz byte ptr [ebp-0Dh]  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ??1CImageList@@UAE@XZ  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-38h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov al [ebp-0Dh] +
call sub_1001FCF  +
retn 0Ch  +
***
mov [ebp+8] eax +
test eax eax +
jnz loc_10463AE  +
jmp loc_104639A  +
***
mov ecx [ebp-20h] +
call sub_10464EA  +
cmp eax 1 +
jz loc_10452D9  +
jmp loc_10452DD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
inc dword ptr [esi+4Ch]  +
cmp dword ptr [esi+4Ch] 1 +
jnz loc_104652E  +
lea eax [ebp+var_4] +
push eax  +
push 800Dh  +
lea ecx [esi+20h] +
call ?Lookup@CMapWordToPtr@@QBEHGAAPAX@Z  +
test eax eax +
jz loc_104652E  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_104652E  +
push 2  +
call sub_1046539  +
push dword ptr [esi+54h]  +
mov ecx [ebp+var_4] +
call sub_102459D  +
mov eax [esi+4Ch] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax 100h +
push edi  +
mov edi [ebp+arg_0] +
test [esi+5Ch] eax +
jnz loc_1069AE0  +
mov [esi+5Ch] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov ebx ecx +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionpanez_4  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
cmp dword_10F99A8 edi +
jbe loc_10465ED  +
mov eax dword_10F9948[edi*4] +
test [ebp+8] eax +
mov edx eax +
setnz cl  +
and edx [ebp+0Ch] +
mov [ebp-10h] cl +
neg edx  +
sbb edx edx +
and edx 0FFFFFFE0h +
push eax  +
mov ecx ebx +
add edx 20h +
call sub_1045F11  +
push edx  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
push eax  +
call sub_1046653  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_1069354  +
inc edi  +
cmp edi dword_10F99A8 +
jb loc_104659A  +
mov ecx [ebx+3Ch] +
call sub_1024917  +
lea ecx [ebp-20h] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionpanez_5  +
lea ecx [ebp-30h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [edi+20h] +
mov [ebp-18h] esi +
call ?Lookup@CMapWordToPtr@@QBEHGAAPAX@Z  +
mov ebx ds:?ToHr@SC@mmcerror@@QBEJXZ +
test eax eax +
jz loc_104A082  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-18h] +
call sub_1046539  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-18h] +
call sub_104671F  +
lea ecx [ebp-30h] +
call ebx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
test al al +
jnz loc_105ACEA  +
xor eax eax +
pop ebx  +
jmp loc_1041E91  +
***
mov eax [esi+40h] +
cmp eax edi +
jz loc_105AFD5  +
mov eax [eax+0E0h] +
cmp eax edi +
jz loc_105AFD5  +
lea edx [ebp-18h] +
push edx  +
push edi  +
lea edx [esi+1F8h] +
push edx  +
push dword ptr [ebx+18h]  +
mov [ebp-18h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
cmp eax edi +
jl loc_105B006  +
mov eax [ebx+1Ch] +
mov [ebp-20h] edi +
mov edi 0FFFF0002h +
mov [ebp-14h] edi +
lea ebx [edi-1] +
test eax eax +
jz loc_10467FA  +
mov [ebp-14h] eax +
cmp eax edi +
jz loc_105B03D  +
cmp eax ebx +
jz loc_1049CC1  +
mov ecx [esi+174h] +
lea edx [ebp-14h] +
push edx  +
push eax  +
lea eax [ebp-48h] +
add ecx 0A8h +
push eax  +
call sub_1046CE6  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-48h] +
call ds:??7SC@mmcerror@@QBEHXZ  +
test eax eax +
jz loc_105B045  +
push dword ptr [ebp-14h]  +
mov ecx [esi+174h] +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov [ebp-20h] eax +
test eax eax +
jz loc_105B045  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-48h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
push dword ptr [ebp-14h]  +
mov ecx [esi+174h] +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-10h]  +
call sub_10273A1  +
test eax eax +
jz loc_10276C2  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_1041E7B  +
test eax eax +
jnz loc_105B079  +
mov ecx [esi+174h] +
call sub_100C5D1  +
cmp eax [ebp-10h] +
jnz loc_105B2AB  +
mov ecx [esi+174h] +
push 2  +
push dword ptr [ebp-10h]  +
call sub_100E959  +
jmp loc_10276C2  +
***
mov dword ptr [edi+110h] 0FFFFh +
mov [ebp+8] ebx +
lea esi [ebp-24h] +
push offset dword_1046898  +
mov ecx esi +
call ?FindOneOf@CString@@QBEHPBG@Z  +
cmp eax 0FFFFFFFFh +
mov [ebp-14h] eax +
jg loc_1062737  +
mov eax [ebp-20h] +
xor esi esi +
inc esi  +
cmp [eax-8] esi +
jg loc_10627B0  +
xor esi esi +
jmp loc_104689C  +
***
xor eax eax +
inc eax  +
mov ecx esi +
shl eax cl +
test [edi+110h] eax +
jz loc_10468BA  +
mov eax [ebp+esi*4-24h] +
push 1  +
push eax  +
push esi  +
mov ecx edi +
call sub_1022ECE  +
inc esi  +
cmp esi 3 +
jl loc_104689C  +
jmp loc_1022E94  +
***
push 14h  +
mov eax offset dword_10D4DA4 +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCamcviewOnac_3  +
mov [ebp-4] ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [edi+138h] +
cmp ecx ebx +
jz loc_105A54B  +
push dword ptr [ebp+10h]  +
lea eax [ebp-20h] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_10469C9  +
mov ecx [ebp+8] +
push eax  +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
dec ecx  +
jz loc_1023696  +
dec ecx  +
jz loc_1023696  +
jmp loc_105D32B  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1046A78  +
cmp byte ptr [ecx+19h] 5 +
jb loc_1046A78  +
jmp loc_105D53F  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
mov [ebp-10h] esi +
mov ebx [ebp+8] +
push esi  +
mov ecx ebx +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov [ebp-4] esi +
inc esi  +
push offset aCactionspan_15  +
mov ecx ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebp+10h] 2 +
jz loc_1046A78  +
push dword ptr [ebp+10h]  +
lea ecx [edi+0D0h] +
call sub_104612A  +
push 8000FFFFh  +
push eax  +
mov [ebp+10h] eax +
lea eax [ebp-20h] +
push eax  +
call sub_100A3AE  +
push eax  +
mov ecx ebx +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx ebx +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
test eax eax +
jl loc_10469A3  +
mov ecx [ebp+10h] +
push 0  +
call sub_102357E  +
mov ecx edi +
call sub_100CBA3  +
push eax  +
mov ecx ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx ebx +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105D557  +
mov eax ebx +
call sub_1001FCF  +
retn 0Ch  +
***
mov ecx [esi+174h] +
push eax  +
call sub_100C803  +
jmp loc_1041E4A  +
***
mov ebx 113415FFh +
add [ecx] al +
push eax  +
add esi 1Ch +
push esi  +
push edi  +
call ds:FillRect  +
cmp byte ptr [ebp-46h] 0 +
jz loc_105EFDC  +
lea eax [ebp-78h] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetClientRect  +
mov eax [ebx+68h] +
add eax [ebp-78h] +
mov edx [ebx+6Ch] +
mov ecx [ebp-6Ch] +
sub ecx [ebp-74h] +
lea esi [ebp-78h] +
lea edi [ebp-60h] +
movs   +
movs   +
movs   +
movs   +
mov [ebp-60h] eax +
mov eax [ebp-5Ch] +
sub eax edx +
add eax ecx +
mov [ebp-54h] edx +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
push 0  +
lea eax [ebp-60h] +
push eax  +
call ds:OffsetRect  +
lea ecx [ebp-0B0h] +
call sub_1041C45  +
mov esi [ebp-4Ch] +
mov eax [esi] +
and dword ptr [ebp-4] 0 +
lea ecx [ebx+58h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+30h]  +
mov edi ds:GetSysColor +
mov [ebp-4Ch] eax +
mov eax [esi] +
push 15h  +
mov [ebp-50h] eax +
call edi  +
push eax  +
mov eax [ebp-50h] +
mov ecx esi +
call dword ptr [eax+34h]  +
mov eax [esi] +
push 5  +
mov [ebp-50h] eax +
call edi  +
push eax  +
mov eax [ebp-50h] +
mov ecx esi +
call dword ptr [eax+38h]  +
cmp byte ptr [ebp-46h] 0 +
jz loc_1046C8B  +
sub esp 1Ch +
lea edi [ebx+50h] +
mov eax [edi] +
mov ecx esp +
mov [ebp-50h] esp +
push eax  +
call sub_101D1AD  +
push dword ptr [ebp-68h]  +
lea ecx [ebp-44h] +
call sub_1023B35  +
lea eax [ebp-44h] +
push eax  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 1 +
call sub_10238E0  +
test al al +
jz loc_1046C4B  +
lea ecx [ebp-44h] +
call sub_10236A2  +
test al al +
jz loc_105EFEB  +
push 8C20h  +
lea eax [ebp-60h] +
push eax  +
push edi  +
mov ecx esi +
call sub_1046CC1  +
push 8820h  +
lea eax [ebp-60h] +
push eax  +
push edi  +
mov ecx esi +
call sub_1046CC1  +
mov ecx [ebp-70h] +
mov eax [ebp-58h] +
mov [ebp-58h] ecx +
mov ecx [ebx+68h] +
lea eax [eax+ecx*2] +
lea ecx [ebp-44h] +
mov [ebp-60h] eax +
mov byte ptr [ebp-4] 0 +
call sub_1023CCB  +
cmp byte ptr [ebp-45h] 0 +
jnz loc_105F00E  +
cmp dword ptr [ebp-4Ch] 0 +
jz loc_1046CA5  +
push dword ptr [ebp-4Ch]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+30h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0B0h] +
call sub_10160F3  +
call sub_100C50D  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov edx [eax-8] +
push esi  +
push [ebp+arg_8]  +
mov esi [ecx] +
push [ebp+arg_4]  +
push edx  +
push eax  +
call dword ptr [esi+70h]  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCtreeviewmapSc  +
lea ecx [ebp-24h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1064851  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea ecx [edi+1Ch] +
call sub_100D440  +
mov edi [edi+20h] +
mov eax [ebp-14h] +
cmp eax edi +
jz loc_1064863  +
mov eax [eax+10h] +
cmp eax ebx +
jz loc_1064863  +
mov eax [eax] +
mov ecx [ebp+10h] +
mov [ecx] eax +
lea eax [ebp-24h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
test [ebp+arg_8] 1 +
jz loc_1046E21  +
and [ebp+arg_4] 0 +
cmp ebx eax +
jl loc_105950C  +
mov edx [esi+8] +
mov ecx [edi+8] +
cmp edx ecx +
jg loc_1059510  +
mov edx [esi+4] +
mov eax [edi+4] +
and [ebp+arg_0] 0 +
cmp edx eax +
jl loc_105952E  +
mov ebx [esi+0Ch] +
mov ecx [edi+0Ch] +
cmp ebx ecx +
jle loc_1046E48  +
sub eax edx +
sub ecx ebx +
mov [ebp+arg_0] eax +
cmp ecx eax +
mov [ebp+var_4] ecx +
lea eax [ebp+arg_0] +
jl loc_1046E0A  +
lea eax [ebp+var_4] +
mov eax [eax] +
cmp [ebp+arg_4] 0 +
jnz loc_1046E16  +
test eax eax +
jz loc_1046E21  +
push eax  +
push [ebp+arg_4]  +
push esi  +
call ds:OffsetRect  +
test [ebp+arg_8] 2 +
jz loc_1029626  +
mov eax [edi+8] +
cmp [esi+8] eax +
jg loc_1059535  +
mov edi [edi+0Ch] +
cmp [esi+0Ch] edi +
jle loc_1029626  +
jmp loc_105953D  +
mov eax [ebp+arg_0] +
jmp loc_1046E0C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 0 +
push esi  +
jz loc_1046F2F  +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_1046F48  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx ebx +
test esi esi +
jge loc_1046F25  +
push 0  +
jmp loc_1046F28  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_1046F3D  +
push 0  +
mov ecx ebx +
call sub_1010F11  +
mov esi 80004002h +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
mov ecx [ebp+8] +
push edi  +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aCocxctrlwrappe  +
mov [ebp-4] edi +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+110h]  +
cmp eax edi +
jz loc_1046FB5  +
push edi  +
push dword ptr [eax+4]  +
call ds:ShowWindow  +
lea ecx [esi+64h] +
call sub_100C474  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov byte ptr [ebx] 0 +
and dword ptr [ecx] 0 +
mov [ebp+riid] edx +
mov [ebp+ppv] ecx +
mov [ebp+var_18] 80004005h +
test edi edi +
jz loc_1047036  +
movzx eax word ptr [edi] +
test ax ax +
jnz loc_104F87C  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002492  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_1047066  +
mov ecx [eax] +
push esi  +
push offset dword_1047070  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 28h +
jmp loc_1047091  +
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFE0h +
call sub_10470B0  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10470D0  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
lea ebx [esi-20h] +
push edi  +
mov ecx ebx +
mov [ebp+var_4] 1 +
mov [ebp+var_8] ebx +
call sub_1044C61  +
lea edi [esi-1Ch] +
mov eax [edi] +
mov [ebp+var_C] edi +
test eax eax +
jnz loc_1050274  +
push [ebp+hWnd]  +
call ds:IsWindow  +
test eax eax +
jz loc_10472A1  +
push [ebp+hWnd]  +
mov ecx ebx +
call sub_104951F  +
cmp dword ptr [esi+98h] 0 +
jnz loc_104720C  +
mov ecx edi +
call sub_1048493  +
test eax eax +
jnz loc_1061AF7  +
push 5  +
call ds:GetSysColor  +
mov [esi+98h] eax +
mov ecx [ebp+arg_10] +
mov edi [ebp+arg_4] +
lea ebx [ebp+hWnd+3] +
mov edx offset dword_1048258 +
call sub_1047001  +
xor ebx ebx +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_1047245  +
push [ebp+arg_C]  +
mov ecx [ebp+var_8] +
cmp eax 1 +
setz al  +
movzx eax al +
push eax  +
mov eax [ebp+arg_10] +
push dword ptr [eax]  +
call sub_10472B0  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] ebx +
lea eax [esi+50h] +
mov esi [ebp+arg_14] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
jl loc_1047279  +
mov edi [ebp+arg_10] +
mov ecx [edi] +
cmp ecx ebx +
jnz loc_104FEE7  +
cmp byte ptr [ebp+hWnd+3] bl +
jnz loc_1061B14  +
cmp [ebp+var_4] ebx +
jl loc_1047279  +
mov eax [ebp+arg_0] +
cmp [eax+30h] ebx +
jnz loc_10472A1  +
mov ecx [ebp+var_8] +
call sub_1044C61  +
mov eax [ebp+var_C] +
mov eax [eax] +
cmp eax ebx +
jz loc_10472A1  +
push 507h  +
push ebx  +
push ebx  +
push eax  +
call ds:RedrawWindow  +
cmp [ebp+var_4] ebx +
jl loc_1061D0B  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
call sub_1001F95  +
mov esi ecx +
mov ebx [ebp+8] +
test ebx ebx +
jz loc_1047505  +
push ebx  +
lea eax [esi+50h] +
push eax  +
call sub_100CA9D  +
mov eax [ebx] +
lea edi [esi+54h] +
push edi  +
push offset dword_104752C  +
push ebx  +
call dword ptr [eax]  +
mov eax [edi] +
test eax eax +
jz loc_10474D5  +
mov ecx [eax] +
lea ebx [esi+90h] +
push ebx  +
push 1  +
push eax  +
call dword ptr [ecx+58h]  +
test dword ptr [ebx] 20000h +
jnz loc_104FE8E  +
push dword ptr [edi]  +
lea ecx [ebp-20h] +
call sub_1047E7B  +
cmp byte ptr [ebp+0Ch] 0 +
mov dword ptr [ebp-4] 1 +
jz loc_104FEC7  +
test dword ptr [ebx] 20000h +
jnz loc_1047359  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
push eax  +
lea ecx [ebp+0Ch] +
call sub_1047541  +
mov eax [edi] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx+0Ch]  +
mov eax [ebp+0Ch] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1047359  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [edi] +
and dword ptr [esi+80h] 0 +
mov ecx [eax] +
lea ebx [esi+60h] +
push ebx  +
push offset dword_104751C  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_10617DE  +
mov dword ptr [esi+80h] 7 +
test eax eax +
jl loc_10617FA  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
push eax  +
lea ecx [ebp-10h] +
call sub_1047049  +
mov eax [edi] +
mov ecx [eax] +
lea edx [esi+8Ch] +
push edx  +
push dword ptr [ebp-10h]  +
mov byte ptr [ebp-4] 3 +
push eax  +
call dword ptr [ecx+4Ch]  +
mov ebx [ebx] +
test ebx ebx +
jz loc_10473C3  +
push dword ptr [ebp-10h]  +
mov eax [ebx] +
push 0  +
push 1  +
push ebx  +
call dword ptr [eax+1Ch]  +
mov eax [edi] +
mov ecx [eax] +
push 0  +
push offset aAxwin  +
push eax  +
call dword ptr [ecx+14h]  +
lea ebx [esi+0A4h] +
push ebx  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
mov ecx [esi+0ACh] +
sub ecx [ebx] +
lea eax [esi+9Ch] +
mov [eax] ecx +
mov ecx [esi+0B0h] +
sub ecx [esi+0A8h] +
mov [esi+0A0h] ecx +
lea ecx [esi+94h] +
push ecx  +
push eax  +
call sub_1044900  +
mov eax [edi] +
mov edx [eax] +
lea ecx [esi+94h] +
push ecx  +
push 1  +
push eax  +
call dword ptr [edx+44h]  +
mov eax [edi] +
mov edx [eax] +
lea ecx [esi+94h] +
push ecx  +
push 1  +
push eax  +
call dword ptr [edx+48h]  +
lea eax [esi+9Ch] +
push eax  +
lea eax [esi+94h] +
push eax  +
call sub_1047A09  +
mov eax [esi+9Ch] +
add eax [ebx] +
mov ecx esi +
mov [esi+0ACh] eax +
mov eax [esi+0A0h] +
add eax [esi+0A8h] +
mov [esi+0B0h] eax +
mov eax [esi] +
call dword ptr [eax+0Ch]  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1047541  +
mov edi [edi] +
mov eax [edi] +
push ebx  +
push dword ptr [esi+4]  +
xor ebx ebx +
push ebx  +
push dword ptr [ebp-1Ch]  +
mov byte ptr [ebp-4] 4 +
push ebx  +
push 0FFFFFFFBh  +
push edi  +
call dword ptr [eax+2Ch]  +
push 507h  +
push ebx  +
push ebx  +
push dword ptr [esi+4]  +
call ds:RedrawWindow  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
cmp eax ebx +
jz loc_10474B0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_10474C1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-20h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_10474D2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ebx [ebp+8] +
and dword ptr [ebp-14h] 0 +
mov eax [ebx] +
lea ecx [ebp-14h] +
push ecx  +
push offset loc_10449B4  +
push ebx  +
mov dword ptr [ebp-4] 5 +
call dword ptr [eax]  +
mov eax [ebp-14h] +
test eax eax +
jnz loc_1061816  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jnz loc_1061830  +
xor eax eax +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_104755E  +
mov ecx [eax] +
push esi  +
push offset dword_1047568  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
cmp [ebp+18h] esi +
jz loc_105C886  +
cmp dword ptr [ebp+18h] 2 +
jnz loc_105C8B3  +
push edi  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
call sub_10475CD  +
mov byte ptr [ebp-4] 5 +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1020D27  +
jmp loc_1020DF6  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScat_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [esi+188h] edi +
jnz loc_1047612  +
push 31F5h  +
mov ecx esi +
call sub_1030E23  +
push 80070057h  +
push dword ptr [esi+188h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105C514  +
push dword ptr [esi+0D8h]  +
mov ecx [esi+188h] +
lea eax [esi+268h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_1047731  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10476BE  +
push 0  +
push dword ptr [esi+188h]  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_10209DE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov ebx ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCocxhostviewSc  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+10h] +
mov ecx [eax+8] +
cmp ecx 2 +
jnz loc_106236B  +
cmp byte ptr [eax+4] 0 +
jz loc_104F8EC  +
mov ecx [eax+74h] +
test ecx ecx +
jz loc_104F8EC  +
push dword ptr [ebp+14h]  +
mov eax [eax+70h] +
push eax  +
push ecx  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-40h] +
push eax  +
mov ecx ebx +
call sub_104A282  +
mov byte ptr [ebp-4] 2 +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_106237B  +
mov eax [ebx] +
push 80070057h  +
mov ecx ebx +
call dword ptr [eax+110h]  +
push eax  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_106237B  +
lea eax [ebp-30h] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetClientRect  +
mov eax [ebp-2Ch] +
mov ecx [ebp-30h] +
mov esi [ebp-24h] +
mov edi [ebp-28h] +
sub esi eax +
sub edi ecx +
mov [ebp+14h] eax +
mov eax [ebx] +
mov [ebp+0Ch] ecx +
mov ecx ebx +
call dword ptr [eax+110h]  +
push 50h  +
push esi  +
push edi  +
push dword ptr [ebp+14h]  +
add eax 4 +
push dword ptr [ebp+0Ch]  +
push 0  +
push dword ptr [eax]  +
call ds:SetWindowPos  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
mov edi [ebx+20h] +
jmp loc_1020A62  +
push 0  +
mov ecx ebx +
call ?ShowWindow@CWnd@@QAEHH@Z  +
push 0  +
push edi  +
call ds:ShowWindow  +
jmp loc_1020A71  +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_1020A90  +
jmp loc_105AE7C  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCocxctrlwrap_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-30h] +
push edi  +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10611E0  +
push dword ptr [ebp+10h]  +
mov [esi+24h] edi +
add esi 28h +
push esi  +
call sub_100CA9D  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1017E07  +
test eax eax +
jl loc_1061395  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 0  +
call ds:GetDC  +
mov edi eax +
test edi edi +
jz loc_1047A72  +
mov esi ds:GetDeviceCaps +
push 58h  +
push edi  +
call esi  +
push 5Ah  +
push edi  +
mov ebx eax +
call esi  +
push edi  +
push 0  +
mov [ebp+var_4] eax +
call ds:ReleaseDC  +
mov esi [ebp+arg_0] +
mov eax [esi] +
imul eax ebx +
mov ecx 4F6h +
add eax ecx +
cdq   +
mov ebx 9ECh +
mov edi ebx +
idiv  edi +
mov edi [ebp+arg_4] +
mov [edi] eax +
mov eax [esi+4] +
imul eax [ebp+var_4] +
add eax ecx +
cdq   +
idiv  ebx +
mov [edi+4] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
xor ebx ebx +
inc ebx  +
mov [ebp+var_4] ebx +
jmp loc_1047A3E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax-24h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi-20h]  +
call ds:GetDC  +
mov edi eax +
xor edx edx +
cmp edi edx +
jz loc_1061793  +
mov eax [esi+3Ch] +
cmp eax edx +
jz loc_1047ADA  +
push ebx  +
mov ebx [eax] +
push edx  +
push edx  +
lea ecx [esi+80h] +
push ecx  +
push ecx  +
push edi  +
push edx  +
push edx  +
push edx  +
push 0FFFFFFFFh  +
push 1  +
push eax  +
call dword ptr [ebx+0Ch]  +
pop ebx  +
push edi  +
push dword ptr [esi-20h]  +
call ds:ReleaseDC  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10447DD  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10447DD  +
***
sub dword ptr [esp+4] 20h +
jmp loc_10447DD  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1047091  +
***
cmp ecx 2 +
jnz loc_1047B4B  +
lea eax [esi+188h] +
cmp dword ptr [eax] 0 +
jnz loc_1047B3A  +
jmp loc_1047B4B  +
mov eax [eax] +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+114h]  +
jmp loc_1024C92  +
xor eax eax +
jmp loc_1024C92  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
xor eax eax +
mov [ebp+var_4] eax +
cmp [ebp+arg_4] eax +
jz loc_1061E28  +
cmp [ebp+arg_8] eax +
jz loc_1061E28  +
cmp [ebp+lpRect] eax +
jz loc_1061E28  +
cmp [ebp+arg_10] eax +
jz loc_1061E28  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea ebx [edi+30h] +
cmp [ebx] eax +
jnz loc_1047BAF  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1047FA9  +
mov eax [ebp+arg_0] +
push ebx  +
add eax 20h +
mov ecx [eax] +
push offset dword_1047C60  +
push eax  +
call dword ptr [ecx]  +
lea esi [edi+34h] +
cmp dword ptr [esi] 0 +
jnz loc_1047BD1  +
lea eax [ebp+arg_0] +
push eax  +
call sub_104807F  +
mov eax [ebp+arg_0] +
push esi  +
add eax 20h +
mov ecx [eax] +
push offset dword_1047C50  +
push eax  +
call dword ptr [ecx]  +
push [ebp+arg_4]  +
mov ecx ebx +
call sub_1047C75  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_1047C75  +
push [ebp+lpRect]  +
mov esi ds:GetClientRect +
push dword ptr [edi-24h]  +
call esi  +
push [ebp+arg_10]  +
push dword ptr [edi-24h]  +
call esi  +
xor eax eax +
xor ebx ebx +
mov [ebp+var_A] ax +
mov [ebp+var_8] ax +
inc ebx  +
push ebx  +
lea eax [ebp-0Ch] +
push eax  +
mov [ebp+var_C] 0 +
call ds:CreateAcceleratorTableW  +
mov esi [ebp+arg_14] +
mov [ebp+arg_4] eax +
mov dword ptr [esi] 14h +
mov eax [edi+60h] +
shr eax 2 +
and eax ebx +
mov [esi+4] eax +
push dword ptr [edi-24h]  +
call ds:GetParent  +
mov [esi+8] eax +
mov eax [ebp+arg_4] +
pop edi  +
mov [esi+10h] ebx +
mov [esi+0Ch] eax +
pop esi  +
pop ebx  +
mov eax [ebp+var_4] +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10615EC  +
mov edx [ecx] +
mov [eax] edx +
mov ecx [ecx] +
test ecx ecx +
jz loc_1047C95  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
xor eax eax +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCocxhostviewGe  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [esi+64h] +
push ebx  +
push offset off_10F962C  +
push offset off_10F788C  +
push ebx  +
push esi  +
call __RTDynamicCast  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jz loc_10612BD  +
mov [ebp-10h] ebx +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call sub_100A5E6  +
push eax  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_1047D99  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
mov eax [ebp-10h] +
mov [ebp-4] bl +
jnz loc_10612DF  +
mov esi eax +
cmp eax ebx +
jz loc_1047D46  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ebx esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax ebx +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCocxctrlwrap_1  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10611F2  +
mov eax [esi+28h] +
mov [edi] eax +
test eax eax +
jz loc_1047E16  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_1047E98  +
mov ecx [eax] +
push esi  +
push offset loc_1047EA0  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
and byte ptr [ebx] 0D5h +
jg near ptr loc_1047EA9+3  +
dec esi  +
sbb edx [eax] +
scas   +
sub eax 2E2B0008h +
mov dword ptr [ebx] 90909090h +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFE0h +
call sub_1047ED4  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1047EF0  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFE0h +
call sub_1047F48  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1047F64  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jz loc_1061DB9  +
push 48h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_1048017  +
push esi  +
mov ecx eax +
call sub_1048025  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
test esi esi +
jz loc_104801B  +
lea ecx [esi+28h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_1061DD8  +
xor ebx ebx +
test ebx ebx +
jnz loc_1061DD8  +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
xor eax eax +
jmp loc_1047FE5  +
mov ebx [ebp-18h] +
jmp loc_104800B  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1048052  +
push offset Addend  +
mov dword ptr [esi] offset off_1008970 +
mov dword ptr [esi+20h] offset off_1011B1C +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+24h] +
call sub_1041A02  +
mov ecx ds:DefWindowProcW +
xor eax eax +
mov [esi+4] eax +
mov [esi+14h] eax +
mov [esi+18h] eax +
mov [esi+1Ch] ecx +
mov [esi+44h] eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jz loc_1061DE8  +
push 48h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10480ED  +
push esi  +
mov ecx eax +
call sub_10480FB  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
test esi esi +
jz loc_10480F1  +
lea ecx [esi+28h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_1061E07  +
xor ebx ebx +
test ebx ebx +
jnz loc_1061E07  +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
xor eax eax +
jmp loc_10480BB  +
mov ebx [ebp-18h] +
jmp loc_10480E1  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1048052  +
push offset Addend  +
mov dword ptr [esi] offset off_100894C +
mov dword ptr [esi+20h] offset off_1011EA4 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1048144  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1048160  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jz loc_1061EA4  +
push 2Ch  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10481EB  +
push esi  +
mov ecx eax +
call sub_10481F9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
test esi esi +
jz loc_10481EF  +
lea ecx [esi+8] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_1061EC3  +
xor ebx ebx +
test ebx ebx +
jnz loc_1061EC3  +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
xor eax eax +
jmp loc_10481B9  +
mov ebx [ebp-18h] +
jmp loc_10481DF  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_104821F  +
push offset Addend  +
mov dword ptr [esi] offset off_1011EFC +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_1041A02  +
and dword ptr [esi+24h] 0 +
mov dword ptr [esi] offset off_1044994 +
and dword ptr [esi+28h] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov ecx [esi+188h] +
lea eax [esi+94h] +
add ecx 48h +
push eax  +
call sub_102124D  +
jmp loc_1030EEA  +
mov ecx [esi+180h] +
jmp loc_1048336  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
test esi esi +
jz loc_1061173  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1061173  +
mov [esi] eax +
call ds:GetCurrentThreadId  +
mov edi [ebp+arg_0] +
lea ebx [edi+34h] +
push ebx  +
mov [esi+4] eax +
call ds:EnterCriticalSection  +
mov eax [edi+68h] +
mov [esi+8] eax +
push ebx  +
mov [edi+68h] esi +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
mov eax [ebp+8] +
add eax 34h +
push eax  +
call ds:LeaveCriticalSection  +
xor edi edi +
retn   +
***
mov eax ds:DefWindowProcW +
push esi  +
mov esi ecx +
push edi  +
xor edi edi +
mov [esi+4Ch] edi +
mov [esi+4] edi +
mov [esi+14h] edi +
mov [esi+1Ch] eax +
mov [esi+18h] edi +
mov [esi+38h] edi +
mov [esi+50h] edi +
mov [esi+54h] edi +
mov [esi+58h] edi +
mov [esi+5Ch] edi +
mov [esi+60h] edi +
mov [esi+64h] edi +
mov [esi+68h] edi +
mov [esi+6Ch] edi +
mov [esi+0C4h] edi +
mov [esi+0C8h] edi +
mov [esi+0D4h] edi +
mov eax [esi+0B4h] +
and dword ptr [esi+88h] 0FFFFFFC0h +
and eax 0FFFFFFFBh +
or eax 3 +
push 8  +
mov [esi+0B4h] eax +
mov [esi+0B8h] edi +
call ds:GetSysColor  +
and dword ptr [esi+88h] 0FFFFFFBFh +
mov [esi+0BCh] eax +
mov eax [esi+0B4h] +
and eax 0FFFFFFAFh +
or eax 28h +
mov [esi+0D0h] edi +
mov [esi+0B4h] eax +
pop edi  +
mov dword ptr [esi+0C0h] 400h +
mov dword ptr [esi+84h] 0CDCDCDCDh +
mov dword ptr [esi+0CCh] 4 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax ecx +
push 8  +
lea ecx [ebp+String1] +
push ecx  +
push dword ptr [eax]  +
call ds:GetParent  +
push eax  +
call ds:GetClassNameW  +
push offset String2  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrcmpW  +
mov ecx [ebp+var_4] +
neg eax  +
sbb eax eax +
xor ecx ebp +
inc eax  +
call sub_1002492  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
xor ecx [eax+6Ch] +
and ecx 1 +
xor [eax+6Ch] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+0Ch]  +
mov ebx eax +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+4]  +
mov [edi] ebx +
jmp loc_1044974  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push ecx  +
push offset unk_10F5658  +
call sub_1048555  +
pop ebp  +
retn 4  +
***
call sub_100A4F0  +
xor edi edi +
mov [ebp-1Ch] edi +
mov ebx [ebp+0Ch] +
cmp [ebx+40h] di +
jnz loc_104864B  +
mov esi [ebp+8] +
lea eax [esi+34h] +
push eax  +
call ds:EnterCriticalSection  +
mov [ebp-4] edi +
cmp [ebx+40h] di +
jnz loc_104863F  +
mov esi [esi+4] +
mov [ebp-28h] esi +
mov eax [ebx+30h] +
cmp eax edi +
jz loc_106121A  +
mov ecx [ebx+28h] +
mov [ebp-20h] ecx +
mov ecx [ebx+8] +
mov [ebp-24h] ecx +
mov dword ptr [ebp-58h] 30h +
lea ecx [ebp-58h] +
push ecx  +
push eax  +
push edi  +
call sub_1048691  +
test eax eax +
jnz loc_10485DA  +
lea eax [ebp-58h] +
push eax  +
push dword ptr [ebx+30h]  +
push dword_10F565C  +
call sub_1048691  +
test eax eax +
jz loc_106120E  +
push 0Ch  +
pop ecx  +
lea esi [ebp-58h] +
mov edi ebx +
movs   +
mov eax [ebx+8] +
mov [ebx+34h] eax +
mov eax [ebp-20h] +
mov [ebx+28h] eax +
mov eax [ebp-24h] +
mov [ebx+8] eax +
mov esi [ebp-28h] +
mov [ebx+14h] esi +
and dword ptr [ebx+4] 0FFFFBFFFh +
cmp dword ptr [ebx+28h] 0 +
jz loc_1061237  +
push 0Ch  +
pop ecx  +
mov esi ebx +
lea edi [ebp-88h] +
movs   +
lea eax [ebp-88h] +
push eax  +
push dword ptr [ebx+28h]  +
push dword ptr [ebx+14h]  +
call sub_1048691  +
mov [ebx+40h] ax +
test ax ax +
jnz loc_104863F  +
push ebx  +
call sub_1048D91  +
mov [ebx+40h] ax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10483C3  +
cmp [ebp-1Ch] edi +
jnz loc_1061252  +
cmp [ebx+30h] edi +
jz loc_1048661  +
mov eax [ebx+34h] +
mov ecx [ebp+10h] +
mov [ecx] eax +
mov ax [ebx+40h] +
call sub_100A4DC  +
retn 0Ch  +
***
call sub_100A4F0  +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_10486BA  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_10486DE  +
mov [ebp-4] edi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:GetClassInfoExW  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1048709  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 0Ch  +
***
cmp dword_10F6C64 edi +
jnz locret_104873B  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jz loc_104873C  +
call ds:__imp_GetLastError  +
mov ebx eax +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jz locret_104873B  +
push ebx  +
call ds:SetLastError  +
retn   +
xor ebx ebx +
jmp loc_1048727  +
***
cmp [ebp+arg_4] 0 +
jnz loc_104876E  +
xor eax eax +
inc eax  +
jmp loc_104877B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_1048768  +
call sub_1048AD6  +
mov [esi] eax +
test eax eax +
jz loc_104877B  +
cmp [ebp+arg_0] 0 +
jz loc_1048740  +
push [ebp+arg_4]  +
mov ecx [esi] +
push [ebp+arg_0]  +
call sub_1048785  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov [ecx+4] eax +
mov eax [ebp+arg_0] +
sub eax ecx +
push 0Dh  +
sub eax 0Dh +
push ecx  +
mov dword ptr [ecx] 42444C7h +
mov byte ptr [ecx+8] 0E9h +
mov [ecx+9] eax +
call ds:GetCurrentProcess  +
push eax  +
call ds:FlushInstructionCache  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1048818  +
cmp dword ptr [eax+30h] 0 +
jz loc_10614D9  +
lea eax [esi+1Ch] +
push eax  +
call sub_1048818  +
mov ecx eax +
call sub_1048539  +
push [ebp+arg_18]  +
movzx eax ax +
push eax  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_10483A9  +
push eax  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1048E3D  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
xor eax eax +
inc eax  +
test byte ptr dword_10F5368 al +
jnz loc_1048862  +
and dword_10F5484 0 +
and dword_10F5488 0 +
or dword_10F5368 eax +
push edi  +
mov dword_10F548C eax +
xor eax eax +
push 6  +
pop ecx  +
mov dword_10F5480 offset aAtlaxwin +
mov word_10F5490 ax +
mov word_10F5492 ax +
mov edi offset unk_10F5494 +
stos   +
stos   +
pop edi  +
mov eax offset unk_10F5450 +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov ecx ds:DefWindowProcW +
mov [eax+1Ch] ecx +
mov dword ptr [eax] offset off_10488A0 +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_104887F  +
mov dword ptr [esi] offset off_104892C +
mov eax esi +
pop esi  +
retn   +
***
cmp dword_10F5384 0 +
push esi  +
jnz loc_1048AED  +
call sub_1048B11  +
test eax eax +
jz loc_1064F57  +
mov eax dword_10F5384 +
cmp eax 1 +
jz loc_1064F29  +
push eax  +
call dword_10F538C  +
test eax eax +
jz loc_1064F40  +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push edi  +
push offset LibFileName  +
call ds:LoadLibraryA  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_1064ED2  +
push esi  +
mov esi ds:__imp_GetProcAddress +
push offset aIsprocessorfea  +
push edi  +
call esi  +
cmp eax ebx +
jz loc_1048BA8  +
push 0Ch  +
call eax  +
cmp eax ebx +
jz loc_1064ED9  +
push offset aInterlockedpop  +
push edi  +
call esi  +
push offset aInterlockedpus  +
push edi  +
mov dword_10F538C eax +
call esi  +
push offset aInterlockedcom  +
push edi  +
mov dword_10F5388 eax +
call esi  +
mov dword_10F5390 eax +
cmp dword_10F5388 ebx +
jz loc_1048BAC  +
cmp dword_10F538C ebx +
jz loc_1048BAC  +
cmp eax ebx +
jz loc_1048BAC  +
mov eax large fs:18h +
mov esi [eax+30h] +
add esi 34h +
mov eax [esi] +
cmp eax ebx +
jz loc_1064EE6  +
mov dword_10F5384 eax +
xor eax eax +
inc eax  +
pop esi  +
pop edi  +
pop ebx  +
retn   +
xor eax eax +
jmp loc_1048B43  +
xor eax eax +
jmp loc_1048BA4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ?OnCreate@CView@@IAEHPAUtagCREATESTRUCTW@@@Z  +
cmp eax 0FFFFFFFFh +
jz loc_10621B5  +
cmp byte_10F52C5 0 +
jnz loc_1048C60  +
call sub_1048C95  +
mov byte_10F52C5 1 +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 0  +
push offset off_10F6CCC  +
push offset off_10F6C88  +
push 0  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
mov [esi+60h] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
push edi  +
push offset CriticalSection  +
call ds:EnterCriticalSection  +
mov esi ds:RegisterWindowMessageW +
push offset aWm_atlgethost  +
call esi  +
push offset aWm_atlgetcontr  +
mov Msg eax +
call esi  +
push 30h  +
pop edi  +
mov dword_10F52F0 eax +
lea eax [ebp+var_34] +
push eax  +
mov esi offset aAtlaxwin +
push esi  +
push dword_10F565C  +
mov [ebp+var_34] edi +
call sub_1048691  +
xor ebx ebx +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_1048D39  +
mov eax dword_10F565C +
push 7F00h  +
push ebx  +
mov [ebp+var_34] edi +
mov [ebp+var_30] ebx +
mov [ebp+var_2C] offset loc_104422E +
mov [ebp+var_28] ebx +
mov [ebp+var_24] ebx +
mov [ebp+var_20] eax +
mov [ebp+var_1C] ebx +
call ds:LoadCursorW  +
mov [ebp+var_18] eax +
lea eax [ebp+var_34] +
push eax  +
mov [ebp+var_14] 6 +
mov [ebp+var_10] ebx +
mov [ebp+var_C] esi +
mov [ebp+var_8] ebx +
call sub_1048D91  +
movzx eax ax +
mov [ebp+var_4] eax +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_100A4F0  +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_1048DBA  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_1048DDC  +
mov [ebp-4] edi +
push dword ptr [ebp+8]  +
call ds:RegisterClassExW  +
movzx eax ax +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1048E09  +
mov ax [ebp-1Ch] +
call sub_100A4DC  +
retn 4  +
***
cmp dword_10F6C64 edi +
jnz locret_1048E37  +
xor eax eax +
cmp [ebp-1Ch] di +
setz al  +
mov esi eax +
cmp esi edi +
jnz loc_10611A0  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jnz loc_10611AD  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
push 0  +
lea ecx [esi+14h] +
call sub_1048750  +
test eax eax +
jz loc_1061388  +
cmp [ebp+arg_18] 0 +
jz loc_1048EBE  +
push esi  +
lea eax [esi+8] +
push eax  +
push offset unk_10F5658  +
call sub_1048357  +
cmp [ebp+arg_14] 0 +
jnz loc_1048E81  +
test [ebp+arg_C] 40000000h +
jz loc_1048E81  +
mov [ebp+arg_14] esi +
push [ebp+arg_1C]  +
mov eax [ebp+arg_4] +
push dword_10F565C  +
mov ecx [eax+4] +
push [ebp+arg_14]  +
mov esi [eax+0Ch] +
push [ebp+arg_0]  +
mov edx [eax] +
mov eax [eax+8] +
sub esi ecx +
push esi  +
sub eax edx +
push eax  +
movzx eax [ebp+arg_18] +
push ecx  +
push edx  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_10]  +
call sub_1048EC7  +
pop esi  +
pop ebp  +
retn 20h  +
xor eax eax +
jmp loc_1048EB9  +
***
call sub_100A4F0  +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_1048EF0  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_1048F2F  +
mov [ebp-4] edi +
push dword ptr [ebp+34h]  +
push dword ptr [ebp+30h]  +
push dword ptr [ebp+2Ch]  +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:CreateWindowExW  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1048F59  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 30h  +
***
cmp dword_10F6C64 edi +
jnz locret_1048F86  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jnz loc_10611C7  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jnz loc_10611D4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
or dword ptr [esi+20h] 2000000h +
push edi  +
push esi  +
call ?PreCreateWindow@CView@@MAEHAAUtagCREATESTRUCTW@@@Z  +
cmp byte_10F52C4 0 +
mov edi ds:off_1049000 +
mov ebx eax +
jnz loc_1048FF4  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
lea ecx [ebp+WndClass] +
push ecx  +
push dword ptr [esi+28h]  +
push eax  +
call ds:GetClassInfoW  +
test eax eax +
jz loc_1048FEB  +
and [ebp+WndClass.style] 0FFFFFFFCh +
lea eax [ebp+WndClass] +
push eax  +
mov [ebp+WndClass.lpszClassName] edi +
call ?AfxRegisterClass@@YGHPAUtagWNDCLASSW@@@Z  +
test eax eax +
setnz byte_10F52C4  +
cmp byte_10F52C4 0 +
jz loc_1048FF7  +
mov [esi+28h] edi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
call sub_1001F95  +
mov esi [ebp+0Ch] +
test esi esi +
jz loc_1061204  +
and dword ptr [esi] 0 +
and dword ptr [ebp+0Ch] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ecx]  +
call sub_104908C  +
mov edi [ebp+0Ch] +
mov [ebp-10h] eax +
test eax eax +
jl loc_104906E  +
mov eax [edi] +
push esi  +
push dword ptr [ebp+8]  +
push edi  +
call dword ptr [eax]  +
mov [ebp-10h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test edi edi +
jz loc_104907C  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax [ebp-10h] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1061185  +
push 0  +
push 0  +
push Msg  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
mov [esi] eax +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-18h] ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-28h] +
mov [ebp-14h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCocxhostview_1  +
lea ecx [ebp-28h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 20h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax ebx +
jz loc_10491C9  +
mov ecx eax +
call sub_1048911  +
mov edi [ebp+0Ch] +
mov [edi] eax +
cmp eax ebx +
jz loc_1061E5E  +
mov ecx [ebp-18h] +
push ebx  +
push ebx  +
push ebx  +
push 56000000h  +
push offset word_100A5FC  +
push offset unk_10F5720  +
push dword ptr [ecx+20h]  +
mov ecx eax +
call sub_10487C1  +
cmp eax ebx +
jz loc_1061E7E  +
mov [ebp-10h] ebx +
mov ecx [edi] +
lea eax [ebp-10h] +
push eax  +
push offset dword_1046E50  +
add ecx 4 +
mov byte ptr [ebp-4] 2 +
call sub_104902B  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1061E96  +
mov eax [ebp-10h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+1Ch]  +
push dword ptr [ebp-10h]  +
mov ecx [ebp-18h] +
call sub_1049213  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-10h] +
mov [ebp-14h] esi +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_10491B2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-28h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
xor eax eax +
jmp loc_1049113  +
***
call sub_100C4D0  +
mov esi [ebp+8] +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-84h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCocxhostviewSe  +
lea ecx [ebp-84h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-70h] ebx +
mov byte ptr [ebp-4] 1 +
cmp esi ebx +
jz loc_10612F2  +
push ebx  +
lea eax [ebp-6Ch] +
push eax  +
push 5Ch  +
push 1Fh  +
call ds:SystemParametersInfoW  +
call ds:GetDesktopWindow  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push eax  +
lea ecx [ebp-0B8h] +
call ??0CWindowDC@@QAE@PAVCWnd@@@Z  +
push 5Ah  +
push dword ptr [ebp-0B0h]  +
call ds:GetDeviceCaps  +
mov ecx eax +
mov eax [ebp-6Ch] +
cmp eax ebx +
jge loc_1049299  +
neg eax  +
lea edx [ebp-50h] +
imul eax eax +
mov [ebp-0A0h] edx +
mov dx [ebp-5Ch] +
mov [ebp-94h] dx +
movzx dx byte ptr [ebp-55h] +
mov [ebp-92h] dx +
movzx edx byte ptr [ebp-58h] +
mov [ebp-90h] edx +
movzx edx byte ptr [ebp-57h] +
mov [ebp-8Ch] edx +
movzx edx byte ptr [ebp-56h] +
mov [ebp-88h] edx +
cdq   +
idiv  ecx +
mov dword ptr [ebp-0A4h] 20h +
mov [ebp-98h] ebx +
mov [ebp-74h] ebx +
mov [ebp-9Ch] eax +
lea eax [ebp-74h] +
push eax  +
push offset stru_10493C4  +
lea eax [ebp-0A4h] +
push eax  +
mov byte ptr [ebp-4] 4 +
call OleCreateFontIndirect  +
push eax  +
lea ecx [ebp-84h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-84h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1049339  +
push dword ptr [ebp-74h]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4Ch]  +
mov eax [ebp-74h] +
mov byte ptr [ebp-4] 3 +
cmp eax ebx +
jz loc_104934A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-0B8h] +
mov byte ptr [ebp-4] 1 +
call ??1CWindowDC@@UAE@XZ  +
mov eax [ebp-70h] +
mov [ebp-4] bl +
cmp eax ebx +
jnz loc_106137D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-84h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_100C50D  +
retn 4  +
***
test al al +
jnz loc_1049359  +
jmp loc_1049259  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push offset unk_10F5658  +
call sub_104942A  +
mov ebx [ebp+8] +
mov esi eax +
mov eax [esi] +
mov ecx esi +
mov [esi+4] ebx +
call dword ptr [eax+4]  +
push esi  +
lea edi [esi+14h] +
push eax  +
mov ecx edi +
call sub_1048750  +
mov edi [edi] +
push edi  +
push 0FFFFFFFCh  +
push ebx  +
call ds:SetWindowLongW  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea ebx [edi+34h] +
push ebx  +
call ds:EnterCriticalSection  +
mov esi [edi+68h] +
test esi esi +
jz loc_1049467  +
call ds:GetCurrentThreadId  +
xor ecx ecx +
cmp [esi+4] eax +
jnz loc_1049478  +
mov eax [esi+8] +
test ecx ecx +
jnz loc_1049483  +
mov [edi+68h] eax +
mov eax [esi] +
mov [ebp+var_4] eax +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov ecx esi +
mov esi [esi+8] +
test esi esi +
jz loc_1049467  +
jmp loc_1049453  +
mov [ecx+8] eax +
jmp loc_1049462  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi [ebp+arg_0] +
lea eax [esi+7Ch] +
push eax  +
call sub_100CA9D  +
push 0FFFFFD41h  +
lea ecx [esi-48h] +
call sub_10494BB  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
push dword ptr [ecx+50h]  +
lea ecx [ebp-10h] +
xor esi esi +
call sub_10494FD  +
mov eax [ebp-10h] +
and [ebp-4] esi +
test eax eax +
jnz loc_1061775  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jnz loc_1061788  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jnz loc_10615C9  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+hWnd]  +
mov esi ecx +
call sub_1049549  +
lea ecx [esi+0B4h] +
shl eax 4 +
xor eax [ecx] +
pop esi  +
and eax 10h +
xor [ecx] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
call dword ptr [eax+4]  +
push esi  +
lea edi [esi+14h] +
push eax  +
mov ecx edi +
call sub_1048750  +
test eax eax +
jz loc_1049588  +
push dword ptr [edi]  +
mov edi [ebp+hWnd] +
push 0FFFFFFFCh  +
push edi  +
call ds:SetWindowLongW  +
test eax eax +
jz loc_1049588  +
mov [esi+1Ch] eax +
xor eax eax +
mov [esi+4] edi +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1049582  +
***
call sub_100A60E  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jz loc_1061E34  +
push 0DCh  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_1049600  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1049609  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
test esi esi +
jz loc_10495F5  +
push dword ptr [ebp+10h]  +
lea eax [esi+20h] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
mov [ebp-14h] eax +
test eax eax +
jnz loc_1061E50  +
mov eax [ebp-14h] +
call sub_1001FCF  +
retn 0Ch  +
xor eax eax +
jmp loc_10495D2  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_104966A  +
mov dword ptr [esi] offset off_1044460 +
mov dword ptr [esi+20h] offset off_10447F4 +
mov dword ptr [esi+24h] offset off_104464C +
mov dword ptr [esi+28h] offset off_10445BC +
mov dword ptr [esi+2Ch] offset off_104457C +
mov dword ptr [esi+30h] offset off_1044C30 +
mov dword ptr [esi+34h] offset off_1044C04 +
mov dword ptr [esi+3Ch] offset off_1044BDC +
mov dword ptr [esi+40h] offset off_1008664 +
mov dword ptr [esi+44h] offset off_1044B7C +
mov dword ptr [esi+48h] offset off_104472C +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10483D8  +
mov dword ptr [esi] offset off_1049918 +
mov dword ptr [esi+20h] offset off_10498F0 +
mov dword ptr [esi+24h] offset off_10498C8 +
mov dword ptr [esi+28h] offset off_104984C +
mov dword ptr [esi+2Ch] offset off_104981C +
mov dword ptr [esi+30h] offset off_1049800 +
mov dword ptr [esi+34h] offset off_10497E8 +
mov dword ptr [esi+3Ch] offset off_10497D4 +
mov dword ptr [esi+40h] offset off_10497B0 +
mov dword ptr [esi+44h] offset off_1049764 +
mov dword ptr [esi+48h] offset off_10496D4 +
and dword ptr [esi+0D8h] 0 +
mov eax esi +
pop esi  +
retn   +
***
push 4  +
mov eax offset dword_10E0D20 +
call sub_1001F95  +
push 70h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1049968  +
call sub_1049973  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call near ptr dword_1030A58+3  +
and dword ptr [ebp-4] 0 +
lea edi [esi+48h] +
mov ecx edi +
mov dword ptr [esi+44h] offset off_1030440 +
call sub_10499D1  +
and dword ptr [esi+60h] 0 +
mov dword ptr [esi] offset off_1004BD4 +
mov dword ptr [esi+44h] offset off_1044688 +
mov dword ptr [edi] offset off_100C448 +
and dword ptr [esi+64h] 0 +
and dword ptr [esi+6Ch] 0 +
mov dword ptr [esi+68h] offset off_10083D0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10499F9  +
mov dword ptr [esi] offset off_10499EC +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1049A21  +
mov dword ptr [esi] offset off_1049A14 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_100C428 +
call sub_1031205  +
and dword ptr [esi+10h] 0 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp+0Ch] esi +
push dword ptr [ebp+10h]  +
push esi  +
call sub_1049A6D  +
jmp loc_1044D1F  +
***
call sub_100C4D0  +
mov esi ecx +
xor ebx ebx +
push ebx  +
call ds:OleInitialize  +
push dword ptr [esi+4]  +
call ds:GetWindowTextLengthW  +
mov edi eax +
lea eax [edi+edi+2] +
call sub_1027CCC  +
mov [ebp-1Ch] esp +
inc edi  +
push edi  +
push dword ptr [ebp-1Ch]  +
push dword ptr [esi+4]  +
call ds:GetWindowTextW  +
push offset word_100A5FC  +
push dword ptr [esi+4]  +
call ds:SetWindowTextW  +
mov [ebp-20h] ebx +
mov [ebp-14h] ebx +
mov ebx [ebp+10h] +
test ebx ebx +
jz loc_1049ACE  +
mov eax [ebx] +
test eax eax +
jnz loc_1062105  +
push dword ptr [ebp-14h]  +
push 42h  +
call ds:GlobalAlloc  +
xor ecx ecx +
mov edi eax +
mov [ebp-18h] ecx +
mov [ebp-4] ecx +
cmp edi ecx +
jz loc_1049AF0  +
cmp [ebp-14h] ecx +
jnz loc_1062110  +
mov [ebp-14h] ecx +
mov eax [esi+4] +
push ecx  +
push offset dword_100CA88  +
push ecx  +
lea ecx [ebp-14h] +
push ecx  +
push dword ptr [ebp-18h]  +
mov byte ptr [ebp-4] 1 +
push eax  +
push dword ptr [ebp-1Ch]  +
call sub_1049B87  +
test eax eax +
jl loc_1062143  +
mov edi [ebp-14h] +
mov eax [edi] +
lea ecx [ebp-20h] +
push ecx  +
push offset dword_1049C64  +
push edi  +
call dword ptr [eax]  +
test eax eax +
jl loc_106216D  +
push dword ptr [ebp-20h]  +
push 0FFFFFFEBh  +
push dword ptr [esi+4]  +
call ds:SetWindowLongW  +
push 5  +
push dword ptr [esi+4]  +
call ds:GetWindow  +
test eax eax +
jnz loc_1062179  +
mov eax [ebp+14h] +
mov dword ptr [eax] 1 +
mov eax [edi] +
push edi  +
mov byte ptr [ebp-4] 0 +
call dword ptr [eax+8]  +
mov eax [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jnz loc_10621AA  +
xor eax eax +
lea esp [ebp-30h] +
call sub_100C50D  +
retn 10h  +
***
call sub_1001F95  +
call sub_1048C95  +
xor ebx ebx +
mov [ebp-10h] ebx +
mov [ebp-4] ebx +
mov [ebp-14h] ebx +
lea eax [ebp-10h] +
push eax  +
push offset dword_1048258  +
push ebx  +
mov byte ptr [ebp-4] 1 +
call sub_1049591  +
mov esi eax +
cmp esi ebx +
jl loc_1049C1B  +
mov [ebp-18h] ebx +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push offset dword_1049C64  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx]  +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
call sub_101DD5D  +
push dword ptr [ebp+20h]  +
mov eax [ebp-18h] +
push dword ptr [ebp+1Ch]  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push dword ptr [ebp+10h]  +
mov byte ptr [ebp-4] 3 +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+10h]  +
push dword ptr [ebp+8]  +
mov esi eax +
call SysFreeString  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1049C1B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+14h] +
cmp eax ebx +
jz loc_1049C2E  +
cmp esi ebx +
jl loc_1049C60  +
mov ecx [ebp-10h] +
mov [eax] ecx +
mov [ebp-10h] ebx +
mov eax [ebp+18h] +
cmp eax ebx +
jnz loc_10620D7  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jnz loc_10620EF  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jnz loc_10620FA  +
mov eax esi +
call sub_1001FCF  +
retn 1Ch  +
mov [eax] ebx +
jmp loc_1049C2E  +
***
push eax  +
push dword ptr [esi+3Ch]  +
mov ecx ebx +
call sub_1049C89  +
jmp loc_1027773  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push edi  +
mov edx ecx +
push 0Ah  +
xor eax eax +
pop ecx  +
lea edi [ebp+lParam] +
stos   +
mov eax [ebp+arg_0] +
mov [ebp+var_24] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_8] eax +
lea eax [ebp+lParam] +
push eax  +
mov ecx edx +
mov [ebp+lParam] 50h +
call sub_1022D4F  +
pop edi  +
leave   +
retn 8  +
***
mov [ebp-14h] ebx +
jmp loc_10467FA  +
test eax eax +
jz loc_104683C  +
jmp loc_10276C2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
or dword ptr [esi+60h] 1 +
push edi  +
push 0  +
push 1  +
push dword ptr [esi+2Ch]  +
call ds:OleLockRunning  +
test [ebp+arg_8] 1 +
jnz loc_106179D  +
mov eax [esi+2Ch] +
and dword ptr [esi+60h] 0FFFFFFF7h +
mov ecx [eax] +
lea edi [esi+3Ch] +
push edi  +
push offset dword_10478B8  +
push eax  +
call dword ptr [ecx]  +
mov edi [edi] +
test edi edi +
jz loc_1049D26  +
mov ecx [edi] +
lea eax [esi+7Ch] +
push eax  +
push eax  +
push edi  +
call dword ptr [ecx+1Ch]  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
test eax eax +
jl loc_1049D00  +
jmp loc_1049D15  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [esi-20h] +
mov ecx edi +
mov [ebp+var_4] 1 +
call sub_1044C61  +
push [ebp+hWnd]  +
call ds:IsWindow  +
test eax eax +
jz loc_1061D28  +
mov eax [esi-1Ch] +
mov ebx ds:RedrawWindow +
test eax eax +
jz loc_1049D7D  +
cmp eax [ebp+hWnd] +
jnz loc_1061D30  +
mov eax [ebp+hWnd] +
test eax eax +
jz loc_1049DA6  +
cmp [esi-1Ch] eax +
jnz loc_1061D48  +
push 0  +
push 1  +
push [ebp+arg_4]  +
mov ecx edi +
call sub_10472B0  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1061D55  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
push offset loc_1047184  +
call sub_104902B  +
test eax eax +
jl loc_106227A  +
push dword ptr [esi]  +
mov eax [ebp-10h] +
push dword ptr [ebp+8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
test esi esi +
jl loc_1062289  +
mov ecx [ebp+0Ch] +
test ecx ecx +
jz loc_1049E0B  +
mov eax [ebp-10h] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1049E1C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
call sub_1001FCF  +
retn 8  +
***
mov eax 800Ah +
jmp loc_104A1E8  +
***
push 7  +
jmp loc_104A274  +
push 0Bh  +
jmp loc_104A274  +
push 8  +
jmp loc_104A274  +
push 12h  +
jmp loc_104A274  +
push 0Dh  +
jmp loc_104A274  +
push 0Ch  +
jmp loc_104A274  +
push 5  +
jmp loc_104A274  +
push 10h  +
jmp loc_104A274  +
***
mov eax 347Fh +
jmp loc_104A66C  +
mov eax 3480h +
jmp loc_104A66C  +
mov eax 3481h +
jmp loc_104A66C  +
mov eax 3482h +
jmp loc_104A66C  +
mov eax 3484h +
jmp loc_104A66C  +
mov eax 3485h +
jmp loc_104A66C  +
mov eax 347Ah +
jmp loc_104A66C  +
mov eax 347Bh +
jmp loc_104A66C  +
mov eax 347Ch +
jmp loc_104A66C  +
***
mov eax 348Bh +
jmp loc_104A70D  +
mov eax 348Ch +
jmp loc_104A70D  +
mov eax 348Dh +
jmp loc_104A70D  +
mov eax 348Eh +
jmp loc_104A70D  +
mov eax 3490h +
jmp loc_104A70D  +
mov eax 3491h +
jmp loc_104A70D  +
mov eax 3486h +
jmp loc_104A70D  +
mov eax 3487h +
jmp loc_104A70D  +
mov eax 3488h +
jmp loc_104A70D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 54h +
pop ebp  +
jmp loc_1049F4F  +
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call sub_1041D22  +
pop ebp  +
retn 4  +
***
push 2  +
pop ecx  +
jmp loc_1049FD4  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionpanez_6  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx ds:?ToHr@SC@mmcerror@@QBEJXZ +
cmp dword_10FC29C edi +
jbe loc_104A000  +
mov eax dword_10FC28C[edi*4] +
test [ebp+8] eax +
push eax  +
setnz cl  +
mov [ebp-10h] cl +
mov ecx esi +
call sub_104A1C5  +
xor ecx ecx +
cmp eax 800Ah +
jz loc_1049F65  +
cmp eax 800Dh +
jz loc_104A074  +
push ecx  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push eax  +
call sub_1046653  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ebx  +
test eax eax +
jl loc_1069388  +
inc edi  +
cmp edi dword_10FC29C +
jb loc_1049FA8  +
mov ecx [esi+3Ch] +
call sub_1024917  +
lea ecx [ebp-20h] +
call ebx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
cmp [esi+4Ch] ecx +
jle loc_1049FD4  +
jmp loc_1049F65  +
***
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call ??0CString@@QAE@XZ  +
push dword ptr [ebp+8]  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
mov [ebp-20h] esi +
call sub_104A258  +
mov [ebp-1Ch] eax +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_104A647  +
mov esi 8000FFFFh +
test eax eax +
jz loc_106921B  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_104A6E5  +
test eax eax +
jz loc_1069266  +
cmp dword ptr [ebp-1Ch] 0FFFFFFFFh +
jle loc_104A1AD  +
push esi  +
push dword ptr [edi+44h]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ebx  +
test eax eax +
jl loc_10692A3  +
push dword ptr [ebp-1Ch]  +
mov ecx [edi+44h] +
call sub_1049F3F  +
mov esi eax +
push 78h  +
call sub_100ABF0  +
mov [ebp-20h] eax +
mov byte ptr [ebp-4] 4 +
test eax eax +
jz loc_104A1B5  +
mov ecx eax +
call sub_1024921  +
mov byte ptr [ebp-4] 2 +
mov [ebp-18h] eax +
test eax eax +
jz loc_10692C9  +
push dword ptr [ebp+8]  +
mov ecx edi +
push 0  +
push 0  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
push esi  +
call sub_10247C9  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp-18h] +
test al al +
jnz loc_1069318  +
push dword ptr [ebp+0Ch]  +
call sub_104671F  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
jmp loc_10466B4  +
mov esi [ebp-20h] +
jmp loc_104A127  +
xor eax eax +
jmp loc_104A140  +
***
mov eax 800Bh +
jmp loc_104A1E8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
or eax 0FFFFFFFFh +
dec ecx  +
jz loc_1049E26  +
dec ecx  +
jz loc_104A1B9  +
dec ecx  +
dec ecx  +
jz loc_104A1EC  +
sub ecx 4 +
jnz loc_104A1E8  +
mov eax 800Dh +
pop ebp  +
retn 4  +
mov eax 800Ch +
jmp loc_104A1E8  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_104A24E  +
cmp byte ptr [eax+19h] 5 +
jb loc_104A24E  +
push ecx  +
push offset unk_106DA54  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_104A24E  +
***
or eax 0FFFFFFFFh +
jmp loc_104A275  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ecx-8001h] +
cmp eax 0Ch +
ja loc_104A1F3  +
jmp ds:off_104A21A[eax*4]  +
push 0Fh  +
pop eax  +
pop ebp  +
retn 4  +
push 6  +
jmp loc_104A274  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCocxhostview_0  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+18h]  +
lea eax [ebp-40h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100CB6E  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10622A1  +
and dword ptr [ebp-14h] 0 +
lea eax [ebp-40h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 3 +
call sub_1046F5D  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104A5D1  +
mov eax [ebp+18h] +
mov eax [eax] +
lea ecx [edi+64h] +
mov [ebp-1Ch] eax +
mov [ebp-20h] ecx +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp+10h]  +
mov eax [ebp-1Ch] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+18h]  +
call dword ptr [eax+2Ch]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104A5D1  +
mov eax [ebp-20h] +
mov eax [eax] +
xor ecx ecx +
cmp eax ecx +
jnz loc_104A51C  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-40h] +
mov [ebp-1Ch] ecx +
push eax  +
mov ecx edi +
call sub_10490CA  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104A5D1  +
and dword ptr [ebp-18h] 0 +
mov edi [ebp-1Ch] +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+10h]  +
lea ecx [edi+4] +
mov byte ptr [ebp-4] 6 +
call sub_1049DB5  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10622C2  +
and dword ptr [ebp-1Ch] 0 +
lea eax [ebp-1Ch] +
push eax  +
call sub_104817D  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10622C2  +
push dword ptr [ebp+10h]  +
lea eax [ebp-14h] +
push eax  +
call sub_100CA9D  +
push dword ptr [ebp-14h]  +
mov ecx [ebp-1Ch] +
push edi  +
lea eax [ebp-40h] +
push eax  +
call sub_10478FB  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 6 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10622EC  +
mov esi [ebp-20h] +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call sub_10479E5  +
test byte ptr [ebp+14h] 2 +
jz loc_104A49B  +
mov eax [esi] +
mov ecx [ebp+18h] +
mov edx [ecx] +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push ecx  +
call dword ptr [edx+34h]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10622EC  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_104A4AC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov edi [ebp-14h] +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-4] bl +
mov [ebp-10h] ebx +
test edi edi +
jz loc_104A4CC  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
push ecx  +
push offset off_10F962C  +
push offset off_10F788C  +
push ecx  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
test eax eax +
jz loc_1062315  +
lea ecx [ebp-14h] +
push ecx  +
lea ecx [ebp-40h] +
push ecx  +
mov ecx eax +
call sub_1047D99  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1062325  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+110h]  +
mov [ebp+10h] eax +
test eax eax +
jz loc_1062337  +
mov edi [ebp-14h] +
push 80070057h  +
push edi  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 9 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104A4AF  +
mov eax [ebp+10h] +
push ebx  +
push dword ptr [eax+4]  +
call ds:ShowWindow  +
jmp loc_104A4AF  +
lea eax [ebp-30h] +
jmp loc_10622B6  +
***
push eax  +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
call ?Left@CString@@QBE?AV1@H@Z  +
and dword ptr [ebp-4] 0 +
push eax  +
mov ecx esi +
call ??4CString@@QAEABV0@ABV0@@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call ??1CString@@QAE@XZ  +
jmp loc_104A68F  +
***
mov eax 3483h +
jmp loc_104A66C  +
mov eax [ebp+8] +
jmp loc_104A66C  +
***
call sub_1001F95  +
mov eax [ebp+8] +
add eax 0FFFF7FFFh +
cmp eax 0Ch +
ja loc_104A63D  +
jmp ds:off_104A602[eax*4]  +
mov eax 347Dh +
mov esi [ebp+0Ch] +
push eax  +
mov ecx esi +
xor edi edi +
call ?LoadStringW@CString@@QAEHI@Z  +
test eax eax +
jz loc_104A68F  +
push 0Ah  +
mov ecx esi +
inc edi  +
call ?Find@CString@@QBEHG@Z  +
test eax eax +
jg loc_104A5D9  +
mov eax edi +
call sub_1001FCF  +
retn 8  +
mov eax 347Eh +
jmp loc_104A66C  +
***
mov eax 348Fh +
jmp loc_104A70D  +
mov eax [ebp+arg_0] +
jmp loc_104A70D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax 0FFFF7FFFh +
cmp eax 0Ch +
ja loc_104A6DB  +
jmp ds:off_104A6A0[eax*4]  +
mov eax [ecx+4Ch] +
neg eax  +
sbb eax eax +
and eax 9 +
add eax 3489h +
mov ecx [ebp+arg_4] +
push esi  +
push eax  +
xor esi esi +
call ?LoadStringW@CString@@QAEHI@Z  +
test eax eax +
jz loc_104A71E  +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
mov eax 348Ah +
jmp loc_104A70D  +
***
mov edi [ebp+18h] +
push dword ptr [ebp+24h]  +
mov ecx edi +
call sub_104A750  +
push dword ptr [ebp+24h]  +
lea ecx [ebx+20h] +
call ??ACMapWordToPtr@@QAEAAPAXG@Z  +
mov [eax] edi +
jmp loc_10248B9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+6Ch] eax +
pop ebp  +
retn 4  +
***
xor ecx ecx +
cmp [ebp-14h] ecx +
jz loc_104A7AF  +
cmp dword_10F55CC ecx +
mov [ebp-0Dh] cl +
setnz al  +
test al al +
jz loc_1059166  +
push 6  +
pop edi  +
dec edi  +
dec edi  +
jz loc_104A7B8  +
sub edi 4 +
jnz loc_1051182  +
mov eax [esi] +
and dword ptr [esi+128h] 0FFFFFFFEh +
mov ecx esi +
call dword ptr [eax+0A4h]  +
test eax eax +
jz loc_10591C0  +
or dword ptr [esi+128h] 1 +
jmp loc_1051182  +
cmp edi ecx +
jnz loc_104A766  +
jmp loc_1051182  +
xor eax eax +
jmp loc_105119B  +
***
call sub_1001F95  +
mov esi ecx +
push dword ptr [esi+24h]  +
call ds:GetFileAttributesW  +
cmp dword_10F55CC 0 +
jz loc_105927A  +
mov eax [esi+24h] +
mov edx [esi] +
push 1  +
push eax  +
mov ecx esi +
call dword ptr [edx+0A0h]  +
test eax eax +
jz loc_105930D  +
xor eax eax +
inc eax  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
call ??0CString@@QAE@PBG@Z  +
mov eax [ebp+8] +
xor ebx ebx +
mov [ebp-4] ebx +
cmp [eax-8] ebx +
jz loc_1059695  +
lea ecx [ebp+0Fh] +
call sub_102BBF1  +
push dword ptr [ebp+8]  +
mov eax [esi] +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call dword ptr [eax+80h]  +
test eax eax +
jz loc_105975A  +
cmp [ebp+0Ch] ebx +
jz loc_104A871  +
mov ecx esi +
call sub_105175C  +
mov eax [esi] +
push 1  +
push dword ptr [ebp+8]  +
mov ecx esi +
call dword ptr [eax+5Ch]  +
xor esi esi +
inc esi  +
lea ecx [ebp+0Fh] +
mov [ebp-4] bl +
call sub_1020056  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call ??1CString@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
call sub_100C4D0  +
mov edi [ebp+8] +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-54h] +
mov [ebp-3Ch] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcdocOnsaved  +
lea ecx [ebp-54h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov dword ptr [esi+124h] 1 +
cmp edi ebx +
jz loc_104AF26  +
cmp [edi] bx +
jz loc_104AF26  +
lea eax [ebp-38h] +
push eax  +
mov ecx esi +
call sub_102B490  +
cmp [ebp-38h] ebx +
jnz loc_104AEDC  +
cmp dword ptr [esi+108h] 30000h +
jnz loc_1059AA4  +
push 2  +
pop edi  +
mov ecx esi +
call sub_104AE6A  +
cmp eax 1 +
jg loc_1059BA5  +
lea ecx [ebp-44h] +
call sub_101DD84  +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea ecx [esi+64h] +
mov byte ptr [ebp-4] 5 +
call sub_104B40D  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 6 +
call edi  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-54h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1059BE3  +
cmp dword_10F55CC ebx +
lea ecx [esi+84h] +
setz al  +
mov [ebp-34h] al +
lea eax [ebp-44h] +
push eax  +
push dword ptr [ebp-34h]  +
lea eax [ebp-20h] +
push dword ptr [ebp-3Ch]  +
push eax  +
call sub_104AA41  +
push eax  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 7 +
call edi  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-54h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1059BE3  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+64h]  +
mov eax [esi] +
mov ecx esi +
mov [esi+123h] bl +
call dword ptr [eax+60h]  +
test eax eax +
jnz loc_1059C08  +
push dword ptr [ebp-3Ch]  +
mov [esi+122h] bl +
mov dword ptr [esi+108h] 30000h +
call sub_104E976  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call sub_101D546  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-54h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
inc eax  +
call sub_100C50D  +
retn 4  +
***
call sub_101D46C  +
mov [ebp-58h] ecx +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
xor ebx ebx +
mov [ebp-48h] ebx +
mov [ebp-34h] eax +
mov eax [ebp+14h] +
mov [ebp-54h] eax +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-3Ch] ebx +
mov [ebp-38h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-44h] 3 +
mov [ebp-40h] ebx +
push offset aCconsolefile_6  +
lea ecx [ebp-44h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push edi  +
lea eax [ebp-68h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-40h] ebx +
jnz loc_1067B53  +
cmp [ebp+10h] bl +
jnz loc_104AAD9  +
mov eax [ebp-58h] +
cmp [eax+1Ch] bl +
jz loc_1067B84  +
push edi  +
lea ecx [ebp-30h] +
call sub_101D1AD  +
push dword ptr [ebp-54h]  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 3 +
call sub_102BDFD  +
mov byte ptr [ebp-4] 4 +
cmp [ebp+10h] bl +
jnz loc_104AC33  +
lea eax [ebp-30h] +
push eax  +
push edi  +
lea eax [ebp-68h] +
push eax  +
call sub_102ECA1  +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-40h] ebx +
jnz loc_1067BA1  +
lea eax [ebp-50h] +
push eax  +
push edi  +
lea eax [ebp-68h] +
push eax  +
call sub_104BEB9  +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-40h] ebx +
jnz loc_1067BB9  +
lea eax [ebp-54h] +
push eax  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 7 +
call sub_102C3AF  +
lea eax [ebp-54h] +
push eax  +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 8 +
call sub_101ED6F  +
push eax  +
lea eax [ebp-50h] +
push eax  +
lea ecx [ebp-88h] +
mov byte ptr [ebp-4] 9 +
call sub_102C353  +
mov eax [ebp-70h] +
mov byte ptr [ebp-4] 0Bh +
cmp eax ebx +
jz loc_104AB9F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-54h] +
mov byte ptr [ebp-4] 0Ch +
cmp eax ebx +
jz loc_104ABB0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push ebx  +
push ds:off_102D8E0  +
lea eax [ebp-88h] +
push eax  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-7Ch] 1 +
call sub_101ECB0  +
push ebx  +
push ds:off_102BAC8  +
lea eax [ebp-6Ch] +
push eax  +
lea ecx [ebp-9Ch] +
mov byte ptr [ebp-4] 0Dh +
mov [ebp-60h] bl +
call sub_101ECB0  +
push ecx  +
push ecx  +
mov ecx [ebp-58h] +
mov eax esp +
mov [eax+4] ecx +
lea ecx [ebp-9Ch] +
mov byte ptr [ebp-4] 0Eh +
mov [ebp-74h] esp +
mov dword ptr [eax] 0Bh +
call sub_102F021  +
lea ecx [ebp-9Ch] +
mov byte ptr [ebp-4] 0Dh +
call sub_101EB25  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 0Ch +
call sub_101EB25  +
lea ecx [ebp-88h] +
mov byte ptr [ebp-4] 7 +
call sub_101EB25  +
cmp dword ptr [ebp-18h] 8 +
mov eax [ebp-2Ch] +
mov dword ptr [ebp-4] 4 +
jb loc_1067BD1  +
push eax  +
lea eax [ebp-68h] +
push eax  +
lea ecx [ebp-50h] +
call sub_104AD17  +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 11h +
call esi  +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-40h] ebx +
jnz loc_1067BD9  +
mov ecx [ebp-34h] +
lea eax [ebp-44h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
xor esi esi +
inc esi  +
lea ecx [ebp-50h] +
mov [ebp-48h] esi +
mov byte ptr [ebp-4] 3 +
call sub_101D546  +
push ebx  +
push esi  +
lea ecx [ebp-30h] +
call sub_100CD3C  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-34h] +
call sub_101D44D  +
retn 10h  +
***
cmp al bl +
jz loc_104AB2C  +
jmp loc_104AC74  +
cmp al bl +
jnz loc_104AC74  +
jmp loc_104AB5A  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] ebx +
push offset aCxmldocument_2  +
lea ecx [ebp-20h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] ebx +
jnz loc_1066EF6  +
mov eax [edi] +
push 80004002h  +
push eax  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] ebx +
jnz loc_1066F27  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-30h] +
call sub_104D719  +
mov eax [edi] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp-30h] +
movs   +
movs   +
movs   +
push eax  +
mov byte ptr [ebp-4] 4 +
movs   +
call dword ptr [ecx+108h]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1066F4D  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov dword ptr [ebp-10h] 1 +
call sub_100EBF1  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
xor edi edi +
call sub_102B490  +
cmp [ebp+var_4] edi +
jz loc_104AEA5  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_102B4EB  +
test eax eax +
jz loc_104AE9F  +
mov ecx eax +
call sub_100EC0C  +
test al al +
jz loc_104AE9F  +
inc edi  +
cmp [ebp+var_4] 0 +
jnz loc_104AE84  +
movzx eax di +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov ecx [ebp-10h] +
lea eax [ebp-80h] +
push eax  +
call ?GetWindowPlacement@CWnd@@QBEHPAUtagWINDOWPLACEMENT@@@Z  +
test eax eax +
jz loc_10597BA  +
cmp dword ptr [ebp-78h] 2 +
jnz loc_101FA6E  +
jmp loc_10597CD  +
test eax eax +
jz loc_101FAFE  +
jmp loc_101FB0A  +
***
lea eax [ebp-38h] +
push eax  +
mov ecx esi +
call sub_102B4EB  +
push 8000FFFFh  +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-54h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_104A8F1  +
jmp loc_1059AF8  +
call sub_10781F8  +
jmp loc_1059C39  +
***
cmp dword ptr [esi+4] 0FFFFFFFFh +
jnz sub_101E906  +
jmp loc_1059DCF  +
***
cmp [esi+10h] ebx +
setnbe al  +
jmp loc_101E93E  +
***
cmp dword ptr [ebp-24h] 9 +
setle dl  +
jmp loc_101E4F6  +
***
inc dword ptr [ebp-24h]  +
jmp loc_101E4E5  +
***
mov byte ptr [ebx+1D5h] 0 +
mov byte ptr [ebx+264h] 0 +
jmp loc_101F958  +
***
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_101F958  +
***
mov eax ds:off_102BAEC +
retn   +
***
mov esi [eax] +
test esi esi +
jz loc_102BFBD  +
jmp loc_105F385  +
***
mov ecx [ecx+4] +
jmp loc_102C82C  +
***
mov eax [edi+8] +
mov esi [eax] +
mov [ebp+arg_0] esi +
cmp esi eax +
jz loc_102C033  +
lea ecx [esi+0Ch] +
push 0  +
push ecx  +
push ecx  +
mov eax esp +
mov [eax+4] ecx +
mov ecx ebx +
mov dword ptr [eax] 0Eh +
call sub_102CE9A  +
push 0  +
add esi 14h +
push esi  +
mov ecx ebx +
call sub_101EA69  +
lea ecx [ebp+arg_0] +
call sub_102BFD0  +
mov esi [ebp+arg_0] +
cmp esi [edi+8] +
jz loc_102C033  +
jmp loc_104AFAE  +
***
cmp dword_10F6C64 edi +
jnz locret_104B000  +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
retn   +
***
mov [ebp+var_1] 1 +
jmp loc_104B6D1  +
***
call sub_1001F95  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] ebx +
push offset aCxmlelementG_6  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+8]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] ebx +
jnz loc_1066904  +
push ebx  +
lea ecx [ebp-14h] +
call sub_101E2B5  +
mov ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_101E823  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jnz loc_106692A  +
mov eax [edi] +
push 80004002h  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] ebx +
jnz loc_1066935  +
mov [ebp-10h] ebx +
mov eax [edi] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 4 +
call dword ptr [ecx+40h]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_106695B  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-14h] +
call sub_101E2B5  +
mov ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_101E823  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_104B11F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_104B12F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
xor ecx ecx +
mov [ebp-14h] ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov [ebp-1Ch] ecx +
mov [ebp-18h] ecx +
inc dword ptr [eax]  +
pop esi  +
mov [ebp-24h] esi +
mov [ebp-20h] ecx +
xor ebx ebx +
inc ebx  +
push offset aCxmldocument_0  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [edi] +
push 80004002h  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp dword ptr [ebp-20h] 0 +
jnz loc_1066B39  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp+0Ch] +
call sub_101DD5D  +
mov eax [edi] +
mov edi [ebp+0Ch] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push edi  +
push eax  +
mov byte ptr [ebp-4] 3 +
call dword ptr [ecx+104h]  +
mov [ebp-24h] esi +
mov [ebp-20h] eax +
test eax eax +
jnz loc_104B259  +
cmp word ptr [ebp-10h] 0FFFFh +
jnz loc_1066B66  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
push edi  +
mov [ebp-14h] ebx +
call SysFreeString  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
setl al  +
test al al +
jz loc_104B21F  +
jmp loc_104B22A  +
***
lea eax [ebp-84h] +
push eax  +
push dword ptr [esi+4]  +
call ds:StringFromCLSID  +
push dword ptr [ebp-84h]  +
lea ecx [ebp-64h] +
call sub_101DDB2  +
push dword ptr [ebp-84h]  +
call ds:CoTaskMemFree  +
jmp loc_104B7EF  +
***
mov ecx [ebp-14h] +
add ecx 4 +
mov byte ptr [eax] 1 +
call sub_100A5E6  +
push eax  +
push esi  +
push ebx  +
call ds:CreateStreamOnHGlobal  +
mov [ebp-24h] edi +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_104B313  +
mov ecx [ebp-14h] +
add ecx 4 +
call sub_100A5CF  +
mov edx [eax] +
xor ecx ecx +
push ecx  +
push ecx  +
push eax  +
call dword ptr [edx+18h]  +
mov [ebp-24h] edi +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_104B31C  +
mov ecx [ebp-14h] +
lea eax [ebp-34h] +
push eax  +
call sub_102D3CB  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] ebx +
jnz loc_1067076  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102C6F9  +
***
setl al  +
cmp al bl +
jz loc_104B2B2  +
jmp loc_104B301  +
***
setl al  +
cmp al bl +
jz loc_104B2D1  +
jmp loc_104B301  +
***
mov eax ds:?s_hWnd@SC@mmcerror@@0PAUHWND__@@A +
mov eax [eax] +
mov [ebp-224h] eax +
jmp loc_102EB8B  +
***
push dword ptr [esi+8]  +
mov ecx edi +
call sub_104DDAE  +
jmp loc_101FF61  +
***
mov eax [esi] +
mov eax [eax] +
mov [ebp+var_4] eax +
jmp loc_101F425  +
mov eax edi +
not eax  +
and [ebp+var_4] eax +
mov byte ptr [ebp+arg_4+3] 1 +
jmp loc_101F453  +
cmp byte ptr [ebp+arg_4+3] 0 +
jz loc_101F47D  +
jmp loc_101F45D  +
test eax eax +
jz loc_101F4C4  +
jmp loc_101F4A5  +
***
call dword ptr [eax+0Ch]  +
push eax  +
push ds:off_102D620  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_104BCCD  +
mov byte ptr [ebp-4] 8 +
jmp loc_102D571  +
mov [ebp+0Ch] ebx +
push ebx  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0Bh +
call sub_104BA7D  +
test al al +
jz loc_104B3C0  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-40h] +
call sub_104D996  +
push dword ptr [ebp+0Ch]  +
call SysFreeString  +
jmp loc_102D5BD  +
***
mov eax [edi+4] +
add eax 28h +
push eax  +
lea ecx [ebp-34h] +
call sub_104CFCD  +
mov eax [ebp-30h] +
test eax eax +
jz loc_104B404  +
mov eax [eax] +
test eax eax +
jz loc_102D69B  +
push ds:off_102D6B4  +
lea eax [ebp-34h] +
push eax  +
mov ecx esi +
call sub_101EA69  +
jmp loc_102D69B  +
xor eax eax +
jmp loc_104B3E6  +
***
call sub_100A60E  +
mov [ebp-20h] ecx +
xor esi esi +
mov [ebp-14h] esi +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov [ebp-28h] esi +
mov [ebp-24h] esi +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-30h] edi +
mov [ebp-2Ch] esi +
xor ebx ebx +
inc ebx  +
push offset aCxmlobjectSc_1  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+0Ch] +
push ebx  +
lea eax [ebp-40h] +
push eax  +
call sub_102C561  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-2Ch] esi +
jnz loc_1067C9D  +
mov ecx [ebp+0Ch] +
lea eax [ebp-18h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_102C3AF  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 4 +
call sub_101ED6F  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 6 +
cmp eax esi +
jz loc_104B4AC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-44h] +
call sub_102C353  +
push esi  +
push dword ptr [ebp-20h]  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 7 +
mov byte ptr [ebp-38h] 0 +
call sub_101EA69  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 6 +
call sub_101EB25  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
cmp eax esi +
jz loc_104B4EC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov eax [eax+4] +
jmp loc_102CD22  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+0Ch] +
mov eax [ecx+0Ch] +
mov cx [eax] +
cmp cx [edx] +
jnz loc_104B59E  +
test cx cx +
jz loc_104B58F  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_104B59E  +
add eax 4 +
add edx 4 +
test cx cx +
jnz loc_104B56D  +
xor eax eax +
xor ecx ecx +
test eax eax +
setz cl  +
mov eax ecx +
pop ebp  +
retn 4  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
jmp loc_104B591  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp-4] ebx +
cmp [ebp+0Ch] ebx +
jz loc_1068709  +
mov eax [ecx+4] +
cmp eax ebx +
jz loc_106873C  +
push dword ptr [eax+0Ch]  +
call SysAllocString  +
mov esi eax +
cmp esi ebx +
jz loc_106876A  +
mov eax [ebp+0Ch] +
mov [eax] esi +
mov eax [ebp+8] +
mov [eax+4] edi +
mov ecx ds:?s_CallDepth@SC@mmcerror@@0IA +
inc dword ptr [ecx]  +
pop edi  +
pop esi  +
mov [eax+0Ch] ebx +
mov [eax+8] ebx +
mov dword ptr [eax] 3 +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 18h  +
push dword ptr [ecx]  +
call ds:GetObjectW  +
sub eax 18h +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov [ebp+var_2] 1 +
jmp loc_104B6B7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx SysStringLen +
push esi  +
push edi  +
mov esi ecx +
mov edi eax +
mov eax [esi] +
test eax eax +
jz loc_106669B  +
push eax  +
call ebx  +
mov [ebp+var_C] eax +
mov eax [edi] +
test eax eax +
jz loc_10666A4  +
push eax  +
call ebx  +
mov [ebp+var_10] eax +
mov esi [esi] +
mov edi [edi] +
xor ebx ebx +
and [ebp+var_8] ebx +
mov [ebp+var_2] bl +
mov [ebp+var_1] bl +
test esi esi +
jz loc_104C705  +
test edi edi +
jz loc_104C711  +
mov ecx [ebp+var_8] +
movzx eax word ptr [esi+ebx*2] +
movzx ecx word ptr [edi+ecx*2] +
mov [ebp+var_18] eax +
mov dword ptr [ebp+var_14] ecx +
cmp ebx [ebp+var_C] +
jz loc_104B636  +
push eax  +
call ds:iswspace  +
pop ecx  +
test eax eax +
jnz loc_104B6F9  +
mov eax [ebp+var_10] +
cmp [ebp+var_8] eax +
jz loc_104B001  +
push dword ptr [ebp+var_14]  +
call ds:iswspace  +
pop ecx  +
test eax eax +
jnz loc_104B6F4  +
cmp [ebp+var_2] 0 +
jnz loc_104C70B  +
cmp [ebp+var_1] 0 +
jnz loc_104C711  +
mov ax [ebp+var_14] +
cmp word ptr [ebp+var_18] ax +
jnz loc_104C711  +
inc ebx  +
inc [ebp+var_8]  +
jmp loc_104B695  +
inc ebx  +
jmp loc_104B695  +
***
mov eax [esi+4] +
push dword ptr [eax]  +
push offset aD  +
jmp loc_104B710  +
***
lea eax [ebp-60h] +
push 28h  +
push eax  +
call sub_104D241  +
add esp 10h +
mov [ebp-74h] eax +
mov [ebp-78h] ebx +
test eax eax +
jnz loc_104C307  +
lea eax [ebp-60h] +
push eax  +
jmp loc_104B7E7  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
mov esi ecx +
xor ecx ecx +
mov [ebp-7Ch] ecx +
mov [ebp-68h] eax +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov [ebp-70h] ecx +
mov [ebp-6Ch] ecx +
inc dword ptr [eax]  +
pop ebx  +
mov [ebp-80h] edi +
mov [ebp-78h] ebx +
mov [ebp-74h] ecx +
push offset aCxmlvalueScwri  +
lea ecx [ebp-78h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push edi  +
lea eax [ebp-94h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-78h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-94h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor ecx ecx +
cmp [ebp-74h] ecx +
jnz loc_104C2D7  +
mov eax [ebp-80h] +
mov [eax] ecx +
mov [ebp-64h] ecx +
mov eax [esi] +
mov [ebp-4] bl +
cmp eax 0Eh +
ja loc_104C365  +
jmp ds:off_104C374[eax*4]  +
mov eax [esi+4] +
push dword ptr [eax+4]  +
lea ecx [ebp-64h] +
call sub_101DDB2  +
mov eax [ebp-64h] +
mov ecx [ebp-80h] +
and dword ptr [ebp-64h] 0 +
mov [ecx] eax +
mov ecx [ebp-68h] +
lea eax [ebp-78h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
push dword ptr [ebp-64h]  +
mov dword ptr [ebp-7Ch] 1 +
call SysFreeString  +
lea ecx [ebp-78h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-68h] +
call sub_100C50D  +
retn 8  +
mov eax [esi+4] +
push dword ptr [eax]  +
push offset aU  +
jmp loc_104B710  +
***
call sub_1001F95  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] ebx +
push offset aCxmldocumentCr  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] ebx +
jnz loc_1066A9E  +
push ebx  +
lea ecx [ebp-10h] +
call sub_101E2B5  +
mov ecx [ebp+10h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_101E823  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jnz loc_1066AC4  +
mov eax [edi] +
push 80004002h  +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
push 3  +
pop esi  +
cmp [ebp-1Ch] ebx +
jnz loc_1066ACF  +
cmp dword ptr [ebp+8] 1 +
jz loc_104BA08  +
cmp [ebp+8] esi +
jnz loc_1066B26  +
mov [ebp+8] ebx +
mov eax [edi] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 6 +
push eax  +
call dword ptr [ecx+0C4h]  +
mov [ebp-20h] esi +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1066B0D  +
push dword ptr [ebp+8]  +
lea ecx [ebp+0Ch] +
call sub_101E2B5  +
mov ecx [ebp+10h] +
push eax  +
mov byte ptr [ebp-4] 7 +
call sub_101E823  +
mov byte ptr [ebp-4] 6 +
mov eax [ebp+0Ch] +
cmp eax ebx +
jz loc_104B9A9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_104B9B9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
mov [ebp+8] ebx +
mov eax [edi] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 4 +
push eax  +
call dword ptr [ecx+0BCh]  +
mov [ebp-20h] esi +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1066AF4  +
push dword ptr [ebp+8]  +
lea ecx [ebp+0Ch] +
call sub_101E2B5  +
mov ecx [ebp+10h] +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_101E823  +
mov byte ptr [ebp-4] 4 +
jmp loc_104B99C  +
***
mov eax [ebp-30h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jnz loc_106737F  +
mov eax [ebp-38h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_104BBCF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104BBCF  +
***
call sub_100C4D0  +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov edi [ebp+8] +
xor ebx ebx +
mov [ebp-48h] ebx +
mov [ebp-44h] ebx +
inc dword ptr [eax]  +
mov esi ecx +
mov dword ptr [ebp-50h] 3 +
mov [ebp-4Ch] ebx +
push offset aCxmlelementG_5  +
lea ecx [ebp-50h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi] +
push 80004002h  +
push eax  +
lea eax [ebp-60h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-60h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-4Ch] ebx +
jnz loc_1067359  +
push dword ptr [edi]  +
call SysFreeString  +
mov [edi] ebx +
mov [ebp-38h] ebx +
mov [ebp-30h] ebx +
push dword ptr [esi]  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 3 +
mov [ebp-34h] ebx +
call sub_100CA9D  +
mov eax [ebp-38h] +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
test eax eax +
jnz loc_104BA50  +
cmp [ebp-30h] ebx +
jz loc_104BB58  +
push dword ptr [ebp-30h]  +
inc dword ptr [ebp-34h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100CA9D  +
mov eax [ebp-30h] +
cmp eax ebx +
jz loc_104BB47  +
mov [ebp-30h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-38h] +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
test eax eax +
jz loc_104BB23  +
cmp dword ptr [ebp-34h] 1 +
jl loc_104BA50  +
dec dword ptr [ebp-34h]  +
cmp [ebp+0Ch] bl +
jnz loc_104BC1E  +
mov eax [ebp-34h] +
push 20h  +
lea eax [eax+eax+1] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_104DD2B  +
push ebx  +
lea ecx [ebp-2Ch] +
call sub_104C7C3  +
push 0Ah  +
pop ecx  +
mov [eax] cx +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_104BB9B  +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
call sub_101DDB2  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100CD3C  +
mov eax [ebp-30h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jnz loc_1067392  +
mov eax [ebp-38h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_104BBCD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov bl 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-50h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov al bl +
call sub_100C50D  +
retn 8  +
inc dword ptr [ebp-34h]  +
push ebx  +
lea ecx [ebp-3Ch] +
call sub_101DDF6  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_102C3F1  +
mov [ebp-40h] ebx +
cmp [ebp-3Ch] ebx +
jz loc_104BC99  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-3Ch] +
call sub_101DE26  +
cmp dword ptr [ebp-40h] 1 +
jle loc_104BC99  +
push 20h  +
push 2  +
lea ecx [ebp-6Ch] +
call sub_104DD2B  +
cmp dword ptr [eax+18h] 8 +
jnb loc_106738A  +
add eax 4 +
push eax  +
mov ecx edi +
call sub_101DDB2  +
push ebx  +
push 1  +
lea ecx [ebp-6Ch] +
call sub_100CD3C  +
mov eax [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
cmp eax ebx +
jz loc_104BBAE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104BBAE  +
mov eax [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
cmp eax ebx +
jz loc_104BB6E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104BB6E  +
***
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_104BCCD  +
mov byte ptr [ebp-4] 3 +
jmp loc_101ED1E  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] ebx +
xor esi esi +
inc esi  +
push offset aCpersistorAdde  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+8] +
push ebx  +
call sub_101E2B5  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp+0Ch] +
mov [ebp-10h] esi +
call sub_101DD5D  +
push dword ptr [ebp+8]  +
mov eax [eax] +
push eax  +
push esi  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_104B881  +
push dword ptr [ebp+0Ch]  +
call SysFreeString  +
mov [ebp+0Ch] ebx +
push esi  +
lea eax [ebp+0Ch] +
lea ecx [edi+8] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_104BA7D  +
test al al +
jz loc_104BD5F  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_104D996  +
push dword ptr [ebp+8]  +
lea esi [edi+8] +
mov ecx esi +
call sub_104DA57  +
cmp [ebp+10h] ebx +
jnz loc_104BDDA  +
push ebx  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_104BA7D  +
test al al +
jz loc_104BD8B  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_104D996  +
push dword ptr [ebp+0Ch]  +
call SysFreeString  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
push ebx  +
push dword ptr [ebp+8]  +
lea ecx [ebp-34h] +
push edi  +
call sub_101EB5D  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call sub_104DDAE  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call sub_101EB25  +
jmp loc_104BD71  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_104BE1D  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1067A0C  +
push ebx  +
lea ecx [ebp+10h] +
call sub_1045BB5  +
lea ecx [ebp-64h] +
call sub_100AD56  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-64h] +
push offset aD_1  +
push eax  +
mov byte ptr [ebp-4] 0Dh +
call sub_104C71D  +
add esp 0Ch +
push dword ptr [ebp-60h]  +
lea ecx [ebp-38h] +
call sub_101DD5D  +
push eax  +
push ds:off_1045B94  +
lea ecx [ebp+10h] +
mov byte ptr [ebp-4] 0Eh +
call sub_104D5DA  +
push dword ptr [ebp-38h]  +
call esi  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 0Ch +
call sub_100A77D  +
push dword ptr [ebp-18h]  +
call esi  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 0Ah +
cmp eax ebx +
jz loc_104BE96  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104BE96  +
***
push dword ptr [ebp-2Ch]  +
call esi  +
mov eax [ebp+10h] +
mov byte ptr [ebp-4] 8 +
cmp eax ebx +
jz loc_104BEAC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-20h]  +
jmp loc_104BFF4  +
***
call sub_100A60E  +
xor ebx ebx +
mov [ebp-14h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-48h] ebx +
mov [ebp-44h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-50h] 3 +
mov [ebp-4Ch] ebx +
xor edi edi +
inc edi  +
push offset aCconsolefile_7  +
lea ecx [ebp-50h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-60h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-4Ch] ebx +
jnz loc_1067990  +
lea ecx [ebp-40h] +
call sub_101DD84  +
push ebx  +
lea eax [ebp-60h] +
push eax  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call sub_102C561  +
push eax  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-4Ch] ebx +
jnz loc_10679BD  +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-40h] +
push eax  +
lea eax [ebp-60h] +
push eax  +
call sub_102DC3D  +
push eax  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-4Ch] ebx +
jnz loc_10679EA  +
push ebx  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 6 +
call sub_101DDF6  +
push ebx  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 7 +
call sub_101DDF6  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
mov byte ptr [ebp-4] 8 +
call sub_1045C81  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp+10h]  +
call sub_1045C81  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-28h] +
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
call sub_101DE26  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-24h] +
call sub_101DE26  +
mov esi SysFreeString +
mov [ebp-20h] ebx +
mov eax [ebp-20h] +
cmp eax [ebp-30h] +
jge loc_104C0FE  +
push ebx  +
lea ecx [ebp+10h] +
call sub_101E2B5  +
lea eax [ebp+10h] +
push eax  +
push dword ptr [ebp-20h]  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 9 +
call sub_101E13F  +
mov [ebp-2Ch] ebx +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp+10h] +
mov byte ptr [ebp-4] 0Ah +
call sub_102C109  +
mov [ebp+0Ch] ebx +
mov eax [ebp+0Ch] +
cmp eax [ebp-34h] +
jge loc_104BE96  +
push ebx  +
lea ecx [ebp-1Ch] +
call sub_101E2B5  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0Bh +
call sub_101E13F  +
mov [ebp-18h] ebx +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 0Ch +
call sub_102C109  +
lea eax [ebp-2Ch] +
lea ecx [ebp-18h] +
call sub_104B641  +
test al al +
jnz loc_104BE07  +
push dword ptr [ebp-18h]  +
call esi  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 0Ah +
cmp eax ebx +
jz loc_104C096  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp+0Ch]  +
jmp loc_104C032  +
mov eax [ebp-24h] +
mov byte ptr [ebp-4] 7 +
cmp eax ebx +
jz loc_104C10F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 6 +
cmp eax ebx +
jz loc_104C120  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+8] +
lea eax [ebp-50h] +
push eax  +
mov dword ptr [ebp-4] 3 +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-14h] edi +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call sub_101D546  +
mov [ebp-4] bl +
lea ecx [ebp-50h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov esi [esi+4] +
mov eax [esi] +
lea ecx [ebp-64h] +
push ecx  +
lea ecx [ebp-0A4h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
push eax  +
lea ecx [ebp-78h] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-0A4h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp dword ptr [ebp-74h] 0 +
jz loc_104B7EF  +
jmp loc_104C34D  +
***
push 28h  +
mov eax offset byte_10E40C5 +
call sub_1001F95  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-1Ch] edi +
mov [ebp-18h] edi +
inc dword ptr [eax]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] edi +
xor ebx ebx +
inc ebx  +
push offset aCxmlenumerat_0  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] edi +
jnz loc_106651D  +
mov eax [ebp+0Ch] +
mov [eax] edi +
mov eax [esi+0Ch] +
xor ecx ecx +
mov [ebp-14h] eax +
cmp eax edi +
jbe loc_1066547  +
mov edx [esi+4] +
mov eax [esi+8] +
mov edx [edx] +
mov esi eax +
cmp [esi] edx +
jz loc_104C27E  +
inc ecx  +
add esi 8 +
cmp ecx [ebp-14h] +
jb loc_104C22D  +
jmp loc_1066547  +
***
push dword ptr [eax+ecx*8+4]  +
lea ecx [ebp-14h] +
call sub_101DD5D  +
mov ecx [eax] +
mov [eax] edi +
mov eax [ebp+0Ch] +
push dword ptr [ebp-14h]  +
mov [eax] ecx +
call SysFreeString  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov eax [esi+4] +
cmp byte ptr [eax] 0 +
mov eax ds:off_101EF50 +
jnz loc_104B72F  +
jmp loc_104C343  +
cmp [ebp-78h] ebx +
jnz loc_104C2E4  +
cmp [ebp-74h] ecx +
setl al  +
jmp loc_104C2E6  +
mov al 1 +
test al al +
jz loc_104B7C4  +
mov ecx [ebp-68h] +
lea eax [ebp-78h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-7Ch] 1 +
jmp loc_104B818  +
setl al  +
test al al +
jz loc_104B72C  +
jmp loc_104B7FB  +
mov eax [esi+4] +
movzx eax byte ptr [eax] +
push eax  +
push offset a0x02_2x  +
jmp loc_104B710  +
mov eax [esi+4] +
movsx eax word ptr [eax] +
push eax  +
jmp loc_104B701  +
mov eax [esi+4] +
push dword ptr [eax]  +
push offset a0x04_4x  +
jmp loc_104B710  +
mov eax ds:off_104C3B0 +
jmp loc_104B72F  +
cmp [ebp-78h] ebx +
jnz loc_104C35E  +
cmp dword ptr [ebp-74h] 0 +
setl al  +
jmp loc_104C3EB  +
mov al 1 +
jmp loc_104C3EB  +
mov [ebp-78h] ebx +
mov dword ptr [ebp-74h] 80004001h +
jmp loc_104B7FB  +
***
mov eax [esi+4] +
cmp [eax] ecx +
jmp loc_104C2CA  +
add esi 4 +
jmp loc_104C404  +
test al al +
jnz loc_104B7FB  +
jmp loc_104B7EF  +
mov esi [esi+4] +
cmp dword ptr [esi+18h] 8 +
jb loc_104C3E6  +
mov esi [esi+4] +
push esi  +
jmp loc_104B7E7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov cl [eax] +
push edi  +
mov edi [edx] +
cmp edi 1 +
jbe loc_104C4DE  +
mov dl [eax+1] +
cmp edi 2 +
jbe loc_104C4E5  +
mov al [eax+2] +
mov byte ptr [ebp+arg_0+3] al +
movzx ecx cl +
mov eax ecx +
push ebx  +
shr eax 2 +
movzx di byte_10F9A28[eax] +
mov eax [ebp+arg_8] +
mov ebx [eax] +
mov [ebx] di +
add dword ptr [eax] 2 +
mov edi [eax] +
movzx edx dl +
and ecx 3 +
mov ebx edx +
shl ecx 4 +
shr ebx 4 +
or ebx ecx +
movzx cx byte_10F9A28[ebx] +
mov [edi] cx +
add dword ptr [eax] 2 +
movzx ecx byte ptr [ebp+arg_0+3] +
mov edi [eax] +
and edx 0Fh +
mov ebx ecx +
shl edx 2 +
shr ebx 6 +
or ebx edx +
movzx dx byte_10F9A28[ebx] +
mov [edi] dx +
add dword ptr [eax] 2 +
mov edx [eax] +
and ecx 3Fh +
movzx cx byte_10F9A28[ecx] +
mov [edx] cx +
add dword ptr [eax] 2 +
add dword ptr [esi] 3 +
mov edx [ebp+arg_4] +
mov ecx [edx] +
pop ebx  +
cmp ecx 1 +
jz loc_10687A2  +
cmp ecx 2 +
jz loc_10687B9  +
add ecx 0FFFFFFFDh +
mov [edx] ecx +
jz loc_104C4D5  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
mov eax [eax] +
xor ecx ecx +
mov [eax] cx +
jmp loc_104C4CF  +
xor dl dl +
jmp loc_104C42E  +
mov byte ptr [ebp+arg_0+3] 0 +
jmp loc_104C43D  +
***
push dword ptr [esi+4]  +
lea eax [ebp-94h] +
push eax  +
lea ecx [ebp-64h] +
call sub_104C51A  +
push eax  +
lea ecx [ebp-78h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-94h] +
jmp loc_104C17F  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-30h] 3 +
mov [ebp-2Ch] ebx +
xor edi edi +
inc edi  +
push offset aScencodebinary  +
lea ecx [ebp-30h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [esi]  +
call SysFreeString  +
mov eax [ebp+0Ch] +
mov [esi] ebx +
mov eax [eax+4] +
cmp eax ebx +
jz loc_1066B75  +
push 0Dh  +
pop ecx  +
push 0Ah  +
mov [ebp-20h] cx +
pop ecx  +
push 6  +
mov [ebp-14h] eax +
mov [ebp-1Eh] cx +
pop ecx  +
lea eax ds:5[eax*8] +
xor edx edx +
div  ecx +
push 4Ch  +
pop edi  +
xor edx edx +
mov ecx eax +
neg eax  +
and eax 3 +
add ecx eax +
mov eax ecx +
div  edi +
lea ecx [ecx+eax*2+1] +
push ecx  +
push ebx  +
push esi  +
call SysReAllocStringLen  +
xor edi edi +
inc edi  +
cmp eax edi +
jnz loc_1066BDE  +
mov esi [esi] +
cmp esi ebx +
jz loc_1066BDE  +
xor eax eax +
mov [ebp-18h] esi +
mov [esi] ax +
cmp [ebp-14h] ebx +
jz loc_1066BEC  +
mov ecx [ebp+0Ch] +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-40h] +
push eax  +
mov [ebp-1Ch] ebx +
call sub_102DFA0  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-2Ch] ebx +
jnz loc_1066B84  +
push 8000FFFFh  +
push dword ptr [ebp-1Ch]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-2Ch] ebx +
jnz loc_1066B9E  +
xor edi edi +
cmp [ebp-14h] ebx +
jz loc_104C6A2  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_104C40F  +
add edi 4 +
push 4Ch  +
xor edx edx +
mov eax edi +
pop ecx  +
div  ecx +
test edx edx +
jnz loc_104C640  +
cmp [ebp-14h] ebx +
jz loc_104C6A2  +
xor eax eax +
mov cx [ebp+eax*2-20h] +
mov edx [ebp-18h] +
mov [edx] cx +
add dword ptr [ebp-18h] 2 +
inc eax  +
cmp eax 2 +
jb loc_104C66D  +
jmp loc_104C640  +
***
mov ecx [ebp-18h] +
xor eax eax +
mov [ecx] ax +
mov ecx [ebp+0Ch] +
lea eax [ebp-40h] +
push eax  +
call sub_102CBE7  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-2Ch] ebx +
jnz loc_1066BB8  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov al 1 +
jmp loc_104C713  +
test edi edi +
jz loc_104C701  +
jmp loc_104C711  +
cmp [ebp+var_1] 0 +
jnz loc_104C701  +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
call sub_104C738  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_0] 0 +
push edi  +
mov edi ecx +
jz loc_1065E7D  +
push ebx  +
push esi  +
mov esi 8007007Ah +
push 40h  +
mov [ebp+var_4] esi +
pop ebx  +
cmp [ebp+var_4] esi +
jnz loc_104C7A7  +
push ebx  +
mov ecx edi +
call sub_101D69E  +
test eax eax +
jz loc_1065EC7  +
push [ebp+arg_4]  +
lea eax [ebx+1] +
push [ebp+arg_0]  +
push 100h  +
push 0  +
push 0  +
push eax  +
push dword ptr [edi+4]  +
call sub_104D841  +
push 0FFFFFFFFh  +
mov ecx edi +
mov [ebp+var_4] eax +
call sub_101D6F2  +
cmp [ebp+var_4] 0 +
jl loc_1065EB5  +
add ebx ebx +
jnz loc_104C758  +
jmp loc_1065EC0  +
mov eax lpDst +
test ebx ebx +
jz loc_1065F35  +
pop esi  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 8 +
jnb loc_104C7DB  +
lea eax [ecx+4] +
mov ecx [ebp+arg_0] +
lea eax [eax+ecx*2] +
pop ebp  +
retn 4  +
mov eax [ecx+4] +
jmp loc_104C7D1  +
***
mov ecx esi +
call sub_104C7F1  +
jmp loc_101EFFA  +
***
call sub_1001F95  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-2Ch] 3 +
mov [ebp-28h] ebx +
push offset aCxmldocumentCo  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea esi [edi+4] +
cmp [esi] ebx +
jz loc_1067C7F  +
push ebx  +
lea ecx [ebp-14h] +
call sub_101E2B5  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_102C1E5  +
push ebx  +
lea ecx [ebp-10h] +
call sub_101E2B5  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_104B00F  +
push esi  +
lea ecx [ebp-14h] +
call sub_104DC2F  +
mov [ebp-1Ch] ebx +
cmp [ebp-10h] ebx +
jz loc_104C91C  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-10h] +
call sub_102C03F  +
cmp dword ptr [ebp-1Ch] 3 +
jnz loc_104C91C  +
push ebx  +
lea ecx [ebp-18h] +
call sub_101E2B5  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_104B00F  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-14h] +
call sub_104DC2F  +
push dword ptr [ebp-18h]  +
lea eax [ebp-10h] +
push eax  +
call sub_100CA9D  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_104C870  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104C870  +
lea eax [ebp-14h] +
push eax  +
push edi  +
lea ecx [ebp-40h] +
call sub_102C353  +
push ebx  +
push ds:off_102BAA8  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 4 +
mov [ebp-34h] bl +
call sub_101ECB0  +
lea eax [ebp-4Ch] +
push eax  +
push esi  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 5 +
call sub_104C9CC  +
push ebx  +
lea ecx [ebp-18h] +
call sub_101E2B5  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 6 +
call sub_101E823  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jnz loc_1067C92  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 4 +
call sub_101EB25  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call sub_101EB25  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_104C9A4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_104C9B4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
push 3  +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-20h] edi +
mov [ebp-1Ch] ebx +
push offset aCxmlelementRep  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi] +
push 80004002h  +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] ebx +
jnz loc_10668C6  +
mov [ebp-10h] ebx +
mov eax [esi] +
mov ecx [ebp+0Ch] +
mov edx [ebp+8] +
mov ecx [ecx] +
mov edx [edx] +
lea esi [ebp-10h] +
push esi  +
push ecx  +
mov [ebp+8] edx +
push dword ptr [ebp+8]  +
mov edx [eax] +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [edx+4Ch]  +
mov [ebp-20h] edi +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_10668EB  +
push dword ptr [ebp-10h]  +
lea ecx [ebp+8] +
call sub_101E2B5  +
mov ecx [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_101E823  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_104CA92  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_104CAA2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
lea ecx [ebp-5Ch] +
push esi  +
call sub_101ECB0  +
mov byte ptr [ebp-4] 4 +
call sub_100ABA9  +
mov edi 8000FFFFh +
push edi  +
push eax  +
mov [ebp+8] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A2DB  +
mov ecx [ebp+8] +
push ebx  +
call ?MDIGetActive@CMDIFrameWnd@@QBEPAVCMDIChildWnd@@PAH@Z  +
push edi  +
push eax  +
mov [ebp+8] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A2E9  +
mov ecx [ebp+8] +
push 1  +
call sub_100EB83  +
mov [ebp+8] eax +
cmp eax ebx +
jnz loc_104CBAA  +
lea ecx [ebp-5Ch] +
mov byte ptr [ebp-4] 1 +
call sub_101EB25  +
mov edi [ebp-14h] +
jmp loc_101EA1D  +
push ebx  +
push offset off_10F6DC0  +
push offset off_10F6C88  +
push ebx  +
push dword ptr [ebp+8]  +
call __RTDynamicCast  +
add esp 14h +
push edi  +
push eax  +
mov [ebp-10h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A2F7  +
mov eax [ebp-10h] +
mov eax [eax+228h] +
push edi  +
push eax  +
mov [ebp-10h] eax +
lea eax [ebp-48h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A305  +
mov ecx [ebp-10h] +
call sub_100EC0C  +
test al al +
jz loc_104CC5A  +
mov eax [ebp-10h] +
mov ecx eax +
add eax 58h +
neg ecx  +
sbb ecx ecx +
and ecx eax +
push ebx  +
push ecx  +
lea ecx [ebp-5Ch] +
call sub_101EA69  +
mov ecx [ebp+8] +
push 3  +
call sub_102B324  +
jmp loc_104CB8F  +
***
mov eax [edi+4] +
mov eax [eax+4] +
mov esi [eax] +
cmp esi eax +
jz loc_102E675  +
push 0  +
lea eax [esi+8] +
push eax  +
mov ecx ebx +
call sub_101EA69  +
mov esi [esi] +
mov eax [edi+4] +
cmp esi [eax+4] +
jnz loc_104CC79  +
jmp loc_102E675  +
***
mov [ebp-0A0h] ebx +
lea ecx [ebp-0A0h] +
mov byte ptr [ebp-4] 2 +
call sub_100A5E6  +
push eax  +
lea eax [ebp-0C4h] +
push eax  +
lea ecx [ebp-9Ch] +
call sub_102D23B  +
push eax  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-0C4h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-0ACh] ebx +
jnz loc_1068871  +
push dword ptr [ebp-0A0h]  +
mov eax [ebp-0B4h] +
push dword ptr [eax+4]  +
call sub_104CD34  +
mov dword ptr [ebp-0B0h] 3 +
mov [ebp-0ACh] eax +
cmp eax ebx +
jnz loc_10688A0  +
mov eax [ebp-0A0h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_102D12C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_102D12C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_100EBA3  +
test al al +
jz loc_106631E  +
push [ebp+arg_4]  +
push 1  +
push [ebp+arg_0]  +
call sub_104CD67  +
cmp eax 80004002h +
jz loc_106631E  +
pop ebp  +
retn 8  +
***
call sub_100A4F0  +
xor edi edi +
mov [ebp-1Ch] edi +
mov esi dword_10F53D8 +
mov [ebp-20h] edi +
cmp dword_10F6C64 edi +
jnz loc_104CD9A  +
lea eax [ebp-20h] +
push eax  +
call sub_100B120  +
test eax eax +
jz loc_1066303  +
mov [ebp-4] edi +
cmp esi edi +
jz loc_104CDE4  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call esi  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_104AFEF  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 0Ch  +
push offset aImagelist_writ  +
call sub_101D9DA  +
mov esi eax +
cmp esi edi +
jz loc_106630D  +
mov dword_10F53D8 esi +
jmp loc_104CDA1  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov [ebp-4] ecx +
mov eax lpDst +
mov esi offset lpDst +
mov ebx offset dword_100C4B0 +
cmp eax esi +
jz loc_104CF61  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105A3AB  +
mov ecx [ebp+8] +
cmp ecx 3 +
ja loc_105A3C3  +
push edi  +
mov edi [ebp+0Ch] +
test edi edi +
jz loc_104CF9B  +
mov edx [ebp+10h] +
test edx edx +
jz loc_104CF9B  +
mov eax [ebp-4] +
shl ecx 4 +
add eax ecx +
mov ecx [eax+194h] +
mov [edi] ecx +
mov eax [eax+19Ch] +
mov [edx] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
cmp eax esi +
jnz loc_105A3E8  +
jmp loc_104CF94  +
***
mov eax [esi+4] +
add eax 24h +
push eax  +
lea ecx [ebp-58h] +
call sub_104CFCD  +
mov eax [esi+4] +
add eax 20h +
push eax  +
lea ecx [ebp-34h] +
call sub_104CFCD  +
jmp loc_102CD9F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+4] +
call sub_101D583  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [edi+4] +
cmp eax ebx +
jz loc_104D060  +
mov eax [eax] +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
call sub_104D06D  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-28h] ebx +
jnz loc_10687ED  +
push 1  +
push 1  +
push 21h  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-18h] +
push dword ptr [ebp-14h]  +
call sub_102B239  +
test eax eax +
jz loc_1068812  +
mov eax [edi+4] +
cmp eax ebx +
jz loc_104D064  +
mov eax [eax] +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [ebp-18h]  +
call sub_101DC24  +
cmp eax 0FFFFFFFFh +
jnz loc_102D03C  +
jmp loc_1068828  +
***
xor eax eax +
jmp loc_104CFF0  +
***
xor eax eax +
jmp loc_104D047  +
***
call sub_1001F95  +
xor ebx ebx +
mov [ebp-10h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] ebx +
xor esi esi +
inc esi  +
push offset aScgeticonsize  +
lea ecx [ebp-24h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-38h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call ds:GetIconInfo  +
test eax eax +
jz loc_10687C4  +
mov eax [ebp-2Ch] +
mov [ebp+0Ch] eax +
mov edi [ebp-28h] +
mov [ebp-14h] edi +
lea eax [ebp-50h] +
push eax  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 3 +
call sub_104B60E  +
test al al +
jz loc_10687DF  +
mov eax [ebp+10h] +
mov ecx [ebp-4Ch] +
mov [eax] ecx +
lea eax [ebp-24h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] esi +
cmp edi ebx +
jz loc_104D106  +
lea ecx [ebp-14h] +
call sub_104D14D  +
cmp [ebp+0Ch] ebx +
jz loc_104D113  +
lea ecx [ebp+0Ch] +
call sub_104D14D  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call ds:DeleteObject  +
test eax eax +
jz loc_104D161  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
call sub_100C4D0  +
mov edi [ebp+8] +
xor ebx ebx +
push ebx  +
lea ecx [ebp-44h] +
mov [ebp-48h] edi +
mov [ebp-34h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aGetcurrentfile  +
lea ecx [ebp-44h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push ebx  +
push 3  +
push offset aD_D  +
lea eax [ebp-30h] +
push 10h  +
push eax  +
call sub_104D241  +
add esp 14h +
push eax  +
lea ecx [ebp-44h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx edi +
test al al +
jnz loc_1059A0F  +
lea eax [ebp-30h] +
push eax  +
call sub_101D1AD  +
lea ecx [ebp-44h] +
mov [ebp-34h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
call sub_100C50D  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_104D28D  +
cmp ecx 7FFFFFFFh +
ja loc_104D28D  +
test eax eax +
jl loc_104D28B  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_104D294  +
cmp eax esi +
ja loc_104D294  +
jz loc_1057338  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
mov eax 80070057h +
jmp loc_104D257  +
mov ebx 8007007Ah +
jmp loc_1057338  +
***
cmp [esi+0BCh] ebx +
jnz loc_102D9AA  +
jmp loc_102D9F3  +
cmp [ebp-1Ch] bl +
jz loc_104D2C3  +
jmp loc_102D97A  +
cmp [ebp-1Ch] bl +
jz loc_104D29E  +
jmp loc_102D9F3  +
mov ecx esi +
call sub_100C1C8  +
test al al +
jnz loc_102D961  +
jmp loc_102D97A  +
***
lea eax [ebp-90h] +
push eax  +
call sub_104D168  +
cmp dword ptr [eax+18h] 8 +
mov byte ptr [ebp-4] 3 +
jnb loc_101E596  +
add eax 4 +
push eax  +
lea ecx [ebp-60h] +
call sub_100AE0E  +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push ebx  +
push 1  +
lea ecx [ebp-90h] +
mov byte ptr [ebp-4] 2 +
call sub_100CD3C  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_101E59E  +
lea eax [ebp-20h] +
push eax  +
call ds:CoCreateGuid  +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_101E5AC  +
push ebx  +
push ds:off_104D390  +
lea ecx [ebp-74h] +
push esi  +
call sub_101ECB0  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [ebp-20h] +
mov [eax+4] ecx +
lea ecx [ebp-74h] +
mov byte ptr [ebp-4] 4 +
mov [ebp-48h] esp +
mov dword ptr [eax] 0Ch +
call sub_102F021  +
lea ecx [ebp-74h] +
mov byte ptr [ebp-4] 2 +
call sub_101EB25  +
jmp loc_101E3F3  +
***
call sub_104D3C6  +
jmp loc_101E4A8  +
***
xor ecx ecx +
jmp loc_101E38F  +
***
call sub_1001F95  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] ebx +
push offset aCxmldocument_3  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea esi [edi+4] +
cmp [esi] ebx +
jnz loc_1067C59  +
push ebx  +
lea ecx [ebp-10h] +
call sub_101E2B5  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_102C1E5  +
lea eax [ebp-10h] +
push eax  +
push edi  +
lea ecx [ebp-34h] +
call sub_102C353  +
push ebx  +
push ds:off_102BAA8  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-28h] bl +
call sub_101ECB0  +
lea eax [ebp-40h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_101E823  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call sub_101EB25  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call sub_101EB25  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_104D47F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+174h] +
mov ecx [esi] +
call sub_100C5D1  +
mov ecx [esi] +
mov ebx eax +
call sub_100C573  +
push [ebp+arg_0]  +
mov ecx edi +
push ebx  +
push eax  +
call sub_102B41D  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov [ebp+14h] ebx +
lea eax [ebp+14h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 3 +
call sub_104B73A  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] ebx +
jnz loc_106751A  +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [esi+8] +
call sub_104D5DA  +
push dword ptr [ebp+14h]  +
jmp loc_101DF9C  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
push 3  +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-20h] edi +
mov [ebp-1Ch] ebx +
push offset aCxmlelementSet  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-10h] ebx +
mov esi [esi] +
push offset loc_101DD48  +
push esi  +
lea eax [ebp-10h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101E311  +
push 80004002h  +
push dword ptr [ebp-10h]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] ebx +
jnz loc_1066D72  +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
call sub_101DD5D  +
mov eax [ebp+0Ch] +
push dword ptr [eax]  +
lea ecx [ebp-30h] +
call sub_104D719  +
mov eax [ebp-10h] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+8]  +
lea esi [ebp-30h] +
movs   +
movs   +
movs   +
push eax  +
mov byte ptr [ebp-4] 4 +
movs   +
call dword ptr [ecx+0B4h]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_1066D97  +
lea ecx [ebp-30h] +
call sub_100EBF1  +
push dword ptr [ebp+8]  +
call SysFreeString  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_104D6C8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
xor eax eax +
mov [esi] ax +
call sub_104D73A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104D76D  +
push 8  +
pop eax  +
push [ebp+arg_0]  +
mov [esi] ax +
call SysAllocString  +
mov [esi+8] eax +
test eax eax +
jz loc_10615F6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100EBF1  +
test eax eax +
jl loc_105A694  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_104D7A3  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
test ecx ecx +
jbe loc_104D7CA  +
mov eax [ebp+arg_4] +
movzx edx ax +
mov eax edx +
shl edx 10h +
push edi  +
mov edi [ebp+arg_0] +
or eax edx +
shr ecx 1 +
stos   +
adc ecx ecx +
stos   +
pop edi  +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
lea eax [ebp-34h] +
add ecx 0Ch +
push eax  +
call sub_104D804  +
test al al +
jz loc_1063328  +
lea ecx [ebp-10h] +
call sub_102BFD0  +
mov eax [ebp-18h] +
mov ecx [ebp-10h] +
cmp ecx [eax+58h] +
jz loc_102E41E  +
mov ecx [ebp-10h] +
jmp loc_104D7CF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov edx [edx+4] +
xor eax eax +
cmp edx eax +
jz loc_104D82E  +
cmp [ecx+4] eax +
jz loc_104D833  +
mov ecx [ecx+4] +
mov eax [ecx] +
push edx  +
call dword ptr [eax+0Ch]  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
pop ebp  +
retn 4  +
cmp [ecx+4] eax +
jnz loc_104D82A  +
cmp edx eax +
jnz loc_104D82A  +
jmp loc_1062C5F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_10]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_104D91B  +
mov esi eax +
test esi esi +
jl loc_104D8F5  +
test [ebp+arg_10] 100h +
push ebx  +
mov ebx ecx +
mov [ebp+arg_0] edi +
mov [ebp+var_4] ebx +
jz loc_104D883  +
cmp [ebp+arg_14] 0 +
jz loc_1065D2A  +
xor esi esi +
test [ebp+arg_10] 0FFFFE000h +
jnz loc_1065D36  +
test ecx ecx +
jz loc_1065D46  +
push [ebp+arg_18]  +
lea ebx [ecx-1] +
push [ebp+arg_14]  +
xor esi esi +
push ebx  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_104D8FD  +
cmp eax ebx +
ja loc_104D8FD  +
jz loc_104D902  +
mov ebx [ebp+arg_4] +
sub ebx eax +
lea ecx [edi+eax*2] +
mov [ebp+arg_0] ecx +
mov [ebp+var_4] ebx +
test esi esi +
jl loc_1065D7C  +
mov eax [ebp+arg_10] +
test eax 200h +
jnz loc_1065D63  +
mov eax [ebp+arg_8] +
test eax eax +
jnz loc_1065DB1  +
mov eax [ebp+arg_C] +
test eax eax +
jnz loc_1065DBB  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 1Ch  +
mov esi 8007007Ah +
xor eax eax +
mov [edi+ebx*2] ax +
mov eax ebx +
jmp loc_104D8BA  +
***
cmp esi 8007007Ah +
jz loc_104D8DE  +
jmp loc_104D8F4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_104D941  +
cmp [ebp+arg_0] eax +
jz loc_10659B0  +
cmp ecx [ebp+arg_4] +
ja loc_10659B8  +
pop ebp  +
retn 0Ch  +
cmp ecx eax +
jnz loc_104D934  +
jmp loc_10659B8  +
***
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 1 +
call sub_104B73A  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] ebx +
jnz loc_1067540  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_104D996  +
jmp loc_102F0A7  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] ebx +
push offset aCpersistorAddt  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push ebx  +
lea ecx [ebp-10h] +
call sub_101E2B5  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx esi +
push 3  +
mov byte ptr [ebp-4] 1 +
call sub_104B881  +
lea eax [ebp-10h] +
push eax  +
lea ecx [esi+8] +
call sub_104DA57  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_104DA07  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
push 3  +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-20h] edi +
mov [ebp-1Ch] ebx +
push offset aCxmlelementAdd  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi] +
push 80004002h  +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] ebx +
jnz loc_106684A  +
mov [ebp-10h] ebx +
mov eax [esi] +
mov ecx [ebp+8] +
mov ecx [ecx] +
mov edx [eax] +
lea esi [ebp-10h] +
push esi  +
push ecx  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [edx+54h]  +
mov [ebp-20h] edi +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_106686F  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
call sub_100CA9D  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_104DB04  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
push 0Fh  +
pop ecx  +
mov esi offset a?xmlVersion1_0 +
lea edi [ebp-54h] +
movs   +
mov ecx [ebp-78h] +
lea eax [ebp-54h] +
push eax  +
lea eax [ebp-98h] +
push eax  +
movs   +
call sub_104B181  +
push eax  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-98h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor esi esi +
cmp [ebp-68h] esi +
jnz loc_1066E3C  +
push esi  +
lea ecx [ebp-70h] +
call sub_101E2B5  +
mov ecx [ebp-78h] +
lea eax [ebp-70h] +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_102C1E5  +
lea eax [ebp-70h] +
push eax  +
lea ecx [ebp-74h] +
call sub_104DC2F  +
cmp [ebp-68h] esi +
jnz loc_1066E7E  +
mov eax [ebp-70h] +
mov byte ptr [ebp-4] 3 +
cmp eax esi +
jz loc_102C5FE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_102C5FE  +
setl al  +
test al al +
jz loc_102C5D5  +
jmp loc_102C612  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
push 3  +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-20h] edi +
mov [ebp-1Ch] ebx +
push offset aCxmlelementRem  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi] +
push 80004002h  +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] ebx +
jnz loc_1066888  +
mov [ebp-10h] ebx +
mov eax [esi] +
mov ecx [ebp+8] +
mov ecx [ecx] +
mov edx [eax] +
lea esi [ebp-10h] +
push esi  +
push ecx  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [edx+50h]  +
mov [ebp-20h] edi +
mov [ebp-1Ch] eax +
cmp eax ebx +
jnz loc_10668AD  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
call sub_100CA9D  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_104DCDC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 7 +
call sub_100CD14  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_104DD5A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 0FFFFFFFFh +
jz loc_106732D  +
push 0  +
push edi  +
mov ecx esi +
call sub_100CC42  +
test al al +
jz loc_104DD92  +
push [ebp+arg_4]  +
mov ecx esi +
push edi  +
push 0  +
call sub_102C814  +
push edi  +
mov ecx esi +
call sub_100CD14  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
push dword ptr [esi+8]  +
mov ecx edi +
call sub_104DDAE  +
jmp loc_101FE71  +
***
call sub_1001F95  +
mov esi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-1Ch] 3 +
mov [ebp-18h] ebx +
push offset aCpersistorSetn  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [ebp-30h] +
call sub_100AD56  +
push dword ptr [ebp+8]  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call sub_100AE0E  +
cmp eax ebx +
jl loc_106758C  +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [ebp-30h] +
mov [eax+4] ecx +
mov [ebp+8] esp +
mov dword ptr [eax] 9 +
push ds:off_101DD38  +
mov ecx esi +
call sub_101DF07  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call sub_100A77D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
lea eax [ebp-71h] +
push eax  +
lea eax [ebp-9Ch] +
push eax  +
mov ecx edi +
call near ptr dword_102C690+5  +
push eax  +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-9Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-64h] ebx +
jnz loc_10675C0  +
add edi 4 +
mov eax [edi] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-9Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-9Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-64h] ebx +
jnz loc_10675E5  +
mov eax [edi] +
lea ecx [ebp-70h] +
push ecx  +
push eax  +
mov [ebp-70h] ebx +
call ds:GetHGlobalFromStream  +
mov [ebp-68h] esi +
mov [ebp-64h] eax +
cmp eax ebx +
jnz loc_106760A  +
push 48h  +
lea eax [ebp-58h] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
mov ecx edi +
call sub_100A5CF  +
mov ecx [eax] +
push 1  +
lea edx [ebp-58h] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
mov [ebp-68h] esi +
mov [ebp-64h] eax +
cmp eax ebx +
jnz loc_1067623  +
mov [ebp-8Ch] ebx +
mov [ebp-88h] ebx +
mov [ebp-84h] ebx +
push dword ptr [ebp-50h]  +
lea ecx [ebp-8Ch] +
push dword ptr [ebp-70h]  +
mov byte ptr [ebp-4] 3 +
call sub_104DF97  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [ebp-8Ch] +
mov [eax+4] ecx +
mov ecx [ebp-6Ch] +
mov [ebp-90h] esp +
mov dword ptr [eax] 0Dh +
call sub_102F021  +
mov [ebp-8Ch] ebx +
mov [ebp-88h] ebx +
mov [ebp-84h] ebx +
jmp loc_102EFDB  +
***
call sub_1001F95  +
mov edi ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-1Ch] 3 +
mov [ebp-18h] ebx +
push offset aCxmlbinaryAtta  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx edi +
call sub_102E8A5  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-18h] ebx +
jnz loc_1066C1E  +
mov eax [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [edi] eax +
mov eax [ebp+0Ch] +
lea ecx [ebp-1Ch] +
mov [edi+4] eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
push offset word_104E074  +
call SysAllocString  +
mov [ebp+0Ch] eax +
push eax  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 0Ah +
call sub_104D996  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 9 +
call SysFreeString  +
jmp loc_102D5A9  +
***
mov ecx esi +
call sub_104E0C5  +
test byte ptr [edi+10h] 1 +
jz loc_104E0B1  +
lea eax [esi+8] +
cmp dword ptr [eax] 0FFFFFFFFh +
jz loc_104E0B1  +
push ebx  +
push ecx  +
push ecx  +
mov ecx esp +
mov [ebp-30h] esp +
mov dword ptr [ecx] 1 +
mov [ecx+4] eax +
push ds:off_102DC34  +
lea ecx [ebp-60h] +
call sub_101DF07  +
jmp loc_102DBDD  +
cmp dword ptr [esi+8] 0FFFFFFFFh +
jz loc_1067962  +
jmp loc_106796D  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
lea ebx [esi+8] +
cmp dword ptr [ebx] 0FFFFFFFFh +
jz loc_1066434  +
mov eax [ebx] +
pop esi  +
pop ebx  +
retn   +
***
pop esi  +
retn   +
***
mov ecx [eax] +
push edi  +
push edi  +
push 1  +
push eax  +
call dword ptr [ecx+1Ch]  +
jmp loc_1044C93  +
push dword ptr [esi+8Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+50h]  +
mov eax [esi+54h] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [esi+54h] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+0Ch]  +
jmp loc_1044CB0  +
mov [ebp-10h] edi +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push offset loc_10449B4  +
push eax  +
mov [ebp-4] edi +
call dword ptr [ecx]  +
mov eax [ebp-10h] +
cmp eax edi +
jnz loc_1061295  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jz loc_1044CBB  +
jmp loc_10612A4  +
mov [esi+60h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1044CC6  +
mov [esi+54h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1044CE2  +
mov [esi+50h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1044CED  +
mov [esi+5Ch] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1044CF8  +
mov [esi+58h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1044D03  +
***
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov ecx esi +
call sub_1044C61  +
push [ebp+lParam]  +
mov ecx esi +
push [ebp+wParam]  +
push [ebp+Msg]  +
call sub_104455A  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+60h] 0FFFFFFFEh +
mov ecx [eax+3Ch] +
test ecx ecx +
jz loc_104E22A  +
and dword ptr [eax+3Ch] 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi ds:GetWindowLongW +
push 0FFFFFFFCh  +
push dword ptr [esi+4]  +
call edi  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push ebx  +
push 82h  +
mov [ebp+0Ch] eax +
call sub_104455A  +
mov [ebp+8] eax +
mov eax [esi+1Ch] +
cmp eax ds:DefWindowProcW +
jz loc_104E278  +
push 0FFFFFFFCh  +
push dword ptr [esi+4]  +
call edi  +
cmp eax [ebp+0Ch] +
jnz loc_104E278  +
push dword ptr [esi+1Ch]  +
push 0FFFFFFFCh  +
push dword ptr [esi+4]  +
call ds:SetWindowLongW  +
mov eax [esi+4] +
mov edx [esi] +
and dword ptr [esi+4] 0 +
push eax  +
mov ecx esi +
call dword ptr [edx+8]  +
jmp loc_104454B  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1044831  +
***
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jz loc_1052300  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_1062EDA  +
mov esi eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_1062EF8  +
mov [ecx+4] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+2Ch] +
mov dl [edi+2Ch] +
mov [eax+2Ch] dl +
mov [edi+2Ch] cl +
mov ecx [ebp-10h] +
jmp loc_1052352  +
mov eax esi +
jmp loc_105234C  +
***
lea ecx [eax-20h] +
test ecx ecx +
jz loc_1044846  +
push 1  +
call sub_104E30C  +
jmp loc_1044846  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104E332  +
test [ebp+arg_0] 1 +
jz loc_104E326  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1044460 +
mov dword ptr [esi+20h] offset off_10447F4 +
mov dword ptr [esi+24h] offset off_104464C +
mov dword ptr [esi+28h] offset off_10445BC +
mov dword ptr [esi+2Ch] offset off_104457C +
mov dword ptr [esi+30h] offset off_1044C30 +
mov dword ptr [esi+34h] offset off_1044C04 +
mov dword ptr [esi+3Ch] offset off_1044BDC +
mov dword ptr [esi+40h] offset off_1008664 +
mov dword ptr [esi+44h] offset off_1044B7C +
mov dword ptr [esi+48h] offset off_104472C +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+4Ch] 1 +
call sub_1044C61  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_104E3B5  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [esi+0D4h]  +
mov dword ptr [ebp-4] 0Ah +
call SysFreeString  +
mov eax [esi+0C8h] +
test eax eax +
jnz loc_10613AB  +
mov eax [esi+0C4h] +
mov byte ptr [ebp-4] 9 +
test eax eax +
jz loc_104E416  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+6Ch] +
mov byte ptr [ebp-4] 8 +
test eax eax +
jnz loc_10613B6  +
mov eax [esi+68h] +
mov byte ptr [ebp-4] 7 +
test eax eax +
jnz loc_10613C1  +
mov eax [esi+64h] +
mov byte ptr [ebp-4] 6 +
test eax eax +
jnz loc_10613CC  +
mov eax [esi+60h] +
mov byte ptr [ebp-4] 5 +
test eax eax +
jnz loc_10613D7  +
mov eax [esi+5Ch] +
mov byte ptr [ebp-4] 4 +
test eax eax +
jnz loc_10613E2  +
mov eax [esi+58h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jnz loc_10613ED  +
mov eax [esi+54h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jnz loc_10613F8  +
mov eax [esi+50h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jnz loc_1061403  +
mov eax [esi+38h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jnz loc_106140E  +
mov esi [esi+14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_104E4AE  +
push esi  +
call sub_104E4B9  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_104E4C6  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10F5384 +
push [ebp+lpMem]  +
cmp eax 1 +
jz loc_1064EBE  +
push eax  +
call dword_10F5388  +
pop ebp  +
retn 4  +
***
lea eax [ebp+arg_14] +
push eax  +
push [ebp+lParam]  +
mov ecx ebx +
push [ebp+wParam]  +
mov [ebp+arg_14] esi +
push edx  +
call sub_104E1D1  +
cmp [ebp+arg_14] 0 +
mov [edi] eax +
jnz loc_1044974  +
mov edx [ebp+arg_4] +
jmp loc_10443F5  +
***
test esi esi +
jz loc_1044B5F  +
push 1  +
mov ecx esi +
call sub_104E52B  +
jmp loc_1044B5F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104E551  +
test [ebp+arg_0] 1 +
jz loc_104E545  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_1011EFC +
mov dword ptr [esi+4] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
push 4  +
mov eax offset byte_10E0A1F +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1044994 +
mov eax [esi+24h] +
mov dword ptr [ebp-4] 1 +
test eax eax +
jz loc_104E5AC  +
push dword ptr [eax+4]  +
call ds:IsWindow  +
test eax eax +
jnz loc_1061E17  +
mov ecx [esi+24h] +
test ecx ecx +
jz loc_104E5BA  +
push 1  +
call sub_104E5DE  +
mov eax [esi+28h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_104E5CB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+4] +
call sub_101A846  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+14h] +
test eax eax +
jz loc_104E5F3  +
push eax  +
call sub_104E4B9  +
test [ebp+arg_0] 1 +
jz loc_104E600  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104E632  +
test [ebp+arg_0] 1 +
jz loc_104E626  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100894C +
mov dword ptr [esi+20h] offset off_1011EA4 +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+24h] 1 +
call sub_104E73B  +
push offset Addend  +
call ds:InterlockedDecrement  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_104E681  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [esi+44h] +
mov dword ptr [ebp-4] 1 +
test eax eax +
jnz loc_1061D7F  +
mov eax [esi+14h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jnz loc_1061D8A  +
lea ecx [esi+24h] +
call sub_101A846  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104E6EC  +
test [ebp+arg_0] 1 +
jz loc_104E6E0  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1008970 +
mov dword ptr [esi+20h] offset off_1011B1C +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+24h] 1 +
call sub_104E73B  +
push offset Addend  +
call ds:InterlockedDecrement  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_104E681  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+44h] +
test eax eax +
jnz loc_1061611  +
mov esi [esi+4] +
test esi esi +
jnz loc_1061620  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104E783  +
test byte ptr [ebp+8] 1 +
jz loc_104E777  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+48h] +
mov dword ptr [esi] offset off_1004BD4 +
mov dword ptr [esi+44h] offset off_1044688 +
mov dword ptr [edi] offset off_100C448 +
and dword ptr [esi+60h] 0 +
lea ecx [esi+68h] +
mov dword ptr [ebp-4] 2 +
mov dword ptr [ecx] offset off_10083D0 +
call sub_100F62A  +
mov eax [esi+64h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_104E7D4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call sub_104E7F5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CView@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_100C428 +
and dword ptr [ebp-4] 0 +
inc dword ptr [esi+10h]  +
mov [ebp-10h] esi +
mov eax [esi+8] +
mov edi [eax] +
mov byte ptr [ebp-4] 2 +
cmp edi eax +
jz loc_104E83D  +
cmp byte ptr [edi+0Ch] 0 +
jnz loc_104E836  +
mov ecx [edi+8] +
test ecx ecx +
jz loc_104E836  +
push esi  +
call sub_101B028  +
mov edi [edi] +
cmp edi [esi+8] +
jnz loc_104E823  +
lea ecx [ebp-10h] +
call sub_100E76D  +
lea edi [esi+4] +
mov ecx edi +
call sub_100B8AF  +
mov ecx edi +
call sub_100B8F1  +
mov dword ptr [esi] offset off_101AA40 +
call sub_1001FCF  +
retn   +
***
lea edx [ebp+0Ch] +
push edx  +
push dword ptr [ebp+14h]  +
mov [ebp+0Ch] esi +
push dword ptr [ebp+10h]  +
push eax  +
call sub_104E87F  +
jmp loc_1044D1F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0FFFFFFEBh  +
push dword ptr [esi+4]  +
call ds:GetWindowLongW  +
test eax eax +
jz loc_104E89C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call ds:OleUninitialize  +
and dword ptr [esi+4] 0 +
mov eax [ebp+arg_C] +
mov dword ptr [eax] 1 +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov eax edx +
jmp loc_101AFA1  +
***
mov ecx eax +
jmp loc_100DCC2  +
***
mov edx [eax] +
cmp byte ptr [edx+2Ch] 1 +
jz loc_1062F7A  +
mov dl [esi+2Ch] +
mov [eax+2Ch] dl +
mov byte ptr [esi+2Ch] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+2Ch] 1 +
call sub_102B8F4  +
jmp loc_1052360  +
***
mov [ecx+4] eax +
jmp loc_102B933  +
mov [ecx] eax +
jmp loc_102B933  +
***
mov eax 80004001h +
retn 8  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
push eax  +
lea ecx [ebp-22Ch] +
call ??0CString@@QAE@PBG@Z  +
xor esi esi +
push 5Ch  +
lea ecx [ebp-22Ch] +
mov [ebp-4] esi +
call ?ReverseFind@CString@@QBEHG@Z  +
cmp eax 0FFFFFFFFh +
jz loc_104EA22  +
cmp eax 3 +
jl loc_1059333  +
push eax  +
lea eax [ebp-224h] +
push eax  +
lea ecx [ebp-22Ch] +
call ?Left@CString@@QBE?AV1@H@Z  +
mov eax [eax] +
push esi  +
lea ecx [ebp-220h] +
push ecx  +
push 104h  +
push eax  +
call ds:GetFullPathNameW  +
lea ecx [ebp-224h] +
call ??1CString@@QAE@XZ  +
lea eax [ebp-224h] +
push eax  +
mov ecx offset dword_10F54B0 +
call sub_104EA3E  +
lea ecx [ebp-220h] +
push ecx  +
mov ecx eax +
call sub_100C7C5  +
mov ebx eax +
neg ebx  +
sbb bl bl +
lea ecx [ebp-224h] +
inc bl  +
call ??1CString@@QAE@XZ  +
test bl bl +
jnz loc_1059339  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-22Ch] +
call ??1CString@@QAE@XZ  +
call sub_100C50D  +
retn 4  +
***
call sub_1001F95  +
and dword ptr [ebp-14h] 0 +
test byte ptr dword_10F52F8 1 +
mov esi offset dword_10F56EC +
jnz loc_104EA7D  +
or dword_10F52F8 1 +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call ??0CString@@QAE@XZ  +
push offset loc_101DD0F  +
call sub_100BFD5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov eax dword_10F56EC +
cmp dword ptr [eax-8] 0 +
jnz loc_104EAEA  +
call sub_10067E8  +
test eax eax +
jz loc_104EA94  +
mov eax [eax+20h] +
lea ecx [ebp-10h] +
push ecx  +
push 8030h  +
push eax  +
call SHGetSpecialFolderLocation  +
test eax eax +
jl loc_104EAEA  +
push 104h  +
mov ecx esi +
call ?GetBuffer@CString@@QAEPAGH@Z  +
push eax  +
push dword ptr [ebp-10h]  +
call SHGetPathFromIDListW  +
push 0FFFFFFFFh  +
mov ecx esi +
call ?ReleaseBuffer@CString@@QAEXH@Z  +
lea eax [ebp-14h] +
push eax  +
call SHGetMalloc  +
test eax eax +
jl loc_104EAEA  +
mov eax [ebp-14h] +
push dword ptr [ebp-10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov eax [ebp-14h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+8] +
push esi  +
call ??0CString@@QAE@ABV0@@Z  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov ecx [esi+4] +
push eax  +
call sub_102B350  +
jmp loc_1021E2C  +
***
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 3 +
cmp eax ebx +
jz loc_104EB1D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_104EB2E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-18h] edi +
mov [ebp-4] bl +
lea ecx [ebp-3Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
lea ecx [ebp-54h] +
call sub_101DD84  +
push ebx  +
lea eax [ebp-78h] +
push eax  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 2 +
call sub_102C561  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-78h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-48h] ebx +
jnz loc_1067AB1  +
cmp dword ptr [esi+18h] 8 +
mov eax [ebp-38h] +
jb loc_104EBA2  +
mov eax [eax] +
push ebx  +
push eax  +
lea eax [ebp-54h] +
push eax  +
lea eax [ebp-78h] +
push eax  +
call sub_102DC3D  +
push eax  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-78h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-48h] ebx +
jnz loc_1067AE2  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 5 +
call sub_102C3AF  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 6 +
call sub_101ED6F  +
push eax  +
lea eax [ebp-54h] +
push eax  +
lea ecx [ebp-7Ch] +
mov byte ptr [ebp-4] 7 +
call sub_102C353  +
mov eax [ebp-64h] +
mov byte ptr [ebp-4] 9 +
cmp eax ebx +
jz loc_104EC13  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-38h] +
mov byte ptr [ebp-4] 0Ah +
cmp eax ebx +
jz loc_104EC24  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push ebx  +
push ds:off_102D8E0  +
lea eax [ebp-7Ch] +
push eax  +
lea ecx [ebp-0A8h] +
mov byte ptr [ebp-70h] 1 +
call sub_101ECB0  +
push ebx  +
push ds:off_102BAC8  +
lea eax [ebp-0A8h] +
push eax  +
lea ecx [ebp-94h] +
mov byte ptr [ebp-4] 0Bh +
call sub_101ECB0  +
push ebx  +
lea ecx [ebp-30h] +
mov dword ptr [ebp-18h] 7 +
call sub_100CD14  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [ebp-30h] +
mov [eax+4] ecx +
lea ecx [ebp-94h] +
mov byte ptr [ebp-4] 0Dh +
mov [ebp-80h] esp +
mov dword ptr [eax] 0Bh +
call sub_102F021  +
push dword ptr [ebp-60h]  +
lea ecx [ebp-30h] +
call sub_1012340  +
cmp eax ebx +
jnz loc_104ECAE  +
mov eax [ebp-68h] +
mov ecx [ebp-5Ch] +
mov byte ptr [eax] 1 +
lea eax [ebp-54h] +
push eax  +
call sub_101EC83  +
xor esi esi +
push ebx  +
inc esi  +
push esi  +
lea ecx [ebp-30h] +
call sub_100CD3C  +
lea ecx [ebp-94h] +
mov byte ptr [ebp-4] 0Bh +
call sub_101EB25  +
lea ecx [ebp-0A8h] +
mov byte ptr [ebp-4] 0Ah +
call sub_101EB25  +
lea ecx [ebp-7Ch] +
mov byte ptr [ebp-4] 5 +
call sub_101EB25  +
mov ecx [ebp-34h] +
lea eax [ebp-4Ch] +
push eax  +
mov dword ptr [ebp-4] 2 +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-3Ch] esi +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 1 +
call sub_101D546  +
jmp loc_103E952  +
***
cmp [ebp-51h] bl +
jz loc_104ED4B  +
push dword ptr [ebp-8Ch]  +
lea eax [ebp-70h] +
push eax  +
lea eax [ebp-84h] +
push eax  +
call sub_104ED67  +
push eax  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 14h +
call esi  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 11h +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-60h] ebx +
jnz loc_1067ED3  +
mov eax [ebp-94h] +
mov byte ptr [eax] 1 +
jmp loc_103E824  +
cmp al bl +
jz loc_104ED4B  +
jmp loc_103E824  +
***
call sub_100A60E  +
xor ebx ebx +
mov [ebp-18h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-3Ch] 3 +
mov [ebp-38h] ebx +
xor edi edi +
inc edi  +
push offset aCconsolefile_4  +
lea ecx [ebp-3Ch] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push ebx  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_101DDF6  +
push ebx  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call sub_101DDF6  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 4 +
call sub_1045C81  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+10h]  +
call sub_1045C81  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-14h] +
mov [ebp-2Ch] ebx +
call sub_101DE26  +
mov esi SysFreeString +
mov [ebp+10h] ebx +
mov eax [ebp+10h] +
cmp eax [ebp-2Ch] +
jge loc_104EB0C  +
push ebx  +
lea ecx [ebp+0Ch] +
call sub_101E2B5  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 5 +
call sub_101E13F  +
mov [ebp-24h] ebx +
lea eax [ebp-24h] +
push eax  +
push ds:off_1045B94  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 6 +
call sub_1021B0D  +
cmp al bl +
jnz loc_104EEBA  +
push dword ptr [ebp-24h]  +
call esi  +
mov eax [ebp+0Ch] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_104EE50  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp+10h]  +
jmp loc_104EDF1  +
push dword ptr [ebp-24h]  +
call ds:_wtoi  +
pop ecx  +
push ebx  +
lea ecx [ebp-20h] +
mov edi eax +
call sub_101E2B5  +
lea eax [ebp-20h] +
push eax  +
push edi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 7 +
call sub_101E13F  +
mov [ebp-1Ch] ebx +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 8 +
call sub_102C109  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp+0Ch] +
call sub_1045BB5  +
push dword ptr [ebp-1Ch]  +
call esi  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 6 +
cmp eax ebx +
jz loc_104EF14  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor edi edi +
inc edi  +
jmp loc_104EE3A  +
***
lea edi [ebx+2F0h] +
mov esi offset unk_10F5720 +
movs   +
movs   +
movs   +
movs   +
jmp loc_100DBA4  +
xor edx edx +
jmp loc_100DB40  +
***
mov edx [ebp+arg_4] +
jmp loc_100DCC8  +
lea edi [ebx+300h] +
mov esi offset unk_10F5720 +
movs   +
movs   +
movs   +
movs   +
jmp loc_100DD30  +
***
push dword ptr [ebp+14h]  +
mov ecx [esi+6Ch] +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_1027937  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10156A8  +
***
cmp ecx [ebp+arg_8] +
jz loc_1015997  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1015931  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10191ED  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_104EF8E  +
pop edi  +
jmp loc_1015997  +
***
mov eax ecx +
mov ecx [ecx] +
jmp loc_1041F31  +
***
push 38h  +
mov eax offset byte_10E371B +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewtoo_13  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_106425F  +
mov eax [ebp+0Ch] +
mov [ebp-14h] eax +
lea eax [ebp-14h] +
push eax  +
lea ecx [edi+48h] +
call sub_1027BD1  +
mov ebx [edi+30h] +
cmp ebx [edi+34h] +
jz loc_104F0F7  +
push 8000FFFFh  +
push ebx  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104F0F7  +
mov eax [ebp+0Ch] +
cmp [ebx+18h] eax +
jz loc_104F0C6  +
add ebx 54h +
jmp loc_104F044  +
***
push ebx  +
lea eax [ebp-44h] +
push eax  +
lea ecx [edi-4] +
call sub_1050CE9  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_104F088  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp edx [ecx+0Ch] +
jnb loc_104F3BF  +
mov eax ecx +
mov ecx [ecx] +
cmp byte ptr [ecx+11h] 0 +
jnz loc_1027BC8  +
jmp loc_104F128  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_14] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcaxhostwind  +
lea ecx [ebp+var_14] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi 80004001h +
push esi  +
lea ecx [ebp+var_24] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push esi  +
lea ecx [ebp+var_34] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp+var_24] +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
mov bl al +
neg bl  +
sbb bl bl +
lea ecx [ebp+var_34] +
inc bl  +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jnz loc_10610F1  +
mov esi [ebp+arg_0] +
and [ebp+var_4] 0 +
add esi 4 +
mov edi [esi] +
lea ecx [ebp+var_4] +
call sub_100A5E6  +
push eax  +
push esi  +
call dword ptr [edi+14h]  +
push eax  +
lea ecx [ebp+var_14] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1061101  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_0] +
call sub_104F2A1  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1061122  +
lea ecx [ebp+arg_0] +
call sub_100A5CF  +
push [ebp+arg_4]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+1Ch]  +
push eax  +
lea ecx [ebp+var_14] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp+var_14] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov edi eax +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_104F236  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi edi +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_104F2C2  +
push eax  +
call sub_104F2CE  +
test eax eax +
jl loc_106106A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 0 +
push esi  +
jz loc_1061057  +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_104F314  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx ebx +
test esi esi +
jl loc_1061050  +
push [ebp+arg_0]  +
call sub_100CA34  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jz loc_10617C8  +
mov ecx [ebp+arg_0] +
push [ebp+arg_4]  +
add ecx 28h +
call sub_104F34F  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax [ecx] +
mov ecx [eax] +
push offset dword_1044B68  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 4  +
***
mov [ebp+arg_0] edx +
jmp loc_10124C5  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1044831  +
***
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_1051CBD  +
jmp loc_1063587  +
***
mov eax [ebp+10h] +
mov eax [eax] +
and eax 0FFF0h +
cmp eax 0F060h +
jnz loc_104F3AF  +
mov ecx [esi+8] +
test ecx ecx +
jnz loc_100F2F7  +
jmp loc_1009DA2  +
***
cmp eax 0F100h +
jz loc_1063DAF  +
jmp loc_1009DA2  +
***
mov ecx [ecx+8] +
jmp loc_104F135  +
***
push esi  +
mov esi [ebp+arg_8] +
inc dword ptr [esi]  +
lea ecx [ebp+arg_0] +
call sub_1015931  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnz loc_104F3CB  +
pop esi  +
jmp loc_1027C4D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
mov [esi] eax +
mov eax [edi+4] +
mov [esi+4] eax +
mov eax [edi+8] +
mov [esi+8] eax +
mov eax [edi+0Ch] +
mov [esi+0Ch] eax +
mov eax [edi+10h] +
mov [esi+10h] eax +
mov al [edi+14h] +
mov [esi+14h] al +
mov al [edi+15h] +
mov [esi+15h] al +
mov al [edi+16h] +
xor al [esi+16h] +
lea ecx [esi+1Ch] +
and al 1 +
xor [esi+16h] al +
mov eax [edi+18h] +
mov [esi+18h] eax +
lea eax [edi+1Ch] +
push eax  +
call sub_1041CE8  +
add edi 38h +
push edi  +
lea ecx [esi+38h] +
call sub_1041CE8  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 40h  +
mov eax offset dword_10E38CC +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push 0  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewtoo_15  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10642AC  +
push dword ptr [ebp+0Ch]  +
mov eax [esi] +
lea ecx [ebp-3Ch] +
push ecx  +
mov ecx esi +
call dword ptr [eax+1Ch]  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104F7A9  +
mov ebx [esi+30h] +
cmp ebx [esi+34h] +
jz loc_104F7A6  +
push 8000FFFFh  +
push ebx  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104F7A6  +
mov eax [ebp+0Ch] +
cmp [ebx+18h] eax +
jz loc_104F592  +
add ebx 54h +
jmp loc_104F50D  +
***
push ebx  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [esi-4] +
call sub_1050CE9  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 6 +
call edi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104F7A6  +
push ebx  +
lea eax [ebp-14h] +
push eax  +
lea ecx [esi+2Ch] +
call sub_104F5E0  +
mov ebx [eax] +
jmp loc_104F50D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
push esi  +
push eax  +
mov esi ecx +
push dword ptr [esi+8]  +
add eax 54h +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_104F624  +
mov eax [esi+8] +
add esp 10h +
push esi  +
push eax  +
add eax 0FFFFFFACh +
push eax  +
call sub_1016293  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
add dword ptr [esi+8] 0FFFFFFACh +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_104F656  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
mov ecx [ebp+arg_C] +
cmp esi [ebp+arg_8] +
jz loc_104F676  +
push esi  +
call sub_104F3E8  +
add [ebp+arg_C] 54h +
add esi 54h +
jmp loc_104F65F  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn   +
***
cmp ecx [ebp+arg_8] +
jz loc_10119DA  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1051C93  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_104F6B1  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_104F688  +
pop edi  +
jmp loc_10119DA  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+1Dh] 0 +
jnz loc_105C22C  +
lea ecx [ebp+0Ch] +
call sub_1051C93  +
mov edx [edi] +
cmp byte ptr [edx+1Dh] 0 +
jz loc_105C25E  +
mov ebx [edi+8] +
cmp byte ptr [ebx+1Dh] 0 +
mov esi [edi+4] +
jz loc_105C280  +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jz loc_105C288  +
cmp [esi] edi +
jnz loc_104F759  +
mov [esi] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_104F71E  +
cmp byte ptr [ebx+1Dh] 0 +
jz loc_105C290  +
mov eax esi +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jz loc_105C29E  +
cmp byte ptr [edi+1Ch] 1 +
jz loc_105C3D2  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_104F749  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1001FCF  +
retn 8  +
mov [esi+8] ebx +
jmp loc_104F706  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 3204h +
push ebx  +
push esi  +
mov ebx ecx +
jz loc_104F794  +
mov esi 33AFh +
cmp [ebp+8] esi +
jz loc_1060269  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ?OnSysCommand@CFrameWnd@@IAEXIJ@Z  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_10B2591  +
jmp loc_104F78E  +
***
xor ebx ebx +
inc ebx  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [esi+3Ch] +
call sub_104F7EB  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push [ebp+arg_0]  +
lea eax [ebp+var_8] +
push eax  +
mov esi ecx +
call sub_1041F40  +
and [ebp+arg_0] 0 +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call sub_104F835  +
add esp 0Ch +
push [ebp+var_4]  +
lea eax [ebp+var_4] +
push [ebp+var_8]  +
mov ecx esi +
push eax  +
call sub_10119AE  +
mov eax [ebp+arg_0] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_104F856  +
add esp 10h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_104F87A  +
push esi  +
mov esi [ebp+arg_8] +
inc dword ptr [esi]  +
lea ecx [ebp+arg_0] +
call sub_1051C93  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnz loc_104F867  +
pop esi  +
pop ebp  +
retn   +
***
push esi  +
mov esi ds:CoCreateInstance +
cmp ax 4Dh +
jz loc_10614EA  +
cmp ax 6Dh +
jz loc_10614EA  +
push edi  +
call ds:lstrlenW  +
cmp eax 0FFh +
jge loc_104F8D1  +
cmp word ptr [edi] 7Bh +
lea eax [ebp+rclsid] +
push eax  +
push edi  +
jnz loc_104F8E4  +
call ds:CLSIDFromString  +
test eax eax +
jl loc_1061579  +
push [ebp+ppv]  +
lea eax [ebp+rclsid] +
push [ebp+riid]  +
push 15h  +
push 0  +
push eax  +
call esi  +
mov [ebp+var_18] eax +
cmp [ebp+var_18] 0 +
jl loc_1061579  +
mov eax [ebp+var_18] +
pop esi  +
jmp loc_1047038  +
call ds:CLSIDFromProgID  +
jmp loc_104F8B6  +
***
cmp dword ptr [eax+40h] 8 +
jb loc_104F925  +
mov ecx [eax+2Ch] +
test ecx ecx +
jz loc_1062380  +
cmp dword ptr [eax+40h] 8 +
mov ecx [eax+70h] +
jb loc_104F92A  +
mov eax [eax+2Ch] +
push dword ptr [ebp+14h]  +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-40h] +
push eax  +
mov ecx ebx +
call sub_104F934  +
mov byte ptr [ebp-4] 3 +
jmp loc_10477A0  +
lea ecx [eax+2Ch] +
jmp loc_104F8F5  +
add eax 2Ch +
jmp loc_104F909  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
mov ebx [ebp+0Ch] +
and dword ptr [ebp-28h] 0 +
mov [ebp-24h] eax +
mov eax [ebp+10h] +
mov [ebp-4Ch] eax +
mov eax [ebp+18h] +
mov [ebp-40h] ecx +
push 0  +
lea ecx [ebp-38h] +
mov [ebp-64h] ebx +
mov [ebp-44h] eax +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCocxhostview_2  +
lea ecx [ebp-38h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi 80070057h +
push edi  +
push dword ptr [ebp-44h]  +
lea eax [ebp-60h] +
push dword ptr [ebp-4Ch]  +
push ebx  +
push eax  +
call sub_100CB6E  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ebx  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10621BC  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-4Ch]  +
call ds:CLSIDFromString  +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104FFB2  +
and dword ptr [ebp-3Ch] 0 +
mov ecx [ebp-40h] +
lea eax [ebp-60h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_1046F5D  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 4 +
call ebx  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104FFB2  +
mov eax [ebp+14h] +
and eax 2 +
mov [ebp-50h] eax +
jz loc_104FA80  +
mov eax [ebp-44h] +
mov eax [eax] +
mov ecx [ebp-40h] +
add ecx 64h +
mov [ebp-48h] eax +
call sub_100A5E6  +
push eax  +
mov eax [ebp-48h] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp-64h]  +
lea esi [ebp-20h] +
push dword ptr [ebp-44h]  +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+30h]  +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10621DD  +
xor esi esi +
inc esi  +
mov edi 80070057h +
mov ecx [ebp-40h] +
lea eax [ecx+64h] +
mov [ebp-68h] eax +
mov eax [eax] +
xor edx edx +
cmp eax edx +
jnz loc_104FF04  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-60h] +
push eax  +
mov [ebp-48h] edx +
call sub_10490CA  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 5 +
call ebx  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104FFB2  +
lea eax [ebp-3Ch] +
push eax  +
push 0  +
push 0  +
push dword ptr [ebp-4Ch]  +
push dword ptr [ebp-48h]  +
call sub_104FCA9  +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104FFBA  +
push edi  +
push dword ptr [ebp-3Ch]  +
lea eax [ebp-60h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 6 +
call ebx  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104FFBA  +
and dword ptr [ebp-40h] 0 +
lea eax [ebp-40h] +
push eax  +
call sub_104817D  +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104FFBA  +
push edi  +
push dword ptr [ebp-40h]  +
lea eax [ebp-60h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 7 +
call ebx  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104FFBA  +
mov edi [ebp-3Ch] +
mov ecx [ebp-40h] +
push edi  +
push dword ptr [ebp-48h]  +
lea eax [ebp-60h] +
push eax  +
call sub_10478FB  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 8 +
call ebx  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104FC36  +
mov ebx [ebp-68h] +
lea eax [ebp-40h] +
push eax  +
mov ecx ebx +
call sub_10479E5  +
cmp dword ptr [ebp-50h] 0 +
jz loc_104FC16  +
mov eax [ebx] +
mov ecx [ebp-44h] +
mov ecx [ecx] +
push eax  +
sub esp 10h +
mov edi esp +
push dword ptr [ebp-64h]  +
lea esi [ebp-20h] +
push dword ptr [ebp-44h]  +
movs   +
movs   +
movs   +
movs   +
call dword ptr [ecx+38h]  +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_106221D  +
mov edi [ebp-3Ch] +
xor esi esi +
inc esi  +
mov eax [ebp-44h] +
mov ecx [eax] +
push edi  +
push dword ptr [ebp-64h]  +
push eax  +
call dword ptr [ecx+3Ch]  +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp-24h] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov byte ptr [ebp-4] 1 +
mov [ebp-28h] esi +
test edi edi +
jz loc_104FC54  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-24h] +
call sub_100C50D  +
retn 14h  +
***
call sub_100A4F0  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jz loc_1061F28  +
mov [ebp-1Ch] edi +
mov [ebp+8] edi +
lea eax [ebp+8] +
push eax  +
push edi  +
call sub_1050233  +
test eax eax +
jz loc_1061F32  +
mov [ebp-4] edi +
push edi  +
push offset dword_100CA88  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+4] +
call sub_104FD39  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_105014D  +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 14h  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
lea eax [ebp-10h] +
push eax  +
push offset loc_1047184  +
mov [ebp-4] ebx +
call sub_104902B  +
cmp eax ebx +
jl loc_1061EF5  +
mov [ebp-14h] ebx +
push dword ptr [ebp+1Ch]  +
mov eax [ebp-10h] +
push dword ptr [ebp+18h]  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 1 +
push dword ptr [esi]  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi ebx +
jl loc_1061ED3  +
mov ecx [ebp+14h] +
cmp ecx ebx +
jz loc_104FDA3  +
mov eax [ebp-14h] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov ecx [ebp+10h] +
cmp ecx ebx +
jnz loc_1061EE5  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_104FDBE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_104FDCF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
call sub_1001FCF  +
retn 18h  +
***
cmp [ecx+14h] eax +
jz loc_1050E85  +
pop ebp  +
retn 4  +
***
mov byte ptr [ebp+0Ch] 0 +
jmp loc_10250DE  +
mov byte ptr [ebp+14h] 0 +
jmp loc_10251EA  +
***
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_1017D06  +
mov [eax] ebx +
jmp loc_1017D06  +
***
mov eax [eax] +
jmp loc_1024CD4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+6Ch] +
mov ecx [ebp+arg_4] +
and al 8 +
movzx eax al +
neg eax  +
sbb eax eax +
mov [ecx] ax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
or dword ptr [esi+60h] 1 +
push 0  +
push 1  +
push dword ptr [esi+2Ch]  +
call ds:OleLockRunning  +
mov eax [esi+2Ch] +
and dword ptr [esi+60h] 0FFFFFFF7h +
mov ecx [eax] +
add esi 3Ch +
push esi  +
push offset dword_10478B8  +
push eax  +
call dword ptr [ecx]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
push eax  +
lea ecx [ebp-18h] +
call sub_1047541  +
mov eax [edi] +
push dword ptr [ebp-18h]  +
mov ecx [eax] +
and dword ptr [ebp-4] 0 +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1047306  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1047306  +
mov eax [ebp-20h] +
test eax eax +
jz loc_1047321  +
cmp dword ptr [ebp+10h] 0 +
mov ecx [eax] +
jnz loc_10617D2  +
push eax  +
call dword ptr [ecx+20h]  +
jmp loc_1047321  +
***
cmp [ebp+arg_18] ebx +
jz loc_1047263  +
jmp loc_1061AFE  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_10447DD  +
***
push edx  +
push offset off_10F962C  +
push offset off_10F788C  +
push edx  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
test eax eax +
jz loc_1062233  +
lea ecx [ebp-3Ch] +
push ecx  +
lea ecx [ebp-60h] +
push ecx  +
mov ecx eax +
call sub_1047D99  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 9 +
call ebx  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104FFBA  +
mov ecx [ebp-40h] +
mov eax [ecx] +
call dword ptr [eax+110h]  +
mov [ebp-50h] eax +
test eax eax +
jz loc_1062243  +
push edi  +
mov edi [ebp-3Ch] +
push edi  +
lea eax [ebp-60h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0Ah +
call ebx  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_104FC36  +
mov eax [ebp-50h] +
push esi  +
push dword ptr [eax+4]  +
call ds:ShowWindow  +
jmp loc_104FC36  +
lea eax [ebp-38h] +
jmp loc_10621D1  +
lea eax [ebp-38h] +
jmp loc_10621F6  +
***
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
jmp loc_10198FC  +
***
cmp byte ptr [ebp+0Ch] 0 +
jz loc_106402A  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_104334E  +
mov [eax] ebx +
jmp loc_104334E  +
***
push esi  +
mov esi [edx] +
cmp esi [eax+0Ch] +
mov edi eax +
setb byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jz loc_1050015  +
mov eax [eax] +
cmp byte ptr [eax+1Dh] 0 +
jz loc_104FFF8  +
pop esi  +
jmp loc_10432DF  +
mov eax [eax+8] +
jmp loc_1050009  +
***
push dword ptr [ebp+18h]  +
push dword ptr [ebp-14h]  +
push dword ptr [ebx+60h]  +
call sub_1041B8B  +
jmp loc_10430ED  +
***
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcaxhostwi_0  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
test byte ptr [ebp+arg_10] 2 +
jz loc_10500A1  +
cmp [ebp+arg_4] 0FFFFFD39h +
jz loc_1061080  +
cmp [ebp+arg_4] 0FFFFFD38h +
jz loc_10610D5  +
push [ebp+arg_20]  +
mov ecx offset off_10F575C +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_105010F  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
pop esi  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
call sub_1050E75  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1050143  +
push [ebp+arg_20]  +
mov eax [esi+0Ch] +
push [ebp+arg_1C]  +
mov ecx [eax] +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+2Ch]  +
pop esi  +
pop ebp  +
retn 24h  +
***
call sub_105015C  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10F53D0 0 +
jnz loc_1050186  +
push offset aDeactivateactc  +
push offset aKernel32_dll  +
call ds:GetModuleHandleA  +
push eax  +
call ds:__imp_GetProcAddress  +
mov dword_10F53CC eax +
mov eax dword_10F53CC +
mov dword_10F53D0 1 +
test eax eax +
jz loc_10662E4  +
pop ebp  +
jmp eax  +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_1042627  +
mov ecx esi +
mov edi eax +
call sub_104260B  +
push dword ptr [ebp+8]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jnb loc_106433D  +
push 1  +
push eax  +
call sub_1042E1B  +
mov [esi+8] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10F53C8 +
test eax eax +
jnz loc_1050271  +
cmp dwErrCode eax +
jnz loc_10662C8  +
push offset aActivateactctx  +
push offset aKernel32_dll  +
call ds:GetModuleHandleA  +
push eax  +
call ds:__imp_GetProcAddress  +
mov dword_10F53C8 eax +
test eax eax +
jz loc_106629A  +
pop ebp  +
jmp eax  +
***
push 507h  +
push 0  +
push 0  +
push eax  +
call ds:RedrawWindow  +
mov ecx ebx +
call sub_1050295  +
jmp loc_10471CB  +
***
mov edi edi +
push esi  +
lea esi [ecx+0B4h] +
test byte ptr [esi] 10h +
jz loc_106185C  +
push 1  +
call sub_10502C0  +
test eax eax +
jz loc_1061865  +
and dword ptr [esi] 0FFFFFFEFh +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
mov edi [esi+14h] +
push 0FFFFFFFCh  +
push dword ptr [esi+4]  +
call ds:GetWindowLongW  +
mov ecx eax +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_1050307  +
push dword ptr [esi+1Ch]  +
push 0FFFFFFFCh  +
push dword ptr [esi+4]  +
call ds:SetWindowLongW  +
test eax eax +
jz loc_1050301  +
mov eax ds:DefWindowProcW +
mov [esi+1Ch] eax +
mov eax [esi+4] +
and dword ptr [esi+4] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
cmp edi ecx +
jz loc_10502E0  +
jmp loc_1050301  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcappExitins  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call sub_10067E8  +
cmp eax ebx +
jnz loc_1050488  +
xor eax eax +
push eax  +
call ds:IsWindow  +
test eax eax +
jnz loc_1057F94  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
call ds:?ScSetConsoleEventDispatcher@CConsoleEventDispatcherProvider@@SG?AVSC@mmcerror@@PAVCConsoleEventDispatcher@@@Z  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1057FA5  +
push ebx  +
lea ecx [edi+0E8h] +
call sub_1010F11  +
mov ecx edi +
call ?RunEmbedded@CWinApp@@QAEHXZ  +
mov esi offset unk_10F5658 +
test eax eax +
jnz loc_1050490  +
mov ecx edi +
call ?RunAutomated@CWinApp@@QAEHXZ  +
test eax eax +
jnz loc_1050490  +
push esi  +
call sub_105260F  +
mov [ebp-10h] ebx +
lea eax [ebp-10h] +
push eax  +
push offset stru_105049C  +
push 3  +
push ebx  +
push offset stru_10504D8  +
mov byte ptr [ebp-4] 2 +
call ds:CoCreateInstance  +
cmp eax ebx +
jnz loc_1050401  +
mov eax [ebp-10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp-10h] +
cmp eax ebx +
jz loc_1050401  +
mov [ebp-10h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-30h] +
push eax  +
lea ecx [edi+100h] +
call sub_105050A  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1057FB3  +
mov ecx edi +
call sub_10509E6  +
call sub_1050C10  +
call sub_1050B65  +
call UnInitThread  +
call sub_1050B9E  +
mov ecx edi +
call ?ExitInstance@CWinApp@@UAEHXZ  +
mov esi eax +
call sub_10507BA  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jnz loc_1057FC1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn   +
mov eax [eax+20h] +
jmp loc_105034C  +
push esi  +
call sub_1070A03  +
jmp loc_10503C0  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002614 +
call sub_100B681  +
mov dword ptr [esi] offset off_100257C +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-24h] +
mov [ebp-14h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcprotocol_0  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [esi] 0 +
jz loc_1061145  +
mov [ebp-10h] edi +
push edi  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_100A5E6  +
push eax  +
push edi  +
call CoInternetGetSession  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_106115A  +
push 80004003h  +
push dword ptr [ebp-10h]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10505EC  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov ecx [esi+4] +
mov edx [eax] +
push offset aMmc  +
push ecx  +
push eax  +
call dword ptr [edx+10h]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10505EC  +
lea ecx [esi+4] +
cmp [ecx] edi +
jz loc_10505E9  +
call sub_100C474  +
mov byte ptr [esi] 0 +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-10h] +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
cmp eax edi +
jz loc_105060C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov eax esi +
jmp loc_105206A  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1002565  +
mov ecx esi +
test eax eax +
jnz loc_105FFB3  +
call sub_100A67D  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1ClassInfoBase@DirectUI@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jnz loc_106A782  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ecx  +
call sub_1050BCE  +
and dword_10F53E8 0 +
retn   +
***
mov edi edi +
push ecx  +
call sub_1050BCE  +
and dword_10F53EC 0 +
retn   +
***
sti   +
call dword ptr [eax-6F6F6F70h]  +
jmp ?Release@ClassInfoBase@DirectUI@@UAEHXZ  +
***
mov ds:9090FFFBh al +
nop   +
nop   +
nop   +
mov ecx offset unk_10F5620 +
jmp sub_100A77D  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov ecx offset unk_10F5408 +
jmp sub_100B8F1  +
***
mov eax eax +
retn   +
***
mov eax eax +
retn   +
***
mov off_10F5438 offset off_100A72C +
mov ecx offset off_10F5438 +
jmp sub_100A6F0  +
***
mov ecx offset dword_10F5798 +
jmp sub_100B83A  +
***
mov edi edi +
push esi  +
mov esi lpDst +
push edi  +
mov edi offset lpDst +
cmp esi edi +
jz loc_10507F6  +
test esi esi +
jz loc_10507F0  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_10507EC  +
push ecx  +
push eax  +
call EtwUnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
jmp loc_10507CD  +
mov lpDst edi +
pop edi  +
pop esi  +
retn   +
***
mov ecx offset unk_10F5778 +
jmp loc_105080A  +
mov dword ptr [ecx] offset off_100C16C +
jmp sub_1050817  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+1Ch] 0 +
jnz loc_106885E  +
pop esi  +
retn   +
***
mov ecx offset dword_10F54B0 +
jmp sub_1050839  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+0C4h] +
lea ebx [esi+0D4h] +
mov dword ptr [esi] offset off_10024A4 +
mov dword ptr [edi] offset off_100AA34 +
mov dword ptr [ebx] offset off_100B658 +
mov dword ptr [esi+0E4h] offset off_100C0D4 +
lea ecx [esi+148h] +
mov dword ptr [ebp-4] 8 +
call sub_100A77D  +
lea ecx [esi+130h] +
call sub_100B8F1  +
lea ecx [esi+128h] +
mov byte ptr [ebp-4] 6 +
call sub_10504ED  +
lea ecx [esi+120h] +
mov byte ptr [ebp-4] 5 +
call sub_100BF07  +
lea ecx [esi+108h] +
mov byte ptr [ebp-4] 4 +
call sub_105067C  +
mov eax [esi+104h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jnz loc_10584CB  +
mov eax [esi+0E8h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jnz loc_10584D6  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_100C3CD  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call sub_100C3CD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CWinApp@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov ecx offset unk_10F5700 +
jmp loc_1050923  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp-4] +
push eax  +
mov ecx esi +
call sub_1050957  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_1050985  +
cmp [ebp+arg_8] eax +
jnz loc_1050985  +
mov ecx esi +
call sub_1050994  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_105097B  +
jmp loc_10639A7  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_10509C1  +
mov eax [esi] +
mov [eax+4] eax +
mov eax [esi] +
and dword ptr [edi+8] 0 +
mov [eax] eax +
mov esi [esi] +
pop edi  +
mov [esi+8] esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+2Dh] 0 +
mov ebx ecx +
mov esi edi +
jz loc_1063787  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
lea eax [ebp-1Ch] +
push eax  +
call sub_1050A44  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1057B61  +
call ds:CoFreeUnusedLibraries  +
add esi 0ECh +
cmp dword ptr [esi] 1 +
jnz loc_1050A2C  +
call ds:OleUninitialize  +
and dword ptr [esi] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCamcappScunini  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [esi+13Ch] bl +
jnz loc_1057B0F  +
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CMultiDocTemplate@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1050B19  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CDocManager@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1050B4E  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi offset unk_10F53AC +
mov ecx esi +
call sub_100C124  +
dec dword_10F53A8  +
jnz loc_1050B88  +
call sub_1050B95  +
mov byte_10F53A4 0 +
mov ecx esi +
pop esi  +
jmp sub_100C14C  +
***
inc eax  +
retn   +
***
retn   +
***
mov edi edi +
push ecx  +
call sub_1050BCE  +
and dword_10F53E4 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push 0  +
mov ecx esi +
call dword ptr [eax+48h]  +
push esi  +
call sub_1050BF0  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov eax Destination +
cmp eax 0FFFFFFFFh +
jz loc_1050C27  +
push eax  +
call sub_1050C3A  +
or Destination 0FFFFFFFFh +
cmp dword_10F879C 0 +
jnz loc_106A85E  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:ReleaseActCtx  +
***
call sub_100A60E  +
mov ebx [ebp+8] +
xor eax eax +
cmp ebx eax +
jz loc_1057D43  +
push 0Ch  +
mov [ebp-14h] eax +
mov [ebp-18h] eax +
mov [ebp-4] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov esi eax +
test esi esi +
jz loc_1057D5E  +
mov eax [ebp+0Ch] +
mov [esi] eax +
mov eax [ebp+10h] +
lea edi [ebx+1Ch] +
push edi  +
mov [esi+4] eax +
call ds:EnterCriticalSection  +
lea eax [ebx+80h] +
mov ecx [eax] +
mov [esi+8] ecx +
push edi  +
mov [eax] esi +
call ds:LeaveCriticalSection  +
mov eax [ebp-14h] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset dword_1050CD4  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewtoo_14  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
push 80070057h  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1063EA4  +
test [edi+68h] bl +
jz loc_1050DEE  +
test [esi+16h] bl +
jz loc_1050DEE  +
mov edi [edi+6Ch] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1050DEE  +
push dword ptr [esi+4]  +
mov ecx edi +
call sub_1015C07  +
mov [ebp+0Ch] eax +
mov eax [esi+4] +
push ebx  +
push eax  +
mov ecx edi +
call sub_1015B5F  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1018D4E  +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1050DEE  +
and byte ptr [esi+16h] 0FEh +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
cmp [esi+0Ch] ebx +
jnz loc_105803A  +
push offset stru_10F5674  +
xor edi edi +
call ds:EnterCriticalSection  +
cmp [esi+0Ch] ebx +
jnz loc_1050F6F  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+8]  +
movzx eax word ptr [esi+0Ah] +
push eax  +
movzx eax word ptr [esi+8] +
push eax  +
push dword ptr [esi+4]  +
call LoadRegTypeLib  +
mov edi eax +
cmp edi ebx +
jl loc_1050F6F  +
mov [ebp+8] ebx +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push dword ptr [esi]  +
mov [ebp-4] ebx +
push eax  +
call dword ptr [ecx+18h]  +
mov edi eax +
cmp edi ebx +
jl loc_1050F55  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-10h] +
call sub_100CC1D  +
mov [ebp-14h] ebx +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 2 +
call sub_1050CB8  +
test eax eax +
jl loc_1050F28  +
push dword ptr [ebp-14h]  +
lea eax [ebp-10h] +
push eax  +
call sub_100CA9D  +
mov eax [ebp-10h] +
push esi  +
push offset loc_1053122  +
push offset unk_10F5658  +
mov [ebp-10h] ebx +
mov [esi+0Ch] eax +
call sub_1050C4B  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1050F52  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-4] bl +
mov eax [ebp-18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1050F6F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_1050F85  +
cmp [esi+14h] ebx +
jnz loc_1050F85  +
push eax  +
mov ecx esi +
call sub_1050F9F  +
mov edi eax +
push offset stru_10F5674  +
call ds:LeaveCriticalSection  +
mov eax edi +
call sub_1001FCF  +
retn 4  +
***
call sub_100A60E  +
mov ebx ecx +
mov [ebp-18h] ebx +
mov edi [ebp+8] +
mov eax [edi] +
lea ecx [ebp-24h] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
mov [ebp-1Ch] eax +
test eax eax +
jl loc_10510E6  +
mov eax [ebp-24h] +
movzx esi word ptr [eax+2Ch] +
and dword ptr [ebp-14h] 0 +
mov [ebx+18h] esi +
test esi esi +
jz loc_1051035  +
and dword ptr [ebp-4] 0 +
xor ecx ecx +
push 0Ch  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call sub_100F31C  +
pop ecx  +
mov [ebp-28h] eax +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10510F1  +
push offset loc_105319B  +
push offset loc_10510FD  +
push esi  +
mov [eax] esi +
add eax 4 +
push 0Ch  +
push eax  +
mov [ebp-20h] eax +
call sub_100C8DF  +
mov eax [ebp-20h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-14h] eax +
mov eax [ebx+18h] +
xor ecx ecx +
cmp eax ecx +
jz loc_1051047  +
cmp [ebp-14h] ecx +
jz loc_1057FE1  +
cmp eax ecx +
mov [ebp-18h] ecx +
jle loc_10510D7  +
mov esi [ebp-14h] +
add esi 8 +
mov eax [edi] +
lea ecx [ebp-20h] +
push ecx  +
push dword ptr [ebp-18h]  +
push edi  +
call dword ptr [eax+14h]  +
mov [ebp-1Ch] eax +
xor eax eax +
cmp [ebp-1Ch] eax +
jl loc_105801F  +
mov [ebp+8] eax +
mov ecx [edi] +
push eax  +
push eax  +
push eax  +
lea eax [ebp+8] +
push eax  +
mov eax [ebp-20h] +
push dword ptr [eax]  +
mov dword ptr [ebp-4] 3 +
push edi  +
call dword ptr [ecx+30h]  +
mov [ebp-1Ch] eax +
test eax eax +
jl loc_1057FEE  +
mov eax [ebp+8] +
and dword ptr [ebp+8] 0 +
push eax  +
mov [esi-8] eax +
call SysStringLen  +
mov [esi-4] eax +
mov eax [ebp-20h] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
mov ecx [edi] +
push edi  +
call dword ptr [ecx+50h]  +
push dword ptr [ebp+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call SysFreeString  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
add esi 0Ch +
cmp eax [ebx+18h] +
jl loc_1051058  +
mov eax [ebp-14h] +
push dword ptr [ebp-24h]  +
mov [ebx+14h] eax +
mov eax [edi] +
push edi  +
call dword ptr [eax+4Ch]  +
mov eax [ebp-1Ch] +
call sub_1001FCF  +
retn 4  +
xor eax eax +
jmp loc_105102E  +
***
mov eax ecx +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
or dword ptr [eax+8] 0FFFFFFFFh +
retn   +
***
cmp dword ptr [esi+0F8h] 1 +
jnz loc_1009B2D  +
mov ecx esi +
mov byte ptr [esi+0F7h] 1 +
call sub_100942E  +
cmp eax ebx +
jz loc_1051141  +
push ebx  +
push ebx  +
push 10h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
mov [esi+0F6h] bl +
jmp loc_1009B2D  +
***
call sub_1001F95  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+60h]  +
movzx edi byte ptr [esi+123h] +
mov ecx esi +
mov [ebp-14h] eax +
call sub_10512F5  +
mov ebx 0F103h +
test al al +
jz loc_104A75F  +
cmp byte ptr [esi+122h] 0 +
jz loc_1051198  +
cmp dword_10F55CC 0 +
jz loc_10591D5  +
xor eax eax +
inc eax  +
call sub_1001FCF  +
retn   +
***
mov byte_10F55A7 0 +
call sub_1051397  +
test al al +
jz loc_10511CF  +
cmp byte_10F52C3 0 +
jnz loc_10511CF  +
mov ecx esi +
mov byte_10F52C3 1 +
call ?OnClose@CFrameWnd@@IAEXXZ  +
mov byte_10F52C3 0 +
pop esi  +
retn   +
***
call sub_1001F95  +
xor ebx ebx +
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-4] ebx +
mov [ebp-44h] ebx +
mov [ebp-40h] ebx +
mov [ebp-3Ch] ebx +
mov edi ds:FindWindowExW +
push ebx  +
push offset aMmcdatawindow  +
mov byte ptr [ebp-4] 1 +
push ebx  +
push ebx  +
call edi  +
mov [ebp-18h] eax +
cmp eax ebx +
jnz loc_10604AC  +
mov [ebp-1Ch] ebx +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov byte ptr [ebp-4] 2 +
mov [ebp-20h] ebx +
call ds:?FindAllSnapinUIThreads@BookKeeping@@SGJPAPAKPAK@Z  +
cmp eax ebx +
jl loc_106053D  +
xor esi esi +
cmp [ebp-20h] ebx +
jbe loc_105126E  +
lea eax [ebp-18h] +
push eax  +
mov eax [ebp-1Ch] +
push offset fn  +
mov [ebp-18h] ebx +
push dword ptr [eax+esi*4]  +
call ds:EnumThreadWindows  +
push dword ptr [ebp-18h]  +
call ds:IsWindow  +
test eax eax +
jnz loc_1060571  +
inc esi  +
cmp esi [ebp-20h] +
jb loc_105123F  +
cmp [ebp-34h] ebx +
jnz loc_10512C8  +
xor eax eax +
cmp eax ebx +
setnz byte ptr [ebp-0Dh]  +
cmp [ebp+0Ch] bl +
jz loc_10512A5  +
mov [ebp-28h] ebx +
cmp [ebp-34h] ebx +
jnz loc_1060582  +
cmp [ebp-0Dh] bl +
jnz loc_10605D4  +
mov esi [ebp-40h] +
mov edi [ebp-44h] +
sub esi edi +
cmp edi ebx +
jnz loc_106064D  +
lea ecx [ebp-1Ch] +
call sub_100C763  +
lea ecx [ebp-48h] +
call sub_100A67D  +
lea ecx [ebp-38h] +
call sub_100A67D  +
mov al [ebp-0Dh] +
call sub_1001FCF  +
retn 8  +
mov eax [ebp-30h] +
sub eax [ebp-34h] +
sar eax 2 +
jmp loc_1051275  +
***
cmp byte ptr [ecx+122h] 0 +
mov eax dword_10F55CC +
jz loc_1051307  +
test eax eax +
jz loc_1051321  +
mov ecx [ecx+10Ch] +
shr ecx 2 +
test cl 1 +
jz loc_104AE62  +
test eax eax +
jz loc_104AE62  +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1051345  +
cmp byte ptr [eax+19h] 5 +
jnb loc_10606B4  +
cmp byte_10F55A7 0 +
jnz loc_10511A1  +
mov byte_10F55A6 1 +
pop esi  +
retn   +
***
jmp ds:?SaveAllModified@CDocTemplate@@UAEHXZ  +
***
jmp ds:?SaveAllModified@CDocManager@@UAEHXZ  +
***
call sub_1001F95  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
call sub_10067E8  +
mov esi eax +
test esi esi +
jz loc_106067E  +
push dword ptr [esi+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_106067E  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call ?GetWindowTextW@CWnd@@QBEXAAVCString@@@Z  +
push dword ptr [ebp-10h]  +
lea eax [ebp-14h] +
push 342Eh  +
push eax  +
call sub_105142C  +
push 1  +
lea eax [ebp-14h] +
push eax  +
call sub_10511D6  +
test al al +
lea ecx [ebp-10h] +
setz bl  +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
mov al bl +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_105144B  +
pop ebp  +
retn 0Ch  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
call ?Empty@CString@@QAEXXZ  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
call sub_101220E  +
test eax eax +
jz loc_1062BD8  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
call ?AfxFormatStrings@@YGXAAVCString@@PBGPBQBGH@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+hWnd] +
push edi  +
mov edi [ebp+arg_4] +
push esi  +
call ds:IsWindow  +
test eax eax +
jz loc_10514E8  +
push esi  +
call ds:IsWindowVisible  +
test eax eax +
jnz loc_106010D  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 9  +
mov esi ecx +
pop eax  +
mov [esi] ax +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
test eax eax +
jnz loc_1057BF2  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov ebx ecx +
mov [ebp-18h] ebx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-38h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCamcappOnclose  +
lea ecx [ebp-38h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-28h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058A1A  +
mov eax [ebx+0E8h] +
push 4  +
pop ebx  +
test eax eax +
jnz loc_1058A2F  +
push edi  +
lea ecx [ebp-58h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov byte ptr [ebp-4] 3 +
mov dword ptr [ebp-10h] 2 +
push eax  +
lea ecx [ebp-38h] +
call esi  +
test byte ptr [ebp-10h] 8 +
mov [ebp-4] ebx +
jnz loc_1058A5C  +
mov dword ptr [ebp-4] 3 +
test [ebp-10h] bl +
jnz loc_1058A6E  +
test byte ptr [ebp-10h] 2 +
mov [ebp-4] edi +
jz loc_1051647  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-58h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1051683  +
push edi  +
lea ecx [ebp-58h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 6 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-58h] +
mov bl al +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jz loc_1058A88  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-10h] edi +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push ebx  +
push offset aMmcdatawindow  +
push ebx  +
push ebx  +
mov [ebp+dwProcessId] ebx +
call ds:FindWindowExW  +
mov [ebp+hWnd] eax +
cmp eax ebx +
jnz loc_10590A4  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1052F4F  +
test byte ptr [ebp+8] 1 +
jz loc_105172B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
test eax eax +
jz loc_1051749  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi] +
test esi esi +
jz loc_1051755  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
lea edi [esi+0E0h] +
push ebx  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_100EB41  +
test al al +
jz loc_10517A1  +
mov ecx edi +
call sub_100A5CF  +
mov edi [eax] +
lea ecx [ebp-10h] +
mov [ebp-14h] eax +
add edi 14h +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp-14h]  +
call dword ptr [edi]  +
cmp [ebp-10h] ebx +
jz loc_10517C7  +
mov eax [esi+24h] +
add esi 12Ch +
lea ecx [ebp-10h] +
mov [esi] eax +
call sub_100A5CF  +
mov ecx [eax] +
push ebx  +
push esi  +
push 9032h  +
push ebx  +
push eax  +
call dword ptr [ecx+78h]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_10517D8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
lea ecx [esi+0E4h] +
call sub_1010F11  +
push 0  +
lea ecx [esi+0E0h] +
call sub_1010F11  +
push 0  +
lea ecx [esi+0E8h] +
call sub_1010F11  +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_1011270 +
and dword ptr [ebp-4] 0 +
inc dword ptr [esi+10h]  +
mov [ebp-10h] esi +
mov eax [esi+8] +
mov edi [eax] +
mov byte ptr [ebp-4] 2 +
cmp edi eax +
jnz loc_10599A2  +
lea ecx [ebp-10h] +
call sub_100E76D  +
lea edi [esi+4] +
mov ecx edi +
call sub_100B8AF  +
mov ecx edi +
call sub_100B8F1  +
mov dword ptr [esi] offset off_101AA40 +
call sub_1001FCF  +
retn   +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_1011A16  +
mov esi [esi] +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+1Dh] 0 +
pop ecx  +
mov edi esi +
jnz loc_1011A2F  +
jmp loc_105186D  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+0A8h] +
lea ecx [eax+8] +
mov dword ptr [eax] offset off_100B9EC +
call sub_100ECBD  +
lea ecx [esi+10h] +
pop esi  +
jmp sub_100F341  +
***
xor eax eax +
pop ebp  +
retn 8  +
***
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jnz loc_105ECB7  +
mov byte ptr [ebp+10h] 1 +
push dword ptr [ebp+10h]  +
mov eax [esi+228h] +
push eax  +
push offset loc_1018B9A  +
lea ecx [ebp-2Ch] +
push ecx  +
lea ecx [eax+5Ch] +
call sub_1018BA4  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1019B9D  +
***
push 1  +
push offset dword_1012D58  +
push 0  +
push 0FFFFFFFCh  +
push dword ptr [esi+20h]  +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [esi+68h] +
test eax eax +
jz loc_105193B  +
and dword ptr [esi+68h] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
retn   +
***
test esi esi +
jz loc_1013254  +
lea ecx [esi+4] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_1013254  +
***
mov ebx edx +
jmp loc_1052019  +
mov [ebx+4] esi +
jmp loc_1052026  +
mov [eax+4] ebx +
jmp loc_1052040  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push dword ptr [ecx+20h]  +
call ds:ChangeClipboardChain  +
pop ebp  +
retn 4  +
***
push 0  +
push 30001h  +
push 127h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
push edi  +
call ?OnActivate@CFrameWnd@@IAEXIPAVCWnd@@H@Z  +
jmp loc_101BDCD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
setnz al  +
mov [ecx] al +
test al al +
jnz loc_10623CF  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-18h] 0 +
push 0  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCeventdispatch  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [esi] 0 +
jnz loc_10623E0  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-18h] ebx +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
push 4  +
mov eax offset dword_10E6DD0 +
call sub_1001F95  +
mov edi ecx +
xor esi esi +
mov [ebp-10h] esi +
mov ecx [ebp+8] +
push esi  +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aCstandardtoo_6  +
mov [ebp-4] esi +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+8] +
mov [edi+14h] esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
cmp byte ptr [ecx+2Dh] 0 +
jz loc_1051B5E  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_1051B51  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+rguid]  +
mov edi offset off_1012454 +
mov [ebp+var_8] edi +
call sub_10127C8  +
mov esi eax +
test esi esi +
jl loc_1062D77  +
push [ebp+var_4]  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+5Ch]  +
mov esi eax +
test esi esi +
jl loc_1062D9B  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
call sub_10123F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
call sub_1012A67  +
test eax eax +
jz loc_1062E06  +
mov ecx [eax] +
push esi  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1051BFD  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1062E10  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_1012896  +
mov [ebp+var_4] eax +
cmp eax [esi+4] +
jz loc_1051C43  +
add eax 0Ch +
push eax  +
push [ebp+arg_4]  +
call sub_10127EE  +
pop ecx  +
pop ecx  +
test al al +
jnz loc_1051C43  +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
mov eax [esi+4] +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
jmp loc_1051C37  +
***
mov [eax+4] ebx +
jmp loc_1052326  +
***
mov [eax+8] ecx +
jmp loc_10129D9  +
xor al al +
jmp loc_10129DB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+1Ch] +
jb loc_1051C8A  +
cmp eax [ecx+20h] +
ja loc_1051C8A  +
push eax  +
add ecx 10h +
push ecx  +
call sub_101294E  +
pop ebp  +
retn 4  +
xor al al +
jmp loc_1051C86  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+1Dh] dl +
jnz loc_106356D  +
mov ecx [eax+8] +
cmp [ecx+1Dh] dl +
jz loc_106357C  +
mov eax [eax+4] +
cmp [eax+1Dh] dl +
jz loc_104F37E  +
mov [esi] eax +
pop esi  +
retn   +
***
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
jmp loc_1009F9D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
mov [ebp+var_8] esi +
call sub_1009F6E  +
mov eax [ebp+var_4] +
cmp eax [esi+4] +
jnz loc_1063C4D  +
xor al al +
pop esi  +
leave   +
retn 8  +
***
push 4  +
mov eax offset dword_10E6DD0 +
call sub_1001F95  +
mov edi ecx +
xor esi esi +
mov [ebp-10h] esi +
mov ecx [ebp+8] +
push esi  +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aCamcviewSconde  +
mov [ebp-4] esi +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+8] +
mov [edi+10h] esi +
call sub_1001FCF  +
retn 4  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10194D0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 1101h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
and eax offset ?RemoveDocument@CMultiDocTemplate@@UAEXPAVCDocument@@@Z +
nop   +
nop   +
nop   +
nop   +
nop   +
jmp ds:?CloseAllDocuments@CDocManager@@UAEXH@Z  +
***
push 28h  +
mov eax offset byte_10E40C5 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtreeviewmap_2  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-34h] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1064D5B  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp+10h] +
lea ecx [esi+10h] +
push eax  +
mov [ebp-14h] ecx +
call sub_100D440  +
mov eax [esi+14h] +
mov ecx [ebp+10h] +
cmp ecx eax +
jz loc_1064D6D  +
mov edi [ecx+10h] +
test edi edi +
jz loc_1064D6D  +
mov eax [edi+4] +
mov [ebp+10h] eax +
lea eax [ebp+10h] +
push eax  +
lea ecx [esi+1Ch] +
call sub_1051F49  +
mov ecx [ebp-14h] +
lea eax [ebp+0Ch] +
push eax  +
call sub_1051F49  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
lea eax [ebp-24h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push [ebp+arg_0]  +
lea eax [ebp+var_8] +
push eax  +
mov esi ecx +
call sub_1054241  +
and [ebp+arg_0] 0 +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call sub_1051F93  +
add esp 0Ch +
push [ebp+var_4]  +
lea eax [ebp+var_4] +
push [ebp+var_8]  +
mov ecx esi +
push eax  +
call sub_100E87B  +
mov eax [ebp+arg_0] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1051FB4  +
add esp 10h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_1051FD8  +
push esi  +
mov esi [ebp+arg_8] +
inc dword ptr [esi]  +
lea ecx [ebp+arg_0] +
call sub_1051FDF  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnz loc_1051FC5  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+15h] dl +
jnz loc_1064429  +
mov ecx [eax+8] +
cmp [ecx+15h] dl +
jz loc_105200C  +
mov eax [eax+4] +
cmp [eax+15h] dl +
jnz loc_1052012  +
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_1052012  +
mov [esi] eax +
jmp loc_1051FF9  +
push ecx  +
call sub_1054411  +
mov [esi] eax +
pop esi  +
retn   +
***
mov ebx [edi+8] +
cmp byte ptr [ebx+15h] 0 +
mov esi [edi+4] +
jz loc_105195A  +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jz loc_1051962  +
cmp [esi] edi +
jz loc_1054367  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jz loc_10543EF  +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_1052100  +
cmp byte ptr [ebx+15h] 0 +
jnz loc_1050670  +
push ebx  +
call sub_1010C2A  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_1052100  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+15h] 0 +
jnz loc_106006A  +
lea ecx [ebp+0Ch] +
call sub_1051FDF  +
mov edx [edi] +
cmp byte ptr [edx+15h] 0 +
jnz loc_1052016  +
mov eax [edi+8] +
cmp byte ptr [eax+15h] 0 +
jnz loc_1051953  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jz loc_1052019  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_105436E  +
mov esi eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_1054D4B  +
mov [ecx+4] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+14h] +
mov dl [edi+14h] +
mov [eax+14h] dl +
mov [edi+14h] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+14h] 1 +
jnz loc_10521B3  +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_10521AF  +
cmp byte ptr [ebx+14h] 1 +
jnz loc_10521AF  +
mov eax [esi] +
cmp ebx eax +
jz loc_105215A  +
cmp byte ptr [eax+14h] 0 +
jz loc_10600C4  +
cmp byte ptr [eax+15h] 0 +
jnz loc_1052153  +
mov edx [eax+8] +
cmp byte ptr [edx+14h] 1 +
jnz loc_1054D5E  +
mov edx [eax] +
cmp byte ptr [edx+14h] 1 +
jnz loc_1054D5E  +
mov byte ptr [eax+14h] 0 +
mov ebx esi +
mov esi [esi+4] +
jmp loc_105210A  +
mov eax [esi+8] +
cmp byte ptr [eax+14h] 0 +
jz loc_10600AB  +
cmp byte ptr [eax+15h] 0 +
jnz loc_1052153  +
mov edx [eax] +
cmp byte ptr [edx+14h] 1 +
jz loc_105438D  +
mov edx [eax+8] +
cmp byte ptr [edx+14h] 1 +
jnz loc_1052198  +
mov edx [eax] +
mov byte ptr [edx+14h] 1 +
push eax  +
mov byte ptr [eax+14h] 0 +
call sub_101C465  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+14h] +
mov [eax+14h] dl +
mov byte ptr [esi+14h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+14h] 1 +
call sub_100E50B  +
mov byte ptr [ebx+14h] 1 +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_10521C8  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1001FCF  +
retn 8  +
***
sub ecx 4 +
jmp loc_10521E7  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_105220D  +
test byte ptr [ebp+8] 1 +
jz loc_1052201  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+4] +
lea ebx [esi+14h] +
mov dword ptr [esi] offset off_1012E0C +
mov dword ptr [edi] offset off_1012DEC +
mov dword ptr [ebx] offset off_1014294 +
and dword ptr [ebp-4] 0 +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1052283  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105EE2E  +
mov ecx ebx +
call sub_10522A4  +
mov ecx edi +
call sub_100C3CD  +
lea ecx [esi+1Ch] +
call sub_101A846  +
call sub_1001FCF  +
retn   +
***
mov eax [ecx+4] +
mov dword ptr [ecx] offset off_101423C +
test eax eax +
jz locret_10522BA  +
push ecx  +
lea ecx [eax+54h] +
call sub_101A545  +
retn   +
***
mov ebx [edi+8] +
jmp loc_1052300  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+2Dh] 0 +
jnz loc_1062EA8  +
lea ecx [ebp+0Ch] +
call sub_10523E3  +
mov edx [edi] +
cmp byte ptr [edx+2Dh] 0 +
jnz loc_10522BB  +
mov eax [edi+8] +
cmp byte ptr [eax+2Dh] 0 +
jz loc_104E29B  +
mov ebx edx +
cmp byte ptr [ebx+2Dh] 0 +
mov esi [edi+4] +
jnz loc_105230C  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jz loc_1051C4E  +
cmp [esi] edi +
jz loc_1054D6F  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jz loc_1054DC7  +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_1052352  +
cmp byte ptr [ebx+2Dh] 0 +
jnz loc_104E2E9  +
push ebx  +
call sub_1051B49  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
cmp byte ptr [edi+2Ch] 1 +
jnz loc_1052364  +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jnz loc_105238F  +
mov byte ptr [ebx+2Ch] 1 +
push edi  +
call sub_1012C29  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_105237F  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1001FCF  +
retn 8  +
cmp byte ptr [ebx+2Ch] 1 +
jnz loc_1052360  +
mov eax [esi] +
cmp ebx eax +
jz loc_1054D76  +
cmp byte ptr [eax+2Ch] 0 +
jz loc_1062F62  +
cmp byte ptr [eax+2Dh] 0 +
jnz loc_10523CC  +
mov edx [eax+8] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_104E8C4  +
mov edx [eax] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_104E8C4  +
mov byte ptr [eax+2Ch] 0 +
mov ebx esi +
mov esi [esi+4] +
jmp loc_1052358  +
***
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_1052405  +
mov [esi] eax +
jmp loc_10523FD  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+2Dh] dl +
jnz loc_1063556  +
mov ecx [eax+8] +
cmp [ecx+2Dh] dl +
jz loc_1052409  +
mov eax [eax+4] +
cmp [eax+2Dh] dl +
jz loc_10523D3  +
mov [esi] eax +
pop esi  +
retn   +
push ecx  +
call sub_1052416  +
jmp loc_1052405  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
cmp byte ptr [ecx+2Dh] 0 +
jz loc_105242A  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_105241E  +
***
push 3Ch  +
mov eax offset dword_10E33A8 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewtoo_16  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+64h] +
push 8000FFFFh  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1063FDF  +
mov eax [esi+2Ch] +
mov [ebp-10h] eax +
cmp eax [esi+30h] +
jz loc_1052582  +
push 8000FFFFh  +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10525E2  +
push dword ptr [ebp-10h]  +
lea eax [ebp-48h] +
push eax  +
lea ecx [esi-8] +
call sub_1050CE9  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10525E2  +
add dword ptr [ebp-10h] 54h +
mov eax [ebp-10h] +
cmp eax [esi+30h] +
jz loc_1052582  +
mov eax [ebp-10h] +
jmp loc_10524B5  +
***
push offset loc_1018B75  +
lea eax [ebp-48h] +
push eax  +
lea ecx [esi+10h] +
call sub_1019FF5  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1063FF1  +
cmp byte ptr [ebp+10h] 0 +
jz loc_10525D8  +
mov ecx [ebp-18h] +
call sub_1010BCB  +
test al al +
jz loc_10525D8  +
mov ecx [ebp-18h] +
push 0  +
push 0  +
call near ptr byte_1010B88+1  +
mov al [ebp+10h] +
and byte ptr [esi+60h] 0FEh +
mov [esi+6Ch] al +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_1057CFA  +
push esi  +
mov esi [ebx+10h] +
push edi  +
test esi esi +
jz loc_1052650  +
cmp dword ptr [esi] 0 +
jz loc_1052650  +
mov eax [esi+10h] +
test eax eax +
jnz loc_1057D04  +
and dword ptr [esi+10h] 0 +
push 0  +
call dword ptr [esi+20h]  +
push esi  +
push ebx  +
call sub_100C081  +
mov esi eax +
jmp loc_105262C  +
and [ebp+var_18] 0 +
xor eax eax +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
stos   +
stos   +
lea eax [ebx+1Ch] +
push 6  +
pop ecx  +
lea edi [ebp+var_18] +
mov esi eax +
xor edx edx +
cmps   +
jz loc_1052676  +
push eax  +
call ds:DeleteCriticalSection  +
lea eax [ebx+34h] +
push 6  +
pop ecx  +
lea edi [ebp+var_18] +
mov esi eax +
xor edx edx +
cmps   +
jz loc_105268E  +
push eax  +
call ds:DeleteCriticalSection  +
lea eax [ebx+4Ch] +
push 6  +
pop ecx  +
lea edi [ebp+var_18] +
mov esi eax +
xor edx edx +
cmps   +
jz loc_10526A6  +
push eax  +
call ds:DeleteCriticalSection  +
mov esi [ebx+80h] +
test esi esi +
jz loc_10526C5  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov esi edi +
test edi edi +
jnz loc_10526B0  +
xor esi esi +
cmp [ebx+18h] esi +
jnz loc_1057D0F  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_1001F95  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aScmapmethodtoi  +
lea ecx [ebp-24h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+10h]  +
mov eax [ebp+0Ch] +
push ebx  +
mov [ebp-14h] eax +
push esi  +
lea eax [ebp-14h] +
push eax  +
push offset dword_100CA88  +
mov ecx offset off_10F5740 +
call sub_1052795  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-24h] +
push eax  +
jnz loc_1058454  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push [ebp+arg_C]  +
mov ebx ecx +
call sub_1050E75  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_1052840  +
cmp dword ptr [ebx+14h] 0 +
push esi  +
push edi  +
jz loc_105811C  +
cmp [ebp+arg_8] 1 +
jnz loc_105811C  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
call ds:lstrlenW  +
mov edx [ebx+18h] +
dec edx  +
mov [ebp+var_8] eax +
js loc_105811C  +
mov ecx [ebx+14h] +
mov eax edx +
imul eax eax +
mov [ebp+var_C] ecx +
lea ecx [eax+ecx+4] +
mov [ebp+arg_C] eax +
mov [ebp+var_4] ecx +
mov eax [ebp+var_8] +
cmp eax [ecx] +
jz loc_1052813  +
mov ecx [ebp+var_4] +
sub [ebp+arg_C] 0Ch +
dec edx  +
sub ecx 0Ch +
mov [ebp+var_4] ecx +
test edx edx +
jge loc_10527F5  +
jmp loc_105811C  +
mov ecx [ebp+arg_C] +
mov eax [ebx+14h] +
mov esi [ebp+arg_4] +
mov edi [esi] +
add eax ecx +
mov ecx [eax+4] +
mov esi [eax] +
add ecx ecx +
xor eax eax +
cmps   +
jnz loc_10527FC  +
mov eax [ebp+var_C] +
imul edx edx +
mov eax [edx+eax+8] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
test esi esi +
jz loc_1052873  +
push 1  +
mov ecx esi +
call sub_10528AE  +
jmp loc_1052873  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_1052845  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105289B  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105914F  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
jmp ds:?DeleteContents@CDocument@@UAEXXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10528D4  +
test [ebp+arg_0] 1 +
jz loc_10528C8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_100E8BC +
mov dword ptr [esi+4] offset off_100B924 +
mov dword ptr [esi+8] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
push 4  +
mov eax offset byte_10E281F +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_101227C +
mov dword ptr [esi+4] offset off_100B9C4 +
lea ecx [esi+54h] +
mov dword ptr [ebp-4] 1 +
call sub_1053F48  +
lea ecx [esi+28h] +
call sub_1052948  +
lea ecx [esi+8] +
call sub_101A846  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+10h] +
call sub_100B8F1  +
lea ecx [esi+4] +
pop esi  +
jmp sub_100B8F1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_100C573  +
mov ebx [ebp+arg_0] +
mov esi eax +
test esi esi +
jz loc_105299E  +
cmp ebx esi +
jnz loc_1064C48  +
cmp [ebp+arg_4] 1 +
jnz loc_105299E  +
push esi  +
mov ecx edi +
call sub_100C803  +
mov esi eax +
test esi esi +
jnz loc_1064C55  +
push 1  +
push ebx  +
mov ecx edi +
call sub_100E959  +
mov eax [ebp+arg_4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_C] +
push eax  +
mov ecx edi +
mov [ebp+var_C] ebx +
mov [ebp+var_8] esi +
call sub_10529CB  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov edi [ebp+8] +
mov eax [edi] +
test eax eax +
jz loc_1052AB0  +
push eax  +
call sub_100C799  +
mov ecx [edi+4] +
xor ebx ebx +
inc ebx  +
mov [ebp-18h] ecx +
mov [ebp-14h] ebx +
mov [ebp-1Ch] eax +
test eax eax +
jnz loc_10543D6  +
cmp [edi+8] ebx +
jnz loc_1052AB0  +
mov eax [esi+80h] +
test eax eax +
jnz loc_10649F2  +
push dword ptr [edi]  +
mov ecx esi +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
push dword ptr [edi]  +
mov ecx esi +
mov [ebp+8] eax +
call sub_100C803  +
cmp dword ptr [esi+84h] 0 +
jnz loc_1064A34  +
push dword ptr [edi]  +
mov ecx esi +
call sub_1051DBA  +
push dword ptr [edi]  +
lea eax [ebp-3Ch] +
push dword ptr [ebp+8]  +
lea ecx [esi+4Ch] +
push offset loc_1018B75  +
push eax  +
call sub_1018BA4  +
lea ecx [ebp-3Ch] +
mov dword ptr [ebp-4] 1 +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1064AA1  +
mov eax [esi+0A4h] +
mov eax [eax+40h] +
test eax eax +
jz loc_1052A86  +
mov eax [eax+0E0h] +
push dword ptr [ebp+8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [esi+0A4h] +
push dword ptr [ebp+8]  +
mov ecx [eax+310h] +
call sub_1052ABD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+8] +
mov esi [eax] +
cmp esi eax +
jz loc_1052AE1  +
push ebx  +
mov eax [esi+0Ch] +
cmp eax [ebp+arg_0] +
jz loc_1052AF5  +
mov esi [esi] +
cmp esi [edi+8] +
jnz loc_1052AD1  +
pop ebx  +
mov ecx edi +
call sub_101883B  +
mov ecx edi +
call sub_1018077  +
pop edi  +
pop esi  +
leave   +
retn 4  +
mov ebx [esi] +
cmp [edi] esi +
jnz loc_1052AFD  +
mov [edi] ebx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1052B13  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105FB1A  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [edi+4] +
call sub_1052B29  +
mov esi ebx +
jmp loc_1052ADB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi] +
push edi  +
mov edi ecx +
mov [ebp+arg_4] eax +
cmp esi [edi+4] +
jz loc_1052B5E  +
mov eax [esi+4] +
mov ecx [esi] +
mov [eax] ecx +
mov eax [esi] +
mov ecx [esi+4] +
push esi  +
mov [eax+4] ecx +
call sub_101BD02  +
push esi  +
call ??3@YAXPAX@Z  +
dec dword ptr [edi+8]  +
pop ecx  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 3 +
call sub_1052BC8  +
lea ecx [esi+28h] +
mov byte ptr [ebp-4] 2 +
call sub_100EBDB  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 1 +
call sub_100EBDB  +
lea ecx [esi+20h] +
mov byte ptr [ebp-4] 0 +
call sub_100EBDB  +
push 0  +
push 1  +
mov ecx esi +
call sub_100CD3C  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+24h] +
call sub_100EBDB  +
lea ecx [esi+20h] +
call sub_100EBDB  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push esi  +
push 0FFFFFFFFh  +
push 0  +
mov esi ecx +
call sub_1011BBD  +
or dword ptr [esi+1Ch] 0FFFFFFFFh +
pop esi  +
retn   +
***
push edi  +
lea edi [esi+4] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx edi +
call ?GetNextAssoc@CMapWordToPtr@@QBEXAAPAU__POSITION@@AAGAAPAX@Z  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_1052C1E  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
cmp [ebp+var_8] 0 +
jnz loc_1052BFD  +
pop edi  +
jmp loc_101A3B9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1052C55  +
test byte ptr [ebp+8] 1 +
jz loc_1052C49  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
mov dword ptr [esi] offset off_10069EC +
mov dword ptr [esi+54h] offset off_1012D90 +
mov dword ptr [esi+64h] offset off_100B94C +
mov dword ptr [esi+68h] offset off_1012D6C +
mov dword ptr [esi+6Ch] offset off_1011290 +
push 0Bh  +
pop ecx  +
mov [ebp-4] ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1052CA4  +
cmp byte ptr [eax+19h] 5 +
jnb loc_10599C2  +
xor ebx ebx +
cmp dword_10F5304 esi +
jnz loc_1052CB4  +
mov dword_10F5304 ebx +
lea edi [esi+0DCh] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_1052CC9  +
push 1  +
call sub_1052E4B  +
mov [edi] ebx +
mov ecx [esi+0D8h] +
cmp ecx ebx +
jz loc_1052CD9  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov [ebp-10h] ebx +
push 3  +
push ebx  +
push offset sub_100BF34  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 0Ch +
call sub_100BF49  +
cmp eax ebx +
jnz loc_1052D0A  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+70h]  +
mov ecx esi +
call sub_10517E3  +
cmp [esi+0BCh] ebx +
jz loc_1052D30  +
call sub_100ABA9  +
mov edi eax +
cmp edi ebx +
jz loc_1052D30  +
push 1  +
push ebx  +
mov ecx edi +
call sub_1052E04  +
push ebx  +
push ebx  +
mov ecx edi +
call sub_1052E04  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 0Bh +
cmp eax ebx +
jz loc_1052D41  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+144h] +
mov byte ptr [ebp-4] 0Ah +
cmp eax ebx +
jnz loc_10599D8  +
mov eax [esi+140h] +
mov byte ptr [ebp-4] 9 +
cmp eax ebx +
jnz loc_10599E3  +
lea ecx [esi+0F4h] +
call sub_1051737  +
mov eax [esi+0E8h] +
mov byte ptr [ebp-4] 7 +
cmp eax ebx +
jnz loc_10599EE  +
mov eax [esi+0E4h] +
mov byte ptr [ebp-4] 6 +
cmp eax ebx +
jnz loc_10599F9  +
mov eax [esi+0E0h] +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jnz loc_1059A04  +
mov eax [esi+0D4h] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_1052DBA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+0A8h] +
mov byte ptr [ebp-4] 3 +
call sub_1052B71  +
lea ecx [esi+6Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1051816  +
push ebx  +
push 1  +
lea ecx [esi+84h] +
call sub_100CD3C  +
lea ecx [esi+54h] +
mov [ebp-4] bl +
call sub_101AE41  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CDocument@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
test eax eax +
jnz loc_1052E18  +
call sub_100C0A1  +
push [ebp+wParam]  +
mov ecx esi +
push eax  +
call sub_100ED64  +
mov ecx [esi+0D8h] +
call sub_1052E38  +
pop esi  +
pop ebp  +
retn 8  +
***
cmp byte ptr [ecx+0C5h] 0 +
jnz loc_1060164  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1052E75  +
test [ebp+arg_0] 1 +
jz loc_1052E69  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1012E74 +
mov dword ptr [esi+4] offset off_1012E54 +
mov dword ptr [esi+14h] offset off_100BF8C +
mov dword ptr [esi+18h] offset off_100B99C +
mov ecx [esi+20h] +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1052EB3  +
push 1  +
call sub_1052EC6  +
lea ecx [esi+8] +
call sub_100B8F1  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1052EEC  +
test [ebp+arg_0] 1 +
jz loc_1052EE0  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100BA50 +
mov edi [esi+8] +
mov dword ptr [ebp-4] 2 +
test edi edi +
jnz loc_105F424  +
mov edi [esi+0Ch] +
test edi edi +
jnz loc_105F445  +
lea ecx [esi+64h] +
mov byte ptr [ebp-4] 1 +
call sub_1051893  +
lea ecx [esi+3Ch] +
mov byte ptr [ebp-4] 0 +
call sub_1052F4F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+14h] +
call sub_1052F4F  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1012ED0 +
mov dword ptr [ebp-4] 1 +
call sub_10132B1  +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
call sub_100CD3C  +
mov esi [esi+4] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1052F8F  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+4] +
xor eax eax +
mov [ecx] al +
mov [ecx+4] eax +
push dword ptr [ebp+8]  +
mov [ebp-4] eax +
mov dword ptr [esi] offset off_1053014 +
call sub_10519B1  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
add [eax-6F6F6F70h] dl +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
test esi esi +
jz loc_1053152  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_105313C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [esi+14h] +
and dword ptr [esi+0Ch] 0 +
test ecx ecx +
jz loc_105314E  +
push 3  +
call sub_105315C  +
and dword ptr [esi+14h] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push esi  +
mov esi ecx +
jz loc_1056FEE  +
push edi  +
push offset loc_105319B  +
lea edi [esi-4] +
push dword ptr [edi]  +
push 0Ch  +
push esi  +
call sub_100C964  +
test [ebp+arg_0] 1 +
jz loc_105318E  +
push edi  +
call sub_100F30B  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ecx]  +
call SysFreeString  +
retn   +
***
cmp byte ptr dword_10F54B0[edi] 57h +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10532AB  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_105331D  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058BB5  +
push offset loc_100E83D  +
lea eax [ebp-30h] +
push eax  +
call ds:?GetComObjectEventSource@@YGAAV?$CEventSource@VCComObjectObserver@@VCVoid@@V2@V2@V2@@@XZ  +
mov ecx eax +
call sub_1019FF5  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058BC3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
dec dword_10F5300  +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
xor ebx ebx +
inc ebx  +
push offset aCamcappSconqui  +
mov [ebp-10h] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
add esi 0E8h +
push dword ptr [esi]  +
lea ecx [ebp-1Ch] +
call sub_1052FD9  +
push dword ptr [esi]  +
lea ecx [ebp-2Ch] +
push ecx  +
mov ecx eax +
mov [ebp-4] ebx +
call sub_1053403  +
mov esi [ebp+8] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jnz loc_10584E1  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10533B7  +
cmp byte ptr [eax+19h] 5 +
jnb loc_10584EC  +
mov ecx esi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058503  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aDispatch_cal_4  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi offset unk_10F5730 +
test byte ptr dword_10F52FC bl +
jnz loc_105346C  +
or dword_10F52FC ebx +
push offset dword_10F56F0  +
push offset aOnquit  +
push edi  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 2 +
call sub_10526DE  +
push (offset dword_1050760+3)  +
call sub_100BFD5  +
pop ecx  +
mov [ebp-4] bl +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10584AF  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-30h] +
call sub_105154D  +
mov byte ptr [ebp-4] 3 +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
push eax  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
push dword_10F56F0  +
lea eax [ebp-40h] +
push offset dword_10514FC  +
push eax  +
lea ecx [esi+4] +
call sub_10519D0  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push offset loc_1053549  +
push ebx  +
push 10h  +
lea eax [ebp-30h] +
push eax  +
mov [ebp-4] bl +
call sub_100C964  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
jmp sub_100EBF1  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-18h] edi +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcdocOnclose  +
lea ecx [ebp-28h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1053597  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1059609  +
add edi 0E0h +
mov eax [edi] +
mov ebx 8000FFFFh +
push ebx  +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105367F  +
and dword ptr [ebp-10h] 0 +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_100A5CF  +
mov edi [eax] +
lea ecx [ebp-10h] +
mov [ebp-14h] eax +
add edi 14h +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp-14h]  +
call dword ptr [edi]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105366E  +
push ebx  +
push dword ptr [ebp-10h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105366E  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+11Ch]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_105367F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1059620  +
push ebx  +
mov edi offset dword_10F54B0 +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1053738  +
push dword ptr [ebp-18h]  +
lea eax [ebp-38h] +
push eax  +
mov ecx edi +
call sub_1051575  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1053738  +
cmp byte_10F55AD 0 +
jnz loc_1053710  +
push 1  +
push 0  +
call sub_10511D6  +
test al al +
jnz loc_105962E  +
call sub_10516E3  +
mov ecx [ebp-18h] +
call sub_105175C  +
mov ecx [ebp-18h] +
call ?OnCloseDocument@CDocument@@UAEXXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
lea ecx [ebp-28h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10536F6  +
***
call sub_100DFF3  +
cmp eax 0FFFFFFFFh +
jz loc_1010BC1  +
mov ecx [esi+48h] +
push eax  +
call sub_10537A2  +
jmp loc_1010BC1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 402h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
push 2Ch  +
mov eax offset byte_10DC969 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcidispatchi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
add esi 0FFFFFFFCh +
push eax  +
lea ecx [ebp-18h] +
mov [ebp-14h] esi +
call sub_1018390  +
mov esi [ebp-18h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105EE46  +
push 0  +
push esi  +
call ds:CoDisconnectObject  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test esi esi +
jz loc_1053883  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_105393F  +
test byte ptr [ebp+8] 1 +
jz loc_1053933  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+80h] +
call sub_100C3CD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1053975  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+54h] +
mov dword ptr [esi] offset off_100397C +
mov dword ptr [edi] offset off_100BFB8 +
lea ecx [esi+70h] +
mov dword ptr [ebp-4] 2 +
call sub_100A67D  +
mov eax [esi+6Ch] +
test eax eax +
jz loc_10539B1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+68h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jnz loc_105EE58  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call sub_101AE41  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
mov dword ptr [esi] offset off_10035B4 +
call ??1CToolBarCtrl@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1053A1C  +
test byte ptr [ebp+8] 1 +
jz loc_1053A10  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1003BEC +
and dword ptr [ebp-4] 0 +
lea ecx [esi+44h] +
call sub_1053A5B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
mov dword ptr [esi] offset off_1003AC4 +
call ??1CWnd@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov dword ptr [ecx] offset off_10036E4 +
jmp ??1CWnd@@UAE@XZ  +
***
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1053B2E  +
test byte ptr [ebp+8] 1 +
jz loc_1053B22  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+0C8h] +
mov dword ptr [esi] offset off_100457C +
mov dword ptr [esi+0C4h] offset off_100A64C +
mov dword ptr [edi] offset off_100C048 +
mov ecx [esi+0D8h] +
mov dword ptr [ebp-4] 6 +
test ecx ecx +
jz loc_1053B73  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov ecx [esi+0DCh] +
test ecx ecx +
jz loc_1053B84  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov ecx [esi+150h] +
test ecx ecx +
jz loc_1053B95  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov ecx [esi+154h] +
test ecx ecx +
jz loc_1053BA6  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
lea ecx [esi+170h] +
call sub_100A67D  +
lea ecx [esi+16Ch] +
mov byte ptr [ebp-4] 4 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+12Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1019F47  +
lea ecx [esi+120h] +
mov byte ptr [ebp-4] 2 +
call sub_101A436  +
lea ecx [esi+0E0h] +
mov byte ptr [ebp-4] 1 +
call sub_1053C0E  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call sub_101AE41  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CFrameWnd@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov dword ptr [ecx] offset off_100472C +
jmp ??1CWnd@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1053C44  +
test byte ptr [ebp+8] 1 +
jz loc_1053C38  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+40h] +
mov dword ptr [esi] offset off_1004844 +
mov dword ptr [edi] offset off_1012EB4 +
mov eax [esi+54h] +
mov dword ptr [ebp-4] 2 +
test eax eax +
jnz loc_10606D1  +
mov ecx [esi+50h] +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jnz loc_10606DC  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call sub_101AE41  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CWnd@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push edi  +
lea edi [ecx+0C4h] +
cmp byte ptr [edi] 0 +
jnz loc_10606E8  +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1053D08  +
test byte ptr [ebp+8] 1 +
jz loc_1053CFC  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1004A04 +
mov dword ptr [esi+54h] offset off_100C064 +
mov dword ptr [ebp-4] 6 +
call sub_1053CC5  +
lea ecx [esi+0E4h] +
call sub_100A67D  +
lea ecx [esi+0D4h] +
call sub_100A67D  +
lea ecx [esi+0C8h] +
call sub_1015A6C  +
lea ecx [esi+0BCh] +
mov byte ptr [ebp-4] 5 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+0B4h] +
mov byte ptr [ebp-4] 4 +
mov dword ptr [ecx] offset off_10083D0 +
call sub_100F62A  +
lea ecx [esi+0ACh] +
mov byte ptr [ebp-4] 3 +
call sub_10504ED  +
lea ecx [esi+0A4h] +
mov byte ptr [ebp-4] 2 +
call sub_10504ED  +
lea ecx [esi+84h] +
mov byte ptr [ebp-4] 1 +
call sub_1053DCF  +
mov ecx [esi+80h] +
mov byte ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1053DB9  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1053975  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_1053DEE  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_1019A7A  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_101280E  +
mov edi [ebp+0Ch] +
cmp edi [esi+20h] +
jz loc_10631F3  +
dec dword ptr [edi+2Ch]  +
jnz loc_1053E8E  +
push ebx  +
lea eax [edi+0Ch] +
push eax  +
lea eax [ebp+0Ch] +
lea ebx [esi+28h] +
push eax  +
mov ecx ebx +
call sub_1051C09  +
mov eax [ebp+0Ch] +
cmp eax [esi+2Ch] +
jz loc_1053E51  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx ebx +
call sub_10522C5  +
lea ebx [edi+28h] +
push ebx  +
lea eax [ebp+0Ch] +
lea ecx [esi+34h] +
push eax  +
call sub_100D440  +
mov eax [ebp+0Ch] +
cmp eax [esi+38h] +
jz loc_1053E76  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [esi+34h] +
call sub_105207A  +
push dword ptr [ebx]  +
mov ecx [esi+40h] +
call sub_1051C6A  +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [esi+1Ch] +
call sub_1053E9B  +
pop ebx  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi] +
push edi  +
mov edi ecx +
mov [ebp+arg_4] eax +
cmp esi [edi+4] +
jz loc_1053ED0  +
mov eax [esi+4] +
mov ecx [esi] +
mov [eax] ecx +
mov eax [esi] +
mov ecx [esi+4] +
push esi  +
mov [eax+4] ecx +
call sub_1012C29  +
push esi  +
call ??3@YAXPAX@Z  +
dec dword ptr [edi+8]  +
pop ecx  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_1012D36  +
mov esi [esi] +
push edi  +
call sub_1053F0A  +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+59h] 0 +
pop ecx  +
mov edi esi +
jnz loc_1012D4F  +
jmp loc_1053EDE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1053F22  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_1012B45  +
test [ebp+arg_0] 1 +
jnz loc_1063284  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1053F7C  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [ebp+arg_4] +
cmp ecx [eax] +
jnz loc_1053FAA  +
cmp [ebp+arg_8] eax +
jnz loc_1053FAA  +
mov ecx esi +
call sub_1012D09  +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_1053FA0  +
jmp loc_10633C2  +
***
lea eax [ebp+hWnd] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov ecx ebx +
call sub_1009F6E  +
mov eax [eax] +
cmp eax [ebx+4] +
jz loc_1009E92  +
cmp esi offset lpDst +
jz loc_1053FE0  +
cmp byte ptr [esi+19h] 5 +
jnb loc_1063C33  +
push 1  +
push [ebp+hWnd]  +
mov ecx ebx +
call sub_1053FF6  +
jmp loc_1009E92  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+hWnd] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov edi ecx +
call sub_1009F6E  +
push 0FFFFFFFCh  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
mov esi [ebp+var_4] +
cmp eax offset loc_1009DAF +
jnz loc_105405F  +
push dword ptr [esi+1Ch]  +
push 0FFFFFFFCh  +
push [ebp+hWnd]  +
call ds:SetWindowLongW  +
mov [ebp+arg_4] 1 +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105404A  +
cmp byte ptr [eax+19h] 5 +
jnb loc_1063BCF  +
push esi  +
lea eax [ebp+hWnd] +
push eax  +
mov ecx edi +
call sub_105406C  +
mov al [ebp+arg_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
cmp [ebp+arg_4] 0 +
jnz loc_105404A  +
jmp loc_1054056  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+2Dh] 0 +
jnz loc_10637AE  +
lea ecx [ebp+0Ch] +
call sub_10523E3  +
mov edx [edi] +
cmp byte ptr [edx+2Dh] 0 +
jz loc_10637E0  +
mov ebx [edi+8] +
cmp byte ptr [ebx+2Dh] 0 +
mov esi [edi+4] +
jz loc_1063802  +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_106380A  +
mov [eax+4] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_10540D6  +
cmp byte ptr [ebx+2Dh] 0 +
jz loc_106381D  +
mov eax esi +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_10540F0  +
cmp byte ptr [ebx+2Dh] 0 +
jz loc_106382B  +
mov eax esi +
mov edx [ecx+4] +
mov [edx+8] eax +
cmp byte ptr [edi+2Ch] 1 +
jnz loc_1054106  +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jnz loc_106389A  +
mov byte ptr [ebx+2Ch] 1 +
push edi  +
call sub_1054136  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_1054121  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_105414E  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+10h] +
call sub_101326C  +
test [ebp+arg_0] 1 +
jnz loc_106377B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_105419E  +
test byte ptr [ebp+8] 1 +
jz loc_1054192  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1007DEC +
cmp dword ptr [esi+4] 0 +
mov dword ptr [ebp-4] 1 +
jnz loc_1063D9B  +
lea ecx [esi+8] +
mov byte ptr [ebp-4] 0 +
call sub_10541E3  +
mov dword ptr [esi] offset off_100257C +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1009EE4 +
and dword ptr [ebp-4] 0 +
push esi  +
push dword ptr [esi+4]  +
call sub_1009D38  +
mov ecx eax +
call sub_1051CD1  +
mov dword ptr [esi] offset off_1054220 +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
call sub_1054273  +
push [ebp+arg_4]  +
mov ecx edi +
mov esi eax +
call sub_100D481  +
mov ecx [ebp+arg_0] +
pop edi  +
mov [ecx] eax +
mov [ecx+4] esi +
mov eax ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
cmp byte ptr [ecx+15h] 0 +
jnz loc_105429B  +
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp edx [ecx+0Ch] +
jb loc_10543CD  +
mov ecx [ecx+8] +
cmp byte ptr [ecx+15h] 0 +
jz loc_1054289  +
pop ebp  +
retn 4  +
***
push 1  +
call sub_10542B0  +
jmp loc_1012412  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10542C5  +
push eax  +
call ds:DestroyIcon  +
test [ebp+arg_0] 1 +
jz loc_10542D2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1054308  +
test byte ptr [ebp+8] 1 +
jz loc_10542FC  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100849C +
mov dword ptr [ebp-4] 4 +
call sub_10161F8  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+50h] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+20h] +
mov byte ptr [ebp-4] 1 +
call ??1CMapWordToPtr@@UAE@XZ  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 0 +
call sub_10160C2  +
mov dword ptr [esi] offset off_100257C +
call sub_1001FCF  +
retn   +
***
mov [esi] ebx +
jmp loc_1052040  +
cmp byte ptr [ebx+15h] 0 +
mov esi [eax+4] +
jz loc_106009C  +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
jmp loc_10520D9  +
mov edx [eax+8] +
cmp byte ptr [edx+14h] 1 +
jz loc_105214F  +
jmp loc_1052179  +
***
cmp ecx [ebp+arg_8] +
jz loc_100E8A7  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1051FDF  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_105207A  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_10543A9  +
pop edi  +
jmp loc_100E8A7  +
***
mov eax ecx +
mov ecx [ecx] +
jmp loc_1054295  +
***
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call sub_10529CB  +
push dword ptr [edi]  +
mov ecx esi +
call sub_100C799  +
jmp loc_10529F8  +
***
cmp byte ptr [ebx+15h] 0 +
jz loc_1054401  +
mov eax esi +
mov edx [ecx+4] +
mov [edx] eax +
jmp loc_105204B  +
push ebx  +
call sub_1054411  +
mov ecx [ebp-10h] +
jmp loc_10543F7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
cmp byte ptr [ecx+15h] 0 +
jz loc_1054425  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_1054419  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+190h] +
pop ebp  +
retn 4  +
***
test ecx ecx +
jz loc_105E108  +
mov eax [ecx+8] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax ecx +
mov ecx [eax+34h] +
shr edx cl +
mov ecx [eax+54h] +
mov eax [eax+3Ch] +
and eax [ebp+arg_0] +
shl eax 6 +
add eax [ecx+edx*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+48h] +
and eax [ebp+arg_0] +
cmp eax [ecx+50h] +
jb loc_106547F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10544AF  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jz loc_10544C2  +
mov eax [eax+8] +
pop ebp  +
retn 4  +
***
xor eax eax +
jmp loc_10544BE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push 0  +
mov [ebp+8] eax +
push 4  +
lea eax [ebp+8] +
push eax  +
call sub_10544EC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp [ebp+arg_4] 0 +
jbe loc_105450E  +
mov ecx [ebp+arg_8] +
movzx edx byte ptr [eax] +
imul ecx ecx +
dec [ebp+arg_4]  +
add ecx edx +
mov [ebp+arg_8] ecx +
inc eax  +
jmp loc_10544F4  +
mov eax [ebp+arg_8] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call dword ptr [ecx+24h]  +
push eax  +
call sub_105457F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax ecx +
imul ecx ecx +
imul eax eax +
add eax 3039h +
shr eax 10h +
inc ecx  +
and ecx 0FFFF0000h +
or eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+75h] 0 +
jz loc_10545C2  +
mov ecx [ebp+arg_0] +
call sub_10545CB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
mov eax 0FFFFh +
mov [ebp+var_C] edi +
mov [ebp+var_4] esi +
test esi eax +
jnz loc_1054608  +
lea ecx [esi+10000h] +
or ecx eax +
mov [ebp+var_8] ecx +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
cmpxchg [ecx] edx +
cmp esi eax +
jnz loc_1054608  +
pop edi  +
pop esi  +
leave   +
retn   +
mov ecx edi +
call sub_10C905F  +
jmp loc_1054604  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+75h] 0 +
jz loc_1054629  +
mov ecx [ebp+arg_0] +
call sub_1054632  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+var_C] edi +
mov esi [edi] +
lea eax [esi-10000h] +
and eax 0FFFF0000h +
mov [ebp+var_4] esi +
mov [ebp+var_8] eax +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
cmpxchg [ecx] edx +
cmp esi eax +
jnz loc_106543E  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 1076h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+54h] +
push 2  +
mov ecx edi +
call sub_10188F8  +
push 3  +
mov ecx edi +
call sub_10188F8  +
lea ecx [esi-7Ch] +
call sub_100CBA3  +
mov ecx [ebp+arg_0] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistviewc_5  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E243  +
test esi esi +
jz loc_1054755  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+4]  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+14h] +
test eax eax +
jnz loc_1054805  +
cmp [ebp+arg_0] eax +
jz loc_1057040  +
push [ebp+arg_0]  +
call dword ptr [esi+20h]  +
push eax  +
mov ecx esi +
call sub_1054565  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_105480F  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
cmp byte ptr [esi+75h] 0 +
mov [ebp+var_4] 2 +
jz loc_105482F  +
lea ecx [esi+18h] +
call sub_1017C03  +
cmp dword ptr [esi+14h] 0 +
jnz loc_1065563  +
push ebx  +
push edi  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1054485  +
push eax  +
mov ecx esi +
call sub_105445E  +
mov edi eax +
push edi  +
mov ecx esi +
call sub_10545AF  +
cmp byte ptr [esi+75h] 0 +
jz loc_1054865  +
lea ecx [esi+18h] +
call sub_1017B9B  +
mov ebx [ebp+arg_0] +
push ebx  +
call dword ptr [esi+20h]  +
and [ebp+arg_0] 0 +
lea eax [edi+4] +
mov [ebp+var_8] eax +
test eax eax +
jz loc_10548AF  +
and [ebp+arg_4] 0 +
mov ecx [ebp+arg_4] +
shl ecx 2 +
cmp dword ptr [ecx+eax] 1E3603Bh +
jz loc_10548AF  +
cmp [ecx+eax+20h] ebx +
jnz loc_1065579  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
mov ecx esi +
call sub_1054910  +
and [ebp+var_4] 0 +
push edi  +
mov ecx esi +
call sub_1054616  +
cmp [ebp+var_4] 0 +
pop edi  +
pop ebx  +
jnz loc_1054903  +
mov eax [esi+60h] +
mov ecx eax +
shr ecx 4 +
add eax ecx +
mov ecx [esi+64h] +
mov [ebp+arg_4] eax +
fild  [ebp+arg_4] +
test eax eax +
jl loc_1065591  +
mov eax ecx +
fstp  qword ptr [ebp-0Ch] +
mov [ebp+arg_4] eax +
fild  [ebp+arg_4] +
test eax eax +
jl loc_10655BB  +
fmul  qword ptr [esi+40h] +
fcomp  qword ptr [ebp-0Ch] +
fnstsw  ax +
test ah 41h +
jnz loc_1054903  +
cmp ecx [esi+38h] +
ja loc_106559C  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_C] +
mov eax [ebx] +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
test eax eax +
jl loc_1054958  +
cmp eax 7 +
jge loc_1054958  +
mov edi [ebp+arg_4] +
mov edx [edi] +
push 0FFFFFFFFh  +
push dword ptr [edx+eax*4+20h]  +
call dword ptr [ecx+2Ch]  +
mov esi [edi] +
mov eax [esi+1Ch] +
mov ecx [ebx] +
test eax eax +
jnz loc_106548A  +
cmp ecx 7 +
jz loc_105495F  +
cmp dword ptr [esi+ecx*4] 1E3603Bh +
jz loc_105495F  +
inc ecx  +
jmp loc_1054947  +
xor al al +
jmp loc_10549F0  +
dec ecx  +
mov [ebp+arg_C] ecx +
cmp ecx 6 +
ja loc_1054958  +
push ecx  +
mov ecx esi +
call sub_10549FC  +
test al al +
jnz loc_1054958  +
mov eax [ebp+arg_C] +
inc eax  +
cmp eax 7 +
jz loc_1054989  +
push eax  +
mov ecx esi +
call sub_10549FC  +
test al al +
jz loc_1054958  +
mov eax [ebp+arg_C] +
mov edx [esi+eax*4+20h] +
mov ecx [ebx] +
mov eax [edi] +
mov [eax+ecx*4+20h] edx +
mov eax [ebx] +
mov ecx [edi] +
mov edx [ebp+arg_C] +
mov edx [esi+edx*4] +
mov [ecx+eax*4] edx +
mov ecx [ebp+arg_C] +
and dword ptr [esi+ecx*4+20h] 0 +
mov dword ptr [esi+ecx*4] 1E3603Bh +
mov eax [ebx] +
test eax eax +
jnz loc_106549F  +
mov edx [ebp+arg_0] +
add edx 4 +
cmp [edi] edx +
jnz loc_10654A7  +
or dword ptr [ebx] 0FFFFFFFFh +
test ecx ecx +
jnz loc_10549E1  +
mov eax [ebp+arg_0] +
add eax 4 +
cmp esi eax +
jnz loc_10654DB  +
mov eax [ebp+var_4] +
add eax 60h +
push eax  +
call ds:InterlockedDecrement  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebx  +
call sub_101AD4D  +
test ebx ebx +
jz loc_1054A42  +
cmp ebx esi +
jz loc_1054A42  +
push ebx  +
lea ecx [edi+8] +
call sub_10547D4  +
push 1  +
mov ecx ebx +
call sub_1054A51  +
cmp [esi] esi +
jnz loc_1054A20  +
pop ebx  +
jmp loc_101828C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
test [ebp+arg_0] 1 +
jz loc_1054A72  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [esi] +
push esi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jnz loc_105E72D  +
cmp [ebp+arg_4] 3951589h +
jnz loc_105E756  +
mov edi [esi+8Ch] +
dec edi  +
js loc_1054ADD  +
push edi  +
mov ecx esi +
call sub_1054BEB  +
test eax eax +
jz loc_1054A9D  +
push eax  +
lea eax [ebp+var_24] +
push eax  +
mov ecx esi +
call sub_10546DD  +
push eax  +
lea ecx [ebp+var_14] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1054A9D  +
jmp loc_101CCCD  +
mov ecx ebx +
call sub_1054B04  +
test eax eax +
jz loc_105E743  +
and dword ptr [esi+8Ch] 0 +
and dword ptr [esi+90h] 0 +
jmp loc_101CCAC  +
***
push 1009h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov ecx [esi+178h] +
cmp [ecx+58h] ebx +
jnz sub_105B8B6  +
mov eax [esi+178h] +
mov ecx [eax+4Ch] +
push 0FFFFFFFFh  +
call sub_1054672  +
push 9  +
xor eax eax +
pop ecx  +
lea edi [ebp-54h] +
stos   +
lea eax [esi+0F4h] +
mov [ebp-54h] ebx +
cmp [eax] bl +
jnz loc_105B8FA  +
mov eax [esi+178h] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
cmp eax 1 +
jz loc_105B91A  +
jbe loc_10185F9  +
jmp loc_105B975  +
***
push 1032h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+8]  +
mov dword ptr [esi] offset off_1054BB8 +
call ds:?RemoveItem@BookKeeping@@SGJPAX@Z  +
and dword ptr [esi+8] 0 +
mov dword ptr [esi+4] 0CBADF00Dh +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1054B90  +
test byte ptr [ebp+8] 1 +
jz loc_1054BDF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov ecx [ecx+4Ch] +
call ?GetItemData@CListCtrl@@QBEKH@Z  +
lea ecx [eax+0Ah] +
cmp ecx 8 +
jbe loc_105E136  +
push eax  +
call sub_1054C16  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_1054C4B  +
cmp ecx 0FFFFFFF6h +
jge loc_1054D3D  +
push ecx  +
call ds:?FindItem@BookKeeping@@SGPAVItemHandle@@PAX@Z  +
push 0  +
push offset off_10F94AC  +
push offset off_10F9490  +
push 0  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
pop ebp  +
retn 4  +
***
mov eax [esi+8Ch] +
xor ebx ebx +
cmp eax [esi+90h] +
jg loc_1054CA5  +
mov ecx [esi+4Ch] +
push edi  +
call sub_1054CB1  +
test eax eax +
jz loc_1054CA5  +
dec dword ptr [esi+94h]  +
push edi  +
push offset loc_101D071  +
lea eax [ebp+var_10] +
push eax  +
lea ecx [esi+4] +
call sub_100FB75  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp+var_10] +
test al al +
jnz loc_105E715  +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax ebx +
jmp loc_101CF3F  +
mov ebx 80004005h +
jmp loc_1054C9E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 101Ch  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
push offset loc_100E83D  +
lea eax [ebp+var_24] +
add esi 4 +
push eax  +
mov ecx esi +
call sub_1019FF5  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp+var_14] +
call edi  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_101CCCD  +
push offset loc_1054D38  +
lea eax [ebp+var_24] +
push eax  +
mov ecx esi +
call sub_1019FF5  +
push eax  +
lea ecx [ebp+var_14] +
call edi  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_101CCCD  +
***
mov eax [ecx] +
jmp dword ptr [eax+1Ch]  +
***
cmp ecx 0FFFFFFFEh +
jg loc_1054C2D  +
jmp loc_1054C4B  +
***
mov ecx [edi+4] +
cmp [ecx] edi +
jz loc_10600A4  +
mov [ecx+8] eax +
jmp loc_10520EB  +
mov edx [eax] +
cmp byte ptr [edx+14h] 1 +
jz loc_10600DC  +
jmp loc_10600F2  +
***
mov [esi] ebx +
jmp loc_1052326  +
mov eax [esi+8] +
cmp byte ptr [eax+2Ch] 0 +
jz loc_1062F0E  +
cmp byte ptr [eax+2Dh] 0 +
jnz loc_10523CC  +
mov edx [eax] +
cmp byte ptr [edx+2Ch] 1 +
jnz loc_1062F27  +
mov edx [eax+8] +
cmp byte ptr [edx+2Ch] 1 +
jz loc_10523C8  +
jmp loc_1062F27  +
***
mov ecx edi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_101A242  +
***
cmp byte ptr [ebx+2Dh] 0 +
jz loc_1054DD9  +
mov eax esi +
mov edx [ecx+4] +
mov [edx] eax +
jmp loc_1052331  +
push ebx  +
call sub_1052416  +
mov ecx [ebp-10h] +
jmp loc_1054DCF  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
mov [ebp-14h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionspane_2  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
mov [ebp-10h] ebx +
cmp [ebp+0Ch] ebx +
jz loc_105D424  +
cmp dword ptr [ebp+0Ch] 3 +
jg loc_105D424  +
mov eax [esi+150h] +
mov ecx [esi+13Ch] +
push ebx  +
push 1  +
lea edx [ebp-10h] +
push edx  +
push 2  +
push eax  +
push ecx  +
push ebx  +
push dword ptr [ebp+10h]  +
lea ecx [esi+0D0h] +
push dword ptr [ebp+0Ch]  +
call sub_1024664  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call edi  +
cmp eax ebx +
jl loc_105D465  +
lea ecx [ebp-24h] +
call edi  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-14h] 1 +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
not eax  +
and [ecx] eax +
jmp loc_102302A  +
***
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_10421AC  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_1024388  +
mov [ebp-10h] eax +
cmp eax ebx +
jnz loc_10246FB  +
jmp loc_1068CDF  +
xor eax eax +
jmp loc_1024723  +
***
lea eax [esi+8] +
jmp loc_1023921  +
***
lea eax [ebp-28h] +
jmp loc_10237CF  +
***
lea eax [ebp-28h] +
jmp loc_10237F5  +
***
mov esi ecx +
push esi  +
mov ecx edi +
call sub_101C465  +
jmp loc_10231B6  +
***
mov ecx [esi] +
cmp ecx [eax+0Ch] +
jb loc_1022BE4  +
jmp loc_1022BFF  +
***
mov eax [esi] +
cmp eax [edi+0Ch] +
jnb loc_1056E4A  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] edi +
call sub_10218CE  +
mov ecx [ebp+arg_8] +
mov eax [esi] +
cmp [ecx+0Ch] eax +
jnb loc_1056E4A  +
mov eax [ecx+8] +
cmp byte ptr [eax+15h] 0 +
push esi  +
jz loc_1054F99  +
push ecx  +
jmp loc_1022C4B  +
push edi  +
push 1  +
jmp loc_1022C4D  +
***
jz loc_105BE14  +
mov edx 0FFFFFF4Dh +
cmp ecx edx +
jz loc_105BDA8  +
cmp ecx 0FFFFFF4Fh +
jnz loc_1055014  +
mov eax [esi+178h] +
test eax eax +
jz loc_1054FD9  +
push dword ptr [edi+14h]  +
mov ecx [eax+4Ch] +
call sub_1056F17  +
test al al +
jnz loc_101CFF7  +
lea ebx [esi+44h] +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+78h]  +
test eax eax +
jz loc_101CFF3  +
lea ecx [esi+0D8h] +
call sub_100A5CF  +
mov esi [eax] +
mov [ebp-14h] eax +
mov eax [ebx] +
add edi 0Ch +
push edi  +
mov ecx ebx +
add esi 1Ch +
call dword ptr [eax+78h]  +
push eax  +
push dword ptr [ebp-14h]  +
call dword ptr [esi]  +
jmp loc_101CFF7  +
lea ebx [edx+3] +
cmp ecx ebx +
jz loc_105BD1E  +
cmp ecx 0FFFFFF51h +
jz loc_105BCE4  +
cmp ecx 0FFFFFF65h +
jz loc_105BB31  +
cmp ecx 0FFFFFF8Dh +
jnz loc_101CFF3  +
jmp loc_105BB22  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
xor edi edi +
push edi  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistviewc_6  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_0] +
mov eax [ebp+arg_4] +
cmp eax [esi+19Ch] +
jz loc_10550C6  +
cmp eax edi +
lea eax [ebp+var_20] +
jz sub_105594E  +
push edi  +
push eax  +
mov ecx esi +
call sub_1055123  +
push eax  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105EA75  +
mov ecx [esi+4Ch] +
push edi  +
call sub_1022FA8  +
mov eax [ebp+arg_4] +
mov [esi+19Ch] eax +
lea ecx [ebp+var_10] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistviewc_7  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [esi+4Ch] +
call sub_100E4E1  +
mov edi eax +
push 8000FFFFh  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E20B  +
mov eax [esi] +
push esi  +
call dword ptr [eax+14h]  +
cmp eax ebx +
jnz loc_10551E8  +
movzx eax byte ptr [ebp+0Ch] +
push eax  +
mov ecx edi +
call sub_1022FA8  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_10551C0  +
push ebx  +
push 0  +
push dword ptr [edi+20h]  +
call ds:InvalidateRect  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
cmp eax 4 +
jnz loc_10551C0  +
jmp loc_10551A2  +
***
push eax  +
lea eax [ebp-24h] +
push eax  +
mov ecx ebx +
call sub_10552C8  +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1025F08  +
lea edi [ebx+240h] +
mov eax [edi] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 9 +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CE00  +
mov ecx edi +
call sub_100A5CF  +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+5Ch]  +
jmp loc_1025D09  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScinit  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [esi+270h] 0 +
push 8000FFFFh  +
jnz loc_105A752  +
add esi 240h +
mov eax [esi] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1055354  +
mov ecx esi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+68h]  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_C] +
mov eax edi +
shr eax 1Dh +
and al 1 +
mov byte ptr [ebp+arg_C+3] al +
mov eax [ebp+arg_4] +
mov [ebp+var_10] eax +
lea eax [ebp+arg_0] +
push eax  +
mov ebx edi +
lea eax [ebp+var_10] +
lea ecx [esi+0A8h] +
shr ebx 1Eh +
and edi 9FFFFFFFh +
push eax  +
and bl 1 +
mov [ebp+var_C] edi +
mov [ebp+var_8] ecx +
call sub_101C37D  +
xor bl byte ptr [ebp+arg_C+3] +
jnz loc_105E4E5  +
push [ebp+arg_8]  +
lea ecx [esi+98h] +
test eax eax +
jnz loc_105E520  +
call sub_1055488  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_1055476  +
push [ebp+arg_8]  +
lea ecx [esi+0A0h] +
call sub_1055488  +
mov [ebp+arg_8] eax +
cmp eax 0FFFFFFFFh +
jz loc_105E54E  +
cmp ebx eax +
jnz loc_105E55F  +
push 8  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_105547F  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
mov [eax+4] edi +
mov ecx [ebp+var_8] +
push eax  +
call sub_101C2D1  +
mov [eax] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
mov [ebp+var_4] 80004005h +
jmp loc_105546C  +
xor eax eax +
jmp loc_1055461  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 0FFFFFFFFh  +
push dword ptr [ecx+4]  +
call sub_101DC24  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+wParam] 2 +
push edi  +
mov edi ecx +
jnz loc_10554BB  +
cmp [ebp+arg_8] 0 +
jz sub_1064C62  +
push [ebp+wParam]  +
push [ebp+lParam]  +
call sub_100E959  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
push 24h  +
mov eax offset dword_10D6924 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-14h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-20h] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push 0  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewScexpa  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi-4] +
test eax eax +
jz loc_105AF1F  +
mov eax [eax+0E0h] +
test eax eax +
jz loc_105AF1F  +
and dword ptr [ebp-18h] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
lea edx [ebp-10h] +
push edx  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 3 +
push eax  +
call dword ptr [ecx+44h]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105557B  +
mov ecx [esi+130h] +
test ecx ecx +
jz loc_105557B  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-10h]  +
call sub_10555E7  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-10h] +
mov [ebp-14h] ebx +
call sub_100C763  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-1Ch] +
mov ecx [ebp-20h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_100C5D1  +
mov ebx eax +
mov eax [edi+0A4h] +
mov esi [eax+0D8h] +
test esi esi +
jz loc_1055696  +
and [ebp+var_4] 0 +
push ebx  +
mov ecx edi +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx [esi] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
push esi  +
call dword ptr [ecx+48h]  +
test eax eax +
jl loc_1055696  +
xor esi esi +
cmp [ebp+arg_4] esi +
jle loc_1055640  +
mov eax [ebp+arg_0] +
mov eax [eax+esi*4] +
cmp eax [ebp+var_4] +
jz loc_1055640  +
inc esi  +
cmp esi [ebp+arg_4] +
jl loc_105562F  +
inc esi  +
cmp esi [ebp+arg_4] +
jge loc_105567B  +
push ebx  +
mov ecx edi +
call sub_100C799  +
test eax eax +
jz loc_1064CB0  +
push ebx  +
mov ecx edi +
call sub_100C799  +
mov ecx [ebp+arg_0] +
push dword ptr [ecx+esi*4]  +
mov ecx edi +
push eax  +
call sub_105569F  +
mov ebx eax +
test ebx ebx +
jnz loc_1055640  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
test ebx ebx +
jz loc_1055672  +
push dword ptr [ebp+arg_C]  +
xor eax eax +
cmp [ebp+arg_8] al +
mov ecx edi +
setnz al  +
inc eax  +
push eax  +
push ebx  +
call sub_10554A3  +
jmp loc_1055672  +
xor eax eax +
jmp loc_1055674  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+0A4h] +
mov esi [eax+0D8h] +
test esi esi +
jz loc_1064621  +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_1055700  +
push ebx  +
mov ecx edi +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx [esi] +
push offset dword_10F56E4  +
push eax  +
push esi  +
call dword ptr [ecx+48h]  +
mov dword_10F5380 eax +
test eax eax +
jl loc_1055700  +
mov eax dword_10F56E4 +
cmp eax [ebp+arg_4] +
jnz loc_10556F4  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
push ebx  +
mov ecx edi +
call sub_1055709  +
mov ebx eax +
jmp loc_10556C0  +
xor eax eax +
jmp loc_10556ED  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 1  +
push 110Ah  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_105A313  +
mov eax [ecx] +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 120Bh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov eax [esi+8] +
cmp eax 0FFFFFEBEh +
jz loc_10557A3  +
cmp eax 0FFFFFEC3h +
jz loc_105BFAB  +
cmp eax 0FFFFFEC7h +
jz loc_105BF13  +
cmp eax 0FFFFFEC8h +
jz loc_105BEEE  +
cmp eax 0FFFFFED2h +
jnz loc_100D1D2  +
jmp loc_10557A3  +
xor eax eax +
jmp loc_100D1A5  +
lea ecx [ebx+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
jmp loc_105BFBA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+94h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 104Dh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 1061h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov eax ecx +
mov dword ptr [eax+4] offset off_101D76C +
or dword ptr [eax+8] 0FFFFFFFFh +
or dword ptr [eax+0Ch] 0FFFFFFFFh +
and dword ptr [eax+10h] 0 +
mov dword ptr [eax] offset off_100C494 +
mov dword ptr [eax+4] offset off_101D794 +
retn   +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScgetp  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [esi+0D8h] +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push 8000FFFFh  +
mov esi eax +
push esi  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E10F  +
push dword ptr [ebp+0Ch]  +
mov eax [edi] +
push esi  +
push edi  +
call dword ptr [eax+0ECh]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push dword ptr [esi+4Ch]  +
push eax  +
call sub_100A3AE  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-10h] +
call ebx  +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-10h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10559F4  +
mov ecx [esi+4Ch] +
push edi  +
lea eax [ebp-20h] +
push eax  +
call sub_1055BC0  +
push eax  +
lea ecx [ebp-10h] +
call ebx  +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-10h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10559F4  +
lea edi [esi+1A0h] +
cmp dword ptr [edi] 0 +
jnz loc_105EA83  +
mov ecx [esi+4Ch] +
push 1  +
call sub_1022FA8  +
push 1  +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
call sub_1055123  +
push eax  +
lea ecx [ebp-10h] +
call ebx  +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-10h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
pop ebx  +
test al al +
jz loc_10550BD  +
jmp loc_105EABA  +
lea ecx [ebp-10h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10559A8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+75h] 0 +
jz loc_106544C  +
add ecx 18h +
pop ebp  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1055A46  +
call sub_1055A52  +
pop ebp  +
retn 4  +
call sub_1017B9B  +
jmp loc_1055A42  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+var_C] edi +
mov esi [edi] +
lea eax [esi-1] +
mov [ebp+var_4] esi +
mov [ebp+var_8] eax +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
cmpxchg [ecx] edx +
cmp esi eax +
jnz loc_1065445  +
pop edi  +
pop esi  +
leave   +
retn   +
***
lea eax [edi+0E4h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call sub_1056A11  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1055CAC  +
mov ecx edi +
call sub_100E4E1  +
push 8000FFFFh  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1055CAC  +
lea ecx [ebp-48h] +
call sub_1021775  +
mov ecx [ebp-14h] +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_105583E  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 6 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
mov byte ptr [edi+0F9h] 0 +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1055B69  +
push ebx  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 8 +
mov dword ptr [ebp-10h] 2 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
mov byte ptr [ebp+0Fh] 0 +
test al al +
jz loc_1055B6C  +
mov [ebp+0Fh] bl +
test byte ptr [ebp-10h] 2 +
mov dword ptr [ebp-4] 6 +
jz loc_1055B86  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-34h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp byte ptr [ebp+0Fh] 0 +
jz loc_105E938  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-10h] ebx +
lea ecx [ebp-44h] +
mov dword ptr [ebp-48h] offset off_100AB7C +
mov dword ptr [ebp-38h] offset off_100B8D0 +
call sub_100B8F1  +
jmp loc_1055CBC  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamclistview_0  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1055C07  +
cmp byte ptr [eax+19h] 5 +
jnb loc_105E8E5  +
mov eax [edi+9Ch] +
push 80004003h  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E8FC  +
mov eax [ebp-14h] +
add eax 1F8h +
push 80004003h  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E914  +
mov eax [ebp-14h] +
add eax 1F8h +
cmp dword ptr [eax+0D0h] 0 +
jnz loc_105E92C  +
cmp byte ptr [edi+0F9h] 0 +
jnz loc_1055A85  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
push ebx  +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_20] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistviewc_8  +
lea ecx [ebp+var_20] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+arg_1C] +
mov esi [ebp+arg_0] +
and dword ptr [eax] 0 +
mov eax [esi] +
push esi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jnz loc_105E96C  +
mov eax [ebp+arg_4] +
cmp eax dword_10F94C8 +
jnz loc_105E981  +
push 8000FFFFh  +
push dword ptr [esi+4Ch]  +
lea eax [ebp+var_10] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp+var_20] +
call edi  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_20] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1055FCB  +
mov eax [esi+4Ch] +
mov eax [eax+9Ch] +
mov ebx 80004003h +
push ebx  +
push eax  +
mov [ebp+arg_0] eax +
lea eax [ebp+var_10] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_20] +
call edi  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_20] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1055FCB  +
mov eax [ebp+arg_0] +
add eax 1F8h +
push ebx  +
push eax  +
mov [ebp+arg_4] eax +
lea eax [ebp+var_10] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_20] +
call edi  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_20] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1055FCB  +
mov ecx [esi+4Ch] +
xor ebx ebx +
push ebx  +
lea eax [ebp+var_10] +
push eax  +
call sub_1055BC0  +
push eax  +
lea ecx [ebp+var_20] +
call edi  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_20] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E988  +
or [ebp+var_48] 0FFFFFFFFh +
mov [ebp+var_54] ebx +
mov [ebp+arg_0] ebx +
mov ebx [ebp+arg_8] +
mov [ebp+lParam] 7 +
cmp ebx 0FFFFFFFFh +
jnz loc_105E996  +
or ebx 0FFFFFFFFh +
mov [ebp+var_40] ebx +
push ebx  +
push [ebp+arg_C]  +
mov ebx [ebp+arg_1C] +
push [ebp+wParam]  +
lea eax [ebp+var_10] +
push ebx  +
push eax  +
mov ecx esi +
call sub_105667D  +
push eax  +
lea ecx [ebp+var_20] +
call edi  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_20] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1055FCB  +
push 8000FFFFh  +
push dword ptr [ebx]  +
lea eax [ebp+var_10] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_20] +
call edi  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_20] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1055FCB  +
mov eax [ebp+arg_10] +
cmp eax 0FFFFFFFEh +
jz loc_1055EFE  +
or [ebp+lParam] 8 +
or [ebp+var_4C] 0FFFFFFFFh +
mov [ebp+var_50] eax +
mov edx [ebx] +
cmp dword ptr [edx+0Ch] 3951589h +
jnz loc_105E9D9  +
mov eax [ebp+arg_18] +
cmp eax 0FFFFFFFFh +
jnz loc_1055F1B  +
mov eax [esi+90h] +
cmp dword ptr [esi+0D0h] 0 +
mov [ebp+var_58] eax +
jz loc_105E9C5  +
push edx  +
call sub_105572A  +
mov ecx [esi+4Ch] +
mov [ebp+var_3C] eax +
lea eax [ebp+lParam] +
push eax  +
call sub_10557D3  +
mov [ebp+wParam] eax +
cmp eax 0FFFFFFFFh +
jz loc_105EA24  +
xor ebx ebx +
inc ebx  +
push ebx  +
push [ebp+wParam]  +
lea ecx [esi+1A8h] +
push [ebp+var_3C]  +
call sub_1056413  +
lea eax [esi+8Ch] +
inc dword ptr [eax]  +
cmp [eax] ebx +
jz loc_1056020  +
mov eax [ebp+arg_1C] +
mov eax [eax] +
cmp dword ptr [eax+0Ch] 3951589h +
jnz loc_1055F85  +
inc dword ptr [esi+90h]  +
cmp dword ptr [esi+198h] 0 +
jnz loc_105EA50  +
lea ecx [ebp+var_20] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1055FCB  +
push [ebp+wParam]  +
lea eax [ebp+var_10] +
push offset loc_1018B75  +
push eax  +
lea ecx [esi+4] +
call sub_100FB75  +
push eax  +
lea ecx [ebp+var_20] +
call edi  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_20] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp+var_20] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_20] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
mov eax [esi+4Ch] +
push ebx  +
push 0  +
push dword ptr [eax+20h]  +
call ds:InvalidateRect  +
jmp loc_1055F71  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-18h] esi +
push 0Ah  +
xor eax eax +
pop ecx  +
push dword ptr [ebp+8]  +
lea edi [ebp-40h] +
stos   +
and [ebp-30h] eax +
mov eax dword_10F94CC +
or dword ptr [ebp-28h] 0FFFFFFFFh +
or dword ptr [ebp-34h] 0FFFFFFFFh +
mov ecx esi +
mov dword ptr [ebp-40h] 16h +
mov [ebp-2Ch] eax +
call sub_100C799  +
mov ecx [esi+0A4h] +
mov ebx [ecx+0D8h] +
mov [ebp+8] eax +
test eax eax +
jz loc_1056158  +
push dword ptr [ebp+8]  +
mov ecx esi +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov edi eax +
xor eax eax +
cmp edi eax +
jz loc_1056147  +
and dword ptr [ebp-40h] 0FFFFFFF7h +
mov [ebp-24h] eax +
mov [ebp-20h] edi +
mov [ebp-10h] eax +
mov esi [ebx] +
lea ecx [ebp-10h] +
mov [ebp-4] eax +
mov [ebp-14h] eax +
call sub_100A5E6  +
push eax  +
push offset dword_1023D6C  +
push ebx  +
call dword ptr [esi]  +
test eax eax +
jl loc_1064583  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx+130h]  +
test eax eax +
jl loc_10645B7  +
mov eax [ebp-14h] +
or dword ptr [ebp-40h] 8 +
and eax 0Fh +
shl eax 8 +
mov [ebp-24h] eax +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1056112  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
lea edx [ebp-40h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_10645EC  +
push dword ptr [ebp-38h]  +
mov eax [ebx] +
push edi  +
push ebx  +
call dword ptr [eax+40h]  +
mov ecx [ebp-18h] +
push dword ptr [ecx+98h]  +
mov eax [ebx] +
push edi  +
push ebx  +
call dword ptr [eax+9Ch]  +
mov esi [ebp-18h] +
push 1  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1023DC6  +
jmp loc_1056084  +
xor eax eax +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+14h] +
test eax eax +
jnz loc_10561AB  +
cmp [ebp+arg_0] eax +
jz loc_1057030  +
push edi  +
mov edi [ebp+arg_8] +
test edi edi +
jnz loc_1057038  +
push [ebp+arg_0]  +
call dword ptr [esi+20h]  +
push 0  +
push edi  +
push [ebp+arg_4]  +
mov ecx esi +
push eax  +
call sub_1054565  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10561B5  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
mov esi ecx +
cmp byte ptr [esi+75h] 0 +
jz loc_10561CF  +
lea ecx [esi+18h] +
call sub_1017C03  +
xor ebx ebx +
cmp [esi+14h] ebx +
jnz loc_1065601  +
push edi  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1054485  +
push [ebp+arg_4]  +
mov ecx esi +
mov [ebp+var_1C] eax +
call sub_1054485  +
push eax  +
mov ecx esi +
call sub_105445E  +
mov edi eax +
push edi  +
mov ecx esi +
mov [ebp+var_18] edi +
call sub_10545AF  +
cmp [esi+75h] bl +
jz loc_1056214  +
lea ecx [esi+18h] +
call sub_1017B9B  +
push [ebp+arg_0]  +
or [ebp+var_8] 0FFFFFFFFh +
mov [ebp+var_C] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_1] bl +
call dword ptr [esi+20h]  +
mov [ebp+var_14] eax +
add edi 4 +
xor ebx ebx +
mov eax [edi+ebx*4] +
cmp eax 1E3603Bh +
jnz loc_1065616  +
mov [ebp+var_8] ebx +
test edi edi +
jz loc_1065676  +
push 1  +
push [ebp+arg_0]  +
call dword ptr [esi+2Ch]  +
cmp [ebp+var_1] 0 +
jnz loc_10656AA  +
lea eax [esi+60h] +
push eax  +
call ds:InterlockedIncrement  +
mov ebx [ebp+var_8] +
mov eax [ebp+arg_4] +
mov [edi+ebx*4] eax +
mov eax [ebp+arg_0] +
mov [edi+ebx*4+20h] eax +
push [ebp+var_18]  +
mov ecx esi +
call sub_1054616  +
cmp [ebp+var_C] 0 +
jnz loc_10562BB  +
mov ecx [ebp+arg_10] +
test ecx ecx +
jnz loc_10656BB  +
mov eax [esi+60h] +
fild  dword ptr [esi+60h] +
test eax eax +
jl loc_10656E6  +
mov eax [esi+64h] +
fild  dword ptr [esi+64h] +
test eax eax +
jl loc_10656F1  +
fmul  qword ptr [esi+40h] +
fcompp st(1) st +
fnstsw  ax +
test ah 5 +
jnp loc_10656DA  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
test eax eax +
jz loc_105628F  +
jmp loc_10562BB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1057050  +
and dword ptr [esi] 0 +
and [ebp+arg_4] 0 +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1056303  +
mov ecx [ebp+arg_4] +
mov [esi] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+14h] +
test eax eax +
jnz loc_1056333  +
cmp [ebp+arg_4] eax +
jz loc_1057048  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1054565  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_105633D  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
mov esi ecx +
or ebx 0FFFFFFFFh +
cmp byte ptr [esi+75h] 0 +
mov [ebp+var_8] 2 +
jz loc_10563E3  +
lea ecx [esi+18h] +
call sub_1056DAA  +
mov byte ptr [ebp+var_4] al +
cmp dword ptr [esi+14h] 0 +
mov ecx esi +
jnz loc_10654F2  +
push edi  +
push [ebp+arg_4]  +
call sub_1054485  +
push [ebp+arg_4]  +
mov ecx esi +
mov [ebp+var_10] eax +
call sub_1054485  +
push eax  +
mov ecx esi +
call sub_105445E  +
mov edi eax +
push edi  +
mov ecx esi +
mov [ebp+var_C] edi +
call sub_1056D47  +
push [ebp+var_4]  +
mov ecx esi +
call sub_1055A1A  +
add edi 4 +
jz loc_10563C4  +
xor ebx ebx +
mov eax [edi+ebx*4] +
cmp eax 1E3603Bh +
jnz loc_1065502  +
push [ebp+var_C]  +
mov ecx esi +
call sub_10563F7  +
mov eax [ebp+arg_C] +
test eax eax +
jnz loc_1065545  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
mov byte ptr [ebp+var_4] 1 +
jmp loc_105636E  +
***
mov edi [edi+1Ch] +
test edi edi +
jz loc_10563C4  +
jmp loc_10563B4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+75h] 0 +
jz loc_105640A  +
mov ecx [ebp+arg_0] +
call sub_1055A52  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
lea ebx [esi+8] +
mov ecx ebx +
call sub_10562D0  +
mov edi [ebp+var_8] +
test edi edi +
jnz loc_1057094  +
push 10h  +
call sub_100ABF0  +
test eax eax +
jz loc_10564C2  +
mov ecx [ebp+arg_0] +
mov [eax+8] ecx +
mov ecx [ebp+arg_4] +
mov [eax+0Ch] ecx +
mov edi eax +
test edi edi +
jz loc_10570B8  +
push 0  +
push 0  +
push edi  +
mov ecx ebx +
call sub_1056167  +
push eax  +
call ds:?LKResult2HRESULT@BookKeeping@@SGJJ@Z  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10564C6  +
inc dword ptr [esi+94h]  +
mov eax [esi+94h] +
cmp eax [esi+90h] +
ja loc_10570C4  +
cmp [ebp+arg_8] 0 +
jz loc_10564A6  +
push 1  +
push edi  +
mov ecx esi +
call sub_10564D6  +
lea eax [esi+88h] +
mov [edi+4] eax +
mov ecx [eax] +
mov [edi] ecx +
mov [ecx+4] edi +
mov [eax] edi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
xor edi edi +
jmp loc_105645C  +
push 1  +
mov ecx edi +
call sub_1054A51  +
jmp loc_10564B8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi+0Ch] +
lea eax [ecx+88h] +
cmp [eax] eax +
jz loc_105650C  +
mov ecx [ecx+8Ch] +
mov eax [eax] +
test eax eax +
jz loc_105650C  +
cmp eax edi +
jz loc_1056508  +
mov edx [eax+0Ch] +
cmp edx esi +
jge loc_105700A  +
cmp eax ecx +
jnz loc_10564F3  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
lea eax [ebp-0CCh] +
push eax  +
lea ecx [ebp-0C8h] +
mov byte ptr [ebx+0DDh] 0 +
call sub_10565FB  +
push 8000FFFFh  +
push dword ptr [ebp-0C8h]  +
lea eax [ebp-24h] +
push eax  +
mov byte ptr [ebp-4] 0Eh +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 0Fh +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0Eh +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CE7E  +
and dword ptr [ebp-0D0h] 0 +
lea ecx [ebp-0C8h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-0D0h] +
push edx  +
push eax  +
call dword ptr [ecx+3Ch]  +
push eax  +
lea ecx [ebp-0C0h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CE7E  +
cmp dword ptr [ebp-0D0h] 0 +
jz loc_105CEB4  +
mov eax [ebp-0C8h] +
mov byte ptr [ebp-4] 4 +
test eax eax +
jz loc_10565D2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp dword ptr [ebp-0A4h] 0 +
jnz loc_1025E5A  +
test byte ptr [ebp-44h] 42h +
jnz loc_1025E5A  +
mov eax [ebp-0DCh] +
mov [eax] edi +
jmp loc_1025E5A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_105661C  +
push eax  +
call sub_1056628  +
test eax eax +
jl loc_105ADF8  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_105AD4C  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_1056668  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jl loc_105AD45  +
push [ebp+arg_0]  +
call sub_100CA34  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistviewc_9  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 18h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1056756  +
push dword ptr [ebp+18h]  +
mov ecx eax +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
call sub_10567AB  +
mov esi [ebp+0Ch] +
push 8007000Eh  +
push eax  +
mov [esi] eax +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E21D  +
push dword ptr [esi]  +
call ds:?AddItem@BookKeeping@@SGJAAVItemHandle@@@Z  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E22F  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
xor eax eax +
jmp loc_10566CC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
and dword ptr [eax+8] 0 +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_8] +
mov [eax+10h] ecx +
mov ecx [ebp+arg_4] +
mov dword ptr [eax+4] 49544D48h +
mov dword ptr [eax] offset off_10567E0 +
mov [eax+14h] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 1  +
call sub_10216D6  +
mov esi eax +
test esi esi +
jz loc_1056853  +
mov eax [ebp+arg_0] +
mov [esi] eax +
lea eax [esi+4] +
test eax eax +
jz loc_105685F  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
push [ebp+arg_8]  +
lea eax [esi+8] +
push eax  +
call sub_1056877  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_105688B  +
push [ebp+arg_4]  +
call sub_1056894  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax+4] offset off_101D76C +
mov dword ptr [eax] offset off_100C494 +
mov dword ptr [eax+4] offset off_101D794 +
mov edx [ecx+10h] +
mov [eax+10h] edx +
mov edx [ecx+0Ch] +
mov [eax+0Ch] edx +
mov ecx [ecx+8] +
mov [eax+8] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 80h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
test edi edi +
jz loc_10569E3  +
cmp word ptr [edi] 0 +
jz loc_10569E3  +
mov esi [ebp+arg_0] +
mov eax [esi+8Ch] +
and [ebp+arg_8] 0 +
cmp eax [esi+90h] +
jg loc_105E68A  +
mov eax [ebp+arg_C] +
mov [ebp+lParam] 4 +
mov [ebp+var_44] edi +
cmp eax 0FFFFFFFEh +
jz loc_1056925  +
mov [ebp+lParam] 5 +
mov [ebp+var_4C] eax +
mov ebx [ebp+arg_10] +
cmp ebx 0FFFFFFFEh +
jz loc_105693D  +
or [ebp+lParam] 2 +
cmp ebx 0FFFFFFFFh +
jz loc_105E696  +
mov [ebp+var_48] ebx +
mov ecx [esi+4Ch] +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
call sub_10557F4  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_105E68A  +
push 30h  +
lea eax [ebp+var_80] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+wParam] +
add esp 0Ch +
mov [ebp+var_80] 8 +
cmp ebx 0FFFFFFFCh +
jz loc_105E6EE  +
mov ecx [ebp+var_48] +
and eax 0FFFE0000h +
and ecx 0FFFFh +
or eax ecx +
mov ecx [esi+4Ch] +
mov [ebp+var_68] eax +
call sub_100E4E1  +
test eax eax +
jz loc_10569A5  +
lea ecx [ebp+var_80] +
push ecx  +
push edi  +
mov ecx eax +
call sub_10569EF  +
push [ebp+wParam]  +
inc dword ptr [esi+94h]  +
push offset loc_1028705  +
lea eax [ebp+var_10] +
push eax  +
lea ecx [esi+4] +
call sub_100FB75  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp+var_10] +
test al al +
jnz loc_105E6FD  +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
mov eax 80070057h +
jmp loc_10569DC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 120Ch  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-18h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamclistview_1  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E8B5  +
lea ecx [edi+4] +
mov [ebp-1Ch] ecx +
call sub_100B8AF  +
mov ecx [ebp-18h] +
call sub_100E4E1  +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E8CA  +
mov ecx [ebp-14h] +
call sub_101C44D  +
xor ecx ecx +
push 4  +
pop edx  +
mov [ebp-18h] eax +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_100F31C  +
and dword ptr [ebp-20h] 0 +
mov edi eax +
mov [ebp-24h] edi +
push 0  +
mov byte ptr [ebp-4] 4 +
call ??3@YAXPAX@Z  +
pop ecx  +
pop ecx  +
push 8007000Eh  +
push edi  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1056C0D  +
push dword ptr [ebp-18h]  +
mov ecx [ebp-14h] +
push edi  +
call MFC42u_6712  +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
mov esi 80004005h +
add eax esi +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1056C0D  +
and dword ptr [ebp+0Ch] 0 +
cmp dword ptr [ebp-18h] 0 +
jle loc_1056C0D  +
push 30h  +
lea eax [ebp-78h] +
push 0  +
push eax  +
call memset  +
mov ecx [ebp-14h] +
add esp 0Ch +
lea eax [ebp-78h] +
push eax  +
mov eax [ebp+0Ch] +
push dword ptr [edi+eax*4]  +
mov dword ptr [ebp-78h] 9 +
call sub_1055747  +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax esi +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1056C0D  +
lea ecx [ebp-48h] +
call sub_1055816  +
test dword ptr [ebp-60h] 10000h +
mov eax [ebp+0Ch] +
mov eax [edi+eax*4] +
mov [ebp-40h] eax +
jnz loc_105E8D9  +
mov eax [ebp-74h] +
mov ecx [ebp-1Ch] +
lea edx [ebp-48h] +
mov [ebp-3Ch] eax +
mov eax [ecx+4] +
push edx  +
push eax  +
call sub_1056C89  +
inc dword ptr [ebp+0Ch]  +
mov eax [ebp+0Ch] +
cmp eax [ebp-18h] +
jl loc_1056B7F  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
push edi  +
mov [ebp-10h] ebx +
call ??3@YAXPAX@Z  +
pop ecx  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea edi [eax+4] +
push dword ptr [edi]  +
mov ebx ecx +
push eax  +
call sub_1056839  +
push 1  +
mov ecx ebx +
mov esi eax +
call sub_1056CC2  +
mov [edi] esi +
mov eax [esi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov eax [ecx+8] +
mov edx [ebp+8] +
mov esi 0CCCCCCCh +
sub esi eax +
cmp esi edx +
jb loc_105E85F  +
add eax edx +
mov [ecx+8] eax +
call sub_1001FCF  +
retn 4  +
***
push dword ptr [esi+94h]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_1056039  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_102636E  +
jmp loc_1056D34  +
lea ecx [esi+94h] +
call sub_100A5CF  +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+5Ch]  +
jmp loc_102637A  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
jmp loc_1064B69  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+75h] 0 +
jz loc_1056D5A  +
mov ecx [ebp+arg_0] +
call sub_1056D63  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
mov [ebp+var_C] edi +
mov [ebp+var_4] esi +
test esi 0FFFF8000h +
jnz loc_1056D9A  +
lea eax [esi+1] +
mov [ebp+var_8] eax +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
cmpxchg [ecx] edx +
cmp esi eax +
jnz loc_1056D9A  +
pop edi  +
pop esi  +
leave   +
retn   +
push 0  +
mov ecx edi +
call sub_10C8F67  +
jmp loc_1056D96  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
mov edi ecx +
call sub_1056E05  +
test al al +
jnz loc_1065471  +
push esi  +
mov esi [edi] +
mov eax 0FFFFh +
mov ecx esi +
and ecx eax +
mov [ebp+var_C] edi +
mov [ebp+var_4] esi +
cmp ecx eax +
jz loc_1056DF5  +
lea eax [esi+1] +
mov [ebp+var_8] eax +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
cmpxchg [ecx] edx +
cmp esi eax +
jnz loc_1056DF5  +
mov al 1 +
pop esi  +
pop edi  +
leave   +
retn   +
push 3  +
mov ecx edi +
call sub_10C90A3  +
jmp loc_1056DEF  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:GetCurrentThreadId  +
mov ecx [esi+4] +
xor eax ecx +
and eax 0FFFFFFFCh +
neg eax  +
sbb al al +
inc al  +
pop esi  +
retn   +
***
mov eax ecx +
jmp loc_1010C32  +
***
mov [esi+4] edx +
jmp loc_101C482  +
mov [ecx] eax +
jmp loc_101C4A4  +
***
mov eax [esi] +
cmp eax [edi+0Ch] +
jnb loc_1064D43  +
push esi  +
push edi  +
push 1  +
jmp loc_1022C4F  +
mov eax [esi] +
cmp [edi+0Ch] eax +
jb loc_1064D12  +
jmp loc_1064D43  +
***
cmp eax ebx +
jnz loc_1029BEB  +
jmp loc_105B9DA  +
cmp dword ptr [ebp-14h] 0 +
jz loc_105B9E9  +
jmp loc_1029C59  +
***
mov eax [ecx+28h] +
mov eax [eax+4Ch] +
mov eax [eax+9Ch] +
mov eax [eax+2D0h] +
shr eax 5 +
and al 1 +
retn   +
***
mov eax [eax+0Ch] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_101C396  +
***
push 0A8h  +
mov eax offset dword_10DAA50 +
call sub_100C4D0  +
mov edi ecx +
call ?Default@CWnd@@IAEJXZ  +
mov ecx edi +
call sub_101C418  +
test al al +
jnz loc_105E2A0  +
call sub_100C50D  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov [ebp+var_8] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
add ecx 0A8h +
xor esi esi +
call sub_101C37D  +
test eax eax +
jz loc_105E40D  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
push 30h  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
mov esi ecx +
call memset  +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
mov ecx esi +
mov [ebp+lParam] 8 +
call sub_1055747  +
pop esi  +
test eax eax +
jz loc_1056F73  +
test [ebp+var_18] 10000h +
jnz loc_105E121  +
xor al al +
leave   +
retn 4  +
***
mov ecx [esi+178h] +
push edi  +
call sub_1056F94  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
jmp loc_101CFF7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 158h +
pop ebp  +
jmp sub_100CF5E  +
***
lea eax [ebp+arg_0] +
push eax  +
lea eax [esi+8] +
push eax  +
call sub_1056FC6  +
test eax eax +
jz loc_105E101  +
mov eax esi +
jmp loc_101C3D4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
mov edx [eax] +
cmp edx [ecx] +
jnz loc_1056FEA  +
mov eax [eax+4] +
cmp eax [ecx+4] +
jnz loc_1056FEA  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_1056FE6  +
***
push dword ptr [esi]  +
call SysFreeString  +
test [ebp+arg_0] 1 +
jz loc_1057003  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
jmp loc_1053191  +
***
cmp [ebp+arg_4] 0 +
jz loc_1057013  +
inc edx  +
jmp loc_1057014  +
dec edx  +
mov [eax+0Ch] edx +
jmp loc_1056508  +
***
test al al +
jnz loc_1017C66  +
mov ecx edi +
call sub_10C920C  +
jmp loc_1017C66  +
***
push 0FFFFFFA0h  +
pop eax  +
jmp loc_10561AB  +
and dword ptr [edi] 0 +
jmp loc_105618B  +
***
push 0FFFFFFA0h  +
pop eax  +
jmp loc_1054805  +
***
push 0FFFFFFA0h  +
pop eax  +
jmp loc_1056333  +
***
push 0FFFFFFA0h  +
pop eax  +
jmp loc_10562F9  +
***
pop esi  +
retn   +
***
mov [eax] edx +
jmp loc_10355BC  +
***
push dword ptr [esi+9Ch]  +
push dword ptr [esi+98h]  +
push offset dword_1057084  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
jmp loc_101ACAA  +
***
cmp [ebp+arg_8] 1 +
jnz loc_10570AD  +
mov ecx esi +
call sub_1018278  +
mov [ebp+var_4] 80070057h +
jmp loc_10564B8  +
push edi  +
call sub_101AD4D  +
jmp loc_10564A6  +
mov [ebp+var_4] 8007000Eh +
jmp loc_10564B8  +
lea eax [esi+88h] +
cmp [eax] eax +
jz loc_1056496  +
mov ebx [esi+8Ch] +
push ebx  +
call sub_101AD4D  +
test ebx ebx +
jz loc_1056496  +
lea eax [esi+88h] +
cmp ebx eax +
jz loc_1056496  +
push ebx  +
lea ecx [esi+8] +
call sub_10547D4  +
push 1  +
mov ecx ebx +
call sub_1054A51  +
dec dword ptr [esi+94h]  +
jmp loc_1056496  +
***
mov esp [ebp-18h] +
mov esi 8007000Eh +
jmp loc_10407B9  +
***
test ebx ebx +
jnz loc_105713C  +
mov [ebp+var_8] 80004003h +
jmp loc_10406DA  +
mov esi ds:CompareStringW +
or edi 0FFFFFFFFh +
push edi  +
push offset aS_0  +
push edi  +
push ebx  +
push 1  +
push 7Fh  +
call esi  +
cmp eax 2 +
jz loc_1057185  +
push edi  +
push offset aDde  +
push edi  +
push ebx  +
push 1  +
push 7Fh  +
call esi  +
cmp eax 2 +
jz loc_1057185  +
push edi  +
push offset aA  +
push edi  +
push ebx  +
push 1  +
push 7Fh  +
call esi  +
cmp eax 2 +
jnz loc_105719F  +
mov eax [ebp+var_4] +
mov byte ptr [eax+2Ch] 1 +
cmp [ebp+arg_8] 0 +
jz loc_10406DA  +
push [ebp+arg_8]  +
mov ecx [ebp+var_4] +
call ?ParseLast@CCommandLineInfo@@IAEXH@Z  +
jmp loc_10406DA  +
push edi  +
push offset aRegserver  +
push edi  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
push 7Fh  +
call esi  +
cmp eax 2 +
jnz loc_10571BD  +
mov eax [ebp+var_4] +
mov byte ptr [eax+2Dh] 1 +
jmp loc_1057185  +
mov esi ds:lstrcmpW +
push offset a64  +
push ebx  +
call esi  +
test eax eax +
jnz loc_10571D8  +
mov eax [ebp+var_4] +
and dword ptr [eax+28h] 0 +
jmp loc_1057185  +
push offset a32  +
push ebx  +
call esi  +
test eax eax +
jnz loc_10571EC  +
mov eax [ebp+var_4] +
mov [eax+28h] edi +
jmp loc_1057185  +
push 5  +
push offset aDump  +
push ebx  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_10406CB  +
mov ecx [ebp+var_4] +
add ebx 0Ah +
push ebx  +
add ecx 30h +
call sub_100AE0E  +
mov [ebp+var_8] eax +
test eax eax +
jge loc_1057185  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10406DA  +
cmp byte ptr [eax+19h] 2 +
jb loc_10406DA  +
push [ebp+var_8]  +
push offset dword_106B628  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10406DA  +
***
xor eax eax +
inc eax  +
jmp loc_1040787  +
push 0  +
lea ecx [ebp-20h] +
call sub_101D6F2  +
test esi esi +
jz loc_10572E5  +
mov esi ebx +
push ebx  +
jmp loc_1040730  +
mov eax lpDst +
mov esi 8007000Eh +
jmp loc_1057308  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1057300  +
cmp byte ptr [eax+19h] 2 +
jb loc_1057300  +
push esi  +
push offset dword_106B628  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10572FB  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10572F9  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax lpDst +
test esi esi +
jge loc_1040779  +
cmp eax offset lpDst +
jz loc_1040779  +
cmp byte ptr [eax+19h] 2 +
jb loc_1040779  +
mov edi [edi] +
push esi  +
push edi  +
push offset dword_106B628  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
jmp loc_1040779  +
***
xor eax eax +
mov [edi+esi*2] ax +
jmp loc_104D286  +
***
cmp [esi+10h] edi +
jnz loc_103F0AE  +
mov ecx [esi+14h] +
cmp [ecx-8] ebx +
jz loc_103F0AE  +
cmp [esi+6Dh] bl +
jz loc_105739A  +
push 25h  +
mov ecx esi +
call sub_106F9E9  +
mov edi eax +
cmp edi ebx +
jge loc_103F0AE  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103F0A8  +
cmp byte ptr [eax+19h] 2 +
jb loc_103F0A8  +
push edi  +
push dword ptr [esi+14h]  +
push offset dword_106B628  +
push 16h  +
jmp loc_1057435  +
cmp [esi+6Eh] bl +
jz loc_10573D9  +
push 29h  +
mov ecx esi +
call sub_106F9E9  +
mov edi eax +
cmp edi ebx +
jge loc_103F0AE  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103F0A8  +
cmp byte ptr [eax+19h] 2 +
jb loc_103F0A8  +
push edi  +
push dword ptr [esi+14h]  +
push offset dword_106B628  +
push 17h  +
jmp loc_1057435  +
mov edi 80070002h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103F0A8  +
cmp byte ptr [eax+19h] 2 +
jb loc_103F0A8  +
push ecx  +
push offset dword_106B628  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
jmp loc_103F0A8  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103F0A8  +
cmp byte ptr [eax+19h] 2 +
jb loc_103F0A8  +
push edi  +
push dword ptr [esi+5Ch]  +
push offset dword_106B628  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
jmp loc_103F0A8  +
***
push 0  +
call sub_102F8EA  +
jmp loc_10400E4  +
push 0  +
lea ecx [ebp-2Ch] +
mov ebx edi +
call sub_101D6F2  +
and dword ptr [ebp-18h] 0 +
push edi  +
jmp loc_10400AC  +
mov dword ptr [ebp-14h] 8007000Eh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10401DA  +
cmp byte ptr [eax+19h] 2 +
jb loc_10401DA  +
push offset dword_106B628  +
push 1Fh  +
jmp loc_1057535  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10574A8  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-14h] eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10574D2  +
cmp byte ptr [eax+19h] 2 +
jb loc_10574D2  +
push dword ptr [ebp-14h]  +
push offset dword_106B628  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
push 0  +
jmp loc_10400F5  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10401DA  +
cmp byte ptr [eax+19h] 2 +
jb loc_10401DA  +
push dword ptr [ebp-14h]  +
push offset dword_106B628  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10401DA  +
mov dword ptr [ebp-14h] 8007000Eh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10401DA  +
cmp byte ptr [eax+19h] 2 +
jb loc_10401DA  +
push offset dword_106B628  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10401DA  +
call sub_102F90C  +
test al al +
jz loc_105757C  +
call ds:__imp_GetLastError  +
cmp eax 2 +
jnz loc_105757C  +
push dword ptr [esi+5Ch]  +
push edi  +
push ebx  +
call sub_100A593  +
mov eax ebx +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1057568  +
sub eax ecx +
sar eax 1 +
jnz loc_1040191  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1057590  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-14h] eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10401D0  +
cmp byte ptr [eax+19h] 2 +
jb loc_10401D0  +
push offset dword_106B628  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10401D0  +
call sub_103F0BA  +
push eax  +
push ebx  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10575DC  +
mov byte ptr [esi+6Eh] 1 +
jmp loc_10401D0  +
mov byte ptr [esi+6Fh] 1 +
jmp loc_10401D0  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1040064  +
cmp byte ptr [eax+19h] 2 +
jb loc_1040064  +
push ebx  +
push offset dword_106B628  +
push 1Ah  +
jmp loc_1057793  +
call sub_1040209  +
push eax  +
push dword ptr [esi+74h]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10576E2  +
call sub_103F0BA  +
push eax  +
push dword ptr [esi+74h]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10576E2  +
lea ecx [ebp-20h] +
call sub_100AD56  +
and dword ptr [ebp-4] 0 +
push edi  +
push dword ptr [esi+74h]  +
lea eax [ebp-20h] +
push offset aSS  +
push eax  +
call sub_104C71D  +
mov ebx eax +
add esp 10h +
test ebx ebx +
jge loc_105769B  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105768A  +
cmp byte ptr [eax+19h] 2 +
jb loc_105768A  +
push ebx  +
push offset dword_106B628  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call sub_100A77D  +
jmp loc_1040064  +
push dword ptr [ebp-1Ch]  +
call sub_103F166  +
mov [esi+6Fh] al +
test al al +
jz loc_10576D6  +
push dword ptr [ebp-1Ch]  +
mov ecx esi +
call sub_103F058  +
mov ebx eax +
test ebx ebx +
jge loc_105768A  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105768A  +
cmp byte ptr [eax+19h] 2 +
jb loc_105768A  +
push ebx  +
push offset dword_106B628  +
push 1Ch  +
jmp loc_105767F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call sub_100A77D  +
push edi  +
push 25h  +
call sub_10702A0  +
mov [esi+6Dh] al +
call sub_102F90C  +
test al al +
jz loc_1057707  +
push edi  +
push 29h  +
call sub_10702A0  +
test al al +
jz loc_1057707  +
xor eax eax +
inc eax  +
jmp loc_1057709  +
xor eax eax +
mov cl [esi+6Dh] +
mov [esi+6Eh] al +
test cl cl +
jz loc_105774E  +
test al al +
jnz loc_1057756  +
push 25h  +
mov ecx esi +
call sub_106F9E9  +
mov ebx eax +
test ebx ebx +
jge loc_1040064  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1040064  +
cmp byte ptr [eax+19h] 2 +
jb loc_1040064  +
push ebx  +
push offset dword_106B628  +
push 1Dh  +
jmp loc_1057793  +
test al al +
jz loc_1040064  +
test cl cl +
jnz loc_1040064  +
push 29h  +
mov ecx esi +
call sub_106F9E9  +
mov ebx eax +
test ebx ebx +
jge loc_1040064  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1040064  +
cmp byte ptr [eax+19h] 2 +
jb loc_1040064  +
push ebx  +
push offset dword_106B628  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_1040064  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1040006  +
cmp byte ptr [eax+19h] 2 +
jb loc_1040006  +
push ebx  +
push offset dword_106B628  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_1040006  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103FFB0  +
cmp byte ptr [eax+19h] 2 +
jb loc_103FFB0  +
push ebx  +
push edi  +
push offset dword_106B628  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
jmp loc_103FFB0  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_103FFDB  +
cmp byte ptr [ecx+19h] 2 +
jb loc_103FFDB  +
mov edx [edi] +
push eax  +
push edx  +
push offset dword_106B628  +
push 12h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10701D4  +
jmp loc_103FFDB  +
push ebx  +
call sub_102F8EA  +
jmp loc_103FFE9  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1040006  +
cmp byte ptr [eax+19h] 2 +
jb loc_1040006  +
push ebx  +
push offset dword_106B628  +
push 13h  +
jmp loc_10577C5  +
push dword ptr [esi+34h]  +
lea ecx [ebp+0Fh] +
call sub_102F8C7  +
lea eax [esi+30h] +
push eax  +
mov dword ptr [ebp-4] 1 +
call sub_106FA78  +
mov ebx eax +
test ebx ebx +
jge loc_10578BB  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10578BB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10578BB  +
mov esi [esi+34h] +
push ebx  +
push esi  +
push offset dword_106B628  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp byte ptr [ebp+0Fh] 0 +
jz loc_1040006  +
push 0  +
call sub_102F8EA  +
jmp loc_1040006  +
***
push esi  +
push ebx  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
jmp loc_102F96E  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10578FD  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx eax +
mov eax lpDst +
cmp eax edi +
jz loc_102F9C7  +
cmp byte ptr [eax+19h] 2 +
jb loc_102F9C7  +
push ecx  +
push ebx  +
push 0Bh  +
jmp loc_105794D  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1057930  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx eax +
mov eax lpDst +
cmp eax edi +
jz loc_102F9C7  +
cmp byte ptr [eax+19h] 2 +
jb loc_102F9C7  +
push ecx  +
push ebx  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_102F9C7  +
push ebx  +
push 0Dh  +
jmp loc_1057992  +
mov byte_10F985F 1 +
cmp [ebp+var_4] esi +
ja loc_1057978  +
cmp [ebp+var_4] 0 +
jnz loc_102F9C7  +
mov eax lpDst +
cmp eax edi +
jz loc_102F9C7  +
cmp byte ptr [eax+19h] 2 +
jb loc_102F9C7  +
push ebx  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_102F9C7  +
***
push 0  +
mov ebx edi +
call sub_101D6F2  +
push edi  +
jmp loc_103F11A  +
mov dword ptr [ebp-10h] 8007000Eh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103F14B  +
cmp byte ptr [eax+19h] 2 +
jb loc_103F14B  +
push offset dword_102F7D0  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_103F14B  +
push 0  +
call sub_101D6F2  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1057A04  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-10h] eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103F14B  +
cmp byte ptr [eax+19h] 2 +
jb loc_103F14B  +
push offset dword_102F7D0  +
push 13h  +
jmp loc_10579D9  +
***
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
jmp loc_103F19A  +
***
call ds:__imp_GetLastError  +
cmp eax 2 +
jz loc_103F1B7  +
mov ecx lpDst +
cmp ecx edi +
jz loc_103F1B7  +
cmp byte ptr [ecx+19h] 2 +
jb loc_103F1B7  +
push eax  +
push ebx  +
push esi  +
push 11h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10701D4  +
jmp loc_103F1B7  +
push 0  +
call sub_102F8EA  +
jmp loc_103F1C5  +
***
xor eax eax +
retn   +
***
cmp dword ptr [ebp-0E8h] 32h +
jb loc_102AF01  +
mov [ebp-0DCh] esi +
jmp loc_102AF01  +
push 3466h  +
lea eax [ebp-120h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-10Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-120h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea eax [ebp-10Ch] +
push eax  +
mov ecx edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102AF28  +
***
lea edi [esi+140h] +
push dword ptr [edi]  +
push 1Dh  +
push ebx  +
push ebx  +
call sub_10D0BFD  +
mov [esi+13Ch] bl +
add esi 144h +
push dword ptr [esi]  +
mov [edi] ebx +
call ds:IsWindow  +
test eax eax +
jz loc_1057B42  +
push dword ptr [esi]  +
call ds:DestroyWindow  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
mov [esi] ebx +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
jmp loc_1050A98  +
***
xor eax eax +
pop esi  +
retn   +
***
lea eax [ebp-1Ch] +
push eax  +
push offset aUninitHelpCont  +
call ds:?TraceError@@YGXPBGABVSC@mmcerror@@@Z  +
jmp loc_1050A12  +
***
mov ecx [ebp-14h] +
mov [ebp-18h] ecx +
test ecx ecx +
jz loc_1057BBD  +
call ?Delete@CException@@QAEXXZ  +
mov eax offset loc_102007F +
retn   +
***
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-1Ch] eax +
xor eax eax +
inc eax  +
retn   +
***
mov esp [ebp-18h] +
xor eax eax +
cmp dword ptr [ebp-1Ch] 0C0000017h +
setnz al  +
dec eax  +
and eax 6C009h +
add eax 80004005h +
mov esi eax +
jmp loc_1041AE0  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_1051569  +
***
push 8  +
pop eax  +
mov [ecx] ax +
jmp loc_100EBFF  +
***
mov eax 80004003h +
jmp loc_100EE3F  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_100EE3F  +
cmp [ebp+arg_4] 0 +
jz loc_101321A  +
jmp loc_100EE21  +
***
xor eax eax +
jmp loc_100CACB  +
***
add eax 1Ch +
jmp loc_100C098  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov esi [ebp+8] +
lea ebx [esi+34h] +
push ebx  +
mov edi ds:DeleteCriticalSection +
call edi  +
lea eax [esi+1Ch] +
mov [ebp+8] eax +
push eax  +
call edi  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [esi+4Ch] +
stos   +
push 6  +
pop ecx  +
mov edi ebx +
stos   +
mov edi [ebp+8] +
jmp loc_1057CE4  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov esi [ebp+8] +
lea ebx [esi+1Ch] +
push ebx  +
call ds:DeleteCriticalSection  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [esi+34h] +
stos   +
mov edi ebx +
jmp loc_1057CE4  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov edi [ebp+8] +
add edi 1Ch +
push 6  +
pop ecx  +
stos   +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax 0C0000017h +
jmp loc_103FDEE  +
***
mov eax 80070057h +
jmp loc_10526D4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_105263C  +
cmp byte ptr [ebx+6Ch] 0 +
jz loc_10526D0  +
mov edi ds:HeapDestroy +
cmp [ebx+78h] esi +
jz loc_1057D39  +
mov eax [ebx+78h] +
lea eax [eax+esi*4] +
cmp dword ptr [eax] 0 +
jz loc_1057D33  +
push dword ptr [eax]  +
call edi  +
inc esi  +
cmp esi [ebx+74h] +
jbe loc_1057D24  +
push dword ptr [ebx+18h]  +
call edi  +
jmp loc_10526D0  +
***
mov eax offset loc_1057D53 +
retn   +
mov ebx [ebp+8] +
mov esi [ebp-18h] +
jmp loc_1050C77  +
***
mov dword ptr [ebp-14h] 8007000Eh +
jmp loc_1050CA8  +
***
xor ecx ecx +
jmp loc_100CC0A  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
and [ebp+var_14] 0 +
mov eax offset loc_100ABD7 +
retn   +
***
mov byte ptr [esi+0F7h] 1 +
jmp loc_1009B18  +
***
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1057DF9  +
call ds:?LastRefReleased@CMMCStrongReferences@@SG_NXZ  +
test al al +
jz loc_100A17B  +
mov ecx esi +
call sub_100942E  +
mov ebx eax +
push 8000FFFFh  +
push ebx  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1057E0D  +
lea eax [ebp-30h] +
push eax  +
push offset aCamcappOnidle  +
call ds:?TraceError@@YGXPBGABVSC@mmcerror@@@Z  +
jmp loc_100A17B  +
mov ecx ebx +
call ?IsWindowEnabled@CWnd@@QBEHXZ  +
test eax eax +
jz loc_100A17B  +
push dword ptr [ebx+20h]  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_1057E41  +
cmp byte ptr [esi+0FCh] 0 +
jnz loc_1057E3B  +
push 1  +
mov ecx esi +
call sub_10706B5  +
push 0  +
push 0  +
jmp loc_1057E76  +
xor esi esi +
push esi  +
push esi  +
call sub_10511D6  +
test al al +
jnz loc_100A17B  +
mov ecx dword_10F5304 +
cmp ecx esi +
jnz loc_1057E6C  +
push 80004003h  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1057E74  +
mov eax [ecx] +
call dword ptr [eax+84h]  +
push esi  +
push esi  +
push 10h  +
push dword ptr [ebx+20h]  +
call ds:PostMessageW  +
jmp loc_100A17B  +
***
test edi edi +
jz loc_1057EAF  +
mov edi [edi+4] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+0ECh]  +
jmp loc_10208C7  +
***
xor ecx ecx +
jmp loc_1020733  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
xor ecx ecx +
jmp loc_10111AF  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
push edi  +
mov edi offset unk_10FD434 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
jmp loc_103FD0B  +
***
push ds:off_1057F90  +
lea ecx [ebp-20h] +
push 80000001h  +
call sub_1039D5F  +
cmp eax ebx +
jnz loc_1057F79  +
push ds:off_1057F8C  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-20h] +
mov [ebp-14h] ebx +
call sub_107092B  +
cmp eax ebx +
jnz loc_1057F79  +
cmp [ebp-14h] ebx +
jz loc_1057F79  +
push 3409h  +
lea eax [ebp-40h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1028826  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1057FD6 +
retn   +
mov ebx [ebp-18h] +
mov edi [ebp+8] +
jmp loc_1051035  +
***
mov [ebx+18h] ecx +
mov eax 8007000Eh +
jmp loc_10510E9  +
mov ecx [ebp-14h] +
test ecx ecx +
jz loc_1057FFC  +
push 3  +
call sub_105315C  +
push dword ptr [ebp-20h]  +
and dword ptr [ebx+18h] 0 +
mov eax [edi] +
and dword ptr [ebp-14h] 0 +
push edi  +
call dword ptr [eax+50h]  +
push dword ptr [ebp+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call SysFreeString  +
jmp loc_10510D7  +
mov ecx [ebp-14h] +
cmp ecx eax +
jz loc_105802F  +
push 3  +
call sub_105315C  +
xor eax eax +
mov [ebp-14h] eax +
mov [ebx+18h] eax +
jmp loc_10510D7  +
***
cmp [esi+14h] ebx +
jz loc_1050EA4  +
xor eax eax +
jmp loc_1050F92  +
***
call loc_10C80B1  +
int 3  +
***
push [ebp+arg_4]  +
push edi  +
push 8  +
push eax  +
call sub_100CE93  +
jmp loc_100CD76  +
***
mov eax [ebp+8] +
mov ecx [ebp-18h] +
xor esi esi +
push esi  +
push 1  +
call sub_100CD3C  +
push esi  +
push esi  +
call _CxxThrowException  +
int 3  +
***
push [ebp+lpMsg]  +
push 0FDh  +
push eax  +
push eax  +
call sub_10D0BFD  +
test eax eax +
jnz loc_1009BD8  +
jmp loc_1009B98  +
mov ebx [esi+8] +
push ebx  +
call ?FromHandlePermanent@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push ebx  +
mov [ebp+var_4] eax +
call ds:IsWindow  +
test eax eax +
jz loc_10580FC  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_10580FC  +
push [ebp+lpMsg]  +
mov eax [ecx] +
call dword ptr [eax+98h]  +
test eax eax +
jnz loc_1009BD8  +
mov esi [esi] +
jmp loc_105810E  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [edi+130h] +
call sub_100ED24  +
mov esi [eax] +
cmp esi [edi+134h] +
jz loc_1009BA8  +
jmp loc_10580C7  +
***
push [ebp+arg_10]  +
mov ebx [ebx+0Ch] +
push [ebp+arg_8]  +
mov eax [ebx] +
push [ebp+arg_4]  +
push ebx  +
call dword ptr [eax+28h]  +
jmp loc_105283E  +
***
call loc_10C8063  +
jmp loc_100CC5A  +
cmp edi 8 +
jnb loc_100CC69  +
mov eax [esi+14h] +
cmp edi eax +
jnb loc_105814F  +
mov eax edi +
push eax  +
push 1  +
mov ecx esi +
call sub_100CD3C  +
jmp loc_100CC71  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1058191  +
cmp byte ptr [eax+19h] 2 +
jb loc_1058191  +
lea ecx [ebp-20h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
push eax  +
push offset dword_106B6F0  +
push 0Eh  +
mov eax lpDst +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0B4h] +
call sub_102B012  +
xor eax eax +
jmp loc_1020573  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1058191  +
cmp byte ptr [eax+19h] 2 +
jb loc_1058191  +
lea ecx [ebp-20h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
push eax  +
push offset dword_106B6F0  +
push 0Fh  +
jmp loc_1058181  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1058191  +
push offset dword_106B6F0  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10201E5  +
push 10h  +
sub esp 10h +
lea eax [ebp-20h] +
mov ecx esp +
mov [ebp-28h] esp +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
call ds:?MMCErrorBox@@YGHVSC@mmcerror@@I@Z  +
jmp loc_1058191  +
push dword ptr [ebp-80h]  +
lea eax [ebp-0A0h] +
push eax  +
mov ecx esi +
call sub_10735E1  +
jmp loc_1058191  +
push dword ptr [esi+78h]  +
lea ecx [ebp-0B4h] +
mov [ebp-90h] ebx +
call sub_106FE71  +
cmp eax ebx +
jl loc_105827A  +
mov eax lpDst +
cmp eax edi +
jz loc_1058191  +
cmp byte ptr [eax+19h] 4 +
jb loc_1058191  +
push offset dword_106B6F0  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1058191  +
mov eax lpDst +
cmp eax edi +
jz loc_105829B  +
cmp byte ptr [eax+19h] 2 +
jb loc_105829B  +
push offset dword_106B6F0  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 10h  +
push 3468h  +
call ds:?MMCErrorBox@@YGHII@Z  +
jmp loc_1020284  +
push dword ptr [ebp-0A0h]  +
lea eax [ebp-20h] +
sub esp 10h +
mov ecx esp +
mov [ebp-28h] esp +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
call sub_1079055  +
jmp loc_1058191  +
push ebx  +
push 1  +
push offset unk_10F5658  +
call sub_10724D9  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push 8002801Ch  +
lea ecx [ebp-20h] +
call ds:??8SC@mmcerror@@QBE_NJ@Z  +
test al al +
jz loc_102033C  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_102033C  +
call sub_102F464  +
jmp loc_1058191  +
push ebx  +
mov byte ptr [esi+0FDh] 1 +
mov [esi+0FCh] bl +
call ?AfxOleSetUserCtrl@@YGXH@Z  +
push ebx  +
push 4  +
push offset unk_10F5658  +
call sub_10709AE  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10203EA  +
jmp loc_1058429  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
push 4  +
lea eax [ebp-10h] +
push offset aD_0  +
push eax  +
mov byte ptr [ebp-4] 8 +
call ?Format@CString@@QAAXPBGZZ  +
add esp 0Ch +
push dword ptr [ebp-10h]  +
mov ecx offset unk_10F5658 +
call sub_107249D  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push 8002801Ch  +
lea ecx [ebp-20h] +
call ds:??8SC@mmcerror@@QBE_NJ@Z  +
test al al +
jz loc_10583A5  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-10h] +
test al al +
jz loc_10583C0  +
call ??1CString@@QAE@XZ  +
jmp loc_1058429  +
call ??1CString@@QAE@XZ  +
cmp [ebp-87h] bl +
jz loc_10203F6  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+0A4h]  +
jmp loc_10203F6  +
call sub_1071953  +
cmp [ebp-87h] bl +
jz loc_1020409  +
jmp loc_1058191  +
cmp [ebp-21h] bl +
jz loc_1058191  +
push ebx  +
call sub_102F8EA  +
jmp loc_1058191  +
push ebx  +
call sub_102F8EA  +
jmp loc_102043E  +
mov byte ptr [esi+0F4h] 1 +
jmp loc_1020481  +
xor esi esi +
jmp loc_1020556  +
push 10h  +
sub esp 10h +
lea eax [ebp-20h] +
mov ecx esp +
mov [ebp-3Ch] esp +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
call ds:?MMCErrorBox@@YGHVSC@mmcerror@@I@Z  +
mov [ebp-28h] ebx +
jmp loc_1020553  +
***
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1052753  +
***
call loc_10C80B1  +
jmp loc_100CE2B  +
mov esi [ebp+arg_8] +
jmp loc_100CE3C  +
push 0FFFFFFFFh  +
add esi eax +
push esi  +
call sub_1011BBD  +
push [ebp+arg_4]  +
mov ecx ebx +
push 0  +
call sub_1011BBD  +
jmp loc_100CE85  +
***
cmp dword ptr [esi+18h] 8 +
jb loc_1058497  +
mov eax [esi+4] +
jmp loc_105849A  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub edi eax +
sar edi 1 +
push edi  +
push esi  +
mov ecx esi +
call sub_100CE12  +
jmp loc_101D15D  +
***
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10534EA  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10508CE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10508E0  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10533A1  +
push offset dword_106B6F0  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10533B7  +
mov ecx esi +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10533C7  +
***
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
jmp loc_1027E2A  +
***
push eax  +
lea ecx [ebp-28h] +
call sub_1052FD9  +
lea ecx [ebp-4Ch] +
push ecx  +
mov ecx eax +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
call sub_1070702  +
mov dword ptr [ebp-4] 5 +
mov dword ptr [ebp-10h] 0Ch +
jmp loc_1027DA5  +
***
and dword ptr [ebp-10h] 0FFFFFFF7h +
lea ecx [ebp-4Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1027DB8  +
***
mov eax [ebp-20h] +
and dword ptr [ebp-10h] 0FFFFFFFBh +
test eax eax +
jz loc_1027DC8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1027DC8  +
***
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 7 +
call sub_100A5E6  +
mov ecx [ebp+0Ch] +
push eax  +
lea eax [ebp-5Ch] +
push eax  +
call sub_109426F  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-5Ch] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10585D4  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-10h] edi +
jmp loc_10586C2  +
and dword ptr [ebp-18h] 0 +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 9 +
call sub_100A5E6  +
mov ecx [ebp+0Ch] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-5Ch] +
push eax  +
call sub_10819B3  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0Ah +
call esi  +
lea ecx [ebp-5Ch] +
mov byte ptr [ebp-4] 9 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10586A1  +
mov eax [ebp-1Ch] +
push dword ptr [eax+24h]  +
lea ecx [ebp-28h] +
call sub_1052FD9  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-5Ch] +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 0Bh +
push ecx  +
mov ecx eax +
call sub_10745B7  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0Ch +
call esi  +
lea ecx [ebp-5Ch] +
mov byte ptr [ebp-4] 0Bh +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 9 +
test eax eax +
jz loc_1058667  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105868B  +
cmp byte ptr [eax+19h] 5 +
jb loc_105868B  +
push offset dword_106B6F0  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10586A1  +
lea ecx [ebp-3Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-18h] +
or [ebp-10h] edi +
mov byte ptr [ebp-4] 7 +
test eax eax +
jz loc_10586C2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1027E2A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1027E2A  +
***
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
jmp loc_1018B03  +
***
push eax  +
lea ecx [ebp-28h] +
call sub_1052FD9  +
lea ecx [ebp-4Ch] +
push ecx  +
mov ecx eax +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
call sub_1070702  +
mov dword ptr [ebp-4] 5 +
mov dword ptr [ebp-10h] 0Ch +
jmp loc_1018A7E  +
***
and dword ptr [ebp-10h] 0FFFFFFF7h +
lea ecx [ebp-4Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1018A91  +
***
mov eax [ebp-20h] +
and dword ptr [ebp-10h] 0FFFFFFFBh +
test eax eax +
jz loc_1018AA1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1018AA1  +
***
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 7 +
call sub_100A5E6  +
mov ecx [ebp+0Ch] +
push eax  +
lea eax [ebp-5Ch] +
push eax  +
call sub_109426F  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-5Ch] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10587A0  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-10h] edi +
jmp loc_105888B  +
and dword ptr [ebp-18h] 0 +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 9 +
call sub_100A5E6  +
mov ecx [ebp+0Ch] +
push eax  +
lea eax [ebp-5Ch] +
push eax  +
call sub_10804A5  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0Ah +
call esi  +
lea ecx [ebp-5Ch] +
mov byte ptr [ebp-4] 9 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105886A  +
mov eax [ebp-1Ch] +
push dword ptr [eax+24h]  +
lea ecx [ebp-28h] +
call sub_1052FD9  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-5Ch] +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 0Bh +
push ecx  +
mov ecx eax +
call sub_1074739  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0Ch +
call esi  +
lea ecx [ebp-5Ch] +
mov byte ptr [ebp-4] 0Bh +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 9 +
test eax eax +
jz loc_1058830  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1058854  +
cmp byte ptr [eax+19h] 5 +
jb loc_1058854  +
push offset dword_106B6F0  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_105886A  +
lea ecx [ebp-3Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-18h] +
or [ebp-10h] edi +
mov byte ptr [ebp-4] 7 +
test eax eax +
jz loc_105888B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1018B03  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1018B03  +
***
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10289C2  +
push eax  +
lea ecx [ebp-20h] +
call sub_1052FD9  +
lea ecx [ebp-44h] +
push ecx  +
mov ecx eax +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
call sub_1070702  +
mov dword ptr [ebp-4] 5 +
mov dword ptr [ebp-10h] 0Ch +
jmp loc_1028935  +
and dword ptr [ebp-10h] 0FFFFFFF7h +
lea ecx [ebp-44h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1028948  +
mov eax [ebp-18h] +
and dword ptr [ebp-10h] 0FFFFFFFBh +
test eax eax +
jz loc_1028958  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1028958  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-10h] ebx +
jmp loc_10289C2  +
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 7 +
call sub_100A5E6  +
mov ecx [ebp+0Ch] +
push eax  +
lea eax [ebp-54h] +
push eax  +
call sub_109426F  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10589EF  +
push dword ptr [edi+0E8h]  +
lea ecx [ebp-20h] +
call sub_1052FD9  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-54h] +
push ecx  +
mov ecx eax +
mov byte ptr [ebp-4] 9 +
call sub_10742E7  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0Ah +
call esi  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 9 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 7 +
test eax eax +
jz loc_10589B5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10589D9  +
cmp byte ptr [eax+19h] 5 +
jb loc_10589D9  +
push offset dword_106B6F0  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10589EF  +
lea ecx [ebp-34h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-14h] +
or dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10289C2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10289C2  +
***
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
jmp loc_1051693  +
push eax  +
lea ecx [ebp-24h] +
call sub_1052FD9  +
lea ecx [ebp-48h] +
push ecx  +
mov ecx eax +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
call sub_1070702  +
mov dword ptr [ebp-4] 5 +
mov dword ptr [ebp-10h] 0Ch +
jmp loc_105160E  +
and dword ptr [ebp-10h] 0FFFFFFF7h +
lea ecx [ebp-48h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1051621  +
mov eax [ebp-1Ch] +
and dword ptr [ebp-10h] 0FFFFFFFBh +
test eax eax +
jz loc_1051631  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1051631  +
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 7 +
call sub_100A5E6  +
mov ecx [ebp+0Ch] +
push eax  +
lea eax [ebp-58h] +
push eax  +
call sub_107DB59  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058B8B  +
push 8000FFFFh  +
push dword ptr [ebp-14h]  +
lea eax [ebp-58h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 9 +
call esi  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058B8B  +
mov eax [ebp-18h] +
push dword ptr [eax+0E8h]  +
lea ecx [ebp-24h] +
call sub_1052FD9  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-58h] +
push ecx  +
mov ecx eax +
mov byte ptr [ebp-4] 0Ah +
call sub_1073E55  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0Bh +
call esi  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 0Ah +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 7 +
test eax eax +
jz loc_1058B51  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1058B75  +
cmp byte ptr [eax+19h] 5 +
jb loc_1058B75  +
push offset dword_106B6F0  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1058B8B  +
lea ecx [ebp-38h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-14h] +
or [ebp-10h] edi +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1051693  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1051693  +
***
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_105326D  +
***
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10532AB  +
***
push eax  +
lea ecx [ebp-24h] +
call sub_1052FD9  +
push 2  +
pop ebx  +
lea ecx [ebp-44h] +
push ecx  +
mov ecx eax +
mov [ebp-4] edi +
mov [ebp-10h] ebx +
call sub_1070702  +
mov dword ptr [ebp-4] 4 +
mov dword ptr [ebp-10h] 6 +
jmp loc_1028A63  +
and dword ptr [ebp-10h] 0FFFFFFFBh +
lea ecx [ebp-44h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1028A7C  +
mov eax [ebp-1Ch] +
and dword ptr [ebp-10h] 0FFFFFFFDh +
test eax eax +
jz loc_1028A88  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1028A88  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1028AEE  +
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 6 +
call sub_100A5E6  +
mov ecx [ebp+0Ch] +
push eax  +
lea eax [ebp-54h] +
push eax  +
call sub_107DB59  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 6 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058D4B  +
push 80004003h  +
push dword ptr [ebp-14h]  +
lea eax [ebp-54h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 6 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1058D4B  +
mov eax [ebp-18h] +
push dword ptr [eax+0E8h]  +
lea ecx [ebp-24h] +
call sub_1052FD9  +
xor ecx ecx +
cmp [ebp+10h] ecx +
mov byte ptr [ebp-4] 9 +
setz cl  +
push ecx  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-54h] +
push ecx  +
mov ecx eax +
call sub_1073CC3  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0Ah +
call esi  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 9 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 6 +
test eax eax +
jz loc_1058D11  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1058D35  +
cmp byte ptr [eax+19h] 5 +
jb loc_1058D35  +
push offset dword_106B6F0  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1058D4B  +
lea ecx [ebp-34h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-14h] +
or dword ptr [ebp-10h] 8 +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1028AF2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1028AF2  +
***
push offset aListTTooLong  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1076041  +
push offset dword_10E8AC0  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
call sub_1051397  +
test al al +
jnz loc_1058DBE  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-38h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
jmp loc_1021191  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+98h]  +
test eax eax +
jnz loc_1021043  +
xor esi esi +
jmp loc_1021182  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1058DFB  +
cmp byte ptr [eax+19h] 1 +
jb loc_1058DFB  +
push offset dword_106B6F0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 0FFFFFFFFh  +
push ebx  +
push 0F104h  +
call ?AfxMessageBox@@YGHIII@Z  +
jmp loc_1021168  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1058E34  +
cmp byte ptr [ecx+19h] 1 +
jb loc_1058E34  +
push eax  +
push offset dword_106B6F0  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1058E40  +
call sub_1029466  +
push 10h  +
push 340Bh  +
call ds:?MMCErrorBox@@YGHII@Z  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
xor esi esi +
jmp loc_1021168  +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1058E69  +
call sub_1029466  +
push 0FFFFFFFFh  +
push ebx  +
push 0F104h  +
call ?AfxMessageBox@@YGHIII@Z  +
jmp loc_1058E4D  +
mov eax [edi] +
push esi  +
mov ecx edi +
call dword ptr [eax+8Ch]  +
cmp [ebp+0Ch] ebx +
jnz loc_1058E8F  +
mov dword ptr [esi+50h] 1 +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+78h]  +
test eax eax +
jnz loc_1058EE4  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1058EBE  +
cmp byte ptr [eax+19h] 1 +
jb loc_1058EBE  +
push offset dword_106B6F0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1058ECA  +
call sub_1029466  +
push 0FFFFFFFFh  +
push ebx  +
push 0F104h  +
call ?AfxMessageBox@@YGHIII@Z  +
mov ecx [ebp-10h] +
mov eax [ecx] +
call dword ptr [eax+60h]  +
jmp loc_1058E56  +
push dword ptr [ebp+0Ch]  +
mov eax [edi] +
inc dword ptr [edi+8Ch]  +
push esi  +
push dword ptr [ebp-10h]  +
mov ecx edi +
call dword ptr [eax+7Ch]  +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
push ebx  +
push 20019h  +
push ds:lpSubKey  +
lea ecx [ebp-24h] +
push 80000002h  +
mov byte ptr [ebp-4] 1 +
call sub_1039D5F  +
test eax eax +
jnz loc_1058F2C  +
mov ecx [ebp-10h] +
push 3  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call sub_1021315  +
jmp loc_10210ED  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1058F60  +
cmp byte ptr [eax+19h] 1 +
jb loc_1058F60  +
push offset dword_106B6F0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [ebp-10h] +
mov eax [ecx] +
call dword ptr [eax+60h]  +
lea ecx [ebp+0Bh] +
xor esi esi +
mov [ebp-4] bl +
call sub_1020056  +
jmp loc_1021168  +
lea ecx [ebp-38h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1021168  +
***
push offset aListTTooLong  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1076041  +
push offset dword_10E8AC0  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov eax [ebp+8] +
jmp loc_102B4A8  +
***
xor eax eax +
jmp loc_102B56B  +
***
mov ecx [ebp+8] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1058FEF  +
cmp byte ptr [eax+19h] 5 +
jb loc_1058FEF  +
push offset dword_106BA10  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [ebp+8] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_103AE0C  +
mov ecx [ebp+8] +
push 1  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_103AE0C  +
push 8007000Eh  +
mov ecx [ebp+8] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_103ADFA  +
mov ecx [ebp+8] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1059050  +
cmp byte ptr [eax+19h] 5 +
jb loc_1059050  +
push offset dword_106BA10  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [ebp+8] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_103ADFA  +
push 1  +
jmp loc_1059015  +
mov ecx [ebp+8] +
push 80070057h  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103AE0C  +
cmp byte ptr [eax+19h] 2 +
jb loc_103AE0C  +
push offset dword_106BA10  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_103ADFA  +
***
push esi  +
push edi  +
mov edi 111h +
lea eax [ebp+dwProcessId] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowThreadProcessId  +
call ds:GetCurrentProcessId  +
cmp [ebp+dwProcessId] eax +
jnz loc_105912D  +
push [ebp+hWnd]  +
call sub_1077E0B  +
push ebx  +
push 2  +
mov esi eax +
push edi  +
push dword ptr [esi+74h]  +
call ds:SendMessageW  +
test eax eax +
jz loc_1059120  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_10590F2  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx eax +
cmp ecx ebx +
jge loc_1059120  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1059120  +
cmp byte ptr [eax+19h] 3 +
jb loc_1059120  +
push ecx  +
push dword ptr [esi+74h]  +
push offset dword_106BA10  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
push ebx  +
push 2  +
push edi  +
push dword ptr [esi+74h]  +
call ds:PostMessageW  +
push ebx  +
push offset aMmcdatawindow  +
push [ebp+hWnd]  +
push ebx  +
call ds:FindWindowExW  +
mov [ebp+hWnd] eax +
cmp eax ebx +
jnz loc_10590AB  +
pop edi  +
pop esi  +
jmp loc_1051709  +
***
push offset dword_106BA10  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_105289B  +
***
cmp edi ecx +
jz loc_1059181  +
cmp [ebp-14h] ecx +
jnz loc_1059181  +
mov eax [esi+24h] +
mov edi [eax-8] +
neg edi  +
sbb edi edi +
add edi 7 +
jmp loc_104A77D  +
lea ecx [ebp-18h] +
call ??0CString@@QAE@XZ  +
push dword ptr [esi+20h]  +
and dword ptr [ebp-4] 0 +
push 342Dh  +
lea eax [ebp-18h] +
push eax  +
call sub_105142C  +
push ebx  +
push 3  +
push dword ptr [ebp-18h]  +
call ?AfxMessageBox@@YGHPBGII@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
mov edi eax +
mov byte ptr [ebp-0Dh] 1 +
call ??1CString@@QAE@XZ  +
jmp loc_104A77D  +
cmp [ebp-0Dh] al +
jz loc_104A7A3  +
or dword ptr [esi+128h] 1 +
jmp loc_104A7B8  +
cmp dword ptr [ebp-14h] 0 +
jz loc_1051198  +
mov eax [esi+10Ch] +
shr eax 2 +
test al 1 +
jnz loc_1051198  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
push dword ptr [esi+20h]  +
xor edi edi +
push 342Dh  +
lea eax [ebp-14h] +
inc edi  +
push eax  +
mov [ebp-4] edi +
call sub_105142C  +
push ebx  +
push 3  +
push dword ptr [ebp-14h]  +
call ?AfxMessageBox@@YGHPBGII@Z  +
dec eax  +
dec eax  +
jz loc_1059258  +
sub eax 4 +
jnz loc_1059269  +
mov eax [esi] +
push edi  +
push 0  +
mov ecx esi +
call dword ptr [eax+0A0h]  +
test eax eax +
jnz loc_1059269  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1059258  +
cmp byte ptr [eax+19h] 3 +
jb loc_1059258  +
push offset dword_106BA10  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
jmp loc_104A7B8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
jmp loc_1051198  +
***
cmp eax 0FFFFFFFFh +
jz loc_104A7E8  +
test al 1 +
jz loc_104A7E8  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
push dword ptr [esi+24h]  +
and dword ptr [ebp-4] 0 +
push 33F5h  +
lea eax [ebp-10h] +
push eax  +
call sub_105142C  +
push 10h  +
push dword ptr [ebp-10h]  +
call ds:?MMCErrorBox@@YGHPBGI@Z  +
mov eax [esi] +
push 1  +
push 0  +
mov ecx esi +
call dword ptr [eax+0A0h]  +
test eax eax +
jnz loc_10592FC  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10592E9  +
cmp byte ptr [eax+19h] 3 +
jb loc_10592E9  +
push offset dword_106BA10  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
xor eax eax +
jmp loc_104A803  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
jmp loc_104A800  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10592F5  +
cmp byte ptr [eax+19h] 3 +
jb loc_10592F5  +
push offset dword_106BA10  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10592F5  +
***
inc eax  +
jmp loc_104E9B4  +
lea eax [ebp-228h] +
push eax  +
push 3  +
push esi  +
push offset aSoftwareMicr_0  +
push 80000001h  +
call ds:RegOpenKeyExW  +
cmp eax esi +
jnz loc_104EA22  +
lea eax [ebp-230h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-224h] +
push eax  +
push esi  +
mov esi offset aStartmenuadmin +
push esi  +
push dword ptr [ebp-228h]  +
xor edi edi +
inc edi  +
mov [ebp-224h] edi +
mov dword ptr [ebp-230h] 8 +
call ds:RegQueryValueExW  +
mov ebx offset aYes +
test eax eax +
jnz loc_10593BB  +
cmp [ebp-224h] edi +
jnz loc_10593BB  +
push 0FFFFFFFFh  +
push ebx  +
push 0FFFFFFFFh  +
lea eax [ebp-18h] +
push eax  +
push edi  +
push 7Fh  +
call ds:CompareStringW  +
cmp eax 2 +
jz loc_10593ED  +
push 8  +
push ebx  +
push edi  +
push 0  +
push esi  +
push dword ptr [ebp-228h]  +
call ds:RegSetValueExW  +
lea eax [ebp-234h] +
push eax  +
push 64h  +
push 2  +
push offset aShellmenu  +
push 0  +
push 1Ah  +
push 0FFFFh  +
call ds:SendMessageTimeoutW  +
push dword ptr [ebp-228h]  +
call ds:RegCloseKey  +
jmp loc_104EA22  +
***
push 80004003h  +
call sub_10C7F1B  +
jmp loc_100EB72  +
***
push 80004003h  +
call sub_10C7F1B  +
jmp loc_100A5DD  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100CA46  +
***
xor eax eax +
jmp loc_101E33A  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
jmp loc_101E337  +
***
call loc_10C80B1  +
jmp loc_1012384  +
mov ebx eax +
jmp loc_1012394  +
***
sub eax ebx +
jmp loc_1059526  +
sub eax ebx +
sub ecx edx +
mov [ebp+arg_4] eax +
cmp ecx eax +
mov [ebp+arg_0] ecx +
lea eax [ebp+arg_4] +
jl loc_1059524  +
lea eax [ebp+arg_0] +
mov eax [eax] +
mov [ebp+arg_4] eax +
jmp loc_1046DDA  +
sub eax edx +
jmp loc_1046E0C  +
mov [esi+8] eax +
jmp loc_1046E37  +
mov [esi+0Ch] edi +
jmp loc_1029626  +
***
push edi  +
lea eax [ebp+rc] +
push eax  +
push edi  +
push 30h  +
call ds:SystemParametersInfoW  +
test eax eax +
jnz loc_10295D0  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105957F  +
cmp byte ptr [eax+19h] 3 +
jb loc_105957F  +
push offset dword_106BA10  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 1DFh  +
push 27Fh  +
push edi  +
push edi  +
lea eax [ebp+rc] +
push eax  +
call ds:SetRect  +
jmp loc_10295D0  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] esi +
jmp loc_103AF35  +
lea ecx [ebp-24h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
jmp loc_103AF21  +
lea ecx [ebp-24h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
jmp loc_103AF18  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100A5F5  +
***
push 80004003h  +
call sub_10C7F1B  +
jmp loc_102B585  +
***
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_102B812  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10595F2  +
***
push offset dword_106BA10  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1053597  +
lea ecx [ebp-28h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1053690  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 6 +
call ??0CString@@QAE@XZ  +
push 3438h  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 7 +
call ?LoadStringW@CString@@QAEHI@Z  +
test eax eax +
jz loc_1059678  +
push 33BCh  +
lea ecx [ebp-10h] +
call ?LoadStringW@CString@@QAEHI@Z  +
test eax eax +
jz loc_1059678  +
push 30h  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
push 0  +
call ds:MessageBoxW  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 6 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
jmp loc_1053710  +
***
mov edi [esi+28h] +
lea eax [esi+24h] +
push eax  +
lea ecx [ebp+8] +
call ??4CString@@QAEABV0@ABV0@@Z  +
cmp [ebp+0Ch] ebx +
jz loc_1059714  +
mov eax [ebp+8] +
cmp [eax-8] ebx +
jnz loc_1059714  +
lea eax [esi+20h] +
push eax  +
lea ecx [ebp+8] +
call ??4CString@@QAEABV0@ABV0@@Z  +
push offset asc_1059764  +
lea ecx [ebp+8] +
call ?FindOneOf@CString@@QBEHPBG@Z  +
cmp eax 0FFFFFFFFh +
jz loc_10596D8  +
push eax  +
lea ecx [ebp+8] +
call ?ReleaseBuffer@CString@@QAEXH@Z  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
mov eax [edi] +
push 4  +
lea ecx [ebp-10h] +
push ecx  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+6Ch]  +
test eax eax +
jz loc_1059709  +
mov eax [ebp-10h] +
cmp [eax-8] ebx +
jz loc_1059709  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp+8] +
call ??YCString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-10h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov ecx [ebp+0Ch] +
mov eax [eax+4] +
neg ecx  +
push edi  +
sbb ecx ecx +
push ebx  +
and ecx 0FFFFFFFDh +
add ecx 0F004h +
push 804h  +
push ecx  +
lea ecx [ebp+8] +
push ecx  +
mov ecx eax +
call ?DoPromptFileName@CWinApp@@QAEHAAVCString@@IKHPAVCDocTemplate@@@Z  +
test eax eax +
jnz loc_104A838  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call ??1CString@@QAE@XZ  +
xor eax eax +
jmp loc_104A88D  +
xor esi esi +
jmp loc_104A874  +
***
push offset dword_106BA10  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_100EC4A  +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_100EC78  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100EC78  +
***
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101FA61  +
push 80004005h  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp loc_104AEC0  +
mov dword ptr [ebp-78h] 1 +
jmp loc_101FA6E  +
cmp byte_10F55AC 0 +
jnz loc_101FB0A  +
push dword ptr [edi+20h]  +
call ds:IsWindowVisible  +
jmp loc_104AECF  +
push 80004005h  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp loc_101FB1D  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1039648  +
lea eax [ebp+pUnknown] +
push eax  +
push offset stru_100BB94  +
push [ebp+pUnknown]  +
push [ebp+pUnkOuter]  +
push [ebp+rclsid]  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_103966B  +
push [ebp+pUnknown]  +
call ds:OleRun  +
mov edi eax +
test edi edi +
jl loc_1059851  +
mov eax [ebp+pUnknown] +
mov ecx [eax] +
push esi  +
push offset stru_1039674  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
mov eax [ebp+pUnknown] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1039669  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100BF5C  +
lea eax [ebp+pUnknown] +
push eax  +
push offset stru_100BB94  +
push [ebp+pUnknown]  +
push [ebp+pUnkOuter]  +
push [ebp+rclsid]  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_100BF7F  +
push [ebp+pUnknown]  +
call ds:OleRun  +
mov edi eax +
test edi edi +
jl loc_10598A9  +
mov eax [ebp+pUnknown] +
mov ecx [eax] +
push esi  +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
mov eax [ebp+pUnknown] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100BF7D  +
***
mov eax 80004003h +
jmp loc_1038F96  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10598CB +
retn   +
***
mov edi [ebp+8] +
mov esi [ebp-14h] +
jmp loc_1038F72  +
***
push 1  +
mov ecx esi +
call sub_10528AE  +
xor esi esi +
jmp loc_1038F92  +
***
push 0  +
jmp loc_10396E4  +
push 0  +
mov ecx ebx +
call sub_1010F11  +
mov esi 80004002h +
jmp loc_10396E9  +
***
cmp eax 80004002h +
jz loc_10396A1  +
push eax  +
call sub_10C7F1B  +
jmp loc_10396A1  +
***
mov ecx [esi+8] +
mov eax [ecx] +
call dword ptr [eax]  +
mov esi [esi] +
cmp esi [edi+8] +
jz loc_101AE87  +
jmp loc_1059916  +
***
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_101B088  +
***
push offset dword_106BA10  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_103974A  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
jmp loc_1039987  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
mov eax [ebp-10h] +
cmp eax ebx +
jmp loc_103997B  +
mov ecx esi +
call sub_10517E3  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1059991  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi 80004003h +
jmp loc_1039987  +
xor ecx ecx +
jmp loc_1039952  +
***
cmp byte ptr [edi+0Ch] 0 +
jnz loc_10599B5  +
mov ecx [edi+8] +
test ecx ecx +
jz loc_10599B5  +
push esi  +
call sub_101B028  +
mov edi [edi] +
cmp edi [esi+8] +
jz loc_1051848  +
jmp loc_10599A2  +
***
push offset dword_106BA10  +
push ecx  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1052CA4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1052D53  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1052D65  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1052D82  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1052D94  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1052DA6  +
***
push offset word_100A5FC  +
call sub_101D1AD  +
jmp loc_104D1D9  +
***
push offset dword_106BA10  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1039C12  +
push 8007000Eh  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:?FatalError@SC@mmcerror@@QBEXXZ  +
jmp loc_1039C5B  +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_1059A5F  +
push 1  +
call sub_10528AE  +
push 8000FFFFh  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:?FatalError@SC@mmcerror@@QBEXXZ  +
jmp loc_1039C6C  +
push 8007000Eh  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:?FatalError@SC@mmcerror@@QBEXXZ  +
jmp loc_1039C9E  +
mov eax [ecx] +
call dword ptr [eax+84h]  +
jmp loc_1039CAC  +
***
lea ecx [ebp-30h] +
call ??0CString@@QAE@XZ  +
mov edi [esi+24h] +
mov byte ptr [ebp-4] 2 +
cmp dword_10F55CC ebx +
jnz loc_1059B7C  +
test byte ptr [esi+128h] 1 +
lea eax [ebp-2Ch] +
push eax  +
jz loc_1059B14  +
call sub_104D168  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 3 +
jnb loc_1059AE1  +
lea eax [ebp-28h] +
push eax  +
push edi  +
push 33F6h  +
lea eax [ebp-30h] +
push eax  +
call sub_10BEB7F  +
push 104h  +
jmp loc_1059B3E  +
call sub_10781F8  +
movzx ebx al +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-54h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax ebx +
jmp loc_104AA04  +
call sub_104D168  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 4 +
jnb loc_1059B29  +
lea eax [ebp-28h] +
push eax  +
push edi  +
push 33F7h  +
lea eax [ebp-30h] +
push eax  +
call sub_10BEB7F  +
push 203h  +
push dword ptr [ebp-30h]  +
call ds:?MMCErrorBox@@YGHPBGI@Z  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
mov [ebp-34h] eax +
call sub_100CD3C  +
push 2  +
pop edi  +
cmp [ebp-34h] edi +
jz loc_1059B8F  +
cmp dword ptr [ebp-34h] 7 +
jnz loc_1059B7F  +
test byte ptr [esi+128h] 1 +
jnz loc_1059B8F  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
xor ebx ebx +
inc ebx  +
jmp loc_1059B00  +
push 2  +
pop edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
jmp loc_104A90D  +
lea ecx [ebp-30h] +
mov [esi+124h] edi +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
jmp loc_1059B00  +
cmp dword ptr [esi+104h] 3 +
jnz loc_104A91D  +
cmp dword_10F55CC ebx +
jnz loc_104A91D  +
push 3  +
push 3418h  +
call ds:?MMCErrorBox@@YGHII@Z  +
sub eax edi +
jz loc_1059BFD  +
sub eax 5 +
jnz loc_104A91D  +
mov [esi+104h] edi +
jmp loc_104A91D  +
call sub_10781F8  +
lea ecx [ebp-44h] +
movzx esi al +
mov [ebp-4] bl +
call sub_101D546  +
mov ebx esi +
jmp loc_1059B00  +
mov [esi+124h] edi +
jmp loc_1059B00  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_104A9D1  +
cmp byte ptr [eax+19h] 3 +
jb loc_104A9D1  +
push offset dword_106BA10  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_104A9D1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-54h] +
movzx esi al +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
jmp loc_104AA04  +
***
xor al al +
leave   +
retn   +
***
add esi 20h +
push esi  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@ABV0@@Z  +
xor ebx ebx +
inc ebx  +
push 2Eh  +
lea ecx [ebp-10h] +
mov [ebp-4] ebx +
call ?ReverseFind@CString@@QBEHG@Z  +
cmp eax 0FFFFFFFFh +
jz loc_1059CA7  +
mov ecx [ebp-10h] +
mov ecx [ecx-8] +
sub ecx eax +
cmp ecx 4 +
jg loc_1059CA7  +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-10h] +
call ?Left@CString@@QBE?AV1@H@Z  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-14h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-10h] +
push eax  +
call ??0CString@@QAE@ABV0@@Z  +
lea ecx [ebp-10h] +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
jmp loc_100C261  +
***
cmp edi 5555555h +
jbe loc_1059CD4  +
call loc_10B6E00  +
push eax  +
push edi  +
call sub_10375C8  +
imul edi edi +
add edi eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov al 1 +
jmp loc_103AFCF  +
***
lea ecx [ebp-30h] +
call sub_1039A3B  +
lea eax [edi+0A8h] +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call sub_107A821  +
test esi esi +
jz loc_1059D23  +
cmp dword ptr [ebp-18h] 8 +
mov eax [ebp-2Ch] +
jnb loc_1059D1B  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call ??4CString@@QAEABV0@PBG@Z  +
test ebx ebx +
jz loc_1059D2C  +
mov eax [ebp-14h] +
mov [ebx] eax +
push 0  +
push 1  +
lea ecx [ebp-30h] +
call sub_100CD3C  +
jmp loc_1021993  +
xor esi esi +
jmp loc_10219DF  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_102D9F3  +
cmp byte ptr [eax+19h] 2 +
jb loc_102D9F3  +
push offset dword_106BA10  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_102D9F3  +
***
push edi  +
call sub_107A809  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov edi ebx +
cmp ebx [esi+4] +
jnz loc_1059D93  +
pop ebx  +
jmp loc_100ECFB  +
***
xor ecx ecx +
jmp loc_101D533  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
push 8000FFFFh  +
lea ecx [ebp+var_1C] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp sub_101E906  +
***
add esi 8 +
push esi  +
push ebx  +
push ds:off_1021A80  +
mov ecx edi +
call sub_107AC1F  +
jmp loc_101E946  +
***
push offset dword_106BA10  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_102293E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
jmp loc_1022A2F  +
push 0  +
mov ecx ebx +
call sub_10A4985  +
mov [ebp-10h] al +
jmp loc_102295E  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_10A4985  +
push 0  +
mov ecx ebx +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0A8h]  +
jmp loc_1022985  +
***
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1022685  +
push 8000FFFFh  +
lea ecx [ebp-38h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1022688  +
***
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10221FD  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_105A264  +
lea eax [ebp-3Ch] +
jmp loc_1059EB7  +
call sub_100A5E6  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-0Fh] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [edi+84h] +
call sub_103E4F3  +
mov byte ptr [ebp-4] 0Ah +
jmp loc_1022300  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1022396  +
mov eax [edi+0E0h] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0Ch +
call esi  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 8 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1022377  +
lea ecx [edi+0E0h] +
call sub_100A5CF  +
mov edx [eax] +
lea ecx [edi+108h] +
push ecx  +
push dword ptr [ebp-14h]  +
push eax  +
call dword ptr [edx+34h]  +
push eax  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1022377  +
mov ecx [edi+108h] +
cmp ecx 30000h +
jle loc_1059F9B  +
mov esi [ebp+0Ch] +
call sub_1079ED2  +
push 8000FFFFh  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_102237A  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call sub_107A170  +
test al al +
jz loc_1059F88  +
and dword ptr [ebp+0Ch] 0 +
mov eax [ebp-14h] +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 0Dh +
mov [ebp-1Ch] eax +
call sub_100A5E6  +
push eax  +
push 10h  +
push off_10FC8EC  +
push dword ptr [ebp-1Ch]  +
call sub_1077E48  +
push eax  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A035  +
lea eax [edi+110h] +
push eax  +
push 0  +
call sub_102B576  +
test al al +
jz loc_105A017  +
lea ecx [edi+110h] +
call sub_100A5CF  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
push eax  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-3Ch] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A217  +
cmp dword ptr [edi+110h] 0 +
jz loc_105A217  +
mov eax [ebp+0Ch] +
mov byte ptr [ebp-4] 8 +
test eax eax +
jz loc_105A046  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebp-1Ch] 0 +
mov eax [ebp-14h] +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 0Eh +
mov [ebp-20h] eax +
call sub_100A5E6  +
push eax  +
push 10h  +
push off_10FC8F0  +
push dword ptr [ebp-20h]  +
call sub_1077E48  +
push eax  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A12C  +
and dword ptr [ebp+0Ch] 0 +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 0Fh +
call sub_100A5E6  +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
mov ecx edi +
call sub_102B677  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 10h +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A10E  +
push 8000FFFFh  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-5Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 11h +
call esi  +
lea ecx [ebp-5Ch] +
mov byte ptr [ebp-4] 10h +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-4Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105A10E  +
lea ecx [ebp+0Ch] +
call sub_100A5CF  +
push dword ptr [ebp-1Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
push eax  +
lea ecx [ebp-4Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-4Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 0Fh +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+0Ch] +
mov byte ptr [ebp-4] 0Eh +
test eax eax +
jz loc_105A12C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 8 +
test eax eax +
jz loc_105A13D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [edi+0E4h] +
call sub_100A5CF  +
push dword ptr [ebp-14h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
push eax  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_105A174  +
mov ecx edi +
call sub_10517E3  +
jmp loc_1022377  +
push dword ptr [ebp-14h]  +
lea ecx [edi+0E8h] +
call sub_1010F11  +
lea esi [edi+0E0h] +
mov ecx esi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+48h]  +
neg eax  +
sbb al al +
inc al  +
mov ecx esi +
mov [ebp+0Fh] al +
call sub_100A5CF  +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+4Ch]  +
mov ecx edi +
call sub_107A2B7  +
test al al +
jnz loc_105A1CE  +
mov ecx esi +
call sub_100A5CF  +
movzx edx byte ptr [ebp+0Fh] +
mov ecx [eax] +
push edx  +
push eax  +
call dword ptr [ecx+4Ch]  +
jmp loc_1059F88  +
push dword ptr [edi+0E8h]  +
mov ecx edi +
call sub_107AA36  +
test al al +
jz loc_105A1B7  +
mov ecx edi +
call sub_1079DA2  +
test al al +
jz loc_105A1B7  +
mov ecx edi +
call sub_107BB8F  +
test al al +
jz loc_105A1B7  +
mov ecx edi +
call sub_1079BDD  +
test al al +
jz loc_105A1B7  +
mov ecx esi +
call sub_100A5CF  +
movzx edx byte ptr [ebp+0Fh] +
mov ecx [eax] +
push edx  +
push eax  +
call dword ptr [ecx+4Ch]  +
jmp loc_102235E  +
push 8000FFFFh  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp+0Ch] +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 8 +
test eax eax +
jz loc_1022387  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1022387  +
push 8000FFFFh  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-18h] ebx +
jmp loc_10223A2  +
***
call sub_100ABA9  +
cmp eax ebx +
jz loc_105A27C  +
mov ecx eax +
call sub_1029466  +
push dword ptr [ebp+8]  +
lea eax [ebp-1Ch] +
sub esp 10h +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
call sub_1079055  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
jmp loc_1022108  +
push offset dword_106BA10  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10220F6  +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1029664  +
***
lea ecx [ebp-28h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_1022565  +
***
lea ecx [ebp-28h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104CB46  +
lea ecx [ebp-28h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104CB85  +
lea ecx [ebp-28h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104CBF7  +
lea ecx [ebp-28h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104CC36  +
***
xor eax eax +
jmp loc_105573E  +
***
xor al al +
retn   +
***
xor esi esi +
jmp loc_1030553  +
***
xor al al +
pop esi  +
retn   +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105A350  +
cmp byte ptr [eax+19h] 1 +
jb loc_105A350  +
mov ecx [edi] +
push dword ptr [ecx]  +
push offset dword_100C4B0  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_107E51E  +
xor eax eax +
jmp loc_1031038  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105A350  +
cmp byte ptr [eax+19h] 1 +
jb loc_105A350  +
push offset dword_100C4B0  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_105A350  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_102139F  +
cmp byte ptr [eax+19h] 3 +
jb loc_102139F  +
push offset dword_100C4B0  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
pop esi  +
retn   +
***
push ebx  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax lpDst +
jmp loc_104CF61  +
***
cmp eax esi +
jz loc_104CF95  +
cmp byte ptr [eax+19h] 2 +
jb loc_104CF95  +
push ebx  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_104CF95  +
***
cmp byte ptr [eax+19h] 2 +
jb loc_104CF94  +
push ebx  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_104CF94  +
***
push edi  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax lpDst +
jmp loc_1028B6A  +
cmp eax esi +
jz loc_1028B8E  +
cmp byte ptr [eax+19h] 2 +
jb loc_1028B8E  +
push edi  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1028B8E  +
***
push edi  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax lpDst +
jmp loc_100DD97  +
cmp eax esi +
jz loc_105A472  +
cmp byte ptr [eax+19h] 2 +
jb loc_105A472  +
push edi  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
xor eax eax +
jmp loc_100DDAC  +
***
push offset dword_100C4B0  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax lpDst +
jmp loc_1041A46  +
cmp eax edi +
jz loc_1041A9B  +
cmp byte ptr [eax+19h] 2 +
jb loc_1041A9B  +
push offset dword_100C4B0  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1041A9B  +
mov eax lpDst +
jmp loc_1041AA0  +
cmp byte ptr [eax+19h] 2 +
jb loc_1041A9A  +
push offset dword_100C4B0  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1041A9A  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_104564B  +
cmp byte ptr [eax+19h] 3 +
jb loc_104564B  +
push offset dword_100C4B0  +
push 46h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_104564B  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10450D0  +
cmp byte ptr [eax+19h] 3 +
jb loc_10450D0  +
push offset dword_100C4B0  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10450D0  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1046937  +
cmp byte ptr [eax+19h] 3 +
jb loc_1046937  +
push offset dword_100C4B0  +
push 4Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1046937  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10453EC  +
cmp byte ptr [eax+19h] 3 +
jb loc_10453EC  +
push offset dword_100C4B0  +
push 4Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10453EC  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10459BE  +
cmp byte ptr [eax+19h] 3 +
jb loc_10459BE  +
push offset dword_100C4B0  +
push 4Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10459BE  +
***
mov eax dword_10F52D0 +
mov [ecx+228h] eax +
mov [ecx+0CCh] eax +
inc eax  +
mov dword_10F52D0 eax +
mov eax [ecx+0CCh] +
jmp locret_102B3EE  +
***
mov edi [ebp+arg_4] +
mov esi [edi] +
mov eax esi +
cdq   +
idiv  [ebp+arg_8] +
mov eax esi +
sub eax edx +
cdq   +
idiv  [ebp+arg_8] +
jmp loc_101AF77  +
***
cmp dword ptr [esi+314h] 0 +
jnz loc_1009D1C  +
call ds:GetMessagePos  +
movsx ecx ax +
shr eax 10h +
cwde   +
mov [ebp-4] eax +
lea eax [ebp-8] +
push eax  +
push dword ptr [esi+20h]  +
mov [ebp-8] ecx +
call ds:ScreenToClient  +
push dword ptr [ebp-4]  +
lea ecx [esi+2F0h] +
push dword ptr [ebp-8]  +
call sub_107E59D  +
test eax eax +
jnz loc_105A673  +
push dword ptr [ebp-4]  +
lea ecx [esi+300h] +
push dword ptr [ebp-8]  +
call sub_107E59D  +
test eax eax +
jz loc_1009D1C  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push 7F84h  +
push 0  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
xor eax eax +
inc eax  +
jmp loc_1009D23  +
***
push 0Ah  +
pop ecx  +
mov [esi] cx +
mov [esi+8] eax +
jmp loc_104D77F  +
***
mov eax [ecx+8] +
sub eax edx +
push 68h  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov eax [ecx+0Ch] +
sub eax edx +
push 30h  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov eax [ecx+8] +
sub eax edx +
push 30h  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
pop ebp  +
retn 4  +
***
xor ecx ecx +
jmp loc_10424E3  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
xor ecx ecx +
jmp loc_100AB69  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
xor ecx ecx +
jmp loc_1041B52  +
***
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
jmp loc_101C6E3  +
***
pop ebp  +
retn 4  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor al al +
jmp loc_1024F81  +
***
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1055361  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1027FEC  +
***
mov eax edx +
jmp loc_100DB1C  +
mov eax esi +
jmp loc_100DB4C  +
***
lea eax [ebp-30h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-0Dh] 1 +
call sub_10AC4D1  +
jmp loc_100D950  +
***
push offset dword_100C4B0  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_100DE5C  +
push ds:?wndBottom@CWnd@@2V1@B  +
xor ecx ecx +
cmp [esi+1DFh] cl +
setz cl  +
dec ecx  +
and ecx 0FFFFFFC0h +
sub ecx 0FFFFFF80h +
or ecx 10h +
push ecx  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
push eax  +
call sub_100DBE1  +
jmp loc_100DE75  +
mov ebx 8000FFFFh +
push ebx  +
push dword ptr [esi+178h]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_100DED8  +
mov eax [esi+178h] +
mov esi [eax+4Ch] +
push ebx  +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_100DED8  +
push 20h  +
push 0  +
push 200h  +
mov ecx esi +
jmp loc_100DED3  +
push ebx  +
push 200h  +
jmp loc_100DED3  +
***
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
jmp loc_10209D5  +
***
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_102433B  +
***
mov ecx lpDst +
cmp ecx edi +
jz loc_102436C  +
cmp byte ptr [ecx+19h] 3 +
jb loc_102436C  +
push eax  +
push ebx  +
push 57h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_102436C  +
***
push offset dword_100C4B0  +
push 58h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10242EE  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1028C4A  +
***
mov edi [edi+288h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1028C3D  +
push 0  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_10BEB59  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1028C3D  +
push 0  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_1025313  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_1028C3D  +
***
mov ecx esi +
call sub_108206C  +
cmp eax edi +
jnz loc_102AB3B  +
lea ecx [edi+50h] +
mov eax [ecx] +
push 1  +
push 1  +
call dword ptr [eax]  +
jmp loc_102AB3B  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1028D83  +
push 0  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1028D79  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1032F87  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1032F87  +
push eax  +
push offset dword_100C4B0  +
push 96h  +
jmp loc_105AAF2  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1032F87  +
cmp byte ptr [eax+19h] 3 +
jb loc_1032F87  +
push offset dword_100C4B0  +
push 97h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1032F87  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1032F87  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1032F87  +
push eax  +
push offset dword_100C4B0  +
push 98h  +
jmp loc_105AAF2  +
lea edi [eax+ecx] +
call ds:GetDesktopWindow  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp eax ebx +
jz loc_105AAA2  +
lea ecx [ebp-38h] +
push ecx  +
push dword ptr [eax+20h]  +
call ds:GetWindowRect  +
mov eax [ebp-30h] +
sub eax [ebp-38h] +
cmp edi eax +
jle loc_105AAA2  +
mov [ebp-28h] ebx +
mov ecx [ebp-10h] +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
mov [ebp-20h] edi +
call sub_10B1D59  +
lea ecx [ebp-48h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
cmp eax ebx +
jge loc_1032F87  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1032F87  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1032F87  +
push eax  +
push offset dword_100C4B0  +
push 99h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1032F87  +
***
mov eax [ecx] +
call dword ptr [eax+8]  +
jmp loc_1019CC8  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_105AB20 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
jmp loc_10357BD  +
***
lea ecx [esi+4] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor esi esi +
jmp loc_10357DD  +
***
movzx ecx word ptr [eax+4] +
movzx esi word ptr [edx+4] +
cmp cx si +
jnz loc_1038A75  +
movzx ecx word ptr [eax+6] +
movzx esi word ptr [edx+6] +
cmp cx si +
jnz loc_1038A75  +
push edi  +
push 8  +
lea esi [eax+8] +
pop ecx  +
lea edi [edx+8] +
xor eax eax +
cmps   +
pop edi  +
jz loc_105AB73  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
setl al  +
jmp loc_1038A78  +
***
movzx ecx bl +
push ecx  +
push offset dword_100C4B0  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_102B8C3  +
***
mov ecx ebx +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
jmp loc_10293DB  +
push 1  +
push eax  +
jmp loc_10293C7  +
test eax eax +
jnz loc_105ABA4  +
jmp loc_10293D7  +
***
push offset dword_100C4B0  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1031070  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10215E5  +
cmp byte ptr [eax+19h] 3 +
jb loc_10215E5  +
push offset dword_100C4B0  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10215E5  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1021580  +
cmp byte ptr [eax+19h] 3 +
jb loc_1021580  +
push offset dword_100C4B0  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1021580  +
push [ebp+var_8]  +
mov ecx edi +
push 10h  +
call sub_1023016  +
mov eax [esi+178h] +
push dword ptr [eax+4Ch]  +
mov ecx [ebp+var_4] +
call ?RemoveView@CDocument@@QAEXPAVCView@@@Z  +
mov eax [esi+178h] +
mov ecx [eax] +
movzx edx bl +
push edx  +
push eax  +
call dword ptr [ecx+74h]  +
mov eax [esi+178h] +
push dword ptr [eax+4Ch]  +
mov ecx [ebp+var_4] +
call ?AddView@CDocument@@QAEXPAVCView@@@Z  +
mov eax [esi+178h] +
mov eax [eax+4Ch] +
test eax eax +
jz loc_105AC7E  +
mov eax [eax+20h] +
jmp loc_105AC80  +
xor eax eax +
mov [esi+234h] eax +
jmp loc_10215C5  +
mov esi [esi+178h] +
mov eax [esi] +
push 1  +
push esi  +
call dword ptr [eax+18h]  +
jmp loc_10215E5  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_100DE0F  +
cmp byte ptr [ecx+19h] 3 +
jb loc_100DE0F  +
push ebx  +
push eax  +
push offset dword_100C4B0  +
push 30h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
jmp loc_100DE0F  +
***
push offset dword_100C4B0  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_100CB3F  +
***
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov ecx [esi+174h] +
mov ebx eax +
cmp ecx edi +
jz loc_105AD08  +
push dword ptr [ebp+8]  +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov edi eax +
test ebx ebx +
jz loc_104673C  +
test edi edi +
jz loc_104673C  +
mov esi [esi+0D8h] +
mov eax [esi] +
push edi  +
push ebx  +
push esi  +
call dword ptr [eax+4Ch]  +
test eax eax +
jnz loc_105AD30  +
inc eax  +
jmp loc_104673E  +
cmp eax 1 +
jz loc_104673C  +
xor eax eax +
cmp ebx edi +
setz al  +
jmp loc_104673E  +
***
push 0  +
jmp loc_105665B  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
jmp loc_1056660  +
***
push 0  +
jmp loc_1036EF0  +
push 0  +
mov ecx ebx +
call sub_1010F11  +
mov esi 80004002h +
jmp loc_1036EF5  +
***
push 0  +
jmp loc_1017E3A  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
jmp loc_1017E3F  +
***
push 0  +
jmp loc_101844D  +
push 0  +
mov ecx ebx +
call sub_1010F11  +
mov esi 80004002h +
jmp loc_1018452  +
***
push offset dword_100C4B0  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_100DA50  +
***
push offset dword_100C4B0  +
push 76h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_101140E  +
***
push [ebp+arg_0]  +
lea eax [esi+0Ch] +
push eax  +
call sub_1038A5D  +
test al al +
jz loc_105ADEF  +
mov esi [esi+8] +
jmp loc_1026730  +
mov edi esi +
mov esi [esi] +
jmp loc_1026730  +
***
cmp eax 80004002h +
jz loc_105661C  +
push eax  +
call sub_10C7F1B  +
jmp loc_105661C  +
***
cmp eax 80004002h +
jz loc_101840A  +
push eax  +
call sub_10C7F1B  +
jmp loc_101840A  +
***
push offset dword_100C4B0  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1020A28  +
mov eax lpDst +
cmp eax edi +
jz loc_105AE5C  +
cmp byte ptr [eax+19h] 2 +
jb loc_105AE5C  +
push offset dword_100C4B0  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 8000FFFFh  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1020A9D  +
mov ecx [ebp+0Ch] +
push 5  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov ecx [ebp-1Ch] +
push esi  +
push dword ptr [ebp+0Ch]  +
call ?SetActiveView@CFrameWnd@@QAEXPAVCView@@H@Z  +
jmp loc_1020A90  +
***
push offset dword_100C4B0  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1024C2B  +
lea eax [esi+180h] +
cmp dword ptr [eax] 0 +
jz loc_1024C64  +
jmp loc_1047B3A  +
***
push 80004005h  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102560C  +
lea ecx [edi+44h] +
mov eax [ecx] +
call dword ptr [eax+70h]  +
test eax eax +
jnz loc_1043DC6  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call sub_108282B  +
lea ecx [ebp-34h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1043DC6  +
mov ecx [ebp+10h] +
push 0  +
lea eax [ebp-34h] +
push eax  +
call sub_10BEB59  +
mov byte ptr [ebp-4] 5 +
jmp loc_10255E4  +
***
push 80004002h  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_1055593  +
***
mov ecx [ebp-24h] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1021463  +
***
push offset dword_100C4B0  +
push 59h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1024249  +
mov eax lpDst +
cmp eax edi +
jz loc_10242A8  +
cmp byte ptr [eax+19h] 2 +
jb loc_10242A8  +
push esi  +
push dword ptr [ebp+10h]  +
push offset dword_100C4B0  +
push 5Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
jmp loc_10242A8  +
xor esi esi +
jmp loc_10242A8  +
***
push offset dword_100C4B0  +
push 5Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1023EF9  +
inc eax  +
jmp loc_1023F9F  +
***
push offset dword_100C4B0  +
push 5Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_102764C  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10276C2  +
cmp byte ptr [eax+19h] 2 +
jb loc_10276C2  +
push offset dword_100C4B0  +
push 5Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10276C2  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10276C2  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10276C2  +
push eax  +
push dword ptr [ebx+18h]  +
push offset dword_100C4B0  +
push 5Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
jmp loc_10276C2  +
mov [ebp-14h] edi +
jmp loc_10467FA  +
mov [ebp-14h] edi +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10467ED  +
cmp byte ptr [eax+19h] 2 +
jb loc_10467ED  +
push offset dword_100C4B0  +
push 5Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10467ED  +
mov ecx esi +
call sub_1084EE6  +
test al al +
jz loc_1046828  +
push dword ptr [ebp-10h]  +
mov ecx [esi+174h] +
call sub_10249C3  +
xor eax eax +
push 0Ah  +
pop ecx  +
lea edi [ebp-80h] +
stos   +
mov eax dword_10FCB14 +
mov [ebp-6Ch] eax +
xor eax eax +
xor edi edi +
cmp [ebp-14h] ebx +
lea ebx [esi+0D8h] +
setz al  +
mov ecx ebx +
mov dword ptr [ebp-80h] 16h +
mov [ebp-70h] edi +
dec eax  +
mov [ebp-74h] eax +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-38h] +
push edx  +
lea edx [ebp-34h] +
push edx  +
push dword ptr [ebp-18h]  +
push eax  +
call dword ptr [ecx+10h]  +
mov [ebp-1Ch] edi +
lea ecx [ebp-1Ch] +
mov dword ptr [ebp-4] 1 +
mov [ebp-24h] edi +
call sub_100A5E6  +
push eax  +
push offset dword_1023D6C  +
mov ecx ebx +
call sub_107FF60  +
mov edi eax +
test edi edi +
jge loc_105B140  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_105B133  +
cmp byte ptr [ecx+19h] 3 +
jb loc_105B133  +
push edi  +
push offset dword_100C4B0  +
push 60h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
mov ecx lpDst +
mov eax [ebp-1Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jnz loc_105B1A5  +
jmp loc_105B1B1  +
lea ecx [ebp-1Ch] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-24h] +
push edx  +
push dword ptr [ebp-18h]  +
push eax  +
call dword ptr [ecx+130h]  +
mov edi eax +
test edi edi +
jge loc_105B18A  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_105B133  +
cmp byte ptr [ecx+19h] 3 +
jb loc_105B133  +
push edi  +
push dword ptr [ebp-18h]  +
push offset dword_100C4B0  +
push 61h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
jmp loc_105B12D  +
mov eax [ebp-24h] +
or dword ptr [ebp-80h] 8 +
or dword ptr [ebp-4] 0FFFFFFFFh +
and eax 0Fh +
shl eax 8 +
or [ebp-64h] eax +
mov eax [ebp-1Ch] +
test eax eax +
jz loc_105B1AB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx lpDst +
test edi edi +
jge loc_105B1B7  +
xor edi edi +
mov eax [ebp-34h] +
mov [ebp-68h] eax +
mov eax [ebp-18h] +
mov [ebp-60h] eax +
mov eax [esi+174h] +
mov ebx [eax+94h] +
test ebx ebx +
jz loc_105B288  +
cmp dword ptr [ebp-20h] 0 +
jz loc_105B246  +
and dword ptr [ebp-28h] 0 +
lea ecx [esi+0D8h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-28h] +
push edx  +
push dword ptr [ebp-20h]  +
push eax  +
call dword ptr [ecx+44h]  +
test edi edi +
jl loc_105B246  +
mov ecx [esi+178h] +
and dword ptr [ebp-2Ch] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-58h] +
push eax  +
call sub_1098F42  +
lea ecx [ebp-58h] +
mov dword ptr [ebp-4] 2 +
call ds:??7SC@mmcerror@@QBEHXZ  +
test eax eax +
jz loc_105B235  +
mov eax [ebp-2Ch] +
inc eax  +
mov [ebp-74h] eax +
jmp loc_105B239  +
or dword ptr [ebp-74h] 0FFFFFFFFh +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-58h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebx] +
lea ecx [ebp-80h] +
push ecx  +
push ebx  +
call dword ptr [eax+0Ch]  +
test eax eax +
jge loc_105B28F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1046828  +
cmp byte ptr [ecx+19h] 3 +
jb loc_1046828  +
push eax  +
push offset dword_100C4B0  +
push 62h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1046828  +
mov eax 8000FFFFh +
jmp loc_105B25A  +
lea ecx [esi+0D8h] +
call sub_100A5CF  +
push dword ptr [ebp-78h]  +
mov ecx [eax] +
push dword ptr [ebp-18h]  +
push eax  +
call dword ptr [ecx+40h]  +
jmp loc_1046828  +
cmp byte ptr [ebp+0Bh] 1 +
jnz loc_10276C2  +
lea ecx [esi+0D8h] +
call sub_100A5CF  +
mov ecx [eax] +
push 0  +
push 0  +
push 902Bh  +
push dword ptr [ebp-30h]  +
push eax  +
call dword ptr [ecx+78h]  +
jmp loc_1049CC9  +
***
push offset dword_100C4B0  +
push 6Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1041E15  +
lea eax [esi+1F8h] +
cmp dword ptr [eax+78h] 0 +
mov eax [eax] +
setz cl  +
shr eax 4 +
and cl al +
test cl 1 +
jnz loc_1041E6E  +
mov ecx [esi+174h] +
push edi  +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
lea edi [esi+0D8h] +
mov ecx edi +
mov ebx eax +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push ebx  +
push eax  +
call dword ptr [ecx+44h]  +
xor ecx ecx +
cmp eax ecx +
jge loc_105B36C  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1041E6E  +
cmp byte ptr [ecx+19h] 3 +
jb loc_1041E6E  +
push eax  +
push ebx  +
push offset dword_100C4B0  +
push 6Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
jmp loc_1041E6E  +
cmp [ebp-14h] ecx +
jz loc_1041E6E  +
mov [ebp+8] ecx +
push dword ptr [ebp-14h]  +
mov [ebp-4] ecx +
mov [ebp-18h] ecx +
call sub_1054C16  +
lea ecx [ebp+8] +
mov [ebp-10h] eax +
call sub_100A5E6  +
push eax  +
push offset dword_1023D6C  +
mov ecx edi +
call sub_107FF60  +
test eax eax +
jl loc_105B3E6  +
lea ecx [ebp+8] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push ebx  +
push eax  +
call dword ptr [ecx+130h]  +
test eax eax +
jge loc_105B40D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_105B40D  +
cmp byte ptr [ecx+19h] 3 +
jb loc_105B40D  +
push eax  +
push ebx  +
push offset dword_100C4B0  +
push 6Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
jmp loc_105B40D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_105B40D  +
cmp byte ptr [ecx+19h] 3 +
jb loc_105B40D  +
push eax  +
push offset dword_100C4B0  +
push 6Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
cmp dword ptr [ebp-10h] 0 +
jz loc_105B431  +
mov ecx [ebp-18h] +
mov esi [esi+178h] +
mov eax [esi] +
push 0F00h  +
shl ecx 8 +
push ecx  +
push dword ptr [ebp-10h]  +
push esi  +
call dword ptr [eax+0ACh]  +
mov eax [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1041E6E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1041E6E  +
***
push offset dword_100C4B0  +
push 70h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_101D2FF  +
push 5Ch  +
mov ecx edi +
call ??YCString@@QAEABV0@G@Z  +
jmp loc_101D277  +
lea eax [ebp-28h] +
jmp loc_101D2BA  +
***
push offset dword_100C4B0  +
push 71h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_101D1FD  +
lea ecx [esi+0D8h] +
push edi  +
call sub_100EB41  +
test al al +
jz loc_101D210  +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov ebx eax +
cmp ebx edi +
jz loc_101D210  +
push edi  +
lea ecx [ebp-2Ch] +
mov dword ptr [ebp-14h] 7 +
call sub_100CD14  +
lea ecx [esi+0D8h] +
mov [ebp-4] edi +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-2Ch] +
push edx  +
push ebx  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jl loc_105B510  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_105B4EE  +
lea eax [ebp-28h] +
add esi 1F4h +
push eax  +
mov ecx esi +
call ??4CString@@QAEABV0@PBG@Z  +
mov esi [esi] +
push edi  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100CD3C  +
mov eax esi +
jmp loc_101D238  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push edi  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100CD3C  +
jmp loc_101D210  +
lea edi [esi+1F4h] +
mov ecx edi +
call ?Empty@CString@@QAEXXZ  +
jmp loc_101D236  +
***
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
jmp loc_10297D6  +
***
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
jmp loc_10297CE  +
***
push 2EEFh  +
lea eax [ebp-40h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 6 +
mov dword ptr [ebp-10h] 2 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
jmp loc_10297F7  +
***
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-40h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10297A0  +
***
mov esi ds:??0SC@mmcerror@@QAE@ABV01@@Z +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-40h] +
call esi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 7 +
call ds:?Clear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-40h] +
push eax  +
call esi  +
or [ebp-10h] ebx +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10297CE  +
***
push 80004005h  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10297CE  +
***
add eax 0Ch +
push eax  +
push [ebp+arg_4]  +
call sub_1038A5D  +
test al al +
jnz loc_102670A  +
lea eax [ebp+var_4] +
jmp loc_1026710  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_100F9DD  +
***
cmp byte ptr [edi+0Ch] 0 +
jnz loc_105B63E  +
mov ecx [edi+8] +
test ecx ecx +
jz loc_105B63E  +
push esi  +
call sub_101B028  +
mov edi [edi] +
cmp edi [esi+8] +
jz loc_101B2ED  +
jmp loc_105B62B  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10187B3  +
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
jmp loc_10187B3  +
movzx ecx byte ptr [ebp+18h] +
push esi  +
push ecx  +
movzx ecx byte ptr [ebp+14h] +
push ecx  +
push offset dword_100C4B0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10C9315  +
jmp loc_10186DE  +
movzx eax byte ptr [ebp+14h] +
push ebx  +
push eax  +
movzx eax byte ptr [ebp+18h] +
lea ecx [esi+44h] +
push eax  +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov ecx [esi+17Ch] +
push eax  +
push esi  +
lea eax [ebp-40h] +
push eax  +
call sub_1095A41  +
lea ecx [ebp-40h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10186FB  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1018785  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_102511A  +
cmp [eax+19h] bl +
jb loc_102511A  +
push offset dword_100C4B0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_102511A  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_102523E  +
cmp byte ptr [ecx+19h] 2 +
jb loc_102523E  +
push eax  +
push offset dword_100C4B0  +
push 0Eh  +
jmp loc_105B782  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_102523E  +
cmp byte ptr [ecx+19h] 2 +
jb loc_102523E  +
push eax  +
push offset dword_100C4B0  +
push 0Fh  +
jmp loc_105B782  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_102523E  +
cmp byte ptr [ecx+19h] 2 +
jb loc_102523E  +
push eax  +
push offset dword_100C4B0  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_102523E  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10286A8  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105B7C8  +
cmp byte ptr [eax+19h] 5 +
jb loc_105B7C8  +
push offset dword_100C4B0  +
push 73h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1044A9B  +
mov [ebp-38h] ebx +
mov dword ptr [ebp-48h] 0FFFFFFFCh +
jmp loc_1044A47  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1044A87  +
***
push offset off_10F9570  +
lea eax [ebp-30h] +
push eax  +
call sub_1097FD8  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1054B26  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1054B26  +
***
mov [eax] bl +
lea eax [ebp-54h] +
push eax  +
push ebx  +
push 1  +
push dword ptr [ebp+8]  +
lea eax [ebp-30h] +
push dword ptr [ebp-10h]  +
mov ecx esi +
push eax  +
call sub_101864F  +
mov byte ptr [ebp-4] 2 +
jmp loc_105B940  +
lea eax [ebp-48h] +
push eax  +
mov ecx esi +
call sub_1086250  +
lea eax [ebp-54h] +
push eax  +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
lea eax [ebp-30h] +
push dword ptr [ebp-10h]  +
mov ecx esi +
push eax  +
call sub_101864F  +
mov byte ptr [ebp-4] 3 +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10185F9  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10185F9  +
lea eax [ebp-54h] +
push eax  +
push ebx  +
push 1  +
push dword ptr [ebp+8]  +
lea eax [ebp-30h] +
push dword ptr [ebp-10h]  +
mov ecx esi +
push eax  +
call sub_101864F  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_105B9BD  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov [esi+0ECh] bl +
jmp loc_10185F9  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1029C66  +
mov [ebp-3Ch] ebx +
mov dword ptr [ebp-4Ch] 0FFFFFFFCh +
jmp loc_1029BEB  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_1029C59  +
mov ecx [esi+174h] +
call sub_100C5D1  +
mov ecx [esi+174h] +
push eax  +
call sub_1027213  +
jmp loc_1029C59  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1029AEB  +
***
lea ecx [edi-74h] +
call sub_100C52C  +
test al al +
jz loc_105BA34  +
mov eax offset aListview +
jmp loc_105BA47  +
cmp dword ptr [edi+1FCh] 2 +
mov eax offset aOcx +
jz loc_105BA47  +
mov eax offset aWebbrowser +
push eax  +
push offset dword_100C4B0  +
push 90h  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_106F7E8  +
jmp loc_1029A9D  +
***
lea ecx [edi-74h] +
call sub_100C52C  +
test al al +
jz loc_105BA82  +
push 0  +
lea eax [ebp-30h] +
push eax  +
lea ecx [edi-74h] +
call sub_108DC51  +
mov byte ptr [ebp-4] 2 +
jmp loc_105BAB6  +
mov eax [edi+1FCh] +
cmp eax 2 +
jz loc_105BAA4  +
cmp eax ebx +
jz loc_105BAA4  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1029AE1  +
***
push 0  +
lea eax [ebp-30h] +
push eax  +
lea ecx [edi-74h] +
call sub_10449C9  +
mov byte ptr [ebp-4] 3 +
push eax  +
lea ecx [ebp-20h] +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1029AAD  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1029AAD  +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1016304  +
***
push offset dword_100C4B0  +
push 36h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax lpDst +
jmp loc_101CFA8  +
push edi  +
mov ecx esi +
call sub_108541D  +
mov esi eax +
jmp loc_105BE73  +
movzx ecx word ptr [edi+0Ch] +
movzx eax cx +
sub eax 8 +
jz loc_105BCCB  +
dec eax  +
jz loc_105BCA8  +
sub eax 4 +
jz loc_105BBEA  +
sub eax 21h +
jz loc_105BB63  +
push ecx  +
mov ecx esi +
call sub_108C397  +
jmp loc_105BE92  +
push 8003h  +
mov ecx esi +
call sub_108AE35  +
test eax eax +
jz loc_101CFF7  +
mov edi [esi+0D8h] +
test edi edi +
jz loc_101CFF7  +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov ebx eax +
test ebx ebx +
jz loc_101CFF7  +
mov eax [esi+178h] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
test eax eax +
jz loc_101CFF7  +
cmp eax 1 +
jnz loc_105BBC7  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_1086250  +
cmp eax 0FFFFFFFFh +
jnz loc_105BBD4  +
jmp loc_101CFF7  +
jle loc_101CFF7  +
mov dword ptr [ebp-14h] 0FFFFFFFBh +
push dword ptr [ebp-14h]  +
mov eax [edi] +
push 0  +
push 9008h  +
push ebx  +
push edi  +
call dword ptr [eax+78h]  +
jmp loc_101CFF7  +
push 12h  +
call ds:GetKeyState  +
mov ecx esi +
test ax ax +
jge loc_105BE2B  +
push 8004h  +
call sub_108AE35  +
test eax eax +
jz loc_101CFF7  +
mov eax [esi+270h] +
test eax eax +
jnz loc_105BC6C  +
mov ecx esi +
call sub_101D08C  +
mov eax [esi+178h] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
push 0FFFFFFF6h  +
pop edi  +
mov [ebp-14h] edi +
test eax eax +
jz loc_101CFF7  +
cmp eax 1 +
jnz loc_105BC51  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_1086250  +
mov ebx [ebp-14h] +
jmp loc_105BC5A  +
jle loc_101CFF7  +
push 0FFFFFFFBh  +
pop ebx  +
cmp ebx edi +
jz loc_101CFF7  +
cmp ebx 0FFFFFFFEh +
jnz loc_105BC77  +
jmp loc_101CFF7  +
xor ebx ebx +
cmp eax 2 +
setz bl  +
add ebx 0FFFFFFFCh +
mov edi [esi+0D8h] +
test edi edi +
jz loc_101CFF7  +
add esi 44h +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+78h]  +
test eax eax +
jz loc_101CFF7  +
mov ecx [edi] +
push ebx  +
push 0  +
push 9012h  +
push eax  +
push edi  +
jmp loc_105BE0C  +
mov ecx esi +
call sub_101D08C  +
test eax eax +
jz loc_101CFF7  +
push 1  +
push dword ptr [esi+174h]  +
mov ecx eax +
call ?SetActiveView@CFrameWnd@@QAEXPAVCView@@H@Z  +
jmp loc_101CFF7  +
lea eax [ebp-44h] +
push eax  +
mov ecx esi +
call sub_10833C1  +
lea ecx [ebp-44h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_101CFF7  +
call sub_100ABA9  +
mov edi eax +
test edi edi +
jz loc_105BD16  +
push 8005h  +
mov ecx esi +
call sub_108AE35  +
test eax eax +
jnz loc_105BD08  +
cmp byte ptr [esi+1D4h] 1 +
jnz loc_105BD16  +
mov byte ptr [edi+168h] 1 +
xor esi esi +
jmp loc_105BE73  +
xor esi esi +
inc esi  +
jmp loc_105BE73  +
call sub_100ABA9  +
test eax eax +
jz loc_105BD2E  +
mov byte ptr [eax+168h] 0 +
mov eax [edi+10h] +
cmp [edi+8] ebx +
mov ebx [edi+20h] +
mov edi [edi+2Ch] +
mov [ebp-14h] eax +
lea eax [esi+1F8h] +
cmp dword ptr [eax+78h] 0 +
mov eax [eax] +
setz cl  +
shr eax 4 +
and cl al +
test cl 1 +
jz loc_105BD69  +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push dword ptr [ebp+0Ch]  +
push ebx  +
push dword ptr [ebp-14h]  +
push 0  +
jmp loc_105BD9B  +
push edi  +
call sub_1054C16  +
test eax eax +
jz loc_101CFF7  +
cmp dword ptr [eax+0Ch] 3951589h +
push dword ptr [ebp+0Ch]  +
push ebx  +
jnz loc_105BD8D  +
push 0  +
push 1  +
push dword ptr [eax+14h]  +
jmp loc_105BD9C  +
mov eax [eax+14h] +
push eax  +
lea ecx [esi+44h] +
mov eax [ecx] +
push 0  +
call dword ptr [eax+78h]  +
push eax  +
mov ecx esi +
call sub_108CAC7  +
jmp loc_101CFF7  +
mov ebx [edi+14h] +
cmp eax offset lpDst +
jz loc_105BDCB  +
cmp byte ptr [eax+19h] 5 +
jb loc_105BDCB  +
push ebx  +
push offset dword_100C4B0  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
mov eax [edi+0Ch] +
and dword ptr [ebp-1Ch] 0 +
mov [ebp-20h] eax +
mov eax [edi+10h] +
mov [ebp-24h] ebx +
test al 0Ch +
jz loc_105BDE6  +
mov dword ptr [ebp-1Ch] 1 +
test al 20h +
jz loc_105BDEE  +
or dword ptr [ebp-1Ch] 2 +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push dword ptr [ebp+0Ch]  +
lea edx [ebp-24h] +
push edx  +
push 900Bh  +
mov esi [esi+0D8h] +
mov ecx [esi] +
push eax  +
push esi  +
call dword ptr [ecx+78h]  +
jmp loc_101CFF7  +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push dword ptr [edi+10h]  +
push dword ptr [edi+0Ch]  +
push 9002h  +
jmp loc_105BE02  +
mov ecx esi +
call sub_1087475  +
jmp loc_101CFF7  +
and dword ptr [ebp-18h] 0 +
lea eax [ebp-54h] +
push eax  +
mov ecx esi +
call sub_108CC07  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_101CFF7  +
mov esi [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-34h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
jmp loc_101D007  +
push edi  +
mov ecx esi +
call sub_108CE81  +
movzx eax al +
mov [ebp-18h] eax +
jmp loc_101CFF7  +
***
lea ecx [ebp-2Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_100D1D2  +
cmp eax ecx +
jz loc_105BEB4  +
cmp eax edx +
jnz loc_100D173  +
mov eax [esi+14h] +
test byte ptr [eax] 1 +
jz loc_100D173  +
mov ecx [ebx+0E4h] +
mov eax [eax+4] +
mov [ebp-14h] ecx +
mov ecx [ebx+0E8h] +
mov [ebp-10h] ecx +
mov ecx [esi+0Ch] +
mov [ebp+ecx*4-14h] eax +
push 0  +
lea eax [ebp-14h] +
push eax  +
mov ecx ebx +
call sub_1080053  +
jmp loc_101CF5A  +
lea ecx [ebx+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov esi [esi+0Ch] +
lea ecx [ebx+0D8h] +
mov edi eax +
call sub_100A5CF  +
push esi  +
push 2  +
push 9021h  +
jmp loc_105BFD2  +
lea ecx [ebx+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov [ebp+0Ch] eax +
mov eax [esi+0Ch] +
add esi 10h +
lea edi [ebp-3Ch] +
movs   +
movs   +
movs   +
mov [ebp+8] eax +
mov eax [ebx+178h] +
movs   +
mov eax [eax+4Ch] +
test eax eax +
jz loc_105BF40  +
mov eax [eax+20h] +
jmp loc_105BF42  +
xor eax eax +
push 2  +
lea ecx [ebp-3Ch] +
push ecx  +
push 0  +
push eax  +
call ds:MapWindowPoints  +
lea ecx [ebx+0D8h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-3Ch] +
push edx  +
push dword ptr [ebp+8]  +
push 9022h  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+78h]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push 0  +
lea ecx [ebp-4Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
mov ecx [ebp+10h] +
movzx eax al +
mov [ecx] eax +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_105BFE3  +
cmp dword ptr [esi+10h] 0Dh +
jz loc_10557A3  +
jmp loc_105C052  +
mov esi [esi+0Ch] +
lea ecx [ebx+0D8h] +
mov edi eax +
call sub_100A5CF  +
push esi  +
push 0  +
push 9019h  +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+78h]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_101CF5A  +
lea ecx [ebp-2Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_101CF5A  +
mov eax [esi+14h] +
test byte ptr [eax] 80h +
jnz loc_105C010  +
push ecx  +
jmp loc_100D1D5  +
mov eax [ebx+178h] +
mov eax [eax+4Ch] +
push 8000FFFFh  +
push eax  +
mov [ebp+0Ch] eax +
lea eax [ebp-1Ch] +
push eax  +
call sub_100A3AE  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_105C059  +
lea ecx [ebp-1Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor esi esi +
jmp loc_100D1E2  +
push dword ptr [esi+8]  +
mov ecx [ebp+0Ch] +
push esi  +
lea eax [ebp-5Ch] +
push eax  +
call sub_1098B40  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-5Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105C03C  +
push 1  +
lea ecx [ebp-6Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 4 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-6Ch] +
mov [ebp+0Fh] al +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp byte ptr [ebp+0Fh] 0 +
jz loc_105C0CE  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_101CF5A  +
push dword ptr [ebp+10h]  +
mov ecx ebx +
push esi  +
push dword ptr [ebp+8]  +
call ?OnNotify@CWnd@@MAEHIJPAJ@Z  +
lea ecx [ebp-1Ch] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_100D1E2  +
movzx eax word ptr [esi+0Ch] +
mov ecx ebx +
cmp ax 9 +
jnz loc_105C10A  +
lea eax [ebp-7Ch] +
push eax  +
call sub_108282B  +
lea ecx [ebp-7Ch] +
jmp loc_105C0C3  +
push eax  +
call sub_108C397  +
jmp loc_100D1E0  +
lea ecx [ebx+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
cmp [esi+30h] eax +
jnz loc_105C148  +
cmp byte ptr [ebx+33Dh] 0 +
jnz loc_105C141  +
push 0  +
push 8005h  +
mov ecx ebx +
call sub_10882DE  +
test eax eax +
jz loc_101CF5A  +
mov byte ptr [ebx+33Dh] 0 +
call sub_100ABA9  +
test eax eax +
jz loc_105C052  +
mov byte ptr [eax+168h] 1 +
jmp loc_105C052  +
call sub_100ABA9  +
test eax eax +
jz loc_105C171  +
mov byte ptr [eax+168h] 0 +
push dword ptr [ebp+10h]  +
mov eax [esi+30h] +
push dword ptr [esi+1Ch]  +
mov ecx ebx +
push 0  +
push 1  +
push eax  +
call sub_108CAC7  +
jmp loc_100D1E0  +
***
push offset dword_100C4B0  +
push 87h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10184D2  +
***
lea ecx [ebp-24h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1018513  +
***
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1076041  +
push offset dword_10E8AC0  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov edx [edx+8] +
cmp byte ptr [edx+10h] 0 +
jz loc_1018B7A  +
cmp esi [ecx+8] +
jnz loc_105C1FA  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1019199  +
mov eax [esi+4] +
mov byte ptr [eax+10h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+10h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1084C39  +
jmp loc_1017D52  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1084C39  +
jmp loc_1017D34  +
***
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_1075FC8  +
push offset dword_10EA2DC  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_106BEE4 +
call _CxxThrowException  +
mov eax [edi+8] +
cmp byte ptr [eax+1Dh] 0 +
jz loc_105C26E  +
mov ebx edx +
jmp loc_104F6E4  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jz loc_104F6E4  +
jmp loc_105C2BC  +
mov [ebx+4] esi +
jmp loc_104F6F1  +
mov [eax+4] ebx +
jmp loc_104F706  +
push ebx  +
call sub_107FE31  +
mov ecx [ebp-10h] +
jmp loc_104F719  +
cmp byte ptr [ebx+1Dh] 0 +
jz loc_105C2A8  +
mov eax esi +
jmp loc_105C2B1  +
push ebx  +
call sub_107FE13  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_104F72A  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_105C2CC  +
mov esi eax +
jmp loc_105C2E5  +
cmp byte ptr [ebx+1Dh] 0 +
mov esi [eax+4] +
jnz loc_105C2D8  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_105C2F5  +
mov [ecx+4] eax +
jmp loc_105C303  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_105C300  +
mov [ecx] eax +
jmp loc_105C303  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+1Ch] +
mov dl [edi+1Ch] +
mov [eax+1Ch] dl +
mov [edi+1Ch] cl +
mov ecx [ebp-10h] +
jmp loc_104F72A  +
cmp byte ptr [ebx+1Ch] 1 +
jnz loc_105C413  +
mov eax [esi] +
cmp ebx eax +
jnz loc_105C399  +
mov eax [esi+8] +
cmp byte ptr [eax+1Ch] 0 +
jnz loc_105C34A  +
mov byte ptr [eax+1Ch] 1 +
push esi  +
mov byte ptr [esi+1Ch] 0 +
call sub_10C14E7  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+1Dh] 0 +
jnz loc_105C3CD  +
mov edx [eax] +
cmp byte ptr [edx+1Ch] 1 +
jnz loc_105C361  +
mov edx [eax+8] +
cmp byte ptr [edx+1Ch] 1 +
jz loc_105C3C9  +
mov edx [eax+8] +
cmp byte ptr [edx+1Ch] 1 +
jnz loc_105C380  +
mov edx [eax] +
mov byte ptr [edx+1Ch] 1 +
push eax  +
mov byte ptr [eax+1Ch] 0 +
call sub_107FE4E  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+1Ch] +
mov [eax+1Ch] dl +
mov byte ptr [esi+1Ch] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+1Ch] 1 +
call sub_10C14E7  +
jmp loc_105C413  +
cmp byte ptr [eax+1Ch] 0 +
jnz loc_105C3B2  +
mov byte ptr [eax+1Ch] 1 +
push esi  +
mov byte ptr [esi+1Ch] 0 +
call sub_107FE4E  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+1Dh] 0 +
jnz loc_105C3CD  +
mov edx [eax+8] +
cmp byte ptr [edx+1Ch] 1 +
jnz loc_105C3DF  +
mov edx [eax] +
cmp byte ptr [edx+1Ch] 1 +
jnz loc_105C3DF  +
mov byte ptr [eax+1Ch] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_105C413  +
jmp loc_105C31D  +
mov edx [eax] +
cmp byte ptr [edx+1Ch] 1 +
jnz loc_105C3FD  +
mov edx [eax+8] +
mov byte ptr [edx+1Ch] 1 +
push eax  +
mov byte ptr [eax+1Ch] 0 +
call sub_10C14E7  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+1Ch] +
mov [eax+1Ch] dl +
mov byte ptr [esi+1Ch] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+1Ch] 1 +
call sub_107FE4E  +
mov byte ptr [ebx+1Ch] 1 +
jmp loc_104F734  +
***
lea ecx [ebp+arg_4] +
call sub_10C248D  +
mov ecx [ebp+arg_4] +
jmp loc_10264BE  +
push ebx  +
push edi  +
push [ebp+var_4]  +
jmp loc_1024CF8  +
***
cmp edi 30C30C3h +
jbe loc_105C443  +
call loc_10B6E00  +
push eax  +
push edi  +
call sub_10424C0  +
imul edi edi +
add edi eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov al 1 +
jmp loc_1031AED  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101B240  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101B24F  +
***
xor esi esi +
jmp loc_102582E  +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_10188B9  +
mov esi [esi] +
push edi  +
call sub_108E7BE  +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+39h] 0 +
pop ecx  +
mov edi esi +
jnz loc_10188D2  +
jmp loc_105C47C  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_107FF19  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_108E86B  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_105C4A4  +
pop edi  +
jmp loc_101B36F  +
***
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_108EBD8  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1026961  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1030EF6  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1030EF6  +
push eax  +
push offset dword_100C4B0  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1030EF6  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10476CB  +
***
push 80070057h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_1025757  +
***
mov ecx [ebp-14h] +
call sub_100DA2C  +
mov eax offset sub_105C59C +
retn   +
***
cmp edi ebx +
jnz loc_105C5B7  +
xor ecx ecx +
jmp loc_105C5BA  +
mov ecx [edi+20h] +
mov eax wMsgFilterMin +
push ebx  +
push eax  +
push eax  +
push ecx  +
lea eax [ebp-40h] +
push eax  +
call ds:PeekMessageW  +
test eax eax +
jnz loc_105C609  +
movzx eax byte ptr [ebp+0Ch] +
push ebx  +
push eax  +
push wMsgFilterMin  +
push dword ptr [edi+20h]  +
call ds:PostMessageW  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1025923  +
cmp byte ptr [eax+19h] 5 +
jb loc_1025923  +
push offset dword_100C4B0  +
push 2Dh  +
jmp loc_105C62A  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1025923  +
cmp byte ptr [eax+19h] 5 +
jb loc_1025923  +
push offset dword_100C4B0  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1025923  +
***
mov [ebp-7Ch] edi +
mov [ebp-74h] eax +
jmp loc_101F67B  +
***
push 80004005h  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp loc_101F6BF  +
***
or dword ptr [esi+1E0h] 1 +
jmp loc_101F6CB  +
***
or dword ptr [esi+1E0h] 20h +
jmp loc_101F6D7  +
***
or dword ptr [esi+1E0h] 2 +
jmp loc_101F6E0  +
***
or dword ptr [esi+1E0h] 8 +
jmp loc_101F6E8  +
***
push 0  +
lea ecx [esi-58h] +
call sub_107FFF1  +
jmp loc_101F703  +
***
push 0  +
push 0  +
lea eax [ebp-38h] +
push eax  +
lea ecx [esi-58h] +
call sub_10254E2  +
mov byte ptr [ebp-4] 5 +
jmp loc_101F740  +
***
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101F76A  +
***
push 1  +
push 0  +
push 0  +
lea eax [ebp-38h] +
push eax  +
call sub_102502E  +
mov byte ptr [ebp-4] 7 +
jmp loc_101F7AE  +
***
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101F7D2  +
***
lea ecx [esi-58h] +
call sub_101D08C  +
test eax eax +
jz loc_101F822  +
mov ecx eax +
call sub_10A4B16  +
mov eax [esi+204h] +
shr eax 1Fh +
not al  +
and al 1 +
movzx eax al +
push eax  +
lea ecx [esi-58h] +
call sub_107E2FD  +
jmp loc_101F822  +
***
lea ecx [esi+80h] +
call sub_100A5CF  +
mov ecx [eax] +
push ebx  +
push edi  +
push eax  +
call dword ptr [ecx+98h]  +
jmp loc_101F832  +
***
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101F86C  +
***
push 8000FFFFh  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-38h] +
jmp loc_104AF71  +
***
push offset dword_100C4B0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_101B42D  +
lea ecx [eax+4] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_101B4CC  +
lea ecx [edi+4] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_101B4E9  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
jmp loc_101B4FB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101B50D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101B51F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101B531  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101B598  +
***
mov ecx [ebp-24h] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1020E03  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
call sub_1090041  +
mov byte ptr [ebp-4] 4 +
jmp loc_104759B  +
mov ecx [ebp-24h] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-28h] 1 +
jmp loc_1020E06  +
push 8000FFFFh  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1020DF9  +
***
cmp [ecx] di +
jz loc_1026523  +
cmp [esi+184h] edi +
jnz loc_105C8E3  +
push 31FBh  +
mov ecx esi +
call sub_1030E23  +
push 80004005h  +
push dword ptr [esi+184h]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_105C932  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1026538  +
push ebx  +
mov ecx esi +
mov [esi+1DFh] bl +
call sub_100DD70  +
push 80070057h  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_102652B  +
mov ecx [ebp-14h] +
push 0  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov ecx esi +
call sub_100DA2C  +
mov ecx [esi+184h] +
push 0  +
push dword ptr [ebp+0Ch]  +
call sub_10C69B9  +
jmp loc_102652B  +
cmp [esi+184h] edi +
jz loc_102652B  +
lea ecx [ebp-48h] +
call sub_100AD56  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_10B0839  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_105CA0C  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-48h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call sub_100A77D  +
jmp loc_102653B  +
mov ecx [esi+184h] +
push edi  +
push dword ptr [ebp-44h]  +
call sub_10C69B9  +
push edi  +
push ebx  +
mov ecx esi +
call sub_102583F  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call sub_100A77D  +
jmp loc_102652B  +
***
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102719E  +
push 3430h  +
lea ecx [ebp-30h] +
call ds:?FromMMC@SC@mmcerror@@QAEAAV12@J@Z  +
jmp loc_1027191  +
push 8000FFFFh  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1027183  +
***
mov esi [ebp-18h] +
jmp loc_105CAA1  +
mov eax [ebp+8] +
push dword ptr [eax+4]  +
mov ecx [ebp-14h] +
lea eax [ebp-18h] +
push eax  +
call sub_107AFE5  +
mov esi [esi] +
cmp esi [ebp+0Ch] +
jnz loc_105CA8D  +
push 0  +
push 0  +
call _CxxThrowException  +
***
push offset dword_100C4B0  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1035F6B  +
***
mov ecx [ebp-30h] +
lea eax [ebp-40h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-48h] ebx +
jmp loc_10268FE  +
mov ecx [ebp-30h] +
lea eax [ebp-40h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-48h] 1 +
jmp loc_10268FE  +
lea ecx [ebp-40h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
lea ecx [ebp-5Ch] +
call sub_1090A35  +
jmp loc_1026861  +
mov eax [ebp-58h] +
mov bl 1 +
cmp eax [ebp-54h] +
jz loc_105CB9D  +
lea edi [eax+54h] +
lea eax [edi-38h] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_108E742  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 5 +
jnb loc_105CB38  +
lea eax [ebp-28h] +
mov ecx [esi+18Ch] +
push edi  +
push eax  +
call sub_10AF01C  +
lea eax [edi-54h] +
push eax  +
lea eax [ebp-78h] +
push eax  +
call sub_108E742  +
push eax  +
push edi  +
lea ecx [esi+330h] +
mov byte ptr [ebp-4] 6 +
call sub_1093B56  +
mov ecx eax +
call sub_1041CE8  +
push 0  +
push 1  +
lea ecx [ebp-78h] +
call sub_100CD3C  +
cmp byte ptr [edi+10h] 0 +
jz loc_105CB7E  +
xor bl bl +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call sub_100CD3C  +
add edi 68h +
lea eax [edi-54h] +
cmp eax [ebp-54h] +
jnz loc_105CB1B  +
test bl bl +
jz loc_105CBDC  +
lea ecx [ebp-24h] +
call sub_100AD56  +
push 3458h  +
mov byte ptr [ebp-4] 7 +
call ds:?GetStringModule@@YGPAUHINSTANCE__@@XZ  +
push eax  +
lea ecx [ebp-24h] +
call sub_10329CF  +
mov ecx [esi+18Ch] +
push offset dword_100CA88  +
push dword ptr [ebp-20h]  +
call sub_10AF01C  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call sub_100A77D  +
push dword ptr [ebp-4Ch]  +
mov ecx [esi+18Ch] +
call sub_10AEBB6  +
test eax eax +
jge loc_105CC19  +
push 80004005h  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
push offset aCamcviewScad_0  +
mov byte ptr [ebp-4] 8 +
call ds:?TraceError@@YGXPBGABVSC@mmcerror@@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [esi+18Ch] +
cmp dword ptr [eax+64h] 1 +
setnle cl  +
mov [eax+80h] cl +
jmp loc_102687E  +
cmp dword ptr [eax+34h] 8 +
jb loc_105CC3F  +
mov eax [eax+20h] +
jmp loc_10268A3  +
add eax 20h +
jmp loc_10268A3  +
lea ecx [ebp-40h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10268DB  +
***
mov ecx [ebp-14h] +
call sub_100ECBD  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
mov ecx [ebp-0B0h] +
lea eax [ebp-0C0h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-0C4h] 1 +
jmp loc_1025F30  +
mov ecx [ebp-0B0h] +
lea eax [ebp-0C0h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_105CCF9  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-0D8h] +
push eax  +
lea eax [ebp-0ACh] +
push eax  +
lea eax [ebp-24h] +
push eax  +
mov byte ptr [ebp-0CCh] 1 +
call sub_10B10B9  +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1025F08  +
mov edi [ebp-0C8h] +
mov eax [edi] +
lea ecx [ebp-0ACh] +
push ecx  +
push dword ptr [ebp-0D4h]  +
push edi  +
call dword ptr [eax+28h]  +
push eax  +
lea ecx [ebp-0C0h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_105CDC1  +
lea eax [ebp-0C0h] +
push eax  +
push offset aSnapinFailedOn  +
call ds:?TraceError@@YGXPBGABVSC@mmcerror@@@Z  +
lea ecx [ebp-0C0h] +
call ds:?Clear@SC@mmcerror@@QAEXXZ  +
lea ecx [ebp-0C0h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
test eax eax +
jz loc_105CE2E  +
lea ecx [ebp-17Ch] +
call sub_10230CC  +
push eax  +
lea ecx [ebp-0ACh] +
mov byte ptr [ebp-4] 6 +
call sub_1020B84  +
lea ecx [ebp-17Ch] +
mov byte ptr [ebp-4] 4 +
call sub_100F341  +
jmp loc_1025C1A  +
mov ecx [ebp-0B0h] +
lea eax [ebp-0C0h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-0C4h] 1 +
jmp loc_1025F21  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
mov edi [ebp-0C8h] +
mov eax [edi] +
lea ecx [ebp-34h] +
push ecx  +
push dword ptr [ebp-0D4h]  +
push edi  +
call dword ptr [eax+0ACh]  +
jmp loc_1025C81  +
mov [ebp-0E8h] edi +
mov dword ptr [ebp-0F8h] 0FFFFFFFCh +
jmp loc_1025D50  +
lea ecx [ebp-0C0h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1025E22  +
mov ecx [ebp-0B0h] +
push edi  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_1025F1B  +
mov ecx [ebp-0B0h] +
lea eax [ebp-0C0h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-0C8h] +
mov [ebp-0C4h] edi +
mov byte ptr [ebp-4] 4 +
test eax eax +
jz loc_1025F21  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1025F21  +
lea eax [ebp-24h] +
push eax  +
mov ecx ebx +
call sub_108B0FF  +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 10h +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0Eh +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CE7E  +
cmp dword ptr [ebx+2C8h] 0 +
jz loc_105CF27  +
lea ecx [ebp-0C8h] +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A0h]  +
push eax  +
lea ecx [ebp-0C0h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CE7E  +
mov eax [ebx+240h] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 11h +
call esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0Eh +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105CE7E  +
mov eax [ebx+1D0h] +
mov [ebp-0CCh] eax +
cmp eax 4 +
jnz loc_105CF87  +
test byte ptr [ebp-44h] 8 +
jnz loc_105CF87  +
mov [ebp-0CCh] edi +
lea ecx [ebx+240h] +
call sub_100A5CF  +
push dword ptr [ebp-0CCh]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov eax [ebx+0E0h] +
mov [ebp-0CCh] eax +
test eax eax +
jz loc_10565BE  +
lea ecx [ebx+240h] +
call sub_100A5CF  +
push dword ptr [ebp-0CCh]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+58h]  +
push eax  +
lea ecx [ebp-0C0h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10565BE  +
jmp loc_105CE7E  +
lea ecx [ebp-0C0h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1025EC8  +
***
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
jmp loc_103309E  +
xor al al +
retn   +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10325D7  +
lea ecx [eax+4] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_1032578  +
***
mov esi [ebp-14h] +
jmp loc_105D0BA  +
push esi  +
call sub_1029632  +
add esi 30h +
cmp esi [ebp+10h] +
jnz loc_105D0B1  +
push 0  +
push 0  +
call _CxxThrowException  +
push 80004005h  +
lea ecx [ebp-98h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-98h] +
mov [ebp-4] edi +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
jmp loc_1030DE9  +
***
push ebx  +
mov ecx esi +
call sub_1043DE7  +
jmp loc_1030B52  +
***
and dword ptr [esi+1F8h] 0FFFFFF7Fh +
jmp loc_1030B78  +
***
and dword ptr [esi+25Ch] 0FFFFFFFCh +
jmp loc_1030BB6  +
***
call sub_100F341  +
jmp loc_105D140  +
lea ecx [ebp-98h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1030DD7  +
***
push 80004005h  +
lea ecx [ebp-98h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-98h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
or eax 0FFFFFFFFh +
jmp loc_1030DE9  +
***
mov esi [ebp-14h] +
jmp loc_105D166  +
push esi  +
call sub_1029632  +
add esi 30h +
cmp esi [ebp+8] +
jnz loc_105D15D  +
push 0  +
push 0  +
call _CxxThrowException  +
***
push dword ptr [ebp+10h]  +
call sub_1029424  +
push dword ptr [ebp+10h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
***
push 0  +
push 0  +
call _CxxThrowException  +
***
mov eax [ebp+0Ch] +
mov ecx [ebp-14h] +
imul eax eax +
push ecx  +
mov ecx [ecx+8] +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
add eax ecx +
push eax  +
call sub_1029424  +
jmp loc_105D1B0  +
***
imul edi edi +
push ecx  +
mov ebx ecx +
push ecx  +
sub ebx edi +
push ebx  +
call sub_103D2C7  +
push dword ptr [ebp+10h]  +
mov [esi+8] eax +
push ebx  +
push dword ptr [ebp+8]  +
call sub_109460B  +
lea eax [ebp-44h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_10945E6  +
add esp 18h +
jmp loc_103D2AE  +
***
mov eax [ebp+arg_4] +
sub eax [edi+4] +
push 30h  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi eax +
jmp loc_103D1AC  +
***
push 1  +
push eax  +
call sub_103C311  +
mov [esi+8] eax +
jmp loc_103D189  +
***
push offset FileName  +
call ds:GetFileAttributesW  +
push offset aUnicows_dll  +
call ds:GetModuleHandleA  +
mov dword_10F981C eax +
jmp loc_103F255  +
push [ebp+lpProcName]  +
push eax  +
call esi  +
jmp loc_103F264  +
push dword ptr [eax+0Ch]  +
call dword ptr [eax+8]  +
jmp loc_103F286  +
***
mov ecx [ebp-18h] +
mov [ebp-1Ch] ecx +
test ecx ecx +
jz loc_105D316  +
call ?Delete@CException@@QAEXXZ  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_105D323 +
retn   +
mov esi [ebp-14h] +
jmp loc_100F65F  +
***
dec ecx  +
jnz loc_1023699  +
push 2  +
pop eax  +
jmp loc_1023699  +
***
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
pop ebp  +
retn 8  +
***
pop ebp  +
retn 8  +
***
pop ebp  +
retn 14h  +
***
xor edi edi +
jmp sub_103F2FE  +
***
push offset OutputString  +
call ds:OutputDebugStringA  +
jmp loc_100B134  +
cmp eax 7Fh +
jz loc_105D3B7  +
cmp eax 7Eh +
jz loc_105D3B7  +
cmp eax 78h +
jnz loc_100B162  +
xor eax eax +
inc eax  +
mov dword_10F6C64 eax +
mov esi eax +
jmp loc_100B162  +
***
xor esi esi +
jmp sub_101D9AA  +
***
call ds:__imp_GetLastError  +
mov edi eax +
jmp loc_101D9C2  +
push edi  +
call ds:SetLastError  +
jmp locret_101D9D4  +
***
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call edi  +
cmp eax ebx +
jge loc_1054E37  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1054E77  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1054E77  +
push eax  +
push offset dword_106C080  +
push 22h  +
jmp loc_105D489  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1054E77  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1054E77  +
push eax  +
push offset dword_106C080  +
push 23h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1054E77  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1045E6D  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1045E6D  +
push eax  +
push offset dword_106C080  +
push 4Eh  +
jmp loc_105D52F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1045E6D  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1045E6D  +
push eax  +
push offset dword_106C080  +
push 4Fh  +
jmp loc_105D52F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1045E6D  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1045E6D  +
push eax  +
push offset dword_106C080  +
push 50h  +
jmp loc_105D52F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1045E6D  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1045E6D  +
push eax  +
push offset dword_106C080  +
push 51h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1045E6D  +
***
push eax  +
push offset dword_106C080  +
push 5Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1046A78  +
mov ecx ebx +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1046A78  +
***
cmp dword ptr [ebp+10h] 4 +
jz loc_1029FC4  +
jmp loc_102A040  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_102A040  +
cmp byte ptr [ecx+19h] 2 +
jb loc_102A040  +
push eax  +
push offset dword_106C080  +
push 62h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_102A040  +
mov ecx ebx +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_102A040  +
***
mov ecx esi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
jmp loc_1033584  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103358F  +
cmp byte ptr [eax+19h] 2 +
jb loc_103358F  +
call ds:__imp_GetLastError  +
push eax  +
mov eax lpDst +
push offset dword_106C080  +
push 7Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_103358F  +
***
xor eax eax +
jmp loc_1023EBA  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10461B8  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10461B8  +
push eax  +
push offset dword_106C080  +
push 87h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10461B8  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10461B8  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10461B8  +
push eax  +
push offset dword_106C080  +
push 88h  +
jmp loc_105D62B  +
***
xor edi edi +
jmp sub_1041DA9  +
***
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_1041DC5  +
push ebx  +
call ds:SetLastError  +
jmp locret_1041DD6  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10458D1  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10458D1  +
push eax  +
push offset dword_106C080  +
push 43h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10458D1  +
cmp dword_10F55CC 3 +
mov dword ptr [ebp+0Ch] 8 +
jz loc_104582F  +
mov eax [ebp-10h] +
mov ecx [eax+8Ch] +
call sub_10873DD  +
test eax eax +
jz loc_104582F  +
mov dword ptr [ebp+0Ch] 0Ah +
jmp loc_104582F  +
mov dword ptr [ebp+0Ch] 0Bh +
jmp loc_1045819  +
or dword ptr [ebp+0Ch] 4 +
jmp loc_104582F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10458D1  +
cmp byte ptr [ecx+19h] 5 +
jb loc_10458D1  +
push eax  +
push offset dword_106C080  +
push 44h  +
jmp loc_105D6A8  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_104550C  +
cmp byte ptr [ecx+19h] 5 +
jb loc_104550C  +
push eax  +
push offset dword_106C080  +
push 60h  +
jmp loc_105D776  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_104550C  +
cmp byte ptr [ecx+19h] 2 +
jb loc_104550C  +
push eax  +
push offset dword_106C080  +
push 61h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_104550C  +
mov ecx edi +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_104552D  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1045797  +
cmp byte ptr [ecx+19h] 5 +
jb loc_1045797  +
push eax  +
push offset dword_106C080  +
push 42h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1045797  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1046467  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1046467  +
push eax  +
push offset dword_106C080  +
push 5Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1046467  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1046467  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1046467  +
push eax  +
push offset dword_106C080  +
push 5Dh  +
jmp loc_105D7EB  +
mov eax [ebp-14h] +
mov ecx [eax+8Ch] +
call sub_10873DD  +
jmp loc_104647F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1046467  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1046467  +
push eax  +
push offset dword_106C080  +
push 5Eh  +
jmp loc_105D7EB  +
lea ecx [ebp-48h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_104645A  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1046070  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1046070  +
push eax  +
push offset dword_106C080  +
push 4Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1046070  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1046070  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1046070  +
push eax  +
push offset dword_106C080  +
push 4Bh  +
jmp loc_105D88C  +
mov ecx [ebp+8] +
call edi  +
test eax eax +
jge loc_1046019  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1046019  +
cmp byte ptr [ecx+19h] 5 +
jb loc_1046019  +
mov edx [esi+4] +
push eax  +
push edx  +
push offset dword_106C080  +
push 4Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
jmp loc_1046019  +
push esi  +
push dword ptr [ebp+14h]  +
lea eax [ebp-24h] +
push eax  +
mov ecx ebx +
call sub_1096143  +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1046070  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1046070  +
cmp byte ptr [eax+19h] 2 +
jb loc_1046070  +
push offset dword_106C080  +
push 4Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1046070  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10260F9  +
cmp byte ptr [eax+19h] 3 +
jb loc_10260F9  +
push offset dword_106C080  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10260F9  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10260F9  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10260F9  +
push eax  +
push offset dword_106C080  +
push 1Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10260F9  +
lea eax [ebp-28h] +
jmp loc_102606A  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10260EA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10260EA  +
push eax  +
push offset dword_106C080  +
push 1Fh  +
jmp loc_105DA0C  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10260EA  +
cmp byte ptr [ecx+19h] 3 +
jb loc_10260EA  +
push eax  +
push offset dword_106C080  +
push 20h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10260EA  +
mov ecx edi +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_102611A  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1045313  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1045313  +
push eax  +
push offset dword_106C080  +
push 45h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1045313  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1045313  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1045313  +
push eax  +
push offset dword_106C080  +
push 46h  +
jmp loc_105DA4D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10452EC  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10452EC  +
push eax  +
push offset dword_106C080  +
push 47h  +
jmp loc_105DAF3  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10452EC  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10452EC  +
push eax  +
push offset dword_106C080  +
push 48h  +
jmp loc_105DAF3  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10452EC  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10452EC  +
push eax  +
push offset dword_106C080  +
push 49h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10452EC  +
mov ecx ebx +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1045313  +
***
cmp byte ptr [edi+0Ch] 0 +
jnz loc_105DB23  +
mov ecx [edi+8] +
test ecx ecx +
jz loc_105DB23  +
push esi  +
call sub_101B028  +
mov edi [edi] +
cmp edi [esi+8] +
jz loc_101B833  +
jmp loc_105DB10  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_103297C  +
cmp byte ptr [ecx+19h] 2 +
jb loc_103297C  +
push eax  +
push offset dword_106C080  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_103297C  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_103297C  +
cmp byte ptr [ecx+19h] 2 +
jb loc_103297C  +
push eax  +
push offset dword_106C080  +
push 0Bh  +
jmp loc_105DB54  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_103297C  +
cmp byte ptr [ecx+19h] 2 +
jb loc_103297C  +
push eax  +
push offset dword_106C080  +
push 0Ch  +
jmp loc_105DB54  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_103297C  +
cmp byte ptr [ecx+19h] 2 +
jb loc_103297C  +
push eax  +
push offset dword_106C080  +
push 0Dh  +
jmp loc_105DB54  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_103297C  +
cmp byte ptr [ecx+19h] 2 +
jb loc_103297C  +
push eax  +
push offset dword_106C080  +
push 0Eh  +
jmp loc_105DB54  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_103297C  +
cmp byte ptr [ecx+19h] 2 +
jb loc_103297C  +
push eax  +
push offset dword_106C080  +
push 0Fh  +
jmp loc_105DB54  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103297C  +
cmp byte ptr [eax+19h] 2 +
jb loc_103297C  +
push offset dword_106C080  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_103297C  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_103297C  +
cmp byte ptr [ecx+19h] 2 +
jb loc_103297C  +
push eax  +
push offset dword_106C080  +
push 11h  +
jmp loc_105DB54  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1031C35  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1031C35  +
push eax  +
push offset dword_106C080  +
push 12h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1031C35  +
push 8000FFFFh  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call edi  +
test eax eax +
jge loc_1031B81  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1031C35  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1031C35  +
push eax  +
push offset dword_106C080  +
push 13h  +
jmp loc_105DCA9  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1031C35  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1031C35  +
push eax  +
push offset dword_106C080  +
push 14h  +
jmp loc_105DCA9  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1031C35  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1031C35  +
push eax  +
push offset dword_106C080  +
push 15h  +
jmp loc_105DCA9  +
***
push esi  +
lea ecx [ebp-268h] +
call ??0CWindowDC@@QAE@PAVCWnd@@@Z  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-23Ch] +
mov eax 1F8h +
push ecx  +
push eax  +
push 29h  +
mov [ebp-4] ebx +
mov [ebp-23Ch] eax +
call ds:SystemParametersInfoW  +
mov edi offset off_10083D0 +
mov [ebp-248h] ebx +
mov [ebp-24Ch] edi +
lea eax [ebp-224h] +
push eax  +
lea ecx [ebp-24Ch] +
mov byte ptr [ebp-4] 1 +
call sub_10305F1  +
lea eax [ebp-24Ch] +
push eax  +
lea ecx [ebp-268h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
lea ecx [ebp-244h] +
mov [ebp-254h] eax +
call ??0CString@@QAE@XZ  +
lea eax [ebp-244h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call ?GetWindowTextW@CWnd@@QBEXAAVCString@@@Z  +
sub esp 1Ch +
mov ecx esp +
mov [ebp-240h] esp +
push dword ptr [ebp-244h]  +
call sub_101D1AD  +
push dword ptr [ebp-264h]  +
lea ecx [ebp-44h] +
call sub_1023B35  +
lea ecx [ebp-2B0h] +
mov byte ptr [ebp-4] 3 +
call sub_1041C45  +
lea eax [ebp-44h] +
push eax  +
lea ecx [ebp-2B0h] +
mov byte ptr [ebp-4] 4 +
call sub_10238E0  +
test al al +
jz loc_105DF8E  +
lea ecx [ebp-44h] +
call sub_10236A2  +
test al al +
jnz loc_105DF8E  +
lea eax [ebp-23Ch] +
push eax  +
lea ebx [ebp-278h] +
lea eax [ebp-288h] +
mov ecx esi +
call sub_1097C7C  +
mov eax ebx +
push eax  +
lea ecx [ebp-268h] +
call ?IntersectClipRect@CDC@@QAEHPBUtagRECT@@@Z  +
mov eax [ebp-264h] +
mov [ebp-240h] eax +
xor eax eax +
cmp [ebp+0Ch] al +
mov esi ds:GetSysColor +
setz al  +
inc eax  +
inc eax  +
mov [ebp-250h] eax +
xor eax eax +
cmp [ebp+0Ch] al +
setz al  +
add eax 1Bh +
push eax  +
call esi  +
push dword ptr [ebp-250h]  +
mov ebx eax +
call esi  +
push dword ptr [ebp-240h]  +
mov ecx eax +
mov eax ebx +
lea ebx [ebp-288h] +
call sub_1097D99  +
test al al +
jnz loc_105DEC6  +
push dword ptr [ebp-250h]  +
call esi  +
push eax  +
lea eax [ebp-278h] +
push eax  +
lea ecx [ebp-268h] +
call ?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z  +
xor eax eax +
xor ebx ebx +
cmp [ebp+0Ch] bl +
setz al  +
dec eax  +
and eax 0FFFFFFF6h +
add eax 13h +
push eax  +
call esi  +
push eax  +
lea ecx [ebp-268h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
push 1  +
lea ecx [ebp-268h] +
mov esi eax +
call ?SetBkMode@CDC@@QAEHH@Z  +
push ebx  +
mov [ebp-240h] eax +
push 8824h  +
lea eax [ebp-278h] +
push eax  +
lea ecx [ebp-44h] +
call sub_10AC219  +
push esi  +
lea ecx [ebp-268h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
push dword ptr [ebp-240h]  +
lea ecx [ebp-268h] +
call ?SetBkMode@CDC@@QAEHH@Z  +
push dword ptr [ebp-254h]  +
lea ecx [ebp-268h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
lea ecx [ebp-2B0h] +
mov byte ptr [ebp-4] 3 +
call sub_10160F3  +
lea ecx [ebp-44h] +
call sub_1023CCB  +
lea ecx [ebp-244h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-24Ch] +
mov [ebp-4] bl +
mov [ebp-24Ch] edi +
call sub_100F62A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-268h] +
call ??1CWindowDC@@UAE@XZ  +
mov al 1 +
jmp loc_1019765  +
push dword ptr [ebp-254h]  +
lea ecx [ebp-268h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
lea ecx [ebp-2B0h] +
mov byte ptr [ebp-4] 3 +
call sub_10160F3  +
lea ecx [ebp-44h] +
call sub_1023CCB  +
lea ecx [ebp-244h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-24Ch] +
mov [ebp-4] bl +
mov [ebp-24Ch] edi +
call sub_100F62A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-268h] +
call ??1CWindowDC@@UAE@XZ  +
jmp loc_1019763  +
***
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_105E001  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx eax +
cmp ecx ebx +
jge loc_101C4DF  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101C4F2  +
cmp byte ptr [eax+19h] 2 +
jb loc_101C4F2  +
push ecx  +
push dword ptr [ebp+arg_4]  +
push offset dword_105E074  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
jmp loc_101C4F2  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105E067  +
cmp byte ptr [eax+19h] 2 +
jb loc_105E067  +
push dword ptr [ebp+arg_4]  +
push offset dword_105E074  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
push esi  +
call ds:DeleteObject  +
jmp loc_101C4F2  +
***
xor edi edi +
jmp sub_101C619  +
***
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_101C636  +
push ebx  +
call ds:SetLastError  +
jmp locret_101C647  +
***
xor edi edi +
jmp sub_1041C11  +
***
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_1041C2E  +
push ebx  +
call ds:SetLastError  +
jmp locret_1041C3F  +
***
xor edx edx +
jmp loc_101CC35  +
***
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1036836  +
mov edi eax +
jmp loc_101CC16  +
***
xor eax eax +
inc eax  +
jmp loc_1034960  +
***
xor eax eax +
pop esi  +
retn   +
***
mov eax [eax+8] +
jmp loc_10218FC  +
***
mov esi [esi] +
jmp loc_101C3CA  +
***
xor eax eax +
retn   +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10558DE  +
***
mov al 1 +
jmp locret_1056F75  +
***
xor eax eax +
inc eax  +
jmp loc_101C445  +
***
xor al al +
pop ebp  +
retn 4  +
***
xor eax eax +
jmp loc_1054C0D  +
***
mov eax 80004005h +
jmp loc_102154C  +
push eax  +
push 0FFFFFFF0h  +
push ebx  +
call ds:SetWindowLongW  +
mov ecx [edi+4Ch] +
call sub_100E4E1  +
xor esi [ebp+arg_4] +
mov edx 8000h +
test esi edx +
jz loc_1021549  +
xor ecx ecx +
cmp eax ecx +
jz loc_1021549  +
push ecx  +
test [ebp+arg_4] edx +
jz loc_105E17E  +
push ecx  +
push 2  +
jmp loc_105E181  +
push 2  +
push ecx  +
mov ecx eax +
call ?ModifyStyle@CWnd@@QAEHKKI@Z  +
jmp loc_1021549  +
***
push 4  +
pop eax  +
jmp loc_1023079  +
***
cmp [ebp+arg_4] 4 +
jle loc_1033803  +
mov eax 80070057h +
jmp loc_103386B  +
inc ebx  +
mov [ebp+arg_4] ebx +
jmp loc_103383C  +
mov ecx [ebp+arg_0] +
push edi  +
push edi  +
push 3  +
call ?ModifyStyle@CWnd@@QAEHKKI@Z  +
jmp loc_1033846  +
cmp eax edi +
jz loc_1033868  +
push edi  +
mov ecx eax +
cmp ebx edi +
jz loc_105E1DA  +
push 100h  +
push edi  +
jmp loc_105E1E0  +
push edi  +
push 100h  +
call ?ModifyStyle@CWnd@@QAEHKKI@Z  +
mov ecx [ebp+arg_0] +
mov [esi+194h] ebx +
push edi  +
mov esi 4000h +
push esi  +
push edi  +
call ?ModifyStyle@CWnd@@QAEHKKI@Z  +
mov ecx [ebp+arg_0] +
push edi  +
push edi  +
push esi  +
call ?ModifyStyle@CWnd@@QAEHKKI@Z  +
jmp loc_1033868  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10551CD  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_105673B  +
mov ecx [esi] +
test ecx ecx +
jz loc_105E23B  +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+4]  +
and dword ptr [esi] 0 +
jmp loc_105672E  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1054762  +
***
push eax  +
call sub_100F30B  +
pop ecx  +
mov [esi] ebx +
jmp loc_101C663  +
***
push esi  +
push [ebp+arg_8]  +
call sub_100D227  +
add [ebp+arg_8] 8 +
add esi 8 +
jmp loc_1023B1F  +
***
xor edi edi +
jmp sub_101DCA9  +
***
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_101DCC6  +
push ebx  +
call ds:SetLastError  +
jmp locret_101DCD7  +
***
mov esi ds:GetSysColor +
push 8  +
call esi  +
push 5  +
mov [ebp-80h] eax +
call esi  +
push edi  +
lea ecx [ebp-94h] +
mov [ebp-78h] eax +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
xor ebx ebx +
lea ecx [ebp-94h] +
mov [ebp-4] ebx +
call ?SaveDC@CDC@@UAEHXZ  +
mov [ebp-7Ch] eax +
lea eax [ebp-0A4h] +
push eax  +
push dword ptr [edi+20h]  +
call ds:GetClientRect  +
mov ecx edi +
call sub_100E4E1  +
mov esi eax +
cmp esi ebx +
jz loc_105E318  +
mov ecx edi +
call ?GetStyle@CWnd@@QBEKXZ  +
and al 3 +
cmp al 1 +
jnz loc_105E318  +
lea eax [ebp-0B4h] +
push eax  +
push ebx  +
mov ecx esi +
call sub_10984E7  +
mov eax [ebp-0A8h] +
add [ebp-0A0h] eax +
add dword ptr [ebp-0A0h] 0Ah +
mov esi offset off_10083D0 +
mov [ebp-70h] ebx +
mov [ebp-74h] esi +
push ebx  +
lea eax [ebp-6Ch] +
push eax  +
push 5Ch  +
push 1Fh  +
mov byte ptr [ebp-4] 1 +
call ds:SystemParametersInfoW  +
lea eax [ebp-6Ch] +
push eax  +
lea ecx [ebp-74h] +
call sub_10305F1  +
lea eax [ebp-74h] +
push eax  +
lea ecx [ebp-94h] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
push dword ptr [ebp-80h]  +
lea ecx [ebp-94h] +
call ?SetTextColor@CDC@@UAEKK@Z  +
push dword ptr [ebp-78h]  +
lea ecx [ebp-94h] +
call ?SetBkColor@CDC@@UAEKK@Z  +
push dword ptr [ebp-78h]  +
lea ecx [ebp-0ACh] +
call ??0CBrush@@QAE@K@Z  +
push eax  +
lea eax [ebp-0A4h] +
push eax  +
lea ecx [ebp-94h] +
call sub_102353C  +
lea ecx [ebp-0ACh] +
mov dword ptr [ebp-0ACh] offset off_10089D0 +
call sub_100F62A  +
mov edi [edi+8Ch] +
push 911h  +
lea eax [ebp-0A4h] +
push eax  +
push 0FFFFFFFFh  +
push edi  +
push dword ptr [ebp-90h]  +
call ds:DrawTextW  +
push dword ptr [ebp-7Ch]  +
lea ecx [ebp-94h] +
call ?RestoreDC@CDC@@UAEHH@Z  +
lea ecx [ebp-74h] +
mov [ebp-4] bl +
mov [ebp-74h] esi +
call sub_100F62A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-94h] +
call ??1CClientDC@@UAE@XZ  +
jmp loc_1056ECD  +
***
push 1  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
jmp loc_101C40F  +
***
mov esi 80004005h +
jmp loc_1056F0B  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_105E43E  +
cmp byte ptr [ecx+19h] 2 +
jb loc_105E43E  +
push eax  +
push offset dword_106C090  +
push 1Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-24h] edi +
call sub_100F62A  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
mov [ebp-2Ch] edi +
call sub_100F62A  +
lea ecx [esi+98h] +
call ?DeleteImageList@CImageList@@QAEHXZ  +
lea ecx [esi+0A0h] +
call ?DeleteImageList@CImageList@@QAEHXZ  +
lea ecx [ebp-3Ch] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E4A3  +
lea ecx [ebp-3Ch] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
lea ecx [ebp-3Ch] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_105E4A3  +
push 80004005h  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-1Ch] 1 +
jmp loc_101CB41  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_105E43E  +
cmp byte ptr [ecx+19h] 2 +
jb loc_105E43E  +
push eax  +
push offset dword_106C090  +
push 1Fh  +
jmp loc_105E433  +
***
test eax eax +
jnz loc_105E4F5  +
mov [ebp+var_4] 80070057h +
jmp loc_105546C  +
cmp byte ptr [ebp+arg_C+3] 0 +
push [ebp+arg_8]  +
lea ecx [esi+0A0h] +
push [ebp+arg_0]  +
jnz loc_105E50D  +
lea ecx [esi+98h] +
call sub_109BFBB  +
cmp eax [ebp+arg_0] +
jnz loc_1055476  +
jmp loc_105546C  +
mov edi [ebp+arg_0] +
push edi  +
call sub_109BFBB  +
cmp eax 0FFFFFFFFh +
jz loc_1055476  +
cmp eax edi +
jnz loc_105E579  +
push [ebp+arg_8]  +
lea ecx [esi+0A0h] +
push edi  +
call sub_109BFBB  +
cmp eax edi +
jnz loc_105E579  +
jmp loc_105546C  +
push ebx  +
push dword ptr [esi+9Ch]  +
call sub_109B669  +
jmp loc_1055476  +
push ebx  +
push dword ptr [esi+9Ch]  +
call sub_109B669  +
push [ebp+arg_8]  +
push dword ptr [esi+0A4h]  +
call sub_109B669  +
mov [ebp+var_4] 8000FFFFh +
jmp loc_105546C  +
***
push 80070057h  +
jmp loc_105E643  +
lea ecx [ebp+var_30] +
jmp loc_105E64E  +
lea ecx [ebp+var_30] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
jmp loc_105E64C  +
dec ecx  +
or ecx 0FFFFFFF0h +
inc ecx  +
jmp loc_101C7A4  +
dec ecx  +
or ecx 0FFFFFFE0h +
inc ecx  +
jmp loc_101C7B9  +
mov eax [ebp+var_4] +
test eax eax +
jle loc_101C951  +
mov [ebp+arg_8] eax +
push ebx  +
push dword ptr [edi+9Ch]  +
call sub_109B669  +
dec [ebp+arg_8]  +
jz loc_101C951  +
jmp loc_105E5C7  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_18] +
mov edi eax +
mov [ebp+var_18] esi +
call sub_100F62A  +
lea ecx [ebp+var_20] +
mov [ebp+var_20] esi +
call sub_100F62A  +
mov esi edi +
jmp loc_105E656  +
mov eax [ebp+var_4] +
test eax eax +
jle loc_105E62B  +
mov [ebp+arg_8] eax +
push ebx  +
push dword ptr [edi+9Ch]  +
call sub_109B669  +
push [ebp+arg_C]  +
push dword ptr [edi+0A4h]  +
call sub_109B669  +
dec [ebp+arg_8]  +
jnz loc_105E60C  +
push 8000FFFFh  +
lea ecx [ebp+var_30] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_105E5DE  +
lea eax [ebp+var_8] +
jmp loc_101C8CA  +
lea ecx [ebp+var_30] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
lea ecx [ebp+var_30] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
jmp loc_101C94A  +
***
lea ecx [ebp+var_10] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_101CDF1  +
***
mov ebx [esi+54h] +
jmp loc_103112B  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+60h]  +
xor esi esi +
jmp loc_10311B8  +
***
mov [ebp+arg_8] 80004005h +
jmp loc_10569D9  +
push dword ptr [esi+4Ch]  +
lea ecx [ebp+var_24] +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
mov ecx [esi+4Ch] +
call sub_1097F9B  +
push eax  +
lea ecx [ebp+var_24] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_105E6B7  +
sub eax edx +
sar eax 1 +
push eax  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_24] +
call sub_1034D8B  +
mov ecx [eax] +
mov eax [eax+4] +
add ecx 19h +
mov [ebp+var_48] ecx +
lea ecx [ebp+var_24] +
mov [ebp+var_4] eax +
call ??1CClientDC@@UAE@XZ  +
jmp loc_105693D  +
and eax 0FFFF0000h +
or eax 10000h +
jmp loc_105698A  +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
jmp loc_10569DC  +
***
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
jmp loc_101CF3F  +
***
mov ecx ebx +
call sub_1054B04  +
test eax eax +
jz loc_105E743  +
mov [esi+8Ch] edi +
jmp loc_101CCAC  +
push 80004005h  +
lea ecx [ebp+var_14] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_101CCAC  +
push edi  +
mov ecx ebx +
call sub_1022FA8  +
mov edi [esi+8Ch] +
dec edi  +
js loc_105E7D2  +
push edi  +
mov ecx esi +
call sub_1054BEB  +
mov ebx eax +
test ebx ebx +
jz loc_105E7CC  +
mov eax [ebp+arg_4] +
cmp [ebx+0Ch] eax +
jnz loc_105E7CC  +
mov ecx [ebp+var_4] +
push edi  +
call sub_109837B  +
test eax eax +
jz loc_105E7BE  +
dec dword ptr [esi+8Ch]  +
push ebx  +
lea eax [ebp+var_24] +
push eax  +
mov ecx esi +
call sub_10546DD  +
push eax  +
lea ecx [ebp+var_14] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_105E7CC  +
jmp loc_105E7CF  +
push 80004005h  +
lea ecx [ebp+var_14] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
dec edi  +
jns loc_105E767  +
mov ebx [ebp+var_4] +
push 1  +
mov ecx ebx +
call sub_1022FA8  +
push 1  +
push 0  +
push dword ptr [ebx+20h]  +
call ds:InvalidateRect  +
jmp loc_101CCAC  +
***
cmp eax 80004002h +
jz loc_10183B1  +
push eax  +
call sub_10C7F1B  +
jmp loc_10183B1  +
***
lea ecx [esi+0A0h] +
call ?UnsubclassWindow@CWnd@@QAEPAUHWND__@@XZ  +
jmp loc_101B941  +
***
push eax  +
mov eax [esi+4Ch] +
push dword ptr [eax+20h]  +
call ds:SetParent  +
lea eax [esi+5Ch] +
cmp dword ptr [eax] 0 +
jz loc_105E835  +
push eax  +
mov eax [esi+4Ch] +
push dword ptr [eax+20h]  +
call ds:SetWindowPlacement  +
and dword ptr [esi+58h] 0 +
jmp loc_101A782  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101A79F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101A7B1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101A7C3  +
***
push offset aListTTooLong  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1076041  +
push offset dword_10E8AC0  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
***
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1076041  +
push offset dword_10E8AC0  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_1056C24  +
***
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_105E8C2  +
or [ebp-38h] ebx +
movsx eax word ptr [ebp-60h] +
jmp loc_1056BEB  +
***
push offset dword_106C090  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1055C07  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_1055CB9  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_1055CB9  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1055C9F  +
jmp loc_105E914  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call sub_109C13D  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 9 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 6 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_1055B90  +
***
push 8000FFFFh  +
lea ecx [ebp+var_20] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
jmp loc_1055FCE  +
push 80070057h  +
jmp loc_105E971  +
lea ecx [ebp+var_20] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1055E62  +
mov eax [ebp+wParam] +
mov [ebp+var_8] eax +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [esi+0A8h] +
mov [ebp+var_4] ebx +
call sub_101C37D  +
test eax eax +
jz loc_1055E7F  +
mov eax [ebp+arg_0] +
mov [ebp+var_40] eax +
jmp loc_1055E85  +
mov eax [esi+8Ch] +
sub eax [esi+90h] +
add [ebp+var_58] eax +
jmp loc_1055F2B  +
mov eax [ebp+arg_4] +
xor ecx ecx +
cmp [eax+0D0h] ecx +
jnz loc_105EA02  +
mov eax [esi+8Ch] +
cmp [esi+0D0h] ecx +
jnz loc_105E9FA  +
sub eax [esi+90h] +
mov [ebp+var_58] eax +
jmp loc_1055F2B  +
mov eax [ebp+arg_18] +
mov [ebp+var_58] eax +
cmp [esi+0D0h] ecx +
jz loc_1055F2B  +
mov ecx [esi+90h] +
add ecx eax +
mov [ebp+var_58] ecx +
jmp loc_1055F2B  +
push 80004005h  +
lea ecx [ebp+var_20] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push dword ptr [ebx]  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call sub_10546DD  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
and dword ptr [ebx] 0 +
jmp loc_1055F92  +
cmp [ebp+arg_10] 0FFFFFFFEh +
jz loc_1055F92  +
test byte ptr [ebp+arg_10] bl +
jz loc_1055F92  +
mov ecx [esi+4Ch] +
push 0  +
push [ebp+wParam]  +
call sub_10983BE  +
jmp loc_1055F92  +
***
lea ecx [ebp+var_10] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10550B4  +
***
lea ecx [ebp+0Fh] +
call sub_102BBF1  +
mov ecx [esi+4Ch] +
lea eax [esi+0D0h] +
push eax  +
push offset loc_109D7AA  +
call sub_10984AD  +
and dword ptr [edi] 0 +
lea ecx [esi+1A8h] +
call sub_1018278  +
lea ecx [ebp+0Fh] +
call sub_1020056  +
jmp loc_10559B7  +
lea ecx [ebp-10h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10550BD  +
***
lea ecx [ebp-1Ch] +
mov [ebp-4] edi +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
jmp loc_1031315  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_105EAC8  +
cmp byte ptr [ecx+19h] 2 +
jb loc_105EAC8  +
push eax  +
push offset dword_106C090  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_105EAC8  +
***
mov ebx edi +
jmp loc_1031307  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1031D8D  +
***
mov [ebp+arg_0] 4 +
jmp loc_102AA45  +
***
mov eax [ecx] +
push 1  +
call dword ptr [eax+1Ch]  +
jmp loc_10338BF  +
***
cmp byte ptr [esi+233h] 0 +
jz loc_1011741  +
cmp edi 1 +
setz al  +
mov ecx esi +
mov [esi+231h] al +
push eax  +
call sub_10A494E  +
jmp loc_1011741  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1011251  +
cmp byte ptr [eax+19h] 2 +
jb loc_1011251  +
push offset dword_106C6B0  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1011251  +
***
mov [ebp-50h] edi +
jmp loc_1030786  +
***
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+0ACh]  +
jmp loc_1030843  +
***
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+0ACh]  +
jmp loc_1030826  +
***
push dword ptr [ebp+18h]  +
call ds:BringWindowToTop  +
test dword ptr [ebp-44h] 20000000h +
jz loc_105EBC8  +
push 2  +
jmp loc_105EBD7  +
test dword ptr [ebp-44h] offset __ImageBase +
jz loc_105EBD5  +
push 3  +
jmp loc_105EBD7  +
push 1  +
mov ecx ebx +
call ?ShowWindow@CWnd@@QAEHH@Z  +
push ebx  +
mov ecx esi +
call sub_10A49B3  +
push 0  +
push 0  +
push 234h  +
push dword ptr [esi+0C0h]  +
call edi  +
jmp loc_1030839  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101BA74  +
***
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105EC39  +
cmp byte ptr [eax+19h] 2 +
jb loc_105EC39  +
push offset dword_106C6B0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
or eax 0FFFFFFFFh +
jmp loc_1030A02  +
***
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_105EC39  +
***
or esi 0FFFFFFFFh +
jmp loc_10309F3  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1018C7E  +
***
push offset off_100A418  +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
neg eax  +
sbb al al +
inc al  +
mov [ebp+10h] al +
jmp loc_1019B58  +
***
push 8000FFFFh  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1019B9D  +
***
push offset off_100A418  +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
neg eax  +
sbb al al +
inc al  +
mov [ebp+10h] al +
jmp loc_10518CA  +
***
push edi  +
call ds:IsWindow  +
test eax eax +
jz loc_1006E38  +
push edi  +
push [ebp+wParam]  +
push esi  +
push edi  +
call ds:SendMessageW  +
jmp loc_1006E46  +
***
mov [esi+70h] eax +
jmp loc_1034D65  +
***
or eax 0FFFFFFFFh +
jmp loc_100E04D  +
***
push [ebp+arg_4]  +
lea ecx [ebp+var_40] +
push ebx  +
call ?DoUpdate@CCmdUI@@QAEHPAVCCmdTarget@@H@Z  +
jmp loc_100A28D  +
***
or eax eax +
jmp loc_1040A35  +
***
mov ecx [ebp-4] +
or dword ptr [ebp-60h] 1 +
lea eax [ebp-68h] +
push eax  +
push esi  +
call sub_100DFAE  +
jmp loc_100BD62  +
***
and eax 0FFFDFFFBh +
jmp loc_100A374  +
***
xor eax eax +
inc eax  +
jmp loc_1009C71  +
call sub_10A512F  +
cmp byte ptr [esi+64h] 0 +
jz loc_1009C6F  +
push edi  +
push dword ptr [esi+20h]  +
mov ecx eax +
call sub_1009B50  +
test al al +
jz loc_1009C6F  +
jmp loc_105ED37  +
***
call ??4CString@@QAEABV0@ABV0@@Z  +
xor edi edi +
jmp sub_10302D9  +
***
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_10302F5  +
push ebx  +
call ds:SetLastError  +
jmp locret_1030306  +
***
mov edi [ebp+arg_4] +
push 4  +
pop ecx  +
mov esi eax +
xor ebx ebx +
cmps   +
jz loc_105EDC8  +
mov esi [ebp+arg_4] +
add eax 10h +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
mov edx [ebp+arg_8] +
add [ebp+arg_4] 10h +
cmp [ebp+arg_4] edx +
jnz loc_105EDAB  +
lea ecx [eax+10h] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_10383A5  +
***
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp-4] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10A5857  +
mov eax [eax] +
mov ecx [ebp+0Ch] +
add esp 10h +
mov [esi+8] eax +
jmp loc_1037890  +
***
lea eax [esi+10h] +
push eax  +
push esi  +
push edi  +
jmp loc_105EE24  +
mov ebx edi +
sub edi 10h +
push edi  +
push esi  +
call sub_1038A5D  +
test al al +
jnz loc_105EE06  +
cmp ebx esi +
jz loc_1038A44  +
lea eax [esi+10h] +
push eax  +
push esi  +
push ebx  +
call sub_10A5D37  +
jmp loc_1038A44  +
***
push esi  +
push offset dword_106C6C0  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_1052283  +
***
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1053873  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10539C0  +
***
cmp edi 0FFFFFFFh +
jbe loc_105EE70  +
call loc_10B6E00  +
push eax  +
push edi  +
call sub_101118C  +
shl edi 4 +
add edi eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov al 1 +
jmp loc_1030384  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
***
mov esi [ebp+10h] +
push edi  +
test esi esi +
jle loc_105EFB5  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-8] +
push dword ptr [ebp+8]  +
push eax  +
call sub_10A67FB  +
mov edi [ebp-8] +
mov ebx [ebp-4] +
mov eax esi +
cdq   +
sub eax edx +
sar eax 1 +
mov esi eax +
cdq   +
sub eax edx +
sar eax 1 +
add esi eax +
mov eax [ebp+0Ch] +
mov ecx edi +
sub ecx [ebp+8] +
sub eax ebx +
and eax 0FFFFFFF0h +
and ecx 0FFFFFFF0h +
cmp ecx eax +
push esi  +
jge loc_105EF9B  +
push edi  +
push dword ptr [ebp+8]  +
call sub_10389D9  +
mov [ebp+8] ebx +
jmp loc_105EFA7  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call sub_10389D9  +
mov [ebp+0Ch] edi +
mov eax [ebp+0Ch] +
sub eax [ebp+8] +
sar eax 4 +
cmp eax 20h +
jg loc_105EF4F  +
cmp eax 20h +
pop edi  +
pop esi  +
pop ebx  +
jle loc_10389F2  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10A6B45  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10A6BBF  +
jmp locret_1038A02  +
***
cmp byte ptr [ebp-45h] 0 +
jnz loc_1046B6D  +
jmp loc_1046CB4  +
***
lea eax [ebp-88h] +
push eax  +
push 8820h  +
lea eax [ebp-60h] +
push eax  +
lea ecx [ebp-44h] +
call sub_10AC219  +
mov eax [ebp-88h] +
jmp loc_1046C76  +
***
mov eax [esi] +
add ebx 60h +
push ebx  +
mov ecx esi +
call dword ptr [eax+30h]  +
mov edi [ebp-64h] +
mov eax [edi] +
sub esp 1Ch +
mov ecx esp +
mov [ebp-64h] esp +
push eax  +
call sub_101D1AD  +
push dword ptr [ebp-68h]  +
lea ecx [ebp-44h] +
call sub_1023B35  +
lea eax [ebp-44h] +
push eax  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 2 +
call sub_10238E0  +
test al al +
jz loc_105F06F  +
lea ecx [ebp-44h] +
call sub_10236A2  +
test al al +
jnz loc_105F06F  +
push 0  +
push 8820h  +
lea eax [ebp-60h] +
push eax  +
lea ecx [ebp-44h] +
call sub_10AC219  +
jmp loc_105F080  +
push 8820h  +
lea eax [ebp-60h] +
push eax  +
push edi  +
mov ecx esi +
call sub_1046CC1  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 0 +
call sub_1023CCB  +
jmp loc_1046C95  +
***
push 1  +
push eax  +
call sub_103828B  +
mov [esi+8] eax +
jmp loc_1038602  +
***
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_103A133  +
***
push esi  +
push offset dword_106C6C0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_1039F96  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_105F0D8 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
jmp loc_1039ECD  +
***
lea ecx [esi+4] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor esi esi +
jmp loc_1039EED  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_103A08B  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_103A081  +
***
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_1038201  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105F160  +
cmp byte ptr [eax+19h] 4 +
jb loc_105F160  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
push eax  +
mov eax lpDst +
push offset dword_106C6C0  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10381F4  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105F1A0  +
cmp byte ptr [eax+19h] 5 +
jb loc_105F1A0  +
mov ecx [esi+74h] +
add ecx [ebp-14h] +
push ecx  +
push offset dword_106C6C0  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4DFB  +
lea ecx [ebp-28h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10381CD  +
***
or ebx eax +
jmp loc_1037FA9  +
***
lea ecx [ebp-1Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1037FA9  +
***
push 0  +
jmp loc_1031769  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
jmp loc_103176E  +
***
cmp eax 80004002h +
jz loc_1031727  +
push eax  +
call sub_10C7F1B  +
jmp loc_1031727  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101A50C  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_105F210 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
jmp loc_10317CF  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
xor esi esi +
jmp loc_10317EF  +
***
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1031975  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10316EF  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10316E5  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10315D2  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp+0Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test eax eax +
jz loc_10315D5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10315D5  +
***
push 80070057h  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_1031471  +
***
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_105F2AE  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1031471  +
***
pop esi  +
jmp sub_1011496  +
***
movzx edx al +
and edx 1 +
mov [ecx+40h] edx +
xor edx edx +
test al al +
setnz dl  +
push edx  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
jmp loc_102F402  +
***
lea ecx [esi+8] +
call ??1CString@@QAE@XZ  +
test [ebp+arg_0] 1 +
jz loc_105F311  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
jmp loc_101BC24  +
***
or eax eax +
jmp loc_103F454  +
***
mov eax [edi] +
lea ecx [ebp+arg_0] +
push ecx  +
push [ebp+lParam]  +
mov ecx edi +
push [ebp+wParam]  +
push esi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jnz loc_100A4D4  +
push eax  +
push offset off_10F7314  +
push offset off_10F72F8  +
push eax  +
push edi  +
call __RTDynamicCast  +
add esp 14h +
push [ebp+lParam]  +
push [ebp+wParam]  +
push esi  +
test eax eax +
jz loc_105F364  +
lea ecx [eax+44h] +
jmp loc_100A4CA  +
mov ecx edi +
call sub_100991D  +
jmp loc_100A4C8  +
***
mov [ecx] eax +
jmp loc_102F519  +
***
lea ecx [ebp-1Ch] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102BE9E  +
***
push 0  +
push esi  +
mov ecx edi +
call sub_101EA69  +
mov esi [esi+8] +
jmp loc_104AF89  +
***
xor edi edi +
jmp sub_102B2F1  +
***
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_102B30D  +
push ebx  +
call ds:SetLastError  +
jmp locret_102B31E  +
***
mov ebx [edi+8] +
and dword ptr [edi+8] 0 +
mov ecx edi +
call sub_1052EEC  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov edi ebx +
test ebx ebx +
jz loc_1052F15  +
jmp loc_105F424  +
mov ecx edi +
call sub_1052EEC  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1052F20  +
***
push ecx  +
push esi  +
push offset loc_100CFE8  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
jmp loc_100D080  +
***
mov eax [ecx+0Ch] +
sub eax edx +
sar eax 3 +
retn   +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101D368  +
lea eax [ebp+pUnknown] +
push eax  +
push offset stru_100BB94  +
push [ebp+pUnknown]  +
push [ebp+pUnkOuter]  +
push [ebp+rclsid]  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_101D38B  +
push [ebp+pUnknown]  +
call ds:OleRun  +
mov edi eax +
test edi edi +
jl loc_105F4C4  +
mov eax [ebp+pUnknown] +
mov ecx [eax] +
push esi  +
push offset stru_101D394  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
mov eax [ebp+pUnknown] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101D389  +
***
mov esi [eax+0Ch] +
lea ecx [ebp+14h] +
call sub_100A5CF  +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+24h]  +
lea ecx [ebp+0Ch] +
call sub_1015931  +
jmp loc_100D25D  +
***
push 0  +
jmp loc_101D418  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
jmp loc_101D41D  +
***
cmp eax 80004002h +
jz loc_101D3D9  +
push eax  +
call sub_10C7F1B  +
jmp loc_101D3D9  +
***
push dword ptr [edi+24h]  +
push edi  +
push ebx  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
jmp loc_100CFBE  +
push edi  +
push ebx  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_100CFD6  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
***
mov ebx [esi+8] +
mov ecx [ebp+8] +
mov eax ebx +
sub eax ecx +
sar eax 3 +
push esi  +
cmp eax edi +
jnb loc_105F5E9  +
mov eax edi +
shl eax 3 +
mov [ebp+10h] eax +
add eax ecx +
push eax  +
push ebx  +
push ecx  +
call sub_1023AE8  +
mov eax [esi+8] +
lea ecx [ebp-18h] +
push ecx  +
mov ecx eax +
sub ecx [ebp+8] +
mov dword ptr [ebp-4] 2 +
sar ecx 3 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_1023864  +
mov eax [ebp+10h] +
add [esi+8] eax +
mov esi [esi+8] +
lea ecx [ebp-18h] +
push ecx  +
sub esi eax +
push esi  +
push dword ptr [ebp+8]  +
call sub_10AC15D  +
add esp 0Ch +
jmp loc_1023ADB  +
push ebx  +
shl edi 3 +
mov [ebp+10h] ebx +
sub [ebp+10h] edi +
push ebx  +
push dword ptr [ebp+10h]  +
call sub_1023AE8  +
push ebx  +
push dword ptr [ebp+10h]  +
mov [esi+8] eax +
push dword ptr [ebp+8]  +
call sub_10AC186  +
lea eax [ebp-18h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_10AC15D  +
add esp 18h +
jmp loc_1023ADB  +
***
push 1  +
push eax  +
call sub_1023864  +
mov [esi+8] eax +
jmp loc_10239BB  +
***
xor al al +
jmp loc_102397F  +
mov ecx [ebx] +
lea edx [ebp+var_18] +
push edx  +
push dword ptr [esi+20h]  +
push eax  +
push dword ptr [esi]  +
push ebx  +
call dword ptr [ecx+20h]  +
test eax eax +
jl loc_105F679  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
add ecx 4 +
call sub_1024C9C  +
cmp [ebp+var_1C] 0 +
jnz loc_1023968  +
push [ebp+var_18]  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+24h]  +
jmp loc_1023968  +
lea ecx [esi+24h] +
call sub_10AC334  +
xor al al +
jmp loc_102397E  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-54h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
jmp loc_1023C6D  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105F6C1  +
cmp byte ptr [eax+19h] 5 +
jb loc_105F6C1  +
push edi  +
push offset loc_100CFE8  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
lea ecx [ebp-44h] +
call sub_1023CCB  +
jmp loc_105F688  +
push edi  +
push offset loc_100CFE8  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_1023C54  +
lea ecx [ebp-20h] +
call sub_1002565  +
cmp eax 1 +
jnz loc_105F706  +
mov eax [ebp-1Ch] +
push dword ptr [eax]  +
push dword ptr [esi+10h]  +
call ds:SelectObject  +
push 2  +
pop esi  +
jmp loc_1023C56  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1023C54  +
cmp byte ptr [eax+19h] 5 +
jb loc_1023C54  +
push edi  +
push offset loc_100CFE8  +
push 12h  +
jmp loc_105F6D3  +
***
xor eax eax +
jmp loc_100CF89  +
***
xor edi edi +
inc edi  +
jmp loc_1020C24  +
cmp edi ebx +
jnz loc_1020C4D  +
mov eax [esi+64h] +
mov edi ds:SendMessageW +
dec eax  +
push eax  +
push ebx  +
push 46Fh  +
push dword ptr [esi+8Ch]  +
call edi  +
push dword ptr [esi+90h]  +
push ebx  +
push 467h  +
push dword ptr [esi+8Ch]  +
call edi  +
push 5  +
push dword ptr [esi+8Ch]  +
call ds:ShowWindow  +
push 1  +
push ebx  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
jmp loc_1020C4D  +
push 1  +
push ebx  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
jmp loc_1020C47  +
***
xor ecx ecx +
jmp loc_1036310  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
xor edi edi +
jmp sub_1033AA1  +
***
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_1033ABD  +
push ebx  +
call ds:SetLastError  +
jmp locret_1033ACE  +
***
push edi  +
push [ebp+arg_0]  +
lea ecx [esi+8] +
call sub_10ACF29  +
mov esi [esi] +
lea edi [edi+eax-8] +
cmp esi [ebx+60h] +
jz loc_1020C72  +
jmp loc_105F7DE  +
***
push edi  +
call sub_10AE538  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov edi ebx +
cmp ebx [esi+4] +
jnz loc_105F83E  +
pop ebx  +
jmp loc_1018833  +
***
push edi  +
push 8001h  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call sub_10ACF90  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
dec edi  +
jmp loc_10265C6  +
push 0  +
push 8005h  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call sub_10ACF90  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10265DC  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101BC96  +
***
push 8000FFFFh  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1018166  +
cmp [ebp+0Ch] ebx +
setnz al  +
movzx eax al +
push eax  +
push 3452h  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10181E2  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-3Ch] +
jmp loc_101815D  +
***
xor ecx ecx +
jmp loc_10230AB  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
cmp byte ptr [esi+1Dh] 0 +
mov bl 1 +
jz loc_1018091  +
jmp loc_10180C8  +
cmp byte ptr [esi+1Ch] 0 +
jz loc_10180AE  +
jmp loc_10180CD  +
***
mov ecx [ebp+arg_0] +
mov [eax+8] ecx +
jmp loc_1032075  +
***
add eax 8 +
retn   +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_101BD34  +
***
push offset aListTTooLong  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1076041  +
push offset dword_10E8AC0  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
***
push esi  +
mov esi [eax] +
cmp esi ecx +
jz loc_105F9D5  +
push ebx  +
mov ebx [esi] +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105F9C0  +
cmp byte ptr [eax+19h] 5 +
jb loc_105F9C0  +
mov edx [esi+28h] +
lea ecx [esi+8] +
push ecx  +
push dword ptr [ecx]  +
xor ecx ecx +
cmp edx 1 +
setz cl  +
push ecx  +
xor ecx ecx +
cmp edx 2 +
setz cl  +
push ecx  +
xor ecx ecx +
test edx edx +
setz cl  +
push ecx  +
push dword ptr [esi+0Ch]  +
push offset dword_106CBF8  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CBF92  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [edi+4] +
call sub_1052B29  +
mov esi ebx +
cmp ebx [edi+8] +
jnz loc_105F974  +
pop ebx  +
pop esi  +
jmp loc_102662A  +
***
cmp dword ptr [esi+28h] 1 +
jz loc_105FA58  +
add eax 8 +
lea ebx [esi+8] +
push eax  +
mov ecx ebx +
call sub_10B0BC9  +
test al al +
jz loc_105FA58  +
cmp [edi] esi +
jnz loc_105F9FC  +
mov eax [ebp+var_4] +
mov [edi] eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105FA43  +
cmp byte ptr [eax+19h] 5 +
jb loc_105FA43  +
mov ecx [esi+28h] +
xor edx edx +
push ebx  +
push dword ptr [ebx]  +
cmp ecx 1 +
setz dl  +
push edx  +
xor edx edx +
cmp ecx 2 +
setz dl  +
push edx  +
xor edx edx +
test ecx ecx +
setz dl  +
push edx  +
push dword ptr [esi+0Ch]  +
push offset dword_106CBF8  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CBF92  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [edi+4] +
call sub_1052B29  +
mov esi [ebp+var_4] +
jmp loc_1018880  +
mov esi [esi] +
jmp loc_1018880  +
mov ecx [ebp+var_4] +
mov eax [ecx] +
dec ebx  +
mov [ebp+var_8] eax +
cmp ecx [edi] +
jz loc_101887B  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105FABD  +
cmp byte ptr [eax+19h] 5 +
jb loc_105FABD  +
mov edx [esi+28h] +
lea ecx [esi+8] +
push ecx  +
push dword ptr [ecx]  +
xor ecx ecx +
cmp edx 1 +
setz cl  +
push ecx  +
xor ecx ecx +
cmp edx 2 +
setz cl  +
push ecx  +
xor ecx ecx +
test edx edx +
setz cl  +
push ecx  +
push dword ptr [esi+0Ch]  +
push offset dword_106CBF8  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CBF92  +
mov ecx [ebp+var_4] +
push ecx  +
lea eax [ebp+var_C] +
push eax  +
lea ecx [edi+4] +
call sub_1052B29  +
mov eax [ebp+var_8] +
mov [ebp+var_4] eax +
test ebx ebx +
jle loc_101887B  +
jmp loc_105FA5F  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
push offset dword_106CBF8  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1025A84  +
***
mov edx [esi+28h] +
lea ecx [esi+8] +
push ecx  +
push dword ptr [ecx]  +
xor ecx ecx +
cmp edx 1 +
setz cl  +
push ecx  +
xor ecx ecx +
cmp edx 2 +
setz cl  +
push ecx  +
xor ecx ecx +
test edx edx +
setz cl  +
push ecx  +
push dword ptr [esi+0Ch]  +
push offset dword_106CBF8  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CBF92  +
jmp loc_1052B13  +
***
lea ecx [ebp-90h] +
call sub_10230CC  +
mov eax [ebp+10h] +
push edi  +
lea ecx [ebp-90h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-0A8h] eax +
call sub_1020B84  +
mov esi [ebp-164h] +
lea edi [ebp-0A0h] +
movs   +
movs   +
movs   +
movs   +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_105FBE8  +
cmp byte ptr [eax+19h] 5 +
jb loc_105FBE8  +
lea ecx [ebp-0A8h] +
push ecx  +
push dword ptr [ebp-0A8h]  +
xor ecx ecx +
cmp dword ptr [ebp-88h] 1 +
setz cl  +
push ecx  +
xor ecx ecx +
cmp dword ptr [ebp-88h] 2 +
setz cl  +
push ecx  +
xor ecx ecx +
cmp [ebp-88h] ecx +
setz cl  +
push ecx  +
push dword ptr [ebp-0A4h]  +
push offset dword_106CBF8  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CBF92  +
mov ecx ebx +
call sub_1018077  +
mov ecx [ebp-148h] +
lea eax [ebp-15Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-90h] +
jmp loc_1026B76  +
mov ecx [ebx] +
mov byte ptr [ebp-142h] 1 +
cmp [ecx+28h] esi +
jnz loc_1026A50  +
jmp loc_1026A57  +
cmp byte ptr [ebp-142h] 0 +
mov byte ptr [ebp-143h] 1 +
jnz loc_1026A5F  +
jmp loc_1026A66  +
test eax eax +
jnz loc_1026A94  +
cmp [ebp-143h] al +
jnz loc_1020F21  +
jmp loc_1026A94  +
mov eax [ebp-16Ch] +
test eax eax +
jz loc_1026B1B  +
mov ecx [ebx] +
mov eax [eax+94h] +
mov [ecx+98h] eax +
jmp loc_1026B1B  +
mov esi [ebx] +
mov edi [esi+28h] +
lea ecx [esi+8] +
push ecx  +
push dword ptr [ecx]  +
xor ecx ecx +
cmp edi 1 +
setz cl  +
push ecx  +
xor ecx ecx +
cmp edi 2 +
setz cl  +
push ecx  +
xor ecx ecx +
test edi edi +
setz cl  +
push ecx  +
push dword ptr [esi+0Ch]  +
push offset dword_106CBF8  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CBF92  +
mov esi [ebp-168h] +
jmp loc_1026B31  +
cmp byte ptr [ebp-141h] 0 +
jz loc_105FD36  +
lea eax [ebp-180h] +
push eax  +
mov ecx ebx +
call sub_10B08F2  +
push eax  +
lea ecx [ebp-15Ch] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-180h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-15Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1026B5D  +
cmp dword ptr [esi+24h] 8 +
jb loc_105FD13  +
mov esi [esi+10h] +
jmp loc_105FD16  +
add esi 10h +
push esi  +
lea ecx [ebx+24h] +
call sub_101D0E4  +
mov eax [ebx] +
mov byte ptr [ebx+21h] 1 +
mov ecx dword_10FD664 +
mov [eax+98h] ecx +
jmp loc_1026B4F  +
cmp dword ptr [esi+24h] 8 +
jb loc_105FD41  +
mov esi [esi+10h] +
jmp loc_105FD44  +
add esi 10h +
mov ecx [ebx+18h] +
push 0  +
push esi  +
call sub_10C69B9  +
jmp loc_1026B4F  +
lea eax [ebp-180h] +
push eax  +
mov ecx ebx +
call sub_10B08F2  +
push eax  +
lea ecx [ebp-15Ch] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-180h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-15Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1026B5D  +
mov eax [ebp-16Ch] +
test eax eax +
jz loc_1026B4F  +
mov ecx dword_10FD664 +
mov [eax+94h] ecx +
jmp loc_1026B4F  +
***
xor ecx ecx +
jmp loc_1023748  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
mov ecx [ebp+arg_0] +
push 80004003h  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push [ebp+arg_0]  +
push offset aCidletaskqueue  +
call ds:?TraceError@@YGXPBGABVSC@mmcerror@@@Z  +
jmp loc_100A065  +
***
add [ebp+arg_4] 8 +
jmp loc_1029D08  +
***
push [ebp+arg_8]  +
push ecx  +
push ecx  +
mov ecx esp +
mov [ebp+var_4] esp +
push [ebp+arg_4]  +
call sub_1043E22  +
push 0  +
push esi  +
push [ebp+arg_0]  +
call sub_10B1525  +
jmp loc_1043EE3  +
***
push esi  +
push [ebp+arg_8]  +
call sub_1043E05  +
add [ebp+arg_8] 8 +
add esi 8 +
jmp loc_1043D9B  +
***
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B1638  +
jmp loc_102AB5E  +
***
cmp edi 1FFFFFFFh +
jbe loc_105FE98  +
call loc_10B6E00  +
push eax  +
push edi  +
call sub_1023725  +
mov [esi+4] eax +
mov [esi+8] eax +
lea eax [eax+edi*8] +
mov [esi+0Ch] eax +
mov al 1 +
jmp loc_100A6C4  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
***
mov ebx [esi+8] +
mov ecx [ebp+8] +
mov eax ebx +
sub eax ecx +
sar eax 3 +
push esi  +
cmp eax edi +
jnb loc_105FF51  +
mov eax edi +
shl eax 3 +
mov [ebp+10h] eax +
add eax ecx +
push eax  +
push ebx  +
push ecx  +
call sub_1043D64  +
mov eax [esi+8] +
lea ecx [ebp-18h] +
push ecx  +
mov ecx eax +
sub ecx [ebp+8] +
mov dword ptr [ebp-4] 2 +
sar ecx 3 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_1043B8D  +
mov eax [ebp+10h] +
add [esi+8] eax +
mov esi [esi+8] +
lea ecx [ebp-18h] +
push ecx  +
sub esi eax +
push esi  +
push dword ptr [ebp+8]  +
call sub_10B147F  +
add esp 0Ch +
jmp loc_1043D57  +
push ebx  +
shl edi 3 +
mov [ebp+10h] ebx +
sub [ebp+10h] edi +
push ebx  +
push dword ptr [ebp+10h]  +
call sub_1043D64  +
push ebx  +
push dword ptr [ebp+10h]  +
mov [esi+8] eax +
push dword ptr [ebp+8]  +
call sub_10B14F9  +
lea eax [ebp-18h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_10B147F  +
add esp 18h +
jmp loc_1043D57  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
jmp loc_102AC83  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_102AC6E  +
***
mov eax [esi+4] +
mov edi [eax] +
call sub_102ACE9  +
test edi edi +
jz loc_1050691  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax]  +
jmp loc_1050691  +
***
push 1  +
push eax  +
call sub_1043B8D  +
mov [esi+8] eax +
jmp loc_1043C3A  +
***
push 80004003h  +
jmp loc_105FFF6  +
add esi 8 +
jmp loc_10259DA  +
push 80070057h  +
mov ecx [ebp+8] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push dword ptr [ebp+8]  +
push offset aCidletaskque_0  +
call ds:?TraceError@@YGXPBGABVSC@mmcerror@@@Z  +
jmp loc_1025A55  +
***
xor ecx ecx +
jmp loc_1022A8E  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
push offset aInvalidMapSetT  +
lea ecx [ebp+var_2C] +
call sub_10760DD  +
and [ebp+var_4] 0 +
lea eax [ebp+var_2C] +
push eax  +
lea ecx [ebp+var_54] +
call sub_1075FC8  +
push offset dword_10EA2DC  +
lea eax [ebp+var_54] +
push eax  +
mov [ebp+var_54] offset off_106BEE4 +
call _CxxThrowException  +
mov [ebx+4] esi +
jmp loc_105437B  +
***
mov [ecx] eax +
jmp loc_10520EB  +
mov byte ptr [eax+14h] 1 +
push esi  +
mov byte ptr [esi+14h] 0 +
call sub_100E50B  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
jmp loc_1052167  +
mov byte ptr [eax+14h] 1 +
push esi  +
mov byte ptr [esi+14h] 0 +
call sub_101C465  +
mov eax [esi] +
mov ecx [ebp-10h] +
jmp loc_1052130  +
mov edx [eax+8] +
mov byte ptr [edx+14h] 1 +
push eax  +
mov byte ptr [eax+14h] 0 +
call sub_100E50B  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+14h] +
mov [eax+14h] dl +
mov byte ptr [esi+14h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+14h] 1 +
call sub_101C465  +
jmp loc_10521AF  +
***
cmp [edi] esi +
jz loc_10514E8  +
push 0Eh  +
lea eax [ebp+String1] +
push eax  +
push esi  +
call ds:GetWindowTextW  +
test eax eax +
jz loc_106013D  +
push offset aOlechannelwnd  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrcmpW  +
test eax eax +
jz loc_10514E8  +
mov [edi] esi +
xor eax eax +
jmp loc_10514EB  +
***
push 1  +
push 0  +
push dword ptr [ecx+20h]  +
mov byte ptr [ecx+0C6h] 1 +
call ds:InvalidateRect  +
jmp locret_1052E45  +
***
push edi  +
push offset dword_106CC38  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_101BD9B  +
***
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_1037922  +
lea eax [ebp-8] +
push eax  +
push 3A98h  +
push 2  +
push 0  +
push 0  +
push ebx  +
push dword ptr [esi+160h]  +
call edi  +
and dword ptr [esi+160h] 0 +
jmp loc_1037922  +
***
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_1037930  +
lea eax [ebp-8] +
push eax  +
push 3A98h  +
push 2  +
push 0  +
push 0  +
push ebx  +
push dword ptr [esi+15Ch]  +
call edi  +
jmp loc_1037930  +
***
lea eax [ebp-4] +
push eax  +
mov ecx edi +
call sub_102B490  +
jmp loc_106022D  +
lea eax [ebp-4] +
push eax  +
mov ecx edi +
call sub_102B4EB  +
mov esi eax +
test esi esi +
jz loc_106022D  +
push dword ptr [esi+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_106022D  +
mov ecx esi +
call sub_10834F5  +
mov ecx esi +
call sub_10878F7  +
cmp dword ptr [ebp-4] 0 +
jz loc_103793E  +
jmp loc_1060201  +
***
pop esi  +
retn   +
***
mov ecx eax +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+0C8h]  +
mov ecx edi +
call sub_100FA40  +
jmp loc_1029DD0  +
***
push 0  +
push offset off_10F6DC0  +
push offset off_10F7228  +
push 0  +
push 0  +
call ?MDIGetActive@CMDIFrameWnd@@QBEPAVCMDIChildWnd@@PAH@Z  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
push dword ptr [ebp+0Ch]  +
push esi  +
test eax eax +
jz loc_106029B  +
mov ecx eax +
call sub_10A4A65  +
jmp loc_104F78E  +
***
mov ecx ebx +
jmp loc_104F789  +
***
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10291ED  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_102082B  +
cmp byte ptr [eax+19h] 2 +
jb loc_102082B  +
push offset dword_106CC38  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_102082B  +
***
mov ecx [eax] +
mov edx [ebp+arg_C] +
mov [edx] ecx +
add [ebp+arg_C] 4 +
add eax 4 +
jmp loc_102955B  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
jmp loc_1040C5E  +
xor esi esi +
jmp loc_1040C4F  +
***
mov ecx [ebp+arg_0] +
lea eax [ebp+var_34] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10240E1  +
cmp [ebp+arg_8] ebx +
jz loc_1060348  +
push 8000FFFFh  +
lea ecx [ebp+var_34] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10240D7  +
mov [ebp+var_44] ebx +
mov [ebp+var_38] ebx +
mov [ebp+var_3C] ebx +
mov [ebp+var_40] ebx +
lea ecx [ebp+var_44] +
push ecx  +
push eax  +
push ebx  +
mov ecx esi +
mov byte ptr [ebp+var_4] 3 +
call loc_1024149  +
mov ecx esi +
call sub_104AE6A  +
cmp [ebp+var_40] ebx +
mov [ebp+arg_4] eax +
mov [ebp+arg_8] ebx +
jle loc_1060451  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
mov edi 80070057h +
mov eax [ebp+var_44] +
mov ecx [ebp+arg_8] +
mov eax [eax+ecx*4] +
push edi  +
push eax  +
mov [ebp+var_14] eax +
lea eax [ebp+var_54] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_34] +
mov byte ptr [ebp+var_4] 4 +
call esi  +
lea ecx [ebp+var_54] +
mov byte ptr [ebp+var_4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_34] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10603CC  +
lea ecx [ebp+var_34] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_106043F  +
mov ecx [ebp+var_14] +
call sub_101D08C  +
push edi  +
push eax  +
mov [ebp+var_1C] eax +
lea eax [ebp+var_64] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_34] +
mov byte ptr [ebp+var_4] 5 +
call esi  +
lea ecx [ebp+var_64] +
mov byte ptr [ebp+var_4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_34] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10603C1  +
mov ecx [ebp+var_14] +
call sub_100EC0C  +
test al al +
jz loc_1060415  +
dec [ebp+arg_4]  +
cmp [ebp+arg_4] ebx +
jnz loc_1060428  +
mov ecx [ebp+var_18] +
add ecx 0FFFFFF3Ch +
call sub_10B1EA5  +
mov eax [ebp+var_1C] +
push ebx  +
push 0F060h  +
push 112h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
inc [ebp+arg_8]  +
mov eax [ebp+arg_8] +
cmp eax [ebp+var_40] +
jl loc_1060386  +
xor edi edi +
inc edi  +
mov byte ptr [ebp+var_4] 2 +
cmp [ebp+var_44] ebx +
jz loc_10240D4  +
push [ebp+var_44]  +
call sub_100F30B  +
pop ecx  +
jmp loc_10240D4  +
***
cmp dword ptr [ebp+8] 1 +
setz cl  +
mov [eax] cl +
push ecx  +
mov ecx esi +
call sub_10B28E9  +
jmp loc_10197B6  +
***
lea ecx [ebp-1Ch] +
mov [ebp-4] edi +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
jmp loc_102FD7D  +
***
mov ebx edi +
jmp loc_102FD6F  +
***
push 1  +
push eax  +
call sub_103A153  +
mov [esi+8] eax +
jmp loc_10387B7  +
***
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp-18h]  +
mov [ebp-24h] ebx +
call ds:GetWindowThreadProcessId  +
call ds:GetCurrentProcessId  +
cmp [ebp-24h] eax +
jnz loc_106052F  +
push dword ptr [ebp-18h]  +
call sub_1077E0B  +
mov esi eax +
mov eax [esi+74h] +
push eax  +
mov [ebp-28h] eax +
call ds:IsWindow  +
test eax eax +
jz loc_106052F  +
mov eax [esi+74h] +
mov [ebp-14h] eax +
lea eax [ebp-14h] +
push eax  +
push offset fn  +
push ebx  +
push dword ptr [esi+74h]  +
call ds:GetWindowThreadProcessId  +
push eax  +
call ds:EnumThreadWindows  +
push dword ptr [ebp-14h]  +
call ds:IsWindow  +
test eax eax +
jz loc_1060523  +
mov eax [ebp-28h] +
cmp [ebp-14h] eax +
jz loc_1060523  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-38h] +
call sub_1038786  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-38h] +
call sub_1038786  +
push ebx  +
push offset aMmcdatawindow  +
push dword ptr [ebp-18h]  +
jmp loc_105120A  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1051238  +
cmp byte ptr [ecx+19h] 3 +
jb loc_1051238  +
push eax  +
push offset dword_106CC38  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1051238  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-38h] +
call sub_1038786  +
jmp loc_1051268  +
mov ecx [ebp-30h] +
mov eax ecx +
sub eax [ebp-34h] +
sar eax 2 +
cmp eax ebx +
jz loc_105128C  +
mov esi [ecx-4] +
sub dword ptr [ebp-30h] 4 +
push esi  +
mov [ebp+0Ch] esi +
call ds:SetActiveWindow  +
push esi  +
call ds:SetForegroundWindow  +
push esi  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_10605CC  +
push ebx  +
push esi  +
call ds:EnableWindow  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-48h] +
call sub_1038786  +
mov [ebp-28h] esi +
jmp loc_1051283  +
cmp [ebp+8] ebx +
jz loc_1051295  +
lea ecx [ebp+0Ch] +
call ??0CString@@QAE@XZ  +
push 80h  +
lea eax [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_101220E  +
mov esi eax +
neg esi  +
sbb esi esi +
and esi [ebp+0Ch] +
call sub_10067E8  +
mov edi eax +
cmp edi ebx +
jz loc_106062A  +
mov ecx edi +
call ?IsWindowEnabled@CWnd@@QBEHXZ  +
test eax eax +
jz loc_106062A  +
push ebx  +
mov ecx edi +
call ?EnableWindow@CWnd@@QAEHH@Z  +
add edi 20h +
push edi  +
lea ecx [ebp-48h] +
call sub_1038786  +
mov eax [ebp+8] +
mov eax [eax] +
push 10h  +
push esi  +
push eax  +
push dword ptr [ebp-28h]  +
call ds:MessageBoxW  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
jmp loc_1051295  +
mov [ebp+0Ch] esi +
sar dword ptr [ebp+0Ch] 2 +
cmp [ebp+0Ch] ebx +
jz loc_10512A5  +
push 1  +
push dword ptr [edi+esi-4]  +
call ds:EnableWindow  +
cmp [ebp+0Ch] ebx +
jz loc_105129D  +
sub dword ptr [ebp-40h] 4 +
sub esi 4 +
jmp loc_105129D  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10606A2  +
cmp byte ptr [eax+19h] 2 +
jb loc_10606A2  +
push offset dword_106CC38  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push offset dword_106C0A0  +
lea ecx [ebp-10h] +
call ??4CString@@QAEABV0@PBD@Z  +
jmp loc_10513E6  +
***
push offset dword_106CC38  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1051345  +
***
mov eax offset loc_103837A +
retn   +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1053C76  +
push 1  +
call sub_10B4A19  +
jmp loc_1053C85  +
***
push esi  +
lea esi [ecx+0C0h] +
push dword ptr [esi]  +
call ds:DestroyIcon  +
and dword ptr [esi] 0 +
mov byte ptr [edi] 0 +
pop esi  +
jmp loc_1053CD7  +
***
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
jmp loc_103A227  +
***
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_10C82EA  +
add esp 14h +
pop esi  +
retn   +
mov [esi] eax +
jmp loc_101594F  +
***
inc ecx  +
inc ecx  +
jmp loc_100FD60  +
xor bl bl +
jmp loc_100FD60  +
mov [eax] ecx +
jmp loc_100FD58  +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1019C8E  +
***
test dword ptr [edi+0Ch] 40000000h +
jnz loc_1009C0D  +
push 0  +
push 30002h  +
push 127h  +
push dword ptr [esi+20h]  +
call ebx  +
jmp loc_1009C0D  +
xor eax eax +
inc eax  +
jmp loc_1009C34  +
call sub_100ABA9  +
test eax eax +
jz loc_1009C32  +
mov ecx eax +
call sub_1028EA4  +
test al al +
jz loc_1009C32  +
cmp byte ptr [esi+64h] 0 +
jz loc_10607BA  +
call sub_10B5F6F  +
push edi  +
push dword ptr [esi+20h]  +
mov ecx eax +
call sub_1009B50  +
test al al +
jnz loc_1060769  +
push edi  +
push dword ptr [esi+20h]  +
lea ecx [esi+0ACh] +
call sub_1009B50  +
test al al +
jnz loc_1060769  +
cmp dword ptr [esi+0A8h] 0 +
jz loc_10607D6  +
push edi  +
push dword ptr [esi+20h]  +
lea ecx [esi+0A4h] +
call sub_1009B50  +
test al al +
jnz loc_1060769  +
cmp byte ptr [esi+0C5h] 0 +
jz loc_1009C32  +
cmp dword ptr [edi+4] 106h +
jnz loc_1009C32  +
cmp dword ptr [edi+8] 2Dh +
jnz loc_1009C32  +
push 0  +
push 5404h  +
push 111h  +
push dword ptr [esi+20h]  +
call ebx  +
jmp loc_1060769  +
***
lea eax [ebp-210h] +
jmp loc_1037AE4  +
***
push 80070057h  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1028546  +
***
xor ecx ecx +
jmp loc_102A205  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
push esi  +
push edi  +
mov edi [ebp+arg_C] +
mov esi eax +
movs   +
movs   +
add [ebp+arg_C] 6 +
add eax 6 +
cmp eax [ebp+arg_8] +
jnz loc_1060850  +
pop edi  +
pop esi  +
jmp loc_101BE26  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10234F3  +
cmp byte ptr [eax+19h] 2 +
jb loc_10234F3  +
push offset dword_106CE90  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10234F3  +
***
push 0  +
mov esi [ebp-14h] +
jmp loc_1060A69  +
push esi  +
call sub_1019C5F  +
add esi 4 +
cmp esi [ebp+10h] +
jnz loc_1060A60  +
push 0  +
push 0  +
call _CxxThrowException  +
mov esi [ebp-14h] +
jmp loc_1060A85  +
push esi  +
call sub_1019C5F  +
add esi 4 +
cmp esi [ebp+8] +
jnz loc_1060A7C  +
push 0  +
push 0  +
call _CxxThrowException  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
***
mov ecx [ebx+8] +
mov eax ecx +
sub eax [ebp+8] +
push 6  +
cdq   +
pop edi  +
idiv  edi +
mov [ebp+10h] ecx +
push ebx  +
cmp eax esi +
jnb loc_1060B1B  +
mov eax [ebp+8] +
mov edi esi +
imul edi edi +
lea edx [edi+eax] +
push edx  +
push ecx  +
push eax  +
call sub_102A3E0  +
mov eax [ebx+8] +
sub eax [ebp+8] +
lea ecx [ebp-18h] +
push ecx  +
push 6  +
pop ecx  +
cdq   +
idiv  ecx +
mov ecx ebx +
mov dword ptr [ebp-4] 2 +
sub esi eax +
push esi  +
push dword ptr [ebx+8]  +
call sub_1019118  +
add [ebx+8] edi +
mov ebx [ebx+8] +
lea eax [ebp-18h] +
push eax  +
sub ebx edi +
push ebx  +
push dword ptr [ebp+8]  +
call sub_10B5ED7  +
add esp 0Ch +
jmp loc_102A513  +
imul esi esi +
push ecx  +
mov edi ecx +
push ecx  +
sub edi esi +
push edi  +
call sub_102A3E0  +
push dword ptr [ebp+10h]  +
mov [ebx+8] eax +
push edi  +
push dword ptr [ebp+8]  +
call sub_10B64D0  +
lea eax [ebp-18h] +
push eax  +
mov eax [ebp+8] +
add esi eax +
push esi  +
push eax  +
call sub_10B5ED7  +
add esp 18h +
jmp loc_102A513  +
***
mov eax [eax] +
jmp loc_1019525  +
lea ecx [ebp+arg_4] +
call sub_10C248D  +
mov ecx [ebp+arg_4] +
jmp loc_1019536  +
***
cmp edi 2AAAAAAAh +
jbe loc_1060B75  +
call loc_10B6E00  +
push eax  +
push edi  +
call sub_102A1E2  +
imul edi edi +
add edi eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov al 1 +
jmp loc_104034B  +
***
cmp edi 3FFFFFFFh +
jbe loc_1060B9E  +
call loc_10B6E00  +
push eax  +
push edi  +
call sub_1021804  +
mov [esi+4] eax +
mov [esi+8] eax +
lea eax [eax+edi*4] +
mov [esi+0Ch] eax +
mov al 1 +
jmp loc_103F4B1  +
***
call loc_10B6E00  +
and [ebp+arg_8] 0 +
jmp loc_10386AD  +
mov eax [esi+8] +
mov ecx [ebp+arg_0] +
mov edx eax +
sub edx ecx +
sar edx 2 +
mov [ebp+arg_8] eax +
push esi  +
cmp edx edi +
jnb loc_1060C22  +
mov ebx edi +
shl ebx 2 +
lea edx [ebx+ecx] +
push edx  +
push eax  +
push ecx  +
call sub_103871E  +
mov eax [esi+8] +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx eax +
sub ecx [ebp+arg_0] +
sar ecx 2 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_103A153  +
add [esi+8] ebx +
mov esi [esi+8] +
lea eax [ebp+var_4] +
push eax  +
sub esi ebx +
push esi  +
push [ebp+arg_0]  +
call sub_10AA168  +
add esp 0Ch +
jmp loc_1038712  +
push eax  +
mov ebx eax +
shl edi 2 +
push eax  +
sub ebx edi +
push ebx  +
call sub_103871E  +
push [ebp+arg_8]  +
mov [esi+8] eax +
push ebx  +
push [ebp+arg_0]  +
call sub_10AAB38  +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_0] +
add edi eax +
push edi  +
push eax  +
call sub_10AA168  +
add esp 18h +
jmp loc_1038712  +
***
push dword ptr [ebp-18h]  +
call sub_1019A7A  +
push dword ptr [ebp-18h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
***
push 0  +
push 0  +
call _CxxThrowException  +
***
mov ecx [ebp-1Ch] +
mov [ebp+0Ch] ebx +
sub [ebp+0Ch] edi +
push ebx  +
push dword ptr [ebp+0Ch]  +
call sub_102A520  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov [esi+8] eax +
push dword ptr [ebp+8]  +
call sub_10B64A4  +
lea eax [ebp-14h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_10B5E84  +
add esp 18h +
jmp loc_102A759  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_103A359  +
***
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
jmp loc_103005A  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CString@@QAE@XZ  +
jmp loc_101015E  +
***
push 80070057h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10320D8  +
***
xor eax eax +
inc eax  +
jmp loc_102B3B6  +
***
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10281D6  +
push 80004005h  +
jmp loc_1060D9A  +
lea edi [eax+8] +
push dword ptr [edi-8]  +
mov ecx esi +
call sub_10B8033  +
test al al +
jz loc_1060E02  +
push dword ptr [edi+38h]  +
mov ecx [esi+28h] +
call sub_1027B60  +
test eax eax +
jz loc_1060E02  +
mov eax [ebp-14h] +
mov eax [eax+64h] +
shr eax 2 +
test al bl +
jz loc_1060DE5  +
test [edi+3Ch] bl +
jz loc_1060DE5  +
xor ecx ecx +
jmp loc_1060DE7  +
mov ecx ebx +
cmp dword ptr [edi+14h] 8 +
jb loc_1060DF1  +
mov eax [edi] +
jmp loc_1060DF3  +
mov eax edi +
push 0FFFFFFFFh  +
push ecx  +
mov ecx [esi+28h] +
push eax  +
call sub_10B7799  +
mov [edi+38h] eax +
mov eax [esi+14h] +
add edi 48h +
lea ecx [edi-8] +
cmp ecx eax +
jz loc_10281D3  +
jmp loc_1060DB2  +
push 8000FFFFh  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10281E0  +
***
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_1075FC8  +
push offset dword_10EA2DC  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_106BEE4 +
call _CxxThrowException  +
mov eax [edi+8] +
cmp byte ptr [eax+11h] 0 +
jz loc_1060E74  +
mov ebx edx +
jmp loc_1019220  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jz loc_1019220  +
jmp loc_1060EAC  +
mov [eax+4] ebx +
jmp loc_1019246  +
cmp byte ptr [ebx+11h] 0 +
jz loc_1060E98  +
mov eax esi +
jmp loc_1060EA1  +
push ebx  +
call sub_10B5E02  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_1019266  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_1060EBC  +
mov esi eax +
jmp loc_1060ED5  +
cmp byte ptr [ebx+11h] 0 +
mov esi [eax+4] +
jnz loc_1060EC8  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_1060EE5  +
mov [ecx+4] eax +
jmp loc_1060EF3  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_1060EF0  +
mov [ecx] eax +
jmp loc_1060EF3  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+10h] +
mov dl [edi+10h] +
mov [eax+10h] dl +
mov [edi+10h] cl +
mov ecx [ebp-10h] +
jmp loc_1019266  +
mov edx [eax] +
mov byte ptr [edx+10h] 1 +
push eax  +
mov byte ptr [eax+10h] 0 +
call sub_1084C39  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
jmp loc_10192C0  +
cmp byte ptr [eax+10h] 0 +
jnz loc_1060F41  +
mov byte ptr [eax+10h] 1 +
push esi  +
mov byte ptr [esi+10h] 0 +
call sub_1084C39  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+11h] 0 +
jnz loc_10192AC  +
mov edx [eax+8] +
cmp byte ptr [edx+10h] 1 +
jnz loc_1060F60  +
mov edx [eax] +
cmp byte ptr [edx+10h] 1 +
jz loc_10192A8  +
mov edx [eax] +
cmp byte ptr [edx+10h] 1 +
jnz loc_1060F7E  +
mov edx [eax+8] +
mov byte ptr [edx+10h] 1 +
push eax  +
mov byte ptr [eax+10h] 0 +
call sub_1019199  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+10h] +
mov [eax+10h] dl +
mov byte ptr [esi+10h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+10h] 1 +
call sub_1084C39  +
jmp loc_10192D7  +
***
cmp edi 38E38E3h +
jbe loc_1060FA6  +
call loc_10B6E00  +
push eax  +
push edi  +
call sub_10B796B  +
imul edi edi +
add edi eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov al 1 +
jmp loc_1033B4F  +
***
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10B85F7  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_101BEBE  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_106102A  +
cmp byte ptr [eax+19h] 3 +
jb loc_106102A  +
push offset dword_1061040  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_1061037 +
retn   +
mov esi [ebp-14h] +
jmp loc_101BE8F  +
***
push 0  +
jmp loc_104F305  +
push 0  +
mov ecx ebx +
call sub_1010F11  +
mov esi 80004002h +
jmp loc_104F30A  +
***
cmp eax 80004002h +
jz loc_104F2C2  +
push eax  +
call sub_10C7F1B  +
jmp loc_104F2C2  +
***
mov eax [ebp+arg_18] +
test eax eax +
jnz loc_10610B6  +
push 80070057h  +
lea ecx [ebp+var_20] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
jmp loc_10500C6  +
push 0Bh  +
pop ecx  +
mov [eax] cx +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
add eax 8 +
push eax  +
push ecx  +
call dword ptr [edx+5Ch]  +
push eax  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10610A8  +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_1061087  +
push 0Bh  +
pop ecx  +
mov [eax] cx +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
add eax 8 +
push eax  +
push ecx  +
call dword ptr [edx+60h]  +
jmp loc_10610C9  +
***
lea ecx [ebp+var_24] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
jmp loc_104F238  +
lea ecx [ebp+var_14] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_104F238  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104F238  +
push 8000FFFFh  +
lea ecx [ebp+var_34] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp+var_14] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_34] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1061101  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_105060C  +
lea ecx [ebp-24h] +
call ds:?Clear@SC@mmcerror@@QAEXXZ  +
jmp loc_10505DD  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1037B62  +
***
push 0  +
push 0  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
int 3  +
mov eax 80004003h +
jmp loc_10490C0  +
***
xor edi edi +
jmp sub_1048E09  +
***
xor edi edi +
xor edi edi +
jmp sub_1048F59  +
***
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_1048F75  +
push ebx  +
call ds:SetLastError  +
jmp locret_1048F86  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1047988  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1047E23  +
***
mov eax 80004003h +
jmp loc_104907F  +
***
mov ebx [ebp+0Ch] +
jmp sub_10483C3  +
***
mov eax [esi+50h] +
push ecx  +
lea ecx [esi+70h] +
push ecx  +
push eax  +
call sub_10BA489  +
mov dword ptr [esi+84h] 0CDCDCDCDh +
jmp loc_1044CA5  +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp-10h] +
jmp loc_104E162  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1044CBB  +
mov [esi+64h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1044CD7  +
***
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
jmp loc_1047D57  +
cmp eax ebx +
jz loc_1047D48  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1047D48  +
***
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+110h]  +
cmp eax ebx +
jz loc_1049359  +
lea ecx [ebp-70h] +
push ecx  +
push offset dword_1046E50  +
lea ecx [eax+4] +
call sub_104902B  +
push eax  +
lea ecx [ebp-84h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-84h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1049359  +
mov esi [ebp-70h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-0C8h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-0C8h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-84h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_104937F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1049367  +
***
push 0Eh  +
call ds:SetLastError  +
jmp loc_1048EBE  +
***
cmp eax 80004002h +
jz loc_10479FD  +
push eax  +
call sub_10C7F1B  +
jmp loc_10479FD  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104E402  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104E425  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104E434  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104E443  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104E452  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104E461  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104E470  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104E47F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104E48E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104E49D  +
***
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+114h]  +
mov [ebp-10h] eax +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp+8] +
call sub_10BA71E  +
mov edi [ebp+8] +
mov byte ptr [ebp-4] 1 +
test edi edi +
jz loc_1061498  +
lea ecx [ebp+8] +
call sub_100A5CF  +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+14h]  +
mov ebx eax +
neg ebx  +
sbb bl bl +
inc bl  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1061482  +
cmp byte ptr [eax+19h] 5 +
jb loc_1061482  +
movzx ecx bl +
push ecx  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push offset dword_106CF38  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10C9315  +
test bl bl +
jz loc_10614C2  +
mov eax [edi] +
push edi  +
mov byte ptr [ebp-4] 0 +
call dword ptr [eax+8]  +
xor esi esi +
inc esi  +
jmp loc_104412E  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10614C2  +
cmp byte ptr [eax+19h] 5 +
jb loc_10614C2  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push offset dword_106CF38  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
mov byte ptr [ebp-4] 0 +
test edi edi +
jz loc_1044123  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
jmp loc_1044123  +
***
call sub_1048818  +
mov dword ptr [eax+30h] offset aAtlaxwin +
jmp loc_10487D8  +
***
movzx eax word ptr [edi+2] +
cmp ax 53h +
jz loc_10614FE  +
cmp ax 73h +
jnz loc_104F897  +
movzx eax word ptr [edi+4] +
cmp ax 48h +
jz loc_1061512  +
cmp ax 68h +
jnz loc_104F897  +
movzx eax word ptr [edi+6] +
cmp ax 54h +
jz loc_1061526  +
cmp ax 74h +
jnz loc_104F897  +
movzx eax word ptr [edi+8] +
cmp ax 4Dh +
jz loc_106153A  +
cmp ax 6Dh +
jnz loc_104F897  +
movzx eax word ptr [edi+0Ah] +
cmp ax 4Ch +
jz loc_106154E  +
cmp ax 6Ch +
jnz loc_104F897  +
cmp word ptr [edi+0Ch] 3Ah +
jnz loc_104F897  +
push ecx  +
push edx  +
push 15h  +
push 0  +
push offset dword_1061598  +
call esi  +
mov [ebp+var_18] eax +
mov byte ptr [ebx] 1 +
test eax eax +
jl loc_104F897  +
jmp loc_104F8DB  +
push [ebp+ppv]  +
push [ebp+riid]  +
push 15h  +
push 0  +
push offset dword_106DB70  +
call esi  +
mov [ebp+var_18] eax +
mov byte ptr [ebx] 1 +
jmp loc_104F8DB  +
***
push dword ptr [esi+4]  +
jmp loc_10615BB  +
mov eax [esi+14h] +
jmp loc_10442E5  +
mov eax ebx +
shr eax 10h +
push eax  +
push dword ptr [ecx+4]  +
call ds:GetDlgItem  +
jmp loc_10442E5  +
***
mov ecx [eax] +
push esi  +
push offset dword_10615DC  +
push eax  +
call dword ptr [ecx]  +
jmp loc_1049513  +
***
mov eax 80004003h +
jmp loc_1047C97  +
***
cmp [ebp+arg_0] eax +
jz loc_104D761  +
push 0Ah  +
pop eax  +
mov [esi] ax +
mov dword ptr [esi+8] 8007000Eh +
jmp loc_104D761  +
***
and dword ptr [esi+44h] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104E74B  +
push esi  +
call ds:DestroyWindow  +
jmp loc_104E756  +
***
push 1  +
lea eax [esi+28h] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+64h]  +
jmp loc_10448EC  +
***
lea eax [ebp+Paint] +
push eax  +
push dword ptr [esi+4]  +
call ds:BeginPaint  +
mov [ebp+hDC] eax +
cmp eax edi +
jz loc_1044216  +
lea eax [ebp+rc] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
push dword ptr [esi+0B8h]  +
call ds:CreateSolidBrush  +
mov ebx eax +
cmp ebx edi +
jz loc_106168A  +
push ebx  +
lea eax [ebp+rc] +
push eax  +
push [ebp+hDC]  +
call ds:FillRect  +
push ebx  +
call ds:DeleteObject  +
lea eax [ebp+Paint] +
push eax  +
push dword ptr [esi+4]  +
call ds:EndPaint  +
xor eax eax +
inc eax  +
jmp loc_1044218  +
lea eax [ebp+Paint] +
push eax  +
push dword ptr [esi+4]  +
call ds:BeginPaint  +
mov ebx eax +
mov [ebp+var_5C] ebx +
cmp ebx edi +
jz loc_1044216  +
lea eax [ebp+rc] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetClientRect  +
mov eax [ebp-4Ch] +
sub eax [ebp-54h] +
push eax  +
mov eax [ebp-50h] +
sub eax [ebp+rc] +
push eax  +
push ebx  +
call ds:CreateCompatibleBitmap  +
mov [ebp+hDC] eax +
cmp eax edi +
jz loc_106168A  +
push ebx  +
call ds:CreateCompatibleDC  +
mov ebx eax +
cmp ebx edi +
jz loc_106176D  +
push [ebp+hDC]  +
push ebx  +
call ds:SelectObject  +
mov [ebp+var_64] eax +
cmp eax edi +
jz loc_1061766  +
push dword ptr [esi+0B8h]  +
call ds:CreateSolidBrush  +
mov [ebp+var_60] eax +
cmp eax edi +
jz loc_106175C  +
push eax  +
lea eax [ebp+rc] +
push eax  +
push ebx  +
call ds:FillRect  +
push [ebp+var_60]  +
call ds:DeleteObject  +
mov eax [esi+60h] +
mov edx [eax] +
push edi  +
push edi  +
lea ecx [esi+0A4h] +
push ecx  +
push ecx  +
push ebx  +
push edi  +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push 1  +
push eax  +
call dword ptr [edx+0Ch]  +
push 0CC0020h  +
push edi  +
push edi  +
push ebx  +
push dword ptr [ebp-4Ch]  +
push dword ptr [ebp-50h]  +
push edi  +
push edi  +
push [ebp+var_5C]  +
call ds:BitBlt  +
push [ebp+var_64]  +
push ebx  +
call ds:SelectObject  +
push ebx  +
call ds:DeleteDC  +
push [ebp+hDC]  +
jmp loc_1061684  +
***
push dword ptr [ebp+8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
mov eax [ebp-10h] +
jmp loc_10494E2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10494EE  +
***
mov eax 80004005h +
jmp loc_1047AE6  +
***
mov eax [esi+2Ch] +
or dword ptr [esi+60h] 8 +
mov ecx [eax] +
lea edi [esi+3Ch] +
push edi  +
push offset dword_10617B8  +
push eax  +
call dword ptr [ecx]  +
jmp loc_1049D2E  +
***
mov eax 80004003h +
jmp loc_104F346  +
***
push dword ptr [ebp+10h]  +
push eax  +
call dword ptr [ecx+14h]  +
jmp loc_1047321  +
mov eax [edi] +
mov ecx [eax] +
push ebx  +
push offset dword_106184C  +
push eax  +
call dword ptr [ecx]  +
mov dword ptr [esi+80h] 3 +
jmp loc_1047382  +
mov eax [edi] +
mov ecx [eax] +
push ebx  +
push offset dword_106183C  +
push eax  +
call dword ptr [ecx]  +
mov dword ptr [esi+80h] 1 +
jmp loc_104738A  +
mov edi [eax] +
mov ebx eax +
mov eax [esi] +
mov ecx esi +
add edi 0Ch +
call dword ptr [eax+0Ch]  +
push eax  +
push ebx  +
call dword ptr [edi]  +
mov eax [ebp-14h] +
jmp loc_10474F9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1047505  +
***
push dword ptr [ecx+4]  +
call ds:DestroyWindow  +
pop esi  +
retn   +
***
mov eax esi +
cmp [ebx+60h] ecx +
jnz loc_10441CE  +
xor eax eax +
jmp loc_10441CE  +
and al 10h +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 3 +
mov [ebp+arg_10] eax +
jnz loc_10618C1  +
mov ecx [ebx+60h] +
test ecx ecx +
jz loc_10443D6  +
mov eax [ebp+lParam] +
mov ecx [ecx] +
movzx edx ax +
mov [ebp+var_8] edx +
lea edx [ebp+arg_10] +
push edx  +
push 0  +
shr eax 10h +
push eax  +
push [ebp+var_8]  +
lea eax [ebx+0A4h] +
push eax  +
push esi  +
push dword ptr [ebx+60h]  +
call dword ptr [ecx+30h]  +
mov eax [ebp+arg_10] +
mov edx [ebp+arg_4] +
cmp eax 3 +
jnz loc_10443D6  +
mov eax 200h +
cmp edx eax +
jnz loc_106194B  +
lea ecx [ebp+arg_14] +
push ecx  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push eax  +
mov ecx ebx +
mov [ebp+arg_14] esi +
call sub_10BB373  +
cmp [ebp+arg_14] 0 +
mov [edi] eax +
jnz loc_1044974  +
mov edx [ebp+arg_4] +
jmp loc_10443D6  +
mov eax 100h +
cmp edx eax +
jnz loc_10619D9  +
lea ecx [ebp+arg_14] +
push ecx  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push eax  +
mov ecx ebx +
mov [ebp+arg_14] esi +
call sub_10BB32A  +
jmp loc_104E4FC  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+lParam]  +
mov ecx ebx +
push [ebp+wParam]  +
mov [ebp+arg_14] esi +
push edx  +
call sub_10BB270  +
jmp loc_1044365  +
and dword ptr [ebx+88h] 0FFFFFFDFh +
mov [edi] ecx +
jmp loc_10443C8  +
cmp edx 20h +
jnz loc_106195D  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push edx  +
jmp loc_10618DE  +
mov eax 202h +
cmp edx eax +
jz loc_10618D3  +
add eax 3 +
cmp edx eax +
jz loc_10618D3  +
mov eax 208h +
cmp edx eax +
jz loc_10618D3  +
add eax 0FFFFFFF9h +
cmp edx eax +
jz loc_10618D3  +
mov eax 204h +
cmp edx eax +
jz loc_10618D3  +
add eax 3 +
cmp edx eax +
jz loc_10618D3  +
mov eax 203h +
cmp edx eax +
jz loc_10618D3  +
add eax 3 +
cmp edx eax +
jz loc_10618D3  +
cmp edx 209h +
jnz loc_10443D6  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push edx  +
jmp loc_10618DE  +
mov eax 101h +
cmp edx eax +
jz loc_1061909  +
inc eax  +
cmp edx eax +
jz loc_1061909  +
mov eax 103h +
cmp edx eax +
jz loc_1061909  +
inc eax  +
cmp edx eax +
jz loc_1061909  +
mov eax 105h +
cmp edx eax +
jz loc_1061909  +
add eax 2 +
cmp edx eax +
jz loc_1061909  +
cmp edx 53h +
jnz loc_1061A32  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push edx  +
jmp loc_1061914  +
cmp edx 1Fh +
jnz loc_1061A47  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push edx  +
jmp loc_1061914  +
mov eax 286h +
cmp edx eax +
jnz loc_1061A73  +
lea ecx [ebp+arg_14] +
push ecx  +
push [ebp+lParam]  +
mov ecx ebx +
push [ebp+wParam]  +
mov [ebp+arg_14] esi +
push eax  +
call sub_10BB32A  +
cmp [ebp+arg_14] 0 +
mov [edi] eax +
jnz loc_1044974  +
jmp loc_1061AA3  +
cmp edx 209h +
jnz loc_1061A8B  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push edx  +
jmp loc_1061914  +
cmp edx 281h +
jb loc_10443EC  +
cmp edx 291h +
ja loc_10443EC  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+lParam]  +
mov ecx ebx +
push [ebp+wParam]  +
mov [ebp+arg_14] esi +
push [ebp+arg_4]  +
call sub_10BB32A  +
cmp [ebp+arg_14] 0 +
mov [edi] eax +
jnz loc_1044974  +
mov edx [ebp+arg_4] +
jmp loc_10443EC  +
mov ebx [ebx+50h] +
test ebx ebx +
jnz loc_1048512  +
jmp loc_1048518  +
lea ecx [ebp+arg_14] +
push ecx  +
push [ebp+lParam]  +
mov ecx ebx +
push [ebp+wParam]  +
push eax  +
call sub_10BB20E  +
mov [edi] eax +
jmp loc_1044974  +
***
push 0Fh  +
jmp loc_1047200  +
mov edx [ebp+arg_0] +
add edx 64h +
push edx  +
push eax  +
push [ebp+arg_18]  +
push ecx  +
call sub_10BB178  +
jmp loc_1047263  +
cmp [edi] ebx +
jz loc_104726C  +
mov ebx [ebp+var_C] +
mov esi ds:GetWindowLongW +
push 0FFFFFFF0h  +
push dword ptr [ebx]  +
call esi  +
test eax 300000h +
jnz loc_1061B3E  +
mov eax [ebp+arg_0] +
or dword ptr [eax+0ACh] 8 +
jmp loc_1061B65  +
push 0FFFFFFF0h  +
push dword ptr [ebx]  +
call esi  +
and eax 0FFCFFFFFh +
push eax  +
push 0FFFFFFF0h  +
push dword ptr [ebx]  +
call ds:SetWindowLongW  +
push 37h  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push dword ptr [ebx]  +
call ds:SetWindowPos  +
push dword ptr [edi]  +
lea ecx [ebp+hWnd] +
call sub_100D2CF  +
mov esi [ebp+arg_4] +
movzx eax word ptr [esi] +
cmp ax 4Dh +
jz loc_1061B85  +
cmp ax 6Dh +
jnz loc_1061C89  +
movzx eax word ptr [esi+2] +
cmp ax 53h +
jz loc_1061B99  +
cmp ax 73h +
jnz loc_1061C89  +
movzx eax word ptr [esi+4] +
cmp ax 48h +
jz loc_1061BAD  +
cmp ax 68h +
jnz loc_1061C89  +
movzx eax word ptr [esi+6] +
cmp ax 54h +
jz loc_1061BC1  +
cmp ax 74h +
jnz loc_1061C89  +
movzx eax word ptr [esi+8] +
cmp ax 4Dh +
jz loc_1061BD5  +
cmp ax 6Dh +
jnz loc_1061C89  +
movzx eax word ptr [esi+0Ah] +
cmp ax 4Ch +
jz loc_1061BE9  +
cmp ax 6Ch +
jnz loc_1061C89  +
cmp word ptr [esi+0Ch] 3Ah +
jnz loc_1061C89  +
mov ebx [ebp+hWnd] +
and [ebp+arg_18] 0 +
mov eax [ebx] +
lea ecx [ebp+arg_18] +
push ecx  +
push offset loc_1047EA0  +
push ebx  +
call dword ptr [eax]  +
mov eax [ebp+arg_18] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
and [ebp+hWnd] 0 +
mov eax [ebx] +
lea ecx [ebp+hWnd] +
push ecx  +
push offset dword_1061D18  +
push ebx  +
call dword ptr [eax]  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1061C77  +
mov eax [ebp+hWnd] +
and [ebp+arg_10] 0 +
mov ecx [eax] +
lea edx [ebp+arg_10] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1061C6A  +
mov edi [ebp+arg_10] +
add esi 0Eh +
push esi  +
lea ecx [ebp+arg_4] +
call sub_101DD5D  +
mov eax [eax] +
mov ecx [edi] +
push eax  +
push edi  +
call dword ptr [ecx+0E4h]  +
push [ebp+arg_4]  +
mov [ebp+var_4] eax +
call SysFreeString  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1061C77  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+hWnd] +
test eax eax +
jz loc_1061C84  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_18] +
jmp loc_1061CF4  +
mov ebx [ebp+hWnd] +
and [ebp+arg_10] 0 +
mov eax [ebx] +
lea ecx [ebp+arg_10] +
push ecx  +
push offset dword_106DB60  +
push ebx  +
call dword ptr [eax]  +
cmp [ebp+arg_10] 0 +
jz loc_1061CFE  +
xor eax eax +
lea edi [ebp+var_1C] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
push esi  +
lea ecx [ebp+pvarg] +
mov word ptr [ebp+var_1C] ax +
call sub_104D719  +
mov eax [ebp+arg_10] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+0A4h]  +
mov eax [ebp+arg_10] +
mov ecx [eax] +
lea edx [ebp+var_1C] +
push edx  +
push edx  +
push edx  +
push edx  +
lea edx [ebp+pvarg] +
push edx  +
push eax  +
call dword ptr [ecx+0D0h]  +
lea ecx [ebp+pvarg] +
call sub_100EBF1  +
lea ecx [ebp+var_1C] +
call sub_100EBF1  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1061CFE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
xor ebx ebx +
jmp loc_104726C  +
mov ecx [ebp+var_8] +
call sub_1050295  +
jmp loc_10472A1  +
***
and [ebp+hWnd] eax +
jmp loc_1049D67  +
push 507h  +
push 0  +
push 0  +
push eax  +
call ebx  +
mov ecx edi +
call sub_1050295  +
jmp loc_1049D7D  +
push eax  +
mov ecx edi +
call sub_104951F  +
jmp loc_1049D8D  +
mov ecx edi +
call sub_1044C61  +
mov esi [esi-1Ch] +
test esi esi +
jz loc_1049DA6  +
push 507h  +
push 0  +
push 0  +
push esi  +
call ebx  +
mov ecx edi +
call sub_1050295  +
jmp loc_1049DA6  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104E6A4  +
push eax  +
call sub_104E4B9  +
jmp loc_104E6B3  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104E3C8  +
***
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp-4] edi +
push dword ptr [ebp+10h]  +
push 7  +
call sub_10B8CEF  +
jmp loc_1044982  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1061DCD +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
jmp loc_1047FEB  +
***
push 1  +
mov ecx esi +
call sub_104E6C6  +
xor esi esi +
jmp loc_104800B  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1061DFC +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
jmp loc_10480C1  +
***
push 1  +
mov ecx esi +
call sub_104E60C  +
xor esi esi +
jmp loc_10480E1  +
***
mov eax [esi+24h] +
push dword ptr [eax+4]  +
call ds:DestroyWindow  +
jmp loc_104E5AC  +
***
mov [ebp+var_4] 80004003h +
jmp loc_1047C46  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1061E48 +
retn   +
mov esi [ebp-18h] +
jmp loc_10495D8  +
***
push 1  +
mov ecx esi +
call sub_104E30C  +
jmp loc_10495F5  +
***
push 8007000Eh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] esi +
jmp loc_10491B2  +
lea ecx [ebp-28h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1061E76  +
lea ecx [ebp-28h] +
call ds:?Clear@SC@mmcerror@@QAEXXZ  +
jmp loc_1049191  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1061EB8 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
jmp loc_10481BF  +
***
push 1  +
mov ecx esi +
call sub_104E52B  +
xor esi esi +
jmp loc_10481DF  +
***
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1061F10  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1061F10  +
mov eax [ebp-10h] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_104FDAE  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [esi]  +
push dword ptr [ebp+8]  +
call sub_10BC7A4  +
mov esi eax +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1061F21  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_104FDD1  +
***
xor edi edi +
jmp sub_105014D  +
***
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
test eax eax +
jz loc_1061F6A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call ds:OleUninitialize  +
jmp loc_104424F  +
***
xor ebx ebx +
push ebx  +
call ds:OleInitialize  +
mov edi [ebp+8] +
push edi  +
call ds:GetWindowTextLengthW  +
mov esi eax +
lea eax [esi+esi+2] +
call sub_1027CCC  +
mov [ebp-1Ch] esp +
inc esi  +
push esi  +
push dword ptr [ebp-1Ch]  +
push edi  +
call ds:GetWindowTextW  +
push offset word_100A5FC  +
push edi  +
call ds:SetWindowTextW  +
mov eax [ebp+14h] +
mov [ebp-20h] ebx +
test eax eax +
jz loc_1061FC1  +
mov eax [eax] +
test eax eax +
jz loc_1061FC1  +
movzx ebx word ptr [eax] +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
test ebx ebx +
jz loc_1062009  +
push ebx  +
push 42h  +
call ds:GlobalAlloc  +
mov esi eax +
test esi esi +
jz loc_1062036  +
push esi  +
call ds:GlobalLock  +
mov ecx [ebp+14h] +
mov ecx [ecx] +
inc ecx  +
inc ecx  +
push ebx  +
push ecx  +
push eax  +
call memcpy  +
add esp 0Ch +
push esi  +
call ds:GlobalUnlock  +
lea eax [ebp-14h] +
push eax  +
push 1  +
push esi  +
call ds:CreateStreamOnHGlobal  +
and dword ptr [ebp-18h] 0 +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 1 +
push edi  +
push dword ptr [ebp-1Ch]  +
call sub_10BC878  +
test eax eax +
jge loc_106204F  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1062036  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1062047  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or eax 0FFFFFFFFh +
jmp loc_1044261  +
***
mov esi [ebp-18h] +
mov eax [esi] +
lea ecx [ebp-20h] +
push ecx  +
push offset dword_1049C64  +
push esi  +
call dword ptr [eax]  +
test eax eax +
jge loc_1062070  +
mov eax [esi] +
push esi  +
mov byte ptr [ebp-4] 0 +
call dword ptr [eax+8]  +
jmp loc_1062036  +
***
push dword ptr [ebp-20h]  +
mov ebx ds:SetWindowLongW +
push 0FFFFFFEBh  +
push edi  +
call ebx  +
push 5  +
push edi  +
call ds:GetWindow  +
test eax eax +
jz loc_10620B3  +
mov esi ds:GetWindowLongW +
push 0FFFFFFECh  +
push eax  +
call esi  +
mov edi 10000h +
test eax edi +
jz loc_10620B0  +
push 0FFFFFFECh  +
push dword ptr [ebp+8]  +
call esi  +
or eax edi +
push eax  +
push 0FFFFFFECh  +
push dword ptr [ebp+8]  +
call ebx  +
mov esi [ebp-18h] +
mov eax [esi] +
push esi  +
mov byte ptr [ebp-4] 0 +
call dword ptr [eax+8]  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_104424F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104424F  +
***
cmp esi ebx +
jl loc_10620E8  +
mov ecx [ebp-14h] +
mov [eax] ecx +
mov [ebp-14h] ebx +
jmp loc_1049C39  +
mov [eax] ebx +
jmp loc_1049C39  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1049C47  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1049C56  +
***
movzx eax word ptr [eax] +
mov [ebp-14h] eax +
jmp loc_1049ACE  +
push edi  +
call ds:GlobalLock  +
mov ecx [ebx] +
push dword ptr [ebp-14h]  +
inc ecx  +
inc ecx  +
push ecx  +
push eax  +
call memcpy  +
add esp 0Ch +
push edi  +
call ds:GlobalUnlock  +
lea eax [ebp-18h] +
push eax  +
push 1  +
push edi  +
call ds:CreateStreamOnHGlobal  +
xor ecx ecx +
jmp loc_1049AF0  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1062154  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1062165  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or eax 0FFFFFFFFh +
jmp loc_1049B77  +
mov eax [edi] +
push edi  +
mov byte ptr [ebp-4] 0 +
call dword ptr [eax+8]  +
jmp loc_1062154  +
mov edi ds:GetWindowLongW +
push 0FFFFFFECh  +
push eax  +
call edi  +
mov ebx 10000h +
test eax ebx +
jz loc_10621A2  +
push 0FFFFFFECh  +
push dword ptr [esi+4]  +
call edi  +
or eax ebx +
push eax  +
push 0FFFFFFECh  +
push dword ptr [esi+4]  +
call ds:SetWindowLongW  +
mov edi [ebp-14h] +
jmp loc_1049B53  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1049B75  +
***
or eax eax +
jmp loc_1048C8B  +
***
mov ecx [ebp-24h] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-28h] esi +
jmp loc_104FC54  +
mov ecx [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10621C9  +
mov ecx [ebp-24h] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-28h] 1 +
jmp loc_104FC54  +
mov ecx [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-28h] esi +
mov eax [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_104FC54  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104FC54  +
mov ecx [ebp-24h] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-28h] 1 +
jmp loc_1062203  +
push 8000FFFFh  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10621D1  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1062267  +
cmp byte ptr [eax+19h] 2 +
jb loc_1062267  +
push offset dword_106CF38  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 8000FFFFh  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10621F6  +
***
push dword ptr [ebp+0Ch]  +
push dword ptr [esi]  +
push dword ptr [ebp+8]  +
call sub_10BC8A0  +
mov esi eax +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_106229A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_1049E1E  +
***
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_104A4CC  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10622AE  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-18h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_104A4CC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104A4CC  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-18h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_106230D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
jmp loc_10622D9  +
push 8000FFFFh  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10622B6  +
lea eax [ebp-30h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_106230D  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_106235B  +
cmp byte ptr [eax+19h] 2 +
jb loc_106235B  +
push offset dword_106CF38  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 8000FFFFh  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1062328  +
***
mov ecx [ebp+8] +
push 8000FFFFh  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_1062398  +
lea eax [ebp-20h] +
jmp loc_106238E  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] esi +
jmp loc_1047865  +
***
cmp dword ptr [esi+18h] 8 +
jb loc_10623AB  +
mov eax [esi+4] +
jmp loc_10623AE  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub ebx eax +
sar ebx 1 +
push ebx  +
push esi  +
mov ecx esi +
call sub_10BD64F  +
jmp loc_102E27D  +
call loc_10C8063  +
int 3  +
***
call loc_10C8063  +
int 3  +
lea eax [ebp+arg_0] +
push eax  +
add ecx 4 +
call sub_10BE50D  +
jmp loc_10519C7  +
***
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 8 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-54h] +
mov [ebp+0Fh] al +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp byte ptr [ebp+0Fh] 0 +
jnz loc_10626DD  +
mov edi 8000FFFFh +
push edi  +
push dword ptr [ebp-24h]  +
lea eax [ebp-64h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 9 +
call esi  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10626CB  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_10B9721  +
mov eax [ebp-24h] +
mov ecx [eax] +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call dword ptr [ecx+8]  +
push edi  +
mov edi [ebp-1Ch] +
push edi  +
lea eax [ebp-74h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0Bh +
call esi  +
lea ecx [ebp-74h] +
mov byte ptr [ebp-4] 0Ah +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10626E2  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+1Ch] +
push dword ptr [ebp+14h]  +
lea eax [ebp-84h] +
push dword ptr [ebp+10h]  +
push edi  +
push eax  +
call ds:?ScEmitOrPostpone@CEventBuffer@@QAE?AVSC@mmcerror@@PAUIDispatch@@JPAVCComVariant@ATL@@H@Z  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0Ch +
call esi  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 0Ah +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1062686  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-44h] +
call esi  +
lea ecx [ebp-34h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov byte ptr [ebp-4] 7 +
test edi edi +
jz loc_1062694  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
***
xor eax eax +
lea edi [ebp-24h] +
stos   +
lea ecx [ebp-10h] +
stos   +
call sub_100A5CF  +
mov ecx [eax] +
push 0  +
lea edx [ebp-24h] +
push edx  +
push ebx  +
push eax  +
call dword ptr [ecx+0Ch]  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz sub_1062578  +
lea eax [ebp-34h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-18h] ebx +
jmp loc_1062700  +
***
lea eax [ebp-44h] +
jmp loc_10626CE  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 7 +
test edi edi +
jz loc_1062700  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_106271E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
test eax eax +
jz loc_1051A1A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1051A1A  +
***
cmp dword ptr [ebp+8] 2 +
jge loc_106276E  +
inc eax  +
push eax  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call ?Mid@CString@@QBE?AV1@H@Z  +
lea ebx [esi+4] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
mov ecx ebx +
call ?TrimLeft@CString@@QAEXXZ  +
xor ebx ebx +
push dword ptr [ebp-14h]  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
call ?Left@CString@@QBE?AV1@H@Z  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
mov ecx esi +
call ?TrimRight@CString@@QAEXXZ  +
inc dword ptr [ebp+8]  +
add esi 4 +
cmp dword ptr [ebp+8] 3 +
jge loc_1046884  +
jmp loc_104686C  +
push offset dword_1062850  +
lea ecx [ebp-20h] +
call ?FindOneOf@CString@@QBEHPBG@Z  +
test eax eax +
jnz loc_1046893  +
mov eax [ebp-20h] +
mov ecx [eax-8] +
cmp ecx ebx +
jle loc_10627D4  +
movzx edx word ptr [eax] +
jmp loc_10627D6  +
xor edx edx +
cmp ecx esi +
jle loc_10627E0  +
movzx eax word ptr [eax+2] +
jmp loc_10627E2  +
xor eax eax +
cmp dx ax +
push esi  +
lea eax [ebp+8] +
lea ecx [ebp-20h] +
push eax  +
jnz loc_1062812  +
call ?Mid@CString@@QBE?AV1@H@Z  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
jmp loc_1046893  +
call ?Mid@CString@@QBE?AV1@H@Z  +
push dword ptr [eax]  +
call ds:_wtoi  +
pop ecx  +
lea ecx [ebp+8] +
mov ebx eax +
call ??1CString@@QAE@XZ  +
push 64h  +
lea esi [edi+4Ch] +
push 0  +
mov ecx esi +
call sub_10BE5AB  +
push ebx  +
mov ecx esi +
call sub_10BE5DF  +
and dword ptr [edi+110h] 0FFFFFFFDh +
xor ebx ebx +
jmp loc_1046893  +
***
xor eax eax +
jmp loc_1011664  +
***
lea edi [esi+0D4h] +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_107DF93  +
mov ecx [eax] +
test ecx ecx +
jz loc_1062879  +
push 1  +
call sub_1019C77  +
cmp dword ptr [ebp-10h] 0 +
jz loc_101BB35  +
jmp loc_1062861  +
***
or eax eax +
jmp loc_1033BD8  +
***
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1018258  +
***
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10256CD  +
***
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10252F3  +
***
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
jmp loc_10266C5  +
lea edx [ebp-30h] +
push edx  +
call dword ptr [eax+1Ch]  +
mov dword ptr [ebp-4] 3 +
mov dword ptr [ebp-10h] 4 +
jmp loc_102667E  +
and dword ptr [ebp-10h] 0FFFFFFFBh +
lea ecx [ebp-30h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1026695  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1018EC1  +
***
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1018FB1  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102542C  +
***
push 80004005h  +
lea ecx [ebp-424h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp-404h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1043AE1  +
***
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_104FFCF  +
***
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_104FFC2  +
***
mov eax [ebx] +
lea ecx [ebp-14h] +
push ecx  +
push 1  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call dword ptr [eax+0Ch]  +
push dword ptr [ebp-14h]  +
mov ecx [esi+10h] +
mov eax [ecx] +
push 4  +
push dword ptr [ebp+10h]  +
lea edx [ebp-38h] +
push dword ptr [ebp-18h]  +
push edx  +
call dword ptr [eax+14h]  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_10198E8  +
***
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1019A03  +
***
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10199F6  +
***
push 8000FFFFh  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
jmp loc_104376C  +
push 8000FFFFh  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1062A5F  +
push 8000FFFFh  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
jmp loc_104375D  +
push 8000FFFFh  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
jmp loc_104375D  +
lea ecx [ebp-40h] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+1Ch]  +
mov dword ptr [ebp-4] 7 +
mov dword ptr [ebp-10h] 4 +
jmp loc_1043710  +
and dword ptr [ebp-10h] 0FFFFFFFBh +
lea ecx [ebp-40h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1043727  +
***
mov eax [eax+8] +
mov ecx [eax+0Ch] +
cmp ecx [esi] +
jge loc_1062B3C  +
push esi  +
jmp loc_1062B30  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] edi +
call sub_1051FDF  +
mov ecx [ebp+arg_8] +
cmp ecx [ebp+var_4] +
jz loc_1062B23  +
mov eax [esi] +
cmp eax [ecx+0Ch] +
jge loc_1062B3C  +
mov eax [ebp+arg_4] +
mov edx [eax+8] +
cmp byte ptr [edx+15h] 0 +
push esi  +
jz loc_1062B36  +
push eax  +
jmp loc_1032343  +
push ecx  +
jmp loc_103232C  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
call sub_109FAAA  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_103233B  +
***
mov eax [ecx] +
push esi  +
lea edx [ebp-30h] +
push edx  +
call dword ptr [eax+20h]  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_101AB5F  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_101AB5F  +
***
mov [ebp+var_4] esi +
add [ebp+var_4] esi +
push [ebp+var_4]  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
dec eax  +
push eax  +
call ?GetBuffer@CString@@QAEPAGH@Z  +
push eax  +
push [ebp+uID]  +
call edi  +
push eax  +
call ebx  +
mov ecx [ebp+var_4] +
sub ecx eax +
cmp ecx 1 +
mov [ebp+var_8] eax +
jle loc_1062B9B  +
mov ecx [ebp+arg_0] +
push 0FFFFFFFFh  +
call ?ReleaseBuffer@CString@@QAEXH@Z  +
xor eax eax +
cmp [ebp+var_8] eax +
jmp loc_101226B  +
***
push 80070057h  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
push offset aFormatstrings  +
mov byte ptr [ebp-4] 1 +
call ds:?TraceError@@YGXPBGABVSC@mmcerror@@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1051490  +
***
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_10C82EA  +
add esp 14h +
pop esi  +
retn   +
push ecx  +
call sub_10BEC99  +
jmp loc_102BFF6  +
mov [esi] eax +
jmp loc_102BFEE  +
***
mov eax [eax+8] +
jmp loc_103B0BD  +
push ecx  +
call sub_1051B49  +
jmp loc_103B0BD  +
mov [esi] eax +
jmp loc_103B0A4  +
***
mov al 1 +
jmp loc_104D82A  +
***
mov al 1 +
jmp loc_1012B2E  +
***
mov [esi+4] edx +
jmp loc_103B0E3  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_1062C83  +
mov [ecx] eax +
jmp loc_103B0F9  +
mov [ecx+8] eax +
jmp loc_103B0F9  +
***
mov esi [esi+8] +
jmp loc_10128DE  +
***
xor ecx ecx +
jmp loc_10216F9  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
push 0  +
jmp loc_102E517  +
***
push 0  +
call sub_1010F11  +
mov esi 80004002h +
jmp loc_102E51C  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103B154  +
cmp byte ptr [eax+19h] 2 +
jb loc_103B154  +
push esi  +
push offset loc_106D154  +
push 10h  +
jmp loc_1062D11  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103B154  +
cmp byte ptr [eax+19h] 2 +
jb loc_103B154  +
push esi  +
push offset loc_106D154  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_103B154  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103B1B3  +
cmp byte ptr [eax+19h] 2 +
jb loc_103B1B3  +
push esi  +
push offset loc_106D154  +
push 14h  +
jmp loc_1062D67  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103B1B3  +
cmp byte ptr [eax+19h] 2 +
jb loc_103B1B3  +
push esi  +
push offset loc_106D154  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_103B1B3  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1051BAB  +
cmp byte ptr [eax+19h] 2 +
jb loc_1051BAB  +
push esi  +
push offset loc_106D154  +
push 18h  +
jmp loc_1062DBD  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1051BAB  +
cmp byte ptr [eax+19h] 2 +
jb loc_1051BAB  +
push esi  +
push offset loc_106D154  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_1051BAB  +
***
cmp eax 80004002h +
jz loc_102E4D8  +
push eax  +
call sub_10C7F1B  +
jmp loc_102E4D8  +
***
xor eax eax +
jmp loc_1012AB3  +
***
mov ecx [esi+20h] +
jmp loc_1012836  +
***
mov eax 80004005h +
jmp loc_103B219  +
***
mov eax 80004005h +
jmp loc_103B246  +
***
mov eax 80004005h +
jmp loc_1051C00  +
mov ecx [ebp+arg_8] +
call sub_102BC2F  +
push eax  +
push [ebp+arg_4]  +
mov eax lpDst +
push offset loc_106D154  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10AC375  +
jmp loc_1051BFD  +
***
mov eax 80004005h +
jmp loc_103B2A0  +
***
mov eax [ebp+14h] +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1062E48  +
sub eax esi +
sar eax 1 +
mov [edx] eax +
jmp loc_103B29E  +
***
mov eax 80070057h +
jmp loc_103B2ED  +
***
mov eax 80004005h +
jmp loc_103B2ED  +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1012C5F  +
***
push offset aListTTooLong  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1076041  +
push offset dword_10E8AC0  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_1075FC8  +
push offset dword_10EA2DC  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_106BEE4 +
call _CxxThrowException  +
cmp byte ptr [ebx+2Dh] 0 +
mov esi [eax+4] +
jnz loc_1062EE6  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
jmp loc_104E2BD  +
***
mov esi [ebp-18h] +
jmp loc_1062FAE  +
mov eax [ebp+8] +
push dword ptr [eax+4]  +
mov ecx [ebp-14h] +
lea eax [ebp-18h] +
push eax  +
call sub_100ED24  +
mov esi [esi] +
cmp esi [ebp+0Ch] +
jnz loc_1062F9A  +
push 0  +
push 0  +
call _CxxThrowException  +
push dword ptr [ebp-14h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
mov eax [edi+20h] +
mov ecx [edi+1Ch] +
mov [ebp-24h] ecx +
mov [ebp-20h] eax +
mov eax [esi+4] +
mov eax [eax] +
lea ecx [ebp-24h] +
push ecx  +
push eax  +
mov ecx esi +
call sub_10111C2  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_103D940  +
mov [ebp-1Ch] eax +
mov eax edx +
mov eax [eax+8] +
dec eax  +
mov [ebp-18h] eax +
jmp loc_103D8DD  +
mov ecx [edx+0Ch] +
inc ecx  +
mov [edx+8] ecx +
mov ecx [eax+8] +
dec ecx  +
mov [edx+0Ch] ecx +
mov edx eax +
mov eax [eax] +
cmp eax [esi+4] +
jz loc_103D90F  +
jmp loc_1063047  +
mov eax [esi+4] +
mov eax [eax] +
lea ecx [ebp-1Ch] +
push ecx  +
push eax  +
mov ecx esi +
call sub_10111C2  +
jmp loc_103D91F  +
***
cmp edx edi +
jb loc_10129E2  +
mov eax [eax] +
mov edx [ebp+arg_0] +
cmp eax [edx+4] +
jz loc_10129E2  +
jmp loc_101298C  +
mov edi [eax+8] +
dec edi  +
cmp esi edi +
jnz loc_10129D9  +
mov esi [eax+0Ch] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov [edx] esi +
call sub_100ED24  +
jmp loc_10129D9  +
***
mov eax [ebp-18h] +
cmp [ebp+0Ch] eax +
jnb loc_1063134  +
sub eax [ebp+0Ch] +
mov esi eax +
mov eax [ebp+8] +
push dword ptr [eax+4]  +
mov ecx [ebp-14h] +
lea eax [ebp+0Ch] +
push eax  +
call sub_1053E9B  +
dec esi  +
jnz loc_106311F  +
push 0  +
push 0  +
call _CxxThrowException  +
mov ecx [ebp-14h] +
call sub_100B8F1  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
mov esi [ebp-18h] +
jmp loc_1063168  +
mov eax [ebp+8] +
push dword ptr [eax+4]  +
mov ecx [ebp-14h] +
lea eax [ebp-18h] +
push eax  +
call sub_1053E9B  +
mov esi [esi] +
cmp esi [ebp+0Ch] +
jnz loc_1063154  +
push 0  +
push 0  +
call _CxxThrowException  +
***
push 80004005h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_103C7EB  +
***
mov ecx esi +
call sub_10BFD34  +
cmp edi [esi+8] +
jnb loc_103BC53  +
jmp loc_1063193  +
***
mov ecx [ebp+8] +
lea eax [ebp-44h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_103C529  +
mov eax [esi+0Ch] +
mov edi [edi+24h] +
mov [ebp-20h] edi +
mov [ebp-1Ch] eax +
dec edi  +
lea eax [ebp-20h] +
mov [esi+0Ch] edi +
mov esi [esi] +
push eax  +
push esi  +
lea ecx [ebp-34h] +
call sub_10111C2  +
mov esi [esi+4] +
mov ecx [ebp-30h] +
jmp loc_103C4F9  +
***
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_103C6CB  +
***
mov eax 80004005h +
jmp loc_1053E90  +
***
jmp loc_106325D  +
***
mov eax [ebp+arg_4] +
add eax 0Ch +
push edi  +
push eax  +
call sub_10127EE  +
pop ecx  +
pop ecx  +
test al al +
jz loc_106326C  +
mov eax [ebp+arg_4] +
mov ebx [esi+4] +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] eax +
call sub_10523E3  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_106324D  +
add eax 0Ch +
push eax  +
push edi  +
call sub_10127EE  +
pop ecx  +
pop ecx  +
test al al +
jz loc_106326C  +
mov eax [ebp+arg_4] +
mov ecx [eax+8] +
cmp byte ptr [ecx+2Dh] 0 +
push edi  +
mov ecx esi +
jz loc_1063264  +
push eax  +
push 0  +
jmp loc_103BD3F  +
push [ebp+arg_8]  +
jmp loc_103BD3D  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_10C062C  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_103BD4A  +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1053F3C  +
***
mov ecx [ebp+8] +
lea eax [ebp-44h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_102E446  +
***
mov ecx [ebp+8] +
lea eax [ebp-44h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_106329D  +
***
push 80004002h  +
lea ecx [ebp-44h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10632A5  +
cmp byte ptr [eax+19h] 2 +
jb loc_10632A5  +
push offset loc_106D154  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10632A5  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_102E41E  +
cmp byte ptr [eax+19h] 2 +
jb loc_102E41E  +
lea ecx [ebp-44h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
push eax  +
mov eax lpDst +
push offset loc_106D154  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_102E41E  +
***
and dword ptr [ebp-20h] 0 +
lea ecx [ebp-1Ch] +
call sub_100A5CF  +
mov ecx [ebp-10h] +
mov [ebp-24h] eax +
mov eax [eax] +
add eax 7Ch +
mov [ebp-28h] eax +
add ecx 0Ch +
mov ecx [ecx+4] +
lea eax [ebp-20h] +
push eax  +
call sub_102BC2F  +
push eax  +
push dword ptr [ebp-24h]  +
mov eax [ebp-28h] +
call dword ptr [eax]  +
push eax  +
lea ecx [ebp-44h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_102E41E  +
cmp dword ptr [ebp-20h] 0 +
jnz loc_104D7E3  +
mov eax [ebp-10h] +
add eax 14h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
push eax  +
lea ecx [ebp-44h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_102E41E  +
push dword ptr [ebp-10h]  +
mov ecx [ebp-18h] +
lea eax [ebp-2Ch] +
push eax  +
add ecx 54h +
call sub_10C0DD3  +
mov eax [eax] +
mov [ebp-10h] eax +
jmp loc_104D7EB  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_102BFD0  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10C0DD3  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_10633C3  +
pop edi  +
jmp loc_1053FA0  +
***
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102E6E6  +
***
push dword ptr [ebp-14h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1076041  +
push offset dword_10E8AC0  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_106344D  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_103DB95  +
mov [eax] ebx +
jmp loc_103DB95  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jz loc_103DB92  +
jmp loc_103DB95  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_10634A2  +
mov edx [edx+8] +
cmp byte ptr [edx+58h] 0 +
jz loc_10634AA  +
cmp esi [ecx+8] +
jnz loc_1063482  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_10BEDFB  +
mov eax [esi+4] +
mov byte ptr [eax+58h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+58h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_10BECB6  +
jmp loc_10634EE  +
mov edx [edx] +
cmp byte ptr [edx+58h] 0 +
jnz loc_10634C2  +
mov byte ptr [ecx+58h] 1 +
mov byte ptr [edx+58h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+58h] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_10634EE  +
cmp esi [ecx] +
jnz loc_10634D0  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_10BECB6  +
mov eax [esi+4] +
mov byte ptr [eax+58h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+58h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_10BEDFB  +
lea eax [esi+4] +
jmp loc_103DB9A  +
***
mov ecx [ebp+arg_4] +
lea eax [esi+0Ch] +
push eax  +
mov ebx esi +
call sub_1012B08  +
mov byte ptr [ebp+var_8] al +
test al al +
jz loc_1063512  +
mov esi [esi] +
jmp loc_103DAFF  +
mov esi [esi+8] +
jmp loc_103DAFF  +
lea ecx [ebp+var_4] +
call sub_10BED1F  +
mov esi [ebp+var_4] +
push [ebp+arg_4]  +
lea ecx [esi+0Ch] +
call sub_1012B08  +
test al al +
jz loc_1063540  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_103DB27  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
jmp loc_103DB3D  +
***
mov [esi+4] edx +
jmp loc_102B911  +
***
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_10C82EA  +
add esp 14h +
pop esi  +
retn   +
***
mov ecx [ecx+8] +
jmp loc_1009FD2  +
***
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_10C82EA  +
add esp 14h +
pop esi  +
retn   +
push ecx  +
call sub_107FE31  +
jmp loc_1051CBD  +
mov [esi] eax +
jmp loc_1051CB1  +
***
call sub_1011A16  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
push eax  +
call sub_107FE31  +
mov [edi] eax +
mov esi [esi+4] +
push dword ptr [esi+4]  +
call sub_107FE13  +
mov [esi+8] eax +
jmp loc_103A828  +
***
mov esi [ebp-18h] +
jmp loc_1063696  +
mov eax [ebp+8] +
push dword ptr [eax+4]  +
mov ecx [ebp-14h] +
lea eax [ebp-18h] +
push eax  +
call sub_100ED24  +
mov esi [esi] +
cmp esi [ebp+0Ch] +
jnz loc_1063682  +
push 0  +
push 0  +
call _CxxThrowException  +
mov ecx [ebp-14h] +
call sub_100B8F1  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
lea ecx [ebp-30h] +
call sub_10331F9  +
mov eax [esi+14h] +
mov ecx [eax] +
and dword ptr [ebp-4] 0 +
mov [ebp-18h] eax +
mov [ebp-10h] ecx +
cmp ecx eax +
jz loc_106373E  +
mov eax [esi+4] +
lea ebx [ecx+0Ch] +
mov ecx [eax] +
push ebx  +
push eax  +
push ecx  +
lea eax [ebp-14h] +
push eax  +
call sub_10113C1  +
mov edi [ebp-14h] +
cmp dword ptr [edi+10h] 0 +
jnz loc_106372E  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1063715  +
cmp byte ptr [eax+19h] 5 +
jb loc_1063715  +
push dword ptr [edi+0Ch]  +
push offset dword_106D1C8  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
push ebx  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-30h] +
call sub_10C1533  +
push edi  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
call sub_100ED24  +
lea ecx [ebp-10h] +
call sub_1051C93  +
mov ecx [ebp-10h] +
cmp ecx [ebp-18h] +
jnz loc_10636D1  +
mov eax [ebp-2Ch] +
mov ecx [eax] +
mov edi eax +
mov [ebp-10h] ecx +
cmp ecx eax +
jz loc_106376A  +
add esi 10h +
mov eax [ebp-10h] +
add eax 0Ch +
push eax  +
mov ecx esi +
call sub_104F7EB  +
lea ecx [ebp-10h] +
call sub_1051C93  +
cmp [ebp-10h] edi +
jnz loc_106374F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
call sub_101197A  +
jmp loc_1009ED7  +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1054168  +
***
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_10509C1  +
mov esi [esi] +
push edi  +
call sub_1054136  +
push edi  +
call ??3@YAXPAX@Z  +
cmp byte ptr [esi+2Dh] 0 +
pop ecx  +
mov edi esi +
jnz loc_10509DA  +
jmp loc_1063787  +
***
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
int 3  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_10523E3  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_105406C  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_10639A8  +
pop edi  +
jmp loc_105097B  +
***
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1076041  +
push offset dword_10E8AC0  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_1063A11  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_103A64D  +
mov [eax] ebx +
jmp loc_103A64D  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jz loc_103A64A  +
jmp loc_103A64D  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_1063A66  +
mov edx [edx+8] +
cmp byte ptr [edx+2Ch] 0 +
jz loc_1063A6E  +
cmp esi [ecx+8] +
jnz loc_1063A46  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_103B0C6  +
mov eax [esi+4] +
mov byte ptr [eax+2Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+2Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_102B8F4  +
jmp loc_1063AB2  +
mov edx [edx] +
cmp byte ptr [edx+2Ch] 0 +
jnz loc_1063A86  +
mov byte ptr [ecx+2Ch] 1 +
mov byte ptr [edx+2Ch] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+2Ch] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_1063AB2  +
cmp esi [ecx] +
jnz loc_1063A94  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_102B8F4  +
mov eax [esi+4] +
mov byte ptr [eax+2Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+2Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_103B0C6  +
lea eax [esi+4] +
jmp loc_103A652  +
***
mov eax [ebx+4] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_4] eax +
cmp edi [eax] +
jnz loc_1063ADD  +
mov eax [esi] +
cmp eax [edi+0Ch] +
jnb loc_1063B5F  +
push esi  +
push edi  +
push 1  +
jmp loc_1063B52  +
cmp edi eax +
jnz loc_1063AEE  +
mov eax [eax+8] +
mov ecx [eax+0Ch] +
cmp ecx [esi] +
jnb loc_1063B5F  +
push esi  +
jmp loc_1063B48  +
mov eax [esi] +
cmp eax [edi+0Ch] +
jnb loc_1063B1A  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] edi +
call sub_103B087  +
mov ecx [ebp+arg_8] +
mov eax [esi] +
cmp [ecx+0Ch] eax +
jnb loc_1063B1A  +
mov eax [ecx+8] +
cmp byte ptr [eax+2Dh] 0 +
push esi  +
jz loc_1063B17  +
push ecx  +
jmp loc_1063B49  +
push edi  +
jmp loc_1063B4E  +
mov eax [esi] +
cmp [edi+0Ch] eax +
jnb loc_1063B5F  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] edi +
call sub_10523E3  +
mov ecx [ebp+arg_8] +
cmp ecx [ebp+var_4] +
jz loc_1063B3B  +
mov eax [esi] +
cmp eax [ecx+0Ch] +
jnb loc_1063B5F  +
mov eax [ebp+arg_4] +
mov edx [eax+8] +
cmp byte ptr [edx+2Dh] 0 +
push esi  +
jz loc_1063B4D  +
push eax  +
push 0  +
jmp loc_1063B50  +
push ecx  +
push 1  +
mov ecx ebx +
push [ebp+arg_0]  +
call sub_103A601  +
mov eax [ebp+arg_0] +
jmp loc_1063B72  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
call sub_10C1652  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop edi  +
pop esi  +
jmp loc_103A5F7  +
***
push edi  +
push offset dword_106D1C8  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_103A94E  +
push [ebp+arg_0]  +
push offset dword_106D1C8  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_103A972  +
mov edi [esi+4] +
mov eax [edi] +
lea ecx [ebp+var_10] +
push ecx  +
push edi  +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
call sub_10113C1  +
cmp [ebp+arg_4] edi +
jz loc_103A94E  +
xor al al +
jmp loc_103A974  +
***
push [ebp+hWnd]  +
push offset dword_106D1C8  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_105405F  +
***
push 0  +
push [ebp+hWnd]  +
mov ecx ebx +
call sub_1053FF6  +
test al al +
jz loc_1009E7F  +
mov esi lpDst +
cmp esi offset lpDst +
jz loc_1009E85  +
cmp byte ptr [esi+19h] 5 +
jb loc_1009E85  +
push [ebp+hWnd]  +
push offset dword_106D1C8  +
push 10h  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_10A4E26  +
jmp loc_1009E7F  +
push [ebp+hWnd]  +
push offset dword_106D1C8  +
push 11h  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_10A4E26  +
jmp loc_1053FE0  +
***
and [ebp+var_10] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
lea edi [eax+10h] +
mov eax [ebp+arg_4] +
mov esi [edi+4] +
lea ecx [ebp+var_18] +
push ecx  +
mov [ebp+var_18] eax +
mov eax [esi] +
push esi  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov [ebp+var_14] ebx +
mov [ebp+var_C] 0 +
call sub_10113C1  +
mov eax [ebp+arg_0] +
cmp eax esi +
jnz loc_1063C88  +
xor al al +
jmp loc_1063D1B  +
add eax 8 +
push eax  +
mov ecx edi +
call sub_10C15FC  +
mov esi offset dword_106D1C8 +
test eax eax +
jnz loc_1063CBF  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1063CE3  +
cmp byte ptr [eax+19h] 5 +
jb loc_1063CE3  +
push ebx  +
push esi  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_1063CE3  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1063CE3  +
cmp byte ptr [ecx+19h] 5 +
jb loc_1063CE3  +
push eax  +
push ebx  +
push esi  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
cmp dword ptr [edi+8] 0 +
jnz loc_1063D19  +
mov ecx [ebp+var_8] +
push 0  +
push ebx  +
call sub_1053FF6  +
test al al +
jnz loc_1063D19  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1063D19  +
cmp byte ptr [eax+19h] 5 +
jb loc_1063D19  +
push ebx  +
push esi  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov al 1 +
pop edi  +
pop ebx  +
jmp loc_1051CFA  +
***
mov eax esi +
mov esi [esi] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
call sub_100ED24  +
jmp loc_1033CA6  +
***
lea ecx [ebp-0A8h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
mov ecx eax +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10340A3  +
push 8000FFFFh  +
lea ecx [ebp-0A8h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0A8h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
jmp loc_1034106  +
***
mov [ebp-4] bl +
call sub_100BF07  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
jmp loc_1033DBA  +
xor esi esi +
jmp loc_1033DA0  +
***
call sub_10C2033  +
jmp loc_10541C6  +
***
call sub_10C2033  +
jmp loc_1009DA2  +
***
mov ecx [esi+8] +
cmp dword ptr [ecx+4] 0 +
mov edi [ebp+14h] +
jz loc_1063DC2  +
call sub_10C2033  +
jmp loc_1063DF3  +
cmp dword ptr [edi] 0 +
jnz loc_1009DA2  +
mov byte ptr [ebp+0Ch] 0 +
call sub_100ABA9  +
test eax eax +
jz loc_1063DE8  +
mov ecx eax +
call sub_10B25E1  +
neg al  +
sbb al al +
inc al  +
mov [ebp+0Ch] al +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+8] +
call sub_10C2422  +
cmp dword ptr [edi] 0 +
jnz loc_1009DA2  +
mov eax [ebp+18h] +
mov byte ptr [eax] 0 +
jmp loc_1009DA2  +
***
xor ecx ecx +
inc ecx  +
jmp loc_1042508  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10425AA  +
***
call sub_10159B1  +
jmp loc_1027AB0  +
***
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10426CB  +
***
xor al al +
jmp loc_102AA12  +
***
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1037D20  +
***
push edi  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1037D16  +
***
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102A2F7  +
***
mov ecx [ecx+8] +
jmp loc_1041F95  +
***
xor edi edi +
jmp sub_1043269  +
***
xor edi edi +
jmp sub_10334A9  +
***
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_10334C5  +
push ebx  +
call ds:SetLastError  +
jmp locret_10334D6  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1050DFB  +
***
mov ecx [ebp-28h] +
lea eax [ebp-48h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1027A20  +
***
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10333A1  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1033397  +
push 80004005h  +
jmp loc_1063EDF  +
***
push 80070057h  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1042F57  +
***
push 80070057h  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1042F64  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10156B5  +
***
sub eax 8 +
jz loc_1063F45  +
push 80004001h  +
jmp loc_1027B4D  +
***
push dword ptr [ebp+14h]  +
push ecx  +
mov ecx [esi+6Ch] +
call sub_10C24CF  +
jmp loc_102911C  +
***
push dword ptr [ebp+14h]  +
push ecx  +
mov ecx [esi+6Ch] +
call sub_10A4FD1  +
jmp loc_102911C  +
***
mov ecx [ebp-28h] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1024B31  +
***
or byte ptr [ebp-1Ch] 8 +
jmp loc_1028349  +
***
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1015890  +
***
push 0  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1015886  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_101A0C5  +
***
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102A99C  +
***
cld   +
jmp fword ptr [edx+0]  +
***
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10525EF  +
***
lea ecx [ebp-28h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10525BA  +
***
mov esi [ebp-14h] +
jmp loc_10640E1  +
push esi  +
call sub_10162D5  +
add esi 54h +
cmp esi [ebp+10h] +
jnz loc_10640D8  +
push 0  +
push 0  +
call _CxxThrowException  +
***
mov esi [ebp-14h] +
jmp loc_106410F  +
push esi  +
call sub_10162D5  +
add esi 54h +
cmp esi [ebp+8] +
jnz loc_1064106  +
push 0  +
push 0  +
call _CxxThrowException  +
***
lea eax [ebp+var_8] +
push eax  +
call sub_1024C9C  +
jmp locret_10283BD  +
***
mov ecx [ebp+8] +
lea eax [ebp-54h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
jmp loc_1043186  +
***
lea ecx [ebp-54h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
jmp loc_1043173  +
***
lea eax [ebp-54h] +
jmp loc_1064149  +
***
push 80004005h  +
lea ecx [ebp-54h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1064149  +
***
lea esi [eax+10h] +
movs   +
movs   +
movs   +
mov eax [ebp-38h] +
mov ecx [ebp-3Ch] +
add eax ecx +
cmp [ebp-2Ch] eax +
jge loc_1064186  +
mov [ebp-2Ch] eax +
lea ecx [ebp-28h] +
call sub_1051C93  +
jmp loc_104311C  +
***
push 80070057h  +
lea ecx [ebp-54h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea eax [ebp-54h] +
push eax  +
push offset aItoolbarAddbit  +
call ds:?TraceSnapinError@@YGXPBGABVSC@mmcerror@@@Z  +
lea ecx [ebp-54h] +
call ds:?Clear@SC@mmcerror@@QAEXXZ  +
jmp loc_104315F  +
***
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_1024EAA  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_104F10B  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1051DAD  +
***
mov ecx edi +
call sub_102A9C8  +
test al al +
jnz loc_10194BC  +
mov ecx [esi+68h] +
call sub_1010BCB  +
test al al +
jz loc_10194BC  +
push ebx  +
push ebx  +
jmp loc_10194B4  +
***
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_104F7C2  +
***
push dword ptr [ebp-6Ch]  +
call sub_1016293  +
push dword ptr [ebp-6Ch]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
mov eax [ebp+0Ch] +
mov ecx [ebp-74h] +
imul eax eax +
push ecx  +
mov ecx [ecx+8] +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
add eax ecx +
push eax  +
call sub_1016293  +
jmp loc_10642E1  +
***
imul edi edi +
push ecx  +
mov ebx ecx +
push ecx  +
sub ebx edi +
push ebx  +
call sub_1042DAD  +
push dword ptr [ebp-6Ch]  +
mov [esi+8] eax +
push ebx  +
push dword ptr [ebp+8]  +
call sub_10C3475  +
lea eax [ebp-68h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_104278A  +
add esp 18h +
jmp loc_1042CFF  +
***
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1042BF9  +
jmp loc_1050228  +
***
mov ecx [ebp-0BCh] +
lea eax [ebp-0D4h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-0C0h] 1 +
jmp loc_1042B7C  +
***
lea eax [ebp-0D4h] +
mov ecx [ebp-0BCh] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_106435F  +
***
mov cl [edi+14h] +
mov al [ebx+8] +
cmp cl al +
jz loc_106436E  +
mov [edi+14h] al +
test byte ptr [esi+68h] 1 +
jz loc_106436E  +
mov eax [edx] +
test byte ptr [eax+16h] 1 +
jz loc_106436E  +
movzx ecx byte ptr [ebx+8] +
mov eax [eax+4] +
push ecx  +
mov ecx [esi+6Ch] +
push eax  +
call sub_100A38A  +
test eax eax +
jnz loc_106436E  +
push 80004005h  +
lea ecx [ebp-0D4h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1064374  +
***
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1042B5D  +
***
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1042870  +
***
xor eax eax +
inc eax  +
jmp loc_1064424  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_10C82EA  +
add esp 14h +
pop esi  +
retn   +
***
push offset dword_106D308  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1027C8D  +
***
push offset dword_106D308  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_101A198  +
***
push 0  +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
mov ecx esi +
call ?GetItemRect@CTreeCtrl@@QBEHPAU_TREEITEM@@PAUtagRECT@@H@Z  +
push 105h  +
push 0  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:RedrawWindow  +
jmp loc_101A1AD  +
***
mov [esi+4] edx +
jmp loc_100E528  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10644B9  +
cmp byte ptr [eax+19h] 2 +
jb loc_10644B9  +
push offset dword_106D308  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov esi 8007054Fh +
jmp loc_1024203  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1024203  +
cmp byte ptr [eax+19h] 2 +
jb loc_1024203  +
push esi  +
push offset dword_106D308  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_1024203  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1024203  +
cmp byte ptr [eax+19h] 2 +
jb loc_1024203  +
push esi  +
push dword ptr [ebp+8]  +
push offset dword_106D308  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
jmp loc_1024203  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1064552  +
cmp byte ptr [eax+19h] 2 +
jb loc_1064552  +
push edi  +
push dword ptr [ebp+8]  +
push offset dword_106D308  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
mov esi 80070057h +
jmp loc_1024203  +
***
lea ecx [ebp+0Bh] +
call sub_102BBF1  +
push dword ptr [esi+3Ch]  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_10C3A05  +
lea ecx [ebp+0Bh] +
mov byte ptr [ebp-4] 0 +
call sub_1020056  +
jmp loc_10278E0  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1056101  +
cmp byte ptr [ecx+19h] 3 +
jb loc_1056101  +
push eax  +
push offset dword_106D308  +
push 17h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1056101  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1056101  +
cmp byte ptr [ecx+19h] 3 +
jb loc_1056101  +
push eax  +
push edi  +
push offset dword_106D308  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
jmp loc_1056101  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1056131  +
cmp byte ptr [ecx+19h] 3 +
jb loc_1056131  +
push eax  +
push edi  +
push offset dword_106D308  +
push 19h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
jmp loc_1056131  +
***
xor eax eax +
jmp loc_10556EE  +
***
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10299E9  +
push 80070057h  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10299DF  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call sub_100C799  +
test eax eax +
jnz loc_1064667  +
push 2  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call sub_100E959  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call sub_100C799  +
mov ecx [ebp+0Ch] +
push dword ptr [ecx+esi*4]  +
mov ecx edi +
push eax  +
call sub_105569F  +
jmp loc_1029A04  +
cmp byte ptr [ebp-0Dh] 0 +
jnz loc_10299B5  +
push 2EEFh  +
push dword ptr [ebp+8]  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
jmp loc_10299E9  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call sub_1027213  +
jmp loc_10299DC  +
***
push 0  +
jmp loc_1036E70  +
push 0  +
mov ecx ebx +
call sub_1010F11  +
mov esi 80004002h +
jmp loc_1036E75  +
***
push 0  +
jmp loc_1036F70  +
push 0  +
mov ecx ebx +
call sub_1010F11  +
mov esi 80004002h +
jmp loc_1036F75  +
***
push 0  +
jmp loc_1037298  +
push 0  +
mov ecx ebx +
call sub_1010F11  +
mov esi 80004002h +
jmp loc_103729D  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1041EFA  +
cmp byte ptr [ecx+19h] 3 +
jb loc_1041EFA  +
push eax  +
push offset dword_106D308  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1041EFA  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1041EFA  +
cmp byte ptr [eax+19h] 3 +
jb loc_1041EFA  +
push offset dword_106D308  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1041EFA  +
***
cmp byte ptr [ebp+8] 0 +
jz loc_106478E  +
push 74h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1064786  +
push edi  +
call sub_10C34B7  +
jmp loc_1064788  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1064790  +
xor eax eax +
mov [ebp+8] eax +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
call sub_10C3E8D  +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1041FEE  +
push 1  +
call sub_10C3C03  +
jmp loc_1041FEE  +
***
push offset dword_106D308  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_101AC23  +
***
cmp eax 80004002h +
jz loc_1034BCE  +
push eax  +
call sub_10C7F1B  +
jmp loc_1034BCE  +
***
cmp eax 80004002h +
jz loc_1036E2D  +
push eax  +
call sub_10C7F1B  +
jmp loc_1036E2D  +
***
cmp eax 80004002h +
jz loc_1036EAD  +
push eax  +
call sub_10C7F1B  +
jmp loc_1036EAD  +
***
cmp eax 80004002h +
jz loc_1036F2D  +
push eax  +
call sub_10C7F1B  +
jmp loc_1036F2D  +
***
cmp eax 80004002h +
jz loc_1037255  +
push eax  +
call sub_10C7F1B  +
jmp loc_1037255  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1046D65  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1046D5B  +
***
push offset dword_106D308  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1037183  +
mov eax 80004005h +
jmp loc_1037232  +
***
std   +
jmp lpDst[ecx]  +
***
cmp eax edi +
jz loc_10648CF  +
cmp byte ptr [eax+19h] 2 +
jb loc_10648CF  +
push offset dword_106D308  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
or eax 0FFFFFFFFh +
jmp loc_103710D  +
***
mov eax lpDst +
cmp eax edi +
jz loc_10648CF  +
cmp byte ptr [eax+19h] 2 +
jb loc_10648CF  +
push offset dword_106D308  +
push 1Ch  +
jmp loc_10648C4  +
***
mov eax lpDst +
cmp eax edi +
jz loc_10648CF  +
cmp byte ptr [eax+19h] 2 +
jb loc_10648CF  +
push offset dword_106D308  +
push 1Dh  +
jmp loc_10648C4  +
***
lea ecx [ebp-1Ch] +
mov [ebp-4] bl +
mov dword ptr [ebp-1Ch] offset off_1008170 +
call sub_100F62A  +
jmp loc_10648CF  +
***
or esi 0FFFFFFFFh +
jmp loc_10370EC  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_100FC48  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10275FC  +
***
mov eax [esi+1Ch] +
xor ecx ecx +
mov [eax] cx +
jmp loc_1023815  +
***
lea eax [ebp-28h] +
jmp loc_1029E3B  +
***
lea ecx [ebp-4Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1029E73  +
***
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_102746E  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10274B5  +
***
lea ecx [ebp-0Dh] +
mov [ebp-4] bl +
call ds:??1?$CEventLock@UAppEvents@@@@QAE@XZ  +
jmp loc_1017F61  +
***
push offset dword_106D308  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1024D38  +
***
cmp eax [edi] +
jnz loc_1052A1A  +
mov eax [esi] +
lea ecx [ebp-2Ch] +
push ecx  +
mov ecx esi +
call dword ptr [eax+114h]  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1064A22  +
lea ecx [ebp-2Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1052A1A  +
mov ecx [esi+0A4h] +
add ecx 1F8h +
cmp dword ptr [ecx+78h] 0 +
mov ecx [ecx] +
setz dl  +
shr ecx 4 +
and dl cl +
test dl 1 +
jnz loc_1052A3C  +
test eax eax +
jz loc_1052A3C  +
cmp eax [edi+4] +
jnz loc_1052A3C  +
lea ebx [esi+94h] +
mov ecx ebx +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_1052A3C  +
mov ecx ebx +
call sub_100A5CF  +
mov ecx [eax] +
push 0  +
push dword ptr [ebp-10h]  +
push eax  +
call dword ptr [ecx+10h]  +
jmp loc_1052A3C  +
lea ecx [ebp-3Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1052A73  +
***
push edi  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset dword_106D308  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10C9315  +
jmp loc_101A60C  +
lea ecx [ebp-1Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_101A615  +
***
mov edi [ebp-30h] +
mov esi [ebp-28h] +
jmp sub_102785D  +
***
push offset dword_106D308  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10276F2  +
***
lea eax [ebp-24h] +
push eax  +
push offset aNullHitemPtr  +
call ds:?TraceError@@YGXPBGABVSC@mmcerror@@@Z  +
push 1  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1056D34  +
mov ebx eax +
jmp loc_10283EB  +
lea eax [ebp-24h] +
push eax  +
push offset aNullHnodePtr  +
jmp loc_1064B53  +
***
push offset dword_106D308  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10261AE  +
push 10h  +
push 2EE0h  +
call ds:?MMCErrorBox@@YGHII@Z  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
jmp loc_102624F  +
cmp edx 1 +
jz loc_1064C10  +
mov eax [esi+0A4h] +
push edx  +
lea ecx [eax+44h] +
mov eax [ecx] +
lea edx [ebp+var_24] +
push edx  +
call dword ptr [eax+30h]  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_102628D  +
mov ecx esi +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
test eax eax +
jz loc_1064C25  +
push 1  +
push esi  +
mov ecx eax +
call ?SetActiveView@CFrameWnd@@QAEXPAVCView@@H@Z  +
mov ecx [esi+0A4h] +
lea eax [ebp+var_14] +
push eax  +
call sub_108B669  +
lea ecx [ebp+var_14] +
jmp loc_1064C05  +
push 1  +
push esi  +
mov ecx edi +
call ?SetActiveView@CFrameWnd@@QAEXPAVCView@@H@Z  +
jmp loc_102628D  +
***
push esi  +
push ebx  +
call sub_10249C3  +
mov eax [edi+0A4h] +
mov esi [eax+0D8h] +
push ebx  +
mov ecx edi +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx [esi] +
push 0  +
push 1  +
push 902Ch  +
push eax  +
push esi  +
call dword ptr [ecx+78h]  +
push ebx  +
mov ecx edi +
call sub_100C799  +
test eax eax +
jnz loc_1064CA6  +
push eax  +
push ebx  +
mov ecx edi +
call sub_1049C89  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
jmp loc_10554C6  +
***
push dword ptr [ebp+arg_C]  +
mov ecx edi +
push 2  +
push ebx  +
call sub_10554A3  +
jmp loc_1055656  +
***
lea eax [ebp-20h] +
push eax  +
call sub_10B189F  +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1026461  +
***
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_10C34F5  +
mov ecx eax +
mov [ebp-4] ebx +
mov dword ptr [ebp-10h] 1 +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1026484  +
mov bl 1 +
jmp loc_1026486  +
***
lea ecx [ebp-30h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1026494  +
***
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] edi +
call sub_1051FDF  +
mov ecx [ebp+arg_8] +
cmp ecx [ebp+var_4] +
jz loc_1064D2C  +
mov eax [esi] +
cmp eax [ecx+0Ch] +
jnb loc_1064D43  +
mov eax [ebp+arg_4] +
mov edx [eax+8] +
cmp byte ptr [edx+15h] 0 +
push esi  +
jnz loc_1022C4A  +
push ecx  +
jmp loc_1054F9A  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
call sub_10C440E  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_1022C5A  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1051EEB  +
***
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1051EE1  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1027342  +
***
push 8007000Eh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1027338  +
***
push 1  +
call sub_10C3C03  +
jmp loc_101BF51  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101BF90  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101BFA2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101BFB4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101BFC6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101BFD8  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103548E  +
cmp byte ptr [eax+19h] 3 +
jb loc_103548E  +
push offset dword_106D308  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_103548E  +
***
push 80004003h  +
call sub_10C7F1B  +
jmp loc_100C482  +
***
push [ebp+lpMsg]  +
push eax  +
push [ebp+hWnd]  +
call ds:TranslateAcceleratorW  +
test eax eax +
jz loc_1009B60  +
xor eax eax +
inc eax  +
jmp loc_1009B62  +
***
xor al al +
jmp loc_100DC41  +
***
lea ecx [ebp-2Ch] +
push ecx  +
push 5  +
call eax  +
jmp loc_100A91D  +
***
push edi  +
call FreeLibrary  +
mov [ebp+8] esi +
jmp loc_100A91D  +
***
call GetLastError  +
cmp eax 7Eh +
jz loc_1064E7C  +
cmp eax 0C1h +
jnz loc_1064EAE  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call InterlockedCompareExchange  +
test eax eax +
jz loc_1064E92  +
mov [ebp+8] eax +
jmp loc_100A91D  +
***
mov dword ptr [ebp-4] 1 +
jmp loc_1064EAE  +
call GetLastError  +
cmp eax 7Fh +
jnz loc_10121E8  +
jmp loc_100A946  +
***
push dword ptr [ebp-8]  +
push ebx  +
call DelayLoadFailureHook  +
mov esi eax +
jmp loc_100A955  +
***
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_104E4E3  +
***
xor eax eax +
jmp loc_1048BA5  +
xor eax eax +
inc eax  +
mov dword_10F5384 eax +
jmp loc_1048BA4  +
push 8  +
push ebx  +
mov ebx ds:GetProcessHeap +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
xor eax eax +
cmp edi eax +
jz loc_1048BAC  +
push eax  +
push edi  +
push esi  +
mov [edi] eax +
mov [edi+4] eax +
call dword_10F5390  +
test eax eax +
jz loc_1064F22  +
push edi  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
mov eax [esi] +
jmp loc_1048B9C  +
***
push 0Dh  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_1064F57  +
pop esi  +
retn   +
push 40h  +
mov eax 1000h +
push eax  +
push eax  +
push 0  +
call ds:VirtualAlloc  +
mov esi eax +
test esi esi +
jnz loc_1064F5B  +
xor eax eax +
pop esi  +
retn   +
mov eax [esi] +
push edi  +
push dword_10F5384  +
call dword_10F538C  +
mov edi eax +
test edi edi +
jz loc_1064F80  +
push 8000h  +
push 0  +
push esi  +
call ds:VirtualFree  +
jmp loc_1064F9C  +
mov edi esi +
add esi 0FF0h +
push edi  +
push dword_10F5384  +
call dword_10F5388  +
add edi 10h +
cmp edi esi +
jb loc_1064F88  +
mov eax edi +
pop edi  +
jmp loc_1048B0A  +
***
push [ebp+arg_0]  +
call _callnewh  +
pop ecx  +
test eax eax +
jnz loc_100F32B  +
test byte ptr dword_10FD6E8 1 +
mov esi offset dword_10FD6DC +
jnz loc_1064FDC  +
or dword_10FD6E8 1 +
mov ecx esi +
call sub_10C8036  +
push offset loc_10E810D  +
call sub_100BFD5  +
pop ecx  +
push esi  +
lea ecx [ebp+var_C] +
call sub_10707C3  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
cmp eax esi +
jnz loc_1065003  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_103FB64  +
push 3E8h  +
call ds:Sleep  +
jmp loc_103FB50  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_10F53A0 eax +
xor ebx ebx +
cmp dword_10F5394 ebx +
jnz loc_1065072  +
push eax  +
call ds:_exit  +
***
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax 0FFh +
call sub_100A4DC  +
retn   +
***
jmp fword ptr [eax+3Dh]  +
***
fld  dword ptr [ecx] +
add edi edi +
adc eax offset __setusermatherr +
pop ecx  +
jmp loc_1040E74  +
***
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10C810D  +
jmp locret_100C9DE  +
***
push 8  +
call _lock  +
pop ecx  +
and dword ptr [ebp-4] 0 +
mov eax dword_10F53FC +
mov [ebp-1Ch] eax +
mov eax dword_10F53F8 +
mov [ebp-20h] eax +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
call __dllonexit  +
add esp 0Ch +
mov [ebp-24h] eax +
mov eax [ebp-1Ch] +
mov dword_10F53FC eax +
mov eax [ebp-20h] +
mov dword_10F53F8 eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_106514F  +
mov eax [ebp-24h] +
jmp loc_100C01B  +
***
pop ecx  +
retn   +
***
xor eax eax +
mov [ebp-1Ch] eax +
jmp loc_10415F0  +
***
cmp ax 3 +
jnz loc_104159E  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
test eax ebx +
jz loc_103F79E  +
not eax  +
mov dword_10F52DC eax +
jmp loc_103F7F4  +
***
call ds:GetProcessHeap  +
jmp loc_100ACD0  +
***
cmp byte ptr [ecx+19h] 5 +
jb locret_103FEFF  +
push eax  +
push offset nullsub_2  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
leave   +
retn   +
***
mov eax lpDst +
cmp eax offset lpDst +
jz locret_103FEFF  +
cmp byte ptr [eax+19h] 2 +
jb locret_103FEFF  +
call ds:__imp_GetLastError  +
push eax  +
mov eax lpDst +
push offset nullsub_2  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp locret_103FEFF  +
***
call sub_10C85B1  +
mov esp [ebp-18h] +
jmp loc_100A87A  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100AC9B  +
cmp byte ptr [eax+19h] 5 +
jb loc_100AC9B  +
mov eax [esi+4] +
test eax eax +
jnz loc_1065362  +
call ds:GetProcessHeap  +
push eax  +
mov eax [esi] +
inc eax  +
push eax  +
mov eax lpDst +
push offset nullsub_2  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
jmp loc_100AC9B  +
call edi  +
jmp loc_100AC4C  +
mov eax [esi+4] +
test eax eax +
jnz loc_1065399  +
call edi  +
mov ecx lpDst +
push eax  +
push ebx  +
push offset nullsub_2  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
jmp loc_100AC83  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100AC9A  +
cmp byte ptr [eax+19h] 2 +
jb loc_100AC9A  +
mov eax [esi+4] +
test eax eax +
jnz loc_10653D5  +
call edi  +
mov edi eax +
call ds:__imp_GetLastError  +
push eax  +
mov eax [esi] +
push edi  +
inc eax  +
push eax  +
mov eax lpDst +
push offset nullsub_2  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10C9315  +
jmp loc_100AC9A  +
***
call edi  +
jmp loc_100A7C7  +
mov esi [esi+4] +
test esi esi +
jz loc_1065411  +
mov eax esi +
jmp loc_1065419  +
call edi  +
mov ecx lpDst +
push eax  +
push ebx  +
push offset nullsub_2  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
jmp loc_100A7F6  +
***
mov ecx esi +
call sub_10C85E1  +
jmp loc_1010FC3  +
***
pause   +
jmp loc_1054641  +
***
pause   +
jmp loc_1055A61  +
***
pop ebp  +
retn 4  +
***
push 0  +
call ds:Sleep  +
jmp loc_100C12D  +
***
dec eax  +
jz loc_106546A  +
dec eax  +
jnz loc_106546A  +
push 2  +
jmp loc_1017FC8  +
push 1  +
jmp loc_1017FC8  +
***
mov ecx edi +
call sub_1017C03  +
xor al al +
jmp loc_1056DF2  +
***
mov eax [ecx+4Ch] +
and eax [ebp+arg_0] +
jmp loc_1054499  +
***
and [ebp+arg_C] 0 +
mov esi eax +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_106548E  +
mov ecx [ebp+arg_C] +
jmp loc_1054947  +
dec eax  +
mov [ebx] eax +
jmp loc_10549CF  +
mov eax [ebp+arg_8] +
mov dword ptr [ebx] 7 +
mov ebx [eax] +
mov [edi] ebx +
cmp ebx edx +
jnz loc_10654C0  +
and dword ptr [eax] 0 +
jmp loc_10549CF  +
mov [eax] edx +
jmp loc_10654CB  +
mov edx [eax] +
mov edx [edx+1Ch] +
mov [eax] edx +
mov edx [edx+1Ch] +
cmp edx [edi] +
jz loc_10549CF  +
jmp loc_10654C4  +
mov eax [eax+1Ch] +
cmp [eax+1Ch] esi +
jnz loc_10654D8  +
mov ecx [ebp+var_4] +
and dword ptr [eax+1Ch] 0 +
push esi  +
call sub_10C8653  +
jmp loc_10549E1  +
***
push [ebp+var_4]  +
call sub_1055A1A  +
mov eax [esi+14h] +
jmp loc_10563DD  +
cmp [ebp+arg_4] eax +
jnz loc_106551E  +
push dword ptr [edi+ebx*4+20h]  +
call dword ptr [esi+20h]  +
cmp [ebp+arg_0] eax +
jz loc_106552D  +
push eax  +
push [ebp+arg_0]  +
call dword ptr [esi+28h]  +
test al al +
jnz loc_106552D  +
inc ebx  +
cmp ebx 7 +
jge loc_10563E9  +
jmp loc_10563B6  +
mov eax [edi+ebx*4+20h] +
mov ecx [ebp+arg_8] +
and [ebp+var_8] 0 +
push 1  +
push eax  +
mov [ecx] eax +
call dword ptr [esi+2Ch]  +
jmp loc_10563C4  +
cmp [ebp+var_8] 0 +
jnz loc_10563D9  +
mov ecx [ebp+var_10] +
mov [eax] esi +
mov [eax+4] edi +
mov [eax+8] ecx +
mov [eax+0Ch] bx +
jmp loc_10563D9  +
***
cmp byte ptr [esi+75h] 0 +
jz loc_1065571  +
lea ecx [esi+18h] +
call sub_1017B9B  +
mov eax [esi+14h] +
jmp loc_1054906  +
inc [ebp+arg_4]  +
cmp [ebp+arg_4] 7 +
jl loc_105487E  +
mov [ebp+arg_0] eax +
mov eax [eax+1Ch] +
jmp loc_1054873  +
fadd  ds:dbl_106D130 +
jmp loc_10548DA  +
mov ecx esi +
call sub_10C895D  +
test eax eax +
jnz loc_1054903  +
mov ecx [esi+64h] +
mov eax ecx +
mov [ebp+arg_4] eax +
fild  [ebp+arg_4] +
jmp loc_10548E5  +
fadd  ds:dbl_106D130 +
jmp loc_10548ED  +
***
dec eax  +
jz loc_10655E5  +
dec eax  +
jnz loc_10655E5  +
mov ecx [ecx+70h] +
mov eax [ecx] +
push 2  +
push 8000h  +
call dword ptr [eax]  +
test eax eax +
jz loc_10655FE  +
mov ecx eax +
jmp loc_10C8BBE  +
mov ecx [ecx+70h] +
mov eax [ecx] +
push 1  +
push 1000h  +
call dword ptr [eax]  +
test eax eax +
jz loc_10655FE  +
mov ecx eax +
jmp loc_10C8B94  +
xor eax eax +
retn   +
***
cmp [esi+75h] bl +
jz loc_106560E  +
lea ecx [esi+18h] +
call sub_1017B9B  +
mov eax [esi+14h] +
jmp loc_10562BF  +
cmp [ebp+arg_4] eax +
jnz loc_106562D  +
push dword ptr [edi+ebx*4+20h]  +
call dword ptr [esi+20h]  +
push eax  +
push [ebp+var_14]  +
call dword ptr [esi+28h]  +
test al al +
jnz loc_1065646  +
inc ebx  +
cmp ebx 7 +
jl loc_105622F  +
mov [ebp+var_10] edi +
mov edi [edi+1Ch] +
test edi edi +
jz loc_1065676  +
jmp loc_105622D  +
cmp [ebp+arg_C] 0 +
jz loc_106565E  +
push 1  +
push dword ptr [edi+ebx*4+20h]  +
call dword ptr [esi+2Ch]  +
mov eax [edi+ebx*4+20h] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
mov eax [ebp+arg_0] +
cmp eax [edi+ebx*4+20h] +
jz loc_106568F  +
cmp [ebp+arg_8] 0 +
jz loc_106568F  +
mov [ebp+var_1] 1 +
jmp loc_105623D  +
mov ecx esi +
call sub_10C8937  +
mov edi eax +
test edi edi +
jnz loc_106569B  +
mov [ebp+var_C] 0FFFFFF9Eh +
jmp loc_1056274  +
mov [ebp+var_C] 1 +
jmp loc_1056274  +
mov eax [ebp+var_10] +
and [ebp+var_8] 0 +
mov [eax+1Ch] edi +
jmp loc_1056248  +
mov ebx [ebp+var_8] +
push 0FFFFFFFFh  +
push dword ptr [edi+ebx*4+20h]  +
call dword ptr [esi+2Ch]  +
jmp loc_1056267  +
mov eax [ebp+var_1C] +
mov [ecx+8] eax +
mov ax word ptr [ebp+var_8] +
push 1  +
mov [ecx] esi +
mov [ecx+4] edi +
mov [ecx+0Ch] ax +
call sub_10C8625  +
jmp loc_10562BB  +
mov ecx esi +
call sub_10C8BEA  +
jmp loc_10562C5  +
fadd  ds:dbl_106D130 +
jmp loc_105629D  +
fadd  ds:dbl_106D130 +
jmp loc_10562AB  +
***
dec eax  +
jz loc_1065723  +
dec eax  +
jnz loc_1065723  +
mov dword ptr [esi+30h] 3 +
mov dword ptr [esi+34h] 9 +
mov dword ptr [esi+38h] 200h +
mov dword ptr [esi+3Ch] 1FFh +
jmp loc_100F465  +
mov dword ptr [esi+30h] 2 +
mov dword ptr [esi+34h] 6 +
mov dword ptr [esi+38h] 40h +
mov dword ptr [esi+3Ch] 3Fh +
jmp loc_100F465  +
add eax eax +
shr ebx 1 +
inc ecx  +
or eax edx +
cmp ebx edx +
ja loc_1065744  +
mov [esi+48h] eax +
mov [esi+58h] ecx +
jmp loc_100F490  +
mov eax [esi+64h] +
mov ecx [esi+34h] +
shr eax cl +
add edi edi +
cmp edi eax +
jb loc_1065762  +
mov eax 100000h +
cmp edi eax +
jb loc_100F4AC  +
mov edi eax +
jmp loc_100F4AC  +
mov eax [esi+54h] +
dec ebx  +
push dword ptr [eax+ebx*4]  +
call sub_1017FB7  +
mov eax [esi+54h] +
and dword ptr [eax+ebx*4] 0 +
mov ecx esi +
test ebx ebx +
ja loc_106577C  +
call sub_101836D  +
jmp loc_100F504  +
mov eax [esi+6Ch] +
mov [esi+54h] edx +
mov [esi+50h] edx +
mov [esi+64h] edx +
mov [esi+5Ch] edx +
cmp eax edx +
jz loc_100F4FC  +
mov [eax+24h] ecx +
jmp loc_100F4FC  +
***
push 0FFFFFFA2h  +
jmp loc_1065829  +
fld  ds:dbl_1034858 +
jmp loc_10374A0  +
cmp ecx edi +
jnz loc_10657DD  +
mov eax edi +
mov ecx 80h +
jmp loc_10374C9  +
cmp ecx 3 +
jnz loc_10657EE  +
push ecx  +
pop eax  +
mov ecx 800h +
jmp loc_10374C9  +
push 8  +
pop edi  +
mov edx ecx +
cmp ecx edi +
ja loc_10657F9  +
mov edx edi +
mov eax 400000h +
cmp edx eax +
jnb loc_106580A  +
cmp ecx edi +
ja loc_106580C  +
mov ecx edi +
jmp loc_106580C  +
mov ecx eax +
cmp ecx 40h +
ja loc_1065819  +
xor eax eax +
inc eax  +
jmp loc_10374C9  +
cmp ecx 800h +
sbb eax eax +
add eax 3 +
jmp loc_10374C9  +
pop eax  +
mov [esi+14h] eax +
jmp loc_10374D2  +
***
mov [ebp+var_C] ebx +
cmp [esi+64h] ebx +
jbe loc_10182F8  +
push [ebp+var_C]  +
mov ecx esi +
call sub_105445E  +
cmp [ebp+arg_0] 0 +
mov ebx eax +
mov [ebp+var_10] ebx +
jz loc_106585B  +
push ebx  +
mov ecx esi +
call sub_10545AF  +
lea edi [ebx+4] +
cmp dword ptr [edi] 1E3603Bh +
jnz loc_106587D  +
cmp [ebp+arg_0] 0 +
jz loc_1065910  +
push ebx  +
mov ecx esi +
call sub_1054616  +
jmp loc_1065910  +
and [ebp+var_4] 0 +
jmp loc_10658DA  +
and [ebp+var_8] 0 +
mov eax [ebp+var_8] +
shl eax 2 +
lea ecx [eax+edi] +
cmp dword ptr [ecx] 1E3603Bh +
mov [ebp+var_14] ecx +
jz loc_10658C1  +
lea ebx [eax+edi+20h] +
push 0FFFFFFFFh  +
push dword ptr [ebx]  +
call dword ptr [esi+2Ch]  +
and dword ptr [ebx] 0 +
inc [ebp+var_4]  +
inc [ebp+var_8]  +
cmp [ebp+var_8] 7 +
mov eax [ebp+var_14] +
mov ebx [ebp+var_10] +
mov dword ptr [eax] 1E3603Bh +
jl loc_1065887  +
lea eax [edi+1Ch] +
mov ecx edi +
mov edi [eax] +
and dword ptr [eax] 0 +
lea eax [ebx+4] +
cmp ecx eax +
jz loc_10658DA  +
push ecx  +
mov ecx esi +
call sub_10C8653  +
test edi edi +
jnz loc_1065883  +
cmp [ebp+arg_0] 0 +
jz loc_1065900  +
mov eax [ebp+var_4] +
neg eax  +
push eax  +
lea eax [esi+60h] +
push eax  +
call ds:InterlockedExchangeAdd  +
push ebx  +
mov ecx esi +
mov edi eax +
call sub_1054616  +
jmp loc_106590B  +
mov edi [esi+60h] +
mov eax edi +
sub eax [ebp+var_4] +
mov [esi+60h] eax +
cmp [ebp+var_4] edi +
jz loc_106591F  +
inc [ebp+var_C]  +
mov eax [ebp+var_C] +
cmp eax [esi+64h] +
jb loc_106583E  +
xor ebx ebx +
jmp loc_10182F8  +
cmp eax 2 +
jnz loc_1065933  +
lea ebx [eax+7Eh] +
jmp loc_1018359  +
cmp eax edx +
jnz loc_1018359  +
mov ebx 800h +
jmp loc_1018359  +
***
mov dword_10F53B4 offset a3Comctl32_dll +
jmp loc_10416DB  +
mov dword_10F53B8 offset sub_1050055 +
jmp loc_10416E7  +
mov dword_10F53BC offset sub_10BAF34 +
jmp loc_10416F3  +
***
mov ecx [ecx+0Ch] +
lea eax [eax+ecx*2] +
cmp [ebp+arg_0] eax +
ja loc_100AD4B  +
xor eax eax +
inc eax  +
jmp loc_100AD4D  +
***
mov eax 80070057h +
jmp loc_100B04A  +
cmp [edx] eax +
jnz loc_100B04A  +
mov dword ptr [edx] offset word_100A5FC +
cmp ecx eax +
jz loc_100B04A  +
mov [ecx] eax +
jmp loc_100B04A  +
***
cmp ecx eax +
jz loc_104D934  +
mov eax 80070057h +
jmp loc_104D93D  +
***
mov [ebp+var_4] 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100ADF5  +
cmp byte ptr [eax+19h] 2 +
jb loc_100ADF5  +
push ecx  +
push offset dword_101D758  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_100ADF5  +
mov [ebp+var_4] 8007054Fh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100ADF5  +
cmp byte ptr [eax+19h] 1 +
jb loc_100ADF5  +
push offset dword_101D758  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_100ADF5  +
mov [ebp+var_4] 8007000Eh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100ADF4  +
cmp byte ptr [eax+19h] 2 +
jb loc_100ADF4  +
push edi  +
push offset dword_101D758  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_100ADF4  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100A723  +
cmp byte ptr [eax+19h] 1 +
jb loc_100A723  +
push offset dword_101D758  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
pop esi  +
retn   +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101D6E5  +
cmp byte ptr [eax+19h] 2 +
jb loc_101D6E5  +
push offset dword_101D758  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_101D6E5  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101D6E4  +
cmp byte ptr [eax+19h] 2 +
jb loc_101D6E4  +
push offset dword_101D758  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_101D6E4  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_101D6E4  +
cmp byte ptr [ecx+19h] 2 +
jb loc_101D6E4  +
push eax  +
push edi  +
push offset dword_101D758  +
push 26h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
jmp loc_101D6E4  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101D751  +
cmp byte ptr [eax+19h] 3 +
jb loc_101D751  +
push offset dword_101D758  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_101D751  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1065B84  +
cmp byte ptr [eax+19h] 3 +
jb loc_1065B84  +
push ecx  +
push edi  +
push ebx  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
mov ecx [esi+0Ch] +
mov edi ecx +
jmp loc_101D719  +
push eax  +
push ebx  +
push 29h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_101D740  +
***
or eax 0FFFFFFFFh +
jmp loc_1043872  +
***
mov [ebp+var_4] 80004003h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1021692  +
cmp byte ptr [eax+19h] 2 +
jb loc_1021692  +
push offset dword_101D758  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1021692  +
push edi  +
call ??3@YAXPAX@Z  +
add ebx esi +
xor ecx ecx +
push 2  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
jmp loc_102165E  +
mov [ebp+var_4] 8007000Eh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_102168F  +
cmp byte ptr [eax+19h] 2 +
jb loc_102168F  +
push offset dword_101D758  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_102168F  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1065C59  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_102168F  +
cmp byte ptr [eax+19h] 2 +
jb loc_102168F  +
push [ebp+var_4]  +
push offset dword_101D758  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_102168F  +
***
push [ebp+arg_18]  +
mov ecx edx +
push esi  +
push [ebp+arg_0]  +
call sub_104D91B  +
test eax eax +
jl loc_103B34A  +
test edx edx +
jz loc_103B34A  +
jmp loc_100AF57  +
mov eax [ebp+arg_8] +
cmp [eax] cx +
jz loc_100AFF8  +
cmp [ebp+arg_0] ecx +
jnz loc_1065CD0  +
mov [ebp+var_4] 80070057h +
jmp loc_103B35D  +
mov [ebp+var_4] esi +
jmp loc_100AFF8  +
cmp edi 1 +
jbe loc_100AFF8  +
lea ecx [edi+edi] +
push ebx  +
call sub_10C9250  +
jmp loc_100AFF8  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1065D14  +
push [ebp+arg_18]  +
mov edi [ebp+arg_0] +
lea ecx [ebp+var_C] +
push ecx  +
mov ecx [ebp+var_8] +
add eax eax +
push eax  +
lea ebx [ebp+var_10] +
call sub_10C927E  +
mov ebx [ebp+var_C] +
mov edi [ebp+var_10] +
cmp [ebp+var_4] 0 +
jl loc_103B36F  +
jmp loc_100B002  +
mov [eax] edi +
jmp loc_100B016  +
***
mov [ebp+arg_14] offset word_100A5FC +
jmp loc_104D883  +
mov esi 80070057h +
test ecx ecx +
jz loc_1065D7F  +
xor eax eax +
mov [edi] ax +
jmp loc_1065D7F  +
mov eax [ebp+arg_14] +
cmp [eax] si +
jz loc_104D8DE  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_1065D7F  +
cmp ebx 1 +
jbe loc_104D8DE  +
push [ebp+arg_0]  +
lea ecx [ebx+ebx] +
call sub_10C9250  +
jmp loc_104D8DE  +
mov ecx [ebp+arg_4] +
test [ebp+arg_10] 1C00h +
jz loc_1065DA4  +
test ecx ecx +
jz loc_1065DA4  +
push [ebp+arg_10]  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+var_4] +
xor ecx ecx +
call sub_10C927E  +
mov ebx [ebp+var_4] +
test esi esi +
jl loc_104D90C  +
jmp loc_104D8DE  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
jmp loc_104D8E9  +
mov [eax] ebx +
jmp loc_104D8F4  +
***
mov edi 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100AF11  +
cmp byte ptr [eax+19h] 2 +
jb loc_100AF11  +
push 0  +
push offset dword_101D758  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_100AF11  +
mov edi 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100AF11  +
cmp byte ptr [eax+19h] 2 +
jb loc_100AF11  +
push [ebp+arg_0]  +
push offset dword_101D758  +
push 1Dh  +
jmp loc_1065DEA  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100AF10  +
cmp byte ptr [eax+19h] 2 +
jb loc_100AF10  +
push edi  +
push ebx  +
push offset dword_101D758  +
push 1Eh  +
jmp loc_1065E6D  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100AF10  +
cmp byte ptr [eax+19h] 2 +
jb loc_100AF10  +
push edi  +
push ebx  +
push offset dword_101D758  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
jmp loc_100AF10  +
***
mov [ebp+var_4] 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_104C7B6  +
cmp byte ptr [eax+19h] 2 +
jb loc_104C7B6  +
push offset dword_101D758  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_104C7B6  +
cmp [ebp+var_4] esi +
jz loc_104C79E  +
jmp loc_1065F00  +
mov eax lpDst +
jmp loc_1065F35  +
mov [ebp+var_4] 8007000Eh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_104C7AC  +
cmp byte ptr [eax+19h] 2 +
jb loc_104C7AC  +
push ebx  +
push offset dword_101D758  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_104C7A7  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_104C7AC  +
cmp byte ptr [eax+19h] 2 +
jb loc_104C7AC  +
push [ebp+var_4]  +
push ebx  +
push offset dword_101D758  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
jmp loc_104C7A7  +
cmp eax offset lpDst +
jz loc_104C7B4  +
cmp byte ptr [eax+19h] 2 +
jb loc_104C7B4  +
push offset dword_101D758  +
push 3Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_104C7B4  +
***
mov esi 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101637B  +
cmp byte ptr [eax+19h] 2 +
jb loc_101637B  +
push offset dword_101D758  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_101637B  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_101637B  +
cmp byte ptr [eax+19h] 2 +
jb loc_101637B  +
push esi  +
push offset dword_101D758  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_101637B  +
***
mov edi 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100AE95  +
cmp byte ptr [eax+19h] 2 +
jb loc_100AE95  +
push ebx  +
push offset dword_101D758  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_100AE95  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100AE94  +
cmp byte ptr [eax+19h] 2 +
jb loc_100AE94  +
push edi  +
push esi  +
push ebx  +
push offset dword_101D758  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10C9315  +
jmp loc_100AE94  +
***
mov edi eax +
jmp loc_1043FE8  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1044001  +
cmp byte ptr [eax+19h] 2 +
jb loc_1044001  +
push ebx  +
push dword ptr [esi+8]  +
push edi  +
push offset dword_101D758  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10C9315  +
jmp loc_1044001  +
***
mov ebx eax +
jmp loc_1043895  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10438A9  +
cmp byte ptr [eax+19h] 2 +
jb loc_10438A9  +
push edi  +
push dword ptr [esi+8]  +
push ebx  +
push offset dword_101D758  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10C9315  +
jmp loc_10438A9  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100AE4D  +
cmp byte ptr [eax+19h] 4 +
jb loc_100AE4D  +
push offset dword_101D758  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_100AE4D  +
mov ebx 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100AE4D  +
cmp byte ptr [eax+19h] 2 +
jb loc_100AE4D  +
push offset dword_101D758  +
push 10h  +
jmp loc_10660CF  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100AE4D  +
cmp byte ptr [eax+19h] 2 +
jb loc_100AE4D  +
push ebx  +
push offset dword_101D758  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_100AE4D  +
***
mov esi 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1032A23  +
cmp byte ptr [eax+19h] 2 +
jb loc_1032A23  +
push offset dword_101D758  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1032A23  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1032A14  +
cmp byte ptr [eax+19h] 2 +
jb loc_1032A14  +
push esi  +
push [ebp+hInstance]  +
push [ebp+uID]  +
push offset dword_101D758  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10C9315  +
jmp loc_1032A14  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1032A14  +
cmp byte ptr [eax+19h] 2 +
jb loc_1032A14  +
push esi  +
push offset dword_101D758  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_1032A14  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1029EF4  +
cmp byte ptr [eax+19h] 2 +
jb loc_1029EF4  +
push esi  +
push [ebp+uID]  +
push offset dword_101D758  +
push 3Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
jmp loc_1029EF4  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1029EF4  +
cmp byte ptr [eax+19h] 2 +
jb loc_1029EF4  +
push esi  +
push offset dword_101D758  +
push 40h  +
jmp loc_1066272  +
cmp eax edi +
jle loc_1066240  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi edi +
jl loc_1066250  +
cmp [ebp+hMem] edi +
jnz loc_1066250  +
mov esi 8007000Eh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1029EF4  +
cmp byte ptr [eax+19h] 2 +
jb loc_1029EF4  +
push esi  +
push offset dword_101D758  +
push 3Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_1029EF4  +
***
jnz loc_103B3BD  +
cmp [ebp+VersionInformation.dwMinorVersion] 1 +
jnb loc_103B3B1  +
jmp loc_103B3BD  +
***
push esi  +
mov esi ds:__imp_GetLastError +
call esi  +
test eax eax +
jnz loc_10662B3  +
mov dwErrCode 54Fh +
jmp loc_10662BA  +
call esi  +
mov dwErrCode eax +
mov eax dword_10F53C8 +
pop esi  +
test eax eax +
jnz loc_1050271  +
push dwErrCode  +
call ds:SetLastError  +
xor eax eax +
cmp dwErrCode 7Fh +
setz al  +
pop ebp  +
retn 8  +
***
pop ebp  +
retn 8  +
***
xor edi edi +
jmp sub_103B3CE  +
***
xor edi edi +
jmp sub_104AFEF  +
***
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10C9F51  +
neg eax  +
sbb eax eax +
and eax 7FFF0001h +
add eax 8000FFFFh +
jmp loc_104CD5E  +
***
mov [esi] eax +
test eax eax +
jnz loc_103C8BF  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1066373  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jl loc_103C8BF  +
mov edi 80004005h +
jmp loc_103C8BF  +
***
xor bl bl +
jmp loc_1043FB4  +
mov ecx lpDst +
cmp ecx ebx +
jz loc_1043F69  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1043F69  +
push eax  +
push edi  +
push esi  +
push 22h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
jmp loc_1043F69  +
mov ecx lpDst +
cmp ecx ebx +
jz loc_1043F84  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1043F84  +
push eax  +
push edi  +
push esi  +
push 23h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
jmp loc_1043F84  +
push dword ptr [ebp-1Ch]  +
mov ecx [ebp+10h] +
call sub_101D0E4  +
push dword ptr [ebp+10h]  +
mov ecx [ebp+14h] +
call sub_1022C88  +
jmp loc_1043FB2  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10132E3  +
cmp byte ptr [eax+19h] 3 +
jb loc_10132E3  +
push offset dword_106D94C  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10132E3  +
***
cmp dword ptr [esi+20h] 0 +
jz loc_104E0D7  +
push edi  +
lea edi [esi+4] +
push 0  +
mov ecx edi +
call sub_100EB41  +
test al al +
jz loc_106646E  +
mov ecx edi +
call sub_100A5CF  +
cmp dword ptr [esi+24h] 8 +
jb loc_1066461  +
mov esi [esi+10h] +
jmp loc_1066464  +
add esi 10h +
mov ecx [eax] +
push 0  +
push ebx  +
push esi  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop edi  +
jmp loc_104E0D7  +
***
pop ebp  +
retn 4  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_101F1A6  +
cmp byte ptr [ecx+19h] 2 +
jb loc_101F1A6  +
push eax  +
push offset dword_106D960  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_101F1A6  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_101FDA2  +
cmp byte ptr [ecx+19h] 2 +
jb loc_101FDA2  +
push eax  +
push offset dword_106D960  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_101FDA2  +
***
cmp dword ptr [ebp-2Ch] 3 +
jnz loc_10664EE  +
cmp [ebp-28h] edi +
setl al  +
jmp loc_10664F0  +
mov al bl +
test al al +
jz loc_1021F12  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1021AED  +
***
mov dword ptr [ebp-2Ch] 3 +
mov dword ptr [ebp-28h] 80070057h +
jmp loc_1021AE0  +
***
cmp dword ptr [ebp-24h] 3 +
jnz loc_106652B  +
cmp [ebp-20h] edi +
setl al  +
jmp loc_106652D  +
mov al bl +
test al al +
jz loc_104C20E  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_104C2A9  +
***
mov dword ptr [ebp-24h] 3 +
mov dword ptr [ebp-20h] 80070057h +
jmp loc_104C29C  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
mov dword ptr [ebp-20h] 3 +
mov dword ptr [ebp-1Ch] 80070057h +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_103E21F  +
mov dword ptr [ebp-20h] 3 +
mov dword ptr [ebp-1Ch] 8000FFFFh +
jmp loc_103E212  +
lea ecx [ebp-20h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
jmp loc_103E212  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
mov dword ptr [ebp-20h] 3 +
mov dword ptr [ebp-1Ch] 8000FFFFh +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102CC4F  +
***
lea eax [ebp-20h] +
push eax  +
mov ecx edi +
call sub_102CBE7  +
push eax  +
mov ecx esi +
mov dword ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [esi+4] +
cmp eax ebx +
jz loc_102E8E8  +
cmp dword ptr [esi] 3 +
jnz loc_10665F9  +
cmp eax ebx +
setl al  +
jmp loc_10665FB  +
mov al 1 +
cmp al bl +
jz loc_102E8E8  +
mov ecx esi +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_102E8E8  +
push eax  +
call ds:GlobalFree  +
jmp loc_102E8FB  +
***
cmp dword ptr [ebp-20h] 3 +
jnz loc_106662A  +
cmp [ebp-1Ch] edi +
setl al  +
jmp loc_106662C  +
mov al bl +
test al al +
jz loc_102E012  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102E045  +
mov dword ptr [ebp-20h] 3 +
mov dword ptr [ebp-1Ch] 80004003h +
jmp loc_102E038  +
lea ecx [ebp-20h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
jmp loc_102E038  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
mov [ebp-20h] edi +
mov dword ptr [ebp-1Ch] 8000FFFFh +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102CBAE  +
cmp [ebp-20h] edi +
jnz loc_1066694  +
cmp dword ptr [ebp-1Ch] 0 +
setl al  +
jmp loc_102CBC9  +
mov al bl +
jmp loc_102CBC9  +
***
and [ebp+var_C] 0 +
jmp loc_104B666  +
and [ebp+var_10] eax +
jmp loc_104B676  +
***
xor ecx ecx +
jmp loc_1021827  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
***
cmp [ebp-1Ch] edi +
jnz loc_10666D9  +
cmp [ebp-18h] ebx +
setl al  +
jmp loc_10666DB  +
mov al 1 +
cmp al bl +
jz loc_101DE91  +
lea ecx [ebp-1Ch] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101DE91  +
setl al  +
cmp al bl +
jz loc_101DEAA  +
lea ecx [ebp-1Ch] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101DEAA  +
***
cmp [ebp-24h] edi +
jnz loc_1066717  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_1066719  +
mov al 1 +
cmp al bl +
jz loc_103E44F  +
lea ecx [ebp-24h] +
call esi  +
jmp loc_103E44F  +
setl al  +
cmp al bl +
jz loc_103E474  +
lea ecx [ebp-24h] +
call esi  +
jmp loc_103E474  +
setl al  +
cmp al bl +
jz loc_103E48D  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_106677E  +
cmp byte ptr [eax+19h] 2 +
jb loc_106677E  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
push eax  +
mov eax lpDst +
push offset dword_106D960  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
lea ecx [ebp-24h] +
call esi  +
jmp loc_103E48D  +
***
cmp [ebp-20h] esi +
jnz loc_1066795  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_1066797  +
mov al 1 +
cmp al bl +
jz loc_1021B91  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_1021B91  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_1021BD0  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp loc_1021BED  +
***
cmp [ebp-1Ch] edi +
jnz loc_10667DB  +
cmp [ebp-18h] ebx +
setl al  +
jmp loc_10667DD  +
mov al 1 +
cmp al bl +
jz loc_102C0AA  +
lea ecx [ebp-1Ch] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102C0AA  +
setl al  +
cmp al bl +
jz loc_102C0C3  +
lea ecx [ebp-1Ch] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102C0C3  +
***
cmp [ebp-1Ch] edi +
jnz loc_1066819  +
cmp [ebp-18h] ebx +
setl al  +
jmp loc_106681B  +
mov al 1 +
cmp al bl +
jz loc_102C174  +
lea ecx [ebp-1Ch] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102C174  +
setl al  +
cmp al bl +
jz loc_102C19C  +
lea ecx [ebp-1Ch] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102C19C  +
***
cmp [ebp-20h] edi +
jnz loc_1066857  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_1066859  +
mov al 1 +
cmp al bl +
jz loc_104DAC2  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104DAC2  +
setl al  +
cmp al bl +
jz loc_104DAE9  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104DAE9  +
***
cmp [ebp-20h] edi +
jnz loc_1066895  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_1066897  +
mov al 1 +
cmp al bl +
jz loc_104DC9A  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104DC9A  +
setl al  +
cmp al bl +
jz loc_104DCC1  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104DCC1  +
***
cmp [ebp-20h] edi +
jnz loc_10668D3  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_10668D5  +
mov al 1 +
cmp al bl +
jz loc_104CA37  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104CA37  +
setl al  +
cmp al bl +
jz loc_104CA69  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104CA69  +
***
cmp dword ptr [ebp-24h] 3 +
jnz loc_1066912  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_1066914  +
mov al 1 +
cmp al bl +
jz loc_104B07D  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104B07D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104B0A1  +
cmp dword ptr [ebp-24h] 3 +
jnz loc_1066943  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_1066945  +
mov al 1 +
cmp al bl +
jz loc_104B0D1  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104B0D1  +
setl al  +
cmp al bl +
jz loc_104B0F6  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104B0F6  +
***
cmp dword ptr [ebp-24h] 3 +
jnz loc_1066982  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_1066984  +
mov al 1 +
cmp al bl +
jz loc_101E6F9  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101E6F9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101E71D  +
cmp dword ptr [ebp-24h] 3 +
jnz loc_10669B3  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_10669B5  +
mov al 1 +
cmp al bl +
jz loc_101E74D  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101E74D  +
cmp [ebp-24h] esi +
jnz loc_10669D8  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_10669DA  +
mov al 1 +
cmp al bl +
jz loc_101E790  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101E790  +
***
cmp [ebp-1Ch] edi +
jnz loc_10669FD  +
cmp [ebp-18h] ebx +
setl al  +
jmp loc_10669FF  +
mov al 1 +
cmp al bl +
jz loc_1045C20  +
lea ecx [ebp-1Ch] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_1045C20  +
setl al  +
cmp al bl +
jz loc_1045C39  +
lea ecx [ebp-1Ch] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_1045C39  +
***
cmp dword ptr [ebp-24h] 3 +
jnz loc_1066A3C  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_1066A3E  +
mov al 1 +
cmp al bl +
jz loc_102C253  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102C253  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_102C277  +
cmp dword ptr [ebp-24h] 3 +
jnz loc_1066A6D  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_1066A6F  +
mov al 1 +
cmp al bl +
jz loc_102C2A7  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102C2A7  +
setl al  +
cmp al bl +
jz loc_102C2CF  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102C2CF  +
***
cmp dword ptr [ebp-20h] 3 +
jnz loc_1066AAC  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_1066AAE  +
mov al 1 +
cmp al bl +
jz loc_104B8EF  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104B8EF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104B913  +
cmp [ebp-20h] esi +
jnz loc_1066ADC  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_1066ADE  +
mov al 1 +
cmp al bl +
jz loc_104B946  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104B946  +
setl al  +
cmp al bl +
jz loc_104BA2F  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104BA2F  +
setl al  +
cmp al bl +
jz loc_104B980  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104B980  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp loc_104B9B9  +
***
cmp [ebp-24h] esi +
jnz loc_1066B47  +
cmp dword ptr [ebp-20h] 0 +
setl al  +
jmp loc_1066B49  +
mov al bl +
test al al +
jz loc_104B1F3  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_104B241  +
mov [ebp-24h] esi +
mov dword ptr [ebp-20h] 80004005h +
jmp loc_104B22A  +
***
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1066BF9  +
cmp dword ptr [ebp-30h] 3 +
jnz loc_1066B92  +
cmp [ebp-2Ch] ebx +
setl al  +
jmp loc_1066B94  +
mov al 1 +
cmp al bl +
jz loc_104C60D  +
jmp loc_1066BEC  +
cmp dword ptr [ebp-30h] 3 +
jnz loc_1066BAC  +
cmp [ebp-2Ch] ebx +
setl al  +
jmp loc_1066BAE  +
mov al 1 +
cmp al bl +
jz loc_104C63E  +
jmp loc_1066BEC  +
cmp dword ptr [ebp-30h] 3 +
jnz loc_1066BC6  +
cmp [ebp-2Ch] ebx +
setl al  +
jmp loc_1066BC8  +
mov al 1 +
cmp al bl +
jz loc_104C6D6  +
lea ecx [ebp-30h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_104C6D6  +
mov dword ptr [ebp-30h] 3 +
mov dword ptr [ebp-2Ch] 8007000Eh +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
jmp loc_104C6EA  +
***
setl al  +
cmp al bl +
jz loc_102D42E  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102D43B  +
***
cmp dword ptr [ebp-1Ch] 3 +
jnz loc_1066C2C  +
cmp [ebp-18h] ebx +
setl al  +
jmp loc_1066C2E  +
mov al 1 +
cmp al bl +
jz loc_104DFFD  +
lea ecx [ebp-1Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_104DFFD  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
mov [ebp-20h] edi +
mov dword ptr [ebp-1Ch] 80070057h +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102E85D  +
cmp [ebp-20h] edi +
jnz loc_1066C6E  +
cmp dword ptr [ebp-1Ch] 0 +
setl al  +
jmp loc_1066C70  +
mov al bl +
test al al +
jz loc_102E82B  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_102E82B  +
push 42h  +
pop eax  +
jmp loc_102E838  +
lea ecx [ebp-20h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
jmp loc_102E850  +
***
cmp dword ptr [ebp-1Ch] 3 +
jnz loc_1066CAA  +
cmp [ebp-18h] ebx +
setl al  +
jmp loc_1066CAC  +
mov al 1 +
cmp al bl +
jz loc_102CA97  +
lea ecx [ebp-1Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_102CA97  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
mov [ebp-20h] edi +
mov dword ptr [ebp-1Ch] 8000FFFFh +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102DF1E  +
cmp [ebp-20h] edi +
jnz loc_1066CEF  +
cmp dword ptr [ebp-1Ch] 0 +
setl al  +
jmp loc_102DF39  +
mov al bl +
jmp loc_102DF39  +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_103E2A3  +
***
cmp dword ptr [ebp-24h] 3 +
jnz loc_1066D10  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_1066D12  +
mov al 1 +
cmp al bl +
jz loc_101E1AD  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101E1AD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101E1D1  +
cmp dword ptr [ebp-24h] 3 +
jnz loc_1066D41  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_1066D43  +
mov al 1 +
cmp al bl +
jz loc_101E201  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101E201  +
setl al  +
cmp al bl +
jz loc_101E229  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_101E229  +
***
cmp [ebp-20h] edi +
jnz loc_1066D7F  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_1066D81  +
mov al 1 +
cmp al bl +
jz loc_104D65E  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104D65E  +
setl al  +
cmp al bl +
jz loc_104D6A7  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104D6A7  +
***
cmp dword ptr [ebp-24h] 3 +
jnz loc_1066DBE  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_1066DC0  +
mov al 1 +
cmp al bl +
jz loc_102C45F  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102C45F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_102C483  +
cmp dword ptr [ebp-24h] 3 +
jnz loc_1066DEF  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_1066DF1  +
mov al 1 +
cmp al bl +
jz loc_102C4B3  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102C4B3  +
setl al  +
cmp al bl +
jz loc_102C4D8  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102C4D8  +
***
lea eax [ebp-88h] +
push eax  +
lea ecx [ebp-6Ch] +
mov byte ptr [ebp-4] 7 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp-58h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
xor ebx ebx +
inc ebx  +
or [ebp-5Ch] ebx +
lea ecx [ebp-88h] +
mov byte ptr [ebp-4] 6 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov [ebp-4] ebx +
mov eax offset loc_102C622 +
retn   +
***
cmp dword ptr [ebp-20h] 3 +
jnz loc_1066F04  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_1066F06  +
mov al 1 +
cmp al bl +
jz loc_104AD8D  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
jmp loc_104AE12  +
cmp dword ptr [ebp-20h] 3 +
jnz loc_1066F35  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_1066F37  +
mov al 1 +
cmp al bl +
jz loc_104ADBE  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104ADBE  +
setl al  +
jmp loc_104ADF6  +
***
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_103B513  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_103B513  +
***
xor eax eax +
jmp loc_103DF85  +
cmp dword ptr [ebp-3Ch] 3 +
jnz loc_1066F84  +
cmp [ebp-38h] ebx +
setl al  +
jmp loc_1066F86  +
mov al 1 +
cmp al bl +
jz loc_103DFC9  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
jmp loc_103E142  +
cmp dword ptr [ebp-3Ch] 3 +
jnz loc_1066FB5  +
cmp [ebp-38h] ebx +
setl al  +
jmp loc_1066FB7  +
mov al 1 +
cmp al bl +
jz loc_103DFF4  +
lea ecx [ebp-3Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_103DFF4  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1066F9B  +
cmp dword ptr [ebp-3Ch] 3 +
jnz loc_1066FEA  +
cmp [ebp-38h] ebx +
setl al  +
jmp loc_1066FEC  +
mov al 1 +
cmp al bl +
jz loc_103E02C  +
jmp loc_1066FCD  +
cmp dword ptr [ebp-3Ch] 3 +
jnz loc_1067007  +
cmp [ebp-38h] ebx +
setl al  +
jmp loc_103E159  +
mov al 1 +
jmp loc_103E159  +
cmp dword ptr [ebp-3Ch] 3 +
jnz loc_106701F  +
cmp [ebp-38h] ebx +
setl al  +
jmp loc_103E163  +
mov al 1 +
jmp loc_103E163  +
cmp dword ptr [ebp-3Ch] 3 +
jnz loc_1067034  +
cmp [ebp-38h] ebx +
setl al  +
jmp loc_1067036  +
mov al 1 +
cmp al bl +
jz loc_103E0E2  +
lea ecx [ebp-3Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_103E0E2  +
lea eax [ebp-4Ch] +
push eax  +
call sub_102E8A5  +
mov byte ptr [ebp-4] 9 +
jmp loc_103E106  +
cmp dword ptr [ebp-3Ch] 3 +
jnz loc_106706F  +
cmp [ebp-38h] ebx +
setl al  +
jmp loc_103E122  +
mov al 1 +
jmp loc_103E122  +
***
cmp [ebp-24h] edi +
jnz loc_1067086  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_104B301  +
***
mov al 1 +
jmp loc_104B301  +
***
cmp dword ptr [ebp-24h] 3 +
jnz loc_106709B  +
cmp [ebp-20h] ecx +
setl al  +
jmp loc_106709D  +
mov al bl +
test al al +
jz loc_102D2B1  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102D35D  +
cmp dword ptr [ebp-24h] 3 +
jnz loc_10670C9  +
cmp dword ptr [ebp-20h] 0 +
setl al  +
jmp loc_102D378  +
mov al bl +
jmp loc_102D378  +
cmp dword ptr [ebp-24h] 3 +
jnz loc_10670E2  +
cmp dword ptr [ebp-20h] 0 +
setl al  +
jmp loc_102D382  +
mov al bl +
jmp loc_102D382  +
cmp dword ptr [ebp-24h] 3 +
jnz loc_10670FB  +
cmp dword ptr [ebp-20h] 0 +
setl al  +
jmp loc_102D388  +
mov al bl +
jmp loc_102D388  +
***
cmp dword ptr [ebp-3Ch] 3 +
jnz loc_1067110  +
cmp [ebp-38h] ebx +
setl al  +
jmp loc_1067112  +
mov al 1 +
cmp al bl +
jz loc_102C8D8  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102CA0D  +
call ds:__imp_GetLastError  +
mov [ebp-3Ch] edi +
mov [ebp-38h] eax +
jmp loc_102CA00  +
cmp dword ptr [ebp-3Ch] 3 +
jnz loc_106714E  +
cmp [ebp-38h] ebx +
setl al  +
jmp loc_102CA27  +
mov al 1 +
jmp loc_102CA27  +
cmp dword ptr [ebp-3Ch] 3 +
jnz loc_1067163  +
cmp [ebp-38h] ebx +
setl al  +
jmp loc_1067165  +
mov al 1 +
cmp al bl +
jz loc_102C992  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
jmp loc_102C9F2  +
cmp dword ptr [ebp-3Ch] 3 +
jnz loc_1067187  +
cmp [ebp-38h] ebx +
setl al  +
jmp loc_1067189  +
mov al 1 +
cmp al bl +
jz loc_102C9C3  +
jmp loc_106716D  +
lea ecx [ebp-3Ch] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
jmp loc_106716D  +
mov dword ptr [ebp-3Ch] 3 +
mov dword ptr [ebp-38h] 8000FFFFh +
jmp loc_102C9F2  +
mov dword ptr [ebp-3Ch] 3 +
mov dword ptr [ebp-38h] 8000FFFFh +
jmp loc_102C9F7  +
***
push 0  +
jmp loc_102EACB  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
jmp loc_102EAD0  +
***
mov esi [ebp-14h] +
jmp loc_1067200  +
push esi  +
call sub_103E26D  +
add esi 4 +
cmp esi [ebp+10h] +
jnz loc_10671F7  +
push 0  +
push 0  +
call _CxxThrowException  +
***
cmp dword ptr [ebp-24h] 3 +
jnz loc_106721C  +
cmp [ebp-20h] edi +
setl al  +
jmp loc_106721E  +
mov al bl +
test al al +
jz loc_102E9B0  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_102EA4E  +
cmp dword ptr [ebp-24h] 3 +
jnz loc_1067249  +
cmp [ebp-20h] edi +
setl al  +
jmp loc_106724B  +
mov al bl +
test al al +
jz loc_102E9EC  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_102EA3E  +
setl al  +
test al al +
jz loc_102EA21  +
cmp byte ptr [ebp+10h] 0 +
jnz loc_1067282  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-24h] +
call esi  +
lea eax [ebp-34h] +
jmp loc_102EA24  +
***
cmp [ebp-40h] edi +
jnz loc_1067297  +
cmp [ebp-3Ch] ebx +
setl al  +
jmp loc_1067299  +
mov al 1 +
cmp al bl +
jz loc_102DCB9  +
mov ecx [ebp+8] +
lea eax [ebp-40h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] esi +
jmp loc_102DD9A  +
setl al  +
cmp al bl +
jz loc_102DCE7  +
mov ecx [ebp+8] +
lea eax [ebp-40h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] esi +
jmp loc_102DD89  +
cmp [ebp-40h] edi +
jnz loc_10672E3  +
cmp [ebp-3Ch] ebx +
setl al  +
jmp loc_10672E5  +
mov al 1 +
cmp al bl +
jz loc_102DD2B  +
jmp loc_10672C1  +
setl al  +
cmp al bl +
jz loc_102DD4D  +
jmp loc_10672C1  +
cmp [ebp-50h] edi +
jnz loc_1067309  +
cmp [ebp-4Ch] ebx +
setl al  +
jmp loc_106730B  +
mov al 1 +
cmp al bl +
jz loc_102DD6C  +
cmp [ebp+14h] bl +
jnz loc_1067325  +
lea eax [ebp-50h] +
push eax  +
lea ecx [ebp-40h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea eax [ebp-50h] +
jmp loc_102DD6F  +
***
call loc_10C8063  +
int 3  +
mov esi [ebp+var_14] +
jmp loc_1067341  +
push esi  +
call sub_103E26D  +
add esi 4 +
cmp esi [ebp+arg_0] +
jnz loc_1067338  +
push 0  +
push 0  +
call _CxxThrowException  +
mov eax offset word_100A5FC +
jmp loc_102D6F9  +
***
cmp dword ptr [ebp-50h] 3 +
jnz loc_1067367  +
cmp [ebp-4Ch] ebx +
setl al  +
jmp loc_1067369  +
mov al 1 +
cmp al bl +
jz loc_104BAEC  +
lea ecx [ebp-50h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104BAEC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104BA5F  +
mov eax [eax+4] +
jmp loc_104BC6C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104BBBD  +
***
cmp dword ptr [ebp-54h] 3 +
jnz loc_10673AB  +
cmp [ebp-50h] edi +
setl al  +
jmp loc_10673AD  +
mov al bl +
test al al +
jz loc_103DD60  +
lea eax [ebp-54h] +
push eax  +
mov ecx esi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-44h] ebx +
jmp loc_103DE43  +
lea ecx [ebp-54h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
push eax  +
mov ecx esi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-44h] ebx +
jmp loc_103DE3B  +
mov dword ptr [ebp-54h] 3 +
mov dword ptr [ebp-50h] 8007000Eh +
lea eax [ebp-54h] +
jmp loc_10673D2  +
mov dword ptr [ebp-54h] 3 +
mov dword ptr [ebp-50h] 8007000Eh +
jmp loc_103DE24  +
lea ecx [ebp-54h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
jmp loc_103DE27  +
mov dword ptr [ebp-54h] 3 +
mov dword ptr [ebp-50h] 8000FFFFh +
jmp loc_103DE24  +
***
mov ecx [ebp-21Ch] +
lea eax [ebp-234h] +
push eax  +
mov dword ptr [ebp-234h] 3 +
mov dword ptr [ebp-230h] 80004005h +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102EBFE  +
***
cmp dword ptr [ebp-24h] 3 +
jnz loc_1067464  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_1067466  +
mov al 1 +
cmp al bl +
jz loc_102ED16  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_102EE2D  +
mov eax [ebp+0Ch] +
mov [ebp-10h] eax +
jmp loc_102ED3D  +
add dword ptr [ebp-10h] 2 +
mov eax [ebp-10h] +
movzx eax word ptr [eax] +
cmp ax bx +
jz loc_102ED5C  +
jmp loc_102ED4C  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] edi +
jmp loc_102EE20  +
cmp dword ptr [ebp-24h] 3 +
jnz loc_10674C3  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_102EE4B  +
mov al 1 +
jmp loc_102EE4B  +
cmp dword ptr [edi+18h] 8 +
jb loc_10674D2  +
mov esi [esi] +
push ebx  +
push esi  +
call ds:CreateDirectoryW  +
test eax eax +
jnz loc_102EDBC  +
lea ecx [ebp-24h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
jmp loc_102EE23  +
***
cmp dword ptr [ebp-20h] 3 +
jnz loc_10674FE  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_1067500  +
mov al 1 +
cmp al bl +
jmp loc_1029090  +
push 80004005h  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp loc_101DF99  +
cmp dword ptr [ebp-20h] 3 +
jnz loc_1067528  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_106752A  +
mov al 1 +
cmp al bl +
jz loc_104D5BE  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104D5BE  +
***
cmp dword ptr [ebp-20h] 3 +
jnz loc_106754E  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_1067550  +
mov al 1 +
cmp al bl +
jz loc_104D982  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104D982  +
cmp dword ptr [ebp-20h] 3 +
jnz loc_1067574  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_1067576  +
mov al 1 +
cmp al bl +
jz loc_102F0A7  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102F0A7  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_104DE05  +
cmp byte ptr [ecx+19h] 2 +
jb loc_104DE05  +
push eax  +
push offset dword_106D960  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_104DE05  +
***
cmp [ebp-68h] esi +
jnz loc_10675CD  +
cmp [ebp-64h] ebx +
setl al  +
jmp loc_10675CF  +
mov al 1 +
cmp al bl +
jz loc_104DEA8  +
lea ecx [ebp-68h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104DEA8  +
cmp [ebp-68h] esi +
jnz loc_10675F2  +
cmp [ebp-64h] ebx +
setl al  +
jmp loc_10675F4  +
mov al 1 +
cmp al bl +
jz loc_104DEE5  +
lea ecx [ebp-68h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104DEE5  +
setl al  +
cmp al bl +
jz loc_104DF03  +
lea ecx [ebp-68h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104DF03  +
setl al  +
cmp al bl +
jz loc_104DF33  +
lea ecx [ebp-68h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104DF33  +
setl al  +
cmp al bl +
jz loc_102EF6D  +
lea ecx [ebp-68h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102EF6D  +
setl al  +
cmp al bl +
jz loc_102EF9A  +
lea ecx [ebp-68h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102EF9A  +
cmp [ebp-68h] esi +
jnz loc_106767B  +
cmp [ebp-64h] ebx +
setl al  +
jmp loc_106767D  +
mov al 1 +
cmp al bl +
jz loc_102EFD0  +
lea ecx [ebp-68h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102EFD0  +
***
push dword ptr [ebp-18h]  +
call sub_103BFEF  +
push dword ptr [ebp-18h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
***
push 0  +
push 0  +
call _CxxThrowException  +
***
mov ecx [ebp-1Ch] +
mov [ebp+0Ch] ebx +
sub [ebp+0Ch] edi +
push ebx  +
push dword ptr [ebp+0Ch]  +
call sub_103CAF0  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov [esi+8] eax +
push dword ptr [ebp+8]  +
call sub_10CA7F5  +
lea eax [ebp-14h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_10CA393  +
add esp 18h +
jmp loc_103CAD2  +
***
push 80004005h  +
lea ecx [ebp-28h] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp loc_101E07E  +
push 80004005h  +
lea ecx [ebp-28h] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp loc_101E0E4  +
***
push 80004003h  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp loc_1022722  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor al al +
jmp loc_1022824  +
***
push 80004003h  +
lea ecx [ebp-24h] +
call esi  +
jmp loc_103E324  +
push 80004005h  +
lea ecx [ebp-24h] +
call esi  +
jmp loc_103E34E  +
push ebx  +
push edi  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-60h] +
call sub_101EB5D  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call sub_100AD56  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 4 +
call sub_102285F  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-38h] +
call sub_101DDD9  +
test eax eax +
jz loc_106782E  +
push 80004005h  +
lea ecx [ebp-24h] +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call sub_100A77D  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 2 +
call sub_101EB25  +
jmp loc_103E357  +
***
push 8000FFFFh  +
lea ecx [ebp-2Ch] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp loc_102D4B6  +
***
mov [ebp-14h] eax +
mov eax [ebp+0Ch] +
mov [ebp-10h] eax +
lea eax [ebp-18h] +
push eax  +
mov dword ptr [ebp-18h] offset off_1067880 +
call sub_101EA69  +
jmp loc_102CEF3  +
***
cmp dword ptr [ebp-40h] 3 +
jnz loc_106789E  +
cmp [ebp-3Ch] ebx +
setl al  +
jmp loc_10678A0  +
mov al 1 +
cmp al bl +
jz loc_102DB22  +
lea ecx [ebp-40h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102DB22  +
setl al  +
cmp al bl +
jz loc_102DB4C  +
lea ecx [ebp-40h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102DB4C  +
cmp dword ptr [ebp-40h] 3 +
jnz loc_10678DD  +
cmp [ebp-3Ch] ebx +
setl al  +
jmp loc_10678DF  +
mov al 1 +
cmp al bl +
jz loc_102DB9F  +
lea ecx [ebp-40h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102DB9F  +
setl al  +
cmp al bl +
jz loc_102DBC9  +
lea ecx [ebp-40h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102DBC9  +
lea ecx [ebp-2Ch] +
call sub_1023117  +
push 1  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [ebp-2Ch] +
mov [eax+4] ecx +
mov [ebp-48h] esp +
mov dword ptr [eax] 0Ah +
push ds:off_106798C  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 5 +
call sub_101DF07  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1067949  +
lea eax [ebp-28h] +
mov ecx [ebp-30h] +
push eax  +
call sub_102B350  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100CD3C  +
jmp loc_102DBDD  +
push 0FFFFFFFFh  +
lea ecx [esi+0Ch] +
push ebx  +
call sub_1011BBD  +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
add esi 0Ch +
mov [ebp-30h] esp +
mov dword ptr [eax] 0Bh +
mov [eax+4] esi +
push ds:off_106798C  +
jmp loc_104E0A4  +
***
lea eax [ebp-74h] +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0Ah +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
xor esi esi +
inc esi  +
or [ebp-18h] esi +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 9 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov [ebp-4] esi +
mov eax offset loc_1067AA8 +
retn   +
mov byte ptr [ebp-4] 0 +
jmp loc_104EB44  +
***
lea eax [ebp-0B8h] +
push eax  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 0Fh +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-0B8h] +
mov dword ptr [ebp-3Ch] 1 +
mov byte ptr [ebp-4] 0Eh +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_1067B3E +
retn   +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 1 +
call sub_101D546  +
mov byte ptr [ebp-4] 0 +
jmp loc_103E955  +
***
lea eax [ebp-0ACh] +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 10h +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-0ACh] +
mov dword ptr [ebp-48h] 1 +
mov byte ptr [ebp-4] 0Fh +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov dword ptr [ebp-4] 4 +
mov eax offset loc_1067C2C +
retn   +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 3 +
call sub_101D546  +
xor ebx ebx +
push ebx  +
push 1  +
jmp loc_104AC95  +
***
mov al 1 +
jmp loc_104AC74  +
***
push 1  +
push eax  +
call sub_103BEFB  +
mov [esi+8] eax +
jmp loc_103C28B  +
***
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp loc_104D409  +
***
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp loc_103B5C2  +
***
push 8000FFFFh  +
lea ecx [ebp-2Ch] +
call ds:?Throw@SC@mmcerror@@QAEXJ@Z  +
jmp loc_104C834  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_104C97B  +
***
lea eax [ebp-54h] +
lea eax [ebp-3Ch] +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 9 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
xor ebx ebx +
inc ebx  +
lea ecx [ebp-3Ch] +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 8 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov [ebp-4] ebx +
mov eax offset loc_10224C9 +
retn   +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_102CD46  +
cmp byte ptr [ecx+19h] 2 +
jb loc_102CD46  +
push eax  +
push offset dword_106D960  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_102CD46  +
***
lea eax [ebp-0C4h] +
push eax  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 0Eh +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp-50h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or dword ptr [ebp-68h] 1 +
lea ecx [ebp-0C4h] +
mov byte ptr [ebp-4] 0Dh +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov dword ptr [ebp-4] 3 +
mov eax offset loc_1067E50 +
retn   +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 1 +
call sub_101D546  +
mov byte ptr [ebp-4] 0 +
jmp loc_103E857  +
***
mov al 1 +
cmp al bl +
jz loc_103E753  +
mov ecx [ebp-50h] +
lea eax [ebp-64h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-68h] edi +
jmp loc_103E83E  +
cmp dword ptr [ebp-64h] 3 +
jnz loc_1067E92  +
cmp [ebp-60h] ebx +
setl al  +
jmp loc_1067E94  +
mov al 1 +
cmp al bl +
jz loc_103E7B6  +
lea ecx [ebp-64h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_103E7B6  +
cmp dword ptr [ebp-64h] 3 +
jnz loc_1067EB8  +
cmp [ebp-60h] ebx +
setl al  +
jmp loc_1067EBA  +
mov al 1 +
cmp al bl +
jz loc_103E7FA  +
lea ecx [ebp-64h] +
mov [ebp-52h] bl +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_103E7FA  +
cmp dword ptr [ebp-64h] 3 +
jnz loc_1067EE4  +
cmp [ebp-60h] ebx +
setl al  +
jmp loc_104ED59  +
mov al 1 +
jmp loc_104ED59  +
push dword ptr [ebp-90h]  +
lea eax [ebp-84h] +
push dword ptr [ebp-74h]  +
push eax  +
call sub_10CA3E6  +
push eax  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 15h +
call esi  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 11h +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-60h] ebx +
jz loc_103E824  +
cmp dword ptr [ebp-64h] 3 +
jnz loc_1067F34  +
cmp [ebp-60h] ebx +
setl al  +
jmp loc_103E824  +
mov al 1 +
jmp loc_103E824  +
***
xor edi edi +
jmp sub_102F1A9  +
***
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_102F1C5  +
push ebx  +
call ds:SetLastError  +
jmp locret_102F1D6  +
***
mov edi [esi] +
and dword ptr [esi] 0 +
jmp loc_1021A71  +
push 1  +
mov ecx esi +
call sub_10542B0  +
jmp loc_1021A7A  +
***
mov eax [eax] +
jmp loc_103E9D4  +
push edi  +
call ds:DestroyIcon  +
jmp loc_103E9F4  +
***
mov eax offset word_100A5FC +
jmp loc_100B747  +
mov ecx esi +
call sub_10CBAEE  +
test eax eax +
jmp loc_100B75B  +
cmp [esi+0Ch] ebx +
jle loc_100B761  +
jmp loc_10680EB  +
mov eax [esi+4] +
cmp eax ebx +
jz loc_100B76A  +
push dword ptr [esi+8]  +
push eax  +
call ds:?ReleaseSnapinInterface@BookKeeping@@SGJPAUIUnknown@@H@Z  +
mov [esi+30h] bl +
jmp loc_100B76A  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov ecx [ebp-24h] +
and dword ptr [ecx+0Ch] 0 +
call sub_100B724  +
mov dword ptr [ebp-1Ch] 80040205h +
***
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1041890  +
cmp byte ptr [eax+19h] 4 +
jb loc_1041889  +
mov eax [esi+28h] +
cmp eax ebx +
jnz loc_10682D3  +
mov eax offset word_100A5FC +
push eax  +
mov ecx esi +
call sub_10CB774  +
push eax  +
push offset dword_106D9A8  +
push 11h  +
mov eax lpDst +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
jmp loc_1041889  +
***
mov eax offset word_100A5FC +
jmp loc_104180F  +
***
mov eax edi +
jmp loc_101C533  +
mov eax [esi+28h] +
test eax eax +
jnz loc_106832C  +
mov eax edi +
push [ebp+var_C]  +
push eax  +
push dword ptr [esi+8]  +
call ds:?MMCInterfaceError@BookKeeping@@SGXHPBG0@Z  +
mov ebx 80004003h +
jmp loc_101C54D  +
***
mov eax edi +
jmp loc_100B866  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100B881  +
cmp byte ptr [eax+19h] 2 +
jb loc_100B881  +
mov eax [esi+28h] +
test eax eax +
jz loc_106836D  +
mov edi eax +
mov ecx esi +
call sub_10CB774  +
push eax  +
mov eax lpDst +
push edi  +
push offset dword_106D9A8  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
jmp loc_100B881  +
***
mov eax offset word_100A5FC +
jmp loc_10414C1  +
push dword ptr [esi+8]  +
mov ecx edi +
push eax  +
call sub_10417EB  +
mov ebx eax +
jmp loc_10414E4  +
***
push [ebp+arg_0]  +
lea edx [ecx+4] +
push edx  +
push dword ptr [ecx+44h]  +
push dword ptr [ecx+48h]  +
push offset dword_106D9F8  +
push 0Bh  +
jmp loc_10683E2  +
cmp byte ptr [eax+19h] 3 +
jb loc_100B7C6  +
push [ebp+arg_0]  +
lea edx [ecx+4] +
push edx  +
push dword ptr [ecx+44h]  +
push dword ptr [ecx+48h]  +
push offset dword_106D9F8  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CC132  +
jmp loc_100B7C6  +
***
push edi  +
push dword ptr [esi+44h]  +
push dword ptr [esi+48h]  +
push offset dword_106D9F8  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CC016  +
jmp loc_100B717  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_100E5BB  +
cmp byte ptr [eax+19h] 2 +
jb loc_100E5BB  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_106843E  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
mov eax lpDst +
push offset loc_106845C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_100E5BB  +
***
cmp cl [esi-711C38CAh] +
test byte ptr ds:367C86AFh 21h +
mov al 3Dh +
inc ebp  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10126F1  +
cmp byte ptr [eax+19h] 2 +
jb loc_10126F1  +
push esi  +
push [ebp+arg_0]  +
push offset dword_106DA08  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
jmp loc_10126F1  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10684C5  +
cmp byte ptr [eax+19h] 2 +
jb loc_10684C5  +
push offset dword_106DA08  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax 80070057h +
jmp loc_10126C9  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10126B9  +
cmp byte ptr [eax+19h] 2 +
jb loc_10126B9  +
push edi  +
push esi  +
push offset dword_106DA08  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
jmp loc_10126B9  +
mov edi 8007054Fh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10126B9  +
cmp byte ptr [eax+19h] 2 +
jb loc_10126B9  +
push offset dword_106DA08  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10126B9  +
mov edi 8007000Eh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1068588  +
cmp byte ptr [eax+19h] 2 +
jb loc_1068588  +
push offset dword_106DA08  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1068588  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1068588  +
cmp byte ptr [eax+19h] 2 +
jb loc_1068588  +
push edi  +
push offset dword_106DA08  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
test ebx ebx +
jz loc_10126B9  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax+30h]  +
xor ebx ebx +
jmp loc_10126B9  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10685C4  +
cmp byte ptr [eax+19h] 2 +
jb loc_10685C4  +
push offset dword_106DA08  +
push 3Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax 80070057h +
jmp loc_103D642  +
mov esi 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103D63F  +
cmp byte ptr [eax+19h] 2 +
jb loc_103D63F  +
push offset dword_106DA08  +
push 3Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_103D63F  +
mov esi 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103D63F  +
cmp byte ptr [eax+19h] 2 +
jb loc_103D63F  +
push [ebp+arg_0]  +
push offset dword_106DA08  +
push 3Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
jmp loc_103D63F  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_103D63F  +
cmp byte ptr [eax+19h] 2 +
jb loc_103D63F  +
push esi  +
push offset dword_106DA08  +
push 3Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_103D63F  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1068693  +
cmp byte ptr [eax+19h] 2 +
jb loc_1068693  +
push offset dword_106DA08  +
push 40h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax 80070057h +
jmp loc_1012610  +
mov edi 8007054Fh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1012608  +
cmp byte ptr [eax+19h] 2 +
jb loc_1012608  +
push offset dword_106DA08  +
push 41h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1012608  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1012608  +
cmp byte ptr [eax+19h] 2 +
jb loc_1012608  +
push edi  +
lea ecx [ebp+sz] +
push ecx  +
push offset dword_106DA08  +
push 42h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
jmp loc_1012608  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_106872D  +
cmp byte ptr [eax+19h] 2 +
jb loc_106872D  +
push offset dword_106DA08  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax [ebp+8] +
mov dword ptr [eax+4] 80070057h +
jmp loc_104B5EE  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1068760  +
cmp byte ptr [eax+19h] 2 +
jb loc_1068760  +
push offset dword_106DA08  +
push 48h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov edi 80004003h +
jmp loc_104B5E3  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_106878E  +
cmp byte ptr [eax+19h] 2 +
jb loc_106878E  +
push offset dword_106DA08  +
push 49h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov edi 8007000Eh +
jmp loc_104B5E3  +
***
mov eax offset word_100A5FC +
jmp loc_10413F9  +
***
mov ecx [eax] +
push 3Dh  +
pop esi  +
mov [ecx-2] si +
mov ecx [eax] +
mov [ecx-4] si +
and dword ptr [edx] 0 +
jmp loc_104C4D5  +
mov ecx [eax] +
push 3Dh  +
pop esi  +
mov [ecx-2] si +
jmp loc_10687B1  +
***
lea ecx [ebp-24h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] esi +
jmp loc_104D113  +
lea ecx [ebp-24h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
jmp loc_104D0ED  +
***
cmp [ebp-2Ch] esi +
jnz loc_10687FA  +
cmp [ebp-28h] ebx +
setl al  +
jmp loc_10687FC  +
mov al 1 +
cmp al bl +
jz loc_104D022  +
lea ecx [ebp-2Ch] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104D022  +
***
lea ecx [ebp-2Ch] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
mov ecx eax +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104D03E  +
***
lea ecx [ebp-2Ch] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
mov ecx eax +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102D03C  +
***
lea ecx [ebp-18h] +
call sub_102F105  +
xor ebx ebx +
push ebx  +
push ebx  +
call _CxxThrowException  +
int 3  +
xor eax eax +
retn   +
***
lea eax [ecx+0Ch] +
retn   +
***
xor eax eax +
jmp loc_103CC65  +
***
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi+1Ch] 0 +
jmp loc_1050826  +
***
cmp dword ptr [ebp-0B0h] 3 +
jnz loc_1068885  +
cmp [ebp-0ACh] ebx +
setl al  +
jmp loc_1068887  +
mov al 1 +
cmp al bl +
jz loc_104CCE6  +
lea ecx [ebp-0B0h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104CCE6  +
setl al  +
cmp al bl +
jz loc_104CD12  +
lea ecx [ebp-0B0h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_104CD12  +
cmp dword ptr [ebp-0B0h] 3 +
jnz loc_10688D0  +
cmp [ebp-0ACh] ebx +
setl al  +
jmp loc_10688D2  +
mov al 1 +
cmp al bl +
jz loc_102D1A2  +
lea ecx [ebp-0B0h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102D1A2  +
setl al  +
cmp al bl +
jz loc_102D1C6  +
lea ecx [ebp-0B0h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
jmp loc_102D1C6  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_106892B  +
cmp byte ptr [eax+19h] 2 +
jb loc_106892B  +
push offset dword_1016330  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
pop ebp  +
retn 0Ch  +
***
pop ebp  +
retn 4  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1016816  +
cmp byte ptr [eax+19h] 2 +
jb loc_1016816  +
push offset dword_1016330  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1016816  +
***
xor esi esi +
jmp loc_10174FD  +
***
push 8000FFFFh  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ebx  +
cmp eax edi +
jge loc_1032A85  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1032CAE  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1032CAE  +
push eax  +
push offset dword_1016330  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1032CAE  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1032CAE  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1032CAE  +
push eax  +
push offset dword_1016330  +
push 0Ch  +
jmp loc_10689AA  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1032CAE  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1032CAE  +
push eax  +
push offset dword_1016330  +
push 0Dh  +
jmp loc_10689AA  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1032CAE  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1032CAE  +
push eax  +
push offset dword_1016330  +
push 0Eh  +
jmp loc_10689AA  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1032CAE  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1032CAE  +
push eax  +
push offset dword_1016330  +
push 0Fh  +
jmp loc_10689AA  +
xor eax eax +
jmp loc_1032BC7  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1068A83  +
cmp byte ptr [eax+19h] 2 +
jb loc_1068A83  +
push offset dword_1016330  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx esi +
call sub_101C076  +
jmp loc_1032BEF  +
push 8000FFFFh  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ebx  +
cmp eax edi +
jge loc_1032C0C  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1032CAE  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1032CAE  +
push eax  +
push offset dword_1016330  +
push 11h  +
jmp loc_10689AA  +
lea ecx [ebp-34h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
lea ecx [ebp-34h] +
call ebx  +
test eax eax +
jge loc_1032C5B  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1032C9F  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1032C9F  +
push eax  +
push offset dword_1016330  +
push 12h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1032C9F  +
push 8000FFFFh  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ebx  +
test eax eax +
jge loc_1032C6C  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1032C9F  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1032C9F  +
push eax  +
push offset dword_1016330  +
push 13h  +
jmp loc_1068B0D  +
push 8000FFFFh  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ebx  +
test eax eax +
jge loc_1032C90  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1032C90  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1032C90  +
push eax  +
push offset dword_1016330  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1032C90  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1026C9F  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1026C9F  +
push eax  +
push offset dword_1016330  +
push 15h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1026C9F  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jge loc_1026C7F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1026C9F  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1026C9F  +
push eax  +
push offset dword_1016330  +
push 16h  +
jmp loc_1068BD1  +
push dword ptr [ebp-10h]  +
call sub_1032D41  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jge loc_1026C95  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1026C9F  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1026C9F  +
push eax  +
push offset dword_1016330  +
push 17h  +
jmp loc_1068BD1  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_102476C  +
cmp byte ptr [ecx+19h] 2 +
jb loc_102476C  +
push eax  +
push offset dword_1016330  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_102476C  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jge loc_10246E5  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_102476C  +
cmp byte ptr [ecx+19h] 2 +
jb loc_102476C  +
push eax  +
push offset dword_1016330  +
push 19h  +
jmp loc_1068C8E  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jge loc_10246FB  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_102476C  +
cmp byte ptr [ecx+19h] 2 +
jb loc_102476C  +
push eax  +
push offset dword_1016330  +
push 1Ah  +
jmp loc_1068C8E  +
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jge loc_1024706  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_102476C  +
cmp byte ptr [ecx+19h] 2 +
jb loc_102476C  +
push eax  +
push offset dword_1016330  +
push 1Bh  +
jmp loc_1068C8E  +
push 8007000Eh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
cmp eax ebx +
jge loc_1024733  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_102476C  +
cmp byte ptr [ecx+19h] 2 +
jb loc_102476C  +
push eax  +
push offset dword_1016330  +
push 1Ch  +
jmp loc_1068C8E  +
mov ecx [edi] +
cmp ecx ebx +
jz loc_1068DB4  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov [edi] ebx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_102476C  +
cmp byte ptr [eax+19h] 2 +
jb loc_102476C  +
push offset dword_1016330  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_102476C  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10166BF  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10166BF  +
push eax  +
push offset dword_1016330  +
push 1Eh  +
jmp loc_1068F1F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10166BF  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10166BF  +
push eax  +
push offset dword_1016330  +
push 1Fh  +
jmp loc_1068F1F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10166BF  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10166BF  +
push eax  +
push offset dword_1016330  +
push 20h  +
jmp loc_1068F1F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10166BF  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10166BF  +
push eax  +
push offset dword_1016330  +
push 21h  +
jmp loc_1068F1F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016662  +
cmp byte ptr [ecx+19h] 3 +
jb loc_1016662  +
push eax  +
push ebx  +
push 22h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1016662  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10166BF  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10166BF  +
push eax  +
push ebx  +
push 23h  +
jmp loc_1068F1F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10166BF  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10166BF  +
push eax  +
push ebx  +
push 24h  +
jmp loc_1068F1F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10166BF  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10166BF  +
push eax  +
push ebx  +
push 25h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10166BF  +
***
push 8000FFFFh  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call esi  +
test eax eax +
jge loc_101893D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1018944  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1018944  +
push eax  +
push offset dword_1016330  +
push 26h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1018944  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1017028  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1017028  +
push eax  +
push offset unk_106DA54  +
push 0Eh  +
jmp loc_106909D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1017028  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1017028  +
push eax  +
push offset unk_106DA54  +
push 0Fh  +
jmp loc_106909D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1017028  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1017028  +
push eax  +
push offset unk_106DA54  +
push 10h  +
jmp loc_106909D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1017028  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1017028  +
push eax  +
push offset unk_106DA54  +
push 11h  +
jmp loc_106909D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016FD0  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016FD0  +
push eax  +
push offset unk_106DA54  +
push 12h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1016FD0  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1017028  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1017028  +
push eax  +
push offset unk_106DA54  +
push 13h  +
jmp loc_106909D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1017028  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1017028  +
push eax  +
push offset unk_106DA54  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1017028  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1042143  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1042143  +
push eax  +
push offset unk_106DA54  +
push 0Ah  +
jmp loc_106918B  +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call edi  +
test eax eax +
jge loc_10420EF  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1042143  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1042143  +
push eax  +
push offset unk_106DA54  +
push 0Bh  +
jmp loc_106918B  +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call edi  +
test eax eax +
jge loc_104212E  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1042143  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1042143  +
push eax  +
push offset unk_106DA54  +
push 0Ch  +
jmp loc_106918B  +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call edi  +
test eax eax +
jge loc_1042143  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1042143  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1042143  +
push eax  +
push offset unk_106DA54  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1042143  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10248B9  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10248B9  +
push eax  +
push offset unk_106DA54  +
push 15h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10248B9  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10248B9  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10248B9  +
push eax  +
push offset unk_106DA54  +
push 16h  +
jmp loc_10691BF  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10248B9  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10248B9  +
push eax  +
push offset unk_106DA54  +
push 17h  +
jmp loc_10691BF  +
***
push esi  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ebx  +
test eax eax +
jge loc_104A0C5  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_104A190  +
cmp byte ptr [ecx+19h] 2 +
jb loc_104A190  +
push eax  +
push offset unk_106DA54  +
push 1Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_104A190  +
push esi  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ebx  +
test eax eax +
jge loc_104A0DB  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_104A190  +
cmp byte ptr [ecx+19h] 2 +
jb loc_104A190  +
push eax  +
push offset unk_106DA54  +
push 1Ch  +
jmp loc_1069256  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_104A190  +
cmp byte ptr [ecx+19h] 2 +
jb loc_104A190  +
push eax  +
push offset unk_106DA54  +
push 1Dh  +
jmp loc_1069256  +
test esi esi +
jz loc_10692D4  +
push esi  +
call ds:DestroyIcon  +
push 8007000Eh  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ebx  +
test eax eax +
jge loc_104A14F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_104A190  +
cmp byte ptr [ecx+19h] 2 +
jb loc_104A190  +
push eax  +
push offset unk_106DA54  +
push 1Eh  +
jmp loc_1069256  +
test ecx ecx +
jz loc_1069323  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_104A190  +
cmp byte ptr [eax+19h] 2 +
jb loc_104A190  +
push offset unk_106DA54  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_104A190  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10465ED  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10465ED  +
push eax  +
push offset unk_106DA54  +
push 19h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10465ED  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_104A000  +
cmp byte ptr [ecx+19h] 2 +
jb loc_104A000  +
push eax  +
push offset unk_106DA54  +
push 1Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_104A000  +
***
push 8000FFFFh  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call edi  +
test eax eax +
jge loc_1032D7C  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1032DC9  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1032DC9  +
push eax  +
push offset nullsub_3  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1032DC9  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1032DC9  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1032DC9  +
push eax  +
push offset nullsub_3  +
push 0Bh  +
jmp loc_10693FB  +
***
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call esi  +
test eax eax +
jge loc_104220B  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1042269  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1042269  +
push eax  +
push offset nullsub_3  +
push 14h  +
jmp loc_1069614  +
***
push 8007000Eh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call esi  +
test eax eax +
jge loc_1042233  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1042269  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1042269  +
push eax  +
push offset nullsub_3  +
push 15h  +
jmp loc_1069614  +
mov ecx [ebp-10h] +
test ecx ecx +
jz loc_10696B3  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
lea ecx [ebp-28h] +
call esi  +
test eax eax +
jge loc_1042259  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1042269  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1042269  +
push eax  +
push offset nullsub_3  +
push 16h  +
jmp loc_1069614  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10243AB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10243AB  +
push 8000FFFFh  +
push offset nullsub_3  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10243AB  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10163BB  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10163BB  +
push eax  +
push offset nullsub_3  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10163BB  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10163BB  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10163BB  +
push eax  +
push offset nullsub_3  +
push 19h  +
jmp loc_1069743  +
***
mov eax offset word_100A5FC +
jmp loc_10245AD  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10245BE  +
cmp byte ptr [eax+19h] 2 +
jb loc_10245BE  +
push offset dword_106DA98  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10245BE  +
***
push eax  +
call ds:DestroyIcon  +
jmp loc_1045EEC  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1024419  +
cmp byte ptr [eax+19h] 2 +
jb loc_1024419  +
push offset dword_106DA98  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1024419  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1024418  +
cmp byte ptr [eax+19h] 2 +
jb loc_1024418  +
push offset dword_106DA98  +
push 1Fh  +
jmp loc_1069835  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1024418  +
cmp byte ptr [eax+19h] 2 +
jb loc_1024418  +
push offset dword_106DA98  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1024418  +
xor ecx ecx +
mov [eax] cx +
jmp loc_102440F  +
***
push 8000FFFFh  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1024534  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1024534  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1024534  +
push eax  +
push offset dword_106DA98  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1024534  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1024534  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1024534  +
push eax  +
push offset dword_106DA98  +
push 0Bh  +
jmp loc_1069886  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10172C5  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10172C5  +
push eax  +
push offset dword_106DA98  +
push 0Fh  +
jmp loc_1069AB0  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10172C5  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10172C5  +
push eax  +
push offset dword_106DA98  +
push 10h  +
jmp loc_1069AB0  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10172C5  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10172C5  +
push eax  +
push offset dword_106DA98  +
push 11h  +
jmp loc_1069AB0  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10172C5  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10172C5  +
push eax  +
push offset dword_106DA98  +
push 12h  +
jmp loc_1069AB0  +
push dword ptr [ebx+28h]  +
mov ecx [ebp-10h] +
push dword ptr [ebp+8]  +
call sub_10D03DD  +
jmp loc_101727B  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10172C5  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10172C5  +
push eax  +
push offset dword_106DA98  +
push 13h  +
jmp loc_1069AB0  +
mov ebx [ebx+8] +
test ebx ebx +
jnz loc_10699AB  +
jmp loc_10172C5  +
mov ebx [ebp-14h] +
mov ecx [ebx] +
mov eax ebx +
mov ebx [eax+8] +
mov [ebp-14h] ecx +
test ebx ebx +
jz loc_10172C5  +
cmp byte ptr [ebx+4Ch] 0 +
jz loc_1069A0E  +
push dword ptr [ebp+8]  +
mov ecx [ebp-10h] +
call sub_1044E71  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jge loc_1069A7D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10172C5  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10172C5  +
push eax  +
push offset dword_106DA98  +
push 14h  +
jmp loc_1069AB0  +
mov eax [ebx+5Ch] +
mov ecx eax +
shr ecx 1 +
test cl 1 +
jnz loc_1069A24  +
cmp byte ptr [ebx+68h] 0 +
jnz loc_1069A24  +
xor cl cl +
jmp loc_1069A27  +
xor ecx ecx +
inc ecx  +
mov edx [ebx+28h] +
push eax  +
push ecx  +
mov ecx ebx +
mov [ebp-18h] edx +
call sub_10174C8  +
mov ecx [ebp-10h] +
push eax  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp+8]  +
call sub_1016894  +
push 8000FFFFh  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jl loc_1069A8C  +
mov eax [ebp-18h] +
mov [ebx+50h] eax +
cmp dword ptr [ebp-14h] 0 +
jz loc_10172C5  +
jmp loc_10699A8  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10172C5  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10172C5  +
push eax  +
push offset dword_106DA98  +
push 15h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10172C5  +
***
mov eax esi +
mov ecx [eax+8] +
mov esi [esi] +
test ecx ecx +
jz loc_1069AD6  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
test esi esi +
jnz loc_1069AC0  +
lea ecx [edi+4] +
pop edi  +
pop esi  +
jmp sub_1015FA3  +
***
test edi eax +
jnz loc_1046553  +
call sub_101600E  +
jmp loc_1046553  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_102B14E  +
cmp byte ptr [ecx+19h] 2 +
jb loc_102B14E  +
push eax  +
push offset dword_106DAD0  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_102B14E  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_102B14E  +
cmp byte ptr [ecx+19h] 2 +
jb loc_102B14E  +
push eax  +
push offset dword_106DAD0  +
push 0Ch  +
jmp loc_1069B16  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_102B14E  +
cmp byte ptr [ecx+19h] 2 +
jb loc_102B14E  +
push eax  +
push offset dword_106DAD0  +
push 0Dh  +
jmp loc_1069B16  +
***
push offset dword_106DAD0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_101C1E7  +
push ebx  +
mov ecx esi +
call sub_1016523  +
jmp loc_101C1F0  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1017B2E  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1017B2E  +
push eax  +
push offset dword_106DAD0  +
push 34h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1017B2E  +
push 8000FFFFh  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call esi  +
test eax eax +
jge loc_1017B19  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1017B2E  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1017B2E  +
push eax  +
push offset dword_106DAD0  +
push 35h  +
jmp loc_1069BBA  +
***
dec eax  +
jz loc_1069C21  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_100D798  +
push 80070057h  +
push dword ptr [ebp+24h]  +
lea eax [ebp-30h] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_100CB6E  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jl loc_100D798  +
mov eax [ebp+24h] +
push dword ptr [eax]  +
call ?CreateColor@Value@DirectUI@@SGPAV12@K@Z  +
jmp loc_100D795  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_100D801  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100D801  +
push eax  +
push offset dword_106DAD0  +
push 49h  +
jmp loc_1069CDB  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_100D801  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100D801  +
push eax  +
push offset dword_106DAD0  +
push 4Ah  +
jmp loc_1069CDB  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_100D801  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100D801  +
push eax  +
push offset dword_106DAD0  +
push 4Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_100D801  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10344F0  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10344F0  +
push eax  +
push offset dword_106DAD0  +
push 4Dh  +
jmp loc_1069D75  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10344F0  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10344F0  +
push eax  +
push offset dword_106DAD0  +
push 4Eh  +
jmp loc_1069D75  +
push edi  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call esi  +
cmp eax ebx +
jge loc_10344F0  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10344F0  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10344F0  +
push eax  +
push offset dword_106DAD0  +
push 4Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10344F0  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_100D627  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100D627  +
push eax  +
push offset dword_106DAD0  +
push 50h  +
jmp loc_1069E44  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_100D627  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100D627  +
push eax  +
push offset dword_106DAD0  +
push 51h  +
jmp loc_1069E44  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_100D627  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100D627  +
push eax  +
push offset dword_106DAD0  +
push 52h  +
jmp loc_1069E44  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_100D627  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100D627  +
push eax  +
push offset dword_106DAD0  +
push 53h  +
jmp loc_1069E44  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_100D627  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100D627  +
push eax  +
push offset dword_106DAD0  +
push 54h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_100D627  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10343C6  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10343C6  +
push eax  +
push offset dword_106DAD0  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10343C6  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10343C6  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10343C6  +
push eax  +
push offset dword_106DAD0  +
push 0Fh  +
jmp loc_1069E78  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10343C6  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10343C6  +
push eax  +
push offset dword_106DAD0  +
push 10h  +
jmp loc_1069E78  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10343C6  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10343C6  +
push eax  +
push offset dword_106DAD0  +
push 11h  +
jmp loc_1069E78  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10343C6  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10343C6  +
push eax  +
push offset dword_106DAD0  +
push 12h  +
jmp loc_1069E78  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10343C6  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10343C6  +
push eax  +
push offset dword_106DAD0  +
push 13h  +
jmp loc_1069E78  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10343C6  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10343C6  +
push eax  +
push offset dword_106DAD0  +
push 14h  +
jmp loc_1069E78  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10343C6  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10343C6  +
push eax  +
push offset dword_106DAD0  +
push 15h  +
jmp loc_1069E78  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10343C6  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10343C6  +
push eax  +
push offset dword_106DAD0  +
push 16h  +
jmp loc_1069E78  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10343C6  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10343C6  +
push eax  +
push offset dword_106DAD0  +
push 17h  +
jmp loc_1069E78  +
mov byte ptr [edi+0Ch] 1 +
jmp loc_10343C6  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_101780A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_101780A  +
push eax  +
push offset dword_106DAD0  +
push 1Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_101780A  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_101780A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_101780A  +
push eax  +
push off_10F99AC  +
push offset dword_106DAD0  +
push 1Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10701D4  +
jmp loc_101780A  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_101780A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_101780A  +
push eax  +
push offset dword_106DAD0  +
push 1Ch  +
jmp loc_106A023  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10176E5  +
cmp byte ptr [eax+19h] 3 +
jb loc_10176E5  +
push offset dword_106DAD0  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10176E5  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_101780A  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_101780A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_101780A  +
push eax  +
push offset dword_106DAD0  +
push 1Eh  +
jmp loc_106A023  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_101780A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_101780A  +
push eax  +
push offset dword_106DAD0  +
push 1Fh  +
jmp loc_106A023  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_101780A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_101780A  +
push eax  +
push offset dword_106DAD0  +
push 20h  +
jmp loc_106A023  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call edi  +
cmp eax ebx +
jge loc_10177B0  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_101780A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_101780A  +
push eax  +
push offset dword_106DAD0  +
push 21h  +
jmp loc_106A023  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_101780A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_101780A  +
push eax  +
push offset dword_106DAD0  +
push 22h  +
jmp loc_106A023  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_101780A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_101780A  +
push eax  +
push offset dword_106DAD0  +
push 23h  +
jmp loc_106A023  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BB2  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BB2  +
push eax  +
push offset dword_106DAD0  +
push 36h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1016BB2  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BB2  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BB2  +
push eax  +
push offset dword_106DAD0  +
push 37h  +
jmp loc_106A20C  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BB2  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BB2  +
push eax  +
push offset dword_106DAD0  +
push 38h  +
jmp loc_106A20C  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1016996  +
cmp byte ptr [eax+19h] 3 +
jb loc_1016996  +
push offset dword_106DAD0  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1016996  +
push 8000FFFFh  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1016BB2  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BB2  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BB2  +
push eax  +
push offset dword_106DAD0  +
push 3Ah  +
jmp loc_106A20C  +
push ebx  +
push ebx  +
push offset dword_106A62C  +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
call ?ContentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push 2  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jge loc_10169E7  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BB2  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BB2  +
push eax  +
push offset dword_106DAD0  +
push 3Bh  +
jmp loc_106A20C  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BB2  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BB2  +
push eax  +
push offset dword_106DAD0  +
push 3Ch  +
jmp loc_106A20C  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+0Bh] +
push eax  +
push dword ptr [ebp-10h]  +
mov [ebp+0Bh] bl +
call ?EnabledProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push ebx  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jge loc_106A3B3  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BB2  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BB2  +
push eax  +
push offset dword_106DAD0  +
push 3Dh  +
jmp loc_106A20C  +
push 11h  +
call ds:GetSysColor  +
mov [ebp+8] eax +
lea eax [ebp+8] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [ebp-10h]  +
call ?ForegroundProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push 4  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jge loc_1016A3B  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BB2  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BB2  +
push eax  +
push offset dword_106DAD0  +
push 3Eh  +
jmp loc_106A20C  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BA7  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BA7  +
push eax  +
push offset dword_106DAD0  +
push 3Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1016BA7  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BA7  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BA7  +
push eax  +
push offset dword_106DAD0  +
push 40h  +
jmp loc_106A43D  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+0Ch] +
push eax  +
push ebx  +
push dword ptr [ebp-10h]  +
call ?AccStateProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push 1  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jge loc_1016ADC  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BA7  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BA7  +
push eax  +
push offset dword_106DAD0  +
push 41h  +
jmp loc_106A43D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BA7  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BA7  +
push eax  +
push offset dword_106DAD0  +
push 42h  +
jmp loc_106A43D  +
push dword ptr [ebp+10h]  +
call ds:DestroyIcon  +
jmp loc_1016B71  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BA7  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BA7  +
push eax  +
push offset dword_106DAD0  +
push 44h  +
jmp loc_106A43D  +
test byte ptr [ebp+18h] 80h +
jz loc_106A53A  +
movzx eax word ptr [edi+30h] +
jmp loc_106A53E  +
movzx eax word ptr [edi+32h] +
mov ecx [ebp-10h] +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
push 80070057h  +
push eax  +
mov [ebp+18h] eax +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call esi  +
cmp eax ebx +
jge loc_106A5A7  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BA7  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BA7  +
push eax  +
push offset dword_106DAD0  +
push 43h  +
jmp loc_106A43D  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+14h] +
push eax  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov dword ptr [ebp+14h] 0FFFFFFFDh +
call ?LayoutPosProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push 1  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+14h] +
push eax  +
push ebx  +
push dword ptr [ebp+18h]  +
mov [ebp+14h] ebx +
call ?LayoutPosProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push 1  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1016B7E  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1016BA7  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1016BA7  +
push eax  +
push offset dword_106DAD0  +
push 45h  +
jmp loc_106A43D  +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1044FD3  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1044FD3  +
push eax  +
push offset dword_106DAD0  +
push 2Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1044FD3  +
push 8000FFFFh  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call esi  +
test eax eax +
jge loc_1044F06  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1044FD3  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1044FD3  +
push eax  +
push offset dword_106DAD0  +
push 30h  +
jmp loc_106A654  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1044FD3  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1044FD3  +
push eax  +
push offset dword_106DAD0  +
push 31h  +
jmp loc_106A654  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1044FD3  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1044FD3  +
push eax  +
push offset dword_106DAD0  +
push 32h  +
jmp loc_106A654  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1044FD3  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1044FD3  +
push eax  +
push offset dword_106DAD0  +
push 33h  +
jmp loc_106A654  +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_10161A7  +
***
mov eax [edi+4] +
and eax 3 +
cmp eax [ebp+0Ch] +
jnz loc_10178CA  +
mov ecx [ebp+14h] +
call ?GetBool@Value@DirectUI@@QAE_NXZ  +
push dword ptr [esi+80h]  +
test al al +
jz loc_106A74F  +
push 1  +
jmp loc_106A751  +
push 0  +
push esi  +
call dword ptr [esi+7Ch]  +
jmp loc_10178CA  +
***
push 0  +
mov ecx esi +
call ?Destroy@Element@DirectUI@@QAEJ_N@Z  +
jmp loc_1016D61  +
***
call ?Register@Button@DirectUI@@SGJXZ  +
mov edi eax +
jmp loc_10345D5  +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1016179  +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_10506E0  +
***
push 0  +
mov ecx esi +
call ?Destroy@Element@DirectUI@@QAEJ_N@Z  +
jmp loc_10173EB  +
***
mov [esi] edi +
jmp loc_10170C1  +
***
mov [esi+4] eax +
jmp loc_10170CE  +
***
call ?Register@Element@DirectUI@@SGJXZ  +
mov edi eax +
jmp loc_10346C9  +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_10161DB  +
***
push 0  +
mov ecx esi +
call ?Destroy@Element@DirectUI@@QAEJ_N@Z  +
jmp loc_1017485  +
***
mov ecx [eax] +
and ecx 0FFFFFFFh +
cmp ecx 1 +
jbe loc_1017398  +
push 1  +
mov ecx eax +
mov byte ptr [esi+78h] 1 +
call sub_10170E8  +
mov ecx [ebp+14h] +
mov esi [eax] +
call ?GetBool@Value@DirectUI@@QAE_NXZ  +
mov ecx esi +
test al al +
jz loc_106A814  +
push ?HeightProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
call ?RemoveLocalValue@Element@DirectUI@@QAEJP6GPBUPropertyInfo@2@XZ@Z  +
jmp loc_1017398  +
***
push 0  +
call ?SetHeight@Element@DirectUI@@QAEJH@Z  +
jmp loc_1017398  +
***
mov ecx esi +
call ?GetSelected@Element@DirectUI@@QAE_NXZ  +
test al al +
jz loc_1017373  +
mov ecx esi +
mov byte ptr [esi+78h] 0 +
call ?EnsureVisible@Element@DirectUI@@QAE_NXZ  +
jmp loc_1017373  +
***
call ?Register@Element@DirectUI@@SGJXZ  +
mov edi eax +
jmp loc_10347BD  +
***
pop ebp  +
retn 4  +
***
push esi  +
call sub_1050C3A  +
jmp loc_103F910  +
***
or dword_10F879C 0FFFFFFFFh +
jmp locret_1050C34  +
***
mov eax dword_10F879C +
test eax eax +
jz loc_106A898  +
cmp eax 0FFFFFFFFh +
jnz loc_106A87F  +
xor eax eax +
jmp loc_102F5B3  +
push dword_10FD95C  +
push eax  +
call sub_103F859  +
cmp Destination 0FFFFFFFFh +
jnz loc_102F5A7  +
xor eax eax +
inc eax  +
jmp loc_102F5B3  +
***
and dword ptr [ebp-14h] 0 +
mov eax offset loc_103C303 +
retn   +
***
retn 0D6B8h  +
***
jmp dword ptr [ecx-4F55B28Eh]  +
***
xor dh dl +
retn 970Eh  +
***
sub esp esi +
push eax  +
xor [ebp-44EE3068h] dh +
add byte ptr [eax] 0AAh +
add [ebp-237EF432h] bh +
pop ebx  +
retf   +
***
inc ebx  +
inc ecx  +
dec ebp  +
inc ebx  +
push ebx  +
jz near ptr dword_106D1AC  +
jz near ptr word_106D1C2  +
jnb loc_106D191  +
popa   +
jb $+2  +
nop   +
nop   +
pop eax  +
mov esp 0EEAABE92h +
sbb al 5 +
inc esp  +
inc esi  +
pop ecx  +
push ss  +
and cl [esi] +
retf   +
***
or dword ptr [ecx+eax] offset loc_10BF654 +
sbb ebp esp +
or eax [ecx] +
dec ecx  +
in al dx +
or eax [ecx] +
daa   +
or al 0Ch +
add [eax] eax +
sbb al 30h +
jmp near ptr word_106D3FE  +
sbb eax 4A2A3A22h +
xor cl dh +
add bl bl +
jns loc_106DAB4  +
retn   +
***
cdq   +
shr dword ptr [esi] cl +
dec edx  +
jmp loc_106DAAF  +
add [ebx+0] dh +
arpl [eax] ax +
jz $+2  +
imul eax [eax] +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
call ds:GetCurrentThreadId  +
lea ecx [esi+4] +
mov edx [ecx] +
xor edx eax +
pop esi  +
test edx 0FFFFFFFCh +
jnz loc_106F670  +
mov eax [ecx] +
inc eax  +
mov [ebp+var_4] eax +
mov [ebp+var_8] ecx +
mov ecx [ebp+var_8] +
mov edx [ebp+var_4] +
mov eax [ecx] +
cmpxchg [ecx] edx +
jnz loc_106F666  +
mov al 1 +
leave   +
retn   +
xor al al +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
xor eax eax +
cmp ecx [ebp+0Ch] +
setz al  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov edi ecx +
lea ecx [edi+8] +
call sub_10562D0  +
mov esi [ebp+var_4] +
test esi esi +
jz loc_106F70B  +
push esi  +
call sub_101AD4D  +
lea eax [edi+88h] +
mov [esi+4] eax +
mov ecx [eax] +
mov [esi] ecx +
mov [ecx+4] esi +
mov [eax] esi +
inc dword ptr [edi+98h]  +
mov eax [esi+0Ch] +
jmp loc_106F714  +
inc dword ptr [edi+9Ch]  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
lea edi [esi+8] +
mov ecx edi +
call sub_10562D0  +
mov ebx [ebp+var_4] +
test ebx ebx +
jnz loc_106F754  +
mov [ebp+var_8] 80070057h +
jmp loc_106F77B  +
push ebx  +
call sub_101AD4D  +
push ebx  +
mov ecx edi +
call sub_10547D4  +
push 0  +
push ebx  +
mov ecx esi +
call sub_10564D6  +
dec dword ptr [esi+94h]  +
push 1  +
mov ecx ebx +
call sub_1054A51  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101AC79  +
test byte ptr [ebp+8] 1 +
jz loc_106F7A4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
cmp byte ptr [ecx] 0 +
jz locret_106F7BC  +
push 0  +
call sub_102F8EA  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_106F819  +
cmp word ptr [edx] 0 +
jnz loc_106F7FE  +
push 0Eh  +
jmp loc_106F81B  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_106F804  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_106F81C  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_106F82D  +
cmp word ptr [edx] 0 +
jnz loc_106F832  +
mov edx offset aNull +
jmp loc_106F832  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_106F88F  +
cmp word ptr [edx] 0 +
jnz loc_106F873  +
mov [ebp+arg_14] 0Eh +
jmp loc_106F896  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_106F878  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_14] eax +
jmp loc_106F896  +
mov [ebp+arg_14] 0Ah +
mov ebx offset aNull_0 +
test edx edx +
jz loc_106F8AC  +
cmp word ptr [edx] 0 +
jnz loc_106F8AE  +
mov edx offset aNull +
jmp loc_106F8AE  +
mov edx ebx +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_106F8D8  +
cmp word ptr [edi] 0 +
jnz loc_106F8BF  +
push 0Eh  +
jmp loc_106F8DA  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_106F8C4  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_106F8DB  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_106F8F0  +
cmp word ptr [edi] 0 +
jnz loc_106F8EC  +
mov eax offset aNull +
jmp loc_106F8F2  +
mov eax edi +
jmp loc_106F8F2  +
mov eax ebx +
push 0  +
push [ebp+arg_14]  +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_106F956  +
cmp word ptr [edx] 0 +
jnz loc_106F93A  +
mov [ebp+arg_14] 0Eh +
jmp loc_106F95D  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_106F93F  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_14] eax +
jmp loc_106F95D  +
mov [ebp+arg_14] 0Ah +
mov ebx offset aNull_0 +
test edx edx +
jz loc_106F973  +
cmp word ptr [edx] 0 +
jnz loc_106F975  +
mov edx offset aNull +
jmp loc_106F975  +
mov edx ebx +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_106F99F  +
cmp word ptr [edi] 0 +
jnz loc_106F986  +
push 0Eh  +
jmp loc_106F9A1  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_106F98B  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_106F9A2  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_106F9B7  +
cmp word ptr [edi] 0 +
jnz loc_106F9B3  +
mov eax offset aNull +
jmp loc_106F9B9  +
mov eax edi +
jmp loc_106F9B9  +
mov eax ebx +
push 0  +
push 4  +
lea esi [ebp+arg_18] +
push esi  +
push [ebp+arg_14]  +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
xor eax eax +
push 208h  +
push eax  +
mov [ebp+var_210] ax +
lea eax [ebp-20Eh] +
xor edi edi +
push eax  +
mov esi ecx +
inc edi  +
call memset  +
mov eax [esi+14h] +
add esp 0Ch +
cmp dword ptr [eax-8] 0 +
jnz loc_106FA36  +
lea ecx [esi+58h] +
call sub_100A6F0  +
jmp loc_106FA61  +
push 105h  +
lea ecx [ebp+var_210] +
push ecx  +
push eax  +
push [ebp+arg_0]  +
call sub_1070247  +
mov edi eax +
test edi edi +
jl loc_106FA61  +
lea eax [ebp+var_210] +
push eax  +
mov ecx esi +
call sub_103F058  +
mov edi eax +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 4  +
***
call sub_1001F95  +
mov edi [ebp+8] +
push 25h  +
mov ecx edi +
call sub_104384F  +
cmp eax 0FFFFFFFFh +
jz loc_106FA9D  +
xor eax eax +
inc eax  +
jmp loc_106FB53  +
mov eax [edi+8] +
lea ecx [ebp-20h] +
lea esi [eax+eax] +
call sub_100AD56  +
and dword ptr [ebp-4] 0 +
push esi  +
jmp loc_106FAD9  +
mov ecx [edi+4] +
push esi  +
push eax  +
push ecx  +
call ds:ExpandEnvironmentStringsW  +
mov ebx eax +
test ebx ebx +
jbe loc_106FAC8  +
cmp ebx esi +
jbe loc_106FAEC  +
push 0  +
lea ecx [ebp-20h] +
call sub_101D6F2  +
test esi esi +
jz loc_106FB02  +
mov esi ebx +
push ebx  +
lea ecx [ebp-20h] +
call sub_101D69E  +
test eax eax +
jnz loc_106FAB2  +
mov esi 8007000Eh +
jmp loc_106FB1C  +
push ebx  +
lea ecx [ebp-20h] +
call sub_101D6F2  +
lea eax [ebp-20h] +
push eax  +
mov ecx edi +
call sub_10C942A  +
jmp loc_106FB16  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_106FB16  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test esi esi +
jge loc_106FB45  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_106FB45  +
cmp byte ptr [eax+19h] 2 +
jb loc_106FB45  +
mov edi [edi+4] +
push esi  +
push edi  +
push offset dword_106B628  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call sub_100A77D  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push edi  +
mov ebx 7FFFFFFFh +
test edx edx +
jz loc_106FB79  +
cmp edx ebx +
jbe loc_106FB7E  +
mov eax 80070057h +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_106FBB5  +
and [ebp+arg_4] 0 +
xor ecx ecx +
push esi  +
mov esi edx +
mov eax edi +
cmp edx ecx +
jz loc_106FBA2  +
cmp [eax] cx +
jz loc_106FB9E  +
inc eax  +
inc eax  +
dec esi  +
jnz loc_106FB94  +
cmp esi ecx +
jnz loc_106FBAB  +
mov [ebp+arg_4] 80070057h +
jmp loc_106FBAF  +
mov ecx edx +
sub ecx esi +
mov eax [ebp+arg_4] +
pop esi  +
jmp loc_106FBB7  +
xor ecx ecx +
test eax eax +
jl loc_106FBCB  +
mov eax [ebp+arg_8] +
push ebx  +
sub edx ecx +
push 0  +
lea ecx [edi+ecx*2] +
call sub_100A53A  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+lpOutputString] +
xor ebx ebx +
push edi  +
mov edi ecx +
mov [ebp+var_4] 1 +
cmp esi ebx +
jnz loc_106FBFD  +
mov [ebp+var_4] 80004003h +
jmp loc_106FE3D  +
cmp [ebp+arg_4] ebx +
jnz loc_106FC0E  +
mov [ebp+var_4] 80070057h +
jmp loc_106FE3D  +
xor eax eax +
mov [esi] ax +
mov eax [edi+14h] +
mov [ebp+lpOutputString] esi +
cmp [edi+6Ch] bl +
jz loc_106FC21  +
mov eax [edi+5Ch] +
cmp eax ebx +
jz loc_106FC90  +
cmp [eax] bx +
jz loc_106FC90  +
push eax  +
push offset aS  +
push [ebp+arg_4]  +
push esi  +
call sub_104D241  +
add esp 10h +
cmp eax ebx +
mov [ebp+var_4] eax +
jge loc_106FC77  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_106FE3D  +
cmp byte ptr [eax+19h] 2 +
jb loc_106FE3D  +
push [ebp+var_4]  +
push offset dword_106B628  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_106FE3D  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_106FC7C  +
sub eax edx +
sar eax 1 +
sub [ebp+arg_4] eax +
lea esi [esi+eax*2] +
call ds:GetCommandLineW  +
cmp eax ebx +
jnz loc_106FCA6  +
mov [ebp+var_4] 8007000Eh +
jmp loc_106FE3D  +
xor dl dl +
movzx ecx word ptr [eax] +
cmp cx 20h +
jz loc_106FCC9  +
cmp cx 9 +
jz loc_106FCC9  +
cmp cx 22h +
jnz loc_106FCC4  +
cmp dl bl +
setz dl  +
jmp loc_106FCCD  +
cmp cx bx +
jmp loc_106FCCB  +
cmp dl bl +
jz loc_106FCD1  +
inc eax  +
inc eax  +
jmp loc_106FCA8  +
movzx ecx word ptr [eax] +
cmp cx 20h +
jz loc_106FCE0  +
cmp cx 9 +
jnz loc_106FCE4  +
inc eax  +
inc eax  +
jmp loc_106FCD1  +
cmp [eax] bx +
jz loc_106FD3C  +
push eax  +
push [ebp+arg_4]  +
push esi  +
call sub_100A593  +
cmp eax ebx +
mov [ebp+var_4] eax +
jge loc_106FD23  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_106FE3D  +
cmp byte ptr [eax+19h] 2 +
jb loc_106FE3D  +
push [ebp+var_4]  +
push offset dword_106B628  +
push 0Bh  +
jmp loc_106FC67  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_106FD28  +
sub eax edx +
sar eax 1 +
sub [ebp+arg_4] eax +
lea esi [esi+eax*2] +
mov eax [edi+24h] +
cmp eax ebx +
jnz loc_106FD49  +
cmp dword ptr [edi+28h] 1 +
jz loc_106FD53  +
cmp eax 1 +
jnz loc_106FD84  +
cmp [edi+28h] ebx +
jnz loc_106FD84  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_106FC02  +
cmp byte ptr [eax+19h] 2 +
jb loc_106FC02  +
push offset dword_106B628  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_106FC02  +
mov eax [edi+28h] +
cmp eax 1 +
jnz loc_106FDCA  +
push offset a32_0  +
push [ebp+arg_4]  +
push esi  +
call sub_106FB60  +
cmp eax ebx +
mov [ebp+var_4] eax +
jge loc_106FE04  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_106FE3D  +
cmp byte ptr [eax+19h] 2 +
jb loc_106FE3D  +
push [ebp+var_4]  +
push offset dword_106B628  +
push 0Dh  +
jmp loc_106FC67  +
cmp eax ebx +
jnz loc_106FE04  +
push offset a64_0  +
push [ebp+arg_4]  +
push esi  +
call sub_106FB60  +
cmp eax ebx +
mov [ebp+var_4] eax +
jge loc_106FE04  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_106FE3D  +
cmp byte ptr [eax+19h] 2 +
jb loc_106FE3D  +
push [ebp+var_4]  +
push offset dword_106B628  +
push 0Eh  +
jmp loc_106FC67  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_106FE2B  +
cmp byte ptr [eax+19h] 4 +
jb loc_106FE2B  +
push [ebp+lpOutputString]  +
push offset dword_106B628  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
push [ebp+lpOutputString]  +
mov esi ds:OutputDebugStringW +
call esi  +
push offset word_104E074  +
call esi  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 10860h +
call sub_1027CDF  +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push 7FEh  +
push eax  +
mov [ebp+ApplicationName] ax +
lea eax [ebp-802h] +
mov esi ecx +
mov edi [esi+74h] +
push eax  +
call memset  +
mov eax [esi+24h] +
add esp 0Ch +
sub eax 0 +
mov ebx offset lpDst +
jz loc_106FF07  +
dec eax  +
jz loc_106FEF2  +
mov eax lpDst +
cmp eax ebx +
jz loc_106FEE6  +
cmp byte ptr [eax+19h] 2 +
jb loc_106FEE6  +
push offset dword_106B628  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax lpDst +
mov [ebp+var_10808] 80070057h +
jmp loc_106FF2E  +
push 400h  +
lea eax [ebp+ApplicationName] +
push eax  +
push offset aMmc_exe  +
push 29h  +
jmp loc_106FF1A  +
push 400h  +
lea eax [ebp+ApplicationName] +
push eax  +
push offset aMmc_exe  +
push 25h  +
call sub_1070247  +
mov [ebp+var_10808] eax +
test eax eax +
jge loc_106FF5D  +
mov eax lpDst +
cmp eax ebx +
jz loc_10701B8  +
cmp byte ptr [eax+19h] 2 +
jb loc_10701B8  +
push [ebp+var_10808]  +
push offset dword_106B628  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10701B8  +
cmp dword ptr [esi+24h] 1 +
jnz loc_106FFE2  +
cmp byte ptr [esi+6Ch] 0 +
jnz loc_106FFC8  +
cmp byte ptr [esi+6Eh] 0 +
jnz loc_106FFC8  +
push 25h  +
mov ecx esi +
call sub_106F9E9  +
mov [ebp+var_10808] eax +
test eax eax +
jge loc_106FFC8  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10701B8  +
cmp byte ptr [eax+19h] 2 +
jb loc_10701B8  +
push [ebp+var_10808]  +
mov esi [esi+14h] +
call sub_1040209  +
push eax  +
mov eax lpDst +
push esi  +
push offset dword_106B628  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F91C  +
jmp loc_10701B8  +
call sub_1040209  +
push eax  +
push edi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_106FFFA  +
call sub_103F0BA  +
jmp loc_106FFFA  +
call sub_103F0BA  +
push eax  +
push edi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_106FFFA  +
call sub_1040209  +
xor eax eax +
push 0FFFEh  +
mov [ebp+OutputString] ax +
xor edi edi +
lea eax [ebp-10802h] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
push 7FFFh  +
lea eax [ebp+OutputString] +
push eax  +
mov ecx esi +
call sub_106FBD6  +
cmp eax edi +
mov [ebp+var_10808] eax +
jge loc_1070063  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10701B8  +
cmp byte ptr [eax+19h] 2 +
jb loc_10701B8  +
push [ebp+var_10808]  +
push offset dword_106B628  +
push 2Ah  +
jmp loc_106FF4D  +
mov eax lpDst +
mov ebx offset lpDst +
cmp eax ebx +
jz loc_107009A  +
cmp byte ptr [eax+19h] 4 +
jb loc_107009A  +
lea ecx [ebp+OutputString] +
push ecx  +
lea ecx [ebp+ApplicationName] +
push ecx  +
mov esi offset dword_106B628 +
push esi  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
jmp loc_107009F  +
mov esi offset dword_106B628 +
lea eax [ebp+ApplicationName] +
push eax  +
lea ecx [ebp-10809h] +
call sub_102F8C7  +
push 40h  +
lea eax [ebp+StartupInfo.lpReserved] +
push edi  +
push eax  +
call memset  +
mov ax [ebp+arg_0] +
mov [ebp+StartupInfo.wShowWindow] ax +
mov [ebp+hObject] edi +
xor eax eax +
lea edi [ebp-10818h] +
stos   +
stos   +
add esp 0Ch +
stos   +
lea eax [ebp+hObject] +
push eax  +
xor edi edi +
lea eax [ebp+StartupInfo] +
push eax  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+OutputString] +
push eax  +
lea eax [ebp+ApplicationName] +
push eax  +
mov [ebp+StartupInfo.cb] 44h +
call ds:CreateProcessW  +
test eax eax +
jz loc_107015A  +
mov eax lpDst +
cmp eax ebx +
jz loc_1070142  +
cmp byte ptr [eax+19h] 4 +
jb loc_1070142  +
lea ecx [ebp+OutputString] +
push ecx  +
lea ecx [ebp+ApplicationName] +
push ecx  +
push esi  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
push dword ptr [ebp-10818h]  +
mov esi ds:CloseHandle +
call esi  +
push [ebp+hObject]  +
call esi  +
jmp loc_10701A9  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_107016E  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax edi +
mov [ebp+var_10808] eax +
jge loc_10701A9  +
mov eax lpDst +
cmp eax ebx +
jz loc_10701A9  +
cmp byte ptr [eax+19h] 2 +
jb loc_10701A9  +
push [ebp+var_10808]  +
lea ecx [ebp+OutputString] +
push ecx  +
lea ecx [ebp+ApplicationName] +
push ecx  +
push esi  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F91C  +
cmp [ebp+var_10809] 0 +
jz loc_10701B8  +
push edi  +
call sub_102F8EA  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_10808] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_1070205  +
cmp word ptr [edx] 0 +
jnz loc_10701EA  +
push 0Eh  +
jmp loc_1070207  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10701F0  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1070208  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1070219  +
cmp word ptr [edx] 0 +
jnz loc_107021E  +
mov edx offset aNull +
jmp loc_107021E  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_8] eax +
jz loc_1070292  +
cmp [ebp+arg_4] eax +
jz loc_1070292  +
cmp [ebp+arg_C] eax +
jnz loc_1070264  +
mov eax 80070057h +
jmp loc_1070297  +
call sub_102F91C  +
cmp [ebp+arg_0] 29h +
mov eax offset word_10F66B0 +
jz loc_1070279  +
mov eax offset word_10F62B0 +
push [ebp+arg_4]  +
push eax  +
push offset aSS  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
call sub_104D241  +
add esp 14h +
jmp loc_1070297  +
mov eax 80004003h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 404h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
cmp esi ebx +
jz loc_107032E  +
xor eax eax +
push 3FEh  +
mov [ebp+var_404] ax +
lea eax [ebp-402h] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
push 200h  +
lea eax [ebp+var_404] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_1070247  +
cmp eax ebx +
jge loc_1070320  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_107032E  +
cmp byte ptr [ecx+19h] 2 +
jb loc_107032E  +
push eax  +
push offset dword_102F7D0  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_107032E  +
lea eax [ebp+var_404] +
push eax  +
call sub_103F166  +
mov bl al +
mov ecx [ebp+var_4] +
pop esi  +
mov al bl +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 8  +
***
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset dword_10F5414 +
pop ebp  +
jmp sub_100A78D  +
***
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp-4] eax +
lea eax [ebp-118h] +
push eax  +
mov dword ptr [ebp-118h] 114h +
call ds:GetVersionExW  +
mov ecx [ebp-4] +
xor eax eax +
cmp dword ptr [ebp-108h] 2 +
setz al  +
xor ecx ebp +
call sub_1002492  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
mov ecx [ebp+var_4] +
setz al  +
xor ecx ebp +
call sub_1002492  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_1070444  +
dec eax  +
jz loc_107043B  +
push 57h  +
pop eax  +
jmp loc_10704AF  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_1070467  +
push dword ptr [ebp+14h]  +
call EtwGetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call EtwGetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call EtwGetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_1070490  +
cmp dword ptr [esi+10h] 0 +
jz loc_1070490  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_10704AD  +
test cl 2 +
jz loc_107049E  +
mov esi [esi+10h] +
test esi esi +
jz loc_107049E  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
retn   +
***
mov eax offset off_10704E8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push 38h  +
lea eax [ebp-38h] +
push 0  +
push eax  +
call memset  +
and dword ptr [ebp-24h] 0 +
and dword ptr [ebp-28h] 0 +
add esp 0Ch +
lea eax [ebp-3Ch] +
push eax  +
mov dword ptr [ebp-3Ch] 3Ch +
mov dword ptr [ebp-38h] 400h +
mov dword ptr [ebp-2Ch] offset aHttpGo_microso +
mov dword ptr [ebp-20h] 1 +
call ShellExecuteExW  +
test eax eax +
jnz locret_1070573  +
mov eax lpDst +
cmp eax offset lpDst +
jz locret_1070573  +
cmp byte ptr [eax+19h] 2 +
jb locret_1070573  +
push offset dword_106B6F0  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
leave   +
retn   +
***
push 0FFFFFFFFh  +
call ds:MessageBeep  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_10705F8  +
dec dword ptr [ecx+15Ch]  +
jmp loc_10705FE  +
inc dword ptr [ecx+15Ch]  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcappSchelp  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx edi +
call sub_100942E  +
test eax eax +
jnz loc_1070660  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1070674  +
mov ecx eax +
call sub_10B2591  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov bl [ebp+arg_0] +
movzx eax bl +
push esi  +
mov esi ecx +
push eax  +
mov [esi+0FCh] bl +
call ?AfxOleSetUserCtrl@@YGXH@Z  +
test bl bl +
jz loc_10706F7  +
mov ecx esi +
call sub_100942E  +
mov esi eax +
test esi esi +
jz loc_10706F7  +
push dword ptr [esi+20h]  +
call ds:IsWindowVisible  +
test eax eax +
jnz loc_10706F7  +
push 5  +
mov ecx esi +
call ?ShowWindow@CWnd@@QAEHH@Z  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push offset dword_10514FC  +
push [ebp+arg_0]  +
add ecx 4 +
call sub_10BE247  +
mov eax [ebp+arg_0] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jnz loc_107073B  +
mov eax 80004003h +
jmp loc_1070743  +
and dword ptr [eax] 0 +
mov eax 80040110h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call ??0exception@@QAE@ABQBD@Z  +
mov dword ptr [esi] offset off_106B70C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
add [edi+esi*4] ecx +
push es  +
add ecx ebp +
push ebp  +
jp near ptr loc_1070791+5  +
add [eax-6F6F6F70h] dl +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_106B70C +
call ??1exception@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10707B7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ??0exception@@QAE@ABV0@@Z  +
mov dword ptr [esi] offset off_106B70C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memmove_s  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+14h]  +
call ds:CoRevokeClassObject  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+pUnk] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
test eax eax +
jz loc_10708B2  +
push edi  +
lea ecx [ebp+pUnk] +
push ecx  +
push offset dword_1048258  +
push dword ptr [esi+0Ch]  +
call eax  +
mov edi eax +
test edi edi +
jl loc_10708A2  +
lea eax [esi+14h] +
push eax  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push [ebp+pUnk]  +
push dword ptr [esi]  +
call ds:CoRegisterClassObject  +
mov edi eax +
mov eax [ebp+pUnk] +
test eax eax +
jz loc_10708AF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
call ds:__imp_GetLastError  +
test eax eax +
jle locret_10708D0  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_1070911  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_1070921  +
mov ecx esi +
call sub_1021315  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+Type] 0 +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
cmp [ebp+Type] 4 +
jz locret_107095E  +
push 0Dh  +
pop eax  +
leave   +
retn 8  +
***
test edi edi +
jnz loc_107096E  +
xor eax eax +
retn   +
cmp word ptr [edi] 0 +
push ebx  +
push esi  +
mov ebx edi +
mov esi edi +
jz loc_10709A0  +
push esi  +
call ds:CharNextW  +
movzx ecx word ptr [esi] +
cmp cx 5Ch +
jz loc_1070996  +
cmp cx 2Fh +
jz loc_1070996  +
cmp cx 3Ah +
jnz loc_1070998  +
mov ebx eax +
cmp word ptr [eax] 0 +
mov esi eax +
jnz loc_107097A  +
mov eax ebx +
sub eax edi +
pop esi  +
sar eax 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_10709C5  +
mov eax 80070057h +
jmp loc_10709F8  +
push esi  +
mov esi [ebx+10h] +
cmp esi edi +
jnz loc_10709D1  +
xor eax eax +
jmp loc_10709F7  +
cmp [esi] edi +
jz loc_10709F5  +
test edi edi +
jnz loc_10709F5  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push esi  +
call sub_1070861  +
push esi  +
push ebx  +
mov edi eax +
call sub_100C081  +
mov esi eax +
cmp dword ptr [esi] 0 +
jnz loc_10709D5  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_1070A1A  +
mov eax 80070057h +
jmp loc_1070A47  +
push esi  +
mov esi [ebx+10h] +
cmp esi edi +
jnz loc_1070A26  +
xor eax eax +
jmp loc_1070A46  +
cmp [esi] edi +
jz loc_1070A44  +
test edi edi +
jnz loc_1070A44  +
push esi  +
call sub_1070847  +
push esi  +
push ebx  +
mov edi eax +
call sub_100C081  +
mov esi eax +
cmp dword ptr [esi] 0 +
jnz loc_1070A2A  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
push esi  +
mov esi [eax] +
add esi [ebp+8] +
call dword ptr [eax+4]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
push esi  +
call sub_100EDC2  +
pop esi  +
pop ebp  +
retn 10h  +
***
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1070AAF  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_107074C  +
cmp dword ptr [esi] 0 +
jnz loc_1070AA3  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+18h] +
lea eax [ecx+4] +
cmp esi 10h +
jb loc_1070AD0  +
mov edx [eax] +
jmp loc_1070AD2  +
mov edx eax +
cmp [ebp+arg_0] edx +
jb loc_1070AEC  +
cmp esi 10h +
jb loc_1070ADE  +
mov eax [eax] +
mov ecx [ecx+14h] +
add ecx eax +
cmp ecx [ebp+arg_0] +
jbe loc_1070AEC  +
mov al 1 +
jmp loc_1070AEE  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1070801  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1070824  +
add esp 10h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100257C +
jz loc_1070B57  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push esp  +
mov eax offset byte_10D14C1 +
call sub_1001F95  +
mov ecx [ebp+8] +
push 5Ch  +
xor ebx ebx +
call sub_104384F  +
mov esi 104h +
cmp eax 0FFFFFFFFh +
jnz loc_1070C3D  +
mov ecx [ebp+8] +
push 2Fh  +
call sub_104384F  +
cmp eax 0FFFFFFFFh +
jnz loc_1070C3D  +
mov edi [ebp+0Ch] +
push esi  +
mov ecx edi +
call sub_101D69E  +
test eax eax +
jz loc_1070D52  +
push esi  +
push eax  +
push dword_10F565C  +
call ds:GetModuleFileNameW  +
push 0FFFFFFFFh  +
mov ecx edi +
mov [ebp-10h] eax +
call sub_101D6F2  +
mov ecx edi +
cmp [ebp-10h] ebx +
jz loc_1070D4D  +
push 5Ch  +
call sub_10C934D  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_1070BEA  +
mov ecx [ebp+0Ch] +
jmp loc_1070D4D  +
lea ecx [ebp-4Ch] +
call sub_100AD56  +
and dword ptr [ebp-4] 0 +
inc edi  +
push edi  +
mov edi [ebp+0Ch] +
push edi  +
lea ecx [ebp-4Ch] +
call sub_104387C  +
mov ebx eax +
test ebx ebx +
jge loc_1070C12  +
lea ecx [ebp-4Ch] +
jmp loc_1070D3E  +
lea eax [ebp-4Ch] +
push eax  +
mov ecx edi +
call sub_10C942A  +
mov ebx eax +
test ebx ebx +
jl loc_1070C0A  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_10C937B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-4Ch] +
mov ebx eax +
call sub_100A77D  +
jmp loc_1070C4D  +
push dword ptr [ebp+8]  +
mov ecx [ebp+0Ch] +
call sub_10C942A  +
mov edi [ebp+0Ch] +
mov ebx eax +
test ebx ebx +
jl loc_1070D4B  +
lea ecx [ebp-24h] +
call sub_100AD56  +
push esi  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call sub_101D69E  +
test eax eax +
jz loc_1070D3B  +
push esi  +
push eax  +
call ds:GetSystemDirectoryW  +
push 0FFFFFFFFh  +
lea ecx [ebp-24h] +
mov esi eax +
call sub_101D6F2  +
test esi esi +
jz loc_1070D3B  +
call sub_10703CE  +
test al al +
jz loc_1070D3B  +
push dword ptr [ebp-1Ch]  +
mov eax [edi+4] +
push eax  +
push dword ptr [ebp-20h]  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1070D3B  +
lea ecx [ebp-38h] +
call sub_100AD56  +
mov byte ptr [ebp-4] 2 +
call near ptr byte_1070384+1  +
test al al +
mov eax offset aSystemrootSyst +
jnz loc_1070CD8  +
mov eax offset aWindirSystem +
push eax  +
lea ecx [ebp-38h] +
call sub_100AE0E  +
mov ebx eax +
test ebx ebx +
jl loc_1070D2F  +
lea ecx [ebp-60h] +
call sub_100AD56  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-60h] +
push edi  +
mov byte ptr [ebp-4] 3 +
call sub_10C9547  +
mov ebx eax +
test ebx ebx +
jl loc_1070D23  +
lea eax [ebp-38h] +
push eax  +
mov ecx edi +
call sub_10C942A  +
mov ebx eax +
test ebx ebx +
jl loc_1070D23  +
lea eax [ebp-60h] +
push eax  +
mov ecx edi +
call sub_10C937B  +
mov ebx eax +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 2 +
call sub_100A77D  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call sub_100A77D  +
lea ecx [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_100A77D  +
test ebx ebx +
jge loc_1070D52  +
mov ecx edi +
call sub_100A6F0  +
mov eax ebx +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102B012  +
test byte ptr [ebp+8] 1 +
jz loc_1070DC7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 0Ch  +
mov eax offset byte_10D1515 +
call sub_1001F95  +
mov [ebp-18h] ecx +
push 340Dh  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@PBG@Z  +
and dword ptr [ebp-4] 0 +
push 3428h  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@PBG@Z  +
push offset dword_1070E68  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call ??YCString@@QAEABV0@PBG@Z  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-10h] +
call ??YCString@@QAEABV0@ABV0@@Z  +
mov edi [ebp-10h] +
call sub_10067E8  +
test eax eax +
jnz loc_1070E2D  +
xor esi esi +
jmp loc_1070E30  +
mov esi [eax+20h] +
mov ecx [ebp-18h] +
push 80h  +
call sub_100BEE5  +
push eax  +
push 0  +
push edi  +
push esi  +
call ShellAboutW  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov ebx ecx +
xor edi edi +
mov [ebp-10h] edi +
mov ecx [ebp+8] +
push edi  +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCamcappSciniti  +
mov [ebp-4] edi +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [ebp+0Bh] +
call sub_102BBF1  +
mov [ebp-4] esi +
lea esi [ebx+13Ch] +
cmp byte ptr [esi] 0 +
jnz loc_1070ECE  +
lea eax [ebx+140h] +
push eax  +
push 1Ch  +
push edi  +
push edi  +
call sub_10D0BFD  +
mov eax [ebp+10h] +
mov byte ptr [esi] 1 +
cmp eax edi +
jnz loc_10710D2  +
cmp [ebx+150h] edi +
jnz loc_10710CC  +
lea ecx [ebp-24h] +
call sub_100AD56  +
mov byte ptr [ebp-4] 2 +
call ds:?GetHelpFile@SC@mmcerror@@SGPBGXZ  +
push eax  +
lea ecx [ebp-24h] +
call sub_100AE0E  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
call esi  +
cmp eax edi +
jge loc_1070F54  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1070F43  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1070F43  +
push eax  +
push offset dword_106B6F0  +
push 16h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call sub_100A77D  +
jmp loc_10710E3  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
mov dword ptr [ebp+10h] 409h +
call sub_10C958B  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
cmp eax edi +
jge loc_1070F99  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1070F43  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1070F43  +
push eax  +
push offset dword_106B6F0  +
push 17h  +
jmp loc_1070F38  +
lea edi [ebx+148h] +
push offset aMsIts  +
mov ecx edi +
call sub_100AE0E  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_1070FE7  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1070F43  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1070F43  +
push eax  +
push offset dword_106B6F0  +
push 18h  +
jmp loc_1070F38  +
lea eax [ebp-24h] +
push eax  +
mov ecx edi +
call sub_10C937B  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_107102E  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1070F43  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1070F43  +
push eax  +
push offset dword_106B6F0  +
push 19h  +
jmp loc_1070F38  +
push offset asc_10710FC  +
mov ecx edi +
call sub_100AE5B  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_1071076  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1070F43  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1070F43  +
push eax  +
push offset dword_106B6F0  +
push 1Ah  +
jmp loc_1070F38  +
push offset aHtml06e1cb7b19  +
mov ecx edi +
call sub_100AE5B  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_10710BE  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1070F43  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1070F43  +
push eax  +
push offset dword_106B6F0  +
push 1Bh  +
jmp loc_1070F38  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call sub_100A77D  +
xor edi edi +
mov eax [ebx+14Ch] +
push eax  +
push edi  +
push dword ptr [ebp+0Ch]  +
push edi  +
call sub_10D0BFD  +
mov [ebx+144h] eax +
lea ecx [ebp+0Bh] +
mov byte ptr [ebp-4] 0 +
call sub_1020056  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100BF07  +
test byte ptr [ebp+8] 1 +
jz loc_1071169  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
cmp dword ptr [esi+0F0h] 0 +
jnz loc_10711E1  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
xor edi edi +
call sub_104EA3E  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
mov eax [ebp-10h] +
cmp [eax-8] edi +
jz loc_10711CF  +
push eax  +
call ds:SetCurrentDirectoryW  +
mov edi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
mov [esi+0F0h] edi +
call ??1CString@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
lea esi [ecx+4] +
cmp dword ptr [esi+4] 2 +
mov edi esi +
jl loc_107121E  +
mov edi [esi] +
mov eax [esi+4] +
cmp eax 2 +
jge loc_107122B  +
lea eax [esi+eax*4] +
jmp loc_1071230  +
mov ecx [esi] +
lea eax [ecx+eax*4] +
cmp edi eax +
jnb loc_1071245  +
mov eax [edi] +
test eax eax +
jz loc_1071240  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
add edi 4 +
jmp loc_107121E  +
cmp dword ptr [esi+4] 1 +
jle loc_1071254  +
push dword ptr [esi]  +
call ds:free  +
pop ecx  +
call sub_1001FCF  +
retn   +
***
call sub_100C4D0  +
mov eax [ebp+14h] +
mov ebx [ebp+8] +
mov edi [ebp+0Ch] +
mov [ebp-820h] eax +
mov eax [ebp+18h] +
xor esi esi +
mov [ebp-818h] eax +
mov eax [ebp+20h] +
mov [ebp-824h] esi +
xor ecx ecx +
mov [ebp-4] esi +
mov [ebp-810h] cx +
test edi 0FFFF0000h +
jnz loc_107130E  +
push 400h  +
lea ecx [ebp-810h] +
movzx esi di +
push ecx  +
push esi  +
push eax  +
call ds:LoadStringW  +
test eax eax +
jnz loc_10712F7  +
push offset aUnknownError  +
lea eax [ebp-810h] +
push eax  +
call ds:lstrcpyW  +
cmp dword ptr [ebp+1Ch] 0 +
lea edi [ebp-810h] +
jnz loc_107130C  +
or esi 80040000h +
mov [ebp+1Ch] esi +
xor esi esi +
mov [ebp-814h] esi +
lea eax [ebp-814h] +
push eax  +
call CreateErrorInfo  +
test eax eax +
jl loc_10713F0  +
mov [ebp-81Ch] esi +
mov eax [ebp-814h] +
push dword ptr [ebp-818h]  +
mov ecx [eax] +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx+0Ch]  +
lea eax [ebp-818h] +
push eax  +
push ebx  +
call ds:ProgIDFromCLSID  +
cmp [ebp-818h] esi +
jz loc_107136D  +
mov eax [ebp-814h] +
push dword ptr [ebp-818h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
cmp [ebp+10h] esi +
jz loc_107139B  +
cmp [ebp-820h] esi +
jz loc_107139B  +
mov eax [ebp-814h] +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov eax [ebp-814h] +
push dword ptr [ebp-820h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
push dword ptr [ebp-818h]  +
call ds:CoTaskMemFree  +
mov eax [ebp-814h] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+14h]  +
mov eax [ebp-814h] +
mov ecx [eax] +
lea edx [ebp-81Ch] +
push edx  +
push offset loc_1071444  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_10713DC  +
push dword ptr [ebp-81Ch]  +
push esi  +
call SetErrorInfo  +
mov eax [ebp-81Ch] +
mov byte ptr [ebp-4] 1 +
cmp eax esi +
jz loc_10713F0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [ebp+1Ch] +
test esi esi +
jnz loc_10713FC  +
mov esi 80020009h +
mov eax [ebp-814h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1071410  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-824h] +
call sub_1070A9C  +
mov eax esi +
call sub_100C50D  +
retn 1Ch  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
mov esi [ebp+0Ch] +
xor edi edi +
mov [ebp-28h] eax +
mov [ebp-24h] edi +
mov [ebp-4] edi +
cmp esi edi +
jz loc_1071517  +
lea eax [ebp-24h] +
push eax  +
push offset stru_1071534  +
push 1  +
push edi  +
push offset stru_1071524  +
call ds:CoCreateInstance  +
cmp eax edi +
jge loc_10714A4  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jmp loc_107150F  +
mov ebx esi +
cmp [esi] edi +
jz loc_1071506  +
cmp dword ptr [ebp+10h] 0 +
mov esi [ebx+4] +
mov eax [ebp-24h] +
lea edi [ebp-20h] +
movs   +
movs   +
lea edx [ebp-20h] +
push edx  +
movs   +
push 1  +
push dword ptr [ebp-28h]  +
movs   +
mov ecx [eax] +
push eax  +
jz loc_10714F1  +
cmp dword ptr [ebx] 1 +
jnz loc_10714D3  +
call dword ptr [ecx+14h]  +
jmp loc_10714D6  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jge loc_10714FE  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10714ED  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_1071519  +
cmp dword ptr [ebx] 1 +
jnz loc_10714FB  +
call dword ptr [ecx+18h]  +
jmp loc_10714FE  +
call dword ptr [ecx+20h]  +
add ebx 8 +
cmp dword ptr [ebx] 0 +
jnz loc_10714AA  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1071517  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
call sub_100C50D  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov [ebp+lpString1] ecx +
mov ecx [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_C] +
xor edx edx +
mov [ebp+var_23C] ecx +
mov [ebp+pptlib] edi +
cmp ecx edx +
jnz loc_1071597  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1002492  +
leave   +
retn 10h  +
mov [ecx] edx +
cmp edi edx +
jz loc_1071583  +
mov [edi] edx +
cmp eax edx +
jnz loc_10715AA  +
mov eax 80070057h +
jmp loc_1071588  +
push ebx  +
push esi  +
mov ebx 104h +
push ebx  +
lea ecx [ebp+szFile] +
push ecx  +
push dword ptr [eax+0Ch]  +
mov [ebp+var_238] edx +
call ds:GetModuleFileNameW  +
mov esi eax +
cmp esi ebx +
jnz loc_10715E4  +
mov esi 8007006Fh +
lea ecx [ebp+var_238] +
call sub_1070A9C  +
mov eax esi +
pop esi  +
pop ebx  +
jmp loc_1071588  +
test esi esi +
jnz loc_10715F1  +
call sub_10708BC  +
mov esi eax +
jmp loc_10715D3  +
cmp [ebp+lpString1] 0 +
jz loc_107162A  +
push [ebp+lpString1]  +
call ds:lstrlenW  +
add eax esi +
cmp eax 10Eh +
jl loc_1071616  +
mov esi 80004005h +
jmp loc_10715D3  +
push [ebp+lpString1]  +
lea eax [ebp+esi*2+szFile] +
push eax  +
call ds:lstrcpyW  +
mov ebx LoadTypeLib +
push edi  +
lea eax [ebp+szFile] +
push eax  +
call ebx  +
mov esi eax +
xor edi edi +
cmp esi edi +
jge loc_10716F2  +
mov [ebp+lpString1] edi +
lea eax [ebp+szFile] +
cmp [ebp+szFile] di +
jz loc_1071699  +
movzx ecx [ebp+szFile] +
cmp cx 5Ch +
jz loc_107167C  +
cmp cx 2Fh +
jz loc_107167C  +
cmp cx 2Eh +
jnz loc_1071682  +
mov [ebp+lpString1] eax +
jmp loc_1071682  +
mov [ebp+lpString1] edi +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
cmp cx di +
jnz loc_1071662  +
cmp [ebp+lpString1] edi +
jnz loc_107169F  +
mov [ebp+lpString1] eax +
mov eax [ebp+lpString1] +
mov esi offset a_tlb +
lea edi [ebp+String2] +
movs   +
lea ecx [ebp+szFile] +
sub eax ecx +
sar eax 1 +
movs   +
add eax 5 +
movs   +
cmp eax 104h +
ja loc_107160F  +
lea eax [ebp+String2] +
push eax  +
push [ebp+lpString1]  +
call ds:lstrcpyW  +
push [ebp+pptlib]  +
lea eax [ebp+szFile] +
push eax  +
call ebx  +
mov esi eax +
test esi esi +
jl loc_10715D3  +
lea eax [ebp+szFile] +
push eax  +
call SysAllocString  +
mov ecx [ebp+var_23C] +
mov [ecx] eax +
jmp loc_10715D3  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
xor ebx ebx +
mov [ebp-228h] ebx +
mov [ebp-4] ebx +
mov [ebp-220h] ebx +
lea edx [ebp-220h] +
push edx  +
lea edx [ebp-228h] +
push edx  +
push ecx  +
push eax  +
call sub_1071549  +
mov esi [ebp-228h] +
mov edi eax +
cmp edi ebx +
jl loc_1071826  +
mov [ebp-224h] ebx +
mov eax [ebp-220h] +
mov ecx [eax] +
lea edx [ebp-224h] +
push edx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx+24h]  +
cmp eax ebx +
jl loc_107180A  +
cmp [ebp-224h] ebx +
jz loc_107180A  +
push esi  +
call SysStringLen  +
cmp eax 104h +
jbe loc_10717D7  +
push dword ptr [ebp-224h]  +
call SysFreeString  +
mov eax [ebp-220h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_10717C1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov edi 80010135h +
push esi  +
call SysFreeString  +
mov eax edi +
call sub_100C50D  +
retn 8  +
push esi  +
lea eax [ebp-21Ch] +
push eax  +
call ds:lstrcpyW  +
lea edi [ebp-21Ch] +
call sub_1070967  +
cmp eax 105h +
jnb loc_1071801  +
xor ecx ecx +
mov [ebp+eax*2-21Ch] cx +
lea eax [ebp-21Ch] +
push eax  +
jmp loc_107180B  +
push ebx  +
push esi  +
push dword ptr [ebp-220h]  +
call RegisterTypeLib  +
push dword ptr [ebp-224h]  +
mov edi eax +
call SysFreeString  +
mov eax [ebp-220h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_10717C6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10717C6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1071284  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
mov ecx esi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10718D1  +
lea eax [ebp+var_204] +
push eax  +
push 100h  +
mov ecx esi +
call ds:?GetErrorMessage@SC@mmcerror@@QBEXIPAG@Z  +
mov ecx esi +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
push eax  +
push edi  +
call ds:?GetHelpFile@SC@mmcerror@@SGPBGXZ  +
push eax  +
mov ecx esi +
call ds:?GetHelpID@SC@mmcerror@@QAEKXZ  +
push eax  +
lea eax [ebp+var_204] +
push eax  +
push ebx  +
call sub_1071840  +
jmp loc_10718D3  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+18h] 10h +
mov eax [ebp+arg_0] +
mov [ecx+14h] eax +
jb loc_10718FF  +
mov ecx [ecx+4] +
jmp loc_1071902  +
add ecx 4 +
mov byte ptr [ecx+eax] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1070AF8  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1070B1A  +
pop ebp  +
retn 10h  +
***
call sub_1001F95  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
push ebx  +
push 2  +
push offset aMscfileShellOp  +
push 80000000h  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call sub_1039D5F  +
test eax eax +
jnz loc_10719B3  +
push offset aDdeexec  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@PBG@Z  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp-1Ch]  +
mov ecx offset dword_10F54B0 +
mov byte ptr [ebp-4] 1 +
call ?DelRegTree@CWinApp@@QAEJPAUHKEY__@@ABVCString@@@Z  +
lea ecx [ebp-10h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call sub_1021315  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcappScregis  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1071A77  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1071A92  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+0E8h] +
call sub_1010F11  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_100C4D0  +
push dword ptr [ebp+8]  +
call ?RegisterShellFileTypes@CWinApp@@IAEXH@Z  +
xor edi edi +
push edi  +
lea ecx [ebp-23Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcappRegiste  +
lea ecx [ebp-23Ch] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-22Ch] edi +
mov [ebp-228h] edi +
mov [ebp-224h] edi +
push edi  +
push edi  +
push 20006h  +
push edi  +
push edi  +
push offset aMscfile  +
mov ebx 80000000h +
push ebx  +
lea ecx [ebp-22Ch] +
mov byte ptr [ebp-4] 1 +
call sub_10708D6  +
cmp eax edi +
jnz loc_1071F63  +
lea ecx [ebp-21Ch] +
call ??0CString@@QAE@XZ  +
push 82h  +
lea eax [ebp-21Ch] +
push offset a@SystemrootSys  +
push eax  +
mov byte ptr [ebp-4] 2 +
call ?Format@CString@@QAAXPBGZZ  +
mov ecx [ebp-21Ch] +
mov eax [ecx-8] +
mov esi ds:RegSetValueExW +
add esp 0Ch +
lea eax [eax+eax+2] +
push eax  +
push ecx  +
push 2  +
push edi  +
push offset aFriendlytypena  +
push dword ptr [ebp-22Ch]  +
call esi  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-21Ch] +
cmp eax edi +
jnz loc_1071F5E  +
call ??1CString@@QAE@XZ  +
push 4  +
lea eax [ebp-21Ch] +
push eax  +
push 4  +
push edi  +
push offset aEditflags  +
push dword ptr [ebp-22Ch]  +
mov dword ptr [ebp-21Ch] 100000h +
call esi  +
lea ecx [ebp-22Ch] +
cmp eax edi +
jnz loc_1071F69  +
push edi  +
push edi  +
push 20006h  +
push edi  +
push edi  +
push offset aMscfileShellAu  +
push ebx  +
call sub_10708D6  +
cmp eax edi +
jnz loc_1071F63  +
lea ecx [ebp-220h] +
call ??0CString@@QAE@XZ  +
mov ebx 3427h +
push ebx  +
lea eax [ebp-220h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_101220E  +
mov ecx [ebp-220h] +
mov eax [ecx-8] +
lea eax [eax+eax+2] +
push eax  +
push ecx  +
push 1  +
push edi  +
push edi  +
push dword ptr [ebp-22Ch]  +
call esi  +
cmp eax edi +
jnz loc_1071F54  +
lea ecx [ebp-21Ch] +
call ??0CString@@QAE@XZ  +
push ebx  +
lea eax [ebp-21Ch] +
push offset a@SystemrootSys  +
push eax  +
mov byte ptr [ebp-4] 4 +
call ?Format@CString@@QAAXPBGZZ  +
mov ecx [ebp-21Ch] +
mov eax [ecx-8] +
add esp 0Ch +
lea eax [eax+eax+2] +
push eax  +
push ecx  +
push 2  +
push edi  +
push offset aMuiverb  +
push dword ptr [ebp-22Ch]  +
call esi  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-21Ch] +
cmp eax edi +
jz loc_1071CBC  +
call ??1CString@@QAE@XZ  +
jmp loc_1071F54  +
call ??1CString@@QAE@XZ  +
push edi  +
push edi  +
push 20006h  +
push edi  +
push edi  +
push offset aMscfileShell_0  +
mov ebx 80000000h +
push ebx  +
lea ecx [ebp-22Ch] +
call sub_10708D6  +
cmp eax edi +
jnz loc_1071F54  +
push 104h  +
lea eax [ebp-218h] +
push eax  +
push offset aWindir  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jz loc_1071F54  +
mov ecx offset Data +
mov eax ecx +
lea edx [eax+2] +
mov [ebp-21Ch] edx +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_1071D17  +
sub eax [ebp-21Ch] +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push ecx  +
push 2  +
push edi  +
push edi  +
push dword ptr [ebp-22Ch]  +
call esi  +
cmp eax edi +
jnz loc_1071F54  +
push edi  +
push edi  +
push 20006h  +
push edi  +
push edi  +
push offset aMscfileShell_1  +
push ebx  +
lea ecx [ebp-22Ch] +
call sub_10708D6  +
cmp eax edi +
jnz loc_1071F54  +
mov ebx 3425h +
push ebx  +
lea eax [ebp-220h] +
push eax  +
call sub_101220E  +
mov ecx [ebp-220h] +
mov eax [ecx-8] +
lea eax [eax+eax+2] +
push eax  +
push ecx  +
push 1  +
push edi  +
push edi  +
push dword ptr [ebp-22Ch]  +
call esi  +
cmp eax edi +
jnz loc_1071F54  +
lea ecx [ebp-21Ch] +
call ??0CString@@QAE@XZ  +
push ebx  +
lea eax [ebp-21Ch] +
push offset a@SystemrootSys  +
push eax  +
mov byte ptr [ebp-4] 5 +
call ?Format@CString@@QAAXPBGZZ  +
mov ecx [ebp-21Ch] +
mov eax [ecx-8] +
add esp 0Ch +
lea eax [eax+eax+2] +
push eax  +
push ecx  +
push 2  +
push edi  +
push offset aMuiverb  +
push dword ptr [ebp-22Ch]  +
call esi  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-21Ch] +
cmp eax edi +
jnz loc_1071CB2  +
call ??1CString@@QAE@XZ  +
push edi  +
push edi  +
push 20006h  +
push edi  +
push edi  +
push offset aMscfileShell_2  +
mov ebx 80000000h +
push ebx  +
lea ecx [ebp-22Ch] +
call sub_10708D6  +
cmp eax edi +
jnz loc_1071F54  +
mov ecx offset aSystemrootSy_0 +
mov eax ecx +
lea edx [eax+2] +
mov [ebp-21Ch] edx +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_1071E2B  +
sub eax [ebp-21Ch] +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push ecx  +
push 2  +
push edi  +
push edi  +
push dword ptr [ebp-22Ch]  +
call esi  +
cmp eax edi +
jnz loc_1071F54  +
push edi  +
push edi  +
push 20006h  +
push edi  +
push edi  +
push offset aMscfileShellRu  +
push ebx  +
lea ecx [ebp-22Ch] +
call sub_10708D6  +
cmp eax edi +
jnz loc_1071F54  +
mov ebx 3426h +
push ebx  +
lea eax [ebp-220h] +
push eax  +
call sub_101220E  +
mov ecx [ebp-220h] +
mov eax [ecx-8] +
lea eax [eax+eax+2] +
push eax  +
push ecx  +
push 1  +
push edi  +
push edi  +
push dword ptr [ebp-22Ch]  +
call esi  +
cmp eax edi +
jnz loc_1071F54  +
lea ecx [ebp-21Ch] +
call ??0CString@@QAE@XZ  +
push ebx  +
lea eax [ebp-21Ch] +
push offset a@SystemrootSys  +
push eax  +
mov byte ptr [ebp-4] 6 +
call ?Format@CString@@QAAXPBGZZ  +
mov ecx [ebp-21Ch] +
mov eax [ecx-8] +
add esp 0Ch +
lea eax [eax+eax+2] +
push eax  +
push ecx  +
push 2  +
push edi  +
push offset aMuiverb  +
push dword ptr [ebp-22Ch]  +
call esi  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-21Ch] +
cmp eax edi +
jnz loc_1071CB2  +
call ??1CString@@QAE@XZ  +
push edi  +
push edi  +
push 20006h  +
push edi  +
push edi  +
push offset aMscfileShell_3  +
push 80000000h  +
lea ecx [ebp-22Ch] +
call sub_10708D6  +
cmp eax edi +
jnz loc_1071F54  +
mov ecx offset aSystemrootSy_0 +
mov eax ecx +
lea ebx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_1071F34  +
sub eax ebx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push ecx  +
push 2  +
push edi  +
push edi  +
push dword ptr [ebp-22Ch]  +
call esi  +
lea ecx [ebp-220h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-22Ch] +
call sub_1021315  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-23Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_100C50D  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
push offset dword_1006D5C  +
push offset dword_106B72C  +
push ecx  +
call sub_1071867  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
mov dword ptr [ecx] offset off_1011BF8 +
add ecx 4 +
mov dword ptr [ecx] 1 +
jmp sub_101A846  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_C] +
mov eax 80004003h +
test esi esi +
jz loc_1072381  +
and dword ptr [esi] 0 +
cmp [ebp+arg_4] 0 +
jz loc_1072374  +
push [ebp+arg_8]  +
call sub_100EDA6  +
test eax eax +
jnz loc_1072374  +
mov eax 80040110h +
jmp loc_1072381  +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call dword ptr [eax+24h]  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push offset Addend  +
jz loc_10723A3  +
call ds:InterlockedIncrement  +
jmp loc_10723A9  +
call ds:InterlockedDecrement  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10723D0  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10723B4  +
pop ebp  +
retn 0Ch  +
***
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_1072473  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset sub_1072488  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_1072469  +
push 0  +
jmp loc_107246C  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_107247F  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
test [edx-454B4E6Ah] dh +
call sub_1001F95  +
xor eax eax +
mov [ebp-10h] eax +
mov [ebp-4] eax +
cmp [ebp+8] eax +
jz loc_10724B9  +
mov eax [ebp+8] +
push eax  +
push ecx  +
call sub_107171B  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1070A9C  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_10724F0  +
mov eax 80070057h +
jmp locret_1072582  +
push ebx  +
mov ebx [eax+10h] +
test ebx ebx +
jnz loc_10724FF  +
xor eax eax +
jmp loc_1072581  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebx] +
test edi edi +
jz loc_1072569  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_107251F  +
mov eax [ebx+18h] +
test eax eax +
jz loc_1072528  +
call eax  +
test eax eax +
jmp loc_1072526  +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
jnz loc_1072553  +
push 1  +
call dword ptr [ebx+4]  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_107257C  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 84h +
jnz loc_1072553  +
push 1  +
call dword ptr [ebx+1Ch]  +
push eax  +
push dword ptr [ebx]  +
call sub_1071459  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_107257C  +
push ebx  +
push [ebp+arg_0]  +
call sub_100C081  +
mov ebx eax +
mov edi [ebx] +
test edi edi +
jnz loc_107250B  +
cmp [ebp+var_4] edi +
jl loc_107257C  +
cmp [ebp+arg_4] 0 +
jz loc_107257C  +
push 0  +
push [ebp+arg_0]  +
call sub_107171B  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_10725BF  +
cmp dword ptr [esi+18h] 10h +
jb loc_10725BF  +
cmp [ebp+arg_4] 0 +
lea eax [esi+4] +
push edi  +
mov edi [eax] +
jbe loc_10725B7  +
push [ebp+arg_4]  +
push edi  +
push 10h  +
push eax  +
call sub_107190F  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
push [ebp+arg_4]  +
mov ecx esi +
mov dword ptr [esi+18h] 0Fh +
call sub_10718E9  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [esi+14h] edi +
jnb loc_10725F0  +
call loc_10C80B1  +
mov eax [esi+14h] +
sub eax edi +
cmp eax [ebp+arg_4] +
jnb loc_10725FD  +
mov [ebp+arg_4] eax +
cmp [ebp+arg_4] 0 +
jbe loc_1072640  +
mov ecx [esi+18h] +
push ebx  +
lea edx [esi+4] +
cmp ecx 10h +
jb loc_1072613  +
mov ebx [edx] +
jmp loc_1072615  +
mov ebx edx +
cmp ecx 10h +
jb loc_107261C  +
mov edx [edx] +
sub eax [ebp+arg_4] +
add ebx edi +
add ebx [ebp+arg_4] +
push eax  +
push ebx  +
sub ecx edi +
push ecx  +
add edx edi +
push edx  +
call sub_1071931  +
mov eax [esi+14h] +
sub eax [ebp+arg_4] +
mov ecx esi +
push eax  +
call sub_10718E9  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_100A60E  +
mov ecx [ebp-18h] +
call sub_1001F95  +
mov edi ecx +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplicat_9  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
mov esi offset dword_10F54B0 +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10727CD  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-24h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_107225D  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn   +
push edi  +
lea eax [ebp-34h] +
push eax  +
mov ecx esi +
call sub_10719FF  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10727A5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_8] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_18] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplicatio  +
lea ecx [ebp+var_18] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+arg_4] 0 +
jnz loc_10728C2  +
push 80004003h  +
lea ecx [ebp+var_18] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_18] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_18] +
mov esi eax +
call sub_107225D  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
cmp byte_10F55A5 0 +
jnz loc_10728D2  +
mov ecx offset dword_10F54B0 +
jmp loc_10728D4  +
xor ecx ecx +
test ecx ecx +
jnz loc_10728DF  +
push 8000FFFFh  +
jmp loc_1072896  +
call sub_100942E  +
test eax eax +
jz loc_10728D8  +
push [ebp+arg_4]  +
lea ecx [ebp+var_28] +
push ecx  +
mov ecx eax +
call sub_10B3611  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107289F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_8] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_18] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplicat_0  +
lea ecx [ebp+var_18] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+arg_4] 0 +
mov ecx dword_10F5304 +
jz loc_10729B0  +
test ecx ecx +
jz loc_10729B0  +
push [ebp+arg_4]  +
lea eax [ebp+var_28] +
push eax  +
call sub_107DB59  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_18] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_10729BE  +
push 80004003h  +
lea ecx [ebp+var_18] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_18] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_18] +
mov esi eax +
call sub_107225D  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_8] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_18] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplicat_1  +
lea ecx [ebp+var_18] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte_10F55A5 0 +
jnz loc_1072A65  +
mov esi offset dword_10F54B0 +
jmp loc_1072A67  +
xor esi esi +
push 8000FFFFh  +
push esi  +
lea eax [ebp+var_28] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_18] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1072AB8  +
lea ecx [ebp+var_18] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_18] +
mov esi eax +
call sub_107225D  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+84h]  +
jmp loc_1072A95  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplica_15  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte_10F55A5 bl +
jnz loc_1072B43  +
mov ecx offset dword_10F54B0 +
jmp loc_1072B45  +
xor ecx ecx +
cmp ecx ebx +
jnz loc_1072B59  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1072B85  +
lea eax [ebp-34h] +
push eax  +
call sub_1070607  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call sub_107225D  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov byte ptr [ebp-4] 1 +
cmp byte_10F55A5 bl +
jnz loc_1072C11  +
mov esi offset dword_10F54B0 +
jmp loc_1072C13  +
xor esi esi +
cmp esi ebx +
jz loc_1072C2E  +
push ebx  +
mov [esi+0FCh] bl +
call ?AfxOleSetUserCtrl@@YGXH@Z  +
mov ecx esi +
call sub_100942E  +
cmp eax ebx +
jnz loc_1072C4D  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea eax [ebp-24h] +
push eax  +
push offset aCmmcapplica_16  +
call ds:?TraceError@@YGXPBGABVSC@mmcerror@@@Z  +
jmp loc_1072C5A  +
push ebx  +
push ebx  +
push 10h  +
push dword ptr [eax+20h]  +
call ds:PostMessageW  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call sub_107225D  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_8] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_18] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplicat_2  +
lea ecx [ebp+var_18] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_4] +
push 80070057h  +
push esi  +
lea eax [ebp+var_28] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_18] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp+var_18] +
test al al +
jz loc_1072D2D  +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_18] +
mov esi eax +
call sub_107225D  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
mov dword ptr [esi] 3 +
jmp loc_1072D0D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_8] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_18] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplicat_3  +
lea ecx [ebp+var_18] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_4] +
push 80070057h  +
push esi  +
lea eax [ebp+var_28] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_18] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp+var_18] +
test al al +
jz loc_1072E05  +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_18] +
mov esi eax +
call sub_107225D  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
and dword ptr [esi] 0 +
jmp loc_1072DE5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_8] +
call MFC42u_6466  +
xor edi edi +
push edi  +
lea ecx [ebp+var_18] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplicat_4  +
lea ecx [ebp+var_18] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx [ebp+arg_4] +
push 80070057h  +
push ebx  +
lea eax [ebp+var_28] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_18] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1072EE2  +
lea ecx [ebp+var_18] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_18] +
mov esi eax +
call sub_107225D  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
pop edi  +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
cmp byte_10F55A5 0 +
jnz loc_1072EF0  +
mov edi offset dword_10F54B0 +
mov esi 8000FFFFh +
push esi  +
push edi  +
lea eax [ebp+var_28] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_18] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1072EBD  +
mov ecx edi +
call sub_100942E  +
mov edi eax +
push esi  +
push edi  +
lea eax [ebp+var_28] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_18] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1072EBD  +
push dword ptr [edi+20h]  +
call ds:IsWindowVisible  +
mov [ebx] eax +
jmp loc_1072EBD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_8] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_18] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplicat_5  +
lea ecx [ebp+var_18] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte_10F55A5 0 +
jnz loc_1072FE8  +
mov edi offset dword_10F54B0 +
jmp loc_1072FEA  +
xor edi edi +
mov esi 8000FFFFh +
push esi  +
push edi  +
lea eax [ebp+var_28] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_18] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107303D  +
lea ecx [ebp+var_18] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_18] +
mov esi eax +
call sub_107225D  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx edi +
call sub_100942E  +
mov edi eax +
push esi  +
push edi  +
lea eax [ebp+var_28] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_18] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1073019  +
push 5  +
mov ecx edi +
call ?ShowWindow@CWnd@@QAEHH@Z  +
push eax  +
lea ecx [ebp+var_18] +
call sub_109F3AD  +
jmp loc_1073019  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_8] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_18] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplicat_6  +
lea ecx [ebp+var_18] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte_10F55A5 0 +
jnz loc_10730F6  +
mov edi offset dword_10F54B0 +
jmp loc_10730F8  +
xor edi edi +
mov esi 8000FFFFh +
push esi  +
push edi  +
lea eax [ebp+var_28] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_18] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107314B  +
lea ecx [ebp+var_18] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_18] +
mov esi eax +
call sub_107225D  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
cmp byte ptr [edi+0FCh] 0 +
jz loc_1073164  +
push 80004005h  +
lea ecx [ebp+var_18] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1073127  +
mov ecx edi +
call sub_100942E  +
mov edi eax +
push esi  +
push edi  +
lea eax [ebp+var_28] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_18] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1073127  +
push 0  +
mov ecx edi +
call ?ShowWindow@CWnd@@QAEHH@Z  +
push eax  +
lea ecx [ebp+var_18] +
call sub_109F3AD  +
jmp loc_1073127  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_8] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_18] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplicat_7  +
lea ecx [ebp+var_18] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+arg_4] +
push 80070057h  +
push edi  +
lea eax [ebp+var_28] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_18] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1073267  +
lea ecx [ebp+var_18] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_18] +
mov esi eax +
call sub_107225D  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
cmp byte_10F55A5 0 +
jnz loc_1073277  +
mov esi offset dword_10F54B0 +
jmp loc_1073279  +
xor esi esi +
push 8000FFFFh  +
push esi  +
lea eax [ebp+var_28] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_18] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1073243  +
movzx eax byte ptr [esi+0FCh] +
mov [edi] eax +
jmp loc_1073243  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_8] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_18] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplicat_8  +
lea ecx [ebp+var_18] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte_10F55A5 0 +
jnz loc_107333F  +
mov esi offset dword_10F54B0 +
jmp loc_1073341  +
xor esi esi +
push 8000FFFFh  +
push esi  +
lea eax [ebp+var_28] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_18] +
call sub_107B7E5  +
lea ecx [ebp+var_28] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_18] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1073392  +
lea ecx [ebp+var_18] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_18] +
mov esi eax +
call sub_107225D  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
cmp [ebp+arg_4] 0 +
mov ecx esi +
setnz al  +
movzx eax al +
push eax  +
call sub_10706B5  +
jmp loc_107336F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push edi  +
mov edi ecx +
test eax eax +
jnz loc_1073404  +
and [ebp+arg_0] eax +
jmp loc_107340A  +
mov eax [eax+20h] +
mov [ebp+arg_0] eax +
push esi  +
mov esi [edi+134h] +
mov eax [esi] +
lea ecx [ebp+arg_0] +
push ecx  +
push esi  +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_10113C1  +
cmp [ebp+var_4] esi +
pop esi  +
jz loc_107343A  +
push [ebp+var_4]  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [edi+130h] +
call sub_100ED24  +
pop edi  +
leave   +
retn 4  +
***
call sub_1001F95  +
xor edi edi +
push edi  +
lea ecx [ebp-28h] +
mov [ebp-14h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aSccreatedumpsn  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+10h] +
push 80070057h  +
push esi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10734C1  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_107357C  +
mov [esi] edi +
mov [ebp-10h] edi +
push 17h  +
push edi  +
push offset nullsub_10  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_1072298  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107355C  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov esi eax +
mov eax [ebp+0Ch] +
push dword ptr [eax]  +
lea ecx [ebp-18h] +
call sub_101DD5D  +
mov eax [eax] +
mov ecx [esi] +
push eax  +
push esi  +
mov byte ptr [ebp-4] 4 +
call dword ptr [ecx+1Ch]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push dword ptr [ebp-18h]  +
mov byte ptr [ebp-4] 3 +
call SysFreeString  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107355C  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-10h] +
push offset dword_10735CC  +
call sub_107FF60  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
mov [ebp-14h] ebx +
cmp eax edi +
jz loc_107357C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcappDumpcon  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-10h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1040794  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1073649  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
jmp loc_1073794  +
mov [ebp-14h] ebx +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp-34h] +
push eax  +
call sub_1073444  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107375A  +
push 8000FFFFh  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107375A  +
push offset asc_10737C0  +
lea ecx [ebp-10h] +
call ?FindOneOf@CString@@QBEHPBG@Z  +
cmp eax 0FFFFFFFFh +
jnz loc_1073709  +
lea eax [ebp-10h] +
push eax  +
push offset a__0  +
lea eax [ebp+0Ch] +
push eax  +
call ??H@YG?AVCString@@PBGABV0@@Z  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 5 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
mov esi [ebp-10h] +
push esi  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_1073730  +
push dword ptr [ebp-10h]  +
call ds:DeleteFileW  +
test eax eax +
jnz loc_1073730  +
lea ecx [ebp-24h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
jmp loc_107375D  +
lea ecx [ebp-14h] +
call sub_100A5CF  +
push dword ptr [ebp-10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107375D  +
jmp loc_1073778  +
mov esi [ebp+0Ch] +
push 10h  +
sub esp 10h +
lea eax [ebp-24h] +
mov ecx esp +
mov [ebp+8] esp +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
push esi  +
call ds:?MMCErrorBox@@YGHPBGVSC@mmcerror@@I@Z  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1073794  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-10h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_107232D  +
test [ebp+arg_0] 1 +
jz loc_1073819  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax 80004001h +
retn 0Ch  +
***
mov dword ptr [esi] offset off_1011BF8 +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1073874  +
test esi esi +
jz loc_1073874  +
push 1  +
mov ecx esi +
call sub_10737FF  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dword_106B72C  +
push [ebp+arg_4]  +
call sub_100ED86  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_10738CB  +
push eax  +
call sub_107243D  +
test eax eax +
jge loc_10738CB  +
cmp eax 80004002h +
jz loc_10738CB  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi [ebp+arg_4] +
push esi  +
push [ebp+arg_0]  +
lea eax [ebp+arg_8] +
push eax  +
call sub_10113C1  +
xor ecx ecx +
cmp [eax] esi +
pop esi  +
setnz cl  +
mov al cl +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 0FFFFFFFEh +
jbe loc_1073928  +
call loc_10C8063  +
cmp [esi+18h] edi +
jnb loc_107393A  +
push dword ptr [esi+14h]  +
mov ecx esi +
push edi  +
call sub_107264D  +
jmp loc_1073966  +
cmp [ebp+arg_4] 0 +
jz loc_107395A  +
cmp edi 10h +
jnb loc_107395A  +
mov eax [esi+14h] +
cmp edi eax +
jnb loc_107394E  +
mov eax edi +
push eax  +
push 1  +
mov ecx esi +
call sub_107258B  +
jmp loc_1073966  +
test edi edi +
jnz loc_1073966  +
push edi  +
mov ecx esi +
call sub_10718E9  +
xor eax eax +
cmp eax edi +
sbb eax eax +
pop edi  +
neg eax  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcidispatchi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
add esi 0FFFFFFF4h +
push eax  +
lea ecx [ebp-18h] +
mov [ebp-14h] esi +
call sub_1018390  +
mov esi [ebp-18h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1073A5F  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1073A89  +
push 0  +
push esi  +
call ds:CoDisconnectObject  +
push eax  +
lea ecx [ebp-28h] +
call sub_109F3AD  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test esi esi +
jz loc_1073A99  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call sub_107225D  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_100A60E  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_1073AD1  +
mov eax 80004003h +
jmp loc_1073B4D  +
mov edi 8007000Eh +
push 28h  +
mov [eax] esi +
mov [ebp-14h] edi +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_1073AF9  +
push dword ptr [ebp+8]  +
mov ecx eax +
call near ptr dword_1073830+2  +
jmp loc_1073AFB  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
jmp loc_1073B13  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1073B0D +
retn   +
***
mov edi [ebp-14h] +
mov esi [ebp-18h] +
test esi esi +
jz loc_1073B4B  +
mov eax [ebp+8] +
lea ecx [esi+8] +
mov [esi+24h] eax +
call sub_1041AAF  +
mov edi eax +
test edi edi +
jl loc_1073B42  +
xor edi edi +
test edi edi +
jnz loc_1073B42  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_1073B4B  +
push 1  +
mov ecx esi +
call sub_10737FF  +
mov eax edi +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_106B7A0 +
call sub_107258B  +
mov ecx esi +
pop esi  +
jmp ??1exception@@UAE@XZ  +
***
cmp dword ptr [ecx+24h] 10h +
jb loc_1073B88  +
mov eax [ecx+10h] +
retn   +
***
lea eax [ecx+10h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1073B5A  +
test byte ptr [ebp+8] 1 +
jz loc_1073BAB  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
cmp [edi+14h] eax +
jnb loc_1073BD1  +
call loc_10C80B1  +
mov esi [edi+14h] +
mov eax [ebp+arg_4] +
sub esi eax +
cmp [ebp+arg_8] esi +
jnb loc_1073BE1  +
mov esi [ebp+arg_8] +
mov ecx ebx +
cmp ebx edi +
jnz loc_1073BFF  +
push 0FFFFFFFFh  +
add esi eax +
push esi  +
call sub_10725DA  +
push [ebp+arg_4]  +
mov ecx ebx +
push 0  +
call sub_10725DA  +
jmp loc_1073C3F  +
push 0  +
push esi  +
call sub_1073912  +
test al al +
jz loc_1073C3F  +
cmp dword ptr [edi+18h] 10h +
jb loc_1073C16  +
mov edi [edi+4] +
jmp loc_1073C19  +
add edi 4 +
mov ecx [ebx+18h] +
cmp ecx 10h +
jb loc_1073C26  +
mov eax [ebx+4] +
jmp loc_1073C29  +
lea eax [ebx+4] +
mov edx [ebp+arg_4] +
push esi  +
add edi edx +
push edi  +
push ecx  +
push eax  +
call sub_107190F  +
push esi  +
mov ecx ebx +
call sub_10718E9  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1070ABB  +
test al al +
jz loc_1073C81  +
cmp dword ptr [esi+18h] 10h +
jb loc_1073C6E  +
mov eax [esi+4] +
jmp loc_1073C71  +
lea eax [esi+4] +
push [ebp+arg_4]  +
sub edi eax +
push edi  +
push esi  +
mov ecx esi +
call sub_1073BB7  +
jmp loc_1073CB8  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1073912  +
test al al +
jz loc_1073CB6  +
mov ecx [esi+18h] +
cmp ecx 10h +
jb loc_1073C9E  +
mov eax [esi+4] +
jmp loc_1073CA1  +
lea eax [esi+4] +
push [ebp+arg_4]  +
push edi  +
push ecx  +
push eax  +
call sub_107190F  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_10718E9  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aDispatch_callS  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi offset unk_10FD44C +
test byte ptr dword_10FD448 bl +
jnz loc_1073D2C  +
or dword_10FD448 ebx +
push offset dword_10FD444  +
push offset aOndocumentopen  +
push edi  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 2 +
call sub_10526DE  +
push offset loc_10E8099  +
call sub_100BFD5  +
pop ecx  +
mov [ebp-4] bl +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1073D54  +
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_1073DD5  +
push 3  +
pop eax  +
mov [ebp-50h] ax +
mov eax [ebp+10h] +
mov [ebp-48h] eax +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call sub_105154D  +
mov byte ptr [ebp-4] 4 +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
push eax  +
push 2  +
lea eax [ebp-50h] +
push eax  +
push dword_10FD444  +
lea eax [ebp-30h] +
push offset dword_10514FC  +
push eax  +
lea ecx [esi+4] +
call sub_10519D0  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push offset loc_1053549  +
push 2  +
push 10h  +
lea eax [ebp-50h] +
push eax  +
mov [ebp-4] bl +
call sub_100C964  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aDispatch_cal_1  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi offset unk_10FD464 +
test byte ptr dword_10FD460 bl +
jnz loc_1073EBE  +
or dword_10FD460 ebx +
push offset dword_10FD45C  +
push offset aOndocumentclos  +
push edi  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 2 +
call sub_10526DE  +
push offset loc_10E8089  +
call sub_100BFD5  +
pop ecx  +
mov [ebp-4] bl +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1073EE3  +
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_1073F51  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-30h] +
call sub_105154D  +
mov byte ptr [ebp-4] 3 +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
push eax  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
push dword_10FD45C  +
lea eax [ebp-40h] +
push offset dword_10514FC  +
push eax  +
lea ecx [esi+4] +
call sub_10519D0  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push offset loc_1053549  +
push ebx  +
push 10h  +
lea eax [ebp-30h] +
push eax  +
mov [ebp-4] bl +
call sub_100C964  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aDispatch_cal_5  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi offset unk_10FD47C +
test byte ptr dword_10FD478 bl +
jnz loc_1074040  +
or dword_10FD478 ebx +
push offset dword_10FD474  +
push offset aOnsnapinadded  +
push edi  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 2 +
call sub_10526DE  +
push offset loc_10E8079  +
call sub_100BFD5  +
pop ecx  +
mov [ebp-4] bl +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1074065  +
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10740E4  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-50h] +
call sub_105154D  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call sub_105154D  +
mov byte ptr [ebp-4] 4 +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
push eax  +
push 2  +
lea eax [ebp-50h] +
push eax  +
push dword_10FD474  +
lea eax [ebp-30h] +
push offset dword_10514FC  +
push eax  +
lea ecx [esi+4] +
call sub_10519D0  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push offset loc_1053549  +
push 2  +
push 10h  +
lea eax [ebp-50h] +
push eax  +
mov [ebp-4] bl +
call sub_100C964  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aDispatch_cal_6  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi offset unk_10FD494 +
test byte ptr dword_10FD490 bl +
jnz loc_10741C4  +
or dword_10FD490 ebx +
push offset dword_10FD48C  +
push offset aOnsnapinremove  +
push edi  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 2 +
call sub_10526DE  +
push offset loc_10E8069  +
call sub_100BFD5  +
pop ecx  +
mov [ebp-4] bl +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10741E9  +
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_1074268  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-50h] +
call sub_105154D  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call sub_105154D  +
mov byte ptr [ebp-4] 4 +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
push eax  +
push 2  +
lea eax [ebp-50h] +
push eax  +
push dword_10FD48C  +
lea eax [ebp-30h] +
push offset dword_10514FC  +
push eax  +
lea ecx [esi+4] +
call sub_10519D0  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push offset loc_1053549  +
push 2  +
push 10h  +
lea eax [ebp-50h] +
push eax  +
mov [ebp-4] bl +
call sub_100C964  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aDispatch_cal_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi offset unk_10FD4AC +
test byte ptr dword_10FD4A8 bl +
jnz loc_1074350  +
or dword_10FD4A8 ebx +
push offset dword_10FD4A4  +
push offset aOnnewview  +
push edi  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 2 +
call sub_10526DE  +
push offset loc_10E8059  +
call sub_100BFD5  +
pop ecx  +
mov [ebp-4] bl +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1074375  +
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10743E3  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-30h] +
call sub_105154D  +
mov byte ptr [ebp-4] 3 +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
push eax  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
push dword_10FD4A4  +
lea eax [ebp-40h] +
push offset dword_10514FC  +
push eax  +
lea ecx [esi+4] +
call sub_10519D0  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push offset loc_1053549  +
push ebx  +
push 10h  +
lea eax [ebp-30h] +
push eax  +
mov [ebp-4] bl +
call sub_100C964  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aDispatch_cal_7  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi offset unk_10FD4C4 +
test byte ptr dword_10FD4C0 bl +
jnz loc_10744B4  +
or dword_10FD4C0 ebx +
push offset dword_10FD4BC  +
push offset aOnviewclose  +
push edi  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 2 +
call sub_10526DE  +
push offset loc_10E8049  +
call sub_100BFD5  +
pop ecx  +
mov [ebp-4] bl +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10744D9  +
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_1074547  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-30h] +
call sub_105154D  +
mov byte ptr [ebp-4] 3 +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
push eax  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
push dword_10FD4BC  +
lea eax [ebp-40h] +
push offset dword_10514FC  +
push eax  +
lea ecx [esi+4] +
call sub_10519D0  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push offset loc_1053549  +
push ebx  +
push 10h  +
lea eax [ebp-30h] +
push eax  +
mov [ebp-4] bl +
call sub_100C964  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aDispatch_cal_3  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi offset unk_10FD4DC +
test byte ptr dword_10FD4D8 bl +
jnz loc_1074620  +
or dword_10FD4D8 ebx +
push offset dword_10FD4D4  +
push offset aOnviewchange  +
push edi  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 2 +
call sub_10526DE  +
push offset loc_10E8039  +
call sub_100BFD5  +
pop ecx  +
mov [ebp-4] bl +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1074645  +
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10746C4  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-50h] +
call sub_105154D  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call sub_105154D  +
mov byte ptr [ebp-4] 4 +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
push eax  +
push 2  +
lea eax [ebp-50h] +
push eax  +
push dword_10FD4D4  +
lea eax [ebp-30h] +
push offset dword_10514FC  +
push eax  +
lea ecx [esi+4] +
call sub_10519D0  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push offset loc_1053549  +
push 2  +
push 10h  +
lea eax [ebp-50h] +
push eax  +
mov [ebp-4] bl +
call sub_100C964  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aDispatch_cal_2  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi offset unk_10FD4F4 +
test byte ptr dword_10FD4F0 bl +
jnz loc_10747A2  +
or dword_10FD4F0 ebx +
push offset dword_10FD4EC  +
push offset aOnselectioncha  +
push edi  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 2 +
call sub_10526DE  +
push offset loc_10E8029  +
call sub_100BFD5  +
pop ecx  +
mov [ebp-4] bl +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10747C7  +
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_1074846  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-50h] +
call sub_105154D  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call sub_105154D  +
mov byte ptr [ebp-4] 4 +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
push eax  +
push 2  +
lea eax [ebp-50h] +
push eax  +
push dword_10FD4EC  +
lea eax [ebp-30h] +
push offset dword_10514FC  +
push eax  +
lea ecx [esi+4] +
call sub_10519D0  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push offset loc_1053549  +
push 2  +
push 10h  +
lea eax [ebp-50h] +
push eax  +
mov [ebp-4] bl +
call sub_100C964  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aDispatch_cal_8  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi offset unk_10FD50C +
test byte ptr dword_10FD508 bl +
jnz loc_107493C  +
or dword_10FD508 ebx +
push offset dword_10FD504  +
push offset aOncontextmenue  +
push edi  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 2 +
call sub_10526DE  +
push offset loc_10E8019  +
call sub_100BFD5  +
pop ecx  +
mov [ebp-4] bl +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1074961  +
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10749CF  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-30h] +
call sub_105154D  +
mov byte ptr [ebp-4] 3 +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
push eax  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
push dword_10FD504  +
lea eax [ebp-40h] +
push offset dword_10514FC  +
push eax  +
lea ecx [esi+4] +
call sub_10519D0  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push offset loc_1053549  +
push ebx  +
push 10h  +
lea eax [ebp-30h] +
push eax  +
mov [ebp-4] bl +
call sub_100C964  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aDispatch_cal_9  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi offset unk_10FD524 +
test byte ptr dword_10FD520 bl +
jnz loc_1074AD4  +
or dword_10FD520 ebx +
push offset dword_10FD51C  +
push offset aOntoolbarbutto  +
push esi  +
lea ecx [edi+4] +
mov byte ptr [ebp-4] 2 +
call sub_10526DE  +
push offset loc_10E8009  +
call sub_100BFD5  +
pop ecx  +
mov [ebp-4] bl +
mov ecx esi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1074AF9  +
push esi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_1074B42  +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
push eax  +
push 0  +
push 0  +
push dword_10FD51C  +
lea eax [ebp-30h] +
push offset dword_10514FC  +
push eax  +
lea ecx [edi+4] +
call sub_10519D0  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aDispatch_ca_10  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi offset unk_10FD53C +
test byte ptr dword_10FD538 bl +
jnz loc_1074C4E  +
or dword_10FD538 ebx +
push offset dword_10FD534  +
push offset aOnlistupdated  +
push edi  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 2 +
call sub_10526DE  +
push offset loc_10E7FF9  +
call sub_100BFD5  +
pop ecx  +
mov [ebp-4] bl +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1074C73  +
push edi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_1074CE1  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-30h] +
call sub_105154D  +
mov byte ptr [ebp-4] 3 +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
push eax  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
push dword_10FD534  +
lea eax [ebp-40h] +
push offset dword_10514FC  +
push eax  +
lea ecx [esi+4] +
call sub_10519D0  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push offset loc_1053549  +
push ebx  +
push 10h  +
lea eax [ebp-30h] +
push eax  +
mov [ebp-4] bl +
call sub_100C964  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1074E14  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 2 +
test esi esi +
jz loc_1074ED6  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1074ED6  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 5 +
call sub_100A5CF  +
mov esi [eax] +
lea ecx [ebp-10h] +
mov [ebp-1Ch] eax +
add esi 10h +
call sub_100A5E6  +
push eax  +
push offset dword_106D434  +
push dword ptr [ebp-1Ch]  +
call dword ptr [esi]  +
push eax  +
lea ecx [ebp-34h] +
call sub_109F3AD  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1074EA4  +
push 0  +
push dword ptr [ebp-10h]  +
call ds:CoDisconnectObject  +
push eax  +
lea ecx [ebp-34h] +
call sub_109F3AD  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1074EA4  +
lea eax [ebp-44h] +
push eax  +
mov ecx edi +
call sub_10739D0  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 6 +
call sub_107B7E5  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 3 +
mov [ebp-18h] ebx +
test eax eax +
jz loc_1074EC5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_1074ED6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call sub_107225D  +
mov eax [ebp-20h] +
mov ecx [ebp-24h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
sub ecx 0C4h +
jmp loc_1075F72  +
***
push 48h  +
mov eax offset byte_10D2A3D +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcappSconclo  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1074FFE  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10751DF  +
mov eax [edi+24h] +
push 4  +
pop ebx  +
test eax eax +
jnz loc_1075020  +
push 1  +
lea ecx [ebp-54h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov byte ptr [ebp-4] 3 +
mov dword ptr [ebp-10h] 2 +
jmp loc_1075048  +
push eax  +
lea ecx [ebp-20h] +
call sub_1052FD9  +
lea ecx [ebp-44h] +
push ecx  +
mov ecx eax +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
call sub_1070702  +
mov dword ptr [ebp-4] 5 +
mov dword ptr [ebp-10h] 0Ch +
push eax  +
lea ecx [ebp-34h] +
call esi  +
test byte ptr [ebp-10h] 8 +
mov [ebp-4] ebx +
jz loc_1075064  +
and dword ptr [ebp-10h] 0FFFFFFF7h +
lea ecx [ebp-44h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov dword ptr [ebp-4] 3 +
test [ebp-10h] bl +
jz loc_1075081  +
mov eax [ebp-18h] +
and dword ptr [ebp-10h] 0FFFFFFFBh +
test eax eax +
jz loc_1075081  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor ebx ebx +
inc ebx  +
test byte ptr [ebp-10h] 2 +
mov [ebp-4] ebx +
jz loc_107509A  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-54h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10750BC  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-10h] ebx +
jmp loc_10751DF  +
push ebx  +
lea ecx [ebp-54h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 6 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-54h] +
mov bl al +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jz loc_10750FD  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or dword ptr [ebp-10h] 1 +
jmp loc_10751DF  +
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 7 +
call sub_100A5E6  +
mov ecx [ebp+0Ch] +
push eax  +
lea eax [ebp-54h] +
push eax  +
call sub_109426F  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10751BD  +
push dword ptr [edi+24h]  +
lea ecx [ebp-20h] +
call sub_1052FD9  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-54h] +
push ecx  +
mov ecx eax +
mov byte ptr [ebp-4] 9 +
call near ptr dword_1074448+3  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0Ah +
call esi  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 9 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 7 +
test eax eax +
jz loc_1075183  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10751A7  +
cmp byte ptr [eax+19h] 5 +
jb loc_10751A7  +
push offset dword_106B6F0  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10751BD  +
lea ecx [ebp-34h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-14h] +
or dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10751DF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 48h  +
mov eax offset byte_10D2963 +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
xor esi esi +
inc esi  +
push 0  +
lea ecx [ebp-34h] +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcappSconcon  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [edi+4] +
push 4  +
pop ebx  +
test eax eax +
jnz loc_107528B  +
push esi  +
lea ecx [ebp-54h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov byte ptr [ebp-4] 3 +
mov [ebp-10h] esi +
jmp loc_10752B7  +
push eax  +
lea ecx [ebp-24h] +
call sub_1052FD9  +
lea ecx [ebp-44h] +
push ecx  +
mov ecx eax +
mov [ebp-4] ebx +
mov dword ptr [ebp-10h] 2 +
call sub_1070702  +
mov dword ptr [ebp-4] 5 +
mov dword ptr [ebp-10h] 6 +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
call esi  +
mov [ebp-4] ebx +
test [ebp-10h] bl +
jz loc_10752D8  +
and dword ptr [ebp-10h] 0FFFFFFFBh +
lea ecx [ebp-44h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
test byte ptr [ebp-10h] 2 +
mov dword ptr [ebp-4] 3 +
jz loc_10752F6  +
mov eax [ebp-1Ch] +
and dword ptr [ebp-10h] 0FFFFFFFDh +
test eax eax +
jz loc_10752F6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test byte ptr [ebp-10h] 1 +
mov dword ptr [ebp-4] 2 +
jz loc_1075310  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
lea ecx [ebp-54h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107532F  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10753E7  +
push 1  +
lea ecx [ebp-54h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 6 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-54h] +
mov bl al +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jnz loc_10753DA  +
push dword ptr [edi+4]  +
lea ecx [ebp-24h] +
call sub_1052FD9  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-54h] +
push ecx  +
mov ecx eax +
mov byte ptr [ebp-4] 7 +
call near ptr dword_10748D0+3  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_10753A0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10753C4  +
cmp byte ptr [eax+19h] 5 +
jb loc_10753C4  +
push offset dword_106B6F0  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10753DA  +
lea ecx [ebp-34h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or dword ptr [ebp-10h] 8 +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 48h  +
mov eax offset byte_10D2A3D +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcappSconlis  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10754D7  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10756B8  +
mov eax [edi+24h] +
push 4  +
pop ebx  +
test eax eax +
jnz loc_10754F9  +
push 1  +
lea ecx [ebp-54h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov byte ptr [ebp-4] 3 +
mov dword ptr [ebp-10h] 2 +
jmp loc_1075521  +
push eax  +
lea ecx [ebp-20h] +
call sub_1052FD9  +
lea ecx [ebp-44h] +
push ecx  +
mov ecx eax +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
call sub_1070702  +
mov dword ptr [ebp-4] 5 +
mov dword ptr [ebp-10h] 0Ch +
push eax  +
lea ecx [ebp-34h] +
call esi  +
test byte ptr [ebp-10h] 8 +
mov [ebp-4] ebx +
jz loc_107553D  +
and dword ptr [ebp-10h] 0FFFFFFF7h +
lea ecx [ebp-44h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov dword ptr [ebp-4] 3 +
test [ebp-10h] bl +
jz loc_107555A  +
mov eax [ebp-18h] +
and dword ptr [ebp-10h] 0FFFFFFFBh +
test eax eax +
jz loc_107555A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor ebx ebx +
inc ebx  +
test byte ptr [ebp-10h] 2 +
mov [ebp-4] ebx +
jz loc_1075573  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-54h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1075595  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-10h] ebx +
jmp loc_10756B8  +
push ebx  +
lea ecx [ebp-54h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 6 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-54h] +
mov bl al +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jz loc_10755D6  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or dword ptr [ebp-10h] 1 +
jmp loc_10756B8  +
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 7 +
call sub_100A5E6  +
mov ecx [ebp+0Ch] +
push eax  +
lea eax [ebp-54h] +
push eax  +
call sub_109426F  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1075696  +
push dword ptr [edi+24h]  +
lea ecx [ebp-20h] +
call sub_1052FD9  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-54h] +
push ecx  +
mov ecx eax +
mov byte ptr [ebp-4] 9 +
call near ptr dword_1074BE0+5  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0Ah +
call esi  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 9 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 7 +
test eax eax +
jz loc_107565C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1075680  +
cmp byte ptr [eax+19h] 5 +
jb loc_1075680  +
push offset dword_106B6F0  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1075696  +
lea ecx [ebp-34h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-14h] +
or dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10756B8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov ebx ecx +
mov [ebp-18h] ebx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-38h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCamcappSconsna  +
lea ecx [ebp-38h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-28h] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107579E  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
jmp loc_10759AD  +
mov eax [ebx+0E8h] +
push 4  +
pop ebx  +
test eax eax +
jnz loc_10757C2  +
push edi  +
lea ecx [ebp-58h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov byte ptr [ebp-4] 3 +
mov dword ptr [ebp-10h] 2 +
jmp loc_10757EA  +
push eax  +
lea ecx [ebp-24h] +
call sub_1052FD9  +
lea ecx [ebp-48h] +
push ecx  +
mov ecx eax +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
call sub_1070702  +
mov dword ptr [ebp-4] 5 +
mov dword ptr [ebp-10h] 0Ch +
push eax  +
lea ecx [ebp-38h] +
call esi  +
test byte ptr [ebp-10h] 8 +
mov [ebp-4] ebx +
jz loc_1075806  +
and dword ptr [ebp-10h] 0FFFFFFF7h +
lea ecx [ebp-48h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov dword ptr [ebp-4] 3 +
test [ebp-10h] bl +
jz loc_1075823  +
mov eax [ebp-1Ch] +
and dword ptr [ebp-10h] 0FFFFFFFBh +
test eax eax +
jz loc_1075823  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test byte ptr [ebp-10h] 2 +
mov [ebp-4] edi +
jz loc_1075839  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-58h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107585B  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-10h] edi +
jmp loc_10759AD  +
push edi  +
lea ecx [ebp-58h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 6 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-58h] +
mov bl al +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jnz loc_1075846  +
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 7 +
call sub_100A5E6  +
mov ecx [ebp+0Ch] +
push eax  +
lea eax [ebp-58h] +
push eax  +
call sub_107DB59  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107598C  +
push 8000FFFFh  +
push dword ptr [ebp-14h]  +
lea eax [ebp-58h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 9 +
call esi  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107598C  +
mov eax [ebp-18h] +
push dword ptr [eax+0E8h]  +
lea ecx [ebp-24h] +
call sub_1052FD9  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-58h] +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 0Ah +
push ecx  +
mov ecx eax +
call near ptr dword_1073FD4+3  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0Bh +
call esi  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 0Ah +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 7 +
test eax eax +
jz loc_1075952  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1075976  +
cmp byte ptr [eax+19h] 5 +
jb loc_1075976  +
push offset dword_106B6F0  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107598C  +
lea ecx [ebp-38h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-14h] +
or [ebp-10h] edi +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10759AD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov ebx ecx +
mov [ebp-18h] ebx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-38h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCamcappScons_0  +
lea ecx [ebp-38h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-28h] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1075A86  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
jmp loc_1075C95  +
mov eax [ebx+0E8h] +
push 4  +
pop ebx  +
test eax eax +
jnz loc_1075AAA  +
push edi  +
lea ecx [ebp-58h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov byte ptr [ebp-4] 3 +
mov dword ptr [ebp-10h] 2 +
jmp loc_1075AD2  +
push eax  +
lea ecx [ebp-24h] +
call sub_1052FD9  +
lea ecx [ebp-48h] +
push ecx  +
mov ecx eax +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
call sub_1070702  +
mov dword ptr [ebp-4] 5 +
mov dword ptr [ebp-10h] 0Ch +
push eax  +
lea ecx [ebp-38h] +
call esi  +
test byte ptr [ebp-10h] 8 +
mov [ebp-4] ebx +
jz loc_1075AEE  +
and dword ptr [ebp-10h] 0FFFFFFF7h +
lea ecx [ebp-48h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov dword ptr [ebp-4] 3 +
test [ebp-10h] bl +
jz loc_1075B0B  +
mov eax [ebp-1Ch] +
and dword ptr [ebp-10h] 0FFFFFFFBh +
test eax eax +
jz loc_1075B0B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test byte ptr [ebp-10h] 2 +
mov [ebp-4] edi +
jz loc_1075B21  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-58h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1075B43  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or [ebp-10h] edi +
jmp loc_1075C95  +
push edi  +
lea ecx [ebp-58h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 6 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-58h] +
mov bl al +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jnz loc_1075B2E  +
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 7 +
call sub_100A5E6  +
mov ecx [ebp+0Ch] +
push eax  +
lea eax [ebp-58h] +
push eax  +
call sub_107DB59  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1075C74  +
push 8000FFFFh  +
push dword ptr [ebp-14h]  +
lea eax [ebp-58h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 9 +
call esi  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1075C74  +
mov eax [ebp-18h] +
push dword ptr [eax+0E8h]  +
lea ecx [ebp-24h] +
call sub_1052FD9  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-58h] +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 0Ah +
push ecx  +
mov ecx eax +
call near ptr dword_1074158+3  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0Bh +
call esi  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 0Ah +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 7 +
test eax eax +
jz loc_1075C3A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1075C5E  +
cmp byte ptr [eax+19h] 5 +
jb loc_1075C5E  +
push offset dword_106B6F0  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1075C74  +
lea ecx [ebp-38h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-14h] +
or [ebp-10h] edi +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1075C95  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
push 44h  +
mov eax offset byte_10D2BDF +
call sub_1001F95  +
mov edi ecx +
mov [ebp-14h] edi +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcappScontoo  +
lea ecx [ebp-30h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [edi+14h] +
push 3  +
pop edi  +
test eax eax +
jnz loc_1075D3E  +
push esi  +
lea ecx [ebp-50h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push 2  +
pop ebx  +
mov [ebp-4] bl +
mov [ebp-10h] esi +
jmp loc_1075D69  +
push eax  +
lea ecx [ebp-20h] +
call sub_1052FD9  +
push 2  +
pop ebx  +
lea ecx [ebp-40h] +
push ecx  +
mov ecx eax +
mov [ebp-4] edi +
mov [ebp-10h] ebx +
call sub_1070702  +
mov dword ptr [ebp-4] 4 +
mov dword ptr [ebp-10h] 6 +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
call esi  +
test byte ptr [ebp-10h] 4 +
mov [ebp-4] edi +
jz loc_1075D8B  +
and dword ptr [ebp-10h] 0FFFFFFFBh +
lea ecx [ebp-40h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov [ebp-4] ebx +
test [ebp-10h] bl +
jz loc_1075DA4  +
mov eax [ebp-18h] +
and dword ptr [ebp-10h] 0FFFFFFFDh +
test eax eax +
jz loc_1075DA4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor edi edi +
inc edi  +
test byte ptr [ebp-10h] 1 +
mov [ebp-4] edi +
jz loc_1075DBD  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
lea ecx [ebp-50h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1075DDC  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1075E93  +
push edi  +
lea ecx [ebp-50h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 5 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-50h] +
mov bl al +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jnz loc_1075E86  +
mov eax [ebp-14h] +
push dword ptr [eax+14h]  +
lea ecx [ebp-20h] +
call sub_1052FD9  +
lea ecx [ebp-50h] +
push ecx  +
mov ecx eax +
mov byte ptr [ebp-4] 6 +
call near ptr dword_1074A68+3  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 6 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1075E4C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1075E70  +
cmp byte ptr [eax+19h] 5 +
jb loc_1075E70  +
push offset dword_106B6F0  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1075E86  +
lea ecx [ebp-30h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or dword ptr [ebp-10h] 8 +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_10718E9  +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1073BB7  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+1] +
push ebx  +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_1075F35  +
sub eax edx +
push eax  +
push [ebp+arg_0]  +
call sub_1073C4D  +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
call sub_100CDE2  +
mov eax [ebp+8] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1050839  +
test byte ptr [ebp+8] 1 +
jz loc_1075F8C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0Ch] +
call sub_100C3CD  +
lea ecx [esi+1Ch] +
call sub_101A846  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0exception@@QAE@XZ  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_106B7A0 +
call sub_1075EF9  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push edi  +
call ??0exception@@QAE@ABV0@@Z  +
and dword ptr [ebp-4] 0 +
add edi 0Ch +
push edi  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_106B7A0 +
call sub_1075EF9  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1075FC8  +
mov dword ptr [esi] offset off_106B7C4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_1073B5A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_106B7C4 +
call sub_1073B5A  +
test byte ptr [ebp+8] 1 +
jz loc_1076093  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1076002  +
mov dword ptr [esi] offset off_106B7C4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_10718E9  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1075F29  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+40h] +
call sub_10711FE  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1075F98  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ecx  +
lea ecx [ebp-28h] +
call sub_1076002  +
push offset dword_10763C8  +
lea eax [ebp-28h] +
push eax  +
call _CxxThrowException  +
int 3  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
test eax eax +
jnz loc_1076416  +
and [ebp+arg_0] eax +
jmp loc_107641C  +
mov eax [eax+20h] +
mov [ebp+arg_0] eax +
mov eax [esi+134h] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
push ecx  +
call sub_10738D7  +
test al al +
jnz loc_1076448  +
lea ecx [esi+130h] +
mov eax [ecx+4] +
mov eax [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call sub_10212A9  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+1Ch] +
mov dword ptr [esi+4] offset off_10764B8 +
call sub_1041A02  +
and dword ptr [ebp-4] 0 +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1039FB1  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_1076504 +
mov dword ptr [esi+4] offset off_10764F0 +
mov dword ptr [esi+8] offset off_10764D8 +
mov dword ptr [edi] offset off_10764CC +
call ds:?GetComObjectEventSource@@YGAAV?$CEventSource@VCComObjectObserver@@VCVoid@@V2@V2@V2@@@XZ  +
push edi  +
mov ecx eax +
call sub_102124D  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
sub ecx 0Ch +
jmp loc_107662F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
test edi edi +
jnz loc_1076579  +
mov eax 80004003h +
jmp loc_10765A1  +
and dword ptr [edi] 0 +
xor eax eax +
cmp [esi+0Ch] eax +
jnz loc_107658B  +
push [ebp+arg_0]  +
call sub_1050E8B  +
mov ecx [esi+0Ch] +
mov [edi] ecx +
cmp dword ptr [esi+0Ch] 0 +
jz loc_10765A1  +
mov esi [esi+0Ch] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_10765BE  +
mov eax 8002000Bh +
jmp loc_10765C9  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1076562  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_10FC314 +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10765AC  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_10FC314 +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1052795  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10FC314 +
pop ebp  +
jmp sub_105010F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1075F98  +
test byte ptr [ebp+8] 1 +
jz loc_1076649  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1076452  +
and dword ptr [esi+48h] 0 +
and dword ptr [esi+44h] 0 +
mov dword ptr [esi] offset off_107672C +
mov dword ptr [esi+4] offset off_1076718 +
mov dword ptr [esi+8] offset off_1076700 +
mov dword ptr [esi+0Ch] offset off_10766F4 +
mov dword ptr [esi+3Ch] offset off_10766DC +
mov dword ptr [esi+40h] offset off_10766B8 +
mov dword ptr [esi+4Ch] offset off_10766A0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
inc eax  +
test byte ptr dword_10FD554 al +
jnz loc_10767A4  +
or dword_10FD554 eax +
or dword_10FD550 0FFFFFFFFh +
mov dword_10FD54C 4 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10767AD  +
mov [ecx] eax +
mov eax offset dword_10FD54C +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_1C] eax +
test edi edi +
jnz loc_10767E2  +
mov eax 80004003h +
jmp loc_107683F  +
and dword ptr [edi] 0 +
push ebx  +
push 0  +
mov [ebp+var_18] 80040200h +
call sub_107677D  +
mov ebx eax +
mov eax [ebx] +
cmp eax 0FFFFFFFFh +
jz loc_107683B  +
push esi  +
mov ecx [ebp+var_1C] +
lea esi [eax+ecx] +
mov eax [esi] +
lea ecx [ebp+var_14] +
push ecx  +
push esi  +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_1076822  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_4]  +
call sub_100ED86  +
test eax eax +
jnz loc_107682E  +
add ebx 4 +
mov eax [ebx] +
cmp eax 0FFFFFFFFh +
jz loc_107683A  +
jmp loc_10767FE  +
mov [edi] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
and [ebp+var_18] 0 +
pop esi  +
mov eax [ebp+var_18] +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1002492  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_1076867  +
mov eax 80004003h +
jmp loc_1076874  +
push esi  +
mov esi offset dword_106D434 +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
lea ecx [eax-40h] +
neg eax  +
sbb eax eax +
and eax ecx +
mov ecx [eax] +
push offset dword_106DB20  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_8] +
test edi edi +
jnz loc_10768B9  +
mov eax 80004003h +
jmp loc_10768D8  +
cmp [ebp+arg_4] 1 +
push esi  +
jnz loc_10768C9  +
mov esi offset dword_106D434 +
xor eax eax +
jmp loc_10768D3  +
mov esi offset dword_100CA88 +
mov eax 80004005h +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push 114h  +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
mov eax [ebp+VersionInformation.dwPlatformId] +
mov ecx [ebp+var_4] +
mov dword_10FD430 eax +
xor eax eax +
xor ecx ebp +
inc eax  +
call sub_1002492  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp-4] eax +
test byte ptr dword_10FD55C 1 +
push ebx  +
push esi  +
push edi  +
jnz loc_1076972  +
or dword_10FD55C 1 +
call sub_10768E2  +
mov dword_10FD558 eax +
push 4  +
pop eax  +
call sub_1027CDF  +
mov esi esp +
push 1Ch  +
lea eax [ebp-2Ch] +
push eax  +
push esi  +
call ds:VirtualQuery  +
test eax eax +
jnz loc_1076994  +
xor eax eax +
jmp loc_1076A51  +
mov ebx [ebp-28h] +
lea eax [ebp-50h] +
push eax  +
call ds:GetSystemInfo  +
mov eax [ebp-4Ch] +
lea edi [eax-1] +
not edi  +
and edi esi +
sub edi eax +
mov [ebp-0Ch] eax +
mov eax dword_10FD430 +
mov esi eax +
dec esi  +
neg esi  +
sbb esi esi +
and esi 0FFFF1000h +
add esi 11000h +
add esi ebx +
cmp edi esi +
jb loc_107698D  +
cmp eax 1 +
jz loc_1076A32  +
mov [ebp-8] ebx +
mov ebx 1000h +
push 1Ch  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp-8]  +
call ds:VirtualQuery  +
test eax eax +
jz loc_107698D  +
mov eax [ebp-20h] +
add [ebp-8] eax +
test [ebp-1Ch] ebx +
jz loc_10769DB  +
test dword ptr [ebp-18h] 100h +
mov eax [ebp-2Ch] +
mov [ebp-8] eax +
jz loc_1076A0D  +
xor eax eax +
inc eax  +
jmp loc_1076A51  +
cmp edi eax +
jb loc_107698D  +
cmp eax esi +
jnb loc_1076A1C  +
mov [ebp-8] esi +
push 4  +
push ebx  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-8]  +
call ds:VirtualAlloc  +
mov eax dword_10FD430 +
jmp loc_1076A35  +
mov [ebp-8] edi +
dec eax  +
neg eax  +
sbb eax eax +
and eax 103h +
lea ecx [ebp-10h] +
push ecx  +
inc eax  +
push eax  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-8]  +
call ds:VirtualProtect  +
lea esp [ebp-5Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_1002492  +
leave   +
retn   +
***
call sub_100B068  +
mov bl 1 +
mov ecx [ebp+8] +
lea eax [ecx+2000h] +
cmp eax ecx +
jnb loc_1076A87  +
xor al al +
jmp loc_1076ABC  +
and dword ptr [ebp-4] 0 +
call sub_1027CCC  +
mov [ebp-18h] esp +
jmp loc_1076AB3  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C00000FDh +
setz cl  +
mov eax ecx +
retn   +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov al bl +
lea esp [ebp-2Ch] +
call sub_100B10C  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
sub ecx 0Ch +
jmp loc_10779B7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
mov eax [ebp+arg_0] +
mov [eax] edx +
mov ecx [ecx+4] +
mov [eax+4] ecx +
mov eax edx +
test eax eax +
jz loc_1076B2F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
test eax eax +
jz loc_1076B4E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jnz loc_1076B76  +
mov eax [ebp+arg_0] +
mov [esi] eax +
xor eax eax +
inc eax  +
mov [esi+4] eax +
jmp loc_1076C21  +
push edi  +
cmp eax 1 +
jnz loc_1076BA4  +
push 10h  +
call ds:malloc  +
pop ecx  +
mov ecx eax +
xor eax eax +
test ecx ecx +
jz loc_1076C20  +
mov edi ecx +
stos   +
stos   +
stos   +
stos   +
mov eax [esi] +
mov [ecx] eax +
mov [esi] ecx +
mov dword ptr [esi+4] 4 +
mov ecx [esi+4] +
cmp ecx 2 +
mov eax esi +
jl loc_1076BB5  +
mov eax [esi] +
cmp ecx 2 +
jge loc_1076BBA  +
lea edx [esi+ecx*4] +
jmp loc_1076BBF  +
mov edx [esi] +
lea edx [edx+ecx*4] +
cmp eax edx +
jnb loc_1076BE1  +
cmp dword ptr [eax] 0 +
jz loc_1076BCD  +
add eax 4 +
jmp loc_1076BB0  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
cmp dword ptr [esi+4] 2 +
jl loc_1076BDA  +
mov esi [esi] +
sub eax esi +
sar eax 2 +
jmp loc_1076C1F  +
lea edi [ecx+ecx] +
mov eax edi +
shl eax 2 +
push eax  +
push dword ptr [esi]  +
call ds:realloc  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1076C20  +
mov ecx [esi+4] +
shl ecx 2 +
push ecx  +
add ecx eax +
push 0  +
push ecx  +
mov [esi] eax +
call memset  +
mov eax [esi+4] +
mov ecx [esi] +
mov edx [ebp+arg_0] +
mov [ecx+eax*4] edx +
mov eax [esi+4] +
add esp 0Ch +
mov [esi+4] edi +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jnz loc_1076C3B  +
xor eax eax +
jmp loc_1076C60  +
mov eax [ecx+4] +
test eax eax +
jz loc_1076C37  +
dec edx  +
cmp edx eax +
jnb loc_1076C37  +
cmp eax 1 +
jnz loc_1076C52  +
and dword ptr [ecx+4] 0 +
jmp loc_1076C5D  +
cmp eax 2 +
jl loc_1076C59  +
mov ecx [ecx] +
and dword ptr [ecx+edx*4] 0 +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov eax 80004003h +
jmp loc_1076CB1  +
push dword ptr [ebp+0Ch]  +
call sub_100ED86  +
test eax eax +
jnz loc_1076CA4  +
push dword ptr [ebp+0Ch]  +
call sub_100EDA6  +
test eax eax +
jnz loc_1076CA4  +
mov eax 80004002h +
jmp loc_1076CB1  +
mov eax [ebp+8] +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi edi +
neg esi  +
sbb esi esi +
lea ecx [edi-40h] +
and esi ecx +
mov [ebp+var_18] eax +
test ebx ebx +
jz loc_1076D00  +
and dword ptr [ebx] 0 +
test eax eax +
jz loc_1076D83  +
test ebx ebx +
jz loc_1076D83  +
mov eax [edi] +
lea ecx [ebp+var_14] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
mov eax [ebp+var_18] +
mov ecx [eax] +
lea edx [ebp+var_1C] +
push edx  +
lea edx [ebp+var_14] +
push edx  +
push eax  +
call dword ptr [ecx]  +
mov [ebp+var_18] eax +
test eax eax +
jl loc_1076D69  +
add esi 20h +
push esi  +
call ds:EnterCriticalSection  +
push [ebp+var_1C]  +
lea ecx [edi+4] +
call sub_1076B57  +
mov [ebx] eax +
neg eax  +
sbb eax eax +
and eax 7FFBFDFFh +
add eax 80040201h +
push esi  +
mov [ebp+var_18] eax +
call ds:LeaveCriticalSection  +
cmp [ebp+var_18] 0 +
jz loc_1076D77  +
mov eax [ebp+var_1C] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1076D77  +
cmp eax 80004002h +
jnz loc_1076D77  +
mov [ebp+var_18] 80040202h +
mov eax [ebp+var_18] +
test eax eax +
jge loc_1076D88  +
and dword ptr [ebx] 0 +
jmp loc_1076D88  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 0Ch  +
***
call sub_100A60E  +
mov esi ecx +
mov [ebp-14h] esi +
cmp dword ptr [ebp+14h] 3 +
jnz loc_1076E66  +
mov edi [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov eax edi +
sub eax [ebp+8] +
xor ecx ecx +
push 4  +
sar eax 2 +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_100F31C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov [esi+8] eax +
jmp loc_1076DF6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1076DF0 +
retn   +
mov esi [ebp-14h] +
mov edi [ebp+0Ch] +
mov eax [esi+8] +
mov [esi+10h] eax +
test eax eax +
jnz loc_1076E0A  +
mov eax 8007000Eh +
jmp loc_1076E8C  +
mov ebx [ebp+8] +
jmp loc_1076E26  +
push ebx  +
push dword ptr [esi+10h]  +
call sub_10BB052  +
mov [ebp+0Ch] eax +
test eax eax +
jl loc_1076E38  +
add dword ptr [esi+10h] 4 +
add ebx 4 +
cmp ebx edi +
jnz loc_1076E0F  +
sub edi [ebp+8] +
mov eax [esi+8] +
sar edi 2 +
lea eax [eax+edi*4] +
jmp loc_1076E6F  +
mov edi [esi+8] +
jmp loc_1076E48  +
mov eax edi +
push eax  +
add edi 4 +
call sub_1076B3A  +
cmp edi [esi+10h] +
jb loc_1076E3D  +
push dword ptr [esi+8]  +
call sub_100F30B  +
xor eax eax +
mov [esi+10h] eax +
mov [esi+0Ch] eax +
mov [esi+8] eax +
mov eax [ebp+0Ch] +
pop ecx  +
jmp loc_1076E8C  +
mov eax [ebp+8] +
mov [esi+8] eax +
mov eax [ebp+0Ch] +
push dword ptr [ebp+10h]  +
mov [esi+0Ch] eax +
lea eax [esi+4] +
push eax  +
call sub_100CA9D  +
mov eax [esi+8] +
mov [esi+10h] eax +
mov eax [ebp+14h] +
mov [esi+14h] eax +
xor eax eax +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1076EB4  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
push 4  +
mov eax offset dword_10E48FC +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
test byte ptr [esi+14h] 2 +
jz loc_1076F08  +
mov edi [esi+8] +
jmp loc_1076EFA  +
push edi  +
call sub_1076B3A  +
add edi 8 +
cmp edi [esi+0Ch] +
jnz loc_1076EF1  +
push dword ptr [esi+8]  +
call sub_100F30B  +
pop ecx  +
mov esi [esi+4] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1076F19  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
call sub_1001FCF  +
retn   +
***
call sub_100A60E  +
mov esi ecx +
mov [ebp-14h] esi +
cmp dword ptr [ebp+14h] 3 +
jnz loc_1076FEC  +
mov edi [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov eax edi +
sub eax [ebp+8] +
xor ecx ecx +
push 8  +
sar eax 3 +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_100F31C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov [esi+8] eax +
jmp loc_1076F7C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1076F76 +
retn   +
mov esi [ebp-14h] +
mov edi [ebp+0Ch] +
mov eax [esi+8] +
mov [esi+10h] eax +
test eax eax +
jnz loc_1076F90  +
mov eax 8007000Eh +
jmp loc_1077012  +
mov ebx [ebp+8] +
jmp loc_1076FAC  +
push ebx  +
push dword ptr [esi+10h]  +
call sub_1076B0E  +
mov [ebp+0Ch] eax +
test eax eax +
jl loc_1076FBE  +
add dword ptr [esi+10h] 8 +
add ebx 8 +
cmp ebx edi +
jnz loc_1076F95  +
sub edi [ebp+8] +
mov eax [esi+8] +
sar edi 3 +
lea eax [eax+edi*8] +
jmp loc_1076FF5  +
mov edi [esi+8] +
jmp loc_1076FCE  +
mov eax edi +
push eax  +
add edi 8 +
call sub_1076B3A  +
cmp edi [esi+10h] +
jb loc_1076FC3  +
push dword ptr [esi+8]  +
call sub_100F30B  +
xor eax eax +
mov [esi+10h] eax +
mov [esi+0Ch] eax +
mov [esi+8] eax +
mov eax [ebp+0Ch] +
pop ecx  +
jmp loc_1077012  +
mov eax [ebp+8] +
mov [esi+8] eax +
mov eax [ebp+0Ch] +
push dword ptr [ebp+10h]  +
mov [esi+0Ch] eax +
lea eax [esi+4] +
push eax  +
call sub_100CA9D  +
mov eax [esi+8] +
mov [esi+10h] eax +
mov eax [ebp+14h] +
mov [esi+14h] eax +
xor eax eax +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+4] 2 +
mov ecx eax +
jl loc_1077031  +
mov ecx [eax] +
mov eax [ebp+arg_4] +
sub eax ecx +
sar eax 2 +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jnz loc_1077053  +
xor eax eax +
jmp loc_1077062  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+4] 2 +
jl loc_107705E  +
mov eax [eax] +
mov eax [eax+ecx*4-4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
lea eax [ecx+8] +
cmp eax ecx +
jnb loc_1077081  +
xor eax eax +
jmp loc_1077094  +
push eax  +
call sub_1076AE9  +
test eax eax +
jz loc_107707D  +
mov ecx [esi] +
mov [eax] ecx +
mov [esi] eax +
add eax 8 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax esi +
neg eax  +
lea ecx [esi-40h] +
sbb eax eax +
push edi  +
and eax ecx +
lea edi [eax+20h] +
push edi  +
call ds:EnterCriticalSection  +
push [ebp+arg_4]  +
add esi 4 +
push esi  +
call sub_1077043  +
push [ebp+arg_4]  +
mov ecx esi +
mov ebx eax +
call sub_1076C2B  +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 7FFBFE00h +
push edi  +
add esi 80040200h +
call ds:LeaveCriticalSection  +
test esi esi +
jnz loc_10770FD  +
test ebx ebx +
jz loc_10770FD  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_101A846  +
mov ecx esi +
pop esi  +
jmp loc_1076ED1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10BBD7C  +
test [ebp+arg_0] 1 +
jz loc_107713F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_106B7FC +
mov dword ptr [esi+18h] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp loc_107710B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
shl ecx 3 +
add [eax+10h] ecx +
mov edx [eax+10h] +
mov ecx [eax+0Ch] +
cmp edx ecx +
jbe loc_1077195  +
mov [eax+10h] ecx +
xor eax eax +
inc eax  +
jmp loc_107719E  +
mov ecx [eax+8] +
cmp edx ecx +
jb loc_107718D  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 18h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor edx edx +
push edi  +
mov edi [ebp+0Ch] +
xor ebx ebx +
inc edx  +
cmp edi ebx +
jnz loc_10771FB  +
cmp [ebp+10h] ebx +
jnz loc_1077208  +
mov ecx [ebp+14h] +
cmp ecx ebx +
jz loc_1077291  +
mov eax [ebp+8] +
mov edx [eax+0Ch] +
sub edx [eax+10h] +
sar edx 3 +
mov [ecx] edx +
xor eax eax +
jmp loc_1077296  +
cmp [ebp+10h] ebx +
jz loc_1077291  +
cmp edi edx +
jz loc_1077211  +
cmp [ebp+14h] ebx +
jz loc_1077291  +
mov esi [ebp+8] +
cmp [esi+8] ebx +
jz loc_107728A  +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_107728A  +
mov ecx [esi+10h] +
cmp ecx ebx +
jz loc_107728A  +
sub eax ecx +
sar eax 3 +
mov [ebp+8] ebx +
cmp edi eax +
jbe loc_1077236  +
mov [ebp+8] edx +
jb loc_107723A  +
mov edi eax +
mov eax [ebp+14h] +
cmp eax ebx +
jz loc_1077243  +
mov [eax] edi +
mov ebx [ebp+10h] +
jmp loc_1077260  +
push dword ptr [esi+10h]  +
dec edi  +
push ebx  +
call sub_1076B0E  +
mov [ebp+0Ch] eax +
test eax eax +
jl loc_1077269  +
add ebx 8 +
add dword ptr [esi+10h] 8 +
test edi edi +
jnz loc_1077248  +
mov eax [ebp+8] +
jmp loc_1077296  +
mov esi [ebp+10h] +
jmp loc_1077277  +
push esi  +
call sub_1076B3A  +
add esi 8 +
cmp esi ebx +
jb loc_107726E  +
mov eax [ebp+14h] +
test eax eax +
jz loc_1077285  +
and dword ptr [eax] 0 +
mov eax [ebp+0Ch] +
jmp loc_1077296  +
mov eax 80004005h +
jmp loc_1077296  +
mov eax 80004003h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1076E99  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx offset off_10FC5C0 +
push 0  +
call sub_1076562  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10BBD57  +
push offset Addend  +
mov dword ptr [esi] offset off_106B830 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+8] +
mov [eax+10h] ecx +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1077334  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_107731A  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_106B830 +
mov dword ptr [esi+18h] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_10BBD7C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_107736D  +
test [ebp+arg_0] 1 +
jz loc_10773B1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+18h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10773E4  +
test esi esi +
jz loc_10773E4  +
push 1  +
mov ecx esi +
call sub_1077397  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_107714B  +
test [ebp+arg_0] 1 +
jz loc_107740B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10BBD57  +
push offset Addend  +
mov dword ptr [esi] offset off_106B7FC +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+18h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1077464  +
test esi esi +
jz loc_1077464  +
push 1  +
mov ecx esi +
call sub_10773F1  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_107748D  +
mov eax 80004003h +
jmp loc_10774F8  +
push 38h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10774B2  +
push esi  +
mov ecx eax +
call sub_10772DB  +
jmp loc_10774B4  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
jmp loc_10774CC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10774C6 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10774F1  +
lea ecx [esi+1Ch] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10774E4  +
xor ebx ebx +
test ebx ebx +
jz loc_10774F4  +
push 1  +
mov ecx esi +
call sub_1077397  +
xor esi esi +
jmp loc_10774F4  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_1077521  +
mov eax 80004003h +
jmp loc_107758C  +
push 38h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_1077546  +
push esi  +
mov ecx eax +
call sub_1077417  +
jmp loc_1077548  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
jmp loc_1077560  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_107755A +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_1077585  +
lea ecx [esi+1Ch] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_1077578  +
xor ebx ebx +
test ebx ebx +
jz loc_1077588  +
push 1  +
mov ecx esi +
call sub_10773F1  +
xor esi esi +
jmp loc_1077588  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_101D46C  +
mov eax [ebp+0Ch] +
xor edi edi +
cmp eax edi +
jnz loc_10775BE  +
mov eax 80004003h +
lea esp [ebp-30h] +
call sub_101D44D  +
retn 8  +
push 38h  +
mov [eax] edi +
mov [ebp-18h] edi +
mov [ebp-4] edi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_10775DC  +
push edi  +
mov ecx eax +
call sub_10772DB  +
jmp loc_10775DE  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-18h] eax +
jmp loc_10775F3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10775F1 +
retn   +
xor edi edi +
mov ebx [ebp-18h] +
cmp ebx edi +
jnz loc_1077601  +
mov eax 8007000Eh +
jmp loc_10775B3  +
lea eax [ebp-20h] +
push eax  +
call sub_107677D  +
mov esi eax +
mov [ebp-1Ch] edi +
mov eax [ebp-20h] +
mov edi eax +
shl edi 2 +
mov dword ptr [ebp-4] 2 +
cmp eax edi +
jbe loc_107763F  +
mov esi 80070216h +
push 1  +
mov ecx ebx +
call sub_1077125  +
lea ecx [ebp-1Ch] +
call sub_1070A9C  +
mov eax esi +
jmp loc_10775B3  +
cmp edi 400h +
ja loc_107765F  +
push edi  +
call sub_1076A68  +
test al al +
jz loc_107765F  +
mov eax edi +
call sub_1027CCC  +
mov [ebp-10h] esp +
mov eax esp +
jmp loc_1077668  +
push edi  +
lea ecx [ebp-1Ch] +
call sub_107706B  +
test eax eax +
jnz loc_1077673  +
mov esi 8007000Eh +
jmp loc_1077627  +
mov ecx [esi] +
cmp ecx 0FFFFFFFFh +
jz loc_1077690  +
mov edx eax +
mov ebx [ebp+8] +
add ecx ebx +
add esi 4 +
mov [edx] ecx +
mov ecx [esi] +
add edx 4 +
cmp ecx 0FFFFFFFFh +
jnz loc_107767C  +
mov ebx [ebp-18h] +
push 3  +
push dword ptr [ebp+8]  +
add edi eax +
push edi  +
push eax  +
mov ecx ebx +
call sub_1076D9E  +
test eax eax +
jge loc_10776AE  +
mov esi eax +
jmp loc_1077627  +
push dword ptr [ebp+0Ch]  +
mov eax [ebx] +
push offset dword_106DB10  +
push ebx  +
call dword ptr [eax]  +
mov esi eax +
test esi esi +
jl loc_1077627  +
jmp loc_1077630  +
***
call sub_100A60E  +
mov eax [ebp+0Ch] +
xor ebx ebx +
cmp eax ebx +
jnz loc_10776EE  +
mov eax 80004003h +
jmp loc_1077848  +
push 38h  +
mov [eax] ebx +
mov [ebp-14h] ebx +
mov [ebp-4] ebx +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax ebx +
jz loc_107770C  +
push ebx  +
mov ecx eax +
call sub_1077417  +
jmp loc_107770E  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-14h] eax +
jmp loc_1077723  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1077721 +
retn   +
xor ebx ebx +
cmp [ebp-14h] ebx +
jnz loc_1077732  +
mov eax 8007000Eh +
jmp loc_1077848  +
mov esi [ebp+8] +
mov edi esi +
neg edi  +
lea eax [esi-40h] +
sbb edi edi +
and edi eax +
lea eax [edi+20h] +
push eax  +
mov [ebp-1Ch] edi +
call ds:EnterCriticalSection  +
push 2  +
lea ecx [esi+4] +
mov eax [ecx+4] +
pop edx  +
cmp eax edx +
mov [ebp-18h] ebx +
mov [ebp-4] edx +
jge loc_1077765  +
lea eax [ecx+eax*4] +
jmp loc_107776A  +
mov ebx [ecx] +
lea eax [ebx+eax*4] +
cmp [ecx+4] edx +
jl loc_1077771  +
mov ecx [ecx] +
sub eax ecx +
xor ecx ecx +
push 8  +
sar eax 2 +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_100F31C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
pop ecx  +
mov [ebp-18h] eax +
jmp loc_10777A4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_107779E +
retn   +
mov esi [ebp+8] +
mov edi [ebp-1Ch] +
mov ebx [ebp-18h] +
test ebx ebx +
jnz loc_10777C4  +
mov ecx [ebp-14h] +
push 1  +
call sub_10773F1  +
add edi 20h +
push edi  +
call ds:LeaveCriticalSection  +
jmp loc_1077728  +
add esi 4 +
cmp dword ptr [esi+4] 2 +
mov edi esi +
jl loc_10777D1  +
mov edi [esi] +
mov eax [esi+4] +
cmp eax 2 +
jge loc_10777DE  +
lea eax [esi+eax*4] +
jmp loc_10777E3  +
mov ecx [esi] +
lea eax [ecx+eax*4] +
cmp edi eax +
jnb loc_1077809  +
mov eax [edi] +
test eax eax +
jz loc_1077804  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [edi] +
push edi  +
push esi  +
mov [ebx] eax +
call sub_107701F  +
mov [ebx+4] eax +
add ebx 8 +
add edi 4 +
jmp loc_10777D1  +
mov ecx [ebp-14h] +
push 2  +
push 0  +
push ebx  +
push dword ptr [ebp-18h]  +
call sub_1076F24  +
mov eax [ebp-1Ch] +
add eax 20h +
push eax  +
call ds:LeaveCriticalSection  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-14h] +
push offset dword_106DB00  +
call sub_1076E99  +
mov esi eax +
test esi esi +
jge loc_1077846  +
mov ecx [ebp-14h] +
push 1  +
call sub_10773F1  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+0Ch] +
push ebx  +
push edi  +
xor edi edi +
mov [ebp-4] edi +
mov ebx 80004003h +
cmp eax edi +
jz loc_10778F9  +
mov [eax] edi +
lea eax [ebp-8] +
push eax  +
call sub_1077471  +
mov ebx eax +
cmp ebx edi +
jl loc_10778F9  +
push esi  +
mov esi [ebp+8] +
test byte ptr [esi+14h] 1 +
jz loc_10778A0  +
push esi  +
lea ecx [ebp+8] +
mov dword ptr [ebp-4] 1 +
call sub_100D2CF  +
jmp loc_10778A3  +
lea eax [esi+4] +
mov eax [eax] +
push edi  +
mov edi [ebp-8] +
push eax  +
push dword ptr [esi+0Ch]  +
mov ecx edi +
push dword ptr [esi+8]  +
call sub_1076D9E  +
test byte ptr [ebp-4] 1 +
mov ebx eax +
jz loc_10778CC  +
mov eax [ebp+8] +
test eax eax +
jz loc_10778CC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test ebx ebx +
jl loc_10778EB  +
push dword ptr [ebp+0Ch]  +
mov eax [esi+10h] +
push offset dword_106DB10  +
mov ecx edi +
mov [edi+10h] eax +
call sub_107731A  +
mov ebx eax +
test ebx ebx +
jge loc_10778F8  +
test edi edi +
jz loc_10778F8  +
push 1  +
mov ecx edi +
call sub_1077397  +
pop esi  +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+0Ch] +
push ebx  +
push edi  +
xor edi edi +
mov [ebp-4] edi +
mov ebx 80004003h +
cmp eax edi +
jz loc_10779AA  +
mov [eax] edi +
lea eax [ebp-8] +
push eax  +
call sub_1077505  +
mov ebx eax +
cmp ebx edi +
jl loc_10779AA  +
push esi  +
mov esi [ebp+8] +
test byte ptr [esi+14h] 1 +
jz loc_1077951  +
push esi  +
lea ecx [ebp+8] +
mov dword ptr [ebp-4] 1 +
call sub_100D2CF  +
jmp loc_1077954  +
lea eax [esi+4] +
mov eax [eax] +
push edi  +
mov edi [ebp-8] +
push eax  +
push dword ptr [esi+0Ch]  +
mov ecx edi +
push dword ptr [esi+8]  +
call sub_1076F24  +
test byte ptr [ebp-4] 1 +
mov ebx eax +
jz loc_107797D  +
mov eax [ebp+8] +
test eax eax +
jz loc_107797D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test ebx ebx +
jl loc_107799C  +
push dword ptr [ebp+0Ch]  +
mov eax [esi+10h] +
push offset dword_106DB00  +
mov ecx edi +
mov [edi+10h] eax +
call sub_1076E99  +
mov ebx eax +
test ebx ebx +
jge loc_10779A9  +
test edi edi +
jz loc_10779A9  +
push 1  +
mov ecx edi +
call sub_10773F1  +
pop esi  +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1076375  +
test byte ptr [ebp+8] 1 +
jz loc_10779D1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1076655  +
push offset Addend  +
mov dword ptr [esi] offset off_10132F4 +
mov dword ptr [esi+4] offset off_106B940 +
mov dword ptr [esi+8] offset off_106B914 +
mov dword ptr [esi+0Ch] offset off_106B8F4 +
mov dword ptr [esi+3Ch] offset off_106B8C8 +
mov dword ptr [esi+40h] offset off_106B890 +
mov dword ptr [esi+4Ch] offset off_106B864 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 0Ch +
jmp loc_1077B9D  +
***
sub dword ptr [esp+4] 3Ch +
jmp loc_107D878  +
***
sub dword ptr [esp+4] 40h +
jmp loc_107D878  +
***
sub dword ptr [esp+4] 3Ch +
jmp loc_101405D  +
***
sub dword ptr [esp+4] 40h +
jmp loc_101405D  +
***
sub dword ptr [esp+4] 4Ch +
jmp loc_107D878  +
***
sub dword ptr [esp+4] 4Ch +
jmp loc_101405D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1077AB0  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1077A94  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4Ch +
jmp loc_1077AFD  +
***
sub dword ptr [esp+4] 3Ch +
jmp loc_1077AFD  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1077AFD  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1077AFD  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_10132F4 +
mov dword ptr [esi+4] offset off_106B940 +
mov dword ptr [esi+8] offset off_106B914 +
mov dword ptr [esi+0Ch] offset off_106B8F4 +
mov dword ptr [esi+3Ch] offset off_106B8C8 +
mov dword ptr [esi+40h] offset off_106B890 +
mov dword ptr [esi+4Ch] offset off_106B864 +
mov dword ptr [esi+1Ch] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_1076375  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1077B49  +
test byte ptr [ebp+8] 1 +
jz loc_1077BB7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_1077BE2  +
mov eax 80004003h +
jmp loc_1077C62  +
mov edi 8007000Eh +
push 50h  +
mov [eax] esi +
mov [ebp-14h] edi +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_1077C11  +
push dword ptr [ebp+8]  +
call sub_10779DD  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1077C27  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1077C21 +
retn   +
mov edi [ebp-14h] +
mov esi [ebp-18h] +
test esi esi +
jz loc_1077C60  +
lea ecx [esi+20h] +
call sub_1041AAF  +
mov edi eax +
test edi edi +
jl loc_1077C3B  +
xor edi edi +
mov ecx esi +
call sub_107272D  +
test edi edi +
jnz loc_1077C57  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_1077C60  +
lea ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov eax edi +
call sub_1001FCF  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_1077C8B  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_1077BC3  +
pop ebp  +
retn 0Ch  +
***
pop ebp  +
jmp loc_1070728  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push offset dword_106B72C  +
push 0  +
call sub_1077BC3  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcappScget_a  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
push 80070057h  +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1077D32  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1077DB4  +
mov ecx [ebp-14h] +
and dword ptr [esi] 0 +
add ecx 0E8h +
push 0  +
mov [ebp+0Ch] ecx +
call sub_100EB41  +
test al al +
jz loc_1077D5B  +
mov eax [ebp+0Ch] +
mov eax [eax] +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_1077DA7  +
push esi  +
call sub_1077C96  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1077DA7  +
push 8000FFFFh  +
push dword ptr [esi]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push 0  +
push [ebp+arg_8]  +
push 0  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+10h]  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1077E24  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
mov eax [ebp+arg_0] +
mov edx [eax] +
xor ecx ecx +
push ecx  +
push ecx  +
push [ebp+arg_8]  +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [edx+18h]  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1077E6A  +
pop ebp  +
retn 10h  +
***
mov eax ds:?classCDocument@CDocument@@2UCRuntimeClass@@B +
retn   +
***
mov eax offset off_102F7E0 +
retn   +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScsave  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+24h] +
cmp dword ptr [eax-8] 0 +
jnz loc_1077F39  +
push 33FAh  +
lea eax [ebp-30h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1077F80  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0A4h]  +
test eax eax +
jnz loc_1077F70  +
push 33FAh  +
lea eax [ebp-30h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1077F28  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScclose  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+0Ch] edi +
jz loc_107808E  +
mov eax [esi+24h] +
cmp [eax-8] edi +
jnz loc_1078037  +
push 33FAh  +
lea eax [ebp-30h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10780A8  +
push ebx  +
push edi  +
call sub_10511D6  +
test al al +
jz loc_107806B  +
push 342Eh  +
lea eax [ebp-30h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
mov byte ptr [ebp-4] 3 +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1078026  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0A4h]  +
test eax eax +
jnz loc_107808E  +
push 33FAh  +
lea eax [ebp-30h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
mov byte ptr [ebp-4] 4 +
jmp loc_1078055  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+84h]  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
xor edi edi +
mov [ebp-10h] edi +
mov ecx [ebp+8] +
push edi  +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aScmapviewoptio  +
mov [ebp-4] edi +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
test dword ptr [ebp+0Ch] 0FFFFFFF0h +
mov [esi] edi +
jz loc_1078136  +
mov ecx [ebp+8] +
push 80070057h  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov al [ebp+0Ch] +
test al 1 +
jz loc_1078140  +
or dword ptr [esi] 1 +
test al 8 +
jz loc_1078147  +
or dword ptr [esi] 20h +
test al 4 +
jz loc_107814E  +
or dword ptr [esi] 10h +
test al 2 +
jz loc_1078155  +
or dword ptr [esi] 2 +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10781B0  +
cmp byte ptr [eax+19h] 5 +
jb loc_10781B0  +
push offset dword_106BA10  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx esi +
call ?OnNewDocument@CDocument@@UAEHXZ  +
test eax eax +
jnz loc_10781BD  +
pop esi  +
retn   +
push edi  +
lea edi [esi+130h] +
push edi  +
mov byte ptr [esi+122h] 0 +
mov dword ptr [esi+108h] 30000h +
call ds:GetSystemTimeAsFileTime  +
mov eax [edi] +
mov [esi+138h] eax +
mov eax [edi+4] +
mov [esi+13Ch] eax +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
retn   +
***
cmp dword_10F55CC 0 +
jnz loc_107820E  +
push 10h  +
push 33FAh  +
call ds:?MMCErrorBox@@YGHII@Z  +
xor al al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1078244  +
cmp byte ptr [eax+19h] 5 +
jb loc_1078244  +
push offset dword_106BA10  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
call sub_102B490  +
xor esi esi +
cmp [ebp+var_4] esi +
jz loc_1078268  +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
call sub_102B4EB  +
inc esi  +
cmp [ebp+var_4] 0 +
jnz loc_1078256  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [esi] +
call sub_10512F5  +
xor ecx ecx +
test al al +
setz cl  +
push ecx  +
mov ecx esi +
call dword ptr [edi]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
lea eax [ecx+104h] +
cmp [eax] edx +
jz loc_10782B6  +
mov [eax] edx +
mov eax [ecx] +
push 1  +
call dword ptr [eax+64h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
mov edx [ecx+10Ch] +
mov eax edx +
jz loc_10782D7  +
or eax [ebp+arg_0] +
jmp loc_10782E0  +
push esi  +
mov esi [ebp+arg_0] +
not esi  +
and eax esi +
pop esi  +
cmp edx eax +
jz loc_10782F1  +
mov [ecx+10Ch] eax +
mov eax [ecx] +
push 1  +
call dword ptr [eax+64h]  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
mov dword ptr [ebp-10h] 1 +
call ds:?FromWin32@SC@mmcerror@@QAEAAV12@J@Z  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_101AA40 +
jz loc_1078372  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jnz loc_107838E  +
xor al al +
jmp loc_10783BF  +
mov eax [ecx+104h] +
sub eax 0 +
jz loc_10783BA  +
dec eax  +
jz loc_10783B2  +
dec eax  +
jz loc_10783AA  +
dec eax  +
jnz loc_107838A  +
mov dword ptr [edx] 3 +
jmp loc_10783BD  +
mov dword ptr [edx] 2 +
jmp loc_10783BD  +
mov dword ptr [edx] 1 +
jmp loc_10783BD  +
and dword ptr [edx] 0 +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 0 +
jz loc_10783EE  +
dec eax  +
jz loc_10783EA  +
dec eax  +
jz loc_10783E6  +
dec eax  +
jz loc_10783E2  +
xor al al +
jmp loc_10783F7  +
push 3  +
jmp loc_10783F0  +
push 2  +
jmp loc_10783F0  +
push 1  +
jmp loc_10783F0  +
push 0  +
call sub_107829B  +
mov al 1 +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcdocSccreat  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [edi+0E0h] +
cmp [ecx] ebx +
jnz loc_1078455  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1078485  +
call sub_100A5CF  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+64h]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCamcdocScenums  +
lea ecx [ebp-24h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+10h] +
mov [esi] ebx +
cmp [ebp+0Ch] ebx +
jbe loc_1078532  +
mov eax [ebp+14h] +
cmp [eax] ebx +
jz loc_1078559  +
mov ecx [ebp-14h] +
push eax  +
call sub_102B4EB  +
mov eax [ebp+0Ch] +
inc dword ptr [esi]  +
cmp [esi] eax +
jb loc_1078519  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] edi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
push edi  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107853F  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push offset aCamcdocScenumr  +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_102B490  +
mov eax [eax] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
xor esi esi +
push esi  +
lea ecx [ebp-28h] +
mov [ebp-14h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScitem  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
cmp edi esi +
jle loc_10786ED  +
mov ecx [ebp-10h] +
call sub_1078216  +
cmp edi eax +
jg loc_10786ED  +
cmp [ebp+10h] esi +
jz loc_10786ED  +
mov ecx [ebp-10h] +
lea eax [ebp-18h] +
push eax  +
call sub_102B490  +
xor eax eax +
test edi edi +
jle loc_107869E  +
cmp dword ptr [ebp-18h] 0 +
jz loc_107869E  +
mov ecx [ebp-10h] +
lea eax [ebp-18h] +
push eax  +
call sub_102B4EB  +
inc esi  +
cmp esi edi +
jl loc_1078687  +
cmp esi edi +
jnz loc_10786DD  +
test eax eax +
jz loc_10786DD  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-38h] +
push ecx  +
mov ecx eax +
call sub_109426F  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1078708  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10786CE  +
push 80070057h  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcdocScget_s  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+0Ch] ebx +
jz loc_10787B0  +
lea ecx [edi+0E0h] +
cmp [ecx] ebx +
jz loc_10787B0  +
call sub_100A5CF  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+5Ch]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10787CB  +
push 80004003h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcdocScget_0  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+0Ch] ebx +
jz loc_1078882  +
lea ecx [edi+0E0h] +
cmp [ecx] ebx +
jz loc_1078882  +
call sub_100A5CF  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+60h]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107889D  +
push 80004003h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcdocScget_c  +
lea ecx [ebp-24h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
test edi edi +
jnz loc_107894F  +
push 80004003h  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1078966  +
mov ecx [ebp-14h] +
call sub_1078216  +
mov ecx [ebp+8] +
mov [edi] eax +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScget_n  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1078A2F  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_1078A64  +
add esi 24h +
push esi  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@ABV0@@Z  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call ?AllocSysString@CString@@QBEPAGXZ  +
mov ecx [ebp+8] +
mov [edi] eax +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-14h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScput_n  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1078B21  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1078B3A  +
mov eax [esi] +
push 0  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call dword ptr [eax+5Ch]  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScget_m  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1078BFD  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1078C28  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_107837E  +
test al al +
jnz loc_1078C1B  +
push 80004005h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1078C1E  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcdocScput_m  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_10783C8  +
test al al +
jnz loc_1078CCA  +
push 80070057h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1078CD7  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScget_i  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1078D9A  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1078DB5  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+60h]  +
mov ecx [ebp+8] +
neg eax  +
sbb eax eax +
inc eax  +
mov [edi] eax +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScget_l  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1078E7F  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_1078EDB  +
add esi 24h +
push esi  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@ABV0@@Z  +
push 5Ch  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call ?ReverseFind@CString@@QBEHG@Z  +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-10h] +
call ?Left@CString@@QBE?AV1@H@Z  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 4 +
call ?AllocSysString@CString@@QBEPAGXZ  +
mov ecx [ebp+8] +
mov [edi] eax +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-18h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-10h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScget_r  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1078FA3  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1079004  +
add edi 0E0h +
mov eax [edi] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1078FF7  +
mov ecx edi +
call sub_100A5CF  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+74h]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
xor ebx ebx +
mov [ebp-14h] ebx +
push 80030002h  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push eax  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 1 +
mov [ebp-14h] edi +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
test al al +
jnz loc_10790B7  +
push 2  +
pop esi  +
push esi  +
lea eax [ebp-24h] +
push eax  +
call sub_1078305  +
push eax  +
lea ecx [ebp+8] +
mov [ebp-4] esi +
mov dword ptr [ebp-14h] 3 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
mov [ebp-0Dh] bl +
test al al +
jz loc_10790BB  +
mov byte ptr [ebp-0Dh] 1 +
test byte ptr [ebp-14h] 2 +
mov [ebp-4] edi +
jz loc_10790D1  +
and dword ptr [ebp-14h] 0FFFFFFFDh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
test byte ptr [ebp-14h] 1 +
mov [ebp-4] ebx +
jz loc_10790E3  +
lea ecx [ebp-34h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea eax [ebp-34h] +
cmp [ebp-0Dh] bl +
jz loc_1079100  +
push 342Fh  +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
mov byte ptr [ebp-4] 3 +
jmp loc_1079186  +
push 80FF0002h  +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 4 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-0Dh] al +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-0Dh] bl +
jz loc_1079143  +
push 3416h  +
lea eax [ebp-34h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
mov byte ptr [ebp-4] 5 +
jmp loc_1079186  +
push 80030070h  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 6 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-0Dh] al +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-0Dh] bl +
jz loc_10791BA  +
push 3413h  +
lea eax [ebp-34h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
mov byte ptr [ebp-4] 7 +
push eax  +
lea ecx [ebp+8] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
push 10h  +
sub esp 10h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp+18h] esp +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
call ds:?MMCErrorBox@@YGHVSC@mmcerror@@I@Z  +
mov esi eax +
jmp loc_10791EF  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
push dword ptr [ebp+18h]  +
lea eax [ebp-14h] +
push 33F9h  +
push eax  +
mov byte ptr [ebp-4] 8 +
call sub_105142C  +
push 10h  +
push dword ptr [ebp-14h]  +
call ds:?MMCErrorBox@@YGHPBGI@Z  +
lea ecx [ebp-14h] +
mov esi eax +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 14h  +
***
push 4  +
mov eax offset dword_10D3584 +
call sub_1001F95  +
mov edi ecx +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
push 3441h  +
lea eax [ebp-10h] +
push eax  +
call sub_101220E  +
push 1  +
lea eax [ebp-10h] +
push eax  +
call sub_10511D6  +
test al al +
jnz loc_107928D  +
call sub_10067E8  +
mov esi eax +
test esi esi +
jnz loc_1079273  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_107928D  +
cmp byte ptr [eax+19h] 2 +
jb loc_107928D  +
push offset dword_106BA10  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_107928D  +
lea ecx [edi+0E0h] +
call sub_100A5CF  +
push dword ptr [esi+20h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
call ds:CoFreeUnusedLibraries  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi [edi] +
push 0  +
add ecx 0E0h +
call sub_100EB41  +
movzx eax al +
push eax  +
mov ecx edi +
call dword ptr [esi]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push 28h  +
mov eax offset word_10D35FA +
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocSconsna  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 8000FFFFh  +
mov edi offset dword_10F54B0 +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107934E  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1079391  +
push dword ptr [ebp+0Ch]  +
mov eax [ebp-14h] +
add eax 0FFFFFF98h +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call near ptr dword_1075714+3  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 28h  +
mov eax offset word_10D35FA +
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScons_0  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 8000FFFFh  +
mov edi offset dword_10F54B0 +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1079461  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10794A4  +
push dword ptr [ebp+0Ch]  +
mov eax [ebp-14h] +
add eax 0FFFFFF98h +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call near ptr dword_10759FC+3  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 24h  +
mov eax offset byte_10D4E75 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScsethe  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 8000FFFFh  +
add esi 0C4h +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1079577  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107958E  +
add esi 0Ch +
push esi  +
call ds:GetSystemTimeAsFileTime  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScget_1  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi 8000FFFFh +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1079676  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10796E9  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
push edi  +
mov edi offset dword_10F54B0 +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10796DC  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_1077CB3  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset rguid  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset rguid  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+10h]  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset rguid  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+14h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset rguid  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+18h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset rguid  +
push eax  +
call dword ptr [ecx+1Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset rguid  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset rguid  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+24h]  +
pop ebp  +
retn 8  +
***
mov eax offset aEnumerations +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_107985B  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_0]  +
push dword ptr [ecx+14h]  +
push 0  +
call sub_101236E  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_103AF79  +
test al al +
jz loc_10798A5  +
push 0  +
lea ecx [esi+0E8h] +
call sub_100EB41  +
test al al +
jz loc_10798A5  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov eax offset byte_10E0425 +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScenumn  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_102B4EB  +
mov edi eax +
test edi edi +
jnz loc_107990E  +
push ebx  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_1079992  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_100A5E6  +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call sub_109426F  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1079972  +
mov eax [ebp-10h] +
test eax eax +
jnz loc_1079969  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1079972  +
mov ecx [ebp+10h] +
and dword ptr [ebp-10h] 0 +
mov [ecx] eax +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-10h] +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
test eax eax +
jz loc_1079992  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScget_a  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1079A58  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_1079B89  +
and dword ptr [edi] 0 +
call sub_100ABA9  +
mov edi 8000FFFFh +
push edi  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1079AA5  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1079A50  +
mov ecx [ebp-18h] +
call sub_10207B9  +
mov [ebp-18h] eax +
test eax eax +
jnz loc_1079AEB  +
push 33FBh  +
lea eax [ebp-38h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1079B89  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 5 +
call sub_100A5E6  +
mov ecx [ebp-18h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_109426F  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1079B69  +
push edi  +
push dword ptr [ebp-10h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1079B69  +
mov eax [ebp-10h] +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-10h] 0 +
mov [ecx] eax +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-10h] +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
test eax eax +
jz loc_1079B89  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov ebx ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1079C12  +
cmp byte ptr [eax+19h] 5 +
jb loc_1079C12  +
push offset dword_106BA10  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx ebx +
call sub_1079881  +
test al al +
jz loc_1079D95  +
xor edi edi +
mov [ebp-10h] edi +
mov esi [ebx+0E8h] +
lea ecx [ebp-10h] +
mov [ebp-4] edi +
call sub_100A5E6  +
push eax  +
push 10h  +
push off_10FC8DC  +
push esi  +
call sub_1077E48  +
cmp eax edi +
jl loc_1079D84  +
push 1  +
push edi  +
lea ecx [ebp-8Ch] +
call sub_101EF63  +
cmp dword ptr [ebx+108h] 10000h +
lea ecx [ebp-10h] +
jnz loc_1079CB2  +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push 34h  +
lea edx [ebp-48h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax edi +
jl loc_1079D84  +
cmp dword ptr [ebp-14h] 34h +
jnz loc_1079D84  +
cmp dword ptr [ebp-1Ch] 0 +
push 0Bh  +
pop ecx  +
lea esi [ebp-48h] +
lea edi [ebp-88h] +
movs   +
jz loc_1079CAC  +
or dword ptr [ebp-58h] 1 +
jmp loc_1079CDC  +
and dword ptr [ebp-58h] 0FFFFFFFEh +
jmp loc_1079CDC  +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push 44h  +
lea edx [ebp-8Ch] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax edi +
jl loc_1079D84  +
cmp dword ptr [ebp-14h] 44h +
jnz loc_1079D84  +
call sub_100ABA9  +
mov esi eax +
test esi esi +
jnz loc_1079CF5  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jmp loc_1079D8D  +
push 1  +
mov ecx offset dword_10F54B0 +
call sub_1020835  +
mov ecx esi +
call sub_1028EFF  +
mov eax dword_10F55CC +
mov [ebx+100h] eax +
mov eax [ebp-5Ch] +
mov [ebx+104h] eax +
mov eax [ebp-58h] +
mov [ebx+10Ch] eax +
lea eax [ebp-88h] +
push eax  +
call sub_1029573  +
cmp byte_10F55A5 0 +
jnz loc_1079D50  +
cmp byte_10F55AC 0 +
jnz loc_1079D5C  +
push dword ptr [esi+20h]  +
call ds:IsWindowVisible  +
test eax eax +
jnz loc_1079D5C  +
mov eax [ebp-80h] +
and dword ptr [ebp-80h] 0 +
mov dword_10F5528 eax +
lea eax [ebp-88h] +
push eax  +
mov ecx esi +
call ?SetWindowPlacement@CWnd@@QAEHPBUtagWINDOWPLACEMENT@@@Z  +
test eax eax +
mov eax [ebp-10h] +
setnz bl  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1079D80  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al bl +
jmp loc_1079D97  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jz loc_1079D95  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor al al +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1079DD7  +
cmp byte ptr [eax+19h] 5 +
jb loc_1079DD7  +
push offset dword_106BA10  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx esi +
call sub_1079881  +
test al al +
jz loc_1079EC5  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
mov edi [esi+0E8h] +
lea ecx [ebp-10h] +
call sub_100A5E6  +
push eax  +
push 10h  +
push off_10FC8DC  +
push edi  +
call sub_1077E48  +
test eax eax +
jl loc_1079EB4  +
push 1  +
push 0  +
lea ecx [ebp-8Ch] +
call sub_101EF63  +
cmp dword ptr [esi+108h] 10000h +
lea ecx [ebp-10h] +
jnz loc_1079E70  +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push 34h  +
lea edx [ebp-48h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_1079EB4  +
cmp dword ptr [ebp-14h] 34h +
jnz loc_1079EB4  +
cmp dword ptr [ebp-1Ch] 0 +
push 0Bh  +
pop ecx  +
lea esi [ebp-48h] +
lea edi [ebp-88h] +
movs   +
jz loc_1079E6A  +
or dword ptr [ebp-58h] 1 +
jmp loc_1079E92  +
and dword ptr [ebp-58h] 0FFFFFFFEh +
jmp loc_1079E92  +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push 44h  +
lea edx [ebp-8Ch] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_1079EB4  +
cmp dword ptr [ebp-14h] 44h +
jnz loc_1079EB4  +
push dword ptr [ebp-5Ch]  +
mov ecx offset dword_10F54B0 +
call sub_102F745  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1079EB0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al 1 +
jmp loc_1079EC7  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1079EC5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor al al +
call sub_1001FCF  +
retn   +
***
call sub_100C4D0  +
mov ebx ecx +
push 0  +
lea ecx [ebp-44h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aShowincompatib  +
lea ecx [ebp-44h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
movzx eax bl +
push eax  +
mov eax ebx +
shr eax 8 +
movzx eax al +
push eax  +
sar ebx 10h +
movzx eax bl +
push eax  +
push offset aD_DX  +
lea eax [ebp-30h] +
push 10h  +
push eax  +
call sub_104D241  +
add esp 18h +
push eax  +
lea ecx [ebp-44h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1079F44  +
lea ecx [ebp-44h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
lea ecx [ebp-34h] +
call ??0CString@@QAE@XZ  +
lea eax [ebp-30h] +
push eax  +
push esi  +
push 3419h  +
lea eax [ebp-34h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_10BEB7F  +
push 10h  +
push dword ptr [ebp-34h]  +
call ds:?MMCErrorBox@@YGHPBGI@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-44h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_100C50D  +
retn   +
***
call sub_100A60E  +
mov ecx [ebp-24h] +
call ?Delete@CException@@QAEXXZ  +
push 8007000Eh  +
call sub_10C7F1B  +
mov eax offset loc_107A07C +
retn   +
***
call sub_100A60E  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcdocLoadstr  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-14h] ebx +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
call sub_100A5E6  +
push eax  +
push 10h  +
push off_10FC8E0  +
push dword ptr [ebp+8]  +
call sub_1077E8F  +
mov edi eax +
cmp edi 80030002h +
jnz loc_107A1EE  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_107A1D5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov bl 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov al bl +
call sub_1001FCF  +
retn 4  +
cmp edi ebx +
jl loc_107A263  +
mov eax [esi+0D4h] +
push ebx  +
push offset off_10F87D8  +
push offset off_10F8820  +
push ebx  +
push eax  +
mov byte ptr [ebp-4] 2 +
call __RTDynamicCast  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jnz loc_107A22E  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
lea ecx [ebp-14h] +
call sub_100A5CF  +
push esi  +
push eax  +
call sub_10C11B3  +
mov dword ptr [ebp-4] 1 +
jmp loc_107A261  +
mov eax [ebp-18h] +
mov eax [eax+4] +
mov [ebp+8] eax +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_107A25C +
retn   +
mov edi [ebp+8] +
xor ebx ebx +
cmp edi ebx +
mov eax [ebp-14h] +
setnl byte ptr [ebp+0Bh]  +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_107A277  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov bl [ebp+0Bh] +
jmp loc_107A1D7  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
mov edi [esi+0E8h] +
lea ecx [ebp-14h] +
call sub_100A5E6  +
mov ecx [edi] +
push eax  +
push 0  +
push 12h  +
push 0  +
push off_10FC8E4  +
push edi  +
call dword ptr [ecx+10h]  +
test eax eax +
jge loc_107A307  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_107A303  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al 1 +
jmp loc_107A338  +
mov esi [esi+0DCh] +
lea ecx [ebp-14h] +
call sub_100A5CF  +
push eax  +
lea ecx [esi+14h] +
call sub_10CB258  +
test eax eax +
mov eax [ebp-14h] +
setnl byte ptr [ebp-0Dh]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_107A335  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al [ebp-0Dh] +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_107A379  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset loc_107A390  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_107A36F  +
push 0  +
jmp loc_107A372  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_107A385  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
popf   +
retn 0D6B8h  +
***
jmp dword ptr [ecx-4F55B28Eh]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_107A3DB  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_107A3F0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_107A3D1  +
push 0  +
jmp loc_107A3D4  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_107A3E7  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_107984F  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+1Ch] +
mov eax [ebp+arg_0] +
cmp edx [eax+1Ch] +
jnz loc_107A443  +
push eax  +
push ecx  +
call sub_10395A9  +
pop ecx  +
pop ecx  +
test al al +
jz loc_107A443  +
xor eax eax +
inc eax  +
jmp loc_107A445  +
xor eax eax +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScsavea  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+80h]  +
test eax eax +
jnz loc_107A4C8  +
push 33FAh  +
lea eax [ebp-30h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107A4E7  +
mov ecx esi +
call sub_105175C  +
mov eax [esi] +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call dword ptr [eax+5Ch]  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_107A343  +
test eax eax +
jge loc_107A54E  +
cmp eax 80004002h +
jz loc_107A54E  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_107A3A5  +
test eax eax +
jge loc_107A57B  +
cmp eax 80004002h +
jz loc_107A57B  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dword_106BA40  +
push [ebp+arg_4]  +
call sub_100ED86  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset sub_106BA50  +
push [ebp+arg_4]  +
call sub_100ED86  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 0Ch +
push ecx  +
call sub_107A405  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcdocSetcu_0  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [esi+0D8h] +
cmp ecx ebx +
jz loc_107A688  +
push dword ptr [ebp+8]  +
call sub_107A5C7  +
test al al +
jnz loc_107A688  +
push dword ptr [ebp+8]  +
mov ecx [esi+0D8h] +
call sub_10394ED  +
call sub_100ABA9  +
mov edi eax +
push 8000FFFFh  +
push edi  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107A688  +
mov eax [edi] +
push ebx  +
mov ecx edi +
call dword ptr [eax+0E8h]  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+64h]  +
lea ecx [ebp-1Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call ??1CString@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov eax [ecx+4] +
mov dword ptr [ecx] offset off_106BA24 +
test eax eax +
jz locret_107A6F3  +
push ecx  +
lea ecx [eax+54h] +
call sub_101A545  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_107A6DD  +
test byte ptr [ebp+8] 1 +
jz loc_107A713  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101AE41  +
test byte ptr [ebp+8] 1 +
jz loc_107A739  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+18h] +
call sub_100CD3C  +
lea ecx [esi+8] +
pop esi  +
jmp sub_100A67D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call sub_107A745  +
test [ebp+arg_0] 1 +
jz loc_107A781  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102BC13  +
mov eax [ebp+arg_4] +
mov [esi+1Ch] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1051816  +
test byte ptr [ebp+8] 1 +
jz loc_107A7C9  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub ecx 54h +
jmp loc_1052C2F  +
***
sub ecx 6Ch +
jmp loc_1052C2F  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+3Ch] +
call sub_107A6DD  +
mov ecx esi +
pop esi  +
jmp sub_1075F98  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_107A764  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1041CE8  +
mov eax [edi+1Ch] +
mov [esi+1Ch] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100C4D0  +
mov edi [ebp+8] +
mov ebx ecx +
xor esi esi +
push esi  +
lea ecx [ebp-48h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcdocSetcust  +
lea ecx [ebp-48h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-30h] +
push edi  +
call sub_107A78D  +
lea eax [ebp-30h] +
lea edi [ebx+0A8h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_107A421  +
test al al +
jnz loc_107A955  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_10CB578  +
push esi  +
push esi  +
push 1  +
mov ecx ebx +
call sub_1021952  +
push esi  +
push esi  +
push esi  +
mov ecx ebx +
mov [ebp-38h] eax +
call sub_1021952  +
mov [ebp-34h] eax +
call sub_100ABA9  +
push 8000FFFFh  +
mov edi eax +
push edi  +
push dword ptr [ebp-34h]  +
lea eax [ebp-58h] +
push dword ptr [ebp-38h]  +
push eax  +
call sub_100CB6E  +
push eax  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-48h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107A955  +
push 1  +
push dword ptr [ebp-38h]  +
mov ecx edi +
call sub_1052E04  +
push esi  +
push dword ptr [ebp-34h]  +
mov ecx edi +
call sub_1052E04  +
push esi  +
mov ecx edi +
call ?MDIGetActive@CMDIFrameWnd@@QBEPAVCMDIChildWnd@@PAH@Z  +
jmp loc_107A946  +
push dword ptr [ebp-38h]  +
mov ecx edi +
call sub_100ED64  +
push esi  +
push dword ptr [ebp-34h]  +
mov ecx edi +
call sub_100ED64  +
push 2  +
mov ecx edi +
call sub_100EB83  +
mov edi eax +
push 1  +
cmp edi esi +
jnz loc_107A928  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+64h]  +
push esi  +
push 1  +
lea ecx [ebp-30h] +
call sub_100CD3C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-48h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_100C50D  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push [ebp+arg_0]  +
mov ebx ecx +
lea ecx [ebx+0A8h] +
call sub_10CB5A0  +
test eax eax +
jge loc_107A9C9  +
xor al al +
jmp loc_107AA2C  +
push esi  +
push edi  +
call sub_10067E8  +
mov edi eax +
xor esi esi +
cmp edi esi +
jnz loc_107AA00  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_107A9FC  +
cmp byte ptr [eax+19h] 2 +
jb loc_107A9FC  +
push offset dword_106BA10  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
xor al al +
jmp loc_107AA2A  +
push 1  +
push esi  +
push esi  +
push 1  +
mov ecx ebx +
call sub_1021952  +
push eax  +
mov ecx edi +
call sub_100ED64  +
push esi  +
push esi  +
push esi  +
push esi  +
mov ecx ebx +
call sub_1021952  +
push eax  +
mov ecx edi +
call sub_100ED64  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
call sub_100A5E6  +
push eax  +
push 10h  +
push ds:off_107AA98  +
push dword ptr [ebp+8]  +
call sub_1077E8F  +
test eax eax +
jl loc_107AA7D  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_107A9AB  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call sub_1079FDD  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_107AA8E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al 1 +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aSccreateconnec  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov eax esi +
neg eax  +
sbb eax eax +
lea ecx [esi+3Ch] +
and eax ecx +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [edi+54h] +
call sub_1031995  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_107AB24  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107AB2D  +
mov [esi+40h] edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
add ecx 8 +
jmp sub_100ECBD  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [ebp+8] +
lea edi [esi+8] +
mov ecx edi +
mov dword ptr [esi] offset off_107ABA4 +
mov [esi+4] eax +
call sub_100AD56  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
mov ecx edi +
call sub_100AE0E  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_107AC16  +
mov ecx [ebp+arg_4] +
mov cl [ecx] +
mov [eax] cl +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
push dword ptr [ebp+8]  +
lea ecx [ebp-28h] +
push dword ptr [ebp+10h]  +
call sub_107AB60  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call sub_101EA69  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call sub_100A77D  +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
jmp loc_107AC7E  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
call sub_107AC03  +
inc [ebp+arg_8]  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnz loc_107AC6D  +
mov eax [ebp+arg_8] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_107AC66  +
pop edi  +
leave   +
retn 10h  +
***
call sub_1001F95  +
mov eax [ecx+8] +
mov edx [ebp+8] +
mov esi 4EC4EC4h +
sub esi eax +
cmp esi edx +
jnb loc_107AD08  +
push offset aListTTooLong  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1076041  +
push offset dword_10E8AC0  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
add eax edx +
mov [ecx+8] eax +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_107AD39  +
xor al al +
jmp loc_107AD57  +
cmp edi 0FFFFFFFFh +
jbe loc_107AD43  +
call loc_10B6E00  +
push eax  +
push edi  +
call sub_107ABBD  +
mov [esi+4] eax +
mov [esi+8] eax +
add eax edi +
mov [esi+0Ch] eax +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov ecx [ebp-14h] +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
mov dword ptr [esi] offset off_101D87C +
mov al [edi+4] +
mov [esi+4] al +
lea eax [edi+8] +
push eax  +
lea ecx [esi+8] +
call sub_107AD62  +
and dword ptr [ebp-4] 0 +
add edi 18h +
push edi  +
lea ecx [esi+18h] +
call sub_100CDE2  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov eax ds:off_107AE20 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
sub esi eax +
test eax eax +
jle loc_107AE4C  +
push eax  +
push [ebp+arg_0]  +
push eax  +
push esi  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
push esi  +
lea esi [eax+ecx] +
jz loc_107AE78  +
push eax  +
push [ebp+arg_0]  +
push eax  +
push ecx  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_107AE9C  +
mov cl [eax] +
mov edx [ebp+arg_8] +
inc [ebp+arg_8]  +
inc eax  +
mov [edx] cl +
mov [ebp+arg_0] eax +
cmp eax [ebp+arg_4] +
jnz loc_107AE8E  +
mov eax [ebp+arg_8] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
jmp loc_107AEC0  +
mov cl [eax] +
mov edx [ebp+arg_C] +
mov [edx] cl +
inc [ebp+arg_C]  +
inc eax  +
cmp eax [ebp+arg_8] +
jnz loc_107AEB5  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_107AE29  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_107AE56  +
pop edi  +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp-4] +
stos   +
push dword ptr [ebp-4]  +
push dword ptr [ebp-4]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_107AE84  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_107AEAB  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_107AFB8  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_107AF5A  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_107AF8C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi] +
push edi  +
mov edi ecx +
mov [ebp+arg_4] eax +
cmp esi [edi+4] +
jz loc_107B01A  +
mov eax [esi+4] +
mov ecx [esi] +
mov [eax] ecx +
mov eax [esi] +
mov ecx [esi+4] +
push esi  +
mov [eax+4] ecx +
call sub_107A809  +
push esi  +
call ??3@YAXPAX@Z  +
dec dword ptr [edi+8]  +
pop ecx  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
pop edi  +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [esi+4] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_107AF8C  +
push [ebp+arg_4]  +
mov eax [esi+4] +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_10CDB54  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
xor eax eax +
mov dword ptr [esi] offset off_101D87C +
lea ecx [esi+18h] +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov [esi+14h] eax +
call sub_1023117  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_107B02D  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_107B0CC  +
push dword ptr [ebp+0Ch]  +
call sub_107ADCC  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
cmp byte ptr [ebx+0Ch] 0 +
push esi  +
push edi  +
mov edi ecx +
jnz loc_107B111  +
mov eax [edi+4] +
mov eax [eax+4] +
mov esi [eax] +
cmp esi eax +
jz loc_107B121  +
push 0  +
lea eax [esi+8] +
push eax  +
mov ecx ebx +
call sub_101EA69  +
mov esi [esi] +
mov eax [edi+4] +
cmp esi [eax+4] +
jz loc_107B121  +
jmp loc_107B0F8  +
mov ecx [edi+4] +
call sub_100ECDB  +
push ebx  +
mov ecx edi +
call sub_103BA08  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+4] +
push dword ptr [eax+4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_107AFE5  +
leave   +
retn   +
***
xor eax offset off_107B3D4 +
mov ecx ebx +
call sub_101DF07  +
cmp byte ptr [ebx+0Ch] 0 +
jz loc_107B352  +
lea ecx [esi+8] +
call sub_107AFC7  +
lea ecx [ebp-30h] +
call sub_10CA1C6  +
test eax eax +
jz loc_107B352  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_10CA1CF  +
and dword ptr [ebp+8] 0 +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-50h] +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 5 +
call sub_102DE75  +
push eax  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 6 +
call edi  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-40h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107B32F  +
lea ecx [ebp-40h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
lea ecx [ebp-30h] +
call sub_10CA1C6  +
add eax [ebp+8] +
lea ecx [esi+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_107B08B  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call sub_102CA5B  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call sub_102DE27  +
cmp byte ptr [ebx+0Ch] 0 +
jz loc_107B384  +
cmp dword ptr [esi+2Ch] 0 +
mov byte ptr [esi+4] 0 +
jbe loc_107B372  +
mov byte ptr [esi+4] 1 +
mov eax [esi+0Ch] +
test eax eax +
jz loc_107B384  +
mov ecx [esi+10h] +
sub ecx eax +
jz loc_107B384  +
or byte ptr [esi+4] 2 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_100B9EC +
call sub_100ECBD  +
test byte ptr [ebp+8] 1 +
jz loc_107B404  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
pop ecx  +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+1Ch] +
mov dword ptr [esi+4] offset off_107B4D8 +
call sub_1041A02  +
and dword ptr [ebp-4] 0 +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1039FB1  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_107B524 +
mov dword ptr [esi+4] offset off_107B510 +
mov dword ptr [esi+8] offset off_107B4F8 +
mov dword ptr [edi] offset off_107B4EC +
call ds:?GetComObjectEventSource@@YGAAV?$CEventSource@VCComObjectObserver@@VCVoid@@V2@V2@V2@@@XZ  +
push edi  +
mov ecx eax +
call sub_102124D  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
push offset dword_100CA88  +
push offset dword_106BA40  +
push ecx  +
call sub_1071867  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcidispatchi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
add esi 0FFFFFFF4h +
push eax  +
lea ecx [ebp-18h] +
mov [ebp-14h] esi +
call sub_1018390  +
mov esi [ebp-18h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107B64F  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107B679  +
push 0  +
push esi  +
call ds:CoDisconnectObject  +
push eax  +
lea ecx [ebp-28h] +
call sub_109F3AD  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test esi esi +
jz loc_107B689  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call sub_107B585  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_10FC980 +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10765AC  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_10FC980 +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1052795  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10FC980 +
pop ebp  +
jmp sub_105010F  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+1Ch] +
mov dword ptr [esi+4] offset off_107B768 +
call sub_1041A02  +
and dword ptr [ebp-4] 0 +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1039FB1  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_107B7B4 +
mov dword ptr [esi+4] offset off_107B7A0 +
mov dword ptr [esi+8] offset off_107B788 +
mov dword ptr [edi] offset off_107B77C +
call ds:?GetComObjectEventSource@@YGAAV?$CEventSource@VCComObjectObserver@@VCVoid@@V2@V2@V2@@@XZ  +
push edi  +
mov ecx eax +
call sub_102124D  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
push offset dword_100CA88  +
push offset sub_106BA50  +
push ecx  +
call sub_1071867  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
push 2Ch  +
mov eax offset dword_10D43E4 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcidispatchi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
add esi 0FFFFFFF4h +
push eax  +
lea ecx [ebp-18h] +
mov [ebp-14h] esi +
call sub_1018390  +
mov esi [ebp-18h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107B8CC  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107B8F6  +
push 0  +
push esi  +
call ds:CoDisconnectObject  +
push eax  +
lea ecx [ebp-28h] +
call sub_109F3AD  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test esi esi +
jz loc_107B906  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call sub_107B802  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_10FC99C +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10765AC  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_10FC99C +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1052795  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10FC99C +
pop ebp  +
jmp sub_105010F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea edi [eax+4] +
push dword ptr [edi]  +
mov ebx ecx +
push eax  +
call sub_107B410  +
push 1  +
mov ecx ebx +
mov esi eax +
call sub_107ACC0  +
mov [edi] esi +
mov eax [esi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_100A60E  +
mov [ebp-14h] ecx +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov [ebp-18h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_107BA15  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-14h] +
push dword ptr [ebp+8]  +
call sub_107B97F  +
dec dword ptr [ebp+0Ch]  +
jmp loc_107B9D1  +
mov eax [ebp-18h] +
cmp [ebp+0Ch] eax +
jnb loc_107BA0C  +
sub eax [ebp+0Ch] +
mov esi eax +
mov eax [ebp+8] +
push dword ptr [eax+4]  +
mov ecx [ebp-14h] +
lea eax [ebp+0Ch] +
push eax  +
call sub_107AFE5  +
dec esi  +
jnz loc_107B9F7  +
push 0  +
push 0  +
call _CxxThrowException  +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-2Ch] +
mov [ebp-14h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScadd  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
inc dword ptr [eax+14h]  +
mov eax [edi+0E0h] +
push 80004003h  +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107BAAF  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107BB44  +
push dword ptr [ebp+10h]  +
lea eax [ebp-3Ch] +
mov [ebp-18h] esi +
push eax  +
lea esi [ebp-18h] +
call sub_10780E7  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107BB37  +
lea ecx [edi+0E0h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+68h]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107BB37  +
mov eax [ebp-1Ch] +
lea esi [edi+0ECh] +
mov [esi] eax +
mov eax [ebp-18h] +
push ebx  +
push ebx  +
mov ecx edi +
mov [edi+11Ch] eax +
call sub_10228FD  +
mov [esi] ebx +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-0Dh] +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
call ds:??1?$CEventLock@UAppEvents@@@@QAE@XZ  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_107BBC1  +
cmp byte ptr [eax+19h] 5 +
jb loc_107BBC1  +
push offset dword_106BA10  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx esi +
call sub_1079881  +
test al al +
jz loc_107BD78  +
xor ebx ebx +
mov [ebp-14h] ebx +
mov edi [esi+0E8h] +
lea ecx [ebp-14h] +
mov [ebp-4] ebx +
call sub_100A5E6  +
push eax  +
push 10h  +
push off_10FC8D8  +
push edi  +
call sub_1077E48  +
cmp eax ebx +
jl loc_107BD67  +
lea ecx [ebp-14h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push 2  +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax ebx +
jl loc_107BD67  +
cmp dword ptr [ebp-20h] 2 +
jnz loc_107BD67  +
mov [ebp-24h] ebx +
mov edi 0FFFFh +
cmp [ebp-18h] bx +
jz loc_107BD2A  +
lea ebx [esi+0ECh] +
add [ebp-18h] edi +
and dword ptr [ebx] 0 +
lea ecx [esi+0E0h] +
call sub_100A5CF  +
mov ecx [eax] +
push ebx  +
push dword ptr [ebp-14h]  +
push eax  +
call dword ptr [ecx+3Ch]  +
and dword ptr [ebp-28h] 0 +
lea ecx [esi+0E0h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-28h] +
push edx  +
push dword ptr [ebp-14h]  +
push eax  +
call dword ptr [ecx+3Ch]  +
test eax eax +
lea ecx [ebp-14h] +
setnz byte ptr [ebp-0Dh]  +
call sub_100A5CF  +
mov edx [eax] +
lea ecx [ebp-20h] +
push ecx  +
push 4  +
lea ecx [esi+0F0h] +
push ecx  +
push eax  +
call dword ptr [edx+0Ch]  +
test eax eax +
jl loc_107BD5C  +
cmp dword ptr [ebp-20h] 4 +
jnz loc_107BD5C  +
cmp byte ptr [ebp-0Dh] 0 +
jnz loc_107BCB4  +
cmp dword ptr [ebx] 0 +
jz loc_107BD1D  +
push 1  +
push 1  +
mov ecx esi +
call sub_10228FD  +
and dword ptr [esi+0F0h] 0 +
mov [ebp-1Ch] eax +
test eax eax +
jnz loc_107BCD2  +
inc dword ptr [ebp-24h]  +
jmp loc_107BD1D  +
lea ecx [ebp-14h] +
call sub_100A5CF  +
mov ecx [ebp-1Ch] +
push eax  +
call sub_10904F7  +
test al al +
jz loc_107BD5C  +
mov ecx [ebp-1Ch] +
push 0  +
push dword ptr [ebp-28h]  +
add ecx 44h +
mov eax [ecx] +
lea edx [ebp-38h] +
push edx  +
call dword ptr [eax+34h]  +
lea ecx [ebp-38h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp-1Ch] +
call sub_101F020  +
mov eax [ebp-1Ch] +
mov byte ptr [eax+1D5h] 0 +
mov byte ptr [eax+264h] 0 +
cmp word ptr [ebp-18h] 0 +
jnz loc_107BC3F  +
xor ebx ebx +
mov eax [esi] +
add [ebp-18h] edi +
push ebx  +
mov ecx esi +
mov dword ptr [esi+0ECh] 1 +
call dword ptr [eax+64h]  +
cmp [ebp-24h] ebx +
mov eax [ebp-14h] +
setz byte ptr [ebp-0Dh]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_107BD57  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al [ebp-0Dh] +
jmp loc_107BD7A  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jmp loc_107BD70  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_107BD78  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor al al +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_107B471  +
and dword ptr [esi+40h] 0 +
mov dword ptr [esi+3Ch] offset off_106BA24 +
mov dword ptr [esi] offset off_107BE0C +
mov dword ptr [esi+4] offset off_107BDF4 +
mov dword ptr [esi+8] offset off_107BDDC +
mov dword ptr [esi+0Ch] offset off_107BDD0 +
mov dword ptr [esi+3Ch] offset off_107BDC4 +
mov eax esi +
pop esi  +
retn   +
***
sub ecx 0Ch +
jmp loc_107C804  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107BEF5  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1077EC7  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107BED2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107BF95  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1077FBD  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107BF72  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107C038  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1078400  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C015  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107C0DB  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1078749  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C0B8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107C17E  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10799D9  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C15B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107C221  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10789B3  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C1FE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107C2C4  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1078AA9  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C2A1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107C367  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1078E03  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C344  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107C40A  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1078D21  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C3E7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107C4AD  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1078B85  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C48A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107C550  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1078C71  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C52D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107C5F3  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1078F29  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C5D0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107C696  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_107881B  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C673  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107C739  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10795FD  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C716  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107C7DC  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_107A44E  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C7B9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_107A7EF  +
test byte ptr [ebp+8] 1 +
jz loc_107C81E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_107B702  +
and dword ptr [esi+40h] 0 +
mov dword ptr [esi+3Ch] offset off_106BA24 +
mov dword ptr [esi] offset off_107C8B0 +
mov dword ptr [esi+4] offset off_107C89C +
mov dword ptr [esi+8] offset off_107C884 +
mov dword ptr [esi+0Ch] offset off_107C878 +
mov dword ptr [esi+3Ch] offset off_107C86C +
mov eax esi +
pop esi  +
retn   +
***
sub ecx 3Ch +
jmp loc_107C804  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107C969  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B802  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10788F9  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C946  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107CA0C  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B802  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
push [ebp+arg_8]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_1078627  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107C9E9  +
***
call sub_1001F95  +
mov edi ecx +
mov eax [edi+8] +
mov esi [ebp+8] +
and dword ptr [ebp-4] 0 +
cmp esi eax +
jbe loc_107CA74  +
mov ecx [edi+4] +
lea edx [ebp+0Ch] +
push edx  +
sub esi eax +
push esi  +
push ecx  +
mov ecx edi +
call sub_107B9B8  +
jmp loc_107CA82  +
jnb loc_107CA82  +
mov ecx edi +
call sub_107B12D  +
cmp esi [edi+8] +
jb loc_107CA76  +
lea ecx [ebp+0Ch] +
call sub_107A745  +
call sub_1001FCF  +
retn 38h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107CB12  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B802  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
push [ebp+arg_8]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_107BA22  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107CAEF  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_107BD85  +
push offset Addend  +
mov dword ptr [esi] offset off_1013594 +
mov dword ptr [esi+4] offset off_106BAD0 +
mov dword ptr [esi+8] offset off_106BAA4 +
mov dword ptr [esi+0Ch] offset off_106BA84 +
mov dword ptr [esi+3Ch] offset off_106BA64 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 3Ch +
jmp loc_107CC57  +
***
sub ecx 0Ch +
jmp loc_107CC57  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_107CBB4  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_107CB99  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_107CBDD  +
***
sub dword ptr [esp+4] 8 +
jmp loc_107CBDD  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_1013594 +
mov dword ptr [esi+4] offset off_106BAD0 +
mov dword ptr [esi+8] offset off_106BAA4 +
mov dword ptr [esi+0Ch] offset off_106BA84 +
mov dword ptr [esi+3Ch] offset off_106BA64 +
mov dword ptr [esi+1Ch] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_107A7EF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_107CC11  +
test byte ptr [ebp+8] 1 +
jz loc_107CC71  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_107C82A  +
mov dword ptr [esi] offset off_107CCF8 +
mov dword ptr [esi+4] offset off_107CCE4 +
mov dword ptr [esi+8] offset off_107CCCC +
mov dword ptr [esi+0Ch] offset off_107CCC0 +
mov dword ptr [esi+3Ch] offset off_107CCB4 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-20h] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push eax  +
mov [ebp-4] esi +
call sub_10A23DD  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dword_106DAF0  +
push [ebp+arg_4]  +
call sub_100ED86  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call sub_107A6DD  +
lea ecx [esi+10h] +
pop esi  +
jmp sub_101A846  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+10h] +
mov dword ptr [esi+4] offset off_106BAF8 +
call sub_1041A02  +
and dword ptr [esi+0Ch] 0 +
mov dword ptr [esi+8] offset off_106BA24 +
mov dword ptr [esi] offset off_107CE14 +
mov dword ptr [esi+4] offset off_107CE00 +
mov dword ptr [esi+8] offset off_107CDF4 +
and dword ptr [esi+30h] 0 +
mov eax esi +
pop esi  +
retn   +
***
sub ecx 8 +
jmp loc_107D243  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
push offset dword_100CA88  +
push offset dword_106DAF0  +
push ecx  +
call sub_1071867  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-24h] +
call MFC42u_6466  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcenumerator  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+8] +
mov edi [ebp+10h] +
lea esi [eax+30h] +
mov ecx [esi] +
mov [ebp-1Ch] ecx +
lea ecx [ebp-18h] +
push ecx  +
lea ecx [ebp-44h] +
push ecx  +
lea ecx [eax+8] +
mov [ebp-18h] ebx +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107D002  +
mov eax [ebp+14h] +
cmp eax ebx +
jz loc_107CF0D  +
mov [eax] ebx +
mov eax [ebp+0Ch] +
cmp eax ebx +
jbe loc_107CF2B  +
mov ebx [ebp+10h] +
mov [ebp+8] eax +
push ebx  +
call VariantInit  +
add ebx 10h +
dec dword ptr [ebp+8]  +
jnz loc_107CF1A  +
xor ebx ebx +
mov [ebp-14h] ebx +
cmp [ebp+0Ch] ebx +
jbe loc_107D026  +
mov [ebp-10h] ebx +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_100A5E6  +
mov ecx [ebp-18h] +
push eax  +
push esi  +
lea eax [ebp-54h] +
push eax  +
call near ptr dword_10798AC+2  +
***
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call sub_107B7E5  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107CFF1  +
push 1  +
lea ecx [ebp-44h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea eax [ebp-44h] +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 5 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-44h] +
mov [ebp+0Bh] al +
mov byte ptr [ebp-4] 3 +
call sub_107CE42  +
cmp byte ptr [ebp+0Bh] 0 +
mov eax [ebp-10h] +
jnz loc_107CFD3  +
cmp eax ebx +
jz loc_107CFE3  +
inc dword ptr [ebp-14h]  +
push 9  +
pop ecx  +
mov [edi+8] eax +
mov eax [ebp-14h] +
mov [edi] cx +
add edi 10h +
mov byte ptr [ebp-4] 1 +
cmp eax [ebp+0Ch] +
jnb loc_107D026  +
jmp loc_107CF37  +
***
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_107D026  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_107D026  +
push 8000FFFFh  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_107D002  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+0Ch] +
cmp eax ebx +
jbe loc_107D01E  +
mov edi [ebp+10h] +
mov [ebp+0Ch] eax +
push edi  +
call VariantClear  +
add edi 10h +
dec dword ptr [ebp+0Ch]  +
jnz loc_107D00F  +
mov eax [ebp-1Ch] +
mov [esi] eax +
mov [ebp-14h] ebx +
mov eax [ebp+14h] +
cmp eax ebx +
jz loc_107D032  +
mov ecx [ebp-14h] +
mov [eax] ecx +
lea ecx [ebp-34h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-34h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_107CE42  +
mov eax [ebp-20h] +
mov ecx [ebp-24h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 10h  +
***
push 30h  +
mov eax offset byte_10D48B3 +
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcenumerat_0  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
lea ecx [esi+8] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107D104  +
lea ecx [ebp-2Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-2Ch] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_107CE42  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi [ebp+0Ch] +
mov ecx [ebp-10h] +
lea eax [edi+1] +
mov [ebp+8] eax +
mov eax [esi+30h] +
mov [ebp-14h] eax +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp+8] +
push eax  +
push edi  +
lea eax [ebp-3Ch] +
push eax  +
call near ptr dword_10784D8+5  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107D0DA  +
mov eax [ebp-14h] +
mov [esi+30h] eax +
cmp [ebp+8] edi +
jnb loc_107D0DA  +
push 1  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_107D0DA  +
***
push 2Ch  +
mov eax offset byte_10D495F +
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcenumerat_1  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [esi+8] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107D212  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-28h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_107CE42  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov ecx [ebp-10h] +
add esi 30h +
push esi  +
lea eax [ebp-38h] +
push eax  +
call sub_10785A1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107D1E8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_107CD97  +
test byte ptr [ebp+8] 1 +
jz loc_107D25D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_107CDB2  +
push offset Addend  +
mov dword ptr [esi] offset off_106BBEC +
mov dword ptr [esi+4] offset off_106BBC4 +
mov dword ptr [esi+8] offset off_106BBA4 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 8 +
jmp loc_107D341  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_107D2C4  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_107D2AA  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_107D2E1  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_106BBEC +
mov dword ptr [esi+4] offset off_106BBC4 +
mov dword ptr [esi+8] offset off_106BBA4 +
mov dword ptr [esi+10h] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_107CD97  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_107D309  +
test byte ptr [ebp+8] 1 +
jz loc_107D35B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_107D383  +
mov eax 80004003h +
jmp loc_107D3EF  +
push 34h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_107D3A8  +
push esi  +
mov ecx eax +
call sub_107D269  +
jmp loc_107D3AA  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
jmp loc_107D3C2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_107D3BC +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_107D3E8  +
lea ecx [esi+14h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_107D3DA  +
xor ebx ebx +
test ebx ebx +
jz loc_107D3EB  +
lea ecx [esi+8] +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
xor esi esi +
jmp loc_107D3EB  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aSccreateconnec  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov eax esi +
neg eax  +
sbb eax eax +
lea ecx [esi+8] +
and eax ecx +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [edi+54h] +
call sub_1031995  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_107D47F  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107D488  +
mov [esi+0Ch] edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ebx [ebp+arg_4] +
and [ebp+var_4] 0 +
push 80070057h  +
push ebx  +
lea eax [ebp+var_2C] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107D524  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B802  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov ecx [ebp+arg_0] +
and dword ptr [ebx] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_107CD29  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call sub_107B802  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107D500  +
and [ebp+arg_4] 0 +
lea eax [ebp+arg_4] +
push eax  +
call sub_107D367  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_109F3AD  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107D500  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_107D592  +
push 8000FFFFh  +
lea ecx [ebp+var_1C] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_107D500  +
push [ebp+var_4]  +
lea eax [ebp+var_2C] +
push esi  +
push eax  +
call sub_107D3FC  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107D500  +
mov ecx [ebp+var_4] +
lea eax [esi+30h] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_10785A1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107D500  +
mov eax [esi] +
push ebx  +
push offset dword_1048258  +
push esi  +
call dword ptr [eax]  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_109F3AD  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_107D500  +
***
push 2Ch  +
mov eax offset byte_10D495F +
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
xor esi esi +
push esi  +
lea ecx [ebp-28h] +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push (offset dword_106BC24+8)  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx [ebp+0Ch] +
cmp ebx esi +
jnz loc_107D696  +
push 80070057h  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-28h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_107CE42  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi [ebp+8] +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [edi+8] +
mov [ebp-10h] esi +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107D66C  +
and dword ptr [ebp+0Ch] 0 +
lea eax [ebp+0Ch] +
push eax  +
call sub_107D367  +
push eax  +
lea ecx [ebp-28h] +
call sub_109F3AD  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107D66C  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_107D70B  +
push 8000FFFFh  +
jmp loc_107D663  +
***
mov eax [edi+30h] +
push dword ptr [ebp-10h]  +
mov [esi+30h] eax +
push esi  +
lea eax [ebp-38h] +
push eax  +
call sub_107D3FC  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107D66C  +
mov [ebx] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
jmp loc_107D66C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
sub esp 34h +
mov esi ecx +
mov ecx esp +
mov [ebp+var_4] esp +
call sub_107B064  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_107CA44  +
pop esi  +
leave   +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_107D7A1  +
mov eax 80004003h +
jmp loc_107D80F  +
push 44h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_107D7CD  +
push esi  +
call sub_107CB3D  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_107D7E3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_107D7DD +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_107D808  +
lea ecx [esi+20h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_107D7FB  +
xor ebx ebx +
test ebx ebx +
jz loc_107D80B  +
lea ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor esi esi +
jmp loc_107D80B  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_107CC7D  +
push offset Addend  +
mov dword ptr [esi] offset off_101377C +
mov dword ptr [esi+4] offset off_106BCC8 +
mov dword ptr [esi+8] offset off_106BC9C +
mov dword ptr [esi+0Ch] offset off_106BC7C +
mov dword ptr [esi+3Ch] offset off_106BC5C +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 0Ch +
jmp loc_107D977  +
***
sub ecx 3Ch +
jmp loc_107D977  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+1Ch] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_107D89F  +
test esi esi +
jz loc_107D89F  +
lea ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_107D878  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_107D8D4  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_107D8B8  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_107D8FD  +
***
sub dword ptr [esp+4] 8 +
jmp loc_107D8FD  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_101377C +
mov dword ptr [esi+4] offset off_106BCC8 +
mov dword ptr [esi+8] offset off_106BC9C +
mov dword ptr [esi+0Ch] offset off_106BC7C +
mov dword ptr [esi+3Ch] offset off_106BC5C +
mov dword ptr [esi+1Ch] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_107A7EF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_107D931  +
test byte ptr [ebp+8] 1 +
jz loc_107D991  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+8] +
inc eax  +
push eax  +
call sub_107D75B  +
mov eax [esi+4] +
mov eax [eax+4] +
mov eax [eax+4] +
mov ecx [ebp+8] +
push 0  +
add eax 8 +
push eax  +
call sub_101EA69  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
xor esi esi +
push esi  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtiedcomobject  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
cmp [edi] esi +
jnz loc_107DA95  +
lea eax [ebp+10h] +
push eax  +
mov [ebp+10h] esi +
call sub_107D785  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107DA3F  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107DAA2  +
cmp [ebp+10h] esi +
jnz loc_107DA54  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_107DA98  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_107AAA1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107DA95  +
lea eax [ebp+10h] +
push eax  +
mov ecx edi +
call sub_107A55A  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_107DADE  +
mov eax 80004003h +
jmp loc_107DB4C  +
push 44h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_107DB0A  +
push esi  +
call sub_107D81C  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_107DB20  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_107DB1A +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_107DB45  +
lea ecx [esi+20h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_107DB38  +
xor ebx ebx +
test ebx ebx +
jz loc_107DB48  +
lea ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor esi esi +
jmp loc_107DB48  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-14h] edi +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScgetmm  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107DBD9  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107DC6A  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
add edi 140h +
push edi  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push eax  +
call sub_107D9D3  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107DC5D  +
mov eax [edi] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107DC5D  +
mov ecx edi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [edi] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
xor esi esi +
push esi  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtiedcomobject  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
cmp [edi] esi +
jnz loc_107DD83  +
lea eax [ebp+10h] +
push eax  +
mov [ebp+10h] esi +
call sub_107DAC2  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107DD2D  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107DD90  +
cmp [ebp+10h] esi +
jnz loc_107DD42  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_107DD86  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_107AAA1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107DD83  +
lea eax [ebp+10h] +
push eax  +
mov ecx edi +
call sub_107A52D  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcdocScget_v  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+0Ch] +
cmp eax esi +
jnz loc_107DE08  +
push 80004003h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107DE99  +
mov [eax] esi +
lea esi [edi+144h] +
push esi  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_107DCC1  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107DE8C  +
mov eax [esi] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107DE8C  +
mov ecx esi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [esi] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107DF5E  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_107B585  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_107DDB0  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107DF3B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi] +
push 1  +
push 0Ch  +
push esi  +
call ?AfxIsValidAddress@@YGHPBXIH@Z  +
test eax eax +
jnz loc_107DFB2  +
call MFC42u_6928  +
mov eax [esi] +
mov [edi] eax +
pop edi  +
lea eax [esi+8] +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0B0h] +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CDialog@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov eax offset byte_10D4BB5 +
call sub_1001F95  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
xor ebx ebx +
lea ecx [ebp-14h] +
mov [ebp-4] ebx +
call ??0CString@@QAE@XZ  +
mov esi [ebp+10h] +
mov eax [esi] +
push 4  +
lea ecx [ebp-10h] +
push ecx  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+6Ch]  +
test eax eax +
jz loc_107E0B1  +
mov eax [ebp-10h] +
cmp [eax-8] ebx +
jz loc_107E0B1  +
mov eax [esi] +
push 3  +
lea ecx [ebp-14h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+6Ch]  +
test eax eax +
jz loc_107E0B1  +
mov eax [ebp-14h] +
cmp [eax-8] ebx +
jz loc_107E0B1  +
mov edi [ebp+14h] +
mov esi [ebp+0Ch] +
cmp edi ebx +
jz loc_107E07C  +
mov eax [ebp-10h] +
add eax 2 +
push eax  +
mov ecx edi +
call ??4CString@@QAEABV0@PBG@Z  +
mov eax [edi] +
mov [esi+3Ch] eax +
mov eax [esi+14h] +
inc eax  +
mov [esi+18h] eax +
mov edi [ebp+8] +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call ??YCString@@QAEABV0@ABV0@@Z  +
push ebx  +
mov ecx edi +
call ??YCString@@QAEABV0@G@Z  +
push 2Ah  +
mov ecx edi +
call ??YCString@@QAEABV0@G@Z  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call ??YCString@@QAEABV0@ABV0@@Z  +
push ebx  +
mov ecx edi +
call ??YCString@@QAEABV0@G@Z  +
inc dword ptr [esi+14h]  +
lea ecx [ebp-14h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
call sub_1001FCF  +
retn 10h  +
***
push offset a__1  +
lea ecx [ebp-5B4h] +
call ??YCString@@QAEABV0@PBG@Z  +
push ebx  +
lea ecx [ebp-5B4h] +
call ??YCString@@QAEABV0@G@Z  +
mov eax [ebp-5B4h] +
inc dword ptr [ebp-53Ch]  +
mov [ebp-544h] eax +
mov eax [ebp-5BCh] +
mov esi 104h +
push esi  +
mov ecx edi +
mov [ebp-520h] eax +
call ?GetBuffer@CString@@QAEPAGH@Z  +
mov [ebp-534h] eax +
lea eax [ebp-218h] +
push eax  +
push esi  +
call ds:GetCurrentDirectoryW  +
lea eax [ebp-218h] +
lea ecx [ebp-5B0h] +
mov [ebp-524h] eax +
call sub_10ABFE9  +
mov esi eax +
dec esi  +
neg esi  +
sbb esi esi +
push 0FFFFFFFFh  +
mov ecx edi +
inc esi  +
call ?ReleaseBuffer@CString@@QAEXH@Z  +
lea ecx [ebp-5C0h] +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-5C4h] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-5B4h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-5BCh] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-5B0h] +
call sub_107DFC4  +
mov eax esi +
call sub_100C50D  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_107E314  +
or dword ptr [ecx+25Ch] 80000000h +
jmp loc_107E31E  +
and dword ptr [ecx+25Ch] 7FFFFFFFh +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CWnd@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+40h] +
mov dword ptr [esi] offset off_107E35C +
call sub_10C471B  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+40h] +
call sub_10C454A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CWnd@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_107E46B  +
mov ecx 400Ch +
cmp [eax] cx +
jnz loc_107E46F  +
mov eax [eax+8] +
test eax eax +
jnz loc_107E45E  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp word ptr [eax] 0Ah +
jnz loc_107E494  +
cmp dword ptr [eax+8] 80020004h +
jnz loc_107E494  +
xor eax eax +
inc eax  +
jmp loc_107E496  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_18] +
test edx edx +
jz loc_107E4D0  +
cmp word ptr [edx] 0 +
jnz loc_107E4B5  +
push 0Eh  +
jmp loc_107E4D2  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_107E4BB  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_107E4D3  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_107E4E4  +
cmp word ptr [edx] 0 +
jnz loc_107E4E9  +
mov edx offset aNull +
jmp loc_107E4E9  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
push edx  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 38h +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_107E53C  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_107E530  +
sub eax edx +
inc eax  +
jmp loc_107E53F  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_107E54A  +
mov ecx offset aNull_1 +
push 0  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 20h +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+8] +
add eax [ecx] +
push esi  +
mov esi [ebp+arg_0] +
cdq   +
sub eax edx +
sar eax 1 +
mov [esi] eax +
mov eax [ecx+0Ch] +
add eax [ecx+4] +
cdq   +
sub eax edx +
sar eax 1 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+pt.y]  +
push [ebp+pt.x]  +
push ecx  +
call ds:PtInRect  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
neg eax  +
push eax  +
mov eax [ebp+arg_0] +
neg eax  +
push eax  +
push ecx  +
call ds:InflateRect  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpPoint] +
push edi  +
mov ebx ecx +
push esi  +
push dword ptr [ebx+20h]  +
call ds:ScreenToClient  +
lea edi [esi+8] +
push edi  +
push dword ptr [ebx+20h]  +
call ds:ScreenToClient  +
mov ecx ebx +
call ?GetExStyle@CWnd@@QBEKXZ  +
test eax 400000h +
jz loc_107E613  +
mov eax [esi] +
mov ecx [edi] +
mov [esi] ecx +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+bErase]  +
push 0  +
push dword ptr [ecx+20h]  +
call ds:InvalidateRect  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_0.y]  +
push [ebp+arg_0.x]  +
push dword ptr [ecx+20h]  +
call ds:ChildWindowFromPointEx  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
pop ebp  +
retn 0Ch  +
***
call ?Default@CWnd@@IAEJXZ  +
retn 0Ch  +
***
call ds:EnableWindow  +
retn   +
***
call ds:EnableWindow  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_107E6BC  +
cmp byte ptr [eax+19h] 5 +
jb loc_107E6BC  +
push offset dword_100C4B0  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push [ebp+arg_0]  +
mov ecx esi +
call ?DoPreparePrinting@CView@@QAEHPAUCPrintInfo@@@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov eax lpDst +
cmp eax offset lpDst +
jz locret_107E6F6  +
cmp byte ptr [eax+19h] 5 +
jb locret_107E6F6  +
push offset dword_100C4B0  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
retn 8  +
***
mov edi edi +
mov eax lpDst +
cmp eax offset lpDst +
jz locret_107E724  +
cmp byte ptr [eax+19h] 5 +
jb locret_107E724  +
push offset dword_100C4B0  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 0  +
push dword ptr [esi+20h]  +
push 222h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
mov [ebp-14h] ebx +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
mov ecx [esi+180h] +
mov [ebp-4] ebx +
cmp ecx ebx +
jnz loc_107E7BB  +
mov ecx [esi+310h] +
cmp ecx ebx +
jnz loc_107E795  +
push ebx  +
jmp loc_107E7E9  +
mov eax [ebp+0Ch] +
dec eax  +
mov [ebp-0Dh] bl +
jz loc_107E7AE  +
dec eax  +
jnz loc_107E792  +
push 1  +
lea eax [ebp-0Dh] +
push eax  +
call sub_10B0E7F  +
jmp loc_107E7E7  +
push 1  +
lea eax [ebp-0Dh] +
push eax  +
call sub_10B0D90  +
jmp loc_107E7E7  +
mov eax [ebp+0Ch] +
dec eax  +
jz loc_107E7E2  +
dec eax  +
jz loc_107E7DB  +
dec eax  +
jz loc_107E7E7  +
dec eax  +
jz loc_107E7D4  +
dec eax  +
jnz loc_107E792  +
call sub_10C593F  +
jmp loc_107E7E7  +
call sub_10C5A59  +
jmp loc_107E7E7  +
call sub_10C6111  +
jmp loc_107E7E7  +
call sub_10C5FE5  +
push 1  +
mov ecx [ebp+8] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 8  +
mov eax offset dword_10DEC9C +
call sub_1001F95  +
mov edi ecx +
xor esi esi +
mov [ebp-10h] esi +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
push esi  +
push esi  +
push dword_10F5310  +
mov [ebp-4] esi +
push dword ptr [edi-24h]  +
call ds:PostMessageW  +
mov ecx [ebp+8] +
push esi  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push eax  +
push [ebp+wParam]  +
push 100Ch  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi] +
push 2  +
dec esi  +
push esi  +
call sub_107E863  +
inc eax  +
mov [edi] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 14h  +
mov eax offset dword_10D4DA4 +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCamcviewOnac_4  +
mov [ebp-4] ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [edi+138h] +
cmp ecx ebx +
jz loc_107E91D  +
push dword ptr [ebp+18h]  +
lea eax [ebp-20h] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1097155  +
mov ecx [ebp+8] +
push eax  +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107E941  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_107E941  +
cmp byte ptr [eax+19h] 3 +
jb loc_107E941  +
push offset dword_100C4B0  +
push 48h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push eax  +
push [ebp+wParam]  +
push 101Eh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
push 14h  +
mov eax offset dword_10D4DA4 +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCamcviewOnac_5  +
mov [ebp-4] ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [edi+138h] +
cmp ecx ebx +
jz loc_107EA34  +
push dword ptr [ebp+18h]  +
lea eax [ebp-20h] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1094B54  +
mov ecx [ebp+8] +
push eax  +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107EA58  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_107EA58  +
cmp byte ptr [eax+19h] 3 +
jb loc_107EA58  +
push offset dword_100C4B0  +
push 49h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
push 14h  +
mov eax offset dword_10D4DA4 +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCamcviewOnac_6  +
mov [ebp-4] ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [edi+138h] +
cmp ecx ebx +
jz loc_107EB21  +
push dword ptr [ebp+14h]  +
lea eax [ebp-20h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1029F85  +
mov ecx [ebp+8] +
push eax  +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107EB45  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_107EB45  +
cmp byte ptr [eax+19h] 3 +
jb loc_107EB45  +
push offset dword_100C4B0  +
push 4Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
push 14h  +
mov eax offset dword_10D4DA4 +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCamcviewOnac_7  +
mov [ebp-4] ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [edi+138h] +
cmp ecx ebx +
jz loc_107EC13  +
push dword ptr [ebp+14h]  +
lea eax [ebp-20h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1094CF3  +
mov ecx [ebp+8] +
push eax  +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_107EC37  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_107EC37  +
cmp byte ptr [eax+19h] 3 +
jb loc_107EC37  +
push offset dword_100C4B0  +
push 4Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-8] +
call MFC42u_6466  +
mov eax [esi+134h] +
mov ecx [eax+8Ch] +
mov esi [ebp-8] +
mov eax [eax+94h] +
mov edx [ebp-4] +
imul eax ecx +
mov [edx+4] esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
push eax  +
push eax  +
push 8  +
push [ebp+arg_0]  +
call ?SetItem@CTreeCtrl@@QAEHPAU_TREEITEM@@IPBGHHIIJ@Z  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 1141h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 1114h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10254D4  +
push offset aCdeferredresul  +
mov dword ptr [esi] offset off_106BCF8 +
call ds:AddAtomW  +
mov [esi+4] ax +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push 1  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp+8] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_106BCF8 +
call sub_1023432  +
test byte ptr [ebp+8] 1 +
jz loc_107EE0A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 4  +
mov eax offset dword_10E6DD0 +
call sub_1001F95  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push offset aCamcviewScline  +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10254D4  +
push offset aCdeferredrenam  +
mov dword ptr [esi] offset off_107EECC +
call ds:AddAtomW  +
mov [esi+4] ax +
mov eax [ebp+8] +
mov [esi+8] eax +
mov eax [ebp+0Ch] +
mov [esi+0Ch] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push offset aCamcviewScaddv  +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 20h  +
mov eax offset dword_10D4E08 +
call sub_1001F95  +
xor esi esi +
mov [ebp-10h] esi +
mov ebx [ebp+8] +
push esi  +
mov ecx ebx +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov [ebp-4] esi +
inc esi  +
push offset aCamcviewScpret  +
mov ecx ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
xor eax eax +
push 7  +
pop ecx  +
lea edi [ebp-2Ch] +
stos   +
mov eax [ebp+0Ch] +
mov [ebp-28h] eax +
mov eax [ebp+10h] +
mov [ebp-24h] eax +
mov eax [ebp+14h] +
mov [ebp-20h] eax +
lea eax [ebp-2Ch] +
push eax  +
mov eax dword_10F54B0 +
mov ecx offset dword_10F54B0 +
call dword ptr [eax+60h]  +
test eax eax +
jnz loc_107F005  +
push esi  +
mov ecx ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax ebx +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
mov eax lpDst +
cmp eax offset lpDst +
jz locret_107F07B  +
cmp byte ptr [eax+19h] 5 +
jb locret_107F07B  +
push offset dword_100C4B0  +
push 6Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
push 0  +
push [ebp+arg_0]  +
mov edi ecx +
lea ecx [ebp+var_10] +
lea esi [edi+44h] +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+34h]  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov edi [edi+32Ch] +
test edi edi +
jz loc_107F0D9  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+74h]  +
test eax eax +
setnle al  +
movzx eax al +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov ecx edi +
call sub_1028275  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax 0FFFF7FFFh +
cmp eax 7 +
ja loc_107F122  +
jmp ds:off_107F128[eax*4]  +
xor eax eax +
inc eax  +
jmp loc_107F124  +
push 2  +
pop eax  +
jmp loc_107F124  +
push 4  +
jmp loc_107F104  +
push 8  +
jmp loc_107F104  +
push 10h  +
jmp loc_107F104  +
push 20h  +
jmp loc_107F104  +
push 40h  +
jmp loc_107F104  +
mov eax 80h +
jmp loc_107F124  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
add ecx 44h +
mov eax [ecx] +
lea edx [ebp-10h] +
push edx  +
call dword ptr [eax+1Ch]  +
lea ecx [ebp-10h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
add ecx 44h +
mov eax [ecx] +
lea edx [ebp-10h] +
push edx  +
call dword ptr [eax+20h]  +
lea ecx [ebp-10h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
leave   +
retn   +
***
call sub_1001F95  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
sub eax 0 +
jz loc_107F1CF  +
dec eax  +
jz loc_107F1C5  +
dec eax  +
jnz loc_107F1E0  +
push dword ptr [ebp+10h]  +
push 3421h  +
jmp loc_107F1D7  +
push dword ptr [ebp+10h]  +
push 3420h  +
jmp loc_107F1D7  +
push dword ptr [ebp+10h]  +
push 3422h  +
lea eax [ebp-10h] +
push eax  +
call sub_105142C  +
push 10h  +
push dword ptr [ebp-10h]  +
call ds:?MMCErrorBox@@YGHPBGI@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
xor ebx ebx +
mov [ebp-14h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aCamcviewSccrea  +
mov [ebp-4] ebx +
mov dword ptr [ebp-14h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+18h] +
or dword ptr [esi] 0FFFFFFFFh +
mov edi [ebp+0Ch] +
push dword ptr [edi]  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_107F27C  +
test al 1 +
jz loc_107F27C  +
cmp [ebp+14h] bl +
jz loc_107F269  +
push dword ptr [edi]  +
mov ecx [ebp-10h] +
push dword ptr [esi]  +
push ebx  +
call sub_107F195  +
mov ecx [ebp+8] +
push 80070005h  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_107F34F  +
mov eax [edi] +
push ebx  +
push 80h  +
push 2  +
push ebx  +
push ebx  +
push 40000000h  +
push eax  +
call ds:CreateFileW  +
mov [esi] eax +
cmp eax 0FFFFFFFFh +
jnz loc_107F2D6  +
call ds:__imp_GetLastError  +
mov ecx [ebp+8] +
push eax  +
call ds:?FromWin32@SC@mmcerror@@QAEAAV12@J@Z  +
mov ecx [ebp+8] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107F2C6  +
mov ecx [ebp+8] +
push 8000FFFFh  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
cmp [ebp+14h] bl +
jz loc_107F34F  +
push dword ptr [edi]  +
push ebx  +
push 1  +
jmp loc_107F347  +
cmp [ebp+10h] bl +
jz loc_107F34F  +
push ebx  +
lea ecx [ebp+18h] +
push ecx  +
push 2  +
lea ecx [ebp+10h] +
push ecx  +
push eax  +
mov dword ptr [ebp+10h] 0FEFFh +
call ds:WriteFile  +
test eax eax +
jz loc_107F2FE  +
cmp dword ptr [ebp+18h] 2 +
jz loc_107F34F  +
call ds:__imp_GetLastError  +
mov ecx [ebp+8] +
push eax  +
call ds:?FromWin32@SC@mmcerror@@QAEAAV12@J@Z  +
mov ecx [ebp+8] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107F329  +
mov ecx [ebp+8] +
push 8000FFFFh  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push dword ptr [esi]  +
call ds:CloseHandle  +
or dword ptr [esi] 0FFFFFFFFh +
push dword ptr [edi]  +
call ds:DeleteFileW  +
cmp [ebp+14h] bl +
jz loc_107F34F  +
push dword ptr [edi]  +
push dword ptr [esi]  +
push 2  +
mov ecx [ebp-10h] +
call sub_107F195  +
mov ecx [ebp+8] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107F36D  +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_107F36D  +
push eax  +
call ds:CloseHandle  +
or dword ptr [esi] 0FFFFFFFFh +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CString@@QAE@XZ  +
mov eax esi +
pop esi  +
retn   +
***
jmp ??1CString@@QAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_107F3FE  +
push dword ptr [eax+20h]  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_107F3FE  +
mov al 1 +
jmp loc_107F400  +
xor al al +
mov [esi+4] al +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi ecx +
call sub_101D08C  +
mov ecx eax +
xor ebx ebx +
mov [ebp-8] ecx +
cmp ecx ebx +
jz loc_107F559  +
push edi  +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
mov [ebp-4] eax +
call ds:GetFocus  +
push ebx  +
mov ecx esi +
call sub_100DD70  +
push eax  +
lea ecx [ebp-28h] +
call sub_107F3DC  +
push 1  +
mov ecx esi +
call sub_100DD70  +
push eax  +
lea ecx [ebp-20h] +
call sub_107F3DC  +
push dword ptr [esi+184h]  +
lea ecx [ebp-18h] +
call sub_107F3DC  +
push dword ptr [esi+18Ch]  +
lea ecx [ebp-10h] +
call sub_107F3DC  +
mov esi [ebp-4] +
push ebx  +
push offset off_10F6E2C  +
mov edi offset off_10F6CB8 +
push edi  +
push ebx  +
push esi  +
call __RTDynamicCast  +
add esp 14h +
mov [ebp-4] eax +
cmp eax ebx +
jz loc_107F4AE  +
push dword ptr [ebp+8]  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx]  +
test eax eax +
jnz loc_107F558  +
xor eax eax +
cmp [ebp+eax*8-28h] esi +
jz loc_107F4BC  +
inc eax  +
cmp eax 4 +
jl loc_107F4B0  +
cmp eax 4 +
jl loc_107F4C4  +
xor eax eax +
inc eax  +
xor ecx ecx +
cmp dword ptr [ebp+8] 1 +
setnz cl  +
xor edx edx +
lea ecx [ecx+ecx-1] +
lea esi [ecx+eax+4] +
jmp loc_107F4E3  +
inc edx  +
cmp edx 4 +
jz loc_107F558  +
lea esi [ecx+esi+4] +
and esi 80000003h +
jns loc_107F4F0  +
dec esi  +
or esi 0FFFFFFFCh +
inc esi  +
cmp [ebp+esi*8-24h] bl +
jz loc_107F4D9  +
xor ecx ecx +
cmp esi eax +
jz loc_107F524  +
mov eax [ebp+esi*8-28h] +
mov ecx [ebp-8] +
push 1  +
push eax  +
call ?SetActiveView@CFrameWnd@@QAEXPAVCView@@H@Z  +
push ebx  +
push offset off_10F6E2C  +
push edi  +
push ebx  +
push dword ptr [ebp+esi*8-28h]  +
call __RTDynamicCast  +
xor ecx ecx +
add esp 14h +
inc ecx  +
jmp loc_107F527  +
mov eax [ebp-4] +
cmp eax ebx +
jz loc_107F536  +
mov edx [eax] +
push ecx  +
push dword ptr [ebp+8]  +
mov ecx eax +
call dword ptr [edx+4]  +
push ebx  +
push offset off_10F6E10  +
push edi  +
push ebx  +
push dword ptr [ebp+esi*8-28h]  +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_107F558  +
mov edx [eax] +
push 3  +
push 3  +
mov ecx eax +
call dword ptr [edx]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
lea eax [ebp+Rect] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+20h]  +
call ds:GetClientRect  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
mov edx [ebp+Rect.left] +
cmp ecx edx +
jl loc_107F5A9  +
mov edx [ebp+Rect.right] +
cmp ecx edx +
jle loc_107F5AB  +
mov [eax] edx +
mov ecx [eax+4] +
mov edx [ebp+Rect.top] +
cmp ecx edx +
jl loc_107F5BC  +
mov edx [ebp+Rect.bottom] +
cmp ecx edx +
jle locret_107F5BF  +
mov [eax+4] edx +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 20h +
sub eax 25h +
jz loc_107F5EC  +
dec eax  +
dec eax  +
jnz locret_107F600  +
push 2  +
lea eax [ebp-10h] +
push eax  +
call sub_107E75A  +
lea ecx [ebp-10h] +
jmp loc_107F5FA  +
push 1  +
lea eax [ebp-20h] +
push eax  +
call sub_107E75A  +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?OnSysColorChange@CWnd@@IAEXXZ  +
push 0  +
push offset loc_10C9E01  +
push dword ptr [esi+20h]  +
call ds:EnumChildWindows  +
mov ecx [esi+178h] +
pop esi  +
jmp loc_109DAAB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_0] +
push dword ptr [esi+20h]  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_107F66A  +
lea eax [ebp+rc] +
push eax  +
push dword ptr [esi+20h]  +
call ds:GetWindowRect  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call ds:PtInRect  +
pop esi  +
leave   +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScmaxi  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx esi +
call sub_101D08C  +
mov esi eax +
push 80004005h  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107F6F3  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107F709  +
push 3  +
mov ecx esi +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScmini  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx esi +
call sub_101D08C  +
mov esi eax +
push 80004005h  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107F7D2  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107F7E8  +
push 6  +
mov ecx esi +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScrest  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx esi +
call sub_101D08C  +
mov esi eax +
push 80004005h  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107F8B2  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107F8C8  +
push 9  +
mov ecx esi +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScgetr  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
mov esi 80070057h +
push esi  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107F989  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107F9D5  +
mov eax [ebp+14h] +
sub eax 0 +
jz loc_107F9C1  +
dec eax  +
jz loc_107F9B9  +
dec eax  +
jz loc_107F9B1  +
dec eax  +
jz loc_107F9A9  +
and dword ptr [edi] 0 +
push esi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_107F9C8  +
mov eax [ebp+0Ch] +
mov eax [eax+0Ch] +
jmp loc_107F9C6  +
mov eax [ebp+0Ch] +
mov eax [eax+8] +
jmp loc_107F9C6  +
mov eax [ebp+0Ch] +
mov eax [eax+4] +
jmp loc_107F9C6  +
mov eax [ebp+0Ch] +
mov eax [eax] +
mov [edi] eax +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
xor esi esi +
mov [ebp-10h] esi +
mov edi [ebp+8] +
push esi  +
mov ecx edi +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewScsetr  +
mov ecx edi +
mov [ebp-4] esi +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+14h] +
sub eax esi +
jz loc_107FA9E  +
dec eax  +
jz loc_107FA93  +
dec eax  +
jz loc_107FA88  +
dec eax  +
jz loc_107FA7D  +
push 80070057h  +
mov ecx edi +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_107FAA6  +
mov eax [ebp+10h] +
mov ecx [ebp+0Ch] +
mov [ecx+0Ch] eax +
jmp loc_107FAA6  +
mov eax [ebp+10h] +
mov ecx [ebp+0Ch] +
mov [ecx+8] eax +
jmp loc_107FAA6  +
mov eax [ebp+10h] +
mov ecx [ebp+0Ch] +
mov [ecx+4] eax +
jmp loc_107FAA6  +
mov eax [ebp+10h] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov eax edi +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lprc] +
push esi  +
push edi  +
lea esi [ecx+2E0h] +
mov edi ebx +
movs   +
movs   +
movs   +
movs   +
push dword_10F5404  +
mov ecx ebx +
push dword_10F5400  +
call sub_107E5B8  +
mov ecx [ebx+4] +
mov eax [ebx] +
neg ecx  +
push ecx  +
neg eax  +
push eax  +
mov ecx ebx +
call sub_10AC4B6  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+2E4h] +
xor edx edx +
cmp [ebp+arg_4] dl +
push esi  +
mov esi [ecx+2E0h] +
mov ecx [ebp+arg_0] +
setz dl  +
add esi dword_10F5400 +
add eax dword_10F5404 +
lea edx [edx+edx-1] +
imul esi edx +
imul eax edx +
add [ecx] esi +
add [ecx+4] eax +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScge_2  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_107FBF8  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_107FC67  +
mov edi [edi+40h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_107FC5A  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_107DB59  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
xor ecx ecx +
cmp eax ecx +
jz loc_107FD10  +
cmp [ebp+8] ecx +
jz loc_107FD10  +
cmp [ebp+0Ch] ecx +
jz loc_107FD10  +
lea edx [ebp+10h] +
push edx  +
push dword ptr [ebp+0Ch]  +
mov [ebp+10h] ecx +
push dword ptr [ebp+8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+134h]  +
test eax eax +
jge loc_107FD0B  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_107FD37  +
cmp byte ptr [eax+19h] 2 +
jb loc_107FD37  +
push offset dword_100C4B0  +
push 95h  +
jmp loc_107FD2C  +
mov eax [ebp+10h] +
jmp loc_107FD39  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_107FD37  +
cmp byte ptr [eax+19h] 2 +
jb loc_107FD37  +
push offset dword_100C4B0  +
push 94h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push 311h  +
push dword ptr [ebp+8]  +
call ds:SendMessageW  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push 0  +
push offset loc_107FD42  +
push dword ptr [ebp+8]  +
call ds:EnumChildWindows  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push 30Fh  +
push dword ptr [ebp+8]  +
call ds:SendMessageW  +
mov ecx [ebp+0Ch] +
or [ecx] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-4] +
push eax  +
push offset loc_107FD85  +
push dword ptr [ebp+8]  +
call ds:EnumChildWindows  +
mov eax [ebp-4] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_107FE07  +
mov ecx [eax] +
push esi  +
push offset dword_1044B68  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_107FE1F  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+1Dh] 0 +
jz loc_107FE1D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_107FE3D  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+1Dh] 0 +
jz loc_107FE3B  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+1Dh] 0 +
jnz loc_107FE6A  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_107FE7E  +
mov [ecx+4] eax +
jmp loc_107FE8D  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_107FE8B  +
mov [ecx+8] eax +
jmp loc_107FE8D  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_107FEA8  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+39h] 0 +
jz loc_107FEA6  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_107FEC6  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+39h] 0 +
jz loc_107FEC4  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+39h] dl +
jz loc_107FEEA  +
mov eax [eax+8] +
jmp loc_107FF10  +
mov ecx [eax] +
cmp [ecx+39h] dl +
jnz loc_107FF01  +
push ecx  +
call sub_107FE9C  +
jmp loc_107FF10  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_107FF09  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+39h] dl +
jz loc_107FEF9  +
mov ecx [esi] +
cmp [ecx+39h] dl +
jnz loc_107FF12  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor edx edx +
cmp [eax+39h] dl +
jz loc_107FF36  +
push edx  +
push edx  +
push edx  +
push edx  +
push edx  +
call sub_10C82EA  +
add esp 14h +
pop esi  +
retn   +
mov ecx [eax+8] +
cmp [ecx+39h] dl +
jnz loc_107FF4F  +
push ecx  +
call sub_107FEBA  +
jmp loc_107FF57  +
mov ecx [esi] +
cmp ecx [eax+8] +
jnz loc_107FF57  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+39h] dl +
jz loc_107FF46  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
test eax eax +
jz loc_107FF78  +
push [ebp+arg_4]  +
mov ecx [eax] +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx]  +
jmp loc_107FF7D  +
mov eax 80004003h +
pop ebp  +
retn 8  +
***
sub ecx 1Ch +
jmp loc_101A6EE  +
***
mov eax [ecx] +
jmp dword ptr [eax+34h]  +
***
mov eax [ecx] +
jmp dword ptr [eax+28h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push esi  +
test ecx ecx +
jz loc_107FFBE  +
call sub_1033075  +
jmp loc_107FFC4  +
call ds:SetRectEmpty  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+nVirtKey]  +
call ds:GetKeyState  +
xor ecx ecx +
test ax ax +
setl cl  +
mov al cl +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 1F8h +
push 40h  +
call sub_1023016  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
test eax eax +
jz locret_108004A  +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
lea edx [ebp+var_8] +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+64h]  +
push [ebp+arg_C]  +
call sub_107F0E4  +
and eax [ebp+var_4] +
neg eax  +
sbb eax eax +
neg eax  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+4] 0 +
cmp [ebp+arg_4] 1 +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov [esi+0E4h] ecx +
mov eax [eax+4] +
mov [esi+0E8h] eax +
jnz loc_10800A1  +
mov eax [esi+178h] +
test eax eax +
jz loc_10800A1  +
push edi  +
mov edi [eax+4Ch] +
push ecx  +
push 0  +
mov ecx edi +
call sub_107E99F  +
push dword ptr [esi+0E8h]  +
mov ecx edi +
push 1  +
call sub_107E99F  +
pop edi  +
mov byte ptr [esi+1D5h] 1 +
pop esi  +
pop ebp  +
retn 8  +
***
clc   +
jmp fword ptr [eax-70h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_107E421  +
test byte ptr [ebp+8] 1 +
jz loc_1080104  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 28h  +
mov eax offset byte_10D4EE5 +
call sub_1001F95  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewOnmenu  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call sub_100ABA9  +
mov edi 8000FFFFh +
push edi  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1080261  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
cmp dword ptr [ebp+8] 2EECh +
mov byte ptr [ebp-4] 2 +
jz loc_1080245  +
cmp dword ptr [ebp+8] 2EEDh +
jz loc_1080245  +
push ebx  +
push dword ptr [ebp+10h]  +
call ds:GetMenuItemID  +
cmp eax 2EECh +
jz loc_1080245  +
push 320Bh  +
lea ecx [ebp-10h] +
call ?LoadStringW@CString@@QAEHI@Z  +
mov ecx [ebp-14h] +
mov eax [ecx] +
push ebx  +
push offset off_10F6DC0  +
push offset off_10F6DDC  +
push ebx  +
call dword ptr [eax+0C8h]  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
push edi  +
push eax  +
mov [ebp+8] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1080256  +
mov ecx [ebp+8] +
push dword ptr [ebp-10h]  +
add ecx 0C8h +
mov eax [ecx] +
lea edx [ebp-34h] +
push edx  +
call dword ptr [eax]  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1080256  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-14h] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10B1A26  +
lea ecx [ebp-10h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-14h] edi +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScget_  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108032B  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1080445  +
lea ecx [edi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov edi 80004005h +
push edi  +
push eax  +
mov [ebp-20h] eax +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1080438  +
mov eax [ebp-14h] +
mov eax [eax+0D8h] +
push edi  +
push eax  +
mov [ebp-1Ch] eax +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1080438  +
mov eax [ebp-1Ch] +
lea edx [ebp-18h] +
push edx  +
push dword ptr [ebp-20h]  +
xor edi edi +
mov [ebp-18h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+7Ch]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1080438  +
mov eax [ebp-14h] +
mov eax [eax+40h] +
cmp eax edi +
jz loc_10803E7  +
mov edi [eax+0E0h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1080438  +
push dword ptr [ebp+0Ch]  +
mov eax [edi] +
push dword ptr [ebp-18h]  +
push edi  +
call dword ptr [eax+70h]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScge_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 8000FFFFh  +
push dword ptr [edi+178h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1080522  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1080562  +
push dword ptr [ebp+0Ch]  +
mov ecx [edi+178h] +
lea eax [ebp-30h] +
push eax  +
call sub_10A471F  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScge_1  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 8000FFFFh  +
push dword ptr [edi+178h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108063E  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108067E  +
push dword ptr [ebp+0Ch]  +
mov ecx [edi+178h] +
lea eax [ebp-30h] +
push eax  +
call sub_10A463D  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScsele  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+2D0h] +
test al 4 +
lea eax [ebp-30h] +
jnz loc_1080748  +
push 3462h  +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10807C0  +
push 8000FFFFh  +
push dword ptr [esi+178h]  +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10807B0  +
mov ecx [esi+178h] +
lea eax [ebp-30h] +
push eax  +
call sub_1099E45  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScse_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1080883  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10808F8  +
push 8000FFFFh  +
push dword ptr [edi+178h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10808EB  +
push dword ptr [ebp+0Ch]  +
mov ecx [edi+178h] +
lea eax [ebp-30h] +
push eax  +
call sub_109DD87  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScdese  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10809B9  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1080A2E  +
push 8000FFFFh  +
push dword ptr [edi+178h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1080A21  +
push dword ptr [ebp+0Ch]  +
mov ecx [edi+178h] +
lea eax [ebp-30h] +
push eax  +
call sub_109DE9C  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScisse  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-30h] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1080AF8  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1080B76  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
push 8000FFFFh  +
push dword ptr [edi+178h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1080B69  +
push dword ptr [ebp+10h]  +
mov ecx [edi+178h] +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_109DFED  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewDispla  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1080C41  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1080CA9  +
mov edi [edi+1FCh] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1080C9C  +
push dword ptr [ebp+0Ch]  +
mov eax [edi] +
lea ecx [ebp-30h] +
push ecx  +
mov ecx edi +
call dword ptr [eax]  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScexec  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+18h]  +
lea eax [ebp-34h] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100D4B3  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1080D8D  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1080E03  +
mov ecx [ebp-14h] +
mov esi [esi+0D8h] +
add ecx 44h +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1080DF6  +
push dword ptr [ebp+18h]  +
mov eax [esi] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-14h]  +
push esi  +
call dword ptr [eax+0FCh]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcviewScge_6  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jnz loc_1080EBA  +
push 80070057h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1080F13  +
cmp [edi+270h] ebx +
jz loc_1080ED2  +
push 345Bh  +
push dword ptr [ebp+8]  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
jmp loc_1080F13  +
mov eax [edi+1D0h] +
sub eax ebx +
jz loc_1080F04  +
dec eax  +
jz loc_1080EFC  +
dec eax  +
jz loc_1080EF8  +
dec eax  +
jz loc_1080EF0  +
dec eax  +
jnz loc_1080EF0  +
mov dword ptr [ecx] 4 +
jmp loc_1080F06  +
mov dword ptr [ecx] 2 +
jmp loc_1080F06  +
mov [ecx] ebx +
jmp loc_1080F06  +
mov dword ptr [ecx] 3 +
jmp loc_1080F06  +
mov [ecx] esi +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScpu_1  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [esi+270h] 0 +
jz loc_1080FB9  +
push 345Bh  +
push dword ptr [ebp+8]  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
jmp loc_1081024  +
mov eax [ebp+0Ch] +
sub eax 0 +
jz loc_1080FED  +
dec eax  +
jz loc_1080FE9  +
dec eax  +
jz loc_1080FE5  +
dec eax  +
jz loc_1080FE1  +
dec eax  +
jz loc_1080FDD  +
push 80070057h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1081017  +
push 4  +
jmp loc_1080FEF  +
mov eax ebx +
jmp loc_1080FF0  +
push 3  +
jmp loc_1080FEF  +
xor eax eax +
jmp loc_1080FF0  +
push 2  +
pop eax  +
push eax  +
lea ecx [esi+44h] +
mov edx [ecx] +
lea eax [ebp-30h] +
push eax  +
call dword ptr [edx+48h]  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov edi [ebp+8] +
push ebx  +
mov ecx edi +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcviewScback  +
mov ecx edi +
mov [ebp-4] ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp-14h] +
push esi  +
lea eax [ebp-24h] +
push eax  +
call sub_107E75A  +
push eax  +
mov ecx edi +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov edi [ebp+8] +
push ebx  +
mov ecx edi +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcviewScforw  +
mov ecx edi +
mov [ebp-4] ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp-14h] +
push 2  +
lea eax [ebp-24h] +
push eax  +
call sub_107E75A  +
push eax  +
mov ecx edi +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScpu_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108121F  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1081287  +
mov edi [edi+1FCh] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108127A  +
push dword ptr [ebp+0Ch]  +
mov eax [edi] +
lea ecx [ebp-30h] +
push ecx  +
mov ecx edi +
call dword ptr [eax]  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScge_5  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+14h]  +
lea eax [ebp-38h] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1081368  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_108146A  +
mov eax [ebp+14h] +
and dword ptr [eax] 0 +
cmp dword ptr [edi+270h] 0 +
jz loc_1081387  +
push 345Bh  +
push dword ptr [ebp+8]  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
jmp loc_1081360  +
push 8000FFFFh  +
push dword ptr [edi+178h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10813CD  +
lea eax [ebp-28h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1081360  +
mov ecx [edi+178h] +
or dword ptr [ebp-14h] 0FFFFFFFFh +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-38h] +
push eax  +
call sub_109DB19  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10813BE  +
mov edi [edi+178h] +
mov ecx [edi+94h] +
mov eax [ebp+10h] +
cmp ecx eax +
jge loc_108142D  +
push 80070057h  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10813C1  +
mov ecx [edi+4Ch] +
dec eax  +
push eax  +
push dword ptr [ebp-14h]  +
lea eax [ebp-18h] +
push eax  +
call ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 5 +
call ?AllocSysString@CString@@QBEPAGXZ  +
mov ecx [ebp+14h] +
mov [ecx] eax +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-18h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov [ebp-1Ch] ecx +
xor edi edi +
push edi  +
lea ecx [ebp-30h] +
mov [ebp-14h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScclos  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp-1Ch] +
call sub_101D08C  +
mov esi dword_10F5304 +
push 80004005h  +
push eax  +
mov [ebp-20h] eax +
push esi  +
lea eax [ebp-40h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108154F  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10815CF  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov [ebp-10h] edi +
call sub_102B490  +
cmp [ebp-18h] edi +
jz loc_1081594  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
call sub_102B4EB  +
cmp eax edi +
jz loc_108157A  +
inc dword ptr [ebp-10h]  +
cmp dword ptr [ebp-10h] 2 +
jge loc_108157F  +
cmp [ebp-18h] edi +
jnz loc_1081562  +
cmp [ebp-10h] ebx +
jnz loc_1081594  +
push 3457h  +
lea ecx [ebp-30h] +
call ds:?FromMMC@SC@mmcerror@@QAEAAV12@J@Z  +
jmp loc_10815C2  +
mov ecx [ebp-1Ch] +
call sub_100EC0C  +
test al al +
jz loc_10815B2  +
mov ecx esi +
call sub_104AE6A  +
cmp eax ebx +
jnz loc_10815B2  +
push 33F8h  +
jmp loc_1081589  +
mov eax [ebp-20h] +
push edi  +
push edi  +
push 10h  +
push dword ptr [eax+20h]  +
call ds:PostMessageW  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScge_3  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
jz loc_108168E  +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10816A5  +
mov al [esi+1F8h] +
and al bl +
movzx eax al +
mov [edi] eax +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-30h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScfind  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+10h] +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
mov [eax] esi +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108178C  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_1081943  +
mov eax [edi+40h] +
test eax eax +
jnz loc_1081798  +
and [ebp-14h] eax +
jmp loc_10817A1  +
mov eax [eax+0E0h] +
mov [ebp-14h] eax +
lea eax [edi+0D8h] +
push 8000FFFFh  +
mov [ebp-20h] eax +
mov eax [eax] +
push eax  +
push dword ptr [edi+174h]  +
lea eax [ebp-40h] +
push dword ptr [ebp-14h]  +
push eax  +
call sub_100CB6E  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10817F6  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1081784  +
mov eax [ebp-14h] +
and dword ptr [ebp-1Ch] 0 +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+6Ch]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10817E7  +
mov eax [edi+174h] +
add eax 0A8h +
push 8000FFFFh  +
push eax  +
mov [ebp+0Ch] eax +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10817E7  +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-18h] 0 +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp-1Ch]  +
lea eax [ebp-40h] +
push eax  +
call sub_1046CE6  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10818B0  +
push 3459h  +
lea eax [ebp-40h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
mov byte ptr [ebp-4] 6 +
jmp loc_1081924  +
push dword ptr [ebp-18h]  +
mov ecx [edi+174h] +
call sub_100C803  +
mov [ebp+0Ch] eax +
test eax eax +
jz loc_1081911  +
mov ecx [edi+174h] +
call sub_100C573  +
cmp [ebp+0Ch] eax +
jnz loc_1081911  +
push dword ptr [ebp-18h]  +
mov ecx [edi+174h] +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx [ebp-20h] +
mov esi eax +
call sub_100A5CF  +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+44h]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jmp loc_10817E7  +
push 3459h  +
lea eax [ebp-40h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
mov byte ptr [ebp-4] 7 +
push eax  +
lea ecx [ebp-30h] +
call esi  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_51  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1081A30  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1081AE2  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
mov eax [esi+40h] +
test eax eax +
jnz loc_1081A42  +
and [ebp-14h] eax +
jmp loc_1081A4B  +
mov eax [eax+0E0h] +
mov [ebp-14h] eax +
push 8000FFFFh  +
add esi 0D8h +
mov eax [esi] +
push eax  +
push dword ptr [ebp-14h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1081AD5  +
mov ecx esi +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+7Ch]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1081AD5  +
push dword ptr [ebp+10h]  +
mov eax [ebp-14h] +
push dword ptr [ebp-18h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+70h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScge_4  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1081B7C  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1081BF7  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
push 8000FFFFh  +
push dword ptr [edi+178h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1081BEA  +
push dword ptr [ebp+0Ch]  +
mov ecx [edi+178h] +
lea eax [ebp-30h] +
push eax  +
call sub_10A41A5  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-28h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScgeth  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+10h] +
mov [eax] esi +
mov eax [edi+174h] +
push 8000FFFFh  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1081CD2  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1081D85  +
mov eax [ebp-18h] +
mov edi [edi+40h] +
add eax 0A8h +
mov [ebp-18h] eax +
test edi edi +
jz loc_1081CEA  +
mov edi [edi+0E0h] +
push 8000FFFFh  +
push edi  +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1081D78  +
and dword ptr [ebp-14h] 0 +
mov eax [edi] +
lea ecx [ebp-14h] +
push ecx  +
mov ecx [ebp+0Ch] +
push dword ptr [ecx]  +
push edi  +
call dword ptr [eax+6Ch]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1081D78  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-18h] +
push dword ptr [ebp-14h]  +
lea eax [ebp-38h] +
push eax  +
call sub_10C4031  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
push 3Ch  +
mov eax offset word_10D52F2 +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-38h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScview  +
lea ecx [ebp-38h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-48h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1081E5E  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108204C  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-28h] +
call MFC42u_6466  +
mov eax [edi-4] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jnz loc_1081E7C  +
and [ebp-18h] eax +
jmp loc_1081E85  +
mov eax [eax+0E0h] +
mov [ebp-18h] eax +
push 8000FFFFh  +
push dword ptr [ebp-18h]  +
lea eax [ebp-48h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1082036  +
mov eax [ebp+0Ch] +
and dword ptr [ebp-1Ch] 0 +
mov ecx [ebp-18h] +
lea edx [ebp-0Dh] +
push edx  +
lea edx [ebp-1Ch] +
add eax 0A8h +
push edx  +
push eax  +
push dword ptr [ebp-18h]  +
mov byte ptr [ebp-0Dh] 0 +
mov ecx [ecx] +
mov [ebp-20h] eax +
call dword ptr [ecx+38h]  +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1082036  +
cmp [ebp-0Dh] al +
jnz loc_1081F18  +
push 2EEFh  +
push dword ptr [ebp+8]  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
jmp loc_1082043  +
mov eax [edi+94h] +
push 8000FFFFh  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-48h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1082036  +
mov eax [ebp-18h] +
mov edx [eax] +
mov eax [ebp+0Ch] +
add eax 8 +
push eax  +
push dword ptr [ebp-20h]  +
lea ecx [edi-44h] +
call sub_102B3E0  +
push eax  +
push dword ptr [ebp-18h]  +
call dword ptr [edx+0B4h]  +
push eax  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1082036  +
mov eax [edi] +
push ebx  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-48h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+34h]  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push 2EEFh  +
lea eax [ebp-48h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 7 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-48h] +
mov [ebp+0Fh] al +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp byte ptr [ebp+0Fh] 0 +
jz loc_108202D  +
mov esi ds:??0SC@mmcerror@@QAE@ABV01@@Z +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-48h] +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 8 +
call ds:?Clear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-48h] +
push eax  +
call esi  +
lea ecx [ebp-48h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-24h] +
mov ecx [ebp-28h] +
mov [eax+4] ecx +
jmp loc_108204F  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-24h] +
mov ecx [ebp-28h] +
mov [eax+4] ecx +
mov [ebp-14h] ebx +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edx [ecx+270h] +
xor eax eax +
cmp edx 1 +
jnz loc_1082080  +
mov eax [ecx+180h] +
retn   +
test edx edx +
jnz loc_108208E  +
mov eax [ecx+178h] +
mov eax [eax+4Ch] +
retn   +
cmp edx 2 +
jnz locret_1082099  +
mov eax [ecx+188h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10820CC  +
cmp byte ptr [eax+19h] 5 +
jb loc_10820CC  +
push offset dword_100C4B0  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov esi [ebp+arg_0] +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push dword ptr [edi+174h]  +
call sub_107F634  +
test eax eax +
jz loc_10820E7  +
xor eax eax +
jmp loc_1082126  +
mov eax [edi+1A0h] +
test eax eax +
jz loc_1082105  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push eax  +
call sub_107F634  +
test eax eax +
jz loc_1082105  +
xor eax eax +
inc eax  +
jmp loc_1082126  +
mov edi [edi+1B0h] +
test edi edi +
jz loc_1082123  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push edi  +
call sub_107F634  +
test eax eax +
jz loc_1082123  +
push 2  +
pop eax  +
jmp loc_1082126  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScpost  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push edi  +
push edi  +
mov [esi+0F4h] bl +
push dword_10F5314  +
push dword ptr [esi+20h]  +
call ds:PostMessageW  +
mov edi [esi+208h] +
mov esi [esi+204h] +
push 8000FFFFh  +
push esi  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10821C9  +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_10821FE  +
mov eax [edi] +
lea ecx [ebp-30h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+4]  +
lea ecx [ebp-30h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [esi] +
lea ecx [ebp-30h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+14h]  +
lea ecx [ebp-30h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcviewSconmi  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [edi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
cmp eax ebx +
jnz loc_10822D6  +
push 80004005h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1082319  +
mov ecx [edi+0D8h] +
cmp ecx ebx +
jnz loc_10822F0  +
push 80004005h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_108230F  +
movzx edi byte ptr [ebp+0Ch] +
mov edx [ecx] +
push ebx  +
push edi  +
push 900Dh  +
push eax  +
push ecx  +
call dword ptr [edx+78h]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 28h  +
mov eax offset byte_10D53BD +
call sub_1001F95  +
mov esi ecx +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewOngeti  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx [ebp+8] +
push 80070057h  +
push ebx  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108240B  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-24h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
and dword ptr [ebx] 0 +
mov eax [esi+0D8h] +
push 8000FFFFh  +
push eax  +
push dword ptr [esi+174h]  +
lea eax [ebp-34h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10823E0  +
lea ecx [esi+44h] +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+78h]  +
mov ecx [esi+174h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_10C3CFA  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10823E0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
jnz loc_1082525  +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov [esi+16Ch] eax +
mov eax [esi+0D8h] +
mov ecx [eax] +
push 0  +
push [ebp+arg_0]  +
push 9029h  +
push dword ptr [esi+16Ch]  +
push eax  +
call dword ptr [ecx+78h]  +
cmp [ebp+arg_0] 0 +
jnz loc_1082520  +
and dword ptr [esi+16Ch] 0 +
pop esi  +
pop ebp  +
retn 4  +
cmp dword ptr [esi+16Ch] 0 +
jnz loc_10824F7  +
mov eax 8000FFFFh +
jmp loc_1082520  +
***
mov edi edi +
push esi  +
mov esi [ecx+0D8h] +
test esi esi +
jz loc_1082561  +
push edi  +
mov edi [esi] +
push 0  +
add ecx 44h +
mov eax [ecx] +
push 0  +
push 902Eh  +
call dword ptr [eax+78h]  +
push eax  +
push esi  +
call dword ptr [edi+78h]  +
pop edi  +
xor eax eax +
pop esi  +
retn 8  +
***
push offset unk_10F5720  +
push 50010000h  +
push offset word_100A5FC  +
push edi  +
mov ecx esi +
call dword ptr [ebx+5Ch]  +
mov eax [esi+20h] +
cmp eax edi +
jz loc_1082669  +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_1082669  +
push edi  +
push 200h  +
push edi  +
mov ecx esi +
call ?ModifyStyleEx@CWnd@@QAEHKKI@Z  +
mov eax [ebp-10h] +
mov eax [eax-4] +
mov eax [eax+0DCh] +
push 1  +
push eax  +
lea eax [ebp-38h] +
push eax  +
mov ecx esi +
call sub_10AB527  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108264C  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+60h]  +
jmp loc_10826BC  +
mov ecx [ebp-18h] +
mov eax [ebp-14h] +
mov esi [esi+20h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [eax+4] ecx +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
jmp loc_10826D4  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108268D  +
cmp byte ptr [eax+19h] 2 +
jb loc_108268D  +
push offset dword_100C4B0  +
push 44h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
jmp loc_10826BC  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10826BC  +
cmp byte ptr [eax+19h] 2 +
jb loc_10826BC  +
push offset dword_100C4B0  +
push 45h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [ebp-18h] +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [eax+4] ecx +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
call sub_1001FCF  +
retn 8  +
***
push 24h  +
mov eax offset byte_10D4E75 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCdeferredres_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
jz loc_10827A0  +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10827B1  +
mov ax [esi+4] +
mov [edi] ax +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-38h] +
mov [ebp-14h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScsetf  +
lea ecx [ebp-38h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
lea ecx [edi+44h] +
mov eax [ecx] +
mov byte ptr [ebp-4] 2 +
call dword ptr [eax+70h]  +
cmp eax ebx +
jnz loc_108288C  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108295B  +
push ebx  +
mov ecx edi +
call sub_100DD70  +
mov [ebp-28h] eax +
mov eax [edi+18Ch] +
mov [ebp-24h] eax +
mov eax [edi+184h] +
mov [ebp-20h] eax +
mov [ebp-10h] esi +
mov eax [ebp-10h] +
mov esi [ebp+eax*4-28h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-48h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1082918  +
test esi esi +
jnz loc_10828F2  +
xor eax eax +
jmp loc_10828F5  +
mov eax [esi+20h] +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_1082918  +
push dword ptr [esi+20h]  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_1082918  +
mov ecx esi +
call ?IsWindowEnabled@CWnd@@QBEHXZ  +
test eax eax +
jnz loc_1082923  +
inc dword ptr [ebp-10h]  +
cmp dword ptr [ebp-10h] 3 +
jge loc_108294E  +
jmp loc_10828AC  +
mov ecx edi +
call sub_101D08C  +
test eax eax +
jz loc_1082940  +
push ebx  +
push esi  +
mov ecx edi +
call sub_101D08C  +
mov ecx eax +
call ?SetActiveView@CFrameWnd@@QAEXPAVCView@@H@Z  +
jmp loc_108294E  +
push 8000FFFFh  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov ecx [ebp-1Ch] +
mov eax [ebp-18h] +
mov [eax+4] ecx +
lea ecx [ebp-38h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push 2Ch  +
mov eax offset byte_10D5505 +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcviewScse_3  +
lea ecx [ebp-28h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
cmp dword ptr [ebp+0Ch] 3 +
mov byte ptr [ebp-4] 2 +
jbe loc_1082A2D  +
push 80004005h  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1082B0E  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+70h]  +
cmp eax [ebp+0Ch] +
jnz loc_1082A41  +
lea eax [ebp-28h] +
jmp loc_1082B04  +
cmp [ebp+0Ch] esi +
jnz loc_1082A7F  +
lea eax [ebp-38h] +
push eax  +
lea ecx [edi-44h] +
call sub_108282B  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1082B11  +
push dword ptr [ebp+0Ch]  +
add edi 0FFFFFFBCh +
mov ecx edi +
call sub_100DD70  +
mov [ebp+0Ch] eax +
cmp eax ebx +
jnz loc_1082A97  +
xor eax eax +
jmp loc_1082A9A  +
mov eax [eax+20h] +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_1082AF6  +
mov eax [ebp+0Ch] +
push dword ptr [eax+20h]  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_1082AF6  +
mov ecx [ebp+0Ch] +
call ?IsWindowEnabled@CWnd@@QBEHXZ  +
test eax eax +
jz loc_1082AF6  +
mov ecx edi +
call sub_101D08C  +
cmp eax ebx +
jz loc_1082AE3  +
push esi  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_101D08C  +
mov ecx eax +
call ?SetActiveView@CFrameWnd@@QAEXPAVCView@@H@Z  +
jmp loc_1082A39  +
***
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1082A39  +
***
push 80004005h  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] esi +
mov ecx [ebp-18h] +
mov eax [ebp-14h] +
mov [eax+4] ecx +
lea ecx [ebp-28h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 28h  +
mov eax offset word_10D35FA +
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScorga  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [esi-4] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1082BED  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1082C40  +
mov edi [edi+0DCh] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1082C33  +
mov eax [ebp-14h] +
add eax 0FFFFFFBCh +
push eax  +
mov ecx edi +
call sub_10A9328  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push 24h  +
mov eax offset byte_10D4E75 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScauto  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 8000FFFFh  +
push dword ptr [esi+134h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1082D18  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1082D42  +
mov eax [esi+134h] +
mov ecx [eax] +
mov edi [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
xor eax 100h +
push eax  +
push dword ptr [esi+134h]  +
call dword ptr [edi+10h]  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push 24h  +
mov eax offset byte_10D4E75 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCdeferredren_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [esi+8]  +
call ?FromHandlePermanent@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov edi eax +
push 80070057h  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1082E1F  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1082E3D  +
mov ecx edi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
push dword ptr [esi+0Ch]  +
mov ecx edi +
call sub_1054672  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push 24h  +
mov eax offset byte_10D4E75 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCdeferredpageb  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
jz loc_1082F1A  +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1082F2B  +
mov ax [esi+4] +
mov [edi] ax +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1023432  +
test byte ptr [ebp+8] 1 +
jz loc_1082FA7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 24h  +
mov eax offset word_10D4FE2 +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScre_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80004005h  +
push dword ptr [edi+130h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1083030  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1083065  +
push dword ptr [ebp+0Ch]  +
mov ecx [edi+130h] +
lea eax [ebp-30h] +
push eax  +
call sub_10C4296  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 24h  +
mov eax offset byte_10D4E75 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScg_17  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
jz loc_10830FE  +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1083110  +
mov eax [esi+1B8h] +
mov [edi] eax +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 4  +
mov eax offset dword_10E6DD0 +
call sub_1001F95  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
mov ebx [ebp+8] +
push edi  +
mov ecx ebx +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewScmous  +
mov ecx ebx +
mov [ebp-4] edi +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [esi+22Ch] 2 +
jnz loc_108322D  +
cmp [esi+144h] edi +
jnz loc_10831E6  +
mov esi 8000FFFFh +
push esi  +
mov ecx ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108322D  +
cmp byte ptr [eax+19h] 2 +
jb loc_108322D  +
push esi  +
push offset dword_100C4B0  +
push 52h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_108322D  +
lea ecx [esi-44h] +
call sub_101D08C  +
cmp eax edi +
jnz loc_108321C  +
mov esi 8000FFFFh +
push esi  +
mov ecx ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108322D  +
cmp byte ptr [eax+19h] 2 +
jb loc_108322D  +
push esi  +
push offset dword_100C4B0  +
push 53h  +
jmp loc_10831D9  +
***
mov ecx [esi+144h] +
push 21h  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10BA22B  +
mov eax ebx +
call sub_1001FCF  +
retn 0Ch  +
***
push 30h  +
mov eax offset byte_10D5601 +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10832A7  +
cmp byte ptr [eax+19h] 5 +
jb loc_10832A7  +
push offset dword_100C4B0  +
push 78h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push 0  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewSctogg  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea esi [edi-44h] +
mov ecx esi +
call sub_101D08C  +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108332B  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108335E  +
mov ecx [ebp-14h] +
call sub_10A4B16  +
mov eax [edi+218h] +
shr eax 1Fh +
not al  +
and al bl +
movzx eax al +
push eax  +
mov ecx esi +
call sub_107E2FD  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
mov [esi+1D5h] bl +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
xor edi edi +
inc edi  +
mov [ebp-4] edi +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108340F  +
cmp byte ptr [eax+19h] 5 +
jb loc_108340F  +
push offset dword_100C4B0  +
push 7Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aCamcviewScupon  +
mov [ebp-10h] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+8] +
push 80004005h  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [esi+174h] +
test ecx ecx +
jz loc_108347D  +
call sub_100C573  +
mov ecx [esi+174h] +
push eax  +
call sub_100C803  +
mov edi eax +
test edi edi +
jz loc_108347D  +
mov ecx [esi+174h] +
push edi  +
call sub_1027213  +
mov ecx [esi+174h] +
push edi  +
call sub_107ED38  +
mov ecx [ebp+8] +
push 0  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov eax [ecx+1E0h] +
test eax eax +
jz loc_10834E2  +
mov ecx [ecx+174h] +
push 4  +
push 0  +
push eax  +
call sub_107ECED  +
retn   +
***
mov ecx [ecx+178h] +
push 0  +
call sub_1098E2A  +
retn   +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewOnupda  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea edx [ebp-0Dh] +
push edx  +
lea edx [ebp-18h] +
push edx  +
lea edx [ebp-14h] +
push edx  +
lea ecx [edi+44h] +
mov eax [ecx] +
lea edx [ebp-38h] +
push edx  +
mov [ebp-14h] ebx +
mov [ebp-18h] ebx +
mov [ebp-0Dh] bl +
call dword ptr [eax+2Ch]  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10835CC  +
mov edi [edi+0D8h] +
push 8000FFFFh  +
push edi  +
push dword ptr [ebp-14h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10835CC  +
push dword ptr [ebp-18h]  +
movzx ecx byte ptr [ebp-0Dh] +
mov eax [edi] +
push ecx  +
push dword ptr [ebp-14h]  +
push edi  +
call dword ptr [eax+100h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
push 24h  +
mov eax offset dword_10D9B44 +
call sub_1001F95  +
mov ebx ecx +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewOnsnap  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [ebx+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov edi 8000FFFFh +
push edi  +
push eax  +
mov [ebp-10h] eax +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10836DF  +
mov ebx [ebx+0D8h] +
push edi  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10836DF  +
push dword ptr [ebp-10h]  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+0F8h]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_100C4D0  +
mov eax [ebp+8] +
mov edi [ebp+10h] +
mov [ebp-7F8h] eax +
mov eax [ebp+0Ch] +
mov [ebp-814h] eax +
mov eax [ebp+14h] +
mov [ebp-7FCh] eax +
mov eax [ebp+18h] +
xor ebx ebx +
mov esi ecx +
push ebx  +
lea ecx [ebp-810h] +
mov [ebp-818h] eax +
mov [ebp-800h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewScgete  +
lea ecx [ebp-810h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [ebp-7F0h] +
call ??0CString@@QAE@XZ  +
push 3423h  +
lea eax [ebp-7F0h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_101220E  +
lea ecx [ebp-7ECh] +
call ??0CString@@QAE@XZ  +
push 3424h  +
lea eax [ebp-7ECh] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_101220E  +
lea eax [ebp-7ECh] +
push eax  +
lea ecx [ebp-7F0h] +
call ??YCString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-7ECh] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
push offset asc_1083A24  +
lea ecx [ebp-7ECh] +
call ??0CString@@QAE@PBD@Z  +
lea eax [ebp-7ECh] +
push eax  +
lea ecx [ebp-7F0h] +
mov byte ptr [ebp-4] 4 +
call ??YCString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-7ECh] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
push 8000FFFFh  +
push dword ptr [esi+178h]  +
lea eax [ebp-828h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-810h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-828h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-810h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108388E  +
mov ecx [ebp-7F8h] +
lea eax [ebp-810h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-800h] 1 +
jmp loc_10839EE  +
mov eax [esi+178h] +
mov ecx [eax+4Ch] +
push 2  +
push 0FFFFFFFFh  +
call sub_107E863  +
push ebx  +
cmp eax 0FFFFFFFFh +
setnz al  +
mov [ebp-7ECh] al +
push dword ptr [ebp-7ECh]  +
lea ecx [ebp-7E8h] +
push dword ptr [ebp-7F0h]  +
push 800006h  +
push ebx  +
push offset aTxt  +
push ebx  +
call sub_10C18E0  +
lea ecx [ebp-7E8h] +
mov byte ptr [ebp-4] 6 +
call sub_10ABFE9  +
cmp eax 2 +
jnz loc_10838FF  +
mov ecx [ebp-7F8h] +
xor esi esi +
inc esi  +
push esi  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov [ebp-800h] esi +
jmp loc_10839DF  +
lea ecx [ebp-7F1h] +
call sub_102BBF1  +
mov byte ptr [ebp-4] 7 +
call sub_10067E8  +
push 180h  +
push ebx  +
push ebx  +
push dword ptr [eax+20h]  +
call ds:RedrawWindow  +
lea eax [ebp-7ECh] +
push eax  +
lea ecx [ebp-7E8h] +
call ?GetPathName@CFileDialog@@QBE?AVCString@@XZ  +
mov ecx [ebp-814h] +
push eax  +
mov byte ptr [ebp-4] 8 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-7ECh] +
mov byte ptr [ebp-4] 7 +
call ??1CString@@QAE@XZ  +
mov al [ebp-18h] +
mov ecx [ebp-818h] +
and al 1 +
mov [ecx] al +
mov eax [ebp-770h] +
dec eax  +
jz loc_10839A8  +
dec eax  +
jz loc_108399E  +
dec eax  +
jz loc_1083990  +
dec eax  +
jz loc_1083986  +
push 8000FFFFh  +
lea ecx [ebp-810h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10839B3  +
mov eax [ebp-7FCh] +
mov [eax] bl +
jmp loc_1083999  +
mov eax [ebp-7FCh] +
mov byte ptr [eax] 1 +
mov byte ptr [edi] 1 +
jmp loc_10839B3  +
mov eax [ebp-7FCh] +
mov [eax] bl +
jmp loc_10839B1  +
mov eax [ebp-7FCh] +
mov byte ptr [eax] 1 +
mov [edi] bl +
mov ecx [ebp-7F8h] +
lea eax [ebp-810h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-7F1h] +
mov dword ptr [ebp-800h] 1 +
mov byte ptr [ebp-4] 6 +
call sub_1020056  +
lea ecx [ebp-7E8h] +
mov byte ptr [ebp-4] 2 +
call sub_10C1811  +
lea ecx [ebp-7F0h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-810h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-7F8h] +
call sub_100C50D  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push edi  +
mov edi ecx +
jz loc_1083A9C  +
push esi  +
push offset loc_107F3D2  +
lea esi [edi-4] +
push dword ptr [esi]  +
push 8  +
push edi  +
call sub_100C964  +
test [ebp+arg_0] 1 +
jz loc_1083A97  +
push esi  +
call sub_100F30B  +
pop ecx  +
mov eax esi +
pop esi  +
jmp loc_1083AB0  +
call ??1CString@@QAE@XZ  +
test [ebp+arg_0] 1 +
jz loc_1083AAE  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
call sub_100C4D0  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewWrite2  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1083B36  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov al bl +
lea esp [ebp-44h] +
call sub_100C50D  +
retn 0Ch  +
cmp [ebp+10h] ebx +
jz loc_1083B57  +
cmp edi ebx +
jz loc_1083BA3  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1083B44  +
sub eax edx +
sar eax 1 +
lea esi [eax+eax] +
jmp loc_1083B91  +
cmp edi ebx +
jz loc_1083BA3  +
push edi  +
call ds:lstrlenW  +
lea esi [eax+eax+2] +
mov eax esi +
call sub_1027CCC  +
mov eax esp +
push esi  +
push edi  +
push eax  +
call ?AfxW2AHelper@@YGPADPADPBGH@Z  +
mov edi eax +
cmp edi ebx +
jz loc_1083BA3  +
push edi  +
call ds:_mbslen  +
push eax  +
push edi  +
call ds:_mbsnbcnt  +
add esp 0Ch +
mov esi eax +
push ebx  +
lea eax [ebp-14h] +
push eax  +
push esi  +
push edi  +
push dword ptr [ebp+8]  +
call ds:WriteFile  +
jmp loc_1083BA5  +
xor esi esi +
cmp [ebp-14h] esi +
setz bl  +
jmp loc_1083B1C  +
***
push 2Ch  +
mov eax offset byte_10D5805 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push 0  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewSccut  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call sub_100ABA9  +
mov edi eax +
push 8000FFFFh  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1083C6F  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1083CAE  +
mov eax [esi-24h] +
mov [edi+160h] eax +
mov edi [ebp+0Ch] +
test edi edi +
jz loc_1083C91  +
mov ecx [esi+130h] +
push 4  +
push 4  +
push edi  +
call sub_107ECED  +
jmp loc_1083C9D  +
mov ecx [esi+134h] +
push ebx  +
call sub_1098E2A  +
mov ecx [ebp+8] +
push 0  +
mov [esi+19Ch] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 2Ch  +
mov eax offset byte_10D5805 +
call sub_1001F95  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push edi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewScpast  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [esi+19Ch] edi +
jnz loc_1083D50  +
mov ecx [esi+134h] +
push edi  +
call sub_1098E2A  +
call sub_100ABA9  +
mov esi eax +
push 8000FFFFh  +
push esi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
jz loc_1083D9D  +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1083DAA  +
push edi  +
mov [esi+160h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-18h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScgetf  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp-18h] +
call sub_101D08C  +
mov edi 80004005h +
push edi  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-4Ch] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-4Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1083F7F  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108401B  +
mov eax [ebp-14h] +
push dword ptr [eax+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push edi  +
push eax  +
mov [ebp-1Ch] eax +
lea eax [ebp-4Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-4Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108400E  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-3Ch] +
call sub_107FFA7  +
mov ecx [ebp-1Ch] +
lea eax [ebp-3Ch] +
push eax  +
call sub_107E5D9  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-18h] +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-3Ch] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
call sub_107F911  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-4Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov [ebp-18h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScse_1  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp-18h] +
call sub_101D08C  +
mov edi 80004005h +
push edi  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-4Ch] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-4Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10840F9  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10841A6  +
mov eax [ebp-14h] +
push dword ptr [eax+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push edi  +
push eax  +
mov [ebp-1Ch] eax +
lea eax [ebp-4Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-4Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1084199  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-3Ch] +
call sub_107FFA7  +
mov ecx [ebp-1Ch] +
lea eax [ebp-3Ch] +
push eax  +
call sub_107E5D9  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-18h] +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-3Ch] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
call sub_107FA27  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-4Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1084199  +
mov ecx [ebp-14h] +
push ebx  +
lea eax [ebp-3Ch] +
push eax  +
call sub_1011AA9  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScg_10  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 0  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_1083EF7  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_1084274  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108427A  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScpu_3  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 0  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_1084071  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_108433E  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1084344  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScg_11  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 2  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_1083EF7  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_1084406  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108440C  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScpu_4  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 2  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_1084071  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_10844D0  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10844D6  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScg_12  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push ebx  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_1083EF7  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_108459B  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10845A1  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScpu_5  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push ebx  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_1084071  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_108465F  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1084665  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScg_13  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 3  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_1083EF7  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_1084724  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108472A  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScpu_6  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 3  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_1084071  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_10847F2  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10847F8  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_107FB2F  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScge_7  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
push 80070057h  +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10848DB  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1084962  +
and dword ptr [esi] 0 +
cmp dword ptr [edi+270h] 2 +
jnz loc_108494A  +
lea eax [edi+188h] +
cmp dword ptr [eax] 0 +
jz loc_108494A  +
mov eax [eax] +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+114h]  +
push eax  +
lea ecx [ebp-10h] +
call sub_107FDEA  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jnz loc_108493F  +
push 80004002h  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-10h] +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
test eax eax +
jz loc_1084965  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1084965  +
and dword ptr [ebp-10h] 0 +
mov [esi] eax +
lea eax [ebp-24h] +
jmp loc_1084920  +
push 3465h  +
lea ecx [ebp-24h] +
call ds:?FromMMC@SC@mmcerror@@QAEAAV12@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor edi edi +
inc edi  +
push offset aCamcviewGetsel  +
mov [ebp-4] ebx +
mov [ebp-10h] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [esi+178h]  +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
push eax  +
mov [ebp-4] edi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
cmp eax ebx +
jge loc_1084A69  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1084B01  +
cmp byte ptr [ecx+19h] 3 +
jb loc_1084B01  +
push eax  +
push offset dword_100C4B0  +
push 93h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1084B01  +
cmp [esi+270h] ebx +
jnz loc_1084B01  +
mov eax [esi+178h] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
cmp eax ebx +
jz loc_1084ABD  +
cmp eax edi +
jle loc_1084AA1  +
push 3479h  +
call ds:?GetStringModule@@YGPAUHINSTANCE__@@XZ  +
mov ecx [ebp+0Ch] +
push eax  +
call sub_10329CF  +
jmp loc_1084B01  +
mov eax [esi+178h] +
mov esi [eax+4Ch] +
push 2  +
pop edi  +
push edi  +
push 0FFFFFFFFh  +
mov ecx esi +
call sub_107E863  +
inc eax  +
mov [ebp-14h] eax +
jnz loc_1084AC7  +
mov ecx [ebp+0Ch] +
call sub_100A6F0  +
jmp loc_1084B01  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_107E887  +
push ebx  +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z  +
push dword ptr [eax]  +
mov ecx [ebp+0Ch] +
mov [ebp-4] edi +
call sub_100AE0E  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-14h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov eax [ecx] +
xor ebx ebx +
cmp eax ebx +
jnz loc_1084B85  +
cmp [ebp+8] ebx +
jnz loc_1084BDF  +
mov al 1 +
jmp loc_1084BE1  +
mov edi [ebp+8] +
cmp edi ebx +
jz loc_1084BDF  +
mov [ebp-10h] ebx +
mov [ebp-4] ebx +
mov [ebp-14h] ebx +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
mov esi offset dword_1048258 +
push esi  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx]  +
mov eax [edi] +
lea ecx [ebp-14h] +
push ecx  +
push esi  +
push edi  +
call dword ptr [eax]  +
mov eax [ebp-14h] +
cmp [ebp-10h] eax +
mov [ebp-4] bl +
setz byte ptr [ebp+0Bh]  +
cmp eax ebx +
jz loc_1084BC9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1084BDA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al [ebp+0Bh] +
jmp loc_1084BE1  +
xor al al +
call sub_1001FCF  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
push 6  +
push ds:off_1084C30  +
push offset dword_1084C20  +
call sub_102F6C1  +
mov dword ptr [esi] offset off_1084C1C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+11h] 0 +
jnz loc_1084C55  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1084C69  +
mov [ecx+4] eax +
jmp loc_1084C78  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_1084C76  +
mov [ecx+8] eax +
jmp loc_1084C78  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+39h] 0 +
jnz loc_1084CA3  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1084CB7  +
mov [ecx+4] eax +
jmp loc_1084CC5  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_1084CC2  +
mov [ecx] eax +
jmp loc_1084CC5  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+39h] 0 +
jnz loc_1084CEF  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_1084D03  +
mov [ecx+4] eax +
jmp loc_1084D12  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_1084D10  +
mov [ecx+8] eax +
jmp loc_1084D12  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jz loc_1084D36  +
mov [esi+0Ch] eax +
mov edi [ebp+arg_0] +
xor ebx ebx +
cmp edi ebx +
jnz loc_1084D59  +
mov eax [esi] +
cmp eax ebx +
jz loc_1084D4E  +
push eax  +
call sub_100F30B  +
pop ecx  +
mov [esi] ebx +
mov [esi+8] ebx +
mov [esi+4] ebx +
jmp loc_1084E6C  +
mov edx [esi] +
cmp edx ebx +
jnz loc_1084DA7  +
lea eax [ebp+arg_4] +
push eax  +
push 4  +
pop ecx  +
mov eax edi +
mul  ecx +
push edx  +
push eax  +
mov [ebp+arg_4] ebx +
call sub_101C6BF  +
test eax eax +
jl loc_1084E6C  +
push [ebp+arg_4]  +
call sub_100F31C  +
pop ecx  +
mov [esi] eax +
cmp eax ebx +
jz loc_1084E6C  +
mov ecx edi +
shl ecx 2 +
push ecx  +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
mov [esi+8] edi +
jmp loc_1084E69  +
mov ebx [esi+8] +
cmp edi ebx +
jg loc_1084DD4  +
mov ecx [esi+4] +
cmp edi ecx +
jle loc_1084E69  +
mov eax edi +
sub eax ecx +
shl eax 2 +
push eax  +
lea ecx [edx+ecx*4] +
push 0  +
push ecx  +
call memset  +
add esp 0Ch +
jmp loc_1084E69  +
mov eax [esi+0Ch] +
test eax eax +
jnz loc_1084DFC  +
mov eax [esi+4] +
cdq   +
and edx 7 +
add eax edx +
sar eax 3 +
cmp eax 4 +
jge loc_1084DF1  +
push 4  +
pop eax  +
jmp loc_1084DFC  +
mov ecx 400h +
cmp eax ecx +
jle loc_1084DFC  +
mov eax ecx +
add eax ebx +
cmp edi eax +
mov [ebp+arg_4] eax +
jl loc_1084E08  +
mov [ebp+arg_4] edi +
and [ebp+arg_0] 0 +
lea eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_4] +
push 4  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_101C6BF  +
test eax eax +
jl loc_1084E6C  +
push [ebp+arg_0]  +
call sub_100F31C  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_1084E6C  +
mov eax [esi+4] +
shl eax 2 +
push eax  +
push dword ptr [esi]  +
push ebx  +
call memcpy  +
mov ecx [esi+4] +
mov eax edi +
sub eax ecx +
shl eax 2 +
push eax  +
lea ecx [ebx+ecx*4] +
push 0  +
push ecx  +
call memset  +
push dword ptr [esi]  +
call sub_100F30B  +
mov eax [ebp+arg_4] +
add esp 1Ch +
mov [esi] ebx +
mov [esi+8] eax +
mov [esi+4] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call sub_100C5D1  +
mov ecx esi +
mov edi eax +
call sub_100C573  +
xor ecx ecx +
cmp edi eax +
setz cl  +
pop edi  +
pop esi  +
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea esi [ecx+248h] +
push 0  +
mov ecx esi +
call sub_100EB41  +
test al al +
jz loc_1084ED9  +
mov ecx esi +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push 1  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jge loc_1084ED9  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 4  +
***
lea eax [ecx+1F8h] +
cmp dword ptr [eax+78h] 0 +
mov eax [eax] +
setz dl  +
shr eax 4 +
and dl al +
xor eax eax +
inc eax  +
test dl al +
jnz loc_1084F13  +
cmp dword ptr [ecx+0C8h] 0 +
jg loc_1084F13  +
test byte ptr [ecx+2D0h] 40h +
jz locret_1084F15  +
xor eax eax +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_100D2CF  +
xor eax eax +
mov [ebp-4] eax +
mov [esi+4] al +
cmp [esi] eax +
jz loc_1084F65  +
mov ecx esi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+48h]  +
neg eax  +
sbb al al +
inc al  +
mov ecx esi +
mov [esi+4] al +
call sub_100A5CF  +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
cmp dword ptr [esi] 0 +
jz loc_1084F9E  +
call sub_100A5CF  +
movzx edx byte ptr [esi+4] +
mov ecx [eax] +
push edx  +
push eax  +
call dword ptr [ecx+4Ch]  +
mov esi [esi] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1084FAE  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-18h] edi +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScput_  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108503C  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_1085114  +
mov eax [edi+40h] +
test eax eax +
jnz loc_1085047  +
xor edi edi +
jmp loc_108504D  +
mov edi [eax+0E0h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108508E  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1085034  +
and dword ptr [ebp-14h] 0 +
mov eax [edi] +
lea ecx [ebp-14h] +
push ecx  +
push dword ptr [ebp+0Ch]  +
push edi  +
call dword ptr [eax+68h]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108507F  +
push edi  +
lea ecx [ebp-20h] +
call sub_1084F1B  +
mov ecx [ebp-18h] +
push 0  +
push dword ptr [ebp-14h]  +
add ecx 44h +
mov eax [ecx] +
lea edx [ebp-40h] +
push edx  +
mov byte ptr [ebp-4] 4 +
call dword ptr [eax+34h]  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call sub_1084F74  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScis  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
push 80070057h  +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10851F1  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1085234  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp+0Ch] +
call sub_100D2CF  +
push dword ptr [esi+0C4h]  +
mov ecx eax +
mov byte ptr [ebp-4] 3 +
call sub_1084B68  +
movzx eax al +
neg eax  +
sbb eax eax +
mov [edi] ax +
mov eax [ebp+0Ch] +
mov [ebp-4] bl +
test eax eax +
jz loc_1085227  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10852B3  +
cmp byte ptr [eax+19h] 5 +
jb loc_10852B3  +
push offset dword_100C4B0  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax [esi+40h] +
push ebx  +
mov ebx [ebp+8] +
shr ebx 1 +
push edi  +
and bl 1 +
lea edi [esi+1F8h] +
cmp dword ptr [edi+78h] 0 +
mov ecx [edi] +
mov [ebp+8] eax +
setz al  +
shr ecx 4 +
and al cl +
and al 1 +
mov [ebp-4] bl +
cmp al bl +
jz loc_1085338  +
push dword ptr [ebp-4]  +
mov ecx edi +
push 10h  +
call sub_1023016  +
mov eax [esi+178h] +
push dword ptr [eax+4Ch]  +
mov ecx [ebp+8] +
call ?RemoveView@CDocument@@QAEXPAVCView@@@Z  +
mov eax [esi+178h] +
mov ecx [eax] +
movzx edx bl +
push edx  +
push eax  +
call dword ptr [ecx+74h]  +
mov eax [esi+178h] +
push dword ptr [eax+4Ch]  +
mov ecx [ebp+8] +
call ?AddView@CDocument@@QAEXPAVCView@@@Z  +
mov eax [esi+178h] +
mov eax [eax+4Ch] +
test eax eax +
jz loc_1085330  +
mov eax [eax+20h] +
jmp loc_1085332  +
xor eax eax +
mov [esi+234h] eax +
test byte ptr [esi+2D0h] 8 +
pop edi  +
pop ebx  +
jnz loc_1085360  +
add esi 178h +
mov eax [esi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
cmp eax 4 +
jnz loc_1085360  +
mov esi [esi] +
mov eax [esi] +
push 1  +
push esi  +
call dword ptr [eax+18h]  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1085396  +
cmp byte ptr [eax+19h] 5 +
jb loc_1085396  +
push offset dword_100C4B0  +
push 34h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [esi+130h] +
call sub_100C5D1  +
test eax eax +
jnz loc_10853A9  +
xor eax eax +
jmp loc_10853C8  +
push dword ptr [ebp+8]  +
mov ecx [esi+130h] +
push eax  +
call sub_10C3C79  +
test eax eax +
jz loc_10853A5  +
mov ecx [esi+130h] +
push eax  +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
pop esi  +
pop ebp  +
retn 4  +
***
cmp eax offset lpDst +
jz loc_10853FB  +
cmp byte ptr [eax+19h] 5 +
jb loc_10853FB  +
push offset dword_100C4B0  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
add esi 174h +
mov ecx [esi] +
call sub_100C5D1  +
test eax eax +
jnz loc_108540E  +
pop esi  +
retn   +
***
mov ecx [esi] +
push eax  +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
pop esi  +
retn   +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewOnvirt  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
push 80070057h  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1085516  +
mov ecx [esi+14h] +
mov edi [esi+10h] +
mov ebx [esi+18h] +
mov esi [esi+0Ch] +
shr ecx 1 +
shr ebx 1 +
mov edx edi +
and cl 1 +
sub edx esi +
and bl 1 +
mov [ebp+0Bh] cl +
inc edx  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10854DE  +
cmp byte ptr [eax+19h] 5 +
jb loc_10854DE  +
mov ecx offset aDe +
test bl bl +
jnz loc_10854C5  +
mov ecx offset asc_106BDF8 +
push edx  +
push ecx  +
push edi  +
push esi  +
push offset dword_100C4B0  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_107E49F  +
mov cl [ebp+0Bh] +
cmp bl cl +
jz loc_108551F  +
mov ecx [ebp-10h] +
lea eax [ebp-30h] +
push eax  +
call sub_1082131  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108551F  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101D08C  +
mov ecx [esi+174h] +
test ecx ecx +
jz loc_1085620  +
push ebx  +
push edi  +
call sub_100C573  +
mov ecx [esi+174h] +
mov ebx eax +
push ebx  +
call sub_10249C3  +
mov ecx [esi+174h] +
push 2  +
push ebx  +
call sub_100E959  +
mov ecx [esi+174h] +
push ebx  +
call sub_100C799  +
mov edi eax +
test edi edi +
jz loc_108561E  +
mov ecx [esi+174h] +
push edi  +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
cmp eax [ebp+arg_0] +
jz loc_1085600  +
mov ecx [esi+174h] +
push 1  +
push edi  +
call sub_1023DC6  +
mov edi eax +
test edi edi +
jnz loc_10855DB  +
test edi edi +
jz loc_108561E  +
mov ecx [esi+174h] +
push 2  +
push ebx  +
call sub_100E959  +
mov ecx [esi+174h] +
push edi  +
call sub_1027213  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
push 28h  +
mov eax offset byte_10DC293 +
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCdeferredres_1  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi 8000FFFFh +
push edi  +
push dword ptr [esi+8]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10856AB  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108573B  +
mov eax [ebp-14h] +
push dword ptr [eax+8]  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push edi  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108572E  +
push 0  +
push offset off_10F6CCC  +
push offset off_10F6C88  +
push 0  +
push dword ptr [ebp-14h]  +
call __RTDynamicCast  +
add esp 14h +
test eax eax +
jz loc_108572E  +
lea ecx [ebp-34h] +
push ecx  +
mov ecx eax +
call sub_108282B  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScg_16  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+0D8h] +
push 8000FFFFh  +
push dword ptr [esi+178h]  +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1085832  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108591B  +
mov eax [ebp+0Ch] +
lea edi [esi+1F8h] +
mov ecx [edi] +
xor dl dl +
cmp dword ptr [edi+78h] 0 +
mov [ebp-18h] eax +
setz al  +
shr ecx 4 +
and al cl +
test al bl +
jnz loc_10858D8  +
mov eax [esi+178h] +
and dword ptr [ebp-10h] 0 +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+4Ch]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108590E  +
push dword ptr [ebp-10h]  +
call sub_105572A  +
push 80070057h  +
push dword ptr [ebp-10h]  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108590E  +
mov eax [ebp-10h] +
cmp dword ptr [eax+0Ch] 3951589h +
setz dl  +
push dword ptr [ebp+14h]  +
mov eax [esi+0D8h] +
mov edi [eax] +
push dword ptr [ebp+10h]  +
mov [ebp+0Ch] eax +
push dword ptr [ebp-18h]  +
movzx eax dl +
lea ecx [esi+44h] +
push eax  +
mov eax [ecx] +
add edi 0DCh +
call dword ptr [eax+78h]  +
push eax  +
push dword ptr [ebp+0Ch]  +
call dword ptr [edi]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScgetn  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+0D8h] +
push 8000FFFFh  +
push dword ptr [esi+178h]  +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10859F2  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1085AD8  +
mov eax [ebp+0Ch] +
lea edi [esi+1F8h] +
mov ecx [edi] +
xor dl dl +
cmp dword ptr [edi+78h] 0 +
mov [ebp-18h] eax +
setz al  +
shr ecx 4 +
and al cl +
test al bl +
jnz loc_1085A98  +
mov eax [esi+178h] +
and dword ptr [ebp-10h] 0 +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+4Ch]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1085ACB  +
push dword ptr [ebp-10h]  +
call sub_105572A  +
push 80070057h  +
push dword ptr [ebp-10h]  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1085ACB  +
mov eax [ebp-10h] +
cmp dword ptr [eax+0Ch] 3951589h +
setz dl  +
mov eax [esi+0D8h] +
mov edi [eax] +
push dword ptr [ebp+10h]  +
mov [ebp+0Ch] eax +
push dword ptr [ebp-18h]  +
movzx eax dl +
lea ecx [esi+44h] +
push eax  +
mov eax [ecx] +
add edi 0E0h +
call dword ptr [eax+78h]  +
push eax  +
push dword ptr [ebp+0Ch]  +
call dword ptr [edi]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
and dword ptr [ebp-454h] 0 +
mov [ebp-430h] eax +
mov eax [ebp+0Ch] +
mov edi ecx +
push 0  +
lea ecx [ebp-464h] +
mov [ebp-448h] eax +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcviewScwrit  +
lea ecx [ebp-464h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [edi+178h] +
mov ebx [eax+94h] +
mov [ebp-434h] ebx +
test ebx ebx +
jg loc_1085BB7  +
push 8000FFFFh  +
lea ecx [ebp-464h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp-430h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-454h] esi +
jmp loc_10860F2  +
and dword ptr [ebp-428h] 0 +
lea eax [ebp-428h] +
push eax  +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-47Ch] +
push dword ptr [ebp+10h]  +
mov ecx edi +
push dword ptr [ebp-448h]  +
push eax  +
call sub_107F204  +
push eax  +
lea ecx [ebp-464h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-47Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-464h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1085C25  +
mov ecx [ebp-430h] +
lea eax [ebp-464h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1085BAC  +
push offset asc_108615C  +
lea ecx [ebp-450h] +
call ??0CString@@QAE@PBG@Z  +
cmp byte ptr [ebp+14h] 0 +
mov byte ptr [ebp-4] 3 +
mov dword ptr [ebp-44Ch] offset dword_1086158 +
jnz loc_1085C53  +
mov dword ptr [ebp-44Ch] offset dword_1086154 +
mov eax [edi+178h] +
mov ecx [eax] +
and dword ptr [ebp-440h] 0 +
and dword ptr [ebp-438h] 0 +
push eax  +
mov [ebp-43Ch] esi +
call dword ptr [ecx+14h]  +
cmp eax esi +
jz loc_1085C8C  +
mov eax [edi+178h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
cmp eax 4 +
jnz loc_1085F0A  +
xor ecx ecx +
push 8  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
mov [ebp-43Ch] ebx +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call sub_100F31C  +
pop ecx  +
mov [ebp-468h] eax +
mov byte ptr [ebp-4] 4 +
test eax eax +
jz loc_1085CE3  +
push offset loc_107F3D2  +
push offset loc_107F3BF  +
push ebx  +
lea esi [eax+4] +
push 8  +
push esi  +
mov [eax] ebx +
call sub_100C8DF  +
mov [ebp-42Ch] esi +
jmp loc_1085CEA  +
and dword ptr [ebp-42Ch] 0 +
mov eax [ebp-42Ch] +
mov byte ptr [ebp-4] 3 +
mov [ebp-440h] eax +
test eax eax +
jnz loc_1085D14  +
push 8007000Eh  +
lea ecx [ebp-464h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_108613C  +
xor ecx ecx +
push 4  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_100F31C  +
pop ecx  +
mov [ebp-438h] eax +
test eax eax +
jz loc_1085CFE  +
mov eax [edi+178h] +
mov ecx [eax+4Ch] +
call sub_100E4E1  +
mov esi eax +
push 8000FFFFh  +
push esi  +
lea eax [ebp-47Ch] +
push eax  +
mov [ebp-444h] esi +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-464h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-47Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-464h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108613C  +
test esi esi +
jnz loc_1085D9A  +
xor eax eax +
jmp loc_1085D9D  +
mov eax [esi+20h] +
push dword ptr [ebp-438h]  +
push ebx  +
push 1211h  +
push eax  +
call ds:SendMessageW  +
test eax eax +
jz loc_108613C  +
and dword ptr [ebp-424h] 0 +
test ebx ebx +
jle loc_1085E6C  +
mov ebx [ebp-42Ch] +
jmp loc_1085DD5  +
mov esi [ebp-444h] +
xor eax eax +
push 40Eh  +
push eax  +
mov [ebp-420h] ax +
lea eax [ebp-41Eh] +
push eax  +
call memset  +
lea eax [ebp-420h] +
add esp 0Ch +
mov [ebp-4A4h] eax +
lea eax [ebp-4ACh] +
push eax  +
push dword ptr [ebp-424h]  +
mov ecx esi +
mov dword ptr [ebp-4ACh] 0Ah +
mov dword ptr [ebp-49Ch] 208h +
call sub_1055747  +
test eax eax +
jz loc_108613C  +
push dword ptr [ebp-4A4h]  +
mov esi [ebp-494h] +
mov ecx ebx +
call ??4CString@@QAEABV0@PBG@Z  +
shl esi 0Fh +
sar esi 1Fh +
inc dword ptr [ebp-424h]  +
mov eax [ebp-424h] +
mov [ebx+4] esi +
add ebx 8 +
cmp eax [ebp-434h] +
jl loc_1085DCF  +
mov ebx [ebp-434h] +
and dword ptr [ebp-424h] 0 +
test ebx ebx +
jle loc_1085EE7  +
mov ecx [ebp-424h] +
mov eax [ebp-438h] +
mov eax [eax+ecx*4] +
mov ecx [ebp-42Ch] +
lea eax [ecx+eax*8] +
cmp dword ptr [eax+4] 0 +
jnz loc_1085ED9  +
movzx esi byte ptr [ebp+10h] +
mov eax [eax] +
push esi  +
push eax  +
push dword ptr [ebp-428h]  +
mov ecx edi +
call sub_1083ABA  +
test al al +
jz loc_108611F  +
lea eax [ebx-1] +
cmp [ebp-424h] eax +
jge loc_1085ED9  +
push esi  +
push dword ptr [ebp-44Ch]  +
mov ecx edi +
push dword ptr [ebp-428h]  +
call sub_1083ABA  +
test al al +
jz loc_108611F  +
inc dword ptr [ebp-424h]  +
cmp [ebp-424h] ebx +
jl loc_1085E77  +
movzx eax byte ptr [ebp+10h] +
push eax  +
push dword ptr [ebp-450h]  +
mov ecx edi +
push dword ptr [ebp-428h]  +
call sub_1083ABA  +
test al al +
jz loc_108611F  +
xor esi esi +
inc esi  +
lea ecx [ebp-424h] +
call ??0CString@@QAE@XZ  +
mov eax [edi+178h] +
mov ebx [eax+4Ch] +
and dword ptr [ebp-434h] 0 +
cmp byte ptr [ebp+18h] 0 +
mov byte ptr [ebp-4] 6 +
mov [ebp-468h] ebx +
jz loc_1085F3F  +
mov dword ptr [ebp-434h] 2 +
push dword ptr [ebp-434h]  +
mov ecx ebx +
push 0FFFFFFFFh  +
call sub_107E863  +
mov [ebp-42Ch] eax +
cmp eax 0FFFFFFFFh +
jz loc_1086089  +
xor esi esi +
cmp [ebp-43Ch] esi +
jle loc_1086044  +
mov ecx [ebp-440h] +
test ecx ecx +
jz loc_1085FB6  +
mov eax [ebp-438h] +
mov eax [eax+esi*4] +
cmp dword ptr [ecx+eax*8+4] 0 +
jnz loc_1086037  +
push eax  +
push dword ptr [ebp-42Ch]  +
lea eax [ebp-444h] +
push eax  +
mov ecx ebx +
call ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z  +
push eax  +
lea ecx [ebp-424h] +
mov byte ptr [ebp-4] 7 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-444h] +
jmp loc_1085FE1  +
push esi  +
push dword ptr [ebp-42Ch]  +
lea eax [ebp-46Ch] +
push eax  +
mov ecx ebx +
call ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z  +
push eax  +
lea ecx [ebp-424h] +
mov byte ptr [ebp-4] 8 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-46Ch] +
mov byte ptr [ebp-4] 6 +
call ??1CString@@QAE@XZ  +
movzx ebx byte ptr [ebp+10h] +
push ebx  +
push dword ptr [ebp-424h]  +
mov ecx edi +
push dword ptr [ebp-428h]  +
call sub_1083ABA  +
test al al +
jz loc_1086110  +
mov eax [ebp-43Ch] +
dec eax  +
cmp esi eax +
jge loc_1086031  +
push ebx  +
push dword ptr [ebp-44Ch]  +
mov ecx edi +
push dword ptr [ebp-428h]  +
call sub_1083ABA  +
test al al +
jz loc_1086110  +
mov ebx [ebp-468h] +
inc esi  +
cmp esi [ebp-43Ch] +
jl loc_1085F6B  +
movzx eax byte ptr [ebp+10h] +
push eax  +
push dword ptr [ebp-450h]  +
mov ecx edi +
push dword ptr [ebp-428h]  +
call sub_1083ABA  +
test al al +
jz loc_1086110  +
push dword ptr [ebp-434h]  +
mov ecx ebx +
push dword ptr [ebp-42Ch]  +
call sub_107E863  +
mov [ebp-42Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1085F5D  +
xor esi esi +
inc esi  +
lea ecx [ebp-424h] +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
mov ecx [ebp-440h] +
test ecx ecx +
jz loc_10860A9  +
push 3  +
call sub_1083A69  +
cmp dword ptr [ebp-438h] 0 +
jz loc_10860BE  +
push dword ptr [ebp-438h]  +
call sub_100F30B  +
pop ecx  +
push dword ptr [ebp-428h]  +
call ds:CloseHandle  +
mov ecx [ebp-430h] +
lea eax [ebp-464h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-450h] +
mov [ebp-454h] esi +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-464h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-430h] +
call sub_100C50D  +
retn 18h  +
lea ecx [ebp-424h] +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
cmp byte ptr [ebp+1Ch] 0 +
jz loc_108613C  +
mov eax [ebp-448h] +
push dword ptr [eax]  +
mov ecx edi +
push dword ptr [ebp-428h]  +
push 2  +
call sub_107F195  +
mov eax [ebp-448h] +
push dword ptr [eax]  +
call ds:DeleteFileW  +
xor esi esi +
inc esi  +
jmp loc_1086098  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
mov ebx ecx +
mov eax [ebx+178h] +
mov eax [eax+4Ch] +
push esi  +
push edi  +
test eax eax +
jz loc_10861CF  +
mov eax [eax+20h] +
mov [ebp+hWnd] eax +
jmp loc_10861D3  +
and [ebp+hWnd] 0 +
movzx eax [ebp+arg_4] +
mov esi ds:SendMessageW +
push eax  +
push 0FFFFFFFFh  +
push 100Ch  +
push [ebp+hWnd]  +
call esi  +
mov edi eax +
test edi edi +
jl loc_1086242  +
lea eax [ebx+1F8h] +
cmp dword ptr [eax+78h] 0 +
mov eax [eax] +
setz cl  +
shr eax 4 +
and cl al +
test cl 1 +
jz loc_1086210  +
mov eax [ebp+arg_0] +
mov [eax] edi +
jmp loc_1086242  +
push 3Ch  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Bh  +
push [ebp+hWnd]  +
mov [ebp+var_3C] edi +
mov [ebp+lParam] 4 +
call esi  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_20] +
mov [eax] ecx +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 2  +
push [ebp+arg_0]  +
call sub_10861AD  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-20h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCamcviewScsend  +
mov [ebp-4] ebx +
mov [ebp-20h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-14h] esi +
mov esi [edi+0D8h] +
mov [ebp-10h] ebx +
cmp esi ebx +
jnz loc_10862F3  +
mov ecx [ebp+8] +
mov esi 8000FFFFh +
push esi  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1086411  +
cmp byte ptr [eax+19h] 2 +
jb loc_1086411  +
push esi  +
push offset dword_100C4B0  +
push 88h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_1086411  +
lea ebx [edi+44h] +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+78h]  +
mov [ebp-18h] eax +
test eax eax +
jnz loc_108633A  +
mov ecx [ebp+8] +
mov esi 8000FFFFh +
push esi  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1086411  +
cmp byte ptr [eax+19h] 2 +
jb loc_1086411  +
push esi  +
push offset dword_100C4B0  +
push 89h  +
jmp loc_10862E3  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+70h]  +
cmp eax 1 +
jnz loc_10863F3  +
mov ecx edi +
call sub_100C52C  +
test al al +
jz loc_1086372  +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
call sub_1086250  +
cmp eax 0FFFFFFFFh +
jz loc_10863F3  +
and dword ptr [ebp-14h] 0 +
jmp loc_10863F3  +
push dword ptr [ebp-18h]  +
mov eax [esi] +
xor ebx ebx +
mov ecx esi +
mov [ebp-1Ch] ebx +
call dword ptr [eax+58h]  +
test eax eax +
jz loc_10863F3  +
mov eax [esi] +
lea ecx [ebp-1Ch] +
push ecx  +
lea ecx [ebp-24h] +
push ecx  +
push 4  +
push dword ptr [ebp-18h]  +
push esi  +
call dword ptr [eax+6Ch]  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
cmp eax ebx +
jge loc_10863D9  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1086411  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1086411  +
push eax  +
push offset dword_100C4B0  +
push 8Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
jmp loc_10862E9  +
cmp [ebp-1Ch] ebx +
jz loc_10863F3  +
xor eax eax +
cmp dword ptr [edi+270h] 2 +
mov [ebp-14h] ebx +
setz al  +
add eax 0FFFFFFFCh +
mov [ebp-10h] eax +
push dword ptr [ebp-10h]  +
mov eax [esi] +
push dword ptr [ebp-14h]  +
push 901Eh  +
push dword ptr [ebp-18h]  +
push esi  +
call dword ptr [eax+78h]  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+178h] +
xor ebx ebx +
push edi  +
xor edi edi +
inc ebx  +
mov [ebp-4] edi +
cmp eax edi +
jz loc_10864B8  +
mov eax [eax+4Ch] +
cmp eax edi +
jz loc_108649C  +
mov edi [eax+20h] +
call ds:GetFocus  +
cmp edi eax +
jnz loc_10864B8  +
lea eax [ebp-4] +
push eax  +
mov ecx esi +
call sub_1086250  +
cmp eax 0FFFFFFFFh +
jz loc_10864B8  +
xor ebx ebx +
mov edi [esi+0D8h] +
test edi edi +
jnz loc_10864C9  +
mov eax 80004005h +
jmp loc_10864E3  +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
test eax eax +
jz loc_10864C2  +
push dword ptr [ebp-4]  +
mov ecx [edi] +
push ebx  +
push dword ptr [ebp+8]  +
push eax  +
push edi  +
call dword ptr [ecx+78h]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScup_2  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [edi+32Ch] +
mov [ebp-10h] eax +
push 8000FFFFh  +
test eax eax +
jnz loc_108654A  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108676D  +
mov eax [edi+40h] +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1086760  +
mov al [edi+238h] +
not al  +
test al bl +
jz loc_10865A9  +
mov eax [ebp-18h] +
mov eax [eax+10Ch] +
shr eax 3 +
not al  +
test al bl +
jz loc_10865A9  +
mov al bl +
jmp loc_10865AB  +
xor al al +
mov ecx [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_10BEB59  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10865E4  +
lea ecx [ebp-28h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov eax [edi+238h] +
shr eax 5 +
not al  +
test al bl +
jz loc_1086612  +
mov eax [ebp-18h] +
mov eax [eax+10Ch] +
shr eax 3 +
not al  +
test al bl +
jz loc_1086612  +
cmp byte ptr [edi+33Ch] 0 +
jnz loc_1086612  +
mov al bl +
jmp loc_1086614  +
xor al al +
mov ecx [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_1025313  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108664D  +
lea ecx [ebp-28h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp-10h] +
push ebx  +
lea eax [ebp-38h] +
push eax  +
call sub_10BEB33  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1086686  +
lea ecx [ebp-28h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
lea ecx [edi+44h] +
mov eax [ecx] +
call dword ptr [eax+74h]  +
mov ecx [ebp-10h] +
test eax eax +
setnle al  +
movzx eax al +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_1028275  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10866CF  +
lea ecx [ebp-28h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [edi+174h] +
call sub_1084E78  +
mov ecx [ebp-10h] +
neg eax  +
sbb eax eax +
inc eax  +
setnz al  +
movzx eax al +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_102829B  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108671E  +
lea ecx [ebp-28h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
push 8000FFFFh  +
push dword ptr [edi+310h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1086760  +
mov ecx [edi+310h] +
call sub_1018077  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-40h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScsetv  +
lea ecx [ebp-40h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [edi+1DFh] 0 +
jnz loc_1086829  +
mov ecx [ebp+8] +
lea eax [ebp-40h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1086927  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_107FAE7  +
mov eax [ebp-30h] +
cmp [ebp+14h] eax +
jge loc_108683F  +
mov [ebp+14h] eax +
mov esi [ebp+1Ch] +
cmp esi [ebp-28h] +
jle loc_108684A  +
mov esi [ebp-28h] +
mov ecx [ebp+10h] +
cmp ecx [ebp-2Ch] +
jge loc_1086855  +
mov ecx [ebp-2Ch] +
mov eax [ebp+18h] +
cmp eax [ebp-24h] +
jle loc_1086860  +
mov eax [ebp-24h] +
mov edx [ebp+14h] +
mov [ebp-14h] ecx +
mov ecx edi +
mov [ebp-18h] edx +
mov [ebp-20h] esi +
mov [ebp-1Ch] eax +
call ?GetExStyle@CWnd@@QBEKXZ  +
test eax 400000h +
jz loc_1086893  +
mov eax [ebp-28h] +
mov ecx eax +
sub eax [ebp+14h] +
sub ecx esi +
add ecx [ebp-30h] +
add eax [ebp-30h] +
mov [ebp-18h] ecx +
mov [ebp-20h] eax +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_1084847  +
lea eax [ebp-20h] +
push eax  +
mov ecx edi +
call sub_1084847  +
push ebx  +
mov ecx edi +
call sub_100DD70  +
mov esi eax +
push 80070057h  +
push esi  +
lea eax [ebp-50h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-50h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-40h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108691A  +
cmp [ebp+0Ch] al +
jz loc_10868F7  +
push 5  +
mov ecx esi +
call ?ShowWindow@CWnd@@QAEHH@Z  +
test esi esi +
jz loc_10868FE  +
mov esi [esi+20h] +
mov eax [ebp-1Ch] +
sub eax [ebp-14h] +
push ebx  +
push eax  +
mov eax [ebp-20h] +
sub eax [ebp-18h] +
push eax  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push esi  +
call ds:MoveWindow  +
mov ecx [ebp+8] +
lea eax [ebp-40h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewScex_5  +
lea ecx [ebp-28h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+8] esi +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
jle loc_10869D0  +
cmp dword ptr [ebp+8] 8009h +
jl loc_1086A2A  +
push 80070057h  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call esi  +
mov ebx eax +
test ebx ebx +
jge loc_1086A2A  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1086A11  +
cmp byte ptr [eax+19h] 2 +
jb loc_1086A11  +
push ebx  +
push offset dword_100C4B0  +
push 9Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov esi ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
cmp dword ptr [ebp+8] 8005h +
jnz loc_1086A70  +
add edi 174h +
mov ecx [edi] +
call sub_100C573  +
mov ecx [edi] +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_10C3A98  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call esi  +
mov esi eax +
jmp loc_1086A13  +
***
lea ebx [edi+44h] +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+78h]  +
push 80004005h  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call esi  +
mov [ebp-14h] eax +
test eax eax +
jge loc_1086AE5  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1086ADD  +
cmp byte ptr [eax+19h] 2 +
jb loc_1086ADD  +
push dword ptr [ebp-14h]  +
push offset dword_100C4B0  +
push 9Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov esi [ebp-14h] +
jmp loc_1086A13  +
***
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_100A5E6  +
push eax  +
push offset dword_1023D6C  +
lea ecx [edi+0D8h] +
call sub_107FF60  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call esi  +
mov [ebp-14h] eax +
test eax eax +
jge loc_1086B67  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1086B51  +
cmp byte ptr [eax+19h] 3 +
jb loc_1086B51  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-28h] +
call esi  +
push eax  +
mov eax lpDst +
push offset dword_100C4B0  +
push 9Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1086ADD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1086ADD  +
***
lea ecx [ebp-10h] +
call sub_100A5CF  +
push dword ptr [ebp-18h]  +
mov ecx [eax] +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+138h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
cmp dword ptr [ebp+8] 8008h +
jnz loc_1086BCF  +
lea ecx [ebp-28h] +
call ds:??7SC@mmcerror@@QBEHXZ  +
test eax eax +
jz loc_1086BCF  +
mov ecx [edi+174h] +
call sub_100C573  +
mov edx [ebx] +
push eax  +
lea eax [ebp-38h] +
push eax  +
mov ecx ebx +
call dword ptr [edx]  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call esi  +
mov esi eax +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1086A13  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1086A13  +
***
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 0 +
push esi  +
jz loc_1086CC3  +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset loc_1086CDC  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx ebx +
test esi esi +
jge loc_1086CB9  +
push 0  +
jmp loc_1086CBC  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_1086CD1  +
push 0  +
mov ecx ebx +
call sub_1010F11  +
mov esi 80004002h +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_1086D27  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_1086D3C  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_1086D1D  +
push 0  +
jmp loc_1086D20  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_1086D33  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
cmp esi [edi+4] +
jl loc_1086D6D  +
push 0FFFFFFFFh  +
lea eax [esi+1] +
push eax  +
call sub_1084D21  +
mov eax [edi] +
mov ecx [ebp+arg_4] +
pop edi  +
mov [eax+esi*4] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dword_106BE08  +
push [ebp+arg_4]  +
call sub_100ED86  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dword_106BE18  +
push [ebp+arg_4]  +
call sub_100ED86  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_1086DF9  +
lea edx [ebp+arg_0] +
push edx  +
add eax 8 +
mov ecx [eax] +
push offset dword_1086E10  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_1086DEF  +
push 0  +
jmp loc_1086DF2  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_1086E05  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_1086E5B  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset loc_1086E70  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_1086E51  +
push 0  +
jmp loc_1086E54  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_1086E67  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
push ebx  +
lea ecx [esi+20h] +
mov [esi] ebx +
mov [esi+4] ebx +
mov [esi+8] bl +
mov [esi+9] bl +
mov [esi+0Ah] bl +
mov byte ptr [esi+0Bh] 1 +
mov [esi+0Ch] ebx +
mov dword ptr [esi+10h] 0FFFFh +
mov [esi+14h] ebx +
mov [esi+18h] ebx +
mov [esi+1Ch] ebx +
call sub_1010F11  +
mov [esi+24h] ebx +
mov [esi+28h] ebx +
mov [esi+2Ch] ebx +
mov [esi+30h] ebx +
mov [esi+34h] ebx +
add esi 38h +
push esi  +
call ds:SetRectEmpty  +
pop esi  +
pop ebx  +
retn   +
***
call sub_1001F95  +
xor edi edi +
push edi  +
lea ecx [ebp-24h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcviewScex_2  +
lea ecx [ebp-24h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ebx  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1086F5B  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] esi +
jmp loc_10870CE  +
push 8000FFFFh  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call ebx  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1086F9F  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1086F53  +
mov [ebp-14h] edi +
push dword ptr [ebp+10h]  +
lea ecx [ebp-44h] +
call sub_104D719  +
mov esi eax +
mov eax [ebp+0Ch] +
mov eax [eax] +
lea edi [ebp-34h] +
movs   +
movs   +
movs   +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 5 +
movs   +
mov [ebp+10h] eax +
call sub_100A5E6  +
push eax  +
mov eax [ebp+10h] +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+0Ch]  +
lea esi [ebp-34h] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+20h]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 4 +
call sub_100EBF1  +
lea ecx [ebp-24h] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108702B  +
push 1  +
lea ecx [ebp-44h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 6 +
mov dword ptr [ebp-10h] 2 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
mov byte ptr [ebp+0Fh] 0 +
test al al +
jz loc_108702F  +
mov byte ptr [ebp+0Fh] 1 +
test byte ptr [ebp-10h] 2 +
mov dword ptr [ebp-4] 4 +
jz loc_1087049  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-44h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp byte ptr [ebp+0Fh] 0 +
jz loc_108705F  +
push 80070057h  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10870AF  +
push 8000FFFFh  +
push dword ptr [ebp-14h]  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 7 +
call ebx  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10870AC  +
lea ecx [ebp-14h] +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2Ch]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea eax [ebp-24h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-14h] +
or dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10870CE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-28h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScexpo  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
call SysStringLen  +
cmp eax ebx +
jnb loc_1087180  +
push 80070057h  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1087254  +
cmp [edi+270h] esi +
jz loc_108719B  +
push 345Bh  +
push dword ptr [ebp+8]  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
jmp loc_1087254  +
push 8000FFFFh  +
push dword ptr [edi+178h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1087247  +
mov eax [ebp+10h] +
push dword ptr [ebp+0Ch]  +
mov cl al +
and cl bl +
mov [ebp-18h] cl +
mov ecx eax +
shr ecx 1 +
and cl bl +
shr eax 2 +
mov [ebp-14h] cl +
and al bl +
lea ecx [ebp+0Ch] +
mov [ebp+10h] al +
call ??0CString@@QAE@PBG@Z  +
push 0  +
push dword ptr [ebp+10h]  +
lea eax [ebp+0Ch] +
push dword ptr [ebp-14h]  +
mov ecx edi +
push dword ptr [ebp-18h]  +
mov byte ptr [ebp-4] 3 +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_1085B29  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+0Ch] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScgets  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
mov dword ptr [edi] 0FFFFFFF6h +
mov eax [esi+178h] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
test eax eax +
jnz loc_1087327  +
push 345Ch  +
lea eax [ebp-30h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1087381  +
cmp eax ebx +
jnz loc_1087369  +
push edi  +
mov ecx esi +
call sub_1086250  +
cmp eax 0FFFFFFFFh +
jz loc_1087359  +
cmp dword ptr [edi] 0FFFFFFF6h +
jz loc_1087359  +
add esi 1F8h +
cmp dword ptr [esi+78h] 0 +
mov edx [esi] +
setz cl  +
shr edx 4 +
and cl dl +
test cl bl +
jz loc_1087371  +
mov [edi] eax +
jmp loc_1087371  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1087374  +
jle loc_1087371  +
mov dword ptr [edi] 0FFFFFFFBh +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push edi  +
xor edi edi +
cmp [ecx+270h] edi +
jnz loc_1087449  +
lea eax [ecx+1F8h] +
cmp [eax+78h] edi +
mov eax [eax] +
setz dl  +
shr eax 4 +
and dl al +
test dl 1 +
jnz loc_1087449  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
mov [ebp+var_4] 0FFFFFFF6h +
call sub_10872A3  +
lea ecx [ebp+var_14] +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp+var_4] 0FFFFFFF6h +
jz loc_1087449  +
cmp [ebp+var_4] 0FFFFFFFBh +
jz loc_1087449  +
push [ebp+var_4]  +
call sub_1054C16  +
cmp eax edi +
jz loc_1087449  +
cmp dword ptr [eax+0Ch] 3951589h +
jnz loc_1087449  +
mov edi [eax+14h] +
mov eax edi +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push 0  +
push 1  +
mov esi ecx +
call sub_1029371  +
test al al +
jnz loc_108746C  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10874A2  +
cmp byte ptr [eax+19h] 5 +
jb loc_10874A2  +
push offset dword_100C4B0  +
push 3Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
or [ebp+var_4] 0FFFFFFFFh +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1086250  +
cmp eax 0FFFFFFFFh +
jnz loc_10874BD  +
mov [ebp+var_4] 0FFFFFFFEh +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov ecx [esi+0D8h] +
test ecx ecx +
jnz loc_10874D3  +
xor eax eax +
jmp loc_1087524  +
mov edx [ecx] +
push 0  +
push [ebp+var_4]  +
push 9007h  +
push eax  +
push ecx  +
call dword ptr [edx+78h]  +
cmp eax 1 +
jnz loc_1087521  +
lea eax [esi+1F8h] +
cmp dword ptr [eax+78h] 0 +
mov eax [eax] +
setz cl  +
shr eax 4 +
and cl al +
test cl 1 +
jnz loc_1087521  +
push [ebp+var_4]  +
call sub_1054C16  +
test eax eax +
jz loc_1087521  +
cmp dword ptr [eax+0Ch] 3951589h +
jnz loc_1087521  +
push dword ptr [eax+14h]  +
mov ecx esi +
call sub_108558F  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn   +
***
push 1Ch  +
mov eax offset dword_10D60FC +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScg_18  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
mov edi [ebp+10h] +
mov dword ptr [edi] 0FFFFFFF6h +
mov eax [esi] +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call dword ptr [eax+78h]  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
test eax eax +
jnz loc_10875A5  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108764E  +
mov eax [esi+0ACh] +
dec eax  +
jz loc_108763C  +
dec eax  +
jz loc_10875C5  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1087641  +
mov eax [ebp+14h] +
mov byte ptr [eax] 0 +
mov eax [esi+22Ch] +
cmp eax 2 +
jnz loc_10875DE  +
mov dword ptr [edi] 0FFFFFFFDh +
jmp loc_1087641  +
cmp eax ebx +
jnz loc_10875EA  +
mov dword ptr [edi] 0FFFFFFFCh +
jmp loc_1087641  +
lea ecx [esi-44h] +
mov [ebp+14h] ecx +
call sub_100C52C  +
test al al +
jz loc_108762C  +
mov esi [esi+134h] +
mov ecx [esi+4Ch] +
call sub_1054B78  +
test eax eax +
jnz loc_1087613  +
mov dword ptr [edi] 0FFFFFFFEh +
jmp loc_1087641  +
cmp eax ebx +
jnz loc_1087622  +
mov ecx [ebp+14h] +
push edi  +
call sub_1086250  +
jmp loc_1087641  +
jle loc_1087641  +
mov dword ptr [edi] 0FFFFFFFBh +
jmp loc_1087641  +
push 80004005h  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1087644  +
mov eax [ebp+14h] +
mov [eax] bl +
lea eax [ebp-28h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov ecx [ebp-18h] +
mov eax [ebp-14h] +
mov [eax+4] ecx +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
push 20h  +
mov eax offset dword_10D6168 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScre_2  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
mov eax [esi+134h] +
mov ecx [eax+4Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1054B78  +
cmp eax ebx +
jz loc_108771E  +
push 80004005h  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1087767  +
lea eax [ebp-14h] +
push eax  +
lea ecx [esi-44h] +
call sub_1086250  +
mov edi eax +
test edi edi +
jl loc_108775A  +
mov eax [esi+134h] +
mov [esi+190h] bl +
mov ecx [eax+4Ch] +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
mov eax [esi+134h] +
mov ecx [eax+4Ch] +
push edi  +
call sub_1054672  +
mov byte ptr [esi+190h] 0 +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov ecx [ebp-1Ch] +
mov eax [ebp-18h] +
mov [eax+4] ecx +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push 8  +
mov eax offset dword_10DEC9C +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1087803  +
cmp byte ptr [eax+19h] 5 +
jb loc_1087803  +
push offset dword_100C4B0  +
push 77h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
mov eax [esi+1B4h] +
and dword ptr [ebp-4] 0 +
shr eax 3 +
not al  +
and al 1 +
movzx eax al +
lea edi [esi-44h] +
push eax  +
mov ecx edi +
call sub_1028B9A  +
mov ecx edi +
mov byte ptr [esi+191h] 1 +
call sub_100DA2C  +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push 8  +
mov eax offset dword_10DEC9C +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1087898  +
cmp byte ptr [eax+19h] 5 +
jb loc_1087898  +
push offset dword_100C4B0  +
push 79h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
mov eax [esi+1B4h] +
and dword ptr [ebp-4] 0 +
shr eax 6 +
not al  +
and al 1 +
movzx eax al +
lea edi [esi-44h] +
push eax  +
mov ecx edi +
call sub_107FFF1  +
mov ecx edi +
mov byte ptr [esi+191h] 1 +
call sub_100DA2C  +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewOnup_0  +
lea ecx [ebp-24h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [edi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ebx  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-24h] +
call esi  +
test eax eax +
jge loc_1087991  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1087A3D  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1087A3D  +
push eax  +
push offset dword_100C4B0  +
push 7Fh  +
jmp loc_1087A32  +
mov ecx edi +
call sub_10873DD  +
mov edi [edi+0D8h] +
push 8000FFFFh  +
mov [ebp-10h] eax +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ebx  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call esi  +
test eax eax +
jge loc_10879F1  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1087A3D  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1087A3D  +
push eax  +
push offset dword_100C4B0  +
push 80h  +
jmp loc_1087A32  +
push dword ptr [ebp-10h]  +
mov eax [edi] +
push dword ptr [ebp-14h]  +
push edi  +
call dword ptr [eax+12Ch]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call esi  +
test eax eax +
jge loc_1087A3D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1087A3D  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1087A3D  +
push eax  +
push offset dword_100C4B0  +
push 81h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
push 1Ch  +
mov eax offset dword_10D622C +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
push dword ptr [ebp+8]  +
xor ebx ebx +
inc ebx  +
lea edi [esi+199h] +
lea ecx [esi-44h] +
mov [ebp-4] ebx +
mov byte ptr [edi] 0 +
call sub_1086268  +
cmp byte ptr [edi] 0 +
mov [ebp-10h] ebx +
jnz loc_1087B13  +
mov ecx [ebp+8] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
test eax eax +
jz loc_1087B13  +
mov eax [esi] +
lea ecx [ebp-28h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+20h]  +
mov ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1087B2E  +
push dword ptr [ebp+8]  +
push offset aCamcviewSccont  +
call ds:?TraceError@@YGXPBGABVSC@mmcerror@@@Z  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
dec dword ptr [ebx+1C5035h]  +
add [eax-73h] edx +
dec ebp  +
rol dh 1 +
inc ebp  +
cld   +
add edi edi +
setalc   +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
cmp eax ebx +
jnz loc_1087C26  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1087C6E  +
push ebx  +
push dword ptr [ebp-18h]  +
lea eax [ebp-10h] +
push dword ptr [ebp-1Ch]  +
mov ecx edi +
push dword ptr [ebp-20h]  +
push eax  +
lea eax [ebp-40h] +
push eax  +
call sub_1085B29  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-10h] +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-28h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScproc  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
cmp byte ptr [ebp+10h] 0 +
mov byte ptr [ebp-4] 2 +
jz loc_1087D1F  +
mov [ebp+14h] edi +
cmp dword ptr [ebp+14h] 0FFFFFFFEh +
mov eax [ebp+18h] +
jnz loc_1087D5C  +
cmp eax 2 +
jl loc_1087D5C  +
cmp eax 3 +
jle loc_1087D3C  +
cmp eax 5 +
jz loc_1087D3C  +
cmp eax 7 +
jnz loc_1087D5C  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1088065  +
add eax 0FFFFFFFEh +
cmp eax 7 +
ja loc_108804A  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
jmp ds:off_1088089[eax*4]  +
mov ebx 9006h +
mov eax [esi+0D8h] +
test eax eax +
jnz loc_1087FC8  +
push 8000FFFFh  +
jmp loc_1087FA5  +
mov ebx 9005h +
jmp loc_1087D7A  +
mov ebx 9008h +
jmp loc_1087D7A  +
mov ebx 9012h +
jmp loc_1087D7A  +
mov ebx 9011h +
jmp loc_1087D7A  +
mov ebx [esi+0D8h] +
push 8000FFFFh  +
push ebx  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1087E06  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
jmp loc_1088068  +
push dword ptr [ebp+14h]  +
movzx ecx byte ptr [ebp+10h] +
mov eax [ebx] +
push ecx  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call dword ptr [eax+110h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1087DED  +
lea ecx [esi+44h] +
mov eax [ecx] +
lea edx [ebp-48h] +
push edx  +
call dword ptr [eax+4]  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1087DED  +
jmp loc_108803A  +
cmp [esi+270h] ebx +
jnz loc_1087E92  +
push 4  +
lea eax [ebp-58h] +
push eax  +
mov ecx esi +
call sub_107E75A  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1088058  +
mov ebx 9015h +
jmp loc_1087D7A  +
cmp byte ptr [ebp+10h] 1 +
mov edi 8000FFFFh +
push edi  +
jnz loc_1087F55  +
push dword ptr [esi+174h]  +
lea eax [ebp-68h] +
push eax  +
call sub_100A3AE  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 6 +
call ebx  +
mov ecx eax +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp-68h] +
mov [ebp+13h] al +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp byte ptr [ebp+13h] 0 +
jnz loc_1087DED  +
mov ecx [esi+174h] +
call sub_100C573  +
push edi  +
push eax  +
mov [ebp+10h] eax +
lea eax [ebp-78h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 7 +
call ebx  +
mov ecx eax +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp-78h] +
mov bl al +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jnz loc_1087DED  +
mov esi [esi+174h] +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_107ED11  +
jmp loc_108803A  +
push dword ptr [esi+178h]  +
lea eax [ebp-88h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 8 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx eax +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp-88h] +
mov bl al +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jnz loc_1087DED  +
mov eax [esi+178h] +
mov ebx [eax+4Ch] +
test ebx ebx +
jnz loc_1087FB3  +
push edi  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1087DED  +
lea eax [ebp+14h] +
push eax  +
mov ecx esi +
call sub_1086250  +
push eax  +
mov ecx ebx +
call sub_1054672  +
jmp loc_108803A  +
push dword ptr [ebp+14h]  +
movzx edx byte ptr [ebp+10h] +
mov ecx [eax] +
push edx  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+78h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1087DED  +
cmp ebx 9006h +
jnz loc_108803A  +
cmp [ebp+10h] al +
jz loc_108800F  +
mov ecx [esi+174h] +
call sub_100C573  +
jmp loc_1088011  +
xor eax eax +
push eax  +
lea ecx [esi+44h] +
mov edx [ecx] +
lea eax [ebp-88h] +
push eax  +
call dword ptr [edx]  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 9 +
call edi  +
lea ecx [ebp-88h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jmp loc_1087DED  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov ecx [ebp-18h] +
mov eax [ebp-14h] +
mov [eax+4] ecx +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108811E  +
cmp byte ptr [eax+19h] 5 +
jb loc_108811E  +
push offset dword_100C4B0  +
push 8Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx esi +
call sub_100DA2C  +
cmp dword ptr [ebp+8] 0 +
jz loc_1088157  +
cmp dword ptr [esi+178h] 0 +
jz loc_1088157  +
mov eax [esi+178h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jz loc_1088149  +
cmp eax 2 +
jnz loc_1088157  +
mov esi [esi+178h] +
mov eax [esi] +
push 0  +
push esi  +
call dword ptr [eax+64h]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_108818D  +
push eax  +
call sub_1086C89  +
test eax eax +
jge loc_108818D  +
cmp eax 80004002h +
jz loc_108818D  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1056628  +
test eax eax +
jge loc_10881BA  +
cmp eax 80004002h +
jz loc_10881BA  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_10881F0  +
push eax  +
call sub_1036EB9  +
test eax eax +
jge loc_10881F0  +
cmp eax 80004002h +
jz loc_10881F0  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1086CF1  +
test eax eax +
jge loc_108821D  +
cmp eax 80004002h +
jz loc_108821D  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi [ecx+4] +
push esi  +
call sub_1086D51  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_101EC83  +
lea eax [edi+8] +
push eax  +
lea ecx [esi+8] +
call sub_101E823  +
mov al [edi+0Ch] +
mov [esi+0Ch] al +
mov al [edi+0Dh] +
mov [esi+0Dh] al +
mov eax [edi+10h] +
mov [esi+10h] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1086DC0  +
test eax eax +
jge loc_10882A5  +
cmp eax 80004002h +
jz loc_10882A5  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1086E25  +
test eax eax +
jge loc_10882D2  +
cmp eax 80004002h +
jz loc_10882D2  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
lea ecx [edi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov esi [edi+0D8h] +
mov ebx eax +
mov [ebp-18h] ebx +
test ebx ebx +
jz loc_1088514  +
test esi esi +
jz loc_1088514  +
cmp dword ptr [edi+174h] 0 +
jz loc_1088514  +
mov eax [ebp+0Ch] +
sub eax 0 +
jz loc_10884F1  +
dec eax  +
jnz loc_1088514  +
mov ecx edi +
call sub_100C52C  +
test al al +
jz loc_10884BB  +
mov eax [edi+178h] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
test eax eax +
jnz loc_1088377  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+58h]  +
push dword ptr [ebp+8]  +
mov ecx edi +
test eax eax +
jz loc_108850C  +
push 1  +
push ebx  +
push esi  +
call sub_108000F  +
jmp loc_1088511  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+0Ch] 0FFFFFFF6h +
call sub_10872A3  +
and dword ptr [ebp-4] 0 +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
mov [ebp-14h] eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp dword ptr [ebp-14h] 0 +
jl loc_1088514  +
cmp dword ptr [ebp+0Ch] 0FFFFFFF6h +
jz loc_1088514  +
cmp dword ptr [ebp+0Ch] 0FFFFFFFBh +
jnz loc_1088453  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+58h]  +
test eax eax +
jz loc_1088507  +
and dword ptr [ebp-14h] 0 +
mov ebx [esi] +
lea ecx [ebp-14h] +
mov dword ptr [ebp-4] 1 +
call sub_100A5E6  +
push eax  +
push offset dword_1023D6C  +
push esi  +
call dword ptr [ebx]  +
test eax eax +
mov eax [ebp-14h] +
jl loc_108843C  +
test eax eax +
jz loc_108843C  +
lea ecx [ebp-14h] +
mov byte ptr [ebp+0Fh] 0 +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp+0Fh] +
push edx  +
push dword ptr [ebp-18h]  +
push eax  +
call dword ptr [ecx+144h]  +
test eax eax +
jl loc_1088439  +
cmp byte ptr [ebp+0Fh] 0 +
jz loc_1088439  +
push dword ptr [ebp+8]  +
mov ecx edi +
push 0  +
push dword ptr [ebp-18h]  +
push esi  +
call sub_108000F  +
mov [ebp-10h] eax +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1088514  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1088514  +
lea eax [edi+1F8h] +
cmp dword ptr [eax+78h] 0 +
mov eax [eax] +
setz cl  +
shr eax 4 +
and cl al +
test cl 1 +
jnz loc_10884A3  +
push dword ptr [ebp+0Ch]  +
call sub_1054C16  +
test eax eax +
jz loc_1088514  +
mov edx [eax+0Ch] +
mov ecx 3951589h +
cmp edx ecx +
setz bl  +
test bl bl +
jz loc_10884A0  +
cmp edx ecx +
jnz loc_1088499  +
mov ebx [eax+14h] +
jmp loc_1088354  +
xor ebx ebx +
jmp loc_1088354  +
mov ebx [ebp-18h] +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+58h]  +
push dword ptr [ebp+8]  +
mov ecx edi +
test eax eax +
jz loc_108850C  +
push 0  +
jmp loc_108836B  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+58h]  +
test eax eax +
jz loc_1088507  +
mov eax [esi] +
and dword ptr [ebp-18h] 0 +
lea ecx [ebp-18h] +
push ecx  +
lea ecx [ebp-1Ch] +
push ecx  +
push 4  +
push ebx  +
push esi  +
call dword ptr [eax+6Ch]  +
test eax eax +
jl loc_1088514  +
cmp dword ptr [ebp-18h] 0 +
push dword ptr [ebp+8]  +
mov ecx edi +
jz loc_1088369  +
jmp loc_10884B4  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+58h]  +
test eax eax +
jz loc_1088507  +
push dword ptr [ebp+8]  +
mov ecx edi +
jmp loc_1088369  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_1084E9D  +
mov [ebp-10h] eax +
mov eax [ebp-10h] +
call sub_1001FCF  +
retn 8  +
***
push 4  +
mov eax offset dword_10E2254 +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_106BE2C +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+24h] 0 +
lea ecx [esi+28h] +
call sub_100B83A  +
lea ecx [esi+4] +
call sub_101A846  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+20h] 0 +
and dword ptr [ebp-4] 0 +
call sub_1086E85  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScsnap  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1088642  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1088781  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
cmp dword ptr [edi+270h] 0 +
jz loc_1088688  +
push 345Bh  +
lea eax [ebp-38h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1088784  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-14h] 0FFFFFFF6h +
call sub_10872A3  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1088774  +
lea ecx [edi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push 8000FFFFh  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1088774  +
mov edi [edi+0D8h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108874F  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_1088781  +
push dword ptr [ebp+0Ch]  +
mov eax [edi] +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push edi  +
call dword ptr [eax+0C4h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-28h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScex_0  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [edi+270h] esi +
jz loc_108885D  +
push 345Bh  +
lea eax [ebp-38h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_108897B  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-14h] 0FFFFFFF6h +
call sub_10872A3  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108896B  +
cmp dword ptr [ebp-14h] 0FFFFFFF6h +
jnz loc_10888B9  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_108896E  +
lea ecx [edi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push 8000FFFFh  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108896B  +
mov edi [edi+0D8h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1088943  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_1088978  +
push dword ptr [ebp+10h]  +
mov eax [edi] +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call dword ptr [eax+0BCh]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea eax [ebp-28h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScdisp  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 0  +
push 8004h  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_10887E9  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_1088A11  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1088A17  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewSccopy  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 0  +
push 8001h  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_10887E9  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_1088B0A  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1088B10  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScdele  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 0  +
push 8003h  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_10887E9  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_1088BDE  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1088BE4  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScrena  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push 8005h  +
push eax  +
mov ecx esi +
call sub_10887E9  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_1088CB7  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1088CBD  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScrefr  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 0  +
push 8006h  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_10887E9  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_1088D94  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1088D9A  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScge_8  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1088E77  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10890C2  +
mov ecx edi +
call sub_100C52C  +
test al al +
jnz loc_1088EB9  +
push 345Bh  +
lea eax [ebp-3Ch] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10890C2  +
mov eax [edi+0D8h] +
push 80070057h  +
push eax  +
mov [ebp-1Ch] eax +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1088F0C  +
lea ecx [ebp-2Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_1088E6F  +
lea ecx [ebp-84h] +
call sub_108859A  +
cmp byte ptr [ebp+14h] 0 +
lea eax [edi+44h] +
mov byte ptr [ebp-4] 5 +
mov [ebp-18h] eax +
mov [ebp-6Ch] eax +
jz loc_1088F2D  +
mov [ebp-50h] ebx +
mov ecx edi +
call sub_100C52C  +
test al al +
jz loc_1088F47  +
lea eax [edi+178h] +
push eax  +
lea ecx [ebp-64h] +
call sub_1088199  +
mov ecx [ebp-18h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov [ebp-14h] eax +
mov eax [edi+178h] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
test eax eax +
jnz loc_1088F9C  +
push 345Ch  +
lea eax [ebp-3Ch] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 6 +
call esi  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10890B2  +
cmp eax ebx +
jnz loc_108905D  +
lea eax [ebp+14h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp+14h] 0FFFFFFF6h +
call sub_1086250  +
add edi 1F8h +
cmp dword ptr [edi+78h] 0 +
mov ecx [edi] +
mov esi eax +
setz al  +
shr ecx 4 +
and al cl +
test al bl +
jz loc_1088FDF  +
mov byte ptr [ebp-7Ah] 0 +
mov [ebp-60h] esi +
mov [ebp-54h] esi +
jmp loc_108906E  +
push dword ptr [ebp+14h]  +
call sub_1054C16  +
mov edi eax +
test edi edi +
jnz loc_1089000  +
push 8000FFFFh  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10890A5  +
mov eax [ebp+10h] +
cmp dword ptr [edi+0Ch] 3951589h +
mov byte ptr [ebp-7Bh] 0 +
mov [ebp-78h] eax +
jnz loc_108904E  +
mov ecx [ebp-18h] +
mov eax [ecx] +
mov dword ptr [ebp-74h] 8000h +
call dword ptr [eax+78h]  +
and dword ptr [ebp-60h] 0 +
or dword ptr [ebp-50h] 10h +
mov [ebp-5Ch] eax +
mov byte ptr [ebp-7Ah] 0 +
mov [ebp-7Ch] bl +
mov [ebp-54h] esi +
cmp dword ptr [edi+0Ch] 3951589h +
jnz loc_1089048  +
mov eax [edi+14h] +
mov [ebp-14h] eax +
jmp loc_108907F  +
and dword ptr [ebp-14h] 0 +
jmp loc_108907F  +
mov eax [ebp+14h] +
mov byte ptr [ebp-7Ah] 0 +
mov [ebp-60h] eax +
mov [ebp-54h] esi +
jmp loc_1089078  +
mov [ebp-7Ah] bl +
mov dword ptr [ebp-60h] 0FFFFFFFBh +
mov dword ptr [ebp-54h] 0FFFFFFFDh +
mov eax [ebp+10h] +
mov byte ptr [ebp-7Bh] 0 +
mov [ebp-78h] eax +
mov dword ptr [ebp-74h] 8001h +
push dword ptr [ebp+0Ch]  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-84h] +
push edx  +
push dword ptr [ebp-14h]  +
push eax  +
call dword ptr [ecx+0CCh]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea eax [ebp-2Ch] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov eax [ebp-64h] +
mov [ebp-4] bl +
test eax eax +
jz loc_10890C2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewGetres  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [ebp-78h] +
call sub_108859A  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_100C52C  +
test al al +
jz loc_1089190  +
push ebx  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_1088DF7  +
mov eax [ebp-58h] +
cmp eax edi +
jmp loc_1089265  +
push 48h  +
lea eax [ebp-78h] +
push edi  +
push eax  +
call memset  +
mov eax [ebp+10h] +
mov [ebp-6Ch] eax +
mov eax [esi+270h] +
add esp 0Ch +
mov dword ptr [ebp-68h] 8001h +
mov byte ptr [ebp-6Fh] 0 +
mov byte ptr [ebp-6Eh] 0 +
cmp eax 2 +
jnz loc_10891C8  +
mov dword ptr [ebp-54h] 0FFFFFFFDh +
jmp loc_10891D3  +
cmp eax ebx +
jnz loc_10891D3  +
mov dword ptr [ebp-54h] 0FFFFFFFCh +
mov eax [esi+20h] +
lea edi [esi+44h] +
mov [ebp-64h] eax +
mov eax [edi] +
mov ecx edi +
mov byte ptr [ebp-70h] 0 +
mov [ebp-60h] edi +
call dword ptr [eax+78h]  +
mov esi [esi+0D8h] +
push 80070057h  +
mov [ebp-50h] eax +
push esi  +
lea eax [ebp-30h] +
push eax  +
mov [ebp+10h] esi +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??7SC@mmcerror@@QBEHXZ  +
test eax eax +
jz loc_1089253  +
push dword ptr [ebp+0Ch]  +
mov esi [esi] +
lea eax [ebp-78h] +
push eax  +
mov eax [edi] +
mov ecx edi +
add esi 0CCh +
call dword ptr [eax+78h]  +
push eax  +
push dword ptr [ebp+10h]  +
call dword ptr [esi]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-58h] +
test eax eax +
mov [ebp-4] bl +
mov [ebp-10h] ebx +
jz loc_1089273  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-24h] +
mov [ebp-14h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScex_1  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-10h] esi +
push ebx  +
push esi  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_100A5E6  +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call sub_1088DF7  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108936C  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10893A1  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push dword ptr [ebp-10h]  +
mov ecx edi +
push eax  +
call sub_1086EDC  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
mov [ebp-14h] ebx +
test eax eax +
jz loc_10893B4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov ebx ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1089451  +
cmp byte ptr [eax+19h] 5 +
jb loc_1089451  +
push offset dword_100C4B0  +
push 41h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewOncont  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [ebp-74h] +
call sub_108859A  +
mov eax [ebp+10h] +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-70h] eax +
mov eax [ebp+1Ch] +
mov [ebp-68h] eax +
mov al [ebx+238h] +
not al  +
and al 1 +
mov [ebp-6Ch] al +
mov eax [ebx+20h] +
mov [ebp-60h] eax +
mov al [ebp+24h] +
mov [ebp-74h] ecx +
lea ecx [ebx+44h] +
mov [ebp-69h] al +
mov eax [ecx] +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ebp-64h] 8000h +
mov byte ptr [ebp-6Bh] 0 +
mov [ebp-5Ch] ecx +
call dword ptr [eax+78h]  +
mov esi [ebp+20h] +
mov ecx [ebp+8] +
mov [ebp-4Ch] eax +
mov eax [ebp+18h] +
mov [ebp-48h] eax +
mov [ebp-44h] ecx +
test esi esi +
jz loc_10894DA  +
lea edi [ebp-3Ch] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+0Ch] +
cmp [ebp-4Ch] edi +
jnz loc_108950F  +
or dword ptr [ebp-40h] 80h +
and dword ptr [ebp-58h] 0 +
cmp dword ptr [ebp+1Ch] 0 +
jnz loc_10894F7  +
or dword ptr [ebp-40h] 2 +
mov ecx ebx +
call sub_100C52C  +
test al al +
jz loc_10895D1  +
or dword ptr [ebp-40h] 4 +
jmp loc_10895D1  +
test eax eax +
jz loc_10895DD  +
push 80070057h  +
push dword ptr [ebx+174h]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1089586  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1089620  +
cmp byte ptr [eax+19h] 2 +
jb loc_1089620  +
push offset dword_100C4B0  +
push 42h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1089620  +
push dword ptr [ebp+18h]  +
mov ecx [ebx+174h] +
mov eax [ecx] +
lea edx [ebp-2Ch] +
push edx  +
call dword ptr [eax+110h]  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1089620  +
mov ecx [ebx+174h] +
call sub_10C3602  +
or dword ptr [ebp-40h] 1 +
mov [ebp-58h] eax +
cmp dword ptr [ebp+18h] 0 +
jz loc_10895DD  +
or dword ptr [ebp-40h] 8 +
jmp loc_10895E1  +
or dword ptr [ebp-40h] 10h +
mov ecx ebx +
call sub_100C52C  +
test al al +
jz loc_10895FB  +
lea eax [ebx+178h] +
push eax  +
lea ecx [ebp-54h] +
call sub_1088199  +
mov ebx [ebx+0D8h] +
mov eax [ebx] +
lea ecx [ebp-74h] +
push ecx  +
push 0  +
push 9004h  +
push edi  +
push ebx  +
call dword ptr [eax+78h]  +
mov eax [ebp-58h] +
test eax eax +
jz loc_1089620  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-54h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1089631  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 20h  +
***
call sub_1001F95  +
mov ebx ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10896C5  +
cmp byte ptr [eax+19h] 5 +
jb loc_10896C5  +
push offset dword_100C4B0  +
push 43h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-54h] +
call sub_108859A  +
mov eax [ebp+8] +
mov edx [eax] +
mov eax [eax+4] +
mov esi [ebp+0Ch] +
mov [ebp-50h] eax +
mov al [ebx+238h] +
not al  +
and al 1 +
mov [ebp-4Ch] al +
mov eax [ebx+20h] +
mov [ebp-40h] eax +
lea eax [ebx+44h] +
xor ecx ecx +
mov [ebp-3Ch] eax +
mov al [ebp+10h] +
mov [ebp-4] ecx +
mov [ebp-54h] edx +
mov dword ptr [ebp-44h] 8000h +
mov byte ptr [ebp-4Bh] 1 +
mov [ebp-49h] al +
cmp esi ecx +
jz loc_1089718  +
lea edi [ebp-1Ch] +
movs   +
movs   +
movs   +
movs   +
mov ebx [ebx+0D8h] +
mov eax [ebx] +
lea edx [ebp-54h] +
push edx  +
push ecx  +
push 9004h  +
push ecx  +
push ebx  +
call dword ptr [eax+78h]  +
mov eax [ebp-34h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1089740  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewGetlis  +
lea ecx [ebp-28h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+174h] +
mov ecx [eax+94h] +
mov ebx 8000FFFFh +
push ebx  +
push ecx  +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_100C5A1  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call edi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10897D4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
call sub_1001FCF  +
retn   +
***
cmp dword ptr [esi+270h] 0 +
jz loc_10897BF  +
mov eax [esi+174h] +
and dword ptr [ebp-18h] 0 +
add eax 94h +
push eax  +
lea ecx [ebp-10h] +
call sub_10183E9  +
push ebx  +
mov ebx [ebp-10h] +
push ebx  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108983B  +
mov byte ptr [ebp-4] 0 +
test ebx ebx +
jz loc_10897BF  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
jmp loc_10897BF  +
***
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
call dword ptr [ecx+54h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
cmp dword ptr [ebp-14h] 0 +
jz loc_10898B7  +
mov ecx [esi+174h] +
add ecx 94h +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+54h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10898B7  +
mov byte ptr [ebp-4] 0 +
test ebx ebx +
jz loc_10898A1  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
jmp loc_10897CE  +
***
mov esi [ebp-18h] +
mov byte ptr [ebp-4] 0 +
test ebx ebx +
jz loc_10898A3  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
jmp loc_10898A3  +
***
call sub_1001F95  +
mov ebx ecx +
lea ecx [ebp-54h] +
call sub_108859A  +
mov eax [ebp+10h] +
mov ecx [eax] +
mov eax [eax+4] +
mov edi [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [ebp-50h] eax +
mov eax [ebp+14h] +
cmp edi 0FFFFFFFEh +
mov [ebp-48h] eax +
setz al  +
cmp edi 0FFFFFFFDh +
mov [ebp-4Bh] al +
mov al [ebp+1Ch] +
setz byte ptr [ebp-4Ah]  +
mov [ebp-54h] ecx +
mov dword ptr [ebp-44h] 8001h +
mov [ebp-49h] al +
test edi edi +
jl loc_108997E  +
lea esi [ebx+1F8h] +
cmp dword ptr [esi+78h] 0 +
mov ecx [esi] +
setz al  +
shr ecx 4 +
and al cl +
test al 1 +
jz loc_1089976  +
mov [ebp-30h] edi +
jmp loc_108998B  +
mov eax [ebp+0Ch] +
mov [ebp-30h] eax +
jmp loc_108998B  +
cmp byte ptr [ebp-4Ah] 0 +
jz loc_108998B  +
mov dword ptr [ebp-30h] 0FFFFFFFBh +
mov al [ebx+238h] +
not al  +
and al 1 +
mov [ebp-4Ch] al +
mov eax [ebx+20h] +
lea ecx [ebx+44h] +
mov [ebp-40h] eax +
mov eax [ecx] +
mov [ebp-3Ch] ecx +
call dword ptr [eax+78h]  +
mov ecx ebx +
mov [ebp-2Ch] eax +
mov [ebp-24h] edi +
call sub_100C52C  +
test al al +
jz loc_10899C9  +
lea eax [ebx+178h] +
push eax  +
lea ecx [ebp-34h] +
call sub_1088199  +
push 0FFFFFFFCh  +
pop eax  +
cmp edi eax +
jnz loc_10899E2  +
cmp dword ptr [ebx+270h] 2 +
jnz loc_10899F3  +
mov dword ptr [ebp-30h] 0FFFFFFFDh +
jmp loc_10899F3  +
cmp edi 0FFFFFFFBh +
jnz loc_10899F3  +
cmp dword ptr [ebx+270h] 1 +
jnz loc_10899F3  +
mov [ebp-30h] eax +
mov esi [ebp+18h] +
test esi esi +
jz loc_1089A01  +
lea edi [ebp-1Ch] +
movs   +
movs   +
movs   +
movs   +
lea ecx [ebx+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov ebx [ebx+0D8h] +
mov ecx [ebx] +
lea edx [ebp-54h] +
push edx  +
push 0  +
push 9004h  +
push eax  +
push ebx  +
call dword ptr [ecx+78h]  +
mov eax [ebp-34h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1089A32  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1001FCF  +
retn 18h  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
push 28h  +
mov eax offset word_10D35FA +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewSconre  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1089C1F  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1089C76  +
call ds:GetFocus  +
push 8  +
push dword ptr [ebp+14h]  +
mov [ebp-14h] eax +
push dword ptr [ebp+10h]  +
lea eax [ebp-34h] +
push dword ptr [ebp+0Ch]  +
lea ecx [edi-44h] +
push eax  +
call sub_1087CD3  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
push dword ptr [ebp-14h]  +
call ds:SetFocus  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov ebx ecx +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewOnempt  +
lea ecx [ebp-28h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
mov ecx [ebx+174h] +
mov byte ptr [ebp-4] 1 +
call sub_100C5D1  +
test eax eax +
jnz loc_1089DF7  +
mov eax [ebx+40h] +
mov edi 80070057h +
push edi  +
push eax  +
mov [ebp-10h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1089D63  +
lea ecx [ebp-28h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_1089DF7  +
mov eax [ebp-10h] +
cmp byte ptr [eax+0A4h] 0 +
jz loc_1089DF7  +
mov ecx ebx +
call sub_101D08C  +
push edi  +
push dword ptr [ebp+8]  +
mov [ebp-10h] eax +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1089D55  +
mov eax [ebp-10h] +
push edi  +
push dword ptr [ebp+8]  +
mov byte ptr [eax+235h] 1 +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1089D55  +
mov ecx [ebp+8] +
push ebx  +
call sub_1088229  +
mov ecx [ebp-18h] +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [eax+4] ecx +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
push 30h  +
mov eax offset byte_10D6999 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-14h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push 0  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewScto_0  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov al [esi+1B4h] +
and al bl +
setz al  +
movzx eax al +
push 0  +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
lea ecx [esi-44h] +
call sub_10254E2  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-2Ch] +
push eax  +
jz loc_1089EEE  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1089EF4  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1089F86  +
cmp byte ptr [eax+19h] 5 +
jb loc_1089F86  +
push offset dword_100C4B0  +
push 7Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [esi+174h] +
call sub_100C573  +
xor ebx ebx +
inc ebx  +
mov [ebp+var_4] eax +
cmp [esi+0F0h] ebx +
jnz loc_1089FBF  +
xor edi edi +
cmp eax edi +
jz loc_1089FAB  +
push eax  +
jmp loc_108A1A0  +
push edi  +
push [ebp+arg_8]  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1089693  +
jmp loc_108A1DC  +
mov ecx esi +
call sub_100C52C  +
test al al +
jz loc_108A0E3  +
mov eax [esi+178h] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
or [ebp+var_C] 0FFFFFFFFh +
xor edi edi +
mov [ebp+var_8] 0FFFFFFF6h +
cmp eax edi +
jz loc_108A01F  +
cmp eax ebx +
jnz loc_108A001  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1086250  +
mov [ebp+var_C] eax +
jmp loc_108A00E  +
jle loc_108A1DC  +
mov [ebp+var_8] 0FFFFFFFBh +
mov ecx [ebp+var_8] +
cmp ecx 0FFFFFFF6h +
jz loc_108A1DC  +
cmp ecx 0FFFFFFFEh +
jnz loc_108A06A  +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov ecx esi +
mov [ebp+var_C] eax +
call sub_101D08C  +
cmp eax edi +
jz loc_108A1DC  +
mov ecx eax +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
xor ecx ecx +
cmp eax [esi+174h] +
push edi  +
push [ebp+arg_8]  +
setnz cl  +
push ebx  +
push [ebp+var_4]  +
add ecx 8000h +
mov eax ecx +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+var_C]  +
push 0FFFFFFFEh  +
jmp loc_108A1BF  +
cmp ecx 0FFFFFFFBh +
jnz loc_108A080  +
push edi  +
push [ebp+arg_8]  +
lea eax [ebp+arg_0] +
push ebx  +
push eax  +
push edi  +
push 0FFFFFFFDh  +
jmp loc_108A1D5  +
lea eax [esi+1F8h] +
cmp [eax+78h] edi +
mov eax [eax] +
setz dl  +
shr eax 4 +
and dl al +
test dl bl +
jz loc_108A0A9  +
push edi  +
push [ebp+arg_8]  +
lea eax [ebp+arg_0] +
push ebx  +
push eax  +
push edi  +
push [ebp+var_C]  +
jmp loc_108A1D5  +
push ecx  +
call sub_1054C16  +
cmp eax edi +
jz loc_108A1DC  +
cmp dword ptr [eax+0Ch] 3951589h +
push edi  +
push [ebp+arg_8]  +
push ebx  +
jnz loc_108A0DA  +
push edi  +
push 8001h  +
lea ecx [ebp+arg_0] +
push ecx  +
push dword ptr [eax+14h]  +
push [ebp+var_C]  +
jmp loc_108A1BF  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+var_8]  +
jmp loc_108A0A1  +
lea ecx [esi+44h] +
mov eax [ecx] +
xor edi edi +
mov [ebp+var_C] edi +
call dword ptr [eax+78h]  +
mov [ebp+var_10] eax +
mov [ebp+var_8] edi +
cmp eax edi +
jz loc_108A16B  +
mov ecx [esi+0D8h] +
cmp ecx edi +
jnz loc_108A135  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108A1DC  +
cmp byte ptr [eax+19h] 2 +
jb loc_108A1DC  +
push offset dword_100C4B0  +
push 7Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_108A1DC  +
mov eax [ecx] +
lea edx [ebp+var_8] +
push edx  +
lea edx [ebp+var_C] +
push edx  +
push 4  +
push [ebp+var_10]  +
push ecx  +
call dword ptr [eax+6Ch]  +
test eax eax +
jge loc_108A16B  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108A1DC  +
cmp byte ptr [eax+19h] 2 +
jb loc_108A1DC  +
push offset dword_100C4B0  +
push 7Ch  +
jmp loc_108A125  +
mov eax [esi+270h] +
cmp eax 2 +
jnz loc_108A18F  +
cmp [ebp+var_C] edi +
jz loc_108A180  +
cmp [ebp+var_8] edi +
jz loc_108A19D  +
push edi  +
push [ebp+arg_8]  +
lea eax [ebp+arg_0] +
push ebx  +
push eax  +
push 0FFFFFFFDh  +
push 0FFFFFFFCh  +
jmp loc_108A1D5  +
cmp eax ebx +
jnz loc_108A1DC  +
cmp [ebp+var_C] edi +
jz loc_108A1C8  +
cmp [ebp+var_8] edi +
jnz loc_108A1C8  +
push [ebp+var_4]  +
mov ecx [esi+174h] +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
push edi  +
push [ebp+arg_8]  +
lea ecx [ebp+arg_0] +
push ebx  +
push [ebp+var_4]  +
push 8000h  +
push ecx  +
push eax  +
push 0FFFFFFFFh  +
mov ecx esi +
call sub_108941F  +
jmp loc_108A1DC  +
push edi  +
push [ebp+arg_8]  +
lea eax [ebp+arg_0] +
push ebx  +
push eax  +
push 0FFFFFFFCh  +
push 0FFFFFFFBh  +
mov ecx esi +
call sub_1089907  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108A214  +
cmp byte ptr [eax+19h] 5 +
jb loc_108A214  +
push offset dword_100C4B0  +
push 7Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 0  +
push [ebp+arg_8]  +
lea eax [ebp+arg_0] +
push 2  +
push eax  +
push 0  +
push 0FFFFFFFEh  +
mov ecx esi +
call sub_1089907  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-24h] +
mov [ebp-14h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScsh_1  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [ebp+0Bh] +
call sub_102BBF1  +
mov eax [esi+40h] +
mov ecx [eax+24h] +
mov edx [esi+0D8h] +
add eax 12Ch +
cmp [ecx-8] edi +
jnz loc_108A287  +
mov [eax] edi +
jmp loc_108A289  +
mov [eax] ecx +
mov [ebp-10h] edi +
mov ecx [edx] +
lea esi [ebp-10h] +
push esi  +
push eax  +
push 9027h  +
push edi  +
push edx  +
mov byte ptr [ebp-4] 3 +
call dword ptr [ecx+78h]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108A2C7  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108A319  +
xor eax eax +
mov ecx offset dword_10F54B0 +
cmp eax ecx +
jnz loc_108A2E2  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_108A30F  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push dword ptr [ebp-10h]  +
push eax  +
call sub_1070E71  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea eax [ebp-24h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-10h] +
mov [ebp-14h] ebx +
call sub_100C763  +
lea ecx [ebp+0Bh] +
mov [ebp-4] bl +
call sub_1020056  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 8  +
mov eax offset dword_10DEC9C +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
push 0  +
push dword ptr [ebp+8]  +
lea ecx [esi-44h] +
call sub_108A234  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push 10h  +
mov eax offset byte_10D6A7F +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-14h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
lea ecx [ebp-10h] +
mov [ebp-4] ebx +
call ??0CString@@QAE@XZ  +
cmp dword ptr [ebp+0Ch] 0 +
mov byte ptr [ebp-4] 2 +
jz loc_108A42B  +
push offset aMsIts  +
lea ecx [ebp-10h] +
call ??4CString@@QAEABV0@PBG@Z  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-10h] +
call ??YCString@@QAEABV0@PBG@Z  +
push dword ptr [ebp-10h]  +
lea ecx [esi-44h] +
push dword ptr [ebp+8]  +
call sub_108A234  +
mov ecx [ebp+8] +
mov [ebp-14h] ebx +
call ds:??7SC@mmcerror@@QBEHXZ  +
test eax eax +
jz loc_108A44F  +
mov [esi+199h] bl +
lea ecx [ebp-10h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewUpdate  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
push 80070057h  +
push esi  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108A728  +
lea ecx [edi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov edi [edi+0D8h] +
push 8000FFFFh  +
push edi  +
push eax  +
mov [ebp-1Ch] eax +
lea eax [ebp-40h] +
push eax  +
mov [ebp-20h] edi +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108A5DC  +
mov eax [edi] +
lea ecx [ebp-0Dh] +
push ecx  +
push dword ptr [ebp-1Ch]  +
mov [ebp-0Dh] bl +
push edi  +
call dword ptr [eax+124h]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108A5DC  +
cmp [ebp-0Dh] bl +
jnz loc_108A5DC  +
mov [ebp-18h] ebx +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call ??0CString@@QAE@XZ  +
mov eax [edi] +
lea ecx [ebp+0Bh] +
push ecx  +
lea ecx [ebp-18h] +
push ecx  +
push dword ptr [ebp-1Ch]  +
mov byte ptr [ebp-4] 4 +
push edi  +
mov [ebp+0Bh] bl +
call dword ptr [eax+120h]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108A5C8  +
mov eax [edi] +
lea ecx [ebp-0Eh] +
push ecx  +
push dword ptr [ebp-1Ch]  +
mov [ebp-0Eh] bl +
push edi  +
call dword ptr [eax+128h]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108A5FD  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-18h] +
call sub_100C763  +
mov edi ds:DeleteMenu +
push ebx  +
push 3211h  +
push dword ptr [esi+4]  +
call edi  +
push ebx  +
push 33BAh  +
push dword ptr [esi+4]  +
call edi  +
jmp loc_108A728  +
cmp [ebp-0Eh] bl +
jz loc_108A613  +
push ebx  +
push 3211h  +
push dword ptr [esi+4]  +
call ds:DeleteMenu  +
jmp loc_108A678  +
lea eax [ebp-14h] +
cmp [ebp+0Bh] bl +
jz loc_108A636  +
mov edi 342Bh +
push edi  +
push eax  +
call sub_101220E  +
push dword ptr [ebp-18h]  +
lea eax [ebp-14h] +
push edi  +
push eax  +
call sub_105142C  +
jmp loc_108A641  +
push 342Ch  +
push eax  +
call sub_101220E  +
push ebx  +
mov edi 3211h +
push edi  +
push dword ptr [esi+4]  +
call ds:GetMenuState  +
push dword ptr [ebp-14h]  +
push edi  +
push ebx  +
cmp eax 0FFFFFFFFh +
jnz loc_108A66B  +
push 3204h  +
push dword ptr [esi+4]  +
call ds:InsertMenuW  +
jmp loc_108A675  +
push edi  +
push dword ptr [esi+4]  +
call ds:ModifyMenuW  +
mov edi [ebp-20h] +
mov eax [edi] +
lea ecx [ebp-0Fh] +
push ecx  +
push dword ptr [ebp-1Ch]  +
mov [ebp-0Fh] bl +
push edi  +
call dword ptr [eax+0F4h]  +
push eax  +
lea ecx [ebp-40h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 5 +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108A6F8  +
cmp [ebp-0Fh] bl +
jz loc_108A6F8  +
cmp [ebp+0Bh] bl +
jz loc_108A6F8  +
push dword ptr [ebp-18h]  +
lea eax [ebp-14h] +
push 0BAh  +
push eax  +
call sub_105142C  +
push ebx  +
mov edi 33BAh +
push edi  +
push dword ptr [esi+4]  +
call ds:GetMenuState  +
push dword ptr [ebp-14h]  +
push edi  +
cmp eax 0FFFFFFFFh +
jnz loc_108A6EB  +
push 400h  +
push eax  +
push dword ptr [esi+4]  +
call ds:InsertMenuW  +
jmp loc_108A707  +
push ebx  +
push edi  +
push dword ptr [esi+4]  +
call ds:ModifyMenuW  +
jmp loc_108A707  +
push ebx  +
push 33BAh  +
push dword ptr [esi+4]  +
call ds:DeleteMenu  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-18h] +
call sub_100C763  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
adc eax offset ??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
lea ecx [ebp-28h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax edi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov ebx ecx +
xor edi edi +
mov [ebp-4] edi +
mov [ebp-24h] edi +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-2Ch] +
call MFC42u_6466  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push edi  +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aCamcviewSccons  +
mov [ebp-24h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebx+0D8h] +
mov [ebp-14h] edi +
mov [ebp-18h] edi +
mov byte ptr [ebp-10h] 0 +
mov [ebp-1Ch] eax +
cmp eax edi +
jnz loc_108A8BF  +
mov ecx [ebp+8] +
mov esi 8000FFFFh +
push esi  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108A9DB  +
cmp byte ptr [eax+19h] 2 +
jb loc_108A9DB  +
push esi  +
push offset dword_100C4B0  +
push 82h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_108A9DB  +
lea edx [ebp-10h] +
push edx  +
lea edx [ebp-18h] +
push edx  +
lea edx [ebp-14h] +
push edx  +
lea ecx [ebx+44h] +
mov eax [ecx] +
lea edx [ebp-3Ch] +
push edx  +
call dword ptr [eax+2Ch]  +
mov ecx [ebp+8] +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
call esi  +
test eax eax +
jge loc_108A932  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_108A9DB  +
cmp byte ptr [ecx+19h] 2 +
jb loc_108A9DB  +
push eax  +
push offset dword_100C4B0  +
push 83h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
jmp loc_108A8B5  +
mov ecx ebx +
call sub_100C52C  +
test al al +
jnz loc_108A9AD  +
cmp [ebp-10h] al +
jnz loc_108A9AD  +
mov ecx [ebp-1Ch] +
push dword ptr [ebp-14h]  +
mov eax [ecx] +
call dword ptr [eax+58h]  +
test eax eax +
jz loc_108A9AD  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
and dword ptr [ebp-20h] 0 +
lea edx [ebp-20h] +
push edx  +
lea edx [ebp-1Ch] +
push edx  +
push 4  +
push dword ptr [ebp-14h]  +
push eax  +
call dword ptr [ecx+6Ch]  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_108A99F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_108A9DB  +
cmp byte ptr [ecx+19h] 2 +
jb loc_108A9DB  +
push eax  +
push offset dword_100C4B0  +
push 84h  +
jmp loc_108A92A  +
cmp dword ptr [ebp-20h] 0 +
jnz loc_108A9AD  +
and dword ptr [ebp-18h] 0 +
mov byte ptr [ebp-10h] 1 +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-3Ch] +
push dword ptr [ebp-18h]  +
mov ecx ebx +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
push eax  +
call sub_1087CD3  +
mov ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-28h] +
mov ecx [ebp-2Ch] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_1011CB0 +
mov dword ptr [esi+4] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp loc_1088560  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_108AA6C  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_108AA4F  +
pop ebp  +
retn 0Ch  +
***
mov eax [ecx+4] +
mov dword ptr [ecx] offset off_106BDDC +
test eax eax +
jz locret_108AABB  +
push ecx  +
lea ecx [eax+48h] +
call sub_101A545  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_108AAA5  +
test byte ptr [ebp+8] 1 +
jz loc_108AADB  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp fword ptr [eax+6Ch]  +
***
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+38h] +
call sub_100CD3C  +
push 0  +
push 1  +
lea ecx [esi+1Ch] +
call sub_100CD3C  +
push 0  +
push 1  +
mov ecx esi +
call sub_100CD3C  +
pop esi  +
retn   +
***
mov eax ds:off_108AB44 +
retn   +
***
push 40h  +
mov eax offset word_10D6C2E +
call sub_1001F95  +
mov esi ecx +
mov edi [ebp+8] +
xor ebx ebx +
cmp [esi+5] bl +
jnz loc_108AB9C  +
cmp [edi+0Ch] bl +
jnz loc_108AB9C  +
push ebx  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push 8000FFFFh  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_108ABA0  +
mov byte ptr [esi+5] 1 +
cmp [edi+0Ch] bl +
jz loc_108ABB6  +
push ebx  +
push ds:off_108ADF0  +
mov ecx edi +
call sub_10226DF  +
mov [esi+4] al +
cmp [esi+4] bl +
jz loc_108ABFE  +
push ebx  +
push ds:off_108ADF0  +
lea ecx [ebp-30h] +
push edi  +
call sub_101ECB0  +
push ecx  +
push ecx  +
mov eax esp +
add esi 44h +
lea ecx [ebp-30h] +
mov dword ptr [ebp-4] 1 +
mov [ebp+8] esp +
mov dword ptr [eax] 0Ah +
mov [eax+4] esi +
call sub_102F021  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
call sub_101EB25  +
jmp loc_108ADE0  +
test byte ptr dword_10FD578 1 +
lea edi [esi+8] +
jnz loc_108AC42  +
mov ecx ds:off_108AE08 +
xor eax eax +
inc eax  +
or dword_10FD578 eax +
mov dword_10FD568 eax +
mov eax ds:off_108AE0C +
mov dword_10FD56C eax +
mov eax ds:off_108AE10 +
mov dword_10FD564 ecx +
mov dword_10FD570 2 +
mov dword_10FD574 eax +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
mov dword ptr [ebp-4Ch] offset off_101E844 +
mov [ebp-48h] edi +
mov dword ptr [ebp-44h] offset unk_10FD560 +
mov dword ptr [ebp-40h] 3 +
lea ecx [ebp-4Ch] +
mov [eax+4] ecx +
mov ecx [ebp+8] +
mov [ebp-10h] esp +
mov dword ptr [eax] 0Eh +
push ds:off_108ADF4  +
call sub_101DF07  +
mov edi [edi] +
sub edi ebx +
jz loc_108AD16  +
dec edi  +
jz loc_108ACEC  +
dec edi  +
jnz loc_108ADBA  +
test byte ptr dword_10FD578 4 +
jnz loc_108ACAA  +
mov eax ds:off_108AE2C +
or dword_10FD578 4 +
mov dword_10FCC20 eax +
mov ecx [ebp+8] +
lea eax [esi+70h] +
mov [ebp-1Ch] eax +
lea eax [ebp-1Ch] +
push eax  +
push ds:off_108ADF8  +
mov dword ptr [ebp-18h] offset unk_10FCC1C +
mov dword ptr [ebp-14h] 1 +
call sub_101F3ED  +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [esi+28h] +
mov [ebp-10h] esp +
mov dword ptr [eax] 0Ah +
mov [eax+4] ecx +
push ds:off_108AE00  +
jmp loc_108AD09  +
push ebx  +
push ecx  +
push ecx  +
mov eax esp +
mov [esi+6Ch] ebx +
lea ecx [esi+0Ch] +
mov [ebp-10h] esp +
mov dword ptr [eax] 0Ah +
mov [eax+4] ecx +
push ds:off_108AE04  +
mov ecx [ebp+8] +
call sub_101DF07  +
jmp loc_108ADBA  +
test byte ptr dword_10FD578 2 +
jnz loc_108AD94  +
mov eax ds:off_108AE14 +
or dword_10FD578 2 +
mov dword_10FCBF0 eax +
mov eax ds:off_108AE18 +
mov dword_10FCBF8 eax +
mov eax ds:off_108AE1C +
mov dword_10FCC00 eax +
mov eax ds:off_108AE20 +
mov dword_10FCC08 eax +
mov eax ds:off_108AE24 +
mov dword_10FCC10 eax +
mov eax ds:off_108AE28 +
mov dword_10FCBF4 4 +
mov dword_10FCBFC 8 +
mov dword_10FCC04 20h +
mov dword_10FCC0C 40h +
mov dword_10FCC14 80h +
mov dword_10FCC18 eax +
mov ecx [ebp+8] +
lea eax [esi+68h] +
mov [ebp-28h] eax +
lea eax [ebp-28h] +
push eax  +
push ds:off_108ADF8  +
mov dword ptr [ebp-24h] offset unk_10FCBEC +
mov dword ptr [ebp-20h] 6 +
call sub_101F3ED  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
push ds:off_108ADFC  +
add esi 64h +
mov [ebp-3Ch] esi +
mov dword ptr [ebp-38h] offset dword_108ADE8 +
mov dword ptr [ebp-34h] 1 +
call sub_101F3ED  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+70h]  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10882DE  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScpu_2  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebp+0Ch] 0 +
push 0  +
setnz al  +
movzx eax al +
push eax  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_10254E2  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_108AEE6  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108AEEC  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
add edi edi +
adc eax offset ??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108B08D  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108B09A  +
mov eax [esi+134h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
cmp dword ptr [ebp+0Ch] 4 +
mov ebx eax +
jnz loc_108B040  +
test byte ptr [esi+28Ch] 8 +
jnz loc_108B040  +
push 80070057h  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_108B090  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call near ptr dword_1089A3C+3  +
xor eax eax +
cmp dword ptr [ebp+0Ch] 4 +
setz al  +
mov edi eax +
xor eax eax +
cmp ebx 4 +
setz al  +
cmp eax edi +
jz loc_108B08D  +
test byte ptr [esi+28Ch] 8 +
jz loc_108B08D  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+78h]  +
lea ecx [esi+94h] +
mov ebx eax +
call sub_100A5CF  +
mov ecx [eax] +
push 0  +
push edi  +
push 9021h  +
push ebx  +
push eax  +
call dword ptr [ecx+78h]  +
lea eax [ebp-28h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-48h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScaddd  +
lea ecx [ebp-48h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [edi+23Ch] +
push eax  +
lea ecx [ebp-10h] +
call sub_10881C6  +
mov esi [ebp-10h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-48h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108B1A3  +
mov ecx [ebp+8] +
lea eax [ebp-48h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
test esi esi +
jz loc_108B31B  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_108B31B  +
mov esi offset ??1CString@@QAE@XZ +
push esi  +
push offset ??0CString@@QAE@XZ  +
push 2  +
push 4  +
lea eax [ebp-28h] +
push eax  +
mov [edi+0DDh] bl +
call sub_100C8DF  +
push 2EEAh  +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_101220E  +
push 2EEBh  +
lea eax [ebp-24h] +
push eax  +
call sub_101220E  +
mov eax [ebp-28h] +
mov ecx [ebp-24h] +
mov eax [eax-8] +
mov ecx [ecx-8] +
cmp ecx eax +
jle loc_108B1F3  +
mov eax ecx +
inc eax  +
xor ecx ecx +
push 2  +
pop edx  +
mov [ebp-20h] eax +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_100F31C  +
pop ecx  +
push 8007000Eh  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-48h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108B25B  +
mov ecx [ebp+8] +
lea eax [ebp-48h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_108B2F9  +
mov eax [ebp-18h] +
mov [ebp-1Ch] eax +
mov eax [edi+0E4h] +
mov [ebp-30h] eax +
mov eax [edi+0E8h] +
mov byte ptr [ebp-4] 6 +
mov [ebp-2Ch] eax +
xor edi edi +
cmp edi ebx +
jz loc_108B2DB  +
push dword ptr [ebp+edi*4-28h]  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-18h]  +
call sub_100A593  +
push eax  +
lea ecx [ebp-48h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-48h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108B2AC  +
lea ecx [ebp-48h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
lea ecx [ebp-10h] +
call sub_100A5CF  +
push dword ptr [ebp+edi*4-30h]  +
mov ecx [eax] +
push 0  +
push dword ptr [ebp-18h]  +
push edi  +
push eax  +
call dword ptr [ecx+0Ch]  +
push eax  +
lea ecx [ebp-48h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-48h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108B2E1  +
inc edi  +
cmp edi 2 +
jl loc_108B279  +
mov ecx [ebp+8] +
lea eax [ebp-48h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-1Ch] +
mov [ebp-14h] ebx +
call sub_103B009  +
push esi  +
push 2  +
push 4  +
lea eax [ebp-28h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100C964  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
test eax eax +
jz loc_108B31B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108B3A2  +
cmp byte ptr [eax+19h] 5 +
jb loc_108B3A2  +
push offset dword_100C4B0  +
push 40h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [esi+174h] +
test ecx ecx +
jz loc_108B436  +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_4] 46h +
test edi edi +
jnz loc_108B3FA  +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_4] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call ?HitTest@CTreeCtrl@@QBEPAU_TREEITEM@@VCPoint@@PAI@Z  +
cmp [ebp+var_4] 100h +
mov edi eax +
jz loc_108B435  +
cmp [ebp+var_4] 200h +
jz loc_108B435  +
cmp [ebp+var_4] 400h +
jz loc_108B435  +
cmp [ebp+var_4] 800h +
jz loc_108B435  +
test edi edi +
jz loc_108B427  +
test byte ptr [ebp+var_4] 46h +
jz loc_108B427  +
mov ecx [esi+174h] +
push edi  +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
push 1  +
push 0  +
push 0  +
push edi  +
push 8000h  +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
push 0FFFFFFFFh  +
call sub_108941F  +
jmp loc_108B435  +
push 1  +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1089693  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
call sub_100C4D0  +
mov edi [ebp+8] +
mov esi [ebp+0Ch] +
and dword ptr [ebp-0B0h] 0 +
mov [ebp-0C4h] ecx +
push 0  +
lea ecx [ebp-0C0h] +
mov [ebp-0ACh] edi +
mov [ebp-0C8h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScin_0  +
lea ecx [ebp-0C0h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp-0C4h] +
add esi 0A8h +
push esi  +
call sub_104D550  +
push eax  +
lea ecx [ebp-0C0h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108B4EE  +
lea eax [ebp-0C0h] +
push eax  +
mov ecx edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-0C0h] +
mov [ebp-0B0h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
jmp loc_108B61E  +
mov esi offset dword_100CA88 +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp-0C4h] +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
lea ecx [ebp-0A8h] +
mov edi eax +
call sub_10230CC  +
mov eax [esi+0D8h] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
lea edx [ebp-0A8h] +
push edx  +
push edi  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx+24h]  +
push eax  +
lea ecx [ebp-0C0h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108B5E1  +
mov edi [ebp-0C8h] +
lea eax [ebp-0A8h] +
push eax  +
lea eax [ebp-0D8h] +
add edi 8 +
push eax  +
mov ecx edi +
call sub_10CD844  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-0D8h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0C0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108B5E1  +
mov ecx [ebp-0C4h] +
lea eax [ebp-30h] +
push eax  +
call sub_10209B2  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-0D8h] +
push eax  +
mov ecx edi +
call sub_10CD12D  +
push eax  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-0D8h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp-0ACh] +
lea eax [ebp-0C0h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-0A8h] +
mov [ebp-0B0h] ebx +
mov [ebp-4] bl +
call sub_100F341  +
lea ecx [ebp-0C0h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-0ACh] +
call sub_100C50D  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-1Ch] ecx +
xor edi edi +
mov [ebp-10h] edi +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-28h] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push edi  +
lea ecx [ebp-38h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewScdefe  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx offset dword_10F54B0 +
call sub_102549D  +
push 8000FFFFh  +
push eax  +
mov [ebp-20h] eax +
lea eax [ebp-48h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108B708  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_108B7E0  +
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-18h] ecx +
mov byte ptr [ebp-4] 4 +
cmp ecx edi +
jz loc_108B736  +
mov eax [ebp-1Ch] +
cmp eax edi +
jnz loc_108B728  +
xor eax eax +
jmp loc_108B72B  +
mov eax [eax+20h] +
push eax  +
call sub_107ED59  +
mov [ebp-18h] eax +
jmp loc_108B739  +
mov [ebp-18h] edi +
mov eax [ebp-18h] +
mov [ebp-14h] eax +
push 8007000Eh  +
push eax  +
lea eax [ebp-48h] +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108B785  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108B7D5  +
mov ecx [ebp-20h] +
push edi  +
push dword ptr [ebp-18h]  +
lea eax [ebp-48h] +
push eax  +
call sub_1025941  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108B776  +
mov eax [ebp-1Ch] +
push edi  +
push edi  +
push edi  +
push dword ptr [eax+20h]  +
mov [ebp-14h] edi +
call ds:PostMessageW  +
mov ecx [ebp+8] +
push edi  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea ecx [ebp-14h] +
mov [ebp-10h] ebx +
call sub_1023205  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-24h] +
mov ecx [ebp-28h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
xor edi edi +
push edi  +
lea ecx [ebp-28h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCdeferredpag_0  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx offset dword_10F54B0 +
call sub_102549D  +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108B8E2  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_108B98C  +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-18h] eax +
mov byte ptr [ebp-4] 3 +
cmp eax edi +
jz loc_108B904  +
push dword ptr [ebp+10h]  +
mov ecx eax +
push dword ptr [ebp+0Ch]  +
call near ptr byte_107EE90+1  +
mov edi eax +
mov [ebp+10h] edi +
push 8007000Eh  +
push edi  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108B974  +
mov ecx [ebp-14h] +
push ebx  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_1025941  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108B974  +
and dword ptr [ebp+10h] 0 +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp+10h] +
mov [ebp-10h] ebx +
call sub_1023205  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
push 24h  +
mov eax offset byte_10E1A5F +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScon_1  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [esi+134h]  +
lea eax [ebp-30h] +
push dword ptr [esi+130h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100CB6E  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108BA88  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108BB33  +
mov eax [ebp+0Ch] +
cmp dword ptr [eax+2Ch] 0 +
jz loc_108BAAA  +
mov [esi+2F9h] bl +
mov eax [eax+2Ch] +
mov esi [esi+130h] +
push eax  +
mov ecx esi +
call sub_107ED11  +
jmp loc_108BB26  +
mov eax [esi+134h] +
mov eax [eax+4Ch] +
test eax eax +
jz loc_108BABA  +
mov eax [eax+20h] +
push 80070057h  +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108BB26  +
mov ecx [ebp+0Ch] +
mov eax [esi+134h] +
push dword ptr [ecx+30h]  +
mov eax [eax+4Ch] +
push dword ptr [eax+20h]  +
lea eax [ebp-30h] +
push eax  +
call near ptr dword_108B854+5  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScedit  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [esi+178h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108BC1E  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108BC0F  +
cmp byte ptr [eax+19h] 3 +
jb loc_108BC0F  +
push offset dword_100C4B0  +
push 50h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108BC91  +
mov eax [esi+178h] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
cmp eax ebx +
jz loc_108BC71  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108BC54  +
cmp byte ptr [eax+19h] 3 +
jb loc_108BC54  +
push offset dword_100C4B0  +
push 51h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108BC91  +
mov eax [esi+178h] +
mov esi [eax+4Ch] +
push 2  +
push 0FFFFFFFFh  +
mov ecx esi +
call sub_107E863  +
push eax  +
push dword ptr [esi+20h]  +
push dword ptr [ebp+8]  +
call near ptr dword_108B854+5  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov eax lpDst +
mov esi offset lpDst +
mov edi offset dword_100C4B0 +
cmp eax esi +
jz loc_108BD30  +
cmp byte ptr [eax+19h] 5 +
jb loc_108BD30  +
push edi  +
push 63h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax lpDst +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_108BD5C  +
cmp eax esi +
jz loc_108BE27  +
cmp byte ptr [eax+19h] 2 +
jb loc_108BE27  +
push edi  +
push 64h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_108BE27  +
cmp dword ptr [ecx+8] 0 +
jnz loc_108BD79  +
cmp eax esi +
jz loc_108BE27  +
cmp byte ptr [eax+19h] 2 +
jb loc_108BE27  +
push edi  +
push 65h  +
jmp loc_108BD4C  +
and [ebp+arg_0] 0 +
lea eax [ebp+arg_0] +
push eax  +
push ecx  +
mov ecx ebx +
call sub_1023EDA  +
cmp eax 1 +
jnz loc_108BDAA  +
mov eax lpDst +
cmp eax esi +
jz loc_108BE27  +
cmp byte ptr [eax+19h] 5 +
jb loc_108BE27  +
push edi  +
push 66h  +
jmp loc_108BD4C  +
mov eax [ebx+0D8h] +
test eax eax +
jnz loc_108BDC8  +
mov eax lpDst +
cmp eax esi +
jz loc_108BE27  +
cmp byte ptr [eax+19h] 2 +
jb loc_108BE27  +
push edi  +
push 67h  +
jmp loc_108BD4C  +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1023D6C  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jge loc_108BDF1  +
mov eax lpDst +
cmp eax esi +
jz loc_108BE27  +
cmp byte ptr [eax+19h] 2 +
jb loc_108BE27  +
push edi  +
push 68h  +
jmp loc_108BD4C  +
mov eax [ebp+arg_0] +
mov [ebp+lParam] eax +
mov eax [ebp+var_4] +
mov [ebp+var_8] eax +
lea eax [ebp+lParam] +
push eax  +
mov eax [ebx+174h] +
push 0  +
push 1115h  +
mov [ebp+var_C] offset loc_107FCBB +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108BE63  +
cmp byte ptr [eax+19h] 5 +
jb loc_108BE63  +
push offset dword_100C4B0  +
push 69h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov edi [ebp+arg_0] +
and [ebp+lParam] 0 +
lea eax [ebp+lParam] +
push eax  +
push edi  +
mov ecx esi +
call sub_1023EDA  +
mov ebx eax +
cmp ebx 1 +
jz loc_108BF4F  +
mov ecx [esi+174h] +
call sub_100C573  +
mov eax [edi+20h] +
mov edi eax +
shr eax 1 +
and eax 1 +
and edi 1 +
mov [ebp+var_8] eax +
test ebx ebx +
jz loc_108BEA6  +
cmp [ebp+lParam] 0 +
jnz loc_108BEBB  +
mov ecx [esi+174h] +
call sub_100C5D1  +
xor edi edi +
inc edi  +
and [ebp+var_8] 0 +
mov [ebp+lParam] eax +
cmp edi 1 +
jnz loc_108BF25  +
push [ebp+lParam]  +
mov ecx [esi+174h] +
call sub_100C803  +
push eax  +
mov ecx esi +
call sub_1041E7B  +
test eax eax +
jz loc_108BF25  +
mov ecx esi +
call sub_1084EE6  +
test al al +
jz loc_108BF25  +
push [ebp+lParam]  +
mov ecx [esi+174h] +
mov ebx [esi+0D8h] +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx [ebx] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
push ebx  +
call dword ptr [ecx+44h]  +
test eax eax +
jl loc_108BF25  +
cmp [ebp+arg_0] 0 +
jz loc_108BF25  +
mov eax [esi+174h] +
mov eax [eax+94h] +
mov ecx [eax] +
push 0  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+10h]  +
mov ecx [esi+174h] +
push edi  +
push [ebp+lParam]  +
call sub_1052963  +
test edi edi +
jnz loc_108BF4F  +
cmp [ebp+var_8] 1 +
jnz loc_108BF4F  +
mov ecx [esi+174h] +
push 60h  +
push edi  +
push [ebp+lParam]  +
call sub_107ECED  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewOnup_1  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
cmp [esi+8] ebx +
jnz loc_108BFA1  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_108C02D  +
lea eax [ebp+8] +
push eax  +
push esi  +
mov ecx edi +
mov [ebp+8] ebx +
call sub_1023EDA  +
cmp eax 2 +
jnz loc_108C02D  +
cmp [ebp+8] ebx +
jz loc_108C02D  +
mov ecx [edi+174h] +
call sub_100C573  +
mov esi [esi+20h] +
mov ebx eax +
mov [ebp-10h] ebx +
and esi 1 +
jmp loc_108BFE5  +
cmp ebx [ebp+8] +
jz loc_108BFEE  +
mov ecx [edi+174h] +
push ebx  +
call sub_100C803  +
mov ebx eax +
test ebx ebx +
jnz loc_108BFD2  +
cmp [ebp+8] ebx +
jnz loc_108C02D  +
cmp esi 1 +
jnz loc_108C003  +
push dword ptr [ebp+8]  +
mov ecx [edi+174h] +
call sub_100C803  +
mov ebx eax +
test ebx ebx +
jnz loc_108C00A  +
mov ebx [ebp+8] +
cmp ebx [ebp-10h] +
jz loc_108C02D  +
push dword ptr [ebp-10h]  +
mov ecx [edi+174h] +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
test ebx ebx +
jz loc_108C02D  +
mov ecx [edi+174h] +
push ebx  +
call sub_1027213  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
mov esi ecx +
call ds:GetFocus  +
push 8006h  +
mov ecx esi +
mov edi eax +
call sub_108AE35  +
test eax eax +
jz loc_108C0CA  +
push 8  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call sub_108A81F  +
jmp loc_108C0E0  +
cmp dword ptr [esi+270h] 1 +
jnz loc_108C0E9  +
push 4  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call sub_107E75A  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
push edi  +
call ds:SetFocus  +
pop edi  +
pop esi  +
leave   +
retn   +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewOnverb  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+8] +
sub eax 3395h +
jz loc_108C302  +
dec eax  +
jz loc_108C2D2  +
dec eax  +
jz loc_108C1D0  +
dec eax  +
jz loc_108C193  +
dec eax  +
jz loc_108C187  +
dec eax  +
jnz loc_108C33F  +
push 8007h  +
mov ecx edi +
call sub_108AE35  +
test eax eax +
jz loc_108C33F  +
push 6  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx edi +
call sub_108A81F  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 6 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-3Ch] +
jmp loc_108C336  +
mov ecx edi +
call sub_108C097  +
jmp loc_108C33F  +
push 8005h  +
mov ecx edi +
call sub_108AE35  +
test eax eax +
jz loc_108C33F  +
push 7  +
lea eax [ebp-8Ch] +
push eax  +
mov ecx edi +
call sub_108A81F  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 7 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-8Ch] +
jmp loc_108C336  +
push 8002h  +
mov ecx edi +
call sub_108AE35  +
test eax eax +
jz loc_108C33F  +
lea edx [ebp+0Bh] +
push edx  +
lea edx [ebp-28h] +
push edx  +
lea edx [ebp-14h] +
push edx  +
lea ecx [edi+44h] +
mov eax [ecx] +
lea edx [ebp-6Ch] +
push edx  +
mov [ebp-14h] ebx +
mov [ebp-28h] ebx +
mov [ebp+0Bh] bl +
call dword ptr [eax+2Ch]  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-6Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108C33F  +
mov eax [edi+0D8h] +
push 8000FFFFh  +
push dword ptr [ebp-14h]  +
mov [ebp-2Ch] eax +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-4Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108C33F  +
mov eax [ebp-2Ch] +
lea edx [ebp-0Dh] +
push edx  +
push dword ptr [ebp-28h]  +
movzx edx byte ptr [ebp+0Bh] +
push edx  +
push dword ptr [ebp-14h]  +
mov [ebp-0Dh] bl +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+108h]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108C33F  +
cmp [ebp-0Dh] bl +
jz loc_108C33F  +
push 4  +
lea eax [ebp-5Ch] +
push eax  +
mov ecx edi +
call sub_108A81F  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-5Ch] +
jmp loc_108C336  +
push 8001h  +
mov ecx edi +
call sub_108AE35  +
test eax eax +
jz loc_108C33F  +
push 3  +
lea eax [ebp-7Ch] +
push eax  +
mov ecx edi +
call sub_108A81F  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-7Ch] +
jmp loc_108C336  +
push 8008h  +
mov ecx edi +
call sub_108AE35  +
test eax eax +
jz loc_108C33F  +
push 2  +
lea eax [ebp-9Ch] +
push eax  +
mov ecx edi +
call sub_108A81F  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-9Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:GetKeyState +
push edi  +
xor ebx ebx +
push 11h  +
mov edi ecx +
inc ebx  +
call esi  +
test ax ax +
jge loc_108C3ED  +
movzx eax [ebp+arg_0] +
sub eax 2Dh +
jz loc_108C3E6  +
sub eax 16h +
jz loc_108C3E6  +
sub eax 13h +
jz loc_108C3DF  +
dec eax  +
dec eax  +
jz loc_108C3D8  +
sub eax 0Bh +
jz loc_108C3E6  +
sub eax 13h +
jz loc_108C3DF  +
dec eax  +
dec eax  +
jnz loc_108C40B  +
push 3395h  +
jmp loc_108C414  +
push 3397h  +
jmp loc_108C414  +
push 3396h  +
jmp loc_108C414  +
push 10h  +
call esi  +
test ax ax +
jge loc_108C404  +
movzx eax [ebp+arg_0] +
sub eax 2Dh +
jz loc_108C3DF  +
dec eax  +
jnz loc_108C40B  +
jmp loc_108C3D8  +
cmp [ebp+arg_0] 71h +
jz loc_108C40F  +
xor ebx ebx +
jmp loc_108C41B  +
push 3398h  +
mov ecx edi +
call sub_108C0F9  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
push 30h  +
mov eax offset dword_10D7288 +
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewOnappc  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+0Ch] +
shr eax 10h +
and eax 0FFFh +
dec eax  +
jz loc_108C4D6  +
dec eax  +
jz loc_108C487  +
dec eax  +
jnz loc_108C4BC  +
mov ecx esi +
call sub_108C097  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
inc eax  +
call sub_1001FCF  +
retn 8  +
***
push 2  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call sub_107E75A  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108C46F  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
jmp loc_108C47F  +
***
push 1  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx esi +
call sub_107E75A  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-3Ch] +
jmp loc_108C4A5  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewScex_0  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+8] ebx +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
jle loc_108C56A  +
cmp dword ptr [ebp+8] 8009h +
jl loc_108C5C8  +
push 80070057h  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call esi  +
cmp eax ebx +
mov [ebp-10h] eax +
jge loc_108C5C8  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108C5AE  +
cmp byte ptr [eax+19h] 2 +
jb loc_108C5AE  +
push dword ptr [ebp-10h]  +
push offset dword_100C4B0  +
push 9Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov esi [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
cmp dword ptr [ebp+8] 8005h +
jnz loc_108C647  +
cmp [edi+270h] ebx +
jnz loc_108C5EA  +
lea eax [ebp-40h] +
push eax  +
mov ecx edi +
call near ptr dword_108BB7C+3  +
mov byte ptr [ebp-4] 1 +
jmp loc_108C624  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108C611  +
cmp byte ptr [eax+19h] 2 +
jb loc_108C611  +
push offset dword_100C4B0  +
push 9Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 345Bh  +
lea eax [ebp-40h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
mov byte ptr [ebp-4] 2 +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call esi  +
mov esi eax +
jmp loc_108C5B1  +
***
cmp [edi+270h] ebx +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
mov dword ptr [ebp-10h] 0FFFFFFF6h +
jnz loc_108C6FB  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
mov ecx edi +
call sub_10872A3  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call ebx  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call esi  +
mov [ebp-18h] eax +
test eax eax +
jge loc_108C6C4  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108C6BC  +
cmp byte ptr [eax+19h] 2 +
jb loc_108C6BC  +
push dword ptr [ebp-18h]  +
push offset dword_100C4B0  +
push 9Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov esi [ebp-18h] +
jmp loc_108C5B1  +
***
cmp dword ptr [ebp-10h] 0FFFFFFF6h +
jnz loc_108C702  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108C6F1  +
cmp byte ptr [eax+19h] 2 +
jb loc_108C6F1  +
push offset dword_100C4B0  +
push 0A0h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov esi 8007054Fh +
jmp loc_108C5B1  +
***
mov dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [edi+44h] +
mov eax [ecx] +
mov [ebp-20h] ecx +
call dword ptr [eax+78h]  +
push 80004005h  +
push eax  +
mov [ebp-1Ch] eax +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call ebx  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call esi  +
mov [ebp-18h] eax +
test eax eax +
jge loc_108C76E  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108C6BC  +
cmp byte ptr [eax+19h] 2 +
jb loc_108C6BC  +
push dword ptr [ebp-18h]  +
push offset dword_100C4B0  +
push 0A1h  +
jmp loc_108C6B1  +
***
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 5 +
call sub_100A5E6  +
push eax  +
push offset dword_1023D6C  +
lea ecx [edi+0D8h] +
call sub_107FF60  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call esi  +
mov [ebp-18h] eax +
test eax eax +
jge loc_108C7F4  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108C7DA  +
cmp byte ptr [eax+19h] 3 +
jb loc_108C7DA  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-30h] +
call esi  +
push eax  +
mov eax lpDst +
push offset dword_100C4B0  +
push 0A2h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_108C6BC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_108C6BC  +
***
lea ecx [ebp-14h] +
call sub_100A5CF  +
push dword ptr [ebp-10h]  +
mov ecx [eax] +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+13Ch]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
cmp dword ptr [ebp+8] 8008h +
jnz loc_108C85B  +
lea ecx [ebp-30h] +
call ds:??7SC@mmcerror@@QBEHXZ  +
test eax eax +
jz loc_108C85B  +
cmp dword ptr [edi+270h] 0 +
jnz loc_108C85B  +
mov ecx [ebp-20h] +
mov eax [ecx] +
push 0  +
lea edx [ebp-40h] +
push edx  +
call dword ptr [eax]  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 6 +
call ebx  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call esi  +
mov esi eax +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_108C5B1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_108C5B1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_108AA25  +
test [ebp+arg_0] 1 +
jz loc_108C8AD  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_108C8D5  +
mov eax 80004003h +
jmp loc_108C943  +
push 5Ch  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_108C901  +
push esi  +
call near ptr dword_108AAE4+3  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_108C917  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_108C911 +
retn   +
***
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_108C93C  +
lea ecx [esi+8] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_108C92F  +
xor ebx ebx +
test ebx ebx +
jz loc_108C93F  +
push 1  +
mov ecx esi +
call sub_108C893  +
xor esi esi +
jmp loc_108C93F  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_108AB0D  +
test [ebp+arg_0] 1 +
jz loc_108C96A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A9CC  +
test byte ptr [ebp+8] 1 +
jz loc_108C990  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100C3CD  +
test byte ptr [ebp+8] 1 +
jz loc_108C9B6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 20h  +
mov eax offset dword_10D75A0 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-14h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
mov ecx [ebp+8] +
xor ebx ebx +
inc ebx  +
push 0  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aCamcviewScto_1  +
mov [ebp-14h] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+1B4h] +
shr eax 7 +
and al bl +
push ebx  +
setz al  +
movzx eax al +
push 0  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [esi-44h] +
call sub_102502E  +
mov ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108CA74  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108CA74  +
cmp byte ptr [eax+19h] 3 +
jb loc_108CA74  +
push offset dword_100C4B0  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewRename  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 1  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
xor eax eax +
push 9  +
pop ecx  +
lea edi [ebp-54h] +
stos   +
mov eax [ebp+0Ch] +
mov [ebp-54h] eax +
mov eax [ebp+10h] +
mov [ebp-48h] eax +
cmp [ebp+14h] ebx +
jz loc_108CB54  +
mov esi ds:SetCapture +
push ebx  +
call esi  +
mov ecx [ebp-10h] +
add ecx 0D8h +
mov edi eax +
call sub_100A5CF  +
push dword ptr [ebp+14h]  +
mov ecx [eax] +
lea edx [ebp-54h] +
push edx  +
push 9016h  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+78h]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push edi  +
call esi  +
push ebx  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
mov esi [ebp+18h] +
movzx eax al +
lea ecx [ebp-30h] +
mov [esi] eax +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [esi] ebx +
jz loc_108CBC0  +
mov ecx [ebp-10h] +
lea eax [ebp-30h] +
push eax  +
call sub_10285EC  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108CBC0  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
inc eax  +
call sub_1001FCF  +
retn 14h  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewSconle  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 8000FFFFh  +
push dword ptr [esi+178h]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108CC87  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108CDFF  +
mov eax [esi+178h] +
mov eax [eax+4Ch] +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108CDF2  +
lea eax [ebp-20h] +
push eax  +
call ds:GetCursorPos  +
lea eax [ebp-20h] +
push eax  +
mov eax [ebp-14h] +
push dword ptr [eax+20h]  +
call ds:ScreenToClient  +
mov ecx [ebp-14h] +
and dword ptr [ebp-18h] 0 +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-20h]  +
call ?HitTest@CListCtrl@@QBEHVCPoint@@PAI@Z  +
mov [ebp-14h] eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108CD23  +
cmp byte ptr [eax+19h] 5 +
jb loc_108CD23  +
push dword ptr [ebp-14h]  +
push offset dword_100C4B0  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
cmp dword ptr [ebp-14h] 0FFFFFFFFh +
jnz loc_108CDF2  +
test byte ptr [ebp-18h] 78h +
jnz loc_108CDF2  +
mov eax [esi+178h] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
test eax eax +
jnz loc_108CDF2  +
mov eax [esi+0D8h] +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108CDF2  +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push 9  +
pop ecx  +
mov edx eax +
xor eax eax +
lea edi [ebp-64h] +
stos   +
lea eax [ebp-64h] +
push eax  +
push ebx  +
push 0  +
push edx  +
push dword ptr [ebp-14h]  +
lea eax [ebp-40h] +
push eax  +
mov ecx esi +
mov [ebp-64h] ebx +
mov [ebp-50h] ebx +
mov [ebp-60h] ebx +
mov dword ptr [ebp-58h] 0FFFFFFFEh +
call sub_101864F  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108CDF2  +
lea ecx [ebp-30h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewOnli_0  +
lea ecx [ebp-24h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+8] +
mov eax [edi+18h] +
mov ecx [edi+14h] +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
shr eax 1 +
shr ecx 1 +
and al 1 +
and cl 1 +
test byte ptr [edi+1Ch] 8 +
jz loc_108D124  +
cmp al cl +
jz loc_108D124  +
mov eax [esi+178h] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
mov [ebp-10h] eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108CF22  +
cmp byte ptr [eax+19h] 5 +
jb loc_108CF22  +
test byte ptr [edi+18h] 2 +
mov ecx offset aDe +
jnz loc_108CF09  +
mov ecx offset asc_106BDF8 +
push dword ptr [ebp-10h]  +
push ecx  +
push dword ptr [edi+0Ch]  +
push offset dword_100C4B0  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CC2CD  +
xor eax eax +
push 9  +
pop ecx  +
lea edi [ebp-58h] +
stos   +
lea edi [esi+1F8h] +
cmp [edi+78h] eax +
mov ecx [edi] +
mov [ebp-58h] eax +
mov [ebp-50h] eax +
setz al  +
shr ecx 4 +
and al cl +
test al 1 +
mov eax [ebp+8] +
jz loc_108CF51  +
mov eax [eax+0Ch] +
jmp loc_108CF54  +
mov eax [eax+28h] +
mov ecx esi +
mov [ebp-4Ch] eax +
call sub_101D08C  +
mov [ebp-14h] eax +
test eax eax +
jnz loc_108CF7E  +
xor bl bl +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov al bl +
call sub_1001FCF  +
retn 4  +
push 10h  +
call sub_107FFD0  +
test al al +
jnz loc_108CF94  +
push 11h  +
call sub_107FFD0  +
test al al +
jz loc_108CFF2  +
mov eax [esi+178h] +
mov ecx [ebp-14h] +
mov edi [eax+4Ch] +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
cmp eax edi +
jnz loc_108CFF2  +
cmp dword ptr [ebp-10h] 1 +
jle loc_108CFF2  +
lea eax [ebp-34h] +
push eax  +
mov ecx esi +
call sub_1082131  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108CFEB  +
lea ecx [ebp-24h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov bl 1 +
jmp loc_108CF67  +
lea ecx [esi+44h] +
mov eax [ecx] +
mov byte ptr [esi+0F4h] 0 +
call dword ptr [eax+78h]  +
mov edi [esi+0D8h] +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ebx  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108CFEB  +
mov eax [ebp+8] +
test byte ptr [eax+18h] 2 +
jz loc_108D0AC  +
xor eax eax +
cmp [ebp-10h] eax +
jnz loc_108D08F  +
lea ecx [ebp-58h] +
push ecx  +
push eax  +
mov ecx esi +
cmp [esi+0ECh] al +
jnz loc_108D074  +
push eax  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push edi  +
push eax  +
call sub_101864F  +
mov byte ptr [ebp-4] 3 +
jmp loc_108D0FB  +
push 1  +
push dword ptr [ebp-14h]  +
mov [esi+0ECh] al +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_101864F  +
mov byte ptr [ebp-4] 4 +
jmp loc_108D0FB  +
cmp [esi+0ECh] al +
jz loc_108D124  +
lea eax [ebp-34h] +
push eax  +
mov ecx esi +
call sub_1082131  +
mov byte ptr [ebp-4] 5 +
jmp loc_108D0FB  +
test byte ptr [eax+14h] 2 +
jz loc_108D124  +
mov eax [ebp-10h] +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jnz loc_108D0D8  +
lea eax [ebp-58h] +
push eax  +
push ecx  +
push 0  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push edi  +
push eax  +
mov ecx esi +
call sub_101864F  +
mov byte ptr [ebp-4] 6 +
jmp loc_108D0FB  +
mov [ebp-38h] eax +
lea eax [ebp-58h] +
push eax  +
push ecx  +
push ecx  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push edi  +
push eax  +
mov ecx esi +
mov byte ptr [esi+0ECh] 1 +
call sub_101864F  +
mov byte ptr [ebp-4] 7 +
push eax  +
lea ecx [ebp-24h] +
call ebx  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108D124  +
lea ecx [ebp-24h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov eax [ebp+8] +
test byte ptr [eax+1Ch] 1 +
jz loc_108CFEB  +
lea edi [esi+178h] +
mov eax [edi] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
cmp eax 1 +
jnz loc_108CFEB  +
mov eax [edi] +
mov ecx [eax+4Ch] +
push 2  +
push 0FFFFFFFFh  +
call sub_107E863  +
mov ecx [ebp+8] +
cmp eax [ecx+0Ch] +
jnz loc_108CFEB  +
mov ecx esi +
lea edi [esi+44h] +
call sub_10873DD  +
push eax  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+78h]  +
push eax  +
push esi  +
push offset loc_107FF93  +
lea eax [ebp-34h] +
push eax  +
lea ecx [esi+5Ch] +
call sub_102751F  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 8 +
call ebx  +
jmp loc_108CFC8  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-28h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewSccr_1  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [esi+318h] +
push edi  +
mov [ebp-18h] ecx +
call sub_100EB41  +
test al al +
jz loc_108D228  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108D2A0  +
lea eax [ebp-14h] +
push eax  +
mov [ebp-14h] edi +
call near ptr dword_108C8B4+5  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108D293  +
mov edi [ebp-14h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108D293  +
mov ecx [ebp-18h] +
lea eax [ebp-14h] +
push eax  +
mov [edi+24h] esi +
call sub_10881FC  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push 20h  +
mov eax offset byte_10DA2FD +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewOnconn  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+8]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108D384  +
lea ecx [ebp-1Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
lea eax [ebp-2Ch] +
push eax  +
mov ecx edi +
call near ptr dword_108D1D0+5  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108D362  +
add edi 318h +
mov eax [edi] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108D362  +
mov ecx edi +
call sub_100A5CF  +
push dword ptr [ebp+8]  +
mov ecx [eax] +
push offset dword_1048258  +
push eax  +
call dword ptr [ecx]  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_108D362  +
***
sub ds:byte_10D7885[eax] bh +
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-24h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewSconco  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
call ds:IsWindow  +
test eax eax +
jnz loc_108D4AA  +
push ebx  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108D673  +
lea eax [ebp-34h] +
cmp [ebp+10h] edi +
jnz loc_108D505  +
mov ecx [esi+178h] +
push edi  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1097FD8  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108D4F4  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_108D676  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_108D65F  +
push eax  +
mov ecx esi +
call near ptr dword_108D1D0+5  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108D666  +
push 8000FFFFh  +
push dword ptr [esi+178h]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108D666  +
mov ecx [esi+174h] +
add ecx 88h +
call sub_100A5CF  +
push dword ptr [esi+178h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+58h]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108D666  +
mov eax [esi+0D8h] +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108D666  +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push dword ptr [esi+178h]  +
mov ecx [ebp-14h] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+0A8h]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108D666  +
push dword ptr [esi+2D0h]  +
mov ecx esi +
call near ptr dword_1085270+16h  +
push dword ptr [ebp+10h]  +
mov ecx [esi+178h] +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_1097FD8  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 6 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108D666  +
mov ecx esi +
call sub_100DA2C  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewOnlist  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
or eax 0FFFFFFFFh +
cmp [esi+270h] ebx +
jnz loc_108D7C3  +
mov eax [esi+178h] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
mov [ebp-14h] eax +
cmp eax ebx +
jnz loc_108D72B  +
push 1  +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
push ebx  +
push 0FFFFFFFEh  +
jmp loc_108D83F  +
cmp eax 1 +
jle loc_108D7CE  +
push 10h  +
call sub_107FFD0  +
test al al +
jnz loc_108D74A  +
push 11h  +
call sub_107FFD0  +
test al al +
jz loc_108D7C0  +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov edx [esi+0D8h] +
mov [ebp-10h] eax +
cmp edx ebx +
jz loc_108D7C0  +
push 9  +
pop ecx  +
xor eax eax +
lea edi [ebp-58h] +
stos   +
mov eax [ebp-14h] +
mov [ebp-38h] eax +
lea eax [ebp-58h] +
push eax  +
push 1  +
push 1  +
push dword ptr [ebp-10h]  +
lea eax [ebp-34h] +
push edx  +
push eax  +
mov ecx esi +
mov [ebp-44h] ebx +
call sub_101864F  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108D7B9  +
lea ecx [ebp-24h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov byte ptr [esi+0ECh] 1 +
push 0FFFFFFFDh  +
pop eax  +
push 1  +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
push ebx  +
push eax  +
jmp loc_108D83F  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
mov dword ptr [ebp-10h] 0FFFFFFF6h +
call sub_1086250  +
lea edi [esi+1F8h] +
cmp [edi+78h] ebx +
mov edx [edi] +
setz cl  +
shr edx 4 +
and cl dl +
mov [ebp-14h] eax +
test cl 1 +
jz loc_108D805  +
push 1  +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
push eax  +
jmp loc_108D7CB  +
push dword ptr [ebp-10h]  +
call sub_1054C16  +
cmp eax ebx +
jz loc_108D846  +
cmp dword ptr [eax+0Ch] 3951589h +
push 1  +
push ebx  +
push ebx  +
jnz loc_108D836  +
push ebx  +
push 8000h  +
push dword ptr [ebp+8]  +
mov ecx esi +
push dword ptr [eax+14h]  +
push dword ptr [ebp-14h]  +
call sub_108941F  +
jmp loc_108D846  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_1089907  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
push 50h  +
mov eax offset byte_10D7957 +
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewOnproc  +
lea ecx [ebp-28h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-38h] +
push eax  +
mov ecx esi +
call sub_10864EF  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ebx  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108DACA  +
lea eax [esi+0F4h] +
cmp byte ptr [eax] 0 +
jz loc_108DACA  +
mov edi [esi+0D8h] +
lea ecx [esi+44h] +
mov byte ptr [eax] 0 +
mov eax [ecx] +
mov [ebp-14h] edi +
call dword ptr [eax+78h]  +
push 8000FFFFh  +
push dword ptr [esi+178h]  +
mov [ebp-10h] eax +
push edi  +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_100CB6E  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ebx  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108DACA  +
cmp [esi+0ECh] al +
jz loc_108D9C3  +
push 9  +
pop ecx  +
xor eax eax +
lea edi [ebp-5Ch] +
stos   +
and [ebp-48h] eax +
lea eax [ebp-5Ch] +
push eax  +
push 0  +
push 1  +
push dword ptr [ebp-10h]  +
lea eax [ebp-38h] +
push dword ptr [ebp-14h]  +
mov ecx esi +
push eax  +
call sub_101864F  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call ebx  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108D9BC  +
lea ecx [ebp-28h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov byte ptr [esi+0ECh] 0 +
mov eax [esi+178h] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
mov [ebp-18h] eax +
cmp eax 1 +
jnz loc_108DA40  +
push 9  +
xor eax eax +
pop ecx  +
lea edi [ebp-5Ch] +
stos   +
and [ebp-5Ch] eax +
lea eax [ebp-50h] +
push eax  +
mov ecx esi +
call sub_1086250  +
lea eax [ebp-5Ch] +
push eax  +
push 1  +
push 0  +
push dword ptr [ebp-10h]  +
lea eax [ebp-38h] +
push dword ptr [ebp-14h]  +
mov ecx esi +
push eax  +
call sub_101864F  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call ebx  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108DACA  +
lea ecx [ebp-28h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_108DACA  +
jbe loc_108DACA  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108DA6A  +
cmp byte ptr [eax+19h] 5 +
jb loc_108DA6A  +
push offset dword_100C4B0  +
push 4Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 9  +
pop ecx  +
xor eax eax +
lea edi [ebp-5Ch] +
stos   +
and [ebp-48h] eax +
mov eax [ebp-18h] +
mov [ebp-3Ch] eax +
lea eax [ebp-5Ch] +
push eax  +
push 1  +
push 1  +
push dword ptr [ebp-10h]  +
lea eax [ebp-38h] +
push dword ptr [ebp-14h]  +
mov ecx esi +
push eax  +
call sub_101864F  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call ebx  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108DAC3  +
lea ecx [ebp-28h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov byte ptr [esi+0ECh] 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewClosev  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108DB35  +
cmp byte ptr [eax+19h] 5 +
jb loc_108DB35  +
push offset dword_100C4B0  +
push 74h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push esi  +
push offset loc_1054D38  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [esi+5Ch] +
call sub_100FB75  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108DB78  +
lea ecx [ebp-1Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov eax [esi+40h] +
test eax eax +
jz loc_108DB95  +
mov eax [eax+0E0h] +
test eax eax +
jz loc_108DB95  +
push dword ptr [esi+0CCh]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
jmp sub_1073B5A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_106BEE4 +
call sub_1073B5A  +
test byte ptr [ebp+8] 1 +
jz loc_108DC05  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1076002  +
mov dword ptr [esi] offset off_106BEE4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov ebx ecx +
xor esi esi +
push esi  +
lea ecx [ebp-2Ch] +
mov [ebp-18h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCamcviewSclist  +
lea ecx [ebp-2Ch] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebx+178h] esi +
jnz loc_108DC9F  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-18h] edi +
jmp loc_108DF7B  +
mov eax [ebx+0D8h] +
push 8000FFFFh  +
push eax  +
mov [ebp-10h] eax +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108DCF9  +
lea ecx [ebp-2Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108DC97  +
lea ecx [ebx+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov [ebp-14h] eax +
xor eax eax +
push 9  +
pop ecx  +
lea edi [ebp-60h] +
stos   +
and [ebp-60h] eax +
mov edi [ebp-10h] +
xor ecx ecx +
inc ecx  +
lea eax [ebx+0F4h] +
cmp byte ptr [eax] 0 +
mov [ebp-4Ch] ecx +
jz loc_108DDA3  +
mov byte ptr [eax] 0 +
lea eax [ebp-60h] +
push eax  +
push 0  +
push ecx  +
push dword ptr [ebp-14h]  +
lea eax [ebp-3Ch] +
push edi  +
push eax  +
mov ecx ebx +
call sub_101864F  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108DD6B  +
lea ecx [ebp-2Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx ebx +
call sub_10864EF  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108DDA3  +
lea ecx [ebp-2Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov eax [ebx+178h] +
mov ecx [eax+4Ch] +
call sub_1054B78  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jle loc_108DF07  +
lea eax [ebp-60h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-3Ch] +
push ecx  +
push dword ptr [ebp-14h]  +
mov ecx ebx +
push edi  +
push eax  +
call sub_101864F  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108DE00  +
lea ecx [ebp-2Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
and dword ptr [ebp-10h] 0 +
mov esi [edi] +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 6 +
call sub_100A5E6  +
push eax  +
push offset dword_1023D6C  +
push edi  +
call dword ptr [esi]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-2Ch] +
call esi  +
test eax eax +
jge loc_108DE83  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_108DE69  +
cmp byte ptr [ecx+19h] 3 +
jb loc_108DE69  +
push eax  +
lea ecx [ebp-2Ch] +
call esi  +
push eax  +
mov eax lpDst +
push offset dword_100C4B0  +
push 85h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_108DF67  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_108DF67  +
and dword ptr [ebp-1Ch] 0 +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push dword ptr [ebp-14h]  +
push eax  +
call dword ptr [ecx+148h]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call esi  +
test eax eax +
jge loc_108DEEF  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_108DE69  +
cmp byte ptr [ecx+19h] 3 +
jb loc_108DE69  +
push eax  +
lea ecx [ebp-2Ch] +
call esi  +
push eax  +
push dword ptr [ebp-14h]  +
mov eax lpDst +
push offset dword_100C4B0  +
push 86h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10C9315  +
jmp loc_108DE69  +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_108DE69  +
mov al [ebp+0Ch] +
mov [ebx+0ECh] al +
jmp loc_108DE69  +
test eax eax +
jnz loc_108DF17  +
mov [ebp-5Ch] ecx +
mov dword ptr [ebp-54h] 0FFFFFFFEh +
jmp loc_108DF22  +
lea eax [ebp-54h] +
push eax  +
mov ecx ebx +
call sub_1086250  +
lea eax [ebp-60h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-3Ch] +
push 0  +
push dword ptr [ebp-14h]  +
mov ecx ebx +
push edi  +
push eax  +
call sub_101864F  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108DF67  +
lea ecx [ebp-2Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-18h] 1 +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov esi ecx +
call ds:GetFocus  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov ecx [esi+178h] +
mov edi [ecx+4Ch] +
cmp eax edi +
jnz loc_108E0B7  +
push 2  +
push 0FFFFFFFFh  +
mov ecx edi +
call sub_107E863  +
and [ebp+Point.x] 0 +
and [ebp+Point.y] 0 +
cmp eax 0FFFFFFFFh +
jz loc_108E051  +
push 1  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
mov ecx edi +
call ?GetItemRect@CListCtrl@@QBEHHPAUtagRECT@@I@Z  +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+Rect] +
call sub_107E56E  +
mov ecx [eax] +
mov [ebp+Point.x] ecx +
mov eax [eax+4] +
mov [ebp+Point.y] eax +
jmp loc_108E08A  +
mov eax [esi+178h] +
mov ecx [eax+4Ch] +
push ebx  +
call sub_100E4E1  +
mov ebx eax +
test ebx ebx +
jz loc_108E089  +
push dword ptr [ebx+20h]  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_108E089  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetClientRect  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
mov [ebp+Point.y] eax +
pop ebx  +
lea eax [ebp+Point] +
push eax  +
push edi  +
call sub_107F57E  +
lea eax [ebp+Point] +
push eax  +
mov eax [esi+178h] +
mov eax [eax+4Ch] +
push dword ptr [eax+20h]  +
call ds:ClientToScreen  +
lea eax [ebp+Point] +
push eax  +
mov ecx esi +
call sub_108D6CD  +
jmp loc_108E129  +
mov ecx [esi+174h] +
cmp eax ecx +
jnz loc_108E129  +
call sub_100C573  +
mov edi eax +
test edi edi +
jz loc_108E129  +
mov ecx [esi+174h] +
push 1  +
lea eax [ebp+Rect] +
push eax  +
push edi  +
call ?GetItemRect@CTreeCtrl@@QBEHPAU_TREEITEM@@PAUtagRECT@@H@Z  +
mov eax [ebp+Rect.left] +
mov [ebp+Point.x] eax +
mov eax [ebp+Rect.bottom] +
dec eax  +
mov [ebp+Point.y] eax +
lea eax [ebp+Point] +
push eax  +
push dword ptr [esi+174h]  +
call sub_107F57E  +
mov eax [ebp+Point.x] +
mov [ebp+var_10] eax +
mov eax [ebp+Point.y] +
mov [ebp+var_C] eax +
lea eax [ebp+var_10] +
push eax  +
mov eax [esi+174h] +
push dword ptr [eax+20h]  +
call ds:ClientToScreen  +
push edi  +
lea eax [ebp+Point] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call sub_108B375  +
pop edi  +
pop esi  +
leave   +
retn   +
***
push 24h  +
mov eax offset word_10D7C9E +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScon_2  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+6Ch] +
cmp eax 2 +
jnz loc_108E17D  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108E221  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
cmp eax ebx +
jnz loc_108E1C4  +
push 0  +
lea eax [ebp-30h] +
push eax  +
lea ecx [esi-84h] +
call sub_1029B4D  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108E1C4  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov dword ptr [esi+6Ch] 2 +
add esi 0FFFFFF7Ch +
mov ecx esi +
call sub_100C52C  +
test al al +
jz loc_108E214  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_108DC51  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108E214  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewSconli  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
lea eax [esi-0B4h] +
push eax  +
push offset loc_107FF9D  +
lea eax [ebp-30h] +
push eax  +
lea ecx [esi-58h] +
call sub_1018BA4  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_108E307  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108E30D  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 24h  +
mov eax offset word_10D7C9E +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewSconoc  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [esi+5Ch] 2 +
jnz loc_108E3BA  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108E48D  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108E3F5  +
cmp byte ptr [eax+19h] 5 +
jb loc_108E3F5  +
cmp dword ptr [esi+1DCh] 2 +
mov ecx offset aOcx +
jz loc_108E3DF  +
mov ecx offset aWebbrowser +
push ecx  +
push offset dword_100C4B0  +
push 92h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
cmp [esi+5Ch] ebx +
jnz loc_108E43D  +
push 0  +
lea eax [ebp-30h] +
push eax  +
lea ecx [esi-94h] +
call sub_1029B4D  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108E43D  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
lea ecx [esi-94h] +
mov dword ptr [esi+5Ch] 2 +
call sub_10449C9  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108E480  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_108E512  +
test esi esi +
jz loc_108E512  +
push 1  +
mov ecx esi +
call sub_108C893  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101AFB6  +
test byte ptr [ebp+8] 1 +
jz loc_108E539  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+1Ch] +
call sub_100CD3C  +
test [ebp+arg_0] 1 +
jz loc_108E566  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_108C950  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101B2BB  +
test byte ptr [ebp+8] 1 +
jz loc_108E5A4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
enter 15FFh 24h +
sbb eax 4D830100h +
cld   +
dec dword ptr [ebp-0F741BB3h]  +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_108E623  +
cmp byte ptr [eax+19h] 5 +
jb loc_108E623  +
push offset dword_100C4B0  +
push 3Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx esi +
call sub_101D08C  +
test eax eax +
jz loc_108E713  +
mov ecx eax +
call sub_107E72C  +
cmp dword ptr [esi+174h] 0 +
jz loc_108E713  +
cmp dword ptr [ebp+0Ch] 0FFFFFFFFh +
jnz loc_108E65E  +
cmp dword ptr [ebp+10h] 0FFFFFFFFh +
jnz loc_108E65E  +
mov ecx esi +
call sub_108DFE9  +
jmp loc_108E713  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_108209F  +
cmp eax 0FFFFFFFFh +
jz loc_108E713  +
test eax eax +
jz loc_108E6E3  +
cmp eax 1 +
jnz loc_108E713  +
mov eax [ebp+0Ch] +
mov [ebp-8] eax +
mov eax [ebp+10h] +
mov [ebp-4] eax +
mov eax [esi+178h] +
push edi  +
mov edi [eax+4Ch] +
lea eax [ebp-8] +
push eax  +
push dword ptr [edi+20h]  +
call ds:ScreenToClient  +
push 1  +
push dword ptr [ebp-4]  +
mov ecx edi +
push dword ptr [ebp-8]  +
call sub_107E63B  +
cmp eax edi +
pop edi  +
jnz loc_108E713  +
mov eax [esi+178h] +
test eax eax +
jz loc_108E713  +
mov eax [eax+4Ch] +
test eax eax +
jz loc_108E6CC  +
mov eax [eax+20h] +
jmp loc_108E6CE  +
xor eax eax +
mov ecx [ebp+8] +
cmp [ecx+20h] eax +
jnz loc_108E713  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_108D6CD  +
jmp loc_108E713  +
mov eax [ebp+0Ch] +
mov [ebp-8] eax +
mov eax [ebp+10h] +
mov [ebp-4] eax +
lea eax [ebp-8] +
push eax  +
mov eax [esi+174h] +
push dword ptr [eax+20h]  +
call ds:ScreenToClient  +
push 0  +
lea eax [ebp-8] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_108B375  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
call sub_100CF0B  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
mov ebx ecx +
mov edi ebx +
movs   +
movs   +
movs   +
lea ecx [ebx+10h] +
movs   +
call sub_100CF0B  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov esi eax +
mov edi ebx +
movs   +
movs   +
movs   +
add eax 10h +
push eax  +
lea ecx [ebx+10h] +
movs   +
call sub_100CF0B  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_108E545  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+8] +
call sub_1075F98  +
mov ecx esi +
call sub_108AAA5  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+3Ch] +
call sub_108AAA5  +
mov ecx esi +
pop esi  +
jmp sub_1075F98  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov ebx ecx +
call sub_1022C88  +
lea eax [esi+1Ch] +
push eax  +
lea ecx [ebx+1Ch] +
call sub_1022C88  +
lea eax [esi+38h] +
push eax  +
lea ecx [ebx+38h] +
call sub_1022C88  +
mov eax [ebp+arg_0] +
add esi 54h +
lea edi [ebx+54h] +
movs   +
movs   +
movs   +
movs   +
mov al [eax+64h] +
pop edi  +
mov [ebx+64h] al +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+39h] 0 +
jz loc_108E8B5  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_1075FC8  +
push offset dword_10EA2DC  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_106BEE4 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_107FF19  +
mov edx [edi] +
cmp byte ptr [edx+39h] 0 +
jz loc_108E8CA  +
mov ebx [edi+8] +
jmp loc_108E8E3  +
mov eax [edi+8] +
cmp byte ptr [eax+39h] 0 +
jz loc_108E8D7  +
mov ebx edx +
jmp loc_108E8E3  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_108E94C  +
cmp byte ptr [ebx+39h] 0 +
mov esi [edi+4] +
jnz loc_108E8EF  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_108E8FF  +
mov [eax+4] ebx +
jmp loc_108E90A  +
cmp [esi] edi +
jnz loc_108E907  +
mov [esi] ebx +
jmp loc_108E90A  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_108E929  +
cmp byte ptr [ebx+39h] 0 +
jz loc_108E91B  +
mov eax esi +
jmp loc_108E924  +
push ebx  +
call sub_107FEBA  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_108E9A8  +
cmp byte ptr [ebx+39h] 0 +
jz loc_108E93B  +
mov eax esi +
jmp loc_108E944  +
push ebx  +
call sub_107FE9C  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_108E9A8  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_108E95C  +
mov esi eax +
jmp loc_108E975  +
cmp byte ptr [ebx+39h] 0 +
mov esi [eax+4] +
jnz loc_108E968  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_108E985  +
mov [ecx+4] eax +
jmp loc_108E993  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_108E990  +
mov [ecx] eax +
jmp loc_108E993  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+38h] +
mov dl [edi+38h] +
mov [eax+38h] dl +
mov [edi+38h] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+38h] 1 +
jz loc_108EA6C  +
jmp loc_108EAB1  +
cmp byte ptr [ebx+38h] 1 +
jnz loc_108EAAD  +
mov eax [esi] +
cmp ebx eax +
jnz loc_108EA33  +
mov eax [esi+8] +
cmp byte ptr [eax+38h] 0 +
jnz loc_108E9E4  +
mov byte ptr [eax+38h] 1 +
push esi  +
mov byte ptr [esi+38h] 0 +
call sub_1084C87  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+39h] 0 +
jnz loc_108EA67  +
mov edx [eax] +
cmp byte ptr [edx+38h] 1 +
jnz loc_108E9FB  +
mov edx [eax+8] +
cmp byte ptr [edx+38h] 1 +
jz loc_108EA63  +
mov edx [eax+8] +
cmp byte ptr [edx+38h] 1 +
jnz loc_108EA1A  +
mov edx [eax] +
mov byte ptr [edx+38h] 1 +
push eax  +
mov byte ptr [eax+38h] 0 +
call sub_1084CD3  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+38h] +
mov [eax+38h] dl +
mov byte ptr [esi+38h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+38h] 1 +
call sub_1084C87  +
jmp loc_108EAAD  +
cmp byte ptr [eax+38h] 0 +
jnz loc_108EA4C  +
mov byte ptr [eax+38h] 1 +
push esi  +
mov byte ptr [esi+38h] 0 +
call sub_1084CD3  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+39h] 0 +
jnz loc_108EA67  +
mov edx [eax+8] +
cmp byte ptr [edx+38h] 1 +
jnz loc_108EA79  +
mov edx [eax] +
cmp byte ptr [edx+38h] 1 +
jnz loc_108EA79  +
mov byte ptr [eax+38h] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_108EAAD  +
jmp loc_108E9B7  +
mov edx [eax] +
cmp byte ptr [edx+38h] 1 +
jnz loc_108EA97  +
mov edx [eax+8] +
mov byte ptr [edx+38h] 1 +
push eax  +
mov byte ptr [eax+38h] 0 +
call sub_1084C87  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+38h] +
mov [eax+38h] dl +
mov byte ptr [esi+38h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+38h] 1 +
call sub_1084CD3  +
mov byte ptr [ebx+38h] 1 +
push edi  +
call sub_108E7BE  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_108EACC  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+0Ch] +
mov [esi+8] eax +
call sub_108E78F  +
mov al [ebp+arg_10] +
mov [esi+38h] al +
mov byte ptr [esi+39h] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
jmp loc_108EB33  +
push esi  +
call sub_108E81F  +
add [ebp+arg_C] 68h +
add esi 68h +
mov ecx [ebp+arg_C] +
cmp esi [ebp+arg_8] +
jnz loc_108EB26  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_108EB5C  +
push esi  +
call sub_108E572  +
add esi 68h +
cmp esi [ebp+arg_4] +
jnz loc_108EB53  +
pop esi  +
pop ebp  +
retn 10h  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_108EB99  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_108EAE1  +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_108EB1B  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_108EB48  +
pop ebp  +
retn 0Ch  +
***
call sub_100A60E  +
pop ecx  +
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aSccreateconnec  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
mov esi [ebp+10h] +
push edi  +
lea eax [ebp-30h] +
push eax  +
lea ecx [esi+48h] +
call sub_1031995  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_108ECC7  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108ECD0  +
mov [edi+4] esi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aSccreateconnec  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov eax esi +
neg eax  +
sbb eax eax +
lea ecx [esi+3Ch] +
and eax ecx +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [edi+48h] +
call sub_1031995  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_108ED73  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108ED7C  +
mov [esi+40h] edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_108EDD4  +
push edi  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_108EBA6  +
mov edi [eax] +
add esp 10h +
push esi  +
push dword ptr [esi+8]  +
push edi  +
call sub_108EBD8  +
mov ecx [ebp+arg_4] +
mov [esi+8] edi +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
cmp dword ptr [edi+8] 5D1745Ch +
jb loc_108EE25  +
push offset aMapSetTTooLong  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1076041  +
push offset dword_10E8AC0  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
mov eax [edi+4] +
mov esi [ebp+10h] +
push 0  +
push dword ptr [ebp+14h]  +
push eax  +
push esi  +
push eax  +
call sub_108EBF7  +
inc dword ptr [edi+8]  +
mov ebx eax +
mov eax [edi+4] +
cmp esi eax +
jnz loc_108EE51  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax] ebx +
mov eax [edi+4] +
jmp loc_108EE6F  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_108EE64  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi [eax] +
jnz loc_108EE72  +
mov [eax] ebx +
jmp loc_108EE72  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_108EE72  +
mov [eax+8] ebx +
mov esi ebx +
lea eax [ebx+4] +
jmp loc_108EF0C  +
mov ecx [eax] +
mov edx [ecx+4] +
cmp ecx [edx] +
jnz loc_108EEBD  +
mov edx [edx+8] +
cmp byte ptr [edx+38h] 0 +
jz loc_108EEC5  +
cmp esi [ecx+8] +
jnz loc_108EE9D  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1084C87  +
mov eax [esi+4] +
mov byte ptr [eax+38h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+38h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1084CD3  +
jmp loc_108EF09  +
mov edx [edx] +
cmp byte ptr [edx+38h] 0 +
jnz loc_108EEDD  +
mov byte ptr [ecx+38h] 1 +
mov byte ptr [edx+38h] 1 +
mov ecx [eax] +
mov ecx [ecx+4] +
mov byte ptr [ecx+38h] 0 +
mov eax [eax] +
mov esi [eax+4] +
jmp loc_108EF09  +
cmp esi [ecx] +
jnz loc_108EEEB  +
mov esi ecx +
push esi  +
mov ecx edi +
call sub_1084CD3  +
mov eax [esi+4] +
mov byte ptr [eax+38h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
mov byte ptr [eax+38h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1084C87  +
lea eax [esi+4] +
mov ecx [eax] +
cmp byte ptr [ecx+38h] 0 +
jz loc_108EE7C  +
mov eax [edi+4] +
mov eax [eax+4] +
mov byte ptr [eax+38h] 1 +
mov eax [ebp+8] +
mov [eax] ebx +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov [ebp-18h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScgeto  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi 80070057h +
push edi  +
push dword ptr [ebp+10h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108EFB3  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108F260  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
mov eax [ebp+14h] +
push dword ptr [ebp+0Ch]  +
mov [eax] bl +
call sub_107E478  +
test al al +
jz loc_108EFF7  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-18h] +
lea eax [ebp-38h] +
push eax  +
call sub_10802AB  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea eax [ebp-28h] +
jmp loc_108F256  +
push dword ptr [ebp+0Ch]  +
call sub_107E454  +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108EFEF  +
mov eax [ebp-14h] +
movzx eax word ptr [eax] +
mov ecx eax +
and ecx 4000h +
mov edx 4000h +
cmp dx cx +
setz cl  +
and eax 0FFFh +
cmp eax 9 +
jnz loc_108F117  +
and dword ptr [ebp+0Ch] 0 +
mov eax [ebp-14h] +
test cl cl +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp+0Ch] +
jz loc_108F074  +
mov eax [eax+8] +
push dword ptr [eax]  +
jmp loc_108F077  +
push dword ptr [eax+8]  +
call sub_1010F11  +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108F0D6  +
lea eax [ebp-28h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp+0Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test eax eax +
jz loc_108F263  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_108F263  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp+14h] +
call sub_1088163  +
mov eax [ebp+14h] +
mov byte ptr [ebp-4] 7 +
test eax eax +
jnz loc_108F0F9  +
push edi  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_108F0B0  +
mov ecx [ebp+10h] +
mov [ecx] eax +
mov eax [ebp+0Ch] +
mov [ebp-4] bl +
test eax eax +
jz loc_108EFEF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_108EFEF  +
cmp eax 8 +
jnz loc_108F24C  +
mov eax [ebp-14h] +
test cl cl +
jz loc_108F12E  +
mov eax [eax+8] +
mov edi [eax] +
jmp loc_108F131  +
mov edi [eax+8] +
push 0FFFFFFFFh  +
lea ecx [ebp-50h] +
call sub_101D4AC  +
push 0  +
push edi  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 8 +
call sub_10CABE7  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 9 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 8 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108F196  +
lea eax [ebp-28h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-48h] +
mov [ebp-10h] ebx +
mov dword ptr [ebp-50h] offset off_100B9EC +
call sub_100ECBD  +
jmp loc_108F263  +
cmp dword ptr [ebp-4Ch] 0FFFFFFFFh +
jnz loc_108F1AC  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_108F175  +
mov eax [ebp-18h] +
mov eax [eax+40h] +
test eax eax +
jnz loc_108F1BA  +
xor edi edi +
jmp loc_108F1C0  +
mov edi [eax+0E0h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0Ah +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 8 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108F172  +
and dword ptr [ebp+0Ch] 0 +
mov eax [ebp+14h] +
push eax  +
push dword ptr [ebp+10h]  +
mov byte ptr [eax] 0 +
mov eax [ebp-18h] +
mov ecx [edi] +
add eax 44h +
push eax  +
lea eax [ebp-50h] +
push eax  +
push edi  +
mov byte ptr [ebp-4] 0Bh +
call dword ptr [ecx+40h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108F172  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
mov dword ptr [ebp-50h] offset off_100B9EC +
call sub_100ECBD  +
jmp loc_108EFEF  +
push edi  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-18h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScsn_0  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108F359  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-18h] ebx +
jmp loc_108F428  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
and dword ptr [ebp-14h] 0 +
mov byte ptr [ebp-0Dh] 0 +
lea eax [ebp-0Dh] +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-38h] +
push eax  +
mov ecx edi +
call sub_108EF34  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108F408  +
mov edi [edi+0D8h] +
push 8000FFFFh  +
push edi  +
push dword ptr [ebp-14h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108F408  +
push dword ptr [ebp+10h]  +
mov eax [edi] +
push dword ptr [ebp-14h]  +
push edi  +
call dword ptr [eax+0C0h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
mov [ebp-18h] ebx +
test eax eax +
jz loc_108F428  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-2Ch] +
mov [ebp-18h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScex_3  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-14h] esi +
lea eax [ebp-0Dh] +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
mov byte ptr [ebp-0Dh] 0 +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx edi +
call sub_108EF34  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108F514  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108F601  +
cmp byte ptr [ebp-0Dh] 0 +
jnz loc_108F552  +
push 320Dh  +
lea eax [ebp-3Ch] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call esi  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_108F604  +
mov eax [ebp-14h] +
and dword ptr [ebp-1Ch] 0 +
mov [ebp+10h] eax +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx edi +
call sub_1081C49  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108F5F4  +
mov edi [edi+0D8h] +
push 80070057h  +
push edi  +
push dword ptr [ebp-14h]  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108F5F4  +
push dword ptr [ebp+14h]  +
mov eax [edi] +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call dword ptr [eax+0B8h]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-18h] ebx +
mov eax [ebp-14h] +
mov [ebp-4] bl +
test eax eax +
jz loc_108F614  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScdi_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 0  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push 8004h  +
push eax  +
mov ecx edi +
call sub_108F481  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_108F6F3  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108F6F9  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScco_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 0  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push 8001h  +
push eax  +
mov ecx edi +
call sub_108F481  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_108F7DB  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108F7E1  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScde_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 0  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push 8003h  +
push eax  +
mov ecx edi +
call sub_108F481  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_108F8B1  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108F8B7  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScre_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push dword ptr [ebp+10h]  +
mov ecx esi +
push 8005h  +
push eax  +
call sub_108F481  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_108F98E  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108F994  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScre_1  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 0  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push 8006h  +
push eax  +
mov ecx edi +
call sub_108F481  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_108FA30  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108FA36  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-2Ch] +
mov [ebp-18h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScge_9  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-14h] esi +
lea eax [ebp-0Dh] +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
mov byte ptr [ebp-0Dh] 0 +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx edi +
call sub_108EF34  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108FB26  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108FC2A  +
cmp byte ptr [ebp+14h] 0 +
jz loc_108FB45  +
cmp byte ptr [ebp-0Dh] 0 +
jnz loc_108FB45  +
push 2EEFh  +
push dword ptr [ebp+8]  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
jmp loc_108FC2A  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108FC1D  +
mov eax [edi+174h] +
mov ecx [edi+0D8h] +
push 80070057h  +
push eax  +
push ecx  +
push dword ptr [ebp+10h]  +
lea eax [ebp-3Ch] +
push dword ptr [ebp-14h]  +
mov [ebp+0Ch] ecx +
push eax  +
call sub_100D4B3  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108FBB4  +
lea ecx [ebp-2Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_108FC2A  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
mov eax [ebp-14h] +
and dword ptr [ebp-1Ch] 0 +
mov [ebp+14h] eax +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp+14h] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx edi +
call sub_1081C49  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108FC1D  +
push dword ptr [ebp+18h]  +
mov eax [ebp+0Ch] +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-14h]  +
push eax  +
call dword ptr [ecx+0C8h]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
mov [ebp-18h] ebx +
test eax eax +
jz loc_108FC3D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-24h] +
mov [ebp-14h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScex_4  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-10h] esi +
push esi  +
push ebx  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call sub_108FA93  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push 2EEFh  +
lea eax [ebp-34h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp+13h] al +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp byte ptr [ebp+13h] 0 +
jz loc_108FD6B  +
push 320Dh  +
lea eax [ebp-34h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_108FDAD  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108FDA0  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push dword ptr [ebp-10h]  +
mov ecx edi +
push eax  +
call sub_1086EDC  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-10h] +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
test eax eax +
jz loc_108FDC0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov eax ds:off_108FE30 +
retn   +
***
call sub_100C4D0  +
mov edi [ebp+8] +
mov esi [ebp+0Ch] +
and dword ptr [ebp-0D8h] 0 +
mov [ebp-0FCh] ecx +
push 0  +
lea ecx [ebp-0E8h] +
mov [ebp-104h] edi +
mov [ebp-100h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScview  +
lea ecx [ebp-0E8h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push esi  +
lea eax [ebp-0F8h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-0E8h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-0F8h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0E8h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_108FEEA  +
lea eax [ebp-0E8h] +
push eax  +
mov ecx edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-0D8h] ebx +
jmp loc_1090022  +
lea ecx [ebp-0D0h] +
call sub_1038B83  +
push 0  +
push dword ptr [ebp-100h]  +
lea eax [ebp-0F8h] +
push eax  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 3 +
call sub_10CABE7  +
push eax  +
lea ecx [ebp-0E8h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-0F8h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0E8h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_108FFFF  +
mov ecx [ebp-0FCh] +
lea edx [ebp-0D0h] +
push edx  +
add ecx 44h +
mov eax [ecx] +
lea edx [ebp-0F8h] +
push edx  +
call dword ptr [eax+44h]  +
push eax  +
lea ecx [ebp-0E8h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-0F8h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push 2EEFh  +
lea eax [ebp-0F8h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-0E8h] +
mov byte ptr [ebp-4] 6 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-0F8h] +
mov [ebp-0D1h] al +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp byte ptr [ebp-0D1h] 0 +
jz loc_108FFFF  +
push 320Dh  +
lea eax [ebp-0F8h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-0E8h] +
mov byte ptr [ebp-4] 7 +
call esi  +
push eax  +
mov ecx edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-0F8h] +
mov [ebp-0D8h] ebx +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1090014  +
lea eax [ebp-0E8h] +
push eax  +
mov ecx edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-0D8h] ebx +
lea ecx [ebp-0D0h] +
mov [ebp-4] bl +
call sub_1051893  +
lea ecx [ebp-0E8h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
call sub_100C50D  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScat_1  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [esi+178h] +
cmp [ecx+58h] edi +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
jz loc_10900C5  +
push 0  +
push 0  +
lea eax [ebp-30h] +
push eax  +
call sub_1097FD8  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10900C5  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1090158  +
cmp dword ptr [esi+180h] 0 +
jnz loc_10900DA  +
push 31F4h  +
mov ecx esi +
call sub_1030E23  +
push 8000FFFFh  +
push dword ptr [esi+180h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109014B  +
push 0  +
push 0  +
push 30Fh  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
push ebx  +
push dword ptr [esi+180h]  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_10209DE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_100C4D0  +
mov edi ecx +
push 0  +
lea ecx [ebp-100h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewOnaddt  +
lea ecx [ebp-100h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [edi+40h] +
mov ebx 8000FFFFh +
push ebx  +
push eax  +
mov [ebp-108h] eax +
lea eax [ebp-120h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-100h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-120h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-100h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10904A3  +
mov eax [edi+40h] +
test eax eax +
jnz loc_109025F  +
and [ebp-104h] eax +
jmp loc_109026B  +
mov eax [eax+0E0h] +
mov [ebp-104h] eax +
push ebx  +
push dword ptr [ebp-104h]  +
lea eax [ebp-120h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-100h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-120h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-100h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10904A3  +
lea ecx [ebp-0ECh] +
call sub_1038B83  +
lea eax [ebp-0ECh] +
push eax  +
lea eax [ebp-120h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 3 +
call sub_108B440  +
push eax  +
lea ecx [ebp-100h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-120h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-100h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1090494  +
lea ecx [edi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push 0  +
lea ecx [ebp-2Ch] +
mov [ebp-10Ch] eax +
mov dword ptr [ebp-14h] 7 +
call sub_100CD14  +
mov eax [edi+0D8h] +
mov ecx [eax] +
lea edx [ebp-2Ch] +
push edx  +
push dword ptr [ebp-10Ch]  +
mov byte ptr [ebp-4] 5 +
push eax  +
call dword ptr [ecx+14h]  +
push eax  +
lea ecx [ebp-100h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-100h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1090488  +
lea ecx [edi+0D8h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-110h] +
push edx  +
push dword ptr [ebp-10Ch]  +
push eax  +
call dword ptr [ecx+7Ch]  +
push eax  +
lea ecx [ebp-100h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-100h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1090488  +
and dword ptr [ebp-0F0h] 0 +
mov eax [ebp-104h] +
mov ecx [eax] +
lea edx [ebp-0F0h] +
push edx  +
push dword ptr [ebp-110h]  +
mov byte ptr [ebp-4] 6 +
push 0  +
push eax  +
call dword ptr [ecx+58h]  +
push eax  +
lea ecx [ebp-100h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-100h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109047D  +
mov eax [ebp-108h] +
mov eax [eax+0DCh] +
push ebx  +
push eax  +
lea eax [ebp-120h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-100h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-120h] +
mov byte ptr [ebp-4] 6 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-100h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109047D  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_1090437  +
lea eax [ebp-28h] +
mov esi [ebp-108h] +
mov ecx [esi+0DCh] +
push edi  +
lea edx [ebp-0ECh] +
push edx  +
push dword ptr [ebp-0F0h]  +
push eax  +
call sub_10A9B1A  +
push eax  +
lea ecx [ebp-100h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-100h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109047D  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+64h]  +
lea ecx [ebp-0F0h] +
call sub_100C763  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100CD3C  +
lea ecx [ebp-0ECh] +
mov byte ptr [ebp-4] 0 +
call sub_1051893  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-100h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_100C50D  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_109052C  +
cmp byte ptr [eax+19h] 5 +
jb loc_109052C  +
push offset dword_100C4B0  +
push 72h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov edi [ebp+8] +
xor ebx ebx +
mov [esi+1D5h] bl +
mov [esi+264h] bl +
cmp edi ebx +
jnz loc_109054B  +
xor al al +
call sub_1001FCF  +
retn 4  +
push 60h  +
lea eax [ebp-90h] +
push ebx  +
push eax  +
call memset  +
mov eax [edi] +
add esp 0Ch +
lea ecx [ebp-30h] +
push ecx  +
push 60h  +
lea ecx [ebp-90h] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
cmp eax ebx +
jl loc_1090541  +
mov eax [ebp-48h] +
cmp eax dword_10F52D0 +
mov [esi+0CCh] eax +
mov [esi+228h] eax +
jl loc_1090591  +
inc eax  +
mov dword_10F52D0 eax +
cmp [ebp-44h] ebx +
mov ecx esi +
setnz al  +
movzx eax al +
push eax  +
call sub_1028B9A  +
mov ecx esi +
call sub_101D08C  +
mov [ebp+8] eax +
cmp eax ebx +
jz loc_1090541  +
push 2Ch  +
pop edi  +
push edi  +
lea eax [ebp-0BCh] +
push ebx  +
push eax  +
call memset  +
mov ecx [ebp+8] +
add esp 0Ch +
lea eax [ebp-0BCh] +
push eax  +
mov [ebp-0BCh] edi +
call ?GetWindowPlacement@CWnd@@QBEHPAUtagWINDOWPLACEMENT@@@Z  +
test eax eax +
jz loc_10905EF  +
mov eax [ebp-0A8h] +
mov [ebp-7Ch] eax +
mov eax [ebp-0A4h] +
mov [ebp-78h] eax +
call sub_101125C  +
mov ecx [ebp-6Ch] +
sub ecx [ebp-74h] +
cmp ecx eax +
jge loc_1090604  +
mov [ebp-74h] ebx +
mov [ebp-6Ch] eax +
mov ecx [ebp+8] +
lea eax [ebp-90h] +
push eax  +
call ?SetWindowPlacement@CWnd@@QAEHPBUtagWINDOWPLACEMENT@@@Z  +
cmp eax ebx +
jz loc_1090541  +
mov ecx [ebp-4Ch] +
test cl 20h +
jz loc_109062A  +
or dword ptr [esi+238h] 1 +
test ecx 2000h +
jz loc_1090639  +
or dword ptr [esi+238h] 20h +
test cl 40h +
jz loc_1090645  +
or dword ptr [esi+238h] 2 +
test cl cl +
jns loc_1090650  +
or dword ptr [esi+238h] 8 +
mov eax ecx +
shr eax 9 +
not al  +
and al 1 +
mov [esi+0DCh] al +
test ecx 1000h +
jz loc_109066F  +
push ebx  +
mov ecx esi +
call sub_107FFF1  +
push dword ptr [ebp-60h]  +
mov ecx esi +
push dword ptr [ebp-5Ch]  +
push ebx  +
call sub_1028B43  +
mov eax [ebp-4Ch] +
shr eax 0Bh +
and al 1 +
push ebx  +
lea ecx [ebp-1Ch] +
mov [ebp+0Bh] al +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov al [esi+238h] +
not al  +
mov [ebp-4] ebx +
test al 1 +
jz loc_10906C1  +
cmp [ebp+0Bh] bl +
jnz loc_10906C1  +
mov al [ebp-4Ch] +
and al 1 +
movzx eax al +
push ebx  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call sub_10254E2  +
mov byte ptr [ebp-4] 1 +
jmp loc_10906D2  +
push ebx  +
push ebx  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call sub_10254E2  +
mov byte ptr [ebp-4] 2 +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-1Ch] +
call edi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1090709  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1090541  +
mov eax [esi+238h] +
shr eax 5 +
not al  +
push 1  +
mov ecx esi +
push ebx  +
test al 1 +
jz loc_1090738  +
mov eax [ebp-4Ch] +
shr eax 0Eh +
and al 1 +
movzx eax al +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_102502E  +
mov byte ptr [ebp-4] 3 +
jmp loc_1090746  +
push ebx  +
lea eax [ebp-2Ch] +
push eax  +
call sub_102502E  +
mov byte ptr [ebp-4] 4 +
push eax  +
lea ecx [ebp-1Ch] +
call edi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10906F7  +
push ebx  +
push 1  +
mov ecx esi +
call sub_102583F  +
mov ecx [ebp-4Ch] +
mov eax [ebp-50h] +
mov [esi+0E0h] eax +
mov [ebp+8] ebx +
test cl 2 +
jnz loc_109078A  +
mov dword ptr [ebp+8] 1 +
test cl 4 +
jnz loc_1090793  +
or dword ptr [ebp+8] 2 +
test cl 8 +
jnz loc_109079C  +
or dword ptr [ebp+8] 4 +
test cl 10h +
jnz loc_10907A5  +
or dword ptr [ebp+8] 8 +
mov eax 80000000h +
test ecx 100h +
jnz loc_10907B5  +
or [ebp+8] eax +
mov ecx [esi+25Ch] +
xor ecx [ebp+8] +
test ecx eax +
jz loc_10907EC  +
mov ecx esi +
call sub_101D08C  +
cmp eax ebx +
jz loc_10907EC  +
mov ecx eax +
call sub_10A4B16  +
mov eax [esi+25Ch] +
shr eax 1Fh +
not al  +
and al 1 +
movzx eax al +
push eax  +
mov ecx esi +
call sub_107E2FD  +
mov eax [esi+25Ch] +
xor eax [ebp+8] +
test al 0Fh +
jz loc_1090817  +
lea ecx [esi+0D8h] +
call sub_100A5CF  +
push dword ptr [ebp+8]  +
mov ecx [eax] +
lea edx [esi+1F8h] +
push edx  +
push eax  +
call dword ptr [ecx+98h]  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call sub_1028CB1  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1090859  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov al bl +
jmp loc_1090543  +
mov ecx [esi+310h] +
mov [esi+1D5h] bl +
mov [esi+264h] bl +
call sub_1025A65  +
mov bl 1 +
jmp loc_1090845  +
***
push 0  +
push 1  +
call sub_102583F  +
retn 8  +
***
push 20h  +
mov eax offset byte_10D7A1B +
call sub_1001F95  +
xor esi esi +
push esi  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aTrackercallbac  +
lea ecx [ebp-1Ch] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_10909FB  +
push esi  +
push offset off_10F6CCC  +
push offset off_10F6CB8  +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi]  +
call __RTDynamicCast  +
add esp 14h +
mov edi eax +
push 8000FFFFh  +
push edi  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10909FB  +
cmp dword ptr [esi+3Ch] 0 +
mov ebx offset dword_100C4B0 +
jz loc_109094D  +
mov esi [esi+14h] +
mov ecx [edi+19Ch] +
cmp esi ecx +
mov [edi+194h] esi +
jge loc_109098B  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_109098B  +
cmp byte ptr [eax+19h] 2 +
jb loc_109098B  +
push ecx  +
push esi  +
push ebx  +
push 8Bh  +
jmp loc_1090980  +
mov ecx [esi+0Ch] +
sub ecx [esi+14h] +
mov edx [edi+1BCh] +
add ecx 0FFFFFFFDh +
cmp ecx edx +
mov [edi+1B4h] ecx +
jge loc_109098B  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_109098B  +
cmp byte ptr [eax+19h] 2 +
jb loc_109098B  +
push edx  +
push ecx  +
push ebx  +
push 8Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
cmp byte ptr [ebp+10h] 0 +
mov byte ptr [edi+1D5h] 1 +
jz loc_10909CD  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10909BB  +
cmp byte ptr [eax+19h] 5 +
jb loc_10909BB  +
push ebx  +
push 8Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx edi +
call sub_100DA2C  +
push dword ptr [edi+20h]  +
call ds:UpdateWindow  +
jmp loc_10909FB  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10909F0  +
cmp byte ptr [eax+19h] 5 +
jb loc_10909F0  +
push ebx  +
push 8Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 0  +
push 1  +
mov ecx edi +
call sub_102583F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_108ED9C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
jmp loc_1090A8A  +
lea eax [esi+0Ch] +
push eax  +
push [ebp+arg_4]  +
mov ebx esi +
call sub_1038A5D  +
mov byte ptr [ebp+var_8] al +
test al al +
jz loc_1090A87  +
mov esi [esi] +
jmp loc_1090A8A  +
mov esi [esi+8] +
cmp byte ptr [esi+39h] 0 +
jz loc_1090A6E  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_1090AC9  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_1090ABE  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_108EDE3  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
jmp loc_1090AEB  +
lea ecx [ebp+var_4] +
call sub_107FED7  +
mov esi [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [esi+0Ch] +
push eax  +
call sub_1038A5D  +
test al al +
jz loc_1090AE2  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_1090AA6  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+1Ch] +
mov dword ptr [esi+4] offset off_1090B60 +
call sub_1041A02  +
and dword ptr [ebp-4] 0 +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1039FB1  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_1090BAC +
mov dword ptr [esi+4] offset off_1090B98 +
mov dword ptr [esi+8] offset off_1090B80 +
mov dword ptr [edi] offset off_1090B74 +
call ds:?GetComObjectEventSource@@YGAAV?$CEventSource@VCComObjectObserver@@VCVoid@@V2@V2@V2@@@XZ  +
push edi  +
mov ecx eax +
call sub_102124D  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
push offset dword_100CA88  +
push offset dword_106BE08  +
push ecx  +
call sub_1071867  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcidispatchi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
add esi 0FFFFFFF4h +
push eax  +
lea ecx [ebp-18h] +
mov [ebp-14h] esi +
call sub_1018390  +
mov esi [ebp-18h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1090D3F  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1090D69  +
push 0  +
push esi  +
call ds:CoDisconnectObject  +
push eax  +
lea ecx [ebp-28h] +
call sub_109F3AD  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test esi esi +
jz loc_1090D79  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call sub_1090C75  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_10FCC60 +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10765AC  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_10FCC60 +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1052795  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10FCC60 +
pop ebp  +
jmp sub_105010F  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+1Ch] +
mov dword ptr [esi+4] offset off_1090E58 +
call sub_1041A02  +
and dword ptr [ebp-4] 0 +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1039FB1  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_1090EA4 +
mov dword ptr [esi+4] offset off_1090E90 +
mov dword ptr [esi+8] offset off_1090E78 +
mov dword ptr [edi] offset off_1090E6C +
call ds:?GetComObjectEventSource@@YGAAV?$CEventSource@VCComObjectObserver@@VCVoid@@V2@V2@V2@@@XZ  +
push edi  +
mov ecx eax +
call sub_102124D  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
push offset dword_100CA88  +
push offset dword_106BE18  +
push ecx  +
call sub_1071867  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
push 2Ch  +
mov eax offset dword_10D87C4 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcidispatchi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
add esi 0FFFFFFF4h +
push eax  +
lea ecx [ebp-18h] +
mov [ebp-14h] esi +
call sub_1018390  +
mov esi [ebp-18h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1090FBB  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1090FE5  +
push 0  +
push esi  +
call ds:CoDisconnectObject  +
push eax  +
lea ecx [ebp-28h] +
call sub_109F3AD  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test esi esi +
jz loc_1090FF5  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call sub_1090EF1  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_10FCC7C +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10765AC  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_10FCC7C +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1052795  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10FCC7C +
pop ebp  +
jmp sub_105010F  +
***
sub ecx 5Ch +
jmp loc_101B388  +
***
sub ecx 84h +
jmp loc_101B388  +
***
sub ecx 0A4h +
jmp loc_101B388  +
***
sub ecx 48h +
jmp loc_101B388  +
***
sub ecx 74h +
jmp loc_101B388  +
***
sub ecx 94h +
jmp loc_101B388  +
***
sub ecx 0B4h +
jmp loc_101B388  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
and dword ptr [ebp-0F8h] 0 +
mov [ebp-0F4h] ecx +
push 0  +
lea ecx [ebp-108h] +
mov [ebp-0F0h] eax +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScg_14  +
lea ecx [ebp-108h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push edi  +
lea eax [ebp-118h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-108h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-118h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-108h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1091184  +
mov ecx [ebp-0F0h] +
lea eax [ebp-108h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-0F8h] ebx +
jmp loc_10912D2  +
and dword ptr [edi] 0 +
lea ecx [ebp-0ECh] +
call sub_1038B83  +
mov ecx [ebp-0F4h] +
lea eax [ebp-0ECh] +
push eax  +
lea eax [ebp-118h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_108B440  +
push eax  +
lea ecx [ebp-108h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-118h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-108h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10911FA  +
mov ecx [ebp-0F0h] +
lea eax [ebp-108h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-0F8h] ebx +
jmp loc_10912C4  +
lea ecx [ebp-2Ch] +
call sub_1023117  +
push 0  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-118h] +
push eax  +
lea ecx [ebp-0E8h] +
mov byte ptr [ebp-4] 5 +
call sub_10CA976  +
push eax  +
lea ecx [ebp-108h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-118h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-108h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109126E  +
lea ecx [ebp-108h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov ecx [ebp-0F0h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov [ebp-0F8h] ebx +
push 0  +
jmp loc_10912BB  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_109127A  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-0F4h] +
call sub_101DD5D  +
mov eax [ebp-0F4h] +
mov ecx [ebp-0F0h] +
mov [edi] eax +
lea eax [ebp-108h] +
xor esi esi +
push eax  +
mov byte ptr [ebp-4] 7 +
mov [ebp-0F4h] esi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
push esi  +
mov [ebp-0F8h] ebx +
call SysFreeString  +
push esi  +
push ebx  +
lea ecx [ebp-2Ch] +
call sub_100CD3C  +
lea ecx [ebp-0ECh] +
mov [ebp-4] bl +
call sub_1051893  +
lea ecx [ebp-108h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-0F0h] +
call sub_100C50D  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
mov ebx ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1091354  +
cmp byte ptr [eax+19h] 5 +
jb loc_1091354  +
push offset dword_100C4B0  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push dword ptr [ebp+10h]  +
lea ecx [ebx+2F0h] +
push dword ptr [ebp+0Ch]  +
call sub_107E59D  +
test eax eax +
setnz byte ptr [ebp-1]  +
cmp byte ptr [ebp-1] 0 +
jnz loc_109138A  +
push dword ptr [ebp+10h]  +
lea ecx [ebx+300h] +
push dword ptr [ebp+0Ch]  +
call sub_107E59D  +
test eax eax +
jz loc_1091460  +
push esi  +
push edi  +
lea eax [ebp-44h] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:GetClientRect  +
cmp byte ptr [ebp-1] 0 +
lea esi [ebp-44h] +
lea edi [ebp-24h] +
movs   +
movs   +
movs   +
movs   +
jz loc_10913DF  +
mov eax [ebx+19Ch] +
add eax [ebp-44h] +
mov [ebp-24h] eax +
mov eax [ebx+1F8h] +
shr eax 7 +
test al 1 +
jz loc_10913CD  +
mov eax [ebx+1B4h] +
add eax 3 +
jmp loc_10913CF  +
xor eax eax +
push 0FFFFFFFDh  +
pop ecx  +
sub ecx [ebx+1ACh] +
sub ecx eax +
add [ebp-1Ch] ecx +
jmp loc_109140F  +
test byte ptr [ebx+1F8h] 1 +
jz loc_10913F3  +
mov eax [ebx+194h] +
add eax 3 +
jmp loc_10913F5  +
xor eax eax +
mov ecx [ebx+1ACh] +
add ecx eax +
add ecx [ebp-44h] +
push 0FFFFFFFDh  +
pop eax  +
sub eax [ebx+1BCh] +
mov [ebp-24h] ecx +
add [ebp-1Ch] eax +
cmp byte ptr [ebp-1] 0 +
lea esi [ebp-44h] +
lea edi [ebp-34h] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
jz loc_1091429  +
mov eax [ebx+194h] +
jmp loc_1091435  +
mov eax [ebp-3Ch] +
sub eax [ebx+1B4h] +
sub eax 3 +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-10h] 0 +
mov [ebp-34h] eax +
add eax 3 +
mov [ebp-2Ch] eax +
movzx eax byte ptr [ebp-1] +
mov [ebp-0Ch] eax +
lea eax [ebp-48h] +
push eax  +
mov [ebp-48h] ebx +
mov dword ptr [ebp-8] offset loc_109088A +
call sub_10C52ED  +
pop ebx  +
leave   +
retn 0Ch  +
***
push 48h  +
mov eax offset dword_10D8B60 +
call sub_100C4D0  +
mov esi [ebp+8] +
mov ebx ecx +
push 0  +
lea ecx [ebp-44h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcviewOnchan  +
lea ecx [ebp-44h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [esi+0Ch]  +
mov ecx [ebx+18Ch] +
call sub_10AE583  +
lea esi [eax+24h] +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
lea eax [ebp-30h] +
push eax  +
mov ecx ebx +
movs   +
call sub_10209B2  +
push 4  +
pop ecx  +
lea edi [ebp-30h] +
lea esi [ebp-20h] +
xor eax eax +
cmps   +
jz loc_10915D4  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebx+330h] +
call sub_10266EB  +
mov ecx [ebx+334h] +
mov eax [ebp-34h] +
cmp eax ecx +
jz loc_10914FE  +
cmp dword ptr [eax+34h] 8 +
jb loc_10914F9  +
mov eax [eax+20h] +
jmp loc_1091500  +
add eax 20h +
jmp loc_1091500  +
xor eax eax +
push eax  +
lea eax [ebp-54h] +
push eax  +
mov ecx ebx +
call sub_10264DA  +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109153D  +
lea ecx [ebp-44h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov eax [ebx+0D8h] +
mov esi [eax] +
mov [ebp-34h] eax +
lea eax [ebp-20h] +
lea edi [ebx+44h] +
push eax  +
mov eax [edi] +
mov ecx edi +
add esi 0ACh +
call dword ptr [eax+78h]  +
push eax  +
push dword ptr [ebp-34h]  +
call dword ptr [esi]  +
mov esi [ebx+32Ch] +
test esi esi +
jz loc_1091590  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+74h]  +
test eax eax +
setnle al  +
movzx eax al +
push eax  +
lea eax [ebp-54h] +
push eax  +
mov ecx esi +
call sub_1028275  +
lea ecx [ebp-54h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebx+310h] +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-54h] +
push eax  +
call sub_10B12CF  +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10915D4  +
lea ecx [ebp-44h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-44h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_100C50D  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+8] 0 +
jnz loc_1091653  +
push [ebp+arg_8]  +
push dword ptr [ebx+4]  +
push 1  +
push [ebp+arg_0]  +
call sub_108EDE3  +
mov eax [ebp+arg_0] +
jmp loc_109173C  +
mov eax [ebx+4] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_4] eax +
cmp esi [eax] +
jnz loc_109168D  +
lea eax [esi+0Ch] +
push eax  +
push edi  +
call sub_1038A5D  +
test al al +
jz loc_1091727  +
push edi  +
mov ecx ebx +
push esi  +
push 1  +
push [ebp+arg_0]  +
call sub_108EDE3  +
mov eax [ebp+arg_0] +
jmp loc_109173A  +
cmp esi eax +
jnz loc_10916AE  +
mov esi [eax+8] +
push edi  +
lea eax [esi+0Ch] +
push eax  +
call sub_1038A5D  +
test al al +
jz loc_1091727  +
push edi  +
push esi  +
push 0  +
mov ecx ebx +
jmp loc_109167D  +
lea eax [esi+0Ch] +
push eax  +
push edi  +
call sub_1038A5D  +
test al al +
jz loc_10916DD  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] esi +
call sub_107FED7  +
mov eax [ebp+arg_8] +
push edi  +
add eax 0Ch +
push eax  +
call sub_1038A5D  +
test al al +
jz loc_10916DD  +
mov eax [ebp+arg_8] +
jmp loc_109170F  +
push edi  +
lea eax [esi+0Ch] +
push eax  +
call sub_1038A5D  +
test al al +
jz loc_1091727  +
lea ecx [ebp+arg_8] +
mov [ebp+arg_8] esi +
call sub_107FF19  +
mov esi [ebp+arg_8] +
cmp esi [ebp+var_4] +
jz loc_109170C  +
lea eax [esi+0Ch] +
push eax  +
push edi  +
call sub_1038A5D  +
test al al +
jz loc_1091727  +
mov eax [ebp+arg_4] +
mov ecx [eax+8] +
cmp byte ptr [ecx+39h] 0 +
push edi  +
mov ecx ebx +
jz loc_109167A  +
push eax  +
push 0  +
jmp loc_109167D  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
call sub_1090A53  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_106BDDC +
and dword ptr [ebp-4] 0 +
lea edi [esi+8] +
mov ecx edi +
call sub_1090AF7  +
mov dword ptr [esi] offset off_109189C +
mov dword ptr [edi] offset off_10917D4 +
mov dword ptr [esi+0Ch] offset off_10917C0 +
mov dword ptr [esi+10h] offset off_10917A8 +
mov dword ptr [esi+14h] offset off_109179C +
mov eax esi +
call sub_1001FCF  +
retn   +
***
sub ecx 14h +
jmp loc_1092C76  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1091931  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10802AB  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109190E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10919D4  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1084FB9  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10919B1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1091A77  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10804A5  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1091A54  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1091B1A  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10805C1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1091AF7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1091BBD  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
push [ebp+arg_8]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_1085175  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1091B9A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1091C63  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_107FB7E  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1091C40  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1091D06  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10806D5  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1091CE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1091DA6  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1080809  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1091D83  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1091E49  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_108093F  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1091E26  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1091EEC  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
push [ebp+arg_8]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_1080A7B  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1091EC9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1091F92  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
push [ebp+arg_10]  +
mov ecx [ebp+var_4] +
push [ebp+arg_C]  +
lea eax [ebp+var_2C] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call sub_1080D07  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1091F6F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109203E  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10814C3  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109201B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10920DE  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1081615  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10920BB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092181  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_108107F  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109215E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092221  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_108110F  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10921FE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10922C1  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10811A5  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109229E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092364  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1081B02  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1092341  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092407  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
push [ebp+arg_C]  +
mov ecx [ebp+var_4] +
push [ebp+arg_8]  +
lea eax [ebp+var_2C] +
push [ebp+arg_4]  +
push eax  +
call sub_10812E5  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10923E4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10924B0  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1080E65  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109248D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092553  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1080F6F  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1092530  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10925F6  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_108485F  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10925D3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092699  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
push [ebp+arg_8]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_1087125  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1092676  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109273F  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10885C5  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109271C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10927E2  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1088998  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10927BF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092882  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1088A91  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109285F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092922  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1088B65  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10928FF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10929C2  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1088C3D  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109299F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
xor esi esi +
push esi  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
mov [ebp+var_4] esi +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092A65  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
mov ecx [ebp+var_4] +
push 1  +
push esi  +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_1088DF7  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1092A42  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092B0B  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1088D1B  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1092AE8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092BAB  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10892E5  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1092B88  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092C4E  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_108AE67  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1092C2B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_108E7D6  +
test byte ptr [ebp+8] 1 +
jz loc_1092C90  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092D17  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_108F2D9  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1092CF4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092DBE  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
mov ecx [ebp+var_4] +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_108F677  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1092D9B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092E62  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
mov ecx [ebp+var_4] +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_108F75F  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1092E3F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092F06  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
mov ecx [ebp+var_4] +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_108F835  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1092EE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1092FAA  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
mov ecx [ebp+var_4] +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_108F911  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1092F87  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
xor esi esi +
push esi  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
mov [ebp+var_4] esi +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1093051  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
mov ecx [ebp+var_4] +
push esi  +
push esi  +
push [ebp+arg_14]  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_108FA93  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109302E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10930FA  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
mov ecx [ebp+var_4] +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_108F9B4  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10930D7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109319E  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
mov ecx [ebp+var_4] +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_108FC95  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109317B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1093245  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_108FE39  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1093222  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1090DF2  +
and dword ptr [esi+40h] 0 +
mov dword ptr [esi+3Ch] offset off_106BDDC +
mov dword ptr [esi] offset off_10932F4 +
mov dword ptr [esi+4] offset off_10932DC +
mov dword ptr [esi+8] offset off_10932C4 +
mov dword ptr [esi+0Ch] offset off_10932B8 +
mov dword ptr [esi+3Ch] offset off_10932AC +
mov eax esi +
pop esi  +
retn   +
***
sub ecx 3Ch +
jmp loc_1093A53  +
***
sub ecx 0Ch +
jmp loc_1093A53  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10933D6  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090EF1  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_107F674  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10933B3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1093476  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090EF1  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_107F753  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1093453  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1093516  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090EF1  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_107F833  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10934F3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10935B6  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090EF1  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10841FD  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1093593  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1093659  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090EF1  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10842C7  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1093636  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10936FC  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090EF1  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_108438F  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10936D9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109379F  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090EF1  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1084459  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109377C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1093842  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090EF1  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_1084525  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109381F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10938E5  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090EF1  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10845E9  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10938C2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1093988  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090EF1  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10846AD  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1093965  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1093A2B  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090EF1  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_108477B  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1093A08  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_108E805  +
test byte ptr [ebp+8] 1 +
jz loc_1093A6D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub ecx 8 +
jmp loc_1093A83  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A8B2  +
test byte ptr [ebp+8] 1 +
jz loc_1093A9D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub ecx 18h +
jmp loc_1093A83  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1093B2E  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10910D5  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1093B0B  +
***
call sub_1001F95  +
mov ebx ecx +
push dword ptr [ebp+8]  +
call sub_1026721  +
mov esi eax +
cmp esi [ebx+4] +
jz loc_1093B83  +
lea eax [esi+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1038A5D  +
test al al +
jz loc_1093BD2  +
push 0  +
lea ecx [ebp-2Ch] +
mov dword ptr [ebp-14h] 7 +
call sub_100CD14  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp+8]  +
lea ecx [ebp-58h] +
call sub_108E763  +
push eax  +
push esi  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_109162B  +
mov esi [eax] +
push 0  +
push 1  +
lea ecx [ebp-48h] +
call sub_100CD3C  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100CD3C  +
lea eax [esi+1Ch] +
call sub_1001FCF  +
retn 4  +
***
sub ecx 18h +
jmp loc_101A86A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100ECDB  +
push [ebp+arg_4]  +
mov eax [esi+4] +
push [ebp+arg_0]  +
mov eax [eax] +
push eax  +
mov ecx esi +
call sub_103D46B  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1091746  +
push offset Addend  +
mov dword ptr [esi] offset off_106BFCC +
mov dword ptr [esi+8] offset off_1013944 +
mov dword ptr [esi+0Ch] offset off_106BFA4 +
mov dword ptr [esi+10h] offset off_106BF78 +
mov dword ptr [esi+14h] offset off_106BF58 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 14h +
jmp loc_1093D76  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+1Ch] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1093C90  +
lea ecx [esi-8] +
test ecx ecx +
jz loc_1093C90  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1093C68  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1093C68  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1093CD0  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFF8h +
call sub_1093CB5  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1093CF9  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1093CF9  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_106BFCC +
mov dword ptr [esi+8] offset off_1013944 +
mov dword ptr [esi+0Ch] offset off_106BFA4 +
mov dword ptr [esi+10h] offset off_106BF78 +
mov dword ptr [esi+14h] offset off_106BF58 +
mov dword ptr [esi+24h] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_108E7D6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1093D30  +
test byte ptr [ebp+8] 1 +
jz loc_1093D90  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_109326D  +
push offset Addend  +
mov dword ptr [esi] offset off_1013C1C +
mov dword ptr [esi+4] offset off_106C058 +
mov dword ptr [esi+8] offset off_106C02C +
mov dword ptr [esi+0Ch] offset off_106C00C +
mov dword ptr [esi+3Ch] offset off_106BFEC +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 0Ch +
jmp loc_1093EC7  +
***
sub ecx 3Ch +
jmp loc_1093EC7  +
***
sub dword ptr [esp+4] 8 +
jmp loc_101405D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1093E24  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1093E07  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1093E4D  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1093E4D  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_1013C1C +
mov dword ptr [esi+4] offset off_106C058 +
mov dword ptr [esi+8] offset off_106C02C +
mov dword ptr [esi+0Ch] offset off_106C00C +
mov dword ptr [esi+3Ch] offset off_106BFEC +
mov dword ptr [esi+1Ch] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_108E805  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1093E81  +
test byte ptr [ebp+8] 1 +
jz loc_1093EE1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1093BEF  +
pop ebp  +
retn 8  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_1093F25  +
mov eax 80004003h +
jmp loc_1093F93  +
push 44h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_1093F51  +
push esi  +
call sub_1093C19  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1093F67  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1093F61 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_1093F8C  +
lea ecx [esi+28h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_1093F7F  +
xor ebx ebx +
test ebx ebx +
jz loc_1093F8F  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
xor esi esi +
jmp loc_1093F8F  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_1093FBC  +
mov eax 80004003h +
jmp loc_109402A  +
push 44h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_1093FE8  +
push esi  +
call sub_1093D9C  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1093FFE  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1093FF8 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_1094023  +
lea ecx [esi+20h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_1094016  +
xor ebx ebx +
test ebx ebx +
jz loc_1094026  +
lea ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor esi esi +
jmp loc_1094026  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp esi eax +
jz loc_1094054  +
mov eax [eax+4] +
mov ecx [eax] +
push eax  +
push ecx  +
mov ecx esi +
call sub_1093EED  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
xor esi esi +
push esi  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtiedcomobject  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
cmp [edi] esi +
jnz loc_1094122  +
lea eax [ebp+10h] +
push eax  +
mov [ebp+10h] esi +
call sub_1093F09  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10940CC  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109412F  +
cmp [ebp+10h] esi +
jnz loc_10940E1  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1094125  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_108EC4F  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1094122  +
lea eax [ebp+10h] +
push eax  +
mov ecx edi +
call sub_1088284  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
xor esi esi +
push esi  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtiedcomobject  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
cmp [edi] esi +
jnz loc_1094211  +
lea eax [ebp+10h] +
push eax  +
mov [ebp+10h] esi +
call sub_1093FA0  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10941BB  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109421E  +
cmp [ebp+10h] esi +
jnz loc_10941D0  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1094214  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_108ECF0  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1094211  +
lea eax [ebp+10h] +
push eax  +
mov ecx edi +
call sub_10882B1  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+4] +
mov esi ecx +
mov [esi+4] eax +
lea eax [edi+8] +
push eax  +
lea ecx [esi+8] +
call sub_1094037  +
mov al [edi+14h] +
mov [esi+14h] al +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScgetm  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10942EC  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109435E  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
add esi 0C4h +
push esi  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push eax  +
call sub_1094060  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1094351  +
cmp dword ptr [esi] 0 +
jnz loc_109433D  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1094351  +
mov ecx esi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [esi] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScg_15  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
test edi edi +
jnz loc_1094407  +
push 80004003h  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1094477  +
and dword ptr [edi] 0 +
add esi 31Ch +
push esi  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push eax  +
call sub_109414F  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109446A  +
cmp dword ptr [esi] 0 +
jnz loc_1094459  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_109446A  +
mov ecx esi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [esi] +
mov [edi] eax +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_109423E  +
add edi 18h +
push edi  +
lea ecx [esi+18h] +
call sub_1088247  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 0FFFFFFF8h +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1094569  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_1090C75  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10943AF  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1094546  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
add eax 4 +
mov [esi] ecx +
push eax  +
lea ecx [esi+4] +
call sub_10944C3  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] esi +
jz loc_10945DB  +
sub [ebp+arg_8] 30h +
mov ecx [ebp+arg_8] +
sub esi 30h +
push esi  +
call sub_1094591  +
cmp esi [ebp+arg_0] +
jnz loc_10945C6  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10945FE  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_1094591  +
add esi 30h +
cmp esi [ebp+arg_4] +
jnz loc_10945F1  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10945B8  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:LoadLibraryA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetModuleHandleA  +
***
mov eax offset off_1030410 +
retn   +
***
mov dword ptr [ecx] offset off_10083D0 +
jmp sub_100F62A  +
***
call sub_1001F95  +
mov [ebp-20h] ecx +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov edi [ebp+8] +
push ebx  +
mov ecx edi +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aFixandreplaceh  +
mov ecx edi +
mov [ebp-4] ebx +
mov [ebp-1Ch] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax offset off_10025A8 +
mov [ebp-28h] eax +
mov [ebp-24h] ebx +
mov [ebp-4] esi +
mov [ebp-30h] eax +
mov [ebp-2Ch] ebx +
mov byte ptr [ebp-4] 2 +
call ds:CreatePopupMenu  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
mov [ebp-10h] eax +
cmp eax ebx +
jnz loc_1094731  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_10946EC  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
mov ecx edi +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx edi +
call esi  +
cmp eax ebx +
jge loc_1094731  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_109498A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_109498A  +
push eax  +
push offset dword_106C080  +
push 75h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_109498A  +
mov eax [ebp+0Ch] +
push dword ptr [eax]  +
lea ecx [ebp-28h] +
call ?Attach@CMenu@@QAEHPAUHMENU__@@@Z  +
mov edi 8000FFFFh +
test eax eax +
jnz loc_1094780  +
mov ecx [ebp+8] +
push edi  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
cmp eax ebx +
jge loc_1094780  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_109498A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_109498A  +
push eax  +
push offset dword_106C080  +
push 76h  +
jmp loc_1094721  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-30h] +
call ?Attach@CMenu@@QAEHPAUHMENU__@@@Z  +
test eax eax +
jnz loc_10947CB  +
mov ecx [ebp+8] +
push edi  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
cmp eax ebx +
jge loc_10947CB  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_109498A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_109498A  +
push eax  +
push offset dword_106C080  +
push 77h  +
jmp loc_1094721  +
push dword ptr [ebp-24h]  +
call ds:GetMenuItemCount  +
xor edi edi +
cmp eax ebx +
mov [ebp-18h] eax +
jle loc_1094939  +
push 30h  +
lea eax [ebp-70h] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp-70h] +
push eax  +
push 1  +
push edi  +
push dword ptr [ebp-24h]  +
mov dword ptr [ebp-70h] 30h +
mov dword ptr [ebp-6Ch] 127h +
call ds:GetMenuItemInfoW  +
test eax eax +
jnz loc_109483D  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1094826  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
cmp eax ebx +
jl loc_10948DD  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@XZ  +
push 400h  +
lea eax [ebp-14h] +
push eax  +
push edi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_101957E  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-60h]  +
push dword ptr [ebp-68h]  +
push dword ptr [ebp-2Ch]  +
call ds:AppendMenuW  +
cmp [ebp-5Ch] ebx +
jz loc_109488B  +
mov ecx [ebp-20h] +
lea eax [ebp-5Ch] +
push eax  +
lea eax [ebp-40h] +
push eax  +
call sub_1094674  +
lea ecx [ebp-40h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea eax [ebp-70h] +
push eax  +
push 1  +
push edi  +
push dword ptr [ebp-10h]  +
call ds:SetMenuItemInfoW  +
test eax eax +
jnz loc_10948C6  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_10948B3  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
cmp eax ebx +
jl loc_1094906  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
inc edi  +
cmp edi [ebp-18h] +
jge loc_1094939  +
jmp loc_10947E1  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1094939  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1094939  +
push eax  +
push offset dword_106C080  +
push 78h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1094939  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_109492D  +
cmp byte ptr [ecx+19h] 2 +
jb loc_109492D  +
push eax  +
push offset dword_106C080  +
push 79h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
push dword ptr [ebp-2Ch]  +
call ds:GetMenuItemCount  +
cmp eax [ebp-18h] +
jz loc_109496B  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_109496B  +
cmp byte ptr [eax+19h] 2 +
jb loc_109496B  +
push offset dword_106C080  +
push 7Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-28h] +
call ?Detach@CMenu@@QAEPAUHMENU__@@XZ  +
push eax  +
call ds:DestroyMenu  +
lea ecx [ebp-30h] +
call ?Detach@CMenu@@QAEPAUHMENU__@@XZ  +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov [ebp-10h] ebx +
cmp [ebp-24h] ebx +
jz loc_1094997  +
lea ecx [ebp-28h] +
call ?Detach@CMenu@@QAEPAUHMENU__@@XZ  +
cmp [ebp-2Ch] ebx +
jz loc_10949AB  +
lea ecx [ebp-30h] +
call ?Detach@CMenu@@QAEPAUHMENU__@@XZ  +
push eax  +
call ds:DestroyMenu  +
cmp [ebp-10h] ebx +
jz loc_10949B9  +
push dword ptr [ebp-10h]  +
call ds:DestroyMenu  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call sub_100BF07  +
lea ecx [ebp-28h] +
mov [ebp-4] bl +
call sub_100BF07  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+8Ch] +
cmp dword ptr [eax] 0 +
jz loc_1094A24  +
mov eax [eax] +
mov edx [eax] +
mov ecx eax +
pop ebp  +
jmp dword ptr [edx+0ECh]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CStatic@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1094A47  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
xor eax eax +
sub ecx 800Ah +
jz loc_1094A7B  +
dec ecx  +
jz loc_1094A76  +
dec ecx  +
jz loc_1094A72  +
dec ecx  +
jnz loc_1094A7E  +
push 8  +
jmp loc_1094A78  +
push 4  +
jmp loc_1094A78  +
push 2  +
pop eax  +
jmp loc_1094A7E  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
add ecx 0FFFF7FFFh +
xor eax eax +
cmp ecx 7 +
ja loc_1094AD9  +
jmp ds:off_1094ADD[ecx*4]  +
mov eax 8008h +
jmp loc_1094AD9  +
mov eax 8001h +
jmp loc_1094AD9  +
mov eax 8002h +
jmp loc_1094AD9  +
mov eax 8003h +
jmp loc_1094AD9  +
mov eax 8004h +
jmp loc_1094AD9  +
mov eax 8005h +
jmp loc_1094AD9  +
mov eax 8006h +
jmp loc_1094AD9  +
mov eax 8007h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100F62A  +
test byte ptr [ebp+8] 1 +
jz loc_1094B1C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10083D0 +
call sub_100F62A  +
test byte ptr [ebp+8] 1 +
jz loc_1094B48  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
xor ebx ebx +
mov [ebp-14h] ebx +
mov edi [ebp+8] +
push ebx  +
mov ecx edi +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCactionspan_18  +
mov ecx edi +
mov [ebp-4] ebx +
mov [ebp-14h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebp+10h] 2 +
jz loc_1094C89  +
mov ecx [ebp-10h] +
push dword ptr [ebp+10h]  +
add ecx 0D0h +
call sub_104612A  +
push 8000FFFFh  +
push eax  +
mov [ebp+10h] eax +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
push eax  +
mov ecx edi +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
mov ecx edi +
call esi  +
cmp eax ebx +
jge loc_1094C11  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1094C89  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1094C89  +
push eax  +
push offset dword_106C080  +
push 52h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1094C89  +
test byte ptr [ebp+18h] 10h +
mov ecx [ebp+10h] +
jz loc_1094C2D  +
call sub_10CF6CC  +
test eax eax +
jnz loc_1094C89  +
mov ecx [ebp-10h] +
call sub_100CBA3  +
jmp loc_1094C89  +
push dword ptr [ebp+14h]  +
call sub_10CF849  +
push eax  +
mov ecx edi +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx edi +
call esi  +
cmp eax ebx +
jge loc_1094C64  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1094C89  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1094C89  +
push eax  +
push offset dword_106C080  +
push 53h  +
jmp loc_1094C04  +
mov ecx [ebp-10h] +
call sub_100CBA3  +
push eax  +
mov ecx edi +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1094C89  +
mov ecx edi +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov eax edi +
call sub_1001FCF  +
retn 14h  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
mov ebx [ebp+8] +
push edi  +
mov ecx ebx +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionspan_19  +
mov ecx ebx +
mov [ebp-4] edi +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebp+10h] 4 +
jz loc_1094D73  +
push 8000FFFFh  +
mov ecx ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1094E4E  +
cmp byte ptr [eax+19h] 3 +
jb loc_1094E4E  +
push dword ptr [ebp+10h]  +
push offset dword_106C080  +
push 63h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_1094E4E  +
cmp [ebp+14h] edi +
jz loc_1094E14  +
mov eax [esi+164h] +
push eax  +
lea edi [esi+0D0h] +
push 3  +
mov ecx edi +
call sub_1026BFF  +
push eax  +
mov ecx ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx ebx +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
test eax eax +
jge loc_1094DD3  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1094E4E  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1094E4E  +
push eax  +
push offset dword_106C080  +
push 64h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
jmp loc_1094D69  +
push dword ptr [ebp+14h]  +
mov ecx edi +
call sub_10CF4E9  +
test al al +
jnz loc_1094E2A  +
push 8000FFFFh  +
mov ecx ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1094E4E  +
cmp byte ptr [eax+19h] 2 +
jb loc_1094E4E  +
push offset dword_106C080  +
push 65h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1094E4E  +
push 3  +
lea ecx [esi+0D0h] +
call sub_10188F8  +
push eax  +
mov ecx ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx esi +
call sub_100CBA3  +
push eax  +
mov ecx ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx ebx +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1094E4E  +
mov ecx ebx +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov eax ebx +
call sub_1001FCF  +
retn 10h  +
***
xor ds:byte_10D980E[eax] bh +
call sub_1001F95  +
mov [ebp-14h] ecx +
xor ebx ebx +
mov [ebp-18h] ebx +
mov esi [ebp+8] +
push ebx  +
mov ecx esi +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCactionspan_20  +
mov ecx esi +
mov [ebp-4] ebx +
mov [ebp-18h] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+10h] +
mov eax [eax] +
mov [ebp-10h] ebx +
mov ebx 80070057h +
push ebx  +
push dword ptr [ebp+0Ch]  +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100C5A1  +
mov [ebp-4] edi +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
mov ecx esi +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx esi +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
call esi  +
test eax eax +
jge loc_1094F80  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10950FE  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10950FE  +
push eax  +
push offset dword_106C080  +
push 7Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10950FE  +
mov ecx [ebp+0Ch] +
call sub_10CFAEB  +
push ebx  +
push eax  +
mov [ebp-1Ch] eax +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
push 2  +
pop ebx  +
push eax  +
mov [ebp-4] ebx +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_1094FDD  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10950FE  +
cmp [ecx+19h] bl +
jb loc_10950FE  +
push eax  +
push offset dword_106C080  +
push 7Ch  +
jmp loc_1094F70  +
***
mov ecx [ebp+10h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_109502A  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10950FE  +
cmp [ecx+19h] bl +
jb loc_10950FE  +
push eax  +
push offset dword_106C080  +
push 7Dh  +
jmp loc_1094F70  +
***
cmp dword ptr [ebp+14h] 0FFFFFFFFh +
jnz loc_109505A  +
mov ecx [ebp-14h] +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
call sub_1094674  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+0Ch] +
lea eax [ebp-2Ch] +
push eax  +
call sub_10CFB34  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_1095099  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10950FE  +
cmp [ecx+19h] bl +
jb loc_10950FE  +
push eax  +
push offset dword_106C080  +
push 7Eh  +
jmp loc_1094F70  +
***
mov ecx [ebp-1Ch] +
call sub_10CF595  +
mov ecx [ebp+0Ch] +
mov edi eax +
call sub_10CFB15  +
test al al +
jnz loc_10950C4  +
mov ecx [ebp+0Ch] +
call sub_10CFB06  +
test al al +
jnz loc_10950C4  +
cmp edi 1 +
jnz loc_10950C6  +
mov edi ebx +
jmp loc_10950C6  +
xor edi edi +
mov ecx [ebp-14h] +
call ?GetExStyle@CWnd@@QBEKXZ  +
mov esi [ebp-2Ch] +
test eax 400000h +
jnz loc_10950DB  +
mov esi [ebp-24h] +
mov ecx [ebp+10h] +
call sub_100A5CF  +
push dword ptr [ebp-28h]  +
mov ecx [eax] +
push esi  +
push edi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-10h]  +
push eax  +
call dword ptr [ecx+10h]  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
cmp dword ptr [ebp-10h] 0 +
jz loc_109510D  +
push dword ptr [ebp-10h]  +
call ds:DestroyMenu  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
xor edi edi +
mov [ebp-10h] edi +
mov ecx [ebp+8] +
push edi  +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
mov [ebp-4] edi +
inc edi  +
push offset aGethtreeitemfr  +
mov [ebp-10h] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx 8000FFFFh +
push ebx  +
push dword ptr [esi+8Ch]  +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
mov [ebp-4] edi +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
call edi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
call esi  +
test eax eax +
jge loc_1095205  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1095302  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1095302  +
push eax  +
push offset dword_106C080  +
push 80h  +
jmp loc_10952F7  +
mov eax [ebp-14h] +
mov eax [eax+8Ch] +
mov eax [eax+174h] +
push ebx  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_1095271  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1095302  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1095302  +
push eax  +
push offset dword_106C080  +
push 81h  +
jmp loc_10952F7  +
mov ebx [ebp-14h] +
mov ecx [ebp+8] +
add ebx 0A8h +
call esi  +
test eax eax +
jge loc_10952A4  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1095302  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1095302  +
push eax  +
push offset dword_106C080  +
push 82h  +
jmp loc_10952F7  +
push dword ptr [ebp+10h]  +
lea eax [ebp-24h] +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
push eax  +
call sub_10C417B  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_1095302  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1095302  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1095302  +
push eax  +
push offset dword_106C080  +
push 83h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor edi edi +
inc edi  +
push offset aGettaskandsect  +
mov [ebp-4] ebx +
mov [ebp-10h] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+10h] +
mov [eax] ebx +
mov eax [ebp+14h] +
lea ecx [esi+0D0h] +
push 2  +
mov [eax] ebx +
mov [ebp-18h] ecx +
call sub_1016801  +
push 80070057h  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-28h] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
mov [ebp-4] edi +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
call edi  +
lea ecx [ebp-28h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
call esi  +
cmp eax ebx +
jge loc_10953FA  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10954DB  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10954DB  +
push eax  +
push offset dword_106C080  +
push 84h  +
jmp loc_10954D0  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-14h] +
call sub_10CFA18  +
mov ecx [ebp+10h] +
mov [ecx] eax +
cmp eax ebx +
jz loc_109541C  +
mov eax [ebp+14h] +
mov dword ptr [eax] 2 +
jmp loc_10954DB  +
mov ecx [ebp-18h] +
push 1  +
call sub_1016801  +
push 80070057h  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-28h] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-28h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
cmp eax ebx +
jge loc_109547B  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10954DB  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10954DB  +
push eax  +
push offset dword_106C080  +
push 85h  +
jmp loc_10954D0  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-18h] +
call sub_10CFA18  +
mov ecx [ebp+10h] +
mov [ecx] eax +
cmp eax ebx +
jz loc_109549A  +
mov eax [ebp+14h] +
mov dword ptr [eax] 1 +
jmp loc_10954DB  +
mov ecx [ebp+8] +
push 8000FFFFh  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
cmp eax ebx +
jge loc_10954DB  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10954DB  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10954DB  +
push eax  +
push offset dword_106C080  +
push 86h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
lea eax [esi+1B1h] +
push eax  +
call sub_1045B3B  +
cmp byte ptr [esi+1B2h] 0 +
jz loc_109554A  +
mov ecx esi +
call sub_100CBA3  +
xor eax eax +
pop esi  +
retn 8  +
***
call sub_1001F95  +
mov ebx ecx +
xor edi edi +
mov [ebp-18h] edi +
mov esi [ebp+8] +
push edi  +
mov ecx esi +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov [ebp-4] edi +
inc edi  +
push offset aCactionspan_21  +
mov ecx esi +
mov [ebp-18h] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebx+8Ch]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov [ebp-4] edi +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
mov ecx esi +
call edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx esi +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
call esi  +
test eax eax +
jge loc_10955FF  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1095751  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1095751  +
push eax  +
push offset dword_106C080  +
push 89h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1095751  +
mov eax [ebx+8Ch] +
mov eax [eax+0D8h] +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_1095669  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1095751  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1095751  +
push eax  +
push offset dword_106C080  +
push 8Ah  +
jmp loc_10955EF  +
***
and dword ptr [ebp-10h] 0 +
cmp byte ptr [ebp+0Ch] 0 +
jnz loc_10956E5  +
mov ecx [ebx+8Ch] +
cmp dword ptr [ecx+270h] 0 +
jnz loc_10956DE  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_10872A3  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_10956E5  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1095751  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1095751  +
push eax  +
push offset dword_106C080  +
push 8Bh  +
jmp loc_10955EF  +
***
mov dword ptr [ebp-10h] 0FFFFFFFDh +
mov eax [ebp-14h] +
mov eax [eax] +
push dword ptr [ebp-10h]  +
mov [ebp-1Ch] eax +
mov eax [ebx+8Ch] +
lea ecx [eax+44h] +
movzx eax byte ptr [ebp+0Ch] +
push eax  +
mov eax [ecx] +
push 901Eh  +
call dword ptr [eax+78h]  +
push eax  +
push dword ptr [ebp-14h]  +
mov eax [ebp-1Ch] +
call dword ptr [eax+78h]  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jz loc_1095751  +
mov ebx [ebx+8Ch] +
lea ecx [ebx+44h] +
mov eax [ecx] +
lea edx [ebp-2Ch] +
push edx  +
call dword ptr [eax+20h]  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionspane_5  +
lea ecx [ebp-28h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx 8000FFFFh +
push ebx  +
push dword ptr [ebp+10h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-28h] +
call edi  +
mov [ebp-18h] eax +
test eax eax +
jge loc_109585B  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_109584A  +
cmp byte ptr [eax+19h] 2 +
jb loc_109584A  +
push dword ptr [ebp-18h]  +
push offset dword_106C080  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
push dword ptr [ebp-18h]  +
mov ecx [ebp+8] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_10959B8  +
mov eax [ebp-14h] +
push ebx  +
push dword ptr [eax+48h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
mov [ebp-18h] eax +
test eax eax +
jge loc_10958BD  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10958B5  +
cmp byte ptr [eax+19h] 2 +
jb loc_10958B5  +
push dword ptr [ebp-18h]  +
push offset dword_106C080  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
push dword ptr [ebp-18h]  +
jmp loc_10959AF  +
mov eax [ebp-14h] +
mov eax [eax+48h] +
mov eax [eax+0D8h] +
push ebx  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
mov esi eax +
xor edi edi +
cmp esi edi +
jge loc_1095926  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1095920  +
cmp byte ptr [eax+19h] 2 +
jb loc_1095920  +
push esi  +
push offset dword_106C080  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
push esi  +
jmp loc_10959AF  +
mov esi [ebp-18h] +
push dword ptr [ebp+10h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+58h]  +
cmp [ebp+14h] edi +
jz loc_1095942  +
push dword ptr [ebp+14h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+58h]  +
cmp eax edi +
jnz loc_10959AE  +
lea ecx [ebp-4Ch] +
call sub_100AD56  +
mov esi [ebp-14h] +
mov ecx [esi+48h] +
lea eax [ebp-4Ch] +
push eax  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_10849C1  +
lea ecx [ebp-38h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-44h] edi +
jz loc_1095979  +
cmp dword ptr [ebp-40h] 1 +
jnb loc_1095987  +
push dword ptr [esi+148h]  +
lea ecx [ebp-4Ch] +
call sub_100AE0E  +
push dword ptr [ebp-48h]  +
lea eax [ebp-38h] +
push 4  +
push edi  +
push eax  +
lea ecx [esi-44h] +
call sub_1029F85  +
lea ecx [ebp-38h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 1 +
call sub_100A77D  +
push edi  +
mov ecx [ebp+8] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea ecx [ebp-28h] +
mov dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-10h] edi +
xor ebx ebx +
mov [ebp-14h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCactionspane_3  +
mov [ebp-4] ebx +
mov [ebp-14h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [edi+8Ch] +
cmp eax ebx +
jnz loc_1095AB6  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1095CBA  +
cmp byte ptr [eax+19h] 3 +
jb loc_1095CBA  +
push offset dword_106C080  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1095CBA  +
mov edi [eax+0D8h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
mov [ebp-4] esi +
call ebx  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
call esi  +
test eax eax +
jge loc_1095B2A  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1095CBA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1095CBA  +
push eax  +
push offset dword_106C080  +
push 1Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1095CBA  +
push dword ptr [ebp+10h]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+58h]  +
cmp dword ptr [ebp+18h] 0 +
mov [ebp+10h] eax +
jnz loc_1095B5C  +
mov eax [ebp-10h] +
mov ecx [eax+8Ch] +
call sub_10873DD  +
test eax eax +
jz loc_1095B59  +
mov edx [edi] +
push eax  +
mov ecx edi +
call dword ptr [edx+58h]  +
jmp loc_1095B5C  +
mov eax [ebp+10h] +
test eax eax +
jnz loc_1095CBA  +
mov edi [ebp-10h] +
lea ecx [edi+0D0h] +
push 2  +
mov [ebp+10h] ecx +
call sub_10188F8  +
mov ecx [ebp+10h] +
push 3  +
call sub_10188F8  +
cmp dword ptr [ebp+14h] 0 +
jnz loc_1095B9D  +
mov ecx edi +
call sub_100CBA3  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1095CBA  +
lea ecx [ebp-38h] +
call sub_100AD56  +
mov ecx [edi+8Ch] +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
mov dword ptr [ebp-4] 2 +
call sub_10849C1  +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp dword ptr [ebp-30h] 0 +
jz loc_1095BD4  +
cmp dword ptr [ebp-2Ch] 1 +
jnb loc_1095BE2  +
push dword ptr [edi+18Ch]  +
lea ecx [ebp-38h] +
call sub_100AE0E  +
push dword ptr [ebp-34h]  +
mov ecx [ebp+10h] +
push 2  +
call sub_1026BFF  +
mov edi [ebp+8] +
push eax  +
mov ecx edi +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx edi +
call esi  +
test eax eax +
jge loc_1095C34  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1095CAE  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1095CAE  +
push eax  +
push offset dword_106C080  +
push 1Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1095CAE  +
mov ecx [ebp-10h] +
push 4  +
push 2  +
lea eax [ebp-24h] +
push eax  +
call sub_1054DE9  +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 3 +
call ebx  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx edi +
call esi  +
test eax eax +
jge loc_1095C89  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1095C89  +
cmp byte ptr [ecx+19h] 3 +
jb loc_1095C89  +
push eax  +
push offset dword_106C080  +
push 1Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
mov ecx [ebp-10h] +
call sub_100CBA3  +
push eax  +
mov ecx edi +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx edi +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1095CAE  +
mov ecx edi +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call sub_100A77D  +
mov ecx [ebp+8] +
call ds:?Clear@SC@mmcerror@@QAEXXZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionspan_22  +
lea ecx [ebp-24h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx 80070057h +
push ebx  +
push dword ptr [esi+8Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_1095DD0  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1095EBE  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1095EBE  +
push eax  +
push offset dword_106C080  +
push 30h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1095EBE  +
mov ecx [ebp-14h] +
and dword ptr [ebp-10h] 0 +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp-34h] +
push eax  +
call near ptr dword_109533C+5  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_1095E31  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1095EBE  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1095EBE  +
push eax  +
push offset dword_106C080  +
push 31h  +
jmp loc_1095DC0  +
***
push ebx  +
push dword ptr [ebp-10h]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_1095E7F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1095EBE  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1095EBE  +
push eax  +
push offset dword_106C080  +
push 32h  +
jmp loc_1095DC0  +
***
cmp byte ptr [ebp+0Ch] 0 +
jz loc_1095E8F  +
mov ecx [ebp-10h] +
call sub_10CFD61  +
jmp loc_1095E94  +
mov eax offset word_100A5FC +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov eax [ebp-14h] +
mov ecx [eax+8Ch] +
call near ptr dword_1080BC4+3  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call edi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 0 +
push esi  +
jz loc_1095F79  +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_1095F90  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx ebx +
test esi esi +
jge loc_1095F6F  +
push 0  +
jmp loc_1095F72  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_1095F87  +
push 0  +
mov ecx ebx +
call sub_1010F11  +
mov esi 80004002h +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push 20h  +
mov eax offset byte_10D7A1B +
call sub_1001F95  +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionspan_23  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
push 80070057h  +
push edi  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-1Ch] +
call esi  +
test eax eax +
jge loc_1096042  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10960CF  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10960CF  +
push eax  +
push offset dword_106C080  +
push 2Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10960CF  +
push offset off_1030410  +
mov ecx edi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jnz loc_1096087  +
push 8000FFFFh  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call esi  +
test eax eax +
jge loc_1096087  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10960CF  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10960CF  +
push eax  +
push offset dword_106C080  +
push 2Eh  +
jmp loc_1096032  +
***
mov ecx edi +
call sub_1045B7D  +
test al al +
jz loc_10960B8  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10960CF  +
cmp byte ptr [eax+19h] 4 +
jb loc_10960CF  +
push offset dword_106C080  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10960CF  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
push dword ptr [ebp+8]  +
call near ptr dword_1095D28+5  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov [ebp-1Ch] ecx +
xor esi esi +
mov [ebp-14h] esi +
mov edi [ebp+8] +
push esi  +
mov ecx edi +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov [ebp-4] esi +
inc esi  +
push offset aAddregionitems  +
mov ecx edi +
mov [ebp-14h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx 80070057h +
push ebx  +
push dword ptr [ebp+10h]  +
lea eax [ebp-2Ch] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100C5A1  +
mov [ebp-4] esi +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
mov ecx edi +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx edi +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
call edi  +
test eax eax +
jge loc_10961EC  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1096383  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1096383  +
push eax  +
push offset dword_106C080  +
push 66h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1096383  +
mov ecx [ebp+0Ch] +
call sub_10CFAEB  +
push ebx  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
push 2  +
pop ebx  +
push eax  +
mov [ebp-4] ebx +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call edi  +
test eax eax +
jge loc_1096249  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1096383  +
cmp [ecx+19h] bl +
jb loc_1096383  +
push eax  +
push offset dword_106C080  +
push 67h  +
jmp loc_10961DC  +
mov ecx [ebp+0Ch] +
call sub_1045EFC  +
test al al +
jnz loc_1096294  +
mov ecx [ebp+8] +
push 8000FFFFh  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call edi  +
test eax eax +
jge loc_1096294  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1096383  +
cmp [ecx+19h] bl +
jb loc_1096383  +
push eax  +
push offset dword_106C080  +
push 68h  +
jmp loc_10961DC  +
mov eax [ebp+10h] +
mov esi [eax+58h] +
jmp loc_1096356  +
mov eax [esi+8] +
test al 1 +
jz loc_10962B5  +
push dword ptr [esi]  +
mov ecx [ebp+0Ch] +
call sub_10CFD9B  +
jmp loc_1096353  +
and dword ptr [ebp+10h] 0 +
test al 0C0h +
jnz loc_1096313  +
mov eax [esi+4] +
cmp eax 0FFFFFFFFh +
jle loc_1096313  +
lea ecx [ebp+10h] +
push ecx  +
mov ecx [ebp-18h] +
push eax  +
call sub_10CF595  +
mov ecx [ebp-1Ch] +
push eax  +
call sub_10462DD  +
test al al +
jnz loc_1096313  +
mov ecx [ebp+8] +
call edi  +
test eax eax +
jge loc_1096313  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1096313  +
cmp byte ptr [ecx+19h] 5 +
jb loc_1096313  +
mov edx [esi+4] +
push eax  +
push edx  +
push offset dword_106C080  +
push 69h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
and dword ptr [ebp-10h] 0 +
mov ecx [esi] +
mov eax [esi+8] +
mov edx [esi+3Ch] +
mov ebx [esi+14h] +
push ecx  +
lea ecx [ebp-10h] +
push ecx  +
mov ecx [ebp+0Ch] +
and eax 0FFFFFEFFh +
push eax  +
push edx  +
push ebx  +
push dword ptr [ebp+10h]  +
call sub_10CFF6F  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call edi  +
test eax eax +
jl loc_109635F  +
cmp dword ptr [ebp-10h] 0 +
jz loc_109635F  +
mov esi [esi+54h] +
test esi esi +
jz loc_1096383  +
jmp loc_109629F  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1096383  +
cmp byte ptr [eax+19h] 2 +
jb loc_1096383  +
push offset dword_106C080  +
push 6Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call sub_1095F3F  +
test eax eax +
jge loc_10963D4  +
cmp eax 80004002h +
jz loc_10963D4  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
xor esi esi +
mov [ebp-14h] esi +
mov edi [ebp+8] +
push esi  +
mov ecx edi +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov [ebp-4] esi +
inc esi  +
push offset aCactionspan_17  +
mov ecx edi +
mov [ebp-14h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx 80070057h +
push ebx  +
push dword ptr [ebp+14h]  +
lea eax [ebp-28h] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_100C5A1  +
mov [ebp-4] esi +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
mov ecx edi +
call esi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx edi +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
call edi  +
test eax eax +
jge loc_1096489  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1096579  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1096579  +
push eax  +
push offset dword_106C080  +
push 5Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1096579  +
mov ecx [ebp+14h] +
call sub_10CFAEB  +
push ebx  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-28h] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
push 2  +
pop ebx  +
push eax  +
mov [ebp-4] ebx +
call esi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call edi  +
test eax eax +
jge loc_10964E6  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1096579  +
cmp [ecx+19h] bl +
jb loc_1096579  +
push eax  +
push offset dword_106C080  +
push 5Bh  +
jmp loc_1096479  +
mov esi [ebp+10h] +
mov edi [ebp+14h] +
push dword ptr [esi+14h]  +
mov ecx edi +
call sub_10243B7  +
push dword ptr [esi+3Ch]  +
mov ecx edi +
call sub_102459D  +
mov ecx edi +
call sub_10CFAF4  +
push dword ptr [esi+8]  +
mov ecx edi +
mov ebx eax +
call sub_1046539  +
mov ecx edi +
call sub_10CFB1E  +
test al al +
jz loc_109654E  +
mov ecx edi +
call sub_10CFB2B  +
test al al +
jnz loc_109654E  +
mov eax 100h +
test ebx eax +
jnz loc_109654E  +
test [esi+8] eax +
jz loc_109654E  +
mov ecx [ebp-10h] +
push esi  +
push edi  +
lea eax [ebp-28h] +
push eax  +
call sub_1096143  +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi [esi+4] +
mov ecx [ebp-18h] +
and dword ptr [ebp+14h] 0 +
lea eax [ebp+14h] +
push eax  +
push esi  +
call sub_10CF595  +
mov ecx [ebp-10h] +
push eax  +
call sub_10462DD  +
test al al +
jz loc_1096579  +
push dword ptr [ebp+14h]  +
mov ecx edi +
call sub_1045ED9  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor edi edi +
inc edi  +
push offset aShowscopeconte  +
mov [ebp-4] ebx +
mov [ebp-1Ch] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-14h] ebx +
mov [ebp-4] edi +
mov [ebp-18h] ebx +
xor eax eax +
lea edi [ebp-30h] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp-30h] ax +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-40h] +
push dword ptr [esi+8Ch]  +
mov byte ptr [ebp-4] 3 +
push eax  +
call sub_100C5A1  +
mov ecx [ebp+8] +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
mov ebx ds:?ToHr@SC@mmcerror@@QBEJXZ +
call ebx  +
test eax eax +
jge loc_109669F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10968F3  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10968F3  +
push eax  +
push offset dword_106C080  +
push 6Bh  +
jmp loc_10968E8  +
mov esi [esi+8Ch] +
push 0Ah  +
pop eax  +
lea ecx [esi+44h] +
mov [ebp-30h] ax +
mov dword ptr [ebp-28h] 80020004h +
mov eax [ecx] +
call dword ptr [eax+78h]  +
test eax eax +
jz loc_10968F3  +
push 48h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-20h] eax +
mov byte ptr [ebp-4] 5 +
test eax eax +
jz loc_10966E1  +
mov ecx eax +
call sub_108859A  +
mov esi eax +
jmp loc_10966E3  +
xor esi esi +
mov byte ptr [ebp-4] 3 +
test esi esi +
jnz loc_10966FE  +
mov ecx [ebp+8] +
push 8007000Eh  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10968F3  +
or dword ptr [esi+34h] 9 +
movzx eax byte ptr [ebp+10h] +
mov ecx [ebp-10h] +
neg eax  +
sbb eax eax +
and eax 2 +
mov [esi+0Ch] eax +
mov dword ptr [esi+10h] 8000h +
mov byte ptr [esi+8] 1 +
mov eax [ecx+20h] +
mov [esi+14h] eax +
mov eax [ecx+8Ch] +
test eax eax +
jz loc_1096733  +
add eax 44h +
jmp loc_1096735  +
xor eax eax +
mov [esi+18h] eax +
mov ecx [ecx+8Ch] +
add ecx 44h +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov [esi+28h] eax +
mov eax [ebp-10h] +
mov ecx [eax+8Ch] +
call sub_100C52C  +
test al al +
jz loc_1096779  +
mov eax [ebp-10h] +
mov eax [eax+8Ch] +
mov eax [eax+178h] +
mov [ebp+10h] eax +
lea eax [ebp+10h] +
push eax  +
lea ecx [esi+20h] +
call sub_1088199  +
mov ecx [ebp-10h] +
lea eax [esi+2Ch] +
push eax  +
push dword ptr [esi+28h]  +
lea eax [ebp-40h] +
push eax  +
call near ptr dword_109515C+5  +
mov ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 6 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call ebx  +
test eax eax +
jge loc_10967D3  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10967D3  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10967D3  +
push eax  +
push offset dword_106C080  +
push 6Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
push esi  +
push 0  +
lea ecx [ebp-14h] +
call sub_100A5E6  +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
mov eax [ebp-10h] +
mov ecx [eax+8Ch] +
call sub_108FA93  +
mov esi [ebp+8] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 7 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx esi +
call ebx  +
test eax eax +
jge loc_109683F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10968F3  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10968F3  +
push eax  +
push offset dword_106C080  +
push 6Dh  +
jmp loc_10968E8  +
push 80070057h  +
push dword ptr [ebp-14h]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 8 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx esi +
call ebx  +
test eax eax +
jge loc_109688C  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10968F3  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10968F3  +
push eax  +
push offset dword_106C080  +
push 6Eh  +
jmp loc_10968E8  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-18h] +
call near ptr dword_10963B0+3  +
push dword ptr [ebp+14h]  +
mov ecx [ebp-10h] +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-40h] +
push eax  +
call near ptr dword_1094ECC+3  +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 9 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx esi +
call ebx  +
test eax eax +
jge loc_10968F3  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10968F3  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10968F3  +
push eax  +
push offset dword_106C080  +
push 6Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
lea ecx [ebp-30h] +
call sub_100EBF1  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_109690C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_109691D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov ebx ecx +
xor esi esi +
mov [ebp-18h] esi +
mov ecx [ebp+8] +
push esi  +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor edi edi +
inc edi  +
push offset aShowresultscon  +
mov [ebp-4] esi +
mov [ebp-18h] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-10h] esi +
mov [ebp-4] edi +
mov [ebp-14h] esi +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-28h] +
push dword ptr [ebx+8Ch]  +
mov byte ptr [ebp-4] 2 +
push eax  +
call sub_100C5A1  +
mov ecx [ebp+8] +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
call esi  +
test eax eax +
jge loc_1096A07  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1096B75  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1096B75  +
push eax  +
push offset dword_106C080  +
push 70h  +
jmp loc_1096B6A  +
mov eax [ebx+8Ch] +
lea ecx [eax+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
test eax eax +
jnz loc_1096A59  +
mov ecx [ebp+8] +
push 8000FFFFh  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_1096A59  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1096B75  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1096B75  +
push eax  +
push offset dword_106C080  +
push 71h  +
jmp loc_1096B6A  +
push 1  +
push 1  +
lea ecx [ebp-10h] +
call sub_100A5E6  +
mov ecx [ebx+8Ch] +
push eax  +
lea eax [ebp-28h] +
push eax  +
call near ptr dword_108912C+3  +
mov ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_1096ABE  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1096B75  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1096B75  +
push eax  +
push offset dword_106C080  +
push 72h  +
jmp loc_1096B6A  +
push 80070057h  +
push dword ptr [ebp-10h]  +
lea eax [ebp-28h] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_1096B0D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1096B75  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1096B75  +
push eax  +
push offset dword_106C080  +
push 73h  +
jmp loc_1096B6A  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-14h] +
call near ptr dword_10963B0+3  +
push dword ptr [ebp+10h]  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-28h] +
push eax  +
mov ecx ebx +
call near ptr dword_1094ECC+3  +
mov ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 6 +
call edi  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jge loc_1096B75  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1096B75  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1096B75  +
push eax  +
push offset dword_106C080  +
push 74h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1096B86  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1096B97  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov ebx ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionspan_24  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_1096C6F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10970CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10970CA  +
push eax  +
push offset dword_106C080  +
push 36h  +
jmp loc_10970BF  +
push 80070057h  +
push dword ptr [ebx+8Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_1096CCC  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10970CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10970CA  +
push eax  +
push offset dword_106C080  +
push 37h  +
jmp loc_10970BF  +
mov eax [ebx+8Ch] +
mov eax [eax+0D8h] +
push 8000FFFFh  +
push eax  +
mov [ebp-10h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_1096D33  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10970CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10970CA  +
push eax  +
push offset dword_106C080  +
push 38h  +
jmp loc_10970BF  +
mov eax [ebp+10h] +
cmp eax 1 +
jnz loc_1096D9C  +
cmp byte ptr [ebp+14h] 0 +
jnz loc_1096D81  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_1096D81  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10970CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10970CA  +
push eax  +
push offset dword_106C080  +
push 39h  +
jmp loc_10970BF  +
push 0FFFFFFFFh  +
push 1  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
mov ecx ebx +
call near ptr dword_10965D8+5  +
mov byte ptr [ebp-4] 5 +
jmp loc_1096FA7  +
cmp eax 4 +
jnz loc_1096E11  +
cmp byte ptr [ebp+14h] 0 +
jz loc_1096DB6  +
mov eax [ebx+8Ch] +
cmp dword ptr [eax+270h] 0 +
jz loc_1096DF6  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_1096DF6  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10970CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10970CA  +
push eax  +
push offset dword_106C080  +
push 3Ah  +
jmp loc_10970BF  +
mov ebx [ebx+8Ch] +
lea ecx [ebx+44h] +
mov eax [ecx] +
lea edx [ebp-34h] +
push edx  +
call dword ptr [eax+28h]  +
mov byte ptr [ebp-4] 6 +
jmp loc_1096FA7  +
cmp eax 2 +
jnz loc_1096FBF  +
cmp dword_10F55CC 3 +
jnz loc_1096E63  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_1096E63  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10970CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10970CA  +
push eax  +
push offset dword_106C080  +
push 3Bh  +
jmp loc_10970BF  +
cmp byte ptr [ebp+14h] 0 +
jz loc_1096EC7  +
mov ebx [ebx+8Ch] +
lea ecx [ebx+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov ebx eax +
mov eax [ebp-10h] +
mov ecx [eax] +
or dword ptr [ebp+0Ch] 0FFFFFFFFh +
lea edx [ebp+0Ch] +
push edx  +
push ebx  +
push eax  +
call dword ptr [ecx+48h]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_1096F18  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10970CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10970CA  +
push eax  +
push offset dword_106C080  +
push 3Dh  +
jmp loc_10970BF  +
mov ecx [ebx+8Ch] +
call sub_10873DD  +
mov ebx eax +
test ebx ebx +
jnz loc_1096E79  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_1096E79  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10970CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10970CA  +
push eax  +
push offset dword_106C080  +
push 3Ch  +
jmp loc_10970BF  +
mov eax [ebp+0Ch] +
and dword ptr [ebp-44h] 0 +
mov ecx offset dword_10F54B0 +
mov [ebp-48h] eax +
mov byte ptr [ebp-3Fh] 1 +
mov byte ptr [ebp-40h] 1 +
call sub_100942E  +
mov ebx eax +
push 80070057h  +
push ebx  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_1096F8E  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10970CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10970CA  +
push eax  +
push offset dword_106C080  +
push 3Eh  +
jmp loc_10970BF  +
push 1  +
lea edx [ebp-48h] +
push edx  +
lea ecx [ebx+0C4h] +
mov eax [ecx] +
lea edx [ebp-34h] +
push edx  +
call dword ptr [eax+8]  +
mov byte ptr [ebp-4] 8 +
push eax  +
lea ecx [ebp-24h] +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10970CA  +
cmp eax 8 +
jnz loc_109708C  +
mov ecx [ebp+0Ch] +
call sub_10CFB1E  +
test al al +
mov ecx ebx +
lea eax [ebp-34h] +
jz loc_1097045  +
cmp byte ptr [ebp+14h] 0 +
push 23h  +
jz loc_1096FF2  +
push 0  +
push dword ptr [ebp+0Ch]  +
push eax  +
call near ptr dword_10965D8+5  +
mov byte ptr [ebp-4] 9 +
jmp loc_1096FFF  +
push dword ptr [ebp+0Ch]  +
push eax  +
call near ptr dword_1096954+3  +
mov byte ptr [ebp-4] 0Ah +
push eax  +
lea ecx [ebp-24h] +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_10970CA  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10970CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10970CA  +
push eax  +
push offset dword_106C080  +
push 3Fh  +
jmp loc_10970BF  +
push dword ptr [ebp+14h]  +
push eax  +
call near ptr dword_1095550+5  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0Bh +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_10970CA  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10970CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10970CA  +
push eax  +
push offset dword_106C080  +
push 40h  +
jmp loc_10970BF  +
push 80070057h  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call edi  +
test eax eax +
jge loc_10970CA  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10970CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10970CA  +
push eax  +
push offset dword_106C080  +
push 41h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
lea ecx [ebp-24h] +
call edi  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-14h] 1 +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
xor ebx ebx +
mov [ebp-18h] ebx +
mov ecx [ebp+8] +
push ebx  +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push offset aCactionspan_16  +
mov [ebp-4] ebx +
mov [ebp-18h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebp+10h] 2 +
mov [ebp-10h] ebx +
jz loc_109741F  +
push 80070057h  +
push dword ptr [ebp+18h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
mov [ebp-4] esi +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
call esi  +
cmp eax ebx +
jge loc_1097209  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_109741F  +
cmp byte ptr [ecx+19h] 2 +
jb loc_109741F  +
push eax  +
push offset dword_106C080  +
push 54h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_109741F  +
mov ecx [ebp-14h] +
push dword ptr [ebp+10h]  +
add ecx 0D0h +
call sub_104612A  +
push 8000FFFFh  +
push eax  +
mov [ebp-1Ch] eax +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
cmp eax ebx +
jge loc_1097275  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_109741F  +
cmp byte ptr [ecx+19h] 2 +
jb loc_109741F  +
push eax  +
push offset dword_106C080  +
push 55h  +
jmp loc_10971F9  +
cmp [ebp+14h] ebx +
mov [ebp+10h] ebx +
jle loc_109741F  +
mov eax [ebp+18h] +
mov ecx [ebp+10h] +
lea ebx [eax+ecx*4] +
cmp dword ptr [ebx] 0 +
jnz loc_10972AA  +
mov ecx [ebp+8] +
push 8000FFFFh  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jl loc_1097380  +
mov eax [ebx] +
mov eax [eax] +
mov ecx [ebp-1Ch] +
push 0  +
push eax  +
call sub_10CF66A  +
test eax eax +
jz loc_10972FB  +
mov ecx [ebp-14h] +
push eax  +
push dword ptr [ebx]  +
lea eax [ebp-30h] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_10963E0  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jl loc_10973AC  +
inc dword ptr [ebp-10h]  +
jmp loc_1097370  +
mov eax [ebx] +
mov eax [eax+4Ch] +
push 80070057h  +
push eax  +
mov [ebp-20h] eax +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
mov ecx [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
call esi  +
test eax eax +
jl loc_10973CA  +
mov eax [ebp-20h] +
cmp dword ptr [eax+4Ch] 0 +
jnz loc_1097370  +
mov ebx [ebx] +
test byte ptr [ebx+8] 18h +
jnz loc_1097370  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1097370  +
cmp byte ptr [eax+19h] 2 +
jb loc_1097370  +
push dword ptr [ebx]  +
push offset dword_106C080  +
push 59h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
inc dword ptr [ebp+10h]  +
mov eax [ebp+10h] +
cmp eax [ebp+14h] +
jge loc_10973F1  +
jmp loc_1097281  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10973F1  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10973F1  +
push eax  +
push dword ptr [ebp+10h]  +
push offset dword_106C080  +
push 56h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
jmp loc_10973F1  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10973F1  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10973F1  +
push eax  +
push offset dword_106C080  +
push 57h  +
jmp loc_10973E6  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10973F1  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10973F1  +
push eax  +
push offset dword_106C080  +
push 58h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
cmp dword ptr [ebp-10h] 0 +
jle loc_109741F  +
mov ecx [ebp-14h] +
call sub_100CBA3  +
mov ecx [ebp+8] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109741F  +
mov ecx [ebp+8] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101B801  +
test byte ptr [ebp+8] 1 +
jz loc_10974A9  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov ebx ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionspan_25  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi 80070057h +
push edi  +
push dword ptr [ebp+8]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
test eax eax +
jge loc_1097550  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1097652  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1097652  +
push eax  +
push offset dword_106C080  +
push 33h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1097652  +
push edi  +
push dword ptr [ebx+8Ch]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
test eax eax +
jge loc_10975AA  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1097652  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1097652  +
push eax  +
push offset dword_106C080  +
push 34h  +
jmp loc_1097540  +
***
mov ecx [ebp+8] +
call sub_10CFAFD  +
mov edi eax +
push edi  +
call near ptr dword_1094A50+3  +
test eax eax +
jz loc_10975F1  +
cmp dword ptr [ebp+0Ch] 1 +
setz cl  +
movzx ecx cl +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx ebx +
call near ptr dword_1096BD4+3  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1097652  +
push edi  +
call near ptr dword_1094A84+3  +
test eax eax +
jz loc_1097620  +
cmp dword ptr [ebp+0Ch] 1 +
mov ecx [ebx+8Ch] +
push eax  +
jnz loc_109760F  +
call near ptr dword_108698C+5  +
jmp loc_1097614  +
call near ptr dword_108C528+3  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1097652  +
push 8000FFFFh  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1097652  +
cmp byte ptr [eax+19h] 2 +
jb loc_1097652  +
push offset dword_106C080  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-1Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
sub ecx 54h +
jmp loc_101B6A0  +
***
sub ecx 7Ch +
jmp loc_101B6A0  +
***
sub ecx 44h +
jmp loc_101B6A0  +
***
sub ecx 6Ch +
jmp loc_101B6A0  +
***
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jge loc_10977A3  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1097A49  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1097A49  +
push eax  +
push offset dword_106C080  +
push 27h  +
jmp loc_1097A3E  +
mov ecx [ebp-10h] +
call sub_10CFB15  +
test al al +
lea eax [ebp-38h] +
jz loc_1097823  +
cmp dword ptr [ebp-14h] 1 +
push 0FFFFFFFFh  +
mov ecx ebx +
jnz loc_10977CD  +
push 0  +
push dword ptr [ebp-10h]  +
push eax  +
call near ptr dword_10965D8+5  +
mov byte ptr [ebp-4] 2 +
jmp loc_10977DA  +
push dword ptr [ebp-10h]  +
push eax  +
call near ptr dword_1096954+3  +
mov byte ptr [ebp-4] 3 +
push eax  +
lea ecx [ebp-28h] +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jge loc_1097A49  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1097A49  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1097A49  +
push eax  +
push offset dword_106C080  +
push 28h  +
jmp loc_1097A3E  +
push 80070057h  +
push dword ptr [ebx+8Ch]  +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jge loc_109787D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1097A49  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1097A49  +
push eax  +
push offset dword_106C080  +
push 29h  +
jmp loc_1097A3E  +
mov eax [ebx+8Ch] +
mov eax [eax+0D8h] +
push 8000FFFFh  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jge loc_10978E4  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1097A49  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1097A49  +
push eax  +
push offset dword_106C080  +
push 2Ah  +
jmp loc_1097A3E  +
mov ecx [ebp-10h] +
call sub_10CFB06  +
test al al +
jz loc_109790C  +
push dword ptr [ebp-14h]  +
mov ecx ebx +
push dword ptr [ebp-10h]  +
call near ptr dword_10974B0+5  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1097A49  +
mov ecx [ebp-10h] +
call sub_10CFAD9  +
mov ecx [ebp-10h] +
mov [ebp+8] eax +
call sub_10CFB1E  +
test al al +
jz loc_1097967  +
cmp dword ptr [ebp-14h] 1 +
push dword ptr [ebp+8]  +
lea eax [ebp-38h] +
mov ecx ebx +
jnz loc_1097942  +
push 0  +
push dword ptr [ebp-10h]  +
push eax  +
call near ptr dword_10965D8+5  +
mov byte ptr [ebp-4] 6 +
jmp loc_109794F  +
push dword ptr [ebp-10h]  +
push eax  +
call near ptr dword_1096954+3  +
mov byte ptr [ebp-4] 7 +
push eax  +
lea ecx [ebp-28h] +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_1097A49  +
mov ecx [ebp-10h] +
call sub_10CFAEB  +
push 8000FFFFh  +
push eax  +
mov [ebp-10h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jge loc_10979C7  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1097A49  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1097A49  +
push eax  +
push offset dword_106C080  +
push 2Bh  +
jmp loc_1097A3E  +
cmp dword ptr [ebp-14h] 2 +
jnz loc_10979DF  +
mov ecx [ebx+8Ch] +
call sub_10873DD  +
mov [ebp-14h] eax +
test eax eax +
jnz loc_10979F0  +
mov eax [ebx+8Ch] +
lea ecx [eax+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov [ebp-14h] eax +
mov eax [ebp-18h] +
push dword ptr [ebp+8]  +
mov ecx [ebp-10h] +
mov esi [eax] +
call sub_10CF595  +
push eax  +
push 9033h  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
call dword ptr [esi+78h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call edi  +
test eax eax +
jge loc_1097A49  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1097A49  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1097A49  +
push eax  +
push offset dword_106C080  +
push 2Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
push 0  +
push 0  +
push 401h  +
push dword ptr [ebx+20h]  +
call ds:PostMessageW  +
lea ecx [ebp-28h] +
call edi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
push 20h  +
mov eax offset byte_10D7A1B +
call sub_1001F95  +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionspan_27  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-1Ch] +
call esi  +
test eax eax +
jge loc_1097B72  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1097BFC  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1097BFC  +
push eax  +
push offset dword_106C080  +
push 24h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1097BFC  +
push offset off_1030410  +
mov ecx edi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jnz loc_1097BB7  +
push 8000FFFFh  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call esi  +
test eax eax +
jge loc_1097BB7  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1097BFC  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1097BFC  +
push eax  +
push offset dword_106C080  +
push 25h  +
jmp loc_1097B62  +
***
mov ecx edi +
call sub_1045B7D  +
test al al +
jz loc_1097BE8  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1097BFC  +
cmp byte ptr [eax+19h] 4 +
jb loc_1097BFC  +
push offset dword_106C080  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1097BFC  +
push dword ptr [ebp+8]  +
mov ecx edi +
call near ptr dword_10976F4+3  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi eax +
push esi  +
call sub_1033075  +
mov eax [esi+4] +
neg eax  +
push eax  +
mov eax [esi] +
neg eax  +
push eax  +
push esi  +
call ds:OffsetRect  +
mov edi ds:GetSystemMetrics +
push 21h  +
call edi  +
neg eax  +
push 20h  +
mov [ebp+dy] eax +
call edi  +
push [ebp+dy]  +
neg eax  +
push eax  +
push esi  +
call ds:InflateRect  +
mov eax [ebp+arg_0] +
mov ecx [eax+14h] +
add ecx [esi+4] +
mov edi ebx +
mov [esi+0Ch] ecx +
movs   +
movs   +
movs   +
movs   +
mov ecx [eax+10h] +
inc ecx  +
inc ecx  +
add [ebx] ecx +
mov eax [eax+10h] +
imul eax eax +
add [ebx+8] eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call sub_100A4F0  +
xor edi edi +
cmp dword_10F6C64 edi +
jnz locret_1097D77  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jz loc_1097D61  +
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_1097D63  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jz locret_1097D77  +
push ebx  +
call ds:SetLastError  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
push 0  +
mov esi eax +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 1008h  +
mov edi ecx +
call ds:SystemParametersInfoW  +
test eax eax +
jnz loc_1097DC1  +
and [ebp+pvParam] eax +
cmp [ebp+pvParam] 0 +
jnz loc_1097DCE  +
xor al al +
jmp loc_1097E7E  +
cmp byte_10FD580 0 +
jnz loc_1097DFD  +
push offset aMsimg32_dll  +
mov byte_10FD580 1 +
call sub_1097CEB  +
test eax eax +
jz loc_1097DFD  +
push offset aGradientfill  +
push eax  +
call ds:__imp_GetProcAddress  +
mov dword_10FD57C eax +
mov ecx dword_10FD57C +
test ecx ecx +
jz loc_1097DC7  +
mov eax [ebx] +
mov [ebp+var_2C] eax +
mov eax [ebx+4] +
mov [ebp+var_28] eax +
mov eax edi +
shl eax 8 +
mov [ebp+var_24] ax +
mov eax 0FF00h +
mov edx edi +
and edx eax +
mov [ebp+var_22] dx +
xor edx edx +
mov [ebp+var_1E] dx +
mov edx [ebx+8] +
mov [ebp+var_1C] edx +
mov edx [ebx+0Ch] +
mov [ebp+var_18] edx +
mov edx esi +
shl edx 8 +
mov [ebp+var_14] dx +
mov edx esi +
and edx eax +
shr edi 8 +
and edi eax +
shr esi 8 +
and esi eax +
xor eax eax +
and [ebp+var_C] eax +
push 0  +
mov [ebp+var_E] ax +
inc eax  +
push eax  +
mov [ebp+var_8] eax +
lea eax [ebp+var_C] +
push eax  +
push 2  +
lea eax [ebp+var_2C] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_20] di +
mov [ebp+var_12] dx +
mov [ebp+var_10] si +
call ecx  +
mov al 1 +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
jmp sub_100F62A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1008170 +
call sub_100F62A  +
test byte ptr [ebp+8] 1 +
jz loc_1097EE1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push 0Ch  +
mov esi ecx +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jz loc_1097F09  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
xor ecx ecx +
test eax eax +
setz cl  +
mov al cl +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
mov edi eax +
test edi edi +
jnz loc_1097F33  +
xor al al +
jmp loc_1097F5D  +
push ebx  +
mov ecx edi +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
cmp eax esi +
setnz bl  +
test bl bl +
jz loc_1097F53  +
movzx eax [ebp+arg_0] +
push eax  +
push esi  +
mov ecx edi +
call ?SetActiveView@CFrameWnd@@QAEXPAVCView@@H@Z  +
jmp loc_1097F5A  +
mov ecx esi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
mov al bl +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_10089D0 +
jmp sub_100F62A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+uFormat]  +
push [ebp+lpRect]  +
push [ebp+nCount]  +
push [ebp+lpString]  +
push dword ptr [ecx+4]  +
call ds:DrawTextW  +
pop ebp  +
retn 10h  +
***
push 31h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
push eax  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1097FC5  +
mov eax [eax+20h] +
push eax  +
push dword ptr [ecx+20h]  +
call ds:IsChild  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCcclistview_10  +
lea ecx [ebp-24h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push ebx  +
push offset off_10F6CCC  +
push offset off_10F6C88  +
push ebx  +
push dword ptr [esi+88h]  +
call __RTDynamicCast  +
add esp 14h +
mov ecx eax +
mov [ebp-14h] ecx +
cmp [ebp+10h] ebx +
jz loc_10980F0  +
cmp [esi+58h] ebx +
jz loc_1098070  +
lea eax [ebp-34h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call ds:GetWindowRect  +
mov eax [ebp-28h] +
sub eax [ebp-30h] +
mov ecx [esi+4Ch] +
push 14h  +
push eax  +
mov eax [ebp-2Ch] +
sub eax [ebp-34h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1098156  +
mov eax [esi+4Ch] +
push dword ptr [eax+20h]  +
call ds:GetParent  +
mov [esi+58h] eax +
lea eax [esi+5Ch] +
mov dword ptr [eax] 2Ch +
push eax  +
mov eax [esi+4Ch] +
push dword ptr [eax+20h]  +
call ds:GetWindowPlacement  +
push dword ptr [ebp+0Ch]  +
mov eax [esi+4Ch] +
push dword ptr [eax+20h]  +
call ds:SetParent  +
mov ecx [esi+4Ch] +
push 5  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
lea eax [ebp-34h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call ds:GetWindowRect  +
mov eax [ebp-28h] +
sub eax [ebp-30h] +
mov ecx [esi+4Ch] +
push 4  +
push eax  +
mov eax [ebp-2Ch] +
sub eax [ebp-34h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
mov eax [esi+4Ch] +
mov ecx [ebp+10h] +
mov eax [eax+20h] +
mov [ecx] eax +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1098149  +
push edi  +
call sub_10824DB  +
jmp loc_1098149  +
cmp [esi+58h] ebx +
jnz loc_1098101  +
mov ecx [ebp+8] +
push ebx  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_1098156  +
cmp ecx ebx +
jz loc_109810B  +
push ebx  +
call sub_10824DB  +
push dword ptr [esi+58h]  +
mov eax [esi+4Ch] +
push dword ptr [eax+20h]  +
call ds:SetParent  +
lea edi [esi+5Ch] +
cmp [edi] ebx +
jz loc_1098131  +
mov eax [esi+4Ch] +
push edi  +
mov [esi+64h] ebx +
push dword ptr [eax+20h]  +
call ds:SetWindowPlacement  +
push 2Ch  +
push ebx  +
push edi  +
mov [esi+58h] ebx +
call memset  +
mov eax [esi] +
add esp 0Ch +
push esi  +
call dword ptr [eax+60h]  +
xor edi edi +
inc edi  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] edi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCcclistview_53  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+10h] +
mov ecx [ebp+14h] +
mov [eax] ebx +
mov edx [ecx] +
cmp edx 0FFFFFFFFh +
jge loc_1098215  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109824E  +
mov edi [edi+94h] +
cmp edx edi +
jl loc_1098222  +
push esi  +
jmp loc_109823B  +
sub edi edx +
mov edx [ebp+0Ch] +
mov [eax] edi +
cmp edi edx +
jbe loc_109822F  +
mov [eax] edx +
mov edi [eax] +
add [ecx] edi +
xor ecx ecx +
cmp [eax] edx +
setnz cl  +
push ecx  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push offset aCcclistview_44  +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+0Ch] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 104Ch  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 1008h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 1053h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push eax  +
push [ebp+wParam]  +
push 1013h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 1015h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 1016h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 105Fh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 1060h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 102Bh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 102Ch  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 1030h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
push 1042h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 1207h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_8] +
cmp [ebp+arg_0] ecx +
jz loc_109852E  +
sub ecx 8 +
mov edx [ecx] +
sub eax 8 +
mov [eax] edx +
mov edx [ecx+4] +
mov [eax+4] edx +
cmp ecx [ebp+arg_0] +
jnz loc_1098519  +
pop ebp  +
retn   +
***
mov eax ds:off_109853C +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10160F3  +
test byte ptr [ebp+8] 1 +
jz loc_109855F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CHeaderCtrl@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1098585  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewSccolu  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [esi+0D8h] +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push 8000FFFFh  +
mov esi eax +
push esi  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1098618  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109863C  +
push dword ptr [ebp+0Ch]  +
mov eax [edi] +
push esi  +
push edi  +
call dword ptr [eax+0E8h]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewScde_1  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [esi+0D8h] +
lea ecx [esi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push 8000FFFFh  +
mov esi eax +
push esi  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1098728  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1098749  +
mov eax [edi] +
push esi  +
push edi  +
call dword ptr [eax+0F0h]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 0  +
push offset off_10F70A8  +
push offset off_10F6C88  +
push 0  +
push eax  +
call __RTDynamicCast  +
mov edi eax +
add esp 14h +
test edi edi +
jnz loc_1098811  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1098848  +
cmp byte ptr [eax+19h] 2 +
jb loc_1098848  +
push offset dword_106C090  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_1098848  +
mov ecx edi +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
test eax eax +
jnz loc_1098837  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1098848  +
cmp byte ptr [eax+19h] 2 +
jb loc_1098848  +
push offset dword_106C090  +
push 0Bh  +
jmp loc_1098804  +
***
push 0  +
push edi  +
mov ecx eax +
call ?SetActiveView@CFrameWnd@@QAEXPAVCView@@H@Z  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop edi  +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 0  +
push offset off_10F70A8  +
push offset off_10F6C88  +
push 0  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
mov edi eax +
call sub_100ABA9  +
test edi edi +
jz loc_10988A8  +
test eax eax +
jz loc_10988A8  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1097FB6  +
neg eax  +
sbb al al +
inc al  +
mov [edi+84h] al +
jmp loc_10988CC  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10988CC  +
cmp byte ptr [eax+19h] 3 +
jb loc_10988CC  +
push offset dword_106C090  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100ABA9  +
test eax eax +
jz loc_10988FE  +
cmp byte ptr [eax+168h] 0 +
jz loc_10988FE  +
mov ecx esi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
jmp loc_1098905  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100ABA9  +
test eax eax +
jz loc_1098935  +
cmp byte ptr [eax+168h] 0 +
jz loc_1098935  +
mov ecx esi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
mov byte ptr [esi+85h] 1 +
jmp loc_109893C  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
retn 0Ch  +
***
lea eax [ecx+85h] +
cmp byte ptr [eax] 0 +
jz loc_1098955  +
mov byte ptr [eax] 0 +
jmp locret_109895A  +
call ?Default@CWnd@@IAEJXZ  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 11h +
jz loc_109897A  +
cmp dword ptr [ebp+8] 10h +
jz loc_109897A  +
call ?Default@CWnd@@IAEJXZ  +
jmp loc_109899F  +
movzx eax word ptr [ebp+10h] +
movzx edx word ptr [ebp+0Ch] +
shl eax 10h +
or eax edx +
push eax  +
push dword ptr [ebp+8]  +
mov eax [ecx+9Ch] +
push 101h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
cmp dword ptr [ebp+8] 41h +
push esi  +
mov esi ecx +
jnz loc_10989F5  +
call ?GetStyle@CWnd@@QBEKXZ  +
test al 4 +
jnz loc_10989F5  +
push 11h  +
call ds:GetKeyState  +
mov ecx 0FFFFFF00h +
test ax cx +
jz loc_10989F5  +
push 2  +
pop eax  +
mov [ebp-30h] eax +
mov [ebp-2Ch] eax +
lea eax [ebp-3Ch] +
push eax  +
push 0FFFFFFFFh  +
push 102Bh  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
test eax eax +
jz loc_10989FC  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 25h +
jz loc_1098A1E  +
cmp dword ptr [ebp+8] 27h +
jz loc_1098A1E  +
call ?Default@CWnd@@IAEJXZ  +
jmp loc_1098A43  +
movzx eax word ptr [ebp+10h] +
movzx edx word ptr [ebp+0Ch] +
shl eax 10h +
or eax edx +
push eax  +
push dword ptr [ebp+8]  +
mov eax [ecx+9Ch] +
push 104h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0Dh +
jz loc_1098A5C  +
call ?Default@CWnd@@IAEJXZ  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov esi ecx +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
test eax eax +
jz loc_1098A84  +
push 1  +
push esi  +
mov ecx eax +
call ?SetActiveView@CFrameWnd@@QAEXPAVCView@@H@Z  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
push dword ptr [esi+20h]  +
mov edi ds:GetParent +
call edi  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 0  +
push offset off_10F6CCC  +
push offset off_10F6C88  +
push 0  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
test eax eax +
jnz loc_1098AEB  +
mov eax [esi+20h] +
mov ecx esi +
mov [ebp-0Ch] eax +
call ?GetDlgCtrlID@CWnd@@QBEHXZ  +
push dword ptr [esi+20h]  +
mov [ebp-8] eax +
mov dword ptr [ebp-4] 0FFFFFFF9h +
call edi  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
lea ecx [ebp-0Ch] +
push ecx  +
push dword ptr [ebp-8]  +
push 4Eh  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push esi  +
lea esi [ecx-50h] +
push 1  +
push 0FFFFFFFFh  +
mov ecx esi +
call sub_107E863  +
cmp eax 0FFFFFFFFh +
jnz loc_1098B36  +
mov ecx esi +
call sub_101C3DE  +
test eax eax +
jle loc_1098B36  +
mov eax [ebp+0Ch] +
mov [ebp-2Ch] eax +
mov eax [ebp+8] +
mov [ebp-30h] eax +
lea eax [ebp-3Ch] +
push eax  +
push 0  +
mov ecx esi +
call sub_1098469  +
pop esi  +
leave   +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamclistview_4  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1098B95  +
cmp byte ptr [eax+19h] 5 +
jb loc_1098B95  +
push offset dword_106C090  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
cmp byte ptr [edi+0F8h] 0 +
jz loc_1098BB0  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1098C54  +
mov eax [ebp+10h] +
cmp eax 0FFFFFEBAh +
jnz loc_1098C1A  +
mov esi [ebp+0Ch] +
push 80070057h  +
push dword ptr [esi+14h]  +
lea eax [ebp-30h] +
push esi  +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1098C47  +
mov eax [esi+14h] +
test [eax] bl +
jz loc_1098C47  +
push dword ptr [esi+0Ch]  +
mov ecx edi +
call sub_1056F17  +
xor ecx ecx +
test al al +
setnz cl  +
push ecx  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_1098C47  +
cmp eax 0FFFFFEC9h +
jz loc_1098C36  +
cmp eax 0FFFFFECDh +
jz loc_1098C36  +
cmp eax 0FFFFFEB9h +
jz loc_1098C36  +
cmp eax 0FFFFFEBBh +
jnz loc_1098C47  +
push esi  +
push esi  +
push dword_10F5348  +
push dword ptr [edi+20h]  +
call ds:PostMessageW  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi-4Ch] +
mov ecx edi +
call sub_100E4E1  +
mov ebx eax +
call ds:GetFocus  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
lea ecx [esi-4Ch] +
cmp eax ecx +
setz cl  +
test cl cl +
jnz loc_1098D04  +
cmp eax ebx +
jz loc_1098D2D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ebp+8] 1 +
jnz loc_1098CFB  +
mov ecx edi +
call ?GetStyle@CWnd@@QBEKXZ  +
and al 3 +
cmp al 1 +
jnz loc_1098CFB  +
mov ecx edi +
mov [esi+38h] al +
call sub_100E4E1  +
mov ecx eax +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
xor eax eax +
inc eax  +
jmp loc_1098CFD  +
***
cmp dword ptr [ebp+8] 0 +
jnz loc_1098CFB  +
push 1  +
mov ecx edi +
call sub_1097F1B  +
jmp loc_1098D28  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1098D63  +
push esi  +
lea esi [ecx-4Ch] +
push 1  +
mov ecx esi +
call sub_1097F1B  +
mov ecx esi +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
pop esi  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 40h +
push edi  +
mov edi ecx +
mov eax [edi+0E0h] +
cmp eax [ebp+8] +
jz loc_1098DF4  +
push ebx  +
push esi  +
mov esi ds:SendMessageW +
push 8  +
pop ebx  +
cmp eax 0FFFFFFFFh +
jz loc_1098DCB  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [edi+20h] +
push 0  +
push dword ptr [ebp-4]  +
push 100Ch  +
push eax  +
call esi  +
mov [ebp-4] eax +
test eax eax +
jl loc_1098DCB  +
mov eax [edi+20h] +
and dword ptr [ebp-34h] 0 +
lea ecx [ebp-40h] +
push ecx  +
push dword ptr [ebp-4]  +
mov [ebp-30h] ebx +
push 102Bh  +
push eax  +
call esi  +
jmp loc_1098D99  +
***
cmp dword ptr [ebp+8] 0FFFFFFFFh +
jz loc_1098DE9  +
mov eax [edi+20h] +
lea ecx [ebp-40h] +
push ecx  +
push dword ptr [ebp+8]  +
mov [ebp-30h] ebx +
push 102Bh  +
push eax  +
mov [ebp-34h] ebx +
call esi  +
mov eax [ebp+8] +
pop esi  +
mov [edi+0E0h] eax +
pop ebx  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10089D0 +
call sub_100F62A  +
test byte ptr [ebp+8] 1 +
jz loc_1098E1E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
test eax eax +
setz bl  +
push esi  +
mov esi [ecx+4Ch] +
neg eax  +
push edi  +
sbb eax eax +
and eax 4 +
lea ebx [ebx+ebx+2] +
push ebx  +
mov [ebp+arg_0] eax +
push 0FFFFFFFFh  +
jmp loc_1098E61  +
push 4  +
push [ebp+arg_0]  +
mov ecx esi +
push edi  +
call MFC42u_6896  +
push ebx  +
push edi  +
mov ecx esi +
call sub_107E863  +
mov edi eax +
test edi edi +
jge loc_1098E52  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ecx +
mov eax [esi] +
push esi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jz loc_1098E9F  +
push [ebp+arg_0]  +
call sub_105572A  +
jmp loc_1098F36  +
cmp [ebp+arg_0] 0 +
jnz loc_1098EAD  +
or eax 0FFFFFFFFh +
jmp loc_1098F36  +
push ebx  +
push edi  +
push [ebp+arg_0]  +
call sub_105572A  +
lea ebx [esi+1A8h] +
push eax  +
mov ecx ebx +
mov [ebp+var_4] eax +
call sub_106F6C4  +
mov edi eax +
test edi edi +
jl loc_1098EE6  +
cmp edi [esi+8Ch] +
jge loc_1098EEE  +
mov ecx [esi+4Ch] +
push edi  +
call ?GetItemData@CListCtrl@@QBEKH@Z  +
cmp [ebp+var_4] eax +
jnz loc_1098EEE  +
jmp loc_1098EF8  +
cmp edi [esi+8Ch] +
jl loc_1098EF8  +
mov ecx ebx +
or edi 0FFFFFFFFh +
call sub_1018278  +
cmp edi 0FFFFFFFFh +
jnz loc_1098F32  +
push [ebp+arg_0]  +
mov [ebp+lParam] 1 +
call sub_105572A  +
mov esi [esi+4Ch] +
mov [ebp+var_14] eax +
push edi  +
lea eax [ebp+lParam] +
push eax  +
mov ecx esi +
call sub_109839C  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_1098F32  +
push 0  +
push edi  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_1056413  +
mov eax edi +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_11  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+10h] +
or dword ptr [esi] 0FFFFFFFFh +
mov eax [edi] +
push edi  +
call dword ptr [eax+0A4h]  +
test eax eax +
mov eax [ebp+0Ch] +
jz loc_1098F9C  +
mov eax [eax] +
mov ecx [ebp+8] +
mov [esi] eax +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1098FF5  +
push dword ptr [eax]  +
call sub_1054C16  +
push 8000FFFFh  +
push eax  +
mov [ebp+0Ch] eax +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_1098FE8  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1098E7A  +
mov [esi] eax +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCcclistview_27  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+0Ch] +
cmp eax ebx +
jl loc_10990E0  +
cmp eax [edi+8Ch] +
jge loc_10990E0  +
mov ecx [edi+4Ch] +
push eax  +
push eax  +
call sub_10983E2  +
test eax eax +
jnz loc_10990DB  +
push 80004005h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10990F8  +
lea eax [ebp-20h] +
jmp loc_10990CF  +
push 80070057h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_12  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx [ebp+arg_C] +
mov esi [ebp+arg_0] +
and dword ptr [ebx] 0 +
mov eax [esi] +
push esi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jz loc_10991B3  +
push 8000FFFFh  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
mov ecx [esi+4Ch] +
push edi  +
call sub_101C3DE  +
mov edi eax +
jmp loc_10991DC  +
push edi  +
mov ecx esi +
call sub_1054BEB  +
test eax eax +
jz loc_10991DC  +
mov ecx [eax+0Ch] +
cmp ecx [ebp+arg_4] +
jnz loc_10991DC  +
mov ecx [eax+14h] +
cmp ecx [ebp+arg_8] +
jz loc_10991E1  +
dec edi  +
js loc_10991F8  +
jmp loc_10991C0  +
push eax  +
mov [ebx] eax +
call sub_105572A  +
push 0  +
push edi  +
push eax  +
lea ecx [esi+1A8h] +
call sub_1056413  +
cmp dword ptr [ebx] 0 +
pop edi  +
lea ecx [ebp+var_10] +
jnz loc_109919A  +
push 80004005h  +
jmp loc_1099192  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_13  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+arg_0] +
mov ebx [eax+4Ch] +
mov eax [ebp+arg_10] +
push dword ptr [ebp+arg_C]  +
mov edi [ebp+arg_14] +
and dword ptr [eax] 0 +
or dword ptr [edi] 0FFFFFFFFh +
push [ebp+arg_8]  +
jmp loc_10992C0  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A4h]  +
test eax eax +
jnz loc_10992D5  +
mov ecx [ebp+arg_0] +
push esi  +
call sub_1054BEB  +
test eax eax +
jz loc_10992BC  +
mov ecx [eax+0Ch] +
cmp ecx [ebp+arg_4] +
jz loc_10992D0  +
cmp ecx 3951589h +
jz loc_10992D0  +
push dword ptr [ebp+arg_C]  +
push esi  +
mov ecx ebx +
call sub_107E863  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_10992D7  +
jmp loc_109928F  +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
mov [edi] esi +
xor eax eax +
cmp dword ptr [edi] 0FFFFFFFFh +
lea ecx [ebp+var_10] +
setz al  +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_C] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp eax edi +
jl loc_10994CD  +
mov esi [ebp+arg_0] +
cmp eax [esi+94h] +
jge loc_10994CD  +
mov ebx [esi+4Ch] +
mov eax [esi] +
push esi  +
mov [ebp+arg_0] edi +
mov [ebp+var_4] ebx +
call dword ptr [eax+0A4h]  +
test eax eax +
jz loc_10993E8  +
mov eax [ebp+arg_8] +
cmp [eax] edi +
jnz loc_10994C1  +
mov eax [ebp+wParam] +
cmp eax edi +
jl loc_10994C1  +
cmp eax [esi+8Ch] +
jge loc_10994C1  +
cmp [ebp+arg_10] edi +
jnz loc_10994C1  +
cmp [ebp+arg_14] edi +
jnz loc_10994C1  +
cmp [ebp+arg_18] edi +
jnz loc_10994C1  +
mov esi [ebp+arg_1C] +
cmp esi edi +
jz loc_10994C8  +
push 0FFFFFFFFh  +
push eax  +
mov ecx ebx +
call sub_109848B  +
mov [esi] eax +
mov eax [ebp+arg_20] +
cmp eax edi +
jz loc_10994C8  +
mov [eax] edi +
jmp loc_10994C8  +
mov ebx [ebp+arg_8] +
mov eax [ebx] +
cmp eax edi +
jz loc_10993FD  +
push eax  +
mov ecx esi +
call sub_1098E7A  +
mov edi eax +
jmp loc_1099400  +
mov edi [ebp+wParam] +
test edi edi +
jl loc_10994C1  +
cmp edi [esi+8Ch] +
jge loc_10994C1  +
push edi  +
mov ecx esi +
call sub_1054BEB  +
mov [ebx] eax +
test eax eax +
jnz loc_109942C  +
mov eax 8000FFFFh +
jmp loc_10994D2  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_1099455  +
push [ebp+arg_C]  +
mov ecx [ebp+var_4] +
push edi  +
lea eax [ebp+arg_8] +
push eax  +
call ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z  +
push [ebp+arg_8]  +
call sub_10C9E21  +
lea ecx [ebp+arg_8] +
mov [esi] eax +
call ??1CString@@QAE@XZ  +
mov esi [ebp+arg_1C] +
test esi esi +
jz loc_1099469  +
mov ecx [ebp+var_4] +
push 0FFFFFFFFh  +
push edi  +
call sub_109848B  +
mov [esi] eax +
mov eax [ebx] +
mov edx 3951589h +
cmp [eax+0Ch] edx +
jnz loc_1099479  +
xor eax eax +
jmp loc_10994D2  +
mov ecx [ebp+arg_14] +
mov edi [ebp+arg_20] +
mov esi [ebp+arg_18] +
test ecx ecx +
jnz loc_109948E  +
test esi esi +
jnz loc_109948E  +
test edi edi +
jz loc_10994C8  +
test eax eax +
jz loc_10994B8  +
test ecx ecx +
jz loc_109949B  +
mov eax [eax+10h] +
mov [ecx] eax +
test esi esi +
jz loc_10994A6  +
mov eax [ebx] +
mov eax [eax+14h] +
mov [esi] eax +
test edi edi +
jz loc_10994C8  +
mov eax [ebx] +
xor ecx ecx +
cmp [eax+0Ch] edx +
setz cl  +
mov [edi] ecx +
jmp loc_10994C8  +
mov [ebp+arg_0] 80004005h +
jmp loc_10994C8  +
mov [ebp+arg_0] 80070057h +
mov eax [ebp+arg_0] +
jmp loc_10994D2  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_14  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jz loc_1099538  +
push 8000FFFFh  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1054BEB  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
test eax eax +
jnz loc_1099559  +
push 80004005h  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_10] +
jmp loc_1099520  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
push edi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jz loc_10995CB  +
mov eax [ebp+arg_C] +
or eax [ebp+arg_10] +
test eax 0FFFFFFFCh +
jz loc_10995CB  +
mov eax 80004005h +
jmp loc_109965F  +
cmp [ebp+arg_8] 0 +
push ebx  +
push esi  +
mov esi 80004005h +
jz loc_10995F3  +
mov eax [edi] +
push edi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jnz loc_10995F3  +
push [ebp+arg_8]  +
mov ecx edi +
call sub_1098E7A  +
mov ebx eax +
jmp loc_10995F6  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jl loc_109965B  +
push 3Ch  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+arg_C] +
mov ecx eax +
or ecx [ebp+arg_10] +
add esp 0Ch +
mov [ebp+var_30] eax +
lea eax [ebp+lParam] +
push eax  +
mov [ebp+var_2C] ecx +
mov ecx [edi+4Ch] +
push ebx  +
mov [ebp+var_38] ebx +
mov [ebp+lParam] 8 +
call sub_1098469  +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 7FFFBFFBh +
add esi 80004005h +
cmp dword ptr [edi+198h] 0 +
jz loc_109965B  +
test byte ptr [ebp+arg_C] 1 +
jz loc_109965B  +
mov ecx [edi+4Ch] +
push 0  +
push ebx  +
call sub_10983BE  +
mov eax esi +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 14h  +
***
call sub_100C4D0  +
mov edi [ebp+10h] +
xor ebx ebx +
mov [ebp-228h] edi +
cmp edi ebx +
jz loc_109987B  +
push dword ptr [ebp+8]  +
call sub_1054C16  +
push dword ptr [ebp+0Ch]  +
mov esi eax +
call sub_1054C16  +
cmp esi ebx +
jz loc_109987B  +
cmp eax ebx +
jz loc_109987B  +
mov ecx 3951589h +
cmp [esi+0Ch] ecx +
setz dl  +
cmp [eax+0Ch] ecx +
setz al  +
cmp dl al +
jz loc_10996DC  +
xor eax eax +
test dl dl +
setz al  +
lea eax [eax+eax-1] +
cmp [edi] ebx +
jnz loc_109987D  +
neg eax  +
jmp loc_109987D  +
mov esi [edi+7Ch] +
cmp esi ebx +
jz loc_109987B  +
lea ecx [ebp-220h] +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-224h] +
mov [ebp-4] ebx +
call ??0CString@@QAE@XZ  +
push 3Ch  +
lea eax [ebp-264h] +
push ebx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call memset  +
mov eax [edi+8] +
mov ebx [edi+84h] +
mov [ebp-25Ch] eax +
add esp 0Ch +
lea eax [ebp-21Ch] +
mov dword ptr [ebp-264h] 1 +
mov dword ptr [ebp-24Ch] 104h +
mov [ebp-250h] eax +
test ebx ebx +
jz loc_1099845  +
mov eax [ebp+8] +
mov edi 20Ah +
push edi  +
mov [ebp-244h] eax +
lea eax [ebp-21Ch] +
push 0  +
push eax  +
call memset  +
mov eax [esi] +
add esp 0Ch +
lea ecx [ebp-264h] +
push ecx  +
push ebx  +
push esi  +
call dword ptr [eax+1Ch]  +
mov ebx eax +
lea ecx [ebp-220h] +
test ebx ebx +
jnz loc_1099794  +
push dword ptr [ebp-250h]  +
call ??4CString@@QAEABV0@PBG@Z  +
jmp loc_10997C3  +
push offset dword_106C0A0  +
call ??4CString@@QAEABV0@PBD@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10997C3  +
cmp byte ptr [eax+19h] 2 +
jb loc_10997C3  +
push ebx  +
push offset dword_106C090  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov eax [ebp+0Ch] +
push edi  +
mov [ebp-244h] eax +
lea eax [ebp-21Ch] +
push 0  +
push eax  +
call memset  +
mov eax [esi] +
add esp 0Ch +
lea ecx [ebp-264h] +
push ecx  +
mov ecx [ebp-228h] +
push dword ptr [ecx+84h]  +
push esi  +
call dword ptr [eax+1Ch]  +
mov esi eax +
lea ecx [ebp-224h] +
test esi esi +
jnz loc_1099810  +
push dword ptr [ebp-250h]  +
call ??4CString@@QAEABV0@PBG@Z  +
jmp loc_109983F  +
push offset dword_106C0A0  +
call ??4CString@@QAEABV0@PBD@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_109983F  +
cmp byte ptr [eax+19h] 2 +
jb loc_109983F  +
push esi  +
push offset dword_106C090  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov edi [ebp-228h] +
mov eax [ebp-220h] +
cmp dword ptr [eax-8] 0 +
mov ecx [ebp-224h] +
jnz loc_1099885  +
cmp dword ptr [ecx-8] 0 +
jnz loc_1099885  +
lea ecx [ebp-224h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-220h] +
call ??1CString@@QAE@XZ  +
xor eax eax +
call sub_100C50D  +
retn 0Ch  +
or ebx 0FFFFFFFFh +
push ebx  +
push ecx  +
push ebx  +
push eax  +
push 1  +
push 400h  +
call ds:CompareStringW  +
dec eax  +
jz loc_10998C1  +
dec eax  +
jz loc_10998BD  +
dec eax  +
jz loc_10998B8  +
push dword ptr [ebp-224h]  +
push dword ptr [ebp-220h]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
jmp loc_10998C3  +
xor eax eax +
inc eax  +
jmp loc_10998C3  +
xor eax eax +
jmp loc_10998C3  +
mov eax ebx +
cmp dword ptr [edi] 0 +
jnz loc_10998CA  +
neg eax  +
lea ecx [ebp-224h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-220h] +
mov [ebp-4] ebx +
call ??1CString@@QAE@XZ  +
mov eax esi +
jmp loc_109987D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push [ebp+wParam]  +
mov ecx [eax+4Ch] +
call sub_1098404  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push [ebp+bErase]  +
mov ecx [eax+4Ch] +
call sub_107E61F  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+4Ch] +
push esi  +
xor esi esi +
call sub_100E4E1  +
cmp eax esi +
jz loc_109995C  +
push [ebp+lParam]  +
push esi  +
push 1216h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
mov esi eax +
mov eax esi +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax [ebp+arg_0] +
mov ecx [eax+4Ch] +
and [ebp+var_4] 0 +
call sub_100E4E1  +
mov [ebp+arg_0] eax +
test eax eax +
jnz loc_10999A0  +
mov [ebp+var_4] 80004005h +
jmp loc_1099A55  +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi ebx +
shr esi 0Fh +
push edi  +
mov edi ebx +
not esi  +
and edi 0FFFF7FFFh +
and esi 1 +
cmp edi 1 +
jz loc_10999CD  +
test edi edi +
jz loc_10999CD  +
mov [ebp+var_4] 80070057h +
jmp loc_1099A52  +
xor eax eax +
cmp ebx eax +
jz loc_10999D7  +
cmp esi eax +
jz loc_10999DC  +
cmp [ebp+arg_C] eax +
jz loc_1099A4B  +
cmp ebx eax +
jnz loc_10999EB  +
cmp esi eax +
jz loc_10999EB  +
mov ecx [ebp+arg_C] +
cmp [ecx] eax +
jz loc_1099A4B  +
push 30h  +
push eax  +
lea eax [ebp+lParam] +
push eax  +
call memset  +
add esp 0Ch +
sub edi 0 +
mov [ebp+lParam] 100h +
mov [ebp+var_18] ebx +
jz loc_1099A17  +
dec edi  +
jnz loc_1099A2F  +
mov eax [ebp+arg_C] +
add eax 8 +
mov [ebp+var_14] eax +
jmp loc_1099A2F  +
lea eax [ebp+var_C] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_C] +
mov ecx [eax+4] +
mov [ebp+var_8] ecx +
test esi esi +
jz loc_1099A2F  +
mov eax [eax] +
mov [ebp+var_C] eax +
mov ecx [ebp+arg_0] +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
call sub_10569EF  +
test eax eax +
jnz loc_1099A52  +
mov [ebp+var_4] 80004005h +
jmp loc_1099A52  +
mov [ebp+var_4] 80004003h +
pop edi  +
pop esi  +
pop ebx  +
mov eax [ebp+var_4] +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_14] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_15  +
lea ecx [ebp+var_14] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi 80070057h +
push esi  +
push [ebp+arg_C]  +
lea eax [ebp+var_24] +
push eax  +
call sub_100A3AE  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp+var_14] +
call ebx  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp+var_14] +
call edi  +
test eax eax +
jge loc_1099AEF  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1099BF0  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1099BF0  +
push eax  +
push offset dword_106C090  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_1099BF0  +
mov eax [ebp+arg_C] +
push [ebp+arg_8]  +
or dword ptr [eax] 0FFFFFFFFh +
call sub_1054C16  +
push esi  +
push eax  +
mov [ebp+var_4] eax +
lea eax [ebp+var_24] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_14] +
call ebx  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call edi  +
test eax eax +
jge loc_1099B4F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1099BF0  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1099BF0  +
push eax  +
push [ebp+arg_8]  +
push offset dword_106C090  +
push 19h  +
jmp loc_1099BE5  +
mov ebx [ebp+arg_4] +
mov eax [ebp+var_4] +
cmp [eax+0Ch] ebx +
jz loc_1099B9A  +
push esi  +
lea ecx [ebp+var_14] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_14] +
call edi  +
test eax eax +
jge loc_1099B9A  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1099BF0  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1099BF0  +
push eax  +
push ebx  +
push [ebp+arg_8]  +
push offset dword_106C090  +
push 1Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10C9315  +
jmp loc_1099BF0  +
push [ebp+var_4]  +
mov ecx [ebp+arg_0] +
call sub_1098E7A  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1099BF0  +
push 8000FFFFh  +
lea ecx [ebp+var_14] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_14] +
call edi  +
test eax eax +
jge loc_1099BF0  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_1099BF0  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1099BF0  +
push eax  +
push [ebp+arg_8]  +
push offset dword_106C090  +
push 1Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
lea ecx [ebp+var_14] +
call edi  +
lea ecx [ebp+var_14] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
lea ecx [ebp+var_14] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_16  +
lea ecx [ebp+var_14] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_0] +
or [ebp+var_4] 0FFFFFFFFh +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
mov ecx esi +
call sub_1098F42  +
push eax  +
lea ecx [ebp+var_14] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1099CB3  +
lea ecx [ebp+var_14] +
jmp loc_1099D0E  +
mov ebx [ebp+var_4] +
cmp ebx edi +
jl loc_1099CFE  +
cmp ebx [esi+8Ch] +
jge loc_1099CFE  +
mov eax [esi+4Ch] +
cmp eax edi +
jz loc_1099CCC  +
mov edi [eax+20h] +
call ds:GetFocus  +
cmp eax edi +
jz loc_1099CE7  +
mov eax [esi+4Ch] +
test eax eax +
jz loc_1099CE0  +
mov eax [eax+20h] +
push eax  +
call ds:SetFocus  +
mov ecx [esi+4Ch] +
push ebx  +
call sub_1054672  +
lea ecx [ebp+var_14] +
test eax eax +
jnz loc_1099D0E  +
push 80004005h  +
jmp loc_1099D06  +
push 80070057h  +
lea ecx [ebp+var_14] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_14] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
mov ecx esi +
xor ebx ebx +
call sub_1098E7A  +
mov edi eax +
cmp edi ebx +
jl loc_1099E09  +
cmp edi [esi+8Ch] +
jge loc_1099E09  +
push 3Ch  +
lea eax [ebp+lParam] +
push ebx  +
push eax  +
call memset  +
mov eax [ebp+arg_8] +
mov ecx [esi+4Ch] +
or [ebp+var_28] 0FFFFFFFFh +
or [ebp+var_20] 0FFFFFFFFh +
mov [ebp+var_30] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_2C] eax +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
mov [ebp+lParam] 0Bh +
mov [ebp+var_38] edi +
call sub_109835A  +
mov ecx [esi+4Ch] +
push edi  +
push edi  +
call sub_10983E2  +
test eax eax +
jnz loc_1099E05  +
mov ecx 80004005h +
mov ebx ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1099E05  +
cmp byte ptr [eax+19h] 2 +
jb loc_1099E05  +
push ecx  +
push edi  +
push offset dword_106C090  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
mov eax ebx +
jmp loc_1099E39  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_1099E34  +
cmp byte ptr [eax+19h] 3 +
jb loc_1099E34  +
push dword ptr [esi+8Ch]  +
push edi  +
push offset dword_106C090  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCcclistview_17  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [esi+4Ch] +
push 2  +
pop eax  +
mov [ebp-50h] eax +
mov [ebp-4Ch] eax +
call sub_101C3DE  +
test eax eax +
jle loc_1099EB2  +
mov eax [esi+4Ch] +
lea ecx [ebp-5Ch] +
push ecx  +
push ebx  +
push 102Bh  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
test eax eax +
jz loc_1099EDA  +
mov ecx [esi+4Ch] +
inc ebx  +
call sub_101C3DE  +
cmp ebx eax +
jl loc_1099E8B  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
push 80004005h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_1099EBF  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_50  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+0Ch] edi +
jl loc_1099FE8  +
mov ecx [esi+4Ch] +
call sub_101C3DE  +
cmp [ebp+0Ch] eax +
jge loc_1099FE8  +
mov edi [ebp+10h] +
mov byte ptr [edi] 0 +
mov eax [esi] +
push esi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jnz loc_1099FCB  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_1054BEB  +
mov esi eax +
push 8000FFFFh  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_1099FDA  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109A000  +
cmp dword ptr [esi+0Ch] 3951589h +
setz al  +
mov [edi] al +
jmp loc_1099FCB  +
push 80070057h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_51  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109A0E4  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109A1F2  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-14h] +
and dword ptr [edi] 0 +
call sub_1054BEB  +
mov edi 8000FFFFh +
push edi  +
push eax  +
mov [ebp+0Ch] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109A1E5  +
mov eax [ebp+0Ch] +
cmp dword ptr [eax+0Ch] 3951589h +
jnz loc_109A140  +
mov eax [eax+14h] +
mov [ebp+0Ch] eax +
jmp loc_109A144  +
and dword ptr [ebp+0Ch] 0 +
mov eax [ebp-14h] +
push edi  +
push dword ptr [eax+4Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109A1E5  +
mov eax [ebp-14h] +
mov eax [eax+4Ch] +
mov eax [eax+9Ch] +
push edi  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109A1E5  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-14h] +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_10819B3  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_52  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109A28E  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109A308  +
and dword ptr [edi] 0 +
mov eax [ebp-14h] +
mov edi 8000FFFFh +
push edi  +
push dword ptr [eax+4Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109A2FB  +
mov eax [ebp-14h] +
mov eax [eax+4Ch] +
mov eax [eax+9Ch] +
mov ecx [ebp+0Ch] +
push edi  +
push eax  +
mov [ecx] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_32  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
jz loc_109A3DE  +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109A3F0  +
mov eax [esi+94h] +
mov [edi] eax +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-18h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_33  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109A4CA  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109A5AF  +
mov edx [ebp+10h] +
xor ecx ecx +
cmp edx ecx +
mov [edi] ecx +
jl loc_109A597  +
mov eax [ebp-18h] +
cmp edx [eax+94h] +
jge loc_109A597  +
mov edx [eax] +
push ecx  +
push ecx  +
mov [ebp-14h] ecx +
lea ecx [ebp-14h] +
push ecx  +
push dword ptr [ebp+10h]  +
push eax  +
call dword ptr [edx+38h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109A519  +
lea eax [ebp-28h] +
jmp loc_109A5A5  +
push 8000FFFFh  +
push dword ptr [ebp-14h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109A511  +
push dword ptr [ebp-14h]  +
call SysAllocString  +
push dword ptr [ebp-14h]  +
mov [edi] eax +
call ds:CoTaskMemFree  +
push 8007000Eh  +
push dword ptr [edi]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jmp loc_109A511  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_35  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+10h] +
mov edi 8000FFFFh +
push edi  +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109A67F  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109A750  +
mov ecx [ebp+0Ch] +
and dword ptr [esi] 0 +
or dword ptr [esi+4] 0FFFFFFFFh +
mov byte ptr [esi+8] 0 +
test ecx ecx +
jl loc_109A73C  +
mov eax [ebp-14h] +
cmp ecx [eax+94h] +
jge loc_109A73C  +
mov ecx [eax+4Ch] +
call sub_100E4E1  +
push edi  +
push eax  +
mov [ebp+10h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109A6E6  +
lea eax [ebp-24h] +
jmp loc_109A746  +
push 30h  +
lea eax [ebp-64h] +
push 0  +
push eax  +
call memset  +
mov ecx [ebp+10h] +
add esp 0Ch +
lea eax [ebp-64h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov dword ptr [ebp-64h] 89h +
call sub_1055747  +
test eax eax +
jnz loc_109A717  +
push 80004005h  +
jmp loc_109A73D  +
mov eax [ebp-44h] +
mov ecx [ebp-60h] +
mov [esi+4] eax +
mov eax [ebp-4Ch] +
and eax 10000h +
shr eax 10h +
mov [esi+8] al +
mov [esi] ecx +
test al al +
jz loc_109A6E1  +
movsx eax word ptr [ebp-4Ch] +
mov [esi] eax +
jmp loc_109A6E1  +
push edi  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
xor esi esi +
push esi  +
lea ecx [ebp-30h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_37  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp-14h] +
or dword ptr [ebp-1Ch] 0FFFFFFFFh +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-40h] +
push eax  +
mov [ebp-20h] esi +
mov byte ptr [ebp-18h] 0 +
call sub_109A601  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109A842  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109A924  +
mov esi [ebp+10h] +
push esi  +
lea ecx [ebp-20h] +
call sub_1097EED  +
test al al +
jnz loc_109A917  +
mov al [esi+8] +
cmp al [ebp-18h] +
jz loc_109A871  +
push 8000FFFFh  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_109A91A  +
mov eax [ebp-14h] +
mov ecx [eax+4Ch] +
call sub_100E4E1  +
push 8000FFFFh  +
push eax  +
mov [ebp+10h] eax +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109A917  +
push 30h  +
lea eax [ebp-70h] +
push 0  +
push eax  +
call memset  +
mov eax [esi] +
add esp 0Ch +
cmp byte ptr [esi+8] 0 +
jz loc_109A8E7  +
mov ecx [ebp+8] +
xor eax ecx +
and eax 0FFFFh +
xor ecx eax +
or ecx 10000h +
mov [ebp-58h] ecx +
mov dword ptr [ebp-70h] 8 +
jmp loc_109A8ED  +
mov [ebp-70h] ebx +
mov [ebp-6Ch] eax +
mov eax [esi+4] +
mov ecx [ebp+10h] +
or dword ptr [ebp-70h] 80h +
mov [ebp-50h] eax +
lea eax [ebp-70h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_10569EF  +
test eax eax +
jnz loc_109A917  +
push 80004005h  +
jmp loc_109A863  +
lea eax [ebp-30h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_34  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109AA03  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109AA5A  +
mov ecx [ebp-14h] +
and dword ptr [edi] 0 +
and dword ptr [ebp-20h] 0 +
or dword ptr [ebp-1Ch] 0FFFFFFFFh +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-44h] +
push eax  +
mov byte ptr [ebp-18h] 0 +
call sub_109A601  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
jnz loc_109AA50  +
mov eax [ebp-20h] +
mov [edi] eax +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_36  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
or dword ptr [ebp-18h] 0FFFFFFFFh +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx edi +
mov [ebp-1Ch] esi +
mov byte ptr [ebp-14h] 0 +
call sub_109A601  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109AB3D  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109AB83  +
mov eax [ebp+0Ch] +
mov [ebp-1Ch] eax +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-3Ch] +
push eax  +
mov ecx edi +
call sub_109A7B7  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-3Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_38  +
lea ecx [ebp-3Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109AC5C  +
mov ecx [ebp+8] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109AD3D  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
and dword ptr [ebp-28h] 0 +
or dword ptr [ebp-24h] 0FFFFFFFFh +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-4Ch] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-20h] 0 +
call sub_109A601  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-4Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109AD30  +
cmp [ebp-20h] al +
jz loc_109ACBC  +
push 8000FFFFh  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_109AD33  +
mov eax [ebp-24h] +
and dword ptr [ebp+10h] 0 +
mov [ebp-18h] eax +
inc eax  +
mov [ebp-14h] eax +
mov eax [edi+94h] +
mov [ebp-1Ch] eax +
test eax eax +
jle loc_109AD28  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-4Ch] +
push eax  +
mov ecx edi +
call sub_109A601  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-4Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109AD30  +
mov eax [ebp-18h] +
cmp [ebp-24h] eax +
jge loc_109AD1D  +
cmp byte ptr [ebp-20h] 0 +
jz loc_109AD1D  +
dec dword ptr [ebp-14h]  +
inc dword ptr [ebp+10h]  +
mov eax [ebp+10h] +
cmp eax [ebp-1Ch] +
jl loc_109ACD7  +
mov eax [ebp+0Ch] +
mov ecx [ebp-14h] +
mov [eax] ecx +
lea eax [ebp-3Ch] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_39  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109AE27  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109AE7F  +
mov ecx [ebp-14h] +
and dword ptr [edi] 0 +
and dword ptr [ebp-20h] 0 +
or dword ptr [ebp-1Ch] 0FFFFFFFFh +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-44h] +
push eax  +
mov byte ptr [ebp-18h] 0 +
call sub_109A601  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
jnz loc_109AE75  +
movzx eax byte ptr [ebp-18h] +
mov [edi] eax +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
xor edi edi +
push edi  +
lea ecx [ebp-34h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_40  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp-14h] +
or dword ptr [ebp-20h] 0FFFFFFFFh +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-44h] +
push eax  +
mov [ebp-24h] edi +
mov byte ptr [ebp-1Ch] 0 +
call sub_109A601  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109AF68  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109B109  +
cmp [ebp+0Ch] edi +
setnz al  +
cmp [ebp-1Ch] al +
jz loc_109B0FC  +
cmp [ebp+0Ch] edi +
jz loc_109AFB8  +
cmp [ebp+10h] edi +
jnz loc_109AFB8  +
push 3460h  +
lea eax [ebp-44h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call esi  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-44h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109B10C  +
mov eax [ebp-14h] +
mov edi 8000FFFFh +
push edi  +
push dword ptr [eax+4Ch]  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109B0FC  +
mov eax [ebp-14h] +
mov eax [eax+4Ch] +
mov eax [eax+9Ch] +
push edi  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109B0FC  +
mov ecx [ebp-14h] +
add ecx 44h +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push 80004005h  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109B08A  +
lea ecx [ebp-34h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_109B109  +
mov eax [ebp-14h] +
mov eax [eax+0D8h] +
push edi  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109B075  +
cmp dword ptr [ebp+0Ch] 0 +
mov eax [ebp-14h] +
mov ecx [eax] +
setz dl  +
movzx edx dl +
push edx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-18h]  +
push eax  +
call dword ptr [ecx+0D0h]  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109B075  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_41  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+10h] +
test eax eax +
jl loc_109B2C7  +
cmp eax [esi+94h] +
jge loc_109B2C7  +
mov eax [esi+4Ch] +
mov edi [eax+9Ch] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109B200  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109B2DF  +
lea ecx [edi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push 80004005h  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109B255  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_109B2DF  +
mov edi [edi+0D8h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109B23D  +
cmp dword ptr [ebp+0Ch] 0 +
mov eax [edi] +
setz cl  +
movzx ecx cl +
push ecx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-14h]  +
push edi  +
call dword ptr [eax+0D8h]  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109B23D  +
jmp loc_109B1EE  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_42  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109B3C8  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109B50D  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
mov eax [ebp+10h] +
test eax eax +
jl loc_109B4F5  +
cmp eax [edi+94h] +
jge loc_109B4F5  +
mov eax [edi+4Ch] +
mov edi [eax+9Ch] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109B428  +
lea eax [ebp-28h] +
jmp loc_109B503  +
lea ecx [edi+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push 80004005h  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109B47D  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_109B50D  +
mov edi [edi+0D8h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109B465  +
or dword ptr [ebp-14h] 0FFFFFFFFh +
mov eax [edi] +
lea ecx [ebp-14h] +
push ecx  +
push dword ptr [ebp-18h]  +
push edi  +
call dword ptr [eax+0D4h]  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109B465  +
mov ecx [ebp+10h] +
xor eax eax +
cmp [ebp-14h] ecx +
mov ecx [ebp+0Ch] +
setz al  +
mov [ecx] eax +
jmp loc_109B420  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
push edi  +
mov edi [ebp+arg_0] +
test eax eax +
jnz loc_109B592  +
mov eax offset word_100A5FC +
push [ebp+arg_4]  +
lea ecx [ebp+var_50] +
push offset aTsnapininter_0  +
push eax  +
call sub_100B69F  +
push [ebp+arg_4]  +
mov ecx esi +
push edi  +
call sub_10417EB  +
mov esi eax +
push esi  +
lea ecx [ebp+var_50] +
call sub_100B7A1  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_109B64F  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_109B64F  +
call sub_100ACF9  +
jmp loc_109B654  +
mov eax 80070057h +
test eax eax +
jge loc_109B65F  +
test edi edi +
jz loc_109B65F  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
call sub_100A4F0  +
xor edi edi +
cmp dword_10F6C64 edi +
jnz locret_109B714  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jz loc_109B6FE  +
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_109B700  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jz locret_109B714  +
push ebx  +
call ds:SetLastError  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
cmp dword ptr [ebp+0Ch] 1 +
push esi  +
mov esi ecx +
jnz loc_109B7E8  +
cmp [ebp+8] esi +
jnz loc_109B7E8  +
push edi  +
call ds:GetMessagePos  +
movsx ecx ax +
shr eax 10h +
cwde   +
mov [ebp-4] eax +
lea eax [ebp-8] +
push eax  +
push dword ptr [esi+20h]  +
mov [ebp-8] ecx +
call ds:ScreenToClient  +
xor eax eax +
lea edi [ebp-18h] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp-8] +
mov [ebp-18h] eax +
mov eax [ebp-4] +
mov [ebp-14h] eax +
lea eax [ebp-18h] +
push eax  +
push 0  +
push 1206h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
pop edi  +
cmp eax 0FFFFFFFFh +
jz loc_109B7E8  +
test byte ptr [ebp-10h] 0Ch +
jz loc_109B7E8  +
push dword ptr [ebp-0Ch]  +
mov ecx esi +
call sub_1056F31  +
test al al +
jz loc_109B7E8  +
push 7F00h  +
push 0  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
xor eax eax +
inc eax  +
jmp loc_109B7EF  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
leave   +
retn 0Ch  +
***
push 20h  +
mov eax offset byte_10D7A1B +
call sub_1001F95  +
xor ebx ebx +
cmp [ebp+8] ebx +
jz loc_109B881  +
mov esi [ebp+0Ch] +
cmp esi ebx +
jz loc_109B881  +
push 0FFFFFEBAh  +
push dword ptr [ebp+8]  +
lea eax [ebp-1Ch] +
push eax  +
mov [esi] ebx +
call sub_1098B40  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109B841  +
lea ecx [ebp-1Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_109B874  +
push 1  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp+0Bh] al +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp+0Bh] bl +
jz loc_109B874  +
mov dword ptr [esi] 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+wParam] +
sub esp 7Ch +
push ebx  +
mov ebx [ebp+arg_0] +
inc eax  +
cmp eax [ebx+94h] +
jle loc_109B8B0  +
mov eax 80070057h +
jmp loc_109BAD2  +
push esi  +
xor esi esi +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_4] esi +
mov [ebp+var_4C] esi +
cmp edi esi +
jz loc_109B8CB  +
mov [ebp+var_4C] 4 +
mov [ebp+var_40] edi +
mov eax [ebp+pv] +
cmp eax 0FFFFFFFEh +
jz loc_109B8DA  +
or [ebp+var_4C] 1 +
mov [ebp+var_48] eax +
mov eax [ebp+arg_10] +
cmp eax 0FFFFFFFEh +
jz loc_109BAB3  +
or [ebp+var_4C] 2 +
cmp eax 0FFFFFFFFh +
jnz loc_109BA1A  +
push dword ptr [ebx+4Ch]  +
lea ecx [ebp+var_20] +
mov [ebp+arg_8] esi +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
mov ecx [ebx+4Ch] +
call sub_1097F9B  +
push eax  +
lea ecx [ebp+var_20] +
call ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z  +
xor eax eax +
cmp edi eax +
jz loc_109B97F  +
lea eax [ebp+arg_8] +
push eax  +
push 7FFFFFFFh  +
push edi  +
call sub_109B62D  +
mov [ebp+var_4] eax +
test eax eax +
jge loc_109B962  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_109BA0A  +
cmp byte ptr [eax+19h] 5 +
jb loc_109BA0A  +
push [ebp+var_4]  +
push offset dword_106C090  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_109BA0A  +
push [ebp+arg_8]  +
lea eax [ebp+var_C] +
push edi  +
push eax  +
lea ecx [ebp+var_20] +
call sub_1034D8B  +
mov esi [eax] +
mov eax [eax+4] +
mov [ebp+var_8] eax +
jmp loc_109BA0A  +
mov ecx [ebx] +
push eax  +
push eax  +
mov [ebp+pv] eax +
lea eax [ebp+pv] +
push eax  +
push [ebp+wParam]  +
push ebx  +
call dword ptr [ecx+38h]  +
mov edi eax +
test edi edi +
jz loc_109B9A6  +
lea ecx [ebp+var_20] +
call ??1CClientDC@@UAE@XZ  +
mov eax edi +
jmp loc_109BAD0  +
lea eax [ebp+arg_8] +
push eax  +
push 7FFFFFFFh  +
push [ebp+pv]  +
call sub_109B62D  +
mov [ebp+var_4] eax +
test eax eax +
jge loc_109B9E7  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_109BA01  +
cmp byte ptr [eax+19h] 2 +
jb loc_109BA01  +
push [ebp+var_4]  +
push offset dword_106C090  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_109BA01  +
push [ebp+arg_8]  +
lea eax [ebp+var_C] +
push [ebp+pv]  +
lea ecx [ebp+var_20] +
push eax  +
call sub_1034D8B  +
mov esi [eax] +
mov eax [eax+4] +
mov [ebp+var_8] eax +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
add esi 0Fh +
lea ecx [ebp+var_20] +
mov [ebp+var_44] esi +
call ??1CClientDC@@UAE@XZ  +
jmp loc_109BA1D  +
mov [ebp+var_44] eax +
push 30h  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call memset  +
mov ecx [ebx+4Ch] +
add esp 0Ch +
push 8  +
pop edi  +
mov [ebp+lParam] edi +
call sub_100E4E1  +
mov ecx eax +
mov [ebp+arg_8] ecx +
test ecx ecx +
jnz loc_109BA4E  +
mov eax 80004005h +
jmp loc_109BAD0  +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
call sub_1055747  +
mov ebx [ebp+var_64] +
push 30h  +
xor esi esi +
lea eax [ebp+lParam] +
push esi  +
push eax  +
call memset  +
mov eax [ebp+var_44] +
add esp 0Ch +
mov [ebp+lParam] edi +
mov edi 10000h +
cmp eax 0FFFFFFFCh +
jnz loc_109BA83  +
movzx esi bx +
or esi edi +
test ebx edi +
jz loc_109BA96  +
and esi 0FFFF0000h +
and eax 0FFFFh +
or esi eax +
or esi edi +
mov ecx [ebp+arg_8] +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
mov [ebp+var_64] esi +
call sub_10569EF  +
mov ebx [ebp+arg_0] +
test esi edi +
jz loc_109BAB3  +
and [ebp+var_4C] 0FFFFFFFDh +
mov ecx [ebx+4Ch] +
lea eax [ebp+var_4C] +
push eax  +
push [ebp+wParam]  +
call sub_1098447  +
test eax eax +
jnz loc_109BACD  +
mov [ebp+var_4] 80004005h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
push ebx  +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_18] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_18  +
lea ecx [ebp+var_18] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jz loc_109BB17  +
push 8000FFFFh  +
jmp loc_109BB50  +
mov eax [ebp+arg_C] +
test eax eax +
jl loc_109BB4B  +
cmp eax [esi+94h] +
jge loc_109BB4B  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_109BB35  +
cmp eax dword_10F94C8 +
jnz loc_109BB4B  +
mov edi [ebp+arg_8] +
test edi edi +
jz loc_109BB75  +
push edi  +
mov ecx esi +
call sub_1098E7A  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jnz loc_109BB78  +
push 80070057h  +
lea ecx [ebp+var_18] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_18] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
mov ebx [ebp+arg_4] +
push 3Ch  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+arg_14] +
or [ebp+var_40] 0FFFFFFFFh +
add esp 0Ch +
mov [ebp+var_50] ebx +
mov [ebp+lParam] 1 +
cmp eax 0FFFFFFFFh +
jz loc_109BBC2  +
mov ecx [ebp+arg_20] +
mov [ebp+var_4] eax +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+var_8] +
mov [ebp+var_8] ecx +
push eax  +
lea ecx [esi+0A8h] +
call sub_101C37D  +
test eax eax +
jz loc_109BBC2  +
or [ebp+lParam] 2 +
mov eax [ebp+arg_1C] +
cmp eax 0FFFFFFFEh +
jz loc_109BBD5  +
or [ebp+lParam] 8 +
or [ebp+var_44] 0FFFFFFFFh +
mov [ebp+var_48] eax +
mov eax [ebp+arg_C] +
mov ecx [esi+4Ch] +
mov [ebp+var_4C] eax +
lea eax [ebp+lParam] +
push eax  +
mov [ebp+arg_C] ecx +
call sub_109835A  +
test eax eax +
jnz loc_109BBFC  +
push 80004005h  +
lea ecx [ebp+var_18] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_18] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109BC6C  +
test edi edi +
jnz loc_109BC29  +
push ebx  +
mov ecx esi +
call sub_1054BEB  +
mov edi eax +
test edi edi +
jnz loc_109BC29  +
push 80004005h  +
lea ecx [ebp+var_18] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_18] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109BC4C  +
mov eax [ebp+arg_18] +
cmp eax 0FFFFFFFEh +
jz loc_109BC41  +
mov [edi+14h] eax +
mov eax [ebp+arg_14] +
cmp eax 0FFFFFFFFh +
jz loc_109BC4C  +
mov [edi+10h] eax +
cmp dword ptr [esi+198h] 0 +
jz loc_109BC6C  +
cmp [ebp+arg_1C] 0FFFFFFFEh +
jz loc_109BC6C  +
test byte ptr [ebp+arg_1C] 1 +
jz loc_109BC6C  +
mov ecx [ebp+arg_C] +
push 0  +
push ebx  +
call sub_10983BE  +
lea ecx [ebp+var_18] +
jmp loc_109BB5B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
mov edx [edx+14h] +
mov ecx [eax+8] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov esi [esi+14h] +
push edi  +
lea ebx [ebp+arg_0] +
push ebx  +
push edx  +
push esi  +
push dword ptr [eax+80h]  +
mov [ebp+arg_0] ecx +
lea ecx [eax+14h] +
mov edi [ecx] +
push ecx  +
call dword ptr [edi+4]  +
pop edi  +
pop esi  +
pop ebx  +
test eax eax +
jl loc_109BCE9  +
mov eax [ebp+arg_0] +
jmp loc_109BCEB  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub esp 30h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi 3951589h +
xor ebx ebx +
cmp [eax+0Ch] edi +
jnz loc_109BD2F  +
mov ecx [esi+7Ch] +
lea ebx [ebp+var_8] +
push ebx  +
push dword ptr [eax+14h]  +
mov [ebp+var_C] 80000000h +
mov edx [ecx] +
push ecx  +
call dword ptr [edx+88h]  +
xor ebx ebx +
jmp loc_109BD38  +
mov eax [eax+14h] +
mov [ebp+var_C] ebx +
mov [ebp+var_8] eax +
mov ecx [ebp+arg_8] +
cmp [ecx+0Ch] edi +
jnz loc_109BD5C  +
mov eax [esi+7Ch] +
lea edi [ebp+var_14] +
push edi  +
push dword ptr [ecx+14h]  +
mov [ebp+var_18] 80000000h +
mov edx [eax] +
push eax  +
call dword ptr [edx+88h]  +
jmp loc_109BD65  +
mov eax [ecx+14h] +
mov [ebp+var_18] ebx +
mov [ebp+var_14] eax +
mov eax [esi+8] +
mov [ebp+var_28] eax +
mov eax [esi+80h] +
mov [ebp+var_24] eax +
lea ecx [ebp+arg_4] +
push ecx  +
lea eax [ebp+var_C] +
mov [ebp+var_20] eax +
lea ecx [ebp+var_30] +
lea eax [ebp+var_18] +
add esi 48h +
push ecx  +
mov [ebp+var_1C] eax +
mov eax [esi] +
push esi  +
mov [ebp+var_4] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_30] 18h +
mov [ebp+var_2C] ebx +
mov [ebp+arg_4] ebx +
call dword ptr [eax+4]  +
test eax eax +
jl loc_109BDAD  +
mov eax [ebp+arg_4] +
jmp loc_109BDAF  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [eax+4Ch] +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov [ebp+var_8] ebx +
call sub_100E4E1  +
mov [ebp+var_C] eax +
cmp eax ebx +
jnz loc_109BDF3  +
mov [ebp+var_8] 80004005h +
jmp loc_109BEC8  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jnz loc_109BE06  +
mov [ebp+var_8] 80004003h +
jmp loc_109BEC8  +
mov esi [eax] +
mov edi [ebp+arg_C] +
cmp esi 1 +
jz loc_109BE28  +
cmp esi ebx +
jz loc_109BE20  +
mov [ebp+var_8] 80070057h +
jmp loc_109BEC8  +
cmp edi ebx +
jz loc_109BE28  +
cmp [edi] ebx +
jz loc_109BE14  +
push 30h  +
lea eax [ebp+lParam] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
mov [ebp+lParam] 100h +
mov [ebp+var_20] esi +
cmp edi ebx +
jz loc_109BE7E  +
sub esi ebx +
jz loc_109BE54  +
dec esi  +
jnz loc_109BE7E  +
lea eax [edi+8] +
mov [ebp+var_1C] eax +
jmp loc_109BE7E  +
mov esi [edi+4] +
mov eax 3FFFFFFDh +
cmp esi eax +
jbe loc_109BE62  +
mov esi eax +
lea eax [ebp+var_14] +
mov [ebp+var_1C] eax +
lea eax [esi+esi+2] +
call sub_1027CCC  +
mov eax esp +
xor ecx ecx +
mov [ebp+var_14] eax +
mov [eax] cx +
mov [ebp+var_10] esi +
mov ecx [ebp+var_C] +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
call sub_1055747  +
test eax eax +
jnz loc_109BEA7  +
mov [ebp+var_8] 80004005h +
cmp [ebp+var_20] ebx +
jnz loc_109BEC0  +
mov [ebp+var_20] 8000h +
mov [ebp+var_8] ebx +
cmp [ebp+var_20] ebx +
jnz loc_109BEC0  +
cmp edi ebx +
jz loc_109BEC0  +
push [ebp+var_14]  +
push dword ptr [edi+4]  +
push dword ptr [edi]  +
call sub_100A593  +
mov [ebp+var_8] eax +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_20] +
mov [eax] ecx +
mov eax [ebp+var_8] +
lea esp [ebp-50h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002492  +
leave   +
retn 10h  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
push offset dword_100CA88  +
push offset dword_106C0C4  +
push ecx  +
call sub_1071867  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
push offset dword_100CA88  +
push offset dword_106C0D4  +
push ecx  +
call sub_1071867  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
push offset dword_100CA88  +
push offset dword_106C0E4  +
push ecx  +
call sub_1071867  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B83A  +
test byte ptr [ebp+8] 1 +
jz loc_109BFAF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call sub_101DC24  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dword_106C0F4  +
push [ebp+arg_4]  +
call sub_100ED86  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dword_106C0D4  +
push [ebp+arg_4]  +
call sub_100ED86  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_109C051  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset loc_109C068  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_109C047  +
push 0  +
jmp loc_109C04A  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_109C05D  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_109C0B3  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_109C0C8  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_109C0A9  +
push 0  +
jmp loc_109C0AC  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_109C0BF  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_109C113  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_109C128  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_109C109  +
push 0  +
jmp loc_109C10C  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_109C11F  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-20h] edi +
and dword ptr [ebp-1Ch] 0 +
push 0  +
lea ecx [ebp-48h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamclistview_2  +
lea ecx [ebp-48h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx edi +
call sub_100E4E1  +
mov [ebp-10h] eax +
mov eax [edi+9Ch] +
push 8000FFFFh  +
push eax  +
push dword ptr [ebp-10h]  +
mov [ebp-24h] eax +
lea eax [ebp-58h] +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-58h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-48h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109C1D4  +
mov ecx [ebp+8] +
lea eax [ebp-48h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-1Ch] ebx +
jmp loc_109C48A  +
mov ecx [ebp-10h] +
mov byte ptr [edi+0F9h] 0 +
call sub_101C44D  +
mov ecx [ebp+0Ch] +
mov [ebp-30h] eax +
cmp [ecx+0Ch] eax +
jz loc_109C220  +
mov ecx [ebp-24h] +
lea eax [ebp-58h] +
push eax  +
call sub_10986A1  +
push eax  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-48h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109C1CC  +
xor ecx ecx +
push 4  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_100F31C  +
and dword ptr [ebp-34h] 0 +
mov [ebp-18h] eax +
mov [ebp-38h] eax +
push 0  +
mov byte ptr [ebp-4] 4 +
call ??3@YAXPAX@Z  +
pop ecx  +
pop ecx  +
push 8007000Eh  +
push dword ptr [ebp-18h]  +
lea eax [ebp-58h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-48h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109C295  +
mov ecx [ebp+8] +
lea eax [ebp-48h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-1Ch] ebx +
jmp loc_109C481  +
mov eax [ebp+0Ch] +
mov byte ptr [edi+0F8h] 1 +
mov eax [eax+8] +
mov ebx [eax] +
mov edi 7FFFBFFBh +
mov esi 80004005h +
cmp ebx eax +
jz loc_109C426  +
mov eax [ebp-18h] +
mov [ebp-14h] eax +
mov eax [ebx+10h] +
mov ecx [ebp-14h] +
push 30h  +
mov [ebp-24h] eax +
mov [ecx] eax +
lea eax [ebp-88h] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
test byte ptr [ebx+18h] 1 +
jz loc_109C353  +
mov ecx [ebp-10h] +
and dword ptr [ebp-84h] 0 +
lea eax [ebp-88h] +
push eax  +
push dword ptr [ebp-24h]  +
mov dword ptr [ebp-88h] 1 +
call sub_10569EF  +
neg eax  +
sbb eax eax +
and eax edi +
add eax esi +
push eax  +
lea ecx [ebp-48h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-48h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109C463  +
mov ecx [ebp-28h] +
mov eax [ebx+14h] +
and eax 0FFFFh +
and ecx 0FFFF0000h +
or eax ecx +
or eax 10000h +
mov [ebp-28h] eax +
mov dword ptr [ebp-88h] 8 +
mov [ebp-70h] eax +
jmp loc_109C3E1  +
mov eax [ebx+14h] +
mov ecx [ebp-2Ch] +
and eax 0FFFFh +
and ecx 0FFFE0000h +
or eax ecx +
mov ecx [ebp-10h] +
mov [ebp-2Ch] eax +
mov [ebp-70h] eax +
lea eax [ebp-88h] +
push eax  +
push dword ptr [ebp-24h]  +
mov dword ptr [ebp-88h] 8 +
call sub_10569EF  +
neg eax  +
sbb eax eax +
and eax edi +
add eax esi +
push eax  +
lea ecx [ebp-48h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-48h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109C463  +
mov eax [ebx+14h] +
cmp eax 0FFFFFFFFh +
jnz loc_109C3D1  +
mov ecx [ebp-14h] +
mov eax [ebp-20h] +
mov eax [eax+20h] +
push 0FFFEh  +
push dword ptr [ecx]  +
push 101Eh  +
push eax  +
call ds:SendMessageW  +
jmp loc_109C3F5  +
mov dword ptr [ebp-88h] 1 +
mov [ebp-84h] eax +
mov ecx [ebp-10h] +
lea eax [ebp-88h] +
push eax  +
mov eax [ebp-14h] +
push dword ptr [eax]  +
call sub_10569EF  +
neg eax  +
sbb eax eax +
and eax edi +
add eax esi +
push eax  +
lea ecx [ebp-48h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-48h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109C463  +
mov ebx [ebx] +
mov eax [ebp+0Ch] +
add dword ptr [ebp-14h] 4 +
cmp ebx [eax+8] +
jnz loc_109C2BC  +
push dword ptr [ebp-18h]  +
mov ecx [ebp-10h] +
push dword ptr [ebp-30h]  +
call MFC42u_6900  +
neg eax  +
sbb eax eax +
and eax edi +
add eax esi +
push eax  +
lea ecx [ebp-48h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-48h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109C463  +
mov eax [ebp-20h] +
push 1  +
push 0  +
push dword ptr [eax+20h]  +
call ds:InvalidateRect  +
mov eax [ebp-20h] +
mov ecx [ebp+8] +
mov byte ptr [eax+0F8h] 0 +
lea eax [ebp-48h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-1Ch] 1 +
push dword ptr [ebp-18h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_19  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+arg_0] +
mov edi [eax+4Ch] +
push 8000FFFFh  +
push edi  +
lea eax [ebp+var_20] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp+var_10] +
call esi  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109C55B  +
lea ecx [ebp+var_10] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
lea eax [ebp+var_20] +
push eax  +
mov ecx edi +
call sub_109C13D  +
push eax  +
lea ecx [ebp+var_10] +
call esi  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_109C53F  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCnodesScenumre  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+0Ch] +
or dword ptr [eax] 0FFFFFFFFh +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call sub_109BF1F  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCnodesScgetlis  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
mov edi 8000FFFFh +
push edi  +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109C6CB  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109C73F  +
mov ecx [ebp-14h] +
and dword ptr [esi] 0 +
push esi  +
lea eax [ebp-34h] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109C732  +
push edi  +
push dword ptr [esi]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call sub_109BF1F  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-18h] esi +
xor edi edi +
push edi  +
lea ecx [ebp-28h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCnodesScadvanc  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [esi+3Ch] +
mov [ebp-14h] edi +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109C80C  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109C8B3  +
mov edi [ebp-14h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109C8A6  +
mov ecx [edi+4Ch] +
call sub_101C3DE  +
mov esi [ebp+0Ch] +
mov ecx [esi] +
cmp ecx eax +
jl loc_109C85C  +
push 80004005h  +
jmp loc_109C89D  +
mov edx [ebp-18h] +
cmp byte ptr [edx+64h] 0 +
jz loc_109C88E  +
and dword ptr [ebp+0Ch] 0 +
cmp dword ptr [ebp+10h] 0 +
jbe loc_109C8A6  +
mov ecx [edi+4Ch] +
push 2  +
push dword ptr [esi]  +
call sub_107E863  +
test eax eax +
jl loc_109C89C  +
inc dword ptr [ebp+0Ch]  +
mov [esi] eax +
mov eax [ebp+0Ch] +
cmp eax [ebp+10h] +
jnb loc_109C8A6  +
jmp loc_109C86F  +
mov edx [ebp+10h] +
add ecx edx +
cmp ecx eax +
mov [esi] ecx +
jl loc_109C8A6  +
dec eax  +
mov [esi] eax +
push ebx  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call sub_109BF1F  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
xor esi esi +
push esi  +
lea ecx [ebp-24h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCnodesScenumsk  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-14h] +
mov [edi] esi +
mov esi [ebp+14h] +
mov eax [esi] +
mov [ebp+10h] eax +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_109C78D  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
jz loc_109C98D  +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109C99E  +
mov eax [esi] +
sub eax [ebp+10h] +
mov [edi] eax +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call sub_109BF1F  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
xor esi esi +
push esi  +
lea ecx [ebp-24h] +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCnodesGet_coun  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx [ebp+0Ch] +
push 80070057h  +
push ebx  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109CA81  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-24h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_109BF1F  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 8  +
mov edi [ebp+8] +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-34h] +
push eax  +
lea ecx [edi+3Ch] +
mov [ebp+0Ch] esi +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109CA57  +
mov esi [ebp+0Ch] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109CA57  +
mov ecx [esi+4Ch] +
cmp [edi+64h] al +
jz loc_109CB0F  +
call sub_1054B78  +
mov [ebx] eax +
jmp loc_109CA57  +
call sub_101C3DE  +
jmp loc_109CB08  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-24h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCnodesScgetdis  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
lea ecx [esi+3Ch] +
mov [ebp-14h] edi +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109CBBD  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109CC46  +
mov esi [ebp-14h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109CC39  +
cmp [ebp+0Ch] edi +
jl loc_109CC2B  +
mov ecx [esi+4Ch] +
call sub_101C3DE  +
cmp [ebp+0Ch] eax +
jge loc_109CC2B  +
mov ecx [esi+4Ch] +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push eax  +
call ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z  +
push dword ptr [eax]  +
mov ecx [ebp+10h] +
call sub_101DDB2  +
lea ecx [ebp+0Ch] +
call ??1CString@@QAE@XZ  +
jmp loc_109CC39  +
push 80070057h  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call sub_109BF1F  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCnodesIstiedto  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [esi+3Ch] +
mov [ebp-10h] ebx +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call sub_107B7E5  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109CD11  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call sub_109BF1F  +
xor al al +
call sub_1001FCF  +
retn 4  +
mov esi [ebp-10h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109CD59  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call sub_109BF1F  +
mov al bl +
jmp loc_109CD09  +
cmp esi [ebp+8] +
setz bl  +
jmp loc_109CD49  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcresultno_1  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109CE38  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call sub_109BF5A  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 8  +
mov esi [ebp+8] +
push 80004005h  +
mov [edi] ebx +
push dword ptr [esi+40h]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109CE0F  +
mov [ebp+0Ch] ebx +
mov ecx [esi+40h] +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [esi+3Ch]  +
lea eax [ebp-34h] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_109CB41  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109CECF  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
push dword ptr [ebp+0Ch]  +
mov esi eax +
call SysFreeString  +
jmp loc_109CE1A  +
mov eax [ebp+0Ch] +
push 8000FFFFh  +
push eax  +
mov [edi] eax +
lea eax [ebp-34h] +
push eax  +
mov [ebp+0Ch] ebx +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 6 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
push ebx  +
jmp loc_109CEC2  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push 0  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcresultno_3  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109CFDC  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109D0C7  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
push 80004005h  +
push dword ptr [esi+40h]  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call sub_107B7E5  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109D0BA  +
mov ecx [esi+40h] +
and dword ptr [ebp-14h] 0 +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
call sub_109C651  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call sub_107B7E5  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109D0BA  +
push 8000FFFFh  +
push dword ptr [ebp-14h]  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 6 +
call sub_107B7E5  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109D0BA  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-14h] +
lea eax [ebp-3Ch] +
push eax  +
call sub_109A212  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 7 +
call sub_107B7E5  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call sub_109BF5A  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcresultno_2  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
mov ecx esi +
call sub_109CF4F  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109D1CD  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-28h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_109BF5A  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
push 8000FFFFh  +
push dword ptr [ebp-10h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109D1A3  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-10h] +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-38h] +
push dword ptr [esi+3Ch]  +
push eax  +
call sub_10857AD  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109D1A3  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcresultno_6  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
mov ecx esi +
call sub_109CF4F  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109D31D  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-28h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_109BF5A  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 8  +
push 8000FFFFh  +
push dword ptr [ebp-10h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109D2F3  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-10h] +
push dword ptr [esi+3Ch]  +
lea eax [ebp-38h] +
push eax  +
call sub_108596D  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109D2F3  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcresultno_4  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
push 80070057h  +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109D465  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-24h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_109BF5A  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 8  +
and dword ptr [esi] 0 +
push 345Ah  +
lea eax [ebp-34h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109D43B  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcresultno_5  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
push 80070057h  +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp-24h] +
test al al +
jz loc_109D571  +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-24h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_109BF5A  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 8  +
and dword ptr [esi] 0 +
jmp loc_109D54A  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCcolumnSconlis  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+10h] +
cmp eax [ebp+0Ch] +
jl loc_109D5F2  +
inc eax  +
mov [esi+10h] eax +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
mov byte ptr [ebp-4] 0 +
call sub_109BEE4  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dword_106C0C4  +
push [ebp+arg_4]  +
call sub_100ED86  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dword_106C0E4  +
push [ebp+arg_4]  +
call sub_100ED86  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_109C01B  +
test eax eax +
jge loc_109D6D0  +
cmp eax 80004002h +
jz loc_109D6D0  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
sub ecx esi +
sar ecx 3 +
test ecx ecx +
jle loc_109D71B  +
mov eax [ebp+arg_C] +
push edi  +
mov edi [eax] +
mov eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
lea edx [esi+eax*8] +
cmp [edx] edi +
jge loc_109D714  +
lea esi [edx+8] +
or edx 0FFFFFFFFh +
sub edx eax +
mov [ebp+arg_4] esi +
add ecx edx +
jmp loc_109D716  +
mov ecx eax +
test ecx ecx +
jg loc_109D6F7  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_109C07D  +
test eax eax +
jge loc_109D74B  +
cmp eax 80004002h +
jz loc_109D74B  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_109C0DD  +
test eax eax +
jge loc_109D778  +
cmp eax 80004002h +
jz loc_109D778  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CImageList@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_109D79E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
push dword ptr [ebp+8]  +
call sub_1054C16  +
push dword ptr [ebp+0Ch]  +
mov esi eax +
mov [ebp-8] esi +
call sub_1054C16  +
mov ebx eax +
mov [ebp-10h] ebx +
test esi esi +
jz loc_109D8EB  +
test ebx ebx +
jz loc_109D8EB  +
mov eax [esi+0Ch] +
mov edi [ebp+10h] +
xor ecx ecx +
mov esi 3951589h +
cmp eax esi +
setz cl  +
xor edx edx +
cmp [ebx+0Ch] esi +
setz dl  +
mov [ebp-0Ch] edx +
xor edx edx +
cmp [edi+4Ch] edx +
jz loc_109D8B4  +
cmp [edi+7Ch] edx +
jz loc_109D8EB  +
cmp ecx edx +
jz loc_109D84B  +
cmp eax esi +
jnz loc_109D820  +
mov eax [ebp-8] +
mov ecx [eax+14h] +
jmp loc_109D822  +
xor ecx ecx +
mov eax [edi+7Ch] +
mov edx [eax] +
lea ebx [ebp+10h] +
push ebx  +
push ecx  +
push eax  +
call dword ptr [edx+84h]  +
test eax eax +
jnz loc_109D83F  +
mov eax [ebp+10h] +
cmp eax [edi+0Ch] +
jz loc_109D848  +
and dword ptr [ebp-4] 0 +
mov ebx [ebp-10h] +
jmp loc_109D852  +
mov ebx [ebp-10h] +
mov dword ptr [ebp-4] 1 +
xor ecx ecx +
cmp [ebp-0Ch] ecx +
jz loc_109D882  +
cmp [ebx+0Ch] esi +
jnz loc_109D861  +
mov ecx [ebx+14h] +
mov eax [edi+7Ch] +
mov edx [eax] +
lea esi [ebp+10h] +
push esi  +
push ecx  +
push eax  +
call dword ptr [edx+84h]  +
test eax eax +
jnz loc_109D87E  +
mov eax [ebp+10h] +
cmp eax [edi+0Ch] +
jz loc_109D882  +
xor eax eax +
jmp loc_109D885  +
xor eax eax +
inc eax  +
cmp dword ptr [ebp-4] 0 +
jz loc_109D89B  +
test eax eax +
jz loc_109D8AD  +
push ebx  +
push dword ptr [ebp-8]  +
push edi  +
call sub_109BCF4  +
jmp loc_109D8E2  +
test eax eax +
jnz loc_109D8AD  +
push edi  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1099669  +
jmp loc_109D8ED  +
xor eax eax +
cmp [ebp-4] eax +
jmp loc_109D8DB  +
cmp ecx edx +
jnz loc_109D8CE  +
cmp [ebp-0Ch] edx +
jnz loc_109D8D7  +
cmp [edi+18h] edx +
jz loc_109D89F  +
push ebx  +
push dword ptr [ebp-8]  +
push edi  +
call sub_109BCAB  +
jmp loc_109D8E2  +
cmp [ebp-0Ch] edx +
jz loc_109D8D7  +
xor eax eax +
jmp loc_109D8E2  +
xor eax eax +
cmp ecx edx +
setz al  +
lea eax [eax+eax-1] +
cmp dword ptr [edi] 0 +
jnz loc_109D8ED  +
neg eax  +
jmp loc_109D8ED  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
push ebx  +
push esi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_20  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_0] +
mov ecx [esi+4Ch] +
call sub_100E4E1  +
mov ebx eax +
test ebx ebx +
jnz loc_109D956  +
push 8000FFFFh  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
cmp [ebp+wParam] 0 +
push edi  +
push 4  +
pop edi  +
jl loc_109D99A  +
push 30h  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
mov ecx ebx +
mov [ebp+lParam] edi +
call sub_1055747  +
test eax eax +
jz loc_109D99A  +
and [ebp+var_2C] 0FFFFF9FFh +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
mov ecx ebx +
call sub_10569EF  +
mov eax [esi+8Ch] +
sub eax [esi+90h] +
jnz loc_109D9CE  +
cmp [esi+0E8h] eax +
jnz loc_109D9CE  +
cmp [esi+11Ch] eax +
jnz loc_109D9CE  +
cmp dword ptr [esi+0D4h] 1 +
jz loc_109D9CE  +
mov eax [esi] +
push esi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jz loc_109DA1A  +
cmp [ebp+arg_10] 0 +
jz loc_109DA1A  +
push 30h  +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
push [ebp+arg_4]  +
mov ecx ebx +
mov [ebp+lParam] edi +
call sub_1055747  +
test eax eax +
jz loc_109DA1A  +
mov ecx [ebp+arg_C] +
neg ecx  +
sbb ecx ecx +
mov eax 200h +
and ecx eax +
add ecx eax +
or [ebp+var_2C] ecx +
lea eax [ebp+lParam] +
push eax  +
push [ebp+arg_4]  +
mov ecx ebx +
call sub_10569EF  +
mov eax [esi] +
push esi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jz loc_109DA57  +
push 2  +
pop ebx  +
push ebx  +
mov [ebp+var_3C] ebx +
mov [ebp+lParam] 0FFFFFFFDh +
push 0FFFFFFFFh  +
jmp loc_109DA48  +
mov ecx [esi+4Ch] +
lea eax [ebp+var_4C] +
push eax  +
push edi  +
call sub_1098469  +
push ebx  +
push edi  +
mov ecx [esi+4Ch] +
call sub_107E863  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_109DA39  +
xor esi esi +
pop edi  +
jmp loc_109D945  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+0C0h] +
mov ecx edi +
call ?DeleteImageList@CImageList@@QAEHXZ  +
mov ecx edi +
call sub_10367B1  +
mov ecx [esi+4Ch] +
call sub_100E4E1  +
test eax eax +
jz loc_109DAE9  +
mov esi [esi+0C4h] +
mov eax [eax+20h] +
push esi  +
push 0  +
push 1208h  +
push eax  +
call ds:SendMessageW  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+40h] +
test ecx ecx +
jz loc_109DB0E  +
push [ebp+arg_0]  +
call sub_109CC97  +
test al al +
jz loc_109DB0E  +
xor eax eax +
inc eax  +
jmp loc_109DB10  +
xor eax eax +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_21  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi 80070057h +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109DB98  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109DD67  +
mov eax [ebp+10h] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax [ebp+0Ch] +
mov ecx [eax] +
and dword ptr [ebp-18h] 0 +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109DD5A  +
xor eax eax +
cmp [ebp-18h] eax +
jz loc_109DCF9  +
mov eax [ebp-14h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A4h]  +
test eax eax +
jz loc_109DC1C  +
push 3459h  +
lea eax [ebp-40h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call esi  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_109DD6A  +
mov eax [ebp-14h] +
mov edi 8000FFFFh +
push edi  +
push dword ptr [eax+4Ch]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109DD5A  +
mov eax [ebp-14h] +
mov eax [eax+4Ch] +
mov eax [eax+9Ch] +
push edi  +
push eax  +
mov [ebp-1Ch] eax +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109DD5A  +
mov ecx [ebp-1Ch] +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-40h] +
push eax  +
call sub_1081707  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109DD5A  +
push dword ptr [ebp-20h]  +
call sub_1054C16  +
mov ecx [ebp-14h] +
push eax  +
call sub_1098E7A  +
mov ecx [ebp+10h] +
mov [ecx] eax +
test eax eax +
jge loc_109DD5A  +
push edi  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_109DD5D  +
push eax  +
push offset off_10FAD1C  +
push offset off_10FAD08  +
push eax  +
push dword ptr [ebp+0Ch]  +
call __RTDynamicCast  +
add esp 14h +
push edi  +
push eax  +
mov [ebp+0Ch] eax +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109DD5A  +
mov esi [ebp+0Ch] +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_109DAF1  +
test al al +
jz loc_109DCED  +
mov eax [esi+3Ch] +
mov ecx [ebp+10h] +
mov [ecx] eax +
lea eax [ebp-30h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_21  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109DE01  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109DE7C  +
or dword ptr [ebp-14h] 0FFFFFFFFh +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call sub_109DB19  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109DE6F  +
mov edi [edi+4Ch] +
push 2  +
pop eax  +
mov [ebp-64h] eax +
mov [ebp-60h] eax +
lea eax [ebp-70h] +
push eax  +
push dword ptr [ebp-14h]  +
push 102Bh  +
push dword ptr [edi+20h]  +
call ds:SendMessageW  +
test eax eax +
jnz loc_109DE6F  +
push 80004005h  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_109DE72  +
lea eax [ebp-24h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_22  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109DF16  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109DF93  +
or dword ptr [ebp-14h] 0FFFFFFFFh +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call sub_109DB19  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109DF86  +
mov eax [edi+4Ch] +
and dword ptr [ebp-64h] 0 +
lea ecx [ebp-70h] +
push ecx  +
push dword ptr [ebp-14h]  +
mov dword ptr [ebp-60h] 2 +
push 102Bh  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
test eax eax +
jnz loc_109DF86  +
push 80004005h  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_109DF89  +
lea eax [ebp-24h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_23  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
push 80070057h  +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109E06C  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109E0CC  +
mov ecx [ebp-14h] +
and dword ptr [edi] 0 +
or dword ptr [ebp+10h] 0FFFFFFFFh +
lea eax [ebp+10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_109DB19  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109E0BF  +
mov eax [ebp-14h] +
mov ecx [eax+4Ch] +
push 2  +
push dword ptr [ebp+10h]  +
call sub_109848B  +
test al 2 +
jz loc_109E0BF  +
mov [edi] ebx +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcolumnSconl_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+10h] +
cmp eax [ebp+0Ch] +
jle loc_109E16B  +
dec eax  +
mov [esi+10h] eax +
jmp loc_109E21A  +
jnz loc_109E21A  +
or dword ptr [esi+10h] 0FFFFFFFFh +
cmp [esi-4] edi +
jz loc_109E21A  +
lea eax [ebp+0Ch] +
push eax  +
mov [ebp+0Ch] edi +
lea eax [ebp-30h] +
lea edi [esi-8] +
push eax  +
mov ecx edi +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109E1C8  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109E227  +
push 8000FFFFh  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109E21A  +
mov ecx [ebp+0Ch] +
add esi 0FFFFFFBCh +
neg esi  +
sbb esi esi +
and esi edi +
push esi  +
add ecx 1Ch +
call sub_101A545  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax]  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call sub_109BEE4  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov eax [ecx+4] +
mov dword ptr [ecx] offset off_106C0A8 +
test eax eax +
jz locret_109E2AB  +
push ecx  +
lea ecx [eax+1Ch] +
call sub_101A545  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_109D6DC  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 14h  +
***
mov eax ds:off_109E2E0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
cmp byte ptr [ebx+0Ch] 0 +
push esi  +
push edi  +
mov edi ecx +
jnz loc_109E326  +
mov eax [edi+8] +
mov esi [eax] +
cmp esi eax +
jz loc_109E336  +
lea eax [esi+8] +
mov ecx eax +
add eax 4 +
neg ecx  +
sbb ecx ecx +
and ecx eax +
push 0  +
push ecx  +
mov ecx ebx +
call sub_101EA69  +
mov esi [esi] +
cmp esi [edi+8] +
jz loc_109E336  +
jmp loc_109E305  +
lea ecx [edi+4] +
call sub_100B8AF  +
push ebx  +
mov ecx edi +
call sub_103BA08  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
lea ecx [ebp+var_14] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_24  +
lea ecx [ebp+var_14] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+arg_10] +
xor ebx ebx +
cmp [ebp+arg_C] edi +
push 19h  +
setnz bl  +
neg eax  +
sbb eax eax +
and eax 2 +
pop esi  +
mov [ebp+var_4] edi +
or ebx eax +
cmp [ebp+arg_8] 0 +
jz loc_109E3BE  +
lea ecx [ebp+var_4] +
call sub_103B009  +
add esi esi +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_100F31C  +
mov edi eax +
pop ecx  +
mov [ebp+var_4] edi +
test edi edi +
jz loc_109E442  +
or ebx 4 +
mov [ebp+var_30] esi +
mov [ebp+var_34] edi +
mov eax [ebp+arg_0] +
mov ecx [eax+4Ch] +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
mov [ebp+lParam] ebx +
call sub_1098425  +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
push eax  +
lea ecx [ebp+var_14] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109E43D  +
cmp [ebp+arg_8] 0 +
jz loc_109E425  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_109E403  +
sub eax edx +
sar eax 1 +
inc eax  +
cmp esi eax +
jz loc_109E381  +
push edi  +
call sub_10C9E21  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_109E431  +
mov ecx [ebp+var_3C] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_109E43D  +
mov ecx [ebp+var_38] +
mov [eax] ecx +
lea ecx [ebp+var_14] +
jmp loc_109E452  +
push 8007000Eh  +
lea ecx [ebp+var_14] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_103B009  +
lea ecx [ebp+var_14] +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
push 28h  +
mov eax offset dword_10DAD14 +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCnodesSconli_0  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+8]  +
mov ebx [edi+1Ch] +
mov eax [edi+18h] +
lea ecx [ebp+0Ch] +
push ecx  +
push ebx  +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_109E2B1  +
mov esi [ebp-14h] +
cmp esi ebx +
jz loc_109E546  +
inc dword ptr [esi]  +
mov ebx [esi+4] +
push 8000FFFFh  +
push ebx  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109E571  +
inc dword ptr [ebx+3Ch]  +
add esi 8 +
cmp esi [edi+1Ch] +
jnz loc_109E500  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 0 +
call sub_109BF1F  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109E553  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
push esi  +
push eax  +
mov esi ecx +
push dword ptr [esi+8]  +
add eax 8 +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_10AC1E7  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
add esp 10h +
add dword ptr [esi+8] 0FFFFFFF8h +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_109E295  +
test byte ptr [ebp+8] 1 +
jz loc_109E617  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+44h] +
mov dword ptr [ebp-4] 1 +
call sub_100C3CD  +
lea ecx [esi+3Ch] +
call sub_109E295  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1075F98  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamclistview_5  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
mov edi [ebp+8] +
cmp eax offset lpDst +
jz loc_109E6BA  +
cmp byte ptr [eax+19h] 5 +
jb loc_109E6BA  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
push offset dword_106C090  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10C9315  +
mov eax [ebp+0Ch] +
cmp eax [ebp+10h] +
jz loc_109E708  +
test edi edi +
jz loc_109E736  +
push offset loc_100E83D  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [esi+6Ch] +
call sub_1019FF5  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109E708  +
lea ecx [ebp-1Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
test edi edi +
jz loc_109E736  +
cmp byte ptr [esi+84h] 0 +
jz loc_109E736  +
mov ecx esi +
call ?GetStyle@CWnd@@QBEKXZ  +
and al 3 +
cmp al 1 +
jnz loc_109E736  +
mov ecx esi +
call sub_100E4E1  +
test eax eax +
jz loc_109E744  +
mov ecx eax +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
jmp loc_109E744  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
push edi  +
call ?OnActivateView@CView@@MAEXHPAV1@0@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1019EA0  +
test byte ptr [ebp+8] 1 +
jz loc_109E7B5  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
push ebx  +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_25  +
lea ecx [ebp+var_1C] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+arg_8] 0 +
jz loc_109E800  +
mov esi 80070057h +
lea ecx [ebp+var_1C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
jmp loc_109EB1C  +
mov esi [ebp+arg_0] +
mov eax [esi+4Ch] +
mov ebx [eax+9Ch] +
mov edi 80004003h +
push edi  +
push ebx  +
lea eax [ebp+var_2C] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_1C] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109E849  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
jmp loc_109E7F0  +
push edi  +
add ebx 1F8h +
push ebx  +
lea eax [ebp+var_2C] +
push eax  +
mov [ebp+var_C] ebx +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_1C] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109E83C  +
mov eax [esi+4Ch] +
mov [ebp+arg_8] eax +
mov eax [esi] +
push esi  +
call dword ptr [eax+0A4h]  +
mov edi ds:?ToHr@SC@mmcerror@@QBEJXZ +
test eax eax +
jz loc_109E8A3  +
mov eax [ebp+wParam] +
mov [ebp+var_4] eax +
xor ebx ebx +
jmp loc_109E977  +
push [ebp+wParam]  +
call sub_1054C16  +
xor ebx ebx +
mov [ebp+arg_0] eax +
cmp eax ebx +
jz loc_109EB0E  +
mov eax [ebp+var_C] +
cmp [eax+0D0h] ebx +
jz loc_109E96A  +
mov eax [esi] +
push ebx  +
lea ecx [ebp+var_8] +
push ecx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea ecx [ebp+arg_0] +
push ecx  +
push ebx  +
push esi  +
mov [ebp+var_8] ebx +
call dword ptr [eax+44h]  +
push eax  +
lea ecx [ebp+var_1C] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_1C] +
call edi  +
cmp eax ebx +
mov [ebp+var_4] eax +
jge loc_109E923  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_109E91B  +
cmp byte ptr [eax+19h] 2 +
jb loc_109E91B  +
push [ebp+var_4]  +
push offset dword_106C090  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov esi [ebp+var_4] +
jmp loc_109E7F0  +
test byte ptr [ebp+var_8] 2 +
jz loc_109E96A  +
mov eax [esi] +
push 2  +
push ebx  +
push [ebp+arg_0]  +
push ebx  +
push esi  +
call dword ptr [eax+50h]  +
push eax  +
lea ecx [ebp+var_1C] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_1C] +
call edi  +
cmp eax ebx +
mov [ebp+var_4] eax +
jge loc_109E96A  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_109E91B  +
cmp byte ptr [eax+19h] 2 +
jb loc_109E91B  +
push [ebp+var_4]  +
push offset dword_106C090  +
push 13h  +
jmp loc_109E910  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1098E7A  +
mov [ebp+var_4] eax +
cmp eax ebx +
jl loc_109EB0E  +
cmp eax [esi+8Ch] +
jge loc_109EB0E  +
mov ecx [ebp+arg_8] +
push eax  +
call sub_109837B  +
test eax eax +
jnz loc_109E9AB  +
push 80004005h  +
lea ecx [ebp+var_1C] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_109EA52  +
push [ebp+wParam]  +
lea ecx [esi+1A8h] +
call sub_106F71F  +
mov eax [esi] +
dec dword ptr [esi+8Ch]  +
push esi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jnz loc_109EA52  +
push [ebp+wParam]  +
call sub_1054C16  +
push 8000FFFFh  +
push eax  +
mov [ebp+wParam] eax +
lea eax [ebp+var_2C] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_1C] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109EA14  +
lea ecx [ebp+var_1C] +
call edi  +
jmp loc_109E845  +
mov eax [ebp+wParam] +
cmp dword ptr [eax+0Ch] 3951589h +
jnz loc_109EA26  +
dec dword ptr [esi+90h]  +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
mov ecx esi +
call sub_10546DD  +
push eax  +
lea ecx [ebp+var_1C] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109EA0A  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109EA0A  +
call ds:GetFocus  +
mov ecx [ebp+arg_8] +
cmp eax [ecx+20h] +
jnz loc_109EAD9  +
call ?GetStyle@CWnd@@QBEKXZ  +
test al 4 +
jz loc_109EAD9  +
mov eax [ebp+var_C] +
cmp [eax+0D0h] ebx +
jnz loc_109EAD9  +
mov ecx [ebp+arg_8] +
call sub_10984CF  +
cmp eax ebx +
mov [ebp+wParam] eax +
jl loc_109EAD9  +
mov ecx [ebp+arg_8] +
push 2  +
pop ebx  +
push ebx  +
push eax  +
call sub_109848B  +
test al bl +
jnz loc_109EAD9  +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
mov eax [ebp+arg_8] +
push 102Bh  +
push dword ptr [eax+20h]  +
mov [ebp+var_5C] ebx +
mov [ebp+var_58] ebx +
call ds:SendMessageW  +
test eax eax +
jnz loc_109EAD9  +
push 80004005h  +
lea ecx [ebp+var_1C] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
push [ebp+var_4]  +
lea eax [ebp+var_2C] +
push offset loc_101187F  +
push eax  +
lea ecx [esi+4] +
call sub_100FB75  +
push eax  +
lea ecx [ebp+var_1C] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_109EA0A  +
lea ecx [ebp+var_1C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_14] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_26  +
lea ecx [ebp+var_14] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_0] +
or [ebp+var_4] 0FFFFFFFFh +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+Rect] +
push eax  +
mov ecx esi +
call sub_1098F42  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp+var_14] +
call edi  +
lea ecx [ebp+Rect] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109EBC9  +
lea ecx [ebp+var_14] +
jmp loc_109EC82  +
mov eax [ebp+var_4] +
test eax eax +
jl loc_109EC72  +
cmp eax [esi+8Ch] +
jge loc_109EC72  +
mov eax [esi] +
mov ebx [esi+4Ch] +
push esi  +
call dword ptr [eax+0A4h]  +
test eax eax +
lea eax [ebp+Rect] +
jz loc_109EC11  +
push 0  +
push eax  +
push [ebp+var_4]  +
mov ecx ebx +
call ?GetItemRect@CListCtrl@@QBEHHPAUtagRECT@@I@Z  +
push 1  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:InvalidateRect  +
jmp loc_109EC38  +
push [ebp+var_4]  +
mov ecx esi +
push eax  +
call sub_1099073  +
push eax  +
lea ecx [ebp+var_14] +
call edi  +
lea ecx [ebp+Rect] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109EBC1  +
push dword ptr [ebx+20h]  +
call ds:UpdateWindow  +
push [ebp+var_4]  +
lea eax [ebp+Rect] +
push offset loc_1018B9A  +
push eax  +
lea ecx [esi+4] +
call sub_100FB75  +
push eax  +
lea ecx [ebp+var_14] +
call edi  +
lea ecx [ebp+Rect] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_109EBC1  +
push 80070057h  +
lea ecx [ebp+var_14] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_14] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_28  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jz loc_109ED38  +
push 8000FFFFh  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_10] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
mov edi [ebp+arg_8] +
mov eax [edi] +
mov [esi+0D0h] eax +
mov eax [edi+4] +
mov [esi+0D8h] eax +
push dword ptr [edi+1Ch]  +
lea ecx [esi+0E4h] +
push dword ptr [edi+8]  +
call sub_109B56D  +
push dword ptr [edi+1Ch]  +
lea ecx [esi+118h] +
push dword ptr [edi+0Ch]  +
call sub_109B56D  +
mov eax [ebp+arg_4] +
push dword ptr [esi+0D8h]  +
mov ecx [esi+4Ch] +
mov [esi+150h] eax +
call sub_1056F17  +
test al al +
jnz loc_109ED1B  +
mov eax [esi+4Ch] +
mov eax [eax+9Ch] +
mov edi 80004005h +
push edi  +
push eax  +
mov [ebp+arg_0] eax +
lea eax [ebp+var_20] +
push eax  +
call sub_100A3AE  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp+var_10] +
call ebx  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109ED1B  +
mov eax [ebp+arg_0] +
add eax 1F8h +
push edi  +
push eax  +
lea eax [ebp+var_20] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_10] +
call ebx  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109ED1B  +
mov eax [ebp+arg_0] +
add eax 1F8h +
mov eax [eax+0D8h] +
shr eax 7 +
and eax 1 +
mov [esi+0D4h] eax +
mov eax [ebp+arg_0] +
mov eax [eax+0D8h] +
push edi  +
push eax  +
mov [ebp+arg_8] eax +
lea eax [ebp+var_20] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_10] +
call ebx  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109ED1B  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
add ecx 44h +
mov [esi+14Ch] eax +
mov eax [ecx] +
call dword ptr [eax+78h]  +
push edi  +
push eax  +
mov [ebp+arg_0] eax +
lea eax [ebp+var_20] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_10] +
call ebx  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109ED1B  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
lea edx [esi+0DCh] +
push edx  +
push eax  +
push [ebp+arg_8]  +
mov [esi+154h] eax +
mov ecx [ecx] +
call dword ptr [ecx+84h]  +
push eax  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109ED1B  +
cmp dword ptr [esi+19Ch] 0 +
jz loc_109EEDF  +
xor eax eax +
inc eax  +
mov [esi+1A0h] eax +
jmp loc_109EF3C  +
lea ecx [ebp+arg_0+3] +
call sub_102BBF1  +
xor eax eax +
cmp [esi+0D4h] eax +
jnz loc_109EF01  +
cmp [esi+0E8h] eax +
jnz loc_109EF0F  +
cmp [esi+11Ch] eax +
jnz loc_109EF0F  +
lea eax [esi+0D0h] +
push eax  +
push offset sub_1099669  +
jmp loc_109EF1B  +
lea eax [esi+0D0h] +
push eax  +
push offset loc_109D7AA  +
mov ecx [esi+4Ch] +
call sub_10984AD  +
lea ecx [esi+1A8h] +
mov [ebp+arg_0] eax +
call sub_1018278  +
lea ecx [ebp+arg_0+3] +
call sub_1020056  +
mov eax [ebp+arg_0] +
dec eax  +
neg eax  +
sbb eax eax +
and eax edi +
push eax  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109ED1B  +
push offset loc_100E83D  +
lea eax [ebp+var_20] +
push eax  +
lea ecx [esi+4] +
call sub_1019FF5  +
push eax  +
lea ecx [ebp+var_10] +
call ebx  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_109ED1B  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
mov eax [ebp+0Ch] +
test dword ptr [eax+0Ch] 20000h +
mov edx [eax+24h] +
jz loc_109EFE1  +
mov eax [eax+38h] +
jmp loc_109EFE3  +
xor eax eax +
mov ecx [ecx+28h] +
mov ecx [ecx+4Ch] +
push eax  +
push edx  +
lea eax [ebp+0Ch] +
push eax  +
call ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z  +
push dword ptr [eax]  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
mov [ebp-4] esi +
call sub_101D1AD  +
lea ecx [ebp+0Ch] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCnodesScunadvi  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109F09B  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109F0F1  +
push dword ptr [ebp+8]  +
mov eax [edi+3Ch] +
mov edi [esi+70h] +
lea ecx [ebp+0Ch] +
push ecx  +
mov [ebp+0Ch] eax +
mov eax [esi+6Ch] +
push edi  +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_109E2B1  +
mov eax [ebp-14h] +
cmp eax edi +
jz loc_109F0D6  +
mov ecx [ebp+0Ch] +
cmp [eax] ecx +
jnz loc_109F0D6  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [esi+68h] +
call sub_109E5C7  +
jmp loc_109F0E4  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call sub_109BF1F  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 28h  +
mov eax offset byte_10DADF9 +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCnodesSconli_1  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+8]  +
mov ebx [edi+1Ch] +
mov eax [edi+18h] +
lea ecx [ebp+0Ch] +
push ecx  +
push ebx  +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_109E2B1  +
mov esi [ebp-14h] +
cmp esi ebx +
jz loc_109F247  +
mov eax [esi] +
cmp eax [ebp+0Ch] +
jnz loc_109F247  +
mov ebx [esi+4] +
push 8000FFFFh  +
push ebx  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109F1ED  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109F259  +
or dword ptr [ebx+3Ch] 0FFFFFFFFh +
and dword ptr [ebx+40h] 0 +
push esi  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [edi+14h] +
call sub_109E5C7  +
mov esi [eax] +
jmp loc_109F247  +
dec dword ptr [esi]  +
mov ebx [esi+4] +
push 8000FFFFh  +
push ebx  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109F24C  +
dec dword ptr [ebx+3Ch]  +
add esi 8 +
cmp esi [edi+1Ch] +
jnz loc_109F206  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 0 +
call sub_109BF1F  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_106C1B0 +
mov dword ptr [esi+4] offset off_106C188 +
mov dword ptr [esi+8] offset off_106C15C +
mov dword ptr [esi+0Ch] offset off_106C13C +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcresultnode  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [esi+40h] +
test ecx ecx +
jz loc_109F34B  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_109F023  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109F34B  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call sub_109BF5A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1075F98  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub ecx 0Ch +
jmp loc_109F659  +
***
push 2Ch  +
mov eax offset dword_10DB3E0 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcidispatchi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
add esi 0FFFFFFF4h +
push eax  +
lea ecx [ebp-18h] +
mov [ebp-14h] esi +
call sub_1018390  +
mov esi [ebp-18h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109F466  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109F490  +
push 0  +
push esi  +
call ds:CoDisconnectObject  +
push eax  +
lea ecx [ebp-28h] +
call sub_109F3AD  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test esi esi +
jz loc_109F4A0  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call sub_109BF5A  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_10FCC98 +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10765AC  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_10FCC98 +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1052795  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10FCC98 +
pop ebp  +
jmp sub_105010F  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+44h] +
mov dword ptr [ebp-4] 1 +
call sub_101AE41  +
lea ecx [esi+3Ch] +
call sub_109E295  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1075F98  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1019E2E  +
test byte ptr [ebp+8] 1 +
jz loc_109F571  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub ecx 6Ch +
jmp loc_101B8B4  +
***
sub ecx 54h +
jmp loc_101B8B4  +
***
sub ecx 1Ch +
jmp loc_109F67F  +
***
sub ecx 4 +
jmp loc_109F67F  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCnodesSconlist  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [esi+6Ch] +
mov eax [esi+70h] +
cmp edi eax +
jz loc_109F63A  +
mov ebx [edi+4] +
push 80004003h  +
push ebx  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call sub_107B7E5  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109F62A  +
lea ecx [ebp-1Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_109F632  +
or dword ptr [ebx+3Ch] 0FFFFFFFFh +
and dword ptr [ebx+40h] 0 +
add edi 8 +
cmp edi [esi+70h] +
jnz loc_109F5E6  +
lea ecx [esi+68h] +
call sub_10AC334  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_109BF1F  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_109F2BD  +
test byte ptr [ebp+8] 1 +
jz loc_109F673  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A747  +
test byte ptr [ebp+8] 1 +
jz loc_109F699  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+hWnd] +
mov eax [esi+4Ch] +
xor ecx ecx +
cmp eax ecx +
jz loc_109F6C2  +
mov eax [eax+20h] +
mov [ebp+hWnd] eax +
jmp loc_109F6C5  +
mov [ebp+hWnd] ecx +
cmp [ebp+hWnd] ecx +
jnz loc_109F6D4  +
mov eax 80004005h +
jmp loc_109F81F  +
xor eax eax +
cmp [ebp+arg_4] ecx +
mov [ebp+var_4] ecx +
setnz al  +
mov [ebp+arg_4] eax +
cmp eax [esi+190h] +
jz loc_109F81C  +
cmp [esi+8Ch] ecx +
jz loc_109F702  +
mov [ebp+var_4] 80004005h +
jmp loc_109F81C  +
push ebx  +
push edi  +
mov edi ds:GetWindowLongW +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call edi  +
push 0FFFFFFECh  +
push [ebp+hWnd]  +
mov ebx eax +
xor ebx 1000h +
call edi  +
mov ecx [esi+4Ch] +
xor edi edi +
mov [ebp+dwNewLong] eax +
mov [ebp+var_8] edi +
call sub_100E4E1  +
cmp eax edi +
jz loc_109F73E  +
mov ecx eax +
call ?GetStyle@CWnd@@QBEKXZ  +
mov [ebp+var_8] eax +
cmp [ebp+arg_4] edi +
jz loc_109F771  +
cmp [esi+54h] edi +
jnz loc_109F76C  +
push 0FCh  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_109F760  +
mov ecx eax +
call sub_10359C1  +
jmp loc_109F762  +
xor eax eax +
mov [esi+54h] eax +
mov byte ptr [eax+86h] 1 +
mov eax [esi+54h] +
jmp loc_109F774  +
mov eax [esi+50h] +
mov ecx [esi+4Ch] +
mov [ebp+var_10] ecx +
cmp [eax+20h] edi +
jnz loc_109F79D  +
push edi  +
call ?GetDlgCtrlID@CWnd@@QBEHXZ  +
push eax  +
push dword ptr [esi+88h]  +
mov ecx esi +
push offset unk_10F5720  +
push ebx  +
call sub_10310EB  +
test eax eax +
jz loc_109F7C9  +
mov eax [ebp+arg_4] +
mov [esi+190h] eax +
cmp eax edi +
jz loc_109F7AF  +
mov eax [esi+54h] +
jmp loc_109F7B2  +
mov eax [esi+50h] +
mov [esi+4Ch] eax +
cmp eax edi +
jz loc_109F7C1  +
mov eax [eax+20h] +
mov [ebp+hWnd] eax +
jmp loc_109F7C4  +
mov [ebp+hWnd] edi +
cmp [ebp+hWnd] edi +
jnz loc_109F7D2  +
mov [ebp+var_4] 80004005h +
jmp loc_109F81A  +
mov edi ds:SetWindowLongW +
push ebx  +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call edi  +
push [ebp+dwNewLong]  +
push 0FFFFFFECh  +
push [ebp+hWnd]  +
call edi  +
mov ecx [esi+4Ch] +
call sub_100E4E1  +
test eax eax +
jz loc_109F800  +
push [ebp+var_8]  +
push 0FFFFFFF0h  +
push dword ptr [eax+20h]  +
call edi  +
mov eax [ebp+var_10] +
mov edi ds:ShowWindow +
push 0  +
push dword ptr [eax+20h]  +
call edi  +
mov eax [esi+4Ch] +
push 8  +
push dword ptr [eax+20h]  +
call edi  +
pop edi  +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea edi [esi+3Ch] +
lea ebx [esi+44h] +
mov dword ptr [esi] offset off_106C2F0 +
mov dword ptr [esi+4] offset off_106C2C8 +
mov dword ptr [esi+8] offset off_106C29C +
mov dword ptr [esi+0Ch] offset off_106C27C +
mov dword ptr [edi] offset off_106C25C +
mov dword ptr [ebx] offset off_106C240 +
mov dword ptr [esi+54h] offset off_10102C0 +
mov dword ptr [ebp-4] 4 +
call sub_109F5B1  +
lea ecx [esi+68h] +
call sub_100A67D  +
lea ecx [esi+54h] +
mov byte ptr [ebp-4] 2 +
call sub_100C3CD  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_101AE41  +
mov ecx edi +
call sub_109E295  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1075F98  +
call sub_1001FCF  +
retn   +
***
sub ecx 3Ch +
jmp loc_109FA1F  +
***
sub ecx 0Ch +
jmp loc_109FA1F  +
***
sub ecx 54h +
jmp loc_109FA1F  +
***
push 2Ch  +
mov eax offset dword_10DB868 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcidispatchi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
add esi 0FFFFFFF4h +
push eax  +
lea ecx [ebp-18h] +
mov [ebp-14h] esi +
call sub_1018390  +
mov esi [ebp-18h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109F96C  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_109F996  +
push 0  +
push esi  +
call ds:CoDisconnectObject  +
push eax  +
lea ecx [ebp-28h] +
call sub_109F3AD  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test esi esi +
jz loc_109F9A6  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call sub_109BF1F  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_10FCCB4 +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10765AC  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_10FCCB4 +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1052795  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10FCCB4 +
pop ebp  +
jmp sub_105010F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_109F829  +
test byte ptr [ebp+8] 1 +
jz loc_109FA39  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 14h  +
mov eax offset byte_10DB8CB +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCnodesSconlist  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [edi-54h] +
call sub_109F5B1  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call sub_109BF1F  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+4] +
cmp byte ptr [eax+15h] 0 +
push edi  +
mov edi ecx +
mov byte ptr [ebp+var_4] 1 +
jnz loc_109FAE8  +
mov ecx [ebx] +
cmp ecx [eax+0Ch] +
mov edi eax +
setl byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jz loc_109FADF  +
mov eax [eax] +
jmp loc_109FAE2  +
mov eax [eax+8] +
cmp byte ptr [eax+15h] 0 +
jz loc_109FACC  +
cmp byte ptr [ebp+var_4] 0 +
mov ecx edi +
mov [ebp+arg_4] ecx +
jz loc_109FB1F  +
mov eax [esi+4] +
cmp edi [eax] +
jnz loc_109FB14  +
push ebx  +
push edi  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_1022AA1  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
jmp loc_109FB34  +
lea ecx [ebp+arg_4] +
call sub_10218CE  +
mov ecx [ebp+arg_4] +
mov eax [ecx+0Ch] +
cmp eax [ebx] +
jge loc_109FB2D  +
push ebx  +
push edi  +
push [ebp+var_4]  +
jmp loc_109FAFE  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
call sub_100A60E  +
mov [ebp-14h] ecx +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov [ebp-18h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_109FB9F  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-14h] +
push dword ptr [ebp+8]  +
call sub_1056C89  +
dec dword ptr [ebp+0Ch]  +
jmp loc_109FB5B  +
mov eax [ebp-18h] +
cmp [ebp+0Ch] eax +
jnb loc_109FB96  +
sub eax [ebp+0Ch] +
mov esi eax +
mov eax [ebp+8] +
push dword ptr [eax+4]  +
mov ecx [ebp-14h] +
lea eax [ebp+0Ch] +
push eax  +
call sub_100ED24  +
dec esi  +
jnz loc_109FB81  +
push 0  +
push 0  +
call _CxxThrowException  +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_100A60E  +
mov [ebp-14h] ecx +
mov eax [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
mov [ebp-18h] eax +
cmp eax [ebp+10h] +
jz loc_109FC0A  +
mov ecx [ebp-14h] +
add eax 8 +
push eax  +
push dword ptr [ebp+8]  +
call sub_1056C89  +
mov eax [ebp+0Ch] +
mov eax [eax] +
mov [ebp+0Ch] eax +
jmp loc_109FBC5  +
mov esi [ebp-18h] +
jmp loc_109FBFC  +
mov eax [ebp+8] +
push dword ptr [eax+4]  +
mov ecx [ebp-14h] +
lea eax [ebp-18h] +
push eax  +
call sub_100ED24  +
mov esi [esi] +
cmp esi [ebp+0Ch] +
jnz loc_109FBE8  +
push 0  +
push 0  +
call _CxxThrowException  +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov eax [edi+8] +
cmp esi eax +
jbe loc_109FC3E  +
mov ecx [edi+4] +
lea edx [ebp+arg_4] +
push edx  +
sub esi eax +
push esi  +
push ecx  +
mov ecx edi +
call sub_109FB42  +
jmp loc_109FC4C  +
jnb loc_109FC4C  +
mov ecx edi +
call sub_103D9AB  +
cmp esi [edi+8] +
jb loc_109FC40  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_109FBAC  +
pop ebp  +
retn 0Ch  +
***
mov eax offset byte_10DBA63 +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamclistview_8  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx edi +
call sub_100E4E1  +
mov ecx [edi+9Ch] +
push 8000FFFFh  +
push ecx  +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov [ebp-14h] ecx +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109FD05  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_109FD9A  +
lea ecx [ebp-48h] +
call sub_1021775  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 3 +
call sub_1056A11  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109FD74  +
mov ecx [ebp-14h] +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call near ptr dword_109858C+5  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-44h] +
mov [ebp-10h] ebx +
mov dword ptr [ebp-48h] offset off_100AB7C +
mov dword ptr [ebp-38h] offset off_100B8D0 +
call sub_100B8F1  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_29  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_0] +
push 8000FFFFh  +
push dword ptr [esi+4Ch]  +
lea eax [ebp+var_20] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp+var_10] +
call edi  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_109FF1D  +
mov ecx [esi+4Ch] +
push ebx  +
lea eax [ebp+var_20] +
push eax  +
call sub_1055BC0  +
push eax  +
lea ecx [ebp+var_10] +
call edi  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109FF33  +
lea ecx [ebp+var_10] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov eax [esi+4Ch] +
cmp eax ebx +
jnz loc_109FF3E  +
xor eax eax +
jmp loc_109FF41  +
mov eax [eax+20h] +
mov edi ds:SendMessageW +
push ebx  +
push ebx  +
mov ebx 1027h +
push ebx  +
push eax  +
call edi  +
mov eax [esi+4Ch] +
test eax eax +
jz loc_109FF5C  +
mov eax [eax+20h] +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 102Fh  +
push eax  +
call edi  +
test eax eax +
jz loc_109FF86  +
mov eax [esi] +
push esi  +
call dword ptr [eax+0A4h]  +
test eax eax +
jz loc_109FF94  +
mov eax [ebp+wParam] +
mov [esi+8Ch] eax +
jmp loc_109FF94  +
push 80004005h  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax [esi+4Ch] +
test eax eax +
jz loc_109FF9E  +
mov eax [eax+20h] +
push 0  +
push 0  +
push ebx  +
push eax  +
call edi  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_109FFD0  +
lea ecx [ebp+var_10] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
push offset loc_100E83D  +
lea eax [ebp+var_20] +
push eax  +
lea ecx [esi+4] +
call sub_1019FF5  +
push eax  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_109FFB3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_30  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push [ebp+arg_4]  +
lea eax [ebp+var_20] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp+var_10] +
call esi  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A00B3  +
lea ecx [ebp+var_10] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
mov eax [ebp+arg_0] +
mov edi [eax+4Ch] +
push 8000FFFFh  +
push edi  +
lea eax [ebp+var_20] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_10] +
call esi  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A0097  +
push [ebp+arg_4]  +
lea eax [ebp+var_20] +
push eax  +
mov ecx edi +
call sub_1056A11  +
push eax  +
lea ecx [ebp+var_10] +
call esi  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_10A0097  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCcclistview_31  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+arg_0] +
mov edi [eax+4Ch] +
push 8000FFFFh  +
push edi  +
lea eax [ebp+var_20] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp+var_10] +
call esi  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A01D1  +
lea ecx [ebp+var_10] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
push 1  +
lea eax [ebp+var_20] +
push eax  +
mov ecx edi +
call sub_1055BC0  +
push eax  +
lea ecx [ebp+var_10] +
call esi  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_10A01B5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
call sub_100FCDF  +
cmp eax [edi+4] +
jz loc_10A026B  +
mov ecx [esi] +
cmp ecx [eax+0Ch] +
jge loc_10A0286  +
mov ecx [esi] +
mov [ebp+var_8] ecx +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx edi +
mov [ebp+var_4] 0 +
call sub_10322CF  +
mov eax [eax] +
pop edi  +
add eax 10h +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
sub esp 14h +
mov esi ecx +
mov ecx esp +
call sub_1055816  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_109FC17  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aSccreateconnec  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov eax esi +
neg eax  +
sbb eax eax +
lea ecx [esi+3Ch] +
and eax ecx +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [edi+1Ch] +
call sub_1031995  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_10A033D  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A0346  +
mov [esi+40h] edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B8AF  +
push [ebp+arg_4]  +
mov eax [esi+4] +
push [ebp+arg_0]  +
mov eax [eax] +
push eax  +
mov ecx esi +
call sub_109FC57  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
inc eax  +
push eax  +
lea ecx [esi+4] +
call sub_10A0294  +
mov eax [esi+8] +
mov eax [eax+4] +
add eax 8 +
mov ecx eax +
add eax 4 +
neg ecx  +
sbb ecx ecx +
and ecx eax +
push 0  +
push ecx  +
mov ecx [ebp+8] +
call sub_101EA69  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10A0366  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+1Ch] +
mov dword ptr [esi+4] offset off_10A0450 +
call sub_1041A02  +
and dword ptr [ebp-4] 0 +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1039FB1  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_10A049C +
mov dword ptr [esi+4] offset off_10A0488 +
mov dword ptr [esi+8] offset off_10A0470 +
mov dword ptr [edi] offset off_10A0464 +
call ds:?GetComObjectEventSource@@YGAAV?$CEventSource@VCComObjectObserver@@VCVoid@@V2@V2@V2@@@XZ  +
push edi  +
mov ecx eax +
call sub_102124D  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
and esi 1 +
jz loc_10A04E2  +
call ds:?Release@CMMCStrongReferences@@SGKXZ  +
mov edi eax +
mov eax [ebp+arg_0] +
add eax 0FFFFFFF8h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test esi esi +
jz loc_10A04F4  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
push offset dword_100CA88  +
push offset dword_106C0F4  +
push ecx  +
call sub_1071867  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
push 2Ch  +
mov eax offset dword_10DBB90 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcidispatchi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
add esi 0FFFFFFF4h +
push eax  +
lea ecx [ebp-18h] +
mov [ebp-14h] esi +
call sub_1018390  +
mov esi [ebp-18h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A05C9  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A05F3  +
push 0  +
push esi  +
call ds:CoDisconnectObject  +
push eax  +
lea ecx [ebp-28h] +
call sub_109F3AD  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test esi esi +
jz loc_10A0603  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call sub_10A04FF  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_10FCCD0 +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10765AC  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_10FCCD0 +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1052795  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10FCCD0 +
pop ebp  +
jmp sub_105010F  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+1Ch] +
mov dword ptr [esi+4] offset off_10A06E4 +
call sub_1041A02  +
and dword ptr [ebp-4] 0 +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1039FB1  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_10A0730 +
mov dword ptr [esi+4] offset off_10A071C +
mov dword ptr [esi+8] offset off_10A0704 +
mov dword ptr [edi] offset off_10A06F8 +
call ds:?GetComObjectEventSource@@YGAAV?$CEventSource@VCComObjectObserver@@VCVoid@@V2@V2@V2@@@XZ  +
push edi  +
mov ecx eax +
call sub_102124D  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-58h] +
mov [ebp-14h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCcclistview_43  +
lea ecx [ebp-58h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+0Ch] edi +
jge loc_10A07B4  +
push 80070057h  +
lea ecx [ebp-58h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] edi +
jmp loc_10A0936  +
mov ecx [ebp-10h] +
or dword ptr [ebp-44h] 0FFFFFFFFh +
lea eax [ebp-48h] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-3Ch] +
push eax  +
mov [ebp-48h] ebx +
mov [ebp-40h] bl +
call sub_109A601  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-58h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A080A  +
mov ecx [ebp+8] +
lea eax [ebp-58h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A07AC  +
mov eax [ebp-10h] +
mov eax [eax+94h] +
lea ecx [ebp-2Ch] +
mov [ebp-1Ch] eax +
call sub_1041C89  +
cmp [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 3 +
mov [ebp-18h] ebx +
jle loc_10A088B  +
mov ecx [ebp-10h] +
or dword ptr [ebp-34h] 0FFFFFFFFh +
lea eax [ebp-38h] +
push eax  +
push dword ptr [ebp-18h]  +
lea eax [ebp-68h] +
push eax  +
mov [ebp-38h] ebx +
mov [ebp-30h] bl +
call sub_109A601  +
push eax  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-58h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A091A  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_10A024B  +
mov cl [ebp-30h] +
inc dword ptr [ebp-18h]  +
mov [eax] cl +
mov eax [ebp-18h] +
cmp eax [ebp-1Ch] +
jl loc_10A082A  +
mov eax [ebp-28h] +
mov eax [eax] +
mov ecx edi +
mov [ebp-18h] ebx +
mov [ebp-1Ch] eax +
cmp eax [ebp-28h] +
jz loc_10A08C6  +
mov ecx [eax+0Ch] +
mov [ebp-20h] ecx +
cmp [eax+10h] bl +
jnz loc_10A08AB  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
cmp eax [ebp+0Ch] +
jz loc_10A08C3  +
lea ecx [ebp-1Ch] +
call sub_1051FDF  +
mov eax [ebp-1Ch] +
cmp eax [ebp-28h] +
jnz loc_10A089D  +
mov ecx [ebp-20h] +
lea eax [ebp-48h] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-68h] +
mov [ebp-44h] ecx +
mov ecx [ebp-10h] +
push eax  +
call sub_109A7B7  +
push eax  +
lea ecx [ebp-58h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-68h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-58h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A091A  +
mov eax [ebp-10h] +
mov eax [eax+4Ch] +
cmp eax ebx +
jnz loc_10A090E  +
xor eax eax +
jmp loc_10A0911  +
mov eax [eax+20h] +
push edi  +
push ebx  +
push eax  +
call ds:InvalidateRect  +
mov ecx [ebp+8] +
lea eax [ebp-58h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-14h] edi +
mov byte ptr [ebp-4] 1 +
call sub_100E847  +
lea ecx [ebp-58h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp esi eax +
jz loc_10A09C0  +
mov eax [eax+4] +
mov ecx [eax] +
push eax  +
push ecx  +
mov ecx esi +
call sub_10A03CE  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+1Ch] +
mov dword ptr [esi+4] offset off_10A0A34 +
call sub_1041A02  +
and dword ptr [ebp-4] 0 +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1039FB1  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_10A0A84 +
mov dword ptr [esi+4] offset off_10A0A6C +
mov dword ptr [esi+8] offset off_10A0A54 +
mov dword ptr [edi] offset off_10A0A48 +
call ds:?GetComObjectEventSource@@YGAAV?$CEventSource@VCComObjectObserver@@VCVoid@@V2@V2@V2@@@XZ  +
push edi  +
mov ecx eax +
call sub_102124D  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax 0FFFFFFF8h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
test [ebp+arg_4] 1 +
jz loc_10A0AE6  +
call ds:?AddRef@CMMCStrongReferences@@SGKXZ  +
pop ebp  +
retn 0Ch  +
***
push 2Ch  +
mov eax offset dword_10DBC8C +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcidispatchi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
add esi 0FFFFFFF4h +
push eax  +
lea ecx [ebp-18h] +
mov [ebp-14h] esi +
call sub_1018390  +
mov esi [ebp-18h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A0B7E  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A0BA8  +
push 0  +
push esi  +
call ds:CoDisconnectObject  +
push eax  +
lea ecx [ebp-28h] +
call sub_109F3AD  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test esi esi +
jz loc_10A0BB8  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call sub_109BEE4  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_10FCCEC +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10765AC  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_10FCCEC +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1052795  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10FCCEC +
pop ebp  +
jmp sub_105010F  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+1Ch] +
mov dword ptr [esi+4] offset off_10A0C98 +
call sub_1041A02  +
and dword ptr [ebp-4] 0 +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1039FB1  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_10A0CE4 +
mov dword ptr [esi+4] offset off_10A0CD0 +
mov dword ptr [esi+8] offset off_10A0CB8 +
mov dword ptr [edi] offset off_10A0CAC +
call ds:?GetComObjectEventSource@@YGAAV?$CEventSource@VCComObjectObserver@@VCVoid@@V2@V2@V2@@@XZ  +
push edi  +
mov ecx eax +
call sub_102124D  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10A067C  +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+40h] 0 +
mov dword ptr [esi+3Ch] offset off_106C0A8 +
lea edi [esi+44h] +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_102F5E6  +
lea ebx [esi+54h] +
mov ecx ebx +
mov byte ptr [ebp-4] 2 +
call sub_10305B1  +
push 0  +
lea ecx [esi+68h] +
mov byte ptr [ebp-4] 3 +
mov dword ptr [esi] offset off_106C2F0 +
mov dword ptr [esi+4] offset off_106C2C8 +
mov dword ptr [esi+8] offset off_106C29C +
mov dword ptr [esi+0Ch] offset off_106C27C +
mov dword ptr [esi+3Ch] offset off_106C25C +
mov dword ptr [edi] offset off_106C240 +
mov dword ptr [ebx] offset off_10102C0 +
call sub_100A6A3  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10A03EA  +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+40h] 0 +
mov dword ptr [esi+3Ch] offset off_106C0A8 +
lea edi [esi+44h] +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_102F5E6  +
mov dword ptr [esi] offset off_10A0E58 +
mov dword ptr [esi+4] offset off_10A0E44 +
mov dword ptr [esi+8] offset off_10A0E2C +
mov dword ptr [esi+0Ch] offset off_10A0E20 +
mov dword ptr [esi+3Ch] offset off_10A0E14 +
mov dword ptr [edi] offset off_10A0E0C +
mov eax esi +
call sub_1001FCF  +
retn   +
***
sub ecx 0Ch +
jmp loc_10A0F42  +
***
sub ecx 44h +
jmp loc_10A0F42  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A0F1A  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10A04FF  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_109A365  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10A0EF7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_109F519  +
test byte ptr [ebp+8] 1 +
jz loc_10A0F5C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10A09CC  +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+40h] 0 +
mov dword ptr [esi+3Ch] offset off_106C0A8 +
lea edi [esi+44h] +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_10305B1  +
or dword ptr [esi+54h] 0FFFFFFFFh +
mov dword ptr [esi] offset off_10A103C +
mov dword ptr [esi+4] offset off_10A1028 +
mov dword ptr [esi+8] offset off_10A1010 +
mov dword ptr [esi+0Ch] offset off_10A1004 +
mov dword ptr [esi+3Ch] offset off_10A0FF8 +
mov dword ptr [edi] offset off_10A0FD4 +
mov eax esi +
call sub_1001FCF  +
retn   +
***
sub ecx 0Ch +
jmp loc_10A15D8  +
***
sub ecx 3Ch +
jmp loc_10A15D8  +
***
sub ecx 44h +
jmp loc_10A15D8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov esi [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea ecx [esi+3Ch] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A1123  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_109BEE4  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push dword ptr [esi+54h]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_109A44B  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10A1100  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov esi [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea ecx [esi+3Ch] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A11C9  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_109BEE4  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push dword ptr [esi+54h]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_109A987  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10A11A6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov esi [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea ecx [esi+3Ch] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A126F  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_109BEE4  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push dword ptr [esi+54h]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_109AAB7  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10A124C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov esi [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea ecx [esi+3Ch] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A1315  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_109BEE4  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push dword ptr [esi+54h]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_109ABDF  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10A12F2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov esi [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea ecx [esi+3Ch] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A13BB  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_109BEE4  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push dword ptr [esi+54h]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_109ADAB  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10A1398  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov esi [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea ecx [esi+3Ch] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A1461  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_109BEE4  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push dword ptr [esi+54h]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_109AEDD  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10A143E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov esi [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea ecx [esi+3Ch] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A1507  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_109BEE4  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push dword ptr [esi+54h]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_109B165  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10A14E4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov esi [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea ecx [esi+3Ch] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A15AD  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_109BEE4  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push dword ptr [esi+54h]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_109B34B  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10A158A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_109E623  +
test byte ptr [ebp+8] 1 +
jz loc_10A15F2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov esi [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea ecx [esi+3Ch] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A1679  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_109BEE4  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push dword ptr [esi+54h]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_10A075D  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10A1656  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx eax +
add eax 4 +
neg ecx  +
sbb ecx ecx +
and ecx eax +
push ecx  +
lea ecx [esi+4] +
call sub_10A09A3  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10A0C31  +
or dword ptr [esi+3Ch] 0FFFFFFFFh +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_106C1B0 +
mov dword ptr [esi+4] offset off_106C188 +
mov dword ptr [esi+8] offset off_106C15C +
mov dword ptr [esi+0Ch] offset off_106C13C +
mov [esi+40h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcresultno_0  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
or dword ptr [esi+3Ch] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov [esi+40h] ebx +
mov [ebp-4] bl +
call sub_109BF5A  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10A16CF  +
push offset Addend  +
mov dword ptr [esi] offset off_1013DEC +
mov dword ptr [esi+4] offset off_106C37C +
mov dword ptr [esi+8] offset off_106C350 +
mov dword ptr [esi+0Ch] offset off_106C330 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 0Ch +
jmp loc_10A1888  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10A17EC  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10A17CF  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10A1815  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10A1815  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_1013DEC +
mov dword ptr [esi+4] offset off_106C37C +
mov dword ptr [esi+8] offset off_106C350 +
mov dword ptr [esi+0Ch] offset off_106C330 +
mov dword ptr [esi+1Ch] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_109F2BD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10A1849  +
test byte ptr [ebp+8] 1 +
jz loc_10A18A2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10A0F68  +
push offset Addend  +
mov dword ptr [esi] offset off_1014004 +
mov dword ptr [esi+4] offset off_106C410 +
mov dword ptr [esi+8] offset off_106C3E4 +
mov dword ptr [esi+0Ch] offset off_106C3C4 +
mov dword ptr [esi+3Ch] offset off_106C3A4 +
mov dword ptr [esi+44h] offset off_1010380 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 3Ch +
jmp loc_10A1A2E  +
***
sub ecx 44h +
jmp loc_10A1A2E  +
***
sub ecx 0Ch +
jmp loc_10A1A2E  +
***
retn   +
***
sub dword ptr [esp+4] 4 +
jmp loc_101405D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10A1984  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10A1968  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10A19AD  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10A19AD  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_1014004 +
mov dword ptr [esi+4] offset off_106C410 +
mov dword ptr [esi+8] offset off_106C3E4 +
mov dword ptr [esi+0Ch] offset off_106C3C4 +
mov dword ptr [esi+3Ch] offset off_106C3A4 +
mov dword ptr [esi+44h] offset off_1010380 +
mov dword ptr [esi+1Ch] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_109E623  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10A19E1  +
test byte ptr [ebp+8] 1 +
jz loc_10A1A48  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10A0D19  +
mov dword ptr [esi] offset off_10A1B08 +
mov dword ptr [esi+4] offset off_10A1AF4 +
mov dword ptr [esi+8] offset off_10A1ADC +
mov dword ptr [esi+0Ch] offset off_10A1AD0 +
mov dword ptr [esi+3Ch] offset off_10A1AC4 +
mov dword ptr [esi+44h] offset off_10A1ABC +
mov dword ptr [esi+54h] offset off_10A1A98 +
mov eax esi +
pop esi  +
retn   +
***
sub ecx 44h +
jmp loc_109FA1F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
and [ebp+var_4] 0 +
mov [eax] ecx +
mov ecx [ebp+arg_0] +
push 0  +
call sub_109833D  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
mov eax [ecx+4] +
mov dword ptr [ecx] offset off_106C438 +
test eax eax +
jz locret_10A1B7D  +
push ecx  +
lea ecx [eax+44h] +
call sub_101A545  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10A1B67  +
test byte ptr [ebp+8] 1 +
jz loc_10A1B9D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+10h] +
mov dword ptr [esi+4] offset off_106BAF8 +
call sub_1041A02  +
and dword ptr [esi+0Ch] 0 +
mov dword ptr [esi+8] offset off_106C438 +
mov dword ptr [esi] offset off_10A1C04 +
mov dword ptr [esi+4] offset off_10A1BF0 +
mov dword ptr [esi+8] offset off_10A1BE4 +
mov eax esi +
pop esi  +
retn   +
***
sub ecx 8 +
jmp loc_10A1EB1  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcenumerat_0  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [esi+8] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A1CD5  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-28h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_107CE42  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 8  +
mov edi [ebp+0Ch] +
mov ecx [ebp-10h] +
lea eax [edi+1] +
mov [ebp+0Ch] eax +
mov eax [esi+30h] +
mov [ebp+8] eax +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call near ptr dword_109C904+5  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A1CAB  +
mov eax [ebp+8] +
mov [esi+30h] eax +
cmp [ebp+0Ch] edi +
jnb loc_10A1CAB  +
push 1  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10A1CAB  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcenumerat_1  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [esi+8] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A1DE3  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-28h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_107CE42  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 4  +
mov ecx [ebp-10h] +
add esi 30h +
push esi  +
lea eax [ebp-38h] +
push eax  +
call sub_109C5C7  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10A1DB9  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call sub_10A1B67  +
lea ecx [esi+10h] +
pop esi  +
jmp sub_101A846  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10A1BA9  +
push offset Addend  +
mov dword ptr [esi] offset off_106C4A0 +
mov dword ptr [esi+4] offset off_106C478 +
mov dword ptr [esi+8] offset off_106C458 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 8 +
jmp loc_10A1F0F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10A1E98  +
test esi esi +
jz loc_10A1E98  +
lea ecx [esi+8] +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10A1E70  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10A1E14  +
test byte ptr [ebp+8] 1 +
jz loc_10A1ECB  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_106C4A0 +
mov dword ptr [esi+4] offset off_106C478 +
mov dword ptr [esi+8] offset off_106C458 +
mov dword ptr [esi+10h] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_10A1E14  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10A1ED7  +
test byte ptr [ebp+8] 1 +
jz loc_10A1F29  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10A1F51  +
mov eax 80004003h +
jmp loc_10A1FBD  +
push 34h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10A1F76  +
push esi  +
mov ecx eax +
call sub_10A1E2F  +
jmp loc_10A1F78  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
jmp loc_10A1F90  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10A1F8A +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10A1FB6  +
lea ecx [esi+14h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10A1FA8  +
xor ebx ebx +
test ebx ebx +
jz loc_10A1FB9  +
lea ecx [esi+8] +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
xor esi esi +
jmp loc_10A1FB9  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aSccreateconnec  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov eax esi +
neg eax  +
sbb eax eax +
lea ecx [esi+8] +
and eax ecx +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [edi+44h] +
call sub_1031995  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_10A204D  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A2056  +
mov [esi+0Ch] edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ebx [ebp+arg_4] +
and [ebp+var_4] 0 +
push 80070057h  +
push ebx  +
lea eax [ebp+var_2C] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A20F2  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_109BF1F  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov ecx [ebp+arg_0] +
and dword ptr [ebx] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_10A1B42  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call sub_109BF1F  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A20CE  +
and [ebp+arg_4] 0 +
lea eax [ebp+arg_4] +
push eax  +
call sub_10A1F35  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_109F3AD  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A20CE  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_10A2160  +
push 8000FFFFh  +
lea ecx [ebp+var_1C] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10A20CE  +
push [ebp+var_4]  +
lea eax [ebp+var_2C] +
push esi  +
push eax  +
call sub_10A1FCA  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A20CE  +
mov ecx [ebp+var_4] +
lea eax [esi+30h] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_109C5C7  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A20CE  +
mov eax [esi] +
push ebx  +
push offset dword_1048258  +
push esi  +
call dword ptr [eax]  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_109F3AD  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_10A20CE  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
xor esi esi +
push esi  +
lea ecx [ebp-28h] +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push (offset dword_106BC24+8)  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx [ebp+0Ch] +
cmp ebx esi +
jnz loc_10A2264  +
push 80070057h  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-28h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_107CE42  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 8  +
mov edi [ebp+8] +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [edi+8] +
mov [ebp-10h] esi +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A223A  +
and dword ptr [ebp+0Ch] 0 +
lea eax [ebp+0Ch] +
push eax  +
call sub_10A1F35  +
push eax  +
lea ecx [ebp-28h] +
call sub_109F3AD  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A223A  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_10A22D9  +
push 8000FFFFh  +
jmp loc_10A2231  +
mov eax [edi+30h] +
push dword ptr [ebp-10h]  +
mov [esi+30h] eax +
push esi  +
lea eax [ebp-38h] +
push eax  +
call sub_10A1FCA  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A223A  +
mov [ebx] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
jmp loc_10A223A  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10A0DA3  +
mov dword ptr [esi] offset off_10A23B0 +
mov dword ptr [esi+4] offset off_10A239C +
mov dword ptr [esi+8] offset off_10A2384 +
mov dword ptr [esi+0Ch] offset off_10A2378 +
mov dword ptr [esi+3Ch] offset off_10A236C +
mov dword ptr [esi+44h] offset off_10A2364 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub ecx 3Ch +
jmp loc_10A0F42  +
***
call sub_1001F95  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-20h] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push eax  +
mov [ebp-4] esi +
call sub_10A23DD  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call sub_109E295  +
lea ecx [esi+10h] +
pop esi  +
jmp sub_101A846  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+10h] +
mov dword ptr [esi+4] offset off_106BAF8 +
call sub_1041A02  +
and dword ptr [esi+0Ch] 0 +
mov dword ptr [esi+8] offset off_106C0A8 +
mov dword ptr [esi] offset off_10A24CC +
mov dword ptr [esi+4] offset off_10A24B8 +
mov dword ptr [esi+8] offset off_10A24AC +
mov eax esi +
pop esi  +
retn   +
***
sub ecx 8 +
jmp loc_10A26DC  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcenumerat_0  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [esi+8] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A259D  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-28h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_107CE42  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 8  +
mov edi [ebp+0Ch] +
mov ecx [ebp-10h] +
lea eax [edi+1] +
mov [ebp+0Ch] eax +
mov eax [esi+30h] +
mov [ebp+8] eax +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call near ptr dword_10981B8+3  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A2573  +
mov eax [ebp+8] +
mov [esi+30h] eax +
cmp [ebp+0Ch] edi +
jnb loc_10A2573  +
push 1  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10A2573  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcenumerat_1  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [esi+8] +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A26AB  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-28h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_107CE42  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 4  +
mov ecx [ebp-10h] +
add esi 30h +
push esi  +
lea eax [ebp-38h] +
push eax  +
call sub_10982A5  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10A2681  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10A2455  +
test byte ptr [ebp+8] 1 +
jz loc_10A26F6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10A2470  +
push offset Addend  +
mov dword ptr [esi] offset off_106C51C +
mov dword ptr [esi+4] offset off_106C4F4 +
mov dword ptr [esi+8] offset off_106C4D4 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 8 +
jmp loc_10A279F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 10h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10A2740  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_106C51C +
mov dword ptr [esi+4] offset off_106C4F4 +
mov dword ptr [esi+8] offset off_106C4D4 +
mov dword ptr [esi+10h] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_10A2455  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10A2767  +
test byte ptr [ebp+8] 1 +
jz loc_10A27B9  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10A27E1  +
mov eax 80004003h +
jmp loc_10A284D  +
push 34h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10A2806  +
push esi  +
mov ecx eax +
call sub_10A2702  +
jmp loc_10A2808  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
jmp loc_10A2820  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10A281A +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10A2846  +
lea ecx [esi+14h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10A2838  +
xor ebx ebx +
test ebx ebx +
jz loc_10A2849  +
lea ecx [esi+8] +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
xor esi esi +
jmp loc_10A2849  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aSccreateconnec  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov eax esi +
neg eax  +
sbb eax eax +
lea ecx [esi+8] +
and eax ecx +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [edi+1Ch] +
call sub_1031995  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_10A28DD  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A28E6  +
mov [esi+0Ch] edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ebx [ebp+arg_4] +
and [ebp+var_4] 0 +
push 80070057h  +
push ebx  +
lea eax [ebp+var_2C] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A2982  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10A04FF  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov ecx [ebp+arg_0] +
and dword ptr [ebx] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_10A2407  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call sub_10A04FF  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A295E  +
and [ebp+arg_4] 0 +
lea eax [ebp+arg_4] +
push eax  +
call sub_10A27C5  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_109F3AD  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A295E  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_10A29F0  +
push 8000FFFFh  +
lea ecx [ebp+var_1C] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10A295E  +
push [ebp+var_4]  +
lea eax [ebp+var_2C] +
push esi  +
push eax  +
call sub_10A285A  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A295E  +
mov ecx [ebp+var_4] +
lea eax [esi+30h] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_10982A5  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A295E  +
mov eax [esi] +
push ebx  +
push offset dword_1048258  +
push esi  +
call dword ptr [eax]  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_109F3AD  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_10A295E  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
xor esi esi +
push esi  +
lea ecx [ebp-28h] +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push (offset dword_106BC24+8)  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx [ebp+0Ch] +
cmp ebx esi +
jnz loc_10A2AF4  +
push 80070057h  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-28h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_107CE42  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 8  +
mov edi [ebp+8] +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [edi+8] +
mov [ebp-10h] esi +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A2ACA  +
and dword ptr [ebp+0Ch] 0 +
lea eax [ebp+0Ch] +
push eax  +
call sub_10A27C5  +
push eax  +
lea ecx [ebp-28h] +
call sub_109F3AD  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A2ACA  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_10A2B69  +
push 8000FFFFh  +
jmp loc_10A2AC1  +
mov eax [edi+30h] +
push dword ptr [ebp-10h]  +
mov [esi+30h] eax +
push esi  +
lea eax [ebp-38h] +
push eax  +
call sub_10A285A  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A2ACA  +
mov [ebx] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
jmp loc_10A2ACA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10A16A4  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10A2BF1  +
mov eax 80004003h +
jmp loc_10A2C5F  +
push 44h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_10A2C1D  +
push esi  +
call sub_10A1787  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_10A2C33  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10A2C2D +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10A2C58  +
lea ecx [esi+20h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10A2C4B  +
xor ebx ebx +
test ebx ebx +
jz loc_10A2C5B  +
lea ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor esi esi +
jmp loc_10A2C5B  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10A2C88  +
mov eax 80004003h +
jmp loc_10A2CF6  +
push 58h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_10A2CB4  +
push esi  +
call sub_10A18AE  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_10A2CCA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10A2CC4 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10A2CEF  +
lea ecx [esi+20h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10A2CE2  +
xor ebx ebx +
test ebx ebx +
jz loc_10A2CF2  +
lea ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor esi esi +
jmp loc_10A2CF2  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10A1A54  +
push offset Addend  +
mov dword ptr [esi] offset off_1012DAC +
mov dword ptr [esi+4] offset off_106C5D8 +
mov dword ptr [esi+8] offset off_106C5AC +
mov dword ptr [esi+0Ch] offset off_106C58C +
mov dword ptr [esi+3Ch] offset off_106C56C +
mov dword ptr [esi+44h] offset off_106C550 +
mov dword ptr [esi+54h] offset off_101053C +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 44h +
jmp loc_10A2E55  +
***
sub ecx 0Ch +
jmp loc_10A2E55  +
***
sub ecx 54h +
jmp loc_10A2E55  +
***
sub ecx 3Ch +
jmp loc_10A2E55  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10A2DA4  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10A2D87  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10A2DCD  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10A2DCD  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_1012DAC +
mov dword ptr [esi+4] offset off_106C5D8 +
mov dword ptr [esi+8] offset off_106C5AC +
mov dword ptr [esi+0Ch] offset off_106C58C +
mov dword ptr [esi+3Ch] offset off_106C56C +
mov dword ptr [esi+44h] offset off_106C550 +
mov dword ptr [esi+54h] offset off_101053C +
mov dword ptr [esi+1Ch] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_109F829  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10A2E01  +
test byte ptr [ebp+8] 1 +
jz loc_10A2E6F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10A2329  +
push offset Addend  +
mov dword ptr [esi] offset off_1014078 +
mov dword ptr [esi+4] offset off_106C688 +
mov dword ptr [esi+8] offset off_106C65C +
mov dword ptr [esi+0Ch] offset off_106C63C +
mov dword ptr [esi+3Ch] offset off_106C61C +
mov dword ptr [esi+44h] offset off_106C600 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 44h +
jmp loc_10A2FB2  +
***
sub ecx 0Ch +
jmp loc_10A2FB2  +
***
sub ecx 3Ch +
jmp loc_10A2FB2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10A2F08  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10A2EEB  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10A2F31  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10A2F31  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_1014078 +
mov dword ptr [esi+4] offset off_106C688 +
mov dword ptr [esi+8] offset off_106C65C +
mov dword ptr [esi+0Ch] offset off_106C63C +
mov dword ptr [esi+3Ch] offset off_106C61C +
mov dword ptr [esi+44h] offset off_106C600 +
mov dword ptr [esi+1Ch] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_109F519  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10A2F65  +
test byte ptr [ebp+8] 1 +
jz loc_10A2FCC  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamclistview_3  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [edi+0F0h] ebx +
ja loc_10A302B  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A3047  +
mov ecx [ebp+0Ch] +
add edi 0E4h +
push edi  +
call sub_10A2BB9  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCnodeinitobjec  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+arg_0] +
mov edi [eax+4Ch] +
push 8000FFFFh  +
push edi  +
lea eax [ebp+var_20] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp+var_10] +
call esi  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A313D  +
lea ecx [ebp+var_10] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
lea eax [ebp+var_20] +
push eax  +
mov ecx edi +
call sub_10A2FD8  +
push eax  +
lea ecx [ebp+var_10] +
call esi  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_10A3121  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-38h] +
mov [ebp-14h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCnodesScgetnod  +
lea ecx [ebp-38h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-24h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A323B  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A3429  +
mov eax [ebp+10h] +
mov [eax] esi +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-48h] +
push eax  +
lea ecx [edi+3Ch] +
mov [ebp-18h] esi +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A341C  +
push 8000FFFFh  +
push dword ptr [ebp-18h]  +
lea eax [ebp-48h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 4 +
call sub_107B7E5  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A341C  +
mov ecx [ebp-18h] +
mov [ebp-0Dh] al +
lea eax [ebp-0Dh] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-48h] +
push eax  +
call sub_1099F33  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 5 +
call sub_107B7E5  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A341C  +
cmp [ebp-0Dh] al +
jz loc_10A3338  +
push dword ptr [ebp+10h]  +
mov ecx [ebp-18h] +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-48h] +
push eax  +
call sub_109A065  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 6 +
call sub_107B7E5  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jmp loc_10A341C  +
push dword ptr [ebp+8]  +
mov eax [edi+70h] +
mov ecx [edi+6Ch] +
lea edx [ebp+0Ch] +
push edx  +
push eax  +
push ecx  +
lea eax [ebp-28h] +
push eax  +
call sub_109E2B1  +
mov esi [ebp-28h] +
cmp esi [edi+70h] +
jz loc_10A33AA  +
mov eax [ebp+0Ch] +
cmp [esi] eax +
jnz loc_10A33AA  +
push 8000FFFFh  +
push dword ptr [esi+4]  +
lea eax [ebp-48h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 7 +
call sub_107B7E5  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A341C  +
mov eax [esi+4] +
mov ecx [ebp+10h] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_10A341C  +
and dword ptr [ebp-18h] 0 +
lea eax [ebp-18h] +
push eax  +
call sub_10A2BD5  +
mov esi [ebp-18h] +
push 8007000Eh  +
push esi  +
lea eax [ebp-48h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 8 +
call sub_107B7E5  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A341C  +
mov eax [ebp+0Ch] +
mov [esi+3Ch] eax +
mov [ebp-1Ch] eax +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-28h]  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [edi+68h] +
mov [esi+40h] edi +
mov [ebp-18h] esi +
call sub_10239C6  +
mov eax [ebp+10h] +
mov [eax] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 0 +
call sub_109BF1F  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
xor esi esi +
push esi  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtiedcomobject  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
cmp [edi] esi +
jnz loc_10A352F  +
lea eax [ebp+10h] +
push eax  +
mov [ebp+10h] esi +
call sub_10A2C6C  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A34D9  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A353C  +
cmp [ebp+10h] esi +
jnz loc_10A34EE  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10A3532  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10A02BA  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A352F  +
lea eax [ebp+10h] +
push eax  +
mov ecx edi +
call sub_109D757  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10A3578  +
mov eax 80004003h +
jmp loc_10A35E6  +
push 78h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_10A35A4  +
push esi  +
call sub_10A2D03  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_10A35BA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10A35B4 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10A35DF  +
lea ecx [esi+20h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10A35D2  +
xor ebx ebx +
test ebx ebx +
jz loc_10A35E2  +
lea ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor esi esi +
jmp loc_10A35E2  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10A360F  +
mov eax 80004003h +
jmp loc_10A367D  +
push 54h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_10A363B  +
push esi  +
call sub_10A2E7B  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_10A3651  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10A364B +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10A3676  +
lea ecx [esi+20h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10A3669  +
xor ebx ebx +
test ebx ebx +
jz loc_10A3679  +
lea ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor esi esi +
jmp loc_10A3679  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCnodesScenumne  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
push ebx  +
push esi  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call sub_109C78D  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A3717  +
push ebx  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
mov [ebp-10h] ebx +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
mov byte ptr [ebp+0Fh] 0 +
test al al +
jz loc_10A371A  +
mov [ebp+0Fh] bl +
mov [ebp-4] ebx +
test [ebp-10h] bl +
jz loc_10A372E  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
lea ecx [ebp-34h] +
call sub_109BF1F  +
cmp byte ptr [ebp+0Fh] 0 +
jz loc_10A3743  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A3793  +
and dword ptr [ebp-14h] 0 +
lea eax [ebp-14h] +
push eax  +
push dword ptr [esi]  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
call sub_10A31C1  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A3786  +
mov eax [ebp+10h] +
mov ecx [ebp-14h] +
mov [eax] ecx +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or dword ptr [ebp-10h] 2 +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call sub_109BF1F  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCnodesItem  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
mov esi 80070057h +
push esi  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A387A  +
lea ecx [ebp-24h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-24h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_109BF1F  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
cmp [ebp+0Ch] ebx +
mov [edi] ebx +
jg loc_10A388D  +
push esi  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10A3850  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
or dword ptr [ebp+10h] 0FFFFFFFFh +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_109C78D  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push 1  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-34h] +
mov bl al +
mov byte ptr [ebp-4] 1 +
call sub_109BF1F  +
test bl bl +
jz loc_10A38F6  +
push esi  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A3850  +
mov ecx [ebp+8] +
push edi  +
push dword ptr [ebp+10h]  +
lea eax [ebp-34h] +
push eax  +
call sub_10A31C1  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call sub_107B7E5  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_10A3850  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
xor esi esi +
push esi  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_45  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A39E0  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10A3B3C  +
mov eax [ebp+10h] +
mov [eax] esi +
mov eax [ebp+0Ch] +
dec eax  +
cmp eax esi +
mov [ebp-18h] eax +
jl loc_10A3B0A  +
mov ecx [ebp-14h] +
cmp eax [ecx+94h] +
jge loc_10A3B0A  +
mov [ebp+0Ch] esi +
lea eax [ebp+0Ch] +
push eax  +
push ecx  +
lea eax [ebp-3Ch] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_10A346D  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A3A65  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp+0Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
cmp eax esi +
jz loc_10A3B3C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10A3B3C  +
push esi  +
push offset off_10F9254  +
push offset off_10F9224  +
push esi  +
mov esi [ebp+0Ch] +
push esi  +
call __RTDynamicCast  +
add esp 14h +
push 8000FFFFh  +
push eax  +
mov [ebp-1Ch] eax +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 6 +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A3AD2  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test esi esi +
jz loc_10A3B3C  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_10A3B3C  +
mov ecx [ebp-18h] +
mov eax [ebp-1Ch] +
mov [eax+54h] ecx +
mov ecx [ebp-14h] +
add eax 44h +
push eax  +
add ecx 4 +
call sub_102124D  +
mov eax [ebp+10h] +
mov [eax] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
jmp loc_10A3ACA  +
push 345Eh  +
lea eax [ebp-3Ch] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call edi  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
xor esi esi +
push esi  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtiedcomobject  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
cmp [edi] esi +
jnz loc_10A3C4B  +
lea eax [ebp+10h] +
push eax  +
mov [ebp+10h] esi +
call sub_10A355C  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A3BF5  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A3C58  +
cmp [ebp+10h] esi +
jnz loc_10A3C0A  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10A3C4E  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10A02BA  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A3C4B  +
lea eax [ebp+10h] +
push eax  +
mov ecx edi +
call sub_109D6AF  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
xor esi esi +
push esi  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtiedcomobject  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
cmp [edi] esi +
jnz loc_10A3D3A  +
lea eax [ebp+10h] +
push eax  +
mov [ebp+10h] esi +
call sub_10A35F3  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A3CE4  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A3D47  +
cmp [ebp+10h] esi +
jnz loc_10A3CF9  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10A3D3D  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10A02BA  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A3D3A  +
lea eax [ebp+10h] +
push eax  +
mov ecx edi +
call sub_109D72A  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-24h] +
call MFC42u_6466  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcenumerator  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+8] +
mov edi [ebp+10h] +
lea esi [eax+30h] +
mov ecx [esi] +
mov [ebp-1Ch] ecx +
lea ecx [ebp-18h] +
push ecx  +
lea ecx [ebp-44h] +
push ecx  +
lea ecx [eax+8] +
mov [ebp-18h] ebx +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A3EEC  +
mov eax [ebp+14h] +
cmp eax ebx +
jz loc_10A3DF7  +
mov [eax] ebx +
mov eax [ebp+0Ch] +
cmp eax ebx +
jbe loc_10A3E15  +
mov ebx [ebp+10h] +
mov [ebp+8] eax +
push ebx  +
call VariantInit  +
add ebx 10h +
dec dword ptr [ebp+8]  +
jnz loc_10A3E04  +
xor ebx ebx +
mov [ebp-14h] ebx +
cmp [ebp+0Ch] ebx +
jbe loc_10A3F10  +
mov [ebp-10h] ebx +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_100A5E6  +
mov ecx [ebp-18h] +
push eax  +
push esi  +
lea eax [ebp-54h] +
push eax  +
call sub_10A368A  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call sub_107B7E5  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A3EDB  +
push 1  +
lea ecx [ebp-44h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea eax [ebp-44h] +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 5 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-44h] +
mov [ebp+0Bh] al +
mov byte ptr [ebp-4] 3 +
call sub_107CE42  +
cmp byte ptr [ebp+0Bh] 0 +
mov eax [ebp-10h] +
jnz loc_10A3EBD  +
cmp eax ebx +
jz loc_10A3ECD  +
inc dword ptr [ebp-14h]  +
push 9  +
pop ecx  +
mov [edi+8] eax +
mov eax [ebp-14h] +
mov [edi] cx +
add edi 10h +
mov byte ptr [ebp-4] 1 +
cmp eax [ebp+0Ch] +
jnb loc_10A3F10  +
jmp loc_10A3E21  +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_10A3F10  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10A3F10  +
push 8000FFFFh  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_10A3EEC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+0Ch] +
cmp eax ebx +
jbe loc_10A3F08  +
mov edi [ebp+10h] +
mov [ebp+0Ch] eax +
push edi  +
call VariantClear  +
add edi 10h +
dec dword ptr [ebp+0Ch]  +
jnz loc_10A3EF9  +
mov eax [ebp-1Ch] +
mov [esi] eax +
mov [ebp-14h] ebx +
mov eax [ebp+14h] +
cmp eax ebx +
jz loc_10A3F1C  +
mov ecx [ebp-14h] +
mov [eax] ecx +
lea ecx [ebp-34h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-34h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_107CE42  +
mov eax [ebp-20h] +
mov ecx [ebp-24h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A3FC6  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10A04FF  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
push [ebp+arg_8]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [ebp+var_2C] +
push eax  +
call sub_10A395F  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10A3FA3  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-14h] edi +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_48  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A4071  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A4144  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_10A4085  +
add edi 188h +
jmp loc_10A408B  +
add edi 184h +
cmp dword ptr [edi] 0 +
jnz loc_10A412A  +
push edi  +
push dword ptr [ebp-14h]  +
lea eax [ebp-38h] +
push eax  +
call sub_10A3B89  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A4137  +
mov eax [edi] +
push 0  +
push offset off_10F92B0  +
push offset off_10F910C  +
push 0  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
push 8000FFFFh  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A4137  +
mov cl [ebp+0Ch] +
mov eax [ebp-18h] +
mov [eax+64h] cl +
mov ecx [ebp-14h] +
add eax 54h +
push eax  +
add ecx 4 +
call sub_102124D  +
mov eax [edi] +
mov ecx [ebp+10h] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-14h] edi +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_46  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A4225  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A42AF  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
add edi 18Ch +
push edi  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push eax  +
call sub_10A3C78  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A42A2  +
mov eax [edi] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A42A2  +
mov edi [edi] +
mov eax [ebp+0Ch] +
mov [eax] edi +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-18h] ecx +
xor esi esi +
push esi  +
lea ecx [ebp-28h] +
mov [ebp-14h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_54  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
mov [edi] esi +
mov esi [ebp+0Ch] +
inc dword ptr [esi]  +
mov eax [esi] +
jns loc_10A436F  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_10A4402  +
mov ecx [ebp-18h] +
cmp eax [ecx+94h] +
jl loc_10A4390  +
push ebx  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A4367  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_100A5E6  +
mov ecx [ebp-18h] +
push eax  +
mov eax [esi] +
inc eax  +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_10A395F  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
jnz loc_10A43E5  +
mov eax [ebp-10h] +
and dword ptr [ebp-10h] 0 +
mov [edi] eax +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
mov [ebp-14h] ebx +
test eax eax +
jz loc_10A4402  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-24h] +
call MFC42u_6466  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcenumerator  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+8] +
mov edi [ebp+10h] +
lea esi [eax+30h] +
mov ecx [esi] +
mov [ebp-1Ch] ecx +
lea ecx [ebp-18h] +
push ecx  +
lea ecx [ebp-44h] +
push ecx  +
lea ecx [eax+8] +
mov [ebp-18h] ebx +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call sub_107B7E5  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A45DE  +
mov eax [ebp+14h] +
cmp eax ebx +
jz loc_10A44E9  +
mov [eax] ebx +
mov eax [ebp+0Ch] +
cmp eax ebx +
jbe loc_10A4507  +
mov ebx [ebp+10h] +
mov [ebp+8] eax +
push ebx  +
call VariantInit  +
add ebx 10h +
dec dword ptr [ebp+8]  +
jnz loc_10A44F6  +
xor ebx ebx +
mov [ebp-14h] ebx +
cmp [ebp+0Ch] ebx +
jbe loc_10A4602  +
mov [ebp-10h] ebx +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_100A5E6  +
mov ecx [ebp-18h] +
push eax  +
push esi  +
lea eax [ebp-54h] +
push eax  +
call sub_10A430F  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call sub_107B7E5  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A45CD  +
push 1  +
lea ecx [ebp-44h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea eax [ebp-44h] +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 5 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-44h] +
mov [ebp+0Bh] al +
mov byte ptr [ebp-4] 3 +
call sub_107CE42  +
cmp byte ptr [ebp+0Bh] 0 +
mov eax [ebp-10h] +
jnz loc_10A45AF  +
cmp eax ebx +
jz loc_10A45BF  +
inc dword ptr [ebp-14h]  +
push 9  +
pop ecx  +
mov [edi+8] eax +
mov eax [ebp-14h] +
mov [edi] cx +
add edi 10h +
mov byte ptr [ebp-4] 1 +
cmp eax [ebp+0Ch] +
jnb loc_10A4602  +
jmp loc_10A4513  +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_10A4602  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10A4602  +
push 8000FFFFh  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_10A45DE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+0Ch] +
cmp eax ebx +
jbe loc_10A45FA  +
mov edi [ebp+10h] +
mov [ebp+0Ch] eax +
push edi  +
call VariantClear  +
add edi 10h +
dec dword ptr [ebp+0Ch]  +
jnz loc_10A45EB  +
mov eax [ebp-1Ch] +
mov [esi] eax +
mov [ebp-14h] ebx +
mov eax [ebp+14h] +
cmp eax ebx +
jz loc_10A460E  +
mov ecx [ebp-14h] +
mov [eax] ecx +
lea ecx [ebp-34h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-34h] +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call sub_107CE42  +
mov eax [ebp-20h] +
mov ecx [ebp-24h] +
mov [eax+4] ecx +
mov eax esi +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_47  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push 0  +
push eax  +
mov ecx edi +
call sub_10A3FF1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_10A46B4  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A46BA  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCcclistview_49  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push ebx  +
push eax  +
mov ecx esi +
call sub_10A3FF1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_10A4795  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A479B  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov eax ds:?classCMDIChildWnd@CMDIChildWnd@@2UCRuntimeClass@@B +
retn   +
***
mov ecx dword_10F5304 +
xor al al +
test ecx ecx +
jz locret_10A483A  +
inc al  +
cmp dword_10F55CC 0 +
jz locret_10A483A  +
mov ecx [ecx+10Ch] +
shr ecx 3 +
not cl  +
test cl al +
jnz locret_10A483A  +
xor al al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+8] +
push esi  +
mov esi [edx] +
call sub_10A4812  +
movzx eax al +
push eax  +
mov ecx edx +
call dword ptr [esi]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
mov esi ecx +
mov dword ptr [ebp-2Ch] 2Ch +
call ?GetWindowPlacement@CWnd@@QBEHPAUtagWINDOWPLACEMENT@@@Z  +
xor eax eax +
cmp dword ptr [ebp+8] 339Bh +
setz al  +
lea eax [eax+eax+1] +
cmp [ebp-24h] eax +
jz loc_10A48A0  +
mov [ebp-24h] eax +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call ?SetWindowPlacement@CWnd@@QAEHPBUtagWINDOWPLACEMENT@@@Z  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi dword_10F5304 +
push edi  +
mov ebx ecx +
test esi esi +
jz loc_10A493D  +
lea eax [ebp-4] +
push eax  +
mov ecx esi +
xor edi edi +
call sub_102B490  +
cmp [ebp-4] edi +
jz loc_10A48FC  +
lea eax [ebp-4] +
push eax  +
mov ecx esi +
call sub_102B4EB  +
test eax eax +
jz loc_10A48E6  +
inc edi  +
cmp edi 2 +
jge loc_10A48EC  +
cmp dword ptr [ebp-4] 0 +
jnz loc_10A48D1  +
cmp edi 1 +
jnz loc_10A48FC  +
call sub_1051397  +
test al al +
jnz loc_10A493D  +
jmp loc_10A4944  +
mov esi [ebx+228h] +
test esi esi +
jz loc_10A493D  +
mov edi dword_10F5304 +
mov ecx esi +
call sub_100EC0C  +
test al al +
jz loc_10A4936  +
test edi edi +
jz loc_10A4936  +
mov ecx edi +
call sub_104AE6A  +
cmp eax 1 +
jnz loc_10A4936  +
push 10h  +
push 33F8h  +
call ds:?MMCErrorBox@@YGHII@Z  +
jmp loc_10A4944  +
mov ecx esi +
call sub_108DAE6  +
mov ecx ebx +
call ?OnClose@CFrameWnd@@IAEXXZ  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [eax+228h] +
sub esp 10h +
test ecx ecx +
jz locret_10A497C  +
movzx eax byte ptr [eax+231h] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_108227F  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov dl [ebp+arg_0] +
add ecx 233h +
mov al [ecx] +
mov [ecx] dl +
pop ebp  +
retn 4  +
***
mov ecx [ecx] +
test ecx ecx +
jz locret_10A49AD  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+1Ch]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push 0  +
push dword ptr [eax+20h]  +
push 222h  +
push dword ptr [ecx+0C0h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov eax [ecx+228h] +
test eax eax +
jz locret_10A49F9  +
mov ecx [eax+0D8h] +
mov edx [ecx] +
add eax 1F8h +
push eax  +
push ecx  +
call dword ptr [edx+0B0h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+10h] 0 +
push esi  +
mov esi ecx +
jz loc_10A4A27  +
cmp dword_10F55CC 3 +
jnz loc_10A4A27  +
push 0  +
push 0  +
push 1Fh  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
jmp loc_10A4A5B  +
push edi  +
push dword ptr [ebp+10h]  +
mov edi [ebp+8] +
push dword ptr [ebp+0Ch]  +
push edi  +
call ?OnInitMenuPopup@CFrameWnd@@IAEXPAVCMenu@@IH@Z  +
cmp dword ptr [ebp+10h] 0 +
jz loc_10A4A5A  +
mov ecx esi +
call sub_10A4812  +
xor ecx ecx +
test al al +
setz cl  +
push ecx  +
push 33AFh  +
push dword ptr [edi+4]  +
call ds:EnableMenuItem  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 33AFh +
push esi  +
push edi  +
mov edi ecx +
jz loc_10A4B06  +
sub eax 0BC91h +
jz loc_10A4AF5  +
sub eax 10h +
jz loc_10A4AF5  +
sub eax 10h +
jnz loc_10A4AFE  +
mov esi 0F060h +
cmp [edi+235h] al +
jnz loc_10A4AE8  +
cmp dword_10F55CC 3 +
jz loc_10A4B0B  +
push eax  +
call sub_102132D  +
test eax eax +
jnz loc_10A4AD3  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A4B0B  +
cmp byte ptr [eax+19h] 2 +
jb loc_10A4B0B  +
push offset dword_106C6B0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10A4B0B  +
push 0  +
push esi  +
push dword ptr [eax+4]  +
call ds:GetMenuState  +
cmp eax 0FFFFFFFFh +
jz loc_10A4B0B  +
test al 3 +
jnz loc_10A4B0B  +
push [ebp+arg_4]  +
mov ecx edi +
push esi  +
call ?OnSysCommand@CFrameWnd@@IAEXIJ@Z  +
jmp loc_10A4B0B  +
cmp dword_10F55CC 3 +
jz loc_10A4B0B  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
jmp loc_10A4AEE  +
call sub_10A49DA  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
xor edx edx +
lea ecx [esi+0E8h] +
cmp [ecx+20h] edx +
mov eax [ecx] +
setz dl  +
push edx  +
call dword ptr [eax+4]  +
mov ecx esi +
call sub_1011496  +
cmp dword ptr [esi+108h] 0 +
jz loc_10A4B47  +
mov ecx esi +
pop esi  +
jmp sub_100C885  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+23Ch] 0 +
push esi  +
push edi  +
jnz loc_10A4B8A  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A4C8E  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A4C8E  +
push offset dword_106C6B0  +
push 0Fh  +
jmp loc_10A4C83  +
and [ebp+ppvObject] 0 +
lea eax [ebp+ppvObject] +
push eax  +
push offset stru_106B618  +
push 0FFFFFFFEh  +
push dword ptr [ebx+20h]  +
call AccessibleObjectFromWindow  +
test eax eax +
jnz loc_10A4C6A  +
mov eax [ebp+ppvObject] +
test eax eax +
jz loc_10A4C6A  +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jz loc_10A4BE8  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A4C8E  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A4C8E  +
push offset dword_106C6B0  +
push 11h  +
jmp loc_10A4C83  +
xor eax eax +
inc eax  +
cmp [ebp+var_C] eax +
mov [ebp+var_4] eax +
jl loc_10A4C8E  +
push dword ptr [ebx+20h]  +
call ds:IsZoomed  +
test eax eax +
jz loc_10A4C42  +
push 3  +
pop eax  +
sub esp 10h +
mov edi esp +
mov word ptr [ebp+var_1C] ax +
mov [ebp+var_14] 8000h +
mov eax [ebx+23Ch] +
lea esi [ebp+var_1C] +
movs   +
movs   +
mov ecx [eax] +
movs   +
sub esp 10h +
movs   +
mov edi esp +
push [ebp+var_4]  +
mov esi offset dword_1012D58 +
movs   +
movs   +
push 0FFFFFFFEh  +
push dword ptr [ebx+20h]  +
movs   +
push eax  +
movs   +
call dword ptr [ecx+18h]  +
jmp loc_10A4C5D  +
mov eax [ebx+23Ch] +
mov ecx [eax] +
push 1  +
push offset dword_1012D58  +
push [ebp+var_4]  +
push 0FFFFFFFEh  +
push dword ptr [ebx+20h]  +
push eax  +
call dword ptr [ecx+24h]  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebp+var_C] +
jg loc_10A4C8E  +
jmp loc_10A4BF7  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A4C8E  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A4C8E  +
push offset dword_106C6B0  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push 20h  +
mov eax offset dword_10DC41C +
call sub_1001F95  +
mov ebx ecx +
xor edi edi +
push edi  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCchildframeOng  +
lea ecx [ebp-1Ch] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebp+0Ch] 0FFFFFFFCh +
jz loc_10A4CFA  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A4D9D  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A4D9D  +
push offset dword_106C6B0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10A4D9D  +
lea esi [ebx+23Ch] +
cmp [esi] edi +
jnz loc_10A4D3B  +
push esi  +
push offset stru_103761C  +
push 17h  +
push edi  +
push offset stru_10375FC  +
call ds:CoCreateInstance  +
cmp eax edi +
jnz loc_10A4D20  +
cmp [esi] edi +
jnz loc_10A4D3B  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A4D9D  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A4D9D  +
push offset dword_106C6B0  +
push 0Eh  +
jmp loc_10A4CEA  +
***
push dword ptr [ebx+20h]  +
call ds:IsZoomed  +
test eax eax +
jz loc_10A4D81  +
push 3  +
pop eax  +
sub esp 10h +
mov [ebp-2Ch] ax +
mov eax [esi] +
mov edi esp +
mov dword ptr [ebp-24h] 8000h +
lea esi [ebp-2Ch] +
movs   +
movs   +
mov ecx [eax] +
movs   +
sub esp 10h +
movs   +
mov edi esp +
mov esi offset dword_1012D58 +
movs   +
movs   +
push 0  +
push 0FFFFFFFEh  +
push dword ptr [ebx+20h]  +
movs   +
push eax  +
movs   +
call dword ptr [ecx+18h]  +
jmp loc_10A4D96  +
mov esi [esi] +
mov eax [esi] +
push 1  +
push offset dword_1012D58  +
push edi  +
push 0FFFFFFFEh  +
push dword ptr [ebx+20h]  +
push esi  +
call dword ptr [eax+24h]  +
mov ecx ebx +
call sub_10A4B4E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 10h  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
jmp ??1CToolBarCtrl@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
setnz al  +
mov [ecx+40h] al +
call ?Default@CWnd@@IAEJXZ  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
call sub_10C1F48  +
push eax  +
mov ecx edi +
call dword ptr [esi+0D0h]  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
call sub_10C1F48  +
push eax  +
mov ecx edi +
call dword ptr [esi+0D4h]  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test byte ptr [eax+9] 1 +
jz loc_10A4EF2  +
mov al 1 +
jmp loc_10A4F00  +
mov al [eax+8] +
test al 8 +
jnz loc_10A4EEE  +
shr al 2 +
not al  +
and al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_10A4F2B  +
push esi  +
push edi  +
mov esi [ebp+arg_8] +
mov edi eax +
movs   +
movs   +
movs   +
add eax 10h +
movs   +
cmp eax [ebp+arg_4] +
jnz loc_10A4F18  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp [ebp+arg_0] eax +
jz loc_10A4F58  +
push esi  +
push edi  +
sub [ebp+arg_8] 10h +
mov edi [ebp+arg_8] +
sub eax 10h +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
cmp eax [ebp+arg_0] +
jnz loc_10A4F41  +
pop edi  +
pop esi  +
mov eax [ebp+arg_8] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov ecx [ebp+arg_4] +
push edi  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov esi ecx +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
mov edi ecx +
mov ecx [ebp+var_4] +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CToolBarCtrl@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10A4FC5  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push eax  +
push [ebp+wParam]  +
push 403h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10A5004  +
mov eax [eax+20h] +
push 0  +
push eax  +
push 425h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
pop ebp  +
retn 4  +
***
push 447h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 448h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10035B4 +
call ??1CToolBarCtrl@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10A507D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10036E4 +
call ??1CWnd@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10A50A9  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
call ?OnSysColorChange@CWnd@@IAEXXZ  +
mov esi ds:GetSysColor +
push 12h  +
call esi  +
push eax  +
mov ecx edi +
call sub_103F310  +
push 0Fh  +
call esi  +
push eax  +
mov ecx edi +
call sub_1040A3E  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+14h] +
push dword ptr [esi+4]  +
mov ecx edi +
call sub_1009FEC  +
and eax 0FFEEFFFDh +
cmp dword ptr [ebp+8] 1 +
jnz loc_10A510E  +
or eax 10002h +
jmp loc_10A5119  +
cmp dword ptr [ebp+8] 2 +
jnz loc_10A5119  +
or eax 100000h +
push eax  +
push dword ptr [esi+4]  +
mov ecx edi +
call sub_100A38A  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
test byte ptr dword_10FD590 1 +
mov esi offset unk_10FD588 +
jnz loc_10A516D  +
or dword_10FD590 1 +
and dword ptr [ebp-4] 0 +
push 6  +
push offset stru_10FCE20  +
mov ecx esi +
call sub_10C7395  +
push offset loc_10E80A9  +
call sub_100BFD5  +
pop ecx  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:GetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov ecx esi +
cmp eax esi +
jnz loc_10A5198  +
call sub_10A4EC2  +
jmp loc_10A519D  +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp byte ptr [esi+64h] 0 +
jnz loc_10A51F8  +
mov eax [esi] +
mov byte ptr [esi+64h] 1 +
call dword ptr [eax+0CCh]  +
push eax  +
mov ecx esi +
call sub_10A503C  +
push dword ptr [esi+20h]  +
call ds:SetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 7F00h  +
push 0  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10A51F8  +
push esi  +
call sub_10C212B  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_10A5024  +
lea ecx [ebp-18h] +
push ecx  +
push eax  +
mov ecx esi +
call sub_100940C  +
push 1  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_10A4FD1  +
push dword ptr [esi+20h]  +
mov edi ds:UpdateWindow +
call edi  +
push 32h  +
call ds:Sleep  +
mov ebx [esi+20h] +
push 0  +
mov ecx esi +
call sub_10A4FF5  +
push eax  +
mov ecx esi +
mov [ebp-1Ch] eax +
call sub_10A4FF5  +
push 0  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_10A4FD1  +
mov ecx esi +
call sub_10A4EC2  +
push ebx  +
call edi  +
movzx eax word ptr [ebp-14h] +
push ebx  +
push eax  +
mov eax [ebp-1Ch] +
push 111h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
call sub_100940C  +
lea eax [ebp+lParam] +
push eax  +
call sub_10A4EE0  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002492  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_10C1F48  +
mov [ebp+var_4] eax +
mov eax lpDst +
mov esi [ebp+arg_0] +
mov ebx offset lpDst +
cmp eax ebx +
jz loc_10A531D  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A531D  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push offset dword_106C6C0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
xor ecx ecx +
cmp [ebp+var_4] ecx +
jnz loc_10A532B  +
mov eax [ebp+arg_4] +
mov [eax] ecx +
jmp loc_10A534D  +
cmp [edi+64h] cl +
jnz loc_10A533B  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 1 +
jmp loc_10A534D  +
mov eax [esi+14h] +
and eax 21h +
xor edx edx +
cmp al 21h +
mov eax [ebp+arg_4] +
setz dl  +
mov [eax] edx +
cmp [edi+64h] cl +
jz loc_10A53A7  +
cmp [eax] ecx +
jnz loc_10A53A7  +
mov esi [esi+10h] +
cmp esi ecx +
jz loc_10A53A7  +
push esi  +
mov ecx edi +
call sub_1015C07  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_10A53A7  +
mov eax lpDst +
cmp eax ebx +
jz loc_10A5391  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A5391  +
lea ecx [esi+1] +
push ecx  +
push offset dword_106C6C0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
inc esi  +
push esi  +
push 0FFFFFFFCh  +
push dword ptr [edi+20h]  +
push 8005h  +
call ds:NotifyWinEvent  +
mov byte ptr [edi+65h] 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmctoolbarctr  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+18h] +
push 4  +
pop ecx  +
mov edi offset dword_1012D58 +
xor eax eax +
cmps   +
jnz loc_10A54DC  +
mov esi [ebp+14h] +
test esi esi +
jnz loc_10A5437  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A5425  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A5425  +
push offset dword_106C6C0  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A54E9  +
mov ecx [ebp-14h] +
cmp [ecx+64h] al +
jnz loc_10A546D  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A54DC  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A54DC  +
push offset dword_106C6C0  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10A54DC  +
call sub_10A5024  +
dec esi  +
cmp eax esi +
jz loc_10A54A0  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10A54DC  +
cmp byte ptr [ecx+19h] 5 +
jb loc_10A54DC  +
push eax  +
push offset dword_106C6C0  +
push 16h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10A54DC  +
mov ecx [ebp+1Ch] +
push 3  +
pop eax  +
mov [ecx] ax +
mov eax [ebp+20h] +
mov dword ptr [ecx+8] 100084h +
mov [eax] ebx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A54DC  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A54DC  +
push dword ptr [ecx+8]  +
push offset dword_106C6C0  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 1Ch  +
***
and dword ptr [ecx+4] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10A4F32  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_8] +
jz loc_10A5565  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
add [ebp+arg_C] 10h +
add eax 10h +
cmp eax [ebp+arg_8] +
jnz loc_10A554E  +
pop edi  +
pop esi  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+0Ch]  +
mov esi ecx +
push dword ptr [ebp+8]  +
call ?OnSettingChange@CWnd@@IAEXIPBG@Z  +
cmp dword ptr [ebp+8] 2Ah +
jnz loc_10A559B  +
mov ecx esi +
call sub_101AA9D  +
mov ecx esi +
call sub_1034C62  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jnz loc_10A55B8  +
neg [ebp+arg_4]  +
call sub_1015912  +
mov edi eax +
mov eax [ebp+arg_0] +
mov esi eax +
test edi edi +
jz loc_10A5609  +
lea eax [esi+edi] +
add eax [ebp+arg_4] +
mov ecx ebx +
cdq   +
idiv  edi +
mov esi edx +
push esi  +
call sub_10A52A1  +
test al al +
jz loc_10A55EE  +
xor ecx ecx +
cmp [ebp+arg_8] cl +
setnz cl  +
lea ecx [ecx+ecx-1] +
mov [ebp+arg_4] ecx +
cmp [ebp+arg_0] 0FFFFFFFFh +
jnz loc_10A55FE  +
lea ecx [edi-1] +
cmp esi ecx +
jnz loc_10A55FE  +
or esi 0FFFFFFFFh +
test al al +
jz loc_10A5607  +
cmp esi [ebp+arg_0] +
jnz loc_10A55C8  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
call sub_1001F95  +
mov ebx ecx +
mov [ebp-1Ch] ebx +
xor edi edi +
push edi  +
lea ecx [ebp-2Ch] +
mov [ebp-14h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCmmctoolbarc_1  +
lea ecx [ebp-2Ch] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [ebx+65h] 0 +
jnz loc_10A5664  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] esi +
jmp loc_10A57EF  +
call ds:GetFocus  +
mov ebx eax +
cmp ebx edi +
jnz loc_10A567F  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A565C  +
mov [ebp-10h] edi +
mov [ebp-18h] edi +
lea eax [ebp-18h] +
push eax  +
push offset stru_106B618  +
push 0FFFFFFFCh  +
push ebx  +
mov byte ptr [ebp-4] 2 +
call AccessibleObjectFromWindow  +
mov esi offset dword_106C6C0 +
cmp eax edi +
jnz loc_10A576B  +
xor eax eax +
lea edi [ebp-3Ch] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp-3Ch] ax +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-3Ch] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 3 +
call dword ptr [ecx+48h]  +
mov edi offset lpDst +
test eax eax +
jnz loc_10A573D  +
movzx ecx word ptr [ebp-3Ch] +
test ecx ecx +
jz loc_10A571E  +
cmp ecx 3 +
jz loc_10A5716  +
cmp ecx 9 +
jz loc_10A5702  +
mov eax lpDst +
cmp eax edi +
jz loc_10A575D  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A575D  +
push ecx  +
push esi  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10A575D  +
mov eax lpDst +
cmp eax edi +
jz loc_10A575D  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A575D  +
push esi  +
push 19h  +
jmp loc_10A5730  +
mov eax [ebp-34h] +
mov [ebp-10h] eax +
jmp loc_10A575D  +
mov eax lpDst +
cmp eax edi +
jz loc_10A575D  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A575D  +
push esi  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10A575D  +
mov ecx lpDst +
cmp ecx edi +
jz loc_10A575D  +
cmp byte ptr [ecx+19h] 5 +
jb loc_10A575D  +
push eax  +
push ebx  +
push esi  +
push 1Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call sub_100EBF1  +
jmp loc_10A5790  +
mov ecx lpDst +
mov edi offset lpDst +
cmp ecx edi +
jz loc_10A57B2  +
cmp byte ptr [ecx+19h] 5 +
jb loc_10A5796  +
push eax  +
push ebx  +
push esi  +
push 1Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
mov ecx lpDst +
cmp ecx edi +
jz loc_10A57B2  +
cmp byte ptr [ecx+19h] 5 +
jb loc_10A57B2  +
push dword ptr [ebp-10h]  +
push ebx  +
push esi  +
push 1Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
push dword ptr [ebp-10h]  +
push 0FFFFFFFCh  +
push ebx  +
push 8005h  +
call ds:NotifyWinEvent  +
mov eax [ebp-1Ch] +
mov ecx [ebp+8] +
mov byte ptr [eax+65h] 0 +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-18h] +
mov dword ptr [ebp-14h] 1 +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10A57EF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10A553F  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
sub ecx [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
sub ebx [ebp+arg_0] +
sar ecx 4 +
sar ebx 4 +
push esi  +
mov [ebp+var_18] ecx +
mov esi ebx +
test ebx ebx +
jz loc_10A58C7  +
mov eax [ebp+var_18] +
cdq   +
idiv  esi +
mov [ebp+var_18] esi +
mov esi edx +
test edx edx +
jnz loc_10A58B8  +
cmp [ebp+var_18] ecx +
jge loc_10A5975  +
cmp [ebp+var_18] 0 +
jle loc_10A5975  +
mov ecx [ebp+var_18] +
mov [ebp+var_1C] ebx +
shl [ebp+var_1C] 4 +
shl ecx 4 +
mov [ebp+var_24] ecx +
push edi  +
mov eax [ebp+arg_0] +
lea edx [ecx+eax] +
mov eax [ebp+var_1C] +
mov esi edx +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
add eax edx +
mov [ebp+var_20] edx +
movs   +
cmp eax [ebp+arg_8] +
jnz loc_10A590C  +
lea eax [ebp+arg_0] +
jmp loc_10A5912  +
mov [ebp+var_30] eax +
lea eax [ebp+var_30] +
mov eax [eax] +
cmp eax edx +
jz loc_10A5957  +
mov edi [ebp+var_20] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
mov ecx [ebp+arg_8] +
sub ecx eax +
sar ecx 4 +
cmp ebx ecx +
mov [ebp+var_20] eax +
jge loc_10A593D  +
mov ecx [ebp+var_1C] +
add ecx eax +
mov [ebp+var_2C] ecx +
lea eax [ebp+var_2C] +
jmp loc_10A594E  +
mov eax [ebp+var_1C] +
shl ecx 4 +
sub eax ecx +
add eax [ebp+arg_0] +
mov [ebp+var_28] eax +
lea eax [ebp+var_28] +
mov eax [eax] +
cmp eax edx +
jnz loc_10A5918  +
mov ecx [ebp+var_24] +
mov edi [ebp+var_20] +
dec [ebp+var_18]  +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
sub ecx 10h +
cmp [ebp+var_18] 0 +
movs   +
mov [ebp+var_24] ecx +
jg loc_10A58EB  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 14h  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmctoolbarc_0  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call sub_10A5615  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A59F0  +
lea ecx [ebp-1Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
cmp [esi+64h] bl +
jz loc_10A5A14  +
push 0FFFFFFFFh  +
mov ecx esi +
call sub_10A503C  +
mov [esi+64h] bl +
call ds:ReleaseCapture  +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_10A5A14  +
push ebx  +
call sub_10C212B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10A55A5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10A55A5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
sub ebx [ebp+arg_4] +
sar ebx 4 +
test ebx ebx +
jle loc_10A5AF5  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov eax ebx +
cdq   +
sub eax edx +
mov edi eax +
sar edi 1 +
mov esi edi +
shl esi 4 +
add esi [ebp+arg_4] +
push esi  +
call sub_1038A5D  +
test al al +
jz loc_10A5AED  +
or eax 0FFFFFFFFh +
add esi 10h +
sub eax edi +
mov [ebp+arg_4] esi +
add ebx eax +
jmp loc_10A5AEF  +
mov ebx edi +
test ebx ebx +
jg loc_10A5AC0  +
pop edi  +
pop esi  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_1038A5D  +
test al al +
jz loc_10A5B26  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_10A4F62  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
call sub_1038A5D  +
test al al +
jz loc_10A5B40  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
call sub_10A4F62  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_1038A5D  +
test al al +
jz loc_10A5B5A  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_10A4F62  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10A5889  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
lea esi [ebp+arg_C] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+arg_4] +
lea eax [edi-1] +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
jmp loc_10A5BE0  +
mov ecx [ebp+arg_0] +
mov eax ebx +
shl eax 4 +
lea esi [eax+ecx] +
lea eax [ebp+var_14] +
push eax  +
push esi  +
call sub_1038A5D  +
test al al +
jz loc_10A5BE5  +
shl edi 4 +
add edi [ebp+arg_0] +
lea eax [ebx-1] +
movs   +
movs   +
movs   +
cdq   +
sub eax edx +
movs   +
sar eax 1 +
mov edi ebx +
mov ebx eax +
cmp [ebp+arg_8] edi +
jl loc_10A5BB1  +
mov ecx [ebp+var_4] +
shl edi 4 +
add edi [ebp+arg_0] +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 1Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+50h] 0 +
push 1  +
jz loc_10A5C24  +
call sub_10A5024  +
push eax  +
mov ecx esi +
call sub_10A5A90  +
jmp loc_10A5C31  +
call sub_10A5024  +
push eax  +
mov ecx esi +
call sub_10A5A75  +
push eax  +
mov ecx esi +
call sub_10A503C  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+50h] 0 +
push 1  +
jz loc_10A5C5C  +
call sub_10A5024  +
push eax  +
mov ecx esi +
call sub_10A5A75  +
jmp loc_10A5C69  +
call sub_10A5024  +
push eax  +
mov ecx esi +
call sub_10A5A90  +
push eax  +
mov ecx esi +
call sub_10A503C  +
pop esi  +
retn   +
***
call sub_10A5A75  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10A5AAB  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
sub eax ecx +
sar eax 4 +
cmp eax 28h +
jle loc_10A5D22  +
inc eax  +
cdq   +
push esi  +
and edx 7 +
add eax edx +
push edi  +
sar eax 3 +
mov edi eax +
mov esi eax +
shl edi 5 +
lea edx [edi+ecx] +
shl esi 4 +
push edx  +
lea eax [esi+ecx] +
push eax  +
push ecx  +
call sub_10A5B07  +
mov ecx [ebp+arg_4] +
lea edx [esi+ecx] +
push edx  +
mov eax ecx +
sub eax esi +
push ecx  +
push eax  +
call sub_10A5B07  +
mov eax [ebp+arg_8] +
push [ebp+arg_8]  +
mov ecx [ebp+arg_8] +
sub eax esi +
sub ecx edi +
push eax  +
push ecx  +
call sub_10A5B07  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
sub eax esi +
push eax  +
push [ebp+arg_4]  +
add ecx esi +
push ecx  +
call sub_10A5B07  +
pop edi  +
pop esi  +
jmp loc_10A5D2E  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
call sub_10A5B07  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp [ebp+arg_0] eax +
jz loc_10A5D58  +
cmp eax [ebp+arg_8] +
jz loc_10A5D58  +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_0]  +
call sub_10A5B63  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
lea esi [ebp+arg_C] +
lea edi [ebp+var_14] +
mov [ebp+var_18] eax +
lea ebx [eax+eax+2] +
jmp loc_10A5DB9  +
mov edi [ebp+arg_0] +
mov eax ebx +
shl eax 4 +
add eax edi +
lea ecx [eax-10h] +
push ecx  +
push eax  +
call sub_1038A5D  +
test al al +
jz loc_10A5DA1  +
dec ebx  +
mov eax [ebp+arg_4] +
mov esi ebx +
shl esi 4 +
add esi edi +
shl eax 4 +
add eax edi +
mov [ebp+arg_4] ebx +
mov edi eax +
lea ebx [ebx+ebx+2] +
cmp ebx [ebp+arg_8] +
movs   +
movs   +
movs   +
movs   +
jl loc_10A5D88  +
jnz loc_10A5DE4  +
mov eax [ebp+arg_0] +
mov edi [ebp+arg_4] +
mov ecx [ebp+arg_8] +
shl edi 4 +
add edi eax +
shl ecx 4 +
lea esi [ecx+eax-10h] +
mov eax [ebp+arg_8] +
movs   +
movs   +
movs   +
dec eax  +
movs   +
mov [ebp+arg_4] eax +
sub esp 10h +
mov edi esp +
push [ebp+var_18]  +
lea esi [ebp+var_14] +
push [ebp+arg_4]  +
movs   +
push [ebp+arg_0]  +
movs   +
movs   +
movs   +
call sub_10A5B83  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
lea esi [ebp+arg_C] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+arg_0] +
mov edi [ebp+arg_8] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_14] +
movs   +
movs   +
sar eax 4 +
push eax  +
movs   +
push 0  +
push [ebp+arg_0]  +
movs   +
call sub_10A5D61  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 20h  +
***
sub ecx 40h +
jmp loc_10A6B15  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
lea esi [ebp+14h] +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
mov [ebp-24h] eax +
mov eax [ebp+0Ch] +
movs   +
mov esi [ebp+24h] +
and dword ptr [ebp-28h] 0 +
mov ebx ecx +
mov [ebp-2Ch] eax +
mov eax [ebp+28h] +
push 0  +
lea ecx [ebp-3Ch] +
mov [ebp-4Ch] ebx +
mov [ebp-48h] esi +
mov [ebp-40h] eax +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCmmctoolbarctr  +
lea ecx [ebp-3Ch] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp-40h]  +
lea eax [ebp-64h] +
push esi  +
push dword ptr [ebp-2Ch]  +
push eax  +
call sub_100CB6E  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A5F28  +
mov ecx [ebp-24h] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A62B0  +
mov eax [ebp-40h] +
and dword ptr [eax] 0 +
mov ecx [ebp-48h] +
xor eax eax +
mov [ecx] ax +
mov eax [ebx+6Ch] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-64h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A62A3  +
mov ebx [ebx+68h] +
mov eax [ebx] +
lea ecx [ebp-44h] +
push ecx  +
lea ecx [ebp-50h] +
push ecx  +
lea ecx [ebp-54h] +
push ecx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-2Ch]  +
push ebx  +
call dword ptr [eax+2Ch]  +
push eax  +
lea ecx [ebp-3Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A62A3  +
mov ebx lpDst +
cmp byte ptr [ebx+19h] 5 +
jb loc_10A621D  +
test byte ptr dword_10FD650 1 +
jnz loc_10A6195  +
or dword_10FD650 edi +
mov dword_10FD598 offset dword_10A62CC +
mov dword_10FD59C offset aPropid_acc_nam +
mov dword_10FD5A0 offset dword_10A62DC +
mov dword_10FD5A4 offset aPropid_acc_val +
mov dword_10FD5A8 offset dword_10A62EC +
mov dword_10FD5AC offset aPropid_acc_des +
mov dword_10FD5B0 offset dword_103A3B0 +
mov dword_10FD5B4 offset aPropid_acc_rol +
mov dword_10FD5B8 offset dword_1012D58 +
mov dword_10FD5BC offset aPropid_acc_sta +
mov dword_10FD5C0 offset dword_10A62FC +
mov dword_10FD5C4 offset aPropid_acc_hel +
mov dword_10FD5C8 offset dword_10A630C +
mov dword_10FD5CC offset aPropid_acc_key +
mov dword_10FD5D0 offset dword_10A631C +
mov dword_10FD5D4 offset aPropid_acc_def +
mov dword_10FD5D8 offset dword_10A632C +
mov dword_10FD5DC offset aPropid_acc_h_0 +
mov dword_10FD5E0 offset dword_10A633C +
mov dword_10FD5E4 offset aPropid_acc_foc +
mov dword_10FD5E8 offset dword_10A634C +
mov dword_10FD5EC offset aPropid_acc_sel +
mov dword_10FD5F0 offset loc_10A635C +
mov dword_10FD5F4 offset aPropid_acc_par +
mov dword_10FD5F8 offset dword_10A636C +
mov dword_10FD5FC offset aPropid_acc_nav +
mov dword_10FD600 offset dword_10A637C +
mov dword_10FD604 offset aPropid_acc_n_0 +
mov dword_10FD608 offset nullsub_5 +
mov dword_10FD60C offset aPropid_acc_n_1 +
mov dword_10FD610 offset dword_10A639C +
mov dword_10FD614 offset aPropid_acc_n_2 +
mov dword_10FD618 offset dword_10A63AC +
mov dword_10FD61C offset aPropid_acc_n_3 +
mov dword_10FD620 offset dword_10A63BC +
mov dword_10FD624 offset aPropid_acc_n_4 +
mov dword_10FD628 offset dword_10A63CC +
mov dword_10FD62C offset aPropid_acc_n_5 +
mov dword_10FD630 offset loc_10A63DC +
mov dword_10FD634 offset aPropid_acc_n_6 +
mov dword_10FD638 offset dword_10A63FC +
mov dword_10FD63C offset aPropid_acc_v_0 +
mov dword_10FD640 offset dword_10A63EC +
mov dword_10FD644 offset aPropid_acc_r_0 +
mov dword_10FD648 offset dword_10A640C +
mov dword_10FD64C offset aPropid_acc_s_0 +
xor eax eax +
mov [ebp-2Ch] eax +
mov esi dword_10FD598[eax*8] +
push 4  +
pop ecx  +
lea edi [ebp-20h] +
xor edx edx +
cmps   +
jz loc_10A61B8  +
inc eax  +
mov [ebp-2Ch] eax +
cmp eax 17h +
jnb loc_10A61EB  +
jmp loc_10A619A  +
cmp ebx offset lpDst +
jz loc_10A61EB  +
cmp byte ptr [ebx+19h] 5 +
jb loc_10A61EB  +
push dword ptr [ebp-44h]  +
push dword_10FD59C[eax*8]  +
push offset dword_106C6C0  +
push 11h  +
push dword ptr [ebx+14h]  +
push dword ptr [ebx+10h]  +
call sub_10701D4  +
mov ebx lpDst +
mov eax [ebp-2Ch] +
cmp eax 17h +
jnz loc_10A621A  +
cmp ebx offset lpDst +
jz loc_10A621A  +
cmp byte ptr [ebx+19h] 5 +
jb loc_10A621A  +
lea eax [ebp-20h] +
push eax  +
push offset dword_106C6C0  +
push 12h  +
push dword ptr [ebx+14h]  +
push dword ptr [ebx+10h]  +
call sub_10A4DFB  +
mov ebx lpDst +
xor edi edi +
inc edi  +
mov esi [ebp-4Ch] +
mov eax [esi+78h] +
mov ecx [esi+74h] +
lea edx [ebp-20h] +
push edx  +
push eax  +
push ecx  +
lea eax [ebp-4Ch] +
push eax  +
call sub_10A5C87  +
mov ecx [esi+78h] +
cmp ecx [eax] +
jnz loc_10A625E  +
cmp ebx offset lpDst +
jz loc_10A62A3  +
cmp byte ptr [ebx+19h] 5 +
jb loc_10A62A3  +
push offset dword_106C6C0  +
push 13h  +
push dword ptr [ebx+14h]  +
push dword ptr [ebx+10h]  +
call sub_106F7C2  +
jmp loc_10A62A3  +
push dword ptr [ebp-40h]  +
mov eax [esi] +
push dword ptr [ebp-48h]  +
lea ecx [ebp-20h] +
push ecx  +
push dword ptr [ebp-44h]  +
lea ecx [ebp-64h] +
push dword ptr [ebp-50h]  +
push dword ptr [ebp-54h]  +
push ecx  +
mov ecx esi +
call dword ptr [eax+0D8h]  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp-24h] +
lea eax [ebp-3Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-3Ch] +
mov [ebp-28h] edi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-24h] +
call sub_100C50D  +
retn 24h  +
***
mov dh 22h +
dec esp  +
inc edi  +
retn 7AFFh  +
***
movs   +
retf 302Eh  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10522A4  +
test byte ptr [ebp+8] 1 +
jz loc_10A67EF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
mov eax ecx +
sub eax [ebp+arg_4] +
sub esp 0Ch +
sar eax 4 +
push ebx  +
push esi  +
cdq   +
sub eax edx +
mov esi eax +
sar esi 1 +
push edi  +
shl esi 4 +
add esi [ebp+arg_4] +
lea eax [ecx-10h] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call sub_10A5CAB  +
lea ebx [esi+10h] +
jmp loc_10A684B  +
push esi  +
lea edi [esi-10h] +
push edi  +
call sub_1038A5D  +
test al al +
jnz loc_10A6850  +
push edi  +
push esi  +
call sub_1038A5D  +
test al al +
jnz loc_10A6850  +
mov esi edi +
cmp [ebp+arg_4] esi +
jb loc_10A6830  +
push 10h  +
pop edi  +
jmp loc_10A686D  +
push esi  +
push ebx  +
call sub_1038A5D  +
test al al +
jnz loc_10A6872  +
push ebx  +
push esi  +
call sub_1038A5D  +
test al al +
jnz loc_10A6872  +
add ebx edi +
cmp ebx [ebp+arg_8] +
jb loc_10A6855  +
mov [ebp+var_4] ebx +
mov [ebp+var_8] esi +
mov eax [ebp+arg_8] +
cmp [ebp+var_4] eax +
jnb loc_10A68B2  +
push [ebp+var_4]  +
push esi  +
call sub_1038A5D  +
test al al +
jnz loc_10A68A7  +
push esi  +
push [ebp+var_4]  +
call sub_1038A5D  +
test al al +
jnz loc_10A68B2  +
push [ebp+var_4]  +
mov eax ebx +
push eax  +
add ebx edi +
call sub_10A4F62  +
add [ebp+var_4] edi +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_8] +
jb loc_10A6880  +
mov eax [ebp+var_8] +
cmp [ebp+arg_4] eax +
jnb loc_10A68F3  +
add eax 0FFFFFFF0h +
mov [ebp+var_C] eax +
push esi  +
push [ebp+var_C]  +
call sub_1038A5D  +
test al al +
jnz loc_10A68E5  +
push [ebp+var_C]  +
push esi  +
call sub_1038A5D  +
test al al +
jnz loc_10A68F3  +
push [ebp+var_C]  +
sub esi edi +
push esi  +
call sub_10A4F62  +
mov eax [ebp+arg_4] +
sub [ebp+var_8] edi +
sub [ebp+var_C] edi +
cmp eax [ebp+var_8] +
jb loc_10A68C0  +
mov ecx [ebp+var_8] +
cmp ecx [ebp+arg_4] +
jnz loc_10A691E  +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_8] +
jz loc_10A6951  +
cmp ebx eax +
jz loc_10A690E  +
push ebx  +
push esi  +
call sub_10A4F62  +
mov eax [ebp+var_4] +
add [ebp+var_4] edi +
mov ecx esi +
push eax  +
add ebx edi +
add esi edi +
push ecx  +
jmp loc_10A6947  +
mov edx [ebp+var_4] +
sub ecx edi +
mov [ebp+var_8] ecx +
cmp edx [ebp+arg_8] +
jnz loc_10A693E  +
sub esi edi +
cmp ecx esi +
jz loc_10A6938  +
push esi  +
push ecx  +
call sub_10A4F62  +
sub ebx edi +
push ebx  +
push esi  +
jmp loc_10A6947  +
mov eax edx +
add edx edi +
push ecx  +
mov [ebp+var_4] edx +
push eax  +
call sub_10A4F62  +
jmp loc_10A6878  +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] esi +
pop esi  +
mov [eax+4] ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_4] +
sub ecx [ebp+arg_0] +
push ebx  +
sar ecx 4 +
mov eax ecx +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
test ebx ebx +
jle loc_10A69B7  +
mov eax ebx +
shl eax 4 +
jmp loc_10A6995  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_8] +
mov edx [ebp+arg_0] +
sub esp 10h +
sub eax 10h +
mov edi esp +
lea esi [eax+edx] +
movs   +
movs   +
push ecx  +
movs   +
dec ebx  +
push ebx  +
push edx  +
mov [ebp+var_8] eax +
movs   +
call sub_10A5D61  +
test ebx ebx +
jg loc_10A698F  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
push 0  +
sub esp 10h +
add eax 0FFFFFFF0h +
mov edi esp +
mov esi eax +
movs   +
movs   +
push eax  +
movs   +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_10A5E14  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
sub ecx 14h +
jmp loc_10A6AEF  +
***
sub ecx 4 +
jmp loc_10A6AEF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
lea esi [ebp+arg_C] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+arg_1C] +
mov edi [ebp+arg_20] +
mov [ebp+var_1C] eax +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_34] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_2C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and [ebp+var_18] 0 +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_44] +
push eax  +
lea ecx [ebx+14h] +
call sub_10B4DD1  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp+var_2C] +
call ebx  +
lea ecx [ebp+var_44] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_2C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A6AB9  +
lea ecx [ebp+var_2C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_2C] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+var_30] +
mov ecx [ebp+var_34] +
mov [eax+4] ecx +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 24h  +
push edi  +
mov ecx [ebp+var_18] +
push esi  +
sub esp 10h +
mov edi esp +
push [ebp+arg_8]  +
lea esi [ebp+var_14] +
push [ebp+var_1C]  +
movs   +
movs   +
movs   +
lea eax [ebp+var_14] +
push eax  +
movs   +
call sub_10A5E81  +
push eax  +
lea ecx [ebp+var_2C] +
call ebx  +
lea ecx [ebp+var_14] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10A6A89  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1052240  +
test byte ptr [ebp+8] 1 +
jz loc_10A6B09  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101B618  +
test byte ptr [ebp+8] 1 +
jz loc_10A6B2F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub ecx 54h +
jmp loc_10A6B99  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
and eax 0FFFFFFF0h +
cmp eax 10h +
jle loc_10A6B67  +
push 0  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10A6965  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
and eax 0FFFFFFF0h +
cmp eax 10h +
jle loc_10A6B90  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10A69C3  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1053975  +
test byte ptr [ebp+8] 1 +
jz loc_10A6BB3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
jmp loc_10A6BD5  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10A6B70  +
sub [ebp+arg_4] 10h +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
and eax 0FFFFFFF0h +
cmp eax 10h +
jg loc_10A6BC6  +
pop ebp  +
retn 8  +
***
sub ecx 14h +
jmp loc_10521E7  +
***
mov eax [ecx+178h] +
test eax eax +
jz loc_10A6C0C  +
cmp dword ptr [eax+58h] 0 +
jz loc_10A6C0C  +
xor al al +
retn   +
xor eax eax +
cmp [ecx+0F4h] al +
setz al  +
retn   +
***
mov eax [ecx+9Ch] +
lea ecx [eax+44h] +
mov eax [ecx] +
jmp dword ptr [eax+78h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcdropsource  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+arg_4] 0 +
jz loc_10A6C90  +
push 40101h  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
mov eax [ebp+arg_8] +
and eax 13h +
jnz loc_10A6C9F  +
push 40100h  +
jmp loc_10A6C6D  +
cmp eax 1 +
jz loc_10A6CAE  +
cmp eax 2 +
jz loc_10A6CAE  +
cmp eax 10h +
jnz loc_10A6C68  +
lea ecx [ebp+var_10] +
jmp loc_10A6C78  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
mov ebx edx +
push esi  +
mov esi ecx +
mov ecx edx +
xor eax eax +
inc eax  +
shr ebx 2 +
shr ecx 3 +
shr edx 1 +
and bl al +
and cl al +
and dl al +
mov [esi+30h] dl +
mov dl [ebp+arg_8] +
mov [esi+31h] dl +
jnz loc_10A6D5B  +
test bl bl +
jz loc_10A6D50  +
test cl cl +
jnz loc_10A6D48  +
test [ebp+arg_0] 2 +
jnz loc_10A6D76  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
test cl cl +
jz loc_10A6D5B  +
test [ebp+arg_0] al +
jz loc_10A6D48  +
mov dl al +
test dl dl +
jz loc_10A6D70  +
test [ebp+arg_0] al +
jnz loc_10A6D4A  +
test [ebp+arg_0] 2 +
jz loc_10A6D48  +
mov byte ptr [esi+31h] 0 +
jmp loc_10A6D76  +
test [ebp+arg_0] 2 +
jz loc_10A6D7B  +
push 2  +
pop eax  +
jmp loc_10A6D4A  +
test [ebp+arg_0] al +
jz loc_10A6D64  +
mov [esi+31h] al +
jmp loc_10A6D4A  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 8  +
push 110Bh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
push 34h  +
mov eax offset byte_10DCD29 +
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-30h] +
mov [ebp-14h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamctreevie_10  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+18h]  +
add edi 0FFFFFF9Ch +
push dword ptr [ebp+14h]  +
mov ecx edi +
call ?HitTest@CTreeCtrl@@QBEPAU_TREEITEM@@VCPoint@@PAI@Z  +
mov [ebp-20h] eax +
test [ebp-1Ch] bl +
jz loc_10A6E11  +
push ebx  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A6F16  +
cmp eax esi +
jnz loc_10A6E31  +
cmp byte ptr [ebp+0Ch] 0 +
jnz loc_10A6E22  +
push esi  +
call ds:MessageBeep  +
push ebx  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10A6F0C  +
push eax  +
mov ecx edi +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx edi +
mov [ebp-18h] eax +
call sub_101D243  +
mov esi eax +
push 8000FFFFh  +
push esi  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A6F09  +
lea ecx [ebp-0Eh] +
push ecx  +
lea ecx [ebp-0Dh] +
push ecx  +
push dword ptr [ebp+10h]  +
mov [ebp-0Dh] al +
push 0  +
push ebx  +
push dword ptr [ebp-18h]  +
mov [ebp-0Eh] al +
mov eax [esi] +
push esi  +
call dword ptr [eax+104h]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A6F09  +
cmp [ebp-0Dh] al +
jz loc_10A6E22  +
push dword ptr [ebp-20h]  +
mov ecx edi +
call near ptr dword_10A6D88+2  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_10A6ED9  +
mov eax [ebp+1Ch] +
mov cl [ebp-0Eh] +
mov [eax] cl +
jmp loc_10A6F09  +
mov edx [ebp+1Ch] +
mov eax [esi] +
xor ecx ecx +
cmp [edx] cl +
setz cl  +
push ecx  +
push dword ptr [ebp+10h]  +
push 0  +
push ebx  +
push dword ptr [ebp-18h]  +
push esi  +
call dword ptr [eax+10Ch]  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea eax [ebp-30h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamclistview_9  +
lea ecx [ebp-28h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [esi+9Ch] +
mov ebx 80004003h +
push ebx  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A700B  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_10A71E4  +
lea eax [edi+1F8h] +
push ebx  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A705F  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_10A71E4  +
mov ebx [ebp+10h] +
and dword ptr [ebx] 0 +
mov eax [ebp+14h] +
mov edi [ebp+1Ch] +
mov byte ptr [eax] 0 +
mov eax [ebp+18h] +
and dword ptr [eax] 0 +
or dword ptr [edi] 0FFFFFFFFh +
lea eax [ebp-18h] +
push eax  +
mov eax [ebp+0Ch] +
push dword ptr [eax+4]  +
mov ecx esi +
push dword ptr [eax]  +
call ?HitTest@CListCtrl@@QBEHVCPoint@@PAI@Z  +
mov [edi] eax +
mov ecx esi +
test eax eax +
jge loc_10A70A4  +
call sub_10A6C1D  +
mov [ebx] eax +
mov eax [ebp+14h] +
mov byte ptr [eax] 1 +
jmp loc_10A71D7  +
push 2  +
push eax  +
call sub_109848B  +
test al 2 +
jz loc_10A70DE  +
call ds:GetForegroundWindow  +
test eax eax +
jz loc_10A70DE  +
cmp eax [esi+20h] +
jnz loc_10A70DE  +
xor esi esi +
inc esi  +
push esi  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] esi +
jmp loc_10A71EB  +
mov eax [ebp-14h] +
cmp dword ptr [eax+0D0h] 0 +
jz loc_10A713F  +
push 2  +
push 0FFFFFFFFh  +
mov ecx esi +
mov byte ptr [ebp+13h] 0 +
call sub_107E863  +
mov [ebp+1Ch] eax +
test eax eax +
jl loc_10A7132  +
mov eax [ebp+1Ch] +
cmp eax [edi] +
jz loc_10A7115  +
push 2  +
push 0  +
push eax  +
mov ecx esi +
call MFC42u_6896  +
jmp loc_10A7119  +
mov byte ptr [ebp+13h] 1 +
push 2  +
push dword ptr [ebp+1Ch]  +
mov ecx esi +
call sub_107E863  +
mov [ebp+1Ch] eax +
test eax eax +
jge loc_10A7100  +
cmp byte ptr [ebp+13h] 0 +
jnz loc_10A713F  +
push 2  +
push 2  +
push dword ptr [edi]  +
mov ecx esi +
call MFC42u_6896  +
cmp byte ptr [esi+86h] 0 +
mov ecx esi +
jz loc_10A7160  +
call sub_10A6C1D  +
mov ecx [ebp+18h] +
mov [ebx] eax +
mov eax [edi] +
mov [ecx] eax +
mov eax [ebp+14h] +
mov byte ptr [eax] 0 +
jmp loc_10A71A3  +
push dword ptr [edi]  +
call ?GetItemData@CListCtrl@@QBEKH@Z  +
mov edi eax +
test edi edi +
jz loc_10A70BF  +
push edi  +
call sub_1054C16  +
test eax eax +
jz loc_10A70BF  +
cmp dword ptr [eax+0Ch] 3951589h +
jnz loc_10A7195  +
mov eax [eax+14h] +
mov [ebx] eax +
mov eax [ebp+14h] +
mov byte ptr [eax] 1 +
jmp loc_10A71A3  +
mov ecx esi +
call sub_10A6C1D  +
mov [ebx] eax +
mov eax [ebp+18h] +
mov [eax] edi +
push 8000FFFFh  +
push dword ptr [ebx]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov edi ecx +
xor esi esi +
push esi  +
lea ecx [ebp-24h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcdroptarg_0  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov ecx edi +
mov [ebp-14h] esi +
call sub_10B4DD1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A72C0  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A7309  +
mov edi [ebp-14h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A72FC  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+8]  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcdroptarg_4  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
push dword ptr [ebp+14h]  +
lea eax [ebp-10h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_101220E  +
test eax eax +
setnz al  +
test al al +
jnz loc_10A73ED  +
push 80004005h  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A7427  +
push dword ptr [ebp-10h]  +
mov eax [ebp+0Ch] +
push dword ptr [ebp+10h]  +
push 0  +
push dword ptr [eax+4]  +
call ds:AppendMenuW  +
test eax eax +
setnz al  +
test al al +
jnz loc_10A741A  +
push 80004005h  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10A741D  +
lea eax [ebp-24h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-10h] +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
xor edi edi +
push edi  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcdroptarg_3  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov dword ptr [ebp-1Ch] offset off_10025A8 +
mov [ebp-18h] edi +
mov byte ptr [ebp-4] 2 +
call ds:CreatePopupMenu  +
push eax  +
lea ecx [ebp-1Ch] +
call ?Attach@CMenu@@QAEHPAUHMENU__@@@Z  +
test eax eax +
setnz al  +
test al al +
jnz loc_10A750A  +
push 80004005h  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A7711  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
test [ebp+14h] bl +
jz loc_10A7550  +
push 3469h  +
push ebx  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10A7383  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A7704  +
test byte ptr [ebp+14h] 2 +
jz loc_10A7592  +
push 346Ah  +
push 2  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10A7383  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A7704  +
test byte ptr [ebp+14h] 3 +
jz loc_10A75C4  +
push edi  +
push edi  +
push 800h  +
push dword ptr [ebp-18h]  +
call ds:AppendMenuW  +
test eax eax +
setnz al  +
test al al +
jnz loc_10A75C4  +
push 80004005h  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10A7707  +
push 346Bh  +
push edi  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10A7383  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A7704  +
mov eax [ebp+18h] +
mov eax [eax] +
cmp eax edi +
jz loc_10A761C  +
push edi  +
push eax  +
push dword ptr [ebp-18h]  +
call ds:SetMenuDefaultItem  +
test eax eax +
setnz al  +
test al al +
jz loc_10A75B1  +
mov ecx [ebp-14h] +
lea eax [ebp+14h] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
mov [ebp+14h] edi +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A7704  +
mov edi [ebp+14h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A7704  +
mov esi [edi+14h] +
call ds:GetFocus  +
mov edi eax +
test edi edi +
jz loc_10A76E3  +
push 0  +
push edi  +
call ds:GetWindowThreadProcessId  +
mov [ebp+14h] eax +
call ds:GetCurrentThreadId  +
cmp [ebp+14h] eax +
jz loc_10A76E3  +
push esi  +
call ds:SetFocus  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A76E3  +
cmp byte ptr [eax+19h] 4 +
jb loc_10A76E3  +
push dword ptr [ebp+14h]  +
push edi  +
push esi  +
push offset dword_10A7738  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10C9315  +
push 0  +
push esi  +
call ?FromHandlePermanent@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push eax  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-1Ch] +
push dword ptr [ebp+0Ch]  +
push 182h  +
call ?TrackPopupMenu@CMenu@@QAEHIHHPAVCWnd@@PBUtagRECT@@@Z  +
mov ecx [ebp+18h] +
mov [ecx] eax +
lea eax [ebp-2Ch] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-1Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call sub_100BF07  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
push 38h  +
mov eax offset byte_10DCF41 +
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-34h] +
mov [ebp-14h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamclistvie_10  +
lea ecx [ebp-34h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 8000FFFFh  +
push dword ptr [esi+48h]  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A7817  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-14h] 1 +
jmp loc_10A79D8  +
mov ecx [esi+48h] +
call sub_10A6BF9  +
test al al +
jnz loc_10A784C  +
xor eax eax +
cmp [ebp+0Ch] bl +
lea ecx [ebp-34h] +
setz al  +
dec eax  +
and eax 7FFFBFFCh +
add eax 80004005h +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A780B  +
***
or dword ptr [ebp-20h] 0FFFFFFFFh +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-0Eh] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp+14h] +
push eax  +
lea eax [ebp-44h] +
lea ecx [esi-54h] +
push eax  +
mov [ebp-1Ch] ebx +
mov [ebp-0Eh] bl +
mov [ebp-18h] ebx +
mov [ebp-24h] ecx +
call near ptr dword_10A6F78+0Bh  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A78C7  +
push 1  +
lea ecx [ebp-44h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
mov dword ptr [ebp-14h] 2 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
mov [ebp-0Dh] bl +
test al al +
jz loc_10A78CB  +
mov byte ptr [ebp-0Dh] 1 +
test byte ptr [ebp-14h] 2 +
mov dword ptr [ebp-4] 1 +
jz loc_10A78E5  +
and dword ptr [ebp-14h] 0FFFFFFFDh +
lea ecx [ebp-44h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-0Dh] bl +
jnz loc_10A79C7  +
mov eax [esi+48h] +
mov esi [eax+0D8h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A79C7  +
movzx edi byte ptr [ebp-0Eh] +
lea ecx [ebp-10h] +
push ecx  +
lea ecx [ebp-0Fh] +
push ecx  +
push dword ptr [ebp+10h]  +
mov [ebp-0Fh] bl +
push dword ptr [ebp-18h]  +
mov [ebp-10h] bl +
mov eax [esi] +
push edi  +
push dword ptr [ebp-1Ch]  +
push esi  +
call dword ptr [eax+104h]  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A79C7  +
cmp [ebp-0Fh] bl +
jnz loc_10A797C  +
push 1  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10A79CA  +
push dword ptr [ebp-20h]  +
mov ecx [ebp-24h] +
call near ptr dword_1098D6C+3  +
cmp [ebp+0Ch] bl +
jz loc_10A7996  +
mov eax [ebp+1Ch] +
mov cl [ebp-10h] +
mov [eax] cl +
jmp loc_10A79C7  +
mov edx [ebp+1Ch] +
mov eax [esi] +
xor ecx ecx +
cmp [edx] bl +
setz cl  +
push ecx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-18h]  +
push edi  +
push dword ptr [ebp-1Ch]  +
push esi  +
call dword ptr [eax+10Ch]  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea eax [ebp-34h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
or dword ptr [ebp-14h] 1 +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcdroptarget  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+arg_0] +
push [ebp+arg_4]  +
add ecx 24h +
call sub_1010F11  +
mov esi [ebp+arg_14] +
push 80070057h  +
push esi  +
push [ebp+arg_4]  +
lea eax [ebp+var_20] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp+var_10] +
test al al +
jz loc_10A7AAF  +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
mov dword ptr [esi] 3 +
jmp loc_10A7A97  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aDragleave  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_0] +
push 0  +
lea ecx [esi+24h] +
call sub_1010F11  +
lea eax [ebp+var_20] +
push eax  +
lea ecx [esi-8] +
call sub_10A7245  +
push eax  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp+var_20] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
pop esi  +
test al al +
jz loc_10A7B21  +
lea ecx [ebp+var_10] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
leave   +
retn 4  +
***
call sub_1001F95  +
mov [ebp-18h] ecx +
xor esi esi +
push esi  +
lea ecx [ebp-30h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcdroptarg_2  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp-18h] +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
mov [ebp-14h] esi +
call sub_10B4DD1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A7BC9  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A7C82  +
mov edi [ebp-14h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A7C75  +
mov eax [ebp+14h] +
mov [ebp-20h] eax +
mov eax [ebp+18h] +
lea ecx [ebp-20h] +
mov [ebp-1Ch] eax +
mov eax [edi+14h] +
push ecx  +
push eax  +
call ds:ScreenToClient  +
push dword ptr [ebp+1Ch]  +
mov eax [edi] +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-40h] +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push ecx  +
mov ecx edi +
call dword ptr [eax+4]  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
push 0  +
lea ecx [ebp-30h] +
call ds:??9SC@mmcerror@@QBE_NJ@Z  +
test al al +
jz loc_10A7C6C  +
mov ecx [ebp-18h] +
lea eax [ebp-40h] +
push eax  +
call sub_10A7245  +
lea ecx [ebp-40h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push esi  +
lea esi [ecx+4] +
push offset Addend  +
mov dword ptr [ecx] offset off_1011DB4 +
mov dword ptr [esi] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_101A846  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10A7D28  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10A7D0D  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_1041A02  +
mov dword ptr [esi] offset off_10A7D7C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_10A7DCB  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_10A7DE0  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_10A7DC1  +
push 0  +
jmp loc_10A7DC4  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_10A7DD7  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10A7CE3  +
test [ebp+arg_0] 1 +
jz loc_10A7E0F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_14] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcdroptarg_1  +
lea ecx [ebp+var_14] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ebx [ebp+arg_10] +
push 80070057h  +
push ebx  +
lea eax [ebp+var_24] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp+var_14] +
call esi  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A7E90  +
lea ecx [ebp+var_14] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_14] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
mov edi [ebp+arg_0] +
mov eax [edi+24h] +
push 8000FFFFh  +
push eax  +
lea eax [ebp+var_24] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp+var_14] +
call esi  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A7E73  +
lea ecx [ebp+var_4] +
push ecx  +
push [ebp+arg_C]  +
mov byte ptr [ebp+var_4] al +
push [ebp+arg_8]  +
mov eax [edi+24h] +
push eax  +
push 1  +
lea eax [ebp+var_24] +
add edi 0FFFFFFF8h +
push eax  +
mov ecx edi +
call sub_10A7B49  +
push eax  +
lea ecx [ebp+var_14] +
call esi  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
push 0  +
lea ecx [ebp+var_14] +
call ds:??8SC@mmcerror@@QBE_NJ@Z  +
test al al +
jz loc_10A7F16  +
push [ebp+var_4]  +
mov ecx edi +
push [ebp+arg_4]  +
push dword ptr [ebx]  +
call sub_10A6D0E  +
mov [ebx] eax +
jmp loc_10A7E73  +
and dword ptr [ebx] 0 +
jmp loc_10A7E73  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_14] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcdroptarget  +
lea ecx [ebp+var_14] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+arg_0] +
push 0  +
lea ecx [edi+24h] +
call sub_1010F11  +
mov esi [ebp+arg_14] +
push 80070057h  +
push esi  +
push [ebp+arg_4]  +
lea eax [ebp+var_24] +
push eax  +
call sub_100C5A1  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp+var_14] +
call ebx  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A7FDC  +
lea ecx [ebp+var_14] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_14] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
cmp byte ptr [edi+28h] 0 +
mov al [edi+29h] +
mov byte ptr [ebp+var_4] al +
jz loc_10A802C  +
xor ecx ecx +
test al al +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [esi]  +
setz cl  +
push [ebp+arg_10]  +
lea eax [ebp+var_24] +
push [ebp+arg_C]  +
push eax  +
inc ecx  +
mov [ebp+arg_0] ecx +
lea ecx [edi-8] +
call sub_10A7495  +
push eax  +
lea ecx [ebp+var_14] +
call ebx  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A7FBF  +
mov eax [ebp+arg_0] +
jmp loc_10A803C  +
push [ebp+var_4]  +
lea ecx [edi-8] +
push [ebp+arg_8]  +
push dword ptr [esi]  +
call sub_10A6D0E  +
mov [esi] eax +
test eax eax +
jz loc_10A8083  +
and al 1 +
mov byte ptr [ebp+var_4] al +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_10]  +
lea eax [ebp+var_24] +
push [ebp+arg_C]  +
lea ecx [edi-8] +
push [ebp+arg_4]  +
push 0  +
push eax  +
call sub_10A7B49  +
push eax  +
lea ecx [ebp+var_14] +
call ebx  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
push 0  +
lea ecx [ebp+var_14] +
call ds:??9SC@mmcerror@@QBE_NJ@Z  +
test al al +
jz loc_10A8083  +
and dword ptr [esi] 0 +
mov eax [edi] +
push edi  +
call dword ptr [eax+14h]  +
jmp loc_10A7FBF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10A80BA  +
test esi esi +
jz loc_10A80BA  +
push 1  +
mov ecx esi +
call sub_10A7DF5  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_10A80F1  +
push eax  +
call sub_10A7D95  +
test eax eax +
jge loc_10A80F1  +
cmp eax 80004002h +
jz loc_10A80F1  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10A7D61  +
push offset Addend  +
mov dword ptr [esi] offset off_1011DB4 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10A813F  +
mov eax 80004003h +
jmp loc_10A81A2  +
push 24h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10A8164  +
push esi  +
mov ecx eax +
call sub_10A80FD  +
jmp loc_10A8166  +
xor eax eax +
mov esi eax +
jmp loc_10A8176  +
mov eax offset loc_10A8170 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10A819B  +
lea ecx [esi+8] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10A818E  +
xor ebx ebx +
test ebx ebx +
jz loc_10A819E  +
push 1  +
mov ecx esi +
call sub_10A7DF5  +
xor esi esi +
jmp loc_10A819E  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A51C  +
test byte ptr [ebp+8] 1 +
jz loc_10A81C9  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A4FC  +
test byte ptr [ebp+8] 1 +
jz loc_10A81EF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
xor esi esi +
push esi  +
lea ecx [ebp-2Ch] +
mov [ebp-14h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcdropsour_0  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-10h] +
push eax  +
mov [ebp-10h] esi +
call sub_10A8123  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A8262  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_10A8362  +
mov edi 8000FFFFh +
push edi  +
push dword ptr [ebp-10h]  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A82B9  +
mov ecx [ebp-10h] +
test ecx ecx +
jz loc_10A82AA  +
push ebx  +
call sub_10A7DF5  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A825A  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-18h] +
call sub_10A80C7  +
push edi  +
mov edi [ebp-18h] +
push edi  +
lea eax [ebp-3Ch] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A830A  +
mov ecx [ebp-10h] +
test ecx ecx +
jz loc_10A8345  +
push ebx  +
call sub_10A7DF5  +
jmp loc_10A8345  +
and dword ptr [ebp-1Ch] 0 +
movzx ecx byte ptr [ebp+14h] +
xor eax eax +
cmp [ebp+10h] al +
setnz al  +
neg ecx  +
sbb ecx ecx +
and ecx 2 +
or eax ecx +
lea ecx [ebp-1Ch] +
push ecx  +
push eax  +
push edi  +
push dword ptr [ebp+0Ch]  +
call ds:DoDragDrop  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
test edi edi +
jz loc_10A8362  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
push 30h  +
mov eax offset byte_10DD155 +
call sub_1001F95  +
mov [ebp-14h] ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamctreeview_1  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
push dword ptr [ebp+8]  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A8511  +
mov eax [ebp+8] +
mov ecx [ebp-14h] +
mov [edi] ebx +
push dword ptr [eax+3Ch]  +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx [ebp-14h] +
mov [ebp+8] eax +
call sub_101D243  +
mov edi eax +
push 8000FFFFh  +
push edi  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A8511  +
mov [ebp-10h] ebx +
mov [ebp-1Ch] bl +
mov [ebp-18h] bl +
mov eax [edi] +
mov [ebp+0Ch] eax +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_100A5E6  +
push eax  +
mov eax [ebp+0Ch] +
push ebx  +
push ebx  +
push 1  +
push dword ptr [ebp+8]  +
push edi  +
call dword ptr [eax+90h]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push ebx  +
lea ecx [ebp-2Ch] +
call ds:??9SC@mmcerror@@QBE_NJ@Z  +
test al al +
mov eax [ebp-10h] +
jnz loc_10A8504  +
cmp eax ebx +
jz loc_10A8504  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10A81FB  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_10A8511  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
push 38h  +
mov eax offset byte_10DD1E9 +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamclistviewOn  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-44h] +
push dword ptr [ebp+8]  +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A87FB  +
mov eax [ebp+0Ch] +
push 8000FFFFh  +
mov [eax] ebx +
push dword ptr [edi+9Ch]  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A87FB  +
mov ecx [edi+9Ch] +
call sub_10A6BF9  +
test al al +
jz loc_10A87FB  +
mov ecx edi +
call sub_1054B78  +
mov [ebp-1Ch] eax +
cmp eax ebx +
ja loc_10A8641  +
push 8000FFFFh  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10A87FB  +
mov ecx edi +
call sub_10A6C1D  +
push 2  +
push 0FFFFFFFFh  +
mov ecx edi +
mov [ebp-20h] eax +
call sub_107E863  +
cmp [edi+86h] bl +
jnz loc_10A8666  +
push eax  +
mov ecx edi +
call ?GetItemData@CListCtrl@@QBEKH@Z  +
mov [ebp+0Ch] eax +
mov eax [edi+9Ch] +
mov eax [eax+0D8h] +
push 8000FFFFh  +
push eax  +
mov [ebp+8] eax +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A87FB  +
mov [ebp-10h] ebx +
mov eax [ebp+8] +
mov [ebp-18h] bl +
mov [ebp-14h] bl +
mov eax [eax] +
mov [ebp-24h] eax +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 4 +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp+0Ch]  +
xor eax eax +
inc eax  +
cmp eax [ebp-1Ch] +
sbb eax eax +
neg eax  +
push eax  +
mov eax [ebp-24h] +
push ebx  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+8]  +
call dword ptr [eax+90h]  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push ebx  +
lea ecx [ebp-34h] +
call ds:??9SC@mmcerror@@QBE_NJ@Z  +
test al al +
jnz loc_10A87C0  +
cmp [ebp-10h] ebx +
jz loc_10A87C0  +
push dword ptr [ebp-14h]  +
lea eax [ebp-44h] +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-10h]  +
push eax  +
call sub_10A81FB  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A87EB  +
mov eax [edi+9Ch] +
lea ecx [eax+44h] +
mov eax [ecx] +
push 1  +
lea edx [ebp-44h] +
push edx  +
call dword ptr [eax+30h]  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A87EB  +
mov edi [edi+9Ch] +
lea ecx [edi+44h] +
mov eax [ecx] +
push ebx  +
lea edx [ebp-44h] +
push edx  +
call dword ptr [eax+30h]  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jmp loc_10A87EB  +
mov edi [edi+9Ch] +
lea ecx [edi+44h] +
mov eax [ecx] +
push 1  +
lea edx [ebp-44h] +
push edx  +
call dword ptr [eax+30h]  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_10A87FB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-34h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101AD70  +
test byte ptr [ebp+8] 1 +
jz loc_10A8863  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10A83BB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10A8561  +
***
retn   +
***
jmp ??1CWnd@@UAE@XZ  +
***
mov eax offset off_10A88B0 +
retn   +
***
mov eax offset off_10A88D8 +
retn   +
***
mov byte ptr [ecx+88h] 0 +
call ds:ReleaseCapture  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1003AC4 +
call ??1CWnd@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10A892A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ecx+20h]  +
mov byte ptr [ecx+88h] 1 +
call ds:SetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
retn 0Ch  +
***
cmp byte ptr [ecx+88h] 0 +
jz loc_10A8964  +
call sub_101466F  +
jmp locret_10A8969  +
call ?Default@CWnd@@IAEJXZ  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101BBAA  +
test byte ptr [ebp+8] 1 +
jz loc_10A898B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1019F47  +
test byte ptr [ebp+8] 1 +
jz loc_10A89B1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_1C] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp edx ebx +
jz loc_10A89F9  +
cmp [edx] bx +
jnz loc_10A89DD  +
mov [ebp+arg_1C] 0Eh +
jmp loc_10A8A00  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10A89E2  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_1C] eax +
jmp loc_10A8A00  +
mov [ebp+arg_1C] 0Ah +
cmp edx ebx +
jz loc_10A8A17  +
cmp [edx] bx +
jnz loc_10A8A12  +
mov [ebp+var_4] offset aNull +
jmp loc_10A8A1E  +
mov [ebp+var_4] edx +
jmp loc_10A8A1E  +
mov [ebp+var_4] offset aNull_0 +
mov edi [ebp+arg_18] +
cmp edi ebx +
jz loc_10A8A47  +
cmp [edi] bx +
jnz loc_10A8A2E  +
push 0Eh  +
jmp loc_10A8A49  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10A8A33  +
sub eax esi +
sar eax 1 +
lea ebx [eax+eax+2] +
jmp loc_10A8A4A  +
push 0Ah  +
pop ebx  +
test edi edi +
jz loc_10A8A5F  +
cmp word ptr [edi] 0 +
jnz loc_10A8A5B  +
mov edx offset aNull +
jmp loc_10A8A64  +
mov edx edi +
jmp loc_10A8A64  +
mov edx offset aNull_0 +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_10A8A8E  +
cmp word ptr [edi] 0 +
jnz loc_10A8A75  +
push 0Eh  +
jmp loc_10A8A90  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10A8A7A  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_10A8A91  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_10A8AA6  +
cmp word ptr [edi] 0 +
jnz loc_10A8AA2  +
mov eax offset aNull +
jmp loc_10A8AAB  +
mov eax edi +
jmp loc_10A8AAB  +
mov eax offset aNull_0 +
push 0  +
push [ebp+arg_1C]  +
push [ebp+var_4]  +
push ebx  +
push edx  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 38h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 1 +
jnz loc_10A8AFA  +
cmp [ebp+arg_8] 0 +
mov ecx [ebp+arg_0] +
setnz al  +
mov [ecx+35h] al +
jmp loc_10A8B0E  +
cmp [ebp+arg_4] 2 +
jnz loc_10A8B0E  +
cmp [ebp+arg_8] 0 +
mov ecx [ebp+arg_0] +
setnz al  +
mov [ecx+36h] al +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
mov eax lpDst +
cmp eax offset lpDst +
jz locret_10A8B3D  +
cmp byte ptr [eax+19h] 5 +
jb locret_10A8B3D  +
push offset loc_106C760  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
retn 4  +
***
mov edi edi +
mov eax lpDst +
cmp eax offset lpDst +
jz locret_10A8B6B  +
cmp byte ptr [eax+19h] 5 +
jb locret_10A8B6B  +
push offset loc_106C760  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+30h] +
push 1  +
push 0  +
call sub_10180D7  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
mov eax lpDst +
cmp eax offset lpDst +
jz locret_10A8BBE  +
cmp byte ptr [eax+19h] 5 +
jb locret_10A8BBE  +
push offset loc_106C760  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A8BF2  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A8BF2  +
push [ebp+arg_4]  +
push offset loc_106C760  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
pop ebp  +
retn 8  +
***
sub ds:byte_10DA59D[eax] bh +
call sub_1001F95  +
mov ebx ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCwebeventsinkS  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi 80070057h +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A8C7B  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10A8DD0  +
mov eax [ebp+0Ch] +
mov [ebx+24h] eax +
push dword ptr [eax+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 0  +
push offset off_10F6CCC  +
push offset off_10F6C88  +
push 0  +
push eax  +
call __RTDynamicCast  +
mov ecx [ebp+0Ch] +
add esp 14h +
mov [ebp-14h] eax +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
push edi  +
push eax  +
push dword ptr [ebp-14h]  +
mov [ebp+0Ch] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A8DC3  +
mov eax [ebp-14h] +
mov eax [eax+310h] +
push edi  +
push eax  +
mov [ebx+30h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A8DC3  +
push 0  +
push offset off_10F71EC  +
push offset off_10F6DDC  +
push 0  +
push dword ptr [ebp+0Ch]  +
call __RTDynamicCast  +
add esp 14h +
push 8000FFFFh  +
push eax  +
mov [ebx+28h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A8DC3  +
mov ecx [ebp+0Ch] +
mov eax [ecx] +
call dword ptr [eax+0DCh]  +
push edi  +
push eax  +
mov [ebp+0Ch] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A8DC3  +
mov eax [ebp+0Ch] +
add eax 4Ch +
mov [ebx+2Ch] eax +
mov byte ptr [ebx+34h] 0 +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
push 14h  +
mov eax offset dword_10DD490 +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10088D4 +
mov ecx [esi+28h] +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10A8E62  +
mov eax [ecx] +
push 0  +
lea edx [ebp-20h] +
push edx  +
call dword ptr [eax]  +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [esi+4] +
call sub_101A846  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_10A8E88  +
mov eax 80070057h +
jmp loc_10A8E90  +
mov dword ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
cmp dword ptr [ebp+8] 0 +
jnz loc_10A8EAF  +
xor al al +
jmp loc_10A8F1E  +
lea ecx [ebp-20h] +
call sub_100AD56  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-20h] +
call sub_100AE0E  +
test eax eax +
jge loc_10A8EF1  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10A8EF1  +
cmp byte ptr [ecx+19h] 3 +
jb loc_10A8EF1  +
push eax  +
push offset loc_106C760  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
push dword ptr [ebp-1Ch]  +
call ds:CharLowerW  +
push ds:off_106D924  +
push dword ptr [ebp-1Ch]  +
call ds:wcsstr  +
pop ecx  +
test eax eax +
pop ecx  +
setnz bl  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call sub_100A77D  +
mov al bl +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A8F57  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A8F57  +
push offset loc_106C760  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi+2Ch] +
push edi  +
push 0  +
call sub_10BE5DF  +
mov edi [ebp+arg_4] +
push edi  +
mov ecx esi +
call sub_10A8E99  +
mov ecx [esi+30h] +
mov byte ptr [ebp+arg_0] al +
push [ebp+arg_0]  +
call sub_10B0825  +
movzx eax byte ptr [esi+36h] +
mov ecx [esi+30h] +
push eax  +
movzx eax byte ptr [esi+35h] +
push eax  +
call sub_10B1205  +
cmp byte ptr [ebp+arg_0] 0 +
jz loc_10A8FCE  +
mov eax ds:off_106D924 +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10A8F9F  +
sub eax edx +
sar eax 1 +
lea eax [edi+eax*2] +
push eax  +
call ds:_wtoi  +
pop ecx  +
mov ecx [esi+30h] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_10B0EFF  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A9008  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A9008  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push offset loc_106C760  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+24h] +
test eax eax +
jz loc_10A9038  +
push dword ptr [eax+20h]  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_10A9038  +
push [ebp+lParam]  +
mov ecx [esi+2Ch] +
push 0  +
call sub_10BE5AB  +
push [ebp+wParam]  +
mov ecx [esi+2Ch] +
call sub_10BE5DF  +
mov ecx [esi+30h] +
xor eax eax +
cmp [ebp+lParam] eax +
setnz al  +
push eax  +
push 0  +
call sub_10180D7  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+24h] +
test eax eax +
jz loc_10A90D1  +
push dword ptr [eax+20h]  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_10A90D1  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_10A9087  +
cmp word ptr [edi] 0 +
jz loc_10A9087  +
xor al al +
jmp loc_10A9089  +
mov al 1 +
cmp byte ptr [esi+34h] 0 +
jz loc_10A9093  +
test al al +
jnz loc_10A90D0  +
mov [esi+34h] al +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A90BB  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A90BB  +
push edi  +
push offset loc_106C760  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
mov ecx [esi+28h] +
mov eax [ecx] +
push edi  +
lea edx [ebp+var_10] +
push edx  +
call dword ptr [eax]  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10A9110  +
cmp byte ptr [eax+19h] 5 +
jb loc_10A9110  +
push [ebp+arg_14]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push offset loc_106C760  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A89BD  +
push esi  +
mov esi [ebp+arg_0] +
push [ebp+arg_4]  +
mov ecx esi +
call sub_10A8E99  +
mov ecx [esi+30h] +
mov byte ptr [ebp+arg_4] al +
push [ebp+arg_4]  +
call sub_10B0825  +
mov ecx [esi+30h] +
push 1  +
push 0  +
call sub_10180D7  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_10FCE44 +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10765AC  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_10FCE44 +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1052795  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10FCE44 +
pop ebp  +
jmp sub_105010F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax 0FFFFFFFEh +
jnz loc_10A91EE  +
mov eax [ecx+0Ch] +
test eax eax +
jnz loc_10A91E7  +
jmp loc_10A91F2  +
mov eax edx +
mov edx [eax+8] +
test edx edx +
jnz loc_10A91E5  +
test eax eax +
jnz loc_10A9200  +
mov eax [ecx+0Ch] +
mov edx [ebp+arg_0] +
mov [edx+8] eax +
mov [ecx+0Ch] edx +
jmp loc_10A920E  +
mov edx [ebp+arg_0] +
push esi  +
mov esi [eax+8] +
mov [edx+8] esi +
mov [eax+8] edx +
pop esi  +
mov [edx+4] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
mov edx [ebp+arg_0] +
cmp eax edx +
jnz loc_10A923A  +
mov eax [edx+8] +
mov [ecx+0Ch] eax +
jmp loc_10A9244  +
mov ecx [eax+8] +
cmp ecx edx +
jz loc_10A923E  +
mov eax ecx +
test eax eax +
jnz loc_10A9231  +
mov ecx [edx+8] +
mov [eax+8] ecx +
and dword ptr [edx+8] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 5Ch  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10A9273  +
push eax  +
call ds:CharNextW  +
jmp loc_10A9276  +
mov eax [ebp+arg_0] +
push eax  +
lea ecx [esi+3Ch] +
call sub_10394ED  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+20h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov eax [eax+4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov eax [eax+0Ch] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov eax [eax+8] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
xor eax eax +
cmp [ecx+10h] al +
setnz al  +
dec eax  +
and eax 8 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
xor eax eax +
cmp [ecx+10h] al +
setz al  +
lea eax [eax+eax+6] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
movzx eax byte ptr [eax+10h] +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
push dword ptr [ebp+8]  +
push ecx  +
lea ecx [ebp-154h] +
call sub_10AA5CA  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-154h] +
call sub_10BA1E7  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-154h] +
call sub_10AA652  +
xor eax eax +
call sub_1001FCF  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push ebx  +
mov ebx [ebp+8] +
push edi  +
mov edi ecx +
jmp loc_10A938B  +
cmp eax ebx +
jz loc_10A93E8  +
mov eax [eax+4] +
test eax eax +
jnz loc_10A9384  +
mov ecx [ebx+4] +
push esi  +
push ebx  +
mov [ebp+8] ecx +
call sub_10A921A  +
mov eax [edi+0Ch] +
mov esi [eax] +
cmp esi eax +
jz loc_10A93B9  +
mov eax [esi+8] +
mov ecx [eax] +
push ebx  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi] +
cmp esi [edi+0Ch] +
jnz loc_10A93A5  +
push dword ptr [ebp+10h]  +
mov ecx [ebp+0Ch] +
push ebx  +
call sub_10A91CF  +
mov eax [edi+0Ch] +
mov esi [eax] +
cmp esi eax +
jz loc_10A93DF  +
mov eax [esi+8] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+4]  +
mov esi [esi] +
cmp esi [edi+0Ch] +
jnz loc_10A93CE  +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov eax 80004005h +
jmp loc_10A93E2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
lea ecx [ebx+14h] +
call sub_10394ED  +
mov eax [edi+0Ch] +
mov esi [eax] +
cmp esi eax +
jz loc_10A9428  +
mov eax [esi+8] +
mov ecx [eax] +
push 1  +
push ebx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi [esi] +
cmp esi [edi+0Ch] +
jnz loc_10A9415  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
lea esi [ecx+1Ch] +
mov eax [esi] +
test eax eax +
jz loc_10A944E  +
push eax  +
jmp loc_10A94A5  +
push 0Ah  +
push 14h  +
push 21h  +
push 10h  +
push 10h  +
mov ecx esi +
call sub_102B239  +
test eax eax +
jz loc_10A94A3  +
and dword ptr [ebp-10h] 0 +
mov edi offset off_1008170 +
mov [ebp-14h] edi +
and dword ptr [ebp-4] 0 +
push 9Eh  +
lea eax [ebp-14h] +
push eax  +
call sub_101C4B3  +
movzx eax al +
test eax eax +
jz loc_10A9494  +
push 0  +
push dword ptr [ebp-10h]  +
push dword ptr [esi]  +
call sub_101C58F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
mov [ebp-14h] edi +
call sub_100F62A  +
push dword ptr [esi]  +
call ?FromHandle@CImageList@@SGPAV1@PAU_IMAGELIST@@@Z  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
mov ecx [edi+0Ch] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
mov ebx eax +
test ebx ebx +
jl loc_10A9500  +
mov eax [edi-8] +
push esi  +
mov esi [eax] +
cmp esi eax +
jz loc_10A94FD  +
push dword ptr [edi+0Ch]  +
mov eax [esi+8] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+8] +
push dword ptr [edi+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov esi [esi] +
cmp esi [edi-8] +
jnz loc_10A94DC  +
mov eax ebx +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push 0  +
lea ecx [ebp-10h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCfavoritesGeti  +
lea ecx [ebp-10h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-20h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-10h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-10h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A958D  +
mov eax [ebp+0Ch] +
cmp dword ptr [eax+38h] 8 +
jb loc_10A956B  +
mov eax [eax+24h] +
jmp loc_10A956E  +
add eax 24h +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
call sub_100A593  +
push eax  +
lea ecx [ebp-10h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-10h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp-10h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push 0  +
lea ecx [ebp-10h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCfavoritesGe_0  +
lea ecx [ebp-10h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-20h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-10h] +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-10h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A9653  +
mov eax [ebp+0Ch] +
cmp dword ptr [eax+60h] 8 +
jb loc_10A9631  +
mov eax [eax+4Ch] +
jmp loc_10A9634  +
add eax 4Ch +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
call sub_100A593  +
push eax  +
lea ecx [ebp-10h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-10h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp-10h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ebx ecx +
lea eax [esi+8] +
push eax  +
lea ecx [ebx+8] +
call sub_1020B84  +
mov eax [esi+80h] +
mov [ebx+80h] eax +
mov eax [ebp+arg_0] +
add esi 84h +
lea edi [ebx+84h] +
movs   +
movs   +
movs   +
movs   +
mov ecx [eax+94h] +
mov [ebx+94h] ecx +
mov ecx [eax+98h] +
mov [ebx+98h] ecx +
mov eax [eax+9Ch] +
pop edi  +
mov [ebx+9Ch] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
lea eax [ebp+0Ch] +
push eax  +
add ecx 4 +
call sub_100ED24  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10212A9  +
mov eax [ebp+arg_4] +
mov ecx [eax+4] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+8] +
lea edx [ebp+0Ch] +
push edx  +
push ecx  +
lea ecx [ebp+8] +
push ecx  +
lea ecx [eax+4] +
call sub_10A972E  +
mov eax [ebp+10h] +
mov ecx [ebp+8] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
mov edi ecx +
mov ecx [ebx+4] +
mov [ebp+8] ecx +
test ecx ecx +
jz loc_10A97A0  +
push ebx  +
call sub_10A921A  +
jmp loc_10A97A4  +
and dword ptr [edi+20h] 0 +
push 1  +
mov ecx ebx +
call sub_1052EC6  +
mov eax [edi+0Ch] +
mov esi [eax] +
cmp esi eax +
jz loc_10A97CA  +
mov eax [esi+8] +
mov ecx [eax] +
push ebx  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi] +
cmp esi [edi+0Ch] +
jnz loc_10A97B6  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 4  +
***
push 14h  +
mov eax offset dword_10DD730 +
call sub_100A60E  +
mov edi ecx +
xor esi esi +
inc esi  +
cmp [ebp+0Ch] esi +
jnz loc_10A98B1  +
mov ebx [ebp+8] +
and dword ptr [ebp-4] 0 +
lea esi [edi+10h] +
push esi  +
push ebx  +
call sub_10CAE4B  +
lea eax [edi+14h] +
push eax  +
push ebx  +
call sub_10CA031  +
cmp byte ptr [esi] 0 +
jz loc_10A9888  +
and dword ptr [ebp-18h] 0 +
lea eax [ebp-18h] +
push eax  +
push ebx  +
call sub_10CAF1D  +
and dword ptr [ebp-14h] 0 +
mov eax [ebp-14h] +
cmp eax [ebp-18h] +
jnb loc_10A9884  +
push 124h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_10A984F  +
push 1  +
call sub_1038A82  +
mov esi eax +
jmp loc_10A9851  +
xor esi esi +
push dword ptr [ebp+0Ch]  +
mov eax [esi] +
push dword ptr [ebp+8]  +
mov ecx esi +
mov byte ptr [ebp-4] 0 +
call dword ptr [eax+10h]  +
mov ebx eax +
test ebx ebx +
jge loc_10A9875  +
push 1  +
mov ecx esi +
call sub_1052EC6  +
mov eax ebx +
jmp loc_10A98B3  +
push 0FFFFFFFEh  +
push esi  +
mov ecx edi +
call sub_10A91CF  +
inc dword ptr [ebp-14h]  +
jmp loc_10A9824  +
***
xor esi esi +
jmp loc_10A98B1  +
push ebx  +
lea ecx [edi+64h] +
call sub_10CB258  +
add edi 3Ch +
push edi  +
push ebx  +
mov esi eax +
call sub_10CA031  +
jmp loc_10A98B1  +
mov eax [ebp-20h] +
mov eax [eax+4] +
mov [ebp+0Ch] eax +
mov eax offset loc_10A98AE +
retn   +
***
mov esi [ebp+0Ch] +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov ebx ecx +
push 124h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_10A98F1  +
push 0  +
mov ecx eax +
call sub_1038A82  +
mov edi eax +
jmp loc_10A98F3  +
xor edi edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
test edi edi +
jnz loc_10A9902  +
mov eax 8007000Eh +
jmp loc_10A993D  +
push dword ptr [ebp+0Ch]  +
lea ecx [edi+14h] +
call sub_10394ED  +
mov ecx [ebp+8] +
push 0FFFFFFFEh  +
push edi  +
call sub_10A91CF  +
mov eax [ebx+0Ch] +
mov esi [eax] +
cmp esi eax +
jz loc_10A9932  +
mov eax [esi+8] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+4]  +
mov esi [esi] +
cmp esi [ebx+0Ch] +
jnz loc_10A9921  +
mov eax [ebp+10h] +
test eax eax +
jz loc_10A993B  +
mov [eax] edi +
xor eax eax +
call sub_1001FCF  +
retn 0Ch  +
***
mov eax offset dword_10D902C +
call sub_1001F95  +
mov ebx ecx +
push 124h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_10A997B  +
push 1  +
mov ecx eax +
call sub_1038A82  +
mov edi eax +
jmp loc_10A997D  +
xor edi edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
test edi edi +
jnz loc_10A998C  +
mov eax 8007000Eh +
jmp loc_10A99C7  +
push dword ptr [ebp+0Ch]  +
lea ecx [edi+14h] +
call sub_10394ED  +
mov ecx [ebp+8] +
push 0FFFFFFFEh  +
push edi  +
call sub_10A91CF  +
mov eax [ebx+0Ch] +
mov esi [eax] +
cmp esi eax +
jz loc_10A99BC  +
mov eax [esi+8] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+4]  +
mov esi [esi] +
cmp esi [ebx+0Ch] +
jnz loc_10A99AB  +
mov eax [ebp+10h] +
test eax eax +
jz loc_10A99C5  +
mov [eax] edi +
xor eax eax +
call sub_1001FCF  +
retn 0Ch  +
***
push 28h  +
mov eax offset byte_10DD7F5 +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCfavoritexml_0  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [esi+4] +
jmp loc_10A9A0C  +
mov edi [edi] +
add edi 8 +
cmp [edi] ebx +
jnz loc_10A9A07  +
push 124h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-14h] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx ebx +
jz loc_10A9A32  +
push ebx  +
call sub_1038A82  +
mov esi eax +
jmp loc_10A9A34  +
xor esi esi +
push 8007000Eh  +
push esi  +
lea eax [ebp-34h] +
push eax  +
mov [ebp-4] bl +
mov [edi] esi +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10A9A78  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
mov eax [ebp-10h] +
mov eax [eax+8] +
mov ecx [ebp+8] +
push ebx  +
push esi  +
mov [esi+4] eax +
call sub_101EA69  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
lea eax [edi+8] +
push eax  +
lea ecx [esi+8] +
call sub_10A96A2  +
add edi 0A8h +
push edi  +
lea ecx [esi+0A8h] +
call sub_109423E  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCfavoritesAddt  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+14h]  +
lea ecx [ebp-134h] +
push esi  +
push dword ptr [ebp+8]  +
call sub_10AA301  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-134h] +
mov byte ptr [ebp-4] 1 +
call sub_10A9CAD  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jz loc_10A9BB7  +
lea ecx [ebp-20h] +
call esi  +
mov esi eax +
lea ecx [ebp-134h] +
mov byte ptr [ebp-4] 0 +
call sub_10AA37E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 10h  +
push 8000FFFFh  +
push dword ptr [ebp-10h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10A9B8A  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-10h] +
call sub_10A9251  +
mov ecx [ebp-10h] +
push dword ptr [ebp+10h]  +
add ecx 64h +
call sub_10A9AE3  +
xor esi esi +
jmp loc_10A9B91  +
***
push offset aHtml06e1cb7b19  +
call sub_10C9BCB  +
mov dword_10FD654 eax +
xor eax eax +
inc eax  +
retn 8  +
***
push dword_10FD654  +
call ds:IsWindow  +
test eax eax +
jz loc_10A9C87  +
push 0  +
push 0  +
push 10h  +
push dword_10FD654  +
call ds:PostMessageW  +
and dword_10FD654 0 +
xor eax eax +
inc eax  +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
and dword ptr [esi+0FCh] 0 +
call dword ptr [eax+0C0h]  +
cmp eax 1 +
jz loc_10A9CCE  +
xor eax eax +
inc eax  +
jmp loc_10A9CE3  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10A9CDD  +
mov ecx [esi+0FCh] +
mov [eax] ecx +
mov eax [esi+0F8h] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
and dword ptr [esi+0FCh] 0 +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
lea ecx [esi+0B0h] +
mov dword ptr [esi+0F8h] 80004005h +
call ?GetWindowTextW@CWnd@@QBEHPAGH@Z  +
test eax eax +
jz loc_10A9D9C  +
push ebx  +
lea ebx [esi+60h] +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+0C4h]  +
mov [ebp+var_210] eax +
test eax eax +
jz loc_10A9D9B  +
mov eax [esi+0F0h] +
push edi  +
lea edi [esi+0F4h] +
push dword ptr [edi]  +
add eax 4 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [ebx] +
and dword ptr [edi] 0 +
push 0  +
push ebx  +
call dword ptr [eax+0C0h]  +
mov ecx [esi+0F0h] +
lea eax [esi+0FCh] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_210]  +
call sub_10A98C0  +
mov ecx esi +
mov [esi+0F8h] eax +
call ?OnOK@CDialog@@MAEXXZ  +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn   +
***
mov eax ds:?messageMap@CDialog@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?OnSysColorChange@CWnd@@IAEXXZ  +
push 0  +
push offset loc_10C9E01  +
push dword ptr [esi+20h]  +
call ds:EnumChildWindows  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push 104h  +
lea eax [esi+0A0h] +
push eax  +
push 0AFh  +
call ?GetDlgItemTextW@CWnd@@QBEHHPAGH@Z  +
mov ecx esi +
pop esi  +
jmp ?OnOK@CDialog@@MAEXXZ  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+144h] 0 +
mov eax [ebp+0Ch] +
jz loc_10A9E85  +
mov dword ptr [ecx+140h] 1 +
and dword ptr [eax] 0 +
jmp loc_10A9E8B  +
mov dword ptr [eax] 1 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+0Ch] +
and dword ptr [ebx] 0 +
push esi  +
mov esi ecx +
mov ecx [esi+144h] +
test ecx ecx +
jz loc_10A9EE7  +
push edi  +
mov edi [ebp+8] +
mov eax [edi+1Ch] +
test eax eax +
jz loc_10A9EDF  +
cmp word ptr [eax] 0 +
jz loc_10A9EDF  +
push eax  +
push ecx  +
mov ecx [esi+138h] +
call sub_10A93F4  +
mov dword ptr [ebx] 1 +
push dword ptr [edi+1Ch]  +
lea ecx [esi+0B0h] +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
and dword ptr [esi+144h] 0 +
pop edi  +
and dword ptr [esi+140h] 0 +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+60h] +
mov eax [edi] +
push edi  +
call dword ptr [eax+0C4h]  +
mov ecx [esi+0B8h] +
mov [esi+0B0h] eax +
test ecx ecx +
jz loc_10A9F89  +
mov eax [esi+0B4h] +
add eax 4 +
mov edx [eax] +
push ecx  +
push eax  +
call dword ptr [edx+4]  +
mov eax [edi] +
push 0  +
push edi  +
call dword ptr [eax+0C0h]  +
and dword ptr [esi+0B8h] 0 +
pop edi  +
mov ecx esi +
pop esi  +
jmp ?OnOK@CDialog@@MAEXXZ  +
***
test ecx ecx +
jz locret_10A9FA2  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push dword ptr [ebp+10h]  +
add ecx 40h +
push dword ptr [ebp+0Ch]  +
push 0  +
push 0  +
call ?MoveWindow@CWnd@@QAEXHHHHH@Z  +
pop ebp  +
retn 0Ch  +
***
add ecx 40h +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
retn 4  +
***
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
cmp dword ptr [ebp+10h] 0 +
mov esi eax +
jnz loc_10AA02C  +
call ds:GetFocus  +
cmp eax esi +
jnz loc_10AA02C  +
push 0  +
push esi  +
push dword ptr [ebp+8]  +
call ds:GetNextDlgTabItem  +
test eax eax +
jz loc_10AA02C  +
cmp eax esi +
jz loc_10AA02C  +
push eax  +
call ds:SetFocus  +
push dword ptr [ebp+10h]  +
push esi  +
call ds:EnableWindow  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_10AA05C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CEdit@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10AA13B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
push 0C1h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_10AA17C  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
add eax 4 +
cmp eax [ebp+arg_4] +
jnz loc_10AA172  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:SendMessageW +
push edi  +
push [ebp+lParam]  +
mov edi ecx +
push [ebp+wParam]  +
push 0B1h  +
push dword ptr [edi+20h]  +
call esi  +
xor eax eax +
cmp [ebp+arg_8] eax +
jnz loc_10AA1BA  +
push eax  +
push eax  +
push 0B7h  +
push dword ptr [edi+20h]  +
call esi  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
sar eax 2 +
mov ecx eax +
shl ecx 2 +
sub esi ecx +
test eax eax +
jle loc_10AA1F0  +
push ecx  +
push [ebp+arg_0]  +
push ecx  +
push esi  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call ??0CDialog@@QAE@IPAVCWnd@@@Z  +
mov dword ptr [esi] offset off_10AA224 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+10h]  +
push 0AAh  +
call sub_10AA1FA  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+60h] +
mov dword ptr [esi] offset off_1003E3C +
call sub_10C471B  +
lea ecx [esi+0B0h] +
mov byte ptr [ebp-4] 1 +
call sub_10AA040  +
mov eax [ebp+0Ch] +
and dword ptr [esi+0F4h] 0 +
lea edi [esi+100h] +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
mov [esi+0F0h] eax +
call ??0CString@@QAE@XZ  +
push dword ptr [ebp+8]  +
mov ecx edi +
mov byte ptr [ebp-4] 3 +
call ??4CString@@QAEABV0@PBG@Z  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1003E3C +
mov ecx [esi+0F4h] +
mov dword ptr [ebp-4] 3 +
test ecx ecx +
jz loc_10AA3C4  +
mov eax [esi+0F0h] +
add eax 4 +
mov edx [eax] +
push ecx  +
push eax  +
call dword ptr [edx+4]  +
lea eax [esi+60h] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+0C0h]  +
lea edi [esi+60h] +
mov ecx edi +
call ?Detach@CWnd@@QAEPAUHWND__@@XZ  +
lea ebx [esi+0B0h] +
mov ecx ebx +
call ?Detach@CWnd@@QAEPAUHWND__@@XZ  +
lea ecx [esi+100h] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call ??1CEdit@@UAE@XZ  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call sub_10C454A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CDialog@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push esi  +
push 0ACh  +
lea ecx [esi+60h] +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
test eax eax +
jnz loc_10AA434  +
mov eax 8000FFFFh +
pop esi  +
retn   +
push 0ABh  +
mov ecx esi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
test eax eax +
jz loc_10AA42D  +
push dword ptr [eax+20h]  +
lea ecx [esi+0B0h] +
call ?Attach@CWnd@@QAEHPAUHWND__@@@Z  +
neg eax  +
sbb eax eax +
and eax 7FFF0001h +
add eax 8000FFFFh +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
push 0AEh  +
call sub_10AA1FA  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+60h] +
mov dword ptr [esi] offset off_1003FCC +
call sub_10AA040  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1003FCC +
lea edi [esi+60h] +
mov ecx edi +
mov dword ptr [ebp-4] 1 +
call ?Detach@CWnd@@QAEPAUHWND__@@XZ  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call ??1CEdit@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CDialog@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
call ?OnInitDialog@CDialog@@UAEHXZ  +
push 0AFh  +
mov ecx esi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
test eax eax +
jz loc_10AA53F  +
mov eax [eax+20h] +
add esi 60h +
push eax  +
mov ecx esi +
call ?Attach@CWnd@@QAEHPAUHWND__@@@Z  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
push 0B5h  +
lea eax [ebp-10h] +
push eax  +
call sub_101220E  +
push dword ptr [ebp-10h]  +
mov ecx esi +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
push 0  +
push dword ptr [ebp-10h]  +
call ds:lstrlenW  +
push eax  +
push 0  +
mov ecx esi +
call sub_10AA188  +
mov ecx esi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CString@@QAE@XZ  +
xor eax eax +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+0Ch]  +
push 0B0h  +
call sub_10AA1FA  +
xor edi edi +
lea ecx [esi+60h] +
mov [ebp-4] edi +
mov dword ptr [esi] offset off_1004144 +
call sub_10C471B  +
lea ecx [esi+0B0h] +
mov byte ptr [ebp-4] 1 +
call sub_1030614  +
lea ecx [esi+0F0h] +
mov byte ptr [ebp-4] 2 +
call sub_1030614  +
lea eax [esi+130h] +
mov [eax+4] edi +
mov dword ptr [eax] offset off_10083D0 +
mov eax [ebp+8] +
mov [esi+138h] eax +
mov [esi+13Ch] edi +
mov [esi+140h] edi +
mov [esi+144h] edi +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1004144 +
mov ecx [esi+13Ch] +
mov dword ptr [ebp-4] 4 +
test ecx ecx +
jz loc_10AA698  +
mov eax [esi+138h] +
add eax 4 +
mov edx [eax] +
push ecx  +
push eax  +
call dword ptr [edx+4]  +
lea eax [esi+60h] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+0C0h]  +
lea edi [esi+60h] +
mov ecx edi +
call ?Detach@CWnd@@QAEPAUHWND__@@XZ  +
lea ebx [esi+0B0h] +
mov ecx ebx +
call ?Detach@CWnd@@QAEPAUHWND__@@XZ  +
lea ecx [esi+0F0h] +
call ?Detach@CWnd@@QAEPAUHWND__@@XZ  +
lea ecx [esi+130h] +
mov byte ptr [ebp-4] 3 +
mov dword ptr [ecx] offset off_10083D0 +
call sub_100F62A  +
lea ecx [esi+0F0h] +
mov byte ptr [ebp-4] 2 +
call ??1CStatic@@UAE@XZ  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call ??1CStatic@@UAE@XZ  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call sub_10C454A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CDialog@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
xor eax eax +
cmp [ecx+140h] eax +
jz ?OnOK@CDialog@@MAEXXZ  +
push eax  +
push eax  +
push 1116h  +
push dword ptr [ecx+80h]  +
call ds:SendMessageW  +
retn   +
***
push 2D8h  +
mov eax offset dword_10DDAC0 +
call sub_100C4D0  +
mov eax [ebp+8] +
mov edi [eax+5Ch] +
push 0C8h  +
lea eax [ebp-0D8h] +
push 0  +
push eax  +
mov esi ecx +
call memset  +
mov eax [esi+138h] +
mov ecx [eax] +
add esp 0Ch +
push 64h  +
lea edx [ebp-0D8h] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx+14h]  +
lea eax [ebp-0D8h] +
push eax  +
lea ecx [esi+0B0h] +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
mov eax [esi+138h] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jz loc_10AA7D9  +
lea ecx [ebp-2E4h] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
push 0B9h  +
lea eax [ebp-2E4h] +
push eax  +
call sub_101220E  +
push dword ptr [ebp-2E4h]  +
lea ecx [esi+0F0h] +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2E4h] +
call ??1CString@@QAE@XZ  +
jmp loc_10AA81A  +
push 208h  +
lea eax [ebp-2E0h] +
push 0  +
push eax  +
call memset  +
mov eax [esi+138h] +
mov ecx [eax] +
add esp 0Ch +
push 104h  +
lea edx [ebp-2E0h] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx+24h]  +
lea eax [ebp-2E0h] +
push eax  +
lea ecx [esi+0F0h] +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
mov eax [esi+138h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
xor ecx ecx +
cmp edi eax +
setz cl  +
mov eax ecx +
xor ecx ecx +
test eax eax +
setz cl  +
mov edi ecx +
push edi  +
push 0B3h  +
push dword ptr [esi+20h]  +
call near ptr byte_10A9FEC+1  +
push edi  +
push 0B1h  +
push dword ptr [esi+20h]  +
call near ptr byte_10A9FEC+1  +
push edi  +
push 0B2h  +
push dword ptr [esi+20h]  +
call near ptr byte_10A9FEC+1  +
call sub_100C50D  +
retn 8  +
***
push 2B0h  +
mov eax offset dword_10DDB24 +
call sub_100C4D0  +
mov esi ecx +
lea edi [esi+60h] +
mov eax [edi] +
push edi  +
call dword ptr [eax+0C4h]  +
mov ebx eax +
test ebx ebx +
jnz loc_10AA8BF  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AA93D  +
cmp byte ptr [eax+19h] 2 +
jb loc_10AA93D  +
push offset dword_106C770  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10AA93D  +
mov eax [esi+138h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jnz loc_10AA8DF  +
mov eax [esi+138h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+4]  +
mov ebx eax +
push esi  +
lea ecx [ebp-2B8h] +
call near ptr dword_10AA468+29h  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-2B8h] +
call sub_10BA1E7  +
cmp eax 1 +
jnz loc_10AA92E  +
mov ecx [esi+138h] +
and dword ptr [ebp-2BCh] 0 +
lea eax [ebp-2BCh] +
push eax  +
lea eax [ebp-218h] +
push eax  +
push ebx  +
call near ptr dword_10A9948+2  +
test eax eax +
jl loc_10AA92E  +
mov eax [edi] +
push ebx  +
push edi  +
call dword ptr [eax+0D0h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2B8h] +
call sub_10AA4D0  +
call sub_100C50D  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+60h] +
mov eax [esi] +
push esi  +
call dword ptr [eax+0C4h]  +
mov ebx eax +
test ebx ebx +
jz loc_10AA99A  +
mov eax [edi+138h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
cmp ebx eax +
jz loc_10AA99A  +
mov eax [esi] +
push 1  +
push ebx  +
push esi  +
call dword ptr [eax+0C8h]  +
mov ecx esi +
mov [ebp-4] eax +
mov [edi+144h] ebx +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
push dword ptr [ebp-4]  +
mov ecx esi +
call sub_107ED11  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100427C +
mov ecx [esi+0B8h] +
mov dword ptr [ebp-4] 1 +
test ecx ecx +
jz loc_10AAA39  +
mov eax [esi+0B4h] +
add eax 4 +
mov edx [eax] +
push ecx  +
push eax  +
call dword ptr [edx+4]  +
lea eax [esi+60h] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+0C0h]  +
lea edi [esi+60h] +
mov ecx edi +
call ?Detach@CWnd@@QAEPAUHWND__@@XZ  +
mov ecx edi +
mov byte ptr [ebp-4] 0 +
call sub_10C454A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CDialog@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
mov edi ecx +
call ?Default@CWnd@@IAEJXZ  +
cmp eax 0FFFFFFFFh +
jnz loc_10AAA7D  +
or eax eax +
jmp loc_10AAAEB  +
push ebx  +
push esi  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [edi+20h]  +
call ds:GetClientRect  +
push 3E8h  +
push edi  +
lea eax [ebp-10h] +
push eax  +
lea esi [edi+40h] +
push 10001600h  +
mov ecx esi +
call ?Create@CTreeCtrl@@QAEHKABUtagRECT@@PAVCWnd@@I@Z  +
xor eax eax +
cmp esi eax +
jnz loc_10AAAAF  +
xor ecx ecx +
jmp loc_10AAAB2  +
mov ecx [esi+20h] +
cmp esi eax +
jnz loc_10AAABA  +
xor ebx ebx +
jmp loc_10AAABD  +
mov ebx [esi+20h] +
mov esi ds:SendMessageW +
push eax  +
push eax  +
push eax  +
push 111Ch  +
push ecx  +
call esi  +
add eax 4 +
push eax  +
push 111Bh  +
push ebx  +
call esi  +
lea eax [edi+80h] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx]  +
pop esi  +
xor eax eax +
pop ebx  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+5Ch] +
cmp byte ptr [eax+10h] 0 +
push esi  +
jz loc_10AAB0B  +
xor esi esi +
jmp loc_10AAB0E  +
lea esi [eax+64h] +
push dword ptr [ecx+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 0  +
push esi  +
push 87Ah  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10AA1C5  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10AAB73  +
mov eax [eax+4] +
push eax  +
push [ebp+wParam]  +
push 1109h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
push eax  +
call ?FromHandle@CImageList@@SGPAV1@PAU_IMAGELIST@@@Z  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CDialog@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10AABAE  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10AA37E  +
test byte ptr [ebp+8] 1 +
jz loc_10AABD4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCaddfavdialogO  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx esi +
call ?OnInitDialog@CDialog@@UAEHXZ  +
mov ecx esi +
call sub_10AA416  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AAC6F  +
push 10h  +
push 320Dh  +
call ds:?MMCErrorBox@@YGHII@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AAC61  +
cmp byte ptr [eax+19h] 2 +
jb loc_10AAC61  +
push offset dword_106C770  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 2  +
mov ecx esi +
call ?EndDialog@CDialog@@QAEXH@Z  +
jmp loc_10AAE23  +
push dword ptr [esi+0D0h]  +
mov edi ds:IsWindow +
call edi  +
test eax eax +
jnz loc_10AACA9  +
push 10h  +
push 320Dh  +
call ds:?MMCErrorBox@@YGHII@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AAC61  +
cmp byte ptr [eax+19h] 2 +
jb loc_10AAC61  +
push offset dword_106C770  +
push 0Bh  +
jmp loc_10AAC56  +
push dword ptr [esi+80h]  +
call edi  +
test eax eax +
jnz loc_10AACE0  +
push 10h  +
push 320Dh  +
call ds:?MMCErrorBox@@YGHII@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AAC61  +
cmp byte ptr [eax+19h] 2 +
jb loc_10AAC61  +
push offset dword_106C770  +
push 0Ch  +
jmp loc_10AAC56  +
lea edi [esi+100h] +
mov eax [edi] +
lea ebx [esi+0B0h] +
push eax  +
mov ecx ebx +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
mov edi [edi] +
push 0  +
push edi  +
call ds:lstrlenW  +
push eax  +
push 0  +
mov ecx ebx +
call sub_10AA188  +
mov ecx ebx +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
lea edi [esi+60h] +
xor eax eax +
cmp edi eax +
jnz loc_10AAD1F  +
xor ecx ecx +
jmp loc_10AAD22  +
mov ecx [edi+20h] +
cmp edi eax +
jnz loc_10AAD2B  +
mov [ebp-10h] eax +
jmp loc_10AAD31  +
mov edx [edi+20h] +
mov [ebp-10h] edx +
mov ebx ds:SendMessageW +
push eax  +
push eax  +
push eax  +
push 111Ch  +
push ecx  +
call ebx  +
add eax 4 +
push eax  +
push 111Bh  +
push dword ptr [ebp-10h]  +
call ebx  +
lea ebx [esi+0A0h] +
mov eax [ebx] +
push 2  +
push ebx  +
call dword ptr [eax]  +
push 8000FFFFh  +
push dword ptr [esi+0F0h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AADCC  +
push 10h  +
push 320Dh  +
call ds:?MMCErrorBox@@YGHII@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AAC61  +
cmp byte ptr [eax+19h] 2 +
jb loc_10AAC61  +
push offset dword_106C770  +
push 0Dh  +
jmp loc_10AAC56  +
mov ecx [esi+0F0h] +
push 0  +
call sub_10A9436  +
push eax  +
mov ecx edi +
call sub_10AAB64  +
mov eax [esi+0F0h] +
lea edx [esi+0F4h] +
push edx  +
add eax 4 +
mov ecx [eax] +
mov edx edi +
neg edx  +
sbb edx edx +
and edx ebx +
push edx  +
push eax  +
call dword ptr [ecx]  +
push dword ptr [esi+0F0h]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+0C0h]  +
mov esi [esi+0F0h] +
mov eax [esi] +
mov ebx [edi] +
push esi  +
call dword ptr [eax]  +
push eax  +
push edi  +
call dword ptr [ebx+0CCh]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10AA4D0  +
test byte ptr [ebp+8] 1 +
jz loc_10AAF1C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10AA652  +
test byte ptr [ebp+8] 1 +
jz loc_10AAF42  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100C4D0  +
mov esi ecx +
push 0  +
lea ecx [ebp-80h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCorganizefavdi  +
lea ecx [ebp-80h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx esi +
call ?OnInitDialog@CDialog@@UAEHXZ  +
push esi  +
lea edi [esi+60h] +
push 0ACh  +
mov ecx edi +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push dword ptr [esi+80h]  +
mov ebx ds:IsWindow +
call ebx  +
test eax eax +
jnz loc_10AAFE4  +
push 10h  +
push 320Dh  +
call ds:?MMCErrorBox@@YGHII@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AAFD6  +
cmp byte ptr [eax+19h] 2 +
jb loc_10AAFD6  +
push offset dword_106C770  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 2  +
mov ecx esi +
call ?EndDialog@CDialog@@QAEXH@Z  +
jmp loc_10AB205  +
push 0ABh  +
mov ecx esi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
test eax eax +
jz loc_10AAFF7  +
mov eax [eax+20h] +
lea ecx [esi+0B0h] +
push eax  +
call ?Attach@CWnd@@QAEHPAUHWND__@@@Z  +
push dword ptr [esi+0D0h]  +
call ebx  +
test eax eax +
jnz loc_10AB037  +
push 10h  +
push 320Dh  +
call ds:?MMCErrorBox@@YGHII@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AAFD6  +
cmp byte ptr [eax+19h] 2 +
jb loc_10AAFD6  +
push offset dword_106C770  +
push 0Fh  +
jmp loc_10AAFCB  +
push 0B4h  +
mov ecx esi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
test eax eax +
jz loc_10AB04A  +
mov eax [eax+20h] +
push eax  +
lea ecx [esi+0F0h] +
call ?Attach@CWnd@@QAEHPAUHWND__@@@Z  +
push dword ptr [esi+110h]  +
call ebx  +
test eax eax +
jnz loc_10AB095  +
push 10h  +
push 320Dh  +
call ds:?MMCErrorBox@@YGHII@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AAFD6  +
cmp byte ptr [eax+19h] 2 +
jb loc_10AAFD6  +
push offset dword_106C770  +
push 10h  +
jmp loc_10AAFCB  +
xor eax eax +
cmp edi eax +
jnz loc_10AB09F  +
xor ecx ecx +
jmp loc_10AB0A2  +
mov ecx [edi+20h] +
cmp edi eax +
jnz loc_10AB0AB  +
mov [ebp-70h] eax +
jmp loc_10AB0B1  +
mov edx [edi+20h] +
mov [ebp-70h] edx +
mov ebx ds:SendMessageW +
push eax  +
push eax  +
push eax  +
push 111Ch  +
push ecx  +
call ebx  +
add eax 4 +
push eax  +
push 111Bh  +
push dword ptr [ebp-70h]  +
call ebx  +
push 8000FFFFh  +
push dword ptr [esi+138h]  +
lea eax [ebp-90h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-80h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-90h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-80h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AB145  +
push 10h  +
push 320Dh  +
call ds:?MMCErrorBox@@YGHII@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AAFD6  +
cmp byte ptr [eax+19h] 2 +
jb loc_10AAFD6  +
push offset dword_106C770  +
push 11h  +
jmp loc_10AAFCB  +
mov ecx [esi+138h] +
push 0  +
call sub_10A9436  +
push eax  +
mov ecx edi +
call sub_10AAB64  +
mov eax [esi+138h] +
lea edx [esi+13Ch] +
push edx  +
add eax 4 +
mov ecx [eax] +
mov edx edi +
neg edx  +
sbb edx edx +
lea ebx [esi+0A0h] +
and edx ebx +
push edx  +
push eax  +
call dword ptr [ecx]  +
push dword ptr [esi+138h]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+0C0h]  +
mov eax [esi+138h] +
mov ecx [eax] +
mov ebx [edi] +
push eax  +
call dword ptr [ecx]  +
push eax  +
push edi  +
call dword ptr [ebx+0CCh]  +
mov ecx edi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
lea edi [esi+0B0h] +
mov ecx edi +
call sub_1097F9B  +
mov ebx eax +
test ebx ebx +
jz loc_10AB205  +
and dword ptr [ebp-6Ch] 0 +
push 58h  +
lea eax [ebp-68h] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp-6Ch] +
push eax  +
push 5Ch  +
push dword ptr [ebx+4]  +
call ds:GetObjectW  +
lea eax [ebp-6Ch] +
add esi 130h +
push eax  +
mov ecx esi +
mov dword ptr [ebp-5Ch] 2BCh +
call sub_10305F1  +
test eax eax +
jz loc_10AB205  +
push 1  +
push esi  +
mov ecx edi +
call sub_1033C54  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-80h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
call sub_100C50D  +
retn   +
***
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10AB2EB  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10AB2EB  +
push eax  +
push offset dword_106C770  +
push 13h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0C8h] +
call sub_10AA9F3  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10AA9F3  +
test byte ptr [ebp+8] 1 +
jz loc_10AB31F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCfavfolderdial  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx esi +
call ?OnInitDialog@CDialog@@UAEHXZ  +
push esi  +
lea edi [esi+60h] +
push 0ACh  +
mov ecx edi +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
push dword ptr [esi+80h]  +
call ds:IsWindow  +
test eax eax +
jnz loc_10AB3BC  +
push 10h  +
push 320Dh  +
call ds:?MMCErrorBox@@YGHII@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AB3AE  +
cmp byte ptr [eax+19h] 2 +
jb loc_10AB3AE  +
push offset dword_106C770  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 2  +
mov ecx esi +
call ?EndDialog@CDialog@@QAEXH@Z  +
jmp loc_10AB4CF  +
cmp edi ebx +
jnz loc_10AB3C4  +
xor eax eax +
jmp loc_10AB3C7  +
mov eax [edi+20h] +
cmp edi ebx +
jnz loc_10AB3D0  +
mov [ebp-10h] ebx +
jmp loc_10AB3D6  +
mov ecx [edi+20h] +
mov [ebp-10h] ecx +
push ebx  +
push ebx  +
push ebx  +
mov ebx ds:SendMessageW +
push 111Ch  +
push eax  +
call ebx  +
add eax 4 +
push eax  +
push 111Bh  +
push dword ptr [ebp-10h]  +
call ebx  +
lea ebx [esi+0A0h] +
mov eax [ebx] +
push 2  +
push ebx  +
call dword ptr [eax]  +
push 8000FFFFh  +
push dword ptr [esi+0B4h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AB471  +
push 10h  +
push 320Dh  +
call ds:?MMCErrorBox@@YGHII@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AB3AE  +
cmp byte ptr [eax+19h] 2 +
jb loc_10AB3AE  +
push offset dword_106C770  +
push 15h  +
jmp loc_10AB3A3  +
mov ecx [esi+0B4h] +
push 0  +
call sub_10A9436  +
push eax  +
mov ecx edi +
call sub_10AAB64  +
mov eax [esi+0B4h] +
lea edx [esi+0B8h] +
push edx  +
add eax 4 +
mov ecx [eax] +
mov edx edi +
neg edx  +
sbb edx edx +
and edx ebx +
push edx  +
push eax  +
call dword ptr [ecx]  +
push dword ptr [esi+0B4h]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+0C0h]  +
mov esi [esi+0B4h] +
mov eax [esi] +
mov ebx [edi] +
push esi  +
call dword ptr [eax]  +
push eax  +
push edi  +
call dword ptr [ebx+0CCh]  +
mov ecx edi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfavtreectrlIn  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AB59F  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AB5DB  +
mov ecx [ebp+0Ch] +
push 0  +
lea esi [edi+40h] +
call sub_10A9436  +
push eax  +
mov ecx esi +
call sub_10AAB64  +
push dword ptr [ebp+10h]  +
lea eax [edi+80h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
push dword ptr [ebp+0Ch]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+0C0h]  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
mov edi [ebp+10h] +
mov esi [ebp+0Ch] +
mov [ebp-238h] eax +
mov eax [ebp+14h] +
mov [ebp-234h] ecx +
mov [ebp-224h] eax +
test edi edi +
jz loc_10AB7B3  +
mov ebx ds:AppendMenuW +
mov eax [esi] +
push edi  +
push esi  +
mov dword ptr [ebp-230h] 1000h +
call dword ptr [eax+20h]  +
test eax eax +
jz loc_10AB74E  +
mov eax [esi] +
push edi  +
push esi  +
call dword ptr [eax+8]  +
and dword ptr [ebp-228h] 0 +
mov [ebp-21Ch] eax +
mov dword ptr [ebp-22Ch] offset off_10025A8 +
and dword ptr [ebp-4] 0 +
call ds:CreatePopupMenu  +
push eax  +
lea ecx [ebp-22Ch] +
call ?Attach@CMenu@@QAEHPAUHMENU__@@@Z  +
cmp dword ptr [ebp-21Ch] 0 +
jz loc_10AB6E1  +
push dword ptr [ebp-224h]  +
mov ecx [ebp-234h] +
push dword ptr [ebp-21Ch]  +
lea eax [ebp-22Ch] +
push esi  +
push eax  +
call sub_10AB62F  +
jmp loc_10AB722  +
lea ecx [ebp-220h] +
call ??0CString@@QAE@XZ  +
push 3412h  +
lea eax [ebp-220h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_101220E  +
push dword ptr [ebp-220h]  +
push 0  +
push 1  +
push dword ptr [ebp-228h]  +
call ebx  +
lea ecx [ebp-220h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-22Ch] +
call ?Detach@CMenu@@QAEPAUHMENU__@@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-22Ch] +
mov dword ptr [ebp-230h] 10h +
mov [ebp-21Ch] eax +
call sub_100BF07  +
jmp loc_10AB76E  +
mov ecx [ebp-224h] +
call sub_102183C  +
mov ecx [ebp-224h] +
mov [ebp-21Ch] eax +
lea eax [ebp+10h] +
push eax  +
call sub_1038786  +
mov eax [esi] +
push 104h  +
lea ecx [ebp-218h] +
push ecx  +
push edi  +
push esi  +
call dword ptr [eax+14h]  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [ebp-21Ch]  +
mov eax [ebp-238h] +
push dword ptr [ebp-230h]  +
push dword ptr [eax+4]  +
call ebx  +
mov eax [esi] +
push edi  +
push esi  +
call dword ptr [eax+0Ch]  +
mov edi eax +
mov [ebp+10h] edi +
test edi edi +
jnz loc_10AB66A  +
call sub_100C50D  +
retn 10h  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-20h] edi +
xor esi esi +
push esi  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewOnfavo  +
lea ecx [ebp-30h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AB815  +
cmp byte ptr [eax+19h] 5 +
jb loc_10AB815  +
push offset dword_106C770  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov dword ptr [ebp-1Ch] offset off_10025A8 +
mov [ebp-18h] esi +
mov byte ptr [ebp-4] 1 +
call ds:CreatePopupMenu  +
push eax  +
lea ecx [ebp-1Ch] +
call ?Attach@CMenu@@QAEHPAUHMENU__@@@Z  +
mov ebx ds:AppendMenuW +
cmp dword_10F55CC esi +
jnz loc_10AB8FE  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
mov edi 2EECh +
push edi  +
lea eax [ebp-10h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_101220E  +
push 0Ah  +
lea ecx [ebp-10h] +
call ?Find@CString@@QBEHG@Z  +
cmp eax esi +
jle loc_10AB893  +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-10h] +
call ?Left@CString@@QBE?AV1@H@Z  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
push dword ptr [ebp-10h]  +
push edi  +
mov edi 1000h +
push edi  +
push dword ptr [ebp-18h]  +
call ebx  +
mov esi 2EEDh +
push esi  +
lea eax [ebp-10h] +
push eax  +
call sub_101220E  +
push 0Ah  +
lea ecx [ebp-10h] +
call ?Find@CString@@QBEHG@Z  +
test eax eax +
jle loc_10AB8E5  +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-10h] +
call ?Left@CString@@QBE?AV1@H@Z  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 4 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
push dword ptr [ebp-10h]  +
push esi  +
push edi  +
push dword ptr [ebp-18h]  +
call ebx  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
mov edi [ebp-20h] +
mov eax [edi+40h] +
mov esi [eax+0DCh] +
xor eax eax +
mov [ebp-3Ch] eax +
mov [ebp-38h] eax +
mov [ebp-34h] eax +
mov [ebp-14h] eax +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 5 +
call sub_1038786  +
test esi esi +
jz loc_10AB978  +
mov ecx esi +
call sub_10285D9  +
test al al +
jnz loc_10AB978  +
mov eax [esi] +
push esi  +
call dword ptr [eax]  +
test eax eax +
jz loc_10AB978  +
mov ecx [esi] +
push eax  +
push esi  +
call dword ptr [ecx+8]  +
mov [ebp-14h] eax +
test eax eax +
jz loc_10AB978  +
cmp dword_10F55CC 0 +
jnz loc_10AB965  +
push offset word_100A5FC  +
push 0  +
push 800h  +
push dword ptr [ebp-18h]  +
call ebx  +
lea eax [ebp-40h] +
push eax  +
push dword ptr [ebp-14h]  +
lea eax [ebp-1Ch] +
push esi  +
push eax  +
mov ecx edi +
call sub_10AB62F  +
mov esi [ebp+10h] +
xor ecx ecx +
test esi esi +
jz loc_10AB995  +
mov dword ptr [ebp-54h] 14h +
lea edi [ebp-50h] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp-20h] +
lea ecx [ebp-54h] +
mov eax [edi+20h] +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 1C2h  +
push dword ptr [ebp-18h]  +
call ds:TrackPopupMenuEx  +
mov ebx eax +
sub eax 0 +
jz loc_10ABB28  +
sub eax 2EECh +
jz loc_10ABB21  +
dec eax  +
mov eax [edi+40h] +
mov eax [eax+0DCh] +
jz loc_10ABB17  +
mov edi 8000FFFFh +
push edi  +
push eax  +
lea eax [ebp-84h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-84h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10ABB28  +
xor eax eax +
cmp [ebp-3Ch] eax +
jz loc_10ABA28  +
mov eax [ebp-38h] +
sub eax [ebp-3Ch] +
sar eax 2 +
cmp ebx eax +
sbb eax eax +
and eax 7FFF0001h +
add eax edi +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10ABB28  +
mov eax [ebp-3Ch] +
mov ebx [eax+ebx*4] +
push edi  +
push ebx  +
lea eax [ebp-94h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 7 +
call esi  +
lea ecx [ebp-94h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10ABB28  +
mov ecx [ebp-20h] +
add ebx 64h +
add ecx 44h +
mov eax [ecx] +
push ebx  +
lea edx [ebp-64h] +
push edx  +
call dword ptr [eax+44h]  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push 2EEFh  +
lea eax [ebp-74h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 9 +
call ds:??8SC@mmcerror@@QBE_NABV01@@Z  +
lea ecx [ebp-74h] +
mov bl al +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
test bl bl +
jz loc_10ABB0C  +
push 30h  +
sub esp 10h +
lea eax [ebp-30h] +
mov ecx esp +
mov [ebp+10h] esp +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
call ds:?MMCErrorBox@@YGHVSC@mmcerror@@I@Z  +
lea ecx [ebp-30h] +
call ds:?Clear@SC@mmcerror@@QAEXXZ  +
jmp loc_10ABB28  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_10ABB28  +
push edi  +
mov ecx eax +
call sub_10A9328  +
jmp loc_10ABB28  +
mov ecx edi +
call sub_10901C9  +
lea ecx [ebp-40h] +
call sub_100A67D  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 0 +
call sub_100BF07  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
***
retn   +
***
mov eax offset off_10ABBA0 +
retn   +
***
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov eax ecx +
push 13h  +
lea edx [eax+60h] +
pop ecx  +
lea esi [eax+340h] +
mov edi edx +
movs   +
pop edi  +
mov dword ptr [edx] 4Ch +
pop esi  +
mov ecx eax +
pop ebp  +
jmp loc_10C7ACF  +
***
call sub_100A4F0  +
xor esi esi +
cmp dword_10F6C64 esi +
jnz locret_10ABCA3  +
cmp [ebp-20h] esi +
jz locret_10ABCA3  +
cmp [ebp-1Ch] esi +
jnz loc_10ABC8C  +
call ds:__imp_GetLastError  +
mov edi eax +
jmp loc_10ABC8E  +
xor edi edi +
push dword ptr [ebp-24h]  +
push esi  +
call sub_100B053  +
cmp [ebp-1Ch] esi +
jnz locret_10ABCA3  +
push edi  +
call ds:SetLastError  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_14]  +
mov esi ecx +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ??0CFileDialog@@QAE@HPBG0K0PAVCWnd@@@Z  +
mov dword ptr [esi] offset off_10ABD0C +
mov eax esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_107DFC4  +
test byte ptr [ebp+8] 1 +
jz loc_10ABE1F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A4F0  +
xor edi edi +
cmp dword_10F6C64 edi +
jnz locret_10ABED3  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jz loc_10ABEBD  +
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_10ABEBF  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jz locret_10ABED3  +
push ebx  +
call ds:SetLastError  +
retn   +
***
call sub_100A4F0  +
xor edi edi +
cmp dword_10F6C64 edi +
jnz locret_10ABFB1  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jz loc_10ABF9B  +
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_10ABF9D  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jz locret_10ABFB1  +
push ebx  +
call ds:SetLastError  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call ?AfxGetThreadState@@YGPAV_AFX_THREAD_STATE@@XZ  +
mov edi eax +
xor esi esi +
mov [ebp+var_10] edi +
cmp edi esi +
jnz loc_10AC037  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AC13F  +
cmp byte ptr [eax+19h] 2 +
jb loc_10AC13F  +
push offset dword_10AC148  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10AC13F  +
push dword ptr [ebx+7Ch]  +
call ds:lstrlenW  +
mov ecx [ebx+80h] +
inc eax  +
sub ecx eax +
add ecx ecx +
push ecx  +
mov ecx [ebx+7Ch] +
lea eax [ecx+eax*2] +
push esi  +
push eax  +
call memset  +
add esp 0Ch +
call ds:GetFocus  +
mov ecx ebx +
mov [ebp+hWnd] eax +
mov [ebp+var_4] esi +
call ?PreModal@CDialog@@IAEPAUHWND__@@XZ  +
mov [ebx+64h] eax +
call ?AfxUnhookWindowCreate@@YGHXZ  +
mov eax [ebx+64h] +
cmp eax esi +
jz loc_10AC09A  +
push eax  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_10AC09A  +
push esi  +
push dword ptr [ebx+64h]  +
mov [ebp+var_4] 1 +
call ds:EnableWindow  +
test dword ptr [ebx+94h] 80000h +
jz loc_10AC0AB  +
mov [edi+18h] ebx +
jmp loc_10AC0B1  +
push ebx  +
call ?AfxHookWindowCreate@@YGXPAVCWnd@@@Z  +
push 58h  +
lea edi [ebx+340h] +
push esi  +
push edi  +
call memset  +
add esp 0Ch +
cmp dword ptr [ebx+0ACh] 0 +
push 13h  +
pop ecx  +
lea esi [ebx+60h] +
movs   +
lea esi [ebx+340h] +
mov dword ptr [esi] 58h +
push esi  +
jz loc_10AC0E8  +
call sub_10ABE2B  +
jmp loc_10AC0ED  +
call sub_10ABF09  +
mov [ebp+var_C] eax +
lea eax [ebx+60h] +
push 13h  +
mov edi eax +
pop ecx  +
movs   +
mov dword ptr [eax] 4Ch +
mov eax [ebp+var_10] +
and dword ptr [eax+18h] 0 +
cmp [ebp+var_4] 0 +
jz loc_10AC11B  +
push 1  +
push dword ptr [ebx+344h]  +
call ds:EnableWindow  +
push [ebp+hWnd]  +
call ds:IsWindow  +
test eax eax +
jz loc_10AC131  +
push [ebp+hWnd]  +
call ds:SetFocus  +
mov ecx ebx +
call ?PostModal@CDialog@@IAEXXZ  +
mov eax [ebp+var_C] +
test eax eax +
jnz loc_10AC142  +
push 2  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_10AC17F  +
mov ecx [ebp+arg_8] +
mov edx [ecx] +
mov [eax] edx +
mov edx [ecx+4] +
mov [eax+4] edx +
add eax 8 +
cmp eax [ebp+arg_4] +
jnz loc_10AC16D  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1098509  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
jmp loc_10AC1D3  +
mov ecx [eax] +
mov edx [ebp+arg_C] +
mov [edx] ecx +
mov ecx [eax+4] +
mov edx [ebp+arg_C] +
mov [edx+4] ecx +
add [ebp+arg_C] 8 +
add eax 8 +
cmp eax [ebp+arg_8] +
jnz loc_10AC1BC  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10AC1B2  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
push dword ptr [ebx]  +
call sub_1023B8D  +
push [ebp+lprcSrc]  +
lea ecx [ebp+rcDst] +
mov [ebp+var_C] eax +
call sub_10B5CBE  +
cmp dword ptr [ebx+1Ch] 8 +
jb loc_10AC246  +
mov eax [ebx+8] +
jmp loc_10AC249  +
lea eax [ebx+8] +
mov [ebp+lprcSrc] eax +
mov eax [ebx+28h] +
mov [ebp+var_4] eax +
cmp eax [ebx+2Ch] +
jz loc_10AC2D2  +
mov ecx [ebp+arg_4] +
or ecx 400h +
mov [ebp+uFormat] ecx +
jmp loc_10AC268  +
mov eax [ebp+var_4] +
push dword ptr [eax]  +
push dword ptr [ebx]  +
call ds:SelectObject  +
push [ebp+uFormat]  +
lea esi [ebp+rcDst] +
lea edi [ebp+Rect] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_4] +
mov edi ds:DrawTextW +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+4]  +
push [ebp+lprcSrc]  +
push dword ptr [ebx]  +
call edi  +
push [ebp+arg_4]  +
lea eax [ebp+rcDst] +
push eax  +
push dword ptr [esi+4]  +
push [ebp+lprcSrc]  +
push dword ptr [ebx]  +
call edi  +
mov eax [esi+4] +
mov ecx [ebp+lprcSrc] +
lea eax [ecx+eax*2] +
mov [ebp+lprcSrc] eax +
mov eax [ebp+Rect.right] +
mov [ebp+rcDst.left] eax +
lea eax [ebp+rcDst] +
add esi 8 +
push eax  +
mov [ebp+var_4] esi +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_10AC2D2  +
cmp esi [ebx+2Ch] +
jnz loc_10AC265  +
mov edi [ebp+arg_8] +
test edi edi +
jz loc_10AC2E0  +
lea esi [ebp+rcDst] +
movs   +
movs   +
movs   +
movs   +
push [ebp+var_C]  +
push dword ptr [ebx]  +
call ds:SelectObject  +
pop edi  +
pop esi  +
mov al 1 +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_10AC325  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_10AC1E7  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
add esp 10h +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_10AC2F9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push offset word_100A5FC  +
call sub_101D1AD  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
test edx edx +
jz loc_10AC3A6  +
cmp word ptr [edx] 0 +
jnz loc_10AC38B  +
push 0Eh  +
jmp loc_10AC3A8  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10AC391  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10AC3A9  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_10AC3BA  +
cmp word ptr [edx] 0 +
jnz loc_10AC3BF  +
mov edx offset aNull +
jmp loc_10AC3BF  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
cmp ebx esi +
jz loc_10AC427  +
push edi  +
lea eax [esi+8] +
push eax  +
lea ecx [ebx+8] +
call ??4CString@@QAEABV0@ABV0@@Z  +
mov eax [ebp+arg_0] +
add esi 0Ch +
lea edi [ebx+0Ch] +
movs   +
movs   +
movs   +
movs   +
lea esi [eax+24h] +
lea edi [ebx+24h] +
movs   +
movs   +
movs   +
movs   +
mov ecx [eax] +
mov [ebx] ecx +
mov eax [eax+4] +
mov [ebx+4] eax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov eax offset off_10AC440 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?OnCmdMsg@CView@@MAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z  +
test eax eax +
jz loc_10AC47F  +
xor eax eax +
inc eax  +
jmp loc_10AC491  +
cmp dword ptr [esi+7Ch] 0 +
jz loc_10AC48F  +
mov ecx [esi+7Ch] +
mov eax [ecx] +
pop esi  +
pop ebp  +
jmp dword ptr [eax+14h]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+6Ch] +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
lea ecx [esi+74h] +
pop esi  +
jmp ?DeleteObject@CGdiObject@@QAEHXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dy]  +
push [ebp+arg_0]  +
push ecx  +
call ds:OffsetRect  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+58h] +
mov edx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov esi ebx +
mov edi edx +
movs   +
movs   +
movs   +
movs   +
cmp byte ptr [ecx+80h] 0 +
jz loc_10AC501  +
mov ecx [edx+0Ch] +
sub ecx eax +
lea eax [ecx-4] +
mov [edx+4] eax +
mov [ebx+0Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
jmp sub_100F62A  +
***
jmp sub_100F62A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:CreatePolygonRgn  +
push eax  +
mov ecx esi +
call ?Attach@CGdiObject@@QAEHPAX@Z  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:PtInRegion  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_10AC583  +
xor edx edx +
jmp loc_10AC586  +
mov edx [eax+4] +
mov eax [ebp+8] +
test eax eax +
jz loc_10AC590  +
mov eax [eax+4] +
push edx  +
push eax  +
push dword ptr [ecx+4]  +
call ds:FillRgn  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
mov eax [ebp+8] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
add ecx 1Ch +
push [ebp+arg_0]  +
call sub_10AC556  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
lea ecx [esi+8] +
call ??0CString@@QAE@XZ  +
and dword ptr [esi+20h] 0 +
mov dword ptr [esi+1Ch] offset off_1008A6C +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
lea ecx [esi+8] +
call ??0CString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+20h] 0 +
mov dword ptr [esi+1Ch] offset off_1008A6C +
push dword ptr [ebp+8]  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_10AC3E8  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+1Ch] +
mov ecx edi +
call ?DeleteObject@CGdiObject@@QAEHXZ  +
push 2  +
push 4  +
add esi 34h +
push esi  +
mov ecx edi +
call sub_10AC52D  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
push esi  +
mov esi [eax+4] +
mov [ecx] edx +
mov [ecx+4] esi +
mov edx [eax] +
mov esi [eax+0Ch] +
add edx 8 +
mov [ecx+8] edx +
mov [ecx+0Ch] esi +
mov edx [eax+8] +
mov esi [eax+0Ch] +
sub edx 9 +
mov [ecx+10h] edx +
mov [ecx+14h] esi +
mov edx [eax+8] +
mov eax [eax+4] +
dec edx  +
mov [ecx+18h] edx +
mov [ecx+1Ch] eax +
pop esi  +
pop ebp  +
retn 8  +
***
push dword ptr [ebp+0Ch]  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+30h]  +
mov edi eax +
push 8025h  +
lea eax [ebp-4Ch] +
push eax  +
lea eax [esi+8] +
push eax  +
mov ecx ebx +
call sub_1046CC1  +
mov eax [ebx] +
push edi  +
mov ecx ebx +
call dword ptr [eax+30h]  +
cmp byte ptr [ebp+14h] 0 +
jz loc_10AC883  +
dec dword ptr [ebp-48h]  +
inc dword ptr [ebp-40h]  +
dec dword ptr [ebp-4Ch]  +
inc dword ptr [ebp-44h]  +
lea eax [ebp-4Ch] +
push eax  +
push dword ptr [ebx+4]  +
call ds:DrawFocusRect  +
mov esi [esi+14h] +
mov edi offset off_1008A04 +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
mov [ebp-24h] edi +
call sub_100F62A  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
mov [ebp-2Ch] edi +
call sub_100F62A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-34h] +
mov dword ptr [ebp-34h] offset off_10089D0 +
call sub_100F62A  +
mov eax esi +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push esi  +
push 1  +
mov esi ecx +
push 0  +
push dword ptr [esi+20h]  +
mov byte ptr [esi+81h] 0 +
call ds:InvalidateRect  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+1Ch] +
mov dword ptr [ecx] offset off_1008A6C +
call sub_100F62A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+8] +
call ??1CString@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabvi_1  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AC983  +
cmp byte ptr [eax+19h] 5 +
jb loc_10AC983  +
push offset dword_106CAC0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AC9CA  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AC9F3  +
push dword ptr [ebp+0Ch]  +
push offset stru_106DAE0  +
push 0  +
push dword ptr [esi+20h]  +
call AccessibleObjectFromWindow  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabvi_2  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10ACACE  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10ACB07  +
mov eax [esi+64h] +
mov [edi] eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10ACAFA  +
cmp byte ptr [eax+19h] 5 +
jb loc_10ACAFA  +
push dword ptr [esi+64h]  +
push offset dword_106CAC0  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1008A04 +
call sub_100F62A  +
test byte ptr [ebp+8] 1 +
jz loc_10ACB95  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1008A6C +
call sub_100F62A  +
test byte ptr [ebp+8] 1 +
jz loc_10ACBC1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabvi_3  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
push 80070057h  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10ACC46  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10ACCBB  +
cmp byte ptr [edi+81h] 0 +
jz loc_10ACC85  +
push 3  +
pop eax  +
mov [esi] ax +
mov eax [edi+68h] +
lea ecx [eax+1] +
mov [esi+8] ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10ACCAE  +
cmp byte ptr [eax+19h] 5 +
jb loc_10ACCAE  +
push ecx  +
push offset dword_106CAC0  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10ACCAE  +
xor eax eax +
mov [esi] ax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10ACCAE  +
cmp byte ptr [eax+19h] 5 +
jb loc_10ACCAE  +
push offset dword_106CAC0  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabvi_4  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
push 80070057h  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10ACD94  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10ACE06  +
cmp dword ptr [edi+68h] 0FFFFFFFFh +
jz loc_10ACDD0  +
push 3  +
pop eax  +
mov [esi] ax +
mov eax [edi+68h] +
lea ecx [eax+1] +
mov [esi+8] ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10ACDF9  +
cmp byte ptr [eax+19h] 5 +
jb loc_10ACDF9  +
push ecx  +
push offset dword_106CAC0  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10ACDF9  +
xor eax eax +
mov [esi] ax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10ACDF9  +
cmp byte ptr [eax+19h] 5 +
jb loc_10ACDF9  +
push offset dword_106CAC0  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCfoldertabvi_0  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+0Ch] ebx +
jl loc_10ACEC0  +
mov eax [ebp+0Ch] +
cmp eax [edi+64h] +
jg loc_10ACEC0  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10ACED8  +
push 80070057h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10ACF1C  +
push dword ptr [ebp+0Ch]  +
call sub_10AC607  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+0Ch] +
push esi  +
call ds:SetRectEmpty  +
mov ecx [ebp+arg_0] +
push 400h  +
push esi  +
lea eax [edi+8] +
push eax  +
call sub_1046CC1  +
add dword ptr [esi+8] 14h +
mov ecx [edi+4] +
mov eax [esi+4] +
lea eax [eax+ecx+4] +
xor ecx ecx +
mov [esi+0Ch] eax +
mov eax [ebp+arg_4] +
push ecx  +
push eax  +
mov ecx esi +
call sub_10AC4B6  +
lea eax [edi+34h] +
push eax  +
push esi  +
mov ecx edi +
call sub_10AC67A  +
mov ecx edi +
call sub_10AC653  +
mov eax [esi+8] +
sub eax [esi] +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabview  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebp+0Ch] 8001h +
jz loc_10AD00E  +
push dword ptr [ebp+10h]  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_10ACE73  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AD00E  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AD02C  +
push dword ptr [ebp+10h]  +
push 0FFFFFFFCh  +
push dword ptr [esi+20h]  +
push dword ptr [ebp+0Ch]  +
call ds:NotifyWinEvent  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push 1  +
mov esi ecx +
push 0  +
push dword ptr [esi+20h]  +
mov byte ptr [esi+81h] 1 +
call ds:InvalidateRect  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
cmp dword ptr [esi+64h] 0 +
jle loc_10AD0E9  +
mov eax [esi+68h] +
inc eax  +
push eax  +
push 8005h  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_10ACF90  +
lea ecx [ebp-10h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop esi  +
leave   +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCfoldertabvi_0  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+0Ch] +
cmp word ptr [eax] 3 +
jz loc_10AD147  +
push 80070057h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AD154  +
push dword ptr [eax+8]  +
mov ecx edi +
push dword ptr [ebp+8]  +
call sub_10ACE73  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call sub_10AC8F4  +
test [ebp+arg_0] 1 +
jz loc_10AD191  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset CopyRect +
lea eax [ebp-0B0h] +
push eax  +
lea eax [ebp-78h] +
push eax  +
mov ecx ebx +
call sub_10AC67A  +
push 6  +
call ds:GetSysColor  +
push eax  +
push 1  +
push 0  +
lea ecx [ebp-80h] +
call ??0CPen@@QAE@HHK@Z  +
lea eax [ebp-80h] +
push eax  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 1 +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
mov esi [ebp-0ACh] +
push esi  +
push dword ptr [ebp-90h]  +
mov edi eax +
lea eax [ebp-70h] +
push eax  +
lea ecx [ebp-64h] +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
push esi  +
push dword ptr [ebp-0B0h]  +
lea ecx [ebp-64h] +
call ?LineTo@CDC@@QAEHHH@Z  +
push esi  +
push dword ptr [ebp-98h]  +
lea eax [ebp-70h] +
push eax  +
lea ecx [ebp-64h] +
call ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z  +
push esi  +
push dword ptr [ebp-88h]  +
lea ecx [ebp-64h] +
call ?LineTo@CDC@@QAEHHH@Z  +
push edi  +
lea ecx [ebp-64h] +
call ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z  +
lea ecx [ebp-80h] +
mov byte ptr [ebp-4] 0 +
mov dword ptr [ebp-80h] offset off_1008A04 +
call sub_100F62A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-64h] +
call ??1CPaintDC@@UAE@XZ  +
call sub_100C50D  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+rc] +
mov edi ecx +
push eax  +
push dword ptr [edi+20h]  +
call ds:GetClientRect  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_10AD358  +
mov eax [edi+60h] +
mov esi [eax] +
xor ebx ebx +
cmp esi eax +
jz loc_10AD358  +
push [ebp+pt.y]  +
lea ecx [esi+8] +
push [ebp+pt.x]  +
call sub_10AC5C3  +
test eax eax +
jnz loc_10AD362  +
mov esi [esi] +
inc ebx  +
cmp esi [edi+60h] +
jnz loc_10AD33E  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov eax ebx +
jmp loc_10AD35B  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabvi_5  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
mov edi offset lpDst +
cmp eax edi +
jz loc_10AD3C3  +
cmp byte ptr [eax+19h] 5 +
jb loc_10AD3C3  +
push offset dword_106CAC0  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 80070057h  +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AD40C  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AD480  +
mov eax [ebp+1Ch] +
and dword ptr [eax] 0 +
mov ecx [ebp-14h] +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10AD473  +
push ebx  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax edi +
jz loc_10AD473  +
cmp byte ptr [eax+19h] 5 +
jb loc_10AD473  +
push dword ptr [ebp+14h]  +
push offset dword_106CAC0  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabvi_6  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AD534  +
cmp byte ptr [eax+19h] 5 +
jb loc_10AD534  +
push offset dword_106CAC0  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AD579  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AD590  +
push ebx  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabvi_7  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AD644  +
cmp byte ptr [eax+19h] 5 +
jb loc_10AD644  +
push offset dword_106CAC0  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AD689  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AD6A0  +
push ebx  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabvi_8  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AD765  +
cmp byte ptr [eax+19h] 5 +
jb loc_10AD765  +
push offset dword_106CAC0  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov esi [ebp+1Ch] +
push 80070057h  +
push esi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AD7AF  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AD80C  +
push esi  +
call VariantInit  +
mov ecx [ebp-14h] +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
jnz loc_10AD802  +
push 3  +
pop eax  +
mov [esi] ax +
mov eax [ebp+14h] +
neg eax  +
sbb eax eax +
and eax 0FFFFFFE9h +
add eax 3Ch +
mov [esi+8] eax +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabvi_9  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AD8E2  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AD96A  +
mov eax [ebp+1Ch] +
mov edx [ebp+14h] +
push 3  +
pop ecx  +
mov [eax] cx +
mov dword ptr [eax+8] 100000h +
test edx edx +
jz loc_10AD923  +
mov dword ptr [eax+8] 300000h +
mov ecx [esi+68h] +
lea edi [edx-1] +
cmp edi ecx +
jnz loc_10AD933  +
mov dword ptr [eax+8] 300002h +
cmp byte ptr [esi+81h] 0 +
jz loc_10AD933  +
mov dword ptr [eax+8] 300006h +
jmp loc_10AD933  +
cmp byte ptr [esi+81h] 0 +
jz loc_10AD933  +
mov dword ptr [eax+8] 100004h +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10AD95D  +
cmp byte ptr [ecx+19h] 5 +
jb loc_10AD95D  +
push dword ptr [eax+8]  +
push edx  +
push offset dword_106CAC0  +
push 15h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F679  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabv_10  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+1Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10ADA47  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10ADA96  +
mov ecx [ebp-14h] +
and dword ptr [edi] 0 +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10ADA82  +
lea eax [ebp-24h] +
jmp loc_10ADA8C  +
push ebx  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabv_11  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+20h] +
push 80070057h  +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10ADB74  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10ADBC9  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
mov ecx [ebp-14h] +
and dword ptr [edi] 0 +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10ADBB5  +
lea eax [ebp-24h] +
jmp loc_10ADBBF  +
push ebx  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 1Ch  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabv_12  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+1Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10ADCAF  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10ADCFE  +
mov ecx [ebp-14h] +
and dword ptr [edi] 0 +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10ADCEA  +
lea eax [ebp-24h] +
jmp loc_10ADCF4  +
push ebx  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabv_13  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+1Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10ADDF8  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10ADEAD  +
mov ecx [ebp-14h] +
and dword ptr [edi] 0 +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10ADEA0  +
cmp dword ptr [ebp+14h] 0 +
jz loc_10ADE63  +
push 346Ch  +
lea ecx [ebp+1Ch] +
call ??0CString@@QAE@PBG@Z  +
push dword ptr [ebp+1Ch]  +
lea ecx [ebp-14h] +
call sub_101DD5D  +
mov eax [ebp-14h] +
push 0  +
mov [edi] eax +
call SysFreeString  +
lea ecx [ebp+1Ch] +
call ??1CString@@QAE@XZ  +
jmp loc_10ADE6D  +
push ebx  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10ADEA0  +
cmp byte ptr [eax+19h] 5 +
jb loc_10ADEA0  +
mov edi [edi] +
test edi edi +
jnz loc_10ADE8A  +
mov edi offset aNone +
push edi  +
push dword ptr [ebp+14h]  +
push offset dword_106CAC0  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10AC375  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabv_14  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi 80070057h +
push edi  +
push dword ptr [ebp+20h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10ADF9E  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AE0EB  +
push dword ptr [ebp+20h]  +
call VariantInit  +
mov ecx [ebp-14h] +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10ADFE2  +
lea eax [ebp-28h] +
jmp loc_10AE0E1  +
mov ecx [ebp+18h] +
mov [ebp-18h] ecx +
mov eax lpDst +
mov esi offset lpDst +
cmp eax esi +
jz loc_10AE015  +
cmp byte ptr [eax+19h] 5 +
jb loc_10AE015  +
push dword ptr [ebp+0Ch]  +
push ecx  +
push offset dword_106CAC0  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
mov ecx [ebp-18h] +
mov edx [ebp+0Ch] +
lea eax [edx-1] +
cmp eax 7 +
ja loc_10AE0D7  +
jmp ds:off_10AE106[eax*4]  +
test ecx ecx +
jnz loc_10AE0D7  +
cmp edx 7 +
jnz loc_10AE03C  +
mov ecx ebx +
jmp loc_10AE054  +
mov eax [ebp-14h] +
mov ecx [eax+64h] +
jmp loc_10AE050  +
test ecx ecx +
jz loc_10AE097  +
dec ecx  +
jmp loc_10AE050  +
test ecx ecx +
jz loc_10AE097  +
inc ecx  +
cmp ecx ebx +
jl loc_10AE097  +
mov eax [ebp-14h] +
cmp ecx [eax+64h] +
jg loc_10AE097  +
mov eax [ebp+20h] +
push 3  +
pop edx  +
mov [eax] dx +
mov [eax+8] ecx +
mov eax lpDst +
cmp eax esi +
jz loc_10ADFDA  +
cmp byte ptr [eax+19h] 5 +
jb loc_10ADFDA  +
push ecx  +
push offset dword_106CAC0  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10ADFDA  +
mov ecx [ebp+20h] +
xor eax eax +
mov [ecx] ax +
push ebx  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax esi +
jz loc_10ADFDA  +
cmp byte ptr [eax+19h] 5 +
jb loc_10ADFDA  +
push offset dword_106CAC0  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10ADFDA  +
push edi  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 1Ch  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabv_15  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+14h] +
push 80070057h  +
push esi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AE1E8  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10AE2A5  +
push esi  +
call VariantInit  +
mov eax [ebp+10h] +
mov ebx [ebp+0Ch] +
mov [ebp-14h] eax +
lea eax [ebp-18h] +
push eax  +
push dword ptr [edi+20h]  +
mov [ebp-18h] ebx +
call ds:ScreenToClient  +
push dword ptr [ebp-14h]  +
mov ecx edi +
push dword ptr [ebp-18h]  +
call sub_10AD305  +
mov [ebp+14h] eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AE240  +
cmp byte ptr [eax+19h] 5 +
jb loc_10AE240  +
push dword ptr [ebp+10h]  +
push ebx  +
push offset dword_106CAC0  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
mov eax [ebp+14h] +
cmp eax 0FFFFFFFFh +
jnz loc_10AE287  +
lea eax [ebp-38h] +
push eax  +
push dword ptr [edi+20h]  +
call ds:GetClientRect  +
push dword ptr [ebp-14h]  +
lea eax [ebp-38h] +
push dword ptr [ebp-18h]  +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_10AE275  +
and dword ptr [esi+8] 0 +
push 3  +
pop eax  +
mov [esi] ax +
jmp loc_10AE291  +
xor eax eax +
push 1  +
lea ecx [ebp-28h] +
mov [esi] ax +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10AE291  +
push 3  +
pop ecx  +
inc eax  +
mov [esi] cx +
mov [esi+8] eax +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabv_16  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AE375  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AE38D  +
push 80004001h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabv_17  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AE45F  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AE477  +
push 80004001h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_100A60E  +
pop ecx  +
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_10AD174  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dword_106CB54  +
push [ebp+arg_4]  +
call sub_100ED86  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+60h] +
mov eax [eax] +
push [ebp+arg_0]  +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
call sub_10BF8C5  +
mov eax [ebp+var_4] +
pop ecx  +
pop ecx  +
add eax 8 +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1020C59  +
mov eax [esi+60h] +
mov ebx [eax] +
push dword ptr [esi+90h]  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] ebx +
call sub_10BF8C5  +
mov eax [esi+58h] +
lea edi [eax+eax+8] +
mov eax [ebp+var_4] +
sub edi [eax+14h] +
pop ecx  +
pop ecx  +
jmp loc_10AE5FB  +
push edi  +
push [ebp+arg_0]  +
lea ecx [ebx+8] +
call sub_10ACF29  +
mov ebx [ebx] +
lea edi [edi+eax-8] +
cmp ebx [esi+60h] +
jnz loc_10AE5E9  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabv_18  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+1Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AE68D  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AE738  +
mov ecx [ebp-14h] +
and dword ptr [edi] 0 +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10AE72B  +
mov eax [ebp+14h] +
mov esi eax +
test eax eax +
jnz loc_10AE6D8  +
push ebx  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10AE6FA  +
mov ecx [ebp-14h] +
dec eax  +
push eax  +
call sub_10AE583  +
push dword ptr [eax+8]  +
lea ecx [ebp+1Ch] +
call sub_101DD5D  +
mov eax [ebp+1Ch] +
push 0  +
mov [edi] eax +
call SysFreeString  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AE72B  +
cmp byte ptr [eax+19h] 5 +
jb loc_10AE72B  +
mov edi [edi] +
test edi edi +
jnz loc_10AE717  +
mov edi offset aNone +
push edi  +
push esi  +
push offset dword_106CAC0  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10AC375  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCfoldertabv_19  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AE7EC  +
cmp byte ptr [eax+19h] 5 +
jb loc_10AE7EC  +
push offset dword_106CAC0  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ebx [ebp+18h] +
mov edi [ebp+14h] +
push 80070057h  +
push ebx  +
push edi  +
push dword ptr [ebp+10h]  +
lea eax [ebp-44h] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100D4B3  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AE844  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AE8F7  +
mov ecx [ebp+10h] +
xor eax eax +
mov [ebx] eax +
mov [edi] eax +
mov [ecx] eax +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov ecx [ebp-10h] +
lea eax [ebp+1Ch] +
push eax  +
lea eax [ebp-44h] +
push eax  +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10AE8EA  +
mov eax [ebp+24h] +
test eax eax +
jnz loc_10AE8A1  +
lea eax [ebp-34h] +
push eax  +
mov eax [ebp-10h] +
push dword ptr [eax+20h]  +
call ds:GetWindowRect  +
jmp loc_10AE8CC  +
mov ecx [ebp-10h] +
dec eax  +
push eax  +
call sub_10AE583  +
lea esi [eax+0Ch] +
lea edi [ebp-34h] +
movs   +
movs   +
push 2  +
lea eax [ebp-34h] +
push eax  +
mov eax [ebp-10h] +
movs   +
push 0  +
push dword ptr [eax+20h]  +
movs   +
call ds:MapWindowPoints  +
mov edi [ebp+14h] +
mov eax [ebp-34h] +
mov ecx [ebp+0Ch] +
mov edx [ebp+10h] +
mov [ecx] eax +
mov ecx [ebp-30h] +
mov [edx] ecx +
mov edx [ebp-2Ch] +
sub edx eax +
mov eax [ebp-28h] +
sub eax ecx +
mov [edi] edx +
mov [ebx] eax +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-14h] 1 +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 24h  +
***
mov eax [ecx+4] +
mov dword ptr [ecx] offset off_106CB28 +
test eax eax +
jz locret_10AE96F  +
push ecx  +
lea ecx [eax+44h] +
call sub_101A545  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10AE959  +
test byte ptr [ebp+8] 1 +
jz loc_10AE98F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 4 +
push esi  +
mov esi ecx +
jnz loc_10AE9CC  +
mov ecx [ebp+0Ch] +
lea eax [esi+90h] +
cmp ecx [eax] +
jz loc_10AE9CC  +
mov [eax] ecx +
mov ecx esi +
call sub_1020F67  +
push 1  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+0Ch]  +
mov esi ecx +
push dword ptr [ebp+8]  +
call ?OnSettingChange@CWnd@@IAEXIPBG@Z  +
cmp dword ptr [ebp+8] 2Ah +
jnz loc_10AEA11  +
mov ecx esi +
call sub_10AC49B  +
mov ecx esi +
call sub_1031F95  +
push 1  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
mov ecx esi +
call sub_1020F67  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
test esi esi +
jl loc_10AEAC4  +
cmp esi [ebx+64h] +
ja loc_10AEAC4  +
push dword ptr [ebx+8Ch]  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_10AEAC4  +
mov ecx ebx +
call sub_1020F67  +
mov eax [ebx+90h] +
cmp eax esi +
jz loc_10AEAC4  +
jle loc_10AEA6D  +
mov ecx ebx +
mov [ebx+90h] esi +
call sub_1020F67  +
jmp loc_10AEAC4  +
mov eax [ebx+60h] +
mov eax [eax] +
push edi  +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push esi  +
push eax  +
call sub_10BF8C5  +
mov esi [ebp+var_4] +
mov eax [ebx+90h] +
add esi 14h +
cmp eax [ebp+arg_0] +
pop ecx  +
pop ecx  +
mov [ebp+var_4] esi +
jmp loc_10AEABA  +
mov eax [ebp+var_C] +
cmp eax [ebx+84h] +
jle loc_10AEAC3  +
inc dword ptr [ebx+90h]  +
mov ecx ebx +
call sub_1020F67  +
mov eax [ebp+arg_0] +
mov esi [ebp+var_4] +
cmp [ebx+90h] eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
jl loc_10AEA96  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jl loc_10AEBA8  +
cmp edi [esi+64h] +
jge loc_10AEBA8  +
cmp edi [esi+68h] +
mov [esi+68h] edi +
setnz byte ptr [ebp+arg_0+3]  +
cmp [ebp+arg_4] 0 +
jz loc_10AEB07  +
push edi  +
call sub_10AEA1B  +
jmp loc_10AEB0C  +
call sub_1020F67  +
push 1  +
push 0  +
push dword ptr [esi+20h]  +
call ds:InvalidateRect  +
cmp byte ptr [ebp+arg_0+3] 0 +
jz loc_10AEBA3  +
mov eax [esi+68h] +
inc eax  +
push eax  +
push 8006h  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call sub_10ACF90  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp byte ptr [esi+81h] 0 +
jz loc_10AEB68  +
mov eax [esi+68h] +
inc eax  +
push eax  +
push 8005h  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call sub_10ACF90  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [esi+20h] +
mov ecx esi +
mov [ebp+lParam] eax +
call ?GetDlgCtrlID@CWnd@@QBEHXZ  +
push dword ptr [esi+20h]  +
mov [ebp+wParam] eax +
mov [ebp+var_1C] 1 +
mov [ebp+var_18] edi +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
lea ecx [ebp+lParam] +
push ecx  +
push [ebp+wParam]  +
push 4Eh  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
mov eax [esi+68h] +
jmp loc_10AEBAB  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov edx [ecx+60h] +
and [ebp+var_4] 0 +
mov eax [edx] +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] ecx +
jmp loc_10AEBED  +
lea esi [eax+2Ch] +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+arg_0] +
push 4  +
pop ecx  +
lea esi [ebp+var_18] +
xor ebx ebx +
cmps   +
jz loc_10AEBF6  +
mov eax [eax] +
inc [ebp+var_4]  +
cmp eax edx +
jnz loc_10AEBCF  +
or eax 0FFFFFFFFh +
jmp loc_10AEC03  +
mov ecx [ebp+var_8] +
push 0  +
push [ebp+var_4]  +
call sub_10AEACF  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabv_20  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AEC65  +
cmp byte ptr [eax+19h] 5 +
jb loc_10AEC65  +
push offset dword_106CAC0  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [ebp-14h] +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10AD0F3  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AECB0  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AED48  +
mov eax [ebp+18h] +
mov [ebp-1Ch] eax +
test eax eax +
jnz loc_10AECCA  +
push 80070057h  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10AED3E  +
test byte ptr [ebp+0Ch] 1Ch +
jnz loc_10AECBA  +
mov edi 80004005h +
test [ebp+0Ch] bl +
jz loc_10AED1F  +
mov ecx [ebp-14h] +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
push edi  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10AED3B  +
mov ecx [ebp-18h] +
push ebx  +
push dword ptr [ebp-14h]  +
call ?SetActiveView@CFrameWnd@@QAEXPAVCView@@H@Z  +
test byte ptr [ebp+0Ch] 2 +
jz loc_10AED3B  +
mov eax [ebp-1Ch] +
mov ecx [ebp-14h] +
push ebx  +
dec eax  +
push eax  +
call sub_10AEACF  +
cmp eax 0FFFFFFFFh +
jnz loc_10AED3B  +
push edi  +
jmp loc_10AECBF  +
lea eax [ebp-2Ch] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCfoldertabv_21  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-30h] +
push eax  +
mov ecx edi +
call sub_10AD0F3  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AEE17  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AEE76  +
mov esi [ebp+14h] +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10AEE3F  +
cmp byte ptr [eax+19h] 5 +
jb loc_10AEE3F  +
push esi  +
push offset dword_106CAC0  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
test esi esi +
jnz loc_10AEE53  +
push 80070057h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10AEE6C  +
push ebx  +
dec esi  +
push esi  +
mov ecx edi +
call sub_10AEACF  +
cmp eax 0FFFFFFFFh +
jnz loc_10AEE69  +
push 80004005h  +
jmp loc_10AEE48  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+64h] +
test edx edx +
jz loc_10AEF24  +
cmp dword ptr [ebp+8] 25h +
jz loc_10AEEFF  +
cmp dword ptr [ebp+8] 27h +
jnz loc_10AEF24  +
xor eax eax +
cmp dword ptr [ebp+8] 25h +
setnz al  +
lea eax [eax+eax-1] +
add eax [ecx+68h] +
jns loc_10AEF13  +
xor eax eax +
cmp eax edx +
jl loc_10AEF1A  +
lea eax [edx-1] +
push 1  +
push eax  +
call sub_10AEACF  +
jmp loc_10AEF29  +
call ?Default@CWnd@@IAEJXZ  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
call sub_10AD305  +
test eax eax +
jl loc_10AEF58  +
cmp eax [esi+68h] +
jz loc_10AEF58  +
push 1  +
push eax  +
mov ecx esi +
call sub_10AEACF  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
sub ecx 44h +
jmp loc_101BC3B  +
***
call sub_1001F95  +
mov eax [ecx+8] +
mov edx [ebp+8] +
mov esi 30C30C3h +
sub esi eax +
cmp esi edx +
jnb loc_10AEFB7  +
push offset aListTTooLong  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1076041  +
push offset dword_10E8AC0  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
add eax edx +
mov [ecx+8] eax +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+3Ch] +
call sub_10AE959  +
mov ecx esi +
pop esi  +
jmp sub_1075F98  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
lea edi [eax+4] +
push dword ptr [edi]  +
mov ebx ecx +
push eax  +
call sub_10AE4D7  +
push 1  +
mov ecx ebx +
mov esi eax +
call sub_10AEF6F  +
mov [edi] esi +
mov eax [esi+4] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_100C4D0  +
mov esi [ebp+8] +
mov ebx ecx +
lea ecx [ebp-64h] +
call sub_10AC5DF  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp-5Ch] +
call ??4CString@@QAEABV0@PBG@Z  +
mov esi [ebp+0Ch] +
mov eax [ebx+54h] +
lea edi [ebp-40h] +
movs   +
movs   +
movs   +
movs   +
mov [ebp-64h] eax +
mov eax [ebx+58h] +
lea ecx [ebx+5Ch] +
lea edx [ebp-64h] +
mov [ebp-60h] eax +
mov eax [ecx+4] +
push edx  +
push eax  +
call sub_10AEFE3  +
mov ecx ebx +
call sub_1020F67  +
push 1  +
push 0  +
push dword ptr [ebx+20h]  +
call ds:InvalidateRect  +
mov eax [ebx+64h] +
lea esi [eax-1] +
lea eax [esi+1] +
push eax  +
push 8000h  +
lea eax [ebp-74h] +
push eax  +
mov ecx ebx +
call sub_10ACF90  +
lea ecx [ebp-74h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-64h] +
call sub_10AC8F4  +
mov eax esi +
call sub_100C50D  +
retn 8  +
***
mov eax offset byte_10D4E75 +
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aSccreateconnec  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov eax esi +
neg eax  +
sbb eax eax +
lea ecx [esi+3Ch] +
and eax ecx +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [edi+44h] +
call sub_1031995  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_10AF13D  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AF146  +
mov [esi+40h] edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov eax offset byte_10DE3EF +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+1Ch] +
mov dword ptr [esi+4] offset off_10AF1CC +
call sub_1041A02  +
and dword ptr [ebp-4] 0 +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1039FB1  +
mov byte ptr [ebp-4] 1 +
mov dword ptr [esi] offset off_10AF21C +
mov dword ptr [esi+4] offset off_10AF204 +
mov dword ptr [esi+8] offset off_10AF1EC +
mov dword ptr [edi] offset off_10AF1E0 +
call ds:?GetComObjectEventSource@@YGAAV?$CEventSource@VCComObjectObserver@@VCVoid@@V2@V2@V2@@@XZ  +
push edi  +
mov ecx eax +
call sub_102124D  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
push offset dword_100CA88  +
push offset dword_106CB54  +
push ecx  +
call sub_1071867  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
push 2Ch  +
mov eax offset dword_10DE464 +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcidispatchi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-14h] +
add esi 0FFFFFFF4h +
push eax  +
lea ecx [ebp-18h] +
mov [ebp-14h] esi +
call sub_1018390  +
mov esi [ebp-18h] +
push 8000FFFFh  +
push esi  +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call sub_107B7E5  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AF35B  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10AF385  +
push 0  +
push esi  +
call ds:CoDisconnectObject  +
push eax  +
lea ecx [ebp-28h] +
call sub_109F3AD  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
test esi esi +
jz loc_10AF395  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 0 +
call sub_10AF291  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_10FCE74 +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10765AC  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_10FCE74 +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1052795  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10FCE74 +
pop ebp  +
jmp sub_105010F  +
***
mov dword ptr [esi+3Ch] offset off_106CB28 +
mov dword ptr [esi] offset off_10AF494 +
mov dword ptr [esi+4] offset off_10AF480 +
mov dword ptr [esi+8] offset off_10AF468 +
mov dword ptr [esi+0Ch] offset off_10AF45C +
mov dword ptr [esi+3Ch] offset off_10AF450 +
mov eax esi +
pop esi  +
retn   +
***
sub ecx 3Ch +
jmp loc_10B0374  +
***
sub ecx 0Ch +
jmp loc_10B0374  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AF59E  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10AC92E  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AF57B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AF641  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10ACA55  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AF61E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AF6E4  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10ACBCD  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AF6C1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AF787  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10ACD1B  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AF764  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AF82C  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10AD36B  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AF808  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AF8DD  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10AD4DF  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AF8B9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AF98E  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10AD5EF  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AF96A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AFA3F  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10AD70F  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AFA1B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AFAF0  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10AD869  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AFACC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AFBA1  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10AD9CB  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AFB7D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AFC52  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 1Ch  +
push [ebp+arg_18]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
push [ebp+arg_4]  +
lea esi [ebp+arg_8] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10ADAF5  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AFC2E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AFD06  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10ADC33  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AFCE2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AFDB7  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10ADD79  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AFD93  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AFE68  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 1Ch  +
push [ebp+arg_18]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
push [ebp+arg_4]  +
lea esi [ebp+arg_8] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10ADF1F  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AFE44  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AFF1A  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
push [ebp+arg_C]  +
mov ecx [ebp+var_4] +
push [ebp+arg_8]  +
lea eax [ebp+var_2C] +
push [ebp+arg_4]  +
push eax  +
call sub_10AE169  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AFEF7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10AFFC5  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10AE2FF  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10AFFA1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B0076  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10AE3E9  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B0052  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B0127  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10AE60E  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B0103  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B01D8  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 24h  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
push [ebp+arg_10]  +
lea esi [ebp+arg_14] +
push [ebp+arg_C]  +
movs   +
push [ebp+arg_8]  +
movs   +
push [ebp+arg_4]  +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10AE795  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B01B4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B0292  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
push [ebp+arg_4]  +
lea esi [ebp+arg_8] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10AEC0F  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B026E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B0343  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10AEDA1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B031F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10AEFC9  +
test byte ptr [ebp+8] 1 +
jz loc_10B038E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push offset Addend  +
mov dword ptr [esi] offset off_1014444 +
mov dword ptr [esi+4] offset off_106CBD4 +
mov dword ptr [esi+8] offset off_106CBA8 +
mov dword ptr [esi+0Ch] offset off_106CB88 +
mov dword ptr [esi+3Ch] offset off_106CB68 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 3Ch +
jmp loc_10B04B3  +
***
sub ecx 0Ch +
jmp loc_10B04B3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10B0410  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10B03F6  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10B0439  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10B0439  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_1014444 +
mov dword ptr [esi+4] offset off_106CBD4 +
mov dword ptr [esi+8] offset off_106CBA8 +
mov dword ptr [esi+0Ch] offset off_106CB88 +
mov dword ptr [esi+3Ch] offset off_106CB68 +
mov dword ptr [esi+1Ch] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_10AEFC9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10B046D  +
test byte ptr [ebp+8] 1 +
jz loc_10B04CD  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10B04F5  +
mov eax 80004003h +
jmp loc_10B0563  +
push 44h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_10B0521  +
push esi  +
call near ptr dword_10B0398+2  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_10B0537  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10B0531 +
retn   +
***
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10B055C  +
lea ecx [esi+20h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10B054F  +
xor ebx ebx +
test ebx ebx +
jz loc_10B055F  +
lea ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor esi esi +
jmp loc_10B055F  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B05DC  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B063D  +
cmp [ebp+10h] esi +
jnz loc_10B05F1  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10B0633  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push dword ptr [ebp+10h]  +
push eax  +
call near ptr dword_10AF0B8+2  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B0630  +
push dword ptr [ebp+10h]  +
push edi  +
call sub_100CA9D  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
push 34h  +
mov eax offset word_10DF44A +
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCfoldertabv_22  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebp+0Ch] 0FFFFFFFCh +
jz loc_10B06CC  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B06B5  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B06B5  +
push offset dword_106CAC0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
call sub_1001FCF  +
retn 8  +
***
lea edi [esi+94h] +
push edi  +
push esi  +
lea eax [ebp-40h] +
push eax  +
call near ptr byte_10B0570  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ebp-10h] 1 +
call esi  +
mov ecx eax +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B0735  +
mov eax [edi] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov dword ptr [ebp-4] 2 +
mov dword ptr [ebp-10h] 3 +
call esi  +
mov ecx eax +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
mov byte ptr [ebp+0Fh] 0 +
test al al +
jz loc_10B0739  +
mov byte ptr [ebp+0Fh] 1 +
test byte ptr [ebp-10h] 2 +
mov dword ptr [ebp-4] 1 +
jz loc_10B0753  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-30h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor esi esi +
test byte ptr [ebp-10h] 1 +
mov [ebp-4] esi +
jz loc_10B0767  +
lea ecx [ebp-40h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp byte ptr [ebp+0Fh] 0 +
jz loc_10B07AE  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B079A  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B079A  +
push offset dword_106CAC0  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
jmp loc_10B06C4  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B07D2  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B07D2  +
push offset dword_106CAC0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push dword ptr [edi]  +
push dword ptr [ebp+8]  +
push offset stru_106B618  +
call LresultFromObject  +
mov esi eax +
jmp loc_10B079A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_0] +
mov [ecx+1Eh] al +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push offset aScgeneratepage  +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+0Ch] +
call sub_100A6F0  +
inc dword_10FD664  +
push dword_10FD664  +
push ds:off_106D924  +
push offset aSD  +
push dword ptr [ebp+0Ch]  +
call sub_104C71D  +
mov eax [ebp+8] +
add esp 10h +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aChistorylist_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+18h] +
push 80070057h  +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B0973  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10B0A05  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B0997  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B0997  +
push offset dword_106CBF8  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp-44h] +
mov dword ptr [esi+14h] 3 +
call sub_100AD56  +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-30h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_10B0839  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B09EA  +
mov esi [esi+18h] +
push 0  +
push dword ptr [ebp-40h]  +
mov ecx esi +
call sub_10C69B9  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-44h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call sub_100A77D  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aChistorylist_4  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [edi+8] +
mov edi [edi] +
cmp edi eax +
jnz loc_10B0AB1  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B0AC4  +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
mov [edi+8] eax +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov dl [ecx+5] +
mov eax [ebp+arg_0] +
cmp dl [eax+5] +
jnz loc_10B0B86  +
cmp byte ptr [ecx+4] 0 +
jz loc_10B0B4F  +
add eax 44h +
push eax  +
add ecx 44h +
push ecx  +
call sub_1039587  +
pop ecx  +
test al al +
pop ecx  +
setnz al  +
jmp loc_10B0B88  +
mov edx [ecx+8] +
sub edx 0 +
jz loc_10B0BAA  +
dec edx  +
jz loc_10B0B8C  +
dec edx  +
jnz loc_10B0BC0  +
cmp dword ptr [eax+8] 2 +
jnz loc_10B0B86  +
mov edx [ecx+64h] +
cmp edx [eax+64h] +
jnz loc_10B0B86  +
mov edx [ecx+70h] +
cmp edx [eax+70h] +
jnz loc_10B0B86  +
add eax 28h +
add ecx 28h +
push eax  +
push ecx  +
call sub_1039587  +
pop ecx  +
pop ecx  +
test al al +
jz loc_10B0BC0  +
mov al 1 +
pop ebp  +
retn 4  +
cmp dword ptr [eax+8] 1 +
jnz loc_10B0B86  +
mov edx [ecx+64h] +
cmp edx [eax+64h] +
jnz loc_10B0B86  +
mov edx [ecx+6Ch] +
cmp edx [eax+6Ch] +
jnz loc_10B0B86  +
add eax 0Ch +
add ecx 0Ch +
jmp loc_10B0B79  +
cmp dword ptr [eax+8] 0 +
jnz loc_10B0B86  +
mov edx [ecx+64h] +
cmp edx [eax+64h] +
jnz loc_10B0B86  +
mov ecx [ecx+68h] +
cmp ecx [eax+68h] +
jnz loc_10B0B86  +
xor al al +
jmp loc_10B0B88  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax ecx +
mov ecx [eax+4] +
cmp ecx [edx+4] +
jz loc_10B0BDF  +
xor al al +
jmp loc_10B0C06  +
push ebx  +
push esi  +
push edi  +
push 4  +
pop ecx  +
xor ebx ebx +
lea edi [edx+8] +
lea esi [eax+8] +
cmps   +
pop edi  +
pop esi  +
pop ebx  +
jnz loc_10B0BDB  +
add edx 18h +
push edx  +
lea ecx [eax+18h] +
call sub_10B0B23  +
neg al  +
sbb al al +
inc al  +
pop ebp  +
retn 4  +
***
call sub_100C4D0  +
mov ebx ecx +
push 0  +
lea ecx [ebp-3Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aChistorylistEx  +
lea ecx [ebp-3Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebx+10h] +
mov ecx [eax+0D8h] +
mov [ebp-2Ch] ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B0C95  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B0C95  +
mov esi [ebx] +
mov edi [esi+28h] +
lea ecx [esi+8] +
push ecx  +
push dword ptr [ecx]  +
xor ecx ecx +
cmp edi 1 +
setz cl  +
push ecx  +
xor ecx ecx +
cmp edi 2 +
setz cl  +
push ecx  +
xor ecx ecx +
test edi edi +
setz cl  +
push ecx  +
push dword ptr [esi+0Ch]  +
push offset dword_106CBF8  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CBF92  +
mov ecx [ebp-2Ch] +
mov eax [ecx] +
lea edx [ebp-28h] +
push edx  +
mov edx [ebx] +
push dword ptr [edx+0Ch]  +
push ecx  +
call dword ptr [eax+48h]  +
mov eax [ebx] +
mov ecx [ebx+10h] +
mov dword ptr [ebx+14h] 1 +
lea esi [eax+10h] +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
movs   +
cmp dword ptr [eax+28h] 0 +
mov esi [eax+8] +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-28h]  +
setz byte ptr [ebp-21h]  +
call sub_107F083  +
cmp byte ptr [ebp-21h] 0 +
jz loc_10B0D18  +
mov eax [ebx+10h] +
lea ecx [eax+44h] +
mov eax [ecx] +
push esi  +
lea edx [ebp-4Ch] +
push edx  +
call dword ptr [eax+48h]  +
push eax  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-3Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B0D18  +
lea ecx [ebp-3Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
and dword ptr [ebx+14h] 0 +
mov ecx ebx +
call sub_1018077  +
lea ecx [ebp-3Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-3Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_100C50D  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov eax lpDst +
mov edi offset lpDst +
cmp eax edi +
jz loc_10B0DC4  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B0DC4  +
push offset dword_106CBF8  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea eax [esi+1Fh] +
mov byte ptr [eax] 1 +
mov [ebp-10h] eax +
mov eax [esi] +
and dword ptr [ebp-4] 0 +
cmp dword ptr [eax+28h] 1 +
jnz loc_10B0E1C  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_10B0E1C  +
cmp byte ptr [esi+1Dh] 0 +
jz loc_10B0E1C  +
mov eax lpDst +
cmp eax edi +
jz loc_10B0E06  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B0E06  +
push offset dword_106CBF8  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax [ebp+8] +
mov byte ptr [eax] 0 +
xor eax eax +
mov ecx [ebp-10h] +
mov byte ptr [ecx] 0 +
call sub_1001FCF  +
retn 8  +
mov ebx [ebp+8] +
mov byte ptr [ebx] 1 +
mov eax [esi] +
mov ecx [esi+8] +
cmp eax [ecx] +
jnz loc_10B0E30  +
xor eax eax +
inc eax  +
jmp loc_10B0E0E  +
mov eax [eax+4] +
mov ecx esi +
mov [esi] eax +
call sub_10B0C0F  +
mov [ebp+0Ch] eax +
test eax eax +
jl loc_10B0E0E  +
mov eax [esi] +
cmp dword ptr [eax+28h] 1 +
jnz loc_10B0E75  +
cmp byte ptr [esi+1Eh] 0 +
jz loc_10B0E75  +
mov eax lpDst +
cmp eax edi +
jz loc_10B0E72  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B0E72  +
push offset dword_106CBF8  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov byte ptr [ebx] 0 +
mov eax [ebp+0Ch] +
jmp loc_10B0E0E  +
***
call sub_1001F95  +
mov esi ecx +
lea eax [esi+20h] +
mov byte ptr [eax] 1 +
mov [ebp-10h] eax +
mov ecx [esi] +
xor eax eax +
cmp dword ptr [ecx+28h] 1 +
mov [ebp-4] eax +
jnz loc_10B0EC0  +
cmp [ebp+0Ch] al +
jz loc_10B0EC0  +
cmp [esi+1Ch] al +
jz loc_10B0EC0  +
mov ecx [ebp+8] +
mov [ecx] al +
mov ecx [ebp-10h] +
mov byte ptr [ecx] 0 +
call sub_1001FCF  +
retn 8  +
mov edi [ebp+8] +
mov byte ptr [edi] 1 +
mov ecx [esi+8] +
mov eax [esi] +
cmp eax ecx +
jnz loc_10B0ED4  +
xor eax eax +
inc eax  +
jmp loc_10B0EB2  +
mov eax [eax] +
cmp eax ecx +
jz loc_10B0ECF  +
mov ecx esi +
mov [esi] eax +
call sub_10B0C0F  +
test eax eax +
jl loc_10B0EB2  +
mov ecx [esi] +
cmp dword ptr [ecx+28h] 1 +
jnz loc_10B0EB2  +
cmp byte ptr [esi+1Eh] 0 +
jz loc_10B0EB2  +
mov byte ptr [edi] 0 +
jmp loc_10B0EB2  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
mov [ebp-14h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aChistorylist_1  +
lea ecx [ebp-24h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [esi+14h] 3 +
jnz loc_10B0F94  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B0F5A  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B0F5A  +
push offset dword_106CBF8  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
cmp byte ptr [esi+21h] 0 +
jz loc_10B0F7C  +
mov byte ptr [esi+21h] 0 +
cmp dword ptr [esi+3Ch] 8 +
jb loc_10B0F6F  +
mov eax [esi+28h] +
jmp loc_10B0F72  +
lea eax [esi+28h] +
mov ecx [esi+18h] +
push ebx  +
push eax  +
call sub_10C69B9  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
mov [esi+14h] ebx +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] edi +
jmp loc_10B1063  +
mov ecx [ebp+0Ch] +
mov eax [esi] +
cmp ecx [eax+98h] +
mov byte ptr [ebp-0Dh] 0 +
setnle byte ptr [ebp+0Fh]  +
cmp byte ptr [ebp+0Fh] 0 +
jz loc_10B0FE3  +
mov eax lpDst +
mov edi offset lpDst +
mov ebx offset dword_106CBF8 +
cmp eax edi +
jz loc_10B0FD4  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B0FD4  +
push ebx  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 0  +
lea eax [ebp-0Dh] +
push eax  +
mov ecx esi +
call sub_10B0E7F  +
jmp loc_10B1017  +
mov eax lpDst +
mov edi offset lpDst +
mov ebx offset dword_106CBF8 +
cmp eax edi +
jz loc_10B100A  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B100A  +
push ebx  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 0  +
lea eax [ebp-0Dh] +
push eax  +
mov ecx esi +
call sub_10B0D90  +
cmp byte ptr [ebp-0Dh] 0 +
jnz loc_10B104F  +
mov eax lpDst +
cmp eax edi +
jz loc_10B103A  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B103A  +
push ebx  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
cmp byte ptr [ebp+0Fh] 0 +
mov ecx [esi+18h] +
jz loc_10B104A  +
call sub_10C6111  +
jmp loc_10B104F  +
call sub_10C5FE5  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-14h] 1 +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aChistorylist_2  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [esi+8] +
mov eax [esi] +
cmp eax ecx +
jnz loc_10B110D  +
push 80004005h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B113C  +
mov ecx [ebp+0Ch] +
add eax 20h +
push eax  +
call sub_1020B84  +
mov eax [esi] +
mov eax [eax+8] +
mov ecx [ebp+10h] +
mov edi [ebp+14h] +
mov [ecx] eax +
mov esi [esi] +
mov ecx [ebp+8] +
add esi 10h +
movs   +
movs   +
movs   +
lea eax [ebp-20h] +
push eax  +
movs   +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx ecx +
mov ecx [eax] +
push esi  +
mov [ebx] ecx +
mov ecx [eax+4] +
push edi  +
mov [ebx+4] ecx +
lea esi [eax+8] +
lea edi [ebx+8] +
movs   +
movs   +
movs   +
add eax 18h +
push eax  +
lea ecx [ebx+18h] +
movs   +
call sub_1020B84  +
mov eax [ebp+arg_0] +
mov ecx [eax+90h] +
mov [ebx+90h] ecx +
mov eax [eax+94h] +
pop edi  +
mov [ebx+94h] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push edi  +
mov edi ecx +
mov eax lpDst +
mov ebx offset dword_106CBF8 +
cmp eax offset lpDst +
jz loc_10B1243  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B1243  +
movzx ecx [ebp+arg_4] +
push ecx  +
movzx ecx [ebp+arg_0] +
push ecx  +
push ebx  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
mov eax lpDst +
cmp byte ptr [edi+1Ch] 0 +
jz loc_10B12B1  +
cmp [ebp+arg_0] 0 +
jnz loc_10B12B1  +
cmp byte ptr [edi+1Eh] 0 +
jnz loc_10B12B1  +
push esi  +
mov esi [edi] +
cmp esi [edi+8] +
jz loc_10B12B0  +
cmp eax offset lpDst +
jz loc_10B129E  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B129E  +
mov edx [esi+28h] +
lea ecx [esi+8] +
push ecx  +
push dword ptr [ecx]  +
xor ecx ecx +
cmp edx 1 +
setz cl  +
push ecx  +
xor ecx ecx +
cmp edx 2 +
setz cl  +
push ecx  +
xor ecx ecx +
test edx edx +
setz cl  +
push ecx  +
push dword ptr [esi+0Ch]  +
push ebx  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CBF92  +
push dword ptr [edi+8]  +
mov esi [esi] +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [edi+4] +
call sub_1025AAD  +
pop esi  +
mov al [ebp+arg_0] +
mov [edi+1Ch] al +
mov al [ebp+arg_4] +
mov ecx edi +
mov [edi+1Dh] al +
call sub_1018077  +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_100C4D0  +
mov edi [ebp+8] +
and dword ptr [ebp-0ACh] 0 +
mov ebx ecx +
push 0  +
lea ecx [ebp-0C0h] +
mov [ebp-0B0h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aChistorylist_3  +
lea ecx [ebp-0C0h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [ebx+1Fh] 0 +
jnz loc_10B1409  +
cmp byte ptr [ebx+20h] 0 +
jnz loc_10B1409  +
mov ecx [ebx+8] +
mov eax [ebx] +
cmp eax ecx +
jnz loc_10B1351  +
push 8000FFFFh  +
lea ecx [ebp-0C0h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
push eax  +
mov ecx edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B1418  +
cmp [eax+28h] esi +
jz loc_10B13BA  +
mov ecx ebx +
call sub_1026614  +
lea ecx [ebp-90h] +
call sub_10230CC  +
push 98h  +
lea eax [ebp-0A8h] +
push 0  +
push eax  +
mov byte ptr [ebp-4] 2 +
call memset  +
add esp 0Ch +
lea ecx [ebx+4] +
mov eax [ecx+4] +
lea edx [ebp-0A8h] +
push edx  +
push eax  +
call sub_1026B93  +
mov eax [ebx+8] +
mov esi [eax+4] +
mov eax [ebx] +
add eax 8 +
push eax  +
lea ecx [esi+8] +
call sub_10B11AF  +
lea ecx [ebp-90h] +
mov [ebx] esi +
mov byte ptr [ebp-4] 1 +
call sub_100F341  +
mov edi [ebx] +
mov esi [ebp+0Ch] +
add edi 10h +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_101883B  +
mov ecx ebx +
call sub_1018077  +
mov ecx [ebp-0B0h] +
lea eax [ebp-0C0h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-0C0h] +
mov dword ptr [ebp-0ACh] 1 +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-0B0h] +
jmp loc_10B1430  +
lea eax [ebp-0C0h] +
push eax  +
mov ecx edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-0C0h] +
mov [ebp-0ACh] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
call sub_100C50D  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10B1497  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_1043E3E  +
add esi 8 +
cmp esi [ebp+arg_4] +
jnz loc_10B148A  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] esi +
jz loc_10B14C7  +
sub [ebp+arg_8] 8 +
mov ecx [ebp+arg_8] +
sub esi 8 +
push esi  +
call sub_1043E3E  +
cmp esi [ebp+arg_0] +
jnz loc_10B14B2  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10231DC +
jz loc_10B14ED  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B14A4  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
lea eax [ecx-1] +
cdq   +
push esi  +
sub eax edx +
mov esi eax +
push edi  +
sar esi 1 +
jmp loc_10B155B  +
lea edx [eax+esi*8] +
mov edi [edx+4] +
cmp edi [ebp+arg_10] +
jge loc_10B1563  +
lea ecx [eax+ecx*8] +
push edx  +
call sub_1043E3E  +
lea eax [esi-1] +
cdq   +
sub eax edx +
sar eax 1 +
mov ecx esi +
mov esi eax +
cmp [ebp+arg_8] ecx +
mov eax [ebp+arg_0] +
jl loc_10B153B  +
lea eax [eax+ecx*8] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
mov ecx [ebp+arg_10] +
pop edi  +
mov [eax+4] ecx +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+arg_4] edi +
lea esi [edi+edi+2] +
jmp loc_10B15B3  +
mov eax [ebp+arg_0] +
mov ecx [eax+esi*8+4] +
cmp ecx [eax+esi*8-4] +
jge loc_10B15A1  +
dec esi  +
lea edx [eax+esi*8] +
lea ecx [eax+edi*8] +
push edx  +
call sub_1043E3E  +
mov edi esi +
lea esi [esi+esi+2] +
cmp esi ebx +
jl loc_10B1593  +
jnz loc_10B15CC  +
mov eax [ebp+arg_0] +
lea edx [eax+ebx*8-8] +
lea ecx [eax+edi*8] +
push edx  +
call sub_1043E3E  +
lea edi [ebx-1] +
push [ebp+arg_14]  +
lea eax [ebp+arg_C] +
push ecx  +
push ecx  +
mov ecx esp +
mov [ebp+arg_8] esp +
push eax  +
call sub_1043E22  +
push [ebp+arg_4]  +
push edi  +
push [ebp+arg_0]  +
call sub_10B1525  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
mov ecx [ebp+arg_8] +
call sub_1043E3E  +
push [ebp+arg_14]  +
lea eax [ebp+arg_C] +
push ecx  +
push ecx  +
mov ecx esp +
mov [ebp+var_4] esp +
push eax  +
call sub_1043E22  +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
sar eax 3 +
push eax  +
push 0  +
push [ebp+arg_0]  +
call sub_10B157C  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
push 0  +
push [ebp+arg_8]  +
add eax 0FFFFFFF8h +
push ecx  +
push ecx  +
mov ecx esp +
mov [ebp+var_4] esp +
push eax  +
call sub_1043E22  +
mov eax [ebp+arg_4] +
add eax 0FFFFFFF8h +
push eax  +
push eax  +
push [ebp+arg_0]  +
call sub_10B15F7  +
leave   +
retn 10h  +
***
mov eax ecx +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_106CC1C +
retn   +
***
call sub_1001F95  +
test byte ptr dword_10FD674 1 +
mov esi offset unk_10FD668 +
jnz loc_10B16B8  +
or dword_10FD674 1 +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1041C89  +
push offset loc_10E80B8  +
call sub_100BFD5  +
pop ecx  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
call sub_10B1681  +
mov esi eax +
lea eax [ebp+arg_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_100D440  +
mov eax [ebp+var_4] +
cmp eax [esi+4] +
jz loc_10B171E  +
mov esi [eax+10h] +
test esi esi +
jz loc_10B171E  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B1718  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B1718  +
push dword ptr [esi+4]  +
push offset dword_106CC08  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
pop esi  +
leave   +
retn 10h  +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-24h] edi +
xor ebx ebx +
push ebx  +
lea ecx [ebp-34h] +
mov [ebp-14h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCkeyboardnav_0  +
lea ecx [ebp-34h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi ds:SystemParametersInfoW +
push ebx  +
lea eax [ebp-10h] +
push eax  +
push ebx  +
push 6Ah  +
call esi  +
test eax eax +
jnz loc_10B17B9  +
push ebx  +
lea eax [ebp-18h] +
push eax  +
push ebx  +
push 16h  +
call esi  +
mov edi [ebp-18h] +
inc edi  +
imul edi edi +
push ebx  +
lea eax [ebp-1Ch] +
push eax  +
push ebx  +
push 0Ah  +
mov [ebp-20h] edi +
call esi  +
mov ecx [ebp-1Ch] +
imul ecx ecx +
mov eax 190h +
sub eax ecx +
mov [ebp-1Ch] eax +
cmp edi eax +
lea eax [ebp-1Ch] +
jb loc_10B17AC  +
lea eax [ebp-20h] +
mov eax [eax] +
mov edi [ebp-24h] +
add eax 32h +
mov [ebp-10h] eax +
jmp loc_10B17BC  +
mov eax [ebp-10h] +
push offset TimerFunc  +
push eax  +
push ebx  +
push ebx  +
call ds:SetTimer  +
lea esi [edi+4] +
mov [esi] eax +
cmp eax ebx +
jnz loc_10B17E8  +
lea ecx [ebp-34h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B182D  +
push esi  +
call sub_10B1681  +
mov ecx eax +
call sub_1022BC7  +
mov [eax] edi +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B1820  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B1820  +
push dword ptr [ebp-10h]  +
push dword ptr [esi]  +
push offset dword_106CC08  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-34h] +
mov dword ptr [ebp-14h] 1 +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor edi edi +
inc edi  +
push offset aCkeyboardnavde  +
lea ecx [ebp-28h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
add esi 4 +
cmp [esi] ebx +
jz loc_10B1945  +
call sub_10B1681  +
mov ecx eax +
push esi  +
lea eax [ebp-14h] +
push eax  +
mov [ebp-18h] ecx +
call sub_100D440  +
push dword ptr [ebp-14h]  +
mov ecx [ebp-18h] +
lea eax [ebp-18h] +
push eax  +
call sub_105207A  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B1920  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B1920  +
push dword ptr [esi]  +
push offset dword_106CC08  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov eax [esi] +
push eax  +
push ebx  +
mov [esi] ebx +
call ds:KillTimer  +
test eax eax +
jnz loc_10B1945  +
lea ecx [ebp-28h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B1952  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] edi +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
lea eax [ebp+var_10] +
push eax  +
mov dword ptr [ecx] offset off_106CC1C +
call sub_10B189F  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
pop eax  +
push eax  +
lea ecx [ebp+arg_20] +
push ecx  +
push eax  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
lea ecx [ebp+arg_18] +
push ecx  +
push eax  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 40h +
pop ebp  +
retn 24h  +
***
call sub_1001F95  +
mov [ebp-18h] ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmainframeOnme  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
test dword ptr [ebp+0Ch] 2000h +
jnz loc_10B1B82  +
push offset word_100A5FC  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@PBG@Z  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call ??0CString@@QAE@XZ  +
mov edi [ebp+8] +
mov esi 2EECh +
mov byte ptr [ebp-4] 2 +
cmp edi esi +
jz loc_10B1AA5  +
cmp edi 2EEDh +
jz loc_10B1AA5  +
push ebx  +
push dword ptr [ebp+10h]  +
call ds:GetMenuItemID  +
cmp eax esi +
jnz loc_10B1AA5  +
push 320Bh  +
jmp loc_10B1ABD  +
test byte ptr [ebp+0Ch] 10h +
jnz loc_10B1B12  +
lea eax [edi-0FF00h] +
cmp eax 400h +
ja loc_10B1AC7  +
push 3415h  +
lea ecx [ebp-10h] +
call ?LoadStringW@CString@@QAEHI@Z  +
jmp loc_10B1B12  +
push edi  +
lea ecx [ebp-14h] +
call ?LoadStringW@CString@@QAEHI@Z  +
push 0Ah  +
lea ecx [ebp-14h] +
call ?Find@CString@@QBEHG@Z  +
cmp eax ebx +
jge loc_10B1AEC  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-10h] +
call ??4CString@@QAEABV0@ABV0@@Z  +
jmp loc_10B1B12  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CString@@QBE?AV1@H@Z  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
mov ecx [ebp-18h] +
mov eax [ecx] +
push ebx  +
push offset off_10F6DC0  +
push offset off_10F6DDC  +
push ebx  +
call dword ptr [eax+0C8h]  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
cmp eax ebx +
jz loc_10B1B6B  +
push dword ptr [ebp-10h]  +
lea ecx [eax+0C8h] +
mov eax [ecx] +
lea edx [ebp-38h] +
push edx  +
call dword ptr [eax]  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-14h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push offset aCmainframeScma  +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 3  +
mov ecx edi +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push offset aCmainframeScmi  +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 6  +
mov ecx edi +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
mov ecx [ebp+8] +
push 0  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push offset aCmainframeScre  +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 9  +
mov ecx edi +
call ?ShowWindow@CWnd@@QAEHH@Z  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov ebx ecx +
xor edi edi +
mov [ebp-10h] edi +
mov ecx [ebp+8] +
push edi  +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aCmainframeScse  +
mov [ebp-4] edi +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+0Ch] +
mov edx [eax] +
mov ecx [eax+8] +
mov esi [eax+4] +
mov eax [eax+0Ch] +
sub ecx edx +
push 4  +
inc ecx  +
sub eax esi +
inc eax  +
push eax  +
push ecx  +
push esi  +
push edx  +
push edi  +
mov ecx ebx +
call ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+15Ch] +
cmp eax [ebp+8] +
jnz loc_10B1E1B  +
mov eax [ebp+0Ch] +
mov [esi+15Ch] eax +
jmp loc_10B1E9B  +
test eax eax +
jz loc_10B1E9B  +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_10B1E9B  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-4] +
push eax  +
push 3A98h  +
push 2  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 30Dh  +
push dword ptr [esi+15Ch]  +
call ds:SendMessageTimeoutW  +
test eax eax +
jnz loc_10B1E9B  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10B1E68  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B1E9B  +
cmp byte ptr [eax+19h] 2 +
jb loc_10B1E9B  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push dword ptr [esi+15Ch]  +
push ecx  +
push offset dword_106CC38  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CBFD9  +
pop esi  +
leave   +
retn 8  +
***
call sub_1001F95  +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
inc dword ptr [eax+14h]  +
mov ecx dword_10F5304 +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10B1EEB  +
mov al [ecx+120h] +
and dword ptr [ecx+11Ch] 0 +
xor edx edx +
inc edx  +
push edx  +
push edx  +
mov [ecx+0ECh] edx +
mov [ecx+121h] al +
call sub_10228FD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0Dh] +
call ds:??1?$CEventLock@UAppEvents@@@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx] +
push 0  +
call dword ptr [eax]  +
pop ebp  +
retn 4  +
***
push 20h  +
mov eax offset byte_10DEAF9 +
call sub_1001F95  +
and dword ptr [ebp-14h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
mov [ebp-4] ebx +
call ds:?GetEventBuffer@@YGAAVCEventBuffer@@XZ  +
inc dword ptr [eax+14h]  +
push 0  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmainframeSccr  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx dword_10F5304 +
test ecx ecx +
jnz loc_10B1F8C  +
push 8000FFFFh  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B2009  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_10B1FA3  +
push 80004003h  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10B1FFF  +
cmp dword_10F55CC 3 +
jnz loc_10B1FB9  +
cmp byte ptr [esi+8] 0 +
jz loc_10B1FB9  +
push 80004005h  +
jmp loc_10B1F98  +
***
mov eax [esi] +
push dword ptr [ebp+10h]  +
mov [ecx+0ECh] eax +
mov eax [esi+4] +
mov [ecx+11Ch] eax +
mov al [esi+9] +
mov [ecx+121h] al +
movzx eax byte ptr [esi+8] +
push eax  +
call sub_10228FD  +
test eax eax +
jnz loc_10B1FE9  +
and [esi+0Ch] eax +
jmp loc_10B1FB2  +
***
lea ecx [eax+1F8h] +
mov [esi+0Ch] ecx +
mov ecx eax +
call near ptr dword_10853D0+2  +
mov [esi+10h] eax +
lea eax [ebp-2Ch] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-0Dh] +
mov [ebp-4] bl +
call ds:??1?$CEventLock@UAppEvents@@@@QAE@XZ  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_100C4D0  +
mov edi [ebp+8] +
and dword ptr [ebp-14h] 0 +
mov esi ecx +
push 0  +
lea ecx [ebp-24h] +
mov [ebp-3Ch] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmainframeScon  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
and dword ptr [ebp-28h] 0 +
lea edx [ebp-28h] +
push edx  +
lea ecx [esi+0C4h] +
mov eax [ecx] +
lea edx [ebp-38h] +
push edx  +
call dword ptr [eax+4]  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B20FE  +
lea eax [ebp-24h] +
push eax  +
mov ecx edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B2166  +
mov ecx [ebp-28h] +
test ecx ecx +
jz loc_10B2114  +
mov eax [ecx] +
lea edx [ebp-38h] +
push edx  +
call dword ptr [eax+20h]  +
mov byte ptr [ebp-4] 3 +
jmp loc_10B2148  +
xor eax eax +
cmp eax offset dword_10F54B0 +
jnz loc_10B212D  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10B215D  +
push 0  +
call ds:?GetHelpFile@SC@mmcerror@@SGPBGXZ  +
push eax  +
lea eax [ebp-38h] +
push eax  +
mov ecx offset dword_10F54B0 +
call sub_1070E71  +
mov byte ptr [ebp-4] 4 +
push eax  +
lea ecx [ebp-24h] +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea eax [ebp-24h] +
push eax  +
mov ecx edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
call sub_100C50D  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B21E4  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B21E4  +
push offset dword_106CC38  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push esi  +
mov esi [ebp+8] +
xor ecx ecx +
cmp [esi+4] ecx +
jz loc_10B2206  +
push dword ptr [ebp+0Ch]  +
mov eax [esi+4] +
push dword ptr [esi+8]  +
mov edx [eax] +
push 8010h  +
push ecx  +
push eax  +
call dword ptr [edx+10h]  +
jmp loc_10B221E  +
mov eax [esi] +
cmp eax ecx +
jz loc_10B221E  +
push dword ptr [ebp+0Ch]  +
mov edx [eax] +
push dword ptr [esi+8]  +
push 8010h  +
push ecx  +
push eax  +
call dword ptr [edx+14h]  +
push esi  +
call ds:GlobalFree  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
push 324h  +
mov eax offset dword_10DEBD8 +
call sub_1001F95  +
push 0  +
push 0  +
push 341Fh  +
lea ecx [ebp-330h] +
call sub_10BD29B  +
mov edx [eax] +
and dword ptr [ebp-4] 0 +
mov ecx eax +
call dword ptr [edx+0C0h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-330h] +
call sub_10BCE63  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ?FromHandlePermanent@CWnd@@SGPAV1@PAUHWND__@@@Z  +
test eax eax +
jnz loc_10B232C  +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jz loc_10B2307  +
and [ebp+0Ch] eax +
lea eax [ebp+0Ch] +
push eax  +
push 1388h  +
push 2  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push dword ptr [ebp+8]  +
call ds:SendMessageTimeoutW  +
test eax eax +
jnz loc_10B232B  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10B22D2  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B232B  +
cmp byte ptr [eax+19h] 2 +
jb loc_10B232B  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push dword ptr [ebp+8]  +
push ecx  +
push offset dword_106CC38  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10B19E4  +
jmp loc_10B232B  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B232B  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B232B  +
push offset dword_106CC38  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
pop esi  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
push 0Ch  +
mov eax offset byte_10D5663 +
call sub_1001F95  +
mov ebx ecx +
xor edi edi +
mov [ebp-4] edi +
mov [ebp-10h] edi +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
mov ecx [ebp+8] +
xor esi esi +
inc esi  +
push edi  +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aCmainframeSc_1  +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push edi  +
push offset off_10F71EC  +
lea ecx [ebx-0C4h] +
mov eax [ecx] +
push offset off_10F6DDC  +
push edi  +
call dword ptr [eax+0C8h]  +
push eax  +
call __RTDynamicCast  +
mov ecx [ebp+0Ch] +
add esp 14h +
mov [ecx] eax +
cmp eax edi +
jnz loc_10B23B3  +
mov ecx [ebp+8] +
push esi  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
push edi  +
lea eax [ebp-4] +
push eax  +
call InsideModalLoop  +
mov esi offset dword_106CC38 +
mov edi offset lpDst +
test eax eax +
jge loc_10B2451  +
mov ecx lpDst +
cmp ecx edi +
jz loc_10B2457  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10B2457  +
push eax  +
push esi  +
push 13h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
mov ecx lpDst +
cmp dword ptr [ebp-4] 0 +
jz loc_10B2475  +
cmp ecx edi +
jz loc_10B2475  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10B2475  +
push esi  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F7C2  +
xor eax eax +
cmp [ebp-4] eax +
pop edi  +
setz al  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push ebx  +
push esi  +
push edi  +
lea eax [ebp-4] +
push eax  +
mov ebx ecx +
call InsideModalLoop  +
mov esi offset dword_106CC38 +
mov edi offset lpDst +
test eax eax +
jge loc_10B24CB  +
mov ecx lpDst +
cmp ecx edi +
jz loc_10B24D1  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10B24D1  +
push eax  +
push esi  +
push 15h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
mov ecx lpDst +
cmp dword ptr [ebp-4] 0 +
jnz loc_10B24E3  +
push dword ptr [ebp+8]  +
mov ecx ebx +
call ?OnEndSession@CFrameWnd@@IAEXH@Z  +
jmp loc_10B24FB  +
cmp ecx edi +
jz loc_10B24FB  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10B24FB  +
push esi  +
push 16h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F7C2  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
cmp dword ptr [ecx+270h] 2 +
jnz loc_10B2527  +
cmp dword ptr [ecx+2C8h] 0 +
jz loc_10B2527  +
add ecx 44h +
mov eax [ecx] +
call dword ptr [eax+70h]  +
cmp eax 1 +
jnz loc_10B2527  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push esi  +
call sub_10207B9  +
test eax eax +
jz loc_10B2543  +
mov esi [eax+174h] +
jmp loc_10B2545  +
xor esi esi +
test esi esi +
jz loc_10B255A  +
push dword ptr [esi+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_10B255A  +
mov eax esi +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor edx edx +
cmp [ecx+14Ch] edx +
push esi  +
mov esi [ebp+8] +
mov eax [esi] +
setnz dl  +
mov ecx esi +
push edx  +
call dword ptr [eax+4]  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
lea eax [ebp+var_10] +
push eax  +
call sub_10B2079  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
call sub_10B252F  +
test eax eax +
jz locret_10B25DA  +
mov edx [eax] +
lea ecx [ebp-10h] +
push ecx  +
mov ecx eax +
call dword ptr [edx+118h]  +
lea ecx [ebp-10h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
mov bl 1 +
call sub_10207B9  +
test eax eax +
jz loc_10B25FE  +
mov ecx eax +
call sub_10B2507  +
mov bl al +
neg bl  +
sbb bl bl +
inc bl  +
mov al bl +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
push dword ptr [ebp+10h]  +
mov esi ecx +
push dword ptr [ebp+0Ch]  +
push ebx  +
call ?OnInitMenuPopup@CFrameWnd@@IAEXPAVCMenu@@IH@Z  +
xor edi edi +
push edi  +
cmp [ebp+10h] edi +
jz loc_10B2670  +
push offset off_10F6DC0  +
push offset off_10F7228  +
push edi  +
push edi  +
mov ecx esi +
mov dword ptr [ebp+10h] 1 +
call ?MDIGetActive@CMDIFrameWnd@@QBEPAVCMDIChildWnd@@PAH@Z  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
cmp eax edi +
jz loc_10B265D  +
mov ecx eax +
call sub_10A4812  +
test al al +
jz loc_10B265D  +
mov [ebp+10h] edi +
push dword ptr [ebp+10h]  +
push 33AFh  +
push dword ptr [ebx+4]  +
call ds:EnableMenuItem  +
jmp loc_10B2696  +
push 3204h  +
push dword ptr [ebx+4]  +
call ds:GetMenuState  +
cmp eax 0FFFFFFFFh +
jz loc_10B2696  +
mov ecx esi +
call sub_10207B9  +
cmp eax edi +
jz loc_10B2696  +
push ebx  +
mov ecx eax +
call sub_108A473  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push 24h  +
mov eax offset byte_10DEC45 +
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmainframeOnsh  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea edx [ebp-10h] +
push edx  +
lea ecx [esi+0C4h] +
mov eax [ecx] +
lea edx [ebp-30h] +
push edx  +
call dword ptr [eax+4]  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B272B  +
lea ecx [ebp-20h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
push 8000FFFFh  +
push dword ptr [ebp-10h]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B2709  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-10h] +
mov eax [ecx] +
lea edx [ebp-30h] +
push edx  +
call dword ptr [eax+24h]  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B2709  +
***
push 8  +
mov eax offset dword_10DEC9C +
call sub_1001F95  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
mov [ebp-4] edi +
cmp [esi+14h] edi +
jz loc_10B2819  +
lea ecx [esi-0C4h] +
call sub_1028EA4  +
test al al +
jz loc_10B2819  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+14h] +
push dword ptr [ebp+10h]  +
call sub_10B6679  +
jmp loc_10B2826  +
cmp [ebp+10h] edi +
jle loc_10B2826  +
mov ecx [ebp+0Ch] +
xor eax eax +
mov [ecx] ax +
mov ecx [ebp+8] +
push edi  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov eax [ebp-10h] +
mov ecx [ebp-14h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
mov [ebp-8] ecx +
cmp eax ecx +
jz loc_10B28A6  +
push ebx  +
mov ebx dword_10F5304 +
test ebx ebx +
jz loc_10B28A5  +
push esi  +
test eax eax +
jnz loc_10B286E  +
xor esi esi +
jmp loc_10B2871  +
mov esi [eax+20h] +
lea eax [ebp-4] +
push eax  +
mov ecx ebx +
call sub_102B490  +
jmp loc_10B289E  +
lea eax [ebp-4] +
push eax  +
mov ecx ebx +
call sub_102B4EB  +
test eax eax +
jz loc_10B289E  +
push 0  +
push esi  +
push 311h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
cmp dword ptr [ebp-4] 0 +
jnz loc_10B287E  +
pop esi  +
pop ebx  +
push dword ptr [ebp+8]  +
mov ecx [ebp-8] +
call ?OnPaletteChanged@CFrameWnd@@IAEXPAVCWnd@@@Z  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10207B9  +
test eax eax +
jz loc_10B28DC  +
push 0  +
push 0  +
push 30Fh  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
pop esi  +
retn   +
***
mov ecx esi +
pop esi  +
jmp loc_10C7BE2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 5  +
add ecx 0E0h +
jmp loc_10B2917  +
push offset off_100A418  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_10B2913  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10A494E  +
push 2  +
mov ecx esi +
call sub_100EB83  +
mov esi eax +
test esi esi +
jnz loc_10B28F9  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push dword ptr [ebp+0Ch]  +
mov esi ecx +
push dword ptr [ebp+8]  +
call ?OnSettingChange@CWnd@@IAEXIPBG@Z  +
call ?GetCurrentMessage@CWnd@@KGPBUtagMSG@@XZ  +
push eax  +
push offset loc_10B227D  +
push dword ptr [esi+20h]  +
call ds:EnumChildWindows  +
cmp dword_10F55CC 3 +
jnz loc_10B29B2  +
push ebx  +
push 0  +
mov ecx esi +
call ?MDIGetActive@CMDIFrameWnd@@QBEPAVCMDIChildWnd@@PAH@Z  +
mov ebx eax +
test ebx ebx +
jz loc_10B29B1  +
push edi  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [esi+100h]  +
call ds:GetClientRect  +
mov esi ds:GetSystemMetrics +
push 21h  +
call esi  +
push 20h  +
mov edi eax +
call esi  +
push edi  +
push eax  +
lea eax [ebp-10h] +
push eax  +
call ds:InflateRect  +
push 4  +
call esi  +
sub [ebp-0Ch] eax +
push 1  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
call sub_1011AA9  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
push 0Ch  +
mov eax offset byte_10D5663 +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-10h] ebx +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
push ebx  +
mov ebx [ebp+8] +
xor esi esi +
inc esi  +
mov ecx ebx +
mov [ebp-4] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmainframeSc_2  +
mov ecx ebx +
mov [ebp-10h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [edi-0C4h] +
call sub_10207B9  +
lea ecx [eax+44h] +
neg eax  +
sbb eax eax +
and eax ecx +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
jnz loc_10B2A26  +
push esi  +
mov ecx ebx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax ebx +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
shr eax 10h +
test eax 2000h +
jz loc_10B2AB2  +
push 0  +
push 30001h  +
push 127h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
xor edx edx +
lea ecx [esi+12Ch] +
cmp [ecx+20h] edx +
mov eax [ecx] +
setz dl  +
push edx  +
call dword ptr [eax+4]  +
mov ecx esi +
pop esi  +
jmp sub_100FA40  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ?OnUpdateFrameMenu@CMDIFrameWnd@@UAEXPAUHMENU__@@@Z  +
mov ecx esi +
call sub_10196A3  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push 0  +
lea ecx [ebp+var_14] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplica_10  +
lea ecx [ebp+var_14] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_14] +
call sub_107B7E5  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B2B89  +
lea ecx [ebp+var_14] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_14] +
mov esi eax +
call sub_1090EF1  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_24] +
push eax  +
call sub_10B1BCF  +
push eax  +
lea ecx [ebp+var_14] +
call sub_107B7E5  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B2B6F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push 0  +
lea ecx [ebp+var_14] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplica_11  +
lea ecx [ebp+var_14] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_14] +
call sub_107B7E5  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B2C61  +
lea ecx [ebp+var_14] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_14] +
mov esi eax +
call sub_1090EF1  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_24] +
push eax  +
call sub_10B1C53  +
push eax  +
lea ecx [ebp+var_14] +
call sub_107B7E5  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B2C47  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push 0  +
lea ecx [ebp+var_14] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplica_12  +
lea ecx [ebp+var_14] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_14] +
call sub_107B7E5  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B2D39  +
lea ecx [ebp+var_14] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_14] +
mov esi eax +
call sub_1090EF1  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_24] +
push eax  +
call sub_10B1CD7  +
push eax  +
lea ecx [ebp+var_14] +
call sub_107B7E5  +
lea ecx [ebp+var_24] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B2D1F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplica_13  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_10B2DEE  +
push 80004003h  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_10] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call sub_1090EF1  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
mov ecx [ebp+arg_0] +
and [ebp+arg_4] 0 +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_10] +
call sub_107B7E5  +
lea ecx [ebp+var_30] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B2DD4  +
mov ecx [ebp+arg_4] +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
call sub_1032FED  +
push eax  +
lea ecx [ebp+var_10] +
call sub_107B7E5  +
lea ecx [ebp+var_30] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B2DD4  +
mov eax [ebp+arg_8] +
sub eax 0 +
jz loc_10B2E7C  +
dec eax  +
jz loc_10B2E77  +
dec eax  +
jz loc_10B2E6D  +
dec eax  +
jnz loc_10B2DD4  +
mov eax [ebp+var_14] +
jmp loc_10B2E70  +
mov eax [ebp+var_1C] +
mov [esi] eax +
jmp loc_10B2DD4  +
mov eax [ebp+var_18] +
jmp loc_10B2E70  +
mov eax [ebp+var_20] +
jmp loc_10B2E70  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push esi  +
xor esi esi +
push esi  +
lea ecx [ebp+var_14] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcapplica_14  +
lea ecx [ebp+var_14] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
add ecx 3Ch +
mov [ebp+var_4] esi +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_14] +
call sub_107B7E5  +
lea ecx [ebp+var_34] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B2F47  +
lea ecx [ebp+var_14] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_14] +
mov esi eax +
call sub_1090EF1  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
call sub_1032FED  +
push eax  +
lea ecx [ebp+var_14] +
call sub_107B7E5  +
lea ecx [ebp+var_34] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_14] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B2F2D  +
mov eax [ebp+arg_8] +
sub eax esi +
jz loc_10B2F9E  +
dec eax  +
jz loc_10B2F96  +
dec eax  +
jz loc_10B2F8E  +
dec eax  +
jnz loc_10B2FA4  +
mov eax [ebp+arg_4] +
mov [ebp+var_18] eax +
jmp loc_10B2FA4  +
mov eax [ebp+arg_4] +
mov [ebp+var_20] eax +
jmp loc_10B2FA4  +
mov eax [ebp+arg_4] +
mov [ebp+var_1C] eax +
jmp loc_10B2FA4  +
mov eax [ebp+arg_4] +
mov [ebp+var_24] eax +
mov ecx [ebp+var_4] +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
call sub_10B1D59  +
push eax  +
lea ecx [ebp+var_14] +
call sub_107B7E5  +
lea ecx [ebp+var_34] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B2F2D  +
***
mov eax [ecx+4] +
mov dword ptr [ecx] offset off_106CC4C +
test eax eax +
jz locret_10B3036  +
push ecx  +
lea ecx [eax+0C8h] +
call sub_101A545  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10B301D  +
test byte ptr [ebp+8] 1 +
jz loc_10B3056  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub ecx 0C8h +
jmp loc_1053B04  +
***
sub ecx 80h +
jmp loc_1053915  +
***
sub ecx 54h +
jmp loc_1053915  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+3Ch] +
call sub_10B301D  +
mov ecx esi +
pop esi  +
jmp sub_1075F98  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aSccreateconnec  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov eax esi +
neg eax  +
sbb eax eax +
lea ecx [esi+3Ch] +
and eax ecx +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [edi+0C8h] +
call sub_1031995  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_10B312F  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B3138  +
mov [esi+40h] edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1090DF2  +
and dword ptr [esi+40h] 0 +
mov dword ptr [esi+3Ch] offset off_106CC4C +
mov dword ptr [esi] offset off_10B31DC +
mov dword ptr [esi+4] offset off_10B31C8 +
mov dword ptr [esi+8] offset off_10B31B0 +
mov dword ptr [esi+0Ch] offset off_10B31A4 +
mov dword ptr [esi+3Ch] offset off_10B3198 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push 0  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+48h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push 0  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+4Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push 1  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+48h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push 1  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+4Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push 2  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+48h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push 2  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+4Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push 3  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+48h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push 3  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+4Ch]  +
pop ebp  +
retn 8  +
***
sub ecx 3Ch +
jmp loc_10B3325  +
sub ecx 0Ch +
jmp loc_10B3325  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10B308F  +
test byte ptr [ebp+8] 1 +
jz loc_10B333F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10B3158  +
push offset Addend  +
mov dword ptr [esi] offset off_10146E4 +
mov dword ptr [esi+4] offset off_106CCD8 +
mov dword ptr [esi+8] offset off_106CCAC +
mov dword ptr [esi+0Ch] offset off_106CC8C +
mov dword ptr [esi+3Ch] offset off_106CC6C +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 3Ch +
jmp loc_10B3467  +
***
sub ecx 0Ch +
jmp loc_10B3467  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10B33C4  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10B33A7  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10B33ED  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10B33ED  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_10146E4 +
mov dword ptr [esi+4] offset off_106CCD8 +
mov dword ptr [esi+8] offset off_106CCAC +
mov dword ptr [esi+0Ch] offset off_106CC8C +
mov dword ptr [esi+3Ch] offset off_106CC6C +
mov dword ptr [esi+1Ch] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_10B308F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10B3421  +
test byte ptr [ebp+8] 1 +
jz loc_10B3481  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10B34A9  +
mov eax 80004003h +
jmp loc_10B3517  +
push 44h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_10B34D5  +
push esi  +
call sub_10B334B  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_10B34EB  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10B34E5 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10B3510  +
lea ecx [esi+20h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10B3503  +
xor ebx ebx +
test ebx ebx +
jz loc_10B3513  +
lea ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor esi esi +
jmp loc_10B3513  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
xor esi esi +
push esi  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtiedcomobject  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
cmp [edi] esi +
jnz loc_10B35E4  +
lea eax [ebp+10h] +
push eax  +
mov [ebp+10h] esi +
call sub_10B348D  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B3590  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B35F1  +
cmp [ebp+10h] esi +
jnz loc_10B35A5  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10B35E7  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10B30A9  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B35E4  +
push dword ptr [ebp+10h]  +
push edi  +
call sub_100CA9D  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
xor edi edi +
push edi  +
lea ecx [ebp-24h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmainframeSc_0  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
cmp esi edi +
jnz loc_10B366A  +
push 80004003h  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B36F6  +
mov [esi] edi +
mov [ebp+0Ch] edi +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp-14h]  +
lea eax [ebp-34h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_10B3524  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B36CD  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp+0Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
cmp eax edi +
jz loc_10B36F9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10B36F9  +
mov eax [ebp+0Ch] +
cmp eax edi +
jnz loc_10B36E4  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10B36E9  +
mov [ebp+0Ch] edi +
mov [esi] eax +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100472C +
call ??1CWnd@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10B3767  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCmdimenudecora  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebp+0Ch] 3 +
ja loc_10B37B7  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B37CF  +
push 80070057h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCmdimenudeco_0  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push esi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 1Ch  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCmdimenudeco_0  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push esi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCmdimenudeco_0  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push esi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCmdimenudeco_0  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push esi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
cmp [ebp+arg_0] 0 +
push ebx  +
mov ebx eax +
jnz loc_10B39BD  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B3ACD  +
cmp byte ptr [eax+19h] 2 +
jb loc_10B3ACD  +
push offset dword_106CD00  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10B3ACD  +
cmp [ebp+arg_8] 0 +
jz loc_10B39C9  +
or ebx 200h +
push esi  +
push edi  +
call sub_10067E8  +
mov edi eax +
call ds:IsAppThemed  +
test eax eax +
jz loc_10B3A86  +
call ds:IsThemeActive  +
test eax eax +
jz loc_10B3A86  +
test edi edi +
jz loc_10B3A86  +
mov esi ebx +
and esi 0Fh +
cmp esi 3 +
ja loc_10B3ACB  +
mov eax [edi+20h] +
push offset aWindow  +
push eax  +
call ds:OpenThemeData  +
mov edi eax +
test edi edi +
jz loc_10B3A86  +
mov eax ds:dword_106CD10[esi*8] +
dec eax  +
jz loc_10B3A52  +
dec eax  +
jz loc_10B3A4E  +
dec eax  +
dec eax  +
jz loc_10B3A4A  +
push 4  +
pop ecx  +
sub eax ecx +
jnz loc_10B3A62  +
push 16h  +
pop edx  +
test ebx 100h +
jnz loc_10B3A68  +
xor ecx ecx +
cmp [ebp+arg_8] cl +
setnz cl  +
lea ecx [ecx+ecx+1] +
jmp loc_10B3A68  +
push 11h  +
jmp loc_10B3A54  +
push 10h  +
jmp loc_10B3A54  +
push 14h  +
pop edx  +
test ebx 100h +
jz loc_10B3A3C  +
push 4  +
pop ecx  +
jmp loc_10B3A68  +
mov edx dword ptr [ebp+arg_8] +
mov ecx dword ptr [ebp+arg_8] +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
push 0  +
push [ebp+lprcSrc]  +
push ecx  +
push edx  +
push eax  +
push edi  +
call ds:DrawThemeBackground  +
push edi  +
call ds:CloseThemeData  +
jmp loc_10B3ACB  +
push [ebp+lprcSrc]  +
lea ecx [ebp+rcDst] +
call sub_10B5CBE  +
push 0FFFFFFFEh  +
push 0FFFFFFFFh  +
lea eax [ebp+rcDst] +
push eax  +
call ds:InflateRect  +
xor eax eax +
cmp ebx 1 +
setz al  +
push 0  +
lea eax [eax+eax-1] +
push eax  +
lea eax [ebp+rcDst] +
push eax  +
call ds:OffsetRect  +
push ebx  +
push 1  +
lea eax [ebp+rcDst] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
call ds:DrawFrameControl  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
cmp byte ptr [esi+48h] 0 +
push dword ptr [esi+4]  +
setz al  +
lea ecx [ebp-20h] +
mov [esi+48h] al +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
mov ecx eax +
movzx edx byte ptr [esi+48h] +
mov eax [esi] +
and dword ptr [ebp-4] 0 +
push edx  +
mov edx eax +
shl edx 4 +
lea edx [edx+esi+8] +
push edx  +
push ecx  +
call sub_10B397B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ??1CClientDC@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
lea esi [ecx+8] +
push [ebp+pt.y]  +
mov ecx esi +
push [ebp+pt.x]  +
call sub_107E59D  +
test eax eax +
jnz loc_10B3B6D  +
inc edi  +
add esi 10h +
cmp edi 4 +
jb loc_10B3B4A  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax edi +
jmp loc_10B3B67  +
***
mov edi edi +
push esi  +
xor esi esi +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
cmp eax esi +
jz loc_10B3B9C  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+0C8h]  +
cmp eax esi +
jz loc_10B3B9C  +
push esi  +
mov ecx eax +
call sub_102132D  +
mov esi eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_10B3BBE  +
call sub_10B3B76  +
test eax eax +
jnz loc_10B3BBE  +
xor al al +
jmp loc_10B3BD1  +
push 0  +
push [ebp+uId]  +
push dword ptr [eax+4]  +
call ds:GetMenuState  +
not eax  +
and eax 1 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:GetSystemMetrics +
push edi  +
push 36h  +
call esi  +
push 37h  +
mov edi eax +
call esi  +
mov edx [ebp+arg_4] +
mov ecx eax +
mov eax [ebp+arg_0] +
and dword ptr [eax+4] 0 +
mov esi edi +
imul esi edx +
inc edx  +
imul edx edi +
pop edi  +
mov [eax] esi +
mov [eax+8] edx +
mov [eax+0Ch] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
lea eax [ebp+rc] +
push eax  +
push dword ptr [ecx+20h]  +
call ds:GetClientRect  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_10B3C58  +
push 36h  +
call ds:GetSystemMetrics  +
mov ecx eax +
test ecx ecx +
jz loc_10B3C58  +
mov eax [ebp+pt.x] +
cdq   +
idiv  ecx +
jmp locret_10B3C5B  +
or eax 0FFFFFFFFh +
leave   +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCmdimenudecora  +
lea ecx [ebp-20h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+0Ch] +
cmp word ptr [eax] 3 +
jz loc_10B3CB8  +
push 80070057h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B3CC5  +
push dword ptr [eax+8]  +
mov ecx edi +
push dword ptr [ebp+8]  +
call sub_10B3773  +
lea ecx [ebp-20h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmdimenudeco_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B3D3A  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B3D3A  +
push offset dword_106CD00  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B3D81  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B3DAA  +
push dword ptr [ebp+0Ch]  +
push offset stru_106DAE0  +
push 0  +
push dword ptr [esi+20h]  +
call AccessibleObjectFromWindow  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmdimenudeco_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
push 80070057h  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B3E41  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B3E78  +
push 3  +
pop ecx  +
mov [esi] ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B3E6B  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B3E6B  +
push ecx  +
push offset dword_106CD00  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmdimenudeco_1  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+1Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B3F14  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B3F88  +
mov ecx [ebp-14h] +
and dword ptr [edi] 0 +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_10B3C64  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B3F7B  +
push ebx  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B3F7B  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B3F7B  +
push dword ptr [ebp+14h]  +
push offset dword_106CD00  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmdimenudeco_3  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+1Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B406F  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B40CC  +
push edi  +
call VariantInit  +
mov ecx [ebp-14h] +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_10B3C64  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
jnz loc_10B40C2  +
push 3  +
pop eax  +
mov [edi] ax +
mov eax [ebp+14h] +
neg eax  +
sbb eax eax +
and eax 21h +
add eax 0Ah +
mov [edi+8] eax +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmdimenudeco_4  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_10B3C64  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B41A7  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B41C4  +
mov eax [ebp+1Ch] +
push 3  +
pop ecx  +
mov [eax] cx +
mov ecx [ebp+8] +
mov dword ptr [eax+8] 100h +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmdimenudeco_5  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B4282  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B4282  +
push offset dword_106CD00  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ebx [ebp+18h] +
mov edi [ebp+14h] +
push 80070057h  +
push ebx  +
push edi  +
push dword ptr [ebp+10h]  +
lea eax [ebp-44h] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100D4B3  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B42DA  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B4390  +
mov ecx [ebp+10h] +
xor eax eax +
mov [ebx] eax +
mov [edi] eax +
mov [ecx] eax +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov ecx [ebp-10h] +
lea eax [ebp+1Ch] +
push eax  +
lea eax [ebp-44h] +
push eax  +
call sub_10B3C64  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B4383  +
mov eax [ebp+24h] +
test eax eax +
jnz loc_10B4337  +
lea eax [ebp-34h] +
push eax  +
mov eax [ebp-10h] +
push dword ptr [eax+20h]  +
call ds:GetWindowRect  +
jmp loc_10B4365  +
mov ecx [ebp-10h] +
dec eax  +
push eax  +
lea eax [ebp-44h] +
push eax  +
call sub_10B3BDA  +
mov esi eax +
lea edi [ebp-34h] +
movs   +
movs   +
push 2  +
lea eax [ebp-34h] +
push eax  +
mov eax [ebp-10h] +
movs   +
push 0  +
push dword ptr [eax+20h]  +
movs   +
call ds:MapWindowPoints  +
mov edi [ebp+14h] +
mov eax [ebp-34h] +
mov ecx [ebp+0Ch] +
mov edx [ebp+10h] +
mov [ecx] eax +
mov ecx [ebp-30h] +
mov [edx] ecx +
mov edx [ebp-2Ch] +
sub edx eax +
mov eax [ebp-28h] +
sub eax ecx +
mov [edi] edx +
mov [ebx] eax +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov dword ptr [ebp-14h] 1 +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 24h  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmdimenudeco_6  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+14h] +
push 80070057h  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B4475  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B44FB  +
push edi  +
call VariantInit  +
mov eax [ebp+0Ch] +
mov [ebp-18h] eax +
mov eax [ebp+10h] +
mov [ebp-14h] eax +
lea eax [ebp-18h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:ScreenToClient  +
push dword ptr [ebp-14h]  +
mov ecx esi +
push dword ptr [ebp-18h]  +
call sub_10B3C19  +
mov esi eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B44CE  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B44CE  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset dword_106CD00  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
cmp esi 0FFFFFFFFh +
jnz loc_10B44E4  +
xor eax eax +
push ebx  +
lea ecx [ebp-28h] +
mov [edi] ax +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10B44EE  +
push 3  +
pop eax  +
inc esi  +
mov [edi] ax +
mov [edi+8] esi +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40Ch +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push dword ptr [esi]  +
mov [ebp+hInstance] edi +
call SysFreeString  +
and dword ptr [esi] 0 +
mov ebx 200h +
push ebx  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
push edi  +
mov edi ds:LoadStringW +
call edi  +
test eax eax +
jnz loc_10B45AE  +
xor al al +
jmp loc_10B45F8  +
cmp eax 1FFh +
jnz loc_10B45D0  +
push 201h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
push [ebp+hInstance]  +
call edi  +
cmp eax ebx +
jz loc_10B45AA  +
and [ebp+hInstance] 0 +
lea eax [ebp+Buffer] +
push eax  +
call SysAllocString  +
test eax eax +
lea ecx [ebp+hInstance] +
mov [esi] eax +
setnz bl  +
call sub_1070A9C  +
mov al bl +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+8] +
push ebx  +
push esi  +
mov esi ds:GetSystemMetrics +
push edi  +
mov ebx ecx +
push 36h  +
mov [ebx+4] eax +
mov byte ptr [ebx+48h] 0 +
call esi  +
mov edi eax +
push 37h  +
mov [ebp-8] edi +
call esi  +
mov ecx [ebx+4] +
mov esi eax +
call ?GetStyle@CWnd@@QBEKXZ  +
and dword ptr [ebp-18h] 0 +
and dword ptr [ebp-14h] 0 +
mov [ebp-4] eax +
mov [ebp-10h] edi +
mov [ebp-0Ch] esi +
mov dword ptr [ebp+8] offset dword_106CD30 +
mov eax [ebp+8] +
mov eax [eax] +
mov ecx [ebp-4] +
test ds:dword_106CD10[eax*8] ecx +
jz loc_10B468A  +
shl eax 4 +
lea edi [eax+ebx+8] +
lea esi [ebp-18h] +
movs   +
movs   +
push 0  +
push dword ptr [ebp-8]  +
movs   +
lea eax [ebp-18h] +
push eax  +
movs   +
call ds:OffsetRect  +
jmp loc_10B4698  +
shl eax 4 +
lea eax [eax+ebx+8] +
push eax  +
call ds:SetRectEmpty  +
add dword ptr [ebp+8] 4 +
cmp dword ptr [ebp+8] offset aCmdimenudecora +
jl loc_10B465A  +
push dword ptr [ebp+10h]  +
mov ecx ebx +
push dword ptr [ebp+0Ch]  +
call sub_10B3B3E  +
mov ecx [ebx+4] +
push 0  +
mov [ebx] eax +
push ds:dword_106CD14[eax*8]  +
call sub_10B3BA5  +
test al al +
jnz loc_10B46CE  +
call ?AfxThrowUserException@@YGXXZ  +
mov ecx ebx +
call sub_10B3AE7  +
mov eax [ebx+4] +
push dword ptr [eax+20h]  +
call ds:SetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:ReleaseCapture  +
cmp byte ptr [esi+48h] 0 +
jz loc_10B470E  +
mov ecx esi +
pop esi  +
jmp sub_10B3AE7  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+pt.y]  +
mov esi ecx +
push [ebp+pt.x]  +
call sub_10B3B3E  +
mov ecx [esi] +
cmp eax ecx +
jz loc_10B4738  +
cmp byte ptr [esi+48h] 0 +
jnz loc_10B473E  +
cmp eax ecx +
jnz loc_10B4745  +
cmp byte ptr [esi+48h] 0 +
jnz loc_10B4745  +
mov ecx esi +
call sub_10B3AE7  +
pop esi  +
pop ebp  +
retn 8  +
***
push 7Ch  +
mov eax offset dword_10DF29C +
call sub_100C4D0  +
mov [ebp-6Ch] ecx +
push ecx  +
lea ecx [ebp-64h] +
call ??0CPaintDC@@QAE@PAVCWnd@@@Z  +
xor ebx ebx +
mov [ebp-4] ebx +
cmp [ebp-4Ch] ebx +
jz loc_10B4785  +
push 0Fh  +
call sub_1023561  +
push eax  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-64h] +
call sub_102353C  +
mov esi ds:GetSystemMetrics +
push 36h  +
call esi  +
push 37h  +
mov edi eax +
call esi  +
mov ecx [ebp-6Ch] +
mov esi eax +
call ?GetStyle@CWnd@@QBEKXZ  +
mov ecx [ebp-6Ch] +
mov [ebp-74h] eax +
mov [ebp-88h] ebx +
mov [ebp-84h] ebx +
mov [ebp-80h] edi +
mov [ebp-7Ch] esi +
call sub_10B3B76  +
mov [ebp-78h] eax +
mov dword ptr [ebp-68h] offset dword_106CD30 +
mov eax [ebp-68h] +
mov esi [eax] +
mov eax [ebp-74h] +
test ds:dword_106CD10[esi*8] eax +
jz loc_10B481C  +
push dword ptr [ebp-78h]  +
mov ecx [ebp-6Ch] +
push ds:dword_106CD14[esi*8]  +
mov [ebp-70h] esi +
call sub_10B3BA5  +
test al al +
jnz loc_10B47F9  +
or esi 100h +
mov [ebp-70h] esi +
push ebx  +
lea eax [ebp-88h] +
push eax  +
lea eax [ebp-64h] +
push eax  +
mov eax [ebp-70h] +
call sub_10B397B  +
push ebx  +
push edi  +
lea eax [ebp-88h] +
push eax  +
call ds:OffsetRect  +
add dword ptr [ebp-68h] 4 +
cmp dword ptr [ebp-68h] offset aCmdimenudecora +
jl loc_10B47C6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-64h] +
call ??1CPaintDC@@UAE@XZ  +
call sub_100C50D  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+50h] +
test ecx ecx +
jz loc_10B4857  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10B4715  +
pop ebp  +
retn 0Ch  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmdimenudeco_2  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+1Ch] +
push 80070057h  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B48DF  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B49AE  +
mov ecx [ebp-14h] +
and dword ptr [edi] 0 +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_10B3C64  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B49A1  +
mov eax [ebp+14h] +
xor esi esi +
mov [ebp-14h] eax +
cmp eax esi +
jnz loc_10B4931  +
push ebx  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10B496E  +
dec eax  +
sub eax esi +
mov [ebp+1Ch] esi +
jz loc_10B494D  +
dec eax  +
jz loc_10B4946  +
dec eax  +
jnz loc_10B4967  +
push 0D2h  +
jmp loc_10B4952  +
push 0D1h  +
jmp loc_10B4952  +
push 0D0h  +
mov eax dword_10F52E8 +
push dword ptr [eax+8]  +
lea ecx [ebp+1Ch] +
call sub_10B455F  +
mov eax [ebp+1Ch] +
mov [edi] eax +
push esi  +
call SysFreeString  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B49A1  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B49A1  +
mov edi [edi] +
cmp edi esi +
jnz loc_10B498B  +
mov edi offset aNone +
push edi  +
push dword ptr [ebp-14h]  +
push offset dword_106CD00  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10AC375  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10B46F5  +
test [ebp+arg_0] 1 +
jz loc_10B4A33  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi ecx +
jz loc_10B4A5C  +
test ecx ecx +
jz loc_10B4A5C  +
push 1  +
call sub_10B4A19  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
and dword ptr [eax] 0 +
push ecx  +
mov ecx esi +
call sub_10B4A3F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
push edi  +
lea edi [ebx+50h] +
mov ecx [edi] +
test ecx ecx +
jz loc_10B4BB5  +
push esi  +
push dword ptr [ebp+10h]  +
mov esi [ecx] +
push dword ptr [ebp+0Ch]  +
call sub_10B3B3E  +
and dword ptr [ebp-4] 0 +
mov [ebp-8] eax +
lea eax [ebp-4] +
push eax  +
mov ecx edi +
call sub_10B4A69  +
mov ecx [ebp-4] +
test ecx ecx +
jz loc_10B4B77  +
push 1  +
call sub_10B4A19  +
cmp [ebp-8] esi +
jnz loc_10B4BB4  +
mov edi ds:dword_106CD14[esi*8] +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebx+20h]  +
call ds:ClientToScreen  +
movzx esi word ptr [ebp+10h] +
movzx eax word ptr [ebp+0Ch] +
shl esi 10h +
mov ecx ebx +
or esi eax +
call sub_100991D  +
push esi  +
push edi  +
push 112h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov eax [ecx+4] +
mov dword ptr [ecx] offset off_106CDDC +
test eax eax +
jz locret_10B4BD6  +
push ecx  +
lea ecx [eax+40h] +
call sub_101A545  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10B4BC0  +
test byte ptr [ebp+8] 1 +
jz loc_10B4BF6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub ecx 40h +
jmp loc_1053C1E  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+3Ch] +
call sub_10B4BC0  +
mov ecx esi +
pop esi  +
jmp sub_1075F98  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aSccreateconnec  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
mov edi [ebp+10h] +
mov eax esi +
neg eax  +
sbb eax eax +
lea ecx [esi+3Ch] +
and eax ecx +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [edi+40h] +
call sub_1031995  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
test al al +
lea eax [ebp-20h] +
push eax  +
jz loc_10B4CAC  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B4CB5  +
mov [esi+40h] edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov dword ptr [esi] offset off_10B4D5C +
mov dword ptr [esi+4] offset off_10B4D44 +
mov dword ptr [esi+8] offset off_10B4D2C +
mov dword ptr [esi+0Ch] offset off_10B4D20 +
mov dword ptr [esi+3Ch] offset off_10B4D14 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtiedcomobje_0  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+4] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
cmp dword ptr [esi+4] 0 +
jnz loc_10B4E48  +
push 345Dh  +
lea eax [ebp-30h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B4E58  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
add [eax-6F6F6F70h] dl +
sub ecx 0Ch +
jmp loc_10B57A3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B4F4A  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10B3CE5  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B4F27  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B4FED  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10B3DCA  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B4FCA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B5092  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10B3E98  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B506E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B5143  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10B4860  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B511F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B51F4  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10B3FF3  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B51D0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B52A5  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10B4131  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B5281  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B5356  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
push [ebp+arg_14]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10B3852  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B5332  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B5407  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 1Ch  +
push [ebp+arg_18]  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
push [ebp+arg_4]  +
lea esi [ebp+arg_8] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10B37EF  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B53E3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B54B9  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_4]  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_2C] +
push eax  +
call sub_10B38B5  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B5496  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B555E  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
push [ebp+arg_4]  +
lea esi [ebp+arg_8] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10B3852  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B553A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B560F  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 24h  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
push [ebp+arg_10]  +
lea esi [ebp+arg_14] +
push [ebp+arg_C]  +
movs   +
push [ebp+arg_8]  +
movs   +
push [ebp+arg_4]  +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10B422B  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B55EB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B56C7  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
push [ebp+arg_C]  +
mov ecx [ebp+var_4] +
push [ebp+arg_8]  +
lea eax [ebp+var_2C] +
push [ebp+arg_4]  +
push eax  +
call sub_10B43F9  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B56A4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp+var_C] +
call MFC42u_6466  +
push 0  +
lea ecx [ebp+var_1C] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
add ecx 3Ch +
call sub_10B4DD1  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp+var_1C] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B5772  +
lea ecx [ebp+var_1C] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_1C] +
mov esi eax +
call sub_10AF291  +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
mov ecx [ebp+var_4] +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
call sub_10B3918  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_107B7E5  +
lea ecx [ebp+var_2C] +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10B574E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10B4C0F  +
test byte ptr [ebp+8] 1 +
jz loc_10B57BD  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [esi] offset off_10148EC +
mov dword ptr [esi+4] offset off_106CE68 +
mov dword ptr [esi+8] offset off_106CE3C +
mov dword ptr [esi+0Ch] offset off_106CE1C +
mov dword ptr [esi+3Ch] offset off_106CDFC +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
sub ecx 0Ch +
jmp loc_10B58F3  +
***
sub ecx 3Ch +
jmp loc_10B58F3  +
***
sub dword ptr [esp+4] 8 +
jmp loc_107D878  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10B5850  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10B5834  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10B5879  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10B5879  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_10148EC +
mov dword ptr [esi+4] offset off_106CE68 +
mov dword ptr [esi+8] offset off_106CE3C +
mov dword ptr [esi+0Ch] offset off_106CE1C +
mov dword ptr [esi+3Ch] offset off_106CDFC +
mov dword ptr [esi+1Ch] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_10B4C0F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10B58AD  +
test byte ptr [ebp+8] 1 +
jz loc_10B590D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10B5935  +
mov eax 80004003h +
jmp loc_10B59A3  +
push 44h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_10B5961  +
push esi  +
call near ptr dword_10B57C4+5  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_10B5977  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10B5971 +
retn   +
***
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10B599C  +
lea ecx [esi+20h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10B598F  +
xor ebx ebx +
test ebx ebx +
jz loc_10B599F  +
lea ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor esi esi +
jmp loc_10B599F  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B5A1C  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B5A7D  +
cmp [ebp+10h] esi +
jnz loc_10B5A31  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10B5A73  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push dword ptr [ebp+10h]  +
push eax  +
call near ptr dword_10B4C24+5  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B5A70  +
push dword ptr [ebp+10h]  +
push edi  +
call sub_100CA9D  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
push 34h  +
mov eax offset word_10DF44A +
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-20h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmdimenudeco_7  +
lea ecx [ebp-20h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp dword ptr [ebp+0Ch] 0FFFFFFFCh +
jz loc_10B5B0C  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B5AF5  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B5AF5  +
push offset dword_106CD00  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
call sub_1001FCF  +
retn 8  +
***
lea edi [esi+54h] +
push edi  +
push esi  +
lea eax [ebp-40h] +
push eax  +
call near ptr byte_10B59B0  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
mov dword ptr [ebp-10h] 1 +
call esi  +
mov ecx eax +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B5B72  +
mov eax [edi] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov dword ptr [ebp-4] 2 +
mov dword ptr [ebp-10h] 3 +
call esi  +
mov ecx eax +
call ds:?IsError@SC@mmcerror@@QBE_NXZ  +
mov byte ptr [ebp+0Fh] 0 +
test al al +
jz loc_10B5B76  +
mov byte ptr [ebp+0Fh] 1 +
test byte ptr [ebp-10h] 2 +
mov dword ptr [ebp-4] 1 +
jz loc_10B5B90  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-30h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor esi esi +
test byte ptr [ebp-10h] 1 +
mov [ebp-4] esi +
jz loc_10B5BA4  +
lea ecx [ebp-40h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp byte ptr [ebp+0Fh] 0 +
jz loc_10B5BEB  +
lea ecx [ebp-20h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B5BD7  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B5BD7  +
push offset dword_106CD00  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
jmp loc_10B5B04  +
***
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B5C0F  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B5C0F  +
push offset dword_106CD00  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push dword ptr [edi]  +
push dword ptr [ebp+8]  +
push offset stru_106B618  +
call LresultFromObject  +
mov esi eax +
jmp loc_10B5BD7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+0C5h] 0 +
jz loc_10B5C91  +
mov eax [ebp+8] +
test byte ptr [eax+0Ch] 1 +
jz loc_10B5C91  +
cmp dword ptr [eax+10h] 5404h +
jz loc_10B5C91  +
or dword ptr [eax+18h] 0FFFFFFFFh +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
cmp eax [ebp+arg_0] +
jnz loc_10B5CB2  +
mov eax [ecx+4] +
cmp eax [ebp+arg_4] +
jnz loc_10B5CB2  +
xor eax eax +
jmp loc_10B5CB5  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lprcSrc]  +
mov esi ecx +
push esi  +
call ds:CopyRect  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10A5A75  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 0FFFFFFFCh  +
mov esi ecx +
push dword ptr [esi+20h]  +
push 4  +
call ds:NotifyWinEvent  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10A51A6  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 0FFFFFFFCh  +
mov esi ecx +
push dword ptr [esi+20h]  +
push 5  +
call ds:NotifyWinEvent  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10A598A  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+55h] 0 +
jz loc_10B5D76  +
cmp dword_10FD678 esi +
jnz loc_10B5D76  +
push edi  +
push dword ptr [esi+14h]  +
mov edi ds:UnhookWindowsHookEx +
call edi  +
push dword ptr [esi+18h]  +
call edi  +
push dword ptr [esi+1Ch]  +
call edi  +
mov byte ptr [esi+55h] 0 +
and dword_10FD678 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+58h] +
test eax eax +
jl loc_10B5D92  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov al 1 +
jmp loc_10B5D94  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lParam] +
push ebx  +
push esi  +
xor bl bl +
push edi  +
mov esi ecx +
test eax eax +
jz loc_10B5DD7  +
cmp dword ptr [eax+8] 11Fh +
jnz loc_10B5DD7  +
movzx ecx word ptr [eax+6] +
cmp ecx 0FFFFh +
jnz loc_10B5DCE  +
cmp dword ptr [eax] 0 +
jnz loc_10B5DCE  +
inc bl  +
jmp loc_10B5DD7  +
shr ecx 4 +
and cl 1 +
mov [esi+54h] cl +
push eax  +
push [ebp+wParam]  +
push [ebp+nCode]  +
push dword ptr [esi+1Ch]  +
call ds:CallNextHookEx  +
mov edi eax +
test bl bl +
jz loc_10B5DF4  +
mov ecx esi +
call sub_10B5D41  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_10B5E0E  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+11h] 0 +
jz loc_10B5E0C  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpPoint] +
push edi  +
mov ebx ecx +
push esi  +
push dword ptr [ebx+20h]  +
call ds:ClientToScreen  +
lea edi [esi+8] +
push edi  +
push dword ptr [ebx+20h]  +
call ds:ClientToScreen  +
mov ecx ebx +
call ?GetExStyle@CWnd@@QBEKXZ  +
test eax 400000h +
jz loc_10B5E5A  +
mov eax [esi] +
mov ecx [edi] +
mov [esi] ecx +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 7Fh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10B5E9C  +
push [ebp+arg_8]  +
mov ecx esi +
call ??4CString@@QAEABV0@ABV0@@Z  +
add esi 4 +
cmp esi [ebp+arg_4] +
jnz loc_10B5E8F  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] esi +
jz loc_10B5ECC  +
sub [ebp+arg_8] 4 +
mov ecx [ebp+arg_8] +
sub esi 4 +
push esi  +
call ??4CString@@QAEABV0@ABV0@@Z  +
cmp esi [ebp+arg_0] +
jnz loc_10B5EB7  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_10B5EF8  +
push esi  +
push edi  +
mov esi [ebp+arg_8] +
mov edi eax +
movs   +
add eax 6 +
movs   +
cmp eax [ebp+arg_4] +
jnz loc_10B5EE6  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp [ebp+arg_0] eax +
jz loc_10B5F24  +
push esi  +
push edi  +
sub [ebp+arg_8] 6 +
mov edi [ebp+arg_8] +
sub eax 6 +
mov esi eax +
movs   +
movs   +
cmp eax [ebp+arg_0] +
jnz loc_10B5F0E  +
pop edi  +
pop esi  +
mov eax [ebp+arg_8] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_14] 0 +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
call sub_100940C  +
test eax eax +
jz loc_10B5F59  +
mov eax [ebp+var_14] +
jmp loc_10B5F5C  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002492  +
leave   +
retn 4  +
***
call sub_1001F95  +
test byte ptr dword_10FD684 1 +
mov esi offset unk_10FD67C +
jnz loc_10B5FAD  +
or dword_10FD684 1 +
and dword ptr [ebp-4] 0 +
push 3  +
push offset stru_10FCEB8  +
mov ecx esi +
call sub_10C7395  +
push offset loc_10E80C7  +
call sub_100BFD5  +
pop ecx  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+94h] +
lea eax [ebp-4] +
push eax  +
call ?MDIGetActive@CMDIFrameWnd@@QBEPAVCMDIChildWnd@@PAH@Z  +
mov ecx eax +
test ecx ecx +
jz loc_10B6024  +
mov edx [ebp+8] +
and edx 0FFF0h +
sub edx 0F020h +
jz loc_10B601D  +
sub edx 10h +
jz loc_10B6019  +
sub edx 30h +
jz loc_10B6008  +
sub edx 0C0h +
jz loc_10B6004  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
jmp loc_10B6024  +
push 9  +
jmp loc_10B601F  +
push 0  +
push 0  +
push 10h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
jmp loc_10B6024  +
push 3  +
jmp loc_10B601F  +
push 6  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 8000h  +
push dword ptr [ecx+20h]  +
call ds:PostMessageW  +
pop ebp  +
retn 4  +
***
push 20h  +
mov eax offset byte_10D7A1B +
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmenubarOnhoti  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
push 80070057h  +
push esi  +
push dword ptr [ebp+8]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B60EC  +
push esi  +
push dword ptr [ebp+8]  +
mov ecx edi +
mov [esi] ebx +
call sub_10A52DB  +
cmp [esi] ebx +
jnz loc_10B60EC  +
mov eax [ebp+8] +
test byte ptr [eax+14h] 20h +
jz loc_10B60EC  +
cmp [edi+0C7h] bl +
jnz loc_10B60EC  +
push ebx  +
push 30001h  +
push 127h  +
push dword ptr [edi+20h]  +
call ds:SendMessageW  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ?GetDlgCtrlID@CWnd@@QBEHXZ  +
mov ecx [esi+9Ch] +
push eax  +
call sub_102134D  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_1053CC5  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_10B61BC  +
push dword ptr [esi+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_10B61BC  +
push ebx  +
push 0  +
mov ecx esi +
call sub_10B5E66  +
mov esi ds:GetSystemMetrics +
push 4004h  +
push 32h  +
mov ebx eax +
call esi  +
push eax  +
push 31h  +
call esi  +
push eax  +
push 1  +
push ebx  +
call ds:CopyImage  +
mov [edi+0C0h] eax +
test eax eax +
jz loc_10B61BB  +
cmp eax ebx +
jz loc_10B61BB  +
mov byte ptr [edi+0C4h] 1 +
pop ebx  +
mov byte ptr [edi+0C6h] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100C4D0  +
mov eax [ebp+8] +
mov esi [ebp+18h] +
mov edi [ebp+0Ch] +
mov ebx [ebp+1Ch] +
and dword ptr [ebp-30h] 0 +
mov [ebp-28h] eax +
mov eax [ebp+20h] +
mov [ebp-34h] ecx +
push 0  +
lea ecx [ebp-44h] +
mov [ebp-48h] esi +
mov [ebp-2Ch] eax +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmenubarScgetp  +
lea ecx [ebp-44h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp-2Ch]  +
mov ecx [ebp-34h] +
push ebx  +
push esi  +
push dword ptr [ebp+14h]  +
lea eax [ebp-20h] +
push dword ptr [ebp+10h]  +
push edi  +
push eax  +
call sub_10A53B3  +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B626B  +
mov ecx [ebp-28h] +
lea eax [ebp-44h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B63CD  +
push 4  +
pop ecx  +
mov edi offset dword_103A3B0 +
xor eax eax +
cmps   +
jnz loc_10B62F1  +
cmp [ebp+14h] eax +
jz loc_10B62B2  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B63C0  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B63C0  +
push dword ptr [ebp+14h]  +
push offset dword_106CE90  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10B63C0  +
push 3  +
pop eax  +
mov [ebx] ax +
mov eax [ebp-2Ch] +
mov dword ptr [ebx+8] 2 +
mov dword ptr [eax] 1 +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B63C0  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B63C0  +
push dword ptr [ebx+8]  +
push offset dword_106CE90  +
push 0Ch  +
jmp loc_10B63B5  +
mov esi [ebp-48h] +
push 4  +
pop ecx  +
mov edi offset dword_1012D58 +
xor eax eax +
cmps   +
jnz loc_10B63C0  +
mov eax [ebp-2Ch] +
cmp dword ptr [eax] 0 +
jz loc_10B633C  +
or dword ptr [ebx+8] 40000000h +
mov ebx [ebx+8] +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B63C0  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B63C0  +
push ebx  +
push offset dword_106CE90  +
push 0Dh  +
jmp loc_10B63B5  +
mov esi [ebp-34h] +
push 3  +
pop ecx  +
mov [ebx] cx +
mov dword ptr [ebx+8] 40100000h +
mov dword ptr [eax] 1 +
cmp byte ptr [esi+64h] 0 +
jz loc_10B636E  +
mov ecx esi +
call sub_10A5024  +
mov ecx [ebp+14h] +
dec ecx  +
cmp eax ecx +
jnz loc_10B636E  +
or dword ptr [ebx+8] 84h +
xor eax eax +
lea edi [ebp-24h] +
stos   +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp-24h] +
push eax  +
mov eax [ebp+14h] +
dec eax  +
push eax  +
mov ecx esi +
call sub_100940C  +
test eax eax +
jz loc_10B6399  +
test byte ptr [ebp-1Ch] 8 +
jz loc_10B6399  +
or dword ptr [ebx+8] 8000h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B63C0  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B63C0  +
push dword ptr [ebx+8]  +
push offset dword_106CE90  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov ecx [ebp-28h] +
lea eax [ebp-44h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-44h] +
mov dword ptr [ebp-30h] 1 +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-28h] +
call sub_100C50D  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+nCode] 0 +
mov ecx dword_10FD678 +
jge loc_10B644A  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+nCode]  +
push dword ptr [ecx+1Ch]  +
call ds:CallNextHookEx  +
pop ebp  +
retn 0Ch  +
pop ebp  +
jmp loc_10B5D9D  +
***
call ds:GetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
test eax eax +
jnz loc_10B646E  +
call sub_10067E8  +
test eax eax +
jz locret_10B647D  +
push 0  +
push 0  +
push 1Fh  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
call sub_10B6455  +
mov eax [ebp+arg_0] +
mov [esi+58h] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B5EA9  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B5EFF  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
sub ecx esi +
sar ecx 2 +
test ecx ecx +
jle loc_10B653B  +
mov eax [ebp+arg_C] +
push edi  +
mov edi [eax] +
mov eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
lea edx [esi+eax*4] +
cmp [edx] edi +
jle loc_10B6534  +
lea esi [edx+4] +
or edx 0FFFFFFFFh +
sub edx eax +
mov [ebp+arg_4] esi +
add ecx edx +
jmp loc_10B6536  +
mov ecx eax +
test ecx ecx +
jg loc_10B6517  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
sub ecx esi +
sar ecx 2 +
test ecx ecx +
jle loc_10B6589  +
mov eax [ebp+arg_C] +
push edi  +
mov edi [eax] +
mov eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
lea edx [esi+eax*4] +
cmp edi [edx] +
jg loc_10B6582  +
lea esi [edx+4] +
or edx 0FFFFFFFFh +
sub edx eax +
mov [ebp+arg_4] esi +
add ecx edx +
jmp loc_10B6584  +
mov ecx eax +
test ecx ecx +
jg loc_10B6565  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
sub ecx esi +
sar ecx 2 +
test ecx ecx +
jle loc_10B65D7  +
mov eax [ebp+arg_C] +
push edi  +
mov edi [eax] +
mov eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
lea edx [esi+eax*4] +
cmp [edx] edi +
jge loc_10B65D0  +
lea esi [edx+4] +
or edx 0FFFFFFFFh +
sub edx eax +
mov [ebp+arg_4] esi +
add ecx edx +
jmp loc_10B65D2  +
mov ecx eax +
test ecx ecx +
jg loc_10B65B3  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
sub ecx esi +
sar ecx 2 +
test ecx ecx +
jle loc_10B6625  +
mov eax [ebp+arg_C] +
push edi  +
mov edi [eax] +
mov eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
lea edx [esi+eax*4] +
cmp edi [edx] +
jl loc_10B661E  +
lea esi [edx+4] +
or edx 0FFFFFFFFh +
sub edx eax +
mov [ebp+arg_4] esi +
add ecx edx +
jmp loc_10B6620  +
mov ecx eax +
test ecx ecx +
jg loc_10B6601  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_10B6642  +
pop ebp  +
retn   +
sub eax [ebp+arg_4] +
sar eax 1 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push dword ptr [eax+0Ch]  +
mov esi ecx +
call sub_1015C07  +
push eax  +
mov ecx esi +
call sub_10B602E  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ecx+0BCh]  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_100A593  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
cmp [ebp+nCode] ebx +
jz loc_10B66BF  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+nCode]  +
push dword ptr [esi+18h]  +
call ds:CallNextHookEx  +
jmp loc_10B674C  +
push edi  +
mov edi [ebp+wParam] +
cmp edi 25h +
jz loc_10B66CD  +
cmp edi 27h +
jnz loc_10B670C  +
cmp [ebp+arg_C] bl +
jz loc_10B6748  +
mov ecx [esi+10h] +
call ?GetExStyle@CWnd@@QBEKXZ  +
test eax 400000h +
jz loc_10B66E9  +
cmp edi 27h +
setnz cl  +
jmp loc_10B66EF  +
cmp edi 27h +
setz cl  +
cmp [esi+54h] bl +
jz loc_10B66FD  +
cmp cl bl +
jz loc_10B66FD  +
inc dword ptr [esi+50h]  +
jmp loc_10B670C  +
mov eax [esi+50h] +
cmp eax ebx +
jle loc_10B671C  +
cmp cl bl +
jnz loc_10B671C  +
dec eax  +
mov [esi+50h] eax +
push [ebp+lParam]  +
push edi  +
push ebx  +
push dword ptr [esi+18h]  +
call ds:CallNextHookEx  +
jmp loc_10B674B  +
push [ebp+arg_8]  +
cmp cl bl +
push dword ptr [esi+38h]  +
mov ecx [esi+10h] +
mov [esi+50h] ebx +
jz loc_10B6733  +
call sub_10A5A75  +
jmp loc_10B6738  +
call sub_10A5A90  +
cmp eax [esi+38h] +
jz loc_10B6748  +
push eax  +
mov ecx esi +
mov [esi+38h] eax +
call sub_10B6485  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+8] +
jz loc_10B676D  +
sub eax [ecx+4] +
sar eax 2 +
dec eax  +
jmp loc_10B6770  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_10B679B  +
mov eax [ebp+arg_C] +
movzx eax word ptr [eax] +
cmp [ecx] ax +
jz loc_10B679B  +
inc ecx  +
inc ecx  +
mov [ebp+arg_4] ecx +
cmp ecx [ebp+arg_8] +
jnz loc_10B678C  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
jmp loc_10B67D3  +
mov ax [ecx] +
mov edx [ebp+arg_10] +
cmp ax [edx] +
jz loc_10B67CB  +
mov eax [ebp+arg_C] +
add [ebp+arg_C] 2 +
mov cx [ecx] +
mov [eax] cx +
mov ecx [ebp+arg_4] +
inc ecx  +
inc ecx  +
mov [ebp+arg_4] ecx +
cmp ecx [ebp+arg_8] +
jnz loc_10B67B3  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B64FC  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B654A  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B6598  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B65E6  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
cmp dword ptr [ebp+8] 2Ah +
push esi  +
mov esi ecx +
jnz loc_10B68DB  +
call sub_1037A2A  +
mov ecx esi +
call sub_103A234  +
push 31h  +
mov dword ptr [ebp-20h] 20h +
mov dword ptr [ebp-1Ch] 40h +
call ds:GetSystemMetrics  +
mov [ebp-0Eh] ax +
lea eax [ebp-20h] +
push eax  +
push 5404h  +
mov ecx esi +
call sub_1037A02  +
mov ecx esi +
mov byte ptr [esi+0C6h] 1 +
call sub_10159B1  +
mov ecx esi +
call sub_1018D6F  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+nCode] 0 +
mov ecx dword_10FD678 +
push [ebp+lParam]  +
jge loc_10B690A  +
push [ebp+wParam]  +
push [ebp+nCode]  +
push dword ptr [ecx+18h]  +
call ds:CallNextHookEx  +
jmp loc_10B692C  +
mov eax [ebp+lParam] +
and eax 80000000h +
neg eax  +
sbb al al +
inc al  +
movzx eax al +
push eax  +
movzx eax word ptr [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
push [ebp+nCode]  +
call sub_10B6698  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B67A9  +
mov eax [ebp+arg_0] +
pop edi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
sub edi ebx +
sar edi 2 +
test edi edi +
jle loc_10B69AA  +
mov eax [ebp+arg_C] +
mov ecx [eax] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [ebx+eax*4] +
mov edx [esi] +
cmp ecx edx +
jge loc_10B69A2  +
or edx 0FFFFFFFFh +
lea ebx [esi+4] +
sub edx eax +
mov [ebp+arg_4] ebx +
add edi edx +
jmp loc_10B69A6  +
jle loc_10B69B9  +
mov edi eax +
test edi edi +
jg loc_10B6983  +
mov eax [ebp+arg_0] +
mov [eax] ebx +
mov [eax+4] ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
push [ebp+arg_10]  +
lea eax [ebp+var_4] +
push [ebp+arg_C]  +
push esi  +
push ebx  +
push eax  +
call sub_10B67E9  +
push [ebp+arg_10]  +
lea eax [ebx+edi*4] +
push [ebp+arg_C]  +
add esi 4 +
push eax  +
mov [ebp+arg_4] eax +
push esi  +
lea eax [ebp+arg_C] +
push eax  +
call sub_10B6810  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov ecx [ebp+arg_C] +
mov [eax+4] ecx +
jmp loc_10B69B2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
sub edi ebx +
sar edi 2 +
test edi edi +
jle loc_10B6A3D  +
mov eax [ebp+arg_C] +
mov ecx [eax] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [ebx+eax*4] +
mov edx [esi] +
cmp ecx edx +
jle loc_10B6A35  +
or edx 0FFFFFFFFh +
lea ebx [esi+4] +
sub edx eax +
mov [ebp+arg_4] ebx +
add edi edx +
jmp loc_10B6A39  +
jge loc_10B6A4C  +
mov edi eax +
test edi edi +
jg loc_10B6A16  +
mov eax [ebp+arg_0] +
mov [eax] ebx +
mov [eax+4] ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
push [ebp+arg_C]  +
lea eax [ebp+var_4] +
push esi  +
push ebx  +
push eax  +
call sub_10B6837  +
push [ebp+arg_C]  +
lea eax [ebx+edi*4] +
push eax  +
add esi 4 +
mov [ebp+arg_4] eax +
push esi  +
lea eax [ebp+arg_C] +
push eax  +
call sub_10B685B  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov ecx [ebp+arg_C] +
mov [eax+4] ecx +
jmp loc_10B6A45  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_102B3C0  +
push dword ptr [eax]  +
push [ebp+arg_4]  +
call sub_10B6634  +
push [ebp+arg_4]  +
mov edi eax +
push [ebp+arg_8]  +
call sub_10B6634  +
add esp 10h +
push eax  +
push edi  +
mov ecx esi +
call sub_1011BBD  +
cmp dword ptr [esi+18h] 8 +
jb loc_10B6AC7  +
mov esi [esi+4] +
jmp loc_10B6ACA  +
add esi 4 +
mov eax [ebp+arg_0] +
lea ecx [esi+edi*2] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push ecx  +
push dword ptr [ebp+14h]  +
lea eax [ebp-4] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_10B6779  +
mov ecx [eax] +
mov [ebp+0Ch] ecx +
cmp ecx [ebp+10h] +
jnz loc_10B6B06  +
mov eax [ebp+8] +
mov [eax] ecx +
jmp locret_10B6B1C  +
push dword ptr [ebp+14h]  +
lea eax [ecx+2] +
push ecx  +
push dword ptr [ebp+10h]  +
push eax  +
push dword ptr [ebp+8]  +
call sub_10B6935  +
mov eax [ebp+8] +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B6966  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B69F9  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10B5D41  +
mov ecx esi +
pop esi  +
jmp sub_100A67D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+10h] +
push edi  +
call ?GetExStyle@CWnd@@QBEKXZ  +
mov edi [esi+4] +
test eax 400000h +
mov eax [esi+8] +
lea ecx [ebp+arg_0] +
jz loc_10B6BBC  +
push [ebp+arg_4]  +
push ecx  +
push eax  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
call sub_10B6B25  +
jmp loc_10B6BC8  +
push ecx  +
push eax  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
call sub_10B6B4C  +
mov ecx [eax] +
mov edx [eax+4] +
push ecx  +
mov ecx esi +
call sub_10B6757  +
push edx  +
mov ebx eax +
call sub_10B6757  +
xor ecx ecx +
mov [ebp+var_4] eax +
test ebx ebx +
jle loc_10B6BF9  +
mov eax [edi+ebx*4] +
cmp [edi] eax +
jz loc_10B6BF7  +
inc ecx  +
add edi 4 +
cmp ecx ebx +
jge loc_10B6BF9  +
jmp loc_10B6BE9  +
mov ebx ecx +
cmp ebx [ebp+var_4] +
jz loc_10B6C2C  +
or edi 0FFFFFFFFh +
cmp [ebp+var_4] edi +
jnz loc_10B6C25  +
mov eax [esi+4Ch] +
mov [ebp+var_4] eax +
jmp loc_10B6C25  +
mov ecx [esi+10h] +
push ebx  +
call sub_10B5F2E  +
mov ecx [esi+10h] +
push eax  +
call sub_1027B60  +
test eax eax +
jz loc_10B6C2C  +
inc ebx  +
cmp ebx [ebp+var_4] +
jg loc_10B6C2E  +
jmp loc_10B6C0E  +
mov edi ebx +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+3Ch] 0 +
jz loc_10B6CE3  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B6B87  +
test eax eax +
jnz loc_10B6CE3  +
push edi  +
call ds:GetTickCount  +
mov edi eax +
sub edi [esi+48h] +
call ds:GetDoubleClickTime  +
cmp edi eax +
ja loc_10B6CE2  +
mov eax [esi+40h] +
sub eax [ebp+arg_0] +
push ebx  +
jns loc_10B6C82  +
neg eax  +
mov edi ds:GetSystemMetrics +
push 24h  +
mov ebx eax +
call edi  +
cmp ebx eax +
jg loc_10B6CE1  +
mov eax [esi+44h] +
sub eax [ebp+arg_4] +
jns loc_10B6C9C  +
neg eax  +
push 25h  +
mov ebx eax +
call edi  +
cmp ebx eax +
jg loc_10B6CE1  +
mov ecx [esi+3Ch] +
xor ebx ebx +
push ebx  +
call sub_102132D  +
cmp eax ebx +
jz loc_10B6CE1  +
push ebx  +
mov edi 0F060h +
push edi  +
push dword ptr [eax+4]  +
call ds:GetMenuState  +
cmp eax 0FFFFFFFFh +
jz loc_10B6CE1  +
test al 3 +
jnz loc_10B6CE1  +
mov eax [esi+3Ch] +
push ebx  +
push edi  +
push 112h  +
push dword ptr [eax+20h]  +
call ds:PostMessageW  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
push esi  +
push eax  +
mov esi ecx +
push dword ptr [esi+8]  +
add eax 6 +
push eax  +
lea eax [ebp-4] +
push eax  +
call sub_101BDE3  +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
add esp 10h +
add dword ptr [esi+8] 0FFFFFFFAh +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lParam] +
push edi  +
push dword ptr [esi+4]  +
mov edi ecx +
push dword ptr [esi]  +
lea ecx [edi+20h] +
call sub_107E59D  +
test eax eax +
jz loc_10B6DB2  +
cmp [ebp+wParam] 201h +
jnz loc_10B6D6D  +
push 1  +
mov ecx edi +
call sub_10B6455  +
mov ecx [esi] +
mov esi [esi+4] +
push ecx  +
push ecx  +
mov eax esp +
mov [eax] ecx +
mov ecx edi +
mov [eax+4] esi +
call sub_10B6C3C  +
xor eax eax +
inc eax  +
jmp loc_10B6DC2  +
cmp [ebp+wParam] 200h +
jnz loc_10B6DB2  +
cmp [ebp+nCode] 0 +
jnz loc_10B6DB2  +
push dword ptr [esi+4]  +
lea ebx [edi+30h] +
push dword ptr [esi]  +
mov ecx ebx +
call sub_10B5C9A  +
test eax eax +
jz loc_10B6DB2  +
mov ecx [esi+4] +
mov eax [esi] +
push ecx  +
mov [ebx+4] ecx +
push eax  +
mov ecx edi +
mov [ebx] eax +
call sub_10B6B87  +
cmp eax [edi+38h] +
jz loc_10B6DB2  +
push eax  +
mov ecx edi +
mov [edi+38h] eax +
call sub_10B6485  +
push esi  +
push [ebp+wParam]  +
push [ebp+nCode]  +
push dword ptr [edi+14h]  +
call ds:CallNextHookEx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+nCode] 0 +
mov ecx dword_10FD678 +
jge loc_10B6DF5  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+nCode]  +
push dword ptr [ecx+14h]  +
call ds:CallNextHookEx  +
pop ebp  +
retn 0Ch  +
pop ebp  +
jmp loc_10B6D23  +
***
push 44h  +
mov eax offset dword_10D7F78 +
call sub_1001F95  +
push offset aVectorTTooLong  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1076041  +
push offset dword_10E8AC0  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
int 3  +
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+55h] 0 +
jnz loc_10B6EAD  +
cmp dword_10FD678 0 +
jnz loc_10B6EAD  +
push ebx  +
push edi  +
mov dword_10FD678 esi +
call ds:GetCurrentThreadId  +
mov edi ds:SetWindowsHookExW +
mov ebx eax +
push ebx  +
push 0  +
push offset sub_10B6DCE  +
push 7  +
call edi  +
push ebx  +
push 0  +
push offset sub_10B68E5  +
push 2  +
mov [esi+14h] eax +
call edi  +
push ebx  +
push 0  +
push offset sub_10B6423  +
push 4  +
mov [esi+18h] eax +
call edi  +
pop edi  +
mov [esi+1Ch] eax +
mov byte ptr [esi+55h] 1 +
pop ebx  +
pop esi  +
retn   +
***
call sub_100C4D0  +
mov esi ecx +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-58h] +
call MFC42u_6466  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1015C07  +
mov ebx eax +
xor eax eax +
lea edi [ebp-40h] +
stos   +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp-40h] +
push eax  +
push ebx  +
mov ecx esi +
call sub_100940C  +
test eax eax +
jnz loc_10B6F0D  +
mov eax [ebp-54h] +
mov ecx [ebp-58h] +
mov [eax+4] ecx +
xor eax eax +
call sub_100C50D  +
retn 4  +
push ebx  +
mov ecx esi +
call sub_1018D4E  +
mov [ebp-64h] eax +
test eax eax +
jnz loc_10B6F27  +
mov ecx [ebp-54h] +
mov edx [ebp-58h] +
mov [ecx+4] edx +
jmp loc_10B6F05  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-60h] +
push eax  +
lea ecx [esi+0C8h] +
call sub_10194ED  +
mov ecx [ebp-30h] +
mov eax [esi+88h] +
lea eax [eax+ecx*4] +
push eax  +
lea ecx [ebp-50h] +
call ??0CString@@QAE@ABV0@@Z  +
mov eax [esi+0D8h] +
mov ecx [esi+0DCh] +
mov byte ptr [ebp-4] 1 +
jmp loc_10B6F6E  +
mov dx [eax+4] +
cmp dx [ebp+8] +
jz loc_10B6F74  +
add eax 6 +
cmp eax ecx +
jz loc_10B6F84  +
jmp loc_10B6F61  +
push eax  +
lea eax [ebp-44h] +
push eax  +
lea ecx [esi+0D4h] +
call near ptr byte_10B6CEC+1  +
mov eax [esi+0E8h] +
mov ecx [esi+0ECh] +
jmp loc_10B6F9F  +
mov dx [eax+4] +
cmp dx [ebp+8] +
jz loc_10B6FA5  +
add eax 6 +
cmp eax ecx +
jz loc_10B6FB5  +
jmp loc_10B6F92  +
push eax  +
lea eax [ebp-44h] +
push eax  +
lea ecx [esi+0E4h] +
call near ptr byte_10B6CEC+1  +
push 0  +
push dword ptr [ebp-50h]  +
call sub_100FD12  +
movzx edi ax +
test di di +
jz loc_10B70AC  +
add esi 0BCh +
push dword ptr [esi]  +
lea ecx [ebp-2Ch] +
call sub_101D1AD  +
movzx edi di +
push edi  +
mov byte ptr [ebp-4] 2 +
call ds:CharUpperW  +
movzx eax ax +
mov [ebp-4Ch] eax +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1041B65  +
mov ebx eax +
lea eax [ebp-5Ch] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_102B3C0  +
lea ecx [ebp-4Ch] +
push ecx  +
push dword ptr [ebx]  +
push dword ptr [eax]  +
lea eax [ebp-44h] +
push eax  +
call near ptr byte_10B6ADC+1  +
lea eax [ebp-5Ch] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1041B65  +
push dword ptr [eax]  +
lea eax [ebp-48h] +
push dword ptr [ebp-44h]  +
lea ecx [ebp-2Ch] +
push eax  +
call sub_10B6A86  +
push edi  +
call ds:CharLowerW  +
movzx eax ax +
mov [ebp-44h] eax +
lea eax [ebp-5Ch] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1041B65  +
mov edi eax +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_102B3C0  +
lea ecx [ebp-44h] +
push ecx  +
push dword ptr [edi]  +
push dword ptr [eax]  +
lea eax [ebp-4Ch] +
push eax  +
call near ptr byte_10B6ADC+1  +
mov edi [eax] +
lea eax [ebp-5Ch] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1041B65  +
push dword ptr [eax]  +
lea eax [ebp-48h] +
push edi  +
push eax  +
lea ecx [ebp-2Ch] +
call sub_10B6A86  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_10B7098  +
lea eax [ebp-28h] +
push eax  +
mov ecx esi +
call ??4CString@@QAEABV0@PBG@Z  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100CD3C  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
mov eax [ebp-64h] +
jmp loc_10B6F1C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_102183C  +
mov edi [ebp+arg_0] +
mov ecx esi +
cmp eax edi +
jnb loc_10B70F7  +
push ebx  +
mov ebx [esi+8] +
lea eax [ebp+arg_4] +
push eax  +
call sub_102183C  +
sub edi eax +
push edi  +
push ebx  +
mov ecx esi +
call sub_1038651  +
pop ebx  +
jmp loc_10B7116  +
call sub_102183C  +
cmp edi eax +
jnb loc_10B7116  +
mov eax [esi+8] +
mov ecx [esi+4] +
push eax  +
lea ecx [ecx+edi*4] +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_10294E6  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
sub ecx 54h +
jmp loc_1053CDE  +
***
call sub_1001F95  +
mov ebx ecx +
mov [ebp-10h] ebx +
push 0  +
call sub_103F490  +
mov edi [ebp+8] +
mov esi ds:GetMessagePos +
and dword ptr [ebp-4] 0 +
mov [ebx+10h] edi +
call esi  +
movsx ecx ax +
shr eax 10h +
cwde   +
mov [ebx+30h] ecx +
mov [ebx+34h] eax +
call esi  +
movsx ecx ax +
shr eax 10h +
cwde   +
mov [ebx+40h] ecx +
mov [ebx+44h] eax +
call ds:GetMessageTime  +
mov ecx edi +
mov [ebx+48h] eax +
call sub_1015912  +
or dword ptr [ebx+58h] 0FFFFFFFFh +
mov ecx [ebp+0Ch] +
xor esi esi +
mov [ebx+4Ch] eax +
push esi  +
inc eax  +
mov [ebx+38h] ecx +
push eax  +
mov ecx ebx +
mov byte ptr [ebx+55h] 0 +
mov byte ptr [ebx+54h] 0 +
mov [ebx+50h] esi +
call sub_10B70C5  +
xor eax eax +
xor ecx ecx +
cmp [ebx+4Ch] eax +
mov [ebp-28h] eax +
mov [ebp-24h] ecx +
mov [ebp-20h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] eax +
mov [ebp-14h] ecx +
mov [ebp+0Ch] esi +
jle loc_10B7236  +
lea eax [ebp-28h] +
push eax  +
push esi  +
mov ecx edi +
call sub_1015A29  +
test eax eax +
jnz loc_10B71E6  +
push esi  +
mov ecx edi +
call sub_10B5F2E  +
push eax  +
mov ecx edi +
call sub_1027B60  +
mov eax [ebp-28h] +
mov [ebp-18h] eax +
mov eax [ebp-24h] +
mov [ebp-14h] eax +
lea eax [ebp-18h] +
push eax  +
push dword ptr [edi+20h]  +
call ds:ClientToScreen  +
mov eax [ebx+4] +
mov ecx [ebp-18h] +
mov [eax+esi*4] ecx +
test esi esi +
jnz loc_10B721E  +
lea esi [ebp-28h] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+0Ch] +
mov edi [ebp+8] +
jmp loc_10B722D  +
lea eax [ebp-28h] +
push eax  +
lea eax [ebx+20h] +
push eax  +
push eax  +
call ds:UnionRect  +
inc esi  +
cmp esi [ebx+4Ch] +
mov [ebp+0Ch] esi +
jl loc_10B71C6  +
mov eax [ebp-20h] +
mov [ebp-18h] eax +
mov eax [ebp-1Ch] +
mov [ebp-14h] eax +
lea eax [ebp-18h] +
push eax  +
push dword ptr [edi+20h]  +
call ds:ClientToScreen  +
mov ecx [ebx+4] +
mov eax [ebx+4Ch] +
mov edx [ebp-18h] +
mov [ecx+eax*4] edx +
lea esi [ebx+20h] +
push esi  +
mov ecx edi +
call sub_10B5E20  +
inc dword ptr [esi]  +
mov eax [ebx+10h] +
dec dword ptr [ebx+28h]  +
and dword ptr [ebx+3Ch] 0 +
cmp byte ptr [eax+0C5h] 0 +
jz loc_10B72A2  +
mov ecx [eax+94h] +
push 0  +
call ?MDIGetActive@CMDIFrameWnd@@QBEPAVCMDIChildWnd@@PAH@Z  +
mov esi eax +
test esi esi +
jz loc_10B72A2  +
push dword ptr [ebx+44h]  +
mov ecx ebx +
push dword ptr [ebx+40h]  +
call sub_10B6B87  +
test eax eax +
jnz loc_10B72A2  +
mov [ebx+3Ch] esi +
mov eax ebx +
call sub_1001FCF  +
retn 8  +
***
call sub_100C4D0  +
mov ebx ecx +
xor esi esi +
push esi  +
lea ecx [ebp-44h] +
mov [ebp-2Ch] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmenubarPopupm  +
lea ecx [ebp-44h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+8]  +
lea ecx [ebp-13Ch] +
push ebx  +
call sub_10B712E  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_100A1DE  +
call sub_100ABA9  +
cmp eax esi +
jz loc_10B731C  +
mov eax [eax+154h] +
cmp eax esi +
jz loc_10B731C  +
cmp [eax+4] esi +
jnz loc_10B731C  +
push esi  +
mov ecx eax +
call sub_10C2422  +
mov ecx ebx +
call sub_10A4EA4  +
mov byte ptr [ebx+0C7h] 1 +
lea eax [ebp-54h] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx ebx +
call sub_1015A29  +
push 2  +
lea eax [ebp-54h] +
push eax  +
xor esi esi +
push esi  +
push dword ptr [ebx+20h]  +
call ds:MapWindowPoints  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx ebx +
call sub_100940C  +
lea eax [ebp-24h] +
push eax  +
call sub_10A4EE0  +
test al al +
jnz loc_10B7702  +
cmp dword ptr [ebp-20h] 5404h +
mov eax [ebp-18h] +
mov [ebp-28h] eax +
jnz loc_10B73A3  +
mov ecx [ebx+94h] +
push esi  +
call ?MDIGetActive@CMDIFrameWnd@@QBEPAVCMDIChildWnd@@PAH@Z  +
cmp eax esi +
jz loc_10B7702  +
push esi  +
mov ecx eax +
call sub_102132D  +
cmp eax esi +
jnz loc_10B739D  +
mov [ebp-28h] esi +
jmp loc_10B73A3  +
mov eax [eax+4] +
mov [ebp-28h] eax +
mov dword ptr [ebp-68h] 14h +
lea esi [ebp-54h] +
lea edi [ebp-64h] +
movs   +
movs   +
movs   +
push 0FFFFFFFFh  +
mov ecx ebx +
movs   +
call sub_10A503C  +
push 1  +
push dword ptr [ebp-20h]  +
mov ecx ebx +
call sub_10A4FD1  +
mov ecx ebx +
call ?GetExStyle@CWnd@@QBEKXZ  +
mov ecx [ebp-4Ch] +
mov ebx eax +
mov eax [ebp-48h] +
shr ebx 16h +
and bl 1 +
mov [ebp-30h] eax +
jnz loc_10B73E6  +
mov ecx [ebp-54h] +
push 2  +
push eax  +
push ecx  +
mov [ebp-34h] ecx +
xor esi esi +
call ds:MonitorFromPoint  +
mov edx eax +
test edx edx +
jz loc_10B7434  +
push 9  +
pop ecx  +
xor eax eax +
mov dword ptr [ebp-0D0h] 28h +
lea edi [ebp-0CCh] +
stos   +
lea eax [ebp-0D0h] +
push eax  +
push edx  +
call ds:GetMonitorInfoW  +
test eax eax +
jz loc_10B7434  +
mov esi [ebp-0B4h] +
test bl bl +
jnz loc_10B743F  +
mov esi [ebp-0BCh] +
test bl bl +
jnz loc_10B743F  +
cmp [ebp-34h] esi +
jge loc_10B7447  +
jmp loc_10B7444  +
cmp [ebp-34h] esi +
jle loc_10B7447  +
mov [ebp-34h] esi +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_10B7468  +
call sub_100ABA9  +
test eax eax +
jz loc_10B7468  +
push 1  +
push 28h  +
push 100h  +
push dword ptr [eax+20h]  +
call ds:PostMessageW  +
or dword ptr [ebp-0E4h] 0FFFFFFFFh +
lea ecx [ebp-13Ch] +
call sub_10B6E50  +
mov edi [ebp-2Ch] +
mov ecx [edi+94h] +
xor eax eax +
push eax  +
push offset off_10F6DC0  +
push offset off_10F7228  +
push eax  +
push eax  +
call ?MDIGetActive@CMDIFrameWnd@@QBEPAVCMDIChildWnd@@PAH@Z  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
cmp dword ptr [ebp-28h] 0 +
mov esi eax +
jnz loc_10B7632  +
push 8000FFFFh  +
push esi  +
lea eax [ebp-88h] +
push eax  +
call sub_100A3AE  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 2 +
call ebx  +
lea ecx [ebp-88h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B76F6  +
mov edi [esi+228h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-78h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 3 +
call ebx  +
lea ecx [ebp-78h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B76F6  +
mov eax [ebp-20h] +
sub eax 5405h +
jz loc_10B75FF  +
dec eax  +
jz loc_10B75E0  +
dec eax  +
jz loc_10B75C1  +
mov edi [esi+238h] +
push 8000FFFFh  +
push edi  +
lea eax [ebp-98h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 4 +
call ebx  +
lea ecx [ebp-98h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B761C  +
lea eax [ebp-34h] +
push eax  +
push dword ptr [ebp-20h]  +
lea eax [ebp-0E0h] +
push eax  +
mov ecx edi +
call sub_10B7E97  +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 5 +
call ebx  +
lea ecx [ebp-0E0h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
jmp loc_10B761C  +
mov ecx [ebp-34h] +
mov edx [ebp-30h] +
lea eax [ebp-54h] +
push eax  +
push ecx  +
push ecx  +
mov eax esp +
mov [eax] ecx +
mov ecx edi +
mov [ebp-28h] esp +
mov [eax+4] edx +
call sub_10AB7C0  +
jmp loc_10B761C  +
mov ecx [ebp-34h] +
mov edx [ebp-30h] +
lea eax [ebp-54h] +
push eax  +
push ecx  +
push ecx  +
mov eax esp +
mov [eax] ecx +
mov ecx edi +
mov [ebp-28h] esp +
mov [eax+4] edx +
call sub_108A1E8  +
jmp loc_10B761C  +
mov ecx [ebp-34h] +
mov edx [ebp-30h] +
lea eax [ebp-54h] +
push eax  +
push ecx  +
push ecx  +
mov eax esp +
mov [eax] ecx +
mov ecx edi +
mov [ebp-28h] esp +
mov [eax+4] edx +
call sub_1089F55  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B76F6  +
mov edi [ebp-2Ch] +
jmp loc_10B765A  +
call sub_10067E8  +
test eax eax +
jz loc_10B763E  +
mov eax [eax+20h] +
lea ecx [ebp-68h] +
push ecx  +
push eax  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-34h]  +
push 40h  +
push dword ptr [ebp-28h]  +
call ds:TrackPopupMenuEx  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
test esi esi +
jz loc_10B76AF  +
push dword ptr [esi+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_10B76AF  +
mov ecx [edi+94h] +
test ecx ecx +
jz loc_10B76AF  +
push esi  +
call sub_1097FB6  +
test eax eax +
jz loc_10B76AF  +
lea ecx [esi+0C8h] +
mov eax [ecx] +
push offset word_100A5FC  +
lea edx [ebp-0A8h] +
push edx  +
call dword ptr [eax]  +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 6 +
call ebx  +
lea ecx [ebp-0A8h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-44h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B76C5  +
lea ecx [ebp-44h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
push 0  +
push dword ptr [ebp-20h]  +
mov ecx edi +
call sub_10A4FD1  +
push 0FFFFFFFFh  +
mov ecx edi +
call sub_10A503C  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-13Ch] +
call sub_10B5D7D  +
mov ebx [ebp-2Ch] +
test al al +
jnz loc_10B732A  +
jmp loc_10B7702  +
lea ecx [ebp-44h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
mov ebx [ebp-2Ch] +
push 0  +
push 30001h  +
push 127h  +
push dword ptr [ebx+20h]  +
mov byte ptr [ebx+0C7h] 0 +
call ds:SendMessageW  +
mov ecx ebx +
call sub_10A4EC2  +
lea ecx [ebp-13Ch] +
call sub_10B6B70  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-44h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_100C50D  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push dword ptr [ebp+8]  +
mov esi ecx +
call sub_1015C07  +
push eax  +
mov ecx esi +
call sub_10B72B1  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
xor ebx ebx +
mov [ebp-4] ebx +
cmp [esi+0D0h] ebx +
jnz loc_10B77D6  +
or eax 0FFFFFFFFh +
mov ecx [ebp-18h] +
mov edx [ebp-1Ch] +
mov [ecx+4] edx +
call sub_1001FCF  +
retn 0Ch  +
mov eax [esi+0CCh] +
mov eax [eax] +
mov edi [eax+0Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea ecx [esi+0C8h] +
call sub_10191ED  +
push dword ptr [ebp+8]  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@PBG@Z  +
mov eax [ebp+10h] +
mov byte ptr [ebp-4] 1 +
cmp eax 0FFFFFFFFh +
jnz loc_10B7814  +
push 5408h  +
mov ecx esi +
call sub_1015C07  +
cmp [ebp+0Ch] ebx +
push 10h  +
setz cl  +
dec cl  +
and cl 8 +
movzx ecx cl +
push ecx  +
push ebx  +
push edi  +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
mov ecx esi +
call sub_101016B  +
cmp eax ebx +
jz loc_10B7857  +
mov ecx esi +
call sub_10159B1  +
mov ecx esi +
call sub_1018D6F  +
lea ecx [ebp-10h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
mov eax edi +
jmp loc_10B77C5  +
lea ecx [ebp-10h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
jmp loc_10B77C2  +
***
push 8  +
mov eax offset dword_10DEC9C +
call sub_1001F95  +
mov esi ecx +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-14h] +
call MFC42u_6466  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1015C07  +
push dword ptr [ebp+8]  +
mov ecx esi +
mov edi eax +
call sub_1027B60  +
push dword ptr [ebp+8]  +
test eax eax +
mov ecx esi +
setnz bl  +
call sub_10B6EB4  +
test eax eax +
jz loc_10B78D5  +
movzx eax bl +
push edi  +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_10B7799  +
mov ecx [ebp-10h] +
mov edx [ebp-14h] +
mov [ecx+4] edx +
call sub_1001FCF  +
retn 8  +
***
or eax 0FFFFFFFFh +
jmp loc_10B78C4  +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_10A5024  +
push eax  +
mov ecx esi +
call sub_10B72B1  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
call sub_10B72B1  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_10B791E  +
xor eax eax +
retn   +
mov eax [ecx+0Ch] +
sub eax edx +
push 48h  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_10B7939  +
xor eax eax +
retn   +
mov eax [ecx+8] +
sub eax edx +
push 48h  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
push 409h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
test ecx ecx +
ja loc_10B798A  +
xor ecx ecx +
imul ecx ecx +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
leave   +
retn 8  +
or eax 0FFFFFFFFh +
xor edx edx +
div  ecx +
cmp eax 48h +
jnb loc_10B797C  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1070764  +
push offset dword_10E81EC  +
lea eax [ebp+var_C] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
push 14h  +
mov eax offset dword_10DE0F4 +
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp+var_20] +
mov [ebp+var_10] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmenubuttonsmg  +
lea ecx [ebp+var_20] +
mov [ebp+var_4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+4] +
cmp eax edi +
jz loc_10B7A52  +
cmp byte ptr [eax+234h] 0 +
jz loc_10B7A52  +
cmp [esi+28h] edi +
jz loc_10B7A52  +
mov eax [esi+10h] +
cmp eax [esi+14h] +
jz loc_10B7A33  +
lea edi [eax+40h] +
cmp [ebp+arg_4] 0 +
jz loc_10B7A15  +
movzx eax byte ptr [edi+4] +
not al  +
and eax ebx +
jmp loc_10B7A17  +
mov eax ebx +
mov ecx [esi+28h] +
push eax  +
push dword ptr [edi]  +
call sub_1015ADE  +
test eax eax +
jz loc_10B7A38  +
mov eax [esi+14h] +
add edi 48h +
lea ecx [edi-40h] +
cmp ecx eax +
jnz loc_10B7A05  +
lea eax [ebp+var_20] +
jmp loc_10B7A46  +
push 80004005h  +
lea ecx [ebp+var_20] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+arg_0] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B7A6A  +
push 8000FFFFh  +
lea ecx [ebp+var_20] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+arg_0] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp+var_20] +
mov [ebp+var_10] ebx +
mov byte ptr [ebp+var_4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+arg_0] +
call sub_1001FCF  +
retn 8  +
***
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B7B90  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov edx [ecx+10h] +
mov ecx [ecx+14h] +
jmp loc_10B7C28  +
mov eax [edx] +
cmp eax [ebp+0Ch] +
jnz loc_10B7C25  +
mov eax [edx+3Ch] +
cmp eax [ebp+10h] +
jz loc_10B7C35  +
add edx 48h +
cmp edx ecx +
jnz loc_10B7C16  +
mov eax [ebp+8] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov eax [ebp+8] +
mov [eax] edx +
jmp loc_10B7C31  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+10h] +
mov ecx [ecx+14h] +
jmp loc_10B7C59  +
mov eax [edx+40h] +
cmp eax [ebp+arg_4] +
jz loc_10B7C66  +
add edx 48h +
cmp edx ecx +
jnz loc_10B7C4E  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 8  +
mov eax [ebp+arg_0] +
mov [eax] edx +
jmp loc_10B7C62  +
***
push 1Ch  +
mov eax offset dword_10E3AF0 +
call sub_1001F95  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push edi  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmenubuttons_4  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+0Ch] edi +
jnz loc_10B7CD7  +
push 80070057h  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B7E0E  +
mov eax [esi+4] +
cmp eax edi +
jnz loc_10B7CF1  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10B7E04  +
cmp byte ptr [eax+234h] 0 +
jnz loc_10B7D3C  +
mov eax [ebp+14h] +
dec eax  +
jz loc_10B7D2B  +
sub eax 3 +
lea ecx [ebp-28h] +
jz loc_10B7D15  +
push 80004005h  +
sub eax 0Ch +
jmp loc_10B7DFB  +
mov eax [ebp+18h] +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
jmp loc_10B7DFA  +
mov eax [ebp+18h] +
neg eax  +
sbb eax eax +
and eax 80004005h +
jmp loc_10B7DF7  +
push dword ptr [ebp+10h]  +
lea eax [ebp+0Ch] +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push eax  +
call near ptr byte_10B7C08+1  +
mov eax [eax] +
cmp eax [esi+14h] +
jnz loc_10B7D5B  +
push 80070057h  +
jmp loc_10B7CE3  +
***
cmp dword ptr [ebp+14h] 4 +
jnz loc_10B7DA5  +
cmp [ebp+18h] edi +
mov dl [eax+44h] +
setz cl  +
xor dl cl +
and dl bl +
xor [eax+44h] dl +
test cl cl +
jz loc_10B7DA5  +
mov ecx [esi+4] +
mov ecx [ecx+228h] +
test ecx ecx +
jz loc_10B7CDE  +
lea edi [ecx+1F8h] +
test edi edi +
jz loc_10B7CDE  +
mov ecx [edi+64h] +
shr ecx 2 +
test cl bl +
jnz loc_10B7DA5  +
push 0  +
jmp loc_10B7CE3  +
***
mov ecx [esi+28h] +
test ecx ecx +
jz loc_10B7CDE  +
mov edx [ebp+14h] +
dec edx  +
jz loc_10B7DDE  +
sub edx 3 +
jz loc_10B7DD1  +
sub edx 0Ch +
jz loc_10B7DC4  +
xor eax eax +
jmp loc_10B7DE9  +
push dword ptr [ebp+18h]  +
push dword ptr [eax+40h]  +
call sub_10A4FD1  +
jmp loc_10B7DE9  +
push dword ptr [ebp+18h]  +
push dword ptr [eax+40h]  +
call sub_1015ADE  +
jmp loc_10B7DE9  +
push dword ptr [ebp+18h]  +
push dword ptr [eax+40h]  +
call sub_1028F81  +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
lea ecx [ebp-28h] +
push eax  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea eax [ebp-28h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-38h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmenubuttons_0  +
lea ecx [ebp-38h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx edi +
call sub_10B7C41  +
mov esi [eax] +
cmp esi [edi+14h] +
jnz loc_10B7EFA  +
push 80004005h  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B7FBF  +
mov eax [edi+4] +
mov eax [eax+228h] +
test eax eax +
jnz loc_10B7F1A  +
push 80004005h  +
lea ecx [ebp-38h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10B7FB5  +
lea edx [ebp-18h] +
push edx  +
lea edx [ebp-14h] +
push edx  +
lea edx [ebp-1Ch] +
push edx  +
lea ecx [eax+44h] +
mov eax [ecx] +
lea edx [ebp-48h] +
push edx  +
call dword ptr [eax+2Ch]  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B7FB2  +
mov eax [esi+3Ch] +
mov [ebp-28h] eax +
mov eax [ebp+10h] +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-24h] ecx +
mov [ebp-20h] eax +
mov esi [esi] +
test esi esi +
jnz loc_10B7F7C  +
push 8000FFFFh  +
jmp loc_10B7F0C  +
mov eax [esi] +
lea ecx [ebp-28h] +
push ecx  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-48h] +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
push ecx  +
mov ecx esi +
call dword ptr [eax]  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-48h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-38h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea eax [ebp-38h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+1Ch] +
call sub_1023388  +
mov eax [esi+20h] +
cmp eax [ebp+var_4] +
pop esi  +
setnz al  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
push 1  +
lea ecx [esi+20h] +
call sub_100CD3C  +
push 0  +
push 1  +
lea ecx [esi+4] +
call sub_100CD3C  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10B805F  +
test [ebp+arg_0] 1 +
jz loc_10B809D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_10B8083  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
lea eax [ebp-0Dh] +
lea ebx [esi+4] +
push eax  +
mov ecx ebx +
call sub_1041B11  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-0Dh] +
lea ecx [esi+20h] +
push eax  +
call sub_1041B11  +
and dword ptr [esi] 0 +
mov edi offset word_100A5FC +
push edi  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_102B350  +
push edi  +
lea ecx [esi+20h] +
call sub_102B350  +
or byte ptr [esi+44h] 1 +
or dword ptr [esi+40h] 0FFFFFFFFh +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
jmp loc_10B826C  +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea eax [ebp-20h] +
jmp loc_10B81AC  +
***
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B8269  +
push 80070057h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] esi +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
mov eax [edi] +
mov [esi] eax +
lea eax [edi+4] +
push eax  +
lea ecx [esi+4] +
call sub_100CF0B  +
and dword ptr [ebp-4] 0 +
lea eax [edi+20h] +
push eax  +
lea ecx [esi+20h] +
call sub_100CF0B  +
mov eax [edi+3Ch] +
mov [esi+3Ch] eax +
mov eax [edi+40h] +
mov [esi+40h] eax +
mov al [edi+44h] +
xor al [esi+44h] +
and al 1 +
xor [esi+44h] al +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10B835C  +
push dword ptr [ebp+0Ch]  +
call sub_10B82DD  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
mov esi ecx +
mov [esi] eax +
lea eax [edi+4] +
push eax  +
lea ecx [esi+4] +
call sub_1041CE8  +
lea eax [edi+20h] +
push eax  +
lea ecx [esi+20h] +
call sub_1041CE8  +
mov eax [edi+3Ch] +
mov [esi+3Ch] eax +
mov eax [edi+40h] +
mov [esi+40h] eax +
mov al [edi+44h] +
xor al [esi+44h] +
pop edi  +
and al 1 +
xor [esi+44h] al +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
jmp loc_10B83CD  +
push esi  +
call sub_10B8369  +
add [ebp+arg_C] 48h +
add esi 48h +
mov ecx [ebp+arg_C] +
cmp esi [ebp+arg_8] +
jnz loc_10B83C0  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10B83F6  +
push esi  +
call sub_10B80A9  +
add esi 48h +
cmp esi [ebp+arg_4] +
jnz loc_10B83ED  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] esi +
jz loc_10B8428  +
sub [ebp+arg_8] 48h +
mov ecx [ebp+arg_8] +
sub esi 48h +
push esi  +
call sub_10B8369  +
cmp esi [ebp+arg_0] +
jnz loc_10B8413  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
call sub_100A60E  +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov esi [ebp+8] +
mov [ebp-14h] eax +
cmp esi [ebp+0Ch] +
jz loc_10B847F  +
push esi  +
push dword ptr [ebp+10h]  +
call sub_10B8337  +
add dword ptr [ebp+10h] 48h +
add esi 48h +
jmp loc_10B844C  +
mov esi [ebp-14h] +
jmp loc_10B8471  +
push esi  +
call sub_10B80A9  +
add esi 48h +
cmp esi [ebp+10h] +
jnz loc_10B8468  +
push 0  +
push 0  +
call _CxxThrowException  +
mov eax [ebp+10h] +
call sub_1001FCF  +
retn 18h  +
***
push 24h  +
mov eax offset byte_10DFDFD +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmenubuttons_6  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-14h] +
lea edi [esi+1Ch] +
push eax  +
mov ecx edi +
call sub_1023388  +
mov eax [esi+20h] +
cmp eax [ebp-14h] +
jz loc_10B84F0  +
push ebx  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B8552  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_1024C9C  +
cmp byte ptr [ebp-14h] 0 +
jnz loc_10B8515  +
push 80004005h  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10B8548  +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
call sub_1028140  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
lea eax [ebp-30h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B83B5  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B83E2  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10B862E  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_10B8369  +
add esi 48h +
cmp esi [ebp+arg_4] +
jnz loc_10B8621  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B8405  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
call sub_100A60E  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_10B86B3  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_10B8337  +
dec dword ptr [ebp+0Ch]  +
add dword ptr [ebp+8] 48h +
jmp loc_10B867D  +
mov esi [ebp-14h] +
jmp loc_10B86A5  +
push esi  +
call sub_10B80A9  +
add esi 48h +
cmp esi [ebp+8] +
jnz loc_10B869C  +
push 0  +
push 0  +
call _CxxThrowException  +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B8433  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B8667  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
push esi  +
push eax  +
mov esi ecx +
push dword ptr [esi+8]  +
add eax 48h +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_10B85C5  +
mov eax [esi+8] +
add esp 10h +
push esi  +
push eax  +
add eax 0FFFFFFB8h +
push eax  +
call sub_10B85F7  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
add dword ptr [esi+8] 0FFFFFFB8h +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B86EE  +
mov eax [ebp+arg_4] +
imul eax eax +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
call sub_101D46C  +
mov eax [ebp+10h] +
mov esi ecx +
push eax  +
lea ecx [ebp-5Ch] +
mov [ebp-68h] esi +
call sub_10B82DD  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_10B7914  +
mov edi [ebp+0Ch] +
mov ebx eax +
test edi edi +
jz loc_10B894E  +
mov ecx esi +
call sub_10B792F  +
mov ecx 38E38E3h +
mov edx ecx +
sub edx eax +
cmp edx edi +
jnb loc_10B87D4  +
call loc_10B6E00  +
add eax edi +
cmp ebx eax +
jnb loc_10B8895  +
mov edx ebx +
shr edx 1 +
sub ecx edx +
cmp ecx ebx +
jnb loc_10B87EC  +
xor ebx ebx +
jmp loc_10B87EE  +
add ebx edx +
cmp ebx eax +
jnb loc_10B87F4  +
mov ebx eax +
push 0  +
push ebx  +
call sub_10B796B  +
mov ecx [esi+4] +
push esi  +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-60h] eax +
push ecx  +
mov [ebp-64h] eax +
mov byte ptr [ebp-4] 1 +
call sub_10B86C0  +
lea ecx [ebp-5Ch] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
mov [ebp-64h] eax +
call sub_10B8760  +
push esi  +
mov [ebp-64h] eax +
push dword ptr [ebp-64h]  +
mov eax [esi+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_10B86C0  +
mov ecx esi +
call sub_10B792F  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_10B885A  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10B85F7  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp-60h] +
imul ebx ebx +
imul edi edi +
add ebx eax +
add edi eax +
mov [esi+0Ch] ebx +
mov [esi+8] edi +
mov [esi+4] eax +
jmp loc_10B894E  +
push dword ptr [ebp-68h]  +
push dword ptr [ebp-64h]  +
push dword ptr [ebp-60h]  +
call sub_10B85F7  +
push dword ptr [ebp-60h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
mov ecx [esi+8] +
mov eax ecx +
sub eax [ebp+8] +
push 48h  +
cdq   +
pop ebx  +
idiv  ebx +
mov [ebp-60h] ecx +
push esi  +
cmp eax edi +
jnb loc_10B891D  +
mov eax [ebp+8] +
mov ebx edi +
imul ebx ebx +
lea edx [ebx+eax] +
push edx  +
push ecx  +
push eax  +
call sub_10B86C0  +
mov eax [esi+8] +
sub eax [ebp+8] +
lea ecx [ebp-5Ch] +
push ecx  +
push 48h  +
pop ecx  +
cdq   +
idiv  ecx +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
sub edi eax +
push edi  +
push dword ptr [esi+8]  +
call sub_10B8760  +
add [esi+8] ebx +
mov esi [esi+8] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-5Ch] +
push eax  +
sub esi ebx +
push esi  +
push dword ptr [ebp+8]  +
call sub_10B8616  +
add esp 0Ch +
jmp loc_10B894E  +
mov eax [ebp+0Ch] +
mov ecx [ebp-68h] +
imul eax eax +
push ecx  +
mov ecx [ecx+8] +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
add eax ecx +
push eax  +
call sub_10B85F7  +
jmp loc_10B888C  +
imul edi edi +
push ecx  +
mov ebx ecx +
push ecx  +
sub ebx edi +
push ebx  +
call sub_10B86C0  +
push dword ptr [ebp-60h]  +
mov [esi+8] eax +
push ebx  +
push dword ptr [ebp+8]  +
call sub_10B863B  +
lea eax [ebp-5Ch] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_10B8616  +
add esp 18h +
lea ecx [ebp-5Ch] +
call sub_10B805F  +
call sub_101D44D  +
retn 0Ch  +
***
push 1Ch  +
mov eax offset dword_10DFF28 +
call sub_1001F95  +
mov esi ecx +
xor edi edi +
push edi  +
lea ecx [ebp-28h] +
mov [ebp-10h] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmenubuttons_7  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+4] +
cmp eax edi +
jz loc_10B8A33  +
cmp byte ptr [eax+234h] 0 +
jz loc_10B8A33  +
mov edi [esi+20h] +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-18h] +
lea ecx [esi+1Ch] +
push eax  +
mov [ebp-14h] ecx +
call sub_1023388  +
cmp edi [eax] +
jnz loc_10B89E0  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B8A47  +
cmp dword ptr [esi+8] 0 +
jz loc_10B89C6  +
cmp dword ptr [esi+28h] 0 +
jz loc_10B89C6  +
mov edi [esi+10h] +
jmp loc_10B8A1D  +
mov eax [edi] +
cmp eax [ebp+0Ch] +
jnz loc_10B8A1A  +
mov eax [edi+40h] +
cmp eax 0FFFFFFFFh +
jz loc_10B8A09  +
mov ecx [esi+28h] +
push eax  +
call sub_10B6EB4  +
push edi  +
lea eax [ebp-18h] +
push eax  +
lea ecx [esi+0Ch] +
call sub_10B871C  +
mov edi [eax] +
jmp loc_10B8A1D  +
add edi 48h +
cmp edi [esi+14h] +
jnz loc_10B89F1  +
mov ecx [ebp-14h] +
lea eax [ebp+0Ch] +
push eax  +
call sub_1027BD1  +
lea eax [ebp-28h] +
jmp loc_10B89D4  +
***
push edi  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_10B792F  +
test eax eax +
jnz loc_10B8AD3  +
xor esi esi +
jmp loc_10B8AE1  +
mov eax [ebp+arg_4] +
sub eax [edi+4] +
push 48h  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi eax +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_10B8786  +
imul esi esi +
add esi [edi+4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_10B792F  +
mov ecx esi +
mov edi eax +
call sub_10B7914  +
push dword ptr [ebp+8]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jnb loc_10B8B36  +
push 1  +
push eax  +
call sub_10B8760  +
mov [esi+8] eax +
jmp loc_10B8B40  +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_10B8ABD  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset ??4SC@mmcerror@@QAEAAV01@J@Z +
mov ecx [ebp-5Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B8C80  +
add edi edi +
adc eax offset ??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
lea ecx [ebp-8Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-74h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp-5Ch] +
test al al +
lea eax [ebp-74h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-58h] +
mov [ebp-60h] ebx +
call sub_10B805F  +
jmp loc_10B8C83  +
push 80070057h  +
lea ecx [ebp-74h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp-5Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-60h] ebx +
lea ecx [ebp-74h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-5Ch] +
call sub_100C50D  +
retn 14h  +
***
call sub_1001F95  +
mov esi ecx +
or dword ptr [esi+88h] 20h +
mov eax [esi+88h] +
mov ebx offset dword_106CEA0 +
mov edi offset lpDst +
test al 40h +
jnz loc_10B8E15  +
mov ecx [esi+54h] +
test ecx ecx +
jz loc_10B8DC1  +
test al 2 +
jnz loc_10B8DC1  +
and dword ptr [ebp-10h] 0 +
mov eax [esi] +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push offset dword_106DB40  +
push eax  +
call dword ptr [ecx]  +
cmp dword ptr [ebp-10h] 0 +
jz loc_10B8DAA  +
mov eax lpDst +
cmp eax edi +
jz loc_10B8D6F  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B8D6F  +
push ebx  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax [esi+54h] +
mov ecx [eax] +
lea edx [esi+0A4h] +
push edx  +
push dword ptr [esi+4]  +
push 0  +
push dword ptr [ebp-10h]  +
push 0  +
push 0FFFFFFFCh  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov ecx lpDst +
cmp ecx edi +
jz loc_10B8DB0  +
cmp byte ptr [ecx+19h] 5 +
jb loc_10B8DB0  +
push eax  +
push ebx  +
push 0Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
mov ecx lpDst +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10B8DC7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx lpDst +
test byte ptr [esi+88h] 8 +
jnz loc_10B8E39  +
call ds:GetFocus  +
push eax  +
push dword ptr [esi+4]  +
call ds:IsChild  +
test eax eax +
jnz loc_10B8E33  +
mov eax lpDst +
cmp eax edi +
jz loc_10B8E01  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B8E01  +
push ebx  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 5  +
push dword ptr [esi+4]  +
call ds:GetWindow  +
push eax  +
call ds:SetFocus  +
jmp loc_10B8E33  +
mov ecx lpDst +
cmp ecx edi +
jz loc_10B8E39  +
cmp byte ptr [ecx+19h] 5 +
jb loc_10B8E39  +
push ebx  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F7C2  +
mov ecx lpDst +
test byte ptr [esi+88h] 20h +
jz loc_10B8E62  +
cmp ecx edi +
jz loc_10B8E5A  +
cmp byte ptr [ecx+19h] 5 +
jb loc_10B8E5A  +
push ebx  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F7C2  +
mov eax [ebp+14h] +
and dword ptr [eax] 0 +
jmp loc_10B8E7A  +
cmp ecx edi +
jz loc_10B8E7A  +
cmp byte ptr [ecx+19h] 5 +
jb loc_10B8E7A  +
push ebx  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F7C2  +
xor eax eax +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov ecx [ecx+8Ch] +
mov eax 80004002h +
test ecx ecx +
jz loc_10B8EAF  +
push [ebp+arg_C]  +
mov eax [ecx] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
call dword ptr [eax+0Ch]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
lea esi [ecx+0Ch] +
push offset Addend  +
mov dword ptr [ecx] offset off_106CEE0 +
mov dword ptr [ecx+4] offset off_106CEB4 +
mov dword ptr [esi] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_101A846  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10B8F04  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
push edi  +
test ebx ebx +
jz loc_10B8F86  +
mov edi [ebp+arg_C] +
test edi edi +
jz loc_10B8F86  +
push esi  +
mov esi [ebp+arg_0] +
mov eax esi +
neg eax  +
lea edx [ebp+arg_8] +
push edx  +
push [ebp+arg_4]  +
lea ecx [esi-4] +
sbb eax eax +
and eax ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
mov [ebp+arg_C] eax +
test eax eax +
jl loc_10B8F7A  +
mov eax [ebp+arg_8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov dword ptr [ebx] 1 +
mov eax [esi+4] +
mov [edi] eax +
jmp loc_10B8F80  +
and dword ptr [ebx] 0 +
and dword ptr [edi] 0 +
mov eax [ebp+arg_C] +
pop esi  +
jmp loc_10B8F8B  +
mov eax 80004003h +
pop edi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax esi +
neg eax  +
lea edx [ebp+arg_0] +
push edx  +
push [ebp+arg_4]  +
lea ecx [esi-4] +
sbb eax eax +
and eax ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jge loc_10B8FC1  +
mov eax 80004002h +
jmp loc_10B8FEC  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_8] +
test eax 0FFFFFFFEh +
jz loc_10B8FDB  +
mov eax 80004005h +
jmp loc_10B8FEC  +
mov ecx eax +
and eax [ebp+arg_C] +
not ecx  +
and ecx [esi+4] +
or ecx eax +
mov [esi+4] ecx +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 0Ch +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10B8EE9  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+30h] +
test eax eax +
jz loc_10B903F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+8] +
pop esi  +
jmp sub_101A846  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10B8FF6  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10B9011  +
***
mov dword ptr [esi+4] offset off_10B9098 +
mov byte ptr [esi+2Ch] 1 +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov eax esi +
pop esi  +
retn   +
***
mov eax 80004001h +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jge loc_10B90F3  +
pop ebp  +
jmp sub_10C7F1B  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push esi  +
push 9  +
mov esi ecx +
pop eax  +
mov [esi] ax +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
jz loc_10B911C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
adc eax offset VariantClear +
push eax  +
call sub_10B90E2  +
retn   +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcviewbehavi  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea esi [edi+28h] +
inc dword ptr [esi]  +
mov [ebp-24h] esi +
mov byte ptr [ebp-4] 2 +
cmp [esi] ebx +
jbe loc_10B9190  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B9322  +
mov eax [edi+30h] +
push 80070057h  +
push eax  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B9315  +
xor eax eax +
cmp [edi+34h] eax +
jz loc_10B9315  +
lea ecx [edi+30h] +
mov [ebp-1Ch] eax +
mov [ebp-14h] eax +
mov [ebp-20h] eax +
mov [ebp-18h] eax +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push eax  +
call dword ptr [ecx+0D4h]  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B9315  +
lea ecx [edi+30h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
call dword ptr [ecx+0D0h]  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B9315  +
lea ecx [edi+30h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push eax  +
call dword ptr [ecx+0DCh]  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B9315  +
lea ecx [edi+30h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+0D8h]  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B9315  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10B92D1  +
cmp byte ptr [eax+19h] 5 +
jb loc_10B92D1  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-1Ch]  +
push offset dword_106CEA0  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CBFD9  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov edx [ebp-20h] +
add ecx eax +
push ecx  +
mov ecx [ebp-1Ch] +
add edx ecx +
push edx  +
push eax  +
movzx eax byte ptr [edi+2Ch] +
push ecx  +
mov ecx [edi+34h] +
push eax  +
lea eax [ebp-44h] +
push eax  +
call sub_10867DD  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov byte ptr [edi+2Ch] 0 +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
dec dword ptr [esi]  +
lea ecx [ebp-34h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
lea eax [ebp-1Ch] +
push eax  +
add ecx 0FFFFFFFCh +
call sub_10B913D  +
and dword ptr [ebp-4] 0 +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 24h  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_1023134 +
mov dword ptr [esi+4] offset off_104E934 +
mov dword ptr [esi+8] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp loc_10B902D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10B941C  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10B93FF  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1023165  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10B9445  +
***
mov dword ptr [esi] offset off_1023134 +
mov dword ptr [esi+4] offset off_104E934 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_10B94DF  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_1044B68  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_10B94D5  +
push 0  +
jmp loc_10B94D8  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_10B94EB  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
xor al 0F4h +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_10B9593  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_106DB30  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_10B9589  +
push 0  +
jmp loc_10B958C  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_10B959F  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
mov ecx [ebp+8] +
push edi  +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
mov ecx [ebp+8] +
push offset aCmmcviewbeha_2  +
mov [ebp-4] edi +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push edi  +
lea ecx [esi+30h] +
call sub_1010F11  +
mov eax [ebp+8] +
mov [esi+34h] edi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10B93CE  +
test [ebp+arg_0] 1 +
jz loc_10B9651  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10B8EB8  +
test [ebp+arg_0] 1 +
jz loc_10B9677  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10B96AA  +
test esi esi +
jz loc_10B96AA  +
push 1  +
mov ecx esi +
call sub_10B9637  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+0Ch] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10B96DE  +
test esi esi +
jz loc_10B96DE  +
push 1  +
mov ecx esi +
call sub_10B965D  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_10B9715  +
push eax  +
call sub_1046EF5  +
test eax eax +
jge loc_10B9715  +
cmp eax 80004002h +
jz loc_10B9715  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_10B974B  +
push eax  +
call sub_10B94A9  +
test eax eax +
jge loc_10B974B  +
cmp eax 80004002h +
jz loc_10B974B  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_10B9781  +
push eax  +
call sub_10B94F8  +
test eax eax +
jge loc_10B9781  +
cmp eax 80004002h +
jz loc_10B9781  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10B97A9  +
mov eax 80004003h +
jmp loc_10B980C  +
push 38h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10B97CE  +
push esi  +
mov ecx eax +
call near ptr dword_10B9478+4  +
jmp loc_10B97D0  +
xor eax eax +
mov esi eax +
jmp loc_10B97E0  +
mov eax offset loc_10B97DA +
retn   +
***
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10B9805  +
lea ecx [esi+0Ch] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10B97F8  +
xor ebx ebx +
test ebx ebx +
jz loc_10B9808  +
push 1  +
mov ecx esi +
call sub_10B9637  +
xor esi esi +
jmp loc_10B9808  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10B955D  +
test eax eax +
jge loc_10B983A  +
cmp eax 80004002h +
jz loc_10B983A  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_1041A02  +
and dword ptr [esi+8] 0 +
mov dword ptr [esi] offset off_10B9884 +
mov dword ptr [esi+4] offset off_10B986C +
mov eax esi +
pop esi  +
retn   +
***
sub dword ptr [esp+4] 4 +
jmp loc_10B9683  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10B96B7  +
***
push ebp  +
mov ebp esp +
mov ecx offset off_10F575C +
pop ebp  +
jmp sub_105010F  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
lea eax [ebp-1Ch] +
push eax  +
call sub_10B95AC  +
and dword ptr [ebp-4] 0 +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-1Ch] ecx +
xor esi esi +
push esi  +
lea ecx [ebp-2Ch] +
mov [ebp-14h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcviewbeha_1  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
cmp [ebp+0Ch] ebx +
jnz loc_10B9AE9  +
mov [ebp+0Ch] esi +
mov ecx [ebp-1Ch] +
add ecx 30h +
mov byte ptr [ebp-4] 2 +
call sub_100A5CF  +
mov esi [eax] +
lea ecx [ebp+0Ch] +
mov [ebp-10h] eax +
add esi 9Ch +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp-10h]  +
call dword ptr [esi]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B99BA  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
mov eax [ebp+0Ch] +
mov [ebp-4] bl +
test eax eax +
jz loc_10B9B1B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10B9B1B  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-10h] +
call sub_10B96EB  +
mov esi 8000FFFFh +
push esi  +
push dword ptr [ebp-10h]  +
lea eax [ebp-3Ch] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B9A26  +
lea eax [ebp-2Ch] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-10h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_10B99A1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10B99A1  +
and dword ptr [ebp-18h] 0 +
lea ecx [ebp-10h] +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B9A00  +
push dword ptr [ebp-18h]  +
call sub_10CE017  +
mov [ebp-18h] eax +
test eax eax +
jnz loc_10B9A6E  +
push esi  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10B9A03  +
push 0  +
push offset off_10F6CCC  +
push offset off_10F6C88  +
push 0  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push eax  +
call __RTDynamicCast  +
mov ecx [ebp-1Ch] +
add esp 14h +
push 80070057h  +
push eax  +
mov [ecx+34h] eax +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call edi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B9A00  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_10B9AD9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+0Ch] +
mov [ebp-4] bl +
test eax eax +
jz loc_10B9AE9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp-1Ch] +
lea eax [ebp-3Ch] +
push eax  +
call sub_10B913D  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 6 +
call edi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCmmcviewbeha_0  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi 80070057h +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B9BF1  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
jmp loc_10B9DA7  +
mov eax [ebp+0Ch] +
mov ecx [ebp-14h] +
mov eax [eax] +
add ecx 30h +
mov [ebp-18h] eax +
mov [ebp-1Ch] ecx +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp+0Ch]  +
mov eax [ebp-18h] +
call dword ptr [eax+0Ch]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B9C37  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10B9BE9  +
mov eax [ebp-14h] +
mov [ebp-18h] eax +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_10B9721  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 3 +
call sub_10B9757  +
push edi  +
push dword ptr [ebp+0Ch]  +
mov edi [ebp-14h] +
push edi  +
lea eax [ebp-3Ch] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B9CB8  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
test edi edi +
jz loc_10B9D97  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
jmp loc_10B9D97  +
push ebx  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-4Ch] +
call sub_10B90FC  +
mov esi eax +
lea edi [ebp-3Ch] +
movs   +
movs   +
movs   +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 6 +
movs   +
call sub_100A5CF  +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp-3Ch] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+0E4h]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea eax [ebp-4Ch] +
push eax  +
mov byte ptr [ebp-4] 4 +
call VariantClear  +
push eax  +
call sub_10B90E2  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B9D76  +
push ebx  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-3Ch] +
call sub_10B90FC  +
mov esi eax +
lea edi [ebp-4Ch] +
movs   +
movs   +
movs   +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 7 +
movs   +
call sub_100A5CF  +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp-4Ch] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+114h]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea eax [ebp-3Ch] +
push eax  +
mov byte ptr [ebp-4] 4 +
call VariantClear  +
push eax  +
call sub_10B90E2  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-14h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_10B9D97  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+0Ch] +
mov [ebp-4] bl +
test eax eax +
jz loc_10B9DA7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCelementbehavi  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+18h] +
push 80070057h  +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10B9E77  +
lea ecx [ebp-1Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 14h  +
mov eax [ebp+0Ch] +
mov [esi] ebx +
cmp eax ebx +
jz loc_10B9F08  +
mov ecx offset aMmcview +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10B9EAF  +
cmp dx bx +
jz loc_10B9EAB  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10B9EAF  +
add eax 4 +
add ecx 4 +
cmp dx bx +
jnz loc_10B9E89  +
xor eax eax +
jmp loc_10B9EB4  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_10B9F08  +
lea eax [ebp+18h] +
push eax  +
mov [ebp+18h] ebx +
call near ptr dword_10B9788+5  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10B9E55  +
mov eax [ebp+18h] +
mov [esi] eax +
cmp eax ebx +
jnz loc_10B9EFD  +
push 8000FFFFh  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
jmp loc_10B9E58  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_10B9E55  +
mov esi 80004005h +
jmp loc_10B9E60  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10B9846  +
push offset Addend  +
mov dword ptr [esi] offset off_106CEE0 +
mov dword ptr [esi+4] offset off_106CEB4 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
call sub_1001F95  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
lea eax [ebp-1Ch] +
push eax  +
call sub_10B9B6F  +
and dword ptr [ebp-4] 0 +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
lea eax [ebp-1Ch] +
push eax  +
call sub_10B990E  +
and dword ptr [ebp-4] 0 +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10BA04C  +
mov eax 80004003h +
jmp loc_10BA0AF  +
push 2Ch  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10BA071  +
push esi  +
mov ecx eax +
call sub_10B9F79  +
jmp loc_10BA073  +
xor eax eax +
mov esi eax +
jmp loc_10BA083  +
mov eax offset loc_10BA07D +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10BA0A8  +
lea ecx [esi+10h] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10BA09B  +
xor ebx ebx +
test ebx ebx +
jz loc_10BA0AB  +
push 1  +
mov ecx esi +
call sub_10B965D  +
xor esi esi +
jmp loc_10BA0AB  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_10] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmcaxhostwi_1  +
lea ecx [ebp+var_10] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+arg_4] +
push 4  +
pop ecx  +
mov edi offset dword_106DB30 +
xor eax eax +
cmps   +
jnz loc_10BA18E  +
mov esi [ebp+arg_0] +
add esi 9Ch +
cmp [esi] eax +
jnz loc_10BA170  +
and [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
push eax  +
call sub_10BA030  +
push eax  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp+var_10] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10BA140  +
lea ecx [ebp+var_10] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp+var_10] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_10B9819  +
cmp dword ptr [esi] 0 +
jnz loc_10BA170  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_10BA15E  +
push 1  +
call sub_10B965D  +
push 8000FFFFh  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
jmp loc_10BA127  +
mov ecx esi +
call sub_100A5CF  +
push [ebp+arg_C]  +
mov ecx [eax] +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx]  +
push eax  +
lea ecx [ebp+var_10] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10BA124  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10B8E89  +
jmp loc_10BA12D  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov esi offset dword_10F54B0 +
push 0  +
mov ecx esi +
call sub_10705E5  +
mov ecx edi +
call ?DoModal@CDialog@@UAEHXZ  +
push 1  +
mov ecx esi +
mov edi eax +
call sub_10705E5  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov eax offset off_1030460 +
retn   +
***
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
call ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
mov ebx eax +
test ebx ebx +
jz loc_10BA27E  +
push edi  +
mov ecx ebx +
call ?GetActiveView@CFrameWnd@@QBEPAVCView@@XZ  +
mov edi eax +
call ds:GetFocus  +
cmp edi esi +
pop edi  +
jnz loc_10BA274  +
mov ecx [esi+20h] +
cmp ecx eax +
jz loc_10BA274  +
push eax  +
push ecx  +
call ds:IsChild  +
test eax eax +
jnz loc_10BA274  +
mov eax [esi] +
push esi  +
push esi  +
push 1  +
mov ecx esi +
call dword ptr [eax+0ECh]  +
jmp loc_10BA27E  +
push 1  +
push esi  +
mov ecx ebx +
call ?SetActiveView@CFrameWnd@@QAEXPAVCView@@H@Z  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
retn 0Ch  +
***
adc ds:byte_10E0300[eax] bh +
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCmmcaxwindowSe  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 5  +
push dword ptr [esi+4]  +
call ds:GetWindow  +
mov edi eax +
test edi edi +
jz loc_10BA2F9  +
push edi  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_10BA2F9  +
push edi  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_10BA2F9  +
push dword ptr [esi+4]  +
call ds:SetFocus  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
jmp loc_10BA308  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
call sub_1001FCF  +
retn   +
***
cmp eax offset lpDst +
jz loc_10BA3A9  +
cmp byte ptr [eax+19h] 3 +
jb loc_10BA3A9  +
push offset dword_106CF38  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
call ds:GetFocus  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp esi eax +
jnz loc_10BA3C0  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_10BA22B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ?OnCmdMsg@CView@@MAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z  +
test eax eax +
jz loc_10BA441  +
xor eax eax +
inc eax  +
jmp loc_10BA47F  +
push dword ptr [esi+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov esi eax +
test esi esi +
jz loc_10BA47D  +
push offset off_102F270  +
mov ecx esi +
call ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z  +
test eax eax +
jz loc_10BA47D  +
push [ebp+arg_C]  +
mov eax [esi] +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+14h]  +
test eax eax +
jnz loc_10BA43C  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
call sub_1001F95  +
mov eax [ebp+8] +
test eax eax +
jnz loc_10BA4A3  +
mov eax 80070057h +
jmp loc_10BA50F  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp+8] 0 +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push offset dword_106DB20  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_10BA4EB  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_10BA4EB  +
mov eax [ebp+8] +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_10BA4FC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10BA50D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
cmp [ebp+0Ch] ebx +
jz loc_10BA5BD  +
mov eax [esi+1Ch] +
cmp eax ebx +
jz loc_10BA5BD  +
mov edi [eax+0D8h] +
mov [ebp+0Ch] ebx +
mov [ebp-4] ebx +
cmp edi ebx +
jz loc_10BA573  +
mov ebx [edi] +
lea ecx [ebp+0Ch] +
call sub_100A5E6  +
push eax  +
push offset dword_1023D6C  +
push edi  +
call dword ptr [ebx]  +
xor ebx ebx +
mov eax [esi+1Ch] +
lea ecx [eax+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
mov esi eax +
cmp [ebp+0Ch] ebx +
jz loc_10BA5AC  +
cmp esi ebx +
jz loc_10BA5AC  +
lea ecx [ebp+0Ch] +
call sub_100A5CF  +
cmp [ebp+8] ebx +
mov ecx [eax] +
setz dl  +
movzx edx dl +
push edx  +
push esi  +
push eax  +
call dword ptr [ecx+140h]  +
mov dword ptr [ebp-10h] 1 +
mov eax [ebp+0Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_10BA5BD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_10BA603  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_104F314  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_10BA5F9  +
push 0  +
jmp loc_10BA5FC  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_10BA60F  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
test eax eax +
jz loc_10BA652  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_10BA668  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_10BA648  +
push 0  +
jmp loc_10BA64B  +
push [ebp+arg_0]  +
call sub_100CA34  +
jmp loc_10BA65E  +
push 0  +
call sub_1010F11  +
mov esi 80004002h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
call sub_1049213  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call ?OnSettingChange@CWnd@@IAEXIPBG@Z  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+110h]  +
pop esi  +
test eax eax +
jz loc_10BA6BB  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 1Ah  +
push dword ptr [eax+4]  +
call ds:SendMessageW  +
jmp loc_10BA6DF  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BA6DF  +
cmp byte ptr [eax+19h] 3 +
jb loc_10BA6DF  +
push offset dword_106CF38  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_10BA712  +
push eax  +
call sub_10BA5CD  +
test eax eax +
jge loc_10BA712  +
cmp eax 80004002h +
jz loc_10BA712  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
cmp dword ptr [eax] 0 +
jz loc_10BA748  +
push eax  +
call sub_10BA61C  +
test eax eax +
jge loc_10BA748  +
cmp eax 80004002h +
jz loc_10BA748  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
mov dword ptr [ecx] offset off_106CF4C +
and dword ptr [ebp-4] 0 +
lea esi [ecx+8] +
mov dword ptr [ecx+4] 1 +
mov ecx esi +
call sub_1044C61  +
push offset Addend  +
call ds:InterlockedDecrement  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_104E3D0  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+4]  +
mov eax [eax+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_10BA7CD  +
mov eax 80004003h +
jmp loc_10BA7FB  +
push dword ptr [ebp+0Ch]  +
mov [esi] edi +
call sub_100EDA6  +
test eax eax +
jz loc_10BA7E8  +
mov eax [ebp+8] +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_10BA7F9  +
mov ecx [ebp+8] +
push esi  +
push dword ptr [ebp+0Ch]  +
add ecx 8 +
call sub_10470B0  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10483D8  +
mov eax [ebp+arg_0] +
mov [esi+4Ch] eax +
mov dword ptr [esi] offset off_10BAAB8 +
mov dword ptr [esi+20h] offset off_10BAA90 +
mov dword ptr [esi+24h] offset off_10BAA68 +
mov dword ptr [esi+28h] offset off_10BA9EC +
mov dword ptr [esi+2Ch] offset off_10BA9BC +
mov dword ptr [esi+30h] offset off_10BA9A0 +
mov dword ptr [esi+34h] offset off_10BA988 +
mov dword ptr [esi+3Ch] offset off_10BA974 +
mov dword ptr [esi+40h] offset off_10BA950 +
mov dword ptr [esi+44h] offset off_10BA904 +
mov dword ptr [esi+48h] offset off_10BA874 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+pv] +
push eax  +
push [ebp+pv]  +
mov esi ecx +
call ds:StringFromCLSID  +
push [ebp+pv]  +
call SysAllocString  +
push [ebp+pv]  +
mov [esi] eax +
call ds:CoTaskMemFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call SysStringLen  +
push eax  +
push dword ptr [esi]  +
call SysAllocStringLen  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_10BAB33  +
cmp dword ptr [ecx] 0 +
jnz loc_10BAB72  +
mov al 1 +
jmp loc_10BAB74  +
mov eax [ecx] +
test eax eax +
jz loc_10BAB72  +
mov ecx [ebp+arg_0] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10BAB62  +
test dx dx +
jz loc_10BAB5E  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10BAB62  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_10BAB3C  +
xor eax eax +
jmp loc_10BAB67  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
xor ecx ecx +
test eax eax +
setz cl  +
mov al cl +
jmp loc_10BAB74  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+bErase]  +
push [ebp+lpRect]  +
push dword ptr [ecx]  +
call ds:InvalidateRect  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+bErase]  +
push [ebp+hRgn]  +
push dword ptr [ecx]  +
call ds:InvalidateRgn  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+6Ch] +
mov ecx [ebp+arg_4] +
and al 1 +
movzx eax al +
neg eax  +
sbb eax eax +
mov [ecx] ax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+70h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+74h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+78h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+6Ch] +
mov ecx [ebp+arg_4] +
and al 2 +
movzx eax al +
neg eax  +
sbb eax eax +
mov [ecx] ax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+6Ch] +
mov ecx [ebp+arg_4] +
and al 4 +
movzx eax al +
neg eax  +
sbb eax eax +
mov [ecx] ax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov [ecx] ax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+84h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax+88h] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+88h] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movsx ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
shl ecx 5 +
xor ecx [eax+6Ch] +
and ecx 20h +
xor [eax+6Ch] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+6Ch] +
mov ecx [ebp+arg_4] +
and al 20h +
movzx eax al +
neg eax  +
sbb eax eax +
mov [ecx] ax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movsx ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
shl ecx 6 +
xor ecx [eax+6Ch] +
and ecx 40h +
xor [eax+6Ch] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+6Ch] +
mov ecx [ebp+arg_4] +
and al 40h +
movzx eax al +
neg eax  +
sbb eax eax +
mov [ecx] ax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push [ebp+arg_4]  +
add esi 8Ch +
mov ecx esi +
call sub_101DDB2  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_10BAB1F  +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_10BADC4  +
mov eax 80004003h +
jmp loc_10BADDE  +
mov ecx [ebp+arg_0] +
add ecx 8Ch +
mov edx [ecx] +
mov [eax] edx +
mov eax edx +
sub eax [ecx] +
neg eax  +
sbb eax eax +
and eax 8007000Eh +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
or dword ptr [eax+60h] 2 +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+60h] 0FFFFFFFDh +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax 80004001h +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+8Ch] +
not eax  +
and eax 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+60h] +
shr eax 4 +
not eax  +
and eax 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jz loc_10BAE79  +
push esi  +
mov esi [ebp+arg_0] +
push dword ptr [esi-24h]  +
call ds:SetCapture  +
or dword ptr [esi+60h] 10h +
pop esi  +
jmp loc_10BAE86  +
call ds:ReleaseCapture  +
mov eax [ebp+arg_0] +
and dword ptr [eax+60h] 0FFFFFFEFh +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_C] +
test esi esi +
jnz loc_10BAEA5  +
mov eax 80004003h +
jmp loc_10BAEB5  +
mov eax [ebp+arg_0] +
push dword ptr [eax-24h]  +
call ds:GetDC  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hDC]  +
mov eax [ebp+arg_0] +
push dword ptr [eax-24h]  +
call ds:ReleaseDC  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+bErase]  +
mov ecx [ebp+arg_0] +
push [ebp+lpRect]  +
add ecx 0FFFFFFDCh +
call sub_10BAB7D  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+bErase]  +
mov ecx [ebp+arg_0] +
push [ebp+hRgn]  +
add ecx 0FFFFFFDCh +
call sub_10BAB99  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
retn 14h  +
***
retn 10h  +
***
retn 8  +
***
mov eax 80004001h +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
shl ecx 7 +
xor ecx [eax+58h] +
and ecx 80h +
xor [eax+58h] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
mov ecx eax +
add eax 0FFFFFFCCh +
neg ecx  +
sbb ecx ecx +
and ecx eax +
add ecx 38h +
push ecx  +
call sub_100CA9D  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_8] +
lea eax [ecx-34h] +
neg ecx  +
sbb ecx ecx +
and ecx eax +
mov eax 80004003h +
test edx edx +
jz loc_10BAFD1  +
mov ecx [ecx+38h] +
test ecx ecx +
jz loc_10BAFC9  +
mov eax [ecx] +
push edx  +
push [ebp+arg_4]  +
push ecx  +
call dword ptr [eax]  +
jmp loc_10BAFD1  +
and dword ptr [edx] 0 +
mov eax 80004005h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_10BAFF7  +
mov ecx [eax] +
push esi  +
push offset dword_10BB000  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+2Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+2Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
test eax eax +
jz loc_10BB06B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop ebp  +
retn 8  +
***
sub dword ptr [esp+4] 24h +
jmp loc_10BB02F  +
***
sub dword ptr [esp+4] 1Ch +
jmp loc_10BB015  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10BB02F  +
***
sub dword ptr [esp+4] 28h +
jmp loc_10BB02F  +
***
sub dword ptr [esp+4] 20h +
jmp loc_10BB015  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_10BB02F  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10BB015  +
***
sub dword ptr [esp+4] 24h +
jmp loc_10BB015  +
***
sub dword ptr [esp+4] 10h +
jmp loc_10BB02F  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10BB015  +
***
sub dword ptr [esp+4] 28h +
jmp loc_10BB015  +
***
sub dword ptr [esp+4] 14h +
jmp loc_10BB02F  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_10BB015  +
***
sub dword ptr [esp+4] 10h +
jmp loc_10BB015  +
***
sub dword ptr [esp+4] 1Ch +
jmp loc_10BB02F  +
***
sub dword ptr [esp+4] 14h +
jmp loc_10BB015  +
***
sub dword ptr [esp+4] 20h +
jmp loc_10BB02F  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10BB02F  +
***
call sub_1001F95  +
mov eax [ebp+8] +
test eax eax +
jnz loc_10BB192  +
mov eax 80070057h +
jmp loc_10BB201  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp+8] 0 +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push offset dword_106DB20  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_10BB1DD  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push dword ptr [ebp+10h]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_10BB1DD  +
push dword ptr [ebp+14h]  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_10BB1EE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10BB1FF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
push dword ptr [ecx+50h]  +
lea ecx [ebp-10h] +
call sub_10BAFDA  +
mov eax [ebp-10h] +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_10BB253  +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
mov eax [ebp-10h] +
jnz loc_10BB253  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10BB24E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
inc eax  +
jmp loc_10BB263  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10BB261  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
call sub_1001FCF  +
retn 10h  +
***
call sub_1001F95  +
mov esi ecx +
or dword ptr [esi+88h] 20h +
mov eax [esi+88h] +
xor edi edi +
test al 40h +
jnz loc_10BB316  +
cmp [esi+54h] edi +
jz loc_10BB2E7  +
test al 1 +
jnz loc_10BB2E7  +
mov [ebp-10h] edi +
mov eax [esi] +
mov [ebp-4] edi +
call dword ptr [eax+0Ch]  +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push offset dword_106DB40  +
push eax  +
call dword ptr [ecx]  +
mov ecx [ebp-10h] +
cmp ecx edi +
jz loc_10BB2D9  +
mov eax [esi+54h] +
mov edx [eax] +
lea ebx [esi+0A4h] +
push ebx  +
push dword ptr [esi+4]  +
push edi  +
push ecx  +
push edi  +
push 0FFFFFFFCh  +
push eax  +
call dword ptr [edx+2Ch]  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp ecx edi +
jz loc_10BB2E7  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
test byte ptr [esi+88h] 8 +
jnz loc_10BB316  +
call ds:GetFocus  +
push eax  +
push dword ptr [esi+4]  +
call ds:IsChild  +
test eax eax +
jnz loc_10BB316  +
push 5  +
push dword ptr [esi+4]  +
call ds:GetWindow  +
push eax  +
call ds:SetFocus  +
mov eax [ebp+14h] +
mov [eax] edi +
xor eax eax +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+88h] +
and [ebp+var_4] 0 +
test al 1 +
jz loc_10BB361  +
test al 8 +
jz loc_10BB361  +
mov ecx [ecx+64h] +
test ecx ecx +
jz loc_10BB361  +
mov eax [ecx] +
lea edx [ebp+var_4] +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push ecx  +
call dword ptr [eax+24h]  +
cmp eax 1 +
jnz loc_10BB367  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
mov eax [ebp+var_4] +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+88h] +
and [ebp+var_4] 0 +
test al 1 +
jz loc_10BB3A5  +
test al 8 +
jz loc_10BB3A5  +
mov ecx [ecx+64h] +
test ecx ecx +
jz loc_10BB3A5  +
mov eax [ecx] +
lea edx [ebp+var_4] +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push ecx  +
call dword ptr [eax+24h]  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
mov eax [ebp+var_4] +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
and [ebp+var_4] 0 +
push esi  +
push 0  +
push offset dword_100CA88  +
lea edx [ebp+var_4] +
push edx  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10BB3EE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
mov eax 80004003h +
test ecx ecx +
jz loc_10BB428  +
mov eax [ebp+arg_0] +
mov eax [eax+30h] +
test eax eax +
jz loc_10BB420  +
mov edx [eax] +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [edx]  +
jmp loc_10BB428  +
and dword ptr [ecx] 0 +
mov eax 80040004h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
add eax 48h +
push eax  +
call sub_100CA9D  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
add eax 4Ch +
push eax  +
call sub_100CA9D  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+70h] +
mov ecx [ecx+28h] +
shr eax 5 +
and eax 1 +
mov [ebp+arg_0] eax +
test ecx ecx +
jz loc_10BB4A8  +
mov edx [ecx] +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_10]  +
mov eax [ebp+arg_8] +
push [ebp+arg_C]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push [ebp+arg_4]  +
push ecx  +
call dword ptr [edx+1Ch]  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_10BB4C4  +
mov eax 80004003h +
jmp loc_10BB4F4  +
mov ecx [ebp+arg_0] +
mov edx [ecx+28h] +
test edx edx +
jz loc_10BB4E0  +
mov ecx [edx] +
push esi  +
lea esi [eax+8] +
push esi  +
add eax 4 +
push eax  +
push edx  +
call dword ptr [ecx+20h]  +
pop esi  +
jmp loc_10BB4F4  +
mov edx [ecx+88h] +
mov [eax+4] edx +
mov ecx [ecx+8Ch] +
mov [eax+8] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+70h] +
mov ecx [ecx+28h] +
shr eax 6 +
and eax 1 +
mov [ebp+arg_0] eax +
test ecx ecx +
jz loc_10BB534  +
mov eax [ecx] +
lea edx [ebp+arg_0] +
push edx  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ecx  +
call dword ptr [eax+24h]  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov ecx [ecx+28h] +
xor eax eax +
test ecx ecx +
jz loc_10BB554  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+28h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov ecx [ecx+28h] +
xor eax eax +
test ecx ecx +
jz loc_10BB574  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+2Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov ecx [ecx+28h] +
xor eax eax +
test ecx ecx +
jz loc_10BB59C  +
mov edx [ebp+arg_4] +
mov eax [ecx] +
neg edx  +
sbb edx edx +
push edx  +
push ecx  +
call dword ptr [eax+30h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov ecx [ecx+28h] +
xor eax eax +
test ecx ecx +
jz loc_10BB5C4  +
mov edx [ebp+arg_4] +
mov eax [ecx] +
neg edx  +
sbb edx edx +
push edx  +
push ecx  +
call dword ptr [eax+34h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov ecx [ecx+28h] +
xor eax eax +
test ecx ecx +
jz loc_10BB5EC  +
mov edx [ebp+arg_4] +
mov eax [ecx] +
neg edx  +
sbb edx edx +
push edx  +
push ecx  +
call dword ptr [eax+38h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov ecx [ecx+28h] +
xor eax eax +
test ecx ecx +
jz loc_10BB625  +
mov eax [ebp+arg_C] +
mov edx [ecx] +
neg eax  +
sbb eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push ecx  +
call dword ptr [edx+3Ch]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax+28h] +
mov [ebp+var_4] 1 +
test esi esi +
jz loc_10BB677  +
push [ebp+pv]  +
lea ecx [ebp+arg_0] +
call sub_10BAACD  +
mov ecx [esi] +
lea edx [ebp+var_4] +
push edx  +
push [ebp+arg_C]  +
push dword ptr [eax]  +
mov eax [ebp+arg_4] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push esi  +
call dword ptr [ecx+40h]  +
push [ebp+arg_0]  +
call SysFreeString  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push esi  +
mov esi [ebp+arg_4] +
inc eax  +
test esi esi +
jnz loc_10BB69B  +
mov eax 80004003h +
jmp loc_10BB6DB  +
and dword ptr [esi] 0 +
mov edx [ebp+arg_0] +
mov ecx [edx+28h] +
test ecx ecx +
jz loc_10BB6C0  +
push [ebp+arg_8]  +
mov eax [ecx] +
push esi  +
push ecx  +
call dword ptr [eax+44h]  +
test eax eax +
jl loc_10BB6BB  +
cmp dword ptr [esi] 0 +
jnz loc_10BB6DB  +
xor eax eax +
inc eax  +
jmp loc_10BB6DB  +
lea ecx [edx+90h] +
cmp dword ptr [ecx] 0 +
jz loc_10BB6DB  +
call sub_10BAB02  +
xor ecx ecx +
test eax eax +
setz cl  +
mov [esi] eax +
mov eax ecx +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi 80004001h +
test esi esi +
jnz loc_10BB6FD  +
lea eax [edi+2] +
jmp loc_10BB74C  +
and dword ptr [esi] 0 +
mov eax [ebp+arg_0] +
mov eax [eax+28h] +
test eax eax +
jz loc_10BB74A  +
and [ebp+arg_8] 0 +
mov ecx [eax] +
lea edx [ebp+arg_8] +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+48h]  +
mov edi eax +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10BB734  +
mov ecx [eax] +
push esi  +
push offset dword_10BB754  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
mov eax [ebp+arg_8] +
test edi edi +
jl loc_10BB73D  +
cmp dword ptr [esi] 0 +
jnz loc_10BB740  +
xor edi edi +
inc edi  +
test eax eax +
jz loc_10BB74A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_10BB77D  +
mov eax 80004003h +
jmp loc_10BB7AB  +
and dword ptr [esi] 0 +
mov ecx [ebp+arg_0] +
mov eax [ecx+28h] +
push esi  +
test eax eax +
jz loc_10BB7A1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
test eax eax +
jl loc_10BB79A  +
cmp dword ptr [esi] 0 +
jnz loc_10BB7AB  +
mov eax 80004002h +
jmp loc_10BB7AB  +
add ecx 24h +
call sub_1047C75  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_C] +
mov [ebp+var_4] 1 +
test ebx ebx +
jnz loc_10BB7D4  +
mov eax 80004003h +
jmp loc_10BB862  +
and dword ptr [ebx] 0 +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax+28h] +
push edi  +
test esi esi +
jz loc_10BB85D  +
push [ebp+arg_8]  +
and [ebp+arg_C] 0 +
lea ecx [ebp+arg_0] +
call sub_101DD5D  +
mov eax [eax] +
mov ecx [esi] +
lea edx [ebp+arg_C] +
push edx  +
push eax  +
push [ebp+arg_4]  +
push esi  +
call dword ptr [ecx+50h]  +
push [ebp+arg_0]  +
mov edi SysFreeString +
mov [ebp+var_4] eax +
call edi  +
cmp [ebp+var_4] 0 +
jl loc_10BB851  +
cmp [ebp+arg_C] 0 +
jz loc_10BB851  +
push [ebp+arg_C]  +
call SysStringLen  +
lea esi [eax+eax+2] +
push esi  +
call ds:CoTaskMemAlloc  +
mov [ebx] eax +
test eax eax +
jnz loc_10BB842  +
push [ebp+arg_C]  +
call edi  +
mov eax 8007000Eh +
jmp loc_10BB860  +
push esi  +
push [ebp+arg_C]  +
push eax  +
call memcpy  +
add esp 0Ch +
jmp loc_10BB858  +
mov [ebp+var_4] 1 +
push [ebp+arg_C]  +
call edi  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_8] +
inc ebx  +
test edi edi +
jnz loc_10BB884  +
mov eax 80004003h +
jmp loc_10BB8D7  +
and dword ptr [edi] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+28h] +
test eax eax +
jz loc_10BB8D4  +
and [ebp+arg_8] 0 +
mov ecx [eax] +
lea edx [ebp+arg_8] +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+54h]  +
cmp [ebp+arg_8] 0 +
mov ebx eax +
jz loc_10BB8BB  +
push edi  +
lea eax [esi-24h] +
mov ecx [eax] +
push offset dword_10BB8E0  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
test ebx ebx +
jl loc_10BB8C4  +
cmp dword ptr [edi] 0 +
jnz loc_10BB8C7  +
xor ebx ebx +
inc ebx  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10BB8D4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push 0FFFFFD43h  +
lea ecx [esi-48h] +
mov [esi+70h] eax +
call sub_10494BB  +
push 0  +
lea eax [esi-20h] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+64h]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax+74h] ecx +
push 0FFFFFD40h  +
lea ecx [eax-48h] +
call sub_10494BB  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax+78h] ecx +
push 0FFFFFD3Fh  +
lea ecx [eax-48h] +
call sub_10494BB  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movsx ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
add ecx ecx +
xor ecx [eax+6Ch] +
push 0FFFFFD3Bh  +
and ecx 2 +
xor [eax+6Ch] ecx +
lea ecx [eax-48h] +
call sub_10494BB  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movsx ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
shl ecx 2 +
xor ecx [eax+6Ch] +
push 0FFFFFD37h  +
and ecx 4 +
xor [eax+6Ch] ecx +
lea ecx [eax-48h] +
call sub_10494BB  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8Ch +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
lea ecx [esi+7Ch] +
cmp dword ptr [ecx] 0 +
mov [ebp+var_6C] eax +
mov [ebp+lplpvObj] ecx +
jnz loc_10BBAE3  +
push ebx  +
push edi  +
mov edi ds:GetStockObject +
push 11h  +
call edi  +
test eax eax +
jnz loc_10BBA17  +
push 0Dh  +
call edi  +
lea ecx [ebp+var_60] +
push ecx  +
push 5Ch  +
push eax  +
call ds:GetObjectW  +
lea eax [ebp+var_44] +
mov [ebp+FontDesc.lpstrName] eax +
mov ax [ebp+var_50] +
mov [ebp+FontDesc.sWeight] ax +
movzx ax [ebp+var_49] +
mov [ebp+FontDesc.sCharset] ax +
movzx eax [ebp+var_4C] +
mov [ebp+FontDesc.fItalic] eax +
movzx eax [ebp+var_4B] +
mov [ebp+FontDesc.fUnderline] eax +
movzx eax [ebp+var_4A] +
mov [ebp+FontDesc.fStrikethrough] eax +
mov eax [ebp+var_60] +
mov [ebp+FontDesc.cbSizeofstruct] 20h +
mov [ebp+var_68] eax +
test eax eax +
jge loc_10BBA6C  +
neg eax  +
mov [ebp+var_68] eax +
mov eax [esi-44h] +
test eax eax +
jz loc_10BBA8D  +
push eax  +
call ds:GetDC  +
mov edi eax +
push 5Ah  +
push edi  +
call ds:GetDeviceCaps  +
push edi  +
push dword ptr [esi-44h]  +
mov ebx eax +
jmp loc_10BBAAD  +
mov esi ds:GetDesktopWindow +
call esi  +
push eax  +
call ds:GetDC  +
mov edi eax +
push 5Ah  +
push edi  +
call ds:GetDeviceCaps  +
push edi  +
mov ebx eax +
call esi  +
push eax  +
call ds:ReleaseDC  +
mov eax [ebp+var_68] +
imul eax eax +
cdq   +
idiv  ebx +
push [ebp+lplpvObj]  +
and dword ptr [ebp+FontDesc.cySize+4] 0 +
push offset stru_10493C4  +
mov dword ptr [ebp+FontDesc.cySize] eax +
lea eax [ebp+FontDesc] +
push eax  +
call OleCreateFontIndirect  +
mov ecx [ebp+lplpvObj] +
pop edi  +
pop ebx  +
push [ebp+var_6C]  +
call sub_1047C75  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movsx ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
shl ecx 3 +
xor ecx [eax+6Ch] +
push 0FFFFFD3Eh  +
and ecx 8 +
xor [eax+6Ch] ecx +
lea ecx [eax-48h] +
call sub_10494BB  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax+84h] ecx +
push 0FFFFFFFFh  +
lea ecx [eax-48h] +
call sub_10494BB  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
push esi  +
call sub_10BAF70  +
mov edi eax +
test edi edi +
jl loc_10BBB88  +
mov eax [esi+4] +
test eax eax +
jz loc_10BBB88  +
mov ecx [eax] +
lea edx [esi+94h] +
push edx  +
push offset dword_10BBBAC  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
cmp [ebp+arg_4] 0 +
jnz loc_10BBBA3  +
lea eax [esi+94h] +
mov ecx [eax] +
test ecx ecx +
jz loc_10BBBA3  +
and dword ptr [eax] 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
mov eax 80004003h +
test edi edi +
jz loc_10BBBFE  +
and dword ptr [edi] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx+14h] +
push esi  +
mov esi offset dword_10BBC04 +
test eax eax +
jz loc_10BBBF2  +
mov ecx [eax] +
push edi  +
push esi  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jge loc_10BBBFC  +
push edi  +
lea eax [ebx-4] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx]  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
mov ecx [ebp+arg_0] +
push [ebp+wParam]  +
add ecx 0FFFFFFD8h +
push [ebp+Msg]  +
call sub_104455A  +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
mov esi [ebp+8] +
mov eax [esi+2Ch] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jge loc_10BBC73  +
lea ecx [esi+28h] +
cmp ecx [esi+2Ch] +
jz loc_10BBC73  +
push dword ptr [ebp+10h]  +
lea ecx [esi-20h] +
push dword ptr [ebp+0Ch]  +
call sub_10470B0  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push 4  +
mov eax offset dword_10E48FC +
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
test byte ptr [esi+14h] 2 +
jz loc_10BBCB4  +
mov edi [esi+8] +
jmp loc_10BBCA6  +
push edi  +
call sub_1076B3A  +
add edi 4 +
cmp edi [esi+0Ch] +
jnz loc_10BBC9D  +
push dword ptr [esi+8]  +
call sub_100F30B  +
pop ecx  +
mov esi [esi+4] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_10BBCC5  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
call sub_1001FCF  +
retn   +
***
sub dword ptr [esp+4] 1Ch +
jmp loc_10BBC42  +
***
sub dword ptr [esp+4] 20h +
jmp loc_10BBC42  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10BBC42  +
***
sub dword ptr [esp+4] 24h +
jmp loc_10BBC42  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10BBC42  +
***
sub dword ptr [esp+4] 28h +
jmp loc_10BBC42  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_10BBC42  +
***
sub dword ptr [esp+4] 10h +
jmp loc_10BBC42  +
***
sub dword ptr [esp+4] 14h +
jmp loc_10BBC42  +
***
xor eax eax +
push esi  +
mov esi ecx +
mov [esi+4] eax +
lea ecx [esi+18h] +
mov [esi+10h] eax +
mov [esi+0Ch] eax +
mov [esi+8] eax +
mov [esi+14h] eax +
call sub_1041A02  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_101A846  +
mov ecx esi +
pop esi  +
jmp loc_10BBC7D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_10F575C +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10765AC  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_10F575C +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1052795  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10BBD57  +
push offset Addend  +
mov dword ptr [esi] offset off_106CF70 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
shl ecx 2 +
add [eax+10h] ecx +
mov edx [eax+10h] +
mov ecx [eax+0Ch] +
cmp edx ecx +
jbe loc_10BBE3A  +
mov [eax+10h] ecx +
xor eax eax +
inc eax  +
jmp loc_10BBE43  +
mov ecx [eax+8] +
cmp edx ecx +
jb loc_10BBE32  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10BBE68  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor edx edx +
push edi  +
mov edi [ebp+0Ch] +
xor ebx ebx +
inc edx  +
cmp edi ebx +
jnz loc_10BBEBE  +
cmp [ebp+10h] ebx +
jnz loc_10BBECB  +
mov ecx [ebp+14h] +
cmp ecx ebx +
jz loc_10BBF54  +
mov eax [ebp+8] +
mov edx [eax+0Ch] +
sub edx [eax+10h] +
sar edx 2 +
mov [ecx] edx +
xor eax eax +
jmp loc_10BBF59  +
cmp [ebp+10h] ebx +
jz loc_10BBF54  +
cmp edi edx +
jz loc_10BBED4  +
cmp [ebp+14h] ebx +
jz loc_10BBF54  +
mov esi [ebp+8] +
cmp [esi+8] ebx +
jz loc_10BBF4D  +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_10BBF4D  +
mov ecx [esi+10h] +
cmp ecx ebx +
jz loc_10BBF4D  +
sub eax ecx +
sar eax 2 +
mov [ebp+8] ebx +
cmp edi eax +
jbe loc_10BBEF9  +
mov [ebp+8] edx +
jb loc_10BBEFD  +
mov edi eax +
mov eax [ebp+14h] +
cmp eax ebx +
jz loc_10BBF06  +
mov [eax] edi +
mov ebx [ebp+10h] +
jmp loc_10BBF23  +
push dword ptr [esi+10h]  +
dec edi  +
push ebx  +
call sub_10BB052  +
mov [ebp+0Ch] eax +
test eax eax +
jl loc_10BBF2C  +
add ebx 4 +
add dword ptr [esi+10h] 4 +
test edi edi +
jnz loc_10BBF0B  +
mov eax [ebp+8] +
jmp loc_10BBF59  +
mov esi [ebp+10h] +
jmp loc_10BBF3A  +
push esi  +
call sub_1076B3A  +
add esi 4 +
cmp esi ebx +
jb loc_10BBF31  +
mov eax [ebp+14h] +
test eax eax +
jz loc_10BBF48  +
and dword ptr [eax] 0 +
mov eax [ebp+0Ch] +
jmp loc_10BBF59  +
mov eax 80004005h +
jmp loc_10BBF59  +
mov eax 80004003h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10BBE4C  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_106CF70 +
mov dword ptr [esi+18h] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp sub_10BBD7C  +
***
xor eax eax +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10FC088 0 +
push esi  +
mov esi ecx +
jnz loc_10BBFCD  +
and dword_10FC088 0 +
lea eax [esi+1Ch] +
push eax  +
push offset a0  +
push offset unk_10F5658  +
call sub_1048555  +
push [ebp+arg_18]  +
movzx eax ax +
push eax  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_10483A9  +
push eax  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1048E3D  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+8] +
xor eax eax +
cmp [esi-1Ch] eax +
jnz loc_10BC04E  +
push eax  +
push eax  +
push eax  +
mov ecx 80000000h +
push 0CF0000h  +
mov [ebp-10h] ecx +
mov [ebp-0Ch] ecx +
push offset aAxwinUiWindow  +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
lea ecx [esi-20h] +
mov [ebp-8] eax +
mov [ebp-4] eax +
call sub_10BBFB5  +
mov eax [esi-1Ch] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10BBF81  +
test [ebp+arg_0] 1 +
jz loc_10BC09F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+18h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10BC0D2  +
test esi esi +
jz loc_10BC0D2  +
push 1  +
mov ecx esi +
call sub_10BC085  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax 800401A1h +
retn 8  +
***
xor eax eax +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
add eax 24h +
push eax  +
call sub_100CA9D  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10FC0E8 0 +
push esi  +
mov esi ecx +
jnz loc_10BC12D  +
and dword_10FC0E8 0 +
lea eax [esi+1Ch] +
push eax  +
push offset unk_10FC0B8  +
push offset unk_10F5658  +
call sub_1048555  +
push [ebp+arg_18]  +
movzx eax ax +
push eax  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_10483A9  +
push eax  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1048E3D  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+8] +
xor eax eax +
cmp [esi-1Ch] eax +
jnz loc_10BC1AD  +
push eax  +
push eax  +
push eax  +
push 0CF0000h  +
push offset aAxwinFrameWind  +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
lea ecx [esi-20h] +
mov dword ptr [ebp-10h] 80000000h +
mov [ebp-0Ch] eax +
mov [ebp-8] eax +
mov [ebp-4] eax +
call sub_10BC115  +
mov eax [esi-1Ch] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10BC203  +
mov eax 80004003h +
jmp loc_10BC26E  +
push 38h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10BC228  +
push esi  +
mov ecx eax +
call sub_10BBDF1  +
jmp loc_10BC22A  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
jmp loc_10BC242  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10BC23C +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10BC267  +
lea ecx [esi+1Ch] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10BC25A  +
xor ebx ebx +
test ebx ebx +
jz loc_10BC26A  +
push 1  +
mov ecx esi +
call sub_10BC085  +
xor esi esi +
jmp loc_10BC26A  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+8Ch] +
and al 1 +
movzx eax al +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 24h +
jmp loc_10447DD  +
***
sub dword ptr [esp+4] 10h +
jmp loc_10447DD  +
***
sub dword ptr [esp+4] 14h +
jmp loc_10447DD  +
***
sub dword ptr [esp+4] 1Ch +
jmp loc_10447DD  +
***
sub dword ptr [esp+4] 1Ch +
jmp loc_1047091  +
***
sub dword ptr [esp+4] 20h +
jmp loc_1047091  +
***
sub dword ptr [esp+4] 24h +
jmp loc_1047091  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1047091  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1047091  +
***
sub dword ptr [esp+4] 10h +
jmp loc_1047091  +
***
sub dword ptr [esp+4] 14h +
jmp loc_1047091  +
***
call sub_100A60E  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_10BC369  +
mov eax 80004003h +
jmp loc_10BC3EA  +
push 38h  +
mov [eax] esi +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10BC387  +
push esi  +
mov ecx eax +
call sub_10BBDF1  +
jmp loc_10BC389  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov edi eax +
jmp loc_10BC39E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10BC39B +
retn   +
mov edi [ebp-14h] +
test edi edi +
jnz loc_10BC3A9  +
mov eax 8007000Eh +
jmp loc_10BC3EA  +
mov esi [ebp+8] +
lea ecx [esi-30h] +
mov eax [ecx] +
push 3  +
call dword ptr [eax+0Ch]  +
push eax  +
lea eax [esi+24h] +
push eax  +
add esi 20h +
push esi  +
mov ecx edi +
call sub_1076D9E  +
mov esi eax +
test esi esi +
jl loc_10BC3DF  +
push dword ptr [ebp+10h]  +
mov eax [edi] +
push offset dword_106DB80  +
push edi  +
call dword ptr [eax]  +
mov esi eax +
test esi esi +
jge loc_10BC3E8  +
push 1  +
mov ecx edi +
call sub_10BC085  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10BA754  +
test [ebp+arg_0] 1 +
jz loc_10BC411  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_106CF4C +
test eax eax +
jnz loc_10BC438  +
mov eax esi +
push eax  +
lea ecx [esi+8] +
call sub_10BA806  +
push offset Addend  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
push esi  +
mov esi [ecx+4] +
jnz loc_10BC474  +
test ecx ecx +
jz loc_10BC474  +
push 1  +
call sub_10BC3F7  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+0Ch] +
push ebx  +
push edi  +
xor edi edi +
mov [ebp-4] edi +
mov ebx 80004003h +
cmp eax edi +
jz loc_10BC524  +
mov [eax] edi +
lea eax [ebp-8] +
push eax  +
call sub_10BC1E7  +
mov ebx eax +
cmp ebx edi +
jl loc_10BC524  +
push esi  +
mov esi [ebp+8] +
test byte ptr [esi+14h] 1 +
jz loc_10BC4CB  +
push esi  +
lea ecx [ebp+8] +
mov dword ptr [ebp-4] 1 +
call sub_100D2CF  +
jmp loc_10BC4CE  +
lea eax [esi+4] +
mov eax [eax] +
push edi  +
mov edi [ebp-8] +
push eax  +
push dword ptr [esi+0Ch]  +
mov ecx edi +
push dword ptr [esi+8]  +
call sub_1076D9E  +
test byte ptr [ebp-4] 1 +
mov ebx eax +
jz loc_10BC4F7  +
mov eax [ebp+8] +
test eax eax +
jz loc_10BC4F7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test ebx ebx +
jl loc_10BC516  +
push dword ptr [ebp+0Ch]  +
mov eax [esi+10h] +
push offset dword_106DB80  +
mov ecx edi +
mov [edi+10h] eax +
call sub_10BBE4C  +
mov ebx eax +
test ebx ebx +
jge loc_10BC523  +
test edi edi +
jz loc_10BC523  +
push 1  +
mov ecx edi +
call sub_10BC085  +
pop esi  +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
sub dword ptr [esp+4] 10h +
jmp loc_1044831  +
***
sub dword ptr [esp+4] 14h +
jmp loc_1044831  +
***
sub dword ptr [esp+4] 1Ch +
jmp loc_1044831  +
***
sub dword ptr [esp+4] 24h +
jmp loc_1044831  +
***
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCocxhostviewOn  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
push edi  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call ?OnActivateView@CView@@MAEXHPAV1@0@Z  +
cmp [ebp+0Ch] edi +
jz loc_10BC68A  +
cmp [ebp+8] ebx +
jz loc_10BC601  +
push offset loc_100E83D  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [esi+48h] +
call sub_1019FF5  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10BC68A  +
lea ecx [ebp-1Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10BC68A  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+114h]  +
mov [ebp+8] eax +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_10BA6E8  +
mov esi [ebp+0Ch] +
mov byte ptr [ebp-4] 2 +
cmp esi ebx +
jz loc_10BC659  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BC649  +
cmp byte ptr [eax+19h] 5 +
jb loc_10BC649  +
push offset dword_106CF38  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
lea ecx [ebp+0Ch] +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
jmp loc_10BC67D  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BC67D  +
cmp byte ptr [eax+19h] 5 +
jb loc_10BC67D  +
push offset dword_106CF38  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov [ebp-4] bl +
cmp esi ebx +
jz loc_10BC68A  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_100A60E  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_10BC6FB  +
mov eax 80004003h +
jmp loc_10BC764  +
push 0E0h  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10BC725  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_10BC41D  +
jmp loc_10BC727  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
jmp loc_10BC73C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10BC739 +
retn   +
mov esi [ebp-18h] +
test esi esi +
jz loc_10BC761  +
push dword ptr [ebp+10h]  +
inc dword ptr [esi+4]  +
push dword ptr [ebp+0Ch]  +
dec dword ptr [esi+4]  +
mov eax [esi] +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jz loc_10BC761  +
push 1  +
mov ecx esi +
call sub_10BC3F7  +
mov eax [ebp-14h] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_104E7F5  +
test byte ptr [ebp+8] 1 +
jz loc_10BC78B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub ecx 48h +
jmp loc_104E75D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
call sub_1048C95  +
lea eax [ebp+var_4] +
push eax  +
xor esi esi +
push offset dword_1048258  +
push esi  +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
call sub_10BC6DF  +
mov edi eax +
cmp edi esi +
jl loc_10BC823  +
mov eax [ebp+var_4] +
lea edx [ebp+var_C] +
push edx  +
push offset dword_1049C64  +
mov [ebp+var_C] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
push [ebp+arg_0]  +
lea ecx [ebp+arg_0] +
call sub_101DD5D  +
push [ebp+arg_18]  +
mov eax [ebp+var_C] +
push [ebp+arg_14]  +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+10h]  +
push [ebp+arg_0]  +
mov edi eax +
call SysFreeString  +
mov eax [ebp+var_C] +
cmp eax esi +
jz loc_10BC823  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_C] +
cmp eax esi +
jz loc_10BC83A  +
cmp edi esi +
jl loc_10BC838  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov [ebp+var_4] esi +
jmp loc_10BC83A  +
mov [eax] esi +
mov eax [ebp+arg_10] +
cmp eax esi +
jz loc_10BC851  +
cmp edi esi +
jl loc_10BC84F  +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov [ebp+var_8] esi +
jmp loc_10BC85E  +
mov [eax] esi +
mov eax [ebp+var_8] +
cmp eax esi +
jz loc_10BC85E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
cmp eax esi +
jz loc_10BC86B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push offset dword_100CA88  +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10BC7A4  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
call sub_1048C95  +
xor esi esi +
cmp [ebp+arg_0] esi +
jnz loc_10BC8BB  +
mov eax 80070057h +
jmp loc_10BC92D  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push offset dword_1048258  +
push esi  +
mov [ebp+var_4] esi +
call sub_10BC6DF  +
mov edi eax +
cmp edi esi +
jl loc_10BC906  +
mov eax [ebp+var_4] +
lea edx [ebp+var_8] +
push edx  +
push offset dword_1049C64  +
mov [ebp+var_8] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
push [ebp+arg_4]  +
mov eax [ebp+var_8] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
mov eax [ebp+var_8] +
cmp eax esi +
jz loc_10BC906  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+arg_8] +
cmp ecx esi +
jz loc_10BC91D  +
cmp edi esi +
jl loc_10BC916  +
mov eax [ebp+var_4] +
jmp loc_10BC918  +
xor eax eax +
mov [ecx] eax +
mov [ebp+var_4] esi +
mov eax [ebp+var_4] +
cmp eax esi +
jz loc_10BC92A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
push offset aHtml06e1cb7b19  +
call sub_10C9BCB  +
mov dword_10FD688 eax +
xor eax eax +
inc eax  +
retn 8  +
***
push dword_10FD688  +
call ds:IsWindow  +
test eax eax +
jz loc_10BC973  +
push 0  +
push 0  +
push 10h  +
push dword_10FD688  +
call ds:PostMessageW  +
and dword_10FD688 0 +
xor eax eax +
inc eax  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
setnz al  +
movzx eax al +
push eax  +
push 4  +
call sub_10782BF  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
setz al  +
movzx eax al +
push eax  +
push 8  +
call sub_10782BF  +
pop ebp  +
retn 4  +
***
retn   +
***
mov eax offset off_10BC9D8 +
retn   +
***
mov eax ds:?messageMap@CPropertySheet@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
mov eax offset off_10BCA28 +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1004D6C +
push offset ??1CString@@QAE@XZ  +
push 4  +
push 4  +
lea eax [esi+1F8h] +
push eax  +
mov dword ptr [ebp-4] 8 +
call sub_100C964  +
lea ecx [esi+1E8h] +
mov byte ptr [ebp-4] 7 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+1E4h] +
mov byte ptr [ebp-4] 6 +
call sub_100EBDB  +
lea ecx [esi+1D8h] +
mov byte ptr [ebp-4] 5 +
call ??1CString@@QAE@XZ  +
lea ecx [esi+190h] +
mov byte ptr [ebp-4] 4 +
call ??1CStatic@@UAE@XZ  +
lea ecx [esi+150h] +
mov byte ptr [ebp-4] 3 +
call ??1CEdit@@UAE@XZ  +
lea ecx [esi+110h] +
mov byte ptr [ebp-4] 2 +
call ??1CStatic@@UAE@XZ  +
lea ecx [esi+0D0h] +
mov byte ptr [ebp-4] 1 +
call ??1CButton@@UAE@XZ  +
lea ecx [esi+90h] +
mov byte ptr [ebp-4] 0 +
call ??1CButton@@UAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CPropertyPage@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
retn   +
***
push 1  +
call ?SetModified@CPropertyPage@@QAEXH@Z  +
retn   +
***
push 1  +
mov byte ptr [ecx+1F0h] 1 +
call ?SetModified@CPropertyPage@@QAEXH@Z  +
retn   +
***
mov eax ds:?classCPropertyPage@CPropertyPage@@2UCRuntimeClass@@B +
retn   +
***
mov eax offset off_10BCB50 +
retn   +
***
mov eax ds:?messageMap@CPropertyPage@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
mov edi edi +
push esi  +
push 0  +
push 0C7h  +
mov esi ecx +
call ??0CPropertyPage@@QAE@II@Z  +
mov dword ptr [esi] offset off_1004F0C +
mov eax esi +
pop esi  +
retn   +
***
jmp ??1CPropertyPage@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 170h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_10BCBFC +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CButton@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10BCCDF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 0F1h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 14Eh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 0  +
push 143h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
test eax eax +
jz loc_10BCD58  +
mov eax [eax] +
jmp loc_10BCD5A  +
xor eax eax +
xor ecx ecx +
test eax eax +
setnz cl  +
mov al cl +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCconsoleprop_0  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 8000FFFFh  +
push offset dword_10F54B0  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10BCDDA  +
lea ecx [ebp-1Ch] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
cmp dword_10F55CC 0 +
jnz loc_10BCDF1  +
lea eax [esi+8Ch] +
push eax  +
mov ecx esi +
call ?AddPage@CPropertySheet@@QAEXPAVCPropertyPage@@@Z  +
lea eax [esi+294h] +
push eax  +
mov ecx esi +
call ?AddPage@CPropertySheet@@QAEXPAVCPropertyPage@@@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1005064 +
lea ecx [esi+294h] +
mov dword ptr [ebp-4] 1 +
mov dword ptr [ecx] offset off_1004F0C +
call ??1CPropertyPage@@UAE@XZ  +
lea ecx [esi+8Ch] +
mov byte ptr [ebp-4] 0 +
call sub_10BCA45  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CPropertySheet@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov edi ecx +
lea eax [ebp-10h] +
xor esi esi +
push eax  +
mov [ebp-10h] esi +
call sub_102F58E  +
mov [ebp-4] esi +
push esi  +
mov esi offset dword_10F54B0 +
mov ecx esi +
call sub_10705E5  +
mov ecx edi +
call ?DoModal@CPropertySheet@@UAEHXZ  +
push 1  +
mov ecx esi +
mov edi eax +
call sub_10705E5  +
push dword ptr [ebp-10h]  +
call sub_102F464  +
mov eax edi +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
xor ebx ebx +
push ebx  +
push 9Eh  +
call ??0CPropertyPage@@QAE@II@Z  +
lea ecx [esi+90h] +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_1004D6C +
call sub_10BCBDE  +
lea ecx [esi+0D0h] +
mov byte ptr [ebp-4] 1 +
call sub_10BCBDE  +
lea ecx [esi+110h] +
mov byte ptr [ebp-4] 2 +
call sub_1030614  +
lea ecx [esi+150h] +
mov byte ptr [ebp-4] 3 +
call sub_10AA040  +
lea ecx [esi+190h] +
mov byte ptr [ebp-4] 4 +
call sub_1030614  +
lea edi [esi+1D8h] +
mov ecx edi +
mov byte ptr [ebp-4] 5 +
call ??0CString@@QAE@XZ  +
mov [esi+1E4h] ebx +
lea ecx [esi+1E8h] +
mov byte ptr [ebp-4] 7 +
call ??0CString@@QAE@XZ  +
mov eax dword_10F5304 +
push offset ??1CString@@QAE@XZ  +
push offset ??0CString@@QAE@XZ  +
push 4  +
mov [esi+1F4h] eax +
push 4  +
lea eax [esi+1F8h] +
push eax  +
mov byte ptr [ebp-4] 8 +
call sub_100C8DF  +
mov byte ptr [ebp-4] 9 +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
mov ecx [esi+1F4h] +
mov [esi+1E0h] eax +
lea eax [ebp-10h] +
push eax  +
mov [esi+1F0h] bl +
mov [esi+1F1h] bl +
call sub_100C227  +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 0Ah +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 9 +
call ??1CString@@QAE@XZ  +
mov eax [esi+1F4h] +
mov ecx [eax+104h] +
add eax 10Ch +
mov [esi+1D0h] ecx +
mov ecx [eax] +
shr ecx 2 +
and ecx 1 +
mov [esi+1D4h] ecx +
mov eax [eax] +
shr eax 3 +
not al  +
and eax 1 +
mov [esi+1DCh] eax +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10BCA45  +
test byte ptr [ebp+8] 1 +
jz loc_10BD068  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
lea eax [esi+90h] +
push eax  +
push 400h  +
push edi  +
call ?DDX_Control@@YGXPAVCDataExchange@@HAAVCWnd@@@Z  +
lea eax [esi+0D0h] +
push eax  +
push 405h  +
push edi  +
call ?DDX_Control@@YGXPAVCDataExchange@@HAAVCWnd@@@Z  +
lea eax [esi+110h] +
push eax  +
push 3FFh  +
push edi  +
call ?DDX_Control@@YGXPAVCDataExchange@@HAAVCWnd@@@Z  +
lea eax [esi+150h] +
push eax  +
mov ebx 403h +
push ebx  +
push edi  +
call ?DDX_Control@@YGXPAVCDataExchange@@HAAVCWnd@@@Z  +
lea eax [esi+1D0h] +
push eax  +
push 3FEh  +
push edi  +
call ?DDX_CBIndex@@YGXPAVCDataExchange@@HAAH@Z  +
lea eax [esi+1D4h] +
push eax  +
push 400h  +
push edi  +
call ?DDX_Check@@YGXPAVCDataExchange@@HAAH@Z  +
lea eax [esi+1D8h] +
push eax  +
push ebx  +
push edi  +
call ?DDX_Text@@YGXPAVCDataExchange@@HAAVCString@@@Z  +
add esi 1DCh +
push esi  +
push 405h  +
push edi  +
call ?DDX_Check@@YGXPAVCDataExchange@@HAAH@Z  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+1F4h] +
push edi  +
push dword ptr [esi+1D0h]  +
call sub_107829B  +
push dword ptr [esi+1D4h]  +
mov ecx [esi+1F4h] +
call sub_10BC985  +
push dword ptr [esi+1DCh]  +
mov ecx [esi+1F4h] +
call sub_10BC9A5  +
lea edi [esi+1F1h] +
cmp byte ptr [edi] 0 +
jz loc_10BD17C  +
push dword ptr [esi+1ECh]  +
mov ecx [esi+1F4h] +
push dword ptr [esi+1E8h]  +
call sub_107A846  +
mov byte ptr [edi] 0 +
cmp byte ptr [esi+1F0h] 0 +
jz loc_10BD1A9  +
push ecx  +
lea eax [esi+1D8h] +
mov ecx esp +
mov [ebp+var_4] esp +
push eax  +
call ??0CString@@QAE@ABV0@@Z  +
mov ecx [esi+1F4h] +
call sub_107A5E3  +
mov byte ptr [esi+1F0h] 0 +
mov ecx esi +
call ?OnOK@CPropertyPage@@UAEXXZ  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax [ecx+1D0h] +
push dword ptr [ecx+eax*4+1F8h]  +
add ecx 110h +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+1D0h] 0 +
jnz loc_10BD219  +
push edi  +
lea edi [esi+90h] +
push 0  +
mov ecx edi +
call ?EnableWindow@CWnd@@QAEHH@Z  +
push 0  +
mov ecx edi +
call sub_10BCCEB  +
add esi 0D0h +
push 0  +
mov ecx esi +
call ?EnableWindow@CWnd@@QAEHH@Z  +
push 1  +
mov ecx esi +
call sub_10BCCEB  +
pop edi  +
pop esi  +
retn   +
push 1  +
lea ecx [esi+90h] +
call ?EnableWindow@CWnd@@QAEHH@Z  +
push 1  +
lea ecx [esi+0D0h] +
call ?EnableWindow@CWnd@@QAEHH@Z  +
pop esi  +
retn   +
***
push 4  +
mov eax offset dword_10E0D20 +
call sub_1001F95  +
push 90h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10BD264  +
call sub_10BCB8D  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1004F0C +
call ??1CPropertyPage@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10BD28F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ??0CPropertySheet@@QAE@IPAVCWnd@@I@Z  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+8Ch] +
mov dword ptr [esi] offset off_1005064 +
call sub_10BCF0A  +
lea ecx [esi+294h] +
mov byte ptr [ebp-4] 1 +
call sub_10BCB8D  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_10BCD6B  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10BCE63  +
test byte ptr [ebp+8] 1 +
jz loc_10BD312  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 4  +
mov eax offset dword_10E0D20 +
call sub_1001F95  +
push 208h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10BD348  +
call sub_10BCF0A  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
push 1  +
mov esi ecx +
call ?SetModified@CPropertyPage@@QAEXH@Z  +
push 1  +
mov ecx esi +
call ?UpdateData@CWnd@@QAEHH@Z  +
mov ecx esi +
call sub_10BD1B9  +
mov ecx esi +
pop esi  +
jmp sub_10BD1D7  +
***
call sub_1001F95  +
mov esi ecx +
call ?OnInitDialog@CDialog@@UAEHXZ  +
lea ecx [ebp-10h] +
call ??0CString@@QAE@XZ  +
xor edi edi +
push 3FEh  +
mov ecx esi +
mov [ebp-4] edi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
mov ebx eax +
lea eax [edi+3401h] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_101220E  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_10BCD2D  +
inc edi  +
cmp edi 4 +
jl loc_10BD3AA  +
push dword ptr [esi+1D0h]  +
mov ecx ebx +
call sub_10BCD0C  +
xor ebx ebx +
lea edi [esi+1F8h] +
lea eax [ebx+3405h] +
push eax  +
push edi  +
call sub_101220E  +
inc ebx  +
add edi 4 +
cmp ebx 4 +
jb loc_10BD3DF  +
mov ecx esi +
call sub_10BD1B9  +
mov ecx esi +
call sub_10BD1D7  +
mov ecx [esi+1F4h] +
lea edi [esi+1ECh] +
push edi  +
lea ebx [esi+1E8h] +
push ebx  +
push 1  +
call sub_1021952  +
push esi  +
lea ecx [esi+190h] +
push 404h  +
mov [ebp-14h] eax +
call ?SubclassDlgItem@CWnd@@QAEHIPAV1@@Z  +
cmp dword ptr [ebp-14h] 0 +
jnz loc_10BD469  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+8] +
mov [ebp-14h] eax +
mov eax 104h +
push eax  +
push eax  +
mov ecx ebx +
call ?GetBuffer@CString@@QAEPAGH@Z  +
push eax  +
push dword ptr [ebp-14h]  +
call ds:GetModuleFileNameW  +
push 0FFFFFFFFh  +
mov ecx ebx +
call ?ReleaseBuffer@CString@@QAEXH@Z  +
and dword ptr [edi] 0 +
jmp loc_10BD477  +
push dword ptr [ebp-14h]  +
lea ecx [esi+190h] +
call sub_10BCBBD  +
mov ecx [esi+1F4h] +
lea eax [ebp-14h] +
push eax  +
call sub_100C227  +
push dword ptr [eax]  +
lea ecx [esi+150h] +
mov byte ptr [ebp-4] 1 +
call ?SetWindowTextW@CWnd@@QAEXPBG@Z  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 0 +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
mov byte ptr [esi+1F0h] 0 +
call ??1CString@@QAE@XZ  +
xor eax eax +
inc eax  +
call sub_1001FCF  +
retn   +
***
push 220h  +
mov eax offset dword_10E1340 +
call sub_100C4D0  +
mov esi ecx +
push 0  +
lea ecx [ebp-22Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCconsoleprop_1  +
lea ecx [ebp-22Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [esi+1ECh] +
lea edi [esi+1E8h] +
push dword ptr [edi]  +
mov [ebp-21Ch] eax +
mov ebx 104h +
push ebx  +
lea eax [ebp-218h] +
push eax  +
call sub_100A593  +
push eax  +
lea ecx [ebp-22Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-22Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10BD5F6  +
lea eax [ebp-21Ch] +
push eax  +
push ebx  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [esi+20h]  +
call ds:?MMC_PickIconDlg@@YGHPAUHWND__@@PAGIPAH@Z  +
test eax eax +
jz loc_10BD5F6  +
mov eax [ebp-21Ch] +
cmp eax [esi+1ECh] +
jnz loc_10BD580  +
push dword ptr [edi]  +
lea eax [ebp-218h] +
push eax  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_10BD5F6  +
push dword ptr [ebp-21Ch]  +
lea eax [ebp-218h] +
push eax  +
push dword ptr [esi+1E0h]  +
lea ebx [esi+1E4h] +
call ExtractIconW  +
push eax  +
mov ecx ebx +
call sub_103E9BF  +
push 0  +
mov ecx ebx +
call sub_10BCD4E  +
test al al +
jz loc_10BD5F6  +
lea eax [ebp-218h] +
push eax  +
mov ecx edi +
mov byte ptr [esi+1F1h] 1 +
call ??4CString@@QAEABV0@PBG@Z  +
mov eax [ebp-21Ch] +
mov [esi+1ECh] eax +
mov ebx [ebx] +
test ebx ebx +
jz loc_10BD5DF  +
mov ebx [ebx] +
jmp loc_10BD5E1  +
xor ebx ebx +
push ebx  +
lea ecx [esi+190h] +
call sub_10BCBBD  +
push 1  +
mov ecx esi +
call ?SetModified@CPropertyPage@@QAEXH@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-22Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_100C50D  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp [edi+14h] ebx +
jnb loc_10BD669  +
call loc_10C80B1  +
mov eax [edi+14h] +
sub eax ebx +
cmp eax [ebp+arg_8] +
jnb loc_10BD676  +
mov [ebp+arg_8] eax +
or eax 0FFFFFFFFh +
sub eax [esi+14h] +
cmp eax [ebp+arg_8] +
ja loc_10BD686  +
call loc_10C8063  +
cmp [ebp+arg_8] 0 +
jbe loc_10BD6E1  +
mov eax [esi+14h] +
add eax [ebp+arg_8] +
push 0  +
push eax  +
mov ecx esi +
mov [ebp+arg_0] eax +
call sub_100CC42  +
test al al +
jz loc_10BD6E1  +
cmp dword ptr [edi+18h] 8 +
jb loc_10BD6AE  +
mov edi [edi+4] +
jmp loc_10BD6B1  +
add edi 4 +
mov eax [esi+18h] +
cmp eax 8 +
jb loc_10BD6BE  +
mov edx [esi+4] +
jmp loc_10BD6C1  +
lea edx [esi+4] +
push [ebp+arg_8]  +
mov ecx [esi+14h] +
lea edi [edi+ebx*2] +
push edi  +
sub eax ecx +
push eax  +
lea eax [edx+ecx*2] +
push eax  +
call sub_100CE93  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100CD14  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
and ds:byte_10E13A4[eax] bh +
call sub_1001F95  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-2Ch] +
call sub_100CDE2  +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
push 1  +
mov ecx eax +
call sub_102C7BE  +
mov ecx [ebp+8] +
push eax  +
call sub_100CDE2  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100CD3C  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-2Ch] +
call sub_100CDE2  +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
mov ecx eax +
call sub_102E1E3  +
mov ecx [ebp+8] +
push eax  +
call sub_100CDE2  +
push 0  +
push 1  +
lea ecx [ebp-2Ch] +
call sub_100CD3C  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn   +
***
call sub_100C4D0  +
mov edi [ebp+8] +
xor ebx ebx +
mov [ebp-2E0h] ecx +
push ebx  +
lea ecx [ebp-2DCh] +
mov [ebp-2B4h] edi +
mov [ebp-2BCh] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCdiskcleanuppa  +
lea ecx [ebp-2DCh] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [ebp-299h] +
call sub_102BBF1  +
push ebx  +
lea ecx [ebp-48h] +
mov dword ptr [ebp-30h] 7 +
call sub_100CD14  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-2CCh] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_102EB09  +
push eax  +
lea ecx [ebp-2DCh] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2CCh] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2DCh] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10BD878  +
lea eax [ebp-2DCh] +
push eax  +
mov ecx edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-2BCh] esi +
push ebx  +
push esi  +
lea ecx [ebp-48h] +
call sub_100CD3C  +
lea ecx [ebp-299h] +
mov byte ptr [ebp-4] 1 +
call sub_1020056  +
lea ecx [ebp-2DCh] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
jmp loc_10BDE31  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_100CDE2  +
push offset a_  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call sub_102E1E3  +
push 250h  +
lea eax [ebp-298h] +
push ebx  +
push eax  +
call memset  +
mov eax [ebp-28h] +
add esp 0Ch +
cmp dword ptr [ebp-14h] 8 +
jnb loc_10BD8B6  +
lea eax [ebp-28h] +
lea ecx [ebp-298h] +
push ecx  +
push eax  +
call ds:FindFirstFileW  +
mov [ebp-2A8h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10BD8F9  +
lea ecx [ebp-2DCh] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
push eax  +
mov ecx edi +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
push ebx  +
push esi  +
lea ecx [ebp-2Ch] +
mov [ebp-2BCh] esi +
call sub_100CD3C  +
jmp loc_10BD848  +
mov [ebp-2C4h] ebx +
xor eax eax +
lea edi [ebp-2C0h] +
stos   +
mov esi [ebp-2C4h] +
test dword ptr [ebp-298h] 10h +
jnz loc_10BD934  +
mov eax [ebp-2C0h] +
add eax [ebp-27Ch] +
add esi [ebp-278h] +
adc eax ebx +
mov [ebp-2C0h] eax +
lea eax [ebp-298h] +
push eax  +
push dword ptr [ebp-2A8h]  +
call ds:FindNextFileW  +
test eax eax +
setnz al  +
test al al +
jnz loc_10BD90E  +
push dword ptr [ebp-2A8h]  +
call ds:FindClose  +
mov eax [ebp-2C0h] +
mov ecx [ebp-2C0h] +
shr eax 8 +
mov [ebp-2A0h] eax +
mov eax esi +
shrd eax ecx +
shr ecx 1Eh +
mov edx ecx +
mov ecx eax +
mov eax 3FFh +
and ecx eax +
mov [ebp-2B8h] ecx +
mov ecx esi +
and ecx eax +
mov edi esi +
mov ebx esi +
mov [ebp-2A8h] ecx +
shr edi 14h +
shr ebx 0Ah +
lea ecx [ebp-2ACh] +
and edi eax +
and ebx eax +
call ??0CString@@QAE@XZ  +
or esi [ebp-2C0h] +
mov byte ptr [ebp-4] 6 +
mov byte ptr [ebp-299h] 1 +
jnz loc_10BD9C8  +
mov byte ptr [ebp-299h] 0 +
cmp dword ptr [ebp-2A0h] 0 +
ja loc_10BDAFB  +
mov eax 3E7h +
cmp [ebp-2B8h] eax +
ja loc_10BDAFB  +
cmp dword ptr [ebp-2B8h] 0 +
ja loc_10BDAC0  +
cmp edi eax +
ja loc_10BDAC0  +
test edi edi +
ja loc_10BDA83  +
cmp ebx eax +
ja loc_10BDA83  +
test ebx ebx +
ja loc_10BDA43  +
cmp [ebp-2A8h] eax +
ja loc_10BDA43  +
push 3471h  +
lea eax [ebp-2ACh] +
push eax  +
call sub_101220E  +
fild  dword ptr [ebp-2A8h] +
mov eax [ebp-2A8h] +
test eax eax +
jge loc_10BDB40  +
fadd  ds:dbl_106D130 +
jmp loc_10BDB40  +
push 3470h  +
lea eax [ebp-2ACh] +
push eax  +
call sub_101220E  +
fild  dword ptr [ebp-2A8h] +
mov eax [ebp-2A8h] +
test eax eax +
jge loc_10BDA6A  +
fadd  ds:dbl_106D130 +
fmul  ds:dbl_10BDE60 +
mov [ebp-2A0h] ebx +
fild  dword ptr [ebp-2A0h] +
test ebx ebx +
jmp loc_10BDB36  +
push 346Fh  +
lea eax [ebp-2ACh] +
push eax  +
call sub_101220E  +
mov [ebp-2A0h] ebx +
fild  dword ptr [ebp-2A0h] +
test ebx ebx +
jge loc_10BDAAA  +
fadd  ds:dbl_106D130 +
fmul  ds:dbl_10BDE60 +
mov [ebp-2A0h] edi +
fild  dword ptr [ebp-2A0h] +
test edi edi +
jmp loc_10BDB36  +
push 346Eh  +
lea eax [ebp-2ACh] +
push eax  +
call sub_101220E  +
mov [ebp-2A0h] edi +
fild  dword ptr [ebp-2A0h] +
test edi edi +
jge loc_10BDAE7  +
fadd  ds:dbl_106D130 +
fmul  ds:dbl_10BDE60 +
mov eax [ebp-2B8h] +
fild  dword ptr [ebp-2B8h] +
jmp loc_10BDB34  +
push 346Dh  +
lea eax [ebp-2ACh] +
push eax  +
call sub_101220E  +
fild  dword ptr [ebp-2B8h] +
mov eax [ebp-2B8h] +
test eax eax +
jge loc_10BDB22  +
fadd  ds:dbl_106D130 +
fmul  ds:dbl_10BDE60 +
mov eax [ebp-2A0h] +
fild  dword ptr [ebp-2A0h] +
test eax eax +
jge loc_10BDB3E  +
fadd  ds:dbl_106D130 +
faddp st(1) st +
lea ecx [ebp-2A4h] +
fstp  qword ptr [ebp-2C4h] +
call ??0CString@@QAE@XZ  +
fld  qword ptr [ebp-2C4h] +
push ecx  +
push ecx  +
fstp  qword ptr [esp+0] +
lea eax [ebp-2A4h] +
push offset a_2f  +
push eax  +
mov byte ptr [ebp-4] 7 +
call ?Format@CString@@QAAXPBGZZ  +
add esp 10h +
push 1  +
lea eax [ebp-2A8h] +
push eax  +
lea ecx [ebp-2A4h] +
call ?Right@CString@@QBE?AV1@H@Z  +
mov esi offset dword_10BDE50 +
jmp loc_10BDBDF  +
mov eax [ebp-2A4h] +
mov eax [eax-8] +
dec eax  +
push eax  +
lea eax [ebp-2A0h] +
push eax  +
lea ecx [ebp-2A4h] +
call ?Left@CString@@QBE?AV1@H@Z  +
push eax  +
lea ecx [ebp-2A4h] +
mov byte ptr [ebp-4] 8 +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-2A0h] +
mov byte ptr [ebp-4] 7 +
call ??1CString@@QAE@XZ  +
push 1  +
lea eax [ebp-2A8h] +
push eax  +
lea ecx [ebp-2A4h] +
call ?Right@CString@@QBE?AV1@H@Z  +
push esi  +
mov ecx eax +
call sub_100C7C5  +
mov ebx eax +
neg ebx  +
sbb bl bl +
lea ecx [ebp-2A8h] +
inc bl  +
call ??1CString@@QAE@XZ  +
test bl bl +
jnz loc_10BDB8F  +
lea ecx [ebp-2B0h] +
call ??0CString@@QAE@XZ  +
fldz   +
push ecx  +
push ecx  +
fstp  qword ptr [esp+0] +
lea eax [ebp-2B0h] +
push offset a_1f  +
push eax  +
mov byte ptr [ebp-4] 9 +
call ?Format@CString@@QAAXPBGZZ  +
add esp 10h +
push 1  +
push 1  +
lea eax [ebp-2A0h] +
push eax  +
lea ecx [ebp-2B0h] +
call ?Mid@CString@@QBE?AV1@HH@Z  +
push eax  +
lea ecx [ebp-2B0h] +
mov byte ptr [ebp-4] 0Ah +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-2A0h] +
mov byte ptr [ebp-4] 9 +
call ??1CString@@QAE@XZ  +
push 1  +
lea eax [ebp-2A0h] +
push eax  +
lea ecx [ebp-2A4h] +
call ?Right@CString@@QBE?AV1@H@Z  +
push dword ptr [ebp-2B0h]  +
mov ecx eax +
call sub_100C7C5  +
mov ebx eax +
neg ebx  +
sbb bl bl +
lea ecx [ebp-2A0h] +
inc bl  +
call ??1CString@@QAE@XZ  +
test bl bl +
jz loc_10BDCD1  +
mov eax [ebp-2A4h] +
mov eax [eax-8] +
dec eax  +
push eax  +
lea eax [ebp-2A0h] +
push eax  +
lea ecx [ebp-2A4h] +
call ?Left@CString@@QBE?AV1@H@Z  +
push eax  +
lea ecx [ebp-2A4h] +
mov byte ptr [ebp-4] 0Bh +
call ??4CString@@QAEABV0@ABV0@@Z  +
lea ecx [ebp-2A0h] +
mov byte ptr [ebp-4] 9 +
call ??1CString@@QAE@XZ  +
push dword ptr [ebp-2A4h]  +
lea ecx [ebp-2ACh] +
push offset a1  +
call MFC42u_6868  +
push dword ptr [ebp-2ACh]  +
mov edi [ebp-2E0h] +
push 409h  +
mov ecx edi +
call ?SetDlgItemTextW@CWnd@@QAEXHPBG@Z  +
push 407h  +
mov ecx edi +
call ?GetDlgItem@CWnd@@QBEPAV1@H@Z  +
mov esi eax +
push 8000FFFFh  +
push esi  +
lea eax [ebp-2CCh] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2DCh] +
mov byte ptr [ebp-4] 0Ch +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2CCh] +
mov byte ptr [ebp-4] 9 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2DCh] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10BDDAD  +
movzx eax byte ptr [ebp-299h] +
push eax  +
mov ecx esi +
call ?EnableWindow@CWnd@@QAEHH@Z  +
call ds:GetFocus  +
test eax eax +
jnz loc_10BDDAD  +
push dword ptr [edi+20h]  +
mov esi ds:GetParent +
call esi  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
test eax eax +
jz loc_10BDDAD  +
push dword ptr [edi+20h]  +
call esi  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
mov ecx eax +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
push dword ptr [edi+20h]  +
call esi  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push 0  +
push 1  +
push 401h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
mov ecx [ebp-2B4h] +
lea eax [ebp-2DCh] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
xor esi esi +
inc esi  +
lea ecx [ebp-2B0h] +
mov [ebp-2BCh] esi +
mov byte ptr [ebp-4] 7 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-2A4h] +
mov byte ptr [ebp-4] 6 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-2ACh] +
mov byte ptr [ebp-4] 5 +
call ??1CString@@QAE@XZ  +
push 0  +
push esi  +
lea ecx [ebp-2Ch] +
call sub_100CD3C  +
push 0  +
push esi  +
lea ecx [ebp-48h] +
call sub_100CD3C  +
lea ecx [ebp-299h] +
mov byte ptr [ebp-4] 1 +
call sub_1020056  +
lea ecx [ebp-2DCh] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-2B4h] +
call sub_100C50D  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
call ?OnInitDialog@CDialog@@UAEHXZ  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
call sub_10BD789  +
lea ecx [ebp+var_10] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn   +
***
push 304h  +
mov eax offset word_10E154A +
call sub_100C4D0  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-2D0h] +
mov [ebp-2D8h] esi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCdiskcleanup_1  +
lea ecx [ebp-2D0h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ecx [ebp-2C0h] +
call ??0CString@@QAE@XZ  +
lea ecx [ebp-2BCh] +
mov byte ptr [ebp-4] 1 +
call ??0CString@@QAE@XZ  +
push 3472h  +
lea eax [ebp-2C0h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_101220E  +
test eax eax +
jz loc_10BE1AC  +
push 80h  +
lea eax [ebp-2BCh] +
push eax  +
call sub_101220E  +
test eax eax +
jz loc_10BE1AC  +
push 34h  +
push dword ptr [ebp-2BCh]  +
push dword ptr [ebp-2C0h]  +
push dword ptr [esi+20h]  +
call ds:MessageBoxW  +
cmp eax 6 +
jnz loc_10BE1BD  +
lea ecx [ebp-2B5h] +
call sub_102BBF1  +
push ebx  +
lea ecx [ebp-48h] +
mov dword ptr [ebp-30h] 7 +
call sub_100CD14  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_102EB09  +
push eax  +
lea ecx [ebp-2D0h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 4 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2D0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10BE011  +
push ebx  +
push 1  +
lea ecx [ebp-48h] +
call sub_100CD3C  +
lea ecx [ebp-2B5h] +
mov byte ptr [ebp-4] 2 +
call sub_1020056  +
jmp loc_10BE1BD  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-64h] +
call sub_100CDE2  +
push offset a_  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 6 +
call sub_102E1E3  +
push 250h  +
lea eax [ebp-2B4h] +
push ebx  +
push eax  +
call memset  +
mov eax [ebp-60h] +
add esp 0Ch +
cmp dword ptr [ebp-4Ch] 8 +
jnb loc_10BE04F  +
lea eax [ebp-60h] +
lea ecx [ebp-2B4h] +
push ecx  +
push eax  +
call ds:FindFirstFileW  +
mov [ebp-2D4h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10BE084  +
lea ecx [ebp-2D0h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
push ebx  +
push 1  +
lea ecx [ebp-64h] +
call sub_100CD3C  +
jmp loc_10BDFF2  +
***
push 5Ch  +
lea eax [ebp-48h] +
push eax  +
lea eax [ebp-310h] +
push eax  +
call near ptr dword_10BD6EC+3  +
lea ecx [ebp-288h] +
push ecx  +
push eax  +
lea eax [ebp-2F4h] +
push eax  +
mov byte ptr [ebp-4] 7 +
call near ptr dword_10BD738+5  +
add esp 18h +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 8 +
call sub_100CDE2  +
push ebx  +
push 1  +
lea ecx [ebp-2F4h] +
call sub_100CD3C  +
push ebx  +
push 1  +
lea ecx [ebp-310h] +
mov byte ptr [ebp-4] 0Bh +
call sub_100CD3C  +
mov esi [ebp-2B4h] +
lea eax [ebp-2B4h] +
push eax  +
push dword ptr [ebp-2D4h]  +
call ds:FindNextFileW  +
test eax eax +
setnz byte ptr [ebp-2B5h]  +
test esi 10h +
jnz loc_10BE133  +
cmp dword ptr [ebp-14h] 8 +
mov eax [ebp-28h] +
jnb loc_10BE114  +
lea eax [ebp-28h] +
push eax  +
call ds:DeleteFileW  +
test eax eax +
jnz loc_10BE133  +
lea ecx [ebp-2D0h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
mov ecx eax +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
push ebx  +
push 1  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 6 +
call sub_100CD3C  +
cmp [ebp-2B5h] bl +
jnz loc_10BE084  +
push dword ptr [ebp-2D4h]  +
call ds:FindClose  +
mov ecx [ebp-2D8h] +
lea eax [ebp-20h] +
push eax  +
call sub_10BD789  +
push eax  +
lea ecx [ebp-2D0h] +
mov byte ptr [ebp-4] 0Ch +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 6 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2D0h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10BE074  +
lea ecx [ebp-2D0h] +
call ds:?TraceAndClear@SC@mmcerror@@QAEXXZ  +
jmp loc_10BE074  +
***
push 8000FFFFh  +
lea ecx [ebp-2D0h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2BCh] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-2C0h] +
mov [ebp-4] bl +
call ??1CString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2D0h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_100C50D  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-34h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCeventdispat_0  +
lea ecx [ebp-34h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [esi] 0 +
jnz loc_10BE299  +
push ebx  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_10BE47A  +
lea edi [esi+4] +
mov eax [edi] +
push 80004002h  +
push eax  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10BE2E5  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10BE291  +
and dword ptr [ebp-10h] 0 +
mov ecx edi +
mov byte ptr [ebp-4] 3 +
call sub_100A5CF  +
mov edi [eax] +
lea ecx [ebp-10h] +
mov [ebp-1Ch] eax +
add edi 10h +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-1Ch]  +
call dword ptr [edi]  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10BE339  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_10BE46A  +
push 8000FFFFh  +
push dword ptr [ebp-10h]  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10BE324  +
and dword ptr [ebp-18h] 0 +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 5 +
call sub_100A5CF  +
mov edi [eax] +
lea ecx [ebp-18h] +
mov [ebp+0Ch] eax +
add edi 1Ch +
call sub_100A5E6  +
push eax  +
push dword ptr [ebp+0Ch]  +
call dword ptr [edi]  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10BE449  +
push 8000FFFFh  +
push dword ptr [ebp-18h]  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10BE449  +
lea ecx [ebp-18h] +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10BE449  +
xor eax eax +
lea edi [ebp-24h] +
stos   +
lea ecx [ebp-18h] +
stos   +
call sub_100A5CF  +
mov ecx [eax] +
push 0  +
lea edx [ebp-24h] +
push edx  +
push ebx  +
push eax  +
call dword ptr [ecx+0Ch]  +
push eax  +
lea ecx [ebp-34h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10BE449  +
mov eax [ebp-24h] +
test eax eax +
jz loc_10BE449  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-18h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_10BE46A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
test eax eax +
jz loc_10BE47A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_107243D  +
test eax eax +
jge loc_10BE52E  +
cmp eax 80004002h +
jz loc_10BE52E  +
push eax  +
call sub_10C7F1B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset off_10BE540 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CProgressCtrl@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10BE577  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
add ecx 8 +
push ecx  +
call ds:EnterCriticalSection  +
xor eax eax +
inc eax  +
retn 4  +
***
add ecx 8 +
push ecx  +
call ds:LeaveCriticalSection  +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+wParam] +
mov edx [ebp+lParam] +
cmp [ecx+40h] eax +
jnz loc_10BE5C0  +
cmp [ecx+44h] edx +
jz loc_10BE5D6  +
push edx  +
push eax  +
push 406h  +
push dword ptr [ecx+20h]  +
mov [ecx+40h] eax +
mov [ecx+44h] edx +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+44h] +
sub eax [esi+40h] +
neg eax  +
sbb eax eax +
and eax 5 +
push eax  +
call ?ShowWindow@CWnd@@QAEHH@Z  +
push [ebp+wParam]  +
mov ecx esi +
call sub_10537A2  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CPtrList@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10BE628  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101AAB8  +
test byte ptr [ebp+8] 1 +
jz loc_10BE64E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ?Default@CWnd@@IAEJXZ  +
cmp dword ptr [ebp+8] 2Ah +
jnz loc_10BE674  +
mov ecx esi +
call sub_1033BE2  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101BAF1  +
test byte ptr [ebp+8] 1 +
jz loc_10BE698  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 124h  +
mov eax offset word_10E194E +
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-20h] 0 +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCstandardtoo_7  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [esi+18h] +
test ecx ecx +
jnz loc_10BE6FC  +
push 8000FFFFh  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10BEA03  +
***
mov eax [ebp+18h] +
add eax 0FFFFCBBBh +
cmp eax 33h +
ja sub_10BE9D9  +
movzx eax ds:byte_10BEA66[eax] +
jmp ds:off_10BEA1E[eax*4]  +
push 2  +
push dword ptr [ebp+14h]  +
lea eax [ebp-120h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1087CD3  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-120h] +
***
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10BE9F6  +
***
push 3  +
push dword ptr [ebp+14h]  +
lea eax [ebp-0C0h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1087CD3  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-0C0h] +
jmp loc_10BE746  +
***
push 4  +
push dword ptr [ebp+14h]  +
lea eax [ebp-60h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1087CD3  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 4 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-60h] +
jmp loc_10BE746  +
***
push 5  +
push dword ptr [ebp+14h]  +
lea eax [ebp-100h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1087CD3  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-100h] +
jmp loc_10BE746  +
***
push 9  +
push dword ptr [ebp+14h]  +
lea eax [ebp-80h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1087CD3  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 6 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-80h] +
jmp loc_10BE746  +
***
push 6  +
push dword ptr [ebp+14h]  +
lea eax [ebp-0E0h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1087CD3  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 7 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-0E0h] +
jmp loc_10BE746  +
***
mov esi ecx +
lea ecx [esi+44h] +
mov eax [ecx] +
lea edx [ebp-30h] +
push edx  +
call dword ptr [eax+1Ch]  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 9 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
jmp loc_10BE746  +
***
lea eax [ebp-40h] +
push eax  +
call sub_10833C1  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 0Ah +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
jmp loc_10BE746  +
***
mov esi ecx +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
mov esi ecx +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea eax [ebp-1Ch] +
push eax  +
push offset aUnknownStandar  +
call ds:?TraceError@@YGXPBGABVSC@mmcerror@@@Z  +
***
mov ecx [ebp+8] +
lea eax [ebp-1Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-1Ch] +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+var_4] 0 +
push 3455h  +
push [ebp+arg_0]  +
call sub_1025339  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+var_4] 0 +
push 344Bh  +
push [ebp+arg_0]  +
call sub_1025339  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
mov [ebp+var_8] eax +
mov eax [ebp+arg_C] +
push 2  +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_105144B  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 10h  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
lea ecx [eax+4] +
push ecx  +
lea ecx [eax+24h] +
push ecx  +
add eax 20h +
push eax  +
push [ebp+arg_0]  +
call sub_10CAF1D  +
push eax  +
call sub_10CAF1D  +
push eax  +
call sub_10CB161  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+38h] +
mov edx [eax+34h] +
sub edx ecx +
cmp [ebp+0Ch] edx +
jnb loc_10BEC33  +
mov edx [ebp+0Ch] +
add ecx edx +
mov [eax+38h] ecx +
xor eax eax +
cmp edx [ebp+0Ch] +
setnz al  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
and dword ptr [eax+38h] 0 +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_10BEC6A  +
xor eax eax +
retn   +
mov eax [ecx+8] +
sub eax edx +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_10BEC87  +
mov eax ecx +
mov ecx [eax+8] +
cmp byte ptr [ecx+59h] 0 +
jz loc_10BEC85  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_10BECA5  +
mov eax ecx +
mov ecx [eax] +
cmp byte ptr [ecx+59h] 0 +
jz loc_10BECA3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp byte ptr [esi+59h] 0 +
jnz loc_10BECD2  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_10BECE6  +
mov [ecx+4] eax +
jmp loc_10BECF5  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_10BECF3  +
mov [ecx+8] eax +
jmp loc_10BECF5  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_10BED0E  +
xor eax eax +
retn   +
mov eax [ecx+0Ch] +
sub eax edx +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+59h] dl +
jz loc_10BED32  +
mov eax [eax+8] +
jmp loc_10BED58  +
mov ecx [eax] +
cmp [ecx+59h] dl +
jnz loc_10BED49  +
push ecx  +
call sub_10BEC7B  +
jmp loc_10BED58  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_10BED51  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+59h] dl +
jz loc_10BED41  +
mov ecx [esi] +
cmp [ecx+59h] dl +
jnz loc_10BED5A  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov esi ecx +
call ??0exception@@QAE@ABQBD@Z  +
mov dword ptr [esi] offset off_106D168 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_106D168 +
jmp ??1exception@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_106D168 +
call ??1exception@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10BEDB4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
lea edi [esi+4] +
push edi  +
push esi  +
push [ebp+arg_0]  +
call sub_10CAF1D  +
push eax  +
call sub_10CAF1D  +
mov eax [esi] +
cmp eax [edi] +
pop edi  +
pop esi  +
jbe loc_10BEDEF  +
push 80004005h  +
call sub_10C7F1B  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+59h] 0 +
jnz loc_10BEE17  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_10BEE2B  +
mov [ecx+4] eax +
jmp loc_10BEE39  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_10BEE36  +
mov [ecx] eax +
jmp loc_10BEE39  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push esi  +
mov esi [eax+4] +
push edi  +
mov edi eax +
jmp loc_10BEE71  +
mov ecx [ebp+arg_0] +
lea eax [esi+0Ch] +
push eax  +
call sub_1012B08  +
test al al +
jz loc_10BEE6E  +
mov edi esi +
mov esi [esi] +
jmp loc_10BEE71  +
mov esi [esi+8] +
cmp byte ptr [esi+59h] 0 +
jz loc_10BEE58  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1012454 +
jmp sub_10123F1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1012454 +
call sub_10123F1  +
test byte ptr [ebp+8] 1 +
jz loc_10BEEB4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push 0  +
pop eax  +
jz loc_10BEED7  +
cmp edx 7FFFFFFFh +
jbe loc_10BEEDC  +
mov eax 80070057h +
test eax eax +
jl loc_10BEEF2  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100A53A  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
mov ecx [ebp+arg_4] +
jnz loc_10BEF15  +
push offset rguid  +
call sub_1012593  +
jmp loc_10BEF1D  +
push [ebp+arg_0]  +
call sub_103D5CF  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_10BEF4A  +
push esi  +
mov esi [ebp+arg_8] +
inc dword ptr [esi]  +
lea ecx [ebp+arg_0] +
call sub_102BFD0  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnz loc_10BEF37  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+4] +
mov eax [edx] +
push esi  +
push edi  +
cmp eax edx +
jz loc_10BEF7A  +
mov esi [ecx+1Ch] +
cmp [eax+8] esi +
jb loc_10BEF82  +
mov edi [eax+0Ch] +
cmp edi [ecx+20h] +
ja loc_10BEF82  +
mov eax [eax] +
cmp eax edx +
jnz loc_10BEF67  +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
xor al al +
jmp loc_10BEF7C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_10BEFA7  +
mov ecx [ebp+arg_8] +
inc dword ptr [ecx]  +
mov eax [eax] +
mov [ebp+arg_0] eax +
cmp eax [ebp+arg_4] +
jnz loc_10BEF9B  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
jmp loc_10BEFC2  +
mov edx [eax] +
mov edx [edx] +
mov [eax] edx +
dec ecx  +
test ecx ecx +
jg loc_10BEFBB  +
jge loc_10BEFD4  +
neg ecx  +
dec ecx  +
mov edx [eax] +
mov edx [edx+4] +
mov [eax] edx +
jnz loc_10BEFCA  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+rguid]  +
mov edi offset off_1012454 +
mov [ebp+var_8] edi +
call sub_10127C8  +
mov esi eax +
test esi esi +
jge loc_10BF01E  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF05B  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF05B  +
push esi  +
push offset loc_106D154  +
push 0Bh  +
jmp loc_10BF050  +
push [ebp+var_4]  +
mov eax [ebp+arg_0] +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+44h]  +
mov esi eax +
test esi esi +
jge loc_10BF05B  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF05B  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF05B  +
push esi  +
push offset loc_106D154  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
call sub_10123F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_C]  +
mov edi offset off_1012454 +
mov [ebp+var_8] edi +
call sub_10BEEFB  +
mov esi eax +
test esi esi +
jge loc_10BF0B6  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF0F3  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF0F3  +
push esi  +
push offset loc_106D154  +
push 0Dh  +
jmp loc_10BF0E8  +
push [ebp+var_4]  +
mov eax [ebp+arg_0] +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+44h]  +
mov esi eax +
test esi esi +
jge loc_10BF0F3  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF0F3  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF0F3  +
push esi  +
push offset loc_106D154  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
call sub_10123F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_14]  +
mov edi offset off_1012454 +
mov [ebp+var_8] edi +
call sub_10BEEFB  +
mov esi eax +
test esi esi +
jge loc_10BF14E  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF191  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF191  +
push esi  +
push offset loc_106D154  +
push 12h  +
jmp loc_10BF186  +
push [ebp+var_4]  +
mov eax [ebp+arg_0] +
push [ebp+arg_10]  +
mov ecx [eax] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+4Ch]  +
mov esi eax +
test esi esi +
jge loc_10BF191  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF191  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF191  +
push esi  +
push offset loc_106D154  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
call sub_10123F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_C]  +
mov edi offset off_1012454 +
mov [ebp+var_8] edi +
call sub_10BEEFB  +
mov esi eax +
test esi esi +
jge loc_10BF1EC  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF229  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF229  +
push esi  +
push offset loc_106D154  +
push 16h  +
jmp loc_10BF21E  +
push [ebp+var_4]  +
mov eax [ebp+arg_0] +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+54h]  +
mov esi eax +
test esi esi +
jge loc_10BF229  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF229  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF229  +
push esi  +
push offset loc_106D154  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
call sub_10123F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_8]  +
mov edi offset off_1012454 +
mov [ebp+var_8] edi +
call sub_10BEEFB  +
mov esi eax +
test esi esi +
jge loc_10BF284  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF2BE  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF2BE  +
push esi  +
push offset loc_106D154  +
push 1Ah  +
jmp loc_10BF2B3  +
push [ebp+var_4]  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+5Ch]  +
mov esi eax +
test esi esi +
jge loc_10BF2BE  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF2BE  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF2BE  +
push esi  +
push offset loc_106D154  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
call sub_10123F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+rguid]  +
mov edi offset off_1012454 +
mov [ebp+var_8] edi +
call sub_10127C8  +
mov esi eax +
test esi esi +
jge loc_10BF319  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF350  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF350  +
push esi  +
push offset loc_106D154  +
push 1Dh  +
jmp loc_10BF345  +
mov eax [ebp+arg_0] +
push [ebp+var_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+64h]  +
mov esi eax +
test esi esi +
jge loc_10BF350  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF350  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF350  +
push esi  +
push offset loc_106D154  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
call sub_10123F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
mov edi offset off_1012454 +
mov [ebp+var_8] edi +
call sub_10BEEFB  +
mov esi eax +
test esi esi +
jge loc_10BF3AB  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF3E2  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF3E2  +
push esi  +
push offset loc_106D154  +
push 1Fh  +
jmp loc_10BF3D7  +
mov eax [ebp+arg_0] +
push [ebp+var_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+64h]  +
mov esi eax +
test esi esi +
jge loc_10BF3E2  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF3E2  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF3E2  +
push esi  +
push offset loc_106D154  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
call sub_10123F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+rguid]  +
mov edi offset off_1012454 +
mov [ebp+var_8] edi +
call sub_10127C8  +
mov esi eax +
test esi esi +
jge loc_10BF43D  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF47A  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF47A  +
push esi  +
push offset loc_106D154  +
push 22h  +
jmp loc_10BF46F  +
push [ebp+var_4]  +
mov eax [ebp+arg_0] +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+6Ch]  +
mov esi eax +
test esi esi +
jge loc_10BF47A  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF47A  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF47A  +
push esi  +
push offset loc_106D154  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
call sub_10123F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_C]  +
mov edi offset off_1012454 +
mov [ebp+var_8] edi +
call sub_10BEEFB  +
mov esi eax +
test esi esi +
jge loc_10BF4D5  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF512  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF512  +
push esi  +
push offset loc_106D154  +
push 24h  +
jmp loc_10BF507  +
push [ebp+var_4]  +
mov eax [ebp+arg_0] +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+6Ch]  +
mov esi eax +
test esi esi +
jge loc_10BF512  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF512  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF512  +
push esi  +
push offset loc_106D154  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
call sub_10123F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+rguid]  +
mov edi offset off_1012454 +
mov [ebp+var_8] edi +
call sub_10127C8  +
mov esi eax +
test esi esi +
jge loc_10BF56D  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF5A7  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF5A7  +
push esi  +
push offset loc_106D154  +
push 26h  +
jmp loc_10BF59C  +
push [ebp+var_4]  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+74h]  +
mov esi eax +
test esi esi +
jge loc_10BF5A7  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF5A7  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF5A7  +
push esi  +
push offset loc_106D154  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
call sub_10123F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_8]  +
mov edi offset off_1012454 +
mov [ebp+var_8] edi +
call sub_10BEEFB  +
mov esi eax +
test esi esi +
jge loc_10BF602  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF63C  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF63C  +
push esi  +
push offset loc_106D154  +
push 28h  +
jmp loc_10BF631  +
push [ebp+var_4]  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+74h]  +
mov esi eax +
test esi esi +
jge loc_10BF63C  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10BF63C  +
cmp byte ptr [eax+19h] 2 +
jb loc_10BF63C  +
push esi  +
push offset loc_106D154  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] edi +
call sub_10123F1  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-14h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCstringenumera  +
lea ecx [ebp-14h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+0Ch] ebx +
jbe loc_10BF6AD  +
cmp [ebp+10h] ebx +
jnz loc_10BF6AD  +
push 80070057h  +
lea ecx [ebp-14h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
lea ecx [ebp-14h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
lea ecx [ebp-4] +
mov [ebp-4] ebx +
call sub_100A5E6  +
push eax  +
push 1  +
call ds:CoGetMalloc  +
push eax  +
lea ecx [ebp-14h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-14h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10BF6F2  +
lea ecx [ebp-14h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
mov eax [ebp-4] +
cmp eax ebx +
jz loc_10BF69B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10BF69B  +
***
cmp [ebp+0Ch] ebx +
jbe loc_10BF77C  +
mov edi [ebp+8] +
mov esi [edi+38h] +
lea ecx [edi+24h] +
call sub_10BEC60  +
cmp esi eax +
jnb loc_10BF77C  +
mov eax [edi+28h] +
imul esi esi +
mov esi [esi+eax+14h] +
lea esi [esi+esi+2] +
lea ecx [ebp-4] +
mov [ebp+8] esi +
call sub_100A5CF  +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi [ebp+10h] +
mov [esi+ebx*4] eax +
test eax eax +
jz loc_10BF7A0  +
mov ecx [edi+38h] +
imul ecx ecx +
add ecx [edi+28h] +
cmp dword ptr [ecx+18h] 8 +
jb loc_10BF74B  +
mov ecx [ecx+4] +
jmp loc_10BF74E  +
add ecx 4 +
push ecx  +
push dword ptr [ebp+8]  +
push eax  +
call sub_10BEEC0  +
push eax  +
lea ecx [ebp-14h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-14h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10BF7C5  +
inc dword ptr [edi+38h]  +
dec dword ptr [ebp+0Ch]  +
inc ebx  +
cmp dword ptr [ebp+0Ch] 0 +
ja loc_10BF6FE  +
mov eax [ebp+14h] +
test eax eax +
jz loc_10BF785  +
mov [eax] ebx +
xor eax eax +
cmp [ebp+0Ch] eax +
setnz al  +
jmp loc_10BF7B9  +
lea ecx [ebp-4] +
call sub_100A5CF  +
push dword ptr [esi+ebx*4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
dec ebx  +
jns loc_10BF78F  +
push 8007000Eh  +
lea ecx [ebp-14h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
mov eax [ebp-4] +
test eax eax +
jmp loc_10BF6E8  +
***
lea ecx [ebp-14h] +
jmp loc_10BF7B3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
call sub_10BEE47  +
push [ebp+arg_4]  +
mov ecx edi +
mov esi eax +
call sub_10128CF  +
mov ecx [ebp+arg_0] +
pop edi  +
mov [ecx] eax +
mov [ecx+4] esi +
mov eax ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10BEF26  +
add esp 10h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+4] +
push dword ptr [eax]  +
lea eax [ebp+var_4] +
push eax  +
call sub_100ED24  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
cmp eax [esi+20h] +
jbe loc_10BF880  +
xor al al +
pop esi  +
retn   +
lea eax [esi+4] +
push eax  +
call sub_10BEF51  +
test al al +
jz loc_10BF87C  +
lea eax [esi+10h] +
push eax  +
mov ecx esi +
call sub_10BEF51  +
test al al +
setnz al  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10BEF8B  +
add esp 10h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+var_4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10BEFAE  +
add esp 0Ch +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_8]  +
push edi  +
call sub_10BF8A4  +
mov ebx [ebp+var_4] +
add esp 0Ch +
test ebx ebx +
jle loc_10BF95D  +
mov eax [ebp+arg_C] +
mov eax [eax+20h] +
mov [ebp+var_4] eax +
push esi  +
mov eax ebx +
cdq   +
sub eax edx +
mov esi eax +
sar esi 1 +
lea eax [ebp+arg_C] +
push esi  +
push eax  +
mov [ebp+arg_C] edi +
call sub_10BF8C5  +
mov eax [ebp+arg_C] +
pop ecx  +
pop ecx  +
mov ecx [ebp+var_4] +
cmp [eax+28h] ecx +
jnb loc_10BF956  +
mov edi [eax] +
or eax 0FFFFFFFFh +
sub eax esi +
mov [ebp+arg_4] edi +
add ebx eax +
jmp loc_10BF958  +
mov ebx esi +
test ebx ebx +
jg loc_10BF925  +
pop esi  +
mov eax [ebp+arg_0] +
mov [eax] edi +
pop edi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push 1  +
mov esi ecx +
call sub_100CD3C  +
test [ebp+arg_0] 1 +
jz loc_10BF98B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx [ebp+arg_0] +
call sub_1012A67  +
test eax eax +
jnz loc_10BF9B2  +
mov eax 80004005h +
jmp loc_10BF9BE  +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+28h]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
call sub_1012A67  +
test eax eax +
jnz loc_10BF9E2  +
mov eax 80004005h +
jmp loc_10BF9EB  +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2Ch]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10BF8F5  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_10BF96D  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_101D8DC +
call sub_100CDE2  +
mov eax [ebp+0Ch] +
and dword ptr [esi+24h] 0 +
mov [esi+20h] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
lea eax [ebp+arg_4] +
push eax  +
lea ecx [esi+28h] +
call sub_1051C09  +
mov eax [ebp+arg_4] +
cmp eax [esi+2Ch] +
jnz loc_10BFA86  +
mov ecx [esi+20h] +
jmp loc_10BFA89  +
mov ecx [eax+28h] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax [ecx+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
push ecx  +
push [ebp+arg_0]  +
call sub_10BF9F4  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov ecx [ebp+8] +
mov [ebp+8] ecx +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10BFAE3  +
push dword ptr [ebp+0Ch]  +
call sub_100CDE2  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_10BFB05  +
mov eax 80070057h +
jmp locret_10BFB56  +
push edi  +
mov edi [ebp+10h] +
test edi edi +
jnz loc_10BFB14  +
mov eax 80070057h +
jmp loc_10BFB55  +
push esi  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-1Ch] +
call sub_101D1AD  +
mov esi [ebp+8] +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_10BFA62  +
push 0  +
push 1  +
lea ecx [ebp-1Ch] +
call sub_100CD3C  +
mov eax [ebp+0Ch] +
cmp eax [esi+20h] +
pop esi  +
jnz loc_10BFB4E  +
mov eax 80004005h +
jmp loc_10BFB55  +
mov eax [eax+28h] +
mov [edi] eax +
xor eax eax +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10BFB77  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_1022C88  +
add esi 1Ch +
cmp esi [ebp+arg_4] +
jnz loc_10BFB6A  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10BFB9F  +
mov ecx [ebp+arg_8] +
push esi  +
call sub_1022C88  +
add [ebp+arg_8] 1Ch +
add esi 1Ch +
cmp esi [ebp+arg_4] +
jnz loc_10BFB8F  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10BFBC3  +
push esi  +
call sub_10BFA1B  +
add esi 1Ch +
cmp esi [ebp+arg_4] +
jnz loc_10BFBBA  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
jmp loc_10BFBEA  +
push esi  +
call sub_1022C88  +
add [ebp+arg_C] 1Ch +
add esi 1Ch +
mov ecx [ebp+arg_C] +
cmp esi [ebp+arg_8] +
jnz loc_10BFBDD  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] esi +
jz loc_10BFC22  +
sub [ebp+arg_8] 1Ch +
mov ecx [ebp+arg_8] +
sub esi 1Ch +
push esi  +
call sub_1022C88  +
cmp esi [ebp+arg_0] +
jnz loc_10BFC0D  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
call sub_100A60E  +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov esi [ebp+8] +
mov [ebp-14h] eax +
cmp esi [ebp+0Ch] +
jz loc_10BFC79  +
push esi  +
push dword ptr [ebp+10h]  +
call sub_10BFABE  +
add dword ptr [ebp+10h] 1Ch +
add esi 1Ch +
jmp loc_10BFC46  +
mov esi [ebp-14h] +
jmp loc_10BFC6B  +
push esi  +
call sub_10BFA1B  +
add esi 1Ch +
cmp esi [ebp+10h] +
jnz loc_10BFC62  +
push 0  +
push 0  +
call _CxxThrowException  +
mov eax [ebp+10h] +
call sub_1001FCF  +
retn 18h  +
***
call sub_100A60E  +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
mov eax [ebp+8] +
cmp eax [ebp+0Ch] +
jz loc_10BFCD6  +
push eax  +
push dword ptr [ebp+10h]  +
call sub_10BFABE  +
add dword ptr [ebp+10h] 1Ch +
add dword ptr [ebp+8] 1Ch +
jmp loc_10BFC9F  +
mov esi [ebp-14h] +
jmp loc_10BFCC8  +
push esi  +
call sub_10BFA1B  +
add esi 1Ch +
cmp esi [ebp+10h] +
jnz loc_10BFCBF  +
push 0  +
push 0  +
call _CxxThrowException  +
mov eax [ebp+10h] +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
cmp edi eax +
jnz loc_10BFD05  +
xor al al +
jmp loc_10BFD29  +
cmp edi 9249249h +
jbe loc_10BFD12  +
call loc_10B6E00  +
push eax  +
push edi  +
call sub_10216D6  +
imul edi edi +
add edi eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+4] +
push dword ptr [eax+4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_1053E9B  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10BFB84  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10BFBAF  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10BFBD2  +
mov eax [ebp+arg_0] +
add esp 18h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10BFBFF  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10BFC2D  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10BFC89  +
pop edi  +
leave   +
retn 10h  +
***
call sub_100A60E  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov [ebp-14h] eax +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_10BFEA1  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_10BFABE  +
dec dword ptr [ebp+0Ch]  +
add dword ptr [ebp+8] 1Ch +
jmp loc_10BFE6B  +
mov esi [ebp-14h] +
jmp loc_10BFE93  +
push esi  +
call sub_10BFA1B  +
add esi 1Ch +
cmp esi [ebp+8] +
jnz loc_10BFE8A  +
push 0  +
push 0  +
call _CxxThrowException  +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
mov ecx esi +
call sub_100B8AF  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
call sub_10CAF1D  +
jmp loc_10BFEF4  +
dec [ebp+arg_4]  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_10BEDC0  +
mov eax [esi+4] +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
mov ecx esi +
call sub_10111C2  +
cmp [ebp+arg_4] 0 +
ja loc_10BFECE  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_10BFF23  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10BFD7C  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_10BFF6E  +
push edi  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push eax  +
call sub_10BFD9B  +
mov edi [eax] +
add esp 10h +
push esi  +
push dword ptr [esi+8]  +
push edi  +
call sub_10BFD7C  +
mov ecx [ebp+arg_4] +
mov [esi+8] edi +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+arg_C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10BFE55  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10BFEAE  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
call sub_100A60E  +
pop ecx  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov edx [ecx+4] +
push eax  +
push edx  +
lea eax [ebp+var_4] +
push eax  +
call sub_10BFF36  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10BFF7D  +
mov eax [ebp+arg_4] +
imul eax eax +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
call sub_101D46C  +
mov eax [ebp+10h] +
mov esi ecx +
push eax  +
lea ecx [ebp-30h] +
mov [ebp-3Ch] esi +
call sub_100CDE2  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_10BED04  +
mov edi [ebp+0Ch] +
mov ebx eax +
test edi edi +
jz loc_10C0273  +
mov ecx esi +
call sub_10BEC60  +
mov ecx 9249249h +
mov edx ecx +
sub edx eax +
cmp edx edi +
jnb loc_10C00F9  +
call loc_10B6E00  +
add eax edi +
cmp ebx eax +
jnb loc_10C01BA  +
mov edx ebx +
shr edx 1 +
sub ecx edx +
cmp ecx ebx +
jnb loc_10C0111  +
xor ebx ebx +
jmp loc_10C0113  +
add ebx edx +
cmp ebx eax +
jnb loc_10C0119  +
mov ebx eax +
push 0  +
push ebx  +
call sub_10216D6  +
mov ecx [esi+4] +
push esi  +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-34h] eax +
push ecx  +
mov [ebp-38h] eax +
mov byte ptr [ebp-4] 1 +
call sub_10BFDF9  +
lea ecx [ebp-30h] +
push ecx  +
push edi  +
push eax  +
mov ecx esi +
mov [ebp-38h] eax +
call sub_10C0085  +
push esi  +
mov [ebp-38h] eax +
push dword ptr [ebp-38h]  +
mov eax [esi+8] +
push eax  +
push dword ptr [ebp+8]  +
call sub_10BFDF9  +
mov ecx esi +
call sub_10BEC60  +
add edi eax +
mov eax [esi+4] +
test eax eax +
jz loc_10C017F  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10BFD7C  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp-34h] +
imul ebx ebx +
imul edi edi +
add ebx eax +
add edi eax +
mov [esi+0Ch] ebx +
mov [esi+8] edi +
mov [esi+4] eax +
jmp loc_10C0273  +
push dword ptr [ebp-3Ch]  +
push dword ptr [ebp-38h]  +
push dword ptr [ebp-34h]  +
call sub_10BFD7C  +
push dword ptr [ebp-34h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push 0  +
push 0  +
call _CxxThrowException  +
mov ecx [esi+8] +
mov eax ecx +
sub eax [ebp+8] +
push 1Ch  +
cdq   +
pop ebx  +
idiv  ebx +
mov [ebp-34h] ecx +
push esi  +
cmp eax edi +
jnb loc_10C0242  +
mov eax [ebp+8] +
mov ebx edi +
imul ebx ebx +
lea edx [ebx+eax] +
push edx  +
push ecx  +
push eax  +
call sub_10BFDF9  +
mov eax [esi+8] +
sub eax [ebp+8] +
lea ecx [ebp-30h] +
push ecx  +
push 1Ch  +
pop ecx  +
cdq   +
idiv  ecx +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
sub edi eax +
push edi  +
push dword ptr [esi+8]  +
call sub_10C0085  +
add [esi+8] ebx +
mov esi [esi+8] +
and dword ptr [ebp-4] 0 +
lea eax [ebp-30h] +
push eax  +
sub esi ebx +
push esi  +
push dword ptr [ebp+8]  +
call sub_10BFB5F  +
add esp 0Ch +
jmp loc_10C0273  +
mov eax [ebp+0Ch] +
mov ecx [ebp-3Ch] +
imul eax eax +
push ecx  +
mov ecx [ecx+8] +
add ecx eax +
push ecx  +
mov ecx [ebp+8] +
add eax ecx +
push eax  +
call sub_10BFD7C  +
jmp loc_10C01B1  +
imul edi edi +
push ecx  +
mov ebx ecx +
push ecx  +
sub ebx edi +
push ebx  +
call sub_10BFDF9  +
push dword ptr [ebp-34h]  +
mov [esi+8] eax +
push ebx  +
push dword ptr [ebp+8]  +
call sub_10BFDCD  +
lea eax [ebp-30h] +
push eax  +
mov eax [ebp+8] +
add edi eax +
push edi  +
push eax  +
call sub_10BFB5F  +
add esp 18h +
push 0  +
push 1  +
lea ecx [ebp-30h] +
call sub_100CD3C  +
call sub_101D44D  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
lea eax [esi+20h] +
push eax  +
lea ebx [esi+1Ch] +
push ebx  +
push edi  +
call sub_10CAF1D  +
push eax  +
call sub_10CAF1D  +
lea eax [esi+10h] +
push eax  +
lea eax [esi+4] +
push eax  +
push edi  +
call sub_10BFFAB  +
push eax  +
call sub_10BFFAB  +
mov eax [edi] +
push 1  +
lea ecx [ebp+var_4C] +
push ecx  +
push edi  +
call dword ptr [eax+30h]  +
test eax eax +
jge loc_10C02E5  +
push eax  +
call sub_10C7F1B  +
mov ecx [edi] +
lea edx [ebp+var_54] +
push edx  +
xor eax eax +
push 1  +
push eax  +
push eax  +
push edi  +
mov [ebp+var_58] eax +
call dword ptr [ecx+14h]  +
test eax eax +
jge loc_10C0302  +
push eax  +
call sub_10C7F1B  +
mov eax [ebp+var_40] +
cmp eax [ebp+var_50] +
jb loc_10C0320  +
ja loc_10C0314  +
mov eax [ebp+var_44] +
cmp eax [ebp+var_54] +
jbe loc_10C0320  +
lea eax [esi+24h] +
push eax  +
push edi  +
call sub_10CAF1D  +
jmp loc_10C0335  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_10C0330  +
mov eax [esi+8] +
mov eax [eax] +
mov eax [eax+8] +
jmp loc_10C0332  +
mov eax [ebx] +
mov [esi+24h] eax +
mov ecx esi +
call sub_10BF86F  +
test al al +
jnz loc_10C034A  +
push 80004005h  +
call sub_10C7F1B  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp ecx esi +
jz loc_10C037D  +
push edi  +
mov edi [ebp+arg_10] +
push edi  +
call sub_10111FB  +
sub [esi+8] edi +
pop edi  +
mov eax [ebp+arg_8] +
mov eax [eax+4] +
mov ecx [ebp+arg_C] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
mov eax [eax+4] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
mov ecx [ebp+arg_8] +
mov [eax] ecx +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_C] +
mov ecx [eax+4] +
mov edx [edx+4] +
mov [eax+4] edx +
mov eax [ebp+arg_8] +
mov eax [eax+4] +
mov edx [ebp+arg_C] +
mov [edx+4] eax +
mov eax [ebp+arg_8] +
mov [eax+4] ecx +
pop esi  +
pop ebp  +
retn 18h  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+4] +
call sub_1041A02  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [esi+24h] +
mov dword ptr [esi] offset off_106D188 +
call sub_10BFCE6  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+24h] +
mov dword ptr [esi] offset off_106D188 +
call sub_10BFF04  +
lea ecx [esi+4] +
pop esi  +
jmp sub_101A846  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_103D9C7  +
mov eax [ebp+arg_4] +
mov ecx [eax+4] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp esi edi +
jz loc_10C0533  +
mov ecx edi +
call sub_10BEC60  +
test eax eax +
jnz loc_10C0473  +
mov ecx esi +
call sub_10C0067  +
jmp loc_10C0533  +
push ebx  +
mov ecx edi +
call sub_10BEC60  +
mov ecx esi +
mov ebx eax +
call sub_10BEC60  +
cmp ebx eax +
ja loc_10C04B2  +
push dword ptr [esi+4]  +
push dword ptr [edi+8]  +
push dword ptr [edi+4]  +
call sub_10BFD50  +
add esp 0Ch +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10BFD7C  +
mov ecx edi +
call sub_10BEC60  +
imul eax eax +
add eax [esi+4] +
jmp loc_10C052F  +
mov ecx edi +
call sub_10BEC60  +
mov ecx esi +
mov ebx eax +
call sub_10BED04  +
cmp ebx eax +
ja loc_10C04F0  +
mov ecx esi +
call sub_10BEC60  +
push dword ptr [esi+4]  +
mov ebx eax +
mov eax [edi+4] +
imul ebx ebx +
add ebx eax +
push ebx  +
push eax  +
call sub_10BFD50  +
mov eax [esi+8] +
mov edi [edi+8] +
add esp 0Ch +
push esi  +
push eax  +
push edi  +
push ebx  +
jmp loc_10C052A  +
mov eax [esi+4] +
test eax eax +
jz loc_10C050A  +
push esi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10BFD7C  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx edi +
call sub_10BEC60  +
push eax  +
mov ecx esi +
call sub_10BFCE6  +
test al al +
jz loc_10C0532  +
mov eax [esi+4] +
mov ecx [edi+8] +
mov edi [edi+4] +
push esi  +
push eax  +
push ecx  +
push edi  +
call sub_10BFDF9  +
mov [esi+8] eax +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10C03C9  +
push offset Addend  +
mov dword ptr [esi] offset off_1011FA4 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10C0580  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10C0566  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_1011FA4 +
mov dword ptr [esi+4] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp loc_10C0403  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_10BEC60  +
test eax eax +
jnz loc_10C05F9  +
xor esi esi +
jmp loc_10C0607  +
mov eax [ebp+arg_4] +
sub eax [edi+4] +
push 1Ch  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi eax +
push [ebp+arg_8]  +
mov ecx edi +
push 1  +
push [ebp+arg_4]  +
call sub_10C00AB  +
imul esi esi +
add esi [edi+4] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov al 1 +
mov byte ptr [ebp+var_8] al +
jmp loc_10C0665  +
lea eax [esi+0Ch] +
push eax  +
push [ebp+arg_4]  +
mov ebx esi +
call sub_10127EE  +
pop ecx  +
pop ecx  +
mov byte ptr [ebp+var_8] al +
test al al +
jz loc_10C0662  +
mov esi [esi] +
jmp loc_10C0665  +
mov esi [esi+8] +
cmp byte ptr [esi+2Dh] 0 +
jz loc_10C0647  +
mov esi ebx +
mov [ebp+var_4] esi +
test al al +
jz loc_10C06A4  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_10C0699  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_103B88C  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
jmp loc_10C06C8  +
lea ecx [ebp+var_4] +
call sub_103B087  +
mov esi [ebp+var_4] +
push [ebp+arg_4]  +
lea eax [esi+0Ch] +
push eax  +
call sub_10127EE  +
pop ecx  +
pop ecx  +
test al al +
jz loc_10C06BF  +
push [ebp+arg_4]  +
push ebx  +
push [ebp+var_8]  +
jmp loc_10C0681  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
cmp ecx edx +
jz loc_10C06FE  +
push edi  +
mov edi [edx+8] +
test edi edi +
jz loc_10C06FD  +
mov eax [edx+4] +
push esi  +
mov esi [eax] +
push 0  +
push edi  +
push eax  +
push esi  +
push edx  +
push [ebp+arg_0]  +
call sub_10C0362  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
call sub_100C4D0  +
mov esi [ebp+0Ch] +
mov edi [ebp+8] +
mov ecx esi +
call sub_1012BED  +
lea eax [ebp-3Ch] +
push eax  +
push edi  +
call sub_10CAF1D  +
jmp loc_10C0764  +
dec dword ptr [ebp-3Ch]  +
lea ecx [ebp-38h] +
call sub_103B1CB  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-38h] +
push eax  +
push edi  +
call sub_10BEBDD  +
mov eax [esi+4] +
lea ecx [ebp-38h] +
push ecx  +
push eax  +
mov ecx esi +
call sub_103D9C7  +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 0  +
push 1  +
lea ecx [ebp-34h] +
call sub_100CD3C  +
cmp dword ptr [ebp-3Ch] 0 +
ja loc_10C072C  +
call sub_100C50D  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov esi eax +
neg esi  +
lea ecx [eax+4] +
sbb esi esi +
and esi ecx +
push 8  +
pop ecx  +
lea edi [ebx+4] +
add eax 24h +
movs   +
push eax  +
lea ecx [ebx+24h] +
call sub_10C0448  +
mov eax [ebp+arg_0] +
mov ecx [eax+34h] +
mov [ebx+34h] ecx +
mov eax [eax+38h] +
pop edi  +
mov [ebx+38h] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10C05B9  +
test [ebp+arg_0] 1 +
jz loc_10C07DA  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_10BEC60  +
mov ecx esi +
mov edi eax +
call sub_10BED04  +
push [ebp+arg_0]  +
cmp edi eax +
mov eax [esi+8] +
mov ecx esi +
jnb loc_10C0816  +
push 1  +
push eax  +
call sub_10C0085  +
mov [esi+8] eax +
jmp loc_10C0820  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10C05E3  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10C0852  +
test esi esi +
jz loc_10C0852  +
push 1  +
mov ecx esi +
call sub_10C07C0  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
push edi  +
jnz loc_10C08A2  +
mov eax [esi+8] +
lea ecx [esi+10h] +
push ecx  +
push eax  +
lea ecx [esi+4] +
call sub_10C06D4  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_10C08A2  +
push offset dword_10C08E8  +
lea ecx [ebp-0Ch] +
call sub_10BED61  +
push offset dword_10C08F8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov eax [esi+8] +
mov eax [eax] +
add eax 8 +
mov edi [eax] +
cmp edi [eax+4] +
jnz loc_10C08BB  +
lea ecx [esi+4] +
call sub_10BF854  +
jmp loc_10C08C0  +
lea ecx [edi+1] +
mov [eax] ecx +
cmp dword ptr [esi+0Ch] 0 +
jz loc_10C08D0  +
mov eax [esi+8] +
mov eax [eax] +
mov eax [eax+8] +
jmp loc_10C08DE  +
cmp dword ptr [esi+18h] 0 +
jz loc_10C08DB  +
mov eax [esi+14h] +
jmp loc_10C08C9  +
***
mov eax [esi+1Ch] +
mov [esi+24h] eax +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call ??0exception@@QAE@ABV0@@Z  +
mov dword ptr [esi] offset off_106D168 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
jmp loc_10C0949  +
push dword ptr [eax+28h]  +
call sub_1051C6A  +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov [ebp+arg_4] eax +
mov ecx [ebp+arg_C] +
cmp eax [ebp+arg_8] +
jnz loc_10C0939  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 10h  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10C097B  +
mov eax 80004003h +
jmp loc_10C09E1  +
push 3Ch  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_10C09B5  +
push esi  +
call sub_10C0540  +
mov esi eax +
jmp loc_10C09B5  +
mov eax offset loc_10C09AF +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10C09DA  +
lea ecx [esi+8] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10C09CD  +
xor ebx ebx +
test ebx ebx +
jz loc_10C09DD  +
push 1  +
mov ecx esi +
call sub_10C07C0  +
xor esi esi +
jmp loc_10C09DD  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10C0707  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov ecx [esi+40h] +
mov eax [esi+20h] +
mov edx [eax] +
push ecx  +
push eax  +
push edx  +
lea eax [ebp+8] +
push eax  +
call sub_10C092F  +
lea ecx [esi+1Ch] +
call sub_1012BED  +
lea ecx [esi+28h] +
call sub_1012CDC  +
lea ecx [esi+34h] +
call sub_100D342  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+8] +
and dword ptr [ecx+38h] 0 +
mov [ecx+34h] eax +
test eax eax +
jbe loc_10C0A8C  +
push ebx  +
push esi  +
lea ebx [ecx+24h] +
push eax  +
mov ecx ebx +
call sub_10BFFC7  +
mov eax [edi+4] +
mov esi [eax] +
cmp esi eax +
jz loc_10C0A8A  +
lea eax [esi+0Ch] +
push eax  +
mov ecx ebx +
call sub_10C07E6  +
mov esi [esi] +
cmp esi [edi+4] +
jnz loc_10C0A78  +
pop esi  +
pop ebx  +
mov al 1 +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_10C0AAB  +
mov [esi] edi +
mov ebx [ebp+arg_4] +
cmp ebx edi +
jz loc_10C0AB4  +
mov [ebx] edi +
cmp esi edi +
jz loc_10C0B14  +
cmp ebx edi +
jz loc_10C0B14  +
push esi  +
call sub_10C095F  +
cmp eax edi +
mov [ebp+arg_0] eax +
jl loc_10C0AF4  +
mov eax [esi] +
cmp eax edi +
jz loc_10C0B03  +
mov ecx [eax] +
push ebx  +
push offset dword_10C0B20  +
push eax  +
call dword ptr [ecx]  +
cmp eax edi +
mov [ebp+arg_0] eax +
jge loc_10C0B0F  +
mov ecx [esi] +
cmp ecx edi +
jz loc_10C0AEE  +
push 1  +
call sub_10C07C0  +
mov [esi] edi +
mov [ebx] edi +
jmp loc_10C0B0F  +
mov ecx [esi] +
cmp ecx edi +
jz loc_10C0B03  +
push 1  +
call sub_10C07C0  +
mov [esi] edi +
cmp [ebp+arg_0] edi +
jl loc_10C0B0F  +
mov [ebp+arg_0] 8000FFFFh +
mov eax [ebp+arg_0] +
jmp loc_10C0B19  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push edi  +
mov edi [ebp+0Ch] +
test edi edi +
jnz loc_10C0B4F  +
mov eax 80070057h +
jmp loc_10C0BD1  +
and dword ptr [ebp-4] 0 +
push edi  +
lea eax [ebp-4] +
push eax  +
call sub_10C0A98  +
mov [ebp+0Ch] eax +
test eax eax +
jge loc_10C0B8A  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C0BCE  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C0BCE  +
push offset loc_106D154  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10C0BCE  +
mov eax [ebp+8] +
push esi  +
mov esi [ebp-4] +
add eax 1Ch +
push eax  +
mov ecx esi +
call sub_10C0A4B  +
test al al +
jnz loc_10C0BCD  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
push 0  +
lea ecx [ebp-40h] +
call sub_10C0540  +
lea eax [ebp-40h] +
push eax  +
mov ecx esi +
call sub_10C0777  +
lea ecx [ebp-40h] +
call sub_10C05B9  +
and dword ptr [edi] 0 +
mov dword ptr [ebp+0Ch] 8000FFFFh +
pop esi  +
mov eax [ebp+0Ch] +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
lea eax [esi+1Ch] +
push eax  +
push [ebp+arg_0]  +
call sub_10C09EE  +
lea ecx [esi+28h] +
call sub_1012CDC  +
lea ecx [esi+34h] +
call sub_100D342  +
mov eax [esi+20h] +
mov edi [eax] +
cmp edi eax +
jz loc_10C0C19  +
push edi  +
mov ecx esi +
call sub_103B307  +
mov edi [edi] +
cmp edi [esi+20h] +
jnz loc_10C0C0A  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push eax  +
call sub_10C0A98  +
mov esi eax +
test esi esi +
jge loc_10C0C67  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C0C63  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C0C63  +
push offset loc_106D154  +
push 34h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax esi +
jmp loc_10C0C87  +
mov eax [ebp+8] +
mov edx [eax+34h] +
mov ecx [ebp+0Ch] +
mov [ecx+34h] edx +
mov edx [eax+38h] +
add eax 24h +
mov [ecx+38h] edx +
push eax  +
add ecx 24h +
call sub_10C0448  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push ds:off_103AD08  +
lea edi [esi+1Ch] +
push edi  +
call sub_103BB66  +
and dword ptr [ebp-4] 0 +
mov ecx edi +
mov dword ptr [esi] offset off_100BAC0 +
call sub_103D6B3  +
lea ecx [esi+28h] +
mov byte ptr [ebp-4] 1 +
call sub_1037569  +
lea ecx [esi+34h] +
mov byte ptr [ebp-4] 2 +
call sub_1041C89  +
mov eax [ebp+8] +
push esi  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 3 +
mov [esi+40h] eax +
call sub_10C0BDB  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
push 54h  +
mov eax offset byte_10E2689 +
call sub_101D46C  +
mov eax [ebp+0Ch] +
mov edi [ebp+8] +
mov ebx [ebp+10h] +
test eax eax +
jnz loc_10C0D22  +
mov eax 80070057h +
call sub_101D44D  +
retn 0Ch  +
***
test ebx ebx +
jz loc_10C0D15  +
push eax  +
lea ecx [ebp-30h] +
call sub_101D1AD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-5Ch] +
push eax  +
mov ecx edi +
call sub_10BFA62  +
mov eax [edi+20h] +
mov esi [ebp-5Ch] +
cmp esi eax +
jnz loc_10C0DA4  +
mov ecx [edi+40h] +
mov byte ptr [ebp-4] 1 +
call near ptr dword_10C085C+3  +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-58h] +
call near ptr dword_10BFA30+3  +
lea eax [ebp-58h] +
push eax  +
lea eax [ebp-5Ch] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_10BFA98  +
lea ecx [ebp-58h] +
push ecx  +
push dword ptr [eax]  +
lea eax [ebp-60h] +
push eax  +
lea ecx [edi+1Ch] +
call sub_10C0424  +
mov esi [eax] +
push 0  +
push 1  +
lea ecx [ebp-54h] +
call sub_100CD3C  +
and dword ptr [ebp-4] 0 +
push esi  +
mov ecx edi +
call sub_103B307  +
inc dword ptr [esi+2Ch]  +
mov eax [esi+28h] +
mov [ebx] eax +
xor esi esi +
jmp loc_10C0DBB  +
mov eax offset loc_10C0DB6 +
retn   +
***
mov esi 8007000Eh +
push 0  +
push 1  +
lea ecx [ebp-30h] +
call sub_100CD3C  +
mov eax esi +
jmp loc_10C0D1A  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
mov edi [ebp+0Ch] +
cmp byte ptr [edi+59h] 0 +
jz loc_10C0E1D  +
push offset aInvalidMapSetT  +
lea ecx [ebp-2Ch] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-54h] +
call sub_1075FC8  +
push offset dword_10EA2DC  +
lea eax [ebp-54h] +
push eax  +
mov dword ptr [ebp-54h] offset off_106BEE4 +
call _CxxThrowException  +
lea ecx [ebp+0Ch] +
call sub_102BFD0  +
mov edx [edi] +
cmp byte ptr [edx+59h] 0 +
jz loc_10C0E32  +
mov ebx [edi+8] +
jmp loc_10C0E4B  +
mov eax [edi+8] +
cmp byte ptr [eax+59h] 0 +
jz loc_10C0E3F  +
mov ebx edx +
jmp loc_10C0E4B  +
mov eax [ebp+0Ch] +
lea ecx [eax+8] +
mov ebx [ecx] +
cmp eax edi +
jnz loc_10C0EB4  +
cmp byte ptr [ebx+59h] 0 +
mov esi [edi+4] +
jnz loc_10C0E57  +
mov [ebx+4] esi +
mov ecx [ebp-10h] +
mov eax [ecx+4] +
cmp [eax+4] edi +
jnz loc_10C0E67  +
mov [eax+4] ebx +
jmp loc_10C0E72  +
cmp [esi] edi +
jnz loc_10C0E6F  +
mov [esi] ebx +
jmp loc_10C0E72  +
mov [esi+8] ebx +
mov eax [ecx+4] +
cmp [eax] edi +
jnz loc_10C0E91  +
cmp byte ptr [ebx+59h] 0 +
jz loc_10C0E83  +
mov eax esi +
jmp loc_10C0E8C  +
push ebx  +
call sub_10BEC99  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx] eax +
mov eax [ecx+4] +
cmp [eax+8] edi +
jnz loc_10C0F10  +
cmp byte ptr [ebx+59h] 0 +
jz loc_10C0EA3  +
mov eax esi +
jmp loc_10C0EAC  +
push ebx  +
call sub_10BEC7B  +
mov ecx [ebp-10h] +
mov edx [ecx+4] +
mov [edx+8] eax +
jmp loc_10C0F10  +
mov [edx+4] eax +
mov edx [edi] +
mov [eax] edx +
cmp eax [edi+8] +
jnz loc_10C0EC4  +
mov esi eax +
jmp loc_10C0EDD  +
cmp byte ptr [ebx+59h] 0 +
mov esi [eax+4] +
jnz loc_10C0ED0  +
mov [ebx+4] esi +
mov [esi] ebx +
mov edx [edi+8] +
mov [ecx] edx +
mov ecx [edi+8] +
mov [ecx+4] eax +
mov ecx [ebp-10h] +
mov ecx [ecx+4] +
cmp [ecx+4] edi +
jnz loc_10C0EED  +
mov [ecx+4] eax +
jmp loc_10C0EFB  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_10C0EF8  +
mov [ecx] eax +
jmp loc_10C0EFB  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov cl [eax+58h] +
mov dl [edi+58h] +
mov [eax+58h] dl +
mov [edi+58h] cl +
mov ecx [ebp-10h] +
cmp byte ptr [edi+58h] 1 +
jz loc_10C0FD4  +
jmp loc_10C1019  +
cmp byte ptr [ebx+58h] 1 +
jnz loc_10C1015  +
mov eax [esi] +
cmp ebx eax +
jnz loc_10C0F9B  +
mov eax [esi+8] +
cmp byte ptr [eax+58h] 0 +
jnz loc_10C0F4C  +
mov byte ptr [eax+58h] 1 +
push esi  +
mov byte ptr [esi+58h] 0 +
call sub_10BEDFB  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+59h] 0 +
jnz loc_10C0FCF  +
mov edx [eax] +
cmp byte ptr [edx+58h] 1 +
jnz loc_10C0F63  +
mov edx [eax+8] +
cmp byte ptr [edx+58h] 1 +
jz loc_10C0FCB  +
mov edx [eax+8] +
cmp byte ptr [edx+58h] 1 +
jnz loc_10C0F82  +
mov edx [eax] +
mov byte ptr [edx+58h] 1 +
push eax  +
mov byte ptr [eax+58h] 0 +
call sub_10BECB6  +
mov eax [esi+8] +
mov ecx [ebp-10h] +
mov dl [esi+58h] +
mov [eax+58h] dl +
mov byte ptr [esi+58h] 1 +
mov eax [eax+8] +
push esi  +
mov byte ptr [eax+58h] 1 +
call sub_10BEDFB  +
jmp loc_10C1015  +
cmp byte ptr [eax+58h] 0 +
jnz loc_10C0FB4  +
mov byte ptr [eax+58h] 1 +
push esi  +
mov byte ptr [esi+58h] 0 +
call sub_10BECB6  +
mov eax [esi] +
mov ecx [ebp-10h] +
cmp byte ptr [eax+59h] 0 +
jnz loc_10C0FCF  +
mov edx [eax+8] +
cmp byte ptr [edx+58h] 1 +
jnz loc_10C0FE1  +
mov edx [eax] +
cmp byte ptr [edx+58h] 1 +
jnz loc_10C0FE1  +
mov byte ptr [eax+58h] 0 +
mov ebx esi +
mov esi [esi+4] +
mov eax [ecx+4] +
cmp ebx [eax+4] +
jz loc_10C1015  +
jmp loc_10C0F1F  +
mov edx [eax] +
cmp byte ptr [edx+58h] 1 +
jnz loc_10C0FFF  +
mov edx [eax+8] +
mov byte ptr [edx+58h] 1 +
push eax  +
mov byte ptr [eax+58h] 0 +
call sub_10BEDFB  +
mov eax [esi] +
mov ecx [ebp-10h] +
mov dl [esi+58h] +
mov [eax+58h] dl +
mov byte ptr [esi+58h] 1 +
mov eax [eax] +
push esi  +
mov byte ptr [eax+58h] 1 +
call sub_10BECB6  +
mov byte ptr [ebx+58h] 1 +
push edi  +
call sub_1053F0A  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp-10h] +
mov eax [ecx+8] +
test eax eax +
jbe loc_10C1034  +
dec eax  +
mov [ecx+8] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax] ecx +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push [ebp+arg_0]  +
lea eax [ebp+var_8] +
push eax  +
mov esi ecx +
call sub_10BF801  +
and [ebp+arg_0] 0 +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call sub_10BF833  +
add esp 0Ch +
push [ebp+var_4]  +
lea eax [ebp+var_4] +
push [ebp+var_8]  +
mov ecx esi +
push eax  +
call sub_1053F7C  +
mov eax [ebp+arg_0] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1012A67  +
test eax eax +
jnz loc_10C10B3  +
mov eax 80004005h +
jmp loc_10C1110  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
push [ebp+arg_4]  +
lea ecx [ebp+var_8] +
call sub_1012A1B  +
push eax  +
lea ecx [esi+54h] +
call sub_10C1049  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] offset off_1012454 +
call sub_10123F1  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C110E  +
cmp byte ptr [eax+19h] 5 +
jb loc_10C110E  +
mov ecx [ebp+arg_4] +
call sub_102BC2F  +
push eax  +
mov eax lpDst +
push offset loc_106D154  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_C]  +
mov ecx esi +
call sub_1012A67  +
mov edi eax +
test edi edi +
jnz loc_10C119C  +
lea eax [esi+28h] +
push eax  +
lea ecx [ebp+var_4C] +
call sub_103D655  +
lea eax [ebp+var_4C] +
push eax  +
push [ebp+arg_C]  +
lea ecx [ebp+var_8] +
call sub_1012A1B  +
push eax  +
lea ecx [ebp+var_98] +
call sub_103BD7A  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] offset off_1012454 +
call sub_10123F1  +
lea eax [ebp+var_98] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [esi+54h] +
call sub_103DAE6  +
mov edi [ebp+var_8] +
lea ecx [ebp+var_98] +
add edi 14h +
call sub_1012B45  +
lea ecx [ebp+var_4C] +
call sub_1012B7E  +
push [ebp+arg_8]  +
mov eax [edi] +
push [ebp+arg_4]  +
push edi  +
call dword ptr [eax+14h]  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
call sub_100C4D0  +
mov eax [ebp+0Ch] +
mov esi [ebp+8] +
xor ebx ebx +
push ebx  +
lea ecx [ebp-48h] +
mov [ebp-30h] eax +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aOperatorIstora  +
lea ecx [ebp-48h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-24h] ebx +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call sub_100A5E6  +
mov ecx [esi] +
push eax  +
push ebx  +
push 10h  +
push ebx  +
mov edi offset aIdPool +
push edi  +
push esi  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
mov [ebp-28h] eax +
jge loc_10C123F  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C1237  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C1237  +
push dword ptr [ebp-28h]  +
push edi  +
push offset loc_106D154  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
push dword ptr [ebp-28h]  +
call sub_10C7F1B  +
mov eax [ebp-30h] +
add eax 28h +
push eax  +
lea ecx [ebp-24h] +
call sub_100A5CF  +
push eax  +
call sub_10C028C  +
lea ecx [ebp-24h] +
call sub_100A5E6  +
mov ecx [esi] +
push eax  +
push ebx  +
push 10h  +
push ebx  +
mov edi offset aStrings +
push edi  +
push esi  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
mov [ebp-28h] eax +
jge loc_10C12A4  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C129C  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C129C  +
push dword ptr [ebp-28h]  +
push edi  +
push offset loc_106D154  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
push dword ptr [ebp-28h]  +
call sub_10C7F1B  +
mov ecx [ebp-30h] +
add ecx 54h +
call sub_1012D09  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-24h] +
call sub_100A5CF  +
push eax  +
call sub_10CAF1D  +
cmp [ebp-2Ch] ebx +
jbe loc_10C13B9  +
mov edi offset off_1012454 +
dec dword ptr [ebp-2Ch]  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-24h] +
call sub_100A5CF  +
push eax  +
call sub_10CAFEF  +
mov [ebp-38h] edi +
mov [ebp-34h] ebx +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call sub_1012593  +
cmp eax ebx +
mov [ebp-28h] eax +
jge loc_10C1334  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C132C  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C132C  +
push dword ptr [ebp-28h]  +
lea ecx [ebp-20h] +
push ecx  +
push offset loc_106D154  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10BEBAC  +
push dword ptr [ebp-28h]  +
call sub_10C7F1B  +
lea ecx [ebp-24h] +
call sub_100A5CF  +
push eax  +
mov eax [ebp-30h] +
add eax 28h +
push eax  +
lea ecx [ebp-94h] +
call sub_10C0C91  +
lea eax [ebp-94h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-0E0h] +
mov byte ptr [ebp-4] 3 +
call sub_103BD7A  +
mov ecx [ebp-30h] +
lea eax [ebp-0E0h] +
push eax  +
lea eax [ebp-50h] +
push eax  +
add ecx 54h +
mov byte ptr [ebp-4] 4 +
call sub_103DAE6  +
lea ecx [ebp-0E0h] +
mov byte ptr [ebp-4] 3 +
call sub_1012B45  +
lea ecx [ebp-94h] +
mov byte ptr [ebp-4] 2 +
call sub_1012B7E  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
mov [ebp-38h] edi +
call sub_10123F1  +
cmp [ebp-2Ch] ebx +
ja loc_10C12CF  +
mov ecx [ebp-30h] +
dec dword ptr [ebp-2Ch]  +
lea eax [ebp-20h] +
push eax  +
call sub_103C633  +
push eax  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 5 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-48h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
mov eax [ebp-24h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_10C13FE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-48h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_100C50D  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+1Dh] dl +
jz loc_10C14B8  +
mov eax [eax+8] +
jmp loc_10C14DE  +
mov ecx [eax] +
cmp [ecx+1Dh] dl +
jnz loc_10C14CF  +
push ecx  +
call sub_107FE13  +
jmp loc_10C14DE  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_10C14D7  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+1Dh] dl +
jz loc_10C14C7  +
mov ecx [esi] +
cmp [ecx+1Dh] dl +
jnz loc_10C14E0  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp byte ptr [esi+1Dh] 0 +
jnz loc_10C1503  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
pop esi  +
cmp edx [ecx+4] +
jnz loc_10C1517  +
mov [ecx+4] eax +
jmp loc_10C1525  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_10C1522  +
mov [ecx] eax +
jmp loc_10C1525  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+4] +
cmp byte ptr [eax+1Dh] 0 +
push edi  +
mov edi ecx +
mov byte ptr [ebp+var_4] 1 +
jnz loc_10C1571  +
mov ecx [ebx] +
cmp ecx [eax+0Ch] +
mov edi eax +
setb byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jz loc_10C1568  +
mov eax [eax] +
jmp loc_10C156B  +
mov eax [eax+8] +
cmp byte ptr [eax+1Dh] 0 +
jz loc_10C1555  +
cmp byte ptr [ebp+var_4] 0 +
mov ecx edi +
mov [ebp+arg_4] ecx +
jz loc_10C15A8  +
mov eax [esi+4] +
cmp edi [eax] +
jnz loc_10C159D  +
push ebx  +
push edi  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_1043302  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
jmp loc_10C15BD  +
lea ecx [ebp+arg_4] +
call sub_10C14A5  +
mov ecx [ebp+arg_4] +
mov eax [ecx+0Ch] +
cmp eax [ebx] +
jnb loc_10C15B6  +
push ebx  +
push edi  +
push [ebp+var_4]  +
jmp loc_10C1587  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov dl [ebp+arg_4] +
mov eax [ebp+arg_0] +
add ecx 10h +
mov [eax+0Ch] dl +
push eax  +
test dl dl +
jz loc_10C15EE  +
lea eax [ebp+var_8] +
push eax  +
call sub_10C1533  +
jmp locret_10C15F3  +
call sub_104F7EB  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [edx+8] +
mov esi ecx +
test edi edi +
jnz loc_10C1630  +
mov eax [esi+4] +
mov ecx [eax] +
push edx  +
push eax  +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10113C1  +
push [ebp+arg_0]  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_100ED24  +
jmp loc_10C1638  +
push 1  +
push edx  +
call sub_10C15CB  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+4] +
cmp byte ptr [eax+2Dh] 0 +
push edi  +
mov edi ecx +
mov byte ptr [ebp+var_4] 1 +
jnz loc_10C1690  +
mov ecx [ebx] +
cmp ecx [eax+0Ch] +
mov edi eax +
setb byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jz loc_10C1687  +
mov eax [eax] +
jmp loc_10C168A  +
mov eax [eax+8] +
cmp byte ptr [eax+2Dh] 0 +
jz loc_10C1674  +
cmp byte ptr [ebp+var_4] 0 +
mov ecx edi +
mov [ebp+arg_4] ecx +
jz loc_10C16C7  +
mov eax [esi+4] +
cmp edi [eax] +
jnz loc_10C16BC  +
push ebx  +
push edi  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_103A601  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
jmp loc_10C16DC  +
lea ecx [ebp+arg_4] +
call sub_103B087  +
mov ecx [ebp+arg_4] +
mov eax [ecx+0Ch] +
cmp eax [ebx] +
jnb loc_10C16D5  +
push ebx  +
push edi  +
push [ebp+var_4]  +
jmp loc_10C16A6  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
push offset aHtml06e1cb7b19  +
call sub_10C9BCB  +
mov dword_10FD68C eax +
xor eax eax +
inc eax  +
retn 8  +
***
push dword_10FD68C  +
call ds:IsWindow  +
test eax eax +
jz loc_10C1726  +
push 0  +
push 0  +
push 10h  +
push dword_10FD68C  +
call ds:PostMessageW  +
and dword_10FD68C 0 +
xor eax eax +
inc eax  +
retn 8  +
***
retn   +
***
xor dword ptr [ecx+7D0h] 1 +
retn   +
***
push 10h  +
mov eax offset byte_10E0300 +
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCsavefiledialo  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx esi +
call ?OnInitDialog@CDialog@@UAEHXZ  +
test esi esi +
jnz loc_10C1794  +
xor eax eax +
jmp loc_10C1797  +
mov eax [esi+20h] +
push 3EAh  +
push eax  +
call ds:GetDlgItem  +
test eax eax +
jz loc_10C17B6  +
movzx ecx byte ptr [esi+7D4h] +
push ecx  +
push eax  +
call ds:EnableWindow  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
xor eax eax +
inc eax  +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10052FC +
mov eax [esi+7Ch] +
cmp word ptr [eax] 0 +
mov dword ptr [ebp-4] 2 +
jz loc_10C18AC  +
movzx ecx word ptr [esi+98h] +
cmp cx 1 +
jb loc_10C18AC  +
movzx ecx cx +
xor edx edx +
mov [eax+ecx*2-2] dx +
cmp [esi+398h] dx +
jz loc_10C18AC  +
mov ecx [esi+7C0h] +
mov eax [esi+7Ch] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10C1887  +
test dx dx +
jz loc_10C1883  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10C1887  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_10C1861  +
xor eax eax +
jmp loc_10C188C  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_10C18AC  +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push dword ptr [esi+7Ch]  +
mov eax [eax+4] +
push offset aListSaveLocati  +
push offset aSettings  +
mov ecx eax +
call ?WriteProfileStringW@CWinApp@@QAEHPBG00@Z  +
lea ecx [esi+7BCh] +
mov byte ptr [ebp-4] 1 +
call sub_100A77D  +
lea ecx [esi+7A8h] +
mov byte ptr [ebp-4] 0 +
call sub_100A77D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_107DFC4  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10ABCD9  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+7A8h] +
mov dword ptr [esi] offset off_10052FC +
call sub_100AD56  +
lea ebx [esi+7BCh] +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_100AD56  +
mov al [ebp+1Ch] +
and dword ptr [esi+8Ch] 0 +
mov [esi+7D4h] al +
xor eax eax +
lea edi [esi+398h] +
mov byte ptr [ebp-4] 2 +
mov [edi] ax +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov eax [eax+4] +
push 0  +
push offset aListSaveLocati  +
push offset aSettings  +
lea ecx [ebp+18h] +
push ecx  +
mov ecx eax +
call ?GetProfileStringW@CWinApp@@QAE?AVCString@@PBG00@Z  +
push dword ptr [ebp+18h]  +
mov ecx ebx +
mov byte ptr [ebp-4] 3 +
call sub_100AE0E  +
test eax eax +
jge loc_10C1985  +
mov ecx ebx +
call sub_100A6F0  +
lea ebx [esi+7C0h] +
push dword ptr [ebx]  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_10C19A4  +
test al 10h +
jz loc_10C19A4  +
mov eax [ebx] +
mov [esi+8Ch] eax +
lea eax [ebp+20h] +
push eax  +
push 5  +
xor ebx ebx +
push ebx  +
call SHGetSpecialFolderLocation  +
cmp eax ebx +
jl loc_10C1A07  +
push edi  +
push dword ptr [ebp+20h]  +
call SHGetPathFromIDListW  +
mov [ebp+1Ch] ebx +
lea ecx [ebp+1Ch] +
mov byte ptr [ebp-4] 4 +
call sub_100A5E6  +
push eax  +
call SHGetMalloc  +
lea ecx [ebp+1Ch] +
call sub_100A5CF  +
push dword ptr [ebp+20h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
cmp [esi+8Ch] ebx +
jnz loc_10C19F6  +
mov [esi+8Ch] edi +
mov eax [ebp+1Ch] +
mov byte ptr [ebp-4] 3 +
cmp eax ebx +
jz loc_10C1A07  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push 208h  +
lea edi [esi+5A0h] +
push ebx  +
push edi  +
call memset  +
or dword ptr [esi+94h] 80840h +
add esp 0Ch +
push 0E136h  +
mov [esi+7Ch] edi +
mov dword ptr [esi+80h] 104h +
mov dword ptr [esi+0A8h] 0C9h +
mov [esi+7D0h] ebx +
call ds:?GetStringModule@@YGPAUHINSTANCE__@@XZ  +
lea edi [esi+7A8h] +
push eax  +
mov ecx edi +
call sub_10329CF  +
cmp eax ebx +
jge loc_10C1A77  +
push offset aExportList  +
mov ecx edi +
call sub_100AE0E  +
cmp eax ebx +
jge loc_10C1A77  +
mov ecx edi +
call sub_100A6F0  +
mov eax [esi+7ACh] +
lea ecx [ebp+18h] +
mov [esi+90h] eax +
mov byte ptr [ebp-4] 2 +
call ??1CString@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10C1811  +
test byte ptr [ebp+8] 1 +
jz loc_10C1AD3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jnz loc_10C1AF1  +
mov eax 80004003h +
jmp loc_10C1B39  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+24h] 0 +
jz loc_10C1B17  +
mov eax [esi+24h] +
lea ecx [eax+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
test eax eax +
jz loc_10C1B17  +
mov ecx [esi+24h] +
mov ecx [ecx+0D8h] +
test ecx ecx +
jnz loc_10C1B1E  +
mov eax 8000FFFFh +
jmp loc_10C1B38  +
mov edx [ebp+arg_4] +
test edx edx +
jnz loc_10C1B2A  +
mov edx offset word_100A5FC +
push [ebp+arg_8]  +
mov esi [ecx] +
push edx  +
push eax  +
push ecx  +
call dword ptr [esi+94h]  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+24h] 0 +
jnz loc_10C1B5A  +
mov eax 8000FFFFh +
jmp loc_10C1B97  +
mov eax [esi+24h] +
lea ecx [eax+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
test eax eax +
jz loc_10C1B53  +
mov ecx [esi+24h] +
mov ecx [ecx+0D8h] +
test ecx ecx +
jz loc_10C1B53  +
mov edx [ebp+arg_8] +
lea esi [ebp+var_8] +
push esi  +
push [ebp+arg_4]  +
mov [ebp+var_8] edx +
mov edx [ebp+arg_C] +
push 9024h  +
push eax  +
mov [ebp+var_4] edx +
mov edx [ecx] +
push ecx  +
call dword ptr [edx+78h]  +
xor eax eax +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
push edi  +
mov edi [ebp+arg_0] +
test eax eax +
jnz loc_10C1BC6  +
mov eax offset word_100A5FC +
push [ebp+arg_4]  +
lea ecx [ebp+var_50] +
push offset aTsnapininter_1  +
push eax  +
call sub_100B69F  +
push [ebp+arg_4]  +
mov ecx esi +
push edi  +
call sub_10CBC39  +
mov esi eax +
push esi  +
lea ecx [ebp+var_50] +
call sub_100B7A1  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
xor eax eax +
cmp [esi+2Ch] eax +
jnz loc_10C1C94  +
lea ecx [ebp+var_4] +
push ecx  +
lea ecx [ebp+var_8] +
push ecx  +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
mov eax [esi] +
push esi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_10C1C94  +
push [ebp+var_4]  +
lea ecx [esi+28h] +
push [ebp+var_8]  +
call sub_10C1BA1  +
lea eax [esi+28h] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_4] +
push ebx  +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
cmp ecx edi +
jz loc_10C1D59  +
mov ebx [ebp+arg_8] +
cmp ebx edi +
jz loc_10C1D59  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+2Ch] +
cmp eax edi +
jnz loc_10C1D46  +
mov [ecx] edi +
mov [ebx] edi +
mov eax [esi+24h] +
lea ecx [eax+44h] +
mov eax [ecx] +
mov [ebp+var_4] 8000FFFFh +
call dword ptr [eax+78h]  +
mov [ebp+var_8] eax +
cmp eax edi +
jz loc_10C1D53  +
mov eax [esi+24h] +
mov ecx [eax+0D8h] +
cmp ecx edi +
jz loc_10C1D53  +
lea edx [ebp+arg_0] +
push edx  +
lea edx [ebp+arg_8] +
push edx  +
push 9025h  +
push [ebp+var_8]  +
mov [ebp+arg_0] edi +
mov [ebp+arg_8] edi +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+78h]  +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_10C1D53  +
push [ebp+arg_8]  +
lea ecx [esi+28h] +
push [ebp+arg_0]  +
call sub_10C1BA1  +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_10C1D53  +
mov eax [esi+2Ch] +
cmp eax edi +
jnz loc_10C1D40  +
mov [ebp+var_4] 8000FFFFh +
jmp loc_10C1D53  +
mov ecx [ebp+arg_4] +
mov [ebp+var_4] edi +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [esi+30h] +
mov [ebx] eax +
mov eax [ebp+var_4] +
pop esi  +
jmp loc_10C1D5E  +
mov eax 80004003h +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+pv] +
call sub_10C1C5D  +
cmp dword ptr [eax+4] 0 +
jnz loc_10C1D83  +
mov eax 8000FFFFh +
jmp loc_10C1DD0  +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_10C1D92  +
mov eax 80004003h +
jmp loc_10C1DCF  +
and [ebp+pv] 0 +
mov ecx [eax] +
push ebx  +
lea edx [ebp+pv] +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
test ebx ebx +
jnz loc_10C1DCC  +
cmp [ebp+pv] eax +
jz loc_10C1DCC  +
push [ebp+pv]  +
call SysAllocString  +
push [ebp+pv]  +
mov [esi] eax +
call ds:CoTaskMemFree  +
cmp [esi] ebx +
jnz loc_10C1DCC  +
mov ebx 8007000Eh +
mov eax ebx +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+pv] +
call sub_10C1C5D  +
cmp dword ptr [eax+4] 0 +
jnz loc_10C1DF3  +
mov eax 8000FFFFh +
jmp loc_10C1E40  +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_10C1E02  +
mov eax 80004003h +
jmp loc_10C1E3F  +
and [ebp+pv] 0 +
mov ecx [eax] +
push ebx  +
lea edx [ebp+pv] +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+10h]  +
mov ebx eax +
test ebx ebx +
jnz loc_10C1E3C  +
cmp [ebp+pv] eax +
jz loc_10C1E3C  +
push [ebp+pv]  +
call SysAllocString  +
push [ebp+pv]  +
mov [esi] eax +
call ds:CoTaskMemFree  +
cmp [esi] ebx +
jnz loc_10C1E3C  +
mov ebx 8007000Eh +
mov eax ebx +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_10C1C5D  +
cmp dword ptr [eax+4] 0 +
jnz loc_10C1E63  +
mov eax 8000FFFFh +
jmp loc_10C1E6F  +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+14h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jnz loc_10C1E8A  +
mov eax 8000FFFFh +
jmp loc_10C1EE1  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ecx edi +
call sub_10C1C5D  +
mov esi eax +
cmp dword ptr [esi+4] 0 +
jz loc_10C1EC0  +
cmp dword ptr [edi+24h] 0 +
jz loc_10C1EC0  +
mov eax [edi+24h] +
lea ecx [eax+44h] +
mov eax [ecx] +
call dword ptr [eax+78h]  +
test eax eax +
jz loc_10C1EC0  +
mov ecx [edi+24h] +
mov ecx [ecx+0D8h] +
test ecx ecx +
jnz loc_10C1EC7  +
mov eax 8000FFFFh +
jmp loc_10C1EDF  +
push [ebp+arg_8]  +
mov edx [esi+8] +
push [ebp+arg_4]  +
mov esi [esi+4] +
mov edi [ecx] +
push edx  +
push esi  +
push eax  +
push ecx  +
call dword ptr [edi+0A4h]  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1054220 +
jz loc_10C1F11  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
call sub_100ABA9  +
test eax eax +
jnz loc_10C1F54  +
xor eax eax +
retn   +
mov eax [eax+154h] +
test eax eax +
jz loc_10C1F51  +
mov eax [eax+4] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10541E3  +
test byte ptr [ebp+8] 1 +
jz loc_10C1F81  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+59h] bl +
jz loc_10C1FB7  +
push ebx  +
push 30001h  +
push 127h  +
push dword ptr [esi+20h]  +
mov [esi+59h] bl +
call ds:SendMessageW  +
call ds:ReleaseCapture  +
mov ecx [esi+44h] +
cmp ecx ebx +
jz loc_10C1FC7  +
mov eax [ecx] +
push esi  +
call dword ptr [eax+0D4h]  +
cmp [esi+58h] bl +
jz loc_10C1FDA  +
push esi  +
mov ecx offset dword_10F54B0 +
call sub_10733EF  +
mov [esi+58h] bl +
mov eax [esi] +
mov ecx esi +
pop esi  +
pop ebx  +
jmp dword ptr [eax+60h]  +
***
call sub_1001F95  +
test byte ptr dword_10FD698 1 +
mov esi offset unk_10FD690 +
jnz loc_10C2026  +
or dword_10FD698 1 +
and dword ptr [ebp-4] 0 +
push 3  +
push offset stru_10FD2E0  +
mov ecx esi +
call sub_10C7395  +
push offset loc_10E80D6  +
call sub_100BFD5  +
pop ecx  +
mov eax esi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+14h] 0 +
jnz loc_10C2060  +
mov ecx [esi+4] +
mov byte ptr [esi+14h] 1 +
call sub_10C1F8D  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_10C2058  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
and dword ptr [esi+4] 0 +
mov byte ptr [esi+14h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp byte ptr [esi+59h] 0 +
push edi  +
jz loc_10C20B2  +
mov ecx [ebp+arg_0] +
mov eax [ecx+4] +
cmp eax 100h +
jb loc_10C2090  +
cmp eax 109h +
ja loc_10C2090  +
cmp dword ptr [ecx+8] 1Bh +
jz loc_10C20A5  +
cmp eax 204h +
jz loc_10C20A5  +
cmp eax 207h +
jz loc_10C20A5  +
cmp eax 201h +
jnz loc_10C211E  +
mov ecx [esi+40h] +
call sub_10C2033  +
xor eax eax +
inc eax  +
jmp loc_10C2120  +
cmp dword ptr [esi+44h] 0 +
jz loc_10C211E  +
mov edi [ebp+arg_0] +
mov eax [edi+4] +
cmp eax 100h +
jb loc_10C2118  +
cmp eax 109h +
ja loc_10C2118  +
mov ecx [esi+44h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+98h]  +
test eax eax +
jnz loc_10C20AD  +
mov ecx esi +
call sub_10C1FE8  +
push edi  +
push dword ptr [esi+20h]  +
mov ecx eax +
call sub_1009B50  +
test al al +
jnz loc_10C20AD  +
mov eax [edi+8] +
cmp eax 8 +
jz loc_10C20AD  +
cmp eax 0Dh +
jz loc_10C20AD  +
cmp eax 20h +
jbe loc_10C2118  +
cmp eax 28h +
jbe loc_10C20AD  +
cmp eax 69h +
jbe loc_10C2118  +
cmp eax 6Bh +
jbe loc_10C20AD  +
cmp eax 6Dh +
jz loc_10C20AD  +
cmp dword ptr [edi+4] 7Bh +
jz loc_10C20AD  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+44h] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi ecx +
jz loc_10C216F  +
and dword ptr [esi+44h] 0 +
test ecx ecx +
jz loc_10C215D  +
mov eax [ecx] +
push esi  +
call dword ptr [eax+0D4h]  +
test edi edi +
jnz loc_10C215D  +
mov ecx [esi+40h] +
call sub_10C2033  +
jmp loc_10C216F  +
mov [esi+44h] edi +
test edi edi +
jz loc_10C216F  +
mov eax [edi] +
push esi  +
mov ecx edi +
call dword ptr [eax+0D0h]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jz loc_10C219B  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp [ecx] eax +
jz loc_10C219B  +
add ecx 4 +
mov [ebp+arg_4] ecx +
cmp ecx [ebp+arg_8] +
jnz loc_10C218C  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+48h] +
xor edi edi +
call sub_102183C  +
mov ebx eax +
test ebx ebx +
jle loc_10C21F4  +
mov eax [esi+50h] +
mov ecx [esi+4Ch] +
lea edx [ebp+8] +
push edx  +
push eax  +
push ecx  +
lea eax [ebp-4] +
push eax  +
call sub_10C217A  +
mov esi [esi+4Ch] +
mov eax [ebp-4] +
movzx ecx byte ptr [ebp+0Ch] +
sub eax esi +
sar eax 2 +
add eax ebx +
lea eax [eax+ecx*2-1] +
cdq   +
idiv  ebx +
mov edi [esi+edx*4] +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+48h] +
mov dword ptr [esi] offset off_1005544 +
call sub_100A67D  +
mov ecx esi +
pop esi  +
jmp ??1CWnd@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10C224C  +
test byte ptr [ebp+8] 1 +
jz loc_10C2286  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CWnd@@QAE@XZ  +
mov eax [ebp+8] +
xor ebx ebx +
push ebx  +
lea ecx [esi+48h] +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_1005544 +
mov [esi+40h] eax +
mov [esi+44h] ebx +
call sub_103F490  +
mov [esi+58h] bl +
mov [esi+59h] bl +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
push ebx  +
push esi  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
push edi  +
call sub_100DFD0  +
push 64h  +
pop esi  +
push esi  +
mov edi eax +
lea eax [ebp+lParam] +
push 0  +
push eax  +
call memset  +
mov [ebp+lParam] esi +
add esp 0Ch +
xor esi esi +
mov [ebp+var_64] 10h +
test edi edi +
jle loc_10C237A  +
mov ecx [ebp+arg_0] +
lea eax [ebp+lParam] +
push eax  +
push esi  +
call sub_100E055  +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
test eax 10000000h +
jz loc_10C2375  +
test eax 8000000h +
jnz loc_10C2375  +
push 0  +
push offset off_10F72D8  +
push offset off_10F6C88  +
push 0  +
push [ebp+hWnd]  +
call ?FromHandlePermanent@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push eax  +
call __RTDynamicCast  +
add esp 14h +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10C2375  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebx+48h] +
call sub_1038786  +
mov ecx [ebp+var_4] +
push 0FFFFFFFFh  +
call sub_10A503C  +
inc esi  +
cmp esi edi +
jl loc_10C2313  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_100ABA9  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jnz loc_10C23A1  +
xor al al +
jmp loc_10C2416  +
mov eax [esi] +
push ebx  +
push ebx  +
push edi  +
push offset unk_10F5720  +
push 8000000h  +
push ebx  +
push ebx  +
mov ecx esi +
call dword ptr [eax+5Ch]  +
test eax eax +
jz loc_10C239D  +
cmp [ebp+arg_0] bl +
jnz loc_10C23F2  +
mov eax [edi+150h] +
add eax 44h +
push eax  +
mov ecx esi +
call sub_10C22DA  +
lea ecx [esi+48h] +
call sub_102183C  +
mov ecx esi +
test eax eax +
jnz loc_10C23E6  +
mov eax [esi] +
call dword ptr [eax+60h]  +
jmp loc_10C239D  +
mov eax [esi+4Ch] +
push dword ptr [eax]  +
call sub_10C212B  +
jmp loc_10C2405  +
push dword ptr [esi+20h]  +
mov byte ptr [esi+59h] 1 +
call ds:SetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
push esi  +
mov ecx offset dword_10F54B0 +
call sub_1076402  +
mov byte ptr [esi+58h] 1 +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov edi ecx +
push 5Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor esi esi +
mov [ebp-4] esi +
cmp ecx esi +
jz loc_10C244E  +
push edi  +
call sub_10C2292  +
mov esi eax +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
mov ecx esi +
mov dword ptr [ebp-4] 1 +
call sub_10C2386  +
test al al +
jnz loc_10C247B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_10C2477  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
xor al al +
jmp loc_10C2480  +
mov [edi+4] esi +
mov al 1 +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
xor dl dl +
cmp [eax+11h] dl +
jz loc_10C24A0  +
mov eax [eax+8] +
jmp loc_10C24C6  +
mov ecx [eax] +
cmp [ecx+11h] dl +
jnz loc_10C24B7  +
push ecx  +
call sub_10B5E02  +
jmp loc_10C24C6  +
mov ecx [esi] +
cmp ecx [eax] +
jnz loc_10C24BF  +
mov [esi] eax +
mov eax [eax+4] +
cmp [eax+11h] dl +
jz loc_10C24AF  +
mov ecx [esi] +
cmp [ecx+11h] dl +
jnz loc_10C24C8  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push eax  +
push [ebp+wParam]  +
push 405h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
push 40Ah  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 40Bh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
push 40Dh  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov eax offset byte_10D4E75 +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewtoo_17  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi 80070057h +
push esi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C25D2  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10C266E  +
mov eax [ebp+0Ch] +
mov eax [eax+4] +
mov ecx [edi+6Ch] +
push eax  +
mov [ebp+0Ch] eax +
call sub_1009FEC  +
cmp eax 0FFFFFFFFh +
jnz loc_10C25F5  +
push esi  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10C2664  +
movzx eax byte ptr [ebp+10h] +
dec eax  +
jz loc_10C2651  +
dec eax  +
jz loc_10C2644  +
dec eax  +
dec eax  +
jz loc_10C2637  +
sub eax 4 +
jz loc_10C262A  +
sub eax 8 +
jz loc_10C261D  +
push 80004001h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10C2661  +
push dword ptr [ebp+0Ch]  +
mov ecx [edi+6Ch] +
call near ptr byte_10C2534+1  +
jmp loc_10C265C  +
push dword ptr [ebp+0Ch]  +
mov ecx [edi+6Ch] +
call sub_1027B60  +
jmp loc_10C265C  +
push dword ptr [ebp+0Ch]  +
mov ecx [edi+6Ch] +
call near ptr dword_10B7948+2  +
jmp loc_10C265C  +
push dword ptr [ebp+0Ch]  +
mov ecx [edi+6Ch] +
call sub_10C2514  +
jmp loc_10C265C  +
push dword ptr [ebp+0Ch]  +
mov ecx [edi+6Ch] +
call near ptr dword_10C24F0+3  +
mov ecx [ebp+14h] +
mov [ecx] eax +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 10h  +
***
push 2Ch  +
mov eax offset byte_10E310F +
call sub_1001F95  +
mov ebx ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
xor edi edi +
inc edi  +
push 0  +
lea ecx [ebp-28h] +
mov [ebp-4] edi +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewtoo_18  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C277D  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] edi +
jmp loc_10C27FB  +
mov edi [ebx+30h] +
jmp loc_10C27C8  +
push 8000FFFFh  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C27E7  +
mov eax [ebp+0Ch] +
cmp [edi+18h] eax +
jnz loc_10C27C5  +
mov eax [edi+0Ch] +
cmp eax [ebp+10h] +
jz loc_10C281C  +
add edi 54h +
cmp edi [ebx+34h] +
jnz loc_10C2782  +
push 0  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea eax [ebp-28h] +
push eax  +
push offset aItoolbarDelete  +
call ds:?TraceSnapinError@@YGXPBGABVSC@mmcerror@@@Z  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
push edi  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebx-4] +
call sub_1050CE9  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jmp loc_10C27E7  +
***
push ebp  +
mov ebp esp +
mov eax [ecx+34h] +
mov ecx [ecx+38h] +
jmp loc_10C2A37  +
mov edx [eax+4] +
cmp edx [ebp+8] +
jz loc_10C2A3D  +
add eax 54h +
cmp eax ecx +
jnz loc_10C2A2C  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi+18h] 0Fh +
call sub_10718E9  +
mov eax esi +
pop esi  +
retn   +
***
push 34h  +
mov eax offset word_10E3186 +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcviewtoo_19  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
test [edi+68h] bl +
jnz loc_10C2AB5  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10C2B4E  +
mov esi [edi+34h] +
cmp esi [edi+38h] +
jz loc_10C2B41  +
mov ebx ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push 8000FFFFh  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ebx  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C2B69  +
push 0  +
push 4  +
push esi  +
lea eax [ebp-40h] +
push eax  +
mov ecx edi +
call near ptr dword_101562C+5  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call ebx  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C2B69  +
mov al [esi+14h] +
and al 0FBh +
mov [esi+14h] al +
add esi 54h +
cmp esi [edi+38h] +
jnz loc_10C2AC7  +
xor ebx ebx +
inc ebx  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov dword ptr [ebp-10h] 1 +
jmp loc_10C2B51  +
***
push 30h  +
mov eax offset byte_10E3297 +
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push 0  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcviewtoo_20  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+18h]  +
lea eax [ebp-3Ch] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C2C60  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10C2D14  +
push dword ptr [ebp+10h]  +
lea ecx [edi-4] +
push dword ptr [ebp+0Ch]  +
mov [ebp-14h] ecx +
call near ptr byte_101572C+1  +
push 8000FFFFh  +
push eax  +
mov [ebp+10h] eax +
lea eax [ebp-3Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C2D07  +
test [edi+64h] bl +
mov edi [ebp+10h] +
jz loc_10C2CEF  +
test [edi+16h] bl +
jz loc_10C2CEF  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-14h] +
call near ptr byte_1023358+1  +
test al al +
jnz loc_10C2CEF  +
push dword ptr [ebp+18h]  +
mov ecx [ebp-14h] +
push dword ptr [ebp+14h]  +
lea eax [ebp-3Ch] +
push edi  +
push eax  +
call near ptr dword_10C2554+2  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-3Ch] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10C2CFE  +
movzx eax byte ptr [edi+14h] +
movzx ecx byte ptr [ebp+14h] +
and eax ecx +
mov ecx [ebp+18h] +
mov [ecx] eax +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
add edi edi +
adc eax offset ??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C2E18  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10C2E3C  +
cmp dword ptr [esi+34h] 8 +
jb loc_10C2E23  +
mov esi [esi+20h] +
jmp loc_10C2E26  +
add esi 20h +
mov ecx [ebp+10h] +
push esi  +
call ??4CString@@QAEABV0@PBG@Z  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
xor eax offset ??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C2F2E  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10C3063  +
mov eax [edi+70h] +
lea edx [ebp-1Ch] +
push edx  +
lea edx [ebp-18h] +
push edx  +
lea edx [ebp-20h] +
push edx  +
lea ecx [eax+44h] +
mov eax [ecx] +
lea edx [ebp-44h] +
push edx  +
call dword ptr [eax+2Ch]  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C3056  +
mov eax [ebp+0Ch] +
mov eax [eax+18h] +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C3056  +
lea eax [ebp-24h] +
push eax  +
push 0  +
call sub_1050233  +
test eax eax +
jnz loc_10C2FD1  +
mov ecx [ebp+8] +
push 80004005h  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_10C3063  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+8]  +
mov eax [ebp+0Ch] +
mov eax [eax] +
mov ecx [ebp-14h] +
mov edx [ecx] +
push eax  +
push dword ptr [ebp-18h]  +
lea eax [ebp-44h] +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-20h]  +
push eax  +
call dword ptr [edx]  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
push dword ptr [ebp-24h]  +
push 0  +
call sub_105015C  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C304F  +
push offset loc_101187F  +
lea eax [ebp-44h] +
push eax  +
lea ecx [edi+18h] +
call sub_1019FF5  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-44h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-34h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
add bh bh +
adc eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
push 34h  +
mov eax offset dword_10E34A8 +
call sub_100C4D0  +
mov ebx ecx +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCmmctoolbarOnt  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push offset word_104E074  +
lea ecx [ebp-14h] +
call ??0CString@@QAE@PBG@Z  +
mov esi [ebp+0Ch] +
mov eax [esi+8] +
mov ecx [esi+4] +
mov byte ptr [ebp-4] 2 +
mov [ebp-30h] ecx +
cmp eax 0FFFFFDF8h +
jnz loc_10C322E  +
test byte ptr [esi+64h] 1 +
jnz loc_10C323E  +
cmp eax 0FFFFFDEEh +
jnz loc_10C326D  +
test byte ptr [esi+0B4h] 1 +
jz loc_10C326D  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
xor eax eax +
lea esp [ebp-50h] +
call sub_100C50D  +
retn 0Ch  +
***
test ecx ecx +
jz loc_10C3322  +
push 8000FFFFh  +
push dword ptr [ebx+90h]  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C32DB  +
xor esi esi +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
call ??1CString@@QAE@XZ  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax esi +
jmp loc_10C3262  +
***
mov ecx [ebx+90h] +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-30h]  +
lea eax [ebp-40h] +
push eax  +
call near ptr dword_10C2D80+3  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 4 +
call edi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C3322  +
push offset word_104E074  +
lea ecx [ebp-14h] +
call ??4CString@@QAEABV0@PBG@Z  +
test byte ptr dword_10FD6D4 1 +
jnz loc_10C3347  +
or dword_10FD6D4 1 +
mov ecx offset unk_10FD6B8 +
call sub_10C2A46  +
push offset loc_10E80F9  +
call sub_100BFD5  +
pop ecx  +
test byte ptr dword_10FD6D4 2 +
mov edi offset unk_10FD69C +
jnz loc_10C336E  +
or dword_10FD6D4 2 +
mov ecx edi +
call sub_1023117  +
push offset loc_10E80E5  +
call sub_100BFD5  +
pop ecx  +
cmp dword ptr [esi+8] 0FFFFFDF8h +
jnz loc_10C33CA  +
push offset dword_10C3408  +
mov ecx edi +
call sub_101D0E4  +
mov ebx [ebp-14h] +
test ebx ebx +
jnz loc_10C338E  +
xor eax eax +
jmp loc_10C33AA  +
push ebx  +
call ds:lstrlenW  +
lea edi [eax+eax+2] +
mov eax edi +
call sub_1027CCC  +
mov eax esp +
push edi  +
push ebx  +
push eax  +
call ?AfxW2AHelper@@YGPADPADPBGH@Z  +
push eax  +
mov ecx offset unk_10FD6B8 +
call sub_1075F29  +
cmp dword_10FD6D0 10h +
mov eax dword_10FD6BC +
jnb loc_10C33F6  +
mov eax offset dword_10FD6BC +
jmp loc_10C33F6  +
push offset word_100A5FC  +
mov ecx offset unk_10FD6B8 +
call sub_1075F29  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call sub_101D0E4  +
cmp dword_10FD6B4 8 +
mov eax dword_10FD6A0 +
jnb loc_10C33F6  +
mov eax offset dword_10FD6A0 +
mov [esi+0Ch] eax +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
xor esi esi +
inc esi  +
jmp loc_10C32B5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] esi +
jz loc_10C346A  +
sub [ebp+arg_8] 54h +
mov ecx [ebp+arg_8] +
sub esi 54h +
push esi  +
call sub_104F3E8  +
cmp esi [ebp+arg_0] +
jnz loc_10C3455  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10C3447  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov eax ds:?classCTreeView@CTreeView@@2UCRuntimeClass@@B +
retn   +
***
mov eax offset off_1030488 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10B166F  +
mov eax [ebp+arg_0] +
push 68h  +
mov [esi+8] eax +
lea eax [esi+0Ch] +
push 0  +
push eax  +
mov dword ptr [esi] offset off_10C34EC +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamctreeviewCk  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea eax [ebp-30h] +
push eax  +
mov ecx esi +
call sub_10B1728  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
lea eax [ebp-20h] +
jz loc_10C3567  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10C357C  +
push 1Ah  +
lea edi [esi+0Ch] +
mov esi [ebp+0Ch] +
pop ecx  +
movs   +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
inc eax  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp dword ptr [ecx+7Ch] 0 +
jz loc_10C3623  +
mov eax [ecx+7Ch] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_106D454  +
push eax  +
call dword ptr [ecx]  +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jnz loc_10C3640  +
mov eax 80004003h +
jmp loc_10C367D  +
and dword ptr [eax] 0 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1048258 +
xor edx edx +
cmps   +
jz loc_10C366E  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_106D454 +
xor edx edx +
cmps   +
jz loc_10C366E  +
mov eax 80004002h +
jmp loc_10C367B  +
mov ecx [ebp+8] +
mov [eax] ecx +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 10h +
cmp dword ptr [eax+4] 0 +
jnz loc_10C36BF  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C36BB  +
cmp byte ptr [eax+19h] 3 +
jb loc_10C36BB  +
push offset dword_106D308  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
xor eax eax +
jmp locret_10C36E8  +
mov ecx [eax+4] +
mov eax [ecx] +
push esi  +
push dword ptr [ebp+0Ch]  +
lea edx [ebp-10h] +
push edx  +
call dword ptr [eax+110h]  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-10h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 10h +
cmp dword ptr [eax+4] 0 +
jnz loc_10C372A  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C3726  +
cmp byte ptr [eax+19h] 3 +
jb loc_10C3726  +
push offset dword_106D308  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
xor eax eax +
jmp locret_10C3750  +
mov ecx [eax+4] +
mov eax [ecx] +
push esi  +
lea edx [ebp-10h] +
push edx  +
call dword ptr [eax+114h]  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-10h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 10h +
cmp dword ptr [eax+4] 0 +
jnz loc_10C3792  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C378E  +
cmp byte ptr [eax+19h] 3 +
jb loc_10C378E  +
push offset dword_106D308  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
xor eax eax +
jmp locret_10C37B8  +
mov ecx [eax+4] +
mov eax [ecx] +
push esi  +
lea edx [ebp-10h] +
push edx  +
call dword ptr [eax+118h]  +
mov ecx eax +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
lea ecx [ebp-10h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
adc eax offset IsWindow +
test eax eax +
jz loc_10C37E1  +
mov eax [esi] +
pop esi  +
retn   +
***
xor eax eax +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-18h] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push 0  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamctreeviewSc  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+0Ch] +
test edi edi +
jnz loc_10C384E  +
push 80004005h  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10C3884  +
mov ecx esi +
mov [esi+80h] edi +
call sub_100C573  +
cmp eax edi +
jz loc_10C3877  +
push 2  +
push 0  +
push eax  +
mov ecx esi +
call sub_107ECED  +
push 2  +
push 2  +
push edi  +
mov ecx esi +
call sub_107ECED  +
mov ecx [ebp+8] +
lea eax [ebp-28h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-28h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
call ?AfxGetAppModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
push eax  +
lea ecx [ebp-1Ch] +
call MFC42u_6466  +
xor ebx ebx +
inc ebx  +
push 0  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamctreeview_3  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [esi+80h] +
test edi edi +
jnz loc_10C3952  +
push ebx  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10C398E  +
mov ecx esi +
call sub_100C573  +
mov [ebp-14h] eax +
cmp edi eax +
jz loc_10C397A  +
push 2  +
push 0  +
push edi  +
mov ecx esi +
call sub_107ECED  +
push 2  +
push 2  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_107ECED  +
mov ecx [ebp+8] +
and dword ptr [esi+80h] 0 +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
mov ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+lParam]  +
mov edi ecx +
call sub_100C799  +
jmp loc_10C3A34  +
push 1  +
push esi  +
mov ecx edi +
call sub_100E959  +
push esi  +
mov ecx edi +
call sub_10C3A05  +
push 1  +
push esi  +
mov ecx edi +
call sub_1023DC6  +
mov esi eax +
test esi esi +
jnz loc_10C3A18  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub eax 25h +
jz loc_10C3A5D  +
dec eax  +
dec eax  +
jz loc_10C3A5D  +
call ?Default@CWnd@@IAEJXZ  +
jmp loc_10C3A8F  +
push dword ptr [ecx+20h]  +
call ds:GetParent  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
test eax eax +
jz loc_10C3A8F  +
movzx ecx word ptr [ebp+10h] +
movzx edx word ptr [ebp+0Ch] +
shl ecx 10h +
or ecx edx +
push ecx  +
push dword ptr [ebp+8]  +
push 104h  +
push dword ptr [eax+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamctreeview_9  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C3B34  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C3B25  +
cmp byte ptr [eax+19h] 3 +
jb loc_10C3B25  +
push offset dword_106D308  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10C3BA2  +
push dword ptr [esi+20h]  +
call ds:IsWindowVisible  +
test eax eax +
jnz loc_10C3B75  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C3B65  +
cmp byte ptr [eax+19h] 3 +
jb loc_10C3B65  +
push offset dword_106D308  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 80004005h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10C3B98  +
call ds:GetFocus  +
cmp eax [esi+20h] +
jz loc_10C3B87  +
mov ecx esi +
call ?SetFocus@CWnd@@QAEPAV1@XZ  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_107ED11  +
test eax eax +
jz loc_10C3B65  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10B19BD  +
test [ebp+arg_0] 1 +
jz loc_10C3C1D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi ecx +
jz loc_10C3C46  +
test ecx ecx +
jz loc_10C3C46  +
push 1  +
call sub_10C3C03  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101B99A  +
test byte ptr [ebp+8] 1 +
jz loc_10C3C6D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov esi ecx +
mov eax [esi+0A4h] +
mov edi [eax+0D8h] +
push ebx  +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx [edi] +
push offset dword_10FD324  +
push eax  +
push edi  +
call dword ptr [ecx+48h]  +
mov dword_10FD6D8 eax +
test eax eax +
jge loc_10C3CB1  +
xor eax eax +
jmp loc_10C3CEE  +
mov edi [ebp+arg_4] +
cmp dword_10FD324 edi +
jnz loc_10C3CC0  +
mov eax ebx +
jmp loc_10C3CEE  +
push ebx  +
mov ecx esi +
call sub_100C799  +
test eax eax +
jz loc_10C3CD9  +
push edi  +
push eax  +
mov ecx esi +
call sub_10C3C79  +
test eax eax +
jnz loc_10C3CEE  +
push ebx  +
mov ecx esi +
call sub_1055709  +
test eax eax +
jz loc_10C3CEE  +
push edi  +
push eax  +
mov ecx esi +
call sub_10C3C79  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-2Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamctreeview_7  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-3Ch] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C3D7A  +
mov ecx [ebp+8] +
lea eax [ebp-2Ch] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10C3E24  +
mov eax [edi+0A4h] +
mov ecx [eax+0D8h] +
push 8000FFFFh  +
push eax  +
push ecx  +
lea eax [ebp-3Ch] +
push eax  +
mov [ebp-18h] ecx +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-3Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C3E17  +
mov eax [ebp-18h] +
or dword ptr [ebp-14h] 0FFFFFFFFh +
or dword ptr [ebp-1Ch] 0FFFFFFFFh +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
lea edx [ebp-14h] +
push edx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+10h]  +
push eax  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-2Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C3E17  +
push ebx  +
push dword ptr [ebp-14h]  +
push dword ptr [edi+0D0h]  +
call sub_1041D22  +
mov ecx [ebp+10h] +
mov [ecx] eax +
test eax eax +
jnz loc_10C3E17  +
push 80004005h  +
lea ecx [ebp-2Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10C3E1A  +
lea eax [ebp-2Ch] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
and dword ptr [eax] 0 +
push ecx  +
mov ecx esi +
call sub_10C3C29  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 2Eh +
push esi  +
mov esi ecx +
jnz loc_10C3F17  +
mov ecx [esi+0A4h] +
push 8003h  +
call sub_108AE35  +
test eax eax +
jz loc_10C3F17  +
mov ecx esi +
call sub_100C573  +
test eax eax +
jz loc_10C3F1E  +
push eax  +
mov ecx esi +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx [esi+0A4h] +
mov ecx [ecx+0D8h] +
mov edx [ecx] +
push 0  +
push 1  +
push 9008h  +
push eax  +
push ecx  +
call dword ptr [edx+78h]  +
jmp loc_10C3F1E  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C3FE6  +
push 8004h  +
mov ecx ebx +
call sub_108AE35  +
test eax eax +
jz loc_10C3FE6  +
mov ecx esi +
call sub_100C573  +
test eax eax +
jnz loc_10C3FCA  +
mov ecx esi +
call ?Default@CWnd@@IAEJXZ  +
jmp loc_10C3FE6  +
push eax  +
mov ecx esi +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
test eax eax +
jz loc_10C3FE6  +
mov ecx [edi] +
push 0  +
push 1  +
push 9012h  +
push eax  +
push edi  +
call dword ptr [ecx+78h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtreeviewmap_0  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-34h] +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C40AE  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10C4128  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea ecx [edi+1Ch] +
call sub_100D440  +
mov edi [edi+20h] +
mov eax [ebp-14h] +
cmp eax edi +
jnz loc_10C40FC  +
push 2EEFh  +
lea eax [ebp-34h] +
push eax  +
call ds:?ScFromMMC@@YG?AVSC@mmcerror@@J@Z  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call esi  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-10h] ebx +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
jmp loc_10C412B  +
mov eax [eax+10h] +
test eax eax +
jnz loc_10C4113  +
push 8000FFFFh  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10C411E  +
mov eax [eax+8] +
mov ecx [ebp+10h] +
mov [ecx] eax +
lea eax [ebp-24h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] ebx +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCtreeviewmapSc  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+10h] +
push 80070057h  +
push edi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C41F7  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10C4239  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp+10h] +
push eax  +
lea ecx [esi+10h] +
call sub_100D440  +
mov esi [esi+14h] +
mov eax [ebp+10h] +
cmp eax esi +
jnz loc_10C4221  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10C422F  +
mov eax [eax+10h] +
test eax eax +
jz loc_10C4211  +
mov eax [eax] +
mov [edi] eax +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C4282  +
cmp byte ptr [eax+19h] 5 +
jb loc_10C4282  +
push offset dword_106D308  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx esi +
call sub_101AC07  +
mov ecx esi +
pop esi  +
jmp ?DestroyWindow@CWnd@@UAEHXZ  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamctreeview_8  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
lea ecx [esi+0A8h] +
call sub_1046CE6  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C4317  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10C4324  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_10C3A98  +
lea ecx [ebp-24h] +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101C004  +
test byte ptr [ebp+8] 1 +
jz loc_10C439F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
lea eax [ebp-14h] +
push eax  +
mov esi ecx +
call sub_10B189F  +
lea ecx [ebp-14h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C43EC  +
cmp byte ptr [eax+19h] 4 +
jb loc_10C43EC  +
push offset dword_106D308  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [esi+8] +
lea eax [ebp-4] +
push eax  +
lea eax [esi+0Ch] +
push eax  +
call sub_102618D  +
mov ecx [esi+8] +
push 0  +
call sub_1041FCA  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov eax [ecx+4] +
cmp byte ptr [eax+15h] 0 +
push edi  +
mov edi ecx +
mov byte ptr [ebp+var_4] 1 +
jnz loc_10C444C  +
mov ecx [ebx] +
cmp ecx [eax+0Ch] +
mov edi eax +
setb byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jz loc_10C4443  +
mov eax [eax] +
jmp loc_10C4446  +
mov eax [eax+8] +
cmp byte ptr [eax+15h] 0 +
jz loc_10C4430  +
cmp byte ptr [ebp+var_4] 0 +
mov ecx edi +
mov [ebp+arg_4] ecx +
jz loc_10C4483  +
mov eax [esi+4] +
cmp edi [eax] +
jnz loc_10C4478  +
push ebx  +
push edi  +
push 1  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx esi +
call sub_1022AA1  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
jmp loc_10C4498  +
lea ecx [ebp+arg_4] +
call sub_10218CE  +
mov ecx [ebp+arg_4] +
mov eax [ecx+0Ch] +
cmp eax [ebx] +
jnb loc_10C4491  +
push ebx  +
push edi  +
push [ebp+var_4]  +
jmp loc_10C4462  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101A2AD  +
test byte ptr [ebp+8] 1 +
jz loc_10C44C0  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub ecx 64h +
jmp loc_101BED1  +
***
sub ecx 4Ch +
jmp loc_101BED1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0FFFF0000h +
jz loc_10C450C  +
cmp [ebp+arg_0] 0 +
jz loc_10C4508  +
push 40h  +
push [ebp+arg_0]  +
call ?GetItemState@CTreeCtrl@@QBEIPAU_TREEITEM@@I@Z  +
test al 40h +
jnz loc_10C450C  +
xor eax eax +
jmp loc_10C450F  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0FFFF0000h +
jz loc_10C453E  +
cmp [ebp+arg_0] 0 +
jz loc_10C453A  +
push 20h  +
push [ebp+arg_0]  +
call ?GetItemState@CTreeCtrl@@QBEIPAU_TREEITEM@@I@Z  +
test al 20h +
jnz loc_10C453E  +
xor eax eax +
jmp loc_10C4541  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1005864 +
mov dword ptr [ecx+40h] offset off_106D364 +
jmp ??1CTreeCtrl@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [eax+8] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push 1  +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax+0C8h]  +
push eax  +
mov ecx esi +
call sub_10C4518  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
pop ebp  +
retn 8  +
***
mov eax ds:?messageMap@CTreeCtrl@@1UAFX_MSGMAP@@B +
retn   +
***
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0CWnd@@QAE@XZ  +
mov dword ptr [esi] offset off_10C45F4 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CTreeCtrl@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10C46D3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 1101h  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push 2  +
push 110Ah  +
push dword ptr [ecx+20h]  +
call ds:SendMessageW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10C45D5  +
mov dword ptr [esi+40h] offset off_10C474C +
xor eax eax +
mov [esi+44h] eax +
mov [esi+48h] eax +
mov [esi+4Ch] eax +
mov dword ptr [esi] offset off_1005864 +
mov dword ptr [esi+40h] offset off_106D364 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10C454A  +
test byte ptr [ebp+8] 1 +
jz loc_10C477B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push dword ptr [esi+20h]  +
call ds:IsWindow  +
test eax eax +
jz loc_10C47A4  +
mov ecx esi +
call sub_10C46DF  +
mov eax [ebp+arg_4] +
mov [esi+44h] eax +
test eax eax +
jz loc_10C47C1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jz loc_10C47C1  +
lea ecx [esi+40h] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+4]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_100C573  +
test eax eax +
jz loc_10C47E9  +
mov ecx [ebp+arg_0] +
push eax  +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
jmp loc_10C47EB  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
push 1  +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax+0C8h]  +
mov edi eax +
push edi  +
mov ecx esi +
call sub_1027213  +
push edi  +
mov ecx esi +
call sub_107ED38  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push 1  +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax+0C8h]  +
test eax eax +
jz loc_10C484E  +
push 2  +
push eax  +
mov ecx esi +
call sub_100E959  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lParam] 0FFFF0000h +
push esi  +
push edi  +
mov edi ecx +
jnz loc_10C4871  +
call sub_100C5D1  +
jmp loc_10C4890  +
push [ebp+lParam]  +
call sub_100C799  +
jmp loc_10C4890  +
push esi  +
mov ecx edi +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
cmp eax [ebp+arg_4] +
jz loc_10C4896  +
push esi  +
mov ecx edi +
call sub_1055709  +
mov esi eax +
test esi esi +
jnz loc_10C487B  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
test ebx ebx +
jz loc_10C4904  +
mov esi [ebp+arg_0] +
cmp ebx [esi+4Ch] +
jnz loc_10C48C0  +
test byte ptr [esi+48h] 1 +
jnz loc_10C4904  +
push [ebp+arg_8]  +
mov eax [esi+44h] +
mov ecx [eax] +
mov edi [esi] +
push ebx  +
push eax  +
call dword ptr [ecx+4]  +
push eax  +
push esi  +
call dword ptr [edi+0C8h]  +
mov edi eax +
test edi edi +
jz loc_10C4909  +
cmp [ebp+arg_8] 0 +
jz loc_10C48F9  +
push edi  +
mov ecx esi +
call sub_10C44E6  +
test al al +
jnz loc_10C48F9  +
push 2  +
push edi  +
mov ecx esi +
call sub_100E959  +
push ebx  +
push edi  +
mov ecx esi +
call sub_10C4858  +
jmp loc_10C4909  +
mov eax 0FFFF0000h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 250h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov esi ecx +
mov ecx [ebp+arg_4] +
mov [ebp+lParam] eax +
mov eax [esi+44h] +
push edi  +
mov [ebp+var_24C] ecx +
mov [ebp+var_248] 67h +
mov [ebp+var_224] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov [ebp+var_230] eax +
mov [ebp+var_22C] eax +
mov eax [esi+44h] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+8]  +
neg eax  +
sbb eax eax +
push 104h  +
neg eax  +
lea edx [ebp+var_20C] +
push edx  +
mov [ebp+var_228] eax +
mov eax [esi+44h] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+14h]  +
lea eax [ebp+var_20C] +
mov [ebp+var_238] eax +
lea eax [ebp+lParam] +
push eax  +
mov ecx esi +
call sub_1027255  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0FFFF0000h +
push esi  +
push edi  +
mov esi ecx +
jnz loc_10C49EF  +
test byte ptr [esi+48h] 1 +
mov eax [esi+44h] +
mov ecx [eax] +
jz loc_10C49EA  +
push dword ptr [esi+4Ch]  +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10C4A31  +
push eax  +
call dword ptr [ecx]  +
jmp loc_10C4A31  +
push [ebp+arg_0]  +
call ?GetItemData@CTreeCtrl@@QBEKPAU_TREEITEM@@@Z  +
mov ecx [esi+44h] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+8]  +
jmp loc_10C4A31  +
test byte ptr [esi+48h] 2 +
jz loc_10C4A17  +
mov eax [esi+44h] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jz loc_10C4A27  +
push edi  +
push 0FFFF0002h  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10C4915  +
mov eax [esi+44h] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jnz loc_10C4A03  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
mov esi [ebp+8] +
test byte ptr [esi+8] 2 +
jz loc_10C4A68  +
mov eax [esi+4] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jz loc_10C4B11  +
mov eax [esi+4] +
mov ecx [eax] +
push edi  +
mov edi [ebp+0Ch] +
push edi  +
push eax  +
call dword ptr [ecx+4]  +
test eax eax +
jnz loc_10C4A92  +
test byte ptr [esi+8] 1 +
jz loc_10C4A92  +
push 0FFFF0000h  +
lea ecx [esi-40h] +
mov [esi+0Ch] edi +
call sub_10C49C4  +
jmp loc_10C4B10  +
push ebx  +
push 0  +
lea edi [esi-40h] +
mov ecx [edi] +
push eax  +
push edi  +
call dword ptr [ecx+0C8h]  +
mov ebx eax +
push ebx  +
mov ecx edi +
call sub_10C44E6  +
test al al +
jz loc_10C4AEF  +
mov esi [esi+4] +
push dword ptr [ebp+0Ch]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+0Ch]  +
test eax eax +
jz loc_10C4ADC  +
push eax  +
push ebx  +
mov ecx edi +
call sub_10C4858  +
push eax  +
mov ecx edi +
call sub_10C46FA  +
test eax eax +
jnz loc_10C4AE1  +
mov eax 0FFFF0001h +
jmp loc_10C4AE1  +
mov eax 0FFFF0002h +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
push eax  +
push ebx  +
call sub_10C4915  +
jmp loc_10C4B0F  +
test ebx ebx +
jz loc_10C4B0F  +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-28h] 40h +
mov [ebp-24h] ebx +
mov dword ptr [ebp-8] 1 +
call sub_1022D4F  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+10h] +
push esi  +
mov esi [ebp+8] +
cmp ebx [esi+0Ch] +
jnz loc_10C4B3B  +
lea ecx [esi-40h] +
call sub_10C46DF  +
and dword ptr [esi+0Ch] 0 +
jmp loc_10C4B6D  +
push edi  +
push 0  +
push dword ptr [ebp+0Ch]  +
add esi 0FFFFFFC0h +
mov eax [esi] +
push esi  +
call dword ptr [eax+0C8h]  +
mov edi eax +
push edi  +
mov ecx esi +
call sub_10C44E6  +
test al al +
jz loc_10C4B6C  +
push ebx  +
push edi  +
mov ecx esi +
call sub_10C4858  +
push eax  +
mov ecx esi +
call sub_1051DBA  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp-4] eax +
test byte ptr [ebp+10h] 1 +
push edi  +
mov edi [ebp+8] +
jz loc_10C4BF4  +
push ebx  +
push esi  +
push 0  +
push dword ptr [ebp+0Ch]  +
lea esi [edi-40h] +
mov eax [esi] +
push esi  +
call dword ptr [eax+0C8h]  +
mov ebx eax +
test ebx ebx +
jz loc_10C4BF2  +
mov eax [edi+4] +
mov ecx [eax] +
push 104h  +
lea edx [ebp-20Ch] +
push edx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+14h]  +
lea eax [ebp-20Ch] +
mov [ebp-224h] eax +
lea eax [ebp-234h] +
push eax  +
mov ecx esi +
mov [ebp-230h] ebx +
mov dword ptr [ebp-234h] 1 +
call sub_1022D4F  +
pop esi  +
pop ebx  +
mov ecx [ebp-4] +
xor ecx ebp +
pop edi  +
call sub_1002492  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi [ebp+8] +
cmp dword ptr [esi+0Ch] 2 +
mov ebx [esi+3Ch] +
push edi  +
mov edi ecx +
jnz loc_10C4C2D  +
test byte ptr [esi+40h] 40h +
jnz loc_10C4C2D  +
push ebx  +
call sub_10C49C4  +
cmp dword ptr [esi+0Ch] 2 +
mov ecx [esi+5Ch] +
mov eax [edi+44h] +
mov edx [eax] +
push ecx  +
push eax  +
jnz loc_10C4C42  +
call dword ptr [edx+1Ch]  +
jmp loc_10C4C45  +
call dword ptr [edx+18h]  +
mov [ebp-0Ch] eax +
mov [ebp-10h] eax +
lea eax [ebp-28h] +
push eax  +
mov ecx edi +
mov [ebp-24h] ebx +
mov dword ptr [ebp-28h] 22h +
call sub_1022D4F  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov eax offset off_10C4C78 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+5] al +
jz loc_10C4CB0  +
mov ecx [ebp+arg_0] +
push eax  +
push 2000000h  +
push eax  +
call ?ModifyStyle@CWnd@@QAEHKKI@Z  +
call ds:ReleaseCapture  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_106D3AC +
and dword ptr [ebp-4] 0 +
push esi  +
push dword ptr [esi+4]  +
call sub_1009D38  +
mov ecx eax +
call sub_1051CD1  +
mov dword ptr [esi] offset off_1054220 +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:PatBlt  +
pop ebp  +
retn 14h  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call ??0CClientDC@@QAE@PAVCWnd@@@Z  +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+14h] 0 +
mov dword ptr [esi] offset off_1008224 +
call ?GetHalftoneBrush@CDC@@SGPAVCBrush@@XZ  +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
test eax eax +
jz loc_10C4D5F  +
mov eax [eax+4] +
mov [esi+14h] eax +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:PtVisible  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:RectVisible  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:TextOutW  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:ExtTextOutW  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+nTabOrigin]  +
push [ebp+lpnTabStopPositions]  +
push [ebp+nTabPositions]  +
push [ebp+nCount]  +
push [ebp+lpString]  +
push [ebp+Y]  +
push [ebp+X]  +
push dword ptr [ecx+4]  +
call ds:TabbedTextOutW  +
mov ecx [ebp+arg_0] +
movsx edx ax +
shr eax 10h +
cwde   +
mov [ecx+4] eax +
mov [ecx] edx +
mov eax ecx +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10C4E40  +
mov eax [eax+4] +
push [ebp+nHeight]  +
push [ebp+nWidth]  +
push [ebp+Y]  +
push [ebp+X]  +
push [ebp+nCount]  +
push [ebp+lpData]  +
push [ebp+lpOutputFunc]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:GrayStringW  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx+4]  +
call ds:Escape  +
pop ebp  +
retn 10h  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1008224 +
mov eax [esi+14h] +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_10C4EBB  +
push eax  +
call ?FromHandle@CGdiObject@@SGPAV1@PAX@Z  +
push eax  +
mov ecx esi +
call ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CClientDC@@UAE@XZ  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10C4E8B  +
test byte ptr [ebp+8] 1 +
jz loc_10C4EEB  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+4] 0 +
jnz loc_10C4F29  +
mov eax [ebp+arg_0] +
mov edx [eax+4] +
push esi  +
mov esi [eax] +
push edi  +
mov edi [eax+0Ch] +
mov eax [eax+8] +
push 5A0049h  +
sub edi edx +
push edi  +
sub eax esi +
push eax  +
push edx  +
push esi  +
add ecx 4Ch +
call sub_10C4CFB  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi+20h]  +
mov edi ecx +
call ds:UpdateWindow  +
push dword ptr [esi+20h]  +
call ds:SetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
cmp byte ptr [edi+4] 0 +
jnz loc_10C4F7C  +
mov ecx esi +
call ?GetStyle@CWnd@@QBEKXZ  +
mov ecx 2000000h +
test eax ecx +
jz loc_10C4F7C  +
push 0  +
push 0  +
push ecx  +
mov ecx esi +
call ?ModifyStyle@CWnd@@QAEHKKI@Z  +
mov byte ptr [edi+5] 1 +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push esi  +
push eax  +
mov dword ptr [esi] offset off_106D3AC +
mov [esi+4] eax +
mov [esi+8] ecx +
call sub_1009D38  +
mov ecx eax +
call sub_103A8F1  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10C4CBF  +
test byte ptr [ebp+8] 1 +
jz loc_10C4FE7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_10C4F89  +
mov dword ptr [esi] offset off_10C5018 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_10C4F89  +
mov dword ptr [esi] offset off_10C504C +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_10C4F89  +
mov dword ptr [esi] offset off_10C5080 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10C4CBF  +
test byte ptr [ebp+8] 1 +
jz loc_10C50AB  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov ebx ecx +
mov [ebp-14h] ebx +
xor esi esi +
push esi  +
lea eax [ebp-10h] +
push eax  +
push esi  +
push 26h  +
mov [ebp-4] esi +
mov dword ptr [ebx] offset off_1008AD4 +
call ds:SystemParametersInfoW  +
test eax eax +
jnz loc_10C50E9  +
xor al al +
jmp loc_10C50EF  +
cmp [ebp-10h] esi +
setnz al  +
mov [ebx+4] al +
mov eax [ebp+8] +
push 11h  +
pop ecx  +
mov byte ptr [ebx+5] 0 +
mov esi eax +
lea edi [ebx+8] +
movs   +
push dword ptr [eax]  +
mov ecx ebx +
call sub_10C4F32  +
push eax  +
lea ecx [ebx+4Ch] +
call sub_10C4D21  +
mov eax [ebp+8] +
xor esi esi +
mov [ebx+64h] esi +
mov [ebx+68h] esi +
mov [ebx+6Ch] esi +
mov eax [eax+14h] +
push esi  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
mov [ebx+70h] eax +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCviewtrackerCv  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebx+8]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C518B  +
lea ecx [ebp-24h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
call ds:GetFocus  +
mov edi eax +
cmp edi esi +
jz loc_10C51C6  +
push 0Ch  +
call sub_100ABF0  +
mov [ebp+8] eax +
mov byte ptr [ebp-4] 4 +
cmp eax esi +
jz loc_10C51B4  +
push edi  +
push ebx  +
mov ecx eax +
call sub_10C4FF3  +
jmp loc_10C51B6  +
xor eax eax +
mov byte ptr [ebp-4] 2 +
mov [ebx+64h] eax +
cmp eax esi +
jnz loc_10C51C6  +
call ?AfxThrowMemoryException@@YGXXZ  +
push 0Ch  +
call sub_100ABF0  +
mov [ebp+8] eax +
mov byte ptr [ebp-4] 5 +
cmp eax esi +
jz loc_10C51E8  +
mov ecx [ebx+8] +
push dword ptr [ecx+20h]  +
mov ecx eax +
push ebx  +
call sub_10C5059  +
jmp loc_10C51EA  +
xor eax eax +
mov byte ptr [ebp-4] 2 +
mov [ebx+68h] eax +
cmp eax esi +
jz loc_10C51C1  +
mov ecx [ebx+8] +
call ?GetTopLevelFrame@CWnd@@QBEPAVCFrameWnd@@XZ  +
cmp eax esi +
jz loc_10C5232  +
mov edi [eax+20h] +
cmp edi esi +
jz loc_10C5232  +
push 0Ch  +
call sub_100ABF0  +
mov [ebp+8] eax +
mov byte ptr [ebp-4] 6 +
cmp eax esi +
jz loc_10C5225  +
push edi  +
push ebx  +
mov ecx eax +
call sub_10C5025  +
jmp loc_10C5227  +
xor eax eax +
mov byte ptr [ebp-4] 2 +
mov [ebx+6Ch] eax +
cmp eax esi +
jz loc_10C51C1  +
lea eax [ebx+1Ch] +
push eax  +
mov ecx ebx +
call sub_10C4EF7  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1008AD4 +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4Ch] +
call sub_10C4E8B  +
mov dword ptr [esi] offset off_100257C +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10C528F  +
test byte ptr [ebp+8] 1 +
jz loc_10C52E1  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov ecx [ebp-1Ch] +
call ?Delete@CException@@QAEXXZ  +
mov eax offset loc_10C5324 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+6Ch] +
push edi  +
test ecx ecx +
jz loc_10C535E  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov ecx [esi+64h] +
test ecx ecx +
jz loc_10C536B  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov ecx [esi+68h] +
test ecx ecx +
jz loc_10C5378  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
lea edi [esi+1Ch] +
push edi  +
mov ecx esi +
call sub_10C4EF7  +
lea ebx [esi+8] +
push dword ptr [ebx]  +
mov ecx esi +
call sub_10C4C95  +
movzx eax byte ptr [esi+4] +
test al al +
jz loc_10C53A9  +
cmp [ebp+arg_0] 0 +
jnz loc_10C53A9  +
mov ecx [esi+70h] +
mov [edi] ecx +
mov [ebp+arg_0] 1 +
cmp [ebp+arg_0] 0 +
push eax  +
setnz al  +
movzx eax al +
push eax  +
push ebx  +
call dword ptr [esi+48h]  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+4]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ds:GetCapture  +
push eax  +
call ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z  +
lea ebx [esi+8] +
cmp eax [ebx] +
jz loc_10C5418  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C540F  +
cmp byte ptr [eax+19h] 5 +
jb loc_10C540F  +
push offset loc_106D398  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
push 0  +
mov ecx esi +
call sub_10C5347  +
mov eax [esi+0Ch] +
cmp [ebp+arg_0] eax +
jge loc_10C5426  +
cmp dword ptr [esi+3Ch] 0 +
jnz loc_10C5444  +
mov eax [esi+2Ch] +
cmp [ebp+arg_0] eax +
jl loc_10C5444  +
mov eax [esi+14h] +
cmp [ebp+arg_0] eax +
jle loc_10C543C  +
cmp dword ptr [esi+40h] 0 +
jnz loc_10C5444  +
mov eax [esi+34h] +
cmp [ebp+arg_0] eax +
jle loc_10C5447  +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_0] +
lea edi [esi+1Ch] +
cmp eax [edi] +
jz loc_10C54A4  +
push edi  +
mov ecx esi +
call sub_10C4EF7  +
mov eax [ebp+arg_0] +
sub eax [edi] +
push 0  +
push eax  +
push edi  +
call ds:OffsetRect  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C548E  +
cmp byte ptr [eax+19h] 5 +
jb loc_10C548E  +
push dword ptr [edi]  +
push offset loc_106D398  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
cmp byte ptr [esi+4] 0 +
jz loc_10C549C  +
push 1  +
push 1  +
push ebx  +
call dword ptr [esi+48h]  +
push edi  +
mov ecx esi +
call sub_10C4EF7  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov eax 102h +
cmp ecx eax +
jnz loc_10C54CE  +
mov edx [ebp+10h] +
cmp dword ptr [edx] 1Bh +
jz loc_10C54D3  +
cmp ecx 8 +
jnz loc_10C553D  +
cmp ecx eax +
jnz loc_10C54FD  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C552D  +
cmp byte ptr [eax+19h] 5 +
jb loc_10C552D  +
push offset loc_106D398  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10C552D  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C552D  +
cmp byte ptr [eax+19h] 5 +
jb loc_10C552D  +
call ds:GetFocus  +
push eax  +
mov eax lpDst +
push offset loc_106D398  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov ecx [esi+8] +
push 0  +
call sub_10C5347  +
mov eax [ebp+18h] +
mov byte ptr [eax] 0 +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
cmp dword ptr [eax] 1Fh +
push esi  +
mov esi ecx +
jnz loc_10C5587  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C557D  +
cmp byte ptr [eax+19h] 5 +
jb loc_10C557D  +
push offset loc_106D398  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [esi+8] +
push 0  +
call sub_10C5347  +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov eax [eax] +
sub eax 200h +
push esi  +
mov esi ecx +
jz loc_10C55DB  +
dec eax  +
dec eax  +
jnz loc_10C55EF  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C55CF  +
cmp byte ptr [eax+19h] 5 +
jb loc_10C55CF  +
push offset loc_106D398  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov ecx [esi+8] +
push 1  +
call sub_10C5347  +
jmp loc_10C55EF  +
mov eax [ebp+14h] +
movsx ecx word ptr [eax] +
movsx eax word ptr [eax+2] +
push eax  +
push ecx  +
mov ecx [esi+8] +
call sub_10C53CE  +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
mov eax offset off_10304B0 +
retn   +
***
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_10C5631  +
mov eax 80004003h +
jmp loc_10C5654  +
push 0  +
push 0  +
push dword_10F52F0  +
push dword ptr [ebp+8]  +
call ds:SendMessageW  +
mov [esi] eax +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
xor ebx ebx +
push ebx  +
lea ecx [ebp-28h] +
mov [ebp-14h] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCdochostuihand  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+20h] +
push 80070057h  +
push edi  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C56E7  +
lea ecx [ebp-28h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 1Ch  +
mov [edi] ebx +
cmp dword_10F55CC ebx +
jnz loc_10C56C5  +
call sub_100ABA9  +
mov edi 8000FFFFh +
push edi  +
push eax  +
mov [ebp-18h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C56C5  +
mov ecx [ebp-18h] +
lea edx [ebp-10h] +
push edx  +
add ecx 0C4h +
mov eax [ecx] +
lea edx [ebp-38h] +
push edx  +
call dword ptr [eax+4]  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C56C5  +
push edi  +
push dword ptr [ebp-10h]  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C56C5  +
mov ecx [ebp-10h] +
mov eax [ecx] +
lea edx [ebp-38h] +
push edx  +
call dword ptr [eax+3Ch]  +
push eax  +
lea ecx [ebp-28h] +
mov dword ptr [ebp-4] 6 +
mov dword ptr [ebp-14h] 2 +
call esi  +
lea ecx [ebp-38h] +
mov dword ptr [ebp-4] 5 +
mov [ebp-14h] ebx +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call esi  +
mov ecx [ebp+20h] +
mov [ecx] eax +
lea ecx [ebp-28h] +
call esi  +
jmp loc_10C56CE  +
***
call sub_1001F95  +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCdochostuiha_0  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+10h] +
mov edi [ebp+0Ch] +
push 80070057h  +
push esi  +
push edi  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp-1Ch] +
test al al +
jz loc_10C58D4  +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
mov dword ptr [edi] 2 +
and dword ptr [esi] 0 +
jmp loc_10C58B5  +
***
mov eax [ecx+90h] +
retn   +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcwebviewctr  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea edi [esi+90h] +
mov ebx [edi] +
push 80070057h  +
mov ecx esi +
call sub_10BA222  +
push eax  +
push ebx  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C5A12  +
mov ecx esi +
xor ebx ebx +
call ?GetStyle@CWnd@@QBEKXZ  +
test al 1 +
jz loc_10C59DF  +
mov ecx esi +
call sub_10BA222  +
mov ebx [eax+310h] +
test ebx ebx +
jnz loc_10C59DF  +
push 80004003h  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10C5A12  +
mov ecx edi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+38h]  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C5A12  +
test ebx ebx +
jz loc_10C5A12  +
push 0  +
push 0  +
mov ecx ebx +
call sub_10180D7  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcwebviewc_0  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
add esi 90h +
mov eax [esi] +
push 80070057h  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C5AE3  +
mov ecx esi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
push eax  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_10C5B49  +
mov eax 80004003h +
jmp loc_10C5B86  +
and dword ptr [esi] 0 +
and dword ptr [ebp+0Ch] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ecx]  +
call near ptr byte_10C561C+1  +
mov edi [ebp+0Ch] +
mov [ebp-10h] eax +
test eax eax +
jl loc_10C5B75  +
mov eax [edi] +
push esi  +
push dword ptr [ebp+8]  +
push edi  +
call dword ptr [eax]  +
mov [ebp-10h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test edi edi +
jz loc_10C5B83  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax [ebp-10h] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_10076A4 +
mov dword ptr [esi+4] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp loc_10A8E2D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10C5BD8  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10C5BBD  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+24h] +
test eax eax +
jz loc_10C5C2F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+4] +
pop esi  +
jmp sub_101A846  +
***
mov dword ptr [esi] offset off_10076A4 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCdochostuiha_1  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C5CDB  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10C5D08  +
lea ecx [esi+24h] +
cmp dword ptr [ecx] 0 +
jz loc_10C5CF3  +
push 8000FFFFh  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10C5CFE  +
push dword ptr [ebp+0Ch]  +
call sub_1010F11  +
lea eax [ebp-20h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
xor ebx ebx +
mov [ebp-14h] ebx +
mov edi [ebp+8] +
push ebx  +
mov ecx edi +
mov [ebp-4] ebx +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor esi esi +
inc esi  +
push offset aCamcwebviewc_5  +
mov ecx edi +
mov [ebp-4] ebx +
mov [ebp-14h] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
mov ecx edi +
mov [ebp-4] esi +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
mov ecx edi +
call esi  +
cmp eax ebx +
jge loc_10C5E62  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10C5F2A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10C5F2A  +
push eax  +
push offset dword_10C5F38  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10C5F2A  +
mov [ebp-10h] ebx +
push 0Bh  +
pop eax  +
mov [ebp-24h] ax +
or eax 0FFFFFFFFh +
mov dword ptr [ebp-4] 2 +
mov [ebp-1Ch] ax +
lea eax [ebp-10h] +
push eax  +
push offset nullsub_14  +
push offset dword_10C5F48  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 3 +
call ds:IUnknown_QueryService  +
push eax  +
mov ecx edi +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx edi +
call esi  +
cmp eax ebx +
jge loc_10C5EC4  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10C5F12  +
cmp byte ptr [ecx+19h] 1 +
jb loc_10C5F12  +
push eax  +
push offset dword_10C5F38  +
push 0Bh  +
jmp loc_10C5F07  +
mov eax [ebp-10h] +
mov ecx [eax] +
push ebx  +
lea edx [ebp-24h] +
push edx  +
push ebx  +
push 5  +
push offset dword_10C5FC0  +
push eax  +
call dword ptr [ecx+10h]  +
push eax  +
mov ecx edi +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov ecx edi +
call esi  +
cmp eax ebx +
jge loc_10C5F12  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10C5F12  +
cmp byte ptr [ecx+19h] 1 +
jb loc_10C5F12  +
push eax  +
push offset dword_10C5F38  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
lea ecx [ebp-24h] +
call sub_100EBF1  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_10C5F2A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcwebviewc_1  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx esi +
call ?GetStyle@CWnd@@QBEKXZ  +
test al 1 +
jnz loc_10C602E  +
push 80004005h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10C60CB  +
lea edi [esi+90h] +
mov ebx [edi] +
push 80070057h  +
mov ecx esi +
call sub_10BA222  +
push eax  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C60CB  +
mov ecx esi +
call sub_10BA222  +
mov ebx [eax+310h] +
test ebx ebx +
jnz loc_10C608D  +
push 80004003h  +
jmp loc_10C6020  +
mov ecx esi +
call sub_10C593F  +
push 1  +
lea eax [ebp-0Dh] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-0Dh] 0 +
call sub_10B0D90  +
cmp byte ptr [ebp-0Dh] 0 +
jnz loc_10C60CB  +
mov ecx edi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcwebviewc_2  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx esi +
call ?GetStyle@CWnd@@QBEKXZ  +
test al 1 +
jnz loc_10C615A  +
push 80004005h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10C61F7  +
lea edi [esi+90h] +
mov ebx [edi] +
push 80070057h  +
mov ecx esi +
call sub_10BA222  +
push eax  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C61F7  +
mov ecx esi +
call sub_10BA222  +
mov ebx [eax+310h] +
test ebx ebx +
jnz loc_10C61B9  +
push 80004003h  +
jmp loc_10C614C  +
mov ecx esi +
call sub_10C593F  +
push 1  +
lea eax [ebp-0Dh] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-0Dh] 0 +
call sub_10B0E7F  +
cmp byte ptr [ebp-0Dh] 0 +
jnz loc_10C61F7  +
mov ecx edi +
call sub_100A5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
push offset dword_1049C64  +
call sub_104902B  +
mov esi eax +
test esi esi +
jl loc_10C6279  +
mov eax [ebp-10h] +
push dword ptr [ebp+8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10C628A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10C5B93  +
test [ebp+arg_0] 1 +
jz loc_10C62B3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_101209C +
mov dword ptr [esi+4] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp loc_10C5C1D  +
***
mov eax 80004001h +
retn 18h  +
***
mov eax 80004001h +
retn 24h  +
***
mov eax 80004001h +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10C632C  +
push ecx  +
call sub_100EDC2  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCdochostuiha_2  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
push 80070057h  +
push esi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
lea ecx [ebp-20h] +
test al al +
jz loc_10C63D2  +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
jmp loc_10C63E4  +
mov [esi] ebx +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@J@Z  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 1Ch  +
***
enter 15FFh 24h +
sbb eax 4D830100h +
cld   +
dec dword ptr [ebp-0F741BB3h]  +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 20h  +
***
push 20h  +
mov eax offset byte_10D7A1B +
call sub_1001F95  +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCdochostuiha_3  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+0Ch] +
push 80070057h  +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C655A  +
lea ecx [ebp-1Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
and dword ptr [esi] 0 +
xor esi esi +
inc esi  +
jmp loc_10C6543  +
***
call sub_1001F95  +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCdochostuiha_4  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+8] +
mov eax [esi+24h] +
push 8000FFFFh  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C664D  +
lea ecx [ebp-1Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
mov eax [esi+24h] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_10C662B  +
***
call sub_1001F95  +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCdochostuiha_5  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+14h] +
push 80070057h  +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C6738  +
lea ecx [ebp-1Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 10h  +
and dword ptr [esi] 0 +
xor esi esi +
inc esi  +
jmp loc_10C6721  +
***
call sub_1001F95  +
push 0  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCdochostuiha_6  +
lea ecx [ebp-1Ch] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi [ebp+10h] +
push 80070057h  +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C681A  +
lea ecx [ebp-1Ch] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
and dword ptr [esi] 0 +
xor esi esi +
inc esi  +
jmp loc_10C6803  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10C6310  +
pop ebp  +
retn 0Ch  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10C68BD  +
mov eax 80004003h +
jmp loc_10C692B  +
push 38h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_10C68E9  +
push esi  +
call near ptr dword_10C5C38+5  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_10C68FF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10C68F9 +
retn   +
***
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10C6924  +
lea ecx [esi+8] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10C6917  +
xor ebx ebx +
test ebx ebx +
jz loc_10C6927  +
push 1  +
mov ecx esi +
call sub_10C6299  +
xor esi esi +
jmp loc_10C6927  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
and dword ptr [esi+24h] 0 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCamcwebviewc_3  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
lea ebx [esi+90h] +
mov edi [ebx] +
push 80070057h  +
mov ecx esi +
call sub_10BA222  +
push eax  +
push edi  +
lea eax [ebp-70h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-70h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C6B16  +
and dword ptr [ebp-10h] 0 +
mov ecx esi +
call ?GetStyle@CWnd@@QBEKXZ  +
test al 1 +
jz loc_10C6A65  +
mov ecx esi +
call sub_10BA222  +
mov eax [eax+310h] +
mov [ebp-10h] eax +
test eax eax +
jnz loc_10C6A65  +
push 80004003h  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10C6B16  +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
call sub_101DD5D  +
and dword ptr [ebp-48h] 0 +
push 3  +
pop eax  +
mov [ebp-50h] ax +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-60h] +
call sub_104D719  +
xor eax eax +
lea edi [ebp-40h] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp-40h] ax +
lea edi [ebp-30h] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp-30h] ax +
mov ecx ebx +
mov byte ptr [ebp-4] 6 +
call sub_100A5CF  +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
lea edx [ebp-40h] +
push edx  +
lea edx [ebp-60h] +
push edx  +
lea edx [ebp-50h] +
push edx  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+2Ch]  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C6AED  +
mov ecx [ebp-10h] +
test ecx ecx +
jz loc_10C6AED  +
push 1  +
push 0  +
call sub_10180D7  +
lea ecx [ebp-30h] +
call sub_100EBF1  +
lea ecx [ebp-40h] +
call sub_100EBF1  +
lea ecx [ebp-60h] +
call sub_100EBF1  +
lea ecx [ebp-50h] +
call sub_100EBF1  +
push dword ptr [ebp+8]  +
call SysFreeString  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10C6B90  +
test esi esi +
jz loc_10C6B90  +
push 1  +
mov ecx esi +
call sub_10C6299  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10C62BF  +
test [ebp+arg_0] 1 +
jz loc_10C6BB7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp fword ptr [eax+6Ch]  +
***
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10059DC +
mov dword ptr [esi+44h] offset off_1050034 +
mov dword ptr [esi+48h] offset off_101A3CC +
mov eax [esi+98h] +
mov dword ptr [ebp-4] 2 +
test eax eax +
jz loc_10C6C25  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+90h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10C6C39  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+84h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_10C6C4D  +
push eax  +
call sub_104E4B9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_104E783  +
call sub_1001FCF  +
retn   +
***
retn   +
***
sub ecx 48h +
jmp loc_10C6D39  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10C6CA0  +
test esi esi +
jz loc_10C6CA0  +
push 1  +
mov ecx esi +
call sub_10C6B9D  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov edi [ebp+8] +
xor esi esi +
cmp edi esi +
jnz loc_10C6CC9  +
mov eax 80004003h +
jmp loc_10C6D2C  +
push 28h  +
mov [edi] esi +
mov dword ptr [ebp-18h] 8007000Eh +
mov [ebp-14h] esi +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_10C6CEE  +
push esi  +
mov ecx eax +
call near ptr dword_10C6BC0+3  +
jmp loc_10C6CF0  +
xor eax eax +
mov esi eax +
jmp loc_10C6D00  +
mov eax offset loc_10C6CFA +
retn   +
***
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jz loc_10C6D25  +
lea ecx [esi+8] +
call sub_1041AAF  +
mov ebx eax +
test ebx ebx +
jl loc_10C6D18  +
xor ebx ebx +
test ebx ebx +
jz loc_10C6D28  +
push 1  +
mov ecx esi +
call sub_10C6B9D  +
xor esi esi +
jmp loc_10C6D28  +
mov ebx [ebp-18h] +
mov [edi] esi +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10C6BE9  +
test byte ptr [ebp+8] 1 +
jz loc_10C6D57  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [esi] offset off_10059DC +
mov dword ptr [esi+44h] offset off_1050034 +
mov dword ptr [esi+48h] offset off_101A3CC +
call sub_1048911  +
xor eax eax +
mov [esi+90h] eax +
mov [esi+94h] eax +
mov [esi+98h] eax +
mov eax esi +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
push 0  +
push offset dword_100CA88  +
push 0  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_104FD39  +
pop ebp  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
and dword ptr [ebp-14h] 0 +
push 0  +
lea ecx [ebp-30h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
xor ebx ebx +
inc ebx  +
push offset aCamcwebviewc_6  +
lea ecx [ebp-30h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [edi] +
push 80070057h  +
mov ecx edi +
call dword ptr [eax+110h]  +
push eax  +
mov ecx edi +
call sub_10BA222  +
push eax  +
lea eax [ebp-40h] +
push eax  +
call sub_100C5A1  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-40h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C6E8F  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_10C725B  +
lea eax [ebp-50h] +
push eax  +
push dword ptr [edi+20h]  +
call ds:GetClientRect  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push 56000000h  +
push offset word_100A5FC  +
lea eax [ebp-50h] +
push eax  +
push dword ptr [edi+20h]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+110h]  +
mov ecx eax +
call sub_10487C1  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
push offset dword_106DB70  +
mov byte ptr [ebp-4] 3 +
call ds:StringFromCLSID  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C6F06  +
mov ecx [ebp+8] +
lea eax [ebp-30h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_10C7253  +
mov eax [edi] +
push 0  +
push 0  +
push dword ptr [ebp-10h]  +
mov ecx edi +
call dword ptr [eax+110h]  +
mov ecx eax +
add ecx 4 +
call near ptr dword_10C6DB0+2Ah  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C6EF1  +
lea ecx [edi+90h] +
call sub_100A5E6  +
push eax  +
mov eax [edi] +
push offset dword_106DB60  +
mov ecx edi +
call dword ptr [eax+110h]  +
mov ecx eax +
add ecx 4 +
call near ptr dword_10C5B2C+3  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C6EF1  +
mov eax [edi+90h] +
push 80070057h  +
push eax  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C6EF1  +
push dword ptr [edi+90h]  +
lea eax [ebp-40h] +
push eax  +
mov ecx edi +
call near ptr dword_10C5DA4+1Dh  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C6EF1  +
mov ecx edi +
call ?GetStyle@CWnd@@QBEKXZ  +
test al bl +
jz loc_10C704D  +
mov ecx edi +
call sub_10BA222  +
mov eax [eax+310h] +
push 80070057h  +
push eax  +
lea eax [ebp-40h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 6 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C6EF1  +
mov ecx edi +
call sub_10BA222  +
mov eax [eax+310h] +
mov [eax+18h] edi +
and dword ptr [ebp-18h] 0 +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 7 +
call sub_100A5E6  +
push eax  +
lea eax [ebp-40h] +
push eax  +
mov ecx edi +
call sub_10BA222  +
mov ecx eax +
call sub_109426F  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 8 +
call esi  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jz loc_10C70A9  +
lea eax [ebp-30h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] ebx +
jmp loc_10C7242  +
and dword ptr [ebp-1Ch] 0 +
lea eax [ebp-1Ch] +
push eax  +
call near ptr dword_10C6CA8+5  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C7094  +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_10C70E3  +
push 8000FFFFh  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10C7097  +
***
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-20h] +
call sub_100D2CF  +
mov esi [ebp-20h] +
mov byte ptr [ebp-4] 9 +
test esi esi +
jz loc_10C70D3  +
push dword ptr [ebp-18h]  +
mov ecx [ebp-1Ch] +
lea eax [ebp-40h] +
push eax  +
call near ptr dword_10C5C60+3  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0Ah +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 9 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C7228  +
mov eax [edi] +
push esi  +
mov ecx edi +
call dword ptr [eax+110h]  +
mov ecx eax +
add ecx 4 +
call near ptr dword_10C6240+3  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C7228  +
mov ecx edi +
call ?GetStyle@CWnd@@QBEKXZ  +
shr eax 1 +
test al bl +
jz loc_10C7228  +
lea eax [ebp-1Ch] +
push eax  +
call near ptr dword_10C689C+5  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C7228  +
mov ecx [ebp-1Ch] +
push edi  +
lea eax [ebp-40h] +
push eax  +
call near ptr dword_10A8BF8+3  +
push eax  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0Bh +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 9 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C7228  +
push dword ptr [ebp-1Ch]  +
lea eax [edi+98h] +
push eax  +
call sub_100CA9D  +
mov eax [edi+98h] +
mov ecx [edi+90h] +
add edi 94h +
push edi  +
push (offset dword_106DB48+8)  +
push eax  +
push ecx  +
call sub_10BB178  +
push eax  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-30h] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C7228  +
cmp dword ptr [edi] 0 +
jnz loc_10C7228  +
push 8000FFFFh  +
lea ecx [ebp-30h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10C722B  +
lea eax [ebp-30h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [esi] +
push esi  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 7 +
call dword ptr [eax+8]  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_10C7253  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-10h] +
call sub_100C763  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
push 20h  +
mov eax offset byte_10D7A1B +
call sub_1001F95  +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCamcwebviewc_7  +
lea ecx [ebp-1Ch] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1048C32  +
cmp eax 0FFFFFFFFh +
jnz loc_10C7318  +
or ebx eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call near ptr dword_10C6DFC+3  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-2Ch] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-1Ch] +
call ds:??BSC@mmcerror@@QBE_NXZ  +
test al al +
jnz loc_10C7301  +
push ebx  +
push ebx  +
push 200h  +
mov ecx esi +
call ?ModifyStyleEx@CWnd@@QAEHKKI@Z  +
jmp loc_10C7301  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
mov dword ptr [esi] offset off_1002614 +
call ds:CreateAcceleratorTableW  +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10504ED  +
test byte ptr [ebp+8] 1 +
jz loc_10C73D8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp ds:?OnFilePrintSetup@CWinApp@@IAEXXZ  +
***
jmp ds:?OnFileOpen@CWinApp@@IAEXXZ  +
***
jmp ds:?OnFileNew@CWinApp@@IAEXXZ  +
***
jmp ds:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CDocManager@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?RegisterShellFileTypes@CDocManager@@UAEXH@Z  +
***
jmp ds:?GetOpenDocumentCount@CDocManager@@UAEHXZ  +
***
jmp ds:?OnDDECommand@CDocManager@@UAEHPAG@Z  +
***
jmp ds:?OnFileNew@CDocManager@@UAEXXZ  +
***
jmp ds:?OnFileOpen@CDocManager@@UAEXXZ  +
***
jmp ds:?GetRuntimeClass@CMenu@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?OnFilePrintPreview@CView@@IAEXXZ  +
***
jmp ds:?OnFilePrint@CView@@IAEXXZ  +
***
jmp ds:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CStatic@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CBitmap@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CBrush@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CHeaderCtrl@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CListView@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CImageList@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?DelayUpdateFrameMenu@CFrameWnd@@UAEXPAUHMENU__@@@Z  +
***
jmp ds:?GetRuntimeClass@CToolBarCtrl@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?SetRadio@CCmdUI@@UAEXH@Z  +
***
jmp ds:?GetRuntimeClass@CEdit@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CDialog@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?OnNotify@CFileDialog@@MAEHIJPAJ@Z  +
***
jmp ds:?GetRuntimeClass@CPen@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CRgn@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?OnQueryNewPalette@CFrameWnd@@IAEHXZ  +
***
jmp ds:?GetRuntimeClass@CButton@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CPtrList@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CProgressCtrl@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CCriticalSection@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CTreeView@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CTreeCtrl@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?GetRuntimeClass@CClientDC@@UBEPAUCRuntimeClass@@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call loc_10C7F9C  +
jmp $+2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+0Ch] 0 +
mov [esi+4] eax +
mov eax [ebp+arg_4] +
mov dword ptr [esi] offset off_106D430 +
mov [esi+8] eax +
test eax eax +
jz loc_10C7F63  +
cmp [ebp+arg_8] 0 +
jz loc_10C7F63  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov dword ptr [esi] offset off_106D430 +
test eax eax +
jz loc_10C7F87  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_10C7F95  +
push esi  +
call ds:LocalFree  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push 0  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-10h] +
push dword ptr [ebp+8]  +
call sub_10C7F35  +
push offset dword_10C7FC4  +
lea eax [ebp-10h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_106D430 +
mov ecx [eax+4] +
mov [esi+4] ecx +
mov eax [eax+8] +
and dword ptr [esi+0Ch] 0 +
mov [esi+8] eax +
test eax eax +
jz loc_10C8004  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10C7F6F  +
test byte ptr [ebp+8] 1 +
jz loc_10C802A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0exception@@QAE@XZ  +
cmp dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_106B70C +
jnz loc_10C805A  +
cmp dword ptr [esi+8] 0 +
jnz loc_10C805A  +
mov eax off_10FD3B0 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
push 44h  +
mov eax offset dword_10D7F78 +
call sub_1001F95  +
push offset aStringTooLong  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1076041  +
push offset dword_10E8AC0  +
lea eax [ebp-50h] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
push 44h  +
mov eax offset dword_10D7F78 +
call sub_1001F95  +
push offset aInvalidStringP  +
lea ecx [ebp-28h] +
call sub_10760DD  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-50h] +
call sub_1075FC8  +
push offset dword_10EA2DC  +
lea eax [ebp-50h] +
push eax  +
mov dword ptr [ebp-50h] offset off_106BEE4 +
call _CxxThrowException  +
int 3  +
call sub_100A4F0  +
and dword ptr [ebp-4] 0 +
dec dword ptr [ebp+10h]  +
js loc_10C815D  +
mov ecx [ebp+8] +
sub ecx [ebp+0Ch] +
mov [ebp+8] ecx +
call dword ptr [ebp+14h]  +
jmp loc_10C811D  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_10C8154  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
call ds:?terminate@@YAXXZ  +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100A4DC  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1002492  +
push offset dword_10F52D8  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
jmp ds:?what@exception@@UBEPBDXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset aInvalidParamet  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002492  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10C8213  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10C8342  +
cmp dword ptr [eax+10h] 3 +
jnz loc_10C8342  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_10C833C  +
cmp eax 19930521h +
jz loc_10C833C  +
cmp eax 19930522h +
jz loc_10C833C  +
cmp eax 1994000h +
jnz loc_10C8342  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10C836E  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10C836A  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_10C83CF  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_10C83C7  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_10C83D1  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10C83B7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_100A4F0  +
and dword ptr [ebp-4] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_10C8358  +
pop ecx  +
test eax eax +
jz loc_10C8438  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_10C8392  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10C8438  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_10C8441  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_100A4DC  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10F59A0 eax +
mov dword_10F599C ecx +
mov dword_10F5998 edx +
mov dword_10F5994 ebx +
mov dword_10F5990 esi +
mov dword_10F598C edi +
mov word_10F59B8 ss +
mov word_10F59AC cs +
mov word_10F5988 ds +
mov word_10F5984 es +
mov word_10F5980 fs +
mov word_10F597C gs +
pushf   +
pop dword_10F59B0  +
mov eax [ebp+0] +
mov dword_10F59A4 eax +
mov eax [ebp+4] +
mov dword_10F59A8 eax +
lea eax [ebp+8] +
mov dword_10F59B4 eax +
mov eax [ebp-320h] +
mov dword_10F58F0 10001h +
mov eax dword_10F59A8 +
mov dword_10F58AC eax +
mov dword_10F58A0 0C0000409h +
mov dword_10F58A4 1 +
mov eax dword_10F52D8 +
mov [ebp-328h] eax +
mov eax dword_10F52DC +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C85D7  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C85D7  +
push offset nullsub_2  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp+var_8] esi +
call ds:GetCurrentThreadId  +
mov ecx [esi] +
xor ecx eax +
test ecx 0FFFFFFFCh +
jnz loc_10C8616  +
mov eax [esi] +
inc eax  +
mov [ebp+var_4] eax +
mov ecx [ebp+var_8] +
mov edx [ebp+var_4] +
mov eax [ecx] +
cmpxchg [ecx] edx +
jz loc_10C861D  +
jmp loc_10C860E  +
mov ecx esi +
call sub_10C8E76  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
test eax eax +
jz loc_10C864A  +
movzx edx word ptr [ecx+0Ch] +
cmp dx 0FFFFh +
jz loc_10C864A  +
push [ebp+arg_0]  +
mov ecx [ecx+4] +
movsx edx dx +
push dword ptr [ecx+edx*4+20h]  +
call dword ptr [eax+2Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+70h] +
mov eax [ecx] +
push 4  +
push [ebp+arg_0]  +
call dword ptr [eax+4]  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_18] ecx +
push 0Fh  +
pop ecx  +
lea edi [ebp+var_54] +
movs   +
mov ecx [ebp+arg_0] +
lea ebx [ebp+var_54] +
mov [ebp+var_14] ebx +
call sub_100F57F  +
mov ecx [ebp+arg_4] +
call sub_100F57F  +
mov esi [ebp+arg_14] +
and [ebp+arg_14] 0 +
mov edi [ebp+arg_14] +
shl edi 2 +
mov [ebp+var_10] edi +
add edi ebx +
mov ecx [edi] +
cmp ecx 1E3603Bh +
jz loc_10C8770  +
mov edx [ebp+arg_C] +
mov eax ecx +
and eax edx +
cmp eax [ebp+arg_8] +
jnb loc_10C86DB  +
lea eax [edx+edx] +
or eax 1 +
and eax ecx +
cmp eax [ebp+arg_10] +
jnz loc_10C8723  +
cmp [ebp+var_4] 7 +
jnz loc_10C8705  +
mov ecx esi +
mov esi [esi+1Ch] +
mov [ebp+var_C] ecx +
call sub_100F57F  +
mov ecx [ebp+var_C] +
mov eax [ebp+arg_4] +
and [ebp+var_4] 0 +
mov [eax+1Ch] ecx +
mov [ebp+arg_4] ecx +
jmp loc_10C8708  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_4] +
mov eax [edi] +
mov [ecx+edx*4] eax +
mov eax [ebp+var_10] +
lea eax [eax+ebx+20h] +
mov ebx [eax] +
mov [ecx+edx*4+20h] ebx +
inc edx  +
mov [ebp+var_4] edx +
jmp loc_10C8764  +
cmp [ebp+var_8] 7 +
jnz loc_10C8748  +
mov ecx esi +
mov esi [esi+1Ch] +
mov [ebp+var_C] ecx +
call sub_100F57F  +
mov ecx [ebp+var_C] +
mov eax [ebp+arg_0] +
and [ebp+var_8] 0 +
mov [eax+1Ch] ecx +
mov [ebp+arg_0] ecx +
jmp loc_10C874B  +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_8] +
mov eax [edi] +
mov [ecx+edx*4] eax +
mov eax [ebp+var_10] +
lea eax [eax+ebx+20h] +
mov ebx [eax] +
mov [ecx+edx*4+20h] ebx +
inc edx  +
mov [ebp+var_8] edx +
and dword ptr [eax] 0 +
mov ebx [ebp+var_14] +
mov dword ptr [edi] 1E3603Bh +
inc [ebp+arg_14]  +
cmp [ebp+arg_14] 7 +
jl loc_10C86AE  +
mov ecx ebx +
lea eax [ebx+1Ch] +
mov ebx [eax] +
lea edx [ebp+var_54] +
mov [ebp+var_14] ebx +
cmp ecx edx +
jz loc_10C8792  +
mov [eax] esi +
mov esi ecx +
test ebx ebx +
jz loc_10C87A9  +
jmp loc_10C86AA  +
mov ecx [ebp+var_18] +
mov eax esi +
mov esi [esi+1Ch] +
push eax  +
call sub_10C8653  +
test esi esi +
jnz loc_10C879B  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov edx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
add esi 4 +
jmp loc_10C87EC  +
xor ecx ecx +
cmp dword ptr [esi+ecx*4] 1E3603Bh +
jz loc_10C87E5  +
inc ecx  +
cmp ecx 7 +
jl loc_10C87D6  +
cmp ecx 7 +
jnz loc_10C87F3  +
mov esi eax +
mov eax [esi+1Ch] +
test eax eax +
jnz loc_10C87D4  +
push edi  +
xor edi edi +
cmp dword ptr [esi+edi*4] 1E3603Bh +
jz loc_10C8805  +
inc edi  +
cmp edi 7 +
jl loc_10C87F6  +
test edx edx +
jz loc_10C88CE  +
push ebx  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
lea ebx [eax+ecx*4] +
mov eax 1E3603Bh +
cmp [ebx] eax +
jz loc_10C889E  +
cmp edi 7 +
jz loc_10C883B  +
jmp loc_10C885A  +
mov esi [esi+1Ch] +
xor edi edi +
cmp [esi+edi*4] eax +
jz loc_10C885A  +
inc edi  +
cmp edi 7 +
jl loc_10C8830  +
cmp dword ptr [esi+1Ch] 0 +
jnz loc_10C882B  +
mov eax [ebp+arg_8] +
mov edi eax +
mov eax [eax+1Ch] +
mov ecx edi +
mov [ebp+arg_8] eax +
call sub_100F57F  +
mov [esi+1Ch] edi +
mov esi edi +
xor edi edi +
cmp edi 6 +
ja loc_10C88AB  +
test esi esi +
jz loc_10C88AB  +
push edi  +
mov ecx esi +
call sub_10549FC  +
test al al +
jz loc_10C88AB  +
mov eax [ebx] +
mov ecx [ebp+arg_0] +
mov [esi+edi*4] eax +
mov eax [ebp+arg_4] +
lea eax [eax+ecx*4+20h] +
mov ecx [eax] +
mov [esi+edi*4+20h] ecx +
and dword ptr [eax] 0 +
mov dword ptr [ebx] 1E3603Bh +
jmp loc_10C8898  +
cmp dword ptr [esi+edi*4] 1E3603Bh +
jz loc_10C889E  +
inc edi  +
cmp edi 7 +
jnz loc_10C888F  +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 7 +
jl loc_10C8812  +
mov eax [ebp+arg_4] +
mov edx eax +
add eax 1Ch +
mov ecx [eax] +
mov [ebp+arg_4] ecx +
cmp edx [ebp+var_4] +
jz loc_10C88C5  +
mov ebx [ebp+arg_8] +
mov [eax] ebx +
mov [ebp+arg_8] edx +
test ecx ecx +
jnz loc_10C880E  +
pop ebx  +
cmp [ebp+arg_8] 0 +
pop edi  +
jz loc_10C88EB  +
mov eax [ebp+arg_8] +
mov esi [eax+1Ch] +
mov ecx [ebp+var_8] +
push eax  +
mov [ebp+arg_8] esi +
call sub_10C8653  +
test esi esi +
jnz loc_10C88D5  +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov eax offset aClkrhashdefaul +
retn   +
***
mov ecx [ecx+70h] +
mov eax [ecx] +
push esi  +
push 4  +
push 3Ch  +
call dword ptr [eax]  +
mov esi eax +
test esi esi +
jz loc_10C8954  +
mov ecx esi +
call sub_100F57F  +
mov eax esi +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
mov ebx ecx +
cmp byte ptr [ebx+75h] 0 +
jz loc_10C8976  +
lea ecx [ebx+18h] +
call sub_1017C03  +
mov eax [ebx+64h] +
cmp eax [ebx+38h] +
ja loc_10C8994  +
cmp byte ptr [ebx+75h] 0 +
jz loc_10C898C  +
lea ecx [ebx+18h] +
call sub_1017B9B  +
push 0FFFFFF9Eh  +
pop eax  +
jmp loc_10C8B8C  +
mov ecx [ebx+50h] +
test ecx ecx +
jbe loc_10C89A1  +
dec ecx  +
mov [ebx+50h] ecx +
jmp loc_10C89B6  +
dec dword ptr [ebx+58h]  +
mov ecx [ebx+58h] +
shr dword ptr [ebx+48h] 1 +
xor edx edx +
inc edx  +
shl edx cl +
dec edx  +
shr dword ptr [ebx+4Ch] 1 +
mov [ebx+50h] edx +
push esi  +
push edi  +
lea esi [eax-1] +
push esi  +
mov ecx ebx +
call sub_105445E  +
push dword ptr [ebx+50h]  +
mov edi eax +
mov ecx ebx +
mov [ebp+var_C] edi +
mov [ebx+64h] esi +
call sub_105445E  +
push eax  +
mov ecx ebx +
mov [ebp+var_8] eax +
call sub_10545AF  +
push edi  +
mov ecx ebx +
call sub_10545AF  +
xor esi esi +
lea eax [edi+4] +
mov edx 1E3603Bh +
jmp loc_10C8A05  +
xor ecx ecx +
cmp [eax+ecx*4] edx +
jz loc_10C89FC  +
inc esi  +
inc ecx  +
cmp ecx 7 +
jl loc_10C89F6  +
mov eax [eax+1Ch] +
test eax eax +
jnz loc_10C89F4  +
mov eax [ebp+var_8] +
add eax 4 +
jz loc_10C8A26  +
xor ecx ecx +
cmp [eax+ecx*4] edx +
jnz loc_10C8A19  +
dec esi  +
inc ecx  +
cmp ecx 7 +
jl loc_10C8A13  +
mov eax [eax+1Ch] +
test eax eax +
jnz loc_10C8A11  +
and [ebp+var_4] 0 +
test esi esi +
jle loc_10C8AB8  +
mov ecx ebx +
call sub_10C8937  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10C8A5A  +
cmp esi 7 +
jle loc_10C8AB8  +
mov ecx ebx +
call sub_10C8937  +
test eax eax +
jnz loc_10C8AB2  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_10C8653  +
mov ecx [ebx+58h] +
inc dword ptr [ebx+50h]  +
mov eax [ebx+50h] +
xor edx edx +
inc edx  +
shl edx cl +
cmp eax edx +
jnz loc_10C8A87  +
mov eax [ebx+48h] +
and dword ptr [ebx+50h] 0 +
add eax eax +
or eax 1 +
mov [ebx+48h] eax +
inc ecx  +
add eax eax +
or eax 1 +
mov [ebx+58h] ecx +
mov [ebx+4Ch] eax +
inc dword ptr [ebx+64h]  +
push edi  +
mov ecx ebx +
call sub_1054616  +
push [ebp+var_8]  +
mov ecx ebx +
call sub_1054616  +
cmp byte ptr [ebx+75h] 0 +
jz loc_10C8AAA  +
lea ecx [ebx+18h] +
call sub_1017B9B  +
push 0FFFFFF9Eh  +
pop eax  +
jmp loc_10C8B8A  +
mov ecx [ebp+var_4] +
mov [ecx+1Ch] eax +
push 0Fh  +
lea esi [edi+4] +
pop ecx  +
lea edi [ebp+var_48] +
movs   +
mov ecx [ebp+var_C] +
add ecx 4 +
call sub_100F57F  +
push [ebp+var_C]  +
mov ecx ebx +
call sub_1054616  +
mov eax [ebx+64h] +
test [ebx+3Ch] eax +
jnz loc_10C8B01  +
mov ecx [ebx+34h] +
shr eax cl +
mov ecx [ebx+54h] +
push dword ptr [ecx+eax*4]  +
mov ecx ebx +
call sub_1017FB7  +
mov ecx [ebx+34h] +
mov eax [ebx+64h] +
shr eax cl +
mov ecx [ebx+54h] +
and dword ptr [ecx+eax*4] 0 +
mov eax [ebx+5Ch] +
mov ecx [ebx+38h] +
imul ecx eax +
shr ecx 1 +
cmp [ebx+64h] ecx +
ja loc_10C8B5D  +
cmp eax 8 +
jbe loc_10C8B5D  +
shr eax 1 +
mov edi eax +
push edi  +
mov ecx ebx +
call sub_100F3E3  +
mov esi eax +
test esi esi +
jz loc_10C8B5D  +
xor eax eax +
test edi edi +
jbe loc_10C8B3C  +
mov ecx [ebx+54h] +
mov ecx [ecx+eax*4] +
mov [esi+eax*4] ecx +
inc eax  +
cmp eax edi +
jb loc_10C8B2E  +
xor eax eax +
cmp [ebx+5Ch] eax +
jbe loc_10C8B50  +
mov ecx [ebx+54h] +
and dword ptr [ecx+eax*4] 0 +
inc eax  +
cmp eax [ebx+5Ch] +
jb loc_10C8B43  +
mov ecx ebx +
call sub_101836D  +
mov [ebx+54h] esi +
mov [ebx+5Ch] edi +
cmp byte ptr [ebx+75h] 0 +
jz loc_10C8B6B  +
lea ecx [ebx+18h] +
call sub_1017B9B  +
push [ebp+var_4]  +
lea eax [ebp+var_48] +
push eax  +
push [ebp+var_8]  +
mov ecx ebx +
call sub_10C87BB  +
push [ebp+var_8]  +
mov ecx ebx +
mov esi eax +
call sub_1054616  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_100F563  +
push 3Eh  +
lea edi [esi+40h] +
pop ebx  +
mov ecx edi +
call sub_100F563  +
add edi 40h +
dec ebx  +
jns loc_10C8BA6  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_100F563  +
lea edi [esi+40h] +
mov ebx 1FEh +
mov ecx edi +
call sub_100F563  +
add edi 40h +
dec ebx  +
jns loc_10C8BD2  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ecx +
cmp byte ptr [esi+75h] 0 +
push edi  +
jz loc_10C8C05  +
lea ecx [esi+18h] +
call sub_1017C03  +
mov ecx [esi+34h] +
mov edi [esi+64h] +
mov edx 100000h +
mov eax edx +
shl eax cl +
dec eax  +
cmp edi eax +
jnb loc_10C8C9E  +
mov eax [esi+5Ch] +
cmp eax 8 +
jb loc_10C8C9E  +
cmp eax edx +
jnb loc_10C8C9E  +
cmp ecx edx +
ja loc_10C8C9E  +
mov edx eax +
shl edx cl +
cmp edi edx +
jb loc_10C8C70  +
lea ebx [eax+eax] +
push ebx  +
mov ecx esi +
call sub_100F3E3  +
mov edi eax +
test edi edi +
jz loc_10C8C9E  +
xor eax eax +
cmp [esi+5Ch] eax +
jbe loc_10C8C63  +
mov ecx [esi+54h] +
mov ecx [ecx+eax*4] +
mov [edi+eax*4] ecx +
mov ecx [esi+54h] +
and dword ptr [ecx+eax*4] 0 +
inc eax  +
cmp eax [esi+5Ch] +
jb loc_10C8C4D  +
mov ecx esi +
call sub_101836D  +
mov [esi+54h] edi +
mov [esi+5Ch] ebx +
mov ecx [esi+58h] +
mov edi [esi+50h] +
inc dword ptr [esi+64h]  +
xor ebx ebx +
inc ebx  +
shl ebx cl +
mov ecx [esi+34h] +
or ebx edi +
mov eax ebx +
shr eax cl +
mov ecx [esi+54h] +
cmp dword ptr [ecx+eax*4] 0 +
jnz loc_10C8CC1  +
mov ecx esi +
call sub_100F512  +
test eax eax +
jnz loc_10C8CB4  +
dec dword ptr [esi+64h]  +
cmp byte ptr [esi+75h] 0 +
jz loc_10C8CAC  +
lea ecx [esi+18h] +
call sub_1017B9B  +
push 0FFFFFF9Eh  +
pop eax  +
jmp loc_10C8D8E  +
mov ecx [esi+34h] +
mov edx ebx +
shr edx cl +
mov ecx [esi+54h] +
mov [ecx+edx*4] eax +
push edi  +
mov ecx esi +
call sub_105445E  +
push ebx  +
mov ecx esi +
mov edi eax +
call sub_105445E  +
push edi  +
mov ecx esi +
mov [ebp+var_8] eax +
call sub_10545AF  +
push [ebp+var_8]  +
mov ecx esi +
call sub_10545AF  +
xor eax eax +
mov [ebp+var_C] eax +
mov [ebp+var_4] eax +
cmp [edi+20h] eax +
jz loc_10C8D0F  +
mov ecx esi +
call sub_10C8937  +
mov [ebp+var_C] eax +
test eax eax +
jnz loc_10C8D0F  +
dec dword ptr [esi+64h]  +
mov [ebp+var_4] 0FFFFFF9Eh +
jmp loc_10C8D3A  +
mov ecx [esi+58h] +
inc dword ptr [esi+50h]  +
xor eax eax +
inc eax  +
shl eax cl +
cmp [esi+50h] eax +
jnz loc_10C8D3A  +
mov eax [esi+48h] +
and dword ptr [esi+50h] 0 +
add eax eax +
or eax 1 +
mov [esi+48h] eax +
inc ecx  +
add eax eax +
or eax 1 +
mov [esi+58h] ecx +
mov [esi+4Ch] eax +
cmp byte ptr [esi+75h] 0 +
mov eax [esi+50h] +
mov [ebp+var_14] eax +
mov eax [esi+48h] +
mov [ebp+var_10] eax +
jz loc_10C8D54  +
lea ecx [esi+18h] +
call sub_1017B9B  +
cmp [ebp+var_4] 0 +
jnz loc_10C8D79  +
push [ebp+var_C]  +
mov eax [ebp+var_8] +
push ebx  +
push [ebp+var_10]  +
add eax 4 +
push [ebp+var_14]  +
mov ecx esi +
push eax  +
lea eax [edi+4] +
push eax  +
call sub_10C8670  +
mov [ebp+var_4] eax +
push [ebp+var_8]  +
mov ecx esi +
call sub_1054616  +
push edi  +
mov ecx esi +
call sub_1054616  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call ds:GetCurrentThreadId  +
push 0Dh  +
xor edx edx +
pop ecx  +
div  ecx +
fld  ds:dbl_10C8DB0[edx*8] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 4 +
jb loc_10C8E2F  +
push 64h  +
pop eax  +
jmp loc_10C8E36  +
mov eax ds:dword_10C8E3C[eax*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_10C8E66  +
call dword_10F53B4  +
test eax eax +
jnz loc_10C8E6D  +
pop ebp  +
jmp ds:Sleep  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
movzx eax word_10FD3B8 +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
mov [ebp+var_1] 0 +
mov [ebp+var_8] eax +
call sub_10C8D98  +
fimul  [ebp+var_8] +
call _ftol2_sse  +
mov [ebp+var_8] eax +
mov [ebp+var_C] edi +
mov [ebp+var_14] esi +
cmp dword_10F53C0 1 +
jbe loc_10C8F0C  +
cmp word_10FD3B8 0 +
jz loc_10C8F0C  +
mov edx [ebp+var_8] +
jmp loc_10C8F04  +
dec edx  +
jns loc_10C8F02  +
push edi  +
call sub_10C8E51  +
fild  [ebp+var_8] +
fmul  dbl_10FD3C0 +
call _ftol2_sse  +
cmp eax 2710h +
mov [ebp+var_8] eax +
jle loc_10C8EE8  +
mov [ebp+var_8] 2710h +
push 64h  +
pop eax  +
cmp [ebp+var_8] eax +
jg loc_10C8EF3  +
mov [ebp+var_8] eax +
push [ebp+var_C]  +
mov edx [ebp+var_8] +
call sub_10C8E1D  +
mov edi eax +
jmp loc_10C8F04  +
pause   +
mov eax [esi] +
test eax eax +
jz loc_10C8F1C  +
jmp loc_10C8EC0  +
push edi  +
call sub_10C8E51  +
push [ebp+var_C]  +
call sub_10C8E1D  +
mov edi eax +
mov eax [esi] +
test eax eax +
jnz loc_10C8F47  +
call ds:GetCurrentThreadId  +
and eax 0FFFFFFFDh +
or eax 1 +
mov [ebp+var_10] eax +
mov ecx [ebp+var_14] +
mov edx [ebp+var_10] +
mov eax 0 +
cmpxchg [ecx] edx +
test eax eax +
setz al  +
jmp loc_10C8F49  +
xor al al +
test al al +
jz loc_10C8F51  +
mov [ebp+var_1] 1 +
inc [ebp+var_C]  +
cmp [ebp+var_1] 0 +
jz loc_10C8EA8  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+var_C] 0 +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_10C8D98  +
movzx eax word_10FD3C8 +
mov [ebp+var_8] eax +
fild  [ebp+var_8] +
fmulp st(1) st +
call _ftol2_sse  +
and [ebp+var_8] 0 +
mov [ebp+var_4] eax +
cmp dword_10F53C0 2 +
jb loc_10C8FAB  +
cmp word_10FD3C8 0 +
jnz loc_10C8FAE  +
xor eax eax +
inc eax  +
lea ebx [eax-1] +
test ebx ebx +
jl loc_10C900C  +
cmp [ebp+arg_0] 0 +
mov esi [edi] +
jz loc_10C8FE2  +
mov eax 0FFFFh +
mov [ebp+var_18] edi +
mov [ebp+var_10] esi +
test esi eax +
jnz loc_10C9007  +
mov ecx esi +
or ecx eax +
mov [ebp+var_14] ecx +
mov ecx [ebp+var_18] +
mov edx [ebp+var_14] +
mov eax [ebp+var_10] +
cmpxchg [ecx] edx +
jmp loc_10C9003  +
mov [ebp+var_10] edi +
mov [ebp+var_18] esi +
test esi 0FFFF8000h +
jnz loc_10C9007  +
lea eax [esi+1] +
mov [ebp+var_14] eax +
mov ecx [ebp+var_10] +
mov edx [ebp+var_14] +
mov eax [ebp+var_18] +
cmpxchg [ecx] edx +
cmp esi eax +
jz loc_10C9053  +
pause   +
dec ebx  +
jns loc_10C8FB5  +
push [ebp+var_C]  +
call sub_10C8E51  +
push [ebp+var_8]  +
call sub_10C8E1D  +
fild  [ebp+var_4] +
mov [ebp+var_C] eax +
fmul  dbl_10FD3D0 +
call _ftol2_sse  +
mov [ebp+var_4] eax +
mov eax 2710h +
cmp [ebp+var_4] eax +
jle loc_10C903D  +
mov [ebp+var_4] eax +
push 64h  +
pop eax  +
cmp [ebp+var_4] eax +
jg loc_10C9048  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
inc [ebp+var_8]  +
jmp loc_10C8F98  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+var_C] edi +
mov esi [edi] +
lea eax [esi+10000h] +
mov [ebp+var_4] esi +
mov [ebp+var_8] eax +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
cmpxchg [ecx] edx +
cmp esi eax +
jz loc_10C9091  +
pause   +
jmp loc_10C906E  +
push 1  +
mov ecx edi +
call sub_10C8F67  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
and [ebp+var_10] 0 +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_10C8D98  +
movzx eax word_10FD3D8 +
mov [ebp+var_C] eax +
fild  [ebp+var_C] +
fmulp st(1) st +
call _ftol2_sse  +
and [ebp+var_8] 0 +
mov [ebp+var_4] eax +
mov ebx 0FFFFh +
cmp dword_10F53C0 2 +
jb loc_10C90EC  +
cmp word_10FD3D8 0 +
jnz loc_10C90EF  +
xor eax eax +
inc eax  +
dec eax  +
mov [ebp+var_C] eax +
js loc_10C9196  +
cmp [ebp+arg_0] 1 +
jnz loc_10C9137  +
mov eax [edi+4] +
mov [ebp+var_1C] edi +
test eax eax +
jnz loc_10C912E  +
mov esi [edi] +
mov [ebp+var_14] esi +
test esi ebx +
jnz loc_10C912E  +
mov eax esi +
or eax ebx +
mov [ebp+var_18] eax +
mov ecx [ebp+var_1C] +
mov edx [ebp+var_18] +
mov eax [ebp+var_14] +
cmpxchg [ecx] edx +
cmp esi eax +
jz loc_10C91DD  +
mov ecx edi +
call sub_106F635  +
jmp loc_10C9187  +
cmp [ebp+arg_0] 2 +
mov esi [edi] +
mov [ebp+var_14] edi +
mov [ebp+var_1C] esi +
jnz loc_10C9162  +
test esi 0FFFF8000h +
jnz loc_10C9185  +
lea eax [esi+1] +
mov [ebp+var_18] eax +
mov ecx [ebp+var_14] +
mov edx [ebp+var_18] +
mov eax [ebp+var_1C] +
cmpxchg [ecx] edx +
jmp loc_10C917D  +
mov eax esi +
and eax ebx +
cmp eax ebx +
jz loc_10C9185  +
lea eax [esi+1] +
mov [ebp+var_18] eax +
mov ecx [ebp+var_14] +
mov edx [ebp+var_18] +
mov eax [ebp+var_1C] +
cmpxchg [ecx] edx +
cmp esi eax +
jnz loc_10C9185  +
mov al 1 +
jmp loc_10C9187  +
xor al al +
test al al +
jnz loc_10C9200  +
pause   +
dec [ebp+var_C]  +
jns loc_10C90F9  +
push [ebp+var_10]  +
call sub_10C8E51  +
push [ebp+var_8]  +
call sub_10C8E1D  +
fild  [ebp+var_4] +
mov [ebp+var_10] eax +
fmul  dbl_10FD3E0 +
call _ftol2_sse  +
mov [ebp+var_4] eax +
mov eax 2710h +
cmp [ebp+var_4] eax +
jle loc_10C91C7  +
mov [ebp+var_4] eax +
push 64h  +
pop eax  +
cmp [ebp+var_4] eax +
jg loc_10C91D2  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
inc [ebp+var_8]  +
jmp loc_10C90D9  +
call ds:GetCurrentThreadId  +
and eax 0FFFFFFFDh +
or eax 1 +
add edi 4 +
mov [ebp+arg_0] eax +
mov [ebp+var_1C] edi +
mov ecx [ebp+var_1C] +
mov edx [ebp+arg_0] +
mov eax [ecx] +
cmpxchg [ecx] edx +
jnz loc_10C91FA  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+var_C] edi +
mov esi [edi] +
lea eax [esi+10000h] +
mov [ebp+var_4] esi +
mov [ebp+var_8] eax +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
cmpxchg [ecx] edx +
cmp esi eax +
jz loc_10C923E  +
pause   +
jmp loc_10C921B  +
push 1  +
mov ecx edi +
call sub_10C90A3  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ecx 2 +
jbe loc_10C9273  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+arg_0] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_10C92A8  +
test [ebp+arg_8] 1000h +
jz loc_10C92A8  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_10C92F0  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_10C92D8  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_10C92F0  +
test esi esi +
jbe loc_10C9309  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_10C9309  +
test [ebp+arg_8] 800h +
jz loc_10C9309  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_18] +
push eax  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi+4]  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10C936C  +
or eax 0FFFFFFFFh +
jmp loc_10C9371  +
sub eax [esi+4] +
sar eax 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+10h] 0 +
push edi  +
jz loc_10C93B6  +
mov edi 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C93F1  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C93F1  +
push offset dword_101D758  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10C93F1  +
mov eax [esi+8] +
mov edx [esi+4] +
push eax  +
push edx  +
call sub_100AEA2  +
mov edi eax +
test edi edi +
jge loc_10C93F1  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C93F1  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C93F1  +
push edi  +
push dword ptr [esi+8]  +
push offset dword_101D758  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100A72C +
call sub_100A6F0  +
test byte ptr [ebp+8] 1 +
jz loc_10C941E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
mov edi ecx +
cmp [esi+10h] ebx +
jz loc_10C9469  +
mov ebx 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C94CA  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C94CA  +
push offset dword_101D758  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10C94CA  +
push dword ptr [esi+4]  +
call sub_100AD38  +
test eax eax +
jz loc_10C9490  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C94CA  +
cmp byte ptr [eax+19h] 4 +
jb loc_10C94CA  +
push offset dword_101D758  +
push 0Dh  +
jmp loc_10C945C  +
mov ecx edi +
call sub_100A6F0  +
push esi  +
mov ecx edi +
call sub_10C937B  +
mov ebx eax +
test ebx ebx +
jge loc_10C94CA  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C94CA  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C94CA  +
push ebx  +
push offset dword_101D758  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+8] +
lea ebx [edx+esi] +
cmp ebx eax +
jbe loc_10C94F7  +
mov esi eax +
sub esi edx +
cmp edx eax +
jbe loc_10C94FD  +
xor esi esi +
mov eax [edi+4] +
push esi  +
lea eax [eax+edx*2] +
push eax  +
call sub_1016345  +
mov ebx eax +
test ebx ebx +
jge loc_10C9539  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C9539  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C9539  +
push ebx  +
push dword ptr [edi+8]  +
push esi  +
push offset dword_101D758  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10C9315  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
sub eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
push edx  +
call sub_10C94D8  +
pop ebp  +
retn 8  +
***
call ds:__imp_GetLastError  +
test eax eax +
jnz loc_10C9579  +
mov eax 54Fh +
test eax eax +
jle locret_10C9585  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
call sub_1001F95  +
mov esi [ebp+8] +
mov eax [esi+8] +
test eax eax +
jnz loc_10C95AE  +
mov eax 80004005h +
call sub_1001FCF  +
retn 8  +
mov ecx [ebp+0Ch] +
mov eax 409h +
mov [ecx] ax +
mov eax lpDst +
mov ebx offset lpDst +
mov edi offset sub_10434C0 +
cmp eax ebx +
jz loc_10C95E8  +
cmp byte ptr [eax+19h] 4 +
jb loc_10C95E8  +
push dword ptr [esi+4]  +
push edi  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
mov eax lpDst +
cmp byte_10FD6F4 0 +
jnz loc_10C961D  +
push offset ModuleName  +
mov byte_10FD6F4 1 +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_10C9618  +
push offset aGetthreadprefe  +
push eax  +
call ds:__imp_GetProcAddress  +
mov dword_10FD6F0 eax +
mov eax lpDst +
cmp dword_10FD6F0 0 +
jnz loc_10C9646  +
cmp eax ebx +
jz loc_10C963E  +
cmp byte ptr [eax+19h] 3 +
jb loc_10C963E  +
push edi  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
xor eax eax +
inc eax  +
jmp loc_10C95A6  +
lea ecx [ebp-60h] +
call sub_100AD56  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-4Ch] +
call sub_100AD56  +
push 5Ch  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_10C934D  +
mov edi eax +
lea ecx [ebp-60h] +
cmp edi 0FFFFFFFFh +
jz loc_10C9704  +
lea eax [edi+1] +
push eax  +
push esi  +
call sub_10C9547  +
mov [ebp-20h] eax +
test eax eax +
jge loc_10C96CC  +
mov eax lpDst +
cmp eax ebx +
jz loc_10C96AA  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C96AA  +
push dword ptr [ebp-20h]  +
push offset sub_10434C0  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov esi [ebp-20h] +
lea ecx [ebp-4Ch] +
mov byte ptr [ebp-4] 0 +
call sub_100A77D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-60h] +
call sub_100A77D  +
mov eax esi +
jmp loc_10C95A6  +
push edi  +
push esi  +
lea ecx [ebp-4Ch] +
call sub_104387C  +
mov esi eax +
test esi esi +
jge loc_10C9778  +
mov eax lpDst +
cmp eax ebx +
jz loc_10C96AD  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C96AD  +
push esi  +
push offset sub_10434C0  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10C96AD  +
push esi  +
call sub_10C942A  +
mov esi eax +
test esi esi +
jge loc_10C9729  +
mov eax lpDst +
cmp eax ebx +
jz loc_10C96AD  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C96AD  +
push esi  +
push offset sub_10434C0  +
push 10h  +
jmp loc_10C96F7  +
mov esi 104h +
push esi  +
lea ecx [ebp-4Ch] +
call sub_101D69E  +
test eax eax +
jnz loc_10C9761  +
mov eax lpDst +
mov esi 80004005h +
cmp eax ebx +
jz loc_10C96AD  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C96AD  +
push esi  +
push offset sub_10434C0  +
push 11h  +
jmp loc_10C96F7  +
push esi  +
push eax  +
push offset Src  +
call ds:ExpandEnvironmentStringsW  +
push 0FFFFFFFFh  +
lea ecx [ebp-4Ch] +
call sub_101D6F2  +
lea eax [ebp-1Ch] +
push eax  +
xor esi esi +
push esi  +
lea eax [ebp-14h] +
push eax  +
push 34h  +
mov [ebp-14h] esi +
mov [ebp-1Ch] esi +
call dword_10FD6F0  +
mov edi ds:__imp_GetLastError +
cmp eax esi +
jnz loc_10C97E8  +
call edi  +
cmp eax esi +
jle loc_10C97AB  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test esi esi +
jge loc_10C97E8  +
mov eax lpDst +
cmp eax ebx +
jz loc_10C96AD  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C96AD  +
push esi  +
call edi  +
push eax  +
mov eax lpDst +
push offset sub_10434C0  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
jmp loc_10C96AD  +
mov eax [ebp-1Ch] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_100F31C  +
mov esi eax +
pop ecx  +
mov [ebp-20h] esi +
test esi esi +
jnz loc_10C9832  +
mov eax lpDst +
mov esi 8007000Eh +
cmp eax ebx +
jz loc_10C96AD  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C96AD  +
push esi  +
push offset sub_10434C0  +
push 13h  +
jmp loc_10C96F7  +
lea eax [ebp-1Ch] +
push eax  +
push esi  +
lea eax [ebp-14h] +
push eax  +
push 34h  +
call dword_10FD6F0  +
test eax eax +
jnz loc_10C988E  +
push esi  +
call sub_100F30B  +
pop ecx  +
mov eax lpDst +
cmp eax ebx +
jz loc_10C9877  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C9877  +
call edi  +
push eax  +
mov eax lpDst +
push offset sub_10434C0  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
call edi  +
test eax eax +
jle loc_10C9887  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_10C96AD  +
lea ecx [ebp-38h] +
call sub_100AD56  +
xor edi edi +
mov byte ptr [ebp-4] 2 +
mov byte ptr [ebp-0Dh] 0 +
mov [ebp-18h] edi +
cmp [ebp-14h] edi +
jbe loc_10C99CA  +
mov eax [ebp-20h] +
push 10h  +
lea ebx [eax+edi*2] +
push 0  +
push ebx  +
call ds:wcstol  +
movzx esi ax +
mov eax 409h +
add esp 0Ch +
cmp ax si +
jnz loc_10C98D1  +
mov byte ptr [ebp-0Dh] 1 +
push dword ptr [ebp-5Ch]  +
movzx eax si +
push eax  +
push dword ptr [ebp-48h]  +
lea eax [ebp-38h] +
push offset aSMui04xS  +
push eax  +
call sub_104C71D  +
add esp 14h +
mov [ebp-24h] eax +
test eax eax +
jl loc_10C997B  +
push dword ptr [ebp-34h]  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_10C9910  +
test eax 1010h +
jz loc_10C99BF  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10C9954  +
cmp byte ptr [ecx+19h] 4 +
jb loc_10C9954  +
cmp eax 0FFFFFFFFh +
jnz loc_10C9930  +
mov eax offset aNotFound +
jmp loc_10C993E  +
test al 10h +
mov eax offset aFoundAsDirecto +
jnz loc_10C993E  +
mov eax offset aFileOffline +
push eax  +
push dword ptr [ebp-34h]  +
push offset sub_10434C0  +
push 16h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_106F855  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10C9959  +
sub eax edx +
sar eax 1 +
inc dword ptr [ebp-18h]  +
lea edi [edi+eax+1] +
mov eax [ebp-18h] +
cmp eax [ebp-14h] +
jnb loc_10C99C5  +
jmp loc_10C98AC  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C99A2  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C99A2  +
push dword ptr [ebp-34h]  +
push offset sub_10434C0  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
push dword ptr [ebp-20h]  +
call sub_100F30B  +
pop ecx  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call sub_100A77D  +
mov esi [ebp-24h] +
jmp loc_10C96AD  +
mov eax [ebp+0Ch] +
mov [eax] si +
mov ebx offset lpDst +
push dword ptr [ebp-20h]  +
call sub_100F30B  +
mov eax [ebp-18h] +
pop ecx  +
cmp eax [ebp-14h] +
jb loc_10C9A94  +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_10C99F9  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call sub_100A77D  +
xor esi esi +
inc esi  +
jmp loc_10C96AD  +
push dword ptr [ebp-5Ch]  +
lea eax [ebp-38h] +
push 409h  +
push dword ptr [ebp-48h]  +
push offset aSMui04xS  +
push eax  +
call sub_104C71D  +
mov esi eax +
add esp 14h +
test esi esi +
jge loc_10C9A50  +
mov eax lpDst +
cmp eax ebx +
jz loc_10C9A3F  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C9A3F  +
push dword ptr [ebp-34h]  +
push offset sub_10434C0  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call sub_100A77D  +
jmp loc_10C96AD  +
push dword ptr [ebp-34h]  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_10C9A94  +
mov eax lpDst +
cmp eax ebx +
jz loc_10C99E5  +
cmp byte ptr [eax+19h] 4 +
jb loc_10C99E5  +
push offset aNotFound  +
push dword ptr [ebp-34h]  +
push offset sub_10434C0  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
jmp loc_10C99E5  +
mov eax lpDst +
cmp eax ebx +
jz loc_10C9AB8  +
cmp byte ptr [eax+19h] 4 +
jb loc_10C9AB8  +
push dword ptr [ebp-34h]  +
push offset sub_10434C0  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
mov ecx [ebp+8] +
lea eax [ebp-38h] +
push eax  +
call sub_10C942A  +
mov esi eax +
test esi esi +
jge loc_10C9AF8  +
mov eax lpDst +
cmp eax ebx +
jz loc_10C9A3F  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C9A3F  +
push offset sub_10434C0  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10C9A3F  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call sub_100A77D  +
xor esi esi +
jmp loc_10C96AD  +
***
call sub_1001F95  +
xor ebx ebx +
xor edi edi +
mov esi offset Dst +
cmp Dst bx +
jnz loc_10C9C2F  +
push 104h  +
push esi  +
push offset aWindirHelpMmc_  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jnz loc_10C9C2F  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10C9DBE  +
cmp byte ptr [eax+19h] 2 +
jb loc_10C9DBE  +
push offset sub_10434C0  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10C9DBE  +
lea ecx [ebp-38h] +
call sub_100AD56  +
push esi  +
lea ecx [ebp-38h] +
mov [ebp-4] ebx +
call sub_100AE5B  +
cmp eax ebx +
jge loc_10C9C7B  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10C9DB2  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10C9DB2  +
push eax  +
push offset sub_10434C0  +
push 1Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10C9DB2  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_10C958B  +
cmp eax ebx +
jge loc_10C9CB2  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10C9DB2  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10C9DB2  +
push eax  +
push offset sub_10434C0  +
push 1Dh  +
jmp loc_10C9C6B  +
lea ecx [ebp-24h] +
call sub_100AD56  +
push offset aMsIts  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call sub_100AE0E  +
cmp eax ebx +
jge loc_10C9D03  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10C9DA7  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10C9DA7  +
push eax  +
push offset sub_10434C0  +
push 1Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10C9DA7  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-24h] +
call sub_10C937B  +
cmp eax ebx +
jge loc_10C9D35  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10C9DA7  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10C9DA7  +
push eax  +
push offset sub_10434C0  +
push 1Fh  +
jmp loc_10C9CF3  +
push offset asc_10C9DC8  +
lea ecx [ebp-24h] +
call sub_100AE5B  +
cmp eax ebx +
jge loc_10C9D64  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10C9DA7  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10C9DA7  +
push eax  +
push offset sub_10434C0  +
push 20h  +
jmp loc_10C9CF3  +
push dword ptr [ebp+8]  +
lea ecx [ebp-24h] +
call sub_100AE5B  +
cmp eax ebx +
jge loc_10C9D94  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10C9DA7  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10C9DA7  +
push eax  +
push offset sub_10434C0  +
push 21h  +
jmp loc_10C9CF3  +
push ebx  +
push ebx  +
push dword ptr [ebp-20h]  +
call ds:GetDesktopWindow  +
push eax  +
call sub_10D0BFD  +
mov edi eax +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call sub_100A77D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-38h] +
call sub_100A77D  +
mov eax edi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push 15h  +
push dword ptr [ebp+8]  +
call ds:SendMessageW  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_10C9E30  +
xor eax eax +
jmp loc_10C9E67  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10C9E36  +
sub eax edx +
push esi  +
sar eax 1 +
lea esi [eax+1] +
push edi  +
lea eax [esi+esi] +
push eax  +
call ds:CoTaskMemAlloc  +
mov edi eax +
test edi edi +
jz loc_10C9E63  +
push [ebp+arg_0]  +
push esi  +
push edi  +
call sub_100A593  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A4F0  +
xor edi edi +
cmp dword_10F6C64 edi +
jnz locret_10C9F18  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jz loc_10C9F02  +
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_10C9F04  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jz locret_10C9F18  +
push ebx  +
call ds:SetLastError  +
retn   +
***
call sub_100A4F0  +
xor edi edi +
cmp dword_10F6C64 edi +
jnz locret_10C9FFC  +
xor eax eax +
cmp [ebp-1Ch] edi +
setz al  +
mov esi eax +
cmp esi edi +
jz loc_10C9FE6  +
call ds:__imp_GetLastError  +
mov ebx eax +
jmp loc_10C9FE8  +
xor ebx ebx +
push dword ptr [ebp-20h]  +
push edi  +
call sub_100B053  +
cmp esi edi +
jz locret_10C9FFC  +
push ebx  +
call ds:SetLastError  +
retn   +
***
call sub_100A60E  +
mov ebx [ebp+0Ch] +
mov ecx ebx +
call sub_10132B1  +
lea esi [ebx+8] +
push esi  +
push dword ptr [ebp+8]  +
call sub_10CAF1D  +
cmp dword ptr [esi] 0FFFFFFFFh +
jz loc_10CA171  +
xor edi edi +
add ebx 4 +
mov [ebp-4] edi +
mov [ebp-1Ch] ebx +
cmp [ebx] edi +
jnz loc_10CA075  +
push 80004002h  +
call sub_10C7F1B  +
mov ecx ebx +
call sub_100A5CF  +
mov ecx [eax] +
push edi  +
lea edx [ebp-14h] +
push edx  +
push dword ptr [esi]  +
push eax  +
call dword ptr [ecx+14h]  +
mov ebx eax +
cmp ebx edi +
jge loc_10CA0BC  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CA0B6  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CA0B6  +
push ebx  +
push dword ptr [esi]  +
push offset dword_106D94C  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
push ebx  +
call sub_10C7F1B  +
inc dword ptr [ebp-14h]  +
mov eax [ebp-14h] +
push offset unk_10F56E1  +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_103C2DA  +
pop ecx  +
pop ecx  +
mov [ebp-18h] eax +
mov byte ptr [ebp-4] 1 +
cmp eax edi +
jnz loc_10CA0F2  +
push 8007000Eh  +
call sub_10C7F1B  +
mov ecx [ebp-1Ch] +
call sub_100A5CF  +
mov ecx [eax] +
push edi  +
push edi  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-14h]  +
push dword ptr [esi]  +
push eax  +
call dword ptr [ecx+10h]  +
mov ebx eax +
cmp ebx edi +
jge loc_10CA13D  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CA137  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CA137  +
push ebx  +
push dword ptr [esi]  +
push offset dword_106D94C  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
push ebx  +
call sub_10C7F1B  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp-18h]  +
add ecx 0Ch +
call sub_102B350  +
push dword ptr [ebp-18h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_10CA17D  +
mov eax [ebp+0Ch] +
or dword ptr [eax+8] 0FFFFFFFFh +
push 0FFFFFFFFh  +
xor edi edi +
push edi  +
lea ecx [eax+0Ch] +
call sub_1011BBD  +
push edi  +
push edi  +
call _CxxThrowException  +
push 0FFFFFFFFh  +
push 0  +
lea ecx [ebx+0Ch] +
call sub_1011BBD  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jbe loc_10CA1AB  +
mov eax [ebp+arg_0] +
mov cx [eax] +
cmp cx [ebp+arg_4] +
jz loc_10CA1AD  +
inc eax  +
inc eax  +
dec [ebp+arg_8]  +
jnz loc_10CA19B  +
xor eax eax +
pop ebp  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov byte ptr [eax] 0 +
mov [eax+4] ecx +
pop ebp  +
retn 4  +
***
add ecx 4 +
jmp sub_102CF00  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
pop esi  +
mov [ebp-20h] esi +
mov [ebp-1Ch] ebx +
push offset aCxmldocument_1  +
lea ecx [ebp-20h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [edi] +
push 80004002h  +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] ebx +
jz loc_10CA280  +
cmp [ebp-20h] esi +
jnz loc_10CA271  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_10CA273  +
mov al 1 +
cmp al bl +
jz loc_10CA280  +
lea ecx [ebp-20h] +
call ds:?Throw@SC@mmcerror@@QAEXXZ  +
mov esi [ebp+0Ch] +
push dword ptr [esi]  +
call SysFreeString  +
mov [esi] ebx +
mov eax [edi] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+88h]  +
mov dword ptr [ebp-20h] 3 +
mov [ebp-1Ch] eax +
cmp eax ebx +
jz loc_10CA2BD  +
setl al  +
cmp al bl +
jz loc_10CA2BD  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10CA2CA  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov dword ptr [ebp-10h] 1 +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_8] 0 +
push ebx  +
push esi  +
push edi  +
jbe loc_10CA374  +
mov edx [ecx+14h] +
cmp [ebp+arg_4] edx +
jnb loc_10CA374  +
mov edi [ecx+18h] +
mov [ebp+var_4] edi +
lea esi [ecx+4] +
cmp edi 8 +
jb loc_10CA340  +
mov eax [esi] +
jmp loc_10CA342  +
mov eax esi +
lea ebx [eax+edx*2] +
cmp edi 8 +
jb loc_10CA34E  +
mov eax [esi] +
jmp loc_10CA350  +
mov eax esi +
mov ecx [ebp+arg_4] +
lea edi [eax+ecx*2] +
jmp loc_10CA370  +
movzx eax word ptr [edi] +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_0]  +
call sub_10CA18D  +
add esp 0Ch +
test eax eax +
jnz loc_10CA37E  +
inc edi  +
inc edi  +
cmp edi ebx +
jb loc_10CA358  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
cmp [ebp+var_4] 8 +
jb loc_10CA386  +
mov esi [esi] +
mov eax edi +
sub eax esi +
sar eax 1 +
jmp loc_10CA377  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_10CA3AB  +
push [ebp+arg_8]  +
mov ecx esi +
call sub_101E823  +
add esi 4 +
cmp esi [ebp+arg_4] +
jnz loc_10CA39E  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
cmp [ebp+arg_0] esi +
jz loc_10CA3DB  +
sub [ebp+arg_8] 4 +
mov ecx [ebp+arg_8] +
sub esi 4 +
push esi  +
call sub_101E823  +
cmp esi [ebp+arg_0] +
jnz loc_10CA3C6  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn   +
***
call sub_1001F95  +
xor ebx ebx +
mov [ebp-10h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-48h] ebx +
mov [ebp-44h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-50h] 3 +
mov [ebp-4Ch] ebx +
xor esi esi +
inc esi  +
push offset aCconsolefile_5  +
lea ecx [ebp-50h] +
mov [ebp-4] esi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+10h]  +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-4Ch] ebx +
jz loc_10CA47E  +
cmp dword ptr [ebp-50h] 3 +
jnz loc_10CA463  +
cmp [ebp-4Ch] ebx +
setl al  +
jmp loc_10CA465  +
mov al 1 +
cmp al bl +
jz loc_10CA47E  +
mov ecx [ebp+8] +
lea eax [ebp-50h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] esi +
jmp loc_10CA73F  +
mov eax [ebp+10h] +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
mov [eax] ebx +
lea eax [ebp-2Ch] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-4Ch] ebx +
jz loc_10CA4D3  +
cmp dword ptr [ebp-50h] 3 +
jnz loc_10CA4BE  +
cmp [ebp-4Ch] ebx +
setl al  +
jmp loc_10CA4C0  +
mov al 1 +
cmp al bl +
jz loc_10CA4D3  +
mov ecx [ebp+8] +
lea eax [ebp-50h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10CA476  +
push ebx  +
push 80h  +
push 3  +
push ebx  +
push esi  +
push 80000000h  +
push dword ptr [ebp+0Ch]  +
call ds:CreateFileW  +
mov [ebp+0Ch] eax +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_103DECF  +
test al al +
jnz loc_10CA517  +
lea ecx [ebp-50h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] esi +
jmp loc_10CA737  +
lea eax [ebp-30h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call ds:GetFileSize  +
mov [ebp-34h] eax +
cmp [ebp-30h] ebx +
jz loc_10CA567  +
mov edi [ebp+8] +
mov [edi+8] ebx +
mov [edi+0Ch] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
inc dword ptr [eax]  +
lea ecx [ebp+0Ch] +
mov dword ptr [edi] 3 +
mov dword ptr [edi+4] 8000FFFFh +
mov [ebp-10h] esi +
call sub_103DE93  +
lea ecx [ebp-50h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax edi +
jmp loc_10CA74E  +
mov [ebp-40h] ebx +
mov [ebp-3Ch] ebx +
mov [ebp-38h] ebx +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_10CA68A  +
push ebx  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-40h] +
call sub_102E7B5  +
push eax  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 6 +
call edi  +
lea ecx [ebp-2Ch] +
mov byte ptr [ebp-4] 5 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-4Ch] ebx +
jz loc_10CA5CF  +
cmp dword ptr [ebp-50h] 3 +
jnz loc_10CA5B4  +
cmp [ebp-4Ch] ebx +
setl al  +
jmp loc_10CA5B6  +
mov al 1 +
cmp al bl +
jz loc_10CA5CF  +
mov ecx [ebp+8] +
lea eax [ebp-50h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-10h] esi +
jmp loc_10CA72B  +
lea eax [ebp-40h] +
mov [ebp-24h] bl +
mov [ebp-20h] eax +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-60h] +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 7 +
mov [ebp-18h] ebx +
call sub_102DE75  +
push eax  +
lea ecx [ebp-50h] +
mov byte ptr [ebp-4] 8 +
call edi  +
lea ecx [ebp-60h] +
mov byte ptr [ebp-4] 7 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push 3  +
pop edi  +
cmp [ebp-4Ch] ebx +
jz loc_10CA642  +
cmp [ebp-50h] edi +
jnz loc_10CA61B  +
cmp [ebp-4Ch] ebx +
setl al  +
jmp loc_10CA61D  +
mov al 1 +
cmp al bl +
jz loc_10CA642  +
lea eax [ebp-50h] +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] esi +
mov byte ptr [ebp-4] 5 +
call sub_102CA5B  +
jmp loc_10CA72B  +
push ebx  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-34h]  +
mov [ebp-1Ch] ebx +
push dword ptr [ebp-18h]  +
push dword ptr [ebp+0Ch]  +
call ds:ReadFile  +
cmp eax ebx +
jnz loc_10CA668  +
lea ecx [ebp-50h] +
call ds:?FromLastError@SC@mmcerror@@QAEAAV12@XZ  +
jmp loc_10CA624  +
mov eax [ebp-34h] +
cmp eax [ebp-1Ch] +
jz loc_10CA67C  +
mov [ebp-50h] edi +
mov dword ptr [ebp-4Ch] 8000FFFFh +
jmp loc_10CA621  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call sub_102CA5B  +
jmp loc_10CA68D  +
push 3  +
pop edi  +
mov [ebp-14h] ebx +
mov eax [ebp-40h] +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 9 +
mov [ebp-1Ch] eax +
call sub_100A5E6  +
push eax  +
push esi  +
push dword ptr [ebp-1Ch]  +
call ds:CreateILockBytesOnHGlobal  +
mov [ebp-50h] edi +
mov [ebp-4Ch] eax +
cmp eax ebx +
jz loc_10CA6BE  +
setl al  +
cmp al bl +
jnz loc_10CA70A  +
lea ecx [ebp-14h] +
mov [ebp-40h] ebx +
mov [ebp-3Ch] ebx +
mov [ebp-38h] ebx +
call sub_100A5CF  +
push dword ptr [ebp-30h]  +
mov ecx [eax] +
push dword ptr [ebp-34h]  +
push eax  +
call dword ptr [ecx+18h]  +
mov [ebp-50h] edi +
mov [ebp-4Ch] eax +
cmp eax ebx +
jz loc_10CA6EC  +
setl al  +
cmp al bl +
jnz loc_10CA70A  +
push dword ptr [ebp+10h]  +
push ebx  +
push ebx  +
push 12h  +
push ebx  +
push dword ptr [ebp-14h]  +
call ds:StgOpenStorageOnILockBytes  +
mov [ebp-50h] edi +
mov [ebp-4Ch] eax +
cmp eax ebx +
jz loc_10CA70A  +
setl al  +
mov ecx [ebp+8] +
lea eax [ebp-50h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 5 +
mov [ebp-10h] esi +
cmp eax ebx +
jz loc_10CA72B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-40h] +
mov byte ptr [ebp-4] 4 +
call sub_102DE27  +
lea ecx [ebp+0Ch] +
call sub_103DE93  +
lea ecx [ebp-50h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_10CA7D1  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10CA317  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10CA3B8  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
call sub_1001F95  +
xor ebx ebx +
mov [ebp-14h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
inc dword ptr [eax]  +
pop esi  +
mov [ebp-24h] esi +
mov [ebp-20h] ebx +
xor edi edi +
inc edi  +
push offset aScsavexmldocum  +
lea ecx [ebp-24h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov [ebp-10h] ebx +
mov ecx [ebp+0Ch] +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_10CA1F5  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] ebx +
jz loc_10CA8B5  +
cmp [ebp-24h] esi +
jnz loc_10CA8A0  +
cmp [ebp-20h] ebx +
setl al  +
jmp loc_10CA8A2  +
mov al 1 +
cmp al bl +
jz loc_10CA8B5  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10CA8ED  +
push dword ptr [ebp-10h]  +
mov ecx [ebp+10h] +
call sub_101D0E4  +
mov esi offset asc_10CA910 +
jmp loc_10CA8D1  +
mov ecx [ebp+10h] +
push edi  +
push eax  +
call sub_1011BBD  +
mov ecx [ebp+10h] +
push ebx  +
push esi  +
call sub_10CA7C5  +
cmp eax 0FFFFFFFFh +
jnz loc_10CA8C7  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
push dword ptr [ebp-10h]  +
mov [ebp-14h] edi +
call SysFreeString  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+4] +
push ecx  +
push ecx  +
mov eax esp +
mov [eax] edx +
mov ecx [ecx+8] +
mov [eax+4] ecx +
mov ecx [ebp+8] +
call sub_102F021  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov [ebp-1Ch] ecx +
xor ebx ebx +
mov [ebp-14h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-34h] 3 +
mov [ebp-30h] ebx +
xor edi edi +
inc edi  +
push offset aCxmlobjectScsa  +
lea ecx [ebp-34h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-30h] ebx +
jz loc_10CAA14  +
cmp dword ptr [ebp-34h] 3 +
jnz loc_10CA9F6  +
cmp [ebp-30h] ebx +
setl al  +
jmp loc_10CA9F8  +
mov al 1 +
cmp al bl +
jz loc_10CAA14  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] edi +
mov [ebp-4] bl +
jmp loc_10CAB98  +
mov ecx [ebp+0Ch] +
push 0FFFFFFFFh  +
push ebx  +
call sub_1011BBD  +
lea ecx [ebp-24h] +
call sub_101DD84  +
push dword ptr [ebp+10h]  +
lea eax [ebp-44h] +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call sub_102C561  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-30h] ebx +
jz loc_10CAA88  +
cmp dword ptr [ebp-34h] 3 +
jnz loc_10CAA64  +
cmp [ebp-30h] ebx +
setl al  +
jmp loc_10CAA66  +
mov al 1 +
cmp al bl +
jz loc_10CAA88  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-14h] edi +
mov byte ptr [ebp-4] 1 +
call sub_101D546  +
jmp loc_10CAA0C  +
lea eax [ebp+10h] +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 5 +
call sub_102C3AF  +
lea eax [ebp+10h] +
push eax  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 6 +
call sub_101ED6F  +
mov eax [ebp+10h] +
mov byte ptr [ebp-4] 8 +
cmp eax ebx +
jz loc_10CAAB9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-48h] +
call sub_102C353  +
and dword ptr [ebp-38h] 0FFFFFFFEh +
push ebx  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 9 +
mov [ebp-3Ch] bl +
call sub_101EA69  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 8 +
call sub_101EB25  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_10CAAFD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-44h] +
push eax  +
mov dword ptr [ebp-4] 3 +
call sub_10CA821  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0Ch +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-30h] ebx +
jz loc_10CAA6A  +
cmp dword ptr [ebp-34h] 3 +
jnz loc_10CAB45  +
cmp [ebp-30h] ebx +
setl al  +
jmp loc_10CAA6A  +
mov al 1 +
jmp loc_10CAA6A  +
lea eax [ebp-58h] +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0Bh +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-58h] +
mov dword ptr [ebp-14h] 1 +
mov byte ptr [ebp-4] 0Ah +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov dword ptr [ebp-4] 3 +
mov eax offset loc_10CAB88 +
retn   +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call sub_101D546  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-34h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_100A60E  +
mov [ebp-1Ch] ecx +
xor ebx ebx +
mov [ebp-14h] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
inc dword ptr [eax]  +
mov dword ptr [ebp-34h] 3 +
mov [ebp-30h] ebx +
xor edi edi +
inc edi  +
push offset aCxmlobjectSclo  +
lea ecx [ebp-34h] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-44h] +
push eax  +
call sub_100A3AE  +
mov esi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 2 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-30h] ebx +
jz loc_10CAC85  +
cmp dword ptr [ebp-34h] 3 +
jnz loc_10CAC67  +
cmp [ebp-30h] ebx +
setl al  +
jmp loc_10CAC69  +
mov al 1 +
cmp al bl +
jz loc_10CAC85  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
mov [ebp-14h] edi +
mov [ebp-4] bl +
jmp loc_10CADF8  +
lea ecx [ebp-24h] +
call sub_101DD84  +
push ebx  +
lea eax [ebp-44h] +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call sub_102C561  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 4 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-30h] ebx +
jz loc_10CACEC  +
cmp dword ptr [ebp-34h] 3 +
jnz loc_10CACC8  +
cmp [ebp-30h] ebx +
setl al  +
jmp loc_10CACCA  +
mov al 1 +
cmp al bl +
jz loc_10CACEC  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-14h] edi +
mov byte ptr [ebp-4] 1 +
call sub_101D546  +
jmp loc_10CAC7D  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-44h] +
push eax  +
lea ecx [ebp-24h] +
call sub_104B181  +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 5 +
call esi  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 3 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-30h] ebx +
jz loc_10CAD2B  +
cmp dword ptr [ebp-34h] 3 +
jnz loc_10CAD25  +
cmp [ebp-30h] ebx +
setl al  +
jmp loc_10CAD27  +
mov al 1 +
cmp al bl +
jnz loc_10CACCE  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 6 +
call sub_102C3AF  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 7 +
call sub_101ED6F  +
push eax  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 8 +
call sub_102C353  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 0Ah +
cmp eax ebx +
jz loc_10CAD6D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+0Ch] +
mov byte ptr [ebp-4] 0Bh +
cmp eax ebx +
jz loc_10CAD7E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+10h] +
push ebx  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-3Ch] 1 +
mov [ebp-38h] eax +
call sub_101EA69  +
lea ecx [ebp-48h] +
mov byte ptr [ebp-4] 6 +
call sub_101EB25  +
mov dword ptr [ebp-4] 3 +
jmp loc_10CACCE  +
lea eax [ebp-58h] +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0Dh +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
mov ecx [ebp+8] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-58h] +
mov dword ptr [ebp-14h] 1 +
mov byte ptr [ebp-4] 0Ch +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov dword ptr [ebp-4] 3 +
mov eax offset loc_10CADE8 +
retn   +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call sub_101D546  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-34h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
lea ecx [ebp+arg_0] +
push ecx  +
push 1  +
push [ebp+arg_4]  +
push edi  +
call dword ptr [eax+0Ch]  +
mov esi eax +
test esi esi +
jge loc_10CAE97  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CAE91  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CAE91  +
push esi  +
push 1  +
push offset dword_106D970  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
push esi  +
call sub_10C7F1B  +
cmp [ebp+arg_0] 1 +
jz loc_10CAEA7  +
push 80004005h  +
call sub_10C7F1B  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
lea ecx [ebp+arg_0] +
push ecx  +
push 2  +
push [ebp+arg_4]  +
push edi  +
call dword ptr [eax+0Ch]  +
mov esi eax +
test esi esi +
jge loc_10CAF00  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CAEFA  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CAEFA  +
push esi  +
push 2  +
push offset dword_106D970  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
push esi  +
call sub_10C7F1B  +
cmp [ebp+arg_0] 2 +
jz loc_10CAF10  +
push 80004005h  +
call sub_10C7F1B  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
lea ecx [ebp+arg_0] +
push ecx  +
push 4  +
push [ebp+arg_4]  +
push edi  +
call dword ptr [eax+0Ch]  +
mov esi eax +
test esi esi +
jge loc_10CAF69  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CAF63  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CAF63  +
push esi  +
push 4  +
push offset dword_106D970  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
push esi  +
call sub_10C7F1B  +
cmp [ebp+arg_0] 4 +
jz loc_10CAF79  +
push 80004005h  +
call sub_10C7F1B  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
lea ecx [ebp+arg_0] +
push ecx  +
push 8  +
push [ebp+arg_4]  +
push edi  +
call dword ptr [eax+0Ch]  +
mov esi eax +
test esi esi +
jge loc_10CAFD2  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CAFCC  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CAFCC  +
push esi  +
push 8  +
push offset dword_106D970  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
push esi  +
call sub_10C7F1B  +
cmp [ebp+arg_0] 8 +
jz loc_10CAFE2  +
push 80004005h  +
call sub_10C7F1B  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
lea ecx [ebp+arg_0] +
push ecx  +
push 10h  +
push [ebp+arg_4]  +
push edi  +
call dword ptr [eax+0Ch]  +
mov esi eax +
test esi esi +
jge loc_10CB03B  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CB035  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CB035  +
push esi  +
push 10h  +
push offset dword_106D970  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
push esi  +
call sub_10C7F1B  +
cmp [ebp+arg_0] 10h +
jz loc_10CB04B  +
push 80004005h  +
call sub_10C7F1B  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
lea eax [ebp-14h] +
push eax  +
push ebx  +
call sub_10CAF1D  +
mov eax [ebp-14h] +
lea ecx [eax+1] +
mov edi 80070057h +
cmp ecx eax +
jnb loc_10CB086  +
push edi  +
call sub_10C7F1B  +
mov eax [ebp-14h] +
push offset unk_10F56E1  +
xor ecx ecx +
push 2  +
inc eax  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_103C2DA  +
pop ecx  +
mov esi eax +
pop ecx  +
mov [ebp-1Ch] esi +
and dword ptr [ebp-4] 0 +
test esi esi +
jnz loc_10CB0B9  +
push 8007000Eh  +
call sub_10C7F1B  +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
mov eax [ebp-14h] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_101C6BF  +
test eax eax +
jge loc_10CB0DA  +
push edi  +
call sub_10C7F1B  +
mov eax [ebx] +
lea ecx [ebp-18h] +
push ecx  +
push dword ptr [ebp-10h]  +
push esi  +
push ebx  +
call dword ptr [eax+0Ch]  +
mov edi eax +
test edi edi +
jge loc_10CB11C  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CB116  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CB116  +
push edi  +
push dword ptr [ebp-10h]  +
push offset dword_106D970  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
push edi  +
call sub_10C7F1B  +
mov eax [ebp-10h] +
cmp eax [ebp-18h] +
jz loc_10CB12E  +
push 80004005h  +
call sub_10C7F1B  +
mov ecx [ebp-14h] +
xor eax eax +
push 0FFFFFFFFh  +
mov [esi+ecx*2] ax +
mov ecx [ebp+8] +
push eax  +
call sub_1011BBD  +
mov ecx [ebp+8] +
push esi  +
call sub_101D0E4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax ebx +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push [ebp+arg_4]  +
mov ebx [ebp+arg_0] +
call sub_10CB058  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1001F95  +
mov esi ecx +
mov ecx [ebp+8] +
call sub_107AFC7  +
lea eax [ebp-10h] +
push eax  +
push esi  +
call sub_10CAF1D  +
cmp dword ptr [ebp-10h] 0 +
jbe loc_10CB232  +
push offset unk_10F56E1  +
push dword ptr [ebp-10h]  +
call sub_103C2DA  +
pop ecx  +
mov edi eax +
pop ecx  +
mov [ebp-18h] edi +
and dword ptr [ebp-4] 0 +
test edi edi +
jnz loc_10CB1CC  +
push 8007000Eh  +
call sub_10C7F1B  +
mov ebx [ebp-10h] +
mov eax [esi] +
lea ecx [ebp-14h] +
push ecx  +
push ebx  +
push edi  +
push esi  +
call dword ptr [eax+0Ch]  +
mov esi eax +
test esi esi +
jge loc_10CB20D  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CB207  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CB207  +
push esi  +
push ebx  +
push offset dword_106D970  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F679  +
push esi  +
call sub_10C7F1B  +
cmp ebx [ebp-14h] +
jz loc_10CB21C  +
push 80004005h  +
call sub_10C7F1B  +
mov eax [ebp-10h] +
mov ecx [ebp+8] +
add eax edi +
push eax  +
push edi  +
call sub_107B08B  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_10CB17C  +
pop ebp  +
retn 8  +
***
call sub_100A60E  +
mov edi ecx +
mov esi [ebp+8] +
lea eax [ebp-14h] +
push eax  +
xor ebx ebx +
push esi  +
mov [ebp-14h] ebx +
mov [ebp-4] ebx +
call sub_10CAF1D  +
lea eax [ebp-20h] +
push eax  +
push esi  +
call sub_10CAF86  +
push dword ptr [ebp-14h]  +
mov eax [edi] +
push esi  +
mov ecx edi +
call dword ptr [eax+4]  +
cmp eax 1 +
jnz loc_10CB2BE  +
mov eax [esi] +
push ebx  +
push ebx  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-20h]  +
push esi  +
call dword ptr [eax+14h]  +
cmp eax ebx +
jl loc_10CB2BE  +
xor eax eax +
inc eax  +
jmp loc_10CB2BE  +
mov eax [ebp-18h] +
mov eax [eax+4] +
mov [ebp+8] eax +
mov eax offset loc_10CB2BB +
retn   +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+hIcon] 0 +
push ebx  +
push [ebp+arg_10]  +
lea eax [ebp+var_8] +
push 1  +
push eax  +
lea eax [ebp+hIcon] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:PrivateExtractIconsW  +
test eax eax +
setnz bl  +
test bl bl +
jz loc_10CB310  +
push [ebp+hIcon]  +
mov ecx [ebp+arg_14] +
call sub_103E9BF  +
jmp loc_10CB343  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CB334  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CB334  +
push offset dword_106D998  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
cmp [ebp+hIcon] 0 +
jz loc_10CB343  +
push [ebp+hIcon]  +
call ds:DestroyIcon  +
mov al bl +
pop ebx  +
leave   +
retn 18h  +
***
mov eax [ecx] +
test eax eax +
jz loc_10CB359  +
mov eax [eax] +
jmp loc_10CB35B  +
xor eax eax +
xor ecx ecx +
test eax eax +
setz cl  +
mov al cl +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
xor esi esi +
mov [ebp+var_4] esi +
call sub_103C84D  +
mov edi eax +
cmp [ebp+var_4] esi +
jz loc_10CB3B6  +
push esi  +
push esi  +
push [ebp+var_4]  +
call sub_1041D22  +
mov ecx [ebp+arg_4] +
push eax  +
call sub_103E9BF  +
mov ecx [ebp+arg_4] +
push esi  +
call sub_10BCD4E  +
test al al +
jz loc_10CB3AE  +
xor edi edi +
push [ebp+var_4]  +
call sub_102F128  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+28h] +
call sub_100EBDB  +
lea ecx [esi+24h] +
call sub_100EBDB  +
lea ebx [esi+20h] +
mov ecx ebx +
call sub_100EBDB  +
cmp dword ptr [esi+18h] 8 +
lea edi [esi+4] +
jb loc_10CB3F5  +
mov eax [edi] +
jmp loc_10CB3F7  +
mov eax edi +
push ebx  +
xor ebx ebx +
push ebx  +
push 10h  +
push 10h  +
push dword ptr [esi+1Ch]  +
mov ecx esi +
push eax  +
call sub_10CB2CB  +
cmp dword ptr [esi+18h] 8 +
mov [ebp+var_1] al +
jb loc_10CB417  +
mov ecx [edi] +
jmp loc_10CB419  +
mov ecx edi +
lea eax [esi+24h] +
push eax  +
push ebx  +
push 20h  +
push 20h  +
push dword ptr [esi+1Ch]  +
push ecx  +
mov ecx esi +
call sub_10CB2CB  +
cmp dword ptr [esi+18h] 8 +
mov [ebp+var_2] al +
jb loc_10CB438  +
mov edi [edi] +
lea eax [esi+28h] +
push eax  +
push ebx  +
push 30h  +
push 30h  +
push dword ptr [esi+1Ch]  +
mov ecx esi +
push edi  +
call sub_10CB2CB  +
cmp [ebp+var_1] bl +
jnz loc_10CB45E  +
cmp [ebp+var_2] bl +
jnz loc_10CB45E  +
cmp al bl +
jnz loc_10CB45E  +
xor eax eax +
jmp loc_10CB461  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
lea eax [ebp+var_218] +
push eax  +
push esi  +
call sub_10CAF1D  +
mov eax [ebp+var_218] +
sub eax 0 +
jz loc_10CB4C8  +
dec eax  +
jz loc_10CB4B2  +
push 80004005h  +
call sub_10C7F1B  +
jmp loc_10CB561  +
lea eax [edi+1Ch] +
push eax  +
push esi  +
call sub_10CAF1D  +
push edi  +
push esi  +
call sub_10CB161  +
jmp loc_10CB561  +
lea eax [ebp+var_214] +
push eax  +
push esi  +
call sub_10CAEB4  +
movzx eax word ptr [ebp+var_214] +
mov [edi+1Ch] eax +
lea eax [ebp+var_210] +
push eax  +
push esi  +
call sub_10CAEB4  +
mov eax 208h +
cmp word ptr [ebp+var_210] ax +
jbe loc_10CB504  +
push 80004005h  +
call sub_10C7F1B  +
mov eax [esi] +
push ebx  +
lea ecx [ebp+var_21C] +
push ecx  +
movzx ecx word ptr [ebp+var_210] +
push ecx  +
lea ecx [ebp+var_20C] +
push ecx  +
push esi  +
call dword ptr [eax+0Ch]  +
mov ebx eax +
test ebx ebx +
jge loc_10CB552  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CB54C  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CB54C  +
push ebx  +
push offset dword_106D998  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
push ebx  +
call sub_10C7F1B  +
lea eax [ebp+var_20C] +
push eax  +
mov ecx edi +
call sub_102B350  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp [ebp+arg_0] esi +
jz loc_10CB594  +
push [ebp+arg_0]  +
call sub_107A821  +
mov ecx esi +
call sub_10CB3C3  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_100A60E  +
mov [ebp-18h] ecx +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-14h] ebx +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
call sub_100A5E6  +
mov esi [ebp+8] +
mov ecx [esi] +
push eax  +
push ebx  +
push 10h  +
push ebx  +
push offset aIcon  +
push esi  +
call dword ptr [ecx+10h]  +
mov edi eax +
cmp edi ebx +
jge loc_10CB60B  +
mov eax lpDst +
mov ebx offset lpDst +
cmp eax ebx +
jz loc_10CB603  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CB603  +
push edi  +
push offset dword_106D998  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
push edi  +
call sub_10C7F1B  +
jmp loc_10CB610  +
mov ebx offset lpDst +
lea ecx [ebp-14h] +
call sub_100A5CF  +
mov edi [ebp-18h] +
push edi  +
push eax  +
call sub_10CB46B  +
lea ecx [ebp-14h] +
call sub_100A5E6  +
mov ecx [esi] +
push eax  +
push 0  +
push 10h  +
push 0  +
push offset aIconBits  +
push esi  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jge loc_10CB66A  +
mov eax lpDst +
cmp eax ebx +
jz loc_10CB664  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CB664  +
push esi  +
push offset dword_106D998  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
push esi  +
call sub_10C7F1B  +
lea eax [edi+24h] +
push eax  +
push dword ptr [ebp-14h]  +
call sub_10CB36C  +
mov esi eax +
test esi esi +
jge loc_10CB6A4  +
mov eax lpDst +
cmp eax ebx +
jz loc_10CB69E  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CB69E  +
push esi  +
push offset dword_106D998  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
push esi  +
call sub_10C7F1B  +
add edi 20h +
push edi  +
push dword ptr [ebp-14h]  +
call sub_10CB36C  +
mov esi eax +
test esi esi +
jge loc_10CB6DE  +
mov eax lpDst +
cmp eax ebx +
jz loc_10CB6D8  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CB6D8  +
push esi  +
push offset dword_106D998  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
push esi  +
call sub_10C7F1B  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_10CB70B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10CB70B  +
mov ecx [ebp-18h] +
call sub_1052BC8  +
mov eax [ebp-1Ch] +
mov eax [eax+4] +
mov [ebp+8] eax +
mov eax offset loc_10CB708 +
retn   +
mov esi [ebp+8] +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov [eax] edx +
test edx edx +
jz loc_10CB746  +
inc dword ptr [edx+4]  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push dword ptr [ecx+44h]  +
push dword ptr [ecx+48h]  +
push dword ptr [ecx]  +
call ds:?InterfaceMethodException@BookKeeping@@SGXHPBG0KPAU_EXCEPTION_POINTERS@@@Z  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+2Ch] 0 +
jnz loc_10CB78B  +
push dword ptr [esi+8]  +
call ds:?GetSnapinName@BookKeeping@@SGPBGH@Z  +
mov [esi+2Ch] eax +
mov eax [esi+2Ch] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_C] 0 +
jz loc_10CB7BF  +
mov eax [ecx+28h] +
test eax eax +
jnz loc_10CB7AC  +
mov eax offset word_100A5FC +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
push eax  +
push dword ptr [ecx+8]  +
call ds:?InterfaceMethodException@BookKeeping@@SGXHPBG0KPAU_EXCEPTION_POINTERS@@@Z  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
call sub_100A4F0  +
mov [ebp-20h] ecx +
and dword ptr [ebp-4] 0 +
mov eax [ecx+4] +
mov eax [eax] +
mov [ebp-1Ch] eax +
push dword ptr [ecx+14h]  +
push eax  +
push eax  +
call sub_103CB90  +
mov [ebp-1Ch] eax +
test eax eax +
jnz loc_10CB81F  +
mov dword ptr [ebp-1Ch] 1 +
jmp loc_10CB81F  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push ecx  +
mov ecx [ebp-20h] +
call sub_10CB795  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-1Ch] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn 8  +
***
call sub_100A4F0  +
mov esi ecx +
mov [ebp-20h] esi +
mov eax [esi+4] +
xor ebx ebx +
cmp eax ebx +
jz loc_10CBA1F  +
cmp [esi+0Ch] ebx +
jz loc_10CBA1F  +
mov [ebp-4] ebx +
mov eax [eax] +
mov [ebp-24h] eax +
mov ecx [esi+14h] +
mov [ebp-1Ch] ecx +
cmp eax ebx +
jnz loc_10CB901  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CB8D2  +
cmp byte ptr [eax+19h] 3 +
jb loc_10CB8D2  +
mov eax [esi+28h] +
cmp eax ebx +
mov edi offset word_100A5FC +
jz loc_10CB8B2  +
mov edi eax +
mov ecx esi +
call sub_10CB774  +
push eax  +
push edi  +
push offset dword_106D9A8  +
push 1Bh  +
mov eax lpDst +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
cmp [ebp+0Ch] bl +
jz loc_10CB8F0  +
mov eax [esi+28h] +
cmp eax ebx +
jnz loc_10CB8E3  +
mov eax offset word_100A5FC +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [esi+8]  +
call ds:?InvalidInterface@BookKeeping@@SGXHPBG0@Z  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax 80004003h +
jmp loc_10CBA80  +
cmp [ebp-1Ch] ebx +
jbe loc_10CB94D  +
mov ecx [eax] +
add eax 4 +
mov [ebp-24h] eax +
test ecx ecx +
jnz loc_10CB947  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CB8D2  +
cmp byte ptr [eax+19h] 3 +
jb loc_10CB8D2  +
mov eax [esi+28h] +
cmp eax ebx +
mov edi offset word_100A5FC +
jz loc_10CB932  +
mov edi eax +
mov ecx esi +
call sub_10CB774  +
push eax  +
push edi  +
push offset dword_106D9A8  +
push 1Ch  +
jmp loc_10CB8C2  +
sub dword ptr [ebp-1Ch] 4 +
jmp loc_10CB901  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_10CB7CB  +
cmp [esi+10h] eax +
jz loc_10CB9CD  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CB9A6  +
cmp byte ptr [eax+19h] 3 +
jb loc_10CB9A6  +
mov eax [esi+28h] +
cmp eax ebx +
mov edi offset word_100A5FC +
jz loc_10CB986  +
mov edi eax +
mov ecx esi +
call sub_10CB774  +
push eax  +
push edi  +
push offset dword_106D9A8  +
push 1Eh  +
mov eax lpDst +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
cmp [ebp+0Ch] bl +
jz loc_10CB8F7  +
mov eax [esi+28h] +
cmp eax ebx +
jnz loc_10CB9BB  +
mov eax offset word_100A5FC +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [esi+8]  +
call ds:?InvalidInterface@BookKeeping@@SGXHPBG0@Z  +
jmp loc_10CB8F7  +
xor eax eax +
jmp loc_10CBA80  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CBA15  +
cmp byte ptr [eax+19h] 3 +
jb loc_10CBA15  +
mov esi [ebp-20h] +
mov eax [esi+28h] +
xor ebx ebx +
cmp eax ebx +
mov edi offset word_100A5FC +
jz loc_10CBA00  +
mov edi eax +
mov ecx esi +
call sub_10CB774  +
push eax  +
push edi  +
push offset dword_106D9A8  +
push 1Dh  +
jmp loc_10CB8C2  +
xor ebx ebx +
mov esi [ebp-20h] +
jmp loc_10CB8D2  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CBA5D  +
cmp byte ptr [eax+19h] 3 +
jb loc_10CBA5D  +
mov eax [esi+28h] +
cmp eax ebx +
mov edi offset word_100A5FC +
jz loc_10CBA3F  +
mov edi eax +
call sub_10CB774  +
push eax  +
push edi  +
push offset dword_106D9A8  +
push 19h  +
mov eax lpDst +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
cmp [ebp+0Ch] bl +
jz loc_10CBA7B  +
mov eax [esi+28h] +
cmp eax ebx +
jnz loc_10CBA6E  +
mov eax offset word_100A5FC +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [esi+8]  +
call ds:?MMCNullInterface@BookKeeping@@SGXHPBG0@Z  +
mov eax 80004002h +
call sub_100A4DC  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+28h] +
push edi  +
mov edi ecx +
mov ecx [esi+8] +
test eax eax +
jnz loc_10CBAC4  +
mov eax offset word_100A5FC +
push ecx  +
push [ebp+arg_4]  +
mov ecx edi +
push eax  +
call sub_100B69F  +
push 1  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_10CB859  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_100B068  +
mov esi ecx +
mov [ebp-70h] esi +
xor ebx ebx +
mov [ebp-6Ch] ebx +
lea eax [ebp-6Ch] +
push eax  +
push offset aRelease  +
push esi  +
lea ecx [ebp-68h] +
call sub_10CBAA9  +
cmp [ebp-6Ch] ebx +
jge loc_10CBB6D  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CBB5C  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CBB5C  +
mov eax [esi+28h] +
cmp eax ebx +
jnz loc_10CBB39  +
mov eax offset word_100A5FC +
push dword ptr [ebp-6Ch]  +
push eax  +
mov ecx esi +
call sub_10CB774  +
push eax  +
push offset dword_106D9A8  +
push 0Ch  +
mov eax lpDst +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F91C  +
lea edi [esi+0Ch] +
mov [edi] ebx +
mov ecx esi +
call sub_100B724  +
jmp loc_10CBBF4  +
mov [ebp-4] ebx +
lea edi [esi+0Ch] +
dec dword ptr [edi]  +
jnz loc_10CBBED  +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CBBBE  +
cmp byte ptr [eax+19h] 5 +
jb loc_10CBBBE  +
mov eax [esi+28h] +
cmp eax ebx +
jnz loc_10CBB9E  +
mov eax offset word_100A5FC +
push eax  +
mov ecx esi +
call sub_10CB774  +
push eax  +
push offset dword_106D9A8  +
push 0Dh  +
mov eax lpDst +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
mov ecx esi +
jmp loc_10CBBE8  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
push 1  +
push offset aRelease  +
push eax  +
push ecx  +
mov ecx [ebp-70h] +
call sub_10CB795  +
retn   +
mov esp [ebp-18h] +
mov ecx [ebp-70h] +
lea edi [ecx+0Ch] +
xor ebx ebx +
mov [edi] ebx +
call sub_100B724  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
push ebx  +
lea ecx [ebp-68h] +
call sub_100B7A1  +
mov eax [edi] +
call sub_100B10C  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
push edi  +
mov edi [ebp+arg_0] +
mov ebx offset word_100A5FC +
test eax eax +
jnz loc_10CBC61  +
mov eax ebx +
push [ebp+arg_4]  +
lea ecx [ebp+var_50] +
push offset aSnapininterf_0  +
push eax  +
call sub_100B69F  +
test edi edi +
jnz loc_10CBC95  +
mov esi [esi+28h] +
test esi esi +
jnz loc_10CBC7F  +
mov esi ebx +
push offset aAttach  +
push esi  +
push [ebp+arg_4]  +
call ds:?MMCNullInterface@BookKeeping@@SGXHPBG0@Z  +
mov esi 80004003h +
jmp loc_10CBCB4  +
push [ebp+arg_4]  +
mov ecx esi +
push edi  +
call sub_104184D  +
mov esi eax +
test esi esi +
jge loc_10CBCAE  +
cmp esi 80004002h +
jnz loc_10CBCB4  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
push esi  +
lea ecx [ebp+var_50] +
call sub_100B7A1  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 8  +
***
call sub_100B068  +
mov esi ecx +
mov [ebp-70h] esi +
mov edi [ebp+8] +
mov ebx [ebp+10h] +
mov eax [esi+28h] +
test eax eax +
jnz loc_10CBD46  +
mov eax offset word_100A5FC +
push dword ptr [esi+8]  +
push offset aCreateinstance  +
push eax  +
lea ecx [ebp-68h] +
call sub_100B69F  +
and dword ptr [ebp-6Ch] 0 +
mov ecx esi +
call sub_100B724  +
xor eax eax +
mov [ebp-78h] eax +
mov [ebp-80h] eax +
mov [ebp-7Ch] eax +
mov [ebp-74h] eax +
lea eax [ebp-80h] +
push eax  +
push 1  +
push edi  +
call ApphelpCheckShellObject  +
test eax eax +
jnz loc_10CBDD4  +
mov dword ptr [ebp-6Ch] 80070005h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CBF03  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CBF03  +
mov eax [esi+28h] +
test eax eax +
mov edi offset word_100A5FC +
jz loc_10CBDAF  +
mov edi eax +
mov ecx esi +
call sub_10CB774  +
push eax  +
push edi  +
push offset dword_106D9A8  +
push 12h  +
mov eax lpDst +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
jmp loc_10CBF03  +
lea eax [ebp-74h] +
push eax  +
push 0  +
call sub_1050233  +
test eax eax +
jnz loc_10CBE2E  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10CBDF7  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-6Ch] eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CBF03  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CBF03  +
push dword ptr [ebp-6Ch]  +
push offset dword_106D9A8  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10CBF03  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-78h] +
push eax  +
lea eax [esi+18h] +
push eax  +
push dword ptr [ebp+14h]  +
push ebx  +
push edi  +
call ds:CoCreateInstance  +
mov [ebp-6Ch] eax +
push 0FFFFFFFEh  +
pop edi  +
mov [ebp-4] edi +
jmp loc_10CBE75  +
mov dword ptr [ebp-4] 1 +
push dword ptr [ebp-74h]  +
push 0  +
call sub_105015C  +
mov [ebp-4] edi +
jmp loc_10CBEB7  +
mov esi [ebp-70h] +
cmp dword ptr [ebp-6Ch] 0 +
jge loc_10CBEF3  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CBF03  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CBF03  +
mov esi [esi+28h] +
test esi esi +
jnz loc_10CBEDB  +
mov esi offset word_100A5FC +
push dword ptr [ebp-6Ch]  +
push esi  +
push offset dword_106D9A8  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
jmp loc_10CBF03  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-78h]  +
mov ecx esi +
call sub_10CBC39  +
mov [ebp-6Ch] eax +
push dword ptr [ebp-6Ch]  +
lea ecx [ebp-68h] +
call sub_100B7A1  +
mov eax [ebp-6Ch] +
call sub_100B10C  +
retn 10h  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push dword ptr [ecx+44h]  +
push dword ptr [ecx+48h]  +
push dword ptr [ecx]  +
call ds:?InterfaceMethodActivationContextException@BookKeeping@@SGXHPBG0KPAU_EXCEPTION_POINTERS@@@Z  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
pop eax  +
push eax  +
lea ecx [ebp+arg_24] +
push ecx  +
push eax  +
lea ecx [ebp+arg_20] +
push ecx  +
push eax  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
lea ecx [ebp+arg_18] +
push ecx  +
push eax  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 48h +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
pop eax  +
push eax  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
lea ecx [ebp+arg_18] +
push ecx  +
push eax  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 38h +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_18] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp edx ebx +
jz loc_10CC052  +
cmp [edx] bx +
jnz loc_10CC036  +
mov [ebp+arg_18] 0Eh +
jmp loc_10CC059  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10CC03B  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_18] eax +
jmp loc_10CC059  +
mov [ebp+arg_18] 0Ah +
cmp edx ebx +
jz loc_10CC070  +
cmp [edx] bx +
jnz loc_10CC06B  +
mov [ebp+var_4] offset aNull +
jmp loc_10CC077  +
mov [ebp+var_4] edx +
jmp loc_10CC077  +
mov [ebp+var_4] offset aNull_0 +
mov edi [ebp+arg_14] +
cmp edi ebx +
jz loc_10CC0A0  +
cmp [edi] bx +
jnz loc_10CC087  +
push 0Eh  +
jmp loc_10CC0A2  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10CC08C  +
sub eax esi +
sar eax 1 +
lea ebx [eax+eax+2] +
jmp loc_10CC0A3  +
push 0Ah  +
pop ebx  +
test edi edi +
jz loc_10CC0B8  +
cmp word ptr [edi] 0 +
jnz loc_10CC0B4  +
mov edx offset aNull +
jmp loc_10CC0BD  +
mov edx edi +
jmp loc_10CC0BD  +
mov edx offset aNull_0 +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_10CC0E7  +
cmp word ptr [edi] 0 +
jnz loc_10CC0CE  +
push 0Eh  +
jmp loc_10CC0E9  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10CC0D3  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_10CC0EA  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_10CC0FF  +
cmp word ptr [edi] 0 +
jnz loc_10CC0FB  +
mov eax offset aNull +
jmp loc_10CC104  +
mov eax edi +
jmp loc_10CC104  +
mov eax offset aNull_0 +
push 0  +
push [ebp+arg_18]  +
push [ebp+var_4]  +
push ebx  +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_18] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp edx ebx +
jz loc_10CC16E  +
cmp [edx] bx +
jnz loc_10CC152  +
mov [ebp+arg_18] 0Eh +
jmp loc_10CC175  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10CC157  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_18] eax +
jmp loc_10CC175  +
mov [ebp+arg_18] 0Ah +
cmp edx ebx +
jz loc_10CC18C  +
cmp [edx] bx +
jnz loc_10CC187  +
mov [ebp+var_4] offset aNull +
jmp loc_10CC193  +
mov [ebp+var_4] edx +
jmp loc_10CC193  +
mov [ebp+var_4] offset aNull_0 +
mov edi [ebp+arg_14] +
cmp edi ebx +
jz loc_10CC1BC  +
cmp [edi] bx +
jnz loc_10CC1A3  +
push 0Eh  +
jmp loc_10CC1BE  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10CC1A8  +
sub eax esi +
sar eax 1 +
lea ebx [eax+eax+2] +
jmp loc_10CC1BF  +
push 0Ah  +
pop ebx  +
test edi edi +
jz loc_10CC1D4  +
cmp word ptr [edi] 0 +
jnz loc_10CC1D0  +
mov edx offset aNull +
jmp loc_10CC1D9  +
mov edx edi +
jmp loc_10CC1D9  +
mov edx offset aNull_0 +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_10CC203  +
cmp word ptr [edi] 0 +
jnz loc_10CC1EA  +
push 0Eh  +
jmp loc_10CC205  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10CC1EF  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_10CC206  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_10CC21B  +
cmp word ptr [edi] 0 +
jnz loc_10CC217  +
mov eax offset aNull +
jmp loc_10CC220  +
mov eax edi +
jmp loc_10CC220  +
mov eax offset aNull_0 +
push 0  +
push 4  +
lea esi [ebp+arg_1C] +
push esi  +
push [ebp+arg_18]  +
push [ebp+var_4]  +
push ebx  +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 38h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_10CC285  +
cmp word ptr [edx] 0 +
jnz loc_10CC26A  +
push 0Eh  +
jmp loc_10CC287  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10CC270  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10CC288  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_10CC299  +
cmp word ptr [edx] 0 +
jnz loc_10CC29E  +
mov edx offset aNull +
jmp loc_10CC29E  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_18] +
push ecx  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
test edx edx +
jz loc_10CC2FE  +
cmp word ptr [edx] 0 +
jnz loc_10CC2E3  +
push 0Eh  +
jmp loc_10CC300  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10CC2E9  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10CC301  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_10CC312  +
cmp word ptr [edx] 0 +
jnz loc_10CC317  +
mov edx offset aNull +
jmp loc_10CC317  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_18] +
push ecx  +
push eax  +
push edx  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
push 64h  +
push offset dword_10CC478  +
call sub_100B068  +
mov esi [ebp+8] +
mov edi [ebp+0Ch] +
mov ebx [ebp+10h] +
mov eax [ebp+14h] +
mov [ebp-74h] eax +
lea eax [ebp-6Ch] +
push eax  +
push offset aTasknotify  +
push esi  +
lea ecx [ebp-68h] +
call sub_10CBAA9  +
mov eax [ebp-6Ch] +
test eax eax +
jl loc_10CC452  +
and dword ptr [ebp-70h] 0 +
lea eax [ebp-70h] +
push eax  +
push 0  +
call sub_1050233  +
test eax eax +
jnz loc_10CC3AE  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10CC452  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10CC452  +
and dword ptr [ebp-4] 0 +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CC3DB  +
cmp byte ptr [eax+19h] 5 +
jb loc_10CC3DB  +
push dword ptr [ebp-74h]  +
push ebx  +
push edi  +
push offset dword_106D9D8  +
push 6Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10C9315  +
mov eax [esi+4] +
mov ecx [eax] +
push dword ptr [ebp-74h]  +
push ebx  +
push edi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
mov [ebp-6Ch] edi +
jmp loc_10CC40A  +
add al 80h +
push 0FFFFFFFEh  +
pop esi  +
mov [ebp-4] esi +
mov dword ptr [ebp-4] 1 +
push dword ptr [ebp-70h]  +
push 0  +
call sub_105015C  +
mov [ebp-4] esi +
jmp loc_10CC447  +
push edi  +
lea ecx [ebp-68h] +
call sub_100B7A1  +
mov eax edi +
call sub_100B10C  +
retn 10h  +
***
push 60h  +
push offset dword_10CC5C8  +
call sub_100B068  +
mov esi [ebp+8] +
mov ebx [ebp+0Ch] +
mov edi [ebp+10h] +
lea eax [ebp-70h] +
push eax  +
push offset aGettitle  +
push esi  +
lea ecx [ebp-68h] +
call sub_10CBAA9  +
mov eax [ebp-70h] +
test eax eax +
jl loc_10CC5A6  +
and dword ptr [ebp-6Ch] 0 +
lea eax [ebp-6Ch] +
push eax  +
push 0  +
call sub_1050233  +
test eax eax +
jnz loc_10CC507  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10CC5A6  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10CC5A6  +
and dword ptr [ebp-4] 0 +
mov eax [esi+4] +
mov ecx [eax] +
push edi  +
push ebx  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
mov [ebp-70h] esi +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CC55E  +
cmp byte ptr [eax+19h] 5 +
jb loc_10CC55E  +
push dword ptr [edi]  +
push ebx  +
push offset dword_106D9D8  +
push 74h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
jmp loc_10CC55E  +
add al 80h +
push 0FFFFFFFEh  +
pop edi  +
mov [ebp-4] edi +
mov dword ptr [ebp-4] 1 +
push dword ptr [ebp-6Ch]  +
push 0  +
call sub_105015C  +
mov [ebp-4] edi +
jmp loc_10CC59B  +
push esi  +
lea ecx [ebp-68h] +
call sub_100B7A1  +
mov eax esi +
call sub_100B10C  +
retn 0Ch  +
***
push 60h  +
push offset dword_10CC728  +
call sub_100B068  +
mov esi [ebp+8] +
mov ebx [ebp+0Ch] +
mov edi [ebp+10h] +
lea eax [ebp-70h] +
push eax  +
push offset aGetdescriptive  +
push esi  +
lea ecx [ebp-68h] +
call sub_10CBAA9  +
mov eax [ebp-70h] +
test eax eax +
jl loc_10CC6F6  +
and dword ptr [ebp-6Ch] 0 +
lea eax [ebp-6Ch] +
push eax  +
push 0  +
call sub_1050233  +
test eax eax +
jnz loc_10CC657  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10CC6F6  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10CC6F6  +
and dword ptr [ebp-4] 0 +
mov eax [esi+4] +
mov ecx [eax] +
push edi  +
push ebx  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
mov [ebp-70h] esi +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CC6AE  +
cmp byte ptr [eax+19h] 5 +
jb loc_10CC6AE  +
push dword ptr [edi]  +
push ebx  +
push offset dword_106D9D8  +
push 75h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
jmp loc_10CC6AE  +
add al 80h +
push 0FFFFFFFEh  +
pop edi  +
mov [ebp-4] edi +
mov dword ptr [ebp-4] 1 +
push dword ptr [ebp-6Ch]  +
push 0  +
call sub_105015C  +
mov [ebp-4] edi +
jmp loc_10CC6EB  +
push esi  +
lea ecx [ebp-68h] +
call sub_100B7A1  +
mov eax esi +
call sub_100B10C  +
retn 0Ch  +
***
push 60h  +
push offset dword_10CC908  +
call sub_100B068  +
mov edi [ebp+8] +
mov ebx [ebp+0Ch] +
mov esi [ebp+10h] +
lea eax [ebp-6Ch] +
push eax  +
push offset aGetbackground  +
push edi  +
lea ecx [ebp-68h] +
call sub_10CBAA9  +
mov eax [ebp-6Ch] +
test eax eax +
jl loc_10CC8E1  +
and dword ptr [ebp-70h] 0 +
lea eax [ebp-70h] +
push eax  +
push 0  +
call sub_1050233  +
test eax eax +
jnz loc_10CC7B7  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10CC8E1  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10CC8E1  +
and dword ptr [ebp-4] 0 +
mov eax [edi+4] +
mov ecx [eax] +
push esi  +
push ebx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov [ebp-6Ch] eax +
mov eax lpDst +
mov edi offset lpDst +
cmp eax edi +
jz loc_10CC7FD  +
cmp byte ptr [eax+19h] 5 +
jb loc_10CC7FD  +
push dword ptr [ebp-6Ch]  +
push dword ptr [esi]  +
push ebx  +
mov ebx offset dword_106D9D8 +
push ebx  +
push 76h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CC254  +
mov eax lpDst +
jmp loc_10CC802  +
mov ebx offset dword_106D9D8 +
cmp dword ptr [ebp-6Ch] 0 +
jl loc_10CC894  +
mov ecx [esi] +
cmp ecx 1 +
jz loc_10CC855  +
add ecx 0FFFFFFFEh +
cmp ecx 2 +
ja loc_10CC83B  +
cmp eax edi +
jz loc_10CC894  +
cmp byte ptr [eax+19h] 5 +
jb loc_10CC894  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push ebx  +
push 78h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
jmp loc_10CC894  +
cmp eax edi +
jz loc_10CC894  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CC894  +
push ebx  +
push 79h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10CC894  +
cmp eax edi +
jz loc_10CC894  +
cmp byte ptr [eax+19h] 5 +
jb loc_10CC894  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push ebx  +
push 77h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CC016  +
jmp loc_10CC894  +
push 0FFFFFFFEh  +
pop esi  +
mov [ebp-4] esi +
mov dword ptr [ebp-4] 1 +
push dword ptr [ebp-70h]  +
push 0  +
call sub_105015C  +
mov [ebp-4] esi +
jmp loc_10CC8D3  +
push dword ptr [ebp-6Ch]  +
lea ecx [ebp-68h] +
call sub_100B7A1  +
mov eax [ebp-6Ch] +
call sub_100B10C  +
retn 0Ch  +
***
push 60h  +
push offset dword_10CCA90  +
call sub_100B068  +
mov edi [ebp+8] +
mov ebx [ebp+0Ch] +
mov esi [ebp+10h] +
lea eax [ebp-70h] +
push eax  +
push offset aGetlistpadinfo  +
push edi  +
lea ecx [ebp-68h] +
call sub_10CBAA9  +
mov eax [ebp-70h] +
test eax eax +
jl loc_10CCA68  +
and dword ptr [ebp-6Ch] 0 +
lea eax [ebp-6Ch] +
push eax  +
push 0  +
call sub_1050233  +
test eax eax +
jnz loc_10CC997  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10CCA68  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10CCA68  +
and dword ptr [ebp-4] 0 +
mov eax [edi+4] +
mov ecx [eax] +
push esi  +
push ebx  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
mov [ebp-70h] edi +
test edi edi +
jl loc_10CC9DE  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CCA20  +
cmp byte ptr [eax+19h] 5 +
jb loc_10CCA20  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push ebx  +
push offset dword_106D9D8  +
push 7Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CC132  +
jmp loc_10CCA20  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CCA20  +
cmp byte ptr [eax+19h] 5 +
jb loc_10CCA20  +
push edi  +
push ebx  +
push offset dword_106D9D8  +
push 7Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
jmp loc_10CCA20  +
push 0FFFFFFFEh  +
pop esi  +
mov [ebp-4] esi +
mov dword ptr [ebp-4] 1 +
push dword ptr [ebp-6Ch]  +
push 0  +
call sub_105015C  +
mov [ebp-4] esi +
jmp loc_10CCA5D  +
push edi  +
lea ecx [ebp-68h] +
call sub_100B7A1  +
mov eax edi +
call sub_100B10C  +
retn 0Ch  +
***
push 60h  +
push offset dword_10CCBD8  +
call sub_100B068  +
mov esi [ebp+8] +
mov edi [ebp+18h] +
lea eax [ebp-70h] +
push eax  +
push (offset dword_106D9D8+10h)  +
push esi  +
lea ecx [ebp-68h] +
call sub_10CBAA9  +
mov eax [ebp-70h] +
xor ebx ebx +
cmp eax ebx +
jl loc_10CCBCD  +
mov [ebp-6Ch] ebx +
lea eax [ebp-6Ch] +
push eax  +
push ebx  +
call sub_1050233  +
test eax eax +
jnz loc_10CCB1C  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_10CCBCD  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10CCBCD  +
mov [ebp-4] ebx +
mov eax [esi+4] +
mov ecx [eax] +
push edi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
mov [ebp-70h] ebx +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CCB85  +
cmp byte ptr [eax+19h] 5 +
jb loc_10CCB85  +
push dword ptr [edi]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset dword_106D9D8  +
push 87h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CBFD9  +
jmp loc_10CCB85  +
push 0FFFFFFFEh  +
pop esi  +
mov [ebp-4] esi +
mov dword ptr [ebp-4] 1 +
push dword ptr [ebp-6Ch]  +
push 0  +
call sub_105015C  +
mov [ebp-4] esi +
jmp loc_10CCBC2  +
push ebx  +
lea ecx [ebp-68h] +
call sub_100B7A1  +
mov eax ebx +
call sub_100B10C  +
retn 14h  +
***
push 60h  +
push offset dword_10CCD20  +
call sub_100B068  +
mov edi [ebp+8] +
mov esi [ebp+0Ch] +
mov ebx [ebp+10h] +
lea eax [ebp-70h] +
push eax  +
push (offset dword_106D9D8+10h)  +
push edi  +
lea ecx [ebp-68h] +
call sub_10CBAA9  +
mov eax [ebp-70h] +
test eax eax +
jl loc_10CCD17  +
and dword ptr [ebp-6Ch] 0 +
lea eax [ebp-6Ch] +
push eax  +
push 0  +
call sub_1050233  +
test eax eax +
jnz loc_10CCC67  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10CCD17  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10CCD17  +
and dword ptr [ebp-4] 0 +
mov eax [edi+4] +
mov ecx [eax] +
push ebx  +
push esi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
mov [ebp-70h] edi +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CCCCF  +
cmp byte ptr [eax+19h] 5 +
jb loc_10CCCCF  +
push dword ptr [ebx]  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push offset dword_106D9D8  +
push 88h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CBF92  +
jmp loc_10CCCCF  +
add al [eax+eax*4] +
push 0FFFFFFFEh  +
pop esi  +
mov [ebp-4] esi +
mov dword ptr [ebp-4] 1 +
push dword ptr [ebp-6Ch]  +
push 0  +
call sub_105015C  +
mov [ebp-4] esi +
jmp loc_10CCD0C  +
push edi  +
lea ecx [ebp-68h] +
call sub_100B7A1  +
mov eax edi +
call sub_100B10C  +
retn 0Ch  +
***
push 60h  +
push offset dword_10CCE80  +
call sub_100B068  +
mov esi [ebp+8] +
mov edi [ebp+10h] +
mov ebx [ebp+14h] +
lea eax [ebp-70h] +
push eax  +
push offset aCreatesnapin  +
push esi  +
lea ecx [ebp-68h] +
call sub_10CBAA9  +
mov eax [ebp-70h] +
test eax eax +
jl loc_10CCE56  +
and dword ptr [ebp-6Ch] 0 +
lea eax [ebp-6Ch] +
push eax  +
push 0  +
call sub_1050233  +
test eax eax +
jnz loc_10CCDAF  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10CCE56  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10CCE56  +
and dword ptr [ebp-4] 0 +
mov eax [esi+4] +
mov ecx [eax] +
push ebx  +
push edi  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
mov [ebp-70h] esi +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CCE0E  +
cmp byte ptr [eax+19h] 4 +
jb loc_10CCE0E  +
push ebx  +
push edi  +
push dword ptr [ebp+0Ch]  +
push offset dword_106D9D8  +
push 9Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CC2CD  +
jmp loc_10CCE0E  +
add al 80h +
push 0FFFFFFFEh  +
pop edi  +
mov [ebp-4] edi +
mov dword ptr [ebp-4] 1 +
push dword ptr [ebp-6Ch]  +
push 0  +
call sub_105015C  +
mov [ebp-4] edi +
jmp loc_10CCE4B  +
push esi  +
lea ecx [ebp-68h] +
call sub_100B7A1  +
mov eax esi +
call sub_100B10C  +
retn 10h  +
***
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
call sub_101C50A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 6Ch  +
push offset dword_10CD0C0  +
call sub_100B068  +
mov esi [ebp+8] +
mov edi [ebp+0Ch] +
mov ebx [ebp+10h] +
mov [ebp-7Ch] ebx +
mov eax [ebp+14h] +
mov [ebp-74h] eax +
lea eax [ebp-6Ch] +
push eax  +
push offset aEnumtasks  +
push esi  +
lea ecx [ebp-68h] +
call sub_10CBAA9  +
mov eax [ebp-6Ch] +
test eax eax +
jl loc_10CD0A3  +
and dword ptr [ebp-78h] 0 +
lea eax [ebp-78h] +
push eax  +
push 0  +
call sub_1050233  +
test eax eax +
jnz loc_10CCF34  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10CD0A3  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10CD0A3  +
xor eax eax +
mov [ebp-4] eax +
mov [ebp-70h] eax +
push eax  +
mov ecx [ebp-74h] +
call near ptr byte_10CCEAC+1  +
mov eax [esi+4] +
mov ecx [eax] +
lea edx [ebp-70h] +
push edx  +
push ebx  +
push edi  +
push eax  +
call dword ptr [ecx+10h]  +
mov [ebp-6Ch] eax +
mov eax lpDst +
mov ebx offset lpDst +
cmp eax ebx +
jz loc_10CCF8C  +
cmp byte ptr [eax+19h] 5 +
jb loc_10CCF8C  +
push dword ptr [ebp-70h]  +
push dword ptr [ebp-7Ch]  +
push edi  +
mov edi offset dword_106D9D8 +
push edi  +
push 70h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CC2CD  +
mov eax lpDst +
jmp loc_10CCF91  +
mov edi offset dword_106D9D8 +
xor ecx ecx +
cmp [ebp-6Ch] ecx +
jl loc_10CD011  +
cmp [ebp-70h] ecx +
jz loc_10CCFDC  +
push dword ptr [esi+8]  +
push dword ptr [ebp-70h]  +
mov ecx [ebp-74h] +
call sub_10C1BA1  +
mov [ebp-6Ch] eax +
test eax eax +
jge loc_10CD056  +
mov eax lpDst +
cmp eax ebx +
jz loc_10CD056  +
cmp byte ptr [eax+19h] 3 +
jb loc_10CD056  +
push dword ptr [esi+8]  +
call ds:?GetSnapinName@BookKeeping@@SGPBGH@Z  +
push eax  +
push edi  +
push 71h  +
jmp loc_10CD028  +
cmp [ebp-6Ch] ecx +
jl loc_10CD011  +
cmp eax ebx +
jz loc_10CD008  +
cmp byte ptr [eax+19h] 3 +
jb loc_10CD008  +
push dword ptr [esi+8]  +
call ds:?GetSnapinName@BookKeeping@@SGPBGH@Z  +
push eax  +
push edi  +
push 72h  +
mov eax lpDst +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
mov dword ptr [ebp-6Ch] 80004002h +
jmp loc_10CD056  +
cmp eax ebx +
jz loc_10CD056  +
cmp byte ptr [eax+19h] 3 +
jb loc_10CD056  +
push dword ptr [esi+8]  +
call ds:?GetSnapinName@BookKeeping@@SGPBGH@Z  +
push eax  +
push edi  +
push 73h  +
mov eax lpDst +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
jmp loc_10CD056  +
add al 80h +
push 0FFFFFFFEh  +
pop esi  +
mov [ebp-4] esi +
mov dword ptr [ebp-4] 1 +
push dword ptr [ebp-78h]  +
push 0  +
call sub_105015C  +
mov [ebp-4] esi +
jmp loc_10CD095  +
push dword ptr [ebp-6Ch]  +
lea ecx [ebp-68h] +
call sub_100B7A1  +
mov eax [ebp-6Ch] +
call sub_100B10C  +
retn 10h  +
***
push ebp  +
mov ebp esp +
cmp byte ptr [ebp+0Ch] 0 +
mov eax [ebp+8] +
jz loc_10CD103  +
or [ecx+94h] eax +
jmp loc_10CD10B  +
not eax  +
and [ecx+94h] eax +
pop ebp  +
retn 8  +
***
cmp dword ptr [ecx+10h] 0 +
jnz loc_10CD125  +
xor eax eax +
inc eax  +
test [ecx+94h] al +
jnz locret_10CD127  +
xor eax eax +
retn   +
***
call sub_1001F95  +
mov esi ecx +
mov [ebp-14h] esi +
xor ecx ecx +
mov [ebp-10h] ecx +
mov ebx [ebp+8] +
mov [ebx+8] ecx +
mov [ebx+0Ch] ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
inc dword ptr [eax]  +
mov dword ptr [ebx] 3 +
mov [ebx+4] ecx +
mov [ebp-4] ecx +
push offset aCviewsettingsS  +
mov ecx ebx +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp-14h] +
lea edi [esi+84h] +
mov esi [ebp+0Ch] +
movs   +
movs   +
movs   +
movs   +
or dword ptr [eax+94h] 4 +
mov eax ebx +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
test byte ptr dword_10FD930 1 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_10CD224  +
mov eax ds:off_10CD3B0 +
or dword_10FD930 1 +
mov dword_10FD40C eax +
mov eax ds:off_10CD3B4 +
mov dword_10FD414 eax +
mov eax ds:off_10CD3B8 +
mov dword_10FD410 2 +
mov dword_10FD418 4 +
mov dword_10FD41C eax +
mov ebx [ebp+8] +
lea eax [ebp-0Ch] +
push eax  +
push ds:off_10CD3A8  +
lea edi [esi+90h] +
mov ecx ebx +
mov [ebp-0Ch] edi +
mov dword ptr [ebp-8] offset unk_10FD408 +
mov dword ptr [ebp-4] 3 +
call sub_101F3ED  +
mov eax [edi] +
shr eax 2 +
test al 1 +
jz loc_10CD277  +
push 0  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [esi+80h] +
mov [eax+4] ecx +
mov ecx ebx +
mov [ebp+8] esp +
mov dword ptr [eax] 0Ch +
call sub_102CE9A  +
cmp byte ptr [ebx+0Ch] 0 +
jz loc_10CD292  +
mov eax [edi] +
shr eax 1 +
test al 1 +
jz loc_10CD292  +
push 0  +
lea eax [esi+4] +
push eax  +
mov ecx ebx +
call sub_101EA69  +
lea ecx [esi-4] +
call sub_10CD114  +
test al al +
jz loc_10CD348  +
test byte ptr dword_10FD930 2 +
jnz loc_10CD30B  +
mov ecx ds:off_103EF84 +
push 2  +
pop eax  +
or dword_10FD930 eax +
mov dword_10FD910 eax +
mov eax ds:off_103EF88 +
mov dword_10FD914 eax +
mov eax ds:off_103EFA0 +
mov dword_10FD91C eax +
mov eax ds:off_103EFB0 +
mov dword_10FD924 eax +
mov eax ds:off_1040FCC +
mov dword_10FD90C ecx +
mov dword_10FD918 3 +
mov dword_10FD920 1 +
mov dword_10FD928 4 +
mov dword_10FD92C eax +
push 0  +
push ecx  +
push ecx  +
lea eax [esi+7Ch] +
mov [ebp-18h] eax +
mov eax esp +
mov dword ptr [ebp-1Ch] offset off_101E844 +
mov dword ptr [ebp-14h] offset unk_10FD908 +
mov dword ptr [ebp-10h] 5 +
lea ecx [ebp-1Ch] +
mov [eax+4] ecx +
mov [ebp+8] esp +
mov dword ptr [eax] 0Eh +
push ds:off_101EF38  +
mov ecx ebx +
call sub_101DF07  +
cmp byte ptr [ebx+0Ch] 0 +
jnz loc_10CD369  +
mov eax [edi] +
shr eax 1 +
test al 1 +
jz loc_10CD363  +
push 0  +
lea eax [esi+4] +
push eax  +
mov ecx ebx +
call sub_101EA69  +
cmp byte ptr [ebx+0Ch] 0 +
jz loc_10CD374  +
lea eax [esi+94h] +
or dword ptr [eax] 0FFFFFFFFh +
jmp loc_10CD384  +
lea eax [esi+94h] +
cmp dword ptr [eax] 0FFFFFFFFh +
setnz cl  +
test cl cl +
jz loc_10CD3A1  +
xor edx edx +
inc edx  +
push edx  +
push ecx  +
push ecx  +
mov ecx esp +
mov [ecx] edx +
mov [ecx+4] eax +
mov [ebp+8] esp +
push ds:off_10CD3AC  +
mov ecx ebx +
call sub_101DF07  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
push 4  +
pop eax  +
retn   +
***
mov eax ds:off_10CD3D0 +
retn   +
***
call sub_1001F95  +
mov esi ecx +
xor ecx ecx +
mov [ebp-14h] ecx +
mov edi [ebp+8] +
mov [edi+8] ecx +
mov [edi+0Ch] ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
inc dword ptr [eax]  +
mov dword ptr [edi] 3 +
mov [edi+4] ecx +
xor ebx ebx +
mov [ebp-4] ecx +
inc ebx  +
push offset aCresultviewtyp  +
mov ecx edi +
mov [ebp-14h] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov ecx [ebp+10h] +
mov [ebp-10h] ecx +
and [ebp-10h] ebx +
mov [esi+5] bl +
mov byte ptr [esi+4] 0 +
jz loc_10CD430  +
or [esi+64h] ebx +
mov eax [ebp+0Ch] +
mov eax [eax] +
test eax eax +
jz loc_10CD48C  +
movzx eax word ptr [eax] +
xor edx edx +
cmp dx ax +
jz loc_10CD48C  +
push 7Bh  +
pop ecx  +
cmp cx ax +
mov eax [ebp+0Ch] +
jnz loc_10CD474  +
mov dword ptr [esi+8] 2 +
push dword ptr [eax]  +
lea ecx [esi+28h] +
call sub_101D0E4  +
test byte ptr [ebp+10h] 10h +
jnz loc_10CD469  +
or dword ptr [esi+70h] 2 +
cmp dword ptr [ebp-10h] 0 +
jz loc_10CD4CF  +
or [esi+70h] ebx +
jmp loc_10CD4CF  +
mov [esi+8] ebx +
push dword ptr [eax]  +
lea ecx [esi+0Ch] +
call sub_101D0E4  +
cmp dword ptr [ebp-10h] 0 +
jz loc_10CD4CF  +
or [esi+6Ch] ebx +
jmp loc_10CD4CF  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+68h] 0 +
test cl 4 +
jz loc_10CD4A0  +
mov dword ptr [esi+68h] 2 +
test cl 2 +
jz loc_10CD4A9  +
or dword ptr [esi+68h] 4 +
test cl 8 +
jz loc_10CD4B2  +
or dword ptr [esi+68h] 8 +
test cl 20h +
jz loc_10CD4BB  +
or dword ptr [esi+68h] 20h +
test cl 40h +
jz loc_10CD4C4  +
or dword ptr [esi+68h] 40h +
test cl cl +
jns loc_10CD4CF  +
or dword ptr [esi+68h] 80h +
mov eax [ebp+0Ch] +
mov eax [eax] +
test eax eax +
jz loc_10CD4E5  +
push eax  +
call ds:CoTaskMemFree  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
mov eax edi +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_1001F95  +
mov esi ecx +
xor edi edi +
mov [ebp-10h] edi +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
mov [ebp-1Ch] edi +
mov [ebp-18h] edi +
inc dword ptr [eax]  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] edi +
xor ebx ebx +
inc ebx  +
push offset aCviewsetting_1  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov eax [ebp+18h] +
mov eax [eax+14h] +
mov [ebp-14h] edi +
cmp eax edi +
jbe loc_10CD61C  +
lea edi [eax+1] +
lea eax [edi+edi] +
push eax  +
call ds:CoTaskMemAlloc  +
push 80070057h  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp dword ptr [ebp-20h] 0 +
jz loc_10CD5E6  +
cmp dword ptr [ebp-24h] 3 +
jnz loc_10CD5CE  +
cmp dword ptr [ebp-20h] 0 +
setl al  +
jmp loc_10CD5D0  +
mov al bl +
test al al +
jz loc_10CD5E6  +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10CD6CE  +
mov eax [ebp+18h] +
cmp dword ptr [eax+18h] 8 +
jb loc_10CD5F4  +
mov eax [eax+4] +
jmp loc_10CD5F7  +
add eax 4 +
push eax  +
push edi  +
push dword ptr [ebp-14h]  +
call sub_100A593  +
mov dword ptr [ebp-24h] 3 +
mov [ebp-20h] eax +
test eax eax +
jz loc_10CD61A  +
setl al  +
test al al +
jnz loc_10CD6C1  +
xor edi edi +
push dword ptr [ebp+14h]  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
lea ecx [esi+8] +
call near ptr dword_10CD3D4+5  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-20h] edi +
jz loc_10CD662  +
cmp dword ptr [ebp-24h] 3 +
jnz loc_10CD65C  +
cmp [ebp-20h] edi +
setl al  +
jmp loc_10CD65E  +
mov al bl +
test al al +
jnz loc_10CD6C1  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push 2  +
call near ptr byte_10CD0EC+1  +
cmp byte ptr [ebp+0Ch] 0 +
jz loc_10CD6C1  +
mov eax [ebp+10h] +
mov eax [eax] +
sub eax edi +
jz loc_10CD6B5  +
dec eax  +
jz loc_10CD6AD  +
dec eax  +
jz loc_10CD6A1  +
dec eax  +
jz loc_10CD695  +
dec eax  +
jnz loc_10CD6C1  +
mov dword ptr [esi+80h] 4 +
jmp loc_10CD6BB  +
mov dword ptr [esi+80h] 3 +
jmp loc_10CD6BB  +
mov dword ptr [esi+80h] 2 +
jmp loc_10CD6BB  +
mov [esi+80h] ebx +
jmp loc_10CD6BB  +
mov [esi+80h] edi +
or [esi+94h] ebx +
mov ecx [ebp+8] +
lea eax [ebp-24h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-24h] +
mov [ebp-10h] ebx +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 14h  +
***
adc eax offset ?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-58h] +
mov [ebp-38h] eax +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
push 0  +
push 1  +
lea ecx [ebp-30h] +
call sub_100CD3C  +
mov eax [ebp-38h] +
call sub_101D44D  +
retn 8  +
***
mov eax [ebp-48h] +
mov eax [eax+4] +
mov [ebp-38h] eax +
mov eax offset loc_10CD825 +
retn   +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
mov esi [ebp+8] +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
inc dword ptr [eax]  +
mov dword ptr [esi] 3 +
mov [esi+4] ebx +
push offset aCviewsetting_0  +
mov ecx esi +
mov [ebp-4] ebx +
mov dword ptr [ebp-10h] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push dword ptr [ebp+0Ch]  +
lea ecx [edi+8] +
call sub_1020B84  +
mov edx [ebp+0Ch] +
lea eax [edi+94h] +
or dword ptr [eax] 2 +
mov ecx [eax] +
cmp [edx+8] ebx +
jz loc_10CD8AA  +
and ecx 0FFFFFFFEh +
mov [eax] ecx +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea eax [esi+4] +
neg eax  +
lea ecx [esi+8] +
sbb eax eax +
and eax ecx +
mov ecx [ebp+8] +
push 0  +
push eax  +
call sub_101EA69  +
mov ecx [ebp+8] +
push 0  +
add esi 0A4h +
push esi  +
call sub_101EA69  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_10CD948  +
xor eax eax +
jmp loc_10CD94D  +
mov eax [ecx+8] +
sub eax edx +
xor ecx ecx +
test eax eax +
setz cl  +
mov al cl +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10CB23F  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
push esi  +
lea esi [eax+ecx] +
test eax eax +
jle loc_10CD99C  +
push eax  +
push [ebp+arg_0]  +
push eax  +
push ecx  +
call memmove_s  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
push [ebp+var_4]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10CD978  +
add esp 14h +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_8] +
sub ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
test ecx ecx +
jnz loc_10CD9EE  +
and [ebp+var_4] ecx +
jmp loc_10CD9F6  +
mov eax [esi+0Ch] +
sub eax ecx +
mov [ebp+var_4] eax +
test ebx ebx +
jz loc_10CDB49  +
test ecx ecx +
jnz loc_10CDA06  +
xor eax eax +
jmp loc_10CDA0B  +
mov eax [esi+8] +
sub eax ecx +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ebx +
jnb loc_10CDA19  +
call loc_10B6E00  +
test ecx ecx +
jnz loc_10CDA21  +
xor eax eax +
jmp loc_10CDA26  +
mov eax [esi+8] +
sub eax ecx +
add eax ebx +
push edi  +
cmp [ebp+var_4] eax +
jnb loc_10CDAD4  +
mov eax [ebp+var_4] +
shr eax 1 +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx [ebp+var_4] +
jnb loc_10CDA47  +
and [ebp+var_4] 0 +
jmp loc_10CDA4A  +
add [ebp+var_4] eax +
test ecx ecx +
jnz loc_10CDA52  +
xor eax eax +
jmp loc_10CDA57  +
mov eax [esi+8] +
sub eax ecx +
add eax ebx +
cmp [ebp+var_4] eax +
jnb loc_10CDA70  +
test ecx ecx +
jnz loc_10CDA66  +
xor eax eax +
jmp loc_10CDA6B  +
mov eax [esi+8] +
sub eax ecx +
add eax ebx +
mov [ebp+var_4] eax +
push 0  +
push [ebp+var_4]  +
call sub_107ABBD  +
push esi  +
mov edi eax +
mov eax [esi+4] +
push edi  +
push [ebp+arg_0]  +
push eax  +
call sub_107AF00  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_107AF00  +
push esi  +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_107AF00  +
mov eax [esi+4] +
test eax eax +
jnz loc_10CDAAF  +
xor ecx ecx +
jmp loc_10CDAB4  +
mov ecx [esi+8] +
sub ecx eax +
add ebx ecx +
test eax eax +
jz loc_10CDAC1  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+var_4] +
add eax edi +
mov [esi+0Ch] eax +
lea eax [edi+ebx] +
mov [esi+8] eax +
mov [esi+4] edi +
jmp loc_10CDB48  +
mov edi [esi+8] +
mov eax [ebp+arg_0] +
mov ecx edi +
sub ecx eax +
push esi  +
cmp ecx ebx +
jnb loc_10CDB18  +
lea ecx [ebx+eax] +
push ecx  +
push edi  +
push eax  +
call sub_107AF00  +
mov eax [esi+8] +
push esi  +
mov edi eax +
sub edi [ebp+arg_0] +
push eax  +
push [ebp+arg_8]  +
add edi [ebp+arg_4] +
push edi  +
call sub_107AF00  +
push [ebp+arg_0]  +
add [esi+8] ebx +
push edi  +
push [ebp+arg_4]  +
call sub_10CD9A6  +
add esp 0Ch +
jmp loc_10CDB48  +
push edi  +
mov [ebp+var_4] edi +
sub [ebp+var_4] ebx +
push edi  +
push [ebp+var_4]  +
call sub_107AF00  +
push edi  +
push [ebp+var_4]  +
mov [esi+8] eax +
push [ebp+arg_0]  +
call sub_107AED4  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10CD9A6  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10CD9D2  +
pop ebp  +
retn 0Ch  +
***
call sub_1001F95  +
mov edi ecx +
xor ecx ecx +
mov [ebp-10h] ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
push 3  +
mov [ebp-18h] ecx +
mov [ebp-14h] ecx +
inc dword ptr [eax]  +
pop ebx  +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ecx +
push offset aCdynamicpathen  +
lea ecx [ebp-20h] +
mov dword ptr [ebp-4] 1 +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp byte ptr [ebp+0Ch] 0 +
mov esi [ebp+10h] +
jz loc_10CDBC5  +
mov byte ptr [edi+4] 1 +
push dword ptr [esi]  +
jmp loc_10CDC64  +
mov eax [esi] +
lea ecx [eax+1] +
mov [esi] ecx +
mov al [eax] +
mov [edi+4] al +
movzx eax al +
dec eax  +
jz loc_10CDC0D  +
dec eax  +
jz loc_10CDBE9  +
mov [ebp-20h] ebx +
mov dword ptr [ebp-1Ch] 8000FFFFh +
jmp loc_10CDC75  +
mov eax [esi] +
test eax eax +
jz loc_10CDBDA  +
mov ebx [eax] +
mov ecx [edi+10h] +
lea edx [ebx+eax+4] +
push edx  +
add eax 4 +
push eax  +
push ecx  +
lea ecx [edi+8] +
call sub_10CDB54  +
add ebx 4 +
add [esi] ebx +
jmp loc_10CDC75  +
mov ebx [esi] +
push 80070057h  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 1 +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_10CDC63  +
cmp dword ptr [ebp-20h] 3 +
jnz loc_10CDC4E  +
cmp dword ptr [ebp-1Ch] 0 +
setl al  +
jmp loc_10CDC50  +
mov al 1 +
test al al +
jz loc_10CDC63  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
jmp loc_10CDC82  +
push ebx  +
lea ecx [edi+18h] +
call sub_101D0E4  +
mov edi [edi+2Ch] +
lea eax [edi+edi+2] +
add [esi] eax +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
call ds:??0SC@mmcerror@@QAE@ABV01@@Z  +
lea ecx [ebp-20h] +
mov dword ptr [ebp-10h] 1 +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp+8] +
call sub_1001FCF  +
retn 0Ch  +
***
call sub_100C4D0  +
mov edi [ebp+8] +
mov esi ecx +
lea eax [esi+4] +
push eax  +
push edi  +
mov [ebp-60h] edi +
call sub_10CAF1D  +
lea ebx [esi+8] +
mov ecx ebx +
call sub_100ECDB  +
xor eax eax +
mov [ebp-58h] eax +
mov [ebp-54h] eax +
mov [ebp-50h] eax +
mov [ebp-4] eax +
lea eax [ebp-5Ch] +
push eax  +
push edi  +
call sub_10CD95C  +
lea ecx [ebp-5Ch] +
call sub_10CD93D  +
test al al +
jz loc_10CDD45  +
lea ecx [ebp-5Ch] +
call sub_100A67D  +
mov eax edi +
jmp loc_10CDDC0  +
mov esi [ebp-58h] +
push 4  +
mov eax esi +
pop ecx  +
mov edi offset aMmccustomstrea +
xor edx edx +
cmps   +
mov [ebp-48h] eax +
mov byte ptr [ebp-4Ch] 1 +
jnz loc_10CDDB0  +
add eax 14h +
mov [ebp-48h] eax +
mov [ebp-4Ch] dl +
jmp loc_10CDDB0  +
lea ecx [ebp-44h] +
call sub_107B064  +
lea eax [ebp-48h] +
push eax  +
push dword ptr [ebp-4Ch]  +
lea eax [ebp-70h] +
push eax  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 1 +
call sub_10CDB73  +
lea ecx [ebp-70h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebx+4] +
lea ecx [ebp-44h] +
push ecx  +
push eax  +
mov ecx ebx +
call sub_107B97F  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 0 +
call sub_107A745  +
mov eax [ebp-48h] +
cmp eax [ebp-54h] +
jnz loc_10CDD6A  +
lea ecx [ebp-5Ch] +
call sub_100A67D  +
mov eax [ebp-60h] +
call sub_100C50D  +
retn 4  +
***
call sub_100A60E  +
mov eax [ebp-18h] +
mov eax [eax+4] +
mov [ebp-14h] eax +
mov eax offset loc_10CDE16 +
retn   +
***
call sub_100A60E  +
mov eax [ebp-18h] +
mov eax [eax+4] +
mov [ebp-14h] eax +
mov eax offset loc_10CDE7F +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
push 0  +
push ecx  +
push ecx  +
mov eax esp +
mov [ebp-4] esp +
mov esi ecx +
push 8  +
pop edi  +
lea ecx [esi+4] +
mov [eax+4] ecx +
mov ecx [ebp+8] +
mov [eax] edi +
push ds:off_10CDF70  +
call sub_101DF07  +
push 0  +
push ecx  +
push ecx  +
mov eax esp +
lea ecx [esi+8] +
mov [eax+4] ecx +
mov ecx [ebp+8] +
mov [ebp-4] esp +
mov [eax] edi +
push ds:off_10CDF78  +
call sub_101DF07  +
xor eax eax +
inc eax  +
test byte ptr dword_10FD94C al +
jnz loc_10CDF2B  +
or dword_10FD94C eax +
mov ecx ds:off_10CDF7C +
mov dword_10FD93C eax +
mov eax ds:off_10CDF80 +
mov dword_10FD940 eax +
mov eax ds:off_10CDF84 +
mov dword_10FD938 ecx +
mov dword_10FD944 2 +
mov dword_10FD948 eax +
push 0  +
push ecx  +
push ecx  +
lea eax [esi+0Ch] +
mov [ebp-10h] eax +
mov eax esp +
mov dword ptr [ebp-14h] offset off_101E844 +
mov dword ptr [ebp-0Ch] offset unk_10FD934 +
mov dword ptr [ebp-8] 3 +
lea ecx [ebp-14h] +
mov [eax+4] ecx +
mov ecx [ebp+8] +
mov [ebp-4] esp +
mov dword ptr [eax] 0Eh +
push ds:off_10CDF74  +
call sub_101DF07  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call sub_100A60E  +
mov eax [ebp-18h] +
mov eax [eax+4] +
mov [ebp-14h] eax +
mov eax offset loc_10CDFF8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+hWnd] +
push 104h  +
lea eax [ebp+ClassName] +
push eax  +
push esi  +
call ds:GetClassNameW  +
test eax eax +
jz loc_10CE082  +
mov ecx ds:off_10369D0 +
lea eax [ebp+ClassName] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10CE079  +
test dx dx +
jz loc_10CE075  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10CE079  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_10CE053  +
xor eax eax +
jmp loc_10CE07E  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_10CE091  +
push esi  +
call ds:GetParent  +
mov esi eax +
test esi esi +
jz loc_10CE0A3  +
jmp loc_10CE030  +
test esi esi +
jz loc_10CE0A3  +
push 0E900h  +
push esi  +
call ds:GetDlgItem  +
mov esi eax +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_10CE0D7  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10CE0CB  +
sub eax edx +
inc eax  +
jmp loc_10CE0DA  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_10CE0E5  +
mov ecx offset aNull_1 +
push 0  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop esi  +
pop ebp  +
retn 18h  +
***
retn   +
***
mov ecx [ecx+0Ch] +
xor eax eax +
test ecx ecx +
jz locret_10CE13C  +
push esi  +
xor esi esi +
jmp loc_10CE133  +
cmp esi 10h +
jge loc_10CE13B  +
movzx edx dx +
add eax edx +
inc ecx  +
inc ecx  +
inc esi  +
movzx edx word ptr [ecx] +
test dx dx +
jnz loc_10CE126  +
pop esi  +
retn   +
***
call sub_1001F95  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-30h] +
call sub_100AD56  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-44h] +
call sub_100AD56  +
push dword ptr [esi+0Ch]  +
lea eax [ebp-30h] +
push ds:off_10CE2B8  +
mov byte ptr [ebp-4] 1 +
push offset aSS  +
push eax  +
call sub_104C71D  +
mov edi eax +
add esp 10h +
test edi edi +
jge loc_10CE1C2  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE282  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE282  +
mov esi [esi+0Ch] +
push edi  +
push esi  +
push offset dword_106DA08  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
jmp loc_10CE282  +
and dword ptr [ebp-14h] 0 +
lea eax [ebp-10h] +
push eax  +
push 20019h  +
push 0  +
push dword ptr [ebp-2Ch]  +
mov dword ptr [ebp-18h] 4 +
push 80000002h  +
mov dword ptr [ebp-1Ch] 10h +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_10CE222  +
jle loc_10CE1FD  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jge loc_10CE282  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE282  +
cmp byte ptr [eax+19h] 4 +
jb loc_10CE282  +
push edi  +
push dword ptr [ebp-2Ch]  +
push offset dword_106DA08  +
push 0Ch  +
jmp loc_10CE1B2  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push 0  +
push ds:lpValueName  +
push dword ptr [ebp-10h]  +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_10CE277  +
cmp eax 2 +
jz loc_10CE282  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE282  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE282  +
push dword ptr [ebp-2Ch]  +
push ds:lpValueName  +
push offset dword_106DA08  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
jmp loc_10CE282  +
xor eax eax +
cmp [ebp-14h] eax +
setnz al  +
mov [esi+20h] eax +
cmp dword ptr [ebp-10h] 0 +
jz loc_10CE291  +
push dword ptr [ebp-10h]  +
call ds:RegCloseKey  +
lea ecx [ebp-44h] +
mov byte ptr [ebp-4] 0 +
call sub_100A77D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-30h] +
call sub_100A77D  +
mov eax edi +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_10CE142  +
mov eax [esi+0Ch] +
and [ebp+var_4] 0 +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
call ds:?AddSnapin@BookKeeping@@SGJPBGAAH@Z  +
test eax eax +
jl loc_10CE2ED  +
mov eax [ebp+var_4] +
mov [esi+1Ch] eax +
jmp loc_10CE317  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10CE317  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10CE317  +
push eax  +
push dword ptr [esi+0Ch]  +
push offset dword_106DA08  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10701D4  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+0Ch] +
call sub_100B724  +
mov ecx esi +
call sub_10CE2C1  +
mov eax [esi] +
push 17h  +
push 0  +
mov ecx esi +
call dword ptr [eax+24h]  +
mov ecx [ebp+0Ch] +
push eax  +
add esi 34h +
push esi  +
call sub_10CBD23  +
mov esi eax +
test esi esi +
jge loc_10CE379  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE379  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE379  +
push esi  +
push offset dword_106DA08  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
lea eax [ecx+34h] +
movzx ecx word ptr [eax+0Ch] +
push esi  +
movzx esi word ptr [eax+0Eh] +
xor esi ecx +
movzx ecx word ptr [eax+0Ah] +
xor esi ecx +
movzx ecx word ptr [eax+8] +
xor esi ecx +
movzx ecx word ptr [eax+6] +
xor esi ecx +
movzx ecx word ptr [eax+4] +
xor esi ecx +
movzx ecx word ptr [eax+2] +
xor esi ecx +
movzx ecx word ptr [eax] +
xor esi ecx +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10CE3DE  +
cmp byte ptr [ecx+19h] 5 +
jb loc_10CE3DE  +
push esi  +
push eax  +
push offset dword_106DA08  +
push 13h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10BEBAC  +
mov eax esi +
pop esi  +
retn   +
***
push 24h  +
mov eax offset byte_10E74CF +
call sub_1001F95  +
mov [ebp-10h] ecx +
mov eax ds:?s_CallDepth@SC@mmcerror@@0IA +
xor ebx ebx +
push 3  +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
inc dword ptr [eax]  +
pop edi  +
mov [ebp-20h] edi +
mov [ebp-1Ch] ebx +
push offset aCmtnodeScgetco  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi 80070057h +
push esi  +
push dword ptr [ebp+8]  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
cmp [ebp-1Ch] ebx +
jz loc_10CE485  +
cmp [ebp-20h] edi +
jnz loc_10CE45D  +
cmp [ebp-1Ch] ebx +
setl al  +
jmp loc_10CE45F  +
mov al 1 +
cmp al bl +
jz loc_10CE485  +
lea ecx [ebp-20h] +
call ds:?ToHr@SC@mmcerror@@QBEJXZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 8  +
***
cmp dword ptr [ebp+0Ch] 28h +
jnb loc_10CE493  +
mov [ebp-20h] edi +
mov [ebp-1Ch] esi +
jmp loc_10CE463  +
***
mov edi [ebp-10h] +
mov esi [ebp+8] +
add edi 34h +
mov dword ptr [ebp+8] 4 +
mov eax [edi] +
push 24h  +
push esi  +
push eax  +
call ds:_ltow  +
mov eax esi +
add esp 0Ch +
add edi 4 +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_10CE4BA  +
sub eax ecx +
sar eax 1 +
dec dword ptr [ebp+8]  +
lea esi [esi+eax*2] +
jnz loc_10CE4A3  +
jmp loc_10CE463  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_10CE558  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE551  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE551  +
push offset dword_106DA08  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax 80070057h +
jmp loc_10CE560  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 8  +
***
mov eax esi +
pop esi  +
retn   +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-24h] +
call sub_100AD56  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+8] 0 +
jnz loc_10CE5DA  +
mov edi 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE6EB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE6EB  +
push offset dword_106DA08  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10CE6EB  +
mov esi offset aGetcorversion +
push esi  +
push dword ptr [ebp+8]  +
call ds:__imp_GetProcAddress  +
mov edi eax +
test edi edi +
jnz loc_10CE638  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10CE603  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE6EB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE6EB  +
push edi  +
push esi  +
push offset dword_106DA08  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CE0B9  +
jmp loc_10CE6EB  +
push 104h  +
lea ecx [ebp-24h] +
call sub_101D69E  +
test eax eax +
jnz loc_10CE672  +
mov edi 8007000Eh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE6EB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE6EB  +
push edi  +
push offset dword_106DA08  +
push 1Dh  +
jmp loc_10CE6E0  +
lea ecx [ebp-10h] +
push ecx  +
push 105h  +
push eax  +
call edi  +
mov edi eax +
test edi edi +
jge loc_10CE688  +
xor eax eax +
jmp loc_10CE68C  +
mov eax [ebp-10h] +
dec eax  +
push eax  +
lea ecx [ebp-24h] +
call sub_101D6F2  +
test edi edi +
jge loc_10CE6B5  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE6EB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE6EB  +
push edi  +
push offset dword_106DA08  +
push 1Eh  +
jmp loc_10CE6E0  +
push dword ptr [ebp-20h]  +
mov ecx [ebp+0Ch] +
call sub_10CF145  +
mov edi eax +
test edi edi +
jge loc_10CE6EB  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE6EB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE6EB  +
push edi  +
push offset dword_106DA08  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call sub_100A77D  +
mov eax edi +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-24h] +
call sub_100AD56  +
and dword ptr [ebp-4] 0 +
mov edi offset aGetrequestedru +
push edi  +
push dword ptr [ebp+8]  +
call ds:__imp_GetProcAddress  +
mov esi eax +
test esi esi +
jnz loc_10CE791  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10CE75C  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE84A  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE84A  +
push esi  +
push edi  +
push offset dword_106DA08  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CE0B9  +
jmp loc_10CE84A  +
push 104h  +
lea ecx [ebp-24h] +
call sub_101D69E  +
test eax eax +
jnz loc_10CE7CB  +
mov esi 8007000Eh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE84A  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE84A  +
push esi  +
push offset dword_106DA08  +
push 21h  +
jmp loc_10CE83F  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-10h] +
push ecx  +
push 105h  +
push eax  +
push dword ptr [ebp+0Ch]  +
call esi  +
mov esi eax +
test esi esi +
jge loc_10CE7E7  +
xor eax eax +
jmp loc_10CE7EB  +
mov eax [ebp-10h] +
dec eax  +
push eax  +
lea ecx [ebp-24h] +
call sub_101D6F2  +
test esi esi +
jge loc_10CE814  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE84A  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE84A  +
push esi  +
push offset dword_106DA08  +
push 22h  +
jmp loc_10CE83F  +
push dword ptr [ebp-20h]  +
mov ecx [ebp+14h] +
call sub_10CF145  +
mov esi eax +
test esi esi +
jge loc_10CE84A  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE84A  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE84A  +
push esi  +
push offset dword_106DA08  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
call sub_100A77D  +
mov eax esi +
call sub_1001FCF  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_10CE8BF  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE8B8  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE8B8  +
push offset dword_106DA08  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax 80070057h +
jmp loc_10CE8C7  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_10CE8DF  +
xor eax eax +
jmp loc_10CE8F7  +
push 3  +
push offset aFx  +
push [ebp+arg_0]  +
call ds:wcsncmp  +
add esp 0Ch +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
call sub_1001F95  +
mov ebx [ebp+0Ch] +
test ebx ebx +
jnz loc_10CE941  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE937  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE937  +
push offset dword_106DA08  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov eax 80070057h +
jmp loc_10CE9E0  +
push 34h  +
call sub_100ABF0  +
mov ecx eax +
mov [ebp+0Ch] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10CE95E  +
call near ptr dword_10CE564+5  +
mov esi eax +
jmp loc_10CE960  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jnz loc_10CE993  +
mov edi 8007000Eh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE9D3  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE9D3  +
push offset dword_106DA08  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10CE9D3  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_10126D6  +
mov edi eax +
test edi edi +
jge loc_10CE9D3  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CE9C8  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CE9C8  +
push edi  +
push offset dword_106DA08  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+30h]  +
xor esi esi +
mov [ebx] esi +
test esi esi +
jz loc_10CE9DE  +
mov eax [esi] +
push esi  +
call dword ptr [eax]  +
mov eax edi +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
test eax eax +
jz loc_10CEA05  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10127A7  +
test [ebp+arg_0] 1 +
jz loc_10CEA29  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
jnz loc_10CEA6C  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CEA65  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CEA65  +
push offset dword_106DA08  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov esi 80070057h +
jmp loc_10CEAE7  +
mov edx [ecx+0Ch] +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10CEA74  +
sub eax esi +
sar eax 1 +
cmp eax [ebp+arg_4] +
jb loc_10CEAB0  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CEA65  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CEA65  +
push [ebp+arg_4]  +
push offset dword_106DA08  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10CEA65  +
push edx  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100A593  +
mov esi eax +
test esi esi +
jge loc_10CEAE7  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CEAE7  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CEAE7  +
push esi  +
push offset dword_106DA08  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100BE60 +
call sub_10127A7  +
test [ebp+arg_0] 1 +
jz loc_10CEB17  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov edi offset aMscoree_dll +
push edi  +
mov ebx ecx +
call sub_1097CEB  +
mov [ebp+hLibModule] eax +
test eax eax +
jnz loc_10CEB8B  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10CEB56  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CED50  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CED50  +
push esi  +
push edi  +
push offset dword_106DA08  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
jmp loc_10CED50  +
mov edi offset aCorbindtorunti +
push edi  +
push eax  +
call ds:__imp_GetProcAddress  +
test eax eax +
jnz loc_10CEBE5  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10CEBB0  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CED47  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CED47  +
push esi  +
push edi  +
push offset dword_106DA08  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CE0B9  +
jmp loc_10CED47  +
and [ebp+var_8] 0 +
lea ecx [ebp+var_8] +
push ecx  +
push offset dword_10CED88  +
push offset dword_10CED58  +
push 6  +
push offset aWks  +
push offset aV2_0_50727  +
call eax  +
mov esi eax +
cmp esi 1 +
jz loc_10CEC40  +
cmp esi 80040154h +
jz loc_10CEC40  +
test esi esi +
jge loc_10CED3E  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CED47  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CED47  +
push esi  +
push offset dword_106DA08  +
push 29h  +
jmp loc_10CEC95  +
xor eax eax +
mov word ptr [ebp+var_10] ax +
mov word ptr [ebp+var_10+2] ax +
mov [ebp+var_C] ax +
mov word ptr [ebp+var_18] ax +
mov word ptr [ebp+var_18+2] ax +
mov [ebp+var_14] ax +
lea eax [ebp+var_18] +
push eax  +
push 1  +
push offset dword_106D444  +
push [ebp+hLibModule]  +
call sub_10CE717  +
mov esi eax +
test esi esi +
jge loc_10CECA5  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CED47  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CED47  +
push esi  +
push offset dword_106DA08  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10CED47  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+hLibModule]  +
call sub_10CE582  +
mov esi eax +
test esi esi +
jge loc_10CECD7  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CED47  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CED47  +
push esi  +
push offset dword_106DA08  +
push 27h  +
jmp loc_10CEC95  +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_10] +
call sub_10CF310  +
test eax eax +
jge loc_10CED3E  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebx+24h] +
call sub_10CF35A  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CED39  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CED39  +
movzx ecx [ebp+var_C] +
push ecx  +
movzx ecx word ptr [ebp+var_10+2] +
push ecx  +
movzx ecx word ptr [ebp+var_10] +
push ecx  +
movzx ecx [ebp+var_14] +
push ecx  +
movzx ecx word ptr [ebp+var_18+2] +
push ecx  +
movzx ecx word ptr [ebp+var_18] +
push ecx  +
push offset dword_106DA08  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10CBF92  +
mov esi 8007070Dh +
lea eax [ebp+var_8] +
push eax  +
call sub_10CE9ED  +
push [ebp+hLibModule]  +
call ds:__imp_FreeLibrary  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
push esi  +
mov esi ecx +
mov ecx [ebp+0Ch] +
push edi  +
call sub_100B724  +
mov ecx esi +
call sub_10CE2C1  +
mov edi [esi+0Ch] +
push edi  +
call sub_10CE8D0  +
test eax eax +
jnz loc_10CEE27  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CEE1D  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CEE1D  +
push offset dword_106DA08  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov edi 8007054Fh +
jmp loc_10CF027  +
push edi  +
call SysAllocString  +
mov [ebp-4] eax +
test eax eax +
jnz loc_10CEE6B  +
mov edi 8007000Eh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF027  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CF027  +
push offset dword_106DA08  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10CF027  +
mov ecx offset unk_10F5778 +
call sub_10CF385  +
mov edi eax +
test edi edi +
jge loc_10CEEAD  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF027  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CF027  +
push edi  +
push offset dword_106DA08  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10CF027  +
cmp dword_10F579C 0 +
push ebx  +
mov ebx offset dword_106DA08 +
jnz loc_10CEF1D  +
mov ecx esi +
call sub_10CEB23  +
mov edi eax +
test edi edi +
jge loc_10CEEE1  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CEF1D  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CEF1D  +
push edi  +
push ebx  +
push 2Dh  +
jmp loc_10CEF12  +
push 17h  +
push 0  +
push 0  +
push offset dword_106D444  +
mov ecx offset dword_10F5798 +
call sub_10CBD23  +
mov edi eax +
test edi edi +
jge loc_10CEF1D  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CEF1D  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CEF1D  +
push edi  +
push ebx  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov ecx offset unk_10F5778 +
call sub_10CF441  +
test edi edi +
jl loc_10CF026  +
mov edi dword_10F5798 +
lea eax [ebp-8] +
push eax  +
push dword ptr [ebp-4]  +
mov eax [esi] +
mov ecx esi +
add edi 4 +
call dword ptr [eax+24h]  +
push eax  +
push offset dword_10F5798  +
call dword ptr [edi]  +
mov edi eax +
test edi edi +
jge loc_10CEF85  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF026  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CF026  +
push edi  +
push dword ptr [ebp-4]  +
push ebx  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10701D4  +
jmp loc_10CF026  +
mov eax [ebp-8] +
and dword ptr [ebp-0Ch] 0 +
mov ecx [eax] +
lea edx [ebp-0Ch] +
push edx  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
test edi edi +
jge loc_10CEFB6  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF026  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CF026  +
push edi  +
push ebx  +
push 30h  +
jmp loc_10CEFE5  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+24h]  +
mov ecx [ebp+0Ch] +
push eax  +
push dword ptr [ebp-0Ch]  +
call sub_10CBC39  +
mov edi eax +
test edi edi +
jge loc_10CEFF2  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF026  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CF026  +
push edi  +
push ebx  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10CF026  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF026  +
cmp byte ptr [eax+19h] 4 +
jb loc_10CF026  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+24h]  +
push eax  +
call ds:?GetSnapinName@BookKeeping@@SGPBGH@Z  +
push eax  +
mov eax lpDst +
push ebx  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7E8  +
pop ebx  +
push dword ptr [ebp-4]  +
call SysFreeString  +
mov eax [ebp-8] +
test eax eax +
jz loc_10CF03D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov eax ds:off_106D908 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dx [ecx] +
mov [eax] dx +
mov dx [ecx+2] +
mov [eax+2] dx +
mov cx [ecx+4] +
mov [eax+4] cx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_4] +
mov [edi] ax +
mov eax [ebp+arg_0] +
mov ecx [eax] +
xor edx edx +
xor esi esi +
mov [ebp+var_4] edx +
cmp ecx edx +
jnz loc_10CF0DA  +
mov [ebp+var_4] 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF137  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CF137  +
push offset dword_106DA18  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10CF137  +
movzx ecx word ptr [ecx] +
push ebx  +
lea ebx [ecx-30h] +
cmp bx 9 +
ja loc_10CF0FF  +
add dword ptr [eax] 2 +
imul esi esi +
movzx ecx cx +
lea esi [esi+ecx-30h] +
mov ecx [eax] +
movzx ecx word ptr [ecx] +
inc edx  +
cmp edx 5 +
jl loc_10CF0DE  +
cmp esi 0FFFFh +
pop ebx  +
jle loc_10CF134  +
mov [ebp+var_4] 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF134  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CF134  +
push esi  +
push offset dword_106DA18  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
mov [edi] si +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov esi ecx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
cmp eax ebx +
jnz loc_10CF19A  +
mov edi 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF2D7  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CF2D7  +
push offset dword_106DA18  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
jmp loc_10CF2D7  +
cmp word ptr [eax] 76h +
jz loc_10CF1C8  +
mov edi 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF2D7  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CF2D7  +
push offset dword_106DA18  +
push 0Dh  +
jmp loc_10CF18A  +
add eax 2 +
mov [ebp+arg_0] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10CF08D  +
mov edi eax +
cmp edi ebx +
jge loc_10CF213  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF2D7  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CF2D7  +
push edi  +
push offset dword_106DA18  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10A4E26  +
jmp loc_10CF2D7  +
mov eax [ebp+arg_0] +
cmp word ptr [eax] 2Eh +
push 2  +
pop ebx  +
jnz loc_10CF295  +
add [ebp+arg_0] ebx +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10CF08D  +
mov edi eax +
test edi edi +
jge loc_10CF258  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF2D7  +
cmp [eax+19h] bl +
jb loc_10CF2D7  +
push edi  +
push offset dword_106DA18  +
push 0Fh  +
jmp loc_10CF203  +
mov eax [ebp+arg_0] +
cmp word ptr [eax] 2Eh +
jnz loc_10CF295  +
add [ebp+arg_0] ebx +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10CF08D  +
mov edi eax +
test edi edi +
jge loc_10CF295  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF2D7  +
cmp [eax+19h] bl +
jb loc_10CF2D7  +
push edi  +
push offset dword_106DA18  +
push 10h  +
jmp loc_10CF203  +
mov eax [ebp+arg_0] +
cmp word ptr [eax] 0 +
jz loc_10CF2C0  +
mov edi 80070057h +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF2D7  +
cmp [eax+19h] bl +
jb loc_10CF2D7  +
push offset dword_106DA18  +
push 11h  +
jmp loc_10CF18A  +
mov ax word ptr [ebp+var_4] +
mov [esi] ax +
mov ax word ptr [ebp+var_8] +
mov [esi+2] ax +
mov ax word ptr [ebp+var_C] +
mov [esi+4] ax +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
movzx ecx [ebp+arg_4] +
sub eax ecx +
test eax eax +
jle loc_10CF2FD  +
xor eax eax +
inc eax  +
jmp loc_10CF307  +
xor ecx ecx +
test eax eax +
setnl cl  +
dec ecx  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
movzx eax word ptr [edi] +
mov esi ecx +
push eax  +
movzx eax word ptr [esi] +
push eax  +
call sub_10CF2E5  +
test eax eax +
jnz loc_10CF34F  +
movzx eax word ptr [edi+2] +
push eax  +
movzx eax word ptr [esi+2] +
push eax  +
call sub_10CF2E5  +
test eax eax +
jnz loc_10CF34F  +
movzx eax word ptr [edi+4] +
push eax  +
movzx eax word ptr [esi+4] +
push eax  +
call sub_10CF2E5  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
or dword ptr [esi] 1 +
lea ecx [esi+4] +
call sub_10CF064  +
push [ebp+arg_0]  +
lea ecx [esi+0Ah] +
call sub_10CF064  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_100A4F0  +
xor eax eax +
mov [ebp-1Ch] eax +
mov [ebp-4] eax +
cmp [ecx+1Ch] eax +
jz loc_10CF3AA  +
add ecx 4 +
push ecx  +
call ds:EnterCriticalSection  +
jmp loc_10CF40E  +
mov dword ptr [ebp-1Ch] 8007054Fh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF40E  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CF40E  +
push offset dword_106DA28  +
push 0Bh  +
jmp loc_10CF403  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10CF40E  +
cmp byte ptr [eax+19h] 2 +
jb loc_10CF40E  +
push offset dword_106DA28  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
call sub_100A4DC  +
retn   +
***
cmp dword ptr [ecx+1Ch] 0 +
jz loc_10CF452  +
add ecx 4 +
push ecx  +
call ds:LeaveCriticalSection  +
retn   +
mov eax lpDst +
cmp eax offset lpDst +
jz locret_10CF476  +
cmp byte ptr [eax+19h] 2 +
jb locret_10CF476  +
push offset dword_106DA28  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F7C2  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100C16C +
call sub_1050817  +
test byte ptr [ebp+8] 1 +
jz loc_10CF49C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ds:off_10CF4B0 +
retn   +
***
mov eax offset off_10CF4CC +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push 3  +
xor bl bl +
call sub_1016801  +
test eax eax +
jz loc_10CF508  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_10CFA05  +
inc bl  +
mov al bl +
pop ebx  +
pop ebp  +
retn 4  +
***
push 4  +
mov eax offset dword_10E7528 +
call sub_1001F95  +
push 5Ch  +
call sub_100ABF0  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10CF53A  +
call sub_103379F  +
call sub_1001FCF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101B85D  +
test byte ptr [ebp+8] 1 +
jz loc_10CF563  +
push esi  +
mov ecx offset dword_10F5414 +
call sub_100A78D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset off_10CF578 +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp [ebp+arg_0] edi +
jz loc_10CF65D  +
cmp byte ptr [esi+40h] 0 +
jz loc_10CF65D  +
mov eax [esi+8] +
and [ebp+var_4] edi +
mov [ebp+var_8] eax +
jmp loc_10CF603  +
mov ecx [eax] +
mov [ebp+var_8] ecx +
mov ecx [eax+8] +
mov [ebp+var_4] ecx +
test ecx ecx +
jz loc_10CF60C  +
call sub_10CFAE2  +
cmp eax [ebp+arg_0] +
jz loc_10CF609  +
mov ecx [ebp+var_4] +
call sub_1045EFC  +
test al al +
jz loc_10CF600  +
push [ebp+arg_0]  +
mov ecx [ebp+var_4] +
call sub_10CFD2B  +
mov edi eax +
test edi edi +
jnz loc_10CF60C  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_10CF60C  +
jmp loc_10CF5CA  +
mov edi [ebp+var_4] +
mov eax [esi+2Ch] +
neg eax  +
sbb eax eax +
mov [ebp+var_C] 0FFFFh +
mov [ebp+var_8] eax +
jz loc_10CF65D  +
add esi 20h +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call ?GetNextAssoc@CMapWordToPtr@@QBEXAAPAU__POSITION@@AAGAAPAX@Z  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_10CF652  +
call sub_1044DCF  +
test al al +
jz loc_10CF652  +
mov ecx [ebp+var_4] +
call sub_10CFAE2  +
cmp eax [ebp+arg_0] +
jz loc_10CF65A  +
cmp [ebp+var_8] 0 +
jz loc_10CF65D  +
jmp loc_10CF622  +
mov edi [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ecx+8] +
xor ebx ebx +
test esi esi +
jz loc_10CF6BF  +
push edi  +
mov eax esi +
mov edi [eax+8] +
mov esi [esi] +
test edi edi +
jz loc_10CF6BE  +
mov ecx edi +
call sub_10CFAD9  +
cmp eax [ebp+arg_0] +
jz loc_10CF6B3  +
mov ecx edi +
call sub_1045EFC  +
test al al +
jz loc_10CF6AD  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_10CFCF7  +
mov ebx eax +
test ebx ebx +
jnz loc_10CF6BE  +
test esi esi +
jz loc_10CF6BE  +
jmp loc_10CF67B  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_10CF6BC  +
mov [eax] esi +
mov ebx edi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
dec dword ptr [esi+4Ch]  +
jnz loc_10CF70C  +
lea eax [ebp+var_4] +
push eax  +
push 800Dh  +
lea ecx [esi+20h] +
call ?Lookup@CMapWordToPtr@@QBEHGAAPAX@Z  +
test eax eax +
jz loc_10CF70C  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz loc_10CF70C  +
push 0  +
call sub_1046539  +
push dword ptr [esi+50h]  +
mov ecx [ebp+var_4] +
call sub_102459D  +
mov eax [esi+4Ch] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10160C2  +
test byte ptr [ebp+8] 1 +
jz loc_10CF731  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+10h] +
mov eax [ebp+arg_0] +
mov [eax] edx +
dec dword ptr [ecx+0Ch]  +
mov [ecx+10h] eax +
jnz loc_10CF757  +
call sub_1015FA3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
push ebx  +
mov ebx [ebp+arg_8] +
not eax  +
test al 1 +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov [ebp+arg_8] eax +
jnz loc_10CF7A0  +
jmp loc_10CF7C7  +
mov edi 1FFFFFFFh +
cmp ebx edi +
jnb loc_10CF78A  +
mov edi ebx +
mov ecx [ebp+arg_0] +
mov esi edi +
shl esi 2 +
push esi  +
push [ebp+arg_8]  +
call ?Write@CArchive@@QAEXPBXI@Z  +
sub ebx edi +
add [ebp+arg_8] esi +
test ebx ebx +
jbe loc_10CF7CB  +
jmp loc_10CF77F  +
mov edi 1FFFFFFFh +
cmp ebx edi +
jnb loc_10CF7B1  +
mov edi ebx +
mov ecx [ebp+arg_0] +
mov esi edi +
shl esi 2 +
push esi  +
push [ebp+arg_8]  +
call ?Read@CArchive@@QAEIPAXI@Z  +
sub ebx edi +
add [ebp+arg_8] esi +
test ebx ebx +
ja loc_10CF7A6  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
cmp eax [ecx+4] +
jnz loc_10CF7EC  +
mov edx [eax] +
mov [ecx+4] edx +
jmp loc_10CF7F3  +
mov edx [eax+4] +
mov esi [eax] +
mov [edx] esi +
cmp eax [ecx+8] +
jnz loc_10CF800  +
mov edx [eax+4] +
mov [ecx+8] edx +
jmp loc_10CF808  +
mov edx [eax] +
mov esi [eax+4] +
mov [edx+4] esi +
push eax  +
call sub_10CF73D  +
pop esi  +
pop ebp  +
retn 4  +
***
push 4  +
mov eax offset dword_10E7528 +
call sub_1001F95  +
push 58h  +
call sub_100ABF0  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10CF83E  +
call sub_1041FFE  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov [ebp-14h] ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionpanez_7  +
lea ecx [ebp-24h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
cmp [ebp+8] ebx +
jz loc_10CF911  +
mov ecx [ebp-14h] +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-10h] ebx +
call sub_10CF66A  +
push 8000FFFFh  +
push dword ptr [ebp-10h]  +
mov edi eax +
push edi  +
lea eax [ebp-34h] +
push eax  +
call sub_100C5A1  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-34h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call esi  +
cmp eax ebx +
jge loc_10CF8F6  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10CF911  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10CF911  +
push eax  +
push offset unk_106DA54  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10CF911  +
mov ecx [ebp-14h] +
push dword ptr [ebp-10h]  +
add ecx 4 +
call sub_10CF7D7  +
cmp edi ebx +
jz loc_10CF911  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax+4]  +
lea ecx [ebp-24h] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov eax [edi+14h] +
not eax  +
mov esi ecx +
mov ecx edi +
test al 1 +
jz loc_10CF9A5  +
push dword ptr [esi+0Ch]  +
call ?WriteCount@CArchive@@QAEXK@Z  +
mov esi [esi+4] +
jmp loc_10CF99F  +
push 1  +
lea eax [esi+8] +
push eax  +
push edi  +
call sub_10CF760  +
mov esi [esi] +
test esi esi +
jz loc_10CF9CB  +
jmp loc_10CF991  +
***
push ebx  +
call ?ReadCount@CArchive@@QAEKXZ  +
mov ebx eax +
jmp loc_10CF9C6  +
push 1  +
lea eax [ebp+8] +
push eax  +
push edi  +
dec ebx  +
call sub_10CF760  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1024631  +
test ebx ebx +
jnz loc_10CF9AF  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ds:?classCObject@CObject@@2UCRuntimeClass@@B +
retn   +
***
mov eax offset off_10CF9E8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 2Ch +
pop ebp  +
jmp ??4CString@@QAEABV0@PBG@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push edi  +
xor ebx ebx +
xor edi edi +
cmp [ebp+arg_0] ebx +
jz loc_10CFA76  +
cmp [ecx+24h] bl +
jz loc_10CFA76  +
mov eax [ecx+10h] +
cmp eax ebx +
jz loc_10CFA76  +
cmp eax 1 +
jl loc_10CFA76  +
or [ebp+var_8] 0FFFFFFFFh +
push esi  +
mov [ebp+var_4] ebx +
mov [ebp+var_C] ebx +
lea esi [ecx+4] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call ?GetNextAssoc@CMapWordToPtr@@QBEXAAPAU__POSITION@@AAGAAPAX@Z  +
push [ebp+arg_0]  +
mov ecx [ebp+var_4] +
call sub_10CF59E  +
cmp eax ebx +
jnz loc_10CFA73  +
cmp [ebp+var_8] ebx +
jz loc_10CFA75  +
jmp loc_10CFA4A  +
mov edi eax +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov eax offset off_10CFABC +
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
xor eax eax +
cmp dword ptr [ecx+6Ch] 0FFFFFFFFh +
setnz al  +
retn   +
***
retn   +
***
mov eax [ecx+5Ch] +
shr eax 1 +
and al 1 +
retn   +
***
retn   +
***
call sub_1001F95  +
mov edi ecx +
mov [ebp-10h] edi +
push 0  +
lea ecx [ebp-24h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionpanet_1  +
lea ecx [ebp-24h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov esi 8000FFFFh +
push esi  +
push dword ptr [edi+74h]  +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov ebx ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-24h] +
call ebx  +
test eax eax +
jge loc_10CFBD4  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10CFC98  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10CFC98  +
push eax  +
push offset dword_106DA98  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10CFC98  +
mov eax [ebp-10h] +
mov ecx [eax+74h] +
call sub_1016822  +
test eax eax +
jnz loc_10CFBE9  +
push esi  +
jmp loc_10CFC8F  +
mov ecx eax +
call sub_10174DF  +
push esi  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-24h] +
call ebx  +
test eax eax +
jge loc_10CFC3C  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10CFC98  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10CFC98  +
push eax  +
push offset dword_106DA98  +
push 0Dh  +
jmp loc_10CFBC4  +
mov esi [ebp-10h] +
cmp dword ptr [esi+50h] 0 +
jnz loc_10CFC7D  +
push 80070057h  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ebx  +
test eax eax +
jge loc_10CFC7D  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10CFC98  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10CFC98  +
push eax  +
push offset dword_106DA98  +
push 0Eh  +
jmp loc_10CFBC4  +
mov eax [esi+50h] +
mov ecx [ebp-14h] +
push 10h  +
push dword ptr [ebp+8]  +
push eax  +
call sub_10D0230  +
push eax  +
lea ecx [ebp-24h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-24h] +
call ebx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-24h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+8] +
xor eax eax +
test ecx ecx +
jz loc_10CFD22  +
push esi  +
mov edx ecx +
mov edx [edx+8] +
mov ecx [ecx] +
test edx edx +
jz loc_10CFD21  +
mov esi [edx+64h] +
cmp esi [ebp+arg_0] +
jz loc_10CFD1F  +
test ecx ecx +
jz loc_10CFD21  +
jmp loc_10CFD06  +
mov eax edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
test esi esi +
jz loc_10CFD57  +
mov ecx [ecx+8] +
jmp loc_10CFD4F  +
mov edx ecx +
mov edx [edx+8] +
mov ecx [ecx] +
test edx edx +
jz loc_10CFD57  +
cmp [edx+50h] esi +
jz loc_10CFD55  +
test ecx ecx +
jz loc_10CFD57  +
jmp loc_10CFD3F  +
mov eax edx +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
push 4  +
mov eax offset dword_10E7528 +
call sub_1001F95  +
push 78h  +
call sub_100ABF0  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10CFD90  +
call sub_1024921  +
call sub_1001FCF  +
retn   +
***
call sub_1001F95  +
mov [ebp-18h] ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCactionpanez_2  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
push 78h  +
mov [ebp-0Dh] bl +
call sub_100ABF0  +
mov ecx eax +
mov [ebp-14h] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx ebx +
jz loc_10CFDE8  +
call sub_1024921  +
mov [ebp-14h] eax +
jmp loc_10CFDEB  +
mov [ebp-14h] ebx +
push 80070057h  +
push dword ptr [ebp-14h]  +
lea eax [ebp-38h] +
push eax  +
mov [ebp-4] bl +
call sub_100A3AE  +
mov edi ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call edi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-28h] +
call esi  +
cmp eax ebx +
jge loc_10CFE5E  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10CFF0A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10CFF0A  +
push eax  +
push offset dword_106DA98  +
push 16h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10CFF0A  +
push dword ptr [ebp+8]  +
mov eax [ebp-18h] +
mov eax [eax+74h] +
mov ecx [ebp-14h] +
push 1  +
push ebx  +
push 1  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
call sub_1024434  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call esi  +
cmp eax ebx +
jge loc_10CFEA9  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10CFF0A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10CFF0A  +
push eax  +
push offset dword_106DA98  +
push 17h  +
jmp loc_10CFE4E  +
mov ecx [ebp-18h] +
push dword ptr [ebp-14h]  +
add ecx 4 +
call sub_1024631  +
push 8007000Eh  +
push eax  +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 3 +
call edi  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call esi  +
cmp eax ebx +
jge loc_10CFF06  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10CFF0A  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10CFF0A  +
push eax  +
push offset dword_106DA98  +
push 18h  +
jmp loc_10CFE4E  +
mov byte ptr [ebp-0Dh] 1 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_10CFF1D  +
cmp [ebp-0Dh] bl +
jnz loc_10CFF1D  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
call sub_1001FCF  +
retn 4  +
***
call sub_1001F95  +
mov [ebp-10h] ecx +
push 0  +
lea ecx [ebp-20h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
and dword ptr [ebp-4] 0 +
push offset aCactionpanez_3  +
lea ecx [ebp-20h] +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
mov edi [ebp+18h] +
mov ebx 80070057h +
push ebx  +
push edi  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jge loc_10D0001  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D015F  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D015F  +
push eax  +
push offset dword_106DA98  +
push 19h  +
jmp loc_10D0154  +
cmp dword ptr [edi] 0 +
jz loc_10D0042  +
push ebx  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jge loc_10D0042  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D015F  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D015F  +
push eax  +
push offset dword_106DA98  +
push 1Ah  +
jmp loc_10D0154  +
push 78h  +
call sub_100ABF0  +
mov [ebp+18h] eax +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_10D005D  +
mov ecx eax +
call sub_1024921  +
jmp loc_10D005F  +
xor eax eax +
mov byte ptr [ebp-4] 0 +
mov [edi] eax +
mov ebx 8007000Eh +
test eax eax +
jnz loc_10D00AA  +
push ebx  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jge loc_10D00AA  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D015F  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D015F  +
push eax  +
push offset dword_106DA98  +
push 1Bh  +
jmp loc_10D0154  +
push dword ptr [ebp+1Ch]  +
mov eax [ebp-10h] +
mov eax [eax+74h] +
mov ecx [edi] +
push 1  +
push 0  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_1024434  +
push eax  +
lea ecx [ebp-20h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jge loc_10D00FC  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D015F  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D015F  +
push eax  +
push offset dword_106DA98  +
push 1Ch  +
jmp loc_10D0154  +
mov ecx [ebp-10h] +
push dword ptr [edi]  +
add ecx 4 +
call sub_1024631  +
push ebx  +
push eax  +
lea eax [ebp-30h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 3 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0 +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-20h] +
call esi  +
test eax eax +
jge loc_10D015F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D015F  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D015F  +
push eax  +
push offset dword_106DA98  +
push 1Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
lea ecx [ebp-20h] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+10h] 0FFFFFFFFh +
jz loc_10D01FD  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10D0227  +
cmp byte ptr [eax+19h] 2 +
jb loc_10D0227  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset dword_106DAD0  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F91C  +
jmp loc_10D0227  +
mov eax lpDst +
cmp eax offset lpDst +
jz loc_10D0227  +
cmp byte ptr [eax+19h] 2 +
jb loc_10D0227  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset dword_106DAD0  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_106F855  +
pop ebp  +
retn 10h  +
***
call sub_1001F95  +
xor edi edi +
push edi  +
lea ecx [ebp-1Ch] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCdirectuire_13  +
lea ecx [ebp-1Ch] +
mov [ebp-4] edi +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
cmp [ebp+8] edi +
jnz loc_10D026C  +
push 80070057h  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-1Ch] +
call esi  +
cmp eax edi +
jge loc_10D02A4  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D0334  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D0334  +
push eax  +
push offset dword_106DAD0  +
push 46h  +
jmp loc_10D0329  +
mov ecx [ebp+8] +
call ?GetDisplayNode@Element@DirectUI@@QAEPAUHGADGET__@@XZ  +
mov edi eax +
mov ebx 8000FFFFh +
test edi edi +
jnz loc_10D02C2  +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call esi  +
test eax eax +
jge loc_10D02E9  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D0334  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D0334  +
push eax  +
push offset dword_106DAD0  +
push 47h  +
jmp loc_10D0329  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call ds:GetGadgetRect  +
test eax eax +
jnz loc_10D0304  +
push ebx  +
lea ecx [ebp-1Ch] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-1Ch] +
call esi  +
test eax eax +
jge loc_10D0334  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D0334  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D0334  +
push eax  +
push offset dword_106DAD0  +
push 48h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
lea ecx [ebp-1Ch] +
call esi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
mov esi eax +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax esi +
call sub_1001FCF  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+18h] 0 +
jz loc_10D03BC  +
push edi  +
call sub_1034429  +
mov edi eax +
test edi edi +
jz loc_10D03BB  +
mov ecx [esi+18h] +
call ?Destroy@DUIXmlParser@DirectUI@@QAEXXZ  +
mov [esi+18h] edi +
pop edi  +
pop esi  +
retn   +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCdirectuiren_8  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
movzx eax word ptr [edi+34h] +
mov ecx [ebp+8] +
push eax  +
mov [ebp-18h] ebx +
mov [ebp-10h] ebx +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
push 8000FFFFh  +
push eax  +
mov [ebp-14h] eax +
lea eax [ebp-38h] +
push eax  +
call sub_100A3AE  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-28h] +
call esi  +
cmp eax ebx +
jge loc_10D048B  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D0645  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D0645  +
push eax  +
push offset dword_106DAD0  +
push 24h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10D0645  +
push 80070057h  +
push dword ptr [ebp+8]  +
lea eax [ebp-38h] +
push dword ptr [edi+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [edi+24h]  +
push eax  +
call sub_100D4B3  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
lea ecx [ebp-28h] +
call esi  +
cmp eax ebx +
jge loc_10D04EE  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D0645  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D0645  +
push eax  +
push offset dword_106DAD0  +
push 25h  +
jmp loc_10D047B  +
mov ecx [edi+18h] +
lea eax [ebp-10h] +
push eax  +
push ebx  +
push dword ptr [ebp-14h]  +
push ebx  +
push off_10FD428  +
call ?CreateElement@DUIXmlParser@DirectUI@@QAEJPBGPAVElement@2@1PAKPAPAV32@@Z  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call esi  +
cmp eax ebx +
jge loc_10D0542  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D0645  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D0645  +
push eax  +
push offset dword_106DAD0  +
push 26h  +
jmp loc_10D047B  +
movzx eax word ptr [edi+2Ch] +
mov ecx [ebp-10h] +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
cmp eax ebx +
jnz loc_10D0567  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10D0645  +
push ebx  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push ebx  +
push ebx  +
push eax  +
call ?ContentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push 2  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call esi  +
cmp eax ebx +
jge loc_10D05BB  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D0645  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D0645  +
push eax  +
push offset dword_106DAD0  +
push 27h  +
jmp loc_10D047B  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
push 14h  +
push dword ptr [ebp-10h]  +
call sub_100D4ED  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call esi  +
cmp eax ebx +
jge loc_10D05FF  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D0645  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D0645  +
push eax  +
push offset dword_106DAD0  +
push 28h  +
jmp loc_10D047B  +
push dword ptr [ebp-10h]  +
mov ecx [ebp-14h] +
call ?Add@Element@DirectUI@@QAEJPAV12@@Z  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call esi  +
cmp eax ebx +
jge loc_10D063F  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D0645  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D0645  +
push eax  +
push offset dword_106DAD0  +
push 29h  +
jmp loc_10D047B  +
mov eax [ebp-10h] +
mov [ebp-18h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
call sub_1001FCF  +
retn 8  +
***
call sub_1001F95  +
mov edi ecx +
xor ebx ebx +
push ebx  +
lea ecx [ebp-28h] +
call ds:??0SC@mmcerror@@QAE@J@Z  +
push offset aCdirectuiren_9  +
lea ecx [ebp-28h] +
mov [ebp-4] ebx +
call ds:?SetFunctionName@SC@mmcerror@@QAEXPBG@Z  +
movzx eax word ptr [edi+34h] +
mov ecx [ebp+8] +
push eax  +
mov [ebp-18h] ebx +
mov [ebp-10h] ebx +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov [ebp-14h] eax +
cmp eax ebx +
jnz loc_10D0706  +
push 8000FFFFh  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
jmp loc_10D08CA  +
push 80070057h  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-38h] +
push dword ptr [edi+18h]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_100CB6E  +
push eax  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call ds:??4SC@mmcerror@@QAEAAV01@ABV01@@Z  +
lea ecx [ebp-38h] +
mov [ebp-4] bl +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov esi ds:?ToHr@SC@mmcerror@@QBEJXZ +
lea ecx [ebp-28h] +
call esi  +
cmp eax ebx +
jge loc_10D077A  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D08CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D08CA  +
push eax  +
push offset dword_106DAD0  +
push 2Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10A4E26  +
jmp loc_10D08CA  +
mov ecx [edi+18h] +
lea eax [ebp-10h] +
push eax  +
push ebx  +
push dword ptr [ebp-14h]  +
push ebx  +
push off_10FD42C  +
call ?CreateElement@DUIXmlParser@DirectUI@@QAEJPBGPAVElement@2@1PAKPAPAV32@@Z  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call esi  +
cmp eax ebx +
jge loc_10D07CB  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D08CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D08CA  +
push eax  +
push offset dword_106DAD0  +
push 2Bh  +
jmp loc_10D076A  +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_10D06F3  +
movzx eax word ptr [edi+38h] +
push eax  +
call ?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov [ebp+8] eax +
cmp eax ebx +
jz loc_10D06F3  +
push ebx  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push ebx  +
push ebx  +
push eax  +
call ?ContentProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
push eax  +
push 2  +
mov ecx edi +
call sub_100D704  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call esi  +
cmp eax ebx +
jge loc_10D0840  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D08CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D08CA  +
push eax  +
push offset dword_106DAD0  +
push 2Ch  +
jmp loc_10D076A  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
push 29h  +
push dword ptr [ebp+8]  +
call sub_100D4ED  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call esi  +
cmp eax ebx +
jge loc_10D0884  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D08CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D08CA  +
push eax  +
push offset dword_106DAD0  +
push 2Dh  +
jmp loc_10D076A  +
push dword ptr [ebp-10h]  +
mov ecx [ebp-14h] +
call ?Add@Element@DirectUI@@QAEJPAV12@@Z  +
push eax  +
lea ecx [ebp-28h] +
call ds:??4SC@mmcerror@@QAEAAV01@J@Z  +
lea ecx [ebp-28h] +
call esi  +
cmp eax ebx +
jge loc_10D08C4  +
mov ecx lpDst +
cmp ecx offset lpDst +
jz loc_10D08CA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10D08CA  +
push eax  +
push offset dword_106DAD0  +
push 2Eh  +
jmp loc_10D076A  +
mov eax [ebp+8] +
mov [ebp-18h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-28h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
mov eax [ebp-18h] +
call sub_1001FCF  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_0] +
call dword ptr [eax]  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
sub eax [ecx] +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax ?Click@Button@DirectUI@@SG?AVUID@@XZ +
push esi  +
push edi  +
mov edi [ebp+8] +
mov [ebp-4] eax +
lea eax [edi+4] +
push eax  +
lea eax [ebp-4] +
push eax  +
mov esi ecx +
call sub_10D093B  +
test al al +
jz loc_10D0A4F  +
and dword ptr [ebp+8] 0 +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
call ?GetChildren@Element@DirectUI@@QAEPAV?$DynamicArray@PAVElement@DirectUI@@$0A@@2@PAPAVValue@2@@Z  +
mov [ebp-8] eax +
test eax eax +
jz loc_10D0A42  +
test dword ptr [eax] 0FFFFFFFh +
jbe loc_10D0A42  +
push ebx  +
push 0  +
mov ecx eax +
call sub_10170E8  +
push dword ptr [edi]  +
mov ebx [eax] +
mov ecx esi +
call ?GetImmediateChild@Element@DirectUI@@QAEPAV12@PAV12@@Z  +
cmp ebx eax +
jnz loc_10D0A2C  +
mov ecx esi +
call ?GetSelected@Element@DirectUI@@QAE_NXZ  +
mov bl al +
neg bl  +
sbb bl bl +
inc bl  +
mov [ebp-4] bl +
push dword ptr [ebp-4]  +
mov ecx esi +
call ?SetSelected@Element@DirectUI@@QAEJ_N@Z  +
xor eax eax +
test bl bl +
setz al  +
dec eax  +
and eax 0FFFFFE00h +
add eax 400h +
push eax  +
call ?CreateInt@Value@DirectUI@@SGPAV12@H@Z  +
mov ebx eax +
test ebx ebx +
jz loc_10D0A3D  +
mov ecx [ebp-8] +
push 0  +
call sub_10170E8  +
mov ecx [eax] +
push ebx  +
push 1  +
push ?AccStateProp@Element@DirectUI@@SGPBUPropertyInfo@2@XZ  +
call ?SetValue@Element@DirectUI@@QAEJP6GPBUPropertyInfo@2@XZHPAVValue@2@@Z  +
mov ecx ebx +
call ?Release@Value@DirectUI@@QAEXXZ  +
jmp loc_10D0A3D  +
mov eax [esi+7Ch] +
test eax eax +
jz loc_10D0A41  +
push dword ptr [esi+80h]  +
push dword ptr [edi]  +
call eax  +
mov byte ptr [edi+8] 1 +
pop ebx  +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_10D0A4F  +
call ?Release@Value@DirectUI@@QAEXXZ  +
push edi  +
mov ecx esi +
call ?OnEvent@Element@DirectUI@@UAEXPAUEvent@2@@Z  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov [ebp+lpDst] eax +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor esi esi +
push esi  +
push offset SubKey  +
push 80000000h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_10D0BA9  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Src] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push esi  +
push [ebp+hKey]  +
mov edi 104h +
mov [ebp+cbData] edi +
mov [ebp+Type] 1 +
call ds:RegQueryValueExA  +
test eax eax +
jnz loc_10D0B98  +
cmp [ebp+Type] 2 +
mov [ebp+var_5] al +
lea eax [ebp+Src] +
jnz loc_10D0B82  +
push edi  +
push [ebp+lpDst]  +
push eax  +
call ds:ExpandEnvironmentStringsA  +
dec eax  +
lea ecx [edi-1] +
cmp ecx eax +
sbb esi esi +
inc esi  +
jmp loc_10D0B98  +
push eax  +
push edi  +
push [ebp+lpDst]  +
call sub_10374F5  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov esi ecx +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax esi +
pop edi  +
jmp loc_10D0BAB  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002492  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_10F52D8 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx dword_10FD958 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test ecx ecx +
jnz loc_10D0C7C  +
cmp dword_10FD954 ecx +
jnz loc_10D0C7C  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_10D0AD4  +
mov esi ds:LoadLibraryA +
test eax eax +
jz loc_10D0C51  +
lea eax [ebp+LibFileName] +
push eax  +
call esi  +
mov dword_10FD958 eax +
mov ecx dword_10FD958 +
test ecx ecx +
jnz loc_10D0C7C  +
push offset aHhctrl_ocx  +
call esi  +
mov ecx eax +
mov dword_10FD958 ecx +
test ecx ecx +
jnz loc_10D0C7C  +
mov dword_10FD954 1 +
xor eax eax +
jmp loc_10D0CA1  +
mov eax dword_10FD950 +
test eax eax +
jnz loc_10D0C97  +
push 0Fh  +
push ecx  +
call ds:__imp_GetProcAddress  +
mov dword_10FD950 eax +
test eax eax +
jz loc_10D0C6E  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push ebx  +
push edi  +
call eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002492  +
leave   +
retn 10h  +
***
jmp ?IsRTLReading@Element@DirectUI@@UAE_NXZ  +
***
jmp ?IsContentProtected@Element@DirectUI@@UAE_NXZ  +
***
jmp ?GetContentStringAsDisplayed@Element@DirectUI@@UAEPBGPAPAVValue@2@@Z  +
***
jmp ?OnPropertyChanging@Element@DirectUI@@UAE_NPAUPropertyInfo@2@HPAVValue@2@1@Z  +
***
adc [ebx+esi*8-6F6F6F01h] bl +
nop   +
nop   +
jmp ?OnPropertyChanged@Element@DirectUI@@UAEXPAUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ?OnInput@Button@DirectUI@@UAEXPAUInputEvent@2@@Z  +
***
jmp ?OnKeyFocusMoved@Element@DirectUI@@UAEXPAV12@0@Z  +
***
jmp ?OnMouseFocusMoved@Element@DirectUI@@UAEXPAV12@0@Z  +
***
mov esp 90FFF39Bh +
nop   +
nop   +
nop   +
nop   +
jmp ?OnEvent@Element@DirectUI@@UAEXPAUEvent@2@@Z  +
***
jmp ?GetContentSize@Element@DirectUI@@UAE?AUtagSIZE@@HHPAVSurface@2@@Z  +
***
jmp ?Remove@Element@DirectUI@@UAEJPAPAV12@I@Z  +
***
jmp ?GetAdjacent@Element@DirectUI@@UAEPAV12@PAV12@HPBUNavReference@2@K@Z  +
***
push 90FFF39Bh  +
nop   +
nop   +
nop   +
nop   +
jmp ?EnsureVisible@Element@DirectUI@@UAE_NHHHH@Z  +
***
jmp ?SetKeyFocus@Element@DirectUI@@UAEXXZ  +
***
jmp ?QueryInterface@Element@DirectUI@@UAGJABU_GUID@@PAPAX@Z  +
***
jmp ?_SelfLayoutDoLayout@Element@DirectUI@@MAEXHH@Z  +
***
jmp ?_SelfLayoutUpdateDesiredSize@Element@DirectUI@@MAE?AUtagSIZE@@HHPAVSurface@2@@Z  +
***
jmp ?UpdateTooltip@Element@DirectUI@@MAEXPAV12@@Z  +
***
jmp ?ActivateTooltip@Element@DirectUI@@MAEXPAV12@K@Z  +
***
jmp ?RemoveTooltip@Element@DirectUI@@MAEXPAV12@@Z  +
***
rcr byte ptr [edx-6F6F000Dh] 90h +
nop   +
nop   +
jmp ?GetKeyFocused@Element@DirectUI@@UAE_NXZ  +
***
jmp ?GetAccessibleImpl@Element@DirectUI@@UAEJPAPAUIAccessible@@@Z  +
***
jmp ?DefaultAction@Button@DirectUI@@UAEJXZ  +
***
jmp ?GetElementProviderImpl@Element@DirectUI@@UAEJPAVInvokeHelper@2@PAPAVElementProvider@2@@Z  +
***
jmp ?HandleUiaEventListener@Element@DirectUI@@UAEXPAUEvent@2@@Z  +
***
jmp ?OnLostDialogFocus@Button@DirectUI@@UAE_NPAVDialogElement@2@@Z  +
***
jmp ?OnReceivedDialogFocus@Button@DirectUI@@UAE_NPAVDialogElement@2@@Z  +
***
jmp ?AddChild@ClassInfoBase@DirectUI@@UAEXXZ  +
***
sbb [edx-6F6F000Dh] bl +
nop   +
nop   +
nop   +
jmp ?RemoveChild@ClassInfoBase@DirectUI@@UAEXXZ  +
***
jmp ?GetChildren@ClassInfoBase@DirectUI@@UBEHXZ  +
***
jmp ?AssertPIZeroRef@ClassInfoBase@DirectUI@@UBEXXZ  +
***
jmp ?OnInput@Element@DirectUI@@UAEXPAUInputEvent@2@@Z  +
***
jmp ?DefaultAction@Element@DirectUI@@UAEJXZ  +
***
sbb [eax-1] esi +
jmp dword ptr [edx]  +
***
and eax 0FFFFFFFEh +
mov dword_10F52F4 eax +
retn   +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-120h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-0ECh] +
and eax 1 +
jz locret_10D135F  +
and dword ptr [ebp-0ECh] 0FFFFFFFEh +
mov ecx [ebp-110h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
or [esi-1] ebp +
jmp dword ptr [edx]  +
***
sbb [ebp-1] ebp +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp+0Bh] +
jmp sub_1020056  +
***
lea ecx [ebp-24h] +
jmp sub_100A77D  +
***
and eax 0FFFFFFFEh +
mov dword_10F52F8 eax +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-20h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
xor [ebx-1] ebp +
jmp dword ptr [edx]  +
***
cmp [ecx-1] ebp +
jmp dword ptr [edx]  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-22Ch] +
jmp sub_1021315  +
***
lea ecx [ebp-21Ch] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-220h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-21Ch] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-21Ch] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-21Ch] +
jmp ??1CString@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-20h] +
jmp sub_1021315  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D1947  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
sub [esi-1] esp +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D1CD4  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-10h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp+0Ch] +
jmp ??1CString@@QAE@XZ  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp-10h]  +
call sub_1070370  +
retn   +
***
push dword ptr [ebp-10h]  +
call sub_1070370  +
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D1E8B  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax dword_10F52FC +
and eax 0FFFFFFFEh +
mov dword_10F52FC eax +
retn   +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D1F99  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
push offset loc_1053549  +
push 1  +
push 10h  +
lea eax [ebp-30h] +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax dword_10FD448 +
and eax 0FFFFFFFEh +
mov dword_10FD448 eax +
retn   +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D2029  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-50h] +
jmp sub_100EBF1  +
***
push offset loc_1053549  +
push 2  +
push 10h  +
lea eax [ebp-50h] +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax dword_10FD460 +
and eax 0FFFFFFFEh +
mov dword_10FD460 eax +
retn   +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D20C1  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
push offset loc_1053549  +
push 1  +
push 10h  +
lea eax [ebp-30h] +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax dword_10FD478 +
and eax 0FFFFFFFEh +
mov dword_10FD478 eax +
retn   +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D2151  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-50h] +
jmp sub_100EBF1  +
***
push offset loc_1053549  +
push 2  +
push 10h  +
lea eax [ebp-50h] +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax dword_10FD490 +
and eax 0FFFFFFFEh +
mov dword_10FD490 eax +
retn   +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D21E9  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-50h] +
jmp sub_100EBF1  +
***
push offset loc_1053549  +
push 2  +
push 10h  +
lea eax [ebp-50h] +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax dword_10FD4A8 +
and eax 0FFFFFFFEh +
mov dword_10FD4A8 eax +
retn   +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D2281  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
push offset loc_1053549  +
push 1  +
push 10h  +
lea eax [ebp-30h] +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax dword_10FD4C0 +
and eax 0FFFFFFFEh +
mov dword_10FD4C0 eax +
retn   +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D2311  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
push offset loc_1053549  +
push 1  +
push 10h  +
lea eax [ebp-30h] +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax dword_10FD4D8 +
and eax 0FFFFFFFEh +
mov dword_10FD4D8 eax +
retn   +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D23A1  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-50h] +
jmp sub_100EBF1  +
***
push offset loc_1053549  +
push 2  +
push 10h  +
lea eax [ebp-50h] +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax dword_10FD4F0 +
and eax 0FFFFFFFEh +
mov dword_10FD4F0 eax +
retn   +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D2439  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-50h] +
jmp sub_100EBF1  +
***
push offset loc_1053549  +
push 2  +
push 10h  +
lea eax [ebp-50h] +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax dword_10FD508 +
and eax 0FFFFFFFEh +
mov dword_10FD508 eax +
retn   +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D24D1  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
push offset loc_1053549  +
push 1  +
push 10h  +
lea eax [ebp-30h] +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax dword_10FD520 +
and eax 0FFFFFFFEh +
mov dword_10FD520 eax +
retn   +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D2561  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax dword_10FD538 +
and eax 0FFFFFFFEh +
mov dword_10FD538 eax +
retn   +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D25DD  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
push offset loc_1053549  +
push 1  +
push 10h  +
lea eax [ebp-30h] +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-18h] +
and eax 1 +
jz locret_10D2677  +
and dword ptr [ebp-18h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
xor [edx-1] ebx +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D281C  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
mov eax [ebp-10h] +
and eax 2 +
jz locret_10D2832  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-5Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
retn   +
***
lea ecx [ebp-5Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D2907  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
mov eax [ebp-10h] +
and eax 8 +
jz locret_10D2948  +
and dword ptr [ebp-10h] 0FFFFFFF7h +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lods   +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D29D0  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
mov eax [ebp-10h] +
and eax 2 +
jz locret_10D29E6  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
retn   +
***
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
cmp [edi-1] edx +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D2AA8  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
mov eax [ebp-10h] +
and eax 2 +
jz locret_10D2ABE  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-58h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
retn   +
***
lea ecx [ebp-58h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-58h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D2B83  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
lea ecx [ebp-50h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
mov eax [ebp-10h] +
and eax 8 +
jz locret_10D2BC4  +
and dword ptr [ebp-10h] 0FFFFFFF7h +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-50h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
sar bh 1 +
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D2CB3  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
mov eax [ebp-10h] +
and eax 8 +
jz locret_10D2CF4  +
and dword ptr [ebp-10h] 0FFFFFFF7h +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lods   +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
xor [ebx-1] edx +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp sub_1021315  +
***
lea ecx [ebp+0Bh] +
jmp sub_1020056  +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
cmp [ecx-1] edx +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D338C  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D33F8  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-14h] +
jmp ??1CString@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D346C  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-10h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-18h] +
jmp ??1CString@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D34DF  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
mov eax [ebp-14h] +
and eax 2 +
jz locret_10D34F5  +
and dword ptr [ebp-14h] 0FFFFFFFDh +
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-14h] +
jmp ??1CString@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D35F0  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D3668  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D36F8  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ??1CString@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-14h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-10h] +
jmp ??1CString@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp-14h]  +
call sub_1070370  +
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
idiv  bh +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp-10h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-20h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-20h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
shr cl 1 +
mov ebx 8DFFF6F4h +
dec ebp  +
int 3  +
jmp sub_100EBDB  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp sub_102DE27  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-14h] +
jmp sub_102CA5B  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-1Ch] +
jmp sub_102CA5B  +
***
lea ecx [ebp-50h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D436F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D43E3  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
cmc   +
cmp al 0FFh +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0Dh] +
jmp ds:??1?$CEventLock@UAppEvents@@@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D44F5  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D45BB  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0Dh] +
jmp ds:??1?$CEventLock@UAppEvents@@@@QAE@XZ  +
***
lea ecx [ebp-70h] +
jmp sub_100A77D  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp sub_101D546  +
***
mov ah 0FFh +
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
or al 0E9h +
retf   +
***
stc   +
dec dword ptr [ebp+5EE9E44Dh]  +
retf   +
***
stc   +
dec dword ptr [ebp+56E90C4Dh]  +
retf   +
***
mov ah 0FFh +
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-5Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-18h] +
and eax 1 +
jz locret_10D46BD  +
and dword ptr [ebp-18h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D477A  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp sub_107B802  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lods   +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp sub_107CE42  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-5Ch] +
jmp sub_101EB25  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-20h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-60h] +
jmp sub_100A77D  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-70h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-20h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D4E74  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-10h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
xchg eax ecx +
xor bh bh +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D4F50  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D4FD8  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D50B4  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-18h] +
jmp ??1CString@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D513C  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D51A8  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D5244  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D52BC  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
or bh bh +
and eax offset ??1SC@mmcerror@@QAE@XZ +
retn   +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
or bh bh +
and eax offset ??1SC@mmcerror@@QAE@XZ +
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D5570  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D5600  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-7F0h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-7ECh] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-7ECh] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-828h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-800h] +
and eax 1 +
jz locret_10D5700  +
and dword ptr [ebp-800h] 0FFFFFFFEh +
mov ecx [ebp-7F8h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-7E8h] +
jmp sub_10C1811  +
***
lea ecx [ebp-7F1h] +
jmp sub_1020056  +
***
lea ecx [ebp-7ECh] +
jmp ??1CString@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D5804  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D5870  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D58F0  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-14h] +
jmp ??1CString@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D5AFC  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-20h] +
jmp sub_1084F74  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D5B84  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D5BF8  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
mov eax [ebp-454h] +
and eax 1 +
jz locret_10D5C73  +
and dword ptr [ebp-454h] 0FFFFFFFEh +
mov ecx [ebp-430h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-47Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-450h] +
jmp ??1CString@@QAE@XZ  +
***
push dword ptr [ebp-468h]  +
call sub_100F30B  +
pop ecx  +
retn   +
***
lea ecx [ebp-47Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-424h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-444h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-46Ch] +
jmp ??1CString@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D5D9B  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D5E3F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-50h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
popa   +
and bh bh +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D5F80  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov esp 1C5425FFh +
add [ecx] al +
retn   +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D601B  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp+0Ch] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
or bh bh +
and eax offset ??1SC@mmcerror@@QAE@XZ +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
or bh bh +
and eax offset ??1SC@mmcerror@@QAE@XZ +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-10h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D62A0  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
or bh bh +
and eax offset ??1SC@mmcerror@@QAE@XZ +
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-58h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-68h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-78h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-88h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-88h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D647C  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D650C  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
or bh bh +
and eax offset ??1SC@mmcerror@@QAE@XZ +
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
leave   +
sbb edi edi +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D6620  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-18h] +
and eax 1 +
jz locret_10D668F  +
and dword ptr [ebp-18h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D66F3  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov ecx gs +
add eax 8DFFFAEBh +
dec ebp  +
aam  0FFh +
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D691B  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-10h] +
jmp sub_100C763  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D6998  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp+0Bh] +
jmp sub_1020056  +
***
lea ecx [ebp-10h] +
jmp sub_100C763  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D6A0B  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-18h] +
jmp sub_100C763  +
***
lea ecx [ebp-14h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
or [ebp+4A8B0C42h] cl +
mov esp 88E8C833h +
mov ecx 14B8FFF2h +
imul ecx ds:167DE901h +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp sub_101EB25  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D6CA4  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
push offset ??1CString@@QAE@XZ  +
push 2  +
push 4  +
lea eax [ebp-28h] +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-1Ch] +
jmp sub_103B009  +
***
lods   +
adc al 0FFh +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-28h] +
and eax 1 +
jz locret_10D6D34  +
and dword ptr [ebp-28h] 0FFFFFFFEh +
mov ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
mov eax [ebp-0B0h] +
and eax 1 +
jz locret_10D6DB7  +
and dword ptr [ebp-0B0h] 0FFFFFFFEh +
mov ecx [ebp-0ACh] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-0A8h] +
jmp sub_100F341  +
***
lea ecx [ebp-0D8h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0D8h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D6E5C  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
push dword ptr [ebp-18h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
lea ecx [ebp-14h] +
jmp sub_1023205  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
cmc   +
adc bh bh +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D6EEC  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
push dword ptr [ebp-18h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
lea ecx [ebp+10h] +
jmp sub_1023205  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D7160  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-14h] +
jmp sub_100C763  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 2 +
jz locret_10D7187  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-8Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-6Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-5Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-7Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-9Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D7498  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D76D4  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D77EB  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D7857  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
icebp   +
or bh bh +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D79BB  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-18h] +
and eax 1 +
jz locret_10D7A7F  +
and dword ptr [ebp-18h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
rol dword ptr [esi] 0FFh +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D7B9C  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D7C0B  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D7C8B  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-1Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-5Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-6Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D7DDF  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
icebp   +
add bh bh +
jmp dword ptr [edx]  +
***
lods   +
add bh bh +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D7FE4  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-18h] +
and eax 1 +
jz locret_10D80A0  +
and dword ptr [ebp-18h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-18h] +
and eax 1 +
jz locret_10D8130  +
and dword ptr [ebp-18h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-18h] +
and eax 1 +
jz locret_10D81C0  +
and dword ptr [ebp-18h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D825A  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-0F8h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-0D8h] +
and eax 1 +
jz locret_10D8337  +
and dword ptr [ebp-0D8h] 0FFFFFFFEh +
mov ecx [ebp-104h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-0D0h] +
jmp sub_1051893  +
***
lea ecx [ebp-0F8h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0F8h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0F8h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0F8h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-98h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp+8]  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
lea ecx [ebp+8] +
jmp sub_1023205  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-120h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-120h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0ECh] +
jmp sub_1051893  +
***
lea ecx [ebp-120h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0D8h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D874F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D87C3  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-118h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-0F8h] +
and eax 1 +
jz locret_10D898F  +
and dword ptr [ebp-0F8h] 0FFFFFFFEh +
mov ecx [ebp-0F0h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-0ECh] +
jmp sub_1051893  +
***
lea ecx [ebp-118h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
dec ebp  +
aam  0E9h +
stos dword ptr es:[edi]  +
idiv  bh +
lea ecx [ebp-118h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0F4h] +
jmp loc_105319B  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-20h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-28h] +
and eax 1 +
jz locret_10D8A48  +
and dword ptr [ebp-28h] 0FFFFFFFEh +
mov ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-20h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-20h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-20h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D8AE4  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp sub_100A77D  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D8BD8  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-20h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-48h] +
and eax 1 +
jz locret_10D8F48  +
and dword ptr [ebp-48h] 0FFFFFFFEh +
mov ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-20h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-5Ch] +
jmp sub_1026951  +
***
lea ecx [ebp-20h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-0C4h] +
and eax 1 +
jz locret_10D9174  +
and dword ptr [ebp-0C4h] 0FFFFFFFEh +
mov ecx [ebp-0B0h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0ACh] +
jmp sub_100F341  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-17Ch] +
jmp sub_100F341  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D927B  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
call ds:??1SC@mmcerror@@QAE@XZ  +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D92F4  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp-14h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D938F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-88h] +
jmp sub_100F341  +
***
lea ecx [ebp-0B4h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0B4h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0B4h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
xchg eax ecx +
jmp loc_10D95FD  +
***
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-28h] +
jmp sub_100BF07  +
***
lea ecx [ebp-30h] +
jmp sub_100BF07  +
***
lea ecx [ebp-14h] +
jmp ??1CString@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D96BB  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10D99E0  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp sub_100A77D  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp sub_100A77D  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-20h] +
jmp ??1CImageList@@UAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
push dword ptr [ebp-20h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-50h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10D9F11  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-58h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DA43F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DA50B  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DA578  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DA608  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DA680  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DA6F8  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DA770  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DA7F0  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DA868  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DA916  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DA984  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
or bh bh +
and eax offset ??1SC@mmcerror@@QAE@XZ +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-58h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-1Ch] +
and eax 1 +
jz locret_10DAB94  +
and dword ptr [ebp-1Ch] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-58h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DAC1F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DAC9F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DAD13  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DADEF  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp+0Ch] +
jmp loc_105319B  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
popf   +
sar dh cl +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DAF4B  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DB228  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DB29F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DB3DF  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
retf   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DB867  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DB9C0  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DBA48  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-48h] +
jmp sub_1019E14  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DBAD0  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp sub_1019E14  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 2 +
jz locret_10DBB12  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DBB8F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10DBBF3  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp sub_100E847  +
***
lea ecx [ebp-68h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-68h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DBC8B  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DBDF6  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp sub_10A04FF  +
***
retn   +
***
retn 0FFFEh  +
***
retn 0FFFEh  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10DBF77  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DC0EA  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
lea ecx [ebp-34h] +
jmp sub_109BF1F  +
***
retn   +
***
mov eax [ebp-10h] +
and eax 2 +
jz locret_10DC100  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp sub_109BF1F  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DC1F0  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DC280  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10DC2F7  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax 0FFFFFFFEh +
mov dword_10F5350 eax +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp-14h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax 0FFFFFFFEh +
mov dword_10FD590 eax +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DC727  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10DC78B  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-64h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-28h] +
and eax 1 +
jz locret_10DC880  +
and dword ptr [ebp-28h] 0FFFFFFFEh +
mov ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-64h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-64h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DC968  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DCC8F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10DCD1F  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
dec ebp  +
mov ah 0FEh +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DCD94  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-10h] +
jmp ??1CString@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10DCE13  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-1Ch] +
jmp sub_100BF07  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DCE7F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
leave   +
mov dl 0FEh +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10DCF18  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 2 +
jz locret_10DCF37  +
and dword ptr [ebp-14h] 0FFFFFFFDh +
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DCFAC  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10DD0C7  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DD298  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10DD317  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
pop ecx  +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp-14h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-134h] +
jmp sub_10AA37E  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-90h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-1Ch] +
jmp sub_100BF07  +
***
lea ecx [ebp-10h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-14h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-14h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp sub_100A67D  +
***
lea ecx [ebp-84h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-94h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-64h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-74h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp sub_1023CCB  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DE0F3  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DE1C4  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DE463  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DE5A0  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-44h] +
jmp sub_100A77D  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-180h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DE88B  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-14h] +
jmp sub_1023205  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax 0FFFFFFFEh +
mov dword_10FD674 eax +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-14h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-10h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp+0Ch] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1?$CEventLock@UAppEvents@@@@QAE@XZ  +
***
jmp ds:??1?$CEventLock@UAppEvents@@@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10DEAF8  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10DEB64  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DED5F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-64h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp-10h]  +
call sub_1070370  +
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp-10h]  +
call sub_1070370  +
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp+8]  +
call sub_1070370  +
retn   +
***
push dword ptr [ebp+8]  +
call sub_1070370  +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DF1BB  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10DF238  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
pop ecx  +
pop ecx  +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DF433  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
mov eax [ebp-10h] +
and eax 2 +
jz locret_10DF449  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
and eax 0FFFFFFFEh +
mov dword_10FD684 eax +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-20h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-30h] +
and eax 1 +
jz locret_10DF5E8  +
and dword ptr [ebp-30h] 0FFFFFFFEh +
mov ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
stc   +
mov bh dh +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-13Ch] +
jmp sub_10B6B70  +
***
lea ecx [ebp-88h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-78h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-98h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0E0h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0A8h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DFC27  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DFDF3  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-20h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10DFF27  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-58h] +
jmp sub_10B805F  +
***
lea ecx [ebp-8Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-60h] +
and eax 1 +
jz locret_10E0057  +
and dword ptr [ebp-60h] 0FFFFFFFEh +
mov ecx [ebp-5Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
or bh bh +
and eax offset ??1SC@mmcerror@@QAE@XZ +
retn   +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
cmc   +
jg loc_10E0199  +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
or bh bh +
and eax offset ??1SC@mmcerror@@QAE@XZ +
retn   +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E027C  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
xor [esi-2] edi +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E0413  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
push ecx  +
jge loc_10E043D  +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
or bh bh +
and eax offset ??1SC@mmcerror@@QAE@XZ +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-0B8h] +
jmp ??1CWindowDC@@UAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
leave   +
jns loc_10E07C5  +
jmp dword ptr [edx]  +
***
cmp [eax-2] edi +
jmp dword ptr [edx]  +
***
cmc   +
ja loc_10E0999  +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E0BCF  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
pop ecx  +
jnz loc_10E0C35  +
jmp dword ptr [edx]  +
***
lods   +
jz loc_10E0CE1  +
jmp dword ptr [edx]  +
***
xchg eax ecx +
jnb loc_10E0DFD  +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-60h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-28h] +
and eax 1 +
jz locret_10E0EB0  +
and dword ptr [ebp-28h] 0FFFFFFFEh +
mov ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-60h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-60h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-60h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-60h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-60h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-60h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E0F70  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E1013  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov [eax-2] esi +
jmp dword ptr [edx]  +
***
jmp fword ptr (byte_10F4DFF-10F4E1Ah)[eax]  +
***
mov ds:46A0100h eax +
push 4  +
mov eax [ebp-14h] +
add eax 1F8h +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-10h] +
jmp ??1CString@@QAE@XZ  +
***
sub [esi-2] ebp +
jmp dword ptr [edx]  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-299h] +
jmp sub_1020056  +
***
mov eax [ebp-2BCh] +
and eax 1 +
jz locret_10E1432  +
and dword ptr [ebp-2BCh] 0FFFFFFFEh +
mov ecx [ebp-2B4h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-2C0h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-2BCh] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-2B5h] +
jmp sub_1020056  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E15BB  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-18h] +
and eax 1 +
jz locret_10E164B  +
and dword ptr [ebp-18h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lods   +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-64h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-84h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push 3  +
push 4  +
lea eax [ebp-24h] +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-10h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-18h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp+8] +
jmp ??1CString@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-20h] +
and eax 1 +
jz locret_10E1893  +
and dword ptr [ebp-20h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-120h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0C0h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-60h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-100h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-80h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0E0h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0A0h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-50h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-70h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-90h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0B0h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0D0h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0F0h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-110h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-130h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E19B3  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
mov eax [ebp-10h] +
and eax 2 +
jz locret_10E19C9  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
mov eax [ebp-10h] +
and eax 4 +
jz locret_10E19DF  +
and dword ptr [ebp-10h] 0FFFFFFFBh +
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E1A4C  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
push (offset loc_10434CE+7)  +
push 12h  +
push 1Ch  +
lea eax [ebp-400h] +
push eax  +
call sub_100C964  +
retn   +
***
push (offset loc_10434CE+7)  +
push 12h  +
push 1Ch  +
lea eax [ebp-208h] +
push eax  +
call sub_100C964  +
retn   +
***
lea ecx [ebp-43Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-40Ch] +
and eax 1 +
jz locret_10E1B07  +
and dword ptr [ebp-40Ch] 0FFFFFFFEh +
mov ecx [ebp-404h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E1B77  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E1BEF  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 2 +
jz locret_10E1C28  +
and dword ptr [ebp-10h] 0FFFFFFFDh +
lea ecx [ebp-50h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
mov eax [ebp-10h] +
and eax 4 +
jz locret_10E1C3E  +
and dword ptr [ebp-10h] 0FFFFFFFBh +
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retf   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and [ebx-2] esp +
jmp dword ptr [edx]  +
***
frstor  byte ptr [edx-2] +
jmp dword ptr [edx]  +
***
adc [edx-2] esp +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E200B  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp sub_100B8F1  +
***
lea ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E2320  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-20h] +
jmp sub_100B8F1  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E2401  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E2700  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
test [eax-2] ebx +
jmp dword ptr [edx]  +
***
sbb [esi-2] edx +
jmp dword ptr [edx]  +
***
and eax 0FFFFFFFEh +
mov dword_10F536C eax +
retn   +
***
and eax 0FFFFFFFEh +
mov dword_10F5370 eax +
retn   +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-0F0h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-98h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-0B0h] +
jmp ??1CString@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-14h] +
jmp sub_100BF07  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax 0FFFFFFFEh +
mov dword_10FD698 eax +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E2FA4  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
rcl dword ptr [ecx-2] 1 +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-30h] +
and eax 1 +
jz locret_10E300F  +
and dword ptr [ebp-30h] 0FFFFFFFEh +
mov ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E3087  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E30FC  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E3173  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-2Ch] +
and eax 1 +
jz locret_10E31F4  +
and dword ptr [ebp-2Ch] 0FFFFFFFEh +
mov ecx [ebp-28h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-54h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E3284  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-1Ch] +
and eax 1 +
jz locret_10E3304  +
and dword ptr [ebp-1Ch] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-50h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E338C  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-48h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E3414  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-14h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E3608  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E3688  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E3708  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E377F  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E38B0  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-0F8h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-0C0h] +
and eax 1 +
jz locret_10E39CB  +
and dword ptr [ebp-0C0h] 0FFFFFFFEh +
mov ecx [ebp-0BCh] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-0F8h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0B8h] +
jmp sub_1016310  +
***
lea ecx [ebp-64h] +
jmp sub_1016310  +
***
lea ecx [ebp-0F8h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E3A78  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E3AEF  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp+0Bh] +
jmp sub_1020056  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-18h] +
and eax 1 +
jz locret_10E3C6C  +
and dword ptr [ebp-18h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-14h] +
jmp sub_100E76D  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E3D5D  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0Dh] +
jmp ds:??1?$CEventLock@UAppEvents@@@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E40C4  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp+8]  +
call sub_1070370  +
retn   +
***
push dword ptr [ebp+8]  +
call sub_1070370  +
retn   +
***
push dword ptr [ebp+8]  +
call sub_1070370  +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 2 +
jz locret_10E441F  +
and dword ptr [ebp-14h] 0FFFFFFFDh +
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-70h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp+8] +
jmp loc_105319B  +
***
lea ecx [ebp-50h] +
jmp sub_100EBF1  +
***
lea ecx [ebp-60h] +
jmp sub_100EBF1  +
***
lea ecx [ebp-40h] +
jmp sub_100EBF1  +
***
lea ecx [ebp-30h] +
jmp sub_100EBF1  +
***
cmc   +
cmp bh dh +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E46EC  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-10h] +
jmp sub_100C763  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-18h] +
and eax 1 +
jz locret_10E4A80  +
and dword ptr [ebp-18h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-14h] +
jmp loc_105319B  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp+8] +
jmp loc_105319B  +
***
lea ecx [ebp-30h] +
jmp sub_100EBF1  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E4E0C  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp+0Ch] +
jmp loc_105319B  +
***
popa   +
xor edi esi +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E4F27  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E4FA7  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-5Ch] +
and eax 1 +
jz locret_10E508B  +
and dword ptr [ebp-5Ch] 0FFFFFFFEh +
mov ecx [ebp-58h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E512C  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp sub_100EBF1  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-94h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-7Ch] +
and eax 1 +
jz locret_10E52C7  +
and dword ptr [ebp-7Ch] 0FFFFFFFEh +
mov ecx [ebp-68h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-64h] +
jmp loc_105319B  +
***
lea ecx [ebp-94h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0A4h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E53C8  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp sub_102CA5B  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E547C  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E5504  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-1Ch] +
jmp sub_102CA5B  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-4Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E5594  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp+0Ch] +
jmp sub_103DE93  +
***
lea ecx [ebp-40h] +
jmp sub_102DE27  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-24h] +
jmp sub_102CA5B  +
***
lea ecx [ebp-60h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
popa   +
sub edi esi +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E5680  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp sub_102DE27  +
***
lea ecx [ebp-24h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E5710  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-50h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-60h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E58A3  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp+0Ch] +
jmp loc_105319B  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-10h] +
jmp loc_105319B  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E5934  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
or [ebp+4A8B0C42h] cl +
enter 0FFFFC833h 0E8h +
dec esp  +
retf   +
***
inc ecx  +
sub dh bh +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-78h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-44h] +
and eax 1 +
jz locret_10E59A0  +
and dword ptr [ebp-44h] 0FFFFFFFEh +
mov ecx [ebp-68h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp sub_103DE93  +
***
lea ecx [ebp-3Ch] +
jmp sub_103B009  +
***
and eax offset ??1SC@mmcerror@@QAE@XZ +
mov eax [ebp-220h] +
and eax 1 +
jz locret_10E5A2B  +
and dword ptr [ebp-220h] 0FFFFFFFEh +
mov ecx [ebp-21Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E5AA4  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-10h] +
jmp loc_105319B  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp+14h] +
jmp loc_105319B  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-10h] +
jmp loc_105319B  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-10h] +
jmp loc_105319B  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp sub_100A77D  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-9Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-9Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-8Ch] +
jmp sub_102DE63  +
***
lea ecx [ebp-80h] +
jmp sub_102DE27  +
***
lea ecx [ebp-0ACh] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-60h] +
jmp sub_101EB25  +
***
lea ecx [ebp-70h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-60h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E6270  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-40h] +
jmp sub_101D546  +
***
lea ecx [ebp-60h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-60h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
fsubr st st(1) +
retn 0F8AEh  +
***
mov ah 0FFh +
and eax offset ??1SC@mmcerror@@QAE@XZ +
mov eax [ebp-18h] +
and eax 1 +
jz locret_10E6370  +
and dword ptr [ebp-18h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-3Ch] +
and eax 1 +
jz locret_10E63D3  +
and dword ptr [ebp-3Ch] 0FFFFFFFEh +
mov ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-54h] +
jmp sub_101D546  +
***
lea ecx [ebp-78h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-78h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-68h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-48h] +
and eax 1 +
jz locret_10E64A8  +
and dword ptr [ebp-48h] 0FFFFFFFEh +
mov ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-68h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0ACh] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E6670  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-24h] +
jmp sub_101D546  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov esp 1C5425FFh +
add [ecx] al +
lea ecx [ebp-58h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E6718  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-14h] +
and eax 1 +
jz locret_10E67A8  +
and dword ptr [ebp-14h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-24h] +
jmp sub_101D546  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-18h] +
and eax 1 +
jz locret_10E6868  +
and dword ptr [ebp-18h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-80h] +
jmp sub_100A77D  +
***
lea ecx [ebp-58h] +
jmp sub_102CE7B  +
***
lea ecx [ebp-34h] +
jmp sub_102CE7B  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-84h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-68h] +
and eax 1 +
jz locret_10E69D3  +
and dword ptr [ebp-68h] 0FFFFFFFEh +
mov ecx [ebp-50h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
lea ecx [ebp-70h] +
jmp sub_101D546  +
***
lea ecx [ebp-84h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-84h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-0C4h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-84h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-84h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-84h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_10E71CF  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
mov ecx [ebp+8] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp-10h]  +
call sub_1070370  +
retn   +
***
push dword ptr [ebp-14h]  +
call sub_1070370  +
retn   +
***
push dword ptr [ebp-14h]  +
call sub_1070370  +
retn   +
***
push dword ptr [ebp-14h]  +
call sub_1070370  +
retn   +
***
lea ecx [ebp-44h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp+0Ch]  +
call sub_1070370  +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
cdq   +
or bh dh +
jmp dword ptr [edx]  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-14h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-10h] +
jmp ??1CString@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp-20h]  +
call sub_1070370  +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-2Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp-18h]  +
call sub_1070370  +
retn   +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp-14h]  +
call sub_1070370  +
retn   +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
push dword ptr [ebp+18h]  +
call sub_1070370  +
retn   +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-40h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-50h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-60h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-70h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-80h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-30h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-38h] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-50h] +
jmp sub_100A77D  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
lea ecx [ebp-3Ch] +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
jmp ??1CritSecLock@DirectUI@@QAE@XZ  +
***
rol dword ptr [ecx] 0FEh +
jmp dword ptr [edx]  +
***
mov ecx offset unk_10FD53C +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov ecx offset unk_10FD524 +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov ecx offset unk_10FD50C +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov ecx offset unk_10FD4F4 +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov ecx offset unk_10FD4DC +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov ecx offset unk_10FD4C4 +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov ecx offset unk_10FD4AC +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov ecx offset unk_10FD494 +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov ecx offset unk_10FD47C +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov ecx offset unk_10FD464 +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov ecx offset unk_10FD44C +
jmp ds:??1SC@mmcerror@@QAE@XZ  +
***
mov ecx offset unk_10FD588 +
jmp sub_10504ED  +
***
mov ecx offset unk_10FD668 +
jmp sub_100E847  +
***
mov ecx offset unk_10FD67C +
jmp sub_10504ED  +
***
mov ecx offset unk_10FD690 +
jmp sub_10504ED  +
***
push 0  +
push 1  +
mov ecx offset unk_10FD69C +
call sub_100CD3C  +
retn   +
***
push 0  +
push 1  +
mov ecx offset unk_10FD6B8 +
call sub_107258B  +
retn   +
***
mov dword_10FD6DC offset off_106B70C +
mov ecx offset dword_10FD6DC +
jmp ??1exception@@UAE@XZ  +
***
add eax 13000000h +
aaa   +
or eax 501h +
add [edi+esi] bl +
or eax 0FFFFFF01h +
inc ebp  +
aaa   +
or eax 1 +
add dh cl +
aaa   +
or eax 0FFFFFF01h +
jmp dword ptr ds:10D38h  +
***
add eax 3E000000h +
dec ebx  +
or eax 501h +
add [edx+4Bh] cl +
or eax 0FFFFFF01h +
jmp dword ptr [ebp+10D4Bh]  +
***
add eax 2B000000h +
stc   +
or eax 601h +
add [ecx] bh +
stc   +
or eax 701h +
add [edi-7] al +
or eax 801h +
add [ebp-7] dl +
or eax 0FFFFFF01h +
jmp fword ptr [ecx+10DF9h]  +
***
retf   +
***
push 64616572h  +
dec ecx  +
add fs:[eax] al +
retf 4802h  +
***
imul ebp [edi+6Eh] +
jmp near ptr 7574921Ah  +
***
icebp   +
retn   +
***
icebp   +
retn   +
***
pop esp  +
dec esp  +
ltr word ptr [eax+eax*2+0Fh]  +
add [esi+19h] bh +
add edi [ebx+53445352h] +
and eax 0BD7D095h +
retf   +
***
